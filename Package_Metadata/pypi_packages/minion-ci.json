{"info": {"author": "Timo Furrer", "author_email": "tuxtimo@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Utilities"], "description": "minion-ci\n=========\n|pypi| |license|\n\n**minion-ci** is a minimalist, decentralized, flexible Continuous Integration Server for hackers.\n\n|screenshot_index|\n\n\n.. contents::\n    :local:\n    :depth: 2\n    :backlinks: none\n\nQuickstart\n----------\n\nMaking your repository *minion compatible* is as easy as running this command in the root of your repository:\n\n.. code::\n\n    minion init\n\nAfter that you should modify the ``minion.yml`` file in your repository to fit your needs. Make a nice commit and run the following command to start your first job:\n\n.. code::\n\n    git minion\n    \nIf the *minion server* successfully started you can browse the web interface at http://localhost:5000\n\nInstallation\n------------\n\nIt's recommended to use pip to install minion-ci:\n\n.. code::\n\n    pip3 install minion-ci\n\n\n**MongoDB:**\nTo persist the job data *minion-ci* uses MongoDB.\nMake sure you have MongoDB installed ...\n\n.. code::\n\n    apt-get install mongodb\n    yum install mongodb\n\n... and an instance is running:\n\n.. code::\n\n    ps -ef | grep mongod\n\n... eventually start one with:\n\n.. code::\n\n    mongod\n\nminion.yml File Format\n----------------------\n\nThe **minion-ci** server will clone your repository and parse a file called **minion.yml** located\nin the root of the cloned repository. The format is really simple:\n\n.. code:: yaml\n\n    # command which is run before the real command\n    precondition: \"echo 'I was run before the test ...'\"\n    # the test command\n    command: \"echo 'This is my test...'\"\n    on:\n      # command which is run if the command was successful\n      success: \"echo 'I was run because the test was successful ...'\"\n      # command which is run if the command failed\n      failure: \"echo 'I was run because the test failed ...'\"\n\nminion.yml Receipts\n-------------------\n\nThe following few sections explain how to setup a ``minion.yml`` file for different\nkind of environments and technologies, like python virtualenvs, docker containers, etc.\n\n**Why so complicated?** ... Well it's not really complicated, isn't it? There are just to many\ndifferent styles of test environments and approaches ... I don't want to give full attention to all\nof them and support them.\nAnd anyway ... In the end your Use-Case wouldn't be supported. Thus, we provide each developer the full\ncontrol over their own test setup and environment. Setup it up how you like and run your test how you like it.\n**But**: Here are some receipts which might help you to come up with a nice minion.yml configuration:\n\nPython virtualenv\n~~~~~~~~~~~~~~~~~\n\nTo test your code in a python virtualenv base your minion.yml on the following example:\n\n.. code:: yaml\n\n    precondition: >\n      /bin/bash -c 'virtualenv env -p python3.4 &&\n      source env/bin/activate && python -m pip install . -r requirements-dev.txt'\n    command: /bin/bash -c 'source env/bin/activate && make test'\n\nMake sure you change the actual *test* command which in the example's case is ``make test``.\nYou can also easily integrate it with ``tox``. Just make sure ``tox`` is installed and run as your\ntest command.\n\nDocker\n~~~~~~\n\nTo test your code in a docker container follow the following example to setup your minion.yml:\n\n.. code:: yaml\n\n    precondition: /bin/bash -c 'docker pull ubuntu'\n    command: /bin/bash -c 'docker run -t ubuntu /bin/bash -c \"make test\"'\n\nThis will pull a new ubuntu docker image from docker hub and run ``make test`` in the container.\nYou might want to setup your own docker image in the ``precondition`` and the run this container\nin the actual ``command``:\n\n.. code:: yaml\n\n    precondition: /bin/bash -c 'docker build -t testing .'\n    command: /bin/bash -c 'docker run -t testing /bin/bash -c \"make test\"'\n\nMake sure you mount your repository, source code, test code or whatever in the container before running\nany tests.\n\nServer API\n----------\n\n+----------------+-------------+-----------------+--------------------------+\n| Route          | HTTP Method | Parameter       | Description              |\n+================+=============+=================+==========================+\n| /status        | GET         |                 | Get status of the server |\n+----------------+-------------+-----------------+--------------------------+\n| /jobs          | GET         | page,           | Get a list of all jobs   |\n|                |             | page_size       |                          |\n+----------------+-------------+-----------------+--------------------------+\n| /jobs          | POST        | repo_url,       | Create a new job         |\n|                |             | commit_hash,    |                          |\n|                |             | branch,         |                          |\n|                |             | keep_data,      |                          |\n|                |             | arbitrary data  |                          |\n+----------------+-------------+-----------------+--------------------------+\n| /jobs          | DELETE      |                 | Remove all jobs          |\n+----------------+-------------+-----------------+--------------------------+\n| /jobs/<job_id> | GET         |                 | Get a single job         |\n+----------------+-------------+-----------------+--------------------------+\n| /jobs/<job_id> | DELETE      |                 | Remove a single job      |\n+----------------+-------------+-----------------+--------------------------+\n| /stop          | POST        |                 | Stop the minion-server   |\n+----------------+-------------+-----------------+--------------------------+\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/minion-ci.svg?style=flat&label=version\n    :target: https://pypi.python.org/pypi/minion-ci\n    :alt: Latest version released on PyPi\n\n.. |license| image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat\n    :target: https://raw.githubusercontent.com/timofurrer/minion-ci/master/LICENSE\n    :alt: Package license\n\n.. |screenshot_index| image:: https://raw.githubusercontent.com/timofurrer/minion-ci/master/screenshots/index_0.0.6.jpg\n    :alt: Index Page\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/timofurrer/minion-ci", "keywords": "minion-ci", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "minion-ci", "package_url": "https://pypi.org/project/minion-ci/", "platform": "", "project_url": "https://pypi.org/project/minion-ci/", "project_urls": {"Homepage": "https://github.com/timofurrer/minion-ci"}, "release_url": "https://pypi.org/project/minion-ci/0.0.7/", "requires_dist": null, "requires_python": "", "summary": "minimalist, decentralized, flexible Continuous Integration Server for hackers", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/minion-ci\" rel=\"nofollow\"><img alt=\"Latest version released on PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78b4b8961e589ef341ac3ea1ef826fe8881648e0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d696e696f6e2d63692e7376673f7374796c653d666c6174266c6162656c3d76657273696f6e\"></a> <a href=\"https://raw.githubusercontent.com/timofurrer/minion-ci/master/LICENSE\" rel=\"nofollow\"><img alt=\"Package license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e5be039daf9eba6b6bc47b88defd227ac24d66b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c6174\"></a></p>\n<p><strong>minion-ci</strong> is a minimalist, decentralized, flexible Continuous Integration Server for hackers.</p>\n<p><img alt=\"Index Page\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c649daae7bf300b48affa17c90418a7523bf627c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74696d6f6675727265722f6d696e696f6e2d63692f6d61737465722f73637265656e73686f74732f696e6465785f302e302e362e6a7067\"></p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#quickstart\" id=\"id1\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#minion-yml-file-format\" id=\"id3\" rel=\"nofollow\">minion.yml File Format</a></li>\n<li><a href=\"#minion-yml-receipts\" id=\"id4\" rel=\"nofollow\">minion.yml Receipts</a><ul>\n<li><a href=\"#python-virtualenv\" id=\"id5\" rel=\"nofollow\">Python virtualenv</a></li>\n<li><a href=\"#docker\" id=\"id6\" rel=\"nofollow\">Docker</a></li>\n</ul>\n</li>\n<li><a href=\"#server-api\" id=\"id7\" rel=\"nofollow\">Server API</a></li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Making your repository <em>minion compatible</em> is as easy as running this command in the root of your repository:</p>\n<pre>minion init\n</pre>\n<p>After that you should modify the <tt>minion.yml</tt> file in your repository to fit your needs. Make a nice commit and run the following command to start your first job:</p>\n<pre>git minion\n</pre>\n<p>If the <em>minion server</em> successfully started you can browse the web interface at <a href=\"http://localhost:5000\" rel=\"nofollow\">http://localhost:5000</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>It\u2019s recommended to use pip to install minion-ci:</p>\n<pre>pip3 install minion-ci\n</pre>\n<p><strong>MongoDB:</strong>\nTo persist the job data <em>minion-ci</em> uses MongoDB.\nMake sure you have MongoDB installed \u2026</p>\n<pre>apt-get install mongodb\nyum install mongodb\n</pre>\n<p>\u2026 and an instance is running:</p>\n<pre>ps -ef | grep mongod\n</pre>\n<p>\u2026 eventually start one with:</p>\n<pre>mongod\n</pre>\n</div>\n<div id=\"minion-yml-file-format\">\n<h2>minion.yml File Format</h2>\n<p>The <strong>minion-ci</strong> server will clone your repository and parse a file called <strong>minion.yml</strong> located\nin the root of the cloned repository. The format is really simple:</p>\n<pre><span class=\"c1\"># command which is run before the real command</span>\n<span class=\"nt\">precondition</span><span class=\"p\">:</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">'I</span><span class=\"nv\"> </span><span class=\"s\">was</span><span class=\"nv\"> </span><span class=\"s\">run</span><span class=\"nv\"> </span><span class=\"s\">before</span><span class=\"nv\"> </span><span class=\"s\">the</span><span class=\"nv\"> </span><span class=\"s\">test</span><span class=\"nv\"> </span><span class=\"s\">...'\"</span>\n<span class=\"c1\"># the test command</span>\n<span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">'This</span><span class=\"nv\"> </span><span class=\"s\">is</span><span class=\"nv\"> </span><span class=\"s\">my</span><span class=\"nv\"> </span><span class=\"s\">test...'\"</span>\n<span class=\"nt\">on</span><span class=\"p\">:</span>\n  <span class=\"c1\"># command which is run if the command was successful</span>\n  <span class=\"nt\">success</span><span class=\"p\">:</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">'I</span><span class=\"nv\"> </span><span class=\"s\">was</span><span class=\"nv\"> </span><span class=\"s\">run</span><span class=\"nv\"> </span><span class=\"s\">because</span><span class=\"nv\"> </span><span class=\"s\">the</span><span class=\"nv\"> </span><span class=\"s\">test</span><span class=\"nv\"> </span><span class=\"s\">was</span><span class=\"nv\"> </span><span class=\"s\">successful</span><span class=\"nv\"> </span><span class=\"s\">...'\"</span>\n  <span class=\"c1\"># command which is run if the command failed</span>\n  <span class=\"nt\">failure</span><span class=\"p\">:</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">'I</span><span class=\"nv\"> </span><span class=\"s\">was</span><span class=\"nv\"> </span><span class=\"s\">run</span><span class=\"nv\"> </span><span class=\"s\">because</span><span class=\"nv\"> </span><span class=\"s\">the</span><span class=\"nv\"> </span><span class=\"s\">test</span><span class=\"nv\"> </span><span class=\"s\">failed</span><span class=\"nv\"> </span><span class=\"s\">...'\"</span>\n</pre>\n</div>\n<div id=\"minion-yml-receipts\">\n<h2>minion.yml Receipts</h2>\n<p>The following few sections explain how to setup a <tt>minion.yml</tt> file for different\nkind of environments and technologies, like python virtualenvs, docker containers, etc.</p>\n<p><strong>Why so complicated?</strong> \u2026 Well it\u2019s not really complicated, isn\u2019t it? There are just to many\ndifferent styles of test environments and approaches \u2026 I don\u2019t want to give full attention to all\nof them and support them.\nAnd anyway \u2026 In the end your Use-Case wouldn\u2019t be supported. Thus, we provide each developer the full\ncontrol over their own test setup and environment. Setup it up how you like and run your test how you like it.\n<strong>But</strong>: Here are some receipts which might help you to come up with a nice minion.yml configuration:</p>\n<div id=\"python-virtualenv\">\n<h3>Python virtualenv</h3>\n<p>To test your code in a python virtualenv base your minion.yml on the following example:</p>\n<pre><span class=\"nt\">precondition</span><span class=\"p\">:</span> <span class=\"p-Indicator\">&gt;</span>\n  <span class=\"no\">/bin/bash -c 'virtualenv env -p python3.4 &amp;&amp;</span>\n  <span class=\"no\">source env/bin/activate &amp;&amp; python -m pip install . -r requirements-dev.txt'</span>\n<span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/bin/bash -c 'source env/bin/activate &amp;&amp; make test'</span>\n</pre>\n<p>Make sure you change the actual <em>test</em> command which in the example\u2019s case is <tt>make test</tt>.\nYou can also easily integrate it with <tt>tox</tt>. Just make sure <tt>tox</tt> is installed and run as your\ntest command.</p>\n</div>\n<div id=\"docker\">\n<h3>Docker</h3>\n<p>To test your code in a docker container follow the following example to setup your minion.yml:</p>\n<pre><span class=\"nt\">precondition</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/bin/bash -c 'docker pull ubuntu'</span>\n<span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/bin/bash -c 'docker run -t ubuntu /bin/bash -c \"make test\"'</span>\n</pre>\n<p>This will pull a new ubuntu docker image from docker hub and run <tt>make test</tt> in the container.\nYou might want to setup your own docker image in the <tt>precondition</tt> and the run this container\nin the actual <tt>command</tt>:</p>\n<pre><span class=\"nt\">precondition</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/bin/bash -c 'docker build -t testing .'</span>\n<span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/bin/bash -c 'docker run -t testing /bin/bash -c \"make test\"'</span>\n</pre>\n<p>Make sure you mount your repository, source code, test code or whatever in the container before running\nany tests.</p>\n</div>\n</div>\n<div id=\"server-api\">\n<h2>Server API</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Route</th>\n<th>HTTP Method</th>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>/status</td>\n<td>GET</td>\n<td>\u00a0</td>\n<td>Get status of the server</td>\n</tr>\n<tr><td>/jobs</td>\n<td>GET</td>\n<td>page,\npage_size</td>\n<td>Get a list of all jobs</td>\n</tr>\n<tr><td>/jobs</td>\n<td>POST</td>\n<td>repo_url,\ncommit_hash,\nbranch,\nkeep_data,\narbitrary data</td>\n<td>Create a new job</td>\n</tr>\n<tr><td>/jobs</td>\n<td>DELETE</td>\n<td>\u00a0</td>\n<td>Remove all jobs</td>\n</tr>\n<tr><td>/jobs/&lt;job_id&gt;</td>\n<td>GET</td>\n<td>\u00a0</td>\n<td>Get a single job</td>\n</tr>\n<tr><td>/jobs/&lt;job_id&gt;</td>\n<td>DELETE</td>\n<td>\u00a0</td>\n<td>Remove a single job</td>\n</tr>\n<tr><td>/stop</td>\n<td>POST</td>\n<td>\u00a0</td>\n<td>Stop the minion-server</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 2820006, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6ff56e735a6ec70550a2a2a3ef6530df", "sha256": "7da730468f8302e1ba4de3009a95e65c722f45a71775a9bddbe46f1d2769eec6"}, "downloads": -1, "filename": "minion-ci-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6ff56e735a6ec70550a2a2a3ef6530df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7677, "upload_time": "2016-03-07T06:51:43", "upload_time_iso_8601": "2016-03-07T06:51:43.945723Z", "url": "https://files.pythonhosted.org/packages/ed/0f/2eec96f9349dc4ed87d66b69185154b974d3e41bf08ddd89fc752d9bef23/minion-ci-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bdaff3b658f52ed65c650178365012ce", "sha256": "cd939ed840623c7358392c0a6df9b3722d7ca85bcf7221ca325ac7c5c300bf29"}, "downloads": -1, "filename": "minion-ci-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bdaff3b658f52ed65c650178365012ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9781, "upload_time": "2016-03-08T07:02:42", "upload_time_iso_8601": "2016-03-08T07:02:42.994161Z", "url": "https://files.pythonhosted.org/packages/89/27/3d7927575e173b78c5e7db0700960468f31688e22deb4bedcd677e4bc33b/minion-ci-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "cd1dad412354c3fb9c2e7cb6e9aa2093", "sha256": "85830bc126339845254c20b71c9749009f7415581265d4067a05a15b72c4b714"}, "downloads": -1, "filename": "minion-ci-0.0.3.tar.gz", "has_sig": false, "md5_digest": "cd1dad412354c3fb9c2e7cb6e9aa2093", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9819, "upload_time": "2016-03-08T07:11:23", "upload_time_iso_8601": "2016-03-08T07:11:23.664755Z", "url": "https://files.pythonhosted.org/packages/ab/0c/d1857b59b8bd62d84b45b3c6f8f727b8947986bf1999d57b8bd13b5179eb/minion-ci-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "f4b2185ad5682647ea1f5234ca45c096", "sha256": "3b3f7bc512102f2694a95c7f1a70d976bcd6af76ec1afd08c4eaad11a0e6a067"}, "downloads": -1, "filename": "minion-ci-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f4b2185ad5682647ea1f5234ca45c096", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39830, "upload_time": "2016-03-08T07:13:41", "upload_time_iso_8601": "2016-03-08T07:13:41.838368Z", "url": "https://files.pythonhosted.org/packages/af/f8/550a5b325744b9463f34e940ae5f978dd1f2d67a1ba5ed3311617d49d45b/minion-ci-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "b056c12f94cf72764f11bdfd3e4e6185", "sha256": "35ac002ceb9cf73d99ee4ca08cb9c40fdeaf7692b49becb599fbd2e8655d9f4c"}, "downloads": -1, "filename": "minion-ci-0.0.5.tar.gz", "has_sig": false, "md5_digest": "b056c12f94cf72764f11bdfd3e4e6185", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41168, "upload_time": "2016-03-12T23:03:50", "upload_time_iso_8601": "2016-03-12T23:03:50.769909Z", "url": "https://files.pythonhosted.org/packages/e1/e1/d228aef9dd1016f40d9c903d59cfc1200a95938bb9c7d0d03ff2ccf58448/minion-ci-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "dbfcbf297dd7d99ce0a489a2657e5376", "sha256": "448cce18d8fe461befca735ec7ab6da6e924d31124d4272e13cc330e23b0a21e"}, "downloads": -1, "filename": "minion-ci-0.0.6.tar.gz", "has_sig": false, "md5_digest": "dbfcbf297dd7d99ce0a489a2657e5376", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41300, "upload_time": "2016-03-15T05:23:33", "upload_time_iso_8601": "2016-03-15T05:23:33.282656Z", "url": "https://files.pythonhosted.org/packages/c5/a7/b35543f767094d7ad449d0de45f9077118351abd31c2e356c566c7787dbc/minion-ci-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "ca4c51169d3fdcb5bca3ceab52788770", "sha256": "c45445bdd2d616d5345f0146227334657ee18109a23f4103dd5805519982a037"}, "downloads": -1, "filename": "minion-ci-0.0.7.tar.gz", "has_sig": false, "md5_digest": "ca4c51169d3fdcb5bca3ceab52788770", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41822, "upload_time": "2017-04-21T17:32:12", "upload_time_iso_8601": "2017-04-21T17:32:12.186266Z", "url": "https://files.pythonhosted.org/packages/a3/d6/43147e44ae29b2bdf06bb9fd052ee923269b965935c1c090a70e4892053f/minion-ci-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca4c51169d3fdcb5bca3ceab52788770", "sha256": "c45445bdd2d616d5345f0146227334657ee18109a23f4103dd5805519982a037"}, "downloads": -1, "filename": "minion-ci-0.0.7.tar.gz", "has_sig": false, "md5_digest": "ca4c51169d3fdcb5bca3ceab52788770", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41822, "upload_time": "2017-04-21T17:32:12", "upload_time_iso_8601": "2017-04-21T17:32:12.186266Z", "url": "https://files.pythonhosted.org/packages/a3/d6/43147e44ae29b2bdf06bb9fd052ee923269b965935c1c090a70e4892053f/minion-ci-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:21 2020"}