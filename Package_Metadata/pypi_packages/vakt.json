{"info": {"author": "Egor Kolotaev", "author_email": "ekolotaev@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Security", "Topic :: Software Development", "Topic :: System :: Networking", "Topic :: System :: Networking :: Firewalls", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "[![Vakt logo](logo.png)](logo.png)\n\nAttribute-based access control (ABAC) SDK for Python.\n\n[![Build Status](https://travis-ci.org/kolotaev/vakt.svg?branch=master)](https://travis-ci.org/kolotaev/vakt)\n[![codecov.io](https://codecov.io/github/kolotaev/vakt/coverage.svg?branch=master)](https://codecov.io/github/kolotaev/vakt?branch=master)\n[![PyPI version](https://badge.fury.io/py/vakt.svg)](https://badge.fury.io/py/vakt)\n[![Apache 2.0 licensed](https://img.shields.io/badge/License-Apache%202.0-yellow.svg)](https://raw.githubusercontent.com/kolotaev/vakt/master/LICENSE)\n\n------\n\n## Documentation\n\n- [Description](#description)\n- [Concepts](#concepts)\n- [Install](#install)\n- [Usage](#usage)\n- [Components](#components)\n\t- [Policy](#policy)\n\t- [Inquiry](#inquiry)\n\t- [Rules](#rules)\n\t    - [Comparison-related](#comparison-related)\n\t    - [Logic-related](#logic-related)\n\t    - [List-related](#list-related)\n\t    - [Network-related](#network-related)\n\t    - [String-related](#string-related)\n\t    - [Inquiry-related](#inquiry-related)\n\t- [Checker](#checker)\n\t- [Guard](#guard)\n\t- [Storage](#storage)\n        - [Memory](#memory)\n        - [MongoDB](#mongodb)\n        - [SQL](#sql)\n    - [Migration](#migration)\n- [Caching](#caching)\n- [JSON](#json)\n- [Logging](#logging)\n- [Examples](./examples)\n- [Milestones](#milestones)\n- [Benchmark](#benchmark)\n- [Acknowledgements](#acknowledgements)\n- [Development](#development)\n- [License](#license)\n\n\n### Description\n\nVakt is an attribute-based and policy-based access control ([ABAC](https://en.wikipedia.org/wiki/Attribute-based_access_control))\ntoolkit that is based on policies.\nABAC stands aside of RBAC and ACL models, giving you\na fine-grained control on definition of the rules that restrict an access to resources and is generally considered a\n\"next generation\" authorization model.\nIn its form Vakt resembles [IAM Policies](https://github.com/awsdocs/iam-user-guide/blob/master/doc_source/access_policies.md), but\nhas a way nicer attribute managing.\n\nSee [concepts](#concepts) section for more details.\n\n*[Back to top](#documentation)*\n\n\n### Concepts\n\nGiven you have some set of resources, you can define a number of policies that will describe access to them\nanswering the following questions:\n\n1. *What resources (resource) are being requested?*\n1. *Who is requesting the resource?*\n1. *What actions (action) are requested to be done on the asked resources?*\n1. *What are the rules that should be satisfied in the context of the request itself?*\n1. *What is resulting effect of the answer on the above questions?*\n\n\nThe overall diagram of `vakt` workflow is:\n\n[![Vakt diagram](diagram.svg)](diagram.svg)\n\n\nVakt allows you to gain:\n\n* Policy Based Access Control _(vakt is based on Policies that describe access rules, strategies to your resources)_\n* Fine-Grained Authorization _(vakt Policies give you fine-grained control over resource's, subject's, action's and context's attributes)_\n* Dynamic Authorization Management _(you can add Policies and change their attributes)_\n* Externalized Authorization Management _(you can build own external AuthZ server with vakt, see examples)_\n\n*[Back to top](#documentation)*\n\n\n### Install\n\nVakt runs on Python >= 3.4.  \nPyPy implementation is supported as well.\n\nFor in-memory storage:\n```bash\npip install vakt\n```\n\nFor MongoDB storage:\n```bash\npip install vakt[mongo]\n```\n\nFor SQL storage:\n```bash\npip install vakt[sql]\n```\n\n*[Back to top](#documentation)*\n\n\n### Usage\n\nA quick dive-in:\n\n```python\nimport vakt\nfrom vakt.rules import Eq, Any, StartsWith, And, Greater, Less\n\npolicy = vakt.Policy(\n    123456,\n    actions=[Eq('fork'), Eq('clone')],\n    resources=[StartsWith('repos/Google', ci=True)],\n    subjects=[{'name': Any(), 'stars': And(Greater(50), Less(999))}],\n    effect=vakt.ALLOW_ACCESS,\n    context={'referer': Eq('https://github.com')},\n    description=\"\"\"\n    Allow to fork or clone any Google repository for\n    users that have > 50 and < 999 stars and came from Github\n    \"\"\"\n)\nstorage = vakt.MemoryStorage()\nstorage.add(policy)\nguard = vakt.Guard(storage, vakt.RulesChecker())\n\ninq = vakt.Inquiry(action='fork',\n                   resource='repos/google/tensorflow',\n                   subject={'name': 'larry', 'stars': 80},\n                   context={'referer': 'https://github.com'})\n\nassert guard.is_allowed(inq)\n```\n\nFor more examples see [here](./examples).\n\n*[Back to top](#documentation)*\n\n### Components\n\n#### Policy\nPolicy is a main object for defining rules for accessing resources.\nThe main parts reflect questions described in [Concepts](#concepts) section:\n\n* resources - a list of resources. Answers: what is asked?\n* subjects  - a list of subjects. Answers: who asks access to resources?\n* actions - a list of actions. Answers: what actions are asked to be performed on resources?\n* context - rules that should be satisfied by the given inquiry's context.\n* effect - If policy matches all the above conditions, what effect does it imply?\nCan be either `vakt.ALLOW_ACCESS` or `vakt.DENY_ACCESS`\n\nAll `resources`, `subjects` and `actions` are described with \na list containing strings, regexes, [Rules](#rules) or dictionaries of strings (attributes) to [Rules](#rules). \nEach element in list acts as logical OR. Each key in a dictionary of Rules acts as logical AND.   \n`context` can be described only with a dictionary of [Rules](#rules).\n\nDepending on a way `resources`, `subjects`, `actions` are described, Policy can have either \nString-based or Rule-based type. Can be inspected by `policy.type`. \nThis enforces the use of a concrete Checker implementation. See [Checker](#checker) for more.\n\n```python\nfrom vakt import Policy, ALLOW_ACCESS\nfrom vakt.rules import CIDR, Any, Eq, NotEq, In\n    \n# Rule-based policy (defined with Rules and dictionaries of Rules)\nPolicy(\n    1,\n    description=\"\"\"\n    Allow access to administration interface subcategories: 'panel', 'switch' if user is not \n    a developer and came from local IP address.\n    \"\"\",\n    actions=[Any()],\n    resources=[{'category': Eq('administration'), 'sub': In(['panel', 'switch'])}],\n    subjects=[{'name': Any(), 'role': NotEq('developer')}],\n    effect=ALLOW_ACCESS,\n    context={'ip': CIDR('127.0.0.1/32')}\n)\n\n# String-based policy (defined with regular expressions)\nPolicy(\n    2,\n    description=\"\"\"\n    Allow all readers of the book library whose surnames start with M get and read any book or magazine,\n    but only when they connect from local library's computer\n    \"\"\",\n    effect=ALLOW_ACCESS,\n    subjects=['<[\\w]+ M[\\w]+>'],\n    resources=('library:books:<.+>', 'office:magazines:<.+>'),\n    actions=['<read|get>'],\n    context={'ip': CIDR('192.168.2.0/24')}\n)\n```\n\nBasically you want to create some set of Policies that encompass access rules for your domain and store them for\nmaking future decisions by the [Guard](#guard) component.\n\n```python\nst = MemoryStorage()\nfor p in policies:\n    st.add(p)\n```\n\nAdditionally you can create Policies with predefined effect classes:\n```python\nfrom vakt import PolicyAllow, PolicyDeny, ALLOW_ACCESS, DENY_ACCESS\n    \np = PolicyAllow(1, actions=['<read|get>'], resources=['library:books:<.+>'], subjects=['<[\\w]+ M[\\w]+>'])\nassert ALLOW_ACCESS == p.effect\n\n\np = PolicyDeny(2, actions=['<read|get>'], resources=['library:books:<.+>'], subjects=['<[\\w]+ M[\\w]+>'])\nassert DENY_ACCESS == p.effect\n```\n\n*[Back to top](#documentation)*\n\n\n#### Inquiry\nInquiry is an object that serves as a mediator between Vakt and outer world request for resource access. All you need\nto do is take any kind of incoming request (REST request, SOAP, etc.) and build an `Inquiry` out of it in order to\nfeed it to Vakt. There are no concrete builders for Inquiry from various request types, since it's a very meticulous\nprocess and you have hands on control for doing it by yourself. Let's see an example:\n\n```python\nfrom vakt import Inquiry\nfrom flask import request, session\n\n...\n\n# if policies are defined on some subject's and resource's attributes with dictionaries of Rules:\ninquiry2 = Inquiry(subject={'login': request.form['username'], 'role': request.form['user_role']},\n                   action=request.form['action'],\n                   resource={'book': session.get('book'), 'chapter': request.form['chapter']},\n                   context={'ip': request.remote_addr})\n                   \n# if policies are defined with strings or regular expressions:\ninquiry = Inquiry(subject=request.form['username'],\n                  action=request.form['action'],\n                  resource=request.form['page'],\n                  context={'ip': request.remote_addr})\n```\n\nHere we are taking form params from Flask request and additional request information. Then we transform them\nto Inquiry. That's it.\n\nInquiry has several constructor arguments:\n\n* resource - any | dictionary of str -> any. What resource is being asked to be accessed?\n* action - any | dictionary str -> any. What is being asked to be done on the resource?\n* subject - any | dictionary str -> any. Who asks for it?\n* context - dictionary str -> any. What is the context of the request?\n\nIf you were observant enough you might have noticed that Inquiry resembles Policy, where Policy describes multiple\nvariants of resource access from the owner side and Inquiry describes an concrete access scenario from consumer side.\n\n*[Back to top](#documentation)*\n\n\n#### Rules\nRules allow you to describe conditions directly on `action`, `subject`, `resource` and `context` \nor on their attributes.\nIf at least one Rule in the Rule-set is not satisfied Inquiry is rejected by given Policy.\n\nAttaching a Rule-set to a Policy is simple. Here are some examples:\n\n```python\nfrom vakt import Policy, rules\n\nPolicy(\n    ...,\n    subjects=[{'name': rules.Eq('Tommy')}],\n),\n\nPolicy(\n    ...,\n    actions=[rules.Eq('get'), rules.Eq('list'), rules.Eq('read')],\n),\n\nPolicy(\n    ...,\n    context={\n        'secret': rules.string.Equal('.KIMZihH0gsrc'),\n        'ip': rules.net.CIDR('192.168.0.15/24')\n    },\n)\n```\n\nThere are a number of different Rule types, see below.\n\nIf the existing Rules are not enough for you, feel free to define your [own](./examples/extending.py).\n\n##### Comparison-related\n\n| Rule          | Example in Policy  |  Example in Inquiry  | Notes |\n| ------------- |-------------|-------------|-------------|\n| Eq      | `'age': Eq(40)` | `'age': 40`| |\n| NotEq      | `'age': NotEq(40)` | `'age': 40`| |\n| Greater      | `'height': Greater(6.2)` | `'height': 5.8`| |\n| Less      | `'height': Less(6.2)` | `'height': 5.8`| |\n| GreaterOrEqual      | `'stars': GreaterOrEqual(300)` | `'stars': 77`| |\n| LessOrEqual      | `'stars': LessOrEqual(300)` | `'stars': 300`| |\n\n##### Logic-related\n\n| Rule          | Example in Policy  |  Example in Inquiry  | Notes |\n| ------------- |-------------|-------------|-------------|\n| Truthy    | `'admin': Truthy()` | `'admin': user.is_admin()`| Evaluates on Inquiry creation |\n| Falsy     | `'admin': Falsy()` | `'admin': lambda x: x.is_admin()`| Evaluates on Inquiry creation |\n| Not   | `'age': Not(Greater(90))` | `'age': 40` | |\n| And   | `'stars': And(Greater(50), Less(89))` | `'stars': 78` | Also, attributes in dictionary of Rules act as AND logic |\n| Or    | `'stars': Or(Greater(50), Less(120), Eq(8888))` | `'stars': 78` | Also, rules in a list of, say, `actions` act as OR logic |\n| Any      | `actions=[Any()]` | `action='get'`, `action='foo'` | Placeholder that fits any value |\n| Neither      | `subjects=[Neither()]` | `subject='Max'`,  `subject='Joe'` | Not very useful, left only as a counterpart of Any |\n\n##### List-related\n| Rule          | Example in Policy  |  Example in Inquiry  | Notes |\n| ------------- |-------------|-------------|-------------|\n| In    | `'method': In('get', 'post')` | `'method': 'get'`| |\n| NotIn    | `'method': NotIn('get', 'post')` | `'method': 'get'`| |\n| AllIn    | `'name': AllIn('Max', 'Joe')` | `'name': ['Max', 'Joe']`| |\n| AllNotIn    | `'name': AllNotIn('Max', 'Joe')` | `'name': ['Max', 'Joe']`| |\n| AnyIn    | `'height': AnyIn(5.9, 7.5, 4.9)` | `'height': [7.55]`| |\n| AnyNotIn    | `'height': AnyNotIn(5.9, 7.5, 4.9)` | `'height': [7.55]`| |\n\n##### Network-related\n\n| Rule          | Example in Policy  |  Example in Inquiry  | Notes |\n| ------------- |-------------|-------------|-------------|\n| CIDR    | `'ip': CIDR('192.168.2.0/24')` | `'ip': 192.168.2.4`| |\n\n##### String-related\n| Rule          | Example in Policy  |  Example in Inquiry  | Notes |\n| ------------- |-------------|-------------|-------------|\n| Equal    | `'name': Equal('max', ci=True)` | `'name': 'Max'`| Aliased as `StrEqual`. Use instead of `Eq` it you want string-type check and case-insensitivity |\n| PairsEqual    | `'names': PairsEqual()` | `'names': ['Bob', 'Bob']`| Aliased as `StrPairsEqual` |\n| RegexMatch    | `'file': RegexMatch(r'\\.rb$')` | `'file': 'test.rb'`| |\n| StartsWith    | `'file': StartsWith('logs-')` | `'file': 'logs-data-101967.log'`| Supports case-insensitivity |\n| EndsWith    | `'file': EndsWith('.log')` | `'file': 'logs-data-101967.log'`| Supports case-insensitivity |\n| Contains    | `'file': Contains('sun')` | `'file': 'observations-sunny-days.csv'`| Supports case-insensitivity |\n\n##### Inquiry-related\n\nInquiry-related rules are useful if you want to express equality relation between inquiry elements or their attributes.\n\n| Rule          | Example in Policy  |  Example in Inquiry  | Notes |\n| ------------- |-------------|-------------|-------------|\n| SubjectMatch | `resources=[{'id': SubjectMatch()}]` | `Inquiry(subject='Max', resource={'id': 'Max'})`| Works for the whole subject value or one of its attributes |\n| ActionMatch  | `subjects=[ActionMatch('id')]` | `Inquiry(subject='Max', action={'method': 'get', id': 'Max'})`| Works for the whole action value or one of its attributes |\n| ResourceMatch  | `subjects=[ResourceMatch('id')]` | `Inquiry(subject='Max', resource={'res': 'book', id': 'Max'})`| Works for the whole resource value or one of its attributes |\n| SubjectEqual  | `'data': SubjectEqual()` | `Inquiry(subject='Max')`| Works only for strings. Favor SubjectMatch |\n| ActionEqual  | `'data': ActionEqual()` | `Inquiry(action='get')`| Works only for strings. Favor ActionMatch |\n| ResourceIn  | `'data': ResourceIn()` | `Inquiry(resource='/books/')`| Works only for strings. Favor ResourceMatch |\n\n\n*[Back to top](#documentation)*\n\n\n#### Checker\nChecker allows you to check whether Policy matches Inquiry by concrete field (`subject`, `action`, etc.). It's used\ninternally by [Guard](#guard), but you should be aware of Checker types:\n\n* RulesChecker - universal type that is used to check match of Policies defined with Rules or dictionaries of Rules\n(Rule-based Policy type). It gives you the highest flexibility.\nMost of the time you will use this type of Polices and thus this type of a Checker.\nBesides, it's much more performant than RegexChecker. See [benchmark](#benchmark) for more details.\n\n```python\nfrom vakt import RulesChecker\n\nch = RulesChecker()\n# etc.\n```\n\n* RegexChecker - checks match by regex test for policies defined with strings and regexps (String-based Policy type).\nThis means that all you Policies\ncan be defined in regex syntax (but if no regex defined in Policy falls back to simple string equality test) - it\ngives you better flexibility compared to simple strings, but carries a burden of relatively slow performance.\nYou can configure a LRU cache size to adjust performance to your needs:\n\n```python\nfrom vakt import RegexChecker\n\nch = RegexChecker(2048)\nch2 = RegexChecker(512)\n# etc.\n```\nSee [benchmark](#benchmark) for more details.\n\nSyntax for description of Policy fields is:\n```\n '<foo.*>'\n 'foo<[abc]{2}>bar'\n 'foo<\\w+>'\n 'foo'\n```\nWhere `<>` are delimiters of a regular expression boundaries part. Custom Policy can redefine them by overriding\n`start_tag` and `end_tag` properties. Generally you always want to use the first variant: `<foo.*>`.\n\n**WARNING. Please note, that storages have varying level of regexp support. For example,\nmost SQL databases allow to use POSIX metacharacters whereas python `re` module\nand thus MemoryStorage does not. So, while defining policies you're safe and sound\nas long as you understand how storage of your choice handles the regexps you specified.**\n\n* StringExactChecker - the most quick checker:\n```\nChecker that uses exact string equality. Case-sensitive.\nE.g. 'sun' in 'sunny' - False\n     'sun' in 'sun' - True\n```\n* StringFuzzyChecker - quick checker with some extent of flexibility:\n```\nChecker that uses fuzzy substring equality. Case-sensitive.\nE.g. 'sun' in 'sunny' - True\n     'sun' in 'sun' - True\n```\n\nNote, that some [Storage](#storage) handlers can already check if Policy fits Inquiry in\n`find_for_inquiry()` method by performing specific to that storage queries - Storage can (and generally should)\ndecide on the type of actions based on the checker class passed to [Guard](#guard) constructor\n(or to `find_for_inquiry()` directly).\n\nRegardless of the results returned by a Storage the Checker is always the last row of control\nbefore Vakt makes a decision.\n\n*[Back to top](#documentation)*\n\n\n#### Guard\nGuard component is a main entry point for Vakt to make a decision. It has one method `is_allowed` that passed an\n[Inquiry](#inquiry) gives you a boolean answer: is that Inquiry allowed or not?\n\nGuard is constructed with [Storage](#storage) and [Checker](#checker).\n\n__Policies that have String-based type won't match if RulesChecker is used and vise-versa.__\n\n```python\nst = MemoryStorage()\n# And persist all our Policies so that to start serving our library.\nfor p in policies:\n    st.add(p)\n\nguard = Guard(st, RulesChecker())\n\nif guard.is_allowed(inquiry):\n    return \"You've been logged-in\", 200\nelse:\n    return \"Go away, you violator!\", 401\n```\n\nTo gain best performance read [Caching](#caching) section.\n\n*[Back to top](#documentation)*\n\n\n#### Storage\nStorage is a component that gives an interface for manipulating [Policies](#policy) persistence in various places.\n\nIt provides the following methods:\n```python\nadd(policy)                 # Store a Policy\nget(uid)                    # Retrieve a Policy by its ID\nget_all(limit, offset)      # Retrieve all stored Policies (with pagination)\nretrieve_all(batch)         # Retrieve all existing stored Policies (without pagination)\nupdate(policy)              # Store an updated Policy\ndelete(uid)                 # Delete Policy from storage by its ID\nfind_for_inquiry(inquiry)   # Retrieve Policies that match the given Inquiry\n```\n\nStorage may have various backend implementations (RDBMS, NoSQL databases, etc.), they also may vary in performance\ncharacteristics, so see [Caching](#caching) and [Benchmark](#benchmark) sections.\n\nVakt ships some Storage implementations out of the box. See below:\n\n##### Memory\nImplementation that stores Policies in memory. It's not backed by any file or something, so every restart of your\napplication will swipe out everything that was stored. Useful for testing.\n\n```python\nfrom vakt import MemoryStorage\n\nstorage = MemoryStorage()\n```\n\n##### MongoDB\nMongoDB is chosen as the most popular and widespread NO-SQL database.\n\n\n```python\nfrom pymongo import MongoClient\nfrom vakt.storage.mongo import MongoStorage\n\nclient = MongoClient('localhost', 27017)\nstorage = MongoStorage(client, 'database-name', collection='optional-collection-name')\n```\n\nDefault collection name is 'vakt_policies'.\n\nActions are the same as for any Storage that conforms interface of `vakt.storage.abc.Storage` base class.\n\nBeware that currently MongoStorage supports indexed and filtered-out `find_for_inquiry()` only for \nStringExact, StringFuzzy and Regex (since MongoDB version 4.2 and onwards) checkers.\nWhen used with the RulesChecker it simply returns all the Policies from the database. \n\n\n##### SQL\nSQL storage is backed by SQLAlchemy, thus it should support any RDBMS available for it:\nMySQL, Postgres, Oracle, MSSQL, Sqlite, etc.\n\nExample for MySQL.\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, scoped_session\nfrom vakt.storage.sql import SQLStorage\n\nengine = create_engine('mysql://root:root@localhost/vakt_db')\nstorage = SQLStorage(scoped_session=scoped_session(sessionmaker(bind=engine)))\n\n# Don't forget to run migrations here (especially for the first time)\n...\n```\n\nBeware that currently SQLStorage supports indexed and filtered-out `find_for_inquiry()` only for \nStringExact, StringFuzzy and Regex checkers.\nWhen used with the RulesChecker it simply returns all the Policies from the database. \n\nNote that vakt focuses on testing SQLStorage functionality only for two most popular open-source databases:\nMySQL and Postgres. Other databases support may have worse performance characteristics and/or bugs.\nFeel free to report any issues.\n\n*[Back to top](#documentation)*\n\n\n#### Migration\n\n`vakt.migration` is a set of components that are useful from the perspective of the [Storage](#storage).\nIt's recommended to favor it over manual actions on DB schema/data\nsince it's aware of Vakt requirements to Policies data. But it's not mandatory, anyway.\nHowever it's up to a particular Storage to decide whether it needs migrations or not.\nIt consists of 3 components:\n* `Migration`\n* `MigrationSet`\n* `Migrator`\n\n`Migration` allows you to describe data modifications between versions.\nEach storage can have a number of `Migration` classes to address different releases with the order of the migration\nspecified in `order` property.\nShould be located inside particular storage module and implement `vakt.storage.migration.Migration`.\nMigration has 2 main methods (as you might guess) and 1 property:\n- `up` - runs db \"schema\" upwards\n- `down` - runs db \"schema\" downwards (rolls back the actions of `up`)\n- `order` - tells the number of the current migration in a row\n\n`MigrationSet` is a component that represents a collection of Migrations for a Storage.\nYou should define your own migration-set. It should be located inside particular storage module and implement\n`vakt.storage.migration.MigrationSet`. It has 3 methods that lest unimplemented:\n- `migrations` - should return all initialized Migration objects\n- `save_applied_number` - saves a number of a lst applied up migration in the Storage for later reference\n- `last_applied` - returns a number of a lst applied up migration from the Storage\n\n`Migrator` is an executor of a migrations. It can execute all migrations up or down, or execute a particular migration\nif `number` argument is provided.\n\nExample usage:\n\n```python\nfrom pymongo import MongoClient\nfrom vakt.storage.mongo import MongoStorage, MongoMigrationSet\nfrom vakt.storage.migration import Migrator\n\nclient = MongoClient('localhost', 27017)\nstorage = MongoStorage(client, 'database-name', collection='optional-collection-name')\n\nmigrator = Migrator(MongoMigrationSet(storage))\nmigrator.up()\n...\nmigrator.down()\n...\nmigrator.up(number=2)\n...\nmigrator.down(number=2)\n```\n\n*[Back to top](#documentation)*\n\n\n### Caching\n\nVakt has several layers of caching, that serve a single purpose: speed up policy enforcement decisions.\nIn most situations and use-cases you might want to use them all, thus they are designed not to\ninteract with each other, but rather work in tandem\n(nonetheless you are free to use any single layer alone or any combination of them).\nThat said let's look at all those layers.\n\n \n##### Caching [`RegexChecker`](#checker)\n\nIt's relevant only for `RegexChecker` and allows to cache parsing and execution of regex-defined Policies,\nwhich can be very expensive\ndue to inherently slow computational performance of regular expressions and vakt's parsing. When creating a `RegexChecker`\nyou can specify a cache size for an in-memory \n[LRU (least recently used)](https://docs.python.org/3/library/functools.html#functools.lru_cache) cache. Currently\nonly python's native LRU cache is supported.  \n\n```python\n# preferably size is a power of 2\nchk = RegexChecker(cache_size=2048)\n\n# or simply\nchk = RegexChecker(2048)\n\n# or 512 by default\nchk = RegexChecker()\n```\n\n##### Caching the entire Storage backend\n\nSome vakt's Storages may be not very clever at filtering Policies at `find_for_inquiry` especially when dealing with\nRule-based policies. In this case they return the whole set of the existing policies stored in the external storage.\nNeedless to say that it makes your application very heavy IO-bound and decreases performance for large policy sets\ndrastically. See [benchmark](#benchmark) for more details and exact numbers.\n\nIn such a case you can use `EnfoldCache` that wraps your main storage (e.g. MongoStorage) into another one \n(it's meant to be some in-memory Storage). It returns you a Storage that behind the scene routes all the read-calls \n(get, get_all, find_for_inquiry, ...) to an in-memory one and all modify-calls (add, update, delete) to your main Storage (\ndon't worry, in-memory Storage is kept up-to date with the main Storage). In case a requested policy is not found in in-memory Storage\nit's considered a cache miss and a request is routed to a main Storage.\n\nAlso, in order to keep Storages in sync, \nwhen you initialize `EnfoldCache` the in-memory Storage will fetch all the existing Policies from a main one - \ntherefore be forewarned that it might take some amount of time depending on the size of a policy-set.  \nOptionally you can call `populate` method after initialization, but in this case __do not ever call any modify-related methods of \nEnfoldCache'd storage before `populate()`, otherwise Storages will be in an unsynchronized state and it'll \nresult in broken `Guard` functionality.__\n\n```python\nfrom vakt import EnfoldCache, MemoryStorage, Policy, Guard, RegexChecker\nfrom vakt.storage.mongo import MongoStorage\n\nstorage = EnfoldCache(MongoStorage(...), cache=MemoryStorage())\nstorage.add(Policy(1, actions=['get']))\n\n...\n\nguard = Guard(storage, RegexChecker())\n```\n\n##### Caching the Guard\n\n`Guard.is_allowed` it the the centerpiece of vakt. Therefore it makes ultimate sense to cache it. \nAnd `create_cached_guard()` function allows you to do exactly that. You need to pass it a Storage, a Checker and a \nmaximum size of a cache. It will return you a tuple of: Guard, Storage and AllowanceCache instance:\n\n- You must do all policies operations with the returned storage \n(which is a slightly enhanced version of a Storage you provided to the function).\n- The returned Guard is a normal vakt's `Guard`, but its `is_allowed` is cached with `AllowaceCache`.\n- The returned cache is an instance of `AllowaceCache` and has a handy method `info` that provides current state of the cache.\n\nHow it works?\n\nOnly the first Inquiry will be passed to `is_allowed`, all the subsequent answers for similar Inquiries will be taken \nfrom cache. `AllowanceCache` is rather coarse-grained and if you call Storage's `add`, `update` or `delete` the whole\ncache will be invalided because the policy-set has changed. However for stable policy-sets it is a good performance boost.\n\nBy default `AllowanceCache` uses in-memory LRU cache and `maxsize` param is it's size. If for some reason it does not satisfy\nyour needs, you can pass your own implementation of a cache backend that is a subclass of \n`vakt.cache.AllowanceCacheBackend` to `create_cached_guard` as a `cache` keyword argument.\n\n```python\nguard, storage, cache = create_cached_guard(MongoStorage(...), RulesChecker(), maxsize=256)\n\np1 = Policy(1, actions=[Eq('get')], resources=[Eq('book')], subjects=[Eq('Max')], effect=ALLOW_ACCESS)\nstorage.add(p1)\n\n# Given we have some inquiries that tend to repeat\ninq1 = Inquiry(action='get', resource='book', subject='Max')\ninq2 = Inquiry(action='get', resource='book', subject='Jamey')\n\nassert guard.is_allowed(inq1)\nassert guard.is_allowed(inq1)\nassert guard.is_allowed(inq1)\nassert not guard.is_allowed(inq2)\nassert guard.is_allowed(inq1)\nassert guard.is_allowed(inq1)\n\n# You can check cache state\nassert 4 == cache.info().hits\nassert 2 == cache.info().misses\nassert 2 == cache.info().currsize\n```\n\n*[Back to top](#documentation)*\n\n\n### JSON\n\nAll Policies, Inquiries and Rules can be JSON-serialized and deserialized.\n\nFor example, for a Policy all you need is just run:\n```python\nfrom vakt.policy import Policy\n\npolicy = Policy('1')\n\njson_policy = policy.to_json()\nprint(json_policy)\n# {\"actions\": [], \"description\": null, \"effect\": \"deny\", \"uid\": \"1\",\n# \"resources\": [], \"context\": {}, \"subjects\": []}\n\npolicy = Policy.from_json(json_policy)\nprint(policy)\n# <vakt.policy.Policy object at 0x1023ca198>\n```\n\nThe same goes for Rules, Inquiries.\nAll custom classes derived from them support this functionality as well.\nIf you do not derive from Vakt's classes, but want this option, you can mix-in `vakt.util.JsonSerializer` class.\n\n```python\nfrom vakt.util import JsonSerializer\n\nclass CustomInquiry(JsonSerializer):\n    pass\n```\n\n*[Back to top](#documentation)*\n\n\n### Logging\n\nVakt follows a common logging pattern for libraries:\n\nIts corresponding modules log all the events that happen but the log messages by default are handled by `NullHandler`.\nIt's up to the outer code/application to provide desired log handlers, filters, levels, etc.\n\nFor example:\n\n```python\nimport logging\n\nroot = logging.getLogger()\nroot.setLevel(logging.INFO)\nroot.addHandler(logging.StreamHandler())\n\n... # here go all the Vakt calls.\n```\n\nVakt logs can be comprehended in 2 basic levels:\n1. *Error/Exception* - informs about exceptions and errors during Vakt work.\n2. *Info* - informs about incoming inquires and their resolution.\n\n*[Back to top](#documentation)*\n\n\n### Milestones\n\nMost valuable features to be implemented in the order of importance:\n\n- [x] SQL Storage\n- [ ] Rules that reference Inquiry data for Rule-based policies \n- [ ] Caching mechanisms (for Storage and Guard)\n- [ ] YAML-based language for declarative policy definitions\n- [ ] Enhanced audit logging\n- [ ] Redis Storage\n\n*[Back to top](#documentation)*\n\n\n### Benchmark\n\nYou can see how much time it takes for a single Inquiry to be processed given we have a number of unique Policies in a\nStorage. \nFor [MemoryStorage](#memory) it measures the runtime of a decision-making process for all \nthe existing Policies when [Guard's](#guard) code iterates the whole list of Policies to decide if \nInquiry is allowed or not. In case of other Storages the mileage\nmay vary since they may return a smaller subset of Policies that fit the given Inquiry. \nDon't forget that most external Storages add some time penalty to perform I/O operations.\nThe runtime also depends on a Policy-type used (and thus checker): RulesChecker performs much better than RegexChecker.\n\nExample:\n\n```bash\npython3 benchmark.py --checker regex --storage memory -n 1000\n```\n\nOutput is:\n> Populating MemoryStorage with Policies<br />\n> ......................<br />\n> START BENCHMARK!<br />\n> Number of unique Policies in DB: 1,000<br />\n> Among them Policies with the same regexp pattern: 0<br />\n> Checker used: RegexChecker<br />\n> Decision for 1 Inquiry took: 0.4451 seconds<br />\n> Inquiry passed the guard? False<br />\n\nScript usage:\n```\nusage: benchmark.py [-h] [-n [POLICIES_NUMBER]] [-s {mongo,memory,sql}]\n                    [-d [SQL_DSN]] [-c {regex,rules,exact,fuzzy}] [--regexp]\n                    [--same SAME] [--cache CACHE]\n\nRun vakt benchmark.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n [POLICIES_NUMBER], --number [POLICIES_NUMBER]\n                        number of policies to create in DB (default: 100000)\n  -s {mongo,memory,sql}, --storage {mongo,memory,sql}\n                        type of storage (default: memory)\n  -d [SQL_DSN], --dsn [SQL_DSN]\n                        DSN connection string for sql storage (default:\n                        sqlite:///:memory:)\n  -c {regex,rules,exact,fuzzy}, --checker {regex,rules,exact,fuzzy}\n                        type of checker (default: regex)\n\nregex policy related:\n  --regexp              should Policies be defined without Regex syntax?\n                        (default: True)\n  --same SAME           number of similar regexps in Policy\n  --cache CACHE         number of LRU-cache for RegexChecker (default:\n                        RegexChecker's default cache-size)\n```\n\n*[Back to top](#documentation)*\n\n\n### Acknowledgements\n\nInitial code ideas of Vakt are based on\n[Amazon IAM Policies](https://github.com/awsdocs/iam-user-guide/blob/master/doc_source/access_policies.md) and\n[Ladon](https://github.com/ory/ladon) Policies SDK as its reference implementation.\n\n*[Back to top](#documentation)*\n\n\n### Development\n\nTo hack Vakt locally run:\n\n```bash\n$ ...                              # activate virtual environment w/ preferred method (optional)\n$ pip install -e .[dev,mongo,sql]  # to install all dependencies\n$ pytest -m \"not integration\"      # to run non-integration tests with coverage report\n$ pytest --cov=vakt tests/         # to get coverage report\n$ pylint vakt                      # to check code quality with PyLint\n```\n\nTo run only integration tests (for Storage adapters other than `MemoryStorage`):\n\n```bash\n$ docker run --rm -d -p 27017:27017 mongo\n$ pytest -m integration\n```\n\nOptionally you can use `make` to perform development tasks.\n\n*[Back to top](#documentation)*\n\n\n### License\n\nThe source code is licensed under Apache License Version 2.0\n\n*[Back to top](#documentation)*", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/kolotaev/vakt", "keywords": "ACL ABAC access-control policy security authorization permission", "license": "Apache 2.0 license", "maintainer": "", "maintainer_email": "", "name": "vakt", "package_url": "https://pypi.org/project/vakt/", "platform": "", "project_url": "https://pypi.org/project/vakt/", "project_urls": {"Homepage": "http://github.com/kolotaev/vakt"}, "release_url": "https://pypi.org/project/vakt/1.4.0/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Attribute-based access control (ABAC) SDK for Python", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"logo.png\" rel=\"nofollow\"><img alt=\"Vakt logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/388655114bc901a8aeb49270f41e805988057feb/6c6f676f2e706e67\"></a></p>\n<p>Attribute-based access control (ABAC) SDK for Python.</p>\n<p><a href=\"https://travis-ci.org/kolotaev/vakt\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1ece55f6faee8e0142cad624ae7e59f50e2dd23/68747470733a2f2f7472617669732d63692e6f72672f6b6f6c6f746165762f76616b742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/kolotaev/vakt?branch=master\" rel=\"nofollow\"><img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6072d22bc95072bd6831b2e50ead0071f2adc8d/68747470733a2f2f636f6465636f762e696f2f6769746875622f6b6f6c6f746165762f76616b742f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/vakt\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd4045b63161a41adfa791567484f8ceb318b8ea/68747470733a2f2f62616467652e667572792e696f2f70792f76616b742e737667\"></a>\n<a href=\"https://raw.githubusercontent.com/kolotaev/vakt/master/LICENSE\" rel=\"nofollow\"><img alt=\"Apache 2.0 licensed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5158a87f705edccbe3d715323e53a9054c09813/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d79656c6c6f772e737667\"></a></p>\n<hr>\n<h2>Documentation</h2>\n<ul>\n<li><a href=\"#description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#concepts\" rel=\"nofollow\">Concepts</a></li>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#components\" rel=\"nofollow\">Components</a>\n<ul>\n<li><a href=\"#policy\" rel=\"nofollow\">Policy</a></li>\n<li><a href=\"#inquiry\" rel=\"nofollow\">Inquiry</a></li>\n<li><a href=\"#rules\" rel=\"nofollow\">Rules</a>\n<ul>\n<li><a href=\"#comparison-related\" rel=\"nofollow\">Comparison-related</a></li>\n<li><a href=\"#logic-related\" rel=\"nofollow\">Logic-related</a></li>\n<li><a href=\"#list-related\" rel=\"nofollow\">List-related</a></li>\n<li><a href=\"#network-related\" rel=\"nofollow\">Network-related</a></li>\n<li><a href=\"#string-related\" rel=\"nofollow\">String-related</a></li>\n<li><a href=\"#inquiry-related\" rel=\"nofollow\">Inquiry-related</a></li>\n</ul>\n</li>\n<li><a href=\"#checker\" rel=\"nofollow\">Checker</a></li>\n<li><a href=\"#guard\" rel=\"nofollow\">Guard</a></li>\n<li><a href=\"#storage\" rel=\"nofollow\">Storage</a>\n<ul>\n<li><a href=\"#memory\" rel=\"nofollow\">Memory</a></li>\n<li><a href=\"#mongodb\" rel=\"nofollow\">MongoDB</a></li>\n<li><a href=\"#sql\" rel=\"nofollow\">SQL</a></li>\n</ul>\n</li>\n<li><a href=\"#migration\" rel=\"nofollow\">Migration</a></li>\n</ul>\n</li>\n<li><a href=\"#caching\" rel=\"nofollow\">Caching</a></li>\n<li><a href=\"#json\" rel=\"nofollow\">JSON</a></li>\n<li><a href=\"#logging\" rel=\"nofollow\">Logging</a></li>\n<li><a href=\"./examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#milestones\" rel=\"nofollow\">Milestones</a></li>\n<li><a href=\"#benchmark\" rel=\"nofollow\">Benchmark</a></li>\n<li><a href=\"#acknowledgements\" rel=\"nofollow\">Acknowledgements</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h3>Description</h3>\n<p>Vakt is an attribute-based and policy-based access control (<a href=\"https://en.wikipedia.org/wiki/Attribute-based_access_control\" rel=\"nofollow\">ABAC</a>)\ntoolkit that is based on policies.\nABAC stands aside of RBAC and ACL models, giving you\na fine-grained control on definition of the rules that restrict an access to resources and is generally considered a\n\"next generation\" authorization model.\nIn its form Vakt resembles <a href=\"https://github.com/awsdocs/iam-user-guide/blob/master/doc_source/access_policies.md\" rel=\"nofollow\">IAM Policies</a>, but\nhas a way nicer attribute managing.</p>\n<p>See <a href=\"#concepts\" rel=\"nofollow\">concepts</a> section for more details.</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Concepts</h3>\n<p>Given you have some set of resources, you can define a number of policies that will describe access to them\nanswering the following questions:</p>\n<ol>\n<li><em>What resources (resource) are being requested?</em></li>\n<li><em>Who is requesting the resource?</em></li>\n<li><em>What actions (action) are requested to be done on the asked resources?</em></li>\n<li><em>What are the rules that should be satisfied in the context of the request itself?</em></li>\n<li><em>What is resulting effect of the answer on the above questions?</em></li>\n</ol>\n<p>The overall diagram of <code>vakt</code> workflow is:</p>\n<p><a href=\"diagram.svg\" rel=\"nofollow\"><img alt=\"Vakt diagram\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c7aa555a865fc0bf8bc2fc136934e33d1c4e660/6469616772616d2e737667\"></a></p>\n<p>Vakt allows you to gain:</p>\n<ul>\n<li>Policy Based Access Control <em>(vakt is based on Policies that describe access rules, strategies to your resources)</em></li>\n<li>Fine-Grained Authorization <em>(vakt Policies give you fine-grained control over resource's, subject's, action's and context's attributes)</em></li>\n<li>Dynamic Authorization Management <em>(you can add Policies and change their attributes)</em></li>\n<li>Externalized Authorization Management <em>(you can build own external AuthZ server with vakt, see examples)</em></li>\n</ul>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Install</h3>\n<p>Vakt runs on Python &gt;= 3.4.<br>\nPyPy implementation is supported as well.</p>\n<p>For in-memory storage:</p>\n<pre>pip install vakt\n</pre>\n<p>For MongoDB storage:</p>\n<pre>pip install vakt<span class=\"o\">[</span>mongo<span class=\"o\">]</span>\n</pre>\n<p>For SQL storage:</p>\n<pre>pip install vakt<span class=\"o\">[</span>sql<span class=\"o\">]</span>\n</pre>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Usage</h3>\n<p>A quick dive-in:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">vakt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vakt.rules</span> <span class=\"kn\">import</span> <span class=\"n\">Eq</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">StartsWith</span><span class=\"p\">,</span> <span class=\"n\">And</span><span class=\"p\">,</span> <span class=\"n\">Greater</span><span class=\"p\">,</span> <span class=\"n\">Less</span>\n\n<span class=\"n\">policy</span> <span class=\"o\">=</span> <span class=\"n\">vakt</span><span class=\"o\">.</span><span class=\"n\">Policy</span><span class=\"p\">(</span>\n    <span class=\"mi\">123456</span><span class=\"p\">,</span>\n    <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'fork'</span><span class=\"p\">),</span> <span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'clone'</span><span class=\"p\">)],</span>\n    <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">StartsWith</span><span class=\"p\">(</span><span class=\"s1\">'repos/Google'</span><span class=\"p\">,</span> <span class=\"n\">ci</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)],</span>\n    <span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">(),</span> <span class=\"s1\">'stars'</span><span class=\"p\">:</span> <span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">Greater</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">Less</span><span class=\"p\">(</span><span class=\"mi\">999</span><span class=\"p\">))}],</span>\n    <span class=\"n\">effect</span><span class=\"o\">=</span><span class=\"n\">vakt</span><span class=\"o\">.</span><span class=\"n\">ALLOW_ACCESS</span><span class=\"p\">,</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'referer'</span><span class=\"p\">:</span> <span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'https://github.com'</span><span class=\"p\">)},</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    Allow to fork or clone any Google repository for</span>\n<span class=\"s2\">    users that have &gt; 50 and &lt; 999 stars and came from Github</span>\n<span class=\"s2\">    \"\"\"</span>\n<span class=\"p\">)</span>\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">vakt</span><span class=\"o\">.</span><span class=\"n\">MemoryStorage</span><span class=\"p\">()</span>\n<span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"p\">)</span>\n<span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">vakt</span><span class=\"o\">.</span><span class=\"n\">Guard</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">,</span> <span class=\"n\">vakt</span><span class=\"o\">.</span><span class=\"n\">RulesChecker</span><span class=\"p\">())</span>\n\n<span class=\"n\">inq</span> <span class=\"o\">=</span> <span class=\"n\">vakt</span><span class=\"o\">.</span><span class=\"n\">Inquiry</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'fork'</span><span class=\"p\">,</span>\n                   <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s1\">'repos/google/tensorflow'</span><span class=\"p\">,</span>\n                   <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'larry'</span><span class=\"p\">,</span> <span class=\"s1\">'stars'</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">},</span>\n                   <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'referer'</span><span class=\"p\">:</span> <span class=\"s1\">'https://github.com'</span><span class=\"p\">})</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">inq</span><span class=\"p\">)</span>\n</pre>\n<p>For more examples see <a href=\"./examples\" rel=\"nofollow\">here</a>.</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Components</h3>\n<h4>Policy</h4>\n<p>Policy is a main object for defining rules for accessing resources.\nThe main parts reflect questions described in <a href=\"#concepts\" rel=\"nofollow\">Concepts</a> section:</p>\n<ul>\n<li>resources - a list of resources. Answers: what is asked?</li>\n<li>subjects  - a list of subjects. Answers: who asks access to resources?</li>\n<li>actions - a list of actions. Answers: what actions are asked to be performed on resources?</li>\n<li>context - rules that should be satisfied by the given inquiry's context.</li>\n<li>effect - If policy matches all the above conditions, what effect does it imply?\nCan be either <code>vakt.ALLOW_ACCESS</code> or <code>vakt.DENY_ACCESS</code></li>\n</ul>\n<p>All <code>resources</code>, <code>subjects</code> and <code>actions</code> are described with\na list containing strings, regexes, <a href=\"#rules\" rel=\"nofollow\">Rules</a> or dictionaries of strings (attributes) to <a href=\"#rules\" rel=\"nofollow\">Rules</a>.\nEach element in list acts as logical OR. Each key in a dictionary of Rules acts as logical AND.<br>\n<code>context</code> can be described only with a dictionary of <a href=\"#rules\" rel=\"nofollow\">Rules</a>.</p>\n<p>Depending on a way <code>resources</code>, <code>subjects</code>, <code>actions</code> are described, Policy can have either\nString-based or Rule-based type. Can be inspected by <code>policy.type</code>.\nThis enforces the use of a concrete Checker implementation. See <a href=\"#checker\" rel=\"nofollow\">Checker</a> for more.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt</span> <span class=\"kn\">import</span> <span class=\"n\">Policy</span><span class=\"p\">,</span> <span class=\"n\">ALLOW_ACCESS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vakt.rules</span> <span class=\"kn\">import</span> <span class=\"n\">CIDR</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Eq</span><span class=\"p\">,</span> <span class=\"n\">NotEq</span><span class=\"p\">,</span> <span class=\"n\">In</span>\n    \n<span class=\"c1\"># Rule-based policy (defined with Rules and dictionaries of Rules)</span>\n<span class=\"n\">Policy</span><span class=\"p\">(</span>\n    <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    Allow access to administration interface subcategories: 'panel', 'switch' if user is not </span>\n<span class=\"s2\">    a developer and came from local IP address.</span>\n<span class=\"s2\">    \"\"\"</span><span class=\"p\">,</span>\n    <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">()],</span>\n    <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'category'</span><span class=\"p\">:</span> <span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'administration'</span><span class=\"p\">),</span> <span class=\"s1\">'sub'</span><span class=\"p\">:</span> <span class=\"n\">In</span><span class=\"p\">([</span><span class=\"s1\">'panel'</span><span class=\"p\">,</span> <span class=\"s1\">'switch'</span><span class=\"p\">])}],</span>\n    <span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">(),</span> <span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"n\">NotEq</span><span class=\"p\">(</span><span class=\"s1\">'developer'</span><span class=\"p\">)}],</span>\n    <span class=\"n\">effect</span><span class=\"o\">=</span><span class=\"n\">ALLOW_ACCESS</span><span class=\"p\">,</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ip'</span><span class=\"p\">:</span> <span class=\"n\">CIDR</span><span class=\"p\">(</span><span class=\"s1\">'127.0.0.1/32'</span><span class=\"p\">)}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># String-based policy (defined with regular expressions)</span>\n<span class=\"n\">Policy</span><span class=\"p\">(</span>\n    <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    Allow all readers of the book library whose surnames start with M get and read any book or magazine,</span>\n<span class=\"s2\">    but only when they connect from local library's computer</span>\n<span class=\"s2\">    \"\"\"</span><span class=\"p\">,</span>\n    <span class=\"n\">effect</span><span class=\"o\">=</span><span class=\"n\">ALLOW_ACCESS</span><span class=\"p\">,</span>\n    <span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'&lt;[\\w]+ M[\\w]+&gt;'</span><span class=\"p\">],</span>\n    <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'library:books:&lt;.+&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'office:magazines:&lt;.+&gt;'</span><span class=\"p\">),</span>\n    <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'&lt;read|get&gt;'</span><span class=\"p\">],</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ip'</span><span class=\"p\">:</span> <span class=\"n\">CIDR</span><span class=\"p\">(</span><span class=\"s1\">'192.168.2.0/24'</span><span class=\"p\">)}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Basically you want to create some set of Policies that encompass access rules for your domain and store them for\nmaking future decisions by the <a href=\"#guard\" rel=\"nofollow\">Guard</a> component.</p>\n<pre><span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"n\">MemoryStorage</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">policies</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n<p>Additionally you can create Policies with predefined effect classes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt</span> <span class=\"kn\">import</span> <span class=\"n\">PolicyAllow</span><span class=\"p\">,</span> <span class=\"n\">PolicyDeny</span><span class=\"p\">,</span> <span class=\"n\">ALLOW_ACCESS</span><span class=\"p\">,</span> <span class=\"n\">DENY_ACCESS</span>\n    \n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PolicyAllow</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'&lt;read|get&gt;'</span><span class=\"p\">],</span> <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'library:books:&lt;.+&gt;'</span><span class=\"p\">],</span> <span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'&lt;[\\w]+ M[\\w]+&gt;'</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">ALLOW_ACCESS</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">effect</span>\n\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PolicyDeny</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'&lt;read|get&gt;'</span><span class=\"p\">],</span> <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'library:books:&lt;.+&gt;'</span><span class=\"p\">],</span> <span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'&lt;[\\w]+ M[\\w]+&gt;'</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">DENY_ACCESS</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">effect</span>\n</pre>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h4>Inquiry</h4>\n<p>Inquiry is an object that serves as a mediator between Vakt and outer world request for resource access. All you need\nto do is take any kind of incoming request (REST request, SOAP, etc.) and build an <code>Inquiry</code> out of it in order to\nfeed it to Vakt. There are no concrete builders for Inquiry from various request types, since it's a very meticulous\nprocess and you have hands on control for doing it by yourself. Let's see an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt</span> <span class=\"kn\">import</span> <span class=\"n\">Inquiry</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">session</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># if policies are defined on some subject's and resource's attributes with dictionaries of Rules:</span>\n<span class=\"n\">inquiry2</span> <span class=\"o\">=</span> <span class=\"n\">Inquiry</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'login'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">],</span> <span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'user_role'</span><span class=\"p\">]},</span>\n                   <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'action'</span><span class=\"p\">],</span>\n                   <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'book'</span><span class=\"p\">:</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'book'</span><span class=\"p\">),</span> <span class=\"s1\">'chapter'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'chapter'</span><span class=\"p\">]},</span>\n                   <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ip'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">remote_addr</span><span class=\"p\">})</span>\n                   \n<span class=\"c1\"># if policies are defined with strings or regular expressions:</span>\n<span class=\"n\">inquiry</span> <span class=\"o\">=</span> <span class=\"n\">Inquiry</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">],</span>\n                  <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'action'</span><span class=\"p\">],</span>\n                  <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'page'</span><span class=\"p\">],</span>\n                  <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ip'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">remote_addr</span><span class=\"p\">})</span>\n</pre>\n<p>Here we are taking form params from Flask request and additional request information. Then we transform them\nto Inquiry. That's it.</p>\n<p>Inquiry has several constructor arguments:</p>\n<ul>\n<li>resource - any | dictionary of str -&gt; any. What resource is being asked to be accessed?</li>\n<li>action - any | dictionary str -&gt; any. What is being asked to be done on the resource?</li>\n<li>subject - any | dictionary str -&gt; any. Who asks for it?</li>\n<li>context - dictionary str -&gt; any. What is the context of the request?</li>\n</ul>\n<p>If you were observant enough you might have noticed that Inquiry resembles Policy, where Policy describes multiple\nvariants of resource access from the owner side and Inquiry describes an concrete access scenario from consumer side.</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h4>Rules</h4>\n<p>Rules allow you to describe conditions directly on <code>action</code>, <code>subject</code>, <code>resource</code> and <code>context</code>\nor on their attributes.\nIf at least one Rule in the Rule-set is not satisfied Inquiry is rejected by given Policy.</p>\n<p>Attaching a Rule-set to a Policy is simple. Here are some examples:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt</span> <span class=\"kn\">import</span> <span class=\"n\">Policy</span><span class=\"p\">,</span> <span class=\"n\">rules</span>\n\n<span class=\"n\">Policy</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'Tommy'</span><span class=\"p\">)}],</span>\n<span class=\"p\">),</span>\n\n<span class=\"n\">Policy</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">),</span> <span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'list'</span><span class=\"p\">),</span> <span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'read'</span><span class=\"p\">)],</span>\n<span class=\"p\">),</span>\n\n<span class=\"n\">Policy</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'secret'</span><span class=\"p\">:</span> <span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">Equal</span><span class=\"p\">(</span><span class=\"s1\">'.KIMZihH0gsrc'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'ip'</span><span class=\"p\">:</span> <span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">CIDR</span><span class=\"p\">(</span><span class=\"s1\">'192.168.0.15/24'</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>There are a number of different Rule types, see below.</p>\n<p>If the existing Rules are not enough for you, feel free to define your <a href=\"./examples/extending.py\" rel=\"nofollow\">own</a>.</p>\n<h5>Comparison-related</h5>\n<table>\n<thead>\n<tr>\n<th>Rule</th>\n<th>Example in Policy</th>\n<th>Example in Inquiry</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Eq</td>\n<td><code>'age': Eq(40)</code></td>\n<td><code>'age': 40</code></td>\n<td></td>\n</tr>\n<tr>\n<td>NotEq</td>\n<td><code>'age': NotEq(40)</code></td>\n<td><code>'age': 40</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Greater</td>\n<td><code>'height': Greater(6.2)</code></td>\n<td><code>'height': 5.8</code></td>\n<td></td>\n</tr>\n<tr>\n<td>Less</td>\n<td><code>'height': Less(6.2)</code></td>\n<td><code>'height': 5.8</code></td>\n<td></td>\n</tr>\n<tr>\n<td>GreaterOrEqual</td>\n<td><code>'stars': GreaterOrEqual(300)</code></td>\n<td><code>'stars': 77</code></td>\n<td></td>\n</tr>\n<tr>\n<td>LessOrEqual</td>\n<td><code>'stars': LessOrEqual(300)</code></td>\n<td><code>'stars': 300</code></td>\n<td></td>\n</tr></tbody></table>\n<h5>Logic-related</h5>\n<table>\n<thead>\n<tr>\n<th>Rule</th>\n<th>Example in Policy</th>\n<th>Example in Inquiry</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Truthy</td>\n<td><code>'admin': Truthy()</code></td>\n<td><code>'admin': user.is_admin()</code></td>\n<td>Evaluates on Inquiry creation</td>\n</tr>\n<tr>\n<td>Falsy</td>\n<td><code>'admin': Falsy()</code></td>\n<td><code>'admin': lambda x: x.is_admin()</code></td>\n<td>Evaluates on Inquiry creation</td>\n</tr>\n<tr>\n<td>Not</td>\n<td><code>'age': Not(Greater(90))</code></td>\n<td><code>'age': 40</code></td>\n<td></td>\n</tr>\n<tr>\n<td>And</td>\n<td><code>'stars': And(Greater(50), Less(89))</code></td>\n<td><code>'stars': 78</code></td>\n<td>Also, attributes in dictionary of Rules act as AND logic</td>\n</tr>\n<tr>\n<td>Or</td>\n<td><code>'stars': Or(Greater(50), Less(120), Eq(8888))</code></td>\n<td><code>'stars': 78</code></td>\n<td>Also, rules in a list of, say, <code>actions</code> act as OR logic</td>\n</tr>\n<tr>\n<td>Any</td>\n<td><code>actions=[Any()]</code></td>\n<td><code>action='get'</code>, <code>action='foo'</code></td>\n<td>Placeholder that fits any value</td>\n</tr>\n<tr>\n<td>Neither</td>\n<td><code>subjects=[Neither()]</code></td>\n<td><code>subject='Max'</code>,  <code>subject='Joe'</code></td>\n<td>Not very useful, left only as a counterpart of Any</td>\n</tr></tbody></table>\n<h5>List-related</h5>\n<table>\n<thead>\n<tr>\n<th>Rule</th>\n<th>Example in Policy</th>\n<th>Example in Inquiry</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>In</td>\n<td><code>'method': In('get', 'post')</code></td>\n<td><code>'method': 'get'</code></td>\n<td></td>\n</tr>\n<tr>\n<td>NotIn</td>\n<td><code>'method': NotIn('get', 'post')</code></td>\n<td><code>'method': 'get'</code></td>\n<td></td>\n</tr>\n<tr>\n<td>AllIn</td>\n<td><code>'name': AllIn('Max', 'Joe')</code></td>\n<td><code>'name': ['Max', 'Joe']</code></td>\n<td></td>\n</tr>\n<tr>\n<td>AllNotIn</td>\n<td><code>'name': AllNotIn('Max', 'Joe')</code></td>\n<td><code>'name': ['Max', 'Joe']</code></td>\n<td></td>\n</tr>\n<tr>\n<td>AnyIn</td>\n<td><code>'height': AnyIn(5.9, 7.5, 4.9)</code></td>\n<td><code>'height': [7.55]</code></td>\n<td></td>\n</tr>\n<tr>\n<td>AnyNotIn</td>\n<td><code>'height': AnyNotIn(5.9, 7.5, 4.9)</code></td>\n<td><code>'height': [7.55]</code></td>\n<td></td>\n</tr></tbody></table>\n<h5>Network-related</h5>\n<table>\n<thead>\n<tr>\n<th>Rule</th>\n<th>Example in Policy</th>\n<th>Example in Inquiry</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CIDR</td>\n<td><code>'ip': CIDR('192.168.2.0/24')</code></td>\n<td><code>'ip': 192.168.2.4</code></td>\n<td></td>\n</tr></tbody></table>\n<h5>String-related</h5>\n<table>\n<thead>\n<tr>\n<th>Rule</th>\n<th>Example in Policy</th>\n<th>Example in Inquiry</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Equal</td>\n<td><code>'name': Equal('max', ci=True)</code></td>\n<td><code>'name': 'Max'</code></td>\n<td>Aliased as <code>StrEqual</code>. Use instead of <code>Eq</code> it you want string-type check and case-insensitivity</td>\n</tr>\n<tr>\n<td>PairsEqual</td>\n<td><code>'names': PairsEqual()</code></td>\n<td><code>'names': ['Bob', 'Bob']</code></td>\n<td>Aliased as <code>StrPairsEqual</code></td>\n</tr>\n<tr>\n<td>RegexMatch</td>\n<td><code>'file': RegexMatch(r'\\.rb$')</code></td>\n<td><code>'file': 'test.rb'</code></td>\n<td></td>\n</tr>\n<tr>\n<td>StartsWith</td>\n<td><code>'file': StartsWith('logs-')</code></td>\n<td><code>'file': 'logs-data-101967.log'</code></td>\n<td>Supports case-insensitivity</td>\n</tr>\n<tr>\n<td>EndsWith</td>\n<td><code>'file': EndsWith('.log')</code></td>\n<td><code>'file': 'logs-data-101967.log'</code></td>\n<td>Supports case-insensitivity</td>\n</tr>\n<tr>\n<td>Contains</td>\n<td><code>'file': Contains('sun')</code></td>\n<td><code>'file': 'observations-sunny-days.csv'</code></td>\n<td>Supports case-insensitivity</td>\n</tr></tbody></table>\n<h5>Inquiry-related</h5>\n<p>Inquiry-related rules are useful if you want to express equality relation between inquiry elements or their attributes.</p>\n<table>\n<thead>\n<tr>\n<th>Rule</th>\n<th>Example in Policy</th>\n<th>Example in Inquiry</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SubjectMatch</td>\n<td><code>resources=[{'id': SubjectMatch()}]</code></td>\n<td><code>Inquiry(subject='Max', resource={'id': 'Max'})</code></td>\n<td>Works for the whole subject value or one of its attributes</td>\n</tr>\n<tr>\n<td>ActionMatch</td>\n<td><code>subjects=[ActionMatch('id')]</code></td>\n<td><code>Inquiry(subject='Max', action={'method': 'get', id': 'Max'})</code></td>\n<td>Works for the whole action value or one of its attributes</td>\n</tr>\n<tr>\n<td>ResourceMatch</td>\n<td><code>subjects=[ResourceMatch('id')]</code></td>\n<td><code>Inquiry(subject='Max', resource={'res': 'book', id': 'Max'})</code></td>\n<td>Works for the whole resource value or one of its attributes</td>\n</tr>\n<tr>\n<td>SubjectEqual</td>\n<td><code>'data': SubjectEqual()</code></td>\n<td><code>Inquiry(subject='Max')</code></td>\n<td>Works only for strings. Favor SubjectMatch</td>\n</tr>\n<tr>\n<td>ActionEqual</td>\n<td><code>'data': ActionEqual()</code></td>\n<td><code>Inquiry(action='get')</code></td>\n<td>Works only for strings. Favor ActionMatch</td>\n</tr>\n<tr>\n<td>ResourceIn</td>\n<td><code>'data': ResourceIn()</code></td>\n<td><code>Inquiry(resource='/books/')</code></td>\n<td>Works only for strings. Favor ResourceMatch</td>\n</tr></tbody></table>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h4>Checker</h4>\n<p>Checker allows you to check whether Policy matches Inquiry by concrete field (<code>subject</code>, <code>action</code>, etc.). It's used\ninternally by <a href=\"#guard\" rel=\"nofollow\">Guard</a>, but you should be aware of Checker types:</p>\n<ul>\n<li>RulesChecker - universal type that is used to check match of Policies defined with Rules or dictionaries of Rules\n(Rule-based Policy type). It gives you the highest flexibility.\nMost of the time you will use this type of Polices and thus this type of a Checker.\nBesides, it's much more performant than RegexChecker. See <a href=\"#benchmark\" rel=\"nofollow\">benchmark</a> for more details.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt</span> <span class=\"kn\">import</span> <span class=\"n\">RulesChecker</span>\n\n<span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">RulesChecker</span><span class=\"p\">()</span>\n<span class=\"c1\"># etc.</span>\n</pre>\n<ul>\n<li>RegexChecker - checks match by regex test for policies defined with strings and regexps (String-based Policy type).\nThis means that all you Policies\ncan be defined in regex syntax (but if no regex defined in Policy falls back to simple string equality test) - it\ngives you better flexibility compared to simple strings, but carries a burden of relatively slow performance.\nYou can configure a LRU cache size to adjust performance to your needs:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt</span> <span class=\"kn\">import</span> <span class=\"n\">RegexChecker</span>\n\n<span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">RegexChecker</span><span class=\"p\">(</span><span class=\"mi\">2048</span><span class=\"p\">)</span>\n<span class=\"n\">ch2</span> <span class=\"o\">=</span> <span class=\"n\">RegexChecker</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">)</span>\n<span class=\"c1\"># etc.</span>\n</pre>\n<p>See <a href=\"#benchmark\" rel=\"nofollow\">benchmark</a> for more details.</p>\n<p>Syntax for description of Policy fields is:</p>\n<pre><code> '&lt;foo.*&gt;'\n 'foo&lt;[abc]{2}&gt;bar'\n 'foo&lt;\\w+&gt;'\n 'foo'\n</code></pre>\n<p>Where <code>&lt;&gt;</code> are delimiters of a regular expression boundaries part. Custom Policy can redefine them by overriding\n<code>start_tag</code> and <code>end_tag</code> properties. Generally you always want to use the first variant: <code>&lt;foo.*&gt;</code>.</p>\n<p><strong>WARNING. Please note, that storages have varying level of regexp support. For example,\nmost SQL databases allow to use POSIX metacharacters whereas python <code>re</code> module\nand thus MemoryStorage does not. So, while defining policies you're safe and sound\nas long as you understand how storage of your choice handles the regexps you specified.</strong></p>\n<ul>\n<li>StringExactChecker - the most quick checker:</li>\n</ul>\n<pre><code>Checker that uses exact string equality. Case-sensitive.\nE.g. 'sun' in 'sunny' - False\n     'sun' in 'sun' - True\n</code></pre>\n<ul>\n<li>StringFuzzyChecker - quick checker with some extent of flexibility:</li>\n</ul>\n<pre><code>Checker that uses fuzzy substring equality. Case-sensitive.\nE.g. 'sun' in 'sunny' - True\n     'sun' in 'sun' - True\n</code></pre>\n<p>Note, that some <a href=\"#storage\" rel=\"nofollow\">Storage</a> handlers can already check if Policy fits Inquiry in\n<code>find_for_inquiry()</code> method by performing specific to that storage queries - Storage can (and generally should)\ndecide on the type of actions based on the checker class passed to <a href=\"#guard\" rel=\"nofollow\">Guard</a> constructor\n(or to <code>find_for_inquiry()</code> directly).</p>\n<p>Regardless of the results returned by a Storage the Checker is always the last row of control\nbefore Vakt makes a decision.</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h4>Guard</h4>\n<p>Guard component is a main entry point for Vakt to make a decision. It has one method <code>is_allowed</code> that passed an\n<a href=\"#inquiry\" rel=\"nofollow\">Inquiry</a> gives you a boolean answer: is that Inquiry allowed or not?</p>\n<p>Guard is constructed with <a href=\"#storage\" rel=\"nofollow\">Storage</a> and <a href=\"#checker\" rel=\"nofollow\">Checker</a>.</p>\n<p><strong>Policies that have String-based type won't match if RulesChecker is used and vise-versa.</strong></p>\n<pre><span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"n\">MemoryStorage</span><span class=\"p\">()</span>\n<span class=\"c1\"># And persist all our Policies so that to start serving our library.</span>\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">policies</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\n<span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Guard</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">,</span> <span class=\"n\">RulesChecker</span><span class=\"p\">())</span>\n\n<span class=\"k\">if</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">inquiry</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"You've been logged-in\"</span><span class=\"p\">,</span> <span class=\"mi\">200</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Go away, you violator!\"</span><span class=\"p\">,</span> <span class=\"mi\">401</span>\n</pre>\n<p>To gain best performance read <a href=\"#caching\" rel=\"nofollow\">Caching</a> section.</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h4>Storage</h4>\n<p>Storage is a component that gives an interface for manipulating <a href=\"#policy\" rel=\"nofollow\">Policies</a> persistence in various places.</p>\n<p>It provides the following methods:</p>\n<pre><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"p\">)</span>                 <span class=\"c1\"># Store a Policy</span>\n<span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">uid</span><span class=\"p\">)</span>                    <span class=\"c1\"># Retrieve a Policy by its ID</span>\n<span class=\"n\">get_all</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">)</span>      <span class=\"c1\"># Retrieve all stored Policies (with pagination)</span>\n<span class=\"n\">retrieve_all</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">)</span>         <span class=\"c1\"># Retrieve all existing stored Policies (without pagination)</span>\n<span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"p\">)</span>              <span class=\"c1\"># Store an updated Policy</span>\n<span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">uid</span><span class=\"p\">)</span>                 <span class=\"c1\"># Delete Policy from storage by its ID</span>\n<span class=\"n\">find_for_inquiry</span><span class=\"p\">(</span><span class=\"n\">inquiry</span><span class=\"p\">)</span>   <span class=\"c1\"># Retrieve Policies that match the given Inquiry</span>\n</pre>\n<p>Storage may have various backend implementations (RDBMS, NoSQL databases, etc.), they also may vary in performance\ncharacteristics, so see <a href=\"#caching\" rel=\"nofollow\">Caching</a> and <a href=\"#benchmark\" rel=\"nofollow\">Benchmark</a> sections.</p>\n<p>Vakt ships some Storage implementations out of the box. See below:</p>\n<h5>Memory</h5>\n<p>Implementation that stores Policies in memory. It's not backed by any file or something, so every restart of your\napplication will swipe out everything that was stored. Useful for testing.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt</span> <span class=\"kn\">import</span> <span class=\"n\">MemoryStorage</span>\n\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">MemoryStorage</span><span class=\"p\">()</span>\n</pre>\n<h5>MongoDB</h5>\n<p>MongoDB is chosen as the most popular and widespread NO-SQL database.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">MongoClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vakt.storage.mongo</span> <span class=\"kn\">import</span> <span class=\"n\">MongoStorage</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">27017</span><span class=\"p\">)</span>\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">MongoStorage</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s1\">'database-name'</span><span class=\"p\">,</span> <span class=\"n\">collection</span><span class=\"o\">=</span><span class=\"s1\">'optional-collection-name'</span><span class=\"p\">)</span>\n</pre>\n<p>Default collection name is 'vakt_policies'.</p>\n<p>Actions are the same as for any Storage that conforms interface of <code>vakt.storage.abc.Storage</code> base class.</p>\n<p>Beware that currently MongoStorage supports indexed and filtered-out <code>find_for_inquiry()</code> only for\nStringExact, StringFuzzy and Regex (since MongoDB version 4.2 and onwards) checkers.\nWhen used with the RulesChecker it simply returns all the Policies from the database.</p>\n<h5>SQL</h5>\n<p>SQL storage is backed by SQLAlchemy, thus it should support any RDBMS available for it:\nMySQL, Postgres, Oracle, MSSQL, Sqlite, etc.</p>\n<p>Example for MySQL.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.orm</span> <span class=\"kn\">import</span> <span class=\"n\">sessionmaker</span><span class=\"p\">,</span> <span class=\"n\">scoped_session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vakt.storage.sql</span> <span class=\"kn\">import</span> <span class=\"n\">SQLStorage</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"s1\">'mysql://root:root@localhost/vakt_db'</span><span class=\"p\">)</span>\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">SQLStorage</span><span class=\"p\">(</span><span class=\"n\">scoped_session</span><span class=\"o\">=</span><span class=\"n\">scoped_session</span><span class=\"p\">(</span><span class=\"n\">sessionmaker</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Don't forget to run migrations here (especially for the first time)</span>\n<span class=\"o\">...</span>\n</pre>\n<p>Beware that currently SQLStorage supports indexed and filtered-out <code>find_for_inquiry()</code> only for\nStringExact, StringFuzzy and Regex checkers.\nWhen used with the RulesChecker it simply returns all the Policies from the database.</p>\n<p>Note that vakt focuses on testing SQLStorage functionality only for two most popular open-source databases:\nMySQL and Postgres. Other databases support may have worse performance characteristics and/or bugs.\nFeel free to report any issues.</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h4>Migration</h4>\n<p><code>vakt.migration</code> is a set of components that are useful from the perspective of the <a href=\"#storage\" rel=\"nofollow\">Storage</a>.\nIt's recommended to favor it over manual actions on DB schema/data\nsince it's aware of Vakt requirements to Policies data. But it's not mandatory, anyway.\nHowever it's up to a particular Storage to decide whether it needs migrations or not.\nIt consists of 3 components:</p>\n<ul>\n<li><code>Migration</code></li>\n<li><code>MigrationSet</code></li>\n<li><code>Migrator</code></li>\n</ul>\n<p><code>Migration</code> allows you to describe data modifications between versions.\nEach storage can have a number of <code>Migration</code> classes to address different releases with the order of the migration\nspecified in <code>order</code> property.\nShould be located inside particular storage module and implement <code>vakt.storage.migration.Migration</code>.\nMigration has 2 main methods (as you might guess) and 1 property:</p>\n<ul>\n<li><code>up</code> - runs db \"schema\" upwards</li>\n<li><code>down</code> - runs db \"schema\" downwards (rolls back the actions of <code>up</code>)</li>\n<li><code>order</code> - tells the number of the current migration in a row</li>\n</ul>\n<p><code>MigrationSet</code> is a component that represents a collection of Migrations for a Storage.\nYou should define your own migration-set. It should be located inside particular storage module and implement\n<code>vakt.storage.migration.MigrationSet</code>. It has 3 methods that lest unimplemented:</p>\n<ul>\n<li><code>migrations</code> - should return all initialized Migration objects</li>\n<li><code>save_applied_number</code> - saves a number of a lst applied up migration in the Storage for later reference</li>\n<li><code>last_applied</code> - returns a number of a lst applied up migration from the Storage</li>\n</ul>\n<p><code>Migrator</code> is an executor of a migrations. It can execute all migrations up or down, or execute a particular migration\nif <code>number</code> argument is provided.</p>\n<p>Example usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">MongoClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vakt.storage.mongo</span> <span class=\"kn\">import</span> <span class=\"n\">MongoStorage</span><span class=\"p\">,</span> <span class=\"n\">MongoMigrationSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vakt.storage.migration</span> <span class=\"kn\">import</span> <span class=\"n\">Migrator</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">27017</span><span class=\"p\">)</span>\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">MongoStorage</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s1\">'database-name'</span><span class=\"p\">,</span> <span class=\"n\">collection</span><span class=\"o\">=</span><span class=\"s1\">'optional-collection-name'</span><span class=\"p\">)</span>\n\n<span class=\"n\">migrator</span> <span class=\"o\">=</span> <span class=\"n\">Migrator</span><span class=\"p\">(</span><span class=\"n\">MongoMigrationSet</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">))</span>\n<span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">down</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">down</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Caching</h3>\n<p>Vakt has several layers of caching, that serve a single purpose: speed up policy enforcement decisions.\nIn most situations and use-cases you might want to use them all, thus they are designed not to\ninteract with each other, but rather work in tandem\n(nonetheless you are free to use any single layer alone or any combination of them).\nThat said let's look at all those layers.</p>\n<h5>Caching <a href=\"#checker\" rel=\"nofollow\"><code>RegexChecker</code></a></h5>\n<p>It's relevant only for <code>RegexChecker</code> and allows to cache parsing and execution of regex-defined Policies,\nwhich can be very expensive\ndue to inherently slow computational performance of regular expressions and vakt's parsing. When creating a <code>RegexChecker</code>\nyou can specify a cache size for an in-memory\n<a href=\"https://docs.python.org/3/library/functools.html#functools.lru_cache\" rel=\"nofollow\">LRU (least recently used)</a> cache. Currently\nonly python's native LRU cache is supported.</p>\n<pre><span class=\"c1\"># preferably size is a power of 2</span>\n<span class=\"n\">chk</span> <span class=\"o\">=</span> <span class=\"n\">RegexChecker</span><span class=\"p\">(</span><span class=\"n\">cache_size</span><span class=\"o\">=</span><span class=\"mi\">2048</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or simply</span>\n<span class=\"n\">chk</span> <span class=\"o\">=</span> <span class=\"n\">RegexChecker</span><span class=\"p\">(</span><span class=\"mi\">2048</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or 512 by default</span>\n<span class=\"n\">chk</span> <span class=\"o\">=</span> <span class=\"n\">RegexChecker</span><span class=\"p\">()</span>\n</pre>\n<h5>Caching the entire Storage backend</h5>\n<p>Some vakt's Storages may be not very clever at filtering Policies at <code>find_for_inquiry</code> especially when dealing with\nRule-based policies. In this case they return the whole set of the existing policies stored in the external storage.\nNeedless to say that it makes your application very heavy IO-bound and decreases performance for large policy sets\ndrastically. See <a href=\"#benchmark\" rel=\"nofollow\">benchmark</a> for more details and exact numbers.</p>\n<p>In such a case you can use <code>EnfoldCache</code> that wraps your main storage (e.g. MongoStorage) into another one\n(it's meant to be some in-memory Storage). It returns you a Storage that behind the scene routes all the read-calls\n(get, get_all, find_for_inquiry, ...) to an in-memory one and all modify-calls (add, update, delete) to your main Storage (\ndon't worry, in-memory Storage is kept up-to date with the main Storage). In case a requested policy is not found in in-memory Storage\nit's considered a cache miss and a request is routed to a main Storage.</p>\n<p>Also, in order to keep Storages in sync,\nwhen you initialize <code>EnfoldCache</code> the in-memory Storage will fetch all the existing Policies from a main one -\ntherefore be forewarned that it might take some amount of time depending on the size of a policy-set.<br>\nOptionally you can call <code>populate</code> method after initialization, but in this case <strong>do not ever call any modify-related methods of\nEnfoldCache'd storage before <code>populate()</code>, otherwise Storages will be in an unsynchronized state and it'll\nresult in broken <code>Guard</code> functionality.</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt</span> <span class=\"kn\">import</span> <span class=\"n\">EnfoldCache</span><span class=\"p\">,</span> <span class=\"n\">MemoryStorage</span><span class=\"p\">,</span> <span class=\"n\">Policy</span><span class=\"p\">,</span> <span class=\"n\">Guard</span><span class=\"p\">,</span> <span class=\"n\">RegexChecker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vakt.storage.mongo</span> <span class=\"kn\">import</span> <span class=\"n\">MongoStorage</span>\n\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">EnfoldCache</span><span class=\"p\">(</span><span class=\"n\">MongoStorage</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">MemoryStorage</span><span class=\"p\">())</span>\n<span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Policy</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'get'</span><span class=\"p\">]))</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Guard</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">,</span> <span class=\"n\">RegexChecker</span><span class=\"p\">())</span>\n</pre>\n<h5>Caching the Guard</h5>\n<p><code>Guard.is_allowed</code> it the the centerpiece of vakt. Therefore it makes ultimate sense to cache it.\nAnd <code>create_cached_guard()</code> function allows you to do exactly that. You need to pass it a Storage, a Checker and a\nmaximum size of a cache. It will return you a tuple of: Guard, Storage and AllowanceCache instance:</p>\n<ul>\n<li>You must do all policies operations with the returned storage\n(which is a slightly enhanced version of a Storage you provided to the function).</li>\n<li>The returned Guard is a normal vakt's <code>Guard</code>, but its <code>is_allowed</code> is cached with <code>AllowaceCache</code>.</li>\n<li>The returned cache is an instance of <code>AllowaceCache</code> and has a handy method <code>info</code> that provides current state of the cache.</li>\n</ul>\n<p>How it works?</p>\n<p>Only the first Inquiry will be passed to <code>is_allowed</code>, all the subsequent answers for similar Inquiries will be taken\nfrom cache. <code>AllowanceCache</code> is rather coarse-grained and if you call Storage's <code>add</code>, <code>update</code> or <code>delete</code> the whole\ncache will be invalided because the policy-set has changed. However for stable policy-sets it is a good performance boost.</p>\n<p>By default <code>AllowanceCache</code> uses in-memory LRU cache and <code>maxsize</code> param is it's size. If for some reason it does not satisfy\nyour needs, you can pass your own implementation of a cache backend that is a subclass of\n<code>vakt.cache.AllowanceCacheBackend</code> to <code>create_cached_guard</code> as a <code>cache</code> keyword argument.</p>\n<pre><span class=\"n\">guard</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"p\">,</span> <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">create_cached_guard</span><span class=\"p\">(</span><span class=\"n\">MongoStorage</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span> <span class=\"n\">RulesChecker</span><span class=\"p\">(),</span> <span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">)</span>\n\n<span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Policy</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'get'</span><span class=\"p\">)],</span> <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'book'</span><span class=\"p\">)],</span> <span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'Max'</span><span class=\"p\">)],</span> <span class=\"n\">effect</span><span class=\"o\">=</span><span class=\"n\">ALLOW_ACCESS</span><span class=\"p\">)</span>\n<span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Given we have some inquiries that tend to repeat</span>\n<span class=\"n\">inq1</span> <span class=\"o\">=</span> <span class=\"n\">Inquiry</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s1\">'book'</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Max'</span><span class=\"p\">)</span>\n<span class=\"n\">inq2</span> <span class=\"o\">=</span> <span class=\"n\">Inquiry</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s1\">'book'</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Jamey'</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">inq1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">inq1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">inq1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">inq2</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">inq1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_allowed</span><span class=\"p\">(</span><span class=\"n\">inq1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can check cache state</span>\n<span class=\"k\">assert</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hits</span>\n<span class=\"k\">assert</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">misses</span>\n<span class=\"k\">assert</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">currsize</span>\n</pre>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>JSON</h3>\n<p>All Policies, Inquiries and Rules can be JSON-serialized and deserialized.</p>\n<p>For example, for a Policy all you need is just run:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt.policy</span> <span class=\"kn\">import</span> <span class=\"n\">Policy</span>\n\n<span class=\"n\">policy</span> <span class=\"o\">=</span> <span class=\"n\">Policy</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n\n<span class=\"n\">json_policy</span> <span class=\"o\">=</span> <span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json_policy</span><span class=\"p\">)</span>\n<span class=\"c1\"># {\"actions\": [], \"description\": null, \"effect\": \"deny\", \"uid\": \"1\",</span>\n<span class=\"c1\"># \"resources\": [], \"context\": {}, \"subjects\": []}</span>\n\n<span class=\"n\">policy</span> <span class=\"o\">=</span> <span class=\"n\">Policy</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">json_policy</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;vakt.policy.Policy object at 0x1023ca198&gt;</span>\n</pre>\n<p>The same goes for Rules, Inquiries.\nAll custom classes derived from them support this functionality as well.\nIf you do not derive from Vakt's classes, but want this option, you can mix-in <code>vakt.util.JsonSerializer</code> class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vakt.util</span> <span class=\"kn\">import</span> <span class=\"n\">JsonSerializer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomInquiry</span><span class=\"p\">(</span><span class=\"n\">JsonSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Logging</h3>\n<p>Vakt follows a common logging pattern for libraries:</p>\n<p>Its corresponding modules log all the events that happen but the log messages by default are handled by <code>NullHandler</code>.\nIt's up to the outer code/application to provide desired log handlers, filters, levels, etc.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n\n<span class=\"o\">...</span> <span class=\"c1\"># here go all the Vakt calls.</span>\n</pre>\n<p>Vakt logs can be comprehended in 2 basic levels:</p>\n<ol>\n<li><em>Error/Exception</em> - informs about exceptions and errors during Vakt work.</li>\n<li><em>Info</em> - informs about incoming inquires and their resolution.</li>\n</ol>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Milestones</h3>\n<p>Most valuable features to be implemented in the order of importance:</p>\n<ul>\n<li>[x] SQL Storage</li>\n<li>[ ] Rules that reference Inquiry data for Rule-based policies</li>\n<li>[ ] Caching mechanisms (for Storage and Guard)</li>\n<li>[ ] YAML-based language for declarative policy definitions</li>\n<li>[ ] Enhanced audit logging</li>\n<li>[ ] Redis Storage</li>\n</ul>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Benchmark</h3>\n<p>You can see how much time it takes for a single Inquiry to be processed given we have a number of unique Policies in a\nStorage.\nFor <a href=\"#memory\" rel=\"nofollow\">MemoryStorage</a> it measures the runtime of a decision-making process for all\nthe existing Policies when <a href=\"#guard\" rel=\"nofollow\">Guard's</a> code iterates the whole list of Policies to decide if\nInquiry is allowed or not. In case of other Storages the mileage\nmay vary since they may return a smaller subset of Policies that fit the given Inquiry.\nDon't forget that most external Storages add some time penalty to perform I/O operations.\nThe runtime also depends on a Policy-type used (and thus checker): RulesChecker performs much better than RegexChecker.</p>\n<p>Example:</p>\n<pre>python3 benchmark.py --checker regex --storage memory -n <span class=\"m\">1000</span>\n</pre>\n<p>Output is:</p>\n<blockquote>\n<p>Populating MemoryStorage with Policies<br>\n......................<br>\nSTART BENCHMARK!<br>\nNumber of unique Policies in DB: 1,000<br>\nAmong them Policies with the same regexp pattern: 0<br>\nChecker used: RegexChecker<br>\nDecision for 1 Inquiry took: 0.4451 seconds<br>\nInquiry passed the guard? False<br></p>\n</blockquote>\n<p>Script usage:</p>\n<pre><code>usage: benchmark.py [-h] [-n [POLICIES_NUMBER]] [-s {mongo,memory,sql}]\n                    [-d [SQL_DSN]] [-c {regex,rules,exact,fuzzy}] [--regexp]\n                    [--same SAME] [--cache CACHE]\n\nRun vakt benchmark.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n [POLICIES_NUMBER], --number [POLICIES_NUMBER]\n                        number of policies to create in DB (default: 100000)\n  -s {mongo,memory,sql}, --storage {mongo,memory,sql}\n                        type of storage (default: memory)\n  -d [SQL_DSN], --dsn [SQL_DSN]\n                        DSN connection string for sql storage (default:\n                        sqlite:///:memory:)\n  -c {regex,rules,exact,fuzzy}, --checker {regex,rules,exact,fuzzy}\n                        type of checker (default: regex)\n\nregex policy related:\n  --regexp              should Policies be defined without Regex syntax?\n                        (default: True)\n  --same SAME           number of similar regexps in Policy\n  --cache CACHE         number of LRU-cache for RegexChecker (default:\n                        RegexChecker's default cache-size)\n</code></pre>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Acknowledgements</h3>\n<p>Initial code ideas of Vakt are based on\n<a href=\"https://github.com/awsdocs/iam-user-guide/blob/master/doc_source/access_policies.md\" rel=\"nofollow\">Amazon IAM Policies</a> and\n<a href=\"https://github.com/ory/ladon\" rel=\"nofollow\">Ladon</a> Policies SDK as its reference implementation.</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>Development</h3>\n<p>To hack Vakt locally run:</p>\n<pre>$ ...                              <span class=\"c1\"># activate virtual environment w/ preferred method (optional)</span>\n$ pip install -e .<span class=\"o\">[</span>dev,mongo,sql<span class=\"o\">]</span>  <span class=\"c1\"># to install all dependencies</span>\n$ pytest -m <span class=\"s2\">\"not integration\"</span>      <span class=\"c1\"># to run non-integration tests with coverage report</span>\n$ pytest --cov<span class=\"o\">=</span>vakt tests/         <span class=\"c1\"># to get coverage report</span>\n$ pylint vakt                      <span class=\"c1\"># to check code quality with PyLint</span>\n</pre>\n<p>To run only integration tests (for Storage adapters other than <code>MemoryStorage</code>):</p>\n<pre>$ docker run --rm -d -p <span class=\"m\">27017</span>:27017 mongo\n$ pytest -m integration\n</pre>\n<p>Optionally you can use <code>make</code> to perform development tasks.</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n<h3>License</h3>\n<p>The source code is licensed under Apache License Version 2.0</p>\n<p><em><a href=\"#documentation\" rel=\"nofollow\">Back to top</a></em></p>\n\n          </div>"}, "last_serial": 6248174, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "0182f7582c65acdd916f83fa46abbee3", "sha256": "55f137989495f877cbe2a1b115fa5d1f0aa3651eacec0b25fdebcf06ada5a05f"}, "downloads": -1, "filename": "vakt-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0182f7582c65acdd916f83fa46abbee3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7278, "upload_time": "2018-06-05T16:37:03", "upload_time_iso_8601": "2018-06-05T16:37:03.841358Z", "url": "https://files.pythonhosted.org/packages/93/0b/e3ad5ea4ba142025786c688ba4f009db7149124658b9fa62cc9560b991ec/vakt-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bd58e3d6265c33cd4cd4c08562eac06e", "sha256": "802f180e207ced57d745e2e06ae9907f3c7adb1b77afef09ff546f8f0784a0ff"}, "downloads": -1, "filename": "vakt-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bd58e3d6265c33cd4cd4c08562eac06e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17999, "upload_time": "2018-08-30T09:18:03", "upload_time_iso_8601": "2018-08-30T09:18:03.260119Z", "url": "https://files.pythonhosted.org/packages/72/33/9f713ff5722cae78e196202037c622ee34395720376716f33dd04ba12a58/vakt-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ae63e37c9b2247243753a6f76786b4b3", "sha256": "fc72d0ab5e07b40cfbb220f3c2ce8ef37e0f1c005a630ad18332e1882350559d"}, "downloads": -1, "filename": "vakt-1.0.4.tar.gz", "has_sig": false, "md5_digest": "ae63e37c9b2247243753a6f76786b4b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18052, "upload_time": "2018-08-30T09:45:49", "upload_time_iso_8601": "2018-08-30T09:45:49.539665Z", "url": "https://files.pythonhosted.org/packages/5b/84/0c3ea2c3c9d734aa9cfbc32d6994d96b6c37603fabfbcf1d4afd46949813/vakt-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "ecffe3238160854cc54508fed3417882", "sha256": "389683d2fcc50351219eae747f1d7448e25528dec6fea30d7692170a0fd65c59"}, "downloads": -1, "filename": "vakt-1.0.5.tar.gz", "has_sig": false, "md5_digest": "ecffe3238160854cc54508fed3417882", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18055, "upload_time": "2018-08-30T09:54:13", "upload_time_iso_8601": "2018-08-30T09:54:13.645907Z", "url": "https://files.pythonhosted.org/packages/6f/a5/e18c956617f3ab47d5c690d19e45a65729922e1abb6938798c9dd4123bd3/vakt-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a72e87d943b9f6f4b7c33c7c244c8b5c", "sha256": "c5521e163f2523467e8e28c94514b10fc9a897cd577217e8355af93c6b9525ec"}, "downloads": -1, "filename": "vakt-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a72e87d943b9f6f4b7c33c7c244c8b5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21776, "upload_time": "2018-09-03T15:24:44", "upload_time_iso_8601": "2018-09-03T15:24:44.143970Z", "url": "https://files.pythonhosted.org/packages/b6/80/f32f0abd5dbe03c4bbe22d657f1831b92a498e7aaed5c2d01fb3f1fde020/vakt-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "cea3b04047f904873d342ca6fab84bd7", "sha256": "dc1ee93b899f7dbb5d680ecb1773eff0bcf329bba4381383686dc20c04ff8703"}, "downloads": -1, "filename": "vakt-1.1.1.tar.gz", "has_sig": false, "md5_digest": "cea3b04047f904873d342ca6fab84bd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22514, "upload_time": "2019-01-22T14:14:20", "upload_time_iso_8601": "2019-01-22T14:14:20.515060Z", "url": "https://files.pythonhosted.org/packages/8e/38/bb79b65bcedc2eda6c4fe43abda4f16cf1ce9d4bcec66065897d88e9f81b/vakt-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bb82637b9758a3d312f84567c9498613", "sha256": "b2a7eff14ded1c9b9a24af33e5bc0cecba0d46e8ba9fa302ca8b60841c8e7f13"}, "downloads": -1, "filename": "vakt-1.2.0.tar.gz", "has_sig": false, "md5_digest": "bb82637b9758a3d312f84567c9498613", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42010, "upload_time": "2019-04-24T11:32:54", "upload_time_iso_8601": "2019-04-24T11:32:54.600936Z", "url": "https://files.pythonhosted.org/packages/17/59/2549c523c777d7b2a23e31cc32eaf8029f4acb4d667389be1c839b4ae4e0/vakt-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "105729af91d7ca44951478a3849e6445", "sha256": "235ab3260fa6a13c8454e940766ff26bc253b11fdd33a50edc45e851424521ce"}, "downloads": -1, "filename": "vakt-1.2.1.tar.gz", "has_sig": false, "md5_digest": "105729af91d7ca44951478a3849e6445", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39539, "upload_time": "2019-04-24T12:12:15", "upload_time_iso_8601": "2019-04-24T12:12:15.179099Z", "url": "https://files.pythonhosted.org/packages/08/ad/8965c45f1fe7f91d37cc527949d2f00ff109bc0ebb0ea1224d67da1456a7/vakt-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "d10afe59fefaf875b520c649e834539d", "sha256": "61b923200bdbdc2302fff71e5b55ee0dcf2d9fe3fbf546f255d008c70fa588a2"}, "downloads": -1, "filename": "vakt-1.3.0.tar.gz", "has_sig": false, "md5_digest": "d10afe59fefaf875b520c649e834539d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 53602, "upload_time": "2019-11-11T13:10:09", "upload_time_iso_8601": "2019-11-11T13:10:09.317369Z", "url": "https://files.pythonhosted.org/packages/c8/72/333a52acd8c4cbd91ea6cc92cea0902a2521ab2f0680f04409ce6128a76a/vakt-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "23585d4b82c17f3b7534962aca3f91e0", "sha256": "4e5f7a687cb41cfa38dc1cdce1307d577b7cf093ccbd891964c07506a66478ec"}, "downloads": -1, "filename": "vakt-1.4.0.tar.gz", "has_sig": false, "md5_digest": "23585d4b82c17f3b7534962aca3f91e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 73355, "upload_time": "2019-12-05T16:03:54", "upload_time_iso_8601": "2019-12-05T16:03:54.481208Z", "url": "https://files.pythonhosted.org/packages/26/fd/8c05dd989602952cc1adfbef3f37d552c750f78bf8be6990189707aba1df/vakt-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23585d4b82c17f3b7534962aca3f91e0", "sha256": "4e5f7a687cb41cfa38dc1cdce1307d577b7cf093ccbd891964c07506a66478ec"}, "downloads": -1, "filename": "vakt-1.4.0.tar.gz", "has_sig": false, "md5_digest": "23585d4b82c17f3b7534962aca3f91e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 73355, "upload_time": "2019-12-05T16:03:54", "upload_time_iso_8601": "2019-12-05T16:03:54.481208Z", "url": "https://files.pythonhosted.org/packages/26/fd/8c05dd989602952cc1adfbef3f37d552c750f78bf8be6990189707aba1df/vakt-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:14 2020"}