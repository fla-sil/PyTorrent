{"info": {"author": "tie", "author_email": "tropostack@morp.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. image:: https://img.shields.io/pypi/v/tropostack.svg\n   :target: https://pypi.org/project/tropostack/\n   :alt: pypi version\n\n.. image:: https://img.shields.io/travis/gtie/tropostack/master.svg?label=Build\n   :target: https://travis-ci.org/gtie/tropostack\n   :alt: travis build status\n\nAbout\n-----\n\nTropostack is a CLI/workflow library that simplifies the creation and management\nof `CloudFormation <https://aws.amazon.com/cloudformation/>`_ stacks, based on\nthe excellent `Troposphere Project <https://github.com/cloudtools/troposphere>`_.\n\nTropostack features:\n\n - Single stack template = single executable Python file = single CLI\n - Support for different configuration and CLI plugins\n - A collection of generic commands available to each stack (e.g. `create`)\n - Support for user-defined CLI commands (e.g. `upscale`)\n - Helper routines (e.g. locate the newest matching AMI)\n\nDocs\n----\nFull docs are at https://tropostack.readthedocs.io/en/latest/\n\nInstallation\n------------\n\n.. code:: sh\n\n    $ pip install tropostack\n\nOr, you can use setup.py to install from a cloned repository:\n\n.. code:: sh\n\n    $ python setup.py install\n\n\nFirst stack\n---------------\n\nYou use `tropostack` as a library to:\n - Consisteny define CloudFormation templates in Python code\n - Have a CLI around each stack definition, enabling it to live as a standalone executable\n\nHere is a minimalistic example of a stack that creates an S3 bucket, and exports the ARN as an Output:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n\n    from troposphere import s3\n    from troposphere import Output, Export, Sub, GetAtt\n\n    from tropostack.base import InlineConfStack\n    from tropostack.cli import InlineConfCLI\n\n\n    class MyS3BucketStack(InlineConfStack):\n        # Name of the stack\n        BASE_NAME = 'my-s3-bucket-stack'\n\n        # Define configuration values for the stack\n        CONF = {\n            # Region is always explicitly required\n            'region': 'eu-west-1',\n            # Prefix the bucket name with the account ID\n            'bucket_name': Sub('${AWS::AccountId}-my-first-tropostack-bucket')\n        }\n\n        # Stack Resources are defined as class properties prefixed with 'r_'\n        @property\n        def r_bucket(self):\n            return s3.Bucket(\n                'MyBucketResource',\n                BucketName=self.conf['bucket_name']\n            )\n\n        # Stack Outputs are defined as class properties prefixed with 'o_'\n        @property\n        def o_bucket_arn(self):\n            _id = 'BucketArn'\n            return Output(\n                _id,\n                Description='The ARN of the S3 bucket',\n                Value=GetAtt(self.r_bucket, 'Arn'),\n                # We're exporting the output as <StackName>-<OutputId>\n                # Other stacks can read the output relying on the same convention\n                Export=Export(Sub(\"${AWS::StackName}-%s\" % _id))\n            )\n\n\n    if __name__ == '__main__':\n        # Wrap the stack in a CLI and run it\n        cli = InlineConfCLI(MyS3BucketStack)\n        cli.run()\n\nThe above already gives you a usable CLI around your stack definition.\n\nAssuming you put it inside an executable file called `s3_minimal.py`, you'd be able to call it already:\n\n.. code-block:: bash\n\n   $ ./s3_minimal.py -h\n   usage: s3_minimal.py [-h]\n                        {apply,create,delete,outputs,print,update,validate}\n\n   positional arguments:\n     {apply,create,delete,outputs,print,update,validate}\n\n   optional arguments:\n     -h, --help            show this help message and exit\n\nYou can now inspect the \"raw\" CloudFormation code generated by the stack:\n\n.. code-block:: yaml\n\n   $ ./s3_minimal.py print\n   Outputs:\n     BucketArn:\n       Description: The ARN of the S3 bucket\n       Export:\n         Name: !Sub '${AWS::StackName}-BucketArn'\n       Value: !GetAtt 'MyBucketResource.Arn'\n   Resources:\n     MyBucketResource:\n       Properties:\n         BucketName: !Sub '${AWS::AccountId}-my-first-tropostack-bucket'\n       Type: AWS::S3::Bucket\n\nAssuming\n`AWS credentials are present <https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#configuring-credentials>`_\nin the environment, we can now fire up stack that would create our S3 bucket:\n\n.. code-block:: bash\n\n   $ ./s3_minimal.py create\n   Stack creation initiated for: arn:aws:cloudformation:eu-west-1:472799024263:stack/my-s3-bucket-stack/dd5e93c0-225c-11ea-93d8-0641c159a77a\n   TIMESTAMP (UTC)          RESOURCE TYPE                              RESOURCE ID                  STATUS                                   REASON\n   2019-12-19 12:41:23      AWS::CloudFormation::Stack                 my-s3-bucket-stack           CREATE_IN_PROGRESS                       User Initiated\n   2019-12-19 12:41:26      AWS::S3::Bucket                            MyBucketResource             CREATE_IN_PROGRESS\n   2019-12-19 12:41:27      AWS::S3::Bucket                            MyBucketResource             CREATE_IN_PROGRESS                       Resource creation Initiated\n   2019-12-19 12:41:48      AWS::S3::Bucket                            MyBucketResource             CREATE_COMPLETE\n   2019-12-19 12:41:50      AWS::CloudFormation::Stack                 my-s3-bucket-stack           CREATE_COMPLETE\n\nWe can also inspect the stack Outputs - in this case, the ARN of the bucket:\n\n.. code-block:: bash\n\n   $ ./s3_minimal.py outputs\n   Stack is in status: CREATE_COMPLETE\n   OutputKey    OutputValue                                           Description               ExportName\n   -----------  ----------------------------------------------------  ------------------------  ----------------------------\n   BucketArn    arn:aws:s3:::472799024263-my-first-tropostack-bucket  The ARN of the S3 bucket  my-s3-bucket-stack-BucketArn\n\n\nFinally, we can clean up and have our stack deleted:\n\n.. code-block:: bash\n\n   $ ./s3_minimal.py delete\n   Destroy initiated for stack: my-s3-bucket-stack\n   TIMESTAMP (UTC)          RESOURCE TYPE                              RESOURCE ID                  STATUS                                   REASON\n   2019-12-19 12:44:59      AWS::CloudFormation::Stack                 my-s3-bucket-stack           DELETE_IN_PROGRESS                       User Initiated\n   Stack is gone: my-s3-bucket-stack (An error occurred (ValidationError) when calling the DescribeStackEvents operation: Stack [my-s3-bucket-stack] does not exist)\n\nStock commands\n--------------\n\nWhile the CLI can be expanded/customized for each individual tropostack, there are several subcommands that come out of the box:\n\n - `print` - prints the resulting CloudFormation YAML to the screen\n - `validate` - Sends the CloudFormation template to the AWS API for validation, and reports back result\n - `create` - Initiates the stack creation (should only be used if the stack does not exist yet)\n - `update` - Updates an existing stack (should only be used if the stack exists)\n - `apply` - Idempotently updates or creates a stack, based on whether it exists or not\n - `outputs` - Shows the outputs of an existing stack\n - `delete` - Deletes an existing stack", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/topostack/tropostack", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tropostack", "package_url": "https://pypi.org/project/tropostack/", "platform": "", "project_url": "https://pypi.org/project/tropostack/", "project_urls": {"Homepage": "https://github.com/topostack/tropostack"}, "release_url": "https://pypi.org/project/tropostack/0.4.3/", "requires_dist": null, "requires_python": "", "summary": "CLI/workflow lib around for management of CloudFormation stacks", "version": "0.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/tropostack/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e37a49005657d432dc00d69ed0becf77fdc67ab6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74726f706f737461636b2e737667\"></a>\n<a href=\"https://travis-ci.org/gtie/tropostack\" rel=\"nofollow\"><img alt=\"travis build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b3ebba40ba94da6a4b73bf1613936cab6f0fff5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f677469652f74726f706f737461636b2f6d61737465722e7376673f6c6162656c3d4275696c64\"></a>\n<div id=\"about\">\n<h2>About</h2>\n<p>Tropostack is a CLI/workflow library that simplifies the creation and management\nof <a href=\"https://aws.amazon.com/cloudformation/\" rel=\"nofollow\">CloudFormation</a> stacks, based on\nthe excellent <a href=\"https://github.com/cloudtools/troposphere\" rel=\"nofollow\">Troposphere Project</a>.</p>\n<p>Tropostack features:</p>\n<blockquote>\n<ul>\n<li>Single stack template = single executable Python file = single CLI</li>\n<li>Support for different configuration and CLI plugins</li>\n<li>A collection of generic commands available to each stack (e.g. <cite>create</cite>)</li>\n<li>Support for user-defined CLI commands (e.g. <cite>upscale</cite>)</li>\n<li>Helper routines (e.g. locate the newest matching AMI)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"docs\">\n<h2>Docs</h2>\n<p>Full docs are at <a href=\"https://tropostack.readthedocs.io/en/latest/\" rel=\"nofollow\">https://tropostack.readthedocs.io/en/latest/</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install tropostack\n</pre>\n<p>Or, you can use setup.py to install from a cloned repository:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"first-stack\">\n<h2>First stack</h2>\n<dl>\n<dt>You use <cite>tropostack</cite> as a library to:</dt>\n<dd><ul>\n<li>Consisteny define CloudFormation templates in Python code</li>\n<li>Have a CLI around each stack definition, enabling it to live as a standalone executable</li>\n</ul>\n</dd>\n</dl>\n<p>Here is a minimalistic example of a stack that creates an S3 bucket, and exports the ARN as an Output:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">troposphere</span> <span class=\"kn\">import</span> <span class=\"n\">s3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">troposphere</span> <span class=\"kn\">import</span> <span class=\"n\">Output</span><span class=\"p\">,</span> <span class=\"n\">Export</span><span class=\"p\">,</span> <span class=\"n\">Sub</span><span class=\"p\">,</span> <span class=\"n\">GetAtt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tropostack.base</span> <span class=\"kn\">import</span> <span class=\"n\">InlineConfStack</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tropostack.cli</span> <span class=\"kn\">import</span> <span class=\"n\">InlineConfCLI</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyS3BucketStack</span><span class=\"p\">(</span><span class=\"n\">InlineConfStack</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Name of the stack</span>\n    <span class=\"n\">BASE_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'my-s3-bucket-stack'</span>\n\n    <span class=\"c1\"># Define configuration values for the stack</span>\n    <span class=\"n\">CONF</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># Region is always explicitly required</span>\n        <span class=\"s1\">'region'</span><span class=\"p\">:</span> <span class=\"s1\">'eu-west-1'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Prefix the bucket name with the account ID</span>\n        <span class=\"s1\">'bucket_name'</span><span class=\"p\">:</span> <span class=\"n\">Sub</span><span class=\"p\">(</span><span class=\"s1\">'${AWS::AccountId}-my-first-tropostack-bucket'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Stack Resources are defined as class properties prefixed with 'r_'</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">r_bucket</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"n\">Bucket</span><span class=\"p\">(</span>\n            <span class=\"s1\">'MyBucketResource'</span><span class=\"p\">,</span>\n            <span class=\"n\">BucketName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"s1\">'bucket_name'</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Stack Outputs are defined as class properties prefixed with 'o_'</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">o_bucket_arn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"s1\">'BucketArn'</span>\n        <span class=\"k\">return</span> <span class=\"n\">Output</span><span class=\"p\">(</span>\n            <span class=\"n\">_id</span><span class=\"p\">,</span>\n            <span class=\"n\">Description</span><span class=\"o\">=</span><span class=\"s1\">'The ARN of the S3 bucket'</span><span class=\"p\">,</span>\n            <span class=\"n\">Value</span><span class=\"o\">=</span><span class=\"n\">GetAtt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r_bucket</span><span class=\"p\">,</span> <span class=\"s1\">'Arn'</span><span class=\"p\">),</span>\n            <span class=\"c1\"># We're exporting the output as &lt;StackName&gt;-&lt;OutputId&gt;</span>\n            <span class=\"c1\"># Other stacks can read the output relying on the same convention</span>\n            <span class=\"n\">Export</span><span class=\"o\">=</span><span class=\"n\">Export</span><span class=\"p\">(</span><span class=\"n\">Sub</span><span class=\"p\">(</span><span class=\"s2\">\"${AWS::StackName}-</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">_id</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Wrap the stack in a CLI and run it</span>\n    <span class=\"n\">cli</span> <span class=\"o\">=</span> <span class=\"n\">InlineConfCLI</span><span class=\"p\">(</span><span class=\"n\">MyS3BucketStack</span><span class=\"p\">)</span>\n    <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>The above already gives you a usable CLI around your stack definition.</p>\n<p>Assuming you put it inside an executable file called <cite>s3_minimal.py</cite>, you\u2019d be able to call it already:</p>\n<pre>$ ./s3_minimal.py -h\nusage: s3_minimal.py <span class=\"o\">[</span>-h<span class=\"o\">]</span>\n                     <span class=\"o\">{</span>apply,create,delete,outputs,print,update,validate<span class=\"o\">}</span>\n\npositional arguments:\n  <span class=\"o\">{</span>apply,create,delete,outputs,print,update,validate<span class=\"o\">}</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n</pre>\n<p>You can now inspect the \u201craw\u201d CloudFormation code generated by the stack:</p>\n<pre><span class=\"l-Scalar-Plain\">$ ./s3_minimal.py print</span>\n<span class=\"l-Scalar-Plain\">Outputs</span><span class=\"p-Indicator\">:</span>\n  <span class=\"nt\">BucketArn</span><span class=\"p\">:</span>\n    <span class=\"nt\">Description</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">The ARN of the S3 bucket</span>\n    <span class=\"nt\">Export</span><span class=\"p\">:</span>\n      <span class=\"nt\">Name</span><span class=\"p\">:</span> <span class=\"kt\">!Sub</span> <span class=\"s\">'${AWS::StackName}-BucketArn'</span>\n    <span class=\"nt\">Value</span><span class=\"p\">:</span> <span class=\"kt\">!GetAtt</span> <span class=\"s\">'MyBucketResource.Arn'</span>\n<span class=\"nt\">Resources</span><span class=\"p\">:</span>\n  <span class=\"nt\">MyBucketResource</span><span class=\"p\">:</span>\n    <span class=\"nt\">Properties</span><span class=\"p\">:</span>\n      <span class=\"nt\">BucketName</span><span class=\"p\">:</span> <span class=\"kt\">!Sub</span> <span class=\"s\">'${AWS::AccountId}-my-first-tropostack-bucket'</span>\n    <span class=\"nt\">Type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">AWS::S3::Bucket</span>\n</pre>\n<p>Assuming\n<a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#configuring-credentials\" rel=\"nofollow\">AWS credentials are present</a>\nin the environment, we can now fire up stack that would create our S3 bucket:</p>\n<pre>$ ./s3_minimal.py create\nStack creation initiated <span class=\"k\">for</span>: arn:aws:cloudformation:eu-west-1:472799024263:stack/my-s3-bucket-stack/dd5e93c0-225c-11ea-93d8-0641c159a77a\nTIMESTAMP <span class=\"o\">(</span>UTC<span class=\"o\">)</span>          RESOURCE TYPE                              RESOURCE ID                  STATUS                                   REASON\n<span class=\"m\">2019</span>-12-19 <span class=\"m\">12</span>:41:23      AWS::CloudFormation::Stack                 my-s3-bucket-stack           CREATE_IN_PROGRESS                       User Initiated\n<span class=\"m\">2019</span>-12-19 <span class=\"m\">12</span>:41:26      AWS::S3::Bucket                            MyBucketResource             CREATE_IN_PROGRESS\n<span class=\"m\">2019</span>-12-19 <span class=\"m\">12</span>:41:27      AWS::S3::Bucket                            MyBucketResource             CREATE_IN_PROGRESS                       Resource creation Initiated\n<span class=\"m\">2019</span>-12-19 <span class=\"m\">12</span>:41:48      AWS::S3::Bucket                            MyBucketResource             CREATE_COMPLETE\n<span class=\"m\">2019</span>-12-19 <span class=\"m\">12</span>:41:50      AWS::CloudFormation::Stack                 my-s3-bucket-stack           CREATE_COMPLETE\n</pre>\n<p>We can also inspect the stack Outputs - in this case, the ARN of the bucket:</p>\n<pre>$ ./s3_minimal.py outputs\nStack is in status: CREATE_COMPLETE\nOutputKey    OutputValue                                           Description               ExportName\n-----------  ----------------------------------------------------  ------------------------  ----------------------------\nBucketArn    arn:aws:s3:::472799024263-my-first-tropostack-bucket  The ARN of the S3 bucket  my-s3-bucket-stack-BucketArn\n</pre>\n<p>Finally, we can clean up and have our stack deleted:</p>\n<pre>$ ./s3_minimal.py delete\nDestroy initiated <span class=\"k\">for</span> stack: my-s3-bucket-stack\nTIMESTAMP <span class=\"o\">(</span>UTC<span class=\"o\">)</span>          RESOURCE TYPE                              RESOURCE ID                  STATUS                                   REASON\n<span class=\"m\">2019</span>-12-19 <span class=\"m\">12</span>:44:59      AWS::CloudFormation::Stack                 my-s3-bucket-stack           DELETE_IN_PROGRESS                       User Initiated\nStack is gone: my-s3-bucket-stack <span class=\"o\">(</span>An error occurred <span class=\"o\">(</span>ValidationError<span class=\"o\">)</span> when calling the DescribeStackEvents operation: Stack <span class=\"o\">[</span>my-s3-bucket-stack<span class=\"o\">]</span> does not exist<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"stock-commands\">\n<h2>Stock commands</h2>\n<p>While the CLI can be expanded/customized for each individual tropostack, there are several subcommands that come out of the box:</p>\n<blockquote>\n<ul>\n<li><cite>print</cite> - prints the resulting CloudFormation YAML to the screen</li>\n<li><cite>validate</cite> - Sends the CloudFormation template to the AWS API for validation, and reports back result</li>\n<li><cite>create</cite> - Initiates the stack creation (should only be used if the stack does not exist yet)</li>\n<li><cite>update</cite> - Updates an existing stack (should only be used if the stack exists)</li>\n<li><cite>apply</cite> - Idempotently updates or creates a stack, based on whether it exists or not</li>\n<li><cite>outputs</cite> - Shows the outputs of an existing stack</li>\n<li><cite>delete</cite> - Deletes an existing stack</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 6741830, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6d0141a8d90b933e15347a249f5bea06", "sha256": "321c2c35b9218167d1576d935102d9419575bc59f91eca780305cbd19f48d735"}, "downloads": -1, "filename": "tropostack-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "6d0141a8d90b933e15347a249f5bea06", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 14709, "upload_time": "2019-09-29T11:20:15", "upload_time_iso_8601": "2019-09-29T11:20:15.040737Z", "url": "https://files.pythonhosted.org/packages/06/c8/03ac798b9f0bfbab595040d93b4ec6f0f8fd65ad53d53ac2e9717204fe8d/tropostack-0.1.0-py3.7.egg", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "687539d1518692aafd8ba696497b39a6", "sha256": "f0cb66075d740e7f90a7496cd7f771afef5c645d11a01326e76ee61ac3384b51"}, "downloads": -1, "filename": "tropostack-0.1.1.tar.gz", "has_sig": false, "md5_digest": "687539d1518692aafd8ba696497b39a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8314, "upload_time": "2019-09-29T11:25:35", "upload_time_iso_8601": "2019-09-29T11:25:35.542776Z", "url": "https://files.pythonhosted.org/packages/a4/13/b5a5ae83086935fd99d6110c2a009c12dc9cebd5235ac835c6f898ca93a1/tropostack-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e9022b8cf55aa07ef5d3cb29fa18071c", "sha256": "2381f6587794e8aad6daf539f969187cd577a09d900b369d53c8f77eb423980e"}, "downloads": -1, "filename": "tropostack-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e9022b8cf55aa07ef5d3cb29fa18071c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8406, "upload_time": "2019-09-29T19:53:20", "upload_time_iso_8601": "2019-09-29T19:53:20.350887Z", "url": "https://files.pythonhosted.org/packages/9f/40/67837a0a68e9543b30fbe5b451169be3da804b2915376d5ea01b7c757423/tropostack-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8fcfc365b7883ad268c73de464807b9b", "sha256": "7135c7c9edb6991f05a6d5551ab70d5e4076c2c9a0d65cf037462a4718268e75"}, "downloads": -1, "filename": "tropostack-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8fcfc365b7883ad268c73de464807b9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8408, "upload_time": "2019-09-29T19:58:19", "upload_time_iso_8601": "2019-09-29T19:58:19.536582Z", "url": "https://files.pythonhosted.org/packages/e9/4a/9224a2e9f183ecebf586c3f07bf55e7d9241cc09f5705fe160eeba891a05/tropostack-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ea5ddd4755b2531e79209d4430241f63", "sha256": "a55debba072ceae9d961ccd5f5402a32ffa529ffad03fb9e4b4fc3e170b94588"}, "downloads": -1, "filename": "tropostack-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ea5ddd4755b2531e79209d4430241f63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8663, "upload_time": "2019-10-19T21:40:13", "upload_time_iso_8601": "2019-10-19T21:40:13.071718Z", "url": "https://files.pythonhosted.org/packages/de/06/f2d0a25916618a645d88ec3c0faf578ce00a67237052dbca366bc7e1e680/tropostack-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5786a87d16c30aa3075407651acdc89b", "sha256": "b1e8a33e0f789c1394e552ca9c7d41e9a511a63920f6712e8dd40d5e8592b926"}, "downloads": -1, "filename": "tropostack-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5786a87d16c30aa3075407651acdc89b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10950, "upload_time": "2019-12-20T10:23:38", "upload_time_iso_8601": "2019-12-20T10:23:38.513014Z", "url": "https://files.pythonhosted.org/packages/39/e5/f3d1a659ca3a1709520d7aed86967d6d297b4e5c7589fda3696b95febcf0/tropostack-0.3.0.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "f6c9eafe51a8fb0a1d18d7b1f3b35c1e", "sha256": "c44900106be9465d28d35eb7a69889d1e9db1b3729dba77ee965e0ce6584bb00"}, "downloads": -1, "filename": "tropostack-0.3.2.tar.gz", "has_sig": false, "md5_digest": "f6c9eafe51a8fb0a1d18d7b1f3b35c1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12248, "upload_time": "2019-12-20T19:47:04", "upload_time_iso_8601": "2019-12-20T19:47:04.951681Z", "url": "https://files.pythonhosted.org/packages/d6/f5/5166a74646b91fcb0879cd8c1a3ff4eec1d06d69c9b5cba92f88f514ee2c/tropostack-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "8f5acd00c95f7714f1150a8548ace397", "sha256": "072e524dd66acfaa273751f586b94e08d3c2fce990ed7d1111337db34c61eafa"}, "downloads": -1, "filename": "tropostack-0.4.0.tar.gz", "has_sig": false, "md5_digest": "8f5acd00c95f7714f1150a8548ace397", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12482, "upload_time": "2020-03-03T14:27:19", "upload_time_iso_8601": "2020-03-03T14:27:19.175047Z", "url": "https://files.pythonhosted.org/packages/7c/bf/2f4b433d92f635bf1b3b5f8c851b06b2b82e86a94d705cce620b46b6fd7f/tropostack-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "db71df87ebf725ca874fb3b7413577e2", "sha256": "8ce0c54c3c7fed942818224f820eb7e7fbaf3626bdaec929fef381897cfa23fd"}, "downloads": -1, "filename": "tropostack-0.4.1.tar.gz", "has_sig": false, "md5_digest": "db71df87ebf725ca874fb3b7413577e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12490, "upload_time": "2020-03-03T14:33:00", "upload_time_iso_8601": "2020-03-03T14:33:00.526786Z", "url": "https://files.pythonhosted.org/packages/c6/93/dcf78f094e6b3b1610f09703767e09c2b1144af767bd1852eb4ed9b8d31c/tropostack-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "29f51370bfb2a5577da9f844e71a8f06", "sha256": "397b04f989f37d112d8409b3461eb738cb1ac2473a57fddec85bfc3cf481f367"}, "downloads": -1, "filename": "tropostack-0.4.2.tar.gz", "has_sig": false, "md5_digest": "29f51370bfb2a5577da9f844e71a8f06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12523, "upload_time": "2020-03-03T16:13:28", "upload_time_iso_8601": "2020-03-03T16:13:28.762170Z", "url": "https://files.pythonhosted.org/packages/16/72/0440e8648d630ec90773c4818d6643d28b614d5a1a5cb46cfb7d50e1b422/tropostack-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "1adb2bfe11d3b0e6512c7d9808fbcfb3", "sha256": "f764ad59f5928a40125c34461ec907cb74f72c6ea3911f09728f290c106fd5d8"}, "downloads": -1, "filename": "tropostack-0.4.3.tar.gz", "has_sig": false, "md5_digest": "1adb2bfe11d3b0e6512c7d9808fbcfb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12506, "upload_time": "2020-03-03T16:17:23", "upload_time_iso_8601": "2020-03-03T16:17:23.256951Z", "url": "https://files.pythonhosted.org/packages/51/f4/69ba2a983355f31c53a5c68d5d941779f836511b1c2b1b2013f1609e1c0b/tropostack-0.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1adb2bfe11d3b0e6512c7d9808fbcfb3", "sha256": "f764ad59f5928a40125c34461ec907cb74f72c6ea3911f09728f290c106fd5d8"}, "downloads": -1, "filename": "tropostack-0.4.3.tar.gz", "has_sig": false, "md5_digest": "1adb2bfe11d3b0e6512c7d9808fbcfb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12506, "upload_time": "2020-03-03T16:17:23", "upload_time_iso_8601": "2020-03-03T16:17:23.256951Z", "url": "https://files.pythonhosted.org/packages/51/f4/69ba2a983355f31c53a5c68d5d941779f836511b1c2b1b2013f1609e1c0b/tropostack-0.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:42 2020"}