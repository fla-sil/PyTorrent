{"info": {"author": "Jonny Fuller", "author_email": "mr.waffles@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Site Management", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware", "Topic :: System :: Logging", "Topic :: System :: Monitoring"], "description": "# WSGI Listener\n\n## Request/Response Inspection for WSGI Web Applications\nWSGI listener middleware for WSGI Web Applications inspired by the\noriginal wsgi-request-logger by Philipp Klaus and L. C. Rees.\n\nProvides hooks during the request and response cycle by adding an extra level of indirection.\n\nInstead of directly logging the response, this middleware provides an\ninterface to easily inspect the request and response. The default\nbehavior logs the response similarly to the original project. However, now\nadditional listeners can be added to both the request and response cycle.\nThe request and response body content is part of the interface.\n\nProject Homepage: https://github.com/JonnyWaffles/wsgi-listener\nOriginal project's Homepage: https://github.com/pklaus/wsgi-request-logger\n\nEasily add loggers, emailers, event systems, etc, with the `request_listeners` and `response_listener` hooks.\n\n#### Installation\ntodo: Ship to pypi\nSimply install this Python module via\n\n    pip install wsgi-listener\n\n#### Usage\nTo add this middleware to your WSGI `application` with the default response logger named `wsgilistener` in Apache format.\n```python\nfrom wsgi_listener import WSGIListenerMiddleware\n\n    \ndef application(environ, start_response):\n    response_body = 'The request method was %s' % environ['REQUEST_METHOD']\n    response_body = response_body.encode('utf-8')\n    response_headers = [('Content-Type', 'text/plain'),\n                        ('Content-Length', str(len(response_body)))]\n    start_response('200 OK', response_headers)\n    return [response_body]\n\n\nloggingapp = WSGIListenerMiddleware(application)\n\nif __name__ == '__main__':\n    from wsgiref.simple_server import make_server\n    http = make_server('', 8080, loggingapp)\n    http.serve_forever()\n```\n#### Custom handlers\nThe interface for the Request listeners is:\n```python\nfrom abc import ABC, abstractmethod\n\nclass AbstractBaseRequestListener(ABC):\n    @abstractmethod\n    def handle(self, environ: dict, request_body: bytes, **kwargs) -> None:\n        \"\"\"Defines the interface for Request listeners.\n\n        Args:\n            environ: The WSGI envion dictionary\n            request_body: The bytes content of the request, if any\n            **kwargs: Optional hook for additional data\n        \"\"\"\n```\nand the interface for Response listeners is:\n```python\nfrom abc import ABC, abstractmethod\n\nclass AbstractBaseResponseListener(ABC):\n    @abstractmethod\n    def handle(self, status_code: int, environ: dict, content_length: int, response_body: bytes,\n               processing_time: float, **kwargs) -> None:\n        \"\"\"Defines the interface for Response listeners.\n\n        Args:\n            status_code: HTTP status code as integer\n            environ: WSGI environ dictionary\n            content_length: Number of bytes returned as int\n            response_body: The response content, if any\n            processing_time: The time in miliseconds to process the request\n            **kwargs: Extensible hook\n        \"\"\"\n```\nSimply instantiate your hooks and add them during init or with the `add_listener` methods.\n\n#### The Authors\n\nThis WSGI middleware was originally developed under the name [wsgilog](https://pypi.python.org/pypi/wsgilog/) by  **L. C. Rees**.\nIt was forked by **Philipp Klaus** in 2013 to build a WSGI middleware for request logging rather than exception handling and logging,\nand then forked again by **Jonny Fuller** in 2019 to add the additional layer of indirection.  \n\n\n#### License\n\nThis software, *wsgi-listener*, is published under a *3-clause BSD license*.\n\n#### Developers' Resources\n\n* The [WSGI](http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface) - Web Server Gateway Interface - is defined in [PEP 333](http://www.python.org/dev/peps/pep-0333/) with an update for Python 3 in [PEP 3333](http://www.python.org/dev/peps/pep-3333/).\n\n#### General References\n\n* PyPI's [listing of wsgi-request-logger](https://pypi.python.org/pypi/wsgi-request-logger)\n* This fork source code is hosted at Github (todo determine url)\n* The original source code for this Python module is [hosted on Github](https://github.com/pklaus/wsgi-request-logger).\n* A blog post with more background information and usage examples:\n  [wsgi-request-logger \u2013 Logging HTTP Requests With Any WSGI Web Application like Flask, Bottle or Django](https://blog.philippklaus.de/2013/06/wsgi-request-logger-logging-http-requests-with-any-wsgi-web-application-like-flask-bottle-or-django/)\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JonnyWaffles/wsgi-listener", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wsgi_listener", "package_url": "https://pypi.org/project/wsgi_listener/", "platform": "", "project_url": "https://pypi.org/project/wsgi_listener/", "project_urls": {"Homepage": "https://github.com/JonnyWaffles/wsgi-listener"}, "release_url": "https://pypi.org/project/wsgi_listener/0.1/", "requires_dist": ["sphinx; extra == \"doc\"", "pytest; extra == \"test\""], "requires_python": ">=3.5", "summary": "WSGI listener middleware for WSGI Web Applications inspired by the", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WSGI Listener</h1>\n<h2>Request/Response Inspection for WSGI Web Applications</h2>\n<p>WSGI listener middleware for WSGI Web Applications inspired by the\noriginal wsgi-request-logger by Philipp Klaus and L. C. Rees.</p>\n<p>Provides hooks during the request and response cycle by adding an extra level of indirection.</p>\n<p>Instead of directly logging the response, this middleware provides an\ninterface to easily inspect the request and response. The default\nbehavior logs the response similarly to the original project. However, now\nadditional listeners can be added to both the request and response cycle.\nThe request and response body content is part of the interface.</p>\n<p>Project Homepage: <a href=\"https://github.com/JonnyWaffles/wsgi-listener\" rel=\"nofollow\">https://github.com/JonnyWaffles/wsgi-listener</a>\nOriginal project's Homepage: <a href=\"https://github.com/pklaus/wsgi-request-logger\" rel=\"nofollow\">https://github.com/pklaus/wsgi-request-logger</a></p>\n<p>Easily add loggers, emailers, event systems, etc, with the <code>request_listeners</code> and <code>response_listener</code> hooks.</p>\n<h4>Installation</h4>\n<p>todo: Ship to pypi\nSimply install this Python module via</p>\n<pre><code>pip install wsgi-listener\n</code></pre>\n<h4>Usage</h4>\n<p>To add this middleware to your WSGI <code>application</code> with the default response logger named <code>wsgilistener</code> in Apache format.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wsgi_listener</span> <span class=\"kn\">import</span> <span class=\"n\">WSGIListenerMiddleware</span>\n\n    \n<span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"n\">response_body</span> <span class=\"o\">=</span> <span class=\"s1\">'The request method was </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'REQUEST_METHOD'</span><span class=\"p\">]</span>\n    <span class=\"n\">response_body</span> <span class=\"o\">=</span> <span class=\"n\">response_body</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n    <span class=\"n\">response_headers</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">,</span> <span class=\"s1\">'text/plain'</span><span class=\"p\">),</span>\n                        <span class=\"p\">(</span><span class=\"s1\">'Content-Length'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response_body</span><span class=\"p\">)))]</span>\n    <span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"s1\">'200 OK'</span><span class=\"p\">,</span> <span class=\"n\">response_headers</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">response_body</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">loggingapp</span> <span class=\"o\">=</span> <span class=\"n\">WSGIListenerMiddleware</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">wsgiref.simple_server</span> <span class=\"kn\">import</span> <span class=\"n\">make_server</span>\n    <span class=\"n\">http</span> <span class=\"o\">=</span> <span class=\"n\">make_server</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"n\">loggingapp</span><span class=\"p\">)</span>\n    <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</pre>\n<h4>Custom handlers</h4>\n<p>The interface for the Request listeners is:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AbstractBaseRequestListener</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">environ</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">request_body</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Defines the interface for Request listeners.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            environ: The WSGI envion dictionary</span>\n<span class=\"sd\">            request_body: The bytes content of the request, if any</span>\n<span class=\"sd\">            **kwargs: Optional hook for additional data</span>\n<span class=\"sd\">        \"\"\"</span>\n</pre>\n<p>and the interface for Response listeners is:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AbstractBaseResponseListener</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">environ</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">content_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">response_body</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span>\n               <span class=\"n\">processing_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Defines the interface for Response listeners.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            status_code: HTTP status code as integer</span>\n<span class=\"sd\">            environ: WSGI environ dictionary</span>\n<span class=\"sd\">            content_length: Number of bytes returned as int</span>\n<span class=\"sd\">            response_body: The response content, if any</span>\n<span class=\"sd\">            processing_time: The time in miliseconds to process the request</span>\n<span class=\"sd\">            **kwargs: Extensible hook</span>\n<span class=\"sd\">        \"\"\"</span>\n</pre>\n<p>Simply instantiate your hooks and add them during init or with the <code>add_listener</code> methods.</p>\n<h4>The Authors</h4>\n<p>This WSGI middleware was originally developed under the name <a href=\"https://pypi.python.org/pypi/wsgilog/\" rel=\"nofollow\">wsgilog</a> by  <strong>L. C. Rees</strong>.\nIt was forked by <strong>Philipp Klaus</strong> in 2013 to build a WSGI middleware for request logging rather than exception handling and logging,\nand then forked again by <strong>Jonny Fuller</strong> in 2019 to add the additional layer of indirection.</p>\n<h4>License</h4>\n<p>This software, <em>wsgi-listener</em>, is published under a <em>3-clause BSD license</em>.</p>\n<h4>Developers' Resources</h4>\n<ul>\n<li>The <a href=\"http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" rel=\"nofollow\">WSGI</a> - Web Server Gateway Interface - is defined in <a href=\"http://www.python.org/dev/peps/pep-0333/\" rel=\"nofollow\">PEP 333</a> with an update for Python 3 in <a href=\"http://www.python.org/dev/peps/pep-3333/\" rel=\"nofollow\">PEP 3333</a>.</li>\n</ul>\n<h4>General References</h4>\n<ul>\n<li>PyPI's <a href=\"https://pypi.python.org/pypi/wsgi-request-logger\" rel=\"nofollow\">listing of wsgi-request-logger</a></li>\n<li>This fork source code is hosted at Github (todo determine url)</li>\n<li>The original source code for this Python module is <a href=\"https://github.com/pklaus/wsgi-request-logger\" rel=\"nofollow\">hosted on Github</a>.</li>\n<li>A blog post with more background information and usage examples:\n<a href=\"https://blog.philippklaus.de/2013/06/wsgi-request-logger-logging-http-requests-with-any-wsgi-web-application-like-flask-bottle-or-django/\" rel=\"nofollow\">wsgi-request-logger \u2013 Logging HTTP Requests With Any WSGI Web Application like Flask, Bottle or Django</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6004448, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "95f8f6c8433b4722cb6e877251a7010a", "sha256": "c531168d67176a1594987961c1f00461c39f8960704bf829b843b1aaf024dd2f"}, "downloads": -1, "filename": "wsgi_listener-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95f8f6c8433b4722cb6e877251a7010a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18965, "upload_time": "2019-10-20T19:37:50", "upload_time_iso_8601": "2019-10-20T19:37:50.994812Z", "url": "https://files.pythonhosted.org/packages/a3/c7/7930b73acb524b14505c9d53ec88ac12d5a14e5bdf0695c550a59a95db2b/wsgi_listener-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8478e68648c1d34e368e6624fe5c735e", "sha256": "05432bf8947e2dcfccfac259bcb5d9010688c0388648a0e791c4429f4f855211"}, "downloads": -1, "filename": "wsgi_listener-0.1.tar.gz", "has_sig": false, "md5_digest": "8478e68648c1d34e368e6624fe5c735e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8800, "upload_time": "2019-10-20T19:38:08", "upload_time_iso_8601": "2019-10-20T19:38:08.802516Z", "url": "https://files.pythonhosted.org/packages/95/64/339a2383a35aa9cf95b7e99abc804bd7c643905ae6d72c3b6373175172b3/wsgi_listener-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "95f8f6c8433b4722cb6e877251a7010a", "sha256": "c531168d67176a1594987961c1f00461c39f8960704bf829b843b1aaf024dd2f"}, "downloads": -1, "filename": "wsgi_listener-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95f8f6c8433b4722cb6e877251a7010a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18965, "upload_time": "2019-10-20T19:37:50", "upload_time_iso_8601": "2019-10-20T19:37:50.994812Z", "url": "https://files.pythonhosted.org/packages/a3/c7/7930b73acb524b14505c9d53ec88ac12d5a14e5bdf0695c550a59a95db2b/wsgi_listener-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8478e68648c1d34e368e6624fe5c735e", "sha256": "05432bf8947e2dcfccfac259bcb5d9010688c0388648a0e791c4429f4f855211"}, "downloads": -1, "filename": "wsgi_listener-0.1.tar.gz", "has_sig": false, "md5_digest": "8478e68648c1d34e368e6624fe5c735e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8800, "upload_time": "2019-10-20T19:38:08", "upload_time_iso_8601": "2019-10-20T19:38:08.802516Z", "url": "https://files.pythonhosted.org/packages/95/64/339a2383a35aa9cf95b7e99abc804bd7c643905ae6d72c3b6373175172b3/wsgi_listener-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:06 2020"}