{"info": {"author": "Lev Chelyadinov", "author_email": "leva181777@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Flask-pyWebPush\n\n[![PyPI version shields.io](https://img.shields.io/pypi/v/flask-pywebpush.svg)](https://pypi.python.org/pypi/flask-pywebpush/)\n\nA clean interface to `pywebpush` from Flask. Basically, a very thin wrapper.\n\n## Installation\n\nThe package is available [at the PyPI](https://pypi.org/project/Flask-pyWebPush/):\n\n```bash\n$ pip install flask-pywebpush\n```\n\n## Quickstart\n\n### Instantiation\n\nInstantiate this extension like any other Flask extension:\n\n```python\nfrom flask_pywebpush import WebPush\napp = Flask()\npush = WebPush(app)\n```\n\nOr you may initialize the extension with the Flask instance later:\n\n```python\nfrom flask_pywebpush import WebPush\napp = Flask()\npush = WebPush()\npush.init_app(app)\n```\n\n\n### VAPID keys and sender info\n\nWebPush sender requires a private key and an identification URL to operate. For more information on those values, see [this article on Google Developers](https://developers.google.com/web/fundamentals/push-notifications/subscribing-a-user#how_to_create_application_server_keys).\n\nYou may specify these values to the extension by setting the following configuration variables of the Flask instance:\n\n* `WEBPUSH_VAPID_PRIVATE_KEY`\n  The application server private key. As with `pywebpush`, it may either be the literal key value (DER representation) or a path to a VAPID EC2 private key PEM file;\n* `WEBPUSH_SENDER_INFO`: a URL containing information to contact the notification sender. Commonly a mailto: URL.\n\nAlternatively, you can pass these values on creation of the `WebPush` extension instance or to the `init_app` method later on:\n\n```python\nfrom flask_pywebpush import WebPush\npush = WebPush(private_key='some_value',\n               sender_info='mailto:admin@server.com')\n```\n\n### Notification sending\n\nAssuming you've got the subscription storage done, you may send a notification to a given subscription object like so:\n\n```python\nfrom flask_pywebpush import WebPushException\n\nsubscription = {\n    'endpoint': '---some-value---',\n    'keys': { ... }\n}\nnotification = {\n    'title': 'Test',\n    'body': 'notification body',\n}\n\ntry:\n    push.send(subscription, notification)\nexcept WebPushException as exc:\n    print(exc)\n```\n\nYou can also pass keyword arguments like `verbose=True` to `.send()`, which will be directly passed to `pywebpush.webpush()`\n\n\n## Extended Usage\n\nSince this is a wrapper over `pywebpush`, it exposes the main objects of the underlying library, namely, `webpush`, `WebPushException`, `WebPusher`.  \nAll of them may be directly imported from `flask_pywebpush`.\n\nThe `WebPush` extension instance also has a `get_webpusher(subscription)` method, allowing you to get a `pywebpush.WebPusher` instance for a given subscription.\n\nIf your usage requires more VAPID claims than simply `{\"sub\": \"sender_info\"}`, then you may override the passed claims using the `set_claims` method:\n\n```python\nfrom flask_pywebpush import WebPush\npush = WebPush()\npush.set_claims({})  # whatever VAPID claims you might need\n```\n\n## License\n\n[MIT](https://github.com/illright/flask-webpush/blob/master/LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/illright/flask-pywebpush", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Flask-pyWebPush", "package_url": "https://pypi.org/project/Flask-pyWebPush/", "platform": "any", "project_url": "https://pypi.org/project/Flask-pyWebPush/", "project_urls": {"Homepage": "https://github.com/illright/flask-pywebpush"}, "release_url": "https://pypi.org/project/Flask-pyWebPush/1.1/", "requires_dist": ["Flask", "pywebpush"], "requires_python": ">= 3.6", "summary": "A clean interface to pywebpush from Flask", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flask-pyWebPush</h1>\n<p><a href=\"https://pypi.python.org/pypi/flask-pywebpush/\" rel=\"nofollow\"><img alt=\"PyPI version shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91c4d39bfcefe1e8cdcae4fa67fc6401b670b591/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b2d7079776562707573682e737667\"></a></p>\n<p>A clean interface to <code>pywebpush</code> from Flask. Basically, a very thin wrapper.</p>\n<h2>Installation</h2>\n<p>The package is available <a href=\"https://pypi.org/project/Flask-pyWebPush/\" rel=\"nofollow\">at the PyPI</a>:</p>\n<pre>$ pip install flask-pywebpush\n</pre>\n<h2>Quickstart</h2>\n<h3>Instantiation</h3>\n<p>Instantiate this extension like any other Flask extension:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_pywebpush</span> <span class=\"kn\">import</span> <span class=\"n\">WebPush</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">()</span>\n<span class=\"n\">push</span> <span class=\"o\">=</span> <span class=\"n\">WebPush</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>Or you may initialize the extension with the Flask instance later:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_pywebpush</span> <span class=\"kn\">import</span> <span class=\"n\">WebPush</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">()</span>\n<span class=\"n\">push</span> <span class=\"o\">=</span> <span class=\"n\">WebPush</span><span class=\"p\">()</span>\n<span class=\"n\">push</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<h3>VAPID keys and sender info</h3>\n<p>WebPush sender requires a private key and an identification URL to operate. For more information on those values, see <a href=\"https://developers.google.com/web/fundamentals/push-notifications/subscribing-a-user#how_to_create_application_server_keys\" rel=\"nofollow\">this article on Google Developers</a>.</p>\n<p>You may specify these values to the extension by setting the following configuration variables of the Flask instance:</p>\n<ul>\n<li><code>WEBPUSH_VAPID_PRIVATE_KEY</code>\nThe application server private key. As with <code>pywebpush</code>, it may either be the literal key value (DER representation) or a path to a VAPID EC2 private key PEM file;</li>\n<li><code>WEBPUSH_SENDER_INFO</code>: a URL containing information to contact the notification sender. Commonly a mailto: URL.</li>\n</ul>\n<p>Alternatively, you can pass these values on creation of the <code>WebPush</code> extension instance or to the <code>init_app</code> method later on:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_pywebpush</span> <span class=\"kn\">import</span> <span class=\"n\">WebPush</span>\n<span class=\"n\">push</span> <span class=\"o\">=</span> <span class=\"n\">WebPush</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"o\">=</span><span class=\"s1\">'some_value'</span><span class=\"p\">,</span>\n               <span class=\"n\">sender_info</span><span class=\"o\">=</span><span class=\"s1\">'mailto:admin@server.com'</span><span class=\"p\">)</span>\n</pre>\n<h3>Notification sending</h3>\n<p>Assuming you've got the subscription storage done, you may send a notification to a given subscription object like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_pywebpush</span> <span class=\"kn\">import</span> <span class=\"n\">WebPushException</span>\n\n<span class=\"n\">subscription</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'endpoint'</span><span class=\"p\">:</span> <span class=\"s1\">'---some-value---'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'keys'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">notification</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Test'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"s1\">'notification body'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">push</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">subscription</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">WebPushException</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n</pre>\n<p>You can also pass keyword arguments like <code>verbose=True</code> to <code>.send()</code>, which will be directly passed to <code>pywebpush.webpush()</code></p>\n<h2>Extended Usage</h2>\n<p>Since this is a wrapper over <code>pywebpush</code>, it exposes the main objects of the underlying library, namely, <code>webpush</code>, <code>WebPushException</code>, <code>WebPusher</code>.<br>\nAll of them may be directly imported from <code>flask_pywebpush</code>.</p>\n<p>The <code>WebPush</code> extension instance also has a <code>get_webpusher(subscription)</code> method, allowing you to get a <code>pywebpush.WebPusher</code> instance for a given subscription.</p>\n<p>If your usage requires more VAPID claims than simply <code>{\"sub\": \"sender_info\"}</code>, then you may override the passed claims using the <code>set_claims</code> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_pywebpush</span> <span class=\"kn\">import</span> <span class=\"n\">WebPush</span>\n<span class=\"n\">push</span> <span class=\"o\">=</span> <span class=\"n\">WebPush</span><span class=\"p\">()</span>\n<span class=\"n\">push</span><span class=\"o\">.</span><span class=\"n\">set_claims</span><span class=\"p\">({})</span>  <span class=\"c1\"># whatever VAPID claims you might need</span>\n</pre>\n<h2>License</h2>\n<p><a href=\"https://github.com/illright/flask-webpush/blob/master/LICENSE\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6916662, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "8491ac728eae57a3bfb6465d664c4f3a", "sha256": "1f228fa7032277d778a3a9514c9365820cb6b1435bd521b7cff79534cc27fd54"}, "downloads": -1, "filename": "Flask_pyWebPush-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8491ac728eae57a3bfb6465d664c4f3a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 4179, "upload_time": "2020-03-30T22:20:21", "upload_time_iso_8601": "2020-03-30T22:20:21.349387Z", "url": "https://files.pythonhosted.org/packages/b7/9e/17fa0d42d460545e66d5f3d2515ff58bf1bfcafd3e6b2a28dc177cc4c7ca/Flask_pyWebPush-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2c871e9a008f562923396e790291093", "sha256": "6d11a38febe4a03167fb63922446212d0b40d9d7898046bfee59af8a3afb90f0"}, "downloads": -1, "filename": "Flask-pyWebPush-1.0.tar.gz", "has_sig": false, "md5_digest": "c2c871e9a008f562923396e790291093", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 3355, "upload_time": "2020-03-30T22:20:23", "upload_time_iso_8601": "2020-03-30T22:20:23.403056Z", "url": "https://files.pythonhosted.org/packages/48/bb/3427cae526b30a8b5ca8995b62f49dc30fed69280fd7fd4ff8879bed437d/Flask-pyWebPush-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "e469f08e07eea13a0770365ab060fb5b", "sha256": "018187d9deac755ebae9fd774801704b08540c50dd0856a1e8599fcbc9e57239"}, "downloads": -1, "filename": "Flask_pyWebPush-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e469f08e07eea13a0770365ab060fb5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 4291, "upload_time": "2020-03-30T22:38:58", "upload_time_iso_8601": "2020-03-30T22:38:58.626677Z", "url": "https://files.pythonhosted.org/packages/7b/df/74ca48a77785d5c5d02eb80202d59ac66ef25c880f585559968f71227df8/Flask_pyWebPush-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cb31be732af9602c44596e76bf0e2c3", "sha256": "aa6b6391f35b77727948fd416a5bb4051fac916d53c5dccb8af35ff768741a96"}, "downloads": -1, "filename": "Flask-pyWebPush-1.1.tar.gz", "has_sig": false, "md5_digest": "2cb31be732af9602c44596e76bf0e2c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 3487, "upload_time": "2020-03-30T22:39:00", "upload_time_iso_8601": "2020-03-30T22:39:00.200425Z", "url": "https://files.pythonhosted.org/packages/3b/b3/65eefcdfbb2381cb1d58a9973bfdfb113178c6a9633eb384e0d0a39cd36b/Flask-pyWebPush-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e469f08e07eea13a0770365ab060fb5b", "sha256": "018187d9deac755ebae9fd774801704b08540c50dd0856a1e8599fcbc9e57239"}, "downloads": -1, "filename": "Flask_pyWebPush-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e469f08e07eea13a0770365ab060fb5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 4291, "upload_time": "2020-03-30T22:38:58", "upload_time_iso_8601": "2020-03-30T22:38:58.626677Z", "url": "https://files.pythonhosted.org/packages/7b/df/74ca48a77785d5c5d02eb80202d59ac66ef25c880f585559968f71227df8/Flask_pyWebPush-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cb31be732af9602c44596e76bf0e2c3", "sha256": "aa6b6391f35b77727948fd416a5bb4051fac916d53c5dccb8af35ff768741a96"}, "downloads": -1, "filename": "Flask-pyWebPush-1.1.tar.gz", "has_sig": false, "md5_digest": "2cb31be732af9602c44596e76bf0e2c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 3487, "upload_time": "2020-03-30T22:39:00", "upload_time_iso_8601": "2020-03-30T22:39:00.200425Z", "url": "https://files.pythonhosted.org/packages/3b/b3/65eefcdfbb2381cb1d58a9973bfdfb113178c6a9633eb384e0d0a39cd36b/Flask-pyWebPush-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:29 2020"}