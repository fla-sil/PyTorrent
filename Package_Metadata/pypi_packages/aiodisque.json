{"info": {"author": "Xavier Barbosa", "author_email": "clint.northwood@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "AIO Disque\n==========\n\nPython3.5 & Asyncio client for Disque_ message broker.\n\n\nInstallation\n------------\n\naiodisque requires a running disque server.\n\n::\n\n    python -m pip install -e .\n\n\nGetting started\n---------------\n\nUsage::\n\n    from aiodisque import Disque\n    client = Disque()\n    job_id = await client.sendjob('queue', 'body')\n\n``client`` accepts a tcp or unix address::\n\n    client = Disque(address='127.0.0.1:7711')\n    client = Disque(address=('127.0.0.1', 7711))\n    client = Disque(address='/path/to/socket')\n\n\nAPI Reference\n-------------\n\nThe `official Disque command documentation`_ does a great job of explaining\neach command in detail. There are a few exceptions:\n\n* each method are lowered\n* ``async`` keywords are replaced by asynchronous\n\nIn addition to the changes above, it implements some async sugar:\n\n* Fancy async iterators::\n\n    async for jobs in client.client.getjob_iter('q', nohang=True):\n        print(jobs)\n\n    async for queue in client.qscan_iter(count=128):\n        print(queue)\n\n    async for job in client.jscan_iter(count=128):\n        print(job)\n\n* There is also an experimentaton that try to mimic an asyncio.Queue::\n\n    from aiodisque.queue import Queue\n    queue = JobsQueue('queue', client)\n    job_id = await queue.put('job')\n    job = await queue.get()\n    assert job.id == job_id\n\n* client can reconnect automatically when a connection lost::\n\n    from aiodisque import Disque\n    client = Disque(auto_reconnect=True)\n    await client.hello()\n    # ... connection has been lost here...\n    await client.hello()  # this not fails\n\n.. _Disque: https://github.com/antirez/disque\n.. _`official Disque command documentation`: https://github.com/antirez/disque#main-api\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://lab.errorist.xyz/aio/aiodisque", "keywords": "infrastructure,message broker,asyncio", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "aiodisque", "package_url": "https://pypi.org/project/aiodisque/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/aiodisque/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://lab.errorist.xyz/aio/aiodisque"}, "release_url": "https://pypi.org/project/aiodisque/0.1/", "requires_dist": null, "requires_python": null, "summary": "Asyncio Disque client", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python3.5 &amp; Asyncio client for <a href=\"https://github.com/antirez/disque\" rel=\"nofollow\">Disque</a> message broker.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>aiodisque requires a running disque server.</p>\n<pre>python -m pip install -e .\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>Usage:</p>\n<pre>from aiodisque import Disque\nclient = Disque()\njob_id = await client.sendjob('queue', 'body')\n</pre>\n<p><tt>client</tt> accepts a tcp or unix address:</p>\n<pre>client = Disque(address='127.0.0.1:7711')\nclient = Disque(address=('127.0.0.1', 7711))\nclient = Disque(address='/path/to/socket')\n</pre>\n</div>\n<div id=\"api-reference\">\n<h2>API Reference</h2>\n<p>The <a href=\"https://github.com/antirez/disque#main-api\" rel=\"nofollow\">official Disque command documentation</a> does a great job of explaining\neach command in detail. There are a few exceptions:</p>\n<ul>\n<li>each method are lowered</li>\n<li><tt>async</tt> keywords are replaced by asynchronous</li>\n</ul>\n<p>In addition to the changes above, it implements some async sugar:</p>\n<ul>\n<li><p>Fancy async iterators:</p>\n<pre>async for jobs in client.client.getjob_iter('q', nohang=True):\n    print(jobs)\n\nasync for queue in client.qscan_iter(count=128):\n    print(queue)\n\nasync for job in client.jscan_iter(count=128):\n    print(job)\n</pre>\n</li>\n<li><p>There is also an experimentaton that try to mimic an asyncio.Queue:</p>\n<pre>from aiodisque.queue import Queue\nqueue = JobsQueue('queue', client)\njob_id = await queue.put('job')\njob = await queue.get()\nassert job.id == job_id\n</pre>\n</li>\n<li><p>client can reconnect automatically when a connection lost:</p>\n<pre>from aiodisque import Disque\nclient = Disque(auto_reconnect=True)\nawait client.hello()\n# ... connection has been lost here...\nawait client.hello()  # this not fails\n</pre>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1895036, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "55b53ac1fd204eef9ec7e5db395397d9", "sha256": "881e663e0288814cae2737ea7ef4acdfdbd146d6ba15fa01299b82ed7aaeef81"}, "downloads": -1, "filename": "aiodisque-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "55b53ac1fd204eef9ec7e5db395397d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15118, "upload_time": "2016-01-08T15:07:03", "upload_time_iso_8601": "2016-01-08T15:07:03.442190Z", "url": "https://files.pythonhosted.org/packages/96/e5/93f5797e00eb346b89c345d3cee5818374d8c6be02524cd1379b2b6f0178/aiodisque-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f9dba197564dd42fae13f8c56f195d8", "sha256": "fc42e919e85d75a0e94c85b71c3d3f4b2c51ae2efee3dba8d617d47d5ea61e7e"}, "downloads": -1, "filename": "aiodisque-0.1.tar.gz", "has_sig": false, "md5_digest": "2f9dba197564dd42fae13f8c56f195d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27194, "upload_time": "2016-01-08T15:07:14", "upload_time_iso_8601": "2016-01-08T15:07:14.088143Z", "url": "https://files.pythonhosted.org/packages/77/cb/2c9daecd33339e9cd05f48c1e7f225f15d7ab0d62205a0de2f8b7d5c20be/aiodisque-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55b53ac1fd204eef9ec7e5db395397d9", "sha256": "881e663e0288814cae2737ea7ef4acdfdbd146d6ba15fa01299b82ed7aaeef81"}, "downloads": -1, "filename": "aiodisque-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "55b53ac1fd204eef9ec7e5db395397d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15118, "upload_time": "2016-01-08T15:07:03", "upload_time_iso_8601": "2016-01-08T15:07:03.442190Z", "url": "https://files.pythonhosted.org/packages/96/e5/93f5797e00eb346b89c345d3cee5818374d8c6be02524cd1379b2b6f0178/aiodisque-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f9dba197564dd42fae13f8c56f195d8", "sha256": "fc42e919e85d75a0e94c85b71c3d3f4b2c51ae2efee3dba8d617d47d5ea61e7e"}, "downloads": -1, "filename": "aiodisque-0.1.tar.gz", "has_sig": false, "md5_digest": "2f9dba197564dd42fae13f8c56f195d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27194, "upload_time": "2016-01-08T15:07:14", "upload_time_iso_8601": "2016-01-08T15:07:14.088143Z", "url": "https://files.pythonhosted.org/packages/77/cb/2c9daecd33339e9cd05f48c1e7f225f15d7ab0d62205a0de2f8b7d5c20be/aiodisque-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:40 2020"}