{"info": {"author": "Karel Antonio Verdecia Ortiz", "author_email": "kverdecia@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Topic :: Communications :: Email", "Topic :: Text Processing"], "description": "Welcome\n=======\n\n`emaildata <https://pypi.python.org/pypi/emaildata/>`__ is a python\npackage for extracting content from email messages. It is a fork of the\n`emailcontent <https://pypi.python.org/pypi/emailcontent/>`__ package\nbut adds from features.\n\nemaildata features\n------------------\n\n`emaildata <https://pypi.python.org/pypi/emaildata/>`__ extracts this\ntypes of contents from emails:\n\n-  Extract metadata.\n-  Extract text (plain text and html).\n-  Extract attachments.\n\nExtracting metadata\n-------------------\n\nThis feature was included from the *metadata* module of the\n`emailcontent <https://pypi.python.org/pypi/emailcontent/>`__. This\nmodule was copied module, few methods of is *MetaData* class were\nremoved, and the module was made more pylint friendly.\n\nTo extract metadata from an email message headers you create an instance\nof the *MetaData* class passing a message to the constructor. You can\nretrieve the metadata with the method *to\\_dict*. This can also be done\nusing the method *set\\_message*::\n\n    import email\n    from emaildata.metadata import MetaData\n\n    message = email.message_from_file(open('message.eml'))\n    extractor = MetaData(message)\n    data = extractor.to_dict()\n    print data.keys()\n\n    message2 = email.message_from_file(open('message2.eml'))\n    extractor.set_message(message2)\n    data2 = extractor.to_dict()\n\nExtracting text\n---------------\n\nThe class `Text` in the `text` module have static methods for extracting\ntext and html from messages::\n\n    import email\n    from emaildata.text import Text\n\n    message = email.message_from_file(open('message.eml'))\n    text = Text.text(message)\n    html = Text.html(message)\n\nExtracting attachments\n-----------------------\n\nThe method `extract` in the Attachment class returns an iterator with the decoded\ncontents of the attachments of a message::\n\n    import email\n    from emaildata.attachment import Attachment\n\n    message = email.message_from_file(open('message.eml'))\n    for content, filename, mimetype, message in Attachment.extract(message):\n        print filename\n        with open(filename, 'w') as stream:\n            stream.write(content)\n        # If message is not None then it is an instance of email.message.Message\n        if message:\n            print \"The file {0} is a message with attachments.\".format(filename)\n\nBy default this method only iterates by the attachments with a filename. To retrieve all\nattachments you have to pass `False` as the second parameter (`only_with_filename`)::\n\n    import email\n    import mimetypes\n    import uuid\n    from emaildata.attachment import Attachment\n\n    message = email.message_from_file(open('message.eml'))\n    for content, filename, mimetype, message in Attachment.extract(message, False):\n        if not filename:\n            filename = str(uuid.uuid1()) + (mimetypes.guess_extension(mimetype) or '.txt')\n        print filename\n        with open(filename, 'w') as stream:\n            stream.write(content)\n        # If message is not None then it is an instance of email.message.Message\n        if message:\n            print \"The file {0} is a message with attachments.\".format(filename)\n\nChangelog\n---------\n\nVersion 0.3 (2015-05-3)\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Implemented class for extracting attachments from messages.\n\nVersion 0.2 (2015-05-3)\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Implemented class for extracting plain text and html from messages.\n\nVersion 0.1 (2015-03-15)\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Initial version.\n-  Support for metadata extraction.", "description_content_type": null, "docs_url": null, "download_url": "https://bitbucket.org/karelverdecia/emaildata/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/karelverdecia/emaildata/wiki/Home", "keywords": "email,rfc822", "license": "LGPL3", "maintainer": null, "maintainer_email": null, "name": "emaildata", "package_url": "https://pypi.org/project/emaildata/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/emaildata/", "project_urls": {"Download": "https://bitbucket.org/karelverdecia/emaildata/", "Homepage": "https://bitbucket.org/karelverdecia/emaildata/wiki/Home"}, "release_url": "https://pypi.org/project/emaildata/0.3.4/", "requires_dist": null, "requires_python": null, "summary": "Python package for extracting metadata, text, html and attachements from email messages.", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/emaildata/\" rel=\"nofollow\">emaildata</a> is a python\npackage for extracting content from email messages. It is a fork of the\n<a href=\"https://pypi.python.org/pypi/emailcontent/\" rel=\"nofollow\">emailcontent</a> package\nbut adds from features.</p>\n<div id=\"emaildata-features\">\n<h2>emaildata features</h2>\n<p><a href=\"https://pypi.python.org/pypi/emaildata/\" rel=\"nofollow\">emaildata</a> extracts this\ntypes of contents from emails:</p>\n<ul>\n<li>Extract metadata.</li>\n<li>Extract text (plain text and html).</li>\n<li>Extract attachments.</li>\n</ul>\n</div>\n<div id=\"extracting-metadata\">\n<h2>Extracting metadata</h2>\n<p>This feature was included from the <em>metadata</em> module of the\n<a href=\"https://pypi.python.org/pypi/emailcontent/\" rel=\"nofollow\">emailcontent</a>. This\nmodule was copied module, few methods of is <em>MetaData</em> class were\nremoved, and the module was made more pylint friendly.</p>\n<p>To extract metadata from an email message headers you create an instance\nof the <em>MetaData</em> class passing a message to the constructor. You can\nretrieve the metadata with the method <em>to_dict</em>. This can also be done\nusing the method <em>set_message</em>:</p>\n<pre>import email\nfrom emaildata.metadata import MetaData\n\nmessage = email.message_from_file(open('message.eml'))\nextractor = MetaData(message)\ndata = extractor.to_dict()\nprint data.keys()\n\nmessage2 = email.message_from_file(open('message2.eml'))\nextractor.set_message(message2)\ndata2 = extractor.to_dict()\n</pre>\n</div>\n<div id=\"extracting-text\">\n<h2>Extracting text</h2>\n<p>The class <cite>Text</cite> in the <cite>text</cite> module have static methods for extracting\ntext and html from messages:</p>\n<pre>import email\nfrom emaildata.text import Text\n\nmessage = email.message_from_file(open('message.eml'))\ntext = Text.text(message)\nhtml = Text.html(message)\n</pre>\n</div>\n<div id=\"extracting-attachments\">\n<h2>Extracting attachments</h2>\n<p>The method <cite>extract</cite> in the Attachment class returns an iterator with the decoded\ncontents of the attachments of a message:</p>\n<pre>import email\nfrom emaildata.attachment import Attachment\n\nmessage = email.message_from_file(open('message.eml'))\nfor content, filename, mimetype, message in Attachment.extract(message):\n    print filename\n    with open(filename, 'w') as stream:\n        stream.write(content)\n    # If message is not None then it is an instance of email.message.Message\n    if message:\n        print \"The file {0} is a message with attachments.\".format(filename)\n</pre>\n<p>By default this method only iterates by the attachments with a filename. To retrieve all\nattachments you have to pass <cite>False</cite> as the second parameter (<cite>only_with_filename</cite>):</p>\n<pre>import email\nimport mimetypes\nimport uuid\nfrom emaildata.attachment import Attachment\n\nmessage = email.message_from_file(open('message.eml'))\nfor content, filename, mimetype, message in Attachment.extract(message, False):\n    if not filename:\n        filename = str(uuid.uuid1()) + (mimetypes.guess_extension(mimetype) or '.txt')\n    print filename\n    with open(filename, 'w') as stream:\n        stream.write(content)\n    # If message is not None then it is an instance of email.message.Message\n    if message:\n        print \"The file {0} is a message with attachments.\".format(filename)\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"version-0-3-2015-05-3\">\n<h3>Version 0.3 (2015-05-3)</h3>\n<ul>\n<li>Implemented class for extracting attachments from messages.</li>\n</ul>\n</div>\n<div id=\"version-0-2-2015-05-3\">\n<h3>Version 0.2 (2015-05-3)</h3>\n<ul>\n<li>Implemented class for extracting plain text and html from messages.</li>\n</ul>\n</div>\n<div id=\"version-0-1-2015-03-15\">\n<h3>Version 0.1 (2015-03-15)</h3>\n<ul>\n<li>Initial version.</li>\n<li>Support for metadata extraction.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2597742, "releases": {"0.1": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "3cbed409c1851c5da5cb61065c539cc1", "sha256": "37498d7a669adad281e7d91e05e8af6a7390ce328843d7578ad11ac0c652cbb0"}, "downloads": -1, "filename": "emaildata-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3cbed409c1851c5da5cb61065c539cc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4180, "upload_time": "2015-03-16T03:40:48", "upload_time_iso_8601": "2015-03-16T03:40:48.277863Z", "url": "https://files.pythonhosted.org/packages/10/71/2456f498a68e1e2007be4ffb3da0dceb447a635b7ca68ff91b31d2c534bb/emaildata-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7116b622a06db92257f2013d1a82d837", "sha256": "6655d1eb40c3afd1615f5df7b04f15fc2ba0712824ab70e946a7d439dd5fcfcf"}, "downloads": -1, "filename": "emaildata-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7116b622a06db92257f2013d1a82d837", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4170, "upload_time": "2015-03-16T03:43:58", "upload_time_iso_8601": "2015-03-16T03:43:58.039803Z", "url": "https://files.pythonhosted.org/packages/4d/79/5657ee57205bac67e822b09a0ae5bff3d69eb3d5b28255d0726f02c48d7c/emaildata-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "adf8bd4dc2f92d46d200ad85efcde37b", "sha256": "2b670857d79d14095641a2adf52e5856787c35153923e928ce6594fea6256212"}, "downloads": -1, "filename": "emaildata-0.1.3.tar.gz", "has_sig": false, "md5_digest": "adf8bd4dc2f92d46d200ad85efcde37b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4184, "upload_time": "2015-03-16T04:11:12", "upload_time_iso_8601": "2015-03-16T04:11:12.886652Z", "url": "https://files.pythonhosted.org/packages/cc/1f/3387d4b15d29c356093e5a2d3e8ebbf5aa7c2fa96eaa391b69ee5dda8918/emaildata-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7af56bd12f5da2f9ef8f00ce6749981e", "sha256": "151d3b695b85007fd2fc62e410f93d344cb5813082671b0e60d524357901a7c1"}, "downloads": -1, "filename": "emaildata-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7af56bd12f5da2f9ef8f00ce6749981e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5505, "upload_time": "2015-05-03T17:18:29", "upload_time_iso_8601": "2015-05-03T17:18:29.335113Z", "url": "https://files.pythonhosted.org/packages/b1/31/490c7cb1f7f17972cfb3bff0e5a6f651436cef594fdc4a2721078069e022/emaildata-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "07ccba98c39ae0fa7ead0f4173dd5df3", "sha256": "412d4d210ad5361095d3b86b8bc3214ab9af14e4240c25305dd3dafe8759e348"}, "downloads": -1, "filename": "emaildata-0.3.0.tar.gz", "has_sig": false, "md5_digest": "07ccba98c39ae0fa7ead0f4173dd5df3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7324, "upload_time": "2015-05-03T20:02:03", "upload_time_iso_8601": "2015-05-03T20:02:03.845751Z", "url": "https://files.pythonhosted.org/packages/f2/90/bd13ef27160babb03dab9ce7529c4a40d63629f9dd1e4463ce81605120c1/emaildata-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e01cdfcd435414cb887ad54274ee9389", "sha256": "36107fc3f74ee4f7c08de7c851252da24a2ce6a873e357c3c19e3c64c38e6cbd"}, "downloads": -1, "filename": "emaildata-0.3.1.tar.gz", "has_sig": false, "md5_digest": "e01cdfcd435414cb887ad54274ee9389", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7327, "upload_time": "2015-05-03T20:03:49", "upload_time_iso_8601": "2015-05-03T20:03:49.638642Z", "url": "https://files.pythonhosted.org/packages/7e/1f/df63282f8bf593095859721c6fb81e1a5eba00d72d66be1e714ca4da73bb/emaildata-0.3.1.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "5d3996babec8fb2198e0bce086dc19d0", "sha256": "f372e522665536b9fb92e2e6612150e36669f9a1d65add040a3825e5382f2ba3"}, "downloads": -1, "filename": "emaildata-0.3.4.tar.gz", "has_sig": false, "md5_digest": "5d3996babec8fb2198e0bce086dc19d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6598, "upload_time": "2017-01-25T15:45:47", "upload_time_iso_8601": "2017-01-25T15:45:47.310464Z", "url": "https://files.pythonhosted.org/packages/75/cb/ba258749dfbd682d0392e443ac58204ed8d88d9e1f4959c29b96aa737475/emaildata-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d3996babec8fb2198e0bce086dc19d0", "sha256": "f372e522665536b9fb92e2e6612150e36669f9a1d65add040a3825e5382f2ba3"}, "downloads": -1, "filename": "emaildata-0.3.4.tar.gz", "has_sig": false, "md5_digest": "5d3996babec8fb2198e0bce086dc19d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6598, "upload_time": "2017-01-25T15:45:47", "upload_time_iso_8601": "2017-01-25T15:45:47.310464Z", "url": "https://files.pythonhosted.org/packages/75/cb/ba258749dfbd682d0392e443ac58204ed8d88d9e1f4959c29b96aa737475/emaildata-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:44 2020"}