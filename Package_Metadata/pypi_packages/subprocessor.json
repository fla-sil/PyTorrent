{"info": {"author": "Tom Ritchford", "author_email": "tom@swirly.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "##################################################\n\u26cf\ufe0fsubprocessor: subprocesseses for subhumanses  \u26cf\n##################################################\n\nRun a command in a subprocess and yield lines of text from stdout and stderr\n\n*********\nEXAMPLES\n*********\n\n.. code-block:: python\n\n    import subprocessor as sub\n\n    CMD = 'my-unix-command \"My Cool File.txt\" No-file.txt'\n\n    for ok, line in sub.Sub(CMD) as sp:\n        if ok:\n             print(' ', line)\n        else:\n             print('!', line)\n\n    if sp.returncode:\n        print('Error code', sp.returncode)\n\n    # Return two lists of text lines and a returncode\n    out_lines, err_lines, returncode = sub.run(CMD)\n\n    # Call callback functions with lines of text read from stdout and stderr\n    returncode = sub.call(CMD, save_results, print_errors)\n\n    # Log stdout and stderr, with prefixes\n    returncode = sub.log(CMD)\n\n***\nAPI\n***\n\nMethods on ``class subprocessor.Sub:``\n======================================\n\n``Sub.__init__(self, cmd, **kwds)``\n-----------------------------------\n\n    Iterate over lines of text from a subprocess.\n\n    If ``kwargs['shell']`` is true, ``Popen`` expects a string,\n    and so if ``cmd`` is not a string, it is joined using ``shlex``.\n\n    If ``kwargs['shell']`` is false, ``Popen`` expects a list of strings,\n    and so if ``cmd`` is a string, it is split using ``shlex``.\n\n    ARGUMENTS\n      cmd:\n        The command to run in a subprocess: a string or a list or tuple of strings\n\n      kwargs:\n        Keyword arguments passed to subprocess.Popen()\n\n``Sub.__iter__(self)``\n----------------------\n\n            Yields a sequence of ``ok, line`` pairs from ``stdout`` and ``stderr`` of\n            a subprocess, where ``ok`` is ``True`` if ``line`` came from ``stdout``\n            and ``False`` if it came from ``stderr``.\n\n            After iteration is done, the ``.returncode`` property contains\n            the error code from the subprocess, an integer where 0 means no error.\n\n\n``Sub.call(self, out=None, err=None)``\n--------------------------------------\n\n    Run the subprocess and call function ``out`` with lines from\n    ``stdout`` and function ``err`` with lines from ``stderr``.\n\n    Blocks until the subprocess is complete: the callbacks are on\n    the current thread.\n\n    ARGUMENTS\n      out:\n        if not None, ``out`` is called for each line from the subprocess's stdout\n\n      err:\n        if not None, ``err`` is called for each line from the subprocess's stderr,\n\n``Sub.run(self)``\n-----------------\n\n    Reads lines from ``stdout`` and ``stderr`` into two lists ``out`` and ``err``,\n    then returns a tuple ``(out, err, returncode)``\n\n``Sub.log(self, out='  ', err='! ', print=<built-in function print>)``\n----------------------------------------------------------------------\n\n    Read lines from ``stdin`` and ``stderr`` and prints them with prefixes\n\n    Returns the shell integer error code from the subprocess, where 0 means\n    no error.\n\n    ARGUMENTS\n      out:\n        Prefix for printing lines from stdout\n\n      err:\n        Prefix for printing lines from stderr\n\n\nFunctions\n=========\n\n``subprocessor.call(cmd, out=None, err=None, **kwds)``\n------------------------------------------------------\n\n    Run the subprocess and call function ``out`` with lines from\n    ``stdout`` and function ``err`` with lines from ``stderr``.\n\n    Blocks until the subprocess is complete: the callbacks are on\n    the current thread.\n\n    ARGUMENTS\n      cmd:\n        The command to run in a subprocess: a string or a list or tuple of strings\n\n      out:\n        if not None, ``out`` is called for each line from the subprocess's stdout\n\n      err:\n        if not None, ``err`` is called for each line from the subprocess's stderr,\n\n      kwargs:\n        Keyword arguments passed to subprocess.Popen()\n\n\n``subprocessor.run(cmd, **kwds)``\n---------------------------------\n\n    Reads lines from ``stdout`` and ``stderr`` into two lists ``out`` and ``err``,\n    then returns a tuple ``(out, err, returncode)``\n\n    ARGUMENTS\n      cmd:\n        The command to run in a subprocess: a string or a list or tuple of strings\n\n      kwargs:\n        Keyword arguments passed to subprocess.Popen()\n\n\n``subprocessor.log(cmd, out='  ', err='! ', print=<built-in function print>, **kwds)``\n--------------------------------------------------------------------------------------\n\n    Read lines from ``stdin`` and ``stderr`` and prints them with prefixes\n\n    Returns the shell integer error code from the subprocess, where 0 means\n    no error.\n\n    ARGUMENTS\n      cmd:\n        The command to run in a subprocess: a string or a list or tuple of strings\n\n      out:\n        Prefix for printing lines from stdout\n\n      err:\n        Prefix for printing lines from stderr\n\n      kwargs:\n        Keyword arguments passed to subprocess.Popen()\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rec/subprocessor", "keywords": "backups", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "subprocessor", "package_url": "https://pypi.org/project/subprocessor/", "platform": "", "project_url": "https://pypi.org/project/subprocessor/", "project_urls": {"Homepage": "https://github.com/rec/subprocessor"}, "release_url": "https://pypi.org/project/subprocessor/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Run a subprocess with callbacks", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Run a command in a subprocess and yield lines of text from stdout and stderr</p>\n<div id=\"examples\">\n<h2>EXAMPLES</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">subprocessor</span> <span class=\"k\">as</span> <span class=\"nn\">sub</span>\n\n<span class=\"n\">CMD</span> <span class=\"o\">=</span> <span class=\"s1\">'my-unix-command \"My Cool File.txt\" No-file.txt'</span>\n\n<span class=\"k\">for</span> <span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">Sub</span><span class=\"p\">(</span><span class=\"n\">CMD</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">sp</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">ok</span><span class=\"p\">:</span>\n         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'!'</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">returncode</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Error code'</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">returncode</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Return two lists of text lines and a returncode</span>\n<span class=\"n\">out_lines</span><span class=\"p\">,</span> <span class=\"n\">err_lines</span><span class=\"p\">,</span> <span class=\"n\">returncode</span> <span class=\"o\">=</span> <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">CMD</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Call callback functions with lines of text read from stdout and stderr</span>\n<span class=\"n\">returncode</span> <span class=\"o\">=</span> <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">CMD</span><span class=\"p\">,</span> <span class=\"n\">save_results</span><span class=\"p\">,</span> <span class=\"n\">print_errors</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Log stdout and stderr, with prefixes</span>\n<span class=\"n\">returncode</span> <span class=\"o\">=</span> <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">CMD</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<div id=\"methods-on-class-subprocessor-sub\">\n<h3>Methods on <tt>class subprocessor.Sub:</tt></h3>\n<div id=\"sub-init-self-cmd-kwds\">\n<h4><tt>Sub.__init__(self, cmd, **kwds)</tt></h4>\n<blockquote>\n<p>Iterate over lines of text from a subprocess.</p>\n<p>If <tt><span class=\"pre\">kwargs['shell']</span></tt> is true, <tt>Popen</tt> expects a string,\nand so if <tt>cmd</tt> is not a string, it is joined using <tt>shlex</tt>.</p>\n<p>If <tt><span class=\"pre\">kwargs['shell']</span></tt> is false, <tt>Popen</tt> expects a list of strings,\nand so if <tt>cmd</tt> is a string, it is split using <tt>shlex</tt>.</p>\n<dl>\n<dt>ARGUMENTS</dt>\n<dd><dl>\n<dt>cmd:</dt>\n<dd>The command to run in a subprocess: a string or a list or tuple of strings</dd>\n<dt>kwargs:</dt>\n<dd>Keyword arguments passed to subprocess.Popen()</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"sub-iter-self\">\n<h4><tt>Sub.__iter__(self)</tt></h4>\n<blockquote>\n<p>Yields a sequence of <tt>ok, line</tt> pairs from <tt>stdout</tt> and <tt>stderr</tt> of\na subprocess, where <tt>ok</tt> is <tt>True</tt> if <tt>line</tt> came from <tt>stdout</tt>\nand <tt>False</tt> if it came from <tt>stderr</tt>.</p>\n<p>After iteration is done, the <tt>.returncode</tt> property contains\nthe error code from the subprocess, an integer where 0 means no error.</p>\n</blockquote>\n</div>\n<div id=\"sub-call-self-out-none-err-none\">\n<h4><tt>Sub.call(self, out=None, err=None)</tt></h4>\n<blockquote>\n<p>Run the subprocess and call function <tt>out</tt> with lines from\n<tt>stdout</tt> and function <tt>err</tt> with lines from <tt>stderr</tt>.</p>\n<p>Blocks until the subprocess is complete: the callbacks are on\nthe current thread.</p>\n<dl>\n<dt>ARGUMENTS</dt>\n<dd><dl>\n<dt>out:</dt>\n<dd>if not None, <tt>out</tt> is called for each line from the subprocess\u2019s stdout</dd>\n<dt>err:</dt>\n<dd>if not None, <tt>err</tt> is called for each line from the subprocess\u2019s stderr,</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"sub-run-self\">\n<h4><tt>Sub.run(self)</tt></h4>\n<blockquote>\nReads lines from <tt>stdout</tt> and <tt>stderr</tt> into two lists <tt>out</tt> and <tt>err</tt>,\nthen returns a tuple <tt>(out, err, returncode)</tt></blockquote>\n</div>\n<div id=\"sub-log-self-out-err-print-built-in-function-print\">\n<h4><tt>Sub.log(self, out='\u00a0 ', <span class=\"pre\">err='!</span> ', <span class=\"pre\">print=&lt;built-in</span> function print&gt;)</tt></h4>\n<blockquote>\n<p>Read lines from <tt>stdin</tt> and <tt>stderr</tt> and prints them with prefixes</p>\n<p>Returns the shell integer error code from the subprocess, where 0 means\nno error.</p>\n<dl>\n<dt>ARGUMENTS</dt>\n<dd><dl>\n<dt>out:</dt>\n<dd>Prefix for printing lines from stdout</dd>\n<dt>err:</dt>\n<dd>Prefix for printing lines from stderr</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n</div>\n</div>\n<div id=\"functions\">\n<h3>Functions</h3>\n<div id=\"subprocessor-call-cmd-out-none-err-none-kwds\">\n<h4><tt>subprocessor.call(cmd, out=None, err=None, **kwds)</tt></h4>\n<blockquote>\n<p>Run the subprocess and call function <tt>out</tt> with lines from\n<tt>stdout</tt> and function <tt>err</tt> with lines from <tt>stderr</tt>.</p>\n<p>Blocks until the subprocess is complete: the callbacks are on\nthe current thread.</p>\n<dl>\n<dt>ARGUMENTS</dt>\n<dd><dl>\n<dt>cmd:</dt>\n<dd>The command to run in a subprocess: a string or a list or tuple of strings</dd>\n<dt>out:</dt>\n<dd>if not None, <tt>out</tt> is called for each line from the subprocess\u2019s stdout</dd>\n<dt>err:</dt>\n<dd>if not None, <tt>err</tt> is called for each line from the subprocess\u2019s stderr,</dd>\n<dt>kwargs:</dt>\n<dd>Keyword arguments passed to subprocess.Popen()</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"subprocessor-run-cmd-kwds\">\n<h4><tt>subprocessor.run(cmd, **kwds)</tt></h4>\n<blockquote>\n<p>Reads lines from <tt>stdout</tt> and <tt>stderr</tt> into two lists <tt>out</tt> and <tt>err</tt>,\nthen returns a tuple <tt>(out, err, returncode)</tt></p>\n<dl>\n<dt>ARGUMENTS</dt>\n<dd><dl>\n<dt>cmd:</dt>\n<dd>The command to run in a subprocess: a string or a list or tuple of strings</dd>\n<dt>kwargs:</dt>\n<dd>Keyword arguments passed to subprocess.Popen()</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"subprocessor-log-cmd-out-err-print-built-in-function-print-kwds\">\n<h4><tt>subprocessor.log(cmd, out='\u00a0 ', <span class=\"pre\">err='!</span> ', <span class=\"pre\">print=&lt;built-in</span> function print&gt;, **kwds)</tt></h4>\n<blockquote>\n<p>Read lines from <tt>stdin</tt> and <tt>stderr</tt> and prints them with prefixes</p>\n<p>Returns the shell integer error code from the subprocess, where 0 means\nno error.</p>\n<dl>\n<dt>ARGUMENTS</dt>\n<dd><dl>\n<dt>cmd:</dt>\n<dd>The command to run in a subprocess: a string or a list or tuple of strings</dd>\n<dt>out:</dt>\n<dd>Prefix for printing lines from stdout</dd>\n<dt>err:</dt>\n<dd>Prefix for printing lines from stderr</dd>\n<dt>kwargs:</dt>\n<dd>Keyword arguments passed to subprocess.Popen()</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7105909, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "0bf3a0b658f362a22171136267ed1de8", "sha256": "0d9d7046cea567640a25ffff234e667b9ef9e650c2cac5d0d6433f9dc541c9c1"}, "downloads": -1, "filename": "subprocessor-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0bf3a0b658f362a22171136267ed1de8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3700, "upload_time": "2020-03-17T19:54:56", "upload_time_iso_8601": "2020-03-17T19:54:56.315049Z", "url": "https://files.pythonhosted.org/packages/db/e6/70c81577e3ebeb56664a24a2148389e2f17f540457d513eb5e7f2c2a8244/subprocessor-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62e0e5597a9bb1a53ffa18f3ca86f8dd", "sha256": "cbd8531774b63556ea791863066ca767104a58dff2c408c7291eeba7c6adaa93"}, "downloads": -1, "filename": "subprocessor-0.9.0.tar.gz", "has_sig": false, "md5_digest": "62e0e5597a9bb1a53ffa18f3ca86f8dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2944, "upload_time": "2020-03-17T19:54:58", "upload_time_iso_8601": "2020-03-17T19:54:58.350829Z", "url": "https://files.pythonhosted.org/packages/fe/f3/1d768ec6b1e2f3b4b77a018dfa2614941fa6d2fefa25364faf2e6d556346/subprocessor-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "3488e91a580ba2a1495c24f628964bdb", "sha256": "060b2cfd31112d77dd355e9ee5a6616fea6481d75598da882e12d873050b7b3d"}, "downloads": -1, "filename": "subprocessor-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3488e91a580ba2a1495c24f628964bdb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3723, "upload_time": "2020-03-30T16:05:59", "upload_time_iso_8601": "2020-03-30T16:05:59.495079Z", "url": "https://files.pythonhosted.org/packages/a3/10/f02c8ca88dd5e3dbce5964c43d763ad8280b399d7064a9fda3c6bd04d5bd/subprocessor-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2981f5f04220f26fbd1bfc18b19ec98", "sha256": "7225004d50b813bd4a878696ed76707c635650c3cc40796afc4996326857dc70"}, "downloads": -1, "filename": "subprocessor-0.9.1.tar.gz", "has_sig": false, "md5_digest": "e2981f5f04220f26fbd1bfc18b19ec98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2967, "upload_time": "2020-03-30T16:06:00", "upload_time_iso_8601": "2020-03-30T16:06:00.890806Z", "url": "https://files.pythonhosted.org/packages/43/f0/d43ef08c1f7d233688a096f243d3c650926d5dc62ba0edb117e954bd3d50/subprocessor-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "0f930abc5ad87ab00dfddf93ba8f1f88", "sha256": "d23af6510c3e48981b324c62ade915673a24e511b36ed6095a14ef8906eb9637"}, "downloads": -1, "filename": "subprocessor-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0f930abc5ad87ab00dfddf93ba8f1f88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5260, "upload_time": "2020-04-26T17:01:20", "upload_time_iso_8601": "2020-04-26T17:01:20.003208Z", "url": "https://files.pythonhosted.org/packages/f9/a9/8cfa5f2bc89529a9313079e02f644fd3b9f7ce51ad23d1a0e6b85ca16b7b/subprocessor-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80bba27b9862bee9a3f7927af6e5cc4b", "sha256": "ae04922b5e5874a851f06b8fe92e56e6dea70b28ddd0894dbc15d531a71b26e0"}, "downloads": -1, "filename": "subprocessor-0.9.2.tar.gz", "has_sig": false, "md5_digest": "80bba27b9862bee9a3f7927af6e5cc4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4002, "upload_time": "2020-04-26T17:01:21", "upload_time_iso_8601": "2020-04-26T17:01:21.491290Z", "url": "https://files.pythonhosted.org/packages/b7/7c/d5659d3007fd027363079c2b9a6c73f02200eb571d195f0c455cf164ae8a/subprocessor-0.9.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "93eddec73bcaf6a1be0342f5df73695f", "sha256": "63e72999662c9900faffc12b7da15b8398ffb20adb16055a350313bb64472913"}, "downloads": -1, "filename": "subprocessor-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "93eddec73bcaf6a1be0342f5df73695f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5261, "upload_time": "2020-04-26T17:04:43", "upload_time_iso_8601": "2020-04-26T17:04:43.414045Z", "url": "https://files.pythonhosted.org/packages/1e/e5/78cad2672003931d3b302d6a0aa28f011ba44779f6986083d63ed3524fcd/subprocessor-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70133363edf07496c808e49d0ad97810", "sha256": "ce1c3b6b0b67a110ec3117e03f30f916d58eebeb62d5afee9ed3812395cd239b"}, "downloads": -1, "filename": "subprocessor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "70133363edf07496c808e49d0ad97810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3995, "upload_time": "2020-04-26T17:04:44", "upload_time_iso_8601": "2020-04-26T17:04:44.959100Z", "url": "https://files.pythonhosted.org/packages/62/70/eed8b9653afeb573e435accd98e0da05ecfe7d174da8a45c6ae9c970eea1/subprocessor-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "93eddec73bcaf6a1be0342f5df73695f", "sha256": "63e72999662c9900faffc12b7da15b8398ffb20adb16055a350313bb64472913"}, "downloads": -1, "filename": "subprocessor-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "93eddec73bcaf6a1be0342f5df73695f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5261, "upload_time": "2020-04-26T17:04:43", "upload_time_iso_8601": "2020-04-26T17:04:43.414045Z", "url": "https://files.pythonhosted.org/packages/1e/e5/78cad2672003931d3b302d6a0aa28f011ba44779f6986083d63ed3524fcd/subprocessor-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70133363edf07496c808e49d0ad97810", "sha256": "ce1c3b6b0b67a110ec3117e03f30f916d58eebeb62d5afee9ed3812395cd239b"}, "downloads": -1, "filename": "subprocessor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "70133363edf07496c808e49d0ad97810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3995, "upload_time": "2020-04-26T17:04:44", "upload_time_iso_8601": "2020-04-26T17:04:44.959100Z", "url": "https://files.pythonhosted.org/packages/62/70/eed8b9653afeb573e435accd98e0da05ecfe7d174da8a45c6ae9c970eea1/subprocessor-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:41 2020"}