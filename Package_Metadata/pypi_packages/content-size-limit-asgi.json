{"info": {"author": "Steinn Eldj\u00e1rn Sigur\u00f0arson", "author_email": "steinnes@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# content size limit\n\n[![CircleCI](https://circleci.com/gh/steinnes/content-size-limit-asgi.svg?style=svg)](https://circleci.com/gh/steinnes/content-size-limit-asgi)\n\nThis is a middleware for ASGI which intercepts the receive() method to raise\nan exception when the read bytes exceed the given limit.\n\n## Example\n\n```python\nimport uvicorn\n\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\n\nfrom content_size_limit_asgi import ContentSizeLimitMiddleware\n\n\napp = Starlette()\n\n@app.route(\"/\", methods=[\"POST\"])\nasync def index(request):\n    body = await request.body()\n    return PlainTextResponse(f\"body: {body.decode('utf-8')}\")\n\n\napp.add_middleware(ContentSizeLimitMiddleware, max_content_size=512)\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=6001, log_level='debug')\n```\n\nTo test the app:\n\n```\n$ curl --limit-rate 5k -q -v http://localhost:6001/ -d `printf 'A%.0s' {1..99999}`\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 6001 (#0)\n> POST / HTTP/1.1\n> Host: localhost:6001\n> User-Agent: curl/7.54.0\n> Accept: */*\n> Content-Length: 99999\n> Content-Type: application/x-www-form-urlencoded\n> Expect: 100-continue\n>\n< HTTP/1.1 100 Continue\n< HTTP/1.1 500 Internal Server Error\n< date: Wed, 12 Jun 2019 14:41:28 GMT\n< server: uvicorn\n< content-length: 21\n< content-type: text/plain; charset=utf-8\n* HTTP error before end of send, stop sending\n<\n* Closing connection 0\nInternal Server Error\n```\n\nThe app console log should read:\n```\n$ PYTHONPATH=. python tapp.py\nINFO: Started server process [48160]\nINFO: Waiting for application startup.\nDEBUG: None - ASGI [1] Started\nWARNING 2019-06-12 14:42:18,003 content_size_limit.middleware: ASGI scope of type lifespan is not supported yet\nWARNING: ASGI scope of type lifespan is not supported yet\nDEBUG: None - ASGI [1] Sent {'type': 'lifespan.startup'}\nDEBUG: None - ASGI [1] Received {'type': 'lifespan.startup.complete'}\nINFO: Uvicorn running on http://127.0.0.1:6001 (Press CTRL+C to quit)\nDEBUG: ('127.0.0.1', 52103) - Connected\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Started\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Sent {'type': 'http.request', 'body': '<16384 bytes>', 'more_body': True}\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Received {'type': 'http.response.start', 'status': 500, 'headers': '<...>'}\nINFO: ('127.0.0.1', 52103) - \"POST / HTTP/1.1\" 500\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Received {'type': 'http.response.body', 'body': '<21 bytes>'}\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Raised exception\nERROR: Exception in ASGI application\nTraceback (most recent call last):\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 368, in run_asgi\n    result = await app(self.scope, self.receive, self.send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py\", line 58, in __call__\n    raise exc from None\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py\", line 54, in __call__\n    await self.app(scope, inner_receive, inner_send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/applications.py\", line 133, in __call__\n    await self.error_middleware(scope, receive, send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 122, in __call__\n    raise exc from None\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 100, in __call__\n    await self.app(scope, receive, _send)\n  File \"/Users/ses/w/content-size-limit-asgi/content_size_limit/middleware.py\", line 48, in __call__\n    await self.app(scope, wrapper, send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/exceptions.py\", line 73, in __call__\n    raise exc from None\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/exceptions.py\", line 62, in __call__\n    await self.app(scope, receive, sender)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py\", line 585, in __call__\n    await route(scope, receive, send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py\", line 207, in __call__\n    await self.app(scope, receive, send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py\", line 40, in app\n    response = await func(request)\n  File \"tapp.py\", line 13, in index\n    body = await request.body()\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/requests.py\", line 167, in body\n    async for chunk in self.stream():\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/requests.py\", line 152, in stream\n    message = await self._receive()\n  File \"/Users/ses/w/content-size-limit-asgi/content_size_limit/middleware.py\", line 36, in inner\n    f\"Maximum content size limit ({self.max_content_size}) exceeded ({received} bytes read)\"\ncontent_size_limit.errors.ContentSizeExceeded: Maximum content size limit (512) exceeded (16384 bytes read)\nDEBUG: ('127.0.0.1', 52103) - Disconnected\n```\n\n## Why not just raise in the route / view functon itself?\n\nDepending on the ASGI server/framework used, you might not have access to\nthe raw stream to stop reading immediately once the maximum content size\nhas been exceeded.\n\nTake this Starlette view for example:\n\n\n```python\n\n@app.route(\"/documents/upload\", methods=[\"POST\"])\ndef upload_document(request):\n    data = await request.body()\n    if len(data) > Config.MAX_FILE_SIZE:\n        return api_400(\n            f\"This file exceeds the maximum file size we support at this time ({Config.MAX_FILE_SIZE})\",\n            code=MAX_FILE_SIZE_EXCEEDED,\n        )\n    ...\n```\n\nIf the maximum file size is 5MB, and the uploaded file was 50MB, then this\nimplementation reads the entire 50MB into memory before rejecting the\nrequest.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "Steinn Eldj\u00e1rn Sigur\u00f0arson", "maintainer_email": "steinnes@gmail.com", "name": "content-size-limit-asgi", "package_url": "https://pypi.org/project/content-size-limit-asgi/", "platform": "", "project_url": "https://pypi.org/project/content-size-limit-asgi/", "project_urls": null, "release_url": "https://pypi.org/project/content-size-limit-asgi/0.1.4/", "requires_dist": ["starlette (>=0.12.0,<0.13.0)"], "requires_python": ">=3.6,<4.0", "summary": "An ASGI3 middleware to implement maximum content size limits (mostly useful for HTTP uploads)", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>content size limit</h1>\n<p><a href=\"https://circleci.com/gh/steinnes/content-size-limit-asgi\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18dfe6e2bb73d562dca74b823de3dae8d8856488/68747470733a2f2f636972636c6563692e636f6d2f67682f737465696e6e65732f636f6e74656e742d73697a652d6c696d69742d617367692e7376673f7374796c653d737667\"></a></p>\n<p>This is a middleware for ASGI which intercepts the receive() method to raise\nan exception when the read bytes exceed the given limit.</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uvicorn</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">PlainTextResponse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">content_size_limit_asgi</span> <span class=\"kn\">import</span> <span class=\"n\">ContentSizeLimitMiddleware</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">])</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"body: </span><span class=\"si\">{</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_middleware</span><span class=\"p\">(</span><span class=\"n\">ContentSizeLimitMiddleware</span><span class=\"p\">,</span> <span class=\"n\">max_content_size</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">uvicorn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">6001</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"s1\">'debug'</span><span class=\"p\">)</span>\n</pre>\n<p>To test the app:</p>\n<pre><code>$ curl --limit-rate 5k -q -v http://localhost:6001/ -d `printf 'A%.0s' {1..99999}`\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 6001 (#0)\n&gt; POST / HTTP/1.1\n&gt; Host: localhost:6001\n&gt; User-Agent: curl/7.54.0\n&gt; Accept: */*\n&gt; Content-Length: 99999\n&gt; Content-Type: application/x-www-form-urlencoded\n&gt; Expect: 100-continue\n&gt;\n&lt; HTTP/1.1 100 Continue\n&lt; HTTP/1.1 500 Internal Server Error\n&lt; date: Wed, 12 Jun 2019 14:41:28 GMT\n&lt; server: uvicorn\n&lt; content-length: 21\n&lt; content-type: text/plain; charset=utf-8\n* HTTP error before end of send, stop sending\n&lt;\n* Closing connection 0\nInternal Server Error\n</code></pre>\n<p>The app console log should read:</p>\n<pre><code>$ PYTHONPATH=. python tapp.py\nINFO: Started server process [48160]\nINFO: Waiting for application startup.\nDEBUG: None - ASGI [1] Started\nWARNING 2019-06-12 14:42:18,003 content_size_limit.middleware: ASGI scope of type lifespan is not supported yet\nWARNING: ASGI scope of type lifespan is not supported yet\nDEBUG: None - ASGI [1] Sent {'type': 'lifespan.startup'}\nDEBUG: None - ASGI [1] Received {'type': 'lifespan.startup.complete'}\nINFO: Uvicorn running on http://127.0.0.1:6001 (Press CTRL+C to quit)\nDEBUG: ('127.0.0.1', 52103) - Connected\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Started\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Sent {'type': 'http.request', 'body': '&lt;16384 bytes&gt;', 'more_body': True}\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Received {'type': 'http.response.start', 'status': 500, 'headers': '&lt;...&gt;'}\nINFO: ('127.0.0.1', 52103) - \"POST / HTTP/1.1\" 500\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Received {'type': 'http.response.body', 'body': '&lt;21 bytes&gt;'}\nDEBUG: ('127.0.0.1', 52103) - ASGI [2] Raised exception\nERROR: Exception in ASGI application\nTraceback (most recent call last):\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 368, in run_asgi\n    result = await app(self.scope, self.receive, self.send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py\", line 58, in __call__\n    raise exc from None\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py\", line 54, in __call__\n    await self.app(scope, inner_receive, inner_send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/applications.py\", line 133, in __call__\n    await self.error_middleware(scope, receive, send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 122, in __call__\n    raise exc from None\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 100, in __call__\n    await self.app(scope, receive, _send)\n  File \"/Users/ses/w/content-size-limit-asgi/content_size_limit/middleware.py\", line 48, in __call__\n    await self.app(scope, wrapper, send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/exceptions.py\", line 73, in __call__\n    raise exc from None\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/exceptions.py\", line 62, in __call__\n    await self.app(scope, receive, sender)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py\", line 585, in __call__\n    await route(scope, receive, send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py\", line 207, in __call__\n    await self.app(scope, receive, send)\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/routing.py\", line 40, in app\n    response = await func(request)\n  File \"tapp.py\", line 13, in index\n    body = await request.body()\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/requests.py\", line 167, in body\n    async for chunk in self.stream():\n  File \"/Users/ses/.pyenv/versions/3.7.3/lib/python3.7/site-packages/starlette/requests.py\", line 152, in stream\n    message = await self._receive()\n  File \"/Users/ses/w/content-size-limit-asgi/content_size_limit/middleware.py\", line 36, in inner\n    f\"Maximum content size limit ({self.max_content_size}) exceeded ({received} bytes read)\"\ncontent_size_limit.errors.ContentSizeExceeded: Maximum content size limit (512) exceeded (16384 bytes read)\nDEBUG: ('127.0.0.1', 52103) - Disconnected\n</code></pre>\n<h2>Why not just raise in the route / view functon itself?</h2>\n<p>Depending on the ASGI server/framework used, you might not have access to\nthe raw stream to stop reading immediately once the maximum content size\nhas been exceeded.</p>\n<p>Take this Starlette view for example:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/documents/upload\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">upload_document</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">MAX_FILE_SIZE</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">api_400</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">\"This file exceeds the maximum file size we support at this time (</span><span class=\"si\">{</span><span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">MAX_FILE_SIZE</span><span class=\"si\">}</span><span class=\"s2\">)\"</span><span class=\"p\">,</span>\n            <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">MAX_FILE_SIZE_EXCEEDED</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>If the maximum file size is 5MB, and the uploaded file was 50MB, then this\nimplementation reads the entire 50MB into memory before rejecting the\nrequest.</p>\n\n          </div>"}, "last_serial": 6339538, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6d7e5bd54cbd178356258eb5a18fcad3", "sha256": "dea833fafe7d422848ba0ea473248115d2e238d59b1aefe9fee0277e90806279"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d7e5bd54cbd178356258eb5a18fcad3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 2834, "upload_time": "2019-06-12T16:18:02", "upload_time_iso_8601": "2019-06-12T16:18:02.684411Z", "url": "https://files.pythonhosted.org/packages/2a/2a/ab8c789bf5ca24d07fc334ad115748cc8b0b151c09ed0ea67c90b8c70991/content_size_limit_asgi-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a35482fa94b7761a68388755ef4f881d", "sha256": "95a1f94f0a1806028af03f52c39a1462e692fd8c03e802dab02b95b1d76aaaf0"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a35482fa94b7761a68388755ef4f881d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 1964, "upload_time": "2019-06-12T16:18:05", "upload_time_iso_8601": "2019-06-12T16:18:05.214107Z", "url": "https://files.pythonhosted.org/packages/69/24/43ceb3af60f9061cc13861e3d29f2fcb842c0313672b8b763d9efcbc47aa/content_size_limit_asgi-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4c14054346b3f452e7a2e8aa268d194c", "sha256": "618bbd034f3d26f776095fb2b9cf3e1a555ce1df95d36239297d46f2cd8921de"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4c14054346b3f452e7a2e8aa268d194c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 2848, "upload_time": "2019-06-12T17:35:43", "upload_time_iso_8601": "2019-06-12T17:35:43.602361Z", "url": "https://files.pythonhosted.org/packages/c3/21/ba54c234fd100582d0571e02a29dbda2017c928af9aa4de78b407793cbf7/content_size_limit_asgi-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "faef4022c2388c0d34774812c791f7da", "sha256": "284c8a855c3b2d6c0c7c5be23793bd91c473d10beaee0b72eefb88a4dc6e49dd"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "faef4022c2388c0d34774812c791f7da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 1989, "upload_time": "2019-06-12T17:35:45", "upload_time_iso_8601": "2019-06-12T17:35:45.103697Z", "url": "https://files.pythonhosted.org/packages/e6/0e/c35b122d205136e880c614c80052e29440336364a8f93ce5cd652f9d6562/content_size_limit_asgi-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "559ec53ddd66e91d22ab9c4c24d1b29f", "sha256": "e0ac94d62eb2923dd008ea4c6b9ecad9f91c32afcaf6294afb18bf6f4a88bea0"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "559ec53ddd66e91d22ab9c4c24d1b29f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4867, "upload_time": "2019-06-13T12:42:20", "upload_time_iso_8601": "2019-06-13T12:42:20.759503Z", "url": "https://files.pythonhosted.org/packages/5c/3b/0366bfa8cf938b88ce79538abeb703877b29a1638ef1f1bc26211fe0a8ea/content_size_limit_asgi-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97dd28b1e5fd5b02612d37f5c905b475", "sha256": "55134c1c1e5dc95d5409ee33d219e3756da6b50bb111c3c91a9b0571e21e707c"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.2.tar.gz", "has_sig": false, "md5_digest": "97dd28b1e5fd5b02612d37f5c905b475", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4723, "upload_time": "2019-06-13T12:42:22", "upload_time_iso_8601": "2019-06-13T12:42:22.331645Z", "url": "https://files.pythonhosted.org/packages/3e/c7/29019321d54b18624859c597cd39b5fca40c12f3fd74122f473b79b10117/content_size_limit_asgi-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c55a78c54f494df6110fc1d3c84eba4e", "sha256": "15ddd31506816c7fb3076d6ad971622900085d6b9e64eb3fdc034e17c0f4a265"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c55a78c54f494df6110fc1d3c84eba4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4854, "upload_time": "2019-12-20T14:55:09", "upload_time_iso_8601": "2019-12-20T14:55:09.586868Z", "url": "https://files.pythonhosted.org/packages/46/21/b809abb1e912e6b838dbf0bb42b23db02880644985f6f769d2d349b08386/content_size_limit_asgi-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12ed1035234b2a6c7e976a59b3b42554", "sha256": "75fe3444fb436eb4b7ac50b729af5dbf23a4418b90eeabb379fcb267f8332480"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.3.tar.gz", "has_sig": false, "md5_digest": "12ed1035234b2a6c7e976a59b3b42554", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4749, "upload_time": "2019-12-20T14:55:11", "upload_time_iso_8601": "2019-12-20T14:55:11.157971Z", "url": "https://files.pythonhosted.org/packages/8b/07/229f26f642a5520fac00ef3b41d1ee80d067372766f55d79a000f0e5d9e0/content_size_limit_asgi-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "8369d140ce2697be1ec4006da1bc2527", "sha256": "3c1b5290fcb774402532e7c22ff755d505078ae5b88ae1e185f687d0e56e3ba3"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8369d140ce2697be1ec4006da1bc2527", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4831, "upload_time": "2019-12-20T15:02:03", "upload_time_iso_8601": "2019-12-20T15:02:03.905173Z", "url": "https://files.pythonhosted.org/packages/a2/63/f901046165fa6781d1c2a3a5d4132213d0a3475c0b0aa0372dc66eaf8991/content_size_limit_asgi-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44b75d10df82c5738dafc69336324a0c", "sha256": "9d96cf3aeea3062c7026b72f9dce686bc4ee7806a5b2c4dfe354750559b83706"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.4.tar.gz", "has_sig": false, "md5_digest": "44b75d10df82c5738dafc69336324a0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4728, "upload_time": "2019-12-20T15:02:05", "upload_time_iso_8601": "2019-12-20T15:02:05.978898Z", "url": "https://files.pythonhosted.org/packages/74/7e/c6266430042831ef39407f8027838b56cf743049f8c501a2b1f3ed3fbd7f/content_size_limit_asgi-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8369d140ce2697be1ec4006da1bc2527", "sha256": "3c1b5290fcb774402532e7c22ff755d505078ae5b88ae1e185f687d0e56e3ba3"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8369d140ce2697be1ec4006da1bc2527", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4831, "upload_time": "2019-12-20T15:02:03", "upload_time_iso_8601": "2019-12-20T15:02:03.905173Z", "url": "https://files.pythonhosted.org/packages/a2/63/f901046165fa6781d1c2a3a5d4132213d0a3475c0b0aa0372dc66eaf8991/content_size_limit_asgi-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44b75d10df82c5738dafc69336324a0c", "sha256": "9d96cf3aeea3062c7026b72f9dce686bc4ee7806a5b2c4dfe354750559b83706"}, "downloads": -1, "filename": "content_size_limit_asgi-0.1.4.tar.gz", "has_sig": false, "md5_digest": "44b75d10df82c5738dafc69336324a0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4728, "upload_time": "2019-12-20T15:02:05", "upload_time_iso_8601": "2019-12-20T15:02:05.978898Z", "url": "https://files.pythonhosted.org/packages/74/7e/c6266430042831ef39407f8027838b56cf743049f8c501a2b1f3ed3fbd7f/content_size_limit_asgi-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:34 2020"}