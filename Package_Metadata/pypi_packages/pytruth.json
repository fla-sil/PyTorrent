{"info": {"author": "Gregory Kwok", "author_email": "gkwok@google.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Software Development :: Testing :: Mocking", "Topic :: Software Development :: Testing :: Unit"], "description": "<!---\nCopyright 2017 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n--->\n\n# PyTruth: Truth in Python\n\n[![Development Status][development-shield]][development-link]\n[![Build Status][travis-shield]][travis-link]\n[![PyPI Version][pypi-shield]][pypi-link]\n[![Python Versions][pyversions-shield]][pyversions-link]\n\nProvides unittest assertions in a fluent style.\nTranslated from the Java implementation,\n[google/truth](https://github.com/google/truth).\n\n## License\n\nPyTruth is licensed under the [Apache 2.0 license](LICENSE).\n\n## Disclaimer\n\nPyTruth is not an official Google product.\n\n## Contributing\n\nPlease see the [guidelines for contributing](CONTRIBUTING.md)\nbefore creating pull requests.\n\n## Support\n\nPyTruth is not an actively maintained project. No support is provided.\n\nIt is shared with the community to bring an expressive, consistent assertion\nstyle to projects that may be using a combination of\n[unittest](https://docs.python.org/3/library/unittest.html),\n[abseil](https://github.com/abseil/abseil-py),\n[googletest](https://github.com/google/googletest),\n[mox](https://pypi.python.org/pypi/mox), and\n[mock](https://docs.python.org/3/library/unittest.mock.html)&mdash;especially\nto people familiar with [Java Truth](https://github.com/google/truth).\n\nUser group:\n[pytruth-users@googlegroups.com](https://groups.google.com/d/forum/pytruth-users)\n\n### Installing\n\nPyTruth can be installed using [pip](https://pypi.org/project/pip/):\n\n```bash\npip install pytruth\n```\n\n## Overview\n\nImport the `truth` module and alias the `AssertThat()` method to begin asserting\nthings:\n\n```python\nfrom truth.truth import AssertThat\n```\n\nThen, instead of writing\n\n```python\nself.assertEqual(a, b)\nself.assertTrue(c)\nself.assertIn(a, d)\nself.assertTrue(a in d and b in d)\nself.assertTrue(a in d or b in d or c in d)\nwith self.assertRaises(Error):\n  Explode()\n```\n\none would write\n\n```python\nAssertThat(a).IsEqualTo(b)\nAssertThat(c).IsTrue()\nAssertThat(d).Contains(a)\nAssertThat(d).ContainsAllOf(a, b)\nAssertThat(d).ContainsAnyOf(a, b, c)\nwith AssertThat(Error).IsRaised():\n  Explode()\n```\n\nTests should be easier to read and write, and flow more clearly.\n\n## Limitations\n\nunittest assertions accept a `msg` parameter to display if the assertion fails.\nPyTruth has no such mechanism, though its failure messages tend to be more\ninformative.\n\nThe type of the subject under test (the parameter passed to `AssertThat()`) will\nnot be known until runtime, unlike Java where the type is known at compile time.\nIDEs may not correctly autocomplete available predicates on an asserted subject.\n\nIn Python 2, `None` compares less than every other thing, except `None` itself.\n`None` is less than `nan`, and it is less than negative infinity. Therefore, use\ncaution when a function might return `None`. The assertion\n`AssertThat(Func()).IsLessThan(0)` succeeds whether `Func()` returns a negative\nnumber or `None`. Instead, first check the `None`-ness of the return value with\n`IsNone()` or `IsNotNone()` before performing an inequality assertion.\n\nIn Python 3, `None` is no longer comparable using `<` `>` `<=` `>=`.\nPyTruth detects the version of the Python interpreter and compares or fails\nappropriately, rather than allowing Python 3's `TypeError` to bubble up.\n\nIf the iterator over a shared value (either expected or actual) changes that\nvalue or its underlying elements, the behavior is undefined:\nall, none, or some of the assertions may succeed or fail, arbitrarily.\n\nThis library is threadsafe; you may execute multiple assertions in parallel.\n\n## Conversion Recipes\n\n### General\nunittest                     | PyTruth\n-----------------------------|----------------------------------------\n`assertEqual(a, b)`          | `AssertThat(a).IsEqualTo(b)`\n`assertNotEqual(a, b)`       | `AssertThat(a).IsNotEqualTo(b)`\n`assertTrue(a)`              | `AssertThat(a).IsTruthy()`\n`assertFalse(a)`             | `AssertThat(a).IsFalsy()`\n`assertIs(a, True)`          | `AssertThat(a).IsTrue()`\n`assertIs(a, False)`         | `AssertThat(a).IsFalse()`\n`assertIs(a, b)`             | `AssertThat(a).IsSameAs(b)`\n`assertIsNot(a, b)`          | `AssertThat(a).IsNotSameAs(b)`\n`assertIsNone(a)`            | `AssertThat(a).IsNone()`\n`assertIsNotNone(a)`         | `AssertThat(a).IsNotNone()`\n`assertIn(a, b)`             | `AssertThat(a).IsIn(b)`\n`assertIn(a, [b, c, d])`     | `AssertThat(a).IsAnyOf(b, c, d)`\n`assertNotIn(a, b)`          | `AssertThat(a).IsNotIn(b)`\n`assertNotIn(a, [b, c, d])`  | `AssertThat(a).IsNoneOf(b, c, d)`\n`assertIsInstance(a, b)`     | `AssertThat(a).IsInstanceOf(b)`\n`assertIsNotInstance(a, b)`  | `AssertThat(a).IsNotInstanceOf(b)`\n`assertTrue(hasattr(a, b))`  | `AssertThat(a).HasAttribute(b)`\n`assertFalse(hasattr(a, b))` | `AssertThat(a).DoesNotHaveAttribute(b)`\n`assertTrue(callable(a))`    | `AssertThat(a).IsCallable()`\n`assertFalse(callable(a))`   | `AssertThat(a).IsNotCallable()`\n\n#### Truthiness\n\nPyTruth supports a finer grained distinction of truthiness than unittest does.\nIn particular, it differentiates between \"is `True`\" and \"is *truthy*.\"\nunittest's `assertTrue(x)` is equivalent to `assertIs(bool(x), True)`,\nand its `assertFalse(x)` is equivalent to `assertIs(bool(x), False)`.\nPyTruth's `IsTrue()` and `IsFalse()` predicates match *only* the boolean\nsubjects `True` and `False` themselves.\nTherefore it is important not to blindly convert `assertTrue()` to `IsTrue()`,\nand likewise with `assertFalse()` and `IsFalse()`.\n\nTruthy assertion              | Result   | Falsy assertion               | Result\n------------------------------|----------|-------------------------------|---------\n`assertTrue(True)`            | succeeds | `assertFalse(False)`          | succeeds\n`assertTrue(1)`               | succeeds | `assertFalse(0)`              | succeeds\n`assertTrue(None)`            | fails    | `assertFalse(None)`           | succeeds\n`AssertThat(True).IsTrue()`   | succeeds | `AssertThat(False).IsFalse()` | succeeds\n`AssertThat(1).IsTrue()`      | fails    | `AssertThat(0).IsFalse()`     | fails\n`AssertThat(None).IsTrue()`   | fails    | `AssertThat(None).IsFalse()`  | fails\n`AssertThat(True).IsTruthy()` | succeeds | `AssertThat(False).IsFalsy()` | succeeds\n`AssertThat(1).IsTruthy()`    | succeeds | `AssertThat(0).IsFalsy()`     | succeeds\n`AssertThat(None).IsTruthy()` | fails    | `AssertThat(None).IsFalsy()`  | succeeds\n\n### Strings\nunittest                                                       | PyTruth\n---------------------------------------------------------------|---------------------------------------\n`assertEqual(len(s), n)`                                       | `AssertThat(s).HasLength(n)`\n`assertTrue(s.startswith('a'))`                                | `AssertThat(s).StartsWith('a')`\n`assertTrue(s.endswith('a'))`                                  | `AssertThat(s).EndsWith('a')`\n`assertRegex(s, r)`<br>`assertRegexpMatches(s, r)`             | `AssertThat(s).ContainsMatch(r)`\n`assertNotRegex(s, r)`<br>`assertNotRegexpMatches(s, r)`       | `AssertThat(s).DoesNotContainMatch(r)`\n`assertRegex(s, '^r')`<br>`assertRegexpMatches(s, '^r')`       | `AssertThat(s).Matches('r')`\n`assertNotRegex(s, '^r')`<br>`assertNotRegexpMatches(s, '^r')` | `AssertThat(s).DoesNotMatch('r')`\n\n#### Matching strings\n\nThe `r` parameter passed to the matching functions may either be a\n`r'raw string'`, or a pattern object returned from `re.compile()`.\n\n### Numbers, strings, and other comparable things\nunittest                   | PyTruth\n---------------------------|---------------------------------\n`assertLess(a, b)`         | `AssertThat(a).IsLessThan(b)`\n`assertGreater(a, b)`      | `AssertThat(a).IsGreaterThan(b)`\n`assertLessEqual(a, b)`    | `AssertThat(a).IsAtMost(b)`\n`assertGreaterEqual(a, b)` | `AssertThat(a).IsAtLeast(b)`\n\n### Numbers\nunittest                              | PyTruth\n--------------------------------------|-------------------------------------\n`assertEqual(a, 0)`                   | `AssertThat(a).IsZero()`\n`assertNotEqual(a, 0)`                | `AssertThat(a).IsNonZero()`\n`assertEqual(a, float('inf'))`        | `AssertThat(a).IsPositiveInfinity()`\n`assertEqual(a, float('-inf'))`       | `AssertThat(a).IsNegativeInfinity()`\n`assertFalse(a.isinf() or a.isnan())` | `AssertThat(a).IsFinite()`\n`assertTrue(a.isinf() or a.isnan())`  | `AssertThat(a).IsNotFinite()`\n`assertTrue(a.isnan())`               | `AssertThat(a).IsNan()`\n`assertFalse(a.isnan())`              | `AssertThat(a).IsNotNan()`\n`assertAlmostEqual(a, b, delta=d)`    | `AssertThat(a).IsWithin(d).Of(b)`\n`assertNotAlmostEqual(a, b, delta=d)` | `AssertThat(a).IsNotWithin(d).Of(b)`\n\n### Lists, strings, and other iterables\nunittest                        | PyTruth\n--------------------------------|---------------------------------------------\n`assertEqual(len(a), n)`        | `AssertThat(a).HasSize(n)`\n`assertEqual(len(a), 0)`        | `AssertThat(a).IsEmpty()`\n`assertGreaterThan(len(a), 0)`  | `AssertThat(a).IsNotEmpty()`\n`assertIn(b, a)`                | `AssertThat(a).Contains(b)`\n`assertNotIn(b, a)`             | `AssertThat(a).DoesNotContain(b)`\n`assertTrue(b in a and c in a)` | `AssertThat(a).ContainsAllOf(b, c)`<br>`AssertThat(a).ContainsAllIn([b, c])`\n`assertTrue(b in a or c in a)`  | `AssertThat(a).ContainsAnyOf(b, c)`<br>`AssertThat(a).ContainsAnyIn([b, c])`\n`assertTrue(b in a and c in a and len(a) == 2)`      | `AssertThat(a).ContainsExactly(b, c)`\n`assertCountEqual(a, b)`<br>`assertItemsEqual(a, b)` | `AssertThat(sorted(a)).ContainsExactlyElementsIn(sorted(b)).InOrder()`\n`assertTrue(b not in a and c not in a)`              | `AssertThat(a).ContainsNoneOf(b, c)`<br>`AssertThat(a).ContainsNoneIn([b, c])`\nN/A                             | `AssertThat(a).ContainsNoDuplicates()`\nN/A                             | `AssertThat(a).IsOrdered()`\nN/A                             | `AssertThat(a).IsOrderedAccordingTo(cf)`\nN/A                             | `AssertThat(a).IsStrictlyOrdered()`\nN/A                             | `AssertThat(a).IsStrictlyOrderedAccordingTo(cf)`\n\nabsltest                        | PyTruth\n--------------------------------|---------------------------------------------\n`assertLen(a, n)`               | `AssertThat(a).HasSize(n)`\n`assertEmpty(a)`                | `AssertThat(a).IsEmpty()`\n`assertNotEmpty(a)`             | `AssertThat(a).IsNotEmpty()`\n\n#### Defining order\n\nThe `cf` parameter passed to `IsOrderedAccordingTo()` and\n`IsStrictlyOrderedAccordingTo()` should be a callable that follows the contract\nof `cmp(x, y)`: it should return negative if x < y, zero if x == y,\nand positive if x > y.\n\n*Ordered* means that the iterable's elements must increase (or decrease,\ndepending on `cf`) from beginning to end. Adjacent elements are allowed to be\nequal. *Strictly ordered* means that in addition, the elements must be unique\n(*i.e.*, monotonically increasing or decreasing).\n\n`IsOrdered()` is equivalent to `IsOrderedAccordingTo(cmp)`.\n\n`IsStrictlyOrdered()` is equivalent to `IsStrictlyOrderedAccordingTo(cmp)`.\n\n#### Asserting order\n\nBy default, `ContainsAll...` and `ContainsExactly...` do not enforce that the\norder of the elements in the subject under test matches the that of the expected\nvalue. To do that, append `InOrder()` to the returned predicate.\n\nContainment assertion                                      | Result\n-----------------------------------------------------------|---------\n`AssertThat([2, 4, 6]).ContainsAllOf(6, 2)`                | succeeds\n`AssertThat([2, 4, 6]).ContainsAllOf(6, 2).InOrder()`      | fails\n`AssertThat([2, 4, 6]).ContainsAllOf(2, 6).InOrder()`      | succeeds\n`AssertThat([2, 4, 6]).ContainsExactly(2, 6, 4)`           | succeeds\n`AssertThat([2, 4, 6]).ContainsExactly(2, 6, 4).InOrder()` | fails\n`AssertThat([2, 4, 6]).ContainsExactly(2, 4, 6).InOrder()` | succeeds\n\nWhen using `InOrder()`, ensure that both the subject under test and the expected\nvalue have a predictable order, otherwise the result is undefined. For example,\n`AssertThat(list_a).ContainsExactlyElementsIn(set_a).InOrder()`\nmay or may not succeed, depending on how the `set` implements ordering.\n\n### Dictionaries, in addition to the table above\nunittest                           | PyTruth\n-----------------------------------|------------------------------------------------\n`assertIn(k, d)`                   | `AssertThat(d).ContainsKey(k)`\n`assertNotIn(k, d)`                | `AssertThat(d).DoesNotContainKey(k)`\n`assertIn((k, v), d.items())`      | `AssertThat(d).ContainsItem(k, v)`\n`assertNotIn((k, v), d.items())`   | `AssertThat(d).DoesNotContainItem(k, v)`\n`assertEqual(d, {k1: v1, k2: v2})` | `AssertThat(d).ContainsExactly(k1, v1, k2, v2)`\n`assertEqual(d1, d2)`              | `AssertThat(d1).ContainsExactlyItemsIn(d2)`\n`assertDictContainsSubset(d1, d2)` | `AssertThat(d1.items()).ContainsAllIn(d2.items())`\n\n### Exceptions\nunittest                                | PyTruth\n----------------------------------------|-------------------------------------------------\n`with assertRaises(e):`                 | `with AssertThat(e).IsRaised():`\n`with assertRaisesRegex(e, r):`         | `with AssertThat(e).IsRaised(matching=r):`\nN/A                                     | `with AssertThat(e).IsRaised(containing='a'):`\n`assertEqual(e.message, m)`             | `AssertThat(e).HasMessage(m)`\n`assertTrue(e.message.startswith('a'))` | `AssertThat(e).HasMessageThat().StartsWith('a')`\n`assertIn(a, e.args)`                   | `AssertThat(e).HasArgsThat().Contains(a)`\n\n#### Matching raised exceptions\n\nWhen expecting an exception using the `AssertThat(e).IsRaised()` context, any\nexception raised whose type is equal to `e` or a subclass of `e` is accepted.\nIf an exception is raised that is not a subclass of `e`, the assertion fails.\n\nThe `e` parameter in the `AssertThat(e).IsRaised()` context may be either an\nexception *class* like `ValueError`, or it may be an exception *instance* like\n`ValueError('some error')`. If an instance is passed, then any exception raised\nby the code under test must also have matching `message` and `args` properties,\nin addition to being a subclass of the expected exception.\n\n### Mocked functions\nunittest                                            | PyTruth\n----------------------------------------------------|-------------------------------------------------\n`m.assert_called()`                                 | `AssertThat(m).WasCalled()`\n`m.assert_not_called()`                             | `AssertThat(m).WasNotCalled()`\n`m.assert_called_once()`                            | `AssertThat(m).WasCalled().Once()`\n`assertEqual(m.call_count, n)`                      | `AssertThat(m).WasCalled().Times(n)`\n`m.assert_called_with(*a, **k)`                     | `AssertThat(m).WasCalled().LastWith(*a, **k)`\n`m.assert_called_once_with(*a, **k)`                | `AssertThat(m).WasCalled().Once().With(*a, **k)`\nN/A                                                 | `AssertThat(m).WasCalled().With(*a, **k).Once()`\n`m.assert_has_calls(calls,`&nbsp;`any_order=True)`  | `AssertThat(m).HasCalls(calls)`\n`m.assert_has_calls(calls,`&nbsp;`any_order=False)` | `AssertThat(m).HasCalls(calls).InOrder()`\nN/A                                                 | `AssertThat(m).HasExactlyCalls(c1, c2)`\nN/A                                                 | `AssertThat(m).HasExactlyCalls(c1, c2).InOrder()`\n`m.assert_any_call(*a, **k)`                        | `AssertThat(m).WasCalled().With(*a, **k)`\n\n#### Being called once, with arguments\n\nThe `WasCalled().Once().With(...)` and `WasCalled().With(...).Once()` assertions\nare subtly different. `WasCalled().Once().With(...)` asserts that the function\nwas called one time ever, and that one time it was called, it was passed those\narguments. `WasCalled().With(...).Once()` asserts that the function was passed\nthose arguments exactly once, but it is permitted to have been called with\nother, irrelevant arguments. Thus, `WasCalled().Once().With(...)` is the\nstricter assertion. Consider using `HasExactlyCalls()` for more clarity.\n\n### Classes\nunittest                      | PyTruth\n------------------------------|--------------------------------\n`assertTrue(a.issubclass(b))` | `AssertThat(a).IsSubclassOf(b)`\n\n<!-- references -->\n\n[development-shield]: https://img.shields.io/pypi/status/pytruth.svg\n[development-link]: https://pypi.org/project/pytruth\n[travis-shield]: https://travis-ci.org/google/pytruth.svg?branch=master\n[travis-link]: https://travis-ci.org/google/pytruth\n[pypi-shield]: https://badge.fury.io/py/pytruth.svg\n[pypi-link]: https://pypi.org/project/pytruth\n[pyversions-shield]: https://img.shields.io/pypi/pyversions/pytruth.svg\n[pyversions-link]: https://github.com/google/pytruth\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/google/pytruth", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pytruth", "package_url": "https://pypi.org/project/pytruth/", "platform": "", "project_url": "https://pypi.org/project/pytruth/", "project_urls": {"Bug Reports": "https://groups.google.com/d/forum/pytruth-users", "Homepage": "https://github.com/google/pytruth", "Source": "https://github.com/google/pytruth"}, "release_url": "https://pypi.org/project/pytruth/1.1.0/", "requires_dist": ["six", "wheel"], "requires_python": "", "summary": "Provides unittest assertions in a fluent style.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTruth: Truth in Python</h1>\n<p><a href=\"https://pypi.org/project/pytruth\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e28d0a0f50207b13a3336223a6780acc54bdb74/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f707974727574682e737667\"></a>\n<a href=\"https://travis-ci.org/google/pytruth\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfe6ea7312dff3c7f312a43978e226cb3a5c3c08/68747470733a2f2f7472617669732d63692e6f72672f676f6f676c652f707974727574682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/pytruth\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5af9f91b3817936093a33b2357a66bd7f1b3fe62/68747470733a2f2f62616467652e667572792e696f2f70792f707974727574682e737667\"></a>\n<a href=\"https://github.com/google/pytruth\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3591f2fc1898d5d9944c76e26d900beac85f4984/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707974727574682e737667\"></a></p>\n<p>Provides unittest assertions in a fluent style.\nTranslated from the Java implementation,\n<a href=\"https://github.com/google/truth\" rel=\"nofollow\">google/truth</a>.</p>\n<h2>License</h2>\n<p>PyTruth is licensed under the <a href=\"LICENSE\" rel=\"nofollow\">Apache 2.0 license</a>.</p>\n<h2>Disclaimer</h2>\n<p>PyTruth is not an official Google product.</p>\n<h2>Contributing</h2>\n<p>Please see the <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">guidelines for contributing</a>\nbefore creating pull requests.</p>\n<h2>Support</h2>\n<p>PyTruth is not an actively maintained project. No support is provided.</p>\n<p>It is shared with the community to bring an expressive, consistent assertion\nstyle to projects that may be using a combination of\n<a href=\"https://docs.python.org/3/library/unittest.html\" rel=\"nofollow\">unittest</a>,\n<a href=\"https://github.com/abseil/abseil-py\" rel=\"nofollow\">abseil</a>,\n<a href=\"https://github.com/google/googletest\" rel=\"nofollow\">googletest</a>,\n<a href=\"https://pypi.python.org/pypi/mox\" rel=\"nofollow\">mox</a>, and\n<a href=\"https://docs.python.org/3/library/unittest.mock.html\" rel=\"nofollow\">mock</a>\u2014especially\nto people familiar with <a href=\"https://github.com/google/truth\" rel=\"nofollow\">Java Truth</a>.</p>\n<p>User group:\n<a href=\"https://groups.google.com/d/forum/pytruth-users\" rel=\"nofollow\">pytruth-users@googlegroups.com</a></p>\n<h3>Installing</h3>\n<p>PyTruth can be installed using <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install pytruth\n</pre>\n<h2>Overview</h2>\n<p>Import the <code>truth</code> module and alias the <code>AssertThat()</code> method to begin asserting\nthings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">truth.truth</span> <span class=\"kn\">import</span> <span class=\"n\">AssertThat</span>\n</pre>\n<p>Then, instead of writing</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">d</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">d</span> <span class=\"ow\">or</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">d</span> <span class=\"ow\">or</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertRaises</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n  <span class=\"n\">Explode</span><span class=\"p\">()</span>\n</pre>\n<p>one would write</p>\n<pre><span class=\"n\">AssertThat</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">IsEqualTo</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">AssertThat</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">IsTrue</span><span class=\"p\">()</span>\n<span class=\"n\">AssertThat</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Contains</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">AssertThat</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ContainsAllOf</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">AssertThat</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ContainsAnyOf</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">AssertThat</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">IsRaised</span><span class=\"p\">():</span>\n  <span class=\"n\">Explode</span><span class=\"p\">()</span>\n</pre>\n<p>Tests should be easier to read and write, and flow more clearly.</p>\n<h2>Limitations</h2>\n<p>unittest assertions accept a <code>msg</code> parameter to display if the assertion fails.\nPyTruth has no such mechanism, though its failure messages tend to be more\ninformative.</p>\n<p>The type of the subject under test (the parameter passed to <code>AssertThat()</code>) will\nnot be known until runtime, unlike Java where the type is known at compile time.\nIDEs may not correctly autocomplete available predicates on an asserted subject.</p>\n<p>In Python 2, <code>None</code> compares less than every other thing, except <code>None</code> itself.\n<code>None</code> is less than <code>nan</code>, and it is less than negative infinity. Therefore, use\ncaution when a function might return <code>None</code>. The assertion\n<code>AssertThat(Func()).IsLessThan(0)</code> succeeds whether <code>Func()</code> returns a negative\nnumber or <code>None</code>. Instead, first check the <code>None</code>-ness of the return value with\n<code>IsNone()</code> or <code>IsNotNone()</code> before performing an inequality assertion.</p>\n<p>In Python 3, <code>None</code> is no longer comparable using <code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code>.\nPyTruth detects the version of the Python interpreter and compares or fails\nappropriately, rather than allowing Python 3's <code>TypeError</code> to bubble up.</p>\n<p>If the iterator over a shared value (either expected or actual) changes that\nvalue or its underlying elements, the behavior is undefined:\nall, none, or some of the assertions may succeed or fail, arbitrarily.</p>\n<p>This library is threadsafe; you may execute multiple assertions in parallel.</p>\n<h2>Conversion Recipes</h2>\n<h3>General</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertEqual(a, b)</code></td>\n<td><code>AssertThat(a).IsEqualTo(b)</code></td>\n</tr>\n<tr>\n<td><code>assertNotEqual(a, b)</code></td>\n<td><code>AssertThat(a).IsNotEqualTo(b)</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(a)</code></td>\n<td><code>AssertThat(a).IsTruthy()</code></td>\n</tr>\n<tr>\n<td><code>assertFalse(a)</code></td>\n<td><code>AssertThat(a).IsFalsy()</code></td>\n</tr>\n<tr>\n<td><code>assertIs(a, True)</code></td>\n<td><code>AssertThat(a).IsTrue()</code></td>\n</tr>\n<tr>\n<td><code>assertIs(a, False)</code></td>\n<td><code>AssertThat(a).IsFalse()</code></td>\n</tr>\n<tr>\n<td><code>assertIs(a, b)</code></td>\n<td><code>AssertThat(a).IsSameAs(b)</code></td>\n</tr>\n<tr>\n<td><code>assertIsNot(a, b)</code></td>\n<td><code>AssertThat(a).IsNotSameAs(b)</code></td>\n</tr>\n<tr>\n<td><code>assertIsNone(a)</code></td>\n<td><code>AssertThat(a).IsNone()</code></td>\n</tr>\n<tr>\n<td><code>assertIsNotNone(a)</code></td>\n<td><code>AssertThat(a).IsNotNone()</code></td>\n</tr>\n<tr>\n<td><code>assertIn(a, b)</code></td>\n<td><code>AssertThat(a).IsIn(b)</code></td>\n</tr>\n<tr>\n<td><code>assertIn(a, [b, c, d])</code></td>\n<td><code>AssertThat(a).IsAnyOf(b, c, d)</code></td>\n</tr>\n<tr>\n<td><code>assertNotIn(a, b)</code></td>\n<td><code>AssertThat(a).IsNotIn(b)</code></td>\n</tr>\n<tr>\n<td><code>assertNotIn(a, [b, c, d])</code></td>\n<td><code>AssertThat(a).IsNoneOf(b, c, d)</code></td>\n</tr>\n<tr>\n<td><code>assertIsInstance(a, b)</code></td>\n<td><code>AssertThat(a).IsInstanceOf(b)</code></td>\n</tr>\n<tr>\n<td><code>assertIsNotInstance(a, b)</code></td>\n<td><code>AssertThat(a).IsNotInstanceOf(b)</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(hasattr(a, b))</code></td>\n<td><code>AssertThat(a).HasAttribute(b)</code></td>\n</tr>\n<tr>\n<td><code>assertFalse(hasattr(a, b))</code></td>\n<td><code>AssertThat(a).DoesNotHaveAttribute(b)</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(callable(a))</code></td>\n<td><code>AssertThat(a).IsCallable()</code></td>\n</tr>\n<tr>\n<td><code>assertFalse(callable(a))</code></td>\n<td><code>AssertThat(a).IsNotCallable()</code></td>\n</tr></tbody></table>\n<h4>Truthiness</h4>\n<p>PyTruth supports a finer grained distinction of truthiness than unittest does.\nIn particular, it differentiates between \"is <code>True</code>\" and \"is <em>truthy</em>.\"\nunittest's <code>assertTrue(x)</code> is equivalent to <code>assertIs(bool(x), True)</code>,\nand its <code>assertFalse(x)</code> is equivalent to <code>assertIs(bool(x), False)</code>.\nPyTruth's <code>IsTrue()</code> and <code>IsFalse()</code> predicates match <em>only</em> the boolean\nsubjects <code>True</code> and <code>False</code> themselves.\nTherefore it is important not to blindly convert <code>assertTrue()</code> to <code>IsTrue()</code>,\nand likewise with <code>assertFalse()</code> and <code>IsFalse()</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Truthy assertion</th>\n<th>Result</th>\n<th>Falsy assertion</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertTrue(True)</code></td>\n<td>succeeds</td>\n<td><code>assertFalse(False)</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>assertTrue(1)</code></td>\n<td>succeeds</td>\n<td><code>assertFalse(0)</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>assertTrue(None)</code></td>\n<td>fails</td>\n<td><code>assertFalse(None)</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>AssertThat(True).IsTrue()</code></td>\n<td>succeeds</td>\n<td><code>AssertThat(False).IsFalse()</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>AssertThat(1).IsTrue()</code></td>\n<td>fails</td>\n<td><code>AssertThat(0).IsFalse()</code></td>\n<td>fails</td>\n</tr>\n<tr>\n<td><code>AssertThat(None).IsTrue()</code></td>\n<td>fails</td>\n<td><code>AssertThat(None).IsFalse()</code></td>\n<td>fails</td>\n</tr>\n<tr>\n<td><code>AssertThat(True).IsTruthy()</code></td>\n<td>succeeds</td>\n<td><code>AssertThat(False).IsFalsy()</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>AssertThat(1).IsTruthy()</code></td>\n<td>succeeds</td>\n<td><code>AssertThat(0).IsFalsy()</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>AssertThat(None).IsTruthy()</code></td>\n<td>fails</td>\n<td><code>AssertThat(None).IsFalsy()</code></td>\n<td>succeeds</td>\n</tr></tbody></table>\n<h3>Strings</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertEqual(len(s), n)</code></td>\n<td><code>AssertThat(s).HasLength(n)</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(s.startswith('a'))</code></td>\n<td><code>AssertThat(s).StartsWith('a')</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(s.endswith('a'))</code></td>\n<td><code>AssertThat(s).EndsWith('a')</code></td>\n</tr>\n<tr>\n<td><code>assertRegex(s, r)</code><br><code>assertRegexpMatches(s, r)</code></td>\n<td><code>AssertThat(s).ContainsMatch(r)</code></td>\n</tr>\n<tr>\n<td><code>assertNotRegex(s, r)</code><br><code>assertNotRegexpMatches(s, r)</code></td>\n<td><code>AssertThat(s).DoesNotContainMatch(r)</code></td>\n</tr>\n<tr>\n<td><code>assertRegex(s, '^r')</code><br><code>assertRegexpMatches(s, '^r')</code></td>\n<td><code>AssertThat(s).Matches('r')</code></td>\n</tr>\n<tr>\n<td><code>assertNotRegex(s, '^r')</code><br><code>assertNotRegexpMatches(s, '^r')</code></td>\n<td><code>AssertThat(s).DoesNotMatch('r')</code></td>\n</tr></tbody></table>\n<h4>Matching strings</h4>\n<p>The <code>r</code> parameter passed to the matching functions may either be a\n<code>r'raw string'</code>, or a pattern object returned from <code>re.compile()</code>.</p>\n<h3>Numbers, strings, and other comparable things</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertLess(a, b)</code></td>\n<td><code>AssertThat(a).IsLessThan(b)</code></td>\n</tr>\n<tr>\n<td><code>assertGreater(a, b)</code></td>\n<td><code>AssertThat(a).IsGreaterThan(b)</code></td>\n</tr>\n<tr>\n<td><code>assertLessEqual(a, b)</code></td>\n<td><code>AssertThat(a).IsAtMost(b)</code></td>\n</tr>\n<tr>\n<td><code>assertGreaterEqual(a, b)</code></td>\n<td><code>AssertThat(a).IsAtLeast(b)</code></td>\n</tr></tbody></table>\n<h3>Numbers</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertEqual(a, 0)</code></td>\n<td><code>AssertThat(a).IsZero()</code></td>\n</tr>\n<tr>\n<td><code>assertNotEqual(a, 0)</code></td>\n<td><code>AssertThat(a).IsNonZero()</code></td>\n</tr>\n<tr>\n<td><code>assertEqual(a, float('inf'))</code></td>\n<td><code>AssertThat(a).IsPositiveInfinity()</code></td>\n</tr>\n<tr>\n<td><code>assertEqual(a, float('-inf'))</code></td>\n<td><code>AssertThat(a).IsNegativeInfinity()</code></td>\n</tr>\n<tr>\n<td><code>assertFalse(a.isinf() or a.isnan())</code></td>\n<td><code>AssertThat(a).IsFinite()</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(a.isinf() or a.isnan())</code></td>\n<td><code>AssertThat(a).IsNotFinite()</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(a.isnan())</code></td>\n<td><code>AssertThat(a).IsNan()</code></td>\n</tr>\n<tr>\n<td><code>assertFalse(a.isnan())</code></td>\n<td><code>AssertThat(a).IsNotNan()</code></td>\n</tr>\n<tr>\n<td><code>assertAlmostEqual(a, b, delta=d)</code></td>\n<td><code>AssertThat(a).IsWithin(d).Of(b)</code></td>\n</tr>\n<tr>\n<td><code>assertNotAlmostEqual(a, b, delta=d)</code></td>\n<td><code>AssertThat(a).IsNotWithin(d).Of(b)</code></td>\n</tr></tbody></table>\n<h3>Lists, strings, and other iterables</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertEqual(len(a), n)</code></td>\n<td><code>AssertThat(a).HasSize(n)</code></td>\n</tr>\n<tr>\n<td><code>assertEqual(len(a), 0)</code></td>\n<td><code>AssertThat(a).IsEmpty()</code></td>\n</tr>\n<tr>\n<td><code>assertGreaterThan(len(a), 0)</code></td>\n<td><code>AssertThat(a).IsNotEmpty()</code></td>\n</tr>\n<tr>\n<td><code>assertIn(b, a)</code></td>\n<td><code>AssertThat(a).Contains(b)</code></td>\n</tr>\n<tr>\n<td><code>assertNotIn(b, a)</code></td>\n<td><code>AssertThat(a).DoesNotContain(b)</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(b in a and c in a)</code></td>\n<td><code>AssertThat(a).ContainsAllOf(b, c)</code><br><code>AssertThat(a).ContainsAllIn([b, c])</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(b in a or c in a)</code></td>\n<td><code>AssertThat(a).ContainsAnyOf(b, c)</code><br><code>AssertThat(a).ContainsAnyIn([b, c])</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(b in a and c in a and len(a) == 2)</code></td>\n<td><code>AssertThat(a).ContainsExactly(b, c)</code></td>\n</tr>\n<tr>\n<td><code>assertCountEqual(a, b)</code><br><code>assertItemsEqual(a, b)</code></td>\n<td><code>AssertThat(sorted(a)).ContainsExactlyElementsIn(sorted(b)).InOrder()</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(b not in a and c not in a)</code></td>\n<td><code>AssertThat(a).ContainsNoneOf(b, c)</code><br><code>AssertThat(a).ContainsNoneIn([b, c])</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>AssertThat(a).ContainsNoDuplicates()</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>AssertThat(a).IsOrdered()</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>AssertThat(a).IsOrderedAccordingTo(cf)</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>AssertThat(a).IsStrictlyOrdered()</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>AssertThat(a).IsStrictlyOrderedAccordingTo(cf)</code></td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>absltest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertLen(a, n)</code></td>\n<td><code>AssertThat(a).HasSize(n)</code></td>\n</tr>\n<tr>\n<td><code>assertEmpty(a)</code></td>\n<td><code>AssertThat(a).IsEmpty()</code></td>\n</tr>\n<tr>\n<td><code>assertNotEmpty(a)</code></td>\n<td><code>AssertThat(a).IsNotEmpty()</code></td>\n</tr></tbody></table>\n<h4>Defining order</h4>\n<p>The <code>cf</code> parameter passed to <code>IsOrderedAccordingTo()</code> and\n<code>IsStrictlyOrderedAccordingTo()</code> should be a callable that follows the contract\nof <code>cmp(x, y)</code>: it should return negative if x &lt; y, zero if x == y,\nand positive if x &gt; y.</p>\n<p><em>Ordered</em> means that the iterable's elements must increase (or decrease,\ndepending on <code>cf</code>) from beginning to end. Adjacent elements are allowed to be\nequal. <em>Strictly ordered</em> means that in addition, the elements must be unique\n(<em>i.e.</em>, monotonically increasing or decreasing).</p>\n<p><code>IsOrdered()</code> is equivalent to <code>IsOrderedAccordingTo(cmp)</code>.</p>\n<p><code>IsStrictlyOrdered()</code> is equivalent to <code>IsStrictlyOrderedAccordingTo(cmp)</code>.</p>\n<h4>Asserting order</h4>\n<p>By default, <code>ContainsAll...</code> and <code>ContainsExactly...</code> do not enforce that the\norder of the elements in the subject under test matches the that of the expected\nvalue. To do that, append <code>InOrder()</code> to the returned predicate.</p>\n<table>\n<thead>\n<tr>\n<th>Containment assertion</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>AssertThat([2, 4, 6]).ContainsAllOf(6, 2)</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>AssertThat([2, 4, 6]).ContainsAllOf(6, 2).InOrder()</code></td>\n<td>fails</td>\n</tr>\n<tr>\n<td><code>AssertThat([2, 4, 6]).ContainsAllOf(2, 6).InOrder()</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>AssertThat([2, 4, 6]).ContainsExactly(2, 6, 4)</code></td>\n<td>succeeds</td>\n</tr>\n<tr>\n<td><code>AssertThat([2, 4, 6]).ContainsExactly(2, 6, 4).InOrder()</code></td>\n<td>fails</td>\n</tr>\n<tr>\n<td><code>AssertThat([2, 4, 6]).ContainsExactly(2, 4, 6).InOrder()</code></td>\n<td>succeeds</td>\n</tr></tbody></table>\n<p>When using <code>InOrder()</code>, ensure that both the subject under test and the expected\nvalue have a predictable order, otherwise the result is undefined. For example,\n<code>AssertThat(list_a).ContainsExactlyElementsIn(set_a).InOrder()</code>\nmay or may not succeed, depending on how the <code>set</code> implements ordering.</p>\n<h3>Dictionaries, in addition to the table above</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertIn(k, d)</code></td>\n<td><code>AssertThat(d).ContainsKey(k)</code></td>\n</tr>\n<tr>\n<td><code>assertNotIn(k, d)</code></td>\n<td><code>AssertThat(d).DoesNotContainKey(k)</code></td>\n</tr>\n<tr>\n<td><code>assertIn((k, v), d.items())</code></td>\n<td><code>AssertThat(d).ContainsItem(k, v)</code></td>\n</tr>\n<tr>\n<td><code>assertNotIn((k, v), d.items())</code></td>\n<td><code>AssertThat(d).DoesNotContainItem(k, v)</code></td>\n</tr>\n<tr>\n<td><code>assertEqual(d, {k1: v1, k2: v2})</code></td>\n<td><code>AssertThat(d).ContainsExactly(k1, v1, k2, v2)</code></td>\n</tr>\n<tr>\n<td><code>assertEqual(d1, d2)</code></td>\n<td><code>AssertThat(d1).ContainsExactlyItemsIn(d2)</code></td>\n</tr>\n<tr>\n<td><code>assertDictContainsSubset(d1, d2)</code></td>\n<td><code>AssertThat(d1.items()).ContainsAllIn(d2.items())</code></td>\n</tr></tbody></table>\n<h3>Exceptions</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>with assertRaises(e):</code></td>\n<td><code>with AssertThat(e).IsRaised():</code></td>\n</tr>\n<tr>\n<td><code>with assertRaisesRegex(e, r):</code></td>\n<td><code>with AssertThat(e).IsRaised(matching=r):</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>with AssertThat(e).IsRaised(containing='a'):</code></td>\n</tr>\n<tr>\n<td><code>assertEqual(e.message, m)</code></td>\n<td><code>AssertThat(e).HasMessage(m)</code></td>\n</tr>\n<tr>\n<td><code>assertTrue(e.message.startswith('a'))</code></td>\n<td><code>AssertThat(e).HasMessageThat().StartsWith('a')</code></td>\n</tr>\n<tr>\n<td><code>assertIn(a, e.args)</code></td>\n<td><code>AssertThat(e).HasArgsThat().Contains(a)</code></td>\n</tr></tbody></table>\n<h4>Matching raised exceptions</h4>\n<p>When expecting an exception using the <code>AssertThat(e).IsRaised()</code> context, any\nexception raised whose type is equal to <code>e</code> or a subclass of <code>e</code> is accepted.\nIf an exception is raised that is not a subclass of <code>e</code>, the assertion fails.</p>\n<p>The <code>e</code> parameter in the <code>AssertThat(e).IsRaised()</code> context may be either an\nexception <em>class</em> like <code>ValueError</code>, or it may be an exception <em>instance</em> like\n<code>ValueError('some error')</code>. If an instance is passed, then any exception raised\nby the code under test must also have matching <code>message</code> and <code>args</code> properties,\nin addition to being a subclass of the expected exception.</p>\n<h3>Mocked functions</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>m.assert_called()</code></td>\n<td><code>AssertThat(m).WasCalled()</code></td>\n</tr>\n<tr>\n<td><code>m.assert_not_called()</code></td>\n<td><code>AssertThat(m).WasNotCalled()</code></td>\n</tr>\n<tr>\n<td><code>m.assert_called_once()</code></td>\n<td><code>AssertThat(m).WasCalled().Once()</code></td>\n</tr>\n<tr>\n<td><code>assertEqual(m.call_count, n)</code></td>\n<td><code>AssertThat(m).WasCalled().Times(n)</code></td>\n</tr>\n<tr>\n<td><code>m.assert_called_with(*a, **k)</code></td>\n<td><code>AssertThat(m).WasCalled().LastWith(*a, **k)</code></td>\n</tr>\n<tr>\n<td><code>m.assert_called_once_with(*a, **k)</code></td>\n<td><code>AssertThat(m).WasCalled().Once().With(*a, **k)</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>AssertThat(m).WasCalled().With(*a, **k).Once()</code></td>\n</tr>\n<tr>\n<td><code>m.assert_has_calls(calls,</code>\u00a0<code>any_order=True)</code></td>\n<td><code>AssertThat(m).HasCalls(calls)</code></td>\n</tr>\n<tr>\n<td><code>m.assert_has_calls(calls,</code>\u00a0<code>any_order=False)</code></td>\n<td><code>AssertThat(m).HasCalls(calls).InOrder()</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>AssertThat(m).HasExactlyCalls(c1, c2)</code></td>\n</tr>\n<tr>\n<td>N/A</td>\n<td><code>AssertThat(m).HasExactlyCalls(c1, c2).InOrder()</code></td>\n</tr>\n<tr>\n<td><code>m.assert_any_call(*a, **k)</code></td>\n<td><code>AssertThat(m).WasCalled().With(*a, **k)</code></td>\n</tr></tbody></table>\n<h4>Being called once, with arguments</h4>\n<p>The <code>WasCalled().Once().With(...)</code> and <code>WasCalled().With(...).Once()</code> assertions\nare subtly different. <code>WasCalled().Once().With(...)</code> asserts that the function\nwas called one time ever, and that one time it was called, it was passed those\narguments. <code>WasCalled().With(...).Once()</code> asserts that the function was passed\nthose arguments exactly once, but it is permitted to have been called with\nother, irrelevant arguments. Thus, <code>WasCalled().Once().With(...)</code> is the\nstricter assertion. Consider using <code>HasExactlyCalls()</code> for more clarity.</p>\n<h3>Classes</h3>\n<table>\n<thead>\n<tr>\n<th>unittest</th>\n<th>PyTruth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assertTrue(a.issubclass(b))</code></td>\n<td><code>AssertThat(a).IsSubclassOf(b)</code></td>\n</tr></tbody></table>\n\n\n          </div>"}, "last_serial": 6719706, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "feb0f783935683769c8abcab7d3dc44a", "sha256": "950796fca2fe489bca628a42134530154efe81ac20ad131074d9bcb1bc00df2a"}, "downloads": -1, "filename": "pytruth-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "feb0f783935683769c8abcab7d3dc44a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43884, "upload_time": "2019-05-26T12:07:57", "upload_time_iso_8601": "2019-05-26T12:07:57.468847Z", "url": "https://files.pythonhosted.org/packages/fd/da/2c730b85830be057af77adc768fc336dd03d70628ed072bfd92b1f15a0af/pytruth-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2470e4f24a5d899d3d34ec18af4548d9", "sha256": "2e73257a24c69fe15aeed06164fee9e21ae525c9b2b3b4c5b54c23d81709c7f1"}, "downloads": -1, "filename": "pytruth-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2470e4f24a5d899d3d34ec18af4548d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45677, "upload_time": "2019-05-26T12:08:00", "upload_time_iso_8601": "2019-05-26T12:08:00.151259Z", "url": "https://files.pythonhosted.org/packages/d8/28/98b7a1457cbeaa317ae4195bf6e09c42c3d640685a4b14e9b751c16cef9e/pytruth-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "83e3330742308caa386ac9b8bc485682", "sha256": "df84b067260a0e4a52e9516548959ae509d70387128d2b84fdb328c0793e4a66"}, "downloads": -1, "filename": "pytruth-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "83e3330742308caa386ac9b8bc485682", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44001, "upload_time": "2020-02-26T21:04:43", "upload_time_iso_8601": "2020-02-26T21:04:43.331029Z", "url": "https://files.pythonhosted.org/packages/cb/44/9c38392f98b970807b63947916c900314b76f9ff003835d990d64d2dd099/pytruth-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb2b5f00df00726c3921c7de243769a1", "sha256": "2a5036062718ebcaa19fe1a45d37ff2b391a790981de78c1960bfa10e351b729"}, "downloads": -1, "filename": "pytruth-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fb2b5f00df00726c3921c7de243769a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46860, "upload_time": "2020-02-26T16:31:16", "upload_time_iso_8601": "2020-02-26T16:31:16.489106Z", "url": "https://files.pythonhosted.org/packages/26/30/5ecc973ca4a6e9ca344fbfc6ef8ffa9a66f460bb214f671d46cbd16e58d9/pytruth-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4c2bd4bdec49d6b1c4da7a52998d7cb1", "sha256": "a965d2a5e62585f9705898fea65a109505ad6b7005b9d87916911b08b1f7d214"}, "downloads": -1, "filename": "pytruth-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4c2bd4bdec49d6b1c4da7a52998d7cb1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44237, "upload_time": "2020-02-27T18:58:13", "upload_time_iso_8601": "2020-02-27T18:58:13.265789Z", "url": "https://files.pythonhosted.org/packages/73/8b/1f8d8ce6f40d07ee47686b7fd4ddc5e88546ccacfd0453a89d570cb21821/pytruth-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e72e527525de118b78e0ad6a066a5a72", "sha256": "714c7593fa28ff4a1adf9917598a8e80dd3de5ada95554671f9feb439484f92c"}, "downloads": -1, "filename": "pytruth-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e72e527525de118b78e0ad6a066a5a72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47568, "upload_time": "2020-02-27T18:58:15", "upload_time_iso_8601": "2020-02-27T18:58:15.364795Z", "url": "https://files.pythonhosted.org/packages/9b/7a/986417c991428b1f26293432acf3e0eebeece4d9cd9b89efd02010b72e75/pytruth-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e71174cc85fe2d7f542b8951299c048e", "sha256": "c778f84a7f6f4941c902836484638f40613f2eb239b9b53b7f4c01b40aee255a"}, "downloads": -1, "filename": "pytruth-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e71174cc85fe2d7f542b8951299c048e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45175, "upload_time": "2020-02-28T18:49:16", "upload_time_iso_8601": "2020-02-28T18:49:16.909204Z", "url": "https://files.pythonhosted.org/packages/26/cc/2680dbc4f6d9b9993098c87fcd5390a9dde49d8a6d3b882c9617defecb59/pytruth-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "701d3d4b09cd281876f40648781b3349", "sha256": "fecef037f620ac3d6b369b65d7f3a7615238f5c857bbe858562516a6355af32c"}, "downloads": -1, "filename": "pytruth-1.1.0.tar.gz", "has_sig": false, "md5_digest": "701d3d4b09cd281876f40648781b3349", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48433, "upload_time": "2020-02-28T18:49:18", "upload_time_iso_8601": "2020-02-28T18:49:18.530050Z", "url": "https://files.pythonhosted.org/packages/24/61/2fc9a9cc1144c9123c053741cbf3f19e9213cdf658fef5f993b025e44c29/pytruth-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e71174cc85fe2d7f542b8951299c048e", "sha256": "c778f84a7f6f4941c902836484638f40613f2eb239b9b53b7f4c01b40aee255a"}, "downloads": -1, "filename": "pytruth-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e71174cc85fe2d7f542b8951299c048e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45175, "upload_time": "2020-02-28T18:49:16", "upload_time_iso_8601": "2020-02-28T18:49:16.909204Z", "url": "https://files.pythonhosted.org/packages/26/cc/2680dbc4f6d9b9993098c87fcd5390a9dde49d8a6d3b882c9617defecb59/pytruth-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "701d3d4b09cd281876f40648781b3349", "sha256": "fecef037f620ac3d6b369b65d7f3a7615238f5c857bbe858562516a6355af32c"}, "downloads": -1, "filename": "pytruth-1.1.0.tar.gz", "has_sig": false, "md5_digest": "701d3d4b09cd281876f40648781b3349", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48433, "upload_time": "2020-02-28T18:49:18", "upload_time_iso_8601": "2020-02-28T18:49:18.530050Z", "url": "https://files.pythonhosted.org/packages/24/61/2fc9a9cc1144c9123c053741cbf3f19e9213cdf658fef5f993b025e44c29/pytruth-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:06 2020"}