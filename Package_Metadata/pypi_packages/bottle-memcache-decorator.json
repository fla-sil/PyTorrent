{"info": {"author": "Chris Ziogas", "author_email": "ziogas_chr@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Plugins", "Framework :: Bottle", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "bottle-memcache-decorator\r\n=========================\r\n\r\nThis bottle-memcache-decorator plugin adds a memcache decorator in your Bottle\r\napplication. It automatically stores the route result to memcache for routes\r\nwhere the bottle-memcache plugin is enabled.\r\n\r\n\r\nRequired\r\n===============\r\n\r\nThe bottle-extras and bottle_memcache plugins are required to be installed before this plugin.\r\n\r\n\r\nInstallation\r\n===============\r\n\r\nInstall with one of the following commands::\r\n\r\n    $ pip install bottle-memcache-decorator\r\n    $ easy_install bottle-memcache-decorator\r\n\r\nor download the latest version from github::\r\n\r\n    $ git clone git://github.com/ziogaschr/bottle-memcache-decorator.git\r\n    $ cd bottle-memcache-decorator\r\n    $ python setup.py install\r\n\r\n\r\nUsage\r\n===============\r\n\r\n    import bottle\r\n    from bottle.ext import memcache\r\n    from bottle_memcache_decorator import MemcacheDecoratorPlugin\r\n\r\n    app = bottle.Bottle()\r\n\r\n    keyword = 'mc'\r\n\r\n    # install memcache plugin\r\n    memcache_plugin = memcache.MemcachePlugin(keyword=keyword)\r\n    app.install(memcache_plugin)\r\n\r\n    # install the memcache decorator\r\n    memcache_decorator_plugin = MemcacheDecoratorPlugin(\r\n                            memcache_keyword=keyword,\r\n                            memcache_expire_time='mc_expire_time',\r\n                            memcache_compress_level_keyword='mc_compress_level')\r\n    app.install(memcache_decorator_plugin)\r\n\r\n    # for example in this route we will set the expire time = 3600 sec\r\n    # and compression level = 3\r\n    @app.get('/:name', mc_expire_time=3600, mc_dec_compress_level=3)\r\n    def show(name, mc):\r\n        # your code here\r\n\r\n        return result\r\n\r\n    if __name__ == '__main__':\r\n        run(app, host='0.0.0.0', port=8080, debug=True)\r\n\r\n\r\nConfiguration\r\n=============\r\n\r\n    MemcacheDecoratorPlugin(\r\n        memcache_keyword='mc',\r\n        memcache_expire_time='mc_expire_time',\r\n        memcache_compress_level_keyword='mc_compress_level')\r\n\r\n**memcache_keyword**: is the keyword set/used for the memcache plugin\r\n\r\n**memcache_expire_time**: defines the router argument responsible for setting the memcache expire time\r\n\r\n**memcache_compress_level_keyword**: defines the router argument responsible for setting the memcache compression level", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/ziogaschr/bottle-memcache-decorator/tarball/v0.0.1#egg=ziogaschr/bottle-memcache-decorator-0.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ziogaschr/bottle-memcache-decorator", "keywords": "Bottle Plugin Memcache Decorator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bottle-memcache-decorator", "package_url": "https://pypi.org/project/bottle-memcache-decorator/", "platform": "any", "project_url": "https://pypi.org/project/bottle-memcache-decorator/", "project_urls": {"Download": "https://github.com/ziogaschr/bottle-memcache-decorator/tarball/v0.0.1#egg=ziogaschr/bottle-memcache-decorator-0.0.1", "Homepage": "http://github.com/ziogaschr/bottle-memcache-decorator"}, "release_url": "https://pypi.org/project/bottle-memcache-decorator/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Adds a memcache decorator in your Bottle application.         It automatically stores the route result to memcache for routes         where the bottle-memcache plugin is enabled.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            bottle-memcache-decorator\n<br>=========================\n<br>\n<br>This bottle-memcache-decorator plugin adds a memcache decorator in your Bottle\n<br>application. It automatically stores the route result to memcache for routes\n<br>where the bottle-memcache plugin is enabled.\n<br>\n<br>\n<br>Required\n<br>===============\n<br>\n<br>The bottle-extras and bottle_memcache plugins are required to be installed before this plugin.\n<br>\n<br>\n<br>Installation\n<br>===============\n<br>\n<br>Install with one of the following commands::\n<br>\n<br>    $ pip install bottle-memcache-decorator\n<br>    $ easy_install bottle-memcache-decorator\n<br>\n<br>or download the latest version from github::\n<br>\n<br>    $ git clone git://github.com/ziogaschr/bottle-memcache-decorator.git\n<br>    $ cd bottle-memcache-decorator\n<br>    $ python setup.py install\n<br>\n<br>\n<br>Usage\n<br>===============\n<br>\n<br>    import bottle\n<br>    from bottle.ext import memcache\n<br>    from bottle_memcache_decorator import MemcacheDecoratorPlugin\n<br>\n<br>    app = bottle.Bottle()\n<br>\n<br>    keyword = 'mc'\n<br>\n<br>    # install memcache plugin\n<br>    memcache_plugin = memcache.MemcachePlugin(keyword=keyword)\n<br>    app.install(memcache_plugin)\n<br>\n<br>    # install the memcache decorator\n<br>    memcache_decorator_plugin = MemcacheDecoratorPlugin(\n<br>                            memcache_keyword=keyword,\n<br>                            memcache_expire_time='mc_expire_time',\n<br>                            memcache_compress_level_keyword='mc_compress_level')\n<br>    app.install(memcache_decorator_plugin)\n<br>\n<br>    # for example in this route we will set the expire time = 3600 sec\n<br>    # and compression level = 3\n<br>    @app.get('/:name', mc_expire_time=3600, mc_dec_compress_level=3)\n<br>    def show(name, mc):\n<br>        # your code here\n<br>\n<br>        return result\n<br>\n<br>    if __name__ == '__main__':\n<br>        run(app, host='0.0.0.0', port=8080, debug=True)\n<br>\n<br>\n<br>Configuration\n<br>=============\n<br>\n<br>    MemcacheDecoratorPlugin(\n<br>        memcache_keyword='mc',\n<br>        memcache_expire_time='mc_expire_time',\n<br>        memcache_compress_level_keyword='mc_compress_level')\n<br>\n<br>**memcache_keyword**: is the keyword set/used for the memcache plugin\n<br>\n<br>**memcache_expire_time**: defines the router argument responsible for setting the memcache expire time\n<br>\n<br>**memcache_compress_level_keyword**: defines the router argument responsible for setting the memcache compression level\n          </div>"}, "last_serial": 926809, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bec96aa1ce7e7313705a4ebb5919b928", "sha256": "6865e99330d282605e90d0eff3eb5a26af30f9f6e0dbcfac7e3ad56dd32d9bc8"}, "downloads": -1, "filename": "bottle-memcache-decorator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bec96aa1ce7e7313705a4ebb5919b928", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4169, "upload_time": "2013-11-22T20:19:13", "upload_time_iso_8601": "2013-11-22T20:19:13.077297Z", "url": "https://files.pythonhosted.org/packages/2c/58/443bef2153f2f9c1315f9d646773fa403cc5c17847c6a3e92456c73ad3d4/bottle-memcache-decorator-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bec96aa1ce7e7313705a4ebb5919b928", "sha256": "6865e99330d282605e90d0eff3eb5a26af30f9f6e0dbcfac7e3ad56dd32d9bc8"}, "downloads": -1, "filename": "bottle-memcache-decorator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bec96aa1ce7e7313705a4ebb5919b928", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4169, "upload_time": "2013-11-22T20:19:13", "upload_time_iso_8601": "2013-11-22T20:19:13.077297Z", "url": "https://files.pythonhosted.org/packages/2c/58/443bef2153f2f9c1315f9d646773fa403cc5c17847c6a3e92456c73ad3d4/bottle-memcache-decorator-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:33 2020"}