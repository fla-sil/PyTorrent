{"info": {"author": "Rolando Urquiza", "author_email": "rolurquiza@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "Flask-Gulp\n==========\nTask manager similar to `gulp <https://www.npmjs.com/package/gulp>`_ for the processing of static files.\n\nWorking with Flask-Gulp\n-----------------------\nSetting up Flask-Gulp is quite easy. Here is an example::\n\n    from flask_gulp import Static\n\n    static = Static(app)\n\nThis allows to add tasks with the `task` decorator::\n\n    @static.task('coffee')\n    def coffee_task():\n        src(r'static/coffee/**/*.coffee')\\\n            .pipe(coffee(bare=True))\\\n            .pipe(dest(output='static/js/'))\n\n\nThe ``src`` function is provided as a global to the task function scope along with all the extensions.\n\nAs you can see, the workflow is similar to `gulp <https://www.npmjs.com/package/gulp>`_.\n\nThe ``js`` and ``css`` functions\n--------------------------------\nInspired by `Flask-Funnel <URL>`_, the ``js`` and ``css`` functions are provided to the application context in order to generate the corresponding links::\n\n    <head>\n        <!-- ... -->\n        {{ css('less') }}\n    </head>\n    <body>\n       <!-- ... -->\n       {{ js('coffee', 'cjsx') }}\n    </body>\n\nEach one receives multiple tasks names and generate the links to the generated files.\n\nExtensions\n----------\nFlask-Gulp comes shiped with four extensions, ``coffee``, ``cjsx``, ``less`` and ``dest``. The first ones accept an `executable` setting, which holds the corresponding binary location, the default is to call it directly.\n\nTo add new extensions use the decorator provided with Flask-Gulp::\n\n    from flask_gulp.extensions import extension\n\n    @extension\n    def cjsx(resources):\n        command = ['cjsx', '-c', '-s']\n        bare = cjsx.settings.get('bare')\n        if bare:\n            command += ['-b']\n        for filename, data in resources:\n            process = subprocess.Popen(command,\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE)\n            out, err = process.communicate(data)\n            if process.returncode:\n                yield None, err\n            else:\n                dest = replaceExt(filename, '.js')\n                yield dest, out\n\nEach extension receive an iterable object which yields the name and content of each file. The function must return an iterable object with the same format for resulting files. Returning the new file name as `None` will be interpreted as an error.\n\nThe variable ``<function_name>.settings`` holds a dictionary with the keywords provided in the extension initialization, for instance ``cjsx(bare=True)``.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rolurq/flask-gulp", "keywords": "flask gulp task watcher", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "Flask-Gulp", "package_url": "https://pypi.org/project/Flask-Gulp/", "platform": "any", "project_url": "https://pypi.org/project/Flask-Gulp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rolurq/flask-gulp"}, "release_url": "https://pypi.org/project/Flask-Gulp/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Task executioner similar to gulp for Python", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Task manager similar to <a href=\"https://www.npmjs.com/package/gulp\" rel=\"nofollow\">gulp</a> for the processing of static files.</p>\n<div id=\"working-with-flask-gulp\">\n<h2>Working with Flask-Gulp</h2>\n<p>Setting up Flask-Gulp is quite easy. Here is an example:</p>\n<pre>from flask_gulp import Static\n\nstatic = Static(app)\n</pre>\n<p>This allows to add tasks with the <cite>task</cite> decorator:</p>\n<pre>@static.task('coffee')\ndef coffee_task():\n    src(r'static/coffee/**/*.coffee')\\\n        .pipe(coffee(bare=True))\\\n        .pipe(dest(output='static/js/'))\n</pre>\n<p>The <tt>src</tt> function is provided as a global to the task function scope along with all the extensions.</p>\n<p>As you can see, the workflow is similar to <a href=\"https://www.npmjs.com/package/gulp\" rel=\"nofollow\">gulp</a>.</p>\n</div>\n<div id=\"the-js-and-css-functions\">\n<h2>The <tt>js</tt> and <tt>css</tt> functions</h2>\n<p>Inspired by <a href=\"URL\" rel=\"nofollow\">Flask-Funnel</a>, the <tt>js</tt> and <tt>css</tt> functions are provided to the application context in order to generate the corresponding links:</p>\n<pre>&lt;head&gt;\n    &lt;!-- ... --&gt;\n    {{ css('less') }}\n&lt;/head&gt;\n&lt;body&gt;\n   &lt;!-- ... --&gt;\n   {{ js('coffee', 'cjsx') }}\n&lt;/body&gt;\n</pre>\n<p>Each one receives multiple tasks names and generate the links to the generated files.</p>\n</div>\n<div id=\"extensions\">\n<h2>Extensions</h2>\n<p>Flask-Gulp comes shiped with four extensions, <tt>coffee</tt>, <tt>cjsx</tt>, <tt>less</tt> and <tt>dest</tt>. The first ones accept an <cite>executable</cite> setting, which holds the corresponding binary location, the default is to call it directly.</p>\n<p>To add new extensions use the decorator provided with Flask-Gulp:</p>\n<pre>from flask_gulp.extensions import extension\n\n@extension\ndef cjsx(resources):\n    command = ['cjsx', '-c', '-s']\n    bare = cjsx.settings.get('bare')\n    if bare:\n        command += ['-b']\n    for filename, data in resources:\n        process = subprocess.Popen(command,\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE)\n        out, err = process.communicate(data)\n        if process.returncode:\n            yield None, err\n        else:\n            dest = replaceExt(filename, '.js')\n            yield dest, out\n</pre>\n<p>Each extension receive an iterable object which yields the name and content of each file. The function must return an iterable object with the same format for resulting files. Returning the new file name as <cite>None</cite> will be interpreted as an error.</p>\n<p>The variable <tt><span class=\"pre\">&lt;function_name&gt;.settings</span></tt> holds a dictionary with the keywords provided in the extension initialization, for instance <tt>cjsx(bare=True)</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 2393387, "releases": {"0.2.4": [{"comment_text": "", "digests": {"md5": "88b754a2d342c707a47909cdf98943b8", "sha256": "d4bf266e733e54cbda44451d8fbc35b8c7131650101b2869ff441a7019d6a85f"}, "downloads": -1, "filename": "Flask-Gulp-0.2.4.tar.gz", "has_sig": false, "md5_digest": "88b754a2d342c707a47909cdf98943b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4175, "upload_time": "2016-09-07T18:03:28", "upload_time_iso_8601": "2016-09-07T18:03:28.870035Z", "url": "https://files.pythonhosted.org/packages/43/25/9f412c9268939366ab46b5a73d0a9c727c718778e488b3ae9a071d70f56d/Flask-Gulp-0.2.4.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "d5876ec055522fad6c313efcc4f9d080", "sha256": "856bcee3b78c2834ac3df7498c30cfe960f15f3d2e19d9cbf21a290eec510e75"}, "downloads": -1, "filename": "Flask-Gulp-0.2.6.tar.gz", "has_sig": false, "md5_digest": "d5876ec055522fad6c313efcc4f9d080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5511, "upload_time": "2016-09-20T15:14:51", "upload_time_iso_8601": "2016-09-20T15:14:51.634130Z", "url": "https://files.pythonhosted.org/packages/69/94/17ea84ce8f895b90651b64ab3dbfdc8348d3786b708877472679d381b6fa/Flask-Gulp-0.2.6.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "58c9c2f2995ae2d9fb0c5ea50ad8b5d7", "sha256": "44d9ea314854fd8eaf7c31d5685d539e7d82024b12de19cb6ebf2db885350bf1"}, "downloads": -1, "filename": "Flask-Gulp-0.2.8.tar.gz", "has_sig": false, "md5_digest": "58c9c2f2995ae2d9fb0c5ea50ad8b5d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5528, "upload_time": "2016-09-23T13:04:25", "upload_time_iso_8601": "2016-09-23T13:04:25.457005Z", "url": "https://files.pythonhosted.org/packages/5e/f3/9be3ac28966e0f4d5b14d9200aaa18422dfd74e4e07788f3c4d411198320/Flask-Gulp-0.2.8.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "6c75034baa475c7b55712e5aaaec9014", "sha256": "a8dceb97fb5466b94c3c28748ca9b7389524bf499e95b2f29263c425df76ba77"}, "downloads": -1, "filename": "Flask-Gulp-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6c75034baa475c7b55712e5aaaec9014", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5781, "upload_time": "2016-10-11T14:22:30", "upload_time_iso_8601": "2016-10-11T14:22:30.656086Z", "url": "https://files.pythonhosted.org/packages/db/2c/e15d2e6d71be874391d20b16ca536df027b4a6190053f517c39f5c95ef7e/Flask-Gulp-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c75034baa475c7b55712e5aaaec9014", "sha256": "a8dceb97fb5466b94c3c28748ca9b7389524bf499e95b2f29263c425df76ba77"}, "downloads": -1, "filename": "Flask-Gulp-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6c75034baa475c7b55712e5aaaec9014", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5781, "upload_time": "2016-10-11T14:22:30", "upload_time_iso_8601": "2016-10-11T14:22:30.656086Z", "url": "https://files.pythonhosted.org/packages/db/2c/e15d2e6d71be874391d20b16ca536df027b4a6190053f517c39f5c95ef7e/Flask-Gulp-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:48 2020"}