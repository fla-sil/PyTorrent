{"info": {"author": "Josef Friedrich", "author_email": "josef@friedrich.rocks", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": ".. image:: http://img.shields.io/pypi/v/dyndns.svg\n    :target: https://pypi.python.org/pypi/dyndns\n    :alt: This package on the Python Package Index\n\n.. image:: https://travis-ci.org/Josef-Friedrich/dyndns.svg?branch=master\n    :target: https://travis-ci.org/Josef-Friedrich/dyndns\n    :alt: Continuous integration\n\n.. image:: https://readthedocs.org/projects/dyndns/badge/?version=latest\n    :target: https://dyndns.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nAbout\n-----\n\n`dyndns <https://pypi.org/project/dyndns>`_  is a HTTP based API to\ndynamically update DNS records (DynDNS). It\u2019s uses Python and the\nFlask web framework to accomplish this task.\n\nInstallation\n------------\n\nInstall ``dyndns`` into the directory\n``/usr/local/share/python-virtualenv/dyndns`` using a virtual\nenvironment.\n\n.. code-block:: text\n\n    python3 -m venv /usr/local/share/python-virtualenv/dyndns\n    source /usr/local/share/python-virtualenv/dyndns/bin/activate\n    pip3 install dyndns\n\n\nThe working directory of our flask web API is in the directory\n``/var/www/dyndns.example.com``. Create a file\n``/var/www/dyndns.example.com/dyndns.ini``.\n\n.. code-block:: ini\n\n    [uwsgi]\n    module = dyndns.webapp:app\n\n    master = true\n    processes = 5\n\n    socket = /var/www/dyndns.example.com/dyndns.sock\n    chmod-socket = 664\n    uid = www-data\n    gid = www-data\n    vacuum = true\n\n    die-on-term = true\n\n\nExample configuration file for nginx:\n``/etc/nginx/sites-available/dyndns.example.com.``\n\n.. code-block:: text\n\n    server {\n    \tserver_name dyndns.example.com;\n    \tlisten 80;\n    \tlisten [::]:80;\n    \treturn 301 https://$host$request_uri;\n    }\n\n    server {\n    \tlisten 443 ssl;\n    \tlisten [::]:443 ssl;\n    \tserver_name dyndns.example.com;\n    \tssl_certificate /etc/letsencrypt/live/dyndns.example.com/fullchain.pem;\n    \tssl_certificate_key /etc/letsencrypt/live/dyndns.example.com/privkey.pem;\n\n    \tlocation / {\n    \t\t\tinclude uwsgi_params;\n    \t\t\tuwsgi_pass unix:/var/www/dyndns.example.com/dyndns.sock;\n    \t}\n\n    }\n\n\n``/etc/systemd/system/dyndns-uwsgi.service``\n\n.. code-block:: text\n\n    [Unit]\n    Description=uWSGI instance to serve dyndns\n    After=network.target\n\n    [Service]\n    User=www-data\n    Group=www-data\n    WorkingDirectory=/var/www/dyndns.example.com\n    Environment=\"PATH=/usr/local/share/python-virtualenv/dyndns/bin\"\n    ExecStart=/usr/local/share/python-virtualenv/dyndns/bin/uwsgi --ini uwsgi.ini\n\n    [Install]\n    WantedBy=multi-user.target\n\nConfiguration\n-------------\n\n``dyndns`` requires a configuration file in the YAML markup language.\n\n``dyndns`` looks on three places for its configuration. It picks the\nfirst existing configuration file and ignores the later in this order:\n\n1. Custom path specified in the environment variable\n   ``dyndns_CONFIG_FILE``\n2. Current working directory of the ``dyndns`` app (cwd):\n   ``<cwd>/.dyndns.yml``\n3. ``/etc/dyndns.yml``\n\n.. code-block:: yaml\n\n    ---\n    secret: 12345678\n    nameserver: 127.0.0.1\n    dyndns_domain: dyndns.example.com\n    zones:\n      - name: example.com\n        tsig_key: tPyvZA==\n\n* ``secret``: A password like secret string. The secret string has to\n  be at least 8 characters long and only alphnumeric characters are\n  allowed.\n* ``nameserver``: The IP address of your nameserver. Version 4 or\n  version 6 are allowed. Use ``127.0.0.1`` to communicate with your\n  nameserver on the same machine.\n* ``dyndns_domain``: The domain to serve the ``dyndns`` HTTP API. This\n  key is only used in the usage page. Can be omitted.\n* ``zones``: At least one zone specified as a list.\n\nUsage\n-----\n\n``dyndns`` offers two HTTP web APIs to update DNS records. A simple\nand a more restricted one using only path segments and a more flexible\nusing query strings.\n\nUpdate by path\n^^^^^^^^^^^^^^\n\n1. ``<your-domain>/update-by-path/secret/fqdn``\n2. ``<your-domain>/update-by-path/secret/fqdn/ip_1``\n3. ``<your-domain>/update-by-path/secret/fqdn/ip_1/ip_2``\n\nUpdate by query\n^^^^^^^^^^^^^^^\n\n``<your-domain>/update-by-query?secret=secret&fqdn=fqdn&ip_1=1.2.3.4``\n\nArguments for the query string\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n* ``secret``: A password like secret string. The secret string has to\n  be at least 8 characters long and only alphnumeric characters are\n  allowed.\n* ``fqdn``: The Fully-Qualified Domain Name (e. g. ``www.example.com``).\n  If you specify the argument ``fqdn``, you don\u2019t have to specify the\n  arguments ``zone_name`` and ``record_name``.\n* ``zone_name``: The zone name (e. g. ``example.com``). You have to\n  specify the argument ``record_name``.\n* ``record_name``: The record name (e. g. ``www``). You have to\n  specify the argument ``zone_name``.\n* ``ip_1``: A IP address, can be version 4 or version 6.\n* ``ip_2``: A second IP address, can be version 4 or version 6. Must\n  be a different version than ``ip_1``.\n* ``ipv4``: A IP address version 4.\n* ``ipv6``: A IP address version 6.\n* ``ttl``: Time to live. The default value is 300.\n\nDelete by path\n^^^^^^^^^^^^^^\n\nHit this url to delete a DNS record corresponding to the ``fqdn``.\nBoth ipv4 and ipv6 entries are deleted.\n\n``<your-domain>/delete-by-path/secret/fqdn``", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Josef-Friedrich/dyndns", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dyndns", "package_url": "https://pypi.org/project/dyndns/", "platform": "", "project_url": "https://pypi.org/project/dyndns/", "project_urls": {"Homepage": "https://github.com/Josef-Friedrich/dyndns"}, "release_url": "https://pypi.org/project/dyndns/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "A simple dynamic DNS update HTTP based API using python and the flask web framework.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/dyndns\" rel=\"nofollow\"><img alt=\"This package on the Python Package Index\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d14093b744fcb096f0d3b0a853738ef6f0a99744/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f64796e646e732e737667\"></a>\n<a href=\"https://travis-ci.org/Josef-Friedrich/dyndns\" rel=\"nofollow\"><img alt=\"Continuous integration\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/820534001ff87cb5fff183cd513499a7f74c3b4d/68747470733a2f2f7472617669732d63692e6f72672f4a6f7365662d4672696564726963682f64796e646e732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://dyndns.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f85bcf22e476695f0df913cf03bc70078938081a/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f64796e646e732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div id=\"about\">\n<h2>About</h2>\n<p><a href=\"https://pypi.org/project/dyndns\" rel=\"nofollow\">dyndns</a>  is a HTTP based API to\ndynamically update DNS records (DynDNS). It\u2019s uses Python and the\nFlask web framework to accomplish this task.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install <tt>dyndns</tt> into the directory\n<tt><span class=\"pre\">/usr/local/share/python-virtualenv/dyndns</span></tt> using a virtual\nenvironment.</p>\n<pre>python3 -m venv /usr/local/share/python-virtualenv/dyndns\nsource /usr/local/share/python-virtualenv/dyndns/bin/activate\npip3 install dyndns\n</pre>\n<p>The working directory of our flask web API is in the directory\n<tt>/var/www/dyndns.example.com</tt>. Create a file\n<tt>/var/www/dyndns.example.com/dyndns.ini</tt>.</p>\n<pre><span class=\"k\">[uwsgi]</span>\n<span class=\"na\">module</span> <span class=\"o\">=</span> <span class=\"s\">dyndns.webapp:app</span>\n\n<span class=\"na\">master</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n<span class=\"na\">processes</span> <span class=\"o\">=</span> <span class=\"s\">5</span>\n\n<span class=\"na\">socket</span> <span class=\"o\">=</span> <span class=\"s\">/var/www/dyndns.example.com/dyndns.sock</span>\n<span class=\"na\">chmod-socket</span> <span class=\"o\">=</span> <span class=\"s\">664</span>\n<span class=\"na\">uid</span> <span class=\"o\">=</span> <span class=\"s\">www-data</span>\n<span class=\"na\">gid</span> <span class=\"o\">=</span> <span class=\"s\">www-data</span>\n<span class=\"na\">vacuum</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n\n<span class=\"na\">die-on-term</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n</pre>\n<p>Example configuration file for nginx:\n<tt><span class=\"pre\">/etc/nginx/sites-available/dyndns.example.com.</span></tt></p>\n<pre>server {\n    server_name dyndns.example.com;\n    listen 80;\n    listen [::]:80;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n    server_name dyndns.example.com;\n    ssl_certificate /etc/letsencrypt/live/dyndns.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/dyndns.example.com/privkey.pem;\n\n    location / {\n                    include uwsgi_params;\n                    uwsgi_pass unix:/var/www/dyndns.example.com/dyndns.sock;\n    }\n\n}\n</pre>\n<p><tt><span class=\"pre\">/etc/systemd/system/dyndns-uwsgi.service</span></tt></p>\n<pre>[Unit]\nDescription=uWSGI instance to serve dyndns\nAfter=network.target\n\n[Service]\nUser=www-data\nGroup=www-data\nWorkingDirectory=/var/www/dyndns.example.com\nEnvironment=\"PATH=/usr/local/share/python-virtualenv/dyndns/bin\"\nExecStart=/usr/local/share/python-virtualenv/dyndns/bin/uwsgi --ini uwsgi.ini\n\n[Install]\nWantedBy=multi-user.target\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p><tt>dyndns</tt> requires a configuration file in the YAML markup language.</p>\n<p><tt>dyndns</tt> looks on three places for its configuration. It picks the\nfirst existing configuration file and ignores the later in this order:</p>\n<ol>\n<li>Custom path specified in the environment variable\n<tt>dyndns_CONFIG_FILE</tt></li>\n<li>Current working directory of the <tt>dyndns</tt> app (cwd):\n<tt><span class=\"pre\">&lt;cwd&gt;/.dyndns.yml</span></tt></li>\n<li><tt>/etc/dyndns.yml</tt></li>\n</ol>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">secret</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">12345678</span>\n<span class=\"nt\">nameserver</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">127.0.0.1</span>\n<span class=\"nt\">dyndns_domain</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">dyndns.example.com</span>\n<span class=\"nt\">zones</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">example.com</span>\n    <span class=\"nt\">tsig_key</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">tPyvZA==</span>\n</pre>\n<ul>\n<li><tt>secret</tt>: A password like secret string. The secret string has to\nbe at least 8 characters long and only alphnumeric characters are\nallowed.</li>\n<li><tt>nameserver</tt>: The IP address of your nameserver. Version 4 or\nversion 6 are allowed. Use <tt>127.0.0.1</tt> to communicate with your\nnameserver on the same machine.</li>\n<li><tt>dyndns_domain</tt>: The domain to serve the <tt>dyndns</tt> HTTP API. This\nkey is only used in the usage page. Can be omitted.</li>\n<li><tt>zones</tt>: At least one zone specified as a list.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><tt>dyndns</tt> offers two HTTP web APIs to update DNS records. A simple\nand a more restricted one using only path segments and a more flexible\nusing query strings.</p>\n<div id=\"update-by-path\">\n<h3>Update by path</h3>\n<ol>\n<li><tt><span class=\"pre\">&lt;your-domain&gt;/update-by-path/secret/fqdn</span></tt></li>\n<li><tt><span class=\"pre\">&lt;your-domain&gt;/update-by-path/secret/fqdn/ip_1</span></tt></li>\n<li><tt><span class=\"pre\">&lt;your-domain&gt;/update-by-path/secret/fqdn/ip_1/ip_2</span></tt></li>\n</ol>\n</div>\n<div id=\"update-by-query\">\n<h3>Update by query</h3>\n<p><tt><span class=\"pre\">&lt;your-domain&gt;/update-by-query?secret=secret&amp;fqdn=fqdn&amp;ip_1=1.2.3.4</span></tt></p>\n<div id=\"arguments-for-the-query-string\">\n<h4>Arguments for the query string</h4>\n<ul>\n<li><tt>secret</tt>: A password like secret string. The secret string has to\nbe at least 8 characters long and only alphnumeric characters are\nallowed.</li>\n<li><tt>fqdn</tt>: The Fully-Qualified Domain Name (e. g. <tt>www.example.com</tt>).\nIf you specify the argument <tt>fqdn</tt>, you don\u2019t have to specify the\narguments <tt>zone_name</tt> and <tt>record_name</tt>.</li>\n<li><tt>zone_name</tt>: The zone name (e. g. <tt>example.com</tt>). You have to\nspecify the argument <tt>record_name</tt>.</li>\n<li><tt>record_name</tt>: The record name (e. g. <tt>www</tt>). You have to\nspecify the argument <tt>zone_name</tt>.</li>\n<li><tt>ip_1</tt>: A IP address, can be version 4 or version 6.</li>\n<li><tt>ip_2</tt>: A second IP address, can be version 4 or version 6. Must\nbe a different version than <tt>ip_1</tt>.</li>\n<li><tt>ipv4</tt>: A IP address version 4.</li>\n<li><tt>ipv6</tt>: A IP address version 6.</li>\n<li><tt>ttl</tt>: Time to live. The default value is 300.</li>\n</ul>\n</div>\n</div>\n<div id=\"delete-by-path\">\n<h3>Delete by path</h3>\n<p>Hit this url to delete a DNS record corresponding to the <tt>fqdn</tt>.\nBoth ipv4 and ipv6 entries are deleted.</p>\n<p><tt><span class=\"pre\">&lt;your-domain&gt;/delete-by-path/secret/fqdn</span></tt></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5277992, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "22f838c66aaecc6685f6459922d2807a", "sha256": "e34c13c06a8ec1c03969ac720e14178a98014cfe0ec46841dd752ca49e017e6a"}, "downloads": -1, "filename": "dyndns-1.0.1.tar.gz", "has_sig": false, "md5_digest": "22f838c66aaecc6685f6459922d2807a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61403, "upload_time": "2018-07-07T18:03:11", "upload_time_iso_8601": "2018-07-07T18:03:11.242163Z", "url": "https://files.pythonhosted.org/packages/72/78/3e1982a868bb7f8c442d7972d025e953a9999eb6add8ebdb7c6de71dc6d6/dyndns-1.0.1.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "899a7d503a4752bc9ed68c0d42aebb8d", "sha256": "9daa8250a2687744664fd00b82088709f19491410a2c053364046c870ad56299"}, "downloads": -1, "filename": "dyndns-1.0.3.tar.gz", "has_sig": false, "md5_digest": "899a7d503a4752bc9ed68c0d42aebb8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61462, "upload_time": "2019-05-16T15:31:12", "upload_time_iso_8601": "2019-05-16T15:31:12.918046Z", "url": "https://files.pythonhosted.org/packages/13/64/c4448e5412bf4c5278030e4a58ce2157167c2b1f5e5371d54ac4e4005750/dyndns-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "899a7d503a4752bc9ed68c0d42aebb8d", "sha256": "9daa8250a2687744664fd00b82088709f19491410a2c053364046c870ad56299"}, "downloads": -1, "filename": "dyndns-1.0.3.tar.gz", "has_sig": false, "md5_digest": "899a7d503a4752bc9ed68c0d42aebb8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61462, "upload_time": "2019-05-16T15:31:12", "upload_time_iso_8601": "2019-05-16T15:31:12.918046Z", "url": "https://files.pythonhosted.org/packages/13/64/c4448e5412bf4c5278030e4a58ce2157167c2b1f5e5371d54ac4e4005750/dyndns-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:38 2020"}