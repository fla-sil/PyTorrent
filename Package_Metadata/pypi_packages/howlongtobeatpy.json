{"info": {"author": "ScrappyCocco", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# HowLongToBeat Python API\n[![Build Status](https://travis-ci.org/ScrappyCocco/HowLongToBeat-PythonAPI.svg?branch=master)](https://travis-ci.org/ScrappyCocco/HowLongToBeat-PythonAPI)\n[![codecov](https://codecov.io/gh/ScrappyCocco/HowLongToBeat-PythonAPI/branch/master/graph/badge.svg)](https://codecov.io/gh/ScrappyCocco/HowLongToBeat-PythonAPI)\n[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=ScrappyCocco_HowLongToBeat-PythonAPI&metric=bugs)](https://sonarcloud.io/dashboard?id=ScrappyCocco_HowLongToBeat-PythonAPI)\n\nA simple Python API to read data from howlongtobeat.com.\n\nIt is inspired by [ckatzorke - howlongtobeat](https://github.com/ckatzorke/howlongtobeat) JS API.\n\n## Usage\n\n## Installation\n\n### Installing the package downloading the last release\n\n```python\npip install howlongtobeatpy\n```\n\n### Installing the package from the source code\n\nDownload the repo, enter the folder with 'setup.py' and run the command\n\n```python\npip install .\n```\n\n## Usage in code\n\n### Start including it in your file\n\n```python\nfrom howlongtobeatpy import HowLongToBeat\n```\n\n### Now call search()\n\nThe API main functions are:\n\n```python\nresults = HowLongToBeat().search(\"Awesome Game\")\n```\n\nor, if you prefer using async:\n\n```python\nresults = await HowLongToBeat().async_search(\"Awesome Game\")\n```\n\nThe return of that function is a **list** of possible games, or **None** in case you passed an invalid \"game name\" as parameter or if there was an error in the request.\n\nIf the list **is not None** you should choose the best entry checking the Similarity value with the original name, example:\n\n```python\nresults_list = await HowLongToBeat().async_search(\"Awesome Game\")\nif results_list is not None and len(results_list) > 0:\n    best_element = max(results_list, key=lambda element: element.similarity)\n```\n\nOnce done, \"best_element\" will contain the best game found in the research.\nEvery entry in the list (if not None in case of errors) is an object of type: [HowLongToBeatEntry](https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI/blob/master/howlongtobeatpy/howlongtobeatpy/HowLongToBeatEntry.py).\n\n### Alternative search (by id)\n\nIf you prefer, you can get a game by id, this can be useful if you already have the game's howlongtobeat-id.\nUnluckily, is not worth to make a parser for the single-page game info, because is a user page that can change frequently and full of HTML.\n\nTo avoid a new parser, the search by id use a first request to get the game title, and then use the standard search, filtering the results and returning the unique game with that id.\n\nRemember that it could be a bit slower, but you avoid searching the game in the array.\n\nHere's the example:\n\n```python\nresult = HowLongToBeat().search_from_id(123456)\n```\n\nor, if you prefer using async:\n\n```python\nresult = await HowLongToBeat().async_search_from_id(123456)\n```\n\nThis call will return an unique [HowLongToBeatEntry](https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI/blob/master/howlongtobeatpy/howlongtobeatpy/HowLongToBeatEntry.py) or None in case of errors.\n\n### Results auto-filter\nTo ignore games with a very different name, the standard search automatically filter results with a game name that has a similarity with the given name > than `0.4`, not adding the others to the result list.\nIf you want all the results, or you want to change this value, you can put a parameter in the constructor:\n```python\nresults = HowLongToBeat(0.0).search(\"Awesome Game\")\n```\nputting `0.0` (or just `0`) will return all the found games, otherwise you can write another (`float`) number between 0...1 to set a new filter, such as `0.7`.\n\n**Remember** that, when searching by ID, this value is ignored.\n\n### Reading an entry\n\nAn entry is made of few values, you can check them [in the Entry class file](https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI/blob/master/howlongtobeatpy/howlongtobeatpy/HowLongToBeatEntry.py)\n\n## Found a bug?\n\nPlease report it as soon as you can creating an [issue](https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI/issues/new), the code may not be perfect.\n\n## Authors\n\n* **ScrappyCocco**\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI", "keywords": "howlongtobeat gaming steam uplay origin time length how long to beat", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "howlongtobeatpy", "package_url": "https://pypi.org/project/howlongtobeatpy/", "platform": "", "project_url": "https://pypi.org/project/howlongtobeatpy/", "project_urls": {"Homepage": "https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI"}, "release_url": "https://pypi.org/project/howlongtobeatpy/0.1.12/", "requires_dist": null, "requires_python": "", "summary": "A Python API for How Long to Beat", "version": "0.1.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>HowLongToBeat Python API</h1>\n<p><a href=\"https://travis-ci.org/ScrappyCocco/HowLongToBeat-PythonAPI\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/56d0d42174681ccc182c96b21a9f1151f45e330f/68747470733a2f2f7472617669732d63692e6f72672f53637261707079436f63636f2f486f774c6f6e67546f426561742d507974686f6e4150492e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ScrappyCocco/HowLongToBeat-PythonAPI\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a38785cf4aeafaa3d3d3206b80de939f2a44fb9/68747470733a2f2f636f6465636f762e696f2f67682f53637261707079436f63636f2f486f774c6f6e67546f426561742d507974686f6e4150492f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://sonarcloud.io/dashboard?id=ScrappyCocco_HowLongToBeat-PythonAPI\" rel=\"nofollow\"><img alt=\"Bugs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b98447bb2c0e97c8ba3f7c0a410dcc20ac0d4056/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d53637261707079436f63636f5f486f774c6f6e67546f426561742d507974686f6e415049266d65747269633d62756773\"></a></p>\n<p>A simple Python API to read data from howlongtobeat.com.</p>\n<p>It is inspired by <a href=\"https://github.com/ckatzorke/howlongtobeat\" rel=\"nofollow\">ckatzorke - howlongtobeat</a> JS API.</p>\n<h2>Usage</h2>\n<h2>Installation</h2>\n<h3>Installing the package downloading the last release</h3>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">howlongtobeatpy</span>\n</pre>\n<h3>Installing the package from the source code</h3>\n<p>Download the repo, enter the folder with 'setup.py' and run the command</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">.</span>\n</pre>\n<h2>Usage in code</h2>\n<h3>Start including it in your file</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">howlongtobeatpy</span> <span class=\"kn\">import</span> <span class=\"n\">HowLongToBeat</span>\n</pre>\n<h3>Now call search()</h3>\n<p>The API main functions are:</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">HowLongToBeat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s2\">\"Awesome Game\"</span><span class=\"p\">)</span>\n</pre>\n<p>or, if you prefer using async:</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">HowLongToBeat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">async_search</span><span class=\"p\">(</span><span class=\"s2\">\"Awesome Game\"</span><span class=\"p\">)</span>\n</pre>\n<p>The return of that function is a <strong>list</strong> of possible games, or <strong>None</strong> in case you passed an invalid \"game name\" as parameter or if there was an error in the request.</p>\n<p>If the list <strong>is not None</strong> you should choose the best entry checking the Similarity value with the original name, example:</p>\n<pre><span class=\"n\">results_list</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">HowLongToBeat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">async_search</span><span class=\"p\">(</span><span class=\"s2\">\"Awesome Game\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">results_list</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">best_element</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">results_list</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">)</span>\n</pre>\n<p>Once done, \"best_element\" will contain the best game found in the research.\nEvery entry in the list (if not None in case of errors) is an object of type: <a href=\"https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI/blob/master/howlongtobeatpy/howlongtobeatpy/HowLongToBeatEntry.py\" rel=\"nofollow\">HowLongToBeatEntry</a>.</p>\n<h3>Alternative search (by id)</h3>\n<p>If you prefer, you can get a game by id, this can be useful if you already have the game's howlongtobeat-id.\nUnluckily, is not worth to make a parser for the single-page game info, because is a user page that can change frequently and full of HTML.</p>\n<p>To avoid a new parser, the search by id use a first request to get the game title, and then use the standard search, filtering the results and returning the unique game with that id.</p>\n<p>Remember that it could be a bit slower, but you avoid searching the game in the array.</p>\n<p>Here's the example:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">HowLongToBeat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">search_from_id</span><span class=\"p\">(</span><span class=\"mi\">123456</span><span class=\"p\">)</span>\n</pre>\n<p>or, if you prefer using async:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">HowLongToBeat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">async_search_from_id</span><span class=\"p\">(</span><span class=\"mi\">123456</span><span class=\"p\">)</span>\n</pre>\n<p>This call will return an unique <a href=\"https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI/blob/master/howlongtobeatpy/howlongtobeatpy/HowLongToBeatEntry.py\" rel=\"nofollow\">HowLongToBeatEntry</a> or None in case of errors.</p>\n<h3>Results auto-filter</h3>\n<p>To ignore games with a very different name, the standard search automatically filter results with a game name that has a similarity with the given name &gt; than <code>0.4</code>, not adding the others to the result list.\nIf you want all the results, or you want to change this value, you can put a parameter in the constructor:</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">HowLongToBeat</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s2\">\"Awesome Game\"</span><span class=\"p\">)</span>\n</pre>\n<p>putting <code>0.0</code> (or just <code>0</code>) will return all the found games, otherwise you can write another (<code>float</code>) number between 0...1 to set a new filter, such as <code>0.7</code>.</p>\n<p><strong>Remember</strong> that, when searching by ID, this value is ignored.</p>\n<h3>Reading an entry</h3>\n<p>An entry is made of few values, you can check them <a href=\"https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI/blob/master/howlongtobeatpy/howlongtobeatpy/HowLongToBeatEntry.py\" rel=\"nofollow\">in the Entry class file</a></p>\n<h2>Found a bug?</h2>\n<p>Please report it as soon as you can creating an <a href=\"https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI/issues/new\" rel=\"nofollow\">issue</a>, the code may not be perfect.</p>\n<h2>Authors</h2>\n<ul>\n<li><strong>ScrappyCocco</strong></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details</p>\n\n          </div>"}, "last_serial": 6486422, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "b1a36b33b01a4b67e8dcf84b99352105", "sha256": "6d1fde38a6e89c54eea6b3e789826d57f4c51948325bff07d1d3e7aef8f780e6"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b1a36b33b01a4b67e8dcf84b99352105", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4972, "upload_time": "2018-12-29T12:09:29", "upload_time_iso_8601": "2018-12-29T12:09:29.260466Z", "url": "https://files.pythonhosted.org/packages/2b/47/2d2606b689a4227e149ffeb4cc570c891fd47c3f7be79fde924a56cf0a9a/howlongtobeatpy-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "d49ce7b105f092947faa6b979989158d", "sha256": "dfe337a23dcbd3f328c4aa2790e654f79850948ef563a3d1fe25afea61eb4864"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.10.tar.gz", "has_sig": false, "md5_digest": "d49ce7b105f092947faa6b979989158d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6603, "upload_time": "2020-01-19T09:45:24", "upload_time_iso_8601": "2020-01-19T09:45:24.020443Z", "url": "https://files.pythonhosted.org/packages/da/2e/94663b70631500f2273f8e6d1a449d92aac26ed0a440bdfd1b1b4b12cfe2/howlongtobeatpy-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "6fa6e5724caf3922e3f6d4ac327abf38", "sha256": "bdcc56cb534e9e3e5a567780a89d4dc397a2c03c41ba0b225d9c69d7d4e0863f"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.11.tar.gz", "has_sig": false, "md5_digest": "6fa6e5724caf3922e3f6d4ac327abf38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7223, "upload_time": "2020-01-19T23:18:03", "upload_time_iso_8601": "2020-01-19T23:18:03.418503Z", "url": "https://files.pythonhosted.org/packages/5a/0b/ad3fe26eb66387395c6e0fd37b6736fc6fcee1edaeaa4263251172367c8f/howlongtobeatpy-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "89ea573e04169d48ef3cfacb3ad2283f", "sha256": "c1088e13e702441262faebaf85e791dee196cb0108b9e32cd5ca28a25b76a9e2"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.12.tar.gz", "has_sig": false, "md5_digest": "89ea573e04169d48ef3cfacb3ad2283f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7268, "upload_time": "2020-01-20T11:49:45", "upload_time_iso_8601": "2020-01-20T11:49:45.194286Z", "url": "https://files.pythonhosted.org/packages/d1/87/ada8884a3e310aa22b38f4f73d9113256710b4dece20687af1c54d58b216/howlongtobeatpy-0.1.12.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "846c2aab7e40a11935c5d860df84c935", "sha256": "5efd3bc71054362d6ed44df8c8da42355116a057a3c4f178faf08f1e30eae5e1"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "846c2aab7e40a11935c5d860df84c935", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5212, "upload_time": "2018-12-29T13:58:48", "upload_time_iso_8601": "2018-12-29T13:58:48.922208Z", "url": "https://files.pythonhosted.org/packages/9b/6f/52dd98f8eb3922f2b7601b2293c7f0da640c3c84c7522417a3fb8bff1593/howlongtobeatpy-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b675e3acd9f5e7ffaa10f499d0220622", "sha256": "9402a2e04975523d2fec70a56fb5f7337e85ef5f8bc43793b9d3be741b1addfa"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b675e3acd9f5e7ffaa10f499d0220622", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5208, "upload_time": "2019-01-19T14:19:40", "upload_time_iso_8601": "2019-01-19T14:19:40.517417Z", "url": "https://files.pythonhosted.org/packages/9e/62/beffdcd225f8c5bba2bd12e56ea689bcd66ff9f99bac16e3f3aaab45d25c/howlongtobeatpy-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "973d7c99659137c8d0eec17e68d77efe", "sha256": "64d28187bc08471b8fb439ac38071a7dd589256373bc55a2cbab3a4eb45f3b37"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.4.tar.gz", "has_sig": false, "md5_digest": "973d7c99659137c8d0eec17e68d77efe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5257, "upload_time": "2019-01-29T17:44:51", "upload_time_iso_8601": "2019-01-29T17:44:51.930610Z", "url": "https://files.pythonhosted.org/packages/97/99/7f56d58eaf72528ddcb08590069ab5b71a7f35ba59c5c6d44c47cfaaed9a/howlongtobeatpy-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "a754926fd4ac57863a6f63ca6ce3dec7", "sha256": "56607abfb99f6f4655aed9c8518df8fdb6e6f7b38c7097e550ab1a5a296bc7c8"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a754926fd4ac57863a6f63ca6ce3dec7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8653, "upload_time": "2019-11-11T11:44:16", "upload_time_iso_8601": "2019-11-11T11:44:16.654069Z", "url": "https://files.pythonhosted.org/packages/46/0f/ad706ba512209830c8af6354ba821006a4afd195022bacd371dcda4aa702/howlongtobeatpy-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8066a46e239a6932f9f90664b0ecbdd2", "sha256": "5598a4b2e1c11a1c58cd935b79699383b7ce8756ffe7bf62ba17c94f131d8de8"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.5.tar.gz", "has_sig": false, "md5_digest": "8066a46e239a6932f9f90664b0ecbdd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6371, "upload_time": "2019-11-11T11:44:20", "upload_time_iso_8601": "2019-11-11T11:44:20.587045Z", "url": "https://files.pythonhosted.org/packages/7c/8d/23688b5f61d80161dfc595abef6bcd61bce1e1014d15bbb9b79e359519ab/howlongtobeatpy-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "a1b25ea3aeae94141b315bb795306667", "sha256": "6cf3da14935fb92f2058954ec548d3e58319dbc07c347e40c4833f9d601a861c"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.6.tar.gz", "has_sig": false, "md5_digest": "a1b25ea3aeae94141b315bb795306667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6369, "upload_time": "2019-11-11T11:55:19", "upload_time_iso_8601": "2019-11-11T11:55:19.013114Z", "url": "https://files.pythonhosted.org/packages/c5/61/e32838909f7b493e1c2181229098673ea552245a459a7defe6764e2e86d2/howlongtobeatpy-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "c80ed2f63705e9bb81875236714abf52", "sha256": "a1594f0c50e1fbdd494ecee9d34673186cf60b98a3c04bb444f0640d6f771683"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.7.tar.gz", "has_sig": false, "md5_digest": "c80ed2f63705e9bb81875236714abf52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6361, "upload_time": "2019-11-11T12:01:11", "upload_time_iso_8601": "2019-11-11T12:01:11.255781Z", "url": "https://files.pythonhosted.org/packages/e4/89/2f0a3c5a0e50a95e30079abc93207a29032d591538f782c8c6558649c943/howlongtobeatpy-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "6e50b446e1fb7606035fe562db01516b", "sha256": "4182477dfa4c83b994249f31bbe886399b463fde17da320edf797babb8a27721"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.8.tar.gz", "has_sig": false, "md5_digest": "6e50b446e1fb7606035fe562db01516b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6541, "upload_time": "2019-12-09T21:34:06", "upload_time_iso_8601": "2019-12-09T21:34:06.159903Z", "url": "https://files.pythonhosted.org/packages/37/86/84c889cf879a15326112b3e949b906662c33970b378e2e3858e22750ec36/howlongtobeatpy-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "da79619fe6b2fd5fad02ce6b4927b6f8", "sha256": "3bc7ce1a665efb17e43aa6e1d41b021bbf74a166018f9f45b67959409b3d946c"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.9.tar.gz", "has_sig": false, "md5_digest": "da79619fe6b2fd5fad02ce6b4927b6f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6549, "upload_time": "2019-12-21T13:56:59", "upload_time_iso_8601": "2019-12-21T13:56:59.069980Z", "url": "https://files.pythonhosted.org/packages/de/f0/f1901e91b4ade51dd7ba5a0898e9c932bd8dd466d024bb49f6e46227c1db/howlongtobeatpy-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "89ea573e04169d48ef3cfacb3ad2283f", "sha256": "c1088e13e702441262faebaf85e791dee196cb0108b9e32cd5ca28a25b76a9e2"}, "downloads": -1, "filename": "howlongtobeatpy-0.1.12.tar.gz", "has_sig": false, "md5_digest": "89ea573e04169d48ef3cfacb3ad2283f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7268, "upload_time": "2020-01-20T11:49:45", "upload_time_iso_8601": "2020-01-20T11:49:45.194286Z", "url": "https://files.pythonhosted.org/packages/d1/87/ada8884a3e310aa22b38f4f73d9113256710b4dece20687af1c54d58b216/howlongtobeatpy-0.1.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:29 2020"}