{"info": {"author": "Nelson Uhan", "author_email": "nelson@uhan.me", "bugtrack_url": null, "classifiers": [], "description": "bellmanford\n===========\n\nThis package provides a few small extensions of the Bellman-Ford\nroutines in `NetworkX <https://networkx.github.io>`__, primarily for\nconvenience.\n\nInstallation\n------------\n\n``bellmanford`` is available on PyPI:\n\n.. code:: bash\n\n    pip install bellmanford\n\nUsage\n-----\n\nbellman_ford\n~~~~~~~~~~~~\n\n.. code:: python\n\n    length, nodes, negative_cycle = bellman_ford(G, source, target, weight='weight')\n\nCompute shortest path and shortest path lengths between a source node\nand target node in weighted graphs using the Bellman-Ford algorithm.\n\nParameters\n^^^^^^^^^^\n\n-  ``G`` : NetworkX graph\n-  ``pred`` : dict - Keyed by node to predecessor in the path\n-  ``dist`` : dict - Keyed by node to the distance from the source\n-  ``source``: node label - Source node\n-  ``target``: node label - Target node\n-  ``weight`` : string - Edge data key corresponding to the edge weight\n\nReturns\n^^^^^^^\n\n-  ``length`` : numeric - Length of a negative cycle if one exists.\n   Otherwise, length of a shortest path. Length is ``inf`` if ``source``\n   and ``target`` are not connected.\n-  ``nodes`` : list - Nodes in a negative edge cycle (in order) if one\n   exists. Otherwise nodes in a shortest path. List is empty if\n   ``source`` and ``target`` are not connected.\n-  ``negative_cycle`` : bool - ``True`` if a negative edge cycle exists,\n   otherwise ``False``.\n\nExamples\n^^^^^^^^\n\n.. code:: python\n\n    >>> import networkx as nx\n    >>> G = nx.path_graph(5, create_using = nx.DiGraph())\n    >>> bf.bellman_ford(G, source=0, target=4)\n    (3, [1, 2, 3, 4], False)\n\nnegative_edge_cycle\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    length, nodes, negative_cycle = negative_edge_cycle(G, weight='weight')\n\nIf there is a negative edge cycle anywhere in ``G``, returns ``True``.\nAlso returns the total weight of the cycle and the nodes in the cycle.\n\n.. _parameters-1:\n\nParameters\n^^^^^^^^^^\n\n-  ``G`` : NetworkX graph\n-  ``weight`` : string, optional (default = ``'weight'``) - Edge data\n   key corresponding to the edge weight\n\n.. _returns-1:\n\nReturns\n^^^^^^^\n\n-  ``length`` : numeric - Length of a negative edge cycle if one exists,\n   otherwise ``None``.\n-  ``nodes`` : list - Nodes in a negative edge cycle (in order) if one\n   exists, otherwise ``None``.\n-  ``negative_cycle`` : bool - ``True`` if a negative edge cycle exists,\n   otherwise ``False``.\n\n.. _examples-1:\n\nExamples\n^^^^^^^^\n\n.. code:: python\n\n    >>> import networkx as nx\n    >>> import bellmanford as bf\n    >>> G = nx.cycle_graph(5, create_using = nx.DiGraph())\n    >>> print(bf.negative_edge_cycle(G))\n    (None, [], False)\n    >>> G[1][2]['weight'] = -7\n    >>> print(bf.negative_edge_cycle(G))\n    (-3, [4, 0, 1, 2, 3, 4], True)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nelsonuhan/bellmanford", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "bellmanford", "package_url": "https://pypi.org/project/bellmanford/", "platform": "", "project_url": "https://pypi.org/project/bellmanford/", "project_urls": {"Homepage": "https://github.com/nelsonuhan/bellmanford"}, "release_url": "https://pypi.org/project/bellmanford/0.2.1/", "requires_dist": null, "requires_python": "", "summary": " Small extensions of the Bellman-Ford routines in NetworkX, primarily for convenience (https://networkx.github.io). ", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a few small extensions of the Bellman-Ford\nroutines in <a href=\"https://networkx.github.io\" rel=\"nofollow\">NetworkX</a>, primarily for\nconvenience.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>bellmanford</tt> is available on PyPI:</p>\n<pre>pip install bellmanford\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"bellman-ford\">\n<h3>bellman_ford</h3>\n<pre><span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"p\">,</span> <span class=\"n\">negative_cycle</span> <span class=\"o\">=</span> <span class=\"n\">bellman_ford</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"s1\">'weight'</span><span class=\"p\">)</span>\n</pre>\n<p>Compute shortest path and shortest path lengths between a source node\nand target node in weighted graphs using the Bellman-Ford algorithm.</p>\n<div id=\"parameters\">\n<h4>Parameters</h4>\n<ul>\n<li><tt>G</tt> : NetworkX graph</li>\n<li><tt>pred</tt> : dict - Keyed by node to predecessor in the path</li>\n<li><tt>dist</tt> : dict - Keyed by node to the distance from the source</li>\n<li><tt>source</tt>: node label - Source node</li>\n<li><tt>target</tt>: node label - Target node</li>\n<li><tt>weight</tt> : string - Edge data key corresponding to the edge weight</li>\n</ul>\n</div>\n<div id=\"returns\">\n<h4>Returns</h4>\n<ul>\n<li><tt>length</tt> : numeric - Length of a negative cycle if one exists.\nOtherwise, length of a shortest path. Length is <tt>inf</tt> if <tt>source</tt>\nand <tt>target</tt> are not connected.</li>\n<li><tt>nodes</tt> : list - Nodes in a negative edge cycle (in order) if one\nexists. Otherwise nodes in a shortest path. List is empty if\n<tt>source</tt> and <tt>target</tt> are not connected.</li>\n<li><tt>negative_cycle</tt> : bool - <tt>True</tt> if a negative edge cycle exists,\notherwise <tt>False</tt>.</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h4>Examples</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">path_graph</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">create_using</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">bellman_ford</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"negative-edge-cycle\">\n<h3>negative_edge_cycle</h3>\n<pre><span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"p\">,</span> <span class=\"n\">negative_cycle</span> <span class=\"o\">=</span> <span class=\"n\">negative_edge_cycle</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"s1\">'weight'</span><span class=\"p\">)</span>\n</pre>\n<p>If there is a negative edge cycle anywhere in <tt>G</tt>, returns <tt>True</tt>.\nAlso returns the total weight of the cycle and the nodes in the cycle.</p>\n<div id=\"id1\">\n<span id=\"parameters-1\"></span><h4>Parameters</h4>\n<ul>\n<li><tt>G</tt> : NetworkX graph</li>\n<li><tt>weight</tt> : string, optional (default = <tt>'weight'</tt>) - Edge data\nkey corresponding to the edge weight</li>\n</ul>\n</div>\n<div id=\"id2\">\n<span id=\"returns-1\"></span><h4>Returns</h4>\n<ul>\n<li><tt>length</tt> : numeric - Length of a negative edge cycle if one exists,\notherwise <tt>None</tt>.</li>\n<li><tt>nodes</tt> : list - Nodes in a negative edge cycle (in order) if one\nexists, otherwise <tt>None</tt>.</li>\n<li><tt>negative_cycle</tt> : bool - <tt>True</tt> if a negative edge cycle exists,\notherwise <tt>False</tt>.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<span id=\"examples-1\"></span><h4>Examples</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">bellmanford</span> <span class=\"k\">as</span> <span class=\"nn\">bf</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">cycle_graph</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">create_using</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">negative_edge_cycle</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"s1\">'weight'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">7</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">negative_edge_cycle</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3841934, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "97cc584367644644906acec486c53c3f", "sha256": "8a8a3c40d86b933303378b2fb7c34697a8146432c6d5a643c31a49fb4b0d7890"}, "downloads": -1, "filename": "bellmanford-0.1.tar.gz", "has_sig": false, "md5_digest": "97cc584367644644906acec486c53c3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5053, "upload_time": "2017-01-12T22:05:02", "upload_time_iso_8601": "2017-01-12T22:05:02.194750Z", "url": "https://files.pythonhosted.org/packages/4b/af/07382b36d58ee96c633ac5cc01ccce9e2ebc0abc684cb49500f204735396/bellmanford-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "021a6783ab23fb40c1e61ed2eb2b41ce", "sha256": "33816d2b26201ba1b64e1d76dc02bf6c2b0b83881b76dbedad8a13d8f5d5320c"}, "downloads": -1, "filename": "bellmanford-0.1.1.tar.gz", "has_sig": false, "md5_digest": "021a6783ab23fb40c1e61ed2eb2b41ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5066, "upload_time": "2017-01-26T20:32:06", "upload_time_iso_8601": "2017-01-26T20:32:06.881194Z", "url": "https://files.pythonhosted.org/packages/f4/9c/4dd8ec8ddcfca70f2a315819b5db6dadc50dc4249bf1407f5f230738a033/bellmanford-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "63d5c3c4f621866eb7c74e1370d27fc9", "sha256": "48ef649f921ecbc345e986a1e603664fc949727d7ec26200522be648a1a27e49"}, "downloads": -1, "filename": "bellmanford-0.1.2.tar.gz", "has_sig": false, "md5_digest": "63d5c3c4f621866eb7c74e1370d27fc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5080, "upload_time": "2017-08-03T20:01:30", "upload_time_iso_8601": "2017-08-03T20:01:30.698262Z", "url": "https://files.pythonhosted.org/packages/76/f8/a3ddd7ef16abcf0ca1361d483da2a26b0c41400012412ce23ee3f745719c/bellmanford-0.1.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1ec12aee1d21f0260699dc4a3f60b58b", "sha256": "29e4975df1b1c8353d6e495f214e23a470e8eb7021c7a3c0db7c24c78599d39e"}, "downloads": -1, "filename": "bellmanford-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1ec12aee1d21f0260699dc4a3f60b58b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5233, "upload_time": "2018-05-07T19:38:17", "upload_time_iso_8601": "2018-05-07T19:38:17.282191Z", "url": "https://files.pythonhosted.org/packages/ea/2b/2c483bdd3c07af70e5ae1a85183f40c980e25b98ac16eb122202cc9a8b18/bellmanford-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ec12aee1d21f0260699dc4a3f60b58b", "sha256": "29e4975df1b1c8353d6e495f214e23a470e8eb7021c7a3c0db7c24c78599d39e"}, "downloads": -1, "filename": "bellmanford-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1ec12aee1d21f0260699dc4a3f60b58b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5233, "upload_time": "2018-05-07T19:38:17", "upload_time_iso_8601": "2018-05-07T19:38:17.282191Z", "url": "https://files.pythonhosted.org/packages/ea/2b/2c483bdd3c07af70e5ae1a85183f40c980e25b98ac16eb122202cc9a8b18/bellmanford-0.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:49 2020"}