{"info": {"author": "Aditya Khandkar", "author_email": "khandkar.adi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Multimedia :: Sound/Audio :: Analysis", "Topic :: Multimedia :: Sound/Audio :: Speech", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Piwho\n=====\n\nPiwho is python wrapper around `MARF <http://marf.sourceforge.net/>`__\nspeaker recognition framework for the Raspberry pi and other SBCs. With\nthe Piwho you can implement speaker recognition in your projects.\n\n.. image:: https://travis-ci.org/Adirockzz95/Piwho.svg?branch=v1.3.0\n    :target: https://travis-ci.org/Adirockzz95/Piwho\n\n|\n\n**Blink example**\n\n.. code:: python\n\n\n    import RPi.GPIO as GPIO\n    import time\n    from piwho import recognition, vad\n\n    def blink(pin):\n        GPIO.setmode(GPIO.BOARD)\n        GPIO.setup(pin, GPIO.OUT) \n\n        for i in range(0,10):\n            GPIO.output(pin,GPIO.HIGH)\n            time.sleep(1)\n            GPIO.output(pin,GPIO.LOW)\n            time.sleep(1)\n       \n    if __name__ == \"__main__\":\n       recog = recognition.SpeakerRecognizer('./')\n       vad.record()\n       name = recog.identify_speaker()\n       if name[0] == 'Abhishek':\n           blink(11)\n\nTested on\n---------\n\n-  Ubuntu 15.10\n-  Pi 1 model B (raspbian wheezy, jessie)\n-  Pi 2 model B (raspbian wheezy, jessie, stretch)\n-  CHIP\n\nInstallation\n------------\n\nUpdate the Pi\n\n.. code:: bash\n\n    $ sudo apt-get update\n    $ sudo apt-get upgrade\n\nYou need to have JDK (min version: 1.7) installed on your Pi.\n\n.. code:: bash\n\n    # verify jdk is installed\n    $ java -version\n\nPyaudio is required to run audio recording script. (Optional)\n\n.. code:: bash\n\n    # Install portaudio\n    $ sudo apt-get install portaudio19-dev\n    # Install python dev package\n    $ sudo apt-get install python2.7-dev\n    # Install pyaudio\n    $ pip install pyaudio \n\nPiwho is on PyPI\n\n.. code:: bash\n\n    $ pip install piwho\n\nor clone the project from github\n\n.. code:: bash\n\n    $ git clone https://www.github.com/Adirockzz95/Piwho.git\n    $ cd Piwho\n    $ python setup.py install\n\nTests\n-----\n\nTests are implemented using unittest framework:\n\n.. code:: bash\n\n    $ pip install -r requirements.txt\n    $ python -m unittest discover -v ./tests\n\nDocumentation\n-------------\n\n-  `Training the model <docs/trainingmodel.rst>`__\\ \n-  `Recognition <docs/recognition.rst>`__\\ \n-  `Gender detection <docs/gender_piwho.rst>`__\\ \n-  `integrating with Jasper <docs/jasper.rst>`__\n\nTips / Caveats\n--------------\n\n-  Recognition/Training time depends on the length of an audio file.\n-  If possible overclock your Pi- use Turbo mode.\n-  Give maxmium RAM to CPU.\n-  Read `MARF\n   manual <http://marf.sourceforge.net/docs/marf/0.3.0.5/report.pdf>`__\n   to know how the it works.\n-  Recognition speed is directly proportional to the CPU power.\n\nMisc\n----\n\nHere are resources/similar projects I came across while working on this\nproject.\n\n-  `recognito <https://github.com/amaurycrickx/recognito>`__ : Works\n   very well on Pi, but data storage is not implemented.\n-  `voiceid <https://code.google.com/archive/p/voiceid/>`__\n-  `ALIZE <http://mistral.univ-avignon.fr/>`__\n-  `Shout <http://shout-toolkit.sourceforge.net/use_case_diarization.html>`__\n-  `MARF\n   manual <http://marf.sourceforge.net/docs/marf/0.3.0.6/report.pdf>`__\n-  `LIUM\n   site <http://www-lium.univ-lemans.fr/diarization/doku.php/welcome>`__\n\n\nLICENSE\n-------\n`MIT <./LICENSE>`__", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Adirockzz95/PiWho", "keywords": "Speaker recognition Raspberry Pi MARF", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "piwho", "package_url": "https://pypi.org/project/piwho/", "platform": "", "project_url": "https://pypi.org/project/piwho/", "project_urls": {"Homepage": "https://github.com/Adirockzz95/PiWho"}, "release_url": "https://pypi.org/project/piwho/1.3.2/", "requires_dist": null, "requires_python": "", "summary": "A python wrapper around MARF speaker recognition frameworkfor raspberry pi and other SBCs", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Piwho is python wrapper around <a href=\"http://marf.sourceforge.net/\" rel=\"nofollow\">MARF</a>\nspeaker recognition framework for the Raspberry pi and other SBCs. With\nthe Piwho you can implement speaker recognition in your projects.</p>\n<a href=\"https://travis-ci.org/Adirockzz95/Piwho\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/Adirockzz95/Piwho.svg?branch=v1.3.0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afb3551615ad1c26b4ed7603042854308b3b3dd1/68747470733a2f2f7472617669732d63692e6f72672f416469726f636b7a7a39352f506977686f2e7376673f6272616e63683d76312e332e30\"></a>\n<div>\n<div><br></div>\n</div>\n<p><strong>Blink example</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">RPi.GPIO</span> <span class=\"k\">as</span> <span class=\"nn\">GPIO</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">piwho</span> <span class=\"kn\">import</span> <span class=\"n\">recognition</span><span class=\"p\">,</span> <span class=\"n\">vad</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">blink</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">):</span>\n    <span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">setmode</span><span class=\"p\">(</span><span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">BOARD</span><span class=\"p\">)</span>\n    <span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">,</span> <span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">OUT</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">,</span><span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">,</span><span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">LOW</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n   <span class=\"n\">recog</span> <span class=\"o\">=</span> <span class=\"n\">recognition</span><span class=\"o\">.</span><span class=\"n\">SpeakerRecognizer</span><span class=\"p\">(</span><span class=\"s1\">'./'</span><span class=\"p\">)</span>\n   <span class=\"n\">vad</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">()</span>\n   <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">recog</span><span class=\"o\">.</span><span class=\"n\">identify_speaker</span><span class=\"p\">()</span>\n   <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'Abhishek'</span><span class=\"p\">:</span>\n       <span class=\"n\">blink</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n</pre>\n<div id=\"tested-on\">\n<h2>Tested on</h2>\n<ul>\n<li>Ubuntu 15.10</li>\n<li>Pi 1 model B (raspbian wheezy, jessie)</li>\n<li>Pi 2 model B (raspbian wheezy, jessie, stretch)</li>\n<li>CHIP</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Update the Pi</p>\n<pre>$ sudo apt-get update\n$ sudo apt-get upgrade\n</pre>\n<p>You need to have JDK (min version: 1.7) installed on your Pi.</p>\n<pre><span class=\"c1\"># verify jdk is installed\n</span>$ java -version\n</pre>\n<p>Pyaudio is required to run audio recording script. (Optional)</p>\n<pre><span class=\"c1\"># Install portaudio\n</span>$ sudo apt-get install portaudio19-dev\n<span class=\"c1\"># Install python dev package\n</span>$ sudo apt-get install python2.7-dev\n<span class=\"c1\"># Install pyaudio\n</span>$ pip install pyaudio\n</pre>\n<p>Piwho is on PyPI</p>\n<pre>$ pip install piwho\n</pre>\n<p>or clone the project from github</p>\n<pre>$ git clone https://www.github.com/Adirockzz95/Piwho.git\n$ <span class=\"nb\">cd</span> Piwho\n$ python setup.py install\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Tests are implemented using unittest framework:</p>\n<pre>$ pip install -r requirements.txt\n$ python -m unittest discover -v ./tests\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<ul>\n<li><a href=\"docs/trainingmodel.rst\" rel=\"nofollow\">Training the model</a></li>\n<li><a href=\"docs/recognition.rst\" rel=\"nofollow\">Recognition</a></li>\n<li><a href=\"docs/gender_piwho.rst\" rel=\"nofollow\">Gender detection</a></li>\n<li><a href=\"docs/jasper.rst\" rel=\"nofollow\">integrating with Jasper</a></li>\n</ul>\n</div>\n<div id=\"tips-caveats\">\n<h2>Tips / Caveats</h2>\n<ul>\n<li>Recognition/Training time depends on the length of an audio file.</li>\n<li>If possible overclock your Pi- use Turbo mode.</li>\n<li>Give maxmium RAM to CPU.</li>\n<li>Read <a href=\"http://marf.sourceforge.net/docs/marf/0.3.0.5/report.pdf\" rel=\"nofollow\">MARF\nmanual</a>\nto know how the it works.</li>\n<li>Recognition speed is directly proportional to the CPU power.</li>\n</ul>\n</div>\n<div id=\"misc\">\n<h2>Misc</h2>\n<p>Here are resources/similar projects I came across while working on this\nproject.</p>\n<ul>\n<li><a href=\"https://github.com/amaurycrickx/recognito\" rel=\"nofollow\">recognito</a> : Works\nvery well on Pi, but data storage is not implemented.</li>\n<li><a href=\"https://code.google.com/archive/p/voiceid/\" rel=\"nofollow\">voiceid</a></li>\n<li><a href=\"http://mistral.univ-avignon.fr/\" rel=\"nofollow\">ALIZE</a></li>\n<li><a href=\"http://shout-toolkit.sourceforge.net/use_case_diarization.html\" rel=\"nofollow\">Shout</a></li>\n<li><a href=\"http://marf.sourceforge.net/docs/marf/0.3.0.6/report.pdf\" rel=\"nofollow\">MARF\nmanual</a></li>\n<li><a href=\"http://www-lium.univ-lemans.fr/diarization/doku.php/welcome\" rel=\"nofollow\">LIUM\nsite</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p><a href=\"./LICENSE\" rel=\"nofollow\">MIT</a></p>\n</div>\n\n          </div>"}, "last_serial": 3484133, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8880ef9e813ecd1222377313091f7c54", "sha256": "46e8b398471880b14c96d0a5f0cd5717ad513892a47a4ab0b4ea935db21a8994"}, "downloads": -1, "filename": "piwho-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8880ef9e813ecd1222377313091f7c54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 538246, "upload_time": "2016-07-20T15:18:54", "upload_time_iso_8601": "2016-07-20T15:18:54.764294Z", "url": "https://files.pythonhosted.org/packages/18/9b/f6a570a653ef917ca0b4a31d686dfad3d1f520ab2b9caa3fad77dc422bcc/piwho-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ee4522cecd52e3f242978ffe3559336b", "sha256": "0c3a2e1d12441bd39bde54c65f4112403bc6dfee750574250cf321357bd6633e"}, "downloads": -1, "filename": "piwho-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ee4522cecd52e3f242978ffe3559336b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 538413, "upload_time": "2016-08-20T06:36:35", "upload_time_iso_8601": "2016-08-20T06:36:35.455652Z", "url": "https://files.pythonhosted.org/packages/8e/00/d38efcd764daf653425ef82e55677db961ebfbed4e352d1508f509b5b5b3/piwho-1.1.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "ade402c851f6ce66f84100d006e36952", "sha256": "20f07f5a3bbd6bcad22d48ebe2f0ce76288241f1a2928919b387df5cf6b0df1e"}, "downloads": -1, "filename": "piwho-1.3.1.tar.gz", "has_sig": false, "md5_digest": "ade402c851f6ce66f84100d006e36952", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1025050, "upload_time": "2016-10-26T15:08:41", "upload_time_iso_8601": "2016-10-26T15:08:41.310220Z", "url": "https://files.pythonhosted.org/packages/98/3d/330fe3e3ea5e7f6a21faa99b9f3ed6b9db0852c0bb40b341fd233b8e630a/piwho-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "715b8a91d63ff31932dffae4fdecdc5d", "sha256": "9c108ef551d29fcfab547519d9e7b61b1c0227a37a5c67f59d801c97eea3fd96"}, "downloads": -1, "filename": "piwho-1.3.2.tar.gz", "has_sig": false, "md5_digest": "715b8a91d63ff31932dffae4fdecdc5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 882765, "upload_time": "2018-01-12T13:52:55", "upload_time_iso_8601": "2018-01-12T13:52:55.014553Z", "url": "https://files.pythonhosted.org/packages/2e/68/00a2f1dde6eaaf3cfb713c4337cae6e450f6f83e8cc93bb9f343d7478dcb/piwho-1.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "715b8a91d63ff31932dffae4fdecdc5d", "sha256": "9c108ef551d29fcfab547519d9e7b61b1c0227a37a5c67f59d801c97eea3fd96"}, "downloads": -1, "filename": "piwho-1.3.2.tar.gz", "has_sig": false, "md5_digest": "715b8a91d63ff31932dffae4fdecdc5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 882765, "upload_time": "2018-01-12T13:52:55", "upload_time_iso_8601": "2018-01-12T13:52:55.014553Z", "url": "https://files.pythonhosted.org/packages/2e/68/00a2f1dde6eaaf3cfb713c4337cae6e450f6f83e8cc93bb9f343d7478dcb/piwho-1.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:56 2020"}