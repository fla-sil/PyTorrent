{"info": {"author": "Noel De Martin", "author_email": "noeldemartin@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Rireki [![Github Actions Status](https://github.com/noeldemartin/rireki/workflows/Testing/badge.svg)](https://github.com/noeldemartin/rireki/actions)\n\nCLI backup tool.\n\n## Installation\n\nInstall the rireki cli running the following command:\n\n```sh\npip install rireki\n```\n\nYou need to call `rireki backup` in order for backups to be performed. For example, you could use the following crontab configuration to perform backup checks every hour (remember to create the `/var/log/rireki` directory as well):\n\n```sh\n0 * * * * rireki backup >> /var/log/rireki/cron.log 2>> /var/log/rireki/cron-error.log\n```\n\n## Usage\n\nGet detailed information running `rireki --help`.\n\nThere are three core concepts on how rireki manages backups:\n\n- **Projects:** A project is something you want to back up. For example a website database or a collection of files.\n\n- **Drivers:** A driver is the program used to create the backup files. For example zipping up a folder or dumping a database.\n\n- **Stores:** A store is the program used to save the backup files created with a driver. For example copying them to a local folder or uploading them to a 3rd party service.\n\nIn order to install a new project to backup, a configuration file can be added to `~/.rireki/projects/{project-name}.conf`. This will be a [toml](https://github.com/toml-lang/toml) configuration file. It can either be created manually or calling `rireki add {project-name}`.\n\n### Drivers\n\n#### Files\n\nThis driver creates an archive with files copied from the local filesystem. The archive will be a zip file if possible or a tar file.\n\nIt needs the following configuration:\n\n| property      | type          | description  |\n| ------------- |---------------| -------------|\n| name          | `\"files\"`     | The name of the driver. |\n| frequency     | `integer`     | The frequency in seconds at which new backups should be made. |\n| paths         | `string[]`    | Folders or files that will be included in the archive. |\n\n#### Custom\n\nThis driver can be used if backing up a project is not supported by any of the other drivers. It consists of a custom script that will be called to generate the backup artifacts. The backup files should be placed on a path indicated by the `RIREKI_BACKUP_PATH` env variable.\n\nOnce the script has completed, a file named `logs.json` will also be placed on the path with the standard output and standard error printed by the script.\n\nIt needs the following configuration:\n\n| property      | type          | description  |\n| ------------- |---------------| -------------|\n| name          | `\"custom\"`    | The name of the driver. |\n| frequency     | `integer`     | The frequency in seconds at which new backups should be made. |\n| command       | `string`      | Command to call in order to perform backups. |\n| timeout       | `integer`     | Number of seconds where the command will be timed out and the backup will fail. |\n\n### Stores\n\n#### Local\n\nThis store copies the backups to a folder in the same filesystem.\n\nIt needs the following configuration:\n\n| property      | type          | description  |\n| ------------- |---------------| -------------|\n| name          | `\"local\"`     | The name of the store. |\n| path          | `string`      | The path of the folder where the backups will be copied. |\n\n#### Amazon Web Services\n\nThis store uploads the backups to an AWS S3 instance.\n\nIt needs the following configuration:\n\n| property      | type          | description  |\n| ------------- |---------------| -------------|\n| name          | `\"aws\"`     | The name of the store. |\n| region        | `string`      | The region where the S3 instance is located. |\n| access_key    | `string`      | The access key ID. |\n| access_secret | `string`      | The secret access key. |\n| bucket        | `string`      | The name of the bucket where the files will be uploaded. |\n| path          | `string`      | The path within the bucket where the files will be placed. |\n\n#### Digital Ocean\n\nThis store uploads the backups to a Digital Ocean Spaces instance.\n\nIt uses the same configuration as the AWS store, with the only exception that the name is `\"digital-ocean\"` instead.\n\n### An example config file\n\nFor example, to backup a project named \"Foobar\" using the `files` driver and the `local` store we would create the following file at `~/.rireki/projects/foobar.conf`:\n\n```toml\nname=\"foobar\"\n\n[driver]\nname=\"files\"\npaths=[\"/path/to/data/folder\"]\nfrequency=1440\n\n[store]\nname=\"local\"\npath=\"/path/to/backups/folder\"\n```\n\nAs mentioned before, you could call `rireki add foobar` to create this file.\n\n## Development\n\nRun tests with `pytest` and lint your code with `flake8` (see the [Github Actions configuration](.github/workflows/testing.yml) for more details).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/noeldemartin/rireki", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rireki", "package_url": "https://pypi.org/project/rireki/", "platform": "", "project_url": "https://pypi.org/project/rireki/", "project_urls": {"Homepage": "https://github.com/noeldemartin/rireki"}, "release_url": "https://pypi.org/project/rireki/0.0.2/", "requires_dist": ["click", "toml", "boto3"], "requires_python": "", "summary": "CLI backup tool.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Rireki <a href=\"https://github.com/noeldemartin/rireki/actions\" rel=\"nofollow\"><img alt=\"Github Actions Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e50a5cebc0056d3254634dad5de7ab3191d0945/68747470733a2f2f6769746875622e636f6d2f6e6f656c64656d617274696e2f726972656b692f776f726b666c6f77732f54657374696e672f62616467652e737667\"></a></h1>\n<p>CLI backup tool.</p>\n<h2>Installation</h2>\n<p>Install the rireki cli running the following command:</p>\n<pre>pip install rireki\n</pre>\n<p>You need to call <code>rireki backup</code> in order for backups to be performed. For example, you could use the following crontab configuration to perform backup checks every hour (remember to create the <code>/var/log/rireki</code> directory as well):</p>\n<pre><span class=\"m\">0</span> * * * * rireki backup &gt;&gt; /var/log/rireki/cron.log <span class=\"m\">2</span>&gt;&gt; /var/log/rireki/cron-error.log\n</pre>\n<h2>Usage</h2>\n<p>Get detailed information running <code>rireki --help</code>.</p>\n<p>There are three core concepts on how rireki manages backups:</p>\n<ul>\n<li>\n<p><strong>Projects:</strong> A project is something you want to back up. For example a website database or a collection of files.</p>\n</li>\n<li>\n<p><strong>Drivers:</strong> A driver is the program used to create the backup files. For example zipping up a folder or dumping a database.</p>\n</li>\n<li>\n<p><strong>Stores:</strong> A store is the program used to save the backup files created with a driver. For example copying them to a local folder or uploading them to a 3rd party service.</p>\n</li>\n</ul>\n<p>In order to install a new project to backup, a configuration file can be added to <code>~/.rireki/projects/{project-name}.conf</code>. This will be a <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">toml</a> configuration file. It can either be created manually or calling <code>rireki add {project-name}</code>.</p>\n<h3>Drivers</h3>\n<h4>Files</h4>\n<p>This driver creates an archive with files copied from the local filesystem. The archive will be a zip file if possible or a tar file.</p>\n<p>It needs the following configuration:</p>\n<table>\n<thead>\n<tr>\n<th>property</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td><code>\"files\"</code></td>\n<td>The name of the driver.</td>\n</tr>\n<tr>\n<td>frequency</td>\n<td><code>integer</code></td>\n<td>The frequency in seconds at which new backups should be made.</td>\n</tr>\n<tr>\n<td>paths</td>\n<td><code>string[]</code></td>\n<td>Folders or files that will be included in the archive.</td>\n</tr></tbody></table>\n<h4>Custom</h4>\n<p>This driver can be used if backing up a project is not supported by any of the other drivers. It consists of a custom script that will be called to generate the backup artifacts. The backup files should be placed on a path indicated by the <code>RIREKI_BACKUP_PATH</code> env variable.</p>\n<p>Once the script has completed, a file named <code>logs.json</code> will also be placed on the path with the standard output and standard error printed by the script.</p>\n<p>It needs the following configuration:</p>\n<table>\n<thead>\n<tr>\n<th>property</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td><code>\"custom\"</code></td>\n<td>The name of the driver.</td>\n</tr>\n<tr>\n<td>frequency</td>\n<td><code>integer</code></td>\n<td>The frequency in seconds at which new backups should be made.</td>\n</tr>\n<tr>\n<td>command</td>\n<td><code>string</code></td>\n<td>Command to call in order to perform backups.</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td><code>integer</code></td>\n<td>Number of seconds where the command will be timed out and the backup will fail.</td>\n</tr></tbody></table>\n<h3>Stores</h3>\n<h4>Local</h4>\n<p>This store copies the backups to a folder in the same filesystem.</p>\n<p>It needs the following configuration:</p>\n<table>\n<thead>\n<tr>\n<th>property</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td><code>\"local\"</code></td>\n<td>The name of the store.</td>\n</tr>\n<tr>\n<td>path</td>\n<td><code>string</code></td>\n<td>The path of the folder where the backups will be copied.</td>\n</tr></tbody></table>\n<h4>Amazon Web Services</h4>\n<p>This store uploads the backups to an AWS S3 instance.</p>\n<p>It needs the following configuration:</p>\n<table>\n<thead>\n<tr>\n<th>property</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td><code>\"aws\"</code></td>\n<td>The name of the store.</td>\n</tr>\n<tr>\n<td>region</td>\n<td><code>string</code></td>\n<td>The region where the S3 instance is located.</td>\n</tr>\n<tr>\n<td>access_key</td>\n<td><code>string</code></td>\n<td>The access key ID.</td>\n</tr>\n<tr>\n<td>access_secret</td>\n<td><code>string</code></td>\n<td>The secret access key.</td>\n</tr>\n<tr>\n<td>bucket</td>\n<td><code>string</code></td>\n<td>The name of the bucket where the files will be uploaded.</td>\n</tr>\n<tr>\n<td>path</td>\n<td><code>string</code></td>\n<td>The path within the bucket where the files will be placed.</td>\n</tr></tbody></table>\n<h4>Digital Ocean</h4>\n<p>This store uploads the backups to a Digital Ocean Spaces instance.</p>\n<p>It uses the same configuration as the AWS store, with the only exception that the name is <code>\"digital-ocean\"</code> instead.</p>\n<h3>An example config file</h3>\n<p>For example, to backup a project named \"Foobar\" using the <code>files</code> driver and the <code>local</code> store we would create the following file at <code>~/.rireki/projects/foobar.conf</code>:</p>\n<pre><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"foobar\"</span>\n\n<span class=\"k\">[driver]</span>\n<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"files\"</span>\n<span class=\"n\">paths</span><span class=\"o\">=</span><span class=\"k\">[\"/path/to/data/folder\"]</span>\n<span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"mi\">1440</span>\n\n<span class=\"k\">[store]</span>\n<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">\"local\"</span>\n<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s\">\"/path/to/backups/folder\"</span>\n</pre>\n<p>As mentioned before, you could call <code>rireki add foobar</code> to create this file.</p>\n<h2>Development</h2>\n<p>Run tests with <code>pytest</code> and lint your code with <code>flake8</code> (see the <a href=\".github/workflows/testing.yml\" rel=\"nofollow\">Github Actions configuration</a> for more details).</p>\n\n          </div>"}, "last_serial": 6358532, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "670acbbb5f1c68b59dd5080083678ff1", "sha256": "04aab78b38b0aa12c51526cdcb314f453d6017c2fe910b635a2f363216ca92a8"}, "downloads": -1, "filename": "rireki-0.0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "670acbbb5f1c68b59dd5080083678ff1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 4235, "upload_time": "2019-12-25T11:18:26", "upload_time_iso_8601": "2019-12-25T11:18:26.351040Z", "url": "https://files.pythonhosted.org/packages/d2/e2/aae0f8e63794c0d2ac96bf15f6e4cab88e7c9ac91fb2e55211d6ff20991b/rireki-0.0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "162a7ecc19aa6170a4f882a11b3c63ee", "sha256": "a0901e8ff6e15ad20eac17a0ab608f0078ce7b897f16d81de2bab7c93389f9cc"}, "downloads": -1, "filename": "rireki-0.0.1.1.tar.gz", "has_sig": false, "md5_digest": "162a7ecc19aa6170a4f882a11b3c63ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4277, "upload_time": "2019-12-25T11:18:27", "upload_time_iso_8601": "2019-12-25T11:18:27.728439Z", "url": "https://files.pythonhosted.org/packages/b1/19/03f3403b812fc4a465110b05ad45f6b9af3f91789b91a93be4bd0b8e12b0/rireki-0.0.1.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e0696a6751d274afeec7c42ef723603", "sha256": "dad39a895e567a7cfef2ecf379880d16e5426c5c7bc0367ae4c50ff3f016817d"}, "downloads": -1, "filename": "rireki-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "3e0696a6751d274afeec7c42ef723603", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 4235, "upload_time": "2019-12-25T11:18:24", "upload_time_iso_8601": "2019-12-25T11:18:24.008955Z", "url": "https://files.pythonhosted.org/packages/73/a5/4589e31f311dd19e89a0b515f55384eff56a76623e00326f06b918ab0bd3/rireki-0.0.1-py2-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0b915d0b3d1abedfb8e1cea6c72f1173", "sha256": "4be7b95e95bb962e5435602d018a52c5a310e9d2189047035eb4d04f168524f1"}, "downloads": -1, "filename": "rireki-0.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "0b915d0b3d1abedfb8e1cea6c72f1173", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 23024, "upload_time": "2019-12-25T11:55:00", "upload_time_iso_8601": "2019-12-25T11:55:00.877605Z", "url": "https://files.pythonhosted.org/packages/a5/3d/31cef456e38ca196a6460e06d7c6e595be629204d2a3bd651b22aec7883b/rireki-0.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11faede75ad18b8ec6d9eb34fbb48fc9", "sha256": "806184a1a4d1f4dd4c9a52cabba59100371667c89a0331c180d6c3bf8419c3d6"}, "downloads": -1, "filename": "rireki-0.0.2.tar.gz", "has_sig": false, "md5_digest": "11faede75ad18b8ec6d9eb34fbb48fc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14450, "upload_time": "2019-12-25T11:55:02", "upload_time_iso_8601": "2019-12-25T11:55:02.569663Z", "url": "https://files.pythonhosted.org/packages/6f/c1/7bfc76c17dba14d7c04b9919cf1b90a228375cb44250bb9e25ec9c2012fd/rireki-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b915d0b3d1abedfb8e1cea6c72f1173", "sha256": "4be7b95e95bb962e5435602d018a52c5a310e9d2189047035eb4d04f168524f1"}, "downloads": -1, "filename": "rireki-0.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "0b915d0b3d1abedfb8e1cea6c72f1173", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 23024, "upload_time": "2019-12-25T11:55:00", "upload_time_iso_8601": "2019-12-25T11:55:00.877605Z", "url": "https://files.pythonhosted.org/packages/a5/3d/31cef456e38ca196a6460e06d7c6e595be629204d2a3bd651b22aec7883b/rireki-0.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11faede75ad18b8ec6d9eb34fbb48fc9", "sha256": "806184a1a4d1f4dd4c9a52cabba59100371667c89a0331c180d6c3bf8419c3d6"}, "downloads": -1, "filename": "rireki-0.0.2.tar.gz", "has_sig": false, "md5_digest": "11faede75ad18b8ec6d9eb34fbb48fc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14450, "upload_time": "2019-12-25T11:55:02", "upload_time_iso_8601": "2019-12-25T11:55:02.569663Z", "url": "https://files.pythonhosted.org/packages/6f/c1/7bfc76c17dba14d7c04b9919cf1b90a228375cb44250bb9e25ec9c2012fd/rireki-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:26 2020"}