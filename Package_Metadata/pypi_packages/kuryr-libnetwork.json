{"info": {"author": "OpenStack", "author_email": "openstack-discuss@lists.openstack.org", "bugtrack_url": null, "classifiers": ["Environment :: OpenStack", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "========================\nTeam and repository tags\n========================\n\n.. image:: https://governance.openstack.org/tc/badges/kuryr-libnetwork.svg\n    :target: https://governance.openstack.org/tc/reference/tags/index.html\n\n.. Change things from this point on\n\n================\nkuryr-libnetwork\n================\n\n.. image:: https://raw.githubusercontent.com/openstack/kuryr/master/doc/images/kuryr_logo.png\n    :alt: Kuryr mascot\n    :align: center\n\n\nDocker for OpenStack Neutron\n\nKuryr-libnetwork is `Kuryr's <https://github.com/openstack/kuryr>`_ Docker\nlibnetwork driver that uses Neutron to provide networking services. It provides\ncontainerised images for the common Neutron plugins.\n\nThis repo provides libnetwork specific functionalities such as handler methods\nfor libnetwork apis. All the logic/utilities that can be shared among\ndifferent container networking frameworks such as Docker's libnetwork,\nK8s's CNI and so on, is maintained in separate Kuryr repo as a common library.\n\n\n* Free software: Apache license\n* Documentation: https://docs.openstack.org/kuryr-libnetwork/latest/\n* Source: http://git.openstack.org/cgit/openstack/kuryr-libnetwork\n* Bugs: http://bugs.launchpad.net/kuryr-libnetwork\n\nFeatures\n--------\n\n* Docker libnetwork remote driver\n\n* Docker libnetwork IPAM driver\n\n* Support for Linux Bridge, Open vSwitch, Midonet, and IOvisor port bindings\n\n* Support for using existing Neutron networks::\n\n    docker network create -d kuryr --ipam-driver=kuryr --subnet=10.10.0.0/24 --gateway=10.10.0.1 \\\n       -o neutron.net.uuid=d98d1259-03d1-4b45-9b86-b039cba1d90d mynet\n\n    docker network create -d kuryr --ipam-driver=kuryr --subnet=10.10.0.0/24 --gateway=10.10.0.1 \\\n       -o neutron.net.name=my_neutron_net mynet\n\n* Support for using existing Neutron ports::\n\n    docker run -it --net=kuryr_net --ip=10.0.0.5 ubuntu\n\n    if a port in the corresponding subnet with the requested ip address\n    already exists and it is unbound, that port is used for the\n    container.\n\n* Support for the Docker \"expose\" option::\n\n    docker run --net=my_kuryr_net --expose=1234-1238/udp -it ubuntu\n\n    This feature is implemented by using Neutron security groups.\n\nGetting it running with a service container\n-------------------------------------------\n\nPrerequisites\n~~~~~~~~~~~~~\n\nThe necessary components for an operating environment to run Kuryr are:\n\n* Keystone (preferably configured with Keystone v3),\n* Neutron (preferably mitaka or newer),\n* DB management system such as MySQL or Mariadb (for Neutron and Keystone),\n* Neutron agents for the vendor you choose,\n* Rabbitmq if the Neutron agents for your vendor require it,\n* Docker 1.9+\n\nBuilding the container\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe Dockerfile in the root of this repository can be used to generate a wsgi\nKuryr Libnetwork server container with docker build::\n\n    docker build -t your_docker_username/libnetwork:latest .\n\nAdditionally, you can pull the upstream container::\n\n    docker pull kuryr/libnetwork:latest\n\nNote that you can also specify the tag of a stable release for the above\ncommand instead of *latest*.\n\nHow to run the container\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirst we prepare Docker to find the driver::\n\n    sudo mkdir -p /usr/lib/docker/plugins/kuryr\n    sudo curl -o /usr/lib/docker/plugins/kuryr/kuryr.spec \\\n    https://raw.githubusercontent.com/openstack/kuryr-libnetwork/master/etc/kuryr.spec\n    sudo service docker restart\n\nThen we start the container::\n\n    docker run --name kuryr-libnetwork \\\n      --net=host \\\n      --cap-add=NET_ADMIN \\\n      -e SERVICE_USER=admin \\\n      -e SERVICE_PROJECT_NAME=admin \\\n      -e SERVICE_PASSWORD=admin \\\n      -e SERVICE_DOMAIN_NAME=Default \\\n      -e USER_DOMAIN_NAME=Default \\\n      -e IDENTITY_URL=http://127.0.0.1:5000/v3 \\\n      -v /var/log/kuryr:/var/log/kuryr \\\n      -v /var/run/openvswitch:/var/run/openvswitch \\\n      kuryr/libnetwork\n\nWhere:\n\n* SERVICE_USER, SERVICE_PROJECT_NAME, SERVICE_PASSWORD, SERVICE_DOMAIN_NAME,\n  USER_DOMAIN_NAME are OpenStack credentials\n* IDENTITY_URL is the url to the OpenStack Keystone v3 endpoint\n* A volume is created so that the logs are available on the host\n* NET_ADMIN capabilities are given in order to perform network operations on\n  the host namespace like ovs-vsctl\n\nOther options you can set as '-e' parameters in Docker run:\n\n* CAPABILITY_SCOPE can be \"local\" or \"global\", the latter being for when there\n  is a cluster store plugged into the docker engine.\n* LOG_LEVEL for defining, for example, \"DEBUG\" logging messages.\n* PROCESSES for defining how many kuryr processes to use to handle the\n  libnetwork requests.\n\nNote that you will probably have to change the 127.0.0.1 IDENTITY_URL address\nfor the address where your Keystone is running. In this case it is 127.0.0.1\nbecause the example assumes running the container with *--net=host* on an all\nin one deployment where Keystone is also binding locally.\n\nAlternatively, if you have an existing kuryr.conf, you can use it for the\ncontainer::\n\n    docker run --name kuryr-libnetwork \\\n      --net host \\\n      --cap-add NET_ADMIN \\\n      -v /etc/kuryr:/etc/kuryr:ro \\\n      -v /var/log/kuryr:/var/log/kuryr:rw \\\n      -v /var/run/openvswitch:/var/run/openvswitch:rw \\\n      kuryr/libnetwork\n\n\nGetting it from source\n----------------------\n\n::\n\n    $ git clone https://git.openstack.org/openstack/kuryr-libnetwork\n    $ cd kuryr-libnetwork\n\n\nInstall prerequisites\n~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    $ sudo pip install -r requirements.txt\n\n\nInstalling Kuryr's libnetwork driver\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRunning the following will grab the requirements and install kuryr::\n\n    $ sudo pip install .\n\n\nConfiguring Kuryr\n~~~~~~~~~~~~~~~~~\n\nGenerate sample config, `etc/kuryr.conf.sample`, running the following::\n\n    $ ./tools/generate_config_file_samples.sh\n\n\nRename and copy config file at required path::\n\n    $ cp etc/kuryr.conf.sample /etc/kuryr/kuryr.conf\n\n\nFor using Keystone v3, edit the Neutron section in `/etc/kuryr/kuryr.conf`, replace ADMIN_PASSWORD::\n\n    [neutron]\n    auth_url = http://127.0.0.1:5000/v3/\n    username = admin\n    user_domain_name = Default\n    password = ADMIN_PASSWORD\n    project_name = service\n    project_domain_name = Default\n    auth_type = password\n\n\nAlternatively, for using Keystone v2, edit the Neutron section in `/etc/kuryr/kuryr.conf`, replace ADMIN_PASSWORD::\n\n    [neutron]\n    auth_url = http://127.0.0.1:5000/v2.0/\n    username = admin\n    password = ADMIN_PASSWORD\n    project_name = service\n    auth_type = password\n\n\nIn the same file uncomment the `bindir` parameter with the path for the Kuryr\nvif binding executables. For example, if you installed it on Debian or Ubuntu::\n\n    [DEFAULT]\n    bindir = /usr/local/libexec/kuryr\n\n\nRunning Kuryr\n~~~~~~~~~~~~~\n\nCurrently, Kuryr utilizes a bash script to start the service.\nMake sure that you have installed `tox` before the execution of\nthe following commands:\n\nIf SSL needs to be enabled follow this step or skip to next step::\n\n    $tox -egenconfig\n\n    Add these 3 parameters in generated file[etc/kuryr.conf.sample]:\n        ssl_cert_file <Absolute Path for Cert file>\n        ssl_key_file <Absolute Path for private key>\n        enable_ssl <True or False>\n\n    $export SSL_ENABLED=True\n\n    Add the path names in [contrib/tls/kuryr.json]:\n        InsecureSkipVerify <false/true>\n        CAFile: <Absolute Path for CA file>\n        CertFile: <Absolute Path for Cert file>\n        KeyFile: <Absolute Path for private key>\n\n    Placement of cert files:\n    By default Kuryr places it certs in /var/lib/kuryr/certs directory,\n    Please make sure that certs are on proper location as mentioned in kuryr.conf\n\n    Verification of kuryr.json:\n    Please make sure that your kuryr.json look similar to below sample\n    with appropiate paths of certs updated, and remove older .spec files\n    if any exists.\n    and https configuration url::\n        {\n          \"Name\": \"kuryr\",\n          \"Addr\": \"https://127.0.0.1:23750\",\n          \"TLSConfig\": {\n            \"InsecureSkipVerify\": false,\n            \"CAFile\": \"/var/lib/kuryr/certs/ca.pem\",\n            \"CertFile\": \"/var/lib/kuryr/certs/cert.pem\",\n            \"KeyFile\": \"/var/lib/kuryr/certs/key.pem\"\n          }\n        }\n\n    Optional:\n    For locally generating and testing, please refer to below link:\n        http://tech.paulcz.net/2016/01/secure-docker-with-tls/\n\nRun Kuryr Server with the command below. If you have uwsgi installed this\ncommand would run Kuryr under it. You can override this behaviour by\nsetting `KURYR_USE_UWSGI=False`::\n\n    $ sudo ./scripts/run_kuryr.sh\n\nAfter Kuryr starts, please restart your Docker service, e.g.::\n\n    $ sudo service docker restart\n\nThe bash script creates the following file if it is missing:\n\n* ``/usr/lib/docker/plugins/kuryr/kuryr.json``: Json spec file for libnetwork.\n\nNote the root privilege is required for creating and deleting the veth pairs\nwith `pyroute2 <http://docs.pyroute2.org/>`_ to run.\n\n\nkuryr-libnetwork docker managed pluginv2\n----------------------------------------\n\nHow to build kuryr-libnetwork docker managed pluginv2\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDocker Engine's `plugins system <https://docs.docker.com/engine/extend>`_\nallows you to install, start, stop, and remove plugins using Docker Engine\nfor docker 1.13 and older.\n\nDownload kuryr-libnetwork source code, and run\ncontrib/docker/v2plugin/v2plugin_rootfs.sh in the top folder of\nkuryr-libentwork. This script will copy config.json to the top\nfolder and build rootfs. ::\n\n    $ git clone https://git.openstack.org/openstack/kuryr-libnetwork\n    $ cd kuryr-libnetwork\n    $ ./contrib/docker/v2plugin/v2plugin_rootfs.sh\n    $ docker plugin create kuryr/libnetwork2 ./\n\n\nHow to use kuryr-libnetwork docker managed pluginv2\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf user build pluginv2 locally, user need to enable pluginv2. ::\n\n    $ docker plugin enable kuryr/libnetwork2\n\nIf user install pluginv2 from docker hub, the pluginv2 will be enabled\ndirectly after install. ::\n\n    $ docker plugin install kuryr/libnetwork2\n\nWhen user create kuryr network, driver name and ipam-driver name are\nkuryr/libnetwork2:latest  ::\n\n    $ docker network create --driver=kuryr/libnetwork2:latest --ipam-driver=kuryr/libnetwork2:latest ...\n\n\nHow to try out nested-containers locally\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. Installing OpenStack running devstack with the desired local.conf file but\n   including the next to make use of OVS-firewall and enabling Trunk Ports::\n\n    [[post-config|/$Q_PLUGIN_CONF_FILE]]\n\n    [DEFAULT]\n    service_plugins=trunk\n\n    [securitygroup]\n    firewall_driver=openvswitch\n\n2. Launch a VM with `Neutron trunk port.\n   <https://wiki.openstack.org/wiki/Neutron/TrunkPort>`\n\n3. Inside the VM install kuryr and kuryr-libnetwork following the normal\n   installation steps (see above steps at `Installing Kuryr's libnetwork\n   driver`).\n\n4. Reconfigure kuryr inside the VM to point to the neutron server and to use the\n   vlan driver:\n\n    - Configure `/etc/kuryr/kuryr.conf`::\n\n        [binding]\n        driver = kuryr.lib.binding.drivers.vlan\n        link_iface = eth0 # VM vNIC\n\n        [neutron]\n        auth_url = http://KEYSTONE_SERVER_IP:5000/v3/\n        username = admin\n        user_domain_name = Default\n        password = ADMIN_PASSWORD\n        project_name = service\n        project_domain_name = Default\n        auth_type = password\n\n    - Restart kuryr service inside the VM\n\n\nKnown nested-containers limitations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. Due to the `Neutron Trunk service implementation choice  <https://github.com/openstack/neutron/blob/master/doc/source/devref/openvswitch_agent.rst#tackling-the-network-trunking-use-case>`_\n   deployments with iptables hybrid security groups driver do not support\n   trunk service.\n\n2. QoS rules are not applied properly on sub-ports due to a `Neutron bug\n   <https://bugs.launchpad.net/neutron/+bug/1639186>`_, i.e. nested-container\n   port.\n\n\nTesting Kuryr\n-------------\n\nFor a quick check that Kuryr is working, create a IPv4 network::\n\n    $ docker network create --driver kuryr --ipam-driver kuryr \\\n    --subnet 10.10.0.0/16 --gateway=10.10.0.1 test_v4_net\n    785f8c1b5ae480c4ebcb54c1c48ab875754e4680d915b270279e4f6a1aa52283\n    $ docker network ls\n    NETWORK ID          NAME                   DRIVER           SCOPE\n    785f8c1b5ae4        test_v4_net            kuryr            local\n\nOr you can test with a dual-stack network::\n\n    $ docker network create --driver kuryr --ipam-driver kuryr \\\n    --subnet 10.20.0.0/16 --gateway=10.20.0.1 --ipv6 --subnet 2001:db8:a0b:12f0::/64 \\\n    --gateway 2001:db8:a0b:12f0::1 test_net\n    81e1a12eedfb168fbe73186faec4db5088aae4457244f960f38e14f4338e5760\n    $ docker network ls\n    NETWORK ID          NAME                DRIVER              SCOPE\n    81e1a12eedfb        test_net            kuryr               local\n\nKnown IPv6 network limitations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDue to the `Docker --ipv6 tag bug <https://github.com/docker/docker/issues/28055>`_ version\n1.12 and 1.13 have problem to create network only with IPv6.\n\n\nGenerating Documentation\n------------------------\n\n\nWe use `Sphinx <https://pypi.org/project/Sphinx>`_ to maintain the\ndocumentation. You can install Sphinx using pip::\n\n    $ pip install -U Sphinx\n\nIn addition to Sphinx you will also need the following requirements\n(not covered by `requirements.txt`)::\n\n    $ pip install openstackdocstheme reno 'reno[sphinx]'\n\nThe source code of the documentation are under *doc*, you can generate the\nhtml files using the following command. If the generation succeeds,a\n*build/html* dir will be created under *doc*::\n\n    $ cd doc\n    $ make html\n\nNow you can serve the documentation at http://localhost:8080 as a simple\nwebsite::\n\n    $ cd build/html\n    $ python -m SimpleHTTPServer 8080\n\nLimitations\n-----------\n\nDocker 1.12 with SwarmKit (the new Swarm) does not support remote\ndrivers. Therefore, it cannot be used with Kuryr. This limitation is\nto be removed in Docker 1.13.\n\nTo create Docker networks with subnets having same/overlapping cidr, it is\nexpected to pre-create Neutron subnetpool and pass the pool name for each\nsuch network creation Docker command. Docker cli options -o and --ipam-opt\nshould be used to pass pool names as shown below::\n\n    $ neutron subnetpool-create --pool-prefix 10.0.0.0/24 neutron_pool1\n    $ sudo docker network create --driver=kuryr --ipam-driver=kuryr \\\n      --subnet 10.0.0.0/16 --gateway=10.0.0.1 --ip-range 10.0.0.0/24 \\\n      -o neutron.pool.name=neutron_pool1 \\\n      --ipam-opt=neutron.pool.name=neutron_pool1 \\\n      foo\n      eddb51ebca09339cb17aaec05e48ffe60659ced6f3fc41b020b0eb506d364\n\nNow Docker user creates another network with same cidr as the previous one,\ni.e 10.0.0.0/16, but with different pool name, neutron_pool2::\n\n    $ neutron subnetpool-create --pool-prefix 10.0.0.0/24 neutron_pool2\n    $ sudo docker network create --driver=kuryr --ipam-driver=kuryr \\\n      --subnet 10.0.0.0/16 --gateway=10.0.0.1 --ip-range 10.0.0.0/24 \\\n      -o neutron.pool.name=neutron_pool2 \\\n      --ipam-opt=neutron.pool.name=neutron_pool2 \\\n      bar\n      397badb51ebca09339cb17aaec05e48ffe60659ced6f3fc41b020b0eb506d786\n\nAlternatively, Docker user can pass an existing pool uuid if there are multiple\npools with the same name::\n\n    $ sudo sudo docker network create --driver=kuryr --ipam-driver=kuryr \\\n      --subnet 10.0.0.0/16 --gateway=10.0.0.1 --ip-range 10.0.0.0/24 \\\n      -o neutron.pool.uuid=2d5767a4-6c96-4522-ab1d-a06d7adc9e23 \\\n      --ipam-opt=neutron.pool.uuid=2d5767a4-6c96-4522-ab1d-a06d7adc9e23 \\\n      bar\n      0aed1efbe21f6c29dc77eccd0dd17ba729274f9275070e1469230c864f9054ff\n\n\nExternal Resources\n------------------\n\nThe latest and most in-depth documentation is available at:\n    <https://github.com/openstack/kuryr/tree/master/doc/source>\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://docs.openstack.org/kuryr-libnetwork/latest/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "kuryr-libnetwork", "package_url": "https://pypi.org/project/kuryr-libnetwork/", "platform": "", "project_url": "https://pypi.org/project/kuryr-libnetwork/", "project_urls": {"Homepage": "https://docs.openstack.org/kuryr-libnetwork/latest/"}, "release_url": "https://pypi.org/project/kuryr-libnetwork/4.0.0/", "requires_dist": ["Babel (!=2.4.0,>=2.3.4)", "Flask (!=0.11,>=0.10)", "jsonschema (<3.0.0,>=2.6.0)", "kuryr-lib (>=0.5.0)", "neutron-lib (>=1.13.0)", "os-client-config (>=1.28.0)", "oslo.concurrency (>=3.25.0)", "oslo.config (>=5.2.0)", "oslo.log (>=3.36.0)", "oslo.utils (>=3.33.0)", "pbr (!=2.1.0,>=2.0.0)", "python-neutronclient (>=6.7.0)", "six (>=1.10.0)", "ipaddress (>=1.0.17) ; (python_version<'3.3')"], "requires_python": "", "summary": "Docker libnetwork driver for OpenStack Neutron", "version": "4.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"team-and-repository-tags\">\n<h2>Team and repository tags</h2>\n<a href=\"https://governance.openstack.org/tc/reference/tags/index.html\" rel=\"nofollow\"><img alt=\"https://governance.openstack.org/tc/badges/kuryr-libnetwork.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e05e45acf055ca189c84f999f08d71e1219f887/68747470733a2f2f676f7665726e616e63652e6f70656e737461636b2e6f72672f74632f6261646765732f6b757279722d6c69626e6574776f726b2e737667\"></a>\n</div>\n<div id=\"kuryr-libnetwork\">\n<h2>kuryr-libnetwork</h2>\n<img alt=\"Kuryr mascot\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7bb3d9a3e816e16b0109d80ac43911d366ac7fc0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6f70656e737461636b2f6b757279722f6d61737465722f646f632f696d616765732f6b757279725f6c6f676f2e706e67\">\n<p>Docker for OpenStack Neutron</p>\n<p>Kuryr-libnetwork is <a href=\"https://github.com/openstack/kuryr\" rel=\"nofollow\">Kuryr\u2019s</a> Docker\nlibnetwork driver that uses Neutron to provide networking services. It provides\ncontainerised images for the common Neutron plugins.</p>\n<p>This repo provides libnetwork specific functionalities such as handler methods\nfor libnetwork apis. All the logic/utilities that can be shared among\ndifferent container networking frameworks such as Docker\u2019s libnetwork,\nK8s\u2019s CNI and so on, is maintained in separate Kuryr repo as a common library.</p>\n<ul>\n<li>Free software: Apache license</li>\n<li>Documentation: <a href=\"https://docs.openstack.org/kuryr-libnetwork/latest/\" rel=\"nofollow\">https://docs.openstack.org/kuryr-libnetwork/latest/</a></li>\n<li>Source: <a href=\"http://git.openstack.org/cgit/openstack/kuryr-libnetwork\" rel=\"nofollow\">http://git.openstack.org/cgit/openstack/kuryr-libnetwork</a></li>\n<li>Bugs: <a href=\"http://bugs.launchpad.net/kuryr-libnetwork\" rel=\"nofollow\">http://bugs.launchpad.net/kuryr-libnetwork</a></li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li><p>Docker libnetwork remote driver</p>\n</li>\n<li><p>Docker libnetwork IPAM driver</p>\n</li>\n<li><p>Support for Linux Bridge, Open vSwitch, Midonet, and IOvisor port bindings</p>\n</li>\n<li><p>Support for using existing Neutron networks:</p>\n<pre>docker network create -d kuryr --ipam-driver=kuryr --subnet=10.10.0.0/24 --gateway=10.10.0.1 \\\n   -o neutron.net.uuid=d98d1259-03d1-4b45-9b86-b039cba1d90d mynet\n\ndocker network create -d kuryr --ipam-driver=kuryr --subnet=10.10.0.0/24 --gateway=10.10.0.1 \\\n   -o neutron.net.name=my_neutron_net mynet\n</pre>\n</li>\n<li><p>Support for using existing Neutron ports:</p>\n<pre>docker run -it --net=kuryr_net --ip=10.0.0.5 ubuntu\n\nif a port in the corresponding subnet with the requested ip address\nalready exists and it is unbound, that port is used for the\ncontainer.\n</pre>\n</li>\n<li><p>Support for the Docker \u201cexpose\u201d option:</p>\n<pre>docker run --net=my_kuryr_net --expose=1234-1238/udp -it ubuntu\n\nThis feature is implemented by using Neutron security groups.\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"getting-it-running-with-a-service-container\">\n<h3>Getting it running with a service container</h3>\n<div id=\"prerequisites\">\n<h4>Prerequisites</h4>\n<p>The necessary components for an operating environment to run Kuryr are:</p>\n<ul>\n<li>Keystone (preferably configured with Keystone v3),</li>\n<li>Neutron (preferably mitaka or newer),</li>\n<li>DB management system such as MySQL or Mariadb (for Neutron and Keystone),</li>\n<li>Neutron agents for the vendor you choose,</li>\n<li>Rabbitmq if the Neutron agents for your vendor require it,</li>\n<li>Docker 1.9+</li>\n</ul>\n</div>\n<div id=\"building-the-container\">\n<h4>Building the container</h4>\n<p>The Dockerfile in the root of this repository can be used to generate a wsgi\nKuryr Libnetwork server container with docker build:</p>\n<pre>docker build -t your_docker_username/libnetwork:latest .\n</pre>\n<p>Additionally, you can pull the upstream container:</p>\n<pre>docker pull kuryr/libnetwork:latest\n</pre>\n<p>Note that you can also specify the tag of a stable release for the above\ncommand instead of <em>latest</em>.</p>\n</div>\n<div id=\"how-to-run-the-container\">\n<h4>How to run the container</h4>\n<p>First we prepare Docker to find the driver:</p>\n<pre>sudo mkdir -p /usr/lib/docker/plugins/kuryr\nsudo curl -o /usr/lib/docker/plugins/kuryr/kuryr.spec \\\nhttps://raw.githubusercontent.com/openstack/kuryr-libnetwork/master/etc/kuryr.spec\nsudo service docker restart\n</pre>\n<p>Then we start the container:</p>\n<pre>docker run --name kuryr-libnetwork \\\n  --net=host \\\n  --cap-add=NET_ADMIN \\\n  -e SERVICE_USER=admin \\\n  -e SERVICE_PROJECT_NAME=admin \\\n  -e SERVICE_PASSWORD=admin \\\n  -e SERVICE_DOMAIN_NAME=Default \\\n  -e USER_DOMAIN_NAME=Default \\\n  -e IDENTITY_URL=http://127.0.0.1:5000/v3 \\\n  -v /var/log/kuryr:/var/log/kuryr \\\n  -v /var/run/openvswitch:/var/run/openvswitch \\\n  kuryr/libnetwork\n</pre>\n<p>Where:</p>\n<ul>\n<li>SERVICE_USER, SERVICE_PROJECT_NAME, SERVICE_PASSWORD, SERVICE_DOMAIN_NAME,\nUSER_DOMAIN_NAME are OpenStack credentials</li>\n<li>IDENTITY_URL is the url to the OpenStack Keystone v3 endpoint</li>\n<li>A volume is created so that the logs are available on the host</li>\n<li>NET_ADMIN capabilities are given in order to perform network operations on\nthe host namespace like ovs-vsctl</li>\n</ul>\n<p>Other options you can set as \u2018-e\u2019 parameters in Docker run:</p>\n<ul>\n<li>CAPABILITY_SCOPE can be \u201clocal\u201d or \u201cglobal\u201d, the latter being for when there\nis a cluster store plugged into the docker engine.</li>\n<li>LOG_LEVEL for defining, for example, \u201cDEBUG\u201d logging messages.</li>\n<li>PROCESSES for defining how many kuryr processes to use to handle the\nlibnetwork requests.</li>\n</ul>\n<p>Note that you will probably have to change the 127.0.0.1 IDENTITY_URL address\nfor the address where your Keystone is running. In this case it is 127.0.0.1\nbecause the example assumes running the container with <em>\u2013net=host</em> on an all\nin one deployment where Keystone is also binding locally.</p>\n<p>Alternatively, if you have an existing kuryr.conf, you can use it for the\ncontainer:</p>\n<pre>docker run --name kuryr-libnetwork \\\n  --net host \\\n  --cap-add NET_ADMIN \\\n  -v /etc/kuryr:/etc/kuryr:ro \\\n  -v /var/log/kuryr:/var/log/kuryr:rw \\\n  -v /var/run/openvswitch:/var/run/openvswitch:rw \\\n  kuryr/libnetwork\n</pre>\n</div>\n</div>\n<div id=\"getting-it-from-source\">\n<h3>Getting it from source</h3>\n<pre>$ git clone https://git.openstack.org/openstack/kuryr-libnetwork\n$ cd kuryr-libnetwork\n</pre>\n<div id=\"install-prerequisites\">\n<h4>Install prerequisites</h4>\n<pre>$ sudo pip install -r requirements.txt\n</pre>\n</div>\n<div id=\"installing-kuryr-s-libnetwork-driver\">\n<h4>Installing Kuryr\u2019s libnetwork driver</h4>\n<p>Running the following will grab the requirements and install kuryr:</p>\n<pre>$ sudo pip install .\n</pre>\n</div>\n<div id=\"configuring-kuryr\">\n<h4>Configuring Kuryr</h4>\n<p>Generate sample config, <cite>etc/kuryr.conf.sample</cite>, running the following:</p>\n<pre>$ ./tools/generate_config_file_samples.sh\n</pre>\n<p>Rename and copy config file at required path:</p>\n<pre>$ cp etc/kuryr.conf.sample /etc/kuryr/kuryr.conf\n</pre>\n<p>For using Keystone v3, edit the Neutron section in <cite>/etc/kuryr/kuryr.conf</cite>, replace ADMIN_PASSWORD:</p>\n<pre>[neutron]\nauth_url = http://127.0.0.1:5000/v3/\nusername = admin\nuser_domain_name = Default\npassword = ADMIN_PASSWORD\nproject_name = service\nproject_domain_name = Default\nauth_type = password\n</pre>\n<p>Alternatively, for using Keystone v2, edit the Neutron section in <cite>/etc/kuryr/kuryr.conf</cite>, replace ADMIN_PASSWORD:</p>\n<pre>[neutron]\nauth_url = http://127.0.0.1:5000/v2.0/\nusername = admin\npassword = ADMIN_PASSWORD\nproject_name = service\nauth_type = password\n</pre>\n<p>In the same file uncomment the <cite>bindir</cite> parameter with the path for the Kuryr\nvif binding executables. For example, if you installed it on Debian or Ubuntu:</p>\n<pre>[DEFAULT]\nbindir = /usr/local/libexec/kuryr\n</pre>\n</div>\n<div id=\"running-kuryr\">\n<h4>Running Kuryr</h4>\n<p>Currently, Kuryr utilizes a bash script to start the service.\nMake sure that you have installed <cite>tox</cite> before the execution of\nthe following commands:</p>\n<p>If SSL needs to be enabled follow this step or skip to next step:</p>\n<pre>$tox -egenconfig\n\nAdd these 3 parameters in generated file[etc/kuryr.conf.sample]:\n    ssl_cert_file &lt;Absolute Path for Cert file&gt;\n    ssl_key_file &lt;Absolute Path for private key&gt;\n    enable_ssl &lt;True or False&gt;\n\n$export SSL_ENABLED=True\n\nAdd the path names in [contrib/tls/kuryr.json]:\n    InsecureSkipVerify &lt;false/true&gt;\n    CAFile: &lt;Absolute Path for CA file&gt;\n    CertFile: &lt;Absolute Path for Cert file&gt;\n    KeyFile: &lt;Absolute Path for private key&gt;\n\nPlacement of cert files:\nBy default Kuryr places it certs in /var/lib/kuryr/certs directory,\nPlease make sure that certs are on proper location as mentioned in kuryr.conf\n\nVerification of kuryr.json:\nPlease make sure that your kuryr.json look similar to below sample\nwith appropiate paths of certs updated, and remove older .spec files\nif any exists.\nand https configuration url::\n    {\n      \"Name\": \"kuryr\",\n      \"Addr\": \"https://127.0.0.1:23750\",\n      \"TLSConfig\": {\n        \"InsecureSkipVerify\": false,\n        \"CAFile\": \"/var/lib/kuryr/certs/ca.pem\",\n        \"CertFile\": \"/var/lib/kuryr/certs/cert.pem\",\n        \"KeyFile\": \"/var/lib/kuryr/certs/key.pem\"\n      }\n    }\n\nOptional:\nFor locally generating and testing, please refer to below link:\n    http://tech.paulcz.net/2016/01/secure-docker-with-tls/\n</pre>\n<p>Run Kuryr Server with the command below. If you have uwsgi installed this\ncommand would run Kuryr under it. You can override this behaviour by\nsetting <cite>KURYR_USE_UWSGI=False</cite>:</p>\n<pre>$ sudo ./scripts/run_kuryr.sh\n</pre>\n<p>After Kuryr starts, please restart your Docker service, e.g.:</p>\n<pre>$ sudo service docker restart\n</pre>\n<p>The bash script creates the following file if it is missing:</p>\n<ul>\n<li><tt>/usr/lib/docker/plugins/kuryr/kuryr.json</tt>: Json spec file for libnetwork.</li>\n</ul>\n<p>Note the root privilege is required for creating and deleting the veth pairs\nwith <a href=\"http://docs.pyroute2.org/\" rel=\"nofollow\">pyroute2</a> to run.</p>\n</div>\n</div>\n<div id=\"kuryr-libnetwork-docker-managed-pluginv2\">\n<h3>kuryr-libnetwork docker managed pluginv2</h3>\n<div id=\"how-to-build-kuryr-libnetwork-docker-managed-pluginv2\">\n<h4>How to build kuryr-libnetwork docker managed pluginv2</h4>\n<p>Docker Engine\u2019s <a href=\"https://docs.docker.com/engine/extend\" rel=\"nofollow\">plugins system</a>\nallows you to install, start, stop, and remove plugins using Docker Engine\nfor docker 1.13 and older.</p>\n<p>Download kuryr-libnetwork source code, and run\ncontrib/docker/v2plugin/v2plugin_rootfs.sh in the top folder of\nkuryr-libentwork. This script will copy config.json to the top\nfolder and build rootfs.</p>\n<pre>$ git clone https://git.openstack.org/openstack/kuryr-libnetwork\n$ cd kuryr-libnetwork\n$ ./contrib/docker/v2plugin/v2plugin_rootfs.sh\n$ docker plugin create kuryr/libnetwork2 ./\n</pre>\n</div>\n<div id=\"how-to-use-kuryr-libnetwork-docker-managed-pluginv2\">\n<h4>How to use kuryr-libnetwork docker managed pluginv2</h4>\n<p>If user build pluginv2 locally, user need to enable pluginv2.</p>\n<pre>$ docker plugin enable kuryr/libnetwork2\n</pre>\n<p>If user install pluginv2 from docker hub, the pluginv2 will be enabled\ndirectly after install.</p>\n<pre>$ docker plugin install kuryr/libnetwork2\n</pre>\n<p>When user create kuryr network, driver name and ipam-driver name are\nkuryr/libnetwork2:latest</p>\n<pre>$ docker network create --driver=kuryr/libnetwork2:latest --ipam-driver=kuryr/libnetwork2:latest ...\n</pre>\n</div>\n<div id=\"how-to-try-out-nested-containers-locally\">\n<h4>How to try out nested-containers locally</h4>\n<ol>\n<li><p>Installing OpenStack running devstack with the desired local.conf file but\nincluding the next to make use of OVS-firewall and enabling Trunk Ports:</p>\n<pre>[[post-config|/$Q_PLUGIN_CONF_FILE]]\n\n[DEFAULT]\nservice_plugins=trunk\n\n[securitygroup]\nfirewall_driver=openvswitch\n</pre>\n</li>\n<li><p>Launch a VM with <cite>Neutron trunk port.\n&lt;https://wiki.openstack.org/wiki/Neutron/TrunkPort&gt;</cite></p>\n</li>\n<li><p>Inside the VM install kuryr and kuryr-libnetwork following the normal\ninstallation steps (see above steps at <cite>Installing Kuryr\u2019s libnetwork\ndriver</cite>).</p>\n</li>\n<li><p>Reconfigure kuryr inside the VM to point to the neutron server and to use the\nvlan driver:</p>\n<blockquote>\n<ul>\n<li><p>Configure <cite>/etc/kuryr/kuryr.conf</cite>:</p>\n<pre>[binding]\ndriver = kuryr.lib.binding.drivers.vlan\nlink_iface = eth0 # VM vNIC\n\n[neutron]\nauth_url = http://KEYSTONE_SERVER_IP:5000/v3/\nusername = admin\nuser_domain_name = Default\npassword = ADMIN_PASSWORD\nproject_name = service\nproject_domain_name = Default\nauth_type = password\n</pre>\n</li>\n<li><p>Restart kuryr service inside the VM</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n</div>\n<div id=\"known-nested-containers-limitations\">\n<h4>Known nested-containers limitations</h4>\n<ol>\n<li>Due to the <a href=\"https://github.com/openstack/neutron/blob/master/doc/source/devref/openvswitch_agent.rst#tackling-the-network-trunking-use-case\" rel=\"nofollow\">Neutron Trunk service implementation choice</a>\ndeployments with iptables hybrid security groups driver do not support\ntrunk service.</li>\n<li>QoS rules are not applied properly on sub-ports due to a <a href=\"https://bugs.launchpad.net/neutron/+bug/1639186\" rel=\"nofollow\">Neutron bug</a>, i.e. nested-container\nport.</li>\n</ol>\n</div>\n</div>\n<div id=\"testing-kuryr\">\n<h3>Testing Kuryr</h3>\n<p>For a quick check that Kuryr is working, create a IPv4 network:</p>\n<pre>$ docker network create --driver kuryr --ipam-driver kuryr \\\n--subnet 10.10.0.0/16 --gateway=10.10.0.1 test_v4_net\n785f8c1b5ae480c4ebcb54c1c48ab875754e4680d915b270279e4f6a1aa52283\n$ docker network ls\nNETWORK ID          NAME                   DRIVER           SCOPE\n785f8c1b5ae4        test_v4_net            kuryr            local\n</pre>\n<p>Or you can test with a dual-stack network:</p>\n<pre>$ docker network create --driver kuryr --ipam-driver kuryr \\\n--subnet 10.20.0.0/16 --gateway=10.20.0.1 --ipv6 --subnet 2001:db8:a0b:12f0::/64 \\\n--gateway 2001:db8:a0b:12f0::1 test_net\n81e1a12eedfb168fbe73186faec4db5088aae4457244f960f38e14f4338e5760\n$ docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\n81e1a12eedfb        test_net            kuryr               local\n</pre>\n<div id=\"known-ipv6-network-limitations\">\n<h4>Known IPv6 network limitations</h4>\n<p>Due to the <a href=\"https://github.com/docker/docker/issues/28055\" rel=\"nofollow\">Docker \u2013ipv6 tag bug</a> version\n1.12 and 1.13 have problem to create network only with IPv6.</p>\n</div>\n</div>\n<div id=\"generating-documentation\">\n<h3>Generating Documentation</h3>\n<p>We use <a href=\"https://pypi.org/project/Sphinx\" rel=\"nofollow\">Sphinx</a> to maintain the\ndocumentation. You can install Sphinx using pip:</p>\n<pre>$ pip install -U Sphinx\n</pre>\n<p>In addition to Sphinx you will also need the following requirements\n(not covered by <cite>requirements.txt</cite>):</p>\n<pre>$ pip install openstackdocstheme reno 'reno[sphinx]'\n</pre>\n<p>The source code of the documentation are under <em>doc</em>, you can generate the\nhtml files using the following command. If the generation succeeds,a\n<em>build/html</em> dir will be created under <em>doc</em>:</p>\n<pre>$ cd doc\n$ make html\n</pre>\n<p>Now you can serve the documentation at <a href=\"http://localhost:8080\" rel=\"nofollow\">http://localhost:8080</a> as a simple\nwebsite:</p>\n<pre>$ cd build/html\n$ python -m SimpleHTTPServer 8080\n</pre>\n</div>\n<div id=\"limitations\">\n<h3>Limitations</h3>\n<p>Docker 1.12 with SwarmKit (the new Swarm) does not support remote\ndrivers. Therefore, it cannot be used with Kuryr. This limitation is\nto be removed in Docker 1.13.</p>\n<p>To create Docker networks with subnets having same/overlapping cidr, it is\nexpected to pre-create Neutron subnetpool and pass the pool name for each\nsuch network creation Docker command. Docker cli options -o and \u2013ipam-opt\nshould be used to pass pool names as shown below:</p>\n<pre>$ neutron subnetpool-create --pool-prefix 10.0.0.0/24 neutron_pool1\n$ sudo docker network create --driver=kuryr --ipam-driver=kuryr \\\n  --subnet 10.0.0.0/16 --gateway=10.0.0.1 --ip-range 10.0.0.0/24 \\\n  -o neutron.pool.name=neutron_pool1 \\\n  --ipam-opt=neutron.pool.name=neutron_pool1 \\\n  foo\n  eddb51ebca09339cb17aaec05e48ffe60659ced6f3fc41b020b0eb506d364\n</pre>\n<p>Now Docker user creates another network with same cidr as the previous one,\ni.e 10.0.0.0/16, but with different pool name, neutron_pool2:</p>\n<pre>$ neutron subnetpool-create --pool-prefix 10.0.0.0/24 neutron_pool2\n$ sudo docker network create --driver=kuryr --ipam-driver=kuryr \\\n  --subnet 10.0.0.0/16 --gateway=10.0.0.1 --ip-range 10.0.0.0/24 \\\n  -o neutron.pool.name=neutron_pool2 \\\n  --ipam-opt=neutron.pool.name=neutron_pool2 \\\n  bar\n  397badb51ebca09339cb17aaec05e48ffe60659ced6f3fc41b020b0eb506d786\n</pre>\n<p>Alternatively, Docker user can pass an existing pool uuid if there are multiple\npools with the same name:</p>\n<pre>$ sudo sudo docker network create --driver=kuryr --ipam-driver=kuryr \\\n  --subnet 10.0.0.0/16 --gateway=10.0.0.1 --ip-range 10.0.0.0/24 \\\n  -o neutron.pool.uuid=2d5767a4-6c96-4522-ab1d-a06d7adc9e23 \\\n  --ipam-opt=neutron.pool.uuid=2d5767a4-6c96-4522-ab1d-a06d7adc9e23 \\\n  bar\n  0aed1efbe21f6c29dc77eccd0dd17ba729274f9275070e1469230c864f9054ff\n</pre>\n</div>\n<div id=\"external-resources\">\n<h3>External Resources</h3>\n<dl>\n<dt>The latest and most in-depth documentation is available at:</dt>\n<dd>&lt;<a href=\"https://github.com/openstack/kuryr/tree/master/doc/source\" rel=\"nofollow\">https://github.com/openstack/kuryr/tree/master/doc/source</a>&gt;</dd>\n</dl>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7077912, "releases": {"0.0.1.dev523": [{"comment_text": "", "digests": {"md5": "e14f621172ab10744aa57b609fb7e437", "sha256": "cede0b5a2ad0be88a5b1a4381cb3333dd6e24eb7a87b2c0a6a4664f0f547e507"}, "downloads": -1, "filename": "kuryr_libnetwork-0.0.1.dev523-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e14f621172ab10744aa57b609fb7e437", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 69948, "upload_time": "2016-08-18T16:45:10", "upload_time_iso_8601": "2016-08-18T16:45:10.579605Z", "url": "https://files.pythonhosted.org/packages/f2/39/690968f2a9014d8394f5942771a2ebfac61138fd13b35cdc4d9a91b63a97/kuryr_libnetwork-0.0.1.dev523-py2.py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "87ddb1b201a47413f9b21d0b1e62e20c", "sha256": "aed77b547200106eef3eae2082fcfd4508234a621c981bcfc6643e8874bb42db"}, "downloads": -1, "filename": "kuryr_libnetwork-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "87ddb1b201a47413f9b21d0b1e62e20c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 108580, "upload_time": "2017-03-22T10:09:07", "upload_time_iso_8601": "2017-03-22T10:09:07.374840Z", "url": "https://files.pythonhosted.org/packages/84/85/92f40d7fa582b808d4b4467a0e90e2889b741deb9192bdfd731c15031465/kuryr_libnetwork-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b72a8c1cbbb6966620a12ebf2343f23d", "sha256": "1b7552e4f58541cd8f1a5b0363c4c0a83d08a785a8d2493536a8f7df00a06771"}, "downloads": -1, "filename": "kuryr-libnetwork-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b72a8c1cbbb6966620a12ebf2343f23d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 710368, "upload_time": "2017-03-22T10:09:10", "upload_time_iso_8601": "2017-03-22T10:09:10.370517Z", "url": "https://files.pythonhosted.org/packages/dc/51/9504e70e67574b619df317ba2ec1867e1edb0805e81b8d9b25cdefefc6be/kuryr-libnetwork-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "883e03e65cf4eca76fbc4b9ca7378727", "sha256": "e1139d33c44db6fe1015237057df2348474cb5ec43cdef7f0d04efa314f72611"}, "downloads": -1, "filename": "kuryr_libnetwork-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "883e03e65cf4eca76fbc4b9ca7378727", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 111762, "upload_time": "2017-09-06T08:37:02", "upload_time_iso_8601": "2017-09-06T08:37:02.961211Z", "url": "https://files.pythonhosted.org/packages/4e/53/5b062606ac5754ed6e29e2e5efd167a0a745024d96f426140d3c397ed8ea/kuryr_libnetwork-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2df7beb177f311c272d220bcb37aa68", "sha256": "47a2b0a759c89f63796a5f15fc078fcd2728d354c64fd183abd204f47c11c261"}, "downloads": -1, "filename": "kuryr-libnetwork-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b2df7beb177f311c272d220bcb37aa68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 707818, "upload_time": "2017-09-06T08:37:07", "upload_time_iso_8601": "2017-09-06T08:37:07.921307Z", "url": "https://files.pythonhosted.org/packages/49/b6/4ee067297d046a064b1f004928d55ba19b961e84bd355d56b26bce5c8837/kuryr-libnetwork-0.2.0.tar.gz", "yanked": false}], "1.0": [], "1.0.0": [{"comment_text": "", "digests": {"md5": "947bfd1296cf5739e1e103bafdd541f4", "sha256": "f55a1d7c50630ccef78aef92a5fedac7c40b15d1217be05723d6a0e3723306f5"}, "downloads": -1, "filename": "kuryr_libnetwork-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "947bfd1296cf5739e1e103bafdd541f4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 117666, "upload_time": "2018-01-22T20:21:37", "upload_time_iso_8601": "2018-01-22T20:21:37.597347Z", "url": "https://files.pythonhosted.org/packages/a7/da/c8c08396845ea6bcaf44639d6f9de2119a30172f727d1db811f3d469ec06/kuryr_libnetwork-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e8893638959abfebbf5b4e8fa460aa9", "sha256": "decd2af45db62524c6f9a9cc267932f72147865448a16b0e176a8f4d315220d7"}, "downloads": -1, "filename": "kuryr-libnetwork-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0e8893638959abfebbf5b4e8fa460aa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 719209, "upload_time": "2018-01-22T20:21:42", "upload_time_iso_8601": "2018-01-22T20:21:42.092058Z", "url": "https://files.pythonhosted.org/packages/38/97/52add40a2378be8ed22f7586b5065f9d0fc35a7a17a0564b8784b6c600d3/kuryr-libnetwork-1.0.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "2159419aa3002e63a2d03454e79fe3c3", "sha256": "fdd6f0514097688f79879e353fc55d82b9a0de956dc418ef19acdebdf047c444"}, "downloads": -1, "filename": "kuryr_libnetwork-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2159419aa3002e63a2d03454e79fe3c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 111668, "upload_time": "2018-08-17T20:16:28", "upload_time_iso_8601": "2018-08-17T20:16:28.771402Z", "url": "https://files.pythonhosted.org/packages/b8/ac/a4f98eff7913c25d01417e79af7ca3508eb5ee01c2bcebf7f340c19edbb9/kuryr_libnetwork-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b60fb8de4c4d17f4aae95003e517ac0a", "sha256": "2069f92cb00199949cd9682fd40d6e0fc532d559c65d8e072fe5bb3e0b91b5bd"}, "downloads": -1, "filename": "kuryr-libnetwork-2.0.0.tar.gz", "has_sig": false, "md5_digest": "b60fb8de4c4d17f4aae95003e517ac0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 724779, "upload_time": "2018-08-17T20:16:32", "upload_time_iso_8601": "2018-08-17T20:16:32.184381Z", "url": "https://files.pythonhosted.org/packages/09/96/45b43bd0914ee309a84b58c9d389eb51ff6b6875e4948f5c1fb9197a591d/kuryr-libnetwork-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "e23d551c5281cf22be0716eb8c2687fb", "sha256": "21a46a0c501b9810360fad8ff13885d69f58a13c65d5618005b5aa6f3f00e6e4"}, "downloads": -1, "filename": "kuryr_libnetwork-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e23d551c5281cf22be0716eb8c2687fb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 117590, "upload_time": "2020-02-26T18:42:07", "upload_time_iso_8601": "2020-02-26T18:42:07.820912Z", "url": "https://files.pythonhosted.org/packages/06/a0/1e40e39ad1d7aa825f89490687d490963c67f61dfc88b479464dd76ad3c5/kuryr_libnetwork-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72ef82f04dd8750f6326f59cb4a20f3d", "sha256": "94cba0363742688ea94d030530d63dd50ac042b23b51d03e80912e4fedf7d9f2"}, "downloads": -1, "filename": "kuryr-libnetwork-2.0.1.tar.gz", "has_sig": false, "md5_digest": "72ef82f04dd8750f6326f59cb4a20f3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 722206, "upload_time": "2020-02-26T18:42:12", "upload_time_iso_8601": "2020-02-26T18:42:12.693810Z", "url": "https://files.pythonhosted.org/packages/50/40/e324ee28354095f46c098918277bbdaacefcaf9379628727e56d0f8e7ff4/kuryr-libnetwork-2.0.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "fcc320e241d160f65bffc18f3f80723a", "sha256": "f1684c1cdf22b42d11557eaaa70aae0583b45ad03ed2973d3be23b86808495ec"}, "downloads": -1, "filename": "kuryr_libnetwork-3.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fcc320e241d160f65bffc18f3f80723a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 117802, "upload_time": "2019-03-07T10:39:49", "upload_time_iso_8601": "2019-03-07T10:39:49.026186Z", "url": "https://files.pythonhosted.org/packages/18/ab/8e5df419ccf82cf7f19aa911debbcb2568416caadf71a0150f132c285918/kuryr_libnetwork-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab6d47ae87056af16ba7a5bfe4b030d2", "sha256": "81b03dfd2a443d31758dd5fa6be9c58d9947286d06a655aa4be1799f2f0323ac"}, "downloads": -1, "filename": "kuryr-libnetwork-3.0.0.tar.gz", "has_sig": false, "md5_digest": "ab6d47ae87056af16ba7a5bfe4b030d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 725409, "upload_time": "2019-03-07T10:39:54", "upload_time_iso_8601": "2019-03-07T10:39:54.688871Z", "url": "https://files.pythonhosted.org/packages/2a/8f/e5b6315fd6e5039865d7abb7d00611b43368cc9f08fe7d6d8196f7b1791b/kuryr-libnetwork-3.0.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "e5b2c1268145476d35256102689fc2c3", "sha256": "984245a3b4b7460536c2cbc15faced6dfb41dd31181f1c774cd45c6f3bffdbe4"}, "downloads": -1, "filename": "kuryr_libnetwork-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e5b2c1268145476d35256102689fc2c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 117925, "upload_time": "2019-10-16T12:44:08", "upload_time_iso_8601": "2019-10-16T12:44:08.267130Z", "url": "https://files.pythonhosted.org/packages/a5/3a/96462cf101ea833fd1e5cd258bc084132eabd2c0b9fcdc0970912bd5a02d/kuryr_libnetwork-4.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf06383d950be223708df45ebc8ff0eb", "sha256": "5f3517e390809792b08ebc9428db8d7bda07f7409801ade8313bd1c837c5352d"}, "downloads": -1, "filename": "kuryr-libnetwork-4.0.0.tar.gz", "has_sig": false, "md5_digest": "cf06383d950be223708df45ebc8ff0eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 722449, "upload_time": "2019-10-16T12:44:13", "upload_time_iso_8601": "2019-10-16T12:44:13.250815Z", "url": "https://files.pythonhosted.org/packages/54/55/15a6166dc72d2aa42f365914a7ed919e290eadcb98958cbc4b66441e554e/kuryr-libnetwork-4.0.0.tar.gz", "yanked": false}], "4.0.0.0rc1": [{"comment_text": "", "digests": {"md5": "65e8162657c4a1e09ac4a6094d54dd29", "sha256": "53cc66c5f8658d9edaf99fc2804c64972fe4337171634def5209a730a654a813"}, "downloads": -1, "filename": "kuryr_libnetwork-4.0.0.0rc1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "65e8162657c4a1e09ac4a6094d54dd29", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 118010, "upload_time": "2019-09-23T09:03:52", "upload_time_iso_8601": "2019-09-23T09:03:52.102867Z", "url": "https://files.pythonhosted.org/packages/d6/0d/ee4f16b254721a41cb7f667f5dd275eb9fb57fa84a0ea30b31936fb02cf1/kuryr_libnetwork-4.0.0.0rc1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec02cfd18edae302ec30b46701d4cbe2", "sha256": "39168168424085d501dffd4ef7ab017e000d919920289098c211252245992867"}, "downloads": -1, "filename": "kuryr-libnetwork-4.0.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "ec02cfd18edae302ec30b46701d4cbe2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 725759, "upload_time": "2019-09-23T09:03:56", "upload_time_iso_8601": "2019-09-23T09:03:56.894784Z", "url": "https://files.pythonhosted.org/packages/4f/c5/4010b3ab845aa19b8aaebcb6856248abe7908e049cec55341903224c2053/kuryr-libnetwork-4.0.0.0rc1.tar.gz", "yanked": false}], "5.0.0.0rc1": [{"comment_text": "", "digests": {"md5": "4a4b68645ad6f010410e0939a4c31bf7", "sha256": "245c6e6c3b8b445da6e555c1d41325b00715f0b4c4cf1fb4219d7306b5cdadf3"}, "downloads": -1, "filename": "kuryr_libnetwork-5.0.0.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a4b68645ad6f010410e0939a4c31bf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 118252, "upload_time": "2020-04-22T16:40:10", "upload_time_iso_8601": "2020-04-22T16:40:10.967632Z", "url": "https://files.pythonhosted.org/packages/84/89/abc41aa92ab638491cfb2fbe26ac0d880b735d542b52aeb7f0e40bb12a86/kuryr_libnetwork-5.0.0.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71f8d87198824fb4e99c1958f3897503", "sha256": "6733ac12b86a615534334cb8447f154b6095680f0a86bc1bc33d3209ce8f8212"}, "downloads": -1, "filename": "kuryr-libnetwork-5.0.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "71f8d87198824fb4e99c1958f3897503", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 727413, "upload_time": "2020-04-22T16:40:18", "upload_time_iso_8601": "2020-04-22T16:40:18.084814Z", "url": "https://files.pythonhosted.org/packages/3e/4a/adccb44756b2f5140d7effb1d89e67b0365f08b7661148c636a7aa0aa4ae/kuryr-libnetwork-5.0.0.0rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5b2c1268145476d35256102689fc2c3", "sha256": "984245a3b4b7460536c2cbc15faced6dfb41dd31181f1c774cd45c6f3bffdbe4"}, "downloads": -1, "filename": "kuryr_libnetwork-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e5b2c1268145476d35256102689fc2c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 117925, "upload_time": "2019-10-16T12:44:08", "upload_time_iso_8601": "2019-10-16T12:44:08.267130Z", "url": "https://files.pythonhosted.org/packages/a5/3a/96462cf101ea833fd1e5cd258bc084132eabd2c0b9fcdc0970912bd5a02d/kuryr_libnetwork-4.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf06383d950be223708df45ebc8ff0eb", "sha256": "5f3517e390809792b08ebc9428db8d7bda07f7409801ade8313bd1c837c5352d"}, "downloads": -1, "filename": "kuryr-libnetwork-4.0.0.tar.gz", "has_sig": false, "md5_digest": "cf06383d950be223708df45ebc8ff0eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 722449, "upload_time": "2019-10-16T12:44:13", "upload_time_iso_8601": "2019-10-16T12:44:13.250815Z", "url": "https://files.pythonhosted.org/packages/54/55/15a6166dc72d2aa42f365914a7ed919e290eadcb98958cbc4b66441e554e/kuryr-libnetwork-4.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:32 2020"}