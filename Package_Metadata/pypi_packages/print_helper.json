{"info": {"author": "Colin Ji", "author_email": "jichen3000@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "Print Helper\n============\n\nThis project write some useful functions related to print:\n\n::\n\n    p, pp, pl, ppl,\n    p_format, pp_format, pl_format, ppl_format.\n\ngithub: https://github.com/jichen3000/py_print_helper\n\npypi: https://pypi.python.org/pypi/print_helper\n\n--------------\n\nAuthor\n------\n\nColin Ji jichen3000@gmail.com\n\nHow to install\n--------------\n\n::\n\n    pip install print_helper\n\nHow to use\n----------\n\np, pp, pl, ppl, p\\_format, pp\\_format, pl\\_format, ppl\\_format these\nfunctions could been used by any object.\n\np, print with title. This function will print variable name as the\ntitle. code:\n\n::\n\n    import print_helper\n\n    value = \"Minitest\"\n    value.p()\n                                    \n    value.p(\"It is a value:\")   \n                                    \n    value.p(auto_get_title=False)    \n\nprint result:\n\n::\n\n    value : 'Minitest'\n\n    It is a value: 'Minitest'\n\n    'Minitest'\n\npp, pretty print with title. This function will print variable name as\nthe title in the first line, then pretty print the content of variable\nbelow the title. code:\n\n::\n\n    import print_helper\n\n    value = \"Minitest\"\n    value.pp()\n                                    \n    value.pp(\"It is a value:\")   \n                                    \n    value.pp(auto_get_title=False)    \n\nprint result:\n\n::\n\n    value :\n    'Minitest'\n\n     It is a value:\n    'Minitest'\n\n    'Minitest'\n\npl, print with title and code loction. This function just like pt, but\nwill print the code location at the first line. And some editors support\nto go to the line of that file, such as Sublime2. code:\n\n::\n\n    import print_helper\n\n    value = \"Minitest\"\n    value.pl()\n                                    \n    value.pl(\"It is a value:\")   \n                                    \n    value.pl(auto_get_title=False)    \n\nprint result:\n\n::\n\n        File \"/Users/Colin/work/minitest/test.py\", line 76\n    value : 'Minitest'\n\n\n        File \"/Users/Colin/work/minitest/test.py\", line 77\n     It is a value: 'Minitest'\n\n\n        File \"/Users/Colin/work/minitest/test.py\", line 78\n    'Minitest'\n\nppl, pretty print with title and code loction. This function just like\nppt, but will print the code location at the first line. Notice: it will\nprint a null line firstly. code:\n\n::\n\n    import print_helper\n\n    value = \"Minitest\"\n    value.ppl()\n                                    \n    value.ppl(\"It is a value:\")   \n                                    \n    value.ppl(auto_get_title=False)    \n\nprint result:\n\n::\n\n        File \"/Users/Colin/work/minitest/test.py\", line 76\n    value :\n    'Minitest'\n\n\n        File \"/Users/Colin/work/minitest/test.py\", line 77\n     It is a value:\n    'Minitest'\n\n\n        File \"/Users/Colin/work/minitest/test.py\", line 78\n    'Minitest'\n\np\\_format, get the string just like p function prints. I use it in\ndebugging with log, like: logging.debug(value.p\\_format()) code:\n\n::\n\n    import print_helper\n\n    value = \"Minitest\"\n    value.p_format()\n\nreturn result:\n\n::\n\n    value : 'Minitest'\n\npp\\_format, get the string just like pp function prints. I use it in\ndebugging with log, like: logging.debug(value.pp\\_format()) code:\n\n::\n\n    import print_helper\n\n    value = \"Minitest\"\n    value.pp_format()\n\nreturn result:\n\n::\n\n    value :\\n'Minitest'\n\npl\\_format, get the string just like pl function prints. I use it in\ndebugging with log, like: logging.debug(value.pl\\_format()) code:\n\n::\n\n    import print_helper\n\n    value = \"Minitest\"\n    value.pl_format()\n\nreturn result:\n\n::\n\n    line info: File \"/Users/Colin/work/minitest/test.py\", line 76, in <module>\\nvalue : 'Minitest'\n\nppl\\_format, get the string just like ppl function prints. I use it in\ndebugging with log, like: logging.debug(value.ppl\\_format()) code:\n\n::\n\n    import print_helper\n\n    value = \"Minitest\"\n    value.ppl_format()\n\nreturn result:\n\n::\n\n    line info: File \"/Users/Colin/work/minitest/test.py\", line 76, in <module>\\nvalue :\\n'Minitest'", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/print_helper", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "print_helper", "package_url": "https://pypi.org/project/print_helper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/print_helper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://pypi.python.org/pypi/print_helper"}, "release_url": "https://pypi.org/project/print_helper/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Minitest is inspired by Ruby minispec.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project write some useful functions related to print:</p>\n<pre>p, pp, pl, ppl,\np_format, pp_format, pl_format, ppl_format.\n</pre>\n<p>github: <a href=\"https://github.com/jichen3000/py_print_helper\" rel=\"nofollow\">https://github.com/jichen3000/py_print_helper</a></p>\n<p>pypi: <a href=\"https://pypi.python.org/pypi/print_helper\" rel=\"nofollow\">https://pypi.python.org/pypi/print_helper</a></p>\n<hr class=\"docutils\">\n<div id=\"author\">\n<h2>Author</h2>\n<p>Colin Ji <a href=\"mailto:jichen3000%40gmail.com\">jichen3000<span>@</span>gmail<span>.</span>com</a></p>\n</div>\n<div id=\"how-to-install\">\n<h2>How to install</h2>\n<pre>pip install print_helper\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>p, pp, pl, ppl, p_format, pp_format, pl_format, ppl_format these\nfunctions could been used by any object.</p>\n<p>p, print with title. This function will print variable name as the\ntitle. code:</p>\n<pre>import print_helper\n\nvalue = \"Minitest\"\nvalue.p()\n\nvalue.p(\"It is a value:\")\n\nvalue.p(auto_get_title=False)\n</pre>\n<p>print result:</p>\n<pre>value : 'Minitest'\n\nIt is a value: 'Minitest'\n\n'Minitest'\n</pre>\n<p>pp, pretty print with title. This function will print variable name as\nthe title in the first line, then pretty print the content of variable\nbelow the title. code:</p>\n<pre>import print_helper\n\nvalue = \"Minitest\"\nvalue.pp()\n\nvalue.pp(\"It is a value:\")\n\nvalue.pp(auto_get_title=False)\n</pre>\n<p>print result:</p>\n<pre>value :\n'Minitest'\n\n It is a value:\n'Minitest'\n\n'Minitest'\n</pre>\n<p>pl, print with title and code loction. This function just like pt, but\nwill print the code location at the first line. And some editors support\nto go to the line of that file, such as Sublime2. code:</p>\n<pre>import print_helper\n\nvalue = \"Minitest\"\nvalue.pl()\n\nvalue.pl(\"It is a value:\")\n\nvalue.pl(auto_get_title=False)\n</pre>\n<p>print result:</p>\n<pre>    File \"/Users/Colin/work/minitest/test.py\", line 76\nvalue : 'Minitest'\n\n\n    File \"/Users/Colin/work/minitest/test.py\", line 77\n It is a value: 'Minitest'\n\n\n    File \"/Users/Colin/work/minitest/test.py\", line 78\n'Minitest'\n</pre>\n<p>ppl, pretty print with title and code loction. This function just like\nppt, but will print the code location at the first line. Notice: it will\nprint a null line firstly. code:</p>\n<pre>import print_helper\n\nvalue = \"Minitest\"\nvalue.ppl()\n\nvalue.ppl(\"It is a value:\")\n\nvalue.ppl(auto_get_title=False)\n</pre>\n<p>print result:</p>\n<pre>    File \"/Users/Colin/work/minitest/test.py\", line 76\nvalue :\n'Minitest'\n\n\n    File \"/Users/Colin/work/minitest/test.py\", line 77\n It is a value:\n'Minitest'\n\n\n    File \"/Users/Colin/work/minitest/test.py\", line 78\n'Minitest'\n</pre>\n<p>p_format, get the string just like p function prints. I use it in\ndebugging with log, like: logging.debug(value.p_format()) code:</p>\n<pre>import print_helper\n\nvalue = \"Minitest\"\nvalue.p_format()\n</pre>\n<p>return result:</p>\n<pre>value : 'Minitest'\n</pre>\n<p>pp_format, get the string just like pp function prints. I use it in\ndebugging with log, like: logging.debug(value.pp_format()) code:</p>\n<pre>import print_helper\n\nvalue = \"Minitest\"\nvalue.pp_format()\n</pre>\n<p>return result:</p>\n<pre>value :\\n'Minitest'\n</pre>\n<p>pl_format, get the string just like pl function prints. I use it in\ndebugging with log, like: logging.debug(value.pl_format()) code:</p>\n<pre>import print_helper\n\nvalue = \"Minitest\"\nvalue.pl_format()\n</pre>\n<p>return result:</p>\n<pre>line info: File \"/Users/Colin/work/minitest/test.py\", line 76, in &lt;module&gt;\\nvalue : 'Minitest'\n</pre>\n<p>ppl_format, get the string just like ppl function prints. I use it in\ndebugging with log, like: logging.debug(value.ppl_format()) code:</p>\n<pre>import print_helper\n\nvalue = \"Minitest\"\nvalue.ppl_format()\n</pre>\n<p>return result:</p>\n<pre>line info: File \"/Users/Colin/work/minitest/test.py\", line 76, in &lt;module&gt;\\nvalue :\\n'Minitest'\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2494997, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "159b2f9e6b299531e473f929704272ca", "sha256": "17987948f9c51382fa00bfa396889f2cacb90f22783d0beb62bfb9fcdbef3d89"}, "downloads": -1, "filename": "print_helper-1.0.0.tar.gz", "has_sig": false, "md5_digest": "159b2f9e6b299531e473f929704272ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3728, "upload_time": "2016-11-20T18:38:22", "upload_time_iso_8601": "2016-11-20T18:38:22.040648Z", "url": "https://files.pythonhosted.org/packages/c5/df/6691557f06a0ab5b252b9de3f5f49cd70f5598a3a28f4e56599a82a9cded/print_helper-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "02dbea8a3c251a1d469e12c427b3bdcb", "sha256": "30bd655fd3f9c74bdba688a26026d1f9c1b8e60acb03d0bb789ae22c9905295d"}, "downloads": -1, "filename": "print_helper-1.0.1.tar.gz", "has_sig": false, "md5_digest": "02dbea8a3c251a1d469e12c427b3bdcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3648, "upload_time": "2016-12-02T01:58:34", "upload_time_iso_8601": "2016-12-02T01:58:34.412490Z", "url": "https://files.pythonhosted.org/packages/fe/c4/78f29a547f2cb30446617d833f2cd4e97a789cf92934bd9052b3bb72f824/print_helper-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "02dbea8a3c251a1d469e12c427b3bdcb", "sha256": "30bd655fd3f9c74bdba688a26026d1f9c1b8e60acb03d0bb789ae22c9905295d"}, "downloads": -1, "filename": "print_helper-1.0.1.tar.gz", "has_sig": false, "md5_digest": "02dbea8a3c251a1d469e12c427b3bdcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3648, "upload_time": "2016-12-02T01:58:34", "upload_time_iso_8601": "2016-12-02T01:58:34.412490Z", "url": "https://files.pythonhosted.org/packages/fe/c4/78f29a547f2cb30446617d833f2cd4e97a789cf92934bd9052b3bb72f824/print_helper-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:19 2020"}