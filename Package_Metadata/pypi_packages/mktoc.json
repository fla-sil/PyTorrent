{"info": {"author": "Patrick C. McGinty", "author_email": "mktoc[@]tuxcoder[dot]com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Multimedia :: Sound/Audio :: CD Audio :: CD Writing", "Topic :: Multimedia :: Sound/Audio :: Conversion"], "description": ".. Mktoc // (c) 2011, Patrick C. McGinty\n.. mktoc[@]tuxcoder[dot]com\n\nMktoc simplifies the steps needed to create audio CD TOC files for the\ncdrdao CD burning program. For users familiar with ExactAudioCopy or CdrWin,\nTOC files are synonymous with CUE sheets. The primary goal of mktoc is to\ncreate TOC files using a previously generated CUE sheet.\n\nFeatures\n========\n\n* Create a TOC file from a list of WAV files.\n* Convert an ExactAudioCopy (EAC) CUE file to the TOC format that\n  is usable by cdrdao.\n* Multi-session aware CUE parsing, necessary for making CDDB and\n  AccurateRip matchable discs.\n* Non-compliant CUE sheet support.\n* Support for various pregap methods.\n* Can create offset corrected WAV files for true 'bit-for-bit'\n  accurate copies.\n* Fuzzy file name logic can correct common file name spelling\n  variations.\n* Workaround known TOC file parsing bugs in cdrdao.\n\nUsage\n=====\n::\n\n   mktoc [OPTIONS] < CUE_FILE\n   mktoc [OPTIONS] [[-f] CUE_FILE] [[-o] TOC_FILE]\n   mktoc [OPTIONS] -w WAV_FILES [[-o] TOC_FILE]\n\n``CUE_FILE`` must contain a valid CUE format. When ``*_FILE`` is not\nprovided, the program will read from ``STDIN``. All output will be sent to\n``STDOUT``.\n\nAll attempts will be made to preserve any and all information from the input\nfile. For any case where the CUE file contains unknown or bad values, the\nuser will be notified on ``STDERR``.\n\nOptions\n=======\n\n--version\n\n   show program's version number and exit\n\n-h\n\n   show help message and exit\n\n--help\n\n   show detailed usage instructions and exit\n\n-a, --allow-missing-wav\n\n   do not abort when WAV file(s) are missing, (experts only). It is possible\n   when using this option that a bug in cdrdao will create a CD that ignores\n   the pregap definitions in the TOC file.  Only use this option if the CUE\n   file does not contain pregaps, or if you do not wish to retain the pregap\n   information.\n\n-c <WAV_OFFSET>, --offset-correction=<WAV_OFFSET>\n\n   correct reader/writer offset by creating WAV file(s) shifted by\n   WAV_OFFSET samples (original data is not modified)\n\n-d, --debug\n\n   enable debugging statements\n\n-f <CUE_FILE>, --file=<CUE_FILE>\n\n   specify the input CUE file to read\n\n-m, --multi\n\n   for safety, this option must be set when creating a mulit-session TOC\n   file\n\n-o <TOC_FILE>, --output=<TOC_FILE>\n\n   specify the output TOC file to write\n\n-t, --use-temp\n\n   write offset corrected WAV files to /tmp directory\n\n-w, --wave\n\n   write a TOC file using list of WAV files\n\n-z, --no-multi\n\n   disable multi-session support; program assumes TOC will be written in\n   single-session mode\n\nExamples\n========\n\n1. Create a TOC file from a set of WAV files::\n\n      mktoc -w *.wav\n\n2. Write a TOC file to ``toc_file.toc``, from a set of WAV files::\n\n      mktoc -w *.wav toc_file.toc\n      mktoc -w *.wav > toc_file.toc\n      mktoc -w *.wav -o toc_file.toc\n\n3. Create a TOC file from a valid CUE file::\n\n      mktoc cue_file.cue\n      mktoc < cue_file.cue\n      mktoc -f cue_file.cue\n\n4. Write a TOC file to ``toc_file.toc``, given an input CUE file::\n\n      mktoc cue_file.cue toc_file.toc\n      mktoc < cue_file.cue > toc_file.toc\n      mktoc -f cue_file.cue -o toc_file.toc\n\n5. Tell mktoc to ignore missing WAV file errors. There is a potential that\n   the result TOC file will cause cdrdao to loose pregap information during\n   the burn process (see above)::\n\n      mktoc -a cue_file.cue\n\n6. Adjust WAV files for a CD writer offset value. For example, if your CD\n   writer has a -30 sample write offset, it can be corrected by offsetting\n   the input WAV files by +30 samples. New WAV files will be placed in the\n   working directory in a new dir called ``wav+30``::\n\n      mktoc -c 30 < cue_file.cue\n\n7. Adjust WAV files for a CD writer offset value, but create new files in\n   the ``/tmp`` directory::\n\n      mktoc -c 30 -t < cue_file.cue\n\nContact\n=======\n\nE-mail\n------\n\n|  mktoc[@]tuxcoder[dot]com\n\nInfo\n----\n\n|  http://packages.python.org/mktoc/\n|  https://github.com/cmcginty/mktoc\n|  http://blog.tuxcoder.com", "description_content_type": null, "docs_url": "https://pythonhosted.org/mktoc/", "download_url": "https://github.com/cmcginty/mktoc/raw/master/dist/mktoc-1.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://packages.python.org/mktoc/", "keywords": "cdrdao cue toc cd-writing audio-cd mktoc mkcue cue2toc eac exactaudiocopy pregap", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "mktoc", "package_url": "https://pypi.org/project/mktoc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mktoc/", "project_urls": {"Download": "https://github.com/cmcginty/mktoc/raw/master/dist/mktoc-1.3.tar.gz", "Homepage": "http://packages.python.org/mktoc/"}, "release_url": "https://pypi.org/project/mktoc/1.3/", "requires_dist": null, "requires_python": null, "summary": "Simple command line tool generates TOC files for audio CD burning with cdrdao.", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Mktoc simplifies the steps needed to create audio CD TOC files for the\ncdrdao CD burning program. For users familiar with ExactAudioCopy or CdrWin,\nTOC files are synonymous with CUE sheets. The primary goal of mktoc is to\ncreate TOC files using a previously generated CUE sheet.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Create a TOC file from a list of WAV files.</li>\n<li>Convert an ExactAudioCopy (EAC) CUE file to the TOC format that\nis usable by cdrdao.</li>\n<li>Multi-session aware CUE parsing, necessary for making CDDB and\nAccurateRip matchable discs.</li>\n<li>Non-compliant CUE sheet support.</li>\n<li>Support for various pregap methods.</li>\n<li>Can create offset corrected WAV files for true \u2018bit-for-bit\u2019\naccurate copies.</li>\n<li>Fuzzy file name logic can correct common file name spelling\nvariations.</li>\n<li>Workaround known TOC file parsing bugs in cdrdao.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>mktoc [OPTIONS] &lt; CUE_FILE\nmktoc [OPTIONS] [[-f] CUE_FILE] [[-o] TOC_FILE]\nmktoc [OPTIONS] -w WAV_FILES [[-o] TOC_FILE]\n</pre>\n<p><tt>CUE_FILE</tt> must contain a valid CUE format. When <tt>*_FILE</tt> is not\nprovided, the program will read from <tt>STDIN</tt>. All output will be sent to\n<tt>STDOUT</tt>.</p>\n<p>All attempts will be made to preserve any and all information from the input\nfile. For any case where the CUE file contains unknown or bad values, the\nuser will be notified on <tt>STDERR</tt>.</p>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">--version</span></kbd></td>\n<td>show program\u2019s version number and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-h</span></kbd></td>\n<td>show help message and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--help</span></kbd></td>\n<td>show detailed usage instructions and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-a</span>, <span class=\"option\">--allow-missing-wav</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>do not abort when WAV file(s) are missing, (experts only). It is possible\nwhen using this option that a bug in cdrdao will create a CD that ignores\nthe pregap definitions in the TOC file.  Only use this option if the CUE\nfile does not contain pregaps, or if you do not wish to retain the pregap\ninformation.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c <var>&lt;WAV_OFFSET&gt;</var></span>, <span class=\"option\">--offset-correction=<var>&lt;WAV_OFFSET&gt;</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>correct reader/writer offset by creating WAV file(s) shifted by\nWAV_OFFSET samples (original data is not modified)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d</span>, <span class=\"option\">--debug</span></kbd></td>\n<td>enable debugging statements</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-f <var>&lt;CUE_FILE&gt;</var></span>, <span class=\"option\">--file=<var>&lt;CUE_FILE&gt;</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>specify the input CUE file to read</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-m</span>, <span class=\"option\">--multi</span></kbd></td>\n<td>for safety, this option must be set when creating a mulit-session TOC\nfile</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-o <var>&lt;TOC_FILE&gt;</var></span>, <span class=\"option\">--output=<var>&lt;TOC_FILE&gt;</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>specify the output TOC file to write</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-t</span>, <span class=\"option\">--use-temp</span></kbd></td>\n<td>write offset corrected WAV files to /tmp directory</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-w</span>, <span class=\"option\">--wave</span></kbd></td>\n<td>write a TOC file using list of WAV files</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-z</span>, <span class=\"option\">--no-multi</span></kbd></td>\n<td>disable multi-session support; program assumes TOC will be written in\nsingle-session mode</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<ol>\n<li><p>Create a TOC file from a set of WAV files:</p>\n<pre>mktoc -w *.wav\n</pre>\n</li>\n<li><p>Write a TOC file to <tt>toc_file.toc</tt>, from a set of WAV files:</p>\n<pre>mktoc -w *.wav toc_file.toc\nmktoc -w *.wav &gt; toc_file.toc\nmktoc -w *.wav -o toc_file.toc\n</pre>\n</li>\n<li><p>Create a TOC file from a valid CUE file:</p>\n<pre>mktoc cue_file.cue\nmktoc &lt; cue_file.cue\nmktoc -f cue_file.cue\n</pre>\n</li>\n<li><p>Write a TOC file to <tt>toc_file.toc</tt>, given an input CUE file:</p>\n<pre>mktoc cue_file.cue toc_file.toc\nmktoc &lt; cue_file.cue &gt; toc_file.toc\nmktoc -f cue_file.cue -o toc_file.toc\n</pre>\n</li>\n<li><p>Tell mktoc to ignore missing WAV file errors. There is a potential that\nthe result TOC file will cause cdrdao to loose pregap information during\nthe burn process (see above):</p>\n<pre>mktoc -a cue_file.cue\n</pre>\n</li>\n<li><p>Adjust WAV files for a CD writer offset value. For example, if your CD\nwriter has a -30 sample write offset, it can be corrected by offsetting\nthe input WAV files by +30 samples. New WAV files will be placed in the\nworking directory in a new dir called <tt>wav+30</tt>:</p>\n<pre>mktoc -c 30 &lt; cue_file.cue\n</pre>\n</li>\n<li><p>Adjust WAV files for a CD writer offset value, but create new files in\nthe <tt>/tmp</tt> directory:</p>\n<pre>mktoc -c 30 -t &lt; cue_file.cue\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<div id=\"e-mail\">\n<h3>E-mail</h3>\n<div>\n<div>mktoc[@]tuxcoder[dot]com</div>\n</div>\n</div>\n<div id=\"info\">\n<h3>Info</h3>\n<div>\n<div><a href=\"http://packages.python.org/mktoc/\" rel=\"nofollow\">http://packages.python.org/mktoc/</a></div>\n<div><a href=\"https://github.com/cmcginty/mktoc\" rel=\"nofollow\">https://github.com/cmcginty/mktoc</a></div>\n<div><a href=\"http://blog.tuxcoder.com\" rel=\"nofollow\">http://blog.tuxcoder.com</a></div>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3091833, "releases": {"1.1.2": [], "1.1.3": [], "1.2": [], "1.2.1": [], "1.2.2": [], "1.3": []}, "urls": [], "timestamp": "Fri May  8 00:53:41 2020"}