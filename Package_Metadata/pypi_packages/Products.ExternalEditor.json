{"info": {"author": "Zope Foundation and Contributors", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Environment :: Web Environment", "Framework :: Zope :: 4", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development", "Topic :: Text Editors :: Text Processing"], "description": "Zope External Editor\n====================\n\nThe Zope External Editor is a new way to integrate Zope more seamlessly with\nclient-side tools. It has the following features:\n\n- Edit objects locally, directly from the ZMI.\n\n- Works with any graphical editor application that can open a file from the\n  command line, including: emacs, gvim, xemacs, nedit, gimp, etc.\n\n- Automatically saves changes back to Zope without ending the editing\n  session.\n\n- Associate any client-side editor application with any Zope object by\n  meta-type or content-type. Both text and binary object content can be\n  edited.\n\n- Locks objects while they are being edited. Automatically unlocks them\n  when the editing session ends.\n\n- Can add file extensions automatically to improve syntax highlighting or\n  file type detection.\n\n- Works with basic auth, cookie auth and Zope versions. Credentials are\n  automatically passed down to the helper application. No need to\n  reauthenticate.\n\n- https support (Openssl required)\n\nZope version compatibility\n--------------------------\n\nFor Zope 4, please use release 2.0 and upwards. For Zope releases prior to\n4.0, please use ExternalEditor releases from the 1.1 branch.\n\nUsing It\n--------\n\nUse of the application is about as easy as using the ZMI once your browser\nis configured (see the installation instructions). To edit an object\nexternally, just click on the pencil icon next to the object in the ZMI.\nThe object will be downloaded and opened using the editor application you\nhave chosen (you will be prompted the first time to choose an editor).\n\nYou edit the object just like any other file. When you save the changes in\nyour editor, they are automatically uploaded back to Zope in the\nbackground. While the object is open in your editor, it is locked in Zope\nto prevent concurrent editing. When you end your editing session (ie you\nclose your editor) the object is unlocked.\n\nHow it Works\n------------\n\nOk, so this all sounds a bit too good to be true, no? So how the heck does\nit work anyway? First I'll give you a block diagram::\n\n    +------------+     +------------+     +---------+        +------+\n    | Editor App | <-- | Helper App | <-- | Browser | <-/ /- | Zope |\n    +------------+     +------------+     +---------+        +------+\n                ^       ^     ^                                ^\n                 \\     /       \\                              /\n                  v   v         -----------------------/ /----\n                 -------\n                / Local \\\n                \\  File /\n                 -------\n\nNow the key to getting this to work is solving the problem that the editor\ncannot know about Zope, and must only deal with local files. Also, there is\nno standard way to communication with editors, so the only communication\nchannel can be the local file which contains the object's content or code.\n\nIt is trivial to get the browser to fire up your editor when you download\na particular type of data with your browser. But that does you little good,\nsince the browser no longer involves itself once the data is downloaded. It\njust creates a temp file and fires off the registered application, passing\nit the file path. Once the editor is running, it is only aware of the local\nfile, and has no concept of where it originated from.\n\nTo solve this problem, I have developed a helper application whose job is\nessentially two-fold:\n\n- Determine the correct editor to launch for a given Zope object\n\n- Get the data back into Zope when the changes are saved\n\nSo, let's take a step by step look at how it works:\n\n1. You click on the external editor link (the pencil icon) in the Zope\n   management interface.\n\n2. The product code on the server creates a response that encapsulates the\n   necessary meta-data (URL, meta-type, content-type, cookies, etc) and the\n   content of the Zope object, which can be text or binary data. The\n   response has the contrived content-type \"application/x-zope-edit\".\n\n3. The browser receives the request, and finds our helper application\n   registered for \"application/x-zope-edit\". It saves the response data\n   locally to disk and spawns the helper app to process it.\n\n4. The helper app, reads its config file and the response data file. The\n   meta-data from the file is parsed and the content is copied to a new\n   temporary file. The appropriate editor program is determined based on\n   the data file and the configuration.\n\n5. The editor is launched as a sub-process of the helper app, passing it the\n   file containing the content data.\n\n6. If so configured, the helper app sends a WebDAV lock request back to Zope\n   to lock the object.\n\n7. Every so often (if so configured), the helper app stats the content file\n   to see if it has been changed. If so, it sends an HTTP PUT request\n   back to Zope containing the new data.\n\n8. When the editor is closed, the content file is checked one more time and\n   uploaded if it has changed. Then a WebDAV unlock request is sent to Zope.\n\n9. The helper application exits.\n\nConfiguration\n-------------\n\nThe helper application supports several configuration options, each of\nwhich can be triggered in any combination of object meta-type, content-type\nor domain. This allows you to create appropriate behavior for different\ntypes of Zope objects and content or even different servers. The\nconfiguration file is stored in the file  \"~/.zope-external-edit\" (Unix) or\n\"~\\ZopeEdit.ini\" (Windows). If no configuration file is found when the\nhelper application starts, a default config file is created in your home\ndirectory.\n\nThe configuration file follows the standard Python ConfigParser format,\nwhich is pretty much like the old .ini file format from windows. The file\nconsists of sections and options in the following format:\n\n.. code-block:: ini\n\n    [section 1]\n    option1 = value\n    option2 = value\n\n    [section 2]\n    ...\n\nOptions\n-------\n\nThe available options for all sections of the config file are:\n\n``editor``\n    Command line or plugin name used to invoke the editor application. On\n    Windows, if no editor setting is found for an object you edit, the\n    helper app will search the file type registry for an appropriate editor\n    based on the content-type or file extension of the object (which can be\n    specified using the extension option below). By default, the file path\n    of the local file being edited is appended to this command line. To\n    insert the file path in the middle of your command, use \"$1\" for Unix\n    and \"%1\" for Windows respectively.\n\n``save_interval``\n    (float) The interval in seconds that the helper application checks the\n    edited file for changes.\n\n``use_locks``\n    (1 or 0) Whether to use WebDAV locking. The user editing must have the\n    proper WebDAV related permissions for this to work.\n\n``always_borrow_locks``\n    (1 or 0) When use_locks is enabled this features suppresses warnings\n    when trying to edit an object you have already locked.  When enabled,\n    external editor will always \"borrow\" the existing lock token instead of\n    doing the locking itself. This is useful when using CMFStaging for\n    instance. If omitted, this option defaults to 0.\n\n``cleanup_files``\n    (1 or 0) Whether to delete the temp files created.  WARNING the temp\n    file coming from the browser contains authentication information and\n    therefore setting this to 0 is a security risk, especially on shared\n    machines. If set to 1, that file is deleted at the earliest\n    opportunity, before the editor is even spawned. Set to 0 for debugging\n    only.\n\n``extension``\n    (text) The file extension to add to the content file. Allows better\n    handling of images and can improve syntax highlighting.\n\n``temp_dir``\n    (path) Path to store local copies of object data being edited. Defaults\n    to operating system temp directory. *Note: this setting has no apparent\n    effect on Windows* 8^(\n\n``long_file_name``\n    (1 or 0) Whether to include the whole path to the object including the\n    hostname in the file name (the default) or just the id of the object\n    being edited. Turn this option off for shorter file names in your\n    editors, and for editors that don't like long names.\n\n``file_name_separator``\n    (string) Character or characters used to separate path elements in long\n    files names used by external editor. Defaults to a comma (,). This must\n    be a legal character for use in file names on your platorm (i.e., don't\n    use a path separator character!). This option is ignored if\n    'long_file_name' is set to 0.\n\nSections\n--------\n\nThe sections of the configuration file specify the types of objects and\ncontent that the options beneath them apply to.\n\nThere is only one mandatory section '[general]', which should define all\nof the above options that do not have a default value. If no other\nsection defines an option for a given object, the general settings are\nused.\n\nAdditional sections can apply to a particular domain, content-type or\nmeta-type. Since objects can have all these properties, the options are\napplied in this order of precedence:\n\n1. Options by whole content-type (e.g., `[content-type:text/html]`).\n\n2. Options by major content-type (e.g., `[content-type:text/*]`).\n\n3. Options by Zope meta-type (e.g., `[meta-type:File]`).\n\n4. Options by domain (e.g., `[domain:www.mydomain.com]`). Several\n   sections can be added for each domain level if desired.\n\n5.  General options (i.e., `[general]`).\n\nThis scheme allows you to specify an extension by content-type, the\neditor by meta-type, the locking settings by domain and the remaining\noptions under general for a given object.\n\nEditor Plugins\n--------------\n\nFor tighter client-side integration, external editor has a plugin system\nthat allows it to interact directly with supported applications.\n\nOn Windows this generally means using COM to invoke the application, open\nthe content file and wait for the user to save and close the file. Because\neach application has different remote scripting capabilities and APIs,\neditor specific plugins must be written tailored to each supported\napplication and platform.\n\nThis system allows external editor to efficiently connect to running\napplications without relaunching them and therefore fully support MDI\nenvironments. The following applications currently have plugin support::\n\n    Application       Platform    Plugin Module Name(s)\n    ===================================================\n    HomeSite          Windows     homesite5, homesite\n    Dreamweaver       Windows     dreamweaver\t\n    Photoshop         Windows     photoshp, photoshop\n    MS Word           Windows     winword, word\n    MS Excel          Windows     excel\n    MS Powerpoint     Windows     powerpnt, powerpoint\n\nExternal editor will attempt to load a plugin for any application before\nusing the general editor control method. It does this by matching the\nname of the application executable file (sans extension) in the editor\ncommand line with the available plugins.\n\nBecause plugins do not require the path of the editor application to work,\nyou can simply specify the plugin module name for your editor in the\nconfiguration file if desired. For example, to specify Photoshop for all\nimage files, use add the following section to your config file\n(ZopeEdit.ini on Windows)::\n\n    [content-type:image/*]\n    editor=photoshop\n\nThis is only a shortcut and specifying the full application path will\nstill use the plugin where possible.\n\nPlugin Notes\n------------\n\nPhotoshop\n    Photoshop's COM API is quite limited, and external editor cannot detect\n    that you have closed a file until you exit the entire application (it\n    can still detect saves). Therefore you may want to turn off DAV locking\n    (use_locks=0) or borrow locks (always_borrow_locks=1) when using it.\n\nDreamweaver\n    External editor cannot detect when you have finished editing a single\n    file. Objects edited with Dreamweaver will remain locked on the server\n    until you exit the application. As with Photoshop above, you may want\n    to turn off locking for Dreamweaver.\n\nIf your favorite editor needs a plugin because the general support is\nnot good enough, please let me know. Keep in mind that I must be able to\nrun a copy of the application in order to develop a plugin for it. So,\nunless the application is free, or a full demo is available for download\nI won't be able to help much. Plugins are not difficult to write, and I\nencourage you to write one for your favorite editor, start by reading\none of the existing ones. I am happy to include third-party plugins with\nthe distribution.\n\nPermissions\n-----------\n\nExternal editing is governed by the permission \"Use external editor\".\nUsers with this permission can launch external editor from editable\nobjects. In order to save changes, users will need additional permissions\nappropriate for the objects they are editing.\n\nIf users wish to use the built-in locking support, they must have the\n\"WebDAV access\", \"WebDAV Lock items\" and \"WebDAV Unlock items\" permissions\nfor the objects they are editing.\n\nIf these permissions are not set in Zope, then the helper application will\nreceive unauthorized errors from Zope which it will present to the user.\n\nIntegrating with External Editor\n--------------------------------\n\nThe external editor product in zope installs a globally available object\nthat can format objects accessible through FTP/DAV for use by the helper\napplication. You can take advantage of this functionality easily in your\nown content management applications.\n\nSay you have an FTP editable object, \"document\", in a Zope folder named\n\"my_stuff\". The URL to view the object would be::\n\n  http://zopeserver/my_stuff/document\n\nThe URL to kick off the external editor on this document would be::\n\n  http://zopeserver/my_stuff/externalEdit_/document\n\nNow, this may look a bit odd to you if you are used to tacking views on to\nthe end of the URL. Because `externalEdit_` is required to work on Python\nScripts and Page Templates, which swallow the remaining path segments on\nthe URL following themselves, you must put the call to `externalEdit_`\n*directly before* the object to be edited. You could do this in ZPT using\nsome TAL in a Page Template like:\n\n.. code-block:: html\n\n    <a href='edit'\n       attributes='href\n       string:${here/aq_parent/absolute_url}/externalEdit_/${here/getId}'>\n       Edit Locally\n    </a>\n\nAs an alternative, you can also pass the path the object you want to edit\ndirectly to the `externalEdit_` object when you call its index_html method.\nIt can be called either directly by URL or from a python script.\n`externalEdit_` will return the proper response data for the object to edit.\nYou can invoke it via a URL::\n\n  http://zopeserver/externalEdit_?path=/my_stuff/document\n\nor via Python:\n\n.. code-block:: python\n\n    return context.externalEdit_.index_html(\n        context.REQUEST, context.RESPONSE, path='/my_stuff/document')\n\nWhen integrating External Editor with a CMS that already uses DAV\nlocks, it will, by default allow users to borrow locks made on the server\nafter displaying a confirmation dialog box. Although you can make this\nautomatic by specifying 'always_borrow_locks = 1' in the External Editor\nconfig file, it may be desireable to make this the default behavior when\nusing that server. To facilitate this, you can specify that locks\nshould be automatically borrowed in the URL (New in 0.7), i.e::\n\n  http://zopeserver/my_stuff/externalEdit_/document?borrow_lock=1\n\nExternal Editor also defines a global method that you can call to insert\npencil icon links for appropriate objects. The method automatically checks\nif the object supports external editing and whether the user has the \"Use\nexternal editor\" permission for that object. If both are true, it returns\nthe HTML code to insert the external editor icon link. Otherwise it returns\nan empty string.\n\nThe method is 'externalEditLink_(object)'. The object argument is the\nobject to create the link for if appropriate. Here is some example page\ntemplate code that inserts links to objects in the current folder and the\nexternal editor icon where appropriate:\n\n.. code-block:: html\n\n    <div tal:repeat=\"object here/objectValues\">\n      <a href=\"#\"\n         tal:attributes=\"href object/absolute_url\"\n         tal:content=\"object/title_or_id\">Object Title</a>\n      <span tal:replace=\"structure python:here.externalEditLink_(object)\" />\n    </div>\n\nConclusion\n----------\n\nI hope you enjoy using this software. If you have any comments, suggestions\nor would like to report a bug, send an email to the author:\n\nCasey Duncan\n\nChangelog\n=========\n\n\n3.0 (2019-02-16)\n----------------\n\n- Fix zmi-patches for Zope 4.\n  [pbauer]\n\n- Drop support for Python 2.6.\n\n- Adapt tests to Zope 4.\n\n- Add needed dependencies in `setup.py`.\n\n- Prepare for Python 2 / 3 compatibility  [davilima6]\n\n\n2.0.3 (2017-07-17)\n------------------\n\n- Document Zope version compatibility  [dataflake]\n\n\n2.0.2 (2017-02-14)\n------------------\n\n- Fixed reflective XSS in findResult.\n  This applies PloneHotfix20170117.  [maurits]\n\n\n2.0.1 (2016-09-08)\n------------------\n\n- Quote variable in manage_tabs to avoid XSS.\n  From Products.PloneHotfix20160830.  [maurits]\n\n\n2.0.0 (2015-09-09)\n------------------\n\n- Moved code to https://github.com/zopefoundation/Products.ExternalEditor\n\n- Update dtml to Zope trunk.\n\n\n1.1.0 (2010-12-01)\n------------------\n\n- Added support for unaware mimetype browser - we now add the .zem extension no\n  matter what the user-agent\n\n- Modified the cache's parameters - special case for MSIE\n\n- Corrected and added tests\n\n- Moved the sources of the client to another package : collective.zopeedit\n\n\n1.0 (2010-07-01)\n----------------\n\n- Update manage_main, manage_tabs, and findResult monkey patches to include\n  fixes from Zope 2.12.\n\n\n1.0a2 (2009-11-13)\n------------------\n\n- Removed imports from Globals.\n\n- Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.\n\n\n1.0a1 (2008-03-05)\n------------------\n\n- Updated package metadata to be usable as a package.\n\n\n01/03/2007 - 0.9.3\n------------------\n\n- Fixed issue with 'manage_FTPget' overriding the 'Content-Type'\n  header.\n\n- Only run ExpandEnvironmentStrings on win32 systems.\n\n\n9/14/2006 - 0.9.2\n-----------------\n\n- Added 'skip_data' option to make External Editor send out only\n  the metadata part and skip appending data to the 'body'.\n\n- Add a simple callback registry that can be used to add extra\n  metadata headers or set special response headers when a file is\n  edited through External Editor.\n\n- Use rfc822.Message for parsing the metadata of the file being\n  edited.\n\n- Don't emit a warning about deprecated 'methods' in Zope >= 2.10.\n\n- Fixed acquisition issue in manage_main.dtml to sync up with the\n  same fix applied to Zope.\n\n\n6/23/2005 - 0.9.1\n-----------------\n\n- Older pyc files for plugins were included in the 0.9 release.\n  This version has the most up to date plugins.\n\n\n6/20/2005 - 0.9\n---------------\n\n- When using the Excel plugin, errors were seen by users like\n  \"TypeError: This object does not support enumeration\".  We now\n  make the user deal with these.\n\n- When using the Excel plugin, errors were intermittently raised to the\n  user in the form \"Fatal error: <unknown>.Path\" and the user could\n  subsequently not save the document back to Zope because the\n  external editor process had quit.\n\n- Changes to documents intermittently may not have been saved back to Zope\n  when using any plugin that involved COM (Word, Excel, Powerpoint, etc).\n\n- If Word was exited before a user actively saved, if there were\n  outstanding changes in the document being edited, those changes\n  would not be saved to the server despite the user answering\n  \"yes\" to the \"do you want to save before you exit\" dialog\n  presented by Word.\n\n- The \"title\" attribute of the object being externally edited is\n  now available within the set of headers returned by EE to the\n  zopeedit client.\n\n- Detecting whether the client has External Editor installed from\n  within IE using JavaScript or VBScript is now possible, assuming\n  that the client software is installed via the InnoSetup\n  installer.  See \"win32/ocx.txt\" for more info.\n\n- External Editor now compatible with objects that return a\n  \"filestream iterator\" in Zope 2.7.1+. (if upgrading: this fix\n  does not require an update to EE client, just the EE Zope\n  product).\n\n- Properly escape hyphens in man page. Thanks to Federico Sevilla III.\n\n- Check if the editor was launched before locking the file in Zope. This\n  prevents errors if the editor is closed before the lock request\n  completes.\n\n- Do not ask the user what editor to use on Posix platforms. Instead just\n  tell the user to edit the config file. The askstring()\n  function does not work with a hidden root Tk window in Python 2.3.4.\n  Thanks to Christopher Mann.\n\n\n7/13/04 - 0.8\n-------------\n\n- Add external editor icon to ZMI breadcrumbs for editable objects.\n\n- Compiled windows helper app binary using Python 2.3.4, Pythonwin build\n  163 and py2exe 0.5.\n\n- Add Dreamweaver plugin contributed by Manuel Aristarann. Thanks also\n  to Anton Stonor.\n\n- Add ZMI support for Zope 2.7's ordered folder objects.\n\n- Fix bug detecting basic auth info from older versions of CookieCrumber.\n  Thanks to David D. Smith and Federico Sevilla III.\n\n- Workaround IE browser error when running over SSL. Thanks to\n  Marc-Aurele Darche.\n\n- Add \".zem\" file extension support for MacOS X (especially Mac IE),\n  to ease helper app integration where MIME support is lacking. Thanks\n  to Zac Bir.\n\n- Added \"long_file_name\" and \"file_name_separator\" config options.\n\n- Fixed bug which happened under Win32 when editing an Excel file\n  using the Excel plugin where the symptom was a \"Call was\n  rejected by callee\" COM error. Thanks to Chris McDonough.\n\n\n4/23/04 - 0.7.2\n---------------\n\n- Change default configuration to use .txt extension for text/plain only.\n  Add extensions for css and javascript files.\n\n- Fixed packaging bug in Windows binary which disabled several plugins.\n  This fixes \"Editor did not launch properly\" errors for MSOffice\n  among others.\n\n- Fixed a bug where very short editing sessions where no changes were\n  made could make EE think the editor never launched. Thanks to Maik Ihde.\n\n11/7/03 - 0.7.1\n---------------\n\n- Fix encoding bug in windows binary. Thanks to Chris McDonough.\n\n- Added tip for configuring IE to save files over SSL. Thanks to\n  Jonah Bossewitch.\n\n\n4/1/03 - 0.7\n------------\n\n- Added working distutils setup for Unix.\n\n- You can now specify from the server that the helper app should\n  borrow a lock by passing borrow_lock=1 via the request, thus\n  suppressing the dialog box which appears by default. Thanks\n  to Shane Hathaway.\n\n- Improved open file check in Word and Powerpoint plugins\n  thanks to Yura Petrov.\n\n- Added plugins for Microsoft Word, Excel and Powerpoint.\n\n- Added the man page from the Debian distro. Thanks go out to\n  Federico Sevilla III and Andreas Tille\n\n\n11/02/02 - 0.6\n--------------\n\n- Built Windows helper app using Python 2.2.2 and PythonWin 148.\n\n- The `externalEdit_` object now accepts a path argument to the object to\n  edit, allowing URLs like: `http://zope/externalEdit_?path=/some/object.`\n  This allows external editor to play better with applications making use\n  of traversal magic of their own. Thanks to Tres Seaver.\n\n- Fixed NameError bug in unlock retry code. Thanks to Federico Sevilla III.\n\n- Added a workaround for non-compliant SSL servers. The software now\n  silently ignores \"EOF occurred in violation of protocol\" errors coming\n  from httplib. Thanks to Christopher Deckard.\n\n- Removed stderr writes to cure \"Invalid File Descriptor\" errors on\n  Windows. Thanks to Martijn Peters.\n\n- Added Photoshop plugin (win32)\n\n- Added HomeSite plugin (win32)\n\n- Added win32 editor plugin support for the helper application.\n\n\n8/19/02 - 0.5\n-------------\n\n- Added patch for Zope find template so that you can use external editor\n  directly from find results in the ZMI. Thanks to Jim Washington.\n\n- Factored out external editor link generator. Product now registers\n  a global method `externalEditLink_` which can be called to generate\n  the external editor icon link for any object.\n\n- External editing is now governed by the \"Use external editor\" permission\n  to allow non-managers to use it. Users must also have the permissions to\n  edit/modify the objects they edit, plus do WebDAV locking if desired.\n  Thanks to Reineke and others.\n\n- Unix editor command line parsing is much more robust now and properly\n  handles quoted arguments. You can also specify the \"$1\" placeholder in the\n  editor command to denote where the content file name is inserted. If\n  omitted it is appended to the end of the command line. \"%1\" continues to\n  work similarly for Windows. Thanks to Marc St-Jean.\n\n- Fixed bug editing large (chunked) files and images. External editor now\n  streams their data properly to the client. Thanks to all the users who\n  reported various symptoms of this bug.\n\n- Fixed bug editing objects inside a Squishdot site. Thanks to Kevin Salt.\n\n- Added the capability to borrow exising DAV locks. This allows external\n  editor to play well with other systems using locks, such as CMFStaging. A\n  new configuration flag, always_borrow_locks can be set to suppress the\n  borrow lock warning dialog when editing.\n\n- Fixed auth bug when product was used with mysqlUserFolder. Thanks to\n  ViNiL.\n\n\n6/30/02 - 0.4.2\n---------------\n\n- Added SSL support to Windows binary package. Thanks to Federico\n  Sevilla III\n\n\n6/29/02 - 0.4.1\n---------------\n\n- Fixed dangling dav lock bug on fatal errors. Thanks to Marc St-Jean.\n\n- Fixed content_type bug, now checks if it is callable. Thanks to Arnaud\n  Bienvenu.\n\n- Fixed bug with editing binary data on Windows. Thanks to Eric Kamm.\n\n- Fixed bug setting the editor on Posix platforms.\n\n\n6/24/02 - 0.4\n-------------\n\n- Added --version command line argument\n\n- Made manage_FTPget the default source for the editable content, instead\n  of document_src which was broken for CMF Wiki Pages.\n\n- Fixed Windows \"body_file\" bug.\n\n- Added binary build support for Windows using py2exe and Inno setup.\n\n- Fixed Windows config file locator. It now looks in the program directory\n  and then the user's home directory (if specified)\n\n- Fixed bug in Windows registry editor lookup.\n\n\n6/16/02 - 0.3\n-------------\n\n- Improved behavior when saving after lock attempts fail.\n\n- Now works on Windows (applause) using Pythonwin. Much overall\n  refactoring to abstract process control. Thanks to Oliver Deckmyn,\n  Gabriel Genellina and Arno Gross for testing, patches and suggestions.\n\n- Added \"temp_dir\" configuration option for specifying a different\n  temp file directory then the OS default. Also further improved\n  temp file name generation.\n\n- Added support for domain specific configuration options.\n\n- Fixed trailing newline bug in encoded auth data coming from\n  CookieCrumbler. Thanks to Harald Koschinski.\n\n- You can now pass command line arguments to the editor in the config file,\n  or wrap the editor in an xterm without using a shell script.\n\n- Rewrote \"Editor did not launch\" error message so it makes more sense.\n\n- Fixed https detection bug. External editor is now tested and working with\n  https. Many thanks to Hans-Dieter Stich and Martin Groenemeyer for their\n  assistance and ideas.\n\n- Made it possible to edit objects that are methods of ZClasses. Thanks to\n  Jim Washington\n\n- Refactored link generation code in manage_main so that it uses\n  the parent's absolute_url rather than URL1. Thanks to\n  Jim Washington\n\n- Removed implicit save in Configuration class destructor\n\n- Added caching headers to prevent client-side caching of edit data.\n  Thanks to Gabriel Genellina for pointing this out.\n\n- Added improved support for editing CMF documents\n\n- Eliminated spurious \"Editor did not launch\" errors on short sessions\n  or when other errors occurred.\n\n5/16/02 - 0.2\n-------------\n\n- Fixed product uninstallation bug\n\n5/15/02 - 0.1\n-------------\n\n- Initial release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zopefoundation/Products.ExternalEditor", "keywords": "zope external editor WebDAV", "license": "ZPL 2.1", "maintainer": "Chris McDonough", "maintainer_email": "chrism@plope.com", "name": "Products.ExternalEditor", "package_url": "https://pypi.org/project/Products.ExternalEditor/", "platform": "", "project_url": "https://pypi.org/project/Products.ExternalEditor/", "project_urls": {"Homepage": "https://github.com/zopefoundation/Products.ExternalEditor"}, "release_url": "https://pypi.org/project/Products.ExternalEditor/3.0/", "requires_dist": ["setuptools", "Zope (>=4.0b4)", "ZServer (>=4.0b1)", "six"], "requires_python": "", "summary": "Zope External Editor", "version": "3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"zope-external-editor\">\n<h2>Zope External Editor</h2>\n<p>The Zope External Editor is a new way to integrate Zope more seamlessly with\nclient-side tools. It has the following features:</p>\n<ul>\n<li>Edit objects locally, directly from the ZMI.</li>\n<li>Works with any graphical editor application that can open a file from the\ncommand line, including: emacs, gvim, xemacs, nedit, gimp, etc.</li>\n<li>Automatically saves changes back to Zope without ending the editing\nsession.</li>\n<li>Associate any client-side editor application with any Zope object by\nmeta-type or content-type. Both text and binary object content can be\nedited.</li>\n<li>Locks objects while they are being edited. Automatically unlocks them\nwhen the editing session ends.</li>\n<li>Can add file extensions automatically to improve syntax highlighting or\nfile type detection.</li>\n<li>Works with basic auth, cookie auth and Zope versions. Credentials are\nautomatically passed down to the helper application. No need to\nreauthenticate.</li>\n<li>https support (Openssl required)</li>\n</ul>\n<div id=\"zope-version-compatibility\">\n<h3>Zope version compatibility</h3>\n<p>For Zope 4, please use release 2.0 and upwards. For Zope releases prior to\n4.0, please use ExternalEditor releases from the 1.1 branch.</p>\n</div>\n<div id=\"using-it\">\n<h3>Using It</h3>\n<p>Use of the application is about as easy as using the ZMI once your browser\nis configured (see the installation instructions). To edit an object\nexternally, just click on the pencil icon next to the object in the ZMI.\nThe object will be downloaded and opened using the editor application you\nhave chosen (you will be prompted the first time to choose an editor).</p>\n<p>You edit the object just like any other file. When you save the changes in\nyour editor, they are automatically uploaded back to Zope in the\nbackground. While the object is open in your editor, it is locked in Zope\nto prevent concurrent editing. When you end your editing session (ie you\nclose your editor) the object is unlocked.</p>\n</div>\n<div id=\"how-it-works\">\n<h3>How it Works</h3>\n<p>Ok, so this all sounds a bit too good to be true, no? So how the heck does\nit work anyway? First I\u2019ll give you a block diagram:</p>\n<pre>+------------+     +------------+     +---------+        +------+\n| Editor App | &lt;-- | Helper App | &lt;-- | Browser | &lt;-/ /- | Zope |\n+------------+     +------------+     +---------+        +------+\n            ^       ^     ^                                ^\n             \\     /       \\                              /\n              v   v         -----------------------/ /----\n             -------\n            / Local \\\n            \\  File /\n             -------\n</pre>\n<p>Now the key to getting this to work is solving the problem that the editor\ncannot know about Zope, and must only deal with local files. Also, there is\nno standard way to communication with editors, so the only communication\nchannel can be the local file which contains the object\u2019s content or code.</p>\n<p>It is trivial to get the browser to fire up your editor when you download\na particular type of data with your browser. But that does you little good,\nsince the browser no longer involves itself once the data is downloaded. It\njust creates a temp file and fires off the registered application, passing\nit the file path. Once the editor is running, it is only aware of the local\nfile, and has no concept of where it originated from.</p>\n<p>To solve this problem, I have developed a helper application whose job is\nessentially two-fold:</p>\n<ul>\n<li>Determine the correct editor to launch for a given Zope object</li>\n<li>Get the data back into Zope when the changes are saved</li>\n</ul>\n<p>So, let\u2019s take a step by step look at how it works:</p>\n<ol>\n<li>You click on the external editor link (the pencil icon) in the Zope\nmanagement interface.</li>\n<li>The product code on the server creates a response that encapsulates the\nnecessary meta-data (URL, meta-type, content-type, cookies, etc) and the\ncontent of the Zope object, which can be text or binary data. The\nresponse has the contrived content-type \u201capplication/x-zope-edit\u201d.</li>\n<li>The browser receives the request, and finds our helper application\nregistered for \u201capplication/x-zope-edit\u201d. It saves the response data\nlocally to disk and spawns the helper app to process it.</li>\n<li>The helper app, reads its config file and the response data file. The\nmeta-data from the file is parsed and the content is copied to a new\ntemporary file. The appropriate editor program is determined based on\nthe data file and the configuration.</li>\n<li>The editor is launched as a sub-process of the helper app, passing it the\nfile containing the content data.</li>\n<li>If so configured, the helper app sends a WebDAV lock request back to Zope\nto lock the object.</li>\n<li>Every so often (if so configured), the helper app stats the content file\nto see if it has been changed. If so, it sends an HTTP PUT request\nback to Zope containing the new data.</li>\n<li>When the editor is closed, the content file is checked one more time and\nuploaded if it has changed. Then a WebDAV unlock request is sent to Zope.</li>\n<li>The helper application exits.</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>The helper application supports several configuration options, each of\nwhich can be triggered in any combination of object meta-type, content-type\nor domain. This allows you to create appropriate behavior for different\ntypes of Zope objects and content or even different servers. The\nconfiguration file is stored in the file  \u201c~/.zope-external-edit\u201d (Unix) or\n\u201c~ZopeEdit.ini\u201d (Windows). If no configuration file is found when the\nhelper application starts, a default config file is created in your home\ndirectory.</p>\n<p>The configuration file follows the standard Python ConfigParser format,\nwhich is pretty much like the old .ini file format from windows. The file\nconsists of sections and options in the following format:</p>\n<pre><span class=\"k\">[section 1]</span>\n<span class=\"na\">option1</span> <span class=\"o\">=</span> <span class=\"s\">value</span>\n<span class=\"na\">option2</span> <span class=\"o\">=</span> <span class=\"s\">value</span>\n\n<span class=\"k\">[section 2]</span>\n<span class=\"na\">...</span>\n</pre>\n</div>\n<div id=\"options\">\n<h3>Options</h3>\n<p>The available options for all sections of the config file are:</p>\n<dl>\n<dt><tt>editor</tt></dt>\n<dd>Command line or plugin name used to invoke the editor application. On\nWindows, if no editor setting is found for an object you edit, the\nhelper app will search the file type registry for an appropriate editor\nbased on the content-type or file extension of the object (which can be\nspecified using the extension option below). By default, the file path\nof the local file being edited is appended to this command line. To\ninsert the file path in the middle of your command, use \u201c$1\u201d for Unix\nand \u201c%1\u201d for Windows respectively.</dd>\n<dt><tt>save_interval</tt></dt>\n<dd>(float) The interval in seconds that the helper application checks the\nedited file for changes.</dd>\n<dt><tt>use_locks</tt></dt>\n<dd>(1 or 0) Whether to use WebDAV locking. The user editing must have the\nproper WebDAV related permissions for this to work.</dd>\n<dt><tt>always_borrow_locks</tt></dt>\n<dd>(1 or 0) When use_locks is enabled this features suppresses warnings\nwhen trying to edit an object you have already locked.  When enabled,\nexternal editor will always \u201cborrow\u201d the existing lock token instead of\ndoing the locking itself. This is useful when using CMFStaging for\ninstance. If omitted, this option defaults to 0.</dd>\n<dt><tt>cleanup_files</tt></dt>\n<dd>(1 or 0) Whether to delete the temp files created.  WARNING the temp\nfile coming from the browser contains authentication information and\ntherefore setting this to 0 is a security risk, especially on shared\nmachines. If set to 1, that file is deleted at the earliest\nopportunity, before the editor is even spawned. Set to 0 for debugging\nonly.</dd>\n<dt><tt>extension</tt></dt>\n<dd>(text) The file extension to add to the content file. Allows better\nhandling of images and can improve syntax highlighting.</dd>\n<dt><tt>temp_dir</tt></dt>\n<dd>(path) Path to store local copies of object data being edited. Defaults\nto operating system temp directory. <em>Note: this setting has no apparent\neffect on Windows</em> 8^(</dd>\n<dt><tt>long_file_name</tt></dt>\n<dd>(1 or 0) Whether to include the whole path to the object including the\nhostname in the file name (the default) or just the id of the object\nbeing edited. Turn this option off for shorter file names in your\neditors, and for editors that don\u2019t like long names.</dd>\n<dt><tt>file_name_separator</tt></dt>\n<dd>(string) Character or characters used to separate path elements in long\nfiles names used by external editor. Defaults to a comma (,). This must\nbe a legal character for use in file names on your platorm (i.e., don\u2019t\nuse a path separator character!). This option is ignored if\n\u2018long_file_name\u2019 is set to 0.</dd>\n</dl>\n</div>\n<div id=\"sections\">\n<h3>Sections</h3>\n<p>The sections of the configuration file specify the types of objects and\ncontent that the options beneath them apply to.</p>\n<p>There is only one mandatory section \u2018[general]\u2019, which should define all\nof the above options that do not have a default value. If no other\nsection defines an option for a given object, the general settings are\nused.</p>\n<p>Additional sections can apply to a particular domain, content-type or\nmeta-type. Since objects can have all these properties, the options are\napplied in this order of precedence:</p>\n<ol>\n<li>Options by whole content-type (e.g., <cite>[content-type:text/html]</cite>).</li>\n<li>Options by major content-type (e.g., <cite>[content-type:text/*]</cite>).</li>\n<li>Options by Zope meta-type (e.g., <cite>[meta-type:File]</cite>).</li>\n<li>Options by domain (e.g., <cite>[domain:www.mydomain.com]</cite>). Several\nsections can be added for each domain level if desired.</li>\n<li>General options (i.e., <cite>[general]</cite>).</li>\n</ol>\n<p>This scheme allows you to specify an extension by content-type, the\neditor by meta-type, the locking settings by domain and the remaining\noptions under general for a given object.</p>\n</div>\n<div id=\"editor-plugins\">\n<h3>Editor Plugins</h3>\n<p>For tighter client-side integration, external editor has a plugin system\nthat allows it to interact directly with supported applications.</p>\n<p>On Windows this generally means using COM to invoke the application, open\nthe content file and wait for the user to save and close the file. Because\neach application has different remote scripting capabilities and APIs,\neditor specific plugins must be written tailored to each supported\napplication and platform.</p>\n<p>This system allows external editor to efficiently connect to running\napplications without relaunching them and therefore fully support MDI\nenvironments. The following applications currently have plugin support:</p>\n<pre>Application       Platform    Plugin Module Name(s)\n===================================================\nHomeSite          Windows     homesite5, homesite\nDreamweaver       Windows     dreamweaver\nPhotoshop         Windows     photoshp, photoshop\nMS Word           Windows     winword, word\nMS Excel          Windows     excel\nMS Powerpoint     Windows     powerpnt, powerpoint\n</pre>\n<p>External editor will attempt to load a plugin for any application before\nusing the general editor control method. It does this by matching the\nname of the application executable file (sans extension) in the editor\ncommand line with the available plugins.</p>\n<p>Because plugins do not require the path of the editor application to work,\nyou can simply specify the plugin module name for your editor in the\nconfiguration file if desired. For example, to specify Photoshop for all\nimage files, use add the following section to your config file\n(ZopeEdit.ini on Windows):</p>\n<pre>[content-type:image/*]\neditor=photoshop\n</pre>\n<p>This is only a shortcut and specifying the full application path will\nstill use the plugin where possible.</p>\n</div>\n<div id=\"plugin-notes\">\n<h3>Plugin Notes</h3>\n<dl>\n<dt>Photoshop</dt>\n<dd>Photoshop\u2019s COM API is quite limited, and external editor cannot detect\nthat you have closed a file until you exit the entire application (it\ncan still detect saves). Therefore you may want to turn off DAV locking\n(use_locks=0) or borrow locks (always_borrow_locks=1) when using it.</dd>\n<dt>Dreamweaver</dt>\n<dd>External editor cannot detect when you have finished editing a single\nfile. Objects edited with Dreamweaver will remain locked on the server\nuntil you exit the application. As with Photoshop above, you may want\nto turn off locking for Dreamweaver.</dd>\n</dl>\n<p>If your favorite editor needs a plugin because the general support is\nnot good enough, please let me know. Keep in mind that I must be able to\nrun a copy of the application in order to develop a plugin for it. So,\nunless the application is free, or a full demo is available for download\nI won\u2019t be able to help much. Plugins are not difficult to write, and I\nencourage you to write one for your favorite editor, start by reading\none of the existing ones. I am happy to include third-party plugins with\nthe distribution.</p>\n</div>\n<div id=\"permissions\">\n<h3>Permissions</h3>\n<p>External editing is governed by the permission \u201cUse external editor\u201d.\nUsers with this permission can launch external editor from editable\nobjects. In order to save changes, users will need additional permissions\nappropriate for the objects they are editing.</p>\n<p>If users wish to use the built-in locking support, they must have the\n\u201cWebDAV access\u201d, \u201cWebDAV Lock items\u201d and \u201cWebDAV Unlock items\u201d permissions\nfor the objects they are editing.</p>\n<p>If these permissions are not set in Zope, then the helper application will\nreceive unauthorized errors from Zope which it will present to the user.</p>\n</div>\n<div id=\"integrating-with-external-editor\">\n<h3>Integrating with External Editor</h3>\n<p>The external editor product in zope installs a globally available object\nthat can format objects accessible through FTP/DAV for use by the helper\napplication. You can take advantage of this functionality easily in your\nown content management applications.</p>\n<p>Say you have an FTP editable object, \u201cdocument\u201d, in a Zope folder named\n\u201cmy_stuff\u201d. The URL to view the object would be:</p>\n<pre>http://zopeserver/my_stuff/document\n</pre>\n<p>The URL to kick off the external editor on this document would be:</p>\n<pre>http://zopeserver/my_stuff/externalEdit_/document\n</pre>\n<p>Now, this may look a bit odd to you if you are used to tacking views on to\nthe end of the URL. Because <cite>externalEdit_</cite> is required to work on Python\nScripts and Page Templates, which swallow the remaining path segments on\nthe URL following themselves, you must put the call to <cite>externalEdit_</cite>\n<em>directly before</em> the object to be edited. You could do this in ZPT using\nsome TAL in a Page Template like:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">'edit'</span>\n   <span class=\"na\">attributes</span><span class=\"o\">=</span><span class=\"s\">'href\n   string:${here/aq_parent/absolute_url}/externalEdit_/${here/getId}'</span><span class=\"p\">&gt;</span>\n   Edit Locally\n<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</pre>\n<p>As an alternative, you can also pass the path the object you want to edit\ndirectly to the <cite>externalEdit_</cite> object when you call its index_html method.\nIt can be called either directly by URL or from a python script.\n<cite>externalEdit_</cite> will return the proper response data for the object to edit.\nYou can invoke it via a URL:</p>\n<pre>http://zopeserver/externalEdit_?path=/my_stuff/document\n</pre>\n<p>or via Python:</p>\n<pre><span class=\"k\">return</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">externalEdit_</span><span class=\"o\">.</span><span class=\"n\">index_html</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">REQUEST</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">RESPONSE</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/my_stuff/document'</span><span class=\"p\">)</span>\n</pre>\n<p>When integrating External Editor with a CMS that already uses DAV\nlocks, it will, by default allow users to borrow locks made on the server\nafter displaying a confirmation dialog box. Although you can make this\nautomatic by specifying \u2018always_borrow_locks = 1\u2019 in the External Editor\nconfig file, it may be desireable to make this the default behavior when\nusing that server. To facilitate this, you can specify that locks\nshould be automatically borrowed in the URL (New in 0.7), i.e:</p>\n<pre>http://zopeserver/my_stuff/externalEdit_/document?borrow_lock=1\n</pre>\n<p>External Editor also defines a global method that you can call to insert\npencil icon links for appropriate objects. The method automatically checks\nif the object supports external editing and whether the user has the \u201cUse\nexternal editor\u201d permission for that object. If both are true, it returns\nthe HTML code to insert the external editor icon link. Otherwise it returns\nan empty string.</p>\n<p>The method is \u2018externalEditLink_(object)\u2019. The object argument is the\nobject to create the link for if appropriate. Here is some example page\ntemplate code that inserts links to objects in the current folder and the\nexternal editor icon where appropriate:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">tal:repeat</span><span class=\"o\">=</span><span class=\"s\">\"object here/objectValues\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"#\"</span>\n     <span class=\"na\">tal:attributes</span><span class=\"o\">=</span><span class=\"s\">\"href object/absolute_url\"</span>\n     <span class=\"na\">tal:content</span><span class=\"o\">=</span><span class=\"s\">\"object/title_or_id\"</span><span class=\"p\">&gt;</span>Object Title<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">tal:replace</span><span class=\"o\">=</span><span class=\"s\">\"structure python:here.externalEditLink_(object)\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n</div>\n<div id=\"conclusion\">\n<h3>Conclusion</h3>\n<p>I hope you enjoy using this software. If you have any comments, suggestions\nor would like to report a bug, send an email to the author:</p>\n<p>Casey Duncan</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>3.0 (2019-02-16)</h3>\n<ul>\n<li>Fix zmi-patches for Zope 4.\n[pbauer]</li>\n<li>Drop support for Python 2.6.</li>\n<li>Adapt tests to Zope 4.</li>\n<li>Add needed dependencies in <cite>setup.py</cite>.</li>\n<li>Prepare for Python 2 / 3 compatibility  [davilima6]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.0.3 (2017-07-17)</h3>\n<ul>\n<li>Document Zope version compatibility  [dataflake]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>2.0.2 (2017-02-14)</h3>\n<ul>\n<li>Fixed reflective XSS in findResult.\nThis applies PloneHotfix20170117.  [maurits]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>2.0.1 (2016-09-08)</h3>\n<ul>\n<li>Quote variable in manage_tabs to avoid XSS.\nFrom Products.PloneHotfix20160830.  [maurits]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>2.0.0 (2015-09-09)</h3>\n<ul>\n<li>Moved code to <a href=\"https://github.com/zopefoundation/Products.ExternalEditor\" rel=\"nofollow\">https://github.com/zopefoundation/Products.ExternalEditor</a></li>\n<li>Update dtml to Zope trunk.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.1.0 (2010-12-01)</h3>\n<ul>\n<li>Added support for unaware mimetype browser - we now add the .zem extension no\nmatter what the user-agent</li>\n<li>Modified the cache\u2019s parameters - special case for MSIE</li>\n<li>Corrected and added tests</li>\n<li>Moved the sources of the client to another package : collective.zopeedit</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.0 (2010-07-01)</h3>\n<ul>\n<li>Update manage_main, manage_tabs, and findResult monkey patches to include\nfixes from Zope 2.12.</li>\n</ul>\n</div>\n<div id=\"a2-2009-11-13\">\n<h3>1.0a2 (2009-11-13)</h3>\n<ul>\n<li>Removed imports from Globals.</li>\n<li>Purged old Zope 2 Interface interfaces for Zope 2.12 compatibility.</li>\n</ul>\n</div>\n<div id=\"a1-2008-03-05\">\n<h3>1.0a1 (2008-03-05)</h3>\n<ul>\n<li>Updated package metadata to be usable as a package.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>01/03/2007 - 0.9.3</h3>\n<ul>\n<li>Fixed issue with \u2018manage_FTPget\u2019 overriding the \u2018Content-Type\u2019\nheader.</li>\n<li>Only run ExpandEnvironmentStrings on win32 systems.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>9/14/2006 - 0.9.2</h3>\n<ul>\n<li>Added \u2018skip_data\u2019 option to make External Editor send out only\nthe metadata part and skip appending data to the \u2018body\u2019.</li>\n<li>Add a simple callback registry that can be used to add extra\nmetadata headers or set special response headers when a file is\nedited through External Editor.</li>\n<li>Use rfc822.Message for parsing the metadata of the file being\nedited.</li>\n<li>Don\u2019t emit a warning about deprecated \u2018methods\u2019 in Zope &gt;= 2.10.</li>\n<li>Fixed acquisition issue in manage_main.dtml to sync up with the\nsame fix applied to Zope.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>6/23/2005 - 0.9.1</h3>\n<ul>\n<li>Older pyc files for plugins were included in the 0.9 release.\nThis version has the most up to date plugins.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>6/20/2005 - 0.9</h3>\n<ul>\n<li>When using the Excel plugin, errors were seen by users like\n\u201cTypeError: This object does not support enumeration\u201d.  We now\nmake the user deal with these.</li>\n<li>When using the Excel plugin, errors were intermittently raised to the\nuser in the form \u201cFatal error: &lt;unknown&gt;.Path\u201d and the user could\nsubsequently not save the document back to Zope because the\nexternal editor process had quit.</li>\n<li>Changes to documents intermittently may not have been saved back to Zope\nwhen using any plugin that involved COM (Word, Excel, Powerpoint, etc).</li>\n<li>If Word was exited before a user actively saved, if there were\noutstanding changes in the document being edited, those changes\nwould not be saved to the server despite the user answering\n\u201cyes\u201d to the \u201cdo you want to save before you exit\u201d dialog\npresented by Word.</li>\n<li>The \u201ctitle\u201d attribute of the object being externally edited is\nnow available within the set of headers returned by EE to the\nzopeedit client.</li>\n<li>Detecting whether the client has External Editor installed from\nwithin IE using JavaScript or VBScript is now possible, assuming\nthat the client software is installed via the InnoSetup\ninstaller.  See \u201cwin32/ocx.txt\u201d for more info.</li>\n<li>External Editor now compatible with objects that return a\n\u201cfilestream iterator\u201d in Zope 2.7.1+. (if upgrading: this fix\ndoes not require an update to EE client, just the EE Zope\nproduct).</li>\n<li>Properly escape hyphens in man page. Thanks to Federico Sevilla III.</li>\n<li>Check if the editor was launched before locking the file in Zope. This\nprevents errors if the editor is closed before the lock request\ncompletes.</li>\n<li>Do not ask the user what editor to use on Posix platforms. Instead just\ntell the user to edit the config file. The askstring()\nfunction does not work with a hidden root Tk window in Python 2.3.4.\nThanks to Christopher Mann.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>7/13/04 - 0.8</h3>\n<ul>\n<li>Add external editor icon to ZMI breadcrumbs for editable objects.</li>\n<li>Compiled windows helper app binary using Python 2.3.4, Pythonwin build\n163 and py2exe 0.5.</li>\n<li>Add Dreamweaver plugin contributed by Manuel Aristarann. Thanks also\nto Anton Stonor.</li>\n<li>Add ZMI support for Zope 2.7\u2019s ordered folder objects.</li>\n<li>Fix bug detecting basic auth info from older versions of CookieCrumber.\nThanks to David D. Smith and Federico Sevilla III.</li>\n<li>Workaround IE browser error when running over SSL. Thanks to\nMarc-Aurele Darche.</li>\n<li>Add \u201c.zem\u201d file extension support for MacOS X (especially Mac IE),\nto ease helper app integration where MIME support is lacking. Thanks\nto Zac Bir.</li>\n<li>Added \u201clong_file_name\u201d and \u201cfile_name_separator\u201d config options.</li>\n<li>Fixed bug which happened under Win32 when editing an Excel file\nusing the Excel plugin where the symptom was a \u201cCall was\nrejected by callee\u201d COM error. Thanks to Chris McDonough.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>4/23/04 - 0.7.2</h3>\n<ul>\n<li>Change default configuration to use .txt extension for text/plain only.\nAdd extensions for css and javascript files.</li>\n<li>Fixed packaging bug in Windows binary which disabled several plugins.\nThis fixes \u201cEditor did not launch properly\u201d errors for MSOffice\namong others.</li>\n<li>Fixed a bug where very short editing sessions where no changes were\nmade could make EE think the editor never launched. Thanks to Maik Ihde.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>11/7/03 - 0.7.1</h3>\n<ul>\n<li>Fix encoding bug in windows binary. Thanks to Chris McDonough.</li>\n<li>Added tip for configuring IE to save files over SSL. Thanks to\nJonah Bossewitch.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>4/1/03 - 0.7</h3>\n<ul>\n<li>Added working distutils setup for Unix.</li>\n<li>You can now specify from the server that the helper app should\nborrow a lock by passing borrow_lock=1 via the request, thus\nsuppressing the dialog box which appears by default. Thanks\nto Shane Hathaway.</li>\n<li>Improved open file check in Word and Powerpoint plugins\nthanks to Yura Petrov.</li>\n<li>Added plugins for Microsoft Word, Excel and Powerpoint.</li>\n<li>Added the man page from the Debian distro. Thanks go out to\nFederico Sevilla III and Andreas Tille</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>11/02/02 - 0.6</h3>\n<ul>\n<li>Built Windows helper app using Python 2.2.2 and PythonWin 148.</li>\n<li>The <cite>externalEdit_</cite> object now accepts a path argument to the object to\nedit, allowing URLs like: <cite>http://zope/externalEdit_?path=/some/object.</cite>\nThis allows external editor to play better with applications making use\nof traversal magic of their own. Thanks to Tres Seaver.</li>\n<li>Fixed NameError bug in unlock retry code. Thanks to Federico Sevilla III.</li>\n<li>Added a workaround for non-compliant SSL servers. The software now\nsilently ignores \u201cEOF occurred in violation of protocol\u201d errors coming\nfrom httplib. Thanks to Christopher Deckard.</li>\n<li>Removed stderr writes to cure \u201cInvalid File Descriptor\u201d errors on\nWindows. Thanks to Martijn Peters.</li>\n<li>Added Photoshop plugin (win32)</li>\n<li>Added HomeSite plugin (win32)</li>\n<li>Added win32 editor plugin support for the helper application.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>8/19/02 - 0.5</h3>\n<ul>\n<li>Added patch for Zope find template so that you can use external editor\ndirectly from find results in the ZMI. Thanks to Jim Washington.</li>\n<li>Factored out external editor link generator. Product now registers\na global method <cite>externalEditLink_</cite> which can be called to generate\nthe external editor icon link for any object.</li>\n<li>External editing is now governed by the \u201cUse external editor\u201d permission\nto allow non-managers to use it. Users must also have the permissions to\nedit/modify the objects they edit, plus do WebDAV locking if desired.\nThanks to Reineke and others.</li>\n<li>Unix editor command line parsing is much more robust now and properly\nhandles quoted arguments. You can also specify the \u201c$1\u201d placeholder in the\neditor command to denote where the content file name is inserted. If\nomitted it is appended to the end of the command line. \u201c%1\u201d continues to\nwork similarly for Windows. Thanks to Marc St-Jean.</li>\n<li>Fixed bug editing large (chunked) files and images. External editor now\nstreams their data properly to the client. Thanks to all the users who\nreported various symptoms of this bug.</li>\n<li>Fixed bug editing objects inside a Squishdot site. Thanks to Kevin Salt.</li>\n<li>Added the capability to borrow exising DAV locks. This allows external\neditor to play well with other systems using locks, such as CMFStaging. A\nnew configuration flag, always_borrow_locks can be set to suppress the\nborrow lock warning dialog when editing.</li>\n<li>Fixed auth bug when product was used with mysqlUserFolder. Thanks to\nViNiL.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>6/30/02 - 0.4.2</h3>\n<ul>\n<li>Added SSL support to Windows binary package. Thanks to Federico\nSevilla III</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>6/29/02 - 0.4.1</h3>\n<ul>\n<li>Fixed dangling dav lock bug on fatal errors. Thanks to Marc St-Jean.</li>\n<li>Fixed content_type bug, now checks if it is callable. Thanks to Arnaud\nBienvenu.</li>\n<li>Fixed bug with editing binary data on Windows. Thanks to Eric Kamm.</li>\n<li>Fixed bug setting the editor on Posix platforms.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>6/24/02 - 0.4</h3>\n<ul>\n<li>Added \u2013version command line argument</li>\n<li>Made manage_FTPget the default source for the editable content, instead\nof document_src which was broken for CMF Wiki Pages.</li>\n<li>Fixed Windows \u201cbody_file\u201d bug.</li>\n<li>Added binary build support for Windows using py2exe and Inno setup.</li>\n<li>Fixed Windows config file locator. It now looks in the program directory\nand then the user\u2019s home directory (if specified)</li>\n<li>Fixed bug in Windows registry editor lookup.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3>6/16/02 - 0.3</h3>\n<ul>\n<li>Improved behavior when saving after lock attempts fail.</li>\n<li>Now works on Windows (applause) using Pythonwin. Much overall\nrefactoring to abstract process control. Thanks to Oliver Deckmyn,\nGabriel Genellina and Arno Gross for testing, patches and suggestions.</li>\n<li>Added \u201ctemp_dir\u201d configuration option for specifying a different\ntemp file directory then the OS default. Also further improved\ntemp file name generation.</li>\n<li>Added support for domain specific configuration options.</li>\n<li>Fixed trailing newline bug in encoded auth data coming from\nCookieCrumbler. Thanks to Harald Koschinski.</li>\n<li>You can now pass command line arguments to the editor in the config file,\nor wrap the editor in an xterm without using a shell script.</li>\n<li>Rewrote \u201cEditor did not launch\u201d error message so it makes more sense.</li>\n<li>Fixed https detection bug. External editor is now tested and working with\nhttps. Many thanks to Hans-Dieter Stich and Martin Groenemeyer for their\nassistance and ideas.</li>\n<li>Made it possible to edit objects that are methods of ZClasses. Thanks to\nJim Washington</li>\n<li>Refactored link generation code in manage_main so that it uses\nthe parent\u2019s absolute_url rather than URL1. Thanks to\nJim Washington</li>\n<li>Removed implicit save in Configuration class destructor</li>\n<li>Added caching headers to prevent client-side caching of edit data.\nThanks to Gabriel Genellina for pointing this out.</li>\n<li>Added improved support for editing CMF documents</li>\n<li>Eliminated spurious \u201cEditor did not launch\u201d errors on short sessions\nor when other errors occurred.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>5/16/02 - 0.2</h3>\n<ul>\n<li>Fixed product uninstallation bug</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3>5/15/02 - 0.1</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4829376, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "015350455d140233cb3aa4846cae2571", "sha256": "f96fa4914e236225ba735e17f004368f10405a2aad86bbfa8c1306fcc240b198"}, "downloads": -1, "filename": "Products.ExternalEditor-1.0.zip", "has_sig": false, "md5_digest": "015350455d140233cb3aa4846cae2571", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100232, "upload_time": "2010-07-01T17:19:32", "upload_time_iso_8601": "2010-07-01T17:19:32.813093Z", "url": "https://files.pythonhosted.org/packages/9d/ac/cd41ce88eeaed88672eead7fe101b73fb0009eba80845d5f9503b40bec28/Products.ExternalEditor-1.0.zip", "yanked": false}], "1.0a1": [{"comment_text": "", "digests": {"md5": "af58e424866369567c43dd4199056610", "sha256": "39c8390292c1f0db4baf34645670b992025c33d47ad2f308624e321e4db87fea"}, "downloads": -1, "filename": "Products.ExternalEditor-1.0a1.tar.gz", "has_sig": true, "md5_digest": "af58e424866369567c43dd4199056610", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76421, "upload_time": "2008-05-03T19:51:18", "upload_time_iso_8601": "2008-05-03T19:51:18Z", "url": "https://files.pythonhosted.org/packages/62/1e/14896ca9b20cd794a6ab56a811df03950303109c4129a170db34266664ac/Products.ExternalEditor-1.0a1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0db7f234575784c41f161b825d4303a", "sha256": "3bb3a4657222e4e351a904f5f188ea2697b148bd4f9532918301e9aa6d9ecac4"}, "downloads": -1, "filename": "Products.ExternalEditor-1.0a1.zip", "has_sig": true, "md5_digest": "d0db7f234575784c41f161b825d4303a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98698, "upload_time": "2008-10-14T16:54:51", "upload_time_iso_8601": "2008-10-14T16:54:51Z", "url": "https://files.pythonhosted.org/packages/6c/1d/e1dc0bb3017fcafcdde05a746c116295ed3e068b23b561b6b850f0c80b6d/Products.ExternalEditor-1.0a1.zip", "yanked": false}], "1.0a2": [{"comment_text": "", "digests": {"md5": "f547d9f010e72da4cd3cb45344b40826", "sha256": "20118d1a9a605fc5ba645a4f233b613b124850238040c605dbf83f384492afa1"}, "downloads": -1, "filename": "Products.ExternalEditor-1.0a2.zip", "has_sig": false, "md5_digest": "f547d9f010e72da4cd3cb45344b40826", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98947, "upload_time": "2009-11-13T21:28:51", "upload_time_iso_8601": "2009-11-13T21:28:51.908456Z", "url": "https://files.pythonhosted.org/packages/29/d9/436de38771995d4daae1975242205864454af5b1d90ae96419841efd5490/Products.ExternalEditor-1.0a2.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "475fea6e0b958c0c51cfdbfef2f4e623", "sha256": "847013cf831772c5f65db329b083f81b1b319b9a68ea8b344360ebb77f6f1ea7"}, "downloads": -1, "filename": "Products.ExternalEditor-1.1.0.zip", "has_sig": false, "md5_digest": "475fea6e0b958c0c51cfdbfef2f4e623", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56705, "upload_time": "2010-12-03T12:19:03", "upload_time_iso_8601": "2010-12-03T12:19:03.358346Z", "url": "https://files.pythonhosted.org/packages/0d/c2/d275ed3297e9ba44be016708dcc34099f6cb40a16458ca10fb51efdc280c/Products.ExternalEditor-1.1.0.zip", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "21c69354cb2eca057bab51ab21f5d19b", "sha256": "7ed474b92283e18523904e62e5cfeda0b098d5bd3fa1ab2c7c632f81bdd596b9"}, "downloads": -1, "filename": "Products.ExternalEditor-1.1.1.tar.gz", "has_sig": false, "md5_digest": "21c69354cb2eca057bab51ab21f5d19b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47887, "upload_time": "2015-09-10T13:08:12", "upload_time_iso_8601": "2015-09-10T13:08:12.813106Z", "url": "https://files.pythonhosted.org/packages/14/9f/8f78c6377dad52a2600d9f3f7192e37b4441fa451532e2c5b737516e7945/Products.ExternalEditor-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "369300d066ac2227c2ee4b6e4ccdd700", "sha256": "2fd53ae608e3373bb159b192cf63b8e5138c9fc9283916f75a38011eb922c3bb"}, "downloads": -1, "filename": "Products.ExternalEditor-1.1.2.tar.gz", "has_sig": false, "md5_digest": "369300d066ac2227c2ee4b6e4ccdd700", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48078, "upload_time": "2016-09-07T22:24:34", "upload_time_iso_8601": "2016-09-07T22:24:34.896283Z", "url": "https://files.pythonhosted.org/packages/55/50/4b6207095a934b64279fc12ae69fb1ae2c2e0fa9a841e2697f9c87c8f073/Products.ExternalEditor-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "7b593c14925af9df6f6c7fed7b53acb4", "sha256": "860d1a223641b2218a01b3018324175bdd6952f31a7e795c447fb6d0b358f450"}, "downloads": -1, "filename": "Products.ExternalEditor-1.1.3.tar.gz", "has_sig": false, "md5_digest": "7b593c14925af9df6f6c7fed7b53acb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48220, "upload_time": "2017-02-14T16:07:48", "upload_time_iso_8601": "2017-02-14T16:07:48.547422Z", "url": "https://files.pythonhosted.org/packages/a6/0f/ef11be27b0e5227e6fdead334fd0c37c361382769d630b34d6519b285cde/Products.ExternalEditor-1.1.3.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "de8319e798181e9cfea8a04bb26a5120", "sha256": "6bfabbc70c305acd33a91a78d6f0d778f9cc2d048779244adf34550270f8da36"}, "downloads": -1, "filename": "Products.ExternalEditor-2.0.0.tar.gz", "has_sig": false, "md5_digest": "de8319e798181e9cfea8a04bb26a5120", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46899, "upload_time": "2015-09-09T15:50:23", "upload_time_iso_8601": "2015-09-09T15:50:23.581546Z", "url": "https://files.pythonhosted.org/packages/48/27/c50ffc03c925afbce0b98b34e6cfc0a989f38f0149942319ea145080a675/Products.ExternalEditor-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "ef3e9711193a8ce673ae6d08277c18fb", "sha256": "2d45abc1b6082d0437751668e74e307cb8e2355c85c18fcea8ac1e85754664a0"}, "downloads": -1, "filename": "Products.ExternalEditor-2.0.1.tar.gz", "has_sig": false, "md5_digest": "ef3e9711193a8ce673ae6d08277c18fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47181, "upload_time": "2016-09-07T22:26:59", "upload_time_iso_8601": "2016-09-07T22:26:59.718866Z", "url": "https://files.pythonhosted.org/packages/f6/d2/bcf710eea04a5f5e356d8da3ff10c8c423ef5c17055e68a382ecd3b5cacd/Products.ExternalEditor-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "c224925eb05480ea812bbb80eef825ef", "sha256": "0829f9005228be0164177b6c75d9df5c4bc497ac11c9ee02e1111eb02c9930fb"}, "downloads": -1, "filename": "Products.ExternalEditor-2.0.2.tar.gz", "has_sig": false, "md5_digest": "c224925eb05480ea812bbb80eef825ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47280, "upload_time": "2017-02-14T16:10:20", "upload_time_iso_8601": "2017-02-14T16:10:20.385007Z", "url": "https://files.pythonhosted.org/packages/3b/89/9c8e14fb0c6a04d76ce5a6f23192d550b011e9b703a9324fbea132e6a794/Products.ExternalEditor-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "7095625eafe7738f2f152a8335277b5d", "sha256": "6a79c90aa7300b43a1e8837094add24c6c1dd1f445e242e1a1244f27e27df20e"}, "downloads": -1, "filename": "Products.ExternalEditor-2.0.3.tar.gz", "has_sig": false, "md5_digest": "7095625eafe7738f2f152a8335277b5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47552, "upload_time": "2017-07-17T11:15:11", "upload_time_iso_8601": "2017-07-17T11:15:11.776280Z", "url": "https://files.pythonhosted.org/packages/c6/1d/6839e3e107657e2cad5141a8f4be39cff2afa6f1342c161f5fb2752e43a0/Products.ExternalEditor-2.0.3.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "6c947d2beb3a7a8ba7f970b19594755a", "sha256": "f437a14ddfe34c9d0644f4563cbbcfd5f80d810019a420b21023cd7207afc3f4"}, "downloads": -1, "filename": "Products.ExternalEditor-3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c947d2beb3a7a8ba7f970b19594755a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33623, "upload_time": "2019-02-16T18:11:51", "upload_time_iso_8601": "2019-02-16T18:11:51.548725Z", "url": "https://files.pythonhosted.org/packages/5a/d8/0b016cb3c3cf83e0e5ddd58d382f51788f59550e460302f0b49af462b4f9/Products.ExternalEditor-3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1eecd9695eb6f439c58eb5ca2fe4f0ab", "sha256": "7018ac5b8fa84c13ee6f6254fbe19219b28202d486f83676634966c6a6d114e7"}, "downloads": -1, "filename": "Products.ExternalEditor-3.0.tar.gz", "has_sig": false, "md5_digest": "1eecd9695eb6f439c58eb5ca2fe4f0ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51081, "upload_time": "2019-02-16T18:11:53", "upload_time_iso_8601": "2019-02-16T18:11:53.698895Z", "url": "https://files.pythonhosted.org/packages/f5/70/909ef58d509393d242c76978e812c27ee3b22ad00fb2c54da96b88313067/Products.ExternalEditor-3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c947d2beb3a7a8ba7f970b19594755a", "sha256": "f437a14ddfe34c9d0644f4563cbbcfd5f80d810019a420b21023cd7207afc3f4"}, "downloads": -1, "filename": "Products.ExternalEditor-3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c947d2beb3a7a8ba7f970b19594755a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33623, "upload_time": "2019-02-16T18:11:51", "upload_time_iso_8601": "2019-02-16T18:11:51.548725Z", "url": "https://files.pythonhosted.org/packages/5a/d8/0b016cb3c3cf83e0e5ddd58d382f51788f59550e460302f0b49af462b4f9/Products.ExternalEditor-3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1eecd9695eb6f439c58eb5ca2fe4f0ab", "sha256": "7018ac5b8fa84c13ee6f6254fbe19219b28202d486f83676634966c6a6d114e7"}, "downloads": -1, "filename": "Products.ExternalEditor-3.0.tar.gz", "has_sig": false, "md5_digest": "1eecd9695eb6f439c58eb5ca2fe4f0ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51081, "upload_time": "2019-02-16T18:11:53", "upload_time_iso_8601": "2019-02-16T18:11:53.698895Z", "url": "https://files.pythonhosted.org/packages/f5/70/909ef58d509393d242c76978e812c27ee3b22ad00fb2c54da96b88313067/Products.ExternalEditor-3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:20 2020"}