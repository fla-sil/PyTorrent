{"info": {"author": "Yoshihisa Tanaka", "author_email": "yt.hisa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Framework :: Trac", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python"], "description": "Introduction\n============\nTracBlockdiag is a trac plugin that integrate blockdiag series into wiki pages.\nIt's provide wiki macros for blockdiag, seqdiag, actdiag, nwdiag and rackdiag.\n\nThis software is available under the MIT license.\n\nFeatures\n========\nTracBlockdiag has several features.\n\n- Support almost blockdiag features (fontmap is not supported).\n- Support PNG/SVG output (SVG support is Trac 0.12 only).\n- Fastest wiki rendering.\n- Multi thread/process safe.\n- Check installed blockdiag series and provide only supported macros.\n- Don't create temporary file.\n\nRequirements\n============\n- Python >= 2.5\n- Trac >= 0.11\n\nIf you need all features, you must use Trac 0.12 or later.\n\nInstall\n=======\nFirst, clone the repository. ::\n\n  $ git clone https://github.com/yosisa/TracBlockdiag.git\n  $ cd TracBlockdiag\n\nThen, you can install globally ::\n\n  # python setup.py install\n\nor install to a specific Trac environment. ::\n\n  $ python setup.py bdist_egg\n  $ cp dist/*.egg /path/to/tracenv/plugins\n\nMoreover, you must install blockdiag series which you want to integrate.\nFor example, below command will install all blockdiag series\n(rackdiag is currently included in nwdiag). ::\n\n  $ pip install blockdiag seqdiag actdiag nwdiag\n\nOptionally, you can use blockdiag plugins.\nIf you need a plugin, you simply install it.\nFor example, below command will install new shapes. ::\n\n  $ pip install blockdiagcontrib-cisco\n\nUsage\n=====\nIf you are not familiar with blockdiag, you should read the `blockdiag documentation <http://blockdiag.com/en/blockdiag/>`_ first.\n\nfor Trac 0.12 or later\n----------------------\nMacro synopsis like this::\n\n  {{{#!(block|seq|act|nw|rack)diag [type=(png|svg)] [IMG_TAG_ATTR=VALUE ...]\n  *DIAG_SOURCE_TEXT\n  }}}\n\nYou can write blockdiag source text as a wiki macro like below. ::\n\n  {{{#!blockdiag\n  {\n    A -> B -> C;\n         B -> D;\n  }\n  }}}\n\nYou can specify output format and width. ::\n\n  {{{#!blockdiag type=svg width=800px\n  {\n    A -> B -> C;\n         B -> D;\n  }\n  }}}\n\nfor Trac 0.11\n-------------\nMacro synopsis like this::\n\n  {{{\n  #!(block|seq|act|nw|rack)diag\n  *DIAG_SOURCE_TEXT\n  }}}\n\n**In Trac 0.11, macro arguments is not supported.\nSo, all diagrams are generated with the format specified in default_type option.**\n\nYou can write blockdiag source text as a wiki macro like below. ::\n\n  {{{\n  #!blockdiag\n  {\n    A -> B -> C;\n         B -> D;\n  }\n  }}}\n\nOptions\n=======\nTracBlockdiag has several configuration parameters.\nThese parameters are specify in `[tracblockdiag]` section of the `trac.ini` config file.\nThese parameters are defined as follows.\n\n+--------------+--------------+---------+--------------------------------------------------------------------------+\n| name         | type         | default | description                                                              |\n+==============+==============+=========+==========================================================================+\n| font         | string array | (auto)  | Paths to font file which are used in PNG generation.                     |\n+--------------+--------------+---------+--------------------------------------------------------------------------+\n| cachetime    | int          | 300     | Time in seconds which the plugin caches a generated diagram in.          |\n+--------------+--------------+---------+--------------------------------------------------------------------------+\n| gc_interval  | int          | 100     | The number of diagram generation.                                        |\n|              |              |         | Unused cache is cleared every this count.                                |\n+--------------+--------------+---------+--------------------------------------------------------------------------+\n| default_type | string       | svg     | Default diagram type to generate.                                        |\n+--------------+--------------+---------+--------------------------------------------------------------------------+\n| syntax_check | bool         | True    | Check syntax of source text and show error insted of 500 response.       |\n|              |              |         | Note that when using syntax check, the performance is slightly down.     |\n+--------------+--------------+---------+--------------------------------------------------------------------------+\n| fallback     | bool         | False   | Fallback to png image when a browser is not support svg.                 |\n|              |              |         | Note that using fallback causes double image generation because          |\n|              |              |         | major browsers request png image whether svg rendering succeeded or not. |\n|              |              |         | So, enabling this option may causes high load.                           |\n+--------------+--------------+---------+--------------------------------------------------------------------------+\n\nHistory\n=======\n0.2.1 (2012-02-26)\n  - fix issue on setup from PyPI\n\n0.2.0 (2012-01-21)\n  - change default type from png to svg\n  - add option for default type\n  - add option to enable syntax checking for detailed error\n  - support fallback to png if a browser doesn't support svg\n  - fix bug which generating incorrect diagram when there are multiple diagrams in one page\n\n0.1.1 (2012-01-12)\n  - fix bug when source text contains unicode\n  - fix bug which drawing incorrect font while png rendering\n\n0.1.0 (2012-01-11)\n  - first release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yosisa/TracBlockdiag", "keywords": "trac,macro,blockdiag", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "TracBlockdiag", "package_url": "https://pypi.org/project/TracBlockdiag/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/TracBlockdiag/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/yosisa/TracBlockdiag"}, "release_url": "https://pypi.org/project/TracBlockdiag/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Integrate blockdiag series into Trac wiki", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>TracBlockdiag is a trac plugin that integrate blockdiag series into wiki pages.\nIt\u2019s provide wiki macros for blockdiag, seqdiag, actdiag, nwdiag and rackdiag.</p>\n<p>This software is available under the MIT license.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>TracBlockdiag has several features.</p>\n<ul>\n<li>Support almost blockdiag features (fontmap is not supported).</li>\n<li>Support PNG/SVG output (SVG support is Trac 0.12 only).</li>\n<li>Fastest wiki rendering.</li>\n<li>Multi thread/process safe.</li>\n<li>Check installed blockdiag series and provide only supported macros.</li>\n<li>Don\u2019t create temporary file.</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 2.5</li>\n<li>Trac &gt;= 0.11</li>\n</ul>\n<p>If you need all features, you must use Trac 0.12 or later.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>First, clone the repository.</p>\n<pre>$ git clone https://github.com/yosisa/TracBlockdiag.git\n$ cd TracBlockdiag\n</pre>\n<p>Then, you can install globally</p>\n<pre># python setup.py install\n</pre>\n<p>or install to a specific Trac environment.</p>\n<pre>$ python setup.py bdist_egg\n$ cp dist/*.egg /path/to/tracenv/plugins\n</pre>\n<p>Moreover, you must install blockdiag series which you want to integrate.\nFor example, below command will install all blockdiag series\n(rackdiag is currently included in nwdiag).</p>\n<pre>$ pip install blockdiag seqdiag actdiag nwdiag\n</pre>\n<p>Optionally, you can use blockdiag plugins.\nIf you need a plugin, you simply install it.\nFor example, below command will install new shapes.</p>\n<pre>$ pip install blockdiagcontrib-cisco\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>If you are not familiar with blockdiag, you should read the <a href=\"http://blockdiag.com/en/blockdiag/\" rel=\"nofollow\">blockdiag documentation</a> first.</p>\n<div id=\"for-trac-0-12-or-later\">\n<h3>for Trac 0.12 or later</h3>\n<p>Macro synopsis like this:</p>\n<pre>{{{#!(block|seq|act|nw|rack)diag [type=(png|svg)] [IMG_TAG_ATTR=VALUE ...]\n*DIAG_SOURCE_TEXT\n}}}\n</pre>\n<p>You can write blockdiag source text as a wiki macro like below.</p>\n<pre>{{{#!blockdiag\n{\n  A -&gt; B -&gt; C;\n       B -&gt; D;\n}\n}}}\n</pre>\n<p>You can specify output format and width.</p>\n<pre>{{{#!blockdiag type=svg width=800px\n{\n  A -&gt; B -&gt; C;\n       B -&gt; D;\n}\n}}}\n</pre>\n</div>\n<div id=\"for-trac-0-11\">\n<h3>for Trac 0.11</h3>\n<p>Macro synopsis like this:</p>\n<pre>{{{\n#!(block|seq|act|nw|rack)diag\n*DIAG_SOURCE_TEXT\n}}}\n</pre>\n<p><strong>In Trac 0.11, macro arguments is not supported.\nSo, all diagrams are generated with the format specified in default_type option.</strong></p>\n<p>You can write blockdiag source text as a wiki macro like below.</p>\n<pre>{{{\n#!blockdiag\n{\n  A -&gt; B -&gt; C;\n       B -&gt; D;\n}\n}}}\n</pre>\n</div>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<p>TracBlockdiag has several configuration parameters.\nThese parameters are specify in <cite>[tracblockdiag]</cite> section of the <cite>trac.ini</cite> config file.\nThese parameters are defined as follows.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>name</th>\n<th>type</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>font</td>\n<td>string array</td>\n<td>(auto)</td>\n<td>Paths to font file which are used in PNG generation.</td>\n</tr>\n<tr><td>cachetime</td>\n<td>int</td>\n<td>300</td>\n<td>Time in seconds which the plugin caches a generated diagram in.</td>\n</tr>\n<tr><td>gc_interval</td>\n<td>int</td>\n<td>100</td>\n<td>The number of diagram generation.\nUnused cache is cleared every this count.</td>\n</tr>\n<tr><td>default_type</td>\n<td>string</td>\n<td>svg</td>\n<td>Default diagram type to generate.</td>\n</tr>\n<tr><td>syntax_check</td>\n<td>bool</td>\n<td>True</td>\n<td>Check syntax of source text and show error insted of 500 response.\nNote that when using syntax check, the performance is slightly down.</td>\n</tr>\n<tr><td>fallback</td>\n<td>bool</td>\n<td>False</td>\n<td>Fallback to png image when a browser is not support svg.\nNote that using fallback causes double image generation because\nmajor browsers request png image whether svg rendering succeeded or not.\nSo, enabling this option may causes high load.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<dl>\n<dt>0.2.1 (2012-02-26)</dt>\n<dd><ul>\n<li>fix issue on setup from PyPI</li>\n</ul>\n</dd>\n<dt>0.2.0 (2012-01-21)</dt>\n<dd><ul>\n<li>change default type from png to svg</li>\n<li>add option for default type</li>\n<li>add option to enable syntax checking for detailed error</li>\n<li>support fallback to png if a browser doesn\u2019t support svg</li>\n<li>fix bug which generating incorrect diagram when there are multiple diagrams in one page</li>\n</ul>\n</dd>\n<dt>0.1.1 (2012-01-12)</dt>\n<dd><ul>\n<li>fix bug when source text contains unicode</li>\n<li>fix bug which drawing incorrect font while png rendering</li>\n</ul>\n</dd>\n<dt>0.1.0 (2012-01-11)</dt>\n<dd><ul>\n<li>first release</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 785832, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "056fa9bbf6cf9da01a82c53e51c273fa", "sha256": "ab0e9dfb0821760896dcf003c758ae150314f30ef2a686860e09b35db79b9fde"}, "downloads": -1, "filename": "TracBlockdiag-0.2.1.tar.gz", "has_sig": false, "md5_digest": "056fa9bbf6cf9da01a82c53e51c273fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6722, "upload_time": "2012-02-26T03:10:22", "upload_time_iso_8601": "2012-02-26T03:10:22.604668Z", "url": "https://files.pythonhosted.org/packages/db/a3/9871a47abb6328e728530bb8db1409f4a88cf282e0801fbc115c6ba5de22/TracBlockdiag-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "056fa9bbf6cf9da01a82c53e51c273fa", "sha256": "ab0e9dfb0821760896dcf003c758ae150314f30ef2a686860e09b35db79b9fde"}, "downloads": -1, "filename": "TracBlockdiag-0.2.1.tar.gz", "has_sig": false, "md5_digest": "056fa9bbf6cf9da01a82c53e51c273fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6722, "upload_time": "2012-02-26T03:10:22", "upload_time_iso_8601": "2012-02-26T03:10:22.604668Z", "url": "https://files.pythonhosted.org/packages/db/a3/9871a47abb6328e728530bb8db1409f4a88cf282e0801fbc115c6ba5de22/TracBlockdiag-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:00 2020"}