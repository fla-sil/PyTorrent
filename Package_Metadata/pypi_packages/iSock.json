{"info": {"author": "Damian Nowok", "author_email": "damian.nowok@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Programming Language :: Python :: 2.7", "Topic :: Software Development"], "description": "=======\r\niSocket\r\n=======\r\n\r\n**Simple client - server library based on TCP SocketServer**\r\n\r\niSocket is a library that allows very rapid development of client - server applications in Python.\r\nIf you develop software that runs on several machines which communicate with each other this library might come in handy.\r\n\r\nMain features:\r\n\r\n- Very simple server configuration.\r\n- Easy way to transfer back and forth complex data structures (everything that is pickable can be send and receive).\r\n- iSocket structure allows clean design of your application.\r\n- Client can easily access variables on server.\r\n\r\niSocket is written in Python 2.7 and works on Windows and Linux. Source code can be found here: https://github.com/0x1001/isock\r\n\r\niSocket installation\r\n--------------------\r\nDownload zip from http://pypi.python.org/pypi/isock/ web pages. Unzip it and run::\r\n\r\n    python setup.py install\r\n\r\niSocket example\r\n---------------\r\nSample code below shows usage example.\r\nYou can learn here how to start server and client and how to define server actions.\r\n\r\nList of actions used in this example:\r\n\r\n- Echo - Sends back all data to client.\r\n- Exec - Executes system call on server and transfers console output to client.\r\n- ExecHistory - Sends system call history to client.\r\n- Time - Sends current server time to client.\r\n\r\nExample::\r\n\r\n    import threading\r\n    from isock import Server\r\n    from isock import Client\r\n    from isock import Action\r\n\r\n    ################################################################################\r\n    ############################ Server actions ####################################\r\n    ################################################################################\r\n    class Echo(Action):\r\n        def action(self,data):\r\n            return data\r\n\r\n    class Exec(Action):\r\n        def __init__(self,exec_history):\r\n            self.exec_history = exec_history\r\n\r\n        def action(self,data):\r\n            import subprocess\r\n            self.exec_history.append(data)\r\n            return subprocess.check_output(data,shell=True)\r\n\r\n    class ExecHistory(Action):\r\n        def __init__(self,exec_history):\r\n            self.exec_history = exec_history\r\n\r\n        def action(self,data):\r\n            return self.exec_history\r\n\r\n    class Time(Action):\r\n        def action(self,data):\r\n            import datetime\r\n            return datetime.datetime.now()\r\n\r\n    ################################################################################\r\n    ############################ Server startup ####################################\r\n    ################################################################################\r\n    history = []\r\n\r\n    server = Server(\"localhost\",4440)\r\n    server.addAction(Echo())\r\n    server.addAction(Exec(history))\r\n    server.addAction(ExecHistory(history))\r\n    server.addAction(Time())\r\n    server_thread = threading.Thread(target=server.serve_forever)\r\n    server_thread.start()\r\n\r\n    ################################################################################\r\n    ############################ Client session ####################################\r\n    ################################################################################\r\n    client = Client(\"localhost\",4440)\r\n\r\n    print \"############################# Echo test ################################\"\r\n    print client.runAction(Echo,\"Echo test!\")\r\n\r\n    print \"############################# Exec test ################################\"\r\n    print client.runAction(Exec,\"dir\")\r\n    print client.runAction(Exec,[\"python\",\"-V\"])\r\n\r\n    print \"############################# Exec history #############################\"\r\n    print client.runAction(ExecHistory)\r\n\r\n    print \"############################# Server time ##############################\"\r\n    print client.runAction(Time)\r\n\r\n    ################################################################################\r\n    ############################ Server shutdown ###################################\r\n    ################################################################################\r\n    server.shutdown()\r\n    server.server_close()\r\n    server_thread.join()\r\n\r\niSocket server guide\r\n--------------------\r\nServer can be imported from isock::\r\n\r\n    from isock import Server\r\n\r\nServer constructor takes two required arguments: ip (string) and port (int)::\r\n\r\n    server = Server(\"localhost\",4440)\r\n\r\nTo add actions to server use addAction method. It takes one required argument: action (Action)::\r\n\r\n    server.addAction(Echo())\r\n\r\nTo start server use serve_forever() blocking method::\r\n\r\n    server.serve_forever()\r\n\r\nTo stop server use shutdown() method::\r\n\r\n    server.shutdown()\r\n\r\niSocket client guide\r\n--------------------\r\nClient can be imported from isock::\r\n\r\n    from isock import Client\r\n\r\nClient constructor takes two required arguments and one optional: server_ip (string), server_port (int), retry (int).\r\nDefault retry argument is set to 3. Which allows 3 retries before ClientException is raised::\r\n\r\n    client = Client(\"localhost\",4440)\r\n\r\nTo run action on server use runAction() method which takes one required argument and one optional: action (Action class ref), data (any pickable data)::\r\n\r\n    client.runAction(Echo,\"Echo test!\")\r\n\r\nClient method runAction() returns data send by server or rasies exception if action ended with exception on server.\r\n\r\niSocket action guide\r\n--------------------\r\nAll actions that server can perform have to inherit from Action class.\r\nAction class can be imported from isock::\r\n\r\n    from isock import Action\r\n\r\nBoth client and server have to have access to user defined action classes. I suggeste to keep them in separated file that can be imported in both server and client.\r\nTo define new action create new class that inherits from Action class and overrides action() method. This method takes one required argument: data (any pickable data send by client).\r\nIf client does not send any data this argument is set to None::\r\n\r\n    class Echo(Action):\r\n        def action(self,data):\r\n            return data\r\n\r\nMethod action() returns data that are send back to client.\r\n\r\nTo access server variable in your action class define constructor that stores reference to server variable as attribute, which you can then access in action method::\r\n\r\n    class ExecHistory(Action):\r\n        def __init__(self,exec_history):\r\n            self.exec_history = exec_history\r\n\r\n        def action(self,data):\r\n            return self.exec_history\r\n\r\nContribution\r\n------------\r\nEveryone is welcome to contribute to this project. Source code is available on GitHub.\r\nhttps://github.com/0x1001/isock", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/isock/", "keywords": "socket, socket server, tcpserver", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "iSock", "package_url": "https://pypi.org/project/iSock/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/iSock/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/isock/"}, "release_url": "https://pypi.org/project/iSock/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Simple client - server library based on TCP SocketServer", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Simple client - server library based on TCP SocketServer</strong></p>\n<p>iSocket is a library that allows very rapid development of client - server applications in Python.\nIf you develop software that runs on several machines which communicate with each other this library might come in handy.</p>\n<p>Main features:</p>\n<ul>\n<li>Very simple server configuration.</li>\n<li>Easy way to transfer back and forth complex data structures (everything that is pickable can be send and receive).</li>\n<li>iSocket structure allows clean design of your application.</li>\n<li>Client can easily access variables on server.</li>\n</ul>\n<p>iSocket is written in Python 2.7 and works on Windows and Linux. Source code can be found here: <a href=\"https://github.com/0x1001/isock\" rel=\"nofollow\">https://github.com/0x1001/isock</a></p>\n<div id=\"isocket-installation\">\n<h2>iSocket installation</h2>\n<p>Download zip from <a href=\"http://pypi.python.org/pypi/isock/\" rel=\"nofollow\">http://pypi.python.org/pypi/isock/</a> web pages. Unzip it and run:</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"isocket-example\">\n<h2>iSocket example</h2>\n<p>Sample code below shows usage example.\nYou can learn here how to start server and client and how to define server actions.</p>\n<p>List of actions used in this example:</p>\n<ul>\n<li>Echo - Sends back all data to client.</li>\n<li>Exec - Executes system call on server and transfers console output to client.</li>\n<li>ExecHistory - Sends system call history to client.</li>\n<li>Time - Sends current server time to client.</li>\n</ul>\n<p>Example:</p>\n<pre>import threading\nfrom isock import Server\nfrom isock import Client\nfrom isock import Action\n\n################################################################################\n############################ Server actions ####################################\n################################################################################\nclass Echo(Action):\n    def action(self,data):\n        return data\n\nclass Exec(Action):\n    def __init__(self,exec_history):\n        self.exec_history = exec_history\n\n    def action(self,data):\n        import subprocess\n        self.exec_history.append(data)\n        return subprocess.check_output(data,shell=True)\n\nclass ExecHistory(Action):\n    def __init__(self,exec_history):\n        self.exec_history = exec_history\n\n    def action(self,data):\n        return self.exec_history\n\nclass Time(Action):\n    def action(self,data):\n        import datetime\n        return datetime.datetime.now()\n\n################################################################################\n############################ Server startup ####################################\n################################################################################\nhistory = []\n\nserver = Server(\"localhost\",4440)\nserver.addAction(Echo())\nserver.addAction(Exec(history))\nserver.addAction(ExecHistory(history))\nserver.addAction(Time())\nserver_thread = threading.Thread(target=server.serve_forever)\nserver_thread.start()\n\n################################################################################\n############################ Client session ####################################\n################################################################################\nclient = Client(\"localhost\",4440)\n\nprint \"############################# Echo test ################################\"\nprint client.runAction(Echo,\"Echo test!\")\n\nprint \"############################# Exec test ################################\"\nprint client.runAction(Exec,\"dir\")\nprint client.runAction(Exec,[\"python\",\"-V\"])\n\nprint \"############################# Exec history #############################\"\nprint client.runAction(ExecHistory)\n\nprint \"############################# Server time ##############################\"\nprint client.runAction(Time)\n\n################################################################################\n############################ Server shutdown ###################################\n################################################################################\nserver.shutdown()\nserver.server_close()\nserver_thread.join()\n</pre>\n</div>\n<div id=\"isocket-server-guide\">\n<h2>iSocket server guide</h2>\n<p>Server can be imported from isock:</p>\n<pre>from isock import Server\n</pre>\n<p>Server constructor takes two required arguments: ip (string) and port (int):</p>\n<pre>server = Server(\"localhost\",4440)\n</pre>\n<p>To add actions to server use addAction method. It takes one required argument: action (Action):</p>\n<pre>server.addAction(Echo())\n</pre>\n<p>To start server use serve_forever() blocking method:</p>\n<pre>server.serve_forever()\n</pre>\n<p>To stop server use shutdown() method:</p>\n<pre>server.shutdown()\n</pre>\n</div>\n<div id=\"isocket-client-guide\">\n<h2>iSocket client guide</h2>\n<p>Client can be imported from isock:</p>\n<pre>from isock import Client\n</pre>\n<p>Client constructor takes two required arguments and one optional: server_ip (string), server_port (int), retry (int).\nDefault retry argument is set to 3. Which allows 3 retries before ClientException is raised:</p>\n<pre>client = Client(\"localhost\",4440)\n</pre>\n<p>To run action on server use runAction() method which takes one required argument and one optional: action (Action class ref), data (any pickable data):</p>\n<pre>client.runAction(Echo,\"Echo test!\")\n</pre>\n<p>Client method runAction() returns data send by server or rasies exception if action ended with exception on server.</p>\n</div>\n<div id=\"isocket-action-guide\">\n<h2>iSocket action guide</h2>\n<p>All actions that server can perform have to inherit from Action class.\nAction class can be imported from isock:</p>\n<pre>from isock import Action\n</pre>\n<p>Both client and server have to have access to user defined action classes. I suggeste to keep them in separated file that can be imported in both server and client.\nTo define new action create new class that inherits from Action class and overrides action() method. This method takes one required argument: data (any pickable data send by client).\nIf client does not send any data this argument is set to None:</p>\n<pre>class Echo(Action):\n    def action(self,data):\n        return data\n</pre>\n<p>Method action() returns data that are send back to client.</p>\n<p>To access server variable in your action class define constructor that stores reference to server variable as attribute, which you can then access in action method:</p>\n<pre>class ExecHistory(Action):\n    def __init__(self,exec_history):\n        self.exec_history = exec_history\n\n    def action(self,data):\n        return self.exec_history\n</pre>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>Everyone is welcome to contribute to this project. Source code is available on GitHub.\n<a href=\"https://github.com/0x1001/isock\" rel=\"nofollow\">https://github.com/0x1001/isock</a></p>\n</div>\n\n          </div>"}, "last_serial": 1029795, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a7903c28ee66a724e62102a8e293cdb1", "sha256": "505090f0e0759efa537cee526c27cca1e9a6b960f220553b5ae1a3b6aec709b8"}, "downloads": -1, "filename": "iSock-1.0.0.zip", "has_sig": false, "md5_digest": "a7903c28ee66a724e62102a8e293cdb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12300, "upload_time": "2014-03-14T16:35:54", "upload_time_iso_8601": "2014-03-14T16:35:54.990261Z", "url": "https://files.pythonhosted.org/packages/d4/e6/472566c545fb32eaa8a76cb6bc1f59fd09d69a635c96b3047914ac6729fd/iSock-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a7903c28ee66a724e62102a8e293cdb1", "sha256": "505090f0e0759efa537cee526c27cca1e9a6b960f220553b5ae1a3b6aec709b8"}, "downloads": -1, "filename": "iSock-1.0.0.zip", "has_sig": false, "md5_digest": "a7903c28ee66a724e62102a8e293cdb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12300, "upload_time": "2014-03-14T16:35:54", "upload_time_iso_8601": "2014-03-14T16:35:54.990261Z", "url": "https://files.pythonhosted.org/packages/d4/e6/472566c545fb32eaa8a76cb6bc1f59fd09d69a635c96b3047914ac6729fd/iSock-1.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:54:00 2020"}