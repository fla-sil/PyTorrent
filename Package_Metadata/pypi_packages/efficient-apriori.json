{"info": {"author": "tommyod", "author_email": "tommy.odland@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Efficient-Apriori [![Build Status](https://travis-ci.com/tommyod/Efficient-Apriori.svg?branch=master)](https://travis-ci.com/tommyod/Efficient-Apriori) [![PyPI version](https://badge.fury.io/py/efficient-apriori.svg)](https://pypi.org/project/efficient-apriori/) [![Documentation Status](https://readthedocs.org/projects/efficient-apriori/badge/?version=latest)](https://efficient-apriori.readthedocs.io/en/latest/?badge=latest) [![Downloads](https://pepy.tech/badge/efficient-apriori)](https://pepy.tech/project/efficient-apriori) [![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nAn efficient pure Python implementation of the Apriori algorithm. Works with Python 3.6+.\n\nThe apriori algorithm uncovers hidden structures in categorical data.\nThe classical example is a database containing purchases from a supermarket.\nEvery purchase has a number of items associated with it.\nWe would like to uncover association rules such as `{bread, eggs} -> {bacon}` from the data.\nThis is the goal of [association rule learning](https://en.wikipedia.org/wiki/Association_rule_learning), and the [Apriori algorithm](https://en.wikipedia.org/wiki/Apriori_algorithm) is arguably the most famous algorithm for this problem.\nThis repository contains an efficient, well-tested implementation of the apriori algorithm as described in the [original paper](https://www.macs.hw.ac.uk/~dwcorne/Teaching/agrawal94fast.pdf) by Agrawal et al, published in 1994.\n\n**The code is stable and in widespread use.** It's cited in the book \"*Mastering Machine Learning Algorithms*\" by Bonaccorso.\n\n\n## Example\n\nHere's a minimal working example.\nNotice that in every transaction with `eggs` present, `bacon` is present too.\nTherefore, the rule `{eggs} -> {bacon}` is returned with 100 % confidence.\n\n```python\nfrom efficient_apriori import apriori\ntransactions = [('eggs', 'bacon', 'soup'),\n                ('eggs', 'bacon', 'apple'),\n                ('soup', 'bacon', 'banana')]\nitemsets, rules = apriori(transactions, min_support=0.5, min_confidence=1)\nprint(rules)  # [{eggs} -> {bacon}, {soup} -> {bacon}]\n```\nIf your data is in a pandas DataFrame, you must [convert it to a list of tuples](https://github.com/tommyod/Efficient-Apriori/issues/12).\n**More examples are included below.**\n\n## Installation\n\nThe software is available through GitHub, and through [PyPI](https://pypi.org/project/efficient-apriori/).\nYou may install the software using `pip`.\n\n```bash\npip install efficient-apriori\n```\n\n## Contributing\n\nYou are very welcome to scrutinize the code and make pull requests if you have suggestions and improvements.\nYour submitted code must be PEP8 compliant, and all tests must pass.\nContributors: [CRJFisher](https://github.com/CRJFisher)\n\n## More examples\n\n### Filtering and sorting association rules\n\nIt's possible to filter and sort the returned list of association rules.\n\n```python\nfrom efficient_apriori import apriori\ntransactions = [('eggs', 'bacon', 'soup'),\n                ('eggs', 'bacon', 'apple'),\n                ('soup', 'bacon', 'banana')]\nitemsets, rules = apriori(transactions, min_support=0.2, min_confidence=1)\n\n# Print out every rule with 2 items on the left hand side,\n# 1 item on the right hand side, sorted by lift\nrules_rhs = filter(lambda rule: len(rule.lhs) == 2 and len(rule.rhs) == 1, rules)\nfor rule in sorted(rules_rhs, key=lambda rule: rule.lift):\n  print(rule)  # Prints the rule and its confidence, support, lift, ...\n```\n\n### Working with large datasets\n\nIf you have **data that is too large to fit in memory**, you may pass a function returning a generator instead of a list.\nThe `min_support` will most likely have to be a large value, or the algorithm will take very long before it terminates.\nIf you have massive amounts of data, this Python implementation is likely not fast enough, and you should consult more specialized implementations.\n\n```python\ndef data_generator(filename):\n  \"\"\"\n  Data generator, needs to return a generator to be called several times.\n  Use this approach if data is too large to fit in memory. If not use a list.\n  \"\"\"\n  def data_gen():\n    with open(filename) as file:\n      for line in file:\n        yield tuple(k.strip() for k in line.split(','))      \n\n  return data_gen\n\ntransactions = data_generator('dataset.csv')\nitemsets, rules = apriori(transactions, min_support=0.9, min_confidence=0.6)\n```\n\n### Transactions with IDs\n\nIf you need to know which transactions occurred in the frequent itemsets, set the `output_transaction_ids` parameter to `True`.\nThis changes the output to contain `ItemsetCount` objects for each itemset.\nThe objects have a `members` property containing is the set of ids of frequent transactions as well as a `count` property. \nThe ids are the enumeration of the transactions in the order they appear.    \n\n```python\nfrom efficient_apriori import apriori\ntransactions = [('eggs', 'bacon', 'soup'),\n                ('eggs', 'bacon', 'apple'),\n                ('soup', 'bacon', 'banana')]\nitemsets, rules = apriori(transactions, output_transaction_ids=True)\nprint(itemsets)\n# {1: {('bacon',): ItemsetCount(itemset_count=3, members={0, 1, 2}), ...\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tommyod/Efficient-Apriori", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "efficient-apriori", "package_url": "https://pypi.org/project/efficient-apriori/", "platform": "", "project_url": "https://pypi.org/project/efficient-apriori/", "project_urls": {"Homepage": "https://github.com/tommyod/Efficient-Apriori"}, "release_url": "https://pypi.org/project/efficient-apriori/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "An efficient Python implementation of the Apriori     algorithm.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Efficient-Apriori <a href=\"https://travis-ci.com/tommyod/Efficient-Apriori\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d89ea594ede506fcae4908092b8f67a8d6b1814e/68747470733a2f2f7472617669732d63692e636f6d2f746f6d6d796f642f456666696369656e742d417072696f72692e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/efficient-apriori/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22de8aea6e09b081a67a1446db732747113e1b5f/68747470733a2f2f62616467652e667572792e696f2f70792f656666696369656e742d617072696f72692e737667\"></a> <a href=\"https://efficient-apriori.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92b5cf79c360662475645dee77cb4d0b7488ebf3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f656666696369656e742d617072696f72692f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://pepy.tech/project/efficient-apriori\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1324d1a79ac70dc586a777d2be150eb8209405a6/68747470733a2f2f706570792e746563682f62616467652f656666696369656e742d617072696f7269\"></a> <a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></h1>\n<p>An efficient pure Python implementation of the Apriori algorithm. Works with Python 3.6+.</p>\n<p>The apriori algorithm uncovers hidden structures in categorical data.\nThe classical example is a database containing purchases from a supermarket.\nEvery purchase has a number of items associated with it.\nWe would like to uncover association rules such as <code>{bread, eggs} -&gt; {bacon}</code> from the data.\nThis is the goal of <a href=\"https://en.wikipedia.org/wiki/Association_rule_learning\" rel=\"nofollow\">association rule learning</a>, and the <a href=\"https://en.wikipedia.org/wiki/Apriori_algorithm\" rel=\"nofollow\">Apriori algorithm</a> is arguably the most famous algorithm for this problem.\nThis repository contains an efficient, well-tested implementation of the apriori algorithm as described in the <a href=\"https://www.macs.hw.ac.uk/%7Edwcorne/Teaching/agrawal94fast.pdf\" rel=\"nofollow\">original paper</a> by Agrawal et al, published in 1994.</p>\n<p><strong>The code is stable and in widespread use.</strong> It's cited in the book \"<em>Mastering Machine Learning Algorithms</em>\" by Bonaccorso.</p>\n<h2>Example</h2>\n<p>Here's a minimal working example.\nNotice that in every transaction with <code>eggs</code> present, <code>bacon</code> is present too.\nTherefore, the rule <code>{eggs} -&gt; {bacon}</code> is returned with 100 % confidence.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">efficient_apriori</span> <span class=\"kn\">import</span> <span class=\"n\">apriori</span>\n<span class=\"n\">transactions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'soup'</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'apple'</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">'soup'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'banana'</span><span class=\"p\">)]</span>\n<span class=\"n\">itemsets</span><span class=\"p\">,</span> <span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">apriori</span><span class=\"p\">(</span><span class=\"n\">transactions</span><span class=\"p\">,</span> <span class=\"n\">min_support</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">min_confidence</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"p\">)</span>  <span class=\"c1\"># [{eggs} -&gt; {bacon}, {soup} -&gt; {bacon}]</span>\n</pre>\n<p>If your data is in a pandas DataFrame, you must <a href=\"https://github.com/tommyod/Efficient-Apriori/issues/12\" rel=\"nofollow\">convert it to a list of tuples</a>.\n<strong>More examples are included below.</strong></p>\n<h2>Installation</h2>\n<p>The software is available through GitHub, and through <a href=\"https://pypi.org/project/efficient-apriori/\" rel=\"nofollow\">PyPI</a>.\nYou may install the software using <code>pip</code>.</p>\n<pre>pip install efficient-apriori\n</pre>\n<h2>Contributing</h2>\n<p>You are very welcome to scrutinize the code and make pull requests if you have suggestions and improvements.\nYour submitted code must be PEP8 compliant, and all tests must pass.\nContributors: <a href=\"https://github.com/CRJFisher\" rel=\"nofollow\">CRJFisher</a></p>\n<h2>More examples</h2>\n<h3>Filtering and sorting association rules</h3>\n<p>It's possible to filter and sort the returned list of association rules.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">efficient_apriori</span> <span class=\"kn\">import</span> <span class=\"n\">apriori</span>\n<span class=\"n\">transactions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'soup'</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'apple'</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">'soup'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'banana'</span><span class=\"p\">)]</span>\n<span class=\"n\">itemsets</span><span class=\"p\">,</span> <span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">apriori</span><span class=\"p\">(</span><span class=\"n\">transactions</span><span class=\"p\">,</span> <span class=\"n\">min_support</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">min_confidence</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print out every rule with 2 items on the left hand side,</span>\n<span class=\"c1\"># 1 item on the right hand side, sorted by lift</span>\n<span class=\"n\">rules_rhs</span> <span class=\"o\">=</span> <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rules</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">rule</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">rules_rhs</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">lift</span><span class=\"p\">):</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"p\">)</span>  <span class=\"c1\"># Prints the rule and its confidence, support, lift, ...</span>\n</pre>\n<h3>Working with large datasets</h3>\n<p>If you have <strong>data that is too large to fit in memory</strong>, you may pass a function returning a generator instead of a list.\nThe <code>min_support</code> will most likely have to be a large value, or the algorithm will take very long before it terminates.\nIf you have massive amounts of data, this Python implementation is likely not fast enough, and you should consult more specialized implementations.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">data_generator</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n  <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">  Data generator, needs to return a generator to be called several times.</span>\n<span class=\"sd\">  Use this approach if data is too large to fit in memory. If not use a list.</span>\n<span class=\"sd\">  \"\"\"</span>\n  <span class=\"k\">def</span> <span class=\"nf\">data_gen</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n      <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">))</span>      \n\n  <span class=\"k\">return</span> <span class=\"n\">data_gen</span>\n\n<span class=\"n\">transactions</span> <span class=\"o\">=</span> <span class=\"n\">data_generator</span><span class=\"p\">(</span><span class=\"s1\">'dataset.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">itemsets</span><span class=\"p\">,</span> <span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">apriori</span><span class=\"p\">(</span><span class=\"n\">transactions</span><span class=\"p\">,</span> <span class=\"n\">min_support</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">min_confidence</span><span class=\"o\">=</span><span class=\"mf\">0.6</span><span class=\"p\">)</span>\n</pre>\n<h3>Transactions with IDs</h3>\n<p>If you need to know which transactions occurred in the frequent itemsets, set the <code>output_transaction_ids</code> parameter to <code>True</code>.\nThis changes the output to contain <code>ItemsetCount</code> objects for each itemset.\nThe objects have a <code>members</code> property containing is the set of ids of frequent transactions as well as a <code>count</code> property.\nThe ids are the enumeration of the transactions in the order they appear.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">efficient_apriori</span> <span class=\"kn\">import</span> <span class=\"n\">apriori</span>\n<span class=\"n\">transactions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'soup'</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'apple'</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s1\">'soup'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"s1\">'banana'</span><span class=\"p\">)]</span>\n<span class=\"n\">itemsets</span><span class=\"p\">,</span> <span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">apriori</span><span class=\"p\">(</span><span class=\"n\">transactions</span><span class=\"p\">,</span> <span class=\"n\">output_transaction_ids</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">itemsets</span><span class=\"p\">)</span>\n<span class=\"c1\"># {1: {('bacon',): ItemsetCount(itemset_count=3, members={0, 1, 2}), ...</span>\n</pre>\n\n          </div>"}, "last_serial": 6842142, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "efb03e03d52965b4d7ad30c09e90fe38", "sha256": "31bf15995852f59a43156bfb0e344d51f8dd3a811171e7a97474d1c9244ab97e"}, "downloads": -1, "filename": "efficient_apriori-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "efb03e03d52965b4d7ad30c09e90fe38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12314, "upload_time": "2018-06-18T16:16:13", "upload_time_iso_8601": "2018-06-18T16:16:13.172687Z", "url": "https://files.pythonhosted.org/packages/65/e2/f4f424e3ce73ff1e7bf77dd1f85d89cb0b19b3589461bbeceb6b8bdb4d28/efficient_apriori-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a2281b8c680fa0e133e4c9960a220f1", "sha256": "353e09bf44e09c382446cf19dbba73ed688c2e416e4355ed5c9eba11d9f34f3e"}, "downloads": -1, "filename": "efficient_apriori-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2a2281b8c680fa0e133e4c9960a220f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12314, "upload_time": "2018-06-18T16:03:34", "upload_time_iso_8601": "2018-06-18T16:03:34.041757Z", "url": "https://files.pythonhosted.org/packages/be/6f/75acab60a102de6bb3b9c0d27ef823fcaee90b88b3698288181f390b5217/efficient_apriori-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b51256a5deb7cddf4ccea6432e6afc79", "sha256": "8dcd7f73ed1e8a9220d3a3443e476af487139b1e8c913342bef2559731fc2aa6"}, "downloads": -1, "filename": "efficient_apriori-0.4.tar.gz", "has_sig": false, "md5_digest": "b51256a5deb7cddf4ccea6432e6afc79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11637, "upload_time": "2018-06-18T16:03:36", "upload_time_iso_8601": "2018-06-18T16:03:36.064228Z", "url": "https://files.pythonhosted.org/packages/7a/dc/f826e5224484df8924e21d5933e6f33e6e74fe16ad13f39a44033791b76f/efficient_apriori-0.4.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "fc92bde624c6ce5cc96a7027229e2032", "sha256": "2ce44535ff1dc9cea021b34b84ab5da256487951917c4a6683f85a13d127fd9a"}, "downloads": -1, "filename": "efficient_apriori-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fc92bde624c6ce5cc96a7027229e2032", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12332, "upload_time": "2018-06-18T16:22:34", "upload_time_iso_8601": "2018-06-18T16:22:34.422785Z", "url": "https://files.pythonhosted.org/packages/9c/27/42deae293343e559f78168c919dd951b8287d4f7747d98e85edde4ed593d/efficient_apriori-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90fab1d736d752b8f67c465d11d34a4b", "sha256": "b11c9de2132abf20d21732bb67a7783f9c13541a28704eb25699d98c5faf6672"}, "downloads": -1, "filename": "efficient_apriori-0.4.2.tar.gz", "has_sig": false, "md5_digest": "90fab1d736d752b8f67c465d11d34a4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11637, "upload_time": "2018-06-18T16:22:35", "upload_time_iso_8601": "2018-06-18T16:22:35.679067Z", "url": "https://files.pythonhosted.org/packages/c3/81/3c4de681e682d923205e8170622b1847640d3cf0dfd01db9d42b9b0fd535/efficient_apriori-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "d7eb0d901d5961025e282482cb4aa834", "sha256": "2ef9d7ab32b136cb1c49a1b388a7d8237a135a1d460229efaaad04923366daf0"}, "downloads": -1, "filename": "efficient_apriori-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d7eb0d901d5961025e282482cb4aa834", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12426, "upload_time": "2018-06-20T17:37:32", "upload_time_iso_8601": "2018-06-20T17:37:32.746423Z", "url": "https://files.pythonhosted.org/packages/0d/1a/e305972fd3edd80a7ae534c35d89f5ed437665fc1db0627f590a48ea16e8/efficient_apriori-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7beefcc0491f2756b7c3d5c72a90a4bc", "sha256": "1a281ff8ed7ea291454c2d62c9967df9ba5db028b66fa2020e6dd0b2a3b62872"}, "downloads": -1, "filename": "efficient_apriori-0.4.3.tar.gz", "has_sig": false, "md5_digest": "7beefcc0491f2756b7c3d5c72a90a4bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11695, "upload_time": "2018-06-20T17:37:34", "upload_time_iso_8601": "2018-06-20T17:37:34.061069Z", "url": "https://files.pythonhosted.org/packages/08/a0/7ae6f52006272ac334e7a4411639915862496cc62dc4ee1254f57283b60f/efficient_apriori-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "56a7483c54d290e8bd825c240f6a0217", "sha256": "ee8ba0692c312d33cf3b2c9a62ae3f0f985b0c27ac0bf2fac218330e91755e5b"}, "downloads": -1, "filename": "efficient_apriori-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "56a7483c54d290e8bd825c240f6a0217", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12481, "upload_time": "2018-06-20T18:27:33", "upload_time_iso_8601": "2018-06-20T18:27:33.861388Z", "url": "https://files.pythonhosted.org/packages/fc/64/2768b3c9550dbcd504c03161ca77b71301c51b436e27f9a1bd9599303ba9/efficient_apriori-0.4.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75d9a4737ed4dcd493032f5754c125ee", "sha256": "08197a94772e691c2effe9e84d7af3c625b1eb4221e8ab2fcddbfccf18e7cf2e"}, "downloads": -1, "filename": "efficient_apriori-0.4.4.tar.gz", "has_sig": false, "md5_digest": "75d9a4737ed4dcd493032f5754c125ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11758, "upload_time": "2018-06-20T18:27:35", "upload_time_iso_8601": "2018-06-20T18:27:35.271454Z", "url": "https://files.pythonhosted.org/packages/f0/3e/3687858b2fe45aa090b5ec4e095556303f4fab4dfe263b690a094ec513ef/efficient_apriori-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "b4c257bcb8463aa356e7ae96637318a9", "sha256": "b3c5b77d16a58c5d4fb8b2c8721b5c7a3067894304b27a38a6f442caa19e5841"}, "downloads": -1, "filename": "efficient_apriori-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b4c257bcb8463aa356e7ae96637318a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13459, "upload_time": "2018-11-04T16:35:43", "upload_time_iso_8601": "2018-11-04T16:35:43.547193Z", "url": "https://files.pythonhosted.org/packages/13/ab/a8def875902610558395242a147b8490372f031561902c534ebbf5db14ca/efficient_apriori-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f0eb6bbb2b02786a3fec303dd97a0c7", "sha256": "142f7f824d564d40799798461f552ab87f957c7b70be2b225fc0b001b89c3ca8"}, "downloads": -1, "filename": "efficient_apriori-0.4.5.tar.gz", "has_sig": false, "md5_digest": "6f0eb6bbb2b02786a3fec303dd97a0c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11914, "upload_time": "2018-11-04T16:35:45", "upload_time_iso_8601": "2018-11-04T16:35:45.163855Z", "url": "https://files.pythonhosted.org/packages/d2/7b/71c12582b2e1b561e76cf52239bcece4ced6aac9c93974b7fdede5f407e7/efficient_apriori-0.4.5.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "ada9cf17326e6fdd0e6104b0e019c0cc", "sha256": "bc987a3fc08fd6eb749504aa2f5bffb2266a9e76b53f9a821d2bf5b4978f65e2"}, "downloads": -1, "filename": "efficient_apriori-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ada9cf17326e6fdd0e6104b0e019c0cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13640, "upload_time": "2019-05-20T13:40:46", "upload_time_iso_8601": "2019-05-20T13:40:46.152352Z", "url": "https://files.pythonhosted.org/packages/5b/cb/cd06eb983e4a67d9b127df6e3ece87dd7ebea145daa4250929531315bbff/efficient_apriori-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4acb4c89bb15213740d7b4398b73d3b9", "sha256": "d25de60bd7c2540515da83838ec9446e97d88bb8e6d78ade9baa7db7e99b8d64"}, "downloads": -1, "filename": "efficient_apriori-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4acb4c89bb15213740d7b4398b73d3b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13712, "upload_time": "2019-05-20T13:40:47", "upload_time_iso_8601": "2019-05-20T13:40:47.499549Z", "url": "https://files.pythonhosted.org/packages/a1/fe/938543de87aca9ac8f681a4fc940e604d1010cf7936f6014bdca1924a166/efficient_apriori-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "542a65001112061955b48ad8b92ed548", "sha256": "6b2ddc7f043025725ab6c9e3465b4a477a643b80ecb872691eb9ab4540bd54dd"}, "downloads": -1, "filename": "efficient_apriori-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "542a65001112061955b48ad8b92ed548", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14716, "upload_time": "2019-12-28T11:31:49", "upload_time_iso_8601": "2019-12-28T11:31:49.308942Z", "url": "https://files.pythonhosted.org/packages/4a/cc/518408ec9bb0aeab264b83f179980d590bca4c925210b397715aa1b66632/efficient_apriori-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d52d861c559635c9cba6133408f62e58", "sha256": "90662024b255a65b7eadde874dc41f4c5f132086b8f947c91fd51d69de076a3b"}, "downloads": -1, "filename": "efficient_apriori-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d52d861c559635c9cba6133408f62e58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14840, "upload_time": "2019-12-28T11:31:50", "upload_time_iso_8601": "2019-12-28T11:31:50.559866Z", "url": "https://files.pythonhosted.org/packages/2a/e1/fbbd55bdb72ae75a26f3e4a989b55aaf19118449ec018c766a757e12c6b3/efficient_apriori-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "8a202db6a8a3b92a1953aa2f7555b5cd", "sha256": "04bf6cd528199c491a9cad2cdd09589472dcbdd959ee8e58e12b1073c62b6c4a"}, "downloads": -1, "filename": "efficient_apriori-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8a202db6a8a3b92a1953aa2f7555b5cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14896, "upload_time": "2020-03-19T09:31:58", "upload_time_iso_8601": "2020-03-19T09:31:58.953735Z", "url": "https://files.pythonhosted.org/packages/5a/c6/ecdf3a32d23cada466634c649cf4f50fefe76f56eae53ecceff688b306be/efficient_apriori-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7873e009ca43168f5acc643101d5c554", "sha256": "adb88fc3f73bd07345c88240f76fb6f757786f30a9df35e500f50ff421057504"}, "downloads": -1, "filename": "efficient_apriori-1.1.1.tar.gz", "has_sig": false, "md5_digest": "7873e009ca43168f5acc643101d5c554", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15178, "upload_time": "2020-03-19T09:32:00", "upload_time_iso_8601": "2020-03-19T09:32:00.485772Z", "url": "https://files.pythonhosted.org/packages/79/27/ebc857cde34e4ea939fabc57a87e8c06eb792e284abde6e8479b10f14be0/efficient_apriori-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a202db6a8a3b92a1953aa2f7555b5cd", "sha256": "04bf6cd528199c491a9cad2cdd09589472dcbdd959ee8e58e12b1073c62b6c4a"}, "downloads": -1, "filename": "efficient_apriori-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8a202db6a8a3b92a1953aa2f7555b5cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14896, "upload_time": "2020-03-19T09:31:58", "upload_time_iso_8601": "2020-03-19T09:31:58.953735Z", "url": "https://files.pythonhosted.org/packages/5a/c6/ecdf3a32d23cada466634c649cf4f50fefe76f56eae53ecceff688b306be/efficient_apriori-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7873e009ca43168f5acc643101d5c554", "sha256": "adb88fc3f73bd07345c88240f76fb6f757786f30a9df35e500f50ff421057504"}, "downloads": -1, "filename": "efficient_apriori-1.1.1.tar.gz", "has_sig": false, "md5_digest": "7873e009ca43168f5acc643101d5c554", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15178, "upload_time": "2020-03-19T09:32:00", "upload_time_iso_8601": "2020-03-19T09:32:00.485772Z", "url": "https://files.pythonhosted.org/packages/79/27/ebc857cde34e4ea939fabc57a87e8c06eb792e284abde6e8479b10f14be0/efficient_apriori-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:21 2020"}