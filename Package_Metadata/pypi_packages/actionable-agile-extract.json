{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "JIRA Cycle Data extract utility\n===============================\n\nThis utility helps extract data from JIRA for processing with the\nActionableAgile\u2122 Analytics tool (https://www.actionableagile.com/analytics-tools/),\nas well as ad-hoc analysis using Excel.\n\nIt will produce a CSV file with one row for each JIRA issue matching a set of\nfilter criteria, containing basic information about the issue as well as the\ndate the issue entered each step in the main cycle workflow.\n\nThis data can be used to produce a Cumulative Flow Diagram, a cycle time\nscatterplot, a cycle time histogram, and other analytics based on cycle time.\n\nInstallation\n------------\n\nInstall Python 2.7 and pip. See http://pip.readthedocs.org/en/stable/installing/.\n\nInstall using `pip`::\n\n    $ pip install actionable-agile-extract\n\nIf you get errors, try to install `numpy` and `pandas` separately first::\n\n    $ pip install numpy pandas\n    $ pip install actionable-agile-extract\n\nConfiguration\n-------------\n\nWrite a YAML configuration file like so, calling it e.g. `config.yaml`::\n\n    # How to connect to JIRA?\n    Connection:\n        Domain: https://myserver.atlassian.net\n        Username: myusername # If missing, you will be prompted at runtime\n        Password: secret     # If missing, you will be prompted at runtime\n\n    # What to search for?\n    Criteria:\n        Project: ABC # JIRA project key to search\n        Issue types: #\u00a0Which issue types to include\n            - Story\n            - Defect\n        Valid resolutions: # Which resolution statuses to include (unresolved is always included)\n            - Done\n            - Closed\n        JQL: labels != \"Spike\" # Additional filter as raw JQL, optional\n\n    #\u00a0Describe the workflow. Each step can be mapped to either a single JIRA\n    # status, or a list of statuses that will be treated as equivalent\n    Workflow:\n        Open: Open\n        Analysis IP: Analysis in Progress\n        Analysis Done: Analysis Done\n        Development IP: Development in Progress\n        Development Done: Development Done\n        Test IP: Test in Progress\n        Test Done: Test Done\n        Done:\n            - Closed\n            - Done\n\n    #\u00a0Map field names to additional attributes to extract\n    Attributes:\n        Components: Component/s\n        Priority: Priority\n        Release: Fix version/s\n\nThe sections for `Connection`, `Criteria` and `Workflow` are required.\n\nUnder `Conection`, only `Domain` is required. If not specified, the script will\nprompt for both or either of username and password when run.\n\nUnder `Criteria`, all fields are technically optional, but you should specify\nat least some of them to avoid an unbounded query.\n\nUnder `Workflow`, at least two steps are required. Specify the steps in order.\nYou may either specify a single workflow value or a list (as shown for `Done`\nabove), in which case multiple JIRA statuses will be collapsed into a single\nstate for analytics purposes.\n\nThe file, and values for things like workflow statuses and attributes, are case\ninsensitive.\n\nWhen specifying attributes, use the *name* of the field (as rendered on screen\nin JIRA), not its id (as you might do in JQL), so e.g. use `Component/s` not\n`components`.\n\nThe attributes `Type` (issue type), `Status` and `Resolution` are always\nincluded.\n\nWhen specifying fields like `Component/s` or `Fix version/s` that may have\nlists of values, only the first value set will be used.\n\nRunning\n-------\n\nRun the binary with::\n\n    $ jira-cycle-extract config.yaml data.csv\n\nThis will extract a CSV file called `data.csv` with cycle data based on the\nconfiguration in `config.yaml`.\n\nUse the `-v` option to print more information during the extract process.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/optilude/jira-cycle-extract", "keywords": "agile jira analytics", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "actionable-agile-extract", "package_url": "https://pypi.org/project/actionable-agile-extract/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/actionable-agile-extract/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/optilude/jira-cycle-extract"}, "release_url": "https://pypi.org/project/actionable-agile-extract/0.1/", "requires_dist": null, "requires_python": null, "summary": "Extract cycle time analytics data from JIRA", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This utility helps extract data from JIRA for processing with the\nActionableAgile\u2122 Analytics tool (<a href=\"https://www.actionableagile.com/analytics-tools/\" rel=\"nofollow\">https://www.actionableagile.com/analytics-tools/</a>),\nas well as ad-hoc analysis using Excel.</p>\n<p>It will produce a CSV file with one row for each JIRA issue matching a set of\nfilter criteria, containing basic information about the issue as well as the\ndate the issue entered each step in the main cycle workflow.</p>\n<p>This data can be used to produce a Cumulative Flow Diagram, a cycle time\nscatterplot, a cycle time histogram, and other analytics based on cycle time.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install Python 2.7 and pip. See <a href=\"http://pip.readthedocs.org/en/stable/installing/\" rel=\"nofollow\">http://pip.readthedocs.org/en/stable/installing/</a>.</p>\n<p>Install using <cite>pip</cite>:</p>\n<pre>$ pip install actionable-agile-extract\n</pre>\n<p>If you get errors, try to install <cite>numpy</cite> and <cite>pandas</cite> separately first:</p>\n<pre>$ pip install numpy pandas\n$ pip install actionable-agile-extract\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Write a YAML configuration file like so, calling it e.g. <cite>config.yaml</cite>:</p>\n<pre># How to connect to JIRA?\nConnection:\n    Domain: https://myserver.atlassian.net\n    Username: myusername # If missing, you will be prompted at runtime\n    Password: secret     # If missing, you will be prompted at runtime\n\n# What to search for?\nCriteria:\n    Project: ABC # JIRA project key to search\n    Issue types: #\u00a0Which issue types to include\n        - Story\n        - Defect\n    Valid resolutions: # Which resolution statuses to include (unresolved is always included)\n        - Done\n        - Closed\n    JQL: labels != \"Spike\" # Additional filter as raw JQL, optional\n\n#\u00a0Describe the workflow. Each step can be mapped to either a single JIRA\n# status, or a list of statuses that will be treated as equivalent\nWorkflow:\n    Open: Open\n    Analysis IP: Analysis in Progress\n    Analysis Done: Analysis Done\n    Development IP: Development in Progress\n    Development Done: Development Done\n    Test IP: Test in Progress\n    Test Done: Test Done\n    Done:\n        - Closed\n        - Done\n\n#\u00a0Map field names to additional attributes to extract\nAttributes:\n    Components: Component/s\n    Priority: Priority\n    Release: Fix version/s\n</pre>\n<p>The sections for <cite>Connection</cite>, <cite>Criteria</cite> and <cite>Workflow</cite> are required.</p>\n<p>Under <cite>Conection</cite>, only <cite>Domain</cite> is required. If not specified, the script will\nprompt for both or either of username and password when run.</p>\n<p>Under <cite>Criteria</cite>, all fields are technically optional, but you should specify\nat least some of them to avoid an unbounded query.</p>\n<p>Under <cite>Workflow</cite>, at least two steps are required. Specify the steps in order.\nYou may either specify a single workflow value or a list (as shown for <cite>Done</cite>\nabove), in which case multiple JIRA statuses will be collapsed into a single\nstate for analytics purposes.</p>\n<p>The file, and values for things like workflow statuses and attributes, are case\ninsensitive.</p>\n<p>When specifying attributes, use the <em>name</em> of the field (as rendered on screen\nin JIRA), not its id (as you might do in JQL), so e.g. use <cite>Component/s</cite> not\n<cite>components</cite>.</p>\n<p>The attributes <cite>Type</cite> (issue type), <cite>Status</cite> and <cite>Resolution</cite> are always\nincluded.</p>\n<p>When specifying fields like <cite>Component/s</cite> or <cite>Fix version/s</cite> that may have\nlists of values, only the first value set will be used.</p>\n</div>\n<div id=\"running\">\n<h2>Running</h2>\n<p>Run the binary with:</p>\n<pre>$ jira-cycle-extract config.yaml data.csv\n</pre>\n<p>This will extract a CSV file called <cite>data.csv</cite> with cycle data based on the\nconfiguration in <cite>config.yaml</cite>.</p>\n<p>Use the <cite>-v</cite> option to print more information during the extract process.</p>\n</div>\n\n          </div>"}, "last_serial": 1761664, "releases": {"0.1": []}, "urls": [], "timestamp": "Thu May  7 16:24:21 2020"}