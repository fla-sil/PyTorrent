{"info": {"author": "Sasha Matijasic", "author_email": "sasha@selectnull.com", "bugtrack_url": null, "classifiers": [], "description": "==================================\nave - Activate Virtual Environment\n==================================\n\nave is small bash function to help out with activation of virtual\nenvironments; the name stands for Activate Virtual Environment\n(which is almost all it does).\n\n\nHow to use it?\n==============\n\nave was created out of my personal needs of organizing projects and\nneed to type less. There are two ways in which ave can be used.\nIf you type ``ave`` with no arguments, it will start from current\ndirectory and search for virtual environment by ``cd`` ing upwards\nthru parent directories or by looking inside ``~/$WORKON_HOME``.\nWhen virtual environment is found, it is activated (sourced).\nCalled with an argument, it will do the same and optionally\n``cd`` to project directory if it's held under source controled.\n\nThe above is all ``ave`` does, but it's easier to understand with\nfollowing example. Let's assume we have this directory structure::\n\n    # this is where we store our projects\n    ~/projects/\n        common-env/\n            project_1/\n            project_2/\n            project_3/\n        project_a/\n        project_b/\n        project_c/\n\n    # this is where we store virtual environments\n    ~/$WORKON_HOME/\n        common-env/\n        project_a/\n        project_b/\n        project_c/\n\n    # temp directory to work with throwaway stuff\n    ~/tmp/\n\nMultiple projects based on common virtual environment\n-----------------------------------------------------\n\nThese are projects that are all based on the same virtual environment,\n``common-env`` in the example::\n\n    ave ~/projects/common-env/project_1\n\nor::\n\n    cd ~/projects/common-env/project_1\n    ave\n\nAfter any of those commands, ``common-env`` is activated and current\ndirectory is changed to ``project_1``.\n\nOne project per virtual environment\n-----------------------------------\n\nEach project has its own virtual environment::\n\n    ave ~/projects/project_a\n\nor::\n\n    cd ~/projects/project_a\n    ave\n\nWith bash (or any other shell) and tab completion, very few keystrokes\nare needed.\n\nPlayground and throwaway environmets\n------------------------------------\n\nThere is often a need to test new libraries. You want to quickly make an\nenvironment, type out some code (directly in python shell or by creating\na file), play with it and delete it.::\n\n    virtualenv ~/tmp/foo-playground\n    cd ~/tmp/foo-playground\n    ave\n\n    pip install foo\n    python\n    # import foo and play with it\n\n    # enough play, go to work\n    rm -rf ~/foo-playground\n\nThis way you are not cluttering ``WORKON_HOME`` directory even if you don't\ndelete temporary environmets right away after use (which I usually don't).\n\n\nHow to install it?\n==================\n\nVia pip\n-------\n\nInstall for user::\n\n    pip install ave --user\n\nor if you want to install globally::\n\n    sudo pip install ave\n\nManually\n--------\n\nClone the repository and source ave.sh script from your .bashrc or .profile.\n\nConfigure it\n------------\n\n::\n\n    # define directory to put virtual environments\n    export WORKON_HOME=~/.venvs\n\n    # source ave function\n    source /path/to/ave.sh\n\n\nWhat about virtualenvwrapper?\n=============================\n\nBy all means, virtualenvwrapper is mature and well tested software.\nIt works great and is recommended by many pythonistas. It does so much\nmore than ave and if you need its functionality, you should check it out.\n\nave uses the same ``WORKON_HOME`` evnironment variable so it's compatible\nwith virtualenvwrapper, both can be used at the same time.\n\nave is simple to the point that this documentation is longer than the\ncomplete ave code. I like simple.\n\n\nLicence\n=======\n\nave is MIT licensed.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/selectnull/ave", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "ave", "package_url": "https://pypi.org/project/ave/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ave/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/selectnull/ave"}, "release_url": "https://pypi.org/project/ave/0.8.0/", "requires_dist": null, "requires_python": null, "summary": "ave Activates Virtual Environment", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>ave is small bash function to help out with activation of virtual\nenvironments; the name stands for Activate Virtual Environment\n(which is almost all it does).</p>\n<div id=\"how-to-use-it\">\n<h2>How to use it?</h2>\n<p>ave was created out of my personal needs of organizing projects and\nneed to type less. There are two ways in which ave can be used.\nIf you type <tt>ave</tt> with no arguments, it will start from current\ndirectory and search for virtual environment by <tt>cd</tt> ing upwards\nthru parent directories or by looking inside <tt><span class=\"pre\">~/$WORKON_HOME</span></tt>.\nWhen virtual environment is found, it is activated (sourced).\nCalled with an argument, it will do the same and optionally\n<tt>cd</tt> to project directory if it\u2019s held under source controled.</p>\n<p>The above is all <tt>ave</tt> does, but it\u2019s easier to understand with\nfollowing example. Let\u2019s assume we have this directory structure:</p>\n<pre># this is where we store our projects\n~/projects/\n    common-env/\n        project_1/\n        project_2/\n        project_3/\n    project_a/\n    project_b/\n    project_c/\n\n# this is where we store virtual environments\n~/$WORKON_HOME/\n    common-env/\n    project_a/\n    project_b/\n    project_c/\n\n# temp directory to work with throwaway stuff\n~/tmp/\n</pre>\n<div id=\"multiple-projects-based-on-common-virtual-environment\">\n<h3>Multiple projects based on common virtual environment</h3>\n<p>These are projects that are all based on the same virtual environment,\n<tt><span class=\"pre\">common-env</span></tt> in the example:</p>\n<pre>ave ~/projects/common-env/project_1\n</pre>\n<p>or:</p>\n<pre>cd ~/projects/common-env/project_1\nave\n</pre>\n<p>After any of those commands, <tt><span class=\"pre\">common-env</span></tt> is activated and current\ndirectory is changed to <tt>project_1</tt>.</p>\n</div>\n<div id=\"one-project-per-virtual-environment\">\n<h3>One project per virtual environment</h3>\n<p>Each project has its own virtual environment:</p>\n<pre>ave ~/projects/project_a\n</pre>\n<p>or:</p>\n<pre>cd ~/projects/project_a\nave\n</pre>\n<p>With bash (or any other shell) and tab completion, very few keystrokes\nare needed.</p>\n</div>\n<div id=\"playground-and-throwaway-environmets\">\n<h3>Playground and throwaway environmets</h3>\n<p>There is often a need to test new libraries. You want to quickly make an\nenvironment, type out some code (directly in python shell or by creating\na file), play with it and delete it.:</p>\n<pre>virtualenv ~/tmp/foo-playground\ncd ~/tmp/foo-playground\nave\n\npip install foo\npython\n# import foo and play with it\n\n# enough play, go to work\nrm -rf ~/foo-playground\n</pre>\n<p>This way you are not cluttering <tt>WORKON_HOME</tt> directory even if you don\u2019t\ndelete temporary environmets right away after use (which I usually don\u2019t).</p>\n</div>\n</div>\n<div id=\"how-to-install-it\">\n<h2>How to install it?</h2>\n<div id=\"via-pip\">\n<h3>Via pip</h3>\n<p>Install for user:</p>\n<pre>pip install ave --user\n</pre>\n<p>or if you want to install globally:</p>\n<pre>sudo pip install ave\n</pre>\n</div>\n<div id=\"manually\">\n<h3>Manually</h3>\n<p>Clone the repository and source ave.sh script from your .bashrc or .profile.</p>\n</div>\n<div id=\"configure-it\">\n<h3>Configure it</h3>\n<pre># define directory to put virtual environments\nexport WORKON_HOME=~/.venvs\n\n# source ave function\nsource /path/to/ave.sh\n</pre>\n</div>\n</div>\n<div id=\"what-about-virtualenvwrapper\">\n<h2>What about virtualenvwrapper?</h2>\n<p>By all means, virtualenvwrapper is mature and well tested software.\nIt works great and is recommended by many pythonistas. It does so much\nmore than ave and if you need its functionality, you should check it out.</p>\n<p>ave uses the same <tt>WORKON_HOME</tt> evnironment variable so it\u2019s compatible\nwith virtualenvwrapper, both can be used at the same time.</p>\n<p>ave is simple to the point that this documentation is longer than the\ncomplete ave code. I like simple.</p>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>ave is MIT licensed.</p>\n</div>\n\n          </div>"}, "last_serial": 1015422, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "c088087b2eecc181986f6dbca0377e12", "sha256": "c921dcca7f601261da4a71c701db4a0e1a3e352ff974dd9579f48d80331caa24"}, "downloads": -1, "filename": "ave-0.8.0.tar.gz", "has_sig": false, "md5_digest": "c088087b2eecc181986f6dbca0377e12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2746, "upload_time": "2014-02-28T23:12:16", "upload_time_iso_8601": "2014-02-28T23:12:16.680723Z", "url": "https://files.pythonhosted.org/packages/1b/56/1b3b4191bd4ad85fa3d972729b7100781779f06e331bca17a0cca6064341/ave-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c088087b2eecc181986f6dbca0377e12", "sha256": "c921dcca7f601261da4a71c701db4a0e1a3e352ff974dd9579f48d80331caa24"}, "downloads": -1, "filename": "ave-0.8.0.tar.gz", "has_sig": false, "md5_digest": "c088087b2eecc181986f6dbca0377e12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2746, "upload_time": "2014-02-28T23:12:16", "upload_time_iso_8601": "2014-02-28T23:12:16.680723Z", "url": "https://files.pythonhosted.org/packages/1b/56/1b3b4191bd4ad85fa3d972729b7100781779f06e331bca17a0cca6064341/ave-0.8.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:05 2020"}