{"info": {"author": "KPN DE Platform", "author_email": "de-platform@kpn.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Time Execution\n==============\n\n.. image:: https://secure.travis-ci.org/kpn-digital/py-timeexecution.svg?branch=master\n    :target:  http://travis-ci.org/kpn-digital/py-timeexecution?branch=master\n\n.. image:: https://img.shields.io/codecov/c/github/kpn-digital/py-timeexecution/master.svg\n    :target: http://codecov.io/github/kpn-digital/py-timeexecution?branch=master\n\n.. image:: https://img.shields.io/pypi/v/timeexecution.svg\n    :target: https://pypi.org/project/timeexecution\n\n.. image:: https://img.shields.io/pypi/pyversions/timeexecution.svg\n    :target: https://pypi.org/project/timeexecution\n\n.. image:: https://readthedocs.org/projects/py-timeexecution/badge/?version=latest\n    :target: http://py-timeexecution.readthedocs.org/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/pypi/l/timeexecution.svg\n    :target: https://pypi.org/project/timeexecution\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n\nThis package is designed to record application metrics into specific backends.\nWith the help of Grafana_ or Kibana_ you can easily use these metrics to create meaningful monitoring dashboards.\n\n\nFeatures\n--------\n\n- Sending data to multiple backends (e.g. ElasticSearch)\n- Custom backends\n- Hooks to include additional data per metric.\n\nAvailable backends\n------------------\n\n- InfluxDB 0.8\n- Elasticsearch >=5,<7\n- Kafka\n\n\nInstallation\n------------\n\nIf you want to use it with the ``ElasticSearchBackend``:\n\n.. code-block:: bash\n\n    $ pip install timeexecution[elasticsearch]\n\nwith ``InfluxBackend``:\n\n.. code-block:: bash\n\n    $ pip install timeexecution[influxdb]\n\nwith ``KafkaBackend``:\n\n.. code-block:: bash\n\n    $ pip install timeexecution[kafka]\n\nor if you prefer to have all backends available and easily switch between them:\n\n.. code-block:: bash\n\n    $ pip install timeexecution[all]\n\n\nUsage\n-----\n\nTo use this package you decorate the functions you want to time its execution.\nEvery wrapped function will create a metric consisting of 3 default values:\n\n- ``name`` - The name of the series the metric will be stored in. Byt default, timeexecution will use the fully qualified name of the decorated method or function (e.g. ).\n- ``value`` - The time it took in ms for the wrapped function to complete\n- ``hostname`` - The hostname of the machine the code is running on\n\nSee the following example\n\n.. code-block:: python\n\n    from time_execution import settings, time_execution\n    from time_execution.backends.influxdb import InfluxBackend\n    from time_execution.backends.elasticsearch import ElasticsearchBackend\n\n    # Setup the desired backend\n    influx = InfluxBackend(host='influx', database='metrics', use_udp=False)\n    elasticsearch = ElasticsearchBackend('elasticsearch', index='metrics')\n\n    # Configure the time_execution decorator\n    settings.configure(backends=[influx, elasticsearch])\n\n    # Wrap the methods where u want the metrics\n    @time_execution\n    def hello():\n        return 'World'\n\n    # Now when we call hello() and we will get metrics in our backends\n    hello()\n\nThis will result in an entry in the influxdb\n\n.. code-block:: json\n\n    [\n        {\n            \"name\": \"__main__.hello\",\n            \"columns\": [\n                \"time\",\n                \"sequence_number\",\n                \"value\",\n                \"hostname\",\n            ],\n            \"points\": [\n                [\n                    1449739813939,\n                    1111950001,\n                    312,\n                    \"machine.name\",\n                ]\n            ]\n        }\n    ]\n\nAnd the following in Elasticsearch\n\n.. code-block:: json\n\n    [\n        {\n            \"_index\": \"metrics-2016.01.28\",\n            \"_type\": \"metric\",\n            \"_id\": \"AVKIp9DpnPWamvqEzFB3\",\n            \"_score\": null,\n            \"_source\": {\n                \"timestamp\": \"2016-01-28T14:34:05.416968\",\n                \"hostname\": \"dfaa4928109f\",\n                \"name\": \"__main__.hello\",\n                \"value\": 312\n            },\n            \"sort\": [\n                1453991645416\n            ]\n        }\n    ]\n\nIt's also possible to run backend in different thread with logic behind it, to send metrics in bulk mode.\n\nFor example:\n\n.. code-block:: python\n\n    from time_execution import settings, time_execution\n    from time_execution.backends.threaded import ThreadedBackend\n\n    # Setup threaded backend which will be run on separate thread\n    threaded_backend = ThreadedBackend(\n        backend=ElasticsearchBackend,\n        backend_kwargs={\n            \"host\" : \"elasticsearch\",\n            \"index\": \"metrics\",\n        }\n    )\n\n    # there is also possibility to configure backend by import path, like:\n    threaded_backend = ThreadedBackend(\n        backend=\"time_execution.backends.kafka.KafkaBackend\",\n        #: any other configuration belongs to backend\n        backend_kwargs={\n            \"hosts\" : \"kafka\",\n            \"topic\": \"metrics\"\n        }\n    )\n\n    # Configure the time_execution decorator\n    settings.configure(backends=[threaded_backend])\n\n    # Wrap the methods where u want the metrics\n    @time_execution\n    def hello():\n        return 'World'\n\n    # Now when we call hello() we put metrics in queue to send it either in some configurable time later\n    # or when queue will reach configurable limit.\n    hello()\n\nIt's also possible to decorate coroutines or awaitables in Python >=3.5.\n\nFor example:\n\n.. code-block:: python\n\n    import asyncio\n    from time_execution import time_execution_async\n\n    # ... Setup the desired backend(s) as described above ...\n\n    # Wrap the methods where you want the metrics\n    @time_execution_async\n    async def hello():\n        await asyncio.sleep(1)\n        return 'World'\n\n    # Now when we schedule hello() we will get metrics in our backends\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(hello())\n\n\n.. _usage-hooks: \n\nHooks\n-----\n\n``time_execution`` supports hooks where you can change the metric before its\nbeing sent to the backend.\n\nWith a hook you can add additional and change existing fields. This can be\nuseful for cases where you would like to add a column to the metric based on\nthe response of the wrapped function.\n\nA hook will always get 3 arguments:\n\n- ``response`` - The returned value of the wrapped function\n- ``exception`` - The raised exception of the wrapped function\n- ``metric`` - A dict containing the data to be send to the backend\n- ``func_args`` - Original args received by the wrapped function.\n- ``func_kwargs`` - Original kwargs received by the wrapped function.\n\nFrom within a hook you can change the `name` if you want the metrics to be split\ninto multiple series.\n\nSee the following example how to setup hooks.\n\n.. code-block:: python\n\n    # Now lets create a hook\n    def my_hook(response, exception, metric, func, func_args, func_kwargs):\n        status_code = getattr(response, 'status_code', None)\n        if status_code:\n            return dict(\n                name='{}.{}'.format(metric['name'], status_code),\n                extra_field='foo bar'\n            )\n\n    # Configure the time_execution decorator, but now with hooks\n    settings.configure(backends=[backend], hooks=[my_hook])\n\n\nThere is also possibility to create decorator with custom set of hooks. It is needed for example to track `celery` tasks.\n\n.. code-block:: python\n\n    from multiprocessing import current_process\n    # Hook for celery tasks\n    def celery_hook(response, exception, metric, func, func_args, func_kwargs):\n        \"\"\"\n        Add celery worker-specific details into response.\n        \"\"\"\n        p = current_process()\n        hook = {\n            'name': metric.get('name'),\n            'value': metric.get('value'),\n            'success': exception is None,\n            'process_name': p.name,\n            'process_pid': p.pid,\n        }\n        return hook\n\n    # Create time_execution decorator with extra hooks\n    time_execution_celery = time_execution(extra_hooks=[celery_hook])\n\n    @celery.task\n    @time_execution_celery\n    def celery_task(self, **kwargs):\n        return True\n\n    # Or do it in place where it is needed\n    @celery.task\n    @time_execution(extra_hooks=[celery_hook])\n    def celery_task(self, **kwargs):\n        return True\n\n    # Or override default hooks by custom ones. Just setup `disable_default_hooks` flag\n    @celery.task\n    @time_execution(extra_hooks=[celery_hook], disable_default_hooks=True)\n    def celery_task(self, **kwargs):\n        return True\n\n\n\nManually sending metrics\n------------------------\n\nYou can also send any metric you have manually to the backend. These will not\nadd the default values and will not hit the hooks.\n\nSee the following example.\n\n.. code-block:: python\n\n    from time_execution import write_metric\n\n    loadavg = os.getloadavg()\n    write_metric('cpu.load.1m', value=loadavg[0])\n    write_metric('cpu.load.5m', value=loadavg[1])\n    write_metric('cpu.load.15m', value=loadavg[2])\n\n\nCustom Backend\n--------------\n\nWriting a custom backend is very simple, all you need to do is create a class\nwith a `write` method. It is not required to extend `BaseMetricsBackend`\nbut, in order to easily upgrade, we recommend you do.\n\n.. code-block:: python\n\n    from time_execution.backends.base import BaseMetricsBackend\n\n\n    class MetricsPrinter(BaseMetricsBackend):\n        def write(self, name, **data):\n            print(name, data)\n\n\nExample scenario\n----------------\n\nIn order to read the metrics, e.g. using ElasticSearch as a backend, the following lucene query could be used:\n\n.. code-block::\n\n    name:\"__main__.hello\" AND hostname:dfaa4928109f\n\nFor more advanced query syntax, please have a look at the `Lucene documentation`_ and the `ElasticSearch Query DSL`_ reference.\n\n\nContribute\n----------\n\nYou have something to contribute? Great! There are a few things that may come in handy.\n\nTesting in this project is done via docker. There is a docker-compose to easily\nget all the required containers up and running.\n\nThere is a Makefile with a few targets that we use often:\n\n- ``make test``\n- ``make isort``\n- ``make lint``\n- ``make build``\n- ``make setup.py``\n\nAll of these make targets can be prefixed by ``docker/``. This will execute\nthe target inside the docker container instead of on your local machine.\nFor example ``make docker/build``.\n\n\n.. _Grafana: http://grafana.org/\n.. _Kibana: https://www.elastic.co/products/kibana\n.. _Lucene Documentation: https://lucene.apache.org/core/documentation.html\n.. _ElasticSearch Query DSL: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html", "description_content_type": "", "docs_url": "https://pythonhosted.org/timeexecution/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kpn-digital/py-timeexecution", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "timeexecution", "package_url": "https://pypi.org/project/timeexecution/", "platform": "", "project_url": "https://pypi.org/project/timeexecution/", "project_urls": {"Homepage": "https://github.com/kpn-digital/py-timeexecution"}, "release_url": "https://pypi.org/project/timeexecution/4.1.2/", "requires_dist": null, "requires_python": "", "summary": "Python project", "version": "4.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/kpn-digital/py-timeexecution?branch=master\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/kpn-digital/py-timeexecution.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5839980a14a2f46306b327db854ebcd95319f3f8/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6b706e2d6469676974616c2f70792d74696d65657865637574696f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://codecov.io/github/kpn-digital/py-timeexecution?branch=master\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/kpn-digital/py-timeexecution/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b88a0733cd73b36c497c24a10091012ef44f79b/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6b706e2d6469676974616c2f70792d74696d65657865637574696f6e2f6d61737465722e737667\"></a>\n<a href=\"https://pypi.org/project/timeexecution\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/timeexecution.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b2739b2e900cfc6811fdebcd1a1b04c845f25a5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74696d65657865637574696f6e2e737667\"></a>\n<a href=\"https://pypi.org/project/timeexecution\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/timeexecution.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e589978ea83ee31b67572c1f39db39af8fce748/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74696d65657865637574696f6e2e737667\"></a>\n<a href=\"http://py-timeexecution.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/py-timeexecution/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c247121c42bf080462c517f853bde897353b9899/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70792d74696d65657865637574696f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/project/timeexecution\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/timeexecution.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c05dc6f99ba2f62896d711f8c0ce300eae4018a1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f74696d65657865637574696f6e2e737667\"></a>\n<img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\">\n<p>This package is designed to record application metrics into specific backends.\nWith the help of <a href=\"http://grafana.org/\" rel=\"nofollow\">Grafana</a> or <a href=\"https://www.elastic.co/products/kibana\" rel=\"nofollow\">Kibana</a> you can easily use these metrics to create meaningful monitoring dashboards.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Sending data to multiple backends (e.g. ElasticSearch)</li>\n<li>Custom backends</li>\n<li>Hooks to include additional data per metric.</li>\n</ul>\n</div>\n<div id=\"available-backends\">\n<h2>Available backends</h2>\n<ul>\n<li>InfluxDB 0.8</li>\n<li>Elasticsearch &gt;=5,&lt;7</li>\n<li>Kafka</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>If you want to use it with the <tt>ElasticSearchBackend</tt>:</p>\n<pre>$ pip install timeexecution<span class=\"o\">[</span>elasticsearch<span class=\"o\">]</span>\n</pre>\n<p>with <tt>InfluxBackend</tt>:</p>\n<pre>$ pip install timeexecution<span class=\"o\">[</span>influxdb<span class=\"o\">]</span>\n</pre>\n<p>with <tt>KafkaBackend</tt>:</p>\n<pre>$ pip install timeexecution<span class=\"o\">[</span>kafka<span class=\"o\">]</span>\n</pre>\n<p>or if you prefer to have all backends available and easily switch between them:</p>\n<pre>$ pip install timeexecution<span class=\"o\">[</span>all<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use this package you decorate the functions you want to time its execution.\nEvery wrapped function will create a metric consisting of 3 default values:</p>\n<ul>\n<li><tt>name</tt> - The name of the series the metric will be stored in. Byt default, timeexecution will use the fully qualified name of the decorated method or function (e.g. ).</li>\n<li><tt>value</tt> - The time it took in ms for the wrapped function to complete</li>\n<li><tt>hostname</tt> - The hostname of the machine the code is running on</li>\n</ul>\n<p>See the following example</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time_execution</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"n\">time_execution</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time_execution.backends.influxdb</span> <span class=\"kn\">import</span> <span class=\"n\">InfluxBackend</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time_execution.backends.elasticsearch</span> <span class=\"kn\">import</span> <span class=\"n\">ElasticsearchBackend</span>\n\n<span class=\"c1\"># Setup the desired backend</span>\n<span class=\"n\">influx</span> <span class=\"o\">=</span> <span class=\"n\">InfluxBackend</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'influx'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">,</span> <span class=\"n\">use_udp</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">elasticsearch</span> <span class=\"o\">=</span> <span class=\"n\">ElasticsearchBackend</span><span class=\"p\">(</span><span class=\"s1\">'elasticsearch'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Configure the time_execution decorator</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">backends</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">influx</span><span class=\"p\">,</span> <span class=\"n\">elasticsearch</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Wrap the methods where u want the metrics</span>\n<span class=\"nd\">@time_execution</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'World'</span>\n\n<span class=\"c1\"># Now when we call hello() and we will get metrics in our backends</span>\n<span class=\"n\">hello</span><span class=\"p\">()</span>\n</pre>\n<p>This will result in an entry in the influxdb</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"__main__.hello\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"columns\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"time\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"sequence_number\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"value\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"hostname\"</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"points\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span>\n                <span class=\"mi\">1449739813939</span><span class=\"p\">,</span>\n                <span class=\"mi\">1111950001</span><span class=\"p\">,</span>\n                <span class=\"mi\">312</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"machine.name\"</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>And the following in Elasticsearch</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"_index\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metrics-2016.01.28\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metric\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AVKIp9DpnPWamvqEzFB3\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"_score\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"_source\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2016-01-28T14:34:05.416968\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"hostname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dfaa4928109f\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"__main__.hello\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">312</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"sort\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"mi\">1453991645416</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>It\u2019s also possible to run backend in different thread with logic behind it, to send metrics in bulk mode.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time_execution</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"n\">time_execution</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time_execution.backends.threaded</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadedBackend</span>\n\n<span class=\"c1\"># Setup threaded backend which will be run on separate thread</span>\n<span class=\"n\">threaded_backend</span> <span class=\"o\">=</span> <span class=\"n\">ThreadedBackend</span><span class=\"p\">(</span>\n    <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">ElasticsearchBackend</span><span class=\"p\">,</span>\n    <span class=\"n\">backend_kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"host\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"elasticsearch\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"index\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metrics\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># there is also possibility to configure backend by import path, like:</span>\n<span class=\"n\">threaded_backend</span> <span class=\"o\">=</span> <span class=\"n\">ThreadedBackend</span><span class=\"p\">(</span>\n    <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s2\">\"time_execution.backends.kafka.KafkaBackend\"</span><span class=\"p\">,</span>\n    <span class=\"c1\">#: any other configuration belongs to backend</span>\n    <span class=\"n\">backend_kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"hosts\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"kafka\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"topic\"</span><span class=\"p\">:</span> <span class=\"s2\">\"metrics\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Configure the time_execution decorator</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">backends</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">threaded_backend</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Wrap the methods where u want the metrics</span>\n<span class=\"nd\">@time_execution</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'World'</span>\n\n<span class=\"c1\"># Now when we call hello() we put metrics in queue to send it either in some configurable time later</span>\n<span class=\"c1\"># or when queue will reach configurable limit.</span>\n<span class=\"n\">hello</span><span class=\"p\">()</span>\n</pre>\n<p>It\u2019s also possible to decorate coroutines or awaitables in Python &gt;=3.5.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time_execution</span> <span class=\"kn\">import</span> <span class=\"n\">time_execution_async</span>\n\n<span class=\"c1\"># ... Setup the desired backend(s) as described above ...</span>\n\n<span class=\"c1\"># Wrap the methods where you want the metrics</span>\n<span class=\"nd\">@time_execution_async</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'World'</span>\n\n<span class=\"c1\"># Now when we schedule hello() we will get metrics in our backends</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"hooks\">\n<span id=\"usage-hooks\"></span><h2>Hooks</h2>\n<p><tt>time_execution</tt> supports hooks where you can change the metric before its\nbeing sent to the backend.</p>\n<p>With a hook you can add additional and change existing fields. This can be\nuseful for cases where you would like to add a column to the metric based on\nthe response of the wrapped function.</p>\n<p>A hook will always get 3 arguments:</p>\n<ul>\n<li><tt>response</tt> - The returned value of the wrapped function</li>\n<li><tt>exception</tt> - The raised exception of the wrapped function</li>\n<li><tt>metric</tt> - A dict containing the data to be send to the backend</li>\n<li><tt>func_args</tt> - Original args received by the wrapped function.</li>\n<li><tt>func_kwargs</tt> - Original kwargs received by the wrapped function.</li>\n</ul>\n<p>From within a hook you can change the <cite>name</cite> if you want the metrics to be split\ninto multiple series.</p>\n<p>See the following example how to setup hooks.</p>\n<pre><span class=\"c1\"># Now lets create a hook</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_hook</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">func_args</span><span class=\"p\">,</span> <span class=\"n\">func_kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s1\">'status_code'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">status_code</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span> <span class=\"n\">status_code</span><span class=\"p\">),</span>\n            <span class=\"n\">extra_field</span><span class=\"o\">=</span><span class=\"s1\">'foo bar'</span>\n        <span class=\"p\">)</span>\n\n<span class=\"c1\"># Configure the time_execution decorator, but now with hooks</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">backends</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">backend</span><span class=\"p\">],</span> <span class=\"n\">hooks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_hook</span><span class=\"p\">])</span>\n</pre>\n<p>There is also possibility to create decorator with custom set of hooks. It is needed for example to track <cite>celery</cite> tasks.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">current_process</span>\n<span class=\"c1\"># Hook for celery tasks</span>\n<span class=\"k\">def</span> <span class=\"nf\">celery_hook</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">func_args</span><span class=\"p\">,</span> <span class=\"n\">func_kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Add celery worker-specific details into response.\n    \"\"\"</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">current_process</span><span class=\"p\">()</span>\n    <span class=\"n\">hook</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'success'</span><span class=\"p\">:</span> <span class=\"n\">exception</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">'process_name'</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"s1\">'process_pid'</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">pid</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">hook</span>\n\n<span class=\"c1\"># Create time_execution decorator with extra hooks</span>\n<span class=\"n\">time_execution_celery</span> <span class=\"o\">=</span> <span class=\"n\">time_execution</span><span class=\"p\">(</span><span class=\"n\">extra_hooks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">celery_hook</span><span class=\"p\">])</span>\n\n<span class=\"nd\">@celery</span><span class=\"o\">.</span><span class=\"n\">task</span>\n<span class=\"nd\">@time_execution_celery</span>\n<span class=\"k\">def</span> <span class=\"nf\">celery_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Or do it in place where it is needed</span>\n<span class=\"nd\">@celery</span><span class=\"o\">.</span><span class=\"n\">task</span>\n<span class=\"nd\">@time_execution</span><span class=\"p\">(</span><span class=\"n\">extra_hooks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">celery_hook</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">celery_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Or override default hooks by custom ones. Just setup `disable_default_hooks` flag</span>\n<span class=\"nd\">@celery</span><span class=\"o\">.</span><span class=\"n\">task</span>\n<span class=\"nd\">@time_execution</span><span class=\"p\">(</span><span class=\"n\">extra_hooks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">celery_hook</span><span class=\"p\">],</span> <span class=\"n\">disable_default_hooks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">celery_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"manually-sending-metrics\">\n<h2>Manually sending metrics</h2>\n<p>You can also send any metric you have manually to the backend. These will not\nadd the default values and will not hit the hooks.</p>\n<p>See the following example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time_execution</span> <span class=\"kn\">import</span> <span class=\"n\">write_metric</span>\n\n<span class=\"n\">loadavg</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getloadavg</span><span class=\"p\">()</span>\n<span class=\"n\">write_metric</span><span class=\"p\">(</span><span class=\"s1\">'cpu.load.1m'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">loadavg</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">write_metric</span><span class=\"p\">(</span><span class=\"s1\">'cpu.load.5m'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">loadavg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">write_metric</span><span class=\"p\">(</span><span class=\"s1\">'cpu.load.15m'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">loadavg</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"custom-backend\">\n<h2>Custom Backend</h2>\n<p>Writing a custom backend is very simple, all you need to do is create a class\nwith a <cite>write</cite> method. It is not required to extend <cite>BaseMetricsBackend</cite>\nbut, in order to easily upgrade, we recommend you do.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time_execution.backends.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseMetricsBackend</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MetricsPrinter</span><span class=\"p\">(</span><span class=\"n\">BaseMetricsBackend</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example-scenario\">\n<h2>Example scenario</h2>\n<p>In order to read the metrics, e.g. using ElasticSearch as a backend, the following lucene query could be used:</p>\n<pre>name:\"__main__.hello\" AND hostname:dfaa4928109f\n</pre>\n<p>For more advanced query syntax, please have a look at the <a href=\"https://lucene.apache.org/core/documentation.html\" rel=\"nofollow\">Lucene documentation</a> and the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\" rel=\"nofollow\">ElasticSearch Query DSL</a> reference.</p>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>You have something to contribute? Great! There are a few things that may come in handy.</p>\n<p>Testing in this project is done via docker. There is a docker-compose to easily\nget all the required containers up and running.</p>\n<p>There is a Makefile with a few targets that we use often:</p>\n<ul>\n<li><tt>make test</tt></li>\n<li><tt>make isort</tt></li>\n<li><tt>make lint</tt></li>\n<li><tt>make build</tt></li>\n<li><tt>make setup.py</tt></li>\n</ul>\n<p>All of these make targets can be prefixed by <tt>docker/</tt>. This will execute\nthe target inside the docker container instead of on your local machine.\nFor example <tt>make docker/build</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 6080375, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "1a8499dc8db29de1347da219c0a7cec8", "sha256": "87b7e4e0267d103e4a86baad4fcd2b24bef5c8a9d7da13cc46510ef64b037029"}, "downloads": -1, "filename": "timeexecution-0.0.0.tar.gz", "has_sig": false, "md5_digest": "1a8499dc8db29de1347da219c0a7cec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17646, "upload_time": "2016-07-19T21:20:03", "upload_time_iso_8601": "2016-07-19T21:20:03.857828Z", "url": "https://files.pythonhosted.org/packages/7a/3c/f6bf49519a751aa22ea7007edc33b5e1966638c4159738236c97bdaafa7f/timeexecution-0.0.0.tar.gz", "yanked": false}], "1.10.1": [{"comment_text": "", "digests": {"md5": "fa4d2f1a16703f4107cf6ae829b2378b", "sha256": "2ee6fa77f86edd27ab77b64556fbe3e7410627a620f5f2a724fb88bdc9116dfa"}, "downloads": -1, "filename": "timeexecution-1.10.1.tar.gz", "has_sig": false, "md5_digest": "fa4d2f1a16703f4107cf6ae829b2378b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20958, "upload_time": "2016-09-07T14:54:18", "upload_time_iso_8601": "2016-09-07T14:54:18.973237Z", "url": "https://files.pythonhosted.org/packages/c4/24/211ff082807c585e2ca5c7963e26a22fb13e79eb7b7825699149e2df3908/timeexecution-1.10.1.tar.gz", "yanked": false}], "1.10.2": [{"comment_text": "", "digests": {"md5": "f7ec3bcc8e7dcb8e202ac0380036aea5", "sha256": "d768c1426f3513004282801ff87fe9b3b385cd69ec0903ab9cb5d88f143eb9cd"}, "downloads": -1, "filename": "timeexecution-1.10.2.tar.gz", "has_sig": false, "md5_digest": "f7ec3bcc8e7dcb8e202ac0380036aea5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20975, "upload_time": "2016-09-09T12:12:33", "upload_time_iso_8601": "2016-09-09T12:12:33.730001Z", "url": "https://files.pythonhosted.org/packages/37/f4/96c844ff6414947066138582d5d2a9728333eb8ae050674369303ac0fec0/timeexecution-1.10.2.tar.gz", "yanked": false}], "1.10.3": [{"comment_text": "", "digests": {"md5": "f46d2b455ec0c79ab088778149a9873d", "sha256": "376d01a703ea09970b98f98828beaac10cec0c30fc19bc16efb38cf4303f998e"}, "downloads": -1, "filename": "timeexecution-1.10.3.tar.gz", "has_sig": false, "md5_digest": "f46d2b455ec0c79ab088778149a9873d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21103, "upload_time": "2016-09-29T12:30:46", "upload_time_iso_8601": "2016-09-29T12:30:46.063176Z", "url": "https://files.pythonhosted.org/packages/34/34/4aebe115bde58743cf917621be72929e1b0b771bf2535f71073410562842/timeexecution-1.10.3.tar.gz", "yanked": false}], "1.10.4": [{"comment_text": "", "digests": {"md5": "e1a30208437f2bcd5bad8b19b07d2fde", "sha256": "7d1c63393d6b5f3c907bf0f2fc276294eba1ea66f747db59eb3ddcc7249441f3"}, "downloads": -1, "filename": "timeexecution-1.10.4.tar.gz", "has_sig": false, "md5_digest": "e1a30208437f2bcd5bad8b19b07d2fde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21147, "upload_time": "2016-10-04T04:25:49", "upload_time_iso_8601": "2016-10-04T04:25:49.444920Z", "url": "https://files.pythonhosted.org/packages/e8/8b/0b8982d1f8d2588fa0a9d3d3cc01f307e06be96069692cdbc9b1f39e5451/timeexecution-1.10.4.tar.gz", "yanked": false}], "1.11": [{"comment_text": "", "digests": {"md5": "b9a958b4178b9d84192eac4085cc6856", "sha256": "88661746582ef8602241c06267923b2603aad70baa53f6b372d8e06a961f59c6"}, "downloads": -1, "filename": "timeexecution-1.11.tar.gz", "has_sig": false, "md5_digest": "b9a958b4178b9d84192eac4085cc6856", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17480, "upload_time": "2017-01-02T12:04:11", "upload_time_iso_8601": "2017-01-02T12:04:11.467007Z", "url": "https://files.pythonhosted.org/packages/c2/d9/f2c9911d8e2a6fdf462cf39d4616ef30fb884cf6fd7db441cff9ce5882b9/timeexecution-1.11.tar.gz", "yanked": false}], "1.12": [{"comment_text": "", "digests": {"md5": "ddfd3450ef2bcc0a49273a31af07b7b0", "sha256": "2d9bfb3d7e1ace7beaa0e1b087b77588d027fe52bbdb103298b24391920acb77"}, "downloads": -1, "filename": "timeexecution-1.12.tar.gz", "has_sig": false, "md5_digest": "ddfd3450ef2bcc0a49273a31af07b7b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17520, "upload_time": "2017-04-18T08:52:16", "upload_time_iso_8601": "2017-04-18T08:52:16.520841Z", "url": "https://files.pythonhosted.org/packages/ea/44/b842876a3ed7cb61542008d242307c5ca0418af71c2c21a677599c234b2c/timeexecution-1.12.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "3dec8441830528c03cac81b558636823", "sha256": "99bf0f8e5f87d766248bb3b55d3918e2cf29413b9ad87948fcfc6ac1f4b6f7f9"}, "downloads": -1, "filename": "timeexecution-1.4.0.tar.gz", "has_sig": false, "md5_digest": "3dec8441830528c03cac81b558636823", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17116, "upload_time": "2016-03-12T13:37:33", "upload_time_iso_8601": "2016-03-12T13:37:33.079961Z", "url": "https://files.pythonhosted.org/packages/bd/4b/4946c62a0afc9d4502e1cc5973094df3974e1fd4797e4de4d7af3d7236eb/timeexecution-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "9c4c00019b50713faea7ab550dca6971", "sha256": "bf99984e6b030b14a8b8c89104cf1ec56611b930c9ff6a71415dbf6213060fe5"}, "downloads": -1, "filename": "timeexecution-1.5.0.tar.gz", "has_sig": false, "md5_digest": "9c4c00019b50713faea7ab550dca6971", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17140, "upload_time": "2016-05-10T10:16:13", "upload_time_iso_8601": "2016-05-10T10:16:13.247178Z", "url": "https://files.pythonhosted.org/packages/dc/05/7284699cf8e166d772b4fa1d768e83beeace17ae6c371c84d95e161f96f9/timeexecution-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "376aa2194da1ddc9a195aa314c1058a0", "sha256": "91db5a15df2ef2b8444e6740e0843a496fdc7b1056a4ab189087ef53b8d94fbc"}, "downloads": -1, "filename": "timeexecution-1.6.0.tar.gz", "has_sig": false, "md5_digest": "376aa2194da1ddc9a195aa314c1058a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16880, "upload_time": "2016-05-12T15:33:23", "upload_time_iso_8601": "2016-05-12T15:33:23.703518Z", "url": "https://files.pythonhosted.org/packages/fe/a7/c45bf01bc1fb25f362bf1847fff25fdebfba5a8da063da22e22f88d11215/timeexecution-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "91a4fbc130c71c23c5dc465ab3f3a936", "sha256": "1beb2b43e5e4015398b4b5c23e776a80eef31e267028aa6b742208957d89531f"}, "downloads": -1, "filename": "timeexecution-1.6.1.tar.gz", "has_sig": false, "md5_digest": "91a4fbc130c71c23c5dc465ab3f3a936", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16957, "upload_time": "2016-05-13T11:59:09", "upload_time_iso_8601": "2016-05-13T11:59:09.127254Z", "url": "https://files.pythonhosted.org/packages/53/c3/d8356d390809aff1952b5645a768bc1af0830e40bad75c75b4c30a83e657/timeexecution-1.6.1.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "6003c8d49c7a4efe2316af8b600d095b", "sha256": "ca1104bcefeddabcc37ec66c0d2e002ce5aab42953755ce9b3b9617c7e758d6e"}, "downloads": -1, "filename": "timeexecution-1.7.0.tar.gz", "has_sig": false, "md5_digest": "6003c8d49c7a4efe2316af8b600d095b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16954, "upload_time": "2016-06-29T14:06:48", "upload_time_iso_8601": "2016-06-29T14:06:48.768728Z", "url": "https://files.pythonhosted.org/packages/b9/a1/b655596242715cbd68d5ed87138f9781231189c40e3210daf0bec40ef602/timeexecution-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "482fb94a76fd9d5e245120b9ab063200", "sha256": "019d0f9491a7b0d6c957347814737404bd302a9fef5242591d2dc38911854d34"}, "downloads": -1, "filename": "timeexecution-1.7.1.tar.gz", "has_sig": false, "md5_digest": "482fb94a76fd9d5e245120b9ab063200", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16961, "upload_time": "2016-06-29T15:01:39", "upload_time_iso_8601": "2016-06-29T15:01:39.031029Z", "url": "https://files.pythonhosted.org/packages/30/ad/48a9d1411af1539f2f00b0441c378f85ee338de7fa5f5b100c23a749484f/timeexecution-1.7.1.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "9acd3ba90f87f30cb64c654855e1ae38", "sha256": "b443ccc12de792cc03b09d7bce5b9a2c06b6ac357569538f94c7eade74d57a93"}, "downloads": -1, "filename": "timeexecution-1.8.0.tar.gz", "has_sig": false, "md5_digest": "9acd3ba90f87f30cb64c654855e1ae38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17492, "upload_time": "2016-07-14T09:01:20", "upload_time_iso_8601": "2016-07-14T09:01:20.141151Z", "url": "https://files.pythonhosted.org/packages/0a/8d/77d235f8bae860307dacd23178d230b52c28b8aad1713cdc5ff5e5582c44/timeexecution-1.8.0.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "37837908fc901e12c33be6e51960b4b8", "sha256": "26fef3fe12c94ad947c2d59b61dee6f17f3c583373c5e28a5d568ee9acffc704"}, "downloads": -1, "filename": "timeexecution-1.9.0.tar.gz", "has_sig": false, "md5_digest": "37837908fc901e12c33be6e51960b4b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17650, "upload_time": "2016-07-19T21:35:10", "upload_time_iso_8601": "2016-07-19T21:35:10.623424Z", "url": "https://files.pythonhosted.org/packages/5a/c5/07890deed45f898fab6f248ccfe46cbffea8ee153ff01614b03e4f646799/timeexecution-1.9.0.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "2ce72f2967898d9b11f0c1c1eb29f00f", "sha256": "b577790814e0a015714e8d15941fb4b633a8c0d5d6ccd03403bf6438f08cd34c"}, "downloads": -1, "filename": "timeexecution-2.0.tar.gz", "has_sig": false, "md5_digest": "2ce72f2967898d9b11f0c1c1eb29f00f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17924, "upload_time": "2017-05-04T14:44:30", "upload_time_iso_8601": "2017-05-04T14:44:30.462538Z", "url": "https://files.pythonhosted.org/packages/dc/49/da58ab4e984698a924c23476561388911f5547360ced755b4f30d7cf70ef/timeexecution-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "b1999fceed55228c62d9885271a4bfce", "sha256": "bddd5b69a1cd486129c88365d61f6584a081b752175394cf6db92e781fb677c7"}, "downloads": -1, "filename": "timeexecution-2.1.tar.gz", "has_sig": false, "md5_digest": "b1999fceed55228c62d9885271a4bfce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17918, "upload_time": "2017-05-29T16:13:52", "upload_time_iso_8601": "2017-05-29T16:13:52.780552Z", "url": "https://files.pythonhosted.org/packages/b4/9e/8f4ce96003b16a75e1ec4c3a55e1e4d47e35fde67911e72c5c77f4357691/timeexecution-2.1.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "000314aeee16d22970a0281fd3e59360", "sha256": "e83a05bc85f587edb4598566692b1f1aad45dd4c859e89e36b1808158f811e47"}, "downloads": -1, "filename": "timeexecution-3.0.tar.gz", "has_sig": false, "md5_digest": "000314aeee16d22970a0281fd3e59360", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17881, "upload_time": "2017-06-02T10:21:49", "upload_time_iso_8601": "2017-06-02T10:21:49.246583Z", "url": "https://files.pythonhosted.org/packages/de/86/fbde410f212089aeff917d6aa9fde191249bccb506156b93a248d17236a3/timeexecution-3.0.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "9cb4e982a6878a6410960e47aa390ec7", "sha256": "f90c3d5e35a8695364ef3052fea02ba56989db95714f3dff4c5cbcd22c9ecf80"}, "downloads": -1, "filename": "timeexecution-3.1.0.tar.gz", "has_sig": false, "md5_digest": "9cb4e982a6878a6410960e47aa390ec7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21686, "upload_time": "2017-07-12T11:52:52", "upload_time_iso_8601": "2017-07-12T11:52:52.276394Z", "url": "https://files.pythonhosted.org/packages/8c/37/e1597f845b55d7e3a987600f8c22f1b92d5c65f4425756b9ec901b97573a/timeexecution-3.1.0.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "7b1937a346870c9f64e1c08f49fa422f", "sha256": "e7544ac043e6ecf3d8ac33866eb29c40d8510e8e2572b41d8cdee2cb31503814"}, "downloads": -1, "filename": "timeexecution-3.2.0.tar.gz", "has_sig": false, "md5_digest": "7b1937a346870c9f64e1c08f49fa422f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21247, "upload_time": "2018-02-20T10:29:05", "upload_time_iso_8601": "2018-02-20T10:29:05.379964Z", "url": "https://files.pythonhosted.org/packages/bb/39/7008fb9be905b87f62826b065638c7f3cad21a84fbf831f18a7ec888e62e/timeexecution-3.2.0.tar.gz", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "492c941eeb20332292df83087b2eb16f", "sha256": "090c8865cb8aba6a0301cd141da9d5108440ebe08eeeccc2477c8cd0e741f79b"}, "downloads": -1, "filename": "timeexecution-3.3.0.tar.gz", "has_sig": false, "md5_digest": "492c941eeb20332292df83087b2eb16f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21235, "upload_time": "2018-05-16T12:59:33", "upload_time_iso_8601": "2018-05-16T12:59:33.402507Z", "url": "https://files.pythonhosted.org/packages/0a/dc/64b5588a857b22f43e18a7266441dcb823af975d73adb5f3504a06226098/timeexecution-3.3.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "82ccbf5b78c778ad4c30e37215e494f8", "sha256": "c894670729fb98c154cfe3f4b98460edfb2388f5409ed80845a7f8a05eb0df75"}, "downloads": -1, "filename": "timeexecution-4.0.0.tar.gz", "has_sig": false, "md5_digest": "82ccbf5b78c778ad4c30e37215e494f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26732, "upload_time": "2019-05-03T13:21:00", "upload_time_iso_8601": "2019-05-03T13:21:00.714791Z", "url": "https://files.pythonhosted.org/packages/bf/02/650711b964e4f98c350c9de07cfab3760c921f29debae70c805b6ce6fa83/timeexecution-4.0.0.tar.gz", "yanked": false}], "4.0.0a2": [{"comment_text": "", "digests": {"md5": "c8ed4935e1a8ed426e8d2718df579307", "sha256": "abe3d6e14d2bf6b054971814e6c1c757407d73e25b7aaa7e67fee00f9470bdf7"}, "downloads": -1, "filename": "timeexecution-4.0.0a2.tar.gz", "has_sig": false, "md5_digest": "c8ed4935e1a8ed426e8d2718df579307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24568, "upload_time": "2019-02-05T09:42:48", "upload_time_iso_8601": "2019-02-05T09:42:48.355311Z", "url": "https://files.pythonhosted.org/packages/b6/de/ad9ee85d7e61b2fad2e7a6b35e25c4e4f3969a345a3c575fc07064dc2cf3/timeexecution-4.0.0a2.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "a531153e7144b51ff32f4b56075b6520", "sha256": "4b2384298b8f1548e2c2f3d8291db1630fd448cae2f01ce36b88c344c69a796c"}, "downloads": -1, "filename": "timeexecution-4.1.0.tar.gz", "has_sig": false, "md5_digest": "a531153e7144b51ff32f4b56075b6520", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27159, "upload_time": "2019-05-10T13:08:03", "upload_time_iso_8601": "2019-05-10T13:08:03.006110Z", "url": "https://files.pythonhosted.org/packages/fe/4c/adda68950d1810ecee7d731a6b9281e0a8f1d2bc9f6221155836fca5d54a/timeexecution-4.1.0.tar.gz", "yanked": false}], "4.1.1": [{"comment_text": "", "digests": {"md5": "1c6d244b93f9aa88704cc063e610b64e", "sha256": "a317506b5bbe576385470e625dd52a65caff8b342be40054d70fab3f73797523"}, "downloads": -1, "filename": "timeexecution-4.1.1.tar.gz", "has_sig": false, "md5_digest": "1c6d244b93f9aa88704cc063e610b64e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27641, "upload_time": "2019-08-02T12:41:46", "upload_time_iso_8601": "2019-08-02T12:41:46.343973Z", "url": "https://files.pythonhosted.org/packages/0a/57/7cfbcd3e149d448bbcebceb10c28fffaa8e2ef9867f527f35220820f1ebc/timeexecution-4.1.1.tar.gz", "yanked": false}], "4.1.2": [{"comment_text": "", "digests": {"md5": "9f9ae597f45ed76cec372853038e3832", "sha256": "f961dd60f0ac60258b46d6507f18b586c8163ce2875c1cdf30614ecfba4f226d"}, "downloads": -1, "filename": "timeexecution-4.1.2.tar.gz", "has_sig": false, "md5_digest": "9f9ae597f45ed76cec372853038e3832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20422, "upload_time": "2019-11-05T10:52:06", "upload_time_iso_8601": "2019-11-05T10:52:06.734766Z", "url": "https://files.pythonhosted.org/packages/82/a8/9e8ffbdff16da264d5500798bf8f9f1a2de2ff49a90d67d1b0247eac6fbe/timeexecution-4.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f9ae597f45ed76cec372853038e3832", "sha256": "f961dd60f0ac60258b46d6507f18b586c8163ce2875c1cdf30614ecfba4f226d"}, "downloads": -1, "filename": "timeexecution-4.1.2.tar.gz", "has_sig": false, "md5_digest": "9f9ae597f45ed76cec372853038e3832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20422, "upload_time": "2019-11-05T10:52:06", "upload_time_iso_8601": "2019-11-05T10:52:06.734766Z", "url": "https://files.pythonhosted.org/packages/82/a8/9e8ffbdff16da264d5500798bf8f9f1a2de2ff49a90d67d1b0247eac6fbe/timeexecution-4.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:34 2020"}