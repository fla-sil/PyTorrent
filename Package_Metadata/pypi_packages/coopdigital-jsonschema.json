{"info": {"author": "Julian Berman", "author_email": "Julian@GrayVines.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": ".. image:: https://img.shields.io/pypi/v/jsonschema.svg\n    :target: https://pypi.python.org/pypi/jsonschema\n.. image:: https://travis-ci.org/Julian/jsonschema.svg?branch=master\n    :target: https://travis-ci.org/Julian/jsonschema\n.. image:: https://img.shields.io/pypi/l/jsonschema.svg\n    :target: https://pypi.python.org/pypi/jsonschema\n\n==========\njsonschema\n==========\n\n``jsonschema`` is an implementation of `JSON Schema <http://json-schema.org>`_\nfor Python (supporting 2.7+ including Python 3).\n\n.. code-block:: python\n\n    >>> from jsonschema import validate\n\n    >>> # A sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # If no exception is raised by validate(), the instance is valid.\n    >>> validate({\"name\" : \"Eggs\", \"price\" : 34.99}, schema)\n\n    >>> validate(\n    ...     {\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema\n    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValidationError: 'Invalid' is not of type 'number'\n\nIt can also be used from console:\n\n.. code-block:: bash\n\n    $ jsonschema -i sample.json sample.schema\n\nFeatures\n--------\n\n* Full support for\n  `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator>`_\n  **and** `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator>`_\n  of the schema.\n\n* `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors>`_\n  that can iteratively report *all* validation errors.\n\n* Small and extensible\n\n* `Programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonschema>`_\n  of which properties or items failed validation.\n\n\nRelease Notes\n-------------\n\nVersion 2.5.0 is mainly a performance release. The interface for `RefResolver`\nwas extended to add methods that improve performance on CPython.\n\nSupport for custom `RefResolver` objects with the legacy interface should *not*\nbe affected. If you notice something amiss please file an issue ticket.\n\n\nRunning the Test Suite\n----------------------\n\nIf you have ``tox`` installed (perhaps via ``pip install tox`` or your\npackage manager), running``tox`` in the directory of your source checkout will\nrun ``jsonschema``'s test suite on all of the versions of Python ``jsonschema``\nsupports. Note that you'll need to have all of those versions installed in\norder to run the tests on each of them, otherwise ``tox`` will skip (and fail)\nthe tests on that version.\n\nOf course you're also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the ``jsonschema.tests`` package.\n\n\nCommunity\n---------\n\nThere's a `mailing list <https://groups.google.com/forum/#!forum/jsonschema>`_\nfor this implementation on Google Groups.\n\nPlease join, and feel free to send questions there.\n\n\nContributing\n------------\n\nI'm Julian Berman.\n\n``jsonschema`` is on `GitHub <http://github.com/Julian/jsonschema>`_.\n\nGet in touch, via GitHub or otherwise, if you've got something to contribute,\nit'd be most welcome!\n\nYou can also generally find me on Freenode (nick: ``tos9``) in various\nchannels, including ``#python``.\n\nIf you feel overwhelmingly grateful, you can woo me with beer money on\n`Gittip <https://www.gittip.com/Julian/>`_ or via Google Wallet with the email\nin my GitHub profile.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Julian/jsonschema", "keywords": "", "license": "MIT", "maintainer": "Olivia Mackintosh", "maintainer_email": "olivia.mackintosh@coopdigital.co.uk", "name": "coopdigital-jsonschema", "package_url": "https://pypi.org/project/coopdigital-jsonschema/", "platform": "", "project_url": "https://pypi.org/project/coopdigital-jsonschema/", "project_urls": {"Homepage": "http://github.com/Julian/jsonschema"}, "release_url": "https://pypi.org/project/coopdigital-jsonschema/2.6.0/", "requires_dist": ["functools32; python_version=='2.7'", "rfc3987; extra == 'format'", "strict-rfc3339; extra == 'format'", "webcolors; extra == 'format'"], "requires_python": "", "summary": "An implementation of JSON Schema validation for Python", "version": "2.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/jsonschema\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/jsonschema.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a28b3023297c6c5cac127426135e97d32cf9cf4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a736f6e736368656d612e737667\"></a>\n<a href=\"https://travis-ci.org/Julian/jsonschema\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/Julian/jsonschema.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55f355d9c8bfab31374513fcc9ff8feb42f4d135/68747470733a2f2f7472617669732d63692e6f72672f4a756c69616e2f6a736f6e736368656d612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/jsonschema\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/jsonschema.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8592e7f6320bd0cf67b831140d88235b555bccff/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6a736f6e736368656d612e737667\"></a>\n<div id=\"jsonschema\">\n<h2>jsonschema</h2>\n<p><tt>jsonschema</tt> is an implementation of <a href=\"http://json-schema.org\" rel=\"nofollow\">JSON Schema</a>\nfor Python (supporting 2.7+ including Python 3).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonschema</span> <span class=\"kn\">import</span> <span class=\"n\">validate</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># A sample schema, like what we'd get from json.load()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"properties\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"number\"</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># If no exception is raised by validate(), the instance is valid.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validate</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"mf\">34.99</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validate</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Invalid\"</span><span class=\"p\">},</span> <span class=\"n\">schema</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>                                   <span class=\"c1\"># doctest: +IGNORE_EXCEPTION_DETAIL</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"s1\">'Invalid'</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"s1\">'number'</span>\n</pre>\n<p>It can also be used from console:</p>\n<pre>$ jsonschema -i sample.json sample.schema\n</pre>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Full support for\n<a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator\" rel=\"nofollow\">Draft 3</a>\n<strong>and</strong> <a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator\" rel=\"nofollow\">Draft 4</a>\nof the schema.</li>\n<li><a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors\" rel=\"nofollow\">Lazy validation</a>\nthat can iteratively report <em>all</em> validation errors.</li>\n<li>Small and extensible</li>\n<li><a href=\"https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonschema\" rel=\"nofollow\">Programmatic querying</a>\nof which properties or items failed validation.</li>\n</ul>\n</div>\n<div id=\"release-notes\">\n<h3>Release Notes</h3>\n<p>Version 2.5.0 is mainly a performance release. The interface for <cite>RefResolver</cite>\nwas extended to add methods that improve performance on CPython.</p>\n<p>Support for custom <cite>RefResolver</cite> objects with the legacy interface should <em>not</em>\nbe affected. If you notice something amiss please file an issue ticket.</p>\n</div>\n<div id=\"running-the-test-suite\">\n<h3>Running the Test Suite</h3>\n<p>If you have <tt>tox</tt> installed (perhaps via <tt>pip install tox</tt> or your\npackage manager), running``tox`` in the directory of your source checkout will\nrun <tt>jsonschema</tt>\u2019s test suite on all of the versions of Python <tt>jsonschema</tt>\nsupports. Note that you\u2019ll need to have all of those versions installed in\norder to run the tests on each of them, otherwise <tt>tox</tt> will skip (and fail)\nthe tests on that version.</p>\n<p>Of course you\u2019re also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the <tt>jsonschema.tests</tt> package.</p>\n</div>\n<div id=\"community\">\n<h3>Community</h3>\n<p>There\u2019s a <a href=\"https://groups.google.com/forum/#!forum/jsonschema\" rel=\"nofollow\">mailing list</a>\nfor this implementation on Google Groups.</p>\n<p>Please join, and feel free to send questions there.</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>I\u2019m Julian Berman.</p>\n<p><tt>jsonschema</tt> is on <a href=\"http://github.com/Julian/jsonschema\" rel=\"nofollow\">GitHub</a>.</p>\n<p>Get in touch, via GitHub or otherwise, if you\u2019ve got something to contribute,\nit\u2019d be most welcome!</p>\n<p>You can also generally find me on Freenode (nick: <tt>tos9</tt>) in various\nchannels, including <tt>#python</tt>.</p>\n<p>If you feel overwhelmingly grateful, you can woo me with beer money on\n<a href=\"https://www.gittip.com/Julian/\" rel=\"nofollow\">Gittip</a> or via Google Wallet with the email\nin my GitHub profile.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4304342, "releases": {"2.6.0": [{"comment_text": "", "digests": {"md5": "2d2bed5bf4d2fb8006999c0b4daff0bc", "sha256": "19c93e04ce5961b2f5664a7e8c978c6cecd0e1f2f8431b1196e0c4ca21209352"}, "downloads": -1, "filename": "coopdigital_jsonschema-2.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2d2bed5bf4d2fb8006999c0b4daff0bc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43789, "upload_time": "2018-09-24T11:16:34", "upload_time_iso_8601": "2018-09-24T11:16:34.372586Z", "url": "https://files.pythonhosted.org/packages/7a/85/eae496f1b83dc5a5236bb074d47962ba0a5021099ba9486c2c4c5094d1ad/coopdigital_jsonschema-2.6.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d2bed5bf4d2fb8006999c0b4daff0bc", "sha256": "19c93e04ce5961b2f5664a7e8c978c6cecd0e1f2f8431b1196e0c4ca21209352"}, "downloads": -1, "filename": "coopdigital_jsonschema-2.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2d2bed5bf4d2fb8006999c0b4daff0bc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43789, "upload_time": "2018-09-24T11:16:34", "upload_time_iso_8601": "2018-09-24T11:16:34.372586Z", "url": "https://files.pythonhosted.org/packages/7a/85/eae496f1b83dc5a5236bb074d47962ba0a5021099ba9486c2c4c5094d1ad/coopdigital_jsonschema-2.6.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:43:21 2020"}