{"info": {"author": "David Kovar", "author_email": "dkovar@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "=============\nAnalyze MFT 3\n=============\n\nanalyzeMFT.py is designed to fully parse the MFT file from an NTFS filesystem\nand present the results as accurately as possible in multiple formats.\n\nNow using Python3!\n\nInstallation\n============\nYou should now be able to install analyzeMFT with pip:\n\n    pip install analyzeMFT\n\nAlternatively:\n\n    git clone https://github.com/dkovar/analyzeMFT.git\n    cd analyzeMFT\n    python setup.py install (or, just run it from that directory)\n\nUsage\n=====\nUsage: analyzeMFT.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -v, --version         report version and exit\n\nFile input options:\n\n  -f FILE, --file=FILE  read MFT from FILE\n\nFile output options:\n\n  -o FILE, --output=FILE\n                        write results to FILE\n  -c FILE, --csvtimefile=FILE\n                        write CSV format timeline file\n  -b FILE, --bodyfile=FILE\n                        write MAC information to bodyfile\n\nOptions specific to body files:\n\n  --bodystd             Use STD_INFO timestamps for body file rather than FN\n                        timestamps\n  --bodyfull            Use full path name + filename rather than just\n                        filename\n\nOther options:\n\n  -a, --anomaly         turn on anomaly detection\n  -l, --localtz         report times using local timezone\n  -e, --excel           print date/time in Excel friendly format\n  -d, --debug           turn on debugging output\n  -s, --saveinmemory    Save a copy of the decoded MFT in memory. Do not use\n                        for very large MFTs\n  -p, --progress        Show systematic progress reports.\n  -w, --windows-path    Use windows path separator when constructing the filepath instead of linux\n\nOutput\n======\n\nanalyzeMFT can produce output in CSV or bodyfile format.\n\nCSV output\n----------\nThe output is currently written in CSV format. Due to the fact that Excel\nautomatically determines the type of data in a column, it is recommended that\nyou write the output to a file without the .csv extension, open it in Excel, and\nset all the columns to \"Text\" rather than \"General\" when the import wizard\nstarts. Failure to do so will result in Excel formatting the columns in a way\nthat misrepresents the data.\n\nI could pad the data in such a way that forces Excel to set the column type correctly\nbut this might break other tools.\n\nGUI:\nYou can turn off all the GUI dependencies by setting the noGUI flag to 'True'. This is for installations that don't want to install the tk/tcl libraries.\n\nUpdate History\n==============\n[See CHANGES.txt]\n\nVersion 2.0.4:Minor tweaks to support external programs\nVersion 2.0.3:Restructured to support PyPi (pip)\nVersion 2.0.2:De-OOP'd MFT record parsing to reduce memory consumption\nVersion 2.0.1:Added L2T CSV and body file support back in, fixed some minor bugs along the way.\nMade full file path calculation more efficient\nVersion 2.0.0 Restructured layout to turn it into a module.\nMade it more OOP.\nImproved error handling and corrupt record detection\n\n------ Version 1 history follows ------\n\nVersion 1.0: Initial release\nVersion 1.1: Split parent folder reference and sequence into two fields. I'm still trying to figure out the\nsignificance of the parent folder sequence number, but I'm convinced that what some documentation\nrefers to as the parent folder record number is really two values - the parent folder record number\nand the parent folder sequence number.\nVersion 1.2: Fixed problem with non-printable characters in filenames. Any Unicode character is legal in a\nfilename, including newlines. This presented some problems in my output. Characters that do not\nrender well are now converted to hex and a note is added to the Notes column indicating this.\n(I've learned a lot about Unicode since I first wrote this.)\nAdded \"compile time\" flag to turn off the inclusion of any GUI related modules and libraries\nfor systems missing tk/tcl support. (Set noGUI to True in the code)\nVersion 1.3: Added new column to hold log entries relating to each record. For example, a note stating that\nsome characters in the filename were converted to hex as they could not be printed.\nVersion 1.4: Credit: Spencer Lynch. I was misusing the flags field in the MFT header. The first bit is\nActive/Inactive. The second bit is File/Folder.\nVersion 1.5: Fixed date/time reporting. I wasn't reporting useconds at all.\nAdded anomaly detection. Adds two columns:\nstd-fn-shift:  If Y, entry's FN create time is after the STD create time\nusec-zero: If Y, entry's STD create time's usec value is zero\nVersion 1.6: Various bug fixes\nVersion 1.7: Bodyfile support, with thanks to Dave Hull\nVersion 1.8: Added support for full path extraction, written by Kristinn Gudjonsson\nVersion 1.9: Added support for csv timeline output\nVersion 1.10: Just for Tom\nVersion 1.11: Fixed TSK bodyfile output\nVersion 1.12: Fix orphan file detection issue that caused recursion error (4/18/2013)\nVersion 1.13: Changed from walking all sequence numbers to pulling sequence number from MFT. Previous approach did not handle\ngaps well\nVersion 1.14: Made -o output optional if -b is specified. (Either/or)\nVersion 1.15: Added file size (real, not allocated) to bodyfile.\nAdded bodyfile option to include fullpath + filename rather than just filename\nAdded bodyfile option to use STD_INFO timestamps rather than FN timestamps\n\n\nVersion 2 history is in CHANGES.txt\n\n\n\n\n\n\nInspiration\n===========\nMy original inspiration was a combination of MFT Ripper (thus the current output format) and the\nSANS 508.1 study guide. I couldn't bear to read about NTFS structures again,\nparticularly since the information didn't \"stick\". I also wanted to learn Python\nso I figured that using it to tear apart the MFT file was a reasonably sized\nproject.\n\nMany of the variable names are taken directly from Brian Carrier's The Sleuth Kit. His code, plus his\nbook \"File System Forensic Analysis\", was very helpful in my efforts to write this code.\n\nThe output format is almost identical to Mark Menz's MFT Ripper. His tool really inspired me to learn\nmore about the structure of the MFT and to learn what additional information I could glean from\nthe data.\n\nI also am getting much more interested in timeline analysis and figured that really understanding the\nthe MFT and having a tool that could parse it might serve as a good foundation\nfor further research in that area.\n\n\nFuture work\n===========\n\n1) Figure out how to write the CSV file in a manner that forces Excel to interpret the date/time\nfields as text. If you add the .csv extension Excel will open the file without invoking the import\nwizard and the date fields are treated as \"General\" and the date is chopped leaving just the time.\n2) Add version switch\n3) Add \"mftr\" switch - produce MFT Ripper compatible output\n4) Add \"extract\" switch - extract or work on live MFT file\n5) Finish parsing all possible attributes\n6) Look into doing more timeline analysis with the information\n7) Improve the documentation so I can use the structures as a reference and reuse the code more effectively\n8) Clean up the code and, in particular, follow standard naming conventions\n9) There are two MFT entry flags that appear that I can't determine the significance of. These appear in\nthe output as Unknown1 and Unknown2\n10) Parse filename based on 'nspace' value in FN structure\n11) Test it and ensure that it works on all major Windows OS versions\n12) Output HTML as well as CSV\n13) If you specify a bad input filename and a good output filename, you get an\nerror about the output filename.\n\n\nUseful Documentation\n====================\n\n1) http://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/eddsalkield/analyzeMFT3", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "analyzeMFT3", "package_url": "https://pypi.org/project/analyzeMFT3/", "platform": "", "project_url": "https://pypi.org/project/analyzeMFT3/", "project_urls": {"Homepage": "http://github.com/eddsalkield/analyzeMFT3"}, "release_url": "https://pypi.org/project/analyzeMFT3/3.0.0/", "requires_dist": null, "requires_python": "", "summary": "Analyze the $MFT from a NTFS filesystem.", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>analyzeMFT.py is designed to fully parse the MFT file from an NTFS filesystem\nand present the results as accurately as possible in multiple formats.</p>\n<p>Now using Python3!</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You should now be able to install analyzeMFT with pip:</p>\n<blockquote>\npip install analyzeMFT</blockquote>\n<p>Alternatively:</p>\n<blockquote>\ngit clone <a href=\"https://github.com/dkovar/analyzeMFT.git\" rel=\"nofollow\">https://github.com/dkovar/analyzeMFT.git</a>\ncd analyzeMFT\npython setup.py install (or, just run it from that directory)</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Usage: analyzeMFT.py [options]</p>\n<dl>\n<dt>Options:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--version</span></kbd></td>\n<td>report version and exit</td></tr>\n</tbody>\n</table>\n</dd>\n</dl>\n<p>File input options:</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-f <var>FILE</var></span>, <span class=\"option\">--file=<var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>read MFT from FILE</td></tr>\n</tbody>\n</table>\n</blockquote>\n<p>File output options:</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-o <var>FILE</var></span>, <span class=\"option\">--output=<var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>write results to FILE</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c <var>FILE</var></span>, <span class=\"option\">--csvtimefile=<var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>write CSV format timeline file</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-b <var>FILE</var></span>, <span class=\"option\">--bodyfile=<var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>write MAC information to bodyfile</td></tr>\n</tbody>\n</table>\n</blockquote>\n<p>Options specific to body files:</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">--bodystd</span></kbd></td>\n<td>Use STD_INFO timestamps for body file rather than FN\ntimestamps</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--bodyfull</span></kbd></td>\n<td>Use full path name + filename rather than just\nfilename</td></tr>\n</tbody>\n</table>\n</blockquote>\n<p>Other options:</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-a</span>, <span class=\"option\">--anomaly</span></kbd></td>\n<td>turn on anomaly detection</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-l</span>, <span class=\"option\">--localtz</span></kbd></td>\n<td>report times using local timezone</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-e</span>, <span class=\"option\">--excel</span></kbd></td>\n<td>print date/time in Excel friendly format</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d</span>, <span class=\"option\">--debug</span></kbd></td>\n<td>turn on debugging output</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-s</span>, <span class=\"option\">--saveinmemory</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Save a copy of the decoded MFT in memory. Do not use\nfor very large MFTs</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-p</span>, <span class=\"option\">--progress</span></kbd></td>\n<td>Show systematic progress reports.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-w</span>, <span class=\"option\">--windows-path</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Use windows path separator when constructing the filepath instead of linux</td></tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div id=\"output\">\n<h2>Output</h2>\n<p>analyzeMFT can produce output in CSV or bodyfile format.</p>\n<div id=\"csv-output\">\n<h3>CSV output</h3>\n<p>The output is currently written in CSV format. Due to the fact that Excel\nautomatically determines the type of data in a column, it is recommended that\nyou write the output to a file without the .csv extension, open it in Excel, and\nset all the columns to \u201cText\u201d rather than \u201cGeneral\u201d when the import wizard\nstarts. Failure to do so will result in Excel formatting the columns in a way\nthat misrepresents the data.</p>\n<p>I could pad the data in such a way that forces Excel to set the column type correctly\nbut this might break other tools.</p>\n<p>GUI:\nYou can turn off all the GUI dependencies by setting the noGUI flag to \u2018True\u2019. This is for installations that don\u2019t want to install the tk/tcl libraries.</p>\n</div>\n</div>\n<div id=\"update-history\">\n<h2>Update History</h2>\n<p>[See CHANGES.txt]</p>\n<p>Version 2.0.4:Minor tweaks to support external programs\nVersion 2.0.3:Restructured to support PyPi (pip)\nVersion 2.0.2:De-OOP\u2019d MFT record parsing to reduce memory consumption\nVersion 2.0.1:Added L2T CSV and body file support back in, fixed some minor bugs along the way.\nMade full file path calculation more efficient\nVersion 2.0.0 Restructured layout to turn it into a module.\nMade it more OOP.\nImproved error handling and corrupt record detection</p>\n<p>\u2014\u2014 Version 1 history follows \u2014\u2014</p>\n<p>Version 1.0: Initial release\nVersion 1.1: Split parent folder reference and sequence into two fields. I\u2019m still trying to figure out the\nsignificance of the parent folder sequence number, but I\u2019m convinced that what some documentation\nrefers to as the parent folder record number is really two values - the parent folder record number\nand the parent folder sequence number.\nVersion 1.2: Fixed problem with non-printable characters in filenames. Any Unicode character is legal in a\nfilename, including newlines. This presented some problems in my output. Characters that do not\nrender well are now converted to hex and a note is added to the Notes column indicating this.\n(I\u2019ve learned a lot about Unicode since I first wrote this.)\nAdded \u201ccompile time\u201d flag to turn off the inclusion of any GUI related modules and libraries\nfor systems missing tk/tcl support. (Set noGUI to True in the code)\nVersion 1.3: Added new column to hold log entries relating to each record. For example, a note stating that\nsome characters in the filename were converted to hex as they could not be printed.\nVersion 1.4: Credit: Spencer Lynch. I was misusing the flags field in the MFT header. The first bit is\nActive/Inactive. The second bit is File/Folder.\nVersion 1.5: Fixed date/time reporting. I wasn\u2019t reporting useconds at all.\nAdded anomaly detection. Adds two columns:\nstd-fn-shift:  If Y, entry\u2019s FN create time is after the STD create time\nusec-zero: If Y, entry\u2019s STD create time\u2019s usec value is zero\nVersion 1.6: Various bug fixes\nVersion 1.7: Bodyfile support, with thanks to Dave Hull\nVersion 1.8: Added support for full path extraction, written by Kristinn Gudjonsson\nVersion 1.9: Added support for csv timeline output\nVersion 1.10: Just for Tom\nVersion 1.11: Fixed TSK bodyfile output\nVersion 1.12: Fix orphan file detection issue that caused recursion error (4/18/2013)\nVersion 1.13: Changed from walking all sequence numbers to pulling sequence number from MFT. Previous approach did not handle\ngaps well\nVersion 1.14: Made -o output optional if -b is specified. (Either/or)\nVersion 1.15: Added file size (real, not allocated) to bodyfile.\nAdded bodyfile option to include fullpath + filename rather than just filename\nAdded bodyfile option to use STD_INFO timestamps rather than FN timestamps</p>\n<p>Version 2 history is in CHANGES.txt</p>\n</div>\n<div id=\"inspiration\">\n<h2>Inspiration</h2>\n<p>My original inspiration was a combination of MFT Ripper (thus the current output format) and the\nSANS 508.1 study guide. I couldn\u2019t bear to read about NTFS structures again,\nparticularly since the information didn\u2019t \u201cstick\u201d. I also wanted to learn Python\nso I figured that using it to tear apart the MFT file was a reasonably sized\nproject.</p>\n<p>Many of the variable names are taken directly from Brian Carrier\u2019s The Sleuth Kit. His code, plus his\nbook \u201cFile System Forensic Analysis\u201d, was very helpful in my efforts to write this code.</p>\n<p>The output format is almost identical to Mark Menz\u2019s MFT Ripper. His tool really inspired me to learn\nmore about the structure of the MFT and to learn what additional information I could glean from\nthe data.</p>\n<p>I also am getting much more interested in timeline analysis and figured that really understanding the\nthe MFT and having a tool that could parse it might serve as a good foundation\nfor further research in that area.</p>\n</div>\n<div id=\"future-work\">\n<h2>Future work</h2>\n<p>1) Figure out how to write the CSV file in a manner that forces Excel to interpret the date/time\nfields as text. If you add the .csv extension Excel will open the file without invoking the import\nwizard and the date fields are treated as \u201cGeneral\u201d and the date is chopped leaving just the time.\n2) Add version switch\n3) Add \u201cmftr\u201d switch - produce MFT Ripper compatible output\n4) Add \u201cextract\u201d switch - extract or work on live MFT file\n5) Finish parsing all possible attributes\n6) Look into doing more timeline analysis with the information\n7) Improve the documentation so I can use the structures as a reference and reuse the code more effectively\n8) Clean up the code and, in particular, follow standard naming conventions\n9) There are two MFT entry flags that appear that I can\u2019t determine the significance of. These appear in\nthe output as Unknown1 and Unknown2\n10) Parse filename based on \u2018nspace\u2019 value in FN structure\n11) Test it and ensure that it works on all major Windows OS versions\n12) Output HTML as well as CSV\n13) If you specify a bad input filename and a good output filename, you get an\nerror about the output filename.</p>\n</div>\n<div id=\"useful-documentation\">\n<h2>Useful Documentation</h2>\n<ol>\n<li><a href=\"http://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf\" rel=\"nofollow\">http://dubeyko.com/development/FileSystems/NTFS/ntfsdoc.pdf</a></li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 5556091, "releases": {"3.0.0": [{"comment_text": "", "digests": {"md5": "0ddf6d44e440fb0a236cdeff12ccda62", "sha256": "e79e1803e1f95ad87c26da2d44e8cfa581c3aa767ecd4e9603031742b4a26654"}, "downloads": -1, "filename": "analyzeMFT3-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0ddf6d44e440fb0a236cdeff12ccda62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16871, "upload_time": "2019-07-19T12:08:19", "upload_time_iso_8601": "2019-07-19T12:08:19.758303Z", "url": "https://files.pythonhosted.org/packages/38/25/47f683d1dbfa6af149ca7f5ceeed9273f55600b5da0ed5adcfad5c573a70/analyzeMFT3-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8337bc01d0ec3701891c966607ffccf", "sha256": "95f5a3ff7a9a05019ff032cc77ad81ff43304024504369405cdb1a7b362bdc17"}, "downloads": -1, "filename": "analyzeMFT3-3.0.0.tar.gz", "has_sig": false, "md5_digest": "f8337bc01d0ec3701891c966607ffccf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16409, "upload_time": "2019-07-19T12:08:22", "upload_time_iso_8601": "2019-07-19T12:08:22.566792Z", "url": "https://files.pythonhosted.org/packages/c1/98/f34dca742e6ce3dd0ea451f6dc9c9fed10117d8d5a22a7646ba017dcdccb/analyzeMFT3-3.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ddf6d44e440fb0a236cdeff12ccda62", "sha256": "e79e1803e1f95ad87c26da2d44e8cfa581c3aa767ecd4e9603031742b4a26654"}, "downloads": -1, "filename": "analyzeMFT3-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0ddf6d44e440fb0a236cdeff12ccda62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16871, "upload_time": "2019-07-19T12:08:19", "upload_time_iso_8601": "2019-07-19T12:08:19.758303Z", "url": "https://files.pythonhosted.org/packages/38/25/47f683d1dbfa6af149ca7f5ceeed9273f55600b5da0ed5adcfad5c573a70/analyzeMFT3-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8337bc01d0ec3701891c966607ffccf", "sha256": "95f5a3ff7a9a05019ff032cc77ad81ff43304024504369405cdb1a7b362bdc17"}, "downloads": -1, "filename": "analyzeMFT3-3.0.0.tar.gz", "has_sig": false, "md5_digest": "f8337bc01d0ec3701891c966607ffccf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16409, "upload_time": "2019-07-19T12:08:22", "upload_time_iso_8601": "2019-07-19T12:08:22.566792Z", "url": "https://files.pythonhosted.org/packages/c1/98/f34dca742e6ce3dd0ea451f6dc9c9fed10117d8d5a22a7646ba017dcdccb/analyzeMFT3-3.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:16 2020"}