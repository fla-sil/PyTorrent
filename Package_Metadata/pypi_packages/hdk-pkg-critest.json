{"info": {"author": "He Dekun", "author_email": "hede0001@e.ntu.edu.sg", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# hdk_pkg_critest\n\nThis is a demo package for CRI test. \nThis package is for processing kline data and running strategy backtest. \n\n\n## 1 Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install hdk_pkg_critest.\n\n```bash\npip install hdk_pkg_critest\n```\n\n\n## 2 Quick Start\n\nThe package can be run on shell or CMD, but better to use an IDE (Try [Spyder](https://www.spyder-ide.org/) that check the outputs easily). \n\nThis chapter gives a simple demo of doing a momentum strategy backtest using the package. All the codes can also be found in `demo.py`.\n\nPlease refer to next chapter for detailed documentation on the package.\n\n### STEP 1: Import the Package and Initialization\n\nFirst, let's import the package, and initialize four core classes. \nOnce you initialize an instance of a class, you can easily call methods (functions) from it by doing this: `return = instance.function(Args..)`\n\n```python\nfrom hdk_pkg import critest\n\nsampledata = critest.SampleData()    # a class for fetching the sample data set\nprocess = critest.Process()    # a class for processing data\nbacktest = critest.BackTest()    # a class for running backtesting\nplotting = critest.Plotting()    # a class for Plotting the backtest results\n```\n\n### STEP 2: Get a Sample Data Set for Test\n\nThen, Let's use the `get_sampledata()` from the `sampledata` to get a sample data set. Use `data.head()` to check the data.\n\n```python\ndata = sampledata.get_SampleData()    # a time-series data set of a future's kline \n\ndata.head()    # check what the data set looks like\n```\n\n### STEP 3: Process the Data to Generate Factors\n\nThere are some kline process funcions in the class `process`. You can call and apply them on the data. For a momentum strategy, we need to process the kline as below:\n\n```python\n#1 transfer the 1min kline to 60mins kline:\ndata_60 = process.chg_Granularity(data_1min=data, granularity=60)\ndata_60.head() \n\n#2 generate HA kline:\ndata_HA = process.get_BarHA(Open=data_60.open, High=data_60.high, Low=data_60.low, Close=data_60.close)\ndata_HA.head() \n\n#3 generate PS factor:\ndata_PS = process.get_BarPS(HA_Open=data_HA.HA_Open, HA_Close=data_HA.HA_Close, HA_PS_Lookback=20, PS_pct_level=[0.35, 0.5, 0.95, 0.97], combine=False)\ndata_PS.head() \n\n#4 generate CT factor:\ndata_CT = process.get_BarCT(HA_Open=data_HA.HA_Open, HA_Close=data_HA.HA_Close, HA_PS=data_PS, bar_pass_cut=2, ps_pass_cut=2)\ndata_CT.head() \n```\n\n### STEP 4: Generate Buy Sell Indicators and Do Backtest\n\nNow we should use it to generate buy sell indicators. This should follow some specific rules based on different strategies. \n(I have only built in one strategy rule called \"momentum\". In fact, other strategies can be add inside the package easily.) \n\nCall `backtest_Momentum()` from class `backtest`, then you will get a return as matrix (two-dimensional array). \nThe buy sell indicator is in 4th column. We can use it to do backtest by calling `get_PnL()`.\n\n```python\nbacktest_Momentum = backtest.backtest_Momentum(data_PS=data_PS, data_CT=data_CT.bar_idx_live)\nprint (backtest_Momentum)    # see the return matrix\n\nresult = backtest.get_PnL(close=data_60.close, indicator=backtest_Momentum[:,2], cost=0.15/100, sharpe_frequency=365*2, beta=1)\nprint (result)    # see the backtest result\n```\n\n### STEP 5: Plot the Backtest Result\n\nFinally, you can plot a custom image based on the backtest result.\n\n```python\nplot1 = plotting.plot_type1(Open=data_60.open, High=data_60.high, Low=data_60.low, Close=data_60.close, indicator=backtest_Momentum[:,2], result=result)\n```\n\n\n## 3 Documentation for Functions\n\n### SampleData: get_SampleData()\n\n```python\nre = sampledata.get_sampledata()\n\"\"\"\nThis function is for fetching the sample data set.\n\nArgs: None\n\nReturns: Returns a Dataframe with a time index and 5 coumns, inclding:\n         (1) open: Float. \n         (2) high: Float. \n         (3) low: Float. \n         (4) close: Float. \n         (5) volume: Float. \n\"\"\"\n```\n\n### Process: chg_Granularity()\n\n```python\nre = process.chg_Granularity(data_1min, granularity)\n\"\"\"\nThis function is for changing the granularity of kline from 1min to N mins.\n\nArgs: \n     (1) data_1min: Dataframe. 1min kline data with column names as 'open', 'high', 'low', 'close' and 'volume'; with index by time.\n     (2) granularity: Int. The desired time granularity, minute based, for example, if you want hour kline, set granularity=60.\n\nReturns: Returns a Dataframe with a adjusted-time index and 5 coumns, inclding:\n        (1) open: Float. \n        (2) high: Float. \n        (3) low: Float. \n        (4) close: Float. \n        (5) volume: Float. \n\"\"\"\n```\n\n### Process: get_BarHA()\n\n```python\nre = process.get_BarHA(Open, High, Low, Close)\n\"\"\"\nThis function is for transferring normal Bar to Heikin Ashi Bar.\n\nArgs: \n     (1) Open: Dataframe with values in Float type.\n     (2) High: Dataframe with values in Float type.\n     (3) Low: Dataframe with values in Float type.\n     (4) Close: Dataframe with values in Float type.\n\nReturns: Returns a Dataframe with 4 coumns, inclding:\n        (1) HA_Open: Float. \n        (2) HA_High: Float.\n        (3) HA_Low: Float. \n        (4) HA_Close: Float. \n\"\"\"\n```\n\n### Process: get_BarPS()\n\n```python\nre = process.get_BarPS(HA_Open, HA_Close, HA_PS_Lookback, PS_pct_level=[0.35, 0.5, 0.95, 0.97], combine=False)\n\"\"\"\nThis function is for calculating price trend number of HA bar, by looking back HA_PS_Lookback HA bars,\naccording to the previous bars' distribution, find the range (i.e. -4,-3,-2,-1,0,1,2,3,4) of the current bar.\n\nArgs: \n     (1) HA_Open: Dataframe with values in Float type.\n     (2) HA_Close: DataFrame with values in Float type.\n     (3) HA_PS_Lookback: int, number of bars to lookback.\n     (4) PS_pct_level: list, optional, default value is [0.35, 0.5, 0.95, 0.97]\n     (5) combine: boolean, optional, default value is False, calculating the up bar and down bar separately, \n                  while combine=True calculates the up bar and down bar combined.\n\nReturns: Returns a Dataframe with 1 coumns, inclding:\n        (1) HA_PS: Int. \n\n\"\"\"\n```\n\n### Process: get_BarCT()\n\n```python\nre = process.get_BarCT(HA_Open, HA_Close, HA_PS, bar_pass_cut=2, ps_pass_cut=2)\n\"\"\"\nThis function is for counting indices of continuously up or down bar (skipping some small-ps bar).\n\nArgs: \n     (1) HA_Open, HA_Close, HA_PS, all are DataFrame.\n     (2) bar_pass_cut: int, optional, default is 2, number of small opposite bars we can skip.\n     (3) ps_pass_cut: int, optional, default is 2, ps cut level of oppsite bar we can skip.\n\nReturns: Returns a Dataframe with 3 coumns, inclding:\n        (1) bar_len: HA bar trend cycle length, up trend being positive number, while down trend being negative.\n        (2) bar_idx: count bar index, always starts from 1 or -1, would use future data to update current count index. (Use this carefully)\n        (3) bar_idx_live: cout bar index, may start from numbers larger than 1, would not use furture data.\n\n\"\"\"\n```\n### BackTest: backtest_Momentum()\n\n```python\nre = backtest.backtest_Momentum(data_PS, data_CT)\n\"\"\"\nThis function is for generating the buy sell indicator under momentum strategy rules.\n\nArgs: \n     (1) data_PS: 1 column Dataframe with values in Int type.\n     (2) data_CT: 1 column Dataframe with values in Int type.\n\nReturns: Returns a array with 4 columns, inclding:\n        (1) data_PS: Int. Input values\n        (2) data_CT: Int. Input values\n        (3) indicator: Int. The buy sell indicator\n        (4) buysell type: Int. Indicate the rule number that the buy sell indicator is followed.\n\n\"\"\"\n```\n### BackTest: get_PnL()\n\n```python\nre = backtest.get_PnL(close, indicator, cost, sharpe_frequency, beta=1)\n\"\"\"\nThis function is for calculating backtest outputs.\n\nArgs: \n     (1) close: array, close price in time series.\n     (2) indicator: array, buy sell indicator in time series.\n     (3) cost: float, cost percentage.\n     (4) sharpe_frequency: int, number of observations in one year\n\nReturns: Returns a list with 3 elements, inclding:\n        (1) Return: List. Return list.\n        (2) Trade_number: Int. Times have trade.\n        (3) Annual_Sharpe: Float. Annual sharpe ratio.\n\n\"\"\"\n```\n### Plotting: plot_type1()\n\n```python\nre = plotting.plot_type1(Open, High, Low, Close, indicator, result)\n\"\"\"\nThis function is for plotting the backtest result in custom type 1.\n\nArgs: \n     (1) Open: Dataframe with values in Float type.\n     (2) High: Dataframe with values in Float type.\n     (3) Low: Dataframe with values in Float type.\n     (4) Close: Dataframe with values in Float type.\n     (5) indicator: Array. The buy sell indicator.\n     (6) result: List. The backtest result.\n\nReturns: Returns a figure.\n\"\"\"\n```\n\n\n## 4 Author\nHe Dekun\n\n## 5 License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/HDKidd/hdk-pkg-critest", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "hdk-pkg-critest", "package_url": "https://pypi.org/project/hdk-pkg-critest/", "platform": "", "project_url": "https://pypi.org/project/hdk-pkg-critest/", "project_urls": {"Homepage": "https://github.com/HDKidd/hdk-pkg-critest"}, "release_url": "https://pypi.org/project/hdk-pkg-critest/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A small example package for CRI PMT test.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>hdk_pkg_critest</h1>\n<p>This is a demo package for CRI test.\nThis package is for processing kline data and running strategy backtest.</p>\n<h2>1 Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install hdk_pkg_critest.</p>\n<pre>pip install hdk_pkg_critest\n</pre>\n<h2>2 Quick Start</h2>\n<p>The package can be run on shell or CMD, but better to use an IDE (Try <a href=\"https://www.spyder-ide.org/\" rel=\"nofollow\">Spyder</a> that check the outputs easily).</p>\n<p>This chapter gives a simple demo of doing a momentum strategy backtest using the package. All the codes can also be found in <code>demo.py</code>.</p>\n<p>Please refer to next chapter for detailed documentation on the package.</p>\n<h3>STEP 1: Import the Package and Initialization</h3>\n<p>First, let's import the package, and initialize four core classes.\nOnce you initialize an instance of a class, you can easily call methods (functions) from it by doing this: <code>return = instance.function(Args..)</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hdk_pkg</span> <span class=\"kn\">import</span> <span class=\"n\">critest</span>\n\n<span class=\"n\">sampledata</span> <span class=\"o\">=</span> <span class=\"n\">critest</span><span class=\"o\">.</span><span class=\"n\">SampleData</span><span class=\"p\">()</span>    <span class=\"c1\"># a class for fetching the sample data set</span>\n<span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">critest</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">()</span>    <span class=\"c1\"># a class for processing data</span>\n<span class=\"n\">backtest</span> <span class=\"o\">=</span> <span class=\"n\">critest</span><span class=\"o\">.</span><span class=\"n\">BackTest</span><span class=\"p\">()</span>    <span class=\"c1\"># a class for running backtesting</span>\n<span class=\"n\">plotting</span> <span class=\"o\">=</span> <span class=\"n\">critest</span><span class=\"o\">.</span><span class=\"n\">Plotting</span><span class=\"p\">()</span>    <span class=\"c1\"># a class for Plotting the backtest results</span>\n</pre>\n<h3>STEP 2: Get a Sample Data Set for Test</h3>\n<p>Then, Let's use the <code>get_sampledata()</code> from the <code>sampledata</code> to get a sample data set. Use <code>data.head()</code> to check the data.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">sampledata</span><span class=\"o\">.</span><span class=\"n\">get_SampleData</span><span class=\"p\">()</span>    <span class=\"c1\"># a time-series data set of a future's kline </span>\n\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>    <span class=\"c1\"># check what the data set looks like</span>\n</pre>\n<h3>STEP 3: Process the Data to Generate Factors</h3>\n<p>There are some kline process funcions in the class <code>process</code>. You can call and apply them on the data. For a momentum strategy, we need to process the kline as below:</p>\n<pre><span class=\"c1\">#1 transfer the 1min kline to 60mins kline:</span>\n<span class=\"n\">data_60</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">chg_Granularity</span><span class=\"p\">(</span><span class=\"n\">data_1min</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span> \n\n<span class=\"c1\">#2 generate HA kline:</span>\n<span class=\"n\">data_HA</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_BarHA</span><span class=\"p\">(</span><span class=\"n\">Open</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">,</span> <span class=\"n\">High</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">high</span><span class=\"p\">,</span> <span class=\"n\">Low</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">Close</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">)</span>\n<span class=\"n\">data_HA</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span> \n\n<span class=\"c1\">#3 generate PS factor:</span>\n<span class=\"n\">data_PS</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_BarPS</span><span class=\"p\">(</span><span class=\"n\">HA_Open</span><span class=\"o\">=</span><span class=\"n\">data_HA</span><span class=\"o\">.</span><span class=\"n\">HA_Open</span><span class=\"p\">,</span> <span class=\"n\">HA_Close</span><span class=\"o\">=</span><span class=\"n\">data_HA</span><span class=\"o\">.</span><span class=\"n\">HA_Close</span><span class=\"p\">,</span> <span class=\"n\">HA_PS_Lookback</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">PS_pct_level</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.35</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">,</span> <span class=\"mf\">0.97</span><span class=\"p\">],</span> <span class=\"n\">combine</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">data_PS</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span> \n\n<span class=\"c1\">#4 generate CT factor:</span>\n<span class=\"n\">data_CT</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_BarCT</span><span class=\"p\">(</span><span class=\"n\">HA_Open</span><span class=\"o\">=</span><span class=\"n\">data_HA</span><span class=\"o\">.</span><span class=\"n\">HA_Open</span><span class=\"p\">,</span> <span class=\"n\">HA_Close</span><span class=\"o\">=</span><span class=\"n\">data_HA</span><span class=\"o\">.</span><span class=\"n\">HA_Close</span><span class=\"p\">,</span> <span class=\"n\">HA_PS</span><span class=\"o\">=</span><span class=\"n\">data_PS</span><span class=\"p\">,</span> <span class=\"n\">bar_pass_cut</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">ps_pass_cut</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">data_CT</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span> \n</pre>\n<h3>STEP 4: Generate Buy Sell Indicators and Do Backtest</h3>\n<p>Now we should use it to generate buy sell indicators. This should follow some specific rules based on different strategies.\n(I have only built in one strategy rule called \"momentum\". In fact, other strategies can be add inside the package easily.)</p>\n<p>Call <code>backtest_Momentum()</code> from class <code>backtest</code>, then you will get a return as matrix (two-dimensional array).\nThe buy sell indicator is in 4th column. We can use it to do backtest by calling <code>get_PnL()</code>.</p>\n<pre><span class=\"n\">backtest_Momentum</span> <span class=\"o\">=</span> <span class=\"n\">backtest</span><span class=\"o\">.</span><span class=\"n\">backtest_Momentum</span><span class=\"p\">(</span><span class=\"n\">data_PS</span><span class=\"o\">=</span><span class=\"n\">data_PS</span><span class=\"p\">,</span> <span class=\"n\">data_CT</span><span class=\"o\">=</span><span class=\"n\">data_CT</span><span class=\"o\">.</span><span class=\"n\">bar_idx_live</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">backtest_Momentum</span><span class=\"p\">)</span>    <span class=\"c1\"># see the return matrix</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">backtest</span><span class=\"o\">.</span><span class=\"n\">get_PnL</span><span class=\"p\">(</span><span class=\"n\">close</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">,</span> <span class=\"n\">indicator</span><span class=\"o\">=</span><span class=\"n\">backtest_Momentum</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">cost</span><span class=\"o\">=</span><span class=\"mf\">0.15</span><span class=\"o\">/</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">sharpe_frequency</span><span class=\"o\">=</span><span class=\"mi\">365</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>    <span class=\"c1\"># see the backtest result</span>\n</pre>\n<h3>STEP 5: Plot the Backtest Result</h3>\n<p>Finally, you can plot a custom image based on the backtest result.</p>\n<pre><span class=\"n\">plot1</span> <span class=\"o\">=</span> <span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plot_type1</span><span class=\"p\">(</span><span class=\"n\">Open</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">,</span> <span class=\"n\">High</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">high</span><span class=\"p\">,</span> <span class=\"n\">Low</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">Close</span><span class=\"o\">=</span><span class=\"n\">data_60</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">,</span> <span class=\"n\">indicator</span><span class=\"o\">=</span><span class=\"n\">backtest_Momentum</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">result</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<h2>3 Documentation for Functions</h2>\n<h3>SampleData: get_SampleData()</h3>\n<pre><span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">sampledata</span><span class=\"o\">.</span><span class=\"n\">get_sampledata</span><span class=\"p\">()</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This function is for fetching the sample data set.</span>\n\n<span class=\"sd\">Args: None</span>\n\n<span class=\"sd\">Returns: Returns a Dataframe with a time index and 5 coumns, inclding:</span>\n<span class=\"sd\">         (1) open: Float. </span>\n<span class=\"sd\">         (2) high: Float. </span>\n<span class=\"sd\">         (3) low: Float. </span>\n<span class=\"sd\">         (4) close: Float. </span>\n<span class=\"sd\">         (5) volume: Float. </span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Process: chg_Granularity()</h3>\n<pre><span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">chg_Granularity</span><span class=\"p\">(</span><span class=\"n\">data_1min</span><span class=\"p\">,</span> <span class=\"n\">granularity</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This function is for changing the granularity of kline from 1min to N mins.</span>\n\n<span class=\"sd\">Args: </span>\n<span class=\"sd\">     (1) data_1min: Dataframe. 1min kline data with column names as 'open', 'high', 'low', 'close' and 'volume'; with index by time.</span>\n<span class=\"sd\">     (2) granularity: Int. The desired time granularity, minute based, for example, if you want hour kline, set granularity=60.</span>\n\n<span class=\"sd\">Returns: Returns a Dataframe with a adjusted-time index and 5 coumns, inclding:</span>\n<span class=\"sd\">        (1) open: Float. </span>\n<span class=\"sd\">        (2) high: Float. </span>\n<span class=\"sd\">        (3) low: Float. </span>\n<span class=\"sd\">        (4) close: Float. </span>\n<span class=\"sd\">        (5) volume: Float. </span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Process: get_BarHA()</h3>\n<pre><span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_BarHA</span><span class=\"p\">(</span><span class=\"n\">Open</span><span class=\"p\">,</span> <span class=\"n\">High</span><span class=\"p\">,</span> <span class=\"n\">Low</span><span class=\"p\">,</span> <span class=\"n\">Close</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This function is for transferring normal Bar to Heikin Ashi Bar.</span>\n\n<span class=\"sd\">Args: </span>\n<span class=\"sd\">     (1) Open: Dataframe with values in Float type.</span>\n<span class=\"sd\">     (2) High: Dataframe with values in Float type.</span>\n<span class=\"sd\">     (3) Low: Dataframe with values in Float type.</span>\n<span class=\"sd\">     (4) Close: Dataframe with values in Float type.</span>\n\n<span class=\"sd\">Returns: Returns a Dataframe with 4 coumns, inclding:</span>\n<span class=\"sd\">        (1) HA_Open: Float. </span>\n<span class=\"sd\">        (2) HA_High: Float.</span>\n<span class=\"sd\">        (3) HA_Low: Float. </span>\n<span class=\"sd\">        (4) HA_Close: Float. </span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Process: get_BarPS()</h3>\n<pre><span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_BarPS</span><span class=\"p\">(</span><span class=\"n\">HA_Open</span><span class=\"p\">,</span> <span class=\"n\">HA_Close</span><span class=\"p\">,</span> <span class=\"n\">HA_PS_Lookback</span><span class=\"p\">,</span> <span class=\"n\">PS_pct_level</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.35</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">,</span> <span class=\"mf\">0.97</span><span class=\"p\">],</span> <span class=\"n\">combine</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This function is for calculating price trend number of HA bar, by looking back HA_PS_Lookback HA bars,</span>\n<span class=\"sd\">according to the previous bars' distribution, find the range (i.e. -4,-3,-2,-1,0,1,2,3,4) of the current bar.</span>\n\n<span class=\"sd\">Args: </span>\n<span class=\"sd\">     (1) HA_Open: Dataframe with values in Float type.</span>\n<span class=\"sd\">     (2) HA_Close: DataFrame with values in Float type.</span>\n<span class=\"sd\">     (3) HA_PS_Lookback: int, number of bars to lookback.</span>\n<span class=\"sd\">     (4) PS_pct_level: list, optional, default value is [0.35, 0.5, 0.95, 0.97]</span>\n<span class=\"sd\">     (5) combine: boolean, optional, default value is False, calculating the up bar and down bar separately, </span>\n<span class=\"sd\">                  while combine=True calculates the up bar and down bar combined.</span>\n\n<span class=\"sd\">Returns: Returns a Dataframe with 1 coumns, inclding:</span>\n<span class=\"sd\">        (1) HA_PS: Int. </span>\n\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Process: get_BarCT()</h3>\n<pre><span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">get_BarCT</span><span class=\"p\">(</span><span class=\"n\">HA_Open</span><span class=\"p\">,</span> <span class=\"n\">HA_Close</span><span class=\"p\">,</span> <span class=\"n\">HA_PS</span><span class=\"p\">,</span> <span class=\"n\">bar_pass_cut</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">ps_pass_cut</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This function is for counting indices of continuously up or down bar (skipping some small-ps bar).</span>\n\n<span class=\"sd\">Args: </span>\n<span class=\"sd\">     (1) HA_Open, HA_Close, HA_PS, all are DataFrame.</span>\n<span class=\"sd\">     (2) bar_pass_cut: int, optional, default is 2, number of small opposite bars we can skip.</span>\n<span class=\"sd\">     (3) ps_pass_cut: int, optional, default is 2, ps cut level of oppsite bar we can skip.</span>\n\n<span class=\"sd\">Returns: Returns a Dataframe with 3 coumns, inclding:</span>\n<span class=\"sd\">        (1) bar_len: HA bar trend cycle length, up trend being positive number, while down trend being negative.</span>\n<span class=\"sd\">        (2) bar_idx: count bar index, always starts from 1 or -1, would use future data to update current count index. (Use this carefully)</span>\n<span class=\"sd\">        (3) bar_idx_live: cout bar index, may start from numbers larger than 1, would not use furture data.</span>\n\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>BackTest: backtest_Momentum()</h3>\n<pre><span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">backtest</span><span class=\"o\">.</span><span class=\"n\">backtest_Momentum</span><span class=\"p\">(</span><span class=\"n\">data_PS</span><span class=\"p\">,</span> <span class=\"n\">data_CT</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This function is for generating the buy sell indicator under momentum strategy rules.</span>\n\n<span class=\"sd\">Args: </span>\n<span class=\"sd\">     (1) data_PS: 1 column Dataframe with values in Int type.</span>\n<span class=\"sd\">     (2) data_CT: 1 column Dataframe with values in Int type.</span>\n\n<span class=\"sd\">Returns: Returns a array with 4 columns, inclding:</span>\n<span class=\"sd\">        (1) data_PS: Int. Input values</span>\n<span class=\"sd\">        (2) data_CT: Int. Input values</span>\n<span class=\"sd\">        (3) indicator: Int. The buy sell indicator</span>\n<span class=\"sd\">        (4) buysell type: Int. Indicate the rule number that the buy sell indicator is followed.</span>\n\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>BackTest: get_PnL()</h3>\n<pre><span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">backtest</span><span class=\"o\">.</span><span class=\"n\">get_PnL</span><span class=\"p\">(</span><span class=\"n\">close</span><span class=\"p\">,</span> <span class=\"n\">indicator</span><span class=\"p\">,</span> <span class=\"n\">cost</span><span class=\"p\">,</span> <span class=\"n\">sharpe_frequency</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This function is for calculating backtest outputs.</span>\n\n<span class=\"sd\">Args: </span>\n<span class=\"sd\">     (1) close: array, close price in time series.</span>\n<span class=\"sd\">     (2) indicator: array, buy sell indicator in time series.</span>\n<span class=\"sd\">     (3) cost: float, cost percentage.</span>\n<span class=\"sd\">     (4) sharpe_frequency: int, number of observations in one year</span>\n\n<span class=\"sd\">Returns: Returns a list with 3 elements, inclding:</span>\n<span class=\"sd\">        (1) Return: List. Return list.</span>\n<span class=\"sd\">        (2) Trade_number: Int. Times have trade.</span>\n<span class=\"sd\">        (3) Annual_Sharpe: Float. Annual sharpe ratio.</span>\n\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Plotting: plot_type1()</h3>\n<pre><span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">plot_type1</span><span class=\"p\">(</span><span class=\"n\">Open</span><span class=\"p\">,</span> <span class=\"n\">High</span><span class=\"p\">,</span> <span class=\"n\">Low</span><span class=\"p\">,</span> <span class=\"n\">Close</span><span class=\"p\">,</span> <span class=\"n\">indicator</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This function is for plotting the backtest result in custom type 1.</span>\n\n<span class=\"sd\">Args: </span>\n<span class=\"sd\">     (1) Open: Dataframe with values in Float type.</span>\n<span class=\"sd\">     (2) High: Dataframe with values in Float type.</span>\n<span class=\"sd\">     (3) Low: Dataframe with values in Float type.</span>\n<span class=\"sd\">     (4) Close: Dataframe with values in Float type.</span>\n<span class=\"sd\">     (5) indicator: Array. The buy sell indicator.</span>\n<span class=\"sd\">     (6) result: List. The backtest result.</span>\n\n<span class=\"sd\">Returns: Returns a figure.</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h2>4 Author</h2>\n<p>He Dekun</p>\n<h2>5 License</h2>\n<p><a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6116362, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4e1fb0727ceb4acc3e1d40d15ee4872f", "sha256": "3f11f5a0681eecfb9e73356f44005ae944adaefbdcbbdcd5974cbcd6bc19b975"}, "downloads": -1, "filename": "hdk_pkg_critest-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e1fb0727ceb4acc3e1d40d15ee4872f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2419, "upload_time": "2019-11-11T03:17:18", "upload_time_iso_8601": "2019-11-11T03:17:18.930225Z", "url": "https://files.pythonhosted.org/packages/b7/90/ec4a6f723950e6d54481aa25e126b501990ce0c5c4a10a4fc22c52fea27f/hdk_pkg_critest-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "871c21022b8ce3c5538809438f1e97b5", "sha256": "aeb75c8a902461f7a50f80c348b15d6fd8c71407d6d19f2b902977dc7dd5555a"}, "downloads": -1, "filename": "hdk-pkg-critest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "871c21022b8ce3c5538809438f1e97b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1219, "upload_time": "2019-11-11T03:17:21", "upload_time_iso_8601": "2019-11-11T03:17:21.082861Z", "url": "https://files.pythonhosted.org/packages/2a/29/b0e12cb217630cf9e981649b32f1ee44c3657cb15ea22242171d51532e40/hdk-pkg-critest-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a45dc862ea2d4aa610e086dcb2e97973", "sha256": "bfd23daaba2573bc66863267628d4b1725358e606bc5fe4bf4f943a0b44c2af7"}, "downloads": -1, "filename": "hdk_pkg_critest-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a45dc862ea2d4aa610e086dcb2e97973", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2639, "upload_time": "2019-11-11T03:28:45", "upload_time_iso_8601": "2019-11-11T03:28:45.535139Z", "url": "https://files.pythonhosted.org/packages/4f/d7/ad14c52b588b29c254bd15c978f32768e63f4ebd6a4962abe3b6197b2dc0/hdk_pkg_critest-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fc59fec5c86f55b400ff443c5b178a0", "sha256": "e15294583cf2ece0f80f3d8826340ca7141a631241b1938a6c681628a77144bb"}, "downloads": -1, "filename": "hdk-pkg-critest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3fc59fec5c86f55b400ff443c5b178a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1268, "upload_time": "2019-11-11T03:28:48", "upload_time_iso_8601": "2019-11-11T03:28:48.178975Z", "url": "https://files.pythonhosted.org/packages/be/72/52df869efeed9d518a9a07e729f3bde5862c5bfb9c77474581a6f2931ee2/hdk-pkg-critest-0.0.2.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0e1fd3aa1ade0072758abd9ec772c018", "sha256": "ad554325dccdecad6bb4f3a5711927043176fbe36d330a0d7bbf34a2ba24b146"}, "downloads": -1, "filename": "hdk_pkg_critest-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0e1fd3aa1ade0072758abd9ec772c018", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3345, "upload_time": "2019-11-11T08:00:32", "upload_time_iso_8601": "2019-11-11T08:00:32.516642Z", "url": "https://files.pythonhosted.org/packages/a5/49/3454970f445f71c8e7a43a7c953717ad80f5dcd7d7ab74eea5b4350b7e4a/hdk_pkg_critest-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49dc0b7f358f764d5b6fe8ba49eaf51d", "sha256": "01413e5b073b775f0ae2320db3ae50f883600e6282a7a4ea3d671931d7390664"}, "downloads": -1, "filename": "hdk-pkg-critest-0.1.2.tar.gz", "has_sig": false, "md5_digest": "49dc0b7f358f764d5b6fe8ba49eaf51d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1721, "upload_time": "2019-11-11T08:00:36", "upload_time_iso_8601": "2019-11-11T08:00:36.021612Z", "url": "https://files.pythonhosted.org/packages/16/42/9af03a3e123c539f5848c013cdcf2c517aff6cbda978f931e05754580da8/hdk-pkg-critest-0.1.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "9bfed3ea0f28843ba990e60095662372", "sha256": "1041ed29aed95655dd809daad5a0ab631ef850c83a6c36515f267de9c029c8b7"}, "downloads": -1, "filename": "hdk_pkg_critest-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9bfed3ea0f28843ba990e60095662372", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4630, "upload_time": "2019-11-11T10:27:41", "upload_time_iso_8601": "2019-11-11T10:27:41.020975Z", "url": "https://files.pythonhosted.org/packages/7e/41/51ce8bc5fd0df1a2c852a7125b8627b0c150da7374514c6b70e09c7877a2/hdk_pkg_critest-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3c6ae9f55229a459d13f6d1f5608777", "sha256": "be369dc9c62ed40619915da5d14c857d816fd1fd4bf6075faa5131085055945b"}, "downloads": -1, "filename": "hdk_pkg_critest-0.5.0.tar.gz", "has_sig": false, "md5_digest": "f3c6ae9f55229a459d13f6d1f5608777", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3370, "upload_time": "2019-11-11T10:27:42", "upload_time_iso_8601": "2019-11-11T10:27:42.730581Z", "url": "https://files.pythonhosted.org/packages/85/8a/621b371b0529528aa4c99df88d3282809e07e0dcf1b694954cae890a809f/hdk_pkg_critest-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "46a0613aa4afbe7811effccc8da04126", "sha256": "679f02247f85da8d25aee6d59c72060aa1e23078d7a8f2a42e77570070a03d54"}, "downloads": -1, "filename": "hdk_pkg_critest-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "46a0613aa4afbe7811effccc8da04126", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4759, "upload_time": "2019-11-11T10:48:17", "upload_time_iso_8601": "2019-11-11T10:48:17.600900Z", "url": "https://files.pythonhosted.org/packages/80/fc/5d461f0acdbfd868810639099abe32f00ee33cb665aa8842296574cc31ac/hdk_pkg_critest-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6b6df0651fd40f763a10abfe6b50149", "sha256": "50a5baf7fe06fa96f47dee60ffc420bba26a666e952c9af933c57e5db31ebf97"}, "downloads": -1, "filename": "hdk_pkg_critest-0.5.1.tar.gz", "has_sig": false, "md5_digest": "b6b6df0651fd40f763a10abfe6b50149", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3548, "upload_time": "2019-11-11T10:48:18", "upload_time_iso_8601": "2019-11-11T10:48:18.851808Z", "url": "https://files.pythonhosted.org/packages/c0/20/f983aad654c217ef2ba067c516c3bd805f25a16de3d1dcfa47050318f87c/hdk_pkg_critest-0.5.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "d0fdd3082dc5b53e0b25f076937cad3c", "sha256": "0113de643bfe0303754d45ac5aafd1042b7577afa0fccf874e314345b95a4960"}, "downloads": -1, "filename": "hdk_pkg_critest-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d0fdd3082dc5b53e0b25f076937cad3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5936, "upload_time": "2019-11-11T11:13:22", "upload_time_iso_8601": "2019-11-11T11:13:22.191121Z", "url": "https://files.pythonhosted.org/packages/62/68/1141218be64aa673005785c614a8db7ae2954f0699a21ee7d6ce1cef28e0/hdk_pkg_critest-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19541b885e23f065899296c7d6ad003a", "sha256": "e39f896ff67fd88cba67b596a23b24925225a9a8e18e42d150792164771cd6aa"}, "downloads": -1, "filename": "hdk_pkg_critest-1.0.0.tar.gz", "has_sig": false, "md5_digest": "19541b885e23f065899296c7d6ad003a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5161, "upload_time": "2019-11-11T11:13:23", "upload_time_iso_8601": "2019-11-11T11:13:23.564661Z", "url": "https://files.pythonhosted.org/packages/16/53/129985685ffc48d8eab22b799b7fef4393266d2f47eac4722146a94291ae/hdk_pkg_critest-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5eeaa18d106a29d0b0f45b129ccb437a", "sha256": "8b614bb120533ae4c8a10da02942b8de02bd94f0dd5b341234cdc491721aae10"}, "downloads": -1, "filename": "hdk_pkg_critest-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5eeaa18d106a29d0b0f45b129ccb437a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6762, "upload_time": "2019-11-11T11:18:33", "upload_time_iso_8601": "2019-11-11T11:18:33.057794Z", "url": "https://files.pythonhosted.org/packages/fb/52/9bfc92febe91367a8b484774ad6d9259faec69a16e052e3b205ef939e6fe/hdk_pkg_critest-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "652d96eb06514c30db35e7bf05f30f28", "sha256": "a001ac94527f61110132f5233d7f1835baed82714021605516aa78b8aee33dad"}, "downloads": -1, "filename": "hdk_pkg_critest-1.0.1.tar.gz", "has_sig": false, "md5_digest": "652d96eb06514c30db35e7bf05f30f28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5163, "upload_time": "2019-11-11T11:18:34", "upload_time_iso_8601": "2019-11-11T11:18:34.633897Z", "url": "https://files.pythonhosted.org/packages/39/eb/d34598049a7209e145bda98266a67dd82a3fce872e8df28d8285bbe43fcb/hdk_pkg_critest-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5eeaa18d106a29d0b0f45b129ccb437a", "sha256": "8b614bb120533ae4c8a10da02942b8de02bd94f0dd5b341234cdc491721aae10"}, "downloads": -1, "filename": "hdk_pkg_critest-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5eeaa18d106a29d0b0f45b129ccb437a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6762, "upload_time": "2019-11-11T11:18:33", "upload_time_iso_8601": "2019-11-11T11:18:33.057794Z", "url": "https://files.pythonhosted.org/packages/fb/52/9bfc92febe91367a8b484774ad6d9259faec69a16e052e3b205ef939e6fe/hdk_pkg_critest-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "652d96eb06514c30db35e7bf05f30f28", "sha256": "a001ac94527f61110132f5233d7f1835baed82714021605516aa78b8aee33dad"}, "downloads": -1, "filename": "hdk_pkg_critest-1.0.1.tar.gz", "has_sig": false, "md5_digest": "652d96eb06514c30db35e7bf05f30f28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5163, "upload_time": "2019-11-11T11:18:34", "upload_time_iso_8601": "2019-11-11T11:18:34.633897Z", "url": "https://files.pythonhosted.org/packages/39/eb/d34598049a7209e145bda98266a67dd82a3fce872e8df28d8285bbe43fcb/hdk_pkg_critest-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:03 2020"}