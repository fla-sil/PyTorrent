{"info": {"author": "H.C. Chen", "author_email": "hcchen5600@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "peforth\n#######\n\nA programmable python debugger allows you to abruptly setup procedures to investigate your program code on the fly at a breakpoint.\n********************************************************************************************************************************************\n\nYou guys know how to bebug already. We all do.\nBut when it comes to Machine Learning and Tensorflow or the likes, \nthings are getting annoying. A programmable debugger is what in my mind and probably in yours too. One breakpoint to investigate about everything! At this point, you can\nthen test whatever you want, supported by all the power of FORTH.\n\nDebug commands in FORTH syntax\n##############################\n\nSo now we need to choose an interactive UI and its syntax that \nis light weight, reliable and flexible so we won't regret of choosing it \nsomeday, has been there for decades so many people don't need to learn about \nanother new language although we are only to use some debug commands, yet easy \nenough for new users, that's FORTH. \n\nInstall peforth\n###############\n\n::\n\n    pip install peforth \n\nFor Jupyter Notebook users, we can use FORTH language to investigate python objects through peforth magics `%f` and `%%f`. For tutorials, please find and read jupyter notebooks in the 'notebook' directory of this project on GitHub.\n\n\nRun peforth:\n#############\n\nPrint \"Hello World!\"\n\n::\n\n    Microsoft Windows [Version 10.0.15063]\n    (c) 2017 Microsoft Corporation. All rights reserved.\n\n    c:\\Users\\your-working-folder>python -m peforth .' Hello World!!' cr bye\n    Hello World!!\n\n    c:\\Users\\your-working-folder>\n\n\nso your peforth is working fine. \nTo your application, ``import peforth`` as usual to bring in the debugger:\n\n::\n\n    c:\\Users\\your-working-folder>python\n    Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import peforth\n    p e f o r t h    v1.07\n    source code http://github.com/hcchengithub/peforth\n    Type 'peforth.ok()' to enter forth interpreter, 'exit' to come back.\n\n    >>>\n\n\nThe greeing message tells us how to enter the FORTH interpreter for your \ndebugging or investigating and how to come back to continue running your \ncode.     \n\nLet's try to debug a program\n############################\n\n::\n\n    # 100.py\n\n    sum = 0\n    for i in range(100):\n        sum += i\n    print(\"The sum of 1..100 is \", sum)\n\n\nRun it:\n\n::\n\n    c:\\Users\\your-working-folder>python 100.py\n    The sum of 1..100 is 4950\n\n    c:\\Users\\your-working-folder>\n\nThe result should be 5050 but it's not! Let's drop a breakpoint \nto see what's wrong:\n\n::\n\n    # 100.py with breakpoing   .----- Specify an unique command prompt to indicate where \n                               |      the breakpoint is from if there are many of them\n    import peforth             |            .----- pass locals() at the breakpoint\n    sum = 0                    |            |      to our debugger\n    for i in range(100):       |            |               .------- use a FORTH constant   \n        sum += i               |            |               |        to represent the locals()\n    peforth.ok('my first breakpoint> ',loc=locals(),cmd=\"constant locals-after-the-for-loop\")\n    print(\"The sum of 1..100 is \", sum)\n\n\nRun again:\n\n::\n\n    c:\\Users\\your-working-folder>python 100.py\n    p e f o r t h    v1.07\n    source code http://github.com/hcchengithub/peforth\n    Type 'peforth.ok()' to enter forth interpreter, 'exit' to come back.\n\n                         .--------------- at the breakpoint, type in 'words' \n                         |                command to see what have we got   \n    my first breakpoint> words        .-------- It's a long list of 'words'\n    ... snip .......                  |         or available commands. Don't worry, we'll use only some of them.\n    expected_rstack expected_stack test-result [all-pass] *** all-pass [r r] [d d] [p \n    p] WshShell inport OK dir keys --- locals-after-the-for-loop\n                                           |\n                The last one is what ------' \n                we have just created throuth the breakpoint statement    \n                , named \"locals-after-the-for-loop\"\n\nLet's see it:\n\n::\n\n           print a carriage return at the end -------.\n                              print the thing -----. | \n                                                   | |\n    my first breakpoint> locals-after-the-for-loop . cr\n    ({'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': \n    <_frozen_importlib_external.SourceFileLoader object at 0x000001DD2D737710>, \n    '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' \n    (built-in)>, '__file__': '100.py', '__cached__': None, 'peforth': <module 'peforth' \n    from 'C:\\\\Users\\\\hcche\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\lib\\\\site-packages\\\\pe\n    forth\\\\__init__.py'>, 'sum': 4950, 'i': 99}, {}, 'my first breakpoint> ')\n    my first breakpoint>    |           |                   |\n                            |           |                   '--- our command\n               our sum -----'           |                        prompt\n                                        |                  indicates where the \n            99 instead of 100 ----------'                  breakpoint is from\n            this is the problem !!            \n\n\nNow leave the breakpoint and let the program continue:\n\n::\n\n    my first breakpoint> exit\n    my first breakpoint> The sum of 1..100 is  4950\n\n    c:\\Users\\your-working-folder>\n\n\nInvestigate by doing experiments right at a breakpoint\n######################################################\n\nWhen at a breakpoint in Tensorfow tutorials, I always want to\nmake some experiments on those frustrating *tf.something(tf.something(...),...)*\nthings to have a clearer understanding of them \nwithout leaving the underlying tutorial. Let's use the above example\nagain in another way to demonstrate how to do that with peforth:  \n\nRun peforth:\n\n::\n\n    Microsoft Windows [Version 10.0.15063]\n    (c) 2017 Microsoft Corporation. All rights reserved.\n\n    c:\\Users\\your-working-folder>python\n    Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import peforth\n    p e f o r t h    v1.07\n    source code http://github.com/hcchengithub/peforth\n    Type 'peforth.ok()' to enter forth interpreter, 'exit' to come back.\n\n    >>> peforth.ok()\n\n    OK   <-------- Default FORTH command prompt\n    OK    \n\nAssume we are at a breakpoint and we need a procedure to\nadd 1..100 to get the sum of them. We are not sure if the procedure\nis correct so we need to try. Now copy the procedure from \nyour text editor. The ``` <py>...</py> ``` tells the debugger that \nthe code within is a block of in-line python. \nThe ```outport()``` function outports the given ```locals()``` to the\nFORTH environment outside the in-line python block.\n\n::\n\n    <py>\n    sum = 0\n    for i in range(100):\n        sum += i\n    print(\"The sum of 1..100 is \", sum)\n    outport(locals())\n    </py>\n\nIt's a block of multiple-line text strings so we press Ctrl-D\nto start a multiple-line input, copy-paste, and press another Ctrl-D\nto end the multiple-line block. Like this:\n\n::\n\n    OK\n    OK ^D\n        <py>\n        sum = 0\n        for i in range(100):\n            sum += i\n        print(\"The sum of 1..100 is \", sum)\n        outport(locals())\n        </py>\n    ^D\n    The sum of 1..100 is  4950\n    OK\n\nNow use the 'words' command to see what have we got:\n\n::\n\n    OK words\n    code end-code \\ // <selftest> </selftest> bye /// immediate stop compyle \n    trim indent -indent <py> </py> </pyV> words . cr help interpret-only \n    compile-only literal reveal privacy (create) : ; ( BL CR word ' , \n    [compile] py: py> py:~ py>~ 0branch here! here swap ! @ ? >r r> r@ drop \n    dup over 0< + * - / 1+ 2+ 1- 2- compile if then compiling char last \n    version execute cls private nonprivate (space) exit ret rescan-word-hash \n    (') branch bool and or not (forget) AND OR NOT XOR true false \"\" [] {} \n    none >> << 0= 0> 0<> 0<= 0>= = == > < != >= <= abs max min doVar doNext \n    depth pick roll space [ ] colon-word create (marker) marker next abort \n    alias <> public nip rot -rot 2drop 2dup invert negate within ['] allot \n    for begin until again ahead never repeat aft else while ?stop ?dup \n    variable +! chars spaces .( .\" .' s\" s' s` does> count accept accept2 \n    <accept> nop </accept> refill [else] [if] [then] (::) (:>) :: :> ::~ \n    :>~ \"msg\"abort abort\" \"msg\"?abort ?abort\" '<text> (<text>) <text> </text> \n    <comment> </comment> (constant) constant value to tib. >t t@ t> [begin] \n    [again] [until] [for] [next] modules int float drops dropall char>ASCII \n    ASCII>char ASCII .s (*debug*) *debug* readTextFile writeTextFile \n    tib.insert sinclude include type obj>keys obj2dict stringify toString \n    .literal .function (dump) dump dump2ret d (see) .members .source see dos \n    cd slice description expected_rstack expected_stack test-result \n    [all-pass] *** all-pass [r r] [d d] [p p] WshShell inport OK dir keys \n    --- i sum\n    OK\n\nAround the end of the long list after the ``` --- ``` marker we found ``` i ``` and \n``` sum ```. They are all locals() at the point in the in-line python block.\nLet's see them:\n\n::\n\n    OK i . cr\n    99\n    OK sum . cr\n    4950\n    OK\n\nAgain, we found the root cause of why the sum is not 5050 because\n``` i ``` didn't reach to 100 as anticipated. That's exactly how the \npython ```range()``` works and that has actually confused me many times.\n\n\nVisit this project's \n`Wiki`_\npages\nfor more examples about how to view MNIST handwritten digit images\nat the half way of your investigating in a Tensorflow tutorial, for\nexample, and the usages of this programmable debugger.\n\nHave fun!\n*********\n\n- H.C. Chen, FigTaiwan, 2019.5.22\n- hcchen5600@gmail.com\n- Just undo it! \n\nEdited by: `rst online editor`_\n\n.. _Wiki: https://github.com/hcchengithub/peforth/wiki\n.. _rst online editor: http://rst.ninjs.org\n.. _Jupyter Notebook: http://nbviewer.jupyter.org/\n.. _Linux Users: http://robl.co/brainfuck-ipython/\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hcchengithub/peforth", "keywords": "", "license": "The MIT License (MIT) Copyright \u00a9 2019 H.C. Chen", "maintainer": "", "maintainer_email": "", "name": "peforth", "package_url": "https://pypi.org/project/peforth/", "platform": "", "project_url": "https://pypi.org/project/peforth/", "project_urls": {"Homepage": "https://github.com/hcchengithub/peforth"}, "release_url": "https://pypi.org/project/peforth/1.24/", "requires_dist": null, "requires_python": "", "summary": "A FORTH programming language built on python.", "version": "1.24", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"peforth\">\n<h2>peforth</h2>\n<h2 id=\"a-programmable-python-debugger-allows-you-to-abruptly-setup-procedures-to-investigate-your-program-code-on-the-fly-at-a-breakpoint\"><span class=\"section-subtitle\">A programmable python debugger allows you to abruptly setup procedures to investigate your program code on the fly at a breakpoint.</span></h2>\n<p>You guys know how to bebug already. We all do.\nBut when it comes to Machine Learning and Tensorflow or the likes,\nthings are getting annoying. A programmable debugger is what in my mind and probably in yours too. One breakpoint to investigate about everything! At this point, you can\nthen test whatever you want, supported by all the power of FORTH.</p>\n</div>\n<div id=\"debug-commands-in-forth-syntax\">\n<h2>Debug commands in FORTH syntax</h2>\n<p>So now we need to choose an interactive UI and its syntax that\nis light weight, reliable and flexible so we won\u2019t regret of choosing it\nsomeday, has been there for decades so many people don\u2019t need to learn about\nanother new language although we are only to use some debug commands, yet easy\nenough for new users, that\u2019s FORTH.</p>\n</div>\n<div id=\"install-peforth\">\n<h2>Install peforth</h2>\n<pre>pip install peforth\n</pre>\n<p>For Jupyter Notebook users, we can use FORTH language to investigate python objects through peforth magics <cite>%f</cite> and <cite>%%f</cite>. For tutorials, please find and read jupyter notebooks in the \u2018notebook\u2019 directory of this project on GitHub.</p>\n</div>\n<div id=\"run-peforth\">\n<h2>Run peforth:</h2>\n<p>Print \u201cHello World!\u201d</p>\n<pre>Microsoft Windows [Version 10.0.15063]\n(c) 2017 Microsoft Corporation. All rights reserved.\n\nc:\\Users\\your-working-folder&gt;python -m peforth .' Hello World!!' cr bye\nHello World!!\n\nc:\\Users\\your-working-folder&gt;\n</pre>\n<p>so your peforth is working fine.\nTo your application, <tt>import peforth</tt> as usual to bring in the debugger:</p>\n<pre>c:\\Users\\your-working-folder&gt;python\nPython 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import peforth\np e f o r t h    v1.07\nsource code http://github.com/hcchengithub/peforth\nType 'peforth.ok()' to enter forth interpreter, 'exit' to come back.\n\n&gt;&gt;&gt;\n</pre>\n<p>The greeing message tells us how to enter the FORTH interpreter for your\ndebugging or investigating and how to come back to continue running your\ncode.</p>\n</div>\n<div id=\"let-s-try-to-debug-a-program\">\n<h2>Let\u2019s try to debug a program</h2>\n<pre># 100.py\n\nsum = 0\nfor i in range(100):\n    sum += i\nprint(\"The sum of 1..100 is \", sum)\n</pre>\n<p>Run it:</p>\n<pre>c:\\Users\\your-working-folder&gt;python 100.py\nThe sum of 1..100 is 4950\n\nc:\\Users\\your-working-folder&gt;\n</pre>\n<p>The result should be 5050 but it\u2019s not! Let\u2019s drop a breakpoint\nto see what\u2019s wrong:</p>\n<pre># 100.py with breakpoing   .----- Specify an unique command prompt to indicate where\n                           |      the breakpoint is from if there are many of them\nimport peforth             |            .----- pass locals() at the breakpoint\nsum = 0                    |            |      to our debugger\nfor i in range(100):       |            |               .------- use a FORTH constant\n    sum += i               |            |               |        to represent the locals()\npeforth.ok('my first breakpoint&gt; ',loc=locals(),cmd=\"constant locals-after-the-for-loop\")\nprint(\"The sum of 1..100 is \", sum)\n</pre>\n<p>Run again:</p>\n<pre>c:\\Users\\your-working-folder&gt;python 100.py\np e f o r t h    v1.07\nsource code http://github.com/hcchengithub/peforth\nType 'peforth.ok()' to enter forth interpreter, 'exit' to come back.\n\n                     .--------------- at the breakpoint, type in 'words'\n                     |                command to see what have we got\nmy first breakpoint&gt; words        .-------- It's a long list of 'words'\n... snip .......                  |         or available commands. Don't worry, we'll use only some of them.\nexpected_rstack expected_stack test-result [all-pass] *** all-pass [r r] [d d] [p\np] WshShell inport OK dir keys --- locals-after-the-for-loop\n                                       |\n            The last one is what ------'\n            we have just created throuth the breakpoint statement\n            , named \"locals-after-the-for-loop\"\n</pre>\n<p>Let\u2019s see it:</p>\n<pre>       print a carriage return at the end -------.\n                          print the thing -----. |\n                                               | |\nmy first breakpoint&gt; locals-after-the-for-loop . cr\n({'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__':\n&lt;_frozen_importlib_external.SourceFileLoader object at 0x000001DD2D737710&gt;,\n'__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins'\n(built-in)&gt;, '__file__': '100.py', '__cached__': None, 'peforth': &lt;module 'peforth'\nfrom 'C:\\\\Users\\\\hcche\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\lib\\\\site-packages\\\\pe\nforth\\\\__init__.py'&gt;, 'sum': 4950, 'i': 99}, {}, 'my first breakpoint&gt; ')\nmy first breakpoint&gt;    |           |                   |\n                        |           |                   '--- our command\n           our sum -----'           |                        prompt\n                                    |                  indicates where the\n        99 instead of 100 ----------'                  breakpoint is from\n        this is the problem !!\n</pre>\n<p>Now leave the breakpoint and let the program continue:</p>\n<pre>my first breakpoint&gt; exit\nmy first breakpoint&gt; The sum of 1..100 is  4950\n\nc:\\Users\\your-working-folder&gt;\n</pre>\n</div>\n<div id=\"investigate-by-doing-experiments-right-at-a-breakpoint\">\n<h2>Investigate by doing experiments right at a breakpoint</h2>\n<p>When at a breakpoint in Tensorfow tutorials, I always want to\nmake some experiments on those frustrating <em>tf.something(tf.something(\u2026),\u2026)</em>\nthings to have a clearer understanding of them\nwithout leaving the underlying tutorial. Let\u2019s use the above example\nagain in another way to demonstrate how to do that with peforth:</p>\n<p>Run peforth:</p>\n<pre>Microsoft Windows [Version 10.0.15063]\n(c) 2017 Microsoft Corporation. All rights reserved.\n\nc:\\Users\\your-working-folder&gt;python\nPython 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import peforth\np e f o r t h    v1.07\nsource code http://github.com/hcchengithub/peforth\nType 'peforth.ok()' to enter forth interpreter, 'exit' to come back.\n\n&gt;&gt;&gt; peforth.ok()\n\nOK   &lt;-------- Default FORTH command prompt\nOK\n</pre>\n<p>Assume we are at a breakpoint and we need a procedure to\nadd 1..100 to get the sum of them. We are not sure if the procedure\nis correct so we need to try. Now copy the procedure from\nyour text editor. The <tt>` <span class=\"pre\">&lt;py&gt;...&lt;/py&gt;</span> `</tt> tells the debugger that\nthe code within is a block of in-line python.\nThe <tt><span class=\"pre\">`outport()`</span></tt> function outports the given <tt><span class=\"pre\">`locals()`</span></tt> to the\nFORTH environment outside the in-line python block.</p>\n<pre>&lt;py&gt;\nsum = 0\nfor i in range(100):\n    sum += i\nprint(\"The sum of 1..100 is \", sum)\noutport(locals())\n&lt;/py&gt;\n</pre>\n<p>It\u2019s a block of multiple-line text strings so we press Ctrl-D\nto start a multiple-line input, copy-paste, and press another Ctrl-D\nto end the multiple-line block. Like this:</p>\n<pre>OK\nOK ^D\n    &lt;py&gt;\n    sum = 0\n    for i in range(100):\n        sum += i\n    print(\"The sum of 1..100 is \", sum)\n    outport(locals())\n    &lt;/py&gt;\n^D\nThe sum of 1..100 is  4950\nOK\n</pre>\n<p>Now use the \u2018words\u2019 command to see what have we got:</p>\n<pre>OK words\ncode end-code \\ // &lt;selftest&gt; &lt;/selftest&gt; bye /// immediate stop compyle\ntrim indent -indent &lt;py&gt; &lt;/py&gt; &lt;/pyV&gt; words . cr help interpret-only\ncompile-only literal reveal privacy (create) : ; ( BL CR word ' ,\n[compile] py: py&gt; py:~ py&gt;~ 0branch here! here swap ! @ ? &gt;r r&gt; r@ drop\ndup over 0&lt; + * - / 1+ 2+ 1- 2- compile if then compiling char last\nversion execute cls private nonprivate (space) exit ret rescan-word-hash\n(') branch bool and or not (forget) AND OR NOT XOR true false \"\" [] {}\nnone &gt;&gt; &lt;&lt; 0= 0&gt; 0&lt;&gt; 0&lt;= 0&gt;= = == &gt; &lt; != &gt;= &lt;= abs max min doVar doNext\ndepth pick roll space [ ] colon-word create (marker) marker next abort\nalias &lt;&gt; public nip rot -rot 2drop 2dup invert negate within ['] allot\nfor begin until again ahead never repeat aft else while ?stop ?dup\nvariable +! chars spaces .( .\" .' s\" s' s` does&gt; count accept accept2\n&lt;accept&gt; nop &lt;/accept&gt; refill [else] [if] [then] (::) (:&gt;) :: :&gt; ::~\n:&gt;~ \"msg\"abort abort\" \"msg\"?abort ?abort\" '&lt;text&gt; (&lt;text&gt;) &lt;text&gt; &lt;/text&gt;\n&lt;comment&gt; &lt;/comment&gt; (constant) constant value to tib. &gt;t t@ t&gt; [begin]\n[again] [until] [for] [next] modules int float drops dropall char&gt;ASCII\nASCII&gt;char ASCII .s (*debug*) *debug* readTextFile writeTextFile\ntib.insert sinclude include type obj&gt;keys obj2dict stringify toString\n.literal .function (dump) dump dump2ret d (see) .members .source see dos\ncd slice description expected_rstack expected_stack test-result\n[all-pass] *** all-pass [r r] [d d] [p p] WshShell inport OK dir keys\n--- i sum\nOK\n</pre>\n<p>Around the end of the long list after the <tt>` <span class=\"pre\">---</span> `</tt> marker we found <tt>` i `</tt> and\n<tt>` sum `</tt>. They are all locals() at the point in the in-line python block.\nLet\u2019s see them:</p>\n<pre>OK i . cr\n99\nOK sum . cr\n4950\nOK\n</pre>\n<p>Again, we found the root cause of why the sum is not 5050 because\n<tt>` i `</tt> didn\u2019t reach to 100 as anticipated. That\u2019s exactly how the\npython <tt><span class=\"pre\">`range()`</span></tt> works and that has actually confused me many times.</p>\n<p>Visit this project\u2019s\n<a href=\"https://github.com/hcchengithub/peforth/wiki\" rel=\"nofollow\">Wiki</a>\npages\nfor more examples about how to view MNIST handwritten digit images\nat the half way of your investigating in a Tensorflow tutorial, for\nexample, and the usages of this programmable debugger.</p>\n<div id=\"have-fun\">\n<h3>Have fun!</h3>\n<ul>\n<li>H.C. Chen, FigTaiwan, 2019.5.22</li>\n<li><a href=\"mailto:hcchen5600%40gmail.com\">hcchen5600<span>@</span>gmail<span>.</span>com</a></li>\n<li>Just undo it!</li>\n</ul>\n<p>Edited by: <a href=\"http://rst.ninjs.org\" rel=\"nofollow\">rst online editor</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6192825, "releases": {"1.11": [{"comment_text": "", "digests": {"md5": "bb28fbb236a93d572bda57575adf25d3", "sha256": "eb9efc957f3e42d0fdee9b9055af4c400e53fa1727bdebe0050f6e6e75393d11"}, "downloads": -1, "filename": "peforth-1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "bb28fbb236a93d572bda57575adf25d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48257, "upload_time": "2017-11-03T09:14:06", "upload_time_iso_8601": "2017-11-03T09:14:06.286186Z", "url": "https://files.pythonhosted.org/packages/64/4f/87dbe59af58ab414d825ec5874f5624197b5ecc3c084b726ac2a745a6ec1/peforth-1.11-py3-none-any.whl", "yanked": false}], "1.13": [{"comment_text": "", "digests": {"md5": "26c9ea71c8345bd5c4e1f88a66d71f2b", "sha256": "29e6bb74995567ec775c98e1972ffba5328652aebf3d103c7cb7b483addac3a4"}, "downloads": -1, "filename": "peforth-1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "26c9ea71c8345bd5c4e1f88a66d71f2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51311, "upload_time": "2017-12-27T08:47:24", "upload_time_iso_8601": "2017-12-27T08:47:24.734720Z", "url": "https://files.pythonhosted.org/packages/f5/6a/abb16c2179c60a53da745ae560e1da226f615f51dc49632b60a16ed8d6fd/peforth-1.13-py3-none-any.whl", "yanked": false}], "1.14": [{"comment_text": "", "digests": {"md5": "ab0b67f6084d14333f137ce5316b3f74", "sha256": "e5873413230a6782c644aef1e472d93fe421e576c4fd23ee9beab02a40ec113e"}, "downloads": -1, "filename": "peforth-1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "ab0b67f6084d14333f137ce5316b3f74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51692, "upload_time": "2018-01-21T09:19:39", "upload_time_iso_8601": "2018-01-21T09:19:39.138919Z", "url": "https://files.pythonhosted.org/packages/cc/00/d204c24db52d1aa56d39d586676d401c805c1c299a68e5565b55312ed734/peforth-1.14-py3-none-any.whl", "yanked": false}], "1.15": [{"comment_text": "", "digests": {"md5": "bec605c2c77ad279c1d2fd7e4b1efb3c", "sha256": "8c80fb3d84a36bef39693929e011720e47d3764e5e852e90800a42a0c3dfde96"}, "downloads": -1, "filename": "peforth-1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "bec605c2c77ad279c1d2fd7e4b1efb3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52396, "upload_time": "2018-03-12T11:27:39", "upload_time_iso_8601": "2018-03-12T11:27:39.802260Z", "url": "https://files.pythonhosted.org/packages/7c/12/60d90343cf8002a4cfdd613c76f15068a6dfea89e4c9e52e7eca34cd1ca3/peforth-1.15-py3-none-any.whl", "yanked": false}], "1.16": [{"comment_text": "", "digests": {"md5": "75a095a152f3ac30a0c0c3b181458d05", "sha256": "0b182f77f55d6bcd94c85b22b29abe9e31e29308519ee6e16d6006f5c6cf16aa"}, "downloads": -1, "filename": "peforth-1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "75a095a152f3ac30a0c0c3b181458d05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53192, "upload_time": "2018-05-22T08:02:24", "upload_time_iso_8601": "2018-05-22T08:02:24.382076Z", "url": "https://files.pythonhosted.org/packages/eb/29/12a274ce4900291bfa4b60435520403f49d0739cb6cdc3ac897e9d0df0b5/peforth-1.16-py3-none-any.whl", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "fe5891bd7cf705ba558e635332d92c47", "sha256": "2432543d3dc39fdb4210af09554ac0551eb58580d86bcf7baa8818330b02a33f"}, "downloads": -1, "filename": "peforth-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fe5891bd7cf705ba558e635332d92c47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48860, "upload_time": "2017-09-08T12:51:48", "upload_time_iso_8601": "2017-09-08T12:51:48.945142Z", "url": "https://files.pythonhosted.org/packages/c5/dc/4f6883f084895e710e81603b187d360c1e9a54d47079b9611b771239b882/peforth-1.2-py3-none-any.whl", "yanked": false}], "1.21": [{"comment_text": "", "digests": {"md5": "38390ffab7a69e85e405b9fb59396e63", "sha256": "362edcdf8ba166651cb47688089f8bc9064106ac300024fad52d229849c6edbc"}, "downloads": -1, "filename": "peforth-1.21-py3-none-any.whl", "has_sig": false, "md5_digest": "38390ffab7a69e85e405b9fb59396e63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51551, "upload_time": "2018-07-02T12:00:27", "upload_time_iso_8601": "2018-07-02T12:00:27.116560Z", "url": "https://files.pythonhosted.org/packages/57/76/038666f8eceaddb3113062091baf90acfe6337a1a57ee02ac15da735428b/peforth-1.21-py3-none-any.whl", "yanked": false}], "1.23": [{"comment_text": "", "digests": {"md5": "b0f8c110192d6981a4f233dbcdc5a765", "sha256": "bad337bc13ebb0dc66819236c37d7ceb77eeade5bc8550c069f5efcd15c271ea"}, "downloads": -1, "filename": "peforth-1.23-py3.6.egg", "has_sig": false, "md5_digest": "b0f8c110192d6981a4f233dbcdc5a765", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 59723, "upload_time": "2019-05-22T08:27:07", "upload_time_iso_8601": "2019-05-22T08:27:07.554054Z", "url": "https://files.pythonhosted.org/packages/9c/f3/463295c4268dd807f17719578c52ffec04965ca2533a03bf4d61d16903c9/peforth-1.23-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8bcd28dbda13c5359ef089026f4b928", "sha256": "0f3684782e7666f62bd6eed471982a038226b7529266ab6de59f8c2ba90acffd"}, "downloads": -1, "filename": "peforth-1.23-py3-none-any.whl", "has_sig": false, "md5_digest": "b8bcd28dbda13c5359ef089026f4b928", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 54986, "upload_time": "2019-05-22T08:27:05", "upload_time_iso_8601": "2019-05-22T08:27:05.776128Z", "url": "https://files.pythonhosted.org/packages/ad/8a/dd35cd7f98a34947cd46055af998dbe2681b46592eae1dcca574ac3d27c2/peforth-1.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ca11b62e551a358dd02fd30a19844c4", "sha256": "8cd12ba6d5fa98163cfe995da40a4968ca38eff140261acb28beb9539e45fcbc"}, "downloads": -1, "filename": "peforth-1.23.tar.gz", "has_sig": false, "md5_digest": "2ca11b62e551a358dd02fd30a19844c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47140, "upload_time": "2019-05-22T08:27:09", "upload_time_iso_8601": "2019-05-22T08:27:09.406783Z", "url": "https://files.pythonhosted.org/packages/af/b7/b501089e1678626ff30b381aa0b7aa5fa05216712f3669352b798a032164/peforth-1.23.tar.gz", "yanked": false}], "1.24": [{"comment_text": "", "digests": {"md5": "7cb5750e4feab390e61ff9b0ee93e6ca", "sha256": "f02429e207a2ea5a4be7b63131356ba6f62f241b51d670b408f5442988823bb2"}, "downloads": -1, "filename": "peforth-1.24-py3-none-any.whl", "has_sig": false, "md5_digest": "7cb5750e4feab390e61ff9b0ee93e6ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51461, "upload_time": "2019-11-25T09:03:08", "upload_time_iso_8601": "2019-11-25T09:03:08.944930Z", "url": "https://files.pythonhosted.org/packages/d6/91/4e8729f7623ef906bb3c433048df0b75e5b7f28402ed6194a56bca18e7c9/peforth-1.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23dd83d5bcc745ec64efe454789cab8a", "sha256": "d72014490c05aaf0d8c798c97c589d8050d4fdbf9d1890d7940df2a8d27a8f0f"}, "downloads": -1, "filename": "peforth-1.24.tar.gz", "has_sig": false, "md5_digest": "23dd83d5bcc745ec64efe454789cab8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51354, "upload_time": "2019-11-25T09:03:10", "upload_time_iso_8601": "2019-11-25T09:03:10.942791Z", "url": "https://files.pythonhosted.org/packages/79/ab/429cbfa8d1d95671e45c4cb68c0218a4f7a2e3ddff2c961cf48cafbebfc6/peforth-1.24.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "97c6138652b943f1da6a30d268dfbfe6", "sha256": "0cbe6094671fa14ff99eb61e894574f35c1c17068eba1ae4dab2a135fe061fe2"}, "downloads": -1, "filename": "peforth-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "97c6138652b943f1da6a30d268dfbfe6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49389, "upload_time": "2017-09-14T07:06:20", "upload_time_iso_8601": "2017-09-14T07:06:20.268851Z", "url": "https://files.pythonhosted.org/packages/a5/04/c0658c1518b6fee8019f0c83935af3e48a8d6fcc6e6c92cee5661d2cc95f/peforth-1.3-py3-none-any.whl", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "5e37fdf6c893b46f61c5865ef24ea2ca", "sha256": "e0e8a674b3eda9327ec4acdb85b652e29b6ffd354fa6be0e8ef922c98dcb60ae"}, "downloads": -1, "filename": "peforth-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "5e37fdf6c893b46f61c5865ef24ea2ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44579, "upload_time": "2017-09-20T10:35:39", "upload_time_iso_8601": "2017-09-20T10:35:39.712854Z", "url": "https://files.pythonhosted.org/packages/ee/82/a7ebb6287bc8048cc8a6ac7587ffd3268699950969afa7aecd4ecc07e1f8/peforth-1.4-py3-none-any.whl", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "ce93b2c5e7572026d85a5199e814e9ae", "sha256": "aad9f0473099227ce3cbd305b89e6523c2fc181f9e6224b3d2b60c16957e756a"}, "downloads": -1, "filename": "peforth-1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ce93b2c5e7572026d85a5199e814e9ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43601, "upload_time": "2017-09-22T08:09:22", "upload_time_iso_8601": "2017-09-22T08:09:22.380214Z", "url": "https://files.pythonhosted.org/packages/58/2b/4773b9bee61b7c025df16f2a28a29c37d4c20c6198c203a8cf178574be3d/peforth-1.5-py3-none-any.whl", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "cf8bb30cb6d7b1fbb680132f2efca6b4", "sha256": "ee2666dc5085ad775279ad70e7338e19150e7db1bf0d347394cf15f25eac7f8e"}, "downloads": -1, "filename": "peforth-1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cf8bb30cb6d7b1fbb680132f2efca6b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 45527, "upload_time": "2017-10-02T15:33:23", "upload_time_iso_8601": "2017-10-02T15:33:23.098045Z", "url": "https://files.pythonhosted.org/packages/a5/d4/37772671a9fc7e7ec96a51b40ac0c16e0becf0414173b486033ba57d56f3/peforth-1.6-py3-none-any.whl", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "8a246c37b82b00c5dbfaad5abd92f4bf", "sha256": "4cef82c44b1ff1c14b64f03bec40b2c6495dda82535cef405b01c9422a5c6a13"}, "downloads": -1, "filename": "peforth-1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "8a246c37b82b00c5dbfaad5abd92f4bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 46638, "upload_time": "2017-10-08T11:34:33", "upload_time_iso_8601": "2017-10-08T11:34:33.860335Z", "url": "https://files.pythonhosted.org/packages/25/14/f231363476ebcf56b271d72134d873c3ebb436b6ccf9fc334322fb94f420/peforth-1.7-py3-none-any.whl", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "b009edcdfd6c1f31344c0b36cc1211b7", "sha256": "bbef505dee13b1576c5cc63635f9ff858189fa7c29ba507597888278c5409c5e"}, "downloads": -1, "filename": "peforth-1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b009edcdfd6c1f31344c0b36cc1211b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47154, "upload_time": "2017-10-11T02:39:37", "upload_time_iso_8601": "2017-10-11T02:39:37.404984Z", "url": "https://files.pythonhosted.org/packages/91/c5/02a58eb2dc488fea360039a7025f66bd9f6d47ee6e45e13f1db6adaaa317/peforth-1.8-py3-none-any.whl", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "67c484e73c23b94be8f175df5a46c086", "sha256": "2abc051393f3362aab130d54d18fd08673f10555e4cfe70b24741f2eb6695fcd"}, "downloads": -1, "filename": "peforth-1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "67c484e73c23b94be8f175df5a46c086", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47552, "upload_time": "2017-10-19T04:08:49", "upload_time_iso_8601": "2017-10-19T04:08:49.151381Z", "url": "https://files.pythonhosted.org/packages/99/56/550f0ca9a406622996ddfd7c0b94430a41a704321b9d95e21a322881f7c6/peforth-1.9-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7cb5750e4feab390e61ff9b0ee93e6ca", "sha256": "f02429e207a2ea5a4be7b63131356ba6f62f241b51d670b408f5442988823bb2"}, "downloads": -1, "filename": "peforth-1.24-py3-none-any.whl", "has_sig": false, "md5_digest": "7cb5750e4feab390e61ff9b0ee93e6ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51461, "upload_time": "2019-11-25T09:03:08", "upload_time_iso_8601": "2019-11-25T09:03:08.944930Z", "url": "https://files.pythonhosted.org/packages/d6/91/4e8729f7623ef906bb3c433048df0b75e5b7f28402ed6194a56bca18e7c9/peforth-1.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23dd83d5bcc745ec64efe454789cab8a", "sha256": "d72014490c05aaf0d8c798c97c589d8050d4fdbf9d1890d7940df2a8d27a8f0f"}, "downloads": -1, "filename": "peforth-1.24.tar.gz", "has_sig": false, "md5_digest": "23dd83d5bcc745ec64efe454789cab8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51354, "upload_time": "2019-11-25T09:03:10", "upload_time_iso_8601": "2019-11-25T09:03:10.942791Z", "url": "https://files.pythonhosted.org/packages/79/ab/429cbfa8d1d95671e45c4cb68c0218a4f7a2e3ddff2c961cf48cafbebfc6/peforth-1.24.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:44 2020"}