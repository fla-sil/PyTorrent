{"info": {"author": "SF Graves", "author_email": "s.graves@eaobservatory.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Topic :: Scientific/Engineering :: Astronomy"], "description": ".. inclusion-marker-do-not-remove\n\nEasily script Starlink commands with Python.\n\n**This package requires a separate working Starlink installation to be\navailable and the path to be passed to the package**. See\nhttps://starlink.eao.hawaii.edu to download Starlink. It allows easy\n*pythonic* calling of Starlink commands from python, where you can use\nnormal Python arguments and keywords and have access to the call\nsignatures and help strings through the normal Python help.\n\nThere are auto-generated wrapper modules providing easy access to the\nStarlink packages KAPPA, CONVERT, ATOOLS, CCDPACK, CUPID, FIGARO,\nPOLPACK, and SMURF. There are also commands to allow access to the\npipelines ORAC-DR and Picard.\n\n\n\nInstallation\n------------\n\nYou should normally install this package via ``pip`` with::\n\n      pip install starlink-pywrapper\n\nThis will also install the necessary python dependencies.\n\nYou must also have a working Starlink installation, which can be\ndownloaded from https://starlink.eao.hawaii.edu\\.\n\nRunning commands\n----------------\n\nTo run e.g. the KAPPA stats command command on a file\n``myndf.sdf``, you would use the :meth:`starlink.kappa.stats`\nfunction, after first importing the package and telling it where\nyour Starlink installation was\n\n>>> from starlink import kappa\n>>> kappa.wrapper.change_starpath('/path/to/my/starlink/installation')\n>>> statsinfo = kappa.stats('myndf.sdf')\n>>> print(statsinfo.mean)\n18.3\n\nAs you can see in this example, the returned object from the command\nwill include all output values that you would previously have either\naccessed with KAPPA's ``parget``, or just read from the screen output.\n\n\nMany other commands will produce a new output NDF file on\ndisk. For example, the ``makesnr`` command in KAPPA:\n\n>>> snrinfo = kappa.makesnr(in_='myndf.sdf', out='snr.sdf', minvar=0.0)\n>>> print(snrinfo.out)\nsnr.sdf\n\nThe returned object is less useful for these commands, although may\ncontain useful information. The documentation should indicate what\nvalues are returned and what they mean, and can be accessed as normal\nin Python:\n\n>>> help(kappa.makesnr)\n\n\nDifferences from standalone Starlink\n====================================\n\n - When using the command line starlink programs, each command will\n   often *remember* certain important variables you set previously,\n   and use those as the default for the next repeat of that command,\n   or the next command you run. This behaviour has been deliberately\n   not included in this package, as when writing scripts this\n   behaviour can produce suprising results. Instead, the documented\n   defaults should always be the default seen by your programs.\n\n - You do not have to add shell escapes to your strings when passing them\n   to Starlink commands.\n\n - You do not need to use KAPPA's ``parget`` to read the return values of a\n   command; instead every return value is included in the returned\n   object (a 'namedtuple' type) as a field.\n\n - Interactive usage of commands where you are prompted to enter\n   values is not supported; the full command must be specified when\n   running the command.\n\n - You should not use KAPPA's ``fitslist`` to access FITS header\n   values programatically as it will only print values to the terminal\n   (if logging is set to DEBUG), and does not provide access to them\n   in an Python object. Instead, either use\n   :meth:`starlink.kappa.fitsval` to read single values, or use the\n   :meth:`starlink.utilities.get_ndf_fitshdr` to read in the entire\n   FITS header of an NDF file and return it as an Astropy Header\n   object (requires Astropy to be installed).\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Starlink/starlink-pywrapper", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "starlink-pywrapper", "package_url": "https://pypi.org/project/starlink-pywrapper/", "platform": "", "project_url": "https://pypi.org/project/starlink-pywrapper/", "project_urls": {"Homepage": "http://github.com/Starlink/starlink-pywrapper"}, "release_url": "https://pypi.org/project/starlink-pywrapper/0.3/", "requires_dist": ["starlink-pyhds"], "requires_python": "", "summary": "Provides a wrapper around the Starlink software suite commands.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. inclusion-marker-do-not-remove<br><br>Easily script Starlink commands with Python.<br><br>**This package requires a separate working Starlink installation to be<br>available and the path to be passed to the package**. See<br>https://starlink.eao.hawaii.edu to download Starlink. It allows easy<br>*pythonic* calling of Starlink commands from python, where you can use<br>normal Python arguments and keywords and have access to the call<br>signatures and help strings through the normal Python help.<br><br>There are auto-generated wrapper modules providing easy access to the<br>Starlink packages KAPPA, CONVERT, ATOOLS, CCDPACK, CUPID, FIGARO,<br>POLPACK, and SMURF. There are also commands to allow access to the<br>pipelines ORAC-DR and Picard.<br><br><br><br>Installation<br>------------<br><br>You should normally install this package via ``pip`` with::<br><br>      pip install starlink-pywrapper<br><br>This will also install the necessary python dependencies.<br><br>You must also have a working Starlink installation, which can be<br>downloaded from https://starlink.eao.hawaii.edu\\.<br><br>Running commands<br>----------------<br><br>To run e.g. the KAPPA stats command command on a file<br>``myndf.sdf``, you would use the :meth:`starlink.kappa.stats`<br>function, after first importing the package and telling it where<br>your Starlink installation was<br><br>&gt;&gt;&gt; from starlink import kappa<br>&gt;&gt;&gt; kappa.wrapper.change_starpath('/path/to/my/starlink/installation')<br>&gt;&gt;&gt; statsinfo = kappa.stats('myndf.sdf')<br>&gt;&gt;&gt; print(statsinfo.mean)<br>18.3<br><br>As you can see in this example, the returned object from the command<br>will include all output values that you would previously have either<br>accessed with KAPPA's ``parget``, or just read from the screen output.<br><br><br>Many other commands will produce a new output NDF file on<br>disk. For example, the ``makesnr`` command in KAPPA:<br><br>&gt;&gt;&gt; snrinfo = kappa.makesnr(in_='myndf.sdf', out='snr.sdf', minvar=0.0)<br>&gt;&gt;&gt; print(snrinfo.out)<br>snr.sdf<br><br>The returned object is less useful for these commands, although may<br>contain useful information. The documentation should indicate what<br>values are returned and what they mean, and can be accessed as normal<br>in Python:<br><br>&gt;&gt;&gt; help(kappa.makesnr)<br><br><br>Differences from standalone Starlink<br>====================================<br><br> - When using the command line starlink programs, each command will<br>   often *remember* certain important variables you set previously,<br>   and use those as the default for the next repeat of that command,<br>   or the next command you run. This behaviour has been deliberately<br>   not included in this package, as when writing scripts this<br>   behaviour can produce suprising results. Instead, the documented<br>   defaults should always be the default seen by your programs.<br><br> - You do not have to add shell escapes to your strings when passing them<br>   to Starlink commands.<br><br> - You do not need to use KAPPA's ``parget`` to read the return values of a<br>   command; instead every return value is included in the returned<br>   object (a 'namedtuple' type) as a field.<br><br> - Interactive usage of commands where you are prompted to enter<br>   values is not supported; the full command must be specified when<br>   running the command.<br><br> - You should not use KAPPA's ``fitslist`` to access FITS header<br>   values programatically as it will only print values to the terminal<br>   (if logging is set to DEBUG), and does not provide access to them<br>   in an Python object. Instead, either use<br>   :meth:`starlink.kappa.fitsval` to read single values, or use the<br>   :meth:`starlink.utilities.get_ndf_fitshdr` to read in the entire<br>   FITS header of an NDF file and return it as an Astropy Header<br>   object (requires Astropy to be installed).<br><br><br>\n          </div>"}, "last_serial": 4083407, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3835b26e9b5d2f2b0b0187d776b4b596", "sha256": "3e377b68b66bf639f2ce5181bf7de8f9b92bea4b869d05785c98004a42b40ba2"}, "downloads": -1, "filename": "starlink_pywrapper-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3835b26e9b5d2f2b0b0187d776b4b596", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1411666, "upload_time": "2018-01-20T00:31:26", "upload_time_iso_8601": "2018-01-20T00:31:26.311708Z", "url": "https://files.pythonhosted.org/packages/00/27/dc3442492a8201b884fdbee00257f19b15136181f202a755d975b97130be/starlink_pywrapper-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88c5a228ebc00141b19cf3381f9ab11c", "sha256": "baa26a28391751432deb740077a0897762759f9046675cfca03e857fab8db069"}, "downloads": -1, "filename": "starlink-pywrapper-0.1.tar.gz", "has_sig": false, "md5_digest": "88c5a228ebc00141b19cf3381f9ab11c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 873896, "upload_time": "2018-01-20T00:31:31", "upload_time_iso_8601": "2018-01-20T00:31:31.147358Z", "url": "https://files.pythonhosted.org/packages/c0/08/48c5be209cb3202a569c1a7fd983df635d65237258e2900d8d83f2a44c01/starlink-pywrapper-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "565909d5d341f78d7aa1e2ae98fd7003", "sha256": "4d9cad296c2469605d8ae3d09c2a5f4b0b9f8fdb63dd5cf404c229febb5f90e4"}, "downloads": -1, "filename": "starlink_pywrapper-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "565909d5d341f78d7aa1e2ae98fd7003", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 1416841, "upload_time": "2018-01-24T03:40:16", "upload_time_iso_8601": "2018-01-24T03:40:16.677842Z", "url": "https://files.pythonhosted.org/packages/75/92/bfb01ba19c30aa141c411d46efe241f974f7b6440d22565d83a383528a28/starlink_pywrapper-0.2-py2.py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2320ad6fa5b886ea33530ec8f907b4f0", "sha256": "a7882049760bb46c5d8a8fc6f8624582f349f18725b45bacd6f4669fa73dd82e"}, "downloads": -1, "filename": "starlink_pywrapper-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2320ad6fa5b886ea33530ec8f907b4f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1424592, "upload_time": "2018-07-19T19:24:35", "upload_time_iso_8601": "2018-07-19T19:24:35.911165Z", "url": "https://files.pythonhosted.org/packages/fe/00/b1878f6a4a40382c3e762b36ecc4e08e59e785dfb12e42427fdcce4281d5/starlink_pywrapper-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b988b2daea582ce404190a5615f1d9f5", "sha256": "7d4737e7547cd3516c0d5471c92ff7e96421c3dcbd369ab9b2825d754e3471f9"}, "downloads": -1, "filename": "starlink-pywrapper-0.3.tar.gz", "has_sig": false, "md5_digest": "b988b2daea582ce404190a5615f1d9f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 880679, "upload_time": "2018-07-19T19:24:38", "upload_time_iso_8601": "2018-07-19T19:24:38.724752Z", "url": "https://files.pythonhosted.org/packages/d5/b1/4ec3b6a90d3520a1d18bc2e4e119d3de17e58dfff7197f38cc86e09df34c/starlink-pywrapper-0.3.tar.gz", "yanked": false}], "0.3rc1": [{"comment_text": "", "digests": {"md5": "35d36614d55ceff881cd3597f7b841f9", "sha256": "7c92c233183d8de26a3b91d407f3a8ca2ff6d3f9131adf3ee2c2e55545cb33ef"}, "downloads": -1, "filename": "starlink-pywrapper-0.3rc1.tar.gz", "has_sig": false, "md5_digest": "35d36614d55ceff881cd3597f7b841f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 883115, "upload_time": "2018-07-16T22:27:28", "upload_time_iso_8601": "2018-07-16T22:27:28.862746Z", "url": "https://files.pythonhosted.org/packages/11/5c/c5ed72d432ada63109ff852ff1cd5921d7cbc5ecfd756fc7d1015754c71e/starlink-pywrapper-0.3rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2320ad6fa5b886ea33530ec8f907b4f0", "sha256": "a7882049760bb46c5d8a8fc6f8624582f349f18725b45bacd6f4669fa73dd82e"}, "downloads": -1, "filename": "starlink_pywrapper-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2320ad6fa5b886ea33530ec8f907b4f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1424592, "upload_time": "2018-07-19T19:24:35", "upload_time_iso_8601": "2018-07-19T19:24:35.911165Z", "url": "https://files.pythonhosted.org/packages/fe/00/b1878f6a4a40382c3e762b36ecc4e08e59e785dfb12e42427fdcce4281d5/starlink_pywrapper-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b988b2daea582ce404190a5615f1d9f5", "sha256": "7d4737e7547cd3516c0d5471c92ff7e96421c3dcbd369ab9b2825d754e3471f9"}, "downloads": -1, "filename": "starlink-pywrapper-0.3.tar.gz", "has_sig": false, "md5_digest": "b988b2daea582ce404190a5615f1d9f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 880679, "upload_time": "2018-07-19T19:24:38", "upload_time_iso_8601": "2018-07-19T19:24:38.724752Z", "url": "https://files.pythonhosted.org/packages/d5/b1/4ec3b6a90d3520a1d18bc2e4e119d3de17e58dfff7197f38cc86e09df34c/starlink-pywrapper-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:36 2020"}