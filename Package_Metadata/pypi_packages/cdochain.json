{"info": {"author": "U\u011fur \u00c7ayo\u011flu", "author_email": "urcyglu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: GIS", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "cdochain\n========\n\nThis module helps create chains of cdo commands for easy manipulation of\nclimate data.\n\nFeatures\n^^^^^^^^\n\n-  Method execution is lazy and gets processed only on function call\n   ``Chain.execute()``.\n-  Input supports Unix style pathname pattern search.\n-  The Input will be first run with\n   `glob <https://docs.python.org/3/library/glob.html>`__ and checked if\n   several files match.\n   :exclamation: *If that is the case a temporary file will be created*.\n-  Output can be a file on disc, an\n   `netCDF4.Dataset <http://unidata.github.io/netcdf4-python/#netCDF4.Dataset>`__\n   or (not) masked\n   `numpy.ndarray <http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html>`__.\n\nInstallation\n------------\n\n.. code:: bash\n\n    python3.5 -m pip install cdochain --pre\n\n--- or ---\n\n.. code:: bash\n\n    git clone https://github.com/OnionNinja/cdochain.git\n    cd cdochain\n    python3.5 setup.py install\n\nTL;DR\n-----\n\n.. code:: python\n\n    from cdochain import chaining as cch\n\n    input = './tests/testdata/sresa1b_ncar_ccsm3-example.nc'\n    output = './enso34-mm.nc'\n    data = cch.Chain(ifile=input, ofile=output)\n    enso34 = data.sellonlatbox(190,240,-5,5).monmean()\n    out = enso34.execute()\n\nUsage\n-----\n\nThis module implements `method\nchaining <https://en.wikipedia.org/wiki/Method_chaining>`__ for the\n`Climate Data Operators <https://code.zmaw.de/projects/cdo>`__ (CDO)\ntool from the Max Planck Institute for Meteorology. Let us start:\n\n.. code:: python\n\n    from cdochain import chaining as cch\n\nFor initialisation one has to define **input**, **output**, and may\ndefine several **options**.\n\nInput\n~~~~~\n\nNow we have to define the files we want to work on:\n\n-  To use one file\n\n.. code:: python\n\n    input = './tests/testdata/sresa1b_ncar_ccsm3-example.nc'\n\n-  To use several files you can give a Unix style pattern\n\n.. code:: python\n\n    input = './tests/testdata/*.nc'\n\n*This creates a temporary file* :exclamation:\n\nOutput\n~~~~~~\n\nFor defining the output we have several options.\n\n-  To output a **file on disc**:\n\n.. code:: python\n\n    data = cch.Chain(ifile=input, ofile='/path/to/output.nc')\n\n-  To output an **netcdf4.Dataset** object:\n\n.. code:: python\n\n    data = cch.Chain(ifile=input, ofile='netCDF4')\n\n-  To output an **numpy.ndarray** object:\n\n.. code:: python\n\n    data = cch.Chain(ifile=input, ofile='array:<var>')  # numpy.ndarray\n    # or\n    data = cch.Chain(ifile=input, ofile='maarray:<var>')  # masked numpy.ndarray\n\n``<var>`` defines the variable to be extracted and saved to\nnumpy.ndarray.\n\nOptions\n~~~~~~~\n\nAs for options one can use the same as described on the `CDO\nwebsite <https://code.zmaw.de/projects/cdo/embedded/index.html#x1-70001.2.1>`__.\nThe default is ``options='-O -f nc'``.\n\n**Operations**\n~~~~~~~~~~~~~~\n\nThe operations defined in\n`CDO <https://code.zmaw.de/projects/cdo/embedded/index.html>`__ can now\nbe used on the data element.\n\n.. code:: python\n\n    analysis = data.sellonlatbox(190,240,-5,5).sellevidx(1).mermean()\n    fn = analysis.execute()\n\nHave fun :neckbeard:", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OnionNinja/cdochain", "keywords": "netcdf,cdo,wrapper,chaining", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "cdochain", "package_url": "https://pypi.org/project/cdochain/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cdochain/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/OnionNinja/cdochain"}, "release_url": "https://pypi.org/project/cdochain/0.2b3/", "requires_dist": null, "requires_python": null, "summary": "Easy chaining of cdo methods.", "version": "0.2b3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module helps create chains of cdo commands for easy manipulation of\nclimate data.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Method execution is lazy and gets processed only on function call\n<tt>Chain.execute()</tt>.</li>\n<li>Input supports Unix style pathname pattern search.</li>\n<li>The Input will be first run with\n<a href=\"https://docs.python.org/3/library/glob.html\" rel=\"nofollow\">glob</a> and checked if\nseveral files match.\n:exclamation: <em>If that is the case a temporary file will be created</em>.</li>\n<li>Output can be a file on disc, an\n<a href=\"http://unidata.github.io/netcdf4-python/#netCDF4.Dataset\" rel=\"nofollow\">netCDF4.Dataset</a>\nor (not) masked\n<a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html\" rel=\"nofollow\">numpy.ndarray</a>.</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>python3.5 -m pip install cdochain --pre\n</pre>\n<p>\u2014 or \u2014</p>\n<pre>git clone https://github.com/OnionNinja/cdochain.git\n<span class=\"nb\">cd</span> cdochain\npython3.5 setup.py install\n</pre>\n</div>\n<div id=\"tl-dr\">\n<h3>TL;DR</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cdochain</span> <span class=\"kn\">import</span> <span class=\"n\">chaining</span> <span class=\"k\">as</span> <span class=\"n\">cch</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"s1\">'./tests/testdata/sresa1b_ncar_ccsm3-example.nc'</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"s1\">'./enso34-mm.nc'</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cch</span><span class=\"o\">.</span><span class=\"n\">Chain</span><span class=\"p\">(</span><span class=\"n\">ifile</span><span class=\"o\">=</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">ofile</span><span class=\"o\">=</span><span class=\"n\">output</span><span class=\"p\">)</span>\n<span class=\"n\">enso34</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sellonlatbox</span><span class=\"p\">(</span><span class=\"mi\">190</span><span class=\"p\">,</span><span class=\"mi\">240</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">monmean</span><span class=\"p\">()</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">enso34</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>This module implements <a href=\"https://en.wikipedia.org/wiki/Method_chaining\" rel=\"nofollow\">method\nchaining</a> for the\n<a href=\"https://code.zmaw.de/projects/cdo\" rel=\"nofollow\">Climate Data Operators</a> (CDO)\ntool from the Max Planck Institute for Meteorology. Let us start:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cdochain</span> <span class=\"kn\">import</span> <span class=\"n\">chaining</span> <span class=\"k\">as</span> <span class=\"n\">cch</span>\n</pre>\n<p>For initialisation one has to define <strong>input</strong>, <strong>output</strong>, and may\ndefine several <strong>options</strong>.</p>\n<div id=\"input\">\n<h4>Input</h4>\n<p>Now we have to define the files we want to work on:</p>\n<ul>\n<li>To use one file</li>\n</ul>\n<pre><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"s1\">'./tests/testdata/sresa1b_ncar_ccsm3-example.nc'</span>\n</pre>\n<ul>\n<li>To use several files you can give a Unix style pattern</li>\n</ul>\n<pre><span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"s1\">'./tests/testdata/*.nc'</span>\n</pre>\n<p><em>This creates a temporary file</em> :exclamation:</p>\n</div>\n<div id=\"output\">\n<h4>Output</h4>\n<p>For defining the output we have several options.</p>\n<ul>\n<li>To output a <strong>file on disc</strong>:</li>\n</ul>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cch</span><span class=\"o\">.</span><span class=\"n\">Chain</span><span class=\"p\">(</span><span class=\"n\">ifile</span><span class=\"o\">=</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">ofile</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/output.nc'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>To output an <strong>netcdf4.Dataset</strong> object:</li>\n</ul>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cch</span><span class=\"o\">.</span><span class=\"n\">Chain</span><span class=\"p\">(</span><span class=\"n\">ifile</span><span class=\"o\">=</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">ofile</span><span class=\"o\">=</span><span class=\"s1\">'netCDF4'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>To output an <strong>numpy.ndarray</strong> object:</li>\n</ul>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cch</span><span class=\"o\">.</span><span class=\"n\">Chain</span><span class=\"p\">(</span><span class=\"n\">ifile</span><span class=\"o\">=</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">ofile</span><span class=\"o\">=</span><span class=\"s1\">'array:&lt;var&gt;'</span><span class=\"p\">)</span>  <span class=\"c1\"># numpy.ndarray</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cch</span><span class=\"o\">.</span><span class=\"n\">Chain</span><span class=\"p\">(</span><span class=\"n\">ifile</span><span class=\"o\">=</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">ofile</span><span class=\"o\">=</span><span class=\"s1\">'maarray:&lt;var&gt;'</span><span class=\"p\">)</span>  <span class=\"c1\"># masked numpy.ndarray</span>\n</pre>\n<p><tt>&lt;var&gt;</tt> defines the variable to be extracted and saved to\nnumpy.ndarray.</p>\n</div>\n<div id=\"options\">\n<h4>Options</h4>\n<p>As for options one can use the same as described on the <a href=\"https://code.zmaw.de/projects/cdo/embedded/index.html#x1-70001.2.1\" rel=\"nofollow\">CDO\nwebsite</a>.\nThe default is <tt><span class=\"pre\">options='-O</span> <span class=\"pre\">-f</span> nc'</tt>.</p>\n</div>\n<div id=\"operations\">\n<h4><strong>Operations</strong></h4>\n<p>The operations defined in\n<a href=\"https://code.zmaw.de/projects/cdo/embedded/index.html\" rel=\"nofollow\">CDO</a> can now\nbe used on the data element.</p>\n<pre><span class=\"n\">analysis</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sellonlatbox</span><span class=\"p\">(</span><span class=\"mi\">190</span><span class=\"p\">,</span><span class=\"mi\">240</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sellevidx</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mermean</span><span class=\"p\">()</span>\n<span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"n\">analysis</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<p>Have fun :neckbeard:</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2191621, "releases": {"0.2a73": [{"comment_text": "", "digests": {"md5": "4273ab88a5952a9104f3ac1fcaed678c", "sha256": "e5cc9868d019a0bc8cf9a96f7b3d247e897fa74356dc2bc7f2f366109f396a14"}, "downloads": -1, "filename": "cdochain-0.2a73.tar.gz", "has_sig": false, "md5_digest": "4273ab88a5952a9104f3ac1fcaed678c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5297, "upload_time": "2016-06-08T09:29:39", "upload_time_iso_8601": "2016-06-08T09:29:39.499910Z", "url": "https://files.pythonhosted.org/packages/b8/87/19f9a1111c044352bb9b609087d292bde13c1e7f493a6b68519957a09724/cdochain-0.2a73.tar.gz", "yanked": false}], "0.2b1": [{"comment_text": "", "digests": {"md5": "dcddc720c6b3ccefe36470fb7610dd78", "sha256": "88f5442d49eeac1f776fdd4c600165b7d76abcb6c324c381a69de78690a71254"}, "downloads": -1, "filename": "cdochain-0.2b1.tar.gz", "has_sig": false, "md5_digest": "dcddc720c6b3ccefe36470fb7610dd78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5668, "upload_time": "2016-06-09T08:50:34", "upload_time_iso_8601": "2016-06-09T08:50:34.545171Z", "url": "https://files.pythonhosted.org/packages/ad/97/d971076681135a3c1229e250161c911a181cd65c50a9eb6e3c45677d0d03/cdochain-0.2b1.tar.gz", "yanked": false}], "0.2b3": [{"comment_text": "", "digests": {"md5": "2f452a0b55dc346e6cc1980057a159e1", "sha256": "452a6400d4dd3936854947aa02aa535f271e73ac169d20ec61453db4ca645036"}, "downloads": -1, "filename": "cdochain-0.2b3.tar.gz", "has_sig": false, "md5_digest": "2f452a0b55dc346e6cc1980057a159e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5729, "upload_time": "2016-06-28T13:19:00", "upload_time_iso_8601": "2016-06-28T13:19:00.107912Z", "url": "https://files.pythonhosted.org/packages/bb/f6/e27b219b14b840fb2d49e2b00790f38e90aee23dfab3079e42a5269053f2/cdochain-0.2b3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f452a0b55dc346e6cc1980057a159e1", "sha256": "452a6400d4dd3936854947aa02aa535f271e73ac169d20ec61453db4ca645036"}, "downloads": -1, "filename": "cdochain-0.2b3.tar.gz", "has_sig": false, "md5_digest": "2f452a0b55dc346e6cc1980057a159e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5729, "upload_time": "2016-06-28T13:19:00", "upload_time_iso_8601": "2016-06-28T13:19:00.107912Z", "url": "https://files.pythonhosted.org/packages/bb/f6/e27b219b14b840fb2d49e2b00790f38e90aee23dfab3079e42a5269053f2/cdochain-0.2b3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:55 2020"}