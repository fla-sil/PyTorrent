{"info": {"author": "Gregory Szorc", "author_email": "gregory.szorc@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: C", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "================\npython-zstandard\n================\n\nThis project provides Python bindings for interfacing with the\n`Zstandard <http://www.zstd.net>`_ compression library. A C extension\nand CFFI interface are provided.\n\nThe primary goal of the project is to provide a rich interface to the\nunderlying C API through a Pythonic interface while not sacrificing\nperformance. This means exposing most of the features and flexibility\nof the C API while not sacrificing usability or safety that Python provides.\n\nThe canonical home for this project lives in a Mercurial repository run by\nthe author. For convenience, that repository is frequently synchronized to\nhttps://github.com/indygreg/python-zstandard.\n\n|  |ci-status|\n\nRequirements\n============\n\nThis extension is designed to run with Python 2.7, 3.5, 3.6, 3.7, and 3.8\non common platforms (Linux, Windows, and OS X). On PyPy (both PyPy2 and PyPy3) we support version 6.0.0 and above. \nx86 and x86_64 are well-tested on Windows. Only x86_64 is well-tested on Linux and macOS.\n\nInstalling\n==========\n\nThis package is uploaded to PyPI at https://pypi.python.org/pypi/zstandard.\nSo, to install this package::\n\n   $ pip install zstandard\n\nBinary wheels are made available for some platforms. If you need to\ninstall from a source distribution, all you should need is a working C\ncompiler and the Python development headers/libraries. On many Linux\ndistributions, you can install a ``python-dev`` or ``python-devel``\npackage to provide these dependencies.\n\nPackages are also uploaded to Anaconda Cloud at\nhttps://anaconda.org/indygreg/zstandard. See that URL for how to install\nthis package with ``conda``.\n\nPerformance\n===========\n\nzstandard is a highly tunable compression algorithm. In its default settings\n(compression level 3), it will be faster at compression and decompression and\nwill have better compression ratios than zlib on most data sets. When tuned\nfor speed, it approaches lz4's speed and ratios. When tuned for compression\nratio, it approaches lzma ratios and compression speed, but decompression\nspeed is much faster. See the official zstandard documentation for more.\n\nzstandard and this library support multi-threaded compression. There is a\nmechanism to compress large inputs using multiple threads.\n\nThe performance of this library is usually very similar to what the zstandard\nC API can deliver. Overhead in this library is due to general Python overhead\nand can't easily be avoided by *any* zstandard Python binding. This library\nexposes multiple APIs for performing compression and decompression so callers\ncan pick an API suitable for their need. Contrast with the compression\nmodules in Python's standard library (like ``zlib``), which only offer limited\nmechanisms for performing operations. The API flexibility means consumers can\nchoose to use APIs that facilitate zero copying or minimize Python object\ncreation and garbage collection overhead.\n\nThis library is capable of single-threaded throughputs well over 1 GB/s. For\nexact numbers, measure yourself. The source code repository has a ``bench.py``\nscript that can be used to measure things.\n\nAPI\n===\n\nTo interface with Zstandard, simply import the ``zstandard`` module::\n\n   import zstandard\n\nIt is a popular convention to alias the module as a different name for\nbrevity::\n\n   import zstandard as zstd\n\nThis module attempts to import and use either the C extension or CFFI\nimplementation. On Python platforms known to support C extensions (like\nCPython), it raises an ImportError if the C extension cannot be imported.\nOn Python platforms known to not support C extensions (like PyPy), it only\nattempts to import the CFFI implementation and raises ImportError if that\ncan't be done. On other platforms, it first tries to import the C extension\nthen falls back to CFFI if that fails and raises ImportError if CFFI fails.\n\nTo change the module import behavior, a ``PYTHON_ZSTANDARD_IMPORT_POLICY``\nenvironment variable can be set. The following values are accepted:\n\ndefault\n   The behavior described above.\ncffi_fallback\n   Always try to import the C extension then fall back to CFFI if that\n   fails.\ncext\n   Only attempt to import the C extension.\ncffi\n   Only attempt to import the CFFI implementation.\n\nIn addition, the ``zstandard`` module exports a ``backend`` attribute\ncontaining the string name of the backend being used. It will be one\nof ``cext`` or ``cffi`` (for *C extension* and *cffi*, respectively).\n\nThe types, functions, and attributes exposed by the ``zstandard`` module\nare documented in the sections below.\n\n.. note::\n\n   The documentation in this section makes references to various zstd\n   concepts and functionality. The source repository contains a\n   ``docs/concepts.rst`` file explaining these in more detail.\n\nZstdCompressor\n--------------\n\nThe ``ZstdCompressor`` class provides an interface for performing\ncompression operations. Each instance is essentially a wrapper around a\n``ZSTD_CCtx`` from the C API.\n\nEach instance is associated with parameters that control compression\nbehavior. These come from the following named arguments (all optional):\n\nlevel\n   Integer compression level. Valid values are between 1 and 22.\ndict_data\n   Compression dictionary to use.\n\n   Note: When using dictionary data and ``compress()`` is called multiple\n   times, the ``ZstdCompressionParameters`` derived from an integer\n   compression ``level`` and the first compressed data's size will be reused\n   for all subsequent operations. This may not be desirable if source data\n   size varies significantly.\ncompression_params\n   A ``ZstdCompressionParameters`` instance defining compression settings.\nwrite_checksum\n   Whether a 4 byte checksum should be written with the compressed data.\n   Defaults to False. If True, the decompressor can verify that decompressed\n   data matches the original input data.\nwrite_content_size\n   Whether the size of the uncompressed data will be written into the\n   header of compressed data. Defaults to True. The data will only be\n   written if the compressor knows the size of the input data. This is\n   often not true for streaming compression.\nwrite_dict_id\n   Whether to write the dictionary ID into the compressed data.\n   Defaults to True. The dictionary ID is only written if a dictionary\n   is being used.\nthreads\n   Enables and sets the number of threads to use for multi-threaded compression\n   operations. Defaults to 0, which means to use single-threaded compression.\n   Negative values will resolve to the number of logical CPUs in the system.\n   Read below for more info on multi-threaded compression. This argument only\n   controls thread count for operations that operate on individual pieces of\n   data. APIs that spawn multiple threads for working on multiple pieces of\n   data have their own ``threads`` argument.\n\n``compression_params`` is mutually exclusive with ``level``, ``write_checksum``,\n``write_content_size``, ``write_dict_id``, and ``threads``.\n\nUnless specified otherwise, assume that no two methods of ``ZstdCompressor``\ninstances can be called from multiple Python threads simultaneously. In other\nwords, assume instances are not thread safe unless stated otherwise.\n\nUtility Methods\n^^^^^^^^^^^^^^^\n\n``frame_progression()`` returns a 3-tuple containing the number of bytes\ningested, consumed, and produced by the current compression operation.\n\n``memory_size()`` obtains the memory utilization of the underlying zstd\ncompression context, in bytes.::\n\n    cctx = zstd.ZstdCompressor()\n    memory = cctx.memory_size()\n\nSimple API\n^^^^^^^^^^\n\n``compress(data)`` compresses and returns data as a one-shot operation.::\n\n   cctx = zstd.ZstdCompressor()\n   compressed = cctx.compress(b'data to compress')\n\nThe ``data`` argument can be any object that implements the *buffer protocol*.\n\nStream Reader API\n^^^^^^^^^^^^^^^^^\n\n``stream_reader(source)`` can be used to obtain an object conforming to the\n``io.RawIOBase`` interface for reading compressed output as a stream::\n\n   with open(path, 'rb') as fh:\n       cctx = zstd.ZstdCompressor()\n       reader = cctx.stream_reader(fh)\n       while True:\n           chunk = reader.read(16384)\n           if not chunk:\n               break\n\n           # Do something with compressed chunk.\n\nInstances can also be used as context managers::\n\n   with open(path, 'rb') as fh:\n       with cctx.stream_reader(fh) as reader:\n           while True:\n               chunk = reader.read(16384)\n               if not chunk:\n                   break\n\n               # Do something with compressed chunk.\n\nWhen the context manager exits or ``close()`` is called, the stream is closed,\nunderlying resources are released, and future operations against the compression\nstream will fail.\n\nThe ``source`` argument to ``stream_reader()`` can be any object with a\n``read(size)`` method or any object implementing the *buffer protocol*.\n\n``stream_reader()`` accepts a ``size`` argument specifying how large the input\nstream is. This is used to adjust compression parameters so they are\ntailored to the source size.::\n\n   with open(path, 'rb') as fh:\n       cctx = zstd.ZstdCompressor()\n       with cctx.stream_reader(fh, size=os.stat(path).st_size) as reader:\n           ...\n\nIf the ``source`` is a stream, you can specify how large ``read()`` requests\nto that stream should be via the ``read_size`` argument. It defaults to\n``zstandard.COMPRESSION_RECOMMENDED_INPUT_SIZE``.::\n\n   with open(path, 'rb') as fh:\n       cctx = zstd.ZstdCompressor()\n       # Will perform fh.read(8192) when obtaining data to feed into the\n       # compressor.\n       with cctx.stream_reader(fh, read_size=8192) as reader:\n           ...\n\nThe stream returned by ``stream_reader()`` is neither writable nor seekable\n(even if the underlying source is seekable). ``readline()`` and\n``readlines()`` are not implemented because they don't make sense for\ncompressed data. ``tell()`` returns the number of compressed bytes\nemitted so far.\n\nStreaming Input API\n^^^^^^^^^^^^^^^^^^^\n\n``stream_writer(fh)`` allows you to *stream* data into a compressor.\n\nReturned instances implement the ``io.RawIOBase`` interface. Only methods\nthat involve writing will do useful things.\n\nThe argument to ``stream_writer()`` must have a ``write(data)`` method. As\ncompressed data is available, ``write()`` will be called with the compressed\ndata as its argument. Many common Python types implement ``write()``, including\nopen file handles and ``io.BytesIO``.\n\nThe ``write(data)`` method is used to feed data into the compressor.\n\nThe ``flush([flush_mode=FLUSH_BLOCK])`` method can be called to evict whatever\ndata remains within the compressor's internal state into the output object. This\nmay result in 0 or more ``write()`` calls to the output object. This method\naccepts an optional ``flush_mode`` argument to control the flushing behavior.\nIts value can be any of the ``FLUSH_*`` constants.\n\nBoth ``write()`` and ``flush()`` return the number of bytes written to the\nobject's ``write()``. In many cases, small inputs do not accumulate enough\ndata to cause a write and ``write()`` will return ``0``.\n\nCalling ``close()`` will mark the stream as closed and subsequent I/O\noperations will raise ``ValueError`` (per the documented behavior of\n``io.RawIOBase``). ``close()`` will also call ``close()`` on the underlying\nstream if such a method exists.\n\nTypically usage is as follows::\n\n   cctx = zstd.ZstdCompressor(level=10)\n   compressor = cctx.stream_writer(fh)\n\n   compressor.write(b'chunk 0\\n')\n   compressor.write(b'chunk 1\\n')\n   compressor.flush()\n   # Receiver will be able to decode ``chunk 0\\nchunk 1\\n`` at this point.\n   # Receiver is also expecting more data in the zstd *frame*.\n\n   compressor.write(b'chunk 2\\n')\n   compressor.flush(zstd.FLUSH_FRAME)\n   # Receiver will be able to decode ``chunk 0\\nchunk 1\\nchunk 2``.\n   # Receiver is expecting no more data, as the zstd frame is closed.\n   # Any future calls to ``write()`` at this point will construct a new\n   # zstd frame.\n\nInstances can be used as context managers. Exiting the context manager is\nthe equivalent of calling ``close()``, which is equivalent to calling\n``flush(zstd.FLUSH_FRAME)``::\n\n   cctx = zstd.ZstdCompressor(level=10)\n   with cctx.stream_writer(fh) as compressor:\n       compressor.write(b'chunk 0')\n       compressor.write(b'chunk 1')\n       ...\n\n.. important::\n\n   If ``flush(FLUSH_FRAME)`` is not called, emitted data doesn't constitute\n   a full zstd *frame* and consumers of this data may complain about malformed\n   input. It is recommended to use instances as a context manager to ensure\n   *frames* are properly finished.\n\nIf the size of the data being fed to this streaming compressor is known,\nyou can declare it before compression begins::\n\n   cctx = zstd.ZstdCompressor()\n   with cctx.stream_writer(fh, size=data_len) as compressor:\n       compressor.write(chunk0)\n       compressor.write(chunk1)\n       ...\n\nDeclaring the size of the source data allows compression parameters to\nbe tuned. And if ``write_content_size`` is used, it also results in the\ncontent size being written into the frame header of the output data.\n\nThe size of chunks being ``write()`` to the destination can be specified::\n\n    cctx = zstd.ZstdCompressor()\n    with cctx.stream_writer(fh, write_size=32768) as compressor:\n        ...\n\nTo see how much memory is being used by the streaming compressor::\n\n    cctx = zstd.ZstdCompressor()\n    with cctx.stream_writer(fh) as compressor:\n        ...\n        byte_size = compressor.memory_size()\n\nThte total number of bytes written so far are exposed via ``tell()``::\n\n    cctx = zstd.ZstdCompressor()\n    with cctx.stream_writer(fh) as compressor:\n        ...\n        total_written = compressor.tell()\n\n``stream_writer()`` accepts a ``write_return_read`` boolean argument to control\nthe return value of ``write()``. When ``False`` (the default), ``write()`` returns\nthe number of bytes that were ``write()``en to the underlying object. When\n``True``, ``write()`` returns the number of bytes read from the input that\nwere subsequently written to the compressor. ``True`` is the *proper* behavior\nfor ``write()`` as specified by the ``io.RawIOBase`` interface and will become\nthe default value in a future release.\n\nStreaming Output API\n^^^^^^^^^^^^^^^^^^^^\n\n``read_to_iter(reader)`` provides a mechanism to stream data out of a\ncompressor as an iterator of data chunks.::\n\n   cctx = zstd.ZstdCompressor()\n   for chunk in cctx.read_to_iter(fh):\n        # Do something with emitted data.\n\n``read_to_iter()`` accepts an object that has a ``read(size)`` method or\nconforms to the buffer protocol.\n\nUncompressed data is fetched from the source either by calling ``read(size)``\nor by fetching a slice of data from the object directly (in the case where\nthe buffer protocol is being used). The returned iterator consists of chunks\nof compressed data.\n\nIf reading from the source via ``read()``, ``read()`` will be called until\nit raises or returns an empty bytes (``b''``). It is perfectly valid for\nthe source to deliver fewer bytes than were what requested by ``read(size)``.\n\nLike ``stream_writer()``, ``read_to_iter()`` also accepts a ``size`` argument\ndeclaring the size of the input stream::\n\n    cctx = zstd.ZstdCompressor()\n    for chunk in cctx.read_to_iter(fh, size=some_int):\n        pass\n\nYou can also control the size that data is ``read()`` from the source and\nthe ideal size of output chunks::\n\n    cctx = zstd.ZstdCompressor()\n    for chunk in cctx.read_to_iter(fh, read_size=16384, write_size=8192):\n        pass\n\nUnlike ``stream_writer()``, ``read_to_iter()`` does not give direct control\nover the sizes of chunks fed into the compressor. Instead, chunk sizes will\nbe whatever the object being read from delivers. These will often be of a\nuniform size.\n\nStream Copying API\n^^^^^^^^^^^^^^^^^^\n\n``copy_stream(ifh, ofh)`` can be used to copy data between 2 streams while\ncompressing it.::\n\n   cctx = zstd.ZstdCompressor()\n   cctx.copy_stream(ifh, ofh)\n\nFor example, say you wish to compress a file::\n\n   cctx = zstd.ZstdCompressor()\n   with open(input_path, 'rb') as ifh, open(output_path, 'wb') as ofh:\n       cctx.copy_stream(ifh, ofh)\n\nIt is also possible to declare the size of the source stream::\n\n   cctx = zstd.ZstdCompressor()\n   cctx.copy_stream(ifh, ofh, size=len_of_input)\n\nYou can also specify how large the chunks that are ``read()`` and ``write()``\nfrom and to the streams::\n\n   cctx = zstd.ZstdCompressor()\n   cctx.copy_stream(ifh, ofh, read_size=32768, write_size=16384)\n\nThe stream copier returns a 2-tuple of bytes read and written::\n\n   cctx = zstd.ZstdCompressor()\n   read_count, write_count = cctx.copy_stream(ifh, ofh)\n\nCompressor API\n^^^^^^^^^^^^^^\n\n``compressobj()`` returns an object that exposes ``compress(data)`` and\n``flush()`` methods. Each returns compressed data or an empty bytes.\n\nThe purpose of ``compressobj()`` is to provide an API-compatible interface\nwith ``zlib.compressobj``, ``bz2.BZ2Compressor``, etc. This allows callers to\nswap in different compressor objects while using the same API.\n\n``flush()`` accepts an optional argument indicating how to end the stream.\n``zstd.COMPRESSOBJ_FLUSH_FINISH`` (the default) ends the compression stream.\nOnce this type of flush is performed, ``compress()`` and ``flush()`` can\nno longer be called. This type of flush **must** be called to end the\ncompression context. If not called, returned data may be incomplete.\n\nA ``zstd.COMPRESSOBJ_FLUSH_BLOCK`` argument to ``flush()`` will flush a\nzstd block. Flushes of this type can be performed multiple times. The next\ncall to ``compress()`` will begin a new zstd block.\n\nHere is how this API should be used::\n\n   cctx = zstd.ZstdCompressor()\n   cobj = cctx.compressobj()\n   data = cobj.compress(b'raw input 0')\n   data = cobj.compress(b'raw input 1')\n   data = cobj.flush()\n\nOr to flush blocks::\n\n   cctx.zstd.ZstdCompressor()\n   cobj = cctx.compressobj()\n   data = cobj.compress(b'chunk in first block')\n   data = cobj.flush(zstd.COMPRESSOBJ_FLUSH_BLOCK)\n   data = cobj.compress(b'chunk in second block')\n   data = cobj.flush()\n\nFor best performance results, keep input chunks under 256KB. This avoids\nextra allocations for a large output object.\n\nIt is possible to declare the input size of the data that will be fed into\nthe compressor::\n\n   cctx = zstd.ZstdCompressor()\n   cobj = cctx.compressobj(size=6)\n   data = cobj.compress(b'foobar')\n   data = cobj.flush()\n\nChunker API\n^^^^^^^^^^^\n\n``chunker(size=None, chunk_size=COMPRESSION_RECOMMENDED_OUTPUT_SIZE)`` returns\nan object that can be used to iteratively feed chunks of data into a compressor\nand produce output chunks of a uniform size.\n\nThe object returned by ``chunker()`` exposes the following methods:\n\n``compress(data)``\n   Feeds new input data into the compressor.\n\n``flush()``\n   Flushes all data currently in the compressor.\n\n``finish()``\n   Signals the end of input data. No new data can be compressed after this\n   method is called.\n\n``compress()``, ``flush()``, and ``finish()`` all return an iterator of\n``bytes`` instances holding compressed data. The iterator may be empty. Callers\nMUST iterate through all elements of the returned iterator before performing\nanother operation on the object.\n\nAll chunks emitted by ``compress()`` will have a length of ``chunk_size``.\n\n``flush()`` and ``finish()`` may return a final chunk smaller than\n``chunk_size``.\n\nHere is how the API should be used::\n\n   cctx = zstd.ZstdCompressor()\n   chunker = cctx.chunker(chunk_size=32768)\n\n   with open(path, 'rb') as fh:\n       while True:\n           in_chunk = fh.read(32768)\n           if not in_chunk:\n               break\n\n           for out_chunk in chunker.compress(in_chunk):\n               # Do something with output chunk of size 32768.\n\n       for out_chunk in chunker.finish():\n           # Do something with output chunks that finalize the zstd frame.\n\nThe ``chunker()`` API is often a better alternative to ``compressobj()``.\n\n``compressobj()`` will emit output data as it is available. This results in a\n*stream* of output chunks of varying sizes. The consistency of the output chunk\nsize with ``chunker()`` is more appropriate for many usages, such as sending\ncompressed data to a socket.\n\n``compressobj()`` may also perform extra memory reallocations in order to\ndynamically adjust the sizes of the output chunks. Since ``chunker()`` output\nchunks are all the same size (except for flushed or final chunks), there is\nless memory allocation overhead.\n\nBatch Compression API\n^^^^^^^^^^^^^^^^^^^^^\n\n(Experimental. Not yet supported in CFFI bindings.)\n\n``multi_compress_to_buffer(data, [threads=0])`` performs compression of multiple\ninputs as a single operation.\n\nData to be compressed can be passed as a ``BufferWithSegmentsCollection``, a\n``BufferWithSegments``, or a list containing byte like objects. Each element of\nthe container will be compressed individually using the configured parameters\non the ``ZstdCompressor`` instance.\n\nThe ``threads`` argument controls how many threads to use for compression. The\ndefault is ``0`` which means to use a single thread. Negative values use the\nnumber of logical CPUs in the machine.\n\nThe function returns a ``BufferWithSegmentsCollection``. This type represents\nN discrete memory allocations, eaching holding 1 or more compressed frames.\n\nOutput data is written to shared memory buffers. This means that unlike\nregular Python objects, a reference to *any* object within the collection\nkeeps the shared buffer and therefore memory backing it alive. This can have\nundesirable effects on process memory usage.\n\nThe API and behavior of this function is experimental and will likely change.\nKnown deficiencies include:\n\n* If asked to use multiple threads, it will always spawn that many threads,\n  even if the input is too small to use them. It should automatically lower\n  the thread count when the extra threads would just add overhead.\n* The buffer allocation strategy is fixed. There is room to make it dynamic,\n  perhaps even to allow one output buffer per input, facilitating a variation\n  of the API to return a list without the adverse effects of shared memory\n  buffers.\n\nZstdDecompressor\n----------------\n\nThe ``ZstdDecompressor`` class provides an interface for performing\ndecompression. It is effectively a wrapper around the ``ZSTD_DCtx`` type from\nthe C API.\n\nEach instance is associated with parameters that control decompression. These\ncome from the following named arguments (all optional):\n\ndict_data\n   Compression dictionary to use.\nmax_window_size\n   Sets an uppet limit on the window size for decompression operations in\n   kibibytes. This setting can be used to prevent large memory allocations\n   for inputs using large compression windows.\nformat\n   Set the format of data for the decoder. By default, this is\n   ``zstd.FORMAT_ZSTD1``. It can be set to ``zstd.FORMAT_ZSTD1_MAGICLESS`` to\n   allow decoding frames without the 4 byte magic header. Not all decompression\n   APIs support this mode.\n\nThe interface of this class is very similar to ``ZstdCompressor`` (by design).\n\nUnless specified otherwise, assume that no two methods of ``ZstdDecompressor``\ninstances can be called from multiple Python threads simultaneously. In other\nwords, assume instances are not thread safe unless stated otherwise.\n\nUtility Methods\n^^^^^^^^^^^^^^^\n\n``memory_size()`` obtains the size of the underlying zstd decompression context,\nin bytes.::\n\n    dctx = zstd.ZstdDecompressor()\n    size = dctx.memory_size()\n\nSimple API\n^^^^^^^^^^\n\n``decompress(data)`` can be used to decompress an entire compressed zstd\nframe in a single operation.::\n\n    dctx = zstd.ZstdDecompressor()\n    decompressed = dctx.decompress(data)\n\nBy default, ``decompress(data)`` will only work on data written with the content\nsize encoded in its header (this is the default behavior of\n``ZstdCompressor().compress()`` but may not be true for streaming compression). If\ncompressed data without an embedded content size is seen, ``zstd.ZstdError`` will\nbe raised.\n\nIf the compressed data doesn't have its content size embedded within it,\ndecompression can be attempted by specifying the ``max_output_size``\nargument.::\n\n    dctx = zstd.ZstdDecompressor()\n    uncompressed = dctx.decompress(data, max_output_size=1048576)\n\nIdeally, ``max_output_size`` will be identical to the decompressed output\nsize.\n\nIf ``max_output_size`` is too small to hold the decompressed data,\n``zstd.ZstdError`` will be raised.\n\nIf ``max_output_size`` is larger than the decompressed data, the allocated\noutput buffer will be resized to only use the space required.\n\nPlease note that an allocation of the requested ``max_output_size`` will be\nperformed every time the method is called. Setting to a very large value could\nresult in a lot of work for the memory allocator and may result in\n``MemoryError`` being raised if the allocation fails.\n\n.. important::\n\n   If the exact size of decompressed data is unknown (not passed in explicitly\n   and not stored in the zstandard frame), for performance reasons it is\n   encouraged to use a streaming API.\n\nStream Reader API\n^^^^^^^^^^^^^^^^^\n\n``stream_reader(source)`` can be used to obtain an object conforming to the\n``io.RawIOBase`` interface for reading decompressed output as a stream::\n\n   with open(path, 'rb') as fh:\n       dctx = zstd.ZstdDecompressor()\n       reader = dctx.stream_reader(fh)\n       while True:\n           chunk = reader.read(16384)\n            if not chunk:\n                break\n\n            # Do something with decompressed chunk.\n\nThe stream can also be used as a context manager::\n\n   with open(path, 'rb') as fh:\n       dctx = zstd.ZstdDecompressor()\n       with dctx.stream_reader(fh) as reader:\n           ...\n\nWhen used as a context manager, the stream is closed and the underlying\nresources are released when the context manager exits. Future operations against\nthe stream will fail.\n\nThe ``source`` argument to ``stream_reader()`` can be any object with a\n``read(size)`` method or any object implementing the *buffer protocol*.\n\nIf the ``source`` is a stream, you can specify how large ``read()`` requests\nto that stream should be via the ``read_size`` argument. It defaults to\n``zstandard.DECOMPRESSION_RECOMMENDED_INPUT_SIZE``.::\n\n   with open(path, 'rb') as fh:\n       dctx = zstd.ZstdDecompressor()\n       # Will perform fh.read(8192) when obtaining data for the decompressor.\n       with dctx.stream_reader(fh, read_size=8192) as reader:\n           ...\n\nThe stream returned by ``stream_reader()`` is not writable.\n\nThe stream returned by ``stream_reader()`` is *partially* seekable.\nAbsolute and relative positions (``SEEK_SET`` and ``SEEK_CUR``) forward\nof the current position are allowed. Offsets behind the current read\nposition and offsets relative to the end of stream are not allowed and\nwill raise ``ValueError`` if attempted.\n\n``tell()`` returns the number of decompressed bytes read so far.\n\nNot all I/O methods are implemented. Notably missing is support for\n``readline()``, ``readlines()``, and linewise iteration support. This is\nbecause streams operate on binary data - not text data. If you want to\nconvert decompressed output to text, you can chain an ``io.TextIOWrapper``\nto the stream::\n\n   with open(path, 'rb') as fh:\n       dctx = zstd.ZstdDecompressor()\n       stream_reader = dctx.stream_reader(fh)\n       text_stream = io.TextIOWrapper(stream_reader, encoding='utf-8')\n\n       for line in text_stream:\n           ...\n\nThe ``read_across_frames`` argument to ``stream_reader()`` controls the\nbehavior of read operations when the end of a zstd *frame* is encountered.\nWhen ``False`` (the default), a read will complete when the end of a\nzstd *frame* is encountered. When ``True``, a read can potentially\nreturn data spanning multiple zstd *frames*.\n\nStreaming Input API\n^^^^^^^^^^^^^^^^^^^\n\n``stream_writer(fh)`` allows you to *stream* data into a decompressor.\n\nReturned instances implement the ``io.RawIOBase`` interface. Only methods\nthat involve writing will do useful things.\n\nThe argument to ``stream_writer()`` is typically an object that also implements\n``io.RawIOBase``. But any object with a ``write(data)`` method will work. Many\ncommon Python types conform to this interface, including open file handles\nand ``io.BytesIO``.\n\nBehavior is similar to ``ZstdCompressor.stream_writer()``: compressed data\nis sent to the decompressor by calling ``write(data)`` and decompressed\noutput is written to the underlying stream by calling its ``write(data)``\nmethod.::\n\n    dctx = zstd.ZstdDecompressor()\n    decompressor = dctx.stream_writer(fh)\n\n    decompressor.write(compressed_data)\n    ...\n\n\nCalls to ``write()`` will return the number of bytes written to the output\nobject. Not all inputs will result in bytes being written, so return values\nof ``0`` are possible.\n\nLike the ``stream_writer()`` compressor, instances can be used as context\nmanagers. However, context managers add no extra special behavior and offer\nlittle to no benefit to being used.\n\nCalling ``close()`` will mark the stream as closed and subsequent I/O operations\nwill raise ``ValueError`` (per the documented behavior of ``io.RawIOBase``).\n``close()`` will also call ``close()`` on the underlying stream if such a\nmethod exists.\n\nThe size of chunks being ``write()`` to the destination can be specified::\n\n    dctx = zstd.ZstdDecompressor()\n    with dctx.stream_writer(fh, write_size=16384) as decompressor:\n        pass\n\nYou can see how much memory is being used by the decompressor::\n\n    dctx = zstd.ZstdDecompressor()\n    with dctx.stream_writer(fh) as decompressor:\n        byte_size = decompressor.memory_size()\n\n``stream_writer()`` accepts a ``write_return_read`` boolean argument to control\nthe return value of ``write()``. When ``False`` (the default)``, ``write()``\nreturns the number of bytes that were ``write()``en to the underlying stream.\nWhen ``True``, ``write()`` returns the number of bytes read from the input.\n``True`` is the *proper* behavior for ``write()`` as specified by the\n``io.RawIOBase`` interface and will become the default in a future release.\n\nStreaming Output API\n^^^^^^^^^^^^^^^^^^^^\n\n``read_to_iter(fh)`` provides a mechanism to stream decompressed data out of a\ncompressed source as an iterator of data chunks.:: \n\n    dctx = zstd.ZstdDecompressor()\n    for chunk in dctx.read_to_iter(fh):\n        # Do something with original data.\n\n``read_to_iter()`` accepts an object with a ``read(size)`` method that will\nreturn  compressed bytes or an object conforming to the buffer protocol that\ncan expose its data as a contiguous range of bytes.\n\n``read_to_iter()`` returns an iterator whose elements are chunks of the\ndecompressed data.\n\nThe size of requested ``read()`` from the source can be specified::\n\n    dctx = zstd.ZstdDecompressor()\n    for chunk in dctx.read_to_iter(fh, read_size=16384):\n        pass\n\nIt is also possible to skip leading bytes in the input data::\n\n    dctx = zstd.ZstdDecompressor()\n    for chunk in dctx.read_to_iter(fh, skip_bytes=1):\n        pass\n\n.. tip::\n\n   Skipping leading bytes is useful if the source data contains extra\n   *header* data. Traditionally, you would need to create a slice or\n   ``memoryview`` of the data you want to decompress. This would create\n   overhead. It is more efficient to pass the offset into this API.\n\nSimilarly to ``ZstdCompressor.read_to_iter()``, the consumer of the iterator\ncontrols when data is decompressed. If the iterator isn't consumed,\ndecompression is put on hold.\n\nWhen ``read_to_iter()`` is passed an object conforming to the buffer protocol,\nthe behavior may seem similar to what occurs when the simple decompression\nAPI is used. However, this API works when the decompressed size is unknown.\nFurthermore, if feeding large inputs, the decompressor will work in chunks\ninstead of performing a single operation.\n\nStream Copying API\n^^^^^^^^^^^^^^^^^^\n\n``copy_stream(ifh, ofh)`` can be used to copy data across 2 streams while\nperforming decompression.::\n\n    dctx = zstd.ZstdDecompressor()\n    dctx.copy_stream(ifh, ofh)\n\ne.g. to decompress a file to another file::\n\n    dctx = zstd.ZstdDecompressor()\n    with open(input_path, 'rb') as ifh, open(output_path, 'wb') as ofh:\n        dctx.copy_stream(ifh, ofh)\n\nThe size of chunks being ``read()`` and ``write()`` from and to the streams\ncan be specified::\n\n    dctx = zstd.ZstdDecompressor()\n    dctx.copy_stream(ifh, ofh, read_size=8192, write_size=16384)\n\nDecompressor API\n^^^^^^^^^^^^^^^^\n\n``decompressobj()`` returns an object that exposes a ``decompress(data)``\nmethod. Compressed data chunks are fed into ``decompress(data)`` and\nuncompressed output (or an empty bytes) is returned. Output from subsequent\ncalls needs to be concatenated to reassemble the full decompressed byte\nsequence.\n\nThe purpose of ``decompressobj()`` is to provide an API-compatible interface\nwith ``zlib.decompressobj`` and ``bz2.BZ2Decompressor``. This allows callers\nto swap in different decompressor objects while using the same API.\n\nEach object is single use: once an input frame is decoded, ``decompress()``\ncan no longer be called.\n\nHere is how this API should be used::\n\n   dctx = zstd.ZstdDecompressor()\n   dobj = dctx.decompressobj()\n   data = dobj.decompress(compressed_chunk_0)\n   data = dobj.decompress(compressed_chunk_1)\n\nBy default, calls to ``decompress()`` write output data in chunks of size\n``DECOMPRESSION_RECOMMENDED_OUTPUT_SIZE``. These chunks are concatenated\nbefore being returned to the caller. It is possible to define the size of\nthese temporary chunks by passing ``write_size`` to ``decompressobj()``::\n\n   dctx = zstd.ZstdDecompressor()\n   dobj = dctx.decompressobj(write_size=1048576)\n\n.. note::\n\n   Because calls to ``decompress()`` may need to perform multiple\n   memory (re)allocations, this streaming decompression API isn't as\n   efficient as other APIs.\n\nFor compatibility with the standard library APIs, instances expose a\n``flush([length=None])`` method. This method no-ops and has no meaningful\nside-effects, making it safe to call any time.\n\nBatch Decompression API\n^^^^^^^^^^^^^^^^^^^^^^^\n\n(Experimental. Not yet supported in CFFI bindings.)\n\n``multi_decompress_to_buffer()`` performs decompression of multiple\nframes as a single operation and returns a ``BufferWithSegmentsCollection``\ncontaining decompressed data for all inputs.\n\nCompressed frames can be passed to the function as a ``BufferWithSegments``,\na ``BufferWithSegmentsCollection``, or as a list containing objects that\nconform to the buffer protocol. For best performance, pass a\n``BufferWithSegmentsCollection`` or a ``BufferWithSegments``, as\nminimal input validation will be done for that type. If calling from\nPython (as opposed to C), constructing one of these instances may add\noverhead cancelling out the performance overhead of validation for list\ninputs.::\n\n    dctx = zstd.ZstdDecompressor()\n    results = dctx.multi_decompress_to_buffer([b'...', b'...'])\n\nThe decompressed size of each frame MUST be discoverable. It can either be\nembedded within the zstd frame (``write_content_size=True`` argument to\n``ZstdCompressor``) or passed in via the ``decompressed_sizes`` argument.\n\nThe ``decompressed_sizes`` argument is an object conforming to the buffer\nprotocol which holds an array of 64-bit unsigned integers in the machine's\nnative format defining the decompressed sizes of each frame. If this argument\nis passed, it avoids having to scan each frame for its decompressed size.\nThis frame scanning can add noticeable overhead in some scenarios.::\n\n    frames = [...]\n    sizes = struct.pack('=QQQQ', len0, len1, len2, len3)\n\n    dctx = zstd.ZstdDecompressor()\n    results = dctx.multi_decompress_to_buffer(frames, decompressed_sizes=sizes)\n\nThe ``threads`` argument controls the number of threads to use to perform\ndecompression operations. The default (``0``) or the value ``1`` means to\nuse a single thread. Negative values use the number of logical CPUs in the\nmachine.\n\n.. note::\n\n   It is possible to pass a ``mmap.mmap()`` instance into this function by\n   wrapping it with a ``BufferWithSegments`` instance (which will define the\n   offsets of frames within the memory mapped region).\n\nThis function is logically equivalent to performing ``dctx.decompress()``\non each input frame and returning the result.\n\nThis function exists to perform decompression on multiple frames as fast\nas possible by having as little overhead as possible. Since decompression is\nperformed as a single operation and since the decompressed output is stored in\na single buffer, extra memory allocations, Python objects, and Python function\ncalls are avoided. This is ideal for scenarios where callers know up front that\nthey need to access data for multiple frames, such as when  *delta chains* are\nbeing used.\n\nCurrently, the implementation always spawns multiple threads when requested,\neven if the amount of work to do is small. In the future, it will be smarter\nabout avoiding threads and their associated overhead when the amount of\nwork to do is small.\n\nPrefix Dictionary Chain Decompression\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``decompress_content_dict_chain(frames)`` performs decompression of a list of\nzstd frames produced using chained *prefix* dictionary compression. Such\na list of frames is produced by compressing discrete inputs where each\nnon-initial input is compressed with a *prefix* dictionary consisting of the\ncontent of the previous input.\n\nFor example, say you have the following inputs::\n\n   inputs = [b'input 1', b'input 2', b'input 3']\n\nThe zstd frame chain consists of:\n\n1. ``b'input 1'`` compressed in standalone/discrete mode\n2. ``b'input 2'`` compressed using ``b'input 1'`` as a *prefix* dictionary\n3. ``b'input 3'`` compressed using ``b'input 2'`` as a *prefix* dictionary\n\nEach zstd frame **must** have the content size written.\n\nThe following Python code can be used to produce a *prefix dictionary chain*::\n\n    def make_chain(inputs):\n        frames = []\n\n        # First frame is compressed in standalone/discrete mode.\n        zctx = zstd.ZstdCompressor()\n        frames.append(zctx.compress(inputs[0]))\n\n        # Subsequent frames use the previous fulltext as a prefix dictionary\n        for i, raw in enumerate(inputs[1:]):\n            dict_data = zstd.ZstdCompressionDict(\n                inputs[i], dict_type=zstd.DICT_TYPE_RAWCONTENT)\n            zctx = zstd.ZstdCompressor(dict_data=dict_data)\n            frames.append(zctx.compress(raw))\n\n        return frames\n\n``decompress_content_dict_chain()`` returns the uncompressed data of the last\nelement in the input chain.\n\n\n.. note::\n\n   It is possible to implement *prefix dictionary chain* decompression\n   on top of other APIs. However, this function will likely be faster -\n   especially for long input chains - as it avoids the overhead of instantiating\n   and passing around intermediate objects between C and Python.\n\nMulti-Threaded Compression\n--------------------------\n\n``ZstdCompressor`` accepts a ``threads`` argument that controls the number\nof threads to use for compression. The way this works is that input is split\ninto segments and each segment is fed into a worker pool for compression. Once\na segment is compressed, it is flushed/appended to the output.\n\n.. note::\n\n   These threads are created at the C layer and are not Python threads. So they\n   work outside the GIL. It is therefore possible to CPU saturate multiple cores\n   from Python.\n\nThe segment size for multi-threaded compression is chosen from the window size\nof the compressor. This is derived from the ``window_log`` attribute of a\n``ZstdCompressionParameters`` instance. By default, segment sizes are in the 1+MB\nrange.\n\nIf multi-threaded compression is requested and the input is smaller than the\nconfigured segment size, only a single compression thread will be used. If the\ninput is smaller than the segment size multiplied by the thread pool size or\nif data cannot be delivered to the compressor fast enough, not all requested\ncompressor threads may be active simultaneously.\n\nCompared to non-multi-threaded compression, multi-threaded compression has\nhigher per-operation overhead. This includes extra memory operations,\nthread creation, lock acquisition, etc.\n\nDue to the nature of multi-threaded compression using *N* compression\n*states*, the output from multi-threaded compression will likely be larger\nthan non-multi-threaded compression. The difference is usually small. But\nthere is a CPU/wall time versus size trade off that may warrant investigation.\n\nOutput from multi-threaded compression does not require any special handling\non the decompression side. To the decompressor, data generated with single\nthreaded compressor looks the same as data generated by a multi-threaded\ncompressor and does not require any special handling or additional resource\nrequirements.\n\nDictionary Creation and Management\n----------------------------------\n\nCompression dictionaries are represented with the ``ZstdCompressionDict`` type.\n\nInstances can be constructed from bytes::\n\n   dict_data = zstd.ZstdCompressionDict(data)\n\nIt is possible to construct a dictionary from *any* data. If the data doesn't\nbegin with a magic header, it will be treated as a *prefix* dictionary.\n*Prefix* dictionaries allow compression operations to reference raw data\nwithin the dictionary.\n\nIt is possible to force the use of *prefix* dictionaries or to require a\ndictionary header:\n\n   dict_data = zstd.ZstdCompressionDict(data,\n                                        dict_type=zstd.DICT_TYPE_RAWCONTENT)\n\n   dict_data = zstd.ZstdCompressionDict(data,\n                                        dict_type=zstd.DICT_TYPE_FULLDICT)\n\nYou can see how many bytes are in the dictionary by calling ``len()``::\n\n   dict_data = zstd.train_dictionary(size, samples)\n   dict_size = len(dict_data)  # will not be larger than ``size``\n\nOnce you have a dictionary, you can pass it to the objects performing\ncompression and decompression::\n\n   dict_data = zstd.train_dictionary(131072, samples)\n\n   cctx = zstd.ZstdCompressor(dict_data=dict_data)\n   for source_data in input_data:\n       compressed = cctx.compress(source_data)\n       # Do something with compressed data.\n\n   dctx = zstd.ZstdDecompressor(dict_data=dict_data)\n   for compressed_data in input_data:\n       buffer = io.BytesIO()\n       with dctx.stream_writer(buffer) as decompressor:\n           decompressor.write(compressed_data)\n       # Do something with raw data in ``buffer``.\n\nDictionaries have unique integer IDs. You can retrieve this ID via::\n\n   dict_id = zstd.dictionary_id(dict_data)\n\nYou can obtain the raw data in the dict (useful for persisting and constructing\na ``ZstdCompressionDict`` later) via ``as_bytes()``::\n\n   dict_data = zstd.train_dictionary(size, samples)\n   raw_data = dict_data.as_bytes()\n\nBy default, when a ``ZstdCompressionDict`` is *attached* to a\n``ZstdCompressor``, each ``ZstdCompressor`` performs work to prepare the\ndictionary for use. This is fine if only 1 compression operation is being\nperformed or if the ``ZstdCompressor`` is being reused for multiple operations.\nBut if multiple ``ZstdCompressor`` instances are being used with the dictionary,\nthis can add overhead.\n\nIt is possible to *precompute* the dictionary so it can readily be consumed\nby multiple ``ZstdCompressor`` instances::\n\n    d = zstd.ZstdCompressionDict(data)\n\n    # Precompute for compression level 3.\n    d.precompute_compress(level=3)\n\n    # Precompute with specific compression parameters.\n    params = zstd.ZstdCompressionParameters(...)\n    d.precompute_compress(compression_params=params)\n\n.. note::\n\n   When a dictionary is precomputed, the compression parameters used to\n   precompute the dictionary overwrite some of the compression parameters\n   specified to ``ZstdCompressor.__init__``.\n\nTraining Dictionaries\n^^^^^^^^^^^^^^^^^^^^^\n\nUnless using *prefix* dictionaries, dictionary data is produced by *training*\non existing data::\n\n   dict_data = zstd.train_dictionary(size, samples)\n\nThis takes a target dictionary size and list of bytes instances and creates and\nreturns a ``ZstdCompressionDict``.\n\nThe dictionary training mechanism is known as *cover*. More details about it are\navailable in the paper *Effective Construction of Relative Lempel-Ziv\nDictionaries* (authors: Liao, Petri, Moffat, Wirth).\n\nThe cover algorithm takes parameters ``k` and ``d``. These are the\n*segment size* and *dmer size*, respectively. The returned dictionary\ninstance created by this function has ``k`` and ``d`` attributes\ncontaining the values for these parameters. If a ``ZstdCompressionDict``\nis constructed from raw bytes data (a content-only dictionary), the\n``k`` and ``d`` attributes will be ``0``.\n\nThe segment and dmer size parameters to the cover algorithm can either be\nspecified manually or ``train_dictionary()`` can try multiple values\nand pick the best one, where *best* means the smallest compressed data size.\nThis later mode is called *optimization* mode.\n\nIf none of ``k``, ``d``, ``steps``, ``threads``, ``level``, ``notifications``,\nor ``dict_id`` (basically anything from the underlying ``ZDICT_cover_params_t``\nstruct) are defined, *optimization* mode is used with default parameter\nvalues.\n\nIf ``steps`` or ``threads`` are defined, then *optimization* mode is engaged\nwith explicit control over those parameters. Specifying ``threads=0`` or\n``threads=1`` can be used to engage *optimization* mode if other parameters\nare not defined.\n\nOtherwise, non-*optimization* mode is used with the parameters specified.\n\nThis function takes the following arguments:\n\ndict_size\n   Target size in bytes of the dictionary to generate.\nsamples\n   A list of bytes holding samples the dictionary will be trained from.\nk\n   Parameter to cover algorithm defining the segment size. A reasonable range\n   is [16, 2048+].\nd\n   Parameter to cover algorithm defining the dmer size. A reasonable range is\n   [6, 16]. ``d`` must be less than or equal to ``k``.\ndict_id\n   Integer dictionary ID for the produced dictionary. Default is 0, which uses\n   a random value.\nsteps\n   Number of steps through ``k`` values to perform when trying parameter\n   variations.\nthreads\n   Number of threads to use when trying parameter variations. Default is 0,\n   which means to use a single thread. A negative value can be specified to\n   use as many threads as there are detected logical CPUs.\nlevel\n   Integer target compression level when trying parameter variations.\nnotifications\n   Controls writing of informational messages to ``stderr``. ``0`` (the\n   default) means to write nothing. ``1`` writes errors. ``2`` writes\n   progression info. ``3`` writes more details. And ``4`` writes all info.\n\nExplicit Compression Parameters\n-------------------------------\n\nZstandard offers a high-level *compression level* that maps to lower-level\ncompression parameters. For many consumers, this numeric level is the only\ncompression setting you'll need to touch.\n\nBut for advanced use cases, it might be desirable to tweak these lower-level\nsettings.\n\nThe ``ZstdCompressionParameters`` type represents these low-level compression\nsettings.\n\nInstances of this type can be constructed from a myriad of keyword arguments\n(defined below) for complete low-level control over each adjustable\ncompression setting.\n\nFrom a higher level, one can construct a ``ZstdCompressionParameters`` instance\ngiven a desired compression level and target input and dictionary size\nusing ``ZstdCompressionParameters.from_level()``. e.g.::\n\n    # Derive compression settings for compression level 7.\n    params = zstd.ZstdCompressionParameters.from_level(7)\n\n    # With an input size of 1MB\n    params = zstd.ZstdCompressionParameters.from_level(7, source_size=1048576)\n\nUsing ``from_level()``, it is also possible to override individual compression\nparameters or to define additional settings that aren't automatically derived.\ne.g.::\n\n    params = zstd.ZstdCompressionParameters.from_level(4, window_log=10)\n    params = zstd.ZstdCompressionParameters.from_level(5, threads=4)\n\nOr you can define low-level compression settings directly::\n\n    params = zstd.ZstdCompressionParameters(window_log=12, enable_ldm=True)\n\nOnce a ``ZstdCompressionParameters`` instance is obtained, it can be used to\nconfigure a compressor::\n\n    cctx = zstd.ZstdCompressor(compression_params=params)\n\nThe named arguments and attributes of ``ZstdCompressionParameters`` are as\nfollows:\n\n* format\n* compression_level\n* window_log\n* hash_log\n* chain_log\n* search_log\n* min_match\n* target_length\n* strategy\n* compression_strategy (deprecated: same as ``strategy``)\n* write_content_size\n* write_checksum\n* write_dict_id\n* job_size\n* overlap_log\n* overlap_size_log (deprecated: same as ``overlap_log``)\n* force_max_window\n* enable_ldm\n* ldm_hash_log\n* ldm_min_match\n* ldm_bucket_size_log\n* ldm_hash_rate_log\n* ldm_hash_every_log (deprecated: same as ``ldm_hash_rate_log``)\n* threads\n\nSome of these are very low-level settings. It may help to consult the official\nzstandard documentation for their behavior. Look for the ``ZSTD_p_*`` constants\nin ``zstd.h`` (https://github.com/facebook/zstd/blob/dev/lib/zstd.h).\n\nFrame Inspection\n----------------\n\nData emitted from zstd compression is encapsulated in a *frame*. This frame\nbegins with a 4 byte *magic number* header followed by 2 to 14 bytes describing\nthe frame in more detail. For more info, see\nhttps://github.com/facebook/zstd/blob/master/doc/zstd_compression_format.md.\n\n``zstd.get_frame_parameters(data)`` parses a zstd *frame* header from a bytes\ninstance and return a ``FrameParameters`` object describing the frame.\n\nDepending on which fields are present in the frame and their values, the\nlength of the frame parameters varies. If insufficient bytes are passed\nin to fully parse the frame parameters, ``ZstdError`` is raised. To ensure\nframe parameters can be parsed, pass in at least 18 bytes.\n\n``FrameParameters`` instances have the following attributes:\n\ncontent_size\n   Integer size of original, uncompressed content. This will be ``0`` if the\n   original content size isn't written to the frame (controlled with the\n   ``write_content_size`` argument to ``ZstdCompressor``) or if the input\n   content size was ``0``.\n\nwindow_size\n   Integer size of maximum back-reference distance in compressed data.\n\ndict_id\n   Integer of dictionary ID used for compression. ``0`` if no dictionary\n   ID was used or if the dictionary ID was ``0``.\n\nhas_checksum\n   Bool indicating whether a 4 byte content checksum is stored at the end\n   of the frame.\n\n``zstd.frame_header_size(data)`` returns the size of the zstandard frame\nheader.\n\n``zstd.frame_content_size(data)`` returns the content size as parsed from\nthe frame header. ``-1`` means the content size is unknown. ``0`` means\nan empty frame. The content size is usually correct. However, it may not\nbe accurate.\n\nMisc Functionality\n------------------\n\nestimate_decompression_context_size()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEstimate the memory size requirements for a decompressor instance.\n\nConstants\n---------\n\nThe following module constants/attributes are exposed:\n\nZSTD_VERSION\n    This module attribute exposes a 3-tuple of the Zstandard version. e.g.\n    ``(1, 0, 0)``\nMAX_COMPRESSION_LEVEL\n    Integer max compression level accepted by compression functions\nCOMPRESSION_RECOMMENDED_INPUT_SIZE\n    Recommended chunk size to feed to compressor functions\nCOMPRESSION_RECOMMENDED_OUTPUT_SIZE\n    Recommended chunk size for compression output\nDECOMPRESSION_RECOMMENDED_INPUT_SIZE\n    Recommended chunk size to feed into decompresor functions\nDECOMPRESSION_RECOMMENDED_OUTPUT_SIZE\n    Recommended chunk size for decompression output\n\nFRAME_HEADER\n    bytes containing header of the Zstandard frame\nMAGIC_NUMBER\n    Frame header as an integer\n\nFLUSH_BLOCK\n    Flushing behavior that denotes to flush a zstd block. A decompressor will\n    be able to decode all data fed into the compressor so far.\nFLUSH_FRAME\n    Flushing behavior that denotes to end a zstd frame. Any new data fed\n    to the compressor will start a new frame.\n\nCONTENTSIZE_UNKNOWN\n    Value for content size when the content size is unknown.\nCONTENTSIZE_ERROR\n    Value for content size when content size couldn't be determined.\n\nWINDOWLOG_MIN\n    Minimum value for compression parameter\nWINDOWLOG_MAX\n    Maximum value for compression parameter\nCHAINLOG_MIN\n    Minimum value for compression parameter\nCHAINLOG_MAX\n    Maximum value for compression parameter\nHASHLOG_MIN\n    Minimum value for compression parameter\nHASHLOG_MAX\n    Maximum value for compression parameter\nSEARCHLOG_MIN\n    Minimum value for compression parameter\nSEARCHLOG_MAX\n    Maximum value for compression parameter\nMINMATCH_MIN\n    Minimum value for compression parameter\nMINMATCH_MAX\n    Maximum value for compression parameter\nSEARCHLENGTH_MIN\n    Minimum value for compression parameter\n\n    Deprecated: use ``MINMATCH_MIN``\nSEARCHLENGTH_MAX\n    Maximum value for compression parameter\n\n    Deprecated: use ``MINMATCH_MAX``\nTARGETLENGTH_MIN\n    Minimum value for compression parameter\nSTRATEGY_FAST\n    Compression strategy\nSTRATEGY_DFAST\n    Compression strategy\nSTRATEGY_GREEDY\n    Compression strategy\nSTRATEGY_LAZY\n    Compression strategy\nSTRATEGY_LAZY2\n    Compression strategy\nSTRATEGY_BTLAZY2\n    Compression strategy\nSTRATEGY_BTOPT\n    Compression strategy\nSTRATEGY_BTULTRA\n    Compression strategy\nSTRATEGY_BTULTRA2\n    Compression strategy\n\nFORMAT_ZSTD1\n    Zstandard frame format\nFORMAT_ZSTD1_MAGICLESS\n    Zstandard frame format without magic header\n\nPerformance Considerations\n--------------------------\n\nThe ``ZstdCompressor`` and ``ZstdDecompressor`` types maintain state to a\npersistent compression or decompression *context*. Reusing a ``ZstdCompressor``\nor ``ZstdDecompressor`` instance for multiple operations is faster than\ninstantiating a new ``ZstdCompressor`` or ``ZstdDecompressor`` for each\noperation. The differences are magnified as the size of data decreases. For\nexample, the difference between *context* reuse and non-reuse for 100,000\n100 byte inputs will be significant (possiby over 10x faster to reuse contexts)\nwhereas 10 100,000,000 byte inputs will be more similar in speed (because the\ntime spent doing compression dwarfs time spent creating new *contexts*).\n\nBuffer Types\n------------\n\nThe API exposes a handful of custom types for interfacing with memory buffers.\nThe primary goal of these types is to facilitate efficient multi-object\noperations.\n\nThe essential idea is to have a single memory allocation provide backing\nstorage for multiple logical objects. This has 2 main advantages: fewer\nallocations and optimal memory access patterns. This avoids having to allocate\na Python object for each logical object and furthermore ensures that access of\ndata for objects can be sequential (read: fast) in memory.\n\nBufferWithSegments\n^^^^^^^^^^^^^^^^^^\n\nThe ``BufferWithSegments`` type represents a memory buffer containing N\ndiscrete items of known lengths (segments). It is essentially a fixed size\nmemory address and an array of 2-tuples of ``(offset, length)`` 64-bit\nunsigned native endian integers defining the byte offset and length of each\nsegment within the buffer.\n\nInstances behave like containers.\n\n``len()`` returns the number of segments within the instance.\n\n``o[index]`` or ``__getitem__`` obtains a ``BufferSegment`` representing an\nindividual segment within the backing buffer. That returned object references\n(not copies) memory. This means that iterating all objects doesn't copy\ndata within the buffer.\n\nThe ``.size`` attribute contains the total size in bytes of the backing\nbuffer.\n\nInstances conform to the buffer protocol. So a reference to the backing bytes\ncan be obtained via ``memoryview(o)``. A *copy* of the backing bytes can also\nbe obtained via ``.tobytes()``.\n\nThe ``.segments`` attribute exposes the array of ``(offset, length)`` for\nsegments within the buffer. It is a ``BufferSegments`` type.\n\nBufferSegment\n^^^^^^^^^^^^^\n\nThe ``BufferSegment`` type represents a segment within a ``BufferWithSegments``.\nIt is essentially a reference to N bytes within a ``BufferWithSegments``.\n\n``len()`` returns the length of the segment in bytes.\n\n``.offset`` contains the byte offset of this segment within its parent\n``BufferWithSegments`` instance.\n\nThe object conforms to the buffer protocol. ``.tobytes()`` can be called to\nobtain a ``bytes`` instance with a copy of the backing bytes.\n\nBufferSegments\n^^^^^^^^^^^^^^\n\nThis type represents an array of ``(offset, length)`` integers defining segments\nwithin a ``BufferWithSegments``.\n\nThe array members are 64-bit unsigned integers using host/native bit order.\n\nInstances conform to the buffer protocol.\n\nBufferWithSegmentsCollection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``BufferWithSegmentsCollection`` type represents a virtual spanning view\nof multiple ``BufferWithSegments`` instances.\n\nInstances are constructed from 1 or more ``BufferWithSegments`` instances. The\nresulting object behaves like an ordered sequence whose members are the\nsegments within each ``BufferWithSegments``.\n\n``len()`` returns the number of segments within all ``BufferWithSegments``\ninstances.\n\n``o[index]`` and ``__getitem__(index)`` return the ``BufferSegment`` at\nthat offset as if all ``BufferWithSegments`` instances were a single\nentity.\n\nIf the object is composed of 2 ``BufferWithSegments`` instances with the\nfirst having 2 segments and the second have 3 segments, then ``b[0]``\nand ``b[1]`` access segments in the first object and ``b[2]``, ``b[3]``,\nand ``b[4]`` access segments from the second.\n\nChoosing an API\n===============\n\nThere are multiple APIs for performing compression and decompression. This is\nbecause different applications have different needs and the library wants to\nfacilitate optimal use in as many use cases as possible.\n\nFrom a high-level, APIs are divided into *one-shot* and *streaming*: either you\nare operating on all data at once or you operate on it piecemeal.\n\nThe *one-shot* APIs are useful for small data, where the input or output\nsize is known. (The size can come from a buffer length, file size, or\nstored in the zstd frame header.) A limitation of the *one-shot* APIs is that\ninput and output must fit in memory simultaneously. For say a 4 GB input,\nthis is often not feasible.\n\nThe *one-shot* APIs also perform all work as a single operation. So, if you\nfeed it large input, it could take a long time for the function to return.\n\nThe streaming APIs do not have the limitations of the simple API. But the\nprice you pay for this flexibility is that they are more complex than a\nsingle function call.\n\nThe streaming APIs put the caller in control of compression and decompression\nbehavior by allowing them to directly control either the input or output side\nof the operation.\n\nWith the *streaming input*, *compressor*, and *decompressor* APIs, the caller\nhas full control over the input to the compression or decompression stream.\nThey can directly choose when new data is operated on.\n\nWith the *streaming ouput* APIs, the caller has full control over the output\nof the compression or decompression stream. It can choose when to receive\nnew data.\n\nWhen using the *streaming* APIs that operate on file-like or stream objects,\nit is important to consider what happens in that object when I/O is requested.\nThere is potential for long pauses as data is read or written from the\nunderlying stream (say from interacting with a filesystem or network). This\ncould add considerable overhead.\n\nThread Safety\n=============\n\n``ZstdCompressor`` and ``ZstdDecompressor`` instances have no guarantees\nabout thread safety. Do not operate on the same ``ZstdCompressor`` and\n``ZstdDecompressor`` instance simultaneously from different threads. It is\nfine to have different threads call into a single instance, just not at the\nsame time.\n\nSome operations require multiple function calls to complete. e.g. streaming\noperations. A single ``ZstdCompressor`` or ``ZstdDecompressor`` cannot be used\nfor simultaneously active operations. e.g. you must not start a streaming\noperation when another streaming operation is already active.\n\nThe C extension releases the GIL during non-trivial calls into the zstd C\nAPI. Non-trivial calls are notably compression and decompression. Trivial\ncalls are things like parsing frame parameters. Where the GIL is released\nis considered an implementation detail and can change in any release.\n\nAPIs that accept bytes-like objects don't enforce that the underlying object\nis read-only. However, it is assumed that the passed object is read-only for\nthe duration of the function call. It is possible to pass a mutable object\n(like a ``bytearray``) to e.g. ``ZstdCompressor.compress()``, have the GIL\nreleased, and mutate the object from another thread. Such a race condition\nis a bug in the consumer of python-zstandard. Most Python data types are\nimmutable, so unless you are doing something fancy, you don't need to\nworry about this.\n\nNote on Zstandard's *Experimental* API\n======================================\n\nMany of the Zstandard APIs used by this module are marked as *experimental*\nwithin the Zstandard project.\n\nIt is unclear how Zstandard's C API will evolve over time, especially with\nregards to this *experimental* functionality. We will try to maintain\nbackwards compatibility at the Python API level. However, we cannot\nguarantee this for things not under our control.\n\nSince a copy of the Zstandard source code is distributed with this\nmodule and since we compile against it, the behavior of a specific\nversion of this module should be constant for all of time. So if you\npin the version of this module used in your projects (which is a Python\nbest practice), you should be shielded from unwanted future changes.\n\nDonate\n======\n\nA lot of time has been invested into this project by the author.\n\nIf you find this project useful and would like to thank the author for\ntheir work, consider donating some money. Any amount is appreciated.\n\n.. image:: https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\n    :target: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=gregory%2eszorc%40gmail%2ecom&lc=US&item_name=python%2dzstandard&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted\n    :alt: Donate via PayPal\n\n.. |ci-status| image:: https://dev.azure.com/gregoryszorc/python-zstandard/_apis/build/status/indygreg.python-zstandard?branchName=master\n    :target: https://dev.azure.com/gregoryszorc/python-zstandard/_apis/build/status/indygreg.python-zstandard?branchName=master\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/indygreg/python-zstandard", "keywords": "zstandard zstd compression", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "zstandard", "package_url": "https://pypi.org/project/zstandard/", "platform": "", "project_url": "https://pypi.org/project/zstandard/", "project_urls": {"Homepage": "https://github.com/indygreg/python-zstandard"}, "release_url": "https://pypi.org/project/zstandard/0.13.0/", "requires_dist": null, "requires_python": "", "summary": "Zstandard bindings for Python", "version": "0.13.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project provides Python bindings for interfacing with the\n<a href=\"http://www.zstd.net\" rel=\"nofollow\">Zstandard</a> compression library. A C extension\nand CFFI interface are provided.</p>\n<p>The primary goal of the project is to provide a rich interface to the\nunderlying C API through a Pythonic interface while not sacrificing\nperformance. This means exposing most of the features and flexibility\nof the C API while not sacrificing usability or safety that Python provides.</p>\n<p>The canonical home for this project lives in a Mercurial repository run by\nthe author. For convenience, that repository is frequently synchronized to\n<a href=\"https://github.com/indygreg/python-zstandard\" rel=\"nofollow\">https://github.com/indygreg/python-zstandard</a>.</p>\n<div>\n<div><a href=\"https://dev.azure.com/gregoryszorc/python-zstandard/_apis/build/status/indygreg.python-zstandard?branchName=master\" rel=\"nofollow\"><img alt=\"ci-status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3d74dfd2769bc4180168bd9d0260e889f2f8105/68747470733a2f2f6465762e617a7572652e636f6d2f677265676f7279737a6f72632f707974686f6e2d7a7374616e646172642f5f617069732f6275696c642f7374617475732f696e6479677265672e707974686f6e2d7a7374616e646172643f6272616e63684e616d653d6d6173746572\"></a></div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>This extension is designed to run with Python 2.7, 3.5, 3.6, 3.7, and 3.8\non common platforms (Linux, Windows, and OS X). On PyPy (both PyPy2 and PyPy3) we support version 6.0.0 and above.\nx86 and x86_64 are well-tested on Windows. Only x86_64 is well-tested on Linux and macOS.</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>This package is uploaded to PyPI at <a href=\"https://pypi.python.org/pypi/zstandard\" rel=\"nofollow\">https://pypi.python.org/pypi/zstandard</a>.\nSo, to install this package:</p>\n<pre>$ pip install zstandard\n</pre>\n<p>Binary wheels are made available for some platforms. If you need to\ninstall from a source distribution, all you should need is a working C\ncompiler and the Python development headers/libraries. On many Linux\ndistributions, you can install a <tt><span class=\"pre\">python-dev</span></tt> or <tt><span class=\"pre\">python-devel</span></tt>\npackage to provide these dependencies.</p>\n<p>Packages are also uploaded to Anaconda Cloud at\n<a href=\"https://anaconda.org/indygreg/zstandard\" rel=\"nofollow\">https://anaconda.org/indygreg/zstandard</a>. See that URL for how to install\nthis package with <tt>conda</tt>.</p>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>zstandard is a highly tunable compression algorithm. In its default settings\n(compression level 3), it will be faster at compression and decompression and\nwill have better compression ratios than zlib on most data sets. When tuned\nfor speed, it approaches lz4\u2019s speed and ratios. When tuned for compression\nratio, it approaches lzma ratios and compression speed, but decompression\nspeed is much faster. See the official zstandard documentation for more.</p>\n<p>zstandard and this library support multi-threaded compression. There is a\nmechanism to compress large inputs using multiple threads.</p>\n<p>The performance of this library is usually very similar to what the zstandard\nC API can deliver. Overhead in this library is due to general Python overhead\nand can\u2019t easily be avoided by <em>any</em> zstandard Python binding. This library\nexposes multiple APIs for performing compression and decompression so callers\ncan pick an API suitable for their need. Contrast with the compression\nmodules in Python\u2019s standard library (like <tt>zlib</tt>), which only offer limited\nmechanisms for performing operations. The API flexibility means consumers can\nchoose to use APIs that facilitate zero copying or minimize Python object\ncreation and garbage collection overhead.</p>\n<p>This library is capable of single-threaded throughputs well over 1 GB/s. For\nexact numbers, measure yourself. The source code repository has a <tt>bench.py</tt>\nscript that can be used to measure things.</p>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>To interface with Zstandard, simply import the <tt>zstandard</tt> module:</p>\n<pre>import zstandard\n</pre>\n<p>It is a popular convention to alias the module as a different name for\nbrevity:</p>\n<pre>import zstandard as zstd\n</pre>\n<p>This module attempts to import and use either the C extension or CFFI\nimplementation. On Python platforms known to support C extensions (like\nCPython), it raises an ImportError if the C extension cannot be imported.\nOn Python platforms known to not support C extensions (like PyPy), it only\nattempts to import the CFFI implementation and raises ImportError if that\ncan\u2019t be done. On other platforms, it first tries to import the C extension\nthen falls back to CFFI if that fails and raises ImportError if CFFI fails.</p>\n<p>To change the module import behavior, a <tt>PYTHON_ZSTANDARD_IMPORT_POLICY</tt>\nenvironment variable can be set. The following values are accepted:</p>\n<dl>\n<dt>default</dt>\n<dd>The behavior described above.</dd>\n<dt>cffi_fallback</dt>\n<dd>Always try to import the C extension then fall back to CFFI if that\nfails.</dd>\n<dt>cext</dt>\n<dd>Only attempt to import the C extension.</dd>\n<dt>cffi</dt>\n<dd>Only attempt to import the CFFI implementation.</dd>\n</dl>\n<p>In addition, the <tt>zstandard</tt> module exports a <tt>backend</tt> attribute\ncontaining the string name of the backend being used. It will be one\nof <tt>cext</tt> or <tt>cffi</tt> (for <em>C extension</em> and <em>cffi</em>, respectively).</p>\n<p>The types, functions, and attributes exposed by the <tt>zstandard</tt> module\nare documented in the sections below.</p>\n<div>\n<p>Note</p>\n<p>The documentation in this section makes references to various zstd\nconcepts and functionality. The source repository contains a\n<tt>docs/concepts.rst</tt> file explaining these in more detail.</p>\n</div>\n<div id=\"zstdcompressor\">\n<h3>ZstdCompressor</h3>\n<p>The <tt>ZstdCompressor</tt> class provides an interface for performing\ncompression operations. Each instance is essentially a wrapper around a\n<tt>ZSTD_CCtx</tt> from the C API.</p>\n<p>Each instance is associated with parameters that control compression\nbehavior. These come from the following named arguments (all optional):</p>\n<dl>\n<dt>level</dt>\n<dd>Integer compression level. Valid values are between 1 and 22.</dd>\n<dt>dict_data</dt>\n<dd><p>Compression dictionary to use.</p>\n<p>Note: When using dictionary data and <tt>compress()</tt> is called multiple\ntimes, the <tt>ZstdCompressionParameters</tt> derived from an integer\ncompression <tt>level</tt> and the first compressed data\u2019s size will be reused\nfor all subsequent operations. This may not be desirable if source data\nsize varies significantly.</p>\n</dd>\n<dt>compression_params</dt>\n<dd>A <tt>ZstdCompressionParameters</tt> instance defining compression settings.</dd>\n<dt>write_checksum</dt>\n<dd>Whether a 4 byte checksum should be written with the compressed data.\nDefaults to False. If True, the decompressor can verify that decompressed\ndata matches the original input data.</dd>\n<dt>write_content_size</dt>\n<dd>Whether the size of the uncompressed data will be written into the\nheader of compressed data. Defaults to True. The data will only be\nwritten if the compressor knows the size of the input data. This is\noften not true for streaming compression.</dd>\n<dt>write_dict_id</dt>\n<dd>Whether to write the dictionary ID into the compressed data.\nDefaults to True. The dictionary ID is only written if a dictionary\nis being used.</dd>\n<dt>threads</dt>\n<dd>Enables and sets the number of threads to use for multi-threaded compression\noperations. Defaults to 0, which means to use single-threaded compression.\nNegative values will resolve to the number of logical CPUs in the system.\nRead below for more info on multi-threaded compression. This argument only\ncontrols thread count for operations that operate on individual pieces of\ndata. APIs that spawn multiple threads for working on multiple pieces of\ndata have their own <tt>threads</tt> argument.</dd>\n</dl>\n<p><tt>compression_params</tt> is mutually exclusive with <tt>level</tt>, <tt>write_checksum</tt>,\n<tt>write_content_size</tt>, <tt>write_dict_id</tt>, and <tt>threads</tt>.</p>\n<p>Unless specified otherwise, assume that no two methods of <tt>ZstdCompressor</tt>\ninstances can be called from multiple Python threads simultaneously. In other\nwords, assume instances are not thread safe unless stated otherwise.</p>\n<div id=\"utility-methods\">\n<h4>Utility Methods</h4>\n<p><tt>frame_progression()</tt> returns a 3-tuple containing the number of bytes\ningested, consumed, and produced by the current compression operation.</p>\n<p><tt>memory_size()</tt> obtains the memory utilization of the underlying zstd\ncompression context, in bytes.:</p>\n<pre>cctx = zstd.ZstdCompressor()\nmemory = cctx.memory_size()\n</pre>\n</div>\n<div id=\"simple-api\">\n<h4>Simple API</h4>\n<p><tt>compress(data)</tt> compresses and returns data as a one-shot operation.:</p>\n<pre>cctx = zstd.ZstdCompressor()\ncompressed = cctx.compress(b'data to compress')\n</pre>\n<p>The <tt>data</tt> argument can be any object that implements the <em>buffer protocol</em>.</p>\n</div>\n<div id=\"stream-reader-api\">\n<h4>Stream Reader API</h4>\n<p><tt>stream_reader(source)</tt> can be used to obtain an object conforming to the\n<tt>io.RawIOBase</tt> interface for reading compressed output as a stream:</p>\n<pre>with open(path, 'rb') as fh:\n    cctx = zstd.ZstdCompressor()\n    reader = cctx.stream_reader(fh)\n    while True:\n        chunk = reader.read(16384)\n        if not chunk:\n            break\n\n        # Do something with compressed chunk.\n</pre>\n<p>Instances can also be used as context managers:</p>\n<pre>with open(path, 'rb') as fh:\n    with cctx.stream_reader(fh) as reader:\n        while True:\n            chunk = reader.read(16384)\n            if not chunk:\n                break\n\n            # Do something with compressed chunk.\n</pre>\n<p>When the context manager exits or <tt>close()</tt> is called, the stream is closed,\nunderlying resources are released, and future operations against the compression\nstream will fail.</p>\n<p>The <tt>source</tt> argument to <tt>stream_reader()</tt> can be any object with a\n<tt>read(size)</tt> method or any object implementing the <em>buffer protocol</em>.</p>\n<p><tt>stream_reader()</tt> accepts a <tt>size</tt> argument specifying how large the input\nstream is. This is used to adjust compression parameters so they are\ntailored to the source size.:</p>\n<pre>with open(path, 'rb') as fh:\n    cctx = zstd.ZstdCompressor()\n    with cctx.stream_reader(fh, size=os.stat(path).st_size) as reader:\n        ...\n</pre>\n<p>If the <tt>source</tt> is a stream, you can specify how large <tt>read()</tt> requests\nto that stream should be via the <tt>read_size</tt> argument. It defaults to\n<tt>zstandard.COMPRESSION_RECOMMENDED_INPUT_SIZE</tt>.:</p>\n<pre>with open(path, 'rb') as fh:\n    cctx = zstd.ZstdCompressor()\n    # Will perform fh.read(8192) when obtaining data to feed into the\n    # compressor.\n    with cctx.stream_reader(fh, read_size=8192) as reader:\n        ...\n</pre>\n<p>The stream returned by <tt>stream_reader()</tt> is neither writable nor seekable\n(even if the underlying source is seekable). <tt>readline()</tt> and\n<tt>readlines()</tt> are not implemented because they don\u2019t make sense for\ncompressed data. <tt>tell()</tt> returns the number of compressed bytes\nemitted so far.</p>\n</div>\n<div id=\"streaming-input-api\">\n<h4>Streaming Input API</h4>\n<p><tt>stream_writer(fh)</tt> allows you to <em>stream</em> data into a compressor.</p>\n<p>Returned instances implement the <tt>io.RawIOBase</tt> interface. Only methods\nthat involve writing will do useful things.</p>\n<p>The argument to <tt>stream_writer()</tt> must have a <tt>write(data)</tt> method. As\ncompressed data is available, <tt>write()</tt> will be called with the compressed\ndata as its argument. Many common Python types implement <tt>write()</tt>, including\nopen file handles and <tt>io.BytesIO</tt>.</p>\n<p>The <tt>write(data)</tt> method is used to feed data into the compressor.</p>\n<p>The <tt><span class=\"pre\">flush([flush_mode=FLUSH_BLOCK])</span></tt> method can be called to evict whatever\ndata remains within the compressor\u2019s internal state into the output object. This\nmay result in 0 or more <tt>write()</tt> calls to the output object. This method\naccepts an optional <tt>flush_mode</tt> argument to control the flushing behavior.\nIts value can be any of the <tt>FLUSH_*</tt> constants.</p>\n<p>Both <tt>write()</tt> and <tt>flush()</tt> return the number of bytes written to the\nobject\u2019s <tt>write()</tt>. In many cases, small inputs do not accumulate enough\ndata to cause a write and <tt>write()</tt> will return <tt>0</tt>.</p>\n<p>Calling <tt>close()</tt> will mark the stream as closed and subsequent I/O\noperations will raise <tt>ValueError</tt> (per the documented behavior of\n<tt>io.RawIOBase</tt>). <tt>close()</tt> will also call <tt>close()</tt> on the underlying\nstream if such a method exists.</p>\n<p>Typically usage is as follows:</p>\n<pre>cctx = zstd.ZstdCompressor(level=10)\ncompressor = cctx.stream_writer(fh)\n\ncompressor.write(b'chunk 0\\n')\ncompressor.write(b'chunk 1\\n')\ncompressor.flush()\n# Receiver will be able to decode ``chunk 0\\nchunk 1\\n`` at this point.\n# Receiver is also expecting more data in the zstd *frame*.\n\ncompressor.write(b'chunk 2\\n')\ncompressor.flush(zstd.FLUSH_FRAME)\n# Receiver will be able to decode ``chunk 0\\nchunk 1\\nchunk 2``.\n# Receiver is expecting no more data, as the zstd frame is closed.\n# Any future calls to ``write()`` at this point will construct a new\n# zstd frame.\n</pre>\n<p>Instances can be used as context managers. Exiting the context manager is\nthe equivalent of calling <tt>close()</tt>, which is equivalent to calling\n<tt>flush(zstd.FLUSH_FRAME)</tt>:</p>\n<pre>cctx = zstd.ZstdCompressor(level=10)\nwith cctx.stream_writer(fh) as compressor:\n    compressor.write(b'chunk 0')\n    compressor.write(b'chunk 1')\n    ...\n</pre>\n<div>\n<p>Important</p>\n<p>If <tt>flush(FLUSH_FRAME)</tt> is not called, emitted data doesn\u2019t constitute\na full zstd <em>frame</em> and consumers of this data may complain about malformed\ninput. It is recommended to use instances as a context manager to ensure\n<em>frames</em> are properly finished.</p>\n</div>\n<p>If the size of the data being fed to this streaming compressor is known,\nyou can declare it before compression begins:</p>\n<pre>cctx = zstd.ZstdCompressor()\nwith cctx.stream_writer(fh, size=data_len) as compressor:\n    compressor.write(chunk0)\n    compressor.write(chunk1)\n    ...\n</pre>\n<p>Declaring the size of the source data allows compression parameters to\nbe tuned. And if <tt>write_content_size</tt> is used, it also results in the\ncontent size being written into the frame header of the output data.</p>\n<p>The size of chunks being <tt>write()</tt> to the destination can be specified:</p>\n<pre>cctx = zstd.ZstdCompressor()\nwith cctx.stream_writer(fh, write_size=32768) as compressor:\n    ...\n</pre>\n<p>To see how much memory is being used by the streaming compressor:</p>\n<pre>cctx = zstd.ZstdCompressor()\nwith cctx.stream_writer(fh) as compressor:\n    ...\n    byte_size = compressor.memory_size()\n</pre>\n<p>Thte total number of bytes written so far are exposed via <tt>tell()</tt>:</p>\n<pre>cctx = zstd.ZstdCompressor()\nwith cctx.stream_writer(fh) as compressor:\n    ...\n    total_written = compressor.tell()\n</pre>\n<p><tt>stream_writer()</tt> accepts a <tt>write_return_read</tt> boolean argument to control\nthe return value of <tt>write()</tt>. When <tt>False</tt> (the default), <tt>write()</tt> returns\nthe number of bytes that were <tt><span class=\"pre\">write()``en</span> to the underlying object. When\n``True</tt>, <tt>write()</tt> returns the number of bytes read from the input that\nwere subsequently written to the compressor. <tt>True</tt> is the <em>proper</em> behavior\nfor <tt>write()</tt> as specified by the <tt>io.RawIOBase</tt> interface and will become\nthe default value in a future release.</p>\n</div>\n<div id=\"streaming-output-api\">\n<h4>Streaming Output API</h4>\n<p><tt>read_to_iter(reader)</tt> provides a mechanism to stream data out of a\ncompressor as an iterator of data chunks.:</p>\n<pre>cctx = zstd.ZstdCompressor()\nfor chunk in cctx.read_to_iter(fh):\n     # Do something with emitted data.\n</pre>\n<p><tt>read_to_iter()</tt> accepts an object that has a <tt>read(size)</tt> method or\nconforms to the buffer protocol.</p>\n<p>Uncompressed data is fetched from the source either by calling <tt>read(size)</tt>\nor by fetching a slice of data from the object directly (in the case where\nthe buffer protocol is being used). The returned iterator consists of chunks\nof compressed data.</p>\n<p>If reading from the source via <tt>read()</tt>, <tt>read()</tt> will be called until\nit raises or returns an empty bytes (<tt>b''</tt>). It is perfectly valid for\nthe source to deliver fewer bytes than were what requested by <tt>read(size)</tt>.</p>\n<p>Like <tt>stream_writer()</tt>, <tt>read_to_iter()</tt> also accepts a <tt>size</tt> argument\ndeclaring the size of the input stream:</p>\n<pre>cctx = zstd.ZstdCompressor()\nfor chunk in cctx.read_to_iter(fh, size=some_int):\n    pass\n</pre>\n<p>You can also control the size that data is <tt>read()</tt> from the source and\nthe ideal size of output chunks:</p>\n<pre>cctx = zstd.ZstdCompressor()\nfor chunk in cctx.read_to_iter(fh, read_size=16384, write_size=8192):\n    pass\n</pre>\n<p>Unlike <tt>stream_writer()</tt>, <tt>read_to_iter()</tt> does not give direct control\nover the sizes of chunks fed into the compressor. Instead, chunk sizes will\nbe whatever the object being read from delivers. These will often be of a\nuniform size.</p>\n</div>\n<div id=\"stream-copying-api\">\n<h4>Stream Copying API</h4>\n<p><tt>copy_stream(ifh, ofh)</tt> can be used to copy data between 2 streams while\ncompressing it.:</p>\n<pre>cctx = zstd.ZstdCompressor()\ncctx.copy_stream(ifh, ofh)\n</pre>\n<p>For example, say you wish to compress a file:</p>\n<pre>cctx = zstd.ZstdCompressor()\nwith open(input_path, 'rb') as ifh, open(output_path, 'wb') as ofh:\n    cctx.copy_stream(ifh, ofh)\n</pre>\n<p>It is also possible to declare the size of the source stream:</p>\n<pre>cctx = zstd.ZstdCompressor()\ncctx.copy_stream(ifh, ofh, size=len_of_input)\n</pre>\n<p>You can also specify how large the chunks that are <tt>read()</tt> and <tt>write()</tt>\nfrom and to the streams:</p>\n<pre>cctx = zstd.ZstdCompressor()\ncctx.copy_stream(ifh, ofh, read_size=32768, write_size=16384)\n</pre>\n<p>The stream copier returns a 2-tuple of bytes read and written:</p>\n<pre>cctx = zstd.ZstdCompressor()\nread_count, write_count = cctx.copy_stream(ifh, ofh)\n</pre>\n</div>\n<div id=\"compressor-api\">\n<h4>Compressor API</h4>\n<p><tt>compressobj()</tt> returns an object that exposes <tt>compress(data)</tt> and\n<tt>flush()</tt> methods. Each returns compressed data or an empty bytes.</p>\n<p>The purpose of <tt>compressobj()</tt> is to provide an API-compatible interface\nwith <tt>zlib.compressobj</tt>, <tt>bz2.BZ2Compressor</tt>, etc. This allows callers to\nswap in different compressor objects while using the same API.</p>\n<p><tt>flush()</tt> accepts an optional argument indicating how to end the stream.\n<tt>zstd.COMPRESSOBJ_FLUSH_FINISH</tt> (the default) ends the compression stream.\nOnce this type of flush is performed, <tt>compress()</tt> and <tt>flush()</tt> can\nno longer be called. This type of flush <strong>must</strong> be called to end the\ncompression context. If not called, returned data may be incomplete.</p>\n<p>A <tt>zstd.COMPRESSOBJ_FLUSH_BLOCK</tt> argument to <tt>flush()</tt> will flush a\nzstd block. Flushes of this type can be performed multiple times. The next\ncall to <tt>compress()</tt> will begin a new zstd block.</p>\n<p>Here is how this API should be used:</p>\n<pre>cctx = zstd.ZstdCompressor()\ncobj = cctx.compressobj()\ndata = cobj.compress(b'raw input 0')\ndata = cobj.compress(b'raw input 1')\ndata = cobj.flush()\n</pre>\n<p>Or to flush blocks:</p>\n<pre>cctx.zstd.ZstdCompressor()\ncobj = cctx.compressobj()\ndata = cobj.compress(b'chunk in first block')\ndata = cobj.flush(zstd.COMPRESSOBJ_FLUSH_BLOCK)\ndata = cobj.compress(b'chunk in second block')\ndata = cobj.flush()\n</pre>\n<p>For best performance results, keep input chunks under 256KB. This avoids\nextra allocations for a large output object.</p>\n<p>It is possible to declare the input size of the data that will be fed into\nthe compressor:</p>\n<pre>cctx = zstd.ZstdCompressor()\ncobj = cctx.compressobj(size=6)\ndata = cobj.compress(b'foobar')\ndata = cobj.flush()\n</pre>\n</div>\n<div id=\"chunker-api\">\n<h4>Chunker API</h4>\n<p><tt>chunker(size=None, chunk_size=COMPRESSION_RECOMMENDED_OUTPUT_SIZE)</tt> returns\nan object that can be used to iteratively feed chunks of data into a compressor\nand produce output chunks of a uniform size.</p>\n<p>The object returned by <tt>chunker()</tt> exposes the following methods:</p>\n<dl>\n<dt><tt>compress(data)</tt></dt>\n<dd>Feeds new input data into the compressor.</dd>\n<dt><tt>flush()</tt></dt>\n<dd>Flushes all data currently in the compressor.</dd>\n<dt><tt>finish()</tt></dt>\n<dd>Signals the end of input data. No new data can be compressed after this\nmethod is called.</dd>\n</dl>\n<p><tt>compress()</tt>, <tt>flush()</tt>, and <tt>finish()</tt> all return an iterator of\n<tt>bytes</tt> instances holding compressed data. The iterator may be empty. Callers\nMUST iterate through all elements of the returned iterator before performing\nanother operation on the object.</p>\n<p>All chunks emitted by <tt>compress()</tt> will have a length of <tt>chunk_size</tt>.</p>\n<p><tt>flush()</tt> and <tt>finish()</tt> may return a final chunk smaller than\n<tt>chunk_size</tt>.</p>\n<p>Here is how the API should be used:</p>\n<pre>cctx = zstd.ZstdCompressor()\nchunker = cctx.chunker(chunk_size=32768)\n\nwith open(path, 'rb') as fh:\n    while True:\n        in_chunk = fh.read(32768)\n        if not in_chunk:\n            break\n\n        for out_chunk in chunker.compress(in_chunk):\n            # Do something with output chunk of size 32768.\n\n    for out_chunk in chunker.finish():\n        # Do something with output chunks that finalize the zstd frame.\n</pre>\n<p>The <tt>chunker()</tt> API is often a better alternative to <tt>compressobj()</tt>.</p>\n<p><tt>compressobj()</tt> will emit output data as it is available. This results in a\n<em>stream</em> of output chunks of varying sizes. The consistency of the output chunk\nsize with <tt>chunker()</tt> is more appropriate for many usages, such as sending\ncompressed data to a socket.</p>\n<p><tt>compressobj()</tt> may also perform extra memory reallocations in order to\ndynamically adjust the sizes of the output chunks. Since <tt>chunker()</tt> output\nchunks are all the same size (except for flushed or final chunks), there is\nless memory allocation overhead.</p>\n</div>\n<div id=\"batch-compression-api\">\n<h4>Batch Compression API</h4>\n<p>(Experimental. Not yet supported in CFFI bindings.)</p>\n<p><tt>multi_compress_to_buffer(data, [threads=0])</tt> performs compression of multiple\ninputs as a single operation.</p>\n<p>Data to be compressed can be passed as a <tt>BufferWithSegmentsCollection</tt>, a\n<tt>BufferWithSegments</tt>, or a list containing byte like objects. Each element of\nthe container will be compressed individually using the configured parameters\non the <tt>ZstdCompressor</tt> instance.</p>\n<p>The <tt>threads</tt> argument controls how many threads to use for compression. The\ndefault is <tt>0</tt> which means to use a single thread. Negative values use the\nnumber of logical CPUs in the machine.</p>\n<p>The function returns a <tt>BufferWithSegmentsCollection</tt>. This type represents\nN discrete memory allocations, eaching holding 1 or more compressed frames.</p>\n<p>Output data is written to shared memory buffers. This means that unlike\nregular Python objects, a reference to <em>any</em> object within the collection\nkeeps the shared buffer and therefore memory backing it alive. This can have\nundesirable effects on process memory usage.</p>\n<p>The API and behavior of this function is experimental and will likely change.\nKnown deficiencies include:</p>\n<ul>\n<li>If asked to use multiple threads, it will always spawn that many threads,\neven if the input is too small to use them. It should automatically lower\nthe thread count when the extra threads would just add overhead.</li>\n<li>The buffer allocation strategy is fixed. There is room to make it dynamic,\nperhaps even to allow one output buffer per input, facilitating a variation\nof the API to return a list without the adverse effects of shared memory\nbuffers.</li>\n</ul>\n</div>\n</div>\n<div id=\"zstddecompressor\">\n<h3>ZstdDecompressor</h3>\n<p>The <tt>ZstdDecompressor</tt> class provides an interface for performing\ndecompression. It is effectively a wrapper around the <tt>ZSTD_DCtx</tt> type from\nthe C API.</p>\n<p>Each instance is associated with parameters that control decompression. These\ncome from the following named arguments (all optional):</p>\n<dl>\n<dt>dict_data</dt>\n<dd>Compression dictionary to use.</dd>\n<dt>max_window_size</dt>\n<dd>Sets an uppet limit on the window size for decompression operations in\nkibibytes. This setting can be used to prevent large memory allocations\nfor inputs using large compression windows.</dd>\n<dt>format</dt>\n<dd>Set the format of data for the decoder. By default, this is\n<tt>zstd.FORMAT_ZSTD1</tt>. It can be set to <tt>zstd.FORMAT_ZSTD1_MAGICLESS</tt> to\nallow decoding frames without the 4 byte magic header. Not all decompression\nAPIs support this mode.</dd>\n</dl>\n<p>The interface of this class is very similar to <tt>ZstdCompressor</tt> (by design).</p>\n<p>Unless specified otherwise, assume that no two methods of <tt>ZstdDecompressor</tt>\ninstances can be called from multiple Python threads simultaneously. In other\nwords, assume instances are not thread safe unless stated otherwise.</p>\n<div id=\"id1\">\n<h4>Utility Methods</h4>\n<p><tt>memory_size()</tt> obtains the size of the underlying zstd decompression context,\nin bytes.:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nsize = dctx.memory_size()\n</pre>\n</div>\n<div id=\"id2\">\n<h4>Simple API</h4>\n<p><tt>decompress(data)</tt> can be used to decompress an entire compressed zstd\nframe in a single operation.:</p>\n<pre>dctx = zstd.ZstdDecompressor()\ndecompressed = dctx.decompress(data)\n</pre>\n<p>By default, <tt>decompress(data)</tt> will only work on data written with the content\nsize encoded in its header (this is the default behavior of\n<tt><span class=\"pre\">ZstdCompressor().compress()</span></tt> but may not be true for streaming compression). If\ncompressed data without an embedded content size is seen, <tt>zstd.ZstdError</tt> will\nbe raised.</p>\n<p>If the compressed data doesn\u2019t have its content size embedded within it,\ndecompression can be attempted by specifying the <tt>max_output_size</tt>\nargument.:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nuncompressed = dctx.decompress(data, max_output_size=1048576)\n</pre>\n<p>Ideally, <tt>max_output_size</tt> will be identical to the decompressed output\nsize.</p>\n<p>If <tt>max_output_size</tt> is too small to hold the decompressed data,\n<tt>zstd.ZstdError</tt> will be raised.</p>\n<p>If <tt>max_output_size</tt> is larger than the decompressed data, the allocated\noutput buffer will be resized to only use the space required.</p>\n<p>Please note that an allocation of the requested <tt>max_output_size</tt> will be\nperformed every time the method is called. Setting to a very large value could\nresult in a lot of work for the memory allocator and may result in\n<tt>MemoryError</tt> being raised if the allocation fails.</p>\n<div>\n<p>Important</p>\n<p>If the exact size of decompressed data is unknown (not passed in explicitly\nand not stored in the zstandard frame), for performance reasons it is\nencouraged to use a streaming API.</p>\n</div>\n</div>\n<div id=\"id3\">\n<h4>Stream Reader API</h4>\n<p><tt>stream_reader(source)</tt> can be used to obtain an object conforming to the\n<tt>io.RawIOBase</tt> interface for reading decompressed output as a stream:</p>\n<pre>with open(path, 'rb') as fh:\n    dctx = zstd.ZstdDecompressor()\n    reader = dctx.stream_reader(fh)\n    while True:\n        chunk = reader.read(16384)\n         if not chunk:\n             break\n\n         # Do something with decompressed chunk.\n</pre>\n<p>The stream can also be used as a context manager:</p>\n<pre>with open(path, 'rb') as fh:\n    dctx = zstd.ZstdDecompressor()\n    with dctx.stream_reader(fh) as reader:\n        ...\n</pre>\n<p>When used as a context manager, the stream is closed and the underlying\nresources are released when the context manager exits. Future operations against\nthe stream will fail.</p>\n<p>The <tt>source</tt> argument to <tt>stream_reader()</tt> can be any object with a\n<tt>read(size)</tt> method or any object implementing the <em>buffer protocol</em>.</p>\n<p>If the <tt>source</tt> is a stream, you can specify how large <tt>read()</tt> requests\nto that stream should be via the <tt>read_size</tt> argument. It defaults to\n<tt>zstandard.DECOMPRESSION_RECOMMENDED_INPUT_SIZE</tt>.:</p>\n<pre>with open(path, 'rb') as fh:\n    dctx = zstd.ZstdDecompressor()\n    # Will perform fh.read(8192) when obtaining data for the decompressor.\n    with dctx.stream_reader(fh, read_size=8192) as reader:\n        ...\n</pre>\n<p>The stream returned by <tt>stream_reader()</tt> is not writable.</p>\n<p>The stream returned by <tt>stream_reader()</tt> is <em>partially</em> seekable.\nAbsolute and relative positions (<tt>SEEK_SET</tt> and <tt>SEEK_CUR</tt>) forward\nof the current position are allowed. Offsets behind the current read\nposition and offsets relative to the end of stream are not allowed and\nwill raise <tt>ValueError</tt> if attempted.</p>\n<p><tt>tell()</tt> returns the number of decompressed bytes read so far.</p>\n<p>Not all I/O methods are implemented. Notably missing is support for\n<tt>readline()</tt>, <tt>readlines()</tt>, and linewise iteration support. This is\nbecause streams operate on binary data - not text data. If you want to\nconvert decompressed output to text, you can chain an <tt>io.TextIOWrapper</tt>\nto the stream:</p>\n<pre>with open(path, 'rb') as fh:\n    dctx = zstd.ZstdDecompressor()\n    stream_reader = dctx.stream_reader(fh)\n    text_stream = io.TextIOWrapper(stream_reader, encoding='utf-8')\n\n    for line in text_stream:\n        ...\n</pre>\n<p>The <tt>read_across_frames</tt> argument to <tt>stream_reader()</tt> controls the\nbehavior of read operations when the end of a zstd <em>frame</em> is encountered.\nWhen <tt>False</tt> (the default), a read will complete when the end of a\nzstd <em>frame</em> is encountered. When <tt>True</tt>, a read can potentially\nreturn data spanning multiple zstd <em>frames</em>.</p>\n</div>\n<div id=\"id4\">\n<h4>Streaming Input API</h4>\n<p><tt>stream_writer(fh)</tt> allows you to <em>stream</em> data into a decompressor.</p>\n<p>Returned instances implement the <tt>io.RawIOBase</tt> interface. Only methods\nthat involve writing will do useful things.</p>\n<p>The argument to <tt>stream_writer()</tt> is typically an object that also implements\n<tt>io.RawIOBase</tt>. But any object with a <tt>write(data)</tt> method will work. Many\ncommon Python types conform to this interface, including open file handles\nand <tt>io.BytesIO</tt>.</p>\n<p>Behavior is similar to <tt>ZstdCompressor.stream_writer()</tt>: compressed data\nis sent to the decompressor by calling <tt>write(data)</tt> and decompressed\noutput is written to the underlying stream by calling its <tt>write(data)</tt>\nmethod.:</p>\n<pre>dctx = zstd.ZstdDecompressor()\ndecompressor = dctx.stream_writer(fh)\n\ndecompressor.write(compressed_data)\n...\n</pre>\n<p>Calls to <tt>write()</tt> will return the number of bytes written to the output\nobject. Not all inputs will result in bytes being written, so return values\nof <tt>0</tt> are possible.</p>\n<p>Like the <tt>stream_writer()</tt> compressor, instances can be used as context\nmanagers. However, context managers add no extra special behavior and offer\nlittle to no benefit to being used.</p>\n<p>Calling <tt>close()</tt> will mark the stream as closed and subsequent I/O operations\nwill raise <tt>ValueError</tt> (per the documented behavior of <tt>io.RawIOBase</tt>).\n<tt>close()</tt> will also call <tt>close()</tt> on the underlying stream if such a\nmethod exists.</p>\n<p>The size of chunks being <tt>write()</tt> to the destination can be specified:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nwith dctx.stream_writer(fh, write_size=16384) as decompressor:\n    pass\n</pre>\n<p>You can see how much memory is being used by the decompressor:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nwith dctx.stream_writer(fh) as decompressor:\n    byte_size = decompressor.memory_size()\n</pre>\n<p><tt>stream_writer()</tt> accepts a <tt>write_return_read</tt> boolean argument to control\nthe return value of <tt>write()</tt>. When <tt>False</tt> (the default)``, <tt>write()</tt>\nreturns the number of bytes that were <tt><span class=\"pre\">write()``en</span> to the underlying stream.\nWhen ``True</tt>, <tt>write()</tt> returns the number of bytes read from the input.\n<tt>True</tt> is the <em>proper</em> behavior for <tt>write()</tt> as specified by the\n<tt>io.RawIOBase</tt> interface and will become the default in a future release.</p>\n</div>\n<div id=\"id5\">\n<h4>Streaming Output API</h4>\n<p><tt>read_to_iter(fh)</tt> provides a mechanism to stream decompressed data out of a\ncompressed source as an iterator of data chunks.:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nfor chunk in dctx.read_to_iter(fh):\n    # Do something with original data.\n</pre>\n<p><tt>read_to_iter()</tt> accepts an object with a <tt>read(size)</tt> method that will\nreturn  compressed bytes or an object conforming to the buffer protocol that\ncan expose its data as a contiguous range of bytes.</p>\n<p><tt>read_to_iter()</tt> returns an iterator whose elements are chunks of the\ndecompressed data.</p>\n<p>The size of requested <tt>read()</tt> from the source can be specified:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nfor chunk in dctx.read_to_iter(fh, read_size=16384):\n    pass\n</pre>\n<p>It is also possible to skip leading bytes in the input data:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nfor chunk in dctx.read_to_iter(fh, skip_bytes=1):\n    pass\n</pre>\n<div>\n<p>Tip</p>\n<p>Skipping leading bytes is useful if the source data contains extra\n<em>header</em> data. Traditionally, you would need to create a slice or\n<tt>memoryview</tt> of the data you want to decompress. This would create\noverhead. It is more efficient to pass the offset into this API.</p>\n</div>\n<p>Similarly to <tt>ZstdCompressor.read_to_iter()</tt>, the consumer of the iterator\ncontrols when data is decompressed. If the iterator isn\u2019t consumed,\ndecompression is put on hold.</p>\n<p>When <tt>read_to_iter()</tt> is passed an object conforming to the buffer protocol,\nthe behavior may seem similar to what occurs when the simple decompression\nAPI is used. However, this API works when the decompressed size is unknown.\nFurthermore, if feeding large inputs, the decompressor will work in chunks\ninstead of performing a single operation.</p>\n</div>\n<div id=\"id6\">\n<h4>Stream Copying API</h4>\n<p><tt>copy_stream(ifh, ofh)</tt> can be used to copy data across 2 streams while\nperforming decompression.:</p>\n<pre>dctx = zstd.ZstdDecompressor()\ndctx.copy_stream(ifh, ofh)\n</pre>\n<p>e.g. to decompress a file to another file:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nwith open(input_path, 'rb') as ifh, open(output_path, 'wb') as ofh:\n    dctx.copy_stream(ifh, ofh)\n</pre>\n<p>The size of chunks being <tt>read()</tt> and <tt>write()</tt> from and to the streams\ncan be specified:</p>\n<pre>dctx = zstd.ZstdDecompressor()\ndctx.copy_stream(ifh, ofh, read_size=8192, write_size=16384)\n</pre>\n</div>\n<div id=\"decompressor-api\">\n<h4>Decompressor API</h4>\n<p><tt>decompressobj()</tt> returns an object that exposes a <tt>decompress(data)</tt>\nmethod. Compressed data chunks are fed into <tt>decompress(data)</tt> and\nuncompressed output (or an empty bytes) is returned. Output from subsequent\ncalls needs to be concatenated to reassemble the full decompressed byte\nsequence.</p>\n<p>The purpose of <tt>decompressobj()</tt> is to provide an API-compatible interface\nwith <tt>zlib.decompressobj</tt> and <tt>bz2.BZ2Decompressor</tt>. This allows callers\nto swap in different decompressor objects while using the same API.</p>\n<p>Each object is single use: once an input frame is decoded, <tt>decompress()</tt>\ncan no longer be called.</p>\n<p>Here is how this API should be used:</p>\n<pre>dctx = zstd.ZstdDecompressor()\ndobj = dctx.decompressobj()\ndata = dobj.decompress(compressed_chunk_0)\ndata = dobj.decompress(compressed_chunk_1)\n</pre>\n<p>By default, calls to <tt>decompress()</tt> write output data in chunks of size\n<tt>DECOMPRESSION_RECOMMENDED_OUTPUT_SIZE</tt>. These chunks are concatenated\nbefore being returned to the caller. It is possible to define the size of\nthese temporary chunks by passing <tt>write_size</tt> to <tt>decompressobj()</tt>:</p>\n<pre>dctx = zstd.ZstdDecompressor()\ndobj = dctx.decompressobj(write_size=1048576)\n</pre>\n<div>\n<p>Note</p>\n<p>Because calls to <tt>decompress()</tt> may need to perform multiple\nmemory (re)allocations, this streaming decompression API isn\u2019t as\nefficient as other APIs.</p>\n</div>\n<p>For compatibility with the standard library APIs, instances expose a\n<tt><span class=\"pre\">flush([length=None])</span></tt> method. This method no-ops and has no meaningful\nside-effects, making it safe to call any time.</p>\n</div>\n<div id=\"batch-decompression-api\">\n<h4>Batch Decompression API</h4>\n<p>(Experimental. Not yet supported in CFFI bindings.)</p>\n<p><tt>multi_decompress_to_buffer()</tt> performs decompression of multiple\nframes as a single operation and returns a <tt>BufferWithSegmentsCollection</tt>\ncontaining decompressed data for all inputs.</p>\n<p>Compressed frames can be passed to the function as a <tt>BufferWithSegments</tt>,\na <tt>BufferWithSegmentsCollection</tt>, or as a list containing objects that\nconform to the buffer protocol. For best performance, pass a\n<tt>BufferWithSegmentsCollection</tt> or a <tt>BufferWithSegments</tt>, as\nminimal input validation will be done for that type. If calling from\nPython (as opposed to C), constructing one of these instances may add\noverhead cancelling out the performance overhead of validation for list\ninputs.:</p>\n<pre>dctx = zstd.ZstdDecompressor()\nresults = dctx.multi_decompress_to_buffer([b'...', b'...'])\n</pre>\n<p>The decompressed size of each frame MUST be discoverable. It can either be\nembedded within the zstd frame (<tt>write_content_size=True</tt> argument to\n<tt>ZstdCompressor</tt>) or passed in via the <tt>decompressed_sizes</tt> argument.</p>\n<p>The <tt>decompressed_sizes</tt> argument is an object conforming to the buffer\nprotocol which holds an array of 64-bit unsigned integers in the machine\u2019s\nnative format defining the decompressed sizes of each frame. If this argument\nis passed, it avoids having to scan each frame for its decompressed size.\nThis frame scanning can add noticeable overhead in some scenarios.:</p>\n<pre>frames = [...]\nsizes = struct.pack('=QQQQ', len0, len1, len2, len3)\n\ndctx = zstd.ZstdDecompressor()\nresults = dctx.multi_decompress_to_buffer(frames, decompressed_sizes=sizes)\n</pre>\n<p>The <tt>threads</tt> argument controls the number of threads to use to perform\ndecompression operations. The default (<tt>0</tt>) or the value <tt>1</tt> means to\nuse a single thread. Negative values use the number of logical CPUs in the\nmachine.</p>\n<div>\n<p>Note</p>\n<p>It is possible to pass a <tt>mmap.mmap()</tt> instance into this function by\nwrapping it with a <tt>BufferWithSegments</tt> instance (which will define the\noffsets of frames within the memory mapped region).</p>\n</div>\n<p>This function is logically equivalent to performing <tt>dctx.decompress()</tt>\non each input frame and returning the result.</p>\n<p>This function exists to perform decompression on multiple frames as fast\nas possible by having as little overhead as possible. Since decompression is\nperformed as a single operation and since the decompressed output is stored in\na single buffer, extra memory allocations, Python objects, and Python function\ncalls are avoided. This is ideal for scenarios where callers know up front that\nthey need to access data for multiple frames, such as when  <em>delta chains</em> are\nbeing used.</p>\n<p>Currently, the implementation always spawns multiple threads when requested,\neven if the amount of work to do is small. In the future, it will be smarter\nabout avoiding threads and their associated overhead when the amount of\nwork to do is small.</p>\n</div>\n<div id=\"prefix-dictionary-chain-decompression\">\n<h4>Prefix Dictionary Chain Decompression</h4>\n<p><tt>decompress_content_dict_chain(frames)</tt> performs decompression of a list of\nzstd frames produced using chained <em>prefix</em> dictionary compression. Such\na list of frames is produced by compressing discrete inputs where each\nnon-initial input is compressed with a <em>prefix</em> dictionary consisting of the\ncontent of the previous input.</p>\n<p>For example, say you have the following inputs:</p>\n<pre>inputs = [b'input 1', b'input 2', b'input 3']\n</pre>\n<p>The zstd frame chain consists of:</p>\n<ol>\n<li><tt>b'input 1'</tt> compressed in standalone/discrete mode</li>\n<li><tt>b'input 2'</tt> compressed using <tt>b'input 1'</tt> as a <em>prefix</em> dictionary</li>\n<li><tt>b'input 3'</tt> compressed using <tt>b'input 2'</tt> as a <em>prefix</em> dictionary</li>\n</ol>\n<p>Each zstd frame <strong>must</strong> have the content size written.</p>\n<p>The following Python code can be used to produce a <em>prefix dictionary chain</em>:</p>\n<pre>def make_chain(inputs):\n    frames = []\n\n    # First frame is compressed in standalone/discrete mode.\n    zctx = zstd.ZstdCompressor()\n    frames.append(zctx.compress(inputs[0]))\n\n    # Subsequent frames use the previous fulltext as a prefix dictionary\n    for i, raw in enumerate(inputs[1:]):\n        dict_data = zstd.ZstdCompressionDict(\n            inputs[i], dict_type=zstd.DICT_TYPE_RAWCONTENT)\n        zctx = zstd.ZstdCompressor(dict_data=dict_data)\n        frames.append(zctx.compress(raw))\n\n    return frames\n</pre>\n<p><tt>decompress_content_dict_chain()</tt> returns the uncompressed data of the last\nelement in the input chain.</p>\n<div>\n<p>Note</p>\n<p>It is possible to implement <em>prefix dictionary chain</em> decompression\non top of other APIs. However, this function will likely be faster -\nespecially for long input chains - as it avoids the overhead of instantiating\nand passing around intermediate objects between C and Python.</p>\n</div>\n</div>\n</div>\n<div id=\"multi-threaded-compression\">\n<h3>Multi-Threaded Compression</h3>\n<p><tt>ZstdCompressor</tt> accepts a <tt>threads</tt> argument that controls the number\nof threads to use for compression. The way this works is that input is split\ninto segments and each segment is fed into a worker pool for compression. Once\na segment is compressed, it is flushed/appended to the output.</p>\n<div>\n<p>Note</p>\n<p>These threads are created at the C layer and are not Python threads. So they\nwork outside the GIL. It is therefore possible to CPU saturate multiple cores\nfrom Python.</p>\n</div>\n<p>The segment size for multi-threaded compression is chosen from the window size\nof the compressor. This is derived from the <tt>window_log</tt> attribute of a\n<tt>ZstdCompressionParameters</tt> instance. By default, segment sizes are in the 1+MB\nrange.</p>\n<p>If multi-threaded compression is requested and the input is smaller than the\nconfigured segment size, only a single compression thread will be used. If the\ninput is smaller than the segment size multiplied by the thread pool size or\nif data cannot be delivered to the compressor fast enough, not all requested\ncompressor threads may be active simultaneously.</p>\n<p>Compared to non-multi-threaded compression, multi-threaded compression has\nhigher per-operation overhead. This includes extra memory operations,\nthread creation, lock acquisition, etc.</p>\n<p>Due to the nature of multi-threaded compression using <em>N</em> compression\n<em>states</em>, the output from multi-threaded compression will likely be larger\nthan non-multi-threaded compression. The difference is usually small. But\nthere is a CPU/wall time versus size trade off that may warrant investigation.</p>\n<p>Output from multi-threaded compression does not require any special handling\non the decompression side. To the decompressor, data generated with single\nthreaded compressor looks the same as data generated by a multi-threaded\ncompressor and does not require any special handling or additional resource\nrequirements.</p>\n</div>\n<div id=\"dictionary-creation-and-management\">\n<h3>Dictionary Creation and Management</h3>\n<p>Compression dictionaries are represented with the <tt>ZstdCompressionDict</tt> type.</p>\n<p>Instances can be constructed from bytes:</p>\n<pre>dict_data = zstd.ZstdCompressionDict(data)\n</pre>\n<p>It is possible to construct a dictionary from <em>any</em> data. If the data doesn\u2019t\nbegin with a magic header, it will be treated as a <em>prefix</em> dictionary.\n<em>Prefix</em> dictionaries allow compression operations to reference raw data\nwithin the dictionary.</p>\n<p>It is possible to force the use of <em>prefix</em> dictionaries or to require a\ndictionary header:</p>\n<blockquote>\n<dl>\n<dt>dict_data = zstd.ZstdCompressionDict(data,</dt>\n<dd>dict_type=zstd.DICT_TYPE_RAWCONTENT)</dd>\n<dt>dict_data = zstd.ZstdCompressionDict(data,</dt>\n<dd>dict_type=zstd.DICT_TYPE_FULLDICT)</dd>\n</dl>\n</blockquote>\n<p>You can see how many bytes are in the dictionary by calling <tt>len()</tt>:</p>\n<pre>dict_data = zstd.train_dictionary(size, samples)\ndict_size = len(dict_data)  # will not be larger than ``size``\n</pre>\n<p>Once you have a dictionary, you can pass it to the objects performing\ncompression and decompression:</p>\n<pre>dict_data = zstd.train_dictionary(131072, samples)\n\ncctx = zstd.ZstdCompressor(dict_data=dict_data)\nfor source_data in input_data:\n    compressed = cctx.compress(source_data)\n    # Do something with compressed data.\n\ndctx = zstd.ZstdDecompressor(dict_data=dict_data)\nfor compressed_data in input_data:\n    buffer = io.BytesIO()\n    with dctx.stream_writer(buffer) as decompressor:\n        decompressor.write(compressed_data)\n    # Do something with raw data in ``buffer``.\n</pre>\n<p>Dictionaries have unique integer IDs. You can retrieve this ID via:</p>\n<pre>dict_id = zstd.dictionary_id(dict_data)\n</pre>\n<p>You can obtain the raw data in the dict (useful for persisting and constructing\na <tt>ZstdCompressionDict</tt> later) via <tt>as_bytes()</tt>:</p>\n<pre>dict_data = zstd.train_dictionary(size, samples)\nraw_data = dict_data.as_bytes()\n</pre>\n<p>By default, when a <tt>ZstdCompressionDict</tt> is <em>attached</em> to a\n<tt>ZstdCompressor</tt>, each <tt>ZstdCompressor</tt> performs work to prepare the\ndictionary for use. This is fine if only 1 compression operation is being\nperformed or if the <tt>ZstdCompressor</tt> is being reused for multiple operations.\nBut if multiple <tt>ZstdCompressor</tt> instances are being used with the dictionary,\nthis can add overhead.</p>\n<p>It is possible to <em>precompute</em> the dictionary so it can readily be consumed\nby multiple <tt>ZstdCompressor</tt> instances:</p>\n<pre>d = zstd.ZstdCompressionDict(data)\n\n# Precompute for compression level 3.\nd.precompute_compress(level=3)\n\n# Precompute with specific compression parameters.\nparams = zstd.ZstdCompressionParameters(...)\nd.precompute_compress(compression_params=params)\n</pre>\n<div>\n<p>Note</p>\n<p>When a dictionary is precomputed, the compression parameters used to\nprecompute the dictionary overwrite some of the compression parameters\nspecified to <tt>ZstdCompressor.__init__</tt>.</p>\n</div>\n<div id=\"training-dictionaries\">\n<h4>Training Dictionaries</h4>\n<p>Unless using <em>prefix</em> dictionaries, dictionary data is produced by <em>training</em>\non existing data:</p>\n<pre>dict_data = zstd.train_dictionary(size, samples)\n</pre>\n<p>This takes a target dictionary size and list of bytes instances and creates and\nreturns a <tt>ZstdCompressionDict</tt>.</p>\n<p>The dictionary training mechanism is known as <em>cover</em>. More details about it are\navailable in the paper <em>Effective Construction of Relative Lempel-Ziv\nDictionaries</em> (authors: Liao, Petri, Moffat, Wirth).</p>\n<p>The cover algorithm takes parameters <tt>k` and ``d</tt>. These are the\n<em>segment size</em> and <em>dmer size</em>, respectively. The returned dictionary\ninstance created by this function has <tt>k</tt> and <tt>d</tt> attributes\ncontaining the values for these parameters. If a <tt>ZstdCompressionDict</tt>\nis constructed from raw bytes data (a content-only dictionary), the\n<tt>k</tt> and <tt>d</tt> attributes will be <tt>0</tt>.</p>\n<p>The segment and dmer size parameters to the cover algorithm can either be\nspecified manually or <tt>train_dictionary()</tt> can try multiple values\nand pick the best one, where <em>best</em> means the smallest compressed data size.\nThis later mode is called <em>optimization</em> mode.</p>\n<p>If none of <tt>k</tt>, <tt>d</tt>, <tt>steps</tt>, <tt>threads</tt>, <tt>level</tt>, <tt>notifications</tt>,\nor <tt>dict_id</tt> (basically anything from the underlying <tt>ZDICT_cover_params_t</tt>\nstruct) are defined, <em>optimization</em> mode is used with default parameter\nvalues.</p>\n<p>If <tt>steps</tt> or <tt>threads</tt> are defined, then <em>optimization</em> mode is engaged\nwith explicit control over those parameters. Specifying <tt>threads=0</tt> or\n<tt>threads=1</tt> can be used to engage <em>optimization</em> mode if other parameters\nare not defined.</p>\n<p>Otherwise, non-<em>optimization</em> mode is used with the parameters specified.</p>\n<p>This function takes the following arguments:</p>\n<dl>\n<dt>dict_size</dt>\n<dd>Target size in bytes of the dictionary to generate.</dd>\n<dt>samples</dt>\n<dd>A list of bytes holding samples the dictionary will be trained from.</dd>\n<dt>k</dt>\n<dd>Parameter to cover algorithm defining the segment size. A reasonable range\nis [16, 2048+].</dd>\n<dt>d</dt>\n<dd>Parameter to cover algorithm defining the dmer size. A reasonable range is\n[6, 16]. <tt>d</tt> must be less than or equal to <tt>k</tt>.</dd>\n<dt>dict_id</dt>\n<dd>Integer dictionary ID for the produced dictionary. Default is 0, which uses\na random value.</dd>\n<dt>steps</dt>\n<dd>Number of steps through <tt>k</tt> values to perform when trying parameter\nvariations.</dd>\n<dt>threads</dt>\n<dd>Number of threads to use when trying parameter variations. Default is 0,\nwhich means to use a single thread. A negative value can be specified to\nuse as many threads as there are detected logical CPUs.</dd>\n<dt>level</dt>\n<dd>Integer target compression level when trying parameter variations.</dd>\n<dt>notifications</dt>\n<dd>Controls writing of informational messages to <tt>stderr</tt>. <tt>0</tt> (the\ndefault) means to write nothing. <tt>1</tt> writes errors. <tt>2</tt> writes\nprogression info. <tt>3</tt> writes more details. And <tt>4</tt> writes all info.</dd>\n</dl>\n</div>\n</div>\n<div id=\"explicit-compression-parameters\">\n<h3>Explicit Compression Parameters</h3>\n<p>Zstandard offers a high-level <em>compression level</em> that maps to lower-level\ncompression parameters. For many consumers, this numeric level is the only\ncompression setting you\u2019ll need to touch.</p>\n<p>But for advanced use cases, it might be desirable to tweak these lower-level\nsettings.</p>\n<p>The <tt>ZstdCompressionParameters</tt> type represents these low-level compression\nsettings.</p>\n<p>Instances of this type can be constructed from a myriad of keyword arguments\n(defined below) for complete low-level control over each adjustable\ncompression setting.</p>\n<p>From a higher level, one can construct a <tt>ZstdCompressionParameters</tt> instance\ngiven a desired compression level and target input and dictionary size\nusing <tt>ZstdCompressionParameters.from_level()</tt>. e.g.:</p>\n<pre># Derive compression settings for compression level 7.\nparams = zstd.ZstdCompressionParameters.from_level(7)\n\n# With an input size of 1MB\nparams = zstd.ZstdCompressionParameters.from_level(7, source_size=1048576)\n</pre>\n<p>Using <tt>from_level()</tt>, it is also possible to override individual compression\nparameters or to define additional settings that aren\u2019t automatically derived.\ne.g.:</p>\n<pre>params = zstd.ZstdCompressionParameters.from_level(4, window_log=10)\nparams = zstd.ZstdCompressionParameters.from_level(5, threads=4)\n</pre>\n<p>Or you can define low-level compression settings directly:</p>\n<pre>params = zstd.ZstdCompressionParameters(window_log=12, enable_ldm=True)\n</pre>\n<p>Once a <tt>ZstdCompressionParameters</tt> instance is obtained, it can be used to\nconfigure a compressor:</p>\n<pre>cctx = zstd.ZstdCompressor(compression_params=params)\n</pre>\n<p>The named arguments and attributes of <tt>ZstdCompressionParameters</tt> are as\nfollows:</p>\n<ul>\n<li>format</li>\n<li>compression_level</li>\n<li>window_log</li>\n<li>hash_log</li>\n<li>chain_log</li>\n<li>search_log</li>\n<li>min_match</li>\n<li>target_length</li>\n<li>strategy</li>\n<li>compression_strategy (deprecated: same as <tt>strategy</tt>)</li>\n<li>write_content_size</li>\n<li>write_checksum</li>\n<li>write_dict_id</li>\n<li>job_size</li>\n<li>overlap_log</li>\n<li>overlap_size_log (deprecated: same as <tt>overlap_log</tt>)</li>\n<li>force_max_window</li>\n<li>enable_ldm</li>\n<li>ldm_hash_log</li>\n<li>ldm_min_match</li>\n<li>ldm_bucket_size_log</li>\n<li>ldm_hash_rate_log</li>\n<li>ldm_hash_every_log (deprecated: same as <tt>ldm_hash_rate_log</tt>)</li>\n<li>threads</li>\n</ul>\n<p>Some of these are very low-level settings. It may help to consult the official\nzstandard documentation for their behavior. Look for the <tt>ZSTD_p_*</tt> constants\nin <tt>zstd.h</tt> (<a href=\"https://github.com/facebook/zstd/blob/dev/lib/zstd.h\" rel=\"nofollow\">https://github.com/facebook/zstd/blob/dev/lib/zstd.h</a>).</p>\n</div>\n<div id=\"frame-inspection\">\n<h3>Frame Inspection</h3>\n<p>Data emitted from zstd compression is encapsulated in a <em>frame</em>. This frame\nbegins with a 4 byte <em>magic number</em> header followed by 2 to 14 bytes describing\nthe frame in more detail. For more info, see\n<a href=\"https://github.com/facebook/zstd/blob/master/doc/zstd_compression_format.md\" rel=\"nofollow\">https://github.com/facebook/zstd/blob/master/doc/zstd_compression_format.md</a>.</p>\n<p><tt>zstd.get_frame_parameters(data)</tt> parses a zstd <em>frame</em> header from a bytes\ninstance and return a <tt>FrameParameters</tt> object describing the frame.</p>\n<p>Depending on which fields are present in the frame and their values, the\nlength of the frame parameters varies. If insufficient bytes are passed\nin to fully parse the frame parameters, <tt>ZstdError</tt> is raised. To ensure\nframe parameters can be parsed, pass in at least 18 bytes.</p>\n<p><tt>FrameParameters</tt> instances have the following attributes:</p>\n<dl>\n<dt>content_size</dt>\n<dd>Integer size of original, uncompressed content. This will be <tt>0</tt> if the\noriginal content size isn\u2019t written to the frame (controlled with the\n<tt>write_content_size</tt> argument to <tt>ZstdCompressor</tt>) or if the input\ncontent size was <tt>0</tt>.</dd>\n<dt>window_size</dt>\n<dd>Integer size of maximum back-reference distance in compressed data.</dd>\n<dt>dict_id</dt>\n<dd>Integer of dictionary ID used for compression. <tt>0</tt> if no dictionary\nID was used or if the dictionary ID was <tt>0</tt>.</dd>\n<dt>has_checksum</dt>\n<dd>Bool indicating whether a 4 byte content checksum is stored at the end\nof the frame.</dd>\n</dl>\n<p><tt>zstd.frame_header_size(data)</tt> returns the size of the zstandard frame\nheader.</p>\n<p><tt>zstd.frame_content_size(data)</tt> returns the content size as parsed from\nthe frame header. <tt><span class=\"pre\">-1</span></tt> means the content size is unknown. <tt>0</tt> means\nan empty frame. The content size is usually correct. However, it may not\nbe accurate.</p>\n</div>\n<div id=\"misc-functionality\">\n<h3>Misc Functionality</h3>\n<h3 id=\"estimate-decompression-context-size\"><span class=\"section-subtitle\">estimate_decompression_context_size()</span></h3>\n<p>Estimate the memory size requirements for a decompressor instance.</p>\n</div>\n<div id=\"constants\">\n<h3>Constants</h3>\n<p>The following module constants/attributes are exposed:</p>\n<dl>\n<dt>ZSTD_VERSION</dt>\n<dd>This module attribute exposes a 3-tuple of the Zstandard version. e.g.\n<tt>(1, 0, 0)</tt></dd>\n<dt>MAX_COMPRESSION_LEVEL</dt>\n<dd>Integer max compression level accepted by compression functions</dd>\n<dt>COMPRESSION_RECOMMENDED_INPUT_SIZE</dt>\n<dd>Recommended chunk size to feed to compressor functions</dd>\n<dt>COMPRESSION_RECOMMENDED_OUTPUT_SIZE</dt>\n<dd>Recommended chunk size for compression output</dd>\n<dt>DECOMPRESSION_RECOMMENDED_INPUT_SIZE</dt>\n<dd>Recommended chunk size to feed into decompresor functions</dd>\n<dt>DECOMPRESSION_RECOMMENDED_OUTPUT_SIZE</dt>\n<dd>Recommended chunk size for decompression output</dd>\n<dt>FRAME_HEADER</dt>\n<dd>bytes containing header of the Zstandard frame</dd>\n<dt>MAGIC_NUMBER</dt>\n<dd>Frame header as an integer</dd>\n<dt>FLUSH_BLOCK</dt>\n<dd>Flushing behavior that denotes to flush a zstd block. A decompressor will\nbe able to decode all data fed into the compressor so far.</dd>\n<dt>FLUSH_FRAME</dt>\n<dd>Flushing behavior that denotes to end a zstd frame. Any new data fed\nto the compressor will start a new frame.</dd>\n<dt>CONTENTSIZE_UNKNOWN</dt>\n<dd>Value for content size when the content size is unknown.</dd>\n<dt>CONTENTSIZE_ERROR</dt>\n<dd>Value for content size when content size couldn\u2019t be determined.</dd>\n<dt>WINDOWLOG_MIN</dt>\n<dd>Minimum value for compression parameter</dd>\n<dt>WINDOWLOG_MAX</dt>\n<dd>Maximum value for compression parameter</dd>\n<dt>CHAINLOG_MIN</dt>\n<dd>Minimum value for compression parameter</dd>\n<dt>CHAINLOG_MAX</dt>\n<dd>Maximum value for compression parameter</dd>\n<dt>HASHLOG_MIN</dt>\n<dd>Minimum value for compression parameter</dd>\n<dt>HASHLOG_MAX</dt>\n<dd>Maximum value for compression parameter</dd>\n<dt>SEARCHLOG_MIN</dt>\n<dd>Minimum value for compression parameter</dd>\n<dt>SEARCHLOG_MAX</dt>\n<dd>Maximum value for compression parameter</dd>\n<dt>MINMATCH_MIN</dt>\n<dd>Minimum value for compression parameter</dd>\n<dt>MINMATCH_MAX</dt>\n<dd>Maximum value for compression parameter</dd>\n<dt>SEARCHLENGTH_MIN</dt>\n<dd><p>Minimum value for compression parameter</p>\n<p>Deprecated: use <tt>MINMATCH_MIN</tt></p>\n</dd>\n<dt>SEARCHLENGTH_MAX</dt>\n<dd><p>Maximum value for compression parameter</p>\n<p>Deprecated: use <tt>MINMATCH_MAX</tt></p>\n</dd>\n<dt>TARGETLENGTH_MIN</dt>\n<dd>Minimum value for compression parameter</dd>\n<dt>STRATEGY_FAST</dt>\n<dd>Compression strategy</dd>\n<dt>STRATEGY_DFAST</dt>\n<dd>Compression strategy</dd>\n<dt>STRATEGY_GREEDY</dt>\n<dd>Compression strategy</dd>\n<dt>STRATEGY_LAZY</dt>\n<dd>Compression strategy</dd>\n<dt>STRATEGY_LAZY2</dt>\n<dd>Compression strategy</dd>\n<dt>STRATEGY_BTLAZY2</dt>\n<dd>Compression strategy</dd>\n<dt>STRATEGY_BTOPT</dt>\n<dd>Compression strategy</dd>\n<dt>STRATEGY_BTULTRA</dt>\n<dd>Compression strategy</dd>\n<dt>STRATEGY_BTULTRA2</dt>\n<dd>Compression strategy</dd>\n<dt>FORMAT_ZSTD1</dt>\n<dd>Zstandard frame format</dd>\n<dt>FORMAT_ZSTD1_MAGICLESS</dt>\n<dd>Zstandard frame format without magic header</dd>\n</dl>\n</div>\n<div id=\"performance-considerations\">\n<h3>Performance Considerations</h3>\n<p>The <tt>ZstdCompressor</tt> and <tt>ZstdDecompressor</tt> types maintain state to a\npersistent compression or decompression <em>context</em>. Reusing a <tt>ZstdCompressor</tt>\nor <tt>ZstdDecompressor</tt> instance for multiple operations is faster than\ninstantiating a new <tt>ZstdCompressor</tt> or <tt>ZstdDecompressor</tt> for each\noperation. The differences are magnified as the size of data decreases. For\nexample, the difference between <em>context</em> reuse and non-reuse for 100,000\n100 byte inputs will be significant (possiby over 10x faster to reuse contexts)\nwhereas 10 100,000,000 byte inputs will be more similar in speed (because the\ntime spent doing compression dwarfs time spent creating new <em>contexts</em>).</p>\n</div>\n<div id=\"buffer-types\">\n<h3>Buffer Types</h3>\n<p>The API exposes a handful of custom types for interfacing with memory buffers.\nThe primary goal of these types is to facilitate efficient multi-object\noperations.</p>\n<p>The essential idea is to have a single memory allocation provide backing\nstorage for multiple logical objects. This has 2 main advantages: fewer\nallocations and optimal memory access patterns. This avoids having to allocate\na Python object for each logical object and furthermore ensures that access of\ndata for objects can be sequential (read: fast) in memory.</p>\n<div id=\"bufferwithsegments\">\n<h4>BufferWithSegments</h4>\n<p>The <tt>BufferWithSegments</tt> type represents a memory buffer containing N\ndiscrete items of known lengths (segments). It is essentially a fixed size\nmemory address and an array of 2-tuples of <tt>(offset, length)</tt> 64-bit\nunsigned native endian integers defining the byte offset and length of each\nsegment within the buffer.</p>\n<p>Instances behave like containers.</p>\n<p><tt>len()</tt> returns the number of segments within the instance.</p>\n<p><tt>o[index]</tt> or <tt>__getitem__</tt> obtains a <tt>BufferSegment</tt> representing an\nindividual segment within the backing buffer. That returned object references\n(not copies) memory. This means that iterating all objects doesn\u2019t copy\ndata within the buffer.</p>\n<p>The <tt>.size</tt> attribute contains the total size in bytes of the backing\nbuffer.</p>\n<p>Instances conform to the buffer protocol. So a reference to the backing bytes\ncan be obtained via <tt>memoryview(o)</tt>. A <em>copy</em> of the backing bytes can also\nbe obtained via <tt>.tobytes()</tt>.</p>\n<p>The <tt>.segments</tt> attribute exposes the array of <tt>(offset, length)</tt> for\nsegments within the buffer. It is a <tt>BufferSegments</tt> type.</p>\n</div>\n<div id=\"buffersegment\">\n<h4>BufferSegment</h4>\n<p>The <tt>BufferSegment</tt> type represents a segment within a <tt>BufferWithSegments</tt>.\nIt is essentially a reference to N bytes within a <tt>BufferWithSegments</tt>.</p>\n<p><tt>len()</tt> returns the length of the segment in bytes.</p>\n<p><tt>.offset</tt> contains the byte offset of this segment within its parent\n<tt>BufferWithSegments</tt> instance.</p>\n<p>The object conforms to the buffer protocol. <tt>.tobytes()</tt> can be called to\nobtain a <tt>bytes</tt> instance with a copy of the backing bytes.</p>\n</div>\n<div id=\"buffersegments\">\n<h4>BufferSegments</h4>\n<p>This type represents an array of <tt>(offset, length)</tt> integers defining segments\nwithin a <tt>BufferWithSegments</tt>.</p>\n<p>The array members are 64-bit unsigned integers using host/native bit order.</p>\n<p>Instances conform to the buffer protocol.</p>\n</div>\n<div id=\"bufferwithsegmentscollection\">\n<h4>BufferWithSegmentsCollection</h4>\n<p>The <tt>BufferWithSegmentsCollection</tt> type represents a virtual spanning view\nof multiple <tt>BufferWithSegments</tt> instances.</p>\n<p>Instances are constructed from 1 or more <tt>BufferWithSegments</tt> instances. The\nresulting object behaves like an ordered sequence whose members are the\nsegments within each <tt>BufferWithSegments</tt>.</p>\n<p><tt>len()</tt> returns the number of segments within all <tt>BufferWithSegments</tt>\ninstances.</p>\n<p><tt>o[index]</tt> and <tt>__getitem__(index)</tt> return the <tt>BufferSegment</tt> at\nthat offset as if all <tt>BufferWithSegments</tt> instances were a single\nentity.</p>\n<p>If the object is composed of 2 <tt>BufferWithSegments</tt> instances with the\nfirst having 2 segments and the second have 3 segments, then <tt>b[0]</tt>\nand <tt>b[1]</tt> access segments in the first object and <tt>b[2]</tt>, <tt>b[3]</tt>,\nand <tt>b[4]</tt> access segments from the second.</p>\n</div>\n</div>\n</div>\n<div id=\"choosing-an-api\">\n<h2>Choosing an API</h2>\n<p>There are multiple APIs for performing compression and decompression. This is\nbecause different applications have different needs and the library wants to\nfacilitate optimal use in as many use cases as possible.</p>\n<p>From a high-level, APIs are divided into <em>one-shot</em> and <em>streaming</em>: either you\nare operating on all data at once or you operate on it piecemeal.</p>\n<p>The <em>one-shot</em> APIs are useful for small data, where the input or output\nsize is known. (The size can come from a buffer length, file size, or\nstored in the zstd frame header.) A limitation of the <em>one-shot</em> APIs is that\ninput and output must fit in memory simultaneously. For say a 4 GB input,\nthis is often not feasible.</p>\n<p>The <em>one-shot</em> APIs also perform all work as a single operation. So, if you\nfeed it large input, it could take a long time for the function to return.</p>\n<p>The streaming APIs do not have the limitations of the simple API. But the\nprice you pay for this flexibility is that they are more complex than a\nsingle function call.</p>\n<p>The streaming APIs put the caller in control of compression and decompression\nbehavior by allowing them to directly control either the input or output side\nof the operation.</p>\n<p>With the <em>streaming input</em>, <em>compressor</em>, and <em>decompressor</em> APIs, the caller\nhas full control over the input to the compression or decompression stream.\nThey can directly choose when new data is operated on.</p>\n<p>With the <em>streaming ouput</em> APIs, the caller has full control over the output\nof the compression or decompression stream. It can choose when to receive\nnew data.</p>\n<p>When using the <em>streaming</em> APIs that operate on file-like or stream objects,\nit is important to consider what happens in that object when I/O is requested.\nThere is potential for long pauses as data is read or written from the\nunderlying stream (say from interacting with a filesystem or network). This\ncould add considerable overhead.</p>\n</div>\n<div id=\"thread-safety\">\n<h2>Thread Safety</h2>\n<p><tt>ZstdCompressor</tt> and <tt>ZstdDecompressor</tt> instances have no guarantees\nabout thread safety. Do not operate on the same <tt>ZstdCompressor</tt> and\n<tt>ZstdDecompressor</tt> instance simultaneously from different threads. It is\nfine to have different threads call into a single instance, just not at the\nsame time.</p>\n<p>Some operations require multiple function calls to complete. e.g. streaming\noperations. A single <tt>ZstdCompressor</tt> or <tt>ZstdDecompressor</tt> cannot be used\nfor simultaneously active operations. e.g. you must not start a streaming\noperation when another streaming operation is already active.</p>\n<p>The C extension releases the GIL during non-trivial calls into the zstd C\nAPI. Non-trivial calls are notably compression and decompression. Trivial\ncalls are things like parsing frame parameters. Where the GIL is released\nis considered an implementation detail and can change in any release.</p>\n<p>APIs that accept bytes-like objects don\u2019t enforce that the underlying object\nis read-only. However, it is assumed that the passed object is read-only for\nthe duration of the function call. It is possible to pass a mutable object\n(like a <tt>bytearray</tt>) to e.g. <tt>ZstdCompressor.compress()</tt>, have the GIL\nreleased, and mutate the object from another thread. Such a race condition\nis a bug in the consumer of python-zstandard. Most Python data types are\nimmutable, so unless you are doing something fancy, you don\u2019t need to\nworry about this.</p>\n</div>\n<div id=\"note-on-zstandard-s-experimental-api\">\n<h2>Note on Zstandard\u2019s <em>Experimental</em> API</h2>\n<p>Many of the Zstandard APIs used by this module are marked as <em>experimental</em>\nwithin the Zstandard project.</p>\n<p>It is unclear how Zstandard\u2019s C API will evolve over time, especially with\nregards to this <em>experimental</em> functionality. We will try to maintain\nbackwards compatibility at the Python API level. However, we cannot\nguarantee this for things not under our control.</p>\n<p>Since a copy of the Zstandard source code is distributed with this\nmodule and since we compile against it, the behavior of a specific\nversion of this module should be constant for all of time. So if you\npin the version of this module used in your projects (which is a Python\nbest practice), you should be shielded from unwanted future changes.</p>\n</div>\n<div id=\"donate\">\n<h2>Donate</h2>\n<p>A lot of time has been invested into this project by the author.</p>\n<p>If you find this project useful and would like to thank the author for\ntheir work, consider donating some money. Any amount is appreciated.</p>\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=gregory%2eszorc%40gmail%2ecom&amp;lc=US&amp;item_name=python%2dzstandard&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted\" rel=\"nofollow\"><img alt=\"Donate via PayPal\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88635fcff5d2586c607ae56c8b4bf0edb8c1f357/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e6174655f4c472e676966\"></a>\n</div>\n\n          </div>"}, "last_serial": 6369084, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "644792fff7553afbed3f4c46652b2ab6", "sha256": "ec429d1e13b5dd76bad156183f5faccde1780bc8fed54ba6cdd54eb930ef07ee"}, "downloads": -1, "filename": "zstandard-0.0.1.tar.gz", "has_sig": false, "md5_digest": "644792fff7553afbed3f4c46652b2ab6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108852, "upload_time": "2016-09-03T20:28:57", "upload_time_iso_8601": "2016-09-03T20:28:57.943894Z", "url": "https://files.pythonhosted.org/packages/f2/97/6bf4040ca010a3dbd8484556507793aab7c59f3c6dc1db0dc1ea86180933/zstandard-0.0.1.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "b60bae1170ac181d04cd497ab4d9fc8e", "sha256": "c3e634e2687d98d28c98b1e672a0ff24f0a82434ef0c234929a9b26a5d1cbedd"}, "downloads": -1, "filename": "zstandard-0.1.tar.gz", "has_sig": false, "md5_digest": "b60bae1170ac181d04cd497ab4d9fc8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151385, "upload_time": "2016-09-05T18:17:25", "upload_time_iso_8601": "2016-09-05T18:17:25.355695Z", "url": "https://files.pythonhosted.org/packages/53/20/69a33f56b545a4266516daedd183da0c23fa9ff3b7d360634c8d19dd4f65/zstandard-0.1.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "e12ad3db39e51d15f3513f7252ec1173", "sha256": "8249865d192b051a82549456d495107fba09dcef7d14860c4b80445f960c2461"}, "downloads": -1, "filename": "zstandard-0.10.0-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "e12ad3db39e51d15f3513f7252ec1173", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 574139, "upload_time": "2018-10-08T20:34:49", "upload_time_iso_8601": "2018-10-08T20:34:49.511505Z", "url": "https://files.pythonhosted.org/packages/68/f0/3e8048ca151defd50db0ed204b4b75bebbf5edc98a1422bb0f20aa5a08ea/zstandard-0.10.0-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ecc88f55d6ece4f690a588f48ca3b0a", "sha256": "2b9af0da6dd0df9b4ef8bdc0408f830093212faa1d917f878f8daf56adc8735a"}, "downloads": -1, "filename": "zstandard-0.10.0-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "4ecc88f55d6ece4f690a588f48ca3b0a", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2684556, "upload_time": "2018-10-08T20:34:52", "upload_time_iso_8601": "2018-10-08T20:34:52.480926Z", "url": "https://files.pythonhosted.org/packages/4e/e9/f9cf26742d0dcd7904231560dfd49cd86e16f0cbe40d406da7740171f451/zstandard-0.10.0-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e119106a5e7db52045544e91d4d20c21", "sha256": "1692c147c058c0c9b7e260e9f47d7d28803ec8a60466450afdf369aba30ff09e"}, "downloads": -1, "filename": "zstandard-0.10.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e119106a5e7db52045544e91d4d20c21", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2885408, "upload_time": "2018-10-08T20:34:54", "upload_time_iso_8601": "2018-10-08T20:34:54.791739Z", "url": "https://files.pythonhosted.org/packages/3c/33/bb7c7ebf68028e5467ca0bfd0565a24e0d40292e474a33089b0b74cc82ce/zstandard-0.10.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0654bf3e018e09605d9619d6ac694038", "sha256": "3d74a45b3f74d8d061ab909b3aef7fc63ec33109b141adbd2d1f87120e836816"}, "downloads": -1, "filename": "zstandard-0.10.0-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "0654bf3e018e09605d9619d6ac694038", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2689554, "upload_time": "2018-10-08T20:34:57", "upload_time_iso_8601": "2018-10-08T20:34:57.091940Z", "url": "https://files.pythonhosted.org/packages/5f/f6/4307eb9e985d6b73fdf7156651791dc1788ec8c5ed99965e1d5c58331ba0/zstandard-0.10.0-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be4f9ed946672027fbafb7efecd60e15", "sha256": "1137b90d03ed79cba1cee352085f01854e4035bfa28a17db809d9eb0ee79efd1"}, "downloads": -1, "filename": "zstandard-0.10.0-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "be4f9ed946672027fbafb7efecd60e15", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2887469, "upload_time": "2018-10-08T20:34:59", "upload_time_iso_8601": "2018-10-08T20:34:59.328193Z", "url": "https://files.pythonhosted.org/packages/4d/61/7d1ce009a181cf0e63a1f848c2af38039678815f988b33cbba05cd0cc911/zstandard-0.10.0-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b93c41b52d21e505a762fa6e4eb72a8", "sha256": "196cd2e5e8ed6c1c0e66a29b2a71fa05872b91c9cd9cca85abc1d89e2e471324"}, "downloads": -1, "filename": "zstandard-0.10.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "3b93c41b52d21e505a762fa6e4eb72a8", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 393265, "upload_time": "2018-10-08T20:35:01", "upload_time_iso_8601": "2018-10-08T20:35:01.381634Z", "url": "https://files.pythonhosted.org/packages/64/10/d75a7ba0447774a8dddd55bcc7547016753c8aec359c78a0fef7c8a55039/zstandard-0.10.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c13740cef000a01c452176b22e9e41ed", "sha256": "64d459ae43eb42110ed15700d126e405daf59ec2c88efd7dedea522eb3c268b1"}, "downloads": -1, "filename": "zstandard-0.10.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "c13740cef000a01c452176b22e9e41ed", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 483002, "upload_time": "2018-10-08T20:35:03", "upload_time_iso_8601": "2018-10-08T20:35:03.392452Z", "url": "https://files.pythonhosted.org/packages/f1/c3/4c467aef75b2c2fed87f7ab906ac813801746426304561e1194b28ef659c/zstandard-0.10.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b72a4c36ff487013e9710a65a2494724", "sha256": "0dbb59aef1b37d4f6e9f43ecb85d757fd02b6df784da21b3532f0d98ed7e269e"}, "downloads": -1, "filename": "zstandard-0.10.0-cp34-cp34m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "b72a4c36ff487013e9710a65a2494724", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 573444, "upload_time": "2018-10-08T20:35:05", "upload_time_iso_8601": "2018-10-08T20:35:05.036887Z", "url": "https://files.pythonhosted.org/packages/13/dc/e964238c573a8f796116b3794dfb2d7bbfa21596e8404ccb99c44ee3ccfa/zstandard-0.10.0-cp34-cp34m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47aeeaf1c50b3b8f7bdbb01ad0b5e8ee", "sha256": "c4c4c7afede28649d3c20df6893876062355f4f7241a5135e4cd6238f2f02998"}, "downloads": -1, "filename": "zstandard-0.10.0-cp34-cp34m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "47aeeaf1c50b3b8f7bdbb01ad0b5e8ee", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2703416, "upload_time": "2018-10-08T20:35:07", "upload_time_iso_8601": "2018-10-08T20:35:07.085609Z", "url": "https://files.pythonhosted.org/packages/29/56/435c2413ec0796ea26ac71e48763229deb529d736b5ef39cada52a6ee90e/zstandard-0.10.0-cp34-cp34m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4873fa0dee9c762ed85e6b413361841", "sha256": "e9e3f1fba31e6d38a6f22b987ceb27d8fe3af209f46b94ce9cf5e0c83529afbb"}, "downloads": -1, "filename": "zstandard-0.10.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a4873fa0dee9c762ed85e6b413361841", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2894402, "upload_time": "2018-10-08T20:35:09", "upload_time_iso_8601": "2018-10-08T20:35:09.934700Z", "url": "https://files.pythonhosted.org/packages/0e/3c/77a926feefb09e095a71f4f2e9c7ffca72aaa740ef2c1d20c87771f77892/zstandard-0.10.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6536f797c9437b53769fd79fea845b5", "sha256": "b9d7e6ab92f6661eaa2000f2d8f8699e4d9339492269b1c5d7f9611af6dd1ba0"}, "downloads": -1, "filename": "zstandard-0.10.0-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "b6536f797c9437b53769fd79fea845b5", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 405344, "upload_time": "2018-10-08T20:35:12", "upload_time_iso_8601": "2018-10-08T20:35:12.139886Z", "url": "https://files.pythonhosted.org/packages/f4/37/d252a6f85045b9f6127acdb69f2cba764b8206ca39c669fffbec7faea6f4/zstandard-0.10.0-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a27627ed58e97c445894c4170dc73799", "sha256": "e9d4dc3e5b21a817f2b811a5d45ed758532003af8b5264386cb0f23cfa24d78b"}, "downloads": -1, "filename": "zstandard-0.10.0-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "a27627ed58e97c445894c4170dc73799", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 479748, "upload_time": "2018-10-08T20:35:14", "upload_time_iso_8601": "2018-10-08T20:35:14.136703Z", "url": "https://files.pythonhosted.org/packages/00/f2/28b5fd4d373071f86d1dd02e034731124dbc013a7746951452cd8df80b47/zstandard-0.10.0-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "561392ac6c93bbe9a973fb0db79c7c3d", "sha256": "e076e57e3f43f71fc2a0653d5cf61f719b1e9cad72c71eef2f7738ecc449e2dc"}, "downloads": -1, "filename": "zstandard-0.10.0-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "561392ac6c93bbe9a973fb0db79c7c3d", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 573541, "upload_time": "2018-10-08T20:35:15", "upload_time_iso_8601": "2018-10-08T20:35:15.789076Z", "url": "https://files.pythonhosted.org/packages/12/8e/3c4c45a5631a24ec878aa5f82cbfabd9d1d392f1db1599f726c9bcbc133f/zstandard-0.10.0-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f0e4620b259768fa6cefd972aed0f59", "sha256": "6b898bc0cb68b6aaa8bde747fa599198985ef3854b9b430137cef39770293c47"}, "downloads": -1, "filename": "zstandard-0.10.0-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "8f0e4620b259768fa6cefd972aed0f59", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2708127, "upload_time": "2018-10-08T20:35:17", "upload_time_iso_8601": "2018-10-08T20:35:17.866801Z", "url": "https://files.pythonhosted.org/packages/f5/7d/e91b2826ce712c6f253d2bf2ebc43295b2fab9b76a53d1fced1bd6ddf6b7/zstandard-0.10.0-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eba6655b09c8d5a6f5fd82def909fab8", "sha256": "5766e599029e8c7bb7218020527ae0305701ff820464d21ac51aaab4a58c15d0"}, "downloads": -1, "filename": "zstandard-0.10.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "eba6655b09c8d5a6f5fd82def909fab8", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2893396, "upload_time": "2018-10-08T20:35:20", "upload_time_iso_8601": "2018-10-08T20:35:20.142040Z", "url": "https://files.pythonhosted.org/packages/07/a9/c9f3794bbdc53be468089c573d9b63c277f07ed2f8610d1cbba37ecb440d/zstandard-0.10.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c19eb44a3f08998a2e4db8cde10ef95f", "sha256": "ec77ac90ab943136e63b37499bd1ccd90012d62f925502184d2208e909dfe6cb"}, "downloads": -1, "filename": "zstandard-0.10.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "c19eb44a3f08998a2e4db8cde10ef95f", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 418381, "upload_time": "2018-10-08T20:35:22", "upload_time_iso_8601": "2018-10-08T20:35:22.231817Z", "url": "https://files.pythonhosted.org/packages/68/25/3f07d762dc49a1e34ba2b3cf7c923e098e522a56d3843dbea249ec1eb482/zstandard-0.10.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58476f7aea618ce7153aa4a4e1d20a0a", "sha256": "1d0365f1d226d678522756263e948f08c88f217524963ece2498cf96074a3f5f"}, "downloads": -1, "filename": "zstandard-0.10.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "58476f7aea618ce7153aa4a4e1d20a0a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 484648, "upload_time": "2018-10-08T20:35:24", "upload_time_iso_8601": "2018-10-08T20:35:24.184925Z", "url": "https://files.pythonhosted.org/packages/b1/c1/13b2b8870ba9295d02d07c29a6bb44c2e837b6d287fb205d2f9b7cb0b71c/zstandard-0.10.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33b919ef1dadc6d0ab078c351a5f58b5", "sha256": "b46e25dce311ff9f943061085ed83f9838c552d6cd6605a3029fd8009e975ca1"}, "downloads": -1, "filename": "zstandard-0.10.0-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "33b919ef1dadc6d0ab078c351a5f58b5", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 573290, "upload_time": "2018-10-08T20:35:26", "upload_time_iso_8601": "2018-10-08T20:35:26.184454Z", "url": "https://files.pythonhosted.org/packages/18/9f/63505245ea78fbfcf25d77b1de7014fc3949b8d2668cd1307a7493b0ddb2/zstandard-0.10.0-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ee8a9d218d463d4ff7ce358aa7ed289", "sha256": "bfa7564b7fdbbb8faf81a4df4a01ff09488aa9e659956cf1b630178367e24a2d"}, "downloads": -1, "filename": "zstandard-0.10.0-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "8ee8a9d218d463d4ff7ce358aa7ed289", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2705256, "upload_time": "2018-10-08T20:35:53", "upload_time_iso_8601": "2018-10-08T20:35:53.534807Z", "url": "https://files.pythonhosted.org/packages/94/e4/ddabbee3af0ab6d18f972873ae57b964a360b77ac9c39bbd37318533f11c/zstandard-0.10.0-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43937e7bc68fd241955a0481c585b695", "sha256": "cbc7b9560968c0f056ab1c4acc7afd0adf604bf44763b6e8cb053dcddcecbf23"}, "downloads": -1, "filename": "zstandard-0.10.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "43937e7bc68fd241955a0481c585b695", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2897664, "upload_time": "2018-10-08T20:35:55", "upload_time_iso_8601": "2018-10-08T20:35:55.829151Z", "url": "https://files.pythonhosted.org/packages/59/0b/7a8330b797f0efc0318dd53643aad01fdc43e7bc1a23abc9ddf5325a08c6/zstandard-0.10.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d7b9a1171a7daad49e26572253a2c4a", "sha256": "54cfb780f989c268dbf0f803800fce0ca20148276f8bb99fde100a59a4b78022"}, "downloads": -1, "filename": "zstandard-0.10.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "1d7b9a1171a7daad49e26572253a2c4a", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 418566, "upload_time": "2018-10-08T20:35:57", "upload_time_iso_8601": "2018-10-08T20:35:57.584515Z", "url": "https://files.pythonhosted.org/packages/bc/62/227e395c9d36824b05becbb0fb5b88ad8ae802b7512de14453733f4a9379/zstandard-0.10.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f85f55dd7b6dd9e65df9b9fa7d7d9fb", "sha256": "dcfb38973a37f961976c6db5c23facd98b1861065789f0d90d1d92d8e3a3866d"}, "downloads": -1, "filename": "zstandard-0.10.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "9f85f55dd7b6dd9e65df9b9fa7d7d9fb", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 490530, "upload_time": "2018-10-08T20:35:59", "upload_time_iso_8601": "2018-10-08T20:35:59.199153Z", "url": "https://files.pythonhosted.org/packages/a3/a6/1352d3bb2369f99c2737cfaf02b66262f2e854e291afbd6df0360c798fec/zstandard-0.10.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b6dfcc3ae2837c8629de32d3c5df776", "sha256": "c3ec17f6e6cae581c92ad09830ddde564884fb5c20b2b832fa8a26b4e85323fa"}, "downloads": -1, "filename": "zstandard-0.10.0-cp37-cp37m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "7b6dfcc3ae2837c8629de32d3c5df776", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 571270, "upload_time": "2018-10-08T20:36:00", "upload_time_iso_8601": "2018-10-08T20:36:00.845661Z", "url": "https://files.pythonhosted.org/packages/c9/45/22854baae51131ed365109f9026ec5fb755b40abf46e3f2764628b88672c/zstandard-0.10.0-cp37-cp37m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d87e464aae1ad17f160a24cf9335e63b", "sha256": "782c77a0e74a7d8e18e2a5e54b0b91528d39f8aa80dc66a7db9df15e2a9764cf"}, "downloads": -1, "filename": "zstandard-0.10.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d87e464aae1ad17f160a24cf9335e63b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 2897321, "upload_time": "2018-10-08T20:36:02", "upload_time_iso_8601": "2018-10-08T20:36:02.831859Z", "url": "https://files.pythonhosted.org/packages/c2/cc/f1d545336bad742f8ebee5387e931683549c645996a452dd74d569c907f6/zstandard-0.10.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4422c5862d3ef05fed0e499ce489e9d0", "sha256": "239f838374a37625d3f50f241e77573afd4f6ad9e1eea77478114a65340fe428"}, "downloads": -1, "filename": "zstandard-0.10.0-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "4422c5862d3ef05fed0e499ce489e9d0", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 417438, "upload_time": "2018-10-08T20:36:04", "upload_time_iso_8601": "2018-10-08T20:36:04.579545Z", "url": "https://files.pythonhosted.org/packages/8a/72/a57b8e417018d37dd919b2be0c46a2ad7a1c0b573d95ce3889c5a6dced82/zstandard-0.10.0-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2ac3beb6915957a9a43147221e5a24d", "sha256": "11bf9419cf0b9debfd175db21587ace5253af53f5846bdaa65ca4f18de6434e1"}, "downloads": -1, "filename": "zstandard-0.10.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "a2ac3beb6915957a9a43147221e5a24d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 484600, "upload_time": "2018-10-08T20:36:06", "upload_time_iso_8601": "2018-10-08T20:36:06.389044Z", "url": "https://files.pythonhosted.org/packages/27/12/010b865f9070ac4c659bb3a2ae7b8ed11d39256e946ef2b3e1b3653265a9/zstandard-0.10.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf0b5f2231862dcbb913848e69f0a93c", "sha256": "d4190adf8e9cbfde8c9c84b78ac83c6fae1a2cef5f875d530a642e2c311e13cb"}, "downloads": -1, "filename": "zstandard-0.10.0.tar.gz", "has_sig": false, "md5_digest": "bf0b5f2231862dcbb913848e69f0a93c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 611295, "upload_time": "2018-10-08T20:37:20", "upload_time_iso_8601": "2018-10-08T20:37:20.285333Z", "url": "https://files.pythonhosted.org/packages/9f/48/897674519a1d5d530748ffeba518261617c82b19bcad062d927bfbda9e96/zstandard-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "c6f606f13a4a491808e9d96cefdfeee9", "sha256": "bd1816f8305f2d4be8b7fe770995f3c803e500c57c8aee38e450de212b218a0e"}, "downloads": -1, "filename": "zstandard-0.10.1-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "c6f606f13a4a491808e9d96cefdfeee9", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 573316, "upload_time": "2018-10-08T23:50:25", "upload_time_iso_8601": "2018-10-08T23:50:25.690203Z", "url": "https://files.pythonhosted.org/packages/a7/6a/8c0c46a17d84f543e6a73a0f4379ded26c1ea6a1f79e7ae639ea92b5c503/zstandard-0.10.1-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba98d05acf9b3d5e78f9711cbb9128af", "sha256": "74a5683021fb308299229120eba8aa28209f1ca9b5aaeff12579599c8f272e45"}, "downloads": -1, "filename": "zstandard-0.10.1-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "ba98d05acf9b3d5e78f9711cbb9128af", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2686142, "upload_time": "2018-10-08T23:50:27", "upload_time_iso_8601": "2018-10-08T23:50:27.833060Z", "url": "https://files.pythonhosted.org/packages/d2/5b/27904d991b998b852323cf817db82406d2f7c22acc36045e643eea21d6fd/zstandard-0.10.1-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e59b88696489120b0aa0a50fcc470a1", "sha256": "a134ea9e51b393e4e2c7003b65d812224860c76d5b3e0ac69cd67efed2c71b1d"}, "downloads": -1, "filename": "zstandard-0.10.1-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7e59b88696489120b0aa0a50fcc470a1", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2888853, "upload_time": "2018-10-08T23:50:30", "upload_time_iso_8601": "2018-10-08T23:50:30.183839Z", "url": "https://files.pythonhosted.org/packages/2e/a4/4f91e1d1f15e7b822f5d94eb88e8145826702ec5f76feb0d4681d712a780/zstandard-0.10.1-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55bef8006953d745c9e6f8c6d4ef1185", "sha256": "b47202af348c3ec028850d6e47d72c60e883169bf739c990e2b043d780df38b4"}, "downloads": -1, "filename": "zstandard-0.10.1-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "55bef8006953d745c9e6f8c6d4ef1185", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2685537, "upload_time": "2018-10-08T23:50:32", "upload_time_iso_8601": "2018-10-08T23:50:32.585806Z", "url": "https://files.pythonhosted.org/packages/94/a3/69897af1f540c09d94e535e80d6e079f0d93dc83680ac0175af6b2267ea5/zstandard-0.10.1-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43dac786f911e23852206f9e773d69ab", "sha256": "590e4e2562f06ec1075a73155b42a4904a6b4b3414ce10566d7bbfdb9334d5fc"}, "downloads": -1, "filename": "zstandard-0.10.1-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "43dac786f911e23852206f9e773d69ab", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2883678, "upload_time": "2018-10-08T23:50:35", "upload_time_iso_8601": "2018-10-08T23:50:35.004572Z", "url": "https://files.pythonhosted.org/packages/45/79/98de8307662e97917c311ec3207bd7eab297c7312e171e8130e526f71c0e/zstandard-0.10.1-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "746517fae7c512b02ba38baad79c6e3c", "sha256": "67d184f99ea8372f03c54324218caa9a3b585f1c2c4154a96f79ebdc32438e91"}, "downloads": -1, "filename": "zstandard-0.10.1-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "746517fae7c512b02ba38baad79c6e3c", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 392839, "upload_time": "2018-10-08T23:50:37", "upload_time_iso_8601": "2018-10-08T23:50:37.032158Z", "url": "https://files.pythonhosted.org/packages/04/7a/567c323f3bcab5d9ab9cdcfe96a0508ff4212c418fd7f5a0968b962a8839/zstandard-0.10.1-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce1c3838d5e9a48b9bc2d7ff5e3a733b", "sha256": "ff66acedb230db19376afdc1e53c3dd5dd4ec4c69dc1fb07f385e38bc6d144fe"}, "downloads": -1, "filename": "zstandard-0.10.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "ce1c3838d5e9a48b9bc2d7ff5e3a733b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 482135, "upload_time": "2018-10-08T23:50:38", "upload_time_iso_8601": "2018-10-08T23:50:38.635307Z", "url": "https://files.pythonhosted.org/packages/82/ec/a538ce31463411c3dcd1c53ea1b8c1dddddba92ec22d3265aca6d5e9770c/zstandard-0.10.1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e9f0ba991370ca153d876a85df08186", "sha256": "55af7c80c8584cd9a8bf12374b56cea84d27f006879ab233b7f577b4a6b29454"}, "downloads": -1, "filename": "zstandard-0.10.1-cp34-cp34m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "8e9f0ba991370ca153d876a85df08186", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 571803, "upload_time": "2018-10-08T23:50:40", "upload_time_iso_8601": "2018-10-08T23:50:40.537927Z", "url": "https://files.pythonhosted.org/packages/1b/bb/b827e833c4eed5629846ad780f005d503c02d20bc7f81b36499073fe7e05/zstandard-0.10.1-cp34-cp34m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ab416522eee632a56b1c71b2f70cf6f", "sha256": "527b3eb929ba186676d8696f5ab44226952c3872178437f0c32e4950fa477ba2"}, "downloads": -1, "filename": "zstandard-0.10.1-cp34-cp34m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "8ab416522eee632a56b1c71b2f70cf6f", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2702010, "upload_time": "2018-10-08T23:50:42", "upload_time_iso_8601": "2018-10-08T23:50:42.633654Z", "url": "https://files.pythonhosted.org/packages/64/f3/1561eb8c23508890596ae3008baacb84f21e8a083d0910d7b6104e3482cf/zstandard-0.10.1-cp34-cp34m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "248f7e50f1962f7c088a3e176f71bf34", "sha256": "498db7c0266fd37d6f35f47c4fae791e52747ed4ba2121e415806989cbbfa0b6"}, "downloads": -1, "filename": "zstandard-0.10.1-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "248f7e50f1962f7c088a3e176f71bf34", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2888692, "upload_time": "2018-10-08T23:50:44", "upload_time_iso_8601": "2018-10-08T23:50:44.926996Z", "url": "https://files.pythonhosted.org/packages/be/46/9802f66d9ddddb79f1758c5ffcaab7d283217f10bd312be6a40457f16618/zstandard-0.10.1-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69f137bb1f3b63cc9476996e243fd59f", "sha256": "d221684bc0d4c5c0cb5bb8ba194bbeafaca521067f91bf40e46b9e91d0e26a10"}, "downloads": -1, "filename": "zstandard-0.10.1-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "69f137bb1f3b63cc9476996e243fd59f", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 403925, "upload_time": "2018-10-08T23:50:46", "upload_time_iso_8601": "2018-10-08T23:50:46.678929Z", "url": "https://files.pythonhosted.org/packages/5b/8b/9f6eacbeba6732e4875d1e838e9d185524f681467d775d7f3f2afed789e8/zstandard-0.10.1-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5d552c56a64002451a985fefce3e688", "sha256": "5bdadf61bbd7f4253181242c51229774bac8ed1ed26fcbd973c67c667c6a9316"}, "downloads": -1, "filename": "zstandard-0.10.1-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "d5d552c56a64002451a985fefce3e688", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 481637, "upload_time": "2018-10-08T23:50:48", "upload_time_iso_8601": "2018-10-08T23:50:48.286223Z", "url": "https://files.pythonhosted.org/packages/f5/c4/0c9840308efcc45b3167518e60a5ac9ba6d5c38492595dba2514d17b1f0c/zstandard-0.10.1-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2403f7a87790fb7168c6de7d8da70ec9", "sha256": "56429610b6b3668622e941b07e6704796f38c08be5b4ba16b16d87670ed1433c"}, "downloads": -1, "filename": "zstandard-0.10.1-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "2403f7a87790fb7168c6de7d8da70ec9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 572839, "upload_time": "2018-10-08T23:50:50", "upload_time_iso_8601": "2018-10-08T23:50:50.138861Z", "url": "https://files.pythonhosted.org/packages/47/70/52b78b9d2349045c9592cb764dc28a360618f8d21ab452678fc1d8e3602e/zstandard-0.10.1-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b478a63518f1559d643a9466050312a", "sha256": "e52ab87e22730539df4d15f23bcf8bbedc3fd3fb5c6ee0c4c9af0dae7d14f6f6"}, "downloads": -1, "filename": "zstandard-0.10.1-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "1b478a63518f1559d643a9466050312a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2707995, "upload_time": "2018-10-08T23:50:53", "upload_time_iso_8601": "2018-10-08T23:50:53.688073Z", "url": "https://files.pythonhosted.org/packages/5a/d3/4585293597c357b994089d71f224f8bb4f34bca49c07f557738b096b4704/zstandard-0.10.1-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f53c060298974a7527e0f0eff5eb91e2", "sha256": "b9bc4fc3133801256e75cd2db805c286dac46b76ec0ac33a5e096b7732645554"}, "downloads": -1, "filename": "zstandard-0.10.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f53c060298974a7527e0f0eff5eb91e2", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2896098, "upload_time": "2018-10-08T23:50:55", "upload_time_iso_8601": "2018-10-08T23:50:55.739556Z", "url": "https://files.pythonhosted.org/packages/1c/72/d0b2e33b8be9cabfff848c2040aee8f86ea59e5e9efe751f202df9307f37/zstandard-0.10.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30de8cff0fdcc142f7d94a140955fb18", "sha256": "82cfa2991bca7aa158327e2855b9a2d1b714615a90093f23266d8fcdfc611900"}, "downloads": -1, "filename": "zstandard-0.10.1-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "30de8cff0fdcc142f7d94a140955fb18", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 422607, "upload_time": "2018-10-08T23:50:57", "upload_time_iso_8601": "2018-10-08T23:50:57.533536Z", "url": "https://files.pythonhosted.org/packages/b5/ca/0ef33d750c20c636c6983099d4fbd21763e4b9ad4d04db9b59249c30633c/zstandard-0.10.1-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f734d868395255eb03f972288e4e82af", "sha256": "897daa1eead5fd3d5e29aae2104bc9edbc34e7c0f3c250a7a4b58c1dfb6c053a"}, "downloads": -1, "filename": "zstandard-0.10.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "f734d868395255eb03f972288e4e82af", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 491179, "upload_time": "2018-10-08T23:50:59", "upload_time_iso_8601": "2018-10-08T23:50:59.198982Z", "url": "https://files.pythonhosted.org/packages/b0/cf/02361306dd7567a7aaacb6fa945a46048626383969906e1dc8ce6e18b6da/zstandard-0.10.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c31fcffc38b10b8a827a23a78987799a", "sha256": "f5da0842a24d1f7720b098a4d63540a161a26796fa1fd252edb6d83688a0260b"}, "downloads": -1, "filename": "zstandard-0.10.1-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "c31fcffc38b10b8a827a23a78987799a", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 573641, "upload_time": "2018-10-08T23:51:00", "upload_time_iso_8601": "2018-10-08T23:51:00.837083Z", "url": "https://files.pythonhosted.org/packages/e9/8a/eacd06f93420aba3bafff09189151dc5cc97188e6480519a809f68284c28/zstandard-0.10.1-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e50c696a64adc14ab5b68cc173955d0", "sha256": "fbdf81f4bae8bbb09aac839794374200f3f7a6332a88325e8e74d4e8cad2c743"}, "downloads": -1, "filename": "zstandard-0.10.1-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "4e50c696a64adc14ab5b68cc173955d0", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2709985, "upload_time": "2018-10-08T23:51:02", "upload_time_iso_8601": "2018-10-08T23:51:02.737737Z", "url": "https://files.pythonhosted.org/packages/1b/67/0284c911026c9aff789c3932774b129921fbace4b423206a1fdd8dd422b1/zstandard-0.10.1-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fd65517ab8d5a19b96e865df306b5a9", "sha256": "df68ae18a9e04827e80d447d06062e21e452afcea51ac052109424fbe7d042be"}, "downloads": -1, "filename": "zstandard-0.10.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7fd65517ab8d5a19b96e865df306b5a9", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2894121, "upload_time": "2018-10-08T23:51:05", "upload_time_iso_8601": "2018-10-08T23:51:05.022453Z", "url": "https://files.pythonhosted.org/packages/c1/94/263e523204c31d2974a87b0e6a15e62af3685151e9e557dd023115a90e0d/zstandard-0.10.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2becd6406cac9c80ebce4bb392e7d283", "sha256": "c30138cf21a9f6afb19858e3862e6873b23ac0902fd345dc27bfcca4310bb7a4"}, "downloads": -1, "filename": "zstandard-0.10.1-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "2becd6406cac9c80ebce4bb392e7d283", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 421140, "upload_time": "2018-10-08T23:51:07", "upload_time_iso_8601": "2018-10-08T23:51:07.432684Z", "url": "https://files.pythonhosted.org/packages/bb/83/a726fc7d51bb9742cbc6cf7624adfe080f91ff251e14c1d7d13f0408a879/zstandard-0.10.1-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ba2d4f05072325729e19ead9eef53b8", "sha256": "20a3d400e58ef36c8d7f9d4720304ce964df15bb34c38ed8b548495b230aef59"}, "downloads": -1, "filename": "zstandard-0.10.1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "6ba2d4f05072325729e19ead9eef53b8", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 484106, "upload_time": "2018-10-08T23:51:09", "upload_time_iso_8601": "2018-10-08T23:51:09.190741Z", "url": "https://files.pythonhosted.org/packages/83/5c/8f2904dd163cd3d14de0b98832c74eaf12ca40cb4f09c21b2a50d922ce0c/zstandard-0.10.1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b81feab98a8f7abb4903d4ffb0c46382", "sha256": "789d69660abdb8cffc4e0f452e29226769850587a3ae01b20fac5f2c77caa4f2"}, "downloads": -1, "filename": "zstandard-0.10.1-cp37-cp37m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "b81feab98a8f7abb4903d4ffb0c46382", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 573353, "upload_time": "2018-10-08T23:51:11", "upload_time_iso_8601": "2018-10-08T23:51:11.140337Z", "url": "https://files.pythonhosted.org/packages/a1/4f/eb3b807f7c0177a670de5954b619921cc5fc7fae0ecea38be0f690aa7fc1/zstandard-0.10.1-cp37-cp37m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f90d5d76389341528af37986fd7de4f", "sha256": "637730633184bc61009986e9d779cb04529f08d5d2648bc0c71072b88c4282f6"}, "downloads": -1, "filename": "zstandard-0.10.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4f90d5d76389341528af37986fd7de4f", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 2897787, "upload_time": "2018-10-08T23:51:13", "upload_time_iso_8601": "2018-10-08T23:51:13.039587Z", "url": "https://files.pythonhosted.org/packages/65/c5/74b5a43a253d19a55d433d0c7653dd4e65ff7c6a197182f8b6d4037ac267/zstandard-0.10.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60d9f2655a0e9926e201229ce233642f", "sha256": "b6de3ee878def3ab915d1213655012e09ffe9c36a74ccaa43f4da4eab94d0444"}, "downloads": -1, "filename": "zstandard-0.10.1-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "60d9f2655a0e9926e201229ce233642f", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 418774, "upload_time": "2018-10-08T23:51:15", "upload_time_iso_8601": "2018-10-08T23:51:15.132411Z", "url": "https://files.pythonhosted.org/packages/1e/b3/54fd87cac4a9a797ab72d30ba600340a5da071be92849c2d2666f648b13f/zstandard-0.10.1-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c51cf5d4eb7e76bcd2b8202dd72b175f", "sha256": "3e96d98353677ca2939b5d5449778fcff2956b2c1b5c373bc15d7ce3a97acb72"}, "downloads": -1, "filename": "zstandard-0.10.1-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "c51cf5d4eb7e76bcd2b8202dd72b175f", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 490695, "upload_time": "2018-10-08T23:51:16", "upload_time_iso_8601": "2018-10-08T23:51:16.790117Z", "url": "https://files.pythonhosted.org/packages/a8/d3/4f6f2e578528dc4dc95f1a51310ad2023b2b287820f1fddcbfa96cd51cdf/zstandard-0.10.1-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ec5bfef32a9fb11bd413114ec99fc37", "sha256": "b9e21eb96328ae594a9a9ffb48424ecf758d0dbffaed2a508aa6679cb2cf658c"}, "downloads": -1, "filename": "zstandard-0.10.1.tar.gz", "has_sig": false, "md5_digest": "5ec5bfef32a9fb11bd413114ec99fc37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 611517, "upload_time": "2018-10-08T23:51:18", "upload_time_iso_8601": "2018-10-08T23:51:18.407862Z", "url": "https://files.pythonhosted.org/packages/29/21/4612a4b9e628d61aa045558ff008452378b5a333e5a64f7de29dee8b1e77/zstandard-0.10.1.tar.gz", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "6aea0875e3ea680719ab199c8f3f92f2", "sha256": "5f4f650b83b8085862de9e555d87f6053ca577b4070f4c6610a870116c4dd1f4"}, "downloads": -1, "filename": "zstandard-0.10.2-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "6aea0875e3ea680719ab199c8f3f92f2", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 583887, "upload_time": "2018-11-03T20:59:25", "upload_time_iso_8601": "2018-11-03T20:59:25.094143Z", "url": "https://files.pythonhosted.org/packages/fd/47/7b0ddedd4d59d93c0462f94c9ddd3fb552f82c8a95b455278c90bb3da01b/zstandard-0.10.2-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed47f992cadd0db5e257c2052944ed55", "sha256": "390acfced0106fb12247e12c2aa399836e6686f5ba9daec332957ff830f215cd"}, "downloads": -1, "filename": "zstandard-0.10.2-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "ed47f992cadd0db5e257c2052944ed55", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2689713, "upload_time": "2018-11-03T20:59:27", "upload_time_iso_8601": "2018-11-03T20:59:27.731700Z", "url": "https://files.pythonhosted.org/packages/98/27/807a38c848afe986fc95979063e0d8b2ff141c0d7f217d79405338b8b81c/zstandard-0.10.2-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5c8b77f9d3f47c6201bba69ca2fa845", "sha256": "c794b5c21485fb3232f5693995ba1a497267b1aecb70b218107cf131f8dc1d3d"}, "downloads": -1, "filename": "zstandard-0.10.2-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f5c8b77f9d3f47c6201bba69ca2fa845", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2901015, "upload_time": "2018-11-03T20:59:30", "upload_time_iso_8601": "2018-11-03T20:59:30.014930Z", "url": "https://files.pythonhosted.org/packages/d2/80/c7b92e08fe38b642adcdbfd231f4afbcf11f245a4d74b5ca1e899d92a093/zstandard-0.10.2-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f7b905c343d8a6953b05a11885b326e", "sha256": "e982d8af9618d45b25456f1f80e6d628295772d74d755f9a46b90711b7a56067"}, "downloads": -1, "filename": "zstandard-0.10.2-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "6f7b905c343d8a6953b05a11885b326e", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2696791, "upload_time": "2018-11-03T20:59:32", "upload_time_iso_8601": "2018-11-03T20:59:32.246236Z", "url": "https://files.pythonhosted.org/packages/f9/dc/8f32f072e7c4733b5ed3df3e613197eb6e0c20fd48fa83703e39433bba71/zstandard-0.10.2-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10ae6c810033bd5c2d069de6d6c34db8", "sha256": "d05516bc197c5b7b2aa2f834ea7c5ee9fd9aa3034f4193cc05d899b18251aa9c"}, "downloads": -1, "filename": "zstandard-0.10.2-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "10ae6c810033bd5c2d069de6d6c34db8", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2894531, "upload_time": "2018-11-03T20:59:34", "upload_time_iso_8601": "2018-11-03T20:59:34.542800Z", "url": "https://files.pythonhosted.org/packages/f1/34/5fc00cb24077fded82d0f6657e1940c6d6ddd02136e83479db37545d9f75/zstandard-0.10.2-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db17c1790c55681c712bdc8cf513c2a1", "sha256": "91025801859a60b7761dea6a8b645f25be6d3639ef828423f094d90b3f60850e"}, "downloads": -1, "filename": "zstandard-0.10.2-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "db17c1790c55681c712bdc8cf513c2a1", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 403162, "upload_time": "2018-11-03T20:59:36", "upload_time_iso_8601": "2018-11-03T20:59:36.602343Z", "url": "https://files.pythonhosted.org/packages/b6/b1/b598ad0228fd937faffc8a8477aea7a5ea5ef3293a826a547deff3b96267/zstandard-0.10.2-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28b27fefe290028d1f23ac0a308e88f3", "sha256": "ef24c8ec97f93b2bdf1080553cdf38ea9ab195846b679cdcfe683c945ed2f1ee"}, "downloads": -1, "filename": "zstandard-0.10.2-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "28b27fefe290028d1f23ac0a308e88f3", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 492800, "upload_time": "2018-11-03T20:59:38", "upload_time_iso_8601": "2018-11-03T20:59:38.408505Z", "url": "https://files.pythonhosted.org/packages/48/f9/fc8d8e40014ab807dc2edc7ec470771cd536bf2a867294d3e468883ca0db/zstandard-0.10.2-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da4ed90b447c2350979de418a49c1b97", "sha256": "72ef2361d90a717457376351acb5b1b0c189a09dbd95adcb51907a96b79a6add"}, "downloads": -1, "filename": "zstandard-0.10.2-cp34-cp34m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "da4ed90b447c2350979de418a49c1b97", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 583033, "upload_time": "2018-11-03T20:59:40", "upload_time_iso_8601": "2018-11-03T20:59:40.184278Z", "url": "https://files.pythonhosted.org/packages/84/16/d077783e9170424bc6a90d0b4e9466fe45b4bc8b1d800b182582744073dc/zstandard-0.10.2-cp34-cp34m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7845d128f8452eeb00150421782aae75", "sha256": "302bd7b3bc7281015cd6f975207755c534551d0a32c79147518f2de0459dbef4"}, "downloads": -1, "filename": "zstandard-0.10.2-cp34-cp34m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "7845d128f8452eeb00150421782aae75", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2711254, "upload_time": "2018-11-03T20:59:42", "upload_time_iso_8601": "2018-11-03T20:59:42.246230Z", "url": "https://files.pythonhosted.org/packages/8e/3a/72a7ede992e3060255e59d393aa48226b48a89c7acf608000babc3873ed7/zstandard-0.10.2-cp34-cp34m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "321b9146503ed6b2ed183c5745b2da44", "sha256": "f46c5021c3663f82c2ff994295a8574638d56a831ca2a26d736d47fbcf4f9187"}, "downloads": -1, "filename": "zstandard-0.10.2-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "321b9146503ed6b2ed183c5745b2da44", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2903218, "upload_time": "2018-11-03T20:59:44", "upload_time_iso_8601": "2018-11-03T20:59:44.235117Z", "url": "https://files.pythonhosted.org/packages/61/ae/cb26eeeec0ac8d0267c276658dd3e16778aa7e2fc33132f022fc19e6df3e/zstandard-0.10.2-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9802ac4f59396345b61500d94b5ec218", "sha256": "53f89a65d52d6fb56b2c5dd0445f30ca25852f344ba20de325ce6767dd842fca"}, "downloads": -1, "filename": "zstandard-0.10.2-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "9802ac4f59396345b61500d94b5ec218", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 412319, "upload_time": "2018-11-03T20:59:45", "upload_time_iso_8601": "2018-11-03T20:59:45.899999Z", "url": "https://files.pythonhosted.org/packages/62/47/470ea3aff725a54e092a05bf8fc11ec74bdd7e7dd28c88215d310bc25de9/zstandard-0.10.2-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94dc1e8bbe4a4a15165e18e5882bf34c", "sha256": "8b587c9a17f4b050274d9b7f9284d5fae0a8d6a8021f88f779345593326bc33d"}, "downloads": -1, "filename": "zstandard-0.10.2-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "94dc1e8bbe4a4a15165e18e5882bf34c", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 491057, "upload_time": "2018-11-03T20:59:47", "upload_time_iso_8601": "2018-11-03T20:59:47.579352Z", "url": "https://files.pythonhosted.org/packages/15/a9/9968ced67bba723db5d973871169336fa260ebf5a785d5aa1992f62e0286/zstandard-0.10.2-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "313089eab1896971d4fd4fa2790e8546", "sha256": "43ec51075547d498ec6e7952e459c3817e610d6e4ca68f4fa43a16ccea01d496"}, "downloads": -1, "filename": "zstandard-0.10.2-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "313089eab1896971d4fd4fa2790e8546", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 582827, "upload_time": "2018-11-03T20:59:49", "upload_time_iso_8601": "2018-11-03T20:59:49.203553Z", "url": "https://files.pythonhosted.org/packages/2a/8b/4cffdca79d1b64790d53e7cbb6ed0d1decbd15812e81ab41e6db13ca628f/zstandard-0.10.2-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b11a626e679fdec4453e31facb03c3b6", "sha256": "d085c2c676f03357e5d6b11dbbf4e8c1b0d20b1066ac87e6cccc45d4b6c19675"}, "downloads": -1, "filename": "zstandard-0.10.2-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "b11a626e679fdec4453e31facb03c3b6", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2713421, "upload_time": "2018-11-03T20:59:51", "upload_time_iso_8601": "2018-11-03T20:59:51.460722Z", "url": "https://files.pythonhosted.org/packages/41/d2/c1abe847376432ac233581f8ce37aabbaa4816fa3422fc869743e4a37173/zstandard-0.10.2-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0db9e1680d2ca1e3f98eee44520eac2b", "sha256": "08114ac056944e7f70c0faf99d0afbce08b078eacf8ee6698985654c7e725234"}, "downloads": -1, "filename": "zstandard-0.10.2-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "0db9e1680d2ca1e3f98eee44520eac2b", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2905715, "upload_time": "2018-11-03T20:59:54", "upload_time_iso_8601": "2018-11-03T20:59:54.024400Z", "url": "https://files.pythonhosted.org/packages/78/7d/2a90da350ce527acc2f5a3ccb5e05598f7e80e71429468df5ffd904c58eb/zstandard-0.10.2-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74c70909427e8a5ba44f27054fbba672", "sha256": "7ef5c7ede8e8cda2a37c0ecab456f4cfae2c42049f51b24edb5303dbfe318ea6"}, "downloads": -1, "filename": "zstandard-0.10.2-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "74c70909427e8a5ba44f27054fbba672", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 432248, "upload_time": "2018-11-03T20:59:55", "upload_time_iso_8601": "2018-11-03T20:59:55.797042Z", "url": "https://files.pythonhosted.org/packages/9a/5d/6a8fe5dc952e40326006a8207f89c96aff064dd11602ffe54d2832d9f56b/zstandard-0.10.2-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a1e9d06961a132efb8298152373ef70", "sha256": "aa520b90eede823632013a319e91652d8226a6309a104cffdc7e00d5a2b5e66b"}, "downloads": -1, "filename": "zstandard-0.10.2-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "7a1e9d06961a132efb8298152373ef70", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 494077, "upload_time": "2018-11-03T20:59:57", "upload_time_iso_8601": "2018-11-03T20:59:57.406817Z", "url": "https://files.pythonhosted.org/packages/d2/89/ff0f2da783b06dc9a1ac9340144fbcf469f82d1183086e14b506a6bcb767/zstandard-0.10.2-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df6f9af058b7863b5d6220d87bed24e5", "sha256": "2acd18eeac4fcecef8c1b95d4ffaa606222aa1ba0d4372e829dc516b0504e6ef"}, "downloads": -1, "filename": "zstandard-0.10.2-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "df6f9af058b7863b5d6220d87bed24e5", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 582508, "upload_time": "2018-11-03T20:59:59", "upload_time_iso_8601": "2018-11-03T20:59:59.074533Z", "url": "https://files.pythonhosted.org/packages/2d/f3/8313e741385855896d993654d5951fc8828f903c517ba75053d0d59f5550/zstandard-0.10.2-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e890847876b7ec948e21732743b939e3", "sha256": "e7b84c10ed30c1c997d81ef271945372fba9e18ac58d77a17d43fd9c42392ed4"}, "downloads": -1, "filename": "zstandard-0.10.2-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "e890847876b7ec948e21732743b939e3", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2721430, "upload_time": "2018-11-03T21:00:00", "upload_time_iso_8601": "2018-11-03T21:00:00.933576Z", "url": "https://files.pythonhosted.org/packages/03/0d/01261506f58735adf13197dfaa4ccfc6688d1d76b3ee785d97caa47f42bd/zstandard-0.10.2-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edce0c7124ff75b726603b85d925370c", "sha256": "9d2940e2801cc768d2cb71e71dca3b025ca3737e9d1d0fad0c95b2e7db0c947a"}, "downloads": -1, "filename": "zstandard-0.10.2-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "edce0c7124ff75b726603b85d925370c", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2905592, "upload_time": "2018-11-03T21:00:03", "upload_time_iso_8601": "2018-11-03T21:00:03.167478Z", "url": "https://files.pythonhosted.org/packages/58/b7/653748f2ba12a06d16dbcf83d4211bff773b422de39e537e7cb726bae442/zstandard-0.10.2-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "652332c95d4338eb223cc3e3a5dfdacb", "sha256": "087276799ddf3200b4724e3d6f57b11ba975d9243b4af9e95721397d795a2497"}, "downloads": -1, "filename": "zstandard-0.10.2-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "652332c95d4338eb223cc3e3a5dfdacb", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 433788, "upload_time": "2018-11-03T21:00:05", "upload_time_iso_8601": "2018-11-03T21:00:05.000221Z", "url": "https://files.pythonhosted.org/packages/0f/80/c44599e7bb26541f49a58bc48718f0b3204b35b0e40fa6df64310214ab3b/zstandard-0.10.2-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ae07ce8b4cdf0338b3c89b034fec6bd", "sha256": "b10fba39049595827f228e77e7b5070cb39c46466bf8fef51da73220a20cc717"}, "downloads": -1, "filename": "zstandard-0.10.2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "5ae07ce8b4cdf0338b3c89b034fec6bd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 494270, "upload_time": "2018-11-03T21:00:06", "upload_time_iso_8601": "2018-11-03T21:00:06.984775Z", "url": "https://files.pythonhosted.org/packages/ed/7e/653b7a806758d9deedee5fd46cca53415b039083099809657ae8af96db50/zstandard-0.10.2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82145c338ecd2d1cb7106fa474c3d35c", "sha256": "1383412acd5356ff543c434723f2e7794c77e1ed4efc1062464cc2112c09af50"}, "downloads": -1, "filename": "zstandard-0.10.2-cp37-cp37m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "82145c338ecd2d1cb7106fa474c3d35c", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 582375, "upload_time": "2018-11-03T21:00:08", "upload_time_iso_8601": "2018-11-03T21:00:08.775147Z", "url": "https://files.pythonhosted.org/packages/13/d4/d692e5029996861cfa6f62efd842bd1522a1231bd2511859fb72d59ee977/zstandard-0.10.2-cp37-cp37m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bccf26754be577a6c294747b96693ec3", "sha256": "0fe6403a01e996a7247239691101148dc4071ccf7fe12b680d7b6c91a04aefbb"}, "downloads": -1, "filename": "zstandard-0.10.2-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "bccf26754be577a6c294747b96693ec3", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 2917029, "upload_time": "2018-11-03T21:00:10", "upload_time_iso_8601": "2018-11-03T21:00:10.828321Z", "url": "https://files.pythonhosted.org/packages/87/42/91fc09286a817c4bdf22e338e9dc1ccbcefd4299f0aaebe8541069361689/zstandard-0.10.2-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38759211c3f99aef15eb9235b66ea6c7", "sha256": "dd40e26aaee67b9078618b0fce3d5f209e328852f2c72c6772cf6352f57d2ed1"}, "downloads": -1, "filename": "zstandard-0.10.2-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "38759211c3f99aef15eb9235b66ea6c7", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 432857, "upload_time": "2018-11-03T21:00:12", "upload_time_iso_8601": "2018-11-03T21:00:12.904934Z", "url": "https://files.pythonhosted.org/packages/23/6a/3a8fbdcda5a8c0ecafa45225f3792e920a5d427f9623b6aeaba10107d2b9/zstandard-0.10.2-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49bed7852f745e63d372a2f45e8b3812", "sha256": "0c21feac9f7c850a457b1c707c3cc4f3b8f475a3c9120f8cec82ebc3b215b80a"}, "downloads": -1, "filename": "zstandard-0.10.2-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "49bed7852f745e63d372a2f45e8b3812", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 501493, "upload_time": "2018-11-03T21:00:14", "upload_time_iso_8601": "2018-11-03T21:00:14.775086Z", "url": "https://files.pythonhosted.org/packages/40/54/1fd636f3cab305825ef9c6db9a0ea09219f7859b4c453b68d6e686935d66/zstandard-0.10.2-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a06585653ed3bee038f6a313f78d499a", "sha256": "86c9dee0fe6d4ea5bf394767929fdf5f924d161d9a6d23adcd58a690c5e160b0"}, "downloads": -1, "filename": "zstandard-0.10.2.tar.gz", "has_sig": false, "md5_digest": "a06585653ed3bee038f6a313f78d499a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 611644, "upload_time": "2018-11-03T21:00:16", "upload_time_iso_8601": "2018-11-03T21:00:16.505596Z", "url": "https://files.pythonhosted.org/packages/c8/1d/15fb80becc616239241da591c2df144c5d932d01ca633c5f79c14b402ec3/zstandard-0.10.2.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "11431dcfbaf93329a67bbbd45cdd38db", "sha256": "552409f72fcab0b9b5277f6aad08bb91e8752e91aa42c2f2f3214d924fc96602"}, "downloads": -1, "filename": "zstandard-0.11.0-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "11431dcfbaf93329a67bbbd45cdd38db", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 634589, "upload_time": "2019-02-26T01:09:37", "upload_time_iso_8601": "2019-02-26T01:09:37.409374Z", "url": "https://files.pythonhosted.org/packages/ae/14/d64a9e6904287ec9776bdfe4e5a1e90b6b04e1adaf90544303656cb81936/zstandard-0.11.0-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9be643052fbcd35be50f9b96531e03e6", "sha256": "4cfff76760fd1014cc4f9fb9217e8c20a8bdbcf72fbed4fa867a2ba08d48be43"}, "downloads": -1, "filename": "zstandard-0.11.0-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "9be643052fbcd35be50f9b96531e03e6", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2855354, "upload_time": "2019-02-26T01:09:40", "upload_time_iso_8601": "2019-02-26T01:09:40.095748Z", "url": "https://files.pythonhosted.org/packages/0c/17/f62d175a91ab77aad1013a3e252ec6894817368261fbf70d5110e223dd0e/zstandard-0.11.0-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "302a02011d8d03a0fd6db2b68cf022dd", "sha256": "de11be02905444a18caed776f96b4c8c8e625aa7e7073ccb49e408518b996a74"}, "downloads": -1, "filename": "zstandard-0.11.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "302a02011d8d03a0fd6db2b68cf022dd", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3058030, "upload_time": "2019-02-26T01:09:42", "upload_time_iso_8601": "2019-02-26T01:09:42.456611Z", "url": "https://files.pythonhosted.org/packages/6d/f2/e6302caf7ced9d272fffe2bcf79afa6124148e46adf4be71e28b9d7b5667/zstandard-0.11.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25775ece48b70b462595530d18df3013", "sha256": "f6a297ff427b448c845026739d66750c461b7e545580e468cfeb068d54026fe6"}, "downloads": -1, "filename": "zstandard-0.11.0-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "25775ece48b70b462595530d18df3013", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2860925, "upload_time": "2019-02-26T01:09:44", "upload_time_iso_8601": "2019-02-26T01:09:44.938892Z", "url": "https://files.pythonhosted.org/packages/92/83/4b8cdff7807db74c1be30492cc253996c09d4ba409f70b47fb04777562af/zstandard-0.11.0-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df363d18c0174fdecd756e6d63a03819", "sha256": "129f3b2a15356afbf7c36f7e4529adece68fc558d25f91f6ed1f50f9e378284a"}, "downloads": -1, "filename": "zstandard-0.11.0-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "df363d18c0174fdecd756e6d63a03819", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3055056, "upload_time": "2019-02-26T01:09:47", "upload_time_iso_8601": "2019-02-26T01:09:47.957353Z", "url": "https://files.pythonhosted.org/packages/c0/6c/1201d34412f7d24c50ec2a9b26f4eaebdceac771cdbe1ab1d914d9399566/zstandard-0.11.0-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e6d4938780ff308fbea43a8000eaa94", "sha256": "c2eae1601ac69ed6ba60c7b000650e69a68944400ec22f600efbe2786cd46e5c"}, "downloads": -1, "filename": "zstandard-0.11.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "3e6d4938780ff308fbea43a8000eaa94", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 429368, "upload_time": "2019-02-26T01:09:50", "upload_time_iso_8601": "2019-02-26T01:09:50.250877Z", "url": "https://files.pythonhosted.org/packages/b7/1b/87cde7ea5f866009baa93fa9ddb32ad0205dbab1bf5b78eb37d846c98614/zstandard-0.11.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a900fddd59a7bab9eab6e50bf5e2b14", "sha256": "f38857f1c730017e542a3e75fd06cb40920ffa60ed1cc8f227d1c871c10c9506"}, "downloads": -1, "filename": "zstandard-0.11.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "6a900fddd59a7bab9eab6e50bf5e2b14", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 516907, "upload_time": "2019-02-26T01:09:52", "upload_time_iso_8601": "2019-02-26T01:09:52.201067Z", "url": "https://files.pythonhosted.org/packages/88/96/bf2d3c9c72fcb092b6c3c9756db249c8d8400ef6935088cbc9eb8086aa8f/zstandard-0.11.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d5a57f0870eb4a1a308cf117cfbcf97", "sha256": "9c43a5cb19174206b04de31c4db6bf2318a10df1ebfbffc9923bcccce9172509"}, "downloads": -1, "filename": "zstandard-0.11.0-cp34-cp34m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "8d5a57f0870eb4a1a308cf117cfbcf97", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 633060, "upload_time": "2019-02-26T01:09:53", "upload_time_iso_8601": "2019-02-26T01:09:53.992928Z", "url": "https://files.pythonhosted.org/packages/74/84/4e708bc1319c718f3c58ea74beae60a7209d1d39baf7f19e1607ad7f556f/zstandard-0.11.0-cp34-cp34m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2333cae6a693021171fc548342a8b602", "sha256": "16750ef79c517e4db2ef0d545ada8e10b2b0b139319d5da7abfba28c74dd7d60"}, "downloads": -1, "filename": "zstandard-0.11.0-cp34-cp34m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "2333cae6a693021171fc548342a8b602", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2886126, "upload_time": "2019-02-26T01:09:56", "upload_time_iso_8601": "2019-02-26T01:09:56.037642Z", "url": "https://files.pythonhosted.org/packages/2b/cd/914f5957c925b940278903c5e2b5394317ec888d7d01a19c7476a6bc9e47/zstandard-0.11.0-cp34-cp34m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "401fe55cf59215a5dee90fa10a14aefb", "sha256": "fb711068444779932d3920a3167d410c45b676b71e46097b937abc65ba0bcd8f"}, "downloads": -1, "filename": "zstandard-0.11.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "401fe55cf59215a5dee90fa10a14aefb", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 3047702, "upload_time": "2019-02-26T01:09:58", "upload_time_iso_8601": "2019-02-26T01:09:58.659536Z", "url": "https://files.pythonhosted.org/packages/f1/87/68af484e01bf9c00e59cf62e86742a8d88b68793038aa2f9185f911ff2d0/zstandard-0.11.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1682219e3c41243a4cf02d41e5269fcb", "sha256": "dbc893d85cb515a55f28ee5b392090d92728f9796601ca6849a493e0e9ab03fb"}, "downloads": -1, "filename": "zstandard-0.11.0-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "1682219e3c41243a4cf02d41e5269fcb", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 435761, "upload_time": "2019-02-26T01:10:06", "upload_time_iso_8601": "2019-02-26T01:10:06.902435Z", "url": "https://files.pythonhosted.org/packages/02/10/47516b7b361646113d0032ed7be09a7efb67d5f0b5ed528007f05c1855f3/zstandard-0.11.0-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e45a53c7f00a433039fdb409ec0519b5", "sha256": "aa56e7b5023ed02ef5a1b4bfdb779740253f24d3e17abd0444dbd66af19b5b77"}, "downloads": -1, "filename": "zstandard-0.11.0-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "e45a53c7f00a433039fdb409ec0519b5", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 515514, "upload_time": "2019-02-26T01:10:08", "upload_time_iso_8601": "2019-02-26T01:10:08.937669Z", "url": "https://files.pythonhosted.org/packages/a3/7d/8688362f230ea2f2c0cd972267b83f8ea2ed9bb2df7c7da0ecc5fe289cab/zstandard-0.11.0-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b0eda8b9b9704c0b450f9e825fcba0b", "sha256": "c101db68e53b6c079db9591820934fe2b7a09498540322ca08c534ef13c12786"}, "downloads": -1, "filename": "zstandard-0.11.0-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "1b0eda8b9b9704c0b450f9e825fcba0b", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 632529, "upload_time": "2019-02-26T01:10:11", "upload_time_iso_8601": "2019-02-26T01:10:11.320359Z", "url": "https://files.pythonhosted.org/packages/b6/c7/72f1a85f4121acbdd0e3ec128c3056cc456c8d86cbfbefd728272ac6c648/zstandard-0.11.0-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b066a585b71ff1a98b47c20db17539f", "sha256": "842e61b7be23fca97d6fdbab49c7d48c6905563ff41adea029016c6fad6a63a5"}, "downloads": -1, "filename": "zstandard-0.11.0-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "0b066a585b71ff1a98b47c20db17539f", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2890709, "upload_time": "2019-02-26T01:10:13", "upload_time_iso_8601": "2019-02-26T01:10:13.443906Z", "url": "https://files.pythonhosted.org/packages/e0/fc/84229e75944e172f4cbd29a7d5db94ec7fe3b1f356d51dedeaff933311fc/zstandard-0.11.0-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fda3bb6a02eb542cb40e13e812cdf14b", "sha256": "e6f895c7a9da2c30b812ff13a31fd744c9f4aade2f09fd84bc378930a9085491"}, "downloads": -1, "filename": "zstandard-0.11.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "fda3bb6a02eb542cb40e13e812cdf14b", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3052950, "upload_time": "2019-02-26T01:10:15", "upload_time_iso_8601": "2019-02-26T01:10:15.862775Z", "url": "https://files.pythonhosted.org/packages/fe/44/e7dd3f34bb8af682e057414a07e282e95d6ba2a5407e48d66d914162ae8e/zstandard-0.11.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d78d355c38cd9e0bf4a0673d49031df0", "sha256": "c6cf358418610d06c51d59cc431bd4e1863cf29481906b59a1bd85e73210fd00"}, "downloads": -1, "filename": "zstandard-0.11.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "d78d355c38cd9e0bf4a0673d49031df0", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 451703, "upload_time": "2019-02-26T01:10:18", "upload_time_iso_8601": "2019-02-26T01:10:18.118708Z", "url": "https://files.pythonhosted.org/packages/b6/c7/e3459be11b3f518a0b2f6903b74d0e0634e476a03a7fa67dfdb4f252c2fd/zstandard-0.11.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dee69c25d1d56eddac40a31fc8e0b20", "sha256": "9baf3989cdb1c9d6350bb928bdb4120783cba09e3a3f3a6f8d76c19440e25188"}, "downloads": -1, "filename": "zstandard-0.11.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "1dee69c25d1d56eddac40a31fc8e0b20", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 529186, "upload_time": "2019-02-26T01:10:20", "upload_time_iso_8601": "2019-02-26T01:10:20.533565Z", "url": "https://files.pythonhosted.org/packages/90/57/ee2b7b2385d38276fab540abedf58c2ec7fcd379afd81b0dc77f2ee8824b/zstandard-0.11.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f5ba386c29434d9230cd8c13ca7f747", "sha256": "f19ce2a9fc77bac6f8fe6c4ac14bc0e6d74e1997ec4dd3e060929034d8d97c99"}, "downloads": -1, "filename": "zstandard-0.11.0-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "9f5ba386c29434d9230cd8c13ca7f747", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 633008, "upload_time": "2019-02-26T01:10:22", "upload_time_iso_8601": "2019-02-26T01:10:22.604173Z", "url": "https://files.pythonhosted.org/packages/0e/72/46d814e7e513a1c5d76f380bba064bcc70735d1a47f7a42ba7be0d50f868/zstandard-0.11.0-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4b44c9c5f5de0346d0c06f0f5839e85", "sha256": "f19b3e0575de70f41eb216796e140b2d94e929ed7fe7b812ae5ad97967d2756f"}, "downloads": -1, "filename": "zstandard-0.11.0-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "c4b44c9c5f5de0346d0c06f0f5839e85", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2894578, "upload_time": "2019-02-26T01:10:24", "upload_time_iso_8601": "2019-02-26T01:10:24.789140Z", "url": "https://files.pythonhosted.org/packages/0b/1c/067839c6e9dba33caf65ed7d11a60fe45a81b644b7a8fd9aa81c42eadbe6/zstandard-0.11.0-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58683af613a9c76339cc5ac76c451c66", "sha256": "923b4595e831e00926d623bbb6340fd864dbdb3bef0994d04041ae696a0f6e66"}, "downloads": -1, "filename": "zstandard-0.11.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "58683af613a9c76339cc5ac76c451c66", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3057833, "upload_time": "2019-02-26T01:10:26", "upload_time_iso_8601": "2019-02-26T01:10:26.964423Z", "url": "https://files.pythonhosted.org/packages/15/29/f6c186c60ef9658f45e6f502ee19d85631b2f038ca1abaf809ba25da350a/zstandard-0.11.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d393f69ebc5e81ed85eb5b5012c60db", "sha256": "cf9a71b1a61ac1b3185e66d85577136ea05d633f91f1ba87af6cf82f79a3cdc1"}, "downloads": -1, "filename": "zstandard-0.11.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "5d393f69ebc5e81ed85eb5b5012c60db", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 449374, "upload_time": "2019-02-26T01:10:29", "upload_time_iso_8601": "2019-02-26T01:10:29.203170Z", "url": "https://files.pythonhosted.org/packages/4b/b4/25e7d2f10e4c1c833a54da8d1e20f6b857bdd03f309806a428e4d771675b/zstandard-0.11.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d60ae5d41a05338b1e31c7eba1ec3f6", "sha256": "119086d2e534835f0051f730713ec31cada722235370ea81fbc2157db33fac4f"}, "downloads": -1, "filename": "zstandard-0.11.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "0d60ae5d41a05338b1e31c7eba1ec3f6", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 528397, "upload_time": "2019-02-26T01:10:31", "upload_time_iso_8601": "2019-02-26T01:10:31.094782Z", "url": "https://files.pythonhosted.org/packages/39/3b/e9735ca9412e988dd1ca09b63aec4c6cc995cb95f91bfe4cf1ccf3f619ae/zstandard-0.11.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f19d6cf3bdcd25184f3db0cce0879762", "sha256": "479a01564bdf83fb333d40cd658ad16c96721a765fa1074811c62beeebb6f38e"}, "downloads": -1, "filename": "zstandard-0.11.0-cp37-cp37m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "f19d6cf3bdcd25184f3db0cce0879762", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 633845, "upload_time": "2019-02-26T01:10:32", "upload_time_iso_8601": "2019-02-26T01:10:32.946998Z", "url": "https://files.pythonhosted.org/packages/0e/f5/60d6af3b46e0394e740bf16d7bdcd5584db395f80ae19df7b0e8be03ebe6/zstandard-0.11.0-cp37-cp37m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45ed87cd3efa27ff5223407806927c31", "sha256": "d5da7f4dd3d5bb8c0ab71ddafeb9a851020236e1fce10e9c7a2883aece7c6c39"}, "downloads": -1, "filename": "zstandard-0.11.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "45ed87cd3efa27ff5223407806927c31", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3061716, "upload_time": "2019-02-26T01:10:35", "upload_time_iso_8601": "2019-02-26T01:10:35.171561Z", "url": "https://files.pythonhosted.org/packages/ad/89/f1484fc5df2712d50c59582d3009d563cc57b238503bf894b31a46d0a574/zstandard-0.11.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c68ce0a5a4180f53eaa1f950394e865", "sha256": "9ecc377883120ee41a21e241843f6deb254a0346f68c12a7f6ffb65bad84abe8"}, "downloads": -1, "filename": "zstandard-0.11.0-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "5c68ce0a5a4180f53eaa1f950394e865", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 454999, "upload_time": "2019-02-26T01:10:37", "upload_time_iso_8601": "2019-02-26T01:10:37.340572Z", "url": "https://files.pythonhosted.org/packages/18/12/b0092f75315e621b2aef43d2dc36decaa0d86b56ca60f9852108f549d4ed/zstandard-0.11.0-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "136d7a70051d7c877c906bb6f59d8f27", "sha256": "98629393a65c42cd89319919029cb96f357920e7d5d510ad156038435ab2d471"}, "downloads": -1, "filename": "zstandard-0.11.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "136d7a70051d7c877c906bb6f59d8f27", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 528819, "upload_time": "2019-02-26T01:10:39", "upload_time_iso_8601": "2019-02-26T01:10:39.401882Z", "url": "https://files.pythonhosted.org/packages/20/24/1e6c96c08e39dde46a5c86386fa52e3e4d5ebc29ecde4429b25c31d13315/zstandard-0.11.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac1c2d273c02ccec57aed6559e7b4389", "sha256": "58f2e102f4d8b82415aa8db4a18ee3f440c28b7741f1c95951236a08ec1a7d7f"}, "downloads": -1, "filename": "zstandard-0.11.0.tar.gz", "has_sig": false, "md5_digest": "ac1c2d273c02ccec57aed6559e7b4389", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 641440, "upload_time": "2019-02-26T01:10:41", "upload_time_iso_8601": "2019-02-26T01:10:41.407030Z", "url": "https://files.pythonhosted.org/packages/a2/26/0764c755f0d929ad55b35eeb98a350556f838bfd33ac8945ec7f5848b28b/zstandard-0.11.0.tar.gz", "yanked": false}], "0.11.1": [{"comment_text": "", "digests": {"md5": "6f27ef188140156f7c50b446b70818d3", "sha256": "d8f047d3647a5cd1b77b4580f35208c938da00c101a092571c85bcefaa2d725d"}, "downloads": -1, "filename": "zstandard-0.11.1-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "6f27ef188140156f7c50b446b70818d3", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 632522, "upload_time": "2019-05-15T06:11:47", "upload_time_iso_8601": "2019-05-15T06:11:47.905146Z", "url": "https://files.pythonhosted.org/packages/0a/5d/89ddddea919fc1221df8e61abcfeb6d50b10625c41ad03a1f3f0c41abfe8/zstandard-0.11.1-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6df77c77c708b777395a48e5b1a2729", "sha256": "51aad01a5709ca6f45768c69ffd4c887528e5ad9e09302426b735560752c4e82"}, "downloads": -1, "filename": "zstandard-0.11.1-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "a6df77c77c708b777395a48e5b1a2729", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2859147, "upload_time": "2019-05-15T06:11:51", "upload_time_iso_8601": "2019-05-15T06:11:51.138915Z", "url": "https://files.pythonhosted.org/packages/9e/45/6aae21501d27b8dbbf0f6e8e46aa172f8044026992b7fbc84ebd5d678dc8/zstandard-0.11.1-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7eca9e3684ac23a659d58c66482530b", "sha256": "6cd81819a02e57e38e27c53c5c0a7015e059b0e148a18bf27b46b4f808840879"}, "downloads": -1, "filename": "zstandard-0.11.1-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a7eca9e3684ac23a659d58c66482530b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3057838, "upload_time": "2019-05-15T06:11:54", "upload_time_iso_8601": "2019-05-15T06:11:54.546876Z", "url": "https://files.pythonhosted.org/packages/ff/02/36075d28cdfd550f99a9c8a1ec9c1c84d03795bb56b5dc43d44fe68da3b8/zstandard-0.11.1-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b64e30a341b0e1a065e617d916f1d2b", "sha256": "1a1db0c9774181e806a418c32d511aa085c7e2c28c257a58f6c107f5decb3109"}, "downloads": -1, "filename": "zstandard-0.11.1-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "9b64e30a341b0e1a065e617d916f1d2b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2852542, "upload_time": "2019-05-15T06:11:57", "upload_time_iso_8601": "2019-05-15T06:11:57.672584Z", "url": "https://files.pythonhosted.org/packages/f7/2b/76f95ed0add58b03536987f6312496c5251a40758bca2a6dcdaef473b6b3/zstandard-0.11.1-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c044663236d3550aa4d5e1d892cf9df", "sha256": "22d7aa898f36f78108cc1ef0c8da8225f0add518441d815ad4fdd1d577378209"}, "downloads": -1, "filename": "zstandard-0.11.1-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7c044663236d3550aa4d5e1d892cf9df", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3060368, "upload_time": "2019-05-15T06:12:01", "upload_time_iso_8601": "2019-05-15T06:12:01.353282Z", "url": "https://files.pythonhosted.org/packages/49/1d/5023ddc2d40dc02eeb2846ff73b9ac5c0a7df860cc35f75dcf3546139a95/zstandard-0.11.1-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4d1db54ebae20e5d63c132ab2b5091a", "sha256": "978a500ae1184f602dc902977ec208c7cf02c10caae9c159b10976a7cb29f879"}, "downloads": -1, "filename": "zstandard-0.11.1-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "b4d1db54ebae20e5d63c132ab2b5091a", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 430836, "upload_time": "2019-05-15T06:12:04", "upload_time_iso_8601": "2019-05-15T06:12:04.504046Z", "url": "https://files.pythonhosted.org/packages/e4/77/9d27c22cf487edc4b6bef3e818b49346772be70e5e24fca736e84fce3dc5/zstandard-0.11.1-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e68d923471dac7eaf27a35f8256ec4c", "sha256": "7fa9deba4c904e76870e08324adff94ec3a4bc56a50bbe1a9f859a4aed11c0d2"}, "downloads": -1, "filename": "zstandard-0.11.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "3e68d923471dac7eaf27a35f8256ec4c", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 518190, "upload_time": "2019-05-15T06:12:07", "upload_time_iso_8601": "2019-05-15T06:12:07.492417Z", "url": "https://files.pythonhosted.org/packages/3b/9a/078997943f64375fd741c77db4185d1b8d1671ee1d8498a7a999bf8c31db/zstandard-0.11.1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72a874a68219cb32245743468760f767", "sha256": "88912cbcf68cc40037c113460a166ebfbbb24864ceebb89ad221ea346f22e995"}, "downloads": -1, "filename": "zstandard-0.11.1-cp34-cp34m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "72a874a68219cb32245743468760f767", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 634179, "upload_time": "2019-05-15T06:12:10", "upload_time_iso_8601": "2019-05-15T06:12:10.495546Z", "url": "https://files.pythonhosted.org/packages/2c/1e/b5c5c609f6489bb6bd40609e329ba3e5fad089487c7a9fd594e76d554add/zstandard-0.11.1-cp34-cp34m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b82806f4a68dcbad679876cde445c35", "sha256": "b7abae5b17e82d5f78aaa641077b4619c6ad204e30c6f3445d422acff5f35d3e"}, "downloads": -1, "filename": "zstandard-0.11.1-cp34-cp34m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "0b82806f4a68dcbad679876cde445c35", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2885471, "upload_time": "2019-05-15T06:12:14", "upload_time_iso_8601": "2019-05-15T06:12:14.196864Z", "url": "https://files.pythonhosted.org/packages/05/38/4f584972adee144a939669e4c819134fb0c8078c1a3c5b215b81e33406cc/zstandard-0.11.1-cp34-cp34m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d01ede016c762f9696243ace15f64319", "sha256": "71c8711458212c973a9b719275db8111f22803e0caf675affde50703b96e9be1"}, "downloads": -1, "filename": "zstandard-0.11.1-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d01ede016c762f9696243ace15f64319", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 3055062, "upload_time": "2019-05-15T06:12:18", "upload_time_iso_8601": "2019-05-15T06:12:18.049280Z", "url": "https://files.pythonhosted.org/packages/c8/05/8e2828029e1d7beaefb5e92e14de31c49a1bf1d6915ef3f382fb04864e3f/zstandard-0.11.1-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edb20c14a23e8fff4e6c8b91f28a3e1a", "sha256": "951e382a2ea47179ecb3e314e8c70f2e5189e3652ccbbcb71c6443dd71bc20fc"}, "downloads": -1, "filename": "zstandard-0.11.1-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "edb20c14a23e8fff4e6c8b91f28a3e1a", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 435628, "upload_time": "2019-05-15T06:12:20", "upload_time_iso_8601": "2019-05-15T06:12:20.990331Z", "url": "https://files.pythonhosted.org/packages/be/fa/baba8cfa68b055c8175132691d132157bf36e408d6f795b038efbab451f9/zstandard-0.11.1-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcad1d55219c51a41f28fb00debc8aba", "sha256": "19f5ad81590acd20dbdfb930b87a035189778662fdc67ab8cbcc106269ed1be8"}, "downloads": -1, "filename": "zstandard-0.11.1-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "dcad1d55219c51a41f28fb00debc8aba", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 513782, "upload_time": "2019-05-15T06:12:24", "upload_time_iso_8601": "2019-05-15T06:12:24.009565Z", "url": "https://files.pythonhosted.org/packages/55/0d/7199e39caf8a759ffc8d1507135214982f20a783096172615823703136ce/zstandard-0.11.1-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57872b771f747bc858b2714d9a376753", "sha256": "fcf70e1e9d38035a15482e954ba064f3b701cf84cfe571576d15af93ac2a2fb1"}, "downloads": -1, "filename": "zstandard-0.11.1-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "57872b771f747bc858b2714d9a376753", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 632483, "upload_time": "2019-05-15T06:12:26", "upload_time_iso_8601": "2019-05-15T06:12:26.798783Z", "url": "https://files.pythonhosted.org/packages/2a/3b/bcce460dfe3dd982e30afe41fe2344968825aa794d31823237f73b18c877/zstandard-0.11.1-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d6efd50a9519dc0549269cba0d9d430", "sha256": "42fa4462e0563fe17e73dfeb95eef9b00429b86282f8f6ca0e2765b1855a8324"}, "downloads": -1, "filename": "zstandard-0.11.1-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "8d6efd50a9519dc0549269cba0d9d430", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2890371, "upload_time": "2019-05-15T06:12:29", "upload_time_iso_8601": "2019-05-15T06:12:29.914351Z", "url": "https://files.pythonhosted.org/packages/eb/37/43452604fb166bf471ab092129cd83a07aa5cc49b4836a7ed15d08d5d2f7/zstandard-0.11.1-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5b636d099d41e91d02ad6011e419539", "sha256": "7f3db21223a8bb4ffcf6c36b9c20d38278967723b47fce249dcb6ec6d4082b83"}, "downloads": -1, "filename": "zstandard-0.11.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d5b636d099d41e91d02ad6011e419539", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3051666, "upload_time": "2019-05-15T06:12:33", "upload_time_iso_8601": "2019-05-15T06:12:33.771509Z", "url": "https://files.pythonhosted.org/packages/86/25/e9f70c082a3525fd3e1578e0feb2333f33f088be45bb4a99239b20b3bda5/zstandard-0.11.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a717c0653918ee7ea2e9a8b9745be877", "sha256": "9ca84187182743d2e6bbf9d3f79d3834db205cddc98add27ad20f2189d080a60"}, "downloads": -1, "filename": "zstandard-0.11.1-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "a717c0653918ee7ea2e9a8b9745be877", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 450894, "upload_time": "2019-05-15T06:12:36", "upload_time_iso_8601": "2019-05-15T06:12:36.894805Z", "url": "https://files.pythonhosted.org/packages/99/3c/d319c1f2fc298f122c8c023ed04bf9511813e689d39bd24bf70e34d49657/zstandard-0.11.1-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd9a17c5d1f2739a886bafbc92bd0dbe", "sha256": "f1785b31bf428e964a9670dd4f721023f2741ef7fd67c663bf01e3d4d3f9ec2a"}, "downloads": -1, "filename": "zstandard-0.11.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "bd9a17c5d1f2739a886bafbc92bd0dbe", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 520782, "upload_time": "2019-05-15T06:12:39", "upload_time_iso_8601": "2019-05-15T06:12:39.831487Z", "url": "https://files.pythonhosted.org/packages/04/1d/38c8a6fbc76174eec6040bc14ac5c5fbc9cda7cbb4aaf4ad64dbbca367e7/zstandard-0.11.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62870cfb758c307c8c144a88d1f99aca", "sha256": "991c4a40171d87854b219cdf2ba56c1c34b3b3a8ebe5d1ab63bd357ff71271b2"}, "downloads": -1, "filename": "zstandard-0.11.1-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "62870cfb758c307c8c144a88d1f99aca", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 633655, "upload_time": "2019-05-15T06:12:42", "upload_time_iso_8601": "2019-05-15T06:12:42.412342Z", "url": "https://files.pythonhosted.org/packages/56/bc/cd660b9e3afca86bacc6523c8a5b664591cdc54069a29f41816ec2146d1d/zstandard-0.11.1-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a37b90e8bddd1f434037de20c12197ff", "sha256": "94aa5bb817f1c747b21214f6ef83a022bcb63bf81e4dae2954768165c13a510b"}, "downloads": -1, "filename": "zstandard-0.11.1-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "a37b90e8bddd1f434037de20c12197ff", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2884909, "upload_time": "2019-05-15T06:12:45", "upload_time_iso_8601": "2019-05-15T06:12:45.454238Z", "url": "https://files.pythonhosted.org/packages/af/5b/a237dc06e7f72434d07381ecf3842afaa289977648ceaec8d0cde4fdfc45/zstandard-0.11.1-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40e67b1bb82a5df7050fedc8ef8bdbb3", "sha256": "7c92dfcdf7e0c540f9718b40b4c54516a968ef6b81567b75df81866a1af2189d"}, "downloads": -1, "filename": "zstandard-0.11.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "40e67b1bb82a5df7050fedc8ef8bdbb3", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3054548, "upload_time": "2019-05-15T06:12:48", "upload_time_iso_8601": "2019-05-15T06:12:48.786783Z", "url": "https://files.pythonhosted.org/packages/1d/0e/09c2939341463e17d727b3050ecc70e2fc4f404de12ea4643b4c40804923/zstandard-0.11.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "451b2ade7ee1376c2f105b6192b3606f", "sha256": "3f76562ec63fabc6f4b5be0cd986f911c97105c35c31b4d655b90c4d2fe07f40"}, "downloads": -1, "filename": "zstandard-0.11.1-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "451b2ade7ee1376c2f105b6192b3606f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 450871, "upload_time": "2019-05-15T06:12:51", "upload_time_iso_8601": "2019-05-15T06:12:51.334599Z", "url": "https://files.pythonhosted.org/packages/7e/7f/737267d1ce99a08ffcea5c35fb82eb858ab1b56466bed025916c844eba17/zstandard-0.11.1-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "489611895197b6ebaa901158d9278377", "sha256": "717fd2494f222164396e03d08ef57174d2a889920b81ca49f276caf9381e6405"}, "downloads": -1, "filename": "zstandard-0.11.1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "489611895197b6ebaa901158d9278377", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 519561, "upload_time": "2019-05-15T06:12:53", "upload_time_iso_8601": "2019-05-15T06:12:53.710044Z", "url": "https://files.pythonhosted.org/packages/e1/63/8f75c626d36dca7c79c99966f634ad8bac9329f1f86f9e1f7964de9ce8a9/zstandard-0.11.1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c87d16a833bf384334aa5b22ce2ec88a", "sha256": "b8fce0c961654f77c81a6ae1f2cd40633b41ef16a12ae02f0382ed6692f9bb90"}, "downloads": -1, "filename": "zstandard-0.11.1-cp37-cp37m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "c87d16a833bf384334aa5b22ce2ec88a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 632737, "upload_time": "2019-05-15T06:12:56", "upload_time_iso_8601": "2019-05-15T06:12:56.035131Z", "url": "https://files.pythonhosted.org/packages/33/5f/f01995dd1946f89fcc4a56bddd980fdab21c333afb99bb052cef7221a02e/zstandard-0.11.1-cp37-cp37m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "348f6be1585f3c1ae67f749aca27e82d", "sha256": "ae50bc839cf1ff549f55a3e55922563f246fb692f77497175a8d8d4cddc294da"}, "downloads": -1, "filename": "zstandard-0.11.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "348f6be1585f3c1ae67f749aca27e82d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3058427, "upload_time": "2019-05-15T06:12:59", "upload_time_iso_8601": "2019-05-15T06:12:59.271794Z", "url": "https://files.pythonhosted.org/packages/fa/bd/3453ea57a997efa755995b4396ded91de33884a9c1f7ee7f513a767841d1/zstandard-0.11.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7d0900b0ad6c9330e01696a3f517dcd", "sha256": "76a331b5a6258fce3906551557db9be83bdd89a62f66f509a55a4a307239c782"}, "downloads": -1, "filename": "zstandard-0.11.1-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "a7d0900b0ad6c9330e01696a3f517dcd", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 456679, "upload_time": "2019-05-15T06:13:02", "upload_time_iso_8601": "2019-05-15T06:13:02.090359Z", "url": "https://files.pythonhosted.org/packages/43/85/3a5b23098f49819d2e18cd39fad0e86f0ffdcb569a3a925824c78db52f36/zstandard-0.11.1-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04fce59ecd058727df7a50805af05864", "sha256": "357873afdd7cd0e653d169c36ce837ce2b3e5926dd4a5c0f0476c813f6765373"}, "downloads": -1, "filename": "zstandard-0.11.1-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "04fce59ecd058727df7a50805af05864", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 528228, "upload_time": "2019-05-15T06:13:04", "upload_time_iso_8601": "2019-05-15T06:13:04.808998Z", "url": "https://files.pythonhosted.org/packages/ff/30/006c42d78d3f63013e3dc6491cf2b4c2ae91097cef6c7f34a0ee6df55d3e/zstandard-0.11.1-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76591c0f7675d39e99e05dc1b58bf1a8", "sha256": "3c31da5d78a7b07e722e8a3e0b1295bc9b316b7e90a1666659c451a42750ffe4"}, "downloads": -1, "filename": "zstandard-0.11.1.tar.gz", "has_sig": false, "md5_digest": "76591c0f7675d39e99e05dc1b58bf1a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 641453, "upload_time": "2019-05-15T06:13:07", "upload_time_iso_8601": "2019-05-15T06:13:07.433477Z", "url": "https://files.pythonhosted.org/packages/bd/6e/1dc9995c216c7c520b522b4949c78f0c71eb2594cee0de46cda62c476829/zstandard-0.11.1.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "796fe751884ea8a6b43ec583df763305", "sha256": "e9c29b4e5be066369787a6a83fb284c40d0fd2c2b5d64485e126cf55b37dc2c4"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "796fe751884ea8a6b43ec583df763305", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 836691, "upload_time": "2019-09-16T01:59:52", "upload_time_iso_8601": "2019-09-16T01:59:52.143089Z", "url": "https://files.pythonhosted.org/packages/21/d6/b1b4fa644f1a3e0e12de1f805884e2a053330b1f85b9f90a0561733eabc9/zstandard-0.12.0-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26a5eebac85fa120172050caa6fa118c", "sha256": "145cc0535134256b44f5ea950aa950553b0174c50be612c9ab78afe883bf273c"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "26a5eebac85fa120172050caa6fa118c", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2992010, "upload_time": "2019-09-16T01:59:55", "upload_time_iso_8601": "2019-09-16T01:59:55.571769Z", "url": "https://files.pythonhosted.org/packages/a1/42/84d5d02e23afe14d48e55cc3484745ce575536ffc291a2a7b051163ff41c/zstandard-0.12.0-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4354985f2f4a034f2e05304c73568bcf", "sha256": "d3b7d1e120e887238c3a1e870c8e2a677138069ab27bd1687f3f63ef69c64d8b"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4354985f2f4a034f2e05304c73568bcf", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3826529, "upload_time": "2019-09-16T01:59:59", "upload_time_iso_8601": "2019-09-16T01:59:59.485561Z", "url": "https://files.pythonhosted.org/packages/07/fe/68df8f5cafb3ac7d257fddba6388d107f52531356542b75002bb37ea9e7c/zstandard-0.12.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f5bb584b0910cf2d016373d155350ee", "sha256": "a4d0e57d75bcfcfb82fbffe1e42e0a4c45ae99b6c768cbfc93d453b9bfd3b8b3"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "1f5bb584b0910cf2d016373d155350ee", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3826532, "upload_time": "2019-09-16T02:00:03", "upload_time_iso_8601": "2019-09-16T02:00:03.226267Z", "url": "https://files.pythonhosted.org/packages/e0/0c/32d8695e3faa336a3a976ab21be1f15a366ccea7b80fd8c5f19a555bf6b3/zstandard-0.12.0-cp27-cp27m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c92c2d9ffbcdb1ba96229a2bf84343b", "sha256": "53f2f5db6f8eaade35987a0073ed1fdf3d0cd3fb681c817afe098bb04b9237e5"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "3c92c2d9ffbcdb1ba96229a2bf84343b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2990216, "upload_time": "2019-09-16T02:00:06", "upload_time_iso_8601": "2019-09-16T02:00:06.668767Z", "url": "https://files.pythonhosted.org/packages/06/b8/33e9a9f1f0063fbd6a01b9aa021db247e9dedba4ebfd4d1944a19516e443/zstandard-0.12.0-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1410e06aee3ff59f19334eb1862d8c33", "sha256": "01e2432c8b484427f1db956c300a339523b6fdd95e78d7e0c4c3f622a31e43b0"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "1410e06aee3ff59f19334eb1862d8c33", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3826425, "upload_time": "2019-09-16T02:00:10", "upload_time_iso_8601": "2019-09-16T02:00:10.017372Z", "url": "https://files.pythonhosted.org/packages/df/0f/52b914378c122c73c22858dc7c7ba63008f5b3d3c801b4fb3b6959c9ba21/zstandard-0.12.0-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b5f0c797eac03481506ac598e802051", "sha256": "e2f4af9b049fb34b7ff5eadaa2e1745ca87715aa8f650ff26fffd12a04f81953"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27mu-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "0b5f0c797eac03481506ac598e802051", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3826427, "upload_time": "2019-09-16T02:00:13", "upload_time_iso_8601": "2019-09-16T02:00:13.505985Z", "url": "https://files.pythonhosted.org/packages/1c/81/a36741155f6b5a9b8ff6f27eb7781b4f5bac0aac1bbc886a03f3642077a3/zstandard-0.12.0-cp27-cp27mu-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "767b249ad1830b0b3a4800d73bcadacc", "sha256": "0ccb83c23929654aa8a756b3295e694b804507e5d174fd8b970ef07a4c4b4b05"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "767b249ad1830b0b3a4800d73bcadacc", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 438894, "upload_time": "2019-09-16T02:00:16", "upload_time_iso_8601": "2019-09-16T02:00:16.241289Z", "url": "https://files.pythonhosted.org/packages/f8/3f/e629ec01b6e0b6dba2e099419a787fa9beb625a43f138d147fa508ff21ba/zstandard-0.12.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a24dc9a2db731d1cfff79f5bbce27e5d", "sha256": "24e8c92dbf30c937442d6939030a1899f8179e8f9d825aee7259f7b4d7033346"}, "downloads": -1, "filename": "zstandard-0.12.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "a24dc9a2db731d1cfff79f5bbce27e5d", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 526287, "upload_time": "2019-09-16T02:00:18", "upload_time_iso_8601": "2019-09-16T02:00:18.903877Z", "url": "https://files.pythonhosted.org/packages/d2/b6/69125a833b982e6e40bf1c8f9927b1a9caff4fe2cf601af22214bb148693/zstandard-0.12.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d42b96fedc09864c4815b5b2cfd4f0ea", "sha256": "8e871b23a8817da91e20ce8201baff1779013520baadde4f492029e5150938d0"}, "downloads": -1, "filename": "zstandard-0.12.0-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "d42b96fedc09864c4815b5b2cfd4f0ea", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 837025, "upload_time": "2019-09-16T02:00:21", "upload_time_iso_8601": "2019-09-16T02:00:21.349837Z", "url": "https://files.pythonhosted.org/packages/0f/f9/6bd5831f85afa93444ddc6d0bafbb6974e4bde1daa1a09f9d11f66b3664e/zstandard-0.12.0-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fdbe6d052bc169cc6c079e9c6ae9e4dd", "sha256": "44a687c75afdac8100124db84ae79dfaeb07f573dcd6108a632ba2a1439097bc"}, "downloads": -1, "filename": "zstandard-0.12.0-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "fdbe6d052bc169cc6c079e9c6ae9e4dd", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2992603, "upload_time": "2019-09-16T02:00:24", "upload_time_iso_8601": "2019-09-16T02:00:24.802008Z", "url": "https://files.pythonhosted.org/packages/1c/b1/fd019b95b0f69d32d2f5d6f65545aba241b6a678a203d12a42f85352229b/zstandard-0.12.0-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1170b6ce2ed0e818f042720806b586a9", "sha256": "93b1ac7e179aa5b042537bb59e9fb8064298bb75fb5afee65bcdd76ff0791e76"}, "downloads": -1, "filename": "zstandard-0.12.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "1170b6ce2ed0e818f042720806b586a9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3850043, "upload_time": "2019-09-16T02:00:28", "upload_time_iso_8601": "2019-09-16T02:00:28.291019Z", "url": "https://files.pythonhosted.org/packages/b5/c6/58d85c1d6dc54114cfaedddf8696651582a76669f7a419c952350361836d/zstandard-0.12.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0faab862fdb667fcff17dde8a6d10141", "sha256": "c199322068e4420410af526a2df3852efc03c5c43c5130c1e0b32cd0f6b394b8"}, "downloads": -1, "filename": "zstandard-0.12.0-cp35-cp35m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "0faab862fdb667fcff17dde8a6d10141", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3850047, "upload_time": "2019-09-16T02:00:32", "upload_time_iso_8601": "2019-09-16T02:00:32.406781Z", "url": "https://files.pythonhosted.org/packages/8c/16/c5f11fefe37267ecb4a581f94ac52759baf5911c2a005075e41f3a57ec57/zstandard-0.12.0-cp35-cp35m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0dcb48f0f25f1d023368724cca05faa9", "sha256": "dbd484d49eb0b668632d64e4f431c4ba633582015d63a49323494061f2864246"}, "downloads": -1, "filename": "zstandard-0.12.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "0dcb48f0f25f1d023368724cca05faa9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 459452, "upload_time": "2019-09-16T02:00:35", "upload_time_iso_8601": "2019-09-16T02:00:35.414781Z", "url": "https://files.pythonhosted.org/packages/1f/22/8b20be356416916711a984d0cf7e8a4c811cdad34b0d18d99dfab2c05e0f/zstandard-0.12.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9150ceae74e1e6be37aec49a44aff19c", "sha256": "4cbd7587662d7da3d9dab759f0d44204bfb3b919b43a1ddcda94158919b050f6"}, "downloads": -1, "filename": "zstandard-0.12.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "9150ceae74e1e6be37aec49a44aff19c", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 532273, "upload_time": "2019-09-16T02:00:38", "upload_time_iso_8601": "2019-09-16T02:00:38.837553Z", "url": "https://files.pythonhosted.org/packages/a2/40/8b5da09146f1cce653c5c5a932a0da387229b0ecf0cfe7aaf71d272fb06b/zstandard-0.12.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a8ea68e4e3b50fd4e1217fc771821a2", "sha256": "e792b5595ef01347064462de6af3be53100432a3861c0f94ee1f49e12ff44694"}, "downloads": -1, "filename": "zstandard-0.12.0-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "6a8ea68e4e3b50fd4e1217fc771821a2", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 837861, "upload_time": "2019-09-16T02:00:41", "upload_time_iso_8601": "2019-09-16T02:00:41.415116Z", "url": "https://files.pythonhosted.org/packages/23/91/d82ab02230a472273f4046e65282ec2dc8c5834d04d031b00355289b2046/zstandard-0.12.0-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c626a053fa5007bc792facb33c37134", "sha256": "2140c24370dc1c8e822e96849d0fc51a27983240773066ce74d1c679835efe2a"}, "downloads": -1, "filename": "zstandard-0.12.0-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "1c626a053fa5007bc792facb33c37134", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2989487, "upload_time": "2019-09-16T02:00:45", "upload_time_iso_8601": "2019-09-16T02:00:45.166852Z", "url": "https://files.pythonhosted.org/packages/15/da/1565e99ecae8a3263474fab188f58a05e2e06f2e9c3950fbce337f35c037/zstandard-0.12.0-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7395fb304cd80020b7b51d74bdba2475", "sha256": "7b2c16b983e1dfdad3699140e27622488894428d01942cfc59ddbf1c74d667c4"}, "downloads": -1, "filename": "zstandard-0.12.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7395fb304cd80020b7b51d74bdba2475", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3861949, "upload_time": "2019-09-16T02:00:48", "upload_time_iso_8601": "2019-09-16T02:00:48.389117Z", "url": "https://files.pythonhosted.org/packages/d7/61/22feb3c281fab4d9fad8c3ae4c1731aaab973ea68a09abee2dc38b95d0a4/zstandard-0.12.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ce1accbf449385fa6ee80260c272605", "sha256": "d50dd71d1556bf1016aa49b256538c0779c913a25bc5733f0be58d8f3d4656c2"}, "downloads": -1, "filename": "zstandard-0.12.0-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "0ce1accbf449385fa6ee80260c272605", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3861954, "upload_time": "2019-09-16T02:00:51", "upload_time_iso_8601": "2019-09-16T02:00:51.878415Z", "url": "https://files.pythonhosted.org/packages/ef/ae/d0b3e52bba9ea2654dd117684a1c8f2b1ac3c0b2deabf26547e8a044cfcc/zstandard-0.12.0-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bd400c79c0a4e74bcfa497c9d3f8cd7", "sha256": "7b55e82e82f50f56f501438f446f1dc3d1beb9294a36893a9fd2d00122042f9d"}, "downloads": -1, "filename": "zstandard-0.12.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "4bd400c79c0a4e74bcfa497c9d3f8cd7", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 450891, "upload_time": "2019-09-16T02:00:55", "upload_time_iso_8601": "2019-09-16T02:00:55.036013Z", "url": "https://files.pythonhosted.org/packages/e1/7b/456d23be2eb3a626b1b847d55ae1214a0b6ff5dbc67b3ed73271a986f6fb/zstandard-0.12.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df1293f4004efa7fe4d71c6bf2e301fe", "sha256": "3ac31bba9ad782d2fff4acb293754dc4cf6fdb77ff9a3c0e85de978b8556a571"}, "downloads": -1, "filename": "zstandard-0.12.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "df1293f4004efa7fe4d71c6bf2e301fe", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 531527, "upload_time": "2019-09-16T02:00:58", "upload_time_iso_8601": "2019-09-16T02:00:58.964147Z", "url": "https://files.pythonhosted.org/packages/30/c6/87f0d0aa52127f82980b3201e9dfeab07eb46836146d7a1031863cca3604/zstandard-0.12.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b06dec6c7c9b172f12bf35a0f6da652d", "sha256": "dbfa25fc93f2e9e0c7d384d4cee0bbf962dc4a197cb893d4e6114016e4e89a5a"}, "downloads": -1, "filename": "zstandard-0.12.0-cp37-cp37m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "b06dec6c7c9b172f12bf35a0f6da652d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 839315, "upload_time": "2019-09-16T02:01:01", "upload_time_iso_8601": "2019-09-16T02:01:01.651305Z", "url": "https://files.pythonhosted.org/packages/49/ef/6cebe18e59016014334b8315c27bb638e525ea46a525dfd203c46cd5bf07/zstandard-0.12.0-cp37-cp37m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b00a7cfeaca52f2eb179fe614b14f6ca", "sha256": "81c61ef31803807ed6925d7610cbc1701e0db6c0520195d031fa0fc0af8f3eff"}, "downloads": -1, "filename": "zstandard-0.12.0-cp37-cp37m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "b00a7cfeaca52f2eb179fe614b14f6ca", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3005097, "upload_time": "2019-09-16T02:01:04", "upload_time_iso_8601": "2019-09-16T02:01:04.609896Z", "url": "https://files.pythonhosted.org/packages/bd/29/78e7e33c723ee3109f9e8bdd562353e754cffa8c4212d28f58c73b6e29e6/zstandard-0.12.0-cp37-cp37m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f5492f96e1074e7f3e6fbf02c39483b", "sha256": "5e43d91eb372a9282a6a2bc9f9acf815b90f3f5c472347ae5c1e14d41f819827"}, "downloads": -1, "filename": "zstandard-0.12.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "2f5492f96e1074e7f3e6fbf02c39483b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3857400, "upload_time": "2019-09-16T02:01:07", "upload_time_iso_8601": "2019-09-16T02:01:07.933900Z", "url": "https://files.pythonhosted.org/packages/96/8f/6896aa52bcdcc47dfb491c44276cb1fe878b30ef5748c2ed768d38c59b2c/zstandard-0.12.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c4b37c30f737be9c564c537c11c7dfc", "sha256": "e8836b3be6af01d13bf6f88ce16208acd63971c6fcfc68ad438598a531cd39b2"}, "downloads": -1, "filename": "zstandard-0.12.0-cp37-cp37m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "3c4b37c30f737be9c564c537c11c7dfc", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3857404, "upload_time": "2019-09-16T02:01:11", "upload_time_iso_8601": "2019-09-16T02:01:11.739952Z", "url": "https://files.pythonhosted.org/packages/61/12/57d1b447a3c82e2f5af802e991da90802d1e475ab59981cbfd93e673f873/zstandard-0.12.0-cp37-cp37m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3f8de94375c63b23acd1754305d8550", "sha256": "14d8984ef5ac93fb7632583d95b319c9d7b260330b34dcfd6a94bc13afa031b4"}, "downloads": -1, "filename": "zstandard-0.12.0-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "c3f8de94375c63b23acd1754305d8550", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 453489, "upload_time": "2019-09-16T02:01:15", "upload_time_iso_8601": "2019-09-16T02:01:15.009684Z", "url": "https://files.pythonhosted.org/packages/37/45/5d0ef90c04fe34c6eaa3ae8e5eb367a69c3f03e6a585648f6894487a5260/zstandard-0.12.0-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d202e7e7e09a4d61b934f3b5d5bc7a7d", "sha256": "43d23ed28e7998d81e55b6e3f1dbf6191ba90624e2838289e7aa94849d720cb6"}, "downloads": -1, "filename": "zstandard-0.12.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "d202e7e7e09a4d61b934f3b5d5bc7a7d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 531104, "upload_time": "2019-09-16T02:01:17", "upload_time_iso_8601": "2019-09-16T02:01:17.817155Z", "url": "https://files.pythonhosted.org/packages/36/f3/03ed7f9a6dcc5200a6f5827f4ff87f476f3e97134a9bda5ec639cb31df54/zstandard-0.12.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59029a2c012da607868c9f085dd47513", "sha256": "a110fb3ad1db344fbb563942d314ec5f0f3bdfd6753ec6331dded03ad6c2affb"}, "downloads": -1, "filename": "zstandard-0.12.0.tar.gz", "has_sig": false, "md5_digest": "59029a2c012da607868c9f085dd47513", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 648827, "upload_time": "2019-09-16T02:01:21", "upload_time_iso_8601": "2019-09-16T02:01:21.018947Z", "url": "https://files.pythonhosted.org/packages/71/bb/dbd6b2f27b94574b51e6055abd753b1f4b211933d478329e37eaae76f721/zstandard-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "99dec7daa30de94cb1d8078974383d7f", "sha256": "c344c96679aa2d60be01d518b0132d1ea67aee511a9e0170cff6a8a8ba1032db"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "99dec7daa30de94cb1d8078974383d7f", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 879342, "upload_time": "2019-12-28T18:09:48", "upload_time_iso_8601": "2019-12-28T18:09:48.707082Z", "url": "https://files.pythonhosted.org/packages/05/96/fe2c125a66525ef2210a686b5b3b514d53b59cdef9b3279db49688aebb94/zstandard-0.13.0-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78cd6cbdf27b7e4c727a99ee76888781", "sha256": "b2c9717906a84dbd907fe648ede2add4c6d3eb73e1dff9fdd3046b8645a2679a"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "78cd6cbdf27b7e4c727a99ee76888781", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2943437, "upload_time": "2019-12-28T18:09:52", "upload_time_iso_8601": "2019-12-28T18:09:52.264849Z", "url": "https://files.pythonhosted.org/packages/50/8f/4e5afaf3b47e4fff96e66af8f2d6f3412db0eeb5babdbe79e435e5548dcc/zstandard-0.13.0-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d91e2467c1dcafea0b87548b11f4e298", "sha256": "5f303002cbf57e8ad1f18e5c23741d1ad5aa09ac2247c430a5843b93936e101f"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d91e2467c1dcafea0b87548b11f4e298", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3984004, "upload_time": "2019-12-28T18:09:55", "upload_time_iso_8601": "2019-12-28T18:09:55.966789Z", "url": "https://files.pythonhosted.org/packages/d0/a5/8bfcabe531653f7c62271650eb5d06d0f5c74637b4b9c9d42e0ca444351c/zstandard-0.13.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "307bd1b68ac520fb9045bfbe875f6009", "sha256": "2a530a0aa03e979349a821f1cfa93e6ad006a02ac25e2f55ed9657a46c8a993a"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "307bd1b68ac520fb9045bfbe875f6009", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2943440, "upload_time": "2019-12-28T18:09:59", "upload_time_iso_8601": "2019-12-28T18:09:59.251030Z", "url": "https://files.pythonhosted.org/packages/59/4d/321c0a45537e50d2e23d1e3dd6a23b76ed46b950855e437023ef539859ce/zstandard-0.13.0-cp27-cp27m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24e33dbb2f9240c6c0484815846c2742", "sha256": "7a6af45c49b374b39434d15e1cf8659733e611ddddf85ca4e018b597309ac0b9"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "24e33dbb2f9240c6c0484815846c2742", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3984008, "upload_time": "2019-12-28T18:10:02", "upload_time_iso_8601": "2019-12-28T18:10:02.372551Z", "url": "https://files.pythonhosted.org/packages/4d/48/1081ab92f89804cd52a20678911b2b6c622eafbc10b0242861a0e37dd9d6/zstandard-0.13.0-cp27-cp27m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4813335971d711a07edd1c94fbf136b6", "sha256": "887861d2b6d926cef887f89f0d3d4d894ad75a12de1f2b41f15e00ac0a629230"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "4813335971d711a07edd1c94fbf136b6", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2946825, "upload_time": "2019-12-28T18:10:05", "upload_time_iso_8601": "2019-12-28T18:10:05.766719Z", "url": "https://files.pythonhosted.org/packages/fe/6d/18fd1225c660742f7695c9df4d32b14e02997fb726677bd510b0b5de548c/zstandard-0.13.0-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6496844530652565a421c5496bbf8bce", "sha256": "7db22006ea2ec0f97db51aeb1384f473cbf4d0f7974eff442d86ef9aa628a1eb"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6496844530652565a421c5496bbf8bce", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3977416, "upload_time": "2019-12-28T18:10:08", "upload_time_iso_8601": "2019-12-28T18:10:08.917445Z", "url": "https://files.pythonhosted.org/packages/09/c3/4bd0999bb45a02311d93a52f8d724fa7347b4f4dc0a44d820bf4a22def4f/zstandard-0.13.0-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff719588dcb8873b95acb12735426768", "sha256": "7af5837883020426e644ca8c3301e5398b46cb63eaaccf7405e574fd54f2c985"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27mu-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "ff719588dcb8873b95acb12735426768", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2946829, "upload_time": "2019-12-28T18:10:12", "upload_time_iso_8601": "2019-12-28T18:10:12.390603Z", "url": "https://files.pythonhosted.org/packages/d1/c5/d0691e898a023c9df25ce12601b6a66b5580ac7a88737a964557eeaba02c/zstandard-0.13.0-cp27-cp27mu-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0103178c9f364cdc3b85af6af93c12b", "sha256": "c4bbd70ab4a19d174596c7a936d87bfd279ad8de0a818aa9f4ec42394b937f11"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27mu-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "e0103178c9f364cdc3b85af6af93c12b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3977418, "upload_time": "2019-12-28T18:10:15", "upload_time_iso_8601": "2019-12-28T18:10:15.808359Z", "url": "https://files.pythonhosted.org/packages/46/1e/de59011032b9bb52e9106ef2f94a0bd7dee8e46512d7cf1af0ad8cd3d576/zstandard-0.13.0-cp27-cp27mu-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b77c9e711587e239a646961f860bea1", "sha256": "0097740f6efef248d05f2d772fc4e75f282be9d599cd2b57f9349ad74c8579a9"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "2b77c9e711587e239a646961f860bea1", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 451788, "upload_time": "2019-12-28T18:10:18", "upload_time_iso_8601": "2019-12-28T18:10:18.805181Z", "url": "https://files.pythonhosted.org/packages/75/6a/8a3abbc5275f9dcd0e4edf94e06445f364e22d70416d9ec59414dacf4464/zstandard-0.13.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa0ee94cb85e6ac0d5f8bff797aa0205", "sha256": "95e340e75891baf60e0c27f6bd3dcf9f2c72193bc04f953aaf7dfa7f76dadbb3"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "aa0ee94cb85e6ac0d5f8bff797aa0205", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 534020, "upload_time": "2019-12-28T18:10:21", "upload_time_iso_8601": "2019-12-28T18:10:21.257234Z", "url": "https://files.pythonhosted.org/packages/fc/8a/47c4deebd09f0cfbc78690ed54ed34285c06eec2845d1823b6de6125c594/zstandard-0.13.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6da4ad297a83158216be5516a8b710d7", "sha256": "51d93f9fe4207424394f34b3793e274e50376c0e602a170fc8ec546213805446"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "6da4ad297a83158216be5516a8b710d7", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 878341, "upload_time": "2019-12-28T18:10:23", "upload_time_iso_8601": "2019-12-28T18:10:23.701156Z", "url": "https://files.pythonhosted.org/packages/5e/99/062eab0e437f065e96a579a00520823ff8f957a51c179db3ce1db4d8dd01/zstandard-0.13.0-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c0dbc5cd4f1f49189891e7c84b844ea", "sha256": "b44afaffcce80248cd9783a827a4510b0c6ebe1fee84e39c4ca0d3893f881865"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "1c0dbc5cd4f1f49189891e7c84b844ea", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3019001, "upload_time": "2019-12-28T18:10:26", "upload_time_iso_8601": "2019-12-28T18:10:26.544763Z", "url": "https://files.pythonhosted.org/packages/60/27/570c54af5acc9ca17d52fe54325055fc4e8d0ba1199bb76b2c679fb99d7b/zstandard-0.13.0-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ec5a59337723c06b745673cb6e661c3", "sha256": "2866e623ae1288d0c1f37477dd6635a3526439a615caac7718ca65ad0a17aedc"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7ec5a59337723c06b745673cb6e661c3", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 4022922, "upload_time": "2019-12-28T18:10:29", "upload_time_iso_8601": "2019-12-28T18:10:29.775150Z", "url": "https://files.pythonhosted.org/packages/5a/b8/c52dd21095b11c5c7633dadc56fda39fc16e8926caac1a037291ecdf13dd/zstandard-0.13.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f208d226fd35084656fac79b4a61fa33", "sha256": "3b08d5091615172804d261cc5629933de7252e479776e8acf42eb9d90d305003"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "f208d226fd35084656fac79b4a61fa33", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2977360, "upload_time": "2019-12-28T18:10:32", "upload_time_iso_8601": "2019-12-28T18:10:32.769067Z", "url": "https://files.pythonhosted.org/packages/d9/5f/f041528eec55555112dcde644daeb54a9732e12e661e4e6ad3433cd37d99/zstandard-0.13.0-cp35-cp35m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7069d1d4f8c8b67d832d2f63e0949ebe", "sha256": "b3b174f91f187563f64f912974a3554af494200dc2076329d638a3e12e333667"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "7069d1d4f8c8b67d832d2f63e0949ebe", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 4022924, "upload_time": "2019-12-28T18:10:36", "upload_time_iso_8601": "2019-12-28T18:10:36.167437Z", "url": "https://files.pythonhosted.org/packages/1b/f5/752ded84ecbeb898f274e1d04ef3f0ffe2a2536e8cd16e0be681e86bea96/zstandard-0.13.0-cp35-cp35m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2725dfacca7859271933418d0145c6d7", "sha256": "c72a839e9df34484212b722534e93f0688264435ae87e7c25dffab699b880c1f"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux2014_i686.whl", "has_sig": false, "md5_digest": "2725dfacca7859271933418d0145c6d7", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3019004, "upload_time": "2019-12-28T18:10:39", "upload_time_iso_8601": "2019-12-28T18:10:39.454350Z", "url": "https://files.pythonhosted.org/packages/5a/ce/87ddb520823ec09366f3389f362d82be92ffd7879aeae049bbfa363ce172/zstandard-0.13.0-cp35-cp35m-manylinux2014_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8312e3166c0df852650885c86b18f97", "sha256": "f4ec6aa8dca1d12fd190d42c7e5e8da860a38a344713d4f1994c4617dec52891"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux2014_x86_64.whl", "has_sig": false, "md5_digest": "b8312e3166c0df852650885c86b18f97", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3515890, "upload_time": "2019-12-28T18:10:42", "upload_time_iso_8601": "2019-12-28T18:10:42.461135Z", "url": "https://files.pythonhosted.org/packages/12/c3/08f95ca188b611ef57c63432b0246e0a3a70141d63a0b03689acad3f5f35/zstandard-0.13.0-cp35-cp35m-manylinux2014_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5704f9f18cd39b7a6c013ef88e8462b7", "sha256": "3ba348e22e9f0053454e6cd178806f6f5aaa2bc9a6a9f14c99107934d8825f97"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "5704f9f18cd39b7a6c013ef88e8462b7", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 461133, "upload_time": "2019-12-28T18:10:45", "upload_time_iso_8601": "2019-12-28T18:10:45.452771Z", "url": "https://files.pythonhosted.org/packages/28/7c/ffd3fe18b2c0136c52185f7dec669375b4ba82c6fbaabcf77c28c426adbc/zstandard-0.13.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "877ad39dafc408cf7f0efbd2a9774421", "sha256": "c5261e2e7e678f95bab398b389009e62cf531a5d06d3ae188cd5c134d9d79823"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "877ad39dafc408cf7f0efbd2a9774421", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 531009, "upload_time": "2019-12-28T18:10:48", "upload_time_iso_8601": "2019-12-28T18:10:48.227717Z", "url": "https://files.pythonhosted.org/packages/14/03/cdb5f9d9a8607ad7a13d35ded20fcf26b910026fe56662abbda9f5d019ff/zstandard-0.13.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d1217449dc34e23a9b3d5085b39ca85", "sha256": "e32f2f8d50209a72522e4e1b5ad350d311a9070bd1ee5ce978c1270e77214b9a"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "9d1217449dc34e23a9b3d5085b39ca85", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 878767, "upload_time": "2019-12-28T18:10:50", "upload_time_iso_8601": "2019-12-28T18:10:50.803035Z", "url": "https://files.pythonhosted.org/packages/19/6e/cf8d5e050419ade654587e8fb093c46935c42151d33f7edde03770f5ad8f/zstandard-0.13.0-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "363e7c5a22537f618cc9a8c0a34c5e05", "sha256": "45f55338d1bc667823c78ae00036e1a4a28f96308abbd4a38c708a6876e58346"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "363e7c5a22537f618cc9a8c0a34c5e05", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3022131, "upload_time": "2019-12-28T18:10:53", "upload_time_iso_8601": "2019-12-28T18:10:53.593800Z", "url": "https://files.pythonhosted.org/packages/8f/ed/cb0cf6a40de9e300b9915e4b434d3d695ea0d89822407e797418b208e118/zstandard-0.13.0-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2308b158e78f4313d240b3550b880224", "sha256": "64c162416941e1c0bd449bf551bf255a0ca73d77c56796c5a2eef2249c489cd8"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "2308b158e78f4313d240b3550b880224", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 4024983, "upload_time": "2019-12-28T18:10:56", "upload_time_iso_8601": "2019-12-28T18:10:56.896251Z", "url": "https://files.pythonhosted.org/packages/85/fc/53a24db76edfe48fe2307b22ef7c53c2267f70cda911bd671ba5ab161834/zstandard-0.13.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "790bd4c1ce89a1962101f97bdb2c5035", "sha256": "f3fae7b31bc04cb09ca182d4c15ebe5caa65cd96b3be573e2d80140237c96780"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "790bd4c1ce89a1962101f97bdb2c5035", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2972654, "upload_time": "2019-12-28T18:11:00", "upload_time_iso_8601": "2019-12-28T18:11:00.051498Z", "url": "https://files.pythonhosted.org/packages/05/2d/4ba2568ef4b03405016807a7536a5300bc57e74c36a039a26c06d5892d9e/zstandard-0.13.0-cp36-cp36m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "486a494e455b12bdceaf0da796825119", "sha256": "984c12896fef610c023184e2185a011cac207530620f9bc7444983492942def3"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "486a494e455b12bdceaf0da796825119", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 4024985, "upload_time": "2019-12-28T18:11:03", "upload_time_iso_8601": "2019-12-28T18:11:03.326078Z", "url": "https://files.pythonhosted.org/packages/77/01/abde1cd3e375bc4ce6c3045f65761e0b782e84e7e3abe92efbc5000a473d/zstandard-0.13.0-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87b05bd0f8e5bbe5bfe22c95d927f02d", "sha256": "b3e9b81e64de6a284ad8b55ab4d97a8c6c945e689d46b4c967889c3399104694"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux2014_i686.whl", "has_sig": false, "md5_digest": "87b05bd0f8e5bbe5bfe22c95d927f02d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3022135, "upload_time": "2019-12-28T18:11:06", "upload_time_iso_8601": "2019-12-28T18:11:06.316020Z", "url": "https://files.pythonhosted.org/packages/25/0a/244a14b4f86e12c55839ab53ab3a305da0d39a4e4a93223494fff1c95d9a/zstandard-0.13.0-cp36-cp36m-manylinux2014_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2dad51f956d6f15e14db93cd951d263d", "sha256": "b1f52f5cc60cd4b843bc7f0879e50796cb952381bae08101de07797b9d8c76a4"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux2014_x86_64.whl", "has_sig": false, "md5_digest": "2dad51f956d6f15e14db93cd951d263d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3514087, "upload_time": "2019-12-28T18:11:09", "upload_time_iso_8601": "2019-12-28T18:11:09.566288Z", "url": "https://files.pythonhosted.org/packages/c6/40/cde2dfec7e25145c893267ebd1c5e3e0915ebc7274652d3f863e212026ec/zstandard-0.13.0-cp36-cp36m-manylinux2014_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c7d7ac5f18fb85cbba498ce8c522fa0", "sha256": "853df35231ac662e8ab7154eb026fc9ed0bc9f6d52734d0d70975cfb1ac95b3f"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "4c7d7ac5f18fb85cbba498ce8c522fa0", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 455032, "upload_time": "2019-12-28T18:11:12", "upload_time_iso_8601": "2019-12-28T18:11:12.389029Z", "url": "https://files.pythonhosted.org/packages/9e/a8/9e2f24988274fea5607a7c21b7ad2dbdceeb435aa80e246715211a55e490/zstandard-0.13.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0943981c40dd039852791d5e7086dc2", "sha256": "7b75d91ed097e2e7b1fb60b314fd23e7dbec8b608da529d1df960e25e6b43349"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "a0943981c40dd039852791d5e7086dc2", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 527155, "upload_time": "2019-12-28T18:11:14", "upload_time_iso_8601": "2019-12-28T18:11:14.797305Z", "url": "https://files.pythonhosted.org/packages/b3/5e/d8a176a0ba1c9cfb239a3739ad19c831164ccffdb1f767b37bf029aa9667/zstandard-0.13.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73126f6c130c6e17e400570f04d2becd", "sha256": "c010ce893c92ed7a857427a50c2aba389a64dfae9956cf990aec1ac00221f5d6"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "73126f6c130c6e17e400570f04d2becd", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 879675, "upload_time": "2019-12-28T18:11:17", "upload_time_iso_8601": "2019-12-28T18:11:17.344250Z", "url": "https://files.pythonhosted.org/packages/9d/a3/4760f60ea27b1c38c0e3afd7180bc3005d7eb69adbe54f8b5372b23258a8/zstandard-0.13.0-cp37-cp37m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "193d1d88de3b3b3bbfcf1261c5a510fe", "sha256": "ddb3eb9ca4c6b58d28ce028316e99ac9ff312bbff6399a33cd856fea2478664d"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "193d1d88de3b3b3bbfcf1261c5a510fe", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 2975082, "upload_time": "2019-12-28T18:11:20", "upload_time_iso_8601": "2019-12-28T18:11:20.447394Z", "url": "https://files.pythonhosted.org/packages/62/8c/347766db2c8c5d82336c06589b8d022641c32e168104deb3beaf0be8ea22/zstandard-0.13.0-cp37-cp37m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baad1668d1c77cae96ada26c14cbe5aa", "sha256": "e5f6659c862f55d048bcd0e772bbfe80f3d69c731999308996c6f90daf98b770"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "baad1668d1c77cae96ada26c14cbe5aa", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 4024287, "upload_time": "2019-12-28T18:11:23", "upload_time_iso_8601": "2019-12-28T18:11:23.471217Z", "url": "https://files.pythonhosted.org/packages/f5/b8/0f6e1d2a61278d68096269cc554e3c464a29dbe71a03545d2804cf9c11ce/zstandard-0.13.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2868b67a613afdd8b24ed3ee8ce9d82b", "sha256": "dd81cc69616e515984b8fc18bba73b0fb37e5600b3740eb835c6218445c1fa80"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "2868b67a613afdd8b24ed3ee8ce9d82b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 2975085, "upload_time": "2019-12-28T18:11:26", "upload_time_iso_8601": "2019-12-28T18:11:26.402988Z", "url": "https://files.pythonhosted.org/packages/b2/4f/63dd5f20dfc3d0b49eb8d57f2eef3a3cfd1c5c3491348efc4bd861608aa6/zstandard-0.13.0-cp37-cp37m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f9237590851b31a7dbac14c5a4665df", "sha256": "df5d0c97bb13898bde0c56e87faa1ff9c37108997f904cbd5d44cd62362ff8e5"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "2f9237590851b31a7dbac14c5a4665df", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 4024289, "upload_time": "2019-12-28T18:11:29", "upload_time_iso_8601": "2019-12-28T18:11:29.878072Z", "url": "https://files.pythonhosted.org/packages/31/ed/87690b2b119998036df3b28c3ca4a0aad02359cadf559e924c1ac87eee2c/zstandard-0.13.0-cp37-cp37m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e25322b6cd06fa1f129b53f09828286", "sha256": "b53622c0a2b3044d911f307a92ca1872c0d16db03475a3f907056ce03905e298"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux2014_i686.whl", "has_sig": false, "md5_digest": "7e25322b6cd06fa1f129b53f09828286", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3035548, "upload_time": "2019-12-28T18:11:33", "upload_time_iso_8601": "2019-12-28T18:11:33.286259Z", "url": "https://files.pythonhosted.org/packages/9e/01/276bb4f89bceed1310e3f05761ce4d3d23897afb190fdb0613cb24dcb7a7/zstandard-0.13.0-cp37-cp37m-manylinux2014_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "031e1884edb31d03fd05a617ab726ee9", "sha256": "b42860c8722c32e67731bf8b8fefc0f152eeebd461f7273ef53fae04ca19fbd0"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux2014_x86_64.whl", "has_sig": false, "md5_digest": "031e1884edb31d03fd05a617ab726ee9", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3526760, "upload_time": "2019-12-28T18:11:36", "upload_time_iso_8601": "2019-12-28T18:11:36.460069Z", "url": "https://files.pythonhosted.org/packages/0a/16/b2329e714a1f216ba01742caf6853f520b3f1afc5fbcc8518f071989607a/zstandard-0.13.0-cp37-cp37m-manylinux2014_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08b196977ec3d9a83618ab7bfce1a0ba", "sha256": "77cd06c48cb9b5b96ac9d95f1de0a6d0c41d8e45cfdd8a76dac7a0ea1c9fa8c8"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "08b196977ec3d9a83618ab7bfce1a0ba", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 454255, "upload_time": "2019-12-28T18:11:39", "upload_time_iso_8601": "2019-12-28T18:11:39.534736Z", "url": "https://files.pythonhosted.org/packages/8f/ae/7b025585a52b036d6e1fa313bf5df406e7438fd505b66ce7aaabaac19872/zstandard-0.13.0-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1c238dd71c0ed5f314e4cdbbf604f0b", "sha256": "ea91080068f7491ee80d46d8b90ebc86b9794383645e974cb8c2d559fe215c00"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "e1c238dd71c0ed5f314e4cdbbf604f0b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 531707, "upload_time": "2019-12-28T18:11:41", "upload_time_iso_8601": "2019-12-28T18:11:41.950978Z", "url": "https://files.pythonhosted.org/packages/a3/30/cb55b524a07de64a44d2a38cae16c96bfd3a62a00f2acb2a49f0be516375/zstandard-0.13.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c18a0c6638caa8a38be530c3138b69", "sha256": "f1e64e1baea6bcaedc6df458f31fa79ffd2745999cc919862253d52e2eb67166"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "a6c18a0c6638caa8a38be530c3138b69", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 460873, "upload_time": "2019-12-28T18:11:44", "upload_time_iso_8601": "2019-12-28T18:11:44.734211Z", "url": "https://files.pythonhosted.org/packages/c6/79/a7b31258dfc071344e5e21976a395310330e72ffad0e3d12a68e3d2c82fe/zstandard-0.13.0-cp38-cp38-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6770faac52b0b3519b957d023b5c2a7", "sha256": "10fcf9fb35ed91c0fc7463974fcbfb696a831b151d6552fbd9bc870a1fd45601"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux1_i686.whl", "has_sig": false, "md5_digest": "b6770faac52b0b3519b957d023b5c2a7", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 3032011, "upload_time": "2019-12-28T18:11:47", "upload_time_iso_8601": "2019-12-28T18:11:47.441256Z", "url": "https://files.pythonhosted.org/packages/ac/0a/ecb8882fd651639194a776ee9acb7d6a0aa8716ea4cce11d812a6c5f5a7d/zstandard-0.13.0-cp38-cp38-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c62444c17ce83fbb9502bd7877c47e3", "sha256": "5d58b1a322312585b58aaa4c21f822be3e926fd4ce81f940b8dd4b873f000fa5"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "9c62444c17ce83fbb9502bd7877c47e3", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 4032680, "upload_time": "2019-12-28T18:11:50", "upload_time_iso_8601": "2019-12-28T18:11:50.475006Z", "url": "https://files.pythonhosted.org/packages/45/c6/6a7331a768d3208e440711c209036697f5b51a1294ae59973ad7abcaec69/zstandard-0.13.0-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a450cf2bc38b82e8c9c251bf04b6097", "sha256": "e3c5e65b9a157e72129c6a57e2bbbc47091823bb4ab83b41f05ff47ea1608dbb"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "9a450cf2bc38b82e8c9c251bf04b6097", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 2975407, "upload_time": "2019-12-28T18:11:53", "upload_time_iso_8601": "2019-12-28T18:11:53.588424Z", "url": "https://files.pythonhosted.org/packages/ae/a7/d9f38101a86c64d4e2a30c1c35955ecb56351a80055d780d65694aaebb38/zstandard-0.13.0-cp38-cp38-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3b6a7fe9539a369156e417ea7a8e43f", "sha256": "ab15c02af232325b2dfedb325a05e49717157f1243c47698046fe476e4111182"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "e3b6a7fe9539a369156e417ea7a8e43f", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 4032681, "upload_time": "2019-12-28T18:11:57", "upload_time_iso_8601": "2019-12-28T18:11:57.007487Z", "url": "https://files.pythonhosted.org/packages/50/92/8532005f6dd59986bce35af1ad0661c7cff7b677ee0a7fcb0d95293b17c4/zstandard-0.13.0-cp38-cp38-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c57ab4231b30e7b531ad330705eeeab5", "sha256": "2f3734428a65da36c82137daab5b3458d2e65f472315c4bd07996396309209a7"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux2014_i686.whl", "has_sig": false, "md5_digest": "c57ab4231b30e7b531ad330705eeeab5", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 3032015, "upload_time": "2019-12-28T18:11:59", "upload_time_iso_8601": "2019-12-28T18:11:59.950487Z", "url": "https://files.pythonhosted.org/packages/de/d5/5bd2107901963154d5df881d1c1eee27c340a3368baf603d88c24c88ad01/zstandard-0.13.0-cp38-cp38-manylinux2014_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c772fb0e6b37f40a454379d488f77675", "sha256": "2c77185a4cefe3774ef4de4bcbf477c6e5f7d106e6d0e0f9d97c8c8d85a7a7ce"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux2014_x86_64.whl", "has_sig": false, "md5_digest": "c772fb0e6b37f40a454379d488f77675", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 3528952, "upload_time": "2019-12-28T18:12:02", "upload_time_iso_8601": "2019-12-28T18:12:02.954270Z", "url": "https://files.pythonhosted.org/packages/d1/1f/24aa66bd30192ddd212a237f5d5933cca686445c7244d182f0a97f75e617/zstandard-0.13.0-cp38-cp38-manylinux2014_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86c77fed08dff9f48154043a9213b123", "sha256": "22daffeeab53105ed65bb2be9133f857617ae432415fe4d7b48976e38b14767b"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-win32.whl", "has_sig": false, "md5_digest": "86c77fed08dff9f48154043a9213b123", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 453465, "upload_time": "2019-12-28T18:12:05", "upload_time_iso_8601": "2019-12-28T18:12:05.937894Z", "url": "https://files.pythonhosted.org/packages/60/9e/a25e345d5f4b46ad7404d0cf7bbb8dc515f8ccf902095c416f96b0846c2d/zstandard-0.13.0-cp38-cp38-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebe467d00021c4069bfda21491023f00", "sha256": "5168161bad3ad4bfa3a9ac4cda168eec3eb5da640ef17d7d6c21f903d87dec51"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "ebe467d00021c4069bfda21491023f00", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 533209, "upload_time": "2019-12-28T18:12:08", "upload_time_iso_8601": "2019-12-28T18:12:08.597046Z", "url": "https://files.pythonhosted.org/packages/d0/5e/493e6bf3512f8dfbccf06ce6f61cc90daf3d9160a84fd16861f36ac89035/zstandard-0.13.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b894c7930073e7ab47d4ec7717dfad06", "sha256": "e5cbd8b751bd498f275b0582f449f92f14e64f4e03b5bf51c571240d40d43561"}, "downloads": -1, "filename": "zstandard-0.13.0.tar.gz", "has_sig": false, "md5_digest": "b894c7930073e7ab47d4ec7717dfad06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 659422, "upload_time": "2019-12-28T18:12:11", "upload_time_iso_8601": "2019-12-28T18:12:11.136443Z", "url": "https://files.pythonhosted.org/packages/b1/3d/b95e8beb3b2d165726c6105a728a1f59ae88d6bf1e3dc66375fbe149afcd/zstandard-0.13.0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "0069137c897483cdd2afa445f9051059", "sha256": "b9468de9016fbfdc420a5b93a5c846a7a0a9c44e888625551b03814bea914a98"}, "downloads": -1, "filename": "zstandard-0.2.tar.gz", "has_sig": false, "md5_digest": "0069137c897483cdd2afa445f9051059", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153588, "upload_time": "2016-09-06T02:39:26", "upload_time_iso_8601": "2016-09-06T02:39:26.145724Z", "url": "https://files.pythonhosted.org/packages/d3/63/f4b0a5c85f9928ca46e63835a8b7dcf6f111db3cbfe76519dbd9bf359f22/zstandard-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f33176ef737dd5cf65ddfc81ac97064c", "sha256": "0b0266d4b903e09e1b1293bf6321db1b0c3effdf39cef329b95ec51060f73d6c"}, "downloads": -1, "filename": "zstandard-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f33176ef737dd5cf65ddfc81ac97064c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153670, "upload_time": "2016-09-06T04:33:41", "upload_time_iso_8601": "2016-09-06T04:33:41.256521Z", "url": "https://files.pythonhosted.org/packages/b5/3f/9241d6affa731398738ba61469fae646a2b6943a06da9b0c8137a26c94fe/zstandard-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "7540fb8c05b08600a03035301c7aa07c", "sha256": "9904e9e7f79fd9c18b6cbe6a83e1b0a6a5e89332501bd17972f09c49c4862aa8"}, "downloads": -1, "filename": "zstandard-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7540fb8c05b08600a03035301c7aa07c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154750, "upload_time": "2016-09-06T04:45:25", "upload_time_iso_8601": "2016-09-06T04:45:25.267764Z", "url": "https://files.pythonhosted.org/packages/84/9f/8dbd1040e7556401793255acc944ddd5b92a415290ce96f360c4bf6265ed/zstandard-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "eb4047941bd6a8e8c47158aadebd8d08", "sha256": "f41786932c6f1f20a56a7ceee91eac020a3bcc5940bcac31dec810a0358c320c"}, "downloads": -1, "filename": "zstandard-0.3.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "eb4047941bd6a8e8c47158aadebd8d08", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 122931, "upload_time": "2016-09-11T06:37:41", "upload_time_iso_8601": "2016-09-11T06:37:41.729750Z", "url": "https://files.pythonhosted.org/packages/12/87/f6c78839a4ee64825f90003d551847aad1c11a9459aa8947ad84b5751935/zstandard-0.3.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7bc8288381e80330e3f9988e819fee3", "sha256": "c43a133b756a6e087e56b5c7d3192d4df28eb17e3e59acec812cbb8dee9f73a3"}, "downloads": -1, "filename": "zstandard-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e7bc8288381e80330e3f9988e819fee3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 164681, "upload_time": "2016-09-11T06:23:56", "upload_time_iso_8601": "2016-09-11T06:23:56.956393Z", "url": "https://files.pythonhosted.org/packages/7b/41/8b4f2b7122c3ef6d3c7614a1f9af20397813c04122292b0996512918c905/zstandard-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "767cb03ee9513cac05db26482c60cf85", "sha256": "f4f51a7327d745193558b54dc26992ab82a9ca81a58b803da413b715c58be335"}, "downloads": -1, "filename": "zstandard-0.3.1-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "767cb03ee9513cac05db26482c60cf85", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 234015, "upload_time": "2016-09-12T02:53:53", "upload_time_iso_8601": "2016-09-12T02:53:53.823945Z", "url": "https://files.pythonhosted.org/packages/66/df/489a3a1d391e2e0863bca4db94096f4a9ea44098e3c61fbb7b8bd3f63ccd/zstandard-0.3.1-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e6795f5554977aaf7a2dd925a9e7294", "sha256": "fb56707c4c06da5eeb93827b1ec616720f23f4c2f3c23f242fc6130f6a0913ce"}, "downloads": -1, "filename": "zstandard-0.3.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "2e6795f5554977aaf7a2dd925a9e7294", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 233468, "upload_time": "2016-09-12T02:56:15", "upload_time_iso_8601": "2016-09-12T02:56:15.853537Z", "url": "https://files.pythonhosted.org/packages/6d/56/8fc3b0d4288b24c5d47170c0dfe8fcedb0a19cd4c4470d396d699bb10885/zstandard-0.3.1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d1fa8771b63ae6ad6893e3a4d3c2672", "sha256": "c4585ee541d3e3a3adfd7e0d4e6c650d8d62bdc913c551305e409758b38708fc"}, "downloads": -1, "filename": "zstandard-0.3.1-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "9d1fa8771b63ae6ad6893e3a4d3c2672", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 239874, "upload_time": "2016-09-12T02:56:18", "upload_time_iso_8601": "2016-09-12T02:56:18.372513Z", "url": "https://files.pythonhosted.org/packages/46/01/65def39eb0fcdcdbf5db44d9c57459a9a77f2a32f19e069634145befe078/zstandard-0.3.1-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3496d77efc602588f0dcc5c6a819f126", "sha256": "96f92d8f84ace7e225bf76c687a257ed8f4bb821c90219b316561f61ff451a0d"}, "downloads": -1, "filename": "zstandard-0.3.1-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "3496d77efc602588f0dcc5c6a819f126", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 239882, "upload_time": "2016-09-12T02:56:20", "upload_time_iso_8601": "2016-09-12T02:56:20.805475Z", "url": "https://files.pythonhosted.org/packages/e6/17/4dc6e5c6ddc752997b3bf9f0b83208ba6fd6a0f4ef6b5b4a4bd2248e77c4/zstandard-0.3.1-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c3badd8788749148b58ca125bd997ba", "sha256": "200d45a6d87d1d957ce86cf31a108813e4c660880adcebf59d12616468b9c79b"}, "downloads": -1, "filename": "zstandard-0.3.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "9c3badd8788749148b58ca125bd997ba", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 220411, "upload_time": "2016-09-12T02:56:23", "upload_time_iso_8601": "2016-09-12T02:56:23.560133Z", "url": "https://files.pythonhosted.org/packages/6c/dc/16b72d485197bfae63d5ab3cd2a1d91e7f4e1470a172e880c7dd9336ac2c/zstandard-0.3.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c7be0853bae1e8c26908b34cc2e0a8f", "sha256": "861dc645cc961ef5357426a88a6065dc9b4a28d87da77537cae4da84d84bc1e4"}, "downloads": -1, "filename": "zstandard-0.3.1.tar.gz", "has_sig": false, "md5_digest": "6c7be0853bae1e8c26908b34cc2e0a8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167910, "upload_time": "2016-09-12T02:53:00", "upload_time_iso_8601": "2016-09-12T02:53:00.884476Z", "url": "https://files.pythonhosted.org/packages/37/60/80da89c220dd66b3cad3e48458c42f249efc573f2e759bcc236a3d6f833d/zstandard-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "12b107f87379642148b481a23af77831", "sha256": "5b5374f2dc94968f99be0caeae4f3315d844fe34066855a1020d312a5fe75eab"}, "downloads": -1, "filename": "zstandard-0.3.2-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "12b107f87379642148b481a23af77831", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 203318, "upload_time": "2016-09-12T03:57:43", "upload_time_iso_8601": "2016-09-12T03:57:43.627157Z", "url": "https://files.pythonhosted.org/packages/f1/d1/e1b348c09218dad49d243d2619036e708cb4497e89096d6e64bdbcffa9f4/zstandard-0.3.2-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a29c42a8969bb8d787beaa736424251", "sha256": "eef0738d9fe10c2bb084468a55f7eaffd29055d1c7adc96ed8f0e36281c7c65e"}, "downloads": -1, "filename": "zstandard-0.3.2-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "8a29c42a8969bb8d787beaa736424251", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 233979, "upload_time": "2016-09-12T03:57:46", "upload_time_iso_8601": "2016-09-12T03:57:46.244304Z", "url": "https://files.pythonhosted.org/packages/6c/f8/6af395333131e500f548f7a64e3c074f16bc17a14c80b2620dbc8c147bf6/zstandard-0.3.2-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d5e4bde8487e04bfbfc323765b4bc03", "sha256": "b0f3f2072e9f5960247a2d49c4f48b3c3b76d0edba830455d4771c01a930f722"}, "downloads": -1, "filename": "zstandard-0.3.2-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "7d5e4bde8487e04bfbfc323765b4bc03", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 202848, "upload_time": "2016-09-12T03:57:48", "upload_time_iso_8601": "2016-09-12T03:57:48.722439Z", "url": "https://files.pythonhosted.org/packages/91/68/63038d017e6c3378d59065f14294392a53583bc4e0f0c3d3176195670ce4/zstandard-0.3.2-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6aaa35206908a29e76e52b9f65e89bcb", "sha256": "4784f4db8d4bed0015d57412035f7cf9b685d636b1d11619bed696164f94e18c"}, "downloads": -1, "filename": "zstandard-0.3.2-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "6aaa35206908a29e76e52b9f65e89bcb", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 233433, "upload_time": "2016-09-12T03:57:51", "upload_time_iso_8601": "2016-09-12T03:57:51.233475Z", "url": "https://files.pythonhosted.org/packages/7e/11/0152eb69ca11d6379128b0c571a31f5a0daaac25a263c579f51717aa3840/zstandard-0.3.2-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4264835f2f53b3e1272eca698109ab29", "sha256": "c94b5366e0ee676f81ab58ae8bfc227b59671edead1cbaa45470e88add87f179"}, "downloads": -1, "filename": "zstandard-0.3.2-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "4264835f2f53b3e1272eca698109ab29", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 205492, "upload_time": "2016-09-12T03:57:53", "upload_time_iso_8601": "2016-09-12T03:57:53.908004Z", "url": "https://files.pythonhosted.org/packages/ba/6e/e68415a32979a1aa0402c6b2f9f610e6758a3900300765ea7d02118784e1/zstandard-0.3.2-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35d2302aa93df900b67769c533c07839", "sha256": "579b9202d1b2e9af8ccf9cd77938564ec1eec8c3ce580a9bbbbf59961766ba3a"}, "downloads": -1, "filename": "zstandard-0.3.2-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "35d2302aa93df900b67769c533c07839", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 239839, "upload_time": "2016-09-12T03:57:56", "upload_time_iso_8601": "2016-09-12T03:57:56.444903Z", "url": "https://files.pythonhosted.org/packages/75/53/b1a75c9ef884acd018ddb91b1fbea6700b9048528916ed61fcd6d884d96d/zstandard-0.3.2-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c22c3579673bfcd733a13e1e95677aea", "sha256": "d522063da77bf133e9c21b14bae1c32b2aeac0472e04f2bc0f3dfab8a1acdade"}, "downloads": -1, "filename": "zstandard-0.3.2-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "c22c3579673bfcd733a13e1e95677aea", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 205462, "upload_time": "2016-09-12T03:57:59", "upload_time_iso_8601": "2016-09-12T03:57:59.081135Z", "url": "https://files.pythonhosted.org/packages/28/d0/e49376e55fd4daaec685411566627253a73f99328876fba36e342b7f3b36/zstandard-0.3.2-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a186cfffd36a02af5304af6f7bba2099", "sha256": "8945645e470c8c2b329dd5e2e3fe22cfa6db826c2bab56f5468866797e1755ed"}, "downloads": -1, "filename": "zstandard-0.3.2-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "a186cfffd36a02af5304af6f7bba2099", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 239848, "upload_time": "2016-09-12T03:58:01", "upload_time_iso_8601": "2016-09-12T03:58:01.752622Z", "url": "https://files.pythonhosted.org/packages/0b/96/d7aecea082dc9695183309d9525dfd5d04c3238a00472d701c68a9eeeec3/zstandard-0.3.2-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a48b31b5455d6cc3b1d8b4409f4de32b", "sha256": "85a3f2d6260fad915d4bd7da19cfac0a3c9459924a5e342acb9ffc4bcc864810"}, "downloads": -1, "filename": "zstandard-0.3.2-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "a48b31b5455d6cc3b1d8b4409f4de32b", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 187696, "upload_time": "2016-09-12T03:58:04", "upload_time_iso_8601": "2016-09-12T03:58:04.183921Z", "url": "https://files.pythonhosted.org/packages/be/38/6b3d78537c2064a2adba0e43c0e782847e2b4e25d514c38f35c10f0b6eb9/zstandard-0.3.2-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cbf454e9887165802fc61504126f91a", "sha256": "7479bbe03cc39c936832a3c9d382b2f1da3adddcd715c4e41b014d4f2c163fd7"}, "downloads": -1, "filename": "zstandard-0.3.2-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "5cbf454e9887165802fc61504126f91a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 220375, "upload_time": "2016-09-12T03:58:06", "upload_time_iso_8601": "2016-09-12T03:58:06.840993Z", "url": "https://files.pythonhosted.org/packages/f9/7e/483b560f3ace4a72f6fcab8a404b4b961c557ba898b02c4c097fc34973d5/zstandard-0.3.2-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2618af75322e8f2ad8f8ec03b8c5a03c", "sha256": "d097ed6fbf8c4e355012d8480f6e13b0070ea1f8367f1f48a402ac657e50aeab"}, "downloads": -1, "filename": "zstandard-0.3.2.tar.gz", "has_sig": false, "md5_digest": "2618af75322e8f2ad8f8ec03b8c5a03c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167907, "upload_time": "2016-09-12T03:31:45", "upload_time_iso_8601": "2016-09-12T03:31:45.704429Z", "url": "https://files.pythonhosted.org/packages/4f/1b/04e5fe1aef7b8b6cdb5edb8fb0842f92233af17c39e4837fc71f4f7223b2/zstandard-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "8a947ec7b8c8cc7445ccea7d005ab5e6", "sha256": "2da9dae664f6dc22221b7da4d01d8390bb21582e52dd357fb0c6502601975d79"}, "downloads": -1, "filename": "zstandard-0.3.3-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "8a947ec7b8c8cc7445ccea7d005ab5e6", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 203287, "upload_time": "2016-10-02T18:33:34", "upload_time_iso_8601": "2016-10-02T18:33:34.676075Z", "url": "https://files.pythonhosted.org/packages/6a/f5/32f7328774638a2919e8162a0d07a7fa3f6d953146e2f8acc35cb868210a/zstandard-0.3.3-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d55fbf67df0790f67eeb72be29572edc", "sha256": "6a885fd1aec9441c85e66e04cdeb22b1c50aaf4399a57750944bd0c2a084be20"}, "downloads": -1, "filename": "zstandard-0.3.3-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "d55fbf67df0790f67eeb72be29572edc", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 233936, "upload_time": "2016-10-02T18:33:38", "upload_time_iso_8601": "2016-10-02T18:33:38.346232Z", "url": "https://files.pythonhosted.org/packages/7c/05/d9c4526c128631de4dc240317fb6fae34a9ae894f9bbc490ef05d70c1ff6/zstandard-0.3.3-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7139d851a7f1bc322b78d15b03cffc6e", "sha256": "b4150367213f33240ab807983dfbb9b29f9542c3e9559bad90d3ea6c004546b1"}, "downloads": -1, "filename": "zstandard-0.3.3-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "7139d851a7f1bc322b78d15b03cffc6e", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 202809, "upload_time": "2016-10-02T18:33:41", "upload_time_iso_8601": "2016-10-02T18:33:41.183921Z", "url": "https://files.pythonhosted.org/packages/b1/ca/64464563ec38a85dd29f339b2223f8af5e2039980d282adf78b7b2736c23/zstandard-0.3.3-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfc905cd3d8a9ead5cad2e4e1e17f81e", "sha256": "83938ddb2a486966e0d914a339c9a1f78d8dfecc4f65aa77fb7262317ae27b10"}, "downloads": -1, "filename": "zstandard-0.3.3-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "cfc905cd3d8a9ead5cad2e4e1e17f81e", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 233389, "upload_time": "2016-10-02T18:33:44", "upload_time_iso_8601": "2016-10-02T18:33:44.245253Z", "url": "https://files.pythonhosted.org/packages/a5/06/f085b94ce5e9b2f4d462311f7faf97f28fa4f4d842119cfae05142b30b75/zstandard-0.3.3-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "451ab7a40a49538d0801557f0f3e61b7", "sha256": "124a9d7c6a43968a5f428e04275a3ecaf3529a3727484da986eb487c9f46394d"}, "downloads": -1, "filename": "zstandard-0.3.3-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "451ab7a40a49538d0801557f0f3e61b7", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 205451, "upload_time": "2016-10-02T18:33:47", "upload_time_iso_8601": "2016-10-02T18:33:47.243867Z", "url": "https://files.pythonhosted.org/packages/1d/5d/fb3eaaef358062564b8554d245e96eee8524941c77dd93a0017c4dfcbfd6/zstandard-0.3.3-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82f062cf0d0f0ed3655479ddf52a667b", "sha256": "fdcb76e58af79acfd51be1b4e6fe5ea5b4a4e59e5b2809d09416f9e72bc050a8"}, "downloads": -1, "filename": "zstandard-0.3.3-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "82f062cf0d0f0ed3655479ddf52a667b", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 239787, "upload_time": "2016-10-02T18:33:51", "upload_time_iso_8601": "2016-10-02T18:33:51.526736Z", "url": "https://files.pythonhosted.org/packages/20/11/37be7bd75c2d603bdbb30023b2bb14758e36accd05160f9cb41f9b447442/zstandard-0.3.3-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ca039a097093ab8b830f614bef49ea8", "sha256": "86d249185fa40706e8aff03f686bed84bc21c6b7379f9d0cb4a6131624622d8d"}, "downloads": -1, "filename": "zstandard-0.3.3-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "8ca039a097093ab8b830f614bef49ea8", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 205422, "upload_time": "2016-10-02T18:33:54", "upload_time_iso_8601": "2016-10-02T18:33:54.375584Z", "url": "https://files.pythonhosted.org/packages/56/ee/8d5f92dde2337730371a7bcdb5211ed129f2030353377af40a1fdfce7ee5/zstandard-0.3.3-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47f000d4142a129c4925ecf33ffbe173", "sha256": "da71e39c89c9345aaf5a7efa97619f7e90557a8e6d5d2c061d3faea25380ea9f"}, "downloads": -1, "filename": "zstandard-0.3.3-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "47f000d4142a129c4925ecf33ffbe173", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 239793, "upload_time": "2016-10-02T18:33:58", "upload_time_iso_8601": "2016-10-02T18:33:58.666877Z", "url": "https://files.pythonhosted.org/packages/0b/60/da0ab9859789af968a92582b04d044982ef2279723b548deb3577cc69f27/zstandard-0.3.3-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "948283ea525b76d396a9c512473382c9", "sha256": "a44bcd41d58d02ce269d384b1ffef6b565181a3f36aaeb84a4ce5b3a3292908e"}, "downloads": -1, "filename": "zstandard-0.3.3-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "948283ea525b76d396a9c512473382c9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 187674, "upload_time": "2016-10-02T18:34:02", "upload_time_iso_8601": "2016-10-02T18:34:02.591375Z", "url": "https://files.pythonhosted.org/packages/57/c7/9507c28d40d9e22c953042b2603a285e82574902d35cd0f02a7bafd0c85c/zstandard-0.3.3-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4aa5272b1814a9d0f68cbca3ea625fe", "sha256": "13dd8aaa19e0943975f87a2d3a59ef19796842213643a59957c197b018365165"}, "downloads": -1, "filename": "zstandard-0.3.3-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "c4aa5272b1814a9d0f68cbca3ea625fe", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 220341, "upload_time": "2016-10-02T18:34:06", "upload_time_iso_8601": "2016-10-02T18:34:06.370789Z", "url": "https://files.pythonhosted.org/packages/9c/b4/835c8a5f73abb88b13cc7c895c26b44990421ed05fdfb4878e67ce68836e/zstandard-0.3.3-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e52ab55244a87331511e3dd838c5235", "sha256": "9f4883bd88cfbe856fb83ca07fb25d8d8171ecc4aba7cb5c41a2f93387388d97"}, "downloads": -1, "filename": "zstandard-0.3.3.tar.gz", "has_sig": false, "md5_digest": "8e52ab55244a87331511e3dd838c5235", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167875, "upload_time": "2016-10-02T17:56:51", "upload_time_iso_8601": "2016-10-02T17:56:51.801798Z", "url": "https://files.pythonhosted.org/packages/20/4b/acaad7eb3156309449f2b9bb24376080976d6b7e6ad0a07427579da648a0/zstandard-0.3.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "bd82d6e5a6f492b7cc520814ab146123", "sha256": "a3d4ff251e633b5354563bfffc1017ceeb2dbdb2b1cf2e568e343a7aabd857cc"}, "downloads": -1, "filename": "zstandard-0.4.0-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "bd82d6e5a6f492b7cc520814ab146123", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 205130, "upload_time": "2016-10-03T04:20:45", "upload_time_iso_8601": "2016-10-03T04:20:45.809331Z", "url": "https://files.pythonhosted.org/packages/1f/87/fb71aaf65e816a66684cb1eda856f4cdb1b2998593360101d664733dc7bd/zstandard-0.4.0-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcc2843460a65483a4a2a5fdb04ddc92", "sha256": "af6dc61fd2c9b6e03acffa8c7168d15020311840b770385fda23423377329e20"}, "downloads": -1, "filename": "zstandard-0.4.0-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "dcc2843460a65483a4a2a5fdb04ddc92", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 236611, "upload_time": "2016-10-03T04:20:48", "upload_time_iso_8601": "2016-10-03T04:20:48.841714Z", "url": "https://files.pythonhosted.org/packages/00/82/a2d7ed47dfdeacf2da79056673e331b1532432a57c430e5a64479d82afbf/zstandard-0.4.0-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a582b3fda298a40568e499f714eae02", "sha256": "d2b2cd1ba1deda2610133cc84b387ef87bf0f39f38239ef16df1fc23eb26ea81"}, "downloads": -1, "filename": "zstandard-0.4.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "4a582b3fda298a40568e499f714eae02", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 204659, "upload_time": "2016-10-03T04:20:51", "upload_time_iso_8601": "2016-10-03T04:20:51.403857Z", "url": "https://files.pythonhosted.org/packages/4b/13/7aa3fa39a0f27cad75d179be4c2bd8d5abe3fefcd75bbc0b208f9a03496d/zstandard-0.4.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60626d978e95b66a82ab9c449eb42ad9", "sha256": "86e7a44b0ff7ca955f5030e99eda1891069d1ad44282c6d970410e170fff89f5"}, "downloads": -1, "filename": "zstandard-0.4.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "60626d978e95b66a82ab9c449eb42ad9", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 236068, "upload_time": "2016-10-03T04:20:54", "upload_time_iso_8601": "2016-10-03T04:20:54.282024Z", "url": "https://files.pythonhosted.org/packages/04/58/c9197fbcb609a18d0bbe3b90f2fbe4740f678e619549cb1e2805f994aba0/zstandard-0.4.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1c629c9ea2265298bc8b59161c0d4b1", "sha256": "5878f9d666bcbb4c29b7e120831a4e6aaa1d2b76964e1d192df4b26f4f3c2091"}, "downloads": -1, "filename": "zstandard-0.4.0-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "d1c629c9ea2265298bc8b59161c0d4b1", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 207484, "upload_time": "2016-10-03T04:20:57", "upload_time_iso_8601": "2016-10-03T04:20:57.277502Z", "url": "https://files.pythonhosted.org/packages/c2/c9/ccf83c0257a6bf2d07d56484766db305ffd529f2230452aab059a678d322/zstandard-0.4.0-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc1c783aafd00ff4f737c16d9dd76570", "sha256": "8318c08e2f38430d08950e48623c0c9878ada1dbeaae5a425cbb12178c42f4c6"}, "downloads": -1, "filename": "zstandard-0.4.0-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "dc1c783aafd00ff4f737c16d9dd76570", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 242593, "upload_time": "2016-10-03T04:21:00", "upload_time_iso_8601": "2016-10-03T04:21:00.322337Z", "url": "https://files.pythonhosted.org/packages/8f/16/0d00ea2d27286576e234dde8952f5b9394b0459f68240c881d37c1ba3fc2/zstandard-0.4.0-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2ad446a7061ce8f6ce03a488332b5d8", "sha256": "cb4aca8e81c97bc81757f43295cad1b84b963ca2460b9d8aeb18dcf2e2db5cc1"}, "downloads": -1, "filename": "zstandard-0.4.0-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "f2ad446a7061ce8f6ce03a488332b5d8", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 207466, "upload_time": "2016-10-03T04:21:04", "upload_time_iso_8601": "2016-10-03T04:21:04.375752Z", "url": "https://files.pythonhosted.org/packages/ce/9a/b4af180ddb774e2ae5b1a6f1cc67856d8d1782c09a9721b97ab6423f12b8/zstandard-0.4.0-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2a4b9c202d9b5146c75998aa283a96b", "sha256": "a497cb8cc89441d720d77915a95c533d351bf30089bafdf5e198a33bce921c4c"}, "downloads": -1, "filename": "zstandard-0.4.0-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "e2a4b9c202d9b5146c75998aa283a96b", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 242573, "upload_time": "2016-10-03T04:21:08", "upload_time_iso_8601": "2016-10-03T04:21:08.041078Z", "url": "https://files.pythonhosted.org/packages/ae/85/fa02e0437b98d5cf0e2203bb1164c54019add43ce0362f46bd5adbec078f/zstandard-0.4.0-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e303e57eeda4d63b4a363d52aa37301", "sha256": "10a11b2fa75f0ca07969e4be31f9eed954254e20fa0d1f4c56d691893a6cf0d9"}, "downloads": -1, "filename": "zstandard-0.4.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "2e303e57eeda4d63b4a363d52aa37301", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 190305, "upload_time": "2016-10-03T04:21:12", "upload_time_iso_8601": "2016-10-03T04:21:12.070675Z", "url": "https://files.pythonhosted.org/packages/5a/e1/25056ccd27acf256510efbfa50a10e74ed3b6ba101cf24afb6c9518cbf18/zstandard-0.4.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d53f3e10fcb9fc67552346b958d39337", "sha256": "da6117a71241ef323cfafbcc8be00934873750e2cbaf89bc25987906b0dd8656"}, "downloads": -1, "filename": "zstandard-0.4.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "d53f3e10fcb9fc67552346b958d39337", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 223724, "upload_time": "2016-10-03T04:21:15", "upload_time_iso_8601": "2016-10-03T04:21:15.322187Z", "url": "https://files.pythonhosted.org/packages/ea/ee/d89dd6af3e4be1b267aa48dd99a5dd418dda8d1e1039d0228b049ff57009/zstandard-0.4.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76f3ca21ad75702eff006223d3851319", "sha256": "c7230e994edb26d23b816c8a5430e6b15f8d1d1fdf60473bb8eb9847136693aa"}, "downloads": -1, "filename": "zstandard-0.4.0.tar.gz", "has_sig": false, "md5_digest": "76f3ca21ad75702eff006223d3851319", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 718892, "upload_time": "2016-10-03T04:21:19", "upload_time_iso_8601": "2016-10-03T04:21:19.360898Z", "url": "https://files.pythonhosted.org/packages/90/9e/645fa2b65a5bfe794d4ad6536a02e2a8a3be5273d912464a94675b97b800/zstandard-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "71a51930933c236fd6c25017e6b4eb80", "sha256": "9e7fc5bfe211401fc3363bd11638050e54b4bcfe3f7150d4adf043417bc3f588"}, "downloads": -1, "filename": "zstandard-0.5.0-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "71a51930933c236fd6c25017e6b4eb80", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 224738, "upload_time": "2016-11-11T05:23:05", "upload_time_iso_8601": "2016-11-11T05:23:05.566563Z", "url": "https://files.pythonhosted.org/packages/b8/fc/abd2c021d051c47d33ff601eb50104c1e0c8148d44a41b75999875e65b86/zstandard-0.5.0-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2c4d65d05e14657014a2aa59eb3f767", "sha256": "6cd3811d83b81d082659667eb30fc94f202e867da73f99beb561adfef5e1a08c"}, "downloads": -1, "filename": "zstandard-0.5.0-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "d2c4d65d05e14657014a2aa59eb3f767", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 259943, "upload_time": "2016-11-11T05:23:08", "upload_time_iso_8601": "2016-11-11T05:23:08.580993Z", "url": "https://files.pythonhosted.org/packages/a5/44/8248565c0c128bfaaaec231ac0cad79c5ae75d0f286d4ccdc149fe90ff66/zstandard-0.5.0-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3c9fdd9da78c69d5b46cd56df80d9de", "sha256": "e3dc00af3a14265f5327f92ad7ea94cd83f0d46a8cfe9eedbad85f890bf78f7b"}, "downloads": -1, "filename": "zstandard-0.5.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "f3c9fdd9da78c69d5b46cd56df80d9de", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 224233, "upload_time": "2016-11-11T05:24:10", "upload_time_iso_8601": "2016-11-11T05:24:10.214479Z", "url": "https://files.pythonhosted.org/packages/e3/70/1a6a1e5a9e03eb6ccdecb8596b7c944299c9feef0f66f50828fc8b543f01/zstandard-0.5.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3015d56867d35c002adabe837db420f4", "sha256": "bb53b594cfddf0914b3b3287c931c14132749d0ab43cee2a1c361dc4d9edaeae"}, "downloads": -1, "filename": "zstandard-0.5.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "3015d56867d35c002adabe837db420f4", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 259332, "upload_time": "2016-11-11T05:24:12", "upload_time_iso_8601": "2016-11-11T05:24:12.807676Z", "url": "https://files.pythonhosted.org/packages/bd/47/a4212793e03725d57d0b1fef2ffc0b6a05810471df90bea86241ca96dafc/zstandard-0.5.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2dcd780d7c88adbe42a04d2906dfa45", "sha256": "346c78122ce0b461a77d033d81417945bc87971bee5f3128d76d076c1e8d30ec"}, "downloads": -1, "filename": "zstandard-0.5.0-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "e2dcd780d7c88adbe42a04d2906dfa45", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 225576, "upload_time": "2016-11-11T05:24:15", "upload_time_iso_8601": "2016-11-11T05:24:15.378230Z", "url": "https://files.pythonhosted.org/packages/c5/53/1679c5216cec5aefe1008fc4f5524b9a63a90c27727bd01d2d6d4cbd0610/zstandard-0.5.0-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b89a158f64b28cd9ed015a3294879e7c", "sha256": "94566e345976bf0c765e86abfc633010179433fcd23de27fa479dcfe802b6792"}, "downloads": -1, "filename": "zstandard-0.5.0-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "b89a158f64b28cd9ed015a3294879e7c", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 264379, "upload_time": "2016-11-11T05:24:18", "upload_time_iso_8601": "2016-11-11T05:24:18.473809Z", "url": "https://files.pythonhosted.org/packages/c4/aa/aa164c834b3ca4e823e412e4baaa2348d39da93b0d5464c09b898ac19f71/zstandard-0.5.0-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "283d1ac5f0e0c87d33db82e450d699e2", "sha256": "2efd9e1a970ee338b9d0095fd66ac3b06475202279323b8be77451296807eca1"}, "downloads": -1, "filename": "zstandard-0.5.0-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "283d1ac5f0e0c87d33db82e450d699e2", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 225552, "upload_time": "2016-11-11T05:24:21", "upload_time_iso_8601": "2016-11-11T05:24:21.297956Z", "url": "https://files.pythonhosted.org/packages/96/5f/fdcc4deb272904d91cfc83a8ccc06a2e466557ebaa1732b9a0d54825b6eb/zstandard-0.5.0-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a172e37161a193df4ce028884665135", "sha256": "230bdda1b2486ed7f4c55b2b5268f42234ef09bc051a1d310a86ae95b94a5c36"}, "downloads": -1, "filename": "zstandard-0.5.0-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "1a172e37161a193df4ce028884665135", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 264279, "upload_time": "2016-11-11T05:24:24", "upload_time_iso_8601": "2016-11-11T05:24:24.037124Z", "url": "https://files.pythonhosted.org/packages/e5/3f/d8695d0aef319c928ff4cb792b0be0b7273fc47562130827439bc9ff720b/zstandard-0.5.0-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1af9c048cfeb9cf867158676f3980f03", "sha256": "3e220b7cc9f11a9e57f571c2634e31a5944c1012c3be01ad6acac37abd661e7f"}, "downloads": -1, "filename": "zstandard-0.5.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "1af9c048cfeb9cf867158676f3980f03", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 213624, "upload_time": "2016-11-11T05:24:26", "upload_time_iso_8601": "2016-11-11T05:24:26.561291Z", "url": "https://files.pythonhosted.org/packages/20/08/6f5a2f2980cb33baff7d6dfe13b8860eb50a772be07a1a266ee29c3cf1ed/zstandard-0.5.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f6c3ea10540cac4b3d4b676c9c59609", "sha256": "5d9712f6cc6eb99362cf76caf082a573696bc5ae9fac0b5bf0b6b4e29c5a5f95"}, "downloads": -1, "filename": "zstandard-0.5.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "4f6c3ea10540cac4b3d4b676c9c59609", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 246096, "upload_time": "2016-11-11T05:24:29", "upload_time_iso_8601": "2016-11-11T05:24:29.169881Z", "url": "https://files.pythonhosted.org/packages/e4/5d/00ba0021f4b0e20252fcb498d55d618f3f60f808df67722d44f4e3c53631/zstandard-0.5.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69560efecaae81b7ee0cfa4facf4f3c7", "sha256": "91b64452309178b477593f8702c39475666f6417b9306d380bde06096823ac5f"}, "downloads": -1, "filename": "zstandard-0.5.0.tar.gz", "has_sig": false, "md5_digest": "69560efecaae81b7ee0cfa4facf4f3c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166463, "upload_time": "2016-11-11T05:25:15", "upload_time_iso_8601": "2016-11-11T05:25:15.403949Z", "url": "https://files.pythonhosted.org/packages/d8/84/36aaa396c682c1fcf6c5fe7106383b4cc63127b6b04e56d75d3fbc28a154/zstandard-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "4cfaaa685b95b127fb0bfc99f41e0f40", "sha256": "8821d719dc94f320454b7f2e15c26fdf2e67da892fc84858952df46b52e3f29f"}, "downloads": -1, "filename": "zstandard-0.5.1-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "4cfaaa685b95b127fb0bfc99f41e0f40", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 224811, "upload_time": "2016-11-13T03:57:06", "upload_time_iso_8601": "2016-11-13T03:57:06.180645Z", "url": "https://files.pythonhosted.org/packages/7c/2a/9027132963ef3be24f582a9a768bd28e76d80cf5947653fff6a5942af0af/zstandard-0.5.1-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d777ce5e3ee1a4c7dedc3ce77cc9519", "sha256": "afcf0653e82029eb9ba7550f6a015106b9e484a1b4ca8c06cc0a4e3c28046020"}, "downloads": -1, "filename": "zstandard-0.5.1-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "9d777ce5e3ee1a4c7dedc3ce77cc9519", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 260016, "upload_time": "2016-11-13T03:57:08", "upload_time_iso_8601": "2016-11-13T03:57:08.863718Z", "url": "https://files.pythonhosted.org/packages/7b/94/cf96ed6ad235794e8acfab8b4b5967f9bd1770cf42fe8007f165418bbc69/zstandard-0.5.1-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdcc107a2f07a78f7e95a0b834e6b5d1", "sha256": "54183be8c604e2fad50c266c1d7e160b85848564b58401a0f77237a614c3891c"}, "downloads": -1, "filename": "zstandard-0.5.1-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "bdcc107a2f07a78f7e95a0b834e6b5d1", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 224303, "upload_time": "2016-11-13T03:57:11", "upload_time_iso_8601": "2016-11-13T03:57:11.395338Z", "url": "https://files.pythonhosted.org/packages/a3/93/beefaf732847ffdc18151b8295b8bd8bafd59dfd8aca48083a773ace3b1e/zstandard-0.5.1-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1a64a151aa5f5e78e570a41d5e92c03", "sha256": "8b8ebd0fe4afc77cce504ea75d4751f8a2ddcebd387a099363b7d2dc32a3c62a"}, "downloads": -1, "filename": "zstandard-0.5.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "e1a64a151aa5f5e78e570a41d5e92c03", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 259404, "upload_time": "2016-11-13T03:57:14", "upload_time_iso_8601": "2016-11-13T03:57:14.354160Z", "url": "https://files.pythonhosted.org/packages/2a/0f/824011f6093e17c09b7ee897f0ad8ab1c36b0026d45f6eec4303ff7f0720/zstandard-0.5.1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcfa0f520d51939b1e9555c8877fae2e", "sha256": "8e06d72d899542a37815b13b57ce7de037357e14e935fbf546e5f688a239700e"}, "downloads": -1, "filename": "zstandard-0.5.1-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "dcfa0f520d51939b1e9555c8877fae2e", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 225641, "upload_time": "2016-11-13T03:57:17", "upload_time_iso_8601": "2016-11-13T03:57:17.445086Z", "url": "https://files.pythonhosted.org/packages/0b/15/6a06eb273e154171c332e8dcac757ba0d5489b3086c3995c2a626d52bdfb/zstandard-0.5.1-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9b4c36f96989982b2f1097a4601f6c0", "sha256": "25b312d6a527e8335ec118fdc72878ac34183b9d9aa02be6922d2cb78542f79d"}, "downloads": -1, "filename": "zstandard-0.5.1-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "b9b4c36f96989982b2f1097a4601f6c0", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 264449, "upload_time": "2016-11-13T03:57:19", "upload_time_iso_8601": "2016-11-13T03:57:19.969200Z", "url": "https://files.pythonhosted.org/packages/50/a6/39c8c86de0c9aea5919c5d3cc7063d5bb34b60f68fa0a19d9c50bf29eaf7/zstandard-0.5.1-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0a76a2e7a6f150f8e0be5cf2e7a512a", "sha256": "a090e78d71f92c8146b0277722b3dad1bc058aadd47b8342b59a7fa9eaec7479"}, "downloads": -1, "filename": "zstandard-0.5.1-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "e0a76a2e7a6f150f8e0be5cf2e7a512a", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 225622, "upload_time": "2016-11-13T03:57:23", "upload_time_iso_8601": "2016-11-13T03:57:23.736467Z", "url": "https://files.pythonhosted.org/packages/2b/c0/43687a085bd2ce932a8a97fe4d1f5a02949951f22216344c307f3cff2251/zstandard-0.5.1-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "868397738f5199a02cb79526c0e29e9b", "sha256": "859e546cb5fc47e75cfa1d5dc5bef242790482b5098658bd273b9e9ab19eb08f"}, "downloads": -1, "filename": "zstandard-0.5.1-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "868397738f5199a02cb79526c0e29e9b", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 264345, "upload_time": "2016-11-13T03:57:26", "upload_time_iso_8601": "2016-11-13T03:57:26.948608Z", "url": "https://files.pythonhosted.org/packages/34/0c/64bb573776aa45c3265f4f41e93959ee57d7ed6d4e0bc1a2ac4cf6f33951/zstandard-0.5.1-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62f66e3fb9002f3ce39f80a83373a927", "sha256": "3c0c1f964dbd940c04d38ea02f4cacc3316cd3f04147626ad7c1051e8c904c35"}, "downloads": -1, "filename": "zstandard-0.5.1-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "62f66e3fb9002f3ce39f80a83373a927", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 213695, "upload_time": "2016-11-13T03:57:29", "upload_time_iso_8601": "2016-11-13T03:57:29.499761Z", "url": "https://files.pythonhosted.org/packages/79/aa/42bbbe0a2cf80d1e0b261d4d3c698e788f4757b0e48eccd802178be1931c/zstandard-0.5.1-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b28b6df5d913f9ae7f18b3406bbdaee", "sha256": "c01688135fb6376dd866084deb2e637ce767581695a518819240e1276b772b75"}, "downloads": -1, "filename": "zstandard-0.5.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "3b28b6df5d913f9ae7f18b3406bbdaee", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 246164, "upload_time": "2016-11-13T03:57:32", "upload_time_iso_8601": "2016-11-13T03:57:32.563066Z", "url": "https://files.pythonhosted.org/packages/8a/39/e978fcff66a0a9f3efdd382bb5b9c2e29dca1069284d8a8e3a4aa90f23fb/zstandard-0.5.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e575f438c7559896dfefd10063b2c67c", "sha256": "abb0f2d5a3ca8116be9fc765aec069bc04638064d0215c37d496f52f77f9e800"}, "downloads": -1, "filename": "zstandard-0.5.1.tar.gz", "has_sig": false, "md5_digest": "e575f438c7559896dfefd10063b2c67c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167117, "upload_time": "2016-11-13T03:57:34", "upload_time_iso_8601": "2016-11-13T03:57:34.860608Z", "url": "https://files.pythonhosted.org/packages/b4/e1/0058d1bfd97a375fd98529c88af34f262ee19716149ded822c758edc98d0/zstandard-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "c2fb9787d7cb79648ce469ce7a172da7", "sha256": "fa9c8dc5e7daf48e1cf887da7f8e46b232a9960c741a1cabe5b461141140e0b6"}, "downloads": -1, "filename": "zstandard-0.5.2-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "c2fb9787d7cb79648ce469ce7a172da7", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 224810, "upload_time": "2016-11-13T05:06:43", "upload_time_iso_8601": "2016-11-13T05:06:43.842931Z", "url": "https://files.pythonhosted.org/packages/d3/de/beebacf55baaf69c0e025d533c9f5f66631bb808853099edc6831beabadc/zstandard-0.5.2-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fee8db434d96458279a7786975c3c0f", "sha256": "db88937d77d9eec89546c4a545c4230fea515196e3479247924fa7e3167263db"}, "downloads": -1, "filename": "zstandard-0.5.2-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "6fee8db434d96458279a7786975c3c0f", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 260014, "upload_time": "2016-11-13T05:06:47", "upload_time_iso_8601": "2016-11-13T05:06:47.234559Z", "url": "https://files.pythonhosted.org/packages/3c/da/38c26ba0fc20043bb901027c61d4513a5e2e5fe39325ae2d2befc5124b5e/zstandard-0.5.2-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61d116bcc88895faedecceb94c970f1f", "sha256": "fa647519b058bfdad5f7e98b2d2930c0933cdb2ef95106cce3940d957bd51293"}, "downloads": -1, "filename": "zstandard-0.5.2-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "61d116bcc88895faedecceb94c970f1f", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 224304, "upload_time": "2016-11-13T05:06:50", "upload_time_iso_8601": "2016-11-13T05:06:50.764995Z", "url": "https://files.pythonhosted.org/packages/bc/78/3770dea1bb72b6398ee7a0c90134500a1f199e4161f323d7169e4294df85/zstandard-0.5.2-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b9e43c1a4e84d52e3ab8e7c0ae59b49", "sha256": "2e988ac1a62c506f3e7d59cae9425fe4f12c9fcbf348ff5d2b27c4f7a5d1a501"}, "downloads": -1, "filename": "zstandard-0.5.2-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "1b9e43c1a4e84d52e3ab8e7c0ae59b49", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 259402, "upload_time": "2016-11-13T05:06:53", "upload_time_iso_8601": "2016-11-13T05:06:53.653151Z", "url": "https://files.pythonhosted.org/packages/64/ec/2133e757deef1e38251d510380ea30b3af93a586c9c4cf6b436c88ed495b/zstandard-0.5.2-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a34b984e0e1f90ca9f12337bc8c5026", "sha256": "757f3062d9c5f86296b87fe4518cdb26400d4d729483cf581ee3932a34ba67b6"}, "downloads": -1, "filename": "zstandard-0.5.2-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "9a34b984e0e1f90ca9f12337bc8c5026", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 225645, "upload_time": "2016-11-13T05:06:56", "upload_time_iso_8601": "2016-11-13T05:06:56.480421Z", "url": "https://files.pythonhosted.org/packages/c2/39/68dd43812bf45e0e9ba707119e697f54ffedccd1c2c4a990a5431b4f532e/zstandard-0.5.2-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f88ed9f755bd9f65c58386561e7c1a6", "sha256": "05ebcc0b93d85135fe25a4bd7a1f4f47bf093f32db0c83486a686e8535bc244a"}, "downloads": -1, "filename": "zstandard-0.5.2-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "3f88ed9f755bd9f65c58386561e7c1a6", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 264449, "upload_time": "2016-11-13T05:06:59", "upload_time_iso_8601": "2016-11-13T05:06:59.660817Z", "url": "https://files.pythonhosted.org/packages/7c/30/d9650fa10fe9c98723e5a4adc4f3c3755bd47eaf669cd7ab2982d7b741e9/zstandard-0.5.2-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fdbf9369ea9c7d6448e4def97fe828c", "sha256": "b78af87201e749bf9928d5afc76d8bcbfb1b4fb173a91fd7eaba2d6a1a0cbf63"}, "downloads": -1, "filename": "zstandard-0.5.2-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "8fdbf9369ea9c7d6448e4def97fe828c", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 225621, "upload_time": "2016-11-13T05:07:03", "upload_time_iso_8601": "2016-11-13T05:07:03.179708Z", "url": "https://files.pythonhosted.org/packages/6e/8c/6d6efda45240af7cc82d73c77287c2af6666ba5c5d97fb0e383e74f173d1/zstandard-0.5.2-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8f19212ce056886fe6ce53311d95d50", "sha256": "518f26b1a44c110ac656f78268d4190cc90401042c810acbc7c3bf106b65b32f"}, "downloads": -1, "filename": "zstandard-0.5.2-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "e8f19212ce056886fe6ce53311d95d50", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 264346, "upload_time": "2016-11-13T05:07:06", "upload_time_iso_8601": "2016-11-13T05:07:06.599605Z", "url": "https://files.pythonhosted.org/packages/1b/8e/f82dd61f6f2e3600b3d1d570d38affff6a0748ce381b7f38ab114a5e9a3d/zstandard-0.5.2-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1d92272a10a0fc1a2f8b2305f56a71f", "sha256": "c3dbb8dc1a7b59047e4cae04d24949b78ad94bde85edda347ed2441af71cd362"}, "downloads": -1, "filename": "zstandard-0.5.2-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "f1d92272a10a0fc1a2f8b2305f56a71f", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 213694, "upload_time": "2016-11-13T05:07:09", "upload_time_iso_8601": "2016-11-13T05:07:09.611839Z", "url": "https://files.pythonhosted.org/packages/2a/55/35f6daabece39980d182c3322ad1a5e7dcb544068d5286ed381cc63321b3/zstandard-0.5.2-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f3b07cd9b5469543ea61014223cf662", "sha256": "b0a062ee97ea22de58eabd68a5e818d151e6540627e23845262591aa5df440c0"}, "downloads": -1, "filename": "zstandard-0.5.2-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "4f3b07cd9b5469543ea61014223cf662", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 246165, "upload_time": "2016-11-13T05:07:12", "upload_time_iso_8601": "2016-11-13T05:07:12.285853Z", "url": "https://files.pythonhosted.org/packages/08/3d/40848c3923acf160b53f6c12a746ff859f7da356fd41d5260e6354668d39/zstandard-0.5.2-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff4701ad4fdef9269ec64637803f97b8", "sha256": "9dc31efd3b07f87919a174174cc6004ac6b20219419c1efa7e782d0774d9407b"}, "downloads": -1, "filename": "zstandard-0.5.2.tar.gz", "has_sig": false, "md5_digest": "ff4701ad4fdef9269ec64637803f97b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 187754, "upload_time": "2016-11-13T05:07:15", "upload_time_iso_8601": "2016-11-13T05:07:15.336344Z", "url": "https://files.pythonhosted.org/packages/69/ca/1173799ad853adf3b7aee12db023b13cd32146ca3c7e2ac113bebe6790f8/zstandard-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "b55d77f841da83ae8a19ffa200b83185", "sha256": "8c0b4b0aa29c56212af2b873e17338e5537459ed63f2fb269c6cb3c547ad3233"}, "downloads": -1, "filename": "zstandard-0.6.0-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "b55d77f841da83ae8a19ffa200b83185", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 225472, "upload_time": "2017-01-15T03:29:37", "upload_time_iso_8601": "2017-01-15T03:29:37.023229Z", "url": "https://files.pythonhosted.org/packages/13/49/ac1bedd4f3a7463b1ddadf7a87bbc743d41e1e5fd165f667ea0bbba5ac15/zstandard-0.6.0-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e12830eb36c4c1fddd73515a4ef8a04d", "sha256": "581fdaf5cc64a300f1683fa1cba8bf23b3dd7c5a432e5375c80b91ca20aa3971"}, "downloads": -1, "filename": "zstandard-0.6.0-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "e12830eb36c4c1fddd73515a4ef8a04d", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 264596, "upload_time": "2017-01-15T03:29:38", "upload_time_iso_8601": "2017-01-15T03:29:38.737352Z", "url": "https://files.pythonhosted.org/packages/17/65/fc1b197a96e066cef1c55379a4f5e682a609ff88c608d3a9c0493eab74d9/zstandard-0.6.0-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76082fe9b869f2a917969c99f9b86f10", "sha256": "1e5277fdfda505ff3feccec844f0b0863a2e0a65675ec44b430f80788d017b58"}, "downloads": -1, "filename": "zstandard-0.6.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "76082fe9b869f2a917969c99f9b86f10", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 224965, "upload_time": "2017-01-15T03:29:40", "upload_time_iso_8601": "2017-01-15T03:29:40.132470Z", "url": "https://files.pythonhosted.org/packages/15/2d/7a3fb9fb99213749e13c932856fcc0ecd55e38aaf8743d0653e74ebc35dd/zstandard-0.6.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6600ac480b4d872a41a61f54b0bb1e7a", "sha256": "a3124acb59522f5b9ec2eaa9182d375265d939606aa81e3da58e0bf9193cc643"}, "downloads": -1, "filename": "zstandard-0.6.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "6600ac480b4d872a41a61f54b0bb1e7a", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 263969, "upload_time": "2017-01-15T03:29:41", "upload_time_iso_8601": "2017-01-15T03:29:41.808145Z", "url": "https://files.pythonhosted.org/packages/d3/74/51fe7fd7b105103e085cd64be60b30ec66174543a9e3d5bd16b42cd5cc69/zstandard-0.6.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "320e6a9253b1877c51d9f7a81a90617f", "sha256": "8ac7acb98ac2d20be20dffc843b7eed2f353d87f9cf94c2d6cf06dfb93f76ae7"}, "downloads": -1, "filename": "zstandard-0.6.0-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "320e6a9253b1877c51d9f7a81a90617f", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 227415, "upload_time": "2017-01-15T03:29:43", "upload_time_iso_8601": "2017-01-15T03:29:43.702731Z", "url": "https://files.pythonhosted.org/packages/7c/32/791643b3925b0cd54f6c1a8126e85861257f865c73800a6d7c347f241aad/zstandard-0.6.0-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc3c1781477d9e8afe6f71713610c70b", "sha256": "311ac45c78ba9533747debf1451c58091b5eb701797de6c6168faf7a5d77808e"}, "downloads": -1, "filename": "zstandard-0.6.0-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "fc3c1781477d9e8afe6f71713610c70b", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 269319, "upload_time": "2017-01-15T03:29:45", "upload_time_iso_8601": "2017-01-15T03:29:45.784459Z", "url": "https://files.pythonhosted.org/packages/d6/89/598f951a4eb92e8243605f2f73c3b8e411c5be1a5e650699da0578d9a778/zstandard-0.6.0-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad245776f2fdf7233d3095d556bdf19b", "sha256": "4f65fb614dcec8bbe2fe01f1bb47d51efcdb647d991a62e869ebf0ef7feb9734"}, "downloads": -1, "filename": "zstandard-0.6.0-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "ad245776f2fdf7233d3095d556bdf19b", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 227375, "upload_time": "2017-01-15T03:29:47", "upload_time_iso_8601": "2017-01-15T03:29:47.736943Z", "url": "https://files.pythonhosted.org/packages/c2/60/5270ab84090ce422ce7fd4877f3e45d9a92f9d95ad4928d50518bf00e575/zstandard-0.6.0-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5710d7b1ede388556e334940dfa7db18", "sha256": "6f515a258e3880940e20971d356dd9f2047c3675a85a5b6c456c7d98f30e2128"}, "downloads": -1, "filename": "zstandard-0.6.0-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "5710d7b1ede388556e334940dfa7db18", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 269239, "upload_time": "2017-01-15T03:29:49", "upload_time_iso_8601": "2017-01-15T03:29:49.275877Z", "url": "https://files.pythonhosted.org/packages/ea/0b/bb923f592d6afc6ca91224eebbf86de624cf8764f69fcfeee96bd47f3be6/zstandard-0.6.0-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7954849cf60e71e426739e89c91e37fd", "sha256": "266239a135ef42ad22c4f9876560baf9287f9d5cd48513b1f2f3a6dd23fae246"}, "downloads": -1, "filename": "zstandard-0.6.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "7954849cf60e71e426739e89c91e37fd", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 226795, "upload_time": "2017-01-15T03:29:51", "upload_time_iso_8601": "2017-01-15T03:29:51.065626Z", "url": "https://files.pythonhosted.org/packages/07/30/1286a34d7d9ace9c6fbaccb10adf748b851b0887b3a8e6e438a2e111f2ec/zstandard-0.6.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ee5137447e51f957f5bfdd95f154986", "sha256": "b456e255ab77ba86124e225ea33deabd27f21356539963134bc27f3075d06217"}, "downloads": -1, "filename": "zstandard-0.6.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "0ee5137447e51f957f5bfdd95f154986", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 262680, "upload_time": "2017-01-15T03:29:52", "upload_time_iso_8601": "2017-01-15T03:29:52.536146Z", "url": "https://files.pythonhosted.org/packages/8c/dd/d2fc41c4032608628a1962732bf545d6bdb07ae3dac8eef39be5f91f8699/zstandard-0.6.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0a7efa8872b700d1680d430f9f434c1", "sha256": "8ce323379dd0d419aec4ed5e8a4ecc270e3ca90f0a60aaac6d356b9691e450d9"}, "downloads": -1, "filename": "zstandard-0.6.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "d0a7efa8872b700d1680d430f9f434c1", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 226794, "upload_time": "2017-01-15T03:29:54", "upload_time_iso_8601": "2017-01-15T03:29:54.369577Z", "url": "https://files.pythonhosted.org/packages/f3/ad/55bb85d6504b94a4d4dd324f18b0ba58289fb61b6de3dc16f31c80d409e8/zstandard-0.6.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc933bcb9277bd0038c42c609b25fd26", "sha256": "f262b4beaf0f7c246e7dc678aeeefd17dd711282eab728634cfcbb56dfc28188"}, "downloads": -1, "filename": "zstandard-0.6.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "dc933bcb9277bd0038c42c609b25fd26", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 262673, "upload_time": "2017-01-15T03:29:55", "upload_time_iso_8601": "2017-01-15T03:29:55.980124Z", "url": "https://files.pythonhosted.org/packages/99/dd/0b97b4f3ec162140bf70b9b8e86f4c6ab5f1efd5e9addad69aabf9ac5038/zstandard-0.6.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "776df5996fae5ea2faa1587672bac64a", "sha256": "a97a01f8eae5b6f7a23336c82981c07d3b8af5eaca4ef7b1f0439c0463eb6bbd"}, "downloads": -1, "filename": "zstandard-0.6.0.tar.gz", "has_sig": false, "md5_digest": "776df5996fae5ea2faa1587672bac64a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 398524, "upload_time": "2017-01-15T03:00:32", "upload_time_iso_8601": "2017-01-15T03:00:32.468062Z", "url": "https://files.pythonhosted.org/packages/9d/7c/0b0914eedd2a2b4c3d874b5a48b4def8bdb8d0c1aa867a2863d63839a3c8/zstandard-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "203f2a9a46d3eeecbfedb75d9c180b37", "sha256": "175d5f45ed1ac235e5679d2fb222c962dba3cb219cdc71c44d8d9d13cc3b0e97"}, "downloads": -1, "filename": "zstandard-0.7.0-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "203f2a9a46d3eeecbfedb75d9c180b37", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 240378, "upload_time": "2017-02-08T07:19:28", "upload_time_iso_8601": "2017-02-08T07:19:28.092853Z", "url": "https://files.pythonhosted.org/packages/ae/38/3b9b9b5dfc2db8491a3029ad35dafee51d8b2853f95978df85faa261bf62/zstandard-0.7.0-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa24b4ba804d014219c09fbf91ab3410", "sha256": "a8836f26107ac03e1f62ce6eb87e64b223744cf6d1f3f4af92365f8c5c70eeac"}, "downloads": -1, "filename": "zstandard-0.7.0-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "fa24b4ba804d014219c09fbf91ab3410", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 285901, "upload_time": "2017-02-08T07:19:31", "upload_time_iso_8601": "2017-02-08T07:19:31.278281Z", "url": "https://files.pythonhosted.org/packages/bd/83/f415d89e36e7181e9efbd46e4f154e902e456d7432e3186d9f5a56eccf72/zstandard-0.7.0-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4beb881c1b5af25a85bd978c969b181f", "sha256": "1b53836562d88a6cde5201c82e0d9217d4c891aa2fe99995825826b50674cb4c"}, "downloads": -1, "filename": "zstandard-0.7.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "4beb881c1b5af25a85bd978c969b181f", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 239885, "upload_time": "2017-02-08T07:19:32", "upload_time_iso_8601": "2017-02-08T07:19:32.836018Z", "url": "https://files.pythonhosted.org/packages/a5/ac/b98fc7a54e5a926c1775c7eddb89cc986b20dd123a63dfd7b4dcdf5e5e67/zstandard-0.7.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14fa99777a0db62c6b7590ff0d32c97c", "sha256": "1d7f20532b9a19942ce4ca3ccba9060279adea906bee8f5fdaf80b8357dc1b02"}, "downloads": -1, "filename": "zstandard-0.7.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "14fa99777a0db62c6b7590ff0d32c97c", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 285379, "upload_time": "2017-02-08T07:19:34", "upload_time_iso_8601": "2017-02-08T07:19:34.420681Z", "url": "https://files.pythonhosted.org/packages/a6/d2/d3407e8bbec12c25ac5e1a939122fc77d7fc3377e3951c818a6792f2a98c/zstandard-0.7.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7ebc74db9fbc8e1f02ad040085e474a", "sha256": "629d00bfa0293ef3216438ccf28d1a1544f3c90fdd3f3e9da53719384ca5c8e2"}, "downloads": -1, "filename": "zstandard-0.7.0-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "c7ebc74db9fbc8e1f02ad040085e474a", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 244256, "upload_time": "2017-02-08T07:19:35", "upload_time_iso_8601": "2017-02-08T07:19:35.966537Z", "url": "https://files.pythonhosted.org/packages/ca/4d/523d2c142198cc141f0f6157c4350ac4ed24704d98482ddadce4e090ac1c/zstandard-0.7.0-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2682564a6985978c265aed7c9144fab0", "sha256": "07458893b1805287f4d8d60bfca3bef338ce9884f22885b71377f1e8e98dc932"}, "downloads": -1, "filename": "zstandard-0.7.0-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "2682564a6985978c265aed7c9144fab0", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 289287, "upload_time": "2017-02-08T07:19:37", "upload_time_iso_8601": "2017-02-08T07:19:37.454099Z", "url": "https://files.pythonhosted.org/packages/21/20/8cf1eaf09f62f957dd57957bab5d1cf47181e566c1020c13d3135ace186c/zstandard-0.7.0-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4c539ec696ffd2c358523a3fb92cb1a", "sha256": "fb6fa974803506fa17e83b0ea32dd3d6b872f4c29d44f6f4b80a773b10ad7915"}, "downloads": -1, "filename": "zstandard-0.7.0-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "b4c539ec696ffd2c358523a3fb92cb1a", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 244241, "upload_time": "2017-02-08T07:19:38", "upload_time_iso_8601": "2017-02-08T07:19:38.940826Z", "url": "https://files.pythonhosted.org/packages/4c/ba/04362e8dbef9b3bcb009ae5db847007a146cb185b3ce41bd2aee3fefc43b/zstandard-0.7.0-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9db9118ae3217cd620eacd0647f32b49", "sha256": "43014359d6799446bc6ad5f46ebf6c43484bfebd616e9366f12f61010a62aa83"}, "downloads": -1, "filename": "zstandard-0.7.0-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "9db9118ae3217cd620eacd0647f32b49", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 289221, "upload_time": "2017-02-08T07:19:40", "upload_time_iso_8601": "2017-02-08T07:19:40.679676Z", "url": "https://files.pythonhosted.org/packages/2a/2b/bb2d88a557bc3fd870005d0808589ef322dcd389427b5c75a575e39d62b0/zstandard-0.7.0-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb30e9b7a2cde877a02270f241b71f2a", "sha256": "b877df870edda29f65ede2b2a080ea18d0a47e0a8e94257a18ee1c16981dcbe1"}, "downloads": -1, "filename": "zstandard-0.7.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "fb30e9b7a2cde877a02270f241b71f2a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 257870, "upload_time": "2017-02-08T07:19:42", "upload_time_iso_8601": "2017-02-08T07:19:42.405929Z", "url": "https://files.pythonhosted.org/packages/56/73/724d165cef23aca3c9c788181e34a19f653a9c20a53ae4c46351765f9ae3/zstandard-0.7.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3915fc9f9f6cdd4e7da5ec078a4f7a28", "sha256": "b2d25e7dc6de5b40711b53165e7b7f015947704529ba80a919eb642ea4080b00"}, "downloads": -1, "filename": "zstandard-0.7.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "3915fc9f9f6cdd4e7da5ec078a4f7a28", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 300640, "upload_time": "2017-02-08T07:19:44", "upload_time_iso_8601": "2017-02-08T07:19:44.145501Z", "url": "https://files.pythonhosted.org/packages/dd/85/2f8d7de2e9ee68b278397f1859376908b820a67f77aace46a1a3d9f26d99/zstandard-0.7.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ab4b19d9fe5b4a63b1a8840b9fe1757", "sha256": "6acad62de9bd07378b4525ecd4c93241b039874d9495abe7c14d63ec3769cf10"}, "downloads": -1, "filename": "zstandard-0.7.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "2ab4b19d9fe5b4a63b1a8840b9fe1757", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 257863, "upload_time": "2017-02-08T07:19:46", "upload_time_iso_8601": "2017-02-08T07:19:46.357034Z", "url": "https://files.pythonhosted.org/packages/12/be/c604be823ea4640b93c377c6687fa065714f337106df701843f73369430b/zstandard-0.7.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea49be208971e2c17e9e6af22339689c", "sha256": "3ba62346a65f7439c60aeab76c277c7b397c54d78c028d1f96ea1053bf97231f"}, "downloads": -1, "filename": "zstandard-0.7.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "ea49be208971e2c17e9e6af22339689c", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 300642, "upload_time": "2017-02-08T07:19:48", "upload_time_iso_8601": "2017-02-08T07:19:48.546607Z", "url": "https://files.pythonhosted.org/packages/40/5f/c480539e0b8e13cb2c8b3c45acd4311663110ce534a1d7f74ee3169758b7/zstandard-0.7.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c95327cd640711132e16a8281770225", "sha256": "29f2babe5828b257a793e077543150e64ab944b9f3cc071fb5cbb6892243645a"}, "downloads": -1, "filename": "zstandard-0.7.0.tar.gz", "has_sig": false, "md5_digest": "0c95327cd640711132e16a8281770225", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 427288, "upload_time": "2017-02-08T07:01:39", "upload_time_iso_8601": "2017-02-08T07:01:39.836255Z", "url": "https://files.pythonhosted.org/packages/b2/d1/b86068d710f25c24bf4f8b3efb0c86f528bfe3d2a1e469526de17909acbc/zstandard-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "90adda5e2d00e3468957edae3a94e3a8", "sha256": "c4547b40cd4ace38a8e3ccfd0500c501abe8ffde6df459c01855759d38705169"}, "downloads": -1, "filename": "zstandard-0.8.0-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "90adda5e2d00e3468957edae3a94e3a8", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 269694, "upload_time": "2017-03-09T01:49:56", "upload_time_iso_8601": "2017-03-09T01:49:56.607684Z", "url": "https://files.pythonhosted.org/packages/5f/a3/34bdf9764ac88d47e1e8a1a49ef63ab6948a59c81fd6daac4c1539d638e8/zstandard-0.8.0-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56671a93a4b2a381587ccf32257bae10", "sha256": "f4f4891dfc65fd5cd71fa0c3b271fc0241b01a09fc7f87eb84d3e38b83a7927a"}, "downloads": -1, "filename": "zstandard-0.8.0-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "56671a93a4b2a381587ccf32257bae10", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 319458, "upload_time": "2017-03-09T01:49:58", "upload_time_iso_8601": "2017-03-09T01:49:58.623295Z", "url": "https://files.pythonhosted.org/packages/9a/cd/39104196b17a4053e06a86c2213e96f9960a74eb9072b844c8cb05a56f8a/zstandard-0.8.0-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "272f4f4fdc405303f884f8223dc6ebcb", "sha256": "30fcecdd1f0ae90f67e6f15091cf6ff5aa6fbe735029c18324ce07c807a5b916"}, "downloads": -1, "filename": "zstandard-0.8.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "272f4f4fdc405303f884f8223dc6ebcb", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 269223, "upload_time": "2017-03-09T01:50:01", "upload_time_iso_8601": "2017-03-09T01:50:01.217994Z", "url": "https://files.pythonhosted.org/packages/3e/6a/b7905d19b0f7e0bd132e358d4edacc0b63947331edfd52c97183288b6638/zstandard-0.8.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62c0ba39b6fbac5b436f307b6b0f495d", "sha256": "5f9e6abf8331b96a48f24885e1b31a9a8cbd462f3d7da504814266601e4cbf8b"}, "downloads": -1, "filename": "zstandard-0.8.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "62c0ba39b6fbac5b436f307b6b0f495d", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 318879, "upload_time": "2017-03-09T01:50:03", "upload_time_iso_8601": "2017-03-09T01:50:03.744277Z", "url": "https://files.pythonhosted.org/packages/63/57/b3371ce3407868d0507831c3f9ca71cb5d7e5051735e2f5f9f7290abfdb3/zstandard-0.8.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55b9e37ee3199c57560fea1f42336d0e", "sha256": "2e33bfd4cca546cb0c820763989ff894e7cb37cb49466a6665732159560655c7"}, "downloads": -1, "filename": "zstandard-0.8.0-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "55b9e37ee3199c57560fea1f42336d0e", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 273870, "upload_time": "2017-03-09T01:50:05", "upload_time_iso_8601": "2017-03-09T01:50:05.595934Z", "url": "https://files.pythonhosted.org/packages/36/04/c035b92db2a1ab785abda377cfad9c4b0bedf644a1f3bf07e0c0b43461af/zstandard-0.8.0-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3489c9e4044bba87ba8057e9548b33e", "sha256": "309677a8e33dd161b274d9d49456bb464fbd7ecadf2cd2ad4e59ace418e64b98"}, "downloads": -1, "filename": "zstandard-0.8.0-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "e3489c9e4044bba87ba8057e9548b33e", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 323020, "upload_time": "2017-03-09T01:50:07", "upload_time_iso_8601": "2017-03-09T01:50:07.911908Z", "url": "https://files.pythonhosted.org/packages/80/60/671dc0e6496c1f12d9b39bba0afe5b300968dcf1d6ab0fadc648c1ad634f/zstandard-0.8.0-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26f8c275f2ebee6e726963d5d3dfd609", "sha256": "c69395dfadbf7c3650544c0549dea20e0dcdd78f5147a1e026486de5f3d50f08"}, "downloads": -1, "filename": "zstandard-0.8.0-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "26f8c275f2ebee6e726963d5d3dfd609", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 273819, "upload_time": "2017-03-09T01:50:10", "upload_time_iso_8601": "2017-03-09T01:50:10.240172Z", "url": "https://files.pythonhosted.org/packages/f7/db/048450bd4c225fb725725abda10a66049afef32b61d477a6b91a0fdd6e14/zstandard-0.8.0-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a11fb5c160c08fbbc9eb8f7b69d14310", "sha256": "1116f8988e122fa0c22a38650a7b0b947e17290abae6fd2fee759234d100026a"}, "downloads": -1, "filename": "zstandard-0.8.0-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "a11fb5c160c08fbbc9eb8f7b69d14310", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 322919, "upload_time": "2017-03-09T01:50:12", "upload_time_iso_8601": "2017-03-09T01:50:12.250418Z", "url": "https://files.pythonhosted.org/packages/4e/10/bfba4f3005a0f7b709af74eeff0aa0413c573babb85af6c0e7a4e3c65eab/zstandard-0.8.0-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30d949312955bb6862cd5285e3cc027d", "sha256": "a9bc45ee43437e5d9d79dad4dbff7e31ef95cf410a6d44409591df3e1584f4a4"}, "downloads": -1, "filename": "zstandard-0.8.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "30d949312955bb6862cd5285e3cc027d", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 289311, "upload_time": "2017-03-09T01:50:14", "upload_time_iso_8601": "2017-03-09T01:50:14.203440Z", "url": "https://files.pythonhosted.org/packages/05/38/3002a3dbe37fc45b69eb41c49a71386ef362905f6bbe19e66d204bdd98fb/zstandard-0.8.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3aa9192f48f527c821005916d8f98d26", "sha256": "353e6382e5a996fc5e989e4b2f94b935cf8def9ff9826056459ce9d376e072e4"}, "downloads": -1, "filename": "zstandard-0.8.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "3aa9192f48f527c821005916d8f98d26", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 337778, "upload_time": "2017-03-09T01:50:16", "upload_time_iso_8601": "2017-03-09T01:50:16.214040Z", "url": "https://files.pythonhosted.org/packages/29/fc/1f6955aa6dc95bb396ec8ce17ee2de664364a2f377f5d6c5f35220876c95/zstandard-0.8.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58797d59b877775ece8f3c64fdf23774", "sha256": "19bb34bf6d98afa1a0eb2dbbac78129af9401c979ce154a8e675193a852d99db"}, "downloads": -1, "filename": "zstandard-0.8.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "58797d59b877775ece8f3c64fdf23774", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 289314, "upload_time": "2017-03-09T01:50:18", "upload_time_iso_8601": "2017-03-09T01:50:18.022815Z", "url": "https://files.pythonhosted.org/packages/d0/74/0e63f1722fbf1a3ac26588843d1011ef3127db6f81e23a713bb55618cd39/zstandard-0.8.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3cc72fa202cfc4620cb7fd60ee1d931", "sha256": "c5b40604e32790339578c2c81db2583889f5d9f01fae4c4737f2739981b7d457"}, "downloads": -1, "filename": "zstandard-0.8.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "a3cc72fa202cfc4620cb7fd60ee1d931", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 337775, "upload_time": "2017-03-09T01:50:19", "upload_time_iso_8601": "2017-03-09T01:50:19.938169Z", "url": "https://files.pythonhosted.org/packages/f5/ca/7800673e4c45140dab5905b78d15e2c3cbe7c8320d187522a6b65dbd14d2/zstandard-0.8.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b28212c36510f987e4da00e8604aac99", "sha256": "455751752f9d185b169e45bfd4a437d9473ef944ddd7313c8f15bdd466cd8d6c"}, "downloads": -1, "filename": "zstandard-0.8.0.tar.gz", "has_sig": false, "md5_digest": "b28212c36510f987e4da00e8604aac99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 463794, "upload_time": "2017-03-09T01:49:40", "upload_time_iso_8601": "2017-03-09T01:49:40.542316Z", "url": "https://files.pythonhosted.org/packages/7b/75/ffecd0a26fd347bf1fcdf290714a614c1a86cc1fc0010e43f73c5e399914/zstandard-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "f1250556851546549b4dd6aeddb2978b", "sha256": "86b55ff7faaac4682c7e3ffface667c1180d71936d93fca574e835fa3e24672e"}, "downloads": -1, "filename": "zstandard-0.8.1-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "f1250556851546549b4dd6aeddb2978b", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 269694, "upload_time": "2017-04-08T23:55:21", "upload_time_iso_8601": "2017-04-08T23:55:21.667287Z", "url": "https://files.pythonhosted.org/packages/ec/d7/f48300078f52ed7895f2c62b512624adade9a309cac7b5393dc9e3a5bc69/zstandard-0.8.1-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ff604add1f8a6a752005ee5a2b3dcd6", "sha256": "7eed815a8ade917393db420a5b4913cbf5f741a164807e493d24deb3a67440df"}, "downloads": -1, "filename": "zstandard-0.8.1-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "4ff604add1f8a6a752005ee5a2b3dcd6", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 319462, "upload_time": "2017-04-08T23:55:25", "upload_time_iso_8601": "2017-04-08T23:55:25.172108Z", "url": "https://files.pythonhosted.org/packages/3e/fd/3919638a9a22b0c9109ff4585218c232efa6fb8e85c444c9e692d6c68c6a/zstandard-0.8.1-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7495378291fa04bec108b57252970b29", "sha256": "0cc9c79a704613a1b2be1f64a0a686752c6794a5d969ffa494d666ed2996683e"}, "downloads": -1, "filename": "zstandard-0.8.1-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "7495378291fa04bec108b57252970b29", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 269221, "upload_time": "2017-04-08T23:55:28", "upload_time_iso_8601": "2017-04-08T23:55:28.086762Z", "url": "https://files.pythonhosted.org/packages/5d/17/0aa211e944be03ef1acd3ed3be379b9c86645605ae9c781c6d9187584f1e/zstandard-0.8.1-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00ec9b846632a49271835d63da1adc5d", "sha256": "175c1b3e984d79ba44ca2674110bda46490f4f7399edff954e59cdb3d8b7856a"}, "downloads": -1, "filename": "zstandard-0.8.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "00ec9b846632a49271835d63da1adc5d", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 318882, "upload_time": "2017-04-08T23:55:30", "upload_time_iso_8601": "2017-04-08T23:55:30.917535Z", "url": "https://files.pythonhosted.org/packages/63/14/1f104373ef4c87b019f990d5b8132bbe48237fc63d19827e4dce2898ccf4/zstandard-0.8.1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69544e8ad5ad3b9b6ee1f7aadffd6f26", "sha256": "672c1741af022017f77ff1248abdee57f68d6099e3159d66a062b8b311353365"}, "downloads": -1, "filename": "zstandard-0.8.1-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "69544e8ad5ad3b9b6ee1f7aadffd6f26", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 273865, "upload_time": "2017-04-08T23:55:33", "upload_time_iso_8601": "2017-04-08T23:55:33.592025Z", "url": "https://files.pythonhosted.org/packages/c5/bc/0dc6c25e336d7a77919fcd21e29ed603c2c67250e2f67b835bf8c1e807e9/zstandard-0.8.1-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07bde8ec86bd32744e2abe02a76cbc59", "sha256": "4f60c561e17c1072f8731de3b06029680dcd6f4c6403615c487ed0bcba0d1d24"}, "downloads": -1, "filename": "zstandard-0.8.1-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "07bde8ec86bd32744e2abe02a76cbc59", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 323020, "upload_time": "2017-04-08T23:55:35", "upload_time_iso_8601": "2017-04-08T23:55:35.832043Z", "url": "https://files.pythonhosted.org/packages/61/26/f93f0ab3f0e5166af4b192f78d21dbb24a6ad552eee13d5b08193c624655/zstandard-0.8.1-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d6e844de589924925488bcea7a0b4eb", "sha256": "c3b8a111ad20f028883e96a2b49ce027afe31a88850112db207d3d5dacb0f622"}, "downloads": -1, "filename": "zstandard-0.8.1-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "9d6e844de589924925488bcea7a0b4eb", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 273818, "upload_time": "2017-04-08T23:55:38", "upload_time_iso_8601": "2017-04-08T23:55:38.253467Z", "url": "https://files.pythonhosted.org/packages/91/8d/d84144f91c2d9a4db8c2d5abbf2c675502fdbddecdd6887f74f441e005d6/zstandard-0.8.1-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "501eb7b471587f81bcf32d13be111d0c", "sha256": "d386623dd4e667f8da8efa69ac5a3bf28efa320e8b4a48cb9bcfc7eb5f51c3c8"}, "downloads": -1, "filename": "zstandard-0.8.1-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "501eb7b471587f81bcf32d13be111d0c", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 322918, "upload_time": "2017-04-08T23:55:40", "upload_time_iso_8601": "2017-04-08T23:55:40.945156Z", "url": "https://files.pythonhosted.org/packages/61/90/e00d0d8b29b17f00d8f3a354823a40373b74204752a4070bea57bf26b9a7/zstandard-0.8.1-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99d432fcb106b12aacd512769bde0798", "sha256": "1d468404eed08667a3cf060f7b79ab8e7d3e46758ab79f9520971a392e49dbae"}, "downloads": -1, "filename": "zstandard-0.8.1-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "99d432fcb106b12aacd512769bde0798", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 289311, "upload_time": "2017-04-08T23:55:43", "upload_time_iso_8601": "2017-04-08T23:55:43.181030Z", "url": "https://files.pythonhosted.org/packages/04/c1/6c886a639915b251c29bf98171f3b1178511ced26c3086a625f1c1e2dc6b/zstandard-0.8.1-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2346ddabe2fa2f661922b31d0c153e2d", "sha256": "3e0a8fa28657453e62855bba79e25d09d85dad84d4f16264d17e44db84944f7c"}, "downloads": -1, "filename": "zstandard-0.8.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "2346ddabe2fa2f661922b31d0c153e2d", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 337778, "upload_time": "2017-04-08T23:55:46", "upload_time_iso_8601": "2017-04-08T23:55:46.164497Z", "url": "https://files.pythonhosted.org/packages/8c/08/dbd2a0c4535805c6271f5dc4cc4886ddda8150bf9627bf1a23a1dd2b88fa/zstandard-0.8.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af445bbeeb47f9f2ec7a491d658011c5", "sha256": "45c8ed764c3ba38a88d1e16649167b8f188d8fe4824687ea645662c0fa311372"}, "downloads": -1, "filename": "zstandard-0.8.1-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "af445bbeeb47f9f2ec7a491d658011c5", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 289312, "upload_time": "2017-04-08T23:55:48", "upload_time_iso_8601": "2017-04-08T23:55:48.868663Z", "url": "https://files.pythonhosted.org/packages/df/bf/a207a4b45dd97ce99487dc79a8fedcac8e9c9dea63bf7e09ebd8126edae4/zstandard-0.8.1-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14605b73fbbc31e686b0527d1e7fe5a2", "sha256": "09bb81b4deee9473c311eaa2d18fef8d564a633f3ead38cd480f60503eec39d3"}, "downloads": -1, "filename": "zstandard-0.8.1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "14605b73fbbc31e686b0527d1e7fe5a2", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 337776, "upload_time": "2017-04-08T23:55:52", "upload_time_iso_8601": "2017-04-08T23:55:52.394369Z", "url": "https://files.pythonhosted.org/packages/ff/ba/815495aa9a302c3651302abc2f928f9c71aeae2b6b7c85bf9c61f184e6a0/zstandard-0.8.1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f97ba5cb2929f70468b32c7c5c8e7ab4", "sha256": "d8df3b40fed5c0a5d15b36e698b0286323170086b2034e5d52465fa3c1ce2429"}, "downloads": -1, "filename": "zstandard-0.8.1.tar.gz", "has_sig": false, "md5_digest": "f97ba5cb2929f70468b32c7c5c8e7ab4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 463785, "upload_time": "2017-04-08T23:55:11", "upload_time_iso_8601": "2017-04-08T23:55:11.509806Z", "url": "https://files.pythonhosted.org/packages/92/17/84ce378990e15d856ffa976e46277a7b19210db530234d2f624449510959/zstandard-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "327f1fc52720729f95552dd2d1833c27", "sha256": "83b1f900490bbab9db14df95bb5e09755b6913a37a2c2a8671247f2f7f075402"}, "downloads": -1, "filename": "zstandard-0.8.2-cp26-cp26m-win32.whl", "has_sig": false, "md5_digest": "327f1fc52720729f95552dd2d1833c27", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 269758, "upload_time": "2018-03-18T00:56:20", "upload_time_iso_8601": "2018-03-18T00:56:20.510332Z", "url": "https://files.pythonhosted.org/packages/f2/45/8cb8f527491e1a78c98589b0ba903eb31d04c0d2b72d21de6d1f52a07db6/zstandard-0.8.2-cp26-cp26m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56bb52854e6d8a205f5481b917bce9d5", "sha256": "f4fccb3dd9c8c0c10fd0d3483651af9307c7c132b11555faf4c4b1274488702a"}, "downloads": -1, "filename": "zstandard-0.8.2-cp26-cp26m-win_amd64.whl", "has_sig": false, "md5_digest": "56bb52854e6d8a205f5481b917bce9d5", "packagetype": "bdist_wheel", "python_version": "cp26", "requires_python": null, "size": 319533, "upload_time": "2018-03-18T00:56:22", "upload_time_iso_8601": "2018-03-18T00:56:22.593582Z", "url": "https://files.pythonhosted.org/packages/6f/a9/65f6b9f228e486644351f86ab33a87f6ed046f6bf468c8ea5fcfe240d88f/zstandard-0.8.2-cp26-cp26m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4bef09bf45d7866ef9cd5fede592665", "sha256": "1306803a4f116d82583d3639587c8cda120450f63fee4f9f7eb7be9a6be2b9aa"}, "downloads": -1, "filename": "zstandard-0.8.2-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "a4bef09bf45d7866ef9cd5fede592665", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 269265, "upload_time": "2018-03-18T00:56:24", "upload_time_iso_8601": "2018-03-18T00:56:24.987615Z", "url": "https://files.pythonhosted.org/packages/20/0b/c08efb9b9bcefaf17907350a81ad4249aea90c6904eb8af3d234a52e6489/zstandard-0.8.2-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e09b8a054575782cda538942745737b2", "sha256": "5830beb3c4d1bd88dc4ff6d9b467581716a7533ddb68786f7b2bae9942e2c22f"}, "downloads": -1, "filename": "zstandard-0.8.2-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "e09b8a054575782cda538942745737b2", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 318899, "upload_time": "2018-03-18T00:56:26", "upload_time_iso_8601": "2018-03-18T00:56:26.871925Z", "url": "https://files.pythonhosted.org/packages/d4/dc/5cd6a851a4bf755456c681f18d1b572c0e289196c5ae5e2d4c1909eba2ca/zstandard-0.8.2-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46c2d0d890f831483d0a5ffd4b8f0d34", "sha256": "9d3ef8c4478dd81c1a82103f761ffc38c25a7faca6d4fdc50053883f2f50d937"}, "downloads": -1, "filename": "zstandard-0.8.2-cp33-cp33m-win32.whl", "has_sig": false, "md5_digest": "46c2d0d890f831483d0a5ffd4b8f0d34", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 273934, "upload_time": "2018-03-18T00:56:28", "upload_time_iso_8601": "2018-03-18T00:56:28.659785Z", "url": "https://files.pythonhosted.org/packages/47/b1/19e5cfdd18d884ccaf5df6c05862f3166ecf2504c0750641f870e7684518/zstandard-0.8.2-cp33-cp33m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98ccb15f28a58377695762eda9913236", "sha256": "969aefc38484b2f4e91f0bf58c5a0106c31167f644f14136a9b3d7bee1735229"}, "downloads": -1, "filename": "zstandard-0.8.2-cp33-cp33m-win_amd64.whl", "has_sig": false, "md5_digest": "98ccb15f28a58377695762eda9913236", "packagetype": "bdist_wheel", "python_version": "cp33", "requires_python": null, "size": 323127, "upload_time": "2018-03-18T00:56:30", "upload_time_iso_8601": "2018-03-18T00:56:30.409789Z", "url": "https://files.pythonhosted.org/packages/56/9e/6a029d2d18175fd35d940cb678a75c40fead3da01f6756f6d202fb108502/zstandard-0.8.2-cp33-cp33m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d967bd2c63ea0909be72a62be302526", "sha256": "f4a690efe26ec7f494e6c6c8d2870e2c1153a2ea55b1e18b218a4ae40754554d"}, "downloads": -1, "filename": "zstandard-0.8.2-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "8d967bd2c63ea0909be72a62be302526", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 273889, "upload_time": "2018-03-18T00:56:32", "upload_time_iso_8601": "2018-03-18T00:56:32.231783Z", "url": "https://files.pythonhosted.org/packages/32/4f/7f311a7c7ec762f556f324c1c75e94cebb52c9c55c40269184ce546ee72f/zstandard-0.8.2-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f9f81275ad9a139da349231a212c37a", "sha256": "f4b40564ecf1e1842927cd7bfb1ad45916cfd701f723bb28ab4ef8a10479975a"}, "downloads": -1, "filename": "zstandard-0.8.2-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "7f9f81275ad9a139da349231a212c37a", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 323015, "upload_time": "2018-03-18T00:56:34", "upload_time_iso_8601": "2018-03-18T00:56:34.047145Z", "url": "https://files.pythonhosted.org/packages/65/ad/09ef77681f79f123a6cd34854e233fd65ef58eece5a147853d3f9d88c6e4/zstandard-0.8.2-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "550f9475285b584826465abf193e8962", "sha256": "97351e16896ee13f1880156aa7e9b2a050af7e219305da8973c03ef4e196a441"}, "downloads": -1, "filename": "zstandard-0.8.2-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "550f9475285b584826465abf193e8962", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 289355, "upload_time": "2018-03-18T00:56:35", "upload_time_iso_8601": "2018-03-18T00:56:35.779457Z", "url": "https://files.pythonhosted.org/packages/89/43/f72b2cb56b85103223e3deeb35371be90f06c85c600b2e9004194d86d237/zstandard-0.8.2-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c17ffd34a0ee6c4a193e641a30bcbb08", "sha256": "ab8e33e7aad7d2b677838670ad05d39bebb17271f0581cb265b56ff13e12e95b"}, "downloads": -1, "filename": "zstandard-0.8.2-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "c17ffd34a0ee6c4a193e641a30bcbb08", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 337879, "upload_time": "2018-03-18T00:56:37", "upload_time_iso_8601": "2018-03-18T00:56:37.617465Z", "url": "https://files.pythonhosted.org/packages/f5/71/5024ae6664812215e557d018afcb64a60f71c571f87580de178945962f76/zstandard-0.8.2-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "568b609bb12a4d734d10f4d71abfc654", "sha256": "fab8972fc0ea28663ccd70145c19f2295fa11d9e84aeff2e7f0ad7d554aa91df"}, "downloads": -1, "filename": "zstandard-0.8.2-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "568b609bb12a4d734d10f4d71abfc654", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 289361, "upload_time": "2018-03-18T00:56:39", "upload_time_iso_8601": "2018-03-18T00:56:39.445830Z", "url": "https://files.pythonhosted.org/packages/2d/e5/d73e0c162fd211b0e20cdd1c238ce663f522816be35dfaf3bd885f716bdd/zstandard-0.8.2-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd52fa2c0df9bf5f508b286badaab078", "sha256": "a82b88814c473e282bf2574b466c0d997d1d55b55b4f120eb6caba71b4ef70d7"}, "downloads": -1, "filename": "zstandard-0.8.2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "fd52fa2c0df9bf5f508b286badaab078", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 337878, "upload_time": "2018-03-18T00:56:41", "upload_time_iso_8601": "2018-03-18T00:56:41.198801Z", "url": "https://files.pythonhosted.org/packages/bf/64/d83fdf20c412d14ed71a8bbef90201685ab168fb59ed5d70132cafb3a3ae/zstandard-0.8.2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f6b7121113e03ae46a06c09efe982a5", "sha256": "fa247b90191e3d98acbee809d0578b3b5586f77890b08a0323b3f0748a243fce"}, "downloads": -1, "filename": "zstandard-0.8.2.tar.gz", "has_sig": false, "md5_digest": "2f6b7121113e03ae46a06c09efe982a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 463526, "upload_time": "2018-03-18T00:57:21", "upload_time_iso_8601": "2018-03-18T00:57:21.186418Z", "url": "https://files.pythonhosted.org/packages/88/fc/46bdf7484467c75f0f718fd284a8d4bc9548856e17e8a37ce8d66f2970c9/zstandard-0.8.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "945780b0684b2fa1caf6dff8119acdec", "sha256": "589076a8a27c844543ebcf35a90e88ff1a45e73f96ae5e89d5c463ab492b8cbb"}, "downloads": -1, "filename": "zstandard-0.9.0-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "945780b0684b2fa1caf6dff8119acdec", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 565922, "upload_time": "2018-04-09T02:07:53", "upload_time_iso_8601": "2018-04-09T02:07:53.902417Z", "url": "https://files.pythonhosted.org/packages/a0/f9/bf338f247a904c88c13a6947922a0d9a8111077df3c44fd2ceaa6c6fa607/zstandard-0.9.0-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab3c54106bf65697f9bf64636d36b955", "sha256": "573fc9dbea3c7da76c6472a9b225801b5bcab50b29e88b1a102cc2c8886b44f4"}, "downloads": -1, "filename": "zstandard-0.9.0-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "ab3c54106bf65697f9bf64636d36b955", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2132096, "upload_time": "2018-04-09T02:07:56", "upload_time_iso_8601": "2018-04-09T02:07:56.130646Z", "url": "https://files.pythonhosted.org/packages/13/3b/019b4bf82beb49c91f62ff6010d5323115fe9b9ac455970fdee88101a59c/zstandard-0.9.0-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b599a50916231d9021ba453c8b4d0ed", "sha256": "121fe60b6930dc5d80ffab098731ef84a7121ce327e0eeaafe1dd9abc86fadc1"}, "downloads": -1, "filename": "zstandard-0.9.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "9b599a50916231d9021ba453c8b4d0ed", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2373162, "upload_time": "2018-04-09T02:08:00", "upload_time_iso_8601": "2018-04-09T02:08:00.028973Z", "url": "https://files.pythonhosted.org/packages/2c/d1/9272f5c8aaf023f69a39bd759ef03fc23deedd4fedad84e1d86a9da40525/zstandard-0.9.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d023195873c5f1382e09ac4a3fdceb75", "sha256": "512952f95dd5dd85c9341f67d8fa7bcd85ab5f2cbc9c32b1688dec12ff8fa959"}, "downloads": -1, "filename": "zstandard-0.9.0-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "d023195873c5f1382e09ac4a3fdceb75", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2129751, "upload_time": "2018-04-09T02:08:02", "upload_time_iso_8601": "2018-04-09T02:08:02.376294Z", "url": "https://files.pythonhosted.org/packages/2b/ca/34a3b4883038422d462992926d6538b005bf9983d7f34e9f5b66ad223f3b/zstandard-0.9.0-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e58631fd4b5122af9d1b8a681121b4d", "sha256": "6ed49e917062f8f9bdb6d4c8d245c3eb2d08e45db1e4cf8c07c1a213d94b0bbe"}, "downloads": -1, "filename": "zstandard-0.9.0-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8e58631fd4b5122af9d1b8a681121b4d", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2376655, "upload_time": "2018-04-09T02:08:04", "upload_time_iso_8601": "2018-04-09T02:08:04.682614Z", "url": "https://files.pythonhosted.org/packages/3b/61/4eb3c7a0c0b5684b89e5d554c6f4671a1c6b6f392f76ff983577797611ee/zstandard-0.9.0-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c78ffa44bac8100f2bc0a4578a7fbcdc", "sha256": "ed5acbec485b7da835b54a96684fcf519335ab85900263467981ef2ced2c8665"}, "downloads": -1, "filename": "zstandard-0.9.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "c78ffa44bac8100f2bc0a4578a7fbcdc", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 329498, "upload_time": "2018-04-09T02:08:06", "upload_time_iso_8601": "2018-04-09T02:08:06.643201Z", "url": "https://files.pythonhosted.org/packages/7e/86/70d0cd83e069b1ff89b11506f5c0c0a0881733955c9a01894a816080ebb6/zstandard-0.9.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9017801b14c733ac61d5c9469bdf12f2", "sha256": "5d88fbc48a2271202b55af3f01b7c580611f8153a71320dd44bd427ba0e9a568"}, "downloads": -1, "filename": "zstandard-0.9.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "9017801b14c733ac61d5c9469bdf12f2", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 395583, "upload_time": "2018-04-09T02:08:08", "upload_time_iso_8601": "2018-04-09T02:08:08.316827Z", "url": "https://files.pythonhosted.org/packages/35/c7/d5c097b6fc0c507c16a07e64ce586dda37d3bcf91c2f6006b49424c60eda/zstandard-0.9.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a70afe55def14f0273835978a4542425", "sha256": "4b5651634711bfceae6b5599bf4dc6305292c7c38809322849dc240a13531d26"}, "downloads": -1, "filename": "zstandard-0.9.0-cp34-cp34m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "a70afe55def14f0273835978a4542425", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 564518, "upload_time": "2018-04-09T02:08:10", "upload_time_iso_8601": "2018-04-09T02:08:10.031779Z", "url": "https://files.pythonhosted.org/packages/f1/69/81f342caf37cc27ae1d40c966fbf87e0d8fca7b44a7cdfc803178416df84/zstandard-0.9.0-cp34-cp34m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48b157f83ac5a207b039942e9332c918", "sha256": "81b5ac91b0eac7e1fb9f1bfe2350e474e4f1b6dddd3dda5da8dd850824a6d573"}, "downloads": -1, "filename": "zstandard-0.9.0-cp34-cp34m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "48b157f83ac5a207b039942e9332c918", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2120189, "upload_time": "2018-04-09T02:08:11", "upload_time_iso_8601": "2018-04-09T02:08:11.923867Z", "url": "https://files.pythonhosted.org/packages/9c/d6/39bffb085912be1aa2ff54cedd46a77171b1d7782e3bf88777a18feabb14/zstandard-0.9.0-cp34-cp34m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c39a843fcea2ee20616403284a65dc60", "sha256": "77c9051a6b1a2e19116ef3cd5cd612a9fed9561a3a595c47ba50ff536c709de3"}, "downloads": -1, "filename": "zstandard-0.9.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c39a843fcea2ee20616403284a65dc60", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2378502, "upload_time": "2018-04-09T02:08:14", "upload_time_iso_8601": "2018-04-09T02:08:14.136774Z", "url": "https://files.pythonhosted.org/packages/2a/d9/58aa87418c92faf3c501dc6350ee1959dc145977248ef770fd0d995ba369/zstandard-0.9.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65d2a9afed548ca11555d274a16e2cfc", "sha256": "8fcd8059386444522fbb389d0aa7bddcf322cb26e1a605c787f055912640fe6d"}, "downloads": -1, "filename": "zstandard-0.9.0-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "65d2a9afed548ca11555d274a16e2cfc", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 331438, "upload_time": "2018-04-09T02:08:15", "upload_time_iso_8601": "2018-04-09T02:08:15.629178Z", "url": "https://files.pythonhosted.org/packages/3f/97/add82255b20720faa42885043b6d273d3bed1d15719eca7329a873a1e0b3/zstandard-0.9.0-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57f2d05df0b0bdf33c04f2bcc7250f93", "sha256": "110113e7dc9c58f4c2eb3be9a5d8756990b14d57c878ef95f0c184fa35d5b901"}, "downloads": -1, "filename": "zstandard-0.9.0-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "57f2d05df0b0bdf33c04f2bcc7250f93", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 397330, "upload_time": "2018-04-09T02:08:17", "upload_time_iso_8601": "2018-04-09T02:08:17.435048Z", "url": "https://files.pythonhosted.org/packages/92/61/d7c5c216dbf8060fbc7eb6bd995d7d54722b0d7790c19a09fcae4ab72417/zstandard-0.9.0-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c239d82bccb235602fda90ea5a6ba45b", "sha256": "c0e58148e0c6ee84be9f130593457c19e11b1a98315a54a1cf38c69b0c4b404c"}, "downloads": -1, "filename": "zstandard-0.9.0-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "c239d82bccb235602fda90ea5a6ba45b", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 565455, "upload_time": "2018-04-09T02:08:19", "upload_time_iso_8601": "2018-04-09T02:08:19.171066Z", "url": "https://files.pythonhosted.org/packages/b4/71/204ccf7f53842ab4c0a91ad80ec3b4a2b26a105ff674818c8a93d0f97da5/zstandard-0.9.0-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21b3b02503c090d28da0f82fc49bde52", "sha256": "2907c215f73971b77dbbf638282b73b81e50281817abe9bdf869fb4d92291df1"}, "downloads": -1, "filename": "zstandard-0.9.0-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "21b3b02503c090d28da0f82fc49bde52", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2123534, "upload_time": "2018-04-09T02:08:21", "upload_time_iso_8601": "2018-04-09T02:08:21.060945Z", "url": "https://files.pythonhosted.org/packages/07/97/c2adaf43a4ed74dc474aad0b7bf605427942af9170e2659c87f3b924cfa2/zstandard-0.9.0-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f855fc3151bc354316f48a4554cf947", "sha256": "d9c97199d062075f7458e83e2cbdaa24647081c7e484c4755b657e49a4a3bc33"}, "downloads": -1, "filename": "zstandard-0.9.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7f855fc3151bc354316f48a4554cf947", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2380070, "upload_time": "2018-04-09T02:08:23", "upload_time_iso_8601": "2018-04-09T02:08:23.224657Z", "url": "https://files.pythonhosted.org/packages/99/02/80158477a2b18bf7f4ac03967a6a33c82b624ce811ddb40ea4a47021db34/zstandard-0.9.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12bfae68944662e75e95f4773f55409e", "sha256": "81159b47c930489b0803a8b9f72c4df36e34c67dc3ac968c2b550b87b675babc"}, "downloads": -1, "filename": "zstandard-0.9.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "12bfae68944662e75e95f4773f55409e", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 333026, "upload_time": "2018-04-09T02:08:25", "upload_time_iso_8601": "2018-04-09T02:08:25.201403Z", "url": "https://files.pythonhosted.org/packages/75/4d/6bfa208bdca38e61e760c581d789b8cb98e550014b7bf612ea05c3338efd/zstandard-0.9.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22128dc838207beb8546ad9ac0f4e20b", "sha256": "045c6f15ab7d4b865d11d2563532acd43a729e95dd19adb428c23c1a2f0bd2e3"}, "downloads": -1, "filename": "zstandard-0.9.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "22128dc838207beb8546ad9ac0f4e20b", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 388795, "upload_time": "2018-04-09T02:08:26", "upload_time_iso_8601": "2018-04-09T02:08:26.907368Z", "url": "https://files.pythonhosted.org/packages/f9/be/8c45818fa8248b46b47b2cc64c48e76897311e6ee8121a64e3f8075c9f1b/zstandard-0.9.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "271adffb822e0faa9c10ddd7b1960291", "sha256": "0a5bb85c57b36813d84a4413ec60bded61ab654c85d74d3a74e29f0e3f69bd6d"}, "downloads": -1, "filename": "zstandard-0.9.0-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "271adffb822e0faa9c10ddd7b1960291", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 562658, "upload_time": "2018-04-09T02:08:28", "upload_time_iso_8601": "2018-04-09T02:08:28.529558Z", "url": "https://files.pythonhosted.org/packages/94/71/fff730e1f9080bba1b89a766fc31277535c5e520136b9c7bb14f40c3f361/zstandard-0.9.0-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c3f996233ffb47c75adce27f97ae3fa", "sha256": "898ff1cf75d02011b319619253259e9d911431bbe9082a5eab8bad13cf1415af"}, "downloads": -1, "filename": "zstandard-0.9.0-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "8c3f996233ffb47c75adce27f97ae3fa", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2126734, "upload_time": "2018-04-09T02:08:30", "upload_time_iso_8601": "2018-04-09T02:08:30.721120Z", "url": "https://files.pythonhosted.org/packages/d3/ef/82b330f525fd1bc412a00150abb6a6da88e800d4a79d213cb6f31573fa50/zstandard-0.9.0-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65fe53467cdc0d34a893e4d4a9e62155", "sha256": "8d1ed25ece0dbfab09dddd2f90154cf5bb9817033dc3bc98efd4b02947d8de26"}, "downloads": -1, "filename": "zstandard-0.9.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "65fe53467cdc0d34a893e4d4a9e62155", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2380467, "upload_time": "2018-04-09T02:08:32", "upload_time_iso_8601": "2018-04-09T02:08:32.924245Z", "url": "https://files.pythonhosted.org/packages/3d/7c/106d3fd48a3d0b270a55ef0d6ea1b40a1213e995b31fb76e77c90c6b51be/zstandard-0.9.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1fe38e931ce9aea20dc2d9cbdcea465", "sha256": "1eb0dc221d4ea9f81d024e70266249c3f5b97e23a4ee320b87dd4da7298e07a9"}, "downloads": -1, "filename": "zstandard-0.9.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "f1fe38e931ce9aea20dc2d9cbdcea465", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 331869, "upload_time": "2018-04-09T02:08:34", "upload_time_iso_8601": "2018-04-09T02:08:34.884117Z", "url": "https://files.pythonhosted.org/packages/65/d0/7159b4055732ac65619fbee7378622e9b6c41c6a8c65e6730e405c0a904e/zstandard-0.9.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b978a931abb6d6857ed4c3d701ce7dd7", "sha256": "900919758f828e99bff310ce3615ac8142346417061906b9ddbe09d5dfcb40d0"}, "downloads": -1, "filename": "zstandard-0.9.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "b978a931abb6d6857ed4c3d701ce7dd7", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 389457, "upload_time": "2018-04-09T02:08:36", "upload_time_iso_8601": "2018-04-09T02:08:36.473000Z", "url": "https://files.pythonhosted.org/packages/5b/80/b692ecfbf7b71dd3af682446e1908c5f5d626f5610f8167feb5d37d21950/zstandard-0.9.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9015659c855c7bde0247ba06c695cb72", "sha256": "bda1071c4c635f5eeac594505bdd712cfff10608f688199019462b8c81b93b9f"}, "downloads": -1, "filename": "zstandard-0.9.0.tar.gz", "has_sig": false, "md5_digest": "9015659c855c7bde0247ba06c695cb72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 558068, "upload_time": "2018-04-09T02:08:38", "upload_time_iso_8601": "2018-04-09T02:08:38.131067Z", "url": "https://files.pythonhosted.org/packages/47/8b/64797d2e1b0dd042f59aa41b5312f29bfba21eb7cb84e9ee2cc4d3ca3b23/zstandard-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "defbd09f7d6177c758212839497d72f7", "sha256": "d67bda1263553ea4956429be6daae7e6007bb1c4647d54a2185af27f1fac31d4"}, "downloads": -1, "filename": "zstandard-0.9.1-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "defbd09f7d6177c758212839497d72f7", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 565095, "upload_time": "2018-06-05T06:15:16", "upload_time_iso_8601": "2018-06-05T06:15:16.770064Z", "url": "https://files.pythonhosted.org/packages/f3/a3/ff6c2f50ea84fd4444ca6fd05bb853714bcc242619bee672a1da3b5868ba/zstandard-0.9.1-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07321d27fe0760a6287cea97fdb4ec31", "sha256": "61cd949335eeaf80220cb1488c697729079d7f944e0da7d23a894d839d34f2cc"}, "downloads": -1, "filename": "zstandard-0.9.1-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "07321d27fe0760a6287cea97fdb4ec31", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2110322, "upload_time": "2018-06-05T06:15:19", "upload_time_iso_8601": "2018-06-05T06:15:19.366151Z", "url": "https://files.pythonhosted.org/packages/bd/97/ce5e41afdcd4831a3aa7e848d0fb22abf29f01988556d6787b0548a7c064/zstandard-0.9.1-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47c806c5afb3060fa15b1520368b7d38", "sha256": "33715fd95c5988cbeaa8eac1b4e01c31589d7cb1af437cd6409e6ea5d4414c75"}, "downloads": -1, "filename": "zstandard-0.9.1-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "47c806c5afb3060fa15b1520368b7d38", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2358284, "upload_time": "2018-06-05T06:15:21", "upload_time_iso_8601": "2018-06-05T06:15:21.921744Z", "url": "https://files.pythonhosted.org/packages/77/6c/07012a019a265c7257be67ae0909afa456f31ff8c0711309feaae7547ebf/zstandard-0.9.1-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "401aae1f81ae200ce29b6ae690ad15b7", "sha256": "2aefb6a34c5ade11e8bfea80c966be6a94591bde161fc3cacae6ac5731bef79e"}, "downloads": -1, "filename": "zstandard-0.9.1-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "401aae1f81ae200ce29b6ae690ad15b7", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2106046, "upload_time": "2018-06-05T06:15:24", "upload_time_iso_8601": "2018-06-05T06:15:24.728194Z", "url": "https://files.pythonhosted.org/packages/3a/29/fb1caba112b791e8c470aa5f74055cf9349e967bd364a637099f527a8eff/zstandard-0.9.1-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "100af30e3a50ebc01f1dd95c9fe82c5b", "sha256": "4972a0a78fc507a91570c3595b35b6d5ba3c88b36b697bc03423b5324ef498d7"}, "downloads": -1, "filename": "zstandard-0.9.1-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "100af30e3a50ebc01f1dd95c9fe82c5b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2352768, "upload_time": "2018-06-05T06:15:27", "upload_time_iso_8601": "2018-06-05T06:15:27.020784Z", "url": "https://files.pythonhosted.org/packages/88/ba/eeae308356d43e8106fe0b815b5b382f9733509471904255707bf7476c5e/zstandard-0.9.1-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29e93b3f6d1a7e59c3853a338ed0aa67", "sha256": "4ae6575770613fd80f7255dbf961d2185c91860a41e749a1b369d349d930dfa2"}, "downloads": -1, "filename": "zstandard-0.9.1-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "29e93b3f6d1a7e59c3853a338ed0aa67", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 329200, "upload_time": "2018-06-05T06:15:29", "upload_time_iso_8601": "2018-06-05T06:15:29.300293Z", "url": "https://files.pythonhosted.org/packages/94/5b/df77b820cc98ef88b5f3e1f4952d620711f5c424f3003863279b70a04392/zstandard-0.9.1-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a18d1728388c36fa9b38101c821ebc5", "sha256": "2271c9767f9dff1f35b75a2da590a1f611a53e0ce085ebcf8277f3b5c7f023b6"}, "downloads": -1, "filename": "zstandard-0.9.1-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "6a18d1728388c36fa9b38101c821ebc5", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 395988, "upload_time": "2018-06-05T06:15:31", "upload_time_iso_8601": "2018-06-05T06:15:31.264347Z", "url": "https://files.pythonhosted.org/packages/7a/9d/134fd8f7934c5b4a3b13c7d95ce3e476f3b67e0373bdb5dafd2ae7d056e0/zstandard-0.9.1-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5508cfe34f4dc76f0a1b0db552b13fef", "sha256": "ff476e52639385c0e1a4227fa033766af5b006531e8f7f55c52205ffa4b8ac89"}, "downloads": -1, "filename": "zstandard-0.9.1-cp34-cp34m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "5508cfe34f4dc76f0a1b0db552b13fef", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 563014, "upload_time": "2018-06-05T06:15:32", "upload_time_iso_8601": "2018-06-05T06:15:32.985619Z", "url": "https://files.pythonhosted.org/packages/77/0f/a3ce922d5497bb0658295742bcaf02bc179d8fe248f3e63d59ad92ebd38a/zstandard-0.9.1-cp34-cp34m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa6c3fdca4e7c66ba7359374f8946528", "sha256": "9c4b6cb84b62a10a4426a96b5de927f0eb5bb93ae5ee28ca3ca4e236978c5eae"}, "downloads": -1, "filename": "zstandard-0.9.1-cp34-cp34m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "aa6c3fdca4e7c66ba7359374f8946528", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2103661, "upload_time": "2018-06-05T06:15:34", "upload_time_iso_8601": "2018-06-05T06:15:34.701389Z", "url": "https://files.pythonhosted.org/packages/eb/00/4c98370e0c543ee7d854e4651ac36f5e5be08250b3822e3aed0c2bbe6ef2/zstandard-0.9.1-cp34-cp34m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98850ec7bc72ec10035e9a543e4589f2", "sha256": "31ba10655683e585acf1af30f9f289d04a00f3aee2a99083b5a5e20d98174aeb"}, "downloads": -1, "filename": "zstandard-0.9.1-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "98850ec7bc72ec10035e9a543e4589f2", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 2354448, "upload_time": "2018-06-05T06:15:36", "upload_time_iso_8601": "2018-06-05T06:15:36.832046Z", "url": "https://files.pythonhosted.org/packages/c7/bd/1dc87895c066b36fc4fa038d0a062c59a4530d1382e4cc2fa18c057d818b/zstandard-0.9.1-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d71304e81199a9e8e114d01f5e1abe3", "sha256": "e0304e97b75ffafca4e2550d6a2f2d331ba8885139db954ccacf08b1e8a7ea43"}, "downloads": -1, "filename": "zstandard-0.9.1-cp34-cp34m-win32.whl", "has_sig": false, "md5_digest": "0d71304e81199a9e8e114d01f5e1abe3", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 332235, "upload_time": "2018-06-05T06:15:38", "upload_time_iso_8601": "2018-06-05T06:15:38.775393Z", "url": "https://files.pythonhosted.org/packages/5b/68/c24a7ae5cc725776f948e9099e779ff46b9459c14adbdbf88594e1f47a7c/zstandard-0.9.1-cp34-cp34m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01d8f98712da808d043883f650144dad", "sha256": "530b5d7f4ef60b60f3f724be36e9e025090563b9480b188fe4fd88972d732e57"}, "downloads": -1, "filename": "zstandard-0.9.1-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "01d8f98712da808d043883f650144dad", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 396347, "upload_time": "2018-06-05T06:15:40", "upload_time_iso_8601": "2018-06-05T06:15:40.664398Z", "url": "https://files.pythonhosted.org/packages/35/b4/e79858768cc5b70e50aabd48d0490d539b4a34d47a8725a1212ccf75c50f/zstandard-0.9.1-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1af5d939d183bbf9c04a1f97c489e2d9", "sha256": "937f953c536be451768855daf7c4751fc464df0a85db461618c58437ce298987"}, "downloads": -1, "filename": "zstandard-0.9.1-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "1af5d939d183bbf9c04a1f97c489e2d9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 566490, "upload_time": "2018-06-05T06:15:42", "upload_time_iso_8601": "2018-06-05T06:15:42.784098Z", "url": "https://files.pythonhosted.org/packages/35/4b/d00b08a23d84c31e9eb9d7f3eb567012f57510789e41fce8e14c19074dbc/zstandard-0.9.1-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4242243898a70083202b479f08896953", "sha256": "0ea9d12328bf1e0faa34bf3feb5c159806e1817db40334e89aa1658a9e3d7fef"}, "downloads": -1, "filename": "zstandard-0.9.1-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "4242243898a70083202b479f08896953", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2113806, "upload_time": "2018-06-05T06:15:44", "upload_time_iso_8601": "2018-06-05T06:15:44.612131Z", "url": "https://files.pythonhosted.org/packages/82/82/a23d30f04b9cfbb8486348872458781a97b0b1125d2ff6e1f62db9469e30/zstandard-0.9.1-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16e27ce11d9b8f84635ee31c0cc65b50", "sha256": "6f5268c10fc9bd8739cfdde639622b3e284088740462ef03066c45825c646afc"}, "downloads": -1, "filename": "zstandard-0.9.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "16e27ce11d9b8f84635ee31c0cc65b50", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2358957, "upload_time": "2018-06-05T06:15:46", "upload_time_iso_8601": "2018-06-05T06:15:46.834811Z", "url": "https://files.pythonhosted.org/packages/4f/f6/1f839b5c877c79a25a13913c6da05b8cb77500735d06ceb91e3bdaf3c6f2/zstandard-0.9.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0787fa662d945e0766c477bfd65b6d27", "sha256": "c0272b413c4d1317f6c5809339084a478aa225706b3643662c1eeb982bcc890c"}, "downloads": -1, "filename": "zstandard-0.9.1-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "0787fa662d945e0766c477bfd65b6d27", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 332425, "upload_time": "2018-06-05T06:15:48", "upload_time_iso_8601": "2018-06-05T06:15:48.660863Z", "url": "https://files.pythonhosted.org/packages/9e/9e/9b14b57000b8dd3a8bb846a26b1e4456a4f0d530af4781621c81d7363992/zstandard-0.9.1-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "439dc86116e1e846ad9f1388b2bdd781", "sha256": "b45c4ae5485e70404338d2da20be5c19d6184fae0945f0633182e2aa65f70d35"}, "downloads": -1, "filename": "zstandard-0.9.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "439dc86116e1e846ad9f1388b2bdd781", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 388613, "upload_time": "2018-06-05T06:15:50", "upload_time_iso_8601": "2018-06-05T06:15:50.561136Z", "url": "https://files.pythonhosted.org/packages/f4/90/a3b547299d26f14620ca25f228744e8eed6d5c6add972ccc23094e728f9e/zstandard-0.9.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9e040288c190d80268dc60200612622", "sha256": "4296364a2a92a20c5abe92acf7a15c5bd728d8bc56faeaad13d4dd2ee91c56cc"}, "downloads": -1, "filename": "zstandard-0.9.1-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "a9e040288c190d80268dc60200612622", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 563666, "upload_time": "2018-06-05T06:15:52", "upload_time_iso_8601": "2018-06-05T06:15:52.583904Z", "url": "https://files.pythonhosted.org/packages/08/74/fd58bd9195584e873c8e56674e3ed995ece3fdcd0bf88c92601bb3f0900c/zstandard-0.9.1-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6a30e25d0d7213aa4e9ede4361c5a14", "sha256": "fea895c3265cca515b4d323a8ebf0512cc6afd883123588a191c14f27832906e"}, "downloads": -1, "filename": "zstandard-0.9.1-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "f6a30e25d0d7213aa4e9ede4361c5a14", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2110217, "upload_time": "2018-06-05T06:15:54", "upload_time_iso_8601": "2018-06-05T06:15:54.718546Z", "url": "https://files.pythonhosted.org/packages/dc/78/55d12347db7ba8bc8ac3323fd1024ef26a0abc0c059770d707ada688340a/zstandard-0.9.1-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6293bf30054f90ab142a4ac0a2cc7266", "sha256": "1c01754f9c48da08479762627640c48a0e3b504432163d42804602668d8242e3"}, "downloads": -1, "filename": "zstandard-0.9.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6293bf30054f90ab142a4ac0a2cc7266", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2362788, "upload_time": "2018-06-05T06:15:56", "upload_time_iso_8601": "2018-06-05T06:15:56.726626Z", "url": "https://files.pythonhosted.org/packages/16/a4/bda905d350028aa5102d012fa71fe5babe6fbcd9b02e4e2ad91982ffef9c/zstandard-0.9.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96453b6e85f34240ad28e6bb929e00f4", "sha256": "1452cc1064e1626f868b461356dbbc9fcedd6c941c10b76372218b223abcb458"}, "downloads": -1, "filename": "zstandard-0.9.1-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "96453b6e85f34240ad28e6bb929e00f4", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 333113, "upload_time": "2018-06-05T06:15:58", "upload_time_iso_8601": "2018-06-05T06:15:58.481078Z", "url": "https://files.pythonhosted.org/packages/21/95/12f50b1cbb32f462b310d2facccfe48ad014a5d3b962d64d0c13d0515e11/zstandard-0.9.1-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4353b80f95dca93c910e2bc975588f6", "sha256": "c0b40f49abdaabe51733e7a71c5f523d8aba1ea15bd27673b6378c2de182ab51"}, "downloads": -1, "filename": "zstandard-0.9.1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "f4353b80f95dca93c910e2bc975588f6", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 389810, "upload_time": "2018-06-05T06:16:00", "upload_time_iso_8601": "2018-06-05T06:16:00.378238Z", "url": "https://files.pythonhosted.org/packages/fd/62/13da6eb4a5e995a3fe58ac948287fd38344e6242872a1e748afc98c88801/zstandard-0.9.1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70d796f2a0d98ecd6a8a6f658e92680b", "sha256": "59c7d6f1f85cebb5124abb50d8ec281c5311e0812e18785e28b197cf1515dd3b"}, "downloads": -1, "filename": "zstandard-0.9.1.tar.gz", "has_sig": false, "md5_digest": "70d796f2a0d98ecd6a8a6f658e92680b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 558984, "upload_time": "2018-06-05T06:16:02", "upload_time_iso_8601": "2018-06-05T06:16:02.063704Z", "url": "https://files.pythonhosted.org/packages/5f/ca/d126d52c33147b1283f2c90e423ff9617c31b05902ec716dc76cbacb6584/zstandard-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "99dec7daa30de94cb1d8078974383d7f", "sha256": "c344c96679aa2d60be01d518b0132d1ea67aee511a9e0170cff6a8a8ba1032db"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "99dec7daa30de94cb1d8078974383d7f", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 879342, "upload_time": "2019-12-28T18:09:48", "upload_time_iso_8601": "2019-12-28T18:09:48.707082Z", "url": "https://files.pythonhosted.org/packages/05/96/fe2c125a66525ef2210a686b5b3b514d53b59cdef9b3279db49688aebb94/zstandard-0.13.0-cp27-cp27m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78cd6cbdf27b7e4c727a99ee76888781", "sha256": "b2c9717906a84dbd907fe648ede2add4c6d3eb73e1dff9fdd3046b8645a2679a"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "78cd6cbdf27b7e4c727a99ee76888781", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2943437, "upload_time": "2019-12-28T18:09:52", "upload_time_iso_8601": "2019-12-28T18:09:52.264849Z", "url": "https://files.pythonhosted.org/packages/50/8f/4e5afaf3b47e4fff96e66af8f2d6f3412db0eeb5babdbe79e435e5548dcc/zstandard-0.13.0-cp27-cp27m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d91e2467c1dcafea0b87548b11f4e298", "sha256": "5f303002cbf57e8ad1f18e5c23741d1ad5aa09ac2247c430a5843b93936e101f"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d91e2467c1dcafea0b87548b11f4e298", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3984004, "upload_time": "2019-12-28T18:09:55", "upload_time_iso_8601": "2019-12-28T18:09:55.966789Z", "url": "https://files.pythonhosted.org/packages/d0/a5/8bfcabe531653f7c62271650eb5d06d0f5c74637b4b9c9d42e0ca444351c/zstandard-0.13.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "307bd1b68ac520fb9045bfbe875f6009", "sha256": "2a530a0aa03e979349a821f1cfa93e6ad006a02ac25e2f55ed9657a46c8a993a"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "307bd1b68ac520fb9045bfbe875f6009", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2943440, "upload_time": "2019-12-28T18:09:59", "upload_time_iso_8601": "2019-12-28T18:09:59.251030Z", "url": "https://files.pythonhosted.org/packages/59/4d/321c0a45537e50d2e23d1e3dd6a23b76ed46b950855e437023ef539859ce/zstandard-0.13.0-cp27-cp27m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24e33dbb2f9240c6c0484815846c2742", "sha256": "7a6af45c49b374b39434d15e1cf8659733e611ddddf85ca4e018b597309ac0b9"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "24e33dbb2f9240c6c0484815846c2742", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3984008, "upload_time": "2019-12-28T18:10:02", "upload_time_iso_8601": "2019-12-28T18:10:02.372551Z", "url": "https://files.pythonhosted.org/packages/4d/48/1081ab92f89804cd52a20678911b2b6c622eafbc10b0242861a0e37dd9d6/zstandard-0.13.0-cp27-cp27m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4813335971d711a07edd1c94fbf136b6", "sha256": "887861d2b6d926cef887f89f0d3d4d894ad75a12de1f2b41f15e00ac0a629230"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27mu-manylinux1_i686.whl", "has_sig": false, "md5_digest": "4813335971d711a07edd1c94fbf136b6", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2946825, "upload_time": "2019-12-28T18:10:05", "upload_time_iso_8601": "2019-12-28T18:10:05.766719Z", "url": "https://files.pythonhosted.org/packages/fe/6d/18fd1225c660742f7695c9df4d32b14e02997fb726677bd510b0b5de548c/zstandard-0.13.0-cp27-cp27mu-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6496844530652565a421c5496bbf8bce", "sha256": "7db22006ea2ec0f97db51aeb1384f473cbf4d0f7974eff442d86ef9aa628a1eb"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6496844530652565a421c5496bbf8bce", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3977416, "upload_time": "2019-12-28T18:10:08", "upload_time_iso_8601": "2019-12-28T18:10:08.917445Z", "url": "https://files.pythonhosted.org/packages/09/c3/4bd0999bb45a02311d93a52f8d724fa7347b4f4dc0a44d820bf4a22def4f/zstandard-0.13.0-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff719588dcb8873b95acb12735426768", "sha256": "7af5837883020426e644ca8c3301e5398b46cb63eaaccf7405e574fd54f2c985"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27mu-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "ff719588dcb8873b95acb12735426768", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2946829, "upload_time": "2019-12-28T18:10:12", "upload_time_iso_8601": "2019-12-28T18:10:12.390603Z", "url": "https://files.pythonhosted.org/packages/d1/c5/d0691e898a023c9df25ce12601b6a66b5580ac7a88737a964557eeaba02c/zstandard-0.13.0-cp27-cp27mu-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0103178c9f364cdc3b85af6af93c12b", "sha256": "c4bbd70ab4a19d174596c7a936d87bfd279ad8de0a818aa9f4ec42394b937f11"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27mu-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "e0103178c9f364cdc3b85af6af93c12b", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 3977418, "upload_time": "2019-12-28T18:10:15", "upload_time_iso_8601": "2019-12-28T18:10:15.808359Z", "url": "https://files.pythonhosted.org/packages/46/1e/de59011032b9bb52e9106ef2f94a0bd7dee8e46512d7cf1af0ad8cd3d576/zstandard-0.13.0-cp27-cp27mu-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b77c9e711587e239a646961f860bea1", "sha256": "0097740f6efef248d05f2d772fc4e75f282be9d599cd2b57f9349ad74c8579a9"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-win32.whl", "has_sig": false, "md5_digest": "2b77c9e711587e239a646961f860bea1", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 451788, "upload_time": "2019-12-28T18:10:18", "upload_time_iso_8601": "2019-12-28T18:10:18.805181Z", "url": "https://files.pythonhosted.org/packages/75/6a/8a3abbc5275f9dcd0e4edf94e06445f364e22d70416d9ec59414dacf4464/zstandard-0.13.0-cp27-cp27m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa0ee94cb85e6ac0d5f8bff797aa0205", "sha256": "95e340e75891baf60e0c27f6bd3dcf9f2c72193bc04f953aaf7dfa7f76dadbb3"}, "downloads": -1, "filename": "zstandard-0.13.0-cp27-cp27m-win_amd64.whl", "has_sig": false, "md5_digest": "aa0ee94cb85e6ac0d5f8bff797aa0205", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 534020, "upload_time": "2019-12-28T18:10:21", "upload_time_iso_8601": "2019-12-28T18:10:21.257234Z", "url": "https://files.pythonhosted.org/packages/fc/8a/47c4deebd09f0cfbc78690ed54ed34285c06eec2845d1823b6de6125c594/zstandard-0.13.0-cp27-cp27m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6da4ad297a83158216be5516a8b710d7", "sha256": "51d93f9fe4207424394f34b3793e274e50376c0e602a170fc8ec546213805446"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "6da4ad297a83158216be5516a8b710d7", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 878341, "upload_time": "2019-12-28T18:10:23", "upload_time_iso_8601": "2019-12-28T18:10:23.701156Z", "url": "https://files.pythonhosted.org/packages/5e/99/062eab0e437f065e96a579a00520823ff8f957a51c179db3ce1db4d8dd01/zstandard-0.13.0-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c0dbc5cd4f1f49189891e7c84b844ea", "sha256": "b44afaffcce80248cd9783a827a4510b0c6ebe1fee84e39c4ca0d3893f881865"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "1c0dbc5cd4f1f49189891e7c84b844ea", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3019001, "upload_time": "2019-12-28T18:10:26", "upload_time_iso_8601": "2019-12-28T18:10:26.544763Z", "url": "https://files.pythonhosted.org/packages/60/27/570c54af5acc9ca17d52fe54325055fc4e8d0ba1199bb76b2c679fb99d7b/zstandard-0.13.0-cp35-cp35m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ec5a59337723c06b745673cb6e661c3", "sha256": "2866e623ae1288d0c1f37477dd6635a3526439a615caac7718ca65ad0a17aedc"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7ec5a59337723c06b745673cb6e661c3", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 4022922, "upload_time": "2019-12-28T18:10:29", "upload_time_iso_8601": "2019-12-28T18:10:29.775150Z", "url": "https://files.pythonhosted.org/packages/5a/b8/c52dd21095b11c5c7633dadc56fda39fc16e8926caac1a037291ecdf13dd/zstandard-0.13.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f208d226fd35084656fac79b4a61fa33", "sha256": "3b08d5091615172804d261cc5629933de7252e479776e8acf42eb9d90d305003"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "f208d226fd35084656fac79b4a61fa33", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 2977360, "upload_time": "2019-12-28T18:10:32", "upload_time_iso_8601": "2019-12-28T18:10:32.769067Z", "url": "https://files.pythonhosted.org/packages/d9/5f/f041528eec55555112dcde644daeb54a9732e12e661e4e6ad3433cd37d99/zstandard-0.13.0-cp35-cp35m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7069d1d4f8c8b67d832d2f63e0949ebe", "sha256": "b3b174f91f187563f64f912974a3554af494200dc2076329d638a3e12e333667"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "7069d1d4f8c8b67d832d2f63e0949ebe", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 4022924, "upload_time": "2019-12-28T18:10:36", "upload_time_iso_8601": "2019-12-28T18:10:36.167437Z", "url": "https://files.pythonhosted.org/packages/1b/f5/752ded84ecbeb898f274e1d04ef3f0ffe2a2536e8cd16e0be681e86bea96/zstandard-0.13.0-cp35-cp35m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2725dfacca7859271933418d0145c6d7", "sha256": "c72a839e9df34484212b722534e93f0688264435ae87e7c25dffab699b880c1f"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux2014_i686.whl", "has_sig": false, "md5_digest": "2725dfacca7859271933418d0145c6d7", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3019004, "upload_time": "2019-12-28T18:10:39", "upload_time_iso_8601": "2019-12-28T18:10:39.454350Z", "url": "https://files.pythonhosted.org/packages/5a/ce/87ddb520823ec09366f3389f362d82be92ffd7879aeae049bbfa363ce172/zstandard-0.13.0-cp35-cp35m-manylinux2014_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8312e3166c0df852650885c86b18f97", "sha256": "f4ec6aa8dca1d12fd190d42c7e5e8da860a38a344713d4f1994c4617dec52891"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-manylinux2014_x86_64.whl", "has_sig": false, "md5_digest": "b8312e3166c0df852650885c86b18f97", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 3515890, "upload_time": "2019-12-28T18:10:42", "upload_time_iso_8601": "2019-12-28T18:10:42.461135Z", "url": "https://files.pythonhosted.org/packages/12/c3/08f95ca188b611ef57c63432b0246e0a3a70141d63a0b03689acad3f5f35/zstandard-0.13.0-cp35-cp35m-manylinux2014_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5704f9f18cd39b7a6c013ef88e8462b7", "sha256": "3ba348e22e9f0053454e6cd178806f6f5aaa2bc9a6a9f14c99107934d8825f97"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-win32.whl", "has_sig": false, "md5_digest": "5704f9f18cd39b7a6c013ef88e8462b7", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 461133, "upload_time": "2019-12-28T18:10:45", "upload_time_iso_8601": "2019-12-28T18:10:45.452771Z", "url": "https://files.pythonhosted.org/packages/28/7c/ffd3fe18b2c0136c52185f7dec669375b4ba82c6fbaabcf77c28c426adbc/zstandard-0.13.0-cp35-cp35m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "877ad39dafc408cf7f0efbd2a9774421", "sha256": "c5261e2e7e678f95bab398b389009e62cf531a5d06d3ae188cd5c134d9d79823"}, "downloads": -1, "filename": "zstandard-0.13.0-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "877ad39dafc408cf7f0efbd2a9774421", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 531009, "upload_time": "2019-12-28T18:10:48", "upload_time_iso_8601": "2019-12-28T18:10:48.227717Z", "url": "https://files.pythonhosted.org/packages/14/03/cdb5f9d9a8607ad7a13d35ded20fcf26b910026fe56662abbda9f5d019ff/zstandard-0.13.0-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d1217449dc34e23a9b3d5085b39ca85", "sha256": "e32f2f8d50209a72522e4e1b5ad350d311a9070bd1ee5ce978c1270e77214b9a"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "9d1217449dc34e23a9b3d5085b39ca85", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 878767, "upload_time": "2019-12-28T18:10:50", "upload_time_iso_8601": "2019-12-28T18:10:50.803035Z", "url": "https://files.pythonhosted.org/packages/19/6e/cf8d5e050419ade654587e8fb093c46935c42151d33f7edde03770f5ad8f/zstandard-0.13.0-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "363e7c5a22537f618cc9a8c0a34c5e05", "sha256": "45f55338d1bc667823c78ae00036e1a4a28f96308abbd4a38c708a6876e58346"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "363e7c5a22537f618cc9a8c0a34c5e05", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3022131, "upload_time": "2019-12-28T18:10:53", "upload_time_iso_8601": "2019-12-28T18:10:53.593800Z", "url": "https://files.pythonhosted.org/packages/8f/ed/cb0cf6a40de9e300b9915e4b434d3d695ea0d89822407e797418b208e118/zstandard-0.13.0-cp36-cp36m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2308b158e78f4313d240b3550b880224", "sha256": "64c162416941e1c0bd449bf551bf255a0ca73d77c56796c5a2eef2249c489cd8"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "2308b158e78f4313d240b3550b880224", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 4024983, "upload_time": "2019-12-28T18:10:56", "upload_time_iso_8601": "2019-12-28T18:10:56.896251Z", "url": "https://files.pythonhosted.org/packages/85/fc/53a24db76edfe48fe2307b22ef7c53c2267f70cda911bd671ba5ab161834/zstandard-0.13.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "790bd4c1ce89a1962101f97bdb2c5035", "sha256": "f3fae7b31bc04cb09ca182d4c15ebe5caa65cd96b3be573e2d80140237c96780"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "790bd4c1ce89a1962101f97bdb2c5035", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 2972654, "upload_time": "2019-12-28T18:11:00", "upload_time_iso_8601": "2019-12-28T18:11:00.051498Z", "url": "https://files.pythonhosted.org/packages/05/2d/4ba2568ef4b03405016807a7536a5300bc57e74c36a039a26c06d5892d9e/zstandard-0.13.0-cp36-cp36m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "486a494e455b12bdceaf0da796825119", "sha256": "984c12896fef610c023184e2185a011cac207530620f9bc7444983492942def3"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "486a494e455b12bdceaf0da796825119", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 4024985, "upload_time": "2019-12-28T18:11:03", "upload_time_iso_8601": "2019-12-28T18:11:03.326078Z", "url": "https://files.pythonhosted.org/packages/77/01/abde1cd3e375bc4ce6c3045f65761e0b782e84e7e3abe92efbc5000a473d/zstandard-0.13.0-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87b05bd0f8e5bbe5bfe22c95d927f02d", "sha256": "b3e9b81e64de6a284ad8b55ab4d97a8c6c945e689d46b4c967889c3399104694"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux2014_i686.whl", "has_sig": false, "md5_digest": "87b05bd0f8e5bbe5bfe22c95d927f02d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3022135, "upload_time": "2019-12-28T18:11:06", "upload_time_iso_8601": "2019-12-28T18:11:06.316020Z", "url": "https://files.pythonhosted.org/packages/25/0a/244a14b4f86e12c55839ab53ab3a305da0d39a4e4a93223494fff1c95d9a/zstandard-0.13.0-cp36-cp36m-manylinux2014_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2dad51f956d6f15e14db93cd951d263d", "sha256": "b1f52f5cc60cd4b843bc7f0879e50796cb952381bae08101de07797b9d8c76a4"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-manylinux2014_x86_64.whl", "has_sig": false, "md5_digest": "2dad51f956d6f15e14db93cd951d263d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 3514087, "upload_time": "2019-12-28T18:11:09", "upload_time_iso_8601": "2019-12-28T18:11:09.566288Z", "url": "https://files.pythonhosted.org/packages/c6/40/cde2dfec7e25145c893267ebd1c5e3e0915ebc7274652d3f863e212026ec/zstandard-0.13.0-cp36-cp36m-manylinux2014_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c7d7ac5f18fb85cbba498ce8c522fa0", "sha256": "853df35231ac662e8ab7154eb026fc9ed0bc9f6d52734d0d70975cfb1ac95b3f"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-win32.whl", "has_sig": false, "md5_digest": "4c7d7ac5f18fb85cbba498ce8c522fa0", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 455032, "upload_time": "2019-12-28T18:11:12", "upload_time_iso_8601": "2019-12-28T18:11:12.389029Z", "url": "https://files.pythonhosted.org/packages/9e/a8/9e2f24988274fea5607a7c21b7ad2dbdceeb435aa80e246715211a55e490/zstandard-0.13.0-cp36-cp36m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0943981c40dd039852791d5e7086dc2", "sha256": "7b75d91ed097e2e7b1fb60b314fd23e7dbec8b608da529d1df960e25e6b43349"}, "downloads": -1, "filename": "zstandard-0.13.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "a0943981c40dd039852791d5e7086dc2", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 527155, "upload_time": "2019-12-28T18:11:14", "upload_time_iso_8601": "2019-12-28T18:11:14.797305Z", "url": "https://files.pythonhosted.org/packages/b3/5e/d8a176a0ba1c9cfb239a3739ad19c831164ccffdb1f767b37bf029aa9667/zstandard-0.13.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73126f6c130c6e17e400570f04d2becd", "sha256": "c010ce893c92ed7a857427a50c2aba389a64dfae9956cf990aec1ac00221f5d6"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "73126f6c130c6e17e400570f04d2becd", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 879675, "upload_time": "2019-12-28T18:11:17", "upload_time_iso_8601": "2019-12-28T18:11:17.344250Z", "url": "https://files.pythonhosted.org/packages/9d/a3/4760f60ea27b1c38c0e3afd7180bc3005d7eb69adbe54f8b5372b23258a8/zstandard-0.13.0-cp37-cp37m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "193d1d88de3b3b3bbfcf1261c5a510fe", "sha256": "ddb3eb9ca4c6b58d28ce028316e99ac9ff312bbff6399a33cd856fea2478664d"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux1_i686.whl", "has_sig": false, "md5_digest": "193d1d88de3b3b3bbfcf1261c5a510fe", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 2975082, "upload_time": "2019-12-28T18:11:20", "upload_time_iso_8601": "2019-12-28T18:11:20.447394Z", "url": "https://files.pythonhosted.org/packages/62/8c/347766db2c8c5d82336c06589b8d022641c32e168104deb3beaf0be8ea22/zstandard-0.13.0-cp37-cp37m-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baad1668d1c77cae96ada26c14cbe5aa", "sha256": "e5f6659c862f55d048bcd0e772bbfe80f3d69c731999308996c6f90daf98b770"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "baad1668d1c77cae96ada26c14cbe5aa", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 4024287, "upload_time": "2019-12-28T18:11:23", "upload_time_iso_8601": "2019-12-28T18:11:23.471217Z", "url": "https://files.pythonhosted.org/packages/f5/b8/0f6e1d2a61278d68096269cc554e3c464a29dbe71a03545d2804cf9c11ce/zstandard-0.13.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2868b67a613afdd8b24ed3ee8ce9d82b", "sha256": "dd81cc69616e515984b8fc18bba73b0fb37e5600b3740eb835c6218445c1fa80"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "2868b67a613afdd8b24ed3ee8ce9d82b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 2975085, "upload_time": "2019-12-28T18:11:26", "upload_time_iso_8601": "2019-12-28T18:11:26.402988Z", "url": "https://files.pythonhosted.org/packages/b2/4f/63dd5f20dfc3d0b49eb8d57f2eef3a3cfd1c5c3491348efc4bd861608aa6/zstandard-0.13.0-cp37-cp37m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f9237590851b31a7dbac14c5a4665df", "sha256": "df5d0c97bb13898bde0c56e87faa1ff9c37108997f904cbd5d44cd62362ff8e5"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "2f9237590851b31a7dbac14c5a4665df", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 4024289, "upload_time": "2019-12-28T18:11:29", "upload_time_iso_8601": "2019-12-28T18:11:29.878072Z", "url": "https://files.pythonhosted.org/packages/31/ed/87690b2b119998036df3b28c3ca4a0aad02359cadf559e924c1ac87eee2c/zstandard-0.13.0-cp37-cp37m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e25322b6cd06fa1f129b53f09828286", "sha256": "b53622c0a2b3044d911f307a92ca1872c0d16db03475a3f907056ce03905e298"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux2014_i686.whl", "has_sig": false, "md5_digest": "7e25322b6cd06fa1f129b53f09828286", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3035548, "upload_time": "2019-12-28T18:11:33", "upload_time_iso_8601": "2019-12-28T18:11:33.286259Z", "url": "https://files.pythonhosted.org/packages/9e/01/276bb4f89bceed1310e3f05761ce4d3d23897afb190fdb0613cb24dcb7a7/zstandard-0.13.0-cp37-cp37m-manylinux2014_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "031e1884edb31d03fd05a617ab726ee9", "sha256": "b42860c8722c32e67731bf8b8fefc0f152eeebd461f7273ef53fae04ca19fbd0"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-manylinux2014_x86_64.whl", "has_sig": false, "md5_digest": "031e1884edb31d03fd05a617ab726ee9", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 3526760, "upload_time": "2019-12-28T18:11:36", "upload_time_iso_8601": "2019-12-28T18:11:36.460069Z", "url": "https://files.pythonhosted.org/packages/0a/16/b2329e714a1f216ba01742caf6853f520b3f1afc5fbcc8518f071989607a/zstandard-0.13.0-cp37-cp37m-manylinux2014_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08b196977ec3d9a83618ab7bfce1a0ba", "sha256": "77cd06c48cb9b5b96ac9d95f1de0a6d0c41d8e45cfdd8a76dac7a0ea1c9fa8c8"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "08b196977ec3d9a83618ab7bfce1a0ba", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 454255, "upload_time": "2019-12-28T18:11:39", "upload_time_iso_8601": "2019-12-28T18:11:39.534736Z", "url": "https://files.pythonhosted.org/packages/8f/ae/7b025585a52b036d6e1fa313bf5df406e7438fd505b66ce7aaabaac19872/zstandard-0.13.0-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1c238dd71c0ed5f314e4cdbbf604f0b", "sha256": "ea91080068f7491ee80d46d8b90ebc86b9794383645e974cb8c2d559fe215c00"}, "downloads": -1, "filename": "zstandard-0.13.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "e1c238dd71c0ed5f314e4cdbbf604f0b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 531707, "upload_time": "2019-12-28T18:11:41", "upload_time_iso_8601": "2019-12-28T18:11:41.950978Z", "url": "https://files.pythonhosted.org/packages/a3/30/cb55b524a07de64a44d2a38cae16c96bfd3a62a00f2acb2a49f0be516375/zstandard-0.13.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c18a0c6638caa8a38be530c3138b69", "sha256": "f1e64e1baea6bcaedc6df458f31fa79ffd2745999cc919862253d52e2eb67166"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "a6c18a0c6638caa8a38be530c3138b69", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 460873, "upload_time": "2019-12-28T18:11:44", "upload_time_iso_8601": "2019-12-28T18:11:44.734211Z", "url": "https://files.pythonhosted.org/packages/c6/79/a7b31258dfc071344e5e21976a395310330e72ffad0e3d12a68e3d2c82fe/zstandard-0.13.0-cp38-cp38-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6770faac52b0b3519b957d023b5c2a7", "sha256": "10fcf9fb35ed91c0fc7463974fcbfb696a831b151d6552fbd9bc870a1fd45601"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux1_i686.whl", "has_sig": false, "md5_digest": "b6770faac52b0b3519b957d023b5c2a7", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 3032011, "upload_time": "2019-12-28T18:11:47", "upload_time_iso_8601": "2019-12-28T18:11:47.441256Z", "url": "https://files.pythonhosted.org/packages/ac/0a/ecb8882fd651639194a776ee9acb7d6a0aa8716ea4cce11d812a6c5f5a7d/zstandard-0.13.0-cp38-cp38-manylinux1_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c62444c17ce83fbb9502bd7877c47e3", "sha256": "5d58b1a322312585b58aaa4c21f822be3e926fd4ce81f940b8dd4b873f000fa5"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "9c62444c17ce83fbb9502bd7877c47e3", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 4032680, "upload_time": "2019-12-28T18:11:50", "upload_time_iso_8601": "2019-12-28T18:11:50.475006Z", "url": "https://files.pythonhosted.org/packages/45/c6/6a7331a768d3208e440711c209036697f5b51a1294ae59973ad7abcaec69/zstandard-0.13.0-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a450cf2bc38b82e8c9c251bf04b6097", "sha256": "e3c5e65b9a157e72129c6a57e2bbbc47091823bb4ab83b41f05ff47ea1608dbb"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "9a450cf2bc38b82e8c9c251bf04b6097", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 2975407, "upload_time": "2019-12-28T18:11:53", "upload_time_iso_8601": "2019-12-28T18:11:53.588424Z", "url": "https://files.pythonhosted.org/packages/ae/a7/d9f38101a86c64d4e2a30c1c35955ecb56351a80055d780d65694aaebb38/zstandard-0.13.0-cp38-cp38-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3b6a7fe9539a369156e417ea7a8e43f", "sha256": "ab15c02af232325b2dfedb325a05e49717157f1243c47698046fe476e4111182"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "e3b6a7fe9539a369156e417ea7a8e43f", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 4032681, "upload_time": "2019-12-28T18:11:57", "upload_time_iso_8601": "2019-12-28T18:11:57.007487Z", "url": "https://files.pythonhosted.org/packages/50/92/8532005f6dd59986bce35af1ad0661c7cff7b677ee0a7fcb0d95293b17c4/zstandard-0.13.0-cp38-cp38-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c57ab4231b30e7b531ad330705eeeab5", "sha256": "2f3734428a65da36c82137daab5b3458d2e65f472315c4bd07996396309209a7"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux2014_i686.whl", "has_sig": false, "md5_digest": "c57ab4231b30e7b531ad330705eeeab5", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 3032015, "upload_time": "2019-12-28T18:11:59", "upload_time_iso_8601": "2019-12-28T18:11:59.950487Z", "url": "https://files.pythonhosted.org/packages/de/d5/5bd2107901963154d5df881d1c1eee27c340a3368baf603d88c24c88ad01/zstandard-0.13.0-cp38-cp38-manylinux2014_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c772fb0e6b37f40a454379d488f77675", "sha256": "2c77185a4cefe3774ef4de4bcbf477c6e5f7d106e6d0e0f9d97c8c8d85a7a7ce"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-manylinux2014_x86_64.whl", "has_sig": false, "md5_digest": "c772fb0e6b37f40a454379d488f77675", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 3528952, "upload_time": "2019-12-28T18:12:02", "upload_time_iso_8601": "2019-12-28T18:12:02.954270Z", "url": "https://files.pythonhosted.org/packages/d1/1f/24aa66bd30192ddd212a237f5d5933cca686445c7244d182f0a97f75e617/zstandard-0.13.0-cp38-cp38-manylinux2014_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86c77fed08dff9f48154043a9213b123", "sha256": "22daffeeab53105ed65bb2be9133f857617ae432415fe4d7b48976e38b14767b"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-win32.whl", "has_sig": false, "md5_digest": "86c77fed08dff9f48154043a9213b123", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 453465, "upload_time": "2019-12-28T18:12:05", "upload_time_iso_8601": "2019-12-28T18:12:05.937894Z", "url": "https://files.pythonhosted.org/packages/60/9e/a25e345d5f4b46ad7404d0cf7bbb8dc515f8ccf902095c416f96b0846c2d/zstandard-0.13.0-cp38-cp38-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebe467d00021c4069bfda21491023f00", "sha256": "5168161bad3ad4bfa3a9ac4cda168eec3eb5da640ef17d7d6c21f903d87dec51"}, "downloads": -1, "filename": "zstandard-0.13.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "ebe467d00021c4069bfda21491023f00", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 533209, "upload_time": "2019-12-28T18:12:08", "upload_time_iso_8601": "2019-12-28T18:12:08.597046Z", "url": "https://files.pythonhosted.org/packages/d0/5e/493e6bf3512f8dfbccf06ce6f61cc90daf3d9160a84fd16861f36ac89035/zstandard-0.13.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b894c7930073e7ab47d4ec7717dfad06", "sha256": "e5cbd8b751bd498f275b0582f449f92f14e64f4e03b5bf51c571240d40d43561"}, "downloads": -1, "filename": "zstandard-0.13.0.tar.gz", "has_sig": false, "md5_digest": "b894c7930073e7ab47d4ec7717dfad06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 659422, "upload_time": "2019-12-28T18:12:11", "upload_time_iso_8601": "2019-12-28T18:12:11.136443Z", "url": "https://files.pythonhosted.org/packages/b1/3d/b95e8beb3b2d165726c6105a728a1f59ae88d6bf1e3dc66375fbe149afcd/zstandard-0.13.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:56 2020"}