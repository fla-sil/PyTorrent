{"info": {"author": "Felix Krull", "author_email": "f_krull@gmx.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: System :: Boot", "Topic :: System :: Operating System"], "description": "# deploy-ostree: deploy and provision an OSTree commit\n\n[![pipeline status](https://gitlab.com/fkrull/deploy-ostree/badges/master/pipeline.svg)](https://gitlab.com/fkrull/deploy-ostree/pipelines)\n[![PyPI](https://img.shields.io/pypi/v/deploy-ostree.svg)](https://pypi.org/project/deploy-ostree/)\n[![python versions](https://img.shields.io/pypi/pyversions/deploy-ostree.svg)](https://pypi.org/project/deploy-ostree/)\n\n`deploy-ostree` is a tool to deploy and configure an [OSTree][ostree] commit\nwithout user input from a simple configuration file. It will:\n\n* set up the remote\n* pull the commit\n* create the stateroot\n* check out and deploy the tree\n* run additional provisioners to make the deployed system useful\n\nIts original intended use case was automatic tests; accordingly, it should not\nbe seen as a replacement for an end-user installer. `deploy-ostree` can serve\nas a tool to install a regular system, but it may also take shortcuts and do\nthings in a way that are fine for a disposable test environment, but might not\nbe fine in long-lived system.\n\n## Requirements\n\n* [Python][python] 3.5 or newer\n* [OSTree][ostree] 2018.4 or newer (older versions may work, but weren't tested)\n\n[python]: https://python.org\n[ostree]: https://ostree.readthedocs.io\n\nRunning `deploy-ostree` from inside a libostree deployment requires no\nadditional configuration (provided the bootloader is set up correctly). To run\n`deploy-ostree` on a system that's not using libostree, you need to first run\n`ostree admin init-fs /` to set up the libostree system repository and directory\nstructure. In addition, you may need to set up the bootloader. How to do this\ndepends on the OS, the architecture, and the bootloader in use.\n\n## Installation\n\nYou can install deploy-ostree using pip:\n\n```console\n$ pip3 install deploy-ostree\n```\n\n## Usage\n\n```console\n# deploy-ostree <config path or HTTP URL>\n```\n\nThis requires root permissions. If `deploy-ostree` exits successfully, your new\nOSTree deployment should be ready to boot.\n\n#### Command-Line Arguments\n\n* **--sysroot=SYSROOT**: install into the specified target root directory,\n  rather than `/`. Just like for `/`, the directory needs to exist and be\n  initialized for libostree use with `ostree admin init-fs <sysroot path>`.\n* **--karg-root=ROOT**: set the kernel `root` boot parameter to the given value.\n  By default, the `root` parameter of the current boot is used.\n* **--fstab=FSTAB**: copy the given file into the deployment as `/etc/fstab`. If\n  this parameter is omitted, the system fstab (`/etc/fstab`) is used.\n\n#### A Note on SELinux\n\nWhile not recommended, certain combinations of SELinux-using host systems and\nSELinux-using deployed systems might require disabling SELinux before deploying\nto avoid clashes between the host's SELinux policies and the SELinux labels in\nthe deployed tree. To temporarily disable SELinux:\n\n```console\n# setenforce 0\n```\n\n## Configuration Format\n\nConfiguration files must be either valid [JSON][json] or [TOML][toml] files. The\nsyntax of a configuration is determined by its file extension: if it's `.toml`\n(case-insensitive), it's parsed as a TOML file. Otherwise, it's considered a\nJSON file. While the syntax of the formats obviously differs, the structure\nused by `deploy-ostree` is the same for both, which means JSON configuration\nfiles can be converted to TOML using a generic JSON-to-TOML converter (and\nvice versa).\n\n[json]: https://www.json.org/\n[toml]: https://github.com/toml-lang/toml\n\nBoth formats use the same top-level configuration keys:\n\n* **url** or **path** *(required)*: path or URL to the OSTree repository to\n  pull from. Exactly one of these must be specified. If a relative path is\n  specified, it is interpreted relative to:\n  * if the configuration is a local file: the directory of the configuration\n    file.\n  * the current working directory otherwise.\n* **ref** *(required)*: OSTree commit to deploy.\n* **remote**: name for the OSTree remote. If this remote already exists, it it\n  replaced. By default, a random name is used.\n* **stateroot**: name of the OSTree stateroot to use. By default, a random name\n  is generated.\n* **kernel-args**: list of additional kernel arguments. The root partition is\n  always determined and included in the kernel command line automatically.\n* **provisioners**: list of provisioners to run after the OSTree commit is\n  checked out. This must be an array of objects. Each object defines a\n  provisioner based on the keys it contains. Different kinds of provisioners are\n  documented below.\n\n## Script Provisioners\n\nScript provisioners allow you to run custom script snippets defined inline in\nyour configuration file. These will be run in the deployment directory after\ndeployment, with both /etc and /var available.\n\nThe script is specified with the `script` key. The script text will be fed to\nthe interpreter over stdin. The interpreter is `/bin/sh` by default, but can be\noverridden using the `interpreter` key. Note that the interpreter needs to be\nable to consume a script from stdin with no further arguments. An optional\ndescription can be set with the `description` key. This line will be shown\nduring deploying to describe the provisioning step.\n\nThe working directory of the script is set to the root directory of the\ndeployment. Accordingly, any paths in the deployment should be relative to the\ncurrent directory. Note that the script is not chrooted in any way. This means\nyou can mess up the host system from your script if you're not careful!\n\nIf you need to run binaries from the deployed system, you can manually chroot\ninto the deployment directory. Ultimately, you have to weigh depending on your\nusecase whether you want to rely on the host system for any tools you need, or\nwhether you want to run things from the deployed system. Keep in mind that when\ndeploying cross-architecture, running binaries from the deployed system may not\nwork.\n\nJSON example:\n```json\n{\n    \"script\": \"echo my-system > ./etc/hostname\",\n    \"interpreter\": \"/bin/bash\",\n    \"description\": \"hostname\"\n}\n```\n\nTOML example:\n```toml\n[[provisioners]]\nscript = \"echo my-system > ./etc/hostname\"\ninterpreter = \"/bin/bash\"\ndescription = \"hostname\"\n```\n\n## Built-in Provisioners\n\nThese are the provisioners included with `deploy-ostree`. The name of the\nprovisioner must be set with the key `builtin` on the configuration object. Any\noptions documented below must also be specified in the provisioner configuration\nobject.\n\nJSON example:\n```json\n{\n    \"builtin\": \"root-password\",\n    \"password\": \"password\"\n}\n```\n\nTOML example:\n```toml\n[[provisioners]]\nbuiltin = \"root-password\"\npassword = \"password\"\n```\n\n#### etc-network-interfaces\n\nSet up the loopback interface and one other interface for DHCP with\n[/etc/network/interfaces][etc-network-interfaces]. This probably only applies\nto Debian-based systems and only for DHCP configuration. If you need different\nconfiguration, you will have to supply your own provisioner or use something\nlike NetworkManager.\n\n* **interface**: name of the interface to configure. By default, the default\n  network interface is retrieved from `/proc/net/route`. However, this might\n  differ between systems (especially if only one is using\n  [predictable interface names][predictable]) so it's not guaranteed to work.\n\n[etc-network-interfaces]: https://wiki.debian.org/NetworkConfiguration\n[predictable]: https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/\n\n#### root-password\n\nSet the root password.\n\n* **password** *(required)*: root password to set.\n\n#### create-user\n\nCreate a user. This does try to create the home directory, but if your system\nrequires anything more than the stateroot's `/var` being mounted, it may not\nwork.\n\n* **username** *(required)*: username of the user to create.\n* **password** *(required)*: password of the user to create.\n* **shell**: shell for the user. If not specified, the default shell is used.\n\n#### passwordless-sudo\n\nSet up a user for passwordless `sudo` access. For this to have any effect,\n`sudo` must be installed on your system.\n\n* **user** *(required)*: name of the user.\n\n#### authorized-keys\n\nCopy an SSH `authorized_keys` file from the host system into the deployed\nsystem. This is useful in [Vagrant][vagrant] scenarios, as it allows you to copy\nthe SSH key used by Vagrant into the deployed system.\n\n* **path** *(required)*: path of the keys file to copy into the deployed system.\n  This is a path on the system that is running `deploy-ostree`, not in the\n  deployed system.\n* **user** *(required)*: name of the user to receive the keys. This must be a\n  user in the deployed system. The file is copied to `.ssh/authorized_keys`\n  inside the user's home directory.\n\n[vagrant]: https://vagrantup.com\n\n#### machine-id\n\nCreate an `/etc/machine-id` file containing a random UUID. If the file already\nexists, it's not overwritten. This is necessary to get D-Bus to work on systems\nthat don't create a machine ID file on boot if missing.\n\n* **path**: alternative path to the file. If missing, `/etc/machine-id` is used.\n  Any directories in the path that are missing will be created.\n\n## Example Config\n\nThis configuration will download and deploy [CentOS Atomic Host][centos-atomic],\nset up `/etc/fstab`, and create a user and set it up for passwordless `sudo`.\n\nJSON:\n```json\n{\n    \"url\": \"http://mirror.centos.org/centos/7/atomic/x86_64/repo/\",\n    \"ref\": \"centos-atomic-host/7/x86_64/standard\",\n    \"remote\": \"centos-atomic\",\n    \"stateroot\": \"centos-atomic-host\",\n    \"kernel-args\": [\"quiet\", \"splash\"],\n\n    \"provisioners\": [\n        {\n            \"builtin\": \"create-user\",\n            \"username\": \"atomic\",\n            \"password\": \"atomic\",\n            \"shell\": \"/usr/bin/bash\"\n        },\n        {\n            \"script\": \"echo centos-atomic-host > etc/hostname\",\n            \"description\": \"hostname\"\n        },\n        {\n            \"builtin\": \"passwordless-sudo\",\n            \"user\": \"atomic\"\n        }\n    ]\n}\n```\n\nTOML:\n```toml\nurl = \"http://mirror.centos.org/centos/7/atomic/x86_64/repo/\"\nref = \"centos-atomic-host/7/x86_64/standard\"\nremote = \"centos-atomic\"\nstateroot = \"centos-atomic-host\"\nkernel-args = [\"quiet\", \"splash\"]\n\n[[provisioners]]\nbuiltin = \"create-user\"\nusername = \"atomic\"\npassword = \"atomic\"\nshell = \"/usr/bin/bash\"\n\n[[provisioners]]\nscript = \"echo centos-atomic-host > etc/hostname\"\ndescription = \"hostname\"\n\n[[provisioners]]\nbuiltin = \"passwordless-sudo\"\nuser = \"atomic\"\n```\n\nNote that CentOS Atomic Host includes [cloud-init][cloud-init] which means it\nwill spend some time unsuccessfully doing its cloud setup. This is awkward, but\nthere's not a lot of OSTree systems to demonstrate with so here we are.\n\n[centos-atomic]: https://wiki.centos.org/SpecialInterestGroup/Atomic/Download\n[cloud-init]: http://www.projectatomic.io/blog/2014/10/getting-started-with-cloud-init/\n\n## Version History\n\nSee [the changelog][changelog] for a list of versions and their changes.\n\n[changelog]: https://gitlab.com/fkrull/deploy-ostree/blob/master/CHANGELOG.md\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/fkrull/deploy-ostree", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "deploy-ostree", "package_url": "https://pypi.org/project/deploy-ostree/", "platform": "", "project_url": "https://pypi.org/project/deploy-ostree/", "project_urls": {"Homepage": "https://gitlab.com/fkrull/deploy-ostree"}, "release_url": "https://pypi.org/project/deploy-ostree/1.3.0/", "requires_dist": ["toml (>=0.10)", "flake8 ; extra == 'dev'", "mypy ; extra == 'dev'", "pytest ; extra == 'dev'", "twine (>=1.12) ; extra == 'dev'", "readme-renderer[md] ; extra == 'dev'", "pytest ; extra == 'test'"], "requires_python": "", "summary": "Deploy and configure an OSTree commit", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>deploy-ostree: deploy and provision an OSTree commit</h1>\n<p><a href=\"https://gitlab.com/fkrull/deploy-ostree/pipelines\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89f4b861b882420d136887ff5c9b5fd9f3505e5f/68747470733a2f2f6769746c61622e636f6d2f666b72756c6c2f6465706c6f792d6f73747265652f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://pypi.org/project/deploy-ostree/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/abad97f3379279eec0b2e7f724860a9dd4dfb405/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6465706c6f792d6f73747265652e737667\"></a>\n<a href=\"https://pypi.org/project/deploy-ostree/\" rel=\"nofollow\"><img alt=\"python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4aa8d6cfe9c7ea2bf50d3b0ac4cecd40998f73cb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6465706c6f792d6f73747265652e737667\"></a></p>\n<p><code>deploy-ostree</code> is a tool to deploy and configure an <a href=\"https://ostree.readthedocs.io\" rel=\"nofollow\">OSTree</a> commit\nwithout user input from a simple configuration file. It will:</p>\n<ul>\n<li>set up the remote</li>\n<li>pull the commit</li>\n<li>create the stateroot</li>\n<li>check out and deploy the tree</li>\n<li>run additional provisioners to make the deployed system useful</li>\n</ul>\n<p>Its original intended use case was automatic tests; accordingly, it should not\nbe seen as a replacement for an end-user installer. <code>deploy-ostree</code> can serve\nas a tool to install a regular system, but it may also take shortcuts and do\nthings in a way that are fine for a disposable test environment, but might not\nbe fine in long-lived system.</p>\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://python.org\" rel=\"nofollow\">Python</a> 3.5 or newer</li>\n<li><a href=\"https://ostree.readthedocs.io\" rel=\"nofollow\">OSTree</a> 2018.4 or newer (older versions may work, but weren't tested)</li>\n</ul>\n<p>Running <code>deploy-ostree</code> from inside a libostree deployment requires no\nadditional configuration (provided the bootloader is set up correctly). To run\n<code>deploy-ostree</code> on a system that's not using libostree, you need to first run\n<code>ostree admin init-fs /</code> to set up the libostree system repository and directory\nstructure. In addition, you may need to set up the bootloader. How to do this\ndepends on the OS, the architecture, and the bootloader in use.</p>\n<h2>Installation</h2>\n<p>You can install deploy-ostree using pip:</p>\n<pre><span class=\"gp\">$</span> pip3 install deploy-ostree\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"gp\">#</span> deploy-ostree &lt;config path or HTTP URL&gt;\n</pre>\n<p>This requires root permissions. If <code>deploy-ostree</code> exits successfully, your new\nOSTree deployment should be ready to boot.</p>\n<h4>Command-Line Arguments</h4>\n<ul>\n<li><strong>--sysroot=SYSROOT</strong>: install into the specified target root directory,\nrather than <code>/</code>. Just like for <code>/</code>, the directory needs to exist and be\ninitialized for libostree use with <code>ostree admin init-fs &lt;sysroot path&gt;</code>.</li>\n<li><strong>--karg-root=ROOT</strong>: set the kernel <code>root</code> boot parameter to the given value.\nBy default, the <code>root</code> parameter of the current boot is used.</li>\n<li><strong>--fstab=FSTAB</strong>: copy the given file into the deployment as <code>/etc/fstab</code>. If\nthis parameter is omitted, the system fstab (<code>/etc/fstab</code>) is used.</li>\n</ul>\n<h4>A Note on SELinux</h4>\n<p>While not recommended, certain combinations of SELinux-using host systems and\nSELinux-using deployed systems might require disabling SELinux before deploying\nto avoid clashes between the host's SELinux policies and the SELinux labels in\nthe deployed tree. To temporarily disable SELinux:</p>\n<pre><span class=\"gp\">#</span> setenforce <span class=\"m\">0</span>\n</pre>\n<h2>Configuration Format</h2>\n<p>Configuration files must be either valid <a href=\"https://www.json.org/\" rel=\"nofollow\">JSON</a> or <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> files. The\nsyntax of a configuration is determined by its file extension: if it's <code>.toml</code>\n(case-insensitive), it's parsed as a TOML file. Otherwise, it's considered a\nJSON file. While the syntax of the formats obviously differs, the structure\nused by <code>deploy-ostree</code> is the same for both, which means JSON configuration\nfiles can be converted to TOML using a generic JSON-to-TOML converter (and\nvice versa).</p>\n<p>Both formats use the same top-level configuration keys:</p>\n<ul>\n<li><strong>url</strong> or <strong>path</strong> <em>(required)</em>: path or URL to the OSTree repository to\npull from. Exactly one of these must be specified. If a relative path is\nspecified, it is interpreted relative to:\n<ul>\n<li>if the configuration is a local file: the directory of the configuration\nfile.</li>\n<li>the current working directory otherwise.</li>\n</ul>\n</li>\n<li><strong>ref</strong> <em>(required)</em>: OSTree commit to deploy.</li>\n<li><strong>remote</strong>: name for the OSTree remote. If this remote already exists, it it\nreplaced. By default, a random name is used.</li>\n<li><strong>stateroot</strong>: name of the OSTree stateroot to use. By default, a random name\nis generated.</li>\n<li><strong>kernel-args</strong>: list of additional kernel arguments. The root partition is\nalways determined and included in the kernel command line automatically.</li>\n<li><strong>provisioners</strong>: list of provisioners to run after the OSTree commit is\nchecked out. This must be an array of objects. Each object defines a\nprovisioner based on the keys it contains. Different kinds of provisioners are\ndocumented below.</li>\n</ul>\n<h2>Script Provisioners</h2>\n<p>Script provisioners allow you to run custom script snippets defined inline in\nyour configuration file. These will be run in the deployment directory after\ndeployment, with both /etc and /var available.</p>\n<p>The script is specified with the <code>script</code> key. The script text will be fed to\nthe interpreter over stdin. The interpreter is <code>/bin/sh</code> by default, but can be\noverridden using the <code>interpreter</code> key. Note that the interpreter needs to be\nable to consume a script from stdin with no further arguments. An optional\ndescription can be set with the <code>description</code> key. This line will be shown\nduring deploying to describe the provisioning step.</p>\n<p>The working directory of the script is set to the root directory of the\ndeployment. Accordingly, any paths in the deployment should be relative to the\ncurrent directory. Note that the script is not chrooted in any way. This means\nyou can mess up the host system from your script if you're not careful!</p>\n<p>If you need to run binaries from the deployed system, you can manually chroot\ninto the deployment directory. Ultimately, you have to weigh depending on your\nusecase whether you want to rely on the host system for any tools you need, or\nwhether you want to run things from the deployed system. Keep in mind that when\ndeploying cross-architecture, running binaries from the deployed system may not\nwork.</p>\n<p>JSON example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"script\"</span><span class=\"p\">:</span> <span class=\"s2\">\"echo my-system &gt; ./etc/hostname\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"interpreter\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/bin/bash\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hostname\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>TOML example:</p>\n<pre><span class=\"k\">[[provisioners]]</span>\n<span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"s\">\"echo my-system &gt; ./etc/hostname\"</span>\n<span class=\"n\">interpreter</span> <span class=\"o\">=</span> <span class=\"s\">\"/bin/bash\"</span>\n<span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s\">\"hostname\"</span>\n</pre>\n<h2>Built-in Provisioners</h2>\n<p>These are the provisioners included with <code>deploy-ostree</code>. The name of the\nprovisioner must be set with the key <code>builtin</code> on the configuration object. Any\noptions documented below must also be specified in the provisioner configuration\nobject.</p>\n<p>JSON example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"builtin\"</span><span class=\"p\">:</span> <span class=\"s2\">\"root-password\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"password\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>TOML example:</p>\n<pre><span class=\"k\">[[provisioners]]</span>\n<span class=\"n\">builtin</span> <span class=\"o\">=</span> <span class=\"s\">\"root-password\"</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s\">\"password\"</span>\n</pre>\n<h4>etc-network-interfaces</h4>\n<p>Set up the loopback interface and one other interface for DHCP with\n<a href=\"https://wiki.debian.org/NetworkConfiguration\" rel=\"nofollow\">/etc/network/interfaces</a>. This probably only applies\nto Debian-based systems and only for DHCP configuration. If you need different\nconfiguration, you will have to supply your own provisioner or use something\nlike NetworkManager.</p>\n<ul>\n<li><strong>interface</strong>: name of the interface to configure. By default, the default\nnetwork interface is retrieved from <code>/proc/net/route</code>. However, this might\ndiffer between systems (especially if only one is using\n<a href=\"https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/\" rel=\"nofollow\">predictable interface names</a>) so it's not guaranteed to work.</li>\n</ul>\n<h4>root-password</h4>\n<p>Set the root password.</p>\n<ul>\n<li><strong>password</strong> <em>(required)</em>: root password to set.</li>\n</ul>\n<h4>create-user</h4>\n<p>Create a user. This does try to create the home directory, but if your system\nrequires anything more than the stateroot's <code>/var</code> being mounted, it may not\nwork.</p>\n<ul>\n<li><strong>username</strong> <em>(required)</em>: username of the user to create.</li>\n<li><strong>password</strong> <em>(required)</em>: password of the user to create.</li>\n<li><strong>shell</strong>: shell for the user. If not specified, the default shell is used.</li>\n</ul>\n<h4>passwordless-sudo</h4>\n<p>Set up a user for passwordless <code>sudo</code> access. For this to have any effect,\n<code>sudo</code> must be installed on your system.</p>\n<ul>\n<li><strong>user</strong> <em>(required)</em>: name of the user.</li>\n</ul>\n<h4>authorized-keys</h4>\n<p>Copy an SSH <code>authorized_keys</code> file from the host system into the deployed\nsystem. This is useful in <a href=\"https://vagrantup.com\" rel=\"nofollow\">Vagrant</a> scenarios, as it allows you to copy\nthe SSH key used by Vagrant into the deployed system.</p>\n<ul>\n<li><strong>path</strong> <em>(required)</em>: path of the keys file to copy into the deployed system.\nThis is a path on the system that is running <code>deploy-ostree</code>, not in the\ndeployed system.</li>\n<li><strong>user</strong> <em>(required)</em>: name of the user to receive the keys. This must be a\nuser in the deployed system. The file is copied to <code>.ssh/authorized_keys</code>\ninside the user's home directory.</li>\n</ul>\n<h4>machine-id</h4>\n<p>Create an <code>/etc/machine-id</code> file containing a random UUID. If the file already\nexists, it's not overwritten. This is necessary to get D-Bus to work on systems\nthat don't create a machine ID file on boot if missing.</p>\n<ul>\n<li><strong>path</strong>: alternative path to the file. If missing, <code>/etc/machine-id</code> is used.\nAny directories in the path that are missing will be created.</li>\n</ul>\n<h2>Example Config</h2>\n<p>This configuration will download and deploy <a href=\"https://wiki.centos.org/SpecialInterestGroup/Atomic/Download\" rel=\"nofollow\">CentOS Atomic Host</a>,\nset up <code>/etc/fstab</code>, and create a user and set it up for passwordless <code>sudo</code>.</p>\n<p>JSON:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://mirror.centos.org/centos/7/atomic/x86_64/repo/\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"ref\"</span><span class=\"p\">:</span> <span class=\"s2\">\"centos-atomic-host/7/x86_64/standard\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"remote\"</span><span class=\"p\">:</span> <span class=\"s2\">\"centos-atomic\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"stateroot\"</span><span class=\"p\">:</span> <span class=\"s2\">\"centos-atomic-host\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"kernel-args\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"quiet\"</span><span class=\"p\">,</span> <span class=\"s2\">\"splash\"</span><span class=\"p\">],</span>\n\n    <span class=\"nt\">\"provisioners\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"builtin\"</span><span class=\"p\">:</span> <span class=\"s2\">\"create-user\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"atomic\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"atomic\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"shell\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/usr/bin/bash\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"script\"</span><span class=\"p\">:</span> <span class=\"s2\">\"echo centos-atomic-host &gt; etc/hostname\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hostname\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"builtin\"</span><span class=\"p\">:</span> <span class=\"s2\">\"passwordless-sudo\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"user\"</span><span class=\"p\">:</span> <span class=\"s2\">\"atomic\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>TOML:</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"http://mirror.centos.org/centos/7/atomic/x86_64/repo/\"</span>\n<span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"s\">\"centos-atomic-host/7/x86_64/standard\"</span>\n<span class=\"n\">remote</span> <span class=\"o\">=</span> <span class=\"s\">\"centos-atomic\"</span>\n<span class=\"n\">stateroot</span> <span class=\"o\">=</span> <span class=\"s\">\"centos-atomic-host\"</span>\n<span class=\"n\">kernel-args</span> <span class=\"o\">=</span> <span class=\"k\">[\"quiet\", \"splash\"]</span>\n\n<span class=\"k\">[[provisioners]]</span>\n<span class=\"n\">builtin</span> <span class=\"o\">=</span> <span class=\"s\">\"create-user\"</span>\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s\">\"atomic\"</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s\">\"atomic\"</span>\n<span class=\"n\">shell</span> <span class=\"o\">=</span> <span class=\"s\">\"/usr/bin/bash\"</span>\n\n<span class=\"k\">[[provisioners]]</span>\n<span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"s\">\"echo centos-atomic-host &gt; etc/hostname\"</span>\n<span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s\">\"hostname\"</span>\n\n<span class=\"k\">[[provisioners]]</span>\n<span class=\"n\">builtin</span> <span class=\"o\">=</span> <span class=\"s\">\"passwordless-sudo\"</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"s\">\"atomic\"</span>\n</pre>\n<p>Note that CentOS Atomic Host includes <a href=\"http://www.projectatomic.io/blog/2014/10/getting-started-with-cloud-init/\" rel=\"nofollow\">cloud-init</a> which means it\nwill spend some time unsuccessfully doing its cloud setup. This is awkward, but\nthere's not a lot of OSTree systems to demonstrate with so here we are.</p>\n<h2>Version History</h2>\n<p>See <a href=\"https://gitlab.com/fkrull/deploy-ostree/blob/master/CHANGELOG.md\" rel=\"nofollow\">the changelog</a> for a list of versions and their changes.</p>\n\n          </div>"}, "last_serial": 5739759, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "18f85513b7971d869956925c7917afd0", "sha256": "b437a16251ab8577cd2c6c5eb00514fc260b1b5d8b6439444ac3b7c984854986"}, "downloads": -1, "filename": "deploy_ostree-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "18f85513b7971d869956925c7917afd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16583, "upload_time": "2018-09-02T17:51:26", "upload_time_iso_8601": "2018-09-02T17:51:26.827341Z", "url": "https://files.pythonhosted.org/packages/e6/27/34390362905ef7ee2d88f60480b981bdb500327911ac1f7736c2bb3548f6/deploy_ostree-1.0.0-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2591090256beeaa1847d9be21ab42ef2", "sha256": "475b579514e5a3ca699a6ca669048f71f183b2bf9a7e53c117fd780c9e96375d"}, "downloads": -1, "filename": "deploy_ostree-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2591090256beeaa1847d9be21ab42ef2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17984, "upload_time": "2018-09-15T11:56:22", "upload_time_iso_8601": "2018-09-15T11:56:22.710569Z", "url": "https://files.pythonhosted.org/packages/6f/6d/23c765312bbe63c303b69f2c9ad84f2c40b2b3eb4605e845934305f4dd46/deploy_ostree-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.0.dev20180915111828": [{"comment_text": "", "digests": {"md5": "ef243fad4c31dee52de5f5fe1c04de0c", "sha256": "ff21c4191065a03863ef1c7c050fdb1870b05aed5c2036d4e9a0f95cc781e1f7"}, "downloads": -1, "filename": "deploy_ostree-1.1.0.dev20180915111828-py3-none-any.whl", "has_sig": false, "md5_digest": "ef243fad4c31dee52de5f5fe1c04de0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18196, "upload_time": "2018-09-15T11:35:28", "upload_time_iso_8601": "2018-09-15T11:35:28.946389Z", "url": "https://files.pythonhosted.org/packages/90/92/d83e46c94eb1d63a717634b604d767af301b86a0e9bf621d4459c97b8bdb/deploy_ostree-1.1.0.dev20180915111828-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "aaa7464bb4000a9aabca9225b5821016", "sha256": "af16f5dfa31f3d02e5fd4b725ff1c69619b2a277cb7a1ae448783b10b646d580"}, "downloads": -1, "filename": "deploy_ostree-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aaa7464bb4000a9aabca9225b5821016", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17967, "upload_time": "2018-09-16T15:56:43", "upload_time_iso_8601": "2018-09-16T15:56:43.802006Z", "url": "https://files.pythonhosted.org/packages/c2/76/0f8ab2379568eaf964de7fceedf4bae419abbcfc9c37f641b01171591f77/deploy_ostree-1.1.1-py3-none-any.whl", "yanked": false}], "1.1.1.dev20180916111948": [{"comment_text": "", "digests": {"md5": "0ae6011ad6facfaa04582f9cdc6c8c44", "sha256": "5e19955a300db8fca7fb7fc182af139f0e480199c2fabd0845963b2c5bda8233"}, "downloads": -1, "filename": "deploy_ostree-1.1.1.dev20180916111948-py3-none-any.whl", "has_sig": false, "md5_digest": "0ae6011ad6facfaa04582f9cdc6c8c44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18216, "upload_time": "2018-09-16T11:39:09", "upload_time_iso_8601": "2018-09-16T11:39:09.951823Z", "url": "https://files.pythonhosted.org/packages/ba/0c/38a30d3025ea75a99345fc6a0850ca6ea5386f7f68701bc81a683e2f4951/deploy_ostree-1.1.1.dev20180916111948-py3-none-any.whl", "yanked": false}], "1.1.1.dev20180916144206": [{"comment_text": "", "digests": {"md5": "4aedac7b4a64bd9897a93698f25ce980", "sha256": "36d40478898e8d5d1cc0ecfe7732a92d20418601385f253fc063806ee4b8225a"}, "downloads": -1, "filename": "deploy_ostree-1.1.1.dev20180916144206-py3-none-any.whl", "has_sig": false, "md5_digest": "4aedac7b4a64bd9897a93698f25ce980", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18181, "upload_time": "2018-09-16T15:07:37", "upload_time_iso_8601": "2018-09-16T15:07:37.972185Z", "url": "https://files.pythonhosted.org/packages/69/a7/0bcf6a4a9562c62b1e3df6c87ae2626bdb8d68e1327d4125f9c01447f829/deploy_ostree-1.1.1.dev20180916144206-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "a9309f2d6f6f6fda070db3f84df24844", "sha256": "aad4db60bef44dda70def5023f33dbb5bdac7fa36208ad2b4e22c4f0ed914850"}, "downloads": -1, "filename": "deploy_ostree-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a9309f2d6f6f6fda070db3f84df24844", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21387, "upload_time": "2019-03-29T22:43:10", "upload_time_iso_8601": "2019-03-29T22:43:10.230618Z", "url": "https://files.pythonhosted.org/packages/4d/94/d8de9ca8609bed4a8b023561b02bc852df01966de53d4f695ec6bbc85fec/deploy_ostree-1.2.0-py3-none-any.whl", "yanked": false}], "1.2.0.dev20190326221640": [{"comment_text": "", "digests": {"md5": "b66ed4a62f9097414926a754b1e644fc", "sha256": "0ba9c3c1d702bf557b0c9db174d3297f2f24691ab7141d7c401f00857974b7d7"}, "downloads": -1, "filename": "deploy_ostree-1.2.0.dev20190326221640-py3-none-any.whl", "has_sig": false, "md5_digest": "b66ed4a62f9097414926a754b1e644fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21589, "upload_time": "2019-03-26T22:26:06", "upload_time_iso_8601": "2019-03-26T22:26:06.950064Z", "url": "https://files.pythonhosted.org/packages/b8/0c/a8ed5c818955f2e435afc3d77ca26e44c62e73e756cc38a807c6963e7fca/deploy_ostree-1.2.0.dev20190326221640-py3-none-any.whl", "yanked": false}], "1.2.0.dev20190327120934": [{"comment_text": "", "digests": {"md5": "1520551e53ed7cb09008a89d92433285", "sha256": "c7bb6c2562d10bb67dcd3fcc8f766700a93a96c11a8cd56e15fc8eb03a7a8330"}, "downloads": -1, "filename": "deploy_ostree-1.2.0.dev20190327120934-py3-none-any.whl", "has_sig": false, "md5_digest": "1520551e53ed7cb09008a89d92433285", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21599, "upload_time": "2019-03-27T12:16:53", "upload_time_iso_8601": "2019-03-27T12:16:53.947438Z", "url": "https://files.pythonhosted.org/packages/9b/11/1408df55047f096f4d59ea9e26e8917daa00408485d89f391af88a41e3a6/deploy_ostree-1.2.0.dev20190327120934-py3-none-any.whl", "yanked": false}], "1.2.0.dev20190327225122": [{"comment_text": "", "digests": {"md5": "34f997ee00d35cfecd5fe3b944337dbc", "sha256": "2e22291f3031d736a0565d666b48ab87ffcd2b4cb9640ea61f54a1996979c397"}, "downloads": -1, "filename": "deploy_ostree-1.2.0.dev20190327225122-py3-none-any.whl", "has_sig": false, "md5_digest": "34f997ee00d35cfecd5fe3b944337dbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21492, "upload_time": "2019-03-27T23:18:21", "upload_time_iso_8601": "2019-03-27T23:18:21.207480Z", "url": "https://files.pythonhosted.org/packages/79/de/ff6cdcc34700a31d0e34920dc06f611cae3b16f7d0e1e405de03f86809a5/deploy_ostree-1.2.0.dev20190327225122-py3-none-any.whl", "yanked": false}], "1.2.0.dev20190329185930": [{"comment_text": "", "digests": {"md5": "88cfffe1283224f161b2486cfbd5c6dd", "sha256": "41b99fe248c6c307937049c297506bad242530ff729fc8f85e96ba083e46382f"}, "downloads": -1, "filename": "deploy_ostree-1.2.0.dev20190329185930-py3-none-any.whl", "has_sig": false, "md5_digest": "88cfffe1283224f161b2486cfbd5c6dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21640, "upload_time": "2019-03-29T19:39:51", "upload_time_iso_8601": "2019-03-29T19:39:51.552578Z", "url": "https://files.pythonhosted.org/packages/63/90/e190658247b705e6f39d3ee440cadb62b0c524494ff9adafd283c9f25656/deploy_ostree-1.2.0.dev20190329185930-py3-none-any.whl", "yanked": false}], "1.2.0.dev20190330144307": [{"comment_text": "", "digests": {"md5": "595abaef8c4c82bb3d52a7ae163cfad7", "sha256": "c9215514f9ca9d54176dc140a8776f70a4b3fe2e6eb3553137fc027511a17a16"}, "downloads": -1, "filename": "deploy_ostree-1.2.0.dev20190330144307-py3-none-any.whl", "has_sig": false, "md5_digest": "595abaef8c4c82bb3d52a7ae163cfad7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22052, "upload_time": "2019-03-30T15:12:18", "upload_time_iso_8601": "2019-03-30T15:12:18.953407Z", "url": "https://files.pythonhosted.org/packages/7f/80/6ee09afcc21839418b2cf0e254c1906b5c1d9a1ada49891a21fcafca1cd3/deploy_ostree-1.2.0.dev20190330144307-py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "1d5a4b3135ab3f0114152563ee5cd235", "sha256": "d4edc778114a116d2f86ff692104eff81075ba1f505c5f6f10dd34448dbc595c"}, "downloads": -1, "filename": "deploy_ostree-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d5a4b3135ab3f0114152563ee5cd235", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23865, "upload_time": "2019-08-27T22:39:23", "upload_time_iso_8601": "2019-08-27T22:39:23.738989Z", "url": "https://files.pythonhosted.org/packages/71/06/193f34827c9f9134a8ea54eeb3759ad494d6169866fbbafa2587e96dc64f/deploy_ostree-1.3.0-py3-none-any.whl", "yanked": false}], "1.3.0.dev20190330154959": [{"comment_text": "", "digests": {"md5": "bf0d02a3df81e74093bf04b2df9869e2", "sha256": "8d07d6137119af732840720b4f1752bd48bf9b705c03de7c8a0bc192afa9be7a"}, "downloads": -1, "filename": "deploy_ostree-1.3.0.dev20190330154959-py3-none-any.whl", "has_sig": false, "md5_digest": "bf0d02a3df81e74093bf04b2df9869e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22057, "upload_time": "2019-03-30T15:58:36", "upload_time_iso_8601": "2019-03-30T15:58:36.484364Z", "url": "https://files.pythonhosted.org/packages/f7/28/bd1e62dd2964fce137e2974d02b9a09b2202dce9482d0589f0272746946a/deploy_ostree-1.3.0.dev20190330154959-py3-none-any.whl", "yanked": false}], "1.3.0.dev20190403221302": [{"comment_text": "", "digests": {"md5": "0d1785709e07b43587f0a9573631d5f3", "sha256": "567efbc9c256dd5c480ed71cdf0e213ce83223060abbb48f03d40cbff848b0bd"}, "downloads": -1, "filename": "deploy_ostree-1.3.0.dev20190403221302-py3-none-any.whl", "has_sig": false, "md5_digest": "0d1785709e07b43587f0a9573631d5f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22612, "upload_time": "2019-04-03T22:21:24", "upload_time_iso_8601": "2019-04-03T22:21:24.332361Z", "url": "https://files.pythonhosted.org/packages/64/c5/577146e3daba5bce85ac2037961f2318518899ca1232e20b19078a4ac986/deploy_ostree-1.3.0.dev20190403221302-py3-none-any.whl", "yanked": false}], "1.3.0.dev20190404201359": [{"comment_text": "", "digests": {"md5": "1650defcf7cd02953700069701d1ab5f", "sha256": "3a01371e88101c51a402a343dbadc4b4945dd81f17e14f36b35ca4b1936217c5"}, "downloads": -1, "filename": "deploy_ostree-1.3.0.dev20190404201359-py3-none-any.whl", "has_sig": false, "md5_digest": "1650defcf7cd02953700069701d1ab5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24107, "upload_time": "2019-04-04T22:13:02", "upload_time_iso_8601": "2019-04-04T22:13:02.614835Z", "url": "https://files.pythonhosted.org/packages/a4/d8/12202c3abe87b644652f40bf1b435f7a48a2796434ce387f799fd1d3a437/deploy_ostree-1.3.0.dev20190404201359-py3-none-any.whl", "yanked": false}], "1.3.0.dev20190408151327": [{"comment_text": "", "digests": {"md5": "4265437a01271107ee54211ae2ae7f75", "sha256": "2847cfbd87e6febe3db181fbca8f99ed3724bb9ffaffc26bac4e5b0d937725ec"}, "downloads": -1, "filename": "deploy_ostree-1.3.0.dev20190408151327-py3-none-any.whl", "has_sig": false, "md5_digest": "4265437a01271107ee54211ae2ae7f75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24114, "upload_time": "2019-04-08T16:11:10", "upload_time_iso_8601": "2019-04-08T16:11:10.604453Z", "url": "https://files.pythonhosted.org/packages/a2/a1/ca8fd16fd0df59f15ab0e22e323726c89317ed7e79c38a8869e14467fad7/deploy_ostree-1.3.0.dev20190408151327-py3-none-any.whl", "yanked": false}], "1.3.0.dev20190827221735": [{"comment_text": "", "digests": {"md5": "5b91699f05b20a37d7e43b0bbc4435b0", "sha256": "98f0cb76b57ef86092628799ba05da8e3823340c6cea2426fec433ed98d68825"}, "downloads": -1, "filename": "deploy_ostree-1.3.0.dev20190827221735-py3-none-any.whl", "has_sig": false, "md5_digest": "5b91699f05b20a37d7e43b0bbc4435b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24115, "upload_time": "2019-08-27T22:22:30", "upload_time_iso_8601": "2019-08-27T22:22:30.870755Z", "url": "https://files.pythonhosted.org/packages/57/97/7da6aeab54b5d579225f6310ade7adbf403cb1f56faf382adcf7f73bc8ba/deploy_ostree-1.3.0.dev20190827221735-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d5a4b3135ab3f0114152563ee5cd235", "sha256": "d4edc778114a116d2f86ff692104eff81075ba1f505c5f6f10dd34448dbc595c"}, "downloads": -1, "filename": "deploy_ostree-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d5a4b3135ab3f0114152563ee5cd235", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23865, "upload_time": "2019-08-27T22:39:23", "upload_time_iso_8601": "2019-08-27T22:39:23.738989Z", "url": "https://files.pythonhosted.org/packages/71/06/193f34827c9f9134a8ea54eeb3759ad494d6169866fbbafa2587e96dc64f/deploy_ostree-1.3.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:39:02 2020"}