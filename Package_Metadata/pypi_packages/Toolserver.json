{"info": {"author": "Georg Bauer", "author_email": "gb@rfc1437.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "This software is OSI Certified Open Source Software. OSI Certified is a\n   certification mark of the Open Source Initiative.\n\nThe Toolserver Framework for Python is a framework for easy webservice creation.\nIt's main property is that it runs as a standalone server and so can easily be\ndeployed. It uses medusa as it's webserver core, but sports a threading model\nthat is much like the process model of Apache 1.3.\n\nFor the license under that this software is distributed, read LICENSE.\n\nFor an installation instruction read the file INSTALL (essentially you\ncan just do easy_install toolserver, but read it anyway for some info\non dependencies you have to satisfy manually).\n\nFor more info look at the bitbucket page: http://bitbucket.org/rfc1437/toolserver/\n\nSome highlights why you might want to look into TooFPy:\n\n- industry strength and fast webserver as the base. Static content\n  is delivered directly by the high performance Medusa server, dynamic\n  content is delivered by dynamically managed worker threads.\n\n- namespaces for tools as the base for URL construction. Intermingled\n  with a standard static webserver to fill in those areas where no\n  tools are registered.\n\n- concentrates on building the API, not on building a full web\n  application. You can build a web application, if you want, but you\n  don't need to. Want to just expose some quick hacks to SOAP or\n  XMLRPC? Piece of cake.\n\n- all APIs are dual use: they can be accessed over the web or they can\n  be accessed internally in other tools. If you build a full web application,\n  it will be composed of communicating tools where the tool communication\n  is by calling well defined APIs that are both used internally and can\n  be used externally, as well (if you decide so).\n\n- automatic documentation generation for tools, both in HTML format (for\n  human consumption) and WSDL format (for SOAP clients that need those).\n  Just go to http://localhost:4334/API/ (assuming your server runs on the\n  default port and the localhost IP) and you will get a list of links to\n  installed tools with their respective API documentations - all generated\n  on-the-fly from your tools sources!\n\n- programming by contract for Web APIs! Of course, contracts are part of\n  the human readable documentation. Contract checking can be switched\n  on or off.\n\n- wrapper based REST style APIs built over your standard RPC style\n  APIs - no need to fight over API style anymore!\n\n- factory tools that generate transient tools that themselves can\n  be factories. This gives you fully dynamic namespaces.\n\n- integrated authentication scheme for REST style API usage. This\n  enables you to build your own authentication level above the tools\n  without forcing some prebuilt scheme on you. This changed in 0.3.6,\n  so now there are actually two authentication schemes, the newer one\n  is build on standard user+group definitions, can be based on IP and\n  HTTP basic authentication and can make use of a non-standard RSA\n  authentication.\n\n- integrated tools for powerfull thread management. Method calls can\n  be made synchronously and asynchronously (using the same thread pool as\n  the dynamic web content handling does). Asynchronous calls can be\n  immediate, queued (serialized by priority on a per-tool queue) or\n  timed.\n\n- powerfull life debugger for the toolserver based on the medusa monitor.\n  You can see what your server is doing and inject python code into a\n  running system, peek at variables, even change them.\n\n- simple HTML rendering library to ease production of wellformed HTML\n  and XML content.\n\n- dynamic and static namespaces for requests: global config variables\n  are available during lifetime of the server, context variables are\n  available during a request, static variables are available during normal\n  method calls.\n\n- integrated transaction hooks that allow you to combine your methods\n  success or failure with database transaction calls. Your method fails, the\n  database is rolled back.\n\n- there are base classes for special purposes. For example you can choose\n  wether all methods should be externally accessible by default or wether\n  none should be accessible by default. Another base class is for providing\n  RPC style access with a challenge-response-scheme for authentication. And\n  then there is a all-singing-all-dancing base class if you want very simple\n  integration of authentication - just subclass from AuthenticatedTool instead\n  of StandardTool.\n\n- IP based access lists (hosts.allow for fixed host assignements - the given\n  IP set's the designated client system name and no additional authentication\n  is needed). Just add <clientname>:<ip> lines to either hosts.allow or\n  hosts.deny to allow or deny access. Entries in hosts.allow already set the\n  client name. This can be used as a simple authentication check for tools\n  that want to restrict access only to known systems. Systems in hosts.deny\n  aren't allowed any RPC call at all (both RPC and REST style access applies!).\n\n- RSA key based authentication to prevent unauthorized system access when you\n  don't have static IPs to check or need extra protection. If you activate\n  RSA authentication, this is mandatory - no other (minor) authentication\n  scheme will be accepted.\n\n- new RPC mechanisms can be easily installed, much like tools. Just write\n  your RPC handling class like the SOAPHandler or XMLRPCHandler and put them\n  into your local tools directory (or a global tools directory if you want\n  to use this RPC mechanism in all instances of your toolserver). There is\n  a new RPC mechanism based on base64 encoded binary pickles - look into\n  PickleRPCClient.py for the client code and PickleRPCHandler.py for the\n  handler code. This one is much faster than XML based RPC mechanisms, as\n  only very fast standard libraries are used. PickleRPC only works with RSA\n  authentication to enable maximum security.\n \n- you can easily plugin WSGI compliant applications if you have wsgiref\n  installed. This allows merging your toolserver with functionality from\n  other sources.\n\n- the ReactorChain gives a powerfull pattern to tools to hook into other\n  tools processing. This mechanism is relyable: if hooked tools fail, the\n  chain reaction will still take place, so the original tools functionality\n  won't be compromised. One use for this is the change system.request.rewrite\n  that can be used to add URI preprocessing to rewrite parts of URIs before\n  any tool has the chance to see the URI. For example this can be used\n  to do virtual host handling.\n\nSome random notes (yes, some day there might be a documentation):\n\nIMPORTANT NOTE ON PICKLERPC: Pickles should be seen as insecure, as the\nbinary encoding of data could introduce stuff that you don't want to\nhappen on your server.  For that reason PickleRPC is disabled by default\nand needs to be enabled in the configuration. You should put some kind\nof protection in front of your server, for example checking connecting IPs\nfor only trusted sources and you SHOULD NOT expose a server with PickleRPC\nto untrustworthy systems. For this, it would be a very bad idea to enable\nPickleRPC and open your server to the internet without any security measures!\nTo help to prevent damage, PickleRPC is tied to RSA authentication - if you\ndon't set up RSA authentication, PickleRPC can't be enabled.\n\nHOW TO GET RSA AUTHENTICATION GOING: you first will have to generate usefull\nkey pairs. Do this with \"tsctl keygen\" for the server and \"tsctl keygen\nclientname\" for the client and move the client keys to the client machine. When\ninstantiating a RemoteToolserver instance (from the Toolserver.Client module)\nyou can now pass pubkey, privkey and localname options. If you do, your call\nwill have additional HTTP headers that carry a SHA256 hash, a RSA signature and\nyour name. The server will check those (only if you enabled rsaauthenticate\nin the config) and provide you with the same headers in the result. Due to the\nRSA key stuff this will be noticeably slower but much securer, as you will\nonly allow communication with known hosts. To enable new hosts, just put their\npublic key into the pubkeys directory of your toolserver. They need to be\nnamed after the client. To disable a client, just remove it's public key and\nrestart the server.\n\nA NOTE ON ENCRYPTION: this toolserver framework could have easily adopted SSL\nas the main transport security protocol. Actually it would have been much more\nnatural to use that - every proxy should now support CONNECT and so should\nsupport HTTPS connections. The reason I didn't do this (I might opt to do it\nin the future, though) is that the toolserver usually doesn't run on well\nknown ports. And CONNECT to servers with ports other than the default ports\nnowadays requires administrator intervention - every port allowed for CONNECT\nneeds to be entered in the system configuration. This is to prevent hijacking\nhttps proxying for unauthorized outside connections. So I opted for the non\nstandard way of encrypting requests and responses instead - the call itself\nis still transported by the standard HTTP and so should travel through allmost\nevery proxy you could think of. Without administrator intervention or frontend\nservers. Remember, TooFPY isn't about building web applications, it's about\nbuilding web services and distributed applications. If you want interop with\nother software, you should use the SOAP or XMLRPC protocols and keep off the\nRPC encryption stuff, as that is non-standard. You still can set up frontend\nservers that do the SSL stuff and put TooFPy behind them and so can still\nuse TooFPy as a building block for web applications, relying solely on\nstandard protocols and formats. Just see the encryption stuff and the PickleRPC\nstuff as additional options if you run in a pure Python environment.\n\nA NOTE ON COMPATIBILITY: some protocols are non-standard (for example PickleRPC\ncan only be used with Python) or have non-standard extensions (for example\nRSA authentication is done in some non-standard way that currently only works\nwith Toolserver.Client). If you want to access your webservices from a wide\nrange of clients, you shouldn't use those non-standard features. Just don't\nenable PickleRPC and don't use RSA authentication - use CRAM authentication,\ninstead. CRAM authentication uses a very simple scheme based on SHA1, so you\ncan call methods with that authentication scheme from most languages (using\nJava or Perl is quite easy). CRAM authentication does rely on a shared secret,\nthough. If you are forced to invent your own authentication mechanism, you\ncan use context.request in your _validate methods and access the request\ndata and headers directly - for example to build some IP based authentication\nor something using identd lookup (the IP is hooked in the request via the\nmedusa transport - you might need to dig through the medusa source to see\nwhat I am talking about). If everything fails your needs, you can allways\npass user and password fields in your calls - just be aware that they are\ntransfered in clear over the wire, so set up some encrypted channel to\ncommunicate over. Some simple way to do this is to run the toolserver only\non localhost and put an Apache in front of it and let that one handle all\nauthentication and SSL stuff.\n\nA NOTE ON NEW PYTHON VERSIONS: Python 2.6 deprecates the md5 and sha modules\nand wants you to use hashlib instead. Toolserver does so, but medusa still\nimports md5, so you get a deprecation warning. This is old code.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/rfc1437/toolserver/", "keywords": null, "license": "MIT/X", "maintainer": null, "maintainer_email": null, "name": "Toolserver", "package_url": "https://pypi.org/project/Toolserver/", "platform": "BSD,Linux,MacOS X,win32", "project_url": "https://pypi.org/project/Toolserver/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/rfc1437/toolserver/"}, "release_url": "https://pypi.org/project/Toolserver/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "Toolserver Framework for Python", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <dl>\n<dt>This software is OSI Certified Open Source Software. OSI Certified is a</dt>\n<dd>certification mark of the Open Source Initiative.</dd>\n</dl>\n<p>The Toolserver Framework for Python is a framework for easy webservice creation.\nIt\u2019s main property is that it runs as a standalone server and so can easily be\ndeployed. It uses medusa as it\u2019s webserver core, but sports a threading model\nthat is much like the process model of Apache 1.3.</p>\n<p>For the license under that this software is distributed, read LICENSE.</p>\n<p>For an installation instruction read the file INSTALL (essentially you\ncan just do easy_install toolserver, but read it anyway for some info\non dependencies you have to satisfy manually).</p>\n<p>For more info look at the bitbucket page: <a href=\"http://bitbucket.org/rfc1437/toolserver/\" rel=\"nofollow\">http://bitbucket.org/rfc1437/toolserver/</a></p>\n<p>Some highlights why you might want to look into TooFPy:</p>\n<ul>\n<li>industry strength and fast webserver as the base. Static content\nis delivered directly by the high performance Medusa server, dynamic\ncontent is delivered by dynamically managed worker threads.</li>\n<li>namespaces for tools as the base for URL construction. Intermingled\nwith a standard static webserver to fill in those areas where no\ntools are registered.</li>\n<li>concentrates on building the API, not on building a full web\napplication. You can build a web application, if you want, but you\ndon\u2019t need to. Want to just expose some quick hacks to SOAP or\nXMLRPC? Piece of cake.</li>\n<li>all APIs are dual use: they can be accessed over the web or they can\nbe accessed internally in other tools. If you build a full web application,\nit will be composed of communicating tools where the tool communication\nis by calling well defined APIs that are both used internally and can\nbe used externally, as well (if you decide so).</li>\n<li>automatic documentation generation for tools, both in HTML format (for\nhuman consumption) and WSDL format (for SOAP clients that need those).\nJust go to <a href=\"http://localhost:4334/API/\" rel=\"nofollow\">http://localhost:4334/API/</a> (assuming your server runs on the\ndefault port and the localhost IP) and you will get a list of links to\ninstalled tools with their respective API documentations - all generated\non-the-fly from your tools sources!</li>\n<li>programming by contract for Web APIs! Of course, contracts are part of\nthe human readable documentation. Contract checking can be switched\non or off.</li>\n<li>wrapper based REST style APIs built over your standard RPC style\nAPIs - no need to fight over API style anymore!</li>\n<li>factory tools that generate transient tools that themselves can\nbe factories. This gives you fully dynamic namespaces.</li>\n<li>integrated authentication scheme for REST style API usage. This\nenables you to build your own authentication level above the tools\nwithout forcing some prebuilt scheme on you. This changed in 0.3.6,\nso now there are actually two authentication schemes, the newer one\nis build on standard user+group definitions, can be based on IP and\nHTTP basic authentication and can make use of a non-standard RSA\nauthentication.</li>\n<li>integrated tools for powerfull thread management. Method calls can\nbe made synchronously and asynchronously (using the same thread pool as\nthe dynamic web content handling does). Asynchronous calls can be\nimmediate, queued (serialized by priority on a per-tool queue) or\ntimed.</li>\n<li>powerfull life debugger for the toolserver based on the medusa monitor.\nYou can see what your server is doing and inject python code into a\nrunning system, peek at variables, even change them.</li>\n<li>simple HTML rendering library to ease production of wellformed HTML\nand XML content.</li>\n<li>dynamic and static namespaces for requests: global config variables\nare available during lifetime of the server, context variables are\navailable during a request, static variables are available during normal\nmethod calls.</li>\n<li>integrated transaction hooks that allow you to combine your methods\nsuccess or failure with database transaction calls. Your method fails, the\ndatabase is rolled back.</li>\n<li>there are base classes for special purposes. For example you can choose\nwether all methods should be externally accessible by default or wether\nnone should be accessible by default. Another base class is for providing\nRPC style access with a challenge-response-scheme for authentication. And\nthen there is a all-singing-all-dancing base class if you want very simple\nintegration of authentication - just subclass from AuthenticatedTool instead\nof StandardTool.</li>\n<li>IP based access lists (hosts.allow for fixed host assignements - the given\nIP set\u2019s the designated client system name and no additional authentication\nis needed). Just add &lt;clientname&gt;:&lt;ip&gt; lines to either hosts.allow or\nhosts.deny to allow or deny access. Entries in hosts.allow already set the\nclient name. This can be used as a simple authentication check for tools\nthat want to restrict access only to known systems. Systems in hosts.deny\naren\u2019t allowed any RPC call at all (both RPC and REST style access applies!).</li>\n<li>RSA key based authentication to prevent unauthorized system access when you\ndon\u2019t have static IPs to check or need extra protection. If you activate\nRSA authentication, this is mandatory - no other (minor) authentication\nscheme will be accepted.</li>\n<li>new RPC mechanisms can be easily installed, much like tools. Just write\nyour RPC handling class like the SOAPHandler or XMLRPCHandler and put them\ninto your local tools directory (or a global tools directory if you want\nto use this RPC mechanism in all instances of your toolserver). There is\na new RPC mechanism based on base64 encoded binary pickles - look into\nPickleRPCClient.py for the client code and PickleRPCHandler.py for the\nhandler code. This one is much faster than XML based RPC mechanisms, as\nonly very fast standard libraries are used. PickleRPC only works with RSA\nauthentication to enable maximum security.</li>\n<li>you can easily plugin WSGI compliant applications if you have wsgiref\ninstalled. This allows merging your toolserver with functionality from\nother sources.</li>\n<li>the ReactorChain gives a powerfull pattern to tools to hook into other\ntools processing. This mechanism is relyable: if hooked tools fail, the\nchain reaction will still take place, so the original tools functionality\nwon\u2019t be compromised. One use for this is the change system.request.rewrite\nthat can be used to add URI preprocessing to rewrite parts of URIs before\nany tool has the chance to see the URI. For example this can be used\nto do virtual host handling.</li>\n</ul>\n<p>Some random notes (yes, some day there might be a documentation):</p>\n<p>IMPORTANT NOTE ON PICKLERPC: Pickles should be seen as insecure, as the\nbinary encoding of data could introduce stuff that you don\u2019t want to\nhappen on your server.  For that reason PickleRPC is disabled by default\nand needs to be enabled in the configuration. You should put some kind\nof protection in front of your server, for example checking connecting IPs\nfor only trusted sources and you SHOULD NOT expose a server with PickleRPC\nto untrustworthy systems. For this, it would be a very bad idea to enable\nPickleRPC and open your server to the internet without any security measures!\nTo help to prevent damage, PickleRPC is tied to RSA authentication - if you\ndon\u2019t set up RSA authentication, PickleRPC can\u2019t be enabled.</p>\n<p>HOW TO GET RSA AUTHENTICATION GOING: you first will have to generate usefull\nkey pairs. Do this with \u201ctsctl keygen\u201d for the server and \u201ctsctl keygen\nclientname\u201d for the client and move the client keys to the client machine. When\ninstantiating a RemoteToolserver instance (from the Toolserver.Client module)\nyou can now pass pubkey, privkey and localname options. If you do, your call\nwill have additional HTTP headers that carry a SHA256 hash, a RSA signature and\nyour name. The server will check those (only if you enabled rsaauthenticate\nin the config) and provide you with the same headers in the result. Due to the\nRSA key stuff this will be noticeably slower but much securer, as you will\nonly allow communication with known hosts. To enable new hosts, just put their\npublic key into the pubkeys directory of your toolserver. They need to be\nnamed after the client. To disable a client, just remove it\u2019s public key and\nrestart the server.</p>\n<p>A NOTE ON ENCRYPTION: this toolserver framework could have easily adopted SSL\nas the main transport security protocol. Actually it would have been much more\nnatural to use that - every proxy should now support CONNECT and so should\nsupport HTTPS connections. The reason I didn\u2019t do this (I might opt to do it\nin the future, though) is that the toolserver usually doesn\u2019t run on well\nknown ports. And CONNECT to servers with ports other than the default ports\nnowadays requires administrator intervention - every port allowed for CONNECT\nneeds to be entered in the system configuration. This is to prevent hijacking\nhttps proxying for unauthorized outside connections. So I opted for the non\nstandard way of encrypting requests and responses instead - the call itself\nis still transported by the standard HTTP and so should travel through allmost\nevery proxy you could think of. Without administrator intervention or frontend\nservers. Remember, TooFPY isn\u2019t about building web applications, it\u2019s about\nbuilding web services and distributed applications. If you want interop with\nother software, you should use the SOAP or XMLRPC protocols and keep off the\nRPC encryption stuff, as that is non-standard. You still can set up frontend\nservers that do the SSL stuff and put TooFPy behind them and so can still\nuse TooFPy as a building block for web applications, relying solely on\nstandard protocols and formats. Just see the encryption stuff and the PickleRPC\nstuff as additional options if you run in a pure Python environment.</p>\n<p>A NOTE ON COMPATIBILITY: some protocols are non-standard (for example PickleRPC\ncan only be used with Python) or have non-standard extensions (for example\nRSA authentication is done in some non-standard way that currently only works\nwith Toolserver.Client). If you want to access your webservices from a wide\nrange of clients, you shouldn\u2019t use those non-standard features. Just don\u2019t\nenable PickleRPC and don\u2019t use RSA authentication - use CRAM authentication,\ninstead. CRAM authentication uses a very simple scheme based on SHA1, so you\ncan call methods with that authentication scheme from most languages (using\nJava or Perl is quite easy). CRAM authentication does rely on a shared secret,\nthough. If you are forced to invent your own authentication mechanism, you\ncan use context.request in your _validate methods and access the request\ndata and headers directly - for example to build some IP based authentication\nor something using identd lookup (the IP is hooked in the request via the\nmedusa transport - you might need to dig through the medusa source to see\nwhat I am talking about). If everything fails your needs, you can allways\npass user and password fields in your calls - just be aware that they are\ntransfered in clear over the wire, so set up some encrypted channel to\ncommunicate over. Some simple way to do this is to run the toolserver only\non localhost and put an Apache in front of it and let that one handle all\nauthentication and SSL stuff.</p>\n<p>A NOTE ON NEW PYTHON VERSIONS: Python 2.6 deprecates the md5 and sha modules\nand wants you to use hashlib instead. Toolserver does so, but medusa still\nimports md5, so you get a deprecation warning. This is old code.</p>\n\n          </div>"}, "last_serial": 785811, "releases": {"0.4.1": [{"comment_text": "", "digests": {"md5": "71ca7ff4d676aeaebb690eabc8f96e75", "sha256": "241a9ad9a689d13195a12013ef68b01924b38bd16e0065df3f0461f8e41e61c4"}, "downloads": -1, "filename": "Toolserver-0.4.1-py2.6.egg", "has_sig": false, "md5_digest": "71ca7ff4d676aeaebb690eabc8f96e75", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 204999, "upload_time": "2010-03-02T09:08:08", "upload_time_iso_8601": "2010-03-02T09:08:08.685278Z", "url": "https://files.pythonhosted.org/packages/a7/97/6306b24889b5c2af74db32ffbe633bb22e4b2a6f82edf0d697a9ae071fb9/Toolserver-0.4.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fc1c2619afcedf8820b60476c372fac", "sha256": "b3ed98ccd8b01b365d1c1e140beed7c0856fb82319a2bc6d04eae4e1ce9a930d"}, "downloads": -1, "filename": "Toolserver-0.4.1.tar.gz", "has_sig": false, "md5_digest": "0fc1c2619afcedf8820b60476c372fac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96651, "upload_time": "2010-03-02T09:08:04", "upload_time_iso_8601": "2010-03-02T09:08:04.852213Z", "url": "https://files.pythonhosted.org/packages/f0/a6/34943df714b7a61a16508648976d3cce9688a22a8424a28c69a163ed0b27/Toolserver-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71ca7ff4d676aeaebb690eabc8f96e75", "sha256": "241a9ad9a689d13195a12013ef68b01924b38bd16e0065df3f0461f8e41e61c4"}, "downloads": -1, "filename": "Toolserver-0.4.1-py2.6.egg", "has_sig": false, "md5_digest": "71ca7ff4d676aeaebb690eabc8f96e75", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 204999, "upload_time": "2010-03-02T09:08:08", "upload_time_iso_8601": "2010-03-02T09:08:08.685278Z", "url": "https://files.pythonhosted.org/packages/a7/97/6306b24889b5c2af74db32ffbe633bb22e4b2a6f82edf0d697a9ae071fb9/Toolserver-0.4.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fc1c2619afcedf8820b60476c372fac", "sha256": "b3ed98ccd8b01b365d1c1e140beed7c0856fb82319a2bc6d04eae4e1ce9a930d"}, "downloads": -1, "filename": "Toolserver-0.4.1.tar.gz", "has_sig": false, "md5_digest": "0fc1c2619afcedf8820b60476c372fac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96651, "upload_time": "2010-03-02T09:08:04", "upload_time_iso_8601": "2010-03-02T09:08:04.852213Z", "url": "https://files.pythonhosted.org/packages/f0/a6/34943df714b7a61a16508648976d3cce9688a22a8424a28c69a163ed0b27/Toolserver-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:51:02 2020"}