{"info": {"author": "Peter Hunt", "author_email": "peter@huntfx.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# supercache\nEasy to use and intuitive caching for functions.\n\n## Usage\n```python\nfrom supercache import cache\n\n# Cache all parametes other than print_output, and keep the result for 60 seconds\n@cache(timeout=60, ignore=['print_output'])\ndef func(a, b=None, print_output=True):\n    sleep(10)\n    if print_output:\n        print(a)\n    return a\n\n# Writes value to cache\nfunc(1, 2, False)\n\n# Reads value from cache\nfunc(1, 2)\n\n# Removes value from cache\ncache.delete(func, 1, 2)\n\n\n# Only cache the first argument, and ignore anything extra\n@cache(keys=[0])\ndef func(a, b=None, *args):\n    sleep(10)\n    return a\n\n# Writes value to cache\nfunc(1)\n\n# Reads value from cache\nfunc(1, 2, 3, 4, 5, 6, 7)\n```\n\n### Supported Types\n```python\n# Functions\n@cache()\ndef function():\n    pass\n\n# Methods\nclass Class(object):\n    @cache()\n    def method(self):\n        pass\n\n# Generators/iterators\n@cache()\ndef generator():\n    yield\n\n# Lambdas\nfunc = cache()(lambda: None)\n```\n\n## API Reference\n\n### cache(_keys=None, ignore=None, timeout=None, size=None, precalculate=False_)\n\n#### keys\nSet which parameters of the function to use in generating the cache key. All available parameters will be used by default.\n\nThese can be in the format of `int`, `str`, `slice` (useful for `*args`), or `regex` (useful for `**kwargs`)\n\n#### ignore\nSet which parameters to ignore when generating the cache key. This will override any settings provided in `keys`.\n\nThese can also be in the format of `int`, `str`, `slice` or `regex`\n\n#### timeout\nSet how many seconds until the cache is invalidated.\n\n#### size\nSet the maximum size of the cache in bytes. This a soft limit, where the memory will be allocated first, then older cache will be deleted until it is back under the limit.\n\nThe latest execution will always be cached, even if the maximum size is set to smaller than the result.\n\n#### precalculate\nIf the function being cached is a generator, setting this to `True` will convert the output to a `tuple` when first called, instead of returning the iterator.\n\nThe reason for this is the generator caching has a lot of overhead, which could become very noticable when calling a simple generator thousands of times.\n\n### cache.delete(_func=None, *args, **kwargs_)\n- `cache.delete()`: Delete all cached data.\n- `cache.delete(func)`: Delete all cached data for `func`.\n- `cache.delete(func, 1, b=2)`: Delete the cached data for `func(1, b=2)`.\n\n### cache.hits(_func=None, *args, **kwargs_)\nReturn a count of how many times the cache was read for the given parameters.\n\n- `cache.hits()`: Number of total cache hits.\n- `cache.hits(func)`: Number of cache hits for `func`.\n- `cache.hits(func, 1, b=2)`: Number of cache hits specifically for `func(1, b=2)`.\n\n### cache.misses(_func=None, *args, **kwargs_)\nReturn a count of how many times the cache was generated for the given parameters.\n\n- `cache.misses()`: Number of total cache misses.\n- `cache.misses(func)`: Number of cache misses for `func`.\n- `cache.misses(func, 1, b=2)`: Number of cache misses specifically for `func(1, b=2)`.\n\n## Limitations\n- Unable to cache if unhashable arguments are used\n- Python will assign the same hash to two classes with the same inheritance if they are both initialised on the same line (fortunately this shouldn't ever happen outside of testing)\n- `classmethods`, `staticmethods` and `properties` can only be cached if the cache decorator is executed first\n- Probably not very threadsafe", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Peter92/supercache/archive/1.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Peter92/supercache", "keywords": "cache,caching,memoise,memoize,store", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "supercache", "package_url": "https://pypi.org/project/supercache/", "platform": "", "project_url": "https://pypi.org/project/supercache/", "project_urls": {"Download": "https://github.com/Peter92/supercache/archive/1.1.0.tar.gz", "Homepage": "https://github.com/Peter92/supercache", "Issues": "https://github.com/Peter92/supercache/issues", "Source": "https://github.com/Peter92/supercache"}, "release_url": "https://pypi.org/project/supercache/1.1.0/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "summary": "Easy to use and intuitive caching for functions.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>supercache</h1>\n<p>Easy to use and intuitive caching for functions.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">supercache</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>\n\n<span class=\"c1\"># Cache all parametes other than print_output, and keep the result for 60 seconds</span>\n<span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'print_output'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">print_output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">print_output</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n\n<span class=\"c1\"># Writes value to cache</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Reads value from cache</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Removes value from cache</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Only cache the first argument, and ignore anything extra</span>\n<span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n\n<span class=\"c1\"># Writes value to cache</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Reads value from cache</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n</pre>\n<h3>Supported Types</h3>\n<pre><span class=\"c1\"># Functions</span>\n<span class=\"nd\">@cache</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">function</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Methods</span>\n<span class=\"k\">class</span> <span class=\"nc\">Class</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@cache</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Generators/iterators</span>\n<span class=\"nd\">@cache</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">generator</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span>\n\n<span class=\"c1\"># Lambdas</span>\n<span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"p\">()(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<h2>API Reference</h2>\n<h3>cache(<em>keys=None, ignore=None, timeout=None, size=None, precalculate=False</em>)</h3>\n<h4>keys</h4>\n<p>Set which parameters of the function to use in generating the cache key. All available parameters will be used by default.</p>\n<p>These can be in the format of <code>int</code>, <code>str</code>, <code>slice</code> (useful for <code>*args</code>), or <code>regex</code> (useful for <code>**kwargs</code>)</p>\n<h4>ignore</h4>\n<p>Set which parameters to ignore when generating the cache key. This will override any settings provided in <code>keys</code>.</p>\n<p>These can also be in the format of <code>int</code>, <code>str</code>, <code>slice</code> or <code>regex</code></p>\n<h4>timeout</h4>\n<p>Set how many seconds until the cache is invalidated.</p>\n<h4>size</h4>\n<p>Set the maximum size of the cache in bytes. This a soft limit, where the memory will be allocated first, then older cache will be deleted until it is back under the limit.</p>\n<p>The latest execution will always be cached, even if the maximum size is set to smaller than the result.</p>\n<h4>precalculate</h4>\n<p>If the function being cached is a generator, setting this to <code>True</code> will convert the output to a <code>tuple</code> when first called, instead of returning the iterator.</p>\n<p>The reason for this is the generator caching has a lot of overhead, which could become very noticable when calling a simple generator thousands of times.</p>\n<h3>cache.delete(<em>func=None, *args, **kwargs</em>)</h3>\n<ul>\n<li><code>cache.delete()</code>: Delete all cached data.</li>\n<li><code>cache.delete(func)</code>: Delete all cached data for <code>func</code>.</li>\n<li><code>cache.delete(func, 1, b=2)</code>: Delete the cached data for <code>func(1, b=2)</code>.</li>\n</ul>\n<h3>cache.hits(<em>func=None, *args, **kwargs</em>)</h3>\n<p>Return a count of how many times the cache was read for the given parameters.</p>\n<ul>\n<li><code>cache.hits()</code>: Number of total cache hits.</li>\n<li><code>cache.hits(func)</code>: Number of cache hits for <code>func</code>.</li>\n<li><code>cache.hits(func, 1, b=2)</code>: Number of cache hits specifically for <code>func(1, b=2)</code>.</li>\n</ul>\n<h3>cache.misses(<em>func=None, *args, **kwargs</em>)</h3>\n<p>Return a count of how many times the cache was generated for the given parameters.</p>\n<ul>\n<li><code>cache.misses()</code>: Number of total cache misses.</li>\n<li><code>cache.misses(func)</code>: Number of cache misses for <code>func</code>.</li>\n<li><code>cache.misses(func, 1, b=2)</code>: Number of cache misses specifically for <code>func(1, b=2)</code>.</li>\n</ul>\n<h2>Limitations</h2>\n<ul>\n<li>Unable to cache if unhashable arguments are used</li>\n<li>Python will assign the same hash to two classes with the same inheritance if they are both initialised on the same line (fortunately this shouldn't ever happen outside of testing)</li>\n<li><code>classmethods</code>, <code>staticmethods</code> and <code>properties</code> can only be cached if the cache decorator is executed first</li>\n<li>Probably not very threadsafe</li>\n</ul>\n\n          </div>"}, "last_serial": 6788140, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "52f0b60678e94f84592ae27f21133736", "sha256": "2f597efc7b6e76e0042f017734bc58772226f0db12693f62c9e43a57c7c285e9"}, "downloads": -1, "filename": "supercache-1.0.0.tar.gz", "has_sig": false, "md5_digest": "52f0b60678e94f84592ae27f21133736", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 9677, "upload_time": "2020-03-10T01:37:37", "upload_time_iso_8601": "2020-03-10T01:37:37.982270Z", "url": "https://files.pythonhosted.org/packages/61/1c/d0f02178a9b6aaba4a43dc5ba8e590ef9b20c5727941be4730e02e8eec47/supercache-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6d668375f59c2936cb76fae36e605388", "sha256": "f8d1f75bf7f20c299cacd8901ff4ec1bdeec6de0b2dda144cebf410e08ed8739"}, "downloads": -1, "filename": "supercache-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6d668375f59c2936cb76fae36e605388", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 9760, "upload_time": "2020-03-10T21:41:30", "upload_time_iso_8601": "2020-03-10T21:41:30.278655Z", "url": "https://files.pythonhosted.org/packages/34/33/31a3fc1f293e33b74f76d465960b677ca69112757892ed09e827eba6fe70/supercache-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d668375f59c2936cb76fae36e605388", "sha256": "f8d1f75bf7f20c299cacd8901ff4ec1bdeec6de0b2dda144cebf410e08ed8739"}, "downloads": -1, "filename": "supercache-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6d668375f59c2936cb76fae36e605388", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*", "size": 9760, "upload_time": "2020-03-10T21:41:30", "upload_time_iso_8601": "2020-03-10T21:41:30.278655Z", "url": "https://files.pythonhosted.org/packages/34/33/31a3fc1f293e33b74f76d465960b677ca69112757892ed09e827eba6fe70/supercache-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:18 2020"}