{"info": {"author": "Goncalo Pinheira", "author_email": "goncalopp+pypi@quorumverita.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries"], "description": "A simple pythonic OCR engine using opencv and numpy.\n\nOriginally inspired by\nhttp://stackoverflow.com/questions/9413216/simple-digit-recognition-ocr-in-opencv-python\n\nEssential Concepts\n==================\n\n#### Segmentation\n\nIn order for OCR to be performed on a image, several steps must be \nperformed on the source image. Segmentation is the process of \nidentifying the regions of the image that represent characters. \n\nThis project uses rectangles to model segments. \n\n#### Supervised learning with a classification problem\n\nThe [classification problem][] consists in identifying to which class a \nobservation belongs to (i.e.: which particular character is contained \nin a segment).\n\n[Supervised learning][] is a way of \"teaching\" a machine. Basically, an \nalgorithm is *trained* through *examples* (i.e.: this particular \nsegment contains the character `f`). After training, the machine \nshould be able to apply its acquired knowledge to new data.\n\nThe [k-NN algorithm], used in this project, is one of the simplest  \nclassification algorithm.\n\n#### Grounding\n\nCreating a example image with already classified characters, for \ntraining purposes.\nSee [ground truth][].\n\n[classification problem]: https://en.wikipedia.org/wiki/Statistical_classification\n[Supervised learning]: https://en.wikipedia.org/wiki/Supervised_learning\n[k-NN algorithm]: https://en.wikipedia.org/wiki/K-nearest_neighbors_classification\n[ground truth]: https://en.wikipedia.org/wiki/Ground_truth\n\nHow to understand this project\n==============================\n\nUnfortunately, documentation is a bit sparse at the moment (I \ngladly accept contributions).\nThe project is well-structured, and most classes and functions have \ndocstrings, so that's probably a good way to start.\n\nIf you need any help, don't hesitate to contact me. You can find my \nemail on my github profile.\n\n\nHow to use\n==========\n\nPlease check `example.py` for basic usage with the existing pre-grounded images.\n\nYou can use your own images, by placing them on the `data` directory. \nGrounding images interactively can be accomplished by using `grounding.UserGrounder`.\nFor more details check `example_grounding.py`", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goncalopp/simple-ocr-opencv", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "simple-opencv-ocr", "package_url": "https://pypi.org/project/simple-opencv-ocr/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/simple-opencv-ocr/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/goncalopp/simple-ocr-opencv"}, "release_url": "https://pypi.org/project/simple-opencv-ocr/0.0/", "requires_dist": null, "requires_python": null, "summary": "A simple OCR with OpenCV", "version": "0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple pythonic OCR engine using opencv and numpy.</p>\n<p>Originally inspired by\n<a href=\"http://stackoverflow.com/questions/9413216/simple-digit-recognition-ocr-in-opencv-python\" rel=\"nofollow\">http://stackoverflow.com/questions/9413216/simple-digit-recognition-ocr-in-opencv-python</a></p>\n<div id=\"essential-concepts\">\n<h2>Essential Concepts</h2>\n<p>#### Segmentation</p>\n<p>In order for OCR to be performed on a image, several steps must be\nperformed on the source image. Segmentation is the process of\nidentifying the regions of the image that represent characters.</p>\n<p>This project uses rectangles to model segments.</p>\n<p>#### Supervised learning with a classification problem</p>\n<p>The [classification problem][] consists in identifying to which class a\nobservation belongs to (i.e.: which particular character is contained\nin a segment).</p>\n<p>[Supervised learning][] is a way of \u201cteaching\u201d a machine. Basically, an\nalgorithm is <em>trained</em> through <em>examples</em> (i.e.: this particular\nsegment contains the character <cite>f</cite>). After training, the machine\nshould be able to apply its acquired knowledge to new data.</p>\n<p>The [k-NN algorithm], used in this project, is one of the simplest\nclassification algorithm.</p>\n<p>#### Grounding</p>\n<p>Creating a example image with already classified characters, for\ntraining purposes.\nSee [ground truth][].</p>\n<p>[classification problem]: <a href=\"https://en.wikipedia.org/wiki/Statistical_classification\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Statistical_classification</a>\n[Supervised learning]: <a href=\"https://en.wikipedia.org/wiki/Supervised_learning\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Supervised_learning</a>\n[k-NN algorithm]: <a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_classification\" rel=\"nofollow\">https://en.wikipedia.org/wiki/K-nearest_neighbors_classification</a>\n[ground truth]: <a href=\"https://en.wikipedia.org/wiki/Ground_truth\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Ground_truth</a></p>\n</div>\n<div id=\"how-to-understand-this-project\">\n<h2>How to understand this project</h2>\n<p>Unfortunately, documentation is a bit sparse at the moment (I\ngladly accept contributions).\nThe project is well-structured, and most classes and functions have\ndocstrings, so that\u2019s probably a good way to start.</p>\n<p>If you need any help, don\u2019t hesitate to contact me. You can find my\nemail on my github profile.</p>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>Please check <cite>example.py</cite> for basic usage with the existing pre-grounded images.</p>\n<p>You can use your own images, by placing them on the <cite>data</cite> directory.\nGrounding images interactively can be accomplished by using <cite>grounding.UserGrounder</cite>.\nFor more details check <cite>example_grounding.py</cite></p>\n</div>\n\n          </div>"}, "last_serial": 2716265, "releases": {"0.0": []}, "urls": [], "timestamp": "Fri May  8 03:10:25 2020"}