{"info": {"author": "Carlos de Lannoy", "author_email": "carlos.delannoy@wur.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# FRETboard: supervise your FRET detection algorithm\n#### [Carlos de Lannoy](https://www.vcard.wur.nl/Views/Profile/View.aspx?id=77824), [Dick de Ridder](https://www.vcard.wur.nl/Views/Profile/View.aspx?id=56806&ln=eng)\n\nFRETboard helps you train algorithms for the detection of F\u00f6rster resonance energy transfer events in a \n(semi-)supervised manner.\n\n## Running\nFRETboard is available as web application on [Heroku](https://fret-board.herokuapp.com/), or can be installed on your own \nsystem using pip:\n\n```\npip install git+https://github.com/cvdelannoy/poreTally.git\n```\nFRETboard is then started from the command line as:\n\n```\nFRETboard \n```\nA session on a random free port will start automatically.\n\n## Usage\nTraining an algorithm using FRETboard is easy; just follow the steps in the left column of your screen:\n![GUI example](FRETboard_example_screen.png)\n\n#### 1. Load\nPick an algorithm from the drop-down menu. For now two types are available:\n- The vanilla hidden Markov model (HMM) - a simple fully connected HMM - should do for low noise data.\n- The boundary-aware HMM tries to improve state detection by adding extra states at the bounds between the states you \nwant to recognize, which works better in noisy traces.\n\nYou may now load model parameters of a previous time you used FRETboard if you have them, otherwise you will start \nwith a fresh model. Then load your data with the Data button.\n\n#### 2. Teach\nAfter loading your data you are presented with a random example trace. Caught an error? Slide the 'Change selection' \nslider to the state you would like to introduce or expand and click-drag over the trace in your screen. You have now \nadapted the labeling of that trace. Once you are satisfied with the current trace, click 'Train' to retrain \nthe algorithm using the modifications you just made as a guideline.\n\nA few more options are available to you in this stage:\n- Number of states: changes how many states the HMM will try to fit. Note that changing this value will reset your model!\n- Influence supervision: choose the weight of supervised examples during training. 1 denotes fully supervised training,\n0 means that supervised examples play no role at all.\n- Buffer: if you're training a boundary-aware HMM (and possibly other algorithms in the future), choose how many data points the boundary states should cover. As a\nrule of thumb, check how many measurements it takes to transit from one state to the next and pick that as a value here.\n- Show traces with states: deselecting a certain state omits traces containing that state from further supervision.\n- Delete: delete the current trace.\n\n#### 3. Save\nYou may now download the classified traces on your machine using the 'Data' button. Produce a \n[Report](FRETboard_example_report.html) (download and view in browser) to see the\nmodel parameters generated, along with some handy summary statistics and graphs or download the model to \nquickly classify your data next time using the same parameters. Deselecting certain states here omits traces containing\nthat state from your save file.\n\n## Writing new algorithms\nIf you would like to introduce a new (semi-)supervised algorithm to FRETboard, you can do so easily; follow the \ninstructions [template](model_template.py) and everything should work accordingly. Do consider making a pull request \nif you think your implementation may be useful to others! Of course, contributors will be fairly referred to. \n\n---\nwith &hearts; from Wageningen University\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cvdelannoy/FRETboard", "keywords": "FRET Forster resonance energy transfer supervised machine learning", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "FRET-board", "package_url": "https://pypi.org/project/FRET-board/", "platform": "", "project_url": "https://pypi.org/project/FRET-board/", "project_urls": {"Homepage": "https://github.com/cvdelannoy/FRETboard"}, "release_url": "https://pypi.org/project/FRET-board/0.0.4/", "requires_dist": ["numpy (==1.17.3)", "pandas (==0.25.3)", "pomegranate (==0.11.2)", "bokeh (==1.4.0)", "cached-property (==1.5.1)", "tabulate (==0.8.3)", "tornado (==6.0.3)"], "requires_python": "", "summary": "Supervise FRET event detection algorithms", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># FRETboard: supervise your FRET detection algorithm\n#### [Carlos de Lannoy](<a href=\"https://www.vcard.wur.nl/Views/Profile/View.aspx?id=77824\" rel=\"nofollow\">https://www.vcard.wur.nl/Views/Profile/View.aspx?id=77824</a>), [Dick de Ridder](<a href=\"https://www.vcard.wur.nl/Views/Profile/View.aspx?id=56806&amp;ln=eng\" rel=\"nofollow\">https://www.vcard.wur.nl/Views/Profile/View.aspx?id=56806&amp;ln=eng</a>)</p>\n<p>FRETboard helps you train algorithms for the detection of F\u00f6rster resonance energy transfer events in a\n(semi-)supervised manner.</p>\n<p>## Running\nFRETboard is available as web application on [Heroku](<a href=\"https://fret-board.herokuapp.com/\" rel=\"nofollow\">https://fret-board.herokuapp.com/</a>), or can be installed on your own\nsystem using pip:</p>\n<p><tt>`\npip install <span class=\"pre\">git+https://github.com/cvdelannoy/poreTally.git</span>\n`</tt>\nFRETboard is then started from the command line as:</p>\n<p><tt>`\nFRETboard\n`</tt>\nA session on a random free port will start automatically.</p>\n<p>## Usage\nTraining an algorithm using FRETboard is easy; just follow the steps in the left column of your screen:\n![GUI example](FRETboard_example_screen.png)</p>\n<p>#### 1. Load\nPick an algorithm from the drop-down menu. For now two types are available:\n- The vanilla hidden Markov model (HMM) - a simple fully connected HMM - should do for low noise data.\n- The boundary-aware HMM tries to improve state detection by adding extra states at the bounds between the states you\nwant to recognize, which works better in noisy traces.</p>\n<p>You may now load model parameters of a previous time you used FRETboard if you have them, otherwise you will start\nwith a fresh model. Then load your data with the Data button.</p>\n<p>#### 2. Teach\nAfter loading your data you are presented with a random example trace. Caught an error? Slide the \u2018Change selection\u2019\nslider to the state you would like to introduce or expand and click-drag over the trace in your screen. You have now\nadapted the labeling of that trace. Once you are satisfied with the current trace, click \u2018Train\u2019 to retrain\nthe algorithm using the modifications you just made as a guideline.</p>\n<p>A few more options are available to you in this stage:\n- Number of states: changes how many states the HMM will try to fit. Note that changing this value will reset your model!\n- Influence supervision: choose the weight of supervised examples during training. 1 denotes fully supervised training,\n0 means that supervised examples play no role at all.\n- Buffer: if you\u2019re training a boundary-aware HMM (and possibly other algorithms in the future), choose how many data points the boundary states should cover. As a\nrule of thumb, check how many measurements it takes to transit from one state to the next and pick that as a value here.\n- Show traces with states: deselecting a certain state omits traces containing that state from further supervision.\n- Delete: delete the current trace.</p>\n<p>#### 3. Save\nYou may now download the classified traces on your machine using the \u2018Data\u2019 button. Produce a\n[Report](FRETboard_example_report.html) (download and view in browser) to see the\nmodel parameters generated, along with some handy summary statistics and graphs or download the model to\nquickly classify your data next time using the same parameters. Deselecting certain states here omits traces containing\nthat state from your save file.</p>\n<p>## Writing new algorithms\nIf you would like to introduce a new (semi-)supervised algorithm to FRETboard, you can do so easily; follow the\ninstructions [template](model_template.py) and everything should work accordingly. Do consider making a pull request\nif you think your implementation may be useful to others! Of course, contributors will be fairly referred to.</p>\n<p>\u2014\nwith &amp;hearts; from Wageningen University</p>\n\n          </div>"}, "last_serial": 6203739, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "2a27e0002964d27631235c52621182ec", "sha256": "93e6ac1994b9a948fbb30ca39e367ba8bc791f988ec2fe349432578a903fa873"}, "downloads": -1, "filename": "FRET_board-0.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "2a27e0002964d27631235c52621182ec", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 56373, "upload_time": "2019-11-26T20:25:49", "upload_time_iso_8601": "2019-11-26T20:25:49.758024Z", "url": "https://files.pythonhosted.org/packages/a5/08/cf764e3c4750627e78deb85c356842ed8118961ee57b669192b956dbbd14/FRET_board-0.0.4-py2-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a27e0002964d27631235c52621182ec", "sha256": "93e6ac1994b9a948fbb30ca39e367ba8bc791f988ec2fe349432578a903fa873"}, "downloads": -1, "filename": "FRET_board-0.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "2a27e0002964d27631235c52621182ec", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 56373, "upload_time": "2019-11-26T20:25:49", "upload_time_iso_8601": "2019-11-26T20:25:49.758024Z", "url": "https://files.pythonhosted.org/packages/a5/08/cf764e3c4750627e78deb85c356842ed8118961ee57b669192b956dbbd14/FRET_board-0.0.4-py2-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 01:00:23 2020"}