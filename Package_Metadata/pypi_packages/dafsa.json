{"info": {"author": "Tiago Tresoldi", "author_email": "tresoldi@shh.mpg.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "DAFSA\n=====\n\nDAFSA is a library for computing `Deterministic Acyclic Finite State\nAutomata <https://en.wikipedia.org/wiki/Deterministic_acyclic_finite_state_automaton>`__\n(also known as \u201cdirected acyclic word graphs\u201d, or DAWG). DAFSA are data\nstructures derived from `tries <https://en.wikipedia.org/wiki/Trie>`__\nthat allow to represent a set of sequences (typically character strings\nor *n*-grams) in the form of a directed acyclic graph with a single\nsource vertex (the ``start`` symbol of all sequences) and at least one\nsink edge (``final`` symbols, each pointed to by one or more sequences).\nIn the current implementation, a trait of each node expresses whether it\ncan be used a sink.\n\nThe primary difference between DAFSA and tries is that the latter\neliminates suffix and infix redundancy, as in the example of Figure 1\n(from the linked Wikipedia article) storing the set of strings\n``\"tap\"``, ``\"taps\"``, ``\"top\"``, and ``\"tops\"``. Even though DAFSAs\ncannot be used to store precise frequency information, given that\nmultiple paths might reach the same terminal node, they still allow to\nestimate the sampling frequency; being acyclic, they can also reject any\nsequence not included in the training. Fuzzy extensions will allow to\nestimate the sampling probability of unobserved sequences.\n\n.. figure:: https://raw.githubusercontent.com/tresoldi/dafsa/master/figures/trie-vs-dafsa.png\n   :alt: Trie vs.\u00a0DAFSA\n\n   Trie vs.\u00a0DAFSA\n\nThis data structure is a special case of a finite state recognizer that\nacts as a deterministic finite state automaton, as it recognizes all and\nonly the sequences it was built upon. Frequently used in computer\nscience for the space-efficient storage of sets of sequences without\ncommon compression techniques, such as dictionary or entropy types, or\nwithout probabilistic data structures, such as Bloom filters, the\nautomata generated by this library are intended for linguistic\nexploration, and extend published models by allowing to approximate\nprobability of random observation by carrying information on the weight\nof each graph edge.\n\nInstallation and usage\n----------------------\n\nThe library can be installed as any standard Python library with\n``pip``, and used as demonstrated in the following snippet:\n\nIn any standard Python environment, ``dafsa`` can be installed with:\n\n.. code:: bash\n\n   $ pip install dafsa\n\nA ``conda`` package is also available, and can be installed (from the\n``tresoldi`` channel) with:\n\n.. code:: bash\n\n   $ conda install -c tresoldi dafsa\n\nDetailed instructions on how to use the library can be found in the\n`official\ndocumentation <https://dafsa.readthedocs.io/en/latest/quickstart.html>`__.\nFor most purposes, it is enough to pass a list of sequences to the\n``DAFSA`` object:\n\n.. code:: python\n\n   >>> from dafsa import DAFSA\n   >>> print(DAFSA([\"dib\", \"tip\", \"tips\", \"top\"]))\n   DAFSA with 8 nodes and 9 edges (4 inserted sequences)\n     +-- #0: 0(#1/4:<d>/1|#4/4:<t>/3) [('t', 4), ('d', 1)]\n     +-- #1: n(#2/1:<i>/1) [('i', 2)]\n     +-- #2: n(#3/1:<b>/1) [('b', 3)]\n     +-- #3: F() []\n     +-- #4: n(#5/3:<i>/2|#8/3:<o>/1) [('i', 5), ('o', 8)]\n     +-- #5: n(#6/2:<p>/2) [('p', 6)]\n     +-- #6: F(#3/2:<s>/1) [('s', 3)]\n     +-- #8: n(#3/1:<p>/1) [('p', 3)]\n\nFull documentation is available `at\nReadTheDocs.io <https://dafsa.readthedocs.io>`__.\n\nShowcase\n--------\n\n-  Basic example:\n\n.. figure:: https://raw.githubusercontent.com/tresoldi/dafsa/master/figures/example.png\n   :alt: First example\n\n   First example\n\n-  Output can be textual, GML, DOT, or (via dot and third-party\n   software) PNG, PDF, ASCII-art and Unicode-art:\n\n.. figure:: https://raw.githubusercontent.com/tresoldi/dafsa/master/figures/dna.png\n   :alt: DNA example\n\n   DNA example\n\n::\n\n                                      G                                A\n                                  +---------------------+          +----------+\n                                  |                     v          |          v\n         #====#  C   +---+  G   +---+  C   +---+  G   +---+  A   +---+  T   +---+  A   #===#\n     +-- H 0  H ---> | 5 | ---> | 6 | ---> | 7 | ---> | 8 | ---> | 9 | ---> | 3 | ---> H 4 H\n     |   #====#      +---+      +---+      +---+      +---+      +---+      +---+      #===#\n     |     |    A                                                             ^\n     | G   +-----------+                                                      |\n     |                 v                                                      |\n     |   +----+  G   +---+  A   +---+  T                                      |\n     +-> | 20 | ---> | 1 | ---> | 2 | ----------------------------------------+\n         +----+      +---+      +---+\n\n::\n\n                                      G                                A\n                                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                  \u2502                     \u25bc          \u2502          \u25bc\n         \u2554\u2550\u2550\u2550\u2550\u2557  C   \u250c\u2500\u2500\u2500\u2510  G   \u250c\u2500\u2500\u2500\u2510  C   \u250c\u2500\u2500\u2500\u2510  G   \u250c\u2500\u2500\u2500\u2510  A   \u250c\u2500\u2500\u2500\u2510  T   \u250c\u2500\u2500\u2500\u2510  A   \u2554\u2550\u2550\u2550\u2557\n     \u250c\u2500\u2500 \u2551 0  \u2551 \u2500\u2500\u2500\u25b6 \u2502 5 \u2502 \u2500\u2500\u2500\u25b6 \u2502 6 \u2502 \u2500\u2500\u2500\u25b6 \u2502 7 \u2502 \u2500\u2500\u2500\u25b6 \u2502 8 \u2502 \u2500\u2500\u2500\u25b6 \u2502 9 \u2502 \u2500\u2500\u2500\u25b6 \u2502 3 \u2502 \u2500\u2500\u2500\u25b6 \u2551 4 \u2551\n     \u2502   \u255a\u2550\u2550\u2550\u2550\u255d      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u255a\u2550\u2550\u2550\u255d\n     \u2502     \u2502    A                                                             \u25b2\n     \u2502 G   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                                      \u2502\n     \u2502                 \u25bc                                                      \u2502\n     \u2502   \u250c\u2500\u2500\u2500\u2500\u2510  G   \u250c\u2500\u2500\u2500\u2510  A   \u250c\u2500\u2500\u2500\u2510  T                                      \u2502\n     \u2514\u2500\u25b6 \u2502 20 \u2502 \u2500\u2500\u2500\u25b6 \u2502 1 \u2502 \u2500\u2500\u2500\u25b6 \u2502 2 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2514\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518\n\n-  With or without single-path joining:\n\n.. figure:: https://raw.githubusercontent.com/tresoldi/dafsa/master/figures/phonemes.png\n   :alt: Phoneme example\n\n   Phoneme example\n\n.. figure:: https://raw.githubusercontent.com/tresoldi/dafsa/master/figures/reduced_phonemes.png\n   :alt: Reduced Phoneme example\n\n   Reduced Phoneme example\n\nChangelog\n---------\n\nVersion 0.6:\n\n-  Documentation improvements following JOSS review\n-  Fixed bug where node finality was not considered in minimization\n\nVersion 0.5.1:\n\n-  Minor changes in preparation for submission (including tagged\n   release)\n\nVersion 0.5:\n\n-  Improvements in speed, particularly in the ``__eq__()`` method of\n   ``DAFSANode`` and the ``_minimize()`` method of ``DAFSA``. The\n   computation of a DAFSA for the contents of ``/usr/share/dict/words``\n   in the test machine (99,171 sequences) is now performed in under 8\n   minutes.\n-  Added code from Daciuk\u2019s packages in an extra directory, along with\n   notes on license\n\nVersion 0.4:\n\n-  Full documentation for existing code\n-  Added GML, PDF, and SVG export\n-  Allow to access all options from command-line\n\nVersion 0.3:\n\n-  Allow to join transitions in single sub-paths\n-  Allows to export a DAFSA as a ``networkx`` graph\n-  Preliminary documentation at\n   `ReadTheDocs <https://dafsa.readthedocs.io>`__\n\nVersion 0.2.1:\n\n-  Added support for segmented data\n\nVersion 0.2:\n\n-  Added support for weighted edges and nodes\n-  Added DOT export and Graphviz generation\n-  Refined minimization method, which can be skipped if desired\n   (resulting in a standard trie)\n-  Added examples in the resources, also used for test data\n\nVersion 0.1:\n\n-  First public release.\n\nRoadmap\n-------\n\nAfter 1.0:\n\n-  Preliminary generation of minimal regular expressions matching the\n   contents of a DAFSA\n-  Consider adding support for empty transitions (or depend on the user\n   aligning those)\n-  Work on options for nicer graphviz output (colors, widths, etc.)\n\nCommunity guidelines\n--------------------\n\nWhile the author can be contacted directly for support, it is\nrecommended that third parties use GitHub standard features, such as\nissues and pull requests, to contribute, report problems, or seek\nsupport.\n\nContributing guidelines, including a code of conduct, can be found in\nthe CONTRIBUTING.md file.\n\nAuthor and citation\n-------------------\n\nThe library is developed by Tiago Tresoldi (tresoldi@shh.mpg.de).\n\nThe author has received funding from the European Research Council (ERC)\nunder the European Union\u2019s Horizon 2020 research and innovation\nprogramme (grant agreement No.\u00a0\\ `ERC Grant\n#715618 <https://cordis.europa.eu/project/rcn/206320/factsheet/en>`__,\n`Computer-Assisted Language Comparison <https://digling.org/calc/>`__.\n\nIf you use ``dafsa``, please cite it as:\n\n   Tresoldi, Tiago (2020). DAFSA, a a library for computing\n   Deterministic Acyclic Finite State Automata. Version 1.0. Jena.\n   Available at: https://github.com/tresoldi/dafsa\n\nIn BibTeX:\n\n.. code:: bibtex\n\n   @misc{Tresoldi2020dafsa,\n     author = {Tresoldi, Tiago},\n     title = {DAFSA, a a library for computing Deterministic Acyclic Finite State Automata. Version 1.0.},\n     howpublished = {\\url{https://github.com/tresoldi/dafsa}},\n     address = {Jena},\n     year = {2020},\n   }\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/dafsa.svg\n   :target: https://pypi.org/project/dafsa\n.. |Build Status| image:: https://travis-ci.org/tresoldi/dafsa.svg?branch=master\n   :target: https://travis-ci.org/tresoldi/dafsa\n.. |codecov| image:: https://codecov.io/gh/tresoldi/dafsa/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/tresoldi/dafsa\n.. |Codacy Badge| image:: https://api.codacy.com/project/badge/Grade/a2b47483ff684590b1208dbb4bbfc3ee\n   :target: https://www.codacy.com/manual/tresoldi/dafsa?utm_source=github.com&utm_medium=referral&utm_content=tresoldi/dafsa&utm_campaign=Badge_Grade\n.. |Documentation Status| image:: https://readthedocs.org/projects/dafsa/badge/?version=latest\n   :target: https://dafsa.readthedocs.io/en/latest/?badge=latest\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tresoldi/dafsa", "keywords": "dafsa,dawg,finite state automata,deterministic acyclic finite state automaton,directed acyclic word graph", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dafsa", "package_url": "https://pypi.org/project/dafsa/", "platform": "", "project_url": "https://pypi.org/project/dafsa/", "project_urls": {"Documentation": "https://dafsa.readthedocs.io", "Homepage": "https://github.com/tresoldi/dafsa"}, "release_url": "https://pypi.org/project/dafsa/1.0/", "requires_dist": ["networkx"], "requires_python": "", "summary": "Library for computing Deterministic Acyclic Finite State Automata (DAFSA)", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>DAFSA is a library for computing <a href=\"https://en.wikipedia.org/wiki/Deterministic_acyclic_finite_state_automaton\" rel=\"nofollow\">Deterministic Acyclic Finite State\nAutomata</a>\n(also known as \u201cdirected acyclic word graphs\u201d, or DAWG). DAFSA are data\nstructures derived from <a href=\"https://en.wikipedia.org/wiki/Trie\" rel=\"nofollow\">tries</a>\nthat allow to represent a set of sequences (typically character strings\nor <em>n</em>-grams) in the form of a directed acyclic graph with a single\nsource vertex (the <tt>start</tt> symbol of all sequences) and at least one\nsink edge (<tt>final</tt> symbols, each pointed to by one or more sequences).\nIn the current implementation, a trait of each node expresses whether it\ncan be used a sink.</p>\n<p>The primary difference between DAFSA and tries is that the latter\neliminates suffix and infix redundancy, as in the example of Figure 1\n(from the linked Wikipedia article) storing the set of strings\n<tt>\"tap\"</tt>, <tt>\"taps\"</tt>, <tt>\"top\"</tt>, and <tt>\"tops\"</tt>. Even though DAFSAs\ncannot be used to store precise frequency information, given that\nmultiple paths might reach the same terminal node, they still allow to\nestimate the sampling frequency; being acyclic, they can also reject any\nsequence not included in the training. Fuzzy extensions will allow to\nestimate the sampling probability of unobserved sequences.</p>\n<div>\n<img alt=\"Trie vs.\u00a0DAFSA\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49ac712bf9975554be76e26e8645754e34765911/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f747265736f6c64692f64616673612f6d61737465722f666967757265732f747269652d76732d64616673612e706e67\">\n<p>Trie vs.\u00a0DAFSA</p>\n</div>\n<p>This data structure is a special case of a finite state recognizer that\nacts as a deterministic finite state automaton, as it recognizes all and\nonly the sequences it was built upon. Frequently used in computer\nscience for the space-efficient storage of sets of sequences without\ncommon compression techniques, such as dictionary or entropy types, or\nwithout probabilistic data structures, such as Bloom filters, the\nautomata generated by this library are intended for linguistic\nexploration, and extend published models by allowing to approximate\nprobability of random observation by carrying information on the weight\nof each graph edge.</p>\n<div id=\"installation-and-usage\">\n<h2>Installation and usage</h2>\n<p>The library can be installed as any standard Python library with\n<tt>pip</tt>, and used as demonstrated in the following snippet:</p>\n<p>In any standard Python environment, <tt>dafsa</tt> can be installed with:</p>\n<pre>$ pip install dafsa\n</pre>\n<p>A <tt>conda</tt> package is also available, and can be installed (from the\n<tt>tresoldi</tt> channel) with:</p>\n<pre>$ conda install -c tresoldi dafsa\n</pre>\n<p>Detailed instructions on how to use the library can be found in the\n<a href=\"https://dafsa.readthedocs.io/en/latest/quickstart.html\" rel=\"nofollow\">official\ndocumentation</a>.\nFor most purposes, it is enough to pass a list of sequences to the\n<tt>DAFSA</tt> object:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dafsa</span> <span class=\"kn\">import</span> <span class=\"n\">DAFSA</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">DAFSA</span><span class=\"p\">([</span><span class=\"s2\">\"dib\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tip\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tips\"</span><span class=\"p\">,</span> <span class=\"s2\">\"top\"</span><span class=\"p\">]))</span>\n<span class=\"n\">DAFSA</span> <span class=\"k\">with</span> <span class=\"mi\">8</span> <span class=\"n\">nodes</span> <span class=\"ow\">and</span> <span class=\"mi\">9</span> <span class=\"n\">edges</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"n\">inserted</span> <span class=\"n\">sequences</span><span class=\"p\">)</span>\n  <span class=\"o\">+--</span> <span class=\"c1\">#0: 0(#1/4:&lt;d&gt;/1|#4/4:&lt;t&gt;/3) [('t', 4), ('d', 1)]</span>\n  <span class=\"o\">+--</span> <span class=\"c1\">#1: n(#2/1:&lt;i&gt;/1) [('i', 2)]</span>\n  <span class=\"o\">+--</span> <span class=\"c1\">#2: n(#3/1:&lt;b&gt;/1) [('b', 3)]</span>\n  <span class=\"o\">+--</span> <span class=\"c1\">#3: F() []</span>\n  <span class=\"o\">+--</span> <span class=\"c1\">#4: n(#5/3:&lt;i&gt;/2|#8/3:&lt;o&gt;/1) [('i', 5), ('o', 8)]</span>\n  <span class=\"o\">+--</span> <span class=\"c1\">#5: n(#6/2:&lt;p&gt;/2) [('p', 6)]</span>\n  <span class=\"o\">+--</span> <span class=\"c1\">#6: F(#3/2:&lt;s&gt;/1) [('s', 3)]</span>\n  <span class=\"o\">+--</span> <span class=\"c1\">#8: n(#3/1:&lt;p&gt;/1) [('p', 3)]</span>\n</pre>\n<p>Full documentation is available <a href=\"https://dafsa.readthedocs.io\" rel=\"nofollow\">at\nReadTheDocs.io</a>.</p>\n</div>\n<div id=\"showcase\">\n<h2>Showcase</h2>\n<ul>\n<li>Basic example:</li>\n</ul>\n<div>\n<img alt=\"First example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/403821a2e30eaabe6cc62c981f4bb799c4a272a8/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f747265736f6c64692f64616673612f6d61737465722f666967757265732f6578616d706c652e706e67\">\n<p>First example</p>\n</div>\n<ul>\n<li>Output can be textual, GML, DOT, or (via dot and third-party\nsoftware) PNG, PDF, ASCII-art and Unicode-art:</li>\n</ul>\n<div>\n<img alt=\"DNA example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7da93a11e56753a45e77e5581bb552f4c88e844c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f747265736f6c64692f64616673612f6d61737465722f666967757265732f646e612e706e67\">\n<p>DNA example</p>\n</div>\n<pre>                                 G                                A\n                             +---------------------+          +----------+\n                             |                     v          |          v\n    #====#  C   +---+  G   +---+  C   +---+  G   +---+  A   +---+  T   +---+  A   #===#\n+-- H 0  H ---&gt; | 5 | ---&gt; | 6 | ---&gt; | 7 | ---&gt; | 8 | ---&gt; | 9 | ---&gt; | 3 | ---&gt; H 4 H\n|   #====#      +---+      +---+      +---+      +---+      +---+      +---+      #===#\n|     |    A                                                             ^\n| G   +-----------+                                                      |\n|                 v                                                      |\n|   +----+  G   +---+  A   +---+  T                                      |\n+-&gt; | 20 | ---&gt; | 1 | ---&gt; | 2 | ----------------------------------------+\n    +----+      +---+      +---+\n</pre>\n<pre>                                 G                                A\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                             \u2502                     \u25bc          \u2502          \u25bc\n    \u2554\u2550\u2550\u2550\u2550\u2557  C   \u250c\u2500\u2500\u2500\u2510  G   \u250c\u2500\u2500\u2500\u2510  C   \u250c\u2500\u2500\u2500\u2510  G   \u250c\u2500\u2500\u2500\u2510  A   \u250c\u2500\u2500\u2500\u2510  T   \u250c\u2500\u2500\u2500\u2510  A   \u2554\u2550\u2550\u2550\u2557\n\u250c\u2500\u2500 \u2551 0  \u2551 \u2500\u2500\u2500\u25b6 \u2502 5 \u2502 \u2500\u2500\u2500\u25b6 \u2502 6 \u2502 \u2500\u2500\u2500\u25b6 \u2502 7 \u2502 \u2500\u2500\u2500\u25b6 \u2502 8 \u2502 \u2500\u2500\u2500\u25b6 \u2502 9 \u2502 \u2500\u2500\u2500\u25b6 \u2502 3 \u2502 \u2500\u2500\u2500\u25b6 \u2551 4 \u2551\n\u2502   \u255a\u2550\u2550\u2550\u2550\u255d      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u255a\u2550\u2550\u2550\u255d\n\u2502     \u2502    A                                                             \u25b2\n\u2502 G   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                                      \u2502\n\u2502                 \u25bc                                                      \u2502\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2510  G   \u250c\u2500\u2500\u2500\u2510  A   \u250c\u2500\u2500\u2500\u2510  T                                      \u2502\n\u2514\u2500\u25b6 \u2502 20 \u2502 \u2500\u2500\u2500\u25b6 \u2502 1 \u2502 \u2500\u2500\u2500\u25b6 \u2502 2 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2514\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2518\n</pre>\n<ul>\n<li>With or without single-path joining:</li>\n</ul>\n<div>\n<img alt=\"Phoneme example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58f4716e835be8679bfa4081e022ffca401bbf09/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f747265736f6c64692f64616673612f6d61737465722f666967757265732f70686f6e656d65732e706e67\">\n<p>Phoneme example</p>\n</div>\n<div>\n<img alt=\"Reduced Phoneme example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdaf43caa4f32fa49bd555c82905c2b03c24e660/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f747265736f6c64692f64616673612f6d61737465722f666967757265732f726564756365645f70686f6e656d65732e706e67\">\n<p>Reduced Phoneme example</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>Version 0.6:</p>\n<ul>\n<li>Documentation improvements following JOSS review</li>\n<li>Fixed bug where node finality was not considered in minimization</li>\n</ul>\n<p>Version 0.5.1:</p>\n<ul>\n<li>Minor changes in preparation for submission (including tagged\nrelease)</li>\n</ul>\n<p>Version 0.5:</p>\n<ul>\n<li>Improvements in speed, particularly in the <tt>__eq__()</tt> method of\n<tt>DAFSANode</tt> and the <tt>_minimize()</tt> method of <tt>DAFSA</tt>. The\ncomputation of a DAFSA for the contents of <tt>/usr/share/dict/words</tt>\nin the test machine (99,171 sequences) is now performed in under 8\nminutes.</li>\n<li>Added code from Daciuk\u2019s packages in an extra directory, along with\nnotes on license</li>\n</ul>\n<p>Version 0.4:</p>\n<ul>\n<li>Full documentation for existing code</li>\n<li>Added GML, PDF, and SVG export</li>\n<li>Allow to access all options from command-line</li>\n</ul>\n<p>Version 0.3:</p>\n<ul>\n<li>Allow to join transitions in single sub-paths</li>\n<li>Allows to export a DAFSA as a <tt>networkx</tt> graph</li>\n<li>Preliminary documentation at\n<a href=\"https://dafsa.readthedocs.io\" rel=\"nofollow\">ReadTheDocs</a></li>\n</ul>\n<p>Version 0.2.1:</p>\n<ul>\n<li>Added support for segmented data</li>\n</ul>\n<p>Version 0.2:</p>\n<ul>\n<li>Added support for weighted edges and nodes</li>\n<li>Added DOT export and Graphviz generation</li>\n<li>Refined minimization method, which can be skipped if desired\n(resulting in a standard trie)</li>\n<li>Added examples in the resources, also used for test data</li>\n</ul>\n<p>Version 0.1:</p>\n<ul>\n<li>First public release.</li>\n</ul>\n</div>\n<div id=\"roadmap\">\n<h2>Roadmap</h2>\n<p>After 1.0:</p>\n<ul>\n<li>Preliminary generation of minimal regular expressions matching the\ncontents of a DAFSA</li>\n<li>Consider adding support for empty transitions (or depend on the user\naligning those)</li>\n<li>Work on options for nicer graphviz output (colors, widths, etc.)</li>\n</ul>\n</div>\n<div id=\"community-guidelines\">\n<h2>Community guidelines</h2>\n<p>While the author can be contacted directly for support, it is\nrecommended that third parties use GitHub standard features, such as\nissues and pull requests, to contribute, report problems, or seek\nsupport.</p>\n<p>Contributing guidelines, including a code of conduct, can be found in\nthe CONTRIBUTING.md file.</p>\n</div>\n<div id=\"author-and-citation\">\n<h2>Author and citation</h2>\n<p>The library is developed by Tiago Tresoldi (<a href=\"mailto:tresoldi%40shh.mpg.de\">tresoldi<span>@</span>shh<span>.</span>mpg<span>.</span>de</a>).</p>\n<p>The author has received funding from the European Research Council (ERC)\nunder the European Union\u2019s Horizon 2020 research and innovation\nprogramme (grant agreement No.\u00a0<a href=\"https://cordis.europa.eu/project/rcn/206320/factsheet/en\" rel=\"nofollow\">ERC Grant\n#715618</a>,\n<a href=\"https://digling.org/calc/\" rel=\"nofollow\">Computer-Assisted Language Comparison</a>.</p>\n<p>If you use <tt>dafsa</tt>, please cite it as:</p>\n<blockquote>\nTresoldi, Tiago (2020). DAFSA, a a library for computing\nDeterministic Acyclic Finite State Automata. Version 1.0. Jena.\nAvailable at: <a href=\"https://github.com/tresoldi/dafsa\" rel=\"nofollow\">https://github.com/tresoldi/dafsa</a></blockquote>\n<p>In BibTeX:</p>\n<pre><span class=\"nc\">@misc</span><span class=\"p\">{</span><span class=\"nl\">Tresoldi2020dafsa</span><span class=\"p\">,</span>\n  <span class=\"na\">author</span> <span class=\"p\">=</span> <span class=\"s\">{Tresoldi, Tiago}</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span> <span class=\"p\">=</span> <span class=\"s\">{DAFSA, a a library for computing Deterministic Acyclic Finite State Automata. Version 1.0.}</span><span class=\"p\">,</span>\n  <span class=\"na\">howpublished</span> <span class=\"p\">=</span> <span class=\"s\">{\\url{https://github.com/tresoldi/dafsa}}</span><span class=\"p\">,</span>\n  <span class=\"na\">address</span> <span class=\"p\">=</span> <span class=\"s\">{Jena}</span><span class=\"p\">,</span>\n  <span class=\"na\">year</span> <span class=\"p\">=</span> <span class=\"s\">{2020}</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6639534, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "78e6f229ce31033777c8187a43f634b4", "sha256": "8fa28369ba50c022c68b9eb18498edf6d6e56dea0d998d3896d321e04c8e4b21"}, "downloads": -1, "filename": "dafsa-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "78e6f229ce31033777c8187a43f634b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8850, "upload_time": "2019-11-12T09:55:24", "upload_time_iso_8601": "2019-11-12T09:55:24.238048Z", "url": "https://files.pythonhosted.org/packages/82/22/a1976d54a235c9f06d725de7036f69dce876082976f48351fb5dafb8f1af/dafsa-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ca8f75449b36c02c3930c8fccfca076", "sha256": "956e72d56a91290358f054a6f5701e50e78da8c13c703bfec6d8a177a2f47407"}, "downloads": -1, "filename": "dafsa-0.1.tar.gz", "has_sig": false, "md5_digest": "6ca8f75449b36c02c3930c8fccfca076", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8234, "upload_time": "2019-11-12T09:55:26", "upload_time_iso_8601": "2019-11-12T09:55:26.804045Z", "url": "https://files.pythonhosted.org/packages/f9/c5/34af97c3e10e94a00235ee0e2a1584bdf1e094a024fc224ddccbc92e4303/dafsa-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "1bea4b26474f43a3241fe8aeac63da67", "sha256": "0a850f9a16d5080f878b312c0742d9f32e7cddd5671f22a634f53f98d4d7ad4d"}, "downloads": -1, "filename": "dafsa-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1bea4b26474f43a3241fe8aeac63da67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15503, "upload_time": "2019-11-17T14:29:53", "upload_time_iso_8601": "2019-11-17T14:29:53.431847Z", "url": "https://files.pythonhosted.org/packages/57/5b/19a2666b8648f2f0a367e1e500fa5798af7334ef31e16f9aa8fb055776b6/dafsa-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4b99d3bdbd4e07bf7c9409d0f2f7bc9", "sha256": "a5ac78e185fd202a71697da1b40b09cdba6e98ba80ca0bde6fe98e7290b21bcd"}, "downloads": -1, "filename": "dafsa-0.2.tar.gz", "has_sig": false, "md5_digest": "a4b99d3bdbd4e07bf7c9409d0f2f7bc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17685, "upload_time": "2019-11-17T14:29:54", "upload_time_iso_8601": "2019-11-17T14:29:54.801893Z", "url": "https://files.pythonhosted.org/packages/18/d6/a12d5c486e9278fbc608d8a64c2162732688b3470fc857655df66b712d77/dafsa-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "523e8ae27707ef7d4325926cce8c4c60", "sha256": "7c7e829c088ccb7bb67e09b3360ee1b2baaeacd6deafa3f27a93c36c9eb595b4"}, "downloads": -1, "filename": "dafsa-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "523e8ae27707ef7d4325926cce8c4c60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16025, "upload_time": "2019-11-22T09:17:11", "upload_time_iso_8601": "2019-11-22T09:17:11.819526Z", "url": "https://files.pythonhosted.org/packages/9e/f8/6869badfc9e15155e9fe3c85a00dd3ebcf140a53afe1f8a1a4c5dfa03309/dafsa-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ce42db8e7cb428ca011704fe4514c83", "sha256": "c5606e3719fcf53d755065fc0d57ffb66bb0ce66adeb1c843312248819120cfa"}, "downloads": -1, "filename": "dafsa-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5ce42db8e7cb428ca011704fe4514c83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18332, "upload_time": "2019-11-22T09:17:14", "upload_time_iso_8601": "2019-11-22T09:17:14.320412Z", "url": "https://files.pythonhosted.org/packages/43/05/3dc693596bac9b3c5648bef7e7a11e17461926e2e45c4c9d329e6bb03f4c/dafsa-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "fd70bbb3eee324771909a71bdc8049b9", "sha256": "c9d92d0162afa46314a45db6e88b4f972988a64b2f0ea3b7244eed7e785b337a"}, "downloads": -1, "filename": "dafsa-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fd70bbb3eee324771909a71bdc8049b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18604, "upload_time": "2019-12-02T11:24:45", "upload_time_iso_8601": "2019-12-02T11:24:45.866142Z", "url": "https://files.pythonhosted.org/packages/2b/cb/68e59db98dbe93480ecf4cadbd7ea7ac83c9fe7a4953d43faf67f3b0ec0e/dafsa-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5de93731a667d0b6ca016e321ce5e589", "sha256": "0d02b8b9f84a198843cc1beac0074f112a6d2d4de7b4329b938b0567f42a9086"}, "downloads": -1, "filename": "dafsa-0.3.tar.gz", "has_sig": false, "md5_digest": "5de93731a667d0b6ca016e321ce5e589", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21031, "upload_time": "2019-12-02T11:24:47", "upload_time_iso_8601": "2019-12-02T11:24:47.725643Z", "url": "https://files.pythonhosted.org/packages/85/ce/4b1f09655994e91cdb29ecadce11bace0c5949d34fe529ab02bac6c2de2a/dafsa-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "916bd50510b9e3b87c3d1f093ae0ef2d", "sha256": "3e6bd2a987c4c4fd1b0a2ed3271236e7b34ddba6d7fa8dee3a66e4ac3c796ad0"}, "downloads": -1, "filename": "dafsa-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "916bd50510b9e3b87c3d1f093ae0ef2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19109, "upload_time": "2019-12-10T15:29:37", "upload_time_iso_8601": "2019-12-10T15:29:37.090327Z", "url": "https://files.pythonhosted.org/packages/7c/62/f10239a6d3ef927d5066a187079d33ce3ff4c0bcb47b622a2aad21eebd13/dafsa-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b11488d7be63b5dba216ed04b839db3", "sha256": "cbc7d2bc629aacf663e0856413bdd6eb26eb3b51fdd0ea22297ce2e1d9971432"}, "downloads": -1, "filename": "dafsa-0.4.tar.gz", "has_sig": false, "md5_digest": "9b11488d7be63b5dba216ed04b839db3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20182, "upload_time": "2019-12-10T15:29:39", "upload_time_iso_8601": "2019-12-10T15:29:39.060521Z", "url": "https://files.pythonhosted.org/packages/35/65/5013f23c0254322ad9eebaecd8e438c0fae0756755c5599512a7acff66c1/dafsa-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "ce3182b944bb91b1ef000cd59520550f", "sha256": "534885fcf5138cf7d0bca85b00ea4844e31515c98d4b62fef9f73e9305c917b8"}, "downloads": -1, "filename": "dafsa-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ce3182b944bb91b1ef000cd59520550f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19608, "upload_time": "2019-12-11T13:54:04", "upload_time_iso_8601": "2019-12-11T13:54:04.479767Z", "url": "https://files.pythonhosted.org/packages/6e/97/3ff24545389a8d534a6210704df1c1107546822e2785299e171ac8e238d6/dafsa-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70ba69c3f300e691405a7de23d51ed1d", "sha256": "dffdddc59f36c3ebeee8b9bc6da31125154cdc8b9953b0a48493a66e1855f537"}, "downloads": -1, "filename": "dafsa-0.5.tar.gz", "has_sig": false, "md5_digest": "70ba69c3f300e691405a7de23d51ed1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20755, "upload_time": "2019-12-11T13:54:06", "upload_time_iso_8601": "2019-12-11T13:54:06.382951Z", "url": "https://files.pythonhosted.org/packages/82/7c/2191ccdad4c6f8a3b35cd9d5baffa7fccb55668d53bc4cb63642a09640c4/dafsa-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "392d994002ee48b382cc741795b9eeca", "sha256": "e58a15587c3a010dc2bdf51d7c15453f20e931d9a2eebb55bed02fff0f5bec28"}, "downloads": -1, "filename": "dafsa-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "392d994002ee48b382cc741795b9eeca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19992, "upload_time": "2019-12-12T10:59:48", "upload_time_iso_8601": "2019-12-12T10:59:48.579912Z", "url": "https://files.pythonhosted.org/packages/b5/7e/321d72cb6163e0042eed6fc7ac63cb8cd7367ef62b3f0c5fa81ce03b4616/dafsa-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f181053b06232288c6c0c94a7fbaaf55", "sha256": "f36bc2b0003785a73c4f638ed5ebd227807e67f15ffdd57b0e5cf3ee9b575d8d"}, "downloads": -1, "filename": "dafsa-0.5.1.tar.gz", "has_sig": false, "md5_digest": "f181053b06232288c6c0c94a7fbaaf55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21087, "upload_time": "2019-12-12T10:59:51", "upload_time_iso_8601": "2019-12-12T10:59:51.405425Z", "url": "https://files.pythonhosted.org/packages/8b/fd/566bb9ee342b0c9cc204eb37f974d1e38ffe65584e5aba91adb6bda09b7d/dafsa-0.5.1.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "e62cb617ade526f13af6784dd2541a8b", "sha256": "9921e44c55e8ecb1ac37b14ed555f103b7bfd4daba3dc65dccb7757c4a31a63c"}, "downloads": -1, "filename": "dafsa-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e62cb617ade526f13af6784dd2541a8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20271, "upload_time": "2020-02-02T12:41:35", "upload_time_iso_8601": "2020-02-02T12:41:35.871715Z", "url": "https://files.pythonhosted.org/packages/e2/fd/5900f28b0855680622d2726825f805fa24e0d5806936cd2e1fbe8d92588e/dafsa-0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e24b4dc70ed2e88d82707630f2283883", "sha256": "9a6d3420af91d159a15db7686337d56bdeabbadd6e3be9933bcdf0af4048435d"}, "downloads": -1, "filename": "dafsa-0.6.tar.gz", "has_sig": false, "md5_digest": "e24b4dc70ed2e88d82707630f2283883", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24884, "upload_time": "2020-02-02T12:41:39", "upload_time_iso_8601": "2020-02-02T12:41:39.797593Z", "url": "https://files.pythonhosted.org/packages/7a/08/04c7145d5e35ccd96e778f0f97f2021784a76e41358e9283cf5d924c0e57/dafsa-0.6.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "4a361af6b50852462641880451c1613a", "sha256": "ff5e1beaf118198e688507c2bc1cd575784ed4bc34260f3ac21dba1bba208909"}, "downloads": -1, "filename": "dafsa-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a361af6b50852462641880451c1613a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19905, "upload_time": "2020-02-16T09:31:29", "upload_time_iso_8601": "2020-02-16T09:31:29.124208Z", "url": "https://files.pythonhosted.org/packages/f9/39/199abcf83e5d589dbfaad9d500baae4a4d823fc635fbf294704891687a4f/dafsa-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11c50d3cea023dcfc9a583a6b4fefc34", "sha256": "0842b4dd3817099aa6c13fd1202bb5f6a2d86da74149baa9068c93abd41c418a"}, "downloads": -1, "filename": "dafsa-1.0.tar.gz", "has_sig": false, "md5_digest": "11c50d3cea023dcfc9a583a6b4fefc34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24837, "upload_time": "2020-02-16T09:31:30", "upload_time_iso_8601": "2020-02-16T09:31:30.653011Z", "url": "https://files.pythonhosted.org/packages/d6/08/8bf5f26a2a038b62654a7abcfbfff58b922664c5cb6ad824f11d314bcf31/dafsa-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a361af6b50852462641880451c1613a", "sha256": "ff5e1beaf118198e688507c2bc1cd575784ed4bc34260f3ac21dba1bba208909"}, "downloads": -1, "filename": "dafsa-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a361af6b50852462641880451c1613a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19905, "upload_time": "2020-02-16T09:31:29", "upload_time_iso_8601": "2020-02-16T09:31:29.124208Z", "url": "https://files.pythonhosted.org/packages/f9/39/199abcf83e5d589dbfaad9d500baae4a4d823fc635fbf294704891687a4f/dafsa-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11c50d3cea023dcfc9a583a6b4fefc34", "sha256": "0842b4dd3817099aa6c13fd1202bb5f6a2d86da74149baa9068c93abd41c418a"}, "downloads": -1, "filename": "dafsa-1.0.tar.gz", "has_sig": false, "md5_digest": "11c50d3cea023dcfc9a583a6b4fefc34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24837, "upload_time": "2020-02-16T09:31:30", "upload_time_iso_8601": "2020-02-16T09:31:30.653011Z", "url": "https://files.pythonhosted.org/packages/d6/08/8bf5f26a2a038b62654a7abcfbfff58b922664c5cb6ad824f11d314bcf31/dafsa-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:55 2020"}