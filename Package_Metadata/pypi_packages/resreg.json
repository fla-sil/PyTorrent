{"info": {"author": "Japheth Gado", "author_email": "japhethgado@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "**Resampling for regression (resreg)**\n========================================\n\nResreg is a Python package for resampling imbalanced distributions in regression problems.\n\nIf you find resreg useful, please cite all of the following:\n\n1. Gado, J.E., Beckham, G.T., and Payne, C.M (2020). Improving enzyme optimum temperature prediction with resampling strategies and ensemble learning.\n2. Branco, P., Torgo, L., and Ribeiro, R.P. (2019). Pre-processing approaches for imbalanced distributions in regression.\n3. Branco, P., Torgo, L., and Ribeiro, R.P. (2018). REBAGG: Resampled bagging for imbalanced regression.\n\n\nInstallation\n-------------\nInstall with pip\n\n.. code:: shell-session\n\n    pip install resreg\n\nOr from source\n\n.. code:: shell-session\n\n    git clone https://github.com/jafetgado/resreg.git\n    cd resreg\n    python setup.py install\n\n\n\nPrerequisites\n-------------\n\n1. Python 3\n2. Numpy\n3. Scipy\n4. Pandas\n5. Scikit-learn\n\n\nUsage\n-----\nA regression dataset (X, y) can be resampled to mitigate the imbalance in the distribution with any of six strategies: random oversampling, random undersampling, SMOTER, Gaussian noise, WERCS, or Rebagg.\n\n1. Random oversampling: randomly oversamples rare values selected by the user via a relevance function.\n2. Random undersampling: randomly undersamples abundant values.\n3. SMOTER: randomly undersamples abundant values; oversamples rare values by interpolation between near neighbors.\n4. Gaussian noise: randomly undersamples abundant values; oversamples rare values by adding Gaussian noise.\n5. WERCS: resamples the dataset by selecting instances using user-specified relevance values as weights.\n6. Rebagg: Trains an ensemble of base learners on independently resampled bootstrap subsets of the dataset.\n\nSee the tutorial for more details.\n\n\nExamples\n----------\n.. code:: python\n\n    import resreg\n    from sklearn.metrics import train_test_split\n    from sklearn.metrics import RandomForestRegressor\n\n    # Split dataset to training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n\n    # Resample training set with random oversampling\n    relevance = resreg.sigmoid_relevance(y, cl=None, ch=np.percentile(y, 90))\n    X_train, y_train = resreg.random_oversampling(X_train, y_train, relevance, relevance_threshold=0.5,\n                                                  over='balance')\n\n    # Fit regressor to resampled training set\n    reg = RandomForestRegressor()\n    reg.fit(X_train, y_train)\n    y_pred = reg.predict(X_train, y_train)\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jafetgado/resreg", "keywords": "resampling regression machine-learning preprocessing", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "resreg", "package_url": "https://pypi.org/project/resreg/", "platform": "", "project_url": "https://pypi.org/project/resreg/", "project_urls": {"Homepage": "https://github.com/jafetgado/resreg"}, "release_url": "https://pypi.org/project/resreg/0.1/", "requires_dist": ["numpy (>=1.14.0)", "pandas (>=0.24.0)", "scipy (>=1.0.0)", "scikit-learn (==0.21.0)"], "requires_python": ">=3", "summary": "Resampling strategies for regression", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Resreg is a Python package for resampling imbalanced distributions in regression problems.</p>\n<p>If you find resreg useful, please cite all of the following:</p>\n<ol>\n<li>Gado, J.E., Beckham, G.T., and Payne, C.M (2020). Improving enzyme optimum temperature prediction with resampling strategies and ensemble learning.</li>\n<li>Branco, P., Torgo, L., and Ribeiro, R.P. (2019). Pre-processing approaches for imbalanced distributions in regression.</li>\n<li>Branco, P., Torgo, L., and Ribeiro, R.P. (2018). REBAGG: Resampled bagging for imbalanced regression.</li>\n</ol>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install with pip</p>\n<pre><span class=\"go\">pip install resreg</span>\n</pre>\n<p>Or from source</p>\n<pre><span class=\"go\">git clone https://github.com/jafetgado/resreg.git\ncd resreg\npython setup.py install</span>\n</pre>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<ol>\n<li>Python 3</li>\n<li>Numpy</li>\n<li>Scipy</li>\n<li>Pandas</li>\n<li>Scikit-learn</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>A regression dataset (X, y) can be resampled to mitigate the imbalance in the distribution with any of six strategies: random oversampling, random undersampling, SMOTER, Gaussian noise, WERCS, or Rebagg.</p>\n<ol>\n<li>Random oversampling: randomly oversamples rare values selected by the user via a relevance function.</li>\n<li>Random undersampling: randomly undersamples abundant values.</li>\n<li>SMOTER: randomly undersamples abundant values; oversamples rare values by interpolation between near neighbors.</li>\n<li>Gaussian noise: randomly undersamples abundant values; oversamples rare values by adding Gaussian noise.</li>\n<li>WERCS: resamples the dataset by selecting instances using user-specified relevance values as weights.</li>\n<li>Rebagg: Trains an ensemble of base learners on independently resampled bootstrap subsets of the dataset.</li>\n</ol>\n<p>See the tutorial for more details.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">resreg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestRegressor</span>\n\n<span class=\"c1\"># Split dataset to training and testing sets</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.25</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Resample training set with random oversampling</span>\n<span class=\"n\">relevance</span> <span class=\"o\">=</span> <span class=\"n\">resreg</span><span class=\"o\">.</span><span class=\"n\">sigmoid_relevance</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">cl</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ch</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">percentile</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">))</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">resreg</span><span class=\"o\">.</span><span class=\"n\">random_oversampling</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">relevance</span><span class=\"p\">,</span> <span class=\"n\">relevance_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n                                              <span class=\"n\">over</span><span class=\"o\">=</span><span class=\"s1\">'balance'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit regressor to resampled training set</span>\n<span class=\"n\">reg</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestRegressor</span><span class=\"p\">()</span>\n<span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7091227, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4d71c1d95e53d7c38ee116088311aea4", "sha256": "e8deb042d37d48fef986f666d960f872ebfe4c229265310aa1ec5ddd1d729cda"}, "downloads": -1, "filename": "resreg-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d71c1d95e53d7c38ee116088311aea4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 14520, "upload_time": "2020-04-24T09:17:18", "upload_time_iso_8601": "2020-04-24T09:17:18.933225Z", "url": "https://files.pythonhosted.org/packages/61/74/0b664a8507e15507da5031fd92877d57551a7d362edc8089aa369c340e84/resreg-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d71c1d95e53d7c38ee116088311aea4", "sha256": "e8deb042d37d48fef986f666d960f872ebfe4c229265310aa1ec5ddd1d729cda"}, "downloads": -1, "filename": "resreg-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d71c1d95e53d7c38ee116088311aea4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 14520, "upload_time": "2020-04-24T09:17:18", "upload_time_iso_8601": "2020-04-24T09:17:18.933225Z", "url": "https://files.pythonhosted.org/packages/61/74/0b664a8507e15507da5031fd92877d57551a7d362edc8089aa369c340e84/resreg-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:03:44 2020"}