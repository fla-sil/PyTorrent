{"info": {"author": "Hamza Rhibi & Walid Sadallah", "author_email": "elrhibihamzas@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Geo Library for Amazon DynamoDB\nThis project is an unofficial port of [awslabs/dynamodb-geo][dynamodb-geo], bringing creation and querying of geospatial data to Python developers using [Amazon DynamoDB][dynamodb].\n\n## Features\n* **Box Queries:** Return all of the items that fall within a pair of geo points that define a rectangle as projected onto a sphere.\n* **Radius Queries:** Return all of the items that are within a given radius of a geo point.\n* **Basic CRUD Operations:**  Create, retrieve, update, and delete geospatial data items.\n* **Customizable:** Access to raw request and result objects from the AWS SDK for python.\n\n## Installation\n\n```python\npip install s2sphere\npip install boto3\npip install -i https://test.pypi.org/simple/ dynamodbgeo\n```\n\n## Getting started\nFirst you'll need to import the AWS sdk and set up your DynamoDB connection:\n\n```python\nimport boto3\nimport dynamodbgeo\nimport uuid\ndynamodb = boto3.client('dynamodb', region_name='us-east-2')\n```\n\nNext you must create an instance of `GeoDataManagerConfiguration` for each geospatial table you wish to interact with. This is a container for various options (see API below), but you must always provide a `DynamoDB` instance and a table name.\n\n```python\n    config = dynamodbgeo.GeoDataManagerConfiguration(dynamodb, 'geo_test_8')\n```\n\nFinally, you should instantiate a manager to query and write to the table using this config object.\n\n```python\ngeoDataManager = dynamodbgeo.GeoDataManager(config)\n```\n\n## Choosing a `hashKeyLength` (optimising for performance and cost)\nThe `hashKeyLength` is the number of most significant digits (in base 10) of the 64-bit geo hash to use as the hash key. Larger numbers will allow small geographical areas to be spread across DynamoDB partitions, but at the cost of performance as more [queries][dynamodb-query] need to be executed for box/radius searches that span hash keys. See [these tests][hashkeylength-tests](TODO) for an idea of how query performance scales with `hashKeyLength` for different search radii.\n\nIf your data is sparse, a large number will mean more RCUs since more empty queries will be executed and each has a minimum cost. However if your data is dense and `hashKeyLength` too short, more RCUs will be needed to read a hash key and a higher proportion will be discarded by server-side filtering.\n\nFrom the [AWS `Query` documentation][dynamodb-query]\n> DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. ... **The number will also be the same whether or not you use a `FilterExpression`**\n\nOptimally, you should pick the largest `hashKeyLength` your usage scenario allows. The wider your typical radius/box queries, the smaller it will need to be.\n\nNote that the [Java version][dynamodb-geo] uses a `hashKeyLength` of `6` by default. The same value will need to be used if you access the same data with both clients.\n\nThis is an important early choice, since changing your `hashKeyLength` will mean recreating your data.\n\n\nFrom the [AWS `Query` documentation][dynamodb-query]\n> DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. ... **The number will also be the same whether or not you use a `FilterExpression`**\n\nOptimally, you should pick the largest `hashKeyLength` your usage scenario allows. The wider your typical radius/box queries, the smaller it will need to be.\n\nNote that the [Java version][dynamodb-geo] uses a `hashKeyLength` of `6` by default. The same value will need to be used if you access the same data with both clients.\n\nThis is an important early choice, since changing your `hashKeyLength` will mean recreating your data.\n\n## Creating a table\n`GeoTableUtil` has a static method `getCreateTableRequest` for helping you prepare a [DynamoDB CreateTable request][createtable] request, given a `GeoDataManagerConfiguration`.\n\nYou can modify this request as desired before executing it using AWS's DynamoDB SDK.\n\nExample:\n```python\n# Pick a hashKeyLength appropriate to your usage\nconfig.hashKeyLength = 3\n\n# Use GeoTableUtil to help construct a CreateTableInput.\ntable_util = dynamodbgeo.GeoTableUtil(config)\ncreate_table_input=table_util.getCreateTableRequest()\n\n#tweaking the base table parameters as a dict\ncreate_table_input[\"ProvisionedThroughput\"]['ReadCapacityUnits']=5\n\n# Use GeoTableUtil to create the table\ntable_util.create_table(create_table_input)\n```\n\n\n## Adding data\n```python\n#preparing non key attributes for the item to add\n\nPutItemInput = {\n        'Item': {\n            'Country': {'S': \"Tunisia\"},\n            'Capital': {'S': \"Tunis\"},\n            'year': {'S': '2020'}\n        },\n        'ConditionExpression': \"attribute_not_exists(hashKey)\" # ... Anything else to pass through to `putItem`, eg ConditionExpression\n\n}\ngeoDataManager.put_Point(dynamodbgeo.PutPointInput(\n        dynamodbgeo.GeoPoint(36.879163, 10.243120), # latitude then latitude longitude\n         str( uuid.uuid4()), # Use this to ensure uniqueness of the hash/range pairs.\n         PutItemInput # pass the dict here\n        ))\n\n```\nSee also [DynamoDB PutItem request][putitem]\n\n## Updating a specific point\nNote that you cannot update the hash key, range key, geohash or geoJson. If you want to change these, you'll need to recreate the record.\n\nYou must specify a `RangeKeyValue`, a `GeoPoint`, and an `UpdateItemInput dict` matching the [DynamoDB UpdateItem][updateitem] request (`TableName` and `Key` are filled in for you).\n\n#### Note : You must NOT update geoJson and geohash attributes.\n```python\n#define a dict of the item to update\nUpdateItemDict= { # Dont provide TableName and Key, they are filled in for you\n        \"UpdateExpression\": \"set Capital = :val1\",\n        \"ConditionExpression\": \"Capital = :val2\",\n        \"ExpressionAttributeValues\": {\n            \":val1\": {\"S\": \"Tunis\"},\n            \":val2\": {\"S\": \"Ariana\"}\n        },\n        \"ReturnValues\": \"ALL_NEW\"\n}\ngeoDataManager.update_Point(dynamodbgeo.UpdateItemInput(\n        dynamodbgeo.GeoPoint(36.879163,10.24312), # latitude then latitude longitude\n         \"1e955491-d8ba-483d-b7ab-98370a8acf82\", # Use this to ensure uniqueness of the hash/range pairs.\n         UpdateItemDict # pass the dict that contain the remaining parameters here\n         ))\n```\n\n## Deleting a specific point\nYou must specify a `RangeKeyValue` and a `GeoPoint`. Optionally, you can pass `DeleteItemInput` matching [DynamoDB DeleteItem][deleteitem] request (`TableName` and `Key` are filled in for you).\n\n```python\n# Preparing dict of the item to delete\nDeleteItemDict= {\n            \"ConditionExpression\": \"attribute_exists(Country)\",\n            \"ReturnValues\": \"ALL_OLD\" \n            # Don't put keys here, they will be generated for you implecitly\n        }\ngeoDataManager.delete_Point(\n    dynamodbgeo.DeleteItemInput(\n    dynamodbgeo.GeoPoint(36.879163,10.24312), # latitude then latitude longitude\n        \"0df9742f-619b-49e5-b79e-9fb94279d30c\", # Use this to ensure uniqueness of the hash/range pairs.\n        DeleteItemDict # pass the dict that contain the remaining parameters here\n        ))\n```\n## Rectangular queries\nQuery by rectangle by specifying a `MinPoint` and `MaxPoint`.\n\n```python\n# Querying a rectangle\nquery_rectangle_result=dynamodbgeo.QueryRectangleRequest(\n            dynamodbgeo.GeoPoint(36.878184, 10.242358), # min point\n            dynamodbgeo.GeoPoint(36.879317, 10.243648)))) # max point\n```\n\n## Radius queries\nQuery by radius by specifying a `CenterPoint` and `RadiusInMeter`.\n\n```python\n# Querying 95 meter from the center point (36.879131, 10.243057)\nquery_reduis_result=geoDataManager.queryRadius(\n    dynamodbgeo.QueryRadiusRequest(\n        dynamodbgeo.GeoPoint(36.879131, 10.243057), # center point\n        95)) # diameter\n\n```\n\n## Batch operations\nTODO: \n## Configuration reference\nThese are public properties of a `GeoDataManagerConfiguration` instance. After creating the config object you may modify these properties.\n\n#### geohashAttributeName: string = \"geohash\"\nThe name of the attribute storing the full 64-bit geohash. Its value is auto-generated based on item coordinates.\n\n#### hashKeyAttributeName: string = \"hashKey\"\nThe name of the attribute storing the first `hashKeyLength` digits (default 2) of the geo hash, used as the hash (aka partition) part of a [hash/range primary key pair][hashrange]. Its value is auto-generated based on item coordinates.\n\n#### hashKeyLength: number = 2\nSee [above][choosing-hashkeylength].\n\n#### rangeKeyAttributeName: string = \"rangeKey\"\nThe name of the attribute storing the range key, used as the range (aka sort) part of a [hash/range key primary key pair][hashrange]. Its value must be specified by you (hash-range pairs must be unique).\n\n#### geoJsonAttributeName: string = \"geoJson\"\nThe name of the attribute which will contain the longitude/latitude pair in a GeoJSON-style point (see also `longitudeFirst`).\n\n#### geohashIndexName: string = \"geohash-index\"\nThe name of the index to be created against the geohash. Only used for creating new tables.\n\n## Example\nTODO\n\n## Limitations\n\n### No Delete and Update Item supported\nCurrently, the library does not support update and delete item for now. The items for now can be deleted using AWS SDK [UpdateItem][updateitem] and [DeleteItem][deleteitem]\n\n### No composite key support\nCurrently, the library does not support composite keys. You may want to add tags such as restaurant, bar, and coffee shop, and search locations of a specific category; however, it is currently not possible. You need to create a table for each tag and store the items separately.\n\n### Queries retrieve all paginated data\nAlthough low level [DynamoDB Query][dynamodb-query] requests return paginated results, this library automatically pages through the entire result set. When querying a large area with many points, a lot of Read Capacity Units may be consumed.\n\n### More Read Capacity Units\nThe library retrieves candidate Geo points from the cells that intersect the requested bounds. The library then post-processes the candidate data, filtering out the specific points that are outside the requested bounds. Therefore, the consumed Read Capacity Units will be higher than the final results dataset. Typically 8 queries are exectued per radius or box search.\n\n### High memory consumption\nBecause all paginated `Query` results are loaded into memory and processed, it may consume substantial amounts of memory for large datasets.\n\n### Dataset density limitation\nThe Geohash used in this library is roughly centimeter precision. Therefore, the library is not suitable if your dataset has much higher density.\n\n[updateitem]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html\n[deleteitem]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html\n[putitem]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html\n[createtable]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html\n[hashrange]: http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey\n[readconsistency]: http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html\n[geojson]: https://geojson.org/geojson-spec.html\n[example]: https://github.com/rh389/dynamodb-geo.js/tree/master/example\n[dynamodb-geo]: https://github.com/awslabs/dynamodb-geo\n[dynamodb]: http://aws.amazon.com/dynamodb\n[dynamodb-query]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html\n[hashkeylength-tests]: https://github.com/rh389/dynamodb-geo.js/blob/master/test/integration/hashKeyLength.ts\n[choosing-hashkeylength]: #choosing-a-hashkeylength-optimising-for-performance-and-cost\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Sigm0oid/dynamodb-geo.py", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dynamodbgeo", "package_url": "https://pypi.org/project/dynamodbgeo/", "platform": "", "project_url": "https://pypi.org/project/dynamodbgeo/", "project_urls": {"Homepage": "https://github.com/Sigm0oid/dynamodb-geo.py"}, "release_url": "https://pypi.org/project/dynamodbgeo/0.0.1/", "requires_dist": ["boto3 (>=1.11.8)", "s2sphere (>=0.2.5)"], "requires_python": "", "summary": "A python port of awslabs/dynamodb-geo, for easier geospatial data manipulation and querying in DynamoDB", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Geo Library for Amazon DynamoDB</h1>\n<p>This project is an unofficial port of <a href=\"https://github.com/awslabs/dynamodb-geo\" rel=\"nofollow\">awslabs/dynamodb-geo</a>, bringing creation and querying of geospatial data to Python developers using <a href=\"http://aws.amazon.com/dynamodb\" rel=\"nofollow\">Amazon DynamoDB</a>.</p>\n<h2>Features</h2>\n<ul>\n<li><strong>Box Queries:</strong> Return all of the items that fall within a pair of geo points that define a rectangle as projected onto a sphere.</li>\n<li><strong>Radius Queries:</strong> Return all of the items that are within a given radius of a geo point.</li>\n<li><strong>Basic CRUD Operations:</strong>  Create, retrieve, update, and delete geospatial data items.</li>\n<li><strong>Customizable:</strong> Access to raw request and result objects from the AWS SDK for python.</li>\n</ul>\n<h2>Installation</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">s2sphere</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">boto3</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">pypi</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">simple</span><span class=\"o\">/</span> <span class=\"n\">dynamodbgeo</span>\n</pre>\n<h2>Getting started</h2>\n<p>First you'll need to import the AWS sdk and set up your DynamoDB connection:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dynamodbgeo</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"n\">dynamodb</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s1\">'dynamodb'</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'us-east-2'</span><span class=\"p\">)</span>\n</pre>\n<p>Next you must create an instance of <code>GeoDataManagerConfiguration</code> for each geospatial table you wish to interact with. This is a container for various options (see API below), but you must always provide a <code>DynamoDB</code> instance and a table name.</p>\n<pre>    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoDataManagerConfiguration</span><span class=\"p\">(</span><span class=\"n\">dynamodb</span><span class=\"p\">,</span> <span class=\"s1\">'geo_test_8'</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, you should instantiate a manager to query and write to the table using this config object.</p>\n<pre><span class=\"n\">geoDataManager</span> <span class=\"o\">=</span> <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoDataManager</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n<h2>Choosing a <code>hashKeyLength</code> (optimising for performance and cost)</h2>\n<p>The <code>hashKeyLength</code> is the number of most significant digits (in base 10) of the 64-bit geo hash to use as the hash key. Larger numbers will allow small geographical areas to be spread across DynamoDB partitions, but at the cost of performance as more <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html\" rel=\"nofollow\">queries</a> need to be executed for box/radius searches that span hash keys. See <a href=\"https://github.com/rh389/dynamodb-geo.js/blob/master/test/integration/hashKeyLength.ts\" rel=\"nofollow\">these tests</a>(TODO) for an idea of how query performance scales with <code>hashKeyLength</code> for different search radii.</p>\n<p>If your data is sparse, a large number will mean more RCUs since more empty queries will be executed and each has a minimum cost. However if your data is dense and <code>hashKeyLength</code> too short, more RCUs will be needed to read a hash key and a higher proportion will be discarded by server-side filtering.</p>\n<p>From the <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html\" rel=\"nofollow\">AWS <code>Query</code> documentation</a></p>\n<blockquote>\n<p>DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. ... <strong>The number will also be the same whether or not you use a <code>FilterExpression</code></strong></p>\n</blockquote>\n<p>Optimally, you should pick the largest <code>hashKeyLength</code> your usage scenario allows. The wider your typical radius/box queries, the smaller it will need to be.</p>\n<p>Note that the <a href=\"https://github.com/awslabs/dynamodb-geo\" rel=\"nofollow\">Java version</a> uses a <code>hashKeyLength</code> of <code>6</code> by default. The same value will need to be used if you access the same data with both clients.</p>\n<p>This is an important early choice, since changing your <code>hashKeyLength</code> will mean recreating your data.</p>\n<p>From the <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html\" rel=\"nofollow\">AWS <code>Query</code> documentation</a></p>\n<blockquote>\n<p>DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. ... <strong>The number will also be the same whether or not you use a <code>FilterExpression</code></strong></p>\n</blockquote>\n<p>Optimally, you should pick the largest <code>hashKeyLength</code> your usage scenario allows. The wider your typical radius/box queries, the smaller it will need to be.</p>\n<p>Note that the <a href=\"https://github.com/awslabs/dynamodb-geo\" rel=\"nofollow\">Java version</a> uses a <code>hashKeyLength</code> of <code>6</code> by default. The same value will need to be used if you access the same data with both clients.</p>\n<p>This is an important early choice, since changing your <code>hashKeyLength</code> will mean recreating your data.</p>\n<h2>Creating a table</h2>\n<p><code>GeoTableUtil</code> has a static method <code>getCreateTableRequest</code> for helping you prepare a <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html\" rel=\"nofollow\">DynamoDB CreateTable request</a> request, given a <code>GeoDataManagerConfiguration</code>.</p>\n<p>You can modify this request as desired before executing it using AWS's DynamoDB SDK.</p>\n<p>Example:</p>\n<pre><span class=\"c1\"># Pick a hashKeyLength appropriate to your usage</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">hashKeyLength</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"c1\"># Use GeoTableUtil to help construct a CreateTableInput.</span>\n<span class=\"n\">table_util</span> <span class=\"o\">=</span> <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoTableUtil</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"n\">create_table_input</span><span class=\"o\">=</span><span class=\"n\">table_util</span><span class=\"o\">.</span><span class=\"n\">getCreateTableRequest</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#tweaking the base table parameters as a dict</span>\n<span class=\"n\">create_table_input</span><span class=\"p\">[</span><span class=\"s2\">\"ProvisionedThroughput\"</span><span class=\"p\">][</span><span class=\"s1\">'ReadCapacityUnits'</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"mi\">5</span>\n\n<span class=\"c1\"># Use GeoTableUtil to create the table</span>\n<span class=\"n\">table_util</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">create_table_input</span><span class=\"p\">)</span>\n</pre>\n<h2>Adding data</h2>\n<pre><span class=\"c1\">#preparing non key attributes for the item to add</span>\n\n<span class=\"n\">PutItemInput</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'Item'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'Country'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'S'</span><span class=\"p\">:</span> <span class=\"s2\">\"Tunisia\"</span><span class=\"p\">},</span>\n            <span class=\"s1\">'Capital'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'S'</span><span class=\"p\">:</span> <span class=\"s2\">\"Tunis\"</span><span class=\"p\">},</span>\n            <span class=\"s1\">'year'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'S'</span><span class=\"p\">:</span> <span class=\"s1\">'2020'</span><span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'ConditionExpression'</span><span class=\"p\">:</span> <span class=\"s2\">\"attribute_not_exists(hashKey)\"</span> <span class=\"c1\"># ... Anything else to pass through to `putItem`, eg ConditionExpression</span>\n\n<span class=\"p\">}</span>\n<span class=\"n\">geoDataManager</span><span class=\"o\">.</span><span class=\"n\">put_Point</span><span class=\"p\">(</span><span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">PutPointInput</span><span class=\"p\">(</span>\n        <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoPoint</span><span class=\"p\">(</span><span class=\"mf\">36.879163</span><span class=\"p\">,</span> <span class=\"mf\">10.243120</span><span class=\"p\">),</span> <span class=\"c1\"># latitude then latitude longitude</span>\n         <span class=\"nb\">str</span><span class=\"p\">(</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()),</span> <span class=\"c1\"># Use this to ensure uniqueness of the hash/range pairs.</span>\n         <span class=\"n\">PutItemInput</span> <span class=\"c1\"># pass the dict here</span>\n        <span class=\"p\">))</span>\n</pre>\n<p>See also <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html\" rel=\"nofollow\">DynamoDB PutItem request</a></p>\n<h2>Updating a specific point</h2>\n<p>Note that you cannot update the hash key, range key, geohash or geoJson. If you want to change these, you'll need to recreate the record.</p>\n<p>You must specify a <code>RangeKeyValue</code>, a <code>GeoPoint</code>, and an <code>UpdateItemInput dict</code> matching the <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html\" rel=\"nofollow\">DynamoDB UpdateItem</a> request (<code>TableName</code> and <code>Key</code> are filled in for you).</p>\n<h4>Note : You must NOT update geoJson and geohash attributes.</h4>\n<pre><span class=\"c1\">#define a dict of the item to update</span>\n<span class=\"n\">UpdateItemDict</span><span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"c1\"># Dont provide TableName and Key, they are filled in for you</span>\n        <span class=\"s2\">\"UpdateExpression\"</span><span class=\"p\">:</span> <span class=\"s2\">\"set Capital = :val1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"ConditionExpression\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Capital = :val2\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"ExpressionAttributeValues\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\":val1\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"S\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Tunis\"</span><span class=\"p\">},</span>\n            <span class=\"s2\">\":val2\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"S\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ariana\"</span><span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"ReturnValues\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ALL_NEW\"</span>\n<span class=\"p\">}</span>\n<span class=\"n\">geoDataManager</span><span class=\"o\">.</span><span class=\"n\">update_Point</span><span class=\"p\">(</span><span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">UpdateItemInput</span><span class=\"p\">(</span>\n        <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoPoint</span><span class=\"p\">(</span><span class=\"mf\">36.879163</span><span class=\"p\">,</span><span class=\"mf\">10.24312</span><span class=\"p\">),</span> <span class=\"c1\"># latitude then latitude longitude</span>\n         <span class=\"s2\">\"1e955491-d8ba-483d-b7ab-98370a8acf82\"</span><span class=\"p\">,</span> <span class=\"c1\"># Use this to ensure uniqueness of the hash/range pairs.</span>\n         <span class=\"n\">UpdateItemDict</span> <span class=\"c1\"># pass the dict that contain the remaining parameters here</span>\n         <span class=\"p\">))</span>\n</pre>\n<h2>Deleting a specific point</h2>\n<p>You must specify a <code>RangeKeyValue</code> and a <code>GeoPoint</code>. Optionally, you can pass <code>DeleteItemInput</code> matching <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html\" rel=\"nofollow\">DynamoDB DeleteItem</a> request (<code>TableName</code> and <code>Key</code> are filled in for you).</p>\n<pre><span class=\"c1\"># Preparing dict of the item to delete</span>\n<span class=\"n\">DeleteItemDict</span><span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"ConditionExpression\"</span><span class=\"p\">:</span> <span class=\"s2\">\"attribute_exists(Country)\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"ReturnValues\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ALL_OLD\"</span> \n            <span class=\"c1\"># Don't put keys here, they will be generated for you implecitly</span>\n        <span class=\"p\">}</span>\n<span class=\"n\">geoDataManager</span><span class=\"o\">.</span><span class=\"n\">delete_Point</span><span class=\"p\">(</span>\n    <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">DeleteItemInput</span><span class=\"p\">(</span>\n    <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoPoint</span><span class=\"p\">(</span><span class=\"mf\">36.879163</span><span class=\"p\">,</span><span class=\"mf\">10.24312</span><span class=\"p\">),</span> <span class=\"c1\"># latitude then latitude longitude</span>\n        <span class=\"s2\">\"0df9742f-619b-49e5-b79e-9fb94279d30c\"</span><span class=\"p\">,</span> <span class=\"c1\"># Use this to ensure uniqueness of the hash/range pairs.</span>\n        <span class=\"n\">DeleteItemDict</span> <span class=\"c1\"># pass the dict that contain the remaining parameters here</span>\n        <span class=\"p\">))</span>\n</pre>\n<h2>Rectangular queries</h2>\n<p>Query by rectangle by specifying a <code>MinPoint</code> and <code>MaxPoint</code>.</p>\n<pre><span class=\"c1\"># Querying a rectangle</span>\n<span class=\"n\">query_rectangle_result</span><span class=\"o\">=</span><span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">QueryRectangleRequest</span><span class=\"p\">(</span>\n            <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoPoint</span><span class=\"p\">(</span><span class=\"mf\">36.878184</span><span class=\"p\">,</span> <span class=\"mf\">10.242358</span><span class=\"p\">),</span> <span class=\"c1\"># min point</span>\n            <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoPoint</span><span class=\"p\">(</span><span class=\"mf\">36.879317</span><span class=\"p\">,</span> <span class=\"mf\">10.243648</span><span class=\"p\">))))</span> <span class=\"c1\"># max point</span>\n</pre>\n<h2>Radius queries</h2>\n<p>Query by radius by specifying a <code>CenterPoint</code> and <code>RadiusInMeter</code>.</p>\n<pre><span class=\"c1\"># Querying 95 meter from the center point (36.879131, 10.243057)</span>\n<span class=\"n\">query_reduis_result</span><span class=\"o\">=</span><span class=\"n\">geoDataManager</span><span class=\"o\">.</span><span class=\"n\">queryRadius</span><span class=\"p\">(</span>\n    <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">QueryRadiusRequest</span><span class=\"p\">(</span>\n        <span class=\"n\">dynamodbgeo</span><span class=\"o\">.</span><span class=\"n\">GeoPoint</span><span class=\"p\">(</span><span class=\"mf\">36.879131</span><span class=\"p\">,</span> <span class=\"mf\">10.243057</span><span class=\"p\">),</span> <span class=\"c1\"># center point</span>\n        <span class=\"mi\">95</span><span class=\"p\">))</span> <span class=\"c1\"># diameter</span>\n</pre>\n<h2>Batch operations</h2>\n<p>TODO:</p>\n<h2>Configuration reference</h2>\n<p>These are public properties of a <code>GeoDataManagerConfiguration</code> instance. After creating the config object you may modify these properties.</p>\n<h4>geohashAttributeName: string = \"geohash\"</h4>\n<p>The name of the attribute storing the full 64-bit geohash. Its value is auto-generated based on item coordinates.</p>\n<h4>hashKeyAttributeName: string = \"hashKey\"</h4>\n<p>The name of the attribute storing the first <code>hashKeyLength</code> digits (default 2) of the geo hash, used as the hash (aka partition) part of a <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey\" rel=\"nofollow\">hash/range primary key pair</a>. Its value is auto-generated based on item coordinates.</p>\n<h4>hashKeyLength: number = 2</h4>\n<p>See <a href=\"#choosing-a-hashkeylength-optimising-for-performance-and-cost\" rel=\"nofollow\">above</a>.</p>\n<h4>rangeKeyAttributeName: string = \"rangeKey\"</h4>\n<p>The name of the attribute storing the range key, used as the range (aka sort) part of a <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey\" rel=\"nofollow\">hash/range key primary key pair</a>. Its value must be specified by you (hash-range pairs must be unique).</p>\n<h4>geoJsonAttributeName: string = \"geoJson\"</h4>\n<p>The name of the attribute which will contain the longitude/latitude pair in a GeoJSON-style point (see also <code>longitudeFirst</code>).</p>\n<h4>geohashIndexName: string = \"geohash-index\"</h4>\n<p>The name of the index to be created against the geohash. Only used for creating new tables.</p>\n<h2>Example</h2>\n<p>TODO</p>\n<h2>Limitations</h2>\n<h3>No Delete and Update Item supported</h3>\n<p>Currently, the library does not support update and delete item for now. The items for now can be deleted using AWS SDK <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html\" rel=\"nofollow\">UpdateItem</a> and <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html\" rel=\"nofollow\">DeleteItem</a></p>\n<h3>No composite key support</h3>\n<p>Currently, the library does not support composite keys. You may want to add tags such as restaurant, bar, and coffee shop, and search locations of a specific category; however, it is currently not possible. You need to create a table for each tag and store the items separately.</p>\n<h3>Queries retrieve all paginated data</h3>\n<p>Although low level <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html\" rel=\"nofollow\">DynamoDB Query</a> requests return paginated results, this library automatically pages through the entire result set. When querying a large area with many points, a lot of Read Capacity Units may be consumed.</p>\n<h3>More Read Capacity Units</h3>\n<p>The library retrieves candidate Geo points from the cells that intersect the requested bounds. The library then post-processes the candidate data, filtering out the specific points that are outside the requested bounds. Therefore, the consumed Read Capacity Units will be higher than the final results dataset. Typically 8 queries are exectued per radius or box search.</p>\n<h3>High memory consumption</h3>\n<p>Because all paginated <code>Query</code> results are loaded into memory and processed, it may consume substantial amounts of memory for large datasets.</p>\n<h3>Dataset density limitation</h3>\n<p>The Geohash used in this library is roughly centimeter precision. Therefore, the library is not suitable if your dataset has much higher density.</p>\n\n          </div>"}, "last_serial": 7010665, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "07eabeb1d836bd651888ee2a1bab2571", "sha256": "53fef5210d1b730074e17634e1a86ae26b8d1834204bc35a5bf449dcc1137ee7"}, "downloads": -1, "filename": "dynamodbgeo-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "07eabeb1d836bd651888ee2a1bab2571", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16825, "upload_time": "2020-04-13T15:33:44", "upload_time_iso_8601": "2020-04-13T15:33:44.697587Z", "url": "https://files.pythonhosted.org/packages/bc/40/a118cc185dad8a985ae4667da2773fcd10465bb3ccce0908dda9fb8f3cfe/dynamodbgeo-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abb0328adbd5de8619c3b60ed9a97075", "sha256": "e745fed639c56210ce0bc2d254ece90588b37219fa47d002214b0e37cacc3dc1"}, "downloads": -1, "filename": "dynamodbgeo-0.0.1.tar.gz", "has_sig": false, "md5_digest": "abb0328adbd5de8619c3b60ed9a97075", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15211, "upload_time": "2020-04-13T15:33:47", "upload_time_iso_8601": "2020-04-13T15:33:47.337288Z", "url": "https://files.pythonhosted.org/packages/cf/d2/99730f29db35dfd46a871d73cf28c84077b546fb00ab5e3f0adbf9e749b8/dynamodbgeo-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07eabeb1d836bd651888ee2a1bab2571", "sha256": "53fef5210d1b730074e17634e1a86ae26b8d1834204bc35a5bf449dcc1137ee7"}, "downloads": -1, "filename": "dynamodbgeo-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "07eabeb1d836bd651888ee2a1bab2571", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16825, "upload_time": "2020-04-13T15:33:44", "upload_time_iso_8601": "2020-04-13T15:33:44.697587Z", "url": "https://files.pythonhosted.org/packages/bc/40/a118cc185dad8a985ae4667da2773fcd10465bb3ccce0908dda9fb8f3cfe/dynamodbgeo-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abb0328adbd5de8619c3b60ed9a97075", "sha256": "e745fed639c56210ce0bc2d254ece90588b37219fa47d002214b0e37cacc3dc1"}, "downloads": -1, "filename": "dynamodbgeo-0.0.1.tar.gz", "has_sig": false, "md5_digest": "abb0328adbd5de8619c3b60ed9a97075", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15211, "upload_time": "2020-04-13T15:33:47", "upload_time_iso_8601": "2020-04-13T15:33:47.337288Z", "url": "https://files.pythonhosted.org/packages/cf/d2/99730f29db35dfd46a871d73cf28c84077b546fb00ab5e3f0adbf9e749b8/dynamodbgeo-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:40 2020"}