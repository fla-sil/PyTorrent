{"info": {"author": "Jonathan D B Van Schenck", "author_email": "vanschej@oregonstate.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# python-remote-object\nPython TCP server and client which allows clients to make calls and get returns\nfrom a python object instantiated on the server.\n\nThis package was originally developed to be used along side `pyUSB`, `serial`,\n`pyVISA`, etc, where an external hardware component could be connected to a \ncomputer for which a python-based API for the component already existed. This\npackage could then take an instance of that python driver, and allow other\ncomputers (potentially off-site) to make API calls and so control the external\nhardware remotely.\n\nFor example, one could connect a raspberry pi up to their digital oscilloscope\nvia usb, and now your oscilloscope is \"wifi-enabled\"\n\n# Installation\n## Pip\nTo get the current stable version, install using pip:\n```bash\n $ pip3 install remote_object\n```\n## Development Version\nTo get the development version, clone this repo, then inside the folder create a `python3` virtual environment, activate it, and install using setuptools:\n```bash\n $ python3 -m venv venv\n $ source venv/bin/activate\n (venv) $ python3 setup.py install\n ```\n\n# Basic Use\n\nIf you have an instance of a python object, `pyobj`, using the base server\nclass `remote_object.server.Server` will allow you to create a TCP server\nwhich hosts `pyobj`.\n\nOn the client end, you must create an instance of the `remote_object.client.Client`\nobject pointed at the server's address and port. By default, calling a method\non the `Client` instance will pass that call across the TCP connection to the\nserver, where the `Server` instance will make that method call on `pyobj`. Any\nerrors or return values will then be passed back to the `Client` instance and \nraised or returned respectively.\n\nFor example, the server might look like:\n```python\nfrom remote_object.server import Server\n\nHOST, PORT = 'your-ip-address', 9999\n\nclass Test:\n    def __init__(self):\n        self.a = \"attribute a\"\n\n    def __repr__(self):\n        return \"<Test Class>\"\n\n    def b(self,message):\n        return \"method b: \" + message\n\nwith Server((HOST, PORT),Test()) as server:\n    server.serve_forever()\n\n```\nThe client might then look like:\n```python\nfrom remote_object.server import Client\n\nwith Client(HOST, PORT) as client:\n    print(client) # prints: <Remote Wrapper <Test Class>>    \n    print(client.a()) # prints \"attribute a\"\n    print(client.b(\"Hello!\")) # prints \"method b: Hello!\"\n    print(client.c()) # raises CallMethodError from AttributeError\n```\n\nNote here that attributes are treated like methods without arguments, and \nattempting to call method which does not exist will raise a `remote_object.errors.CallMethodError`,\nwhich is raised from the server-side error (`AttributeError`).\n\nSee `examples` for additional info.\n\n# Development\nFor development, clone this directory, then have fun! Pro-tip: setup a python\nvirtual environment in the main directory:\n```bash\n $ python3 -m venv venv\n $ source venv/bin/activate\n```\n## Installing\n```bash\n (venv) $ python3 setup.py install\n```\n\n## Creating source packages\n```bash\n (venv) $ python3 setup.py sdist bdist_wheel \n```\n\n## Uploading to PyPI\n```bash\n (venv) $ python3 -m twine upload dist/*\n```\n\nSee: [https://packaging.python.org/tutorials/packaging-projects/]\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jonathanvanschenck/python-remote-object", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "remote-object", "package_url": "https://pypi.org/project/remote-object/", "platform": "", "project_url": "https://pypi.org/project/remote-object/", "project_urls": {"Homepage": "https://github.com/jonathanvanschenck/python-remote-object"}, "release_url": "https://pypi.org/project/remote-object/0.2.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A TCP-based server/client library for making method calls from a client to a python object on the server", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-remote-object</h1>\n<p>Python TCP server and client which allows clients to make calls and get returns\nfrom a python object instantiated on the server.</p>\n<p>This package was originally developed to be used along side <code>pyUSB</code>, <code>serial</code>,\n<code>pyVISA</code>, etc, where an external hardware component could be connected to a\ncomputer for which a python-based API for the component already existed. This\npackage could then take an instance of that python driver, and allow other\ncomputers (potentially off-site) to make API calls and so control the external\nhardware remotely.</p>\n<p>For example, one could connect a raspberry pi up to their digital oscilloscope\nvia usb, and now your oscilloscope is \"wifi-enabled\"</p>\n<h1>Installation</h1>\n<h2>Pip</h2>\n<p>To get the current stable version, install using pip:</p>\n<pre> $ pip3 install remote_object\n</pre>\n<h2>Development Version</h2>\n<p>To get the development version, clone this repo, then inside the folder create a <code>python3</code> virtual environment, activate it, and install using setuptools:</p>\n<pre> $ python3 -m venv venv\n $ <span class=\"nb\">source</span> venv/bin/activate\n <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python3 setup.py install\n</pre>\n<h1>Basic Use</h1>\n<p>If you have an instance of a python object, <code>pyobj</code>, using the base server\nclass <code>remote_object.server.Server</code> will allow you to create a TCP server\nwhich hosts <code>pyobj</code>.</p>\n<p>On the client end, you must create an instance of the <code>remote_object.client.Client</code>\nobject pointed at the server's address and port. By default, calling a method\non the <code>Client</code> instance will pass that call across the TCP connection to the\nserver, where the <code>Server</code> instance will make that method call on <code>pyobj</code>. Any\nerrors or return values will then be passed back to the <code>Client</code> instance and\nraised or returned respectively.</p>\n<p>For example, the server might look like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">remote_object.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span> <span class=\"o\">=</span> <span class=\"s1\">'your-ip-address'</span><span class=\"p\">,</span> <span class=\"mi\">9999</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Test</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s2\">\"attribute a\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"&lt;Test Class&gt;\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">b</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"method b: \"</span> <span class=\"o\">+</span> <span class=\"n\">message</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Server</span><span class=\"p\">((</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">),</span><span class=\"n\">Test</span><span class=\"p\">())</span> <span class=\"k\">as</span> <span class=\"n\">server</span><span class=\"p\">:</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</pre>\n<p>The client might then look like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">remote_object.server</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span> <span class=\"c1\"># prints: &lt;Remote Wrapper &lt;Test Class&gt;&gt;    </span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">())</span> <span class=\"c1\"># prints \"attribute a\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"s2\">\"Hello!\"</span><span class=\"p\">))</span> <span class=\"c1\"># prints \"method b: Hello!\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">())</span> <span class=\"c1\"># raises CallMethodError from AttributeError</span>\n</pre>\n<p>Note here that attributes are treated like methods without arguments, and\nattempting to call method which does not exist will raise a <code>remote_object.errors.CallMethodError</code>,\nwhich is raised from the server-side error (<code>AttributeError</code>).</p>\n<p>See <code>examples</code> for additional info.</p>\n<h1>Development</h1>\n<p>For development, clone this directory, then have fun! Pro-tip: setup a python\nvirtual environment in the main directory:</p>\n<pre> $ python3 -m venv venv\n $ <span class=\"nb\">source</span> venv/bin/activate\n</pre>\n<h2>Installing</h2>\n<pre> <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python3 setup.py install\n</pre>\n<h2>Creating source packages</h2>\n<pre> <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python3 setup.py sdist bdist_wheel \n</pre>\n<h2>Uploading to PyPI</h2>\n<pre> <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python3 -m twine upload dist/*\n</pre>\n<p>See: [https://packaging.python.org/tutorials/packaging-projects/]</p>\n\n          </div>"}, "last_serial": 6847707, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "de6626dfb1b40ac7d621efe3dabe9cca", "sha256": "4677bceac36ea893e3cfb25bc9a0fb1dd3c1206e6cf4758e0d7abaa42ee66c65"}, "downloads": -1, "filename": "remote_object-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "de6626dfb1b40ac7d621efe3dabe9cca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8457, "upload_time": "2020-03-20T05:29:08", "upload_time_iso_8601": "2020-03-20T05:29:08.052196Z", "url": "https://files.pythonhosted.org/packages/1b/26/12cf605b7fac7226d8281a0db554d537938f507ef5e7ce01cbbdef3a960d/remote_object-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f03ec093d34ff9475c2dea0b0be74925", "sha256": "67563b0d327f342111e1d94b42c14d3624ed59c84b7dc38e68cdd426a4b5a3e6"}, "downloads": -1, "filename": "remote-object-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f03ec093d34ff9475c2dea0b0be74925", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6389, "upload_time": "2020-03-20T05:29:10", "upload_time_iso_8601": "2020-03-20T05:29:10.299206Z", "url": "https://files.pythonhosted.org/packages/73/75/4a3d0b0c41ae07b17598b69db08d69f50676b6d3f98782943c8438134712/remote-object-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "de6626dfb1b40ac7d621efe3dabe9cca", "sha256": "4677bceac36ea893e3cfb25bc9a0fb1dd3c1206e6cf4758e0d7abaa42ee66c65"}, "downloads": -1, "filename": "remote_object-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "de6626dfb1b40ac7d621efe3dabe9cca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8457, "upload_time": "2020-03-20T05:29:08", "upload_time_iso_8601": "2020-03-20T05:29:08.052196Z", "url": "https://files.pythonhosted.org/packages/1b/26/12cf605b7fac7226d8281a0db554d537938f507ef5e7ce01cbbdef3a960d/remote_object-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f03ec093d34ff9475c2dea0b0be74925", "sha256": "67563b0d327f342111e1d94b42c14d3624ed59c84b7dc38e68cdd426a4b5a3e6"}, "downloads": -1, "filename": "remote-object-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f03ec093d34ff9475c2dea0b0be74925", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6389, "upload_time": "2020-03-20T05:29:10", "upload_time_iso_8601": "2020-03-20T05:29:10.299206Z", "url": "https://files.pythonhosted.org/packages/73/75/4a3d0b0c41ae07b17598b69db08d69f50676b6d3f98782943c8438134712/remote-object-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:51 2020"}