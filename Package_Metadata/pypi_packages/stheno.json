{"info": {"author": "Wessel Bruinsma", "author_email": "wessel.p.bruinsma@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# [Stheno](https://github.com/wesselb/stheno)\n\n[![Build](https://travis-ci.org/wesselb/stheno.svg?branch=master)](https://travis-ci.org/wesselb/stheno)\n[![Coverage Status](https://coveralls.io/repos/github/wesselb/stheno/badge.svg?branch=master&service=github)](https://coveralls.io/github/wesselb/stheno?branch=master)\n[![Latest Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://wesselb.github.io/stheno)\n\nStheno is an implementation of Gaussian process modelling in Python. See \nalso [Stheno.jl](https://github.com/willtebbutt/Stheno.jl).\n\n_Note:_ Stheno requires Python 3.5+ and TensorFlow 2 if TensorFlow is used.\n\n* [Nonlinear Regression in 20 Seconds](#nonlinear-regression-in-20-seconds)\n* [Installation](#installation)\n* [Manual](#manual)\n    - [Kernel and Mean Design](#kernel-and-mean-design)\n        * [Available Kernels](#available-kernels)\n        * [Available Means](#available-means)\n        * [Compositional Design](#compositional-design)\n        * [Displaying Kernels and Means](#displaying-kernels-and-mean)\n        * [Properties of Kernels](#properties-of-kernels)\n    - [Model Design](#model-design)\n        * [Compositional Design](#compositional-design)\n        * [Displaying GPs](#displaying-gps)\n        * [Properties of GPs](#properties-of-gps)\n        * [Naming GPs](#naming-gps)\n    - [Finite-Dimensional Distributions, Inference, and Sampling](#finite-dimensional-distributions-inference-and-sampling)\n    - [Inducing Points](#inducing-points)\n    - [AutoGrad, TensorFlow, or PyTorch?](#autograd-tensorflow-or-pytorch)\n    - [Undiscussed Features](#undiscussed-features)\n* [Examples](#examples)\n    - [Simple Regression](#simple-regression)\n    - [Decomposition of Prediction](#decomposition-of-prediction)\n    - [Learn a Function, Incorporating Prior Knowledge About Its Form](#learn-a-function-incorporating-prior-knowledge-about-its-form)\n    - [Multi-Output Regression](#multi-ouput-regression)\n    - [Approximate Integration](#approximate-integration)\n    - [Bayesian Linear Regression](#bayesian-linear-regression)\n    - [GPAR](#gpar)\n    - [A GP-RNN Model](#a-gp-rnn-model)\n    - [Approximate Multiplication Between GPs](#approximate-multiplication-between-gps)\n    - [Sparse Regression](#sparse-regression)\n    - [Smoothing with Nonparametric Basis Functions](#smoothing-with-nonparametric-basis-functions)\n\n## Nonlinear Regression in 20 Seconds\n\n```python\n>>> import numpy as np\n\n>>> from stheno import GP, EQ\n\n>>> x = np.linspace(0, 2, 10)    # Points to predict at\n\n>>> y = x ** 2                   # Observations\n\n>>> (GP(EQ()) | (x, y))(3).mean  # Go GP!\narray([[8.48258669]])\n```\n\nMoar?! Then read on!\n\n## Installation\n\nBefore installing the package, please ensure that `gcc` and `gfortran` are \navailable.\nOn OS X, these are both installed with `brew install gcc`;\nusers of Anaconda may want to instead consider `conda install gcc`.\nOn Linux, `gcc` is most likely already available, and `gfortran` can be\ninstalled with `apt-get install gfortran`.\nThen simply\n\n```\npip install stheno\n```\n\n## Manual\n\nNote: [here](https://wesselb.github.io/stheno) is a nicely rendered and more\nreadable version of the docs.\n\n### Kernel and Mean Design\n\nInputs to kernels, means, and GPs, henceforth referred to simply as _inputs_, \nmust be of one of the following three forms:\n\n* If the input `x` is a _rank 0 tensor_, i.e. a scalar, then `x` refers to a \nsingle input location. For example, `0` simply refers to the sole input \nlocation `0`.\n\n* If the input `x` is a _rank 1 tensor_, then every element of `x` is \ninterpreted as a separate input location. For example, `np.linspace(0, 1, 10)`\ngenerates 10 different input locations ranging from `0` to `1`.\n\n* If the input `x` is a _rank 2 tensor_, then every _row_ of `x` is \ninterpreted as a separate input location. In this case inputs are \nmulti-dimensional, and the columns correspond to the various input dimensions.\n\nIf `k` is a kernel, say `k = EQ()`, then `k(x, y)` constructs the _kernel \nmatrix_ for all pairs of points between `x` and `y`. `k(x)` is shorthand for\n`k(x, x)`. Furthermore, `k.elwise(x, y)` constructs the _kernel vector_ pairing\nthe points in `x` and `y` element wise, which will be a _rank 2 column vector_.\n\nExample:\n\n```python\n>>> EQ()(np.linspace(0, 1, 3))\narray([[1.        , 0.8824969 , 0.60653066],\n       [0.8824969 , 1.        , 0.8824969 ],\n       [0.60653066, 0.8824969 , 1.        ]])\n \n>>> EQ().elwise(np.linspace(0, 1, 3), 0)\narray([[1.        ],\n       [0.8824969 ],\n       [0.60653066]])\n```\n\nFinally, mean functions output a _rank 2 column vector_.\n\n#### Available Kernels\n\nConstants function as constant kernels. Besides that, the following kernels are \navailable:\n\n* `EQ()`, the exponentiated quadratic:\n\n    $$ k(x, y) = \\exp\\left( -\\frac{1}{2}\\|x - y\\|^2 \\right); $$\n\n* `RQ(alpha)`, the rational quadratic:\n\n    $$ k(x, y) = \\left( 1 + \\frac{\\|x - y\\|^2}{2 \\alpha} \\right)^{-\\alpha}; $$\n\n* `Exp()` or `Matern12()`, the exponential kernel:\n\n    $$ k(x, y) = \\exp\\left( -\\|x - y\\| \\right); $$\n\n* `Matern32()`, the Matern\u20133/2 kernel:\n\n    $$ k(x, y) = \\left(\n        1 + \\sqrt{3}\\|x - y\\|\n        \\right)\\exp\\left(-\\sqrt{3}\\|x - y\\|\\right); $$\n\n* `Matern52()`, the Matern\u20135/2 kernel:\n\n    $$ k(x, y) = \\left(\n        1 + \\sqrt{5}\\|x - y\\| + \\frac{5}{3} \\|x - y\\|^2\n       \\right)\\exp\\left(-\\sqrt{3}\\|x - y\\|\\right); $$\n\n* `Delta()`, the Kronecker delta kernel:\n\n    $$ k(x, y) = \\begin{cases}\n        1 & \\text{if } x = y, \\\\\n        0 & \\text{otherwise};\n       \\end{cases} $$\n       \n* `DecayingKernel(alpha, beta)`:\n\n    $$ k(x, y) = \\frac{\\|\\beta\\|^\\alpha}{\\|x + y + \\beta\\|^\\alpha}; $$\n\n* `TensorProductKernel(f)`:\n\n    $$ k(x, y) = f(x)f(y). $$\n\n    Adding or multiplying a `FunctionType` `f` to or with a kernel will \n    automatically translate `f` to `TensorProductKernel(f)`. For example,\n    `f * k` will translate to `TensorProductKernel(f) * k`, and `f + k` will \n    translate to `TensorProductKernel(f) + k`.\n\n\n#### Available Means\n\nConstants function as constant means. Besides that, the following means are \navailable:\n\n* `TensorProductMean(f)`:\n\n    $$ m(x) = f(x). $$\n\n    Adding or multiplying a `FunctionType` `f` to or with a mean will \n    automatically translate `f` to `TensorProductMean(f)`. For example,\n    `f * m` will translate to `TensorProductMean(f) * m`, and `f + m` will \n    translate to `TensorProductMean(f) + m`.\n\n#### Compositional Design\n\n* Add and subtract _kernels and means_.\n\n    Example:\n    \n    ```python\n    >>> EQ() + Exp()\n    EQ() + Exp()\n\n    >>> EQ() + EQ()\n    2 * EQ()\n\n    >>> EQ() + 1\n    EQ() + 1\n\n    >>> EQ() + 0\n    EQ()\n\n    >>> EQ() - Exp()\n    EQ() - Exp()\n\n    >>> EQ() - EQ()\n    0\n    ```\n\n* Multiply _kernels and means_.\n    \n    Example:\n\n    ```python\n    >>> EQ() * Exp()\n    EQ() * Exp()\n\n    >>> 2 * EQ()\n    2 * EQ()\n\n    >>> 0 * EQ()\n    0\n    ```\n\n* Shift _kernels and means_:\n\n    Definition:\n    \n    ```python\n    k.shift(c)(x, y) == k(x - c, y - c)\n\n    k.shift(c1, c2)(x, y) == k(x - c1, y - c2)\n    ```\n    \n    Example:\n    \n    ```python\n    >>> Linear().shift(1)\n    Linear() shift 1\n\n    >>> EQ().shift(1, 2)\n    EQ() shift (1, 2)\n    ```\n\n* Stretch _kernels and means_.\n\n    Definition:\n    \n    ```python\n    k.stretch(c)(x, y) == k(x / c, y / c)\n\n    k.stretch(c1, c2)(x, y) == k(x / c1, y / c2)\n    ```\n  \n    Example:    \n    \n    ```python\n    >>> EQ().stretch(2)\n    EQ() > 2\n\n    >>> EQ().stretch(2, 3)\n    EQ() > (2, 3)\n    ```\n    \n    The `>` operator is implemented to provide a shorthand for stretching:\n    \n    ```python\n    >>> EQ() > 2\n    EQ() > 2\n    ```\n\n* Select particular input dimensions of _kernels and means_.\n\n    Definition:\n\n    ```python\n    k.select([0])(x, y) == k(x[:, 0], y[:, 0])\n  \n    k.select([0, 1])(x, y) == k(x[:, [0, 1]], y[:, [0, 1]])\n\n    k.select([0], [1])(x, y) == k(x[:, 0], y[:, 1])\n\n    k.select(None, [1])(x, y) == k(x, y[:, 1])\n    ```\n\n    Example:\n\n    ```python\n    >>> EQ().select([0])\n    EQ() : [0]\n  \n    >>> EQ().select([0, 1])\n    EQ() : [0, 1]\n\n    >>> EQ().select([0], [1])\n    EQ() : ([0], [1])\n\n    >>> EQ().select(None, [1])\n    EQ() : (None, [1])\n    ```\n\n* Transform the inputs of _kernels and means_.\n\n    Definition:\n\n    ```python\n    k.transform(f)(x, y) == k(f(x), f(y))\n\n    k.transform(f1, f2)(x, y) == k(f1(x), f2(y))\n\n    k.transform(None, f)(x, y) == k(x, f(y))\n    ```\n        \n    Example:\n        \n    ```python\n    >>> EQ().transform(f)\n    EQ() transform f\n\n    >>> EQ().transform(f1, f2)\n    EQ() transform (f1, f2)\n\n    >>> EQ().transform(None, f)\n    EQ() transform (None, f)\n    ```\n\n* Numerically, but efficiently, take derivatives of _kernels and means_.\n    This currently only works in TensorFlow.\n\n    Definition:\n\n    ```python\n    k.diff(0)(x, y) == d/d(x[:, 0]) d/d(y[:, 0]) k(x, y)\n\n    k.diff(0, 1)(x, y) == d/d(x[:, 0]) d/d(y[:, 1]) k(x, y)\n\n    k.diff(None, 1)(x, y) == d/d(y[:, 1]) k(x, y)\n    ```\n        \n    Example:\n\n    ```python\n    >>> EQ().diff(0)\n    d(0) EQ()\n\n    >>> EQ().diff(0, 1)\n    d(0, 1) EQ()\n\n    >>> EQ().diff(None, 1)\n    d(None, 1) EQ()\n    ```\n\n* Make _kernels_ periodic, but _not means_.\n\n    Definition:\n\n    ```python\n    k.periodic(2 pi / w)(x, y) == k((sin(w * x), cos(w * x)), (sin(w * y), cos(w * y)))\n    ```\n\n    Example:\n     \n    ```python\n    >>> EQ().periodic(1)\n    EQ() per 1\n    ```\n\n* Reverse the arguments of _kernels_, but _not means_.\n\n    Definition:\n\n    ```python\n    reversed(k)(x, y) == k(y, x)\n    ```\n\n    Example:\n\n    ```python\n    >>> reversed(Linear())\n    Reversed(Linear())\n    ```\n    \n* Extract terms and factors from sums and products respectively of _kernels and \nmeans_.\n    \n    Example:\n    \n    ```python\n    >>> (EQ() + RQ(0.1) + Linear()).term(1)\n    RQ(0.1)\n\n    >>> (2 * EQ() * Linear).factor(0)\n    2\n    ```\n    \n    Kernels and means \"wrapping\" others can be \"unwrapped\" by indexing `k[0]`\n     or `m[0]`.\n     \n    Example:\n    \n    ```python\n    >>> reversed(Linear())\n    Reversed(Linear())\n  \n    >>> reversed(Linear())[0]\n    Linear()\n\n    >>> EQ().periodic(1)\n    EQ() per 1\n\n    >>> EQ().periodic(1)[0]\n    EQ()\n    ```\n\n#### Displaying Kernels and Means\n\nKernels and means have a `display` method.\nThe `display` method accepts a callable formatter that will be applied before any value is printed.\nThis comes in handy when pretty printing kernels, or when kernels contain TensorFlow objects.\n\nExample:\n\n```python\n>>> print((2.12345 * EQ()).display(lambda x: '{:.2f}'.format(x)))\n2.12 * EQ(), 0\n\n>>> tf.constant(1) * EQ()\nTensor(\"Const_1:0\", shape=(), dtype=int32) * EQ()\n\n>>> print((tf.constant(2) * EQ()).display(tf.Session().run))\n2 * EQ()\n```\n\n#### Properties of Kernels\n\nThe stationarity of a kernel `k` can always be determined by querying\n`k.stationary`. In many cases, the variance `k.var`, length scale\n`k.length_scale`, and period `k.period` can also be determined.\n\nExample of querying the stationarity:\n\n```python\n>>> EQ().stationary\nTrue\n\n>>> (EQ() + Linear()).stationary\nFalse\n```\n\nExample of querying the variance:\n\n```python\n>>> EQ().var\n1\n\n>>> (2 * EQ()).var\n2\n```\n\nExample of querying the length scale:\n\n```python\n>>> EQ().length_scale\n1\n\n>>> (EQ() + EQ().stretch(2)).length_scale\n1.5\n```\n\nExample of querying the period:\n\n```python\n>>> EQ().periodic(1).period\n1\n\n>>> EQ().periodic(1).stretch(2).period\n2\n```\n\n### Model Design\n\nThe basic building block of a model is a `GP(kernel, mean=0, graph=model)`, \nwhich necessarily takes in a kernel, and optionally a mean and a _graph_.\nGPs can be combined into new GPs, and the graph is the thing that keeps \ntrack of all of these objects.\nIf the graph is left unspecified, new GPs are appended to a provided default \ngraph `model`, which is exported by Stheno:\n\n```python\nfrom stheno import model\n```\n\nHere's an example model:\n\n```python\n>>> f1 = GP(EQ(), lambda x: x ** 2)\n\n>>> f1\nGP(EQ(), <lambda>)\n\n>>> f2 = GP(Linear())\n\n>>> f_sum = f1 + f2\n\n>>> f_sum\nGP(EQ() + Linear(), <lambda>)\n```\n\n\n#### Compositional Design\n\n* Add and subtract GPs and other objects.\n\n    Example:\n    \n    ```python\n    >>> GP(EQ()) + GP(Exp())\n    GP(EQ() + Exp(), 0)\n\n    >>> GP(EQ()) + GP(EQ())\n    GP(2 * EQ(), 0)\n  \n    >>> GP(EQ()) + 1\n    GP(EQ(), 1)\n  \n    >>> GP(EQ()) + 0\n    GP(EQ(), 0)\n  \n    >>> GP(EQ()) + (lambda x: x ** 2)\n    GP(EQ(), <lambda>)\n\n    >>> GP(EQ(), 2) - GP(EQ(), 1)\n    GP(2 * EQ(), 1)\n    ```\n    \n* Multiply GPs by other objects.\n\n    Example:\n    \n    ```python\n    >>> 2 * GP(EQ())\n    GP(2 * EQ(), 0)\n  \n    >>> 0 * GP(EQ())\n    GP(0, 0)\n\n    >>> (lambda x: x) * GP(EQ())\n    GP(<lambda> * EQ(), 0)\n    ```\n    \n* Shift GPs.\n\n    Example:\n    \n    ```python\n    >>> GP(EQ()).shift(1)\n    GP(EQ() shift 1, 0) \n    ```\n    \n* Stretch GPs.\n\n    Example:\n    \n    ```python\n    >>> GP(EQ()).stretch(2)\n    GP(EQ() > 2, 0)\n    ```\n    \n    The `>` operator is implemented to provide a shorthand for stretching:\n    \n    ```python\n    >>> GP(EQ()) > 2\n    GP(EQ() > 2, 0)\n    ```\n    \n* Select particular input dimensions.\n\n    Example:\n    \n    ```python\n    >>> GP(EQ()).select(1, 3)\n    GP(EQ() : [1, 3], 0)\n    ```\n    \n    Indexing is implemented to provide a a shorthand for selecting input \n    dimensions:\n    \n    ```python\n    >>> GP(EQ())[1, 3]\n    GP(EQ() : [1, 3], 0) \n    ```\n    \n* Transform the input.\n\n    Example:\n    \n    ```python\n    >>> GP(EQ()).transform(f)\n    GP(EQ() transform f, 0)\n    ```\n    \n* Numerically take the derivative of a GP.\n    The argument specifies which dimension to take the derivative with respect\n    to.\n    \n    Example:\n    \n    ```python\n    >>> GP(EQ()).diff(1)\n    GP(d(1) EQ(), 0)\n    ```\n    \n* Construct a finite difference estimate of the derivative of a GP.\n    See `stheno.graph.Graph.diff_approx` for a description of the arguments.\n    \n    Example:\n    \n    ```python\n    >>> GP(EQ()).diff_approx(deriv=1, order=2)\n    GP(50000000.0 * (0.5 * EQ() + 0.5 * ((-0.5 * (EQ() shift (0.0001414213562373095, 0))) shift (0, -0.0001414213562373095)) + 0.5 * ((-0.5 * (EQ() shift (0, 0.0001414213562373095))) shift (-0.0001414213562373095, 0))), 0)\n    ```\n    \n* Construct the Cartesian product of a collection of GPs.\n\n    Example:\n    \n    ```python\n    >>> model = Graph()\n\n    >>> f1, f2 = GP(EQ(), graph=model), GP(EQ(), graph=model)\n\n    >>> model.cross(f1, f2)\n    GP(MultiOutputKernel(EQ(), EQ()), MultiOutputMean(0, 0))\n    ```\n\n#### Displaying GPs\n\nLike kernels and means, GPs have a `display` method that accepts a formatter.\n\nExample:\n\n```python\n>>> print(GP(2.12345 * EQ()).display(lambda x: '{:.2f}'.format(x)))\nGP(2.12 * EQ(), 0)\n```\n\n#### Properties of GPs\n\nProperties of kernels can be queried on GPs directly.\n\nExample:\n\n```python\n>>> GP(EQ()).stationary\nTrue\n\n>>> GP(RQ(1e-1)).length_scale\n1\n```\n\n### Naming GPs\n\nIt is possible to give a name to GPs.\nNames must be strings.\nA graph then behaves like a two-way dictionary between GPs and their names.\n\nExample:\n\n```python\n>>> p = GP(EQ(), name='prior')\n\n>>> p.name\n'prior'\n\n>>> p.name = 'alternative_prior'\n\n>>> model['alternative_prior']\nGP(EQ(), 0)\n\n>>> model[p]\n'alternative_prior'\n```\n\n### Finite-Dimensional Distributions, Inference, and Sampling\n\n\nSimply call a GP to construct its finite-dimensional distribution:\n\n```python\n>>> type(f(x))\nstheno.random.Normal\n\n>>> f(x).mean\narray([[0.],\n       [0.],\n       [0.]])\n\n>>> f(x).var\narray([[1.        , 0.8824969 , 0.60653066],\n       [0.8824969 , 1.        , 0.8824969 ],\n       [0.60653066, 0.8824969 , 1.        ]])\n       \n>>> f(x).sample(1)\narray([[-0.47676132],\n       [-0.51696144],\n       [-0.77643117]])\n       \n>>> y1 = f(x).sample(1)\n\n>>> f(x).logpdf(y1)\n-1.348196150807441\n\n>>> y2 = f(x).sample(2)\n\n>>> f(x).logpdf(y2)\n array([-1.00581476, -1.67625465])\n```\n\nIf you wish to compute the evidence of multiple observations, \nthen `Graph.logpdf` can be used.\n\nDefinition:\n\n```python\nGraph.logpdf(f(x), y)\n\nGraph.logpdf((f1(x1), y1), (f2(x2), y2), ...)\n```\n\nFurthermore, use `f(x).marginals()` to efficiently compute the means and \nthe marginal lower and upper 95% central credible region bounds:\n\n```python\n>>> f(x).marginals()\n(array([0., 0., 0.]), array([-2., -2., -2.]), array([2., 2., 2.]))\n```\n\nTo condition on observations, use `Graph.condition` or `GP.condition`.\nSyntax is much like the math:\ncompare `f1_posterior = f1 | (f2(x), y)` with $f_1 \\,|\\, f_2(x) = y$.\n\nDefinition, where `f*` and `g*` are `GP`s:\n\n```python\nf_posterior = f | (x, y)\n\nf_posterior = f | (g1(x), y)\n\nf_posterior = f | ((g1(x1), y1), (g2(x2), y2), ...)\n\nf1_posterior, f2_posterior, ... = (f1, f2, ...) | Obs(g(x), y)\n\nf1_posterior, f2_posterior, ... = (f1, f2, ...) | Obs((g1(x1), y1), (g2(x2), y2), ...)\n\n```\n\nFinally, `Graph.sample` can be used to get samples from multiple processes \njointly:\n\n```python\n>>> model.sample(f(x), (2 * f)(x))\n[array([[-0.35226314],\n        [-0.15521219],\n        [ 0.0752406 ]]),\n array([[-0.70452827],\n        [-0.31042226],\n        [ 0.15048168]])]\n```\n\n### Inducing Points\n\nStheno supports sparse approximations of posterior distributions. To construct\na sparse approximation, use `SparseObs` instead of `Obs`.\n\nDefinition:\n\n```python\nobs = SparseObs(u(z),  # Locations of inducing points.\n                e,     # Independent, additive noise process.\n                f(x),  # Locations of observations _without_ the noise \n                       #   process added.\n                y)     # Observations.\n                \nobs = SparseObs(u(z), e, f(x), y)\n\nobs = SparseObs(u(z), (e1, f1(x1), y1), (e2, f2(x2), y2), ...)\n\nobs = SparseObs((u1(z1), u2(z2), ...), e, f(x), y)\n\nobs = SparseObs(u(z), (e1, f1(x1), y1), (e2, f2(x2), y2), ...)\n\nobs = SparseObs((u1(z1), u2(z2), ...), (e1, f1(x1), y1), (e2, f2(x2), y2), ...)\n```\n\n`SparseObs` will also compute the value of the ELBO in `obs.elbo`, which can be\noptimised to select hyperparameters and locations of the inducing points.\n\n### AutoGrad, TensorFlow, or PyTorch?\n\nYour choice!\n\n```python\nfrom stheno.autograd import GP, EQ\n```\n\n```python\nfrom stheno.tensorflow import GP, EQ\n```\n\n```python\nfrom stheno.torch import GP, EQ\n```\n\n### Undiscussed Features\n\n* `stheno.mokernel` and `stheno.momean` offer multi-output kernels and means.\n\n    Example:\n\n    ```python\n    >>> model = Graph()\n\n    >>> f1, f2 = GP(EQ(), graph=model), GP(EQ(), graph=model)\n\n    >>> f = model.cross(f1, f2)\n\n    >>> f\n    GP(MultiOutputKernel(EQ(), EQ()), MultiOutputMean(0, 0))\n\n    >>> f(0).sample()\n    array([[ 1.1725799 ],\n           [-1.15642448]])\n    ```\n\n* `stheno.eis` offers kernels on an extended input space that allows one to \ndesign kernels in an alternative, flexible way.\n\n    Example:\n\n    ```python\n    >>> p = GP(NoisyKernel(EQ(), Delta()))\n\n    >>> prediction = p.condition(Observed(x), y)(Latent(x)).marginals()\n    ```\n    \n* `stheno.normal` offers an efficient implementation `Normal` of the normal \ndistribution, and a convenience constructor `Normal1D` for 1-dimensional normal\ndistributions.\n\n* `stheno.matrix` offers structured representations of matrices and efficient\noperations thereon.\n\n* Approximate multiplication between GPs is implemented. This is an \nexperimental feature.\n\n    Example:\n    \n    ```python\n    >>> GP(EQ(), 1) * GP(EQ(), 1)\n    GP(<lambda> * EQ() + <lambda> * EQ() + EQ() * EQ(), <lambda> + <lambda> + -1 * 1)\n    ```\n\n## Examples\n\nThe examples make use of [Varz](https://github.com/wesselb/varz) and some\nutility from [WBML](https://github.com/wesselb/wbml).\n\n\n### Simple Regression\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example1_simple_regression.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport wbml.plot\n\nfrom stheno import GP, EQ, Delta, model\n\n# Define points to predict at.\nx = np.linspace(0, 10, 100)\nx_obs = np.linspace(0, 7, 20)\n\n# Construct a prior.\nf = GP(EQ().periodic(5.))  # Latent function.\ne = GP(Delta())  # Noise.\ny = f + .5 * e\n\n# Sample a true, underlying function and observations.\nf_true, y_obs = model.sample(f(x), y(x_obs))\n\n# Now condition on the observations to make predictions.\nmean, lower, upper = (f | (y(x_obs), y_obs))(x).marginals()\n\n# Plot result.\nplt.plot(x, f_true, label='True', c='tab:blue')\nplt.scatter(x_obs, y_obs, label='Observations', c='tab:red')\nplt.plot(x, mean, label='Prediction', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\n\nwbml.plot.tweak()\nplt.savefig('readme_example1_simple_regression.png')\nplt.show()\n```\n\n### Decomposition of Prediction\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example2_decomposition.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport wbml.plot\n\nfrom stheno import GP, model, EQ, RQ, Linear, Delta, Exp, Obs, B\n\nB.epsilon = 1e-10\n\n# Define points to predict at.\nx = np.linspace(0, 10, 200)\nx_obs = np.linspace(0, 7, 50)\n\n# Construct a latent function consisting of four different components.\nf_smooth = GP(EQ())\nf_wiggly = GP(RQ(1e-1).stretch(.5))\nf_periodic = GP(EQ().periodic(1.))\nf_linear = GP(Linear())\n\nf = f_smooth + f_wiggly + f_periodic + .2 * f_linear\n\n# Let the observation noise consist of a bit of exponential noise.\ne_indep = GP(Delta())\ne_exp = GP(Exp())\n\ne = e_indep + .3 * e_exp\n\n# Sum the latent function and observation noise to get a model for the\n# observations.\ny = f + .5 * e\n\n# Sample a true, underlying function and observations.\nf_true_smooth, f_true_wiggly, f_true_periodic, f_true_linear, f_true, y_obs = \\\n    model.sample(f_smooth(x),\n                 f_wiggly(x),\n                 f_periodic(x),\n                 f_linear(x),\n                 f(x),\n                 y(x_obs))\n\n# Now condition on the observations and make predictions for the latent\n# function and its various components.\nf_smooth, f_wiggly, f_periodic, f_linear, f = \\\n    (f_smooth, f_wiggly, f_periodic, f_linear, f) | Obs(y(x_obs), y_obs)\n\npred_smooth = f_smooth(x).marginals()\npred_wiggly = f_wiggly(x).marginals()\npred_periodic = f_periodic(x).marginals()\npred_linear = f_linear(x).marginals()\npred_f = f(x).marginals()\n\n\n# Plot results.\ndef plot_prediction(x, f, pred, x_obs=None, y_obs=None):\n    plt.plot(x, f, label='True', c='tab:blue')\n    if x_obs is not None:\n        plt.scatter(x_obs, y_obs, label='Observations', c='tab:red')\n    mean, lower, upper = pred\n    plt.plot(x, mean, label='Prediction', c='tab:green')\n    plt.plot(x, lower, ls='--', c='tab:green')\n    plt.plot(x, upper, ls='--', c='tab:green')\n    wbml.plot.tweak()\n\n\nplt.figure(figsize=(10, 6))\n\nplt.subplot(3, 1, 1)\nplt.title('Prediction')\nplot_prediction(x, f_true, pred_f, x_obs, y_obs)\n\nplt.subplot(3, 2, 3)\nplt.title('Smooth Component')\nplot_prediction(x, f_true_smooth, pred_smooth)\n\nplt.subplot(3, 2, 4)\nplt.title('Wiggly Component')\nplot_prediction(x, f_true_wiggly, pred_wiggly)\n\nplt.subplot(3, 2, 5)\nplt.title('Periodic Component')\nplot_prediction(x, f_true_periodic, pred_periodic)\n\nplt.subplot(3, 2, 6)\nplt.title('Linear Component')\nplot_prediction(x, f_true_linear, pred_linear)\n\nplt.savefig('readme_example2_decomposition.png')\nplt.show()\n```\n\n### Learn a Function, Incorporating Prior Knowledge About Its Form\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example3_parametric.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport wbml.out\nimport wbml.plot\nfrom varz.tensorflow import Vars, minimise_l_bfgs_b\n\nfrom stheno.tensorflow import B, Graph, GP, EQ, Delta\n\n# Define points to predict at.\nx = B.linspace(tf.float64, 0, 5, 100)\nx_obs = B.linspace(tf.float64, 0, 3, 20)\n\n\ndef model(vs):\n    g = Graph()\n\n    # Random fluctuation:\n    u = GP(vs.pos(.5, name='u/var') *\n           EQ().stretch(vs.pos(0.5, name='u/scale')), graph=g)\n\n    # Noise:\n    e = GP(vs.pos(0.5, name='e/var') * Delta(), graph=g)\n\n    # Construct model:\n    alpha = vs.pos(1.2, name='alpha')\n    f = u + (lambda x: x ** alpha)\n    y = f + e\n\n    return f, y\n\n\n# Sample a true, underlying function and observations.\nvs = Vars(tf.float64)\nf_true = x ** 1.8 + B.sin(2 * B.pi * x)\nf, y = model(vs)\ny_obs = (y | (f(x), f_true))(x_obs).sample()\n\n\ndef objective(vs):\n    f, y = model(vs)\n    evidence = y(x_obs).logpdf(y_obs)\n    return -evidence\n\n\n# Learn hyperparameters.\nminimise_l_bfgs_b(tf.function(objective, autograph=False), vs)\nf, y = model(vs)\n\n# Print the learned parameters.\nwbml.out.kv('Alpha', vs['alpha'])\nwbml.out.kv('Prior', y.display(wbml.out.format))\n\n# Condition on the observations to make predictions.\nmean, lower, upper = (f | (y(x_obs), y_obs))(x).marginals()\n\n# Plot result.\nplt.plot(x, B.squeeze(f_true), label='True', c='tab:blue')\nplt.scatter(x_obs, B.squeeze(y_obs), label='Observations', c='tab:red')\nplt.plot(x, mean, label='Prediction', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.savefig('readme_example3_parametric.png')\nplt.show()\n```\n\n### Multi-Output Regression\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example4_multi-output.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom plum import Dispatcher, Referentiable, Self\nimport wbml.plot\n\nfrom stheno import GP, EQ, Delta, model, Kernel, Obs\n\n\nclass VGP(metaclass=Referentiable):\n    \"\"\"A vector-valued GP.\n\n    Args:\n        dim (int): Dimensionality.\n        kernel (instance of :class:`stheno.kernel.Kernel`): Kernel.\n    \"\"\"\n    dispatch = Dispatcher(in_class=Self)\n\n    @dispatch(int, Kernel)\n    def __init__(self, dim, kernel):\n        self.ps = [GP(kernel) for _ in range(dim)]\n\n    @dispatch([GP])\n    def __init__(self, *ps):\n        self.ps = ps\n\n    @dispatch(Self)\n    def __add__(self, other):\n        return VGP(*[f + g for f, g in zip(self.ps, other.ps)])\n\n    @dispatch(np.ndarray)\n    def lmatmul(self, A):\n        m, n = A.shape\n        ps = [0 for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                ps[i] += A[i, j] * self.ps[j]\n        return VGP(*ps)\n\n    def sample(self, x):\n        return model.sample(*(p(x) for p in self.ps))\n\n    def __or__(self, obs):\n        return VGP(*(p | obs for p in self.ps))\n\n    def obs(self, x, ys):\n        return Obs(*((p(x), y) for p, y in zip(self.ps, ys)))\n\n    def marginals(self, x):\n        return [p(x).marginals() for p in self.ps]\n\n\n# Define points to predict at.\nx = np.linspace(0, 10, 100)\nx_obs = np.linspace(0, 10, 10)\n\n# Model parameters:\nm = 2\np = 4\nH = np.random.randn(p, m)\n\n# Construct latent functions\nus = VGP(m, EQ())\nfs = us.lmatmul(H)\n\n# Construct noise.\ne = VGP(p, 0.5 * Delta())\n\n# Construct observation model.\nys = e + fs\n\n# Sample a true, underlying function and observations.\nfs_true = fs.sample(x)\nys_obs = (ys | fs.obs(x, fs_true)).sample(x_obs)\n\n# Condition the model on the observations to make predictions.\npreds = (fs | ys.obs(x_obs, ys_obs)).marginals(x)\n\n\n# Plot results.\ndef plot_prediction(x, f, pred, x_obs=None, y_obs=None):\n    plt.plot(x, f, label='True', c='tab:blue')\n    if x_obs is not None:\n        plt.scatter(x_obs, y_obs, label='Observations', c='tab:red')\n    mean, lower, upper = pred\n    plt.plot(x, mean, label='Prediction', c='tab:green')\n    plt.plot(x, lower, ls='--', c='tab:green')\n    plt.plot(x, upper, ls='--', c='tab:green')\n    wbml.plot.tweak()\n\n\nplt.figure(figsize=(10, 6))\n\nfor i in range(p):\n    plt.subplot(int(p ** .5), int(p ** .5), i + 1)\n    plt.title('Output {}'.format(i + 1))\n    plot_prediction(x, fs_true[i], preds[i], x_obs, ys_obs[i])\n\nplt.savefig('readme_example4_multi-output.png')\nplt.show()\n```\n\n### Approximate Integration\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example5_integration.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nimport wbml.plot\n\nfrom stheno.tensorflow import B, GP, EQ, Delta, Obs\n\n# Define points to predict at.\nx = B.linspace(tf.float64, 0, 10, 200)\nx_obs = B.linspace(tf.float64, 0, 10, 10)\n\n# Construct the model.\nf = 0.7 * GP(EQ()).stretch(1.5)\ne = 0.2 * GP(Delta())\n\n# Construct derivatives.\ndf = f.diff()\nddf = df.diff()\ndddf = ddf.diff() + e\n\n# Fix the integration constants.\nzero = tf.constant(0, dtype=tf.float64)\none = tf.constant(1, dtype=tf.float64)\nf, df, ddf, dddf = (f, df, ddf, dddf) | Obs((f(zero), one),\n                                            (df(zero), zero),\n                                            (ddf(zero), -one))\n\n# Sample observations.\ny_obs = B.sin(x_obs) + 0.2 * B.randn(*x_obs.shape)\n\n# Condition on the observations to make predictions.\nf, df, ddf, dddf = (f, df, ddf, dddf) | Obs(dddf(x_obs), y_obs)\n\n# And make predictions.\npred_iiif = f(x).marginals()\npred_iif = df(x).marginals()\npred_if = ddf(x).marginals()\npred_f = dddf(x).marginals()\n\n\n# Plot result.\ndef plot_prediction(x, f, pred, x_obs=None, y_obs=None):\n    plt.plot(x, f, label='True', c='tab:blue')\n    if x_obs is not None:\n        plt.scatter(x_obs, y_obs, label='Observations', c='tab:red')\n    mean, lower, upper = pred\n    plt.plot(x, mean, label='Prediction', c='tab:green')\n    plt.plot(x, lower, ls='--', c='tab:green')\n    plt.plot(x, upper, ls='--', c='tab:green')\n    wbml.plot.tweak()\n\n\nplt.figure(figsize=(10, 6))\n\nplt.subplot(2, 2, 1)\nplt.title('Function')\nplot_prediction(x, np.sin(x), pred_f, x_obs=x_obs, y_obs=y_obs)\n\nplt.subplot(2, 2, 2)\nplt.title('Integral of Function')\nplot_prediction(x, -np.cos(x), pred_if)\n\nplt.subplot(2, 2, 3)\nplt.title('Second Integral of Function')\nplot_prediction(x, -np.sin(x), pred_iif)\n\nplt.subplot(2, 2, 4)\nplt.title('Third Integral of Function')\nplot_prediction(x, np.cos(x), pred_iiif)\n\nplt.savefig('readme_example5_integration.png')\nplt.show()\n```\n\n### Bayesian Linear Regression\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example6_blr.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport wbml.out\nimport wbml.plot\n\nfrom stheno import GP, Delta, model, Obs\n\n# Define points to predict at.\nx = np.linspace(0, 10, 200)\nx_obs = np.linspace(0, 10, 10)\n\n# Construct the model.\nslope = GP(1)\nintercept = GP(5)\nf = slope * (lambda x: x) + intercept\n\ne = 0.2 * GP(Delta())  # Noise model\n\ny = f + e  # Observation model\n\n# Sample a slope, intercept, underlying function, and observations.\ntrue_slope, true_intercept, f_true, y_obs = \\\n    model.sample(slope(0), intercept(0), f(x), y(x_obs))\n\n# Condition on the observations to make predictions.\nslope, intercept, f = (slope, intercept, f) | Obs(y(x_obs), y_obs)\nmean, lower, upper = f(x).marginals()\n\nwbml.out.kv('True slope', true_slope[0, 0])\nwbml.out.kv('Predicted slope', slope(0).mean[0, 0])\nwbml.out.kv('True intercept', true_intercept[0, 0])\nwbml.out.kv('Predicted intercept', intercept(0).mean[0, 0])\n\n# Plot result.\nplt.plot(x, f_true, label='True', c='tab:blue')\nplt.scatter(x_obs, y_obs, label='Observations', c='tab:red')\nplt.plot(x, mean, label='Prediction', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.savefig('readme_example6_blr.png')\nplt.show()\n```\n\n### GPAR\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example7_gpar.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nimport wbml.plot\nfrom varz.tensorflow import Vars, minimise_l_bfgs_b\n\nfrom stheno.tensorflow import B, Graph, GP, Delta, EQ\n\n# Define points to predict at.\nx = B.linspace(tf.float64, 0, 10, 200)\nx_obs1 = B.linspace(tf.float64, 0, 10, 30)\ninds2 = np.random.permutation(len(x_obs1))[:10]\nx_obs2 = B.take(x_obs1, inds2)\n\n# Construction functions to predict and observations.\nf1_true = B.sin(x)\nf2_true = B.sin(x) ** 2\n\ny1_obs = B.sin(x_obs1) + 0.1 * B.randn(*x_obs1.shape)\ny2_obs = B.sin(x_obs2) ** 2 + 0.1 * B.randn(*x_obs2.shape)\n\n\ndef model(vs):\n    g = Graph()\n\n    # Construct model for first layer:\n    f1 = GP(vs.pos(1., name='f1/var') *\n            EQ().stretch(vs.pos(1., name='f1/scale')), graph=g)\n    e1 = GP(vs.pos(0.1, name='e1/var') * Delta(), graph=g)\n    y1 = f1 + e1\n\n    # Construct model for second layer:\n    f2 = GP(vs.pos(1., name='f2/var') *\n            EQ().stretch(vs.pos(np.array([1., .5]), name='f2/scale')), graph=g)\n    e2 = GP(vs.pos(0.1, name='e2/var') * Delta(), graph=g)\n    y2 = f2 + e2\n\n    return f1, y1, f2, y2\n\n\ndef objective(vs):\n    f1, y1, f2, y2 = model(vs)\n\n    x1 = x_obs1\n    x2 = B.stack(x_obs2, B.take(y1_obs, inds2), axis=1)\n    evidence = y1(x1).logpdf(y1_obs) + y2(x2).logpdf(y2_obs)\n\n    return -evidence\n\n\n# Learn hyperparameters.\nvs = Vars(tf.float64)\nminimise_l_bfgs_b(objective, vs)\nf1, y1, f2, y2 = model(vs)\n\n# Condition to make predictions.\nx1 = x_obs1\nx2 = B.stack(x_obs2, B.take(y1_obs, inds2), axis=1)\nf1 = f1 | (y1(x1), y1_obs)\nf2 = f2 | (y2(x2), y2_obs)\n\n# Predict first output.\nmean1, lower1, upper1 = f1(x).marginals()\n\n# Predict second output with Monte Carlo.\nsamples = [f2(B.stack(x, f1(x).sample()[:, 0], axis=1)).sample()[:, 0]\n           for _ in range(100)]\nmean2 = np.mean(samples, axis=0)\nlower2 = np.percentile(samples, 2.5, axis=0)\nupper2 = np.percentile(samples, 100 - 2.5, axis=0)\n\n# Plot result.\nplt.figure()\n\nplt.subplot(2, 1, 1)\nplt.title('Output 1')\nplt.plot(x, f1_true, label='True', c='tab:blue')\nplt.scatter(x_obs1, y1_obs, label='Observations', c='tab:red')\nplt.plot(x, mean1, label='Prediction', c='tab:green')\nplt.plot(x, lower1, ls='--', c='tab:green')\nplt.plot(x, upper1, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.subplot(2, 1, 2)\nplt.title('Output 2')\nplt.plot(x, f2_true, label='True', c='tab:blue')\nplt.scatter(x_obs2, y2_obs, label='Observations', c='tab:red')\nplt.plot(x, mean2, label='Prediction', c='tab:green')\nplt.plot(x, lower2, ls='--', c='tab:green')\nplt.plot(x, upper2, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.savefig('readme_example7_gpar.png')\nplt.show()\n```\n\n### A GP-RNN Model\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example8_gp-rnn.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nimport wbml.plot\nfrom varz.tensorflow import Vars, minimise_adam\nfrom wbml.net import rnn as rnn_constructor\n\nfrom stheno.tensorflow import B, Graph, GP, Delta, EQ, Obs\n\n# Increase regularisation because we are dealing with float32.\nB.epsilon = 1e-6\n\n# Construct points which to predict at.\nx = B.linspace(tf.float32, 0, 1, 100)[:, None]\ninds_obs = np.arange(0, int(0.75 * len(x)))  # Train on the first 75% only.\nx_obs = B.take(x, inds_obs)\n\n# Construct function and observations.\n#   Draw random modulation functions.\na_true = GP(1e-2 * EQ().stretch(0.1))(x).sample()\nb_true = GP(1e-2 * EQ().stretch(0.1))(x).sample()\n#   Construct the true, underlying function.\nf_true = (1 + a_true) * B.sin(2 * np.pi * 7 * x) + b_true\n#   Add noise.\ny_true = f_true + 0.1 * B.randn(*f_true.shape)\n\n# Normalise and split.\nf_true = (f_true - B.mean(y_true)) / B.std(y_true)\ny_true = (y_true - B.mean(y_true)) / B.std(y_true)\ny_obs = B.take(y_true, inds_obs)\n\n\ndef model(vs):\n    g = Graph()\n\n    # Construct an RNN.\n    f_rnn = rnn_constructor(output_size=1,\n                            widths=(10,),\n                            nonlinearity=B.tanh,\n                            final_dense=True)\n\n    # Set the weights for the RNN.\n    num_weights = f_rnn.num_weights(input_size=1)\n    weights = Vars(tf.float32, source=vs.get(shape=(num_weights,), name='rnn'))\n    f_rnn.initialise(input_size=1, vs=weights)\n\n    # Construct GPs that modulate the RNN.\n    a = GP(1e-2 * EQ().stretch(vs.pos(0.1, name='a/scale')), graph=g)\n    b = GP(1e-2 * EQ().stretch(vs.pos(0.1, name='b/scale')), graph=g)\n    e = GP(vs.pos(1e-2, name='e/var') * Delta(), graph=g)\n\n    # GP-RNN model:\n    f_gp_rnn = (1 + a) * (lambda x: f_rnn(x)) + b\n    y_gp_rnn = f_gp_rnn + e\n\n    return f_rnn, f_gp_rnn, y_gp_rnn, a, b\n\n\ndef objective_rnn(vs):\n    f_rnn, _, _, _, _ = model(vs)\n    return B.mean((f_rnn(x_obs) - y_obs) ** 2)\n\n\ndef objective_gp_rnn(vs):\n    _, _, y_gp_rnn, _, _ = model(vs)\n    evidence = y_gp_rnn(x_obs).logpdf(y_obs)\n    return -evidence\n\n\n# Pretrain the RNN.\nvs = Vars(tf.float32)\nminimise_adam(tf.function(objective_rnn, autograph=False),\n              vs, rate=1e-2, iters=1000, trace=True)\n\n# Jointly train the RNN and GPs.\nminimise_adam(tf.function(objective_gp_rnn, autograph=False),\n              vs, rate=1e-3, iters=1000, trace=True)\n\n_, f_gp_rnn, y_gp_rnn, a, b = model(vs)\n\n# Condition.\nf_gp_rnn, a, b = (f_gp_rnn, a, b) | Obs(y_gp_rnn(x_obs), y_obs)\n\n# Predict and plot results.\nplt.figure(figsize=(10, 6))\n\nplt.subplot(2, 1, 1)\nplt.title('$(1 + a)\\\\cdot {}$RNN${} + b$')\nplt.plot(x, f_true, label='True', c='tab:blue')\nplt.scatter(x_obs, y_obs, label='Observations', c='tab:red')\nmean, lower, upper = f_gp_rnn(x).marginals()\nplt.plot(x, mean, label='Prediction', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.subplot(2, 2, 3)\nplt.title('$a$')\nmean, lower, upper = a(x).marginals()\nplt.plot(x, mean, label='Prediction', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.subplot(2, 2, 4)\nplt.title('$b$')\nmean, lower, upper = b(x).marginals()\nplt.plot(x, mean, label='Prediction', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.savefig(f'readme_example8_gp-rnn.png')\nplt.show()\n```\n\n### Approximate Multiplication Between GPs\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example9_product.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport wbml.plot\n\nfrom stheno import GP, EQ, model, Obs\n\n# Define points to predict at.\nx = np.linspace(0, 10, 100)\n\n# Construct a prior.\nf1 = GP(EQ(), 3)\nf2 = GP(EQ(), 3)\n\n# Compute the approximate product.\nf_prod = f1 * f2\n\n# Sample two functions.\ns1, s2 = model.sample(f1(x), f2(x))\n\n# Predict.\nmean, lower, upper = (f_prod | ((f1(x), s1), (f2(x), s2)))(x).marginals()\n\n# Plot result.\nplt.plot(x, s1, label='Sample 1', c='tab:red')\nplt.plot(x, s2, label='Sample 2', c='tab:blue')\nplt.plot(x, s1 * s2, label='True product', c='tab:orange')\nplt.plot(x, mean, label='Approximate posterior', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.savefig('readme_example9_product.png')\nplt.show()\n```\n\n### Sparse Regression\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example10_sparse.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport wbml.out\nimport wbml.plot\n\nfrom stheno import GP, EQ, Delta, SparseObs\n\n# Define points to predict at.\nx = np.linspace(0, 10, 100)\nx_obs = np.linspace(0, 7, 50_000)\nx_ind = np.linspace(0, 10, 20)\n\n# Construct a prior.\nf = GP(EQ().periodic(2 * np.pi))  # Latent function.\ne = GP(Delta())  # Noise.\ny = f + .5 * e\n\n# Sample a true, underlying function and observations.\nf_true = np.sin(x)\ny_obs = np.sin(x_obs) + .5 * np.random.randn(*x_obs.shape)\n\n# Now condition on the observations to make predictions.\nobs = SparseObs(f(x_ind),  # Inducing points.\n                .5 * e,  # Noise process.\n                # Observations _without_ the noise process added on.\n                f(x_obs), y_obs)\nwbml.out.kv('elbo', obs.elbo)\nmean, lower, upper = (f | obs)(x).marginals()\n\n# Plot result.\nplt.plot(x, f_true, label='True', c='tab:blue')\nplt.scatter(x_obs, y_obs, label='Observations', c='tab:red')\nplt.scatter(x_ind, 0 * x_ind, label='Inducing Points', c='black')\nplt.plot(x, mean, label='Prediction', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.savefig('readme_example10_sparse.png')\nplt.show()\n```\n\n### Smoothing with Nonparametric Basis Functions\n\n![Prediction](https://raw.githubusercontent.com/wesselb/stheno/master/readme_example11_nonparametric_basis.png)\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport wbml.plot\n\nfrom stheno import GP, EQ, Delta, model, Obs\n\n# Define points to predict at.\nx = np.linspace(0, 10, 100)\nx_obs = np.linspace(0, 10, 20)\n\n# Constuct a prior:\nw = lambda x: np.exp(-x ** 2 / 0.5)  # Window\nb = [(GP(EQ()) * w).shift(xi) for xi in x_obs]  # Weighted basis functions\nf = sum(b)  # Latent function\ne = GP(Delta())  # Noise\ny = f + 0.2 * e  # Observation model\n\n# Sample a true, underlying function and observations.\nf_true, y_obs = model.sample(f(x), y(x_obs))\n\n# Condition on the observations to make predictions.\nobs = Obs(y(x_obs), y_obs)\nf, b = (f | obs, b | obs)\n\n# Plot result.\nfor i, bi in enumerate(b):\n    mean, lower, upper = bi(x).marginals()\n    kw_args = {'label': 'Basis functions'} if i == 0 else {}\n    plt.plot(x, mean, c='tab:orange', **kw_args)\nplt.plot(x, f_true, label='True', c='tab:blue')\nplt.scatter(x_obs, y_obs, label='Observations', c='tab:red')\nmean, lower, upper = f(x).marginals()\nplt.plot(x, mean, label='Prediction', c='tab:green')\nplt.plot(x, lower, ls='--', c='tab:green')\nplt.plot(x, upper, ls='--', c='tab:green')\nwbml.plot.tweak()\n\nplt.savefig('readme_example11_nonparametric_basis.png')\nplt.show()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wesselb/stheno", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "stheno", "package_url": "https://pypi.org/project/stheno/", "platform": "", "project_url": "https://pypi.org/project/stheno/", "project_urls": {"Homepage": "https://github.com/wesselb/stheno"}, "release_url": "https://pypi.org/project/stheno/0.3.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Implementation of Gaussian processes in Python", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://github.com/wesselb/stheno\" rel=\"nofollow\">Stheno</a></h1>\n<p><a href=\"https://travis-ci.org/wesselb/stheno\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce00c26934e6885bd3264d0c16d16a5696b02688/68747470733a2f2f7472617669732d63692e6f72672f77657373656c622f737468656e6f2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/wesselb/stheno?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d6cd764bda872ab320da3a4e6d780859bbb12ce/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f77657373656c622f737468656e6f2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<a href=\"https://wesselb.github.io/stheno\" rel=\"nofollow\"><img alt=\"Latest Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35e0b9e630dbc347bd4718399aa51fb3bb2bb889/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667\"></a></p>\n<p>Stheno is an implementation of Gaussian process modelling in Python. See\nalso <a href=\"https://github.com/willtebbutt/Stheno.jl\" rel=\"nofollow\">Stheno.jl</a>.</p>\n<p><em>Note:</em> Stheno requires Python 3.5+ and TensorFlow 2 if TensorFlow is used.</p>\n<ul>\n<li><a href=\"#nonlinear-regression-in-20-seconds\" rel=\"nofollow\">Nonlinear Regression in 20 Seconds</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#manual\" rel=\"nofollow\">Manual</a>\n<ul>\n<li><a href=\"#kernel-and-mean-design\" rel=\"nofollow\">Kernel and Mean Design</a>\n<ul>\n<li><a href=\"#available-kernels\" rel=\"nofollow\">Available Kernels</a></li>\n<li><a href=\"#available-means\" rel=\"nofollow\">Available Means</a></li>\n<li><a href=\"#compositional-design\" rel=\"nofollow\">Compositional Design</a></li>\n<li><a href=\"#displaying-kernels-and-mean\" rel=\"nofollow\">Displaying Kernels and Means</a></li>\n<li><a href=\"#properties-of-kernels\" rel=\"nofollow\">Properties of Kernels</a></li>\n</ul>\n</li>\n<li><a href=\"#model-design\" rel=\"nofollow\">Model Design</a>\n<ul>\n<li><a href=\"#compositional-design\" rel=\"nofollow\">Compositional Design</a></li>\n<li><a href=\"#displaying-gps\" rel=\"nofollow\">Displaying GPs</a></li>\n<li><a href=\"#properties-of-gps\" rel=\"nofollow\">Properties of GPs</a></li>\n<li><a href=\"#naming-gps\" rel=\"nofollow\">Naming GPs</a></li>\n</ul>\n</li>\n<li><a href=\"#finite-dimensional-distributions-inference-and-sampling\" rel=\"nofollow\">Finite-Dimensional Distributions, Inference, and Sampling</a></li>\n<li><a href=\"#inducing-points\" rel=\"nofollow\">Inducing Points</a></li>\n<li><a href=\"#autograd-tensorflow-or-pytorch\" rel=\"nofollow\">AutoGrad, TensorFlow, or PyTorch?</a></li>\n<li><a href=\"#undiscussed-features\" rel=\"nofollow\">Undiscussed Features</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a>\n<ul>\n<li><a href=\"#simple-regression\" rel=\"nofollow\">Simple Regression</a></li>\n<li><a href=\"#decomposition-of-prediction\" rel=\"nofollow\">Decomposition of Prediction</a></li>\n<li><a href=\"#learn-a-function-incorporating-prior-knowledge-about-its-form\" rel=\"nofollow\">Learn a Function, Incorporating Prior Knowledge About Its Form</a></li>\n<li><a href=\"#multi-ouput-regression\" rel=\"nofollow\">Multi-Output Regression</a></li>\n<li><a href=\"#approximate-integration\" rel=\"nofollow\">Approximate Integration</a></li>\n<li><a href=\"#bayesian-linear-regression\" rel=\"nofollow\">Bayesian Linear Regression</a></li>\n<li><a href=\"#gpar\" rel=\"nofollow\">GPAR</a></li>\n<li><a href=\"#a-gp-rnn-model\" rel=\"nofollow\">A GP-RNN Model</a></li>\n<li><a href=\"#approximate-multiplication-between-gps\" rel=\"nofollow\">Approximate Multiplication Between GPs</a></li>\n<li><a href=\"#sparse-regression\" rel=\"nofollow\">Sparse Regression</a></li>\n<li><a href=\"#smoothing-with-nonparametric-basis-functions\" rel=\"nofollow\">Smoothing with Nonparametric Basis Functions</a></li>\n</ul>\n</li>\n</ul>\n<h2>Nonlinear Regression in 20 Seconds</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>    <span class=\"c1\"># Points to predict at</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>                   <span class=\"c1\"># Observations</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span>  <span class=\"c1\"># Go GP!</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">8.48258669</span><span class=\"p\">]])</span>\n</pre>\n<p>Moar?! Then read on!</p>\n<h2>Installation</h2>\n<p>Before installing the package, please ensure that <code>gcc</code> and <code>gfortran</code> are\navailable.\nOn OS X, these are both installed with <code>brew install gcc</code>;\nusers of Anaconda may want to instead consider <code>conda install gcc</code>.\nOn Linux, <code>gcc</code> is most likely already available, and <code>gfortran</code> can be\ninstalled with <code>apt-get install gfortran</code>.\nThen simply</p>\n<pre><code>pip install stheno\n</code></pre>\n<h2>Manual</h2>\n<p>Note: <a href=\"https://wesselb.github.io/stheno\" rel=\"nofollow\">here</a> is a nicely rendered and more\nreadable version of the docs.</p>\n<h3>Kernel and Mean Design</h3>\n<p>Inputs to kernels, means, and GPs, henceforth referred to simply as <em>inputs</em>,\nmust be of one of the following three forms:</p>\n<ul>\n<li>\n<p>If the input <code>x</code> is a <em>rank 0 tensor</em>, i.e. a scalar, then <code>x</code> refers to a\nsingle input location. For example, <code>0</code> simply refers to the sole input\nlocation <code>0</code>.</p>\n</li>\n<li>\n<p>If the input <code>x</code> is a <em>rank 1 tensor</em>, then every element of <code>x</code> is\ninterpreted as a separate input location. For example, <code>np.linspace(0, 1, 10)</code>\ngenerates 10 different input locations ranging from <code>0</code> to <code>1</code>.</p>\n</li>\n<li>\n<p>If the input <code>x</code> is a <em>rank 2 tensor</em>, then every <em>row</em> of <code>x</code> is\ninterpreted as a separate input location. In this case inputs are\nmulti-dimensional, and the columns correspond to the various input dimensions.</p>\n</li>\n</ul>\n<p>If <code>k</code> is a kernel, say <code>k = EQ()</code>, then <code>k(x, y)</code> constructs the <em>kernel\nmatrix</em> for all pairs of points between <code>x</code> and <code>y</code>. <code>k(x)</code> is shorthand for\n<code>k(x, x)</code>. Furthermore, <code>k.elwise(x, y)</code> constructs the <em>kernel vector</em> pairing\nthe points in <code>x</code> and <code>y</code> element wise, which will be a <em>rank 2 column vector</em>.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">1.</span>        <span class=\"p\">,</span> <span class=\"mf\">0.8824969</span> <span class=\"p\">,</span> <span class=\"mf\">0.60653066</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.8824969</span> <span class=\"p\">,</span> <span class=\"mf\">1.</span>        <span class=\"p\">,</span> <span class=\"mf\">0.8824969</span> <span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.60653066</span><span class=\"p\">,</span> <span class=\"mf\">0.8824969</span> <span class=\"p\">,</span> <span class=\"mf\">1.</span>        <span class=\"p\">]])</span>\n \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">elwise</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">1.</span>        <span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.8824969</span> <span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.60653066</span><span class=\"p\">]])</span>\n</pre>\n<p>Finally, mean functions output a <em>rank 2 column vector</em>.</p>\n<h4>Available Kernels</h4>\n<p>Constants function as constant kernels. Besides that, the following kernels are\navailable:</p>\n<ul>\n<li>\n<p><code>EQ()</code>, the exponentiated quadratic:</p>\n<p>$$ k(x, y) = \\exp\\left( -\\frac{1}{2}|x - y|^2 \\right); $$</p>\n</li>\n<li>\n<p><code>RQ(alpha)</code>, the rational quadratic:</p>\n<p>$$ k(x, y) = \\left( 1 + \\frac{|x - y|^2}{2 \\alpha} \\right)^{-\\alpha}; $$</p>\n</li>\n<li>\n<p><code>Exp()</code> or <code>Matern12()</code>, the exponential kernel:</p>\n<p>$$ k(x, y) = \\exp\\left( -|x - y| \\right); $$</p>\n</li>\n<li>\n<p><code>Matern32()</code>, the Matern\u20133/2 kernel:</p>\n<p>$$ k(x, y) = \\left(\n1 + \\sqrt{3}|x - y|\n\\right)\\exp\\left(-\\sqrt{3}|x - y|\\right); $$</p>\n</li>\n<li>\n<p><code>Matern52()</code>, the Matern\u20135/2 kernel:</p>\n<p>$$ k(x, y) = \\left(\n1 + \\sqrt{5}|x - y| + \\frac{5}{3} |x - y|^2\n\\right)\\exp\\left(-\\sqrt{3}|x - y|\\right); $$</p>\n</li>\n<li>\n<p><code>Delta()</code>, the Kronecker delta kernel:</p>\n<p>$$ k(x, y) = \\begin{cases}\n1 &amp; \\text{if } x = y, \\\n0 &amp; \\text{otherwise};\n\\end{cases} $$</p>\n</li>\n<li>\n<p><code>DecayingKernel(alpha, beta)</code>:</p>\n<p>$$ k(x, y) = \\frac{|\\beta|^\\alpha}{|x + y + \\beta|^\\alpha}; $$</p>\n</li>\n<li>\n<p><code>TensorProductKernel(f)</code>:</p>\n<p>$$ k(x, y) = f(x)f(y). $$</p>\n<p>Adding or multiplying a <code>FunctionType</code> <code>f</code> to or with a kernel will\nautomatically translate <code>f</code> to <code>TensorProductKernel(f)</code>. For example,\n<code>f * k</code> will translate to <code>TensorProductKernel(f) * k</code>, and <code>f + k</code> will\ntranslate to <code>TensorProductKernel(f) + k</code>.</p>\n</li>\n</ul>\n<h4>Available Means</h4>\n<p>Constants function as constant means. Besides that, the following means are\navailable:</p>\n<ul>\n<li>\n<p><code>TensorProductMean(f)</code>:</p>\n<p>$$ m(x) = f(x). $$</p>\n<p>Adding or multiplying a <code>FunctionType</code> <code>f</code> to or with a mean will\nautomatically translate <code>f</code> to <code>TensorProductMean(f)</code>. For example,\n<code>f * m</code> will translate to <code>TensorProductMean(f) * m</code>, and <code>f + m</code> will\ntranslate to <code>TensorProductMean(f) + m</code>.</p>\n</li>\n</ul>\n<h4>Compositional Design</h4>\n<ul>\n<li>\n<p>Add and subtract <em>kernels and means</em>.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">Exp</span><span class=\"p\">()</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">Exp</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">0</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">Exp</span><span class=\"p\">()</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">Exp</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n<span class=\"mi\">0</span>\n</pre>\n</li>\n<li>\n<p>Multiply <em>kernels and means</em>.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">Exp</span><span class=\"p\">()</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">Exp</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n<span class=\"mi\">0</span>\n</pre>\n</li>\n<li>\n<p>Shift <em>kernels and means</em>:</p>\n<p>Definition:</p>\n<pre><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">c2</span><span class=\"p\">)</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Linear</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Linear</span><span class=\"p\">()</span> <span class=\"n\">shift</span> <span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">shift</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Stretch <em>kernels and means</em>.</p>\n<p>Definition:</p>\n<pre><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">/</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">/</span> <span class=\"n\">c2</span><span class=\"p\">)</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>&gt;</code> operator is implemented to provide a shorthand for stretching:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span>\n</pre>\n</li>\n<li>\n<p>Select particular input dimensions of <em>kernels and means</em>.</p>\n<p>Definition:</p>\n<pre><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">])(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]],</span> <span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n</li>\n<li>\n<p>Transform the inputs of <em>kernels and means</em>.</p>\n<p>Definition:</p>\n<pre><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">transform</span> <span class=\"n\">f</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">)</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">transform</span> <span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">transform</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Numerically, but efficiently, take derivatives of <em>kernels and means</em>.\nThis currently only works in TensorFlow.</p>\n<p>Definition:</p>\n<pre><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p>Make <em>kernels</em> periodic, but <em>not means</em>.</p>\n<p>Definition:</p>\n<pre><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">w</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">((</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">)))</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">per</span> <span class=\"mi\">1</span>\n</pre>\n</li>\n<li>\n<p>Reverse the arguments of <em>kernels</em>, but <em>not means</em>.</p>\n<p>Definition:</p>\n<pre><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">())</span>\n<span class=\"n\">Reversed</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">())</span>\n</pre>\n</li>\n<li>\n<p>Extract terms and factors from sums and products respectively of <em>kernels and\nmeans</em>.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">RQ</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">Linear</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">term</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">RQ</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">Linear</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">factor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n</pre>\n<p>Kernels and means \"wrapping\" others can be \"unwrapped\" by indexing <code>k[0]</code>\nor <code>m[0]</code>.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">())</span>\n<span class=\"n\">Reversed</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">())</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">Linear</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">per</span> <span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">EQ</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ul>\n<h4>Displaying Kernels and Means</h4>\n<p>Kernels and means have a <code>display</code> method.\nThe <code>display</code> method accepts a callable formatter that will be applied before any value is printed.\nThis comes in handy when pretty printing kernels, or when kernels contain TensorFlow objects.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"mf\">2.12345</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{:.2f}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"mf\">2.12</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n<span class=\"n\">Tensor</span><span class=\"p\">(</span><span class=\"s2\">\"Const_1:0\"</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">int32</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">))</span>\n<span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span>\n</pre>\n<h4>Properties of Kernels</h4>\n<p>The stationarity of a kernel <code>k</code> can always be determined by querying\n<code>k.stationary</code>. In many cases, the variance <code>k.var</code>, length scale\n<code>k.length_scale</code>, and period <code>k.period</code> can also be determined.</p>\n<p>Example of querying the stationarity:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stationary</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">Linear</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">stationary</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Example of querying the variance:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">var</span>\n<span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">var</span>\n<span class=\"mi\">2</span>\n</pre>\n<p>Example of querying the length scale:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">length_scale</span>\n<span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">length_scale</span>\n<span class=\"mf\">1.5</span>\n</pre>\n<p>Example of querying the period:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">period</span>\n<span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">period</span>\n<span class=\"mi\">2</span>\n</pre>\n<h3>Model Design</h3>\n<p>The basic building block of a model is a <code>GP(kernel, mean=0, graph=model)</code>,\nwhich necessarily takes in a kernel, and optionally a mean and a <em>graph</em>.\nGPs can be combined into new GPs, and the graph is the thing that keeps\ntrack of all of these objects.\nIf the graph is left unspecified, new GPs are appended to a provided default\ngraph <code>model</code>, which is exported by Stheno:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">model</span>\n</pre>\n<p>Here's an example model:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f1</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">())</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f_sum</span> <span class=\"o\">=</span> <span class=\"n\">f1</span> <span class=\"o\">+</span> <span class=\"n\">f2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f_sum</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">Linear</span><span class=\"p\">(),</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n<h4>Compositional Design</h4>\n<ul>\n<li>\n<p>Add and subtract GPs and other objects.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Exp</span><span class=\"p\">())</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">Exp</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"mi\">0</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Multiply GPs by other objects.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">*</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Shift GPs.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">shift</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> \n</pre>\n</li>\n<li>\n<p>Stretch GPs.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>&gt;</code> operator is implemented to provide a shorthand for stretching:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Select particular input dimensions.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>Indexing is implemented to provide a a shorthand for selecting input\ndimensions:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">)</span> \n</pre>\n</li>\n<li>\n<p>Transform the input.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">transform</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Numerically take the derivative of a GP.\nThe argument specifies which dimension to take the derivative with respect\nto.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Construct a finite difference estimate of the derivative of a GP.\nSee <code>stheno.graph.Graph.diff_approx</code> for a description of the arguments.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">diff_approx</span><span class=\"p\">(</span><span class=\"n\">deriv</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mf\">50000000.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">shift</span> <span class=\"p\">(</span><span class=\"mf\">0.0001414213562373095</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)))</span> <span class=\"n\">shift</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.0001414213562373095</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"n\">shift</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.0001414213562373095</span><span class=\"p\">)))</span> <span class=\"n\">shift</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0001414213562373095</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Construct the Cartesian product of a collection of GPs.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">),</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">cross</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">MultiOutputKernel</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"n\">EQ</span><span class=\"p\">()),</span> <span class=\"n\">MultiOutputMean</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</pre>\n</li>\n</ul>\n<h4>Displaying GPs</h4>\n<p>Like kernels and means, GPs have a <code>display</code> method that accepts a formatter.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mf\">2.12345</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{:.2f}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mf\">2.12</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<h4>Properties of GPs</h4>\n<p>Properties of kernels can be queried on GPs directly.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">stationary</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">RQ</span><span class=\"p\">(</span><span class=\"mf\">1e-1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">length_scale</span>\n<span class=\"mi\">1</span>\n</pre>\n<h3>Naming GPs</h3>\n<p>It is possible to give a name to GPs.\nNames must be strings.\nA graph then behaves like a two-way dictionary between GPs and their names.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'prior'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'prior'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'alternative_prior'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"s1\">'alternative_prior'</span><span class=\"p\">]</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span>\n<span class=\"s1\">'alternative_prior'</span>\n</pre>\n<h3>Finite-Dimensional Distributions, Inference, and Sampling</h3>\n<p>Simply call a GP to construct its finite-dimensional distribution:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"n\">stheno</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">Normal</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">]])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">var</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">1.</span>        <span class=\"p\">,</span> <span class=\"mf\">0.8824969</span> <span class=\"p\">,</span> <span class=\"mf\">0.60653066</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.8824969</span> <span class=\"p\">,</span> <span class=\"mf\">1.</span>        <span class=\"p\">,</span> <span class=\"mf\">0.8824969</span> <span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.60653066</span><span class=\"p\">,</span> <span class=\"mf\">0.8824969</span> <span class=\"p\">,</span> <span class=\"mf\">1.</span>        <span class=\"p\">]])</span>\n       \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mf\">0.47676132</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.51696144</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.77643117</span><span class=\"p\">]])</span>\n       \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">logpdf</span><span class=\"p\">(</span><span class=\"n\">y1</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"mf\">1.348196150807441</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">logpdf</span><span class=\"p\">(</span><span class=\"n\">y2</span><span class=\"p\">)</span>\n <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">1.00581476</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.67625465</span><span class=\"p\">])</span>\n</pre>\n<p>If you wish to compute the evidence of multiple observations,\nthen <code>Graph.logpdf</code> can be used.</p>\n<p>Definition:</p>\n<pre><span class=\"n\">Graph</span><span class=\"o\">.</span><span class=\"n\">logpdf</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">Graph</span><span class=\"o\">.</span><span class=\"n\">logpdf</span><span class=\"p\">((</span><span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">),</span> <span class=\"n\">y1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">),</span> <span class=\"n\">y2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Furthermore, use <code>f(x).marginals()</code> to efficiently compute the means and\nthe marginal lower and upper 95% central credible region bounds:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">]),</span> <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.</span><span class=\"p\">]),</span> <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">]))</span>\n</pre>\n<p>To condition on observations, use <code>Graph.condition</code> or <code>GP.condition</code>.\nSyntax is much like the math:\ncompare <code>f1_posterior = f1 | (f2(x), y)</code> with $f_1 ,|, f_2(x) = y$.</p>\n<p>Definition, where <code>f*</code> and <code>g*</code> are <code>GP</code>s:</p>\n<pre><span class=\"n\">f_posterior</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">f_posterior</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">g1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">f_posterior</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">|</span> <span class=\"p\">((</span><span class=\"n\">g1</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">),</span> <span class=\"n\">y1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">g2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">),</span> <span class=\"n\">y2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"n\">f1_posterior</span><span class=\"p\">,</span> <span class=\"n\">f2_posterior</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Obs</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">f1_posterior</span><span class=\"p\">,</span> <span class=\"n\">f2_posterior</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Obs</span><span class=\"p\">((</span><span class=\"n\">g1</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">),</span> <span class=\"n\">y1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">g2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">),</span> <span class=\"n\">y2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, <code>Graph.sample</code> can be used to get samples from multiple processes\njointly:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mf\">0.35226314</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.15521219</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span> <span class=\"mf\">0.0752406</span> <span class=\"p\">]]),</span>\n <span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mf\">0.70452827</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.31042226</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span> <span class=\"mf\">0.15048168</span><span class=\"p\">]])]</span>\n</pre>\n<h3>Inducing Points</h3>\n<p>Stheno supports sparse approximations of posterior distributions. To construct\na sparse approximation, use <code>SparseObs</code> instead of <code>Obs</code>.</p>\n<p>Definition:</p>\n<pre><span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">SparseObs</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span>  <span class=\"c1\"># Locations of inducing points.</span>\n                <span class=\"n\">e</span><span class=\"p\">,</span>     <span class=\"c1\"># Independent, additive noise process.</span>\n                <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>  <span class=\"c1\"># Locations of observations _without_ the noise </span>\n                       <span class=\"c1\">#   process added.</span>\n                <span class=\"n\">y</span><span class=\"p\">)</span>     <span class=\"c1\"># Observations.</span>\n                \n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">SparseObs</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">SparseObs</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">e1</span><span class=\"p\">,</span> <span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">),</span> <span class=\"n\">y1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">e2</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">),</span> <span class=\"n\">y2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">SparseObs</span><span class=\"p\">((</span><span class=\"n\">u1</span><span class=\"p\">(</span><span class=\"n\">z1</span><span class=\"p\">),</span> <span class=\"n\">u2</span><span class=\"p\">(</span><span class=\"n\">z2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">),</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">SparseObs</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">e1</span><span class=\"p\">,</span> <span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">),</span> <span class=\"n\">y1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">e2</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">),</span> <span class=\"n\">y2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">SparseObs</span><span class=\"p\">((</span><span class=\"n\">u1</span><span class=\"p\">(</span><span class=\"n\">z1</span><span class=\"p\">),</span> <span class=\"n\">u2</span><span class=\"p\">(</span><span class=\"n\">z2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">e1</span><span class=\"p\">,</span> <span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">),</span> <span class=\"n\">y1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">e2</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">),</span> <span class=\"n\">y2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><code>SparseObs</code> will also compute the value of the ELBO in <code>obs.elbo</code>, which can be\noptimised to select hyperparameters and locations of the inducing points.</p>\n<h3>AutoGrad, TensorFlow, or PyTorch?</h3>\n<p>Your choice!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stheno.autograd</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stheno.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">stheno.torch</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span>\n</pre>\n<h3>Undiscussed Features</h3>\n<ul>\n<li>\n<p><code>stheno.mokernel</code> and <code>stheno.momean</code> offer multi-output kernels and means.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">),</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">cross</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">MultiOutputKernel</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"n\">EQ</span><span class=\"p\">()),</span> <span class=\"n\">MultiOutputMean</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">()</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.1725799</span> <span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">1.15642448</span><span class=\"p\">]])</span>\n</pre>\n</li>\n<li>\n<p><code>stheno.eis</code> offers kernels on an extended input space that allows one to\ndesign kernels in an alternative, flexible way.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">NoisyKernel</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"n\">Delta</span><span class=\"p\">()))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">Observed</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)(</span><span class=\"n\">Latent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p><code>stheno.normal</code> offers an efficient implementation <code>Normal</code> of the normal\ndistribution, and a convenience constructor <code>Normal1D</code> for 1-dimensional normal\ndistributions.</p>\n</li>\n<li>\n<p><code>stheno.matrix</code> offers structured representations of matrices and efficient\noperations thereon.</p>\n</li>\n<li>\n<p>Approximate multiplication between GPs is implemented. This is an\nexperimental feature.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">EQ</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span> <span class=\"o\">+</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span> <span class=\"o\">+</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h2>Examples</h2>\n<p>The examples make use of <a href=\"https://github.com/wesselb/varz\" rel=\"nofollow\">Varz</a> and some\nutility from <a href=\"https://github.com/wesselb/wbml\" rel=\"nofollow\">WBML</a>.</p>\n<h3>Simple Regression</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a77e2d038ad8038dfb5fe164a46afc617482b33f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65315f73696d706c655f72656772657373696f6e2e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">model</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct a prior.</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mf\">5.</span><span class=\"p\">))</span>  <span class=\"c1\"># Latent function.</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Delta</span><span class=\"p\">())</span>  <span class=\"c1\"># Noise.</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"o\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">e</span>\n\n<span class=\"c1\"># Sample a true, underlying function and observations.</span>\n<span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Now condition on the observations to make predictions.</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">),</span> <span class=\"n\">y_obs</span><span class=\"p\">))(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot result.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example1_simple_regression.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Decomposition of Prediction</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d127b44142eb76ecd5d8803546627d6d3b31b762/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65325f6465636f6d706f736974696f6e2e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">RQ</span><span class=\"p\">,</span> <span class=\"n\">Linear</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">Exp</span><span class=\"p\">,</span> <span class=\"n\">Obs</span><span class=\"p\">,</span> <span class=\"n\">B</span>\n\n<span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">epsilon</span> <span class=\"o\">=</span> <span class=\"mf\">1e-10</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct a latent function consisting of four different components.</span>\n<span class=\"n\">f_smooth</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span>\n<span class=\"n\">f_wiggly</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">RQ</span><span class=\"p\">(</span><span class=\"mf\">1e-1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">f_periodic</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">))</span>\n<span class=\"n\">f_linear</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Linear</span><span class=\"p\">())</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f_smooth</span> <span class=\"o\">+</span> <span class=\"n\">f_wiggly</span> <span class=\"o\">+</span> <span class=\"n\">f_periodic</span> <span class=\"o\">+</span> <span class=\"o\">.</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">f_linear</span>\n\n<span class=\"c1\"># Let the observation noise consist of a bit of exponential noise.</span>\n<span class=\"n\">e_indep</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Delta</span><span class=\"p\">())</span>\n<span class=\"n\">e_exp</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Exp</span><span class=\"p\">())</span>\n\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">e_indep</span> <span class=\"o\">+</span> <span class=\"o\">.</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">e_exp</span>\n\n<span class=\"c1\"># Sum the latent function and observation noise to get a model for the</span>\n<span class=\"c1\"># observations.</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"o\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">e</span>\n\n<span class=\"c1\"># Sample a true, underlying function and observations.</span>\n<span class=\"n\">f_true_smooth</span><span class=\"p\">,</span> <span class=\"n\">f_true_wiggly</span><span class=\"p\">,</span> <span class=\"n\">f_true_periodic</span><span class=\"p\">,</span> <span class=\"n\">f_true_linear</span><span class=\"p\">,</span> <span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span> <span class=\"o\">=</span> \\\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">f_smooth</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n                 <span class=\"n\">f_wiggly</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n                 <span class=\"n\">f_periodic</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n                 <span class=\"n\">f_linear</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n                 <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n                 <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Now condition on the observations and make predictions for the latent</span>\n<span class=\"c1\"># function and its various components.</span>\n<span class=\"n\">f_smooth</span><span class=\"p\">,</span> <span class=\"n\">f_wiggly</span><span class=\"p\">,</span> <span class=\"n\">f_periodic</span><span class=\"p\">,</span> <span class=\"n\">f_linear</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">=</span> \\\n    <span class=\"p\">(</span><span class=\"n\">f_smooth</span><span class=\"p\">,</span> <span class=\"n\">f_wiggly</span><span class=\"p\">,</span> <span class=\"n\">f_periodic</span><span class=\"p\">,</span> <span class=\"n\">f_linear</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Obs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">),</span> <span class=\"n\">y_obs</span><span class=\"p\">)</span>\n\n<span class=\"n\">pred_smooth</span> <span class=\"o\">=</span> <span class=\"n\">f_smooth</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">pred_wiggly</span> <span class=\"o\">=</span> <span class=\"n\">f_wiggly</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">pred_periodic</span> <span class=\"o\">=</span> <span class=\"n\">f_periodic</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">pred_linear</span> <span class=\"o\">=</span> <span class=\"n\">f_linear</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">pred_f</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Plot results.</span>\n<span class=\"k\">def</span> <span class=\"nf\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">x_obs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">x_obs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n    <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">pred</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Prediction'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">pred_f</span><span class=\"p\">,</span> <span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Smooth Component'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true_smooth</span><span class=\"p\">,</span> <span class=\"n\">pred_smooth</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Wiggly Component'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true_wiggly</span><span class=\"p\">,</span> <span class=\"n\">pred_wiggly</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Periodic Component'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true_periodic</span><span class=\"p\">,</span> <span class=\"n\">pred_periodic</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Linear Component'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true_linear</span><span class=\"p\">,</span> <span class=\"n\">pred_linear</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example2_decomposition.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Learn a Function, Incorporating Prior Knowledge About Its Form</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13f8065d9c118ad4fc64d1f168bc5a404db02682/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65335f706172616d65747269632e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.out</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n<span class=\"kn\">from</span> <span class=\"nn\">varz.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">Vars</span><span class=\"p\">,</span> <span class=\"n\">minimise_l_bfgs_b</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">Graph</span><span class=\"p\">,</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">Delta</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Random fluctuation:</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'u/var'</span><span class=\"p\">)</span> <span class=\"o\">*</span>\n           <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'u/scale'</span><span class=\"p\">)),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Noise:</span>\n    <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'e/var'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">Delta</span><span class=\"p\">(),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Construct model:</span>\n    <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'alpha'</span><span class=\"p\">)</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">u</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"n\">alpha</span><span class=\"p\">)</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n\n\n<span class=\"c1\"># Sample a true, underlying function and observations.</span>\n<span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">f_true</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mf\">1.8</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n<span class=\"n\">y_obs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">f_true</span><span class=\"p\">))(</span><span class=\"n\">x_obs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n    <span class=\"n\">evidence</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">logpdf</span><span class=\"p\">(</span><span class=\"n\">y_obs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">evidence</span>\n\n\n<span class=\"c1\"># Learn hyperparameters.</span>\n<span class=\"n\">minimise_l_bfgs_b</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">autograph</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">vs</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print the learned parameters.</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">kv</span><span class=\"p\">(</span><span class=\"s1\">'Alpha'</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"p\">[</span><span class=\"s1\">'alpha'</span><span class=\"p\">])</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">kv</span><span class=\"p\">(</span><span class=\"s1\">'Prior'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Condition on the observations to make predictions.</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">),</span> <span class=\"n\">y_obs</span><span class=\"p\">))(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot result.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">f_true</span><span class=\"p\">),</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"n\">y_obs</span><span class=\"p\">),</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example3_parametric.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Multi-Output Regression</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a86da9f97fb0886fa316b65f9ab07d57c35aafdf/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65345f6d756c74692d6f75747075742e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">plum</span> <span class=\"kn\">import</span> <span class=\"n\">Dispatcher</span><span class=\"p\">,</span> <span class=\"n\">Referentiable</span><span class=\"p\">,</span> <span class=\"n\">Self</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">Kernel</span><span class=\"p\">,</span> <span class=\"n\">Obs</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VGP</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">Referentiable</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"A vector-valued GP.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        dim (int): Dimensionality.</span>\n<span class=\"sd\">        kernel (instance of :class:`stheno.kernel.Kernel`): Kernel.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">dispatch</span> <span class=\"o\">=</span> <span class=\"n\">Dispatcher</span><span class=\"p\">(</span><span class=\"n\">in_class</span><span class=\"o\">=</span><span class=\"n\">Self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Kernel</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">,</span> <span class=\"n\">kernel</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"p\">)]</span>\n\n    <span class=\"nd\">@dispatch</span><span class=\"p\">([</span><span class=\"n\">GP</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ps</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">ps</span>\n\n    <span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">Self</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">VGP</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"n\">g</span> <span class=\"k\">for</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">g</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ps</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ps</span><span class=\"p\">)])</span>\n\n    <span class=\"nd\">@dispatch</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lmatmul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">):</span>\n        <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n        <span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n                <span class=\"n\">ps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ps</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">VGP</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ps</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ps</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__or__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">VGP</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">|</span> <span class=\"n\">obs</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ps</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">obs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Obs</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ps</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">marginals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ps</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Model parameters:</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct latent functions</span>\n<span class=\"n\">us</span> <span class=\"o\">=</span> <span class=\"n\">VGP</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">())</span>\n<span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">us</span><span class=\"o\">.</span><span class=\"n\">lmatmul</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct noise.</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">VGP</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">Delta</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Construct observation model.</span>\n<span class=\"n\">ys</span> <span class=\"o\">=</span> <span class=\"n\">e</span> <span class=\"o\">+</span> <span class=\"n\">fs</span>\n\n<span class=\"c1\"># Sample a true, underlying function and observations.</span>\n<span class=\"n\">fs_true</span> <span class=\"o\">=</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">ys_obs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ys</span> <span class=\"o\">|</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">obs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">fs_true</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Condition the model on the observations to make predictions.</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">fs</span> <span class=\"o\">|</span> <span class=\"n\">ys</span><span class=\"o\">.</span><span class=\"n\">obs</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">ys_obs</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Plot results.</span>\n<span class=\"k\">def</span> <span class=\"nf\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">x_obs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">x_obs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n    <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">pred</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">**</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">**</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Output </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">fs_true</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">preds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">ys_obs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example4_multi-output.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Approximate Integration</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16a2d232b3e6bd269ab42b847a659c05d2916e65/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65355f696e746567726174696f6e2e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">Obs</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct the model.</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span> <span class=\"o\">*</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"mf\">1.5</span><span class=\"p\">)</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span> <span class=\"o\">*</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Delta</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Construct derivatives.</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">()</span>\n<span class=\"n\">ddf</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">()</span>\n<span class=\"n\">dddf</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">e</span>\n\n<span class=\"c1\"># Fix the integration constants.</span>\n<span class=\"n\">zero</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">ddf</span><span class=\"p\">,</span> <span class=\"n\">dddf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">ddf</span><span class=\"p\">,</span> <span class=\"n\">dddf</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Obs</span><span class=\"p\">((</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">),</span> <span class=\"n\">one</span><span class=\"p\">),</span>\n                                            <span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">),</span> <span class=\"n\">zero</span><span class=\"p\">),</span>\n                                            <span class=\"p\">(</span><span class=\"n\">ddf</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"n\">one</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Sample observations.</span>\n<span class=\"n\">y_obs</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">0.2</span> <span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x_obs</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Condition on the observations to make predictions.</span>\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">ddf</span><span class=\"p\">,</span> <span class=\"n\">dddf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">ddf</span><span class=\"p\">,</span> <span class=\"n\">dddf</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Obs</span><span class=\"p\">(</span><span class=\"n\">dddf</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">),</span> <span class=\"n\">y_obs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># And make predictions.</span>\n<span class=\"n\">pred_iiif</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">pred_iif</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">pred_if</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">pred_f</span> <span class=\"o\">=</span> <span class=\"n\">dddf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Plot result.</span>\n<span class=\"k\">def</span> <span class=\"nf\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">x_obs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">x_obs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n    <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">pred</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n    <span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Function'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">pred_f</span><span class=\"p\">,</span> <span class=\"n\">x_obs</span><span class=\"o\">=</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"o\">=</span><span class=\"n\">y_obs</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Integral of Function'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">pred_if</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Second Integral of Function'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">pred_iif</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Third Integral of Function'</span><span class=\"p\">)</span>\n<span class=\"n\">plot_prediction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">pred_iiif</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example5_integration.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Bayesian Linear Regression</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3f86dcd38056948b6a9e6c019c4afc0f1c39c3d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65365f626c722e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.out</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">Obs</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct the model.</span>\n<span class=\"n\">slope</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">intercept</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">slope</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">intercept</span>\n\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span> <span class=\"o\">*</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Delta</span><span class=\"p\">())</span>  <span class=\"c1\"># Noise model</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"n\">e</span>  <span class=\"c1\"># Observation model</span>\n\n<span class=\"c1\"># Sample a slope, intercept, underlying function, and observations.</span>\n<span class=\"n\">true_slope</span><span class=\"p\">,</span> <span class=\"n\">true_intercept</span><span class=\"p\">,</span> <span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span> <span class=\"o\">=</span> \\\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">slope</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">intercept</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Condition on the observations to make predictions.</span>\n<span class=\"n\">slope</span><span class=\"p\">,</span> <span class=\"n\">intercept</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">slope</span><span class=\"p\">,</span> <span class=\"n\">intercept</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Obs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">),</span> <span class=\"n\">y_obs</span><span class=\"p\">)</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">kv</span><span class=\"p\">(</span><span class=\"s1\">'True slope'</span><span class=\"p\">,</span> <span class=\"n\">true_slope</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">kv</span><span class=\"p\">(</span><span class=\"s1\">'Predicted slope'</span><span class=\"p\">,</span> <span class=\"n\">slope</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">kv</span><span class=\"p\">(</span><span class=\"s1\">'True intercept'</span><span class=\"p\">,</span> <span class=\"n\">true_intercept</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">kv</span><span class=\"p\">(</span><span class=\"s1\">'Predicted intercept'</span><span class=\"p\">,</span> <span class=\"n\">intercept</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Plot result.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example6_blr.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>GPAR</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c9b54d24f3fcb80c2b4241b42bdccde75b14429b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65375f677061722e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n<span class=\"kn\">from</span> <span class=\"nn\">varz.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">Vars</span><span class=\"p\">,</span> <span class=\"n\">minimise_l_bfgs_b</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">Graph</span><span class=\"p\">,</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">EQ</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs1</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"n\">inds2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">permutation</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x_obs1</span><span class=\"p\">))[:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">x_obs2</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">x_obs1</span><span class=\"p\">,</span> <span class=\"n\">inds2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construction functions to predict and observations.</span>\n<span class=\"n\">f1_true</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">f2_true</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">y1_obs</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x_obs1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">0.1</span> <span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x_obs1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"n\">y2_obs</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x_obs2</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mf\">0.1</span> <span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x_obs2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Construct model for first layer:</span>\n    <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'f1/var'</span><span class=\"p\">)</span> <span class=\"o\">*</span>\n            <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'f1/scale'</span><span class=\"p\">)),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n    <span class=\"n\">e1</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'e1/var'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">Delta</span><span class=\"p\">(),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n    <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"n\">f1</span> <span class=\"o\">+</span> <span class=\"n\">e1</span>\n\n    <span class=\"c1\"># Construct model for second layer:</span>\n    <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'f2/var'</span><span class=\"p\">)</span> <span class=\"o\">*</span>\n            <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">]),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'f2/scale'</span><span class=\"p\">)),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n    <span class=\"n\">e2</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'e2/var'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">Delta</span><span class=\"p\">(),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n    <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">f2</span> <span class=\"o\">+</span> <span class=\"n\">e2</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">y2</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">x_obs1</span>\n    <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">x_obs2</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">y1_obs</span><span class=\"p\">,</span> <span class=\"n\">inds2</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">evidence</span> <span class=\"o\">=</span> <span class=\"n\">y1</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">logpdf</span><span class=\"p\">(</span><span class=\"n\">y1_obs</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">y2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">logpdf</span><span class=\"p\">(</span><span class=\"n\">y2_obs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">evidence</span>\n\n\n<span class=\"c1\"># Learn hyperparameters.</span>\n<span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">minimise_l_bfgs_b</span><span class=\"p\">(</span><span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"p\">)</span>\n<span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Condition to make predictions.</span>\n<span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">x_obs1</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">x_obs2</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">y1_obs</span><span class=\"p\">,</span> <span class=\"n\">inds2</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">f1</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">y1</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">),</span> <span class=\"n\">y1_obs</span><span class=\"p\">)</span>\n<span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">f2</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">y2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">),</span> <span class=\"n\">y2_obs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Predict first output.</span>\n<span class=\"n\">mean1</span><span class=\"p\">,</span> <span class=\"n\">lower1</span><span class=\"p\">,</span> <span class=\"n\">upper1</span> <span class=\"o\">=</span> <span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Predict second output with Monte Carlo.</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">()[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">()[:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n           <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)]</span>\n<span class=\"n\">mean2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">lower2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">percentile</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">upper2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">percentile</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"mi\">100</span> <span class=\"o\">-</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plot result.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Output 1'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f1_true</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs1</span><span class=\"p\">,</span> <span class=\"n\">y1_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower1</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper1</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Output 2'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f2_true</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs2</span><span class=\"p\">,</span> <span class=\"n\">y2_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean2</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower2</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper2</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example7_gpar.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>A GP-RNN Model</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a4bccf6b591e5f2f130c1760e77f2a020fd8327/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65385f67702d726e6e2e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n<span class=\"kn\">from</span> <span class=\"nn\">varz.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">Vars</span><span class=\"p\">,</span> <span class=\"n\">minimise_adam</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wbml.net</span> <span class=\"kn\">import</span> <span class=\"n\">rnn</span> <span class=\"k\">as</span> <span class=\"n\">rnn_constructor</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">Graph</span><span class=\"p\">,</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">Obs</span>\n\n<span class=\"c1\"># Increase regularisation because we are dealing with float32.</span>\n<span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">epsilon</span> <span class=\"o\">=</span> <span class=\"mf\">1e-6</span>\n\n<span class=\"c1\"># Construct points which to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"n\">inds_obs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">0.75</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>  <span class=\"c1\"># Train on the first 75% only.</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">inds_obs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct function and observations.</span>\n<span class=\"c1\">#   Draw random modulation functions.</span>\n<span class=\"n\">a_true</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mf\">1e-2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">))(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">()</span>\n<span class=\"n\">b_true</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mf\">1e-2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">))(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">()</span>\n<span class=\"c1\">#   Construct the true, underlying function.</span>\n<span class=\"n\">f_true</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">a_true</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"mi\">7</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">b_true</span>\n<span class=\"c1\">#   Add noise.</span>\n<span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"n\">f_true</span> <span class=\"o\">+</span> <span class=\"mf\">0.1</span> <span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">f_true</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Normalise and split.</span>\n<span class=\"n\">f_true</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f_true</span> <span class=\"o\">-</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">)</span>\n<span class=\"n\">y_true</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y_true</span> <span class=\"o\">-</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">)</span>\n<span class=\"n\">y_obs</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">inds_obs</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Construct an RNN.</span>\n    <span class=\"n\">f_rnn</span> <span class=\"o\">=</span> <span class=\"n\">rnn_constructor</span><span class=\"p\">(</span><span class=\"n\">output_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                            <span class=\"n\">widths</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,),</span>\n                            <span class=\"n\">nonlinearity</span><span class=\"o\">=</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">tanh</span><span class=\"p\">,</span>\n                            <span class=\"n\">final_dense</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Set the weights for the RNN.</span>\n    <span class=\"n\">num_weights</span> <span class=\"o\">=</span> <span class=\"n\">f_rnn</span><span class=\"o\">.</span><span class=\"n\">num_weights</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">num_weights</span><span class=\"p\">,),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'rnn'</span><span class=\"p\">))</span>\n    <span class=\"n\">f_rnn</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"o\">=</span><span class=\"n\">weights</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Construct GPs that modulate the RNN.</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mf\">1e-2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'a/scale'</span><span class=\"p\">)),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"mf\">1e-2</span> <span class=\"o\">*</span> <span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stretch</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'b/scale'</span><span class=\"p\">)),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n    <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">1e-2</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'e/var'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">Delta</span><span class=\"p\">(),</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># GP-RNN model:</span>\n    <span class=\"n\">f_gp_rnn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">f_rnn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n    <span class=\"n\">y_gp_rnn</span> <span class=\"o\">=</span> <span class=\"n\">f_gp_rnn</span> <span class=\"o\">+</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">f_rnn</span><span class=\"p\">,</span> <span class=\"n\">f_gp_rnn</span><span class=\"p\">,</span> <span class=\"n\">y_gp_rnn</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">objective_rnn</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">f_rnn</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">((</span><span class=\"n\">f_rnn</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">y_obs</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">objective_gp_rnn</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">y_gp_rnn</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n    <span class=\"n\">evidence</span> <span class=\"o\">=</span> <span class=\"n\">y_gp_rnn</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">logpdf</span><span class=\"p\">(</span><span class=\"n\">y_obs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">evidence</span>\n\n\n<span class=\"c1\"># Pretrain the RNN.</span>\n<span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">minimise_adam</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">objective_rnn</span><span class=\"p\">,</span> <span class=\"n\">autograph</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n              <span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mf\">1e-2</span><span class=\"p\">,</span> <span class=\"n\">iters</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">trace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Jointly train the RNN and GPs.</span>\n<span class=\"n\">minimise_adam</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">objective_gp_rnn</span><span class=\"p\">,</span> <span class=\"n\">autograph</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n              <span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"n\">iters</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">trace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">f_gp_rnn</span><span class=\"p\">,</span> <span class=\"n\">y_gp_rnn</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Condition.</span>\n<span class=\"n\">f_gp_rnn</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f_gp_rnn</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Obs</span><span class=\"p\">(</span><span class=\"n\">y_gp_rnn</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">),</span> <span class=\"n\">y_obs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Predict and plot results.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'$(1 + a)</span><span class=\"se\">\\\\</span><span class=\"s1\">cdot </span><span class=\"si\">{}</span><span class=\"s1\">$RNN$</span><span class=\"si\">{}</span><span class=\"s1\"> + b$'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">f_gp_rnn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'$a$'</span><span class=\"p\">)</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'$b$'</span><span class=\"p\">)</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'readme_example8_gp-rnn.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Approximate Multiplication Between GPs</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0974d9f4096184df96892b511a55fa50046a2dd5/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c65395f70726f647563742e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">Obs</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct a prior.</span>\n<span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">(),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute the approximate product.</span>\n<span class=\"n\">f_prod</span> <span class=\"o\">=</span> <span class=\"n\">f1</span> <span class=\"o\">*</span> <span class=\"n\">f2</span>\n\n<span class=\"c1\"># Sample two functions.</span>\n<span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Predict.</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f_prod</span> <span class=\"o\">|</span> <span class=\"p\">((</span><span class=\"n\">f1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">s1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">s2</span><span class=\"p\">)))(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot result.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Sample 1'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Sample 2'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">s1</span> <span class=\"o\">*</span> <span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True product'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:orange'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Approximate posterior'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example9_product.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Sparse Regression</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4440be79c6a5f7c83daae47cc55b50c14d0bc6c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c6531305f7370617273652e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.out</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">SparseObs</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">50_000</span><span class=\"p\">)</span>\n<span class=\"n\">x_ind</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct a prior.</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">))</span>  <span class=\"c1\"># Latent function.</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Delta</span><span class=\"p\">())</span>  <span class=\"c1\"># Noise.</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"o\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">e</span>\n\n<span class=\"c1\"># Sample a true, underlying function and observations.</span>\n<span class=\"n\">f_true</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">y_obs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"o\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x_obs</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now condition on the observations to make predictions.</span>\n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">SparseObs</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x_ind</span><span class=\"p\">),</span>  <span class=\"c1\"># Inducing points.</span>\n                <span class=\"o\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">e</span><span class=\"p\">,</span>  <span class=\"c1\"># Noise process.</span>\n                <span class=\"c1\"># Observations _without_ the noise process added on.</span>\n                <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">),</span> <span class=\"n\">y_obs</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">kv</span><span class=\"p\">(</span><span class=\"s1\">'elbo'</span><span class=\"p\">,</span> <span class=\"n\">obs</span><span class=\"o\">.</span><span class=\"n\">elbo</span><span class=\"p\">)</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">|</span> <span class=\"n\">obs</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot result.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_ind</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"o\">*</span> <span class=\"n\">x_ind</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Inducing Points'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'black'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example10_sparse.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Smoothing with Nonparametric Basis Functions</h3>\n<p><img alt=\"Prediction\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/414633a6f6b6ee4b4f85faa6091fa9138d40de30/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f77657373656c622f737468656e6f2f6d61737465722f726561646d655f6578616d706c6531315f6e6f6e706172616d65747269635f62617369732e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wbml.plot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">stheno</span> <span class=\"kn\">import</span> <span class=\"n\">GP</span><span class=\"p\">,</span> <span class=\"n\">EQ</span><span class=\"p\">,</span> <span class=\"n\">Delta</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">Obs</span>\n\n<span class=\"c1\"># Define points to predict at.</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">x_obs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Constuct a prior:</span>\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">/</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>  <span class=\"c1\"># Window</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">EQ</span><span class=\"p\">())</span> <span class=\"o\">*</span> <span class=\"n\">w</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">xi</span> <span class=\"ow\">in</span> <span class=\"n\">x_obs</span><span class=\"p\">]</span>  <span class=\"c1\"># Weighted basis functions</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># Latent function</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">GP</span><span class=\"p\">(</span><span class=\"n\">Delta</span><span class=\"p\">())</span>  <span class=\"c1\"># Noise</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"mf\">0.2</span> <span class=\"o\">*</span> <span class=\"n\">e</span>  <span class=\"c1\"># Observation model</span>\n\n<span class=\"c1\"># Sample a true, underlying function and observations.</span>\n<span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Condition on the observations to make predictions.</span>\n<span class=\"n\">obs</span> <span class=\"o\">=</span> <span class=\"n\">Obs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">),</span> <span class=\"n\">y_obs</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">|</span> <span class=\"n\">obs</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">|</span> <span class=\"n\">obs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plot result.</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">bi</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">bi</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n    <span class=\"n\">kw_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'label'</span><span class=\"p\">:</span> <span class=\"s1\">'Basis functions'</span><span class=\"p\">}</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"p\">{}</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:orange'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw_args</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">f_true</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'True'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:blue'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x_obs</span><span class=\"p\">,</span> <span class=\"n\">y_obs</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Observations'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:red'</span><span class=\"p\">)</span>\n<span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">marginals</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">=</span><span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'tab:green'</span><span class=\"p\">)</span>\n<span class=\"n\">wbml</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">tweak</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">'readme_example11_nonparametric_basis.png'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6083799, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0e7eb91fc4847bfb04edfe19145e586e", "sha256": "79ccae8ed2af368f2e9447ae6bcdb0fa0b5a57156d9a039094061b059634704c"}, "downloads": -1, "filename": "stheno-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0e7eb91fc4847bfb04edfe19145e586e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81652, "upload_time": "2019-06-13T16:34:42", "upload_time_iso_8601": "2019-06-13T16:34:42.741004Z", "url": "https://files.pythonhosted.org/packages/e8/c9/cea39d93a98e4cfeb9dfd0a1706bb204c57b4149d937fbf7acd2fb46ecc1/stheno-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1c4fed8161175b3977b17cdffcad357d", "sha256": "cb61e79c4395095a0948ff3994705600f1c9ec775be1559d73a801cfc301b46e"}, "downloads": -1, "filename": "stheno-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1c4fed8161175b3977b17cdffcad357d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81793, "upload_time": "2019-06-13T18:01:05", "upload_time_iso_8601": "2019-06-13T18:01:05.124637Z", "url": "https://files.pythonhosted.org/packages/c2/cd/44a247bbc5b94c3c471b019df367f1bb831e7d6b29f89020c00b10cddfd1/stheno-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ebbe1abbdd58191823f686f5668b435e", "sha256": "45611ff2cfa73e0359c32e5a58131aa7f39e1d4470489500a27ce82bedf5c27d"}, "downloads": -1, "filename": "stheno-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ebbe1abbdd58191823f686f5668b435e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82741, "upload_time": "2019-07-09T22:39:30", "upload_time_iso_8601": "2019-07-09T22:39:30.078236Z", "url": "https://files.pythonhosted.org/packages/7f/2f/8b764ab13da65a317c841d53760dcad5ae0e3187d75ea26ae2a9f416c0f0/stheno-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "381e780633cef528f3cb56bb181794b9", "sha256": "a0e4c0fdf3d777f211055892c0ca61be79b8aa2cb04728f1ae333996a52dd00e"}, "downloads": -1, "filename": "stheno-0.3.0.tar.gz", "has_sig": false, "md5_digest": "381e780633cef528f3cb56bb181794b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 82986, "upload_time": "2019-10-29T17:46:58", "upload_time_iso_8601": "2019-10-29T17:46:58.351706Z", "url": "https://files.pythonhosted.org/packages/0b/22/5714d04977e1421ba2de94677e0b0ec64634e1d59f47bae6d78a9001f962/stheno-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "9808443c9002956691f810d54f521b67", "sha256": "f19f4ade979d9055ea5c90e018912be8d8785ffe47e4513f1e484c7ab50f711e"}, "downloads": -1, "filename": "stheno-0.3.1.tar.gz", "has_sig": false, "md5_digest": "9808443c9002956691f810d54f521b67", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 83790, "upload_time": "2019-10-31T18:03:42", "upload_time_iso_8601": "2019-10-31T18:03:42.892326Z", "url": "https://files.pythonhosted.org/packages/2f/50/d2191c365f27c028ac8bd016082da1c97b3d6177d81dd9bb94920991e6ff/stheno-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "51f5c119cbf37d019657adb239637b81", "sha256": "ebb60594247bbbd13e4952dd8572949192aa0e7d326ab52cb0ddee51c18a0379"}, "downloads": -1, "filename": "stheno-0.3.2.tar.gz", "has_sig": false, "md5_digest": "51f5c119cbf37d019657adb239637b81", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 83803, "upload_time": "2019-10-31T18:13:16", "upload_time_iso_8601": "2019-10-31T18:13:16.811216Z", "url": "https://files.pythonhosted.org/packages/95/69/cb5d628d2f564e2fa91204f06ef3345524cad792fb2cb61bb2203eecefdb/stheno-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "dac1cd1786c7c6ba0e4f934f3bfd4be7", "sha256": "838784a3c2e46e59de02920cb5c5af7fe57b5a7f0c4032feeb3489b21e46ade0"}, "downloads": -1, "filename": "stheno-0.3.3.tar.gz", "has_sig": false, "md5_digest": "dac1cd1786c7c6ba0e4f934f3bfd4be7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 84107, "upload_time": "2019-11-05T13:50:11", "upload_time_iso_8601": "2019-11-05T13:50:11.188124Z", "url": "https://files.pythonhosted.org/packages/1f/fa/6235acb89bbb42bc4cedb4257199886fa8cd25077c199ec9106a574842bc/stheno-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "1c58cbf3a203be0e6bc72ecf096f61a2", "sha256": "06ab4cc75c3ad9097ba8608d11c982054793df707f8857628f3418e9a58d1100"}, "downloads": -1, "filename": "stheno-0.3.4.tar.gz", "has_sig": false, "md5_digest": "1c58cbf3a203be0e6bc72ecf096f61a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 83671, "upload_time": "2019-11-06T00:03:53", "upload_time_iso_8601": "2019-11-06T00:03:53.230289Z", "url": "https://files.pythonhosted.org/packages/49/43/fa874aca9767e1e047ff5223259f84827d53bbba880c34c6d47b2d26c7ac/stheno-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c58cbf3a203be0e6bc72ecf096f61a2", "sha256": "06ab4cc75c3ad9097ba8608d11c982054793df707f8857628f3418e9a58d1100"}, "downloads": -1, "filename": "stheno-0.3.4.tar.gz", "has_sig": false, "md5_digest": "1c58cbf3a203be0e6bc72ecf096f61a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 83671, "upload_time": "2019-11-06T00:03:53", "upload_time_iso_8601": "2019-11-06T00:03:53.230289Z", "url": "https://files.pythonhosted.org/packages/49/43/fa874aca9767e1e047ff5223259f84827d53bbba880c34c6d47b2d26c7ac/stheno-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:58 2020"}