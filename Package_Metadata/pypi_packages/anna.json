{"info": {"author": "Dominik Vilsmeier", "author_email": "dominik.vilsmeier1123@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development"], "description": "Anna - A Neat configuratioN Auxiliary\n=====================================\n\nAnna helps you configure your application by building the bridge between the components of\nyour application and external configuration sources. It allows you to keep your code short and\nflexible yet explicit when it comes to configuration - the necessary tinkering is performed by\nthe framework.\n\nAnna contains lots of \"in-place\" documentation aka doc strings so make sure you check out those\ntoo (\"``help`` yourself\")!\n\n\n80 seconds to Anna\n------------------\n\nAnna is all about *parameters* and *configuration sources*. You declare parameters as part of\nyour application (on a class for example) and specify their values in a configuration source.\nAll you're left to do with then is to point your application to the configuration source and\nlet the framework do its job.\n\nAn example is worth a thousand words\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSay we want to build an application that deals with vehicles. I'm into cars so the first thing\nI'll do is make sure we get one of those::\n\n    >>> class Car:\n    ...     def __init__(self, brand, model):\n    ...         self._brand = brand\n    ...         self._model = model\n    >>>\n    >>> your_car = Car('Your favorite brand', 'The hottest model')\n\nGreat! We let the user specify the car's ``brand`` and ``model`` and return him a brand new car!\n\nNow we're using ``anna`` for declaring the parameters::\n\n    >>> from anna import Configurable, parametrize, String, JSONAdaptor\n    >>>\n    >>> @parametrize(\n    ...     String('Brand'),\n    ...     String('Model')\n    ... )\n    ... class Car(Configurable):\n    ...     def __init__(self, config):\n    ...         super(Car, self).__init__(config)\n    >>>\n    >>> your_car = Car(JSONAdaptor('the_file_where_you_specified_your_favorite_car.json'))\n\nThe corresponding json file would look like this::\n\n    {\n        \"Car/Parameters/Brand\": \"Your favorite brand\",\n        \"Car/Parameters/Model\": \"The hottest model\",\n    }\n\nIt's a bit more to type but this comes at a few advantages:\n\n* We can specify the type of the parameter and ``anna`` will handle the necessary conversions\n  for us; ``anna`` ships with plenty of parameter types so there's much more to it than just\n  strings!\n* If we change your mind later on and want to add another parameter, say for example the color\n  of the car, it's as easy as declaring a new parameter ``String('Color')`` and setting it as\n  a class attribute; all the user needs to do is to specify the corresponding value in\n  the configuration source. Note that there's no need to change any interfaces/signatures or\n  other intermediate components which carry the user input to the receiving class; all it expects\n  is a configuration adaptor which points to the configuration source.\n* The configuration source can host parameters for more than only one component, meaning again\n  that we don't need to modify intermediate parts when adding new components to our application;\n  all we need to do is provide the configuration adaptor.\n\n\nFive minutes hands-on\n---------------------\n\nThe 80 seconds intro piqued your curiosity? Great! So let's move on! For the following\nconsiderations we'll pick up the example from above and elaborate on it more thoroughly.\n\nLet's start with a quick Q/A session\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**So what happened when using the decorator ``parametrize``?** It received a number of parameters\nas arguments which it set as attributes on the receiving class. Field names are deduced from\nthe parameters names applying CamelCase to _snake_case_with_leading_underscore conversion.\nThat is ``String('Brand')`` is set as ``Car._brand``.\n\n**All right, but how did the instance receive its values then?** Note that ``Car`` inherits from\n``Configurable`` and ``Configurable.__init__`` is where the actual instance configuration happens.\nWe provided it a configuration adaptor which points to the configuration source (in this case\na local file) and the specific values were extracted from there. Values are set on the instance\nusing the parameter's field name, that is ``String('Brand')`` will make an instance receive\nthe corresponding value at ``your_car._brand`` (``Car._brand`` is still the parameter instance).\n\n**Okay, but how did the framework know where to find the values in the configuration source?**\nWell there's a bit more going on during the call to ``parametrize`` than is written above.\nIn addition to setting the parameters on the class it also deduces a configuration path for\neach parameter which specifies where to find the corresponding value in the source. The path\nconsists of a base path and the parameter's name: \"<base-path>/<name>\" (slashes are used\nto delimit path elements). ``parametrize`` tries to get this base path from the receiving class\nlooking up the attribute ``CONFIG_PATH``. If it has no such attribute or if it's ``None`` then\nthe base path defaults to \"<class-name>/Parameters\". However in our example - although we didn't\nset the config path explicitly - it was already there because ``Configurable`` uses a custom\nmetaclass which adds the class attribute ``CONFIG_PATH`` if it's missing or ``None`` using\nthe same default as above. So if you want to specify a custom path within the source you can do so\nby specifying the class attribute ``CONFIG_PATH``.\n\n**_snake_case_with_leading_underscore, not too bad but can I choose custom field names for the parameters too?**\nYes, besides providing a number of parameters as arguments to ``parametrize`` we have the option\nto supply it a number of keyword arguments as well which represent field_name / parameter pairs;\nthe key is the field name and the value is the parameter: ``brand_name=String('Brand')``.\n\n**Now that we declared all those parameters how does the user know what to specify?**\n``anna`` provides a decorator ``document_parameters`` which will add all declared parameters to\nthe component's doc string under a new section. Another option for the user is to retrieve\nthe declared parameters via ``get_parameters`` (which is inherited from ``Configurable``) and\nprint their string representations which contain comprehensive information::\n\n    >>> for parameter in Car.get_parameters():\n    ...     print(parameter)\n\nOf course documenting the parameters manually is also an option.\n\nAlright so let's get to the code\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    >>> from anna import Configurable, parametrize, String, JSONAdaptor\n    >>>\n    >>> @parametrize(\n    ...     String('Model'),\n    ...     brand_name=String('Brand')\n    ... )\n    ... class Car(Configurable):\n    ...     CONFIG_PATH = 'Car'\n    ...     def __init__(self, config):\n    ...         super(Car, self).__init__(config)\n\nLet's first see what information we can get about the parameters::\n\n    >>> for parameter in Car.get_parameters():\n    ...     print(parameter)\n    ...\n    {\n        \"optional\": false,\n        \"type\": \"StringParameter\",\n        \"name\": \"Model\",\n        \"path\": \"Car\"\n    }\n    {\n        \"optional\": false,\n        \"type\": \"StringParameter\",\n        \"name\": \"Brand\",\n        \"path\": \"Car\"\n    }\n\nNote that it prints ``\"StringParameter\"`` because that's the parameter's actual class,\n``String`` is just a shorthand. Let's see what we can get from the doc string::\n\n    >>> print(Car.__doc__)\n    None\n    >>> from anna import document_parameters\n    >>> Car = document_parameters(Car)\n    >>> print(Car.__doc__)\n\n        Declared parameters\n        -------------------\n        (configuration path: Car)\n\n        Brand : String\n        Model : String\n\n\nNow that we know what we need to specify let's get us a car! The ``JSONAdaptor`` can also be\ninitialized with a ``dict`` as root element, so we're just creating our configuration on the fly::\n\n    >>> back_to_the_future = JSONAdaptor(root={\n    ...     'Car/Brand': 'DeLorean',\n    ...     'Car/Model': 'DMC-12',\n    ... })\n    >>> doc_browns_car = Car(back_to_the_future)\n    >>> doc_browns_car.brand_name  # Access via our custom field name.\n    'DeLorean'\n    >>> doc_browns_car._model  # Access via the automatically chosen field name.\n    'DMC-12'\n\nCreating another car is as easy as providing another configuration source::\n\n    >>> mr_bonds_car = Car(JSONAdaptor(root={\n    ...     'Car/Brand': 'Aston Martin',\n    ...     'Car/Model': 'DB5',\n    ... }))\n\nLet's assume we want more information about the brand than just its name. We have nicely stored\nall information in a database::\n\n    >>> database = {\n    ... 'DeLorean': {\n    ...     'name': 'DeLorean',\n    ...     'founded in': 1975,\n    ...     'founded by': 'John DeLorean',\n    ... },\n    ... 'Aston Martin': {\n    ...     'name': 'Aston Martin',\n    ...     'founded in': 1913,\n    ...     'founded by': 'Lionel Martin, Robert Bamford',\n    ... }}\n\nWe also have a database access function which we can use to load stuff from the database::\n\n    >>> def load_from_database(key):\n    ...     return database[key]\n\nTo load this database information instead of just the brand's name we only have to modify\nthe ``Car`` class to declare a new parameter: ``ActionParameter`` (or ``Action``).\nAn ``ActionParameter`` wraps another parameter and let's us specify an action which is applied to\nthe parameter's value when it's loaded. For our case that is::\n\n    >>> from anna import ActionParameter\n    >>> Car.brand = ActionParameter(String('Brand'), load_from_database)\n    >>> doc_browns_car = Car(back_to_the_future)\n    >>> doc_browns_car.brand\n    {'founded by': 'John DeLorean', 'name': 'DeLorean', 'founded in': 1975}\n    >>> doc_browns_car.brand_name\n    'DeLorean'\n\nNote that we didn't need to provide a new configuration source as the new ``brand`` parameter is\nbased on the brand name which is already present.\n\nSay we also want to obtain the year in which the model was first produced and we have a function\nfor exactly that purpose however it requires the brand name and model name as one string::\n\n    >>> def first_produced_in(brand_and_model):\n    ...     return {'DeLorean DMC-12': 1981, 'Aston Martin DB5': 1963}[brand_and_model]\n\nThat's not a problem because an ``ActionParameter`` type lets us combine multiple parameters::\n\n    >>> Car.first_produced_in = ActionParameter(\n    ... String('Brand'),\n    ... lambda brand, model: first_produced_in('%s %s' % (brand, model)),\n    ... depends_on=('Model',))\n\nOther existing parameters, specified either by name of by reference via the keyword argument\n``depends_on``, are passed as additional arguments to the given action.\n\nIn the above example we declared parameters on a class using ``parametrize`` but you could as well\nuse parameter instances independently and load their values via ``load_from_configuration`` which\nexpects a configuration adaptor as well as a configuration path which localizes the parameter's\nvalue. You also have the option to provide a specification directly via\n``load_from_representation``. This functions expects the specification as a unicode string and\nadditional (meta) data as a ``dict`` (a unit for ``PhysicalQuantities`` for example).\n\nThis introduction was meant to demonstrate the basic principles but there's much more to ``anna``\n(especially when it comes to parameter types)! So make sure to check out also the other parts\nof the docs!\n\n\nParameter types\n---------------\n\nA great variety of parameter types are here at your disposal:\n\n* ``Bool``\n* ``Integer``\n* ``String``\n* ``Number``\n* ``Vector``\n* ``Duplet``\n* ``Triplet``\n* ``Tuple``\n* ``PhysicalQuantity``\n* ``Action``\n* ``Choice``\n* ``Group``\n* ``ComplementaryGroup``\n* ``SubstitutionGroup``\n\n\nConfiguration adaptors\n----------------------\n\nTwo adaptor types are provided:\n\n* ``XMLAdaptor`` for connecting to xml files.\n* ``JSONAdaptor`` for connecting to json files (following some additional conventions).\n\n\nGenerating configuration files\n------------------------------\n\nConfiguration files can of course be created manually however ``anna`` also ships with a ``PyQt``\nfrontend that can be integrated into custom applications. The frontend provides input forms for\nall parameter types as well as for whole parametrized classes together with convenience methods for\nturning the forms' values into configuration adaptor instances which in turn can be dumped to\nfiles. Both PyQt4 and PyQt5 are supported. See ``anna.frontends.qt``.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/Dominik1123/Anna", "keywords": "configuration framework", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "anna", "package_url": "https://pypi.org/project/anna/", "platform": "", "project_url": "https://pypi.org/project/anna/", "project_urls": {"Homepage": "https://gitlab.com/Dominik1123/Anna"}, "release_url": "https://pypi.org/project/anna/0.3.5/", "requires_dist": ["docutils", "numpy", "scipy", "six"], "requires_python": "", "summary": "A Neat configuratioN Auxiliary", "version": "0.3.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Anna helps you configure your application by building the bridge between the components of\nyour application and external configuration sources. It allows you to keep your code short and\nflexible yet explicit when it comes to configuration - the necessary tinkering is performed by\nthe framework.</p>\n<p>Anna contains lots of \u201cin-place\u201d documentation aka doc strings so make sure you check out those\ntoo (\u201c<tt>help</tt> yourself\u201d)!</p>\n<div id=\"seconds-to-anna\">\n<h2>80 seconds to Anna</h2>\n<p>Anna is all about <em>parameters</em> and <em>configuration sources</em>. You declare parameters as part of\nyour application (on a class for example) and specify their values in a configuration source.\nAll you\u2019re left to do with then is to point your application to the configuration source and\nlet the framework do its job.</p>\n<div id=\"an-example-is-worth-a-thousand-words\">\n<h3>An example is worth a thousand words</h3>\n<p>Say we want to build an application that deals with vehicles. I\u2019m into cars so the first thing\nI\u2019ll do is make sure we get one of those:</p>\n<pre>&gt;&gt;&gt; class Car:\n...     def __init__(self, brand, model):\n...         self._brand = brand\n...         self._model = model\n&gt;&gt;&gt;\n&gt;&gt;&gt; your_car = Car('Your favorite brand', 'The hottest model')\n</pre>\n<p>Great! We let the user specify the car\u2019s <tt>brand</tt> and <tt>model</tt> and return him a brand new car!</p>\n<p>Now we\u2019re using <tt>anna</tt> for declaring the parameters:</p>\n<pre>&gt;&gt;&gt; from anna import Configurable, parametrize, String, JSONAdaptor\n&gt;&gt;&gt;\n&gt;&gt;&gt; @parametrize(\n...     String('Brand'),\n...     String('Model')\n... )\n... class Car(Configurable):\n...     def __init__(self, config):\n...         super(Car, self).__init__(config)\n&gt;&gt;&gt;\n&gt;&gt;&gt; your_car = Car(JSONAdaptor('the_file_where_you_specified_your_favorite_car.json'))\n</pre>\n<p>The corresponding json file would look like this:</p>\n<pre>{\n    \"Car/Parameters/Brand\": \"Your favorite brand\",\n    \"Car/Parameters/Model\": \"The hottest model\",\n}\n</pre>\n<p>It\u2019s a bit more to type but this comes at a few advantages:</p>\n<ul>\n<li>We can specify the type of the parameter and <tt>anna</tt> will handle the necessary conversions\nfor us; <tt>anna</tt> ships with plenty of parameter types so there\u2019s much more to it than just\nstrings!</li>\n<li>If we change your mind later on and want to add another parameter, say for example the color\nof the car, it\u2019s as easy as declaring a new parameter <tt><span class=\"pre\">String('Color')</span></tt> and setting it as\na class attribute; all the user needs to do is to specify the corresponding value in\nthe configuration source. Note that there\u2019s no need to change any interfaces/signatures or\nother intermediate components which carry the user input to the receiving class; all it expects\nis a configuration adaptor which points to the configuration source.</li>\n<li>The configuration source can host parameters for more than only one component, meaning again\nthat we don\u2019t need to modify intermediate parts when adding new components to our application;\nall we need to do is provide the configuration adaptor.</li>\n</ul>\n</div>\n</div>\n<div id=\"five-minutes-hands-on\">\n<h2>Five minutes hands-on</h2>\n<p>The 80 seconds intro piqued your curiosity? Great! So let\u2019s move on! For the following\nconsiderations we\u2019ll pick up the example from above and elaborate on it more thoroughly.</p>\n<div id=\"let-s-start-with-a-quick-q-a-session\">\n<h3>Let\u2019s start with a quick Q/A session</h3>\n<p><strong>So what happened when using the decorator ``parametrize``?</strong> It received a number of parameters\nas arguments which it set as attributes on the receiving class. Field names are deduced from\nthe parameters names applying CamelCase to _snake_case_with_leading_underscore conversion.\nThat is <tt><span class=\"pre\">String('Brand')</span></tt> is set as <tt>Car._brand</tt>.</p>\n<p><strong>All right, but how did the instance receive its values then?</strong> Note that <tt>Car</tt> inherits from\n<tt>Configurable</tt> and <tt>Configurable.__init__</tt> is where the actual instance configuration happens.\nWe provided it a configuration adaptor which points to the configuration source (in this case\na local file) and the specific values were extracted from there. Values are set on the instance\nusing the parameter\u2019s field name, that is <tt><span class=\"pre\">String('Brand')</span></tt> will make an instance receive\nthe corresponding value at <tt>your_car._brand</tt> (<tt>Car._brand</tt> is still the parameter instance).</p>\n<p><strong>Okay, but how did the framework know where to find the values in the configuration source?</strong>\nWell there\u2019s a bit more going on during the call to <tt>parametrize</tt> than is written above.\nIn addition to setting the parameters on the class it also deduces a configuration path for\neach parameter which specifies where to find the corresponding value in the source. The path\nconsists of a base path and the parameter\u2019s name: \u201c&lt;base-path&gt;/&lt;name&gt;\u201d (slashes are used\nto delimit path elements). <tt>parametrize</tt> tries to get this base path from the receiving class\nlooking up the attribute <tt>CONFIG_PATH</tt>. If it has no such attribute or if it\u2019s <tt>None</tt> then\nthe base path defaults to \u201c&lt;class-name&gt;/Parameters\u201d. However in our example - although we didn\u2019t\nset the config path explicitly - it was already there because <tt>Configurable</tt> uses a custom\nmetaclass which adds the class attribute <tt>CONFIG_PATH</tt> if it\u2019s missing or <tt>None</tt> using\nthe same default as above. So if you want to specify a custom path within the source you can do so\nby specifying the class attribute <tt>CONFIG_PATH</tt>.</p>\n<p><strong>_snake_case_with_leading_underscore, not too bad but can I choose custom field names for the parameters too?</strong>\nYes, besides providing a number of parameters as arguments to <tt>parametrize</tt> we have the option\nto supply it a number of keyword arguments as well which represent field_name / parameter pairs;\nthe key is the field name and the value is the parameter: <tt><span class=\"pre\">brand_name=String('Brand')</span></tt>.</p>\n<p><strong>Now that we declared all those parameters how does the user know what to specify?</strong>\n<tt>anna</tt> provides a decorator <tt>document_parameters</tt> which will add all declared parameters to\nthe component\u2019s doc string under a new section. Another option for the user is to retrieve\nthe declared parameters via <tt>get_parameters</tt> (which is inherited from <tt>Configurable</tt>) and\nprint their string representations which contain comprehensive information:</p>\n<pre>&gt;&gt;&gt; for parameter in Car.get_parameters():\n...     print(parameter)\n</pre>\n<p>Of course documenting the parameters manually is also an option.</p>\n</div>\n<div id=\"alright-so-let-s-get-to-the-code\">\n<h3>Alright so let\u2019s get to the code</h3>\n<pre>&gt;&gt;&gt; from anna import Configurable, parametrize, String, JSONAdaptor\n&gt;&gt;&gt;\n&gt;&gt;&gt; @parametrize(\n...     String('Model'),\n...     brand_name=String('Brand')\n... )\n... class Car(Configurable):\n...     CONFIG_PATH = 'Car'\n...     def __init__(self, config):\n...         super(Car, self).__init__(config)\n</pre>\n<p>Let\u2019s first see what information we can get about the parameters:</p>\n<pre>&gt;&gt;&gt; for parameter in Car.get_parameters():\n...     print(parameter)\n...\n{\n    \"optional\": false,\n    \"type\": \"StringParameter\",\n    \"name\": \"Model\",\n    \"path\": \"Car\"\n}\n{\n    \"optional\": false,\n    \"type\": \"StringParameter\",\n    \"name\": \"Brand\",\n    \"path\": \"Car\"\n}\n</pre>\n<p>Note that it prints <tt>\"StringParameter\"</tt> because that\u2019s the parameter\u2019s actual class,\n<tt>String</tt> is just a shorthand. Let\u2019s see what we can get from the doc string:</p>\n<pre>&gt;&gt;&gt; print(Car.__doc__)\nNone\n&gt;&gt;&gt; from anna import document_parameters\n&gt;&gt;&gt; Car = document_parameters(Car)\n&gt;&gt;&gt; print(Car.__doc__)\n\n    Declared parameters\n    -------------------\n    (configuration path: Car)\n\n    Brand : String\n    Model : String\n</pre>\n<p>Now that we know what we need to specify let\u2019s get us a car! The <tt>JSONAdaptor</tt> can also be\ninitialized with a <tt>dict</tt> as root element, so we\u2019re just creating our configuration on the fly:</p>\n<pre>&gt;&gt;&gt; back_to_the_future = JSONAdaptor(root={\n...     'Car/Brand': 'DeLorean',\n...     'Car/Model': 'DMC-12',\n... })\n&gt;&gt;&gt; doc_browns_car = Car(back_to_the_future)\n&gt;&gt;&gt; doc_browns_car.brand_name  # Access via our custom field name.\n'DeLorean'\n&gt;&gt;&gt; doc_browns_car._model  # Access via the automatically chosen field name.\n'DMC-12'\n</pre>\n<p>Creating another car is as easy as providing another configuration source:</p>\n<pre>&gt;&gt;&gt; mr_bonds_car = Car(JSONAdaptor(root={\n...     'Car/Brand': 'Aston Martin',\n...     'Car/Model': 'DB5',\n... }))\n</pre>\n<p>Let\u2019s assume we want more information about the brand than just its name. We have nicely stored\nall information in a database:</p>\n<pre>&gt;&gt;&gt; database = {\n... 'DeLorean': {\n...     'name': 'DeLorean',\n...     'founded in': 1975,\n...     'founded by': 'John DeLorean',\n... },\n... 'Aston Martin': {\n...     'name': 'Aston Martin',\n...     'founded in': 1913,\n...     'founded by': 'Lionel Martin, Robert Bamford',\n... }}\n</pre>\n<p>We also have a database access function which we can use to load stuff from the database:</p>\n<pre>&gt;&gt;&gt; def load_from_database(key):\n...     return database[key]\n</pre>\n<p>To load this database information instead of just the brand\u2019s name we only have to modify\nthe <tt>Car</tt> class to declare a new parameter: <tt>ActionParameter</tt> (or <tt>Action</tt>).\nAn <tt>ActionParameter</tt> wraps another parameter and let\u2019s us specify an action which is applied to\nthe parameter\u2019s value when it\u2019s loaded. For our case that is:</p>\n<pre>&gt;&gt;&gt; from anna import ActionParameter\n&gt;&gt;&gt; Car.brand = ActionParameter(String('Brand'), load_from_database)\n&gt;&gt;&gt; doc_browns_car = Car(back_to_the_future)\n&gt;&gt;&gt; doc_browns_car.brand\n{'founded by': 'John DeLorean', 'name': 'DeLorean', 'founded in': 1975}\n&gt;&gt;&gt; doc_browns_car.brand_name\n'DeLorean'\n</pre>\n<p>Note that we didn\u2019t need to provide a new configuration source as the new <tt>brand</tt> parameter is\nbased on the brand name which is already present.</p>\n<p>Say we also want to obtain the year in which the model was first produced and we have a function\nfor exactly that purpose however it requires the brand name and model name as one string:</p>\n<pre>&gt;&gt;&gt; def first_produced_in(brand_and_model):\n...     return {'DeLorean DMC-12': 1981, 'Aston Martin DB5': 1963}[brand_and_model]\n</pre>\n<p>That\u2019s not a problem because an <tt>ActionParameter</tt> type lets us combine multiple parameters:</p>\n<pre>&gt;&gt;&gt; Car.first_produced_in = ActionParameter(\n... String('Brand'),\n... lambda brand, model: first_produced_in('%s %s' % (brand, model)),\n... depends_on=('Model',))\n</pre>\n<p>Other existing parameters, specified either by name of by reference via the keyword argument\n<tt>depends_on</tt>, are passed as additional arguments to the given action.</p>\n<p>In the above example we declared parameters on a class using <tt>parametrize</tt> but you could as well\nuse parameter instances independently and load their values via <tt>load_from_configuration</tt> which\nexpects a configuration adaptor as well as a configuration path which localizes the parameter\u2019s\nvalue. You also have the option to provide a specification directly via\n<tt>load_from_representation</tt>. This functions expects the specification as a unicode string and\nadditional (meta) data as a <tt>dict</tt> (a unit for <tt>PhysicalQuantities</tt> for example).</p>\n<p>This introduction was meant to demonstrate the basic principles but there\u2019s much more to <tt>anna</tt>\n(especially when it comes to parameter types)! So make sure to check out also the other parts\nof the docs!</p>\n</div>\n</div>\n<div id=\"parameter-types\">\n<h2>Parameter types</h2>\n<p>A great variety of parameter types are here at your disposal:</p>\n<ul>\n<li><tt>Bool</tt></li>\n<li><tt>Integer</tt></li>\n<li><tt>String</tt></li>\n<li><tt>Number</tt></li>\n<li><tt>Vector</tt></li>\n<li><tt>Duplet</tt></li>\n<li><tt>Triplet</tt></li>\n<li><tt>Tuple</tt></li>\n<li><tt>PhysicalQuantity</tt></li>\n<li><tt>Action</tt></li>\n<li><tt>Choice</tt></li>\n<li><tt>Group</tt></li>\n<li><tt>ComplementaryGroup</tt></li>\n<li><tt>SubstitutionGroup</tt></li>\n</ul>\n</div>\n<div id=\"configuration-adaptors\">\n<h2>Configuration adaptors</h2>\n<p>Two adaptor types are provided:</p>\n<ul>\n<li><tt>XMLAdaptor</tt> for connecting to xml files.</li>\n<li><tt>JSONAdaptor</tt> for connecting to json files (following some additional conventions).</li>\n</ul>\n</div>\n<div id=\"generating-configuration-files\">\n<h2>Generating configuration files</h2>\n<p>Configuration files can of course be created manually however <tt>anna</tt> also ships with a <tt>PyQt</tt>\nfrontend that can be integrated into custom applications. The frontend provides input forms for\nall parameter types as well as for whole parametrized classes together with convenience methods for\nturning the forms\u2019 values into configuration adaptor instances which in turn can be dumped to\nfiles. Both PyQt4 and PyQt5 are supported. See <tt>anna.frontends.qt</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 4516761, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a2e768ed109e09c9f5e0e61eda7defe3", "sha256": "29903b8210b1e9655e02d9c6b1d261edd7742ffffe9f9eb53839088fe1f4678d"}, "downloads": -1, "filename": "anna-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a2e768ed109e09c9f5e0e61eda7defe3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 51434, "upload_time": "2017-04-03T14:44:09", "upload_time_iso_8601": "2017-04-03T14:44:09.632121Z", "url": "https://files.pythonhosted.org/packages/90/bb/03c2e1db0cd08e511e505da690f6c4328379076fb9322cd9e47ef8483112/anna-0.1-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "27f2e4b7abcdc2da436cc1222c01c5ba", "sha256": "577771b81ecbd3527347ea3cf14a756a5acc947ed1e45a45ac5f77fcdbd28bbf"}, "downloads": -1, "filename": "anna-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "27f2e4b7abcdc2da436cc1222c01c5ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 65108, "upload_time": "2017-04-03T15:47:17", "upload_time_iso_8601": "2017-04-03T15:47:17.814308Z", "url": "https://files.pythonhosted.org/packages/46/49/428ecd08c59ebabdb3d46717a20a781575a2d02753fdaf8fb8555c69846f/anna-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "539b3611eceb690671c7bedbe3efcd2a", "sha256": "329f70445d17bd14e91dd7a851f95ec02c5d4dcf987e3a42f8c3d77f19528a55"}, "downloads": -1, "filename": "anna-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "539b3611eceb690671c7bedbe3efcd2a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78337, "upload_time": "2017-04-26T10:27:33", "upload_time_iso_8601": "2017-04-26T10:27:33.731975Z", "url": "https://files.pythonhosted.org/packages/9f/f6/ebd84d94dc7bb092caddc72cf7550be17a737992cddd9bca1592751e8fb7/anna-0.2-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c502ce35d60f83aed03036f3daeb0428", "sha256": "fbb734567c75772485b53d8b682b97b036dde82943c91da959a4b0309e719f21"}, "downloads": -1, "filename": "anna-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c502ce35d60f83aed03036f3daeb0428", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78381, "upload_time": "2017-04-27T16:09:22", "upload_time_iso_8601": "2017-04-27T16:09:22.360713Z", "url": "https://files.pythonhosted.org/packages/38/6e/ae5deb95845aaa2320af498a86f30dcefb31b552592f5b2caa88fc9a978b/anna-0.2.1-py2.py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "a406c26f6bf3131e4a5b84911ff1e7dd", "sha256": "45684f17c58b8838b40f34e58a9e740ab197b57ff57abfe33c85d84a12096597"}, "downloads": -1, "filename": "anna-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a406c26f6bf3131e4a5b84911ff1e7dd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78392, "upload_time": "2017-04-27T16:14:08", "upload_time_iso_8601": "2017-04-27T16:14:08.258436Z", "url": "https://files.pythonhosted.org/packages/83/b5/b28b3f4f315511f19ef1a2415e7beaad7d04f72f3d12d9d0ef288477df11/anna-0.2.2-py2.py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "49d072d78ba433d9d100b6c6d5836de6", "sha256": "1c3f9c99139346577b3a6147d4bf1569e753f444189e4faa837dbf376f154240"}, "downloads": -1, "filename": "anna-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49d072d78ba433d9d100b6c6d5836de6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 79998, "upload_time": "2017-05-20T19:29:04", "upload_time_iso_8601": "2017-05-20T19:29:04.111843Z", "url": "https://files.pythonhosted.org/packages/d0/a2/3dcd6f330883cdcb4344ca7391c55f19d42dfe5cbc1aca357e9670d803ed/anna-0.3-py2.py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5a4ad1b6d7593b5f7fc2974b54aeb5fe", "sha256": "c8f4e0b996049b9771c552b847c77c1012c0251f06be2108a63ba6425cdec297"}, "downloads": -1, "filename": "anna-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5a4ad1b6d7593b5f7fc2974b54aeb5fe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 80202, "upload_time": "2017-08-03T22:37:36", "upload_time_iso_8601": "2017-08-03T22:37:36.410202Z", "url": "https://files.pythonhosted.org/packages/40/cb/b98de2073d9fb87932b3f5f1ca321683d43184eb0d52f3083c30a4e24729/anna-0.3.1-py2.py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "4bf2712a60ba921ea7e5b147638dd921", "sha256": "c83f236ab3e146f42a221ce401c8190f5e1c3583ad41eefe9d981614ab76da35"}, "downloads": -1, "filename": "anna-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4bf2712a60ba921ea7e5b147638dd921", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 80152, "upload_time": "2018-06-14T23:04:20", "upload_time_iso_8601": "2018-06-14T23:04:20.563620Z", "url": "https://files.pythonhosted.org/packages/49/2c/79c9e1351a5f9c4d99306c68429a08bc6bd526f4ee30d72126a34d47ebb8/anna-0.3.2-py2.py3-none-any.whl", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "4072f3525ca8ac26aa09eba0063b6b78", "sha256": "57d9ae97d83963fa30a88797df0e2662c72cfe38e616602290ad119ece2918a8"}, "downloads": -1, "filename": "anna-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4072f3525ca8ac26aa09eba0063b6b78", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 80163, "upload_time": "2018-07-20T19:38:18", "upload_time_iso_8601": "2018-07-20T19:38:18.761414Z", "url": "https://files.pythonhosted.org/packages/17/62/8a78bc5e9b649c96bcdfa27755aa43ba52d1fd3e186c8f21f57890d4f339/anna-0.3.3-py2.py3-none-any.whl", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "9770237db079d394ecac2df98b7e5044", "sha256": "5c297250c016f2ed5d036cb2e7e9ba72f2a4f9c454292f1abd7d4baf040838c1"}, "downloads": -1, "filename": "anna-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9770237db079d394ecac2df98b7e5044", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 80204, "upload_time": "2018-11-22T11:38:30", "upload_time_iso_8601": "2018-11-22T11:38:30.960238Z", "url": "https://files.pythonhosted.org/packages/88/ee/304377c725d9310f3e29810b130498a137a5fc938dadaca62441d224b5bd/anna-0.3.4-py2.py3-none-any.whl", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "51e1687842274bfe569cc4244ca6d045", "sha256": "76c86cf722f56b4fa7591ed93c374ee8e1f7ff6f16a239e80ff503edb41fcabe"}, "downloads": -1, "filename": "anna-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51e1687842274bfe569cc4244ca6d045", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 80208, "upload_time": "2018-11-22T11:55:41", "upload_time_iso_8601": "2018-11-22T11:55:41.089287Z", "url": "https://files.pythonhosted.org/packages/d3/e2/b3dd831cc5ff4276543e7730f1068903898d8fe1a557874db8aaa9187645/anna-0.3.5-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51e1687842274bfe569cc4244ca6d045", "sha256": "76c86cf722f56b4fa7591ed93c374ee8e1f7ff6f16a239e80ff503edb41fcabe"}, "downloads": -1, "filename": "anna-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51e1687842274bfe569cc4244ca6d045", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 80208, "upload_time": "2018-11-22T11:55:41", "upload_time_iso_8601": "2018-11-22T11:55:41.089287Z", "url": "https://files.pythonhosted.org/packages/d3/e2/b3dd831cc5ff4276543e7730f1068903898d8fe1a557874db8aaa9187645/anna-0.3.5-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:18:09 2020"}