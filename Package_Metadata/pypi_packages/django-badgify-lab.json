{"info": {"author": "Gilles Fabio", "author_email": "gilles.fabio@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Utilities"], "description": "django-badgify\n==============\n\nThis Django application will help you to create your own badge system on your website.\n\nIt has been used on `Ulule <http://www.ulule.com>`_ to create our own `badge mechanism <http://www.ulule.com/badges/>`_.\n\n.. image:: https://secure.travis-ci.org/ulule/django-badgify.png?branch=master\n    :alt: Build Status\n    :target: http://travis-ci.org/ulule/django-badgify\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install django-badgify\n\nUsage\n-----\n\nAdd ``badgify`` to your ``INSTALLED_APPS`` in ``settings.py``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        # ...\n        'badgify',\n    )\n\nSynchronize the database:\n\n.. code-block:: bash\n\n    $ python manage.py migrate badgify\n\nCreate a ``badgify_recipes.py`` file in your Django application:\n\n.. code-block:: bash\n\n    $ cd path/to/your/django/app\n    $ touch badgify_recipes.py\n\nOpen this file and import `badgify.recipe.BaseRecipe` class and `badgify` module:\n\n.. code-block:: python\n\n    from badgify.recipe import BaseRecipe\n    import badgify\n\nCreate and register your recipe classes:\n\n.. code-block:: python\n\n    class PythonLoverRecipe(BaseRecipe):\n        pass\n\n\n    class JSLoverRecipe(BaseRecipe):\n        pass\n\n\n    # Per class\n    badgify.register(PythonLoverRecipe)\n    badgify.register(JSLoverRecipe)\n\n    # All at once in a list\n    badgify.register([PythonLoverRecipe, JSLoverRecipe])\n\nA recipe class must implement:\n\n* ``name`` class attribute\n    The badge name (humanized).\n\n* ``image`` property\n    The badge image/logo as a file object.\n\nA recipe class may implement:\n\n* ``slug`` class attribute\n    The badge slug (used internally and in URLs).\n    If not provided, it will be auto-generated based on the badge name.\n\n* ``description`` class attribute\n    The badge description (short).\n    It not provided, value will be blank.\n\n* ``user_ids`` property\n    ``QuerySet`` returning User IDs likely to be awarded. You must return a\n    ``QuerySet`` and not just a Python list or tuple. You can use\n    ``values_list('id', flat=True)``.\n\n* ``db_read`` class attribute\n    The database alias on which to perform read queries.\n    Defaults to ``django.db.DEFAULT_DB_ALIAS``.\n\n* ``batch_size`` class attribute\n    How many ``Award`` objects to create at once.\n    Defaults to ``BADGIFY_BATCH_SIZE`` (``500``).\n\nExample:\n\n.. code-block:: python\n\n    from django.contrib.staticfiles.storage import staticfiles_storage\n\n    from badgify.recipe import BaseRecipe\n    import badgify\n\n    from .models import MyCustomUser\n\n\n    class PythonLoverRecipe(BaseRecipe):\n        \"\"\"\n        People loving Python.\n        \"\"\"\n        name = 'Python Lover'\n        slug = 'python-lover'\n        description = 'People loving Python programming language'\n\n        @property\n        def image(self):\n            return staticfiles_storage.open('python-lover.png')\n\n        @property\n        def user_ids(self):\n            return (MyCustomUser.objects.filter(love_python=True)\n                                        .values_list('id', flat=True))\n\n\n    class JSLoverRecipe(BaseRecipe):\n        \"\"\"\n        People loving JS.\n        \"\"\"\n        name = 'JS Lover'\n        slug = 'js-lover'\n        description = 'People loving JS programming language'\n\n        @property\n        def image(self):\n            return staticfiles_storage.open('js-lover.png')\n\n        @property\n        def user_ids(self):\n            return (MyCustomUser.objects.filter(love_js=True)\n                                        .values_list('id', flat=True))\n\n\n    class JavaLoverRecipe(BaseRecipe):\n        \"\"\"\n        People loving Java.\n        \"\"\"\n        name = 'Java Lover'\n        slug = 'java-lover'\n        description = 'People loving Java programming language'\n\n        @property\n        def image(self):\n            return staticfiles_storage.open('java-lover.png')\n\n\n    badgify.register([\n        PythonLoverRecipe,\n        JSLoverRecipe,\n        JavaLoverRecipe,\n    ])\n\nOnce you have implemented and registered your recipe classes, you can invoke\navailable commands bellow:\n\n.. code-block:: bash\n\n    # Create badges from recipes\n    $ python manage.py badgify_sync badges\n\n    # Update badges from recipes\n    $ python manage.py badgify_sync badges --update\n\n    # Create awards\n    $ python manage.py badgify_sync awards\n\n    # Create awards bypassing signals (improve performances)\n    $ python manage.py badgify_sync awards --disable-signals\n\n    # Only create awards for \"python\" badge\n    $ python manage.py badgify_sync awards --badges python\n\n    # Only create awards for \"python\" and \"go\" badges\n    $ python manage.py badgify_sync awards --badges \"python go\"\n\n    # Create awards for all badges, except \"php\"\n    $ python manage.py badgify_sync awards --exclude-badges php\n\n    # Create awards for all badges, except \"php\" and \"java\"\n    $ python manage.py badgify_sync awards --exclude-badges \"php java\"\n\n    # Denormalize Badge.users.count() into Badge.users_count field\n    $ python manage.py badgify_sync counts\n\n    # Only denormalize counts for \"python\" badge\n    $ python manage.py badgify_sync counts --badges python\n\n    # Denormalize counts for all badges, except \"php\"\n    $ python manage.py badgify_sync counts --exclude-badges php\n\n    # Denormalize counts for all badges, except \"php\" and \"java\"\n    $ python manage.py badgify_sync counts --exclude-badges \"php java\"\n\n    # Typical workflow for best performances\n    $ python manage.py badgify_sync badges\n    $ python manage.py badgify_sync awards --disable-signals\n    $ python manage.py badgify_sync counts\n\n    # WARNING: if you delete awards to start again with a fresh table\n    # don't forget to update Badge.users_count field. Or use this command:\n    $ python manage.py badgify_reset\n\n    # Typical workflow for best performances if you want to recompute awards\n    $ python manage.py badgify_reset\n    $ python manage.py badgify_sync awards --disable-signals\n    $ python manage.py badgify_sync counts\n\nTemplatetags\n------------\n\nbadgify_badges\n..............\n\nTakes two optional arguments:\n\n* ``user``: a ``User`` object\n* ``username``: a ``User`` username\n\nWithout any argument, displays all badges. Otherwise, badges awarded by the given user.\n\n.. code-block:: html+django\n\n    {% load badgify_tags %}\n\n    {% badgify_badges as badges %}\n    {% badgify_badges username=\"johndoe\" as badges %}\n    {% badgify_badges user=user as badges %}\n\n    {% for badge in badges %}\n        {{ badge.name }}\n    {% endfor %}\n\nViews\n-----\n\n**django-badgify** provides two views:\n\n* ``badgify.views.BadgifyListView``: displays all badges as paginated list\n* ``badgify.views.BadgifyDetailView``: displays awarded users as paginated list for a given badge\n\nThis application does not include templates. It lets you implement\ntemplates as you like (see example project).\n\nTo include these two views, include the provided ``badgify.urls``:\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    from django.conf.urls import include, url\n\n    urlpatterns = [\n        # Your other includes\n        url(r'^badges/', include('badgify.urls')),\n    ]\n\nSee example project for more details.\n\nCustom Models\n-------------\n\n**django-badgify** lets you define your own model classes for ``Badge`` and ``Award``\nmodels. That can be pretty useful for i18n stuff\n(example: `django-transmetta <https://github.com/Yaco-Sistemas/django-transmeta/>`_ support),\nadding custom fields, methods or properties.\n\nYour models must inherit from ``badgify.models.base`` model classes:\n\n.. code-block:: python\n\n    # yourapp.models\n\n    from badgify.models import base\n\n\n    class Badge(base.Badge):\n        # you own fields / logic here\n        class Meta(base.Badge.Meta):\n            abstract = False\n\n\n    class Award(base.Award):\n        # you own fields / logic here\n        class Meta(base.Award.Meta):\n            abstract = False\n\n\nThen tell the application to use them in place of default ones in your ``settings.py`` module:\n\n.. code-block:: python\n\n    # yourapp.settings\n\n    BADGIFY_BADGE_MODEL = 'yourapp.models.Badge'\n    BADGIFY_AWARD_MODEL = 'yourapp.models.Award'\n\nSettings\n--------\n\nYou can altere the application behavior by defining settings in your ``settings.py``\nmodule.\n\nAll application settings are prefixed with ``BADGIFY_``.\n\n``BADGIFY_BADGE_IMAGE_UPLOAD_ROOT``\n...................................\n\nThe root path for ``Badge``  model ``ImageField``.\n\n``BADGIFY_BADGE_IMAGE_UPLOAD_URL``\n..................................\n\nThe URL ``Badge``  model ``ImageField``.\n\n``BADGIFY_BADGE_IMAGE_UPLOAD_STORAGE``\n......................................\n\nYour own ``django.core.files.storage`` storage instance.\n\n``BADGIFY_BADGE_LIST_VIEW_PAGINATE_BY``\n.......................................\n\nNumber of badges to display on the badge list page.\n\n``BADGIFY_BADGE_DETAIL_VIEW_PAGINATE_BY``\n.........................................\n\nNumber of awarded users to display on the badge detail page.\n\n``BADGIFY_BADGE_MODEL``\n.......................\n\nYour own concrete ``Badge`` model class as module path.\n\nExample: ``yourapp.models.Badge``.\n\n``BADGIFY_AWARD_MODEL``\n.......................\n\nYour own concrete ``Award`` model class as module path.\n\nExample: ``yourapp.models.Award``.\n\n``BADGIFY_BATCH_SIZE``\n......................\n\nMaximum number of ``Award`` objects to create at once.\n\nDefaults to ``500``.\n\nContribute\n----------\n\n.. code-block:: bash\n\n    # Don't have pip?\n    $ sudo easy_install pip\n\n    # Don't already have virtualenv?\n    $ sudo pip install virtualenv\n\n    # Clone and install dependencies\n    $ git clone https://github.com/ulule/django-badgify.git\n    $ cd django-badgify\n    $ make install\n\n    # Launch tests\n    $ make test\n\n    # Launch example project\n    $ make create_fixtures\n    $ make serve\n\nCompatibility\n-------------\n\n- python 2.7: Django 1.9, 1.10\n- Python 3.4: Django 1.9, 1.10\n- Python 3.5: Django 1.9, 1.10\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ulule/django-badgify", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-badgify-lab", "package_url": "https://pypi.org/project/django-badgify-lab/", "platform": "", "project_url": "https://pypi.org/project/django-badgify-lab/", "project_urls": {"Homepage": "http://github.com/ulule/django-badgify"}, "release_url": "https://pypi.org/project/django-badgify-lab/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "A reusable application to create your own badge engine using Django", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This Django application will help you to create your own badge system on your website.</p>\n<p>It has been used on <a href=\"http://www.ulule.com\" rel=\"nofollow\">Ulule</a> to create our own <a href=\"http://www.ulule.com/badges/\" rel=\"nofollow\">badge mechanism</a>.</p>\n<a href=\"http://travis-ci.org/ulule/django-badgify\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a95026f71e972fce644080066ff3605c5833bce3/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f756c756c652f646a616e676f2d626164676966792e706e673f6272616e63683d6d6173746572\"></a>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install django-badgify\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Add <tt>badgify</tt> to your <tt>INSTALLED_APPS</tt> in <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'badgify'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Synchronize the database:</p>\n<pre>$ python manage.py migrate badgify\n</pre>\n<p>Create a <tt>badgify_recipes.py</tt> file in your Django application:</p>\n<pre>$ <span class=\"nb\">cd</span> path/to/your/django/app\n$ touch badgify_recipes.py\n</pre>\n<p>Open this file and import <cite>badgify.recipe.BaseRecipe</cite> class and <cite>badgify</cite> module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">badgify.recipe</span> <span class=\"kn\">import</span> <span class=\"n\">BaseRecipe</span>\n<span class=\"kn\">import</span> <span class=\"nn\">badgify</span>\n</pre>\n<p>Create and register your recipe classes:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PythonLoverRecipe</span><span class=\"p\">(</span><span class=\"n\">BaseRecipe</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JSLoverRecipe</span><span class=\"p\">(</span><span class=\"n\">BaseRecipe</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"c1\"># Per class</span>\n<span class=\"n\">badgify</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">PythonLoverRecipe</span><span class=\"p\">)</span>\n<span class=\"n\">badgify</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">JSLoverRecipe</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># All at once in a list</span>\n<span class=\"n\">badgify</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">([</span><span class=\"n\">PythonLoverRecipe</span><span class=\"p\">,</span> <span class=\"n\">JSLoverRecipe</span><span class=\"p\">])</span>\n</pre>\n<p>A recipe class must implement:</p>\n<ul>\n<li><dl>\n<dt><tt>name</tt> class attribute</dt>\n<dd>The badge name (humanized).</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>image</tt> property</dt>\n<dd>The badge image/logo as a file object.</dd>\n</dl>\n</li>\n</ul>\n<p>A recipe class may implement:</p>\n<ul>\n<li><dl>\n<dt><tt>slug</tt> class attribute</dt>\n<dd>The badge slug (used internally and in URLs).\nIf not provided, it will be auto-generated based on the badge name.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>description</tt> class attribute</dt>\n<dd>The badge description (short).\nIt not provided, value will be blank.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>user_ids</tt> property</dt>\n<dd><tt>QuerySet</tt> returning User IDs likely to be awarded. You must return a\n<tt>QuerySet</tt> and not just a Python list or tuple. You can use\n<tt><span class=\"pre\">values_list('id',</span> flat=True)</tt>.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>db_read</tt> class attribute</dt>\n<dd>The database alias on which to perform read queries.\nDefaults to <tt>django.db.DEFAULT_DB_ALIAS</tt>.</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>batch_size</tt> class attribute</dt>\n<dd>How many <tt>Award</tt> objects to create at once.\nDefaults to <tt>BADGIFY_BATCH_SIZE</tt> (<tt>500</tt>).</dd>\n</dl>\n</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.staticfiles.storage</span> <span class=\"kn\">import</span> <span class=\"n\">staticfiles_storage</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">badgify.recipe</span> <span class=\"kn\">import</span> <span class=\"n\">BaseRecipe</span>\n<span class=\"kn\">import</span> <span class=\"nn\">badgify</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">MyCustomUser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PythonLoverRecipe</span><span class=\"p\">(</span><span class=\"n\">BaseRecipe</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    People loving Python.\n    \"\"\"</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Python Lover'</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"s1\">'python-lover'</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'People loving Python programming language'</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">staticfiles_storage</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'python-lover.png'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">user_ids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">MyCustomUser</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">love_python</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                                    <span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JSLoverRecipe</span><span class=\"p\">(</span><span class=\"n\">BaseRecipe</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    People loving JS.\n    \"\"\"</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'JS Lover'</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"s1\">'js-lover'</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'People loving JS programming language'</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">staticfiles_storage</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'js-lover.png'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">user_ids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">MyCustomUser</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">love_js</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                                    <span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JavaLoverRecipe</span><span class=\"p\">(</span><span class=\"n\">BaseRecipe</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    People loving Java.\n    \"\"\"</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Java Lover'</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"s1\">'java-lover'</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'People loving Java programming language'</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">staticfiles_storage</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'java-lover.png'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">badgify</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">([</span>\n    <span class=\"n\">PythonLoverRecipe</span><span class=\"p\">,</span>\n    <span class=\"n\">JSLoverRecipe</span><span class=\"p\">,</span>\n    <span class=\"n\">JavaLoverRecipe</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n</pre>\n<p>Once you have implemented and registered your recipe classes, you can invoke\navailable commands bellow:</p>\n<pre><span class=\"c1\"># Create badges from recipes\n</span>$ python manage.py badgify_sync badges\n\n<span class=\"c1\"># Update badges from recipes\n</span>$ python manage.py badgify_sync badges --update\n\n<span class=\"c1\"># Create awards\n</span>$ python manage.py badgify_sync awards\n\n<span class=\"c1\"># Create awards bypassing signals (improve performances)\n</span>$ python manage.py badgify_sync awards --disable-signals\n\n<span class=\"c1\"># Only create awards for \"python\" badge\n</span>$ python manage.py badgify_sync awards --badges python\n\n<span class=\"c1\"># Only create awards for \"python\" and \"go\" badges\n</span>$ python manage.py badgify_sync awards --badges <span class=\"s2\">\"python go\"</span>\n\n<span class=\"c1\"># Create awards for all badges, except \"php\"\n</span>$ python manage.py badgify_sync awards --exclude-badges php\n\n<span class=\"c1\"># Create awards for all badges, except \"php\" and \"java\"\n</span>$ python manage.py badgify_sync awards --exclude-badges <span class=\"s2\">\"php java\"</span>\n\n<span class=\"c1\"># Denormalize Badge.users.count() into Badge.users_count field\n</span>$ python manage.py badgify_sync counts\n\n<span class=\"c1\"># Only denormalize counts for \"python\" badge\n</span>$ python manage.py badgify_sync counts --badges python\n\n<span class=\"c1\"># Denormalize counts for all badges, except \"php\"\n</span>$ python manage.py badgify_sync counts --exclude-badges php\n\n<span class=\"c1\"># Denormalize counts for all badges, except \"php\" and \"java\"\n</span>$ python manage.py badgify_sync counts --exclude-badges <span class=\"s2\">\"php java\"</span>\n\n<span class=\"c1\"># Typical workflow for best performances\n</span>$ python manage.py badgify_sync badges\n$ python manage.py badgify_sync awards --disable-signals\n$ python manage.py badgify_sync counts\n\n<span class=\"c1\"># WARNING: if you delete awards to start again with a fresh table\n# don't forget to update Badge.users_count field. Or use this command:\n</span>$ python manage.py badgify_reset\n\n<span class=\"c1\"># Typical workflow for best performances if you want to recompute awards\n</span>$ python manage.py badgify_reset\n$ python manage.py badgify_sync awards --disable-signals\n$ python manage.py badgify_sync counts\n</pre>\n</div>\n<div id=\"templatetags\">\n<h2>Templatetags</h2>\n<h2 id=\"badgify-badges\"><span class=\"section-subtitle\">badgify_badges</span></h2>\n<p>Takes two optional arguments:</p>\n<ul>\n<li><tt>user</tt>: a <tt>User</tt> object</li>\n<li><tt>username</tt>: a <tt>User</tt> username</li>\n</ul>\n<p>Without any argument, displays all badges. Otherwise, badges awarded by the given user.</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">badgify_tags</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">badgify_badges</span> <span class=\"k\">as</span> <span class=\"nv\">badges</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">badgify_badges</span> <span class=\"nv\">username</span><span class=\"o\">=</span><span class=\"s2\">\"johndoe\"</span> <span class=\"k\">as</span> <span class=\"nv\">badges</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">badgify_badges</span> <span class=\"nv\">user</span><span class=\"o\">=</span><span class=\"nv\">user</span> <span class=\"k\">as</span> <span class=\"nv\">badges</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">badge</span> <span class=\"k\">in</span> <span class=\"nv\">badges</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">badge.name</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre>\n</div>\n<div id=\"views\">\n<h2>Views</h2>\n<p><strong>django-badgify</strong> provides two views:</p>\n<ul>\n<li><tt>badgify.views.BadgifyListView</tt>: displays all badges as paginated list</li>\n<li><tt>badgify.views.BadgifyDetailView</tt>: displays awarded users as paginated list for a given badge</li>\n</ul>\n<p>This application does not include templates. It lets you implement\ntemplates as you like (see example project).</p>\n<p>To include these two views, include the provided <tt>badgify.urls</tt>:</p>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># Your other includes</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^badges/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'badgify.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>See example project for more details.</p>\n</div>\n<div id=\"custom-models\">\n<h2>Custom Models</h2>\n<p><strong>django-badgify</strong> lets you define your own model classes for <tt>Badge</tt> and <tt>Award</tt>\nmodels. That can be pretty useful for i18n stuff\n(example: <a href=\"https://github.com/Yaco-Sistemas/django-transmeta/\" rel=\"nofollow\">django-transmetta</a> support),\nadding custom fields, methods or properties.</p>\n<p>Your models must inherit from <tt>badgify.models.base</tt> model classes:</p>\n<pre><span class=\"c1\"># yourapp.models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">badgify.models</span> <span class=\"kn\">import</span> <span class=\"n\">base</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Badge</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Badge</span><span class=\"p\">):</span>\n    <span class=\"c1\"># you own fields / logic here</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Badge</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Award</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Award</span><span class=\"p\">):</span>\n    <span class=\"c1\"># you own fields / logic here</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Award</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p>Then tell the application to use them in place of default ones in your <tt>settings.py</tt> module:</p>\n<pre><span class=\"c1\"># yourapp.settings</span>\n\n<span class=\"n\">BADGIFY_BADGE_MODEL</span> <span class=\"o\">=</span> <span class=\"s1\">'yourapp.models.Badge'</span>\n<span class=\"n\">BADGIFY_AWARD_MODEL</span> <span class=\"o\">=</span> <span class=\"s1\">'yourapp.models.Award'</span>\n</pre>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>You can altere the application behavior by defining settings in your <tt>settings.py</tt>\nmodule.</p>\n<p>All application settings are prefixed with <tt>BADGIFY_</tt>.</p>\n<div id=\"badgify-badge-image-upload-root\">\n<h3><tt>BADGIFY_BADGE_IMAGE_UPLOAD_ROOT</tt></h3>\n<p>The root path for <tt>Badge</tt>  model <tt>ImageField</tt>.</p>\n</div>\n<div id=\"badgify-badge-image-upload-url\">\n<h3><tt>BADGIFY_BADGE_IMAGE_UPLOAD_URL</tt></h3>\n<p>The URL <tt>Badge</tt>  model <tt>ImageField</tt>.</p>\n</div>\n<div id=\"badgify-badge-image-upload-storage\">\n<h3><tt>BADGIFY_BADGE_IMAGE_UPLOAD_STORAGE</tt></h3>\n<p>Your own <tt>django.core.files.storage</tt> storage instance.</p>\n</div>\n<div id=\"badgify-badge-list-view-paginate-by\">\n<h3><tt>BADGIFY_BADGE_LIST_VIEW_PAGINATE_BY</tt></h3>\n<p>Number of badges to display on the badge list page.</p>\n</div>\n<div id=\"badgify-badge-detail-view-paginate-by\">\n<h3><tt>BADGIFY_BADGE_DETAIL_VIEW_PAGINATE_BY</tt></h3>\n<p>Number of awarded users to display on the badge detail page.</p>\n</div>\n<div id=\"badgify-badge-model\">\n<h3><tt>BADGIFY_BADGE_MODEL</tt></h3>\n<p>Your own concrete <tt>Badge</tt> model class as module path.</p>\n<p>Example: <tt>yourapp.models.Badge</tt>.</p>\n</div>\n<div id=\"badgify-award-model\">\n<h3><tt>BADGIFY_AWARD_MODEL</tt></h3>\n<p>Your own concrete <tt>Award</tt> model class as module path.</p>\n<p>Example: <tt>yourapp.models.Award</tt>.</p>\n</div>\n<div id=\"badgify-batch-size\">\n<h3><tt>BADGIFY_BATCH_SIZE</tt></h3>\n<p>Maximum number of <tt>Award</tt> objects to create at once.</p>\n<p>Defaults to <tt>500</tt>.</p>\n</div>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<pre><span class=\"c1\"># Don't have pip?\n</span>$ sudo easy_install pip\n\n<span class=\"c1\"># Don't already have virtualenv?\n</span>$ sudo pip install virtualenv\n\n<span class=\"c1\"># Clone and install dependencies\n</span>$ git clone https://github.com/ulule/django-badgify.git\n$ <span class=\"nb\">cd</span> django-badgify\n$ make install\n\n<span class=\"c1\"># Launch tests\n</span>$ make <span class=\"nb\">test</span>\n\n<span class=\"c1\"># Launch example project\n</span>$ make create_fixtures\n$ make serve\n</pre>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<ul>\n<li>python 2.7: Django 1.9, 1.10</li>\n<li>Python 3.4: Django 1.9, 1.10</li>\n<li>Python 3.5: Django 1.9, 1.10</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3141207, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "2e1cb755509f945572387f1dc1fb53d3", "sha256": "86faca8fd18280fb2cf3b0cfce13b01a8844e65529c5dca85db7605c415c9e24"}, "downloads": -1, "filename": "django_badgify_lab-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2e1cb755509f945572387f1dc1fb53d3", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 41041, "upload_time": "2015-06-19T18:10:01", "upload_time_iso_8601": "2015-06-19T18:10:01.586261Z", "url": "https://files.pythonhosted.org/packages/51/b1/88e2213685eb76edc3bf3b1f27a47da6a43da4500d17bda02b584af91cbf/django_badgify_lab-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13ab14ca74193a3c1acf5b3e36073f79", "sha256": "203cb0a17c9fa0c8482a1fd8f11be137e7fc65eb9a4d0f60d592ebef3fa54100"}, "downloads": -1, "filename": "django-badgify-lab-0.1.5.tar.gz", "has_sig": false, "md5_digest": "13ab14ca74193a3c1acf5b3e36073f79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25858, "upload_time": "2015-06-19T18:09:58", "upload_time_iso_8601": "2015-06-19T18:09:58.953788Z", "url": "https://files.pythonhosted.org/packages/22/25/7404eec29562f98ecb710e8e47faa8180e8b3fc8372046a3b81a0b6bf1f6/django-badgify-lab-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "92f52f7ce23d6ff42c7c3deaeeb456db", "sha256": "830514cc96cb48bbabcd74e7553d270124ccbef89b0c0858a6b51ca5e3c2a110"}, "downloads": -1, "filename": "django_badgify_lab-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "92f52f7ce23d6ff42c7c3deaeeb456db", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 38422, "upload_time": "2017-09-01T18:45:32", "upload_time_iso_8601": "2017-09-01T18:45:32.676504Z", "url": "https://files.pythonhosted.org/packages/fa/a2/da63bfb7e66eb9a90e4e9c71239d98ea82db3b893a364ca865b0d8f56560/django_badgify_lab-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abb44d4f741856dce4e70afd4741a697", "sha256": "fdbd75862dd85621928ee4a78accc2333213d613a0cf154a4e08f455f2378836"}, "downloads": -1, "filename": "django-badgify-lab-0.2.0.tar.gz", "has_sig": false, "md5_digest": "abb44d4f741856dce4e70afd4741a697", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25607, "upload_time": "2017-09-01T18:45:30", "upload_time_iso_8601": "2017-09-01T18:45:30.800816Z", "url": "https://files.pythonhosted.org/packages/f9/b4/807955e321e5ac2ec7346caaaec98c2478f39b1248219c2a10441bd2d3f3/django-badgify-lab-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92f52f7ce23d6ff42c7c3deaeeb456db", "sha256": "830514cc96cb48bbabcd74e7553d270124ccbef89b0c0858a6b51ca5e3c2a110"}, "downloads": -1, "filename": "django_badgify_lab-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "92f52f7ce23d6ff42c7c3deaeeb456db", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 38422, "upload_time": "2017-09-01T18:45:32", "upload_time_iso_8601": "2017-09-01T18:45:32.676504Z", "url": "https://files.pythonhosted.org/packages/fa/a2/da63bfb7e66eb9a90e4e9c71239d98ea82db3b893a364ca865b0d8f56560/django_badgify_lab-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abb44d4f741856dce4e70afd4741a697", "sha256": "fdbd75862dd85621928ee4a78accc2333213d613a0cf154a4e08f455f2378836"}, "downloads": -1, "filename": "django-badgify-lab-0.2.0.tar.gz", "has_sig": false, "md5_digest": "abb44d4f741856dce4e70afd4741a697", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25607, "upload_time": "2017-09-01T18:45:30", "upload_time_iso_8601": "2017-09-01T18:45:30.800816Z", "url": "https://files.pythonhosted.org/packages/f9/b4/807955e321e5ac2ec7346caaaec98c2478f39b1248219c2a10441bd2d3f3/django-badgify-lab-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:29 2020"}