{"info": {"author": "Roberto Pagaria, Giovanni Paolini", "author_email": "giovanni.paolini@sns.it", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Build Tools"], "description": "# Arithmat\nSageMath implementation of arithmetic matroids and toric arrangements.\n\nAuthors: Roberto Pagaria and Giovanni Paolini\n\n* [Requirements](#requirements)\n* [Installation](#installation)\n* [Overview](#overview)\n* [Citing Arithmat](#citing-arithmat)\n* [Documentation](#documentation)\n  + [Import](#import)\n  + [Available classes for arithmetic matroids](#available-classes-for-arithmetic-matroids)\n  + [Available methods](#available-methods)\n* [Bibliography](#bibliography)\n* [License](#license)\n\n\n## Requirements\n\n* [Python](https://www.python.org/) 2.7 or 3.x\n* [Sage](http://www.sagemath.org/) >= 8\n\n\n## Installation\n\n### From PyPI\n\nThe easiest way to start using Arithmat is to install [the latest release from PyPI](https://pypi.org/project/arithmat/).\nType the following command:\n\n```bash\nsage -pip install --upgrade arithmat\n```\n\n### From source\n\nDownload the source from the git repository:\n\n```bash\ngit clone https://github.com/giove91/arithmat.git\n```\n\nChange to the root directory and run:\n\n```bash\nsage -pip install --upgrade --no-index -v .\n```\n\n\n## Overview\n\nArithmat is a Sage package that implements arithmetic matroids and toric arrangements.\n\nAt its core there is the class `ArithmeticMatroidMixin`, which is intended to be used in combination with [any existing matroid class of Sage](http://doc.sagemath.org/html/en/reference/matroids/index.html) (e.g. `RankMatroid`, `BasisMatroid`, `LinearMatroid`) via multiple inheritance.\nThe most common combinations are already defined: `ArithmeticMatroid` (deriving from `RankMatroid`), `BasisArithmeticMatroid` (deriving from `BasisMatroid`), and `LinearArithmeticMatroid` (deriving from `LinearMatroid`).\n\nAn additional class `ToricArithmeticMatroid` is implemented, for arithmetic matroids constructed from a fixed given representation.\n\n\n## Citing Arithmat\n\nTo cite Arithmat, you can use (some variant of) the following BibTeX code:\n\n```latex\n@Misc{arithmat,\n  author = {Pagaria, Roberto and Paolini, Giovanni},\n  title = {{Arithmat}: {Sage} implementation of arithmetic matroids and toric arrangements},\n  year = {2019},\n  url = \"https://github.com/giove91/arithmat\",\n}\n```\n\n## Documentation\n\n### Import\n\nAll defined classes and functions can be imported at once:\n\n```sage\nfrom arithmat import *\n```\n\nAlternatively, it is possible to import only specific classes and/or functions. For example:\n\n```sage\nfrom arithmat import ArithmeticMatroid, ToricArithmeticMatroid\n```\n\n\n### Available classes for arithmetic matroids\n\nAll classes for arithmetic matroids derive from `ArithmeticMatroidMixin` and from some subclass of Sage's `Matroid`.\nThe class `ArithmeticMatroidMixin` is not intended to be used by itself, but it is possible to subclass it in order to create new classes for arithmetic matroids.\n\nThe classes which are already provided in `arithmat` are the following.\n\n* `ArithmeticMatroid(groundset, rank_function, multiplicity_function)`\n\n  This is the simplest arithmetic matroid class, and derives from `ArithmeticMatroidMixin` and `RankMatroid`.\n\n  ```sage\n  E = [1,2,3,4,5]\n\n  def rk(X):\n      return min(2, len(X))\n\n  def m(X):\n      if len(X) == 2 and all(x in [3,4,5] for x in X):\n          return 2\n      else:\n          return 1\n\n  M = ArithmeticMatroid(E, rk, m)\n  print(M)\n  # Arithmetic matroid of rank 2 on 5 elements\n\n  print(M.arithmetic_tutte_polynomial())\n  # y^3 + x^2 + 2*y^2 + 3*x + 3*y + 3\n\n  print(M.representation())\n  # None (this arithmetic matroid is not representable)\n  ```\n* `ToricArithmeticMatroid(arrangement_matrix, torus_matrix=None, ordered_groundset=None)`\n\n  Arithmetic matroid associated with a given toric arrangement. This class derives from `ArithmeticMatroidMixin` and `Matroid`.\n\n  The constructor requires an integer matrix `arrangement_matrix` representing the toric arrangement. Optionally it accepts another integer matrix `torus_matrix` (whose cokernel describes the ambient torus, and defaults to `matrix(ZZ, arrangement_matrix.nrows(), 0)`) and/or an ordered copy `ordered_groundset` of the groundset (defaults to `range(matrix.ncols())`). The number of rows of `arrangement_matrix` must be equal to the numer of rows of `torus_matrix`.\n\n  The two matrices are not guaranteed to remain unchanged: internally,`torus_matrix` is kept in Smith normal form (this also affects `arrangement_matrix`).\n\n  ```sage\n  A = matrix(ZZ, [[-1, 1, 0, 2], [3, 1, -1, -2]])\n  M = ToricArithmeticMatroid(A)\n\n  print(M)\n  # Toric arithmetic matroid of rank 2 on 4 elements\n\n  print(M.arrangement_matrix())\n  # [-1  1  0  2]\n  # [ 3  1 -1 -2]\n\n  print(M.torus_matrix())\n  # []\n\n  P = M.poset_of_layers()\n  print(P)\n  # Finite poset containing 11 elements\n\n  P.show(label_elements=False)\n  ```\n  <img src=\"https://github.com/giove91/arithmat/raw/master/figures/poset.png\" height=\"240\">\n\n  ```sage\n  A = matrix(ZZ, [[-1, 1, 0, 2], [3, 1, -1, -2]])\n  Q = matrix(ZZ, [[5], [1]])\n  N = ToricArithmeticMatroid(A, Q)\n\n  print(N)\n  # Toric arithmetic matroid of rank 1 on 4 elements\n\n  print(N.arrangement_matrix())\n  # [-16  -4   5  12]\n\n  print(N.torus_matrix())\n  # []\n\n  ```\n\nThe classes `BasisArithmeticMatroid` and `LinearArithmeticMatroid` derive from the Sage classes `BasisMatroid` and `LinearMatroid`, respectively.\nAn instance of `XxxArithmeticMatroid` can be constructed with `XxxArithmeticMatroid(..., multiplicity_function=m)`, where `...` should be replaced by arguments to construct an instance of `XxxMatroid`, and `m` is the multiplicity function.\nThe multiplicity function needs to be passed as a keyword argument (and not as a positional argument).\n\n* `BasisArithmeticMatroid(M=None, groundset=None, bases=None, ..., multiplicity_function)`\n\n   ```sage\n   def m(X):\n       if len(X) == 2 and all(x in ['b','c','d'] for x in X):\n           return 2\n       else:\n           return 1\n\n   M = BasisArithmeticMatroid(groundset='abcd', bases=['ab', 'ac', 'ad', 'bc', 'bd', 'cd'], multiplicity_function=m)\n\n   print(M)\n   # Basis arithmetic matroid of rank 2 on 4 elements\n\n   print(M.is_valid())\n   # True\n   ```\n\n   It is possible to cast any arithmetic matroid to a `BasisArithmeticMatroid`:\n\n   ```sage\n   M1 = ToricArithmeticMatroid(matrix(ZZ, [[-1, 1, 0, 7], [6, 1, -1, -2]]))\n   M2 = BasisArithmeticMatroid(M1)\n\n   print(M1)\n   # Toric arithmetic matroid of rank 2 on 4 elements\n\n   print(M2)\n   # Basis arithmetic matroid of rank 2 on 4 elements\n\n   print(M2.full_multiplicity() == M1.full_multiplicity())\n   # True\n   ```\n\n* `LinearArithmeticMatroid(matrix=None, groundset=None, ..., multiplicity_function)`\n\n  ```sage\n  A = matrix(GF(2), [[1, 0, 0, 1, 1], [0, 1, 0, 1, 0], [0, 0, 1, 0, 1]])\n\n  def m(X):\n      return 1\n\n  M = LinearArithmeticMatroid(A, multiplicity_function=m)\n\n  print(M)\n  # Linear arithmetic matroid of rank 3 on 5 elements\n\n  print(M.is_valid())\n  # True\n  ```\n\nFinally, `MinorArithmeticMatroid` and `DualArithmeticMatroid` are the analogs of `MinorMatroid` and `DualMatroid`.\nThey are used when calling `contract(X)`, `delete(X)`, `dual()` (see below).\n\n\n### Available methods\n\nAll classes for arithmetic matroids must also derive from some subclass of Sage's `Matroid`.\nIn particular, `Matroid` methods are still available. For example:\n```sage\nM = ToricArithmeticMatroid(matrix(ZZ, [[1,2,3], [0,1, 1]]))\nprint(list(M.bases()))\n# [frozenset([0, 1]), frozenset([0, 2]), frozenset([1, 2])]\n```\n\nAll subclasses of `ArithmeticMatroidMixin` also (re-)implement the following methods.\n\n* `multiplicity(X)`\n  Return the multiplicity of the set `X`.\n\n* `full_multiplicity()`\n  Return the multiplicity of the groundset.\n\n* `is_valid()`\n  Check if the arithmetic matroid axioms are satisfied.\n  This method overwrites `Matroid.is_valid`.\n\n* `is_torsion_free()`\n  Check if the matroid is torsion-free, i.e. the multiplicity of the empty set is equal to 1.\n\n* `is_surjective()`\n  Check if the matroid is surjective, i.e. the multiplicity of the groundset is equal to 1.\n\n* `is_gcd()`\n  Check if the matroid satisfies the gcd property, defined in [DM13, Section 3].\n\n* `is_strong_gcd()`\n  Check if the matroid satisfies the strong gcd property, defined in [PP19, Section 3].\n\n* `is_isomorphic(other, morphism)`\n  Check if the two arithmetic matroids are isomorphic.\n  This method overwrites `Matroid.is_isomorphic`.\n\n* `is_isomorphism(other, morphism)`\n  Check if the given morphism of groundsets is an isomorphism of arithmetic matroids.\n  It works also when comparing instances of different subclasses of `ArithmeticMatroid`.\n  This method overwrites `Matroid.is_isomorphism`.\n\n* `contract(X)`\n  Contract elements.\n  This method overwrites `Matroid.contract`.\n\n* `delete(X)`\n  Delete elements.\n  This method overwrites `Matroid.delete`.\n\n* `minor(contractions=None, deletions=None)`\n  Contract some elements and delete some other elements.\n  This method overwrites `Matroid.minor`.\n\n* `dual()`\n  Return the dual of the matroid.\n  This method overwrites `Matroid.dual`.\n\n* `arithmetic_tutte_polynomial(x=None, y=None)`\n  Return the arithmetic Tutte polynomial of the matroid.\n\n* `reduction()`\n  Return the reduction of the matroid, defined in [PP19, Section 4].\n\n* `check_representation(A, ordered_groundset=None)`\n  Check if the given integer matrix `A` is a representation of the matroid.\n  The optional parameter `ordered_groundset` specifies the bijection between the columns of the matrix and the groundset.\n\n* `all_representations(ordered_groundset=None)`\n  Generator of all non-equivalent essential representations of the matroid, computed using the algorithm of [PP19, Section 5].\n\n* `num_representations()`\n  Return the number of non-equivalent essential representations of the matroid.\n  This calls `all_representations()`.\n\n* `representation(ordered_groundset=None)`\n  Return any essential representation of the matroid, or `None` if the matroid is not representable.\n\n* `is_representable()`\n  Check if the matroid is representable.\n  This calls `representation()`.\n\n* `is_orientable()`\n  Check if the matroid is orientable as an arithmetic matroid, as defined in [Pag18].\n\nIn addition, `ToricArithmeticMatroid` has the following methods.\n\n* `ordered_groundset()`\n  Return the groundset as a list, in the same order as the columns of the matrix of the defining toric arrangement.\n\n* `arrangement_matrix()`\n  Return the matrix of the defining toric arrangement.\n\n* `torus_matrix()`\n  Return the matrix describing the ambient torus.\n\n* `poset_of_layers()`\n  Return the poset of layers of the toric arrangement, computed using Lenz's algorithm [Len17a].\n\n* `arithmetic_independence_poset()`\n  Return the arithmetic independence poset of the toric arrangement, defined in [Len17b, Definition 5], [Mar18, Definitions 2.1 and 2.2], [DD18, Section 7].\n  Notice that it is not the same as the independence poset of the underlying matroid.\n\n* `decomposition()`\n  Return the partition of the groundset corresponding to the decomposition of the matroid as a direct sum of indecomposable matroids.\n  Uses the algorithm of [PP19, Section 7].\n\n* `is_decomposable()`\n  Check if the matroid is decomposable.\n\n* `is_indecomposable()`\n  Check if the matroid is not decomposable.\n\n* `is_equivalent(other, morphism=None)`\n  Check if the two ToricArithmeticMatroids are equivalent (i.e. the defining representations are equivalent; see [PP19, Section 2]).\n  If the morphism is not given, the two ordered groundsets are assumed to be the same.\n\nThe following function is available outside of arithmetic matroid classes.\n\n* `signed_hermite_normal_form(A)`\n  Return the signed Hermite normal form of the integer matrix `A`, defined in [PP19, Section 6].\n  ```sage\n  from arithmat import signed_hermite_normal_form\n\n  print(signed_hermite_normal_form(matrix([[3, 2, 1], [-1, 1, 3]])))\n  # [  1   1  -3]\n  # [  0   5 -10]\n  ```\n\nMore examples can be found in the [test file](https://github.com/giove91/arithmat/blob/master/arithmat/test.sage).\n\n\n## Bibliography\n\n[BM14] P. Br\u00e4nd\u00e9n and L. Moci, *The multivariate arithmetic Tutte polynomial*, Transactions of the American Mathematical Society **366** (2014), no. 10, 5523-5540.\n\n[DM13] M. D'Adderio and L. Moci, *Arithmetic matroids, the Tutte polynomial and toric arrangements*, Advances in Mathematics **232** (2013), 335-367.\n\n[DD18] A. D'Al\u00ec and E. Delucchi, *Stanley-Reisner rings for symmetric simplicial complexes, G-semimatroids and Abelian arrangements*, ArXiv preprint 1804.07366 (2018).\n\n[DGP17] E. Delucchi, N. Girard, and G. Paolini, *Shellability of posets of labeled partitions and arrangements defined by root systems*, ArXiv preprint 1706.06360 (2017).\n\n[Len17a] M. Lenz, *Computing the poset of layers of a toric arrangement*, ArXiv preprint 1708.06646 (2017).\n\n[Len17b] M. Lenz, *Stanley-Reisner rings for quasi-arithmetic matroids*, ArXiv preprint 1709.03834 (2017).\n\n[Len19] M. Lenz, *Representations of weakly multiplicative arithmetic matroids are unique*, Annals of Combinatorics **23** (2019), no. 2, 335-346.\n\n[Mar18] I. Martino, *Face module for realizable Z-matroids*, Contributions to Discrete Mathematics **13** (2018).\n\n[Pag17] R. Pagaria, *Combinatorics of Toric Arrangements*, ArXiv preprint 1710.00409 (2017).\n\n[Pag18] R. Pagaria, *Orientable arithmetic matroids*, ArXiv preprint 1805.11888 (2018).\n\n[Pag19] R. Pagaria, *Two Examples of Toric Arrangements*, Journal of Combinatorial Theory, Series A **167** (2019), 389-402.\n\n[PP19] R. Pagaria and G. Paolini, *Representations of torsion-free arithmetic matroids*, ArXiv preprint 1908.04137 (2019).\n\n\n## License\n\nThis project is licensed under the [GNU General Public License v3.0](LICENSE.md).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/giove91/arithmat", "keywords": "SageMath packaging", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "arithmat", "package_url": "https://pypi.org/project/arithmat/", "platform": "", "project_url": "https://pypi.org/project/arithmat/", "project_urls": {"Homepage": "https://github.com/giove91/arithmat", "Source": "https://github.com/giove91/arithmat", "Tracker": "https://github.com/giove91/arithmat/issues"}, "release_url": "https://pypi.org/project/arithmat/1.1.1/", "requires_dist": ["sage-package", "networkx (~=2.2)"], "requires_python": ">=2.7", "summary": "Sage implementation of arithmetic matroids and toric arrangements", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Arithmat</h1>\n<p>SageMath implementation of arithmetic matroids and toric arrangements.</p>\n<p>Authors: Roberto Pagaria and Giovanni Paolini</p>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#citing-arithmat\" rel=\"nofollow\">Citing Arithmat</a></li>\n<li><a href=\"#documentation\" rel=\"nofollow\">Documentation</a>\n<ul>\n<li><a href=\"#import\" rel=\"nofollow\">Import</a></li>\n<li><a href=\"#available-classes-for-arithmetic-matroids\" rel=\"nofollow\">Available classes for arithmetic matroids</a></li>\n<li><a href=\"#available-methods\" rel=\"nofollow\">Available methods</a></li>\n</ul>\n</li>\n<li><a href=\"#bibliography\" rel=\"nofollow\">Bibliography</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> 2.7 or 3.x</li>\n<li><a href=\"http://www.sagemath.org/\" rel=\"nofollow\">Sage</a> &gt;= 8</li>\n</ul>\n<h2>Installation</h2>\n<h3>From PyPI</h3>\n<p>The easiest way to start using Arithmat is to install <a href=\"https://pypi.org/project/arithmat/\" rel=\"nofollow\">the latest release from PyPI</a>.\nType the following command:</p>\n<pre>sage -pip install --upgrade arithmat\n</pre>\n<h3>From source</h3>\n<p>Download the source from the git repository:</p>\n<pre>git clone https://github.com/giove91/arithmat.git\n</pre>\n<p>Change to the root directory and run:</p>\n<pre>sage -pip install --upgrade --no-index -v .\n</pre>\n<h2>Overview</h2>\n<p>Arithmat is a Sage package that implements arithmetic matroids and toric arrangements.</p>\n<p>At its core there is the class <code>ArithmeticMatroidMixin</code>, which is intended to be used in combination with <a href=\"http://doc.sagemath.org/html/en/reference/matroids/index.html\" rel=\"nofollow\">any existing matroid class of Sage</a> (e.g. <code>RankMatroid</code>, <code>BasisMatroid</code>, <code>LinearMatroid</code>) via multiple inheritance.\nThe most common combinations are already defined: <code>ArithmeticMatroid</code> (deriving from <code>RankMatroid</code>), <code>BasisArithmeticMatroid</code> (deriving from <code>BasisMatroid</code>), and <code>LinearArithmeticMatroid</code> (deriving from <code>LinearMatroid</code>).</p>\n<p>An additional class <code>ToricArithmeticMatroid</code> is implemented, for arithmetic matroids constructed from a fixed given representation.</p>\n<h2>Citing Arithmat</h2>\n<p>To cite Arithmat, you can use (some variant of) the following BibTeX code:</p>\n<pre>@Misc<span class=\"nb\">{</span>arithmat,\n  author = <span class=\"nb\">{</span>Pagaria, Roberto and Paolini, Giovanni<span class=\"nb\">}</span>,\n  title = <span class=\"nb\">{{</span>Arithmat<span class=\"nb\">}</span>: <span class=\"nb\">{</span>Sage<span class=\"nb\">}</span> implementation of arithmetic matroids and toric arrangements<span class=\"nb\">}</span>,\n  year = <span class=\"nb\">{</span>2019<span class=\"nb\">}</span>,\n  url = \"https://github.com/giove91/arithmat\",\n<span class=\"nb\">}</span>\n</pre>\n<h2>Documentation</h2>\n<h3>Import</h3>\n<p>All defined classes and functions can be imported at once:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">arithmat</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>Alternatively, it is possible to import only specific classes and/or functions. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">arithmat</span> <span class=\"kn\">import</span> <span class=\"n\">ArithmeticMatroid</span><span class=\"p\">,</span> <span class=\"n\">ToricArithmeticMatroid</span>\n</pre>\n<h3>Available classes for arithmetic matroids</h3>\n<p>All classes for arithmetic matroids derive from <code>ArithmeticMatroidMixin</code> and from some subclass of Sage's <code>Matroid</code>.\nThe class <code>ArithmeticMatroidMixin</code> is not intended to be used by itself, but it is possible to subclass it in order to create new classes for arithmetic matroids.</p>\n<p>The classes which are already provided in <code>arithmat</code> are the following.</p>\n<ul>\n<li>\n<p><code>ArithmeticMatroid(groundset, rank_function, multiplicity_function)</code></p>\n<p>This is the simplest arithmetic matroid class, and derives from <code>ArithmeticMatroidMixin</code> and <code>RankMatroid</code>.</p>\n<pre><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rk</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">m</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">2</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">ArithmeticMatroid</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"n\">rk</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"c1\"># Arithmetic matroid of rank 2 on 5 elements</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">arithmetic_tutte_polynomial</span><span class=\"p\">())</span>\n<span class=\"c1\"># y^3 + x^2 + 2*y^2 + 3*x + 3*y + 3</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">())</span>\n<span class=\"c1\"># None (this arithmetic matroid is not representable)</span>\n</pre>\n</li>\n<li>\n<p><code>ToricArithmeticMatroid(arrangement_matrix, torus_matrix=None, ordered_groundset=None)</code></p>\n<p>Arithmetic matroid associated with a given toric arrangement. This class derives from <code>ArithmeticMatroidMixin</code> and <code>Matroid</code>.</p>\n<p>The constructor requires an integer matrix <code>arrangement_matrix</code> representing the toric arrangement. Optionally it accepts another integer matrix <code>torus_matrix</code> (whose cokernel describes the ambient torus, and defaults to <code>matrix(ZZ, arrangement_matrix.nrows(), 0)</code>) and/or an ordered copy <code>ordered_groundset</code> of the groundset (defaults to <code>range(matrix.ncols())</code>). The number of rows of <code>arrangement_matrix</code> must be equal to the numer of rows of <code>torus_matrix</code>.</p>\n<p>The two matrices are not guaranteed to remain unchanged: internally,<code>torus_matrix</code> is kept in Smith normal form (this also affects <code>arrangement_matrix</code>).</p>\n<pre><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">ZZ</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">ToricArithmeticMatroid</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"c1\"># Toric arithmetic matroid of rank 2 on 4 elements</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">arrangement_matrix</span><span class=\"p\">())</span>\n<span class=\"c1\"># [-1  1  0  2]</span>\n<span class=\"c1\"># [ 3  1 -1 -2]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">torus_matrix</span><span class=\"p\">())</span>\n<span class=\"c1\"># []</span>\n\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">poset_of_layers</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">)</span>\n<span class=\"c1\"># Finite poset containing 11 elements</span>\n\n<span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">label_elements</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<img height=\"240\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee8c749c06d75d8f603eeddecd17612b118a4d4b/68747470733a2f2f6769746875622e636f6d2f67696f766539312f61726974686d61742f7261772f6d61737465722f666967757265732f706f7365742e706e67\">\n<pre><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">ZZ</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n<span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">ZZ</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">ToricArithmeticMatroid</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"c1\"># Toric arithmetic matroid of rank 1 on 4 elements</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">.</span><span class=\"n\">arrangement_matrix</span><span class=\"p\">())</span>\n<span class=\"c1\"># [-16  -4   5  12]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">.</span><span class=\"n\">torus_matrix</span><span class=\"p\">())</span>\n<span class=\"c1\"># []</span>\n</pre>\n</li>\n</ul>\n<p>The classes <code>BasisArithmeticMatroid</code> and <code>LinearArithmeticMatroid</code> derive from the Sage classes <code>BasisMatroid</code> and <code>LinearMatroid</code>, respectively.\nAn instance of <code>XxxArithmeticMatroid</code> can be constructed with <code>XxxArithmeticMatroid(..., multiplicity_function=m)</code>, where <code>...</code> should be replaced by arguments to construct an instance of <code>XxxMatroid</code>, and <code>m</code> is the multiplicity function.\nThe multiplicity function needs to be passed as a keyword argument (and not as a positional argument).</p>\n<ul>\n<li>\n<p><code>BasisArithmeticMatroid(M=None, groundset=None, bases=None, ..., multiplicity_function)</code></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">m</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">,</span><span class=\"s1\">'c'</span><span class=\"p\">,</span><span class=\"s1\">'d'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">2</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">BasisArithmeticMatroid</span><span class=\"p\">(</span><span class=\"n\">groundset</span><span class=\"o\">=</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'ab'</span><span class=\"p\">,</span> <span class=\"s1\">'ac'</span><span class=\"p\">,</span> <span class=\"s1\">'ad'</span><span class=\"p\">,</span> <span class=\"s1\">'bc'</span><span class=\"p\">,</span> <span class=\"s1\">'bd'</span><span class=\"p\">,</span> <span class=\"s1\">'cd'</span><span class=\"p\">],</span> <span class=\"n\">multiplicity_function</span><span class=\"o\">=</span><span class=\"n\">m</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"c1\"># Basis arithmetic matroid of rank 2 on 4 elements</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n</pre>\n<p>It is possible to cast any arithmetic matroid to a <code>BasisArithmeticMatroid</code>:</p>\n<pre><span class=\"n\">M1</span> <span class=\"o\">=</span> <span class=\"n\">ToricArithmeticMatroid</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">ZZ</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]]))</span>\n<span class=\"n\">M2</span> <span class=\"o\">=</span> <span class=\"n\">BasisArithmeticMatroid</span><span class=\"p\">(</span><span class=\"n\">M1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Toric arithmetic matroid of rank 2 on 4 elements</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M2</span><span class=\"p\">)</span>\n<span class=\"c1\"># Basis arithmetic matroid of rank 2 on 4 elements</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M2</span><span class=\"o\">.</span><span class=\"n\">full_multiplicity</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">M1</span><span class=\"o\">.</span><span class=\"n\">full_multiplicity</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n</pre>\n</li>\n<li>\n<p><code>LinearArithmeticMatroid(matrix=None, groundset=None, ..., multiplicity_function)</code></p>\n<pre><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">GF</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">m</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">LinearArithmeticMatroid</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">multiplicity_function</span><span class=\"o\">=</span><span class=\"n\">m</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"c1\"># Linear arithmetic matroid of rank 3 on 5 elements</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">())</span>\n<span class=\"c1\"># True</span>\n</pre>\n</li>\n</ul>\n<p>Finally, <code>MinorArithmeticMatroid</code> and <code>DualArithmeticMatroid</code> are the analogs of <code>MinorMatroid</code> and <code>DualMatroid</code>.\nThey are used when calling <code>contract(X)</code>, <code>delete(X)</code>, <code>dual()</code> (see below).</p>\n<h3>Available methods</h3>\n<p>All classes for arithmetic matroids must also derive from some subclass of Sage's <code>Matroid</code>.\nIn particular, <code>Matroid</code> methods are still available. For example:</p>\n<pre><span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">ToricArithmeticMatroid</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">ZZ</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">bases</span><span class=\"p\">()))</span>\n<span class=\"c1\"># [frozenset([0, 1]), frozenset([0, 2]), frozenset([1, 2])]</span>\n</pre>\n<p>All subclasses of <code>ArithmeticMatroidMixin</code> also (re-)implement the following methods.</p>\n<ul>\n<li>\n<p><code>multiplicity(X)</code>\nReturn the multiplicity of the set <code>X</code>.</p>\n</li>\n<li>\n<p><code>full_multiplicity()</code>\nReturn the multiplicity of the groundset.</p>\n</li>\n<li>\n<p><code>is_valid()</code>\nCheck if the arithmetic matroid axioms are satisfied.\nThis method overwrites <code>Matroid.is_valid</code>.</p>\n</li>\n<li>\n<p><code>is_torsion_free()</code>\nCheck if the matroid is torsion-free, i.e. the multiplicity of the empty set is equal to 1.</p>\n</li>\n<li>\n<p><code>is_surjective()</code>\nCheck if the matroid is surjective, i.e. the multiplicity of the groundset is equal to 1.</p>\n</li>\n<li>\n<p><code>is_gcd()</code>\nCheck if the matroid satisfies the gcd property, defined in [DM13, Section 3].</p>\n</li>\n<li>\n<p><code>is_strong_gcd()</code>\nCheck if the matroid satisfies the strong gcd property, defined in [PP19, Section 3].</p>\n</li>\n<li>\n<p><code>is_isomorphic(other, morphism)</code>\nCheck if the two arithmetic matroids are isomorphic.\nThis method overwrites <code>Matroid.is_isomorphic</code>.</p>\n</li>\n<li>\n<p><code>is_isomorphism(other, morphism)</code>\nCheck if the given morphism of groundsets is an isomorphism of arithmetic matroids.\nIt works also when comparing instances of different subclasses of <code>ArithmeticMatroid</code>.\nThis method overwrites <code>Matroid.is_isomorphism</code>.</p>\n</li>\n<li>\n<p><code>contract(X)</code>\nContract elements.\nThis method overwrites <code>Matroid.contract</code>.</p>\n</li>\n<li>\n<p><code>delete(X)</code>\nDelete elements.\nThis method overwrites <code>Matroid.delete</code>.</p>\n</li>\n<li>\n<p><code>minor(contractions=None, deletions=None)</code>\nContract some elements and delete some other elements.\nThis method overwrites <code>Matroid.minor</code>.</p>\n</li>\n<li>\n<p><code>dual()</code>\nReturn the dual of the matroid.\nThis method overwrites <code>Matroid.dual</code>.</p>\n</li>\n<li>\n<p><code>arithmetic_tutte_polynomial(x=None, y=None)</code>\nReturn the arithmetic Tutte polynomial of the matroid.</p>\n</li>\n<li>\n<p><code>reduction()</code>\nReturn the reduction of the matroid, defined in [PP19, Section 4].</p>\n</li>\n<li>\n<p><code>check_representation(A, ordered_groundset=None)</code>\nCheck if the given integer matrix <code>A</code> is a representation of the matroid.\nThe optional parameter <code>ordered_groundset</code> specifies the bijection between the columns of the matrix and the groundset.</p>\n</li>\n<li>\n<p><code>all_representations(ordered_groundset=None)</code>\nGenerator of all non-equivalent essential representations of the matroid, computed using the algorithm of [PP19, Section 5].</p>\n</li>\n<li>\n<p><code>num_representations()</code>\nReturn the number of non-equivalent essential representations of the matroid.\nThis calls <code>all_representations()</code>.</p>\n</li>\n<li>\n<p><code>representation(ordered_groundset=None)</code>\nReturn any essential representation of the matroid, or <code>None</code> if the matroid is not representable.</p>\n</li>\n<li>\n<p><code>is_representable()</code>\nCheck if the matroid is representable.\nThis calls <code>representation()</code>.</p>\n</li>\n<li>\n<p><code>is_orientable()</code>\nCheck if the matroid is orientable as an arithmetic matroid, as defined in [Pag18].</p>\n</li>\n</ul>\n<p>In addition, <code>ToricArithmeticMatroid</code> has the following methods.</p>\n<ul>\n<li>\n<p><code>ordered_groundset()</code>\nReturn the groundset as a list, in the same order as the columns of the matrix of the defining toric arrangement.</p>\n</li>\n<li>\n<p><code>arrangement_matrix()</code>\nReturn the matrix of the defining toric arrangement.</p>\n</li>\n<li>\n<p><code>torus_matrix()</code>\nReturn the matrix describing the ambient torus.</p>\n</li>\n<li>\n<p><code>poset_of_layers()</code>\nReturn the poset of layers of the toric arrangement, computed using Lenz's algorithm [Len17a].</p>\n</li>\n<li>\n<p><code>arithmetic_independence_poset()</code>\nReturn the arithmetic independence poset of the toric arrangement, defined in [Len17b, Definition 5], [Mar18, Definitions 2.1 and 2.2], [DD18, Section 7].\nNotice that it is not the same as the independence poset of the underlying matroid.</p>\n</li>\n<li>\n<p><code>decomposition()</code>\nReturn the partition of the groundset corresponding to the decomposition of the matroid as a direct sum of indecomposable matroids.\nUses the algorithm of [PP19, Section 7].</p>\n</li>\n<li>\n<p><code>is_decomposable()</code>\nCheck if the matroid is decomposable.</p>\n</li>\n<li>\n<p><code>is_indecomposable()</code>\nCheck if the matroid is not decomposable.</p>\n</li>\n<li>\n<p><code>is_equivalent(other, morphism=None)</code>\nCheck if the two ToricArithmeticMatroids are equivalent (i.e. the defining representations are equivalent; see [PP19, Section 2]).\nIf the morphism is not given, the two ordered groundsets are assumed to be the same.</p>\n</li>\n</ul>\n<p>The following function is available outside of arithmetic matroid classes.</p>\n<ul>\n<li><code>signed_hermite_normal_form(A)</code>\nReturn the signed Hermite normal form of the integer matrix <code>A</code>, defined in [PP19, Section 6].\n<pre><span class=\"kn\">from</span> <span class=\"nn\">arithmat</span> <span class=\"kn\">import</span> <span class=\"n\">signed_hermite_normal_form</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">signed_hermite_normal_form</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">([[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]])))</span>\n<span class=\"c1\"># [  1   1  -3]</span>\n<span class=\"c1\"># [  0   5 -10]</span>\n</pre>\n</li>\n</ul>\n<p>More examples can be found in the <a href=\"https://github.com/giove91/arithmat/blob/master/arithmat/test.sage\" rel=\"nofollow\">test file</a>.</p>\n<h2>Bibliography</h2>\n<p>[BM14] P. Br\u00e4nd\u00e9n and L. Moci, <em>The multivariate arithmetic Tutte polynomial</em>, Transactions of the American Mathematical Society <strong>366</strong> (2014), no. 10, 5523-5540.</p>\n<p>[DM13] M. D'Adderio and L. Moci, <em>Arithmetic matroids, the Tutte polynomial and toric arrangements</em>, Advances in Mathematics <strong>232</strong> (2013), 335-367.</p>\n<p>[DD18] A. D'Al\u00ec and E. Delucchi, <em>Stanley-Reisner rings for symmetric simplicial complexes, G-semimatroids and Abelian arrangements</em>, ArXiv preprint 1804.07366 (2018).</p>\n<p>[DGP17] E. Delucchi, N. Girard, and G. Paolini, <em>Shellability of posets of labeled partitions and arrangements defined by root systems</em>, ArXiv preprint 1706.06360 (2017).</p>\n<p>[Len17a] M. Lenz, <em>Computing the poset of layers of a toric arrangement</em>, ArXiv preprint 1708.06646 (2017).</p>\n<p>[Len17b] M. Lenz, <em>Stanley-Reisner rings for quasi-arithmetic matroids</em>, ArXiv preprint 1709.03834 (2017).</p>\n<p>[Len19] M. Lenz, <em>Representations of weakly multiplicative arithmetic matroids are unique</em>, Annals of Combinatorics <strong>23</strong> (2019), no. 2, 335-346.</p>\n<p>[Mar18] I. Martino, <em>Face module for realizable Z-matroids</em>, Contributions to Discrete Mathematics <strong>13</strong> (2018).</p>\n<p>[Pag17] R. Pagaria, <em>Combinatorics of Toric Arrangements</em>, ArXiv preprint 1710.00409 (2017).</p>\n<p>[Pag18] R. Pagaria, <em>Orientable arithmetic matroids</em>, ArXiv preprint 1805.11888 (2018).</p>\n<p>[Pag19] R. Pagaria, <em>Two Examples of Toric Arrangements</em>, Journal of Combinatorial Theory, Series A <strong>167</strong> (2019), 389-402.</p>\n<p>[PP19] R. Pagaria and G. Paolini, <em>Representations of torsion-free arithmetic matroids</em>, ArXiv preprint 1908.04137 (2019).</p>\n<h2>License</h2>\n<p>This project is licensed under the <a href=\"LICENSE.md\" rel=\"nofollow\">GNU General Public License v3.0</a>.</p>\n\n          </div>"}, "last_serial": 6773057, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2814b0afedbd1097c1068c501e702d17", "sha256": "7035dfe850d27f0c2d4c36bca8ae6e1c9bd4bbc5a93f50b31c59a25cf3e379d6"}, "downloads": -1, "filename": "arithmat-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "2814b0afedbd1097c1068c501e702d17", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, <3", "size": 34252, "upload_time": "2019-07-23T16:55:37", "upload_time_iso_8601": "2019-07-23T16:55:37.898576Z", "url": "https://files.pythonhosted.org/packages/37/19/b22d7664534e570f6afb4c215f5ec71a8a93525a5dc70926e4eb54333e43/arithmat-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39807f17ce09e2239ef189ab69b8b362", "sha256": "dcab204310b0d7710f8e4f9a0e81211440d52c031f49360ebf4ec8ffe2d18c77"}, "downloads": -1, "filename": "arithmat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "39807f17ce09e2239ef189ab69b8b362", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <3", "size": 25131, "upload_time": "2019-07-23T16:55:40", "upload_time_iso_8601": "2019-07-23T16:55:40.415778Z", "url": "https://files.pythonhosted.org/packages/98/85/904c0adca57c0a9818d3af52ae2ee2ffca2ebd2fe6d56a73e3c2e8f996d9/arithmat-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c92d79fcc8a0973ff22a73eecd3632ec", "sha256": "4f42e631502d59e306a95bee497c2ed454890b57bdeee0cc2f4b68a6bcb3c313"}, "downloads": -1, "filename": "arithmat-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "c92d79fcc8a0973ff22a73eecd3632ec", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, <3", "size": 34850, "upload_time": "2019-08-16T08:44:35", "upload_time_iso_8601": "2019-08-16T08:44:35.728361Z", "url": "https://files.pythonhosted.org/packages/30/cc/516e961cd3afdeaa5357e8d43df7413f65aa4ea5c246c193e198ed7f071b/arithmat-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6360fd39bc929429e56eab4d4e6e71ae", "sha256": "9fef6776eddb0e1982880d613ec5f224cf66e20aba52d80c4fc02fff6c58796f"}, "downloads": -1, "filename": "arithmat-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6360fd39bc929429e56eab4d4e6e71ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <3", "size": 93799, "upload_time": "2019-08-16T08:44:38", "upload_time_iso_8601": "2019-08-16T08:44:38.209796Z", "url": "https://files.pythonhosted.org/packages/5d/4b/05256ad2f855a134ae5ac4347297558b237afe87f9e7da1ae08a373910da/arithmat-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "494cfadcc22d17c34e9d00ce1c452400", "sha256": "b8614e0e7f2f6608137c3e9e8b11d3dafb5e8c462a0ec09a96877e0b07f44e7f"}, "downloads": -1, "filename": "arithmat-1.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "494cfadcc22d17c34e9d00ce1c452400", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 34944, "upload_time": "2020-01-26T23:59:21", "upload_time_iso_8601": "2020-01-26T23:59:21.047370Z", "url": "https://files.pythonhosted.org/packages/f8/4e/50fa40a08a02b7b063fe2e34cdeed2ab8e501386a7f82c05b7756f64a8cb/arithmat-1.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f3684c46d181b5b29d524a8f55ba82b", "sha256": "6ed4065ab724eb0551673307d90872aca6b9710f7441fa571817a7bc9337420b"}, "downloads": -1, "filename": "arithmat-1.1.0.tar.gz", "has_sig": false, "md5_digest": "9f3684c46d181b5b29d524a8f55ba82b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 93822, "upload_time": "2020-01-26T23:59:23", "upload_time_iso_8601": "2020-01-26T23:59:23.282359Z", "url": "https://files.pythonhosted.org/packages/7f/9b/69ccd8983169b2509268eda5b80fe811c7204e1acfee055d4c9cc0286b71/arithmat-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "22ce0d4dfd811942f914f0306f91b216", "sha256": "7e51bfcbeb6fcdf9c67c805c2619cd269bbf48b5a6980c4cea9f0e33122ba57f"}, "downloads": -1, "filename": "arithmat-1.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "22ce0d4dfd811942f914f0306f91b216", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 34995, "upload_time": "2020-03-08T18:34:09", "upload_time_iso_8601": "2020-03-08T18:34:09.049833Z", "url": "https://files.pythonhosted.org/packages/1d/88/d6ebcc23b12cb6ee6aeb42d8a3c673c1e358e3cd9fd9a8a3198d6c71a07f/arithmat-1.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a13f69843ec055548c8559a86bc03d3", "sha256": "58e20f093d879b84a7823209ce027dfa60607b75198a75627e2e98305c5481aa"}, "downloads": -1, "filename": "arithmat-1.1.1.tar.gz", "has_sig": false, "md5_digest": "4a13f69843ec055548c8559a86bc03d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 93849, "upload_time": "2020-03-08T18:34:10", "upload_time_iso_8601": "2020-03-08T18:34:10.789691Z", "url": "https://files.pythonhosted.org/packages/a4/07/f194b7701f43ca26ab07d524cb5ca40fe7295ee18052be8044f8b917ec0b/arithmat-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22ce0d4dfd811942f914f0306f91b216", "sha256": "7e51bfcbeb6fcdf9c67c805c2619cd269bbf48b5a6980c4cea9f0e33122ba57f"}, "downloads": -1, "filename": "arithmat-1.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "22ce0d4dfd811942f914f0306f91b216", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 34995, "upload_time": "2020-03-08T18:34:09", "upload_time_iso_8601": "2020-03-08T18:34:09.049833Z", "url": "https://files.pythonhosted.org/packages/1d/88/d6ebcc23b12cb6ee6aeb42d8a3c673c1e358e3cd9fd9a8a3198d6c71a07f/arithmat-1.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a13f69843ec055548c8559a86bc03d3", "sha256": "58e20f093d879b84a7823209ce027dfa60607b75198a75627e2e98305c5481aa"}, "downloads": -1, "filename": "arithmat-1.1.1.tar.gz", "has_sig": false, "md5_digest": "4a13f69843ec055548c8559a86bc03d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 93849, "upload_time": "2020-03-08T18:34:10", "upload_time_iso_8601": "2020-03-08T18:34:10.789691Z", "url": "https://files.pythonhosted.org/packages/a4/07/f194b7701f43ca26ab07d524cb5ca40fe7295ee18052be8044f8b917ec0b/arithmat-1.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:15 2020"}