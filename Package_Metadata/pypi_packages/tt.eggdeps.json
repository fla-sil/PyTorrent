{"info": {"author": "Thomas Lotze", "author_email": "thomas@thomas-lotze.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python", "Topic :: Software Development", "Topic :: Utilities"], "description": "==========\ntt.eggdeps\n==========\n\nThe ``eggdeps`` tool reports dependencies between eggs in the working set.\nDependencies are considered recursively, creating a directed graph. This graph\nis printed to standard output either as plain text, or as an input file to the\ngraphviz tools.\n\n\nUsage\n=====\n\n``eggdeps [options] [specifications]``\n\nSpecifications must follow the usual syntax for specifying distributions of\nPython packages as defined by ``pkg_resources``.\n\n- If any specifications are given, the corresponding distributions will make\n  up the roots of the dependency graph, and the graph will be restricted to\n  their dependencies.\n\n- If no specifications are given, the graph will map the possible dependencies\n  between all eggs in the working set and its roots will be those\n  distributions that aren't dependencies of any other distributions.\n\nOptions\n-------\n\n-h, --help            show this help message and exit\n\n-i IGNORE, --ignore=IGNORE\n                      project names to ignore\n\n-I RE_IGNORE, --re-ignore=RE_IGNORE\n                      regular expression for project names to ignore\n\n-e DEAD_ENDS, --dead-end=DEAD_ENDS\n                      names of projects whose dependencies to ignore\n\n-E RE_DEAD_ENDS, --re-dead-end=RE_DEAD_ENDS\n                      regular expression for project names whose\n                      dependencies to ignore\n\n-x, --no-extras       always omit extra dependencies\n\n-n, --version-numbers print version numbers of active distributions\n\n-1, --once            in plain text output, include each distribution only\n                      once\n\n-t, --terse           in plain text output, omit any hints at unprinted\n                      distributions, such as ellipses\n\n-d, --dot             produce a dot graph\n\n-c, --cluster         in a dot graph, cluster direct dependencies of each\n                      root distribution\n\n-r, --requirements    produce a requirements list\n\n-s, --version-specs   in a requirements list, print loosest possible version\n                      specifications\n\nThe ``-i``, ``-I``, ``-e``, and ``-E`` options may occur multiple times.\n\nIf both the ``-d`` and ``-r`` options are given, the one listed last wins.\nWhen printing requirements lists, ``-v`` wins over ``-s``.\n\nThe script entry point recognizes default values for all options, the variable\nnames being the long option names with any dashes replaced by underscores\n(except for ``--no-extras``, which translates to setting ``extras=False``).\nThis allows for setting defaults using the ``arguments`` option of the egg\nrecipe in a buildout configuration, for example.\n\n\nDetails\n=======\n\nThe goal of ``eggdeps`` is to compute a directed dependency graph with nodes\nthat represent egg distributions from the working set, and edges which\nrepresent either mandatory or extra dependencies between the eggs.\n\nWorking set\n-----------\n\nThe working set ``eggdeps`` operates on is defined by the egg distributions\navailable to the running Python interpreter. For example, these may be the\ndistributions activated by ``easy_install`` or installed in a ``zc.buildout``\nenvironment.\n\nIf the graph is to be calculated to such specifications that not all required\ndistributions are in the working set, the missing ones will be marked in the\noutput, and their dependencies cannot be determined. The same happens if any\ndistribution that is either specified on the command line or required by any\nother distribution is available in the working set, but at a version\nincompatible with the specified requirement.\n\nGraph building strategies\n-------------------------\n\nThe dependency graph may be built following either of two strategies:\n\n:Analysing the whole working set:\n  Nodes correspond exactly to the distributions in the working set. Edges\n  corresponding to all conceivable dependencies between any active\n  distributions are included, but only if the required distribution is active\n  at the correct version. The roots of the graph correspond to those\n  distributions no other active distributions depend upon.\n\n:Starting from one or more eggs:\n  Nodes include all packages depended upon by the specified distributions and\n  extras, as well as their deep dependencies. They may cover only part of the\n  working set, as well as include nodes for distributions that are not active\n  at the required versions or not active at all (so their dependencies can not\n  be followed). The roots of the graph correspond to the specified\n  distributions.\n\nSome information will be lost while building the graph:\n\n- If a dependency occurs both mandatorily and by way of one or more extras, it\n  will be recorded as a plain mandatory dependency.\n\n- If a distribution A with installed extras is a dependency of multiple other\n  distributions, they will all appear to depend on A with all its required\n  extras, even if they individually require none or only a few of them.\n\nReducing the graph\n------------------\n\nIn order to reduce an otherwise big and tangled dependency graph, certain\nnodes and edges may be omitted.\n\n:Ignored nodes:\n  Nodes may be ignored completely by exact name or regular expression\n  matching. This is useful if a very basic distribution is a depedency of a\n  lot of others. An example might be ``setuptools``.\n\n:Dead ends:\n  Distributions may be declared dead ends by exact name or regular expression\n  matching. Dead ends are included in the graph but their own dependencies\n  will be ignored. This allows for large subsystems of distributions to be\n  blotted out except for their \"entry points\". As an example, one might\n  declare ``zope.app.*`` dead ends in the context of ``zope.*`` packages.\n\n:No extras:\n  Reporting and following extra dependencies may be switched off completely.\n  This will probably make most sense when analysing the working set rather\n  than the dependencies of specified distributions.\n\nOutput\n------\n\nThere are two ways ``eggdeps`` can output the computed dependency graph: plain\ntext (the default) and a dot file to be fed to the graphviz tools.\n\nPlain text output\n~~~~~~~~~~~~~~~~~\n\nThe graph is printed to standard output essentially one node per line,\nindented according to nesting depth, and annotated where appropriate. The\ndependencies of each node are sorted after the following criteria:\n\n- Mandatory dependencies are printed before extra requirements.\n\n- Dependencies of each set of extras are grouped, the groups being sorted\n  alphabetically by the names of the extras.\n\n- Dependencies which are either all mandatory or by way of the same set of\n  extras are sorted alphabetically by name.\n\nAs an illustrating example, the following dependency graph was computed for\ntwo Zope packages, one of them required with a \"test\" extra depending on an\nuninstalled egg, and some graph reduction applied::\n\n  zope.annotation\n      zope.app.container *\n      zope.component\n          zope.deferredimport\n              zope.proxy\n          zope.deprecation\n          zope.event\n  zope.dublincore\n      zope.annotation ...\n    [test]\n      (zope.app.testing) *\n\n:Brackets []:\n  If one or more dependencies of a node are due to extra requirements only,\n  the names of those extras are printed in square brackets above their\n  dependencies, half-indented relative to the node which requires them.\n\n:Ellipsis ...:\n  If a node with further dependencies occurs at several places in the graph,\n  the subgraph is printed only once, the other occurences being marked by an\n  ellipsis. The place where the subgraph is printed is chosen such that\n\n  * extra dependencies occur as late as possible in the path, if at all,\n\n  * shallow nesting is preferred,\n\n  * paths early in the alphabet are preferred.\n\n:Parentheses ():\n  If a distribution is not in the working set, its name is parenthesised.\n\n:Asterisk *:\n  Dead ends are marked by an asterisk.\n\nDot file output\n~~~~~~~~~~~~~~~\n\nIn a dot graphics, nodes and edges are not annotated with text but colored.\n\nThese are the color codes for nodes, later ones overriding earlier ones in\ncases where more than one color is appropriate:\n\n:Green:\n  Nodes corresponding to the roots of the graph.\n\n:Yellow:\n  Direct dependencies of any root nodes, whether mandatory or through extras.\n\n:Lightgrey:\n  Dead ends.\n\n:Red:\n  Nodes for eggs installed at a version incompatible with some requirement, or\n  not installed at all.\n\nEdge colors:\n\n:Black:\n  Mandatory dependencies.\n\n:Lightgrey:\n  Extra dependencies.\n\nOther than being highlighted by color, root nodes and their direct\ndependencies may be clustered. ``eggdeps`` tries to put each root node in its\nown cluster. However, if two or more root nodes share any direct dependencies,\nthey will share a cluster as well.\n\nRequirements list\n~~~~~~~~~~~~~~~~~\n\nAll the distributions included in the graph may be output as the Python\nrepresentation of a list of requirement specifications, either\n\n- listing bare package names,\n\n- including the exact versions as they occur in the working set, or\n\n- specifying complex version requirements that take into account all version\n  requirements made for the distribution in question (but disregard extras\n  completely for the time being). Complex version requirements always require\n  at least the version that occurs in the working set, assuming that we cannot\n  know the version requirements of past versions but reasonably assume that\n  requirements might stay the same for future versions.\n\nThe list is sorted alphabetically by distribution name.\n\n\n.. Local Variables:\n.. mode: rst\n.. End:\n\n\n================\nAbout tt.eggdeps\n================\n\n:Fork Maintainer:\n    `Gary Reynolds <gary@touch.asn.au>`_\n\n:Original Author:\n    `Thomas Lotze <http://thomas-lotze.de/>`_ <thomas@thomas-lotze.de>\n\n:Web home:\n    http://thomas-lotze.de/en/software/eggdeps/\n\n:Online documentation:\n    https://github.com/goodtune/tt.eggdeps\n\n:PyPI page:\n    http://pypi.python.org/pypi/tt.eggdeps/\n\n:Git home:\n    git@github.com:goodtune/tt.eggdeps.git\n\n:Git web view:\n    https://github.com/goodtune/tt.eggdeps\n\n:Current change log:\n    https://svn.thomas-lotze.de/repos/public/tl.eggdeps/trunk/CHANGES.txt\n\n\n.. Local Variables:\n.. mode: rst\n.. End:", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://thomas-lotze.de/en/software/eggdeps/", "keywords": "egg eggs dependencies dependency graph tree", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "tt.eggdeps", "package_url": "https://pypi.org/project/tt.eggdeps/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tt.eggdeps/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://thomas-lotze.de/en/software/eggdeps/"}, "release_url": "https://pypi.org/project/tt.eggdeps/0.5/", "requires_dist": null, "requires_python": null, "summary": "Compute a dependency graph between active Python eggs.", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"tt-eggdeps\">\n<h2>tt.eggdeps</h2>\n<p>The <tt>eggdeps</tt> tool reports dependencies between eggs in the working set.\nDependencies are considered recursively, creating a directed graph. This graph\nis printed to standard output either as plain text, or as an input file to the\ngraphviz tools.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p><tt>eggdeps [options] [specifications]</tt></p>\n<p>Specifications must follow the usual syntax for specifying distributions of\nPython packages as defined by <tt>pkg_resources</tt>.</p>\n<ul>\n<li>If any specifications are given, the corresponding distributions will make\nup the roots of the dependency graph, and the graph will be restricted to\ntheir dependencies.</li>\n<li>If no specifications are given, the graph will map the possible dependencies\nbetween all eggs in the working set and its roots will be those\ndistributions that aren\u2019t dependencies of any other distributions.</li>\n</ul>\n<div id=\"options\">\n<h4>Options</h4>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-i <var>IGNORE</var></span>, <span class=\"option\">--ignore=<var>IGNORE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>project names to ignore</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-I <var>RE_IGNORE</var></span>, <span class=\"option\">--re-ignore=<var>RE_IGNORE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>regular expression for project names to ignore</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-e <var>DEAD_ENDS</var></span>, <span class=\"option\">--dead-end=<var>DEAD_ENDS</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>names of projects whose dependencies to ignore</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-E <var>RE_DEAD_ENDS</var></span>, <span class=\"option\">--re-dead-end=<var>RE_DEAD_ENDS</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>regular expression for project names whose\ndependencies to ignore</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-x</span>, <span class=\"option\">--no-extras</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>always omit extra dependencies</td></tr>\n</tbody>\n</table>\n<p>-n, \u2013version-numbers print version numbers of active distributions</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-1</span>, <span class=\"option\">--once</span></kbd></td>\n<td>in plain text output, include each distribution only\nonce</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-t</span>, <span class=\"option\">--terse</span></kbd></td>\n<td>in plain text output, omit any hints at unprinted\ndistributions, such as ellipses</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d</span>, <span class=\"option\">--dot</span></kbd></td>\n<td>produce a dot graph</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c</span>, <span class=\"option\">--cluster</span></kbd></td>\n<td>in a dot graph, cluster direct dependencies of each\nroot distribution</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-r</span>, <span class=\"option\">--requirements</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>produce a requirements list</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-s</span>, <span class=\"option\">--version-specs</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>in a requirements list, print loosest possible version\nspecifications</td></tr>\n</tbody>\n</table>\n<p>The <tt><span class=\"pre\">-i</span></tt>, <tt><span class=\"pre\">-I</span></tt>, <tt><span class=\"pre\">-e</span></tt>, and <tt><span class=\"pre\">-E</span></tt> options may occur multiple times.</p>\n<p>If both the <tt><span class=\"pre\">-d</span></tt> and <tt><span class=\"pre\">-r</span></tt> options are given, the one listed last wins.\nWhen printing requirements lists, <tt><span class=\"pre\">-v</span></tt> wins over <tt><span class=\"pre\">-s</span></tt>.</p>\n<p>The script entry point recognizes default values for all options, the variable\nnames being the long option names with any dashes replaced by underscores\n(except for <tt><span class=\"pre\">--no-extras</span></tt>, which translates to setting <tt>extras=False</tt>).\nThis allows for setting defaults using the <tt>arguments</tt> option of the egg\nrecipe in a buildout configuration, for example.</p>\n</div>\n</div>\n<div id=\"details\">\n<h3>Details</h3>\n<p>The goal of <tt>eggdeps</tt> is to compute a directed dependency graph with nodes\nthat represent egg distributions from the working set, and edges which\nrepresent either mandatory or extra dependencies between the eggs.</p>\n<div id=\"working-set\">\n<h4>Working set</h4>\n<p>The working set <tt>eggdeps</tt> operates on is defined by the egg distributions\navailable to the running Python interpreter. For example, these may be the\ndistributions activated by <tt>easy_install</tt> or installed in a <tt>zc.buildout</tt>\nenvironment.</p>\n<p>If the graph is to be calculated to such specifications that not all required\ndistributions are in the working set, the missing ones will be marked in the\noutput, and their dependencies cannot be determined. The same happens if any\ndistribution that is either specified on the command line or required by any\nother distribution is available in the working set, but at a version\nincompatible with the specified requirement.</p>\n</div>\n<div id=\"graph-building-strategies\">\n<h4>Graph building strategies</h4>\n<p>The dependency graph may be built following either of two strategies:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Analysing the whole working set:</th></tr>\n<tr><td>\u00a0</td><td>Nodes correspond exactly to the distributions in the working set. Edges\ncorresponding to all conceivable dependencies between any active\ndistributions are included, but only if the required distribution is active\nat the correct version. The roots of the graph correspond to those\ndistributions no other active distributions depend upon.</td>\n</tr>\n<tr><th>Starting from one or more eggs:</th></tr>\n<tr><td>\u00a0</td><td>Nodes include all packages depended upon by the specified distributions and\nextras, as well as their deep dependencies. They may cover only part of the\nworking set, as well as include nodes for distributions that are not active\nat the required versions or not active at all (so their dependencies can not\nbe followed). The roots of the graph correspond to the specified\ndistributions.</td>\n</tr>\n</tbody>\n</table>\n<p>Some information will be lost while building the graph:</p>\n<ul>\n<li>If a dependency occurs both mandatorily and by way of one or more extras, it\nwill be recorded as a plain mandatory dependency.</li>\n<li>If a distribution A with installed extras is a dependency of multiple other\ndistributions, they will all appear to depend on A with all its required\nextras, even if they individually require none or only a few of them.</li>\n</ul>\n</div>\n<div id=\"reducing-the-graph\">\n<h4>Reducing the graph</h4>\n<p>In order to reduce an otherwise big and tangled dependency graph, certain\nnodes and edges may be omitted.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Ignored nodes:</th><td>Nodes may be ignored completely by exact name or regular expression\nmatching. This is useful if a very basic distribution is a depedency of a\nlot of others. An example might be <tt>setuptools</tt>.</td>\n</tr>\n<tr><th>Dead ends:</th><td>Distributions may be declared dead ends by exact name or regular expression\nmatching. Dead ends are included in the graph but their own dependencies\nwill be ignored. This allows for large subsystems of distributions to be\nblotted out except for their \u201centry points\u201d. As an example, one might\ndeclare <tt>zope.app.*</tt> dead ends in the context of <tt>zope.*</tt> packages.</td>\n</tr>\n<tr><th>No extras:</th><td>Reporting and following extra dependencies may be switched off completely.\nThis will probably make most sense when analysing the working set rather\nthan the dependencies of specified distributions.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"output\">\n<h4>Output</h4>\n<p>There are two ways <tt>eggdeps</tt> can output the computed dependency graph: plain\ntext (the default) and a dot file to be fed to the graphviz tools.</p>\n<div id=\"plain-text-output\">\n<h5>Plain text output</h5>\n<p>The graph is printed to standard output essentially one node per line,\nindented according to nesting depth, and annotated where appropriate. The\ndependencies of each node are sorted after the following criteria:</p>\n<ul>\n<li>Mandatory dependencies are printed before extra requirements.</li>\n<li>Dependencies of each set of extras are grouped, the groups being sorted\nalphabetically by the names of the extras.</li>\n<li>Dependencies which are either all mandatory or by way of the same set of\nextras are sorted alphabetically by name.</li>\n</ul>\n<p>As an illustrating example, the following dependency graph was computed for\ntwo Zope packages, one of them required with a \u201ctest\u201d extra depending on an\nuninstalled egg, and some graph reduction applied:</p>\n<pre>zope.annotation\n    zope.app.container *\n    zope.component\n        zope.deferredimport\n            zope.proxy\n        zope.deprecation\n        zope.event\nzope.dublincore\n    zope.annotation ...\n  [test]\n    (zope.app.testing) *\n</pre>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Brackets []:</th><td><p>If one or more dependencies of a node are due to extra requirements only,\nthe names of those extras are printed in square brackets above their\ndependencies, half-indented relative to the node which requires them.</p>\n</td>\n</tr>\n<tr><th>Ellipsis \u2026:</th><td><p>If a node with further dependencies occurs at several places in the graph,\nthe subgraph is printed only once, the other occurences being marked by an\nellipsis. The place where the subgraph is printed is chosen such that</p>\n<ul>\n<li>extra dependencies occur as late as possible in the path, if at all,</li>\n<li>shallow nesting is preferred,</li>\n<li>paths early in the alphabet are preferred.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Parentheses ():</th><td><p>If a distribution is not in the working set, its name is parenthesised.</p>\n</td>\n</tr>\n<tr><th>Asterisk *:</th><td><p>Dead ends are marked by an asterisk.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"dot-file-output\">\n<h5>Dot file output</h5>\n<p>In a dot graphics, nodes and edges are not annotated with text but colored.</p>\n<p>These are the color codes for nodes, later ones overriding earlier ones in\ncases where more than one color is appropriate:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Green:</th><td>Nodes corresponding to the roots of the graph.</td>\n</tr>\n<tr><th>Yellow:</th><td>Direct dependencies of any root nodes, whether mandatory or through extras.</td>\n</tr>\n<tr><th>Lightgrey:</th><td>Dead ends.</td>\n</tr>\n<tr><th>Red:</th><td>Nodes for eggs installed at a version incompatible with some requirement, or\nnot installed at all.</td>\n</tr>\n</tbody>\n</table>\n<p>Edge colors:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Black:</th><td>Mandatory dependencies.</td>\n</tr>\n<tr><th>Lightgrey:</th><td>Extra dependencies.</td>\n</tr>\n</tbody>\n</table>\n<p>Other than being highlighted by color, root nodes and their direct\ndependencies may be clustered. <tt>eggdeps</tt> tries to put each root node in its\nown cluster. However, if two or more root nodes share any direct dependencies,\nthey will share a cluster as well.</p>\n</div>\n<div id=\"requirements-list\">\n<h5>Requirements list</h5>\n<p>All the distributions included in the graph may be output as the Python\nrepresentation of a list of requirement specifications, either</p>\n<ul>\n<li>listing bare package names,</li>\n<li>including the exact versions as they occur in the working set, or</li>\n<li>specifying complex version requirements that take into account all version\nrequirements made for the distribution in question (but disregard extras\ncompletely for the time being). Complex version requirements always require\nat least the version that occurs in the working set, assuming that we cannot\nknow the version requirements of past versions but reasonably assume that\nrequirements might stay the same for future versions.</li>\n</ul>\n<p>The list is sorted alphabetically by distribution name.</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"about-tt-eggdeps\">\n<h2>About tt.eggdeps</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Fork Maintainer:</th></tr>\n<tr><td>\u00a0</td><td><a href=\"mailto:gary%40touch.asn.au\">Gary Reynolds</a></td>\n</tr>\n<tr><th>Original Author:</th></tr>\n<tr><td>\u00a0</td><td><a href=\"http://thomas-lotze.de/\" rel=\"nofollow\">Thomas Lotze</a> &lt;<a href=\"mailto:thomas%40thomas-lotze.de\">thomas<span>@</span>thomas-lotze<span>.</span>de</a>&gt;</td>\n</tr>\n<tr><th>Web home:</th><td><a href=\"http://thomas-lotze.de/en/software/eggdeps/\" rel=\"nofollow\">http://thomas-lotze.de/en/software/eggdeps/</a></td>\n</tr>\n<tr><th>Online documentation:</th></tr>\n<tr><td>\u00a0</td><td><a href=\"https://github.com/goodtune/tt.eggdeps\" rel=\"nofollow\">https://github.com/goodtune/tt.eggdeps</a></td>\n</tr>\n<tr><th>PyPI page:</th><td><a href=\"http://pypi.python.org/pypi/tt.eggdeps/\" rel=\"nofollow\">http://pypi.python.org/pypi/tt.eggdeps/</a></td>\n</tr>\n<tr><th>Git home:</th><td><a href=\"mailto:git%40github.com\">git<span>@</span>github<span>.</span>com</a>:goodtune/tt.eggdeps.git</td>\n</tr>\n<tr><th>Git web view:</th><td><a href=\"https://github.com/goodtune/tt.eggdeps\" rel=\"nofollow\">https://github.com/goodtune/tt.eggdeps</a></td>\n</tr>\n<tr><th>Current change log:</th></tr>\n<tr><td>\u00a0</td><td><a href=\"https://svn.thomas-lotze.de/repos/public/tl.eggdeps/trunk/CHANGES.txt\" rel=\"nofollow\">https://svn.thomas-lotze.de/repos/public/tl.eggdeps/trunk/CHANGES.txt</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 1221795, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "9dfd43599a820184fc62f955383ca2d3", "sha256": "4faf3a744b1d71854dc2b9df7308703a3c19f861626c0783343304cb7ebd5fec"}, "downloads": -1, "filename": "tt.eggdeps-0.5.tar.gz", "has_sig": false, "md5_digest": "9dfd43599a820184fc62f955383ca2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20708, "upload_time": "2014-09-12T10:23:55", "upload_time_iso_8601": "2014-09-12T10:23:55.560990Z", "url": "https://files.pythonhosted.org/packages/0f/4a/c414ea100670453f66e5857c9b8c741ff7d8b15cad39ff02983438334d19/tt.eggdeps-0.5.tar.gz", "yanked": false}], "0.5a1": [{"comment_text": "", "digests": {"md5": "5c951a660084f44543c3cb20698f8878", "sha256": "45acf811da43435fb641cc9e05876aba4fb4ea70a3b2e91d302fc4413cca059d"}, "downloads": -1, "filename": "tt.eggdeps-0.5a1.tar.gz", "has_sig": false, "md5_digest": "5c951a660084f44543c3cb20698f8878", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20699, "upload_time": "2014-01-25T23:07:39", "upload_time_iso_8601": "2014-01-25T23:07:39.506539Z", "url": "https://files.pythonhosted.org/packages/55/42/947d4ef114be568c2ab48277f518cc1dae30a9201914c3d0e23b991f200c/tt.eggdeps-0.5a1.tar.gz", "yanked": false}], "0.5dev": [{"comment_text": "", "digests": {"md5": "3cfd6068938c02b7bbf74a4d1f2eb218", "sha256": "0c06f2c00f4d77885a2303d8f53e4f53dbfacf000cb995621fc60cb7792bacef"}, "downloads": -1, "filename": "tt.eggdeps-0.5dev.tar.gz", "has_sig": false, "md5_digest": "3cfd6068938c02b7bbf74a4d1f2eb218", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17981, "upload_time": "2014-01-25T08:25:31", "upload_time_iso_8601": "2014-01-25T08:25:31.180180Z", "url": "https://files.pythonhosted.org/packages/c3/7a/90472e43ec4290aa1a6de10441d06ecc7e20efdca5189e2f7df02e77ddeb/tt.eggdeps-0.5dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9dfd43599a820184fc62f955383ca2d3", "sha256": "4faf3a744b1d71854dc2b9df7308703a3c19f861626c0783343304cb7ebd5fec"}, "downloads": -1, "filename": "tt.eggdeps-0.5.tar.gz", "has_sig": false, "md5_digest": "9dfd43599a820184fc62f955383ca2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20708, "upload_time": "2014-09-12T10:23:55", "upload_time_iso_8601": "2014-09-12T10:23:55.560990Z", "url": "https://files.pythonhosted.org/packages/0f/4a/c414ea100670453f66e5857c9b8c741ff7d8b15cad39ff02983438334d19/tt.eggdeps-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:45:04 2020"}