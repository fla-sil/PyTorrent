{"info": {"author": "Julian Triet", "author_email": "julian.triet@openinteractive.ch", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "=====\nDjango-Lazyloader\n=====\n\nDjango-Lazyloader is a simple Django app which helps displaying Django objects as either HTML or JSON.\n\nQuick start\n-----------\n\n1.  Add \"lazyloader\" to your INSTALLED_APPS setting like this::\n\n        INSTALLED_APPS = (\n            ...\n            'lazyloader',\n        )\n\n2.  Include the lazyloader URLconf in your project urls.py like this::\n\n        url(r'^lazyloader/', include('lazyloader.urls')),\n\n3.  Run `python manage.py migrate` to create the demo models.\n\n4.  Run `python manage.py loaddata lazyloader_initial.json` to load the initial data for the live demo.\n\n5.  Run `python manage.py collectstatic` to collect the static files of the live demo.\n\n6.  To allow your models to be displayed by Django-Lazyloader, define a VALID_LAZY_MODELS variable in your settings.py\n    file like this::\n\n        VALID_LAZY_MODELS = [\n            'MyApp.MyModel',\n            'MyOtherApp.MyOtherModel',\n        ]\n\n7.  Create html templates and assign them to your models by adding a LAZY_TEMPLATES variable to your project's\n    settings.py file like this::\n\n        LAZY_TEMPLATES = {\n            'MyApp.MyModel': 'myapp/mylazytemplate.html',\n            'MyOtherApp.MyOtherModel': 'myotherapp/myotherlazytemplate.html'\n        }\n\n\n8.  Run the development server and visit http://localhost:8000/lazyloader/demo for the live demo.\n\n9.  To access your the first 10 entries of your model 'Myapp.MyModel' in the JSON format visit\n    http://localhost:8000/lazyloader/myapp-mymodel-json-0-10/\n\n10. To access your the first 10 entries of your model 'Myapp.MyModel' in the HTML format visit\n    http://localhost:8000/lazyloader/myapp-mymodel-html-0-10/\n\n11. To create custom queries you can add the get parameters 'column' and 'search_value' to your url:\n    http://localhost:8000/lazyloader/myapp-mymodel-html-0-10/?column=name&search_value=smith\n    This url will execute a django-query that looks like this::\n\n        MyApp.MyModel.objects.filter(name=smith)\n\n12. The variable that is passed to the templates is called 'models' so if you want to iterate over the queryset in a\n    template you have to do it like this::\n\n        {% for model in models %}\n            {{ model.fieldname }}\n        {% endfor %}", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "GNU General Public License v3 (GPLv3)", "maintainer": null, "maintainer_email": null, "name": "django-lazyloader", "package_url": "https://pypi.org/project/django-lazyloader/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-lazyloader/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/django-lazyloader/0.2/", "requires_dist": null, "requires_python": null, "summary": "Lazy-Loading module for Django", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            =====<br>Django-Lazyloader<br>=====<br><br>Django-Lazyloader is a simple Django app which helps displaying Django objects as either HTML or JSON.<br><br>Quick start<br>-----------<br><br>1.  Add \"lazyloader\" to your INSTALLED_APPS setting like this::<br><br>        INSTALLED_APPS = (<br>            ...<br>            'lazyloader',<br>        )<br><br>2.  Include the lazyloader URLconf in your project urls.py like this::<br><br>        url(r'^lazyloader/', include('lazyloader.urls')),<br><br>3.  Run `python manage.py migrate` to create the demo models.<br><br>4.  Run `python manage.py loaddata lazyloader_initial.json` to load the initial data for the live demo.<br><br>5.  Run `python manage.py collectstatic` to collect the static files of the live demo.<br><br>6.  To allow your models to be displayed by Django-Lazyloader, define a VALID_LAZY_MODELS variable in your settings.py<br>    file like this::<br><br>        VALID_LAZY_MODELS = [<br>            'MyApp.MyModel',<br>            'MyOtherApp.MyOtherModel',<br>        ]<br><br>7.  Create html templates and assign them to your models by adding a LAZY_TEMPLATES variable to your project's<br>    settings.py file like this::<br><br>        LAZY_TEMPLATES = {<br>            'MyApp.MyModel': 'myapp/mylazytemplate.html',<br>            'MyOtherApp.MyOtherModel': 'myotherapp/myotherlazytemplate.html'<br>        }<br><br><br>8.  Run the development server and visit http://localhost:8000/lazyloader/demo for the live demo.<br><br>9.  To access your the first 10 entries of your model 'Myapp.MyModel' in the JSON format visit<br>    http://localhost:8000/lazyloader/myapp-mymodel-json-0-10/<br><br>10. To access your the first 10 entries of your model 'Myapp.MyModel' in the HTML format visit<br>    http://localhost:8000/lazyloader/myapp-mymodel-html-0-10/<br><br>11. To create custom queries you can add the get parameters 'column' and 'search_value' to your url:<br>    http://localhost:8000/lazyloader/myapp-mymodel-html-0-10/?column=name&amp;search_value=smith<br>    This url will execute a django-query that looks like this::<br><br>        MyApp.MyModel.objects.filter(name=smith)<br><br>12. The variable that is passed to the templates is called 'models' so if you want to iterate over the queryset in a<br>    template you have to do it like this::<br><br>        {% for model in models %}<br>            {{ model.fieldname }}<br>        {% endfor %}\n          </div>"}, "last_serial": 1469705, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ecb51cfcf7f14ba90ed72dcbdbc73013", "sha256": "409c2a208ef527ba122f43fa2a63168658f6e3209da908c774e2efbcb00359e8"}, "downloads": -1, "filename": "django-lazyloader-0.1.tar.gz", "has_sig": false, "md5_digest": "ecb51cfcf7f14ba90ed72dcbdbc73013", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40592, "upload_time": "2015-03-17T10:57:15", "upload_time_iso_8601": "2015-03-17T10:57:15.456275Z", "url": "https://files.pythonhosted.org/packages/3f/da/bb4e4023115147c8a09d72b5470b64111971230eef644d865ad6d1ad6b0b/django-lazyloader-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3bc88e16ca3b0a1835d7cb7b27ace291", "sha256": "243d011adfff759c3f7a2a11f0e0861966b7dacfdc7451ebc9c8ca77d33dc034"}, "downloads": -1, "filename": "django-lazyloader-0.2.tar.gz", "has_sig": false, "md5_digest": "3bc88e16ca3b0a1835d7cb7b27ace291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40851, "upload_time": "2015-03-20T12:00:20", "upload_time_iso_8601": "2015-03-20T12:00:20.790737Z", "url": "https://files.pythonhosted.org/packages/6d/3f/79fec93303772a7637b20e294739fda00e206a7ca2db183e33164056841d/django-lazyloader-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3bc88e16ca3b0a1835d7cb7b27ace291", "sha256": "243d011adfff759c3f7a2a11f0e0861966b7dacfdc7451ebc9c8ca77d33dc034"}, "downloads": -1, "filename": "django-lazyloader-0.2.tar.gz", "has_sig": false, "md5_digest": "3bc88e16ca3b0a1835d7cb7b27ace291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40851, "upload_time": "2015-03-20T12:00:20", "upload_time_iso_8601": "2015-03-20T12:00:20.790737Z", "url": "https://files.pythonhosted.org/packages/6d/3f/79fec93303772a7637b20e294739fda00e206a7ca2db183e33164056841d/django-lazyloader-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:24 2020"}