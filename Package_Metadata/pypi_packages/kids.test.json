{"info": {"author": "Valentin Lab", "author_email": "valentin.lab@kalysto.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=========================\nkids.test\n=========================\n\n.. image:: http://img.shields.io/pypi/v/kids.test.svg?style=flat\n   :target: https://pypi.python.org/pypi/kids.test/\n   :alt: Latest PyPI version\n\n.. image:: http://img.shields.io/pypi/dm/kids.test.svg?style=flat\n   :target: https://pypi.python.org/pypi/kids.test/\n   :alt: Number of PyPI downloads\n\n.. image:: http://img.shields.io/travis/0k/kids.test/master.svg?style=flat\n   :target: https://travis-ci.org/0k/kids.test/\n   :alt: Travis CI build status\n\n.. image:: http://img.shields.io/coveralls/0k/kids.test/master.svg?style=flat\n   :target: https://coveralls.io/r/0k/kids.test\n   :alt: Test coverage\n\n\n\n``kids.test`` is a Python library providing helpers when writing tests\nin python. It's part of 'Kids' (for Keep It Dead Simple) library.\n\n\nMaturity\n========\n\nThis is alpha release. It's only a repository with a few recipes and holds very\nfew interests. It might be more consistent in the future.\n\nIt lacks any sensible documentation and has nothing ground breaking in its core.\n\n\nFeatures\n========\n\nusing ``kids.test``:\n\n- You can use a replacement ``unittest`` class that ensure that you have some\n  python3 additions like ``assertContains`` or ``assertRegex``.\n- You can use ``BaseTmpDirTest`` that creates a temporary directory before\n  executing tests, and delete it at the end.\n\n\nInstallation\n============\n\nYou don't need to download the GIT version of the code as ``kids.test`` is\navailable on the PyPI. So you should be able to run::\n\n    pip install kids.test\n\nIf you have downloaded the GIT sources, then you could add install\nthe current version via traditional::\n\n    python setup.py install\n\nAnd if you don't have the GIT sources but would like to get the latest\nmaster or branch from github, you could also::\n\n    pip install git+https://github.com/0k/kids.test\n\nOr even select a specific revision (branch/tag/commit)::\n\n    pip install git+https://github.com/0k/kids.test@master\n\n\nUsage\n=====\n\nTest\n----\n\n``Test`` is the base class for all unittest in ``kids.*`` framework. It provides\nsome missing ``.assert*()`` method to python 2::\n\n    >>> from kids.test import Test, run\n\n    >>> class MyTest(Test):\n    ...    def test_foo(self):\n    ...        self.assertRegex('foo', 'fo+')\n    ...        self.assertContains('bar foo hop', 'foo')\n    ...        self.assertNotContains('bar fou hop', 'foo')\n    ...    def test_failing_regex(self):\n    ...        self.assertRegex('foo', 'xfo+')\n    ...    def test_failing_contains(self):\n    ...        self.assertContains('bar fou hop', 'foo')\n    ...    def test_failing_not_contains(self):\n    ...        self.assertNotContains('bar foo hop', 'foo')\n\n    >>> run(MyTest)\n    FFF.\n    ...\n    AssertionError: ...'bar fou hop' should contain 'foo'.\n    ...\n    AssertionError: ...'bar foo hop' should not contain 'foo'.\n    ...\n    AssertionError: ...'foo' should match regex 'xfo+'.\n    ...\n    Ran 4 tests in ...s\n    <BLANKLINE>\n    FAILED (failures=3)\n    <BLANKLINE>\n\n\nBaseTmpDirTest\n--------------\n\nThis unittest class will ensure that the current work dir (CWD) before\nexecuting test, is an empty temporary directory. And it'll ensure this directory\nwill be deleted at the end::\n\n    >>> from kids.test import BaseTmpDirTest, run\n\n    >>> class MyTest(BaseTmpDirTest):\n    ...    def test_foo(self):\n    ...        import glob\n    ...        self.assertEqual(len(glob.glob('*')), 0)\n\n    >>> run(MyTest)\n    .\n    ----------------------------------------------------------------------\n    Ran 1 test in ...s\n    <BLANKLINE>\n    OK\n    <BLANKLINE>\n\n\nHere's what happens behing the scene, let's use minimock to show the\ncreation and deletion of directory::\n\n    >>> import minimock\n\n    >>> import tempfile, shutil, os\n\n    >>> minimock.mock('tempfile.mkdtemp', returns='/tmp/tempdir')\n    >>> minimock.mock('os.chdir', returns='/tmp/tempdir')\n    >>> minimock.mock('shutil.rmtree')\n\n    >>> class MyTest(BaseTmpDirTest):\n    ...    def test_foo(self):\n    ...        print(\"running test\")\n    ...        self.assertTrue(True)\n\n    >>> run(MyTest)\n    Called tempfile.mkdtemp()\n    Called os.chdir('/tmp/tempdir')\n    running test\n    Called os.chdir('...')\n    Called shutil.rmtree('/tmp/tempdir')\n    .\n    ----------------------------------------------------------------------\n    Ran 1 test in ...s\n    <BLANKLINE>\n    OK\n    <BLANKLINE>\n\n    >>> minimock.restore()\n\nContributing\n============\n\nAny suggestion or issue is welcome. Push request are very welcome,\nplease check out the guidelines.\n\n\nPush Request Guidelines\n-----------------------\n\nYou can send any code. I'll look at it and will integrate it myself in\nthe code base and leave you as the author. This process can take time and\nit'll take less time if you follow the following guidelines:\n\n- check your code with PEP8 or pylint. Try to stick to 80 columns wide.\n- separate your commits per smallest concern.\n- each commit should pass the tests (to allow easy bisect)\n- each functionality/bugfix commit should contain the code, tests,\n  and doc.\n- prior minor commit with typographic or code cosmetic changes are\n  very welcome. These should be tagged in their commit summary with\n  ``!minor``.\n- the commit message should follow gitchangelog rules (check the git\n  log to get examples)\n- if the commit fixes an issue or finished the implementation of a\n  feature, please mention it in the summary.\n\nIf you have some questions about guidelines which is not answered here,\nplease check the current ``git log``, you might find previous commit that\nwould show you how to deal with your issue.\n\n\nLicense\n=======\n\nCopyright (c) 2015 Valentin Lab.\n\nLicensed under the `BSD License`_.\n\n.. _BSD License: http://raw.github.com/0k/kids.test/master/LICENSE\n\nChangelog\n=========\n\n0.0.1 (2015-02-04)\n------------------\n\n- First import. [Valentin Lab]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/0k/kids.test", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "kids.test", "package_url": "https://pypi.org/project/kids.test/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/kids.test/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/0k/kids.test"}, "release_url": "https://pypi.org/project/kids.test/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Kids test library.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/kids.test/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6af4168f6a79f45dd96f05272fe349cab4716a88/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f6b6964732e746573742e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/kids.test/\" rel=\"nofollow\"><img alt=\"Number of PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab3dd072d9a08a19e306e11c3aafe0323630e5fd/687474703a2f2f696d672e736869656c64732e696f2f707970692f646d2f6b6964732e746573742e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://travis-ci.org/0k/kids.test/\" rel=\"nofollow\"><img alt=\"Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f73497ca0dc0701faf77f0b2a9446afb6f3c7fc/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f306b2f6b6964732e746573742f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://coveralls.io/r/0k/kids.test\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6363791de63a03af220b07bfcd75b504cf864a2/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f306b2f6b6964732e746573742f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<p><tt>kids.test</tt> is a Python library providing helpers when writing tests\nin python. It\u2019s part of \u2018Kids\u2019 (for Keep It Dead Simple) library.</p>\n<div id=\"maturity\">\n<h2>Maturity</h2>\n<p>This is alpha release. It\u2019s only a repository with a few recipes and holds very\nfew interests. It might be more consistent in the future.</p>\n<p>It lacks any sensible documentation and has nothing ground breaking in its core.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>using <tt>kids.test</tt>:</p>\n<ul>\n<li>You can use a replacement <tt>unittest</tt> class that ensure that you have some\npython3 additions like <tt>assertContains</tt> or <tt>assertRegex</tt>.</li>\n<li>You can use <tt>BaseTmpDirTest</tt> that creates a temporary directory before\nexecuting tests, and delete it at the end.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You don\u2019t need to download the GIT version of the code as <tt>kids.test</tt> is\navailable on the PyPI. So you should be able to run:</p>\n<pre>pip install kids.test\n</pre>\n<p>If you have downloaded the GIT sources, then you could add install\nthe current version via traditional:</p>\n<pre>python setup.py install\n</pre>\n<p>And if you don\u2019t have the GIT sources but would like to get the latest\nmaster or branch from github, you could also:</p>\n<pre>pip install git+https://github.com/0k/kids.test\n</pre>\n<p>Or even select a specific revision (branch/tag/commit):</p>\n<pre>pip install git+https://github.com/0k/kids.test@master\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"test\">\n<h3>Test</h3>\n<p><tt>Test</tt> is the base class for all unittest in <tt>kids.*</tt> framework. It provides\nsome missing <tt><span class=\"pre\">.assert*()</span></tt> method to python 2:</p>\n<pre>&gt;&gt;&gt; from kids.test import Test, run\n\n&gt;&gt;&gt; class MyTest(Test):\n...    def test_foo(self):\n...        self.assertRegex('foo', 'fo+')\n...        self.assertContains('bar foo hop', 'foo')\n...        self.assertNotContains('bar fou hop', 'foo')\n...    def test_failing_regex(self):\n...        self.assertRegex('foo', 'xfo+')\n...    def test_failing_contains(self):\n...        self.assertContains('bar fou hop', 'foo')\n...    def test_failing_not_contains(self):\n...        self.assertNotContains('bar foo hop', 'foo')\n\n&gt;&gt;&gt; run(MyTest)\nFFF.\n...\nAssertionError: ...'bar fou hop' should contain 'foo'.\n...\nAssertionError: ...'bar foo hop' should not contain 'foo'.\n...\nAssertionError: ...'foo' should match regex 'xfo+'.\n...\nRan 4 tests in ...s\n&lt;BLANKLINE&gt;\nFAILED (failures=3)\n&lt;BLANKLINE&gt;\n</pre>\n</div>\n<div id=\"basetmpdirtest\">\n<h3>BaseTmpDirTest</h3>\n<p>This unittest class will ensure that the current work dir (CWD) before\nexecuting test, is an empty temporary directory. And it\u2019ll ensure this directory\nwill be deleted at the end:</p>\n<pre>&gt;&gt;&gt; from kids.test import BaseTmpDirTest, run\n\n&gt;&gt;&gt; class MyTest(BaseTmpDirTest):\n...    def test_foo(self):\n...        import glob\n...        self.assertEqual(len(glob.glob('*')), 0)\n\n&gt;&gt;&gt; run(MyTest)\n.\n----------------------------------------------------------------------\nRan 1 test in ...s\n&lt;BLANKLINE&gt;\nOK\n&lt;BLANKLINE&gt;\n</pre>\n<p>Here\u2019s what happens behing the scene, let\u2019s use minimock to show the\ncreation and deletion of directory:</p>\n<pre>&gt;&gt;&gt; import minimock\n\n&gt;&gt;&gt; import tempfile, shutil, os\n\n&gt;&gt;&gt; minimock.mock('tempfile.mkdtemp', returns='/tmp/tempdir')\n&gt;&gt;&gt; minimock.mock('os.chdir', returns='/tmp/tempdir')\n&gt;&gt;&gt; minimock.mock('shutil.rmtree')\n\n&gt;&gt;&gt; class MyTest(BaseTmpDirTest):\n...    def test_foo(self):\n...        print(\"running test\")\n...        self.assertTrue(True)\n\n&gt;&gt;&gt; run(MyTest)\nCalled tempfile.mkdtemp()\nCalled os.chdir('/tmp/tempdir')\nrunning test\nCalled os.chdir('...')\nCalled shutil.rmtree('/tmp/tempdir')\n.\n----------------------------------------------------------------------\nRan 1 test in ...s\n&lt;BLANKLINE&gt;\nOK\n&lt;BLANKLINE&gt;\n\n&gt;&gt;&gt; minimock.restore()\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Any suggestion or issue is welcome. Push request are very welcome,\nplease check out the guidelines.</p>\n<div id=\"push-request-guidelines\">\n<h3>Push Request Guidelines</h3>\n<p>You can send any code. I\u2019ll look at it and will integrate it myself in\nthe code base and leave you as the author. This process can take time and\nit\u2019ll take less time if you follow the following guidelines:</p>\n<ul>\n<li>check your code with PEP8 or pylint. Try to stick to 80 columns wide.</li>\n<li>separate your commits per smallest concern.</li>\n<li>each commit should pass the tests (to allow easy bisect)</li>\n<li>each functionality/bugfix commit should contain the code, tests,\nand doc.</li>\n<li>prior minor commit with typographic or code cosmetic changes are\nvery welcome. These should be tagged in their commit summary with\n<tt>!minor</tt>.</li>\n<li>the commit message should follow gitchangelog rules (check the git\nlog to get examples)</li>\n<li>if the commit fixes an issue or finished the implementation of a\nfeature, please mention it in the summary.</li>\n</ul>\n<p>If you have some questions about guidelines which is not answered here,\nplease check the current <tt>git log</tt>, you might find previous commit that\nwould show you how to deal with your issue.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2015 Valentin Lab.</p>\n<p>Licensed under the <a href=\"http://raw.github.com/0k/kids.test/master/LICENSE\" rel=\"nofollow\">BSD License</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.0.1 (2015-02-04)</span></h2>\n<ul>\n<li>First import. [Valentin Lab]</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1409163, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d4a8923d20824d17d67530ab5c98de4a", "sha256": "a1237f537ee72a4354dca428ad92911d105d3f755a182bbda0b5969523ccf2bb"}, "downloads": -1, "filename": "kids.test-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d4a8923d20824d17d67530ab5c98de4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5462, "upload_time": "2015-02-04T09:57:28", "upload_time_iso_8601": "2015-02-04T09:57:28.142666Z", "url": "https://files.pythonhosted.org/packages/c9/6c/8a20919e1fe11a9e502d9b764c150a8349daffbdd77db26da7e6481d3865/kids.test-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d4a8923d20824d17d67530ab5c98de4a", "sha256": "a1237f537ee72a4354dca428ad92911d105d3f755a182bbda0b5969523ccf2bb"}, "downloads": -1, "filename": "kids.test-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d4a8923d20824d17d67530ab5c98de4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5462, "upload_time": "2015-02-04T09:57:28", "upload_time_iso_8601": "2015-02-04T09:57:28.142666Z", "url": "https://files.pythonhosted.org/packages/c9/6c/8a20919e1fe11a9e502d9b764c150a8349daffbdd77db26da7e6481d3865/kids.test-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:47 2020"}