{"info": {"author": "Leszek Pryszcz", "author_email": "l.p.pryszcz+distutils@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "### Table of Contents\n- **[Redundans](#redundans)**  \n  - **[Prerequisites](#prerequisites)**  \n    - **[UNIX installer](#unix-installer)**  \n    - **[Docker image](#docker-image)** \n  - **[Running the pipeline](#running-the-pipeline)**  \n    - **[Parameters](#parameters)**  \n    - **[Test run](#test-run)**  \n  - **[Support](#support)**\n  - **[Citation](#citation)**  \n\n# Redundans\n\nRedundans pipeline assists **an assembly of heterozygous genomes**.  \nProgram takes [as input](#parameters) **assembled contigs**, **sequencing libraries** and/or **reference sequence** and returns **scaffolded homozygous genome assembly**. Final assembly should be **less fragmented** and with total **size smaller** than the input contigs. In addition, Redundans will automatically **close the gaps** resulting from genome assembly or scaffolding. \n\n<img align=\"right\" src=\"/docs/redundans_flowchart.png\">\n\nThe pipeline consists of three steps/modules: \n1. **redundancy reduction**: detection and selective removal of redundant contigs from an initial *de novo* assembly \n2. **scaffolding**: joining of genome fragments using paired-end reads, mate-pairs, long reads and/or reference chromosomes \n3. **gap closing**: filling the gaps after scaffolding using paired-end and/or mate-pair reads \n\nRedundans is: \n- **fast** & **lightweight**, multi-core support and memory-optimised, \nso it can be run even on the laptop for small-to-medium size genomes\n- **flexible** toward many sequencing technologies (Illumina, 454, Sanger, PacBio & Nanopore) and library types (paired-end, mate pairs, fosmids, long reads)\n- **modular**: every step can be ommited or replaced by other tools\n- **reliable**: it has been already used to improve genome assemblies varying in size (several Mb to several Gb) and complexity (fungal, animal & plants)\n\nFor more information have a look at the [documentation](/docs), [poster](/docs/poster.pdf), [publication](http://nar.oxfordjournals.org/content/44/12/e113) and [test dataset](/test). \n\n## Prerequisites\nRedundans uses several programs (all provided within this repository): \n- [LAST](http://last.cbrc.jp/) v700+\n- [BWA](http://bio-bwa.sourceforge.net/) v0.7.12+\n- [SNAP aligner](https://github.com/amplab/snap)\n- [SSPACE3](http://www.baseclear.com/genomics/bioinformatics/basetools/SSPACE)\n- [GapCloser](http://sourceforge.net/projects/soapdenovo2/files/GapCloser/)\n- [pyScaf](https://github.com/lpryszcz/pyScaf)\n- [FastaIndex](https://github.com/lpryszcz/FastaIndex)\n\nOn most Linux distros, the installation should be as easy as:\n```\ngit clone --recursive https://github.com/lpryszcz/redundans.git\ncd redundans\n(cd bin/bwa && make clean && make)\n(cd bin/last && make clean && make)\n(cd bin/snap && make clean && make)\n```\n\nIf it fails, make sure you have below dependencies installed: \n- Python 2.7 or 2.6\n- Perl [SSPACE3]\n- make, gcc & g++ [BWA & LAST] ie. `sudo apt-get install make gcc g++`\n- [zlib including zlib.h headers](http://zlib.net/) [BWA] ie. `sudo apt-get install zlib1g-dev`\n- optionally for plotting `numpy` and `matplotlib` ie. `sudo -H pip install -U matplotlib numpy`\n\nFor user convenience, we provide [UNIX installer](#unix-installer) and [Docker image](#docker-image), that can be used instead of manually installation.  \n\n### UNIX installer\nUNIX installer will automatically fetch, compile and configure Redundans together with all dependencies.\nIt should work on all modern Linux systems, given Python 2.7, commonly used programmes (ie. wget, curl, git, perl, gcc, g++, ldconfig) and libraries (zlib including zlib.h) are installed. \n```bash\nsource <(curl -Ls http://bit.ly/redundans_installer)\n```\n\n### Docker image\nFirst, you  need to install [docker](https://www.docker.com/): `wget -qO- https://get.docker.com/ | sh`  \nThen, you can run the test example by executing: \n```bash\n# process the data inside the image - all data will be lost at the end\ndocker run -it -w /root/src/redundans lpryszcz/redundans ./redundans.py -v -i test/{600,5000}_{1,2}.fq.gz -f test/contigs.fa -o test/run1\n\n# if you wish to process local files, you need to mount the volume with -v\n## make sure you are in redundans repo directory (containing test/ directory)\ndocker run -v `pwd`/test:/test:rw -it lpryszcz/redundans /root/src/redundans/redundans.py -v -i test/*.fq.gz -f test/contigs.fa -o test/run1\n```\nDocker images are very handy, but they have certain limitation. \nThe most annoying for me is the **lack of autocompletion**, unless you specify the path in host and container in the exactly same manner as in the example above.\nIn addition, the volume needs to be mounted every time, leading to a bit complex commands. \n\n[![](https://images.microbadger.com/badges/version/lpryszcz/redundans.svg)](https://hub.docker.com/r/lpryszcz/redundans/)\n![](https://images.microbadger.com/badges/image/lpryszcz/redundans.svg)\n\n## Running the pipeline\nRedundans input consists of **assembled contigs** (FastA) and any combination of::\n- **paired-end and/or mate pairs reads** (FastQ/FastA*)\n- **long reads** (FastQ/FastA*) - both PacBio and Nanopore are supported\n- and/or **reference chromosomes/contigs** (FastA)\n* gzipped FastQ/FastA files are also accepted.\n\nRedundans will return **homozygous genome assembly** in `scaffolds.filled.fa` (FastA).  \nIn addition, the program reports [statistics for every pipeline step](/test#summary-statistics), including number of contigs that were removed, GC content, N50, N90 and size of gap regions. \n\n### Parameters\nFor the user convinience, Redundans is equipped with a wrapper that **automatically estimates run parameters** and executes all steps/modules.\nThe only mandatory parameter required at the runtime is **assembled contigs** (FastA), although you should also specify some sequencing libraries (FastA/FastQ) or reference sequence (FastA) in order to perform scaffolding. \nMost of the pipeline parameters can be adjusted manually (default values are given in square brackets []):  \n**HINT**: If you run fails, you may try to resume it, by adding `--resume` parameter. \n- Genral options:\n```\n  -h, --help            show this help message and exit\n  -v, --verbose         verbose\n  --version             show program's version number and exit\n  -f FASTA, --fasta FASTA\n                        assembly FASTA file\n  -o OUTDIR, --outdir OUTDIR\n                        output directory [redundans]\n  -t THREADS, --threads THREADS\n                        no. of threads to run [4]\n  --resume              resume previous run\n  --log LOG             output log to [stderr]\n```\n- Reduction options:\n```\n  --identity IDENTITY   min. identity [0.51]\n  --overlap OVERLAP     min. overlap  [0.66]\n  --minLength MINLENGTH\n                        min. contig length [200]\n```\n- Scaffolding options:\n```\n  -i FASTQ [FASTQ ...], --fastq FASTQ [FASTQ ...]\n                        FASTQ PE/MP files\n  -j JOINS, --joins JOINS\n                        min k pairs to join contigs [5]\n  -a LINKRATIO, --linkratio LINKRATIO\n                        max link ratio between two best contig pairs [0.7]\n  --limit LIMIT         align subset of reads [0.2]\n                        align subset of reads [0.2]; this means 0.2*genome size reads will be aligned; so for 100Mb genome, redundans will process 20M reads per library\n  -q MAPQ, --mapq MAPQ  min mapping quality [10]\n  -iters ITERS          scaffolding iterations per library  [2]\n  -l [LONGREADS [LONGREADS ...]], --longreads [LONGREADS [LONGREADS ...]]\n                        FastQ/FastA files with long reads\n  -r REFERENCE, --reference REFERENCE\n                        reference FastA file\n  --norearrangements    high identity mode (rearrangements not allowed)\n```\n\nRedundans is **extremely flexible**. All steps of the pipeline can be ommited using: `--noreduction`, `--noscaffolding` and/or `--nogapclosing` parameters. \n\n### Test run\nTo run the test example, execute: \n```bash\n./redundans.py -v -i test/*.fq.gz -f test/contigs.fa -o test/run1\n\n# if your run failed for any reason, you can try to resume it\nrm test/run1/_sspace.2.1.filled.fa\n./redundans.py -v -i test/*.fq.gz -f test/contigs.fa -o test/run1 --resume\n```\n\nNote, the **order of libraries (`-i/--input`) is not important**, as long as `read1` and `read2` from each library are given one after another \ni.e. `-i 600_1.fq.gz 600_2.fq.gz 5000_1.fq.gz 5000_2.fq.gz` would be interpreted the same as `-i 5000_1.fq.gz 5000_2.fq.gz 600_1.fq.gz 600_2.fq.gz`.\n\nYou can play with **any combination of inputs** ie. paired-end, mate pairs, long reads and / or reference-based scaffolding, for example:\n```bash\n# reduction, scaffolding with paired-end, mate pairs and long reads, and gap closing with paired-end and mate pairs\n./redundans.py -v -i test/*.fq.gz -l test/pacbio.fq.gz test/nanopore.fa.gz -f test/contigs.fa -o test/run_short_long\n\n# scaffolding and gap closing with paired-end and mate pairs (no reduction)\n./redundans.py -v -i test/*.fq.gz -f test/contigs.fa -o test/run_short-scaffolding-closing --noreduction\n\n# reduction, reference-based scaffolding and gap closing with paired-end reads\n./redundans.py -v -i test/600_?.fq.gz -r test/ref.fa -f test/contigs.fa -o test/run_ref_pe-closing --noscaffolding\n```\n\nFor more details have a look in [test directory](/test). \n\n## Support \nIf you have any issues or doubts check [documentation](/docs) and [FAQ (Frequently Asked Questions)](/docs#faq). \nYou may want also to sign to [our forum](https://groups.google.com/d/forum/redundans).\n\n\n## Citation\nLeszek P. Pryszcz and Toni Gabald\u00f3n (2016) Redundans: an assembly pipeline for highly heterozygous genomes. NAR. [doi: 10.1093/nar/gkw294](http://nar.oxfordjournals.org/content/44/12/e113)\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lpryszcz/redundans", "keywords": "heterozygous genome assembly scaffolding reduction paired-end long-reads synteny", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "redundans", "package_url": "https://pypi.org/project/redundans/", "platform": "", "project_url": "https://pypi.org/project/redundans/", "project_urls": {"Homepage": "https://github.com/lpryszcz/redundans"}, "release_url": "https://pypi.org/project/redundans/0.13a5/", "requires_dist": ["FastaIndex", "pyScaf"], "requires_python": "", "summary": "", "version": "0.13a5", "yanked": false, "html_description": "<div class=\"project-description\">\n            ### Table of Contents<br>- **[Redundans](#redundans)**  <br>  - **[Prerequisites](#prerequisites)**  <br>    - **[UNIX installer](#unix-installer)**  <br>    - **[Docker image](#docker-image)** <br>  - **[Running the pipeline](#running-the-pipeline)**  <br>    - **[Parameters](#parameters)**  <br>    - **[Test run](#test-run)**  <br>  - **[Support](#support)**<br>  - **[Citation](#citation)**  <br><br># Redundans<br><br>Redundans pipeline assists **an assembly of heterozygous genomes**.  <br>Program takes [as input](#parameters) **assembled contigs**, **sequencing libraries** and/or **reference sequence** and returns **scaffolded homozygous genome assembly**. Final assembly should be **less fragmented** and with total **size smaller** than the input contigs. In addition, Redundans will automatically **close the gaps** resulting from genome assembly or scaffolding. <br><br>&lt;img align=\"right\" src=\"/docs/redundans_flowchart.png\"&gt;<br><br>The pipeline consists of three steps/modules: <br>1. **redundancy reduction**: detection and selective removal of redundant contigs from an initial *de novo* assembly <br>2. **scaffolding**: joining of genome fragments using paired-end reads, mate-pairs, long reads and/or reference chromosomes <br>3. **gap closing**: filling the gaps after scaffolding using paired-end and/or mate-pair reads <br><br>Redundans is: <br>- **fast** &amp; **lightweight**, multi-core support and memory-optimised, <br>so it can be run even on the laptop for small-to-medium size genomes<br>- **flexible** toward many sequencing technologies (Illumina, 454, Sanger, PacBio &amp; Nanopore) and library types (paired-end, mate pairs, fosmids, long reads)<br>- **modular**: every step can be ommited or replaced by other tools<br>- **reliable**: it has been already used to improve genome assemblies varying in size (several Mb to several Gb) and complexity (fungal, animal &amp; plants)<br><br>For more information have a look at the [documentation](/docs), [poster](/docs/poster.pdf), [publication](http://nar.oxfordjournals.org/content/44/12/e113) and [test dataset](/test). <br><br>## Prerequisites<br>Redundans uses several programs (all provided within this repository): <br>- [LAST](http://last.cbrc.jp/) v700+<br>- [BWA](http://bio-bwa.sourceforge.net/) v0.7.12+<br>- [SNAP aligner](https://github.com/amplab/snap)<br>- [SSPACE3](http://www.baseclear.com/genomics/bioinformatics/basetools/SSPACE)<br>- [GapCloser](http://sourceforge.net/projects/soapdenovo2/files/GapCloser/)<br>- [pyScaf](https://github.com/lpryszcz/pyScaf)<br>- [FastaIndex](https://github.com/lpryszcz/FastaIndex)<br><br>On most Linux distros, the installation should be as easy as:<br>```<br>git clone --recursive https://github.com/lpryszcz/redundans.git<br>cd redundans<br>(cd bin/bwa &amp;&amp; make clean &amp;&amp; make)<br>(cd bin/last &amp;&amp; make clean &amp;&amp; make)<br>(cd bin/snap &amp;&amp; make clean &amp;&amp; make)<br>```<br><br>If it fails, make sure you have below dependencies installed: <br>- Python 2.7 or 2.6<br>- Perl [SSPACE3]<br>- make, gcc &amp; g++ [BWA &amp; LAST] ie. `sudo apt-get install make gcc g++`<br>- [zlib including zlib.h headers](http://zlib.net/) [BWA] ie. `sudo apt-get install zlib1g-dev`<br>- optionally for plotting `numpy` and `matplotlib` ie. `sudo -H pip install -U matplotlib numpy`<br><br>For user convenience, we provide [UNIX installer](#unix-installer) and [Docker image](#docker-image), that can be used instead of manually installation.  <br><br>### UNIX installer<br>UNIX installer will automatically fetch, compile and configure Redundans together with all dependencies.<br>It should work on all modern Linux systems, given Python 2.7, commonly used programmes (ie. wget, curl, git, perl, gcc, g++, ldconfig) and libraries (zlib including zlib.h) are installed. <br>```bash<br>source &lt;(curl -Ls http://bit.ly/redundans_installer)<br>```<br><br>### Docker image<br>First, you  need to install [docker](https://www.docker.com/): `wget -qO- https://get.docker.com/ | sh`  <br>Then, you can run the test example by executing: <br>```bash<br># process the data inside the image - all data will be lost at the end<br>docker run -it -w /root/src/redundans lpryszcz/redundans ./redundans.py -v -i test/{600,5000}_{1,2}.fq.gz -f test/contigs.fa -o test/run1<br><br># if you wish to process local files, you need to mount the volume with -v<br>## make sure you are in redundans repo directory (containing test/ directory)<br>docker run -v `pwd`/test:/test:rw -it lpryszcz/redundans /root/src/redundans/redundans.py -v -i test/*.fq.gz -f test/contigs.fa -o test/run1<br>```<br>Docker images are very handy, but they have certain limitation. <br>The most annoying for me is the **lack of autocompletion**, unless you specify the path in host and container in the exactly same manner as in the example above.<br>In addition, the volume needs to be mounted every time, leading to a bit complex commands. <br><br>[![](https://images.microbadger.com/badges/version/lpryszcz/redundans.svg)](https://hub.docker.com/r/lpryszcz/redundans/)<br>![](https://images.microbadger.com/badges/image/lpryszcz/redundans.svg)<br><br>## Running the pipeline<br>Redundans input consists of **assembled contigs** (FastA) and any combination of::<br>- **paired-end and/or mate pairs reads** (FastQ/FastA*)<br>- **long reads** (FastQ/FastA*) - both PacBio and Nanopore are supported<br>- and/or **reference chromosomes/contigs** (FastA)<br>* gzipped FastQ/FastA files are also accepted.<br><br>Redundans will return **homozygous genome assembly** in `scaffolds.filled.fa` (FastA).  <br>In addition, the program reports [statistics for every pipeline step](/test#summary-statistics), including number of contigs that were removed, GC content, N50, N90 and size of gap regions. <br><br>### Parameters<br>For the user convinience, Redundans is equipped with a wrapper that **automatically estimates run parameters** and executes all steps/modules.<br>The only mandatory parameter required at the runtime is **assembled contigs** (FastA), although you should also specify some sequencing libraries (FastA/FastQ) or reference sequence (FastA) in order to perform scaffolding. <br>Most of the pipeline parameters can be adjusted manually (default values are given in square brackets []):  <br>**HINT**: If you run fails, you may try to resume it, by adding `--resume` parameter. <br>- Genral options:<br>```<br>  -h, --help            show this help message and exit<br>  -v, --verbose         verbose<br>  --version             show program's version number and exit<br>  -f FASTA, --fasta FASTA<br>                        assembly FASTA file<br>  -o OUTDIR, --outdir OUTDIR<br>                        output directory [redundans]<br>  -t THREADS, --threads THREADS<br>                        no. of threads to run [4]<br>  --resume              resume previous run<br>  --log LOG             output log to [stderr]<br>```<br>- Reduction options:<br>```<br>  --identity IDENTITY   min. identity [0.51]<br>  --overlap OVERLAP     min. overlap  [0.66]<br>  --minLength MINLENGTH<br>                        min. contig length [200]<br>```<br>- Scaffolding options:<br>```<br>  -i FASTQ [FASTQ ...], --fastq FASTQ [FASTQ ...]<br>                        FASTQ PE/MP files<br>  -j JOINS, --joins JOINS<br>                        min k pairs to join contigs [5]<br>  -a LINKRATIO, --linkratio LINKRATIO<br>                        max link ratio between two best contig pairs [0.7]<br>  --limit LIMIT         align subset of reads [0.2]<br>                        align subset of reads [0.2]; this means 0.2*genome size reads will be aligned; so for 100Mb genome, redundans will process 20M reads per library<br>  -q MAPQ, --mapq MAPQ  min mapping quality [10]<br>  -iters ITERS          scaffolding iterations per library  [2]<br>  -l [LONGREADS [LONGREADS ...]], --longreads [LONGREADS [LONGREADS ...]]<br>                        FastQ/FastA files with long reads<br>  -r REFERENCE, --reference REFERENCE<br>                        reference FastA file<br>  --norearrangements    high identity mode (rearrangements not allowed)<br>```<br><br>Redundans is **extremely flexible**. All steps of the pipeline can be ommited using: `--noreduction`, `--noscaffolding` and/or `--nogapclosing` parameters. <br><br>### Test run<br>To run the test example, execute: <br>```bash<br>./redundans.py -v -i test/*.fq.gz -f test/contigs.fa -o test/run1<br><br># if your run failed for any reason, you can try to resume it<br>rm test/run1/_sspace.2.1.filled.fa<br>./redundans.py -v -i test/*.fq.gz -f test/contigs.fa -o test/run1 --resume<br>```<br><br>Note, the **order of libraries (`-i/--input`) is not important**, as long as `read1` and `read2` from each library are given one after another <br>i.e. `-i 600_1.fq.gz 600_2.fq.gz 5000_1.fq.gz 5000_2.fq.gz` would be interpreted the same as `-i 5000_1.fq.gz 5000_2.fq.gz 600_1.fq.gz 600_2.fq.gz`.<br><br>You can play with **any combination of inputs** ie. paired-end, mate pairs, long reads and / or reference-based scaffolding, for example:<br>```bash<br># reduction, scaffolding with paired-end, mate pairs and long reads, and gap closing with paired-end and mate pairs<br>./redundans.py -v -i test/*.fq.gz -l test/pacbio.fq.gz test/nanopore.fa.gz -f test/contigs.fa -o test/run_short_long<br><br># scaffolding and gap closing with paired-end and mate pairs (no reduction)<br>./redundans.py -v -i test/*.fq.gz -f test/contigs.fa -o test/run_short-scaffolding-closing --noreduction<br><br># reduction, reference-based scaffolding and gap closing with paired-end reads<br>./redundans.py -v -i test/600_?.fq.gz -r test/ref.fa -f test/contigs.fa -o test/run_ref_pe-closing --noscaffolding<br>```<br><br>For more details have a look in [test directory](/test). <br><br>## Support <br>If you have any issues or doubts check [documentation](/docs) and [FAQ (Frequently Asked Questions)](/docs#faq). <br>You may want also to sign to [our forum](https://groups.google.com/d/forum/redundans).<br><br><br>## Citation<br>Leszek P. Pryszcz and Toni Gabald\u00f3n (2016) Redundans: an assembly pipeline for highly heterozygous genomes. NAR. [doi: 10.1093/nar/gkw294](http://nar.oxfordjournals.org/content/44/12/e113)<br><br><br>\n          </div>"}, "last_serial": 2585439, "releases": {"0.13a0": [{"comment_text": "", "digests": {"md5": "708bb392a006b9f376c91a6e6dff11d7", "sha256": "d9fbff7d70d63a1f9cc29e0014bed09a1c630174dfa9e0e30f11f819391855be"}, "downloads": -1, "filename": "redundans-0.13a0-py2-none-any.whl", "has_sig": false, "md5_digest": "708bb392a006b9f376c91a6e6dff11d7", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16966, "upload_time": "2017-01-19T15:36:53", "upload_time_iso_8601": "2017-01-19T15:36:53.457352Z", "url": "https://files.pythonhosted.org/packages/63/c9/a9615ec0e13227d68ca3b7ced3532c91898ed9ee4aa920a14a2fbf445389/redundans-0.13a0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84b1dccf09f1f820f6636b43a3831f99", "sha256": "5b986bf600251f0bb0b67809684bcdcea3aff59df2536af72e4cd8a70a580a34"}, "downloads": -1, "filename": "redundans-0.13a0.tar.gz", "has_sig": false, "md5_digest": "84b1dccf09f1f820f6636b43a3831f99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18761, "upload_time": "2017-01-19T15:36:55", "upload_time_iso_8601": "2017-01-19T15:36:55.088133Z", "url": "https://files.pythonhosted.org/packages/a2/e6/217fb1f45c46f0776131fd536761e9b9276831f963dd69f42037f29f5d0f/redundans-0.13a0.tar.gz", "yanked": false}], "0.13a1": [{"comment_text": "", "digests": {"md5": "1fe77248aa84153949c4a28b087dbb4f", "sha256": "83d1c3c6b20842428975ad7f5d752c9261e88a9dff601a98ef53c86d12c8bcb4"}, "downloads": -1, "filename": "redundans-0.13a1-py2-none-any.whl", "has_sig": false, "md5_digest": "1fe77248aa84153949c4a28b087dbb4f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17163, "upload_time": "2017-01-19T15:51:02", "upload_time_iso_8601": "2017-01-19T15:51:02.956502Z", "url": "https://files.pythonhosted.org/packages/70/7d/6bfbe63b39d0e1fe2a570aeedcf758be49b0ad1d51c138fe27fc6f503971/redundans-0.13a1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7e2195cb5ab4acb52955b090a318af2", "sha256": "13e462429cd114a3d0705bfef10232a53edd5fa4ec21240d9117b71eba5b80e1"}, "downloads": -1, "filename": "redundans-0.13a1.tar.gz", "has_sig": false, "md5_digest": "a7e2195cb5ab4acb52955b090a318af2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18864, "upload_time": "2017-01-19T15:51:04", "upload_time_iso_8601": "2017-01-19T15:51:04.386232Z", "url": "https://files.pythonhosted.org/packages/d4/4c/d5e236745edb291b2a79fb43cf1ddd590562b75aac5eeaeae214d9622cf4/redundans-0.13a1.tar.gz", "yanked": false}], "0.13a2": [{"comment_text": "", "digests": {"md5": "631b3a47303c1fe9405ef50d6eb8d613", "sha256": "e8f7b9734598e425101a57fcacec0cc5a33719de713c776adb0904f2c7568d05"}, "downloads": -1, "filename": "redundans-0.13a2-py2-none-any.whl", "has_sig": false, "md5_digest": "631b3a47303c1fe9405ef50d6eb8d613", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17164, "upload_time": "2017-01-19T15:59:38", "upload_time_iso_8601": "2017-01-19T15:59:38.212915Z", "url": "https://files.pythonhosted.org/packages/df/b0/909c70722ac0b84203b796c3a3618422b66658d14c95a3722c9cfe871978/redundans-0.13a2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b25aee47928b7757a2f868ddb052681", "sha256": "db837f1285c68512ac43f6b090fe56744190f97753fb4026bf59ed249db094b0"}, "downloads": -1, "filename": "redundans-0.13a2.tar.gz", "has_sig": false, "md5_digest": "8b25aee47928b7757a2f868ddb052681", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18879, "upload_time": "2017-01-19T15:59:39", "upload_time_iso_8601": "2017-01-19T15:59:39.840279Z", "url": "https://files.pythonhosted.org/packages/7f/74/6c47a90f5ca6036cfe6d535c03a280df4e5270ad347643745e1ce0a7c603/redundans-0.13a2.tar.gz", "yanked": false}], "0.13a3": [{"comment_text": "", "digests": {"md5": "a4d531d17aa9ee972d7fc9107d6a3152", "sha256": "2a3710f111397b21dec2c0405acc0632071c3ca6b7e920731a0c31690a8512eb"}, "downloads": -1, "filename": "redundans-0.13a3-py2-none-any.whl", "has_sig": false, "md5_digest": "a4d531d17aa9ee972d7fc9107d6a3152", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16991, "upload_time": "2017-01-19T16:10:23", "upload_time_iso_8601": "2017-01-19T16:10:23.990208Z", "url": "https://files.pythonhosted.org/packages/63/70/69bb99b2f1728f80ecfbdabcd6064fc72ecfd280de399b20f6d199107b77/redundans-0.13a3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c33f2eaec481e0388d9111eea80b73fd", "sha256": "90a0f7bb91aaa0559360cbce232b01dd02f7e932a17ce4518b4ae388578ce60a"}, "downloads": -1, "filename": "redundans-0.13a3.tar.gz", "has_sig": false, "md5_digest": "c33f2eaec481e0388d9111eea80b73fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89070, "upload_time": "2017-01-19T16:10:27", "upload_time_iso_8601": "2017-01-19T16:10:27.098780Z", "url": "https://files.pythonhosted.org/packages/bf/9e/85735586c40fe2c42d2fac5e2bdf352dbbcb232288aed259610dd91df33d/redundans-0.13a3.tar.gz", "yanked": false}], "0.13a4": [{"comment_text": "", "digests": {"md5": "426ad5b02e6f2ddf22dc87a7c49bd744", "sha256": "7495aa3256ec791ab8ceaa9b966000acc6753f5a3b2d61292331f066bd8c42be"}, "downloads": -1, "filename": "redundans-0.13a4-py2-none-any.whl", "has_sig": false, "md5_digest": "426ad5b02e6f2ddf22dc87a7c49bd744", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 35117, "upload_time": "2017-01-19T16:25:34", "upload_time_iso_8601": "2017-01-19T16:25:34.344129Z", "url": "https://files.pythonhosted.org/packages/d0/ea/353a0c04cd35b73bd05bcdd2b67df8e7aee33fff6de4f06d814a3f0facb0/redundans-0.13a4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e48f6fedfd91c67519ec39e36e37d9ba", "sha256": "cf7e09a30d2a6ab9f4096f6e8f74f2632afe5497be6c29e91c5cc2178748d2e4"}, "downloads": -1, "filename": "redundans-0.13a4.tar.gz", "has_sig": false, "md5_digest": "e48f6fedfd91c67519ec39e36e37d9ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30032, "upload_time": "2017-01-19T16:25:36", "upload_time_iso_8601": "2017-01-19T16:25:36.299883Z", "url": "https://files.pythonhosted.org/packages/57/fb/ddfa9c0e1fb76dd5f76b973351baf5a80761ca184b0f0ad3fe7477cd32a0/redundans-0.13a4.tar.gz", "yanked": false}], "0.13a5": [{"comment_text": "", "digests": {"md5": "6c8f6280be3bb4990bfbcc4bc691b670", "sha256": "415b0048c119e6dfa070d7931202e24273ede1a7f4a186d0aa969b0e335ef45c"}, "downloads": -1, "filename": "redundans-0.13a5-py2-none-any.whl", "has_sig": false, "md5_digest": "6c8f6280be3bb4990bfbcc4bc691b670", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 35116, "upload_time": "2017-01-19T16:34:25", "upload_time_iso_8601": "2017-01-19T16:34:25.381964Z", "url": "https://files.pythonhosted.org/packages/cf/c5/36fc97bf6c33bd64c75d8b9efaf2f0c0f80f3d1fa82191b7e36b46c4730c/redundans-0.13a5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfd9b92be42465e17de1966424166573", "sha256": "fbe3ac5e94822999dc21470a4b6be39e01a05d8bbfaca16aa76030180dff3eb2"}, "downloads": -1, "filename": "redundans-0.13a5.tar.gz", "has_sig": false, "md5_digest": "cfd9b92be42465e17de1966424166573", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29127, "upload_time": "2017-01-19T16:34:27", "upload_time_iso_8601": "2017-01-19T16:34:27.949194Z", "url": "https://files.pythonhosted.org/packages/4f/cb/ead58ae7ee881e9f86b4f40a236fed62eeff2ee681d378ea9bbb8f39feb2/redundans-0.13a5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c8f6280be3bb4990bfbcc4bc691b670", "sha256": "415b0048c119e6dfa070d7931202e24273ede1a7f4a186d0aa969b0e335ef45c"}, "downloads": -1, "filename": "redundans-0.13a5-py2-none-any.whl", "has_sig": false, "md5_digest": "6c8f6280be3bb4990bfbcc4bc691b670", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 35116, "upload_time": "2017-01-19T16:34:25", "upload_time_iso_8601": "2017-01-19T16:34:25.381964Z", "url": "https://files.pythonhosted.org/packages/cf/c5/36fc97bf6c33bd64c75d8b9efaf2f0c0f80f3d1fa82191b7e36b46c4730c/redundans-0.13a5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfd9b92be42465e17de1966424166573", "sha256": "fbe3ac5e94822999dc21470a4b6be39e01a05d8bbfaca16aa76030180dff3eb2"}, "downloads": -1, "filename": "redundans-0.13a5.tar.gz", "has_sig": false, "md5_digest": "cfd9b92be42465e17de1966424166573", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29127, "upload_time": "2017-01-19T16:34:27", "upload_time_iso_8601": "2017-01-19T16:34:27.949194Z", "url": "https://files.pythonhosted.org/packages/4f/cb/ead58ae7ee881e9f86b4f40a236fed62eeff2ee681d378ea9bbb8f39feb2/redundans-0.13a5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:30 2020"}