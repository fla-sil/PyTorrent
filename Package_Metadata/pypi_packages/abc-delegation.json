{"info": {"author": "Vladyslav Halchenko", "author_email": "valh@tuta.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "# abc-delegation\n\nA tool for automated delegation with abstract base classes.\n\nThis metaclass enables creation of delegating classes \ninheriting from an abstract base class. \n\nThis technique is impossible with regular `__getattr__` approach for delegation,\nso normally, you would have to define every delegated method explicitly.\nNot any more\n\nBasic usage:\n```python    \nfrom abc import ABCMeta\n\nfrom abc_delegation import delegation_metaclass\n\nclass A(metaclass=ABCMeta):\n    @abstractmethod\n    def bar(self):\n        pass\n\n    @abstractmethod\n    def foo(self):\n        pass\n\nclass B:\n    def bar(self):\n        return \"B bar\"\n\n    def foo(self):\n        return \"B foo\"\n\nclass C(A, metaclass=delegation_metaclass(\"my_delegate\")):\n    def __init__(self, b):\n        self.my_delegate = b\n\n    def foo(self):\n        return \"C foo\"\n\nc = C(B())\nassert c.foo() == \"C foo\"\nassert c.bar() == \"B bar\"\n```\n\nMultiple delegates:\n```python\nfrom abc import ABCMeta\n\nfrom abc_delegation import multi_delegation_metaclass\n\n\nclass A(metaclass=ABCMeta):\n    @abstractmethod\n    def bar(self):\n        pass\n\n    @abstractmethod\n    def foo(self):\n        pass\n\n    @abstractmethod\n    def baz(self):\n        pass\n\nclass B:\n    def bar(self):\n        return \"B bar\"\n\n    def foo(self):\n        return \"B foo\"\n\nclass X:\n    def baz(self):\n        return \"X baz\"\n\nclass C(A, metaclass=multi_delegation_metaclass(\"_delegate1\", \"_delegate2\")):\n    def __init__(self, d1, d2):\n        self._delegate1 = d1\n        self._delegate2 = d2\n\n    def foo(self):\n        return \"C foo\"\n\nc = C(B(), X())\nassert c.bar() == \"B bar\"\nassert c.foo() == \"C foo\"\nassert c.baz() == \"X baz\"\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/monomonedula/abc-delegation", "keywords": "decorator delegation ABC", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "abc-delegation", "package_url": "https://pypi.org/project/abc-delegation/", "platform": "", "project_url": "https://pypi.org/project/abc-delegation/", "project_urls": {"Homepage": "http://github.com/monomonedula/abc-delegation"}, "release_url": "https://pypi.org/project/abc-delegation/0.2/", "requires_dist": ["markdown"], "requires_python": "", "summary": "Tool for automated implementation of delegation pattern with ABC", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>abc-delegation</h1>\n<p>A tool for automated delegation with abstract base classes.</p>\n<p>This metaclass enables creation of delegating classes\ninheriting from an abstract base class.</p>\n<p>This technique is impossible with regular <code>__getattr__</code> approach for delegation,\nso normally, you would have to define every delegated method explicitly.\nNot any more</p>\n<p>Basic usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABCMeta</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">abc_delegation</span> <span class=\"kn\">import</span> <span class=\"n\">delegation_metaclass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ABCMeta</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"B bar\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"B foo\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">delegation_metaclass</span><span class=\"p\">(</span><span class=\"s2\">\"my_delegate\"</span><span class=\"p\">)):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_delegate</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"C foo\"</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">())</span>\n<span class=\"k\">assert</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"C foo\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"B bar\"</span>\n</pre>\n<p>Multiple delegates:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABCMeta</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">abc_delegation</span> <span class=\"kn\">import</span> <span class=\"n\">multi_delegation_metaclass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">ABCMeta</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"B bar\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"B foo\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">X</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"X baz\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">multi_delegation_metaclass</span><span class=\"p\">(</span><span class=\"s2\">\"_delegate1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"_delegate2\"</span><span class=\"p\">)):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_delegate1</span> <span class=\"o\">=</span> <span class=\"n\">d1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_delegate2</span> <span class=\"o\">=</span> <span class=\"n\">d2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"C foo\"</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">(),</span> <span class=\"n\">X</span><span class=\"p\">())</span>\n<span class=\"k\">assert</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"B bar\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"C foo\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"X baz\"</span>\n</pre>\n\n          </div>"}, "last_serial": 6150014, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "62ab6b29adb415d2af2dd3f00564a6ab", "sha256": "bf5d337b83b476a3a30217500bfd4ed5d0e29fa235e0931b1af9fbb6020d5e71"}, "downloads": -1, "filename": "abc_delegation-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "62ab6b29adb415d2af2dd3f00564a6ab", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 3403, "upload_time": "2019-11-17T09:44:58", "upload_time_iso_8601": "2019-11-17T09:44:58.821503Z", "url": "https://files.pythonhosted.org/packages/58/91/53f5a3d1abd9c55921cef5cbbc9c4ddc21cab7f6982f8642bf53e5bfa30b/abc_delegation-0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67dab1b7890191a602476493fdec7cf8", "sha256": "673a8ca80f474bdfac1b8f6ca6d3f9c0709bc384928438431385a635ee8b5751"}, "downloads": -1, "filename": "abc_delegation-0.1-py3.7.egg", "has_sig": false, "md5_digest": "67dab1b7890191a602476493fdec7cf8", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 4108, "upload_time": "2019-11-08T09:17:18", "upload_time_iso_8601": "2019-11-08T09:17:18.777821Z", "url": "https://files.pythonhosted.org/packages/07/b7/74fe650d3c4524f1ac56718658fe7f726911e55248fd7d53b5800b238faf/abc_delegation-0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0aa6e55d9d8ed754116c7cfa2618a824", "sha256": "1a17568f30aef7ce71bee15f37c6d5802a101d2c2c99f519cee7004ce0c64f26"}, "downloads": -1, "filename": "abc_delegation-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0aa6e55d9d8ed754116c7cfa2618a824", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3389, "upload_time": "2019-11-11T21:43:01", "upload_time_iso_8601": "2019-11-11T21:43:01.334294Z", "url": "https://files.pythonhosted.org/packages/7a/2b/33cdec125ec83263d27296e04276234c697d651fa342106cd3dcdecc5879/abc_delegation-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f3c30b070f21462dcc69431a7d8597e", "sha256": "92feef8966478619261695d924483b7dc9ca6be0cfc26a4d7dc99ae254b1cc87"}, "downloads": -1, "filename": "abc_delegation-0.1.tar.gz", "has_sig": false, "md5_digest": "4f3c30b070f21462dcc69431a7d8597e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2483, "upload_time": "2019-11-11T21:43:02", "upload_time_iso_8601": "2019-11-11T21:43:02.810780Z", "url": "https://files.pythonhosted.org/packages/09/5e/35f67624c174f6ed7d7e3a9524f4549db240857ce4041022afed759f2f0f/abc_delegation-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ebb82474f3d3e8c01b7fcdd3049a8a25", "sha256": "6ce692eabf8aee570b9481d5ec69c4022d2cbb93d93d2b529db77b7577a8ea0e"}, "downloads": -1, "filename": "abc_delegation-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ebb82474f3d3e8c01b7fcdd3049a8a25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3401, "upload_time": "2019-11-17T10:05:36", "upload_time_iso_8601": "2019-11-17T10:05:36.310799Z", "url": "https://files.pythonhosted.org/packages/d3/76/7c6fda62668171c49af46a750814ce01d93dcf25dfe0dfa6b1b7aab6aa4f/abc_delegation-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ebb82474f3d3e8c01b7fcdd3049a8a25", "sha256": "6ce692eabf8aee570b9481d5ec69c4022d2cbb93d93d2b529db77b7577a8ea0e"}, "downloads": -1, "filename": "abc_delegation-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ebb82474f3d3e8c01b7fcdd3049a8a25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3401, "upload_time": "2019-11-17T10:05:36", "upload_time_iso_8601": "2019-11-17T10:05:36.310799Z", "url": "https://files.pythonhosted.org/packages/d3/76/7c6fda62668171c49af46a750814ce01d93dcf25dfe0dfa6b1b7aab6aa4f/abc_delegation-0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 15:55:20 2020"}