{"info": {"author": "Alexa Skills Kit", "author_email": "ask-sdk-dynamic@amazon.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "====================================================\nASK SDK Jinja Renderer\n====================================================\nask-sdk-jinja-renderer is an SDK package for supporting template responses for skill developers, when built using\nASK Python SDK. It provides jinja framework as a template renderer to render the response loaded from the\ntemplate and inject the data passed and finally deserialize to custom response format.\n\nQuick Start\n-----------\nIf you already have a skill built using the ASK SDK builders, then you only need to do the following,\nto start using template resolvers to generate responses.\n\n- Import FileSystemTemplateLoader from ask_sdk_core and JinjaTemplateRenderer from ask_sdk_jinja_renderer packages.\n- Register the Loaders with appropriate parameters and also a Renderer into skill builder using add_loaders and\n  add_renderer methods.\n- Create a template file as shown below and provide the path of the directory and its encoding scheme as parameters while\n  initializing the loader.\n\nexample_app/my_skill.py\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    from ask_sdk_core.skill_builder import SkillBuilder\n    from ask_sdk_core.handler_input import HandlerInput\n    from ask_sdk_core.dispatch_components import AbstractRequestHandler\n    from ask_sdk_core.utils import is_request_type\n    from ask_sdk_core.view_resolvers import FileSystemTemplateLoader\n    from ask_sdk_jinja_renderer import JinjaTemplateRenderer\n    from ask_sdk_model import Response\n\n    sb = SkillBuilder()\n\n    class LaunchRequestHandler(AbstractRequestHandler):\n        \"\"\"Handler for skill launch.\"\"\"\n        def can_handle(self, handler_input):\n            # type: (HandlerInput) -> bool\n            return is_request_type(\"LaunchRequest\")(handler_input)\n\n        def handle(self, handler_input):\n            # type: (HandlerInput) -> Response\n            speech_text = \"Hello!!\"\n\n            template_name = \"responses\"\n\n            data_map = {\n                'speech_text': speech_text,\n                'card': {\n                    'type': 'Simple',\n                    'title': 'Jinja2 Template',\n                    'content': speech_text\n                },\n                'should_end_session': 'false'\n            }\n\n            return handler_input.generate_template_response(template_name, data_map, file_ext='jinja')\n\n    # Other skill components here ....\n\n    # Register all handlers, loaders, renderers, interceptors etc.\n    sb.add_request_handler(LaunchRequestHandler())\n    # Add default file system loader on skill builder\n    sb.add_loader(FileSystemTemplateLoader(dir_path=\"templates\", encoding='utf-8'))\n    # Add default jinja renderer on skill builder\n    sb.add_renderer(JinjaTemplateRenderer())\n\n\n    skill = sb.create()\n\n\nexample_app/templates/responses.jinja\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n.. code-block:: json\n\n    {\n        \"outputSpeech\": {\n            \"type\": \"SSML\",\n            \"ssml\": \"<speak>{{ speech_text }}</speak>\"\n        },\n        \"card\": {\n            \"type\": \"{{ card.type }}\",\n            \"title\": \"{{ card.title}}\",\n            \"content\": \"{{ card.content }}\"\n        },\n        \"shouldEndSession\": \"{{ should_end_session }}\"\n    }\n\n\n\nInstallation\n~~~~~~~~~~~~~~~\nAssuming that you have Python and ``virtualenv`` installed, you can\ninstall the package from PyPi as follows:\n\n.. code-block:: sh\n\n    $ virtualenv venv\n    $ . venv/bin/activate\n    $ pip install ask-sdk-jinja-renderer\n\n\nUsage and Getting Started\n-------------------------\n\nGetting started guides, SDK Features, API references, samples etc. can\nbe found at `Read The Docs <https://alexa-skills-kit-python-sdk.readthedocs.io/en/latest/>`_\n\n\nGot Feedback?\n-------------\n\n- We would like to hear about your bugs, feature requests, questions or quick feedback.\n  Please search for the `existing issues <https://github.com/alexa/alexa-skills-kit-sdk-for-python/issues>`_ before opening a new one. It would also be helpful\n  if you follow the templates for issue and pull request creation. Please follow the `contributing guidelines <https://github.com/alexa/alexa-skills-kit-sdk-for-python/blob/master/CONTRIBUTING.md>`_!!\n- Request and vote for `Alexa features <https://alexa.uservoice.com/forums/906892-alexa-skills-developer-voice-and-vote>`_!\n\n\n=========\nCHANGELOG\n=========\n\n1.0\n-------\n\n* Initial release of Ask SDK Python Jinja Renderer Package.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alexa/alexa-skills-kit-sdk-for-python", "keywords": "ASK SDK,Alexa Skills Kit,Alexa", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "ask-sdk-jinja-renderer", "package_url": "https://pypi.org/project/ask-sdk-jinja-renderer/", "platform": "", "project_url": "https://pypi.org/project/ask-sdk-jinja-renderer/", "project_urls": {"Homepage": "https://github.com/alexa/alexa-skills-kit-sdk-for-python"}, "release_url": "https://pypi.org/project/ask-sdk-jinja-renderer/1.0.0/", "requires_dist": ["ask-sdk-core (>1.10.2)", "jinja2 (>=2.10.1)"], "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "summary": "ask-sdk-jinja-renderer is an SDK package for supporting template responses for skill developers, when built using ASK Python SDK. It provides jinja framework as a template engine to render the response loaded from the templateand inject the data passed and finally deserialize it toa custom response format", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ask-sdk-jinja-renderer\">\n<h2>ASK SDK Jinja Renderer</h2>\n<p>ask-sdk-jinja-renderer is an SDK package for supporting template responses for skill developers, when built using\nASK Python SDK. It provides jinja framework as a template renderer to render the response loaded from the\ntemplate and inject the data passed and finally deserialize to custom response format.</p>\n<div id=\"quick-start\">\n<h3>Quick Start</h3>\n<p>If you already have a skill built using the ASK SDK builders, then you only need to do the following,\nto start using template resolvers to generate responses.</p>\n<ul>\n<li>Import FileSystemTemplateLoader from ask_sdk_core and JinjaTemplateRenderer from ask_sdk_jinja_renderer packages.</li>\n<li>Register the Loaders with appropriate parameters and also a Renderer into skill builder using add_loaders and\nadd_renderer methods.</li>\n<li>Create a template file as shown below and provide the path of the directory and its encoding scheme as parameters while\ninitializing the loader.</li>\n</ul>\n<div id=\"example-app-my-skill-py\">\n<h4>example_app/my_skill.py</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.skill_builder</span> <span class=\"kn\">import</span> <span class=\"n\">SkillBuilder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.handler_input</span> <span class=\"kn\">import</span> <span class=\"n\">HandlerInput</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.dispatch_components</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractRequestHandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.utils</span> <span class=\"kn\">import</span> <span class=\"n\">is_request_type</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_core.view_resolvers</span> <span class=\"kn\">import</span> <span class=\"n\">FileSystemTemplateLoader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_jinja_renderer</span> <span class=\"kn\">import</span> <span class=\"n\">JinjaTemplateRenderer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ask_sdk_model</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n\n<span class=\"n\">sb</span> <span class=\"o\">=</span> <span class=\"n\">SkillBuilder</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LaunchRequestHandler</span><span class=\"p\">(</span><span class=\"n\">AbstractRequestHandler</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Handler for skill launch.\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">can_handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handler_input</span><span class=\"p\">):</span>\n        <span class=\"c1\"># type: (HandlerInput) -&gt; bool</span>\n        <span class=\"k\">return</span> <span class=\"n\">is_request_type</span><span class=\"p\">(</span><span class=\"s2\">\"LaunchRequest\"</span><span class=\"p\">)(</span><span class=\"n\">handler_input</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handler_input</span><span class=\"p\">):</span>\n        <span class=\"c1\"># type: (HandlerInput) -&gt; Response</span>\n        <span class=\"n\">speech_text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello!!\"</span>\n\n        <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"responses\"</span>\n\n        <span class=\"n\">data_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'speech_text'</span><span class=\"p\">:</span> <span class=\"n\">speech_text</span><span class=\"p\">,</span>\n            <span class=\"s1\">'card'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Simple'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Jinja2 Template'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'content'</span><span class=\"p\">:</span> <span class=\"n\">speech_text</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'should_end_session'</span><span class=\"p\">:</span> <span class=\"s1\">'false'</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">handler_input</span><span class=\"o\">.</span><span class=\"n\">generate_template_response</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">data_map</span><span class=\"p\">,</span> <span class=\"n\">file_ext</span><span class=\"o\">=</span><span class=\"s1\">'jinja'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Other skill components here ....</span>\n\n<span class=\"c1\"># Register all handlers, loaders, renderers, interceptors etc.</span>\n<span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">add_request_handler</span><span class=\"p\">(</span><span class=\"n\">LaunchRequestHandler</span><span class=\"p\">())</span>\n<span class=\"c1\"># Add default file system loader on skill builder</span>\n<span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">add_loader</span><span class=\"p\">(</span><span class=\"n\">FileSystemTemplateLoader</span><span class=\"p\">(</span><span class=\"n\">dir_path</span><span class=\"o\">=</span><span class=\"s2\">\"templates\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span><span class=\"p\">))</span>\n<span class=\"c1\"># Add default jinja renderer on skill builder</span>\n<span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">add_renderer</span><span class=\"p\">(</span><span class=\"n\">JinjaTemplateRenderer</span><span class=\"p\">())</span>\n\n\n<span class=\"n\">skill</span> <span class=\"o\">=</span> <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"example-app-templates-responses-jinja\">\n<h4>example_app/templates/responses.jinja</h4>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"outputSpeech\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"SSML\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"ssml\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;speak&gt;{{ speech_text }}&lt;/speak&gt;\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"card\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ card.type }}\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ card.title}}\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"content\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ card.content }}\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"shouldEndSession\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ should_end_session }}\"</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h4>Installation</h4>\n<p>Assuming that you have Python and <tt>virtualenv</tt> installed, you can\ninstall the package from PyPi as follows:</p>\n<pre>$ virtualenv venv\n$ . venv/bin/activate\n$ pip install ask-sdk-jinja-renderer\n</pre>\n</div>\n</div>\n<div id=\"usage-and-getting-started\">\n<h3>Usage and Getting Started</h3>\n<p>Getting started guides, SDK Features, API references, samples etc. can\nbe found at <a href=\"https://alexa-skills-kit-python-sdk.readthedocs.io/en/latest/\" rel=\"nofollow\">Read The Docs</a></p>\n</div>\n<div id=\"got-feedback\">\n<h3>Got Feedback?</h3>\n<ul>\n<li>We would like to hear about your bugs, feature requests, questions or quick feedback.\nPlease search for the <a href=\"https://github.com/alexa/alexa-skills-kit-sdk-for-python/issues\" rel=\"nofollow\">existing issues</a> before opening a new one. It would also be helpful\nif you follow the templates for issue and pull request creation. Please follow the <a href=\"https://github.com/alexa/alexa-skills-kit-sdk-for-python/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">contributing guidelines</a>!!</li>\n<li>Request and vote for <a href=\"https://alexa.uservoice.com/forums/906892-alexa-skills-developer-voice-and-vote\" rel=\"nofollow\">Alexa features</a>!</li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>CHANGELOG</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.0</span></h2>\n<ul>\n<li>Initial release of Ask SDK Python Jinja Renderer Package.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5718162, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "88b8abbeffd0e63852954d3c1fe6881c", "sha256": "ddb17b7cb39ea7d26e8ee48cd2111195f68c63daabb78853d81ca0385069e4a6"}, "downloads": -1, "filename": "ask_sdk_jinja_renderer-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "88b8abbeffd0e63852954d3c1fe6881c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 6285, "upload_time": "2019-08-23T01:30:58", "upload_time_iso_8601": "2019-08-23T01:30:58.692057Z", "url": "https://files.pythonhosted.org/packages/ba/f2/8051fc0cd20661fc193700fcb49247f99cb40c9771acc7b806ca9a4e0b48/ask_sdk_jinja_renderer-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f98cc3a93f0ab813a6c49fbb8fe28ee", "sha256": "63df2759955f777807720c5635338ce2f2fb0b7b7f8102530731e23b8c7c72ec"}, "downloads": -1, "filename": "ask-sdk-jinja-renderer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4f98cc3a93f0ab813a6c49fbb8fe28ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 5324, "upload_time": "2019-08-23T01:31:00", "upload_time_iso_8601": "2019-08-23T01:31:00.878206Z", "url": "https://files.pythonhosted.org/packages/a1/7b/d23622bd4cc2e5c7210efaca681a352cd323e57d8f32dfa9af56aadbc3cb/ask-sdk-jinja-renderer-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "88b8abbeffd0e63852954d3c1fe6881c", "sha256": "ddb17b7cb39ea7d26e8ee48cd2111195f68c63daabb78853d81ca0385069e4a6"}, "downloads": -1, "filename": "ask_sdk_jinja_renderer-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "88b8abbeffd0e63852954d3c1fe6881c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 6285, "upload_time": "2019-08-23T01:30:58", "upload_time_iso_8601": "2019-08-23T01:30:58.692057Z", "url": "https://files.pythonhosted.org/packages/ba/f2/8051fc0cd20661fc193700fcb49247f99cb40c9771acc7b806ca9a4e0b48/ask_sdk_jinja_renderer-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f98cc3a93f0ab813a6c49fbb8fe28ee", "sha256": "63df2759955f777807720c5635338ce2f2fb0b7b7f8102530731e23b8c7c72ec"}, "downloads": -1, "filename": "ask-sdk-jinja-renderer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4f98cc3a93f0ab813a6c49fbb8fe28ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 5324, "upload_time": "2019-08-23T01:31:00", "upload_time_iso_8601": "2019-08-23T01:31:00.878206Z", "url": "https://files.pythonhosted.org/packages/a1/7b/d23622bd4cc2e5c7210efaca681a352cd323e57d8f32dfa9af56aadbc3cb/ask-sdk-jinja-renderer-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:59 2020"}