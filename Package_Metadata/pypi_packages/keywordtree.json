{"info": {"author": "Theodoros Diamantidis", "author_email": "diamaltho@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing", "Topic :: Text Processing :: General"], "description": "![PyPI](https://img.shields.io/pypi/v/keywordtree.svg)\n\n# KeywordTree\n\nA Python data structure that maps arbitrary text to values by using a decision-tree-like algorithm based on counting keyword occurrences.\n\n![KeywordTree](https://i.postimg.cc/ZY8ypgcP/keywordtree.png)\n\n\n### How it works\n\n* Each node contains a list of keywords and a value if it's a leaf.\n* A query is given as a string and is broken into tokens by a tokenizer.\n* Starting from the root, the query follows the child with the most keywords present in the query token list.\n* When a leaf is reached, its value is returned.\n* If there are multiple nodes with the most keywords in the token list, the query follows all of them and the results are merged at the end into a list.\n\n\n### Example\n\nSuppose we have the above tree and the query \"My pug is so young it can barely woof\".\n\nThe default tokenizer converts the query to lowercase and splits at whitespaces, so the tokens will be `['my', 'pug', 'is', 'so', 'young', 'it', 'can', 'barely','woof']`.\n\nThe query will follow the left child of the root, since it has one match for `'woof'` and will then match the child with `'pug'` in its keywords. Since it's a leaf, its value will be in the final result: `['Pug']`.\n\n\n### Usage\n\n`KeywordTree` instances are constructed from tuples of the form (list of keywords, list of children described as tuples, value).\n\nNon-leaf nodes must have value equal to `None`.\n\n```python\nfrom keywordtree import KeywordTree\n\nkt = KeywordTree([], [\n    (['dog', 'woof'], [\n        (['bulldog'], [], 'Bulldog'),\n        (['pug'], [], 'Pug'),\n        (['boxer'], [], 'Boxer'),\n    ], None),\n    (['cat', 'meow'], [\n        (['persian'], [], 'Persian'),\n        (['bengal'], [], 'Bengal'),\n        (['siamese'], [], 'Siamese'),\n    ], None),\n], None)\n\nkt.query('My pug is so young it can barely woof')\n# ['Pug']\n```\n\nOther tokenizers can be used as well:\n\n```python\nfrom keywordtree import KeywordTree\nfrom nltk.tokenize.stanford import StanfordTokenizer\n\nstftk = StanfordTokenizer()\n\ndef tokenizer(s):\n    return stftk.tokenize(s)\n\nkt = KeywordTree([], [\n    # list of children\n], None, tokenizer=tokenizer)\n```\n\n### License\n\n```\nCopyright 2019 Theodoros Diamantidis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tdiam/keywordtree", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "keywordtree", "package_url": "https://pypi.org/project/keywordtree/", "platform": "", "project_url": "https://pypi.org/project/keywordtree/", "project_urls": {"Homepage": "https://github.com/tdiam/keywordtree"}, "release_url": "https://pypi.org/project/keywordtree/0.1.6/", "requires_dist": null, "requires_python": ">=3", "summary": "", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/430b998c1918866d52157a01ff1907b3cf099f57/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b6579776f7264747265652e737667\"></p>\n<h1>KeywordTree</h1>\n<p>A Python data structure that maps arbitrary text to values by using a decision-tree-like algorithm based on counting keyword occurrences.</p>\n<p><img alt=\"KeywordTree\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a3cbb39bf25535328c95ca9ffbefa9a4b33f16e/68747470733a2f2f692e706f7374696d672e63632f5a593879706763502f6b6579776f7264747265652e706e67\"></p>\n<h3>How it works</h3>\n<ul>\n<li>Each node contains a list of keywords and a value if it's a leaf.</li>\n<li>A query is given as a string and is broken into tokens by a tokenizer.</li>\n<li>Starting from the root, the query follows the child with the most keywords present in the query token list.</li>\n<li>When a leaf is reached, its value is returned.</li>\n<li>If there are multiple nodes with the most keywords in the token list, the query follows all of them and the results are merged at the end into a list.</li>\n</ul>\n<h3>Example</h3>\n<p>Suppose we have the above tree and the query \"My pug is so young it can barely woof\".</p>\n<p>The default tokenizer converts the query to lowercase and splits at whitespaces, so the tokens will be <code>['my', 'pug', 'is', 'so', 'young', 'it', 'can', 'barely','woof']</code>.</p>\n<p>The query will follow the left child of the root, since it has one match for <code>'woof'</code> and will then match the child with <code>'pug'</code> in its keywords. Since it's a leaf, its value will be in the final result: <code>['Pug']</code>.</p>\n<h3>Usage</h3>\n<p><code>KeywordTree</code> instances are constructed from tuples of the form (list of keywords, list of children described as tuples, value).</p>\n<p>Non-leaf nodes must have value equal to <code>None</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keywordtree</span> <span class=\"kn\">import</span> <span class=\"n\">KeywordTree</span>\n\n<span class=\"n\">kt</span> <span class=\"o\">=</span> <span class=\"n\">KeywordTree</span><span class=\"p\">([],</span> <span class=\"p\">[</span>\n    <span class=\"p\">([</span><span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'woof'</span><span class=\"p\">],</span> <span class=\"p\">[</span>\n        <span class=\"p\">([</span><span class=\"s1\">'bulldog'</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"s1\">'Bulldog'</span><span class=\"p\">),</span>\n        <span class=\"p\">([</span><span class=\"s1\">'pug'</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"s1\">'Pug'</span><span class=\"p\">),</span>\n        <span class=\"p\">([</span><span class=\"s1\">'boxer'</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"s1\">'Boxer'</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"p\">([</span><span class=\"s1\">'cat'</span><span class=\"p\">,</span> <span class=\"s1\">'meow'</span><span class=\"p\">],</span> <span class=\"p\">[</span>\n        <span class=\"p\">([</span><span class=\"s1\">'persian'</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"s1\">'Persian'</span><span class=\"p\">),</span>\n        <span class=\"p\">([</span><span class=\"s1\">'bengal'</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"s1\">'Bengal'</span><span class=\"p\">),</span>\n        <span class=\"p\">([</span><span class=\"s1\">'siamese'</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"s1\">'Siamese'</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n<span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">kt</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'My pug is so young it can barely woof'</span><span class=\"p\">)</span>\n<span class=\"c1\"># ['Pug']</span>\n</pre>\n<p>Other tokenizers can be used as well:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keywordtree</span> <span class=\"kn\">import</span> <span class=\"n\">KeywordTree</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nltk.tokenize.stanford</span> <span class=\"kn\">import</span> <span class=\"n\">StanfordTokenizer</span>\n\n<span class=\"n\">stftk</span> <span class=\"o\">=</span> <span class=\"n\">StanfordTokenizer</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tokenizer</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">stftk</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">kt</span> <span class=\"o\">=</span> <span class=\"n\">KeywordTree</span><span class=\"p\">([],</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># list of children</span>\n<span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">tokenizer</span><span class=\"o\">=</span><span class=\"n\">tokenizer</span><span class=\"p\">)</span>\n</pre>\n<h3>License</h3>\n<pre><code>Copyright 2019 Theodoros Diamantidis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>\n\n          </div>"}, "last_serial": 5350004, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ffc8120ee85896ac66f7d45bdcdd7fab", "sha256": "34f79bc4443c66ad2735917ce7aeb123b9368c149438b148db1fedc5497fbd5b"}, "downloads": -1, "filename": "keywordtree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ffc8120ee85896ac66f7d45bdcdd7fab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3043, "upload_time": "2019-05-30T23:34:04", "upload_time_iso_8601": "2019-05-30T23:34:04.325596Z", "url": "https://files.pythonhosted.org/packages/3e/fc/9d293386e1f05cd27cc51e54460fbce7edd8190d21161f4767d2c5a48f30/keywordtree-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3c6affb3d0b312d72bf05e39cd997987", "sha256": "b6306f3b48ba886759fa5b42bfc1ab000143b038be700519711ea1bbd6ae2e4a"}, "downloads": -1, "filename": "keywordtree-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3c6affb3d0b312d72bf05e39cd997987", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3087, "upload_time": "2019-05-30T23:43:35", "upload_time_iso_8601": "2019-05-30T23:43:35.021494Z", "url": "https://files.pythonhosted.org/packages/e4/86/08c37203209a683c343724e398d3578400ba4b4fd3235a57b64fbfc367af/keywordtree-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "159aca9d023be789b441ff4ab5b9833d", "sha256": "95f84157a1932cdd74aebbb237de8674d703951ae6712024be8c59f267183c7a"}, "downloads": -1, "filename": "keywordtree-0.1.2.tar.gz", "has_sig": false, "md5_digest": "159aca9d023be789b441ff4ab5b9833d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3101, "upload_time": "2019-05-31T13:11:07", "upload_time_iso_8601": "2019-05-31T13:11:07.102424Z", "url": "https://files.pythonhosted.org/packages/47/02/365128dea5b649adc6a01ffe3bbda51a75241eedb970b0cf201f6b831f75/keywordtree-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "2e48a6d793b045ac4d8e106e2673af59", "sha256": "85e479f8c0195b3c0e20769bf66f711df15e46f0a7e2de772358eb3c2e2f2162"}, "downloads": -1, "filename": "keywordtree-0.1.3.tar.gz", "has_sig": false, "md5_digest": "2e48a6d793b045ac4d8e106e2673af59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3112, "upload_time": "2019-05-31T13:39:52", "upload_time_iso_8601": "2019-05-31T13:39:52.621364Z", "url": "https://files.pythonhosted.org/packages/12/c3/0aee2915b32dcc3277f0f44cea20d827575af5a7cb61cab20e58d61e3055/keywordtree-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "80cc72996e5b2cd413310ce9be01d23a", "sha256": "47c1352da8867def436d54b8e6bc9ff4ed584e74f82afc2fadbcccf58f808154"}, "downloads": -1, "filename": "keywordtree-0.1.4.tar.gz", "has_sig": false, "md5_digest": "80cc72996e5b2cd413310ce9be01d23a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4371, "upload_time": "2019-05-31T20:07:48", "upload_time_iso_8601": "2019-05-31T20:07:48.046629Z", "url": "https://files.pythonhosted.org/packages/bd/8e/3533480ae2fa8a547dd4b92e15ee3938d247714ebcfe11cd8b13f44e214a/keywordtree-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "24d5490503543fb58c0c6ad31a53cd05", "sha256": "17837ab364f80456fab99847d33d14b521fb3a259858b5595ee7318ce3e7d429"}, "downloads": -1, "filename": "keywordtree-0.1.5.tar.gz", "has_sig": false, "md5_digest": "24d5490503543fb58c0c6ad31a53cd05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4340, "upload_time": "2019-06-02T13:19:35", "upload_time_iso_8601": "2019-06-02T13:19:35.347610Z", "url": "https://files.pythonhosted.org/packages/d9/4f/ea2980fcbd9cefb94d7f4a141a9c7220fe11c456a70201b3da685785baa7/keywordtree-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "3564a5941bcba99874b76ad5cd825aa4", "sha256": "33dba5830c8b7d0e3907e26ba826a12c35dbd7e7c39f3a8ff3645c7e6d9b2881"}, "downloads": -1, "filename": "keywordtree-0.1.6.tar.gz", "has_sig": false, "md5_digest": "3564a5941bcba99874b76ad5cd825aa4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4497, "upload_time": "2019-06-02T22:19:39", "upload_time_iso_8601": "2019-06-02T22:19:39.159081Z", "url": "https://files.pythonhosted.org/packages/81/87/fca908c5f190626d06a25dae039dc27dd0d58d7dffe38b2807ccebfb9caf/keywordtree-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3564a5941bcba99874b76ad5cd825aa4", "sha256": "33dba5830c8b7d0e3907e26ba826a12c35dbd7e7c39f3a8ff3645c7e6d9b2881"}, "downloads": -1, "filename": "keywordtree-0.1.6.tar.gz", "has_sig": false, "md5_digest": "3564a5941bcba99874b76ad5cd825aa4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4497, "upload_time": "2019-06-02T22:19:39", "upload_time_iso_8601": "2019-06-02T22:19:39.159081Z", "url": "https://files.pythonhosted.org/packages/81/87/fca908c5f190626d06a25dae039dc27dd0d58d7dffe38b2807ccebfb9caf/keywordtree-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:54 2020"}