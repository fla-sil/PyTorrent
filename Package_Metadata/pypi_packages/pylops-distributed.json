{"info": {"author": "mrava", "author_email": "mrava@equinor.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Mathematics"], "description": "![PyLops-distributed](https://github.com/equinor/pylops-distributed/blob/master/docs/source/_static/distr-pylops_b.png)\n\n[![PyPI version](https://badge.fury.io/py/pylops-distributed.svg)](https://badge.fury.io/py/pylops-distributed)\n[![Build Status](https://travis-ci.org/equinor/pylops-distributed.svg?branch=master)](https://travis-ci.org/equinor/pylops-distributed)\n[![AzureDevOps Status](https://dev.azure.com/MRAVA/PyLops/_apis/build/status/equinor.pylops-distributed?branchName=master)](https://dev.azure.com/MRAVA/PyLops/_build/latest?definitionId=3&branchName=master)\n[![Documentation Status](https://readthedocs.org/projects/pylops-distributed/badge/?version=latest)](https://pylops-distributed.readthedocs.io/en/latest/?badge=latest)\n[![OS-support](https://img.shields.io/badge/OS-linux,osx-850A8B.svg)](https://github.com/equinor/pylops)\n[![Slack Status](https://img.shields.io/badge/chat-slack-green.svg)](https://pylops.slack.com)\n\n\n:vertical_traffic_light: :vertical_traffic_light: This library is under early development.\nExpect things to constantly change until version v1.0.0. :vertical_traffic_light: :vertical_traffic_light:\n\n## Objective\nThis library is an extension of [PyLops](https://pylops.readthedocs.io/en/latest/)\nfor distributed operators.\n\nAs much as [numpy](http://www.numpy.org) and [scipy](http://www.scipy.org/scipylib/index.html) lie\nat the core of the parent project PyLops, PyLops-distributed heavily builds on top of\n[Dask](https://dask.org), a Python library for distributed computing.\n\nDoing so, linear operators can be distributed across several processes on a single node\nor even across multiple nodes. Their forward and adjoint\nare first lazily built as directed acyclic graphs and evaluated only when requested by\nthe user (or automatically within one of our solvers).\n\nHere is a simple example showing how a diagonal operator can be created,\napplied and inverted using PyLops:\n```python\nimport numpy as np\nfrom pylops import Diagonal\n\nn = 10\nx = np.ones(n)\nd = np.arange(n) + 1\n\nDop = Diagonal(d)\n\n# y = Dx\ny = Dop*x\n# x = D'y\nxadj = Dop.H*y\n# xinv = D^-1 y\nxinv = Dop / y\n```\n\nand similarly using PyLops-distributed:\n```python\nimport numpy as np\nimport dask.array as da\nimport pylops_distributed\nfrom pylops_distributed import Diagonal\n\n# set-up client\nclient = pylops_distributed.utils.backend.dask()\n\nn = 10\nx = da.ones(n, chunks=(n//2,))\nd = da.from_array(np.arange(n) + 1, chunks=(n//2, n//2))\n\nDop = Diagonal(d)\n\n# y = Dx\ny = Dop*x\n# x = D'y\nxadj = Dop.H*y\n# xinv = D^-1 y\nxinv = Dop / y\n\nda.compute((y, xadj, xinv))\nclient.close()\n```\n\nIt is worth noticing two things at this point:\n\n- in this specific case we did not even need to reimplement the ``Derivative`` operator.\n  Calling numpy operations as methods (e.g., ``x.sum()``) instead of functions (e.g., ``np.sum(x)``)\n  makes it automatic for our operator to act as a distributed operator when a dask array is provided instead. Unfortunately not all numpy functions are also implemented as methods: in those cases we\n  reimplement the operator directly within PyLops-distributed.\n- Using ``*`` and ``.H*`` is still possible also within PyLops-distributed, however when initializing an\n  operator we will need to decide whether we want to simply create dask graph or also evaluation.\n  This gives flexibility as we can decide if and when apply evaluation using the ``compute`` method\n  on a dask array of choice.\n\n\n## Getting started\n\nYou need **Python 3.5 or greater**.\n\n#### From PyPi\nComing soon...\n\n#### From Github\n\nYou can also directly install from the master node\n\n```\npip install https://git@github.com/equinor/pylops-distributed.git@master\n```\n\n## Contributing\n*Feel like contributing to the project? Adding new operators or tutorial?*\n\nFollow the instructions from [PyLops official documentation](https://pylops.readthedocs.io/en/latest/contributing.html).\n\n## Documentation\nThe official documentation of PyLops-distributed is available [here](https://pylops-distributed.readthedocs.io/).\n\n\nMoreover, if you have installed PyLops using the *developer environment* you can also build the documentation locally by\ntyping the following command:\n```\nmake doc\n```\nOnce the documentation is created, you can make any change to the source code and rebuild the documentation by\nsimply typing\n```\nmake docupdate\n```\nNote that if a new example or tutorial is created (and if any change is made to a previously available example or tutorial)\nyou are required to rebuild the entire documentation before your changes will be visible.\n\n\n## History\nPyLops-Distributed was initially written and it is currently maintained by [Equinor](https://www.equinor.com).\nIt is an extension of [PyLops](https://pylops.readthedocs.io/en/latest/) for large-scale optimization with\n*distributed* linear operators that can be tailored to our needs, and as contribution to the free software community.\n\n\n## Contributors\n* Matteo Ravasi, mrava87\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "algebra,inverse problems,large-scale optimization", "license": "", "maintainer": "", "maintainer_email": "", "name": "pylops-distributed", "package_url": "https://pypi.org/project/pylops-distributed/", "platform": "", "project_url": "https://pypi.org/project/pylops-distributed/", "project_urls": null, "release_url": "https://pypi.org/project/pylops-distributed/0.1.0/", "requires_dist": ["numpy (>=1.15.0)", "scipy", "llvmlite", "numba", "dask[complete] (>=2.0.0)", "pylops"], "requires_python": "", "summary": " An extension to PyLops for distributed linear operators.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"PyLops-distributed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7faee13c1174f6fb25c02d2760dc134868c8811c/68747470733a2f2f6769746875622e636f6d2f657175696e6f722f70796c6f70732d64697374726962757465642f626c6f622f6d61737465722f646f63732f736f757263652f5f7374617469632f64697374722d70796c6f70735f622e706e67\"></p>\n<p><a href=\"https://badge.fury.io/py/pylops-distributed\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b50148e06850e820b7eb324968f940e8f83ec539/68747470733a2f2f62616467652e667572792e696f2f70792f70796c6f70732d64697374726962757465642e737667\"></a>\n<a href=\"https://travis-ci.org/equinor/pylops-distributed\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/770826c71b5680380707d386578ff60766974bc0/68747470733a2f2f7472617669732d63692e6f72672f657175696e6f722f70796c6f70732d64697374726962757465642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://dev.azure.com/MRAVA/PyLops/_build/latest?definitionId=3&amp;branchName=master\" rel=\"nofollow\"><img alt=\"AzureDevOps Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17c486f82981b1bc21e2981b1286464e209df38c/68747470733a2f2f6465762e617a7572652e636f6d2f4d524156412f50794c6f70732f5f617069732f6275696c642f7374617475732f657175696e6f722e70796c6f70732d64697374726962757465643f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://pylops-distributed.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/682a8937fa9a6d7435e4920fc1820be4737c6461/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796c6f70732d64697374726962757465642f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/equinor/pylops\" rel=\"nofollow\"><img alt=\"OS-support\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83560f3d08e6da9a8a142d295214fdf03d62a3f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f532d6c696e75782c6f73782d3835304138422e737667\"></a>\n<a href=\"https://pylops.slack.com\" rel=\"nofollow\"><img alt=\"Slack Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80e660135a65146d7663257f6e7b891c67fa843a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d736c61636b2d677265656e2e737667\"></a></p>\n<p>:vertical_traffic_light: :vertical_traffic_light: This library is under early development.\nExpect things to constantly change until version v1.0.0. :vertical_traffic_light: :vertical_traffic_light:</p>\n<h2>Objective</h2>\n<p>This library is an extension of <a href=\"https://pylops.readthedocs.io/en/latest/\" rel=\"nofollow\">PyLops</a>\nfor distributed operators.</p>\n<p>As much as <a href=\"http://www.numpy.org\" rel=\"nofollow\">numpy</a> and <a href=\"http://www.scipy.org/scipylib/index.html\" rel=\"nofollow\">scipy</a> lie\nat the core of the parent project PyLops, PyLops-distributed heavily builds on top of\n<a href=\"https://dask.org\" rel=\"nofollow\">Dask</a>, a Python library for distributed computing.</p>\n<p>Doing so, linear operators can be distributed across several processes on a single node\nor even across multiple nodes. Their forward and adjoint\nare first lazily built as directed acyclic graphs and evaluated only when requested by\nthe user (or automatically within one of our solvers).</p>\n<p>Here is a simple example showing how a diagonal operator can be created,\napplied and inverted using PyLops:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylops</span> <span class=\"kn\">import</span> <span class=\"n\">Diagonal</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">Dop</span> <span class=\"o\">=</span> <span class=\"n\">Diagonal</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># y = Dx</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Dop</span><span class=\"o\">*</span><span class=\"n\">x</span>\n<span class=\"c1\"># x = D'y</span>\n<span class=\"n\">xadj</span> <span class=\"o\">=</span> <span class=\"n\">Dop</span><span class=\"o\">.</span><span class=\"n\">H</span><span class=\"o\">*</span><span class=\"n\">y</span>\n<span class=\"c1\"># xinv = D^-1 y</span>\n<span class=\"n\">xinv</span> <span class=\"o\">=</span> <span class=\"n\">Dop</span> <span class=\"o\">/</span> <span class=\"n\">y</span>\n</pre>\n<p>and similarly using PyLops-distributed:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"nn\">da</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pylops_distributed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylops_distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Diagonal</span>\n\n<span class=\"c1\"># set-up client</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">pylops_distributed</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">backend</span><span class=\"o\">.</span><span class=\"n\">dask</span><span class=\"p\">()</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">,))</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"n\">Dop</span> <span class=\"o\">=</span> <span class=\"n\">Diagonal</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># y = Dx</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Dop</span><span class=\"o\">*</span><span class=\"n\">x</span>\n<span class=\"c1\"># x = D'y</span>\n<span class=\"n\">xadj</span> <span class=\"o\">=</span> <span class=\"n\">Dop</span><span class=\"o\">.</span><span class=\"n\">H</span><span class=\"o\">*</span><span class=\"n\">y</span>\n<span class=\"c1\"># xinv = D^-1 y</span>\n<span class=\"n\">xinv</span> <span class=\"o\">=</span> <span class=\"n\">Dop</span> <span class=\"o\">/</span> <span class=\"n\">y</span>\n\n<span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">((</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">xadj</span><span class=\"p\">,</span> <span class=\"n\">xinv</span><span class=\"p\">))</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>It is worth noticing two things at this point:</p>\n<ul>\n<li>in this specific case we did not even need to reimplement the <code>Derivative</code> operator.\nCalling numpy operations as methods (e.g., <code>x.sum()</code>) instead of functions (e.g., <code>np.sum(x)</code>)\nmakes it automatic for our operator to act as a distributed operator when a dask array is provided instead. Unfortunately not all numpy functions are also implemented as methods: in those cases we\nreimplement the operator directly within PyLops-distributed.</li>\n<li>Using <code>*</code> and <code>.H*</code> is still possible also within PyLops-distributed, however when initializing an\noperator we will need to decide whether we want to simply create dask graph or also evaluation.\nThis gives flexibility as we can decide if and when apply evaluation using the <code>compute</code> method\non a dask array of choice.</li>\n</ul>\n<h2>Getting started</h2>\n<p>You need <strong>Python 3.5 or greater</strong>.</p>\n<h4>From PyPi</h4>\n<p>Coming soon...</p>\n<h4>From Github</h4>\n<p>You can also directly install from the master node</p>\n<pre><code>pip install https://git@github.com/equinor/pylops-distributed.git@master\n</code></pre>\n<h2>Contributing</h2>\n<p><em>Feel like contributing to the project? Adding new operators or tutorial?</em></p>\n<p>Follow the instructions from <a href=\"https://pylops.readthedocs.io/en/latest/contributing.html\" rel=\"nofollow\">PyLops official documentation</a>.</p>\n<h2>Documentation</h2>\n<p>The official documentation of PyLops-distributed is available <a href=\"https://pylops-distributed.readthedocs.io/\" rel=\"nofollow\">here</a>.</p>\n<p>Moreover, if you have installed PyLops using the <em>developer environment</em> you can also build the documentation locally by\ntyping the following command:</p>\n<pre><code>make doc\n</code></pre>\n<p>Once the documentation is created, you can make any change to the source code and rebuild the documentation by\nsimply typing</p>\n<pre><code>make docupdate\n</code></pre>\n<p>Note that if a new example or tutorial is created (and if any change is made to a previously available example or tutorial)\nyou are required to rebuild the entire documentation before your changes will be visible.</p>\n<h2>History</h2>\n<p>PyLops-Distributed was initially written and it is currently maintained by <a href=\"https://www.equinor.com\" rel=\"nofollow\">Equinor</a>.\nIt is an extension of <a href=\"https://pylops.readthedocs.io/en/latest/\" rel=\"nofollow\">PyLops</a> for large-scale optimization with\n<em>distributed</em> linear operators that can be tailored to our needs, and as contribution to the free software community.</p>\n<h2>Contributors</h2>\n<ul>\n<li>Matteo Ravasi, mrava87</li>\n</ul>\n\n          </div>"}, "last_serial": 6598191, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "352c8998e6921e6dc3628173ec275ff7", "sha256": "a4c1b0c389e7b171334c9cb972cca19ab2aa3a11a8a920dff99d2899d071a777"}, "downloads": -1, "filename": "pylops_distributed-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "352c8998e6921e6dc3628173ec275ff7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40576, "upload_time": "2019-09-01T21:18:20", "upload_time_iso_8601": "2019-09-01T21:18:20.821150Z", "url": "https://files.pythonhosted.org/packages/41/37/0afbbc3ac90e978062067341040d0563492ae9b847793a7394877b5cae8e/pylops_distributed-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6596736a3444ec462d4b52ca8ae8eefb", "sha256": "5d0cde08f575b9dd9a9e84b8dbbc42c22a822c8bb252254eba418065dfba0977"}, "downloads": -1, "filename": "pylops_distributed-0.0.0.tar.gz", "has_sig": false, "md5_digest": "6596736a3444ec462d4b52ca8ae8eefb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25627, "upload_time": "2019-09-01T21:18:23", "upload_time_iso_8601": "2019-09-01T21:18:23.519633Z", "url": "https://files.pythonhosted.org/packages/8c/86/27ac279c41dd0ed90f2c8b3c1126c97c6b7945fb502d6dca1565313273ee/pylops_distributed-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "09a34498dce1cee34615b9659779a8dd", "sha256": "1dcbd467cce0a0151e260cbd112ed76215bb3c576f24823f54ff09c2b3596e78"}, "downloads": -1, "filename": "pylops_distributed-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "09a34498dce1cee34615b9659779a8dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47328, "upload_time": "2020-02-09T16:21:28", "upload_time_iso_8601": "2020-02-09T16:21:28.541498Z", "url": "https://files.pythonhosted.org/packages/b5/8f/98e435a1d8890792203c7b441d5b91ae5adf7f9990a3f3005e90a2e8ff05/pylops_distributed-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09a34498dce1cee34615b9659779a8dd", "sha256": "1dcbd467cce0a0151e260cbd112ed76215bb3c576f24823f54ff09c2b3596e78"}, "downloads": -1, "filename": "pylops_distributed-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "09a34498dce1cee34615b9659779a8dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47328, "upload_time": "2020-02-09T16:21:28", "upload_time_iso_8601": "2020-02-09T16:21:28.541498Z", "url": "https://files.pythonhosted.org/packages/b5/8f/98e435a1d8890792203c7b441d5b91ae5adf7f9990a3f3005e90a2e8ff05/pylops_distributed-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:02:47 2020"}