{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Python SDK for ImageKit\n\n[![Python CI](<https://github.com/imagekit-developer/imagekit-python/workflows/Python%20CI/badge.svg>)](https://github.com/imagekit-developer/imagekit-python/)\n[![imagekitio](<https://img.shields.io/pypi/v/imagekitio.svg>)](https://pypi.org/project/imagekitio)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Twitter Follow](https://img.shields.io/twitter/follow/imagekitio?label=Follow&style=social)](https://twitter.com/ImagekitIo)\n\nPython SDK for [ImageKit](https://imagekit.io/) that implements the new APIs and interface for performing different file\noperations.\n\nImageKit is a complete image optimization and transformation solution that comes with and\n[image CDN](https://imagekit.io/features/imagekit-infrastructure) and media storage. It can be integrated with your\nexisting infrastructure - storages like AWS s3, web servers, your CDN and custom domain names, allowing you to deliver\noptimize images in minutes with minimal code changes.\n\nTable of contents -\n * [Installation](#Installation)\n * [Initialization](#Initialization)\n * [URL Generation](#URL-generation)\n * [File Upload](#File-Upload)\n * [File Management](#File-Management)\n * [Utility Functions](#Utility-functions)\n * [Support](#Support)\n * [Links](#Links)\n\n\n ## Installation\n Go to your terminal and type the following command\n```bash\npip install imagekitio\n```\n\n## Initialization\n```python\nfrom imagekitio import ImageKit\nimagekit = ImageKit(\n    private_key='your private_key',\n    public_key='your public_key',\n    url_endpoint = 'your url_endpoint'\n)\n```\n\n## Usage\n\nYou can use this Python SDK for 3 different kinds of methods - URL generation, file upload and file management.\nThe usage of the SDK has been explained below\n\n## URL generation\n\n**1. Using Image path and image hostname or endpoint**\n\nThis method allows you to create a URL using the path where the image exists and the URL\nendpoint(url_endpoint) you want to use to access the image. You can refer to the documentation\n[here](https://docs.imagekit.io/integration/url-endpoints) to read more about URL endpoints\nin ImageKit and the section about [image origins](https://docs.imagekit.io/integration/configure-origin) to understand\nabout paths with different kinds of origins.\n\n\n```python\nimagekit_url = imagekit.url({\n            \"path\": \"/default-image.jpg\",\n            \"url_endpoint\": \"https://ik.imagekit.io/your_imagekit_id/endpoint/\",\n            \"transformation\": [{\"height\": \"300\", \"width\": \"400\"}],\n        }\n)\n```\n\nThe result in a URL like\n```\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/tr:h-300,w-400/default-image.jpg\n```\n\n**2.Using full image URL**\nThis method allows you to add transformation parameters to and existing, complete URL that is already mapped to ImageKit\nusing ```src``` parameter. This method should be used if you have the complete image URL mapped to ImageKit stored in your\ndatabase.\n\n\n```python\nimage_url = imagekit.url({\n    \"src\": \"https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg\",\n    \"transformation\" : [{\n        \"height\": \"300\",\n        \"width\": \"400\"\n    }]\n})\n```\n\nThe results in a URL like\n\n```\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=h-300%2Cw-400\n```\n\n\nThe ```.url()``` method accepts the following parameters\n\n| Option                  | Description|\n| :---------------------- ||\n| url_endpoint            | Optional. The base URL to be appended before the path of the image. If not specified, the URL Endpoint specified at the time of SDK initialization is used. For example, https://ik.imagekit.io/your_imagekit_id/endpoint/                                                                                                                                                                                                                                                                                                                                                                |\n| path                    | Conditional. This is the path at which the image exists. For example, `/path/to/image.jpg`. Either the `path` or `src` parameter need to be specified for URL generation.                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| src                     | Conditional. This is the complete URL of an image already mapped to ImageKit. For example, `https://ik.imagekit.io/your_imagekit_id/endpoint/path/to/image.jpg`. Either the `path` or `src` parameter need to be specified for URL generation.                                                                                                                                                                                                                                                                                                                                            |\n| transformation          | Optional. An array of objects specifying the transformation to be applied in the URL. The transformation name  and the value should be specified as a key-value pair in the object. Different steps of a [chained transformation](https://docs.imagekit.io/features/image-transformations/chained-transformations) can be specified as different objects of the array. The complete list of supported transformations in the SDK and some examples of using them are given later. If you use a transformation name that is not specified in the SDK, it gets applied as it is in the URL. |\n| transformation_position | Optional. Default value is `path` that places the transformation string as a path parameter in the URL. Can also be specified as `query` which adds the transformation string as the query parameter `tr` in the URL. If you use `src` parameter to create the URL, then the transformation string is always added as a query parameter.                                                                                                                                                                                                                                                  |\n| query_parameters        | Optional. These are the other query parameters that you want to add to the final URL. These can be any query parameters and not necessarily related to ImageKit. Especially useful, if you want to add some versioning parameter to your URLs.                                                                                                                                                                                                                                                                                                                                            |\n| signed                  | Optional. Boolean. Default is `false`. If set to `true`, the SDK generates a signed image URL adding the image signature to the image URL. This can only be used if you are creating the URL with the `url_endpoint` and `path` parameters, and not with the `src` parameter.                                                                                                                                                                                                                                                                                                             |\n| expire_seconds          | Optional. Integer. Meant to be used along with the `signed` parameter to specify the time in seconds from now when the URL should expire. If specified, the URL contains the expiry timestamp in the URL and the image signature is modified accordingly.                                                                                                                                                                                                                                                                                                                                 |\n\n\n## Examples of generating URLs\n**1. Chained Transformations as a query parameter**\n\n```python\n    image_url = imagekit.url({\n        \"path\": \"/default-image.jpg\",\n        \"url_endpoint\": \"https://ik.imagekit.io/your_imagekit_id/endpoint/\",\n        \"transformation\": [{\n                    \"height\": \"300\",\n                    \"width\": \"400\"\n                },\n                {\n                    \"rotation\": 90\n                }],\n        \"transformation_position \": \"query\"\n    })\n```\nSample Result URL -\n```\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=h-300%2Cw-400%3Art-90\n```\n\n\n\n**2. Sharpening and contrast transforms and a progressive JPG image**\n\nThere are some transforms like [Sharpening](https://docs.imagekit.io/features/image-transformations/image-enhancement-and-color-manipulation)\nthat can be added to the URL with or without any other value. To use such transforms without specifying a value, specify\nthe value as \"-\" in the transformation object, otherwise, specify the value that you want to be\nadded to this transformation.\n\n\n```python\n    image_url = imagekit.url({\n        \"src\": \"https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg\",\n        \"transformation\": [{\n            \"format\": \"jpg\",\n            \"progressive\": \"true\",\n            \"effect_sharpen\": \"-\",\n            \"effect_contrast\": \"1\"\n        }]\n    })\n```\n\n```\n//Note that because `src` parameter was used, the transformation string gets added as a query parameter `tr`\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=f-jpg%2Cpr-true%2Ce-sharpen%2Ce-contrast-1\n```\n\n**3. Signed URL that expires in 300 seconds with the default URL endpoint and other query parameters**\n\n```python\n    image_url = imagekit.url({\n        \"path\": \"/default-image\",\n        \"query_parameters\": {\n            \"p1\": \"123\",\n            \"p2\": \"345\"\n        },\n        \"transformation\": [{\n            \"height\": \"300\",\n            \"width\": \"400\"\n        }],\n        \"signed\": True,\n        \"expire_seconds\": 300\n    })\n```\n**Sample Result URL**\n```\nhttps://ik.imagekit.io/your_imagekit_id/tr:h-300,w-400/default-image.jpg?v=123&ik-t=1567358667&ik-s=f2c7cdacbe7707b71a83d49cf1c6110e3d701054\n```\n\n**List of transformations**\n\nThe complete list of transformations supported and their usage in ImageKit can be found [here](https://docs.imagekit.io/features/image-transformations/resize-crop-and-other-transformations).\nThe SDK gives a name to each transformation parameter, making the code simpler, making the code simpler and readable.\nIf a transformation is supported in ImageKit, but a name for it cannot be found in the table below, then use the\ntransformation code from ImageKit docs as the name when using in the ```url``` function.\n\n| Supported Transformation Name | Translates to parameter |\n| ----------------------------- | ----------------------- |\n| height                        | h                       |\n| width                         | w                       |\n| aspect_ratio                  | ar                      |\n| quality                       | q                       |\n| crop                          | c                       |\n| crop_mode                     | cm                      |\n| x                             | x                       |\n| y                             | y                       |\n| focus                         | fo                      |\n| format                        | f                       |\n| radius                        | r                       |\n| background                    | bg                      |\n| border                        | bo                      |\n| rotation                      | rt                      |\n| blur                          | bl                      |\n| named                         | n                       |\n| overlay_image                 | oi                      |\n| overlay_x                     | ox                      |\n| overlay_y                     | oy                      |\n| overlay_focus                 | ofo                     |\n| overlay_height                | oh                      |\n| overlay_width                 | ow                      |\n| overlay_text                  | ot                      |\n| overlay_text_font_size        | ots                     |\n| overlay_text_font_family      | otf                     |\n| overlay_text_color            | otc                     |\n| overlay_alpha                 | oa                      |\n| overlay_text_typography       | ott                     |\n| overlay_background            | obg                     |\n| overlay_image_trim            | oit                     |\n| progressive                   | pr                      |\n| lossless                      | lo                      |\n| trim                          | t                       |\n| metadata                      | md                      |\n| color_profile                 | cp                      |\n| default_image                 | di                      |\n| dpr                           | dpr                     |\n| effect_sharpen                | e-sharpen               |\n| effect_usm                    | e-usm                   |\n| effect_contrast               | e-contrast              |\n| effect_gray                   | e-grayscale             |\n| original                      | orig                    |\n\n## File Upload\n\nThe SDK provides a simple interface using the `.upload_file()` method to upload files to the ImageKit Media library. It\naccepts all the parameters supported by the [ImageKit Upload API](https://docs.imagekit.io/api-reference/upload-file-api/server-side-file-upload).\n\nThe `upload_file()` method requires at least the `file` and the `file_name` parameter to upload a file and returns a Dict with error or success data. Use `options` parameter to pass other parameters supported by the [ImageKit Upload API](https://docs.imagekit.io/api-reference/upload-file-api/server-side-file-upload). Use the same parameter name as specified in the upload API documentation.\n\nSimple usage\n\n```python\nimagekit.upload_file(\n    file= \"<url|base_64|binary>\", # required\n    file_name= \"my_file_name.jpg\", # required\n    options= {\n        \"folder\" : \"/example-folder/\",\n        \"tags\": [\"sample-tag\"],\n        \"is_private_file\": False,\n        \"use_unique_file_name\": True,\n        \"response_fields\": [\"is_private_file\", \"tags\"],\n    }\n)\n\n```\n\nIf the upload succeed, `error` will be `null` and the `result` will be the same as what is received from ImageKit's servers.\nIf the upload fails, `error` will be the same as what is received from ImageKit's servers and the `result` will be null. Learn more from the sample app in this repository.\n\n## File Management\n\nThe SDK provides a simple interface for all the [media APIs mentioned here](https://docs.imagekit.io/api-reference/media-api)\nto manage your files. This also returns `error` and `result`, error will be `None` if API succeeds.\n\n**1. List & Search Files**\n\nAccepts an object specifying the parameters to be used to list and search files. All parameters specified\nin the [documentation here](https://docs.imagekit.io/api-reference/media-api/list-and-search-files#list-and-search-file-api) can be passed as is with the\ncorrect values to get the results.\n\n```python\nimagekit.list_files({\n    \"skip\": 10,\n    \"limit\": 10,\n})\n```\n**2. Get File Details**\nAccepts the file ID and fetches the details as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/get-file-details)\n\n```python\nimagekit.get_file_details(file_id)\n```\n\n**3. Get File Metadata**\nAccepts the file ID and fetches the metadata as per the [API documentation here](https://docs.imagekit.io/api-reference/metadata-api/get-image-metadata-for-uploaded-media-files)\n```python\nimagekit.get_file_metadata(file_id)\n```\n\n\n**3. Get File Metadata from remote url**\nAccepts the remote file url and fetches the metadata as per the [API documentation here](https://docs.imagekit.io/api-reference/metadata-api/get-image-metadata-from-remote-url)\n\n```python\nimagekit.get_remote_file_url_metadata(remote_file_url)\n```\n\n**4. Update File Details**\nUpdate parameters associated with the file as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/update-file-details).\nThe first argument to the `update_field_details` method is the file ID and the second argument is an object with the\nparameters to be updated.\n\n```python\nimagekit.update_file_details(\"file_id\", {\n    \"tags\": [\"image_tag\"],\n    \"custom_coordinates\": \"10,10,100, 100\"\n})\n```\n\n**6. Delete File**\nDelete a file as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/delete-file). The method accepts the file ID of the file that has to be\ndeleted.\n\n```python\nimagekit.delete_file(file_id)\n```\n\n**6. Bulk File Delete by IDs**\nDelete a file as per the [API documentation here](https://docs.imagekit.io/api-reference/media-api/delete-files-bulk). The method accepts list of file IDs of  files that has to be\ndeleted.\n\n```python\nimagekit.bulk_file_delete([\"file_id1\", \"file_id2\"])\n```\n\n**6. Purge Cache**\nProgrammatically issue a cache clear request as clear request as pet the [API documentation here](https://docs.imagekit.io/api-reference/media-api/purge-cache).\nAccepts the full URL of the file for which the cache has to be cleared.\n```python\nimagekit.purge_file_cache(full_url)\n```\n**7. Purge Cache Status**\n\nGet the purge cache request status using the request ID returned when a purge cache request gets submitted as pet the\n[API documentation here](https://docs.imagekit.io/api-reference/media-api/purge-cache-status)\n\n```python\nimagekit.get_purge_file_cache_status(cache_request_id)\n```\n\n\n## Utility functions\n\nWe have included following commonly used utility functions in this package.\n\n**Authentication parameter generation**\n\nIn case you are looking to implement client-side file upload, you are going to need a token, expiry timestamp\nand a valid signature for that upload. The SDK provides a simple method that you can use in your code to generate these\nauthentication parameters for you.\n\n<em>Note: The Private API Key should never be exposed in any client-side code. You must always generate these authentication\n parameters on the server-side</em>\n\nauthentication\n\n`authentication_parameters = imagekit.get_authentication_parameters(token, expire)`\n\nReturns\n```python\n{\n    \"token\": \"unique_token\",\n    \"expire\": \"valid_expiry_timestamp\",\n    \"signature\": \"generated_signature\"\n}\n```\n\nBoth the `token` and `expire` parameters are optional. If not specified the SDK uses the uuid to generate a random\ntoken and also generates a valid expiry timestamp internally. The value of the token and expire used to generate the\nsignature are always returned in the response, no matter if they are provided as an input to this method or not.\n\n**Distance calculation between two pHash values**\n\nPerceptual hashing allows you to constructing a has value that uniquely identifies an input image based on the contents\nof an image. [imagekit.io metadata API](https://docs.imagekit.io/api-reference/metadata-api) returns the pHash\nvalue of an image in the response. You can use this value to find duplicate, near duplicate(similar) image by calculating\ndistance between the two images.\n\n\nThis SDK exposes phash_distance function to calculate distance between two pHash value. It accepts two pHash hexadecimal\nstrings and returns a numeric value indicative of the level of difference between the two images.\n\n```python\ndef calculate_distance():\n    # fetch metadata of two uploaded image files\n    ...\n    # extract pHash strings from both: say 'first_hash' and 'second_hash'\n    ...\n    # calculate the distance between them:\n\n    distance = imagekit.phash_distance(first_hash, second_hash)\n    return distance\n\n```\n\n**Distance calculation examples**\n```python\nimagekit.phash_distance('f06830ca9f1e3e90', 'f06830ca9f1e3e90')\n# output: 0 (ame image)\n\nimagekit.phash_distance('2d5ad3936d2e015b', '2d6ed293db36a4fb')\n# output: 17 (similar images)\n\nimagekit.phash_distance('a4a65595ac94518b', '7838873e791f8400')\n# output: 37 (dissimilar images)\n```\n\n### Sample Code Instruction\nTo run `sample` code go to sample directory and run\n```python\npython sample.py\n```\n## Support\nFor any feedback or to report any issues or general implementation support please reach out to [support@imagekit.io]()\n\n\n## Links\n\n* [Documentation](https://docs.imagekit.io/)\n\n* [Main Website](https://imagekit.io/)\n\n\n## License\nReleased under the MIT license.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/imagekit-developer/imagekit-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "imagekitio", "package_url": "https://pypi.org/project/imagekitio/", "platform": "", "project_url": "https://pypi.org/project/imagekitio/", "project_urls": {"Homepage": "https://github.com/imagekit-developer/imagekit-python"}, "release_url": "https://pypi.org/project/imagekitio/2.2.4/", "requires_dist": ["requests (==2.22.0)"], "requires_python": ">=3.6", "summary": "Python wrapper for the ImageKit API", "version": "2.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python SDK for ImageKit</h1>\n<p><a href=\"https://github.com/imagekit-developer/imagekit-python/\" rel=\"nofollow\"><img alt=\"Python CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76da5f77d19bfed45c4c078c16b5565b7b2d0890/68747470733a2f2f6769746875622e636f6d2f696d6167656b69742d646576656c6f7065722f696d6167656b69742d707974686f6e2f776f726b666c6f77732f507974686f6e25323043492f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/imagekitio\" rel=\"nofollow\"><img alt=\"imagekitio\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c129685283a14fdf35953dcf8c4bd2217b463537/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f696d6167656b6974696f2e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://twitter.com/ImagekitIo\" rel=\"nofollow\"><img alt=\"Twitter Follow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/201c1e7e083b7aa4665597d406896e8ec7313f30/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f696d6167656b6974696f3f6c6162656c3d466f6c6c6f77267374796c653d736f6369616c\"></a></p>\n<p>Python SDK for <a href=\"https://imagekit.io/\" rel=\"nofollow\">ImageKit</a> that implements the new APIs and interface for performing different file\noperations.</p>\n<p>ImageKit is a complete image optimization and transformation solution that comes with and\n<a href=\"https://imagekit.io/features/imagekit-infrastructure\" rel=\"nofollow\">image CDN</a> and media storage. It can be integrated with your\nexisting infrastructure - storages like AWS s3, web servers, your CDN and custom domain names, allowing you to deliver\noptimize images in minutes with minimal code changes.</p>\n<p>Table of contents -</p>\n<ul>\n<li><a href=\"#Installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#Initialization\" rel=\"nofollow\">Initialization</a></li>\n<li><a href=\"#URL-generation\" rel=\"nofollow\">URL Generation</a></li>\n<li><a href=\"#File-Upload\" rel=\"nofollow\">File Upload</a></li>\n<li><a href=\"#File-Management\" rel=\"nofollow\">File Management</a></li>\n<li><a href=\"#Utility-functions\" rel=\"nofollow\">Utility Functions</a></li>\n<li><a href=\"#Support\" rel=\"nofollow\">Support</a></li>\n<li><a href=\"#Links\" rel=\"nofollow\">Links</a></li>\n</ul>\n<h2>Installation</h2>\n<p>Go to your terminal and type the following command</p>\n<pre>pip install imagekitio\n</pre>\n<h2>Initialization</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">imagekitio</span> <span class=\"kn\">import</span> <span class=\"n\">ImageKit</span>\n<span class=\"n\">imagekit</span> <span class=\"o\">=</span> <span class=\"n\">ImageKit</span><span class=\"p\">(</span>\n    <span class=\"n\">private_key</span><span class=\"o\">=</span><span class=\"s1\">'your private_key'</span><span class=\"p\">,</span>\n    <span class=\"n\">public_key</span><span class=\"o\">=</span><span class=\"s1\">'your public_key'</span><span class=\"p\">,</span>\n    <span class=\"n\">url_endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'your url_endpoint'</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Usage</h2>\n<p>You can use this Python SDK for 3 different kinds of methods - URL generation, file upload and file management.\nThe usage of the SDK has been explained below</p>\n<h2>URL generation</h2>\n<p><strong>1. Using Image path and image hostname or endpoint</strong></p>\n<p>This method allows you to create a URL using the path where the image exists and the URL\nendpoint(url_endpoint) you want to use to access the image. You can refer to the documentation\n<a href=\"https://docs.imagekit.io/integration/url-endpoints\" rel=\"nofollow\">here</a> to read more about URL endpoints\nin ImageKit and the section about <a href=\"https://docs.imagekit.io/integration/configure-origin\" rel=\"nofollow\">image origins</a> to understand\nabout paths with different kinds of origins.</p>\n<pre><span class=\"n\">imagekit_url</span> <span class=\"o\">=</span> <span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">({</span>\n            <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/default-image.jpg\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"url_endpoint\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://ik.imagekit.io/your_imagekit_id/endpoint/\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"transformation\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"height\"</span><span class=\"p\">:</span> <span class=\"s2\">\"300\"</span><span class=\"p\">,</span> <span class=\"s2\">\"width\"</span><span class=\"p\">:</span> <span class=\"s2\">\"400\"</span><span class=\"p\">}],</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The result in a URL like</p>\n<pre><code>https://ik.imagekit.io/your_imagekit_id/endpoint/tr:h-300,w-400/default-image.jpg\n</code></pre>\n<p><strong>2.Using full image URL</strong>\nThis method allows you to add transformation parameters to and existing, complete URL that is already mapped to ImageKit\nusing <code>src</code> parameter. This method should be used if you have the complete image URL mapped to ImageKit stored in your\ndatabase.</p>\n<pre><span class=\"n\">image_url</span> <span class=\"o\">=</span> <span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"src\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transformation\"</span> <span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">\"height\"</span><span class=\"p\">:</span> <span class=\"s2\">\"300\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"width\"</span><span class=\"p\">:</span> <span class=\"s2\">\"400\"</span>\n    <span class=\"p\">}]</span>\n<span class=\"p\">})</span>\n</pre>\n<p>The results in a URL like</p>\n<pre><code>https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=h-300%2Cw-400\n</code></pre>\n<p>The <code>.url()</code> method accepts the following parameters</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Option</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">url_endpoint</td>\n<td align=\"left\">Optional. The base URL to be appended before the path of the image. If not specified, the URL Endpoint specified at the time of SDK initialization is used. For example, <a href=\"https://ik.imagekit.io/your_imagekit_id/endpoint/\" rel=\"nofollow\">https://ik.imagekit.io/your_imagekit_id/endpoint/</a></td>\n</tr>\n<tr>\n<td align=\"left\">path</td>\n<td align=\"left\">Conditional. This is the path at which the image exists. For example, <code>/path/to/image.jpg</code>. Either the <code>path</code> or <code>src</code> parameter need to be specified for URL generation.</td>\n</tr>\n<tr>\n<td align=\"left\">src</td>\n<td align=\"left\">Conditional. This is the complete URL of an image already mapped to ImageKit. For example, <code>https://ik.imagekit.io/your_imagekit_id/endpoint/path/to/image.jpg</code>. Either the <code>path</code> or <code>src</code> parameter need to be specified for URL generation.</td>\n</tr>\n<tr>\n<td align=\"left\">transformation</td>\n<td align=\"left\">Optional. An array of objects specifying the transformation to be applied in the URL. The transformation name  and the value should be specified as a key-value pair in the object. Different steps of a <a href=\"https://docs.imagekit.io/features/image-transformations/chained-transformations\" rel=\"nofollow\">chained transformation</a> can be specified as different objects of the array. The complete list of supported transformations in the SDK and some examples of using them are given later. If you use a transformation name that is not specified in the SDK, it gets applied as it is in the URL.</td>\n</tr>\n<tr>\n<td align=\"left\">transformation_position</td>\n<td align=\"left\">Optional. Default value is <code>path</code> that places the transformation string as a path parameter in the URL. Can also be specified as <code>query</code> which adds the transformation string as the query parameter <code>tr</code> in the URL. If you use <code>src</code> parameter to create the URL, then the transformation string is always added as a query parameter.</td>\n</tr>\n<tr>\n<td align=\"left\">query_parameters</td>\n<td align=\"left\">Optional. These are the other query parameters that you want to add to the final URL. These can be any query parameters and not necessarily related to ImageKit. Especially useful, if you want to add some versioning parameter to your URLs.</td>\n</tr>\n<tr>\n<td align=\"left\">signed</td>\n<td align=\"left\">Optional. Boolean. Default is <code>false</code>. If set to <code>true</code>, the SDK generates a signed image URL adding the image signature to the image URL. This can only be used if you are creating the URL with the <code>url_endpoint</code> and <code>path</code> parameters, and not with the <code>src</code> parameter.</td>\n</tr>\n<tr>\n<td align=\"left\">expire_seconds</td>\n<td align=\"left\">Optional. Integer. Meant to be used along with the <code>signed</code> parameter to specify the time in seconds from now when the URL should expire. If specified, the URL contains the expiry timestamp in the URL and the image signature is modified accordingly.</td>\n</tr></tbody></table>\n<h2>Examples of generating URLs</h2>\n<p><strong>1. Chained Transformations as a query parameter</strong></p>\n<pre>    <span class=\"n\">image_url</span> <span class=\"o\">=</span> <span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/default-image.jpg\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"url_endpoint\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://ik.imagekit.io/your_imagekit_id/endpoint/\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"transformation\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n                    <span class=\"s2\">\"height\"</span><span class=\"p\">:</span> <span class=\"s2\">\"300\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"width\"</span><span class=\"p\">:</span> <span class=\"s2\">\"400\"</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">\"rotation\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span>\n                <span class=\"p\">}],</span>\n        <span class=\"s2\">\"transformation_position \"</span><span class=\"p\">:</span> <span class=\"s2\">\"query\"</span>\n    <span class=\"p\">})</span>\n</pre>\n<p>Sample Result URL -</p>\n<pre><code>https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=h-300%2Cw-400%3Art-90\n</code></pre>\n<p><strong>2. Sharpening and contrast transforms and a progressive JPG image</strong></p>\n<p>There are some transforms like <a href=\"https://docs.imagekit.io/features/image-transformations/image-enhancement-and-color-manipulation\" rel=\"nofollow\">Sharpening</a>\nthat can be added to the URL with or without any other value. To use such transforms without specifying a value, specify\nthe value as \"-\" in the transformation object, otherwise, specify the value that you want to be\nadded to this transformation.</p>\n<pre>    <span class=\"n\">image_url</span> <span class=\"o\">=</span> <span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"src\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"transformation\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">\"format\"</span><span class=\"p\">:</span> <span class=\"s2\">\"jpg\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"progressive\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"effect_sharpen\"</span><span class=\"p\">:</span> <span class=\"s2\">\"-\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"effect_contrast\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span>\n        <span class=\"p\">}]</span>\n    <span class=\"p\">})</span>\n</pre>\n<pre><code>//Note that because `src` parameter was used, the transformation string gets added as a query parameter `tr`\nhttps://ik.imagekit.io/your_imagekit_id/endpoint/default-image.jpg?tr=f-jpg%2Cpr-true%2Ce-sharpen%2Ce-contrast-1\n</code></pre>\n<p><strong>3. Signed URL that expires in 300 seconds with the default URL endpoint and other query parameters</strong></p>\n<pre>    <span class=\"n\">image_url</span> <span class=\"o\">=</span> <span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/default-image\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"query_parameters\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"p1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"123\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"p2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"345\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"transformation\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">\"height\"</span><span class=\"p\">:</span> <span class=\"s2\">\"300\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"width\"</span><span class=\"p\">:</span> <span class=\"s2\">\"400\"</span>\n        <span class=\"p\">}],</span>\n        <span class=\"s2\">\"signed\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"expire_seconds\"</span><span class=\"p\">:</span> <span class=\"mi\">300</span>\n    <span class=\"p\">})</span>\n</pre>\n<p><strong>Sample Result URL</strong></p>\n<pre><code>https://ik.imagekit.io/your_imagekit_id/tr:h-300,w-400/default-image.jpg?v=123&amp;ik-t=1567358667&amp;ik-s=f2c7cdacbe7707b71a83d49cf1c6110e3d701054\n</code></pre>\n<p><strong>List of transformations</strong></p>\n<p>The complete list of transformations supported and their usage in ImageKit can be found <a href=\"https://docs.imagekit.io/features/image-transformations/resize-crop-and-other-transformations\" rel=\"nofollow\">here</a>.\nThe SDK gives a name to each transformation parameter, making the code simpler, making the code simpler and readable.\nIf a transformation is supported in ImageKit, but a name for it cannot be found in the table below, then use the\ntransformation code from ImageKit docs as the name when using in the <code>url</code> function.</p>\n<table>\n<thead>\n<tr>\n<th>Supported Transformation Name</th>\n<th>Translates to parameter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>height</td>\n<td>h</td>\n</tr>\n<tr>\n<td>width</td>\n<td>w</td>\n</tr>\n<tr>\n<td>aspect_ratio</td>\n<td>ar</td>\n</tr>\n<tr>\n<td>quality</td>\n<td>q</td>\n</tr>\n<tr>\n<td>crop</td>\n<td>c</td>\n</tr>\n<tr>\n<td>crop_mode</td>\n<td>cm</td>\n</tr>\n<tr>\n<td>x</td>\n<td>x</td>\n</tr>\n<tr>\n<td>y</td>\n<td>y</td>\n</tr>\n<tr>\n<td>focus</td>\n<td>fo</td>\n</tr>\n<tr>\n<td>format</td>\n<td>f</td>\n</tr>\n<tr>\n<td>radius</td>\n<td>r</td>\n</tr>\n<tr>\n<td>background</td>\n<td>bg</td>\n</tr>\n<tr>\n<td>border</td>\n<td>bo</td>\n</tr>\n<tr>\n<td>rotation</td>\n<td>rt</td>\n</tr>\n<tr>\n<td>blur</td>\n<td>bl</td>\n</tr>\n<tr>\n<td>named</td>\n<td>n</td>\n</tr>\n<tr>\n<td>overlay_image</td>\n<td>oi</td>\n</tr>\n<tr>\n<td>overlay_x</td>\n<td>ox</td>\n</tr>\n<tr>\n<td>overlay_y</td>\n<td>oy</td>\n</tr>\n<tr>\n<td>overlay_focus</td>\n<td>ofo</td>\n</tr>\n<tr>\n<td>overlay_height</td>\n<td>oh</td>\n</tr>\n<tr>\n<td>overlay_width</td>\n<td>ow</td>\n</tr>\n<tr>\n<td>overlay_text</td>\n<td>ot</td>\n</tr>\n<tr>\n<td>overlay_text_font_size</td>\n<td>ots</td>\n</tr>\n<tr>\n<td>overlay_text_font_family</td>\n<td>otf</td>\n</tr>\n<tr>\n<td>overlay_text_color</td>\n<td>otc</td>\n</tr>\n<tr>\n<td>overlay_alpha</td>\n<td>oa</td>\n</tr>\n<tr>\n<td>overlay_text_typography</td>\n<td>ott</td>\n</tr>\n<tr>\n<td>overlay_background</td>\n<td>obg</td>\n</tr>\n<tr>\n<td>overlay_image_trim</td>\n<td>oit</td>\n</tr>\n<tr>\n<td>progressive</td>\n<td>pr</td>\n</tr>\n<tr>\n<td>lossless</td>\n<td>lo</td>\n</tr>\n<tr>\n<td>trim</td>\n<td>t</td>\n</tr>\n<tr>\n<td>metadata</td>\n<td>md</td>\n</tr>\n<tr>\n<td>color_profile</td>\n<td>cp</td>\n</tr>\n<tr>\n<td>default_image</td>\n<td>di</td>\n</tr>\n<tr>\n<td>dpr</td>\n<td>dpr</td>\n</tr>\n<tr>\n<td>effect_sharpen</td>\n<td>e-sharpen</td>\n</tr>\n<tr>\n<td>effect_usm</td>\n<td>e-usm</td>\n</tr>\n<tr>\n<td>effect_contrast</td>\n<td>e-contrast</td>\n</tr>\n<tr>\n<td>effect_gray</td>\n<td>e-grayscale</td>\n</tr>\n<tr>\n<td>original</td>\n<td>orig</td>\n</tr></tbody></table>\n<h2>File Upload</h2>\n<p>The SDK provides a simple interface using the <code>.upload_file()</code> method to upload files to the ImageKit Media library. It\naccepts all the parameters supported by the <a href=\"https://docs.imagekit.io/api-reference/upload-file-api/server-side-file-upload\" rel=\"nofollow\">ImageKit Upload API</a>.</p>\n<p>The <code>upload_file()</code> method requires at least the <code>file</code> and the <code>file_name</code> parameter to upload a file and returns a Dict with error or success data. Use <code>options</code> parameter to pass other parameters supported by the <a href=\"https://docs.imagekit.io/api-reference/upload-file-api/server-side-file-upload\" rel=\"nofollow\">ImageKit Upload API</a>. Use the same parameter name as specified in the upload API documentation.</p>\n<p>Simple usage</p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">upload_file</span><span class=\"p\">(</span>\n    <span class=\"n\">file</span><span class=\"o\">=</span> <span class=\"s2\">\"&lt;url|base_64|binary&gt;\"</span><span class=\"p\">,</span> <span class=\"c1\"># required</span>\n    <span class=\"n\">file_name</span><span class=\"o\">=</span> <span class=\"s2\">\"my_file_name.jpg\"</span><span class=\"p\">,</span> <span class=\"c1\"># required</span>\n    <span class=\"n\">options</span><span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"folder\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"/example-folder/\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"sample-tag\"</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"is_private_file\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"use_unique_file_name\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"response_fields\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"is_private_file\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tags\"</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If the upload succeed, <code>error</code> will be <code>null</code> and the <code>result</code> will be the same as what is received from ImageKit's servers.\nIf the upload fails, <code>error</code> will be the same as what is received from ImageKit's servers and the <code>result</code> will be null. Learn more from the sample app in this repository.</p>\n<h2>File Management</h2>\n<p>The SDK provides a simple interface for all the <a href=\"https://docs.imagekit.io/api-reference/media-api\" rel=\"nofollow\">media APIs mentioned here</a>\nto manage your files. This also returns <code>error</code> and <code>result</code>, error will be <code>None</code> if API succeeds.</p>\n<p><strong>1. List &amp; Search Files</strong></p>\n<p>Accepts an object specifying the parameters to be used to list and search files. All parameters specified\nin the <a href=\"https://docs.imagekit.io/api-reference/media-api/list-and-search-files#list-and-search-file-api\" rel=\"nofollow\">documentation here</a> can be passed as is with the\ncorrect values to get the results.</p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">list_files</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"skip\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</pre>\n<p><strong>2. Get File Details</strong>\nAccepts the file ID and fetches the details as per the <a href=\"https://docs.imagekit.io/api-reference/media-api/get-file-details\" rel=\"nofollow\">API documentation here</a></p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">get_file_details</span><span class=\"p\">(</span><span class=\"n\">file_id</span><span class=\"p\">)</span>\n</pre>\n<p><strong>3. Get File Metadata</strong>\nAccepts the file ID and fetches the metadata as per the <a href=\"https://docs.imagekit.io/api-reference/metadata-api/get-image-metadata-for-uploaded-media-files\" rel=\"nofollow\">API documentation here</a></p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">get_file_metadata</span><span class=\"p\">(</span><span class=\"n\">file_id</span><span class=\"p\">)</span>\n</pre>\n<p><strong>3. Get File Metadata from remote url</strong>\nAccepts the remote file url and fetches the metadata as per the <a href=\"https://docs.imagekit.io/api-reference/metadata-api/get-image-metadata-from-remote-url\" rel=\"nofollow\">API documentation here</a></p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">get_remote_file_url_metadata</span><span class=\"p\">(</span><span class=\"n\">remote_file_url</span><span class=\"p\">)</span>\n</pre>\n<p><strong>4. Update File Details</strong>\nUpdate parameters associated with the file as per the <a href=\"https://docs.imagekit.io/api-reference/media-api/update-file-details\" rel=\"nofollow\">API documentation here</a>.\nThe first argument to the <code>update_field_details</code> method is the file ID and the second argument is an object with the\nparameters to be updated.</p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">update_file_details</span><span class=\"p\">(</span><span class=\"s2\">\"file_id\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"image_tag\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"custom_coordinates\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10,10,100, 100\"</span>\n<span class=\"p\">})</span>\n</pre>\n<p><strong>6. Delete File</strong>\nDelete a file as per the <a href=\"https://docs.imagekit.io/api-reference/media-api/delete-file\" rel=\"nofollow\">API documentation here</a>. The method accepts the file ID of the file that has to be\ndeleted.</p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">delete_file</span><span class=\"p\">(</span><span class=\"n\">file_id</span><span class=\"p\">)</span>\n</pre>\n<p><strong>6. Bulk File Delete by IDs</strong>\nDelete a file as per the <a href=\"https://docs.imagekit.io/api-reference/media-api/delete-files-bulk\" rel=\"nofollow\">API documentation here</a>. The method accepts list of file IDs of  files that has to be\ndeleted.</p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">bulk_file_delete</span><span class=\"p\">([</span><span class=\"s2\">\"file_id1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"file_id2\"</span><span class=\"p\">])</span>\n</pre>\n<p><strong>6. Purge Cache</strong>\nProgrammatically issue a cache clear request as clear request as pet the <a href=\"https://docs.imagekit.io/api-reference/media-api/purge-cache\" rel=\"nofollow\">API documentation here</a>.\nAccepts the full URL of the file for which the cache has to be cleared.</p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">purge_file_cache</span><span class=\"p\">(</span><span class=\"n\">full_url</span><span class=\"p\">)</span>\n</pre>\n<p><strong>7. Purge Cache Status</strong></p>\n<p>Get the purge cache request status using the request ID returned when a purge cache request gets submitted as pet the\n<a href=\"https://docs.imagekit.io/api-reference/media-api/purge-cache-status\" rel=\"nofollow\">API documentation here</a></p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">get_purge_file_cache_status</span><span class=\"p\">(</span><span class=\"n\">cache_request_id</span><span class=\"p\">)</span>\n</pre>\n<h2>Utility functions</h2>\n<p>We have included following commonly used utility functions in this package.</p>\n<p><strong>Authentication parameter generation</strong></p>\n<p>In case you are looking to implement client-side file upload, you are going to need a token, expiry timestamp\nand a valid signature for that upload. The SDK provides a simple method that you can use in your code to generate these\nauthentication parameters for you.</p>\n<p><em>Note: The Private API Key should never be exposed in any client-side code. You must always generate these authentication\nparameters on the server-side</em></p>\n<p>authentication</p>\n<p><code>authentication_parameters = imagekit.get_authentication_parameters(token, expire)</code></p>\n<p>Returns</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"unique_token\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"expire\"</span><span class=\"p\">:</span> <span class=\"s2\">\"valid_expiry_timestamp\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"signature\"</span><span class=\"p\">:</span> <span class=\"s2\">\"generated_signature\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Both the <code>token</code> and <code>expire</code> parameters are optional. If not specified the SDK uses the uuid to generate a random\ntoken and also generates a valid expiry timestamp internally. The value of the token and expire used to generate the\nsignature are always returned in the response, no matter if they are provided as an input to this method or not.</p>\n<p><strong>Distance calculation between two pHash values</strong></p>\n<p>Perceptual hashing allows you to constructing a has value that uniquely identifies an input image based on the contents\nof an image. <a href=\"https://docs.imagekit.io/api-reference/metadata-api\" rel=\"nofollow\">imagekit.io metadata API</a> returns the pHash\nvalue of an image in the response. You can use this value to find duplicate, near duplicate(similar) image by calculating\ndistance between the two images.</p>\n<p>This SDK exposes phash_distance function to calculate distance between two pHash value. It accepts two pHash hexadecimal\nstrings and returns a numeric value indicative of the level of difference between the two images.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">calculate_distance</span><span class=\"p\">():</span>\n    <span class=\"c1\"># fetch metadata of two uploaded image files</span>\n    <span class=\"o\">...</span>\n    <span class=\"c1\"># extract pHash strings from both: say 'first_hash' and 'second_hash'</span>\n    <span class=\"o\">...</span>\n    <span class=\"c1\"># calculate the distance between them:</span>\n\n    <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">phash_distance</span><span class=\"p\">(</span><span class=\"n\">first_hash</span><span class=\"p\">,</span> <span class=\"n\">second_hash</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">distance</span>\n</pre>\n<p><strong>Distance calculation examples</strong></p>\n<pre><span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">phash_distance</span><span class=\"p\">(</span><span class=\"s1\">'f06830ca9f1e3e90'</span><span class=\"p\">,</span> <span class=\"s1\">'f06830ca9f1e3e90'</span><span class=\"p\">)</span>\n<span class=\"c1\"># output: 0 (ame image)</span>\n\n<span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">phash_distance</span><span class=\"p\">(</span><span class=\"s1\">'2d5ad3936d2e015b'</span><span class=\"p\">,</span> <span class=\"s1\">'2d6ed293db36a4fb'</span><span class=\"p\">)</span>\n<span class=\"c1\"># output: 17 (similar images)</span>\n\n<span class=\"n\">imagekit</span><span class=\"o\">.</span><span class=\"n\">phash_distance</span><span class=\"p\">(</span><span class=\"s1\">'a4a65595ac94518b'</span><span class=\"p\">,</span> <span class=\"s1\">'7838873e791f8400'</span><span class=\"p\">)</span>\n<span class=\"c1\"># output: 37 (dissimilar images)</span>\n</pre>\n<h3>Sample Code Instruction</h3>\n<p>To run <code>sample</code> code go to sample directory and run</p>\n<pre><span class=\"n\">python</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre>\n<h2>Support</h2>\n<p>For any feedback or to report any issues or general implementation support please reach out to <a href=\"\" rel=\"nofollow\">support@imagekit.io</a></p>\n<h2>Links</h2>\n<ul>\n<li>\n<p><a href=\"https://docs.imagekit.io/\" rel=\"nofollow\">Documentation</a></p>\n</li>\n<li>\n<p><a href=\"https://imagekit.io/\" rel=\"nofollow\">Main Website</a></p>\n</li>\n</ul>\n<h2>License</h2>\n<p>Released under the MIT license.</p>\n\n          </div>"}, "last_serial": 7108961, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "10182794730f4562fab7952db89ef019", "sha256": "144d703e045a3fe8f0ce7901afd356ae25a4220d0bd95c4e3433127388e581e6"}, "downloads": -1, "filename": "imagekitio-1.1.0.tar.gz", "has_sig": false, "md5_digest": "10182794730f4562fab7952db89ef019", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5198, "upload_time": "2017-03-16T06:16:06", "upload_time_iso_8601": "2017-03-16T06:16:06.213021Z", "url": "https://files.pythonhosted.org/packages/7f/b0/4814268201e6c79fc0e2d9c9bd91c256c4a1e628bec7ebcd92100532c89a/imagekitio-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "84a3112558853d7d8676c024a1263c6a", "sha256": "277e1a10cdb12ea6c3db8ea08a02bc3d8fb749ccd89d4d31e7598bdd5a7c30b3"}, "downloads": -1, "filename": "imagekitio-1.1.1.tar.gz", "has_sig": false, "md5_digest": "84a3112558853d7d8676c024a1263c6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5248, "upload_time": "2017-05-29T05:46:19", "upload_time_iso_8601": "2017-05-29T05:46:19.270044Z", "url": "https://files.pythonhosted.org/packages/f6/44/4706f14c44cde35b1705a179c0833bf52dd21fd8118f2e799f827bab596a/imagekitio-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "e36ab0f68ad2e0304f748ffcf7afd229", "sha256": "37765ff79dd57f4c976b4634e098c3799450b97293fa6a667a6f6b0e48d27787"}, "downloads": -1, "filename": "imagekitio-1.2.0.tar.gz", "has_sig": false, "md5_digest": "e36ab0f68ad2e0304f748ffcf7afd229", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6111, "upload_time": "2017-12-08T10:49:13", "upload_time_iso_8601": "2017-12-08T10:49:13.086869Z", "url": "https://files.pythonhosted.org/packages/2d/5c/e3353645871814d030b8e5d5538b09fc001f2de018ce6eb99a7f8305d3a4/imagekitio-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "533ce41e065ab75c57bb8aae37fd6029", "sha256": "87222b59e0f543d9b81290b261194133fa92a40d5062f720a5ef18ef91ce904b"}, "downloads": -1, "filename": "imagekitio-1.2.1.tar.gz", "has_sig": false, "md5_digest": "533ce41e065ab75c57bb8aae37fd6029", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6077, "upload_time": "2018-05-04T07:20:58", "upload_time_iso_8601": "2018-05-04T07:20:58.281420Z", "url": "https://files.pythonhosted.org/packages/00/eb/e5a1c7f669421df952ae1d7ef7bc297071d38ef41b5aae62216dab644446/imagekitio-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "cb93c740211b411a7a777b1707d9baab", "sha256": "d8000df82c8c2971b960290e04bc23ee80cf1eba7aa69dc327458e699d6d39ae"}, "downloads": -1, "filename": "imagekitio-1.2.2.tar.gz", "has_sig": false, "md5_digest": "cb93c740211b411a7a777b1707d9baab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6167, "upload_time": "2018-05-04T13:15:24", "upload_time_iso_8601": "2018-05-04T13:15:24.698300Z", "url": "https://files.pythonhosted.org/packages/7e/0e/566dc1f1be898f50cd2479da3ea28bf168219eb05c1971b88ad0d37dd078/imagekitio-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "31954a0ec6ccb0c16cae855963da8a8a", "sha256": "1ff5b61e1f9502ac1748e271fc3fc8093cc506b3a33fbb4cd13b5388d5ca29db"}, "downloads": -1, "filename": "imagekitio-1.2.3.tar.gz", "has_sig": false, "md5_digest": "31954a0ec6ccb0c16cae855963da8a8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6177, "upload_time": "2018-10-09T10:12:52", "upload_time_iso_8601": "2018-10-09T10:12:52.187975Z", "url": "https://files.pythonhosted.org/packages/9a/15/c44eca06c3eb9b43e14c94f7b8ba78d791d0806820dd3cd1ba0b993209c5/imagekitio-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "9d5d2022e2c6366291344c3ed2fcdbce", "sha256": "8da113d26e8e9513dc6cf5deb6087828275779154090b3b79c07675175c4fa33"}, "downloads": -1, "filename": "imagekitio-1.2.4.tar.gz", "has_sig": false, "md5_digest": "9d5d2022e2c6366291344c3ed2fcdbce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6269, "upload_time": "2018-11-01T10:25:29", "upload_time_iso_8601": "2018-11-01T10:25:29.520901Z", "url": "https://files.pythonhosted.org/packages/55/69/a9343dbc119e50ea355a70d72b2ab29033d9bdf6bba98ffa5782f8495f18/imagekitio-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "c4b0f883655c8b934d17438599485771", "sha256": "6b10b301ebdfb3541444494c014355de85e935f3a4e390778f82f9b1d5d337f6"}, "downloads": -1, "filename": "imagekitio-1.2.5.tar.gz", "has_sig": false, "md5_digest": "c4b0f883655c8b934d17438599485771", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6492, "upload_time": "2019-01-22T07:56:29", "upload_time_iso_8601": "2019-01-22T07:56:29.169883Z", "url": "https://files.pythonhosted.org/packages/79/bf/e8d246c613f67c54ca86295ca8e08fda079d9a674e65cc7b18ca4d686bd2/imagekitio-1.2.5.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "731278a4a05de506ad4c73404186219c", "sha256": "4d8b04403f0124d99a93a1a027c4b7c9a8de046ded9165922ceb2218294d88dd"}, "downloads": -1, "filename": "imagekitio-1.2.6.tar.gz", "has_sig": false, "md5_digest": "731278a4a05de506ad4c73404186219c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6614, "upload_time": "2019-07-01T05:57:00", "upload_time_iso_8601": "2019-07-01T05:57:00.517526Z", "url": "https://files.pythonhosted.org/packages/d2/04/5816c1208cd969d8857c48ca219830cfa13f425495cea2c7bbc66f00ceb0/imagekitio-1.2.6.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "780843ac8e5a38d8562fbb9165667e01", "sha256": "2a1a15150046c47fadd37b257669a8cf3e89f25cda749d0b1c7eedcd88d3b276"}, "downloads": -1, "filename": "imagekitio-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "780843ac8e5a38d8562fbb9165667e01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28883, "upload_time": "2020-01-20T18:34:02", "upload_time_iso_8601": "2020-01-20T18:34:02.324610Z", "url": "https://files.pythonhosted.org/packages/8a/c8/946841d7ad1a75e4f3c0df504ebc2865ba484bb6811e465bc17a8c262372/imagekitio-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49dec484ca9b3ef32caf914d6d28fa52", "sha256": "202bfb5537f6c32acdca5a0030a144a2edbb624e364571c1fd0766076ec7244e"}, "downloads": -1, "filename": "imagekitio-2.0.0.tar.gz", "has_sig": false, "md5_digest": "49dec484ca9b3ef32caf914d6d28fa52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36703, "upload_time": "2020-01-20T18:34:03", "upload_time_iso_8601": "2020-01-20T18:34:03.933041Z", "url": "https://files.pythonhosted.org/packages/1c/c8/9281ade21f918cd2fcf1e406d32eb320254e53877c71065853d520e2f0a8/imagekitio-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "0479e81b573f9e4ea1787bd0f8529357", "sha256": "ad415578006cf885921d58976bd45195951734dc96918a6c5d5ba609f773011a"}, "downloads": -1, "filename": "imagekitio-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0479e81b573f9e4ea1787bd0f8529357", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29812, "upload_time": "2020-01-28T07:36:12", "upload_time_iso_8601": "2020-01-28T07:36:12.804379Z", "url": "https://files.pythonhosted.org/packages/b3/47/d3ff6f2787ee80c36fd4c18d83ba73751ee45375dc71f450690174035b1f/imagekitio-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80f8366ed91240798f764304b6e9e0f4", "sha256": "d0704eb31aa73f1cad375cb2aa8ad65daa25b319116074256db2800644ce7900"}, "downloads": -1, "filename": "imagekitio-2.1.0.tar.gz", "has_sig": false, "md5_digest": "80f8366ed91240798f764304b6e9e0f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38080, "upload_time": "2020-01-28T07:36:14", "upload_time_iso_8601": "2020-01-28T07:36:14.552908Z", "url": "https://files.pythonhosted.org/packages/56/17/d571e28e3a00eec365536d391dda2a5dafe377fd84d56b3b258083e68a96/imagekitio-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "ddbfada9d44b57a20d2f1b3f82cd87de", "sha256": "9664beb9d7893d9f2521f97bc8d80199d03845652f9b7916eec51c636964e5c9"}, "downloads": -1, "filename": "imagekitio-2.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ddbfada9d44b57a20d2f1b3f82cd87de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30021, "upload_time": "2020-02-03T16:26:46", "upload_time_iso_8601": "2020-02-03T16:26:46.838781Z", "url": "https://files.pythonhosted.org/packages/52/77/9032ab54b93997637512c1848c0e73f7f6f9cd4ed035afe8b4875a7080d3/imagekitio-2.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2eeb952881a0e95633a6c7da74d93af", "sha256": "2bb9e05ae5187606465f0a1887fe0394de48275e3da449af1da7e9e12fdd7249"}, "downloads": -1, "filename": "imagekitio-2.2.0.tar.gz", "has_sig": false, "md5_digest": "f2eeb952881a0e95633a6c7da74d93af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38357, "upload_time": "2020-02-03T16:26:48", "upload_time_iso_8601": "2020-02-03T16:26:48.498781Z", "url": "https://files.pythonhosted.org/packages/ef/18/84b77bd59ecdf4d452e8a2bd5e5a088ff2eca900e3d38e47d4f5413f60e3/imagekitio-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "1b2a39c7db3bdd7e89903f3922514d10", "sha256": "46322d97b496d18d32f930d6aa44445d43bcb347fd28bdfd6a8fbe600d9449c9"}, "downloads": -1, "filename": "imagekitio-2.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1b2a39c7db3bdd7e89903f3922514d10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30024, "upload_time": "2020-02-13T15:35:43", "upload_time_iso_8601": "2020-02-13T15:35:43.308593Z", "url": "https://files.pythonhosted.org/packages/45/d7/a40bb8fb22cbca8beff6515670dc41ac9a4836bb7a6263b337cba9b7b945/imagekitio-2.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "092658a9d66d41a8134869fde9163e50", "sha256": "d201e413900e53495fad9dc626a2f202d7fcf8b4afa3d13bc5f624818579a083"}, "downloads": -1, "filename": "imagekitio-2.2.1.tar.gz", "has_sig": false, "md5_digest": "092658a9d66d41a8134869fde9163e50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38355, "upload_time": "2020-02-13T15:35:45", "upload_time_iso_8601": "2020-02-13T15:35:45.048416Z", "url": "https://files.pythonhosted.org/packages/51/26/0056fe761296d334cf275f58080687956f90d46884e44fca0e7ba15b7d66/imagekitio-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "69b466dadcb8e22742b5db6e4ca3500b", "sha256": "5fc2f9a6d4bdede96622d701080829becacde0b146f71fb3ea39baa623873762"}, "downloads": -1, "filename": "imagekitio-2.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "69b466dadcb8e22742b5db6e4ca3500b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30028, "upload_time": "2020-02-13T15:43:10", "upload_time_iso_8601": "2020-02-13T15:43:10.981786Z", "url": "https://files.pythonhosted.org/packages/0c/3a/df810727a3029ba501e4a688b646f71215e6e036e9dfc1737f5e744f7fa6/imagekitio-2.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf532cb3e93b0180e49bc5acbc42f3ad", "sha256": "29e270a0999d23088239a71490634b777cae13a6e1cc2855553aae0939dde791"}, "downloads": -1, "filename": "imagekitio-2.2.2.tar.gz", "has_sig": false, "md5_digest": "bf532cb3e93b0180e49bc5acbc42f3ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38364, "upload_time": "2020-02-13T15:43:12", "upload_time_iso_8601": "2020-02-13T15:43:12.830065Z", "url": "https://files.pythonhosted.org/packages/b8/d0/10ea4d02f147336ac976c071150f0b72fb6c763dfe3588c94253931c1f19/imagekitio-2.2.2.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "72341b97d68559f75531cc3da5ebdd45", "sha256": "7bb3de6a1d755f4e764702cc8a08f19e3f0f0e3d45bf2c97c46e2170dd0b29d7"}, "downloads": -1, "filename": "imagekitio-2.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "72341b97d68559f75531cc3da5ebdd45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30029, "upload_time": "2020-02-14T05:25:07", "upload_time_iso_8601": "2020-02-14T05:25:07.928216Z", "url": "https://files.pythonhosted.org/packages/ca/1c/f81cca01153f4f4c81cf086121fa1ba6aa00f3019f6ab49b39be9ff710f2/imagekitio-2.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a92943c85695e9faeb65f89e56c73b78", "sha256": "0b2ee966e78fad9700fd7bcc24c1b3e0e0420fc27036e6d79f3d158b17fb042a"}, "downloads": -1, "filename": "imagekitio-2.2.3.tar.gz", "has_sig": false, "md5_digest": "a92943c85695e9faeb65f89e56c73b78", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38354, "upload_time": "2020-02-14T05:25:09", "upload_time_iso_8601": "2020-02-14T05:25:09.342980Z", "url": "https://files.pythonhosted.org/packages/c5/65/bfd9f57e51d4b7e0bc4e72f1b44690c9c5e8edd327966debf26028a8bf18/imagekitio-2.2.3.tar.gz", "yanked": false}], "2.2.4": [{"comment_text": "", "digests": {"md5": "7e082825673b05aff61a7df6cfad3b74", "sha256": "e02a140f223b17568d05a845c7a09b1a459d339d8e7b89ff43d49f28046c7f31"}, "downloads": -1, "filename": "imagekitio-2.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "7e082825673b05aff61a7df6cfad3b74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29658, "upload_time": "2020-04-27T06:15:00", "upload_time_iso_8601": "2020-04-27T06:15:00.242276Z", "url": "https://files.pythonhosted.org/packages/4c/e3/7dcfb9e7a11755f0c32d55959bcc684827fa71f31458506e80d08aa5f1e8/imagekitio-2.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fca69911a2e35efc2509666d939cc99e", "sha256": "01f88afca4bc3635aaffbff3442e6eddb6af1bb9c901c6518d2c739670e008f7"}, "downloads": -1, "filename": "imagekitio-2.2.4.tar.gz", "has_sig": false, "md5_digest": "fca69911a2e35efc2509666d939cc99e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28826, "upload_time": "2020-04-27T06:15:01", "upload_time_iso_8601": "2020-04-27T06:15:01.541194Z", "url": "https://files.pythonhosted.org/packages/90/c7/40a0befa5a04b3273117b44e462cff4e039d4efa5b9c87cb2fb86ec43983/imagekitio-2.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7e082825673b05aff61a7df6cfad3b74", "sha256": "e02a140f223b17568d05a845c7a09b1a459d339d8e7b89ff43d49f28046c7f31"}, "downloads": -1, "filename": "imagekitio-2.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "7e082825673b05aff61a7df6cfad3b74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29658, "upload_time": "2020-04-27T06:15:00", "upload_time_iso_8601": "2020-04-27T06:15:00.242276Z", "url": "https://files.pythonhosted.org/packages/4c/e3/7dcfb9e7a11755f0c32d55959bcc684827fa71f31458506e80d08aa5f1e8/imagekitio-2.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fca69911a2e35efc2509666d939cc99e", "sha256": "01f88afca4bc3635aaffbff3442e6eddb6af1bb9c901c6518d2c739670e008f7"}, "downloads": -1, "filename": "imagekitio-2.2.4.tar.gz", "has_sig": false, "md5_digest": "fca69911a2e35efc2509666d939cc99e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28826, "upload_time": "2020-04-27T06:15:01", "upload_time_iso_8601": "2020-04-27T06:15:01.541194Z", "url": "https://files.pythonhosted.org/packages/90/c7/40a0befa5a04b3273117b44e462cff4e039d4efa5b9c87cb2fb86ec43983/imagekitio-2.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:51 2020"}