{"info": {"author": "Mike Malinowski", "author_email": "mike@twisted.space", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# Overview\nSpatial is a module which contains a series of spatially relevent helper\nfunctionality and classes. \n\n## Bounds\nA Bounding Box allows you\nto calculate the overall bounds of a point cloud - but does not store\nthe point cloud itself, it simply expands to match the outer most limits\nof the point cloud data.\n\nThere are three Bounding Box classes:\n\n__Bounds__: This is an N-Dimensional bounding box, allowing your points to\nbe of any dimensional length. This is useful if working in one dimension\nor in a dimensional space greater than three dimensions.\n\n__Bounds2D__: This inherits from Bounds - so gives all the same funcitonaltiy\nexcept it has some convenience functions with an assumption of width\nand height.\n\n__Bounds3D__: Much like Bounds2D, Bounds3D is a Bounds object which exposes\nfunctionality with the assumption of Width, Height and Depth.\n\nIn this example we create two three dimensional bounding boxes\nand test wether they intersect\n\n```python\nimport spatial\n\n# -- Test bound intersections\npoints_a = [\n    [0, 0, 0],\n    [1, 1, 1],\n]\n\npoints_b = [\n    [5, 5, -5],\n    [3, 3, 3],\n]\n\nbounds_a = spatial.Bounds3D(points_a)\nbounds_b = spatial.Bounds3D(points_b)\n\nprint('Does bounds A intersect with bounds B : %s' % ('Yes' if bounds_b.intersects(bounds_a) else 'No'))\n```\n\n\nIn the following example we create a bounding box and test whether\nthe given point is inside the bounds:\n\n```python\nimport spatial\n\nbounds = spatial.Bounds2D()\n\n# -- Create a point cloud\npoints = [\n    [-2, -2],\n    [2, 2],\n]\n\n# -- Add all our points\nbounds.add_points(points)\n\n# -- Test whether a point is inside the bounds\noutside_point = [3, 5]\nprint('Bound contains %s : %s' % (outside_point, bounds.contains(outside_point)))\n\n# -- Same test giving a point inside the bounds\ninside_point = [1, 1]\nprint('Bound contains %s : %s' % (inside_point, bounds.contains(inside_point)))\n```\n\n# Vector\n\nThis class represents a vector which exposes the typically used\nmethods of a 3d vector such as cross and dot products as well as \nlength/magnitude.\n    \n```python\nimport spatial\n\n# -- Create two vectors\nv1 = spatial.Vector3(1.0, 0.0, 0.0)\nv2 = spatial.Vector3(0.0, 1.0, 0.0)\n\n# -- Calculate the angle between the two vectors\nv1.angle(v2)\n```\n\nThe Vector supports basic in-place operations such as \nAdd, Subtract, Multiply and Divide.\n    \n```python\nimport spatial\n\n# -- Create two vectors\nv1 = spatial.Vector3(1.0, 2.0, 3.0)\nv2 = spatial.Vector3(1.0, 2.0, 3.0)\n\n# -- Add the two vectors\nprint(v1 + v2)\n\n# -- Subtract the two vectors\nprint(v1 - v2)\n\n# -- Multiply the two vectors\nprint(v1 * v2)\n\n# -- Divide the two vectos\nprint(v1 / v2)\n```  \n\nGives:\n    \n    Vector3(2.0, 4.0, 6.0)\n    Vector3(0.0, 0.0, 0.0)\n    Vector3(1.0, 4.0, 9.0)\n    Vector3(1.0, 1.0, 1.0)\n\n## Credits & Collaboration\n\n\nI am always open to collaboration, so if you spot bugs lets me know, or if\nyou would like to contribute or get involved just shout!\n\n\n## Compatibility\n\nLaunchpad has been tested under Python 2.7 and Python 3.7 on Windows and Ubuntu.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mikemalinowski/spatial", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "spatial", "package_url": "https://pypi.org/project/spatial/", "platform": "", "project_url": "https://pypi.org/project/spatial/", "project_urls": {"Homepage": "https://github.com/mikemalinowski/spatial"}, "release_url": "https://pypi.org/project/spatial/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "A small pure python library for spatial queries, functions and classes", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overview</h1>\n<p>Spatial is a module which contains a series of spatially relevent helper\nfunctionality and classes.</p>\n<h2>Bounds</h2>\n<p>A Bounding Box allows you\nto calculate the overall bounds of a point cloud - but does not store\nthe point cloud itself, it simply expands to match the outer most limits\nof the point cloud data.</p>\n<p>There are three Bounding Box classes:</p>\n<p><strong>Bounds</strong>: This is an N-Dimensional bounding box, allowing your points to\nbe of any dimensional length. This is useful if working in one dimension\nor in a dimensional space greater than three dimensions.</p>\n<p><strong>Bounds2D</strong>: This inherits from Bounds - so gives all the same funcitonaltiy\nexcept it has some convenience functions with an assumption of width\nand height.</p>\n<p><strong>Bounds3D</strong>: Much like Bounds2D, Bounds3D is a Bounds object which exposes\nfunctionality with the assumption of Width, Height and Depth.</p>\n<p>In this example we create two three dimensional bounding boxes\nand test wether they intersect</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spatial</span>\n\n<span class=\"c1\"># -- Test bound intersections</span>\n<span class=\"n\">points_a</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">points_b</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">bounds_a</span> <span class=\"o\">=</span> <span class=\"n\">spatial</span><span class=\"o\">.</span><span class=\"n\">Bounds3D</span><span class=\"p\">(</span><span class=\"n\">points_a</span><span class=\"p\">)</span>\n<span class=\"n\">bounds_b</span> <span class=\"o\">=</span> <span class=\"n\">spatial</span><span class=\"o\">.</span><span class=\"n\">Bounds3D</span><span class=\"p\">(</span><span class=\"n\">points_b</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Does bounds A intersect with bounds B : </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"s1\">'Yes'</span> <span class=\"k\">if</span> <span class=\"n\">bounds_b</span><span class=\"o\">.</span><span class=\"n\">intersects</span><span class=\"p\">(</span><span class=\"n\">bounds_a</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s1\">'No'</span><span class=\"p\">))</span>\n</pre>\n<p>In the following example we create a bounding box and test whether\nthe given point is inside the bounds:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spatial</span>\n\n<span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"n\">spatial</span><span class=\"o\">.</span><span class=\"n\">Bounds2D</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># -- Create a point cloud</span>\n<span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># -- Add all our points</span>\n<span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">add_points</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Test whether a point is inside the bounds</span>\n<span class=\"n\">outside_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Bound contains </span><span class=\"si\">%s</span><span class=\"s1\"> : </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">outside_point</span><span class=\"p\">,</span> <span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">outside_point</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># -- Same test giving a point inside the bounds</span>\n<span class=\"n\">inside_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Bound contains </span><span class=\"si\">%s</span><span class=\"s1\"> : </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">inside_point</span><span class=\"p\">,</span> <span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">inside_point</span><span class=\"p\">)))</span>\n</pre>\n<h1>Vector</h1>\n<p>This class represents a vector which exposes the typically used\nmethods of a 3d vector such as cross and dot products as well as\nlength/magnitude.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spatial</span>\n\n<span class=\"c1\"># -- Create two vectors</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">spatial</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">spatial</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Calculate the angle between the two vectors</span>\n<span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">angle</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n</pre>\n<p>The Vector supports basic in-place operations such as\nAdd, Subtract, Multiply and Divide.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">spatial</span>\n\n<span class=\"c1\"># -- Create two vectors</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">spatial</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">spatial</span><span class=\"o\">.</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Add the two vectors</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"o\">+</span> <span class=\"n\">v2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Subtract the two vectors</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"o\">-</span> <span class=\"n\">v2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Multiply the two vectors</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"o\">*</span> <span class=\"n\">v2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Divide the two vectos</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"o\">/</span> <span class=\"n\">v2</span><span class=\"p\">)</span>\n</pre>\n<p>Gives:</p>\n<pre><code>Vector3(2.0, 4.0, 6.0)\nVector3(0.0, 0.0, 0.0)\nVector3(1.0, 4.0, 9.0)\nVector3(1.0, 1.0, 1.0)\n</code></pre>\n<h2>Credits &amp; Collaboration</h2>\n<p>I am always open to collaboration, so if you spot bugs lets me know, or if\nyou would like to contribute or get involved just shout!</p>\n<h2>Compatibility</h2>\n<p>Launchpad has been tested under Python 2.7 and Python 3.7 on Windows and Ubuntu.</p>\n\n          </div>"}, "last_serial": 5110904, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5fe8f2dabe1553c30fea8d7bf13e7d35", "sha256": "d7df481a57dc1a62dbf2da71bc4403cd544e2005943a5a2f008b136af677f4c6"}, "downloads": -1, "filename": "spatial-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5fe8f2dabe1553c30fea8d7bf13e7d35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1020, "upload_time": "2019-04-05T16:28:43", "upload_time_iso_8601": "2019-04-05T16:28:43.807058Z", "url": "https://files.pythonhosted.org/packages/c4/80/2e31436414cd61db5fca87648ad4371dc7edc2e4723bf50ce10d0ccf4b04/spatial-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "35752c2cac6b06f7082c33799c784400", "sha256": "16bcebd62d37e2ab046441f1faa46377ed112a24d9592b8afbca8b9fa2ad962e"}, "downloads": -1, "filename": "spatial-0.1.0.tar.gz", "has_sig": false, "md5_digest": "35752c2cac6b06f7082c33799c784400", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4926, "upload_time": "2019-04-05T21:47:23", "upload_time_iso_8601": "2019-04-05T21:47:23.853509Z", "url": "https://files.pythonhosted.org/packages/45/38/68aae232868f77d7b4b8ae8b919174c18957d4580dfa5062ef5e31d9ca4d/spatial-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "cd9d131963bb3270237b6c6433542d71", "sha256": "003ae30a82d2d6792be3e9c438cf7bd04589bfa891db0f52197b89565bb604d0"}, "downloads": -1, "filename": "spatial-0.2.0.tar.gz", "has_sig": false, "md5_digest": "cd9d131963bb3270237b6c6433542d71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7891, "upload_time": "2019-04-07T20:27:18", "upload_time_iso_8601": "2019-04-07T20:27:18.771979Z", "url": "https://files.pythonhosted.org/packages/61/bf/dc03c27e88fa6ad3f6726914ac749ef5516d29adee6adfcc94cf5c07db14/spatial-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd9d131963bb3270237b6c6433542d71", "sha256": "003ae30a82d2d6792be3e9c438cf7bd04589bfa891db0f52197b89565bb604d0"}, "downloads": -1, "filename": "spatial-0.2.0.tar.gz", "has_sig": false, "md5_digest": "cd9d131963bb3270237b6c6433542d71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7891, "upload_time": "2019-04-07T20:27:18", "upload_time_iso_8601": "2019-04-07T20:27:18.771979Z", "url": "https://files.pythonhosted.org/packages/61/bf/dc03c27e88fa6ad3f6726914ac749ef5516d29adee6adfcc94cf5c07db14/spatial-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:47 2020"}