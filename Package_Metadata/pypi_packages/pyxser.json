{"info": {"author": "Daniel Molina Wegener", "author_email": "dmw at coder cl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft", "Operating System :: Microsoft :: Windows", "Operating System :: Microsoft :: Windows :: Windows 95/98/2000", "Operating System :: Microsoft :: Windows :: Windows NT/2000", "Operating System :: POSIX", "Programming Language :: C", "Programming Language :: Python", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup", "Topic :: Text Processing :: Markup :: XML", "Topic :: Utilities"], "description": "pyxser stands for Python XML Serialization and is a Python object to XML serializer and deserializer. In other words, it can convert a Python object into XML and also, convert that XML back into the original Python object. It uses a preorder traversal tree algorithm over the object tree and the XML tree. The algorithm is , and uses some compiler construction techniques as memoization to create unique instances of each element in the object tree. It supports cross referenced and circular referenced object trees, so the serializer do not crash with those kind of objects. Each serialized object before being deserialized is validated against the pyxser XML schema. It also uses mutually recursive functions to serialize and deserialize the object tree, but it has some features, like the depth argument, which allows you to stop serializing/deserializing the object tree at certain point.", "description_content_type": null, "docs_url": "https://pythonhosted.org/pyxser/", "download_url": "http://sourceforge.net/projects/pyxser/files/pyxser-1.5.2-r2/pyxser-1.5.2-r2.win32-py2.7.exe/download", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://coder.cl/products/pyxser/", "keywords": "python xml serialization deserialization", "license": "LGPLv3", "maintainer": "Daniel Molina Wegener", "maintainer_email": "dmw at coder cl", "name": "pyxser", "package_url": "https://pypi.org/project/pyxser/", "platform": "Linux, FreeBSD, NetBSD, OpenBSD, Mac OS X, UNIX", "project_url": "https://pypi.org/project/pyxser/", "project_urls": {"Download": "http://sourceforge.net/projects/pyxser/files/pyxser-1.5.2-r2/pyxser-1.5.2-r2.win32-py2.7.exe/download", "Homepage": "http://coder.cl/products/pyxser/"}, "release_url": "https://pypi.org/project/pyxser/1.5.2-r2.win32/", "requires_dist": null, "requires_python": null, "summary": "pyxser -- Pyhon-Object to XML Serialization/Deserialization", "version": "1.5.2-r2.win32", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>pyxser stands for Python XML Serialization and is a Python object to XML serializer and deserializer. In other words, it can convert a Python object into XML and also, convert that XML back into the original Python object. It uses a preorder traversal tree algorithm over the object tree and the XML tree. The algorithm is , and uses some compiler construction techniques as memoization to create unique instances of each element in the object tree. It supports cross referenced and circular referenced object trees, so the serializer do not crash with those kind of objects. Each serialized object before being deserialized is validated against the pyxser XML schema. It also uses mutually recursive functions to serialize and deserialize the object tree, but it has some features, like the depth argument, which allows you to stop serializing/deserializing the object tree at certain point.</p>\n\n          </div>"}, "last_serial": 803288, "releases": {"1.5.2-r2": [], "1.5.2-r2.win32": []}, "urls": [], "timestamp": "Fri May  8 03:10:50 2020"}