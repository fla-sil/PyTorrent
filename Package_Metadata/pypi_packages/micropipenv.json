{"info": {"author": "Fridolin Pokorny", "author_email": "fridex.devel@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "\u00b5Pipenv\n-------\n\nA lightweight wrapper for pip to support requirements.txt, Pipenv and Poetry\nlock files or converting them to `pip-tools\n<https://pypi.org/project/pip-tools/>`_ compatible output. Designed for\ncontainerized Python applications.\n\nFor a brief video preview, `check this demo \n<https://www.youtube.com/watch?v=I-QC83BcLuo&t=8m58s>`_ (the micropipenv\npart starts at 9:00) or this\n`blog post <https://medium.com/swlh/a-bridge-to-two-python-dependency-pinning-worlds-micropipenv-5da674f38e89>`_.\n\nWhat's the difference in comparision to pip when using requirements.txt?\n=========================================================================\n\n* if ``requirements.txt`` state all the packages in a pinned version with\n  hashes (e.g. `pip-tools <https://pypi.org/project/pip-tools/>`_), micropipenv\n  installs packages with a possible fallback if the installation order is\n  relevant\n\n  * you don't need to care about the installation and maintain correct order or\n    requirements in ``requirements.txt``\n\n  * best effort installation - try until there is a possibility to succeed\n\n* if ``requirements.txt`` do not state all the packages in a pinned form\n\n  * pip's resolver algorithm is used and it's left on pip to resolve\n    requirements\n\n  * the same behavior as micropipenv would not be used\n\n\nWhat's the difference in comparision to Poetry?\n===============================================\n\n* a lightweight addition to Poetry, not a Poetry replacement\n\n  * micropipenv does not substitute Poetry it rather complements it for\n    containerized deployments where the size of the container image and\n    software shipped with it matters\n\n* no release management to Python package indexes\n\n* micropipenv does not implement resolver, it uses already resolved stack that\n  application is shipped with based on ``poetry.lock`` and ``pyproject.toml``\n\n* no virtual environment management\n\n  * virtual environment management is left on user, if needed\n\nWhat's the difference in comparision to Pipenv?\n===============================================\n\n* a lightweight addition to Pipenv, not a Pipenv replacement\n\n  * micropipenv does not substitute Pipenv it rather complements it for\n    containerized deployments where the size of the container image and\n    software shipped with it matters\n\n* it does not `vendor all the dependencies as Pipenv\n  <https://github.com/pypa/pipenv/tree/master/pipenv/vendor>`_\n\n* micropipenv does not implement resolver, it uses already resolved stack that\n  application is shipped with ``Pipfile.lock``\n\n* no virtual environment management\n\n  * virtual environment management is left on user, if needed\n\nmicropipenv use cases\n=====================\n\nWhy should I use ``micropipenv`` instead of `Pipenv <https://github.com/pypa/pipenv>`_\nor `Poetry <https://pypi.org/project/poetry>`_?\n\n* I would like to have a tool that \"rules them all\" - one lightweight tool to\n  support all Python dependency lock file managers (pip-tools, Poetry, Pipenv)\n  and lets users decide what they want to use when deploying Python applications\n  in containerized environments (e.g. Kubernetes, OpenShift, ...)\n\n* I would like to have containerized Python applications as small as possible\n  with minimum software shipped and required to build and run the Python\n  application in production.\n\n* I would like to convert files produced by Pipenv/Poetry to a pip-tools\n  compatible output.\n\n* I don't want to install Pipenv/Poetry, but I would like to run a project that\n  uses Pipenv/Poetry for dependency management (e.g. restricted environments).\n\n* My Pipenv installation is broken and `Pipenv upstream did not issue any new\n  Pipenv release <https://github.com/pypa/pipenv/issues/4058>`_ - see also\n  `Thoth's Pipenv release <https://pypi.org/project/thoth-pipenv>`_ for\n  possible fix.\n\n* I would like to deploy my application into a production environment and my\n  application dependencies are managed by Pipenv/Poetry (dependencies are\n  already resolved), but I don't want to run Pipenv/Poetry in production (e.g.\n  OpenShift's s2i build process).\n\n\n``micropipenv install``\n=======================\n\nThe tool supports installing dependencies of the following formats:\n\n* ``Pipenv`` style lock format - files ``Pipfile`` and ``Pipfile.lock``\n* ``Poetry`` style lock format - files ``pyproject.toml`` and ``poetry.lock``\n* ``pip-tools`` style lock format - file ``requirements.txt``\n* raw ``requirements.txt`` as used by ``pip`` (not a lock file)\n\nIn case of Pipenv, Poetry and pip-tools style format, the tool performs\nautomatic recovery if the installation order of dependencies is relevant (one\ndependency fails to install as it depends on an another one).\n\nTo enforce the installation method used, specify ``--method`` option to the\n``install`` subcommand. By default, ``micropipenv`` traverses the filesystem up\nfrom the current working directory and looks for the relevant files in the\nfollowing order:\n\n1. ``Pipfile.lock`` and optionally ``Pipfile`` (if ``--deploy`` set)\n2. ``poetry.lock`` and ``pyproject.toml``\n3. ``requirements.txt`` for ``pip-tools`` and raw ``pip`` requirements\n\nTo install dependencies issue the following command:\n\n.. code-block:: console\n\n  micropipenv install --dev  # --dev is optional\n\nYou can supply additional positional arguments that will be passed to ``pip``.\nUse double dashes to distinguish ``pip`` options from ``micropipenv`` options.\n\n.. code-block::\n\n  # issue `pip install --user'\n  micropipenv install -- --user\n\n``micropipenv`` does not create any virtual environment as in case of\nPipenv/Poetry.  It rather directly talks to ``pip``, if necessary, and\nconstructs arguments out of the lock file used.\n\nTo create a virtual environment to be used by ``micropipenv``:\n\n.. code-block:: console\n\n  python3 -m venv venv/ && . venv/bin/activate\n\n\n``micropipenv install --deploy``\n================================\n\nIf you wish to mimic ``pipenv --deploy`` functionality, you can do so:\n\n.. code-block:: console\n\n  micropipenv install --deploy\n\nNote however, there is a need to parse ``Pipfile`` and verify its content\ncorresponds to Pipefile.lock used (digest computed on ``Pipfile`` content).\n``micropipenv`` requires toml extras for this functionality, so you will need\nto install ``micropipenv[toml]`` (see installation instructions bellow).\n\nThe ``--deploy`` option takes no effect for Poetry and requirements\ninstallation methods.\n\n\n``micropipenv install --dev``\n================================\n\nInstallation of \"development\" dependnecies can be acomplished using the\n``--dev`` flag. This flag has no effect when ``requirements.txt`` file is used.\n\n\n``micropipenv requirements`` / ``micropipenv req``\n==================================================\n\nTo generate output compatible with `pip-tools\n<https://pypi.org/project/pip-tools/>`_, you can issue the following command:\n\n.. code-block:: console\n\n  micropipenv requirements\n\nThis applies to conversion from Poetry and Pipenv specific lock files.\n\nAdditional configuration options can limit what is present in the output (e.g.\n``--no-dev`` to remove development dependencies).\n\nA special option ``--only-direct`` makes ``micropipenv`` work on ``Pipfile``\ninstead of ``Pipfile.lock``. This requires toml extras, so install\n``micropipenv[toml]`` for this functionality (see installation instructions\nbellow). To get direct dependencies of an application and store them in\nrequirements.txt file:\n\n.. code-block:: console\n\n  micropipenv requirements --only-direct > requirements.txt\n\n\nFor a setup that follows ``pip-tools`` convention with ``requirements.in`` and\n``requirements.txt``\n\n.. code-block:: console\n\n  micropipenv requirements --no-dev > requirements.txt\n  micropipenv requirements --no-dev --only-direct > requirements.in\n  micropipenv requirements --no-default > dev-requirements.txt\n  micropipenv requirements --no-default --only-direct > dev-requirements.in\n\n\nSee ``micropipenv requirements --help`` for more info.\n\n\n``micropipenv`` as a library\n============================\n\n``micropipenv`` exposes some core functionality on top of\n``Pipfile``/``Pipfile.lock``.  You can import its functions and use\n``micropipenv`` as a lightweight library for ``Pipfile``/``Pipfile.lock`` and\n``pyproject.toml``/``poetry.lock`` manipulation.\n\n\nAdjusting options using environment variables\n=============================================\n\nAll options can be triggered using environment variables - the name of an\nenvironment variable is always prefixed with ``MICROPIPENV_`` and consists of\nthe name of the option converted to uppercase, dashes are replaced with\nunderscores (example ``--no-dev`` is mapped to ``MICROPIPENV_NO_DEV``). All\nenvironment variables corresponding to flags are parsed as integers and\nsubsequently casted to a boolean. For example, to turn ``--no-dev`` flag on,\nset ``MICROPIPENV_NO_DEV=1`` (0 disables the flag). Parameters supplied to CLI\ntake precedence over environment variables.\n\nA special environment variable ``MICROPIPENV_PIP_BIN`` can point to an\nalternate ``pip`` binary.\n\nTo run this tool in a verbose mode, you can set the ``MICROPIPENV_DEBUG=1`` (the\nsame behavior can be achieved with multiple ``--verbose`` supplied).\n\nThe tool prints software stack information to the standard error output. This was\ndesigned for Thoth to capture information about installed dependencies as a\nuseful source of information for Thoth's build analyzers. This behaviour can be\nsuppressed by setting ``MICROPIPENV_NO_LOCKFILE_PRINT=1`` environment variable.\n\nBesides printing, the tool also writes the content of Pipfile.lock (if a locked\nsoftware stack is used) to the directory where lock files are present (for Pipenv\nfiles, the Pipfile.lock is kept untouched). This behaviour can be suppressed by\nproviding ``MICROPIPENV_NO_LOCKFILE_WRITE=1`` environment variable.\n\nExample usage\n=============\n\nInstall dependencies managed by Poetry as ``pip install --user`` would do\n(option ``--method`` is optional, auto-discovery is performed if omitted):\n\n.. code-block:: console\n\n  $ ls\n  poetry.lock pyproject.toml project.py\n  $ micropipenv install --method poetry -- --user\n\nInstall dependencies (both main and develop) managed by Poetry into a virtual\nenvironment:\n\n.. code-block:: console\n\n  $ ls\n  poetry.lock pyproject.toml project.py\n  $ python3 -m venv venv/\n  $ . venv/bin/activate\n  (venv) $ micropipenv install --dev\n\nInstall dependencies managed by Pipenv (both main and develop) into a virtual\nenvironment  (option ``--method`` is optional, auto-discovery is performed if\nomitted):\n\n.. code-block:: console\n\n  $ ls\n  Pipfile Pipfile.lock src/\n  $ python3 -m venv venv/\n  $ . venv/bin/activate\n  (venv) $ micropipenv install --dev\n\n\nPerform deployment of an application as Pipenv would do with Python interpreter\nversion check and Pipfile file hash check (you can create virtual environment\nonly if necessary):\n\n.. code-block:: console\n\n  $ ls\n  Pipfile Pipfile.lock src/\n  $ python3 -m venv venv/\n  $ . venv/bin/activate\n  (venv) $ micropipenv --deploy\n\nGenerate `pip-tools <https://pypi.org/project/pip-tools/>`_ compliant\n``requirements.in``, ``dev-requirements.in``, ``requirements.txt`` and\n``dev-requirements.txt`` out of ``Pipfile`` and ``Pipfile.lock`` - project\ndependencies managed by Pipenv:\n\n.. code-block:: console\n\n  $ ls\n  Pipfile Pipfile.lock src/\n  $ micropipenv requirements --no-dev > requirements.txt\n  $ micropipenv requirements --no-dev --only-direct > requirements.in\n  $ micropipenv requirements --no-default > dev-requirements.txt\n  $ micropipenv requirements --no-default --only-direct > dev-requirements.in\n\nGenerate `pip-tools <https://pypi.org/project/pip-tools/>`_ complaint\n``requirements.in``, ``dev-requirements.in``, ``requirements.txt`` and\n``dev-requirements.txt`` out of ``pyproject.toml`` and ``poetry.lock`` - project\ndependencies managed by Poetry:\n\n.. code-block:: console\n\n  $ ls\n  poetry.lock pyproject.toml src/\n  $ micropipenv requirements --no-dev > requirements.txt\n  $ micropipenv requirements --no-dev --only-direct > requirements.in\n  $ micropipenv requirements --no-default > dev-requirements.txt\n  $ micropipenv requirements --no-default --only-direct > dev-requirements.in\n\nFor OpenShift's s2i integration, \n`check this repo with a demo <https://github.com/fridex/s2i-example-micropipenv>`_.\n\nInstallation\n============\n\nThe project is `hosted on PyPI <https://pypi.org/project/micropipenv>`_ so\ninstalling it using ``pip`` works as expected:\n\n.. code-block:: console\n\n  pip install micropipenv\n\nThe default installation does not bring any dependencies so its just\n``micropipenv`` that gets installed. However, the default installation supports\nonly ``Pipfile.lock`` management. If you would like to manipulate also with\n``Pipfile`` or Poetry specific lock files, you will need to install\n``micropipenv`` with TOML support (TOML is not in the standard Python library):\n\n.. code-block:: console\n\n  pip install micropipenv[toml]\n\nOnce the project gets installed, you can browse the help message by invoking\nthe ``micropipenv`` CLI:\n\n.. code-block:: console\n\n  micropipenv --help\n\n\nNo installation\n===============\n\nYou can run ``micropipenv`` without actually installing it - simply download\nthe file and execute it. If you do not wish to save ``micropipenv.py`` file to\ndisk, you can issue:\n\n.. code-block:: console\n\n  curl https://raw.githubusercontent.com/thoth-station/micropipenv/master/micropipenv.py | python3 - --help\n\nAnything after ``python3 -`` will be passed as an argument to\n``micropipenv.py`` so installing packages can be simply performed using:\n\n.. code-block:: console\n\n  curl https://raw.githubusercontent.com/thoth-station/micropipenv/master/micropipenv.py | python3 - install -- --user\n\nAll arguments after -- will be passed to ``pip`` as options.", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.org/project/micropipenv", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thoth-station/micropipenv", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "micropipenv", "package_url": "https://pypi.org/project/micropipenv/", "platform": "", "project_url": "https://pypi.org/project/micropipenv/", "project_urls": {"Download": "https://pypi.org/project/micropipenv", "Homepage": "https://github.com/thoth-station/micropipenv"}, "release_url": "https://pypi.org/project/micropipenv/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "A simple wrapper around pip to support requirements.txt, Pipenv and Poetry files for containerized applications", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A lightweight wrapper for pip to support requirements.txt, Pipenv and Poetry\nlock files or converting them to <a href=\"https://pypi.org/project/pip-tools/\" rel=\"nofollow\">pip-tools</a> compatible output. Designed for\ncontainerized Python applications.</p>\n<p>For a brief video preview, <a href=\"https://www.youtube.com/watch?v=I-QC83BcLuo&amp;t=8m58s\" rel=\"nofollow\">check this demo</a> (the micropipenv\npart starts at 9:00) or this\n<a href=\"https://medium.com/swlh/a-bridge-to-two-python-dependency-pinning-worlds-micropipenv-5da674f38e89\" rel=\"nofollow\">blog post</a>.</p>\n<div id=\"what-s-the-difference-in-comparision-to-pip-when-using-requirements-txt\">\n<h2>What\u2019s the difference in comparision to pip when using requirements.txt?</h2>\n<ul>\n<li>if <tt>requirements.txt</tt> state all the packages in a pinned version with\nhashes (e.g. <a href=\"https://pypi.org/project/pip-tools/\" rel=\"nofollow\">pip-tools</a>), micropipenv\ninstalls packages with a possible fallback if the installation order is\nrelevant<ul>\n<li>you don\u2019t need to care about the installation and maintain correct order or\nrequirements in <tt>requirements.txt</tt></li>\n<li>best effort installation - try until there is a possibility to succeed</li>\n</ul>\n</li>\n<li>if <tt>requirements.txt</tt> do not state all the packages in a pinned form<ul>\n<li>pip\u2019s resolver algorithm is used and it\u2019s left on pip to resolve\nrequirements</li>\n<li>the same behavior as micropipenv would not be used</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"what-s-the-difference-in-comparision-to-poetry\">\n<h2>What\u2019s the difference in comparision to Poetry?</h2>\n<ul>\n<li>a lightweight addition to Poetry, not a Poetry replacement<ul>\n<li>micropipenv does not substitute Poetry it rather complements it for\ncontainerized deployments where the size of the container image and\nsoftware shipped with it matters</li>\n</ul>\n</li>\n<li>no release management to Python package indexes</li>\n<li>micropipenv does not implement resolver, it uses already resolved stack that\napplication is shipped with based on <tt>poetry.lock</tt> and <tt>pyproject.toml</tt></li>\n<li>no virtual environment management<ul>\n<li>virtual environment management is left on user, if needed</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"what-s-the-difference-in-comparision-to-pipenv\">\n<h2>What\u2019s the difference in comparision to Pipenv?</h2>\n<ul>\n<li>a lightweight addition to Pipenv, not a Pipenv replacement<ul>\n<li>micropipenv does not substitute Pipenv it rather complements it for\ncontainerized deployments where the size of the container image and\nsoftware shipped with it matters</li>\n</ul>\n</li>\n<li>it does not <a href=\"https://github.com/pypa/pipenv/tree/master/pipenv/vendor\" rel=\"nofollow\">vendor all the dependencies as Pipenv</a></li>\n<li>micropipenv does not implement resolver, it uses already resolved stack that\napplication is shipped with <tt>Pipfile.lock</tt></li>\n<li>no virtual environment management<ul>\n<li>virtual environment management is left on user, if needed</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"micropipenv-use-cases\">\n<h2>micropipenv use cases</h2>\n<p>Why should I use <tt>micropipenv</tt> instead of <a href=\"https://github.com/pypa/pipenv\" rel=\"nofollow\">Pipenv</a>\nor <a href=\"https://pypi.org/project/poetry\" rel=\"nofollow\">Poetry</a>?</p>\n<ul>\n<li>I would like to have a tool that \u201crules them all\u201d - one lightweight tool to\nsupport all Python dependency lock file managers (pip-tools, Poetry, Pipenv)\nand lets users decide what they want to use when deploying Python applications\nin containerized environments (e.g. Kubernetes, OpenShift, \u2026)</li>\n<li>I would like to have containerized Python applications as small as possible\nwith minimum software shipped and required to build and run the Python\napplication in production.</li>\n<li>I would like to convert files produced by Pipenv/Poetry to a pip-tools\ncompatible output.</li>\n<li>I don\u2019t want to install Pipenv/Poetry, but I would like to run a project that\nuses Pipenv/Poetry for dependency management (e.g. restricted environments).</li>\n<li>My Pipenv installation is broken and <a href=\"https://github.com/pypa/pipenv/issues/4058\" rel=\"nofollow\">Pipenv upstream did not issue any new\nPipenv release</a> - see also\n<a href=\"https://pypi.org/project/thoth-pipenv\" rel=\"nofollow\">Thoth\u2019s Pipenv release</a> for\npossible fix.</li>\n<li>I would like to deploy my application into a production environment and my\napplication dependencies are managed by Pipenv/Poetry (dependencies are\nalready resolved), but I don\u2019t want to run Pipenv/Poetry in production (e.g.\nOpenShift\u2019s s2i build process).</li>\n</ul>\n</div>\n<div id=\"micropipenv-install\">\n<h2><tt>micropipenv install</tt></h2>\n<p>The tool supports installing dependencies of the following formats:</p>\n<ul>\n<li><tt>Pipenv</tt> style lock format - files <tt>Pipfile</tt> and <tt>Pipfile.lock</tt></li>\n<li><tt>Poetry</tt> style lock format - files <tt>pyproject.toml</tt> and <tt>poetry.lock</tt></li>\n<li><tt><span class=\"pre\">pip-tools</span></tt> style lock format - file <tt>requirements.txt</tt></li>\n<li>raw <tt>requirements.txt</tt> as used by <tt>pip</tt> (not a lock file)</li>\n</ul>\n<p>In case of Pipenv, Poetry and pip-tools style format, the tool performs\nautomatic recovery if the installation order of dependencies is relevant (one\ndependency fails to install as it depends on an another one).</p>\n<p>To enforce the installation method used, specify <tt><span class=\"pre\">--method</span></tt> option to the\n<tt>install</tt> subcommand. By default, <tt>micropipenv</tt> traverses the filesystem up\nfrom the current working directory and looks for the relevant files in the\nfollowing order:</p>\n<ol>\n<li><tt>Pipfile.lock</tt> and optionally <tt>Pipfile</tt> (if <tt><span class=\"pre\">--deploy</span></tt> set)</li>\n<li><tt>poetry.lock</tt> and <tt>pyproject.toml</tt></li>\n<li><tt>requirements.txt</tt> for <tt><span class=\"pre\">pip-tools</span></tt> and raw <tt>pip</tt> requirements</li>\n</ol>\n<p>To install dependencies issue the following command:</p>\n<pre><span class=\"go\">micropipenv install --dev  # --dev is optional</span>\n</pre>\n<p>You can supply additional positional arguments that will be passed to <tt>pip</tt>.\nUse double dashes to distinguish <tt>pip</tt> options from <tt>micropipenv</tt> options.</p>\n<pre># issue `pip install --user'\nmicropipenv install -- --user\n</pre>\n<p><tt>micropipenv</tt> does not create any virtual environment as in case of\nPipenv/Poetry.  It rather directly talks to <tt>pip</tt>, if necessary, and\nconstructs arguments out of the lock file used.</p>\n<p>To create a virtual environment to be used by <tt>micropipenv</tt>:</p>\n<pre><span class=\"go\">python3 -m venv venv/ &amp;&amp; . venv/bin/activate</span>\n</pre>\n</div>\n<div id=\"micropipenv-install-deploy\">\n<h2><tt>micropipenv install <span class=\"pre\">--deploy</span></tt></h2>\n<p>If you wish to mimic <tt>pipenv <span class=\"pre\">--deploy</span></tt> functionality, you can do so:</p>\n<pre><span class=\"go\">micropipenv install --deploy</span>\n</pre>\n<p>Note however, there is a need to parse <tt>Pipfile</tt> and verify its content\ncorresponds to Pipefile.lock used (digest computed on <tt>Pipfile</tt> content).\n<tt>micropipenv</tt> requires toml extras for this functionality, so you will need\nto install <tt>micropipenv[toml]</tt> (see installation instructions bellow).</p>\n<p>The <tt><span class=\"pre\">--deploy</span></tt> option takes no effect for Poetry and requirements\ninstallation methods.</p>\n</div>\n<div id=\"micropipenv-install-dev\">\n<h2><tt>micropipenv install <span class=\"pre\">--dev</span></tt></h2>\n<p>Installation of \u201cdevelopment\u201d dependnecies can be acomplished using the\n<tt><span class=\"pre\">--dev</span></tt> flag. This flag has no effect when <tt>requirements.txt</tt> file is used.</p>\n</div>\n<div id=\"micropipenv-requirements-micropipenv-req\">\n<h2><tt>micropipenv requirements</tt> / <tt>micropipenv req</tt></h2>\n<p>To generate output compatible with <a href=\"https://pypi.org/project/pip-tools/\" rel=\"nofollow\">pip-tools</a>, you can issue the following command:</p>\n<pre><span class=\"go\">micropipenv requirements</span>\n</pre>\n<p>This applies to conversion from Poetry and Pipenv specific lock files.</p>\n<p>Additional configuration options can limit what is present in the output (e.g.\n<tt><span class=\"pre\">--no-dev</span></tt> to remove development dependencies).</p>\n<p>A special option <tt><span class=\"pre\">--only-direct</span></tt> makes <tt>micropipenv</tt> work on <tt>Pipfile</tt>\ninstead of <tt>Pipfile.lock</tt>. This requires toml extras, so install\n<tt>micropipenv[toml]</tt> for this functionality (see installation instructions\nbellow). To get direct dependencies of an application and store them in\nrequirements.txt file:</p>\n<pre><span class=\"go\">micropipenv requirements --only-direct &gt; requirements.txt</span>\n</pre>\n<p>For a setup that follows <tt><span class=\"pre\">pip-tools</span></tt> convention with <tt>requirements.in</tt> and\n<tt>requirements.txt</tt></p>\n<pre><span class=\"go\">micropipenv requirements --no-dev &gt; requirements.txt\nmicropipenv requirements --no-dev --only-direct &gt; requirements.in\nmicropipenv requirements --no-default &gt; dev-requirements.txt\nmicropipenv requirements --no-default --only-direct &gt; dev-requirements.in</span>\n</pre>\n<p>See <tt>micropipenv requirements <span class=\"pre\">--help</span></tt> for more info.</p>\n</div>\n<div id=\"micropipenv-as-a-library\">\n<h2><tt>micropipenv</tt> as a library</h2>\n<p><tt>micropipenv</tt> exposes some core functionality on top of\n<tt>Pipfile</tt>/<tt>Pipfile.lock</tt>.  You can import its functions and use\n<tt>micropipenv</tt> as a lightweight library for <tt>Pipfile</tt>/<tt>Pipfile.lock</tt> and\n<tt>pyproject.toml</tt>/<tt>poetry.lock</tt> manipulation.</p>\n</div>\n<div id=\"adjusting-options-using-environment-variables\">\n<h2>Adjusting options using environment variables</h2>\n<p>All options can be triggered using environment variables - the name of an\nenvironment variable is always prefixed with <tt>MICROPIPENV_</tt> and consists of\nthe name of the option converted to uppercase, dashes are replaced with\nunderscores (example <tt><span class=\"pre\">--no-dev</span></tt> is mapped to <tt>MICROPIPENV_NO_DEV</tt>). All\nenvironment variables corresponding to flags are parsed as integers and\nsubsequently casted to a boolean. For example, to turn <tt><span class=\"pre\">--no-dev</span></tt> flag on,\nset <tt>MICROPIPENV_NO_DEV=1</tt> (0 disables the flag). Parameters supplied to CLI\ntake precedence over environment variables.</p>\n<p>A special environment variable <tt>MICROPIPENV_PIP_BIN</tt> can point to an\nalternate <tt>pip</tt> binary.</p>\n<p>To run this tool in a verbose mode, you can set the <tt>MICROPIPENV_DEBUG=1</tt> (the\nsame behavior can be achieved with multiple <tt><span class=\"pre\">--verbose</span></tt> supplied).</p>\n<p>The tool prints software stack information to the standard error output. This was\ndesigned for Thoth to capture information about installed dependencies as a\nuseful source of information for Thoth\u2019s build analyzers. This behaviour can be\nsuppressed by setting <tt>MICROPIPENV_NO_LOCKFILE_PRINT=1</tt> environment variable.</p>\n<p>Besides printing, the tool also writes the content of Pipfile.lock (if a locked\nsoftware stack is used) to the directory where lock files are present (for Pipenv\nfiles, the Pipfile.lock is kept untouched). This behaviour can be suppressed by\nproviding <tt>MICROPIPENV_NO_LOCKFILE_WRITE=1</tt> environment variable.</p>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>Install dependencies managed by Poetry as <tt>pip install <span class=\"pre\">--user</span></tt> would do\n(option <tt><span class=\"pre\">--method</span></tt> is optional, auto-discovery is performed if omitted):</p>\n<pre><span class=\"gp\">$</span> ls\n<span class=\"go\">poetry.lock pyproject.toml project.py\n</span><span class=\"gp\">$</span> micropipenv install --method poetry -- --user\n</pre>\n<p>Install dependencies (both main and develop) managed by Poetry into a virtual\nenvironment:</p>\n<pre><span class=\"gp\">$</span> ls\n<span class=\"go\">poetry.lock pyproject.toml project.py\n</span><span class=\"gp\">$</span> python3 -m venv venv/\n<span class=\"gp\">$</span> . venv/bin/activate\n<span class=\"gp-VirtualEnv\">(venv)</span> <span class=\"gp\">$</span> micropipenv install --dev\n</pre>\n<p>Install dependencies managed by Pipenv (both main and develop) into a virtual\nenvironment  (option <tt><span class=\"pre\">--method</span></tt> is optional, auto-discovery is performed if\nomitted):</p>\n<pre><span class=\"gp\">$</span> ls\n<span class=\"go\">Pipfile Pipfile.lock src/\n</span><span class=\"gp\">$</span> python3 -m venv venv/\n<span class=\"gp\">$</span> . venv/bin/activate\n<span class=\"gp-VirtualEnv\">(venv)</span> <span class=\"gp\">$</span> micropipenv install --dev\n</pre>\n<p>Perform deployment of an application as Pipenv would do with Python interpreter\nversion check and Pipfile file hash check (you can create virtual environment\nonly if necessary):</p>\n<pre><span class=\"gp\">$</span> ls\n<span class=\"go\">Pipfile Pipfile.lock src/\n</span><span class=\"gp\">$</span> python3 -m venv venv/\n<span class=\"gp\">$</span> . venv/bin/activate\n<span class=\"gp-VirtualEnv\">(venv)</span> <span class=\"gp\">$</span> micropipenv --deploy\n</pre>\n<p>Generate <a href=\"https://pypi.org/project/pip-tools/\" rel=\"nofollow\">pip-tools</a> compliant\n<tt>requirements.in</tt>, <tt><span class=\"pre\">dev-requirements.in</span></tt>, <tt>requirements.txt</tt> and\n<tt><span class=\"pre\">dev-requirements.txt</span></tt> out of <tt>Pipfile</tt> and <tt>Pipfile.lock</tt> - project\ndependencies managed by Pipenv:</p>\n<pre><span class=\"gp\">$</span> ls\n<span class=\"go\">Pipfile Pipfile.lock src/\n</span><span class=\"gp\">$</span> micropipenv requirements --no-dev &gt; requirements.txt\n<span class=\"gp\">$</span> micropipenv requirements --no-dev --only-direct &gt; requirements.in\n<span class=\"gp\">$</span> micropipenv requirements --no-default &gt; dev-requirements.txt\n<span class=\"gp\">$</span> micropipenv requirements --no-default --only-direct &gt; dev-requirements.in\n</pre>\n<p>Generate <a href=\"https://pypi.org/project/pip-tools/\" rel=\"nofollow\">pip-tools</a> complaint\n<tt>requirements.in</tt>, <tt><span class=\"pre\">dev-requirements.in</span></tt>, <tt>requirements.txt</tt> and\n<tt><span class=\"pre\">dev-requirements.txt</span></tt> out of <tt>pyproject.toml</tt> and <tt>poetry.lock</tt> - project\ndependencies managed by Poetry:</p>\n<pre><span class=\"gp\">$</span> ls\n<span class=\"go\">poetry.lock pyproject.toml src/\n</span><span class=\"gp\">$</span> micropipenv requirements --no-dev &gt; requirements.txt\n<span class=\"gp\">$</span> micropipenv requirements --no-dev --only-direct &gt; requirements.in\n<span class=\"gp\">$</span> micropipenv requirements --no-default &gt; dev-requirements.txt\n<span class=\"gp\">$</span> micropipenv requirements --no-default --only-direct &gt; dev-requirements.in\n</pre>\n<p>For OpenShift\u2019s s2i integration,\n<a href=\"https://github.com/fridex/s2i-example-micropipenv\" rel=\"nofollow\">check this repo with a demo</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The project is <a href=\"https://pypi.org/project/micropipenv\" rel=\"nofollow\">hosted on PyPI</a> so\ninstalling it using <tt>pip</tt> works as expected:</p>\n<pre><span class=\"go\">pip install micropipenv</span>\n</pre>\n<p>The default installation does not bring any dependencies so its just\n<tt>micropipenv</tt> that gets installed. However, the default installation supports\nonly <tt>Pipfile.lock</tt> management. If you would like to manipulate also with\n<tt>Pipfile</tt> or Poetry specific lock files, you will need to install\n<tt>micropipenv</tt> with TOML support (TOML is not in the standard Python library):</p>\n<pre><span class=\"go\">pip install micropipenv[toml]</span>\n</pre>\n<p>Once the project gets installed, you can browse the help message by invoking\nthe <tt>micropipenv</tt> CLI:</p>\n<pre><span class=\"go\">micropipenv --help</span>\n</pre>\n</div>\n<div id=\"no-installation\">\n<h2>No installation</h2>\n<p>You can run <tt>micropipenv</tt> without actually installing it - simply download\nthe file and execute it. If you do not wish to save <tt>micropipenv.py</tt> file to\ndisk, you can issue:</p>\n<pre><span class=\"go\">curl https://raw.githubusercontent.com/thoth-station/micropipenv/master/micropipenv.py | python3 - --help</span>\n</pre>\n<p>Anything after <tt>python3 -</tt> will be passed as an argument to\n<tt>micropipenv.py</tt> so installing packages can be simply performed using:</p>\n<pre><span class=\"go\">curl https://raw.githubusercontent.com/thoth-station/micropipenv/master/micropipenv.py | python3 - install -- --user</span>\n</pre>\n<p>All arguments after \u2013 will be passed to <tt>pip</tt> as options.</p>\n</div>\n\n          </div>"}, "last_serial": 7167642, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "8b539e2549547994601647360106299f", "sha256": "3c982f89d99d67e62ddd71398f11299d5ad2ae63acbd29ca5eea9332cc11361e"}, "downloads": -1, "filename": "micropipenv-0.0.0.tar.gz", "has_sig": false, "md5_digest": "8b539e2549547994601647360106299f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 939, "upload_time": "2020-02-08T11:38:36", "upload_time_iso_8601": "2020-02-08T11:38:36.462119Z", "url": "https://files.pythonhosted.org/packages/b9/e7/29694ba24c1c84154db4abd39bab742d4d9ad903fb5837518a4048eab898/micropipenv-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "9331115021c81c9ebee92ea1770a6b67", "sha256": "fbc412770c71735eb84c92fcda15edd06bc43ff4300e656210d36c1e6127849d"}, "downloads": -1, "filename": "micropipenv-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9331115021c81c9ebee92ea1770a6b67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8866, "upload_time": "2020-02-13T16:57:31", "upload_time_iso_8601": "2020-02-13T16:57:31.967200Z", "url": "https://files.pythonhosted.org/packages/1d/43/ad8ae671de795ec2eafd86515ef9842ab68455009d864c058d0c3dcf680d/micropipenv-0.0.1.tar.gz", "yanked": false}], "0.0.1.post1": [{"comment_text": "", "digests": {"md5": "5801d53505fc19cabf5e57bf59458bfd", "sha256": "bc74911bc9dc32b8e1e7c3e7256a2e87942b656694a97ed8cfc87ac982da97da"}, "downloads": -1, "filename": "micropipenv-0.0.1.post1.tar.gz", "has_sig": false, "md5_digest": "5801d53505fc19cabf5e57bf59458bfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8929, "upload_time": "2020-02-13T17:49:20", "upload_time_iso_8601": "2020-02-13T17:49:20.041232Z", "url": "https://files.pythonhosted.org/packages/6d/8d/23afa09a8d62c5d310da92eedae52899f9c2427cbbec1b22a4f820984ddf/micropipenv-0.0.1.post1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6207e219f06c25937ba4e68de73a8949", "sha256": "2b87bf238af41a7d29fdae3aa04c221fd20ee117b4f5faaac3489b746014ab32"}, "downloads": -1, "filename": "micropipenv-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6207e219f06c25937ba4e68de73a8949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8689, "upload_time": "2020-02-25T05:31:41", "upload_time_iso_8601": "2020-02-25T05:31:41.861532Z", "url": "https://files.pythonhosted.org/packages/69/cb/a70321a4505328fa1ede0b745f860cb697c48402afb370f8c3b38d1ecc81/micropipenv-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "54cbc6c6e56325ad987da8b155321bf9", "sha256": "7d757b406ebeaeb35b07d9c83ed637e55bce5d85e126e0370226bef0adb208f9"}, "downloads": -1, "filename": "micropipenv-0.0.3.tar.gz", "has_sig": false, "md5_digest": "54cbc6c6e56325ad987da8b155321bf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8685, "upload_time": "2020-02-25T07:39:01", "upload_time_iso_8601": "2020-02-25T07:39:01.832370Z", "url": "https://files.pythonhosted.org/packages/41/13/844613ed384b607bfb5fa25898646974f25e721cdb280a62375a8d94f518/micropipenv-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "5ff02a1e3d0b0da536811579c945e0d3", "sha256": "1b546c26b31ca30506dfa2922fbd5c56b7122a3e61f562d02266e51a2deb56dd"}, "downloads": -1, "filename": "micropipenv-0.0.4.tar.gz", "has_sig": false, "md5_digest": "5ff02a1e3d0b0da536811579c945e0d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9538, "upload_time": "2020-02-26T20:14:04", "upload_time_iso_8601": "2020-02-26T20:14:04.996345Z", "url": "https://files.pythonhosted.org/packages/24/5e/6b31c617c14cc6afe03bc0dd69748d8ec459f53f405595cb763c4c915115/micropipenv-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "f2f4c170cf80e2dd0c6828864dbfb6de", "sha256": "ed8822a5ce7b057e5894f503464c57a713a2dd286801327078aa2c9091888def"}, "downloads": -1, "filename": "micropipenv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f2f4c170cf80e2dd0c6828864dbfb6de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14572, "upload_time": "2020-03-12T07:19:13", "upload_time_iso_8601": "2020-03-12T07:19:13.856287Z", "url": "https://files.pythonhosted.org/packages/51/07/9cbde161c321c1c76e4b772f33f2a77d15e8ad02fb59fae221b9903dc83d/micropipenv-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c4c56fcfe79228ecb6db5d54deb471b9", "sha256": "1e72069f2683c6af6ed3918059f1380721532f5db005fe88717dda7b2c140d6e"}, "downloads": -1, "filename": "micropipenv-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c4c56fcfe79228ecb6db5d54deb471b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14569, "upload_time": "2020-03-12T07:35:03", "upload_time_iso_8601": "2020-03-12T07:35:03.312342Z", "url": "https://files.pythonhosted.org/packages/87/f1/7d19af3d71f3cc782c94d358d050b066db09a18784079cb0129d3cbc0b7f/micropipenv-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "209f3c292b16a6cd14c978ca6c432c45", "sha256": "89a3592237189daa7ded40823e005ef9f283c91acbf66a281f17dfb681916e45"}, "downloads": -1, "filename": "micropipenv-0.1.2.tar.gz", "has_sig": false, "md5_digest": "209f3c292b16a6cd14c978ca6c432c45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14575, "upload_time": "2020-03-12T13:03:05", "upload_time_iso_8601": "2020-03-12T13:03:05.902783Z", "url": "https://files.pythonhosted.org/packages/5e/0d/0b12f13f3f3079125ed8b88273b5972f02ba956020c31d3fc0a770168a86/micropipenv-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b4edd0ade62b087dd365f05b4a4c23cf", "sha256": "a2dd72078a5d9a0c4e21b1e87fb9e914c1c24dd7d4b0c2a16b6e43fdbdbfcdbd"}, "downloads": -1, "filename": "micropipenv-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b4edd0ade62b087dd365f05b4a4c23cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26616, "upload_time": "2020-03-12T13:37:53", "upload_time_iso_8601": "2020-03-12T13:37:53.048354Z", "url": "https://files.pythonhosted.org/packages/e9/4b/766040296cb2270d56fd144b9cea687332c967f13803d2c72d6854d1544d/micropipenv-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "7770181ed4dcd5c54b803a3ae902ef49", "sha256": "ceaba83240c77e20e5fd977ca5492832ae66223c0e020e74877763e19db2eff8"}, "downloads": -1, "filename": "micropipenv-0.1.4.tar.gz", "has_sig": false, "md5_digest": "7770181ed4dcd5c54b803a3ae902ef49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27457, "upload_time": "2020-03-12T18:18:32", "upload_time_iso_8601": "2020-03-12T18:18:32.265425Z", "url": "https://files.pythonhosted.org/packages/b6/e9/4269d3ef8905245dbcdf89f3af86dc78942852378df7ea380ebe9b6ed0db/micropipenv-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "e80aa9689dcef38e105d9dc759ff1585", "sha256": "fc220636f2dfa9ab0277d2a2946db884d28b63fe6fac93ea4b89320edba82bd5"}, "downloads": -1, "filename": "micropipenv-0.1.5.tar.gz", "has_sig": false, "md5_digest": "e80aa9689dcef38e105d9dc759ff1585", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28865, "upload_time": "2020-04-07T13:41:57", "upload_time_iso_8601": "2020-04-07T13:41:57.505908Z", "url": "https://files.pythonhosted.org/packages/ec/8a/75ff57b01053c1f5ec6350ed47bb937ab4d3b41f335f548604ebe1af4b43/micropipenv-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "ff2c682d6ab9f83c1ed4fa2870397d6f", "sha256": "7b6e78797d6475273d66f059ec7ccc91b29a7bdb9d0b74305574cbfb5da9af9c"}, "downloads": -1, "filename": "micropipenv-0.1.6.tar.gz", "has_sig": false, "md5_digest": "ff2c682d6ab9f83c1ed4fa2870397d6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29158, "upload_time": "2020-05-04T20:52:58", "upload_time_iso_8601": "2020-05-04T20:52:58.991395Z", "url": "https://files.pythonhosted.org/packages/f1/26/519ffbd65c0dea1c96f821c0baad86a8812538b8bab96b93ad3ad4413063/micropipenv-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff2c682d6ab9f83c1ed4fa2870397d6f", "sha256": "7b6e78797d6475273d66f059ec7ccc91b29a7bdb9d0b74305574cbfb5da9af9c"}, "downloads": -1, "filename": "micropipenv-0.1.6.tar.gz", "has_sig": false, "md5_digest": "ff2c682d6ab9f83c1ed4fa2870397d6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29158, "upload_time": "2020-05-04T20:52:58", "upload_time_iso_8601": "2020-05-04T20:52:58.991395Z", "url": "https://files.pythonhosted.org/packages/f1/26/519ffbd65c0dea1c96f821c0baad86a8812538b8bab96b93ad3ad4413063/micropipenv-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:10 2020"}