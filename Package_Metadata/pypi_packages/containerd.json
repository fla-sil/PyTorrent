{"info": {"author": "Silvano Cirujano Cuesta", "author_email": "silvano.cirujano-cuesta@siemens.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries", "Topic :: System :: Clustering", "Topic :: Utilities"], "description": "# containerd API Python package\n\nThis repo provides a Python3 API to [containerd's](https://containerd.io) (gRPC)\nAPI, directly generated from the [original containerd `.proto` API\ndefinitions](https://github.com/containerd/containerd/tree/master/api). As it is\ngenerated from the protocol files, this Python package does not aim to be a\nfully Pythonesque package. In consequence, the usual idiosyncrasies of gRPC and\nprotoc shine through.\n\n> **Note:** with Python2 going end-of-life in January 2020 we don't intend to\n> support Python2 in this package at this very late time in the lifecycle.\n\n## Versioning\n\nThe versioning of this package complies with [PEP 440](https://www.python.org/dev/peps/pep-0440/).\n\nThe version is composed of the version of the supported containerd API (e.g. 1.2 or 1.3) and an incremental number for each pycontainerd release for that specific containerd API version (starting from 0) connected with a '.' (a dot).\n\nIdeally the Python containerd API has to be generated only once per containerd API version, resulting in x.y.0 package versions.\n\nThe result is version numbers like:\n * 1.2.1 for the second release for API 1.2\n * 1.3.0 for the first release for API 1.3\n\n## License\n\nThis project is licensed as [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0) (SPDX-License-Identifier: Apache-2.0).\n\nYou can obtain the full license text from the file `License` of this repository.\n\n# Install as Python Package\n\nInstallation depends on your starting point:\n\n1. You have a `pycontainerd` Python Wheel package (something like `containerd-x.y.z-py3-none-any.whl`).\n2. You only have the source code (the result of cloning the git repository).\n\n## Dependencies\n\nPython3 PIP is needed for Wheel installations (either from a ready Wheel package or from a self-built package).\nPIP takes care of installing all the Python packages listed as dependencies.\nRuntime dependencies are nevertheless listed below.\n\n## Installation from Wheel package\n\nGo to the directory where the wheel package is available and run:\n\n```bash\nsudo pip3 install containerd-<x.y.z>-py3-none-any.whl\n```\n\nBeing `containerd-<x.y.z>-py3-none-any.whl` the filename of the wheel package.\n\n*NOTE*: a global installation is required because the `containerd` socket is only reachable for `root`.\n\n## Installation from source code\n\nAdditionally, if building from source code you'll also need `make`.\n\nA Makefile is being provided that takes care of\n\n1. Building the Wheel package\n2. Installing the Wheel package\n\nJust run from the toplevel directory of this repository:\n\n```bash\nmake install\n```\n\nThe second step is under the hood simply running the installation of the\nwheel package explained above.\nIncluding the global installation, therefore a `sudo` execution is asking for the user's password (assuming the user has that right).\n\n# Package Structure and Usage\n\nThe resulting Wheel package provides following Python packages (they have to be imported individually), providing multiple modules:\n\n```python\ncontainerd.events\ncontainerd.services.containers.v1\ncontainerd.services.content.v1\ncontainerd.services.diff.v1\ncontainerd.services.events.v1\ncontainerd.services.images.v1\ncontainerd.services.introspection.v1\ncontainerd.services.leases.v1\ncontainerd.services.namespaces.v1\ncontainerd.services.snapshots.v1\ncontainerd.services.tasks.v1\ncontainerd.services.version.v1\ncontainerd.types\ncontainerd.types.tasks\n```\n\nIn order to get the modules being provided by a package you can run:\n\n```bash\npython3 -c 'import <package> ; help(<package>)'\n```\n\nFor example, for `containerd.events`:\n\n```bash\npython3 -c 'import containerd.events ; help(containerd.events)'\n```\n\n# Examples\n\n## List All Namespaces\n\nThe following simple example queries containerd for its list of available containerd namespaces.\nMake sure you have the necessary privileges to connect to containerd; you may need to run this script as root:\n\n```python\nimport grpc\nfrom containerd.services.namespaces.v1 import namespace_pb2_grpc, namespace_pb2\n\nwith grpc.insecure_channel('unix:///run/containerd/containerd.sock') as channel:\n    namespacev1 = namespace_pb2_grpc.NamespacesStub(channel)\n    namespaces = namespacev1.List(namespace_pb2.ListNamespacesRequest()).namespaces\n    for namespace in namespaces:\n        print('namespace:', namespace.name)\n```\n\n## List Containers in a Specific Namespace\n\nSeveral of containerd's APIs are namespaced.\nThat is, they work only on a single namespace at a time.\nThe namespace applies on the level of individual service calls and needs to be specified as an (additional) metadata element to these calls.\nIf not specified, it the namespace will default to the namespace named `default`.\nThe following example lists all containers in the `\"moby\"` namespace; this is the containerd namespace used by Docker.\n\n```python\nimport grpc\nfrom containerd.services.containers.v1 import containers_pb2_grpc, containers_pb2\n\nwith grpc.insecure_channel('unix:///run/containerd/containerd.sock') as channel:\n    containers = containersv1.List(\n        containers_pb2.ListContainersRequest(),\n        metadata=(('containerd-namespace', 'moby'),)).containers\n    for container in containers:\n        print('container ID:', container.id)\n```\n\n## Watch containerd Events Flowing\n\nContainerd events can be easily read from the endless event stream via the `containerd.services.events.v1` API, using the `Subscribe` service.\nThe following example subscribes to all events and then prints their type and contents as the events come:\n\n```python\nimport grpc\n\nfrom containerd.services.events.v1 import unwrap, events_pb2, events_pb2_grpc\nfrom containerd.vendor.google.protobuf import any_pb2\n\nwith grpc.insecure_channel('unix:///run/containerd/containerd.sock') as channel:\n    print(\"waiting for containerd events...\")\n    eventsv1 = events_pb2_grpc.EventsStub(channel)\n    for ev in eventsv1.Subscribe(events_pb2.SubscribeRequest()):\n        print('event type: ', ev.event.type_url)\n        print('value: ', unwrap(ev))\n```\n\n> **Note:** `containerd.services.events.v1.unwrap(envelope)` is a convenience function which unwraps the event object inside an event envelope returned by `Subscribe()`: the unwrapped event object is returned as a Python object of sub class `containerd.events.*` (as opposed to the arbitrary \"any\" binary value inside the event envelope).\n\n## Executable Programs\n\nTo help containerd client developers getting started, we've included two simple examples which are also made available as the CLI programs `lsctr` and `watchctr` (source code in `examples/`) when cloning the repository.\n\nYou first have to install the wheel package for the `containerd` package.\n\n- `lsctr` lists all containerd containers in all namespaces. It is basically kind of an all-in-one combination of the `ctr` commands for namespaces, containers, and tasks in a single command.\n- `watchctr` watches containerd events, such as container creation, start, stop, et cetera, and then prints them to the terminal.\n\nTo check that it works, run the `lsctr` command: this should list all available containerd containers, across all containerd namespaces (remember to use `sudo` in case you don't have the necessary privileges as an ordinary user to talk to containerd):\n\n```bash\nsudo lsctr\n```\n\nThis should spit out something like this, when running on a recent Docker CE installation, which uses containerd under the hood:\n\n```\nmoby\n  \u290f labels (0):\n  \u25a9 container: 0eeb9e2862e9f68e832a2e2c60a2e44e74d54b05266532cf19b112f4d959e3fb\n    \u25b7 PID: 3359 \u2690 status: RUNNING\n    \u2699 runtime: io.containerd.runtime.v1.linux\n    \u290f labels (1):\n        \"com.docker/engine.bundle.path\": \"/var/run/docker/containerd/0eeb9e2862e9f68e832a2e2c60a2e44e74d54b05266532cf19b112f4d959e3fb\"\n    \u25f7 created: 2019-09-04 07:24:32.646856 \u25f7 updated: 2019-09-04 07:24:32.646856\n  \u25a9 container: 1663afd0ddc6e0bba30b7fcc27b26044ece6022d970e32731db5dcb807b168df\n    \u25b7 PID: 66062 \u2690 status: RUNNING\n    \u2699 runtime: io.containerd.runtime.v1.linux\n    \u290f labels (1):\n        \"com.docker/engine.bundle.path\": \"/var/run/docker/containerd/1663afd0ddc6e0bba30b7fcc27b26044ece6022d970e32731db5dcb807b168df\"\n    \u25f7 created: 2019-08-16 08:08:21.471493 \u25f7 updated: 2019-08-16 08:08:21.471493\n...\n```\n\nYou can use `lsctr -h` to see the few CLI options available.\n\n# Package Requirements\n\nThe following Python packages are required:\n\n- [`grpcio`](https://pypi.org/project/grpcio/) -- gRPC for Python; required in order to communicate with containerd. This is a runtime dependency.\n- (optional) `grpcio-tools` -- only required when re-generating the containerd API Python code using `genpb2.sh`.\n\n# Python ContainerD API\n\n## API Package (Re)Generation\n\nIn case you need to regenerate or update the Python code for the containerd API,\nin the top-level directory of this repository, run:\n\n```bash\n./genpb2.sh\n```\n\nNormally, you should not need to regenerate the grpc/pb2 Python modules unless you are a project contributor or maintainer.\n\n## Project Organization\n\nThe overall directory structure of the Python containerd API package is as\nfollows:\n\n- `containerd/` contains the Python modules generated by protoc as well as a\n  very few hand-made modules. In order to avoid polluting the top-level package\n  namespace with proto dependencies, `genpb2.sh` \"vendorizes\" dependencies in\n  the .proto files, moving such dependencies inside the `containerd` top-level\n  Python package namespace.\n  - `app/` contains two CLI applications: `lsctr` for listing containers in all\n    namespaces, and `watchctr` for watching containerd events.\n  - `services/` contains the containerd service API v1.\n  - `events/` contains the containerd event definitions.\n  - `types/` contains containerd type definitions required by services and\n    events.\n  - `protobuf/` internal dependency.\n  - `vendor/` contains the \"vendorized\" dependencies.\n    - `gogoproto/` receives the Python modules generated by protoc.\n    - `google/` receives the Python modules generated by protoc.\n- `genpb2.sh` is a script to recreate or update the `_pb2.py` and `_pb2_grpc.py`\n  Python modules from the containerd API `.proto` file definitions and\n  dependencies. See `genpb2.sh` for more information on its workings.\n\n# Survival References\n\n- [gRPC Basics -- Python](https://grpc.io/docs/tutorials/basic/python/).\n- [Protocol Buffers Python Reference: Python Generated\n  Code](https://developers.google.com/protocol-buffers/docs/reference/python-generated).\n- [containerd API protocol\n  definitions](https://github.com/containerd/containerd/tree/master/api).\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/siemens/pycontainerd", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "containerd", "package_url": "https://pypi.org/project/containerd/", "platform": "", "project_url": "https://pypi.org/project/containerd/", "project_urls": {"Homepage": "https://github.com/siemens/pycontainerd"}, "release_url": "https://pypi.org/project/containerd/1.3.1/", "requires_dist": ["grpcio", "protobuf"], "requires_python": "", "summary": "containerd API for Python", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>containerd API Python package</h1>\n<p>This repo provides a Python3 API to <a href=\"https://containerd.io\" rel=\"nofollow\">containerd's</a> (gRPC)\nAPI, directly generated from the <a href=\"https://github.com/containerd/containerd/tree/master/api\" rel=\"nofollow\">original containerd <code>.proto</code> API\ndefinitions</a>. As it is\ngenerated from the protocol files, this Python package does not aim to be a\nfully Pythonesque package. In consequence, the usual idiosyncrasies of gRPC and\nprotoc shine through.</p>\n<blockquote>\n<p><strong>Note:</strong> with Python2 going end-of-life in January 2020 we don't intend to\nsupport Python2 in this package at this very late time in the lifecycle.</p>\n</blockquote>\n<h2>Versioning</h2>\n<p>The versioning of this package complies with <a href=\"https://www.python.org/dev/peps/pep-0440/\" rel=\"nofollow\">PEP 440</a>.</p>\n<p>The version is composed of the version of the supported containerd API (e.g. 1.2 or 1.3) and an incremental number for each pycontainerd release for that specific containerd API version (starting from 0) connected with a '.' (a dot).</p>\n<p>Ideally the Python containerd API has to be generated only once per containerd API version, resulting in x.y.0 package versions.</p>\n<p>The result is version numbers like:</p>\n<ul>\n<li>1.2.1 for the second release for API 1.2</li>\n<li>1.3.0 for the first release for API 1.3</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed as <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">Apache License, Version 2.0</a> (SPDX-License-Identifier: Apache-2.0).</p>\n<p>You can obtain the full license text from the file <code>License</code> of this repository.</p>\n<h1>Install as Python Package</h1>\n<p>Installation depends on your starting point:</p>\n<ol>\n<li>You have a <code>pycontainerd</code> Python Wheel package (something like <code>containerd-x.y.z-py3-none-any.whl</code>).</li>\n<li>You only have the source code (the result of cloning the git repository).</li>\n</ol>\n<h2>Dependencies</h2>\n<p>Python3 PIP is needed for Wheel installations (either from a ready Wheel package or from a self-built package).\nPIP takes care of installing all the Python packages listed as dependencies.\nRuntime dependencies are nevertheless listed below.</p>\n<h2>Installation from Wheel package</h2>\n<p>Go to the directory where the wheel package is available and run:</p>\n<pre>sudo pip3 install containerd-&lt;x.y.z&gt;-py3-none-any.whl\n</pre>\n<p>Being <code>containerd-&lt;x.y.z&gt;-py3-none-any.whl</code> the filename of the wheel package.</p>\n<p><em>NOTE</em>: a global installation is required because the <code>containerd</code> socket is only reachable for <code>root</code>.</p>\n<h2>Installation from source code</h2>\n<p>Additionally, if building from source code you'll also need <code>make</code>.</p>\n<p>A Makefile is being provided that takes care of</p>\n<ol>\n<li>Building the Wheel package</li>\n<li>Installing the Wheel package</li>\n</ol>\n<p>Just run from the toplevel directory of this repository:</p>\n<pre>make install\n</pre>\n<p>The second step is under the hood simply running the installation of the\nwheel package explained above.\nIncluding the global installation, therefore a <code>sudo</code> execution is asking for the user's password (assuming the user has that right).</p>\n<h1>Package Structure and Usage</h1>\n<p>The resulting Wheel package provides following Python packages (they have to be imported individually), providing multiple modules:</p>\n<pre><span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">events</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">containers</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">images</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">introspection</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">leases</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">namespaces</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">snapshots</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"o\">.</span><span class=\"n\">v1</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">types</span>\n<span class=\"n\">containerd</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">tasks</span>\n</pre>\n<p>In order to get the modules being provided by a package you can run:</p>\n<pre>python3 -c <span class=\"s1\">'import &lt;package&gt; ; help(&lt;package&gt;)'</span>\n</pre>\n<p>For example, for <code>containerd.events</code>:</p>\n<pre>python3 -c <span class=\"s1\">'import containerd.events ; help(containerd.events)'</span>\n</pre>\n<h1>Examples</h1>\n<h2>List All Namespaces</h2>\n<p>The following simple example queries containerd for its list of available containerd namespaces.\nMake sure you have the necessary privileges to connect to containerd; you may need to run this script as root:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">grpc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">containerd.services.namespaces.v1</span> <span class=\"kn\">import</span> <span class=\"n\">namespace_pb2_grpc</span><span class=\"p\">,</span> <span class=\"n\">namespace_pb2</span>\n\n<span class=\"k\">with</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">insecure_channel</span><span class=\"p\">(</span><span class=\"s1\">'unix:///run/containerd/containerd.sock'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"n\">namespacev1</span> <span class=\"o\">=</span> <span class=\"n\">namespace_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">NamespacesStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n    <span class=\"n\">namespaces</span> <span class=\"o\">=</span> <span class=\"n\">namespacev1</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">namespace_pb2</span><span class=\"o\">.</span><span class=\"n\">ListNamespacesRequest</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">namespaces</span>\n    <span class=\"k\">for</span> <span class=\"n\">namespace</span> <span class=\"ow\">in</span> <span class=\"n\">namespaces</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'namespace:'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<h2>List Containers in a Specific Namespace</h2>\n<p>Several of containerd's APIs are namespaced.\nThat is, they work only on a single namespace at a time.\nThe namespace applies on the level of individual service calls and needs to be specified as an (additional) metadata element to these calls.\nIf not specified, it the namespace will default to the namespace named <code>default</code>.\nThe following example lists all containers in the <code>\"moby\"</code> namespace; this is the containerd namespace used by Docker.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">grpc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">containerd.services.containers.v1</span> <span class=\"kn\">import</span> <span class=\"n\">containers_pb2_grpc</span><span class=\"p\">,</span> <span class=\"n\">containers_pb2</span>\n\n<span class=\"k\">with</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">insecure_channel</span><span class=\"p\">(</span><span class=\"s1\">'unix:///run/containerd/containerd.sock'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"n\">containers</span> <span class=\"o\">=</span> <span class=\"n\">containersv1</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">(</span>\n        <span class=\"n\">containers_pb2</span><span class=\"o\">.</span><span class=\"n\">ListContainersRequest</span><span class=\"p\">(),</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">((</span><span class=\"s1\">'containerd-namespace'</span><span class=\"p\">,</span> <span class=\"s1\">'moby'</span><span class=\"p\">),))</span><span class=\"o\">.</span><span class=\"n\">containers</span>\n    <span class=\"k\">for</span> <span class=\"n\">container</span> <span class=\"ow\">in</span> <span class=\"n\">containers</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'container ID:'</span><span class=\"p\">,</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n<h2>Watch containerd Events Flowing</h2>\n<p>Containerd events can be easily read from the endless event stream via the <code>containerd.services.events.v1</code> API, using the <code>Subscribe</code> service.\nThe following example subscribes to all events and then prints their type and contents as the events come:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">grpc</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">containerd.services.events.v1</span> <span class=\"kn\">import</span> <span class=\"n\">unwrap</span><span class=\"p\">,</span> <span class=\"n\">events_pb2</span><span class=\"p\">,</span> <span class=\"n\">events_pb2_grpc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">containerd.vendor.google.protobuf</span> <span class=\"kn\">import</span> <span class=\"n\">any_pb2</span>\n\n<span class=\"k\">with</span> <span class=\"n\">grpc</span><span class=\"o\">.</span><span class=\"n\">insecure_channel</span><span class=\"p\">(</span><span class=\"s1\">'unix:///run/containerd/containerd.sock'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"waiting for containerd events...\"</span><span class=\"p\">)</span>\n    <span class=\"n\">eventsv1</span> <span class=\"o\">=</span> <span class=\"n\">events_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">EventsStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">ev</span> <span class=\"ow\">in</span> <span class=\"n\">eventsv1</span><span class=\"o\">.</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"n\">events_pb2</span><span class=\"o\">.</span><span class=\"n\">SubscribeRequest</span><span class=\"p\">()):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'event type: '</span><span class=\"p\">,</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">type_url</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'value: '</span><span class=\"p\">,</span> <span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">))</span>\n</pre>\n<blockquote>\n<p><strong>Note:</strong> <code>containerd.services.events.v1.unwrap(envelope)</code> is a convenience function which unwraps the event object inside an event envelope returned by <code>Subscribe()</code>: the unwrapped event object is returned as a Python object of sub class <code>containerd.events.*</code> (as opposed to the arbitrary \"any\" binary value inside the event envelope).</p>\n</blockquote>\n<h2>Executable Programs</h2>\n<p>To help containerd client developers getting started, we've included two simple examples which are also made available as the CLI programs <code>lsctr</code> and <code>watchctr</code> (source code in <code>examples/</code>) when cloning the repository.</p>\n<p>You first have to install the wheel package for the <code>containerd</code> package.</p>\n<ul>\n<li><code>lsctr</code> lists all containerd containers in all namespaces. It is basically kind of an all-in-one combination of the <code>ctr</code> commands for namespaces, containers, and tasks in a single command.</li>\n<li><code>watchctr</code> watches containerd events, such as container creation, start, stop, et cetera, and then prints them to the terminal.</li>\n</ul>\n<p>To check that it works, run the <code>lsctr</code> command: this should list all available containerd containers, across all containerd namespaces (remember to use <code>sudo</code> in case you don't have the necessary privileges as an ordinary user to talk to containerd):</p>\n<pre>sudo lsctr\n</pre>\n<p>This should spit out something like this, when running on a recent Docker CE installation, which uses containerd under the hood:</p>\n<pre><code>moby\n  \u290f labels (0):\n  \u25a9 container: 0eeb9e2862e9f68e832a2e2c60a2e44e74d54b05266532cf19b112f4d959e3fb\n    \u25b7 PID: 3359 \u2690 status: RUNNING\n    \u2699 runtime: io.containerd.runtime.v1.linux\n    \u290f labels (1):\n        \"com.docker/engine.bundle.path\": \"/var/run/docker/containerd/0eeb9e2862e9f68e832a2e2c60a2e44e74d54b05266532cf19b112f4d959e3fb\"\n    \u25f7 created: 2019-09-04 07:24:32.646856 \u25f7 updated: 2019-09-04 07:24:32.646856\n  \u25a9 container: 1663afd0ddc6e0bba30b7fcc27b26044ece6022d970e32731db5dcb807b168df\n    \u25b7 PID: 66062 \u2690 status: RUNNING\n    \u2699 runtime: io.containerd.runtime.v1.linux\n    \u290f labels (1):\n        \"com.docker/engine.bundle.path\": \"/var/run/docker/containerd/1663afd0ddc6e0bba30b7fcc27b26044ece6022d970e32731db5dcb807b168df\"\n    \u25f7 created: 2019-08-16 08:08:21.471493 \u25f7 updated: 2019-08-16 08:08:21.471493\n...\n</code></pre>\n<p>You can use <code>lsctr -h</code> to see the few CLI options available.</p>\n<h1>Package Requirements</h1>\n<p>The following Python packages are required:</p>\n<ul>\n<li><a href=\"https://pypi.org/project/grpcio/\" rel=\"nofollow\"><code>grpcio</code></a> -- gRPC for Python; required in order to communicate with containerd. This is a runtime dependency.</li>\n<li>(optional) <code>grpcio-tools</code> -- only required when re-generating the containerd API Python code using <code>genpb2.sh</code>.</li>\n</ul>\n<h1>Python ContainerD API</h1>\n<h2>API Package (Re)Generation</h2>\n<p>In case you need to regenerate or update the Python code for the containerd API,\nin the top-level directory of this repository, run:</p>\n<pre>./genpb2.sh\n</pre>\n<p>Normally, you should not need to regenerate the grpc/pb2 Python modules unless you are a project contributor or maintainer.</p>\n<h2>Project Organization</h2>\n<p>The overall directory structure of the Python containerd API package is as\nfollows:</p>\n<ul>\n<li><code>containerd/</code> contains the Python modules generated by protoc as well as a\nvery few hand-made modules. In order to avoid polluting the top-level package\nnamespace with proto dependencies, <code>genpb2.sh</code> \"vendorizes\" dependencies in\nthe .proto files, moving such dependencies inside the <code>containerd</code> top-level\nPython package namespace.\n<ul>\n<li><code>app/</code> contains two CLI applications: <code>lsctr</code> for listing containers in all\nnamespaces, and <code>watchctr</code> for watching containerd events.</li>\n<li><code>services/</code> contains the containerd service API v1.</li>\n<li><code>events/</code> contains the containerd event definitions.</li>\n<li><code>types/</code> contains containerd type definitions required by services and\nevents.</li>\n<li><code>protobuf/</code> internal dependency.</li>\n<li><code>vendor/</code> contains the \"vendorized\" dependencies.\n<ul>\n<li><code>gogoproto/</code> receives the Python modules generated by protoc.</li>\n<li><code>google/</code> receives the Python modules generated by protoc.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>genpb2.sh</code> is a script to recreate or update the <code>_pb2.py</code> and <code>_pb2_grpc.py</code>\nPython modules from the containerd API <code>.proto</code> file definitions and\ndependencies. See <code>genpb2.sh</code> for more information on its workings.</li>\n</ul>\n<h1>Survival References</h1>\n<ul>\n<li><a href=\"https://grpc.io/docs/tutorials/basic/python/\" rel=\"nofollow\">gRPC Basics -- Python</a>.</li>\n<li><a href=\"https://developers.google.com/protocol-buffers/docs/reference/python-generated\" rel=\"nofollow\">Protocol Buffers Python Reference: Python Generated\nCode</a>.</li>\n<li><a href=\"https://github.com/containerd/containerd/tree/master/api\" rel=\"nofollow\">containerd API protocol\ndefinitions</a>.</li>\n</ul>\n\n          </div>"}, "last_serial": 6310370, "releases": {"1.2.1": [{"comment_text": "", "digests": {"md5": "b542fdf80abd408d8d53f3f3ddcce9f3", "sha256": "dfa7481ec01440c33dfd517bc1d5403306d2352166fd54c4c61425afca364085"}, "downloads": -1, "filename": "containerd-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b542fdf80abd408d8d53f3f3ddcce9f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 115599, "upload_time": "2019-12-16T11:54:34", "upload_time_iso_8601": "2019-12-16T11:54:34.210207Z", "url": "https://files.pythonhosted.org/packages/9b/90/7e22d9aa397b58039e0b9457e7142e4a0592ab3878613b8522dc27fa1bb2/containerd-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45379038a23bdc5341cf7db23d156576", "sha256": "dbd8e87176030250338a5d97e584fed443fc4284d5eef978e02a7386ccebd544"}, "downloads": -1, "filename": "containerd-1.2.1.tar.gz", "has_sig": false, "md5_digest": "45379038a23bdc5341cf7db23d156576", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78354, "upload_time": "2019-12-16T11:54:36", "upload_time_iso_8601": "2019-12-16T11:54:36.778829Z", "url": "https://files.pythonhosted.org/packages/a5/c1/bdca69c8d53bb8c722762b5188ebb11868f11831b4897abeb80511b0bf6b/containerd-1.2.1.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "cb623f30e13bd94688799e85736ec218", "sha256": "6638adc2ce3b5c40efcaee248b92c36136e063ea6a3e05f13d93f4f049ab3b79"}, "downloads": -1, "filename": "containerd-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cb623f30e13bd94688799e85736ec218", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 128038, "upload_time": "2019-12-16T11:54:39", "upload_time_iso_8601": "2019-12-16T11:54:39.245696Z", "url": "https://files.pythonhosted.org/packages/69/c9/8407cad510a448e762842c0920e7e1e65b12a66801630ae85e61f80f8c0a/containerd-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8e76db91df57c8888ef7c5ce658e4ab", "sha256": "529508e3a2d8c5f6f0554582e299b56c95fcba37b5a38bbdde13c00a60ec4076"}, "downloads": -1, "filename": "containerd-1.3.1.tar.gz", "has_sig": false, "md5_digest": "b8e76db91df57c8888ef7c5ce658e4ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85955, "upload_time": "2019-12-16T11:54:40", "upload_time_iso_8601": "2019-12-16T11:54:40.965701Z", "url": "https://files.pythonhosted.org/packages/9e/cd/e2102ca25096f60e13639dfa110dfd20a0675f7fb290a39f8458946d8c12/containerd-1.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb623f30e13bd94688799e85736ec218", "sha256": "6638adc2ce3b5c40efcaee248b92c36136e063ea6a3e05f13d93f4f049ab3b79"}, "downloads": -1, "filename": "containerd-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cb623f30e13bd94688799e85736ec218", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 128038, "upload_time": "2019-12-16T11:54:39", "upload_time_iso_8601": "2019-12-16T11:54:39.245696Z", "url": "https://files.pythonhosted.org/packages/69/c9/8407cad510a448e762842c0920e7e1e65b12a66801630ae85e61f80f8c0a/containerd-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8e76db91df57c8888ef7c5ce658e4ab", "sha256": "529508e3a2d8c5f6f0554582e299b56c95fcba37b5a38bbdde13c00a60ec4076"}, "downloads": -1, "filename": "containerd-1.3.1.tar.gz", "has_sig": false, "md5_digest": "b8e76db91df57c8888ef7c5ce658e4ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85955, "upload_time": "2019-12-16T11:54:40", "upload_time_iso_8601": "2019-12-16T11:54:40.965701Z", "url": "https://files.pythonhosted.org/packages/9e/cd/e2102ca25096f60e13639dfa110dfd20a0675f7fb290a39f8458946d8c12/containerd-1.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:36 2020"}