{"info": {"author": "Liam Kirsher", "author_email": "liam@hearplanet.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "About\n=====\n\nThis is the HearPlanet supported Python driver for HearPlanet\u2019s public\nAPI.\n\nThis API supports queries to HearPlanet\u2019s database of Points of\nInterest, Articles, Images and Audio files.\n\nIf you need additional support, please visit http://www.hearplanet.com/\n\nOverview\n========\n\nSetup\n-----\n\nThe easiest way to get started with the driver is to install it from the\nPython Package Index.\n\n::\n\n    pip install HearPlanetAPI\n\nFirst you need to obtain API access credentials from HearPlanet.\n\nCreate a configuration file containing your credentials, by copying and\ncustomizing hearplanet.cfg.example to one, or both, of the following:\n\n1. /etc/hearplanet.cfg ### Site-wide\n2. ~/.hearplanet.cfg ### Individual\n\nTo use the driver in a Python program, just \u2026\n\n::\n\n    from hearplanet import HearPlanet  \n    api = HearPlanet()\n\nexample.py is provided with the driver as a reference.\n\nDependencies\n------------\n\nMinimum Python version 2.5.\n\n`Requests`_\n\nBasic Design\n------------\n\nThe driver allows you to access the HearPlanet API, sending requests and\ngetting data back.\n\nOne thing to be aware of is the behavior of the query modifier\nfunctions. These return new query instances, so base queries can be set\nup and then modified in different ways to produce new queries.\n\nYou specify the table (type of object) you want to search for, the\nsearch terms, and various filters and modifiers. The search is executed\nwhen you access the response object.\n\nTables\n------\n\nMany of the HearPlanet database tables can be accessed. However,\ngenerally if you are only making requests, you will only need to be\naccessing the \u201carticle\u201d and/or \u201cpoi\u201d tables. The general layout looks\nsomething like this:\n\n::\n\n    table('poi')\n    table('article')\n        fetch({id}, objects={'object'}, size={'image_size_code'})\n        search()\n            term('A Query Term')\n            point({'lat':'37.0', 'lng':'-122.5'})\n            location('123 Address St., Anytown')\n            filters({'key':'value'})\n        featured()\n\nFirst you would select the table (poi or article). If you already know\nthe unique identifier of the poi or article, you can use fetch(). If you\nwould like to get the \u201cfeatured\u201d articles, then just use featured().\nOtherwise, use search() plus one or more of term(), point() and\nlocation(). Finally, you can add filters to further refine your search.\n\nOther tables of interest might be \u201clangugages\u201d and \u201ccategories.\u201d For a\ncomplete list, consult the `API documentation`_.\n\nSearch Requests\n---------------\n\nSearches for POI\u2019s and Articles can be performed based on location or\nquery term.\n\nLocation searches return POI\u2019s and Articles near a point \u2013 either a\nlatitude/longitude or an address (or other geocodable location). If you\ngive both point() and location(), objects near location will be used,\nand distances to that location will be calculated from point. Examples:\n\n::\n\n    point({'lat':'37.0', 'lng':'-122.5'})\n    location('123 Address St., Anytown')\n\nQuery Term searches do a full-text search in the title of the POI or\nArticle.\n\n::\n\n    term('Pizza')\n\nIn combination:\n\n::\n\n    # Search for POI's with \"Pizza\" in their title located in\n    # Chicago, calculating distances from the given point.\n    req = api.table('poi').search()\n    req = req.term('Pizza').location('Chicago, IL')\n    req = req.point({'lat':'37.0', 'lng':'-122.5'})\n\nFetch a particular POI or Article if you have its id:\n\n::\n\n    req = api.table('article').fetch(999999)\n\nIf you only want some of the objects associated with an article, you can\nrequest them specifically. For example, if an article has email\naddresses associated with it:\n\n::\n\n    req = api.table('article').fetch(999999, 'emails')\n\nImages take an optional \u2018size\u2019 parameter, for example \u2018T\u2019 for thumbnail:\n\n::\n\n    req = api.table('article').fetch(999999, 'images', 'T')\n\nThe full list of article objects is:\n\n-  addresses\n-  audio\n-  categories\n-  details\n-  emails\n-  images\n-  phones\n-  rating\\_average\n-  ratings\n-  reviews\n-  sections\n-  sections\\_f\n-  tags\n-  websites\n\nGet featured Articles :\n\n::\n\n    req = api.table('article').featured()\n\nSearch Request Filters\n----------------------\n\nFilters can be applied to the searches:\n\n::\n\n    req = req.filters({'ch':'hearplanet'})\n    req = req.filters({'lang':'fr'})\n    req = req.filters({'bbox':'(37.3,-122.8)(37.6,-120.0)'})\n    req = req.filters({'radius':15'}) # search radius in kilometers\n\nRequest modifiers\n-----------------\n\nRequest modifiers are used for paging results, selecting the text format\nand the amount of data returned.\n\nYou can either use limit() and offset() together, or just use page().\nThe default values for offset and limit are 0 and 10, respectively. If\nyou use page(), just specify an integer page number from 1 to N. The\ndefault page length is 10.\n\n::\n\n    limit(max_rows)\n    offset(offset)\n    page(page_num, limit=DEFAULT_LIMIT)\n    format(format) # ('HTML', 'HTML-RAW', 'XHTML', 'PLAIN', 'AS-IS')\n    depth(depth) # ('min', 'poi', 'article', 'section',\n                    'section_text', 'all',)\n\n-  The format modifiers change the formatting of the section text.\n   Normally this is set on the backend and you don\u2019t have to worry about\n   it. However, if necessary you can override it.\n\n-  The depth modifiers change the amount of information that is\n   returned. That\u2019s primarily for performance enhancement, when\n   accessing the API over a slow network. For example, make a shallow\n   initial search using the poi.json endpoint at depth \u2018poi\u2019 to get a\n   list of POI\u2019s and their Articles. Then the full Article can be\n   selected by the user, and a second request made for just that Article\n   using fetch().\n\nFirst do a shallow search of POI\u2019s that have \u201cPizza\u201d in their title\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    poi_list = api.table('poi').search().term('Pizza').depth('poi').page(1).objects()\n\nGet the id of the first Article in the first POI\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    first_poi = poi_list[0]\n    first_article_id = first_poi.articles[0].id\n    print first_poi\n\nNow get all the data related to that Article\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    article = api.table('article').fetch(first_article_id).objects()\n    print article\n\nExamples\n--------\n\nCreate an API query object\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    api = HearPlanet()\n\nSpecify a search of the POI table\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    req = api.table('poi').search()\n\nAdd a query term, and search origin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    req = req.term('Golden Gate')\n    req = req.location('San Francisco, CA')\n\nAdd a filter: only return articles in the Wikipedia channel\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    req = req.filters({'ch':'wikipedia'})\n\nAsk for only the first page (default is the first 10 objects)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    req = req.page(1)\n\nGet the return value as data or objects\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    objects = req.objects()  \n\nDo something with the objects\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    for poi in objects:\n        print poi.title\n\nOr, you can chain the requests all together\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    pois = api.table('poi').search().term('Golden Gate').location('San Francisco, CA').filters({'ch':'wikipedia'}).page(1).objects()\n\nUnit Tests\n----------\n\nUnit Tests are provided to ensure the driver is functioning as expected.\nThe unit tests also serve as examples of various API requests.\n\nYou can run the Unit Tests in test\\_hearplanet.py like this:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    python test_hearplanet.py\n\nURL Encoding\n------------\n\nThe Python driver handles URL encoding, therefore all parameters passed\nto the driver should be in their un-encoded form.\n\n\n\n.. _Requests: http://docs.python-requests.org/en/latest/\n.. _API documentation: http://prod.hearplanet.com/api/2.0/documentation/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/HearPlanetAPI/", "keywords": "HearPlanet API driver", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "HearPlanetAPI", "package_url": "https://pypi.org/project/HearPlanetAPI/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/HearPlanetAPI/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/HearPlanetAPI/"}, "release_url": "https://pypi.org/project/HearPlanetAPI/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "HearPlanet API driver", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>This is the HearPlanet supported Python driver for HearPlanet\u2019s public\nAPI.</p>\n<p>This API supports queries to HearPlanet\u2019s database of Points of\nInterest, Articles, Images and Audio files.</p>\n<p>If you need additional support, please visit <a href=\"http://www.hearplanet.com/\" rel=\"nofollow\">http://www.hearplanet.com/</a></p>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<div id=\"setup\">\n<h3>Setup</h3>\n<p>The easiest way to get started with the driver is to install it from the\nPython Package Index.</p>\n<pre>pip install HearPlanetAPI\n</pre>\n<p>First you need to obtain API access credentials from HearPlanet.</p>\n<p>Create a configuration file containing your credentials, by copying and\ncustomizing hearplanet.cfg.example to one, or both, of the following:</p>\n<ol>\n<li>/etc/hearplanet.cfg ### Site-wide</li>\n<li>~/.hearplanet.cfg ### Individual</li>\n</ol>\n<p>To use the driver in a Python program, just \u2026</p>\n<pre>from hearplanet import HearPlanet\napi = HearPlanet()\n</pre>\n<p>example.py is provided with the driver as a reference.</p>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>Minimum Python version 2.5.</p>\n<p><a href=\"http://docs.python-requests.org/en/latest/\" rel=\"nofollow\">Requests</a></p>\n</div>\n<div id=\"basic-design\">\n<h3>Basic Design</h3>\n<p>The driver allows you to access the HearPlanet API, sending requests and\ngetting data back.</p>\n<p>One thing to be aware of is the behavior of the query modifier\nfunctions. These return new query instances, so base queries can be set\nup and then modified in different ways to produce new queries.</p>\n<p>You specify the table (type of object) you want to search for, the\nsearch terms, and various filters and modifiers. The search is executed\nwhen you access the response object.</p>\n</div>\n<div id=\"tables\">\n<h3>Tables</h3>\n<p>Many of the HearPlanet database tables can be accessed. However,\ngenerally if you are only making requests, you will only need to be\naccessing the \u201carticle\u201d and/or \u201cpoi\u201d tables. The general layout looks\nsomething like this:</p>\n<pre>table('poi')\ntable('article')\n    fetch({id}, objects={'object'}, size={'image_size_code'})\n    search()\n        term('A Query Term')\n        point({'lat':'37.0', 'lng':'-122.5'})\n        location('123 Address St., Anytown')\n        filters({'key':'value'})\n    featured()\n</pre>\n<p>First you would select the table (poi or article). If you already know\nthe unique identifier of the poi or article, you can use fetch(). If you\nwould like to get the \u201cfeatured\u201d articles, then just use featured().\nOtherwise, use search() plus one or more of term(), point() and\nlocation(). Finally, you can add filters to further refine your search.</p>\n<p>Other tables of interest might be \u201clangugages\u201d and \u201ccategories.\u201d For a\ncomplete list, consult the <a href=\"http://prod.hearplanet.com/api/2.0/documentation/\" rel=\"nofollow\">API documentation</a>.</p>\n</div>\n<div id=\"search-requests\">\n<h3>Search Requests</h3>\n<p>Searches for POI\u2019s and Articles can be performed based on location or\nquery term.</p>\n<p>Location searches return POI\u2019s and Articles near a point \u2013 either a\nlatitude/longitude or an address (or other geocodable location). If you\ngive both point() and location(), objects near location will be used,\nand distances to that location will be calculated from point. Examples:</p>\n<pre>point({'lat':'37.0', 'lng':'-122.5'})\nlocation('123 Address St., Anytown')\n</pre>\n<p>Query Term searches do a full-text search in the title of the POI or\nArticle.</p>\n<pre>term('Pizza')\n</pre>\n<p>In combination:</p>\n<pre># Search for POI's with \"Pizza\" in their title located in\n# Chicago, calculating distances from the given point.\nreq = api.table('poi').search()\nreq = req.term('Pizza').location('Chicago, IL')\nreq = req.point({'lat':'37.0', 'lng':'-122.5'})\n</pre>\n<p>Fetch a particular POI or Article if you have its id:</p>\n<pre>req = api.table('article').fetch(999999)\n</pre>\n<p>If you only want some of the objects associated with an article, you can\nrequest them specifically. For example, if an article has email\naddresses associated with it:</p>\n<pre>req = api.table('article').fetch(999999, 'emails')\n</pre>\n<p>Images take an optional \u2018size\u2019 parameter, for example \u2018T\u2019 for thumbnail:</p>\n<pre>req = api.table('article').fetch(999999, 'images', 'T')\n</pre>\n<p>The full list of article objects is:</p>\n<ul>\n<li>addresses</li>\n<li>audio</li>\n<li>categories</li>\n<li>details</li>\n<li>emails</li>\n<li>images</li>\n<li>phones</li>\n<li>rating_average</li>\n<li>ratings</li>\n<li>reviews</li>\n<li>sections</li>\n<li>sections_f</li>\n<li>tags</li>\n<li>websites</li>\n</ul>\n<p>Get featured Articles :</p>\n<pre>req = api.table('article').featured()\n</pre>\n</div>\n<div id=\"search-request-filters\">\n<h3>Search Request Filters</h3>\n<p>Filters can be applied to the searches:</p>\n<pre>req = req.filters({'ch':'hearplanet'})\nreq = req.filters({'lang':'fr'})\nreq = req.filters({'bbox':'(37.3,-122.8)(37.6,-120.0)'})\nreq = req.filters({'radius':15'}) # search radius in kilometers\n</pre>\n</div>\n<div id=\"request-modifiers\">\n<h3>Request modifiers</h3>\n<p>Request modifiers are used for paging results, selecting the text format\nand the amount of data returned.</p>\n<p>You can either use limit() and offset() together, or just use page().\nThe default values for offset and limit are 0 and 10, respectively. If\nyou use page(), just specify an integer page number from 1 to N. The\ndefault page length is 10.</p>\n<pre>limit(max_rows)\noffset(offset)\npage(page_num, limit=DEFAULT_LIMIT)\nformat(format) # ('HTML', 'HTML-RAW', 'XHTML', 'PLAIN', 'AS-IS')\ndepth(depth) # ('min', 'poi', 'article', 'section',\n                'section_text', 'all',)\n</pre>\n<ul>\n<li>The format modifiers change the formatting of the section text.\nNormally this is set on the backend and you don\u2019t have to worry about\nit. However, if necessary you can override it.</li>\n<li>The depth modifiers change the amount of information that is\nreturned. That\u2019s primarily for performance enhancement, when\naccessing the API over a slow network. For example, make a shallow\ninitial search using the poi.json endpoint at depth \u2018poi\u2019 to get a\nlist of POI\u2019s and their Articles. Then the full Article can be\nselected by the user, and a second request made for just that Article\nusing fetch().</li>\n</ul>\n<div id=\"first-do-a-shallow-search-of-pois-that-have-pizza-in-their-title\">\n<h4>First do a shallow search of POI\u2019s that have \u201cPizza\u201d in their title</h4>\n<pre>poi_list = api.table('poi').search().term('Pizza').depth('poi').page(1).objects()\n</pre>\n</div>\n<div id=\"get-the-id-of-the-first-article-in-the-first-poi\">\n<h4>Get the id of the first Article in the first POI</h4>\n<pre>first_poi = poi_list[0]\nfirst_article_id = first_poi.articles[0].id\nprint first_poi\n</pre>\n</div>\n<div id=\"now-get-all-the-data-related-to-that-article\">\n<h4>Now get all the data related to that Article</h4>\n<pre>article = api.table('article').fetch(first_article_id).objects()\nprint article\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<div id=\"create-an-api-query-object\">\n<h4>Create an API query object</h4>\n<pre>api = HearPlanet()\n</pre>\n</div>\n<div id=\"specify-a-search-of-the-poi-table\">\n<h4>Specify a search of the POI table</h4>\n<pre>req = api.table('poi').search()\n</pre>\n</div>\n<div id=\"add-a-query-term-and-search-origin\">\n<h4>Add a query term, and search origin</h4>\n<pre>req = req.term('Golden Gate')\nreq = req.location('San Francisco, CA')\n</pre>\n</div>\n<div id=\"add-a-filter-only-return-articles-in-the-wikipedia-channel\">\n<h4>Add a filter: only return articles in the Wikipedia channel</h4>\n<pre>req = req.filters({'ch':'wikipedia'})\n</pre>\n</div>\n<div id=\"ask-for-only-the-first-page-default-is-the-first-10-objects\">\n<h4>Ask for only the first page (default is the first 10 objects)</h4>\n<pre>req = req.page(1)\n</pre>\n</div>\n<div id=\"get-the-return-value-as-data-or-objects\">\n<h4>Get the return value as data or objects</h4>\n<pre>objects = req.objects()\n</pre>\n</div>\n<div id=\"do-something-with-the-objects\">\n<h4>Do something with the objects</h4>\n<pre>for poi in objects:\n    print poi.title\n</pre>\n</div>\n<div id=\"or-you-can-chain-the-requests-all-together\">\n<h4>Or, you can chain the requests all together</h4>\n<pre>pois = api.table('poi').search().term('Golden Gate').location('San Francisco, CA').filters({'ch':'wikipedia'}).page(1).objects()\n</pre>\n</div>\n</div>\n<div id=\"unit-tests\">\n<h3>Unit Tests</h3>\n<p>Unit Tests are provided to ensure the driver is functioning as expected.\nThe unit tests also serve as examples of various API requests.</p>\n<div id=\"you-can-run-the-unit-tests-in-test-hearplanet-py-like-this\">\n<h4>You can run the Unit Tests in test_hearplanet.py like this:</h4>\n<pre>python test_hearplanet.py\n</pre>\n</div>\n</div>\n<div id=\"url-encoding\">\n<h3>URL Encoding</h3>\n<p>The Python driver handles URL encoding, therefore all parameters passed\nto the driver should be in their un-encoded form.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 826428, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "eaa1a4694dcb843ba2cb2896c6fd3ec8", "sha256": "714fb811a3cfa0f9010d35f44d1aa0667f028255e8238ea3e419ceaf7e7c4c16"}, "downloads": -1, "filename": "HearPlanetAPI-0.1.1.tar.gz", "has_sig": false, "md5_digest": "eaa1a4694dcb843ba2cb2896c6fd3ec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17217, "upload_time": "2013-07-27T21:31:37", "upload_time_iso_8601": "2013-07-27T21:31:37.223174Z", "url": "https://files.pythonhosted.org/packages/63/30/4b4ec7356752063b4b7941edb6d0b507a04549b4696da69af2b1f8bf9f9c/HearPlanetAPI-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eaa1a4694dcb843ba2cb2896c6fd3ec8", "sha256": "714fb811a3cfa0f9010d35f44d1aa0667f028255e8238ea3e419ceaf7e7c4c16"}, "downloads": -1, "filename": "HearPlanetAPI-0.1.1.tar.gz", "has_sig": false, "md5_digest": "eaa1a4694dcb843ba2cb2896c6fd3ec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17217, "upload_time": "2013-07-27T21:31:37", "upload_time_iso_8601": "2013-07-27T21:31:37.223174Z", "url": "https://files.pythonhosted.org/packages/63/30/4b4ec7356752063b4b7941edb6d0b507a04549b4696da69af2b1f8bf9f9c/HearPlanetAPI-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:56 2020"}