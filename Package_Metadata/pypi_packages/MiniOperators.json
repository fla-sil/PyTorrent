{"info": {"author": "Pavel Panchekha", "author_email": "pavpanchekha@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 2.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "MiniOperators for Python\n========================\n\nThis library makes it almost trivial to add extended operators to the python\nlanguage, or to transform existing functions into binary operators. For\nexample, one might take the function ``compose``::\n\n    def compose(f, g):\n        return lambda *args, **kwargs: f(g(*args, **kwargs))\n\nAnd turn it into an operator, ``|compose|``::\n\n    compose = MiniOperator(compose)\n\nThen, the operator can be used as a binary operator [#]_::\n\n    f = math.sqrt  |compose|  (lambda x: x**2 + 1)\n    f(0) # 1.0\n\nIf one consistently uses this ``|<name>|`` notation and parenthesises\narguments, no problems should arise [#]_.\n\nFurthermore, the operator thus created will support overriding through the\nstandard Python convention of ``__<name>__`` and ``__r<name>__`` special\nmethods.\n\nDocumentation\n-------------\n\nThe ``MiniOperator`` constructor can be called in three ways.\n``MiniOperator(f)`` creates an operator named ``f`` that uses ``f`` as its\ndefault operation [#]_. A name can also be explicitely passed:\n``MiniOperator(name, f)``, where ``name`` is a string, will create an operator\nnamed ``name`` that uses ``f`` as a default operation. Finally, one can create\nan operator without specifying a default method: ``MiniOperator(name)``, where\n``name`` is a string, will result in an operator that will throw a\n``NotImplementedError`` when used on most arguments. However, a class will be\nable to explicitely override ``__<name>__`` or ``__r<name>__`` to support this\noperator.\n\n.. rubric:: Footnotes\n\n.. [#] Of course, the initial function must be binary --- that is, it must take\n    two arguments --- and other obvious restrications apply as well.\n.. [#] The author would like to suggest using two spaces around the operator\n    and to take special care parenthesizing expressions.\n.. [#] That is, the name is derived from the ``__name__`` of the passed function.\n    The author suggests not overrelying on this form.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/MiniOperators/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "MiniOperators", "package_url": "https://pypi.org/project/MiniOperators/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/MiniOperators/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/MiniOperators/"}, "release_url": "https://pypi.org/project/MiniOperators/1.0/", "requires_dist": null, "requires_python": null, "summary": "Miniature operators for Python", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library makes it almost trivial to add extended operators to the python\nlanguage, or to transform existing functions into binary operators. For\nexample, one might take the function <tt>compose</tt>:</p>\n<pre>def compose(f, g):\n    return lambda *args, **kwargs: f(g(*args, **kwargs))\n</pre>\n<p>And turn it into an operator, <tt>|compose|</tt>:</p>\n<pre>compose = MiniOperator(compose)\n</pre>\n<p>Then, the operator can be used as a binary operator <a href=\"#id4\" id=\"id1\" rel=\"nofollow\">[1]</a>:</p>\n<pre>f = math.sqrt  |compose|  (lambda x: x**2 + 1)\nf(0) # 1.0\n</pre>\n<p>If one consistently uses this <tt>|&lt;name&gt;|</tt> notation and parenthesises\narguments, no problems should arise <a href=\"#id5\" id=\"id2\" rel=\"nofollow\">[2]</a>.</p>\n<p>Furthermore, the operator thus created will support overriding through the\nstandard Python convention of <tt>__&lt;name&gt;__</tt> and <tt>__r&lt;name&gt;__</tt> special\nmethods.</p>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The <tt>MiniOperator</tt> constructor can be called in three ways.\n<tt>MiniOperator(f)</tt> creates an operator named <tt>f</tt> that uses <tt>f</tt> as its\ndefault operation <a href=\"#id6\" id=\"id3\" rel=\"nofollow\">[3]</a>. A name can also be explicitely passed:\n<tt>MiniOperator(name, f)</tt>, where <tt>name</tt> is a string, will create an operator\nnamed <tt>name</tt> that uses <tt>f</tt> as a default operation. Finally, one can create\nan operator without specifying a default method: <tt>MiniOperator(name)</tt>, where\n<tt>name</tt> is a string, will result in an operator that will throw a\n<tt>NotImplementedError</tt> when used on most arguments. However, a class will be\nable to explicitely override <tt>__&lt;name&gt;__</tt> or <tt>__r&lt;name&gt;__</tt> to support this\noperator.</p>\n<p>Footnotes</p>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>Of course, the initial function must be binary \u2014 that is, it must take\ntwo arguments \u2014 and other obvious restrications apply as well.</td></tr>\n</tbody>\n</table>\n<table id=\"id5\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>The author would like to suggest using two spaces around the operator\nand to take special care parenthesizing expressions.</td></tr>\n</tbody>\n</table>\n<table id=\"id6\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[3]</a></td><td>That is, the name is derived from the <tt>__name__</tt> of the passed function.\nThe author suggests not overrelying on this form.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 746258, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "824c856c7bda75f45b136a1c75b83523", "sha256": "2511620a469931150c431fc1569747ac9886b915563f09eb0a74436f1a52d2f7"}, "downloads": -1, "filename": "MiniOperators-1.0.tar.gz", "has_sig": false, "md5_digest": "824c856c7bda75f45b136a1c75b83523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14398, "upload_time": "2010-03-30T04:04:33", "upload_time_iso_8601": "2010-03-30T04:04:33.487946Z", "url": "https://files.pythonhosted.org/packages/4b/50/5bd63fc95044f86f989b50a91f03933c1f4aa2f47798ae58c1fa7ada1a64/MiniOperators-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "824c856c7bda75f45b136a1c75b83523", "sha256": "2511620a469931150c431fc1569747ac9886b915563f09eb0a74436f1a52d2f7"}, "downloads": -1, "filename": "MiniOperators-1.0.tar.gz", "has_sig": false, "md5_digest": "824c856c7bda75f45b136a1c75b83523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14398, "upload_time": "2010-03-30T04:04:33", "upload_time_iso_8601": "2010-03-30T04:04:33.487946Z", "url": "https://files.pythonhosted.org/packages/4b/50/5bd63fc95044f86f989b50a91f03933c1f4aa2f47798ae58c1fa7ada1a64/MiniOperators-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:21 2020"}