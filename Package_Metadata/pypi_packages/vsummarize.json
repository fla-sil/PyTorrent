{"info": {"author": "Lucas Ou-Yang", "author_email": "lucasyangpersonal@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Pythonic Video summarization\n----------------------------\n\nSick of nlp text summarization? Presenting: **video summarization**!\n\nWe take advantage of youtube's comment timestamp video references to generate\na summarized + shorter video from any youtube video.\n\nA glance:\n---------\n\n.. code-block:: pycon\n\n    >>> import vsummarize\n\n    >>> data = vsummarize.summarize('http://youtube.com/watch?v=...', output='shorter.mp4')\n\nAfter this command, the physical summarized ``.mp4`` is now in the output path \nyou provided. We return some meta data incase you need it.\n\nTimestamps from youtube comments are included and are important b/c our \nalgorithm generates summaries via the comments and their timestamps.\n\n.. code-block:: pycon\n\n    >>> print data.hot_clips\n    [('0:12', '0:16'), ..., ('12:31', '13:01')]\n\n    >>> print data.timestamps \n    ['0:12', '0:12', '0:14', ..., '12:31']\n\n    >>> print data.duration # in seconds\n    65 \n\nA demo:\n-------\n\nI tested this software on a 1 hour long Obama speech.\n\nOriginal video (59 minutes): http://www.youtube.com/watch?v=hed1nP9X7pI\n\nSummarized video (3:30 minutes): http://www.youtube.com/watch?v=aDYDN9lsSHg\n\nA lot of the time, (even in my product www.shorten.tv), \nyou just want a list of hot video clips instead of physically summarizing\na video into a new ``.mp4`` because of the resource consumption.\n\nTo do this, simply ignore the output video file parameter.\n\n.. code-block:: pycon\n\n    >>> data = vsummarize.summarize('http://youtube.com/watch?v=...')\n\n    >>> print data.hot_clips\n    [('0:12', '0:16'), ..., ('12:31', '13:01')]\n\n\nThe physical, summarized ``.mp4`` has NOT been generated. We just\nretrieved a set of meta data of what would have happened if we did\nsummarize it.\n\nTo actually generate a summary, we use **ffmpeg + moviepy**\nalong with the above ``.hot_clips`` video sequences to stitch together the video.\n\nFeatures\n--------\n\n- ``.mp4`` video summarization\n- youtube comments timestamp extraction\n- youtube video hot timestamp extraction\n- youtube video hot sub-clip extraction\n\nGet it now\n----------\n\nBecause I use both OSX and Ubuntu, I have clear instructions on setting\nup this project in both platforms. However, I can't guarantee\nanything for the other platforms besides give installation advice.\n\nWe use ``moviepy``, the python video manipulation library, which in turn depends \non the ``ffmpeg`` library.\n\nBe sure you have `pip <http://www.pip-installer.org/>`_.\n\nThe installation instructions are as follows:\n\n**OSX**:\n\n::\n\n    $ brew install ffmpeg\n\n\n**Ubuntu**:\n\n::\n\n    $ curl -O http://ffmpeg.gusari.org/static/64bit/ffmpeg.static.64bit.2014-02-28.tar.gz\n    $ tar -zxvf ffmpeg.static.64bit.2014-02-28.tar.gz \n    $ sudo mv ffmpeg ffprobe /usr/local/bin/.\n    $ rm ffmpeg.static.64bit.2014-02-28.tar.gz \n\n\nAnd lastly, don't forget to install ``vSummarize`` itself!\n\n::\n\n    $ pip install vsummarize\n\n\n**This app uses the google gdata api**. I have a file named ``settings.py`` which contains\nmy personal api keys. I've removed that file from this repo for obvious\nreasons but i've included a file called ``rename_to_settings.py`` which has two api key\nvalues for you to cleanly fill out. Also, please rename that file to ``settings.py`` after\nyou are finished!\n\n\nWarning\n-------\n\nBecause this is such a resource intensive task & lib (especially if you are\nactually using the summarized ``.mp4`` generation feature), you may notice on a few\nvideos the ``.mp4`` generation fail due to an *OS memory exception*. This means\nthat you don't have the RAM for ``ffmpeg`` to fork processes to subchunk out your video.\n\n\nLicense\n-------\n\nAuthored and maintained by `Lucas Ou-Yang`_.\nShoutout to `Zulko`_ for helping code and giving advice to \nsome parts of this project.\n\nWe use `moviepy`_ and `ffmpeg`_ for video manipulation.\nWe also use google's youtube api.\nPlease feel free to `email & contact me`_ if you run into issues or just would like\nto talk about the future of this library!\n\n.. _`Lucas Ou-Yang`: http://codelucas.com\n.. _`email & contact me`: mailto:lucasyangpersonal@gmail.com\n.. _`moviepy`: https://github.com/Zulko/moviepy \n.. _`ffmpeg`: http://www.ffmpeg.org/ \n.. _`Zulko`: https://github.com/Zulko\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/codelucas/vsummarize", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "vsummarize", "package_url": "https://pypi.org/project/vsummarize/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/vsummarize/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/codelucas/vsummarize"}, "release_url": "https://pypi.org/project/vsummarize/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Python video summarization.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pythonic-video-summarization\">\n<h2>Pythonic Video summarization</h2>\n<p>Sick of nlp text summarization? Presenting: <strong>video summarization</strong>!</p>\n<p>We take advantage of youtube\u2019s comment timestamp video references to generate\na summarized + shorter video from any youtube video.</p>\n</div>\n<div id=\"a-glance\">\n<h2>A glance:</h2>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">vsummarize</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">vsummarize</span><span class=\"o\">.</span><span class=\"n\">summarize</span><span class=\"p\">(</span><span class=\"s1\">'http://youtube.com/watch?v=...'</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">'shorter.mp4'</span><span class=\"p\">)</span>\n</pre>\n<p>After this command, the physical summarized <tt>.mp4</tt> is now in the output path\nyou provided. We return some meta data incase you need it.</p>\n<p>Timestamps from youtube comments are included and are important b/c our\nalgorithm generates summaries via the comments and their timestamps.</p>\n<pre><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">hot_clips</span>\n<span class=\"go\">[('0:12', '0:16'), ..., ('12:31', '13:01')]\n\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">timestamps</span>\n<span class=\"go\">['0:12', '0:12', '0:14', ..., '12:31']\n\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">duration</span> <span class=\"c1\"># in seconds</span>\n<span class=\"go\">65</span>\n</pre>\n</div>\n<div id=\"a-demo\">\n<h2>A demo:</h2>\n<p>I tested this software on a 1 hour long Obama speech.</p>\n<p>Original video (59 minutes): <a href=\"http://www.youtube.com/watch?v=hed1nP9X7pI\" rel=\"nofollow\">http://www.youtube.com/watch?v=hed1nP9X7pI</a></p>\n<p>Summarized video (3:30 minutes): <a href=\"http://www.youtube.com/watch?v=aDYDN9lsSHg\" rel=\"nofollow\">http://www.youtube.com/watch?v=aDYDN9lsSHg</a></p>\n<p>A lot of the time, (even in my product www.shorten.tv),\nyou just want a list of hot video clips instead of physically summarizing\na video into a new <tt>.mp4</tt> because of the resource consumption.</p>\n<p>To do this, simply ignore the output video file parameter.</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">vsummarize</span><span class=\"o\">.</span><span class=\"n\">summarize</span><span class=\"p\">(</span><span class=\"s1\">'http://youtube.com/watch?v=...'</span><span class=\"p\">)</span>\n<span class=\"go\">\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">hot_clips</span>\n<span class=\"go\">[('0:12', '0:16'), ..., ('12:31', '13:01')]</span>\n</pre>\n<p>The physical, summarized <tt>.mp4</tt> has NOT been generated. We just\nretrieved a set of meta data of what would have happened if we did\nsummarize it.</p>\n<p>To actually generate a summary, we use <strong>ffmpeg + moviepy</strong>\nalong with the above <tt>.hot_clips</tt> video sequences to stitch together the video.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li><tt>.mp4</tt> video summarization</li>\n<li>youtube comments timestamp extraction</li>\n<li>youtube video hot timestamp extraction</li>\n<li>youtube video hot sub-clip extraction</li>\n</ul>\n</div>\n<div id=\"get-it-now\">\n<h2>Get it now</h2>\n<p>Because I use both OSX and Ubuntu, I have clear instructions on setting\nup this project in both platforms. However, I can\u2019t guarantee\nanything for the other platforms besides give installation advice.</p>\n<p>We use <tt>moviepy</tt>, the python video manipulation library, which in turn depends\non the <tt>ffmpeg</tt> library.</p>\n<p>Be sure you have <a href=\"http://www.pip-installer.org/\" rel=\"nofollow\">pip</a>.</p>\n<p>The installation instructions are as follows:</p>\n<p><strong>OSX</strong>:</p>\n<pre>$ brew install ffmpeg\n</pre>\n<p><strong>Ubuntu</strong>:</p>\n<pre>$ curl -O http://ffmpeg.gusari.org/static/64bit/ffmpeg.static.64bit.2014-02-28.tar.gz\n$ tar -zxvf ffmpeg.static.64bit.2014-02-28.tar.gz\n$ sudo mv ffmpeg ffprobe /usr/local/bin/.\n$ rm ffmpeg.static.64bit.2014-02-28.tar.gz\n</pre>\n<p>And lastly, don\u2019t forget to install <tt>vSummarize</tt> itself!</p>\n<pre>$ pip install vsummarize\n</pre>\n<p><strong>This app uses the google gdata api</strong>. I have a file named <tt>settings.py</tt> which contains\nmy personal api keys. I\u2019ve removed that file from this repo for obvious\nreasons but i\u2019ve included a file called <tt>rename_to_settings.py</tt> which has two api key\nvalues for you to cleanly fill out. Also, please rename that file to <tt>settings.py</tt> after\nyou are finished!</p>\n</div>\n<div id=\"warning\">\n<h2>Warning</h2>\n<p>Because this is such a resource intensive task &amp; lib (especially if you are\nactually using the summarized <tt>.mp4</tt> generation feature), you may notice on a few\nvideos the <tt>.mp4</tt> generation fail due to an <em>OS memory exception</em>. This means\nthat you don\u2019t have the RAM for <tt>ffmpeg</tt> to fork processes to subchunk out your video.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Authored and maintained by <a href=\"http://codelucas.com\" rel=\"nofollow\">Lucas Ou-Yang</a>.\nShoutout to <a href=\"https://github.com/Zulko\" rel=\"nofollow\">Zulko</a> for helping code and giving advice to\nsome parts of this project.</p>\n<p>We use <a href=\"https://github.com/Zulko/moviepy\" rel=\"nofollow\">moviepy</a> and <a href=\"http://www.ffmpeg.org/\" rel=\"nofollow\">ffmpeg</a> for video manipulation.\nWe also use google\u2019s youtube api.\nPlease feel free to <a href=\"mailto:lucasyangpersonal%40gmail.com\">email &amp; contact me</a> if you run into issues or just would like\nto talk about the future of this library!</p>\n</div>\n\n          </div>"}, "last_serial": 2106606, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b2f49f8be0cb7829fe5e2c91bb424550", "sha256": "a8f73892bb14a995a0690252d6d733d00e7f29063550aa30c705de5026e391cd"}, "downloads": -1, "filename": "vsummarize-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b2f49f8be0cb7829fe5e2c91bb424550", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 206068, "upload_time": "2016-05-09T14:50:00", "upload_time_iso_8601": "2016-05-09T14:50:00.458614Z", "url": "https://files.pythonhosted.org/packages/3d/fc/800be29747a31ee35fb85c413f8c424de06847c08e86c194e49e7eace890/vsummarize-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2f49f8be0cb7829fe5e2c91bb424550", "sha256": "a8f73892bb14a995a0690252d6d733d00e7f29063550aa30c705de5026e391cd"}, "downloads": -1, "filename": "vsummarize-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b2f49f8be0cb7829fe5e2c91bb424550", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 206068, "upload_time": "2016-05-09T14:50:00", "upload_time_iso_8601": "2016-05-09T14:50:00.458614Z", "url": "https://files.pythonhosted.org/packages/3d/fc/800be29747a31ee35fb85c413f8c424de06847c08e86c194e49e7eace890/vsummarize-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:48 2020"}