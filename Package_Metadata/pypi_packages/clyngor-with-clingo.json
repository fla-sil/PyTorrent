{"info": {"author": "Lucas Bourneuf", "author_email": "lucas.bourneuf@laposte.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Programming Language :: ASP", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Clyngor with clingo\nThis is a python package installing a clingo binary along the [clyngor package](https://github.com/aluriak/clyngor),\nso the end-user will not have to care about the clingo installation.\n\nThe clingo binary is taken for Linux, OSX and Windows on [the official release page](https://github.com/potassco/clingo/releases/)\n\n# Installation\nWhen someone (who doesn't understand \"install clingo binary in your path\") have to install clyngor, give them that line instead:\n\n    pip install clyngor-with-clingo\n\nA clingo executable will appear in their `bin`. May need root access if the said someone is working at system level.\n\n\n## Maintenance\nThe package must be updated to use new clingo binaries.\n\n- Script `retrieve-clingo.sh <clingo version>` will automatically retrieve the given clingo version.\n- Script `put-clingo-version.sh <clingo version>` will automatically push the given clingo version into the package.\n\nUse [zest.releaser](https://zestreleaser.readthedocs.io) to upload new versions ; be careful to **match clingo version with package version**.\n\n\n\n# How to perform this magic\n\n## The current solution: faking clingo as a python script\n[Link to the way of doing that](https://stackoverflow.com/questions/24686838/distributing-a-binary-utility-in-setuptools). Thanks !\n\nI end up [reproducing the same entry point implementation, using pkg_resource](clyngor_with_clingo/__init__.py), and it works:\nbinaries are embedded in the package using the [MANIFEST.in](MANIFEST.in), and the package only real operation\nis to delegate command line arguments to the proper clingo binary.\n\nThis seems to work, but:\n\n- user has not control over the installed binary (however that package is all about having the user to not have to cope with that, but still\u2026 Experienced users should never use it)\n- the 3 binaries are sent to the user, and the choice is made at execution time.\n\n\n## The on-the-fly solution: hack upon setuptools to download binary at installation\nMethod used by [pyasp](https://github.com/sthiele/pyasp/blob/master/setup.py#L136).\n\nHas a lot of drawbacks, such as binary downloading from the client side, and necessity to use `--no-cache-dir` pip flag to force pip to execute the hack.\n\n\n## The proper but non-working solution: embed a platform-specific binary into a python package\nThe python part of the package is simplistic (well, there could be **no** python in this package),\nbe [we still need a basic architecture](https://stackoverflow.com/questions/12461603/setting-up-setup-py-for-packaging-of-a-single-py-file-and-a-single-data-file-wi).\n\n\n### platform-specific magic\nSetuptools provides since [PEP 508](https://www.python.org/dev/peps/pep-0508) the environment markers,\ntheoretically [usable in setup.cfg](https://stackoverflow.com/questions/44878440/correct-use-of-pep-508-environment-markers-in-setup-cfg)\nwith [setuptools](https://github.com/pypa/setuptools/pull/1520):\n\n    [options.data_files]\n    bin/clingo =\n        bin/linux/clingo; platform_system==\"Linux\"\n        bin/macos/clingo; platform_system==\"Darwin\"\n        bin/win/clingo.exe; platform_system==\"Windows\"\n\nBut it does not works. [A question has been asked about it](https://github.com/pypa/setuptools/issues/1728), also [on SO](https://stackoverflow.com/q/56004271/3077939).\n\nProbably it's because data_files does not support environment markers. Hence this solution has been abandonned.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aluriak/clyngor-with-clingo", "keywords": "Answer Set Programming,wrapper,clingo", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "clyngor-with-clingo", "package_url": "https://pypi.org/project/clyngor-with-clingo/", "platform": "", "project_url": "https://pypi.org/project/clyngor-with-clingo/", "project_urls": {"Homepage": "https://github.com/aluriak/clyngor-with-clingo"}, "release_url": "https://pypi.org/project/clyngor-with-clingo/5.3.post1/", "requires_dist": null, "requires_python": "", "summary": "Installation of clingo binary along clyngor", "version": "5.3.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Clyngor with clingo</h1>\n<p>This is a python package installing a clingo binary along the <a href=\"https://github.com/aluriak/clyngor\" rel=\"nofollow\">clyngor package</a>,\nso the end-user will not have to care about the clingo installation.</p>\n<p>The clingo binary is taken for Linux, OSX and Windows on <a href=\"https://github.com/potassco/clingo/releases/\" rel=\"nofollow\">the official release page</a></p>\n<h1>Installation</h1>\n<p>When someone (who doesn't understand \"install clingo binary in your path\") have to install clyngor, give them that line instead:</p>\n<pre><code>pip install clyngor-with-clingo\n</code></pre>\n<p>A clingo executable will appear in their <code>bin</code>. May need root access if the said someone is working at system level.</p>\n<h2>Maintenance</h2>\n<p>The package must be updated to use new clingo binaries.</p>\n<ul>\n<li>Script <code>retrieve-clingo.sh &lt;clingo version&gt;</code> will automatically retrieve the given clingo version.</li>\n<li>Script <code>put-clingo-version.sh &lt;clingo version&gt;</code> will automatically push the given clingo version into the package.</li>\n</ul>\n<p>Use <a href=\"https://zestreleaser.readthedocs.io\" rel=\"nofollow\">zest.releaser</a> to upload new versions ; be careful to <strong>match clingo version with package version</strong>.</p>\n<h1>How to perform this magic</h1>\n<h2>The current solution: faking clingo as a python script</h2>\n<p><a href=\"https://stackoverflow.com/questions/24686838/distributing-a-binary-utility-in-setuptools\" rel=\"nofollow\">Link to the way of doing that</a>. Thanks !</p>\n<p>I end up <a href=\"clyngor_with_clingo/__init__.py\" rel=\"nofollow\">reproducing the same entry point implementation, using pkg_resource</a>, and it works:\nbinaries are embedded in the package using the <a href=\"MANIFEST.in\" rel=\"nofollow\">MANIFEST.in</a>, and the package only real operation\nis to delegate command line arguments to the proper clingo binary.</p>\n<p>This seems to work, but:</p>\n<ul>\n<li>user has not control over the installed binary (however that package is all about having the user to not have to cope with that, but still\u2026 Experienced users should never use it)</li>\n<li>the 3 binaries are sent to the user, and the choice is made at execution time.</li>\n</ul>\n<h2>The on-the-fly solution: hack upon setuptools to download binary at installation</h2>\n<p>Method used by <a href=\"https://github.com/sthiele/pyasp/blob/master/setup.py#L136\" rel=\"nofollow\">pyasp</a>.</p>\n<p>Has a lot of drawbacks, such as binary downloading from the client side, and necessity to use <code>--no-cache-dir</code> pip flag to force pip to execute the hack.</p>\n<h2>The proper but non-working solution: embed a platform-specific binary into a python package</h2>\n<p>The python part of the package is simplistic (well, there could be <strong>no</strong> python in this package),\nbe <a href=\"https://stackoverflow.com/questions/12461603/setting-up-setup-py-for-packaging-of-a-single-py-file-and-a-single-data-file-wi\" rel=\"nofollow\">we still need a basic architecture</a>.</p>\n<h3>platform-specific magic</h3>\n<p>Setuptools provides since <a href=\"https://www.python.org/dev/peps/pep-0508\" rel=\"nofollow\">PEP 508</a> the environment markers,\ntheoretically <a href=\"https://stackoverflow.com/questions/44878440/correct-use-of-pep-508-environment-markers-in-setup-cfg\" rel=\"nofollow\">usable in setup.cfg</a>\nwith <a href=\"https://github.com/pypa/setuptools/pull/1520\" rel=\"nofollow\">setuptools</a>:</p>\n<pre><code>[options.data_files]\nbin/clingo =\n    bin/linux/clingo; platform_system==\"Linux\"\n    bin/macos/clingo; platform_system==\"Darwin\"\n    bin/win/clingo.exe; platform_system==\"Windows\"\n</code></pre>\n<p>But it does not works. <a href=\"https://github.com/pypa/setuptools/issues/1728\" rel=\"nofollow\">A question has been asked about it</a>, also <a href=\"https://stackoverflow.com/q/56004271/3077939\" rel=\"nofollow\">on SO</a>.</p>\n<p>Probably it's because data_files does not support environment markers. Hence this solution has been abandonned.</p>\n\n          </div>"}, "last_serial": 5273318, "releases": {"5.3.0": [{"comment_text": "", "digests": {"md5": "a3b8bd8be6db9c0c7f59fb5583376b89", "sha256": "98550bb161c0470a5b4e254d7fdedfd56390d8b200f81927c5d887e28eb81fa9"}, "downloads": -1, "filename": "clyngor-with-clingo-5.3.0.tar.gz", "has_sig": false, "md5_digest": "a3b8bd8be6db9c0c7f59fb5583376b89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3158, "upload_time": "2019-05-06T12:21:29", "upload_time_iso_8601": "2019-05-06T12:21:29.633382Z", "url": "https://files.pythonhosted.org/packages/74/ef/51278d397977a355df1f67e8b4227c3b1d8788ba361906be0d3703d8ea45/clyngor-with-clingo-5.3.0.tar.gz", "yanked": false}], "5.3.post0": [{"comment_text": "", "digests": {"md5": "cf12b5cbbc3e07f6937d250aa85ffc0e", "sha256": "7c905811cb232fd5a5119b0e7ac47fe9467d9dc3c3f77238e04b053eaccd41d3"}, "downloads": -1, "filename": "clyngor-with-clingo-5.3.post0.tar.gz", "has_sig": false, "md5_digest": "cf12b5cbbc3e07f6937d250aa85ffc0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3359, "upload_time": "2019-05-15T16:16:24", "upload_time_iso_8601": "2019-05-15T16:16:24.838346Z", "url": "https://files.pythonhosted.org/packages/7f/4a/5fe64b7b98ee14c82bf446fa6eb26c9cf9050a08ca5db68b1b23aba9a649/clyngor-with-clingo-5.3.post0.tar.gz", "yanked": false}], "5.3.post1": [{"comment_text": "", "digests": {"md5": "a6750e911d3fd0d14fcc3aef43f6dc5a", "sha256": "cb5eace851fdf65e57369b28c44853436a424aa928615f0d2c1d46ca69dcfdf4"}, "downloads": -1, "filename": "clyngor-with-clingo-5.3.post1.tar.gz", "has_sig": false, "md5_digest": "a6750e911d3fd0d14fcc3aef43f6dc5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5779814, "upload_time": "2019-05-15T16:36:40", "upload_time_iso_8601": "2019-05-15T16:36:40.858064Z", "url": "https://files.pythonhosted.org/packages/c5/7f/33858be8415afdda144479faae76e91e12880bcee5792f383c218ee613a6/clyngor-with-clingo-5.3.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a6750e911d3fd0d14fcc3aef43f6dc5a", "sha256": "cb5eace851fdf65e57369b28c44853436a424aa928615f0d2c1d46ca69dcfdf4"}, "downloads": -1, "filename": "clyngor-with-clingo-5.3.post1.tar.gz", "has_sig": false, "md5_digest": "a6750e911d3fd0d14fcc3aef43f6dc5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5779814, "upload_time": "2019-05-15T16:36:40", "upload_time_iso_8601": "2019-05-15T16:36:40.858064Z", "url": "https://files.pythonhosted.org/packages/c5/7f/33858be8415afdda144479faae76e91e12880bcee5792f383c218ee613a6/clyngor-with-clingo-5.3.post1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:38 2020"}