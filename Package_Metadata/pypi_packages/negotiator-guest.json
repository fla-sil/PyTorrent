{"info": {"author": "Peter Odding", "author_email": "peter@peterodding.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Communications", "Topic :: Software Development", "Topic :: System", "Topic :: System :: Installation/Setup", "Topic :: System :: Operating System", "Topic :: System :: Operating System Kernels :: Linux", "Topic :: System :: Systems Administration"], "description": "Scriptable KVM/QEMU guest agent implemented in Python\n=====================================================\n\nThe Python packages negotiator-host_, negotiator-guest_ and negotiator-common_\ntogether implement a scriptable KVM_/QEMU_ guest agent infrastructure in\nPython. This infrastructure supports realtime bidirectional communication\nbetween Linux_ hosts and guests which allows the hosts and guests to invoke\nuser defined commands on 'the other side'.\n\nBecause the user defines the commands that hosts and guests can execute, the\nuser controls the amount of influence that hosts and guests have over each\nother (there are several built-in commands, these are all read only).\n\n.. contents::\n\nStatus\n------\n\nSome points to consider:\n\n- The Negotiator project does what I expect from it: realtime bidirectional\n  communication between Linux based KVM/QEMU hosts and guests.\n\n- The project doesn't have an automated test suite, although its functionality\n  has been extensively tested during development and is being used in a\n  production environment on more than 100 virtual machines (for non-critical\n  tasks).\n\n- The project has not been peer reviewed with regards to security. My primary\n  use case is KVM/QEMU hosts and guests that trust each other to some extent\n  (think private clouds, not shared hosting :-).\n\nInstallation\n------------\n\nThe `negotiator` packages and their dependencies are compatible with Python 2.7\nand newer and are all pure Python. This means you don't need a compiler\ntoolchain to install the `negotiator` packages. This is a design decision and\nso won't be changed.\n\n.. contents::\n   :local:\n\nOn KVM/QEMU hosts\n~~~~~~~~~~~~~~~~~\n\nHere's how to install the negotiator-host_ package on your host(s):\n\n.. code-block:: bash\n\n   $ sudo pip install negotiator-host\n\nIf you prefer you can install the Python package in a virtual environment:\n\n.. code-block:: bash\n\n   $ sudo apt-get install --yes python-virtualenv\n   $ virtualenv /tmp/negotiator-host\n   $ source /tmp/negotiator-host/bin/activate\n   $ pip install negotiator-host\n\nAfter installation the ``negotiator-host`` program is available. The usage\nmessage will help you get started, try the ``--help`` option. Now you need to\nfind a way to run the ``negotiator-host`` command as a daemon. I have good\nexperiences with supervisord_, here's how to set that up:\n\n.. code-block:: bash\n\n   $ sudo apt-get install --yes supervisor\n   $ sudo tee /etc/supervisor/conf.d/negotiator-host.conf >/dev/null << EOF\n   [program:negotiator-host]\n   command = /usr/local/bin/negotiator-host --daemon\n   autostart = True\n   stdout_logfile = /var/log/negotiator-host.log\n   stderr_logfile = /var/log/negotiator-host.log\n   EOF\n   $ sudo supervisorctl update negotiator-host\n\nOn KVM/QEMU guests\n~~~~~~~~~~~~~~~~~~\n\nInstall the negotiator-guest_ package on your guest(s):\n\n.. code-block:: bash\n\n   $ sudo pip install negotiator-guest\n\nIf you prefer you can install the Python package in a virtual environment:\n\n.. code-block:: bash\n\n   $ sudo apt-get install --yes python-virtualenv\n   $ virtualenv /tmp/negotiator-guest\n   $ source /tmp/negotiator-guest/bin/activate\n   $ pip install negotiator-guest\n\nAfter installation you need to find a way to run the ``negotiator-guest``\ncommand as a daemon. I have good experiences with supervisord_, here's how\nto set that up:\n\n.. code-block:: bash\n\n   $ sudo apt-get install --yes supervisor\n   $ sudo tee /etc/supervisor/conf.d/negotiator-guest.conf >/dev/null << EOF\n   [program:negotiator-guest]\n   command = /usr/local/bin/negotiator-guest --daemon\n   autostart = True\n   stdout_logfile = /var/log/negotiator-guest.log\n   stderr_logfile = /var/log/negotiator-guest.log\n   EOF\n   $ sudo supervisorctl update negotiator-guest\n\nGetting started\n---------------\n\nIf the instructions below are not enough to get you started, take a look at the\n*Debugging* section below for hints about what to do when things don't work as\nexpected.\n\n1. First you have to add two virtual devices to your QEMU guest. You can do so\n   by editing the guest's XML definition file. On Ubuntu Linux KVM/QEMU hosts\n   these files are found in the directory ``/etc/libvirt/qemu``. Open the file\n   in your favorite text editor (Vim? :-) and add the the following XML snippet\n   inside the ``<devices>`` section:\n\n   .. code-block:: xml\n\n      <channel type='unix'>\n         <source mode='bind' path='/var/lib/libvirt/qemu/channel/target/GUEST_NAME.negotiator-host-to-guest.0' />\n         <target type='virtio' name='negotiator-host-to-guest.0' />\n      </channel>\n\n      <channel type='unix'>\n         <source mode='bind' path='/var/lib/libvirt/qemu/channel/target/GUEST_NAME.negotiator-guest-to-host.0' />\n         <target type='virtio' name='negotiator-guest-to-host.0' />\n      </channel>\n\n   Replace ``GUEST_NAME`` with the name of your guest in both places. If you\n   use libvirt 1.0.6 or newer (you can check with ``virsh --version``) you can\n   omit the ``path='...'`` attribute because libvirt will fill it in\n   automatically when it reloads the guest's XML definition file (in step 2).\n\n2. After adding the configuration snippet you have to activate it:\n\n   .. code-block:: bash\n\n      $ sudo virsh define /etc/libvirt/qemu/GUEST_NAME.xml\n\n3. Now you need to shut down the guest and then start it again:\n\n   .. code-block:: bash\n\n      $ sudo virsh shutdown --mode acpi GUEST_NAME\n      $ sudo virsh start GUEST_NAME\n\n   Note that just rebooting the guest will not add the new virtual devices, you\n   have to actually stop the guest and then start it again!\n\n4. Now go and create some scripts in ``/usr/lib/negotiator/commands`` and try\n   to execute them from the other side! Once you start writing your own\n   commands it's useful to know that commands on the KVM/QEMU host side have\n   access to some `environment variables`_.\n\nUsage\n-----\n\nThis section documents the command line interfaces of the programs running on\nhosts and guests. For information on the Python API please refer to the online\ndocumentation on `Read the Docs`_.\n\n.. contents::\n   :local:\n\nThe negotiator-host program\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. A DRY solution to avoid duplication of the `negotiator-host --help' text:\n..\n.. [[[cog\n.. from humanfriendly.usage import inject_usage\n.. inject_usage('negotiator_host.cli')\n.. ]]]\n\n**Usage:** `negotiator-host [OPTIONS] GUEST_NAME`\n\nCommunicate from a KVM/QEMU host system with running guest systems using a\nguest agent daemon running inside the guests.\n\n**Supported options:**\n\n.. csv-table::\n   :header: Option, Description\n   :widths: 30, 70\n\n\n   \"``-g``, ``--list-guests``\",List the names of the guests that have the appropriate channel.\n   \"``-c``, ``--list-commands``\",List the commands that the guest exposes to its host.\n   \"``-e``, ``--execute=COMMAND``\",\"Execute the given command inside GUEST_NAME. The standard output stream of\n   the command inside the guest is intercepted and copied to the standard\n   output stream on the host. If the command exits with a nonzero status code\n   the negotiator-host program will also exit with a nonzero status code.\"\n   \"``-t``, ``--timeout=SECONDS``\",\"Set the number of seconds before a remote call without a response times\n   out. A value of zero disables the timeout (in this case the command can\n   hang indefinitely). The default is 10 seconds.\"\n   \"``-d``, ``--daemon``\",Start the host daemon that answers real time requests from guests.\n   \"``-v``, ``--verbose``\",Increase logging verbosity (can be repeated).\n   \"``-q``, ``--quiet``\",Decrease logging verbosity (can be repeated).\n   \"``-h``, ``--help``\",Show this message and exit.\n\n.. [[[end]]]\n\nThe negotiator-guest program\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. A DRY solution to avoid duplication of the `negotiator-host --help' text:\n..\n.. [[[cog\n.. from humanfriendly.usage import inject_usage\n.. inject_usage('negotiator_guest.cli')\n.. ]]]\n\n**Usage:** `negotiator-guest [OPTIONS]`\n\nCommunicate from a KVM/QEMU guest system to its host or start the\nguest daemon to allow the host to execute commands on its guests.\n\n**Supported options:**\n\n.. csv-table::\n   :header: Option, Description\n   :widths: 30, 70\n\n\n   \"``-l``, ``--list-commands``\",List the commands that the host exposes to its guests.\n   \"``-e``, ``--execute=COMMAND``\",\"Execute the given command on the KVM/QEMU host. The standard output stream\n   of the command on the host is intercepted and copied to the standard output\n   stream on the guest. If the command exits with a nonzero status code the\n   negotiator-guest program will also exit with a nonzero status code.\"\n   \"``-d``, ``--daemon``\",\"Start the guest daemon. When using this command line option the\n   \"\"negotiator-guest\"\" program never returns (unless an unexpected error\n   condition occurs).\"\n   \"``-t``, ``--timeout=SECONDS``\",\"Set the number of seconds before a remote call without a response times\n   out. A value of zero disables the timeout (in this case the command can\n   hang indefinitely). The default is 10 seconds.\"\n   \"``-c``, ``--character-device=PATH``\",\"By default the appropriate character device is automatically selected based\n   on /sys/class/virtio-ports/\\*/name. If the automatic selection doesn't work,\n   you can set the absolute pathname of the character device that's used to\n   communicate with the negotiator-host daemon running on the KVM/QEMU host.\"\n   \"``-v``, ``--verbose``\",Increase logging verbosity (can be repeated).\n   \"``-q``, ``--quiet``\",Decrease logging verbosity (can be repeated).\n   \"``-h``, ``--help``\",Show this message and exit.\n\n.. [[[end]]]\n\nDebugging\n---------\n\nThis section contains hints about what to do when things don't work as\nexpected.\n\n.. contents::\n   :local:\n\nBroken channels on KVM/QEMU hosts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhether you want to get the official QEMU guest agent or the Negotiator project\nrunning, you will need a working bidirectional channel. I'm testing Negotiator\non an Ubuntu 14.04 KVM/QEMU host and I needed several changes to get things\nworking properly:\n\n.. code-block:: bash\n\n   $ CHANNELS_DIRECTORY=/var/lib/libvirt/qemu/channel/target\n   $ sudo mkdir -p $CHANNELS_DIRECTORY\n   $ sudo chown libvirt-qemu:kvm $CHANNELS_DIRECTORY\n\nThe above should be done by the KVM/QEMU system packages if you ask me, but\nanyway. On top of this if you are running Ubuntu with AppArmor enabled (the\ndefault) you may need to apply the following patch:\n\n.. code-block:: bash\n\n   $ diff -u /etc/apparmor.d/abstractions/libvirt-qemu.orig /etc/apparmor.d/abstractions/libvirt-qemu\n   --- /etc/apparmor.d/abstractions/libvirt-qemu.orig      2015-09-19 12:46:54.316593334 +0200\n   +++ /etc/apparmor.d/abstractions/libvirt-qemu   2015-09-24 14:43:43.642064576 +0200\n   @@ -49,6 +49,9 @@\n      /run/shm/ r,\n      owner /run/shm/spice.* rw,\n\n   +  # Local modification to enable the QEMU guest agent.\n   +  owner /var/lib/libvirt/qemu/channel/target/* rw,\n   +\n      # 'kill' is not required for sound and is a security risk. Do not enable\n      # unless you absolutely need it.\n      deny capability kill,\n\nAgain this should just be part of the KVM/QEMU system packages, but whatever.\nThe Negotiator project is playing with new-ish functionality so I pretty much\nknow to expect sharp edges :-)\n\nCharacter device detection fails\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen the ``negotiator-guest`` program fails to detect the correct character\ndevices it will complain loudly and point you here. Here are some of things\nI've run into that can cause this:\n\n- The virtual channel(s) have not been correctly configured or the correct\n  configuration hasn't been applied yet. Please carefully follow the\n  instructions in the *Getting started* section above.\n\n- The kernel module ``virtio_console`` is not loaded because it is not\n  available in your kernel. You can check by using the ``lsmod`` command. If\n  the module is not loaded you'll need to install and boot to a kernel that\n  does have the module.\n\nWhy another guest agent?\n------------------------\n\nThe QEMU project provides an `official guest agent`_ and this agent is very\nuseful to increase integration between QEMU hosts and guests. However the\nofficial QEMU guest agent has two notable shortcomings (for me at least):\n\n**Extensibility**\n  The official QEMU guest agent has some generic mechanisms like being able to\n  write files inside guests, but this is a far cry from a generic, extensible\n  architecture. Ideally given the host and guest's permission we should be able\n  to transfer arbitrary data and execute user defined logic on both sides.\n\n**Platform support**\n  Despite considerable effort I haven't been able to get a recent version of\n  the QEMU guest agent running on older Linux distributions (e.g. Ubuntu Linux\n  10.04). Older versions of the guest agent can be succesfully compiled for\n  such distributions but don't support the features I require. By creating my\n  own guest agent I have more control over platform support (given the\n  primitives required for communication).\n\nNote that my project in no way tries to replace the official QEMU guest agent.\nFor example I have no intention of implementing freezing and thawing of file\nsystems because the official agent already does that just fine :-). In other\nwords the two projects share a lot of ideas but have very different goals.\n\nHow does it work?\n-----------------\n\nThe scriptable guest agent infrastructure uses `the same mechanism`_ that the\nofficial QEMU guest agent does:\n\n- Inside the guest special character devices are created that allow reading and\n  writing. These character devices are ``/dev/vport[0-9]p[0-9]``.\n\n- On the host UNIX domain sockets are created that are connected to the\n  character devices inside the guest. On Ubuntu Linux KVM/QEMU hosts,\n  these UNIX domain sockets are created in the directory\n  ``/var/lib/libvirt/qemu/channel/target``.\n\nContact\n-------\n\nThe latest version of `negotiator` is available on PyPI_ and GitHub_. You can\nfind the documentation on `Read The Docs`_. For bug reports please create an\nissue on GitHub_. If you have questions, suggestions, etc. feel free to send me\nan e-mail at `peter@peterodding.com`_.\n\nLicense\n-------\n\nThis software is licensed under the `MIT license`_.\n\n\u00a9 2019 Peter Odding.\n\n.. External references:\n.. _environment variables: http://negotiator.readthedocs.org/en/latest/#negotiator_host.GuestChannel.prepare_environment\n.. _GitHub: https://github.com/xolox/python-negotiator\n.. _KVM: https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine\n.. _Linux: https://en.wikipedia.org/wiki/Linux\n.. _MIT license: http://en.wikipedia.org/wiki/MIT_License\n.. _negotiator-common: https://pypi.python.org/pypi/negotiator-common\n.. _negotiator-guest: https://pypi.python.org/pypi/negotiator-guest\n.. _negotiator-host: https://pypi.python.org/pypi/negotiator-host\n.. _official guest agent: http://wiki.libvirt.org/page/Qemu_guest_agent\n.. _peter@peterodding.com: peter@peterodding.com\n.. _PyPI: https://pypi.python.org/pypi/negotiator-host\n.. _QEMU: https://en.wikipedia.org/wiki/QEMU\n.. _Read The Docs: http://negotiator.readthedocs.org/en/latest/\n.. _supervisord: http://supervisord.org/\n.. _the same mechanism: http://www.linux-kvm.org/page/VMchannel_Requirements\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://negotiator.readthedocs.org", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "negotiator-guest", "package_url": "https://pypi.org/project/negotiator-guest/", "platform": "", "project_url": "https://pypi.org/project/negotiator-guest/", "project_urls": {"Homepage": "https://negotiator.readthedocs.org"}, "release_url": "https://pypi.org/project/negotiator-guest/0.12.2/", "requires_dist": ["coloredlogs (>=5.0)", "negotiator-common (>=0.12.2)"], "requires_python": "", "summary": "Scriptable KVM/QEMU guest agent (guest side of things)", "version": "0.12.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Python packages <a href=\"https://pypi.python.org/pypi/negotiator-host\" rel=\"nofollow\">negotiator-host</a>, <a href=\"https://pypi.python.org/pypi/negotiator-guest\" rel=\"nofollow\">negotiator-guest</a> and <a href=\"https://pypi.python.org/pypi/negotiator-common\" rel=\"nofollow\">negotiator-common</a>\ntogether implement a scriptable <a href=\"https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine\" rel=\"nofollow\">KVM</a>/<a href=\"https://en.wikipedia.org/wiki/QEMU\" rel=\"nofollow\">QEMU</a> guest agent infrastructure in\nPython. This infrastructure supports realtime bidirectional communication\nbetween <a href=\"https://en.wikipedia.org/wiki/Linux\" rel=\"nofollow\">Linux</a> hosts and guests which allows the hosts and guests to invoke\nuser defined commands on \u2018the other side\u2019.</p>\n<p>Because the user defines the commands that hosts and guests can execute, the\nuser controls the amount of influence that hosts and guests have over each\nother (there are several built-in commands, these are all read only).</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#status\" id=\"id4\" rel=\"nofollow\">Status</a></li>\n<li><a href=\"#installation\" id=\"id5\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#on-kvm-qemu-hosts\" id=\"id6\" rel=\"nofollow\">On KVM/QEMU hosts</a></li>\n<li><a href=\"#on-kvm-qemu-guests\" id=\"id7\" rel=\"nofollow\">On KVM/QEMU guests</a></li>\n</ul>\n</li>\n<li><a href=\"#getting-started\" id=\"id8\" rel=\"nofollow\">Getting started</a></li>\n<li><a href=\"#usage\" id=\"id9\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#the-negotiator-host-program\" id=\"id10\" rel=\"nofollow\">The negotiator-host program</a></li>\n<li><a href=\"#the-negotiator-guest-program\" id=\"id11\" rel=\"nofollow\">The negotiator-guest program</a></li>\n</ul>\n</li>\n<li><a href=\"#debugging\" id=\"id12\" rel=\"nofollow\">Debugging</a><ul>\n<li><a href=\"#broken-channels-on-kvm-qemu-hosts\" id=\"id13\" rel=\"nofollow\">Broken channels on KVM/QEMU hosts</a></li>\n<li><a href=\"#character-device-detection-fails\" id=\"id14\" rel=\"nofollow\">Character device detection fails</a></li>\n</ul>\n</li>\n<li><a href=\"#why-another-guest-agent\" id=\"id15\" rel=\"nofollow\">Why another guest agent?</a></li>\n<li><a href=\"#how-does-it-work\" id=\"id16\" rel=\"nofollow\">How does it work?</a></li>\n<li><a href=\"#contact\" id=\"id17\" rel=\"nofollow\">Contact</a></li>\n<li><a href=\"#license\" id=\"id18\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"status\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Status</a></h2>\n<p>Some points to consider:</p>\n<ul>\n<li>The Negotiator project does what I expect from it: realtime bidirectional\ncommunication between Linux based KVM/QEMU hosts and guests.</li>\n<li>The project doesn\u2019t have an automated test suite, although its functionality\nhas been extensively tested during development and is being used in a\nproduction environment on more than 100 virtual machines (for non-critical\ntasks).</li>\n<li>The project has not been peer reviewed with regards to security. My primary\nuse case is KVM/QEMU hosts and guests that trust each other to some extent\n(think private clouds, not shared hosting :-).</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Installation</a></h2>\n<p>The <cite>negotiator</cite> packages and their dependencies are compatible with Python 2.7\nand newer and are all pure Python. This means you don\u2019t need a compiler\ntoolchain to install the <cite>negotiator</cite> packages. This is a design decision and\nso won\u2019t be changed.</p>\n<div id=\"id1\">\n<ul>\n<li><a href=\"#on-kvm-qemu-hosts\" id=\"id19\" rel=\"nofollow\">On KVM/QEMU hosts</a></li>\n<li><a href=\"#on-kvm-qemu-guests\" id=\"id20\" rel=\"nofollow\">On KVM/QEMU guests</a></li>\n</ul>\n</div>\n<div id=\"on-kvm-qemu-hosts\">\n<h3><a href=\"#id19\" rel=\"nofollow\">On KVM/QEMU hosts</a></h3>\n<p>Here\u2019s how to install the <a href=\"https://pypi.python.org/pypi/negotiator-host\" rel=\"nofollow\">negotiator-host</a> package on your host(s):</p>\n<pre>$ sudo pip install negotiator-host\n</pre>\n<p>If you prefer you can install the Python package in a virtual environment:</p>\n<pre>$ sudo apt-get install --yes python-virtualenv\n$ virtualenv /tmp/negotiator-host\n$ <span class=\"nb\">source</span> /tmp/negotiator-host/bin/activate\n$ pip install negotiator-host\n</pre>\n<p>After installation the <tt><span class=\"pre\">negotiator-host</span></tt> program is available. The usage\nmessage will help you get started, try the <tt><span class=\"pre\">--help</span></tt> option. Now you need to\nfind a way to run the <tt><span class=\"pre\">negotiator-host</span></tt> command as a daemon. I have good\nexperiences with <a href=\"http://supervisord.org/\" rel=\"nofollow\">supervisord</a>, here\u2019s how to set that up:</p>\n<pre>$ sudo apt-get install --yes supervisor\n$ sudo tee /etc/supervisor/conf.d/negotiator-host.conf &gt;/dev/null <span class=\"s\">&lt;&lt; EOF\n[program:negotiator-host]\ncommand = /usr/local/bin/negotiator-host --daemon\nautostart = True\nstdout_logfile = /var/log/negotiator-host.log\nstderr_logfile = /var/log/negotiator-host.log\nEOF</span>\n$ sudo supervisorctl update negotiator-host\n</pre>\n</div>\n<div id=\"on-kvm-qemu-guests\">\n<h3><a href=\"#id20\" rel=\"nofollow\">On KVM/QEMU guests</a></h3>\n<p>Install the <a href=\"https://pypi.python.org/pypi/negotiator-guest\" rel=\"nofollow\">negotiator-guest</a> package on your guest(s):</p>\n<pre>$ sudo pip install negotiator-guest\n</pre>\n<p>If you prefer you can install the Python package in a virtual environment:</p>\n<pre>$ sudo apt-get install --yes python-virtualenv\n$ virtualenv /tmp/negotiator-guest\n$ <span class=\"nb\">source</span> /tmp/negotiator-guest/bin/activate\n$ pip install negotiator-guest\n</pre>\n<p>After installation you need to find a way to run the <tt><span class=\"pre\">negotiator-guest</span></tt>\ncommand as a daemon. I have good experiences with <a href=\"http://supervisord.org/\" rel=\"nofollow\">supervisord</a>, here\u2019s how\nto set that up:</p>\n<pre>$ sudo apt-get install --yes supervisor\n$ sudo tee /etc/supervisor/conf.d/negotiator-guest.conf &gt;/dev/null <span class=\"s\">&lt;&lt; EOF\n[program:negotiator-guest]\ncommand = /usr/local/bin/negotiator-guest --daemon\nautostart = True\nstdout_logfile = /var/log/negotiator-guest.log\nstderr_logfile = /var/log/negotiator-guest.log\nEOF</span>\n$ sudo supervisorctl update negotiator-guest\n</pre>\n</div>\n</div>\n<div id=\"getting-started\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Getting started</a></h2>\n<p>If the instructions below are not enough to get you started, take a look at the\n<em>Debugging</em> section below for hints about what to do when things don\u2019t work as\nexpected.</p>\n<ol>\n<li><p>First you have to add two virtual devices to your QEMU guest. You can do so\nby editing the guest\u2019s XML definition file. On Ubuntu Linux KVM/QEMU hosts\nthese files are found in the directory <tt>/etc/libvirt/qemu</tt>. Open the file\nin your favorite text editor (Vim? :-) and add the the following XML snippet\ninside the <tt>&lt;devices&gt;</tt> section:</p>\n<pre><span class=\"nt\">&lt;channel</span> <span class=\"na\">type=</span><span class=\"s\">'unix'</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;source</span> <span class=\"na\">mode=</span><span class=\"s\">'bind'</span> <span class=\"na\">path=</span><span class=\"s\">'/var/lib/libvirt/qemu/channel/target/GUEST_NAME.negotiator-host-to-guest.0'</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;target</span> <span class=\"na\">type=</span><span class=\"s\">'virtio'</span> <span class=\"na\">name=</span><span class=\"s\">'negotiator-host-to-guest.0'</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/channel&gt;</span>\n\n<span class=\"nt\">&lt;channel</span> <span class=\"na\">type=</span><span class=\"s\">'unix'</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;source</span> <span class=\"na\">mode=</span><span class=\"s\">'bind'</span> <span class=\"na\">path=</span><span class=\"s\">'/var/lib/libvirt/qemu/channel/target/GUEST_NAME.negotiator-guest-to-host.0'</span> <span class=\"nt\">/&gt;</span>\n   <span class=\"nt\">&lt;target</span> <span class=\"na\">type=</span><span class=\"s\">'virtio'</span> <span class=\"na\">name=</span><span class=\"s\">'negotiator-guest-to-host.0'</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/channel&gt;</span>\n</pre>\n<p>Replace <tt>GUEST_NAME</tt> with the name of your guest in both places. If you\nuse libvirt 1.0.6 or newer (you can check with <tt>virsh <span class=\"pre\">--version</span></tt>) you can\nomit the <tt><span class=\"pre\">path='...'</span></tt> attribute because libvirt will fill it in\nautomatically when it reloads the guest\u2019s XML definition file (in step 2).</p>\n</li>\n<li><p>After adding the configuration snippet you have to activate it:</p>\n<pre>$ sudo virsh define /etc/libvirt/qemu/GUEST_NAME.xml\n</pre>\n</li>\n<li><p>Now you need to shut down the guest and then start it again:</p>\n<pre>$ sudo virsh shutdown --mode acpi GUEST_NAME\n$ sudo virsh start GUEST_NAME\n</pre>\n<p>Note that just rebooting the guest will not add the new virtual devices, you\nhave to actually stop the guest and then start it again!</p>\n</li>\n<li><p>Now go and create some scripts in <tt>/usr/lib/negotiator/commands</tt> and try\nto execute them from the other side! Once you start writing your own\ncommands it\u2019s useful to know that commands on the KVM/QEMU host side have\naccess to some <a href=\"http://negotiator.readthedocs.org/en/latest/#negotiator_host.GuestChannel.prepare_environment\" rel=\"nofollow\">environment variables</a>.</p>\n</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Usage</a></h2>\n<p>This section documents the command line interfaces of the programs running on\nhosts and guests. For information on the Python API please refer to the online\ndocumentation on <a href=\"http://negotiator.readthedocs.org/en/latest/\" rel=\"nofollow\">Read the Docs</a>.</p>\n<div id=\"id2\">\n<ul>\n<li><a href=\"#the-negotiator-host-program\" id=\"id21\" rel=\"nofollow\">The negotiator-host program</a></li>\n<li><a href=\"#the-negotiator-guest-program\" id=\"id22\" rel=\"nofollow\">The negotiator-guest program</a></li>\n</ul>\n</div>\n<div id=\"the-negotiator-host-program\">\n<h3><a href=\"#id21\" rel=\"nofollow\">The negotiator-host program</a></h3>\n<p><strong>Usage:</strong> <cite>negotiator-host [OPTIONS] GUEST_NAME</cite></p>\n<p>Communicate from a KVM/QEMU host system with running guest systems using a\nguest agent daemon running inside the guests.</p>\n<p><strong>Supported options:</strong></p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt><span class=\"pre\">-g</span></tt>, <tt><span class=\"pre\">--list-guests</span></tt></td>\n<td>List the names of the guests that have the appropriate channel.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-c</span></tt>, <tt><span class=\"pre\">--list-commands</span></tt></td>\n<td>List the commands that the guest exposes to its host.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-e</span></tt>, <tt><span class=\"pre\">--execute=COMMAND</span></tt></td>\n<td>Execute the given command inside GUEST_NAME. The standard output stream of\nthe command inside the guest is intercepted and copied to the standard\noutput stream on the host. If the command exits with a nonzero status code\nthe negotiator-host program will also exit with a nonzero status code.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-t</span></tt>, <tt><span class=\"pre\">--timeout=SECONDS</span></tt></td>\n<td>Set the number of seconds before a remote call without a response times\nout. A value of zero disables the timeout (in this case the command can\nhang indefinitely). The default is 10 seconds.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-d</span></tt>, <tt><span class=\"pre\">--daemon</span></tt></td>\n<td>Start the host daemon that answers real time requests from guests.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-v</span></tt>, <tt><span class=\"pre\">--verbose</span></tt></td>\n<td>Increase logging verbosity (can be repeated).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-q</span></tt>, <tt><span class=\"pre\">--quiet</span></tt></td>\n<td>Decrease logging verbosity (can be repeated).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-h</span></tt>, <tt><span class=\"pre\">--help</span></tt></td>\n<td>Show this message and exit.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"the-negotiator-guest-program\">\n<h3><a href=\"#id22\" rel=\"nofollow\">The negotiator-guest program</a></h3>\n<p><strong>Usage:</strong> <cite>negotiator-guest [OPTIONS]</cite></p>\n<p>Communicate from a KVM/QEMU guest system to its host or start the\nguest daemon to allow the host to execute commands on its guests.</p>\n<p><strong>Supported options:</strong></p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt><span class=\"pre\">-l</span></tt>, <tt><span class=\"pre\">--list-commands</span></tt></td>\n<td>List the commands that the host exposes to its guests.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-e</span></tt>, <tt><span class=\"pre\">--execute=COMMAND</span></tt></td>\n<td>Execute the given command on the KVM/QEMU host. The standard output stream\nof the command on the host is intercepted and copied to the standard output\nstream on the guest. If the command exits with a nonzero status code the\nnegotiator-guest program will also exit with a nonzero status code.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-d</span></tt>, <tt><span class=\"pre\">--daemon</span></tt></td>\n<td>Start the guest daemon. When using this command line option the\n\u201cnegotiator-guest\u201d program never returns (unless an unexpected error\ncondition occurs).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-t</span></tt>, <tt><span class=\"pre\">--timeout=SECONDS</span></tt></td>\n<td>Set the number of seconds before a remote call without a response times\nout. A value of zero disables the timeout (in this case the command can\nhang indefinitely). The default is 10 seconds.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-c</span></tt>, <tt><span class=\"pre\">--character-device=PATH</span></tt></td>\n<td>By default the appropriate character device is automatically selected based\non /sys/class/virtio-ports/*/name. If the automatic selection doesn\u2019t work,\nyou can set the absolute pathname of the character device that\u2019s used to\ncommunicate with the negotiator-host daemon running on the KVM/QEMU host.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-v</span></tt>, <tt><span class=\"pre\">--verbose</span></tt></td>\n<td>Increase logging verbosity (can be repeated).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-q</span></tt>, <tt><span class=\"pre\">--quiet</span></tt></td>\n<td>Decrease logging verbosity (can be repeated).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-h</span></tt>, <tt><span class=\"pre\">--help</span></tt></td>\n<td>Show this message and exit.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"debugging\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Debugging</a></h2>\n<p>This section contains hints about what to do when things don\u2019t work as\nexpected.</p>\n<div id=\"id3\">\n<ul>\n<li><a href=\"#broken-channels-on-kvm-qemu-hosts\" id=\"id23\" rel=\"nofollow\">Broken channels on KVM/QEMU hosts</a></li>\n<li><a href=\"#character-device-detection-fails\" id=\"id24\" rel=\"nofollow\">Character device detection fails</a></li>\n</ul>\n</div>\n<div id=\"broken-channels-on-kvm-qemu-hosts\">\n<h3><a href=\"#id23\" rel=\"nofollow\">Broken channels on KVM/QEMU hosts</a></h3>\n<p>Whether you want to get the official QEMU guest agent or the Negotiator project\nrunning, you will need a working bidirectional channel. I\u2019m testing Negotiator\non an Ubuntu 14.04 KVM/QEMU host and I needed several changes to get things\nworking properly:</p>\n<pre>$ <span class=\"nv\">CHANNELS_DIRECTORY</span><span class=\"o\">=</span>/var/lib/libvirt/qemu/channel/target\n$ sudo mkdir -p <span class=\"nv\">$CHANNELS_DIRECTORY</span>\n$ sudo chown libvirt-qemu:kvm <span class=\"nv\">$CHANNELS_DIRECTORY</span>\n</pre>\n<p>The above should be done by the KVM/QEMU system packages if you ask me, but\nanyway. On top of this if you are running Ubuntu with AppArmor enabled (the\ndefault) you may need to apply the following patch:</p>\n<pre>$ diff -u /etc/apparmor.d/abstractions/libvirt-qemu.orig /etc/apparmor.d/abstractions/libvirt-qemu\n--- /etc/apparmor.d/abstractions/libvirt-qemu.orig      <span class=\"m\">2015</span>-09-19 <span class=\"m\">12</span>:46:54.316593334 +0200\n+++ /etc/apparmor.d/abstractions/libvirt-qemu   <span class=\"m\">2015</span>-09-24 <span class=\"m\">14</span>:43:43.642064576 +0200\n@@ -49,6 +49,9 @@\n   /run/shm/ r,\n   owner /run/shm/spice.* rw,\n\n+  <span class=\"c1\"># Local modification to enable the QEMU guest agent.\n</span>+  owner /var/lib/libvirt/qemu/channel/target/* rw,\n+\n   <span class=\"c1\"># 'kill' is not required for sound and is a security risk. Do not enable\n</span>   <span class=\"c1\"># unless you absolutely need it.\n</span>   deny capability kill,\n</pre>\n<p>Again this should just be part of the KVM/QEMU system packages, but whatever.\nThe Negotiator project is playing with new-ish functionality so I pretty much\nknow to expect sharp edges :-)</p>\n</div>\n<div id=\"character-device-detection-fails\">\n<h3><a href=\"#id24\" rel=\"nofollow\">Character device detection fails</a></h3>\n<p>When the <tt><span class=\"pre\">negotiator-guest</span></tt> program fails to detect the correct character\ndevices it will complain loudly and point you here. Here are some of things\nI\u2019ve run into that can cause this:</p>\n<ul>\n<li>The virtual channel(s) have not been correctly configured or the correct\nconfiguration hasn\u2019t been applied yet. Please carefully follow the\ninstructions in the <em>Getting started</em> section above.</li>\n<li>The kernel module <tt>virtio_console</tt> is not loaded because it is not\navailable in your kernel. You can check by using the <tt>lsmod</tt> command. If\nthe module is not loaded you\u2019ll need to install and boot to a kernel that\ndoes have the module.</li>\n</ul>\n</div>\n</div>\n<div id=\"why-another-guest-agent\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Why another guest agent?</a></h2>\n<p>The QEMU project provides an <a href=\"http://wiki.libvirt.org/page/Qemu_guest_agent\" rel=\"nofollow\">official guest agent</a> and this agent is very\nuseful to increase integration between QEMU hosts and guests. However the\nofficial QEMU guest agent has two notable shortcomings (for me at least):</p>\n<dl>\n<dt><strong>Extensibility</strong></dt>\n<dd>The official QEMU guest agent has some generic mechanisms like being able to\nwrite files inside guests, but this is a far cry from a generic, extensible\narchitecture. Ideally given the host and guest\u2019s permission we should be able\nto transfer arbitrary data and execute user defined logic on both sides.</dd>\n<dt><strong>Platform support</strong></dt>\n<dd>Despite considerable effort I haven\u2019t been able to get a recent version of\nthe QEMU guest agent running on older Linux distributions (e.g. Ubuntu Linux\n10.04). Older versions of the guest agent can be succesfully compiled for\nsuch distributions but don\u2019t support the features I require. By creating my\nown guest agent I have more control over platform support (given the\nprimitives required for communication).</dd>\n</dl>\n<p>Note that my project in no way tries to replace the official QEMU guest agent.\nFor example I have no intention of implementing freezing and thawing of file\nsystems because the official agent already does that just fine :-). In other\nwords the two projects share a lot of ideas but have very different goals.</p>\n</div>\n<div id=\"how-does-it-work\">\n<h2><a href=\"#id16\" rel=\"nofollow\">How does it work?</a></h2>\n<p>The scriptable guest agent infrastructure uses <a href=\"http://www.linux-kvm.org/page/VMchannel_Requirements\" rel=\"nofollow\">the same mechanism</a> that the\nofficial QEMU guest agent does:</p>\n<ul>\n<li>Inside the guest special character devices are created that allow reading and\nwriting. These character devices are <tt><span class=\"pre\">/dev/vport[0-9]p[0-9]</span></tt>.</li>\n<li>On the host UNIX domain sockets are created that are connected to the\ncharacter devices inside the guest. On Ubuntu Linux KVM/QEMU hosts,\nthese UNIX domain sockets are created in the directory\n<tt>/var/lib/libvirt/qemu/channel/target</tt>.</li>\n</ul>\n</div>\n<div id=\"contact\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Contact</a></h2>\n<p>The latest version of <cite>negotiator</cite> is available on <a href=\"https://pypi.python.org/pypi/negotiator-host\" rel=\"nofollow\">PyPI</a> and <a href=\"https://github.com/xolox/python-negotiator\" rel=\"nofollow\">GitHub</a>. You can\nfind the documentation on <a href=\"http://negotiator.readthedocs.org/en/latest/\" rel=\"nofollow\">Read The Docs</a>. For bug reports please create an\nissue on <a href=\"https://github.com/xolox/python-negotiator\" rel=\"nofollow\">GitHub</a>. If you have questions, suggestions, etc. feel free to send me\nan e-mail at <a href=\"mailto:peter%40peterodding.com\">peter<span>@</span>peterodding<span>.</span>com</a>.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id18\" rel=\"nofollow\">License</a></h2>\n<p>This software is licensed under the <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT license</a>.</p>\n<p>\u00a9 2019 Peter Odding.</p>\n</div>\n\n          </div>"}, "last_serial": 6279707, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "afbb4db34ecab34f83ba82866d7246e9", "sha256": "77a83d45ff8f129e6495cfb13989fecda08823e72f1eb5ad86d9b48535c454db"}, "downloads": -1, "filename": "negotiator-guest-0.1.tar.gz", "has_sig": false, "md5_digest": "afbb4db34ecab34f83ba82866d7246e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7567, "upload_time": "2014-09-22T01:15:40", "upload_time_iso_8601": "2014-09-22T01:15:40.174298Z", "url": "https://files.pythonhosted.org/packages/17/ad/164065857714e3f95f58810e64acbdfa83d236e1a2f9217cce1e9156cf96/negotiator-guest-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "f18d48fb455373e66b134e473c88bdb2", "sha256": "cb22c5aa01c337606d241387758292f3cb74bddb7e65f732f7464afa63edaede"}, "downloads": -1, "filename": "negotiator_guest-0.10-py2-none-any.whl", "has_sig": false, "md5_digest": "f18d48fb455373e66b134e473c88bdb2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12326, "upload_time": "2019-03-03T21:53:01", "upload_time_iso_8601": "2019-03-03T21:53:01.001247Z", "url": "https://files.pythonhosted.org/packages/07/40/994b8dd872b094570cf90e410a45ff6ae856a86df03ed1a9e9dfd636ec2b/negotiator_guest-0.10-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c87b73ff8266bb40099088cdb22a6f21", "sha256": "b04a55da9ba47fc233e76e31a674c525bc5cb034b8e813140e8dbf6133f6b786"}, "downloads": -1, "filename": "negotiator-guest-0.10.tar.gz", "has_sig": false, "md5_digest": "c87b73ff8266bb40099088cdb22a6f21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13635, "upload_time": "2019-03-03T21:53:02", "upload_time_iso_8601": "2019-03-03T21:53:02.780052Z", "url": "https://files.pythonhosted.org/packages/d6/24/627cddc85b36f956d4ad2a200c4aaea48f8f7504256e3776b256bc7f7665/negotiator-guest-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "55f33e001a2eb244a66f811ac36e60f4", "sha256": "52bb64f15ab27998141f9606dfab2339f65d9f85cff2695ebc41248a9bd43218"}, "downloads": -1, "filename": "negotiator_guest-0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "55f33e001a2eb244a66f811ac36e60f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12328, "upload_time": "2019-10-11T12:28:13", "upload_time_iso_8601": "2019-10-11T12:28:13.900379Z", "url": "https://files.pythonhosted.org/packages/b1/9c/ed2b511c2e2a0cece3ade1e90c7259069096fbd0e2d3082116641785ae4f/negotiator_guest-0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "173d8d7cbddb99084be94c6080b657f1", "sha256": "9188f39acd09e6191b64d83b54ff97bf44c4e3c615848ab0377cfaf43d83cbeb"}, "downloads": -1, "filename": "negotiator-guest-0.11.tar.gz", "has_sig": false, "md5_digest": "173d8d7cbddb99084be94c6080b657f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13657, "upload_time": "2019-10-11T12:28:16", "upload_time_iso_8601": "2019-10-11T12:28:16.249586Z", "url": "https://files.pythonhosted.org/packages/f7/dc/9d5815888fb6e4b6848f122f7737fec1d672c5235e8cf596dae09edbceb8/negotiator-guest-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "23b9bf40580713e0d5466df1dc9d8722", "sha256": "e59c63c75d9d3a84c184977d914673ff70539fb051777f0317ac6b1b78512d4c"}, "downloads": -1, "filename": "negotiator_guest-0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "23b9bf40580713e0d5466df1dc9d8722", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12613, "upload_time": "2019-12-05T15:19:37", "upload_time_iso_8601": "2019-12-05T15:19:37.518794Z", "url": "https://files.pythonhosted.org/packages/38/45/ce9ab3ae4643907e8c9969800a407988b91384da9dc7ef155b18a6ed5e90/negotiator_guest-0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3004cc366ba137ea400e9e2f0de650c", "sha256": "6cb8e701d566c1af3ac65e8edad98e64dc70248894e8a788782569d5755f4690"}, "downloads": -1, "filename": "negotiator-guest-0.12.tar.gz", "has_sig": false, "md5_digest": "f3004cc366ba137ea400e9e2f0de650c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13910, "upload_time": "2019-12-05T15:19:39", "upload_time_iso_8601": "2019-12-05T15:19:39.605373Z", "url": "https://files.pythonhosted.org/packages/6d/6d/dd26d87c69f3e7adba4bceaef216763945a89c5191de4dfef2d412a515ca/negotiator-guest-0.12.tar.gz", "yanked": false}], "0.12.1": [{"comment_text": "", "digests": {"md5": "52704e19e944c222a3e30eca746c4ae2", "sha256": "cc5c7080f393ed12454bd16870b5c29a6c67ecc7abcd97f17ccd6642d81716eb"}, "downloads": -1, "filename": "negotiator_guest-0.12.1-py3-none-any.whl", "has_sig": false, "md5_digest": "52704e19e944c222a3e30eca746c4ae2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12654, "upload_time": "2019-12-09T10:35:14", "upload_time_iso_8601": "2019-12-09T10:35:14.373663Z", "url": "https://files.pythonhosted.org/packages/a0/76/3f6b965c2580c42bf38b9504812ae7dc681ffc9f878be6c4e0aa0a104239/negotiator_guest-0.12.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5166a4f798c7ee26c4e56f44c2e14c78", "sha256": "684becb01ec96b610b16771959d58295a8d294f1c11577b412c8e1e2e1519048"}, "downloads": -1, "filename": "negotiator-guest-0.12.1.tar.gz", "has_sig": false, "md5_digest": "5166a4f798c7ee26c4e56f44c2e14c78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13910, "upload_time": "2019-12-09T10:35:15", "upload_time_iso_8601": "2019-12-09T10:35:15.979007Z", "url": "https://files.pythonhosted.org/packages/05/eb/c8e8e1ea4e07b9747d8661e0fad76d443cd565c851bdc81fc46993bb928e/negotiator-guest-0.12.1.tar.gz", "yanked": false}], "0.12.2": [{"comment_text": "", "digests": {"md5": "533fd8a1dce48e0f8032f1546b86c2fd", "sha256": "186a7cdd33d0b867ef37056f81e6f303cfb4e84e9f9f71c86e47c7f4fb37e69a"}, "downloads": -1, "filename": "negotiator_guest-0.12.2-py3-none-any.whl", "has_sig": false, "md5_digest": "533fd8a1dce48e0f8032f1546b86c2fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12662, "upload_time": "2019-12-11T15:22:40", "upload_time_iso_8601": "2019-12-11T15:22:40.524847Z", "url": "https://files.pythonhosted.org/packages/91/49/534dbac052274752de7eee91ffec2ef17f8e8e25edbf4f1df9ce7a7956dd/negotiator_guest-0.12.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36dc1c30d5e238b88638fffdb11b4ff8", "sha256": "32187553db7fc2c2bbfbdf91c6e673988e87d0117e896c4d6e8485c5760d6524"}, "downloads": -1, "filename": "negotiator-guest-0.12.2.tar.gz", "has_sig": false, "md5_digest": "36dc1c30d5e238b88638fffdb11b4ff8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13920, "upload_time": "2019-12-11T15:22:42", "upload_time_iso_8601": "2019-12-11T15:22:42.021976Z", "url": "https://files.pythonhosted.org/packages/fe/a1/3d77020b8c5034f7ef65434d0510d1262840550155ce5f433c8189499326/negotiator-guest-0.12.2.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e747a20fa24c4e9ddb11b9ba819b7bea", "sha256": "2279bb234342ad482d1c4de2072be31dd8576c6d25c8cd3423ce8c7b5bd42a3f"}, "downloads": -1, "filename": "negotiator-guest-0.2.tar.gz", "has_sig": false, "md5_digest": "e747a20fa24c4e9ddb11b9ba819b7bea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4554, "upload_time": "2014-09-22T21:27:00", "upload_time_iso_8601": "2014-09-22T21:27:00.316289Z", "url": "https://files.pythonhosted.org/packages/f2/66/aa93d8325a3f3fd017e9276669c067dffdde98a006bcba870e89c41b15bc/negotiator-guest-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ecd5ebb543773f3a59fe8b66709fbac1", "sha256": "1928bc77428bb4b8fdf06d6c090a9c1ca31b82abf906c90aafec2566aa2c067d"}, "downloads": -1, "filename": "negotiator-guest-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ecd5ebb543773f3a59fe8b66709fbac1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7898, "upload_time": "2014-09-22T21:33:14", "upload_time_iso_8601": "2014-09-22T21:33:14.165214Z", "url": "https://files.pythonhosted.org/packages/b0/ff/edbd0753801467fd17c8979a469bce7e48d3fac22f45573cd137bf13e521/negotiator-guest-0.2.1.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "f32e50dfaabe41ce0a6794da8a27e5a1", "sha256": "b0c33027289d8587f47756a430be9407765a980312a71bb3eb158899951b6f46"}, "downloads": -1, "filename": "negotiator-guest-0.5.tar.gz", "has_sig": false, "md5_digest": "f32e50dfaabe41ce0a6794da8a27e5a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8730, "upload_time": "2014-09-24T13:29:17", "upload_time_iso_8601": "2014-09-24T13:29:17.559972Z", "url": "https://files.pythonhosted.org/packages/04/3d/cdc2f76d51f63da63e947a9f9fd1cc2a2587360c273eb209d048d50a1106/negotiator-guest-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "ea030933999c762a996484a6bedd8eb7", "sha256": "8d3399f1ca7bb31bdffc917c09d67285ccb3c85fb18bbb44f50a3c27a762d08d"}, "downloads": -1, "filename": "negotiator-guest-0.5.1.tar.gz", "has_sig": false, "md5_digest": "ea030933999c762a996484a6bedd8eb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9563, "upload_time": "2014-09-24T17:47:21", "upload_time_iso_8601": "2014-09-24T17:47:21.492844Z", "url": "https://files.pythonhosted.org/packages/e5/48/d68bd898b258f6f7e0f86c903ed938889e46ffde9eeef7f4402acd4999fd/negotiator-guest-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "a57f67093d0c5e32dfe43c92472f559e", "sha256": "1cfb58f8ae9787b1336ff6f98ecd99cf5f133ddc2fb80e0705f6ee607f4c6eb3"}, "downloads": -1, "filename": "negotiator-guest-0.5.2.tar.gz", "has_sig": false, "md5_digest": "a57f67093d0c5e32dfe43c92472f559e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9736, "upload_time": "2014-09-24T18:38:09", "upload_time_iso_8601": "2014-09-24T18:38:09.747175Z", "url": "https://files.pythonhosted.org/packages/14/fc/b1d077f49683a1f503ba92002b1b61630feb619f5e155d4338379c7224e3/negotiator-guest-0.5.2.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "d7b832532ab9f5e0f32508e42ec9ff9f", "sha256": "e027968b6204503556c4413d92b657133417e477b7aaf677952e15be4671f047"}, "downloads": -1, "filename": "negotiator-guest-0.6.tar.gz", "has_sig": false, "md5_digest": "d7b832532ab9f5e0f32508e42ec9ff9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10918, "upload_time": "2014-09-26T04:02:30", "upload_time_iso_8601": "2014-09-26T04:02:30.310630Z", "url": "https://files.pythonhosted.org/packages/83/91/029b9fef208a22e736d33f41f357779b3d16c63faeacd77293dc8ab0c645/negotiator-guest-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "d42d877913246d15b2381d2c2ddc4eb4", "sha256": "8a36641f8d8062fbf58520c4796d83ef3b29b5264a62c6be20225e560f467de1"}, "downloads": -1, "filename": "negotiator-guest-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d42d877913246d15b2381d2c2ddc4eb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10923, "upload_time": "2014-09-28T21:44:32", "upload_time_iso_8601": "2014-09-28T21:44:32.320206Z", "url": "https://files.pythonhosted.org/packages/e9/99/4d777074997725ee81e5ad3e93b12713a2a827231bb3c895682a831047f5/negotiator-guest-0.6.1.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "a02e0c6910f8abe3be6aa37bf4d26ad0", "sha256": "128e1fa11cf5158932a72998356a5abf38da281de5b34cae8cd8877bf5672a7f"}, "downloads": -1, "filename": "negotiator-guest-0.7.tar.gz", "has_sig": false, "md5_digest": "a02e0c6910f8abe3be6aa37bf4d26ad0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11061, "upload_time": "2014-10-23T23:00:08", "upload_time_iso_8601": "2014-10-23T23:00:08.449701Z", "url": "https://files.pythonhosted.org/packages/c5/d2/cc79425d15bf7879b220b2b6f107d25369c3db9b54ef83a0fd30b17611cc/negotiator-guest-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "72019ddd006001d94c686b878aedd688", "sha256": "ef7904f9248acdc8bb53daa6e44c331744f0f77a5a93a0434bfe61c6711c6a5a"}, "downloads": -1, "filename": "negotiator-guest-0.8.tar.gz", "has_sig": false, "md5_digest": "72019ddd006001d94c686b878aedd688", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11398, "upload_time": "2014-11-01T04:01:58", "upload_time_iso_8601": "2014-11-01T04:01:58.073830Z", "url": "https://files.pythonhosted.org/packages/a8/e8/2fcbd74fa1c7f783de53dfa7a8ee06b46e1a4c3d2fd04923f19ee303d0d5/negotiator-guest-0.8.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "2ff9bd765762e5e81e43f94d75a1ee41", "sha256": "fc186b5b7005e52afa52550f1a1c8c7ffe45327cb8519242c9cf3c76646a646c"}, "downloads": -1, "filename": "negotiator-guest-0.8.2.tar.gz", "has_sig": false, "md5_digest": "2ff9bd765762e5e81e43f94d75a1ee41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11638, "upload_time": "2015-10-29T20:33:51", "upload_time_iso_8601": "2015-10-29T20:33:51.277688Z", "url": "https://files.pythonhosted.org/packages/b5/ca/28bc44eb07cb9c434d34f6704a291661495c5218c700999ffee25d06b929/negotiator-guest-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "9f6d1a40e82d3d3881dc094f53207b28", "sha256": "fdfd710db8db680c2168cf782fc4ef3042b08d2c61506f77f1852cd9e2070ba4"}, "downloads": -1, "filename": "negotiator-guest-0.8.3.tar.gz", "has_sig": false, "md5_digest": "9f6d1a40e82d3d3881dc094f53207b28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11627, "upload_time": "2016-04-07T22:57:24", "upload_time_iso_8601": "2016-04-07T22:57:24.869545Z", "url": "https://files.pythonhosted.org/packages/a7/0d/77a28b1e70c14ebcba4d27a2fa8e0895d7e8e499b98ae1469ceb6bb3f8d5/negotiator-guest-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "3d8e891e7f98a8ea139cd331fc3f03ca", "sha256": "ab4641875617b732554306bba36b975ac35992e635f28f5b98af4d56d39474ed"}, "downloads": -1, "filename": "negotiator-guest-0.8.4.tar.gz", "has_sig": false, "md5_digest": "3d8e891e7f98a8ea139cd331fc3f03ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11621, "upload_time": "2016-04-07T23:26:21", "upload_time_iso_8601": "2016-04-07T23:26:21.710079Z", "url": "https://files.pythonhosted.org/packages/da/4e/9cc77c444a33e1aff5544499d5ce8a465b43b4faaccafd475b52e5b6e805/negotiator-guest-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "715134d4f082ac954d60e016b7a5489d", "sha256": "eb300f1f3ef2d12edfbdd1d02c535df1b7a9a058d4ba36756a74e2aa7ed570f3"}, "downloads": -1, "filename": "negotiator_guest-0.8.5-py2-none-any.whl", "has_sig": false, "md5_digest": "715134d4f082ac954d60e016b7a5489d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12365, "upload_time": "2019-02-23T00:12:01", "upload_time_iso_8601": "2019-02-23T00:12:01.872034Z", "url": "https://files.pythonhosted.org/packages/b5/8c/3a86d5d2aa5a5bd9f563d63e4166c7dc63bd337672ff62fffeb890b03a72/negotiator_guest-0.8.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b62796bf6f3cab4486f26f0b4af28991", "sha256": "daef269062b3f305380cb82bf69afacb8fe95f3371a867981625d92745f8bd40"}, "downloads": -1, "filename": "negotiator-guest-0.8.5.tar.gz", "has_sig": false, "md5_digest": "b62796bf6f3cab4486f26f0b4af28991", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13633, "upload_time": "2019-02-23T00:12:03", "upload_time_iso_8601": "2019-02-23T00:12:03.519535Z", "url": "https://files.pythonhosted.org/packages/82/5d/8e759ee2443d2f7dbec6eaa771ba090c0c21ba2ec5a9829e6b47e2434e92/negotiator-guest-0.8.5.tar.gz", "yanked": false}], "0.8.6": [{"comment_text": "", "digests": {"md5": "5062e9c22105525f496d4ee7f1299f84", "sha256": "2688ff5a7093d059d3f330a21a895f430aa35876bae090bae878c986c4acde7b"}, "downloads": -1, "filename": "negotiator_guest-0.8.6-py2-none-any.whl", "has_sig": false, "md5_digest": "5062e9c22105525f496d4ee7f1299f84", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12364, "upload_time": "2019-02-25T09:57:21", "upload_time_iso_8601": "2019-02-25T09:57:21.738806Z", "url": "https://files.pythonhosted.org/packages/e9/3c/ab5e51163f37957daadc9ae0f08dc315cd895ab28bbc2f76179f0ab735b7/negotiator_guest-0.8.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "614ba5a020924b9afbf624894d293fa0", "sha256": "3491226a5c3f4aaa8bdc881d468ba3e00c613a16588bdea3e71897d1b1abaf51"}, "downloads": -1, "filename": "negotiator-guest-0.8.6.tar.gz", "has_sig": false, "md5_digest": "614ba5a020924b9afbf624894d293fa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13634, "upload_time": "2019-02-25T09:57:23", "upload_time_iso_8601": "2019-02-25T09:57:23.214778Z", "url": "https://files.pythonhosted.org/packages/13/b9/8a85470a3556bb02ed881b2a0e5fe87ef17c5a67be18f34c9ebb98404752/negotiator-guest-0.8.6.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "593b6d62fcfcbb07cea780a44dc8dabf", "sha256": "caa8a4a290e8b32e15a0bfd59df8ade8c01e941fb94fd6d7828418276f49bc01"}, "downloads": -1, "filename": "negotiator_guest-0.9-py2-none-any.whl", "has_sig": false, "md5_digest": "593b6d62fcfcbb07cea780a44dc8dabf", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12332, "upload_time": "2019-03-03T02:02:56", "upload_time_iso_8601": "2019-03-03T02:02:56.485458Z", "url": "https://files.pythonhosted.org/packages/6c/0f/2459a92f6c871ddb3651ec40b71a5297872a50d939bbebf8cad495b193a1/negotiator_guest-0.9-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c7339cc3339c99f9892fc710f5c0fe9", "sha256": "da04f27604685f78c798838397963efba3e02e1bd9ac1bf9a2a3ad647330b47c"}, "downloads": -1, "filename": "negotiator-guest-0.9.tar.gz", "has_sig": false, "md5_digest": "9c7339cc3339c99f9892fc710f5c0fe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13646, "upload_time": "2019-03-03T02:02:58", "upload_time_iso_8601": "2019-03-03T02:02:58.016087Z", "url": "https://files.pythonhosted.org/packages/2e/70/ad00c02023c77ca13fcc58572485ea8e0d58f77357d9c07c05bc29258699/negotiator-guest-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "533fd8a1dce48e0f8032f1546b86c2fd", "sha256": "186a7cdd33d0b867ef37056f81e6f303cfb4e84e9f9f71c86e47c7f4fb37e69a"}, "downloads": -1, "filename": "negotiator_guest-0.12.2-py3-none-any.whl", "has_sig": false, "md5_digest": "533fd8a1dce48e0f8032f1546b86c2fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12662, "upload_time": "2019-12-11T15:22:40", "upload_time_iso_8601": "2019-12-11T15:22:40.524847Z", "url": "https://files.pythonhosted.org/packages/91/49/534dbac052274752de7eee91ffec2ef17f8e8e25edbf4f1df9ce7a7956dd/negotiator_guest-0.12.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36dc1c30d5e238b88638fffdb11b4ff8", "sha256": "32187553db7fc2c2bbfbdf91c6e673988e87d0117e896c4d6e8485c5760d6524"}, "downloads": -1, "filename": "negotiator-guest-0.12.2.tar.gz", "has_sig": false, "md5_digest": "36dc1c30d5e238b88638fffdb11b4ff8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13920, "upload_time": "2019-12-11T15:22:42", "upload_time_iso_8601": "2019-12-11T15:22:42.021976Z", "url": "https://files.pythonhosted.org/packages/fe/a1/3d77020b8c5034f7ef65434d0510d1262840550155ce5f433c8189499326/negotiator-guest-0.12.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:34 2020"}