{"info": {"author": "Peng Xiong", "author_email": "xiongpengnus@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyAtom\n\nPyAtom is an open-source Python Algebraic Toolbox for Optimization Modeling. It is consistent with the NumPy package in terms of N-dimensional array operations, and relies on the commercial solver Gurobi to solve the formatted models. So far, the toolbox is capable of modeling robust optimization problems formatted as second-order cone programs.\n\n## Examples\n\n### Linear Programming\nWe are using a very simple linear program to demonstrate the general procedure of running <code>PyAtom</code> for modeling optimization problems.\n\n\n```python\nimport pyatom.lp as lp              # Import the LP modeling module from PyAtom\nimport pyatom.grb_solver as grb     # Import the solver interface for Gurobi\n\nmodel = lp.Model()                  # Create an LP model\nx = model.dvar()                    # Define a decision variable x\ny = model.dvar()                    # Define a decision variable y\n\nmodel.max(3*x + 4*y)                # Maximize the objective function\nmodel.st(2.5*x + y <= 20)           # Define constriants\nmodel.st(3*x + 3*y <= 30)\nmodel.st(x + 2*y <= 16)\nmodel.st(x <= 3)\nmodel.st(abs(y) <= 2)\n\nmodel.solve(grb)                    # Solve the model by Gurobi\n```\n\n    Being solved by Gurobi...\n    Solution status: 2\n    Running time: 0.0002s\n\n\nThe optimal objective value and optimal solutions can be retrieved by the <code>get()</code> method of the <code>model</code> object or the variable object.\n\n\n```python\nprint(model.get())\nprint(x.get())\nprint(y.get())\n```\n\n    17.0\n    [3.]\n    [2.]\n\n\n\n```python\nmodel.do_math()\n```\n\n\n\n\n    Linear program object:\n    =============================================\n    Number of variables:          3\n    Continuous/binaries/integers: 3/0/0\n    ---------------------------------------------\n    Number of linear constraints: 6\n    Inequalities/equalities:      6/0\n    Number of coefficients:       11\n\n\n\nPlease note that the optimal solutions of the decision variables are given as <code>array</code> type objects. To facilitate debugging, the <code>PyAtom</code> package could generate a table of constraint information via running the command <code>model.do_math().showlc()</code>.  \n\n\n```python\nmodel.do_math().showlc()\n```\n\n\n\n <b> </b> |<b>x1</b>|<b>x2</b>|<b>x3</b>|<b>sense</b>|<b>constants</b>\n---:|------:|----------:|---------:|----------:|---------:\n<b>LC1</b> | 0.0 | 2.5 | 1.0 | <= | 20.0\n<b>LC2</b> | 0.0 | 3.0 | 3.0 | <= | 30.0\n<b>LC3</b> | 0.0 | 1.0 | 2.0 | <= | 16.0\n<b>LC4</b> | -1.0 | 3.0 | -4.0 | <= | 0.0\n<b>LC5</b> | 0.0 | 0.0 | 1.0 | <= | 2.0\n<b>LC6</b> | 0.0 | 0.0 | -1.0 | <= | 2.0\n\n\n\n\n### Mean-variance portfolio optimization\nIn this example, we formulate the mean-variance portfolio optimization problem as a second-order cone program. Details of this model can be found from the paper [Price of Robustness](https://www.robustopt.com/references/Price%20of%20Robustness.pdf).\n\n\n```python\nimport pyatom as at                         # Import the PyAtom package\nimport pyatom.socp as cp                    # Import the SOCP modeling module from PyAtom\nimport pyatom.grb_solver as grb             # Import the solver interface for Gurobi\nimport numpy as np\n\nn = 150                                     # Number of stocks\ni = np.arange(1, n+1)                   \np = 1.15 + 0.05/n*i                         # Mean values of stock returns\nsig = 0.05/450 * (2*i*n*(n+1))**0.5         # Standard devaition of stock returns\nphi = 5                                     # Constant phi\n\nmodel = cp.Model()                          # Create an SOCP model\nx = model.dvar(n)                           # Define decision variables as an array with length n\n\nmodel.max(p@x - phi*at.sumsqr(sig * x))     # Define the objective function\nmodel.st(sum(x) == 1)                       # Define the constriants\nmodel.st(x >= 0)\n\nmodel.solve(grb)                            # Solve the model by Gurobi\n```\n\n    Being solved by Gurobi...\n    Solution status: 2\n    Running time: 0.0024s\n\n\nThe solution in terms of the optimal stock allocation is presented below.\n\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.plot(i, x.get())\nplt.xlabel('stocks')\nplt.ylabel('x')\nplt.show()\n```\n\n\n<img src='https://github.com/XiongPengNUS/pyatom/blob/master/output_11_0.png?raw=true' width=500pt>\n\n\n### Robust portfolio optimization\nThe robust portfolio optimization model introduced in the paper [Price of Robustness](https://www.robustopt.com/references/Price%20of%20Robustness.pdf) can also be formulated by the <code>PyAtom</code> package.\n\n\n```python\nimport pyatom.ro as ro                              # Import the robust optimization module from PyAtom\n\nn = 150                                             # Number of stocks\ni = np.arange(1, n+1)\np = 1.15 + 0.05/n*i                                 # Mean values of stock returns\nsig = 0.05/450 * (2*i*n*(n+1))**0.5                 # Maximum deviation of stock returns\nGamma = 3                                           # Budget of uncertainty\n\nmodel = ro.Model()                                  # Create a robust optimization model\nx = model.dvar(n)                                   # Define decision variables x as an array\nz = model.rvar(n)                                   # Define random variables z as an array\n\nmodel.maxmin((p + sig*z) @ x,                       # Define the max-min objective function\n             abs(z)<=1, at.norm(z, 1) <= Gamma)     # Uncertainty set of the model\nmodel.st(sum(x) <= 1)                               # Define constraints\nmodel.st(x >= 0)\n\nmodel.solve(grb)                                    # Solve the model by Gurobi\n```\n\n    Being solved by Gurobi...\n    Solution status: 2\n    Running time: 0.0029s\n\n\nThe solution as the stock allocation is given below.\n\n\n```python\nplt.plot(i, x.get())\nplt.xlabel('stocks')\nplt.ylabel('x')\nplt.show()\n```\n\n\n<img src='https://github.com/XiongPengNUS/pyatom/blob/master/output_15_0.png?raw=true' width=500pt>\n\n\n### A Knapsack problem: robust optimization v.s. robustness optimization\n\nIn this example, we use the <code>PyAtom</code> package to implement the robust and robustness optimization models described in the paper [The Dao of Robustness](http://www.optimization-online.org/DB_FILE/2019/11/7456.pdf)\n\n\n```python\nimport pyatom.ro as ro\nimport pyatom.grb_solver as grb\nimport pyatom as at\nimport numpy as np\nimport numpy.random as rd\nimport matplotlib.pyplot as plt\n\nN = 50\nb = 2000\n\nc = 2*rd.randint(low=5, high=10, size=N)        # Profit coefficients of\nw_hat = 2*rd.randint(low=10, high=41, size=N)   # Baseline values of the weights\n\ndelta = 0.2*w_hat                               # Maximum deviations\n```\n\nThe function for the robust optimization method is given below.\n\n\n```python\ndef robust(r):\n    \"\"\"\n    The function robust implements the robust optmization model, given the budget of\n    uncertainty r\n    \"\"\"\n\n    model = ro.Model('robust')\n    x = model.dvar(N, vtype='B')        # Define decision variables\n    z = model.rvar(N)                   # Define random variables\n\n    model.max(c @ x)\n    model.st(((w_hat + z*delta) @ x <= b).forall(abs(z) <= 1, at.norm(z, 1) <= r))\n\n    model.solve(grb, display=False)\n\n    return model.get(), x.get()         # Return objective value and the optimal solution\n```\n\nThe function for the robustness optimization model.\n\n\n```python\ndef robustness(target):\n\n    model = ro.Model('robustness')\n\n    x = model.dvar(N, vtype='B')\n    k = model.dvar()\n    z = model.rvar(N)\n    u = model.rvar(N)\n\n    model.min(k)\n    model.st(c @ x >= target)\n    model.st(((w_hat + z*delta) @ x - b <= k*u.sum()).forall(abs(z) <= u, u <= 1))\n    model.st(k >= 0)\n\n    model.solve(grb, display=False)\n\n    return model.get(), x.get()\n```\n\nThe following function <code>sim</code> is for calculating the probability of violation via simulations.\n\n\n```python\ndef sim(x_sol, zs):\n    \"\"\"\n    The function sim is for calculating the probability of violation via simulations.\n        x_sol: solution of the Knapsack problem\n        zs: random sample of the random variable z\n    \"\"\"\n\n    ws = w_hat + zs*delta\n\n    return (ws @ x_sol > b).mean()\n```\n\nBy using functions above we then run the robust and robustness optimization models.\n\n\n```python\nstep = 0.1\nrs = np.arange(1, 5+step, step)                 # All budgets of uncertainty\nnum_samp = 20000\nzs = 1-2*rd.rand(num_samp, N)                   # Random samples for z\n\n\"\"\"Robust optimization\"\"\"\noutputs_rb = [robust(r) for r in rs]            # Robust optimization models\ntgts = [output[0] for output in outputs_rb]     # Objective values as the targets\npv_rb = [sim(output[1], zs)\n         for output in outputs_rb]              # Prob. violation for robust optimization\n\n\"\"\"Robustness optimization\"\"\"\noutputs_rbn = [robustness(tgt)\n               for tgt in tgts]                 # Robustness optimization models\npv_rbn = [sim(output[1], zs)\n          for output in outputs_rbn]            # Objective values as the targets\n```\n\nThe results are visualized as follows.\n\n\n```python\nplt.plot(rs, pv_rb, marker='o', markersize=5, c='b',\n         label='Robust Optimization')\nplt.plot(rs, pv_rbn, c='r',\n         label='Robustness Optimization')\n\nplt.legend()\nplt.xlabel('Parameter r in robust optimization')\nplt.ylabel('Prob. violation')\nplt.show()\n\nplt.scatter(tgts, pv_rb, c='b', alpha=0.3,\n            label='Robust Optimization')\nplt.scatter(tgts, pv_rbn, c='r', alpha=0.3,\n            label='Robustness Optimization')\n\nplt.legend()\nplt.xlabel(r'Target return $\\tau$')\nplt.ylabel('Prob. violation')\nplt.show()\n```\n\n\n<img src='https://github.com/XiongPengNUS/pyatom/blob/master/output_27_0.png?raw=true' width=500pt>\n\n\n\n<img src='https://github.com/XiongPengNUS/pyatom/blob/master/output_27_1.png?raw=true' width=500pt>\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/XiongPengNUS/pyatom", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyatom", "package_url": "https://pypi.org/project/pyatom/", "platform": "", "project_url": "https://pypi.org/project/pyatom/", "project_urls": {"Homepage": "https://github.com/XiongPengNUS/pyatom"}, "release_url": "https://pypi.org/project/pyatom/0.0.7/", "requires_dist": null, "requires_python": "", "summary": "Python Algebraic Toolbox for Optimization Modeling", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyAtom</h1>\n<p>PyAtom is an open-source Python Algebraic Toolbox for Optimization Modeling. It is consistent with the NumPy package in terms of N-dimensional array operations, and relies on the commercial solver Gurobi to solve the formatted models. So far, the toolbox is capable of modeling robust optimization problems formatted as second-order cone programs.</p>\n<h2>Examples</h2>\n<h3>Linear Programming</h3>\n<p>We are using a very simple linear program to demonstrate the general procedure of running <code>PyAtom</code> for modeling optimization problems.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyatom.lp</span> <span class=\"k\">as</span> <span class=\"nn\">lp</span>              <span class=\"c1\"># Import the LP modeling module from PyAtom</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyatom.grb_solver</span> <span class=\"k\">as</span> <span class=\"nn\">grb</span>     <span class=\"c1\"># Import the solver interface for Gurobi</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">lp</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">()</span>                  <span class=\"c1\"># Create an LP model</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">dvar</span><span class=\"p\">()</span>                    <span class=\"c1\"># Define a decision variable x</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">dvar</span><span class=\"p\">()</span>                    <span class=\"c1\"># Define a decision variable y</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">)</span>                <span class=\"c1\"># Maximize the objective function</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"mf\">2.5</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">)</span>           <span class=\"c1\"># Define constriants</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">grb</span><span class=\"p\">)</span>                    <span class=\"c1\"># Solve the model by Gurobi</span>\n</pre>\n<pre><code>Being solved by Gurobi...\nSolution status: 2\nRunning time: 0.0002s\n</code></pre>\n<p>The optimal objective value and optimal solutions can be retrieved by the <code>get()</code> method of the <code>model</code> object or the variable object.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n</pre>\n<pre><code>17.0\n[3.]\n[2.]\n</code></pre>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">do_math</span><span class=\"p\">()</span>\n</pre>\n<pre><code>Linear program object:\n=============================================\nNumber of variables:          3\nContinuous/binaries/integers: 3/0/0\n---------------------------------------------\nNumber of linear constraints: 6\nInequalities/equalities:      6/0\nNumber of coefficients:       11\n</code></pre>\n<p>Please note that the optimal solutions of the decision variables are given as <code>array</code> type objects. To facilitate debugging, the <code>PyAtom</code> package could generate a table of constraint information via running the command <code>model.do_math().showlc()</code>.</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">do_math</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">showlc</span><span class=\"p\">()</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th align=\"right\"><b> </b></th>\n<th align=\"right\"><b>x1</b></th>\n<th align=\"right\"><b>x2</b></th>\n<th align=\"right\"><b>x3</b></th>\n<th align=\"right\"><b>sense</b></th>\n<th align=\"right\"><b>constants</b></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><b>LC1</b></td>\n<td align=\"right\">0.0</td>\n<td align=\"right\">2.5</td>\n<td align=\"right\">1.0</td>\n<td align=\"right\">&lt;=</td>\n<td align=\"right\">20.0</td>\n</tr>\n<tr>\n<td align=\"right\"><b>LC2</b></td>\n<td align=\"right\">0.0</td>\n<td align=\"right\">3.0</td>\n<td align=\"right\">3.0</td>\n<td align=\"right\">&lt;=</td>\n<td align=\"right\">30.0</td>\n</tr>\n<tr>\n<td align=\"right\"><b>LC3</b></td>\n<td align=\"right\">0.0</td>\n<td align=\"right\">1.0</td>\n<td align=\"right\">2.0</td>\n<td align=\"right\">&lt;=</td>\n<td align=\"right\">16.0</td>\n</tr>\n<tr>\n<td align=\"right\"><b>LC4</b></td>\n<td align=\"right\">-1.0</td>\n<td align=\"right\">3.0</td>\n<td align=\"right\">-4.0</td>\n<td align=\"right\">&lt;=</td>\n<td align=\"right\">0.0</td>\n</tr>\n<tr>\n<td align=\"right\"><b>LC5</b></td>\n<td align=\"right\">0.0</td>\n<td align=\"right\">0.0</td>\n<td align=\"right\">1.0</td>\n<td align=\"right\">&lt;=</td>\n<td align=\"right\">2.0</td>\n</tr>\n<tr>\n<td align=\"right\"><b>LC6</b></td>\n<td align=\"right\">0.0</td>\n<td align=\"right\">0.0</td>\n<td align=\"right\">-1.0</td>\n<td align=\"right\">&lt;=</td>\n<td align=\"right\">2.0</td>\n</tr></tbody></table>\n<h3>Mean-variance portfolio optimization</h3>\n<p>In this example, we formulate the mean-variance portfolio optimization problem as a second-order cone program. Details of this model can be found from the paper <a href=\"https://www.robustopt.com/references/Price%20of%20Robustness.pdf\" rel=\"nofollow\">Price of Robustness</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyatom</span> <span class=\"k\">as</span> <span class=\"nn\">at</span>                         <span class=\"c1\"># Import the PyAtom package</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyatom.socp</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>                    <span class=\"c1\"># Import the SOCP modeling module from PyAtom</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyatom.grb_solver</span> <span class=\"k\">as</span> <span class=\"nn\">grb</span>             <span class=\"c1\"># Import the solver interface for Gurobi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">150</span>                                     <span class=\"c1\"># Number of stocks</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>                   \n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mf\">1.15</span> <span class=\"o\">+</span> <span class=\"mf\">0.05</span><span class=\"o\">/</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">i</span>                         <span class=\"c1\"># Mean values of stock returns</span>\n<span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span><span class=\"o\">/</span><span class=\"mi\">450</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">**</span><span class=\"mf\">0.5</span>         <span class=\"c1\"># Standard devaition of stock returns</span>\n<span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>                                     <span class=\"c1\"># Constant phi</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">()</span>                          <span class=\"c1\"># Create an SOCP model</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">dvar</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>                           <span class=\"c1\"># Define decision variables as an array with length n</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"nd\">@x</span> <span class=\"o\">-</span> <span class=\"n\">phi</span><span class=\"o\">*</span><span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">sumsqr</span><span class=\"p\">(</span><span class=\"n\">sig</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">))</span>     <span class=\"c1\"># Define the objective function</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>                       <span class=\"c1\"># Define the constriants</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">grb</span><span class=\"p\">)</span>                            <span class=\"c1\"># Solve the model by Gurobi</span>\n</pre>\n<pre><code>Being solved by Gurobi...\nSolution status: 2\nRunning time: 0.0024s\n</code></pre>\n<p>The solution in terms of the optimal stock allocation is presented below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'stocks'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a594750e65910dc2201129d35d5cb2cb10f9c6c/68747470733a2f2f6769746875622e636f6d2f58696f6e6750656e674e55532f707961746f6d2f626c6f622f6d61737465722f6f75747075745f31315f302e706e673f7261773d74727565\" width=\"500pt\">\n<h3>Robust portfolio optimization</h3>\n<p>The robust portfolio optimization model introduced in the paper <a href=\"https://www.robustopt.com/references/Price%20of%20Robustness.pdf\" rel=\"nofollow\">Price of Robustness</a> can also be formulated by the <code>PyAtom</code> package.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyatom.ro</span> <span class=\"k\">as</span> <span class=\"nn\">ro</span>                              <span class=\"c1\"># Import the robust optimization module from PyAtom</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">150</span>                                             <span class=\"c1\"># Number of stocks</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mf\">1.15</span> <span class=\"o\">+</span> <span class=\"mf\">0.05</span><span class=\"o\">/</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">i</span>                                 <span class=\"c1\"># Mean values of stock returns</span>\n<span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span><span class=\"o\">/</span><span class=\"mi\">450</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">**</span><span class=\"mf\">0.5</span>                 <span class=\"c1\"># Maximum deviation of stock returns</span>\n<span class=\"n\">Gamma</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>                                           <span class=\"c1\"># Budget of uncertainty</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ro</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">()</span>                                  <span class=\"c1\"># Create a robust optimization model</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">dvar</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>                                   <span class=\"c1\"># Define decision variables x as an array</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">rvar</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>                                   <span class=\"c1\"># Define random variables z as an array</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">maxmin</span><span class=\"p\">((</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">sig</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">x</span><span class=\"p\">,</span>                       <span class=\"c1\"># Define the max-min objective function</span>\n             <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">&lt;=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">Gamma</span><span class=\"p\">)</span>     <span class=\"c1\"># Uncertainty set of the model</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>                               <span class=\"c1\"># Define constraints</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">grb</span><span class=\"p\">)</span>                                    <span class=\"c1\"># Solve the model by Gurobi</span>\n</pre>\n<pre><code>Being solved by Gurobi...\nSolution status: 2\nRunning time: 0.0029s\n</code></pre>\n<p>The solution as the stock allocation is given below.</p>\n<pre><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'stocks'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d77f6edd8f5dda278c70b042e5488d7de0ec670/68747470733a2f2f6769746875622e636f6d2f58696f6e6750656e674e55532f707961746f6d2f626c6f622f6d61737465722f6f75747075745f31355f302e706e673f7261773d74727565\" width=\"500pt\">\n<h3>A Knapsack problem: robust optimization v.s. robustness optimization</h3>\n<p>In this example, we use the <code>PyAtom</code> package to implement the robust and robustness optimization models described in the paper <a href=\"http://www.optimization-online.org/DB_FILE/2019/11/7456.pdf\" rel=\"nofollow\">The Dao of Robustness</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyatom.ro</span> <span class=\"k\">as</span> <span class=\"nn\">ro</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyatom.grb_solver</span> <span class=\"k\">as</span> <span class=\"nn\">grb</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyatom</span> <span class=\"k\">as</span> <span class=\"nn\">at</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy.random</span> <span class=\"k\">as</span> <span class=\"nn\">rd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">rd</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">)</span>        <span class=\"c1\"># Profit coefficients of</span>\n<span class=\"n\">w_hat</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">rd</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">)</span>   <span class=\"c1\"># Baseline values of the weights</span>\n\n<span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"o\">*</span><span class=\"n\">w_hat</span>                               <span class=\"c1\"># Maximum deviations</span>\n</pre>\n<p>The function for the robust optimization method is given below.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">robust</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    The function robust implements the robust optmization model, given the budget of</span>\n<span class=\"sd\">    uncertainty r</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ro</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"s1\">'robust'</span><span class=\"p\">)</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">dvar</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"s1\">'B'</span><span class=\"p\">)</span>        <span class=\"c1\"># Define decision variables</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">rvar</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>                   <span class=\"c1\"># Define random variables</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">@</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(((</span><span class=\"n\">w_hat</span> <span class=\"o\">+</span> <span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">delta</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">forall</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">))</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">grb</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>         <span class=\"c1\"># Return objective value and the optimal solution</span>\n</pre>\n<p>The function for the robustness optimization model.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">robustness</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">):</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ro</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"s1\">'robustness'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">dvar</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"s1\">'B'</span><span class=\"p\">)</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">dvar</span><span class=\"p\">()</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">rvar</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">rvar</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">@</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(((</span><span class=\"n\">w_hat</span> <span class=\"o\">+</span> <span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">delta</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">b</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">forall</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">u</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">st</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">grb</span><span class=\"p\">,</span> <span class=\"n\">display</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>The following function <code>sim</code> is for calculating the probability of violation via simulations.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">sim</span><span class=\"p\">(</span><span class=\"n\">x_sol</span><span class=\"p\">,</span> <span class=\"n\">zs</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    The function sim is for calculating the probability of violation via simulations.</span>\n<span class=\"sd\">        x_sol: solution of the Knapsack problem</span>\n<span class=\"sd\">        zs: random sample of the random variable z</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">w_hat</span> <span class=\"o\">+</span> <span class=\"n\">zs</span><span class=\"o\">*</span><span class=\"n\">delta</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ws</span> <span class=\"o\">@</span> <span class=\"n\">x_sol</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n</pre>\n<p>By using functions above we then run the robust and robustness optimization models.</p>\n<pre><span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"o\">+</span><span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">)</span>                 <span class=\"c1\"># All budgets of uncertainty</span>\n<span class=\"n\">num_samp</span> <span class=\"o\">=</span> <span class=\"mi\">20000</span>\n<span class=\"n\">zs</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">rd</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">num_samp</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>                   <span class=\"c1\"># Random samples for z</span>\n\n<span class=\"sd\">\"\"\"Robust optimization\"\"\"</span>\n<span class=\"n\">outputs_rb</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">robust</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">rs</span><span class=\"p\">]</span>            <span class=\"c1\"># Robust optimization models</span>\n<span class=\"n\">tgts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">output</span> <span class=\"ow\">in</span> <span class=\"n\">outputs_rb</span><span class=\"p\">]</span>     <span class=\"c1\"># Objective values as the targets</span>\n<span class=\"n\">pv_rb</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sim</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">zs</span><span class=\"p\">)</span>\n         <span class=\"k\">for</span> <span class=\"n\">output</span> <span class=\"ow\">in</span> <span class=\"n\">outputs_rb</span><span class=\"p\">]</span>              <span class=\"c1\"># Prob. violation for robust optimization</span>\n\n<span class=\"sd\">\"\"\"Robustness optimization\"\"\"</span>\n<span class=\"n\">outputs_rbn</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">robustness</span><span class=\"p\">(</span><span class=\"n\">tgt</span><span class=\"p\">)</span>\n               <span class=\"k\">for</span> <span class=\"n\">tgt</span> <span class=\"ow\">in</span> <span class=\"n\">tgts</span><span class=\"p\">]</span>                 <span class=\"c1\"># Robustness optimization models</span>\n<span class=\"n\">pv_rbn</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sim</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">zs</span><span class=\"p\">)</span>\n          <span class=\"k\">for</span> <span class=\"n\">output</span> <span class=\"ow\">in</span> <span class=\"n\">outputs_rbn</span><span class=\"p\">]</span>            <span class=\"c1\"># Objective values as the targets</span>\n</pre>\n<p>The results are visualized as follows.</p>\n<pre><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">pv_rb</span><span class=\"p\">,</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">'o'</span><span class=\"p\">,</span> <span class=\"n\">markersize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'b'</span><span class=\"p\">,</span>\n         <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Robust Optimization'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">pv_rbn</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">,</span>\n         <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Robustness Optimization'</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Parameter r in robust optimization'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Prob. violation'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">tgts</span><span class=\"p\">,</span> <span class=\"n\">pv_rb</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Robust Optimization'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">tgts</span><span class=\"p\">,</span> <span class=\"n\">pv_rbn</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Robustness Optimization'</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'Target return $\\tau$'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Prob. violation'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8998e9f8a7680fa100f10bff660f8e286260c342/68747470733a2f2f6769746875622e636f6d2f58696f6e6750656e674e55532f707961746f6d2f626c6f622f6d61737465722f6f75747075745f32375f302e706e673f7261773d74727565\" width=\"500pt\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e60c9d5fb7ea48352077ee80b8f093c3a925fac/68747470733a2f2f6769746875622e636f6d2f58696f6e6750656e674e55532f707961746f6d2f626c6f622f6d61737465722f6f75747075745f32375f312e706e673f7261773d74727565\" width=\"500pt\">\n\n          </div>"}, "last_serial": 7064872, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "b25500ad81a5f8166ebd68adefeaa1f2", "sha256": "f5a894de378c62eb72409b4f2eb61fa11483f1e804884f6bdaec2b3cb08d076c"}, "downloads": -1, "filename": "pyatom-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b25500ad81a5f8166ebd68adefeaa1f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10720, "upload_time": "2020-01-23T10:48:40", "upload_time_iso_8601": "2020-01-23T10:48:40.713680Z", "url": "https://files.pythonhosted.org/packages/54/1e/3050e73258789dfb77ea6ceaf8aaa42a9153aa65d5d772017957e8161ac7/pyatom-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c356aeee637791004a4f805bd2f77982", "sha256": "e1110dd5589a3b5a5cd813d234601ee986868b1e7c9f79c1c2749e086675f8c7"}, "downloads": -1, "filename": "pyatom-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c356aeee637791004a4f805bd2f77982", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8078, "upload_time": "2020-01-23T10:48:42", "upload_time_iso_8601": "2020-01-23T10:48:42.278099Z", "url": "https://files.pythonhosted.org/packages/c9/b1/00982c1a78e9c7ad4069d293b6d61ff2b5891f29c8b273ee6693342f311f/pyatom-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6b98b4acb371300f6d4eee5447c62398", "sha256": "8e359b4225c86b53654c6f19b060c153ca33f7491027d35154c2bd1cf61ceefa"}, "downloads": -1, "filename": "pyatom-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6b98b4acb371300f6d4eee5447c62398", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13914, "upload_time": "2020-03-03T03:14:45", "upload_time_iso_8601": "2020-03-03T03:14:45.755626Z", "url": "https://files.pythonhosted.org/packages/28/f1/4ce3427c6d1a3fb1ca5a8d18b31a723d03a79c03664db90c5e07dfe454cd/pyatom-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6523e8059633a383bb8872c60af1b204", "sha256": "05dddbf3b98c2bf09ce04865be912b7a1210fc1170be903060e7399a738f5d6c"}, "downloads": -1, "filename": "pyatom-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6523e8059633a383bb8872c60af1b204", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10856, "upload_time": "2020-03-03T03:14:47", "upload_time_iso_8601": "2020-03-03T03:14:47.361698Z", "url": "https://files.pythonhosted.org/packages/72/e5/8dda3a63c5f9fae50d159b8a2e276fbf3049d4ae87e69def271581eeb2ac/pyatom-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e7f1e2d4c177e0834a6d27bf44e598bb", "sha256": "fbac3d8a305306c776b0ba86e0fab1c702c22011dc756303924a5fcc247cf200"}, "downloads": -1, "filename": "pyatom-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e7f1e2d4c177e0834a6d27bf44e598bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14959, "upload_time": "2020-04-06T05:19:51", "upload_time_iso_8601": "2020-04-06T05:19:51.189847Z", "url": "https://files.pythonhosted.org/packages/0c/66/d3773147543af03d8662182cf8e5116547527120bbf85e6858b0cebdff1c/pyatom-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "469e07faa74612955313ffb2958371ab", "sha256": "217df22077ebce1bd72d7b76ba3a92e33568d4de518ad16624a34e62a9582606"}, "downloads": -1, "filename": "pyatom-0.0.4.tar.gz", "has_sig": false, "md5_digest": "469e07faa74612955313ffb2958371ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11983, "upload_time": "2020-04-06T05:19:52", "upload_time_iso_8601": "2020-04-06T05:19:52.881786Z", "url": "https://files.pythonhosted.org/packages/46/09/5f81b0c011e4c26595d7c9c52380f7aebfbceb186486540956e02189d6ca/pyatom-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "22a6b6fa56e746aa04de0895a0cd7ed0", "sha256": "3b25468d2622a6e5aa1e70d5d4f300637b5b67a88e40a4ac374fe00f915ec7b5"}, "downloads": -1, "filename": "pyatom-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "22a6b6fa56e746aa04de0895a0cd7ed0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15024, "upload_time": "2020-04-12T03:09:06", "upload_time_iso_8601": "2020-04-12T03:09:06.397484Z", "url": "https://files.pythonhosted.org/packages/18/0d/8a38332ce2e252af8d4b2cd1ab2ac4af25e920307be2ac40c8458d9d9527/pyatom-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "753a0e3ab408ca70761dc6df8a010ba8", "sha256": "905f2085db6a60e7c29b0c69bdaed8692dc1fb3d02ea50571afec381eb83038b"}, "downloads": -1, "filename": "pyatom-0.0.5.tar.gz", "has_sig": false, "md5_digest": "753a0e3ab408ca70761dc6df8a010ba8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12041, "upload_time": "2020-04-12T03:09:08", "upload_time_iso_8601": "2020-04-12T03:09:08.251000Z", "url": "https://files.pythonhosted.org/packages/95/41/bba445ae7f5b7a4c0cb2e5b7c7c52f52fd90170ce4c75faae697f280919a/pyatom-0.0.5.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "7c313bb51515e3b7a6c18975d4f625dc", "sha256": "83f614aad9ba989a285d64189d76d78e242a24824c63a63865d3723212ed721e"}, "downloads": -1, "filename": "pyatom-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "7c313bb51515e3b7a6c18975d4f625dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17772, "upload_time": "2020-04-21T02:53:26", "upload_time_iso_8601": "2020-04-21T02:53:26.710797Z", "url": "https://files.pythonhosted.org/packages/7d/a2/e85ce28a1967eba6f4a9df5b276b9c7a8adc2155b006a2800400aec501aa/pyatom-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a0e2c1cc9263cde2b0674bc3d4f53ca", "sha256": "8712ece0b093187490e996f0f162f7195d1cff8973d5b6ded6062c688a7afb8a"}, "downloads": -1, "filename": "pyatom-0.0.7.tar.gz", "has_sig": false, "md5_digest": "1a0e2c1cc9263cde2b0674bc3d4f53ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17843, "upload_time": "2020-04-21T02:53:28", "upload_time_iso_8601": "2020-04-21T02:53:28.620822Z", "url": "https://files.pythonhosted.org/packages/8d/c2/0d05944c72ec20af6b5f37c0cbf2b6b5f8f5641b91d39f094a121f3c52bb/pyatom-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c313bb51515e3b7a6c18975d4f625dc", "sha256": "83f614aad9ba989a285d64189d76d78e242a24824c63a63865d3723212ed721e"}, "downloads": -1, "filename": "pyatom-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "7c313bb51515e3b7a6c18975d4f625dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17772, "upload_time": "2020-04-21T02:53:26", "upload_time_iso_8601": "2020-04-21T02:53:26.710797Z", "url": "https://files.pythonhosted.org/packages/7d/a2/e85ce28a1967eba6f4a9df5b276b9c7a8adc2155b006a2800400aec501aa/pyatom-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a0e2c1cc9263cde2b0674bc3d4f53ca", "sha256": "8712ece0b093187490e996f0f162f7195d1cff8973d5b6ded6062c688a7afb8a"}, "downloads": -1, "filename": "pyatom-0.0.7.tar.gz", "has_sig": false, "md5_digest": "1a0e2c1cc9263cde2b0674bc3d4f53ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17843, "upload_time": "2020-04-21T02:53:28", "upload_time_iso_8601": "2020-04-21T02:53:28.620822Z", "url": "https://files.pythonhosted.org/packages/8d/c2/0d05944c72ec20af6b5f37c0cbf2b6b5f8f5641b91d39f094a121f3c52bb/pyatom-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:59 2020"}