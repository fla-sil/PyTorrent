{"info": {"author": "Keyi Tang", "author_email": "keyi.tang@rbc.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Alan Bootstrap\n\n## Active Learning \n\n#### Setup Environment\n1. Create a Conda Environment for Python 3.7.3:\n```bash\nconda create --name <EVN_NAME> python=3.7.3\nconda activate <EVN_NAME>\n```\n2. Git Clone:\n```bash\ngit clone https://<USR_NAME>@bitbucket.org/rbcmllab/alan-framework.git\n\n```\n3. Install Python Dependencies\n```bash\ncd alan-framework/modules/boostrap/active_learning\npip install -r requirements.txt\npip install alanbal\n```\n\n#### Run\n```bash\n> python bin/ast_al_bin.py -h\n\nusage: ast_al_bin.py [-h] -i INIT -p POOL -o OUTPUT [-d DEVSET]\n\nParameters for AST classification active learner. The model will be persisted\ninto the output folder at every iteration. If a dev dataset was provided, the\nclassification accuracy score would be calculated on this dataset at each\niteration and a performance plot would be saved into the output folder.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INIT, --init INIT  Shared-AST json file path; ASTs in this file will be\n                        used to initialize the active learner. Every AST in\n                        this file must contain a target value and a list of\n                        complexity_features.\n  -p POOL, --pool POOL  Shared-AST json file path; Active learner will sample\n                        ASTs from this file Every AST in this file must\n                        contain a list of complexity_features.\n  -o OUTPUT, --output OUTPUT\n                        Absolute path of the model persisting folder.\n  -d DEVSET, --devset DEVSET\n                        Shared-AST json file path; ASTs in this file will be\n                        used to evaluate the active learner. Every AST in this\n                        file must contain a target value and a list of\n                        complexity_features.\n```\nExample:\n```bash\n> python bin/ast_al_bin.py \\\n-i $DATA_DIR/ast_train.json \\\n-p $DATA_DIR/ast_pool.json \\\n-o $DATA_DIR \\\n-d $DATA_DIR/ast_dev.json\n```\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/rbcmllab/data_bootstrap/alanbootstrap/master", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "alanbal", "package_url": "https://pypi.org/project/alanbal/", "platform": "", "project_url": "https://pypi.org/project/alanbal/", "project_urls": {"Homepage": "https://bitbucket.org/rbcmllab/data_bootstrap/alanbootstrap/master"}, "release_url": "https://pypi.org/project/alanbal/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Active Learning Module for Bootstrapping Alan", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Alan Bootstrap</h1>\n<h2>Active Learning</h2>\n<h4>Setup Environment</h4>\n<ol>\n<li>Create a Conda Environment for Python 3.7.3:</li>\n</ol>\n<pre>conda create --name &lt;EVN_NAME&gt; <span class=\"nv\">python</span><span class=\"o\">=</span><span class=\"m\">3</span>.7.3\nconda activate &lt;EVN_NAME&gt;\n</pre>\n<ol>\n<li>Git Clone:</li>\n</ol>\n<pre>git clone https://&lt;USR_NAME&gt;@bitbucket.org/rbcmllab/alan-framework.git\n</pre>\n<ol>\n<li>Install Python Dependencies</li>\n</ol>\n<pre><span class=\"nb\">cd</span> alan-framework/modules/boostrap/active_learning\npip install -r requirements.txt\npip install alanbal\n</pre>\n<h4>Run</h4>\n<pre>&gt; python bin/ast_al_bin.py -h\n\nusage: ast_al_bin.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> -i INIT -p POOL -o OUTPUT <span class=\"o\">[</span>-d DEVSET<span class=\"o\">]</span>\n\nParameters <span class=\"k\">for</span> AST classification active learner. The model will be persisted\ninto the output folder at every iteration. If a dev dataset was provided, the\nclassification accuracy score would be calculated on this dataset at each\niteration and a performance plot would be saved into the output folder.\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -i INIT, --init INIT  Shared-AST json file path<span class=\"p\">;</span> ASTs in this file will be\n                        used to initialize the active learner. Every AST in\n                        this file must contain a target value and a list of\n                        complexity_features.\n  -p POOL, --pool POOL  Shared-AST json file path<span class=\"p\">;</span> Active learner will sample\n                        ASTs from this file Every AST in this file must\n                        contain a list of complexity_features.\n  -o OUTPUT, --output OUTPUT\n                        Absolute path of the model persisting folder.\n  -d DEVSET, --devset DEVSET\n                        Shared-AST json file path<span class=\"p\">;</span> ASTs in this file will be\n                        used to evaluate the active learner. Every AST in this\n                        file must contain a target value and a list of\n                        complexity_features.\n</pre>\n<p>Example:</p>\n<pre>&gt; python bin/ast_al_bin.py <span class=\"se\">\\</span>\n-i <span class=\"nv\">$DATA_DIR</span>/ast_train.json <span class=\"se\">\\</span>\n-p <span class=\"nv\">$DATA_DIR</span>/ast_pool.json <span class=\"se\">\\</span>\n-o <span class=\"nv\">$DATA_DIR</span> <span class=\"se\">\\</span>\n-d <span class=\"nv\">$DATA_DIR</span>/ast_dev.json\n</pre>\n\n          </div>"}, "last_serial": 6750493, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e814f64232c880246e9535b8c7309c03", "sha256": "73364567de93bd1f05952e7d76f1ab2eafddba09af8c1d4851b9a0c6358ad85e"}, "downloads": -1, "filename": "alanbal-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e814f64232c880246e9535b8c7309c03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2044, "upload_time": "2020-03-04T20:42:08", "upload_time_iso_8601": "2020-03-04T20:42:08.179590Z", "url": "https://files.pythonhosted.org/packages/0d/87/18788d6bb81f526cdcec7afca0ad75c6f5c9a4f20f6d1e03754819fa7f74/alanbal-0.1-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "be1f45a13725b42566d558a14c699a5a", "sha256": "5b29e8ad5abf496c84846ee9a09c8510d795e071571d3e933e70e2ddf49fd1a2"}, "downloads": -1, "filename": "alanbal-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be1f45a13725b42566d558a14c699a5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9530, "upload_time": "2020-03-04T20:54:01", "upload_time_iso_8601": "2020-03-04T20:54:01.424647Z", "url": "https://files.pythonhosted.org/packages/f1/6d/20d7e1a6525a70173ce7527186e55349295dc1b8e152428505034b802b2e/alanbal-0.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be1f45a13725b42566d558a14c699a5a", "sha256": "5b29e8ad5abf496c84846ee9a09c8510d795e071571d3e933e70e2ddf49fd1a2"}, "downloads": -1, "filename": "alanbal-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be1f45a13725b42566d558a14c699a5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9530, "upload_time": "2020-03-04T20:54:01", "upload_time_iso_8601": "2020-03-04T20:54:01.424647Z", "url": "https://files.pythonhosted.org/packages/f1/6d/20d7e1a6525a70173ce7527186e55349295dc1b8e152428505034b802b2e/alanbal-0.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:20:06 2020"}