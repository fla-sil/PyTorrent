{"info": {"author": "chimera0", "author_email": "ai-brain-lab@accel-brain.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Sound/Audio :: MIDI", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# Algorithmic Composition or Automatic Composition Library: pycomposer\n\n`pycomposer` is Python library for Algorithmic Composition or Automatic Composition based on the stochastic music theory and the Statistical machine learning problems. Especialy, this library provides apprication of the Algorithmic Composer based on Conditional Generative Adversarial Networks(Conditional GANs).\n\n## Installation\n\nInstall using pip:\n\n```sh\npip install pycomposer\n```\n\n### Source code\n\nThe source code is currently hosted on GitHub.\n\n- [accel-brain-code/Algorithmic Composition](https://github.com/chimera0/accel-brain-code/tree/master/Algorithmic-Composition)\n\n### Python package index(PyPI)\n\nInstallers for the latest released version are available at the Python package index.\n\n- [pycomposer : Python Package Index](https://pypi.org/pypi/pycomposer/)\n\n### Dependencies\n\n- numpy: v1.13.3 or higher.\n- pandas: v0.22.0 or higher.\n- pretty_midi: latest.\n- pygan: latest.\n- pydbm: latest.\n\n## Documentation\n\nFull documentation is available on [https://code.accel-brain.com/Algorithmic-Composition/](https://code.accel-brain.com/Algorithmic-Composition/) . This document contains information on functionally reusability, functional scalability and functional extensibility.\n\n## Description\n\n`pycomposer` is Python library which provides wrapper classes for:\n- reading sequencial data from MIDI files, \n- extracting feature points of observed data points from this sequencial data by *generative models*, \n- generating new sequencial data by compositions based on Generative models, \n- and converting the data into new MIDI file.\n\n### Generative Adversarial Networks(GANs)\n\nIn order to realize these functions, this library implements algorithms of Algorithmic Composer based on Generative Adversarial Networks(GANs) (Goodfellow et al., 2014) framework which establishes a min-max adversarial game between two neural networks \u2013 a generative model, `G`, and a discriminative model, `D`. The discriminator model, `D(x)`, is a neural network that computes the probability that a observed data point `x` in data space is a sample from the data distribution (positive samples) that we are trying to model, rather than a sample from our generative model (negative samples). Concurrently, the generator uses a function `G(z)` that maps samples `z` from the prior `p(z)` to the data space. `G(z)` is trained to maximally confuse the discriminator into believing that samples it generates come from the data distribution. The generator is trained by leveraging the gradient of `D(x)` w.r.t. `x`, and using that to modify its parameters.\n\n### Architecture design\n\nThis library is designed following the above theory. The composer `GANComposer` learns observed data points drawn from a true distribution of input MIDI files and generates feature points drawn from a fake distribution that means such as Uniform distribution or Normal distribution, imitating the true MIDI files data.\n\nThe components included in this composer are functionally differentiated into three models.\n\n1. `TrueSampler`.\n2. `Generator`.\n3. `Discriminator`.\n\nThe function of `TrueSampler` is to draw samples from a true distribution of input MIDI files.  `Generator` has `NoiseSampler`s and draw fake samples from a Uniform distribution or Normal distribution by use it. And `Discriminator` observes those input samples, trying discriminating true and fake data. \n\nBy default, `Generator` and `Discriminator` are built as LSTM networks, observing MIDI data separated by fixed sequence length and time resolution. While `Discriminator` observes `Generator`'s observation to discrimine the output from true samples,  `Generator` observes `Discriminator`'s observations to confuse `Discriminator`s judgments. In GANs framework, the mini-max game can be configured by the observations of observations.\n\nAfter this game, the `Generator` will grow into a functional equivalent that enables to imitate the `TrueSampler` and makes it possible to compose similar but slightly different music by the imitation.\n\n### Data Representation\n\nFollowing MidiNet and MuseGAN(Dong, H. W., et al., 2018), this class consider bars as the basic compositional unit for the fact that harmonic changes usually occur at the boundaries of bars and that human beings often use bars as the building blocks when composing songs. The feature engineering in this class also is inspired by the Multi-track piano-roll representations in MuseGAN.\n\nBut their strategies of activation function did not apply to this library since its methods can cause information losses. The models just binarize the `Generator`'s output, which uses tanh as an activation function in the output layer, by a threshold at zero, or by deterministic or stochastic binary neurons(Bengio, Y., et al., 2018, Chung, J., et al., 2016), and ignore drawing a distinction the consonance and the dissonance.\n\nThis library simply uses the softmax strategy. This class stochastically selects a combination of pitches in each bars drawn by the true MIDI files data, based on the difference between consonance and dissonance intended by the composer of the MIDI files.\n\n## Usecase: Composed of multi instruments/tracks by Conditional GANs.\n\nHere, referring to the case of MidiNet model for symbolic-domain music generation(Yang, L. C., et al., 2017), Conditional GAN is used as an algorithm for composing music. MidiNet can be expanded to generate music with multiple MIDI channels (i.e. tracks), using convolutional and deconvolutional neural networks. MidiNet can be expanded to generate music with multiple MIDI channels (i.e. tracks), using convolutional and deconvolutional neural networks.\n\n<div>\n<img src=\"https://storage.googleapis.com/accel-brain-code/Algorithmic-Composition/img/system_diagram_of_the_MidiNet.png\" />\n<p>Yang, L. C., Chou, S. Y., & Yang, Y. H. (2017). MidiNet: A convolutional generative adversarial network for symbolic-domain music generation. arXiv preprint arXiv:1703.10847., p3.</p>\n</div>\n\n### Import and setup modules.\n\nMake settings for this library and for visualization.\n\n```python\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n%config InlineBackend.figure_format = \"retina\"\nplt.style.use(\"fivethirtyeight\")\n```\n\nImport Python modules.\n\n```python\nfrom pycomposer.gancomposable.conditional_gan_composer import ConditionalGANComposer\n```\n\nLet's make it possible to confirm later that learning is working according to GAN theory by the logger of Python.\n\n```python\nfrom logging import getLogger, StreamHandler, NullHandler, DEBUG, ERROR\nlogger = getLogger(\"pygan\")\nhandler = StreamHandler()\nhandler.setLevel(DEBUG)\nlogger.setLevel(DEBUG)\nlogger.addHandler(handler)\n```\n\nInstantiate the required class.\n\n```python\ngan_composer = ConditionalGANComposer(\n    # `list` of Midi files to learn.\n    midi_path_list=[\n        \"../../../../Downloads/Beethoven_gekko_3_k.mid\"\n    ], \n    # Batch size.\n    batch_size=20,\n    # The length of sequence that LSTM networks will observe.\n    seq_len=8,\n    # Learning rate in `Generator` and `Discriminator`.\n    learning_rate=1e-10,\n    # Time fraction or time resolution (seconds).\n    time_fraction=0.5,\n    # The number of units in hidden layer of `DiscriminativeModel`.\n    hidden_dim=105920\n)\n```\n\n**Note** that the value of hidden_dim depends on the values of seq_len and time_fraction because the Symbolic Representation for Convolutional/Deconvolutional neural networks(Yang, L. C., et al., 2017) is the theoretical background.\n\n### Learning.\n\nThe learning algorithm is based on a mini-batch stochastic gradient descent training of generative adversarial nets. The number of steps to apply to the discriminator, `k_step`, is a hyperparameter. For instance, Goodfellow, I. et al.(2014) used `k = 1`, the least expensive option. Not limited to this parameter, the appropriate value of the hyperparameter is unknown.\n\n```python\ngan_composer.learn(\n    # The number of training iterations.\n    iter_n=1000, \n    # The number of learning of the `discriminator`.\n    k_step=10\n)\n```\n\n### Inferencing.\n\nAfter learning, `gan_composer` enables to compose melody and new MIDI file by learned model. In relation to MIDI data, `pitch` is generated from a learned generation model. `start` and `end` are generated by calculating back from length of sequences and time resolution. On the other hand, `velocity` is sampled from Gaussian distribution.\n\n```python\ngan_composer.compose(\n    # Path to generated MIDI file.\n    file_path=\"path/to/new/midi/file.mid\", \n    # Mean of velocity.\n    # This class samples the velocity from a Gaussian distribution of \n    # `velocity_mean` and `velocity_std`.\n    # If `None`, the average velocity in MIDI files set to this parameter.\n    velocity_mean=None,\n    # Standard deviation(SD) of velocity.\n    # This class samples the velocity from a Gaussian distribution of \n    # `velocity_mean` and `velocity_std`.\n    # If `None`, the SD of velocity in MIDI files set to this parameter.\n    velocity_std=None\n)\n```\n\nFinally, new MIDI file will be stored in `file_path`.\n\nIf you want to know more detailed implementation and log visualization, see [my notebook](https://github.com/chimera0/accel-brain-code/blob/master/Algorithmic-Composition/demo/Algorithmic_composition_by_conditional_GAN_like_MidiNet.ipynb).\n\n## References\n\n- Bengio, Y., L\u00e9onard, N., & Courville, A. (2013). Estimating or propagating gradients through stochastic neurons for conditional computation. arXiv preprint arXiv:1308.3432.\n- Chung, J., Ahn, S., & Bengio, Y. (2016). Hierarchical multiscale recurrent neural networks. arXiv preprint arXiv:1609.01704.\n- Dong, H. W., Hsiao, W. Y., Yang, L. C., & Yang, Y. H. (2018, April). MuseGAN: Multi-track sequential generative adversarial networks for symbolic music generation and accompaniment. In Thirty-Second AAAI Conference on Artificial Intelligence.\n- Fang, W., Zhang, F., Sheng, V. S., & Ding, Y. (2018). A method for improving CNN-based image recognition using DCGAN. Comput. Mater. Contin, 57, 167-178.\n- Gauthier, J. (2014). Conditional generative adversarial nets for convolutional face generation. Class Project for Stanford CS231N: Convolutional Neural Networks for Visual Recognition, Winter semester, 2014(5), 2.\n- Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., ... & Bengio, Y. (2014). Generative adversarial nets. In Advances in neural information processing systems (pp. 2672-2680).\n- Long, J., Shelhamer, E., & Darrell, T. (2015). Fully convolutional networks for semantic segmentation. In Proceedings of the IEEE conference on computer vision and pattern recognition (pp. 3431-3440).\n- Makhzani, A., Shlens, J., Jaitly, N., Goodfellow, I., & Frey, B. (2015). Adversarial autoencoders. arXiv preprint arXiv:1511.05644.\n- Mirza, M., & Osindero, S. (2014). Conditional generative adversarial nets. arXiv preprint arXiv:1411.1784.\n- Yang, L. C., Chou, S. Y., & Yang, Y. H. (2017). MidiNet: A convolutional generative adversarial network for symbolic-domain music generation. arXiv preprint arXiv:1703.10847.\n\n### Related PoC\n\n- [\u91cf\u5b50\u529b\u5b66\u3001\u7d71\u8a08\u529b\u5b66\u3001\u71b1\u529b\u5b66\u306b\u304a\u3051\u308b\u5929\u624d\u7269\u7406\u5b66\u8005\u305f\u3061\u306e\u795e\u5b66\u7684\u306a\u5f62\u8c61\u306b\u3064\u3044\u3066](https://accel-brain.com/das-theologische-bild-genialer-physiker-in-der-quantenmechanik-und-der-statistischen-mechanik-und-thermodynamik/) (Japanese)\n    - [\u300c\u30de\u30af\u30b9\u30a6\u30a7\u30eb\u306e\u60aa\u9b54\u300d\u3001\u529b\u5b66\u306e\u57fa\u790e\u6cd5\u5247\u3068\u3057\u3066\u306e\u795e](https://accel-brain.com/das-theologische-bild-genialer-physiker-in-der-quantenmechanik-und-der-statistischen-mechanik-und-thermodynamik/maxwell-damon/)\n- [\u6df1\u5c64\u5f37\u5316\u5b66\u7fd2\u306e\u30d9\u30a4\u30ba\u4e3b\u7fa9\u7684\u306a\u60c5\u5831\u63a2\u7d22\u306b\u99c6\u52d5\u3055\u308c\u305f\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u610f\u5473\u8ad6](https://accel-brain.com/semantics-of-natural-language-processing-driven-by-bayesian-information-search-by-deep-reinforcement-learning/) (Japanese)\n    - [\u5e73\u5747\u5834\u8fd1\u4f3c\u63a8\u8ad6\u306e\u7d71\u8a08\u529b\u5b66\u3001\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u3068\u3057\u3066\u306e\u6df1\u5c64\u30dc\u30eb\u30c4\u30de\u30f3\u30de\u30b7\u30f3](https://accel-brain.com/semantics-of-natural-language-processing-driven-by-bayesian-information-search-by-deep-reinforcement-learning/tiefe-boltzmann-maschine-als-selbstkodierer/)\n    - [\u6b63\u5247\u5316\u554f\u984c\u306b\u304a\u3051\u308b\u6575\u5bfe\u7684\u751f\u6210\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(GANs)\u3068\u6575\u5bfe\u7684\u81ea\u5df1\u7b26\u53f7\u5316\u5668(AAEs)\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020](https://accel-brain.com/semantics-of-natural-language-processing-driven-by-bayesian-information-search-by-deep-reinforcement-learning/regularisierungsproblem-und-gan/)\n- [\u300c\u4eba\u5de5\u306e\u7406\u60f3\u300d\u3092\u80cc\u666f\u3068\u3057\u305f\u300c\u4e07\u7269\u7167\u5fdc\u300d\u306e\u30c7\u30fc\u30bf\u30e2\u30c7\u30ea\u30f3\u30b0](https://accel-brain.com/data-modeling-von-korrespondenz-in-artificial-paradise/) (Japanese)\n    - [\u6a21\u5023\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6a21\u5023](https://accel-brain.com/data-modeling-von-korrespondenz-in-artificial-paradise/algorithmus-der-mimetischen-innervation/)\n    - [\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u793e\u4f1a\u69cb\u9020\u3068\u30c0\u30a6\u7406\u8ad6\u306e\u610f\u5473\u8ad6\u3001\u518d\u5e30\u7684\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4fa1\u683c\u5909\u52d5\u30e2\u30c7\u30eb\u304b\u3089\u6575\u5bfe\u7684\u751f\u6210\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08GAN\uff09\u3078](https://accel-brain.com/data-modeling-von-korrespondenz-in-artificial-paradise/sozialstruktur-von-random-walk-und-semantik-der-dow-theorie/)\n    - [\u53d9\u4e8b\u7684\u306a\u97f3\u697d\u3001\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u306e\u30ea\u30ba\u30e0](https://accel-brain.com/data-modeling-von-korrespondenz-in-artificial-paradise/epische-musik/)\n\n## Author\n\n- chimera0(RUM)\n\n## Author URI\n\n- http://accel-brain.com/\n\n## License\n\n- GNU General Public License v2.0", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chimera0/accel-brain-code/tree/master/Algorithmic-Composition", "keywords": "GAN GANs MIDI Composition Generative Adversarial Networks Conditional MidiNet MuseGAN", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "pycomposer", "package_url": "https://pypi.org/project/pycomposer/", "platform": "", "project_url": "https://pypi.org/project/pycomposer/", "project_urls": {"Homepage": "https://github.com/chimera0/accel-brain-code/tree/master/Algorithmic-Composition"}, "release_url": "https://pypi.org/project/pycomposer/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "pycomposer is Python library for Algorithmic Composition or Automatic Composition based on the stochastic music theory and the Statistical machine learning problems. Especialy, this library provides apprication of the Algorithmic Composer based on Generative Adversarial Networks(GANs) and Conditional Generative Adversarial Networks(Conditional GANs).", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Algorithmic Composition or Automatic Composition Library: pycomposer</h1>\n<p><code>pycomposer</code> is Python library for Algorithmic Composition or Automatic Composition based on the stochastic music theory and the Statistical machine learning problems. Especialy, this library provides apprication of the Algorithmic Composer based on Conditional Generative Adversarial Networks(Conditional GANs).</p>\n<h2>Installation</h2>\n<p>Install using pip:</p>\n<pre>pip install pycomposer\n</pre>\n<h3>Source code</h3>\n<p>The source code is currently hosted on GitHub.</p>\n<ul>\n<li><a href=\"https://github.com/chimera0/accel-brain-code/tree/master/Algorithmic-Composition\" rel=\"nofollow\">accel-brain-code/Algorithmic Composition</a></li>\n</ul>\n<h3>Python package index(PyPI)</h3>\n<p>Installers for the latest released version are available at the Python package index.</p>\n<ul>\n<li><a href=\"https://pypi.org/pypi/pycomposer/\" rel=\"nofollow\">pycomposer : Python Package Index</a></li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li>numpy: v1.13.3 or higher.</li>\n<li>pandas: v0.22.0 or higher.</li>\n<li>pretty_midi: latest.</li>\n<li>pygan: latest.</li>\n<li>pydbm: latest.</li>\n</ul>\n<h2>Documentation</h2>\n<p>Full documentation is available on <a href=\"https://code.accel-brain.com/Algorithmic-Composition/\" rel=\"nofollow\">https://code.accel-brain.com/Algorithmic-Composition/</a> . This document contains information on functionally reusability, functional scalability and functional extensibility.</p>\n<h2>Description</h2>\n<p><code>pycomposer</code> is Python library which provides wrapper classes for:</p>\n<ul>\n<li>reading sequencial data from MIDI files,</li>\n<li>extracting feature points of observed data points from this sequencial data by <em>generative models</em>,</li>\n<li>generating new sequencial data by compositions based on Generative models,</li>\n<li>and converting the data into new MIDI file.</li>\n</ul>\n<h3>Generative Adversarial Networks(GANs)</h3>\n<p>In order to realize these functions, this library implements algorithms of Algorithmic Composer based on Generative Adversarial Networks(GANs) (Goodfellow et al., 2014) framework which establishes a min-max adversarial game between two neural networks \u2013 a generative model, <code>G</code>, and a discriminative model, <code>D</code>. The discriminator model, <code>D(x)</code>, is a neural network that computes the probability that a observed data point <code>x</code> in data space is a sample from the data distribution (positive samples) that we are trying to model, rather than a sample from our generative model (negative samples). Concurrently, the generator uses a function <code>G(z)</code> that maps samples <code>z</code> from the prior <code>p(z)</code> to the data space. <code>G(z)</code> is trained to maximally confuse the discriminator into believing that samples it generates come from the data distribution. The generator is trained by leveraging the gradient of <code>D(x)</code> w.r.t. <code>x</code>, and using that to modify its parameters.</p>\n<h3>Architecture design</h3>\n<p>This library is designed following the above theory. The composer <code>GANComposer</code> learns observed data points drawn from a true distribution of input MIDI files and generates feature points drawn from a fake distribution that means such as Uniform distribution or Normal distribution, imitating the true MIDI files data.</p>\n<p>The components included in this composer are functionally differentiated into three models.</p>\n<ol>\n<li><code>TrueSampler</code>.</li>\n<li><code>Generator</code>.</li>\n<li><code>Discriminator</code>.</li>\n</ol>\n<p>The function of <code>TrueSampler</code> is to draw samples from a true distribution of input MIDI files.  <code>Generator</code> has <code>NoiseSampler</code>s and draw fake samples from a Uniform distribution or Normal distribution by use it. And <code>Discriminator</code> observes those input samples, trying discriminating true and fake data.</p>\n<p>By default, <code>Generator</code> and <code>Discriminator</code> are built as LSTM networks, observing MIDI data separated by fixed sequence length and time resolution. While <code>Discriminator</code> observes <code>Generator</code>'s observation to discrimine the output from true samples,  <code>Generator</code> observes <code>Discriminator</code>'s observations to confuse <code>Discriminator</code>s judgments. In GANs framework, the mini-max game can be configured by the observations of observations.</p>\n<p>After this game, the <code>Generator</code> will grow into a functional equivalent that enables to imitate the <code>TrueSampler</code> and makes it possible to compose similar but slightly different music by the imitation.</p>\n<h3>Data Representation</h3>\n<p>Following MidiNet and MuseGAN(Dong, H. W., et al., 2018), this class consider bars as the basic compositional unit for the fact that harmonic changes usually occur at the boundaries of bars and that human beings often use bars as the building blocks when composing songs. The feature engineering in this class also is inspired by the Multi-track piano-roll representations in MuseGAN.</p>\n<p>But their strategies of activation function did not apply to this library since its methods can cause information losses. The models just binarize the <code>Generator</code>'s output, which uses tanh as an activation function in the output layer, by a threshold at zero, or by deterministic or stochastic binary neurons(Bengio, Y., et al., 2018, Chung, J., et al., 2016), and ignore drawing a distinction the consonance and the dissonance.</p>\n<p>This library simply uses the softmax strategy. This class stochastically selects a combination of pitches in each bars drawn by the true MIDI files data, based on the difference between consonance and dissonance intended by the composer of the MIDI files.</p>\n<h2>Usecase: Composed of multi instruments/tracks by Conditional GANs.</h2>\n<p>Here, referring to the case of MidiNet model for symbolic-domain music generation(Yang, L. C., et al., 2017), Conditional GAN is used as an algorithm for composing music. MidiNet can be expanded to generate music with multiple MIDI channels (i.e. tracks), using convolutional and deconvolutional neural networks. MidiNet can be expanded to generate music with multiple MIDI channels (i.e. tracks), using convolutional and deconvolutional neural networks.</p>\n<div>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c06de97ff5c94add69b11f1b587156386138f4e4/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f616363656c2d627261696e2d636f64652f416c676f726974686d69632d436f6d706f736974696f6e2f696d672f73797374656d5f6469616772616d5f6f665f7468655f4d6964694e65742e706e67\">\n<p>Yang, L. C., Chou, S. Y., &amp; Yang, Y. H. (2017). MidiNet: A convolutional generative adversarial network for symbolic-domain music generation. arXiv preprint arXiv:1703.10847., p3.</p>\n</div>\n<h3>Import and setup modules.</h3>\n<p>Make settings for this library and for visualization.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n<span class=\"kn\">import</span> <span class=\"nn\">seaborn</span> <span class=\"k\">as</span> <span class=\"nn\">sns</span>\n<span class=\"o\">%</span><span class=\"n\">config</span> <span class=\"n\">InlineBackend</span><span class=\"o\">.</span><span class=\"n\">figure_format</span> <span class=\"o\">=</span> <span class=\"s2\">\"retina\"</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"s2\">\"fivethirtyeight\"</span><span class=\"p\">)</span>\n</pre>\n<p>Import Python modules.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycomposer.gancomposable.conditional_gan_composer</span> <span class=\"kn\">import</span> <span class=\"n\">ConditionalGANComposer</span>\n</pre>\n<p>Let's make it possible to confirm later that learning is working according to GAN theory by the logger of Python.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">logging</span> <span class=\"kn\">import</span> <span class=\"n\">getLogger</span><span class=\"p\">,</span> <span class=\"n\">StreamHandler</span><span class=\"p\">,</span> <span class=\"n\">NullHandler</span><span class=\"p\">,</span> <span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">ERROR</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">\"pygan\"</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n</pre>\n<p>Instantiate the required class.</p>\n<pre><span class=\"n\">gan_composer</span> <span class=\"o\">=</span> <span class=\"n\">ConditionalGANComposer</span><span class=\"p\">(</span>\n    <span class=\"c1\"># `list` of Midi files to learn.</span>\n    <span class=\"n\">midi_path_list</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"../../../../Downloads/Beethoven_gekko_3_k.mid\"</span>\n    <span class=\"p\">],</span> \n    <span class=\"c1\"># Batch size.</span>\n    <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"c1\"># The length of sequence that LSTM networks will observe.</span>\n    <span class=\"n\">seq_len</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Learning rate in `Generator` and `Discriminator`.</span>\n    <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Time fraction or time resolution (seconds).</span>\n    <span class=\"n\">time_fraction</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n    <span class=\"c1\"># The number of units in hidden layer of `DiscriminativeModel`.</span>\n    <span class=\"n\">hidden_dim</span><span class=\"o\">=</span><span class=\"mi\">105920</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong> that the value of hidden_dim depends on the values of seq_len and time_fraction because the Symbolic Representation for Convolutional/Deconvolutional neural networks(Yang, L. C., et al., 2017) is the theoretical background.</p>\n<h3>Learning.</h3>\n<p>The learning algorithm is based on a mini-batch stochastic gradient descent training of generative adversarial nets. The number of steps to apply to the discriminator, <code>k_step</code>, is a hyperparameter. For instance, Goodfellow, I. et al.(2014) used <code>k = 1</code>, the least expensive option. Not limited to this parameter, the appropriate value of the hyperparameter is unknown.</p>\n<pre><span class=\"n\">gan_composer</span><span class=\"o\">.</span><span class=\"n\">learn</span><span class=\"p\">(</span>\n    <span class=\"c1\"># The number of training iterations.</span>\n    <span class=\"n\">iter_n</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> \n    <span class=\"c1\"># The number of learning of the `discriminator`.</span>\n    <span class=\"n\">k_step</span><span class=\"o\">=</span><span class=\"mi\">10</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Inferencing.</h3>\n<p>After learning, <code>gan_composer</code> enables to compose melody and new MIDI file by learned model. In relation to MIDI data, <code>pitch</code> is generated from a learned generation model. <code>start</code> and <code>end</code> are generated by calculating back from length of sequences and time resolution. On the other hand, <code>velocity</code> is sampled from Gaussian distribution.</p>\n<pre><span class=\"n\">gan_composer</span><span class=\"o\">.</span><span class=\"n\">compose</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Path to generated MIDI file.</span>\n    <span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/new/midi/file.mid\"</span><span class=\"p\">,</span> \n    <span class=\"c1\"># Mean of velocity.</span>\n    <span class=\"c1\"># This class samples the velocity from a Gaussian distribution of </span>\n    <span class=\"c1\"># `velocity_mean` and `velocity_std`.</span>\n    <span class=\"c1\"># If `None`, the average velocity in MIDI files set to this parameter.</span>\n    <span class=\"n\">velocity_mean</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Standard deviation(SD) of velocity.</span>\n    <span class=\"c1\"># This class samples the velocity from a Gaussian distribution of </span>\n    <span class=\"c1\"># `velocity_mean` and `velocity_std`.</span>\n    <span class=\"c1\"># If `None`, the SD of velocity in MIDI files set to this parameter.</span>\n    <span class=\"n\">velocity_std</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Finally, new MIDI file will be stored in <code>file_path</code>.</p>\n<p>If you want to know more detailed implementation and log visualization, see <a href=\"https://github.com/chimera0/accel-brain-code/blob/master/Algorithmic-Composition/demo/Algorithmic_composition_by_conditional_GAN_like_MidiNet.ipynb\" rel=\"nofollow\">my notebook</a>.</p>\n<h2>References</h2>\n<ul>\n<li>Bengio, Y., L\u00e9onard, N., &amp; Courville, A. (2013). Estimating or propagating gradients through stochastic neurons for conditional computation. arXiv preprint arXiv:1308.3432.</li>\n<li>Chung, J., Ahn, S., &amp; Bengio, Y. (2016). Hierarchical multiscale recurrent neural networks. arXiv preprint arXiv:1609.01704.</li>\n<li>Dong, H. W., Hsiao, W. Y., Yang, L. C., &amp; Yang, Y. H. (2018, April). MuseGAN: Multi-track sequential generative adversarial networks for symbolic music generation and accompaniment. In Thirty-Second AAAI Conference on Artificial Intelligence.</li>\n<li>Fang, W., Zhang, F., Sheng, V. S., &amp; Ding, Y. (2018). A method for improving CNN-based image recognition using DCGAN. Comput. Mater. Contin, 57, 167-178.</li>\n<li>Gauthier, J. (2014). Conditional generative adversarial nets for convolutional face generation. Class Project for Stanford CS231N: Convolutional Neural Networks for Visual Recognition, Winter semester, 2014(5), 2.</li>\n<li>Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., ... &amp; Bengio, Y. (2014). Generative adversarial nets. In Advances in neural information processing systems (pp. 2672-2680).</li>\n<li>Long, J., Shelhamer, E., &amp; Darrell, T. (2015). Fully convolutional networks for semantic segmentation. In Proceedings of the IEEE conference on computer vision and pattern recognition (pp. 3431-3440).</li>\n<li>Makhzani, A., Shlens, J., Jaitly, N., Goodfellow, I., &amp; Frey, B. (2015). Adversarial autoencoders. arXiv preprint arXiv:1511.05644.</li>\n<li>Mirza, M., &amp; Osindero, S. (2014). Conditional generative adversarial nets. arXiv preprint arXiv:1411.1784.</li>\n<li>Yang, L. C., Chou, S. Y., &amp; Yang, Y. H. (2017). MidiNet: A convolutional generative adversarial network for symbolic-domain music generation. arXiv preprint arXiv:1703.10847.</li>\n</ul>\n<h3>Related PoC</h3>\n<ul>\n<li><a href=\"https://accel-brain.com/das-theologische-bild-genialer-physiker-in-der-quantenmechanik-und-der-statistischen-mechanik-und-thermodynamik/\" rel=\"nofollow\">\u91cf\u5b50\u529b\u5b66\u3001\u7d71\u8a08\u529b\u5b66\u3001\u71b1\u529b\u5b66\u306b\u304a\u3051\u308b\u5929\u624d\u7269\u7406\u5b66\u8005\u305f\u3061\u306e\u795e\u5b66\u7684\u306a\u5f62\u8c61\u306b\u3064\u3044\u3066</a> (Japanese)\n<ul>\n<li><a href=\"https://accel-brain.com/das-theologische-bild-genialer-physiker-in-der-quantenmechanik-und-der-statistischen-mechanik-und-thermodynamik/maxwell-damon/\" rel=\"nofollow\">\u300c\u30de\u30af\u30b9\u30a6\u30a7\u30eb\u306e\u60aa\u9b54\u300d\u3001\u529b\u5b66\u306e\u57fa\u790e\u6cd5\u5247\u3068\u3057\u3066\u306e\u795e</a></li>\n</ul>\n</li>\n<li><a href=\"https://accel-brain.com/semantics-of-natural-language-processing-driven-by-bayesian-information-search-by-deep-reinforcement-learning/\" rel=\"nofollow\">\u6df1\u5c64\u5f37\u5316\u5b66\u7fd2\u306e\u30d9\u30a4\u30ba\u4e3b\u7fa9\u7684\u306a\u60c5\u5831\u63a2\u7d22\u306b\u99c6\u52d5\u3055\u308c\u305f\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u610f\u5473\u8ad6</a> (Japanese)\n<ul>\n<li><a href=\"https://accel-brain.com/semantics-of-natural-language-processing-driven-by-bayesian-information-search-by-deep-reinforcement-learning/tiefe-boltzmann-maschine-als-selbstkodierer/\" rel=\"nofollow\">\u5e73\u5747\u5834\u8fd1\u4f3c\u63a8\u8ad6\u306e\u7d71\u8a08\u529b\u5b66\u3001\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u3068\u3057\u3066\u306e\u6df1\u5c64\u30dc\u30eb\u30c4\u30de\u30f3\u30de\u30b7\u30f3</a></li>\n<li><a href=\"https://accel-brain.com/semantics-of-natural-language-processing-driven-by-bayesian-information-search-by-deep-reinforcement-learning/regularisierungsproblem-und-gan/\" rel=\"nofollow\">\u6b63\u5247\u5316\u554f\u984c\u306b\u304a\u3051\u308b\u6575\u5bfe\u7684\u751f\u6210\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(GANs)\u3068\u6575\u5bfe\u7684\u81ea\u5df1\u7b26\u53f7\u5316\u5668(AAEs)\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020</a></li>\n</ul>\n</li>\n<li><a href=\"https://accel-brain.com/data-modeling-von-korrespondenz-in-artificial-paradise/\" rel=\"nofollow\">\u300c\u4eba\u5de5\u306e\u7406\u60f3\u300d\u3092\u80cc\u666f\u3068\u3057\u305f\u300c\u4e07\u7269\u7167\u5fdc\u300d\u306e\u30c7\u30fc\u30bf\u30e2\u30c7\u30ea\u30f3\u30b0</a> (Japanese)\n<ul>\n<li><a href=\"https://accel-brain.com/data-modeling-von-korrespondenz-in-artificial-paradise/algorithmus-der-mimetischen-innervation/\" rel=\"nofollow\">\u6a21\u5023\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6a21\u5023</a></li>\n<li><a href=\"https://accel-brain.com/data-modeling-von-korrespondenz-in-artificial-paradise/sozialstruktur-von-random-walk-und-semantik-der-dow-theorie/\" rel=\"nofollow\">\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u793e\u4f1a\u69cb\u9020\u3068\u30c0\u30a6\u7406\u8ad6\u306e\u610f\u5473\u8ad6\u3001\u518d\u5e30\u7684\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4fa1\u683c\u5909\u52d5\u30e2\u30c7\u30eb\u304b\u3089\u6575\u5bfe\u7684\u751f\u6210\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08GAN\uff09\u3078</a></li>\n<li><a href=\"https://accel-brain.com/data-modeling-von-korrespondenz-in-artificial-paradise/epische-musik/\" rel=\"nofollow\">\u53d9\u4e8b\u7684\u306a\u97f3\u697d\u3001\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u306e\u30ea\u30ba\u30e0</a></li>\n</ul>\n</li>\n</ul>\n<h2>Author</h2>\n<ul>\n<li>chimera0(RUM)</li>\n</ul>\n<h2>Author URI</h2>\n<ul>\n<li><a href=\"http://accel-brain.com/\" rel=\"nofollow\">http://accel-brain.com/</a></li>\n</ul>\n<h2>License</h2>\n<ul>\n<li>GNU General Public License v2.0</li>\n</ul>\n\n          </div>"}, "last_serial": 5437078, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e1f27199e628f664a8c4de6cbf4feb24", "sha256": "5c8ec3c02046265f87fd26add28b4d6c98f84574ab8b21232a5bcdd2b6104363"}, "downloads": -1, "filename": "pycomposer-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e1f27199e628f664a8c4de6cbf4feb24", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2926, "upload_time": "2018-05-05T12:19:29", "upload_time_iso_8601": "2018-05-05T12:19:29.379036Z", "url": "https://files.pythonhosted.org/packages/9d/b0/48afbe741e9fb1c69f2b619e46ff2fe1311e0ce622d6592c7afa57370028/pycomposer-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eee08d1e808f437b8034ccf74722676f", "sha256": "a521ebffae47d915a8a24a21805dafefbc5606101b1d8e180f3f7a2398510a4b"}, "downloads": -1, "filename": "pycomposer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "eee08d1e808f437b8034ccf74722676f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5003, "upload_time": "2018-05-05T12:19:31", "upload_time_iso_8601": "2018-05-05T12:19:31.247558Z", "url": "https://files.pythonhosted.org/packages/55/3f/324e7cad69940c8e21fc85744eab8341bb074c32ee28b50b69dce9ab0cae/pycomposer-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1eff5a51a1ae6db515a7d3db3fb72ef1", "sha256": "cd1d298407361ab41b240e5dfd3768d1c2de10904630a14f8b76217b3928e45c"}, "downloads": -1, "filename": "pycomposer-0.0.2.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "1eff5a51a1ae6db515a7d3db3fb72ef1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5214, "upload_time": "2018-05-06T01:10:37", "upload_time_iso_8601": "2018-05-06T01:10:37.955843Z", "url": "https://files.pythonhosted.org/packages/83/74/a6caf00466a825e942b7b832a179d4912d4c972263a9370b92fcc988be2e/pycomposer-0.0.2.linux-x86_64.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "e46de4b668d1953daae908138145b27a", "sha256": "4876c994fc1ecf10c6277d14009d7d0ef8f81b4a016803355904c839211991d1"}, "downloads": -1, "filename": "pycomposer-0.0.3.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "e46de4b668d1953daae908138145b27a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4264, "upload_time": "2018-09-01T14:52:39", "upload_time_iso_8601": "2018-09-01T14:52:39.552137Z", "url": "https://files.pythonhosted.org/packages/c8/66/e84db554200b6109fbd99e953af1213e189cd43e1393e55d2a04802e87fc/pycomposer-0.0.3.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "23f2df4823ab13ea93a1d5be573c8f65", "sha256": "f82cffb5cad0be07b27d420064ff0edb0885033cad860dbbf623365ccb063d1f"}, "downloads": -1, "filename": "pycomposer-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "23f2df4823ab13ea93a1d5be573c8f65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1682, "upload_time": "2018-09-01T14:17:39", "upload_time_iso_8601": "2018-09-01T14:17:39.984349Z", "url": "https://files.pythonhosted.org/packages/b6/81/26ded35711f8804337e61e9e817c9b8b645f0afdca8504f8642a2f809e0c/pycomposer-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "90bfdfd637e2952c4cf1d1de30aac1db", "sha256": "eccf871f8282ab6f6ddedf53eea20d63e95e053c438669f4ee557d36cef2274c"}, "downloads": -1, "filename": "pycomposer-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "90bfdfd637e2952c4cf1d1de30aac1db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4435, "upload_time": "2018-09-01T14:54:33", "upload_time_iso_8601": "2018-09-01T14:54:33.754199Z", "url": "https://files.pythonhosted.org/packages/e3/94/b09350387ddccd2174a611d1d92e672cbfbe8f6554d84d41582b366696bf/pycomposer-0.0.4-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "24a1e88cbab790770421666989b9cbc3", "sha256": "4f7bbc71e8f97f3a654c4a172f426dc9552cfe0fefa8a4b8e4435725dbd2762b"}, "downloads": -1, "filename": "pycomposer-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "24a1e88cbab790770421666989b9cbc3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11346, "upload_time": "2019-03-30T06:22:48", "upload_time_iso_8601": "2019-03-30T06:22:48.065149Z", "url": "https://files.pythonhosted.org/packages/78/09/7ff4181040544910040b35158f64be4130f05c120133887599d2c43608c9/pycomposer-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "68ceb77d242f6f70cfb1c7d0fd3d9a28", "sha256": "e4c39063c6ad1249492668c0c6e15fa55f9c1c625c87d341630b17636da1f3e2"}, "downloads": -1, "filename": "pycomposer-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "68ceb77d242f6f70cfb1c7d0fd3d9a28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30462, "upload_time": "2019-04-20T15:29:18", "upload_time_iso_8601": "2019-04-20T15:29:18.849909Z", "url": "https://files.pythonhosted.org/packages/ad/66/8b43dc038ec371d2095c53f89852c504f6733e690517fc58187a00eb7d9c/pycomposer-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d4d58203d65f8b31089ca330547f22d4", "sha256": "ea045504b5af0607823ff577f2c28297a881e950f27034abb481cf2f4d7c6f4a"}, "downloads": -1, "filename": "pycomposer-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d4d58203d65f8b31089ca330547f22d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14249, "upload_time": "2019-06-04T10:44:14", "upload_time_iso_8601": "2019-06-04T10:44:14.345753Z", "url": "https://files.pythonhosted.org/packages/48/86/4ef213190935b0ceaa7bddeb04b85485615fc422863f0717d375035a36de/pycomposer-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "accc13b232d23e2d4327da2825e0c6a8", "sha256": "5d8beccc855e9d5052cabbd073791cdafe33ec3882eb9383e2c9d49662a9c245"}, "downloads": -1, "filename": "pycomposer-1.0.3.tar.gz", "has_sig": false, "md5_digest": "accc13b232d23e2d4327da2825e0c6a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14361, "upload_time": "2019-06-23T11:29:03", "upload_time_iso_8601": "2019-06-23T11:29:03.471677Z", "url": "https://files.pythonhosted.org/packages/6d/53/e1ae5091000c4330a6b44ededa508a75ee951a8b94f63846891994e4efec/pycomposer-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "accc13b232d23e2d4327da2825e0c6a8", "sha256": "5d8beccc855e9d5052cabbd073791cdafe33ec3882eb9383e2c9d49662a9c245"}, "downloads": -1, "filename": "pycomposer-1.0.3.tar.gz", "has_sig": false, "md5_digest": "accc13b232d23e2d4327da2825e0c6a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14361, "upload_time": "2019-06-23T11:29:03", "upload_time_iso_8601": "2019-06-23T11:29:03.471677Z", "url": "https://files.pythonhosted.org/packages/6d/53/e1ae5091000c4330a6b44ededa508a75ee951a8b94f63846891994e4efec/pycomposer-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:11 2020"}