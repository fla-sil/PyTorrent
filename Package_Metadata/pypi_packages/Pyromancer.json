{"info": {"author": "Gwildor Sok", "author_email": "gwildorsok@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Information Technology", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Communications", "Topic :: Communications :: Chat", "Topic :: Communications :: Chat :: Internet Relay Chat", "Topic :: Internet", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "|Build Status| |Latest Version| |Coverage Status| |MIT License|\n\nSimple framework for creating IRC bots.\n\nExample\n~~~~~~~\n\ninit.py:\n\n.. code:: python\n\n    from pyromancer.objects import Pyromancer\n\n    p = Pyromancer('test.settings')\n    p.run()\n\ntest/settings.py:\n\n.. code:: python\n\n    host = '1.2.3.4'\n    port = 6667\n    nick = 'PyromancerBot'\n    encoding = 'ISO-8859-1'\n\nCustom commands\n~~~~~~~~~~~~~~~\n\nWriting own commands is fairly simple. Create a folder which will be the\npackage name, with a file named ``commands.py`` in it to hold the\ncommands. In ``commands.py``, you can register functions to be a command\nwith the built-in command decorator.\n\nExample\n^^^^^^^\n\nFile layout:\n\n::\n\n    test/\n        __init__.py\n        commands.py\n        settings.py\n    init.py\n\ncommands.py:\n\n.. code:: python\n\n    from pyromancer.decorators import command\n\n\n    @command(r'bye (.*)')\n    def bye(match):\n        return 'Bye {m[1]}!'\n\nOn IRC:\n\n::\n\n    <User> bye everyone\n    <Bot> Bye everyone!\n\nPyromancer scans automatically for functions decorated using the\ncommands decorator, so all your commands in ``commands.py`` are used\nautomatically.\n\nYou can also create a directory named ``commands`` with submodules\ncontaining the commands. Just make sure that you import either the\nmodules or all of the commands in the ``__init__.py`` file.\n\nThe ``command`` decorator\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou must apply this to a function to mark it as a command. It will be\nused when scanning for and collecting commands.\n\nParameters\n''''''''''\n\n-  ``patterns`` - a regular expression or a list of expressions. When a\n   list is given, all patterns are attempted when matching the input,\n   and only when all patterns in the list fail to match, the command is\n   not executed.\n\n   .. code:: python\n\n       @command(['hi', 'hello'])\n       def hi(match):\n           return 'Hello!'\n\n-  ``prefix`` - a boolean which defaults to ``True``. When true, the\n   command pattern is only attempted to match when the message line\n   starts with the prefix defined in the settings of the bot. This is\n   useful for commands which are very bot-like (in contrary to commands\n   which look and behave like natural language). Using a boolean and a\n   setting allows the same command to be triggered in different ways,\n   depending on the settings of the bot which installed the command\n   package.\n\n-  ``raw`` - a boolean which defaults to ``False``. When true, the raw\n   input line sent from the server is used for matching the pattern,\n   instead of the message. Useful for matching lines which are not a\n   message from an user, such as nick or topic changes.\n\nMessaging from a command\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nMessaging from inside the function which makes up the command is as easy\nas can be for simple use cases, but can be done in numerous ways for the\nmore complex situations.\n\nMost of the times, arguments are passed to the ``Match.msg`` function,\nwhich applies formatting by default and provides some additional\nutilities. The most important of those is that when no target has been\npassed on as an argument, it will use either the channel or the user (in\ncase of a PM) whose input line triggered the command to be executed as\nthe target, effectively replying.\n\nParameters\n''''''''''\n\n-  ``message`` - the message to be send to the server. Formatting will\n   be applied using any additional ``args`` and ``kwargs``, so you can\n   apply the full power of the `Python Format\n   Mini-Language <http://docs.python.org/3.3/library/string.html#format-string-syntax>`__\n   on the message.\n\n-  ``args`` and ``kwargs`` - arguments to be passed on through the\n   formatting which is applied on ``message``.\n\nMethods of messaging\n''''''''''''''''''''\n\n-  Return a ``message``\n\n   .. code:: python\n\n       @command(r'bye (.*)')\n       def bye(match):\n           return 'Bye {m[1]}!'\n\n-  Return a tuple of ``message`` and optional ``args`` and ``kwargs`` to\n   be used when formatting ``message``. ``args`` can be both a list of\n   arguments, or simply all the middle elements of the tuple.\n\n   .. code:: python\n\n       def gibberish(match):\n           return 'A = {}, B = {}, C = {c_char}', 'a', 'b', {'c_char': 'c'}\n\n-  Yield a ``message`` or a tuple of ``message`` and optional ``args``\n   and ``kwargs``. Yielding can be done as much as you want, which is\n   the easiest way of sending multiple messages from one command.\n\n   .. code:: python\n\n       @command(r'say (.*)')\n       def say(match):\n           for part in match[1].split(', '):\n               yield 'Saying {}', part\n\n-  Return a list of ``message`` or a tuple of ``message`` and optional\n   ``args`` and ``kwargs``.\n\n   .. code:: python\n\n       def hi(match):\n           return ['Hi', 'Hello']\n\n-  Use ``Match.msg``. This is the only way to benefit from the\n   non-default functionalities provided by this function.\n\n   .. code:: python\n\n       def raw(match):\n           match.msg('Raw {} message {m[1]}', raw=True)\n\nExtra parameters for ``Match.msg``\n''''''''''''''''''''''''''''''''''\n\n-  ``target`` - the target to send the message to. If not provided, it\n   will attempt to use either the channel or user whose input line\n   triggered the command, which effectively results in replying.\n\n-  ``raw`` - defaults to ``False``. When true, no formatting is applied\n   on ``message``.\n\nTimers\n~~~~~~\n\nYou can register timers in a custom ``timers`` module, or you can create\nthem from inside commands or other timers. When creating or registering\na timer, you can either specify a ``timedelta`` or ``datetime`` object\nto schedule the timer. When specifying a timedelta, you can also specify\nthe amount of times the timer should execute, which defaults to\ninfinite. Timers can send messages based on arguments given upon\ninitialization, but also call a callable which in itself can send\nmessages or initialize new timers.\n\nWhen messaging from a timer, you must always specify a target to send\nthe message to before the message (when returning a message tuple), or\nwith the ``target`` argument on the ``Match`` instance when using the\n``Match.msg`` method. Because there is no line which triggered the\ntimer, nothing can be used to decide where to send the message to when\nthe target is not specified.\n\nExample of timers through a module\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntimers.py:\n\n.. code:: python\n\n    from datetime import datetime, timedelta\n\n    from pyromancer.decorators import timer\n\n\n    @timer(timedelta(seconds=3), count=5)\n    def say_time(match):\n        return 'User', \"It's {}\", datetime.now()\n\nExample of timers through messaging\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ncommands.py:\n\n.. code:: python\n\n    from datetime import datetime, timedelta\n\n    from pyromancer.decorators import timer\n\n\n    @command(r'start_timer')\n    def start_timer(match):\n        return timedelta(seconds=3), 'User', \"It's {}\", datetime.now()\n\nYou can also return a ``Timer`` instance, or specify a callable as the\nsecond item of the returned tuple, which is then called like any\nfunction with the ``timer`` decorator.\n\nUsing a database\n~~~~~~~~~~~~~~~~\n\nUsing a database requires `SQLAlchemy <http://www.sqlalchemy.org>`__.\n\nTo enable the integrated database support, you have to set the\n``database`` setting to a string which holds the URL to the database, as\naccepted by `SQLAlchemy's\ncreate\\_engine <http://docs.sqlalchemy.org/en/latest/core/engines.html?highlight=create_engine#sqlalchemy.create_engine>`__\nfunction. Then, in a ``models`` module, you can import the `declarative\nbase <http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative.html#sqlalchemy.ext.declarative.declarative_base>`__\nto construct your model, and import the\n`Session <http://docs.sqlalchemy.org/en/latest/orm/session.html>`__ for\nquerying.\n\nExample with a simple model and timer\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis example creates a table named ``test`` in a SQLite ``test.db``\nfile, and creates an entry with the current date and time every three\nseconds, and a command which returns the count of entries in the table.\n\nsettings.py:\n\n.. code:: python\n\n    database = 'sqlite:///test.db'\n\nmodels.py:\n\n.. code:: python\n\n    from sqlalchemy import Column, DateTime, Integer\n\n    from pyromancer.database import Base\n\n\n    class Test(Base):\n        __tablename__ = 'test'\n\n        id = Column(Integer, primary_key=True)\n        value = Column(DateTime)\n\ntimers.py:\n\n.. code:: python\n\n    from datetime import datetime, timedelta\n\n    from pyromancer.database import Session\n    from pyromancer.decorators import timer\n\n    from .models import Test\n\n\n    @timer(timedelta(seconds=3))\n    def hi(match):\n        session = Session()\n        session.add(Test(value=datetime.now()))\n        session.commit()\n\ncommands.py:\n\n.. code:: python\n\n    from pyromancer.database import Session\n    from pyromancer.decorators import command\n\n    from .models import Test\n\n\n    @command(r'timers')\n    def timers(match):\n        session = Session()\n        return 'Timer count: {}', session.query(Test).count()\n\nSupport\n~~~~~~~\n\nPython 2.7 and 3.0 - 3.4 are supported. Note that development occurs on\nPython 3.\n\nTo do\n~~~~~\n\n-  Figure out how to do translation of messages through the\n   ``Match.msg`` function.\n\nChangelist\n~~~~~~~~~~\n\n1.0 - 2014-10-18\n^^^^^^^^^^^^^^^^\n\n-  Add timers.\n-  Add integrated database support.\n-  Add command module which tracks channels and users.\n-  Change color code parameter in message formatting to ``c`` (was ``k``\n   by mistake).\n-  Dropped [irc][1] as a dependency.\n-  Switch to MIT license. [1]: https://pypi.python.org/pypi/irc\n\n0.4 - 2014-03-30\n^^^^^^^^^^^^^^^^\n\n-  Add support for Python 2.7.\n-  Add more tests.\n-  Fix messaging with positional arguments given as a list not working.\n-  Add ability to create commands for raw code lines by specifying a\n   code to match.\n-  Add ability to do easy message formatting for colored, underlined and\n   bold text.\n\n0.3 - 2014-03-22\n^^^^^^^^^^^^^^^^\n\n-  Change settings to be a Python module instead of a dictionary.\n-  Change package loading.\n-  Enable the commands from the package of which the settings are in by\n   default.\n-  Add ability to process raw input lines.\n-  Add option to use precompiled regular expressions in the command\n   decorator.\n-  Add option to pass flags for compiling the regular expressions in the\n   command decorator.\n-  Fix returning message from command not working.\n\n0.2 - 2014-03-14\n^^^^^^^^^^^^^^^^\n\n-  Add tests.\n-  Add multiple and easier ways to send messages from a command.\n-  Add support for multiple patterns for the same command.\n-  Add a configurable command prefix setting for the more bot-like\n   commands.\n-  Trying to access a word in a ``Line`` now correctly returns an empty\n   string when the index does not exist.\n-  Fix passing positional arguments to ``Match.msg`` not working\n   properly.\n\n0.1 - 2013-11-17\n^^^^^^^^^^^^^^^^\n\n-  Initial release.\n\n.. |Build Status| image:: http://img.shields.io/travis/Gwildor/Pyromancer.svg\n   :target: https://travis-ci.org/Gwildor/Pyromancer\n.. |Latest Version| image:: http://img.shields.io/pypi/v/Pyromancer.svg\n   :target: https://pypi.python.org/pypi/Pyromancer\n.. |Coverage Status| image:: http://img.shields.io/coveralls/Gwildor/Pyromancer.svg\n   :target: https://coveralls.io/r/Gwildor/Pyromancer\n.. |MIT License| image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://tldrlegal.com/license/mit-license", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Gwildor/Pyromancer", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "Pyromancer", "package_url": "https://pypi.org/project/Pyromancer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Pyromancer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Gwildor/Pyromancer"}, "release_url": "https://pypi.org/project/Pyromancer/1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple framework for creating IRC bots", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/Gwildor/Pyromancer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/232fdfe9b017249e9e3841f19dff826ca290f5a6/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f4777696c646f722f5079726f6d616e6365722e737667\"></a> <a href=\"https://pypi.python.org/pypi/Pyromancer\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5859934e65649440cc30331d30976bff5774a647/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f5079726f6d616e6365722e737667\"></a> <a href=\"https://coveralls.io/r/Gwildor/Pyromancer\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46aae052efe3b1f7088307144f69ef1221a84e7d/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f4777696c646f722f5079726f6d616e6365722e737667\"></a> <a href=\"https://tldrlegal.com/license/mit-license\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7db8d43223f55fabe102838639f47819829c1ca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667\"></a></p>\n<p>Simple framework for creating IRC bots.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>init.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyromancer.objects</span> <span class=\"kn\">import</span> <span class=\"n\">Pyromancer</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Pyromancer</span><span class=\"p\">(</span><span class=\"s1\">'test.settings'</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>test/settings.py:</p>\n<pre><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s1\">'1.2.3.4'</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">6667</span>\n<span class=\"n\">nick</span> <span class=\"o\">=</span> <span class=\"s1\">'PyromancerBot'</span>\n<span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"s1\">'ISO-8859-1'</span>\n</pre>\n</div>\n<div id=\"custom-commands\">\n<h2>Custom commands</h2>\n<p>Writing own commands is fairly simple. Create a folder which will be the\npackage name, with a file named <tt>commands.py</tt> in it to hold the\ncommands. In <tt>commands.py</tt>, you can register functions to be a command\nwith the built-in command decorator.</p>\n<div id=\"id1\">\n<h3>Example</h3>\n<p>File layout:</p>\n<pre>test/\n    __init__.py\n    commands.py\n    settings.py\ninit.py\n</pre>\n<p>commands.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyromancer.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">command</span>\n\n\n<span class=\"nd\">@command</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'bye (.*)'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">bye</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Bye </span><span class=\"si\">{m[1]}</span><span class=\"s1\">!'</span>\n</pre>\n<p>On IRC:</p>\n<pre>&lt;User&gt; bye everyone\n&lt;Bot&gt; Bye everyone!\n</pre>\n<p>Pyromancer scans automatically for functions decorated using the\ncommands decorator, so all your commands in <tt>commands.py</tt> are used\nautomatically.</p>\n<p>You can also create a directory named <tt>commands</tt> with submodules\ncontaining the commands. Just make sure that you import either the\nmodules or all of the commands in the <tt>__init__.py</tt> file.</p>\n</div>\n<div id=\"the-command-decorator\">\n<h3>The <tt>command</tt> decorator</h3>\n<p>You must apply this to a function to mark it as a command. It will be\nused when scanning for and collecting commands.</p>\n<div id=\"parameters\">\n<h4>Parameters</h4>\n<ul>\n<li><p><tt>patterns</tt> - a regular expression or a list of expressions. When a\nlist is given, all patterns are attempted when matching the input,\nand only when all patterns in the list fail to match, the command is\nnot executed.</p>\n<pre><span class=\"nd\">@command</span><span class=\"p\">([</span><span class=\"s1\">'hi'</span><span class=\"p\">,</span> <span class=\"s1\">'hello'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">hi</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Hello!'</span>\n</pre>\n</li>\n<li><p><tt>prefix</tt> - a boolean which defaults to <tt>True</tt>. When true, the\ncommand pattern is only attempted to match when the message line\nstarts with the prefix defined in the settings of the bot. This is\nuseful for commands which are very bot-like (in contrary to commands\nwhich look and behave like natural language). Using a boolean and a\nsetting allows the same command to be triggered in different ways,\ndepending on the settings of the bot which installed the command\npackage.</p>\n</li>\n<li><p><tt>raw</tt> - a boolean which defaults to <tt>False</tt>. When true, the raw\ninput line sent from the server is used for matching the pattern,\ninstead of the message. Useful for matching lines which are not a\nmessage from an user, such as nick or topic changes.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"messaging-from-a-command\">\n<h3>Messaging from a command</h3>\n<p>Messaging from inside the function which makes up the command is as easy\nas can be for simple use cases, but can be done in numerous ways for the\nmore complex situations.</p>\n<p>Most of the times, arguments are passed to the <tt>Match.msg</tt> function,\nwhich applies formatting by default and provides some additional\nutilities. The most important of those is that when no target has been\npassed on as an argument, it will use either the channel or the user (in\ncase of a PM) whose input line triggered the command to be executed as\nthe target, effectively replying.</p>\n<div id=\"id2\">\n<h4>Parameters</h4>\n<ul>\n<li><tt>message</tt> - the message to be send to the server. Formatting will\nbe applied using any additional <tt>args</tt> and <tt>kwargs</tt>, so you can\napply the full power of the <a href=\"http://docs.python.org/3.3/library/string.html#format-string-syntax\" rel=\"nofollow\">Python Format\nMini-Language</a>\non the message.</li>\n<li><tt>args</tt> and <tt>kwargs</tt> - arguments to be passed on through the\nformatting which is applied on <tt>message</tt>.</li>\n</ul>\n</div>\n<div id=\"methods-of-messaging\">\n<h4>Methods of messaging</h4>\n<ul>\n<li><p>Return a <tt>message</tt></p>\n<pre><span class=\"nd\">@command</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'bye (.*)'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">bye</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Bye </span><span class=\"si\">{m[1]}</span><span class=\"s1\">!'</span>\n</pre>\n</li>\n<li><p>Return a tuple of <tt>message</tt> and optional <tt>args</tt> and <tt>kwargs</tt> to\nbe used when formatting <tt>message</tt>. <tt>args</tt> can be both a list of\narguments, or simply all the middle elements of the tuple.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">gibberish</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'A = </span><span class=\"si\">{}</span><span class=\"s1\">, B = </span><span class=\"si\">{}</span><span class=\"s1\">, C = </span><span class=\"si\">{c_char}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'c_char'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">}</span>\n</pre>\n</li>\n<li><p>Yield a <tt>message</tt> or a tuple of <tt>message</tt> and optional <tt>args</tt>\nand <tt>kwargs</tt>. Yielding can be done as much as you want, which is\nthe easiest way of sending multiple messages from one command.</p>\n<pre><span class=\"nd\">@command</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'say (.*)'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">say</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">', '</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"s1\">'Saying </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">part</span>\n</pre>\n</li>\n<li><p>Return a list of <tt>message</tt> or a tuple of <tt>message</tt> and optional\n<tt>args</tt> and <tt>kwargs</tt>.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">hi</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">'Hi'</span><span class=\"p\">,</span> <span class=\"s1\">'Hello'</span><span class=\"p\">]</span>\n</pre>\n</li>\n<li><p>Use <tt>Match.msg</tt>. This is the only way to benefit from the\nnon-default functionalities provided by this function.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">raw</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">msg</span><span class=\"p\">(</span><span class=\"s1\">'Raw </span><span class=\"si\">{}</span><span class=\"s1\"> message </span><span class=\"si\">{m[1]}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"extra-parameters-for-match-msg\">\n<h4>Extra parameters for <tt>Match.msg</tt></h4>\n<ul>\n<li><tt>target</tt> - the target to send the message to. If not provided, it\nwill attempt to use either the channel or user whose input line\ntriggered the command, which effectively results in replying.</li>\n<li><tt>raw</tt> - defaults to <tt>False</tt>. When true, no formatting is applied\non <tt>message</tt>.</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"timers\">\n<h2>Timers</h2>\n<p>You can register timers in a custom <tt>timers</tt> module, or you can create\nthem from inside commands or other timers. When creating or registering\na timer, you can either specify a <tt>timedelta</tt> or <tt>datetime</tt> object\nto schedule the timer. When specifying a timedelta, you can also specify\nthe amount of times the timer should execute, which defaults to\ninfinite. Timers can send messages based on arguments given upon\ninitialization, but also call a callable which in itself can send\nmessages or initialize new timers.</p>\n<p>When messaging from a timer, you must always specify a target to send\nthe message to before the message (when returning a message tuple), or\nwith the <tt>target</tt> argument on the <tt>Match</tt> instance when using the\n<tt>Match.msg</tt> method. Because there is no line which triggered the\ntimer, nothing can be used to decide where to send the message to when\nthe target is not specified.</p>\n<div id=\"example-of-timers-through-a-module\">\n<h3>Example of timers through a module</h3>\n<p>timers.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyromancer.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">timer</span>\n\n\n<span class=\"nd\">@timer</span><span class=\"p\">(</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">say_time</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'User'</span><span class=\"p\">,</span> <span class=\"s2\">\"It's </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"example-of-timers-through-messaging\">\n<h3>Example of timers through messaging</h3>\n<p>commands.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyromancer.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">timer</span>\n\n\n<span class=\"nd\">@command</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'start_timer'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">start_timer</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"s1\">'User'</span><span class=\"p\">,</span> <span class=\"s2\">\"It's </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n</pre>\n<p>You can also return a <tt>Timer</tt> instance, or specify a callable as the\nsecond item of the returned tuple, which is then called like any\nfunction with the <tt>timer</tt> decorator.</p>\n</div>\n</div>\n<div id=\"using-a-database\">\n<h2>Using a database</h2>\n<p>Using a database requires <a href=\"http://www.sqlalchemy.org\" rel=\"nofollow\">SQLAlchemy</a>.</p>\n<p>To enable the integrated database support, you have to set the\n<tt>database</tt> setting to a string which holds the URL to the database, as\naccepted by <a href=\"http://docs.sqlalchemy.org/en/latest/core/engines.html?highlight=create_engine#sqlalchemy.create_engine\" rel=\"nofollow\">SQLAlchemy\u2019s\ncreate_engine</a>\nfunction. Then, in a <tt>models</tt> module, you can import the <a href=\"http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative.html#sqlalchemy.ext.declarative.declarative_base\" rel=\"nofollow\">declarative\nbase</a>\nto construct your model, and import the\n<a href=\"http://docs.sqlalchemy.org/en/latest/orm/session.html\" rel=\"nofollow\">Session</a> for\nquerying.</p>\n<div id=\"example-with-a-simple-model-and-timer\">\n<h3>Example with a simple model and timer</h3>\n<p>This example creates a table named <tt>test</tt> in a SQLite <tt>test.db</tt>\nfile, and creates an entry with the current date and time every three\nseconds, and a command which returns the count of entries in the table.</p>\n<p>settings.py:</p>\n<pre><span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"s1\">'sqlite:///test.db'</span>\n</pre>\n<p>models.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">DateTime</span><span class=\"p\">,</span> <span class=\"n\">Integer</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyromancer.database</span> <span class=\"kn\">import</span> <span class=\"n\">Base</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Test</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">DateTime</span><span class=\"p\">)</span>\n</pre>\n<p>timers.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyromancer.database</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyromancer.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">timer</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Test</span>\n\n\n<span class=\"nd\">@timer</span><span class=\"p\">(</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">hi</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">()</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()))</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>commands.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyromancer.database</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyromancer.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Test</span>\n\n\n<span class=\"nd\">@command</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'timers'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">timers</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n    <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Timer count: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Test</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>Python 2.7 and 3.0 - 3.4 are supported. Note that development occurs on\nPython 3.</p>\n</div>\n<div id=\"to-do\">\n<h2>To do</h2>\n<ul>\n<li>Figure out how to do translation of messages through the\n<tt>Match.msg</tt> function.</li>\n</ul>\n</div>\n<div id=\"changelist\">\n<h2>Changelist</h2>\n<div id=\"id3\">\n<h3>1.0 - 2014-10-18</h3>\n<ul>\n<li>Add timers.</li>\n<li>Add integrated database support.</li>\n<li>Add command module which tracks channels and users.</li>\n<li>Change color code parameter in message formatting to <tt>c</tt> (was <tt>k</tt>\nby mistake).</li>\n<li>Dropped [irc][1] as a dependency.</li>\n<li>Switch to MIT license. [1]: <a href=\"https://pypi.python.org/pypi/irc\" rel=\"nofollow\">https://pypi.python.org/pypi/irc</a></li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.4 - 2014-03-30</h3>\n<ul>\n<li>Add support for Python 2.7.</li>\n<li>Add more tests.</li>\n<li>Fix messaging with positional arguments given as a list not working.</li>\n<li>Add ability to create commands for raw code lines by specifying a\ncode to match.</li>\n<li>Add ability to do easy message formatting for colored, underlined and\nbold text.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.3 - 2014-03-22</h3>\n<ul>\n<li>Change settings to be a Python module instead of a dictionary.</li>\n<li>Change package loading.</li>\n<li>Enable the commands from the package of which the settings are in by\ndefault.</li>\n<li>Add ability to process raw input lines.</li>\n<li>Add option to use precompiled regular expressions in the command\ndecorator.</li>\n<li>Add option to pass flags for compiling the regular expressions in the\ncommand decorator.</li>\n<li>Fix returning message from command not working.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.2 - 2014-03-14</h3>\n<ul>\n<li>Add tests.</li>\n<li>Add multiple and easier ways to send messages from a command.</li>\n<li>Add support for multiple patterns for the same command.</li>\n<li>Add a configurable command prefix setting for the more bot-like\ncommands.</li>\n<li>Trying to access a word in a <tt>Line</tt> now correctly returns an empty\nstring when the index does not exist.</li>\n<li>Fix passing positional arguments to <tt>Match.msg</tt> not working\nproperly.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1 - 2013-11-17</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1275165, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e811fa672683639a5b5a04dda753e416", "sha256": "52792e4275e9b32e25c1dd75c364f64b032fc1b19cae147697398cae10e5b9a5"}, "downloads": -1, "filename": "Pyromancer-0.1.tar.gz", "has_sig": false, "md5_digest": "e811fa672683639a5b5a04dda753e416", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3986, "upload_time": "2013-11-17T21:24:28", "upload_time_iso_8601": "2013-11-17T21:24:28.148637Z", "url": "https://files.pythonhosted.org/packages/44/5f/adf033c3eb4e4f62c618fa0e79803aee24d7e06bbd7ea0ee00e85e4e7269/Pyromancer-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a95433970eecd00cf59e27824c7179b1", "sha256": "8a944cbdd28b130954aa08372795c903d45d7f0a60fbca166ad643ab7150571b"}, "downloads": -1, "filename": "Pyromancer-0.2.tar.gz", "has_sig": false, "md5_digest": "a95433970eecd00cf59e27824c7179b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7064, "upload_time": "2014-03-22T14:03:43", "upload_time_iso_8601": "2014-03-22T14:03:43.326245Z", "url": "https://files.pythonhosted.org/packages/4a/72/47f3165b8512485f1459d24caa5f60739ae4752892086dd5c00cd202076f/Pyromancer-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "ebcd3d3da65f84e1406f755f0897afc6", "sha256": "0a58b5ad6c4bebae758160fe851c0ba4cb9b94adf13c5b37b6f1b63ba8f47ad9"}, "downloads": -1, "filename": "Pyromancer-0.3.tar.gz", "has_sig": false, "md5_digest": "ebcd3d3da65f84e1406f755f0897afc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7728, "upload_time": "2014-03-22T21:27:11", "upload_time_iso_8601": "2014-03-22T21:27:11.128214Z", "url": "https://files.pythonhosted.org/packages/3c/24/0e07c96186a5090c6157a0a1c68cfe54b53f20cbc62107601df1e9961c47/Pyromancer-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "249d8e12a4fc196bf112e4fcdd6d93fa", "sha256": "82b04b2e5e0cb2fa702c4b0e502dd675e32c2a9c9fe00ccebd11dd3e4f86633c"}, "downloads": -1, "filename": "Pyromancer-0.4.tar.gz", "has_sig": false, "md5_digest": "249d8e12a4fc196bf112e4fcdd6d93fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11046, "upload_time": "2014-03-30T16:04:04", "upload_time_iso_8601": "2014-03-30T16:04:04.611760Z", "url": "https://files.pythonhosted.org/packages/cc/80/4fae0c481104a0a3678fe87e6bd1968eba136c6c7a21b4dbbeebbb9bcc37/Pyromancer-0.4.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "25e110c4e1ecdd0dccb28042c722eb9c", "sha256": "5a91ace6b3e73edc316c1cd504aa30d0a2af016fff7fdc57bc7ef45a5c01f85f"}, "downloads": -1, "filename": "Pyromancer-1.0.tar.gz", "has_sig": false, "md5_digest": "25e110c4e1ecdd0dccb28042c722eb9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14356, "upload_time": "2014-10-18T20:09:13", "upload_time_iso_8601": "2014-10-18T20:09:13.571219Z", "url": "https://files.pythonhosted.org/packages/a3/d5/2c92e451f081a82ec6b3b3eb8761ada9a4cc23d2a77539d193a0005eb9b2/Pyromancer-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25e110c4e1ecdd0dccb28042c722eb9c", "sha256": "5a91ace6b3e73edc316c1cd504aa30d0a2af016fff7fdc57bc7ef45a5c01f85f"}, "downloads": -1, "filename": "Pyromancer-1.0.tar.gz", "has_sig": false, "md5_digest": "25e110c4e1ecdd0dccb28042c722eb9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14356, "upload_time": "2014-10-18T20:09:13", "upload_time_iso_8601": "2014-10-18T20:09:13.571219Z", "url": "https://files.pythonhosted.org/packages/a3/d5/2c92e451f081a82ec6b3b3eb8761ada9a4cc23d2a77539d193a0005eb9b2/Pyromancer-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:40 2020"}