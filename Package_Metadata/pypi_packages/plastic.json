{"info": {"author": "Andrew Geiger", "author_email": "andrew.geiger@corsosystems.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Plastic ORM\nAn ORM that molds itself to the data\n\n\nCurrently in beta validation. SQLite is the initial test.\nSee the `dev/` directory for example usage.\n\n\n# Quickstart\n\nHere's a quick way to get some data out of a SQLite database file:\n\n```\nfrom plastic.connectors.sqlite import PlasticSqlite\nPlasticSqlite._dbInfo = './dev/sqlite-test.db'\nclass Task(PlasticSqlite): pass\nprint(Task.find(Task.id[3:]))\n# [task(id=4,active=0,title='Uninteresting',description='Not much to say here.'),\n#  task(id=5,active=1,title='Very important',description=None)]\n```\n\nTo change a record you can set it this way:\n```\ntask = Task(id=4)\nprint(task)\n# task(id=4,active=0,title='Uninteresting',description='Not much to say here.')\ntask.title = \"A bit more interesting\"\ntask._commit()\nprint(Task(id=4))\n# task(id=4,active=0,title='A bit more interesting',description='Not much to say here.')\n```\n\n> Note: To avoid the need to call `_commit()`, set `_autocommit=True`. \n>   This can be done at the object or class level.\n> Also note that for SQLite a commit means _the database file is updated_!\n\nAny column of the table can be referenced as an attribute, and they can also be used as a filter. \nFor example, to find the tasks that are still active:\n```\nprint({task.title: task.description \n       for task \n       in Task.find(Task.active[0])})\n# {'Skipped': None, 'A bit more interesting': 'Not much to say here.'}\n```\n\nAdd an entry by instantiating without a bound key:\n\n```\nnewTask = Task()\nnewTask.title = \"A new task to do\"\nnewTask.active = True\nnewTask._commit()\nprint(Task.find(Task.id[5:])) # get tasks after the last added\n# [task(id=6,active=1,title='A new task to do',description=None)]\n```\n\nDeletion is _not_ yet supported. It wouldn't be hard, but there needs to be some sort of interlocking.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CorsoSource/plastic", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "plastic", "package_url": "https://pypi.org/project/plastic/", "platform": "", "project_url": "https://pypi.org/project/plastic/", "project_urls": {"Homepage": "https://github.com/CorsoSource/plastic"}, "release_url": "https://pypi.org/project/plastic/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "An ORM interface that molds itself to your data.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Plastic ORM</h1>\n<p>An ORM that molds itself to the data</p>\n<p>Currently in beta validation. SQLite is the initial test.\nSee the <code>dev/</code> directory for example usage.</p>\n<h1>Quickstart</h1>\n<p>Here's a quick way to get some data out of a SQLite database file:</p>\n<pre><code>from plastic.connectors.sqlite import PlasticSqlite\nPlasticSqlite._dbInfo = './dev/sqlite-test.db'\nclass Task(PlasticSqlite): pass\nprint(Task.find(Task.id[3:]))\n# [task(id=4,active=0,title='Uninteresting',description='Not much to say here.'),\n#  task(id=5,active=1,title='Very important',description=None)]\n</code></pre>\n<p>To change a record you can set it this way:</p>\n<pre><code>task = Task(id=4)\nprint(task)\n# task(id=4,active=0,title='Uninteresting',description='Not much to say here.')\ntask.title = \"A bit more interesting\"\ntask._commit()\nprint(Task(id=4))\n# task(id=4,active=0,title='A bit more interesting',description='Not much to say here.')\n</code></pre>\n<blockquote>\n<p>Note: To avoid the need to call <code>_commit()</code>, set <code>_autocommit=True</code>.\nThis can be done at the object or class level.\nAlso note that for SQLite a commit means <em>the database file is updated</em>!</p>\n</blockquote>\n<p>Any column of the table can be referenced as an attribute, and they can also be used as a filter.\nFor example, to find the tasks that are still active:</p>\n<pre><code>print({task.title: task.description \n       for task \n       in Task.find(Task.active[0])})\n# {'Skipped': None, 'A bit more interesting': 'Not much to say here.'}\n</code></pre>\n<p>Add an entry by instantiating without a bound key:</p>\n<pre><code>newTask = Task()\nnewTask.title = \"A new task to do\"\nnewTask.active = True\nnewTask._commit()\nprint(Task.find(Task.id[5:])) # get tasks after the last added\n# [task(id=6,active=1,title='A new task to do',description=None)]\n</code></pre>\n<p>Deletion is <em>not</em> yet supported. It wouldn't be hard, but there needs to be some sort of interlocking.</p>\n\n          </div>"}, "last_serial": 6658321, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "16b366757846cc822f234befc6ac2ed6", "sha256": "2585cec04f143e88cf7b44a605e6f8bedd97752103398f15eb859806dad78fe1"}, "downloads": -1, "filename": "plastic-0.1.0.tar.gz", "has_sig": false, "md5_digest": "16b366757846cc822f234befc6ac2ed6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14258, "upload_time": "2020-01-01T21:02:47", "upload_time_iso_8601": "2020-01-01T21:02:47.030692Z", "url": "https://files.pythonhosted.org/packages/8c/03/a70f1a69d20cc07c6cd4c5d4542779c9b827acaaeae455da570a397ef482/plastic-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "736646d9ff796bf2a33294e3e423d562", "sha256": "c299e2748ac313a52848416a259c44a7b1b343cdd1770e55762b3b0385e406eb"}, "downloads": -1, "filename": "plastic-0.1.1.tar.gz", "has_sig": false, "md5_digest": "736646d9ff796bf2a33294e3e423d562", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15741, "upload_time": "2020-01-02T03:01:53", "upload_time_iso_8601": "2020-01-02T03:01:53.838411Z", "url": "https://files.pythonhosted.org/packages/3b/99/474f8e1e6a43c47286a8d81c6bc78b9af48de0dcfdfbaddd49586c7ce047/plastic-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "dc495158c3135968b054bfc7436f63b8", "sha256": "55f88753229f8c2fd13829e5e5243005abfbbffcb7a58d223d910d1371e7fead"}, "downloads": -1, "filename": "plastic-0.2.0.tar.gz", "has_sig": false, "md5_digest": "dc495158c3135968b054bfc7436f63b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16403, "upload_time": "2020-02-19T04:59:17", "upload_time_iso_8601": "2020-02-19T04:59:17.752680Z", "url": "https://files.pythonhosted.org/packages/02/d1/8a012e6d09e881a230927a61b3aaca7c6c734a0100b25a2922e78111be66/plastic-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc495158c3135968b054bfc7436f63b8", "sha256": "55f88753229f8c2fd13829e5e5243005abfbbffcb7a58d223d910d1371e7fead"}, "downloads": -1, "filename": "plastic-0.2.0.tar.gz", "has_sig": false, "md5_digest": "dc495158c3135968b054bfc7436f63b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16403, "upload_time": "2020-02-19T04:59:17", "upload_time_iso_8601": "2020-02-19T04:59:17.752680Z", "url": "https://files.pythonhosted.org/packages/02/d1/8a012e6d09e881a230927a61b3aaca7c6c734a0100b25a2922e78111be66/plastic-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:38 2020"}