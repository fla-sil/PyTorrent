{"info": {"author": "Jian Jin", "author_email": "jjtt0926@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# cbastats\n\n---\n\ncbastats\u53ef\u7528\u4e8e\u83b7\u53d6CBA\u76f8\u5173\u6570\u636e\uff0c\u5305\u62ec\u6bcf48\u5206\u949f\u56de\u5408\u6570\uff0c\u8fdb\u653b\u8bc4\u5206\u548c\u9632\u5b88\u8bc4\u5206\u7b49\u3002\n\nPython package to access CBA stats, including advance stats like pace, offensive rating and defensive rating etc..\n\n ## \u5b89\u88c5 Installation\n\n \u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u4ece[PyPI](https://pypi.org/project/cbastats/)\u4e0b\u8f7d\n \n You can install the package from [PyPI](https://pypi.org/project/cbastats/) using command below \n \n \n    pip install cbastats\n    \n\u8fd9\u4e2a\u5305\u662f\u75283.7\u5f00\u53d1\u7684\uff0c\u4e0d\u8fc7\u53ea\u8981\u4f60\u7528\u7684\u662fpython 3\u5c31\u5e94\u8be5\u4e0d\u4f1a\u6709\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u53ef\u80fdpython 2\u4e5f\u53ef\u4ee5\u3002\n\n The package is developed using python 3.7 but there shouldn't be compatibility issue as long as you are using python 3\n (or even python 2).\n \n \u5f88\u5feb\u8fd9\u4e2a\u5305\u4e5f\u53ef\u5728conda\u4e2d\u4e0b\u8f7d\u5b89\u88c5\u3002\n \n The package will be available in conda in the near future.\n \n ## \u4f7f\u7528\u8bf4\u660e How to Use\n \n \u8bbe\u8ba1\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u628a\u8fd9\u4e2a\u5305\u8bbe\u8ba1\u6210\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5c3d\u91cf\u8ba9\u6570\u636e\u7684\u8f93\u51fa\u5bf9\u547d\u4ee4\u884c\u66f4\u53cb\u597d\u3002\n \n It's not meant to be used as a command line application due to the width of the data. However, efforts were made to \n optimize the output under a command line environment by using [tabulate](https://pypi.org/project/tabulate/).\n \n \u76ee\u524d\u4e3a\u6b62\uff082020\u5e743\u670815\u53f7\uff09\u552f\u4e00\u4e00\u79cd\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u662f\u7528pandas dataframe\u3002\u5c3d\u7ba1\u6211\u5176\u5b9e\u5199\u4e86\u4e00\u4e2a\u76f4\u63a5\u4ececsv\u6587\u4ef6\u5bfc\u5165\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u7531\u4e8e\u7bee\u7403\u7edf\u8ba1\u6570\u636e\u7684\n \u590d\u6742\u6027\uff0c\u8fd8\u662f\u5efa\u8bae\u5927\u5bb6\u76f4\u63a5\u4f7f\u7528\u6211\u63d0\u4f9b\u7684AWS MySQL\u6570\u636e\u5e93\u3002Guest\u8d26\u53f7\u5728\u4e0b\u9762\u6709\u63d0\u4f9b\u3002\n \n At this point (3/15/2020), the only entry point is pandas dataframe, meaning you can only \n instantiate an object from a pandas dataframe. Although a convenient function to load directly from csv file is \n provided, due to the intrinsic complexity of basketball stats, the preferred way to load CBA stats is through my hosted\n  AWS MySQL database. A guest account is provided below. \n  \n \u4e0d\u63a8\u8350\u7528csv\u6587\u4ef6\u7684\u539f\u56e0\u662f\u8fd9\u4e2a\u5305\u7684\u5e95\u5c42\u662fpandas\uff0c\u5982\u679c\u8981\u8fd0\u7b97\u7684\u8bdd\u6bcf\u4e00\u5217\u7684\u540d\u5b57\u90fd\u5fc5\u987b\u4e0e\u6211\u7684\u6570\u636e\u76f8\u540c\uff0c\u6240\u4ee5\u5c31\u4e0d\u63a8\u8350\u5927\u5bb6\u7528\u4e86\u3002\n  \n The reason csv file is not recommended is, for the stats to calculate correctly, your column names will have to \n exactly match the column names of my data and there are over 15 basic stats are used, 3 point made, 3 point \n missed, minutes played, steals etc.. \n \n #### \u8f7d\u5165\u6570\u636e Load Data\n \n \u6240\u6709\u6570\u636e\u90fd\u5728 AWS MySQL \u4e0a\uff0c\u672a\u6765\u4f1a\u5199\u4e00\u4e2aAPI\u6765\u63d0\u4f9b\u6570\u636e\u3002\n \nAll the data are hosted on an AWS MySQL server. A REST API will be built to distribute \n the data in the future. \n \n \u8f7d\u5165\u4e0b\u9762\u8fd9\u4e9b\u5305\n \n Import these packages\n   \n    from CBAStats.Player import *\n    from CBAStats.Team import *\n    import datetime\n    from sqlalchemy import create_engine\n  \n  \u628a\u6570\u636e\u653e\u5165\u4e00\u4e2apandas dataframe\n Run commands below to load the data into a pandas dataframe\n  \n    user_name = 'guest'\n    passcode = 'Guest123456'\n    endpoint = 'cbashuju.ctkaehd5rxxe.us-east-1.rds.amazonaws.com'\n    database = 'CBA_Data'\n    engine = create_engine(f'mysql+pymysql://{user_name}:{passcode}@{endpoint}/{database}')    \n    connection= engine.connect()\n    df = pd.read_sql(\"select * from CBA_Data.PlayerStatsPerGame\", connection)\n    connection.close()\n\n#### \u6240\u6709\u7403\u961f\u6570\u636e All Teams Stats\nRun commands below to get advance team stats\n\n    teams = Team('',df)\n    teams_df = pd.concat([teams.mov, teams.tm_pace, teams.tm_ortg, teams.tm_drtg, teams.tm_nrtg], axis=1)\n    teams_df.columns=['\u573a\u5747\u51c0\u80dc\u5206MOV', 'Pace', 'OffensiveRating', 'DefensiveRating', 'NetRating']\n    teams_df = teams_df.sort_values(by='NetRating',ascending=False)\n    teams_df\n\nOutput\n\n|\u7403\u961f|\u573a\u5747\u51c0\u80dc\u5206MOV|\tPace\t|OffensiveRating|\tDefensiveRating|\tNetRating|\n|---|---|---|---|---|---|\n|\u5e7f\u4e1c|\t16.9|\t97.3\t|127.1|\t109.2|\t17.8|\n|\u65b0\u7586|\t9.2|\t95.6|\t122.8|\t113.0|\t9.7\n|\u9752\u5c9b|\t6.5|\t96.0|\t121.4|\t114.5|\t6.9\n|\u6d59\u6c5f|\t5.4|\t92.1|\t123.6|\t117.5|\t6.0\n|\u5c71\u4e1c|\t4.9|\t91.9|\t118.4|\t112.9|\t5.4\n|\u8fbd\u5b81|\t4.5|\t94.5|\t118.7|\t113.8|\t4.9\n|\u5e7f\u53a6|\t4.5|\t94.6|\t113.9|\t109.0|\t4.8\n|\u5409\u6797|\t4.3|\t92.5|\t119.3|\t114.5|\t4.7\n|\u5c71\u897f|\t3.3|\t91.3|\t117.1|\t113.4|\t3.7\n\n#### \u6240\u6709\u7403\u5458\u6570\u636e All Players Stats\n\n    players = Player('',df)\n    players_df = pd.concat([players.plr_ortg, players.plr_drtg, players.plr_nrtg,players.plr_usg], axis=1)\n  \n    players_df.columns=['OffensiveRating', 'DefensiveRating', 'NetRating','UsagePercent']\n    players_df = players_df.sort_values(by=['NetRating','UsagePercent'],ascending=False)\n    \n    \n    players_df = pd.merge(players_df,players.plr_total_stats,left_index=True,right_index=True)\n    players_df.reset_index(inplace=True)\n    players_df.sort_values(by=['\u7403\u961f','NetRating','UsagePercent'],ascending=False,inplace=True)\n    players_df\n    \n#### \u5355\u4e2a\u7403\u961f\u6570\u636e Single Team Stats\n\n\n    teams = Team('\u5e7f\u4e1c',df)\n    \n    teams_df = pd.concat([teams.mov, teams.tm_pace, teams.tm_ortg, teams.tm_drtg, teams.tm_nrtg], axis=1)\n    teams_df.columns=['\u573a\u5747\u51c0\u80dc\u5206MOV', 'Pace', 'OffensiveRating', 'DefensiveRating', 'NetRating']\n    teams_df = teams_df.sort_values(by='NetRating',ascending=False)\n    teams_df\n\n\n#### \u5355\u4e2a\u7403\u5458\u9ad8\u9636\u6570\u636e Single Player Stats\n\n    players = Player('\u6613\u5efa\u8054',df)\n    \n    players_df = pd.concat([players.plr_ortg, players.plr_drtg, players.plr_nrtg,players.plr_usg], axis=1)\n    \n    players_df.columns=['OffensiveRating', 'DefensiveRating', 'NetRating','UsagePercent']\n    players_df = players_df.sort_values(by=['NetRating','UsagePercent'],ascending=False)\n    \n    players_df = pd.merge(players_df,players.plr_total_stats,left_index=True,right_index=True)\n    players_df    \n\n\n## Working Items:\n1. Rebuild data loading into a REST API\n2. Migrate data to a MongoDB\n3. Obtain historical CBA data\n4. Develop an anecdote discover system - e.g. Jian is the first player to get 40+ points, 10+ rebounds and 10+ assits", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/JJ0131/Cbastats/archive/v0.0.31.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JJ0131/Cbastats", "keywords": "CBA,Baseketball", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cbastats", "package_url": "https://pypi.org/project/cbastats/", "platform": "", "project_url": "https://pypi.org/project/cbastats/", "project_urls": {"Download": "https://github.com/JJ0131/Cbastats/archive/v0.0.31.tar.gz", "Homepage": "https://github.com/JJ0131/Cbastats"}, "release_url": "https://pypi.org/project/cbastats/0.0.31/", "requires_dist": null, "requires_python": "", "summary": "Python package to access CBA stats", "version": "0.0.31", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cbastats</h1>\n<hr>\n<p>cbastats\u53ef\u7528\u4e8e\u83b7\u53d6CBA\u76f8\u5173\u6570\u636e\uff0c\u5305\u62ec\u6bcf48\u5206\u949f\u56de\u5408\u6570\uff0c\u8fdb\u653b\u8bc4\u5206\u548c\u9632\u5b88\u8bc4\u5206\u7b49\u3002</p>\n<p>Python package to access CBA stats, including advance stats like pace, offensive rating and defensive rating etc..</p>\n<h2>\u5b89\u88c5 Installation</h2>\n<p>\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u4ece<a href=\"https://pypi.org/project/cbastats/\" rel=\"nofollow\">PyPI</a>\u4e0b\u8f7d</p>\n<p>You can install the package from <a href=\"https://pypi.org/project/cbastats/\" rel=\"nofollow\">PyPI</a> using command below</p>\n<pre><code>pip install cbastats\n</code></pre>\n<p>\u8fd9\u4e2a\u5305\u662f\u75283.7\u5f00\u53d1\u7684\uff0c\u4e0d\u8fc7\u53ea\u8981\u4f60\u7528\u7684\u662fpython 3\u5c31\u5e94\u8be5\u4e0d\u4f1a\u6709\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u53ef\u80fdpython 2\u4e5f\u53ef\u4ee5\u3002</p>\n<p>The package is developed using python 3.7 but there shouldn't be compatibility issue as long as you are using python 3\n(or even python 2).</p>\n<p>\u5f88\u5feb\u8fd9\u4e2a\u5305\u4e5f\u53ef\u5728conda\u4e2d\u4e0b\u8f7d\u5b89\u88c5\u3002</p>\n<p>The package will be available in conda in the near future.</p>\n<h2>\u4f7f\u7528\u8bf4\u660e How to Use</h2>\n<p>\u8bbe\u8ba1\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u628a\u8fd9\u4e2a\u5305\u8bbe\u8ba1\u6210\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u4e0d\u8fc7\u6211\u8fd8\u662f\u5c3d\u91cf\u8ba9\u6570\u636e\u7684\u8f93\u51fa\u5bf9\u547d\u4ee4\u884c\u66f4\u53cb\u597d\u3002</p>\n<p>It's not meant to be used as a command line application due to the width of the data. However, efforts were made to\noptimize the output under a command line environment by using <a href=\"https://pypi.org/project/tabulate/\" rel=\"nofollow\">tabulate</a>.</p>\n<p>\u76ee\u524d\u4e3a\u6b62\uff082020\u5e743\u670815\u53f7\uff09\u552f\u4e00\u4e00\u79cd\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u662f\u7528pandas dataframe\u3002\u5c3d\u7ba1\u6211\u5176\u5b9e\u5199\u4e86\u4e00\u4e2a\u76f4\u63a5\u4ececsv\u6587\u4ef6\u5bfc\u5165\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u7531\u4e8e\u7bee\u7403\u7edf\u8ba1\u6570\u636e\u7684\n\u590d\u6742\u6027\uff0c\u8fd8\u662f\u5efa\u8bae\u5927\u5bb6\u76f4\u63a5\u4f7f\u7528\u6211\u63d0\u4f9b\u7684AWS MySQL\u6570\u636e\u5e93\u3002Guest\u8d26\u53f7\u5728\u4e0b\u9762\u6709\u63d0\u4f9b\u3002</p>\n<p>At this point (3/15/2020), the only entry point is pandas dataframe, meaning you can only\ninstantiate an object from a pandas dataframe. Although a convenient function to load directly from csv file is\nprovided, due to the intrinsic complexity of basketball stats, the preferred way to load CBA stats is through my hosted\nAWS MySQL database. A guest account is provided below.</p>\n<p>\u4e0d\u63a8\u8350\u7528csv\u6587\u4ef6\u7684\u539f\u56e0\u662f\u8fd9\u4e2a\u5305\u7684\u5e95\u5c42\u662fpandas\uff0c\u5982\u679c\u8981\u8fd0\u7b97\u7684\u8bdd\u6bcf\u4e00\u5217\u7684\u540d\u5b57\u90fd\u5fc5\u987b\u4e0e\u6211\u7684\u6570\u636e\u76f8\u540c\uff0c\u6240\u4ee5\u5c31\u4e0d\u63a8\u8350\u5927\u5bb6\u7528\u4e86\u3002</p>\n<p>The reason csv file is not recommended is, for the stats to calculate correctly, your column names will have to\nexactly match the column names of my data and there are over 15 basic stats are used, 3 point made, 3 point\nmissed, minutes played, steals etc..</p>\n<h4>\u8f7d\u5165\u6570\u636e Load Data</h4>\n<p>\u6240\u6709\u6570\u636e\u90fd\u5728 AWS MySQL \u4e0a\uff0c\u672a\u6765\u4f1a\u5199\u4e00\u4e2aAPI\u6765\u63d0\u4f9b\u6570\u636e\u3002</p>\n<p>All the data are hosted on an AWS MySQL server. A REST API will be built to distribute\nthe data in the future.</p>\n<p>\u8f7d\u5165\u4e0b\u9762\u8fd9\u4e9b\u5305</p>\n<p>Import these packages</p>\n<pre><code>from CBAStats.Player import *\nfrom CBAStats.Team import *\nimport datetime\nfrom sqlalchemy import create_engine\n</code></pre>\n<p>\u628a\u6570\u636e\u653e\u5165\u4e00\u4e2apandas dataframe\nRun commands below to load the data into a pandas dataframe</p>\n<pre><code>user_name = 'guest'\npasscode = 'Guest123456'\nendpoint = 'cbashuju.ctkaehd5rxxe.us-east-1.rds.amazonaws.com'\ndatabase = 'CBA_Data'\nengine = create_engine(f'mysql+pymysql://{user_name}:{passcode}@{endpoint}/{database}')    \nconnection= engine.connect()\ndf = pd.read_sql(\"select * from CBA_Data.PlayerStatsPerGame\", connection)\nconnection.close()\n</code></pre>\n<h4>\u6240\u6709\u7403\u961f\u6570\u636e All Teams Stats</h4>\n<p>Run commands below to get advance team stats</p>\n<pre><code>teams = Team('',df)\nteams_df = pd.concat([teams.mov, teams.tm_pace, teams.tm_ortg, teams.tm_drtg, teams.tm_nrtg], axis=1)\nteams_df.columns=['\u573a\u5747\u51c0\u80dc\u5206MOV', 'Pace', 'OffensiveRating', 'DefensiveRating', 'NetRating']\nteams_df = teams_df.sort_values(by='NetRating',ascending=False)\nteams_df\n</code></pre>\n<p>Output</p>\n<table>\n<thead>\n<tr>\n<th>\u7403\u961f</th>\n<th>\u573a\u5747\u51c0\u80dc\u5206MOV</th>\n<th>Pace</th>\n<th>OffensiveRating</th>\n<th>DefensiveRating</th>\n<th>NetRating</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\u5e7f\u4e1c</td>\n<td>16.9</td>\n<td>97.3</td>\n<td>127.1</td>\n<td>109.2</td>\n<td>17.8</td>\n</tr>\n<tr>\n<td>\u65b0\u7586</td>\n<td>9.2</td>\n<td>95.6</td>\n<td>122.8</td>\n<td>113.0</td>\n<td>9.7</td>\n</tr>\n<tr>\n<td>\u9752\u5c9b</td>\n<td>6.5</td>\n<td>96.0</td>\n<td>121.4</td>\n<td>114.5</td>\n<td>6.9</td>\n</tr>\n<tr>\n<td>\u6d59\u6c5f</td>\n<td>5.4</td>\n<td>92.1</td>\n<td>123.6</td>\n<td>117.5</td>\n<td>6.0</td>\n</tr>\n<tr>\n<td>\u5c71\u4e1c</td>\n<td>4.9</td>\n<td>91.9</td>\n<td>118.4</td>\n<td>112.9</td>\n<td>5.4</td>\n</tr>\n<tr>\n<td>\u8fbd\u5b81</td>\n<td>4.5</td>\n<td>94.5</td>\n<td>118.7</td>\n<td>113.8</td>\n<td>4.9</td>\n</tr>\n<tr>\n<td>\u5e7f\u53a6</td>\n<td>4.5</td>\n<td>94.6</td>\n<td>113.9</td>\n<td>109.0</td>\n<td>4.8</td>\n</tr>\n<tr>\n<td>\u5409\u6797</td>\n<td>4.3</td>\n<td>92.5</td>\n<td>119.3</td>\n<td>114.5</td>\n<td>4.7</td>\n</tr>\n<tr>\n<td>\u5c71\u897f</td>\n<td>3.3</td>\n<td>91.3</td>\n<td>117.1</td>\n<td>113.4</td>\n<td>3.7</td>\n</tr></tbody></table>\n<h4>\u6240\u6709\u7403\u5458\u6570\u636e All Players Stats</h4>\n<pre><code>players = Player('',df)\nplayers_df = pd.concat([players.plr_ortg, players.plr_drtg, players.plr_nrtg,players.plr_usg], axis=1)\n\nplayers_df.columns=['OffensiveRating', 'DefensiveRating', 'NetRating','UsagePercent']\nplayers_df = players_df.sort_values(by=['NetRating','UsagePercent'],ascending=False)\n\n\nplayers_df = pd.merge(players_df,players.plr_total_stats,left_index=True,right_index=True)\nplayers_df.reset_index(inplace=True)\nplayers_df.sort_values(by=['\u7403\u961f','NetRating','UsagePercent'],ascending=False,inplace=True)\nplayers_df\n</code></pre>\n<h4>\u5355\u4e2a\u7403\u961f\u6570\u636e Single Team Stats</h4>\n<pre><code>teams = Team('\u5e7f\u4e1c',df)\n\nteams_df = pd.concat([teams.mov, teams.tm_pace, teams.tm_ortg, teams.tm_drtg, teams.tm_nrtg], axis=1)\nteams_df.columns=['\u573a\u5747\u51c0\u80dc\u5206MOV', 'Pace', 'OffensiveRating', 'DefensiveRating', 'NetRating']\nteams_df = teams_df.sort_values(by='NetRating',ascending=False)\nteams_df\n</code></pre>\n<h4>\u5355\u4e2a\u7403\u5458\u9ad8\u9636\u6570\u636e Single Player Stats</h4>\n<pre><code>players = Player('\u6613\u5efa\u8054',df)\n\nplayers_df = pd.concat([players.plr_ortg, players.plr_drtg, players.plr_nrtg,players.plr_usg], axis=1)\n\nplayers_df.columns=['OffensiveRating', 'DefensiveRating', 'NetRating','UsagePercent']\nplayers_df = players_df.sort_values(by=['NetRating','UsagePercent'],ascending=False)\n\nplayers_df = pd.merge(players_df,players.plr_total_stats,left_index=True,right_index=True)\nplayers_df    \n</code></pre>\n<h2>Working Items:</h2>\n<ol>\n<li>Rebuild data loading into a REST API</li>\n<li>Migrate data to a MongoDB</li>\n<li>Obtain historical CBA data</li>\n<li>Develop an anecdote discover system - e.g. Jian is the first player to get 40+ points, 10+ rebounds and 10+ assits</li>\n</ol>\n\n          </div>"}, "last_serial": 6823741, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "6f6f170b22adee194af114dc047d94d9", "sha256": "ddc8e7f1bb719ec2bebae32719ac8039a6e0e4ce8bc8b62a6f8be8a9fbaa8a8e"}, "downloads": -1, "filename": "cbastats-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6f6f170b22adee194af114dc047d94d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11534, "upload_time": "2020-03-16T03:53:43", "upload_time_iso_8601": "2020-03-16T03:53:43.955880Z", "url": "https://files.pythonhosted.org/packages/0d/4f/4e1a9195dc45477e4af38b92bddfe3e8967595eab8f0c1febe0ddb40dbbc/cbastats-0.0.3.tar.gz", "yanked": false}], "0.0.31": [{"comment_text": "", "digests": {"md5": "ccfd350285f3a6bbbfd07ef337f94179", "sha256": "61b032c3a08a7a44cff3e18474ace701700137ff5fff2f61a5da0f1afb7c31e7"}, "downloads": -1, "filename": "cbastats-0.0.31.tar.gz", "has_sig": false, "md5_digest": "ccfd350285f3a6bbbfd07ef337f94179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11548, "upload_time": "2020-03-16T20:10:11", "upload_time_iso_8601": "2020-03-16T20:10:11.561932Z", "url": "https://files.pythonhosted.org/packages/5d/95/9796a0d9451cc186e2a2127e7ce377678c7f1907abbb3bb2b74cba6ebc4a/cbastats-0.0.31.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "078ac289bd8678cad95ee6d672d90a09", "sha256": "85c0fda93807e81c1989f17d079fbe382434395e92157b4b9ee6a36d4d3c7757"}, "downloads": -1, "filename": "cbastats-0.0.4.tar.gz", "has_sig": false, "md5_digest": "078ac289bd8678cad95ee6d672d90a09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11542, "upload_time": "2020-03-16T20:10:12", "upload_time_iso_8601": "2020-03-16T20:10:12.739362Z", "url": "https://files.pythonhosted.org/packages/fd/7e/e97861de1911534e549247fa9806e9ba4ffcd412d7026f1640e6497877dc/cbastats-0.0.4.tar.gz", "yanked": false}], "v0.0.2": [{"comment_text": "", "digests": {"md5": "be121aafcf71685f59541bbb3a25b920", "sha256": "f0df80c7448543b374235e901d7a535dac98adf1f2ed2636cc78ec34f420eda3"}, "downloads": -1, "filename": "cbastats-v0.0.2.tar.gz", "has_sig": false, "md5_digest": "be121aafcf71685f59541bbb3a25b920", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5784, "upload_time": "2020-03-16T00:43:54", "upload_time_iso_8601": "2020-03-16T00:43:54.054188Z", "url": "https://files.pythonhosted.org/packages/a0/c1/0caee427c30057f040ae82def3d792f1908dfc5974959f253a7d66937eb6/cbastats-v0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ccfd350285f3a6bbbfd07ef337f94179", "sha256": "61b032c3a08a7a44cff3e18474ace701700137ff5fff2f61a5da0f1afb7c31e7"}, "downloads": -1, "filename": "cbastats-0.0.31.tar.gz", "has_sig": false, "md5_digest": "ccfd350285f3a6bbbfd07ef337f94179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11548, "upload_time": "2020-03-16T20:10:11", "upload_time_iso_8601": "2020-03-16T20:10:11.561932Z", "url": "https://files.pythonhosted.org/packages/5d/95/9796a0d9451cc186e2a2127e7ce377678c7f1907abbb3bb2b74cba6ebc4a/cbastats-0.0.31.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:10 2020"}