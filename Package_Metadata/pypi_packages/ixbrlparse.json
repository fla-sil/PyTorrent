{"info": {"author": "David Kane", "author_email": "david@dkane.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "# ixbrl-parse\n\n\n![Test status](https://github.com/drkane/ixbrl-parse/workflows/tests/badge.svg)\n[![PyPI version](https://badge.fury.io/py/ixbrlparse.svg)](https://pypi.org/project/ixbrlparse/)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ixbrlparse)\n![PyPI - License](https://img.shields.io/pypi/l/ixbrlparse)\n\nA python module for getting useful data out of ixbrl files. Developed for a project with \n[Power to Change](https://www.powertochange.org.uk/) looking at how to extract data from \nfinancial documents of community businesses. The library is at an early stage.\n\n## Requirements\n\nThe module requires [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) to parse the documents.\n\n## How to install\n\nYou can install from pypi using pip:\n\n```\npip install ixbrlparse\n```\n\n## How to use\n\n### Run the python module\n\nYou can run the module directly to extract data from an IXBRL file.\n\n```bash\npython -m ixbrlparse example_file.html\n```\n\nThe various options for using this can be found through:\n\n```bash\npython -m ixbrlparse -h\n# optional arguments:\n#   -h, --help            show this help message and exit\n#   --outfile OUTFILE     Where to output the file\n#   --format {csv,json,jsonlines,jsonl}\n#                         format of the output\n#   --fields {numeric,nonnumeric,all}\n#                         Which fields to output\n```\n\n### Use as a python module\n\nAn example of usage is shown in [`test.py`](test.py).\n\n#### Import the `IXBRL` class which parses the file.\n\n```python\nfrom ixbrlparse import IXBRL\n```\n\n#### Initialise an object and parse the file\n\nYou need to pass a file handle or other object with a `.read()` method.\n\n```python\nwith open('sample_ixbrl.html', encoding=\"utf8\") as a:\n  x = IXBRL(a)\n```\n\nIf your IXBRL data comes as a string then use a `io.StringIO` wrapper to\npass it to the class:\n\n```python\nimport io\nfrom ixbrlparse import IXBRL\n\ncontent = '''<some ixbrl content>'''\nx = IXBRL(io.StringIO(content))\n```\n\n\n#### Get the contexts and units used in the data\n\nThese are held in the object. The contexts are stored as a dictionary with the context\nid as the key, and a `ixbrlContext` object as the value.\n\n```python\nprint(x.contexts)\n# {\n#    \"cfwd_2018_03_31\": ixbrlContext(\n#       id=\"cfwd_2018_03_31\",\n#       entity=\"0123456\", # company number\n#       segments=[], # used for hypercubes\n#       instant=\"2018-03-31\",\n#       startdate=None, # used for periods\n#       enddate=None, # used for periods\n#    ),\n#    ....\n# }\n```\n\nThe units are stored as key:value dictionary entries\n```python\nprint(x.units)\n# {\n#    \"GBP\": \"ISO4107:GBP\"\n#    \"shares\": \"shares\"\n# }\n```\n\n#### Get financial facts\n\nNumeric facts are stored in `x.numeric` as a list of `ixbrlNumeric` objects.\nThe `ixbrlNumeric.value` object contains the value as a parsed python number\n(after the sign and scale formatting values have been applied).\n\n`ixbrlNumeric.context` holds the context object relating to this value.\nThe `.name` and `.schema` values give the key of this value, according to\nthe applied schema.\n\nNon-numeric facts are stored in `x.nonnumeric` as a list of `ixbrlNonnumeric`\nobjects, with similar `.value`, `.context`, `.name` and `.schema` values. \nThe value of `.value` will be a string for non-numeric facts.\n\n#### Check for any parsing errors\n\nBy default, the parser will throw an exception if it encounters an error\nwhen processing the document.\n\nYou can parse `raise_on_error=False` to the initial object to suppress\nthese exceptions. You can then access a list of the errors (and the element)\nthat created them through the `.errors` attribute. For example:\n\n```python\nwith open('sample_ixbrl.html', encoding=\"utf8\") as a:\n  x = IXBRL(a, raise_on_error=False)\n  print(x.errors) # populated with any exceptions found\n  # [ eg...\n  #   {\n  #     \"error\": <NotImplementedError>,\n  #     \"element\": <BeautifulSoupElement>\n  #   }\n  # ]\n```\n\nNote that the error catching is only available for parsing of `.nonnumeric`\nand `numeric` items in the document. Any other errors with parsing will be\nthrown as normal no matter what `raise_on_error` is set to.\n\n## Run tests\n\nTests can be run with `pytest`:\n\n```bash\npip install -e . # install the package\npytest\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/drkane/ixbrl-parse", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ixbrlparse", "package_url": "https://pypi.org/project/ixbrlparse/", "platform": "", "project_url": "https://pypi.org/project/ixbrlparse/", "project_urls": {"Homepage": "https://github.com/drkane/ixbrl-parse"}, "release_url": "https://pypi.org/project/ixbrlparse/0.1.1/", "requires_dist": ["beautifulsoup4", "lxml"], "requires_python": ">=3.5", "summary": "A python module for getting useful data out of ixbrl files.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ixbrl-parse</h1>\n<p><img alt=\"Test status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d864fb08148ff9ed51318467a40201105ee4bf1/68747470733a2f2f6769746875622e636f6d2f64726b616e652f697862726c2d70617273652f776f726b666c6f77732f74657374732f62616467652e737667\">\n<a href=\"https://pypi.org/project/ixbrlparse/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d8d369ead3c32ddeeffcbb07faea23e558e9cf7/68747470733a2f2f62616467652e667572792e696f2f70792f697862726c70617273652e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d942be26e7bc72ab17968cde31ed4f4807aa13f5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f697862726c7061727365\">\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38d8f42828a131299e4937bc3c2189213cf5682b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f697862726c7061727365\"></p>\n<p>A python module for getting useful data out of ixbrl files. Developed for a project with\n<a href=\"https://www.powertochange.org.uk/\" rel=\"nofollow\">Power to Change</a> looking at how to extract data from\nfinancial documents of community businesses. The library is at an early stage.</p>\n<h2>Requirements</h2>\n<p>The module requires <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\" rel=\"nofollow\">BeautifulSoup</a> to parse the documents.</p>\n<h2>How to install</h2>\n<p>You can install from pypi using pip:</p>\n<pre><code>pip install ixbrlparse\n</code></pre>\n<h2>How to use</h2>\n<h3>Run the python module</h3>\n<p>You can run the module directly to extract data from an IXBRL file.</p>\n<pre>python -m ixbrlparse example_file.html\n</pre>\n<p>The various options for using this can be found through:</p>\n<pre>python -m ixbrlparse -h\n<span class=\"c1\"># optional arguments:</span>\n<span class=\"c1\">#   -h, --help            show this help message and exit</span>\n<span class=\"c1\">#   --outfile OUTFILE     Where to output the file</span>\n<span class=\"c1\">#   --format {csv,json,jsonlines,jsonl}</span>\n<span class=\"c1\">#                         format of the output</span>\n<span class=\"c1\">#   --fields {numeric,nonnumeric,all}</span>\n<span class=\"c1\">#                         Which fields to output</span>\n</pre>\n<h3>Use as a python module</h3>\n<p>An example of usage is shown in <a href=\"test.py\" rel=\"nofollow\"><code>test.py</code></a>.</p>\n<h4>Import the <code>IXBRL</code> class which parses the file.</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ixbrlparse</span> <span class=\"kn\">import</span> <span class=\"n\">IXBRL</span>\n</pre>\n<h4>Initialise an object and parse the file</h4>\n<p>You need to pass a file handle or other object with a <code>.read()</code> method.</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'sample_ixbrl.html'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">IXBRL</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</pre>\n<p>If your IXBRL data comes as a string then use a <code>io.StringIO</code> wrapper to\npass it to the class:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ixbrlparse</span> <span class=\"kn\">import</span> <span class=\"n\">IXBRL</span>\n\n<span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"s1\">'''&lt;some ixbrl content&gt;'''</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">IXBRL</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">))</span>\n</pre>\n<h4>Get the contexts and units used in the data</h4>\n<p>These are held in the object. The contexts are stored as a dictionary with the context\nid as the key, and a <code>ixbrlContext</code> object as the value.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">contexts</span><span class=\"p\">)</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#    \"cfwd_2018_03_31\": ixbrlContext(</span>\n<span class=\"c1\">#       id=\"cfwd_2018_03_31\",</span>\n<span class=\"c1\">#       entity=\"0123456\", # company number</span>\n<span class=\"c1\">#       segments=[], # used for hypercubes</span>\n<span class=\"c1\">#       instant=\"2018-03-31\",</span>\n<span class=\"c1\">#       startdate=None, # used for periods</span>\n<span class=\"c1\">#       enddate=None, # used for periods</span>\n<span class=\"c1\">#    ),</span>\n<span class=\"c1\">#    ....</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>The units are stored as key:value dictionary entries</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">)</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#    \"GBP\": \"ISO4107:GBP\"</span>\n<span class=\"c1\">#    \"shares\": \"shares\"</span>\n<span class=\"c1\"># }</span>\n</pre>\n<h4>Get financial facts</h4>\n<p>Numeric facts are stored in <code>x.numeric</code> as a list of <code>ixbrlNumeric</code> objects.\nThe <code>ixbrlNumeric.value</code> object contains the value as a parsed python number\n(after the sign and scale formatting values have been applied).</p>\n<p><code>ixbrlNumeric.context</code> holds the context object relating to this value.\nThe <code>.name</code> and <code>.schema</code> values give the key of this value, according to\nthe applied schema.</p>\n<p>Non-numeric facts are stored in <code>x.nonnumeric</code> as a list of <code>ixbrlNonnumeric</code>\nobjects, with similar <code>.value</code>, <code>.context</code>, <code>.name</code> and <code>.schema</code> values.\nThe value of <code>.value</code> will be a string for non-numeric facts.</p>\n<h4>Check for any parsing errors</h4>\n<p>By default, the parser will throw an exception if it encounters an error\nwhen processing the document.</p>\n<p>You can parse <code>raise_on_error=False</code> to the initial object to suppress\nthese exceptions. You can then access a list of the errors (and the element)\nthat created them through the <code>.errors</code> attribute. For example:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'sample_ixbrl.html'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">IXBRL</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">raise_on_error</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"c1\"># populated with any exceptions found</span>\n  <span class=\"c1\"># [ eg...</span>\n  <span class=\"c1\">#   {</span>\n  <span class=\"c1\">#     \"error\": &lt;NotImplementedError&gt;,</span>\n  <span class=\"c1\">#     \"element\": &lt;BeautifulSoupElement&gt;</span>\n  <span class=\"c1\">#   }</span>\n  <span class=\"c1\"># ]</span>\n</pre>\n<p>Note that the error catching is only available for parsing of <code>.nonnumeric</code>\nand <code>numeric</code> items in the document. Any other errors with parsing will be\nthrown as normal no matter what <code>raise_on_error</code> is set to.</p>\n<h2>Run tests</h2>\n<p>Tests can be run with <code>pytest</code>:</p>\n<pre>pip install -e . <span class=\"c1\"># install the package</span>\npytest\n</pre>\n\n          </div>"}, "last_serial": 6908135, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "85973f568664610b97ce01059e2a4450", "sha256": "59f348ad99ddf05c458927a7ed5a21a5edbb2e788d6a8917172da003e49aad74"}, "downloads": -1, "filename": "ixbrlparse-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "85973f568664610b97ce01059e2a4450", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8942, "upload_time": "2020-03-29T18:00:14", "upload_time_iso_8601": "2020-03-29T18:00:14.962861Z", "url": "https://files.pythonhosted.org/packages/ef/5a/3c41e26008aa3b2e3a04c149d4f9729c395c73638347e3a88531396c13e5/ixbrlparse-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9162ead4077ca184e7e4daa4127423e", "sha256": "a4576476debc153058acbf7be11b285c7bd4ea846e0ddecb760bd4c44600793f"}, "downloads": -1, "filename": "ixbrlparse-0.1.tar.gz", "has_sig": false, "md5_digest": "f9162ead4077ca184e7e4daa4127423e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8889, "upload_time": "2020-03-29T18:00:16", "upload_time_iso_8601": "2020-03-29T18:00:16.885499Z", "url": "https://files.pythonhosted.org/packages/d3/28/3351ce51ba18babd97528566972452dd18629148d7816a8b0e6879fbb570/ixbrlparse-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "71965ab11a7c3e15271f631d7ef19899", "sha256": "75943315de9b9f2739fc632f77099e8fc0ac8a2c2b4d8c25e652c5d4026dd89e"}, "downloads": -1, "filename": "ixbrlparse-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "71965ab11a7c3e15271f631d7ef19899", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8994, "upload_time": "2020-03-29T18:56:56", "upload_time_iso_8601": "2020-03-29T18:56:56.123203Z", "url": "https://files.pythonhosted.org/packages/e9/db/3670f7b1f06c48e50f82a441d1fba82e9c47dfcbeca26b75f0bc7d70e81a/ixbrlparse-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2cb5f1ee51cc454175af8876173f4d8", "sha256": "df38b0f19886e7db45fe98e3f862f7ac0adf274b67c0888357eb64ff436e9783"}, "downloads": -1, "filename": "ixbrlparse-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b2cb5f1ee51cc454175af8876173f4d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8983, "upload_time": "2020-03-29T18:56:57", "upload_time_iso_8601": "2020-03-29T18:56:57.181499Z", "url": "https://files.pythonhosted.org/packages/9b/94/d3b2ddc96e5d315196810c5bd9742b6a0f1b1f70fa23bf5405dd9a49f5b2/ixbrlparse-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71965ab11a7c3e15271f631d7ef19899", "sha256": "75943315de9b9f2739fc632f77099e8fc0ac8a2c2b4d8c25e652c5d4026dd89e"}, "downloads": -1, "filename": "ixbrlparse-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "71965ab11a7c3e15271f631d7ef19899", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8994, "upload_time": "2020-03-29T18:56:56", "upload_time_iso_8601": "2020-03-29T18:56:56.123203Z", "url": "https://files.pythonhosted.org/packages/e9/db/3670f7b1f06c48e50f82a441d1fba82e9c47dfcbeca26b75f0bc7d70e81a/ixbrlparse-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2cb5f1ee51cc454175af8876173f4d8", "sha256": "df38b0f19886e7db45fe98e3f862f7ac0adf274b67c0888357eb64ff436e9783"}, "downloads": -1, "filename": "ixbrlparse-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b2cb5f1ee51cc454175af8876173f4d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8983, "upload_time": "2020-03-29T18:56:57", "upload_time_iso_8601": "2020-03-29T18:56:57.181499Z", "url": "https://files.pythonhosted.org/packages/9b/94/d3b2ddc96e5d315196810c5bd9742b6a0f1b1f70fa23bf5405dd9a49f5b2/ixbrlparse-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:29 2020"}