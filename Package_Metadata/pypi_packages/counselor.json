{"info": {"author": "Joerg Eschmann", "author_email": "joerg.eschmann@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# Counselor\nThis lib provides functionality to interact with Consul from HashiCorp. \n\nIt is still in work and you should not use it in production.\n\nThe main use case for this lib is, you have a service that you want to register in Consul and automatically \nreconfigure when the configuration changed for that service. Instead of having a local Consul agent running that \nexecutes a shell script or calls an http endpoint, Counselor uses an interface your service can implement, \nto notify it of changes to the service. The configuration of the service is stored in the KV store of Consul. \nTo check for updates, a trigger periodically fetches the service definition and check it for changes.\n\n## Setup\nYou can use the Makefile to install the lib locally\n```ignorelang\nmake install\n```\n\n## Installation\nLocal installation via Makefile:\n```ignorelang\nmake install\n```\nInstall from the test pypi repository:\n```ignorelang\npython -m pip install --index-url https://test.pypi.org/simple/ counselor\n```\n\nInstall from the productive pypi repository, you can install it from there:\n```ignorelang\npython -m pip install counselor\n```\n\n## Usage\nHere are some examples executed in the python console to show you how to use the library.\n\n### ServiceDiscovery class\nThe simplest way is to use the ServiceDiscovery class which acts as a facade.\n```python\nimport logging\nfrom counselor import client\nfrom counselor.endpoint.http_endpoint import EndpointConfig\nfrom counselor.discovery import ServiceDiscovery\n\nlogging.basicConfig(level=logging.DEBUG)\n\n# Create a ServiceDiscovery instance to interact with Consul. If you have ACL enabled, you can add your token to the EndpointConfig.\nconsul_config = EndpointConfig(host=\"127.0.0.1\", port=8500, version=\"v1\", token=\"\")\nconsul_client = client.ConsulClient(config=consul_config)\nservice_discovery = ServiceDiscovery.new_service_discovery_with_consul_client(consul_client)\n\n# With the service_discovery instance you are able to interact with Consul easily.\n```\n\n### KV Store\n```python\nimport logging\n\nfrom counselor.discovery import ServiceDiscovery\nfrom counselor.endpoint.kv_endpoint import KVPath\n\nlogging.basicConfig(level=logging.DEBUG)\n\n# Create a ServiceDiscovery instance with the default config values.\nservice_discovery = ServiceDiscovery.new_service_discovery_with_defaults()\n\n# Create a key value config path to define where to store the config.\nkv_config_path = KVPath(\"test-project\", \"test-domain\", \"test-service\", \"test-config\", \"test-env\")\n\n# The entire path then be composed viaservice_discovery = ServiceDiscovery.new_service_discovery_with_consul_client(consul_client) its method.\nconfig_path = kv_config_path.compose_path()\n\n# Check whether there is already a config stored in that config path.\n# You get two objects back, one for the response, that lets you know whether the request was successful or not.\n# The other is the config itself. If the response is successful, the config instance is filled.\nresponse, found_config = service_discovery.fetch_config_by_path(config_path)\nresponse.as_string()\n\n# Create a config for your service.\ntest_service_config = {\n    \"foo\": \"bar\",\n    \"number\": 3.1415,\n    \"active\": True,\n    \"list\": [\"one\", \"two\", \"three\"],\n    \"map\": {\"a\": 1, \"b\": 2, \"c\": 3}\n}\n\n# Store the config in the Consul KV store.\nresponse = service_discovery.store_config(config_path, test_service_config)\nresponse.as_string()\n\n# Now you should find the config.\nresponse, found_config = service_discovery.fetch_config_by_path(config_path)\nresponse.as_string()\nfound_config\n\n# To update the config, change the config and send it to Consul. Keep in mind that the  \n# config will be overwritten. That means any field that is not in the config anymore will be deleted in the KV store.\ntest_service_config[\"active\"] = False\nresponse = service_discovery.update_config(config_path, test_service_config)\nresponse.as_string()\n\n# If you want to only update a single field, you can use the merge method.\nresponse = service_discovery.merge_config(config_path, {\"single-field\": \"that is added to the existing config\"})\nresponse.as_string()\n\n# There is also a method to fetch a config path recursively and get and array. \nresponse, found_configs = service_discovery.fetch_config_recursively(config_path)\nfound_configs\n\n# To clean up, we can also delete entries.\nresponse = service_discovery.delete_config(path=config_path, recurse=True)\n```\n\n### Service registry\n```python\nimport logging \n\nfrom counselor.discovery import ServiceDiscovery\nfrom counselor.endpoint.entity import ServiceDefinition\nfrom counselor.endpoint.http_endpoint import EndpointConfig\nfrom counselor.filter import KeyValuePair\n\nlogging.basicConfig(level=logging.DEBUG)\n\n# Create a ServiceDiscovery instance to interact with consul.\nconsul_config = EndpointConfig(host=\"127.0.0.1\", port=8500, version=\"v1\")\nservice_discovery = ServiceDiscovery.new_service_discovery_with_consul_config(consul_config)\n\n# To register a service you need at least a unique key. This key is used to identify your service. Consul has only\n# this level of identification. So if you track multiple instance of the same service, you might add a number to \n# differentiate between the instances.\nservice_key = \"test-service\"\n\n# You can group your service with tags. For example, you could tag all your db services with the tag \"db\".\n# A dash in the tag name can cause errors. You should use an underscore _ instead.\nservice_tags = [\"test\"]\n\n# The meta field allows you to define arbitrary characteristics of your service. In this example we have the version,\n# the status and the base_time stored. The only limitation is that all keys and values have to be strings.\nservice_meta = {\n    \"version\": \"1.0\",\n    \"status\": \"active\",\n    \"base_time\": \"1573639530\",\n}\n\n# The ServiceDefinition class holds all those details.\nservice_definition = ServiceDefinition(\n    key=service_key,\n    tags=service_tags,\n    meta=service_meta\n)\n\n\n# Register the service \nresponse = service_discovery.register_service(service_definition)\nresponse.as_string()\n\n# Fetch the service definition.\nresponse, found_service = service_discovery.get_service_details(service_key)\nresponse.as_string()\nfound_service.as_json()\n\n# To update the service modify the tag or meta field and send it to Consul.\nservice_definition.tags.append(\"additional_tag\")\nservice_definition.meta[\"status\"] = \"inactive\"\nresponse = service_discovery.update_service(service_definition)\n\n# You are able to use the tags and meta map to search and filter the services.\nresponse, found_services = service_discovery.search_for_services(tags=[\"additional_tag\"], meta=[KeyValuePair('status', 'inactive')])\nresponse.as_string()\nfound_services[0].as_json()\n\n# At the end you can deregister your service by key.\nresponse = service_discovery.deregister_service(service_key)\nresponse.as_string()\n```\n\n### Watch for config changes\n```python\nimport logging\nfrom datetime import timedelta\nfrom threading import Event\n\nfrom counselor.discovery import ServiceDiscovery, ReconfigurableService\nfrom counselor.endpoint.http_endpoint import EndpointConfig\nfrom counselor.endpoint.kv_endpoint import KVPath\nfrom counselor.kv_watcher import ConfigUpdateListener\n\nlogging.basicConfig(level=logging.DEBUG)\nLOGGER = logging.getLogger(__name__)\n\n# Create a ServiceDiscovery instance to interact with consul.\nconsul_config = EndpointConfig(host=\"127.0.0.1\", port=8500, version=\"v1\")\nservice_discovery = ServiceDiscovery.new_service_discovery_with_consul_config(consul_config)\n\n# Create a key value config path to define where to store the config.\nkv_config_path = KVPath(\"test-project\", \"test-domain\", \"test-service\", \"test-config\", \"test-env\")\n\n# Create a config\ncurrent_config={\n        \"foo\": \"bar\",\n        \"number\": 3.1415,\n        \"active\": True,\n        \"list\": [\"one\", \"two\", \"three\"],\n        \"map\": {\"a\": 1, \"b\": 2, \"c\": 3}\n    }\n\n# To have ereything in one place, there is the ReconfigurableService, that holds all the infos about a service.\nservice = ReconfigurableService(service_key=\"test-service\", \n    config_path=kv_config_path, \n    current_config=current_config, \n    tags=[\"test\"], \n    meta={})\n\n# The service definition and the config in the KV store are separate. You can store a config and watch for updates, \n# without having the service registered. The method register_service_and_store_config will do both in one call.\nresponse = service_discovery.register_service_and_store_config(service)\nresponse.as_string()\n\n# To check for config updates in Consul, there is a Trigger that periodically fetches the config from Consul.\n# It then compares the received config with the last know version. If there is a difference, it will notify you.\n# We have an interface for that, called ConfigUpdateListener. You have to extend that class to provide the \n# necessary functionality. In the following example, the TestUpdateListener simply logs the events.\n#\n# get_path() returns the kv path in Consul.\n# on_init() is called the first time it fetches the config. \n# on_update() is called whenever the modification_index is increased and an update available. \nclass TestListener(ConfigUpdateListener):\n    def __init__(self, service: ReconfigurableService):\n        self.service = service\n        self.initialized = False\n        self.updated = False\n\n    def get_path(self) -> str:\n        return self.service.compose_config_path()\n\n    def on_init(self, config: dict) -> bool:\n        for key in config.keys():\n            self.service.current_config[key] = config[key]\n        self.initialized = True\n        LOGGER.info(\"Initialized {}\".format(config))\n        return True\n\n    def on_update(self, new_config: dict) -> bool:\n        self.service.current_config = new_config\n        self.updated = True\n        LOGGER.info(\"Updated {}\".format(new_config))\n        return True\n\n\n# Create an instance of your listener, that lets the watcher notify your service of changes.\ntest_listener = TestListener(service)\n\n# You can add one or multiple config watchers and start the trigger.\n# With the stop you have the ability to stop the watcher by setting the event. This is helpful if you have other\n# resources and you want to have a graceful shut down. \ncheck_interval=timedelta(seconds=3)\nstop_event = Event()\nservice_discovery.add_config_watch(listener=test_listener, check_interval=check_interval, stop_event=stop_event)\nresponse = service_discovery.start_config_watch()\n# When it starts to fetch the config, it will recognize the first fetch, because there is not modify index of Consul yet.\n# So it will trigger the on_init function of the listener which you should see in the logs. \n\n# Once the watcher is started, you should see log messages that Consul is checked for updates.\n# You can now either change the service either via Consul UI, with the service_discovery instance, or via separate updater.\nservice_config_updater = service_discovery.create_kv_updater_for_path(service.compose_config_path())\nresponse = service_config_updater.merge({\"reload-action\": \"reboot\"})\n\n# You should then see that a new config is recieved and the update flag is set.\ntest_listener.updated\n\n# To stop the watcher you can either set the event,\nstop_event.set()\n# stop the trigger directly,\nservice_discovery.stop_config_watch()\n# or clear the watchers\nservice_discovery.clear_watchers()\n\n# If not done yet, the deregister function will stop all watchers.\nresponse = service_discovery.deregister_service(service.service_key)\n``` \n\nFor other examples, please have a look at the test folder.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joergeschmann/counselor", "keywords": "consul", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "counselor", "package_url": "https://pypi.org/project/counselor/", "platform": "", "project_url": "https://pypi.org/project/counselor/", "project_urls": {"Homepage": "https://github.com/joergeschmann/counselor"}, "release_url": "https://pypi.org/project/counselor/0.3.2/", "requires_dist": ["requests (>=2.22.0)"], "requires_python": "", "summary": "Package to interact with HashiCorp Consul", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Counselor</h1>\n<p>This lib provides functionality to interact with Consul from HashiCorp.</p>\n<p>It is still in work and you should not use it in production.</p>\n<p>The main use case for this lib is, you have a service that you want to register in Consul and automatically\nreconfigure when the configuration changed for that service. Instead of having a local Consul agent running that\nexecutes a shell script or calls an http endpoint, Counselor uses an interface your service can implement,\nto notify it of changes to the service. The configuration of the service is stored in the KV store of Consul.\nTo check for updates, a trigger periodically fetches the service definition and check it for changes.</p>\n<h2>Setup</h2>\n<p>You can use the Makefile to install the lib locally</p>\n<pre>make install\n</pre>\n<h2>Installation</h2>\n<p>Local installation via Makefile:</p>\n<pre>make install\n</pre>\n<p>Install from the test pypi repository:</p>\n<pre>python -m pip install --index-url https://test.pypi.org/simple/ counselor\n</pre>\n<p>Install from the productive pypi repository, you can install it from there:</p>\n<pre>python -m pip install counselor\n</pre>\n<h2>Usage</h2>\n<p>Here are some examples executed in the python console to show you how to use the library.</p>\n<h3>ServiceDiscovery class</h3>\n<p>The simplest way is to use the ServiceDiscovery class which acts as a facade.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor</span> <span class=\"kn\">import</span> <span class=\"n\">client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.endpoint.http_endpoint</span> <span class=\"kn\">import</span> <span class=\"n\">EndpointConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.discovery</span> <span class=\"kn\">import</span> <span class=\"n\">ServiceDiscovery</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a ServiceDiscovery instance to interact with Consul. If you have ACL enabled, you can add your token to the EndpointConfig.</span>\n<span class=\"n\">consul_config</span> <span class=\"o\">=</span> <span class=\"n\">EndpointConfig</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8500</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"v1\"</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n<span class=\"n\">consul_client</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConsulClient</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">consul_config</span><span class=\"p\">)</span>\n<span class=\"n\">service_discovery</span> <span class=\"o\">=</span> <span class=\"n\">ServiceDiscovery</span><span class=\"o\">.</span><span class=\"n\">new_service_discovery_with_consul_client</span><span class=\"p\">(</span><span class=\"n\">consul_client</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># With the service_discovery instance you are able to interact with Consul easily.</span>\n</pre>\n<h3>KV Store</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.discovery</span> <span class=\"kn\">import</span> <span class=\"n\">ServiceDiscovery</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.endpoint.kv_endpoint</span> <span class=\"kn\">import</span> <span class=\"n\">KVPath</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a ServiceDiscovery instance with the default config values.</span>\n<span class=\"n\">service_discovery</span> <span class=\"o\">=</span> <span class=\"n\">ServiceDiscovery</span><span class=\"o\">.</span><span class=\"n\">new_service_discovery_with_defaults</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a key value config path to define where to store the config.</span>\n<span class=\"n\">kv_config_path</span> <span class=\"o\">=</span> <span class=\"n\">KVPath</span><span class=\"p\">(</span><span class=\"s2\">\"test-project\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test-domain\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test-service\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test-config\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test-env\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The entire path then be composed viaservice_discovery = ServiceDiscovery.new_service_discovery_with_consul_client(consul_client) its method.</span>\n<span class=\"n\">config_path</span> <span class=\"o\">=</span> <span class=\"n\">kv_config_path</span><span class=\"o\">.</span><span class=\"n\">compose_path</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Check whether there is already a config stored in that config path.</span>\n<span class=\"c1\"># You get two objects back, one for the response, that lets you know whether the request was successful or not.</span>\n<span class=\"c1\"># The other is the config itself. If the response is successful, the config instance is filled.</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">found_config</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">fetch_config_by_path</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a config for your service.</span>\n<span class=\"n\">test_service_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"number\"</span><span class=\"p\">:</span> <span class=\"mf\">3.1415</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"active\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"list\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"one\"</span><span class=\"p\">,</span> <span class=\"s2\">\"two\"</span><span class=\"p\">,</span> <span class=\"s2\">\"three\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"map\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Store the config in the Consul KV store.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">store_config</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">,</span> <span class=\"n\">test_service_config</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Now you should find the config.</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">found_config</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">fetch_config_by_path</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n<span class=\"n\">found_config</span>\n\n<span class=\"c1\"># To update the config, change the config and send it to Consul. Keep in mind that the  </span>\n<span class=\"c1\"># config will be overwritten. That means any field that is not in the config anymore will be deleted in the KV store.</span>\n<span class=\"n\">test_service_config</span><span class=\"p\">[</span><span class=\"s2\">\"active\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">update_config</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">,</span> <span class=\"n\">test_service_config</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># If you want to only update a single field, you can use the merge method.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">merge_config</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"single-field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"that is added to the existing config\"</span><span class=\"p\">})</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># There is also a method to fetch a config path recursively and get and array. </span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">found_configs</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">fetch_config_recursively</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">)</span>\n<span class=\"n\">found_configs</span>\n\n<span class=\"c1\"># To clean up, we can also delete entries.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">delete_config</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">config_path</span><span class=\"p\">,</span> <span class=\"n\">recurse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Service registry</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span> \n\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.discovery</span> <span class=\"kn\">import</span> <span class=\"n\">ServiceDiscovery</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.endpoint.entity</span> <span class=\"kn\">import</span> <span class=\"n\">ServiceDefinition</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.endpoint.http_endpoint</span> <span class=\"kn\">import</span> <span class=\"n\">EndpointConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.filter</span> <span class=\"kn\">import</span> <span class=\"n\">KeyValuePair</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a ServiceDiscovery instance to interact with consul.</span>\n<span class=\"n\">consul_config</span> <span class=\"o\">=</span> <span class=\"n\">EndpointConfig</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8500</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"v1\"</span><span class=\"p\">)</span>\n<span class=\"n\">service_discovery</span> <span class=\"o\">=</span> <span class=\"n\">ServiceDiscovery</span><span class=\"o\">.</span><span class=\"n\">new_service_discovery_with_consul_config</span><span class=\"p\">(</span><span class=\"n\">consul_config</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To register a service you need at least a unique key. This key is used to identify your service. Consul has only</span>\n<span class=\"c1\"># this level of identification. So if you track multiple instance of the same service, you might add a number to </span>\n<span class=\"c1\"># differentiate between the instances.</span>\n<span class=\"n\">service_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"test-service\"</span>\n\n<span class=\"c1\"># You can group your service with tags. For example, you could tag all your db services with the tag \"db\".</span>\n<span class=\"c1\"># A dash in the tag name can cause errors. You should use an underscore _ instead.</span>\n<span class=\"n\">service_tags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"test\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># The meta field allows you to define arbitrary characteristics of your service. In this example we have the version,</span>\n<span class=\"c1\"># the status and the base_time stored. The only limitation is that all keys and values have to be strings.</span>\n<span class=\"n\">service_meta</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.0\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"active\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"base_time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1573639530\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># The ServiceDefinition class holds all those details.</span>\n<span class=\"n\">service_definition</span> <span class=\"o\">=</span> <span class=\"n\">ServiceDefinition</span><span class=\"p\">(</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">service_key</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">service_tags</span><span class=\"p\">,</span>\n    <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"n\">service_meta</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Register the service </span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">register_service</span><span class=\"p\">(</span><span class=\"n\">service_definition</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Fetch the service definition.</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">found_service</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">get_service_details</span><span class=\"p\">(</span><span class=\"n\">service_key</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n<span class=\"n\">found_service</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># To update the service modify the tag or meta field and send it to Consul.</span>\n<span class=\"n\">service_definition</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"additional_tag\"</span><span class=\"p\">)</span>\n<span class=\"n\">service_definition</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s2\">\"status\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"inactive\"</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">update_service</span><span class=\"p\">(</span><span class=\"n\">service_definition</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You are able to use the tags and meta map to search and filter the services.</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">found_services</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">search_for_services</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"additional_tag\"</span><span class=\"p\">],</span> <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">KeyValuePair</span><span class=\"p\">(</span><span class=\"s1\">'status'</span><span class=\"p\">,</span> <span class=\"s1\">'inactive'</span><span class=\"p\">)])</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n<span class=\"n\">found_services</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># At the end you can deregister your service by key.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">deregister_service</span><span class=\"p\">(</span><span class=\"n\">service_key</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n</pre>\n<h3>Watch for config changes</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">threading</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.discovery</span> <span class=\"kn\">import</span> <span class=\"n\">ServiceDiscovery</span><span class=\"p\">,</span> <span class=\"n\">ReconfigurableService</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.endpoint.http_endpoint</span> <span class=\"kn\">import</span> <span class=\"n\">EndpointConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.endpoint.kv_endpoint</span> <span class=\"kn\">import</span> <span class=\"n\">KVPath</span>\n<span class=\"kn\">from</span> <span class=\"nn\">counselor.kv_watcher</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigUpdateListener</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">LOGGER</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a ServiceDiscovery instance to interact with consul.</span>\n<span class=\"n\">consul_config</span> <span class=\"o\">=</span> <span class=\"n\">EndpointConfig</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8500</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"v1\"</span><span class=\"p\">)</span>\n<span class=\"n\">service_discovery</span> <span class=\"o\">=</span> <span class=\"n\">ServiceDiscovery</span><span class=\"o\">.</span><span class=\"n\">new_service_discovery_with_consul_config</span><span class=\"p\">(</span><span class=\"n\">consul_config</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a key value config path to define where to store the config.</span>\n<span class=\"n\">kv_config_path</span> <span class=\"o\">=</span> <span class=\"n\">KVPath</span><span class=\"p\">(</span><span class=\"s2\">\"test-project\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test-domain\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test-service\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test-config\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test-env\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a config</span>\n<span class=\"n\">current_config</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"number\"</span><span class=\"p\">:</span> <span class=\"mf\">3.1415</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"active\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"list\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"one\"</span><span class=\"p\">,</span> <span class=\"s2\">\"two\"</span><span class=\"p\">,</span> <span class=\"s2\">\"three\"</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"map\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"c1\"># To have ereything in one place, there is the ReconfigurableService, that holds all the infos about a service.</span>\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">ReconfigurableService</span><span class=\"p\">(</span><span class=\"n\">service_key</span><span class=\"o\">=</span><span class=\"s2\">\"test-service\"</span><span class=\"p\">,</span> \n    <span class=\"n\">config_path</span><span class=\"o\">=</span><span class=\"n\">kv_config_path</span><span class=\"p\">,</span> \n    <span class=\"n\">current_config</span><span class=\"o\">=</span><span class=\"n\">current_config</span><span class=\"p\">,</span> \n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"test\"</span><span class=\"p\">],</span> \n    <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n\n<span class=\"c1\"># The service definition and the config in the KV store are separate. You can store a config and watch for updates, </span>\n<span class=\"c1\"># without having the service registered. The method register_service_and_store_config will do both in one call.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">register_service_and_store_config</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"p\">)</span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># To check for config updates in Consul, there is a Trigger that periodically fetches the config from Consul.</span>\n<span class=\"c1\"># It then compares the received config with the last know version. If there is a difference, it will notify you.</span>\n<span class=\"c1\"># We have an interface for that, called ConfigUpdateListener. You have to extend that class to provide the </span>\n<span class=\"c1\"># necessary functionality. In the following example, the TestUpdateListener simply logs the events.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># get_path() returns the kv path in Consul.</span>\n<span class=\"c1\"># on_init() is called the first time it fetches the config. </span>\n<span class=\"c1\"># on_update() is called whenever the modification_index is increased and an update available. </span>\n<span class=\"k\">class</span> <span class=\"nc\">TestListener</span><span class=\"p\">(</span><span class=\"n\">ConfigUpdateListener</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">service</span><span class=\"p\">:</span> <span class=\"n\">ReconfigurableService</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">service</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initialized</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">updated</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">compose_config_path</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">current_config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initialized</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">LOGGER</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Initialized </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">current_config</span> <span class=\"o\">=</span> <span class=\"n\">new_config</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">updated</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">LOGGER</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Updated </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">new_config</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"c1\"># Create an instance of your listener, that lets the watcher notify your service of changes.</span>\n<span class=\"n\">test_listener</span> <span class=\"o\">=</span> <span class=\"n\">TestListener</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can add one or multiple config watchers and start the trigger.</span>\n<span class=\"c1\"># With the stop you have the ability to stop the watcher by setting the event. This is helpful if you have other</span>\n<span class=\"c1\"># resources and you want to have a graceful shut down. </span>\n<span class=\"n\">check_interval</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">stop_event</span> <span class=\"o\">=</span> <span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">add_config_watch</span><span class=\"p\">(</span><span class=\"n\">listener</span><span class=\"o\">=</span><span class=\"n\">test_listener</span><span class=\"p\">,</span> <span class=\"n\">check_interval</span><span class=\"o\">=</span><span class=\"n\">check_interval</span><span class=\"p\">,</span> <span class=\"n\">stop_event</span><span class=\"o\">=</span><span class=\"n\">stop_event</span><span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">start_config_watch</span><span class=\"p\">()</span>\n<span class=\"c1\"># When it starts to fetch the config, it will recognize the first fetch, because there is not modify index of Consul yet.</span>\n<span class=\"c1\"># So it will trigger the on_init function of the listener which you should see in the logs. </span>\n\n<span class=\"c1\"># Once the watcher is started, you should see log messages that Consul is checked for updates.</span>\n<span class=\"c1\"># You can now either change the service either via Consul UI, with the service_discovery instance, or via separate updater.</span>\n<span class=\"n\">service_config_updater</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">create_kv_updater_for_path</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">compose_config_path</span><span class=\"p\">())</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_config_updater</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">({</span><span class=\"s2\">\"reload-action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"reboot\"</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># You should then see that a new config is recieved and the update flag is set.</span>\n<span class=\"n\">test_listener</span><span class=\"o\">.</span><span class=\"n\">updated</span>\n\n<span class=\"c1\"># To stop the watcher you can either set the event,</span>\n<span class=\"n\">stop_event</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n<span class=\"c1\"># stop the trigger directly,</span>\n<span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">stop_config_watch</span><span class=\"p\">()</span>\n<span class=\"c1\"># or clear the watchers</span>\n<span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">clear_watchers</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># If not done yet, the deregister function will stop all watchers.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service_discovery</span><span class=\"o\">.</span><span class=\"n\">deregister_service</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">service_key</span><span class=\"p\">)</span>\n</pre>\n<p>For other examples, please have a look at the test folder.</p>\n\n          </div>"}, "last_serial": 6325450, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "de425cbe8e921ace9f3c8905f7124e6e", "sha256": "81d0e5fb91253aee4f77868021fe9f22d1b8674e8dfd8f3fd9b3303e49c2612c"}, "downloads": -1, "filename": "counselor-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "de425cbe8e921ace9f3c8905f7124e6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14961, "upload_time": "2019-11-20T09:21:19", "upload_time_iso_8601": "2019-11-20T09:21:19.183033Z", "url": "https://files.pythonhosted.org/packages/4d/5b/0e5fd5cda2a182b5287652fd339fa0f8fb0eddd49b1b33cd1b9d38a9e136/counselor-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "248156bb185e9cf9f185c4bd1eaef8aa", "sha256": "69957e7d3ada3f3ac51d53c32541fe017efe9524c25699522fef5b9f2cc0f9a8"}, "downloads": -1, "filename": "counselor-0.1.2.tar.gz", "has_sig": false, "md5_digest": "248156bb185e9cf9f185c4bd1eaef8aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11363, "upload_time": "2019-11-20T09:21:21", "upload_time_iso_8601": "2019-11-20T09:21:21.483593Z", "url": "https://files.pythonhosted.org/packages/bf/e4/ac619d772d6791d7d35510674d775b4c89877d0919081f2e8e3633e97ca3/counselor-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8a3a208337dd8a6b53d9ae7244e64ec8", "sha256": "df8df4ff58250cbdef255dd1504569f8c5f20f19561443bfc6bf2942be47da18"}, "downloads": -1, "filename": "counselor-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8a3a208337dd8a6b53d9ae7244e64ec8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14987, "upload_time": "2019-11-20T12:37:57", "upload_time_iso_8601": "2019-11-20T12:37:57.564604Z", "url": "https://files.pythonhosted.org/packages/57/3c/efb4dbf85ecf45aceb674a2146562d4e9556491de082bcdf0f07a92c7a94/counselor-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c8ea8329be36e36f88de6b1ddbc6bc", "sha256": "14895ed05a619a5a404fa01f25542a333e76a98917a33deab9874781f77deb2d"}, "downloads": -1, "filename": "counselor-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a6c8ea8329be36e36f88de6b1ddbc6bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11409, "upload_time": "2019-11-20T12:37:59", "upload_time_iso_8601": "2019-11-20T12:37:59.355644Z", "url": "https://files.pythonhosted.org/packages/ed/0b/8eb2e4f9e73b6d38aaed6ea7cd3d8e9510d39767355506bcefa1a45ed1bf/counselor-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9472c5721c09008a8e0d71f34b4696c4", "sha256": "455de3e7257163f009d5681013a8e720e4d9b0f96f22343e8f0db37058b82f13"}, "downloads": -1, "filename": "counselor-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9472c5721c09008a8e0d71f34b4696c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18119, "upload_time": "2019-11-21T17:21:38", "upload_time_iso_8601": "2019-11-21T17:21:38.147145Z", "url": "https://files.pythonhosted.org/packages/ad/01/95837c5a235c5aeb22933dc10fe4584b7316a56d5f3bf3cdaa0e326bbfa3/counselor-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc858450b5bb1f5dcaaf3caaf228afa9", "sha256": "7c0a72d96668893054ad7995ae0b4e719b6a48ae736ee7e035da4766d0375313"}, "downloads": -1, "filename": "counselor-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bc858450b5bb1f5dcaaf3caaf228afa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13422, "upload_time": "2019-11-21T17:21:40", "upload_time_iso_8601": "2019-11-21T17:21:40.174787Z", "url": "https://files.pythonhosted.org/packages/dd/28/57185d422a36fe3193527412fefe2307d7b02bae578f36ce67cf96a588df/counselor-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "6205866986b414e12f28865593abbd40", "sha256": "309d2b596aab701de6bf65817dcf41c727f3fda4a4eea219d825746640271d30"}, "downloads": -1, "filename": "counselor-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6205866986b414e12f28865593abbd40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20288, "upload_time": "2019-11-25T16:20:41", "upload_time_iso_8601": "2019-11-25T16:20:41.105671Z", "url": "https://files.pythonhosted.org/packages/f1/18/419d8925ac62872926383f35a1d3a69dbd6433e77429a09c0e1c0413b355/counselor-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3de4f4e0141b33f52451ccf04269ecb2", "sha256": "48a2734e3973b786a901ee8d3460dc6c878f88ee1a7b6e9648e16774f98bcf81"}, "downloads": -1, "filename": "counselor-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3de4f4e0141b33f52451ccf04269ecb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16802, "upload_time": "2019-11-25T16:20:42", "upload_time_iso_8601": "2019-11-25T16:20:42.688840Z", "url": "https://files.pythonhosted.org/packages/2c/80/9376ff8030c61370465a61f1d6e86f627e6cd5572083f3254e04838c02b6/counselor-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "1c3fdba5bc46943a452333e75adde2c3", "sha256": "272dc0022f14620d0b4a6eaac0f4410cac298600cb1dc8ce927844df672c958a"}, "downloads": -1, "filename": "counselor-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1c3fdba5bc46943a452333e75adde2c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22355, "upload_time": "2019-12-03T11:13:16", "upload_time_iso_8601": "2019-12-03T11:13:16.326866Z", "url": "https://files.pythonhosted.org/packages/8c/d3/00c9912c9078de93a34d681ad2b11e3cbe0cc66406f99cd27084cee79d6f/counselor-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c25fc7b59471e7c5ed67e1208b966a8", "sha256": "792b3f9f0845804a71ade238435dbe03874d21eaa0c5bcffee7d9f7c4f44c224"}, "downloads": -1, "filename": "counselor-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8c25fc7b59471e7c5ed67e1208b966a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19125, "upload_time": "2019-12-03T11:13:18", "upload_time_iso_8601": "2019-12-03T11:13:18.396662Z", "url": "https://files.pythonhosted.org/packages/af/35/801f8a6c6cba93d84442edff007f78b7819ccc77852d06b6f5ea2f3ddef4/counselor-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "d430bc3a801a96a44f0f86fd8771e298", "sha256": "1498465aaa8f7bd88734002fd626cf41e586a4bfc10e31f2c4f8d50f25dccbc6"}, "downloads": -1, "filename": "counselor-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d430bc3a801a96a44f0f86fd8771e298", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22520, "upload_time": "2019-12-16T11:40:04", "upload_time_iso_8601": "2019-12-16T11:40:04.423235Z", "url": "https://files.pythonhosted.org/packages/a4/a9/4321525e2a81e3d68c85a3c5b95c4f57fb5139699d974deff4b116e72135/counselor-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdcf19308e7916c2c130ce57721469a1", "sha256": "f7cf99548a50fa48afff608948e8145ff1fe2864e8a3c31c92f3b65ecafc7171"}, "downloads": -1, "filename": "counselor-0.3.1.tar.gz", "has_sig": false, "md5_digest": "bdcf19308e7916c2c130ce57721469a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19302, "upload_time": "2019-12-16T11:40:06", "upload_time_iso_8601": "2019-12-16T11:40:06.142542Z", "url": "https://files.pythonhosted.org/packages/c3/67/b2d8ad6bf2253bebf9b1ae34e4a0ddb7efa4c6886e1723e49d1ed7414217/counselor-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "600d51e1118b335a9cc7b8dee22eb27f", "sha256": "7300195abbfae1feb0412ae80ef5050b622c8035596979c07fe763cf397b1a87"}, "downloads": -1, "filename": "counselor-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "600d51e1118b335a9cc7b8dee22eb27f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22573, "upload_time": "2019-12-18T12:54:21", "upload_time_iso_8601": "2019-12-18T12:54:21.090747Z", "url": "https://files.pythonhosted.org/packages/35/a6/1dd0a29f64abfc03129f884ced0420c27b0b01845a815b3e52a6cd4e972f/counselor-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "258a898af52c0a83008f56dda7dbd743", "sha256": "307759f54ee8b2577474beafc5fc086532d47e1362f13469c3831b6b6edfcb6c"}, "downloads": -1, "filename": "counselor-0.3.2.tar.gz", "has_sig": false, "md5_digest": "258a898af52c0a83008f56dda7dbd743", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19351, "upload_time": "2019-12-18T12:54:23", "upload_time_iso_8601": "2019-12-18T12:54:23.033878Z", "url": "https://files.pythonhosted.org/packages/38/16/3bb09a86f33318249fb960b14847c312a840e84ea36e7d552c4ae46e961a/counselor-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "600d51e1118b335a9cc7b8dee22eb27f", "sha256": "7300195abbfae1feb0412ae80ef5050b622c8035596979c07fe763cf397b1a87"}, "downloads": -1, "filename": "counselor-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "600d51e1118b335a9cc7b8dee22eb27f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22573, "upload_time": "2019-12-18T12:54:21", "upload_time_iso_8601": "2019-12-18T12:54:21.090747Z", "url": "https://files.pythonhosted.org/packages/35/a6/1dd0a29f64abfc03129f884ced0420c27b0b01845a815b3e52a6cd4e972f/counselor-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "258a898af52c0a83008f56dda7dbd743", "sha256": "307759f54ee8b2577474beafc5fc086532d47e1362f13469c3831b6b6edfcb6c"}, "downloads": -1, "filename": "counselor-0.3.2.tar.gz", "has_sig": false, "md5_digest": "258a898af52c0a83008f56dda7dbd743", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19351, "upload_time": "2019-12-18T12:54:23", "upload_time_iso_8601": "2019-12-18T12:54:23.033878Z", "url": "https://files.pythonhosted.org/packages/38/16/3bb09a86f33318249fb960b14847c312a840e84ea36e7d552c4ae46e961a/counselor-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:53 2020"}