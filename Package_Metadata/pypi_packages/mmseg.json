{"info": {"author": "UNKNOWN", "author_email": "zsp007@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "MMseg\u4e2d\u6587\u5206\u8bcd Chinese Segment On MMSeg Algorithm\n-------------------------------\noriginal edition\n\npymmseg-cpp\n    by pluskid\n    http://code.google.com/p/pymmseg-cpp/\n\nThis package is Chinese Segment , I think only chinese need it, so the description is chinese . \n\nIf you have interesting , have a look a the original edition\n\n-------------------------------\n\n\u5168\u6587\u7d22\u5f15\u7528\uff0c\u914d\u5408 xapian ( http://xapian.org/ ) \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u505a\u5168\u6587\u7d22\u5f15\n\n~:python -m mmseg.search\n----------\n\u54c8\u5c14\u7f57\u6770\u5386\u9669\u8bb0(\u5957)\n\u54c8\u5c14\n\u7f57\u6770\n\u5386\u9669\n\u5386\u9669\u8bb0\n----------\n\u5361\u62c9\u9a6c\u4f50\u592b\u5144\u5f1f\n\u5361\u62c9\n\u9a6c\n\u4f50\u592b\n\u5144\u5f1f\n----------\n\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4\n\u94f6\u6cb3\n\u82f1\u96c4\n\u4f20\u8bf4\n\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4\n----------\n\u5f20\u65e0\u5fcc\u5728\u5149\u660e\u9876\n\u65e0\u5fcc\n\u5f20\u65e0\u5fcc\n\u5149\u660e\n\u5149\u660e\u9876\n----------\n\u97e6\u5e05\u671b\u7684\u6c5f\u6e56(\u2162\u4f17\u671b\u6240\u5f52)\n\u97e6\u5e05\n\u5e05\u671b\n\u97e6\u5e05\u671b\n\u6c5f\u6e56\n\u4f17\u671b\n\u671b\u6240\n\u6240\u5f52\n\u4f17\u671b\u6240\u5f52\n----------\n\u5c11\u5e74\u97e6\u5e05\u671b\u4e4b\u7ae5\u5e74\u7ed3\u675f\u4e86\n\u5c11\u5e74\n\u97e6\u5e05\n\u5e05\u671b\n\u671b\u4e4b\n\u97e6\u5e05\u671b\u4e4b\n\u7ae5\u5e74\n\u7ed3\u675f\n----------\n\u3000\u3000 \u3000\u664b\u6c5f\u6587\u5b66\u7f51\u7ad9\u9a7b\u7ad9\u4f5c\u5bb6\uff0c\u5df2\u51fa\u7248\u591a\u90e8\u4f5c\u54c1\u3002\n\u664b\u6c5f\n\u6587\u5b66\n\u7f51\u7ad9\n\u6587\u5b66\u7f51\u7ad9\n\u9a7b\u7ad9\n\u4f5c\u5bb6\n\u51fa\u7248\n\u591a\u90e8\n\u4f5c\u54c1\n-------------------------------\n\u5206\u8bcd\u7528\uff0c\u9002\u7528\u4e8e\u805a\u7c7b\u7b49\u7b49\n\nfrom mmseg import seg_txt\nfor i in seg_txt(\"\u6700\u4e3b\u8981\u7684\u66f4\u52a8\u662f\uff1a\u5f20\u65e0\u5fcc\u6700\u540e\u6ca1\u6709\u9009\u5b9a\u81ea\u5df1\u7684\u914d\u5076\u3002\"):\n    print i\n\n-------------------------------\n\u914d\u5408xapian\u505a\u7d22\u5f15\n\n#coding:utf-8\n#!/usr/bin/env python\n\nimport xapian\nimport sys\nimport string\nfrom collections import defaultdict\n\nfrom mmseg.search import seg_txt_search,seg_txt_2_dict\n\nimport xapian\nSEARCH_DB = xapian.WritableDatabase(DBPATH, xapian.DB_CREATE_OR_OPEN)\nSEARCH_ENQUIRE = xapian.Enquire(SEARCH_DB)\n\ndef index_txt(id, txt):\n    doc = xapian.Document()\n    for word, value in seg_txt_2_dict(txt).iteritems():\n        doc.add_term(word, value)\n    key = \":%s\"%id\n    doc.add_term(key)\n    SEARCH_DB.replace_document(key, doc)\n\n\ndef flush_db():\n    SEARCH_DB.flush()\n    \nif __name__ == \"__main__\":\n    txt = \"\"\"\n    \u6cbb\u5b89\u7f72\u5730\u6700\u9ad8\u957f\u5b98\u7ad9\u5728\u8857\u5934\uff0c\u76b1\u7709\u770b\u7740\u4e00\u961f\u8fd1\u536b\u519b\u98de\u5feb\u5730\u8d70\u8fc7\uff0c\u4ed6\u5fc3\u4e2d\u6ee1\u662f\u7591\u60d1\uff0c\u7acb\u523b\u56de\u5230\u4e86\u6cbb\u5b89\u7f72\u91cc\u5730\u529e\u516c\u5ba4\uff0c\u7136\u540e\u558a\u6765\u4e86\u81ea\u5df1\u5730\u4e00\u4e2a\u90e8\u4e0b\uff0c\u8ba9\u4ed6\u7acb\u523b\u53bb\u519b\u65b9\u7edf\u5e05\u90e8\u8bf7\u793a\u4e00\u4e0b.\n    \"\"\"\n\n    index_txt(1, txt)\n    flush_db()\n\n-------------------------------\n\u914d\u5408xapian\u505a\u641c\u7d22\n\n#coding:utf-8\nfrom mmseg.search import seg_txt_search,seg_txt_2_dict\n\nimport xapian\nSEARCH_DB = xapian.WritableDatabase(DBPATH, xapian.DB_CREATE_OR_OPEN)\nSEARCH_ENQUIRE = xapian.Enquire(SEARCH_DB)\n\ndef search(keywords, offset=0, limit=35, enquire=SEARCH_ENQUIRE):\n    query_list = []\n    for word, value in seg_txt_2_dict(keywords).iteritems():\n        query = xapian.Query(word, value)\n        query_list.append(query)\n    if len(query_list) != 1:\n        query = xapian.Query(xapian.Query.OP_AND, query_list)\n    else: \n        query = query_list[0]\n\n    enquire.set_query(query)\n    matches = enquire.get_mset(offset, limit, None)\n    return matches\n\nif __name__ == \"__main__\":\n    matches = search( \"\u6cbb\u5b89\")\n\n    # Display the results.\n    print \"%i results found.\" % matches.get_matches_estimated()\n    print \"Results 1-%i:\" % matches.size()\n\n    for m in matches:\n        print \"%i: %i%% docid=%i [%s]\" % (m.rank + 1, m.percent, m.docid, m.document.get_data())\n-------------------------------\n\u5f20\u6c88\u9e4f(zsp007@gmail.com) \u4fee\u6539\u7248 rmmseg-cpp", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "mmseg", "package_url": "https://pypi.org/project/mmseg/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mmseg/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/mmseg/1.3.0/", "requires_dist": null, "requires_python": null, "summary": "MMseg\u4e2d\u6587\u5206\u8bcd Chinese Segment On MMSeg Algorithm", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            MMseg\u4e2d\u6587\u5206\u8bcd Chinese Segment On MMSeg Algorithm<br>-------------------------------<br>original edition<br><br>pymmseg-cpp<br>    by pluskid<br>    http://code.google.com/p/pymmseg-cpp/<br><br>This package is Chinese Segment , I think only chinese need it, so the description is chinese . <br><br>If you have interesting , have a look a the original edition<br><br>-------------------------------<br><br>\u5168\u6587\u7d22\u5f15\u7528\uff0c\u914d\u5408 xapian ( http://xapian.org/ ) \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u505a\u5168\u6587\u7d22\u5f15<br><br>~:python -m mmseg.search<br>----------<br>\u54c8\u5c14\u7f57\u6770\u5386\u9669\u8bb0(\u5957)<br>\u54c8\u5c14<br>\u7f57\u6770<br>\u5386\u9669<br>\u5386\u9669\u8bb0<br>----------<br>\u5361\u62c9\u9a6c\u4f50\u592b\u5144\u5f1f<br>\u5361\u62c9<br>\u9a6c<br>\u4f50\u592b<br>\u5144\u5f1f<br>----------<br>\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4<br>\u94f6\u6cb3<br>\u82f1\u96c4<br>\u4f20\u8bf4<br>\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4<br>----------<br>\u5f20\u65e0\u5fcc\u5728\u5149\u660e\u9876<br>\u65e0\u5fcc<br>\u5f20\u65e0\u5fcc<br>\u5149\u660e<br>\u5149\u660e\u9876<br>----------<br>\u97e6\u5e05\u671b\u7684\u6c5f\u6e56(\u2162\u4f17\u671b\u6240\u5f52)<br>\u97e6\u5e05<br>\u5e05\u671b<br>\u97e6\u5e05\u671b<br>\u6c5f\u6e56<br>\u4f17\u671b<br>\u671b\u6240<br>\u6240\u5f52<br>\u4f17\u671b\u6240\u5f52<br>----------<br>\u5c11\u5e74\u97e6\u5e05\u671b\u4e4b\u7ae5\u5e74\u7ed3\u675f\u4e86<br>\u5c11\u5e74<br>\u97e6\u5e05<br>\u5e05\u671b<br>\u671b\u4e4b<br>\u97e6\u5e05\u671b\u4e4b<br>\u7ae5\u5e74<br>\u7ed3\u675f<br>----------<br>\u3000\u3000 \u3000\u664b\u6c5f\u6587\u5b66\u7f51\u7ad9\u9a7b\u7ad9\u4f5c\u5bb6\uff0c\u5df2\u51fa\u7248\u591a\u90e8\u4f5c\u54c1\u3002<br>\u664b\u6c5f<br>\u6587\u5b66<br>\u7f51\u7ad9<br>\u6587\u5b66\u7f51\u7ad9<br>\u9a7b\u7ad9<br>\u4f5c\u5bb6<br>\u51fa\u7248<br>\u591a\u90e8<br>\u4f5c\u54c1<br>-------------------------------<br>\u5206\u8bcd\u7528\uff0c\u9002\u7528\u4e8e\u805a\u7c7b\u7b49\u7b49<br><br>from mmseg import seg_txt<br>for i in seg_txt(\"\u6700\u4e3b\u8981\u7684\u66f4\u52a8\u662f\uff1a\u5f20\u65e0\u5fcc\u6700\u540e\u6ca1\u6709\u9009\u5b9a\u81ea\u5df1\u7684\u914d\u5076\u3002\"):<br>    print i<br><br>-------------------------------<br>\u914d\u5408xapian\u505a\u7d22\u5f15<br><br>#coding:utf-8<br>#!/usr/bin/env python<br><br>import xapian<br>import sys<br>import string<br>from collections import defaultdict<br><br>from mmseg.search import seg_txt_search,seg_txt_2_dict<br><br>import xapian<br>SEARCH_DB = xapian.WritableDatabase(DBPATH, xapian.DB_CREATE_OR_OPEN)<br>SEARCH_ENQUIRE = xapian.Enquire(SEARCH_DB)<br><br>def index_txt(id, txt):<br>    doc = xapian.Document()<br>    for word, value in seg_txt_2_dict(txt).iteritems():<br>        doc.add_term(word, value)<br>    key = \":%s\"%id<br>    doc.add_term(key)<br>    SEARCH_DB.replace_document(key, doc)<br><br><br>def flush_db():<br>    SEARCH_DB.flush()<br>    <br>if __name__ == \"__main__\":<br>    txt = \"\"\"<br>    \u6cbb\u5b89\u7f72\u5730\u6700\u9ad8\u957f\u5b98\u7ad9\u5728\u8857\u5934\uff0c\u76b1\u7709\u770b\u7740\u4e00\u961f\u8fd1\u536b\u519b\u98de\u5feb\u5730\u8d70\u8fc7\uff0c\u4ed6\u5fc3\u4e2d\u6ee1\u662f\u7591\u60d1\uff0c\u7acb\u523b\u56de\u5230\u4e86\u6cbb\u5b89\u7f72\u91cc\u5730\u529e\u516c\u5ba4\uff0c\u7136\u540e\u558a\u6765\u4e86\u81ea\u5df1\u5730\u4e00\u4e2a\u90e8\u4e0b\uff0c\u8ba9\u4ed6\u7acb\u523b\u53bb\u519b\u65b9\u7edf\u5e05\u90e8\u8bf7\u793a\u4e00\u4e0b.<br>    \"\"\"<br><br>    index_txt(1, txt)<br>    flush_db()<br><br>-------------------------------<br>\u914d\u5408xapian\u505a\u641c\u7d22<br><br>#coding:utf-8<br>from mmseg.search import seg_txt_search,seg_txt_2_dict<br><br>import xapian<br>SEARCH_DB = xapian.WritableDatabase(DBPATH, xapian.DB_CREATE_OR_OPEN)<br>SEARCH_ENQUIRE = xapian.Enquire(SEARCH_DB)<br><br>def search(keywords, offset=0, limit=35, enquire=SEARCH_ENQUIRE):<br>    query_list = []<br>    for word, value in seg_txt_2_dict(keywords).iteritems():<br>        query = xapian.Query(word, value)<br>        query_list.append(query)<br>    if len(query_list) != 1:<br>        query = xapian.Query(xapian.Query.OP_AND, query_list)<br>    else: <br>        query = query_list[0]<br><br>    enquire.set_query(query)<br>    matches = enquire.get_mset(offset, limit, None)<br>    return matches<br><br>if __name__ == \"__main__\":<br>    matches = search( \"\u6cbb\u5b89\")<br><br>    # Display the results.<br>    print \"%i results found.\" % matches.get_matches_estimated()<br>    print \"Results 1-%i:\" % matches.size()<br><br>    for m in matches:<br>        print \"%i: %i%% docid=%i [%s]\" % (m.rank + 1, m.percent, m.docid, m.document.get_data())<br>-------------------------------<br>\u5f20\u6c88\u9e4f(zsp007@gmail.com) \u4fee\u6539\u7248 rmmseg-cpp\n          </div>"}, "last_serial": 794873, "releases": {"1.2.4": [{"comment_text": "", "digests": {"md5": "a0531287013bb08f258f9e2023c212b1", "sha256": "e7ba753b7bbefe54b4a7c2e27ed6714d1349e30ad6db9d7f67ce67b80b818f4c"}, "downloads": -1, "filename": "mmseg-1.2.4.tar.gz", "has_sig": false, "md5_digest": "a0531287013bb08f258f9e2023c212b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1608587, "upload_time": "2010-05-02T17:24:55", "upload_time_iso_8601": "2010-05-02T17:24:55.179006Z", "url": "https://files.pythonhosted.org/packages/c9/3a/a38acf3f3ae401082d74cd283d29a873dd3d1b77dc0c7fb28b80f0348073/mmseg-1.2.4.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "ebf97c3d1cc541d0a2241f87174734d0", "sha256": "f8878cddde0e96b7c70ff457edf662e6741716e71723a46a08b9efdcf9e3542d"}, "downloads": -1, "filename": "mmseg-1.3.0.tar.gz", "has_sig": false, "md5_digest": "ebf97c3d1cc541d0a2241f87174734d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 817434, "upload_time": "2012-03-29T12:59:52", "upload_time_iso_8601": "2012-03-29T12:59:52.743866Z", "url": "https://files.pythonhosted.org/packages/f8/31/3bc9205f39cc8ab37193a6fbb24693993b2f305aba9f35b09fad882107ee/mmseg-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ebf97c3d1cc541d0a2241f87174734d0", "sha256": "f8878cddde0e96b7c70ff457edf662e6741716e71723a46a08b9efdcf9e3542d"}, "downloads": -1, "filename": "mmseg-1.3.0.tar.gz", "has_sig": false, "md5_digest": "ebf97c3d1cc541d0a2241f87174734d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 817434, "upload_time": "2012-03-29T12:59:52", "upload_time_iso_8601": "2012-03-29T12:59:52.743866Z", "url": "https://files.pythonhosted.org/packages/f8/31/3bc9205f39cc8ab37193a6fbb24693993b2f305aba9f35b09fad882107ee/mmseg-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:13 2020"}