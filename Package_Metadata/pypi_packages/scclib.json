{"info": {"author": "Raccoon Serious Games", "author_email": "BEP@raccoon.games", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Developing with scclib \n\n## Client computer library for S.C.I.L.E.R. system\nThis is the library to create devices to work together with the SCILER system \n\n### Installation\n- pip install with ```pip install scclib```\n\n### Using this library\n- import lib with `from scclib.device import Device`\n##### create a class that extends `Device`\n- in order to do this:\n    - implement `getStatus()` which should return a dictionary of the current status\n    - implement `performInstruction(action)` which should return a boolean of whether the instruction can be performed, where action has:\n        - `instruction`: string with the name of the instruction\n        - `value`: any type with a value specific for this instruction\n        - `component_id`: string with the name of the component for which the instruction is meant (can be undefined) \n    - implement `test()` which returns nothing, this method should do something visible so the operator can test this device works correctly\n    - implement `reset()` which returns nothing, this method should make the device return to its starting state so that the escape room can be started again\n    - create a constructor which calls the constructor of `Device` with `super(config, logger)` where:\n        - config is a dictionary which has keys:\n            - `id`: this is the id of a device. Write it in camelCase, e.g. \"controlBoard\".\n            - `host`: the IP address of the host for the broker, formatted as a string.\n            - `port` the port of the host for the broker, formatted as a number.\n            - `labels`: these are the labels to which this device should also subscribe, labels is an array of strings, \n        - logger is a function(date, level, message) in which an own logger is implemented where\n             - `date` is an Date object\n             - `level` is one of the following strings: 'debug', 'info', 'warn', 'error', 'fatal'\n             - `message` is a custom string containing more information\n        - it should also add event listeners to GPIO for all input components.\n    - implement `main()` which should call `start(loop, stop)` with an optional event loop and ending function.  \n##### Now in your class which implements `Device` \n- you can call:\n    - `log(level, message)` which logs using the logger provided in `Device` where level one of the following strings: 'debug', 'info', 'warn', 'error', 'fatal' and message custom string containing more information\n    -  `statusChanged()` which can be called to signal to `Device` that the status is changed, this will send a new status to SCILER\n##### To now start the system\n - initialize the device in your main program and call `device.main() `\n\n### Example\n```python\nimport os\n\nfrom scclib.device import Device\n\n\nclass Display(Device):\n    def __init__(self):\n        two_up = os.path.abspath(os.path.join(__file__, \"..\"))\n        rel_path = \"display_config.json\"\n        abs_file_path = os.path.join(two_up, rel_path)\n        abs_file_path = os.path.abspath(os.path.realpath(abs_file_path))\n        config = open(file=abs_file_path)\n        super().__init__(config)\n        self.hint = \"\"\n\n    def get_status(self):\n        return {\"hint\": self.hint}\n\n    def perform_instruction(self, action):\n        instruction = action.get(\"instruction\")\n        if instruction == \"hint\":\n            self.show_hint(action)\n        else:\n            return False, action\n        return True, None\n\n    def test(self):\n        self.hint = \"test\"\n        print(self.hint)\n        self.status_changed()\n\n    def show_hint(self, data):\n        self.hint = data.get(\"value\")\n        print(self.hint)\n        self.status_changed()\n\n    def reset(self):\n        self.hint = \"\"\n        self.status_changed()\n\n    def main(self):\n        self.start()\n\n\nif __name__ == \"__main__\":\n    device = Display()\n    device.main()\n```\nwhere `display_config.json` is\n```json\n{\n  \"id\": \"display\",\n  \"description\": \"Display can print hints\",\n  \"host\": \"192.168.178.82\",\n  \"labels\": [\"hint\"],\n  \"port\": 1883\n}\n```\nexample of `main()` with loop and stop:\n```python\n    def loop(self):\n        previous = self.get_sliders_analog_reading()\n        while True:\n            positions = self.get_sliders_analog_reading()\n            if previous != positions:\n                self.status_changed()\n                previous = positions\n\n    def main(self):\n        self.setup_events()\n        self.start(loop=self.loop, stop=GPIO.cleanup)\n```\n\n## License\nThis library is licensed with GNU GPL v3, see `LICENSE.md`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/IssaHanou/BEP_1920_Q2", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "scclib", "package_url": "https://pypi.org/project/scclib/", "platform": "", "project_url": "https://pypi.org/project/scclib/", "project_urls": {"Homepage": "https://github.com/IssaHanou/BEP_1920_Q2"}, "release_url": "https://pypi.org/project/scclib/0.1.3/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Client library for S.C.I.L.E.R.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Developing with scclib</h1>\n<h2>Client computer library for S.C.I.L.E.R. system</h2>\n<p>This is the library to create devices to work together with the SCILER system</p>\n<h3>Installation</h3>\n<ul>\n<li>pip install with <code>pip install scclib</code></li>\n</ul>\n<h3>Using this library</h3>\n<ul>\n<li>import lib with <code>from scclib.device import Device</code></li>\n</ul>\n<h5>create a class that extends <code>Device</code></h5>\n<ul>\n<li>in order to do this:\n<ul>\n<li>implement <code>getStatus()</code> which should return a dictionary of the current status</li>\n<li>implement <code>performInstruction(action)</code> which should return a boolean of whether the instruction can be performed, where action has:\n<ul>\n<li><code>instruction</code>: string with the name of the instruction</li>\n<li><code>value</code>: any type with a value specific for this instruction</li>\n<li><code>component_id</code>: string with the name of the component for which the instruction is meant (can be undefined)</li>\n</ul>\n</li>\n<li>implement <code>test()</code> which returns nothing, this method should do something visible so the operator can test this device works correctly</li>\n<li>implement <code>reset()</code> which returns nothing, this method should make the device return to its starting state so that the escape room can be started again</li>\n<li>create a constructor which calls the constructor of <code>Device</code> with <code>super(config, logger)</code> where:\n<ul>\n<li>config is a dictionary which has keys:\n<ul>\n<li><code>id</code>: this is the id of a device. Write it in camelCase, e.g. \"controlBoard\".</li>\n<li><code>host</code>: the IP address of the host for the broker, formatted as a string.</li>\n<li><code>port</code> the port of the host for the broker, formatted as a number.</li>\n<li><code>labels</code>: these are the labels to which this device should also subscribe, labels is an array of strings,</li>\n</ul>\n</li>\n<li>logger is a function(date, level, message) in which an own logger is implemented where\n<ul>\n<li><code>date</code> is an Date object</li>\n<li><code>level</code> is one of the following strings: 'debug', 'info', 'warn', 'error', 'fatal'</li>\n<li><code>message</code> is a custom string containing more information</li>\n</ul>\n</li>\n<li>it should also add event listeners to GPIO for all input components.</li>\n</ul>\n</li>\n<li>implement <code>main()</code> which should call <code>start(loop, stop)</code> with an optional event loop and ending function.</li>\n</ul>\n</li>\n</ul>\n<h5>Now in your class which implements <code>Device</code></h5>\n<ul>\n<li>you can call:\n<ul>\n<li><code>log(level, message)</code> which logs using the logger provided in <code>Device</code> where level one of the following strings: 'debug', 'info', 'warn', 'error', 'fatal' and message custom string containing more information</li>\n<li><code>statusChanged()</code> which can be called to signal to <code>Device</code> that the status is changed, this will send a new status to SCILER</li>\n</ul>\n</li>\n</ul>\n<h5>To now start the system</h5>\n<ul>\n<li>initialize the device in your main program and call <code>device.main()</code></li>\n</ul>\n<h3>Example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">scclib.device</span> <span class=\"kn\">import</span> <span class=\"n\">Device</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Display</span><span class=\"p\">(</span><span class=\"n\">Device</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">two_up</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">,</span> <span class=\"s2\">\"..\"</span><span class=\"p\">))</span>\n        <span class=\"n\">rel_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"display_config.json\"</span>\n        <span class=\"n\">abs_file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">two_up</span><span class=\"p\">,</span> <span class=\"n\">rel_path</span><span class=\"p\">)</span>\n        <span class=\"n\">abs_file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"n\">abs_file_path</span><span class=\"p\">))</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">abs_file_path</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"hint\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">perform_instruction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">):</span>\n        <span class=\"n\">instruction</span> <span class=\"o\">=</span> <span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"instruction\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">instruction</span> <span class=\"o\">==</span> <span class=\"s2\">\"hint\"</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">show_hint</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">action</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">\"test\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_changed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">show_hint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_changed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_changed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">Display</span><span class=\"p\">()</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>where <code>display_config.json</code> is</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"display\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Display can print hints\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"192.168.178.82\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"labels\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"hint\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">1883</span>\n<span class=\"p\">}</span>\n</pre>\n<p>example of <code>main()</code> with loop and stop:</p>\n<pre>    <span class=\"k\">def</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_sliders_analog_reading</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">positions</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_sliders_analog_reading</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">previous</span> <span class=\"o\">!=</span> <span class=\"n\">positions</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_changed</span><span class=\"p\">()</span>\n                <span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"n\">positions</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_events</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p>This library is licensed with GNU GPL v3, see <code>LICENSE.md</code>.</p>\n\n          </div>"}, "last_serial": 6513390, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5a2c6583bd5498845a9fdfcbbeb4f487", "sha256": "ac7ed38601464b1efc161986f8dca73d528fe36859ed172b5917a52cd17fdfce"}, "downloads": -1, "filename": "scclib-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a2c6583bd5498845a9fdfcbbeb4f487", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18951, "upload_time": "2020-01-14T11:16:18", "upload_time_iso_8601": "2020-01-14T11:16:18.386543Z", "url": "https://files.pythonhosted.org/packages/a2/a1/c185378b908dcde9cef65b46fb47ed4bd40fcb8e1e00eed1ab2dd5363e05/scclib-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "449cef7c7a3bab22d9b18e415be3e360", "sha256": "2b5bd69a964133076c5a9e7cd7fd21ee4562312f1b01971b1d52d295ffc33aa2"}, "downloads": -1, "filename": "scclib-0.1.0.tar.gz", "has_sig": false, "md5_digest": "449cef7c7a3bab22d9b18e415be3e360", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5394, "upload_time": "2020-01-14T11:16:21", "upload_time_iso_8601": "2020-01-14T11:16:21.230344Z", "url": "https://files.pythonhosted.org/packages/92/24/04deb269374db49b44eca0a3786d9adbebbfb806c6aff31dab5f0a32bbad/scclib-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "21362b36b1dc3e0503df654198da5f84", "sha256": "b8727fd5e667046fbeaa72a80f9659c521bc93fd2d3d3476cbd29309025bfbfa"}, "downloads": -1, "filename": "scclib-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "21362b36b1dc3e0503df654198da5f84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18950, "upload_time": "2020-01-14T12:03:44", "upload_time_iso_8601": "2020-01-14T12:03:44.080519Z", "url": "https://files.pythonhosted.org/packages/48/ff/f0a9f8449b5aed64418b061c51d92c458ea7e1867a5f0cbf483d03bbf729/scclib-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdf841508b8df2b2501a655112d48958", "sha256": "18ebfbadb70430841546f2f0c0d0e51348b3dac60b42d3b568e3062bf7036748"}, "downloads": -1, "filename": "scclib-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bdf841508b8df2b2501a655112d48958", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5390, "upload_time": "2020-01-14T12:03:45", "upload_time_iso_8601": "2020-01-14T12:03:45.733162Z", "url": "https://files.pythonhosted.org/packages/41/db/997cf51aad335f42c7eaf29ef586a2bd5e16065d57102773acaa06f30543/scclib-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9aa9fc85a486aa2524e40f79c3284b79", "sha256": "8c1cf738b221e90c1b7288ccf9e742c2635a47f0503b64acafc7ffee6df42a60"}, "downloads": -1, "filename": "scclib-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9aa9fc85a486aa2524e40f79c3284b79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20585, "upload_time": "2020-01-23T10:25:58", "upload_time_iso_8601": "2020-01-23T10:25:58.924278Z", "url": "https://files.pythonhosted.org/packages/54/ee/aa4fb557947c5afae02ef31e3bba9de84123b7a5f04317b9b3e5a4cfc9a9/scclib-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "971d097564e1a13862c8721bbbcce4b7", "sha256": "49399c90afc8dc35cd82c6e67d7d25af1d5a6f3ab79eb79a54fca3edae3b3a43"}, "downloads": -1, "filename": "scclib-0.1.2.tar.gz", "has_sig": false, "md5_digest": "971d097564e1a13862c8721bbbcce4b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7766, "upload_time": "2020-01-23T10:26:00", "upload_time_iso_8601": "2020-01-23T10:26:00.363739Z", "url": "https://files.pythonhosted.org/packages/b6/6a/fbdc2122696096b85b868f145661f48e5dfe745ffdd4e410076442f59469/scclib-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "2e6bd10f03e5345b4fc5d91e1b0c9f6a", "sha256": "5cd40afef2774877529aa3b2b55badf4197e6eb93e3a085a8df3efc808495ac6"}, "downloads": -1, "filename": "scclib-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2e6bd10f03e5345b4fc5d91e1b0c9f6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20683, "upload_time": "2020-01-24T12:33:09", "upload_time_iso_8601": "2020-01-24T12:33:09.664450Z", "url": "https://files.pythonhosted.org/packages/d9/83/ec12249c6828b8f220c91e509dbe4454285322a0fbf23a76eb252d990db1/scclib-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d77cb359fb75a9cf0963b713d343c414", "sha256": "8678543d659af51263a20919de2a1fb50a8da75e22873e928fbe1dc98354b939"}, "downloads": -1, "filename": "scclib-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d77cb359fb75a9cf0963b713d343c414", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7872, "upload_time": "2020-01-24T12:33:11", "upload_time_iso_8601": "2020-01-24T12:33:11.018783Z", "url": "https://files.pythonhosted.org/packages/a7/23/111f213427f2c88a14c26f02f752ece7128b4e91da8d5232b5165445d065/scclib-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e6bd10f03e5345b4fc5d91e1b0c9f6a", "sha256": "5cd40afef2774877529aa3b2b55badf4197e6eb93e3a085a8df3efc808495ac6"}, "downloads": -1, "filename": "scclib-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2e6bd10f03e5345b4fc5d91e1b0c9f6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20683, "upload_time": "2020-01-24T12:33:09", "upload_time_iso_8601": "2020-01-24T12:33:09.664450Z", "url": "https://files.pythonhosted.org/packages/d9/83/ec12249c6828b8f220c91e509dbe4454285322a0fbf23a76eb252d990db1/scclib-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d77cb359fb75a9cf0963b713d343c414", "sha256": "8678543d659af51263a20919de2a1fb50a8da75e22873e928fbe1dc98354b939"}, "downloads": -1, "filename": "scclib-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d77cb359fb75a9cf0963b713d343c414", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7872, "upload_time": "2020-01-24T12:33:11", "upload_time_iso_8601": "2020-01-24T12:33:11.018783Z", "url": "https://files.pythonhosted.org/packages/a7/23/111f213427f2c88a14c26f02f752ece7128b4e91da8d5232b5165445d065/scclib-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:59 2020"}