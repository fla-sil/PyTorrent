{"info": {"author": "Jan-Hendrik Tr\u00f6semeier, Christel Kamp, Susanne Lipp", "author_email": "jan-hendrik.troesemeier@pei.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "Summary\n-------\nWe provide a library that enables us to select a number of reference genes to\nwhich codon usage should be optimized. Furthermore, we allow for input of a\nvariable amount of fitness factors: translation speed of codons, tRNA\nabundance, etc.  Given these contributing fitness factors the result is\ndisplayed as the strength of the respective fitness factors that lead to the\nbest resemblance between simulated and reference codon usage. In a next step,\nthe strengths can be tuned and a codon usage can be generated that can\nafterwards be used to adapt a gene sequence with the help of classic codon\noptimization tools as OPTIMIZER.\n\nExample\n-------\nIn an example workflow you might want to select a fasta file that\ncontains the genes you want use. You can either select them from a file\nor a url. In both cases a histogram of codon usage and amino acid usage\nis generated.\n\nYou can then (optionally) load a list of highly expressed genes, we\nsupport the format from the HEG database.  Visualizing the codon usage\nbias for e.g. checking if the CUB as you expect can be done by plotting\nvarious methods of dimensionality reduction.\n\nIf you do not want to use all the genes you can enter a\nnumber n. The first n genes will only be analysed.\n\nYou now have to select a fitness matrix which gives the probability of\none amino acid to be represented by another one.\n\nAdditionally, you can select a number of fitnessfunctions that assign\nto each codon a fitness. These functions will be normalized!\nIf you want to perform a test run you\nhave to enter the parameters: alpha,beta,selection,t_i for every\ntestfunction. alpha and beta are parameters for the <todo> model of\ncodon substitution and are related to transition/transversion bias.\nInput is either comma or whitespace/tab separated (or a combination of\nthose).\n\nYou can compare the absolute codon usage and relative (normalized for\neach amino acid) codon usage by plot comparison.  For optimizing the\ndistance you can try optimizing the first gene and again regard the\ncomparison to see if the algorithm works at all.\n\nIn a last step you can optimize all genes you have read in. Returned\nare the optimal parameters, a goodness of fit and the RSCU that you can\nuse for optimizing with the help of, e.g., OPTIMIZER.\n\nAuthors and License\n-------------------\nGPLv3\nJan-Hendrik Tr\u00f6semeier,\nSusanne Lipp,\nChristel Kamp\n\nContact: name.lastname at pei.de", "description_content_type": null, "docs_url": null, "download_url": "TODO.orggithub?.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "TODO.orggithub?", "keywords": "bioinformatics", "license": "LICENSE", "maintainer": null, "maintainer_email": null, "name": "cobilib", "package_url": "https://pypi.org/project/cobilib/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cobilib/", "project_urls": {"Download": "TODO.orggithub?.tar.gz", "Homepage": "TODO.orggithub?"}, "release_url": "https://pypi.org/project/cobilib/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Optimizing Codon Usage with a Quasispecies Model", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"summary\">\n<h2>Summary</h2>\n<p>We provide a library that enables us to select a number of reference genes to\nwhich codon usage should be optimized. Furthermore, we allow for input of a\nvariable amount of fitness factors: translation speed of codons, tRNA\nabundance, etc.  Given these contributing fitness factors the result is\ndisplayed as the strength of the respective fitness factors that lead to the\nbest resemblance between simulated and reference codon usage. In a next step,\nthe strengths can be tuned and a codon usage can be generated that can\nafterwards be used to adapt a gene sequence with the help of classic codon\noptimization tools as OPTIMIZER.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>In an example workflow you might want to select a fasta file that\ncontains the genes you want use. You can either select them from a file\nor a url. In both cases a histogram of codon usage and amino acid usage\nis generated.</p>\n<p>You can then (optionally) load a list of highly expressed genes, we\nsupport the format from the HEG database.  Visualizing the codon usage\nbias for e.g. checking if the CUB as you expect can be done by plotting\nvarious methods of dimensionality reduction.</p>\n<p>If you do not want to use all the genes you can enter a\nnumber n. The first n genes will only be analysed.</p>\n<p>You now have to select a fitness matrix which gives the probability of\none amino acid to be represented by another one.</p>\n<p>Additionally, you can select a number of fitnessfunctions that assign\nto each codon a fitness. These functions will be normalized!\nIf you want to perform a test run you\nhave to enter the parameters: alpha,beta,selection,t_i for every\ntestfunction. alpha and beta are parameters for the &lt;todo&gt; model of\ncodon substitution and are related to transition/transversion bias.\nInput is either comma or whitespace/tab separated (or a combination of\nthose).</p>\n<p>You can compare the absolute codon usage and relative (normalized for\neach amino acid) codon usage by plot comparison.  For optimizing the\ndistance you can try optimizing the first gene and again regard the\ncomparison to see if the algorithm works at all.</p>\n<p>In a last step you can optimize all genes you have read in. Returned\nare the optimal parameters, a goodness of fit and the RSCU that you can\nuse for optimizing with the help of, e.g., OPTIMIZER.</p>\n</div>\n<div id=\"authors-and-license\">\n<h2>Authors and License</h2>\n<p>GPLv3\nJan-Hendrik Tr\u00f6semeier,\nSusanne Lipp,\nChristel Kamp</p>\n<p>Contact: name.lastname at pei.de</p>\n</div>\n\n          </div>"}, "last_serial": 787594, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "cc20c55eca61c2e887684750b233eccd", "sha256": "fd75868faa384b69296f96702c62379a1604a035f85344da282a8f2afb5b18c5"}, "downloads": -1, "filename": "cobilib-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cc20c55eca61c2e887684750b233eccd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74091, "upload_time": "2013-02-25T13:45:09", "upload_time_iso_8601": "2013-02-25T13:45:09.892318Z", "url": "https://files.pythonhosted.org/packages/8a/87/d6b61da0fd1e871b50245da42e97f0c39c53eaec97cc4de70cf5a98ad896/cobilib-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cc20c55eca61c2e887684750b233eccd", "sha256": "fd75868faa384b69296f96702c62379a1604a035f85344da282a8f2afb5b18c5"}, "downloads": -1, "filename": "cobilib-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cc20c55eca61c2e887684750b233eccd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74091, "upload_time": "2013-02-25T13:45:09", "upload_time_iso_8601": "2013-02-25T13:45:09.892318Z", "url": "https://files.pythonhosted.org/packages/8a/87/d6b61da0fd1e871b50245da42e97f0c39c53eaec97cc4de70cf5a98ad896/cobilib-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:22 2020"}