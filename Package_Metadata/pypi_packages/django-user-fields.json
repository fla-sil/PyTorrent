{"info": {"author": "Rishi Hindocha", "author_email": "rishi@linux.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-user-fields\n==================\nA Django application that makes user creation of form fields simple, handling everything from form generation to data storage and retrieval.\n\nThis was initially built for `MUN Manager <https://modelun.co>`_ to allow conferences to collect whatever information they wanted to during all parts of the registration process. django-user-fields allows conferences to easily add their own extra fields to various forms using a simple admin interface creating a tailored experience.\n\nSimple Installation and Usage Guide\n===================================\n\n1. Install ``django-user-fields``:\n\n.. code-block::\n\n    $ pip install django-user-fields\n\n2. Add ``user_fields`` to your installed apps:\n\n.. code-block::\n\n    INSTALLED_APPS = (\n        ...\n        'user_fields',\n        ...\n    )\n\n3. Run a database migration:\n\n.. code-block::\n\n    $ python manage.py migrate\n\n4. Create an ``ExtendedExtraField`` model:\n\n.. code-block::\n\n    from user_fields.models import ExtraField\n\n    class ExtendedExtraField(ExtraField):\n\n        # You can add any custom fields you'd like here to make filtering fields easier.\n        # A list of all predefined fields can be found below.\n\n5. Add the ``@initialise_extra_fields`` decorator to your form:\n\n.. code-block::\n\n    from user_fields.decorators import initialise_extra_fields\n\n    @initialise_extra_fields\n    class ExampleForm(forms.ModelForm):\n\n6. Add the ``UserFieldMixin`` to the object(s) you would like to have extra fields:\n\n.. code-block::\n\n    from user_fields.mixins import UserFieldMixin\n\n    class ExampleObject(models.Model, UserFieldMixin):\n\n7. Add a ``UserDataField`` to the object for storage and migrate:\n\n.. code-block::\n\n    from user_fields.models import UserDataField, ExtraField\n\n    class ExampleObject(models.Model, UserFieldMixin):\n\n        extra_data = UserDataField()\n\n    $ python manage.py migrate\n\n**Note**: If ``extra_data`` is taken and/or you would like to name the storage field something else, you can define ``USER_FIELDS_ATTR_NAME`` in your settings.\n\n8. Create and pass some extra fields to your form:\n\n.. code-block::\n\n    extra_fields = ExtendedExtraField.objects.filter(parameter=something)\n\n    form = ExampleForm(... extra_fields=extra_fields, ...)\n\n9. Add an extra line to save the extra fields to your object:\n\n.. code-block::\n\n    object = form.save()\n    object.save_extra_form_data(form) # Ensures that both object and form save functions are not overwritten.\n\nSupported Fields\n================\n\n- ``CharField``\n- ``CharField With Choices``\n- ``TextField``\n- ``BooleanField``\n- ``EmailField``\n\nFeel free to submit a pull request if you would like to add more fields. Most fields should be relatively easy to add, although ``FileField`` will be an interesting challenge!\n\n``ExtraField`` Attributes\n=========================\n\n+-------------+------------+---------------------------------------------------+------------------------------+\n| Proper Name | Name       | Description                                       | Example                      |\n+=============+============+===================================================+==============================+\n| Name        | name       | Equivalent to the HTML ``input`` name parameter.  | example-field (slug format)  |\n+-------------+------------+---------------------------------------------------+------------------------------+\n| Label       | label      | Django form field label (rendered name).          | Example Field                |\n+-------------+------------+---------------------------------------------------+------------------------------+\n| Help Text   | help_text  | Django form field help text.                      | This is some guidance.       |\n+-------------+------------+---------------------------------------------------+------------------------------+\n| Required    | required   | Django form field required parameter.             | True / False                 |\n+-------------+------------+---------------------------------------------------+------------------------------+\n| Field Type  | field_type | Dropdown with all supported fields.               | CharField (char)             |\n+-------------+------------+---------------------------------------------------+------------------------------+\n| Max. Length | max_length | CharField (only) max length.                      | 35                           |\n+-------------+------------+---------------------------------------------------+------------------------------+\n| Choices     | choices    | Choices for the ``CharField With Choices``.       | Option 1,Option 2,Option 3   |\n+-------------+------------+---------------------------------------------------+------------------------------+\n\n``UserFieldMixin`` Functions\n============================\n\n``.retrieve_extra_data(ExtraField, formatted=True/False)``: Returns the data stored for a given field. If formatted is True, it will return the `value` for the ``CharField With Choices``, otherwise it will return the `key` of the choice.\n\n``.save_extra_data(ExtraField, data)``: Saves the data supplied for a given field to the object.\n\n``.save_extra_form_data(Form)``: Saves all of the extra field data in a form to the object.\n\n``.delete_extra_data(ExtraField)``: Deletes all of the data associated with a given field.\n\nTo Do\n=====\n\n- Improve documentation.\n- Implement testing.\n- Add support for more fields.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Rishk/django-user-fields", "keywords": "django custom user defined form fields", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-user-fields", "package_url": "https://pypi.org/project/django-user-fields/", "platform": "", "project_url": "https://pypi.org/project/django-user-fields/", "project_urls": {"Homepage": "https://github.com/Rishk/django-user-fields"}, "release_url": "https://pypi.org/project/django-user-fields/0.1.0/", "requires_dist": ["Django (>=2.0)"], "requires_python": "", "summary": "A Django application that makes user creation of form fields simple.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-user-fields\">\n<h2>django-user-fields</h2>\n<p>A Django application that makes user creation of form fields simple, handling everything from form generation to data storage and retrieval.</p>\n<p>This was initially built for <a href=\"https://modelun.co\" rel=\"nofollow\">MUN Manager</a> to allow conferences to collect whatever information they wanted to during all parts of the registration process. django-user-fields allows conferences to easily add their own extra fields to various forms using a simple admin interface creating a tailored experience.</p>\n</div>\n<div id=\"simple-installation-and-usage-guide\">\n<h2>Simple Installation and Usage Guide</h2>\n<ol>\n<li>Install <tt><span class=\"pre\">django-user-fields</span></tt>:</li>\n</ol>\n<pre>$ pip install django-user-fields\n</pre>\n<ol>\n<li>Add <tt>user_fields</tt> to your installed apps:</li>\n</ol>\n<pre>INSTALLED_APPS = (\n    ...\n    'user_fields',\n    ...\n)\n</pre>\n<ol>\n<li>Run a database migration:</li>\n</ol>\n<pre>$ python manage.py migrate\n</pre>\n<ol>\n<li>Create an <tt>ExtendedExtraField</tt> model:</li>\n</ol>\n<pre>from user_fields.models import ExtraField\n\nclass ExtendedExtraField(ExtraField):\n\n    # You can add any custom fields you'd like here to make filtering fields easier.\n    # A list of all predefined fields can be found below.\n</pre>\n<ol>\n<li>Add the <tt>@initialise_extra_fields</tt> decorator to your form:</li>\n</ol>\n<pre>from user_fields.decorators import initialise_extra_fields\n\n@initialise_extra_fields\nclass ExampleForm(forms.ModelForm):\n</pre>\n<ol>\n<li>Add the <tt>UserFieldMixin</tt> to the object(s) you would like to have extra fields:</li>\n</ol>\n<pre>from user_fields.mixins import UserFieldMixin\n\nclass ExampleObject(models.Model, UserFieldMixin):\n</pre>\n<ol>\n<li>Add a <tt>UserDataField</tt> to the object for storage and migrate:</li>\n</ol>\n<pre>from user_fields.models import UserDataField, ExtraField\n\nclass ExampleObject(models.Model, UserFieldMixin):\n\n    extra_data = UserDataField()\n\n$ python manage.py migrate\n</pre>\n<p><strong>Note</strong>: If <tt>extra_data</tt> is taken and/or you would like to name the storage field something else, you can define <tt>USER_FIELDS_ATTR_NAME</tt> in your settings.</p>\n<ol>\n<li>Create and pass some extra fields to your form:</li>\n</ol>\n<pre>extra_fields = ExtendedExtraField.objects.filter(parameter=something)\n\nform = ExampleForm(... extra_fields=extra_fields, ...)\n</pre>\n<ol>\n<li>Add an extra line to save the extra fields to your object:</li>\n</ol>\n<pre>object = form.save()\nobject.save_extra_form_data(form) # Ensures that both object and form save functions are not overwritten.\n</pre>\n</div>\n<div id=\"supported-fields\">\n<h2>Supported Fields</h2>\n<ul>\n<li><tt>CharField</tt></li>\n<li><tt>CharField With Choices</tt></li>\n<li><tt>TextField</tt></li>\n<li><tt>BooleanField</tt></li>\n<li><tt>EmailField</tt></li>\n</ul>\n<p>Feel free to submit a pull request if you would like to add more fields. Most fields should be relatively easy to add, although <tt>FileField</tt> will be an interesting challenge!</p>\n</div>\n<div id=\"extrafield-attributes\">\n<h2><tt>ExtraField</tt> Attributes</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Proper Name</th>\n<th>Name</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Name</td>\n<td>name</td>\n<td>Equivalent to the HTML <tt>input</tt> name parameter.</td>\n<td>example-field (slug format)</td>\n</tr>\n<tr><td>Label</td>\n<td>label</td>\n<td>Django form field label (rendered name).</td>\n<td>Example Field</td>\n</tr>\n<tr><td>Help Text</td>\n<td>help_text</td>\n<td>Django form field help text.</td>\n<td>This is some guidance.</td>\n</tr>\n<tr><td>Required</td>\n<td>required</td>\n<td>Django form field required parameter.</td>\n<td>True / False</td>\n</tr>\n<tr><td>Field Type</td>\n<td>field_type</td>\n<td>Dropdown with all supported fields.</td>\n<td>CharField (char)</td>\n</tr>\n<tr><td>Max. Length</td>\n<td>max_length</td>\n<td>CharField (only) max length.</td>\n<td>35</td>\n</tr>\n<tr><td>Choices</td>\n<td>choices</td>\n<td>Choices for the <tt>CharField With Choices</tt>.</td>\n<td>Option 1,Option 2,Option 3</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"userfieldmixin-functions\">\n<h2><tt>UserFieldMixin</tt> Functions</h2>\n<p><tt>.retrieve_extra_data(ExtraField, formatted=True/False)</tt>: Returns the data stored for a given field. If formatted is True, it will return the <cite>value</cite> for the <tt>CharField With Choices</tt>, otherwise it will return the <cite>key</cite> of the choice.</p>\n<p><tt>.save_extra_data(ExtraField, data)</tt>: Saves the data supplied for a given field to the object.</p>\n<p><tt>.save_extra_form_data(Form)</tt>: Saves all of the extra field data in a form to the object.</p>\n<p><tt>.delete_extra_data(ExtraField)</tt>: Deletes all of the data associated with a given field.</p>\n</div>\n<div id=\"to-do\">\n<h2>To Do</h2>\n<ul>\n<li>Improve documentation.</li>\n<li>Implement testing.</li>\n<li>Add support for more fields.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4219725, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ff9573c94cdbb6488a904388958aaa82", "sha256": "f52d204504602b053d652d3128469dae2083dc29bf589587c27539b97fb95518"}, "downloads": -1, "filename": "django_user_fields-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ff9573c94cdbb6488a904388958aaa82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8182, "upload_time": "2018-08-29T17:29:21", "upload_time_iso_8601": "2018-08-29T17:29:21.951488Z", "url": "https://files.pythonhosted.org/packages/17/c4/cdce4f9191723b128202458b31ec529c00c5c7a227e0b9ac469b2aa33b1d/django_user_fields-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff9573c94cdbb6488a904388958aaa82", "sha256": "f52d204504602b053d652d3128469dae2083dc29bf589587c27539b97fb95518"}, "downloads": -1, "filename": "django_user_fields-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ff9573c94cdbb6488a904388958aaa82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8182, "upload_time": "2018-08-29T17:29:21", "upload_time_iso_8601": "2018-08-29T17:29:21.951488Z", "url": "https://files.pythonhosted.org/packages/17/c4/cdce4f9191723b128202458b31ec529c00c5c7a227e0b9ac469b2aa33b1d/django_user_fields-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:52:09 2020"}