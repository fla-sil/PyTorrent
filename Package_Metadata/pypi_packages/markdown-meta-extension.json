{"info": {"author": "Martin Schorfmann", "author_email": "schorfma@uni-bremen.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Text Processing :: Markup"], "description": "\n[![pipeline status](https://gitlab.com/markdown-meta-extension/markdown-meta-extension/badges/master/pipeline.svg)](https://gitlab.com/markdown-meta-extension/markdown-meta-extension/-/commits/master)\n\n# Markdown Meta Extension\n\n<img src=\"https://gitlab.com/markdown-meta-extension/markdown-meta-extension/-/raw/master/MarkdownMetaExtension-Banner.png\" width=\"600px\" />\n\nThe _Markdown Meta Extension_, a _Python-Markdown_ extension, enables users to use _Python_ functions and classes from within _Markdown_ documents and assign results to variables.\n\nThis software has been created by _Martin Schorfmann_ (@schorfma) for his bachelor thesis at the [_Universit\u00e4t Bremen_](https://www.uni-bremen.de/) with the following title:\n\n> _Markdown Meta Extension: Providing programmable Content in Markdown Documents_\n\n## Getting Started\n\n### Prerequisites\n\nYou need to have a working installation of\n\n* _Python_ \u2265 ``3.7.0``\n\n### Installation\n\n#### Install from PyPI\n\nExecute the following command to install the _Markdown Meta Extension_ from [_PyPI_](https://pypi.org/project/markdown-meta-extension/).\n\n```bash\n$ pip install markdown-meta-extension\n```\n\n#### Install from the GitLab repository\n\nExecute the following command to install the _Markdown Meta Extension_ from this _Git_ repository.\n\n```bash\n$ pip install git+https://gitlab.com/markdown-meta-extension/markdown-meta-extension.git\n```\n\n#### Install from downloaded source\n\nExecute the following command in the main directory of the downloaded repository for manual installation of _Markdown Meta Extension_.\n\n```bash\n$ pip install .\n```\n\n## Usage\n\n### Usage as _Python-Markdown_ extension\n\nThe extension name for use with _Python-Markdown_ is ``markdown_meta_extension``.\n\nThe extension can be used with _Python-Markdown_ as follows:\n\n```python\nimport markdown\n\nparser = markdown.Markdown(extensions=[\"markdown_meta_extension\"])\n# Convert a Markdown Meta Extension string\nparser.convert(\"\"\"\n---\nnow: datetime:datetime.now\n---\n\n{{ now }}\n\"\"\")\n```\n\n### Usage of the _CLI_ command\n\n1. Navigate to the directory the document is in.\n2. Install requirements of custom _Python_ modules, if needed.\n3. Convert the document using the command ``markdown-meta-extension``\n\n```bash\n$ cd ./example\n$ pip install -r requirements.txt\n$ markdown-meta-extension ./document.md --yes\nOutput path document.html is assumed.\n3 callables were imported.\n19 calls were made.\nFile document.html will be overwritten.\nOutput written to file document.html\n```\n\n#### Available options\n\n```bash\n$ markdown-meta-extension --help\nUsage: markdown-meta-extension [OPTIONS] INPUT_PATH\n\n  CLI command for converting an input Markdown file to an output HTML file.\n\n  [...]\n\nOptions:\n  -o, --output PATH  The optional path for the HTML output.\n  -q, --quiet        Mute all command line output.\n  -v, --verbose      Display additional command line output and file contents.\n  -y, --yes          Confirm overwriting existing output file.\n  --help             Show this message and exit.\n```\n\n## Tutorial\n\n### Import Front Matter\n\nThe _Markdown_ document needs to start with a _YAML_ front matter, in which the import statements are assigned to variables:\n\n```yaml\n---\nDate: datetime:date                     # Import of class from an installed package\nnow: datetime:datetime.now              # Import of a class method\necho: ./echo_module.py:echo_function    # Import of a function from a file system module\ndemo: ./jinja_template.html:demo_macro  # Import of a Jinja macro from a Jinja HTML Template\n---\n```\n\nThe import statements use a ``:`` to separate the top-level package or file name from the remaining import statement.\n\nFor relative import paths the current working directory (where the command is executed) is the base for the relative paths.\n\nThe possible import types are the following:\n\n* Installed _Python_ package\n    - Any defined variable or callable\n* _Python_ module in file system\n    - Any defined variable or callable\n* _Jinja_ _HTML_ template\n    - _Jinja_ Macro defined in template\n\n### Outsourcing Common Imports\n\n```yaml\nimport:\n- ../base_imports.yaml\n- ./more_specific_imports.yaml\necho: ./echo_module.py:echo_function\n```\n\nIt is possible to outsource commonly used imports into dedicated _YAML_ files.\nThe outsourced imports are imported in order, potentially overwriting duplicate keys with the import defined the later file or the front matter itself.\n\n### Call Blocks\n\nCall blocks are used to invoke a callable with potential parameters.\nAny import key or variable can be either directly invoked or subscripted to invoke a method or attribute.\nThe parameters can be either a _YAML_ list or mapping. If no parameters are needed they can be omitted entirely.\n\nIf no assignment to a variable is made, the result gets displayed unless the invocation returns an empty result.\nWhen assigning the result to a variable, a _Force Display Flag_ (``!``) is needed to display the result.\n\n```markdown\n{{! variable_name = ClassName.class_method_name\nargument: value\n}}\n```\n\n#### Calling a function without parameters\n\n```markdown\n{{ now }}\n```\n\n#### Calling a function with parameters\n\n```markdown\nBlock with list parameters:\n\n{{ echo\n- My Message\n}}\n```\n\n```markdown\nInline with list parameters:\n\n{{ echo [My Message] }}\n```\n\n```markdown\nBlock with mapping parameters:\n\n{{ echo\nmessage: My Message\n}}\n```\n\n```markdown\nInline with mapping parameters:\n\n{{ echo {message: My Message} }}\n```\n\n#### Instantiating a class\n\n```markdown\n{{! board = ChessBoard }}\n```\n\n```markdown\n{{ board.move\nmove: a2a4\n}}\n```\n\n### Nesting\n\nCall blocks can be nested if needed. It is important, that they are explicitly marked as strings in _YAML_\n\n```markdown\n{{ sum\n- 42\n- \"{{ my_number }}\"\n}}\n```\n\n### Variable Blocks\n\nVariable blocks allow for defining multiple variables in one block.\n\n```\n{{\nnumber: 42\nquote: |\n  First Line.\n  Second Line.\npi: \"{{ get_pi }}\"\nbudget: |\n  {{ money\n  value: 12.34\n  currency: EUR\n  }}\n}}\n```\n\n### Standalone Documents\n\nStandalone documents are used to insert the result document in a _Jinja_ template together with additional meta data variables.\n\n```yaml\n---\nmeta-data:\n  template: ./template.html\n  title: The Title\n  author: The Author\ntoday: datetime:date.today\n# ...\n```\n\n#### Outsourced Meta Data Imports\n\nThe outsourcing of meta data follows the same rules like the outsourcing of imports.\n\n```yaml\nmeta-data-import:\n- ../base-information.yaml\n- ./external-data.yaml\nmeta-data:\n  title: Another Title\ntoday: datetime:date.today\n# ...\n```\n\n### Behavior\n\nIf an object has an ``__html__()`` method, it is used as a representation.\nThe string representation ``__str__()``is used as a fallback.\n\nThe syntax to access attributes and methods can also be used to access the ``__getitem__()`` builtin method.\n\nSome data types have a default display behavior.\nFor example lists of items are displayed as an _HTML_ unordered list when used in a block, and as comma-separated values when used inline.\n\n## Examples\n\nSeven examples have been implemented in the subdirectories of the directory [``examples``](./examples)\n\n## Used Libraries\n\nWithout these libraries the development of the _Markdown Meta Extension_ would not have been possible. Thanks to their authors and contributors!\n\n* [``Python-Markdown``](https://python-markdown.github.io/)\n* [``Click``](https://palletsprojects.com/p/click/)\n* [``Jinja``](https://palletsprojects.com/p/jinja/)\n* [``MarkupSafe``](https://palletsprojects.com/p/markupsafe/)\n* [``PyYAML``](https://pyyaml.org/)\n* [``pathvalidate``](https://github.com/thombashi/pathvalidate)\n\n### Libraries used in Tests\n\n* [``beautifulsoup4``](https://www.crummy.com/software/BeautifulSoup/)\n* [``lxml``](https://lxml.de/)\n* [``parse``](https://github.com/r1chardj0n3s/parse)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/markdown-meta-extension/markdown-meta-extension", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "markdown-meta-extension", "package_url": "https://pypi.org/project/markdown-meta-extension/", "platform": "", "project_url": "https://pypi.org/project/markdown-meta-extension/", "project_urls": {"Homepage": "https://gitlab.com/markdown-meta-extension/markdown-meta-extension"}, "release_url": "https://pypi.org/project/markdown-meta-extension/0.5.3/", "requires_dist": ["Click", "jinja2", "Markdown", "MarkupSafe", "pathvalidate", "PyYAML", "pelican ; extra == 'pelican'"], "requires_python": ">=3.7.0", "summary": "Markdown Meta Extension for using Python functions and classes from within documents.", "version": "0.5.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://gitlab.com/markdown-meta-extension/markdown-meta-extension/-/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d2a1bf68d1e73dc4e0e4cb7b663335f1b567847/68747470733a2f2f6769746c61622e636f6d2f6d61726b646f776e2d6d6574612d657874656e73696f6e2f6d61726b646f776e2d6d6574612d657874656e73696f6e2f6261646765732f6d61737465722f706970656c696e652e737667\"></a></p>\n<h1>Markdown Meta Extension</h1>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/126a0f1de593e6b72f925be52832bd4388090454/68747470733a2f2f6769746c61622e636f6d2f6d61726b646f776e2d6d6574612d657874656e73696f6e2f6d61726b646f776e2d6d6574612d657874656e73696f6e2f2d2f7261772f6d61737465722f4d61726b646f776e4d657461457874656e73696f6e2d42616e6e65722e706e67\" width=\"600px\">\n<p>The <em>Markdown Meta Extension</em>, a <em>Python-Markdown</em> extension, enables users to use <em>Python</em> functions and classes from within <em>Markdown</em> documents and assign results to variables.</p>\n<p>This software has been created by <em>Martin Schorfmann</em> (@schorfma) for his bachelor thesis at the <a href=\"https://www.uni-bremen.de/\" rel=\"nofollow\"><em>Universit\u00e4t Bremen</em></a> with the following title:</p>\n<blockquote>\n<p><em>Markdown Meta Extension: Providing programmable Content in Markdown Documents</em></p>\n</blockquote>\n<h2>Getting Started</h2>\n<h3>Prerequisites</h3>\n<p>You need to have a working installation of</p>\n<ul>\n<li><em>Python</em> \u2265 <code>3.7.0</code></li>\n</ul>\n<h3>Installation</h3>\n<h4>Install from PyPI</h4>\n<p>Execute the following command to install the <em>Markdown Meta Extension</em> from <a href=\"https://pypi.org/project/markdown-meta-extension/\" rel=\"nofollow\"><em>PyPI</em></a>.</p>\n<pre>$ pip install markdown-meta-extension\n</pre>\n<h4>Install from the GitLab repository</h4>\n<p>Execute the following command to install the <em>Markdown Meta Extension</em> from this <em>Git</em> repository.</p>\n<pre>$ pip install git+https://gitlab.com/markdown-meta-extension/markdown-meta-extension.git\n</pre>\n<h4>Install from downloaded source</h4>\n<p>Execute the following command in the main directory of the downloaded repository for manual installation of <em>Markdown Meta Extension</em>.</p>\n<pre>$ pip install .\n</pre>\n<h2>Usage</h2>\n<h3>Usage as <em>Python-Markdown</em> extension</h3>\n<p>The extension name for use with <em>Python-Markdown</em> is <code>markdown_meta_extension</code>.</p>\n<p>The extension can be used with <em>Python-Markdown</em> as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">markdown</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">markdown</span><span class=\"o\">.</span><span class=\"n\">Markdown</span><span class=\"p\">(</span><span class=\"n\">extensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"markdown_meta_extension\"</span><span class=\"p\">])</span>\n<span class=\"c1\"># Convert a Markdown Meta Extension string</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">---</span>\n<span class=\"s2\">now: datetime:datetime.now</span>\n<span class=\"s2\">---</span>\n\n<span class=\"s2\">{{ now }}</span>\n<span class=\"s2\">\"\"\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Usage of the <em>CLI</em> command</h3>\n<ol>\n<li>Navigate to the directory the document is in.</li>\n<li>Install requirements of custom <em>Python</em> modules, if needed.</li>\n<li>Convert the document using the command <code>markdown-meta-extension</code></li>\n</ol>\n<pre>$ <span class=\"nb\">cd</span> ./example\n$ pip install -r requirements.txt\n$ markdown-meta-extension ./document.md --yes\nOutput path document.html is assumed.\n<span class=\"m\">3</span> callables were imported.\n<span class=\"m\">19</span> calls were made.\nFile document.html will be overwritten.\nOutput written to file document.html\n</pre>\n<h4>Available options</h4>\n<pre>$ markdown-meta-extension --help\nUsage: markdown-meta-extension <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> INPUT_PATH\n\n  CLI <span class=\"nb\">command</span> <span class=\"k\">for</span> converting an input Markdown file to an output HTML file.\n\n  <span class=\"o\">[</span>...<span class=\"o\">]</span>\n\nOptions:\n  -o, --output PATH  The optional path <span class=\"k\">for</span> the HTML output.\n  -q, --quiet        Mute all <span class=\"nb\">command</span> line output.\n  -v, --verbose      Display additional <span class=\"nb\">command</span> line output and file contents.\n  -y, --yes          Confirm overwriting existing output file.\n  --help             Show this message and exit.\n</pre>\n<h2>Tutorial</h2>\n<h3>Import Front Matter</h3>\n<p>The <em>Markdown</em> document needs to start with a <em>YAML</em> front matter, in which the import statements are assigned to variables:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">Date</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">datetime:date</span>                     <span class=\"c1\"># Import of class from an installed package</span>\n<span class=\"nt\">now</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">datetime:datetime.now</span>              <span class=\"c1\"># Import of a class method</span>\n<span class=\"nt\">echo</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">./echo_module.py:echo_function</span>    <span class=\"c1\"># Import of a function from a file system module</span>\n<span class=\"nt\">demo</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">./jinja_template.html:demo_macro</span>  <span class=\"c1\"># Import of a Jinja macro from a Jinja HTML Template</span>\n<span class=\"nn\">---</span>\n</pre>\n<p>The import statements use a <code>:</code> to separate the top-level package or file name from the remaining import statement.</p>\n<p>For relative import paths the current working directory (where the command is executed) is the base for the relative paths.</p>\n<p>The possible import types are the following:</p>\n<ul>\n<li>Installed <em>Python</em> package\n<ul>\n<li>Any defined variable or callable</li>\n</ul>\n</li>\n<li><em>Python</em> module in file system\n<ul>\n<li>Any defined variable or callable</li>\n</ul>\n</li>\n<li><em>Jinja</em> <em>HTML</em> template\n<ul>\n<li><em>Jinja</em> Macro defined in template</li>\n</ul>\n</li>\n</ul>\n<h3>Outsourcing Common Imports</h3>\n<pre><span class=\"nt\">import</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">../base_imports.yaml</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">./more_specific_imports.yaml</span>\n<span class=\"nt\">echo</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">./echo_module.py:echo_function</span>\n</pre>\n<p>It is possible to outsource commonly used imports into dedicated <em>YAML</em> files.\nThe outsourced imports are imported in order, potentially overwriting duplicate keys with the import defined the later file or the front matter itself.</p>\n<h3>Call Blocks</h3>\n<p>Call blocks are used to invoke a callable with potential parameters.\nAny import key or variable can be either directly invoked or subscripted to invoke a method or attribute.\nThe parameters can be either a <em>YAML</em> list or mapping. If no parameters are needed they can be omitted entirely.</p>\n<p>If no assignment to a variable is made, the result gets displayed unless the invocation returns an empty result.\nWhen assigning the result to a variable, a <em>Force Display Flag</em> (<code>!</code>) is needed to display the result.</p>\n<pre>{{! variable_name = ClassName.class_method_name\nargument: value\n}}\n</pre>\n<h4>Calling a function without parameters</h4>\n<pre>{{ now }}\n</pre>\n<h4>Calling a function with parameters</h4>\n<pre>Block with list parameters:\n\n{{ echo\n- My Message\n}}\n</pre>\n<pre>Inline with list parameters:\n\n{{ echo [My Message] }}\n</pre>\n<pre>Block with mapping parameters:\n\n{{ echo\nmessage: My Message\n}}\n</pre>\n<pre>Inline with mapping parameters:\n\n{{ echo {message: My Message} }}\n</pre>\n<h4>Instantiating a class</h4>\n<pre>{{! board = ChessBoard }}\n</pre>\n<pre>{{ board.move\nmove: a2a4\n}}\n</pre>\n<h3>Nesting</h3>\n<p>Call blocks can be nested if needed. It is important, that they are explicitly marked as strings in <em>YAML</em></p>\n<pre>{{ sum\n- 42\n- \"{{ my_number }}\"\n}}\n</pre>\n<h3>Variable Blocks</h3>\n<p>Variable blocks allow for defining multiple variables in one block.</p>\n<pre><code>{{\nnumber: 42\nquote: |\n  First Line.\n  Second Line.\npi: \"{{ get_pi }}\"\nbudget: |\n  {{ money\n  value: 12.34\n  currency: EUR\n  }}\n}}\n</code></pre>\n<h3>Standalone Documents</h3>\n<p>Standalone documents are used to insert the result document in a <em>Jinja</em> template together with additional meta data variables.</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">meta-data</span><span class=\"p\">:</span>\n  <span class=\"nt\">template</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">./template.html</span>\n  <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">The Title</span>\n  <span class=\"nt\">author</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">The Author</span>\n<span class=\"nt\">today</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">datetime:date.today</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<h4>Outsourced Meta Data Imports</h4>\n<p>The outsourcing of meta data follows the same rules like the outsourcing of imports.</p>\n<pre><span class=\"nt\">meta-data-import</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">../base-information.yaml</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">./external-data.yaml</span>\n<span class=\"nt\">meta-data</span><span class=\"p\">:</span>\n  <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Another Title</span>\n<span class=\"nt\">today</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">datetime:date.today</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<h3>Behavior</h3>\n<p>If an object has an <code>__html__()</code> method, it is used as a representation.\nThe string representation <code>__str__()</code>is used as a fallback.</p>\n<p>The syntax to access attributes and methods can also be used to access the <code>__getitem__()</code> builtin method.</p>\n<p>Some data types have a default display behavior.\nFor example lists of items are displayed as an <em>HTML</em> unordered list when used in a block, and as comma-separated values when used inline.</p>\n<h2>Examples</h2>\n<p>Seven examples have been implemented in the subdirectories of the directory <a href=\"./examples\" rel=\"nofollow\"><code>examples</code></a></p>\n<h2>Used Libraries</h2>\n<p>Without these libraries the development of the <em>Markdown Meta Extension</em> would not have been possible. Thanks to their authors and contributors!</p>\n<ul>\n<li><a href=\"https://python-markdown.github.io/\" rel=\"nofollow\"><code>Python-Markdown</code></a></li>\n<li><a href=\"https://palletsprojects.com/p/click/\" rel=\"nofollow\"><code>Click</code></a></li>\n<li><a href=\"https://palletsprojects.com/p/jinja/\" rel=\"nofollow\"><code>Jinja</code></a></li>\n<li><a href=\"https://palletsprojects.com/p/markupsafe/\" rel=\"nofollow\"><code>MarkupSafe</code></a></li>\n<li><a href=\"https://pyyaml.org/\" rel=\"nofollow\"><code>PyYAML</code></a></li>\n<li><a href=\"https://github.com/thombashi/pathvalidate\" rel=\"nofollow\"><code>pathvalidate</code></a></li>\n</ul>\n<h3>Libraries used in Tests</h3>\n<ul>\n<li><a href=\"https://www.crummy.com/software/BeautifulSoup/\" rel=\"nofollow\"><code>beautifulsoup4</code></a></li>\n<li><a href=\"https://lxml.de/\" rel=\"nofollow\"><code>lxml</code></a></li>\n<li><a href=\"https://github.com/r1chardj0n3s/parse\" rel=\"nofollow\"><code>parse</code></a></li>\n</ul>\n\n          </div>"}, "last_serial": 6936333, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "569bdc6e9f3d41d3196c004f41a06253", "sha256": "9b67b927c7ce4cf389290010963561966086bff56f34ef7537fa27fdbd4b8f06"}, "downloads": -1, "filename": "markdown_meta_extension-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "569bdc6e9f3d41d3196c004f41a06253", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 23270, "upload_time": "2020-04-02T15:11:26", "upload_time_iso_8601": "2020-04-02T15:11:26.965079Z", "url": "https://files.pythonhosted.org/packages/0d/7b/f1d253c0e28f59861eac3ee62d596904ea98e3aeb14f600b6dbd4a99dfdd/markdown_meta_extension-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "189617869f6c7ce8b705e173c2e536ec", "sha256": "a18a7e05a4608ee59c27ecdd96bce3331c251ec039dd5c72bf3cf6051baf2334"}, "downloads": -1, "filename": "markdown-meta-extension-0.5.1.tar.gz", "has_sig": false, "md5_digest": "189617869f6c7ce8b705e173c2e536ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 23026, "upload_time": "2020-04-02T15:11:31", "upload_time_iso_8601": "2020-04-02T15:11:31.924205Z", "url": "https://files.pythonhosted.org/packages/67/c7/7150b71dad2ded2f82a6a36d3f0c803fb0512737b94f69972eeafa851f23/markdown-meta-extension-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "c00c2f8ebc7ccf659cb1dafcb14fc7d2", "sha256": "61e638ab31e719fc2dc69e245e6f1b3b3eb354f20335408c26a5cf7412d917e1"}, "downloads": -1, "filename": "markdown_meta_extension-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c00c2f8ebc7ccf659cb1dafcb14fc7d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 23297, "upload_time": "2020-04-02T15:11:29", "upload_time_iso_8601": "2020-04-02T15:11:29.518647Z", "url": "https://files.pythonhosted.org/packages/74/e7/9bb7494aa1b38d8db5fd8121ea0e5a06d7416c156523d130b0f51aa4f571/markdown_meta_extension-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "777ab0a34c5fac7b04ef95345b074fef", "sha256": "7e26f2570c89311f99a5ce342d5da6925aeb1ab30d6589084f3b4494265fb730"}, "downloads": -1, "filename": "markdown-meta-extension-0.5.2.tar.gz", "has_sig": false, "md5_digest": "777ab0a34c5fac7b04ef95345b074fef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 23102, "upload_time": "2020-04-02T15:11:33", "upload_time_iso_8601": "2020-04-02T15:11:33.431078Z", "url": "https://files.pythonhosted.org/packages/4a/a3/16133010f0c43aad252c04f9acbacde6d4e5543e69057240dc524fcfafba/markdown-meta-extension-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "6cbe0fa6b5224bb8e114dd763170039c", "sha256": "d3442b7732ea9eb7c1a4bcbc5662520648d5fa32718fb2b041606d89b61115dd"}, "downloads": -1, "filename": "markdown_meta_extension-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6cbe0fa6b5224bb8e114dd763170039c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 23297, "upload_time": "2020-04-02T15:11:30", "upload_time_iso_8601": "2020-04-02T15:11:30.535095Z", "url": "https://files.pythonhosted.org/packages/1d/f7/191cb512959db95d7448dd49b53d581ec90b4b1df729c71eecf81451afe3/markdown_meta_extension-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8c6f08c4cef734875d9578d97d8ffee", "sha256": "b2026683a3d1eb8f7789ace9dc2888eb5f941338874aee0ea775935537dc7f84"}, "downloads": -1, "filename": "markdown-meta-extension-0.5.3.tar.gz", "has_sig": false, "md5_digest": "a8c6f08c4cef734875d9578d97d8ffee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 23112, "upload_time": "2020-04-02T15:11:34", "upload_time_iso_8601": "2020-04-02T15:11:34.801175Z", "url": "https://files.pythonhosted.org/packages/a7/16/9bb524ff3a5ee428b781369519e6e1b796fc827bb4277c42120dc98457be/markdown-meta-extension-0.5.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6cbe0fa6b5224bb8e114dd763170039c", "sha256": "d3442b7732ea9eb7c1a4bcbc5662520648d5fa32718fb2b041606d89b61115dd"}, "downloads": -1, "filename": "markdown_meta_extension-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6cbe0fa6b5224bb8e114dd763170039c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 23297, "upload_time": "2020-04-02T15:11:30", "upload_time_iso_8601": "2020-04-02T15:11:30.535095Z", "url": "https://files.pythonhosted.org/packages/1d/f7/191cb512959db95d7448dd49b53d581ec90b4b1df729c71eecf81451afe3/markdown_meta_extension-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8c6f08c4cef734875d9578d97d8ffee", "sha256": "b2026683a3d1eb8f7789ace9dc2888eb5f941338874aee0ea775935537dc7f84"}, "downloads": -1, "filename": "markdown-meta-extension-0.5.3.tar.gz", "has_sig": false, "md5_digest": "a8c6f08c4cef734875d9578d97d8ffee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 23112, "upload_time": "2020-04-02T15:11:34", "upload_time_iso_8601": "2020-04-02T15:11:34.801175Z", "url": "https://files.pythonhosted.org/packages/a7/16/9bb524ff3a5ee428b781369519e6e1b796fc827bb4277c42120dc98457be/markdown-meta-extension-0.5.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:44 2020"}