{"info": {"author": "stanislav prokopyev", "author_email": "stas.prokopiev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9"], "description": "========================\nLOCAL_SIMPLE_DATABASE\n========================\n\n.. image:: https://img.shields.io/github/last-commit/stas-prokopiev/local_simple_database\n   :target: https://img.shields.io/github/last-commit/stas-prokopiev/local_simple_database\n   :alt: GitHub last commit\n\n.. image:: https://img.shields.io/github/license/stas-prokopiev/local_simple_database\n    :target: https://github.com/stas-prokopiev/local_simple_database/blob/master/LICENSE.txt\n    :alt: GitHub license<space><space>\n\n.. image:: https://readthedocs.org/projects/local-simple-database/badge/?version=latest\n    :target: https://local-simple-database.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://travis-ci.org/stas-prokopiev/local_simple_database.svg?branch=master\n    :target: https://travis-ci.org/stas-prokopiev/local_simple_database\n\n.. image:: https://img.shields.io/pypi/v/local_simple_database\n   :target: https://img.shields.io/pypi/v/local_simple_database\n   :alt: PyPI\n\n.. image:: https://img.shields.io/pypi/pyversions/local_simple_database\n   :target: https://img.shields.io/pypi/pyversions/local_simple_database\n   :alt: PyPI - Python Version\n\n\n.. contents:: **Table of Contents**\n\nShort Overview.\n=========================\n\nlocal_simple_database is a simple Python package(**py>=2.7 or py>=3.4**) with the main purpose to\nhelp storing and retrieving data from human-readable txt files with one line of code.\nAll the interactions with files are being made in a process-thread safe manner.\n\nLong Overview.\n=========================\n\nThis package consists of 2 main classes with which user should interact:\n\n#. class_local_simple_database\n#. class_local_dict_database\n\nOne small example\n----------------------\n\nLet's say you want to store file with int variable with name int_times_I_ve_eaten.\n\nThen using this package you can define handler of databases:\n\n.. code-block:: python\n\n    from local_simple_database import class_local_simple_database\n    DB = class_local_simple_database(\"folder_with_all_my_databases\")\n\nand then just use everywhere in your code **DB[\"int_times_I_ve_eaten\"]** like if it was usual dictionary.\n\n.. code-block:: python\n\n    DB[\"int_times_I_ve_eaten\"] += 1  # To increase value in the file\n    DB[\"int_times_I_ve_eaten\"]  # To get current value from the file\n\nAfter running this code in the folder with path = *\"./folder_with_all_my_databases\"*\n\nwill be created file *\"./folder_with_all_my_databases/int_times_I_ve_eaten.txt\"* with value.\n\nValue is stored in a human-readable txt file, so you can always access it.\n\nTo get it some time later, just use:\n\n.. code-block:: python\n\n    int_value_I_was_afraid_to_lose = DB[\"int_times_I_ve_eaten\"]\n\n\nHow to name database-s\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nName of database should satisfy template \"type_name\"\n\nExamples: int_balls, float_seconds_left, str_my_name, dict_useless_heap\n\nSo just by the name you can define the type of database, isn't it awesome.\n\nInstallation\n============\n\n* Install via pip:\n\n.. code-block:: bash\n\n    pip install local_simple_database\n\n\nBasic usage.\n=========================\n\n1) class_local_simple_database\n--------------------------------------------------------------------------------------------------\n\nThis class was built to handle (saving-retrieving) one value data like integers or floats.\n\nFor now on supported types of databases are: [\"int\", \"float\", \"str\"] (Probably will be enhanced soon)\n\n- This means that you can use a database with one value inside with types: integer, float, string\n\nInitialization of databases handler\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from local_simple_database import class_local_simple_database\n    DB = class_local_simple_database(\n        str_path_database_dir=\".\",\n    )\n\nArguments:\n\n1. **str_path_database_dir**: If the explicit path to directory with database-s is not given,\n    | then will be used path \"./local_database\"\n    | Folder for database-s will be created automatically\n\nA few examples of Usage\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAfter you've initialized DB variable you can use:\n\n1) Integer database\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n*If you want to store/access/modify simple int in file*\n\n.. code-block:: python\n\n    # Process 1\n    DB[\"int_red_cars_drove\"] += 1\n    DB[\"int_red_cars_drove\"] += 2\n    # Oh now, last one was burgundy\n    DB[\"int_red_cars_drove\"] -= 1\n\n    # Process 2\n    print(\"red cars already found\", DB[\"int_red_cars_drove\"])\n    # If there was no such DataBase yet, than in will be created and 0 value will be returned.\n    DB[\"int_red_cars_drove\"] = 5\n    print(\"red cars already found\", DB[\"int_red_cars_drove\"])\n\n2) Float database\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n    DB[\"float_last_price_of_watermelon\"] = 7.49\n    # Too many watermelons this year, need to apply 30% discount\n    DB[\"float_last_price_of_watermelon\"] *= 0.7\n    print(\n        \"Hello my best customer, current price on watermelon is: \",\n        DB[\"float_last_price_of_watermelon\"]\n    )\n\n\n2) class_local_dict_database\n--------------------------------------------------------------------------------------------------\n\nThis class was built to handle (saving-retrieving) dictionary with data from a file.\n\nWork with such database-s is a little different from **class_local_simple_database** so it was necessary to put it in a separate class\n\nInitialization of databases handler\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    DB = class_local_dict_database(\n        str_path_database_dir=\".\",\n        default_value=None,\n    )\n\nArguments:\n\n#. **str_path_database_dir**: If the explicit path to database-s is not given,\n    | then will be used path \"./local_database\"\n    | Folder for database-s will be created automatically\n#. **default_value**: value to use if key in DB not found.\n\nA few examples of Usage\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInitialization of DB obj.\n\n.. code-block:: python\n\n    from local_simple_database import class_local_simple_database\n    DB = class_local_dict_database(\n        str_path_database_dir=\".\",\n        default_value=None,\n    )\n\n\n1) Basic Save-Get data from dict database.\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n    # Set methods\n    # Set value for whole DB:\n    DB[\"dict_very_useful_heap\"] = {\"Mike\": 50, \"Stan\": 1000000}\n\n    ## Set keys for one DB with dict\n    DB[\"dict_useless_heap\"][\"random_key\"] = 1\n    DB[\"dict_useless_heap\"][\"random_key\"] += 3\n    DB[\"dict_useless_heap\"][2] = [\"Oh my God, what a list is doing here\", \"Aaa\"]\n    DB[\"dict_useless_heap\"][99] = {\"Are you serious?\": {\"You'd better be!\": \"Bbb\"}}\n\n    # Get methods\n    ## To get whole dict for DB use:\n    DB[\"dict_useless_heap\"].get_value()  # Sorry for that, I don't know how to do it without additional method\n\n    ## To get string representation of whole dict:\n    str(DB[\"dict_useless_heap\"])\n    print(DB[\"dict_useless_heap\"])\n\n    ## To get one key from dict:\n    int_random_key = DB[\"dict_useless_heap\"][\"random_key\"]\n\n\n2) Set default value:\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n    # You can set the default value for all databases OR for only one:\n\n    ## 1) Set default value for all database-s:\n    DB.change_default_value(0)\n\n    ## 2) Set default value for one database:\n    DB[\"cars\"].change_default_value(0)\n\n    # They you can use DB similarly as collections.defaultdict\n    DB[\"cars\"][\"red\"] += 1\n    # Oh no, that was burgundy once again\n    DB[\"cars\"][\"red\"] -= 1\n    DB[\"cars\"][\"burgundy\"] += 1\n\n\nAdvanced usage.\n=========================\n\n1) class database additional arguments\n--------------------------------------------------------------------------------------------------\n\nBoth 2 main classes (**class_local_simple_database**, **class_local_dict_database**) have additional arguments:\n\n1) **float_max_seconds_per_file_operation=0.05**\n\n    | This variable is necessary for multiprocessing safe work.\n    | It set time in which access by process file can't be accessed by any other process. By default, it set to 10 ms.\n    | If you use operation which from accessing value till setting new value needs more time, you are more than welcome to increase it.\n    | You can set it to 0.0 if you are not using threads-processes and want the maximum speed.\n\n2) **str_datetime_template_for_rolling=\"\"**\n\n    | This variable allows setting rolling save of database results using the DateTime template.\n    | If the value is not empty, then saving/retrieving results will be done from deeper folders with names satisfy the evaluation of the DateTime string template.\n    | E.G. To save daily results use \"%Y%m%d\" (Then deeper folder names will be like \"20191230\", \"20191231\", ...)\n    | E.G. To save hourly results use \"%Y%m%d_%H\" (Then deeper folder names will be like \"20191230_0\", \"20191230_23\", ...)\n\n.. code-block:: python\n\n    # Full definition of class_local_simple_database\n    DB = class_local_simple_database(\n        str_path_database_dir=\".\",\n        float_max_seconds_per_file_operation=0.05,\n        str_datetime_template_for_rolling=\"\"\n    )\n\n.. code-block:: python\n\n    # Full definition of class_local_dict_database\n    DB = class_local_dict_database(\n        str_path_database_dir=\".\",\n        default_value=None,\n        float_max_seconds_per_file_operation=0.05,\n        str_datetime_template_for_rolling=\"\"\n    )\n\n\n2) Get values in ALL databases in the directory.\n--------------------------------------------------------------------------------------------------\n\nTo get a dictionary with data in all databases by database name, use:\n\n.. code-block:: python\n\n    DB.get_dict_DBs_data_by_DB_name()\n\nIf you were using rolling, then you can get dictionary with results like {\"datetime_1\": dict_all_DBs_date_1, }\n\n.. code-block:: python\n\n    DB.get_dict_every_DB_by_datetime()\n\n\nIf you were using rolling, and interested only in one database. {\"datetime_1\": database_value_1, ...}\n\n.. code-block:: python\n\n    # Please replace *str_database_name* on name of DB which values you want to get\n    DB.get_one_DB_data_daily(\n        str_database_name,\n        value_to_use_if_DB_not_found=None\n    )\n\nLinks\n=====\n\n    * `PYPI <https://pypi.org/project/local_simple_database/>`_\n    * `readthedocs <https://local-simple-database.readthedocs.io/en/latest/>`_\n    * `GitHub <https://github.com/stas-prokopiev/local_simple_database>`_\n\nReleases\n========\n\nSee `CHANGELOG <https://github.com/stas-prokopiev/local_simple_database/blob/master/CHANGELOG.rst>`_.\n\nContributing\n============\n\n- Fork it (<https://github.com/stas-prokopiev/local_simple_database/fork>)\n- Create your feature branch (`git checkout -b feature/fooBar`)\n- Commit your changes (`git commit -am 'Add some fooBar'`)\n- Push to the branch (`git push origin feature/fooBar`)\n- Create a new Pull Request\n\nContacts\n========\n\n    * Email: stas.prokopiev@gmail.com\n\n    * `vk.com <https://vk.com/stas.prokopyev>`_\n\n    * `Facebook <https://www.facebook.com/profile.php?id=100009380530321>`_\n\nLicense\n=======\n\nThis project is licensed under the MIT License.\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stas-prokopiev/local_simple_database", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "local-simple-database", "package_url": "https://pypi.org/project/local-simple-database/", "platform": "any", "project_url": "https://pypi.org/project/local-simple-database/", "project_urls": {"Homepage": "https://github.com/stas-prokopiev/local_simple_database"}, "release_url": "https://pypi.org/project/local-simple-database/0.1.1/", "requires_dist": ["filelock", "pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": "", "summary": "Package for easy process variable in file like if it was usual variable in python", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://img.shields.io/github/last-commit/stas-prokopiev/local_simple_database\" rel=\"nofollow\"><img alt=\"GitHub last commit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/305bb39389b9d7f3b3d68b5a2efbd4a65bf02a59/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f737461732d70726f6b6f706965762f6c6f63616c5f73696d706c655f6461746162617365\"></a>\n<a href=\"https://github.com/stas-prokopiev/local_simple_database/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"GitHub license&lt;space&gt;&lt;space&gt;\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/911e2dcafe49e102472c8d3057315ec09c60c3ad/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f737461732d70726f6b6f706965762f6c6f63616c5f73696d706c655f6461746162617365\"></a>\n<a href=\"https://local-simple-database.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58112c4a9b13ce77ab1649ab7aa0c20c722bed37/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c6f63616c2d73696d706c652d64617461626173652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/stas-prokopiev/local_simple_database\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/stas-prokopiev/local_simple_database.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d11b7c5e31fcd850c309183436a1a08ec93ee2c/68747470733a2f2f7472617669732d63692e6f72672f737461732d70726f6b6f706965762f6c6f63616c5f73696d706c655f64617461626173652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://img.shields.io/pypi/v/local_simple_database\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a4be178e07b704dd2031e3b4512726ba91508638/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c6f63616c5f73696d706c655f6461746162617365\"></a>\n<a href=\"https://img.shields.io/pypi/pyversions/local_simple_database\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2385fade20c740ef371a94ececac71984d554d8f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6c6f63616c5f73696d706c655f6461746162617365\"></a>\n<div id=\"table-of-contents\">\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#short-overview\" id=\"id3\" rel=\"nofollow\">Short Overview.</a></li>\n<li><a href=\"#long-overview\" id=\"id4\" rel=\"nofollow\">Long Overview.</a><ul>\n<li><a href=\"#one-small-example\" id=\"id5\" rel=\"nofollow\">One small example</a><ul>\n<li><a href=\"#how-to-name-database-s\" id=\"id6\" rel=\"nofollow\">How to name database-s</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#installation\" id=\"id7\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#basic-usage\" id=\"id8\" rel=\"nofollow\">Basic usage.</a><ul>\n<li><a href=\"#class-local-simple-database\" id=\"id9\" rel=\"nofollow\">1) class_local_simple_database</a><ul>\n<li><a href=\"#initialization-of-databases-handler\" id=\"id10\" rel=\"nofollow\">Initialization of databases handler</a></li>\n<li><a href=\"#a-few-examples-of-usage\" id=\"id11\" rel=\"nofollow\">A few examples of Usage</a><ul>\n<li><a href=\"#integer-database\" id=\"id12\" rel=\"nofollow\">1) Integer database</a></li>\n<li><a href=\"#float-database\" id=\"id13\" rel=\"nofollow\">2) Float database</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#class-local-dict-database\" id=\"id14\" rel=\"nofollow\">2) class_local_dict_database</a><ul>\n<li><a href=\"#id1\" id=\"id15\" rel=\"nofollow\">Initialization of databases handler</a></li>\n<li><a href=\"#id2\" id=\"id16\" rel=\"nofollow\">A few examples of Usage</a><ul>\n<li><a href=\"#basic-save-get-data-from-dict-database\" id=\"id17\" rel=\"nofollow\">1) Basic Save-Get data from dict database.</a></li>\n<li><a href=\"#set-default-value\" id=\"id18\" rel=\"nofollow\">2) Set default value:</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#advanced-usage\" id=\"id19\" rel=\"nofollow\">Advanced usage.</a><ul>\n<li><a href=\"#class-database-additional-arguments\" id=\"id20\" rel=\"nofollow\">1) class database additional arguments</a></li>\n<li><a href=\"#get-values-in-all-databases-in-the-directory\" id=\"id21\" rel=\"nofollow\">2) Get values in ALL databases in the directory.</a></li>\n</ul>\n</li>\n<li><a href=\"#links\" id=\"id22\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#releases\" id=\"id23\" rel=\"nofollow\">Releases</a></li>\n<li><a href=\"#contributing\" id=\"id24\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#contacts\" id=\"id25\" rel=\"nofollow\">Contacts</a></li>\n<li><a href=\"#license\" id=\"id26\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"short-overview\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Short Overview.</a></h2>\n<p>local_simple_database is a simple Python package(<strong>py&gt;=2.7 or py&gt;=3.4</strong>) with the main purpose to\nhelp storing and retrieving data from human-readable txt files with one line of code.\nAll the interactions with files are being made in a process-thread safe manner.</p>\n</div>\n<div id=\"long-overview\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Long Overview.</a></h2>\n<p>This package consists of 2 main classes with which user should interact:</p>\n<ol>\n<li>class_local_simple_database</li>\n<li>class_local_dict_database</li>\n</ol>\n<div id=\"one-small-example\">\n<h3><a href=\"#id5\" rel=\"nofollow\">One small example</a></h3>\n<p>Let\u2019s say you want to store file with int variable with name int_times_I_ve_eaten.</p>\n<p>Then using this package you can define handler of databases:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">local_simple_database</span> <span class=\"kn\">import</span> <span class=\"n\">class_local_simple_database</span>\n<span class=\"n\">DB</span> <span class=\"o\">=</span> <span class=\"n\">class_local_simple_database</span><span class=\"p\">(</span><span class=\"s2\">\"folder_with_all_my_databases\"</span><span class=\"p\">)</span>\n</pre>\n<p>and then just use everywhere in your code <strong>DB[\u201cint_times_I_ve_eaten\u201d]</strong> like if it was usual dictionary.</p>\n<pre><span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_times_I_ve_eaten\"</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># To increase value in the file</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_times_I_ve_eaten\"</span><span class=\"p\">]</span>  <span class=\"c1\"># To get current value from the file</span>\n</pre>\n<p>After running this code in the folder with path = <em>\u201c./folder_with_all_my_databases\u201d</em></p>\n<p>will be created file <em>\u201c./folder_with_all_my_databases/int_times_I_ve_eaten.txt\u201d</em> with value.</p>\n<p>Value is stored in a human-readable txt file, so you can always access it.</p>\n<p>To get it some time later, just use:</p>\n<pre><span class=\"n\">int_value_I_was_afraid_to_lose</span> <span class=\"o\">=</span> <span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_times_I_ve_eaten\"</span><span class=\"p\">]</span>\n</pre>\n<div id=\"how-to-name-database-s\">\n<h4><a href=\"#id6\" rel=\"nofollow\">How to name database-s</a></h4>\n<p>Name of database should satisfy template \u201ctype_name\u201d</p>\n<p>Examples: int_balls, float_seconds_left, str_my_name, dict_useless_heap</p>\n<p>So just by the name you can define the type of database, isn\u2019t it awesome.</p>\n</div>\n</div>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Installation</a></h2>\n<ul>\n<li>Install via pip:</li>\n</ul>\n<pre>pip install local_simple_database\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Basic usage.</a></h2>\n<div id=\"class-local-simple-database\">\n<h3><a href=\"#id9\" rel=\"nofollow\">1) class_local_simple_database</a></h3>\n<p>This class was built to handle (saving-retrieving) one value data like integers or floats.</p>\n<p>For now on supported types of databases are: [\u201cint\u201d, \u201cfloat\u201d, \u201cstr\u201d] (Probably will be enhanced soon)</p>\n<ul>\n<li>This means that you can use a database with one value inside with types: integer, float, string</li>\n</ul>\n<div id=\"initialization-of-databases-handler\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Initialization of databases handler</a></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">local_simple_database</span> <span class=\"kn\">import</span> <span class=\"n\">class_local_simple_database</span>\n<span class=\"n\">DB</span> <span class=\"o\">=</span> <span class=\"n\">class_local_simple_database</span><span class=\"p\">(</span>\n    <span class=\"n\">str_path_database_dir</span><span class=\"o\">=</span><span class=\"s2\">\".\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Arguments:</p>\n<ol>\n<li><dl>\n<dt><strong>str_path_database_dir</strong>: If the explicit path to directory with database-s is not given,</dt>\n<dd><div>\n<div>then will be used path \u201c./local_database\u201d</div>\n<div>Folder for database-s will be created automatically</div>\n</div>\n</dd>\n</dl>\n</li>\n</ol>\n</div>\n<div id=\"a-few-examples-of-usage\">\n<h4><a href=\"#id11\" rel=\"nofollow\">A few examples of Usage</a></h4>\n<p>After you\u2019ve initialized DB variable you can use:</p>\n<div id=\"integer-database\">\n<h5><a href=\"#id12\" rel=\"nofollow\">1) Integer database</a></h5>\n<p><em>If you want to store/access/modify simple int in file</em></p>\n<pre><span class=\"c1\"># Process 1</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_red_cars_drove\"</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_red_cars_drove\"</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span>\n<span class=\"c1\"># Oh now, last one was burgundy</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_red_cars_drove\"</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># Process 2</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"red cars already found\"</span><span class=\"p\">,</span> <span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_red_cars_drove\"</span><span class=\"p\">])</span>\n<span class=\"c1\"># If there was no such DataBase yet, than in will be created and 0 value will be returned.</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_red_cars_drove\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"red cars already found\"</span><span class=\"p\">,</span> <span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"int_red_cars_drove\"</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"float-database\">\n<h5><a href=\"#id13\" rel=\"nofollow\">2) Float database</a></h5>\n<pre><span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"float_last_price_of_watermelon\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">7.49</span>\n<span class=\"c1\"># Too many watermelons this year, need to apply 30% discount</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"float_last_price_of_watermelon\"</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"mf\">0.7</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"Hello my best customer, current price on watermelon is: \"</span><span class=\"p\">,</span>\n    <span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"float_last_price_of_watermelon\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"class-local-dict-database\">\n<h3><a href=\"#id14\" rel=\"nofollow\">2) class_local_dict_database</a></h3>\n<p>This class was built to handle (saving-retrieving) dictionary with data from a file.</p>\n<p>Work with such database-s is a little different from <strong>class_local_simple_database</strong> so it was necessary to put it in a separate class</p>\n<div id=\"id1\">\n<h4><a href=\"#id15\" rel=\"nofollow\">Initialization of databases handler</a></h4>\n<pre><span class=\"n\">DB</span> <span class=\"o\">=</span> <span class=\"n\">class_local_dict_database</span><span class=\"p\">(</span>\n    <span class=\"n\">str_path_database_dir</span><span class=\"o\">=</span><span class=\"s2\">\".\"</span><span class=\"p\">,</span>\n    <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Arguments:</p>\n<ol>\n<li><dl>\n<dt><strong>str_path_database_dir</strong>: If the explicit path to database-s is not given,</dt>\n<dd><div>\n<div>then will be used path \u201c./local_database\u201d</div>\n<div>Folder for database-s will be created automatically</div>\n</div>\n</dd>\n</dl>\n</li>\n<li><p><strong>default_value</strong>: value to use if key in DB not found.</p>\n</li>\n</ol>\n</div>\n<div id=\"id2\">\n<h4><a href=\"#id16\" rel=\"nofollow\">A few examples of Usage</a></h4>\n<p>Initialization of DB obj.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">local_simple_database</span> <span class=\"kn\">import</span> <span class=\"n\">class_local_simple_database</span>\n<span class=\"n\">DB</span> <span class=\"o\">=</span> <span class=\"n\">class_local_dict_database</span><span class=\"p\">(</span>\n    <span class=\"n\">str_path_database_dir</span><span class=\"o\">=</span><span class=\"s2\">\".\"</span><span class=\"p\">,</span>\n    <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<div id=\"basic-save-get-data-from-dict-database\">\n<h5><a href=\"#id17\" rel=\"nofollow\">1) Basic Save-Get data from dict database.</a></h5>\n<pre><span class=\"c1\"># Set methods</span>\n<span class=\"c1\"># Set value for whole DB:</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_very_useful_heap\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Mike\"</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s2\">\"Stan\"</span><span class=\"p\">:</span> <span class=\"mi\">1000000</span><span class=\"p\">}</span>\n\n<span class=\"c1\">## Set keys for one DB with dict</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_useless_heap\"</span><span class=\"p\">][</span><span class=\"s2\">\"random_key\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_useless_heap\"</span><span class=\"p\">][</span><span class=\"s2\">\"random_key\"</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">3</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_useless_heap\"</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Oh my God, what a list is doing here\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Aaa\"</span><span class=\"p\">]</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_useless_heap\"</span><span class=\"p\">][</span><span class=\"mi\">99</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Are you serious?\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"You'd better be!\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bbb\"</span><span class=\"p\">}}</span>\n\n<span class=\"c1\"># Get methods</span>\n<span class=\"c1\">## To get whole dict for DB use:</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_useless_heap\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">()</span>  <span class=\"c1\"># Sorry for that, I don't know how to do it without additional method</span>\n\n<span class=\"c1\">## To get string representation of whole dict:</span>\n<span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_useless_heap\"</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_useless_heap\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\">## To get one key from dict:</span>\n<span class=\"n\">int_random_key</span> <span class=\"o\">=</span> <span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"dict_useless_heap\"</span><span class=\"p\">][</span><span class=\"s2\">\"random_key\"</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"set-default-value\">\n<h5><a href=\"#id18\" rel=\"nofollow\">2) Set default value:</a></h5>\n<pre><span class=\"c1\"># You can set the default value for all databases OR for only one:</span>\n\n<span class=\"c1\">## 1) Set default value for all database-s:</span>\n<span class=\"n\">DB</span><span class=\"o\">.</span><span class=\"n\">change_default_value</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\">## 2) Set default value for one database:</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"cars\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">change_default_value</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># They you can use DB similarly as collections.defaultdict</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"cars\"</span><span class=\"p\">][</span><span class=\"s2\">\"red\"</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"c1\"># Oh no, that was burgundy once again</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"cars\"</span><span class=\"p\">][</span><span class=\"s2\">\"red\"</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n<span class=\"n\">DB</span><span class=\"p\">[</span><span class=\"s2\">\"cars\"</span><span class=\"p\">][</span><span class=\"s2\">\"burgundy\"</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div id=\"advanced-usage\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Advanced usage.</a></h2>\n<div id=\"class-database-additional-arguments\">\n<h3><a href=\"#id20\" rel=\"nofollow\">1) class database additional arguments</a></h3>\n<p>Both 2 main classes (<strong>class_local_simple_database</strong>, <strong>class_local_dict_database</strong>) have additional arguments:</p>\n<ol>\n<li><p><strong>float_max_seconds_per_file_operation=0.05</strong></p>\n<blockquote>\n<div>\n<div>This variable is necessary for multiprocessing safe work.</div>\n<div>It set time in which access by process file can\u2019t be accessed by any other process. By default, it set to 10 ms.</div>\n<div>If you use operation which from accessing value till setting new value needs more time, you are more than welcome to increase it.</div>\n<div>You can set it to 0.0 if you are not using threads-processes and want the maximum speed.</div>\n</div>\n</blockquote>\n</li>\n<li><p><strong>str_datetime_template_for_rolling=\u201d\u201d</strong></p>\n<blockquote>\n<div>\n<div>This variable allows setting rolling save of database results using the DateTime template.</div>\n<div>If the value is not empty, then saving/retrieving results will be done from deeper folders with names satisfy the evaluation of the DateTime string template.</div>\n<div>E.G. To save daily results use \u201c%Y%m%d\u201d (Then deeper folder names will be like \u201c20191230\u201d, \u201c20191231\u201d, \u2026)</div>\n<div>E.G. To save hourly results use \u201c%Y%m%d_%H\u201d (Then deeper folder names will be like \u201c20191230_0\u201d, \u201c20191230_23\u201d, \u2026)</div>\n</div>\n</blockquote>\n</li>\n</ol>\n<pre><span class=\"c1\"># Full definition of class_local_simple_database</span>\n<span class=\"n\">DB</span> <span class=\"o\">=</span> <span class=\"n\">class_local_simple_database</span><span class=\"p\">(</span>\n    <span class=\"n\">str_path_database_dir</span><span class=\"o\">=</span><span class=\"s2\">\".\"</span><span class=\"p\">,</span>\n    <span class=\"n\">float_max_seconds_per_file_operation</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n    <span class=\"n\">str_datetime_template_for_rolling</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span>\n<span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Full definition of class_local_dict_database</span>\n<span class=\"n\">DB</span> <span class=\"o\">=</span> <span class=\"n\">class_local_dict_database</span><span class=\"p\">(</span>\n    <span class=\"n\">str_path_database_dir</span><span class=\"o\">=</span><span class=\"s2\">\".\"</span><span class=\"p\">,</span>\n    <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">float_max_seconds_per_file_operation</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n    <span class=\"n\">str_datetime_template_for_rolling</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-values-in-all-databases-in-the-directory\">\n<h3><a href=\"#id21\" rel=\"nofollow\">2) Get values in ALL databases in the directory.</a></h3>\n<p>To get a dictionary with data in all databases by database name, use:</p>\n<pre><span class=\"n\">DB</span><span class=\"o\">.</span><span class=\"n\">get_dict_DBs_data_by_DB_name</span><span class=\"p\">()</span>\n</pre>\n<p>If you were using rolling, then you can get dictionary with results like {\u201cdatetime_1\u201d: dict_all_DBs_date_1, }</p>\n<pre><span class=\"n\">DB</span><span class=\"o\">.</span><span class=\"n\">get_dict_every_DB_by_datetime</span><span class=\"p\">()</span>\n</pre>\n<p>If you were using rolling, and interested only in one database. {\u201cdatetime_1\u201d: database_value_1, \u2026}</p>\n<pre><span class=\"c1\"># Please replace *str_database_name* on name of DB which values you want to get</span>\n<span class=\"n\">DB</span><span class=\"o\">.</span><span class=\"n\">get_one_DB_data_daily</span><span class=\"p\">(</span>\n    <span class=\"n\">str_database_name</span><span class=\"p\">,</span>\n    <span class=\"n\">value_to_use_if_DB_not_found</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"links\">\n<h2><a href=\"#id22\" rel=\"nofollow\">Links</a></h2>\n<blockquote>\n<ul>\n<li><a href=\"https://pypi.org/project/local_simple_database/\" rel=\"nofollow\">PYPI</a></li>\n<li><a href=\"https://local-simple-database.readthedocs.io/en/latest/\" rel=\"nofollow\">readthedocs</a></li>\n<li><a href=\"https://github.com/stas-prokopiev/local_simple_database\" rel=\"nofollow\">GitHub</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"releases\">\n<h2><a href=\"#id23\" rel=\"nofollow\">Releases</a></h2>\n<p>See <a href=\"https://github.com/stas-prokopiev/local_simple_database/blob/master/CHANGELOG.rst\" rel=\"nofollow\">CHANGELOG</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#id24\" rel=\"nofollow\">Contributing</a></h2>\n<ul>\n<li>Fork it (&lt;<a href=\"https://github.com/stas-prokopiev/local_simple_database/fork\" rel=\"nofollow\">https://github.com/stas-prokopiev/local_simple_database/fork</a>&gt;)</li>\n<li>Create your feature branch (<cite>git checkout -b feature/fooBar</cite>)</li>\n<li>Commit your changes (<cite>git commit -am \u2018Add some fooBar\u2019</cite>)</li>\n<li>Push to the branch (<cite>git push origin feature/fooBar</cite>)</li>\n<li>Create a new Pull Request</li>\n</ul>\n</div>\n<div id=\"contacts\">\n<h2><a href=\"#id25\" rel=\"nofollow\">Contacts</a></h2>\n<blockquote>\n<ul>\n<li>Email: <a href=\"mailto:stas.prokopiev%40gmail.com\">stas<span>.</span>prokopiev<span>@</span>gmail<span>.</span>com</a></li>\n<li><a href=\"https://vk.com/stas.prokopyev\" rel=\"nofollow\">vk.com</a></li>\n<li><a href=\"https://www.facebook.com/profile.php?id=100009380530321\" rel=\"nofollow\">Facebook</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id26\" rel=\"nofollow\">License</a></h2>\n<p>This project is licensed under the MIT License.</p>\n</div>\n\n          </div>"}, "last_serial": 7166749, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b264f0e44419a0d59a82069c771a5c9c", "sha256": "92f82fbdefad28a6f5167efe812cfd4931ad9557c463a86cc5e8517ad98ccad3"}, "downloads": -1, "filename": "local_simple_database-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b264f0e44419a0d59a82069c771a5c9c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14229, "upload_time": "2020-05-03T17:03:24", "upload_time_iso_8601": "2020-05-03T17:03:24.887130Z", "url": "https://files.pythonhosted.org/packages/bd/08/dbe694d0fff1972fc24ec6d6f319f53d7c355e49e86832956e50f85ec85a/local_simple_database-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fcf90024ca6aec7045d98e200f6a883", "sha256": "0e0b926ac04e508561703bdc20586980425ba0a92d19a90b1b048cc67c7a6247"}, "downloads": -1, "filename": "local_simple_database-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7fcf90024ca6aec7045d98e200f6a883", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27449, "upload_time": "2020-05-03T17:03:28", "upload_time_iso_8601": "2020-05-03T17:03:28.230589Z", "url": "https://files.pythonhosted.org/packages/92/80/a51b1adb1912a1ee77f0718290873210ef343f4d08ff54cf62c121cd9fdd/local_simple_database-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b62b0f81ffdedf70d44995e39acab4b3", "sha256": "a4b0b80828b3dbf35e52b1072522e98cfd937327f87dc9d1a9539549678e3606"}, "downloads": -1, "filename": "local_simple_database-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b62b0f81ffdedf70d44995e39acab4b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14378, "upload_time": "2020-05-04T14:53:14", "upload_time_iso_8601": "2020-05-04T14:53:14.434697Z", "url": "https://files.pythonhosted.org/packages/2b/e7/2372400e488f18f168bd0589b5582caef0630ac02f87a8d588a34f03c34a/local_simple_database-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b3828e6700a8c814760176ea50754b1", "sha256": "51727a49bef86e58ed03875de3a70cec9ed161d77a52d4d2611513e471893b03"}, "downloads": -1, "filename": "local_simple_database-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7b3828e6700a8c814760176ea50754b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25580, "upload_time": "2020-05-04T14:53:16", "upload_time_iso_8601": "2020-05-04T14:53:16.200787Z", "url": "https://files.pythonhosted.org/packages/7c/92/f0683ea934f48a8bf16f0dc33eb6b73afbe07f5823dfb869d045a34d820b/local_simple_database-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a084bcfdbe5d843746aa34abb96aa371", "sha256": "e4e6adb0836741b4ba012d3b0501f4365106b80f01ae64ad45e823edd9797111"}, "downloads": -1, "filename": "local_simple_database-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a084bcfdbe5d843746aa34abb96aa371", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14442, "upload_time": "2020-05-04T19:25:25", "upload_time_iso_8601": "2020-05-04T19:25:25.751767Z", "url": "https://files.pythonhosted.org/packages/16/54/a19318dc0eb1ba1f608b6bec3ac4acba5c95d290c47500c87425d190989c/local_simple_database-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d2c8df6eb594c09cec94f69bd57c578", "sha256": "b1266104de879782e193f863b53681db04c3cec170d12d9f776e19f5ac1caab0"}, "downloads": -1, "filename": "local_simple_database-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7d2c8df6eb594c09cec94f69bd57c578", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25769, "upload_time": "2020-05-04T19:25:27", "upload_time_iso_8601": "2020-05-04T19:25:27.445254Z", "url": "https://files.pythonhosted.org/packages/12/a6/968bff1daa32eaac099d19b50af480082772e4598f9bbc5122c6669dc828/local_simple_database-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a084bcfdbe5d843746aa34abb96aa371", "sha256": "e4e6adb0836741b4ba012d3b0501f4365106b80f01ae64ad45e823edd9797111"}, "downloads": -1, "filename": "local_simple_database-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a084bcfdbe5d843746aa34abb96aa371", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14442, "upload_time": "2020-05-04T19:25:25", "upload_time_iso_8601": "2020-05-04T19:25:25.751767Z", "url": "https://files.pythonhosted.org/packages/16/54/a19318dc0eb1ba1f608b6bec3ac4acba5c95d290c47500c87425d190989c/local_simple_database-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d2c8df6eb594c09cec94f69bd57c578", "sha256": "b1266104de879782e193f863b53681db04c3cec170d12d9f776e19f5ac1caab0"}, "downloads": -1, "filename": "local_simple_database-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7d2c8df6eb594c09cec94f69bd57c578", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25769, "upload_time": "2020-05-04T19:25:27", "upload_time_iso_8601": "2020-05-04T19:25:27.445254Z", "url": "https://files.pythonhosted.org/packages/12/a6/968bff1daa32eaac099d19b50af480082772e4598f9bbc5122c6669dc828/local_simple_database-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:36 2020"}