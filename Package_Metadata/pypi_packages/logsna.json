{"info": {"author": "Ruslan Spivak", "author_email": "ruslan.spivak@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Software Development :: Libraries"], "description": "::\n\n     _    ___   ___ ___ _  _   _\n    | |  / _ \\ / __/ __| \\| | /_\\\n    | |_| (_) | (_ \\__ \\ .` |/ _ \\\n    |____\\___/ \\___|___/_|\\_/_/ \\_\\\n\n\n**logsna** is a small Python library that provides a sane log output\nformat.\n\n`http://logsna.readthedocs.org <http://logsna.readthedocs.org>`_\n\nInstallation\n------------\n\n::\n\n    $ [sudo] pip install logsna\n\nOr the bleeding edge version from the git master branch:\n\n::\n\n    $ [sudo] pip install git+https://github.com/rspivak/logsna.git#egg=logsna\n\n\nHow to use it\n-------------\n\n**logsna** provides a custom formatter class *logsna.Formatter* that can be used in a logging config file:\n\n::\n\n    # sanefmt.py\n    import logging\n    import logging.config\n    from StringIO import StringIO\n\n    CONFIG = \"\"\"\\\n    [loggers]\n    keys=root\n\n    [handlers]\n    keys=console\n\n    [handler_console]\n    class=logging.StreamHandler\n    args=(sys.stderr,)\n    formatter=sane\n\n    [formatters]\n    keys=sane\n\n    [logger_root]\n    level=DEBUG\n    handlers=console\n\n    # Our custom formatter class\n    [formatter_sane]\n    class=logsna.Formatter\n    \"\"\"\n\n    config = StringIO(CONFIG)\n    logging.config.fileConfig(config)\n\n    log = logging.getLogger('mylogger.component1')\n\n    log.debug('debug message')\n    log.info('info message')\n    log.warning('warning message')\n    log.critical('critical message')\n    try:\n        1 / 0\n    except:\n        log.exception('Houston we have a problem')\n\n\nThis is how to use it in code directly:\n\n::\n\n    import logging\n\n    import logsna\n\n    # create logger\n    log = logging.getLogger('mylogger.component1')\n    log.setLevel(logging.DEBUG)\n\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG)\n\n    # create an instance of the sane formatter\n    formatter = logsna.Formatter()\n\n    # add our formatter to the console handler\n    ch.setFormatter(formatter)\n\n    # add the console handler to the logger\n    log.addHandler(ch)\n\n    log.debug('debug message')\n    log.info('info message')\n    log.warning('warning message')\n    log.critical('critical message')\n    try:\n        1 / 0\n    except:\n        log.exception('Houston we have a problem')\n\n\nThe Log Format\n--------------\n\nHere is an output from the above program:\n::\n\n    DEBUG    [2012-05-21 01:59:23,686] mylogger.component1: debug message\n    INFO     [2012-05-21 01:59:23,686] mylogger.component1: info message\n    WARNING  [2012-05-21 01:59:23,686] mylogger.component1: warning message\n    CRITICAL [2012-05-21 01:59:23,686] mylogger.component1: critical message\n    ERROR    [2012-05-21 01:59:23,686] mylogger.component1: Houston we have a problem\n    ! Traceback (most recent call last):\n    !   File \"/home/alienoid/python/sanefmt.py\", line 67, in <module>\n    !     1 / 0\n    ! ZeroDivisionError: integer division or modulo by zero\n\n\nThe Log Format Goals\n--------------------\n\n1. To be human readable as much as possible\n\n2. Make it easy to use with standard Unix utilities **tail** and **grep**\n   to help quickly figure out why things are going south\n\n\nThe Log Format Notes\n--------------------\n\n1. All timestamps are in **ISO8601** and **UTC** format\n\n2. To grep for messages of a specific level\n\n    ::\n\n        $ tail -f sanefmt.log | grep '^INFO'\n\n3. To grep for messages from a particular logger\n\n    ::\n\n        $ tail -f sanefmt.log | grep 'component1:'\n\n4. To pull out full exception tracebacks with a corresponding log message\n\n    ::\n\n        $ tail -f sanefmt.log | grep -B 1 '^\\!'\n\n    The output of the above command will look like this\n\n    ::\n\n        ERROR    [2012-05-21 01:59:23,686] mylogger.component1: Houston we have a problem\n        ! Traceback (most recent call last):\n        !   File \"fmttest.py\", line 72, in <module>\n        !     1 / 0\n        ! ZeroDivisionError: integer division or modulo by zero\n\n\nEnhancing The Log Format Output\n-------------------------------\n\nHere is the format string used by *Logsna* formatter:\n\n::\n\n    '%(levelname)-8s [%(asctime)s] %(name)s: %(message)s'\n\nYou can explicitly specify it in your configuration file using **format**\ndirective\n\n::\n\n    # Our custom formatter class\n    [formatter_sane]\n    format=%(levelname)-8s [%(asctime)s] %(name)s: %(message)s\n    class=logsna.Formatter\n\nAnd you can also enhance the format string by adding your custom\nattributes to it if you need to.\nFor a set of predefined log record attributes see `here <http://docs.python.org/library/logging.html#logrecord-attributes>`_\n\nAcknowledgments\n---------------\n\n- `Release It! <http://pragprog.com/book/mnee/release-it>`_\n- `Logula <https://github.com/codahale/logula>`_\n\n\nLicense\n-------\n\nCopyright (c) 2012 Ruslan Spivak\n\nPublished under The MIT License, see LICENSE\n\nChange History\n==============\n1.2 (2012-10-02)\n----------------\n- Python 2.6.x compatibility\n\n1.1 (2012-05-21)\n----------------\n- Typo in setup.py: https://github.com/rspivak/logsna/pull/1\n\n1.0 (2012-05-21)\n----------------\n- Public release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rspivak/logsna", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "logsna", "package_url": "https://pypi.org/project/logsna/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/logsna/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rspivak/logsna"}, "release_url": "https://pypi.org/project/logsna/1.2/", "requires_dist": null, "requires_python": null, "summary": "A small Python library that provides a sane log output format", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre> _    ___   ___ ___ _  _   _\n| |  / _ \\ / __/ __| \\| | /_\\\n| |_| (_) | (_ \\__ \\ .` |/ _ \\\n|____\\___/ \\___|___/_|\\_/_/ \\_\\\n</pre>\n<p><strong>logsna</strong> is a small Python library that provides a sane log output\nformat.</p>\n<p><a href=\"http://logsna.readthedocs.org\" rel=\"nofollow\">http://logsna.readthedocs.org</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ [sudo] pip install logsna\n</pre>\n<p>Or the bleeding edge version from the git master branch:</p>\n<pre>$ [sudo] pip install git+https://github.com/rspivak/logsna.git#egg=logsna\n</pre>\n</div>\n<div id=\"how-to-use-it\">\n<h2>How to use it</h2>\n<p><strong>logsna</strong> provides a custom formatter class <em>logsna.Formatter</em> that can be used in a logging config file:</p>\n<pre># sanefmt.py\nimport logging\nimport logging.config\nfrom StringIO import StringIO\n\nCONFIG = \"\"\"\\\n[loggers]\nkeys=root\n\n[handlers]\nkeys=console\n\n[handler_console]\nclass=logging.StreamHandler\nargs=(sys.stderr,)\nformatter=sane\n\n[formatters]\nkeys=sane\n\n[logger_root]\nlevel=DEBUG\nhandlers=console\n\n# Our custom formatter class\n[formatter_sane]\nclass=logsna.Formatter\n\"\"\"\n\nconfig = StringIO(CONFIG)\nlogging.config.fileConfig(config)\n\nlog = logging.getLogger('mylogger.component1')\n\nlog.debug('debug message')\nlog.info('info message')\nlog.warning('warning message')\nlog.critical('critical message')\ntry:\n    1 / 0\nexcept:\n    log.exception('Houston we have a problem')\n</pre>\n<p>This is how to use it in code directly:</p>\n<pre>import logging\n\nimport logsna\n\n# create logger\nlog = logging.getLogger('mylogger.component1')\nlog.setLevel(logging.DEBUG)\n\n# create console handler and set level to debug\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\n\n# create an instance of the sane formatter\nformatter = logsna.Formatter()\n\n# add our formatter to the console handler\nch.setFormatter(formatter)\n\n# add the console handler to the logger\nlog.addHandler(ch)\n\nlog.debug('debug message')\nlog.info('info message')\nlog.warning('warning message')\nlog.critical('critical message')\ntry:\n    1 / 0\nexcept:\n    log.exception('Houston we have a problem')\n</pre>\n</div>\n<div id=\"the-log-format\">\n<h2>The Log Format</h2>\n<p>Here is an output from the above program:</p>\n<pre>DEBUG    [2012-05-21 01:59:23,686] mylogger.component1: debug message\nINFO     [2012-05-21 01:59:23,686] mylogger.component1: info message\nWARNING  [2012-05-21 01:59:23,686] mylogger.component1: warning message\nCRITICAL [2012-05-21 01:59:23,686] mylogger.component1: critical message\nERROR    [2012-05-21 01:59:23,686] mylogger.component1: Houston we have a problem\n! Traceback (most recent call last):\n!   File \"/home/alienoid/python/sanefmt.py\", line 67, in &lt;module&gt;\n!     1 / 0\n! ZeroDivisionError: integer division or modulo by zero\n</pre>\n</div>\n<div id=\"the-log-format-goals\">\n<h2>The Log Format Goals</h2>\n<ol>\n<li>To be human readable as much as possible</li>\n<li>Make it easy to use with standard Unix utilities <strong>tail</strong> and <strong>grep</strong>\nto help quickly figure out why things are going south</li>\n</ol>\n</div>\n<div id=\"the-log-format-notes\">\n<h2>The Log Format Notes</h2>\n<ol>\n<li><p>All timestamps are in <strong>ISO8601</strong> and <strong>UTC</strong> format</p>\n</li>\n<li><p>To grep for messages of a specific level</p>\n<blockquote>\n<pre>$ tail -f sanefmt.log | grep '^INFO'\n</pre>\n</blockquote>\n</li>\n<li><p>To grep for messages from a particular logger</p>\n<blockquote>\n<pre>$ tail -f sanefmt.log | grep 'component1:'\n</pre>\n</blockquote>\n</li>\n<li><p>To pull out full exception tracebacks with a corresponding log message</p>\n<blockquote>\n<pre>$ tail -f sanefmt.log | grep -B 1 '^\\!'\n</pre>\n<p>The output of the above command will look like this</p>\n<pre>ERROR    [2012-05-21 01:59:23,686] mylogger.component1: Houston we have a problem\n! Traceback (most recent call last):\n!   File \"fmttest.py\", line 72, in &lt;module&gt;\n!     1 / 0\n! ZeroDivisionError: integer division or modulo by zero\n</pre>\n</blockquote>\n</li>\n</ol>\n</div>\n<div id=\"enhancing-the-log-format-output\">\n<h2>Enhancing The Log Format Output</h2>\n<p>Here is the format string used by <em>Logsna</em> formatter:</p>\n<pre>'%(levelname)-8s [%(asctime)s] %(name)s: %(message)s'\n</pre>\n<p>You can explicitly specify it in your configuration file using <strong>format</strong>\ndirective</p>\n<pre># Our custom formatter class\n[formatter_sane]\nformat=%(levelname)-8s [%(asctime)s] %(name)s: %(message)s\nclass=logsna.Formatter\n</pre>\n<p>And you can also enhance the format string by adding your custom\nattributes to it if you need to.\nFor a set of predefined log record attributes see <a href=\"http://docs.python.org/library/logging.html#logrecord-attributes\" rel=\"nofollow\">here</a></p>\n</div>\n<div id=\"acknowledgments\">\n<h2>Acknowledgments</h2>\n<ul>\n<li><a href=\"http://pragprog.com/book/mnee/release-it\" rel=\"nofollow\">Release It!</a></li>\n<li><a href=\"https://github.com/codahale/logula\" rel=\"nofollow\">Logula</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2012 Ruslan Spivak</p>\n<p>Published under The MIT License, see LICENSE</p>\n<div id=\"change-history\">\n<h3>Change History</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>1.2 (2012-10-02)</h2>\n<ul>\n<li>Python 2.6.x compatibility</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>1.1 (2012-05-21)</h2>\n<ul>\n<li>Typo in setup.py: <a href=\"https://github.com/rspivak/logsna/pull/1\" rel=\"nofollow\">https://github.com/rspivak/logsna/pull/1</a></li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>1.0 (2012-05-21)</h2>\n<ul>\n<li>Public release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 794337, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "59cf44034ab31dddb161e7e2fdb8638a", "sha256": "daaae3f07da909180cca5ae72aec9b2a65b1a599ca23f9b3abaa4c4cf6655352"}, "downloads": -1, "filename": "logsna-1.0.zip", "has_sig": false, "md5_digest": "59cf44034ab31dddb161e7e2fdb8638a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9064, "upload_time": "2012-05-21T05:21:05", "upload_time_iso_8601": "2012-05-21T05:21:05.254507Z", "url": "https://files.pythonhosted.org/packages/db/63/f409606204b3f06be16525c97ea9511799bbfdd5c7288a1aaecb4692c129/logsna-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "d74c85c0228d8e5f6e258df7479f6e40", "sha256": "f492c215090e9dca4bde82e853c472a521dae33b0b36024046606b4810dfee13"}, "downloads": -1, "filename": "logsna-1.1.zip", "has_sig": false, "md5_digest": "d74c85c0228d8e5f6e258df7479f6e40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9174, "upload_time": "2012-05-21T17:35:23", "upload_time_iso_8601": "2012-05-21T17:35:23.311200Z", "url": "https://files.pythonhosted.org/packages/f9/ea/b3afd102e7e7466202000bde07fa93e13731f082129acc895fdd7c637d2f/logsna-1.1.zip", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "d08a764505ae309070b721d1cad754da", "sha256": "c6ce37cebafcc2e1f3f25c89f1c64c07106e96b264e860ff9a9dbfe5933236fa"}, "downloads": -1, "filename": "logsna-1.2.zip", "has_sig": false, "md5_digest": "d08a764505ae309070b721d1cad754da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10178, "upload_time": "2012-10-02T22:33:37", "upload_time_iso_8601": "2012-10-02T22:33:37.770755Z", "url": "https://files.pythonhosted.org/packages/08/4b/16a8fe062b0c2520510bea6be2a1d165bc3ee2105cf945884b2834b551c1/logsna-1.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d08a764505ae309070b721d1cad754da", "sha256": "c6ce37cebafcc2e1f3f25c89f1c64c07106e96b264e860ff9a9dbfe5933236fa"}, "downloads": -1, "filename": "logsna-1.2.zip", "has_sig": false, "md5_digest": "d08a764505ae309070b721d1cad754da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10178, "upload_time": "2012-10-02T22:33:37", "upload_time_iso_8601": "2012-10-02T22:33:37.770755Z", "url": "https://files.pythonhosted.org/packages/08/4b/16a8fe062b0c2520510bea6be2a1d165bc3ee2105cf945884b2834b551c1/logsna-1.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:44:07 2020"}