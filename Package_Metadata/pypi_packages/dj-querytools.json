{"info": {"author": "AppointmentGuru", "author_email": "tech@appointmentguru.co", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# dj-querytools\n\nA collection of functions to make it a little easier to build aggregation SQL queries for Django projects\n\n## Installation\n\n```\npip install dj-querytools\n```\n\n## Usage\n\n### Simple aggregation:\n\nAssuming the following model:\n\n```\nclass Todo(models.Model):\n    owner = models.CharField(max_length=30)\n    title = models.CharField(max_length=30)\n    status = models.CharField(max_length=30, choices=TODO_STATUSES)\n    size = models.PositiveIntegerField(default=1)\n    due = models.DateField()\n    due_time = models.DateTimeField()\n```\n\n### `group_by_and_aggregate`\n\n**Example**\n\n```python\n\ngroup_by_and_aggregate(\n    qs,\n    'size',\n    'Sum'\n)\n>> 20\n```\n\n### `group_by_and_annotate`\n\nPerforms the aggregation and groups by the provided field:\n\n**Example**\n\n```python\n\nresult = group_by_and_annotate(\n    qs,\n    'status',\n    'Count'\n)\n>> {'D': 5, 'N': 1, 'P': 8}\n```\n\n### `as_timeseries`\n\n```\nqs = Todo.objects.filter(owner=\"Jack\")\nas_timeseries(\n    qs,\n    'due_time',\n    'id',\n    'Count',\n    '2018-11-01',\n    '2018-11-10'\n)\n>> [{'x': '2018-11-01', 'y': 3.0}, {'x': '2018-11-02', 'y': 3.0}, {'x': '2018-11-03', 'y': 0}, {'x': '2018-11-04', 'y': 2.0}, {'x': '2018-11-05', 'y': 2.0}, {'x': '2018-11-06', 'y': 0}, {'x': '2018-11-07', 'y': 0}, {'x': '2018-11-08', 'y': 0}, {'x': '2018-11-09', 'y': 0}, {'x': '2018-11-10', 'y': 0}]\n```\n\n### `pivot_table`\n\nGiven a flat queryset, group it by one or more fields.\n\n* fields are comma seperated\n* optionally provide a serializer function to serialize items (otherwise it will just append the queryset row)\n\n```python\nresult = pivot_table(qs, 'owner,status', serialize_todo)\n\n>> {'Jack': {'N': [{'title': 'Day year outside whatever int'}], 'P': [{'title': 'Answer society close example '}, {'title': 'Raise real individual general'}], 'D': [{'title': 'Number organization particula'}, {'title': 'Least activity herself than c'}, {'title': 'Country local pretty yourself'}]}, 'Jane': {'P': [{'title': 'Prevent do still teacher grou'}, {'title': 'Include they management first'}, {'title': 'Number court few loss sort mu'}, {'title': 'That federal end local dream '}, {'title': 'Able ask listen. Cost ball me'}, {'title': 'Bad know meeting compare room'}], 'D': [{'title': 'Through town stay able car di'}, {'title': 'Tree design candidate because'}]}}\n```\n\n## periodic_breakdown\n\n`from querytools.tools import periodic_breakdown`\n\nProvide an aggregation broken down by a period (Trun(kind=)).\n\nSee: https://docs.djangoproject.com/en/2.1/ref/models/database-functions/#django.db.models.functions.TruncMonth\n\n**Defaults:**\n\n* `kind='month'`\n* `aggregate_field='ok'`\n* `aggregation = 'Count'`\n\n```python\n\n# simple case:\nresult = periodic_breakdown(qs, 'due')\n\n# slighly more fancy:\nresult = periodic_breakdown(\n    qs,\n    'due',\n    aggregate_field='size',\n    aggregation = 'Sum'\n)\n```\n\n\n## Other stuff\n\n* For full functionality list, see `spec.txt`\n* For examples, check `example_app/tests.py`\n\n## Contributing\n\n**Update the spec:**\n\n```\npython manage.py test --testrunner=testreporter.runner.BDDTestRunner\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/SchoolOrchestration/libs/dj-querytools", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dj-querytools", "package_url": "https://pypi.org/project/dj-querytools/", "platform": "", "project_url": "https://pypi.org/project/dj-querytools/", "project_urls": {"Homepage": "https://gitlab.com/SchoolOrchestration/libs/dj-querytools"}, "release_url": "https://pypi.org/project/dj-querytools/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "Some utility functions to perform complex queries with the Django ORM", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dj-querytools</h1>\n<p>A collection of functions to make it a little easier to build aggregation SQL queries for Django projects</p>\n<h2>Installation</h2>\n<pre><code>pip install dj-querytools\n</code></pre>\n<h2>Usage</h2>\n<h3>Simple aggregation:</h3>\n<p>Assuming the following model:</p>\n<pre><code>class Todo(models.Model):\n    owner = models.CharField(max_length=30)\n    title = models.CharField(max_length=30)\n    status = models.CharField(max_length=30, choices=TODO_STATUSES)\n    size = models.PositiveIntegerField(default=1)\n    due = models.DateField()\n    due_time = models.DateTimeField()\n</code></pre>\n<h3><code>group_by_and_aggregate</code></h3>\n<p><strong>Example</strong></p>\n<pre><span class=\"n\">group_by_and_aggregate</span><span class=\"p\">(</span>\n    <span class=\"n\">qs</span><span class=\"p\">,</span>\n    <span class=\"s1\">'size'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'Sum'</span>\n<span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"mi\">20</span>\n</pre>\n<h3><code>group_by_and_annotate</code></h3>\n<p>Performs the aggregation and groups by the provided field:</p>\n<p><strong>Example</strong></p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">group_by_and_annotate</span><span class=\"p\">(</span>\n    <span class=\"n\">qs</span><span class=\"p\">,</span>\n    <span class=\"s1\">'status'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'Count'</span>\n<span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'D'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'P'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">}</span>\n</pre>\n<h3><code>as_timeseries</code></h3>\n<pre><code>qs = Todo.objects.filter(owner=\"Jack\")\nas_timeseries(\n    qs,\n    'due_time',\n    'id',\n    'Count',\n    '2018-11-01',\n    '2018-11-10'\n)\n&gt;&gt; [{'x': '2018-11-01', 'y': 3.0}, {'x': '2018-11-02', 'y': 3.0}, {'x': '2018-11-03', 'y': 0}, {'x': '2018-11-04', 'y': 2.0}, {'x': '2018-11-05', 'y': 2.0}, {'x': '2018-11-06', 'y': 0}, {'x': '2018-11-07', 'y': 0}, {'x': '2018-11-08', 'y': 0}, {'x': '2018-11-09', 'y': 0}, {'x': '2018-11-10', 'y': 0}]\n</code></pre>\n<h3><code>pivot_table</code></h3>\n<p>Given a flat queryset, group it by one or more fields.</p>\n<ul>\n<li>fields are comma seperated</li>\n<li>optionally provide a serializer function to serialize items (otherwise it will just append the queryset row)</li>\n</ul>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">pivot_table</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"p\">,</span> <span class=\"s1\">'owner,status'</span><span class=\"p\">,</span> <span class=\"n\">serialize_todo</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'Jack'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'N'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Day year outside whatever int'</span><span class=\"p\">}],</span> <span class=\"s1\">'P'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Answer society close example '</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Raise real individual general'</span><span class=\"p\">}],</span> <span class=\"s1\">'D'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Number organization particula'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Least activity herself than c'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Country local pretty yourself'</span><span class=\"p\">}]},</span> <span class=\"s1\">'Jane'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'P'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Prevent do still teacher grou'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Include they management first'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Number court few loss sort mu'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'That federal end local dream '</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Able ask listen. Cost ball me'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Bad know meeting compare room'</span><span class=\"p\">}],</span> <span class=\"s1\">'D'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Through town stay able car di'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Tree design candidate because'</span><span class=\"p\">}]}}</span>\n</pre>\n<h2>periodic_breakdown</h2>\n<p><code>from querytools.tools import periodic_breakdown</code></p>\n<p>Provide an aggregation broken down by a period (Trun(kind=)).</p>\n<p>See: <a href=\"https://docs.djangoproject.com/en/2.1/ref/models/database-functions/#django.db.models.functions.TruncMonth\" rel=\"nofollow\">https://docs.djangoproject.com/en/2.1/ref/models/database-functions/#django.db.models.functions.TruncMonth</a></p>\n<p><strong>Defaults:</strong></p>\n<ul>\n<li><code>kind='month'</code></li>\n<li><code>aggregate_field='ok'</code></li>\n<li><code>aggregation = 'Count'</code></li>\n</ul>\n<pre><span class=\"c1\"># simple case:</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">periodic_breakdown</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"p\">,</span> <span class=\"s1\">'due'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># slighly more fancy:</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">periodic_breakdown</span><span class=\"p\">(</span>\n    <span class=\"n\">qs</span><span class=\"p\">,</span>\n    <span class=\"s1\">'due'</span><span class=\"p\">,</span>\n    <span class=\"n\">aggregate_field</span><span class=\"o\">=</span><span class=\"s1\">'size'</span><span class=\"p\">,</span>\n    <span class=\"n\">aggregation</span> <span class=\"o\">=</span> <span class=\"s1\">'Sum'</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Other stuff</h2>\n<ul>\n<li>For full functionality list, see <code>spec.txt</code></li>\n<li>For examples, check <code>example_app/tests.py</code></li>\n</ul>\n<h2>Contributing</h2>\n<p><strong>Update the spec:</strong></p>\n<pre><code>python manage.py test --testrunner=testreporter.runner.BDDTestRunner\n</code></pre>\n\n          </div>"}, "last_serial": 6585365, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "512f62530f6ac7a2a839b2b5715bb10f", "sha256": "1795c95d43fa9f35c43bd7e9b5db3aec58cd679ef9190bea393f32f7eb3f1bf7"}, "downloads": -1, "filename": "dj-querytools-0.0.0.tar.gz", "has_sig": false, "md5_digest": "512f62530f6ac7a2a839b2b5715bb10f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2391, "upload_time": "2018-11-20T17:08:35", "upload_time_iso_8601": "2018-11-20T17:08:35.381574Z", "url": "https://files.pythonhosted.org/packages/2a/9e/582524abb7bf390d7900dd3e714449d09fd758904e555d70d61a41eb3d2c/dj-querytools-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "e7daa6ebb15d75480fc5bcc175ad9b1f", "sha256": "c8f6be6d783c7e788ad2a70b72b5bc04a59c598804e78d5f8db963b1e8883bd4"}, "downloads": -1, "filename": "dj-querytools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e7daa6ebb15d75480fc5bcc175ad9b1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3504, "upload_time": "2018-11-20T17:43:27", "upload_time_iso_8601": "2018-11-20T17:43:27.026110Z", "url": "https://files.pythonhosted.org/packages/a1/4b/442e38f84e45ccdb44126c02baa6d09de472a8638350f5897990fe371815/dj-querytools-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "37e2acafa81e0609bd95dd688ddba706", "sha256": "89419de83c77f6c3e6575c1cb9bb9e07541b926ffe9690871db0648358843335"}, "downloads": -1, "filename": "dj-querytools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "37e2acafa81e0609bd95dd688ddba706", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3873, "upload_time": "2019-09-23T23:22:06", "upload_time_iso_8601": "2019-09-23T23:22:06.310790Z", "url": "https://files.pythonhosted.org/packages/b6/37/ccc606284bde5e9b525f34de94c6d5cd82bef440cda65e9f4a7dffe11e88/dj-querytools-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "831609c383de23ac857dfed45689d0c1", "sha256": "5dcdeb0afdda11259dfefb6669299dd9e6728e18204f076a84600b42982bdebf"}, "downloads": -1, "filename": "dj-querytools-0.2.1.tar.gz", "has_sig": false, "md5_digest": "831609c383de23ac857dfed45689d0c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4042, "upload_time": "2020-02-06T04:22:19", "upload_time_iso_8601": "2020-02-06T04:22:19.784592Z", "url": "https://files.pythonhosted.org/packages/a2/17/b99ec7afb22e83c6a895f3d3cea2e2463f48e6bb6022d360612f98b6bed8/dj-querytools-0.2.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "74488fca7fff7d953f33c90c63f3a9ec", "sha256": "7d944349aca6b1ca1bb0185a2322411ef27af6232409e6de769d1f234a74209e"}, "downloads": -1, "filename": "dj-querytools-0.2.3.tar.gz", "has_sig": false, "md5_digest": "74488fca7fff7d953f33c90c63f3a9ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4230, "upload_time": "2020-02-06T23:19:37", "upload_time_iso_8601": "2020-02-06T23:19:37.209117Z", "url": "https://files.pythonhosted.org/packages/31/36/18905717511d4329f7d8d6a14a2431457e1c96c0773de8c435913fc635a9/dj-querytools-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74488fca7fff7d953f33c90c63f3a9ec", "sha256": "7d944349aca6b1ca1bb0185a2322411ef27af6232409e6de769d1f234a74209e"}, "downloads": -1, "filename": "dj-querytools-0.2.3.tar.gz", "has_sig": false, "md5_digest": "74488fca7fff7d953f33c90c63f3a9ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4230, "upload_time": "2020-02-06T23:19:37", "upload_time_iso_8601": "2020-02-06T23:19:37.209117Z", "url": "https://files.pythonhosted.org/packages/31/36/18905717511d4329f7d8d6a14a2431457e1c96c0773de8c435913fc635a9/dj-querytools-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:28 2020"}