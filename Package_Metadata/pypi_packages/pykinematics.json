{"info": {"author": "Lukas Adamowicz", "author_email": "lukas.adamowicz95@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# pykinematics\n``pykinematics`` is an open-source Python package for estimating hip kinematics using both novel Magnetic and Inertial \nMeasurement Unit (MIMU) wearable sensors and existing Optical Motion Capture (OMC) algorithms. The novel MIMU algorithms \nhave been validated against OMC, and include novel methods for estimating sensor-to-sensor relative orientation and \nsensor-to-segment alignment.\n\n## Documentation\n\nDocumentation including the below examples, and the API reference can be found at [pykinematics documentation](https://pykinematics.readthedocs.io/en/latest/)\n\n## Requirements\n\n- Python >=3.6\n- Numpy\n- Scipy\n- h5py*\n\npip should automatically collect any uninstalled dependencies.\n\n\\* h5py is required to run the example code in `/scripts/example_code.py`, as the sample data \nprovided (see *Example Usage*) is stored in the `.hdf` format. Pip will not catch and install\n`h5py` as it is not used by ``pykinematics``, and must be installed manually to run the example code.\n\n```shell script\npip install h5py\n```\nor if using Anaconda\n```shell script\nconda install -c anaconda h5py\n```\n\n## Installation\n\n``pykinematics`` can be installed using pip:\n\n```shell script\npip install pykinematics\n```\n\nAlternatively, you can clone this repository and install from source.\n\n``pykinematics`` can be uninstalled by running\n```shell script\npip uninstall pykinematics\n```\n\n## Running tests\nTests are implemented with [pytest](https://docs.pytest.org/en/latest/), and can be automatically run with:\n\n```shell script\npytest --pyargs pykinematics.tests\n```\n\nOptionally add `-v` to increase verbosity.\n\nIf you don't want to run the integration tests (methods tests), use the following:\n```shell script\npython -m pykinematics.tests --no-integration\n```\n\nIf you want to see coverage, the following can be run (assuming [coverage](https://coverage.readthedocs.io/en/v4.5.x/) is installed):\n\n```shell script\ncoverage run -m pytest --pyargs pykinematics.tests\n# generate the report\ncoverage report\n# generate a HTML report under ./build/index.html\ncoverage html\n```\n\n## Example Usage\n\nA full example script can be found in `/scripts/example_code.py`. This requires a sample \ndata file, which can be downloaded from [Sample Data](https://www.uvm.edu/~rsmcginn/download/sample_data.h5)\n\n`example_code.py` contains a helper function to load the data into Python.\nOnce the data is imported, the bulk of the processing is simple:\n\n```python\nimport pykinematics as pk\n\nstatic_calibration_data, star_calibration_data, walk_fast_data = <loaded sample data>\n\n# define some additional keyword arguments for optimizations and orientation estimation\nfilt_vals = {'Angular acceleration': (2, 12)}\n\nka_kwargs = {'opt_kwargs': {'method': 'trf', 'loss': 'arctan'}}\njc_kwargs = dict(method='SAC', mask_input=True, min_samples=1500, opt_kwargs=dict(loss='arctan'), mask_data='gyr')\norient_kwargs = dict(error_factor=5e-8, c=0.003, N=64, sigma_g=1e-3, sigma_a=6e-3)\n\nmimu_estimator = pk.ImuAngles(gravity_value=9.8404, filter_values=filt_vals, joint_center_kwargs=jc_kwargs,\n                              orientation_kwargs=orient_kwargs, knee_axis_kwargs=ka_kwargs)\n\n# calibrate the estimator based on Static and Star Calibration tasks\nmimu_estimator.calibrate(static_calibration_data, star_calibration_data)\n\n# compute the hip joint angles for the Fast Walking on a treadmill\nleft_hip_angles, right_hip_angles = mimu_estimator.estimate(walk_fast_data, return_orientation=False)\n```\n\nRight hip angles from the sample data for walking fast:\n\n![Sample right hip angles](https://github.com/M-SenseResearchGroup/pymotion/blob/master/images/sample_data_right_hip_angles.png \"Sample right hip joint angles\")\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/M-SenseResearchGroup/pymotion", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pykinematics", "package_url": "https://pypi.org/project/pykinematics/", "platform": "", "project_url": "https://pypi.org/project/pykinematics/", "project_urls": {"Documentation": "https://pykinematics.readthedocs.io/en/latest/", "Homepage": "https://github.com/M-SenseResearchGroup/pymotion"}, "release_url": "https://pypi.org/project/pykinematics/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Calculation of hip joint angles from wearable inertial sensors and optical motion capture.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pykinematics</h1>\n<p><code>pykinematics</code> is an open-source Python package for estimating hip kinematics using both novel Magnetic and Inertial\nMeasurement Unit (MIMU) wearable sensors and existing Optical Motion Capture (OMC) algorithms. The novel MIMU algorithms\nhave been validated against OMC, and include novel methods for estimating sensor-to-sensor relative orientation and\nsensor-to-segment alignment.</p>\n<h2>Documentation</h2>\n<p>Documentation including the below examples, and the API reference can be found at <a href=\"https://pykinematics.readthedocs.io/en/latest/\" rel=\"nofollow\">pykinematics documentation</a></p>\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;=3.6</li>\n<li>Numpy</li>\n<li>Scipy</li>\n<li>h5py*</li>\n</ul>\n<p>pip should automatically collect any uninstalled dependencies.</p>\n<p>* h5py is required to run the example code in <code>/scripts/example_code.py</code>, as the sample data\nprovided (see <em>Example Usage</em>) is stored in the <code>.hdf</code> format. Pip will not catch and install\n<code>h5py</code> as it is not used by <code>pykinematics</code>, and must be installed manually to run the example code.</p>\n<pre>pip install h5py\n</pre>\n<p>or if using Anaconda</p>\n<pre>conda install -c anaconda h5py\n</pre>\n<h2>Installation</h2>\n<p><code>pykinematics</code> can be installed using pip:</p>\n<pre>pip install pykinematics\n</pre>\n<p>Alternatively, you can clone this repository and install from source.</p>\n<p><code>pykinematics</code> can be uninstalled by running</p>\n<pre>pip uninstall pykinematics\n</pre>\n<h2>Running tests</h2>\n<p>Tests are implemented with <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>, and can be automatically run with:</p>\n<pre>pytest --pyargs pykinematics.tests\n</pre>\n<p>Optionally add <code>-v</code> to increase verbosity.</p>\n<p>If you don't want to run the integration tests (methods tests), use the following:</p>\n<pre>python -m pykinematics.tests --no-integration\n</pre>\n<p>If you want to see coverage, the following can be run (assuming <a href=\"https://coverage.readthedocs.io/en/v4.5.x/\" rel=\"nofollow\">coverage</a> is installed):</p>\n<pre>coverage run -m pytest --pyargs pykinematics.tests\n<span class=\"c1\"># generate the report</span>\ncoverage report\n<span class=\"c1\"># generate a HTML report under ./build/index.html</span>\ncoverage html\n</pre>\n<h2>Example Usage</h2>\n<p>A full example script can be found in <code>/scripts/example_code.py</code>. This requires a sample\ndata file, which can be downloaded from <a href=\"https://www.uvm.edu/%7Ersmcginn/download/sample_data.h5\" rel=\"nofollow\">Sample Data</a></p>\n<p><code>example_code.py</code> contains a helper function to load the data into Python.\nOnce the data is imported, the bulk of the processing is simple:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pykinematics</span> <span class=\"k\">as</span> <span class=\"nn\">pk</span>\n\n<span class=\"n\">static_calibration_data</span><span class=\"p\">,</span> <span class=\"n\">star_calibration_data</span><span class=\"p\">,</span> <span class=\"n\">walk_fast_data</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">loaded</span> <span class=\"n\">sample</span> <span class=\"n\">data</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># define some additional keyword arguments for optimizations and orientation estimation</span>\n<span class=\"n\">filt_vals</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'Angular acceleration'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)}</span>\n\n<span class=\"n\">ka_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'opt_kwargs'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'method'</span><span class=\"p\">:</span> <span class=\"s1\">'trf'</span><span class=\"p\">,</span> <span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"s1\">'arctan'</span><span class=\"p\">}}</span>\n<span class=\"n\">jc_kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'SAC'</span><span class=\"p\">,</span> <span class=\"n\">mask_input</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">min_samples</span><span class=\"o\">=</span><span class=\"mi\">1500</span><span class=\"p\">,</span> <span class=\"n\">opt_kwargs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'arctan'</span><span class=\"p\">),</span> <span class=\"n\">mask_data</span><span class=\"o\">=</span><span class=\"s1\">'gyr'</span><span class=\"p\">)</span>\n<span class=\"n\">orient_kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">error_factor</span><span class=\"o\">=</span><span class=\"mf\">5e-8</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mf\">0.003</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">sigma_g</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"n\">sigma_a</span><span class=\"o\">=</span><span class=\"mf\">6e-3</span><span class=\"p\">)</span>\n\n<span class=\"n\">mimu_estimator</span> <span class=\"o\">=</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">ImuAngles</span><span class=\"p\">(</span><span class=\"n\">gravity_value</span><span class=\"o\">=</span><span class=\"mf\">9.8404</span><span class=\"p\">,</span> <span class=\"n\">filter_values</span><span class=\"o\">=</span><span class=\"n\">filt_vals</span><span class=\"p\">,</span> <span class=\"n\">joint_center_kwargs</span><span class=\"o\">=</span><span class=\"n\">jc_kwargs</span><span class=\"p\">,</span>\n                              <span class=\"n\">orientation_kwargs</span><span class=\"o\">=</span><span class=\"n\">orient_kwargs</span><span class=\"p\">,</span> <span class=\"n\">knee_axis_kwargs</span><span class=\"o\">=</span><span class=\"n\">ka_kwargs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># calibrate the estimator based on Static and Star Calibration tasks</span>\n<span class=\"n\">mimu_estimator</span><span class=\"o\">.</span><span class=\"n\">calibrate</span><span class=\"p\">(</span><span class=\"n\">static_calibration_data</span><span class=\"p\">,</span> <span class=\"n\">star_calibration_data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># compute the hip joint angles for the Fast Walking on a treadmill</span>\n<span class=\"n\">left_hip_angles</span><span class=\"p\">,</span> <span class=\"n\">right_hip_angles</span> <span class=\"o\">=</span> <span class=\"n\">mimu_estimator</span><span class=\"o\">.</span><span class=\"n\">estimate</span><span class=\"p\">(</span><span class=\"n\">walk_fast_data</span><span class=\"p\">,</span> <span class=\"n\">return_orientation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Right hip angles from the sample data for walking fast:</p>\n<p><img alt=\"Sample right hip angles\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/897d06a73b3a912c3d6109ec0f5fb5f9aee895d3/68747470733a2f2f6769746875622e636f6d2f4d2d53656e7365526573656172636847726f75702f70796d6f74696f6e2f626c6f622f6d61737465722f696d616765732f73616d706c655f646174615f72696768745f6869705f616e676c65732e706e67\"></p>\n\n          </div>"}, "last_serial": 6205292, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "84bc3ecdf20c0cf44d988574c19d665d", "sha256": "788cba5400f9212d1f128587cb6457e2be37ad313733ab260dc9608435d995d1"}, "downloads": -1, "filename": "pykinematics-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "84bc3ecdf20c0cf44d988574c19d665d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 52896, "upload_time": "2019-11-27T01:16:15", "upload_time_iso_8601": "2019-11-27T01:16:15.443044Z", "url": "https://files.pythonhosted.org/packages/60/93/9ed0e3e5367206571cead88c65316319d3b4380363672bd34ae22f7caec3/pykinematics-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2870cb3510fbf6690a71b932c66c0e9", "sha256": "71a3c9f3326b496f026d2525a57054151256acaad25ac12651963403e3f6472a"}, "downloads": -1, "filename": "pykinematics-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d2870cb3510fbf6690a71b932c66c0e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33940, "upload_time": "2019-11-27T01:16:17", "upload_time_iso_8601": "2019-11-27T01:16:17.942695Z", "url": "https://files.pythonhosted.org/packages/fc/40/f5c4c17144bb583c029b763e4caa4c73cbab3832857f2376f69449aa1313/pykinematics-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "84bc3ecdf20c0cf44d988574c19d665d", "sha256": "788cba5400f9212d1f128587cb6457e2be37ad313733ab260dc9608435d995d1"}, "downloads": -1, "filename": "pykinematics-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "84bc3ecdf20c0cf44d988574c19d665d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 52896, "upload_time": "2019-11-27T01:16:15", "upload_time_iso_8601": "2019-11-27T01:16:15.443044Z", "url": "https://files.pythonhosted.org/packages/60/93/9ed0e3e5367206571cead88c65316319d3b4380363672bd34ae22f7caec3/pykinematics-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2870cb3510fbf6690a71b932c66c0e9", "sha256": "71a3c9f3326b496f026d2525a57054151256acaad25ac12651963403e3f6472a"}, "downloads": -1, "filename": "pykinematics-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d2870cb3510fbf6690a71b932c66c0e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33940, "upload_time": "2019-11-27T01:16:17", "upload_time_iso_8601": "2019-11-27T01:16:17.942695Z", "url": "https://files.pythonhosted.org/packages/fc/40/f5c4c17144bb583c029b763e4caa4c73cbab3832857f2376f69449aa1313/pykinematics-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:31 2020"}