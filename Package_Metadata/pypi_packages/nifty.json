{"info": {"author": "Yanzheng Li", "author_email": "yanzheng819@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: Freely Distributable", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development"], "description": "nifty\n=====\n\n.. figure:: https://raw.github.com/yanzhengli/nifty/master/icons/icon_256x256.png\n   :alt: \n\n|Build Status|\n\nA nifty and interactive command-line tool for efficient management and\nexecution of commands grouped in hierarchical structures.\n\nInstall\n-------\n\n``pip install nifty --upgrade``\n\n`PyPI link <https://pypi.python.org/pypi/nifty/>`__ here.\n\nExample\n-------\n\nSuppose you are working on a large project that spans multiple\ncomponents and touches many files in the codebase. During the\ndevelopment process you constantly have to make changes in different\nfiles and components, and each change can impact the entire project.\n\nIn order to make sure that your changes do not break the existing\nbehavior of the system, regardless of how big or small they are, you\nhave to run your unit tests and integration tests continuously.\n\nHowever, it's not always trivial to manage and run all the tests you\nneed in a complex project. Sometimes you just want to run a subset of a\ngroup of tests, but occasionally you want to run a multitude of tests\nacross different parts of the project. Moreover, there might not be any\ntest scripts provided to you that are sufficiently flexible to allow you\nto run any individual tests or combinations of them efficiently.\n\nWell, despair no more, *nifty* was designed to address this problem. All\nyou have do is to specify all the tests in a ``.yaml`` config file in a\nhierarchical structure that makes sense to you.\n\nBelow is a hypothetical example:\n\n.. code:: yaml\n\n    unittests:\n      backend:\n        - 'base/utils/tests/utils_test.test'\n        - 'components/models/tests/models_test.test'\n        - 'servlet/v1/handlers/tests/handlers_test.test'\n      logic:\n        - 'logic/core/encapsulation/tests/encapsulation_test.test'\n        - 'logic/core/request_delegation/tests/request_delegation.test'\n      frontend:\n        - 'www/servlet/tests/servlet_test.test'\n        - 'rendering/tests/rendering_test.test'\n        - 'js/tests/js_test.test'\n    integrations:\n      - 'v1/integrations/integration_test_1.test'\n      - 'v1/integrations/integration_test_2.test'\n      - 'v1/integrations/integration_test_3.test'\n\nSay you put this file under ``test_configs/project.yaml``, all you have\nto do is to run this with *nifty*:\n``nifty test_configs/project.yaml -c testrunner -r '--verbose'``\n\nIn a nutshell, you pass in the path of the config file, in this case\nit's ``test_configs/project.yaml``, then followed by the command that's\nused to run the tests, in this case it's a hypothetical command called\n``testrunner``, following right after either ``-c`` or ``--command``.\n\nAdditionally, you can also specify extra arguments that get passed to\nthe command followed by either ``-r`` or ``--arguments`` (in this case\nit's ``--verbose``).\n\n**Note**: for the current version, only the most bottom level items can\nbe arranged into lists. This is by design for the time being, and will\nprobably be changed later on for greater flexibility.\n\nLast, if you still feel lost, just do ``nifty --help``.\n\nItem Selection\n--------------\n\n*Nifty* allows you to select one or more items simultaneously. For the\nsample config file above, the following is shown:\n\n::\n\n    From config file: test_configs/project.yaml\n\n     [1] unittests\n        [1] logic\n          [1] logic/core/encapsulation/tests/encapsulation_test.test\n          [2] logic/core/request_delegation/tests/request_delegation.test\n        [2] frontend\n          [1] www/servlet/tests/servlet_test.test\n          [2] rendering/tests/rendering_test.test\n          [3] js/tests/js_test.test\n        [3] backend\n          [1] base/utils/tests/utils_test.test\n          [2] components/models/tests/models_test.test\n          [3] servlet/v1/handlers/tests/handlers_test.test\n        [2] integrations\n          [1] v1/integrations/integration_test_1.test\n          [2] v1/integrations/integration_test_2.test\n          [3] v1/integrations/integration_test_3.test\n\n    Please enter: a) One or more paths (e.g. '1.2, 3.4.5') b) \"all\" c) \"exit\"\n    >>\n\nIf you just want to select a single item, just enter an integer that's\nlabeled for the desired item, and the interactive prompt will step into\nthat item. For example, if you want to select all integration tests,\njust enter ``2``, the result will look like this:\n\n::\n\n    From config file: test_configs/project.yaml\n\n     [1] v1/integrations/integration_test_1.test\n     [2] v1/integrations/integration_test_2.test\n     [3] v1/integrations/integration_test_3.test\n\n    Please enter: a) One or more paths (e.g. '1.2, 3.4.5') b) \"all\" c) \"exit\"\n    >>\n\nYou can also select one or more items that may not be in the same\nlogical group, using dot-separated paths, with each path separated by a\ncomma. For example, if you want to select ``js/tests/js_test.test``,\n``base/utils/tests/utils_test.test`` and\n``v1/integrations/integration_test_1.test`` together, you can enter\n``1.2.3, 1.3.1, 2.1``.\n\nThe result will look like this:\n\n::\n\n    Please enter: a) One or more paths (e.g. '1.2, 3.4.5') b) \"all\" c) \"exit\"\n    >> 1.2.3, 1.3.1, 2.1\n\n\n    Going to execute the following 3 item(s) with the command testrunner:\n\n      [1] js/tests/js_test.test\n      [2] base/utils/tests/utils_test.test\n      [3] v1/integrations/integration_test_1.test\n\nLast, there are two more options that can be convenient from time to\ntime. ``-l`` or ``--list`` lists all the targets without running them\nand ``-a`` or ``--all`` runs all targets.\n\nLatest version\n--------------\n\n1.6.3\n\nLicense\n-------\n\nDO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 2, December 2004\n\nCopyright (C) 2014 Yanzheng Li\n\nEveryone is permitted to copy and distribute verbatim or modified copies\nof this license document, and changing it is allowed as long as the name\nis changed.\n\nDO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE TERMS AND CONDITIONS FOR\nCOPYING, DISTRIBUTION AND MODIFICATION\n\n0. You just DO WHAT THE FUCK YOU WANT TO.\n\n.. |Build Status| image:: https://travis-ci.org/yanzhengli/nifty.png?branch=dev\n   :target: https://travis-ci.org/yanzhengli/nifty", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://yanzhengli.github.io/nifty/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "nifty", "package_url": "https://pypi.org/project/nifty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/nifty/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://yanzhengli.github.io/nifty/"}, "release_url": "https://pypi.org/project/nifty/1.6.3/", "requires_dist": null, "requires_python": null, "summary": "Interactive command-line helper", "version": "1.6.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13ea473c9e4f50ae13ac5b24248d4b9a96e5421d/68747470733a2f2f7261772e6769746875622e636f6d2f79616e7a68656e676c692f6e696674792f6d61737465722f69636f6e732f69636f6e5f323536783235362e706e67\">\n</div>\n<p><a href=\"https://travis-ci.org/yanzhengli/nifty\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7358179ff4716b730de6d35752656d458dc35b3d/68747470733a2f2f7472617669732d63692e6f72672f79616e7a68656e676c692f6e696674792e706e673f6272616e63683d646576\"></a></p>\n<p>A nifty and interactive command-line tool for efficient management and\nexecution of commands grouped in hierarchical structures.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p><tt>pip install nifty <span class=\"pre\">--upgrade</span></tt></p>\n<p><a href=\"https://pypi.python.org/pypi/nifty/\" rel=\"nofollow\">PyPI link</a> here.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Suppose you are working on a large project that spans multiple\ncomponents and touches many files in the codebase. During the\ndevelopment process you constantly have to make changes in different\nfiles and components, and each change can impact the entire project.</p>\n<p>In order to make sure that your changes do not break the existing\nbehavior of the system, regardless of how big or small they are, you\nhave to run your unit tests and integration tests continuously.</p>\n<p>However, it\u2019s not always trivial to manage and run all the tests you\nneed in a complex project. Sometimes you just want to run a subset of a\ngroup of tests, but occasionally you want to run a multitude of tests\nacross different parts of the project. Moreover, there might not be any\ntest scripts provided to you that are sufficiently flexible to allow you\nto run any individual tests or combinations of them efficiently.</p>\n<p>Well, despair no more, <em>nifty</em> was designed to address this problem. All\nyou have do is to specify all the tests in a <tt>.yaml</tt> config file in a\nhierarchical structure that makes sense to you.</p>\n<p>Below is a hypothetical example:</p>\n<pre><span class=\"nt\">unittests</span><span class=\"p\">:</span>\n  <span class=\"nt\">backend</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"s\">'base/utils/tests/utils_test.test'</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"s\">'components/models/tests/models_test.test'</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"s\">'servlet/v1/handlers/tests/handlers_test.test'</span>\n  <span class=\"nt\">logic</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"s\">'logic/core/encapsulation/tests/encapsulation_test.test'</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"s\">'logic/core/request_delegation/tests/request_delegation.test'</span>\n  <span class=\"nt\">frontend</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"s\">'www/servlet/tests/servlet_test.test'</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"s\">'rendering/tests/rendering_test.test'</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"s\">'js/tests/js_test.test'</span>\n<span class=\"nt\">integrations</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"s\">'v1/integrations/integration_test_1.test'</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"s\">'v1/integrations/integration_test_2.test'</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"s\">'v1/integrations/integration_test_3.test'</span>\n</pre>\n<p>Say you put this file under <tt>test_configs/project.yaml</tt>, all you have\nto do is to run this with <em>nifty</em>:\n<tt>nifty test_configs/project.yaml <span class=\"pre\">-c</span> testrunner <span class=\"pre\">-r</span> <span class=\"pre\">'--verbose'</span></tt></p>\n<p>In a nutshell, you pass in the path of the config file, in this case\nit\u2019s <tt>test_configs/project.yaml</tt>, then followed by the command that\u2019s\nused to run the tests, in this case it\u2019s a hypothetical command called\n<tt>testrunner</tt>, following right after either <tt><span class=\"pre\">-c</span></tt> or <tt><span class=\"pre\">--command</span></tt>.</p>\n<p>Additionally, you can also specify extra arguments that get passed to\nthe command followed by either <tt><span class=\"pre\">-r</span></tt> or <tt><span class=\"pre\">--arguments</span></tt> (in this case\nit\u2019s <tt><span class=\"pre\">--verbose</span></tt>).</p>\n<p><strong>Note</strong>: for the current version, only the most bottom level items can\nbe arranged into lists. This is by design for the time being, and will\nprobably be changed later on for greater flexibility.</p>\n<p>Last, if you still feel lost, just do <tt>nifty <span class=\"pre\">--help</span></tt>.</p>\n</div>\n<div id=\"item-selection\">\n<h2>Item Selection</h2>\n<p><em>Nifty</em> allows you to select one or more items simultaneously. For the\nsample config file above, the following is shown:</p>\n<pre>From config file: test_configs/project.yaml\n\n [1] unittests\n    [1] logic\n      [1] logic/core/encapsulation/tests/encapsulation_test.test\n      [2] logic/core/request_delegation/tests/request_delegation.test\n    [2] frontend\n      [1] www/servlet/tests/servlet_test.test\n      [2] rendering/tests/rendering_test.test\n      [3] js/tests/js_test.test\n    [3] backend\n      [1] base/utils/tests/utils_test.test\n      [2] components/models/tests/models_test.test\n      [3] servlet/v1/handlers/tests/handlers_test.test\n    [2] integrations\n      [1] v1/integrations/integration_test_1.test\n      [2] v1/integrations/integration_test_2.test\n      [3] v1/integrations/integration_test_3.test\n\nPlease enter: a) One or more paths (e.g. '1.2, 3.4.5') b) \"all\" c) \"exit\"\n&gt;&gt;\n</pre>\n<p>If you just want to select a single item, just enter an integer that\u2019s\nlabeled for the desired item, and the interactive prompt will step into\nthat item. For example, if you want to select all integration tests,\njust enter <tt>2</tt>, the result will look like this:</p>\n<pre>From config file: test_configs/project.yaml\n\n [1] v1/integrations/integration_test_1.test\n [2] v1/integrations/integration_test_2.test\n [3] v1/integrations/integration_test_3.test\n\nPlease enter: a) One or more paths (e.g. '1.2, 3.4.5') b) \"all\" c) \"exit\"\n&gt;&gt;\n</pre>\n<p>You can also select one or more items that may not be in the same\nlogical group, using dot-separated paths, with each path separated by a\ncomma. For example, if you want to select <tt>js/tests/js_test.test</tt>,\n<tt>base/utils/tests/utils_test.test</tt> and\n<tt>v1/integrations/integration_test_1.test</tt> together, you can enter\n<tt>1.2.3, 1.3.1, 2.1</tt>.</p>\n<p>The result will look like this:</p>\n<pre>Please enter: a) One or more paths (e.g. '1.2, 3.4.5') b) \"all\" c) \"exit\"\n&gt;&gt; 1.2.3, 1.3.1, 2.1\n\n\nGoing to execute the following 3 item(s) with the command testrunner:\n\n  [1] js/tests/js_test.test\n  [2] base/utils/tests/utils_test.test\n  [3] v1/integrations/integration_test_1.test\n</pre>\n<p>Last, there are two more options that can be convenient from time to\ntime. <tt><span class=\"pre\">-l</span></tt> or <tt><span class=\"pre\">--list</span></tt> lists all the targets without running them\nand <tt><span class=\"pre\">-a</span></tt> or <tt><span class=\"pre\">--all</span></tt> runs all targets.</p>\n</div>\n<div id=\"latest-version\">\n<h2>Latest version</h2>\n<p>1.6.3</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 2, December 2004</p>\n<p>Copyright (C) 2014 Yanzheng Li</p>\n<p>Everyone is permitted to copy and distribute verbatim or modified copies\nof this license document, and changing it is allowed as long as the name\nis changed.</p>\n<p>DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE TERMS AND CONDITIONS FOR\nCOPYING, DISTRIBUTION AND MODIFICATION</p>\n<ol>\n<li>You just DO WHAT THE FUCK YOU WANT TO.</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 1109561, "releases": {"1.5.0": [{"comment_text": "", "digests": {"md5": "2fb81127716373cde3f3596705bef951", "sha256": "dc0fbf3501834cf6071b21aad25ba211cdd20828ca1394c7eeda96ab733b1632"}, "downloads": -1, "filename": "nifty-1.5.0.tar.gz", "has_sig": false, "md5_digest": "2fb81127716373cde3f3596705bef951", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6222, "upload_time": "2014-05-10T07:08:42", "upload_time_iso_8601": "2014-05-10T07:08:42.795141Z", "url": "https://files.pythonhosted.org/packages/7f/5f/251c1f25378c017f921fb214899d2b6955c2ec933311f634f79270428f12/nifty-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "5fa27a9eacd0c888dbda9b306e899cc9", "sha256": "5b374aff1e55998fb5288808e2d9f3a031c50489ef875377fddf6dc1d0f965fe"}, "downloads": -1, "filename": "nifty-1.6.0.tar.gz", "has_sig": false, "md5_digest": "5fa27a9eacd0c888dbda9b306e899cc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6212, "upload_time": "2014-05-10T08:07:48", "upload_time_iso_8601": "2014-05-10T08:07:48.324320Z", "url": "https://files.pythonhosted.org/packages/6d/0c/9a40d65b6a9f46076b22bd71c73b6a324b65e2532235f258d0ed86246ae4/nifty-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "d0bf0a6cafac9c11763b8177f4a8167b", "sha256": "c3ef9f19173ce3cd0c39e15b542c0438206ba656cd10d603f8c9d4688bbad23c"}, "downloads": -1, "filename": "nifty-1.6.1.tar.gz", "has_sig": false, "md5_digest": "d0bf0a6cafac9c11763b8177f4a8167b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8609, "upload_time": "2014-05-31T04:55:59", "upload_time_iso_8601": "2014-05-31T04:55:59.428914Z", "url": "https://files.pythonhosted.org/packages/5a/27/b6d2295104773b592d9b5911fe2102876ddde8c6c5f82c68faf0b859a109/nifty-1.6.1.tar.gz", "yanked": false}], "1.6.2": [{"comment_text": "", "digests": {"md5": "36a6b92dc05348cc06fa7c411a9ada5d", "sha256": "d05e13ee6db6b76ae4544b133a43c0b9c598a194f55361b9e7cd221b5e8f7f40"}, "downloads": -1, "filename": "nifty-1.6.2.tar.gz", "has_sig": false, "md5_digest": "36a6b92dc05348cc06fa7c411a9ada5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8620, "upload_time": "2014-05-31T05:03:06", "upload_time_iso_8601": "2014-05-31T05:03:06.800861Z", "url": "https://files.pythonhosted.org/packages/35/c5/cc60d6e3ae9f238cb19e556c57e679fe4f2d5203d1d75b83a6e5b01bed9c/nifty-1.6.2.tar.gz", "yanked": false}], "1.6.3": [{"comment_text": "", "digests": {"md5": "97b08f3eef35a332e442d092ee1f0432", "sha256": "9ee4ecf3c747572a39ecc47cf8982cdaba8c0ef2fcefa5d2bcc180f61ffb2113"}, "downloads": -1, "filename": "nifty-1.6.3.tar.gz", "has_sig": false, "md5_digest": "97b08f3eef35a332e442d092ee1f0432", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8592, "upload_time": "2014-05-31T05:26:56", "upload_time_iso_8601": "2014-05-31T05:26:56.389102Z", "url": "https://files.pythonhosted.org/packages/10/d7/094803936bad38d03d263979dc99713a7e18838cac112182a9288f68a8c1/nifty-1.6.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97b08f3eef35a332e442d092ee1f0432", "sha256": "9ee4ecf3c747572a39ecc47cf8982cdaba8c0ef2fcefa5d2bcc180f61ffb2113"}, "downloads": -1, "filename": "nifty-1.6.3.tar.gz", "has_sig": false, "md5_digest": "97b08f3eef35a332e442d092ee1f0432", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8592, "upload_time": "2014-05-31T05:26:56", "upload_time_iso_8601": "2014-05-31T05:26:56.389102Z", "url": "https://files.pythonhosted.org/packages/10/d7/094803936bad38d03d263979dc99713a7e18838cac112182a9288f68a8c1/nifty-1.6.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:23 2020"}