{"info": {"author": "Andrei Pozolotin", "author_email": "andrei.pozolotin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.8", "Topic :: System :: Systems Administration", "Topic :: Terminals", "Topic :: Utilities"], "description": "## nspawn\n\n[![Travis Status][travis_icon]][travis_link]\n[![Appvey Status][appvey_icon]][appvey_link]\n[![Package Version][pypi_icon]][pypi_link]\n[![Python Versions][python_icon]][python_link]\n\nContainers with [`systemd-nspawn`](https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html)\n\nFeatures:\n* differential image [overlays](https://en.wikipedia.org/wiki/OverlayFS)\n* supports multiple inheritance for images\n* provides [dsl](https://en.wikipedia.org/wiki/Domain-specific_language)\n  for image `build` and machine `setup`\n* machine is\n  [completely represented](https://github.com/random-python/nspawn/tree/master/src/main/nspawn/template)\n  by generated\n  [machine.service unit file](https://www.freedesktop.org/software/systemd/man/systemd.unit.html)\n\n### Install\n\nTo install python package:\n\n```\nsudo pip install nspawn\n```\n\n### Build Script\n\nTo build an image, provide and invoke executable `build.py` script, for example:\n* alpine: https://github.com/random-python/nspawn/blob/master/demo/alpine/base/build.py\n* archux: https://github.com/random-python/nspawn/blob/master/demo/archux/base/build.py\n* ubuntu: https://github.com/random-python/nspawn/blob/master/demo/ubuntu/base/build.py\n\nFor available build options run `./build.py --help`\n\n### Setup Script\n\nTo setup a machine, provide and invoke executable `setup.py` script, for example:\n* alpine: https://github.com/random-python/nspawn/blob/master/demo/alpine/base/setup.py\n* archux: https://github.com/random-python/nspawn/blob/master/demo/archux/base/setup.py\n* ubuntu: https://github.com/random-python/nspawn/blob/master/demo/ubuntu/base/setup.py\n\nFor available setup options run `./setup.py --help`\n\n### Machine Service\n\nTo review provisioned, generated and running machine service, run:\n```\nmachinectl\nsystemctl status <machine>\ncat /etc/systemd/system/<machine>.service\n```\nfor example, demo generated services:\n* alpine: https://github.com/random-python/nspawn/blob/master/demo/alpine-base.service\n* archux: https://github.com/random-python/nspawn/blob/master/demo/archux-base.service\n* ubuntu: https://github.com/random-python/nspawn/blob/master/demo/ubuntu-base.service\n\n### Machine Resources\n\nLocation of machine files and folders:\n```\n/etc/systemd/system/<machine>.service\n/var/lib/machines/<machine>\n/var/lib/nspawn/runtime/<machine>\n```\n\n### Machine Management\n\nTo interact with live machine:\n* for machines registered with `machinectl`\n* for machines with `systemd` `init`, such as `archlinux`\n```\n# start interactive shell:\nsudo machinectl shell <machine> \n```\n```\n# invoke command with args:\nsudo machinectl shell <machine> /bin/command arg1 arg2 ... \n```\n* for machines not registered with `machinectl`\n* for machines without `systemd` `init`, such as `alpine linux`\n```\n# start interactive shell:\n./setup.py --action=nsenter \n```\n* alternatively, use package-provided `nspawn-enter` command:\n```\n# start interactive shell:\nnspawn-enter <machine> \n```\n```\n# invoke command with args:\nnspawn-enter <machine> \"command arg1 arg2 ...\" \n```\n\n### Configuration\n\nAvailable configuration options are described in\n[config.ini](https://github.com/random-python/nspawn/blob/master/src/main/nspawn/config.ini) \nfile.\n\nUse `config/path_list` option to control configuration override file list.\n\n### Image Server\n\nPackage comes with provisioning command `nspawn-hatch`\nwhich can build and setup local http/https image server.\n```\n# review available services:\nnspawn-hatch list\n```\n```\n# provision image server service:\nnspawn-hatch update image-server\n```\n```\n# verify image server machine status:\nmachinectl\n```\n\nImage server settings:\n* https://github.com/random-python/nspawn/tree/master/src/main/nspawn/app/hatcher/service/image-server\n\nImage syncer settings (replicate to Amazon AWS S3):\n* https://github.com/random-python/nspawn/tree/master/src/main/nspawn/app/hatcher/service/image-syncer\n\n### Build DSL\n\nBuild DSL is used in `build.py`, is activated by `from nspawn.build import *` and provides keywords:\n```\n    'TOOL',\n    'IMAGE',\n    'PULL',\n    'EXEC',\n    'WITH',\n    'FETCH',\n    'COPY',\n    'CAST',\n    'RUN',\n    'SH',\n    'PUSH',\n```\n\n### Setup DSL\n\nSetup DSL is used in `setup.py`, is activated by `from nspawn.setup import *` and provides keywords:\n```\n    'TOOL',\n    'IMAGE',\n    'MACHINE',\n    'WITH',\n    'EXEC',\n    'COPY',\n    'CAST',\n    'RUN',\n    'SH',\n```\n\n### DSL Syntax\n\n#### `TOOL`\n\nExpose build/setup utility functions:\n* https://github.com/random-python/nspawn/tree/master/src/main/nspawn/tool\n```\nTOOL.<function>(...)\n```\n\n#### `IMAGE()`\n\nDeclare image identity:\n```\nIMAGE(\"http://host/path/package.tar.gz\")\nIMAGE(url=\"http://host/path/package.tar.gz\")\n```\n\n#### `PULL()`\n\nProvision dependency image:\n```\nPULL(\"http://host/path/package.tar.gz\")\nPULL(url=\"http://host/path/package.tar.gz\")\n```\n\n#### `EXEC()`\n\nDeclare image entry point executable i.e. `COMMAND [ARGS...]`:\n* https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html\n```\nEXEC(['/usr/bin/env', 'sh', '-c', 'echo \"hello-kitty\"'])\nEXEC(command=['/usr/bin/env', 'sh', '-c', 'echo \"hello-kitty\"'])\n```\n\n#### `WITH()`\n\nCustomize machine features using nspawn container settings:\n* https://www.freedesktop.org/software/systemd/man/systemd.nspawn.html\n```\nWITH(\n    SettingName1='setting 1 value a',\n    SettingName2='setting 2 value b',\n    ...,\n)\n```\n\n#### `COPY()`\n\nCopy local resources:\n* when used in `build.py`: target is in the image\n* when used in `setup.py`: target is on the host\n```\nCOPY(\"/etc\")\nCOPY(path=\"/etc\")\nCOPY(source=\"/root/input.md\", target=\"/root/output.md\")\n```\n\n#### `CAST()`\n\nTemplate local resources:\n* when used in `build.py`: target is in the image\n* when used in `setup.py`: target is on the host\n```\nCAST(\"/root/readme.md\", variable=\"template varialbe\", ...)\nCAST(path=\"/root/readme.md\", variable=\"template varialbe\", ...)\nCAST(source=\"/root/input.md\", target=\"/root/output.md\", variable=\"template varialbe\", ...)\n```\n\nTemplate uses [python/jinja](https://jinja.palletsprojects.com/en/2.10.x/)\nformat, i.e:\n```\nthis template variable will be substituted: {{variable}}\n```\n\n#### `FETCH()`\n\nDownload and extract remote resource:\n```\nFETCH( # use when source and target are the same\n   url=\"http://server/package.tar.gz\", # url for remote resource\n   path=\"/common-path\", # path inside the package source and image target\n)\nFETCH( # use when source and target are different\n   url=\"http://server/package.tar.gz\", # url for remote resource\n   source=\"/package-path\", # path inside the package extract\n   target=\"/opt/resource\", # path inside the build image target\n)\n```\n\n#### `RUN()`\n\nInvoke command, with target depending on the context:\n* when used in `build.py`: invoke inside the image\n* when used in `setup.py`: invoke on the host\n```\nRUN(['/usr/bin/env', 'ls', '-las'])\nRUN(command=['/usr/bin/env', 'ls', '-las'])\n```\n\n#### `SH()`\n\nInvoke shell script, with target depending on the context:\n* when used in `build.py`: invoke inside the image\n* when used in `setup.py`: invoke on the host\n```\nSH(\"ls -las\")\nSH(script=\"ls -las\")\n```\nNote:\n* `SH(script)` is equivalent to `RUN(command=['/usr/bin/env', 'sh', '-c', script])`\n\n#### `PUSH()`\n\nPublish image result to the declared url:\n```\nPUSH()\n```\n\n#### `MACHINE()`\n\nDeclare machine service:\n```\nMACHINE('machine-name')\nMACHINE(name='machine-name')\nMACHINE(name='machine-name', template='/path/to/service/template/machine.service')\n```\n\nProvide inline service unit changes:\n```\nMACHINE(\n    name='machine-name',\n    # extra entries for [Unit] section\n    unit_conf=[\n        \"Description=hello-world\",  # override description\n    ],\n    # extra entries for [Service] section\n    service_conf=[\n        \"CPUQuota=10%\",  # throttle processor usage\n    ],\n    # extra entries for [Install] section\n    install_conf=[\n        \"WantedBy=machines.target\",  # inject unit dependency\n    ],\n)\n```\n\nDesign custom service templates based on package-provided defaults, for example:\n* https://github.com/random-python/nspawn/tree/master/src/main/nspawn/template\n\n\n\n\n[travis_icon]: https://travis-ci.org/random-python/nspawn.svg?branch=master\n[travis_link]: https://travis-ci.org/random-python/nspawn/builds\n\n[appvey_icon]: https://ci.appveyor.com/api/projects/status/fbjgg6ana9kkww6p?svg=true\n[appvey_link]: https://ci.appveyor.com/project/Andrei-Pozolotin/nspawn/history \n\n[pypi_icon]: https://badge.fury.io/py/nspawn.svg\n[pypi_link]: https://pypi.python.org/pypi/nspawn\n\n[python_icon]: https://img.shields.io/pypi/pyversions/nspawn.svg\n[python_link]: https://pypi.python.org/pypi/nspawn\n\n[tokei_icon]: https://tokei.rs/b1/github/random-python/nspawn\n[tokei_link]: https://github.com/random-python/nspawn/tree/master/src", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/random-python/nspawn", "keywords": "nspawn,container,systemd,systemd-nspawn", "license": "Apache-2", "maintainer": "", "maintainer_email": "", "name": "nspawn", "package_url": "https://pypi.org/project/nspawn/", "platform": "", "project_url": "https://pypi.org/project/nspawn/", "project_urls": {"Homepage": "https://github.com/random-python/nspawn"}, "release_url": "https://pypi.org/project/nspawn/0.6.14.dev1/", "requires_dist": null, "requires_python": "", "summary": "Containers with systemd-nspawn", "version": "0.6.14.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>nspawn</h2>\n<p><a href=\"https://travis-ci.org/random-python/nspawn/builds\" rel=\"nofollow\"><img alt=\"Travis Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/923208f4c40aa346509cd379f6dc2b6710f368b9/68747470733a2f2f7472617669732d63692e6f72672f72616e646f6d2d707974686f6e2f6e737061776e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/Andrei-Pozolotin/nspawn/history\" rel=\"nofollow\"><img alt=\"Appvey Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc458aea9573e761066543f9b38498f01bc71ddb/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f66626a676736616e61396b6b777736703f7376673d74727565\"></a>\n<a href=\"https://pypi.python.org/pypi/nspawn\" rel=\"nofollow\"><img alt=\"Package Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34428085721dc5ec8c38ee9c1145b57a3f855408/68747470733a2f2f62616467652e667572792e696f2f70792f6e737061776e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/nspawn\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa639b3be107466adf6eee6f1a326792f5d12205/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6e737061776e2e737667\"></a></p>\n<p>Containers with <a href=\"https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html\" rel=\"nofollow\"><code>systemd-nspawn</code></a></p>\n<p>Features:</p>\n<ul>\n<li>differential image <a href=\"https://en.wikipedia.org/wiki/OverlayFS\" rel=\"nofollow\">overlays</a></li>\n<li>supports multiple inheritance for images</li>\n<li>provides <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" rel=\"nofollow\">dsl</a>\nfor image <code>build</code> and machine <code>setup</code></li>\n<li>machine is\n<a href=\"https://github.com/random-python/nspawn/tree/master/src/main/nspawn/template\" rel=\"nofollow\">completely represented</a>\nby generated\n<a href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html\" rel=\"nofollow\">machine.service unit file</a></li>\n</ul>\n<h3>Install</h3>\n<p>To install python package:</p>\n<pre><code>sudo pip install nspawn\n</code></pre>\n<h3>Build Script</h3>\n<p>To build an image, provide and invoke executable <code>build.py</code> script, for example:</p>\n<ul>\n<li>alpine: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/alpine/base/build.py\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/alpine/base/build.py</a></li>\n<li>archux: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/archux/base/build.py\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/archux/base/build.py</a></li>\n<li>ubuntu: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/ubuntu/base/build.py\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/ubuntu/base/build.py</a></li>\n</ul>\n<p>For available build options run <code>./build.py --help</code></p>\n<h3>Setup Script</h3>\n<p>To setup a machine, provide and invoke executable <code>setup.py</code> script, for example:</p>\n<ul>\n<li>alpine: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/alpine/base/setup.py\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/alpine/base/setup.py</a></li>\n<li>archux: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/archux/base/setup.py\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/archux/base/setup.py</a></li>\n<li>ubuntu: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/ubuntu/base/setup.py\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/ubuntu/base/setup.py</a></li>\n</ul>\n<p>For available setup options run <code>./setup.py --help</code></p>\n<h3>Machine Service</h3>\n<p>To review provisioned, generated and running machine service, run:</p>\n<pre><code>machinectl\nsystemctl status &lt;machine&gt;\ncat /etc/systemd/system/&lt;machine&gt;.service\n</code></pre>\n<p>for example, demo generated services:</p>\n<ul>\n<li>alpine: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/alpine-base.service\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/alpine-base.service</a></li>\n<li>archux: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/archux-base.service\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/archux-base.service</a></li>\n<li>ubuntu: <a href=\"https://github.com/random-python/nspawn/blob/master/demo/ubuntu-base.service\" rel=\"nofollow\">https://github.com/random-python/nspawn/blob/master/demo/ubuntu-base.service</a></li>\n</ul>\n<h3>Machine Resources</h3>\n<p>Location of machine files and folders:</p>\n<pre><code>/etc/systemd/system/&lt;machine&gt;.service\n/var/lib/machines/&lt;machine&gt;\n/var/lib/nspawn/runtime/&lt;machine&gt;\n</code></pre>\n<h3>Machine Management</h3>\n<p>To interact with live machine:</p>\n<ul>\n<li>for machines registered with <code>machinectl</code></li>\n<li>for machines with <code>systemd</code> <code>init</code>, such as <code>archlinux</code></li>\n</ul>\n<pre><code># start interactive shell:\nsudo machinectl shell &lt;machine&gt; \n</code></pre>\n<pre><code># invoke command with args:\nsudo machinectl shell &lt;machine&gt; /bin/command arg1 arg2 ... \n</code></pre>\n<ul>\n<li>for machines not registered with <code>machinectl</code></li>\n<li>for machines without <code>systemd</code> <code>init</code>, such as <code>alpine linux</code></li>\n</ul>\n<pre><code># start interactive shell:\n./setup.py --action=nsenter \n</code></pre>\n<ul>\n<li>alternatively, use package-provided <code>nspawn-enter</code> command:</li>\n</ul>\n<pre><code># start interactive shell:\nnspawn-enter &lt;machine&gt; \n</code></pre>\n<pre><code># invoke command with args:\nnspawn-enter &lt;machine&gt; \"command arg1 arg2 ...\" \n</code></pre>\n<h3>Configuration</h3>\n<p>Available configuration options are described in\n<a href=\"https://github.com/random-python/nspawn/blob/master/src/main/nspawn/config.ini\" rel=\"nofollow\">config.ini</a>\nfile.</p>\n<p>Use <code>config/path_list</code> option to control configuration override file list.</p>\n<h3>Image Server</h3>\n<p>Package comes with provisioning command <code>nspawn-hatch</code>\nwhich can build and setup local http/https image server.</p>\n<pre><code># review available services:\nnspawn-hatch list\n</code></pre>\n<pre><code># provision image server service:\nnspawn-hatch update image-server\n</code></pre>\n<pre><code># verify image server machine status:\nmachinectl\n</code></pre>\n<p>Image server settings:</p>\n<ul>\n<li><a href=\"https://github.com/random-python/nspawn/tree/master/src/main/nspawn/app/hatcher/service/image-server\" rel=\"nofollow\">https://github.com/random-python/nspawn/tree/master/src/main/nspawn/app/hatcher/service/image-server</a></li>\n</ul>\n<p>Image syncer settings (replicate to Amazon AWS S3):</p>\n<ul>\n<li><a href=\"https://github.com/random-python/nspawn/tree/master/src/main/nspawn/app/hatcher/service/image-syncer\" rel=\"nofollow\">https://github.com/random-python/nspawn/tree/master/src/main/nspawn/app/hatcher/service/image-syncer</a></li>\n</ul>\n<h3>Build DSL</h3>\n<p>Build DSL is used in <code>build.py</code>, is activated by <code>from nspawn.build import *</code> and provides keywords:</p>\n<pre><code>    'TOOL',\n    'IMAGE',\n    'PULL',\n    'EXEC',\n    'WITH',\n    'FETCH',\n    'COPY',\n    'CAST',\n    'RUN',\n    'SH',\n    'PUSH',\n</code></pre>\n<h3>Setup DSL</h3>\n<p>Setup DSL is used in <code>setup.py</code>, is activated by <code>from nspawn.setup import *</code> and provides keywords:</p>\n<pre><code>    'TOOL',\n    'IMAGE',\n    'MACHINE',\n    'WITH',\n    'EXEC',\n    'COPY',\n    'CAST',\n    'RUN',\n    'SH',\n</code></pre>\n<h3>DSL Syntax</h3>\n<h4><code>TOOL</code></h4>\n<p>Expose build/setup utility functions:</p>\n<ul>\n<li><a href=\"https://github.com/random-python/nspawn/tree/master/src/main/nspawn/tool\" rel=\"nofollow\">https://github.com/random-python/nspawn/tree/master/src/main/nspawn/tool</a></li>\n</ul>\n<pre><code>TOOL.&lt;function&gt;(...)\n</code></pre>\n<h4><code>IMAGE()</code></h4>\n<p>Declare image identity:</p>\n<pre><code>IMAGE(\"http://host/path/package.tar.gz\")\nIMAGE(url=\"http://host/path/package.tar.gz\")\n</code></pre>\n<h4><code>PULL()</code></h4>\n<p>Provision dependency image:</p>\n<pre><code>PULL(\"http://host/path/package.tar.gz\")\nPULL(url=\"http://host/path/package.tar.gz\")\n</code></pre>\n<h4><code>EXEC()</code></h4>\n<p>Declare image entry point executable i.e. <code>COMMAND [ARGS...]</code>:</p>\n<ul>\n<li><a href=\"https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html\" rel=\"nofollow\">https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html</a></li>\n</ul>\n<pre><code>EXEC(['/usr/bin/env', 'sh', '-c', 'echo \"hello-kitty\"'])\nEXEC(command=['/usr/bin/env', 'sh', '-c', 'echo \"hello-kitty\"'])\n</code></pre>\n<h4><code>WITH()</code></h4>\n<p>Customize machine features using nspawn container settings:</p>\n<ul>\n<li><a href=\"https://www.freedesktop.org/software/systemd/man/systemd.nspawn.html\" rel=\"nofollow\">https://www.freedesktop.org/software/systemd/man/systemd.nspawn.html</a></li>\n</ul>\n<pre><code>WITH(\n    SettingName1='setting 1 value a',\n    SettingName2='setting 2 value b',\n    ...,\n)\n</code></pre>\n<h4><code>COPY()</code></h4>\n<p>Copy local resources:</p>\n<ul>\n<li>when used in <code>build.py</code>: target is in the image</li>\n<li>when used in <code>setup.py</code>: target is on the host</li>\n</ul>\n<pre><code>COPY(\"/etc\")\nCOPY(path=\"/etc\")\nCOPY(source=\"/root/input.md\", target=\"/root/output.md\")\n</code></pre>\n<h4><code>CAST()</code></h4>\n<p>Template local resources:</p>\n<ul>\n<li>when used in <code>build.py</code>: target is in the image</li>\n<li>when used in <code>setup.py</code>: target is on the host</li>\n</ul>\n<pre><code>CAST(\"/root/readme.md\", variable=\"template varialbe\", ...)\nCAST(path=\"/root/readme.md\", variable=\"template varialbe\", ...)\nCAST(source=\"/root/input.md\", target=\"/root/output.md\", variable=\"template varialbe\", ...)\n</code></pre>\n<p>Template uses <a href=\"https://jinja.palletsprojects.com/en/2.10.x/\" rel=\"nofollow\">python/jinja</a>\nformat, i.e:</p>\n<pre><code>this template variable will be substituted: {{variable}}\n</code></pre>\n<h4><code>FETCH()</code></h4>\n<p>Download and extract remote resource:</p>\n<pre><code>FETCH( # use when source and target are the same\n   url=\"http://server/package.tar.gz\", # url for remote resource\n   path=\"/common-path\", # path inside the package source and image target\n)\nFETCH( # use when source and target are different\n   url=\"http://server/package.tar.gz\", # url for remote resource\n   source=\"/package-path\", # path inside the package extract\n   target=\"/opt/resource\", # path inside the build image target\n)\n</code></pre>\n<h4><code>RUN()</code></h4>\n<p>Invoke command, with target depending on the context:</p>\n<ul>\n<li>when used in <code>build.py</code>: invoke inside the image</li>\n<li>when used in <code>setup.py</code>: invoke on the host</li>\n</ul>\n<pre><code>RUN(['/usr/bin/env', 'ls', '-las'])\nRUN(command=['/usr/bin/env', 'ls', '-las'])\n</code></pre>\n<h4><code>SH()</code></h4>\n<p>Invoke shell script, with target depending on the context:</p>\n<ul>\n<li>when used in <code>build.py</code>: invoke inside the image</li>\n<li>when used in <code>setup.py</code>: invoke on the host</li>\n</ul>\n<pre><code>SH(\"ls -las\")\nSH(script=\"ls -las\")\n</code></pre>\n<p>Note:</p>\n<ul>\n<li><code>SH(script)</code> is equivalent to <code>RUN(command=['/usr/bin/env', 'sh', '-c', script])</code></li>\n</ul>\n<h4><code>PUSH()</code></h4>\n<p>Publish image result to the declared url:</p>\n<pre><code>PUSH()\n</code></pre>\n<h4><code>MACHINE()</code></h4>\n<p>Declare machine service:</p>\n<pre><code>MACHINE('machine-name')\nMACHINE(name='machine-name')\nMACHINE(name='machine-name', template='/path/to/service/template/machine.service')\n</code></pre>\n<p>Provide inline service unit changes:</p>\n<pre><code>MACHINE(\n    name='machine-name',\n    # extra entries for [Unit] section\n    unit_conf=[\n        \"Description=hello-world\",  # override description\n    ],\n    # extra entries for [Service] section\n    service_conf=[\n        \"CPUQuota=10%\",  # throttle processor usage\n    ],\n    # extra entries for [Install] section\n    install_conf=[\n        \"WantedBy=machines.target\",  # inject unit dependency\n    ],\n)\n</code></pre>\n<p>Design custom service templates based on package-provided defaults, for example:</p>\n<ul>\n<li><a href=\"https://github.com/random-python/nspawn/tree/master/src/main/nspawn/template\" rel=\"nofollow\">https://github.com/random-python/nspawn/tree/master/src/main/nspawn/template</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6681117, "releases": {"0.6.14.dev1": [{"comment_text": "", "digests": {"md5": "9477ccea61851f4df6961b8454cf33b1", "sha256": "b2bbfbc73c7bcf344e4bd30794329957540b6f9c30bbed4305e49a98171e08c9"}, "downloads": -1, "filename": "nspawn-0.6.14.dev1.zip", "has_sig": false, "md5_digest": "9477ccea61851f4df6961b8454cf33b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 242888, "upload_time": "2020-02-22T16:33:23", "upload_time_iso_8601": "2020-02-22T16:33:23.012757Z", "url": "https://files.pythonhosted.org/packages/4f/60/76f9e5058f4faedbd680fa8f4d3308990efab8dec514932a627f4785f8b3/nspawn-0.6.14.dev1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9477ccea61851f4df6961b8454cf33b1", "sha256": "b2bbfbc73c7bcf344e4bd30794329957540b6f9c30bbed4305e49a98171e08c9"}, "downloads": -1, "filename": "nspawn-0.6.14.dev1.zip", "has_sig": false, "md5_digest": "9477ccea61851f4df6961b8454cf33b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 242888, "upload_time": "2020-02-22T16:33:23", "upload_time_iso_8601": "2020-02-22T16:33:23.012757Z", "url": "https://files.pythonhosted.org/packages/4f/60/76f9e5058f4faedbd680fa8f4d3308990efab8dec514932a627f4785f8b3/nspawn-0.6.14.dev1.zip", "yanked": false}], "timestamp": "Fri May  8 00:44:24 2020"}