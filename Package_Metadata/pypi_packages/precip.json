{"info": {"author": "Mats Rynge", "author_email": "rynge@isi.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Topic :: Utilities"], "description": "precip - Pegasus Repeatable Experiments for the Cloud in Python\n\nOverview\n\n   Precip is a flexible exeperiment management API for running experiments\n   on clouds. Precip was developed for use on FutureGrid infrastructures\n   such as OpenStack, Eucalyptus (>=3.2), Nimbus, and at the same time\n   commercial clouds such as Amazon EC2. The API allows you to easily\n   provision resources, which you can then can run commands on and copy\n   files to/from subsets of instances identified by tags. The goal of the\n   API is to be flexible and simple to use in Python scripts to control\n   your experiments.\n\n   The API does not require any special images, which makes it easy to get\n   going. Any basic Linux image will work. More complex images can be used\n   if your experiment requires so, or you can use the experiment API to\n   run bootstrap scripts on the images to install/configure required\n   software.\n\n   A concept which simplfies interacting with the API is instance tagging.\n   When you start an instance, you can add arbitrary tags to it. The\n   instance also gets a set of default tags. API methods such as running a\n   remote command, or copying files, all use tags for specify which\n   instances you want to target.\n\n   Precip also handles ssh keys and security groups automatically. This is\n   done to make sure the experiment management is not interfering with\n   your existing cloud setup. The first time you use Precip, a directory\n   will be created called ~/.precip. Inside this directory, an unique\n   account id is stored for each machine along with a ssh keypair and this\n   keypair is used for accessing instances from multiple machines or\n   accounts at the same time. On clouds which supports it, the keypair is\n   automatically registered as 'precip_id', and a 'precip' security group\n   is created. If your experiement requires more ports to be open you can\n   use the cloud interface to add those ports to the precip security\n   group.\n\n   Precip is a fairly new API, and if you have questions or suggestions\n   for improvements, please contact pegasus-support@isi.edu\n\nInstallation\n\n   Prerequisites are the Paramiko and Boto Python modules. The Python\n   source package and RPMs are available at:\n   http://pegasus.isi.edu/static/precip/software/\n\nAPI\n\n   provision(image_id, instance_type='m1.small', count=1, ebs_size=None,\n          tags=None, boot_timeout=600, boot_max_tries=3)\n          Provision a new instance. Note that this method starts the\n          provisioning cycle, but does not block for the instance to\n          finish booting. For blocking on instance creation/booting, see\n          wait()\n\n          Parameters:\n\n          + image_id - the id of the image to instanciate\n          + instance_type - the type of instance. This is infrastructure\n            specific, but usually follows the Amazon EC2 model with\n            m1.small, m1.large, and so on.\n          + count - number of instances to create\n          + ebs_size - the size in GB if you want to grow the root\n            filesystem EBS disk\n          + tags - these are used to manipulate the instance later. Use\n            this to create logical groups of your instances.\n          + boot_timeout - timeout in seconds for the instances to boot.\n            If the timeout is reached and the instance has been restarted\n            less than boot_max_tries, the instance will be restarted. If\n            the number of retries have been exhausted, an\n            ExperimentException is raised. The default is 600 seconds.\n          + boot_max_tries - the number of times booting an instance is\n            allowed to be retried. The default value is 3.\n\n   wait(tags=[])\n          Barrier for all instances matching the tags argument. This\n          method will block until the instances have finish booting and\n          are accessible via their external hostnames.\n\n          Parameters:\n\n          + tags - tags specifying the subset of instances to block on.\n            The default value is [] which means wait for all instances.\n\n   deprovision(tags)\n          Deprovisions (terminates) instances matching the tags argument\n\n          Parameters:\n\n          + tags - tags specifying the subset of instances to deprovision.\n\n   list(tags)\n          Returns a list of details about the instances matching the tags.\n          The details include instance id, hostnames, and tags.\n\n          Parameters:\n\n          + tags - tags specifying the subset of instances to give\n            information on. If you want details on all current instances,\n            use [].\n\n          Returns:\n\n          + List of dictionaries, one for each instance.\n\n   get_public_hostnames(tags)\n          Provides a list of public hostnames for the instances matching\n          the tags. The public hostnames can be provided to other\n          instances in order to let the instances know about eachother.\n\n          Parameters:\n\n          + tags - tags specifying the subset of instances.\n\n          Returns:\n\n          + A list of public hostnames\n\n   get_private_hostnames(tags)\n          Provides a list of private hostnames for the instances matching\n          the tags. The private hostnames can be provided to other\n          instances in order to let the instances know about eachother.\n\n          Parameters:\n\n          + tags - tags specifying the subset of instances.\n\n          Returns:\n\n          + A list of private hostnames\n\n   get(tags, remote_path, local_path, user=\"root\")\n          Transfers a file from a set of remote machines matching the\n          tags, and stores the file locally. If more than one instance\n          matches the tags, an instance id will be appended to the\n          local_path.\n\n          Parameters:\n\n          + tags - these are used to manipulate the instance later. Use\n            this to create logical groups of your instances.\n          + remote_path - the path of the file on the remote instance\n          + local_path - the local path to tranfer to\n          + user - remote user. If not specified, the default is 'root'\n\n   put(tags, local_path, remote_path, user=\"root\")\n          Transfers a local file to a set of remote machines matching the\n          tags.\n\n          Parameters:\n\n          + tags - these are used to manipulate the instance later. Use\n            this to create logical groups of your instances.\n          + local_path - the local path to tranfer from\n          + remote_path - the path on the remote instance to store the\n            file as\n          + user - remote user. If not specified, the default is 'root'\n\n   run(tags, cmd, user=\"root\", check_exit_code=True,\n          output_base_name=None)\n          Runs a command on the instances matches the tags. The commands\n          are run in series, on one instance after the other.\n\n          Parameters:\n\n          + tags - these are used to manipulate the instance later. Use\n            this to create logical groups of your instances.\n          + cmd - the command to run\n          + user - remote user. If not specified, the default is 'root'.\n            If you need to run commands as another user, you will have to\n            make sure that user accepts the ssh key in ~/.precip/\n          + check_exit_code - If set to True (default), commands returning\n            non-zero exit codes will result in a ExperimentException being\n            raised.\n          + output_base_name - By default, the stdout and stderr of the\n            remote command is looked in the PRECIP stdout log. Giving a\n            base filename (.out and .err will be appended automatically)\n            will redirect the stdout and stderr to files instead.\n\n          Returns:\n\n          + A list of lists, containing exit_code[], stdout[] and stderr[]\n            for the commands run\n\n   copy_and_run(tags, local_script, args=[], user=\"root\",\n          check_exit_code=True)\n          Copies a script from the local machine to the remote instances\n          and executes the script. The script is run in series, on one\n          instance after the other.\n\n          Parameters:\n\n          + tags - these are used to manipulate the instance later. Use\n            this to create logical groups of your instances.\n          + local_script - the local script to run\n          + args - arguments for the script\n          + user - remote user. If not specified, the default is 'root'.\n            If you need to run commands as another user, you will have to\n            make sure that user accepts the ssh key in ~/.precip/\n          + check_exit_code - If set to True (default), commands returning\n            non-zero exit codes will result in a ExperimentException being\n            raised.\n\n          Returns:\n\n          + A list of lists, containing exit_code[], stdout[] and stderr[]\n            for the commands run\n\n   The basic methods above are standard across all the Cloud\n   infrastructures. What is different is the constructors as each\n   infrastructure handles initialization a little bit different. For\n   example, to create a new OpenStack using the EC2_* environment provided\n   automatically by FutureGrid:\n\n    exp = OpenStackExperiment(\n            os.environ['EC2_URL'],\n            os.environ['EC2_ACCESS_KEY'],\n            os.environ['EC2_SECRET_KEY'])\n\n\n   i For Amazon EC2, you have to specify region, endpoint, and\n   access/secret keys. Note that it is not required to use environment\n   variables for your credentials, but seperating the crenditals from the\n   code prevents the credentials from being check in to source control\n   systems.\n\n    exp = EC2Experiment(\n            \"us-west-2c\",\n            \"ec2.us-west-2.amazonaws.com\",\n            os.environ['AMAZON_EC2_ACCESS_KEY'],\n            os.environ['AMAZON_EC2_SECRET_KEY'])\n\n\nExamples\n\nHello World\n\n\n#!/usr/bin/python\n\nimport os\nimport time\nfrom pprint import pprint\n\nfrom precip import *\n\nexp = None\n\n# Use try/except liberally in your experiments - the api is set up to\n# raise ExperimentException on most errors\ntry:\n\n    # Create a new OpenStack based experiment. In this case we pick\n    # up endpoints and access/secret cloud keys from the environment\n    # as exposing those is the common setup on FutureGrid\n    exp = OpenStackExperiment(\n            os.environ['EC2_URL'],\n            os.environ['EC2_ACCESS_KEY'],\n            os.environ['EC2_SECRET_KEY'])\n\n    # Provision an instance based on the ami-0000004c. Note that tags are\n    # used throughout the api to identify and manipulate instances. You\n    # can give an instance an arbitrary number of tags.\n    exp.provision(\"ami-0000004c\", tags=[\"test1\"], count=1)\n\n    # Wait for all instances to boot and become accessible. The provision\n    # method only starts the provisioning, and can be used to start a large\n    # number of instances at the same time. The wait method provides a\n    # barrier to when it is safe to start the actual experiment.\n    exp.wait()\n\n    # Print out the details of the instance. The details include instance id,\n    # private and public hostnames, and tags both defined by you and some\n    # added by the api\n    pprint(exp.list())\n\n    # Run a command on the instances having the \"test1\" tag. In this case we\n    # only have one instance, but if you had multiple instances with that\n    # tag, the command would run on each one.\n    exp.run([\"test1\"], \"echo 'Hello world from a experiment instance'\")\n\nexcept ExperimentException as e:\n    # This is the default exception for most errors in the api\n    print \"ERROR: %s\" % e\n\nfinally:\n    # Be sure to always deprovision the instances we have started. Putting\n    # the deprovision call under finally: make the deprovisioning happening\n    # even in the case of failure.\n    if exp is not None:\n        exp.deprovision()\n\n\nResources from mulitple infrastructures\n\n\n#!/usr/bin/python\n\nimport os\nimport time\n\nfrom precip import *\n\nec2 = None\nfg = None\n\ntry:\n\n    # This example show how to run an experiment between Amazon EC2\n    # and an OpenStack resource on FutureGrid. The setup is pretty\n    # similar to the HelloWorld example, except that we now have to\n    # experiment to handle. The first step is to get the experiments\n    # initialized. Note that it is not required to use environment\n    # variables for your credentials, but seperating the crenditals\n    # from the code prevents the credentials from being check in to\n    # source control systems.\n\n    ec2 = EC2Experiment(\n            \"us-west-2c\",\n            \"ec2.us-west-2.amazonaws.com\",\n            os.environ['AMAZON_EC2_ACCESS_KEY'],\n            os.environ['AMAZON_EC2_SECRET_KEY'])\n\n    fg = OpenStackExperiment(\n            os.environ['EC2_URL'],\n            os.environ['EC2_ACCESS_KEY'],\n            os.environ['EC2_SECRET_KEY'])\n\n    # Next we provision two instances, one on Amazon EC2 and one of\n    # FutureGrid\n    ec2.provision(\"ami-8a1e92ba\", tags=[\"id=ec2_1\"])\n    fg.provision(\"ami-0000004c\", tags=[\"id=fg_1\"])\n\n    # Wait for all instances to boot and become accessible. The provision\n    # method only starts the provisioning, and can be used to start a large\n    # number of instances at the same time. The wait method provides a\n    # barrier to when it is safe to start the actual experiment.\n    ec2.wait([])\n    fg.wait([])\n\n    # Run commands on the remote instances\n    ec2.run([], \"echo 'Hello world Amazon EC2'\")\n    fg.run([], \"echo 'Hello world FutureGrid OpenStack'\")\n\nexcept ExperimentException as e:\n    # This is the default exception for most errors in the api\n    print \"ERROR: %s\" % e\n    raise e\nfinally:\n    # Be sure to always deprovision the instances we have started. Putting\n    # the deprovision call under finally: make the deprovisioning happening\n    # even in the case of failure.\n    if ec2 is not None:\n        ec2.deprovision([])\n    if fg is not None:\n        fg.deprovision([])\n\n\nSetting up a Condor pool and run a Pegasus workflow\n\n   This is a more complex example in which a small Condor pool is set up\n   and then a Pegasus workflow is run and benchmarked. The Precip script\n   is similar to what we have seen before, but it has two groups of\n   instances, one master acting as the Condor central manager, and a set\n   of Condor worker nodes.\n\n#!/usr/bin/python\n\nimport os\nimport time\n\nfrom precip import *\n\ntry:\n\n    # This experiment is targeted to run on OpenStack\n    exp = OpenStackExperiment(\n            os.environ['OPENSTACK_URL'],\n            os.environ['OPENSTACK_ACCESS_KEY'],\n            os.environ['OPENSTACK_SECRET_KEY'])\n\n    # We need a master Condor node and a set of workers\n    exp.provision(\"ami-0000004c\", tags=[\"master\"],\n                  instance_type=\"m1.large\")\n    exp.provision(\"ami-0000004c\", tags=[\"compute\"],\n                  instance_type=\"m1.large\", count=2)\n    exp.wait()\n\n    # The workers need to know what the private hostname of the master is\n    master_priv_addr = exp.get_private_hostnames([\"master\"])[0]\n\n    # Bootstrap the instances. This includes installing Condor and Pegasus,\n    # downloading and settup the workflow.\n    exp.copy_and_run([\"master\"], \"./bootstrap.sh\")\n    exp.copy_and_run([\"compute\"], \"./bootstrap.sh\", args=[master_priv_addr])\n\n    # Give the workers some time to register with the Condor central\n    # manager\n    time.sleep(60)\n\n    # Make sure Condor came up correctly\n    exp.run([\"master\"], \"condor_status\")\n\n    # Run the workflow\n    exp.run([\"master\"], \"cd ~/montage && ./run-montage\", user=\"wf\")\n\n    # At this point, in a real experiment, you could for example provision\n    # more resources and run the workflow again, or run the workflow with\n    # different parameters/settings.\n\nexcept ExperimentException as e:\n    print \"ERROR: %s\" % e\nfinally:\n    # always want to clean up all the instances we have started\n    exp.deprovision([])\n\n\n   We also need a bootstrap.sh which sets up the instances:\n\n#!/bin/bash\n\n# This script bootstraps a basic RHEL6 instance to be have working\n# Condor and Pegasus installs. The script takes one optional\n# argument which is the address of the master instance (central\n# manager in Condor terminology). If the argument is not given,\n# the script sets up the instance to be the master.\n\nMASTER_ADDR=$1\n\n# for images with condor already installed, stop condor\n/etc/init.d/condor stop >/dev/null 2>&1 || /bin/true\n\n# correct clock is important for most projects\nyum -q -y install ntpdate\n/etc/init.d/ntpdate start\n\n# Add the EPEL repository\nwget -nv http://mirror.utexas.edu/epel/6/x86_64/epel-release-6-7.noarch.rpm\nrpm -Uh epel-release-*.noarch.rpm\n\n# Add the Condor repository\ncat >/etc/yum.repos.d/condor.repo <<EOF\n[condor-stable]\nname=Condor Stable RPM Repository for Redhat Enterprise Linux 6\nbaseurl=http://www.cs.wisc.edu/condor/yum/stable/rhel6\nenabled=1\ngpgcheck=0\nEOF\n\n# Add the Pegasus repository\ncat >/etc/yum.repos.d/pegasus.repo <<EOF\n[Pegasus]\nname=Pegasus\nbaseurl=http://download.pegasus.isi.edu/wms/download/rhel/6/x86_64\ngpgcheck=0\nenabled=1\npriority=50\nEOF\n\n# Install required software\nyum -q -y clean all\nyum -q -y install gcc gcc-g++ gcc-gfortran make gawk bison diffutils \\\n                  java-1.7.0-openjdk.x86_64 \\\n                  java-1.7.0-openjdk-devel.x86_64 \\\n                  ganglia-gmond condor pegasus\n\n# Clear the Condor local config file - we use config.d instead\ncat /dev/null >/etc/condor/condor_config.local\n\n# Common Condor config between master and workers\ncat >/etc/condor/config.d/50-main.conf <<EOF\n\nCONDOR_HOST = $MASTER_ADDR\n\nFILESYSTEM_DOMAIN = \\$(FULL_HOSTNAME)\nTRUST_UID_DOMAIN = True\n\nDAEMON_LIST = MASTER, STARTD\n\n# security\nALLOW_WRITE = 10.*\nALLOW_READ = \\$(ALLOW_WRITE)\n\n# default policy\nSTART = True\nSUSPEND = False\nCONTINUE = True\nPREEMPT = False\nKILL = False\n\nEOF\n\n# Master gets extra packages/configs\nif [ \"x$MASTER_ADDR\" = \"x\" ]; then\n    yum -q -y install ganglia-gmetad ganglia-web\n\n    cat >/etc/condor/config.d/90-master.conf <<EOF\nCONDOR_HOST = \\$(FULL_HOSTNAME)\nDAEMON_LIST = MASTER, COLLECTOR, NEGOTIATOR, SCHEDD\nEOF\nfi\n\n# Restarting daemons\n/etc/init.d/condor start\n\n# User to run the workflows as, and allow the experiment management\n# ssh key to authenticate\nadduser wf\nmkdir -p ~wf/.ssh\ncp ~/.ssh/authorized_keys ~wf/.ssh/\nchown -R wf: ~wf/.ssh\n\n# Master is the submit host, so deploy our workflow on it\nif [ \"x$MASTER_ADDR\" = \"x\" ]; then\n    # install the workflow tarball and wait script\n    cd ~wf\n    wget -q http://pegasus.isi.edu/static/precip/wf-experiment/montage.tar.gz\n    tar xzf montage.tar.gz\n    chown -R wf: montage*\nfi", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pegasus.isi.edu/precip", "keywords": null, "license": "Apache2", "maintainer": null, "maintainer_email": null, "name": "precip", "package_url": "https://pypi.org/project/precip/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/precip/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pegasus.isi.edu/precip"}, "release_url": "https://pypi.org/project/precip/0.3/", "requires_dist": null, "requires_python": null, "summary": "Pegasus Repeatable Experiments for the Cloud in Python - a simple module for setting up repeatable computer science experiments in the cloud", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            precip - Pegasus Repeatable Experiments for the Cloud in Python<br><br>Overview<br><br>   Precip is a flexible exeperiment management API for running experiments<br>   on clouds. Precip was developed for use on FutureGrid infrastructures<br>   such as OpenStack, Eucalyptus (&gt;=3.2), Nimbus, and at the same time<br>   commercial clouds such as Amazon EC2. The API allows you to easily<br>   provision resources, which you can then can run commands on and copy<br>   files to/from subsets of instances identified by tags. The goal of the<br>   API is to be flexible and simple to use in Python scripts to control<br>   your experiments.<br><br>   The API does not require any special images, which makes it easy to get<br>   going. Any basic Linux image will work. More complex images can be used<br>   if your experiment requires so, or you can use the experiment API to<br>   run bootstrap scripts on the images to install/configure required<br>   software.<br><br>   A concept which simplfies interacting with the API is instance tagging.<br>   When you start an instance, you can add arbitrary tags to it. The<br>   instance also gets a set of default tags. API methods such as running a<br>   remote command, or copying files, all use tags for specify which<br>   instances you want to target.<br><br>   Precip also handles ssh keys and security groups automatically. This is<br>   done to make sure the experiment management is not interfering with<br>   your existing cloud setup. The first time you use Precip, a directory<br>   will be created called ~/.precip. Inside this directory, an unique<br>   account id is stored for each machine along with a ssh keypair and this<br>   keypair is used for accessing instances from multiple machines or<br>   accounts at the same time. On clouds which supports it, the keypair is<br>   automatically registered as 'precip_id', and a 'precip' security group<br>   is created. If your experiement requires more ports to be open you can<br>   use the cloud interface to add those ports to the precip security<br>   group.<br><br>   Precip is a fairly new API, and if you have questions or suggestions<br>   for improvements, please contact pegasus-support@isi.edu<br><br>Installation<br><br>   Prerequisites are the Paramiko and Boto Python modules. The Python<br>   source package and RPMs are available at:<br>   http://pegasus.isi.edu/static/precip/software/<br><br>API<br><br>   provision(image_id, instance_type='m1.small', count=1, ebs_size=None,<br>          tags=None, boot_timeout=600, boot_max_tries=3)<br>          Provision a new instance. Note that this method starts the<br>          provisioning cycle, but does not block for the instance to<br>          finish booting. For blocking on instance creation/booting, see<br>          wait()<br><br>          Parameters:<br><br>          + image_id - the id of the image to instanciate<br>          + instance_type - the type of instance. This is infrastructure<br>            specific, but usually follows the Amazon EC2 model with<br>            m1.small, m1.large, and so on.<br>          + count - number of instances to create<br>          + ebs_size - the size in GB if you want to grow the root<br>            filesystem EBS disk<br>          + tags - these are used to manipulate the instance later. Use<br>            this to create logical groups of your instances.<br>          + boot_timeout - timeout in seconds for the instances to boot.<br>            If the timeout is reached and the instance has been restarted<br>            less than boot_max_tries, the instance will be restarted. If<br>            the number of retries have been exhausted, an<br>            ExperimentException is raised. The default is 600 seconds.<br>          + boot_max_tries - the number of times booting an instance is<br>            allowed to be retried. The default value is 3.<br><br>   wait(tags=[])<br>          Barrier for all instances matching the tags argument. This<br>          method will block until the instances have finish booting and<br>          are accessible via their external hostnames.<br><br>          Parameters:<br><br>          + tags - tags specifying the subset of instances to block on.<br>            The default value is [] which means wait for all instances.<br><br>   deprovision(tags)<br>          Deprovisions (terminates) instances matching the tags argument<br><br>          Parameters:<br><br>          + tags - tags specifying the subset of instances to deprovision.<br><br>   list(tags)<br>          Returns a list of details about the instances matching the tags.<br>          The details include instance id, hostnames, and tags.<br><br>          Parameters:<br><br>          + tags - tags specifying the subset of instances to give<br>            information on. If you want details on all current instances,<br>            use [].<br><br>          Returns:<br><br>          + List of dictionaries, one for each instance.<br><br>   get_public_hostnames(tags)<br>          Provides a list of public hostnames for the instances matching<br>          the tags. The public hostnames can be provided to other<br>          instances in order to let the instances know about eachother.<br><br>          Parameters:<br><br>          + tags - tags specifying the subset of instances.<br><br>          Returns:<br><br>          + A list of public hostnames<br><br>   get_private_hostnames(tags)<br>          Provides a list of private hostnames for the instances matching<br>          the tags. The private hostnames can be provided to other<br>          instances in order to let the instances know about eachother.<br><br>          Parameters:<br><br>          + tags - tags specifying the subset of instances.<br><br>          Returns:<br><br>          + A list of private hostnames<br><br>   get(tags, remote_path, local_path, user=\"root\")<br>          Transfers a file from a set of remote machines matching the<br>          tags, and stores the file locally. If more than one instance<br>          matches the tags, an instance id will be appended to the<br>          local_path.<br><br>          Parameters:<br><br>          + tags - these are used to manipulate the instance later. Use<br>            this to create logical groups of your instances.<br>          + remote_path - the path of the file on the remote instance<br>          + local_path - the local path to tranfer to<br>          + user - remote user. If not specified, the default is 'root'<br><br>   put(tags, local_path, remote_path, user=\"root\")<br>          Transfers a local file to a set of remote machines matching the<br>          tags.<br><br>          Parameters:<br><br>          + tags - these are used to manipulate the instance later. Use<br>            this to create logical groups of your instances.<br>          + local_path - the local path to tranfer from<br>          + remote_path - the path on the remote instance to store the<br>            file as<br>          + user - remote user. If not specified, the default is 'root'<br><br>   run(tags, cmd, user=\"root\", check_exit_code=True,<br>          output_base_name=None)<br>          Runs a command on the instances matches the tags. The commands<br>          are run in series, on one instance after the other.<br><br>          Parameters:<br><br>          + tags - these are used to manipulate the instance later. Use<br>            this to create logical groups of your instances.<br>          + cmd - the command to run<br>          + user - remote user. If not specified, the default is 'root'.<br>            If you need to run commands as another user, you will have to<br>            make sure that user accepts the ssh key in ~/.precip/<br>          + check_exit_code - If set to True (default), commands returning<br>            non-zero exit codes will result in a ExperimentException being<br>            raised.<br>          + output_base_name - By default, the stdout and stderr of the<br>            remote command is looked in the PRECIP stdout log. Giving a<br>            base filename (.out and .err will be appended automatically)<br>            will redirect the stdout and stderr to files instead.<br><br>          Returns:<br><br>          + A list of lists, containing exit_code[], stdout[] and stderr[]<br>            for the commands run<br><br>   copy_and_run(tags, local_script, args=[], user=\"root\",<br>          check_exit_code=True)<br>          Copies a script from the local machine to the remote instances<br>          and executes the script. The script is run in series, on one<br>          instance after the other.<br><br>          Parameters:<br><br>          + tags - these are used to manipulate the instance later. Use<br>            this to create logical groups of your instances.<br>          + local_script - the local script to run<br>          + args - arguments for the script<br>          + user - remote user. If not specified, the default is 'root'.<br>            If you need to run commands as another user, you will have to<br>            make sure that user accepts the ssh key in ~/.precip/<br>          + check_exit_code - If set to True (default), commands returning<br>            non-zero exit codes will result in a ExperimentException being<br>            raised.<br><br>          Returns:<br><br>          + A list of lists, containing exit_code[], stdout[] and stderr[]<br>            for the commands run<br><br>   The basic methods above are standard across all the Cloud<br>   infrastructures. What is different is the constructors as each<br>   infrastructure handles initialization a little bit different. For<br>   example, to create a new OpenStack using the EC2_* environment provided<br>   automatically by FutureGrid:<br><br>    exp = OpenStackExperiment(<br>            os.environ['EC2_URL'],<br>            os.environ['EC2_ACCESS_KEY'],<br>            os.environ['EC2_SECRET_KEY'])<br><br><br>   i For Amazon EC2, you have to specify region, endpoint, and<br>   access/secret keys. Note that it is not required to use environment<br>   variables for your credentials, but seperating the crenditals from the<br>   code prevents the credentials from being check in to source control<br>   systems.<br><br>    exp = EC2Experiment(<br>            \"us-west-2c\",<br>            \"ec2.us-west-2.amazonaws.com\",<br>            os.environ['AMAZON_EC2_ACCESS_KEY'],<br>            os.environ['AMAZON_EC2_SECRET_KEY'])<br><br><br>Examples<br><br>Hello World<br><br><br>#!/usr/bin/python<br><br>import os<br>import time<br>from pprint import pprint<br><br>from precip import *<br><br>exp = None<br><br># Use try/except liberally in your experiments - the api is set up to<br># raise ExperimentException on most errors<br>try:<br><br>    # Create a new OpenStack based experiment. In this case we pick<br>    # up endpoints and access/secret cloud keys from the environment<br>    # as exposing those is the common setup on FutureGrid<br>    exp = OpenStackExperiment(<br>            os.environ['EC2_URL'],<br>            os.environ['EC2_ACCESS_KEY'],<br>            os.environ['EC2_SECRET_KEY'])<br><br>    # Provision an instance based on the ami-0000004c. Note that tags are<br>    # used throughout the api to identify and manipulate instances. You<br>    # can give an instance an arbitrary number of tags.<br>    exp.provision(\"ami-0000004c\", tags=[\"test1\"], count=1)<br><br>    # Wait for all instances to boot and become accessible. The provision<br>    # method only starts the provisioning, and can be used to start a large<br>    # number of instances at the same time. The wait method provides a<br>    # barrier to when it is safe to start the actual experiment.<br>    exp.wait()<br><br>    # Print out the details of the instance. The details include instance id,<br>    # private and public hostnames, and tags both defined by you and some<br>    # added by the api<br>    pprint(exp.list())<br><br>    # Run a command on the instances having the \"test1\" tag. In this case we<br>    # only have one instance, but if you had multiple instances with that<br>    # tag, the command would run on each one.<br>    exp.run([\"test1\"], \"echo 'Hello world from a experiment instance'\")<br><br>except ExperimentException as e:<br>    # This is the default exception for most errors in the api<br>    print \"ERROR: %s\" % e<br><br>finally:<br>    # Be sure to always deprovision the instances we have started. Putting<br>    # the deprovision call under finally: make the deprovisioning happening<br>    # even in the case of failure.<br>    if exp is not None:<br>        exp.deprovision()<br><br><br>Resources from mulitple infrastructures<br><br><br>#!/usr/bin/python<br><br>import os<br>import time<br><br>from precip import *<br><br>ec2 = None<br>fg = None<br><br>try:<br><br>    # This example show how to run an experiment between Amazon EC2<br>    # and an OpenStack resource on FutureGrid. The setup is pretty<br>    # similar to the HelloWorld example, except that we now have to<br>    # experiment to handle. The first step is to get the experiments<br>    # initialized. Note that it is not required to use environment<br>    # variables for your credentials, but seperating the crenditals<br>    # from the code prevents the credentials from being check in to<br>    # source control systems.<br><br>    ec2 = EC2Experiment(<br>            \"us-west-2c\",<br>            \"ec2.us-west-2.amazonaws.com\",<br>            os.environ['AMAZON_EC2_ACCESS_KEY'],<br>            os.environ['AMAZON_EC2_SECRET_KEY'])<br><br>    fg = OpenStackExperiment(<br>            os.environ['EC2_URL'],<br>            os.environ['EC2_ACCESS_KEY'],<br>            os.environ['EC2_SECRET_KEY'])<br><br>    # Next we provision two instances, one on Amazon EC2 and one of<br>    # FutureGrid<br>    ec2.provision(\"ami-8a1e92ba\", tags=[\"id=ec2_1\"])<br>    fg.provision(\"ami-0000004c\", tags=[\"id=fg_1\"])<br><br>    # Wait for all instances to boot and become accessible. The provision<br>    # method only starts the provisioning, and can be used to start a large<br>    # number of instances at the same time. The wait method provides a<br>    # barrier to when it is safe to start the actual experiment.<br>    ec2.wait([])<br>    fg.wait([])<br><br>    # Run commands on the remote instances<br>    ec2.run([], \"echo 'Hello world Amazon EC2'\")<br>    fg.run([], \"echo 'Hello world FutureGrid OpenStack'\")<br><br>except ExperimentException as e:<br>    # This is the default exception for most errors in the api<br>    print \"ERROR: %s\" % e<br>    raise e<br>finally:<br>    # Be sure to always deprovision the instances we have started. Putting<br>    # the deprovision call under finally: make the deprovisioning happening<br>    # even in the case of failure.<br>    if ec2 is not None:<br>        ec2.deprovision([])<br>    if fg is not None:<br>        fg.deprovision([])<br><br><br>Setting up a Condor pool and run a Pegasus workflow<br><br>   This is a more complex example in which a small Condor pool is set up<br>   and then a Pegasus workflow is run and benchmarked. The Precip script<br>   is similar to what we have seen before, but it has two groups of<br>   instances, one master acting as the Condor central manager, and a set<br>   of Condor worker nodes.<br><br>#!/usr/bin/python<br><br>import os<br>import time<br><br>from precip import *<br><br>try:<br><br>    # This experiment is targeted to run on OpenStack<br>    exp = OpenStackExperiment(<br>            os.environ['OPENSTACK_URL'],<br>            os.environ['OPENSTACK_ACCESS_KEY'],<br>            os.environ['OPENSTACK_SECRET_KEY'])<br><br>    # We need a master Condor node and a set of workers<br>    exp.provision(\"ami-0000004c\", tags=[\"master\"],<br>                  instance_type=\"m1.large\")<br>    exp.provision(\"ami-0000004c\", tags=[\"compute\"],<br>                  instance_type=\"m1.large\", count=2)<br>    exp.wait()<br><br>    # The workers need to know what the private hostname of the master is<br>    master_priv_addr = exp.get_private_hostnames([\"master\"])[0]<br><br>    # Bootstrap the instances. This includes installing Condor and Pegasus,<br>    # downloading and settup the workflow.<br>    exp.copy_and_run([\"master\"], \"./bootstrap.sh\")<br>    exp.copy_and_run([\"compute\"], \"./bootstrap.sh\", args=[master_priv_addr])<br><br>    # Give the workers some time to register with the Condor central<br>    # manager<br>    time.sleep(60)<br><br>    # Make sure Condor came up correctly<br>    exp.run([\"master\"], \"condor_status\")<br><br>    # Run the workflow<br>    exp.run([\"master\"], \"cd ~/montage &amp;&amp; ./run-montage\", user=\"wf\")<br><br>    # At this point, in a real experiment, you could for example provision<br>    # more resources and run the workflow again, or run the workflow with<br>    # different parameters/settings.<br><br>except ExperimentException as e:<br>    print \"ERROR: %s\" % e<br>finally:<br>    # always want to clean up all the instances we have started<br>    exp.deprovision([])<br><br><br>   We also need a bootstrap.sh which sets up the instances:<br><br>#!/bin/bash<br><br># This script bootstraps a basic RHEL6 instance to be have working<br># Condor and Pegasus installs. The script takes one optional<br># argument which is the address of the master instance (central<br># manager in Condor terminology). If the argument is not given,<br># the script sets up the instance to be the master.<br><br>MASTER_ADDR=$1<br><br># for images with condor already installed, stop condor<br>/etc/init.d/condor stop &gt;/dev/null 2&gt;&amp;1 || /bin/true<br><br># correct clock is important for most projects<br>yum -q -y install ntpdate<br>/etc/init.d/ntpdate start<br><br># Add the EPEL repository<br>wget -nv http://mirror.utexas.edu/epel/6/x86_64/epel-release-6-7.noarch.rpm<br>rpm -Uh epel-release-*.noarch.rpm<br><br># Add the Condor repository<br>cat &gt;/etc/yum.repos.d/condor.repo &lt;&lt;EOF<br>[condor-stable]<br>name=Condor Stable RPM Repository for Redhat Enterprise Linux 6<br>baseurl=http://www.cs.wisc.edu/condor/yum/stable/rhel6<br>enabled=1<br>gpgcheck=0<br>EOF<br><br># Add the Pegasus repository<br>cat &gt;/etc/yum.repos.d/pegasus.repo &lt;&lt;EOF<br>[Pegasus]<br>name=Pegasus<br>baseurl=http://download.pegasus.isi.edu/wms/download/rhel/6/x86_64<br>gpgcheck=0<br>enabled=1<br>priority=50<br>EOF<br><br># Install required software<br>yum -q -y clean all<br>yum -q -y install gcc gcc-g++ gcc-gfortran make gawk bison diffutils \\<br>                  java-1.7.0-openjdk.x86_64 \\<br>                  java-1.7.0-openjdk-devel.x86_64 \\<br>                  ganglia-gmond condor pegasus<br><br># Clear the Condor local config file - we use config.d instead<br>cat /dev/null &gt;/etc/condor/condor_config.local<br><br># Common Condor config between master and workers<br>cat &gt;/etc/condor/config.d/50-main.conf &lt;&lt;EOF<br><br>CONDOR_HOST = $MASTER_ADDR<br><br>FILESYSTEM_DOMAIN = \\$(FULL_HOSTNAME)<br>TRUST_UID_DOMAIN = True<br><br>DAEMON_LIST = MASTER, STARTD<br><br># security<br>ALLOW_WRITE = 10.*<br>ALLOW_READ = \\$(ALLOW_WRITE)<br><br># default policy<br>START = True<br>SUSPEND = False<br>CONTINUE = True<br>PREEMPT = False<br>KILL = False<br><br>EOF<br><br># Master gets extra packages/configs<br>if [ \"x$MASTER_ADDR\" = \"x\" ]; then<br>    yum -q -y install ganglia-gmetad ganglia-web<br><br>    cat &gt;/etc/condor/config.d/90-master.conf &lt;&lt;EOF<br>CONDOR_HOST = \\$(FULL_HOSTNAME)<br>DAEMON_LIST = MASTER, COLLECTOR, NEGOTIATOR, SCHEDD<br>EOF<br>fi<br><br># Restarting daemons<br>/etc/init.d/condor start<br><br># User to run the workflows as, and allow the experiment management<br># ssh key to authenticate<br>adduser wf<br>mkdir -p ~wf/.ssh<br>cp ~/.ssh/authorized_keys ~wf/.ssh/<br>chown -R wf: ~wf/.ssh<br><br># Master is the submit host, so deploy our workflow on it<br>if [ \"x$MASTER_ADDR\" = \"x\" ]; then<br>    # install the workflow tarball and wait script<br>    cd ~wf<br>    wget -q http://pegasus.isi.edu/static/precip/wf-experiment/montage.tar.gz<br>    tar xzf montage.tar.gz<br>    chown -R wf: montage*<br>fi\n          </div>"}, "last_serial": 819760, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "58943a573a565ae382d3f9521708b90d", "sha256": "512bebb0a03b04aa629d8b7658371b05523a7e8961c30de09a5d1afc1fa3a401"}, "downloads": -1, "filename": "precip-0.1.tar.gz", "has_sig": false, "md5_digest": "58943a573a565ae382d3f9521708b90d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13942, "upload_time": "2012-11-26T15:51:04", "upload_time_iso_8601": "2012-11-26T15:51:04.894066Z", "url": "https://files.pythonhosted.org/packages/1a/a4/f7c519e2d7751ec90f3543f76ef9fbe51e810f930e9e71f687b88f99a359/precip-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d177d95166a93d29d2392555e6ec6308", "sha256": "9718e32da6f87e7217716f665ac22d466d19a671ba067b989abea83843af813c"}, "downloads": -1, "filename": "precip-0.2.tar.gz", "has_sig": false, "md5_digest": "d177d95166a93d29d2392555e6ec6308", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15016, "upload_time": "2013-03-22T18:10:23", "upload_time_iso_8601": "2013-03-22T18:10:23.997491Z", "url": "https://files.pythonhosted.org/packages/6e/97/920df05dcd38ba76b2f0c6032c76ba1b5779a8970e050828599dc75ef67d/precip-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "13dddb65c3f6c19c9bd3176bd68c5b69", "sha256": "3859ab09fc0dc031cfc48a7997612915c7232fad9663baeb3d0fa9a1e0aaa88d"}, "downloads": -1, "filename": "precip-0.3.tar.gz", "has_sig": false, "md5_digest": "13dddb65c3f6c19c9bd3176bd68c5b69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16309, "upload_time": "2013-07-19T22:06:21", "upload_time_iso_8601": "2013-07-19T22:06:21.968775Z", "url": "https://files.pythonhosted.org/packages/95/07/527fd7e905974b8d5eb940bcff82bc44ed11002f199a61b2c6de7241b72b/precip-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "13dddb65c3f6c19c9bd3176bd68c5b69", "sha256": "3859ab09fc0dc031cfc48a7997612915c7232fad9663baeb3d0fa9a1e0aaa88d"}, "downloads": -1, "filename": "precip-0.3.tar.gz", "has_sig": false, "md5_digest": "13dddb65c3f6c19c9bd3176bd68c5b69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16309, "upload_time": "2013-07-19T22:06:21", "upload_time_iso_8601": "2013-07-19T22:06:21.968775Z", "url": "https://files.pythonhosted.org/packages/95/07/527fd7e905974b8d5eb940bcff82bc44ed11002f199a61b2c6de7241b72b/precip-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:06 2020"}