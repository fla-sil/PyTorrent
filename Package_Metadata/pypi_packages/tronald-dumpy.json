{"info": {"author": "gushka", "author_email": "guskhka@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# TronaldDump API Wrapper\n\n[Tronalddump.io](https://www.tronalddump.io/) is a free API and web archive for the dumbest things Donald Trump has ever said ...\n\nYou might want to check out the [documentation](https://docs.tronalddump.io/) for the API before working with it.\n\n## Description\n\nThe package consists of two main modules:\n- `api`: tools for accessing the API.\n- `parse`: tools for parsing retieved data.\n\n## Installation\n\nEnsure you have Python 3 and the package manager `pip` installed.\n\nInstall using pip:\n```console\n$ pip3 install tronalddumpy\n```\n\nor, you can build the latest version from source:\n```console\n$ git clone https://github.com/Gushka/tronalddump-python.git\n$ cd tronalddump-python/\n$ python3 setup.py install\n```\n\n## Basic usage\n\nImport the main modules and create a client:\n\n```python\nfrom tronalddump import api, parse\n\nclient = api.TronaldDumpAPI()\n```\nNow to access any API method we will use this client.\n\nFor example, let us get a random quote:\n\n```python\n>>> resp = client.random_quote()\n>>> resp\n<TronaldDumpResponse: 'https://www.tronalddump.io/random/quote'>\n# Get the response data:\n>>> resp.data\n{JSON}\n# Get the URL:\n>>> resp.url\n'https://www.tronalddump.io/random/quote'\n```\n\n## Parsing the JSON data\n\nUsing the TronaldDump module you also can get specific values from the API response just as easy.\n\nCreate a Parser using the JSON file-object we obtained earlier:\n\n```python\n>>> parsed = parse.Parser(resp)\n```\nNow we can extract all kinds of data from the JSON based on what the initial response type was.\n\n```python\n# Retrieve value of a quote:\n>>> parsed.value()\n\"Money was never a big motivation for me, except as a way to keep score.\"\n# Retrieve the date it was written online:\n>>> parsed.date_appeared()\ndatetime.date(2014, 9, 14)\n```\n\nThere's also a function to print into the console formatted JSON response.\n\n__Use it only for the debugging purposes.__\n\n```\n>>> parsed.printout()\n```\n\n## Documentation\n\n### *TronaldDumpAPI* class:\n\n### Tags\n\n#### **all_tags**\nRetrieves all existing tags from the API.\n```python\nTronaldDumpAPI().all_tags()\n```\n#### **find_tag**\nFinds a tag by its value. Given paramaters will be capitalized for the proper search indexing.\n```python\nTronaldDumpAPI().find_tag(value)\n```\n### Quotes\n\n#### **random_quote**\nRetrieve a random quote from Troland Dump.\n```python\nTronaldDumpAPI().random_quote()\n```\n\n#### **random_meme**\nRetrieve a random meme image with a quote Troland Dump.\n```python\nTronaldDumpAPI().random_meme(output_dir, filename=\"randommeme.png\", force_write=True)\n```\n- `output_dir`: The directory where to store the image.\n- `filename`: The name for the downloaded file. By default it's *randommeme.png*\n- `force_write`: Whether to overwrite already existing file or not. By default is set to _True_\n\n#### **search_quote**\nSearch for a quote by a query or tag. Returns one-page answer. You must pick either `query` or `tag` parameter.\nThey are interchangeble and only one may be used at a time.\n\n**TO BE IMPROVED:** For now returns only the first page of a search answer.\n\n```python\nTronaldDumpAPI().search_quote(query=None, tag=None, page=0)\n```\n- `query`: The string which will be searched for. \n- `tag`: The tag which will be searched for. \n- `page`: The number of a page that will be returned.\n\n#### **find_quote**\nFind a quote by its ID.\n```python\nTronaldDumpAPI().find_quote(id)\n```\n- `id`: The ID of a quote you're looking for.\n\n#### **quote_source**\nRetrieve the source of a quote by its ID.\n```python\nTronaldDumpAPI().quote_source(id)\n```\n- `id`: The ID of a quote source of which you're looking for.\n\n### Author\n\n#### **find_author**\nFind an author by their ID.\n```python\nTronaldDumpAPI().find_author(id)\n```\n- `id`: The ID of an author you're looking for.\n\n\n-----\n\n### *TronaldDumpParser* class:\n\n#### **printout**\nPrints the contents of given JSON object in the formatted form.\n```python\nParser().printout()\n```\n\n### Tags\n\n#### **tag_value**\nRetrieve all tags values from the given JSON object in a list.\n```python\nParser().tag_value()    \n```\n\n### Quotes\n\n#### **value**\nRetrieve the \"value\" value of a given JSON object.\n```python\nParser().value()\n```\n\n#### **author**\nRetrieve the \"author\" value of a given JSON object.\n```python\nParser().author()\n```\n\n#### **date_appeared**\nRetrieve the date when a given quote was written and published.\n```python\nParser().date_appeared()\n```\n\n#### **tags**\nRetrieve all the tags of a given quote\n```python\nParser().tags()\n```\n\n#### **quote_id**\nRetrieve the \"quote-id\" value from the JSON object\n```python\nParser().quote_id()\n```\n#### **source**\nRetrieve the source of a given quote\n```python\nParser().source()\n```\n\nFor full and more detailed information see `help()` on needed classes and functions.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Gushka/tronalddump-python", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "tronald-dumpy", "package_url": "https://pypi.org/project/tronald-dumpy/", "platform": "", "project_url": "https://pypi.org/project/tronald-dumpy/", "project_urls": {"Homepage": "https://github.com/Gushka/tronalddump-python"}, "release_url": "https://pypi.org/project/tronald-dumpy/0.1/", "requires_dist": ["requests", "urllib3"], "requires_python": ">=3.6", "summary": "Python wrapper for the TronaldDump API", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TronaldDump API Wrapper</h1>\n<p><a href=\"https://www.tronalddump.io/\" rel=\"nofollow\">Tronalddump.io</a> is a free API and web archive for the dumbest things Donald Trump has ever said ...</p>\n<p>You might want to check out the <a href=\"https://docs.tronalddump.io/\" rel=\"nofollow\">documentation</a> for the API before working with it.</p>\n<h2>Description</h2>\n<p>The package consists of two main modules:</p>\n<ul>\n<li><code>api</code>: tools for accessing the API.</li>\n<li><code>parse</code>: tools for parsing retieved data.</li>\n</ul>\n<h2>Installation</h2>\n<p>Ensure you have Python 3 and the package manager <code>pip</code> installed.</p>\n<p>Install using pip:</p>\n<pre><span class=\"gp\">$</span> pip3 install tronalddumpy\n</pre>\n<p>or, you can build the latest version from source:</p>\n<pre><span class=\"gp\">$</span> git clone https://github.com/Gushka/tronalddump-python.git\n<span class=\"gp\">$</span> <span class=\"nb\">cd</span> tronalddump-python/\n<span class=\"gp\">$</span> python3 setup.py install\n</pre>\n<h2>Basic usage</h2>\n<p>Import the main modules and create a client:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tronalddump</span> <span class=\"kn\">import</span> <span class=\"n\">api</span><span class=\"p\">,</span> <span class=\"n\">parse</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span>\n</pre>\n<p>Now to access any API method we will use this client.</p>\n<p>For example, let us get a random quote:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">random_quote</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span>\n<span class=\"o\">&lt;</span><span class=\"n\">TronaldDumpResponse</span><span class=\"p\">:</span> <span class=\"s1\">'https://www.tronalddump.io/random/quote'</span><span class=\"o\">&gt;</span>\n<span class=\"c1\"># Get the response data:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"p\">{</span><span class=\"n\">JSON</span><span class=\"p\">}</span>\n<span class=\"c1\"># Get the URL:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">url</span>\n<span class=\"s1\">'https://www.tronalddump.io/random/quote'</span>\n</pre>\n<h2>Parsing the JSON data</h2>\n<p>Using the TronaldDump module you also can get specific values from the API response just as easy.</p>\n<p>Create a Parser using the JSON file-object we obtained earlier:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span>\n</pre>\n<p>Now we can extract all kinds of data from the JSON based on what the initial response type was.</p>\n<pre><span class=\"c1\"># Retrieve value of a quote:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span>\n<span class=\"s2\">\"Money was never a big motivation for me, except as a way to keep score.\"</span>\n<span class=\"c1\"># Retrieve the date it was written online:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">date_appeared</span><span class=\"p\">()</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">)</span>\n</pre>\n<p>There's also a function to print into the console formatted JSON response.</p>\n<p><strong>Use it only for the debugging purposes.</strong></p>\n<pre><code>&gt;&gt;&gt; parsed.printout()\n</code></pre>\n<h2>Documentation</h2>\n<h3><em>TronaldDumpAPI</em> class:</h3>\n<h3>Tags</h3>\n<h4><strong>all_tags</strong></h4>\n<p>Retrieves all existing tags from the API.</p>\n<pre><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">all_tags</span><span class=\"p\">()</span>\n</pre>\n<h4><strong>find_tag</strong></h4>\n<p>Finds a tag by its value. Given paramaters will be capitalized for the proper search indexing.</p>\n<pre><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_tag</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<h3>Quotes</h3>\n<h4><strong>random_quote</strong></h4>\n<p>Retrieve a random quote from Troland Dump.</p>\n<pre><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">random_quote</span><span class=\"p\">()</span>\n</pre>\n<h4><strong>random_meme</strong></h4>\n<p>Retrieve a random meme image with a quote Troland Dump.</p>\n<pre><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">random_meme</span><span class=\"p\">(</span><span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"randommeme.png\"</span><span class=\"p\">,</span> <span class=\"n\">force_write</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>output_dir</code>: The directory where to store the image.</li>\n<li><code>filename</code>: The name for the downloaded file. By default it's <em>randommeme.png</em></li>\n<li><code>force_write</code>: Whether to overwrite already existing file or not. By default is set to <em>True</em></li>\n</ul>\n<h4><strong>search_quote</strong></h4>\n<p>Search for a quote by a query or tag. Returns one-page answer. You must pick either <code>query</code> or <code>tag</code> parameter.\nThey are interchangeble and only one may be used at a time.</p>\n<p><strong>TO BE IMPROVED:</strong> For now returns only the first page of a search answer.</p>\n<pre><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">search_quote</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>query</code>: The string which will be searched for.</li>\n<li><code>tag</code>: The tag which will be searched for.</li>\n<li><code>page</code>: The number of a page that will be returned.</li>\n</ul>\n<h4><strong>find_quote</strong></h4>\n<p>Find a quote by its ID.</p>\n<pre><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_quote</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>id</code>: The ID of a quote you're looking for.</li>\n</ul>\n<h4><strong>quote_source</strong></h4>\n<p>Retrieve the source of a quote by its ID.</p>\n<pre><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">quote_source</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>id</code>: The ID of a quote source of which you're looking for.</li>\n</ul>\n<h3>Author</h3>\n<h4><strong>find_author</strong></h4>\n<p>Find an author by their ID.</p>\n<pre><span class=\"n\">TronaldDumpAPI</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find_author</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>id</code>: The ID of an author you're looking for.</li>\n</ul>\n<hr>\n<h3><em>TronaldDumpParser</em> class:</h3>\n<h4><strong>printout</strong></h4>\n<p>Prints the contents of given JSON object in the formatted form.</p>\n<pre><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">printout</span><span class=\"p\">()</span>\n</pre>\n<h3>Tags</h3>\n<h4><strong>tag_value</strong></h4>\n<p>Retrieve all tags values from the given JSON object in a list.</p>\n<pre><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tag_value</span><span class=\"p\">()</span>    \n</pre>\n<h3>Quotes</h3>\n<h4><strong>value</strong></h4>\n<p>Retrieve the \"value\" value of a given JSON object.</p>\n<pre><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span>\n</pre>\n<h4><strong>author</strong></h4>\n<p>Retrieve the \"author\" value of a given JSON object.</p>\n<pre><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">()</span>\n</pre>\n<h4><strong>date_appeared</strong></h4>\n<p>Retrieve the date when a given quote was written and published.</p>\n<pre><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">date_appeared</span><span class=\"p\">()</span>\n</pre>\n<h4><strong>tags</strong></h4>\n<p>Retrieve all the tags of a given quote</p>\n<pre><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">()</span>\n</pre>\n<h4><strong>quote_id</strong></h4>\n<p>Retrieve the \"quote-id\" value from the JSON object</p>\n<pre><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">quote_id</span><span class=\"p\">()</span>\n</pre>\n<h4><strong>source</strong></h4>\n<p>Retrieve the source of a given quote</p>\n<pre><span class=\"n\">Parser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">()</span>\n</pre>\n<p>For full and more detailed information see <code>help()</code> on needed classes and functions.</p>\n\n          </div>"}, "last_serial": 6669423, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "38c2afe7cb6435c87e273bc2067444fc", "sha256": "47b2b189dcc7f543edd471129d77b0d4cbf688219648c6eeb31f77c3a08d51d7"}, "downloads": -1, "filename": "tronald_dumpy-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "38c2afe7cb6435c87e273bc2067444fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17797, "upload_time": "2020-02-20T17:14:09", "upload_time_iso_8601": "2020-02-20T17:14:09.299961Z", "url": "https://files.pythonhosted.org/packages/d1/9c/51a51ac0c0e09b4aa8b7cfe8e3469e39fc13fbc56a6acdf19ee363c41a29/tronald_dumpy-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a58b0825987651d06beb8e14b0015807", "sha256": "7fbf85558720278e5bd61ac9be7436d7c96be803aed598398ac38369a880ab71"}, "downloads": -1, "filename": "tronald-dumpy-0.1.tar.gz", "has_sig": false, "md5_digest": "a58b0825987651d06beb8e14b0015807", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5096, "upload_time": "2020-02-20T17:14:11", "upload_time_iso_8601": "2020-02-20T17:14:11.192741Z", "url": "https://files.pythonhosted.org/packages/4a/2b/8a6128561f98e16619ddd1ad85c288bcc99783ca4d79114354782e812a2c/tronald-dumpy-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "38c2afe7cb6435c87e273bc2067444fc", "sha256": "47b2b189dcc7f543edd471129d77b0d4cbf688219648c6eeb31f77c3a08d51d7"}, "downloads": -1, "filename": "tronald_dumpy-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "38c2afe7cb6435c87e273bc2067444fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17797, "upload_time": "2020-02-20T17:14:09", "upload_time_iso_8601": "2020-02-20T17:14:09.299961Z", "url": "https://files.pythonhosted.org/packages/d1/9c/51a51ac0c0e09b4aa8b7cfe8e3469e39fc13fbc56a6acdf19ee363c41a29/tronald_dumpy-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a58b0825987651d06beb8e14b0015807", "sha256": "7fbf85558720278e5bd61ac9be7436d7c96be803aed598398ac38369a880ab71"}, "downloads": -1, "filename": "tronald-dumpy-0.1.tar.gz", "has_sig": false, "md5_digest": "a58b0825987651d06beb8e14b0015807", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5096, "upload_time": "2020-02-20T17:14:11", "upload_time_iso_8601": "2020-02-20T17:14:11.192741Z", "url": "https://files.pythonhosted.org/packages/4a/2b/8a6128561f98e16619ddd1ad85c288bcc99783ca4d79114354782e812a2c/tronald-dumpy-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:44 2020"}