{"info": {"author": "Michael Prieto (michaelpri10)", "author_email": "michaelpri10@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "voicecoding\n===========\n\n.. image:: https://img.shields.io/pypi/v/voicecoding.svg\n    :target: https://pypi.python.org/pypi/voicecoding/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/dm/voicecoding.svg\n    :target: https://pypi.python.org/pypi/voicecoding/\n    :alt: Downloads\n\n.. image:: https://img.shields.io/pypi/pyversions/voicecoding.svg\n    :target: https://pypi.python.org/pypi/voicecoding/\n    :alt: Supported Python Versions\n\n.. image:: https://travis-ci.org/michaelpri10/voicecoding.svg?branch=master\n    :target: https://travis-ci.org/michaelpri10/voicecoding\n    :alt: Status\n\nAbout\n-----\n\nvoicecoding is a program that will allow people to code in Python using their voice. Using different voice commands that can be found in the `documentation <#documentation>`__, users can perform simple tasks in Python in an environment similar to the Python command-line interpreter. voicecoding is currently only a command-line application, but the plan is for it to eventually become a full Python IDE controlled completely by voice, while still staying open source and free. You can check this project out on `PyPi  <https://pypi.python.org/pypi/voicecoding>`__ or fork it on `Github <https://github.com/michaelpri10/voicecoding>`__.\n\nAfter you've `installed <#installation>`__ the program, you can run it by typing\n\n``python -m voicecoding``\n\nin your command prompt or terminal.\n\nInstallation\n------------\n\nOn all operating systems, you first need to install the program itself using ``pip``:\n\n``pip install voicecoding``\n\nThat will also install `SpeechRecognition <https://pypi.python.org/pypi/SpeechRecognition/>`__ which voicecoding depends on. You will have to manually install `PyAudio <https://people.csail.mit.edu/hubert/pyaudio/>`__, the other library that voicecoding depends on. The method of installation varies by operating system.\n\nMicrosoft Windows\n~~~~~~~~~~~~~~~~~\n\nYou can simply just use ``pip``:\n\n``pip install pyaudio``\n\nMac OS X\n~~~~~~~~\n\nFirst, you must install the PortAudio library with ``brew`` and then use ``pip`` to install PyAudio:\n\n``brew install portaudio``\n\n``pip install pyaudio``\n\nUbuntu/Debian\n~~~~~~~~~~~~~\n\nRun:\n\n``sudo apt-get install python-pyaudio python3-pyaudio``\n\nIf that does not work, you should just try installing with ``pip``:\n\n``pip install pyaudio``\n\nDocumentation\n-------------\n\nCommands\n~~~~~~~~\n\nAssign\n''''''\n\n-  structure: \"assign\" {say a `data type <#data-types>`__ and a value}\n   \"to variable\" {say a name for the variable}\n-  assigns a value to a variable\n-  example inputs: \"assign 10 to variable x\", \"assign list hello cut\n   world to variable y\"\n-  example outputs: ``x = 10``, ``y = [\"hello\", \"world\"]``\n\nPrint\n'''''\n\n-  structure: \"print\" {say a `data type <#data-types>`__ and a value}\n-  prints out a value\n-  example inputs: \"print 10\", \"print hello comma world exclamation\n   point\"\n-  example outputs: ``print(10)``, ``print(\"hello, world!\")``\n\nCall\n''''\n\n-  structure: \"call\" {say a function or `method <#methods>`__\n   expression}\n-  calls any function or method that may modify another piece of data\n-  example inputs: \"call variable x method append parameters 1\", \"call\n   variable x method pop\"\n-  example outputs: ``x.append(1)``, ``x.pop()``\n\nImport\n''''''\n\n-  structure: \"import\" {say any module name}\n-  imports a module to allow its method to be used\n-  example inputs: \"import math\", \"import web browser\"\n-  example outputs: ``import math``, ``import webbrowser``\n\nIf/Elif/Else\n''''''''''''\n\n-  structure: \"if comparison\"(comparison is optional) {say a\n   `comparison <#comparison>`__} \"elif comparison\"(comparison is\n   optional) {say a `comparison <#comparison>`__} \"else\" \"end\" -\n   unindents or ends entire statements\n-  control flow statement based on logic; after saying one of the above\n   commands, you can use others command inside of it\n-  example inputs: \"if comparison variable x equals variable y\", \"elif\n   variable x is greater than variable y\", \"else\"\n-  example outputs: ``if x == y:``, ``elif x > y:``, ``else:``\n\nFor\n'''\n\n-  structure: \"for\" {variable name} \"in\" {say an iterable `data\n   type <#data-types>`__ and a value} \"end\" - unindents or ends entire\n   statement\n-  control flow statement that iterates over a data type; after using\n   the command, you can use other commands inside of it\n-  example inputs: \"for i in list one cut two cut three\", \"for i in\n   function range params one hundred\"\n-  example outputs: ``for i in [1, 2, 3]:``, ``for i in range(100)``\n\nWhile\n'''''\n\n-  structure: \"while comparison\"(comparison is optional) {say a\n   `comparison <#comparison>`__} \"end\" - unindents or ends entire\n   statement\n-  control flow statement that will continue while a condition is true;\n   after using this command, you can use other commands inside of it\n-  example inputs: \"while comparison i is less than one hundred\", \"while\n   true\"\n-  example outputs: ``while i < 100:``, ``while True:``\n\nDefine\n''''''\n\n-  structure: \"define function\"(function is optional) {say a name for\n   the function} \"parameters variable\"(variable is optional) {say a name\n   for the parameter} \"cut\" ...\n-  used to allow users to define their own functions; after using this\n   command, you can use other commands inside of it\n-  example inputs: \"define function fibonacci parameters variable\n   number\", \"define factorial params number\"\n-  example outputs: ``def fibonacci(number):``,\n   ``def factorial(number):``\n\nReturn\n''''''\n\n-  structure: \"return\" {say a `data type <#data-types>`__ and a value}\n-  returns data from a function; can only be used in functions\n-  example inputs: \"return variable x\", \"return false\"\n-  example outputs: ``return x``, ``return False``\n\nData Types\n~~~~~~~~~~\n\nInteger\\*\n'''''''''\n\n-  any whole number\n-  structure: \"integer\"(optional) {say any whole number}\n-  example inputs: \"integer one\", \"twelve\", \"one hundred forty two\"\n-  example outputs: ``1``,\\ ``12``, ``142``\n\nString\\*\n''''''''\n\n-  any piece of text; is iterable\n-  structure: \"string\"(optional) {say anything}\n-  example inputs: \"string hello comma world exclamation point\",\n   \"space\", \"if you're reading this it's too late\"\n-  example outputs: ``\"hello, world!\"``, ``\" \"``,\n   ``\"if you're reading this it's too late\"``\n\nFloat\\*\n'''''''\n\n-  a decimal number\n-  structure: \"float\"(optional) {say any decimal}\n-  example inputs: \"float one point two\", \"three point one four one five\n   nine\"\n-  example outputs: ``1.2``, ``3.14159``\n\nBoolean\\*\n'''''''''\n\n-  stores data as true or false\n-  structure: \"boolean\"(optional) {either \"true\" or \"false\"}\n-  example inputs: \"boolean true\", \"false\"\n-  example outputs: ``True``, ``False``\n\nVariable\\*\\*\n''''''''''''\n\n-  stores data types\n-  structure: \"variable\"(sometimes optional) {any name}\n-  example inputs: \"variable x\", \"variable hello world\", \"i\"\n-  example outputs: ``x``, ``hello_world``, ``i``\n\nModule\\*\\*\n''''''''''\n\n-  allows you to use functions and methods from different Python files (note: always used with a method)\n-  stucture: \"module method\" {method name}\n-  example inputs: \"module math method factorial parameters ten\", \"module web browser method open params URL\"\n-  example outputs: ``math.factorial(10)``, ``webbrowser.open(url)``\n\nEquation\n''''''''\n\n-  for math and simple string concatenation\n-  structure: \"equation\" {say a `data type <#data-types>`__ and a value}\n   {say an `equation operator <#equation-operators>`__ {say a `data\n   type <#data-types>`__ and a value} ...\n-  example inputs: \"equation one plus five\", \"equation 12 times 4 plus\n   3\", \"equation 6 mod 5\"\n-  example outputs: ``1 + 5``, ``12 * 4  + 3``, ``6 % 5``\n\nComparison\n''''''''''\n\n-  for comparing different Python objects\n-  structure: \"comparison\" {say a `data type <#data-types>`__ and a\n   value} {say a `comparison operator <#comparison-operators>`__} {say a\n   `data type <#data-types>`__ and a value} ...\n-  example inputs: \"comparison variable x is True\", \"comparison ten is\n   greater than twenty five\", \"comparison five is less than seven and\n   ten is greater than nine\"\n-  example outputs: ``x is True``, ``10 > 25``, ``5 < 7 and 10 > 9``\n\nList\n''''\n\n-  ordered group of different Python objects; is iterable\n-  structure: \"list\" {say a `data type <#data-types>`__} {say a value}\n   \"cut\" {say a `data type <#data-types>`__ and a value} ...\n-  example inputs: \"list\", \"list one cut two cut three\", \"list hello cut\n   one point five\"\n-  example outputs: ``[]``, ``[1, 2, 3]``, ``[\"hello\", 1.5]``\n\nTuple\n'''''\n\n-  immutable sequence of Python objects\n-  structure: \"tuple\" {say a `data type <#data-types>`__} {say a value}\n   \"cut\" {say a `data type <#data-types>`__ and a value} ...\n-  example inputs: \"tuple\", \"tuple one cut two cut three\", \"tuple hello\"\n-  example outputs: ``()``, ``(1, 2, 3)``, ``(\"hello\",)``\n\nSet\n'''\n\n-  group of unordered, unique Python objects\n-  structure: \"set\" {say a `data type <#data-types>`__ and a value}\n   \"cut\" {say a `data type <#data-types>`__} {say a value} ...\n-  example inputs: \"set\", \"set one cut one cut three\", \"set hello cut\n   one point five\"\n-  example outputs: ``set()``, ``{1, 3}``, ``{\"hello\", 1.5}``\n\nFunction\n''''''''\n\n-  blocks of code that can perform action on parameters; when naming a\n   builtin function, you can say what a shorthand name actually means;\n   ie: \"integer\" -> ``int()``, \"length\" -> ``len()``, \"has attribute\" ->\n   ``hasattr()``\n-  structure: \"function\" {say a function name} \"parameters\" {say a `data\n   type <#data-types>`__ and a value} cut ...\n-  example inputs: \"function list parameters hello\", \"function int\n   params string ten\"\n-  example outputs: ``list(\"hello\")``, ``int(\"10\")``\n\n\\*Doesn't have be said when using this data type in a command; ie: you\ncan just say \"one\" instead of \"integer one\" to get the result of ``1``.\n\n\\*\\*\\ `\"Variable\" <#variable>`__ doesn't have to be said if the variable\nhas been defined, is being used as a parameter in a `function <#function>`__ or `method <#methods>`__, or is the variable in a `for loop <#for>`__. `\"Module\" <#module>`__ doesn't have to be said if the module is already imported.\n\nOther Things\n~~~~~~~~~~~~\n\nMethods\n'''''''\n\n-  blocks of code that are called on class instances to perform actions\n-  structure: {say a `data type <#data-types>`__ and a value} \"method\"\n   {say a method name} \"parameters\" {say a `data type <#data-types>`__\n   and a value} cut ...\n-  example inputs: \"variable x method append parameters one\", \"space\n   method join params function list params hello\"\n-  example outputs: ``x.append(1)``, ``\" \".join(list(\"hello\"))``\n\nKeywords\n''''''''\n\n-  \"exit\" - exits the program\n-  \"cancel\" - cancels a multiline statement without exiting the program\n-  \"end\" - unindents or ends a `for loop <#for>`__, `while loop <#while>`__, `function definition <#define>`__, or `if/elif/else statement <#if-elif-else>`__\n\nEquation Operators\n''''''''''''''''''\n\n-  for use in equations\n-  ``+`` - \"plus\"\n-  ``-`` - \"minus\"\n-  ``*`` - \"times\", \"multiplied by\"\n-  ``/`` - \"divided by\"\n-  ``**`` - \"to the power of\"\n-  ``%`` - \"mod\", \"modulus\"\n\nComparison Operators\n''''''''''''''''''''\n\n-  for use in comparison expressions\n-  ``==`` - \"equals\", \"is equal to\"\n-  ``!=`` - \"does not equal\", \"is not equal to\"\n-  ``>`` - \"is greater than\"\n-  ``<`` - \"is less than\"\n-  ``>=`` - \"is greater than or equal to\"\n-  ``<=`` - \"is less than or equal to\"\n-  Key words\n-  ``and``\n-  ``or``\n-  ``is``\n-  ``not``\n-  ``in``\n\nShorthand words\n'''''''''''''''\n\n-  \"params\" can be used in place of \"parameters\"", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michaelpri10/voicecoding", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "voicecoding", "package_url": "https://pypi.org/project/voicecoding/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/voicecoding/", "project_urls": {"Homepage": "https://github.com/michaelpri10/voicecoding"}, "release_url": "https://pypi.org/project/voicecoding/2.1.2/", "requires_dist": null, "requires_python": "", "summary": "Python program that allows to code with your voice", "version": "2.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/voicecoding/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7d076b9579399737e18c9e3a465e6c07c9ab7d7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f766f696365636f64696e672e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/voicecoding/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/200b05a6ea90e8454e80fb02157372ab45ca356b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f766f696365636f64696e672e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/voicecoding/\" rel=\"nofollow\"><img alt=\"Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/698c45d344110e6f1a5835b121a6dfc898af968b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f766f696365636f64696e672e737667\"></a>\n<a href=\"https://travis-ci.org/michaelpri10/voicecoding\" rel=\"nofollow\"><img alt=\"Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b646fff84dced9794772df5781e943acabc1906/68747470733a2f2f7472617669732d63692e6f72672f6d69636861656c70726931302f766f696365636f64696e672e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"about\">\n<h2>About</h2>\n<p>voicecoding is a program that will allow people to code in Python using their voice. Using different voice commands that can be found in the <a href=\"#documentation\" rel=\"nofollow\">documentation</a>, users can perform simple tasks in Python in an environment similar to the Python command-line interpreter. voicecoding is currently only a command-line application, but the plan is for it to eventually become a full Python IDE controlled completely by voice, while still staying open source and free. You can check this project out on <a href=\"https://pypi.python.org/pypi/voicecoding\" rel=\"nofollow\">PyPi</a> or fork it on <a href=\"https://github.com/michaelpri10/voicecoding\" rel=\"nofollow\">Github</a>.</p>\n<p>After you\u2019ve <a href=\"#installation\" rel=\"nofollow\">installed</a> the program, you can run it by typing</p>\n<p><tt>python <span class=\"pre\">-m</span> voicecoding</tt></p>\n<p>in your command prompt or terminal.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>On all operating systems, you first need to install the program itself using <tt>pip</tt>:</p>\n<p><tt>pip install voicecoding</tt></p>\n<p>That will also install <a href=\"https://pypi.python.org/pypi/SpeechRecognition/\" rel=\"nofollow\">SpeechRecognition</a> which voicecoding depends on. You will have to manually install <a href=\"https://people.csail.mit.edu/hubert/pyaudio/\" rel=\"nofollow\">PyAudio</a>, the other library that voicecoding depends on. The method of installation varies by operating system.</p>\n<div id=\"microsoft-windows\">\n<h3>Microsoft Windows</h3>\n<p>You can simply just use <tt>pip</tt>:</p>\n<p><tt>pip install pyaudio</tt></p>\n</div>\n<div id=\"mac-os-x\">\n<h3>Mac OS X</h3>\n<p>First, you must install the PortAudio library with <tt>brew</tt> and then use <tt>pip</tt> to install PyAudio:</p>\n<p><tt>brew install portaudio</tt></p>\n<p><tt>pip install pyaudio</tt></p>\n</div>\n<div id=\"ubuntu-debian\">\n<h3>Ubuntu/Debian</h3>\n<p>Run:</p>\n<p><tt>sudo <span class=\"pre\">apt-get</span> install <span class=\"pre\">python-pyaudio</span> <span class=\"pre\">python3-pyaudio</span></tt></p>\n<p>If that does not work, you should just try installing with <tt>pip</tt>:</p>\n<p><tt>pip install pyaudio</tt></p>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<div id=\"commands\">\n<h3>Commands</h3>\n<div id=\"assign\">\n<h4>Assign</h4>\n<ul>\n<li>structure: \u201cassign\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value}\n\u201cto variable\u201d {say a name for the variable}</li>\n<li>assigns a value to a variable</li>\n<li>example inputs: \u201cassign 10 to variable x\u201d, \u201cassign list hello cut\nworld to variable y\u201d</li>\n<li>example outputs: <tt>x = 10</tt>, <tt>y = [\"hello\", \"world\"]</tt></li>\n</ul>\n</div>\n<div id=\"print\">\n<h4>Print</h4>\n<ul>\n<li>structure: \u201cprint\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value}</li>\n<li>prints out a value</li>\n<li>example inputs: \u201cprint 10\u201d, \u201cprint hello comma world exclamation\npoint\u201d</li>\n<li>example outputs: <tt>print(10)</tt>, <tt><span class=\"pre\">print(\"hello,</span> <span class=\"pre\">world!\")</span></tt></li>\n</ul>\n</div>\n<div id=\"call\">\n<h4>Call</h4>\n<ul>\n<li>structure: \u201ccall\u201d {say a function or <a href=\"#methods\" rel=\"nofollow\">method</a>\nexpression}</li>\n<li>calls any function or method that may modify another piece of data</li>\n<li>example inputs: \u201ccall variable x method append parameters 1\u201d, \u201ccall\nvariable x method pop\u201d</li>\n<li>example outputs: <tt>x.append(1)</tt>, <tt>x.pop()</tt></li>\n</ul>\n</div>\n<div id=\"import\">\n<h4>Import</h4>\n<ul>\n<li>structure: \u201cimport\u201d {say any module name}</li>\n<li>imports a module to allow its method to be used</li>\n<li>example inputs: \u201cimport math\u201d, \u201cimport web browser\u201d</li>\n<li>example outputs: <tt>import math</tt>, <tt>import webbrowser</tt></li>\n</ul>\n</div>\n<div id=\"if-elif-else\">\n<h4>If/Elif/Else</h4>\n<ul>\n<li>structure: \u201cif comparison\u201d(comparison is optional) {say a\n<a href=\"#comparison\" rel=\"nofollow\">comparison</a>} \u201celif comparison\u201d(comparison is\noptional) {say a <a href=\"#comparison\" rel=\"nofollow\">comparison</a>} \u201celse\u201d \u201cend\u201d -\nunindents or ends entire statements</li>\n<li>control flow statement based on logic; after saying one of the above\ncommands, you can use others command inside of it</li>\n<li>example inputs: \u201cif comparison variable x equals variable y\u201d, \u201celif\nvariable x is greater than variable y\u201d, \u201celse\u201d</li>\n<li>example outputs: <tt>if x == y:</tt>, <tt>elif x &gt; y:</tt>, <tt>else:</tt></li>\n</ul>\n</div>\n<div id=\"for\">\n<h4>For</h4>\n<ul>\n<li>structure: \u201cfor\u201d {variable name} \u201cin\u201d {say an iterable <a href=\"#data-types\" rel=\"nofollow\">data\ntype</a> and a value} \u201cend\u201d - unindents or ends entire\nstatement</li>\n<li>control flow statement that iterates over a data type; after using\nthe command, you can use other commands inside of it</li>\n<li>example inputs: \u201cfor i in list one cut two cut three\u201d, \u201cfor i in\nfunction range params one hundred\u201d</li>\n<li>example outputs: <tt>for i in [1, 2, 3]:</tt>, <tt>for i in range(100)</tt></li>\n</ul>\n</div>\n<div id=\"while\">\n<h4>While</h4>\n<ul>\n<li>structure: \u201cwhile comparison\u201d(comparison is optional) {say a\n<a href=\"#comparison\" rel=\"nofollow\">comparison</a>} \u201cend\u201d - unindents or ends entire\nstatement</li>\n<li>control flow statement that will continue while a condition is true;\nafter using this command, you can use other commands inside of it</li>\n<li>example inputs: \u201cwhile comparison i is less than one hundred\u201d, \u201cwhile\ntrue\u201d</li>\n<li>example outputs: <tt>while i &lt; 100:</tt>, <tt>while True:</tt></li>\n</ul>\n</div>\n<div id=\"define\">\n<h4>Define</h4>\n<ul>\n<li>structure: \u201cdefine function\u201d(function is optional) {say a name for\nthe function} \u201cparameters variable\u201d(variable is optional) {say a name\nfor the parameter} \u201ccut\u201d \u2026</li>\n<li>used to allow users to define their own functions; after using this\ncommand, you can use other commands inside of it</li>\n<li>example inputs: \u201cdefine function fibonacci parameters variable\nnumber\u201d, \u201cdefine factorial params number\u201d</li>\n<li>example outputs: <tt>def fibonacci(number):</tt>,\n<tt>def factorial(number):</tt></li>\n</ul>\n</div>\n<div id=\"return\">\n<h4>Return</h4>\n<ul>\n<li>structure: \u201creturn\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value}</li>\n<li>returns data from a function; can only be used in functions</li>\n<li>example inputs: \u201creturn variable x\u201d, \u201creturn false\u201d</li>\n<li>example outputs: <tt>return x</tt>, <tt>return False</tt></li>\n</ul>\n</div>\n</div>\n<div id=\"data-types\">\n<h3>Data Types</h3>\n<div id=\"integer\">\n<h4>Integer*</h4>\n<ul>\n<li>any whole number</li>\n<li>structure: \u201cinteger\u201d(optional) {say any whole number}</li>\n<li>example inputs: \u201cinteger one\u201d, \u201ctwelve\u201d, \u201cone hundred forty two\u201d</li>\n<li>example outputs: <tt>1</tt>,<tt>12</tt>, <tt>142</tt></li>\n</ul>\n</div>\n<div id=\"string\">\n<h4>String*</h4>\n<ul>\n<li>any piece of text; is iterable</li>\n<li>structure: \u201cstring\u201d(optional) {say anything}</li>\n<li>example inputs: \u201cstring hello comma world exclamation point\u201d,\n\u201cspace\u201d, \u201cif you\u2019re reading this it\u2019s too late\u201d</li>\n<li>example outputs: <tt>\"hello, world!\"</tt>, <tt>\" \"</tt>,\n<tt>\"if you're reading this it's too late\"</tt></li>\n</ul>\n</div>\n<div id=\"float\">\n<h4>Float*</h4>\n<ul>\n<li>a decimal number</li>\n<li>structure: \u201cfloat\u201d(optional) {say any decimal}</li>\n<li>example inputs: \u201cfloat one point two\u201d, \u201cthree point one four one five\nnine\u201d</li>\n<li>example outputs: <tt>1.2</tt>, <tt>3.14159</tt></li>\n</ul>\n</div>\n<div id=\"boolean\">\n<h4>Boolean*</h4>\n<ul>\n<li>stores data as true or false</li>\n<li>structure: \u201cboolean\u201d(optional) {either \u201ctrue\u201d or \u201cfalse\u201d}</li>\n<li>example inputs: \u201cboolean true\u201d, \u201cfalse\u201d</li>\n<li>example outputs: <tt>True</tt>, <tt>False</tt></li>\n</ul>\n</div>\n<div id=\"variable\">\n<h4>Variable**</h4>\n<ul>\n<li>stores data types</li>\n<li>structure: \u201cvariable\u201d(sometimes optional) {any name}</li>\n<li>example inputs: \u201cvariable x\u201d, \u201cvariable hello world\u201d, \u201ci\u201d</li>\n<li>example outputs: <tt>x</tt>, <tt>hello_world</tt>, <tt>i</tt></li>\n</ul>\n</div>\n<div id=\"module\">\n<h4>Module**</h4>\n<ul>\n<li>allows you to use functions and methods from different Python files (note: always used with a method)</li>\n<li>stucture: \u201cmodule method\u201d {method name}</li>\n<li>example inputs: \u201cmodule math method factorial parameters ten\u201d, \u201cmodule web browser method open params URL\u201d</li>\n<li>example outputs: <tt>math.factorial(10)</tt>, <tt>webbrowser.open(url)</tt></li>\n</ul>\n</div>\n<div id=\"equation\">\n<h4>Equation</h4>\n<ul>\n<li>for math and simple string concatenation</li>\n<li>structure: \u201cequation\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value}\n{say an <a href=\"#equation-operators\" rel=\"nofollow\">equation operator</a> {say a <a href=\"#data-types\" rel=\"nofollow\">data\ntype</a> and a value} \u2026</li>\n<li>example inputs: \u201cequation one plus five\u201d, \u201cequation 12 times 4 plus\n3\u201d, \u201cequation 6 mod 5\u201d</li>\n<li>example outputs: <tt>1 + 5</tt>, <tt>12 * 4\u00a0 + 3</tt>, <tt>6 % 5</tt></li>\n</ul>\n</div>\n<div id=\"comparison\">\n<h4>Comparison</h4>\n<ul>\n<li>for comparing different Python objects</li>\n<li>structure: \u201ccomparison\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a\nvalue} {say a <a href=\"#comparison-operators\" rel=\"nofollow\">comparison operator</a>} {say a\n<a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value} \u2026</li>\n<li>example inputs: \u201ccomparison variable x is True\u201d, \u201ccomparison ten is\ngreater than twenty five\u201d, \u201ccomparison five is less than seven and\nten is greater than nine\u201d</li>\n<li>example outputs: <tt>x is True</tt>, <tt>10 &gt; 25</tt>, <tt>5 &lt; 7 and 10 &gt; 9</tt></li>\n</ul>\n</div>\n<div id=\"list\">\n<h4>List</h4>\n<ul>\n<li>ordered group of different Python objects; is iterable</li>\n<li>structure: \u201clist\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a>} {say a value}\n\u201ccut\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value} \u2026</li>\n<li>example inputs: \u201clist\u201d, \u201clist one cut two cut three\u201d, \u201clist hello cut\none point five\u201d</li>\n<li>example outputs: <tt>[]</tt>, <tt>[1, 2, 3]</tt>, <tt>[\"hello\", 1.5]</tt></li>\n</ul>\n</div>\n<div id=\"tuple\">\n<h4>Tuple</h4>\n<ul>\n<li>immutable sequence of Python objects</li>\n<li>structure: \u201ctuple\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a>} {say a value}\n\u201ccut\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value} \u2026</li>\n<li>example inputs: \u201ctuple\u201d, \u201ctuple one cut two cut three\u201d, \u201ctuple hello\u201d</li>\n<li>example outputs: <tt>()</tt>, <tt>(1, 2, 3)</tt>, <tt><span class=\"pre\">(\"hello\",)</span></tt></li>\n</ul>\n</div>\n<div id=\"set\">\n<h4>Set</h4>\n<ul>\n<li>group of unordered, unique Python objects</li>\n<li>structure: \u201cset\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value}\n\u201ccut\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a>} {say a value} \u2026</li>\n<li>example inputs: \u201cset\u201d, \u201cset one cut one cut three\u201d, \u201cset hello cut\none point five\u201d</li>\n<li>example outputs: <tt>set()</tt>, <tt>{1, 3}</tt>, <tt>{\"hello\", 1.5}</tt></li>\n</ul>\n</div>\n<div id=\"function\">\n<h4>Function</h4>\n<ul>\n<li>blocks of code that can perform action on parameters; when naming a\nbuiltin function, you can say what a shorthand name actually means;\nie: \u201cinteger\u201d -&gt; <tt>int()</tt>, \u201clength\u201d -&gt; <tt>len()</tt>, \u201chas attribute\u201d -&gt;\n<tt>hasattr()</tt></li>\n<li>structure: \u201cfunction\u201d {say a function name} \u201cparameters\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data\ntype</a> and a value} cut \u2026</li>\n<li>example inputs: \u201cfunction list parameters hello\u201d, \u201cfunction int\nparams string ten\u201d</li>\n<li>example outputs: <tt><span class=\"pre\">list(\"hello\")</span></tt>, <tt><span class=\"pre\">int(\"10\")</span></tt></li>\n</ul>\n<p>*Doesn\u2019t have be said when using this data type in a command; ie: you\ncan just say \u201cone\u201d instead of \u201cinteger one\u201d to get the result of <tt>1</tt>.</p>\n<p>**<a href=\"#variable\" rel=\"nofollow\">\u201dVariable\u201d</a> doesn\u2019t have to be said if the variable\nhas been defined, is being used as a parameter in a <a href=\"#function\" rel=\"nofollow\">function</a> or <a href=\"#methods\" rel=\"nofollow\">method</a>, or is the variable in a <a href=\"#for\" rel=\"nofollow\">for loop</a>. <a href=\"#module\" rel=\"nofollow\">\u201cModule\u201d</a> doesn\u2019t have to be said if the module is already imported.</p>\n</div>\n</div>\n<div id=\"other-things\">\n<h3>Other Things</h3>\n<div id=\"methods\">\n<h4>Methods</h4>\n<ul>\n<li>blocks of code that are called on class instances to perform actions</li>\n<li>structure: {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a> and a value} \u201cmethod\u201d\n{say a method name} \u201cparameters\u201d {say a <a href=\"#data-types\" rel=\"nofollow\">data type</a>\nand a value} cut \u2026</li>\n<li>example inputs: \u201cvariable x method append parameters one\u201d, \u201cspace\nmethod join params function list params hello\u201d</li>\n<li>example outputs: <tt>x.append(1)</tt>, <tt>\" <span class=\"pre\">\".join(list(\"hello\"))</span></tt></li>\n</ul>\n</div>\n<div id=\"keywords\">\n<h4>Keywords</h4>\n<ul>\n<li>\u201cexit\u201d - exits the program</li>\n<li>\u201ccancel\u201d - cancels a multiline statement without exiting the program</li>\n<li>\u201cend\u201d - unindents or ends a <a href=\"#for\" rel=\"nofollow\">for loop</a>, <a href=\"#while\" rel=\"nofollow\">while loop</a>, <a href=\"#define\" rel=\"nofollow\">function definition</a>, or <a href=\"#if-elif-else\" rel=\"nofollow\">if/elif/else statement</a></li>\n</ul>\n</div>\n<div id=\"equation-operators\">\n<h4>Equation Operators</h4>\n<ul>\n<li>for use in equations</li>\n<li><tt>+</tt> - \u201cplus\u201d</li>\n<li><tt>-</tt> - \u201cminus\u201d</li>\n<li><tt>*</tt> - \u201ctimes\u201d, \u201cmultiplied by\u201d</li>\n<li><tt>/</tt> - \u201cdivided by\u201d</li>\n<li><tt>**</tt> - \u201cto the power of\u201d</li>\n<li><tt>%</tt> - \u201cmod\u201d, \u201cmodulus\u201d</li>\n</ul>\n</div>\n<div id=\"comparison-operators\">\n<h4>Comparison Operators</h4>\n<ul>\n<li>for use in comparison expressions</li>\n<li><tt>==</tt> - \u201cequals\u201d, \u201cis equal to\u201d</li>\n<li><tt>!=</tt> - \u201cdoes not equal\u201d, \u201cis not equal to\u201d</li>\n<li><tt>&gt;</tt> - \u201cis greater than\u201d</li>\n<li><tt>&lt;</tt> - \u201cis less than\u201d</li>\n<li><tt>&gt;=</tt> - \u201cis greater than or equal to\u201d</li>\n<li><tt>&lt;=</tt> - \u201cis less than or equal to\u201d</li>\n<li>Key words</li>\n<li><tt>and</tt></li>\n<li><tt>or</tt></li>\n<li><tt>is</tt></li>\n<li><tt>not</tt></li>\n<li><tt>in</tt></li>\n</ul>\n</div>\n<div id=\"shorthand-words\">\n<h4>Shorthand words</h4>\n<ul>\n<li>\u201cparams\u201d can be used in place of \u201cparameters\u201d</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1988596, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ee939672163ae0bf27779edc0c918a12", "sha256": "2721b1088b56aa0350f5717006e448a929820c346b0cc5a8970d6d9d7edee18b"}, "downloads": -1, "filename": "voicecoding-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ee939672163ae0bf27779edc0c918a12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19549, "upload_time": "2016-01-24T18:37:31", "upload_time_iso_8601": "2016-01-24T18:37:31.201309Z", "url": "https://files.pythonhosted.org/packages/81/65/33c2ca80b80fd88b3c436e421b9cf1423b1d7d9f91e178ec29f774695097/voicecoding-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "bf4120af58d09175979171a2841c4492", "sha256": "bdf861c622934fa3c610abc5f5fd870aff418eeb688e8eea15ccd8d7b333981c"}, "downloads": -1, "filename": "voicecoding-1.1.0.tar.gz", "has_sig": false, "md5_digest": "bf4120af58d09175979171a2841c4492", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23126, "upload_time": "2016-02-06T22:17:40", "upload_time_iso_8601": "2016-02-06T22:17:40.525846Z", "url": "https://files.pythonhosted.org/packages/1c/3d/fa1394d0c56a94298cff4a78d98900cfc7e1d7367c9299a671529c195383/voicecoding-1.1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "da55838f273d14b5aa598c77b6e1d7ca", "sha256": "a9c8276f99b4dfd7a0e629d186486391a2d2b503cffac5ed77a027dc03a8c445"}, "downloads": -1, "filename": "voicecoding-2.0.0.tar.gz", "has_sig": false, "md5_digest": "da55838f273d14b5aa598c77b6e1d7ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20939, "upload_time": "2016-02-14T21:49:10", "upload_time_iso_8601": "2016-02-14T21:49:10.991618Z", "url": "https://files.pythonhosted.org/packages/b8/e3/5d7fc46b63396daa5ea29d4d4f05f1a6467e00ef4dbfa36267f0b596fb47/voicecoding-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "80436c155866c44aabfc24c4035ad5e1", "sha256": "52f106f16cea749b1764b2420193d906fc38012f667bfac1be8f1d654c89dc49"}, "downloads": -1, "filename": "voicecoding-2.0.1.tar.gz", "has_sig": false, "md5_digest": "80436c155866c44aabfc24c4035ad5e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20480, "upload_time": "2016-02-18T03:03:24", "upload_time_iso_8601": "2016-02-18T03:03:24.784176Z", "url": "https://files.pythonhosted.org/packages/d3/c4/ab07bff38cd891aa1038ac6b90daee2a2fdd7c0a95ecdc9d10d46e550134/voicecoding-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "0474fedc6a26c00915f80bdf16c9a801", "sha256": "be130926ca11d5b7ba54a4ad4ba601e7a54242af290b448abcfc0cb67d431615"}, "downloads": -1, "filename": "voicecoding-2.0.2.tar.gz", "has_sig": false, "md5_digest": "0474fedc6a26c00915f80bdf16c9a801", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20489, "upload_time": "2016-02-18T03:09:48", "upload_time_iso_8601": "2016-02-18T03:09:48.863491Z", "url": "https://files.pythonhosted.org/packages/81/3f/a5395ee4fead0c60ca2e5ddf4313cc4146e147ee0acff37a70e8c3b4f5b8/voicecoding-2.0.2.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "66b699dd3226bdead6086625863566a4", "sha256": "1ea39c7632d2b7dc417d55db8957e4c9bb0abe0fac8f2bd285c119c003b7496a"}, "downloads": -1, "filename": "voicecoding-2.1.0.tar.gz", "has_sig": false, "md5_digest": "66b699dd3226bdead6086625863566a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21422, "upload_time": "2016-02-27T05:31:02", "upload_time_iso_8601": "2016-02-27T05:31:02.090173Z", "url": "https://files.pythonhosted.org/packages/80/ba/ca0834a0ade591c8f8c8b3aa7affd4b24db46af85da9ff47ee740b2f20d0/voicecoding-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "921ef5cecec768aaa9ed686fb58dbe94", "sha256": "769e7c775e49c011eec9e0c9d5eef3bcbc31cf337b25c42c4ca97649435ebeb1"}, "downloads": -1, "filename": "voicecoding-2.1.1.tar.gz", "has_sig": false, "md5_digest": "921ef5cecec768aaa9ed686fb58dbe94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22142, "upload_time": "2016-03-01T02:36:37", "upload_time_iso_8601": "2016-03-01T02:36:37.687447Z", "url": "https://files.pythonhosted.org/packages/8b/8e/7aab8c1ff411b6fe7e3e34a3e1646ddf83afe19ebe71c79d382c2536d4b8/voicecoding-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "a878402b61c2c798fdbfdcd40ce21af1", "sha256": "b7ff26d6cc36faa365b1ca2c972822249df518f11785707fb585f9f371c4ed53"}, "downloads": -1, "filename": "voicecoding-2.1.2.tar.gz", "has_sig": false, "md5_digest": "a878402b61c2c798fdbfdcd40ce21af1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22174, "upload_time": "2016-03-04T01:00:09", "upload_time_iso_8601": "2016-03-04T01:00:09.771261Z", "url": "https://files.pythonhosted.org/packages/3a/86/491f0ca497fdca03feb5954f1673c6d28a29dc9d151884d4ced25028e368/voicecoding-2.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a878402b61c2c798fdbfdcd40ce21af1", "sha256": "b7ff26d6cc36faa365b1ca2c972822249df518f11785707fb585f9f371c4ed53"}, "downloads": -1, "filename": "voicecoding-2.1.2.tar.gz", "has_sig": false, "md5_digest": "a878402b61c2c798fdbfdcd40ce21af1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22174, "upload_time": "2016-03-04T01:00:09", "upload_time_iso_8601": "2016-03-04T01:00:09.771261Z", "url": "https://files.pythonhosted.org/packages/3a/86/491f0ca497fdca03feb5954f1673c6d28a29dc9d151884d4ced25028e368/voicecoding-2.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:34 2020"}