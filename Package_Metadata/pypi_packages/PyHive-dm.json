{"info": {"author": "ppikaqiu", "author_email": "1207648300@qq.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Topic :: Database :: Front-Ends"], "description": ".. image:: https://travis-ci.org/dropbox/PyHive.svg?branch=master\n    :target: https://travis-ci.org/dropbox/PyHive\n.. image:: https://img.shields.io/codecov/c/github/dropbox/PyHive.svg\n\n======\nPyHive\n======\n\nPyHive is a collection of Python `DB-API <http://www.python.org/dev/peps/pep-0249/>`_ and\n`SQLAlchemy <http://www.sqlalchemy.org/>`_ interfaces for `Presto <http://prestodb.io/>`_ and\n`Hive <http://hive.apache.org/>`_.\n\nUsage\n=====\n\nDB-API\n------\n.. code-block:: python\n\n    from pyhive import presto  # or import hive\n    cursor = presto.connect('localhost').cursor()\n    cursor.execute('SELECT * FROM my_awesome_data LIMIT 10')\n    print cursor.fetchone()\n    print cursor.fetchall()\n\nDB-API (asynchronous)\n---------------------\n.. code-block:: python\n\n    from pyhive import hive\n    from TCLIService.ttypes import TOperationState\n    cursor = hive.connect('localhost').cursor()\n    cursor.execute('SELECT * FROM my_awesome_data LIMIT 10', async=True)\n\n    status = cursor.poll().operationState\n    while status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n        logs = cursor.fetch_logs()\n        for message in logs:\n            print message\n\n        # If needed, an asynchronous query can be cancelled at any time with:\n        # cursor.cancel()\n\n        status = cursor.poll().operationState\n\n    print cursor.fetchall()\n\nIn Python 3.7 `async` became a keyword; you can use `async_` instead:\n\n.. code-block:: python\n\n    cursor.execute('SELECT * FROM my_awesome_data LIMIT 10', async_=True)\n\n\nSQLAlchemy\n----------\nFirst install this package to register it with SQLAlchemy (see ``setup.py``).\n\n.. code-block:: python\n\n    from sqlalchemy import *\n    from sqlalchemy.engine import create_engine\n    from sqlalchemy.schema import *\n    # Presto\n    engine = create_engine('presto://localhost:8080/hive/default')\n    # Hive\n    engine = create_engine('hive://localhost:10000/default')\n    logs = Table('my_awesome_data', MetaData(bind=engine), autoload=True)\n    print select([func.count('*')], from_obj=logs).scalar()\n\nNote: query generation functionality is not exhaustive or fully tested, but there should be no\nproblem with raw SQL.\n\nPassing session configuration\n-----------------------------\n\n.. code-block:: python\n\n    # DB-API\n    hive.connect('localhost', configuration={'hive.exec.reducers.max': '123'})\n    presto.connect('localhost', session_props={'query_max_run_time': '1234m'})\n    # SQLAlchemy\n    create_engine(\n        'presto://user@host:443/hive',\n        connect_args={'protocol': 'https',\n                      'session_props': {'query_max_run_time': '1234m'}}\n    )\n    create_engine(\n        'hive://user@host:10000/database',\n        connect_args={'configuration': {'hive.exec.reducers.max': '123'}},\n    )\n    # SQLAlchemy with LDAP\n    create_engine(\n        'hive://user:password@host:10000/database',\n        connect_args={'auth': 'LDAP'},\n    )\n\nRequirements\n============\n\nInstall using\n\n- ``pip install pyhive[hive]`` for the Hive interface and\n- ``pip install pyhive[presto]`` for the Presto interface.\n\nPyHive works with\n\n- Python 2.7 / Python 3\n- For Presto: Presto install\n- For Hive: `HiveServer2 <https://cwiki.apache.org/confluence/display/Hive/Setting+up+HiveServer2>`_ daemon\n\nChangelog\n=========\nSee https://github.com/dropbox/PyHive/releases.\n\nContributing\n============\n- Please fill out the Dropbox Contributor License Agreement at https://opensource.dropbox.com/cla/ and note this in your pull request.\n- Changes must come with tests, with the exception of trivial things like fixing comments. See .travis.yml for the test environment setup.\n- Notes on project scope:\n\n  - This project is intended to be a minimal Hive/Presto client that does that one thing and nothing else.\n    Features that can be implemented on top of PyHive, such integration with your favorite data analysis library, are likely out of scope.\n  - We prefer having a small number of generic features over a large number of specialized, inflexible features.\n    For example, the Presto code takes an arbitrary ``requests_session`` argument for customizing HTTP calls, as opposed to having a separate parameter/branch for each ``requests`` option.\n\nTesting\n=======\n.. image:: https://travis-ci.org/dropbox/PyHive.svg\n    :target: https://travis-ci.org/dropbox/PyHive\n.. image:: http://codecov.io/github/dropbox/PyHive/coverage.svg?branch=master\n    :target: http://codecov.io/github/dropbox/PyHive?branch=master\n\nRun the following in an environment with Hive/Presto::\n\n    ./scripts/make_test_tables.sh\n    virtualenv --no-site-packages env\n    source env/bin/activate\n    pip install -e .\n    pip install -r dev_requirements.txt\n    py.test\n\nWARNING: This drops/creates tables named ``one_row``, ``one_row_complex``, and ``many_rows``, plus a\ndatabase called ``pyhive_test_database``.\n\nUpdating TCLIService\n====================\n\nThe TCLIService module is autogenerated using a ``TCLIService.thrift`` file. To update it, the\n``generate.py`` file can be used: ``python generate.py <TCLIServiceURL>``. When left blank, the\nversion for Hive 2.3 will be downloaded.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dropbox/PyHive", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "PyHive-dm", "package_url": "https://pypi.org/project/PyHive-dm/", "platform": "", "project_url": "https://pypi.org/project/PyHive-dm/", "project_urls": {"Homepage": "https://github.com/dropbox/PyHive"}, "release_url": "https://pypi.org/project/PyHive-dm/0.6.1/", "requires_dist": null, "requires_python": "", "summary": "Python interface to Hive", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/dropbox/PyHive\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/dropbox/PyHive.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02f2c39cfb4a565197938bc872c6f19540cbda37/68747470733a2f2f7472617669732d63692e6f72672f64726f70626f782f5079486976652e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"https://img.shields.io/codecov/c/github/dropbox/PyHive.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83c07ab36e11cc8626289101c40d3c9dba10b1a9/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f64726f70626f782f5079486976652e737667\">\n<div id=\"pyhive\">\n<h2>PyHive</h2>\n<p>PyHive is a collection of Python <a href=\"http://www.python.org/dev/peps/pep-0249/\" rel=\"nofollow\">DB-API</a> and\n<a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a> interfaces for <a href=\"http://prestodb.io/\" rel=\"nofollow\">Presto</a> and\n<a href=\"http://hive.apache.org/\" rel=\"nofollow\">Hive</a>.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"id1\">\n<h4>DB-API</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyhive</span> <span class=\"kn\">import</span> <span class=\"n\">presto</span>  <span class=\"c1\"># or import hive</span>\n<span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">presto</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM my_awesome_data LIMIT 10'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"db-api-asynchronous\">\n<h4>DB-API (asynchronous)</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyhive</span> <span class=\"kn\">import</span> <span class=\"n\">hive</span>\n<span class=\"kn\">from</span> <span class=\"nn\">TCLIService.ttypes</span> <span class=\"kn\">import</span> <span class=\"n\">TOperationState</span>\n<span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">hive</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM my_awesome_data LIMIT 10'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">poll</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">operationState</span>\n<span class=\"k\">while</span> <span class=\"n\">status</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">TOperationState</span><span class=\"o\">.</span><span class=\"n\">INITIALIZED_STATE</span><span class=\"p\">,</span> <span class=\"n\">TOperationState</span><span class=\"o\">.</span><span class=\"n\">RUNNING_STATE</span><span class=\"p\">):</span>\n    <span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetch_logs</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">logs</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span> <span class=\"n\">message</span>\n\n    <span class=\"c1\"># If needed, an asynchronous query can be cancelled at any time with:</span>\n    <span class=\"c1\"># cursor.cancel()</span>\n\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">poll</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">operationState</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n</pre>\n<p>In Python 3.7 <cite>async</cite> became a keyword; you can use <cite>async_</cite> instead:</p>\n<pre><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM my_awesome_data LIMIT 10'</span><span class=\"p\">,</span> <span class=\"n\">async_</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id2\">\n<h4>SQLAlchemy</h4>\n<p>First install this package to register it with SQLAlchemy (see <tt>setup.py</tt>).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.engine</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.schema</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"c1\"># Presto</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"s1\">'presto://localhost:8080/hive/default'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Hive</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"s1\">'hive://localhost:10000/default'</span><span class=\"p\">)</span>\n<span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'my_awesome_data'</span><span class=\"p\">,</span> <span class=\"n\">MetaData</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"p\">),</span> <span class=\"n\">autoload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">select</span><span class=\"p\">([</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)],</span> <span class=\"n\">from_obj</span><span class=\"o\">=</span><span class=\"n\">logs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">()</span>\n</pre>\n<p>Note: query generation functionality is not exhaustive or fully tested, but there should be no\nproblem with raw SQL.</p>\n</div>\n<div id=\"passing-session-configuration\">\n<h4>Passing session configuration</h4>\n<pre><span class=\"c1\"># DB-API</span>\n<span class=\"n\">hive</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">configuration</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'hive.exec.reducers.max'</span><span class=\"p\">:</span> <span class=\"s1\">'123'</span><span class=\"p\">})</span>\n<span class=\"n\">presto</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">session_props</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'query_max_run_time'</span><span class=\"p\">:</span> <span class=\"s1\">'1234m'</span><span class=\"p\">})</span>\n<span class=\"c1\"># SQLAlchemy</span>\n<span class=\"n\">create_engine</span><span class=\"p\">(</span>\n    <span class=\"s1\">'presto://user@host:443/hive'</span><span class=\"p\">,</span>\n    <span class=\"n\">connect_args</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'protocol'</span><span class=\"p\">:</span> <span class=\"s1\">'https'</span><span class=\"p\">,</span>\n                  <span class=\"s1\">'session_props'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'query_max_run_time'</span><span class=\"p\">:</span> <span class=\"s1\">'1234m'</span><span class=\"p\">}}</span>\n<span class=\"p\">)</span>\n<span class=\"n\">create_engine</span><span class=\"p\">(</span>\n    <span class=\"s1\">'hive://user@host:10000/database'</span><span class=\"p\">,</span>\n    <span class=\"n\">connect_args</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'configuration'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'hive.exec.reducers.max'</span><span class=\"p\">:</span> <span class=\"s1\">'123'</span><span class=\"p\">}},</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># SQLAlchemy with LDAP</span>\n<span class=\"n\">create_engine</span><span class=\"p\">(</span>\n    <span class=\"s1\">'hive://user:password@host:10000/database'</span><span class=\"p\">,</span>\n    <span class=\"n\">connect_args</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'auth'</span><span class=\"p\">:</span> <span class=\"s1\">'LDAP'</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>Install using</p>\n<ul>\n<li><tt>pip install pyhive[hive]</tt> for the Hive interface and</li>\n<li><tt>pip install pyhive[presto]</tt> for the Presto interface.</li>\n</ul>\n<p>PyHive works with</p>\n<ul>\n<li>Python 2.7 / Python 3</li>\n<li>For Presto: Presto install</li>\n<li>For Hive: <a href=\"https://cwiki.apache.org/confluence/display/Hive/Setting+up+HiveServer2\" rel=\"nofollow\">HiveServer2</a> daemon</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<p>See <a href=\"https://github.com/dropbox/PyHive/releases\" rel=\"nofollow\">https://github.com/dropbox/PyHive/releases</a>.</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<ul>\n<li>Please fill out the Dropbox Contributor License Agreement at <a href=\"https://opensource.dropbox.com/cla/\" rel=\"nofollow\">https://opensource.dropbox.com/cla/</a> and note this in your pull request.</li>\n<li>Changes must come with tests, with the exception of trivial things like fixing comments. See .travis.yml for the test environment setup.</li>\n<li>Notes on project scope:<ul>\n<li>This project is intended to be a minimal Hive/Presto client that does that one thing and nothing else.\nFeatures that can be implemented on top of PyHive, such integration with your favorite data analysis library, are likely out of scope.</li>\n<li>We prefer having a small number of generic features over a large number of specialized, inflexible features.\nFor example, the Presto code takes an arbitrary <tt>requests_session</tt> argument for customizing HTTP calls, as opposed to having a separate parameter/branch for each <tt>requests</tt> option.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<a href=\"https://travis-ci.org/dropbox/PyHive\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/dropbox/PyHive.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05765cc2e270419a386ab48d01dee1719b3ed7a4/68747470733a2f2f7472617669732d63692e6f72672f64726f70626f782f5079486976652e737667\"></a>\n<a href=\"http://codecov.io/github/dropbox/PyHive?branch=master\" rel=\"nofollow\"><img alt=\"http://codecov.io/github/dropbox/PyHive/coverage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df66378a2e718abcd157ebf8c8e65389feb01a70/687474703a2f2f636f6465636f762e696f2f6769746875622f64726f70626f782f5079486976652f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Run the following in an environment with Hive/Presto:</p>\n<pre>./scripts/make_test_tables.sh\nvirtualenv --no-site-packages env\nsource env/bin/activate\npip install -e .\npip install -r dev_requirements.txt\npy.test\n</pre>\n<p>WARNING: This drops/creates tables named <tt>one_row</tt>, <tt>one_row_complex</tt>, and <tt>many_rows</tt>, plus a\ndatabase called <tt>pyhive_test_database</tt>.</p>\n</div>\n<div id=\"updating-tcliservice\">\n<h3>Updating TCLIService</h3>\n<p>The TCLIService module is autogenerated using a <tt>TCLIService.thrift</tt> file. To update it, the\n<tt>generate.py</tt> file can be used: <tt>python generate.py &lt;TCLIServiceURL&gt;</tt>. When left blank, the\nversion for Hive 2.3 will be downloaded.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6740044, "releases": {"0.6.1": [{"comment_text": "", "digests": {"md5": "d81f2b0493373bdee8857309959b4c63", "sha256": "63b8afd147279d8611b323299d5fae0028937fc43132ff97c34e4af988991a53"}, "downloads": -1, "filename": "PyHive-dm-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d81f2b0493373bdee8857309959b4c63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42177, "upload_time": "2020-03-03T12:42:11", "upload_time_iso_8601": "2020-03-03T12:42:11.959950Z", "url": "https://files.pythonhosted.org/packages/d5/75/9ca2a0f62372252fc4fb9ed1d02c80f74b3d1445a3cb9f076f52c7524a07/PyHive-dm-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d81f2b0493373bdee8857309959b4c63", "sha256": "63b8afd147279d8611b323299d5fae0028937fc43132ff97c34e4af988991a53"}, "downloads": -1, "filename": "PyHive-dm-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d81f2b0493373bdee8857309959b4c63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42177, "upload_time": "2020-03-03T12:42:11", "upload_time_iso_8601": "2020-03-03T12:42:11.959950Z", "url": "https://files.pythonhosted.org/packages/d5/75/9ca2a0f62372252fc4fb9ed1d02c80f74b3d1445a3cb9f076f52c7524a07/PyHive-dm-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:22 2020"}