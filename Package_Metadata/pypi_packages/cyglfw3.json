{"info": {"author": "Adam Griffiths", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Multimedia :: Graphics", "Topic :: Multimedia :: Graphics :: 3D Rendering", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=======\nCyGLFW3\n=======\n\nPython bindings for `GLFW 3+ <http://www.glfw.org>`_ using Cython.\n\nProvides an API which matches the C API.\n\nDifferences\n===========\n\n* Enumerations have dropped their \"GLFW\\_\" prefix.\n* Functions have dropped their \"glfw\" prefix.\n* {Get|Set}UserPointer is not accessible as it doesn't make sense for Python.\n* The {Get|Set}Time functions are available but Python's time module should be used in preference.\n\n\nC Code\n======\n\n::\n\n    #include <GLFW/glfw3.h>\n    int main(void)\n    {\n        GLFWwindow* window;\n\n        /* Initialize the library */\n        if (!glfwInit())\n            return -1;\n\n        /* Create a windowed mode window and its OpenGL context */\n        window = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);\n\n        if (!window)\n        {\n            glfwTerminate();\n            return -1;\n        }\n\n        glfwMakeContextCurrent(window);\n        while (!glfwWindowShowClose(window))\n        {\n            /* Render here */\n\n            /* Display the render buffer */\n            glfwSwapBuffers(window);\n\n            /* Pump the message queue */\n            glfwPollEvents();\n        }\n\n        /* Shutdown */\n        glfwTerminate();\n        return 0;\n    }\n\n\nPython Code\n===========\n\n::\n\n    # needed if you're running the OS-X system python\n    try:\n        from AppKit import NSApp, NSApplication\n    except:\n        pass\n\n    import cyglfw3 as glfw\n    if not glfw.Init():\n        exit()\n\n    window = glfw.CreateWindow(640, 480, 'Hello World')\n    if not window:\n        glfw.Terminate()\n        exit()\n\n    glfw.MakeContextCurrent(window)\n    while not glfw.WindowShouldClose(window):\n        # Render here\n\n        # Swap front and back buffers\n        glfw.SwapBuffers(window)\n\n        # Poll for and process events\n        glfw.PollEvents()\n\n    glfw.Terminate()\n\n\nPrefix Compatible Code\n======================\n\nA compatibility layer is provided to be 1:1 compatible with other GLFW3 wrappers.\nCommonly, these don't drop the `GLFW_` prefix from constants, nor the `glfw` prefix\nfrom functions.\n\nTo use the compatibility module, use `import cyglfw3.compatible as glfw`::\n\n    # needed if you're running the OS-X system python\n    try:\n        from AppKit import NSApp, NSApplication\n    except:\n        pass\n\n    import cyglfw3.compatible as glfw\n    if not glfw.glfwInit():\n        exit()\n\n    window = glfw.glfwCreateWindow(640, 480, 'Hello World')\n    if not window:\n        glfw.glfwTerminate()\n        exit()\n\n    glfw.glfwMakeContextCurrent(window)\n    while not glfw.glfwWindowShouldClose(window):\n        # Render here\n\n        # Swap front and back buffers\n        glfw.glfwSwapBuffers(window)\n\n        # Poll for and process events\n        glfw.glfwPollEvents()\n\n    glfw.glfwTerminate()\n\n\nInstallation\n============\n\n::\n\n    pip install cyglfw3\n\n\nManual Building\n===============\n\nIf you have trouble building CyGLFW3, please raise an issue on Github.\n\nWhen specifying the include path, ensure that the GLFW directory is a sub-directory\nof that path.\nFor example: the path /usr/local/include/GLFW would use include /usr/local/include\n\nThe lib path should contain the glfw library file.\n\n\nOS-X / Linux\n------------\n\nCyGLFW3 provides support for OS-X `Homebrew <http://brew.sh/>`_ and `MacPorts <https://www.macports.org/>`_.\n\nLinux builds should work with any package manager.\n\n::\n\n    python setup.py build_ext -i\n\n\nSpecifying an alternate GLFW installation path:\n\n::\n\n    env CPATH=<include path> LIBRARY_PATH=<lib path> python setup.py build_ext -i\n\n\nWindows\n-------\n\nThe following commands are untested, please report their success or failure.\n\n::\n\n    set GLFW_ROOT=<path to include/GLFW/glfw3.h>\n    python setup.py build_ext -i\n\nIf you get `ImportError: DLL load failed: The specified procedure could not be found.`\nPlease place the glfw3.dll from `lib-vc2012` in the installation path.\n\n\nCommon Problems\n===============\n\n- PyOpenGL reports the OpenGL version as None and my GL functions do nothing!\n\nYou _must_ set an active context or your OpenGL calls will go no where::\n\n    glfw.MakeContextCurrent(window)\n\n\nThis is by design in GLFW3.\n\n\nDependencies\n============\n\n* Python 2.7 / 3.4\n* Cython\n* GLFW 3", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/adamlwgriffiths/cyglfw3", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "cyglfw3", "package_url": "https://pypi.org/project/cyglfw3/", "platform": "any", "project_url": "https://pypi.org/project/cyglfw3/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/adamlwgriffiths/cyglfw3"}, "release_url": "https://pypi.org/project/cyglfw3/3.1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Python bindings for GLFW 3+ using Cython", "version": "3.1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python bindings for <a href=\"http://www.glfw.org\" rel=\"nofollow\">GLFW 3+</a> using Cython.</p>\n<p>Provides an API which matches the C API.</p>\n<div id=\"differences\">\n<h2>Differences</h2>\n<ul>\n<li>Enumerations have dropped their \u201cGLFW_\u201d prefix.</li>\n<li>Functions have dropped their \u201cglfw\u201d prefix.</li>\n<li>{Get|Set}UserPointer is not accessible as it doesn\u2019t make sense for Python.</li>\n<li>The {Get|Set}Time functions are available but Python\u2019s time module should be used in preference.</li>\n</ul>\n</div>\n<div id=\"c-code\">\n<h2>C Code</h2>\n<pre>#include &lt;GLFW/glfw3.h&gt;\nint main(void)\n{\n    GLFWwindow* window;\n\n    /* Initialize the library */\n    if (!glfwInit())\n        return -1;\n\n    /* Create a windowed mode window and its OpenGL context */\n    window = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);\n\n    if (!window)\n    {\n        glfwTerminate();\n        return -1;\n    }\n\n    glfwMakeContextCurrent(window);\n    while (!glfwWindowShowClose(window))\n    {\n        /* Render here */\n\n        /* Display the render buffer */\n        glfwSwapBuffers(window);\n\n        /* Pump the message queue */\n        glfwPollEvents();\n    }\n\n    /* Shutdown */\n    glfwTerminate();\n    return 0;\n}\n</pre>\n</div>\n<div id=\"python-code\">\n<h2>Python Code</h2>\n<pre># needed if you're running the OS-X system python\ntry:\n    from AppKit import NSApp, NSApplication\nexcept:\n    pass\n\nimport cyglfw3 as glfw\nif not glfw.Init():\n    exit()\n\nwindow = glfw.CreateWindow(640, 480, 'Hello World')\nif not window:\n    glfw.Terminate()\n    exit()\n\nglfw.MakeContextCurrent(window)\nwhile not glfw.WindowShouldClose(window):\n    # Render here\n\n    # Swap front and back buffers\n    glfw.SwapBuffers(window)\n\n    # Poll for and process events\n    glfw.PollEvents()\n\nglfw.Terminate()\n</pre>\n</div>\n<div id=\"prefix-compatible-code\">\n<h2>Prefix Compatible Code</h2>\n<p>A compatibility layer is provided to be 1:1 compatible with other GLFW3 wrappers.\nCommonly, these don\u2019t drop the <cite>GLFW_</cite> prefix from constants, nor the <cite>glfw</cite> prefix\nfrom functions.</p>\n<p>To use the compatibility module, use <cite>import cyglfw3.compatible as glfw</cite>:</p>\n<pre># needed if you're running the OS-X system python\ntry:\n    from AppKit import NSApp, NSApplication\nexcept:\n    pass\n\nimport cyglfw3.compatible as glfw\nif not glfw.glfwInit():\n    exit()\n\nwindow = glfw.glfwCreateWindow(640, 480, 'Hello World')\nif not window:\n    glfw.glfwTerminate()\n    exit()\n\nglfw.glfwMakeContextCurrent(window)\nwhile not glfw.glfwWindowShouldClose(window):\n    # Render here\n\n    # Swap front and back buffers\n    glfw.glfwSwapBuffers(window)\n\n    # Poll for and process events\n    glfw.glfwPollEvents()\n\nglfw.glfwTerminate()\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install cyglfw3\n</pre>\n</div>\n<div id=\"manual-building\">\n<h2>Manual Building</h2>\n<p>If you have trouble building CyGLFW3, please raise an issue on Github.</p>\n<p>When specifying the include path, ensure that the GLFW directory is a sub-directory\nof that path.\nFor example: the path /usr/local/include/GLFW would use include /usr/local/include</p>\n<p>The lib path should contain the glfw library file.</p>\n<div id=\"os-x-linux\">\n<h3>OS-X / Linux</h3>\n<p>CyGLFW3 provides support for OS-X <a href=\"http://brew.sh/\" rel=\"nofollow\">Homebrew</a> and <a href=\"https://www.macports.org/\" rel=\"nofollow\">MacPorts</a>.</p>\n<p>Linux builds should work with any package manager.</p>\n<pre>python setup.py build_ext -i\n</pre>\n<p>Specifying an alternate GLFW installation path:</p>\n<pre>env CPATH=&lt;include path&gt; LIBRARY_PATH=&lt;lib path&gt; python setup.py build_ext -i\n</pre>\n</div>\n<div id=\"windows\">\n<h3>Windows</h3>\n<p>The following commands are untested, please report their success or failure.</p>\n<pre>set GLFW_ROOT=&lt;path to include/GLFW/glfw3.h&gt;\npython setup.py build_ext -i\n</pre>\n<p>If you get <cite>ImportError: DLL load failed: The specified procedure could not be found.</cite>\nPlease place the glfw3.dll from <cite>lib-vc2012</cite> in the installation path.</p>\n</div>\n</div>\n<div id=\"common-problems\">\n<h2>Common Problems</h2>\n<ul>\n<li>PyOpenGL reports the OpenGL version as None and my GL functions do nothing!</li>\n</ul>\n<p>You _must_ set an active context or your OpenGL calls will go no where:</p>\n<pre>glfw.MakeContextCurrent(window)\n</pre>\n<p>This is by design in GLFW3.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Python 2.7 / 3.4</li>\n<li>Cython</li>\n<li>GLFW 3</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1751773, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "be83e55245e4acc4d1fb46929c682d0d", "sha256": "8dc0af9679e0b27e16d9e1ca9b462f7311faf181684e2eec8d3b6af1bb2146d8"}, "downloads": -1, "filename": "cyglfw3-0.0.1.tar.gz", "has_sig": false, "md5_digest": "be83e55245e4acc4d1fb46929c682d0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74143, "upload_time": "2013-11-07T10:04:40", "upload_time_iso_8601": "2013-11-07T10:04:40.808282Z", "url": "https://files.pythonhosted.org/packages/86/69/9da01f9a144aadc048cd0d8d2a2fb2e22b407f808c381ff5fe56927222db/cyglfw3-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "dae04b7bf6b989929c50939b0235482f", "sha256": "6c8a5061c777fd29827384fdd89ccae3673a132ebb0bf2807d9d6a7efb7116f7"}, "downloads": -1, "filename": "cyglfw3-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dae04b7bf6b989929c50939b0235482f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74199, "upload_time": "2013-11-13T01:29:51", "upload_time_iso_8601": "2013-11-13T01:29:51.884731Z", "url": "https://files.pythonhosted.org/packages/1e/6c/c929cbe3345caa35038e45a78dc44c103f68ef155a4237671eeabcad816b/cyglfw3-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "899300dea6c03531b651c56bf2263156", "sha256": "486dc7645905ee0986a6d148978b7b2f9736c94a2029b41b0bce3cf7841cf2ec"}, "downloads": -1, "filename": "cyglfw3-0.0.3.tar.gz", "has_sig": false, "md5_digest": "899300dea6c03531b651c56bf2263156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76713, "upload_time": "2014-05-29T05:35:00", "upload_time_iso_8601": "2014-05-29T05:35:00.610407Z", "url": "https://files.pythonhosted.org/packages/92/c4/253e253963c05b97e327750f51ed7dd4e208ef5f14a69e984fb2b122cca2/cyglfw3-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "fc54dcdd866926b9aa105571b012c999", "sha256": "e927651f3cd329d2fa051407a33ac946758d7bb9364c273859fc0a4e78b5c2ce"}, "downloads": -1, "filename": "cyglfw3-0.0.4.tar.gz", "has_sig": false, "md5_digest": "fc54dcdd866926b9aa105571b012c999", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76921, "upload_time": "2014-06-12T17:34:41", "upload_time_iso_8601": "2014-06-12T17:34:41.952301Z", "url": "https://files.pythonhosted.org/packages/6f/1d/3ab92ad0085a9dbfa8519a5edc7e5883fe3e63d0e80cdb71ce6904ed1e07/cyglfw3-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "c4ea2e57b652d310723cbc9bb0e118b0", "sha256": "6158b2cc69143c3a5108ecc02fca76a456c4b262fa22ed9f41344d22d3b57113"}, "downloads": -1, "filename": "cyglfw3-0.0.5.tar.gz", "has_sig": false, "md5_digest": "c4ea2e57b652d310723cbc9bb0e118b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77256, "upload_time": "2014-07-23T01:07:32", "upload_time_iso_8601": "2014-07-23T01:07:32.445641Z", "url": "https://files.pythonhosted.org/packages/55/3d/a559c55f9952a9bd9df142b0b8a2b27c1f9bae3a223f3545a13568770aed/cyglfw3-0.0.5.tar.gz", "yanked": false}], "3.0.4.5": [{"comment_text": "", "digests": {"md5": "fa222d0fb1c4ee42cf96d3c11b26016d", "sha256": "ca06c146ba78229b37083c5872d0bdb38a4d895c18f9bdad29814421627c3070"}, "downloads": -1, "filename": "cyglfw3-3.0.4.5.tar.gz", "has_sig": false, "md5_digest": "fa222d0fb1c4ee42cf96d3c11b26016d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77320, "upload_time": "2014-12-06T02:14:28", "upload_time_iso_8601": "2014-12-06T02:14:28.256111Z", "url": "https://files.pythonhosted.org/packages/24/c9/549dc0ed0f1aac6d93a92f9b9afef166d64679e9851d3d9cf24aca8cb3d8/cyglfw3-3.0.4.5.tar.gz", "yanked": false}], "3.0.4.6": [{"comment_text": "", "digests": {"md5": "cfe86586eb90da78db96091f7e48a266", "sha256": "3ab85ab9f2770112a79214a5b2b603d9a0a8a973ad421c0728be402cc6364f45"}, "downloads": -1, "filename": "cyglfw3-3.0.4.6.tar.gz", "has_sig": false, "md5_digest": "cfe86586eb90da78db96091f7e48a266", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77816, "upload_time": "2014-12-08T03:25:35", "upload_time_iso_8601": "2014-12-08T03:25:35.382263Z", "url": "https://files.pythonhosted.org/packages/f0/3f/0f35b5fec23ffb7b3cd3f305a65958aae4227f2725d4d95ec78e89d2a518/cyglfw3-3.0.4.6.tar.gz", "yanked": false}], "3.0.4.7": [{"comment_text": "", "digests": {"md5": "ace27b116998af627df465f6eda57d0c", "sha256": "f57487b8a2c7eca4090f7f2165f113cbdfa23e63aed09467138d189297415925"}, "downloads": -1, "filename": "cyglfw3-3.0.4.7.tar.gz", "has_sig": false, "md5_digest": "ace27b116998af627df465f6eda57d0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78229, "upload_time": "2015-02-10T02:12:49", "upload_time_iso_8601": "2015-02-10T02:12:49.386614Z", "url": "https://files.pythonhosted.org/packages/c0/6d/b5d459da654a3369472a4dd3de0661b215b8480ab6ce8782e5bb8644fc54/cyglfw3-3.0.4.7.tar.gz", "yanked": false}], "3.1.0.1": [{"comment_text": "", "digests": {"md5": "507a2b48b30accfea6357ccb18b0af44", "sha256": "c45856a885df66f7f23ea1828ded8ed7128da611632512841d3005060130cbe8"}, "downloads": -1, "filename": "cyglfw3-3.1.0.1.tar.gz", "has_sig": false, "md5_digest": "507a2b48b30accfea6357ccb18b0af44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154813, "upload_time": "2015-03-09T06:52:49", "upload_time_iso_8601": "2015-03-09T06:52:49.113178Z", "url": "https://files.pythonhosted.org/packages/e2/aa/d0547d25b0b27fe54f64b65d6a6542261447641cb36bb24d195f01793e44/cyglfw3-3.1.0.1.tar.gz", "yanked": false}], "3.1.0.2": [{"comment_text": "", "digests": {"md5": "73d9872dd61ff565794eef28a05fd8e9", "sha256": "3bcb31c4e6f0c7020b48715cd598c809f0c36b66b191e345cb53adf857353863"}, "downloads": -1, "filename": "cyglfw3-3.1.0.2.tar.gz", "has_sig": false, "md5_digest": "73d9872dd61ff565794eef28a05fd8e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159258, "upload_time": "2015-10-04T23:37:21", "upload_time_iso_8601": "2015-10-04T23:37:21.523615Z", "url": "https://files.pythonhosted.org/packages/41/22/844d0de382a98cddac4c740b7449e6b36e0ccdec8429d18466b0239c8fcb/cyglfw3-3.1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73d9872dd61ff565794eef28a05fd8e9", "sha256": "3bcb31c4e6f0c7020b48715cd598c809f0c36b66b191e345cb53adf857353863"}, "downloads": -1, "filename": "cyglfw3-3.1.0.2.tar.gz", "has_sig": false, "md5_digest": "73d9872dd61ff565794eef28a05fd8e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159258, "upload_time": "2015-10-04T23:37:21", "upload_time_iso_8601": "2015-10-04T23:37:21.523615Z", "url": "https://files.pythonhosted.org/packages/41/22/844d0de382a98cddac4c740b7449e6b36e0ccdec8429d18466b0239c8fcb/cyglfw3-3.1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:06 2020"}