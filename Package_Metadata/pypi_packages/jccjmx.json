{"info": {"author": "Christian Heimes", "author_email": "c.heimes@semantics.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Sun Public License", "Natural Language :: English", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Java", "Programming Language :: Python", "Topic :: Multimedia :: Graphics", "Topic :: Software Development :: Debuggers"], "description": "Abstract\n========\n\nSSH-tunnel friendly monitoring of embedded Java Runtimes using MBeans, Java \nManagement Extensions (JMX) and Remote Method Invocation (RMI) for Python and \nPyLucenet.\n\nRationale\n=========\n\njccjmx is a convenience helper for JCC and PyLucene to create a JMX RMI\nconnector at runtime. The usual way to a connector with vmargs \n'-Dcom.sun.management.jmxremote' (or similar) works only on startup. Also\nthis opens two ports (one for the connector and one for the RMI registry).\nThe RMI registry port is assigned dynamically which makes firewall rules\nor SSH/SSL tunnels impossible.\n\njccjmx allows you to start a RMI and JMX connector programmatically without \nrestarting your Python application. The platform MBean server provides live\nmonitoring of JRE's memory usage (heap, caches), JRE's CPU usage, Java threads,\nattached Python threads and more. The JDK is shipped with two GUI programs\nfor monitoring: jconsole and jvisualvm.\n\njccjmx is based on Daniel Fuchs' examples from his blog at Sun (now Oracle).\nI've modified his code and ported it from a premain agent to a standalone\nclass.\n\n\nUsage\n=====\n\nThe import order is crucial! You must import and init lucene and jccjmx in \nthe correct order. Otherwise your process will segfault.\n\n>>> import lucene\n>>> import jccjmx\n\nInitialize the VM for both packages. The second initVM() just adds the CLASSPATH\nof jccjmx.\n\n>>> lucene.initVM() # doctest: +ELLIPSIS\n<jcc.JCCEnv object at 0x...>\n>>> jccjmx.initVM() # doctest: +ELLIPSIS\n<jcc.JCCEnv object at 0x...>\n\nCreate an agent that listens on port 12345. You should create just one\ninstane of JccJmxAgent during the life time of your application.\n\n>>> agent = jccjmx.JccJmxAgent(12345)\n\nBy default the agent is bound to 127.0.0.1. You can specificy another hostname or\nIP address with jccjmx.JccJmxAgent(\"hostname\", portnumber).\n\nA RMI is created immediately and bound to \"*:port\" but no agent is listening yet. You\nhave to activate is explicitly. This allows you to delay the agent.\n\n>>> agent.isActive()\nFalse\n>>> agent.start()\n>>> agent.isActive()\nTrue\n>>> agent.stop()\n>>> agent.isActive()\nFalse\n\nIn order to connect from a remote host you need to know the service URL:\n\n>>> agent.getServiceURL()\nu'service:jmx:rmi://127.0.0.1:12345/jndi/rmi://127.0.0.1:12345/jmxrmi'\n\nFrom a remote host:\n\n$ ssh -L12345:127.0.0.1:12345 server\n$ jconsole service:jmx:rmi://127.0.0.1:12345/jndi/rmi://127.0.0.1:12345/jmxrmi\n\n\nSecurity\n========\n\nThe RMI registry is always bound to all possible network devices. This \nshouldn't be an issue but I can't guarantee it.\n\njccjmx doesn't use SSL to authenticate clients and encrypt the connection. It's\nup to you to use an encrypted tunnel. Future versions of jccjmx may support\nSSL.\n\n\nTrouble shooting\n================\n\nConnection refused\n------------------\n\nYou may get a connection refused error when the RMI hostname isn't set\ncorrectly. jccjmx sets the system property unless it is already set. You can\nforce a correct hostname with e.g.\n\n  -Djava.rmi.server.hostname=127.0.0.1\n\n\nIPv4 vs. IPv6\n-------------\n\nJava prefers IPv6 connections over IPv4 connections and usually binds to\nIPv6 TCP. If you are having trouble with a mixed network you can force the\nJRE to prefer IPv4 with\n\n   -Djava.net.preferIPv4Stack=true\n\n\nSources\n=======\n\nhttps://blogs.oracle.com/jmxetc/entry/connecting_through_firewall_using_jmx\nhttps://blogs.oracle.com/jmxetc/entry/more_on_premain_and_jmx\nhttps://blogs.oracle.com/jmxetc/entry/jmx_connecting_through_firewalls_using\n\nAuthors\n=======\n\nChristian Heimes\nDaniel Fuchs (original author of the JMX agent) \n\n\nCopyright\n=========\n \nOriginal java code::\n  \n  Copyright 2007 Sun Microsystems, Inc.  All Rights Reserved. \n \nJCC wrapper, start/stop features::\n \n  Copyright (C) 2012 semantics GmbH\n\n  semantics\n  Kommunikationsmanagement GmbH\n  Viktoriaallee 45\n  D-52066 Aachen\n  Germany\n\n  Tel.: +49 241 89 49 89 29\n  eMail: info(at)semantics.de\n  http://www.semantics.de/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.semantics.de", "keywords": "java jcc jmx rmi", "license": "Sun Public License", "maintainer": null, "maintainer_email": null, "name": "jccjmx", "package_url": "https://pypi.org/project/jccjmx/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jccjmx/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.semantics.de"}, "release_url": "https://pypi.org/project/jccjmx/0.1/", "requires_dist": null, "requires_python": null, "summary": "Java Management Extension (JMX) wrapper for JCC", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Abstract<br>========<br><br>SSH-tunnel friendly monitoring of embedded Java Runtimes using MBeans, Java <br>Management Extensions (JMX) and Remote Method Invocation (RMI) for Python and <br>PyLucenet.<br><br>Rationale<br>=========<br><br>jccjmx is a convenience helper for JCC and PyLucene to create a JMX RMI<br>connector at runtime. The usual way to a connector with vmargs <br>'-Dcom.sun.management.jmxremote' (or similar) works only on startup. Also<br>this opens two ports (one for the connector and one for the RMI registry).<br>The RMI registry port is assigned dynamically which makes firewall rules<br>or SSH/SSL tunnels impossible.<br><br>jccjmx allows you to start a RMI and JMX connector programmatically without <br>restarting your Python application. The platform MBean server provides live<br>monitoring of JRE's memory usage (heap, caches), JRE's CPU usage, Java threads,<br>attached Python threads and more. The JDK is shipped with two GUI programs<br>for monitoring: jconsole and jvisualvm.<br><br>jccjmx is based on Daniel Fuchs' examples from his blog at Sun (now Oracle).<br>I've modified his code and ported it from a premain agent to a standalone<br>class.<br><br><br>Usage<br>=====<br><br>The import order is crucial! You must import and init lucene and jccjmx in <br>the correct order. Otherwise your process will segfault.<br><br>&gt;&gt;&gt; import lucene<br>&gt;&gt;&gt; import jccjmx<br><br>Initialize the VM for both packages. The second initVM() just adds the CLASSPATH<br>of jccjmx.<br><br>&gt;&gt;&gt; lucene.initVM() # doctest: +ELLIPSIS<br>&lt;jcc.JCCEnv object at 0x...&gt;<br>&gt;&gt;&gt; jccjmx.initVM() # doctest: +ELLIPSIS<br>&lt;jcc.JCCEnv object at 0x...&gt;<br><br>Create an agent that listens on port 12345. You should create just one<br>instane of JccJmxAgent during the life time of your application.<br><br>&gt;&gt;&gt; agent = jccjmx.JccJmxAgent(12345)<br><br>By default the agent is bound to 127.0.0.1. You can specificy another hostname or<br>IP address with jccjmx.JccJmxAgent(\"hostname\", portnumber).<br><br>A RMI is created immediately and bound to \"*:port\" but no agent is listening yet. You<br>have to activate is explicitly. This allows you to delay the agent.<br><br>&gt;&gt;&gt; agent.isActive()<br>False<br>&gt;&gt;&gt; agent.start()<br>&gt;&gt;&gt; agent.isActive()<br>True<br>&gt;&gt;&gt; agent.stop()<br>&gt;&gt;&gt; agent.isActive()<br>False<br><br>In order to connect from a remote host you need to know the service URL:<br><br>&gt;&gt;&gt; agent.getServiceURL()<br>u'service:jmx:rmi://127.0.0.1:12345/jndi/rmi://127.0.0.1:12345/jmxrmi'<br><br>From a remote host:<br><br>$ ssh -L12345:127.0.0.1:12345 server<br>$ jconsole service:jmx:rmi://127.0.0.1:12345/jndi/rmi://127.0.0.1:12345/jmxrmi<br><br><br>Security<br>========<br><br>The RMI registry is always bound to all possible network devices. This <br>shouldn't be an issue but I can't guarantee it.<br><br>jccjmx doesn't use SSL to authenticate clients and encrypt the connection. It's<br>up to you to use an encrypted tunnel. Future versions of jccjmx may support<br>SSL.<br><br><br>Trouble shooting<br>================<br><br>Connection refused<br>------------------<br><br>You may get a connection refused error when the RMI hostname isn't set<br>correctly. jccjmx sets the system property unless it is already set. You can<br>force a correct hostname with e.g.<br><br>  -Djava.rmi.server.hostname=127.0.0.1<br><br><br>IPv4 vs. IPv6<br>-------------<br><br>Java prefers IPv6 connections over IPv4 connections and usually binds to<br>IPv6 TCP. If you are having trouble with a mixed network you can force the<br>JRE to prefer IPv4 with<br><br>   -Djava.net.preferIPv4Stack=true<br><br><br>Sources<br>=======<br><br>https://blogs.oracle.com/jmxetc/entry/connecting_through_firewall_using_jmx<br>https://blogs.oracle.com/jmxetc/entry/more_on_premain_and_jmx<br>https://blogs.oracle.com/jmxetc/entry/jmx_connecting_through_firewalls_using<br><br>Authors<br>=======<br><br>Christian Heimes<br>Daniel Fuchs (original author of the JMX agent) <br><br><br>Copyright<br>=========<br> <br>Original java code::<br>  <br>  Copyright 2007 Sun Microsystems, Inc.  All Rights Reserved. <br> <br>JCC wrapper, start/stop features::<br> <br>  Copyright (C) 2012 semantics GmbH<br><br>  semantics<br>  Kommunikationsmanagement GmbH<br>  Viktoriaallee 45<br>  D-52066 Aachen<br>  Germany<br><br>  Tel.: +49 241 89 49 89 29<br>  eMail: info(at)semantics.de<br>  http://www.semantics.de/\n          </div>"}, "last_serial": 793593, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "907d6331bc8def7a56ce95da7db04eea", "sha256": "6a1927f265e5f8503d30bb2bcc469ccc87dd8e4ed0eb94ad73d7bfdb55aa6315"}, "downloads": -1, "filename": "jccjmx-0.1.tar.gz", "has_sig": false, "md5_digest": "907d6331bc8def7a56ce95da7db04eea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8105, "upload_time": "2012-05-07T16:10:41", "upload_time_iso_8601": "2012-05-07T16:10:41.275687Z", "url": "https://files.pythonhosted.org/packages/b1/6a/1d7c3bcd41aa0e01bb8b34253554f05064201ce4fffc21a661713736ddb5/jccjmx-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "907d6331bc8def7a56ce95da7db04eea", "sha256": "6a1927f265e5f8503d30bb2bcc469ccc87dd8e4ed0eb94ad73d7bfdb55aa6315"}, "downloads": -1, "filename": "jccjmx-0.1.tar.gz", "has_sig": false, "md5_digest": "907d6331bc8def7a56ce95da7db04eea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8105, "upload_time": "2012-05-07T16:10:41", "upload_time_iso_8601": "2012-05-07T16:10:41.275687Z", "url": "https://files.pythonhosted.org/packages/b1/6a/1d7c3bcd41aa0e01bb8b34253554f05064201ce4fffc21a661713736ddb5/jccjmx-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:59 2020"}