{"info": {"author": "Thiago Teixeira", "author_email": "me@thiagot.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# htbuilder \u2014 tiny HTML string builder for Python\n\nhtbuilder lets you build HTML strings using a purely functional syntax in Python.\nWhy use templating languages when you can just use functions?\n\n(PS: If you like this, check out [jsbuild](https://github.com/tvst/jsbuild) which\nlets you build JavaScript strings by simply annotating Python functions!)\n\n## Installation\n\nJust PIP it!\n\n```py\npip install htbuilder\n```\n\n## Usage\n\nJust import tags like `div` with `from htbuilder import div`, then call them:\n\n```py\n# Import any tag you want from htbuilder, and it just works!\n# (This syntax requires Python 3.7+. See below for an alternate syntax)\nfrom htbuilder import div\n\ndom = div('Hello world!')\n```\n\nThen you can get the string output by calling `str()` on it:\n\n```py\nstr(dom)\n# Returns '<div>Hello world!</div>'\n```\n\n...which means you can also just `print()` to see it in the terminal:\n\n```py\nprint(dom)\n# Prints '<div>Hello world!</div>'\n```\n\nTo specify attributes, call the tag builder with keyword args:\n\n```py\nprint(\n  div(id='sidebar', foo='bar')\n)\n# Prints '<div id=\"sidebar\" foo=\"bar\"></div>'\n```\n\nTo specify both attributes and children, first specify the attributes using\nkeyword args, then pass the children afterwards **inside a new\nset of parentheses**:\n\n```py\nprint(\n  div(id='sidebar', foo='bar')(\n    \"Hello world!\"\n  )\n)\n# Prints '<div id=\"sidebar\" foo=\"bar\">Hello world!</div>'\n```\n\nThis is required because Python doesn't allow you to pass keyword arguments\n_before_ you pass normal arguments.\n\n\n## Multiple children\n\nWant to output multiple children? Just pass them all as arguments:\n\n```py\nfrom htbuilder import div, ul, li, img\n\ndom = (\n  div(id='container')(\n    ul(_class='greetings')(\n      li('hello'),\n      li('hi'),\n      li('whattup'),\n    )\n  )\n)\n\nprint(dom)\n\n# Prints this (but without added spacing):\n# <div id=\"container\">\n#   <ul class=\"greetings\">\n#     <li>hello</li>\n#     <li>hi</li>\n#     <li>whattup</li>\n#   </ul>\n# </div>\n```\n\n## Programmatically add children\n\nYou can also pass any iterable to specify multiple children, which means you can\nsimply use things like generator expressions for great awesome:\n\n```py\nfrom htbuilder import div, ul, li, img\n\nimage_paths = [\n  'http://myimages.com/foo1.jpg',\n  'http://myimages.com/foo2.jpg',\n  'http://myimages.com/foo3.jpg',\n]\n\ndom = (\n  div(id='container')(\n    ul(_class='image-list')(\n      li(img(src=image_path, _class='large-image'))\n      for image_path in image_paths\n    )\n  )\n)\n\nprint(dom)\n# Prints:\n# <div id=\"container\">\n#   <ul class=\"image-list\">\n#     <li><img src=\"http://myimages.com/foo1.jpg\" class=\"large-image\"/></li>\n#     <li><img src=\"http://myimages.com/foo2.jpg\" class=\"large-image\"/></li>\n#     <li><img src=\"http://myimages.com/foo3.jpg\" class=\"large-image\"/></li>\n#   </ul>\n# </div>\n```\n\n## Conditionally add elements\n\nAnd because it's just Python, you can use an if/else expression to conditionally\ninsert elements:\n\n```py\nuse_bold = True\n\ndom = (\n  div(\n      b(\"bold text\")\n    if use_bold else\n      \"normal text\"\n  )\n)\n\nprint(dom)\n# Prints: <div><b>bold text</b></div>\n```\n\n## Styling\n\nWe provide helpers to write styles without having to pass huge style strings as\narguments. Instead, just use handy builders like `styles()`, `classes()`,\n`fonts()`, along with helpers you can import from the `units` and `funcs`\nmodules.\n\n```py\n# styles, classes, and fonts are special imports to help build attribute strings.\nfrom htbuilder import div, styles, classes, fonts\n\n# You can import anything from .units and .funcs to make it easier to specify\n# units like \"%\" and \"px\", as well as functions like \"rgba()\" and \"rgba()\".\nfrom htbuilder.units import percent, px\nfrom htbuilder.funcs import rgba, rgb\n\nbottom_margin = 10\nis_big = True\n\ndom = (\n  div(\n    _class=classes('btn', big=is_big)\n    style=styles(\n        color='black',\n        font_family=fonts('Comic Sans', 'sans-serif'),\n        margin=px(0, 0, bottom_margin, 0),\n        padding=(px(10), percent(5))\n        box_shadow=[\n            (0, 0, px(10), rgba(0, 0, 0, 0.1)),\n            (0, 0, '2px', rgb(0, 0, 0)),\n        ],\n    )\n  )\n)\n\n# Prints:\n# <div\n#   class=\"btn big\"\n#   style=\"\n#     color: black;\n#     font-family: \"Comic Sans\", \"sans-serif\";\n#     margin: 0 0 10px 0;\n#     padding: 10px 5%;\n#     box-shadow: 0 0 10px rgba(0, 0, 0, 0.1), 0 0 2px rgb(0, 0, 0);\n#   \"></div>\n```\n\n\n## Working with Python &lt; 3.7\n\nIf using Python &lt; 3.7, the import should look like this instead:\n\n```py\nfrom htbuilder import H\n\ndiv = H.div\nul = H.ul\nli = H.li\nimg = H.img\n# ...etc\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tvst/htbuilder", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "htbuilder", "package_url": "https://pypi.org/project/htbuilder/", "platform": "", "project_url": "https://pypi.org/project/htbuilder/", "project_urls": {"Homepage": "https://github.com/tvst/htbuilder"}, "release_url": "https://pypi.org/project/htbuilder/0.1.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A purely-functional HTML builder for Python. Think JSX rather than templates.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>htbuilder \u2014 tiny HTML string builder for Python</h1>\n<p>htbuilder lets you build HTML strings using a purely functional syntax in Python.\nWhy use templating languages when you can just use functions?</p>\n<p>(PS: If you like this, check out <a href=\"https://github.com/tvst/jsbuild\" rel=\"nofollow\">jsbuild</a> which\nlets you build JavaScript strings by simply annotating Python functions!)</p>\n<h2>Installation</h2>\n<p>Just PIP it!</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">htbuilder</span>\n</pre>\n<h2>Usage</h2>\n<p>Just import tags like <code>div</code> with <code>from htbuilder import div</code>, then call them:</p>\n<pre><span class=\"c1\"># Import any tag you want from htbuilder, and it just works!</span>\n<span class=\"c1\"># (This syntax requires Python 3.7+. See below for an alternate syntax)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">htbuilder</span> <span class=\"kn\">import</span> <span class=\"n\">div</span>\n\n<span class=\"n\">dom</span> <span class=\"o\">=</span> <span class=\"n\">div</span><span class=\"p\">(</span><span class=\"s1\">'Hello world!'</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can get the string output by calling <code>str()</code> on it:</p>\n<pre><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dom</span><span class=\"p\">)</span>\n<span class=\"c1\"># Returns '&lt;div&gt;Hello world!&lt;/div&gt;'</span>\n</pre>\n<p>...which means you can also just <code>print()</code> to see it in the terminal:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dom</span><span class=\"p\">)</span>\n<span class=\"c1\"># Prints '&lt;div&gt;Hello world!&lt;/div&gt;'</span>\n</pre>\n<p>To specify attributes, call the tag builder with keyword args:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span>\n  <span class=\"n\">div</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'sidebar'</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Prints '&lt;div id=\"sidebar\" foo=\"bar\"&gt;&lt;/div&gt;'</span>\n</pre>\n<p>To specify both attributes and children, first specify the attributes using\nkeyword args, then pass the children afterwards <strong>inside a new\nset of parentheses</strong>:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span>\n  <span class=\"n\">div</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'sidebar'</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)(</span>\n    <span class=\"s2\">\"Hello world!\"</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Prints '&lt;div id=\"sidebar\" foo=\"bar\"&gt;Hello world!&lt;/div&gt;'</span>\n</pre>\n<p>This is required because Python doesn't allow you to pass keyword arguments\n<em>before</em> you pass normal arguments.</p>\n<h2>Multiple children</h2>\n<p>Want to output multiple children? Just pass them all as arguments:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">htbuilder</span> <span class=\"kn\">import</span> <span class=\"n\">div</span><span class=\"p\">,</span> <span class=\"n\">ul</span><span class=\"p\">,</span> <span class=\"n\">li</span><span class=\"p\">,</span> <span class=\"n\">img</span>\n\n<span class=\"n\">dom</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">div</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'container'</span><span class=\"p\">)(</span>\n    <span class=\"n\">ul</span><span class=\"p\">(</span><span class=\"n\">_class</span><span class=\"o\">=</span><span class=\"s1\">'greetings'</span><span class=\"p\">)(</span>\n      <span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">),</span>\n      <span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s1\">'hi'</span><span class=\"p\">),</span>\n      <span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s1\">'whattup'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dom</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Prints this (but without added spacing):</span>\n<span class=\"c1\"># &lt;div id=\"container\"&gt;</span>\n<span class=\"c1\">#   &lt;ul class=\"greetings\"&gt;</span>\n<span class=\"c1\">#     &lt;li&gt;hello&lt;/li&gt;</span>\n<span class=\"c1\">#     &lt;li&gt;hi&lt;/li&gt;</span>\n<span class=\"c1\">#     &lt;li&gt;whattup&lt;/li&gt;</span>\n<span class=\"c1\">#   &lt;/ul&gt;</span>\n<span class=\"c1\"># &lt;/div&gt;</span>\n</pre>\n<h2>Programmatically add children</h2>\n<p>You can also pass any iterable to specify multiple children, which means you can\nsimply use things like generator expressions for great awesome:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">htbuilder</span> <span class=\"kn\">import</span> <span class=\"n\">div</span><span class=\"p\">,</span> <span class=\"n\">ul</span><span class=\"p\">,</span> <span class=\"n\">li</span><span class=\"p\">,</span> <span class=\"n\">img</span>\n\n<span class=\"n\">image_paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s1\">'http://myimages.com/foo1.jpg'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'http://myimages.com/foo2.jpg'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'http://myimages.com/foo3.jpg'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">dom</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">div</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'container'</span><span class=\"p\">)(</span>\n    <span class=\"n\">ul</span><span class=\"p\">(</span><span class=\"n\">_class</span><span class=\"o\">=</span><span class=\"s1\">'image-list'</span><span class=\"p\">)(</span>\n      <span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"n\">image_path</span><span class=\"p\">,</span> <span class=\"n\">_class</span><span class=\"o\">=</span><span class=\"s1\">'large-image'</span><span class=\"p\">))</span>\n      <span class=\"k\">for</span> <span class=\"n\">image_path</span> <span class=\"ow\">in</span> <span class=\"n\">image_paths</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dom</span><span class=\"p\">)</span>\n<span class=\"c1\"># Prints:</span>\n<span class=\"c1\"># &lt;div id=\"container\"&gt;</span>\n<span class=\"c1\">#   &lt;ul class=\"image-list\"&gt;</span>\n<span class=\"c1\">#     &lt;li&gt;&lt;img src=\"http://myimages.com/foo1.jpg\" class=\"large-image\"/&gt;&lt;/li&gt;</span>\n<span class=\"c1\">#     &lt;li&gt;&lt;img src=\"http://myimages.com/foo2.jpg\" class=\"large-image\"/&gt;&lt;/li&gt;</span>\n<span class=\"c1\">#     &lt;li&gt;&lt;img src=\"http://myimages.com/foo3.jpg\" class=\"large-image\"/&gt;&lt;/li&gt;</span>\n<span class=\"c1\">#   &lt;/ul&gt;</span>\n<span class=\"c1\"># &lt;/div&gt;</span>\n</pre>\n<h2>Conditionally add elements</h2>\n<p>And because it's just Python, you can use an if/else expression to conditionally\ninsert elements:</p>\n<pre><span class=\"n\">use_bold</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">dom</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">div</span><span class=\"p\">(</span>\n      <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"s2\">\"bold text\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_bold</span> <span class=\"k\">else</span>\n      <span class=\"s2\">\"normal text\"</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dom</span><span class=\"p\">)</span>\n<span class=\"c1\"># Prints: &lt;div&gt;&lt;b&gt;bold text&lt;/b&gt;&lt;/div&gt;</span>\n</pre>\n<h2>Styling</h2>\n<p>We provide helpers to write styles without having to pass huge style strings as\narguments. Instead, just use handy builders like <code>styles()</code>, <code>classes()</code>,\n<code>fonts()</code>, along with helpers you can import from the <code>units</code> and <code>funcs</code>\nmodules.</p>\n<pre><span class=\"c1\"># styles, classes, and fonts are special imports to help build attribute strings.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">htbuilder</span> <span class=\"kn\">import</span> <span class=\"n\">div</span><span class=\"p\">,</span> <span class=\"n\">styles</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"p\">,</span> <span class=\"n\">fonts</span>\n\n<span class=\"c1\"># You can import anything from .units and .funcs to make it easier to specify</span>\n<span class=\"c1\"># units like \"%\" and \"px\", as well as functions like \"rgba()\" and \"rgba()\".</span>\n<span class=\"kn\">from</span> <span class=\"nn\">htbuilder.units</span> <span class=\"kn\">import</span> <span class=\"n\">percent</span><span class=\"p\">,</span> <span class=\"n\">px</span>\n<span class=\"kn\">from</span> <span class=\"nn\">htbuilder.funcs</span> <span class=\"kn\">import</span> <span class=\"n\">rgba</span><span class=\"p\">,</span> <span class=\"n\">rgb</span>\n\n<span class=\"n\">bottom_margin</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">is_big</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">dom</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">div</span><span class=\"p\">(</span>\n    <span class=\"n\">_class</span><span class=\"o\">=</span><span class=\"n\">classes</span><span class=\"p\">(</span><span class=\"s1\">'btn'</span><span class=\"p\">,</span> <span class=\"n\">big</span><span class=\"o\">=</span><span class=\"n\">is_big</span><span class=\"p\">)</span>\n    <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"n\">styles</span><span class=\"p\">(</span>\n        <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'black'</span><span class=\"p\">,</span>\n        <span class=\"n\">font_family</span><span class=\"o\">=</span><span class=\"n\">fonts</span><span class=\"p\">(</span><span class=\"s1\">'Comic Sans'</span><span class=\"p\">,</span> <span class=\"s1\">'sans-serif'</span><span class=\"p\">),</span>\n        <span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"n\">px</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bottom_margin</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n        <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">px</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">percent</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n        <span class=\"n\">box_shadow</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">px</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'2px'</span><span class=\"p\">,</span> <span class=\"n\">rgb</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Prints:</span>\n<span class=\"c1\"># &lt;div</span>\n<span class=\"c1\">#   class=\"btn big\"</span>\n<span class=\"c1\">#   style=\"</span>\n<span class=\"c1\">#     color: black;</span>\n<span class=\"c1\">#     font-family: \"Comic Sans\", \"sans-serif\";</span>\n<span class=\"c1\">#     margin: 0 0 10px 0;</span>\n<span class=\"c1\">#     padding: 10px 5%;</span>\n<span class=\"c1\">#     box-shadow: 0 0 10px rgba(0, 0, 0, 0.1), 0 0 2px rgb(0, 0, 0);</span>\n<span class=\"c1\">#   \"&gt;&lt;/div&gt;</span>\n</pre>\n<h2>Working with Python &lt; 3.7</h2>\n<p>If using Python &lt; 3.7, the import should look like this instead:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">htbuilder</span> <span class=\"kn\">import</span> <span class=\"n\">H</span>\n\n<span class=\"n\">div</span> <span class=\"o\">=</span> <span class=\"n\">H</span><span class=\"o\">.</span><span class=\"n\">div</span>\n<span class=\"n\">ul</span> <span class=\"o\">=</span> <span class=\"n\">H</span><span class=\"o\">.</span><span class=\"n\">ul</span>\n<span class=\"n\">li</span> <span class=\"o\">=</span> <span class=\"n\">H</span><span class=\"o\">.</span><span class=\"n\">li</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">H</span><span class=\"o\">.</span><span class=\"n\">img</span>\n<span class=\"c1\"># ...etc</span>\n</pre>\n\n          </div>"}, "last_serial": 7072418, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4b2df42282bf1fafe72871de7ddeded7", "sha256": "3bb51f5c3a67cef8f5d6f6cecfd5078ba4b5983d998379657846d2d4e42f0b2b"}, "downloads": -1, "filename": "htbuilder-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4b2df42282bf1fafe72871de7ddeded7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7021, "upload_time": "2020-03-30T04:36:16", "upload_time_iso_8601": "2020-03-30T04:36:16.919591Z", "url": "https://files.pythonhosted.org/packages/b9/55/c5030e28363034500c456193b5958a259af629a43f7be31026d6a1967401/htbuilder-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "6cdb8ca81345089b6ee9d6c490e28679", "sha256": "f89da8f42553ce7d6f28200a0fcc18883ae76d5eb836c7d8befb120e1754992a"}, "downloads": -1, "filename": "htbuilder-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6cdb8ca81345089b6ee9d6c490e28679", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7107, "upload_time": "2020-04-21T23:58:52", "upload_time_iso_8601": "2020-04-21T23:58:52.866361Z", "url": "https://files.pythonhosted.org/packages/b9/6d/007607325091911b82871ff1f35b461ccf1a201b30e001f83253d29a74f5/htbuilder-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6cdb8ca81345089b6ee9d6c490e28679", "sha256": "f89da8f42553ce7d6f28200a0fcc18883ae76d5eb836c7d8befb120e1754992a"}, "downloads": -1, "filename": "htbuilder-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6cdb8ca81345089b6ee9d6c490e28679", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7107, "upload_time": "2020-04-21T23:58:52", "upload_time_iso_8601": "2020-04-21T23:58:52.866361Z", "url": "https://files.pythonhosted.org/packages/b9/6d/007607325091911b82871ff1f35b461ccf1a201b30e001f83253d29a74f5/htbuilder-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:20 2020"}