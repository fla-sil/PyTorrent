{"info": {"author": "Michael Lorenzo", "author_email": "python@michael-lorenzo.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# twilio-webhooks\n\nA collection of webhooks for [Twilio](https://www.twilio.com/) using [Flask](https://palletsprojects.com/p/flask/).\n\n# Installation\n\n```console\npip install twilio-webhooks\n```\n\n**Availible webhooks:**\n\n- [SMSCommand](#SMSCommand) - When receiving a properly formated SMS runs a user-defined callable.\n- [ReceiveFax](#ReceiveFax) - When receving a fax saves a pdf file to a user-defined path.\n\n# SMSCommand\n\n**Webhook URL format:**\n\n> http://example.com/smscommand\n\nYou set this under \"Phone Numbers / Manage Numbers / Active Numbers\". Click your desired phone number. Look under a section called \"Messaging\", and with the \"CONFIGURE WITH\" drop-down menu select \"Webhooks, TwiML Bins, Functions, Studio or Proxy\". Now under the \"A MESSAGE COMES IN\" drop-down menu select \"Webhook\" and in the adjacent box place your URL.\n\n**Callback format:**\n\nThe callable should accept two arguments.\n\n1. A string containing who the SMS is from in E.164 format.\n2. A string that is either emtpy or the arg (see below) sent in the SMS.\n\nA return value will be sent as a reply.\n\n**SMS Format:**\n\n> `command` [`arg`]\n\n- `command` (**required**) is a case-insensitive string that was assigned to a user-defined callable. \n- `arg` (**optional**) will be passed to the callable as the second argument.\n\n**Deployment:**\n\nDeploy this as you would any other Flask app. See [Deployment Options](https://flask.palletsprojects.com/en/1.1.x/deploying/) for more information.\n\n**Example Code:**\n\n```python\nimport psutil\nimport wakeonlan\nfrom twilio_webhooks import SMSCommand\n\n# Simple example\n\ndef cpu_usage(from_, arg):\n    \"\"\"Check CPU usage\"\"\"\n    return f\"CPU Usage: {psutil.cpu_percent()}%\"\n\n# Complex example\n\ndef wake_on_lan(from_, arg):\n    \"\"\"Use wake-on-lan to wake a computer\"\"\"\n    # make sure the number is mine\n    if from_ != \"+12125551234\":\n        return\n    computers = {\"office\": \"ff.ff.ff.ff.ff.f1\", \"gaming\": \"ff.ff.ff.ff.ff.f2\"}\n    # Clean up arg in case I send a sloppy SMS\n    arg = arg.strip().lower()\n    if arg in computers:\n        wakeonlan.send_magic_packet(computers[arg])\n        return f'Computer \"{arg}\" is waking up.'\n\n\nsc = SMSCommand(\"your_twilio_auth_token\")\nsc.assign(\"cpu\", cpu_usage)\nsc.assign(\"wol\", wake_on_lan)\n\napp = sc.wsgi()\n```\n\nNow if you send an SMS to the twilio number you selected earlier that says this (remember the command part is case-insensitive):\n\n> Cpu\n\nyou should get a reply like this\n\n> CPU Usage: 5.2%\n\nor this:\n\n> Wol office\n\nshould reply:\n\n> Computer \"office\" is waking up.\n\n# ReceiveFax\n\n**Deployment:**\n\nDeploy this as you would any other Flask app. See [Deployment Options](https://flask.palletsprojects.com/en/1.1.x/deploying/) for more information.\n\n**Example:**\n\n```python\nfrom twilio_webhooks import ReceiveFax\n\napp = ReceiveFax(\"your_twilio_auth_token\", '/path/to/save/pdf').wsgi()\n```\n\nIncoming faxes will now be saved to the path of your choice.\n\n# Notes:\n\n* Your twilio auth token can be found under \"Dashboard / Settings / General\". You must click it to view it.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michael-lorenzo/twilio-webhooks", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "twilio-webhooks", "package_url": "https://pypi.org/project/twilio-webhooks/", "platform": "", "project_url": "https://pypi.org/project/twilio-webhooks/", "project_urls": {"Homepage": "https://github.com/michael-lorenzo/twilio-webhooks"}, "release_url": "https://pypi.org/project/twilio-webhooks/0.1.0/", "requires_dist": ["flask", "twilio"], "requires_python": ">=3.6", "summary": "A collection of webhooks for Twilio using Flask.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>twilio-webhooks</h1>\n<p>A collection of webhooks for <a href=\"https://www.twilio.com/\" rel=\"nofollow\">Twilio</a> using <a href=\"https://palletsprojects.com/p/flask/\" rel=\"nofollow\">Flask</a>.</p>\n<h1>Installation</h1>\n<pre><span class=\"go\">pip install twilio-webhooks</span>\n</pre>\n<p><strong>Availible webhooks:</strong></p>\n<ul>\n<li><a href=\"#SMSCommand\" rel=\"nofollow\">SMSCommand</a> - When receiving a properly formated SMS runs a user-defined callable.</li>\n<li><a href=\"#ReceiveFax\" rel=\"nofollow\">ReceiveFax</a> - When receving a fax saves a pdf file to a user-defined path.</li>\n</ul>\n<h1>SMSCommand</h1>\n<p><strong>Webhook URL format:</strong></p>\n<blockquote>\n<p><a href=\"http://example.com/smscommand\" rel=\"nofollow\">http://example.com/smscommand</a></p>\n</blockquote>\n<p>You set this under \"Phone Numbers / Manage Numbers / Active Numbers\". Click your desired phone number. Look under a section called \"Messaging\", and with the \"CONFIGURE WITH\" drop-down menu select \"Webhooks, TwiML Bins, Functions, Studio or Proxy\". Now under the \"A MESSAGE COMES IN\" drop-down menu select \"Webhook\" and in the adjacent box place your URL.</p>\n<p><strong>Callback format:</strong></p>\n<p>The callable should accept two arguments.</p>\n<ol>\n<li>A string containing who the SMS is from in E.164 format.</li>\n<li>A string that is either emtpy or the arg (see below) sent in the SMS.</li>\n</ol>\n<p>A return value will be sent as a reply.</p>\n<p><strong>SMS Format:</strong></p>\n<blockquote>\n<p><code>command</code> [<code>arg</code>]</p>\n</blockquote>\n<ul>\n<li><code>command</code> (<strong>required</strong>) is a case-insensitive string that was assigned to a user-defined callable.</li>\n<li><code>arg</code> (<strong>optional</strong>) will be passed to the callable as the second argument.</li>\n</ul>\n<p><strong>Deployment:</strong></p>\n<p>Deploy this as you would any other Flask app. See <a href=\"https://flask.palletsprojects.com/en/1.1.x/deploying/\" rel=\"nofollow\">Deployment Options</a> for more information.</p>\n<p><strong>Example Code:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">psutil</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wakeonlan</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twilio_webhooks</span> <span class=\"kn\">import</span> <span class=\"n\">SMSCommand</span>\n\n<span class=\"c1\"># Simple example</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cpu_usage</span><span class=\"p\">(</span><span class=\"n\">from_</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Check CPU usage\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"CPU Usage: </span><span class=\"si\">{</span><span class=\"n\">psutil</span><span class=\"o\">.</span><span class=\"n\">cpu_percent</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">%\"</span>\n\n<span class=\"c1\"># Complex example</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">wake_on_lan</span><span class=\"p\">(</span><span class=\"n\">from_</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Use wake-on-lan to wake a computer\"\"\"</span>\n    <span class=\"c1\"># make sure the number is mine</span>\n    <span class=\"k\">if</span> <span class=\"n\">from_</span> <span class=\"o\">!=</span> <span class=\"s2\">\"+12125551234\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">computers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"office\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ff.ff.ff.ff.ff.f1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"gaming\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ff.ff.ff.ff.ff.f2\"</span><span class=\"p\">}</span>\n    <span class=\"c1\"># Clean up arg in case I send a sloppy SMS</span>\n    <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">computers</span><span class=\"p\">:</span>\n        <span class=\"n\">wakeonlan</span><span class=\"o\">.</span><span class=\"n\">send_magic_packet</span><span class=\"p\">(</span><span class=\"n\">computers</span><span class=\"p\">[</span><span class=\"n\">arg</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'Computer \"</span><span class=\"si\">{</span><span class=\"n\">arg</span><span class=\"si\">}</span><span class=\"s1\">\" is waking up.'</span>\n\n\n<span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">SMSCommand</span><span class=\"p\">(</span><span class=\"s2\">\"your_twilio_auth_token\"</span><span class=\"p\">)</span>\n<span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"s2\">\"cpu\"</span><span class=\"p\">,</span> <span class=\"n\">cpu_usage</span><span class=\"p\">)</span>\n<span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"s2\">\"wol\"</span><span class=\"p\">,</span> <span class=\"n\">wake_on_lan</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">wsgi</span><span class=\"p\">()</span>\n</pre>\n<p>Now if you send an SMS to the twilio number you selected earlier that says this (remember the command part is case-insensitive):</p>\n<blockquote>\n<p>Cpu</p>\n</blockquote>\n<p>you should get a reply like this</p>\n<blockquote>\n<p>CPU Usage: 5.2%</p>\n</blockquote>\n<p>or this:</p>\n<blockquote>\n<p>Wol office</p>\n</blockquote>\n<p>should reply:</p>\n<blockquote>\n<p>Computer \"office\" is waking up.</p>\n</blockquote>\n<h1>ReceiveFax</h1>\n<p><strong>Deployment:</strong></p>\n<p>Deploy this as you would any other Flask app. See <a href=\"https://flask.palletsprojects.com/en/1.1.x/deploying/\" rel=\"nofollow\">Deployment Options</a> for more information.</p>\n<p><strong>Example:</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twilio_webhooks</span> <span class=\"kn\">import</span> <span class=\"n\">ReceiveFax</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">ReceiveFax</span><span class=\"p\">(</span><span class=\"s2\">\"your_twilio_auth_token\"</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/save/pdf'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">wsgi</span><span class=\"p\">()</span>\n</pre>\n<p>Incoming faxes will now be saved to the path of your choice.</p>\n<h1>Notes:</h1>\n<ul>\n<li>Your twilio auth token can be found under \"Dashboard / Settings / General\". You must click it to view it.</li>\n</ul>\n\n          </div>"}, "last_serial": 6982229, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2207fadbdc550e2f40235a53f2a8a172", "sha256": "70594f050f36629cdbe8d745d3992aaea5ab9644b61aee415b8474a13bf5a465"}, "downloads": -1, "filename": "twilio_webhooks-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2207fadbdc550e2f40235a53f2a8a172", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5120, "upload_time": "2020-04-08T23:08:52", "upload_time_iso_8601": "2020-04-08T23:08:52.389106Z", "url": "https://files.pythonhosted.org/packages/94/e5/e343df285bae05c36d9759404b45a0ad72f23becb61eda74d0cc215b6792/twilio_webhooks-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be113534746e50143d52bd5eb0237ea4", "sha256": "cac20a9ce6c3cfe04703aeb33e8bfadf50bf942eb8e6622125cbcdf9734a691e"}, "downloads": -1, "filename": "twilio-webhooks-0.1.0.tar.gz", "has_sig": false, "md5_digest": "be113534746e50143d52bd5eb0237ea4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4022, "upload_time": "2020-04-08T23:08:54", "upload_time_iso_8601": "2020-04-08T23:08:54.757241Z", "url": "https://files.pythonhosted.org/packages/7d/00/cf59e2a7e8859e0f18f5d5e89a45ef8e2fa362d94c54cebcde736f42c794/twilio-webhooks-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2207fadbdc550e2f40235a53f2a8a172", "sha256": "70594f050f36629cdbe8d745d3992aaea5ab9644b61aee415b8474a13bf5a465"}, "downloads": -1, "filename": "twilio_webhooks-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2207fadbdc550e2f40235a53f2a8a172", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5120, "upload_time": "2020-04-08T23:08:52", "upload_time_iso_8601": "2020-04-08T23:08:52.389106Z", "url": "https://files.pythonhosted.org/packages/94/e5/e343df285bae05c36d9759404b45a0ad72f23becb61eda74d0cc215b6792/twilio_webhooks-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be113534746e50143d52bd5eb0237ea4", "sha256": "cac20a9ce6c3cfe04703aeb33e8bfadf50bf942eb8e6622125cbcdf9734a691e"}, "downloads": -1, "filename": "twilio-webhooks-0.1.0.tar.gz", "has_sig": false, "md5_digest": "be113534746e50143d52bd5eb0237ea4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4022, "upload_time": "2020-04-08T23:08:54", "upload_time_iso_8601": "2020-04-08T23:08:54.757241Z", "url": "https://files.pythonhosted.org/packages/7d/00/cf59e2a7e8859e0f18f5d5e89a45ef8e2fa362d94c54cebcde736f42c794/twilio-webhooks-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:43:56 2020"}