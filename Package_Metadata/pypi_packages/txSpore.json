{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "~~~~~~~\r\ntxSpore\r\n~~~~~~~\r\n\r\n.. contents::\r\n   :depth: 1\r\n\r\n\r\n=======\r\nHistory\r\n=======\r\n\r\nThe Twisted Spore API was created more for fun than anything else. There's\r\nreally nothing special about it; all resource fetching is done with a Twisted\r\nweb client (twisted.web.client.getPage).\r\n\r\nWhen possible (given the async nature of the Twisted Spore API), code from the\r\nblocking Python API was reused. This was done in an effort to maintain\r\nfunctional compatibility with the synchronous Spore Python API. However, as it\r\nturned out, there were several features missing from the other API as well as\r\nsome REST resources that don't work anymore as originally written in that API.\r\n\r\n\r\n============\r\nDependencies\r\n============\r\n\r\nTo use this API as-is, you will need to have Twisted (Python) installed.\r\nDownlowds for the latest release are always linked on the main page:\r\n\r\nhttp://twistedmatrix.com/\r\n\r\n\r\n===================\r\nFurther Development\r\n===================\r\n\r\nIf there is interest in having a synchronous Python API updated to the latest\r\nfunctionality as released by spore.com, I would be more than willing to add\r\nexplicit support for a non-Twisted API in this source code such that that it\r\ncould be used even when Twisted is not installed.\r\n\r\nFor more details on coming changes, be sure to read the TODO section.\r\n\r\n\r\n============\r\nInstallation\r\n============\r\n\r\nDevelopment\r\n-----------\r\n\r\nIf you want to develop for txSpore or use the latest code we're working on, you\r\ncan install from the sources. You'll need bzr installed, and then just do the\r\nfollowing::\r\n\r\n    $ bzr branch lp:txspore\r\n    $ cd txspore\r\n    $ sudo python setup.py install\r\n\r\n\r\nEasy Install\r\n------------\r\n\r\nYou can use the setuptools easy_install script to get txSpore on your system::\r\n\r\n    $ sudo easy_install txSpore\r\n\r\n\r\nManual Download\r\n---------------\r\n\r\nYou can manually download the source tarball from the Python Package Index by\r\nvisiting the following URL:\r\n\r\n    http://pypi.python.org/pypi/txSpore/\r\n\r\nYou'll need to untar and gunzip the source, cd into the source directory, and\r\nthen you can do the usual::\r\n\r\n    $ sudo python setup.py install\r\n\r\n\r\nChecking the Source\r\n-------------------\r\n\r\nOnce installed, as long as you have Twisted installed on your system and the\r\ntrial script in your PATH, you can test the source code by executing this\r\nanywhere::\r\n\r\n    $ trial txspore\r\n\r\nThat will run the test suite and report on the success and failure of any unit\r\ntests.\r\n\r\n\r\n=====\r\nUsage\r\n=====\r\n\r\nInteractive Prompt\r\n------------------\r\n\r\nSometimes it's not very practical to run Twisted code from the Python\r\ninterpreter (timeouts can be a problem and accessing results from callbacks can\r\nbe awkward). Regardless, there is one below showing the use of both the REST\r\nservice API as well as the static data service provided at spore.com.\r\n\r\nThe achivement data for a user that's available via the REST service only has\r\nIDs associated with it, no text data. The Spore data service does have the\r\ntext. We're going to need to get both. First, though, let's do some initial\r\nimports and setup some callbacks::\r\n\r\n    >>> from cStringIO import StringIO\r\n    >>> from twisted.internet import reactor\r\n    >>> from twisted.internet.defer import DeferredList\r\n    >>> from txspore.client import AsyncClient\r\n    >>>\r\n    >>> results = []\r\n    >>> data = StringIO()\r\n    >>>\r\n    >>> def setResults(callback_results, results):\r\n    ...     results.append(callback_results)\r\n    ...\r\n    >>> def printError(error):\r\n    ...     print error.getErrorMessage()\r\n    ...\r\n    >>> def finish(ignored):\r\n    ...     reactor.stop()\r\n    ...\r\n\r\nWith our callbacks and errback defined, as well as some global objects for\r\nholding result data, we're ready to make the client calls::\r\n\r\n    >>> client = AsyncClient()\r\n    >>> d1 = client.rest.getAchievementsForUser(\"oubiwann\", 0, 20)\r\n    >>> d1.addCallback(setResults, results)\r\n    <Deferred at 0x...\r\n    >>> d1.addErrback(printError)\r\n    <Deferred at 0x...\r\n    >>>\r\n    >>> d2 = client.data.getAchievementDataXML(fd=data)\r\n    >>> d2.addErrback(printError)\r\n    <Deferred at 0x...\r\n    >>>\r\n    >>> d = DeferredList([d1, d2])\r\n    >>> d.addCallback(finish)\r\n    <DeferredList at 0x...\r\n    >>> reactor.run()\r\n\r\nLet's make sure we get the number of achievements we expected and then take a\r\nquick peek at some of the achiements associated with this user::\r\n\r\n    >>> achievements = results.pop()\r\n    >>> len(achievements)\r\n    20\r\n    >>> for achievement in sorted(achievements)[0:4]:\r\n    ...     print achievement.guid\r\n    ...\r\n    0xaec66642!0x0770b845\r\n    0x0cc8b2c9!0xb9ff8f07\r\n    0x0cc8b2c9!0x19988ceb\r\n    0x0cc8b2c9!0xe1f5cf25\r\n\r\nWe now have the IDs, but not the text. Let's get the latter::\r\n\r\n    >>> from txspore import util\r\n    >>> from txspore import model\r\n    >>>\r\n    >>> xmlTree = util.XML(data.getvalue())\r\n    >>> achievementsModel = model.RecursiveDataModel(xmlTree)\r\n    >>> len(achievementsModel.achievements)\r\n    124\r\n    >>> achievementsLookup = {}\r\n    >>> for achievement in achievementsModel.achievements:\r\n    ...     achievementsLookup[achievement.id] = (\r\n    ...         achievement.name, achievement.description)\r\n    ...\r\n\r\nWith the lookup dictionary populated, we can re-print our user results with\r\nfriendlier output::\r\n\r\n    >>> for achievement in sorted(achievements):\r\n    ...     try:\r\n    ...         print \"%s: %s\" % achievementsLookup[achievement.guid]\r\n    ...     except KeyError:\r\n    ...         print \"Couldn't find key '%s' ...\" % achievement.guid\r\n    ...\r\n    Couldn't find key '0xaec66642!0x0770b845' ...\r\n    Wanderer Passion: Play as a Wanderer\r\n    Quest Master: Complete 150 missions in the Space stage\r\n    Gunner: Destroy at least 500 other space vessels\r\n    Relentless: Complete the Civilization stage 10 times\r\n    Tribal: Complete the Tribal stage 10 times\r\n    Maxis Scout: Earn 100 badges in the Space stage\r\n    Shaman Hero: Achieve Master Badge Level 10 as a Shaman\r\n    Universe In A Box: Play in every stage and every creator\r\n    Slugger: Finish Creature stage without legs\r\n    Bestial: Play the Creature stage 10 times\r\n    Max Power: Build a creature with maximum stats in at least 4 abilities...\r\n    Spore Fan: Spend 50 hours in your Spore galaxy\r\n    Biologist: Make and publish 100 creatures\r\n    Bard Passion: Play as a Bard\r\n    General Custer: Lead 30 posse members to their death\r\n    Spice Hoarder: Control every resource node on the planet simultaneously\r\n    Rolling Thunder: Complete the Civilization stage in less than an hour\r\n    Missionary: Finish the Civilization stage with more than 8 religious cities\r\n    Speed Demon: Finish Creature stage within an hour\r\n\r\n\r\nDemo\r\n----\r\n\r\nIn the top-level source directory for txSpore, there is an examples directory.\r\nThis contains a demo web application that shows:\r\n\r\n* one simple way of integrating txSpore into a web app\r\n\r\n* how to use the client to get user data and assets\r\n\r\n* how to use callbacks to process results\r\n\r\n\r\nUnit Tests\r\n----------\r\n\r\nThe unit tests are actually one of the best places to look for details about\r\nusage. There're two test modules that could provide very enlightening when\r\nfiguring out how to use the txSpore API:\r\n\r\n* txspore/tests/test_client.py - basic client usage, and how to handle results\r\n\r\n* txspore/tests/test_model.py - detailed view of available attributes on\r\n  returned model objects.\r\n\r\n\r\n===================\r\nAPI Quick Reference\r\n===================\r\n\r\nBelow are listed the objects and the methods that are available on the txSpore\r\nclient class.\r\n\r\n\r\ntxspore.client.AsyncClient.rest\r\n-------------------------------\r\n\r\n * __init__\r\n\r\n   * parameter: parent\r\n\r\n * getAchievementsForUser\r\n\r\n   * parameters: username, start, length\r\n\r\n * getAssetsForSporeCast\r\n\r\n   * parameters: sporeCastID, start, length\r\n\r\n * getAssetsForUser\r\n\r\n   * parameters: username, start, length\r\n\r\n * getBuddiesForUser\r\n\r\n   * parameters: username, start, length\r\n\r\n * getCommentsForAsset\r\n\r\n   * parameters: assetID, start, length\r\n\r\n * getDailyStats (takes no parameters)\r\n\r\n * getInfoForAsset\r\n\r\n   * parameter: assetID\r\n\r\n * getProfileInfo\r\n\r\n   * parameter: username\r\n\r\n * getSporeCastsForUser\r\n\r\n   * parameter: username\r\n\r\n * getStatsForCreature\r\n\r\n   * parameter: creatureID\r\n\r\n * searchAssets\r\n\r\n   * parameters: searchType, start, length, assetType\r\n\r\n\r\ntxspore.client.AsyncClient.data\r\n-------------------------------\r\n\r\n * __init__\r\n\r\n   * parameter: parent\r\n\r\n * getAchievementDataXML\r\n\r\n   * parameters: path, fd\r\n\r\n * getAchievementIcon\r\n\r\n   * parameters: achievementID, path, fd\r\n\r\n * getAchievementText\r\n\r\n   * parameters: path, fd\r\n\r\n * getAssetDataLargePNG\r\n\r\n   * parameters: assetID, path, fd\r\n\r\n * getAssetDataSmallPNG\r\n\r\n   * parameters: assetID, path, fd\r\n\r\n * getAssetDataXML\r\n\r\n   * parameters: assetID, path, fd\r\n\r\n * getLargeCard\r\n\r\n   * parameters: assetID, path, fd\r\n\r\n * getPaintIcon\r\n\r\n   * parameters: remoteFilename, path, fd\r\n\r\n * getPaintInfo\r\n\r\n   * parameters: path, fd\r\n\r\n * getPartIcon\r\n\r\n   * parameters: remoteFilename, path, fd\r\n\r\n * getPartInfo\r\n\r\n   * parameters: blockType, path, fd\r\n\r\n\r\ntxspore.client.AsyncClient.atom\r\n-------------------------------\r\n\r\n * __init__\r\n\r\n   * parameter: parent\r\n\r\n * getAssetsForUser\r\n\r\n   * parameter: username\r\n\r\n * getEventsForAsset\r\n\r\n   * parameter: assetID\r\n\r\n * getEventsForUser\r\n\r\n   * parameter: username\r\n\r\n * getSporeCastFeed\r\n\r\n   * parameter: sporeCastID\r\n\r\n * searchAssets\r\n\r\n   * parameters: searchType, start, length\r\n\r\n\r\ntxspore.client.AsyncClient.cache\r\n--------------------------------\r\n\r\n * __init__ (takes no parameters)\r\n\r\n * get\r\n\r\n   * parameter: key\r\n\r\n * purge (takes no parameters)\r\n\r\n * remove\r\n\r\n   * parameter: key\r\n\r\n * set\r\n\r\n   * parameters: key, object\r\n\r\n\r\n==========\r\nKnown Bugs\r\n==========\r\n\r\n* None so far\r\n\r\n====\r\nTODO\r\n====\r\n\r\n* Update all methods with epydoc-parsable docstrings.\r\n\r\n* Create an aspect for non-spore API methods... something like CustomAspect.\r\n\r\n* Add support for using a complete, up-to-date sync API without the need to\r\n  have Twisted installed.\r\n\r\n* Fix the threading/logging stuff in test_saveFileWithError.\r\n\r\n* Add search functions to client.\r\n\r\n* Add code for everything below line 244 in txspore.original.SporeAPICoreUtils.\r\n\r\n* Add mode code to the demo and/or add more demos/examples.\r\n\r\n* Encode results as utf-8\r\n\r\n\r\nAsyncClient.custom\r\n------------------\r\n\r\n* Get useful achievement data with secondary query in\r\n  client.getAchievementsForUser.\r\n\r\n* Most popular creation by archetype/category with name and .png (suggested by\r\n  MrAlex92; more details: http://forum.spore.com/jforum/posts/list/27693.page).\r\n\r\n* Order/filter creations by limb count, complexity, specific traits, size\r\n  (suggested by Technodude12).\r\n\r\n* Order/filter by flying/swimming patterns (suggested by docpippo).\r\n\r\n* Add methods for the following user data (suggested by Eochaid1701):\r\n\r\n  - creation count\r\n\r\n  - latest creation (name)\r\n\r\n  - latest creation (.png)\r\n\r\n  - a tuple-result: username, creation count, latest creation (name), latest\r\n    creation (.png)\r\n\r\n  - might want to add user icon, latest achiemvement, tagline, joined date\r\n\r\n\r\n=======\r\nChanges\r\n=======\r\n\r\n0.0.1 to 0.0.2\r\n--------------\r\n\r\n* Added a new client object; calls are made with methods now, instead of\r\n  module-level functions.\r\n\r\n* Added support for caching method results.\r\n\r\n* Moved the REST service API methods into their own object and instantiated\r\n  it on a \".rest\" attribute of the client class.\r\n\r\n* Moved the static data service API methods into their own object and\r\n  instantiated it on a \".data\" attribute of the client class.\r\n\r\n* Added support for Spore Atom (\"RSS\") data, available on the \".atom\" attribute\r\n  of the client object.\r\n\r\n* Implemented the last remaining Spore API method that hadn't been added.\r\n\r\nVersion 0.0.1\r\n-------------\r\n\r\n* Initial release of txSpore, supporting most of the REST and static data APIs.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "txSpore", "package_url": "https://pypi.org/project/txSpore/", "platform": "", "project_url": "https://pypi.org/project/txSpore/", "project_urls": null, "release_url": "https://pypi.org/project/txSpore/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "An asynchronous Spore Python API using Twisted.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#history\" id=\"id1\" rel=\"nofollow\">History</a></li>\n<li><a href=\"#dependencies\" id=\"id2\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#further-development\" id=\"id3\" rel=\"nofollow\">Further Development</a></li>\n<li><a href=\"#installation\" id=\"id4\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id5\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#api-quick-reference\" id=\"id6\" rel=\"nofollow\">API Quick Reference</a></li>\n<li><a href=\"#known-bugs\" id=\"id7\" rel=\"nofollow\">Known Bugs</a></li>\n<li><a href=\"#todo\" id=\"id8\" rel=\"nofollow\">TODO</a></li>\n<li><a href=\"#changes\" id=\"id9\" rel=\"nofollow\">Changes</a></li>\n</ul>\n</div>\n<div id=\"history\">\n<h2><a href=\"#id1\" rel=\"nofollow\">History</a></h2>\n<p>The Twisted Spore API was created more for fun than anything else. There\u2019s\nreally nothing special about it; all resource fetching is done with a Twisted\nweb client (twisted.web.client.getPage).</p>\n<p>When possible (given the async nature of the Twisted Spore API), code from the\nblocking Python API was reused. This was done in an effort to maintain\nfunctional compatibility with the synchronous Spore Python API. However, as it\nturned out, there were several features missing from the other API as well as\nsome REST resources that don\u2019t work anymore as originally written in that API.</p>\n</div>\n<div id=\"dependencies\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Dependencies</a></h2>\n<p>To use this API as-is, you will need to have Twisted (Python) installed.\nDownlowds for the latest release are always linked on the main page:</p>\n<p><a href=\"http://twistedmatrix.com/\" rel=\"nofollow\">http://twistedmatrix.com/</a></p>\n</div>\n<div id=\"further-development\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Further Development</a></h2>\n<p>If there is interest in having a synchronous Python API updated to the latest\nfunctionality as released by spore.com, I would be more than willing to add\nexplicit support for a non-Twisted API in this source code such that that it\ncould be used even when Twisted is not installed.</p>\n<p>For more details on coming changes, be sure to read the TODO section.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Installation</a></h2>\n<div id=\"development\">\n<h3>Development</h3>\n<p>If you want to develop for txSpore or use the latest code we\u2019re working on, you\ncan install from the sources. You\u2019ll need bzr installed, and then just do the\nfollowing:</p>\n<pre>$ bzr branch lp:txspore\n$ cd txspore\n$ sudo python setup.py install\n</pre>\n</div>\n<div id=\"easy-install\">\n<h3>Easy Install</h3>\n<p>You can use the setuptools easy_install script to get txSpore on your system:</p>\n<pre>$ sudo easy_install txSpore\n</pre>\n</div>\n<div id=\"manual-download\">\n<h3>Manual Download</h3>\n<p>You can manually download the source tarball from the Python Package Index by\nvisiting the following URL:</p>\n<blockquote>\n<a href=\"http://pypi.python.org/pypi/txSpore/\" rel=\"nofollow\">http://pypi.python.org/pypi/txSpore/</a></blockquote>\n<p>You\u2019ll need to untar and gunzip the source, cd into the source directory, and\nthen you can do the usual:</p>\n<pre>$ sudo python setup.py install\n</pre>\n</div>\n<div id=\"checking-the-source\">\n<h3>Checking the Source</h3>\n<p>Once installed, as long as you have Twisted installed on your system and the\ntrial script in your PATH, you can test the source code by executing this\nanywhere:</p>\n<pre>$ trial txspore\n</pre>\n<p>That will run the test suite and report on the success and failure of any unit\ntests.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"interactive-prompt\">\n<h3>Interactive Prompt</h3>\n<p>Sometimes it\u2019s not very practical to run Twisted code from the Python\ninterpreter (timeouts can be a problem and accessing results from callbacks can\nbe awkward). Regardless, there is one below showing the use of both the REST\nservice API as well as the static data service provided at spore.com.</p>\n<p>The achivement data for a user that\u2019s available via the REST service only has\nIDs associated with it, no text data. The Spore data service does have the\ntext. We\u2019re going to need to get both. First, though, let\u2019s do some initial\nimports and setup some callbacks:</p>\n<pre>&gt;&gt;&gt; from cStringIO import StringIO\n&gt;&gt;&gt; from twisted.internet import reactor\n&gt;&gt;&gt; from twisted.internet.defer import DeferredList\n&gt;&gt;&gt; from txspore.client import AsyncClient\n&gt;&gt;&gt;\n&gt;&gt;&gt; results = []\n&gt;&gt;&gt; data = StringIO()\n&gt;&gt;&gt;\n&gt;&gt;&gt; def setResults(callback_results, results):\n...     results.append(callback_results)\n...\n&gt;&gt;&gt; def printError(error):\n...     print error.getErrorMessage()\n...\n&gt;&gt;&gt; def finish(ignored):\n...     reactor.stop()\n...\n</pre>\n<p>With our callbacks and errback defined, as well as some global objects for\nholding result data, we\u2019re ready to make the client calls:</p>\n<pre>&gt;&gt;&gt; client = AsyncClient()\n&gt;&gt;&gt; d1 = client.rest.getAchievementsForUser(\"oubiwann\", 0, 20)\n&gt;&gt;&gt; d1.addCallback(setResults, results)\n&lt;Deferred at 0x...\n&gt;&gt;&gt; d1.addErrback(printError)\n&lt;Deferred at 0x...\n&gt;&gt;&gt;\n&gt;&gt;&gt; d2 = client.data.getAchievementDataXML(fd=data)\n&gt;&gt;&gt; d2.addErrback(printError)\n&lt;Deferred at 0x...\n&gt;&gt;&gt;\n&gt;&gt;&gt; d = DeferredList([d1, d2])\n&gt;&gt;&gt; d.addCallback(finish)\n&lt;DeferredList at 0x...\n&gt;&gt;&gt; reactor.run()\n</pre>\n<p>Let\u2019s make sure we get the number of achievements we expected and then take a\nquick peek at some of the achiements associated with this user:</p>\n<pre>&gt;&gt;&gt; achievements = results.pop()\n&gt;&gt;&gt; len(achievements)\n20\n&gt;&gt;&gt; for achievement in sorted(achievements)[0:4]:\n...     print achievement.guid\n...\n0xaec66642!0x0770b845\n0x0cc8b2c9!0xb9ff8f07\n0x0cc8b2c9!0x19988ceb\n0x0cc8b2c9!0xe1f5cf25\n</pre>\n<p>We now have the IDs, but not the text. Let\u2019s get the latter:</p>\n<pre>&gt;&gt;&gt; from txspore import util\n&gt;&gt;&gt; from txspore import model\n&gt;&gt;&gt;\n&gt;&gt;&gt; xmlTree = util.XML(data.getvalue())\n&gt;&gt;&gt; achievementsModel = model.RecursiveDataModel(xmlTree)\n&gt;&gt;&gt; len(achievementsModel.achievements)\n124\n&gt;&gt;&gt; achievementsLookup = {}\n&gt;&gt;&gt; for achievement in achievementsModel.achievements:\n...     achievementsLookup[achievement.id] = (\n...         achievement.name, achievement.description)\n...\n</pre>\n<p>With the lookup dictionary populated, we can re-print our user results with\nfriendlier output:</p>\n<pre>&gt;&gt;&gt; for achievement in sorted(achievements):\n...     try:\n...         print \"%s: %s\" % achievementsLookup[achievement.guid]\n...     except KeyError:\n...         print \"Couldn't find key '%s' ...\" % achievement.guid\n...\nCouldn't find key '0xaec66642!0x0770b845' ...\nWanderer Passion: Play as a Wanderer\nQuest Master: Complete 150 missions in the Space stage\nGunner: Destroy at least 500 other space vessels\nRelentless: Complete the Civilization stage 10 times\nTribal: Complete the Tribal stage 10 times\nMaxis Scout: Earn 100 badges in the Space stage\nShaman Hero: Achieve Master Badge Level 10 as a Shaman\nUniverse In A Box: Play in every stage and every creator\nSlugger: Finish Creature stage without legs\nBestial: Play the Creature stage 10 times\nMax Power: Build a creature with maximum stats in at least 4 abilities...\nSpore Fan: Spend 50 hours in your Spore galaxy\nBiologist: Make and publish 100 creatures\nBard Passion: Play as a Bard\nGeneral Custer: Lead 30 posse members to their death\nSpice Hoarder: Control every resource node on the planet simultaneously\nRolling Thunder: Complete the Civilization stage in less than an hour\nMissionary: Finish the Civilization stage with more than 8 religious cities\nSpeed Demon: Finish Creature stage within an hour\n</pre>\n</div>\n<div id=\"demo\">\n<h3>Demo</h3>\n<p>In the top-level source directory for txSpore, there is an examples directory.\nThis contains a demo web application that shows:</p>\n<ul>\n<li>one simple way of integrating txSpore into a web app</li>\n<li>how to use the client to get user data and assets</li>\n<li>how to use callbacks to process results</li>\n</ul>\n</div>\n<div id=\"unit-tests\">\n<h3>Unit Tests</h3>\n<p>The unit tests are actually one of the best places to look for details about\nusage. There\u2019re two test modules that could provide very enlightening when\nfiguring out how to use the txSpore API:</p>\n<ul>\n<li>txspore/tests/test_client.py - basic client usage, and how to handle results</li>\n<li>txspore/tests/test_model.py - detailed view of available attributes on\nreturned model objects.</li>\n</ul>\n</div>\n</div>\n<div id=\"api-quick-reference\">\n<h2><a href=\"#id6\" rel=\"nofollow\">API Quick Reference</a></h2>\n<p>Below are listed the objects and the methods that are available on the txSpore\nclient class.</p>\n<div id=\"txspore-client-asyncclient-rest\">\n<h3>txspore.client.AsyncClient.rest</h3>\n<blockquote>\n<ul>\n<li>__init__<ul>\n<li>parameter: parent</li>\n</ul>\n</li>\n<li>getAchievementsForUser<ul>\n<li>parameters: username, start, length</li>\n</ul>\n</li>\n<li>getAssetsForSporeCast<ul>\n<li>parameters: sporeCastID, start, length</li>\n</ul>\n</li>\n<li>getAssetsForUser<ul>\n<li>parameters: username, start, length</li>\n</ul>\n</li>\n<li>getBuddiesForUser<ul>\n<li>parameters: username, start, length</li>\n</ul>\n</li>\n<li>getCommentsForAsset<ul>\n<li>parameters: assetID, start, length</li>\n</ul>\n</li>\n<li>getDailyStats (takes no parameters)</li>\n<li>getInfoForAsset<ul>\n<li>parameter: assetID</li>\n</ul>\n</li>\n<li>getProfileInfo<ul>\n<li>parameter: username</li>\n</ul>\n</li>\n<li>getSporeCastsForUser<ul>\n<li>parameter: username</li>\n</ul>\n</li>\n<li>getStatsForCreature<ul>\n<li>parameter: creatureID</li>\n</ul>\n</li>\n<li>searchAssets<ul>\n<li>parameters: searchType, start, length, assetType</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"txspore-client-asyncclient-data\">\n<h3>txspore.client.AsyncClient.data</h3>\n<blockquote>\n<ul>\n<li>__init__<ul>\n<li>parameter: parent</li>\n</ul>\n</li>\n<li>getAchievementDataXML<ul>\n<li>parameters: path, fd</li>\n</ul>\n</li>\n<li>getAchievementIcon<ul>\n<li>parameters: achievementID, path, fd</li>\n</ul>\n</li>\n<li>getAchievementText<ul>\n<li>parameters: path, fd</li>\n</ul>\n</li>\n<li>getAssetDataLargePNG<ul>\n<li>parameters: assetID, path, fd</li>\n</ul>\n</li>\n<li>getAssetDataSmallPNG<ul>\n<li>parameters: assetID, path, fd</li>\n</ul>\n</li>\n<li>getAssetDataXML<ul>\n<li>parameters: assetID, path, fd</li>\n</ul>\n</li>\n<li>getLargeCard<ul>\n<li>parameters: assetID, path, fd</li>\n</ul>\n</li>\n<li>getPaintIcon<ul>\n<li>parameters: remoteFilename, path, fd</li>\n</ul>\n</li>\n<li>getPaintInfo<ul>\n<li>parameters: path, fd</li>\n</ul>\n</li>\n<li>getPartIcon<ul>\n<li>parameters: remoteFilename, path, fd</li>\n</ul>\n</li>\n<li>getPartInfo<ul>\n<li>parameters: blockType, path, fd</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"txspore-client-asyncclient-atom\">\n<h3>txspore.client.AsyncClient.atom</h3>\n<blockquote>\n<ul>\n<li>__init__<ul>\n<li>parameter: parent</li>\n</ul>\n</li>\n<li>getAssetsForUser<ul>\n<li>parameter: username</li>\n</ul>\n</li>\n<li>getEventsForAsset<ul>\n<li>parameter: assetID</li>\n</ul>\n</li>\n<li>getEventsForUser<ul>\n<li>parameter: username</li>\n</ul>\n</li>\n<li>getSporeCastFeed<ul>\n<li>parameter: sporeCastID</li>\n</ul>\n</li>\n<li>searchAssets<ul>\n<li>parameters: searchType, start, length</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"txspore-client-asyncclient-cache\">\n<h3>txspore.client.AsyncClient.cache</h3>\n<blockquote>\n<ul>\n<li>__init__ (takes no parameters)</li>\n<li>get<ul>\n<li>parameter: key</li>\n</ul>\n</li>\n<li>purge (takes no parameters)</li>\n<li>remove<ul>\n<li>parameter: key</li>\n</ul>\n</li>\n<li>set<ul>\n<li>parameters: key, object</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"known-bugs\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Known Bugs</a></h2>\n<ul>\n<li>None so far</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2><a href=\"#id8\" rel=\"nofollow\">TODO</a></h2>\n<ul>\n<li>Update all methods with epydoc-parsable docstrings.</li>\n<li>Create an aspect for non-spore API methods\u2026 something like CustomAspect.</li>\n<li>Add support for using a complete, up-to-date sync API without the need to\nhave Twisted installed.</li>\n<li>Fix the threading/logging stuff in test_saveFileWithError.</li>\n<li>Add search functions to client.</li>\n<li>Add code for everything below line 244 in txspore.original.SporeAPICoreUtils.</li>\n<li>Add mode code to the demo and/or add more demos/examples.</li>\n<li>Encode results as utf-8</li>\n</ul>\n<div id=\"asyncclient-custom\">\n<h3>AsyncClient.custom</h3>\n<ul>\n<li>Get useful achievement data with secondary query in\nclient.getAchievementsForUser.</li>\n<li>Most popular creation by archetype/category with name and .png (suggested by\nMrAlex92; more details: <a href=\"http://forum.spore.com/jforum/posts/list/27693.page\" rel=\"nofollow\">http://forum.spore.com/jforum/posts/list/27693.page</a>).</li>\n<li>Order/filter creations by limb count, complexity, specific traits, size\n(suggested by Technodude12).</li>\n<li>Order/filter by flying/swimming patterns (suggested by docpippo).</li>\n<li>Add methods for the following user data (suggested by Eochaid1701):<ul>\n<li>creation count</li>\n<li>latest creation (name)</li>\n<li>latest creation (.png)</li>\n<li>a tuple-result: username, creation count, latest creation (name), latest\ncreation (.png)</li>\n<li>might want to add user icon, latest achiemvement, tagline, joined date</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"to-0-0-2\">\n<h3>0.0.1 to 0.0.2</h3>\n<ul>\n<li>Added a new client object; calls are made with methods now, instead of\nmodule-level functions.</li>\n<li>Added support for caching method results.</li>\n<li>Moved the REST service API methods into their own object and instantiated\nit on a \u201c.rest\u201d attribute of the client class.</li>\n<li>Moved the static data service API methods into their own object and\ninstantiated it on a \u201c.data\u201d attribute of the client class.</li>\n<li>Added support for Spore Atom (\u201cRSS\u201d) data, available on the \u201c.atom\u201d attribute\nof the client object.</li>\n<li>Implemented the last remaining Spore API method that hadn\u2019t been added.</li>\n</ul>\n</div>\n<div id=\"version-0-0-1\">\n<h3>Version 0.0.1</h3>\n<ul>\n<li>Initial release of txSpore, supporting most of the REST and static data APIs.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 801107, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "33a6ccff0c8a60b06c6767afcc8c6afa", "sha256": "1849c949da16d846285b60b4fc3ff4e8a92ef431d769d7448d109d18a1d2a813"}, "downloads": -1, "filename": "txSpore-0.0.1.tar.gz", "has_sig": false, "md5_digest": "33a6ccff0c8a60b06c6767afcc8c6afa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100313, "upload_time": "2009-09-14T06:42:13", "upload_time_iso_8601": "2009-09-14T06:42:13.265540Z", "url": "https://files.pythonhosted.org/packages/45/43/5247b7dd1a34799ad2b4079ce11682b559f83c60f6e47cf3c937bc689a2e/txSpore-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9198760b719775910d5828be459f5dd0", "sha256": "2a7d37fc2fa55bffe654c02c7622c700b00904f7c18bbefac4e04c008fdc7b54"}, "downloads": -1, "filename": "txSpore-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9198760b719775910d5828be459f5dd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133830, "upload_time": "2009-09-17T06:52:38", "upload_time_iso_8601": "2009-09-17T06:52:38.650508Z", "url": "https://files.pythonhosted.org/packages/76/b1/cf13d8e1db82e5d238c9c0e851bd0fab3afd823ffbd6827025f0b6c97fd3/txSpore-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9198760b719775910d5828be459f5dd0", "sha256": "2a7d37fc2fa55bffe654c02c7622c700b00904f7c18bbefac4e04c008fdc7b54"}, "downloads": -1, "filename": "txSpore-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9198760b719775910d5828be459f5dd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 133830, "upload_time": "2009-09-17T06:52:38", "upload_time_iso_8601": "2009-09-17T06:52:38.650508Z", "url": "https://files.pythonhosted.org/packages/76/b1/cf13d8e1db82e5d238c9c0e851bd0fab3afd823ffbd6827025f0b6c97fd3/txSpore-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:43:06 2020"}