{"info": {"author": "Shubham Chaudhary", "author_email": "me@shubhamchaudhary.in", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://travis-ci.org/shubhamchaudhary/configparser2.svg?branch=master\n    :target: https://travis-ci.org/shubhamchaudhary/configparser2\n.. image:: https://coveralls.io/repos/shubhamchaudhary/configparser2/badge.svg\n    :target: https://coveralls.io/r/shubhamchaudhary/configparser2\n.. image:: https://badge.waffle.io/shubhamchaudhary/configparser2.png?label=ready&title=Ready \n    :target: https://waffle.io/shubhamchaudhary/configparser2\n    :alt: 'Stories in Ready'\n.. image:: https://img.shields.io/pypi/v/configparser2.svg\n    :target: https://pypi.python.org/pypi/configparser2\n.. image:: https://img.shields.io/github/tag/shubhamchaudhary/configparser2.svg\n.. image:: https://img.shields.io/github/release/shubhamchaudhary/configparser2.svg\n \n=============\nconfigparser2\n=============\n\nconfigparser2 is derived from Lukasz Langa's configparser mercurial repo. The\nonly difference is a name is not conflicting with the default python3\nconfigparser.  \n\nSource Code\n~~~~~~~~~~~\n\nSource Code for configparser2 is on \n`Github <https://github.com/shubhamchaudhary/configparser2>`_.\n\n\nInstallation\n~~~~~~~~~~~~\n\nA quick ``pip install configparser2`` should do the job.\n\n\nDocs for configparser\n~~~~~~~~~~~~~~~~~~~~~\n\n\nThe ancient ``ConfigParser`` module available in the standard library 2.x has\nseen a major update in Python 3.2. This is a backport of those changes so that\nthey can be used directly in Python 2.6 - 3.5.\n\nTo use the ``configparser2`` backport instead of the built-in version on both\nPython 2 and Python 3, simply import it explicitly as a backport::\n\n  from backports import configparser2\n\nIf you'd like to use the backport on Python 2 and the built-in version on\nPython 3, use that invocation instead::\n\n  import configparser2\n\nFor detailed documentation consult the vanilla version at\nhttp://docs.python.org/3/library/configparser2.html.\n\nWhy you'll love ``configparser2``\n---------------------------------\n\nWhereas almost completely compatible with its older brother, ``configparser2``\nsports a bunch of interesting new features:\n\n* full mapping protocol access (`more info\n  <http://docs.python.org/3/library/configparser2.html#mapping-protocol-access>`_)::\n\n    >>> parser = ConfigParser()\n    >>> parser.read_string(\"\"\"\n    [DEFAULT]\n    location = upper left\n    visible = yes\n    editable = no\n    color = blue\n\n    [main]\n    title = Main Menu\n    color = green\n\n    [options]\n    title = Options\n    \"\"\")\n    >>> parser['main']['color']\n    'green'\n    >>> parser['main']['editable']\n    'no'\n    >>> section = parser['options']\n    >>> section['title']\n    'Options'\n    >>> section['title'] = 'Options (editable: %(editable)s)'\n    >>> section['title']\n    'Options (editable: no)'\n\n* there's now one default ``ConfigParser`` class, which basically is the old\n  ``SafeConfigParser`` with a bunch of tweaks which make it more predictable for\n  users. Don't need interpolation? Simply use\n  ``ConfigParser(interpolation=None)``, no need to use a distinct\n  ``RawConfigParser`` anymore.\n\n* the parser is highly `customizable upon instantiation\n  <http://docs.python.org/3/library/configparser2.html#customizing-parser-behaviour>`__\n  supporting things like changing option delimiters, comment characters, the\n  name of the DEFAULT section, the interpolation syntax, etc.\n\n* you can easily create your own interpolation syntax but there are two powerful\n  implementations built-in (`more info\n  <http://docs.python.org/3/library/configparser2.html#interpolation-of-values>`__):\n\n  * the classic ``%(string-like)s`` syntax (called ``BasicInterpolation``)\n\n  * a new ``${buildout:like}`` syntax (called ``ExtendedInterpolation``)\n\n* fallback values may be specified in getters (`more info\n  <http://docs.python.org/3/library/configparser2.html#fallback-values>`__)::\n\n    >>> config.get('closet', 'monster',\n    ...            fallback='No such things as monsters')\n    'No such things as monsters'\n\n* ``ConfigParser`` objects can now read data directly `from strings\n  <http://docs.python.org/3/library/configparser2.html#configparser2.ConfigParser.read_string>`__\n  and `from dictionaries\n  <http://docs.python.org/3/library/configparser2.html#configparser2.ConfigParser.read_dict>`__.\n  That means importing configuration from JSON or specifying default values for\n  the whole configuration (multiple sections) is now a single line of code. Same\n  goes for copying data from another ``ConfigParser`` instance, thanks to its\n  mapping protocol support.\n\n* many smaller tweaks, updates and fixes\n\nA few words about Unicode\n-------------------------\n\n``configparser2`` comes from Python 3 and as such it works well with Unicode.\nThe library is generally cleaned up in terms of internal data storage and\nreading/writing files.  There are a couple of incompatibilities with the old\n``ConfigParser`` due to that. However, the work required to migrate is well\nworth it as it shows the issues that would likely come up during migration of\nyour project to Python 3.\n\nThe design assumes that Unicode strings are used whenever possible [1]_.  That\ngives you the certainty that what's stored in a configuration object is text.\nOnce your configuration is read, the rest of your application doesn't have to\ndeal with encoding issues. All you have is text [2]_. The only two phases when\nyou should explicitly state encoding is when you either read from an external\nsource (e.g. a file) or write back.\n\nVersioning\n----------\n\nThis backport is intended to keep 100% compatibility with the vanilla release in\nPython 3.2+. To help maintaining a version you want and expect, a versioning\nscheme is used where:\n\n* the first two numbers indicate the version of Python 3 from which the\n  backport is done\n\n* a backport release number is provided as the final number (zero-indexed)\n\nFor example, ``3.5.2`` is the **third** backport release of the\n``configparser2`` library as seen in Python 3.5.  Note that ``3.5.2`` does\n**NOT** necessarily mean this backport version is based on the standard library\nof Python 3.5.2.\n\nOne exception from the 100% compatibility principle is that bugs fixed before\nreleasing another minor Python 3 bugfix version **will be included** in the\nbackport releases done in the mean time.\n\nMaintenance\n-----------\n\nThis backport is maintained on BitBucket by \u0141ukasz Langa, the current vanilla\n``configparser2`` maintainer for CPython:\n\n* `configparser2 git repository <https://github.com/shubhamchaudhary/configparser2>`_\n\n* `configparser2 Mercurial repository <https://github.com/shubhamchaudhary/configparser2>`_\n\n* `configparser2 issue tracker <https://github.com/shubhamchaudhary/configparser2/issues>`_\n\nChange Log\n----------\n\n4.0.0\n~~~~~\n\n* Change name to configparser2\n\n\n3.5.0\n~~~~~\n\n* a complete rewrite of the backport; now single codebase working on Python\n  2.6 - 3.5. To use on Python 3 import ``from backports import configparser2``\n  instead of the built-in version.\n\n* compatible with 3.4.1 + fixes for `#19546\n  <http://bugs.python.org/issue19546>`_\n\n* fixes `BitBucket issue #1\n  <https://bitbucket.org/ambv/configparser2/issue/1>`_: versioning non-compliant\n  with PEP 386\n\n* fixes `BitBucket issue #3\n  <https://bitbucket.org/ambv/configparser2/issue/3>`_: ``reload(sys);\n  sys.setdefaultencoding('utf8')`` in setup.py\n\n* fixes `BitBucket issue #5\n  <https://bitbucket.org/ambv/configparser2/issue/5>`_: Installing the backport\n  on Python 3 breaks virtualenv\n\n* fixes `BitBucket issue #6\n  <https://bitbucket.org/ambv/configparser2/issue/6>`_: PyPy compatibility\n\n3.5.0b2\n~~~~~~~\n\n* second beta of 3.5.0, not using any third-party futurization libraries\n\n3.5.0b1\n~~~~~~~\n\n* first beta of 3.5.0, using python-future\n\n* for the full feature list, see `3.5.0`_\n\n3.3.0r2\n~~~~~~~\n\n* updated the fix for `#16820 <http://bugs.python.org/issue16820>`_: parsers\n  now preserve section order when using ``__setitem__`` and ``update``\n\n3.3.0r1\n~~~~~~~\n\n* compatible with 3.3.0 + fixes for `#15803\n  <http://bugs.python.org/issue15803>`_ and `#16820\n  <http://bugs.python.org/issue16820>`_\n\n* fixes `BitBucket issue #4\n  <https://bitbucket.org/ambv/configparser2/issue/4>`_: ``read()`` properly\n  treats a bytestring argument as a filename\n\n* `ordereddict <http://pypi.python.org/pypi/ordereddict>`_ dependency required\n  only for Python 2.6\n\n* `unittest2 <http://pypi.python.org/pypi/unittest2>`_ explicit dependency\n  dropped. If you want to test the release, add ``unittest2`` on your own.\n\n3.2.0r3\n~~~~~~~\n\n* proper Python 2.6 support\n\n  * explicitly stated the dependency on `ordereddict\n    <http://pypi.python.org/pypi/ordereddict>`_\n\n  * numbered all formatting braces in strings\n\n* explicitly says that Python 2.5 support won't happen (too much work necessary\n  without abstract base classes, string formatters, the ``io`` library, etc.)\n\n* some healthy advertising in the README\n\n3.2.0r2\n~~~~~~~\n\n* a backport-specific change: for convenience and basic compatibility with the\n  old ConfigParser, bytestrings are now accepted as section names, options and\n  values.  Those strings are still converted to Unicode for internal storage so\n  in any case when such conversion is not possible (using the 'ascii' codec),\n  UnicodeDecodeError is raised.\n\n3.2.0r1\n~~~~~~~\n\n* the first public release compatible with 3.2.0 + fixes for `#11324\n  <http://bugs.python.org/issue11324>`_, `#11670\n  <http://bugs.python.org/issue11670>`_ and `#11858\n  <http://bugs.python.org/issue11858>`_.\n\nConversion Process\n------------------\n\nThis section is technical and should bother you only if you are wondering how\nthis backport is produced. If the implementation details of this backport are\nnot important for you, feel free to ignore the following content.\n\n``configparser2`` is converted using `python-future\n<http://python-future.org>`_ and free time.  Because a fully automatic\nconversion was not doable, I took the following branching approach:\n\n* the ``3.x`` branch holds unchanged files synchronized from the upstream\n  CPython repository. The synchronization is currently done by manually copying\n  the required files and stating from which CPython changeset they come from.\n\n* the ``default`` branch holds a version of the ``3.x`` code with some tweaks\n  that make it independent from libraries and constructions unavailable on 2.x.\n  Code on this branch still *must* work on the corresponding Python 3.x but\n  will also work on Python 2.6 and 2.7 (including PyPy).  You can check this\n  running the supplied unit tests with ``tox``.\n\nThe process works like this:\n\n1. I update the ``3.x`` branch with new versions of files. Commit.\n\n2. I merge the new commit to ``default``. I run ``tox``. Commit.\n\n3. If there are necessary changes, I do them now (on ``default``). Note that\n   the changes should be written in the syntax subset supported by Python\n   2.6.\n\n4. I run ``tox``. If it works, I update the docs and release the new version.\n   Otherwise, I go back to point 3. I might use ``pasteurize`` to suggest me\n   required changes but usually I do them manually to keep resulting code in\n   a nicer form.\n\n\nFootnotes\n---------\n\n.. [1] To somewhat ease migration, passing bytestrings is still supported but\n       they are converted to Unicode for internal storage anyway. This means\n       that for the vast majority of strings used in configuration files, it\n       won't matter if you pass them as bytestrings or Unicode. However, if you\n       pass a bytestring that cannot be converted to Unicode using the naive\n       ASCII codec, a ``UnicodeDecodeError`` will be raised. This is purposeful\n       and helps you manage proper encoding for all content you store in\n       memory, read from various sources and write back.\n\n.. [2] Life gets much easier when you understand that you basically manage\n       **text** in your application.  You don't care about bytes but about\n       letters.  In that regard the concept of content encoding is meaningless.\n       The only time when you deal with raw bytes is when you write the data to\n       a file.  Then you have to specify how your text should be encoded.  On\n       the other end, to get meaningful text from a file, the application\n       reading it has to know which encoding was used during its creation.  But\n       once the bytes are read and properly decoded, all you have is text.  This\n       is especially powerful when you start interacting with multiple data\n       sources.  Even if each of them uses a different encoding, inside your\n       application data is held in abstract text form.  You can program your\n       business logic without worrying about which data came from which source.\n       You can freely exchange the data you store between sources.  Only\n       reading/writing files requires encoding your text to bytes.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shubhamchaudhary/configparser2", "keywords": "configparser configparser2 ini parsing conf cfg configuration file", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "configparser2", "package_url": "https://pypi.org/project/configparser2/", "platform": "any", "project_url": "https://pypi.org/project/configparser2/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/shubhamchaudhary/configparser2"}, "release_url": "https://pypi.org/project/configparser2/4.0.0/", "requires_dist": null, "requires_python": null, "summary": "This library brings the updated configparser from Python 3.5 to Python 2.6-3.5.", "version": "4.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/shubhamchaudhary/configparser2\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/shubhamchaudhary/configparser2.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4ad681e3cfd41d5c0d2d789185606bf59c1898a/68747470733a2f2f7472617669732d63692e6f72672f7368756268616d6368617564686172792f636f6e666967706172736572322e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/shubhamchaudhary/configparser2\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/shubhamchaudhary/configparser2/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d8369ba3892d69a496a07e6b634ea9711dc8ebd/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7368756268616d6368617564686172792f636f6e666967706172736572322f62616467652e737667\"></a>\n<a href=\"https://waffle.io/shubhamchaudhary/configparser2\" rel=\"nofollow\"><img alt=\"'Stories in Ready'\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67b28ca381ac4c8e1d735cd090fe58ebe15a69a0/68747470733a2f2f62616467652e776166666c652e696f2f7368756268616d6368617564686172792f636f6e666967706172736572322e706e673f6c6162656c3d7265616479267469746c653d5265616479\"></a>\n<a href=\"https://pypi.python.org/pypi/configparser2\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/configparser2.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3dc6d895dc259c53cf52301c4016285c15332414/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6e666967706172736572322e737667\"></a>\n<img alt=\"https://img.shields.io/github/tag/shubhamchaudhary/configparser2.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0033a88362bede1db930579369825f86f98f224/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f7368756268616d6368617564686172792f636f6e666967706172736572322e737667\">\n<img alt=\"https://img.shields.io/github/release/shubhamchaudhary/configparser2.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60ac163f525760199dec993b3fdaffbf96a11c3e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f7368756268616d6368617564686172792f636f6e666967706172736572322e737667\">\n<div id=\"configparser2\">\n<h2>configparser2</h2>\n<p>configparser2 is derived from Lukasz Langa\u2019s configparser mercurial repo. The\nonly difference is a name is not conflicting with the default python3\nconfigparser.</p>\n<div id=\"source-code\">\n<h3>Source Code</h3>\n<p>Source Code for configparser2 is on\n<a href=\"https://github.com/shubhamchaudhary/configparser2\" rel=\"nofollow\">Github</a>.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>A quick <tt>pip install configparser2</tt> should do the job.</p>\n</div>\n<div id=\"docs-for-configparser\">\n<h3>Docs for configparser</h3>\n<p>The ancient <tt>ConfigParser</tt> module available in the standard library 2.x has\nseen a major update in Python 3.2. This is a backport of those changes so that\nthey can be used directly in Python 2.6 - 3.5.</p>\n<p>To use the <tt>configparser2</tt> backport instead of the built-in version on both\nPython 2 and Python 3, simply import it explicitly as a backport:</p>\n<pre>from backports import configparser2\n</pre>\n<p>If you\u2019d like to use the backport on Python 2 and the built-in version on\nPython 3, use that invocation instead:</p>\n<pre>import configparser2\n</pre>\n<p>For detailed documentation consult the vanilla version at\n<a href=\"http://docs.python.org/3/library/configparser2.html\" rel=\"nofollow\">http://docs.python.org/3/library/configparser2.html</a>.</p>\n<div id=\"why-you-ll-love-configparser2\">\n<h4>Why you\u2019ll love <tt>configparser2</tt></h4>\n<p>Whereas almost completely compatible with its older brother, <tt>configparser2</tt>\nsports a bunch of interesting new features:</p>\n<ul>\n<li><p>full mapping protocol access (<a href=\"http://docs.python.org/3/library/configparser2.html#mapping-protocol-access\" rel=\"nofollow\">more info</a>):</p>\n<pre>&gt;&gt;&gt; parser = ConfigParser()\n&gt;&gt;&gt; parser.read_string(\"\"\"\n[DEFAULT]\nlocation = upper left\nvisible = yes\neditable = no\ncolor = blue\n\n[main]\ntitle = Main Menu\ncolor = green\n\n[options]\ntitle = Options\n\"\"\")\n&gt;&gt;&gt; parser['main']['color']\n'green'\n&gt;&gt;&gt; parser['main']['editable']\n'no'\n&gt;&gt;&gt; section = parser['options']\n&gt;&gt;&gt; section['title']\n'Options'\n&gt;&gt;&gt; section['title'] = 'Options (editable: %(editable)s)'\n&gt;&gt;&gt; section['title']\n'Options (editable: no)'\n</pre>\n</li>\n<li><p>there\u2019s now one default <tt>ConfigParser</tt> class, which basically is the old\n<tt>SafeConfigParser</tt> with a bunch of tweaks which make it more predictable for\nusers. Don\u2019t need interpolation? Simply use\n<tt>ConfigParser(interpolation=None)</tt>, no need to use a distinct\n<tt>RawConfigParser</tt> anymore.</p>\n</li>\n<li><p>the parser is highly <a href=\"http://docs.python.org/3/library/configparser2.html#customizing-parser-behaviour\" rel=\"nofollow\">customizable upon instantiation</a>\nsupporting things like changing option delimiters, comment characters, the\nname of the DEFAULT section, the interpolation syntax, etc.</p>\n</li>\n<li><p>you can easily create your own interpolation syntax but there are two powerful\nimplementations built-in (<a href=\"http://docs.python.org/3/library/configparser2.html#interpolation-of-values\" rel=\"nofollow\">more info</a>):</p>\n<ul>\n<li>the classic <tt><span class=\"pre\">%(string-like)s</span></tt> syntax (called <tt>BasicInterpolation</tt>)</li>\n<li>a new <tt>${buildout:like}</tt> syntax (called <tt>ExtendedInterpolation</tt>)</li>\n</ul>\n</li>\n<li><p>fallback values may be specified in getters (<a href=\"http://docs.python.org/3/library/configparser2.html#fallback-values\" rel=\"nofollow\">more info</a>):</p>\n<pre>&gt;&gt;&gt; config.get('closet', 'monster',\n...            fallback='No such things as monsters')\n'No such things as monsters'\n</pre>\n</li>\n<li><p><tt>ConfigParser</tt> objects can now read data directly <a href=\"http://docs.python.org/3/library/configparser2.html#configparser2.ConfigParser.read_string\" rel=\"nofollow\">from strings</a>\nand <a href=\"http://docs.python.org/3/library/configparser2.html#configparser2.ConfigParser.read_dict\" rel=\"nofollow\">from dictionaries</a>.\nThat means importing configuration from JSON or specifying default values for\nthe whole configuration (multiple sections) is now a single line of code. Same\ngoes for copying data from another <tt>ConfigParser</tt> instance, thanks to its\nmapping protocol support.</p>\n</li>\n<li><p>many smaller tweaks, updates and fixes</p>\n</li>\n</ul>\n</div>\n<div id=\"a-few-words-about-unicode\">\n<h4>A few words about Unicode</h4>\n<p><tt>configparser2</tt> comes from Python 3 and as such it works well with Unicode.\nThe library is generally cleaned up in terms of internal data storage and\nreading/writing files.  There are a couple of incompatibilities with the old\n<tt>ConfigParser</tt> due to that. However, the work required to migrate is well\nworth it as it shows the issues that would likely come up during migration of\nyour project to Python 3.</p>\n<p>The design assumes that Unicode strings are used whenever possible <a href=\"#id15\" id=\"id1\" rel=\"nofollow\">[1]</a>.  That\ngives you the certainty that what\u2019s stored in a configuration object is text.\nOnce your configuration is read, the rest of your application doesn\u2019t have to\ndeal with encoding issues. All you have is text <a href=\"#id16\" id=\"id2\" rel=\"nofollow\">[2]</a>. The only two phases when\nyou should explicitly state encoding is when you either read from an external\nsource (e.g. a file) or write back.</p>\n</div>\n<div id=\"versioning\">\n<h4>Versioning</h4>\n<p>This backport is intended to keep 100% compatibility with the vanilla release in\nPython 3.2+. To help maintaining a version you want and expect, a versioning\nscheme is used where:</p>\n<ul>\n<li>the first two numbers indicate the version of Python 3 from which the\nbackport is done</li>\n<li>a backport release number is provided as the final number (zero-indexed)</li>\n</ul>\n<p>For example, <tt>3.5.2</tt> is the <strong>third</strong> backport release of the\n<tt>configparser2</tt> library as seen in Python 3.5.  Note that <tt>3.5.2</tt> does\n<strong>NOT</strong> necessarily mean this backport version is based on the standard library\nof Python 3.5.2.</p>\n<p>One exception from the 100% compatibility principle is that bugs fixed before\nreleasing another minor Python 3 bugfix version <strong>will be included</strong> in the\nbackport releases done in the mean time.</p>\n</div>\n<div id=\"maintenance\">\n<h4>Maintenance</h4>\n<p>This backport is maintained on BitBucket by \u0141ukasz Langa, the current vanilla\n<tt>configparser2</tt> maintainer for CPython:</p>\n<ul>\n<li><a href=\"https://github.com/shubhamchaudhary/configparser2\" rel=\"nofollow\">configparser2 git repository</a></li>\n<li><a href=\"https://github.com/shubhamchaudhary/configparser2\" rel=\"nofollow\">configparser2 Mercurial repository</a></li>\n<li><a href=\"https://github.com/shubhamchaudhary/configparser2/issues\" rel=\"nofollow\">configparser2 issue tracker</a></li>\n</ul>\n</div>\n<div id=\"change-log\">\n<h4>Change Log</h4>\n</div>\n</div>\n<div id=\"id3\">\n<h3>4.0.0</h3>\n<ul>\n<li>Change name to configparser2</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>3.5.0</h3>\n<ul>\n<li>a complete rewrite of the backport; now single codebase working on Python\n2.6 - 3.5. To use on Python 3 import <tt>from backports import configparser2</tt>\ninstead of the built-in version.</li>\n<li>compatible with 3.4.1 + fixes for <a href=\"http://bugs.python.org/issue19546\" rel=\"nofollow\">#19546</a></li>\n<li>fixes <a href=\"https://bitbucket.org/ambv/configparser2/issue/1\" rel=\"nofollow\">BitBucket issue #1</a>: versioning non-compliant\nwith PEP 386</li>\n<li>fixes <a href=\"https://bitbucket.org/ambv/configparser2/issue/3\" rel=\"nofollow\">BitBucket issue #3</a>: <tt>reload(sys);\n<span class=\"pre\">sys.setdefaultencoding('utf8')</span></tt> in setup.py</li>\n<li>fixes <a href=\"https://bitbucket.org/ambv/configparser2/issue/5\" rel=\"nofollow\">BitBucket issue #5</a>: Installing the backport\non Python 3 breaks virtualenv</li>\n<li>fixes <a href=\"https://bitbucket.org/ambv/configparser2/issue/6\" rel=\"nofollow\">BitBucket issue #6</a>: PyPy compatibility</li>\n</ul>\n</div>\n<div id=\"b2\">\n<h3>3.5.0b2</h3>\n<ul>\n<li>second beta of 3.5.0, not using any third-party futurization libraries</li>\n</ul>\n</div>\n<div id=\"b1\">\n<h3>3.5.0b1</h3>\n<ul>\n<li>first beta of 3.5.0, using python-future</li>\n<li>for the full feature list, see <a href=\"#id4\" rel=\"nofollow\">3.5.0</a></li>\n</ul>\n</div>\n<div id=\"r2\">\n<h3>3.3.0r2</h3>\n<ul>\n<li>updated the fix for <a href=\"http://bugs.python.org/issue16820\" rel=\"nofollow\">#16820</a>: parsers\nnow preserve section order when using <tt>__setitem__</tt> and <tt>update</tt></li>\n</ul>\n</div>\n<div id=\"r1\">\n<h3>3.3.0r1</h3>\n<ul>\n<li>compatible with 3.3.0 + fixes for <a href=\"http://bugs.python.org/issue15803\" rel=\"nofollow\">#15803</a> and <a href=\"http://bugs.python.org/issue16820\" rel=\"nofollow\">#16820</a></li>\n<li>fixes <a href=\"https://bitbucket.org/ambv/configparser2/issue/4\" rel=\"nofollow\">BitBucket issue #4</a>: <tt>read()</tt> properly\ntreats a bytestring argument as a filename</li>\n<li><a href=\"http://pypi.python.org/pypi/ordereddict\" rel=\"nofollow\">ordereddict</a> dependency required\nonly for Python 2.6</li>\n<li><a href=\"http://pypi.python.org/pypi/unittest2\" rel=\"nofollow\">unittest2</a> explicit dependency\ndropped. If you want to test the release, add <tt>unittest2</tt> on your own.</li>\n</ul>\n</div>\n<div id=\"r3\">\n<h3>3.2.0r3</h3>\n<ul>\n<li>proper Python 2.6 support<ul>\n<li>explicitly stated the dependency on <a href=\"http://pypi.python.org/pypi/ordereddict\" rel=\"nofollow\">ordereddict</a></li>\n<li>numbered all formatting braces in strings</li>\n</ul>\n</li>\n<li>explicitly says that Python 2.5 support won\u2019t happen (too much work necessary\nwithout abstract base classes, string formatters, the <tt>io</tt> library, etc.)</li>\n<li>some healthy advertising in the README</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>3.2.0r2</h3>\n<ul>\n<li>a backport-specific change: for convenience and basic compatibility with the\nold ConfigParser, bytestrings are now accepted as section names, options and\nvalues.  Those strings are still converted to Unicode for internal storage so\nin any case when such conversion is not possible (using the \u2018ascii\u2019 codec),\nUnicodeDecodeError is raised.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>3.2.0r1</h3>\n<ul>\n<li>the first public release compatible with 3.2.0 + fixes for <a href=\"http://bugs.python.org/issue11324\" rel=\"nofollow\">#11324</a>, <a href=\"http://bugs.python.org/issue11670\" rel=\"nofollow\">#11670</a> and <a href=\"http://bugs.python.org/issue11858\" rel=\"nofollow\">#11858</a>.</li>\n</ul>\n<div id=\"conversion-process\">\n<h4>Conversion Process</h4>\n<p>This section is technical and should bother you only if you are wondering how\nthis backport is produced. If the implementation details of this backport are\nnot important for you, feel free to ignore the following content.</p>\n<p><tt>configparser2</tt> is converted using <a href=\"http://python-future.org\" rel=\"nofollow\">python-future</a> and free time.  Because a fully automatic\nconversion was not doable, I took the following branching approach:</p>\n<ul>\n<li>the <tt>3.x</tt> branch holds unchanged files synchronized from the upstream\nCPython repository. The synchronization is currently done by manually copying\nthe required files and stating from which CPython changeset they come from.</li>\n<li>the <tt>default</tt> branch holds a version of the <tt>3.x</tt> code with some tweaks\nthat make it independent from libraries and constructions unavailable on 2.x.\nCode on this branch still <em>must</em> work on the corresponding Python 3.x but\nwill also work on Python 2.6 and 2.7 (including PyPy).  You can check this\nrunning the supplied unit tests with <tt>tox</tt>.</li>\n</ul>\n<p>The process works like this:</p>\n<ol>\n<li>I update the <tt>3.x</tt> branch with new versions of files. Commit.</li>\n<li>I merge the new commit to <tt>default</tt>. I run <tt>tox</tt>. Commit.</li>\n<li>If there are necessary changes, I do them now (on <tt>default</tt>). Note that\nthe changes should be written in the syntax subset supported by Python\n2.6.</li>\n<li>I run <tt>tox</tt>. If it works, I update the docs and release the new version.\nOtherwise, I go back to point 3. I might use <tt>pasteurize</tt> to suggest me\nrequired changes but usually I do them manually to keep resulting code in\na nicer form.</li>\n</ol>\n</div>\n<div id=\"footnotes\">\n<h4>Footnotes</h4>\n<table id=\"id15\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>To somewhat ease migration, passing bytestrings is still supported but\nthey are converted to Unicode for internal storage anyway. This means\nthat for the vast majority of strings used in configuration files, it\nwon\u2019t matter if you pass them as bytestrings or Unicode. However, if you\npass a bytestring that cannot be converted to Unicode using the naive\nASCII codec, a <tt>UnicodeDecodeError</tt> will be raised. This is purposeful\nand helps you manage proper encoding for all content you store in\nmemory, read from various sources and write back.</td></tr>\n</tbody>\n</table>\n<table id=\"id16\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>Life gets much easier when you understand that you basically manage\n<strong>text</strong> in your application.  You don\u2019t care about bytes but about\nletters.  In that regard the concept of content encoding is meaningless.\nThe only time when you deal with raw bytes is when you write the data to\na file.  Then you have to specify how your text should be encoded.  On\nthe other end, to get meaningful text from a file, the application\nreading it has to know which encoding was used during its creation.  But\nonce the bytes are read and properly decoded, all you have is text.  This\nis especially powerful when you start interacting with multiple data\nsources.  Even if each of them uses a different encoding, inside your\napplication data is held in abstract text form.  You can program your\nbusiness logic without worrying about which data came from which source.\nYou can freely exchange the data you store between sources.  Only\nreading/writing files requires encoding your text to bytes.</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1544864, "releases": {"4.0.0": [{"comment_text": "", "digests": {"md5": "60018f99cae0c4f43864352c576ea52d", "sha256": "d22444d117d1889e7c0f040c6c1d02f56bc58a5c2040c5c056cad828f212b16f"}, "downloads": -1, "filename": "configparser2-4.0.0.tar.gz", "has_sig": false, "md5_digest": "60018f99cae0c4f43864352c576ea52d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21811, "upload_time": "2015-05-12T20:29:56", "upload_time_iso_8601": "2015-05-12T20:29:56.341993Z", "url": "https://files.pythonhosted.org/packages/15/7d/23899ba6f88302c5619a2e81529c5944ccdf5becfe5b72bc6b97449cdf8b/configparser2-4.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "60018f99cae0c4f43864352c576ea52d", "sha256": "d22444d117d1889e7c0f040c6c1d02f56bc58a5c2040c5c056cad828f212b16f"}, "downloads": -1, "filename": "configparser2-4.0.0.tar.gz", "has_sig": false, "md5_digest": "60018f99cae0c4f43864352c576ea52d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21811, "upload_time": "2015-05-12T20:29:56", "upload_time_iso_8601": "2015-05-12T20:29:56.341993Z", "url": "https://files.pythonhosted.org/packages/15/7d/23899ba6f88302c5619a2e81529c5944ccdf5becfe5b72bc6b97449cdf8b/configparser2-4.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:54 2020"}