{"info": {"author": "Cameron Simpson", "author_email": "cs@cskk.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "*Latest release 20200318*:\nRemove use of cs.obj.O, universally supplanted by types.SimpleNamespace.\n\nAssorted debugging facilities.\n\n* Lock, RLock, Thread: wrappers for threading facilties; simply import from here instead of there\n\n* thread_dump, stack_dump: dump thread and stack state\n\n* @DEBUG: decorator to wrap functions in timing and value debuggers\n\n* @trace: decorator to report call and return from functions\n\n* @trace_caller: decorator to report caller of function\n\n* TracingObject: subclass of cs.obj.Proxy that reports attribute use\n\n## Function `DEBUG(f, force=False)`\n\nDecorator to wrap functions in timing and value debuggers.\n\n## Function `debug_object_shell(o, prompt=None)`\n\nInteractive prompt for inspecting variables.\n\n## Class `DebuggingLock(DebugWrapper,types.SimpleNamespace)`\n\nWrapper class for threading.Lock to trace creation and use.\ncs.threads.Lock() returns on of these in debug mode or a raw\nthreading.Lock otherwise.\n\n## Class `DebuggingRLock(DebugWrapper,types.SimpleNamespace)`\n\nWrapper class for threading.RLock to trace creation and use.\ncs.threads.RLock() returns on of these in debug mode or a raw\nthreading.RLock otherwise.\n\n## Class `DebugShell(cmd.Cmd)`\n\nAn interactive prompt for python statements, attached to /dev/tty by default.\n\n## Class `DebugWrapper(types.SimpleNamespace)`\n\nBase class for classes presenting debugging wrappers.\n\n## Function `DF(func, *a, **kw)`\n\nWrapper for a function call to debug its use.\nRequires rewriting the call from f(*a, *kw) to DF(f, *a, **kw).\nAlternatively one could rewrite as DEBUG(f)(*a, **kw).\n\n## Function `Lock()`\n\nFactory function: if cs.logutils.logging_level <= logging.DEBUG\nthen return a DebuggingLock, otherwise a threading.Lock.\n\n## Function `openfiles(substr=None, pid=None)`\n\nRun lsof(8) against process `pid` returning paths of open files whose paths contain `substr`.\n`substr`: default substring to select by; default returns all paths.\n`pid`: process to examine; default from os.getpid().\n\n## Function `RLock()`\n\nFactory function: if cs.logutils.logging_level <= logging.DEBUG\nthen return a DebuggingRLock, otherwise a threading.RLock.\n\n## Function `selftest(module_name, defaultTest=None, argv=None)`\n\nCalled by my unit tests.\n\n## Function `stack_dump(stack=None, limit=None, logger=None, log_level=None)`\n\nDump a stack trace to a logger.\n`stack`: a stack list as returned by traceback.extract_stack.\n         If missing or None, use the result of traceback.extract_stack().\n`limit`: a limit to the number of stack entries to dump.\n         If missing or None, dump all entries.\n`logger`: a logger.Logger ducktype or the name of a logger.\n         If missing or None, obtain a logger from logging.getLogger().\n`log_level`: the logging level for the dump.\n         If missing or None, use cs.logutils.logging_level.\n\n## Function `thread_dump(Ts=None, fp=None)`\n\nWrite thread identifiers and stack traces to the file `fp`.\n`Ts`: the Threads to dump; if unspecified use threading.enumerate().\n`fp`: the file to which to write; if unspecified use sys.stderr.\n\n## Class `TimingOutLock`\n\nA Lock replacement which times out, used for locating deadlock points.\n\n## Function `trace(func)`\n\nDecorator to report the call and return of a function.\n\n## Function `trace_caller(func)`\n\nDecorator to report the caller of a function when called.\n\n## Class `TraceSuite`\n\nContext manager to trace start and end of a code suite.\n\n\n\n# Release Log\n\n*Release 20200318*:\nRemove use of cs.obj.O, universally supplanted by types.SimpleNamespace.\n\n*Release 20181231*:\nNew TimingOutLock for locating deadlock points, grew from debugging cs.vt.index.\nOther minor changes.\n\n*Release 20171231*:\nUpdate imports for recentchanges.\nNew context manager TraceSuite to trace start and end of a code suite.\n\n*Release 20160918*:\nselftest(): fix parameter ordering to match unittest.\n\n*Release 20160828*:\nUpdate metadata with \"install_requires\" instead of \"requires\".\n\n*Release 20160827*:\nNew openfiles() to return selected pathnames of open files via lsof(8).\nNew selftest() to invoke unittests with benefits.\nDebugShell, a cmd.Cmd subclass for debugging - current use case calls this with self.__dict__ in a test case tearDwon.\ndebug_object_shell: convenience wrapper for DebugShell to call it on an object's attributes.\n\n*Release 20150116*:\nPyPI prep.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all", "keywords": "python2,python3", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "cs.debug", "package_url": "https://pypi.org/project/cs.debug/", "platform": "", "project_url": "https://pypi.org/project/cs.debug/", "project_urls": {"Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all"}, "release_url": "https://pypi.org/project/cs.debug/20200318/", "requires_dist": null, "requires_python": "", "summary": "Assorted debugging facilities.", "version": "20200318", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Latest release 20200318</em>:\nRemove use of cs.obj.O, universally supplanted by types.SimpleNamespace.</p>\n<p>Assorted debugging facilities.</p>\n<ul>\n<li>\n<p>Lock, RLock, Thread: wrappers for threading facilties; simply import from here instead of there</p>\n</li>\n<li>\n<p>thread_dump, stack_dump: dump thread and stack state</p>\n</li>\n<li>\n<p>@DEBUG: decorator to wrap functions in timing and value debuggers</p>\n</li>\n<li>\n<p>@trace: decorator to report call and return from functions</p>\n</li>\n<li>\n<p>@trace_caller: decorator to report caller of function</p>\n</li>\n<li>\n<p>TracingObject: subclass of cs.obj.Proxy that reports attribute use</p>\n</li>\n</ul>\n<h2>Function <code>DEBUG(f, force=False)</code></h2>\n<p>Decorator to wrap functions in timing and value debuggers.</p>\n<h2>Function <code>debug_object_shell(o, prompt=None)</code></h2>\n<p>Interactive prompt for inspecting variables.</p>\n<h2>Class <code>DebuggingLock(DebugWrapper,types.SimpleNamespace)</code></h2>\n<p>Wrapper class for threading.Lock to trace creation and use.\ncs.threads.Lock() returns on of these in debug mode or a raw\nthreading.Lock otherwise.</p>\n<h2>Class <code>DebuggingRLock(DebugWrapper,types.SimpleNamespace)</code></h2>\n<p>Wrapper class for threading.RLock to trace creation and use.\ncs.threads.RLock() returns on of these in debug mode or a raw\nthreading.RLock otherwise.</p>\n<h2>Class <code>DebugShell(cmd.Cmd)</code></h2>\n<p>An interactive prompt for python statements, attached to /dev/tty by default.</p>\n<h2>Class <code>DebugWrapper(types.SimpleNamespace)</code></h2>\n<p>Base class for classes presenting debugging wrappers.</p>\n<h2>Function <code>DF(func, *a, **kw)</code></h2>\n<p>Wrapper for a function call to debug its use.\nRequires rewriting the call from f(*a, *kw) to DF(f, *a, **kw).\nAlternatively one could rewrite as DEBUG(f)(*a, **kw).</p>\n<h2>Function <code>Lock()</code></h2>\n<p>Factory function: if cs.logutils.logging_level &lt;= logging.DEBUG\nthen return a DebuggingLock, otherwise a threading.Lock.</p>\n<h2>Function <code>openfiles(substr=None, pid=None)</code></h2>\n<p>Run lsof(8) against process <code>pid</code> returning paths of open files whose paths contain <code>substr</code>.\n<code>substr</code>: default substring to select by; default returns all paths.\n<code>pid</code>: process to examine; default from os.getpid().</p>\n<h2>Function <code>RLock()</code></h2>\n<p>Factory function: if cs.logutils.logging_level &lt;= logging.DEBUG\nthen return a DebuggingRLock, otherwise a threading.RLock.</p>\n<h2>Function <code>selftest(module_name, defaultTest=None, argv=None)</code></h2>\n<p>Called by my unit tests.</p>\n<h2>Function <code>stack_dump(stack=None, limit=None, logger=None, log_level=None)</code></h2>\n<p>Dump a stack trace to a logger.\n<code>stack</code>: a stack list as returned by traceback.extract_stack.\nIf missing or None, use the result of traceback.extract_stack().\n<code>limit</code>: a limit to the number of stack entries to dump.\nIf missing or None, dump all entries.\n<code>logger</code>: a logger.Logger ducktype or the name of a logger.\nIf missing or None, obtain a logger from logging.getLogger().\n<code>log_level</code>: the logging level for the dump.\nIf missing or None, use cs.logutils.logging_level.</p>\n<h2>Function <code>thread_dump(Ts=None, fp=None)</code></h2>\n<p>Write thread identifiers and stack traces to the file <code>fp</code>.\n<code>Ts</code>: the Threads to dump; if unspecified use threading.enumerate().\n<code>fp</code>: the file to which to write; if unspecified use sys.stderr.</p>\n<h2>Class <code>TimingOutLock</code></h2>\n<p>A Lock replacement which times out, used for locating deadlock points.</p>\n<h2>Function <code>trace(func)</code></h2>\n<p>Decorator to report the call and return of a function.</p>\n<h2>Function <code>trace_caller(func)</code></h2>\n<p>Decorator to report the caller of a function when called.</p>\n<h2>Class <code>TraceSuite</code></h2>\n<p>Context manager to trace start and end of a code suite.</p>\n<h1>Release Log</h1>\n<p><em>Release 20200318</em>:\nRemove use of cs.obj.O, universally supplanted by types.SimpleNamespace.</p>\n<p><em>Release 20181231</em>:\nNew TimingOutLock for locating deadlock points, grew from debugging cs.vt.index.\nOther minor changes.</p>\n<p><em>Release 20171231</em>:\nUpdate imports for recentchanges.\nNew context manager TraceSuite to trace start and end of a code suite.</p>\n<p><em>Release 20160918</em>:\nselftest(): fix parameter ordering to match unittest.</p>\n<p><em>Release 20160828</em>:\nUpdate metadata with \"install_requires\" instead of \"requires\".</p>\n<p><em>Release 20160827</em>:\nNew openfiles() to return selected pathnames of open files via lsof(8).\nNew selftest() to invoke unittests with benefits.\nDebugShell, a cmd.Cmd subclass for debugging - current use case calls this with self.<strong>dict</strong> in a test case tearDwon.\ndebug_object_shell: convenience wrapper for DebugShell to call it on an object's attributes.</p>\n<p><em>Release 20150116</em>:\nPyPI prep.</p>\n\n          </div>"}, "last_serial": 6831680, "releases": {"20150116": [{"comment_text": "", "digests": {"md5": "1ac8c4d2385c25c83b94e7622cde8156", "sha256": "ee593c108e73d2a4b7726f64b082141493e0fa65a2cc3ec370865f7cbb0b29a2"}, "downloads": -1, "filename": "cs.debug-20150116.tar.gz", "has_sig": false, "md5_digest": "1ac8c4d2385c25c83b94e7622cde8156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4672, "upload_time": "2015-01-18T06:09:36", "upload_time_iso_8601": "2015-01-18T06:09:36.104853Z", "url": "https://files.pythonhosted.org/packages/9f/58/cb5fd66d3cb33cb8d7a193368623c9a8811e98004c5adca6d30259691857/cs.debug-20150116.tar.gz", "yanked": false}], "20160827": [{"comment_text": "", "digests": {"md5": "cd053e4a6a8721e463fd6b5fc4d39292", "sha256": "6e62d982bcfad595bf1235c286024f51f06a05e10c41ec8046ec58c1a10f751d"}, "downloads": -1, "filename": "cs.debug-20160827.tar.gz", "has_sig": false, "md5_digest": "cd053e4a6a8721e463fd6b5fc4d39292", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5212, "upload_time": "2016-08-27T03:34:31", "upload_time_iso_8601": "2016-08-27T03:34:31.032682Z", "url": "https://files.pythonhosted.org/packages/4e/c8/29db77b63d881babe18d5571cd241ed5259289a4c63097ef13443f878b30/cs.debug-20160827.tar.gz", "yanked": false}], "20160828": [{"comment_text": "", "digests": {"md5": "ea8fc7a546a0fa89dd911f1aa60fcb79", "sha256": "76b4cb9a9ca493e7396d1fc94bc06230bdd3179f3661b3b0e271f62769ab7824"}, "downloads": -1, "filename": "cs.debug-20160828.tar.gz", "has_sig": false, "md5_digest": "ea8fc7a546a0fa89dd911f1aa60fcb79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5564, "upload_time": "2016-08-28T06:04:27", "upload_time_iso_8601": "2016-08-28T06:04:27.023706Z", "url": "https://files.pythonhosted.org/packages/c6/c0/aba5ebaecfec1b763d8be4e698dd60fbd37cd7119d9af00bc70caaeaf13f/cs.debug-20160828.tar.gz", "yanked": false}], "20160918": [{"comment_text": "", "digests": {"md5": "ae47c6dfbaa1c8a2afd99b5568717f77", "sha256": "b6f034165b05c41a13b115b79bce8ae31c998f927a142eff753ee943a1504d0c"}, "downloads": -1, "filename": "cs.debug-20160918.tar.gz", "has_sig": false, "md5_digest": "ae47c6dfbaa1c8a2afd99b5568717f77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5555, "upload_time": "2016-09-18T05:03:10", "upload_time_iso_8601": "2016-09-18T05:03:10.204585Z", "url": "https://files.pythonhosted.org/packages/36/0d/07b8ff6847e07ec5a8e2dd9e5bd5178f19f499034b61950a29ada60fd40d/cs.debug-20160918.tar.gz", "yanked": false}], "20171231": [{"comment_text": "", "digests": {"md5": "fa2d85f6a66bef464ef25cb9ed05528f", "sha256": "7c048c849a8137c004beb7229ab94f0733564388ba7ee66d4e5a26274da2d863"}, "downloads": -1, "filename": "cs.debug-20171231.tar.gz", "has_sig": false, "md5_digest": "fa2d85f6a66bef464ef25cb9ed05528f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5809, "upload_time": "2017-12-31T02:21:11", "upload_time_iso_8601": "2017-12-31T02:21:11.140712Z", "url": "https://files.pythonhosted.org/packages/3c/04/0d961eef200cb9e4c41a352c87683b66708c947cc009deb320b52ce0eb8a/cs.debug-20171231.tar.gz", "yanked": false}], "20181231": [{"comment_text": "", "digests": {"md5": "46f419ddc0977d5280dd6b33730b759e", "sha256": "c537c9755d51263c6b1d081a0ef23ccc11b9c3c6ec3d412a062fe09bd88dd031"}, "downloads": -1, "filename": "cs.debug-20181231.tar.gz", "has_sig": false, "md5_digest": "46f419ddc0977d5280dd6b33730b759e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7024, "upload_time": "2018-12-31T10:21:25", "upload_time_iso_8601": "2018-12-31T10:21:25.806987Z", "url": "https://files.pythonhosted.org/packages/8a/4c/3657078cb8ace139896e6e48accbc71c49c85bb08311d234ad69990b56a6/cs.debug-20181231.tar.gz", "yanked": false}], "20200318": [{"comment_text": "", "digests": {"md5": "84f6e7705a8fd0953e9e8a81dccc947d", "sha256": "eab304b3e836b2f45aec6fe23cdad5f4760bfb7d9b09f934e5109fc7f12df762"}, "downloads": -1, "filename": "cs.debug-20200318.tar.gz", "has_sig": false, "md5_digest": "84f6e7705a8fd0953e9e8a81dccc947d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8946, "upload_time": "2020-03-17T21:44:34", "upload_time_iso_8601": "2020-03-17T21:44:34.303693Z", "url": "https://files.pythonhosted.org/packages/64/3d/7614fa52cab7d9e700fd0a7d8a0479f49019b8b07037b2c91f027eacf725/cs.debug-20200318.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "84f6e7705a8fd0953e9e8a81dccc947d", "sha256": "eab304b3e836b2f45aec6fe23cdad5f4760bfb7d9b09f934e5109fc7f12df762"}, "downloads": -1, "filename": "cs.debug-20200318.tar.gz", "has_sig": false, "md5_digest": "84f6e7705a8fd0953e9e8a81dccc947d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8946, "upload_time": "2020-03-17T21:44:34", "upload_time_iso_8601": "2020-03-17T21:44:34.303693Z", "url": "https://files.pythonhosted.org/packages/64/3d/7614fa52cab7d9e700fd0a7d8a0479f49019b8b07037b2c91f027eacf725/cs.debug-20200318.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:51 2020"}