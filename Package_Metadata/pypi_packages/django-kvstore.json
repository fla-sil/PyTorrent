{"info": {"author": "Six Apart Ltd.", "author_email": "python@sixapart.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "An extensible key-value store backend for Django applications.\n\nThis module provides an abstraction layer for accessing a key-value storage.\n\nConfiguring your key-value store is a matter of adding a statement in this\nform to your Django settings module::\n\n    KEY_VALUE_STORE_BACKEND = 'scheme://store?parameters'\n\nWhere ``scheme`` is one of the following, persistent stores:\n\n* db (local table accessed through Django's database connection)\n* googleappengine (Google AppEngine data store)\n* sdb (Amazon SimpleDB)\n* tokyotyrant (Tokyo Tyrant)\n\nAnd some non-persistent stores, provided mainly for testing purposes:\n\n* locmem\n* memcached\n\n``store`` and ``parameters`` varies from one backend to another. Refer\nto the documentation included in each backend implementation for further\ndetails.\n\nYou can define a django_kvstore-backed custom model, in a fashion similar\nto Django models (although it does not support querying, except by primary\nkey lookup).\n\nHere's an example of a custom model class using django_kvstore::\n\n    from django_kvstore import models\n\n    class MyData(models.Model):\n        my_key = models.Field(pk=True)\n        foo = models.Field()\n        bar = models.Field()\n\nTypical usage for such a model::\n\n    key = \"something_unique\"\n    data = MyData.get(key)\n    if data is None:\n        data = MyData(my_key=key)\n        data.foo = \"foo\"\n        data.bar = \"bar\"\n        data.save()\n\nand deletion::\n\n    key = \"something_unique\"\n    data = MyData.get(key)\n    if data is not None:\n        data.delete()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/sixapart/django-kvstore", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-kvstore", "package_url": "https://pypi.org/project/django-kvstore/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-kvstore/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/sixapart/django-kvstore"}, "release_url": "https://pypi.org/project/django-kvstore/1.0/", "requires_dist": null, "requires_python": null, "summary": "An extensible key-value store backend for Django applications.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An extensible key-value store backend for Django applications.</p>\n<p>This module provides an abstraction layer for accessing a key-value storage.</p>\n<p>Configuring your key-value store is a matter of adding a statement in this\nform to your Django settings module:</p>\n<pre>KEY_VALUE_STORE_BACKEND = 'scheme://store?parameters'\n</pre>\n<p>Where <tt>scheme</tt> is one of the following, persistent stores:</p>\n<ul>\n<li>db (local table accessed through Django\u2019s database connection)</li>\n<li>googleappengine (Google AppEngine data store)</li>\n<li>sdb (Amazon SimpleDB)</li>\n<li>tokyotyrant (Tokyo Tyrant)</li>\n</ul>\n<p>And some non-persistent stores, provided mainly for testing purposes:</p>\n<ul>\n<li>locmem</li>\n<li>memcached</li>\n</ul>\n<p><tt>store</tt> and <tt>parameters</tt> varies from one backend to another. Refer\nto the documentation included in each backend implementation for further\ndetails.</p>\n<p>You can define a django_kvstore-backed custom model, in a fashion similar\nto Django models (although it does not support querying, except by primary\nkey lookup).</p>\n<p>Here\u2019s an example of a custom model class using django_kvstore:</p>\n<pre>from django_kvstore import models\n\nclass MyData(models.Model):\n    my_key = models.Field(pk=True)\n    foo = models.Field()\n    bar = models.Field()\n</pre>\n<p>Typical usage for such a model:</p>\n<pre>key = \"something_unique\"\ndata = MyData.get(key)\nif data is None:\n    data = MyData(my_key=key)\n    data.foo = \"foo\"\n    data.bar = \"bar\"\n    data.save()\n</pre>\n<p>and deletion:</p>\n<pre>key = \"something_unique\"\ndata = MyData.get(key)\nif data is not None:\n    data.delete()\n</pre>\n\n          </div>"}, "last_serial": 1437935, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5052904876fcc79a480bbd5fe07ce0ce", "sha256": "285a43b3868ff3b906d28453af4d4488722a2981b83625c2516e202597773fa0"}, "downloads": -1, "filename": "django-kvstore-1.0.tar.gz", "has_sig": false, "md5_digest": "5052904876fcc79a480bbd5fe07ce0ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7082, "upload_time": "2010-01-26T21:03:17", "upload_time_iso_8601": "2010-01-26T21:03:17.078268Z", "url": "https://files.pythonhosted.org/packages/dc/30/692e6fb6a0acc0d452393910fa38138b221ec6a5582e5264233df516cc40/django-kvstore-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5052904876fcc79a480bbd5fe07ce0ce", "sha256": "285a43b3868ff3b906d28453af4d4488722a2981b83625c2516e202597773fa0"}, "downloads": -1, "filename": "django-kvstore-1.0.tar.gz", "has_sig": false, "md5_digest": "5052904876fcc79a480bbd5fe07ce0ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7082, "upload_time": "2010-01-26T21:03:17", "upload_time_iso_8601": "2010-01-26T21:03:17.078268Z", "url": "https://files.pythonhosted.org/packages/dc/30/692e6fb6a0acc0d452393910fa38138b221ec6a5582e5264233df516cc40/django-kvstore-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:25 2020"}