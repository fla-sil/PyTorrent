{"info": {"author": "Fry-IT", "author_email": "matous@fry-it.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python"], "description": "collective.setuphelpers\n=======================\n\nThis package provides a few simple functions with common tasks used with initial\nsite content setup.\n\nThis does not aim to be as general as possible but it may speed things up.\n\n>>> from collective.setuphelpers.structure import setupStructure\n>>> portal = layer['portal']\n>>> STRUCTURE = [{'id':'example-id','title':'Example title','type':'Document'}]\n>>> setupStructure(portal, STRUCTURE)\n>>> portal['example-id']\n<ATDocument at /plone/example-id>\n>>> portal.manage_delObjects(['example-id'])\n\nYou can use subfolders etc.\n\n>>> setupStructure(portal, layer['test_structure'])\n>>> portal['testfolder']['item1'].getText()\n'<p>Text body</p>'\n\n\nContent related methods:\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n  def clearUpSite(context, to_delete):\n    \"\"\" Remove content from the plone site root using given list of ids e.g.:\n        TO_DELETE = ['news', 'events']\n    \"\"\"\n\n\n  def setupStructure(portal, structure, default_language=LANGUAGE, base_path=''):\n    \"\"\" Setup initial content structure. e.g.:\n\n        STRUCTURE = [\n            {\n                'title' : 'About us',\n                'type' : 'Document',\n                'interfaces': (\n                    IMyCustomMarkerInterface,\n                )\n            },\n            {\n                'title' : 'Products',\n                'type' : 'Folder',\n                'layout': 'folder_listing',\n                'subfolder': [\n                    {\n                        'title': 'Cheap Products',\n                        'type': 'Folder',\n                        'allowed_types': ['Document'],\n                        'block-portlets': {'manager': 'plone.rightcolumn'},\n                        # pass either module or configuration dict to the 'portlets' key\n                        'portlets':\n                            [ plone.app.portlets.portlets.calendar,\n                              { 'module': plone.app.portlets.portlets.classic,\n                                'name': 'myportlet1',\n                                'manager': 'plone.rightcolumn',\n                                'params': dict(template='mytemplate', macro='portlet')\n                               }\n                            ],\n                        'subfolder': [\n                            {\n                                'title': 'Product 1',\n                                'type': 'Document',\n                                'layout': '@@product-page'\n                            },\n                            {\n                                'title': 'Recommended',\n                                'type': 'Collection',\n                            },\n                            {\n                                 'title': u'Picture',\n                                 'id': u'image1.jpg',\n                                 'type':'Image',\n                                 'file': 'data/image1.jpg',\n                            },\n                        ]\n                    }\n                ]\n            }\n        ]\n\n        base_path parameter can specify absolute path for Files and Images. For example\n        you can use context._profile_path, where context is GenericSetup context. It allows\n        you to put files and images to profiles/default/data/image1.jpg.\n    \"\"\"\n\n\nUsers and groups related methods:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n  def createGroups(portal, groups):\n    \"\"\" Create user groups by passing list of tuples containing group ids and titles:\n\n        @example groups list:\n\n        GROUPS = [\n          ('customers', 'Customers'),\n          ('staff', 'Staff')\n        ]\n\n        from tools.sitesetup import createGroups\n        createGroups(portal, GROUPS)\n\n    \"\"\"\n\n  enableSelfRegistration(portal):\n    \"\"\" Enable anonymous users to register their user account. \"\"\"\n\n  def enableUserPwdChoice(portal):\n    \"\"\" Enable user password choice during user registration. \"\"\"\n\n\nVarious methods:\n~~~~~~~~~~~~~~~~\n\n::\n\n  def registerDisplayViews(portal, views):\n    \"\"\" Register additional display views for content types based on \"views\"\n        dictionary containing list of additional view ids for each content type.\n\n        @example views dictionary:\n\n        DISPLAY_VIEWS = {\n            'Folder': [\n                'short-listing',\n                'extended-listing'\n            ],\n\n            'Document': [\n                'article-view',\n                'fancy-document-view'\n            ]\n        }\n\n        @call from setup handler:\n\n        from tools.sitesetup import registerDisplayViews\n        registerDisplayViews(portal, DISPLAY_VIEWS)\n\n    \"\"\"\n\n\n  def unregisterDisplayViews(portal, views):\n    \"\"\" Unregister additional display views for content types based on \"views\"\n        dictionary containing list of additional view ids for each content type\n        (the same as for registerDisplayViews method).\n    \"\"\"\n\n\n  def setupCatalog(portal, indexes={}, metadata=[]):\n    \"\"\" Register portal catalog indexes and metadata columns. \"\"\"\n\n\n  def hideActions(portal, actions):\n    \"\"\" Hide actions given dict of action categories with values as list of action ids\n        example actions:\n        HIDE_ACTIONS = {'user':['dashboard'], 'object':['contentrules', 'local_roles']}\n    \"\"\"\n\n\n  def registerActions(portal, actions={}):\n    \"\"\" Register new portal actions using dict of action attributes like in the following\n        example:\n        CUSTOM_ACTIONS = {\n            '1': { # order in which will be action registered\n                'id': 'my-action',\n                'category': 'site_actions',\n                'title': 'My action',\n                'i18n_domain': 'myi18n.domain',\n                'url_expr': string:${globals_view/navigationRootUrl}/my-action-view',\n                'available_expr': 'python:member is not None'\n                'permissions': ('View',),\n                'visible': True\n            }\n        }\n    \"\"\"\n\n\n  def setupTinyMCE(portal, settings):\n    \"\"\" Configures tinymce wysiwyg editor. Here is an example settings object:\n    EDITOR_SETTINGS = {\n        'attributes': {\n            'contextmenu': False,\n            'link_using_uids': True,\n            'allow_captioned_images': True,\n            '...': True\n        },\n        'commands': {\n            'install_transforms': True\n        },\n        'toolbar': {\n            'advhr':False,\n            'anchor':False,\n            'attribs':False,\n            'backcolor':False,\n            'bold':True,\n            'bullist':True,\n            'charmap':False,\n            'cleanup':False,\n            'code':True,\n            'copy':False,\n            'cut':False,\n            'definitionlist':False,\n            'emotions':False,\n            'external':False,\n            'forecolor':False,\n            'fullscreen':False,\n            'hr':False,\n            'iespell':False,\n            'image':True,\n            'indent':False,\n            'insertdate':False,\n            'inserttime':False,\n            'italic':True,\n            'justifycenter':False,\n            'justifyfull':False,\n            'justifyleft':False,\n            'justifyright':False,\n            'link':True,\n            'media':False,\n            'nonbreaking':False,\n            'numlist':True,\n            'outdent':False,\n            'pagebreak':False,\n            'paste':False,\n            'pastetext':False,\n            'pasteword':False,\n            'preview':False,\n            'print':False,\n            'redo':False,\n            'removeformat':False,\n            'replace':False,\n            'save':False,\n            'search':False,\n            'strikethrough':False,\n            'style':True,\n            'sub':False,\n            'sup':False,\n            'tablecontrols':True,\n            'underline':False,\n            'undo':False,\n            'unlink':True,\n            'visualaid':False,\n            'visualchars':False,\n            'width':u'440'\n        },\n        'styles': [\n            'Subheading|h3',\n            '...|..'\n        ],\n        'tablestyles': [\n            'Subdued grid|plain',\n            '...|...'\n        ],\n        'linkable': [\n            'News Item',\n            '...'\n        ],\n        'containsanchors': [\n            'Document',\n            '...'\n        ],\n        'containsobjects': [\n            'Folder',\n            '...'\n        ],\n        'imageobjects': [\n            'Image',\n            '...'\n        ],\n    }\n    \"\"\"\n\n\n  def setupCTAvailability(portal, settings):\n    \"\"\" Use this method to allow/disable content types to be globally or locally addable.\n        All non listed content types will be automatically disabled.\n        Here is example settings object (NOTE: \"DISABLE\" key is used to disable\n        content types adding globally):\n\n        CONTENT_TYPES_AVAILABILITY = {\n            'DISABLE': [\n                'Event',\n                'Link'\n            ],\n            'Plone Site': [\n                'Folder',\n                'Document'\n            ]\n        }\n    \"\"\"\n\n\n  def setupHTMLFiltering(portal, settings):\n    \"\"\" Update html filtering configlet settings, by passing dict of settings as in the\n        following example for enabling embed html content in the richtext:\n\n        HTML_FILTER = {\n            'remove': {\n                'nasty': ['embed', 'object'],\n                'stripped': ['object', 'param'],\n                'custom': []\n            },\n            'add': {\n                'nasty': [],\n                'stripped': [],\n                'custom': ['embed']\n            }\n        }\n\n        NOTE: you can ommit empty lists\n    \"\"\"\n\n\n  def registerTransform(portal, name, module):\n    \"\"\"\n    Usage:\n\n    registerTransform(portal, 'web_intelligent_plain_text_to_html',\n        'Products.intelligenttext.transforms.web_intelligent_plain_text_to_html')\n\n    \"\"\"\n\n\n  def unregisterTransform(portal, name):\n    \"\"\"\n    Usage:\n\n    unregisterTransform(portal, 'web_intelligent_plain_text_to_html')\n\n    \"\"\"\n\n\n  def setHomePage(portal, view_name):\n    \"\"\" Set default view for the site root. \"\"\"\n\n\n  def setupNavigation(portal, settings):\n    \"\"\" Use this method to exclude/include content types from navigation  globally.\n        Here is example settings object:\n\n        NAVIGATION = {\n            'include': [\n                'Folder',\n                'CustomFolder'\n            ],\n            'exclude': [\n                'Link',\n                'Document',\n                'Event'\n            ]\n        }\n    \"\"\"\n\n\n  def hidePortletTypes(portal, portlets=[]):\n    \"\"\"\n        Hides portlets from the portlet management pages.\n        @param: portlets - list of portlet idenifiers used in portlets.xml to register them\n\n        example: portlets=['portlets.Calendar', 'portlets.Classic']\n    \"\"\"\n\n  def registerResourceBundle(portal, bundles={}):\n    \"\"\"\n        Register resource registry bundles for themes (skin layers).\n        @param: bundles - dict of skin layers with list of bundles\n\n        example: RESOURCE_BUNDLES = {\n            'MySkin': ['default', 'jquery', 'jquerytools'],\n            'OtherSkin': ['default']\n        }\n    \"\"\"\n\n\n  def unregisterResourceBundle(portal, layers=[]):\n    \"\"\"\n        Unregister custom resource registry bundles for themes (skin layers).\n        @param: layers - list of layers for which will be custom bundles unregistered so the skin layer will use only 'default' bundle.\n\n        example: BUNDLES_TO_REMOVE = ['MySkin', 'OtherSkin']\n    \"\"\"\n\n\nUtils:\n~~~~~~\n\n::\n\n  def makeFieldsInvisible(schema=None, fields=[]):\n    \"\"\" Makes schemata fields respective widgets invisible in the view page or edit form.\n\n        @schema: Archetypes schema object\n        @fields: list of field ids/names\n    \"\"\"\n\n  def changeFieldsSchemata(schema=None, fields=[]):\n    \"\"\" Moves fields into different schemata parts like categorisation or settings etc.\n        \"fields\" parameter is expected to be a list of dicts with key: (field) id and\n        (schemata id) schemata\n    \"\"\"\n\n\nContributors:\n~~~~~~~~~~~~~\n\n- `Matous Hora (mhora)`__\n\n.. _mhora: mailto:matous@fry-it.com\n\n__ mhora_\n\n- `Radim Novotny (naro)`__\n\n.. _naro: mailto:radim@fry-it.com\n\n__ naro_\n\n- `Lukas Zdych (lzdych)`__\n\n.. _lzdych: mailto:lukas@fry-it.com\n\n__ lzdych_\n\n\n\nChangelog\n=========\n\n0.6.3 (2013-03-12)\n~~~~~~~~~~~~~~~~~~\n\n- added class_blacklist and style_whitelist to setupHTMLFiltering [naro]\n\n0.6.2 (2012-09-23)\n~~~~~~~~~~~~~~~~~~~\n\n- setupStructure accepts base_path parameter which allows to set filesystem path for files and images [naro]\n\n\n0.6.1 (2012-01-10)\n~~~~~~~~~~~~~~~~~~~\n\n- fixed broken package in use with plone < 4.2.x by ImportError of IResourceRegistriesSettings [lzdych]\n\n\n0.6 (2012-01-09)\n~~~~~~~~~~~~~~~~~~~\n\n- added registerResourceBundle and unregisterResourceBundle [lzdych]\n\n\n0.5 (2012-01-09)\n~~~~~~~~~~~~~~~~~~~\n\n- added enableUserPwdChoice method [lzdych]\n\n- registerActions now accepts available_expr attribute for each action [lzdych]\n\n- fixed: setupCTAvailability method fails when trying to disable not installed content type [lzdych]\n\n\n0.4 (2011-10-13)\n~~~~~~~~~~~~~~~~~~~\n\n- added method for hiding portlets from the portlets management pages [lzdych]\n\n\n0.3 (2011-10-03)\n~~~~~~~~~~~~~~~~~~~\n\n- fixed: TinyMCE setuphandler clears \"Resource Types\" settings if ommited from helper method parameter [lzdych]\n\n\n0.2.1 (2011-08-18)\n~~~~~~~~~~~~~~~~~~~\n\n- added a lot of new helper methods and improved readme ;-)\n\n\n0.1 (2011-06-15)\n~~~~~~~~~~~~~~~~~~~\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.fry-it.com", "keywords": "Plone setup setuphandlers", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.setuphelpers", "package_url": "https://pypi.org/project/collective.setuphelpers/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.setuphelpers/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.fry-it.com"}, "release_url": "https://pypi.org/project/collective.setuphelpers/0.6.5/", "requires_dist": null, "requires_python": null, "summary": "Various simple functions to be used in Plone's setuphandlers", "version": "0.6.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"collective-setuphelpers\">\n<h2>collective.setuphelpers</h2>\n<p>This package provides a few simple functions with common tasks used with initial\nsite content setup.</p>\n<p>This does not aim to be as general as possible but it may speed things up.</p>\n<pre>&gt;&gt;&gt; from collective.setuphelpers.structure import setupStructure\n&gt;&gt;&gt; portal = layer['portal']\n&gt;&gt;&gt; STRUCTURE = [{'id':'example-id','title':'Example title','type':'Document'}]\n&gt;&gt;&gt; setupStructure(portal, STRUCTURE)\n&gt;&gt;&gt; portal['example-id']\n&lt;ATDocument at /plone/example-id&gt;\n&gt;&gt;&gt; portal.manage_delObjects(['example-id'])\n</pre>\n<p>You can use subfolders etc.</p>\n<pre>&gt;&gt;&gt; setupStructure(portal, layer['test_structure'])\n&gt;&gt;&gt; portal['testfolder']['item1'].getText()\n'&lt;p&gt;Text body&lt;/p&gt;'\n</pre>\n<div id=\"content-related-methods\">\n<h3>Content related methods:</h3>\n<pre>def clearUpSite(context, to_delete):\n  \"\"\" Remove content from the plone site root using given list of ids e.g.:\n      TO_DELETE = ['news', 'events']\n  \"\"\"\n\n\ndef setupStructure(portal, structure, default_language=LANGUAGE, base_path=''):\n  \"\"\" Setup initial content structure. e.g.:\n\n      STRUCTURE = [\n          {\n              'title' : 'About us',\n              'type' : 'Document',\n              'interfaces': (\n                  IMyCustomMarkerInterface,\n              )\n          },\n          {\n              'title' : 'Products',\n              'type' : 'Folder',\n              'layout': 'folder_listing',\n              'subfolder': [\n                  {\n                      'title': 'Cheap Products',\n                      'type': 'Folder',\n                      'allowed_types': ['Document'],\n                      'block-portlets': {'manager': 'plone.rightcolumn'},\n                      # pass either module or configuration dict to the 'portlets' key\n                      'portlets':\n                          [ plone.app.portlets.portlets.calendar,\n                            { 'module': plone.app.portlets.portlets.classic,\n                              'name': 'myportlet1',\n                              'manager': 'plone.rightcolumn',\n                              'params': dict(template='mytemplate', macro='portlet')\n                             }\n                          ],\n                      'subfolder': [\n                          {\n                              'title': 'Product 1',\n                              'type': 'Document',\n                              'layout': '@@product-page'\n                          },\n                          {\n                              'title': 'Recommended',\n                              'type': 'Collection',\n                          },\n                          {\n                               'title': u'Picture',\n                               'id': u'image1.jpg',\n                               'type':'Image',\n                               'file': 'data/image1.jpg',\n                          },\n                      ]\n                  }\n              ]\n          }\n      ]\n\n      base_path parameter can specify absolute path for Files and Images. For example\n      you can use context._profile_path, where context is GenericSetup context. It allows\n      you to put files and images to profiles/default/data/image1.jpg.\n  \"\"\"\n</pre>\n</div>\n<div id=\"users-and-groups-related-methods\">\n<h3>Users and groups related methods:</h3>\n<pre>def createGroups(portal, groups):\n  \"\"\" Create user groups by passing list of tuples containing group ids and titles:\n\n      @example groups list:\n\n      GROUPS = [\n        ('customers', 'Customers'),\n        ('staff', 'Staff')\n      ]\n\n      from tools.sitesetup import createGroups\n      createGroups(portal, GROUPS)\n\n  \"\"\"\n\nenableSelfRegistration(portal):\n  \"\"\" Enable anonymous users to register their user account. \"\"\"\n\ndef enableUserPwdChoice(portal):\n  \"\"\" Enable user password choice during user registration. \"\"\"\n</pre>\n</div>\n<div id=\"various-methods\">\n<h3>Various methods:</h3>\n<pre>def registerDisplayViews(portal, views):\n  \"\"\" Register additional display views for content types based on \"views\"\n      dictionary containing list of additional view ids for each content type.\n\n      @example views dictionary:\n\n      DISPLAY_VIEWS = {\n          'Folder': [\n              'short-listing',\n              'extended-listing'\n          ],\n\n          'Document': [\n              'article-view',\n              'fancy-document-view'\n          ]\n      }\n\n      @call from setup handler:\n\n      from tools.sitesetup import registerDisplayViews\n      registerDisplayViews(portal, DISPLAY_VIEWS)\n\n  \"\"\"\n\n\ndef unregisterDisplayViews(portal, views):\n  \"\"\" Unregister additional display views for content types based on \"views\"\n      dictionary containing list of additional view ids for each content type\n      (the same as for registerDisplayViews method).\n  \"\"\"\n\n\ndef setupCatalog(portal, indexes={}, metadata=[]):\n  \"\"\" Register portal catalog indexes and metadata columns. \"\"\"\n\n\ndef hideActions(portal, actions):\n  \"\"\" Hide actions given dict of action categories with values as list of action ids\n      example actions:\n      HIDE_ACTIONS = {'user':['dashboard'], 'object':['contentrules', 'local_roles']}\n  \"\"\"\n\n\ndef registerActions(portal, actions={}):\n  \"\"\" Register new portal actions using dict of action attributes like in the following\n      example:\n      CUSTOM_ACTIONS = {\n          '1': { # order in which will be action registered\n              'id': 'my-action',\n              'category': 'site_actions',\n              'title': 'My action',\n              'i18n_domain': 'myi18n.domain',\n              'url_expr': string:${globals_view/navigationRootUrl}/my-action-view',\n              'available_expr': 'python:member is not None'\n              'permissions': ('View',),\n              'visible': True\n          }\n      }\n  \"\"\"\n\n\ndef setupTinyMCE(portal, settings):\n  \"\"\" Configures tinymce wysiwyg editor. Here is an example settings object:\n  EDITOR_SETTINGS = {\n      'attributes': {\n          'contextmenu': False,\n          'link_using_uids': True,\n          'allow_captioned_images': True,\n          '...': True\n      },\n      'commands': {\n          'install_transforms': True\n      },\n      'toolbar': {\n          'advhr':False,\n          'anchor':False,\n          'attribs':False,\n          'backcolor':False,\n          'bold':True,\n          'bullist':True,\n          'charmap':False,\n          'cleanup':False,\n          'code':True,\n          'copy':False,\n          'cut':False,\n          'definitionlist':False,\n          'emotions':False,\n          'external':False,\n          'forecolor':False,\n          'fullscreen':False,\n          'hr':False,\n          'iespell':False,\n          'image':True,\n          'indent':False,\n          'insertdate':False,\n          'inserttime':False,\n          'italic':True,\n          'justifycenter':False,\n          'justifyfull':False,\n          'justifyleft':False,\n          'justifyright':False,\n          'link':True,\n          'media':False,\n          'nonbreaking':False,\n          'numlist':True,\n          'outdent':False,\n          'pagebreak':False,\n          'paste':False,\n          'pastetext':False,\n          'pasteword':False,\n          'preview':False,\n          'print':False,\n          'redo':False,\n          'removeformat':False,\n          'replace':False,\n          'save':False,\n          'search':False,\n          'strikethrough':False,\n          'style':True,\n          'sub':False,\n          'sup':False,\n          'tablecontrols':True,\n          'underline':False,\n          'undo':False,\n          'unlink':True,\n          'visualaid':False,\n          'visualchars':False,\n          'width':u'440'\n      },\n      'styles': [\n          'Subheading|h3',\n          '...|..'\n      ],\n      'tablestyles': [\n          'Subdued grid|plain',\n          '...|...'\n      ],\n      'linkable': [\n          'News Item',\n          '...'\n      ],\n      'containsanchors': [\n          'Document',\n          '...'\n      ],\n      'containsobjects': [\n          'Folder',\n          '...'\n      ],\n      'imageobjects': [\n          'Image',\n          '...'\n      ],\n  }\n  \"\"\"\n\n\ndef setupCTAvailability(portal, settings):\n  \"\"\" Use this method to allow/disable content types to be globally or locally addable.\n      All non listed content types will be automatically disabled.\n      Here is example settings object (NOTE: \"DISABLE\" key is used to disable\n      content types adding globally):\n\n      CONTENT_TYPES_AVAILABILITY = {\n          'DISABLE': [\n              'Event',\n              'Link'\n          ],\n          'Plone Site': [\n              'Folder',\n              'Document'\n          ]\n      }\n  \"\"\"\n\n\ndef setupHTMLFiltering(portal, settings):\n  \"\"\" Update html filtering configlet settings, by passing dict of settings as in the\n      following example for enabling embed html content in the richtext:\n\n      HTML_FILTER = {\n          'remove': {\n              'nasty': ['embed', 'object'],\n              'stripped': ['object', 'param'],\n              'custom': []\n          },\n          'add': {\n              'nasty': [],\n              'stripped': [],\n              'custom': ['embed']\n          }\n      }\n\n      NOTE: you can ommit empty lists\n  \"\"\"\n\n\ndef registerTransform(portal, name, module):\n  \"\"\"\n  Usage:\n\n  registerTransform(portal, 'web_intelligent_plain_text_to_html',\n      'Products.intelligenttext.transforms.web_intelligent_plain_text_to_html')\n\n  \"\"\"\n\n\ndef unregisterTransform(portal, name):\n  \"\"\"\n  Usage:\n\n  unregisterTransform(portal, 'web_intelligent_plain_text_to_html')\n\n  \"\"\"\n\n\ndef setHomePage(portal, view_name):\n  \"\"\" Set default view for the site root. \"\"\"\n\n\ndef setupNavigation(portal, settings):\n  \"\"\" Use this method to exclude/include content types from navigation  globally.\n      Here is example settings object:\n\n      NAVIGATION = {\n          'include': [\n              'Folder',\n              'CustomFolder'\n          ],\n          'exclude': [\n              'Link',\n              'Document',\n              'Event'\n          ]\n      }\n  \"\"\"\n\n\ndef hidePortletTypes(portal, portlets=[]):\n  \"\"\"\n      Hides portlets from the portlet management pages.\n      @param: portlets - list of portlet idenifiers used in portlets.xml to register them\n\n      example: portlets=['portlets.Calendar', 'portlets.Classic']\n  \"\"\"\n\ndef registerResourceBundle(portal, bundles={}):\n  \"\"\"\n      Register resource registry bundles for themes (skin layers).\n      @param: bundles - dict of skin layers with list of bundles\n\n      example: RESOURCE_BUNDLES = {\n          'MySkin': ['default', 'jquery', 'jquerytools'],\n          'OtherSkin': ['default']\n      }\n  \"\"\"\n\n\ndef unregisterResourceBundle(portal, layers=[]):\n  \"\"\"\n      Unregister custom resource registry bundles for themes (skin layers).\n      @param: layers - list of layers for which will be custom bundles unregistered so the skin layer will use only 'default' bundle.\n\n      example: BUNDLES_TO_REMOVE = ['MySkin', 'OtherSkin']\n  \"\"\"\n</pre>\n</div>\n<div id=\"utils\">\n<h3>Utils:</h3>\n<pre>def makeFieldsInvisible(schema=None, fields=[]):\n  \"\"\" Makes schemata fields respective widgets invisible in the view page or edit form.\n\n      @schema: Archetypes schema object\n      @fields: list of field ids/names\n  \"\"\"\n\ndef changeFieldsSchemata(schema=None, fields=[]):\n  \"\"\" Moves fields into different schemata parts like categorisation or settings etc.\n      \"fields\" parameter is expected to be a list of dicts with key: (field) id and\n      (schemata id) schemata\n  \"\"\"\n</pre>\n</div>\n<div id=\"contributors\">\n<h3>Contributors:</h3>\n<ul>\n<li><a href=\"mailto:matous%40fry-it.com\">Matous Hora (mhora)</a></li>\n</ul>\n<ul>\n<li><a href=\"mailto:radim%40fry-it.com\">Radim Novotny (naro)</a></li>\n</ul>\n<ul>\n<li><a href=\"mailto:lukas%40fry-it.com\">Lukas Zdych (lzdych)</a></li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id4\">\n<h3>0.6.3 (2013-03-12)</h3>\n<ul>\n<li>added class_blacklist and style_whitelist to setupHTMLFiltering [naro]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.6.2 (2012-09-23)</h3>\n<ul>\n<li>setupStructure accepts base_path parameter which allows to set filesystem path for files and images [naro]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.6.1 (2012-01-10)</h3>\n<ul>\n<li>fixed broken package in use with plone &lt; 4.2.x by ImportError of IResourceRegistriesSettings [lzdych]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.6 (2012-01-09)</h3>\n<ul>\n<li>added registerResourceBundle and unregisterResourceBundle [lzdych]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.5 (2012-01-09)</h3>\n<ul>\n<li>added enableUserPwdChoice method [lzdych]</li>\n<li>registerActions now accepts available_expr attribute for each action [lzdych]</li>\n<li>fixed: setupCTAvailability method fails when trying to disable not installed content type [lzdych]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.4 (2011-10-13)</h3>\n<ul>\n<li>added method for hiding portlets from the portlets management pages [lzdych]</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.3 (2011-10-03)</h3>\n<ul>\n<li>fixed: TinyMCE setuphandler clears \u201cResource Types\u201d settings if ommited from helper method parameter [lzdych]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.2.1 (2011-08-18)</h3>\n<ul>\n<li>added a lot of new helper methods and improved readme ;-)</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.1 (2011-06-15)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1174610, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7b4ac61bc2e2aaa3f10a9800b476e682", "sha256": "427a063200bb8ef42a780043c4c27c6ebdd393c8d6c397cc48eb6745d9d7b14d"}, "downloads": -1, "filename": "collective.setuphelpers-0.1.zip", "has_sig": false, "md5_digest": "7b4ac61bc2e2aaa3f10a9800b476e682", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21476, "upload_time": "2011-06-15T17:31:53", "upload_time_iso_8601": "2011-06-15T17:31:53.846537Z", "url": "https://files.pythonhosted.org/packages/f6/51/ca37c3d87536e6abdbd73ff047b8164a13df4867b3b1b870115fa883e023/collective.setuphelpers-0.1.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "89393d2e3604096f89debd1aa7fcdede", "sha256": "1da8491ae342633eb5f50e9c57a850a0b80f6e91267b936645d7c1d2cd5924e3"}, "downloads": -1, "filename": "collective.setuphelpers-0.2.1.zip", "has_sig": false, "md5_digest": "89393d2e3604096f89debd1aa7fcdede", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30766, "upload_time": "2011-08-18T16:57:16", "upload_time_iso_8601": "2011-08-18T16:57:16.213707Z", "url": "https://files.pythonhosted.org/packages/b9/67/e3b0880252a889646dc250613f01f52fcf7461c7b03257274fc237604cad/collective.setuphelpers-0.2.1.zip", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0588f619a75875eb1c3e63cdc77f7abc", "sha256": "e68886556207355369f5fab2e6d134b0afaeaf51084a9bfabbf25241fd6b1f73"}, "downloads": -1, "filename": "collective.setuphelpers-0.3.zip", "has_sig": false, "md5_digest": "0588f619a75875eb1c3e63cdc77f7abc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30914, "upload_time": "2011-10-03T19:57:46", "upload_time_iso_8601": "2011-10-03T19:57:46.342330Z", "url": "https://files.pythonhosted.org/packages/59/8a/dbb696cb34d23ea1c92c92c20b4818f31dc4f126d2be3710ed9796bf67c9/collective.setuphelpers-0.3.zip", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "71d73c33e3423925f9fc808ffa7178c2", "sha256": "bcd3586a209e248826fec92cc77c8ac8cc0db3cf9a98ab6400f5a7a57fd05acd"}, "downloads": -1, "filename": "collective.setuphelpers-0.4.zip", "has_sig": false, "md5_digest": "71d73c33e3423925f9fc808ffa7178c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32242, "upload_time": "2011-10-13T10:01:52", "upload_time_iso_8601": "2011-10-13T10:01:52.953781Z", "url": "https://files.pythonhosted.org/packages/75/45/d0213c30e6249cbf287ab7c19810fa22413277c66eedc0e160fe2615ba23/collective.setuphelpers-0.4.zip", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "b2349f8f652fcb8334a3c54df87c6b6e", "sha256": "2104e4ba5a4234a1cfed45d0e6c8eb879009e54031db9ac28555547e0d06465f"}, "downloads": -1, "filename": "collective.setuphelpers-0.5.zip", "has_sig": false, "md5_digest": "b2349f8f652fcb8334a3c54df87c6b6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33952, "upload_time": "2012-01-09T11:05:19", "upload_time_iso_8601": "2012-01-09T11:05:19.453495Z", "url": "https://files.pythonhosted.org/packages/f7/05/488a184124baab2c656f7007be899c52110697a60484cfd4ec6caa632b2e/collective.setuphelpers-0.5.zip", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "a5d4643d478224fb54353434fcdb668f", "sha256": "33c9b114b595c2c2bc050d9acb630c640ff21dd02a130b639fd3538afcd603bf"}, "downloads": -1, "filename": "collective.setuphelpers-0.6.zip", "has_sig": false, "md5_digest": "a5d4643d478224fb54353434fcdb668f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34996, "upload_time": "2012-01-09T15:07:15", "upload_time_iso_8601": "2012-01-09T15:07:15.027868Z", "url": "https://files.pythonhosted.org/packages/1d/f8/31841649d379131b30f5fb7748b98b865cfe3ce57ff8f8d928d1a680c138/collective.setuphelpers-0.6.zip", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "95913a0381087e6134b123e7eaad5ccc", "sha256": "a80876c40a2294d457575cdaaf701b726159ef5bee6069ebb0e8f8e444b21b5f"}, "downloads": -1, "filename": "collective.setuphelpers-0.6.1.zip", "has_sig": false, "md5_digest": "95913a0381087e6134b123e7eaad5ccc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35333, "upload_time": "2012-01-10T10:37:24", "upload_time_iso_8601": "2012-01-10T10:37:24.022760Z", "url": "https://files.pythonhosted.org/packages/7d/83/732e208eb18b0c70283b78f428b0c28197c6b2859174bedb47919b0194c5/collective.setuphelpers-0.6.1.zip", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "296dc59c52478f628c22561e341f27b4", "sha256": "abc33548d87002dce24abb215536e1d8587b2cb6167647f05ccb993d9b56bcbe"}, "downloads": -1, "filename": "collective.setuphelpers-0.6.2.zip", "has_sig": false, "md5_digest": "296dc59c52478f628c22561e341f27b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35977, "upload_time": "2012-09-23T15:49:32", "upload_time_iso_8601": "2012-09-23T15:49:32.600045Z", "url": "https://files.pythonhosted.org/packages/ca/4a/121d7256b6f2158e975681b970baff604abfa3e8b3d48ea4d61b915a1708/collective.setuphelpers-0.6.2.zip", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "3e4d52356fdd11dd00b7573b689c0a50", "sha256": "eec4cad4a239ce564059be178aea19a06dbc9551cec30e12fdb081c2df70c0de"}, "downloads": -1, "filename": "collective.setuphelpers-0.6.3.zip", "has_sig": false, "md5_digest": "3e4d52356fdd11dd00b7573b689c0a50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36261, "upload_time": "2013-03-12T13:17:32", "upload_time_iso_8601": "2013-03-12T13:17:32.465619Z", "url": "https://files.pythonhosted.org/packages/21/65/f59e4518001bab2d9711d461dd2903f085617ec08110fdbf7b0a2739a677/collective.setuphelpers-0.6.3.zip", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "acbef1c4aea368f559191941b50ec32b", "sha256": "78070b4bd3cadbfe733e6a4b39978082e41563b8ccf257dd0daf94aa830ff506"}, "downloads": -1, "filename": "collective.setuphelpers-0.6.5.zip", "has_sig": false, "md5_digest": "acbef1c4aea368f559191941b50ec32b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36302, "upload_time": "2014-07-30T18:25:18", "upload_time_iso_8601": "2014-07-30T18:25:18.185089Z", "url": "https://files.pythonhosted.org/packages/6d/5f/5117afe7e296e911cb4f6c51520e0ba5bc0fe8257f9ea91aafba0b56e864/collective.setuphelpers-0.6.5.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "acbef1c4aea368f559191941b50ec32b", "sha256": "78070b4bd3cadbfe733e6a4b39978082e41563b8ccf257dd0daf94aa830ff506"}, "downloads": -1, "filename": "collective.setuphelpers-0.6.5.zip", "has_sig": false, "md5_digest": "acbef1c4aea368f559191941b50ec32b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36302, "upload_time": "2014-07-30T18:25:18", "upload_time_iso_8601": "2014-07-30T18:25:18.185089Z", "url": "https://files.pythonhosted.org/packages/6d/5f/5117afe7e296e911cb4f6c51520e0ba5bc0fe8257f9ea91aafba0b56e864/collective.setuphelpers-0.6.5.zip", "yanked": false}], "timestamp": "Fri May  8 00:44:50 2020"}