{"info": {"author": "stanwood GmbH", "author_email": "piotr.rogulski@stanwood.de,developer@stanwood.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2"], "description": "# alexa-skill\n\n[alexa-skill](https://github.com/stanwood/) is flexible, easy to use and extend package for creating Alexa skill applications.\n\nThis package is based on [alexa documentation](https://developer.amazon.com/docs/custom-skills/request-and-response-json-reference.html).\n\n\n## Installing\n\nInstall and update using pip:\n\n```bash\npip install -U alexa-skill\n```\n\n## Examples\n\nDefine intent class\n\n```python\nfrom alexa_skill.intents import BaseIntents\n\n\nclass ExampleIntents(BaseIntents):\n    @property\n    def mapper(self):\n        return {\n            'EXAMPLE.hello': self.hello,\n        }\n\n    def hello(self):\n        return self.response('Hello. Nice to meet you.'), True\n```\n\nDefine intent class with slots\n\n```python\nfrom alexa_skill import dates\nfrom alexa_skill.intents import BaseIntents\n\n\nclass DateIntents(BaseIntents):\n    @property\n    def mapper(self):\n        return {\n            'EXAMPLE.date_intent': self.date_intent,\n        }\n\n    def date_intent(self, slots):\n\n        date, date_type = dates.AmazonDateParser.to_date(slots['dateslot']['value'])\n\n        text = \"Your date is <say-as interpret-as='date'>{}</say-as> and it is a {}\".format(\n            date.strftime('%Y%m%d'),\n            date_type\n        )\n\n        return self.response(text), True\n\n```\n\nDefine buildin intents\n\n```python\nfrom alexa_skill.intents import BuildInIntents\n\n\nbuildin_intents = BuildInIntents(\n    help_message='Say \"HI\" to us',\n    not_handled_message=\"Sorry, I don't understand you. Could you repeat?\",\n    stop_message='stop',\n    cancel_message='cancel'\n)\n```\n\n### [Falcon](examples/falcon_app/main.py)\n\nInitiate intents in fulfiller webhook for Alexa\n\n```python\nimport logging\n\nimport alexa_skill\nimport falcon\n\n\nclass Fulfiller(object):\n\n    def on_post(self, req, resp):\n        get_response = alexa_skill.Processor(\n            req.media,\n            buildin_intents,\n            'Welcome to Alexa skill bot',\n            'Good bye',\n            ExampleIntents(),  # Insert created Intents as arguments\n            DateIntents(),\n        )\n        json_response, handled = get_response()\n\n        logging.info('Response was handled by system: {}'.format(handled))\n\n        resp.media = json_response\n\napp = falcon.API(media_type=falcon.MEDIA_JSON)\napp.add_route('/v1/alexa/fulfiller', Fulfiller())\n```\n\n### [Flask](examples/flask_app/main.py)\n\n```python\nimport logging\n\nimport alexa_skill\nfrom flask import Flask, request, jsonify\n\n\napp = Flask(__name__)\n\n\n@app.route(\"/v1/alexa/fulfiller\", methods=['POST'])\ndef fulfiller():\n    get_response = alexa_skill.Processor(\n        request.json,\n        buildin_intents,\n        'Welcome to Alexa skill bot',\n        'Good bye',\n        ExampleIntents(),\n        DateIntents(),\n    )\n    json_response, handled = get_response()\n\n    logging.info('Response was handled by system: {}'.format(handled))\n\n    return jsonify(json_response)\n```\n\n## Documentation\n\nAuto generate documentation\n\n```bash\n\ncd docs/\n\nsphinx-apidoc -o ./source/_modules/ ../alexa_skill/\n\nmake html\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stanwood/alexa-skill", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "alexa-skill", "package_url": "https://pypi.org/project/alexa-skill/", "platform": "", "project_url": "https://pypi.org/project/alexa-skill/", "project_urls": {"Homepage": "https://github.com/stanwood/alexa-skill"}, "release_url": "https://pypi.org/project/alexa-skill/0.1.0/", "requires_dist": ["python-dateutil (==2.7.3)", "pytest; extra == 'dev'", "coverage; extra == 'dev'", "tox; extra == 'dev'", "sphinx; extra == 'dev'", "sphinx-rtd-theme; extra == 'dev'", "sphinx; extra == 'docs'", "sphinx-autobuild; extra == 'docs'", "sphinx-rtd-theme; extra == 'docs'"], "requires_python": "", "summary": "A flexible and easy-to-use package for building Alexa skill applications.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>alexa-skill</h1>\n<p><a href=\"https://github.com/stanwood/\" rel=\"nofollow\">alexa-skill</a> is flexible, easy to use and extend package for creating Alexa skill applications.</p>\n<p>This package is based on <a href=\"https://developer.amazon.com/docs/custom-skills/request-and-response-json-reference.html\" rel=\"nofollow\">alexa documentation</a>.</p>\n<h2>Installing</h2>\n<p>Install and update using pip:</p>\n<pre>pip install -U alexa-skill\n</pre>\n<h2>Examples</h2>\n<p>Define intent class</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">alexa_skill.intents</span> <span class=\"kn\">import</span> <span class=\"n\">BaseIntents</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleIntents</span><span class=\"p\">(</span><span class=\"n\">BaseIntents</span><span class=\"p\">):</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'EXAMPLE.hello'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hello</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">(</span><span class=\"s1\">'Hello. Nice to meet you.'</span><span class=\"p\">),</span> <span class=\"kc\">True</span>\n</pre>\n<p>Define intent class with slots</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">alexa_skill</span> <span class=\"kn\">import</span> <span class=\"n\">dates</span>\n<span class=\"kn\">from</span> <span class=\"nn\">alexa_skill.intents</span> <span class=\"kn\">import</span> <span class=\"n\">BaseIntents</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DateIntents</span><span class=\"p\">(</span><span class=\"n\">BaseIntents</span><span class=\"p\">):</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'EXAMPLE.date_intent'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">date_intent</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">date_intent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">slots</span><span class=\"p\">):</span>\n\n        <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">date_type</span> <span class=\"o\">=</span> <span class=\"n\">dates</span><span class=\"o\">.</span><span class=\"n\">AmazonDateParser</span><span class=\"o\">.</span><span class=\"n\">to_date</span><span class=\"p\">(</span><span class=\"n\">slots</span><span class=\"p\">[</span><span class=\"s1\">'dateslot'</span><span class=\"p\">][</span><span class=\"s1\">'value'</span><span class=\"p\">])</span>\n\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Your date is &lt;say-as interpret-as='date'&gt;</span><span class=\"si\">{}</span><span class=\"s2\">&lt;/say-as&gt; and it is a </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%Y%m</span><span class=\"si\">%d</span><span class=\"s1\">'</span><span class=\"p\">),</span>\n            <span class=\"n\">date_type</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">),</span> <span class=\"kc\">True</span>\n</pre>\n<p>Define buildin intents</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">alexa_skill.intents</span> <span class=\"kn\">import</span> <span class=\"n\">BuildInIntents</span>\n\n\n<span class=\"n\">buildin_intents</span> <span class=\"o\">=</span> <span class=\"n\">BuildInIntents</span><span class=\"p\">(</span>\n    <span class=\"n\">help_message</span><span class=\"o\">=</span><span class=\"s1\">'Say \"HI\" to us'</span><span class=\"p\">,</span>\n    <span class=\"n\">not_handled_message</span><span class=\"o\">=</span><span class=\"s2\">\"Sorry, I don't understand you. Could you repeat?\"</span><span class=\"p\">,</span>\n    <span class=\"n\">stop_message</span><span class=\"o\">=</span><span class=\"s1\">'stop'</span><span class=\"p\">,</span>\n    <span class=\"n\">cancel_message</span><span class=\"o\">=</span><span class=\"s1\">'cancel'</span>\n<span class=\"p\">)</span>\n</pre>\n<h3><a href=\"examples/falcon_app/main.py\" rel=\"nofollow\">Falcon</a></h3>\n<p>Initiate intents in fulfiller webhook for Alexa</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">alexa_skill</span>\n<span class=\"kn\">import</span> <span class=\"nn\">falcon</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Fulfiller</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n        <span class=\"n\">get_response</span> <span class=\"o\">=</span> <span class=\"n\">alexa_skill</span><span class=\"o\">.</span><span class=\"n\">Processor</span><span class=\"p\">(</span>\n            <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">media</span><span class=\"p\">,</span>\n            <span class=\"n\">buildin_intents</span><span class=\"p\">,</span>\n            <span class=\"s1\">'Welcome to Alexa skill bot'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'Good bye'</span><span class=\"p\">,</span>\n            <span class=\"n\">ExampleIntents</span><span class=\"p\">(),</span>  <span class=\"c1\"># Insert created Intents as arguments</span>\n            <span class=\"n\">DateIntents</span><span class=\"p\">(),</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">json_response</span><span class=\"p\">,</span> <span class=\"n\">handled</span> <span class=\"o\">=</span> <span class=\"n\">get_response</span><span class=\"p\">()</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Response was handled by system: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">handled</span><span class=\"p\">))</span>\n\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">media</span> <span class=\"o\">=</span> <span class=\"n\">json_response</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">falcon</span><span class=\"o\">.</span><span class=\"n\">API</span><span class=\"p\">(</span><span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"n\">falcon</span><span class=\"o\">.</span><span class=\"n\">MEDIA_JSON</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s1\">'/v1/alexa/fulfiller'</span><span class=\"p\">,</span> <span class=\"n\">Fulfiller</span><span class=\"p\">())</span>\n</pre>\n<h3><a href=\"examples/flask_app/main.py\" rel=\"nofollow\">Flask</a></h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">alexa_skill</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/v1/alexa/fulfiller\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">fulfiller</span><span class=\"p\">():</span>\n    <span class=\"n\">get_response</span> <span class=\"o\">=</span> <span class=\"n\">alexa_skill</span><span class=\"o\">.</span><span class=\"n\">Processor</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">,</span>\n        <span class=\"n\">buildin_intents</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Welcome to Alexa skill bot'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Good bye'</span><span class=\"p\">,</span>\n        <span class=\"n\">ExampleIntents</span><span class=\"p\">(),</span>\n        <span class=\"n\">DateIntents</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">json_response</span><span class=\"p\">,</span> <span class=\"n\">handled</span> <span class=\"o\">=</span> <span class=\"n\">get_response</span><span class=\"p\">()</span>\n\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Response was handled by system: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">handled</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">json_response</span><span class=\"p\">)</span>\n</pre>\n<h2>Documentation</h2>\n<p>Auto generate documentation</p>\n<pre><span class=\"nb\">cd</span> docs/\n\nsphinx-apidoc -o ./source/_modules/ ../alexa_skill/\n\nmake html\n</pre>\n\n          </div>"}, "last_serial": 4319007, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "da89e7db1ee78ea52c57d8eeabee9300", "sha256": "a2df6d6cfd2e6ff7e56c0f25767a3a4d97d5870fdea205c18fa20a0535d77a7c"}, "downloads": -1, "filename": "alexa_skill-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "da89e7db1ee78ea52c57d8eeabee9300", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 24662, "upload_time": "2018-09-28T07:51:07", "upload_time_iso_8601": "2018-09-28T07:51:07.175903Z", "url": "https://files.pythonhosted.org/packages/41/46/8daf5bfeafbb42204ba431227bf3b079dcaeb31bbf646b91ca2da62cf146/alexa_skill-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edcfe42ee266affab7a0e7378f794764", "sha256": "f33abd37cab34ee55e1d8552110dba8d22af54aaa877d93cf36524bfd3b2a80c"}, "downloads": -1, "filename": "alexa_skill-0.1.0.tar.gz", "has_sig": false, "md5_digest": "edcfe42ee266affab7a0e7378f794764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10286, "upload_time": "2018-09-28T07:51:08", "upload_time_iso_8601": "2018-09-28T07:51:08.564832Z", "url": "https://files.pythonhosted.org/packages/86/fd/dd847cac7f3b07e2ee378d6ac4ed29e8b88dc66ab434902f91ede2eb1929/alexa_skill-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da89e7db1ee78ea52c57d8eeabee9300", "sha256": "a2df6d6cfd2e6ff7e56c0f25767a3a4d97d5870fdea205c18fa20a0535d77a7c"}, "downloads": -1, "filename": "alexa_skill-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "da89e7db1ee78ea52c57d8eeabee9300", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 24662, "upload_time": "2018-09-28T07:51:07", "upload_time_iso_8601": "2018-09-28T07:51:07.175903Z", "url": "https://files.pythonhosted.org/packages/41/46/8daf5bfeafbb42204ba431227bf3b079dcaeb31bbf646b91ca2da62cf146/alexa_skill-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edcfe42ee266affab7a0e7378f794764", "sha256": "f33abd37cab34ee55e1d8552110dba8d22af54aaa877d93cf36524bfd3b2a80c"}, "downloads": -1, "filename": "alexa_skill-0.1.0.tar.gz", "has_sig": false, "md5_digest": "edcfe42ee266affab7a0e7378f794764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10286, "upload_time": "2018-09-28T07:51:08", "upload_time_iso_8601": "2018-09-28T07:51:08.564832Z", "url": "https://files.pythonhosted.org/packages/86/fd/dd847cac7f3b07e2ee378d6ac4ed29e8b88dc66ab434902f91ede2eb1929/alexa_skill-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:55 2020"}