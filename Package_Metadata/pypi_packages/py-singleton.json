{"info": {"author": "randydu", "author_email": "randydu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# py-singleton\n\nSingleton pattern for python 2 & 3.\n\n\n## Install\n\n```sh\npip install py-singleton\n```\n\n## Test\n\nin the root folder, run pytest:\n\n```bash\npytest\n```\n\n## Dependencies\n\nNone\n\nunit test needs __pytest__.\n\n## API\n\n- Apply class decorator _singleton_ to any class;\n- Expected behaviors:\n  - class can be instantiated as usual, but only one instance is created;\n  - apis to access the class instance:\n\n    ```python\n    @singleton\n    class Server(object):pass\n\n    srv = Server()\n    ```\n\n    or\n\n    ```python\n    srv = Server.instace()\n    ```\n\n  - the function \\__init\\__() of decorated class will be called once and only once when the instance is created.\n\n## Example\n\n```python\n\nfrom py_singleton import singleton\n\n    @singleton\n    class A(object):\n        count = 0\n        def __init__(self):\n            A.count += 1\n\n    a1 = A()\n    a2 = A()\n    a3 = A.instance()\n\n    assert A.count == 1\n    assert id(a1) == id(a2)\n    assert id(a1) == id(a3)\n```\n\n## Limitation\n\nFor best performance, the code to create instance is not thread-safe, however, after the instance is created it should\nbe safe for multi-threading.\n\nIt is recommended to call __instance()__ once during the initial phrase of your app in a single thread.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/randydu/py-singleton/archive/v0.9.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/randydu/py-singleton.git", "keywords": "singleton", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-singleton", "package_url": "https://pypi.org/project/py-singleton/", "platform": "", "project_url": "https://pypi.org/project/py-singleton/", "project_urls": {"Download": "https://github.com/randydu/py-singleton/archive/v0.9.3.tar.gz", "Homepage": "https://github.com/randydu/py-singleton.git"}, "release_url": "https://pypi.org/project/py-singleton/0.9.3/", "requires_dist": null, "requires_python": "", "summary": "singleton pattern for python 2 and 3", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-singleton</h1>\n<p>Singleton pattern for python 2 &amp; 3.</p>\n<h2>Install</h2>\n<pre>pip install py-singleton\n</pre>\n<h2>Test</h2>\n<p>in the root folder, run pytest:</p>\n<pre>pytest\n</pre>\n<h2>Dependencies</h2>\n<p>None</p>\n<p>unit test needs <strong>pytest</strong>.</p>\n<h2>API</h2>\n<ul>\n<li>Apply class decorator <em>singleton</em> to any class;</li>\n<li>Expected behaviors:\n<ul>\n<li>\n<p>class can be instantiated as usual, but only one instance is created;</p>\n</li>\n<li>\n<p>apis to access the class instance:</p>\n<pre><span class=\"nd\">@singleton</span>\n<span class=\"k\">class</span> <span class=\"nc\">Server</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span><span class=\"k\">pass</span>\n\n<span class=\"n\">srv</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span>\n</pre>\n<p>or</p>\n<pre><span class=\"n\">srv</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"o\">.</span><span class=\"n\">instace</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p>the function _<em>init_</em>() of decorated class will be called once and only once when the instance is created.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_singleton</span> <span class=\"kn\">import</span> <span class=\"n\">singleton</span>\n\n    <span class=\"nd\">@singleton</span>\n    <span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">a1</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">()</span>\n    <span class=\"n\">a2</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">()</span>\n    <span class=\"n\">a3</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a3</span><span class=\"p\">)</span>\n</pre>\n<h2>Limitation</h2>\n<p>For best performance, the code to create instance is not thread-safe, however, after the instance is created it should\nbe safe for multi-threading.</p>\n<p>It is recommended to call <strong>instance()</strong> once during the initial phrase of your app in a single thread.</p>\n\n          </div>"}, "last_serial": 7153406, "releases": {"0.9.2": [{"comment_text": "", "digests": {"md5": "c20a335a617318ea4e8fe686e119bc4b", "sha256": "0aec2d53ffc06c942f988572cfd92d7d1a343ba7823b445bef334cc57e41a24b"}, "downloads": -1, "filename": "py-singleton-0.9.2.tar.gz", "has_sig": false, "md5_digest": "c20a335a617318ea4e8fe686e119bc4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2716, "upload_time": "2020-05-01T06:00:11", "upload_time_iso_8601": "2020-05-01T06:00:11.503186Z", "url": "https://files.pythonhosted.org/packages/b1/9b/0de7615716d471e6930fe893cb72acc48345d666f379d24700570914f9d9/py-singleton-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "ba54220e2a22de1bb2250a27495fe294", "sha256": "2543c3d781c3aecac98de9307adbe575b420963aa9fea12624d319dfb31114a0"}, "downloads": -1, "filename": "py-singleton-0.9.3.tar.gz", "has_sig": false, "md5_digest": "ba54220e2a22de1bb2250a27495fe294", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3028, "upload_time": "2020-05-02T20:34:58", "upload_time_iso_8601": "2020-05-02T20:34:58.608442Z", "url": "https://files.pythonhosted.org/packages/ba/64/fc70c0589a38184099907dc498990389a13a61d37de7e77052865aef9ba7/py-singleton-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba54220e2a22de1bb2250a27495fe294", "sha256": "2543c3d781c3aecac98de9307adbe575b420963aa9fea12624d319dfb31114a0"}, "downloads": -1, "filename": "py-singleton-0.9.3.tar.gz", "has_sig": false, "md5_digest": "ba54220e2a22de1bb2250a27495fe294", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3028, "upload_time": "2020-05-02T20:34:58", "upload_time_iso_8601": "2020-05-02T20:34:58.608442Z", "url": "https://files.pythonhosted.org/packages/ba/64/fc70c0589a38184099907dc498990389a13a61d37de7e77052865aef9ba7/py-singleton-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:41 2020"}