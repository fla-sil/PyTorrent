{"info": {"author": "Bruno Reni\u00e9", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "Env-cmd\n=======\n\nA simple wrapper for executing virtualenv commands and passing them environment variables via a config file.\n\nUse case\n--------\n\nLet's say you deploy a Django site named \"example.com\". You follow all\nthe best practices and deploy it as a Python package, installed in an\nisolated virtualenv at ``/usr/share/python/example-com`` (as `dh_virtualenv\n<https://github.com/spotify/dh-virtualenv>`_ would do).\n\nConfiguration is read from environment variables in the Django settings.\n\nWhen you want to run a Django management command on your server, you would\ntype::\n\n    ENV_VAR_1=value ENV_VAR_2=other \u2026 /usr/share/python/example-com/bin/django-admin <command>\n\nYou could use `envdir <https://cr.yp.to/daemontools/envdir.html>`_ or bash's\n``source`` command to expose your environment variables, but **Env-cmd** eases\nthat further. It allows you to read a configuration file, expose values in\nthe environment and run a command simply by adding a setuptools entry point\nin your ``setup.py``. With the entry point symlinked to ``/usr/bin``, your\ncommand becomes::\n\n    example-com django-admin <command>\n\nEnv-cmd:\n\n* Reads a configuration file using the default location provided, or an\n  override.\n* Exposes configuration values as environment variables.\n* Resolves the path of your virtualenv.\n* Shells out to the virtualenv command.\n\nInstallation\n------------\n\n::\n\n    pip install env-cmd\n\nUsage\n-----\n\nIn ``<yourproject>/cli.py``:\n\n.. code-block:: python\n\n    import env_cmd\n\n    read_environ = env_cmd.read_environ(\n        'PRCONFIG',  # name of the env var that allows overriding of the\n                     # config path.\n        '/etc/yourproject.conf', # default config path.\n        {'SOME_ENV_VARIABLE': 'DEFAULT_VALUE', # Some default environment\n         'OTHER_VARIABLE': 'OTHER VALUE'},     # variables.\n    )\n    main = env_cmd.main(read_environ)\n\nIn your ``setup.py``:\n\n.. code-block:: python\n\n    setup(\n        \u2026\n        entry_points={'console_scripts': ['yourproject=yourproject.cli:main']},\n    )\n\nThen symlink ``/path/to/virtualenv/bin/yourproject`` to\n``/usr/bin/yourproject``.\n\nYou can run a command from your virtualenv with::\n\n    yourproject <command>\n\nOverride the default config path with::\n\n    PRCONFIG=/path/to/config.conf yourproject <command>\n\nConfiguration syntax is the following::\n\n    KEY=value\n    OTHER=some other value\n    QUOTED=\"quotes are stripped.\"\n    ALSO='single quotes too'\n    WHITESPACE=    is stripped as well.\n    # comments work like this\n\n    # empty lines are skipped\n\nIf you run a web server with `Gunicorn <http://gunicorn.org/>`_, you can\nuse the ``on_reload`` hook to read configuration on server reload, allowing\nzero-downtime configuration updates:\n\n.. code-block:: python\n\n    # gunicorn.conf.py\n    import os\n\n    from yourproject import read_environ\n\n    def on_reload(server):\n        server.log.info(\"Reading environ\")\n        os.environ = read_environ()\n        server.log.info(os.environ)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brutasse/env-cmd", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "env-cmd", "package_url": "https://pypi.org/project/env-cmd/", "platform": "any", "project_url": "https://pypi.org/project/env-cmd/", "project_urls": {"Homepage": "https://github.com/brutasse/env-cmd"}, "release_url": "https://pypi.org/project/env-cmd/1.1/", "requires_dist": null, "requires_python": "", "summary": "A simple wrapper for executing virtualenv commands and passing them environment variables via a config file.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple wrapper for executing virtualenv commands and passing them environment variables via a config file.</p>\n<div id=\"use-case\">\n<h2>Use case</h2>\n<p>Let\u2019s say you deploy a Django site named \u201cexample.com\u201d. You follow all\nthe best practices and deploy it as a Python package, installed in an\nisolated virtualenv at <tt><span class=\"pre\">/usr/share/python/example-com</span></tt> (as <a href=\"https://github.com/spotify/dh-virtualenv\" rel=\"nofollow\">dh_virtualenv</a> would do).</p>\n<p>Configuration is read from environment variables in the Django settings.</p>\n<p>When you want to run a Django management command on your server, you would\ntype:</p>\n<pre>ENV_VAR_1=value ENV_VAR_2=other \u2026 /usr/share/python/example-com/bin/django-admin &lt;command&gt;\n</pre>\n<p>You could use <a href=\"https://cr.yp.to/daemontools/envdir.html\" rel=\"nofollow\">envdir</a> or bash\u2019s\n<tt>source</tt> command to expose your environment variables, but <strong>Env-cmd</strong> eases\nthat further. It allows you to read a configuration file, expose values in\nthe environment and run a command simply by adding a setuptools entry point\nin your <tt>setup.py</tt>. With the entry point symlinked to <tt>/usr/bin</tt>, your\ncommand becomes:</p>\n<pre>example-com django-admin &lt;command&gt;\n</pre>\n<p>Env-cmd:</p>\n<ul>\n<li>Reads a configuration file using the default location provided, or an\noverride.</li>\n<li>Exposes configuration values as environment variables.</li>\n<li>Resolves the path of your virtualenv.</li>\n<li>Shells out to the virtualenv command.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install env-cmd\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In <tt><span class=\"pre\">&lt;yourproject&gt;/cli.py</span></tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">env_cmd</span>\n\n<span class=\"n\">read_environ</span> <span class=\"o\">=</span> <span class=\"n\">env_cmd</span><span class=\"o\">.</span><span class=\"n\">read_environ</span><span class=\"p\">(</span>\n    <span class=\"s1\">'PRCONFIG'</span><span class=\"p\">,</span>  <span class=\"c1\"># name of the env var that allows overriding of the</span>\n                 <span class=\"c1\"># config path.</span>\n    <span class=\"s1\">'/etc/yourproject.conf'</span><span class=\"p\">,</span> <span class=\"c1\"># default config path.</span>\n    <span class=\"p\">{</span><span class=\"s1\">'SOME_ENV_VARIABLE'</span><span class=\"p\">:</span> <span class=\"s1\">'DEFAULT_VALUE'</span><span class=\"p\">,</span> <span class=\"c1\"># Some default environment</span>\n     <span class=\"s1\">'OTHER_VARIABLE'</span><span class=\"p\">:</span> <span class=\"s1\">'OTHER VALUE'</span><span class=\"p\">},</span>     <span class=\"c1\"># variables.</span>\n<span class=\"p\">)</span>\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"n\">env_cmd</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">read_environ</span><span class=\"p\">)</span>\n</pre>\n<p>In your <tt>setup.py</tt>:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"err\">\u2026</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'console_scripts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'yourproject=yourproject.cli:main'</span><span class=\"p\">]},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Then symlink <tt>/path/to/virtualenv/bin/yourproject</tt> to\n<tt>/usr/bin/yourproject</tt>.</p>\n<p>You can run a command from your virtualenv with:</p>\n<pre>yourproject &lt;command&gt;\n</pre>\n<p>Override the default config path with:</p>\n<pre>PRCONFIG=/path/to/config.conf yourproject &lt;command&gt;\n</pre>\n<p>Configuration syntax is the following:</p>\n<pre>KEY=value\nOTHER=some other value\nQUOTED=\"quotes are stripped.\"\nALSO='single quotes too'\nWHITESPACE=    is stripped as well.\n# comments work like this\n\n# empty lines are skipped\n</pre>\n<p>If you run a web server with <a href=\"http://gunicorn.org/\" rel=\"nofollow\">Gunicorn</a>, you can\nuse the <tt>on_reload</tt> hook to read configuration on server reload, allowing\nzero-downtime configuration updates:</p>\n<pre><span class=\"c1\"># gunicorn.conf.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">yourproject</span> <span class=\"kn\">import</span> <span class=\"n\">read_environ</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_reload</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">):</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Reading environ\"</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span> <span class=\"o\">=</span> <span class=\"n\">read_environ</span><span class=\"p\">()</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4035882, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "93a8ee5fc253c4c6a0727e9116b76eba", "sha256": "bf758a9ac57bef72dc594dc455ab88b2c0b5e40d4a61f9911c173c359429a2c3"}, "downloads": -1, "filename": "env_cmd-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "93a8ee5fc253c4c6a0727e9116b76eba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5253, "upload_time": "2017-05-09T09:20:03", "upload_time_iso_8601": "2017-05-09T09:20:03.786283Z", "url": "https://files.pythonhosted.org/packages/0e/52/4ddf95643f442beed2433d847f2bd85275c7d08ca30565bc64fb63a8ecff/env_cmd-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9515fae120cb0cb0b2a710abf2729c22", "sha256": "1b805bb89422673d1d158d29b6762301e7c04f7088fbaef927b52ba3fff2f683"}, "downloads": -1, "filename": "env-cmd-1.0.tar.gz", "has_sig": false, "md5_digest": "9515fae120cb0cb0b2a710abf2729c22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4067, "upload_time": "2017-05-09T09:20:05", "upload_time_iso_8601": "2017-05-09T09:20:05.190258Z", "url": "https://files.pythonhosted.org/packages/3b/f1/c8af64eab3a6739f507597a9a73f7982521a826c663dac09dcdc339d3192/env-cmd-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "a7caa929cb5465af5517746f0e5e9277", "sha256": "628a061097bc9054955eac3e8bdaeb7399e5ffaa9997f9cac73532c61cedaf85"}, "downloads": -1, "filename": "env_cmd-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a7caa929cb5465af5517746f0e5e9277", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3099, "upload_time": "2018-07-06T09:36:32", "upload_time_iso_8601": "2018-07-06T09:36:32.661177Z", "url": "https://files.pythonhosted.org/packages/08/5e/37eba25ca32befe998230c6bc661e3c67ca57b6db464a9e6ec3eb56d64bb/env_cmd-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fdebcfdf8c286c04705f224e9b5055b8", "sha256": "c94f2d3ca10d65bf0d3104154a7d5ac13abbae0aa3247847537a1af58ff33f21"}, "downloads": -1, "filename": "env-cmd-1.1.tar.gz", "has_sig": false, "md5_digest": "fdebcfdf8c286c04705f224e9b5055b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4073, "upload_time": "2018-07-06T09:36:33", "upload_time_iso_8601": "2018-07-06T09:36:33.491362Z", "url": "https://files.pythonhosted.org/packages/e3/27/90ff01179657e80f404418347c245880364858dedaa8d43f436d7d2d42e9/env-cmd-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a7caa929cb5465af5517746f0e5e9277", "sha256": "628a061097bc9054955eac3e8bdaeb7399e5ffaa9997f9cac73532c61cedaf85"}, "downloads": -1, "filename": "env_cmd-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a7caa929cb5465af5517746f0e5e9277", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3099, "upload_time": "2018-07-06T09:36:32", "upload_time_iso_8601": "2018-07-06T09:36:32.661177Z", "url": "https://files.pythonhosted.org/packages/08/5e/37eba25ca32befe998230c6bc661e3c67ca57b6db464a9e6ec3eb56d64bb/env_cmd-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fdebcfdf8c286c04705f224e9b5055b8", "sha256": "c94f2d3ca10d65bf0d3104154a7d5ac13abbae0aa3247847537a1af58ff33f21"}, "downloads": -1, "filename": "env-cmd-1.1.tar.gz", "has_sig": false, "md5_digest": "fdebcfdf8c286c04705f224e9b5055b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4073, "upload_time": "2018-07-06T09:36:33", "upload_time_iso_8601": "2018-07-06T09:36:33.491362Z", "url": "https://files.pythonhosted.org/packages/e3/27/90ff01179657e80f404418347c245880364858dedaa8d43f436d7d2d42e9/env-cmd-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:11 2020"}