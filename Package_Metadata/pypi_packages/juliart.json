{"info": {"author": "Vanessa Sochat", "author_email": "vsochat@stanford.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: Unix", "Programming Language :: C", "Programming Language :: Python", "Programming Language :: Python :: 3.3", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "# Julia Art \"juliart\"\n\n[![PyPI version](https://badge.fury.io/py/juliart.svg)](https://pypi.org/project/juliart/)\n[![GitHub actions status](https://github.com/vsoch/juliart/workflows/ci/badge.svg?branch=master)](https://github.com/vsoch/juliart/actions?query=branch%3Amaster+workflow%3Aci)\n\nThis module is based on the [Color Julia Bot](https://twitter.com/colorjulia_bot)\nbut intended for command line generation, and with options to customize colors\nbased on themes (holidays, seasons) and also generate animations. \nThe name \"juliart\" is also a play on word (Juliard) to hint\nat artsy things.\n\n![img/juliart.png](https://raw.githubusercontent.com/vsoch/juliart/master/img/juliart.png)\n\nI've done my best so that the default parameters produce (what I think to be)\nthe most random and pretty images. You can of course tweak the parameters\nto your liking, discussed below!\n\n## Examples and Documentation\n\nIf you want to jump in to examples, see these repositories:\n\n - [vsoch/juliart-says](https://github.com/vsoch/juliart-says): write Markov generated (or raw) text onto a Julia Set image\n - [vsoch/juliart-grid](https://github.com/vsoch/juliart-grid): a grid of Julia Sets to show indexing into the Mandelbrot Set\n - [vsoch.github.io](https://vsoch.github.io/2019/juliart/): A writeup of Juliart, explaining Julia and Mandelbrot sets.\n\n\n## Usage\n\n### Install\n\nYou can install from pypi\n\n```bash\npip install juliart\n```\n\nor install from the repository directly:\n\n```bash\n$ git clone https://github.com/vsoch/juliart\n$ python setup.py install\n```\n\nfor animations you'll also need an extra package:\n\n```bash\npip install juliart[animate]\n```\n\n### Generate Art\n\nYou can see basic usage by typing `juliart` into your terminal:\n\n```bash\n$ juliart\nusage: juliart [-h] [--version] {generate,animate} ...\n\nJulia Set art generator\n\noptional arguments:\n  -h, --help          show this help message and exit\n  --version           suppress additional output.\n\nactions:\n  actions for Julia Set art generator\n\n  {generate,animate}  juliart actions\n    generate          generate a Julia Set image\n    animate           create a Julia Set animation (gif)\n```\n\nYou'll see there are two options: to generate, and to animate. \n\n\n#### Generate\n\nCustomizations for the generate command generally include color or theme choices,\nan optional text to print on the graphic, and parameters.\n\n\n```bash\n$ juliart generate --help\nusage: juliart generate [-h] [--radius RADIUS] [--outfile OUTFILE]\n                        [--text TEXT] [--fontsize FONTSIZE] [--xcoord XCOORD]\n                        [--ycoord YCOORD] [--ca CA] [--cb CB] [--res RES]\n                        [--iter ITERS] [--color {random,pattern,glow}]\n                        [--rgb RGB]\n                        [--theme {christmas,easter,fall,random,halloween,hanukkah,spring,summer,thanksgiving,valentine,winter}]\n                        [--zoom ZOOM]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --radius RADIUS       the max radius to allow (default is 4)\n  --outfile OUTFILE     the output file to save the image (defaults to\n                        randomly generated png)\n  --text TEXT           write a string of text to bottom left corner\n  --fontsize FONTSIZE   font size of text (if desired) defaults to 16\n  --xcoord XCOORD       x coordinate for text (defaults to 0)\n  --ycoord YCOORD       y coordinate for text (defaults to 0)\n  --ca CA               the a component of the c parameter\n  --cb CB               the b component of the c parameter\n  --res RES             the resolution to generate (defaults to 1000)\n  --iter ITERS          the number of iterations per pixel (defaults to 200)\n  --color {random,pattern,glow}\n                        a color pattern to follow.\n  --rgb RGB             a specific rbg color, in format R,G,B\n  --theme {christmas,easter,fall,random,halloween,hanukkah,spring,summer,thanksgiving,valentine,winter}\n                        a theme to color the art (defaults to random colors)\n  --zoom ZOOM           the level of zoom (defaults to 1.8)\n```\n\n##### Defaults\n\nIf you use the defaults, it will generate a randomly named image in your\npresent working directory.\n\n```bash\n$ juliart generate\nGenerating Julia Set...\nSaving image to doopy-kerfuffle-5780.png\n```\n\n##### C Parameters\n\nThe values of ca and cb (the real and complex components of the c parameter\nin the Julia Set equation) are chosen at random, but you can select them\nto better understand how your choices influence the graphic generation:\n\n```bash\njuliart generate --ca 0.5 --cb 0.5\n```\n\nI also created a [small project](https://github.com/vsoch/juliart-grid/) that will visually show how your parameter selection\ninfluences the resulting image! You might want to give the output file a more meaningful name:\n\n```bash\njuliart generate --ca 0.5 --cb 0.5 --outfile ca-0.5-cb-0.5.png\n```\n\nAnd if you intend to compare the images, setting a consistent color is also \nreasonable:\n\n```bash\njuliart generate --ca 0.5 --cb 0.5 --outfile ca-0.5-cb-0.5.png --rgb 90,12,10\n```\n\nFor a bigger deep dive into this exercise (I was curious) see [Juliart Grid](https://github.com/vsoch/juliart-grid).\n\n\n##### Text\n\nAs an alternative to file name (or just to have some fun!) you can generate\nan image with a custom message.\n\n```bash\njuliart generate --text \"Dinosaurs are great!\"\n```\n\nBy default the text will be printed in the top left corner (coordinate 10,10)\nhowever you can adjust this to your liking:\n\n```bash\n$ juliart generate --text \"Avocados are also great!\" --xcoord 200 --ycoord 20\n```\n\nYou can also change the font from OpenSans-Regular.ttf to Pacifico-Regular.ttf,\nand choose an alpha (transparency).\n\n```bash\n$ juliart generate --text \"Avocados!\" --fontsize 30 --font-alpha 90 --font Pacifico-Regular\n```\n\nYou can see all of these examples in the [text](img/text) examples folder.\n\n\n##### Zoom, Iterations, and Radius\n\nOtherwise you can do any of the customizations shown above! Try playing\naround with iterations, colors/themes, and zoom to see different effects.\n\n```bash\n$ juliart generate --zoom 3\n$ juliart generate --iter 100\n```\n\nAfter looking over the equation to generate the JuliaSet for a while,\nI got the insight that if we increase the iterations value and modify the radious,\n this will generate more detailed images. Here are some examples:\n\n```bash\njuliart generate --iter 1000 --radius 8\n```\n\n![img/random/frigid-kitty-0005.png](https://raw.githubusercontent.com/vsoch/juliart/master/img/random/frigid-kitty-0005.png)\n\n```bash\njuliart generate --iter 5000 --radius 10\n```\n\nThis one takes longer, of course.\n\n##### Interactive Python\n\nTo generate from within Python, here is a quick example:\n\n```python\nfrom juliart.main import JuliaSet\n\njuliaset = JuliaSet(\n    resolution=1000, # (1000x1000)\n    color=\"random\", # random, glow, pattern\n    theme=\"random\",\n    rgb=None,  # \"197,18,12\"\n    iterations=200,\n)\njuliaset.generate_image(zoom=1.8)\njuliaset.save_image(\"/tmp/myimage.png\")\n```\n\nIf you want to add text, before the save_image do:\n\n```python\njuliaset.write_text(\n    text,\n    fontsize=16,\n    xcoord=10,\n    ycoord=10,\n)\n```\n\nBy default, the text is white. You can change the color (and add a transparency, alpha layer)\nlike:\n\n\n```python\njuliaset.write_text(\n    text,\n    fontsize=16,\n    xcoord=10,\n    ycoord=10,\n    rgb=(255, 255, 255, 15),\n)\n```\n\n#### Animate\n\n![img/animate/butterscotch-plant-7505.gif](https://raw.githubusercontent.com/vsoch/juliart/master/img/animate/butterscotch-plant-7505.gif)\n\nYou can inspect the parameters for the animation command as follows:\n\n```bash\n$ juliart animate --help\nusage: juliart animate [-h] [--no-cleanup] [--constant-a] [--constant-b]\n                       [--randomize-zoom] [--zoom-max ZOOM_MAX]\n                       [--zoom-min ZOOM_MIN] [--frames FRAMES]\n                       [--outfile OUTFILE] [--text TEXT] [--fontsize FONTSIZE]\n                       [--xcoord XCOORD] [--ycoord YCOORD] [--ca CA] [--cb CB]\n                       [--res RES] [--iter ITERS]\n                       [--color {random,pattern,glow}] [--rgb RGB]\n                       [--theme {christmas,easter,fall,random,halloween,hanukkah,spring,summer,thanksgiving,valentine,winter}]\n                       [--zoom ZOOM]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --no-cleanup          Do not delete temporary directory with png files to\n                        generate gif.\n  --constant-a          Don't randomize the point A on the circle.\n  --constant-b          Don't randomize the point B on the circle.\n  --randomize-zoom      Randomize the zoom up to --zoom-min or --zoom-max.\n  --zoom-max ZOOM_MAX   the max zoom (must be greater than 3)\n  --zoom-min ZOOM_MIN   the max zoom (must be greater than 0)\n  --frames FRAMES       the number of frames to generate (default is 30)\n  --outfile OUTFILE     the output file to save the image (defaults to\n                        randomly generated png)\n  --text TEXT           write a string of text to bottom left corner\n  --fontsize FONTSIZE   font size of text (if desired) defaults to 16\n  --xcoord XCOORD       x coordinate for text (defaults to 0)\n  --ycoord YCOORD       y coordinate for text (defaults to 0)\n  --ca CA               the a component of the c parameter\n  --cb CB               the b component of the c parameter\n  --res RES             the resolution to generate (defaults to 1000)\n  --iter ITERS          the number of iterations per pixel (defaults to 200)\n  --color {random,pattern,glow}\n                        a color pattern to follow.\n  --rgb RGB             a specific rbg color, in format R,G,B\n  --theme {christmas,easter,fall,random,halloween,hanukkah,spring,summer,thanksgiving,valentine,winter}\n                        a theme to color the art (defaults to random colors)\n  --zoom ZOOM           the level of zoom (defaults to 1.8)\n```\n\nMost of these defaults (mins and maxes) are fairly reasonable and you wouldn't\nwant to change them. By default, we will vary both the A and B constants that\nare used to generate the Julia Set, but we won't vary the zoom. \n\n##### Defaults\n\nThe defaults will generate a 30 framed animation, varying the parameters\nA and B but not the zoom, with resolution (1000 X 1000) and 200 iterations.\n\n```bash\n$ juliart animate --frames 5\n```\n\n##### Optimize \n\nYou can make that faster by changing the iterations and resolution, of course!\n\n```bash\n$ juliart animate --res 500 --iters 100\n```\n\nThe tradeoff is image quality. You'll also notice in the case of generating\nblack pixels it takes slightly longer than white pixels (since white is \nan absence of color).\n\n##### Text\n\nYou can add a consistent message to all frames in an animation:\n\n```bash\njuliart animate --text \"Dinosaurs are great!\"\n```\n\nand customize the `--xcoord`, `--ycoord`, or `--fontsize` parameters as\ndesired. See the [text](img/text) examples folder for an example. If you want\nto vary the text between frames, then you'll need to roll your own\nloop to generate the frames and then combine into an animation. An example\nis provided, the code at [Juliart Grid](https://github.com/vsoch/juliart-grid).\n\n\n##### Cleanup\n\nIf you want to keep the temporary png images (the frames) you can do:\n\n```bash\n$ juliart animate --no-cleanup\n```\n\n##### Frames\n\nIf you want to customize the number of frames, you can do that too (we default to 30). Here\nwould be a smaller / quicker to generate image:\n\n```bash\n$ juliart animate --frames 5\n```\n\n##### Zoom\n\nTo also randomize the zoom, specify:\n\n```bash\n$ juliart animate --randomize-zoom --frames 5\n```\n\n##### Python\n\nTo generate from within Python, it's fairly straight forward:\n\n```python\nfrom juliart.main import JuliaSetAnimation\n\njuliaset = JuliaSetAnimation(\n    resolution=args.res,\n    color=args.color,\n    theme=args.theme,\n    rgb=args.rgb,\n    cleanup=not args.skip_cleanup,\n    iterations=args.iters,\n    zoom_max=args.zoom_max,\n    zoom_min=args.zoom_min,\n)\n\njuliaset.generate_animation(\n    zoom=args.zoom,\n    outfile=args.outfile,\n    frames=args.frames,\n    randomize_a=not args.constant_a,\n    randomize_b=not args.constant_b,\n    randomize_zoom=args.randomize_zoom,\n)\n```\n\n\n### Colors\n\nThe three choices for colors are random, pattern, or glow, or setting your\nown RGB value.\n\n#### Random\n\nRandom is the default, and the image at the top of the README here is generated using\nthis setting. Take a look at more [more random examples](https://github.com/vsoch/juliart/tree/master/img/random).\n\n#### Pattern\n\nPattern doesn't use a gradual gradient, but instead returns a hard boundary between\na color (and black). \n\n![img/pattern/delicious-lizard-8995.png](https://raw.githubusercontent.com/vsoch/juliart/master/img/pattern/delicious-lizard-8995.png)\n\nTake a look at more [more pattern examples](https://github.com/vsoch/juliart/tree/master/img/pattern) here.\n\n### RGB\n\nIf you want complete control of the color, provide a comma separated list\nof RGB numbers as follows:\n\n```bash\n$ juliart generate --rgb 9,35,155\n```\n\nNote that this will also work with the `--color pattern` flag.\n\n#### Glow\n\nGlow means a dark background (black) with a color gradient. Here is an example:\n\n![img/glow/dinosaur-diablo-1189.png](https://raw.githubusercontent.com/vsoch/juliart/master/img/glow/dinosaur-diablo-1189.png)\n\nAnd is generated as follows:\n\n```bash\njuliart generate --color glow\n```\n\nSee [more glow examples](https://github.com/vsoch/juliart/tree/master/img/glow).\n\nIf you choose glow, this will overwrite the choice of a theme (discussed next).\n\n### Themes\n\nTo get a little more variety in your choice of colors, you can select a theme! \n\n```bash\njuliart generate --theme halloween\njuliart generate --theme christmas\njuliart generate --theme hanukkah\njuliart generate --theme thanksgiving\njuliart generate --theme valentine\n\njuliart generate --theme easter\njuliart generate --theme fall\njuliart generate --theme spring\njuliart generate --theme summer\njuliart generate --theme winter\n```\n\nFor any of the commands above, you can also add `--color pattern` to flip the background\nfrom the theme color to be black. \n\n```bash\n$ juliart generate --theme halloween --color pattern\n```\n\nTake a look at images in the [themes folder](https://github.com/vsoch/juliart/tree/master/img/pattern) \nto get a sense of the color palettes.\n\n### Docker\n\nYou can run the pre-generated Docker container too! You'll need to bind a folder\non the host to save the image to.\n\n```bash\n$ mkdir data\n$ docker run -it -v $PWD/data/:/data quay.io/vanessa/juliart generate --outfile /data/art.png\n```\n\nYou can also build the image first if you like:\n\n```bash\n$ docker build -t quay.io/vanessa/juliart .\n```\n\nThe images are provided on [quay.io/vanessa/juliart](https://quay.io/repository/vanessa/juliart).\n\n## Support\n\nDo you have a question? Or want to suggest a feature to make it better?\nPlease [open an issue!](https://www.github.com/vsoch/juliart)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/vsoch/juliart", "keywords": "julia,julia set,art,holidays,generator,animation", "license": "LICENSE", "maintainer": "Vanessa Sochat", "maintainer_email": "vsochat@stanford.edu", "name": "juliart", "package_url": "https://pypi.org/project/juliart/", "platform": "", "project_url": "https://pypi.org/project/juliart/", "project_urls": {"Homepage": "http://www.github.com/vsoch/juliart"}, "release_url": "https://pypi.org/project/juliart/0.0.16/", "requires_dist": null, "requires_python": "", "summary": "Command line tool for generating Julia Set graphics and animations", "version": "0.0.16", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Julia Art \"juliart\"</h1>\n<p><a href=\"https://pypi.org/project/juliart/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5720f72d25cfe39603f440aab52a507cdd07c5f3/68747470733a2f2f62616467652e667572792e696f2f70792f6a756c696172742e737667\"></a>\n<a href=\"https://github.com/vsoch/juliart/actions?query=branch%3Amaster+workflow%3Aci\" rel=\"nofollow\"><img alt=\"GitHub actions status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0b7b81c21dd9e3cddde9b7281bc81d6e43f08f3/68747470733a2f2f6769746875622e636f6d2f76736f63682f6a756c696172742f776f726b666c6f77732f63692f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This module is based on the <a href=\"https://twitter.com/colorjulia_bot\" rel=\"nofollow\">Color Julia Bot</a>\nbut intended for command line generation, and with options to customize colors\nbased on themes (holidays, seasons) and also generate animations.\nThe name \"juliart\" is also a play on word (Juliard) to hint\nat artsy things.</p>\n<p><img alt=\"img/juliart.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82008511857414d241ec848210c01599d3df842b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76736f63682f6a756c696172742f6d61737465722f696d672f6a756c696172742e706e67\"></p>\n<p>I've done my best so that the default parameters produce (what I think to be)\nthe most random and pretty images. You can of course tweak the parameters\nto your liking, discussed below!</p>\n<h2>Examples and Documentation</h2>\n<p>If you want to jump in to examples, see these repositories:</p>\n<ul>\n<li><a href=\"https://github.com/vsoch/juliart-says\" rel=\"nofollow\">vsoch/juliart-says</a>: write Markov generated (or raw) text onto a Julia Set image</li>\n<li><a href=\"https://github.com/vsoch/juliart-grid\" rel=\"nofollow\">vsoch/juliart-grid</a>: a grid of Julia Sets to show indexing into the Mandelbrot Set</li>\n<li><a href=\"https://vsoch.github.io/2019/juliart/\" rel=\"nofollow\">vsoch.github.io</a>: A writeup of Juliart, explaining Julia and Mandelbrot sets.</li>\n</ul>\n<h2>Usage</h2>\n<h3>Install</h3>\n<p>You can install from pypi</p>\n<pre>pip install juliart\n</pre>\n<p>or install from the repository directly:</p>\n<pre>$ git clone https://github.com/vsoch/juliart\n$ python setup.py install\n</pre>\n<p>for animations you'll also need an extra package:</p>\n<pre>pip install juliart<span class=\"o\">[</span>animate<span class=\"o\">]</span>\n</pre>\n<h3>Generate Art</h3>\n<p>You can see basic usage by typing <code>juliart</code> into your terminal:</p>\n<pre>$ juliart\nusage: juliart <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--version<span class=\"o\">]</span> <span class=\"o\">{</span>generate,animate<span class=\"o\">}</span> ...\n\nJulia Set art generator\n\noptional arguments:\n  -h, --help          show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --version           suppress additional output.\n\nactions:\n  actions <span class=\"k\">for</span> Julia Set art generator\n\n  <span class=\"o\">{</span>generate,animate<span class=\"o\">}</span>  juliart actions\n    generate          generate a Julia Set image\n    animate           create a Julia Set animation <span class=\"o\">(</span>gif<span class=\"o\">)</span>\n</pre>\n<p>You'll see there are two options: to generate, and to animate.</p>\n<h4>Generate</h4>\n<p>Customizations for the generate command generally include color or theme choices,\nan optional text to print on the graphic, and parameters.</p>\n<pre>$ juliart generate --help\nusage: juliart generate <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--radius RADIUS<span class=\"o\">]</span> <span class=\"o\">[</span>--outfile OUTFILE<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--text TEXT<span class=\"o\">]</span> <span class=\"o\">[</span>--fontsize FONTSIZE<span class=\"o\">]</span> <span class=\"o\">[</span>--xcoord XCOORD<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--ycoord YCOORD<span class=\"o\">]</span> <span class=\"o\">[</span>--ca CA<span class=\"o\">]</span> <span class=\"o\">[</span>--cb CB<span class=\"o\">]</span> <span class=\"o\">[</span>--res RES<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--iter ITERS<span class=\"o\">]</span> <span class=\"o\">[</span>--color <span class=\"o\">{</span>random,pattern,glow<span class=\"o\">}]</span>\n                        <span class=\"o\">[</span>--rgb RGB<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--theme <span class=\"o\">{</span>christmas,easter,fall,random,halloween,hanukkah,spring,summer,thanksgiving,valentine,winter<span class=\"o\">}]</span>\n                        <span class=\"o\">[</span>--zoom ZOOM<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --radius RADIUS       the max radius to allow <span class=\"o\">(</span>default is <span class=\"m\">4</span><span class=\"o\">)</span>\n  --outfile OUTFILE     the output file to save the image <span class=\"o\">(</span>defaults to\n                        randomly generated png<span class=\"o\">)</span>\n  --text TEXT           write a string of text to bottom left corner\n  --fontsize FONTSIZE   font size of text <span class=\"o\">(</span><span class=\"k\">if</span> desired<span class=\"o\">)</span> defaults to <span class=\"m\">16</span>\n  --xcoord XCOORD       x coordinate <span class=\"k\">for</span> text <span class=\"o\">(</span>defaults to <span class=\"m\">0</span><span class=\"o\">)</span>\n  --ycoord YCOORD       y coordinate <span class=\"k\">for</span> text <span class=\"o\">(</span>defaults to <span class=\"m\">0</span><span class=\"o\">)</span>\n  --ca CA               the a component of the c parameter\n  --cb CB               the b component of the c parameter\n  --res RES             the resolution to generate <span class=\"o\">(</span>defaults to <span class=\"m\">1000</span><span class=\"o\">)</span>\n  --iter ITERS          the number of iterations per pixel <span class=\"o\">(</span>defaults to <span class=\"m\">200</span><span class=\"o\">)</span>\n  --color <span class=\"o\">{</span>random,pattern,glow<span class=\"o\">}</span>\n                        a color pattern to follow.\n  --rgb RGB             a specific rbg color, in format R,G,B\n  --theme <span class=\"o\">{</span>christmas,easter,fall,random,halloween,hanukkah,spring,summer,thanksgiving,valentine,winter<span class=\"o\">}</span>\n                        a theme to color the art <span class=\"o\">(</span>defaults to random colors<span class=\"o\">)</span>\n  --zoom ZOOM           the level of zoom <span class=\"o\">(</span>defaults to <span class=\"m\">1</span>.8<span class=\"o\">)</span>\n</pre>\n<h5>Defaults</h5>\n<p>If you use the defaults, it will generate a randomly named image in your\npresent working directory.</p>\n<pre>$ juliart generate\nGenerating Julia Set...\nSaving image to doopy-kerfuffle-5780.png\n</pre>\n<h5>C Parameters</h5>\n<p>The values of ca and cb (the real and complex components of the c parameter\nin the Julia Set equation) are chosen at random, but you can select them\nto better understand how your choices influence the graphic generation:</p>\n<pre>juliart generate --ca <span class=\"m\">0</span>.5 --cb <span class=\"m\">0</span>.5\n</pre>\n<p>I also created a <a href=\"https://github.com/vsoch/juliart-grid/\" rel=\"nofollow\">small project</a> that will visually show how your parameter selection\ninfluences the resulting image! You might want to give the output file a more meaningful name:</p>\n<pre>juliart generate --ca <span class=\"m\">0</span>.5 --cb <span class=\"m\">0</span>.5 --outfile ca-0.5-cb-0.5.png\n</pre>\n<p>And if you intend to compare the images, setting a consistent color is also\nreasonable:</p>\n<pre>juliart generate --ca <span class=\"m\">0</span>.5 --cb <span class=\"m\">0</span>.5 --outfile ca-0.5-cb-0.5.png --rgb <span class=\"m\">90</span>,12,10\n</pre>\n<p>For a bigger deep dive into this exercise (I was curious) see <a href=\"https://github.com/vsoch/juliart-grid\" rel=\"nofollow\">Juliart Grid</a>.</p>\n<h5>Text</h5>\n<p>As an alternative to file name (or just to have some fun!) you can generate\nan image with a custom message.</p>\n<pre>juliart generate --text <span class=\"s2\">\"Dinosaurs are great!\"</span>\n</pre>\n<p>By default the text will be printed in the top left corner (coordinate 10,10)\nhowever you can adjust this to your liking:</p>\n<pre>$ juliart generate --text <span class=\"s2\">\"Avocados are also great!\"</span> --xcoord <span class=\"m\">200</span> --ycoord <span class=\"m\">20</span>\n</pre>\n<p>You can also change the font from OpenSans-Regular.ttf to Pacifico-Regular.ttf,\nand choose an alpha (transparency).</p>\n<pre>$ juliart generate --text <span class=\"s2\">\"Avocados!\"</span> --fontsize <span class=\"m\">30</span> --font-alpha <span class=\"m\">90</span> --font Pacifico-Regular\n</pre>\n<p>You can see all of these examples in the <a href=\"img/text\" rel=\"nofollow\">text</a> examples folder.</p>\n<h5>Zoom, Iterations, and Radius</h5>\n<p>Otherwise you can do any of the customizations shown above! Try playing\naround with iterations, colors/themes, and zoom to see different effects.</p>\n<pre>$ juliart generate --zoom <span class=\"m\">3</span>\n$ juliart generate --iter <span class=\"m\">100</span>\n</pre>\n<p>After looking over the equation to generate the JuliaSet for a while,\nI got the insight that if we increase the iterations value and modify the radious,\nthis will generate more detailed images. Here are some examples:</p>\n<pre>juliart generate --iter <span class=\"m\">1000</span> --radius <span class=\"m\">8</span>\n</pre>\n<p><img alt=\"img/random/frigid-kitty-0005.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74002c7f816af216dfdf16abab245606c25ce910/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76736f63682f6a756c696172742f6d61737465722f696d672f72616e646f6d2f6672696769642d6b697474792d303030352e706e67\"></p>\n<pre>juliart generate --iter <span class=\"m\">5000</span> --radius <span class=\"m\">10</span>\n</pre>\n<p>This one takes longer, of course.</p>\n<h5>Interactive Python</h5>\n<p>To generate from within Python, here is a quick example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">juliart.main</span> <span class=\"kn\">import</span> <span class=\"n\">JuliaSet</span>\n\n<span class=\"n\">juliaset</span> <span class=\"o\">=</span> <span class=\"n\">JuliaSet</span><span class=\"p\">(</span>\n    <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"c1\"># (1000x1000)</span>\n    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"random\"</span><span class=\"p\">,</span> <span class=\"c1\"># random, glow, pattern</span>\n    <span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"s2\">\"random\"</span><span class=\"p\">,</span>\n    <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># \"197,18,12\"</span>\n    <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">juliaset</span><span class=\"o\">.</span><span class=\"n\">generate_image</span><span class=\"p\">(</span><span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"mf\">1.8</span><span class=\"p\">)</span>\n<span class=\"n\">juliaset</span><span class=\"o\">.</span><span class=\"n\">save_image</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/myimage.png\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to add text, before the save_image do:</p>\n<pre><span class=\"n\">juliaset</span><span class=\"o\">.</span><span class=\"n\">write_text</span><span class=\"p\">(</span>\n    <span class=\"n\">text</span><span class=\"p\">,</span>\n    <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span>\n    <span class=\"n\">xcoord</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">ycoord</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>By default, the text is white. You can change the color (and add a transparency, alpha layer)\nlike:</p>\n<pre><span class=\"n\">juliaset</span><span class=\"o\">.</span><span class=\"n\">write_text</span><span class=\"p\">(</span>\n    <span class=\"n\">text</span><span class=\"p\">,</span>\n    <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">,</span>\n    <span class=\"n\">xcoord</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">ycoord</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Animate</h4>\n<p><img alt=\"img/animate/butterscotch-plant-7505.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0589198554aae82ac684dab13cb231d682250799/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76736f63682f6a756c696172742f6d61737465722f696d672f616e696d6174652f62757474657273636f7463682d706c616e742d373530352e676966\"></p>\n<p>You can inspect the parameters for the animation command as follows:</p>\n<pre>$ juliart animate --help\nusage: juliart animate <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--no-cleanup<span class=\"o\">]</span> <span class=\"o\">[</span>--constant-a<span class=\"o\">]</span> <span class=\"o\">[</span>--constant-b<span class=\"o\">]</span>\n                       <span class=\"o\">[</span>--randomize-zoom<span class=\"o\">]</span> <span class=\"o\">[</span>--zoom-max ZOOM_MAX<span class=\"o\">]</span>\n                       <span class=\"o\">[</span>--zoom-min ZOOM_MIN<span class=\"o\">]</span> <span class=\"o\">[</span>--frames FRAMES<span class=\"o\">]</span>\n                       <span class=\"o\">[</span>--outfile OUTFILE<span class=\"o\">]</span> <span class=\"o\">[</span>--text TEXT<span class=\"o\">]</span> <span class=\"o\">[</span>--fontsize FONTSIZE<span class=\"o\">]</span>\n                       <span class=\"o\">[</span>--xcoord XCOORD<span class=\"o\">]</span> <span class=\"o\">[</span>--ycoord YCOORD<span class=\"o\">]</span> <span class=\"o\">[</span>--ca CA<span class=\"o\">]</span> <span class=\"o\">[</span>--cb CB<span class=\"o\">]</span>\n                       <span class=\"o\">[</span>--res RES<span class=\"o\">]</span> <span class=\"o\">[</span>--iter ITERS<span class=\"o\">]</span>\n                       <span class=\"o\">[</span>--color <span class=\"o\">{</span>random,pattern,glow<span class=\"o\">}]</span> <span class=\"o\">[</span>--rgb RGB<span class=\"o\">]</span>\n                       <span class=\"o\">[</span>--theme <span class=\"o\">{</span>christmas,easter,fall,random,halloween,hanukkah,spring,summer,thanksgiving,valentine,winter<span class=\"o\">}]</span>\n                       <span class=\"o\">[</span>--zoom ZOOM<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --no-cleanup          Do not delete temporary directory with png files to\n                        generate gif.\n  --constant-a          Don<span class=\"s1\">'t randomize the point A on the circle.</span>\n<span class=\"s1\">  --constant-b          Don'</span>t randomize the point B on the circle.\n  --randomize-zoom      Randomize the zoom up to --zoom-min or --zoom-max.\n  --zoom-max ZOOM_MAX   the max zoom <span class=\"o\">(</span>must be greater than <span class=\"m\">3</span><span class=\"o\">)</span>\n  --zoom-min ZOOM_MIN   the max zoom <span class=\"o\">(</span>must be greater than <span class=\"m\">0</span><span class=\"o\">)</span>\n  --frames FRAMES       the number of frames to generate <span class=\"o\">(</span>default is <span class=\"m\">30</span><span class=\"o\">)</span>\n  --outfile OUTFILE     the output file to save the image <span class=\"o\">(</span>defaults to\n                        randomly generated png<span class=\"o\">)</span>\n  --text TEXT           write a string of text to bottom left corner\n  --fontsize FONTSIZE   font size of text <span class=\"o\">(</span><span class=\"k\">if</span> desired<span class=\"o\">)</span> defaults to <span class=\"m\">16</span>\n  --xcoord XCOORD       x coordinate <span class=\"k\">for</span> text <span class=\"o\">(</span>defaults to <span class=\"m\">0</span><span class=\"o\">)</span>\n  --ycoord YCOORD       y coordinate <span class=\"k\">for</span> text <span class=\"o\">(</span>defaults to <span class=\"m\">0</span><span class=\"o\">)</span>\n  --ca CA               the a component of the c parameter\n  --cb CB               the b component of the c parameter\n  --res RES             the resolution to generate <span class=\"o\">(</span>defaults to <span class=\"m\">1000</span><span class=\"o\">)</span>\n  --iter ITERS          the number of iterations per pixel <span class=\"o\">(</span>defaults to <span class=\"m\">200</span><span class=\"o\">)</span>\n  --color <span class=\"o\">{</span>random,pattern,glow<span class=\"o\">}</span>\n                        a color pattern to follow.\n  --rgb RGB             a specific rbg color, in format R,G,B\n  --theme <span class=\"o\">{</span>christmas,easter,fall,random,halloween,hanukkah,spring,summer,thanksgiving,valentine,winter<span class=\"o\">}</span>\n                        a theme to color the art <span class=\"o\">(</span>defaults to random colors<span class=\"o\">)</span>\n  --zoom ZOOM           the level of zoom <span class=\"o\">(</span>defaults to <span class=\"m\">1</span>.8<span class=\"o\">)</span>\n</pre>\n<p>Most of these defaults (mins and maxes) are fairly reasonable and you wouldn't\nwant to change them. By default, we will vary both the A and B constants that\nare used to generate the Julia Set, but we won't vary the zoom.</p>\n<h5>Defaults</h5>\n<p>The defaults will generate a 30 framed animation, varying the parameters\nA and B but not the zoom, with resolution (1000 X 1000) and 200 iterations.</p>\n<pre>$ juliart animate --frames <span class=\"m\">5</span>\n</pre>\n<h5>Optimize</h5>\n<p>You can make that faster by changing the iterations and resolution, of course!</p>\n<pre>$ juliart animate --res <span class=\"m\">500</span> --iters <span class=\"m\">100</span>\n</pre>\n<p>The tradeoff is image quality. You'll also notice in the case of generating\nblack pixels it takes slightly longer than white pixels (since white is\nan absence of color).</p>\n<h5>Text</h5>\n<p>You can add a consistent message to all frames in an animation:</p>\n<pre>juliart animate --text <span class=\"s2\">\"Dinosaurs are great!\"</span>\n</pre>\n<p>and customize the <code>--xcoord</code>, <code>--ycoord</code>, or <code>--fontsize</code> parameters as\ndesired. See the <a href=\"img/text\" rel=\"nofollow\">text</a> examples folder for an example. If you want\nto vary the text between frames, then you'll need to roll your own\nloop to generate the frames and then combine into an animation. An example\nis provided, the code at <a href=\"https://github.com/vsoch/juliart-grid\" rel=\"nofollow\">Juliart Grid</a>.</p>\n<h5>Cleanup</h5>\n<p>If you want to keep the temporary png images (the frames) you can do:</p>\n<pre>$ juliart animate --no-cleanup\n</pre>\n<h5>Frames</h5>\n<p>If you want to customize the number of frames, you can do that too (we default to 30). Here\nwould be a smaller / quicker to generate image:</p>\n<pre>$ juliart animate --frames <span class=\"m\">5</span>\n</pre>\n<h5>Zoom</h5>\n<p>To also randomize the zoom, specify:</p>\n<pre>$ juliart animate --randomize-zoom --frames <span class=\"m\">5</span>\n</pre>\n<h5>Python</h5>\n<p>To generate from within Python, it's fairly straight forward:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">juliart.main</span> <span class=\"kn\">import</span> <span class=\"n\">JuliaSetAnimation</span>\n\n<span class=\"n\">juliaset</span> <span class=\"o\">=</span> <span class=\"n\">JuliaSetAnimation</span><span class=\"p\">(</span>\n    <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">res</span><span class=\"p\">,</span>\n    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"p\">,</span>\n    <span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">theme</span><span class=\"p\">,</span>\n    <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">rgb</span><span class=\"p\">,</span>\n    <span class=\"n\">cleanup</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">skip_cleanup</span><span class=\"p\">,</span>\n    <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">iters</span><span class=\"p\">,</span>\n    <span class=\"n\">zoom_max</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">zoom_max</span><span class=\"p\">,</span>\n    <span class=\"n\">zoom_min</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">zoom_min</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">juliaset</span><span class=\"o\">.</span><span class=\"n\">generate_animation</span><span class=\"p\">(</span>\n    <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">,</span>\n    <span class=\"n\">outfile</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">outfile</span><span class=\"p\">,</span>\n    <span class=\"n\">frames</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">frames</span><span class=\"p\">,</span>\n    <span class=\"n\">randomize_a</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">constant_a</span><span class=\"p\">,</span>\n    <span class=\"n\">randomize_b</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">constant_b</span><span class=\"p\">,</span>\n    <span class=\"n\">randomize_zoom</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">randomize_zoom</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Colors</h3>\n<p>The three choices for colors are random, pattern, or glow, or setting your\nown RGB value.</p>\n<h4>Random</h4>\n<p>Random is the default, and the image at the top of the README here is generated using\nthis setting. Take a look at more <a href=\"https://github.com/vsoch/juliart/tree/master/img/random\" rel=\"nofollow\">more random examples</a>.</p>\n<h4>Pattern</h4>\n<p>Pattern doesn't use a gradual gradient, but instead returns a hard boundary between\na color (and black).</p>\n<p><img alt=\"img/pattern/delicious-lizard-8995.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a42d28783a357988b3a0eac961126aa14d2ff548/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76736f63682f6a756c696172742f6d61737465722f696d672f7061747465726e2f64656c6963696f75732d6c697a6172642d383939352e706e67\"></p>\n<p>Take a look at more <a href=\"https://github.com/vsoch/juliart/tree/master/img/pattern\" rel=\"nofollow\">more pattern examples</a> here.</p>\n<h3>RGB</h3>\n<p>If you want complete control of the color, provide a comma separated list\nof RGB numbers as follows:</p>\n<pre>$ juliart generate --rgb <span class=\"m\">9</span>,35,155\n</pre>\n<p>Note that this will also work with the <code>--color pattern</code> flag.</p>\n<h4>Glow</h4>\n<p>Glow means a dark background (black) with a color gradient. Here is an example:</p>\n<p><img alt=\"img/glow/dinosaur-diablo-1189.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2eb281904da24562e2c938d849a757cbbd6ac99e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76736f63682f6a756c696172742f6d61737465722f696d672f676c6f772f64696e6f736175722d646961626c6f2d313138392e706e67\"></p>\n<p>And is generated as follows:</p>\n<pre>juliart generate --color glow\n</pre>\n<p>See <a href=\"https://github.com/vsoch/juliart/tree/master/img/glow\" rel=\"nofollow\">more glow examples</a>.</p>\n<p>If you choose glow, this will overwrite the choice of a theme (discussed next).</p>\n<h3>Themes</h3>\n<p>To get a little more variety in your choice of colors, you can select a theme!</p>\n<pre>juliart generate --theme halloween\njuliart generate --theme christmas\njuliart generate --theme hanukkah\njuliart generate --theme thanksgiving\njuliart generate --theme valentine\n\njuliart generate --theme easter\njuliart generate --theme fall\njuliart generate --theme spring\njuliart generate --theme summer\njuliart generate --theme winter\n</pre>\n<p>For any of the commands above, you can also add <code>--color pattern</code> to flip the background\nfrom the theme color to be black.</p>\n<pre>$ juliart generate --theme halloween --color pattern\n</pre>\n<p>Take a look at images in the <a href=\"https://github.com/vsoch/juliart/tree/master/img/pattern\" rel=\"nofollow\">themes folder</a>\nto get a sense of the color palettes.</p>\n<h3>Docker</h3>\n<p>You can run the pre-generated Docker container too! You'll need to bind a folder\non the host to save the image to.</p>\n<pre>$ mkdir data\n$ docker run -it -v <span class=\"nv\">$PWD</span>/data/:/data quay.io/vanessa/juliart generate --outfile /data/art.png\n</pre>\n<p>You can also build the image first if you like:</p>\n<pre>$ docker build -t quay.io/vanessa/juliart .\n</pre>\n<p>The images are provided on <a href=\"https://quay.io/repository/vanessa/juliart\" rel=\"nofollow\">quay.io/vanessa/juliart</a>.</p>\n<h2>Support</h2>\n<p>Do you have a question? Or want to suggest a feature to make it better?\nPlease <a href=\"https://www.github.com/vsoch/juliart\" rel=\"nofollow\">open an issue!</a></p>\n\n          </div>"}, "last_serial": 6372702, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e9b2da460cf428ff5a6b0dc0036a2f9a", "sha256": "39a391d12f730cfb772beda990cf6ae6b8cd3587b974ba60374ec1e33f88e6b9"}, "downloads": -1, "filename": "juliart-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "e9b2da460cf428ff5a6b0dc0036a2f9a", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 14605, "upload_time": "2019-12-25T19:07:44", "upload_time_iso_8601": "2019-12-25T19:07:44.389379Z", "url": "https://files.pythonhosted.org/packages/9b/4c/bf5c1054c0b9d320dd3950b7268ada5e1f544ff84522d1d38dd4f1327c3a/juliart-0.0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdb62458e128a09ec9418586c0f1950a", "sha256": "e096ab25cd7215947b726ae240b95d46228c6416ef4634eba7c349f4c943d6a2"}, "downloads": -1, "filename": "juliart-0.0.1.tar.gz", "has_sig": false, "md5_digest": "cdb62458e128a09ec9418586c0f1950a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 295884, "upload_time": "2019-12-25T19:07:46", "upload_time_iso_8601": "2019-12-25T19:07:46.835437Z", "url": "https://files.pythonhosted.org/packages/bb/28/001a16c432f484a2eadde2b613f5ae8fe3e568fbded383aaabe5227e702f/juliart-0.0.1.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "1a833b5b75158de465d17d6de4762f21", "sha256": "18ae67ed162a5d0b5332fb5d35c781434b64e74e4c1d226ad445d9bad11717bc"}, "downloads": -1, "filename": "juliart-0.0.11.tar.gz", "has_sig": false, "md5_digest": "1a833b5b75158de465d17d6de4762f21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18274, "upload_time": "2019-12-26T20:29:38", "upload_time_iso_8601": "2019-12-26T20:29:38.782427Z", "url": "https://files.pythonhosted.org/packages/86/96/3920de81afa952bbe1b6d34b72dd2b52c7e0c9809660fe19d44f358ff893/juliart-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "b256a2bfefe86bebd8aca97c712dd8d0", "sha256": "ec14299844a07baa9dfb29bb678eba749732f94f9403bdc8624eddc8fa19a65f"}, "downloads": -1, "filename": "juliart-0.0.12-py3.7.egg", "has_sig": false, "md5_digest": "b256a2bfefe86bebd8aca97c712dd8d0", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 25365, "upload_time": "2019-12-27T02:05:45", "upload_time_iso_8601": "2019-12-27T02:05:45.896530Z", "url": "https://files.pythonhosted.org/packages/8f/88/085975ca9ac00467bdd9d5d80042896fd009a87fdbfdcd5b1464e319091f/juliart-0.0.12-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "820135586c52b6b0ee0fdcde41837466", "sha256": "69c0b2e8b9a16f7b8d57f139c7403f57b27132fc3f971a3f50a72eb29f755e4d"}, "downloads": -1, "filename": "juliart-0.0.12.tar.gz", "has_sig": false, "md5_digest": "820135586c52b6b0ee0fdcde41837466", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25060, "upload_time": "2019-12-27T02:05:47", "upload_time_iso_8601": "2019-12-27T02:05:47.490877Z", "url": "https://files.pythonhosted.org/packages/c6/67/03474384d5205b9fe01a021a52914e7fd14c822e456a61fc9b55946f4112/juliart-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "2a12734edb0cefc0ae46cfbda779862a", "sha256": "8879366ff6a4f23e8ec099bffe2e94c2aad4ab3115e49e2445e14f3c230d6035"}, "downloads": -1, "filename": "juliart-0.0.13-py3.7.egg", "has_sig": false, "md5_digest": "2a12734edb0cefc0ae46cfbda779862a", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 89073, "upload_time": "2019-12-27T21:59:10", "upload_time_iso_8601": "2019-12-27T21:59:10.508492Z", "url": "https://files.pythonhosted.org/packages/85/17/939c056f56f173060e6765bd3b29445f2e14c98f889c5d78177249090c48/juliart-0.0.13-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c9dcb10bf85f37a12395b2f10990800", "sha256": "b9bbfe8debbd9dd2c14b7f7ce3b27f94c696a21ee82a0cbbe0c62c7659b7749a"}, "downloads": -1, "filename": "juliart-0.0.13.tar.gz", "has_sig": false, "md5_digest": "4c9dcb10bf85f37a12395b2f10990800", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87043, "upload_time": "2019-12-27T21:59:12", "upload_time_iso_8601": "2019-12-27T21:59:12.662184Z", "url": "https://files.pythonhosted.org/packages/df/ec/76d4e64a85977be5ead9e2ce086cb1829455143020fde43e9bc9beeea527/juliart-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "3f5c5b602b2b49d119fbbcb4dd22aa79", "sha256": "291017c2901a43f2fc3d2d8c0bf8d87d93543ee1363341c107aecc7705a152d0"}, "downloads": -1, "filename": "juliart-0.0.14-py3.7.egg", "has_sig": false, "md5_digest": "3f5c5b602b2b49d119fbbcb4dd22aa79", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 231653, "upload_time": "2019-12-28T21:23:40", "upload_time_iso_8601": "2019-12-28T21:23:40.247227Z", "url": "https://files.pythonhosted.org/packages/96/df/a00c06395617a5f596856b26f33a5ee237b8bdd838223d62e85ededf4496/juliart-0.0.14-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdd3ba5147b4d440200e278308ae60d2", "sha256": "dee164aee2ec53af9353e5b257457ba3415377b1c3ad7ec8b3b66e7a5b3b359b"}, "downloads": -1, "filename": "juliart-0.0.14.tar.gz", "has_sig": false, "md5_digest": "cdd3ba5147b4d440200e278308ae60d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 228985, "upload_time": "2019-12-28T21:23:42", "upload_time_iso_8601": "2019-12-28T21:23:42.418526Z", "url": "https://files.pythonhosted.org/packages/48/31/9d35e02feb3acde4eb2370d8d66a2b56d983bbb6129266c9a8691586e60f/juliart-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "2060715fdabc41898a8c0a338357ed6f", "sha256": "e6d6fa162ba565ce0c2dd426509685172794f57a34ab26028aba73a4e342af0d"}, "downloads": -1, "filename": "juliart-0.0.15-py3.7.egg", "has_sig": false, "md5_digest": "2060715fdabc41898a8c0a338357ed6f", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 231672, "upload_time": "2019-12-28T22:00:52", "upload_time_iso_8601": "2019-12-28T22:00:52.391855Z", "url": "https://files.pythonhosted.org/packages/1f/80/367461a3cceb61f3a356c7d64a11cc4ffd1b1c2a05291d0afaef5516192b/juliart-0.0.15-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d2e636ff360fbc7dbc4e5162b694a4e", "sha256": "02330c35bfdd5b192fb476e877d737bb166eb4692afb72e4fc391dc02bdb0f41"}, "downloads": -1, "filename": "juliart-0.0.15.tar.gz", "has_sig": false, "md5_digest": "6d2e636ff360fbc7dbc4e5162b694a4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 229046, "upload_time": "2019-12-28T22:00:54", "upload_time_iso_8601": "2019-12-28T22:00:54.970780Z", "url": "https://files.pythonhosted.org/packages/ee/25/b07610a2b861419650f1fc9202ba6780ef1baaf9a759fb9c6e49d9e283ce/juliart-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "7fd009b4c34d89d674bcf308d10a4868", "sha256": "203198af62ed583b96380f3800c69e1aac8638c7f1cd026eadcebdf9a27e4145"}, "downloads": -1, "filename": "juliart-0.0.16-py3.7.egg", "has_sig": false, "md5_digest": "7fd009b4c34d89d674bcf308d10a4868", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 231698, "upload_time": "2019-12-29T21:17:43", "upload_time_iso_8601": "2019-12-29T21:17:43.656843Z", "url": "https://files.pythonhosted.org/packages/3a/ce/ab014da5e957d9d7e2b647f69b3fa0babe786dca54409d79ecac47f676eb/juliart-0.0.16-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "86bf0df91d03580eee1d067292f1cab0", "sha256": "9a9c071ed9a8b65aeff80adabe1c61884b025af126a9997b7dacfd4f96dd10de"}, "downloads": -1, "filename": "juliart-0.0.16.tar.gz", "has_sig": false, "md5_digest": "86bf0df91d03580eee1d067292f1cab0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 229094, "upload_time": "2019-12-29T21:17:45", "upload_time_iso_8601": "2019-12-29T21:17:45.846082Z", "url": "https://files.pythonhosted.org/packages/06/e8/ca2c370ca7f75eb6d834dccd8be8b6a4d8a8dff789835a82408d19297452/juliart-0.0.16.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7fd009b4c34d89d674bcf308d10a4868", "sha256": "203198af62ed583b96380f3800c69e1aac8638c7f1cd026eadcebdf9a27e4145"}, "downloads": -1, "filename": "juliart-0.0.16-py3.7.egg", "has_sig": false, "md5_digest": "7fd009b4c34d89d674bcf308d10a4868", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 231698, "upload_time": "2019-12-29T21:17:43", "upload_time_iso_8601": "2019-12-29T21:17:43.656843Z", "url": "https://files.pythonhosted.org/packages/3a/ce/ab014da5e957d9d7e2b647f69b3fa0babe786dca54409d79ecac47f676eb/juliart-0.0.16-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "86bf0df91d03580eee1d067292f1cab0", "sha256": "9a9c071ed9a8b65aeff80adabe1c61884b025af126a9997b7dacfd4f96dd10de"}, "downloads": -1, "filename": "juliart-0.0.16.tar.gz", "has_sig": false, "md5_digest": "86bf0df91d03580eee1d067292f1cab0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 229094, "upload_time": "2019-12-29T21:17:45", "upload_time_iso_8601": "2019-12-29T21:17:45.846082Z", "url": "https://files.pythonhosted.org/packages/06/e8/ca2c370ca7f75eb6d834dccd8be8b6a4d8a8dff789835a82408d19297452/juliart-0.0.16.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:24 2020"}