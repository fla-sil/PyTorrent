{"info": {"author": "Olga Kholkovskaia", "author_email": "olga.kholkovskaia@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4"], "description": "# gpx-parser\n\nSimple parser for loading basic information about track points from .gpx files.\nInside the gpx tag parser only extracts trk, trkseg, and trkpt tags.\nAll other tags are ignored.\nResulting GPX structure is a container with track list. Each track is in it's turn a list of segments, and segment is\na list of track points, the leaf elements of the structure.\nGPX, GPXTrack, an GPXTrackSegment support most of the list methods.\n\n\n### Prerequisites\nPython 3.4 or higher\n\nxml or lxml\n\n\n### Examples of usage\n```python\nimport gpx_parser as parser\n\nwith open('file_name', 'r') as gpx_file:\n    gpx = parser.parse(gpx_file)\nprint(\"{} tracks loaded\".format(len(gpx)))\n```\n\n```\nfor track in gpx:\n    print('Track with {} segments and {} points'.\n          format(len(track), track.get_points_no()))\n    for segment in track:\n        print('Segment with %s points % len(segment))\n        for point in segment:\n            print(point)\n\n```\n##### GPX\n\n```\ngpx.tracks                   # list of tracks\ngpx.version                  # str or None\ngpx.creator                  # str or None\ngpx.points                   # list of all points from all tracks\n\nlen(gpx))                    # number of tracks in gpx\ngpx.get_points_no()          # total number of points in all segments of all tracks\ngpx[0]                       # 0th track, same as gpx.tracks[0]\ngpx[1:3]                     # = gpx.tracks[1:3]\ngpx.contains(track)          # = gpx.tracks.contains(track)\ngpx.append(track)            # = gpx.tracks.append(track)\ngpx.extend(tracks)           # = gpx.tracks.extend(tracks)\ngpx.remove(track)            # = gpx.tracks.remove(tracks)\ngpx.clone()                  #  returns deepcoopy of the object   \n\ngpx.to_xml()                 # str, point with xml tags\ngpx.length_2d()              # total 2d  distance of the track\ngpx.get_bounds()             # min and max latitude and logitude\ngpx.get_time_bounds()        # start and end time\ngpx.walk()                   # generator, yields (point, track_num, segment_num, point_num)\n\n```\n##### GPXTrack\n ```\n track.name                 # str or None\n track.number               # int or None\n track.segments             # list of all segments in the track\n track.points               # list of all points from all segments\n\n len(track)                 # number of segments in the track\n track[0]                   #\n track[::2]                 # shorcuts for\n track.contains(segment)    # track.segments\n track.append(segment)      #\n track.extend(segmengs)     #\n track.remove(segment)      #\n\n\n track.to_xml()             #\n track.length_2d()          # same as for gpx\n track.get_bounds()         #\n track.get_time_bounds()    #\n track.get_points_no()      #\n track.clone()              #\n\n track.get_duration()      # float, duration of track in seconds\n track.remove_empty()      # removes empty segments from the track\n\n```\n##### GPXTrackSegment\n\n```\n seg.points               # list of points in the segment\n\n len(seg)                 # \n seg[0]                   #\n seg[::2]                 # shortcuts for\n seg.contains(segment)    # seg.points\n seg.append(segment)      #\n seg.extend(segmengs)     #\n seg.remove(segment)      #\n\n\n seg.to_xml()             #\n seg.length_2d()          # same as for gpx\n seg.get_bounds()         #\n seg.get_time_bounds()    #\n seg.get_points_no()      #\n seg.clone()              # \n\n seg.get_duration()       # float, duration of track in seconds\n seg.remove_empty()       # removes empty segments from the track\n\n```\n ##### GPXTrackPoint\n ```\n point.latitude         \n point.longitude        \n point.time             \n\n point.to_xml()         \n\n point.distance_2d(other_point)          # distance in meters\n point.time_difference(other_point)      # time in seconds, or None, if one of the points doesn't have time attribute.\n point.speed_between(other_point)        # speed, i m/s, or None, if one of the points doesn't have time attribute.\n```\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/kholkolg/gpx_parser/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kholkolg/gpx_parser", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gpx-parser", "package_url": "https://pypi.org/project/gpx-parser/", "platform": "", "project_url": "https://pypi.org/project/gpx-parser/", "project_urls": {"Download": "https://github.com/kholkolg/gpx_parser/", "Homepage": "https://github.com/kholkolg/gpx_parser"}, "release_url": "https://pypi.org/project/gpx-parser/0.0.4/", "requires_dist": ["typing (==3.6.2)"], "requires_python": "", "summary": "Simple parser for gpx tracks, segments, and points with latitude, longitude, and time.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            # gpx-parser<br><br>Simple parser for loading basic information about track points from .gpx files.<br>Inside the gpx tag parser only extracts trk, trkseg, and trkpt tags.<br>All other tags are ignored.<br>Resulting GPX structure is a container with track list. Each track is in it's turn a list of segments, and segment is<br>a list of track points, the leaf elements of the structure.<br>GPX, GPXTrack, an GPXTrackSegment support most of the list methods.<br><br><br>### Prerequisites<br>Python 3.4 or higher<br><br>xml or lxml<br><br><br>### Examples of usage<br>```python<br>import gpx_parser as parser<br><br>with open('file_name', 'r') as gpx_file:<br>    gpx = parser.parse(gpx_file)<br>print(\"{} tracks loaded\".format(len(gpx)))<br>```<br><br>```<br>for track in gpx:<br>    print('Track with {} segments and {} points'.<br>          format(len(track), track.get_points_no()))<br>    for segment in track:<br>        print('Segment with %s points % len(segment))<br>        for point in segment:<br>            print(point)<br><br>```<br>##### GPX<br><br>```<br>gpx.tracks                   # list of tracks<br>gpx.version                  # str or None<br>gpx.creator                  # str or None<br>gpx.points                   # list of all points from all tracks<br><br>len(gpx))                    # number of tracks in gpx<br>gpx.get_points_no()          # total number of points in all segments of all tracks<br>gpx[0]                       # 0th track, same as gpx.tracks[0]<br>gpx[1:3]                     # = gpx.tracks[1:3]<br>gpx.contains(track)          # = gpx.tracks.contains(track)<br>gpx.append(track)            # = gpx.tracks.append(track)<br>gpx.extend(tracks)           # = gpx.tracks.extend(tracks)<br>gpx.remove(track)            # = gpx.tracks.remove(tracks)<br>gpx.clone()                  #  returns deepcoopy of the object   <br><br>gpx.to_xml()                 # str, point with xml tags<br>gpx.length_2d()              # total 2d  distance of the track<br>gpx.get_bounds()             # min and max latitude and logitude<br>gpx.get_time_bounds()        # start and end time<br>gpx.walk()                   # generator, yields (point, track_num, segment_num, point_num)<br><br>```<br>##### GPXTrack<br> ```<br> track.name                 # str or None<br> track.number               # int or None<br> track.segments             # list of all segments in the track<br> track.points               # list of all points from all segments<br><br> len(track)                 # number of segments in the track<br> track[0]                   #<br> track[::2]                 # shorcuts for<br> track.contains(segment)    # track.segments<br> track.append(segment)      #<br> track.extend(segmengs)     #<br> track.remove(segment)      #<br><br><br> track.to_xml()             #<br> track.length_2d()          # same as for gpx<br> track.get_bounds()         #<br> track.get_time_bounds()    #<br> track.get_points_no()      #<br> track.clone()              #<br><br> track.get_duration()      # float, duration of track in seconds<br> track.remove_empty()      # removes empty segments from the track<br><br>```<br>##### GPXTrackSegment<br><br>```<br> seg.points               # list of points in the segment<br><br> len(seg)                 # <br> seg[0]                   #<br> seg[::2]                 # shortcuts for<br> seg.contains(segment)    # seg.points<br> seg.append(segment)      #<br> seg.extend(segmengs)     #<br> seg.remove(segment)      #<br><br><br> seg.to_xml()             #<br> seg.length_2d()          # same as for gpx<br> seg.get_bounds()         #<br> seg.get_time_bounds()    #<br> seg.get_points_no()      #<br> seg.clone()              # <br><br> seg.get_duration()       # float, duration of track in seconds<br> seg.remove_empty()       # removes empty segments from the track<br><br>```<br> ##### GPXTrackPoint<br> ```<br> point.latitude         <br> point.longitude        <br> point.time             <br><br> point.to_xml()         <br><br> point.distance_2d(other_point)          # distance in meters<br> point.time_difference(other_point)      # time in seconds, or None, if one of the points doesn't have time attribute.<br> point.speed_between(other_point)        # speed, i m/s, or None, if one of the points doesn't have time attribute.<br>```<br><br>\n          </div>"}, "last_serial": 4100857, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "5b0534dba395d41759a48c3c9ee836bf", "sha256": "087e0fdce735427015d68416de091f23e5bdd4d8965301032690bf61786244db"}, "downloads": -1, "filename": "gpx_parser-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5b0534dba395d41759a48c3c9ee836bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12228, "upload_time": "2018-07-25T10:22:17", "upload_time_iso_8601": "2018-07-25T10:22:17.935894Z", "url": "https://files.pythonhosted.org/packages/08/62/0506447da1475c4045587d27efbb2e755f0d7c011d6e45fc85e2151fe056/gpx_parser-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce6a041d7e6224faed374df423817088", "sha256": "31329dba0bfca32d22e05268cd09829ab03cb4525bb357e8e18ed92d42ff3af2"}, "downloads": -1, "filename": "gpx-parser-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ce6a041d7e6224faed374df423817088", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8795, "upload_time": "2018-07-25T10:22:19", "upload_time_iso_8601": "2018-07-25T10:22:19.362302Z", "url": "https://files.pythonhosted.org/packages/ad/ba/22620cb0c019d9252eea800dc20cd3ade25accb32c45a43f2868368be07a/gpx-parser-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "bdb7155c80c65b15f1acec5d913aafd4", "sha256": "dc308431a1820e1f27a483b9606ab0982c62f0e9af942d86a410dee260f9f54b"}, "downloads": -1, "filename": "gpx_parser-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bdb7155c80c65b15f1acec5d913aafd4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12427, "upload_time": "2018-07-25T14:43:09", "upload_time_iso_8601": "2018-07-25T14:43:09.623360Z", "url": "https://files.pythonhosted.org/packages/45/01/33230e8b15c217544492be2b663f1799f5c2927ab451e1f90ceaf74cad4d/gpx_parser-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff55cdae78893b2d19b265f5c18cdb91", "sha256": "498a5b53a08044140aebe8dba7c4de848fb399f95a0afe33400e33688092ab71"}, "downloads": -1, "filename": "gpx-parser-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ff55cdae78893b2d19b265f5c18cdb91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8509, "upload_time": "2018-07-25T14:43:10", "upload_time_iso_8601": "2018-07-25T14:43:10.672139Z", "url": "https://files.pythonhosted.org/packages/6e/22/dcd2407cf67058fb78a12b2d80dd65a1feaa82cbf49dd837a83b56ea762a/gpx-parser-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d227fa55ccb710ad006d2693fcae2009", "sha256": "ba13e23a0cd023a4d14163b7a4d18d7db10942588402b138633b9f20a0eee4ca"}, "downloads": -1, "filename": "gpx_parser-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d227fa55ccb710ad006d2693fcae2009", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12037, "upload_time": "2018-07-25T14:58:34", "upload_time_iso_8601": "2018-07-25T14:58:34.715743Z", "url": "https://files.pythonhosted.org/packages/83/f0/673a1a587bdc95c8cffa129fecfb441a99bca97ceb91e53f80787e7ad308/gpx_parser-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c7213fe9d561684391ded7c3ec35920", "sha256": "6b99884df696cc86a21b92ad87994a21bfb890734680c3db4ce152571e23f0bc"}, "downloads": -1, "filename": "gpx-parser-0.0.4.tar.gz", "has_sig": false, "md5_digest": "8c7213fe9d561684391ded7c3ec35920", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8415, "upload_time": "2018-07-25T14:58:35", "upload_time_iso_8601": "2018-07-25T14:58:35.837483Z", "url": "https://files.pythonhosted.org/packages/ff/38/f7c21cf5af886a2ede4ee197e5b50fec1829e7f71fcb4cfb23705b85268f/gpx-parser-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d227fa55ccb710ad006d2693fcae2009", "sha256": "ba13e23a0cd023a4d14163b7a4d18d7db10942588402b138633b9f20a0eee4ca"}, "downloads": -1, "filename": "gpx_parser-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d227fa55ccb710ad006d2693fcae2009", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12037, "upload_time": "2018-07-25T14:58:34", "upload_time_iso_8601": "2018-07-25T14:58:34.715743Z", "url": "https://files.pythonhosted.org/packages/83/f0/673a1a587bdc95c8cffa129fecfb441a99bca97ceb91e53f80787e7ad308/gpx_parser-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c7213fe9d561684391ded7c3ec35920", "sha256": "6b99884df696cc86a21b92ad87994a21bfb890734680c3db4ce152571e23f0bc"}, "downloads": -1, "filename": "gpx-parser-0.0.4.tar.gz", "has_sig": false, "md5_digest": "8c7213fe9d561684391ded7c3ec35920", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8415, "upload_time": "2018-07-25T14:58:35", "upload_time_iso_8601": "2018-07-25T14:58:35.837483Z", "url": "https://files.pythonhosted.org/packages/ff/38/f7c21cf5af886a2ede4ee197e5b50fec1829e7f71fcb4cfb23705b85268f/gpx-parser-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:06 2020"}