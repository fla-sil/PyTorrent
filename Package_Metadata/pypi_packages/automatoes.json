{"info": {"author": "Flavio Garcia", "author_email": "piraz@candango.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "# Candango Automat-o-es\n\nAutomatoes is a [Let's Encrypt](https://letsencrypt.org)/[ACME](https://github.com/ietf-wg-acme/acme/)\nclient for advanced users and developers. It is intended to be used by anyone\nbecause we don't care if you're a robot, a processes or a person.\n\nWe will keep the `manuale` command to provide manual workflow designed by the\noriginal project and to be a direct replacement from\n[ManuaLE](https://github.com/veeti/manuale).\n\n## Why?\n\nBacause Let's Encrypt's point is to be to be automatic and seamless and ManuaLE\nwas great but it was designed to be manual.\n\nAutomatoes will add automatic workflows and features to the users also keep\nmaintaining bug fixes, refactor tasks.\n\nManuaLe was archived but it's way to do things is awesome.\n\n## Features\n\n* Simple interface with no hoops to jump through. Keys and certificate signing\nrequests are automatically generated: no more cryptic OpenSSL one-liners.\n(However, you do need to know what to do with generated certificates and keys\nyourself!)\n\n* Support for DNS & HTTP validation. No need to figure out how to serve\nchallenge files from a live domain.\n\n* Obviously, runs without root access. Use it from any machine you want, it\ndoesn't care. Internet connection recommended.\n\n* Awful, undiscoverable name.\n\n* And finally, if the `openssl` binary is your spirit animal after all, you can\nstill bring your own keys and/or CSR's. Everybody wins.\n\n## Installation\n\nPython 3.5 or above is required.\n\n### Using your package manager\n\n* TO DO\n\n* Package maintainers wanted: your package here?\n\n\n### Using pip\n\nYou can install the package from\n[PyPI](https://pypi.python.org/pypi/automatoes) using the `pip` tool. To do \nso, run `pip3 install automatoes`.\n\nIf you're not using Windows or OS X pip may need to compile some of the\ndependencies. In this case, you need a compiler and development headers for\nPython, OpenSSL and libffi installed.\n\nOn Debian-based distributions, these will typically be\n`gcc python3-dev libssl-dev libffi-dev`, and on RPM-based distributions\n`gcc python3-devel openssl-devel libffi-devel`.\n\n### From the git repository\n\n    git clone https://github.com/candango/automatoes ~/.automatoes\n    cd ~/.automatoes\n    python3 -m venv env\n    env/bin/python setup.py install\n    ln -s env/bin/manuale ~/.bin/\n\n(Assuming you have a `~/.bin/` directory in your `$PATH`).\n\n## Quick start\n\nRegister an account (once):\n\n    $ manuale register me@example.com\n\nAuthorize one or more domains:\n\n    $ manuale authorize example.com\n    DNS verification required. Make sure these records are in place:\n      _acme-challenge.example.com. IN TXT \"(some random gibberish)\"\n    Press Enter to continue.\n    ...\n    1 domain(s) authorized. Let's Encrypt!\n\nGet your certificate:\n\n    $ manuale issue --output certs/ example.com\n    ...\n    Certificate issued.\n\n    Expires: 2016-06-01\n     SHA256: (more random gibberish)\n\n    Wrote key to certs/example.com.pem\n    Wrote certificate to certs/example.com.crt\n    Wrote certificate with intermediate to certs/example.com.chain.crt\n    Wrote intermediate certificate to certs/example.com.intermediate.crt\n\nSet yourself a reminder for renewal!\n\n## Usage\n\nYou need to create an account once. To do so, call `manuale register [email]`.\nThis will create a new account key for you. Follow the registration\ninstructions.\n\nOnce that's done, you'll have your account saved in `account.json` in the\ncurrent directory. You'll need this to do anything useful. Oh, and it contains\nyour private key, so keep it safe and secure.\n\n`manuale` expects the account file to be in your working directory by default,\nso you'll probably want to make a specific directory to do all your certificate\nstuff in. Likewise, created certificates get saved in the current path by\ndefault.\n\nNext up, verify the domains you want a certificate for with\n`manuale authorize [domain]`. This will show you the DNS records you need to\ncreate and wait for you to do it. For example, you might do it for\n`example.com` and `www.example.com`.\n\nOnce that's done, you can finally get down to business.\nRun `manuale issue example.com www.example.com` to get your certificate.\nIt'll save the key, certificate and certificate with intermediate to the\nworking directory.\n\nThere's plenty of documentation inside each command. Run `manuale -h` for a\nlist of commands and `manuale [command] -h` for details.\n\n## Something different from ManuaLE?\n\nYes and no. Mostly yes, in the background.\n\nAutomatoes provides a manuale command replacement and a new automatoes command\nthat will be added in the future.\n\nThe manuale command will interface ACME V2 only as V1 is reaching\n[End Of Life](https://community.letsencrypt.org/t/end-of-life-plan-for-acmev1/88430).\n\nThe account file structure from ManuaLE is maintained, no change here.\nFor Let's Encrypt servers need to change the url from V1 api to V2 api that is\nbeing covered by [#30](https://github.com/candango/automatoes/issues/30). After\nthat you don't need even to register an ACME V2 account.\n\nACME V2 works with an \n[order workflow](https://tools.ietf.org/html/rfc8555#section-7.1) that must be\nfulfilled. Automatoes will mimic orders in a file structure locally for better\ncontrol.\n\nThe manuale command will handle orders following the original project workflow\nwith minimal changes.\n\nThe automatoes command will be order based, let's talk about that when\nreleased.\n\nHere is what happens in the background(manuale replacement):\n\n> `manuale authorize domain.com other.domain.com`\n> 1. /acme/new-order is called and order file is stored locally at\n> working_directory/orders/<sha256sum(domain.com other.domain.com)>/order.json\n> 1. /acme/authz/challenge1 and /acme/authz/challenge2 are called and stored at\n> working_directory/orders/<sha256sum(domain.com other.domain.com)>\n> 1. the file name for challenges will be <domain>_challenge.json\n> 1. you fulfill all challenges either by dns or http, dns is default.\n> Just saying... you know the drill right? Same as before.\n> 1. manuale the Let's Encrypt! message and you can issue the certificate\n\n* If any challenge fails we delete the order file as the order will be set as\ninvalid in the server. Invalid orders are considered fulfilled and not pending,\nwe can discard them.\n* If you hit Ctrl+c, the order will start from the server state as we can\ncontinue to process from the local file stored. Even challenges will be\nmaintained, in a case when one challenge is validated and 2 are pending, if\na Ctrl+c was hit, were recognize that in the next attempt.\n* If you call issue and there is an existent invalid order file than we delete\nthe order and a new one is created.\n\n> `manuale issue domain.com other.domain.com`\n\n> 1. /acme/order/<order_id>/finalize is called with the pem generated\n> or the one provided by you\n> 1. /acme/cert/<cert_id> is called and we place keys like we use to do before\n> 1. we're done!\n\n* If you try to issue certificates for a domain sequence and an oder is pending\nor invalid, automatoes will ask you to run authorize before.\n\nAfter authorizing a domain sequence you need run issue with the same domain\nsequence because:\n\n 1. The order file is stored at\n working_directory/orders/<sha256sum(domain.com other.domain.com)>\n if we change the domain sequence a new order file will be created at\n working_directory/orders/<sha256sum(other.domain.com domain.com)>\n 2. The acme V2 order finalize call also requires something like this as\n described at\n [rfc8555 section-7.4](https://tools.ietf.org/html/rfc8555#section-7.4):\n\n>  A request to finalize an order will result in an error if the CA is\n   unwilling to issue a certificate corresponding to the submitted CSR.\n   For example:\n>\n>   *  **If the CSR and order identifiers differ** <--- TALKING ABOUT THIS\n>\n>   *  If the account is not authorized for the identifiers indicated in the CSR\n>\n>   *  If the CSR requests extensions that the CA is not willing to include\n\nTrying to keeping thing as [KISS](https://www.acronymfinder.com/KISS.html) as\npossible we can complicate things later. Now we need ACME V2.\n\nTo create a certificate for a domain sequence authorized by a previous order\njust:\n\n 1. call authorize again. Chances are that no challenge will be needed but it\n depends on the ACME V2 server implementation.\n 1. fulfill challenge(s) if needed\n 1. call issue with same domain sequence authorize\n 1. we're done!\n\nIn another words, a domain sequence defines the order identifier locally.\n\nThe sha256sum command from coreutils can be used if you have a bash script\nto monitor `manuale` execution:\n\n```\n> echo \"domain.com other.domain.com\" | sha256sum\n83ccaf9441b1abea98837e2f4c2fc18122c0e9ee4e39dd1995387f4d5d495b69  -\n\n> echo \"other.domain.com domain.com\" | sha256sum\nd0bd2c4957537572ffb7150a7dc89e61f44f9ab603b75be481118e37ec5a6163  -\n```\n\nStoring meta files at working_directory/orders directory will let you\nautomate things better. Don't delete those files let Automatoes handle them for\nyou.\n\nHere are more some features we can explore with this local file structure in\nthe future:\n\n - control and advise about limits, as Acme V2 enforce limits for opened orders\n per account\n - list orders and status (for pending orders)\n - create partial authorizations (that will be on automatoes command not in\n manuale)\n - SDK?\n - Can you imagine more? Create a feature request for us.\n\nAlso the manuale command can be called with a verbose parameter(-v) right now\nproviding more output.\n\n## See also\n\n* [Best practices for server configuration](https://wiki.mozilla.org/Security/Server_Side_TLS)\n* [Configuration generator for common servers](https://mozilla.github.io/server-side-tls/ssl-config-generator/)\n* [Test your server](https://www.ssllabs.com/ssltest/)\n* [Other clients](https://community.letsencrypt.org/t/list-of-client-implementations/2103)\n\n## Support\n\nAutomatoes is one of\n[Candango Open Source Group](http://www.candango.org/projects/)\ninitiatives. Available under the\n[Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html).\n\nThis web site and all documentation is licensed under\n[Creative Commons 3.0](http://creativecommons.org/licenses/by/3.0/).\n\nCopyright \u00a9 2019-2020 Flavio Garcia\n\nCopyright \u00a9 2016-2017 Veeti Paananen under MIT License", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/candango/automatoes", "keywords": "", "license": "Apache License V2.0", "maintainer": "", "maintainer_email": "", "name": "automatoes", "package_url": "https://pypi.org/project/automatoes/", "platform": "", "project_url": "https://pypi.org/project/automatoes/", "project_urls": {"Homepage": "https://github.com/candango/automatoes"}, "release_url": "https://pypi.org/project/automatoes/0.9.1/", "requires_dist": null, "requires_python": "", "summary": "Let's Encrypt/ACME V2 client replacement for Manuale. Manual or automated your choice.", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Candango Automat-o-es</h1>\n<p>Automatoes is a <a href=\"https://letsencrypt.org\" rel=\"nofollow\">Let's Encrypt</a>/<a href=\"https://github.com/ietf-wg-acme/acme/\" rel=\"nofollow\">ACME</a>\nclient for advanced users and developers. It is intended to be used by anyone\nbecause we don't care if you're a robot, a processes or a person.</p>\n<p>We will keep the <code>manuale</code> command to provide manual workflow designed by the\noriginal project and to be a direct replacement from\n<a href=\"https://github.com/veeti/manuale\" rel=\"nofollow\">ManuaLE</a>.</p>\n<h2>Why?</h2>\n<p>Bacause Let's Encrypt's point is to be to be automatic and seamless and ManuaLE\nwas great but it was designed to be manual.</p>\n<p>Automatoes will add automatic workflows and features to the users also keep\nmaintaining bug fixes, refactor tasks.</p>\n<p>ManuaLe was archived but it's way to do things is awesome.</p>\n<h2>Features</h2>\n<ul>\n<li>\n<p>Simple interface with no hoops to jump through. Keys and certificate signing\nrequests are automatically generated: no more cryptic OpenSSL one-liners.\n(However, you do need to know what to do with generated certificates and keys\nyourself!)</p>\n</li>\n<li>\n<p>Support for DNS &amp; HTTP validation. No need to figure out how to serve\nchallenge files from a live domain.</p>\n</li>\n<li>\n<p>Obviously, runs without root access. Use it from any machine you want, it\ndoesn't care. Internet connection recommended.</p>\n</li>\n<li>\n<p>Awful, undiscoverable name.</p>\n</li>\n<li>\n<p>And finally, if the <code>openssl</code> binary is your spirit animal after all, you can\nstill bring your own keys and/or CSR's. Everybody wins.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Python 3.5 or above is required.</p>\n<h3>Using your package manager</h3>\n<ul>\n<li>\n<p>TO DO</p>\n</li>\n<li>\n<p>Package maintainers wanted: your package here?</p>\n</li>\n</ul>\n<h3>Using pip</h3>\n<p>You can install the package from\n<a href=\"https://pypi.python.org/pypi/automatoes\" rel=\"nofollow\">PyPI</a> using the <code>pip</code> tool. To do\nso, run <code>pip3 install automatoes</code>.</p>\n<p>If you're not using Windows or OS X pip may need to compile some of the\ndependencies. In this case, you need a compiler and development headers for\nPython, OpenSSL and libffi installed.</p>\n<p>On Debian-based distributions, these will typically be\n<code>gcc python3-dev libssl-dev libffi-dev</code>, and on RPM-based distributions\n<code>gcc python3-devel openssl-devel libffi-devel</code>.</p>\n<h3>From the git repository</h3>\n<pre><code>git clone https://github.com/candango/automatoes ~/.automatoes\ncd ~/.automatoes\npython3 -m venv env\nenv/bin/python setup.py install\nln -s env/bin/manuale ~/.bin/\n</code></pre>\n<p>(Assuming you have a <code>~/.bin/</code> directory in your <code>$PATH</code>).</p>\n<h2>Quick start</h2>\n<p>Register an account (once):</p>\n<pre><code>$ manuale register me@example.com\n</code></pre>\n<p>Authorize one or more domains:</p>\n<pre><code>$ manuale authorize example.com\nDNS verification required. Make sure these records are in place:\n  _acme-challenge.example.com. IN TXT \"(some random gibberish)\"\nPress Enter to continue.\n...\n1 domain(s) authorized. Let's Encrypt!\n</code></pre>\n<p>Get your certificate:</p>\n<pre><code>$ manuale issue --output certs/ example.com\n...\nCertificate issued.\n\nExpires: 2016-06-01\n SHA256: (more random gibberish)\n\nWrote key to certs/example.com.pem\nWrote certificate to certs/example.com.crt\nWrote certificate with intermediate to certs/example.com.chain.crt\nWrote intermediate certificate to certs/example.com.intermediate.crt\n</code></pre>\n<p>Set yourself a reminder for renewal!</p>\n<h2>Usage</h2>\n<p>You need to create an account once. To do so, call <code>manuale register [email]</code>.\nThis will create a new account key for you. Follow the registration\ninstructions.</p>\n<p>Once that's done, you'll have your account saved in <code>account.json</code> in the\ncurrent directory. You'll need this to do anything useful. Oh, and it contains\nyour private key, so keep it safe and secure.</p>\n<p><code>manuale</code> expects the account file to be in your working directory by default,\nso you'll probably want to make a specific directory to do all your certificate\nstuff in. Likewise, created certificates get saved in the current path by\ndefault.</p>\n<p>Next up, verify the domains you want a certificate for with\n<code>manuale authorize [domain]</code>. This will show you the DNS records you need to\ncreate and wait for you to do it. For example, you might do it for\n<code>example.com</code> and <code>www.example.com</code>.</p>\n<p>Once that's done, you can finally get down to business.\nRun <code>manuale issue example.com www.example.com</code> to get your certificate.\nIt'll save the key, certificate and certificate with intermediate to the\nworking directory.</p>\n<p>There's plenty of documentation inside each command. Run <code>manuale -h</code> for a\nlist of commands and <code>manuale [command] -h</code> for details.</p>\n<h2>Something different from ManuaLE?</h2>\n<p>Yes and no. Mostly yes, in the background.</p>\n<p>Automatoes provides a manuale command replacement and a new automatoes command\nthat will be added in the future.</p>\n<p>The manuale command will interface ACME V2 only as V1 is reaching\n<a href=\"https://community.letsencrypt.org/t/end-of-life-plan-for-acmev1/88430\" rel=\"nofollow\">End Of Life</a>.</p>\n<p>The account file structure from ManuaLE is maintained, no change here.\nFor Let's Encrypt servers need to change the url from V1 api to V2 api that is\nbeing covered by <a href=\"https://github.com/candango/automatoes/issues/30\" rel=\"nofollow\">#30</a>. After\nthat you don't need even to register an ACME V2 account.</p>\n<p>ACME V2 works with an\n<a href=\"https://tools.ietf.org/html/rfc8555#section-7.1\" rel=\"nofollow\">order workflow</a> that must be\nfulfilled. Automatoes will mimic orders in a file structure locally for better\ncontrol.</p>\n<p>The manuale command will handle orders following the original project workflow\nwith minimal changes.</p>\n<p>The automatoes command will be order based, let's talk about that when\nreleased.</p>\n<p>Here is what happens in the background(manuale replacement):</p>\n<blockquote>\n<p><code>manuale authorize domain.com other.domain.com</code></p>\n<ol>\n<li>/acme/new-order is called and order file is stored locally at\nworking_directory/orders/&lt;sha256sum(domain.com other.domain.com)&gt;/order.json</li>\n<li>/acme/authz/challenge1 and /acme/authz/challenge2 are called and stored at\nworking_directory/orders/&lt;sha256sum(domain.com other.domain.com)&gt;</li>\n<li>the file name for challenges will be &lt;domain&gt;_challenge.json</li>\n<li>you fulfill all challenges either by dns or http, dns is default.\nJust saying... you know the drill right? Same as before.</li>\n<li>manuale the Let's Encrypt! message and you can issue the certificate</li>\n</ol>\n</blockquote>\n<ul>\n<li>If any challenge fails we delete the order file as the order will be set as\ninvalid in the server. Invalid orders are considered fulfilled and not pending,\nwe can discard them.</li>\n<li>If you hit Ctrl+c, the order will start from the server state as we can\ncontinue to process from the local file stored. Even challenges will be\nmaintained, in a case when one challenge is validated and 2 are pending, if\na Ctrl+c was hit, were recognize that in the next attempt.</li>\n<li>If you call issue and there is an existent invalid order file than we delete\nthe order and a new one is created.</li>\n</ul>\n<blockquote>\n<p><code>manuale issue domain.com other.domain.com</code></p>\n</blockquote>\n<blockquote>\n<ol>\n<li>/acme/order/&lt;order_id&gt;/finalize is called with the pem generated\nor the one provided by you</li>\n<li>/acme/cert/&lt;cert_id&gt; is called and we place keys like we use to do before</li>\n<li>we're done!</li>\n</ol>\n</blockquote>\n<ul>\n<li>If you try to issue certificates for a domain sequence and an oder is pending\nor invalid, automatoes will ask you to run authorize before.</li>\n</ul>\n<p>After authorizing a domain sequence you need run issue with the same domain\nsequence because:</p>\n<ol>\n<li>The order file is stored at\nworking_directory/orders/&lt;sha256sum(domain.com other.domain.com)&gt;\nif we change the domain sequence a new order file will be created at\nworking_directory/orders/&lt;sha256sum(other.domain.com domain.com)&gt;</li>\n<li>The acme V2 order finalize call also requires something like this as\ndescribed at\n<a href=\"https://tools.ietf.org/html/rfc8555#section-7.4\" rel=\"nofollow\">rfc8555 section-7.4</a>:</li>\n</ol>\n<blockquote>\n<p>A request to finalize an order will result in an error if the CA is\nunwilling to issue a certificate corresponding to the submitted CSR.\nFor example:</p>\n<ul>\n<li>\n<p><strong>If the CSR and order identifiers differ</strong> &lt;--- TALKING ABOUT THIS</p>\n</li>\n<li>\n<p>If the account is not authorized for the identifiers indicated in the CSR</p>\n</li>\n<li>\n<p>If the CSR requests extensions that the CA is not willing to include</p>\n</li>\n</ul>\n</blockquote>\n<p>Trying to keeping thing as <a href=\"https://www.acronymfinder.com/KISS.html\" rel=\"nofollow\">KISS</a> as\npossible we can complicate things later. Now we need ACME V2.</p>\n<p>To create a certificate for a domain sequence authorized by a previous order\njust:</p>\n<ol>\n<li>call authorize again. Chances are that no challenge will be needed but it\ndepends on the ACME V2 server implementation.</li>\n<li>fulfill challenge(s) if needed</li>\n<li>call issue with same domain sequence authorize</li>\n<li>we're done!</li>\n</ol>\n<p>In another words, a domain sequence defines the order identifier locally.</p>\n<p>The sha256sum command from coreutils can be used if you have a bash script\nto monitor <code>manuale</code> execution:</p>\n<pre><code>&gt; echo \"domain.com other.domain.com\" | sha256sum\n83ccaf9441b1abea98837e2f4c2fc18122c0e9ee4e39dd1995387f4d5d495b69  -\n\n&gt; echo \"other.domain.com domain.com\" | sha256sum\nd0bd2c4957537572ffb7150a7dc89e61f44f9ab603b75be481118e37ec5a6163  -\n</code></pre>\n<p>Storing meta files at working_directory/orders directory will let you\nautomate things better. Don't delete those files let Automatoes handle them for\nyou.</p>\n<p>Here are more some features we can explore with this local file structure in\nthe future:</p>\n<ul>\n<li>control and advise about limits, as Acme V2 enforce limits for opened orders\nper account</li>\n<li>list orders and status (for pending orders)</li>\n<li>create partial authorizations (that will be on automatoes command not in\nmanuale)</li>\n<li>SDK?</li>\n<li>Can you imagine more? Create a feature request for us.</li>\n</ul>\n<p>Also the manuale command can be called with a verbose parameter(-v) right now\nproviding more output.</p>\n<h2>See also</h2>\n<ul>\n<li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\" rel=\"nofollow\">Best practices for server configuration</a></li>\n<li><a href=\"https://mozilla.github.io/server-side-tls/ssl-config-generator/\" rel=\"nofollow\">Configuration generator for common servers</a></li>\n<li><a href=\"https://www.ssllabs.com/ssltest/\" rel=\"nofollow\">Test your server</a></li>\n<li><a href=\"https://community.letsencrypt.org/t/list-of-client-implementations/2103\" rel=\"nofollow\">Other clients</a></li>\n</ul>\n<h2>Support</h2>\n<p>Automatoes is one of\n<a href=\"http://www.candango.org/projects/\" rel=\"nofollow\">Candango Open Source Group</a>\ninitiatives. Available under the\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\">Apache License, Version 2.0</a>.</p>\n<p>This web site and all documentation is licensed under\n<a href=\"http://creativecommons.org/licenses/by/3.0/\" rel=\"nofollow\">Creative Commons 3.0</a>.</p>\n<p>Copyright \u00a9 2019-2020 Flavio Garcia</p>\n<p>Copyright \u00a9 2016-2017 Veeti Paananen under MIT License</p>\n\n          </div>"}, "last_serial": 6724688, "releases": {"0.0.0.1": [{"comment_text": "", "digests": {"md5": "48d035815ddb040e684465c4488ce807", "sha256": "eda03c1215c74f9f7632c06d1ffefe8a24c9181c43ebd8a330d8c586ccce70cd"}, "downloads": -1, "filename": "automatoes-0.0.0.1.tar.gz", "has_sig": false, "md5_digest": "48d035815ddb040e684465c4488ce807", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22235, "upload_time": "2019-10-09T14:37:19", "upload_time_iso_8601": "2019-10-09T14:37:19.583993Z", "url": "https://files.pythonhosted.org/packages/eb/b7/f07edda2d43f6946d064eb12ec07cc349fdf9da5a648bdc0abf1c492a13b/automatoes-0.0.0.1.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "ee6cea599d8f961d2a1550a3df785016", "sha256": "187f088b94d4d93584df31f914dd324715e4d72088c227f7244785b465600efb"}, "downloads": -1, "filename": "automatoes-0.9.0.tar.gz", "has_sig": false, "md5_digest": "ee6cea599d8f961d2a1550a3df785016", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29622, "upload_time": "2020-01-21T08:10:13", "upload_time_iso_8601": "2020-01-21T08:10:13.189374Z", "url": "https://files.pythonhosted.org/packages/b0/ed/fa8c32da7ed223894ef4d83ea861097c65217cb09de2ad2dc98220759e92/automatoes-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "c7142ca07f05bff6302d7f61614503b0", "sha256": "7eefcf7f8cf604c3e7f7d2ff40526ab1ced0d3a36ad71413a74aaa1a72c0c0cb"}, "downloads": -1, "filename": "automatoes-0.9.1.tar.gz", "has_sig": false, "md5_digest": "c7142ca07f05bff6302d7f61614503b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29955, "upload_time": "2020-02-29T15:16:41", "upload_time_iso_8601": "2020-02-29T15:16:41.925911Z", "url": "https://files.pythonhosted.org/packages/8b/89/e9284601d7bd2ed971358c8a5911094d897ab6fada2b2737d57bd575e0a2/automatoes-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7142ca07f05bff6302d7f61614503b0", "sha256": "7eefcf7f8cf604c3e7f7d2ff40526ab1ced0d3a36ad71413a74aaa1a72c0c0cb"}, "downloads": -1, "filename": "automatoes-0.9.1.tar.gz", "has_sig": false, "md5_digest": "c7142ca07f05bff6302d7f61614503b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29955, "upload_time": "2020-02-29T15:16:41", "upload_time_iso_8601": "2020-02-29T15:16:41.925911Z", "url": "https://files.pythonhosted.org/packages/8b/89/e9284601d7bd2ed971358c8a5911094d897ab6fada2b2737d57bd575e0a2/automatoes-0.9.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:13 2020"}