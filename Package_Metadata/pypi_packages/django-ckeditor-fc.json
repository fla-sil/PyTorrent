{"info": {"author": "Future Colors (orginal author:Shaun Sephton)", "author_email": "shaunsephton@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Django CKEditor\n================\n**Django admin CKEditor integration.**\n\nProvides a ``RichTextField`` and ``CKEditorWidget`` utilizing CKEditor with image upload and browsing support included.\n\n.. contents:: Contents\n    :depth: 5\n\nInstallation\n------------\n\n#. Install or add django-ckeditor to your python path.\n\n#. Add ``ckeditor`` to your INSTALLED_APPS setting.\n\n#. Copy the ``media/ckeditor`` directory into any directory within your media root. You can override the location in your settings (see below).\n\n#. Add a CKEDITOR_UPLOAD_PATH setting to the project's ``settings.py`` file. This setting specifies an absolute path to your ckeditor media upload directory. Make sure you have write permissions for the path, i.e.::\n\n    CKEDITOR_UPLOAD_PATH = \"/home/media/media.lawrence.com/uploads\"\n\n#. Add ckeditor url include to the project's ``urls.py`` file::\n    \n    (r'^ckeditor/', include('ckeditor.urls')),    \n\n#. Optionally, set the CKEDITOR_RESTRICT_BY_USER setting to ``True`` in the project's ``settings.py`` file (default ``False``). This restricts access to uploaded images to the uploading user (e.g. each user only sees and uploads their own images). Superusers can still see all images. **NOTE**: This restriction is only enforced within the CKEditor media browser. \n\n#. Optionally, add a CKEDITOR_UPLOAD_PREFIX setting to the project's ``settings.py`` file. This setting specifies a URL prefix to media uploaded through ckeditor, i.e.::\n\n       CKEDITOR_UPLOAD_PREFIX = \"http://media.lawrence.com/media/ckuploads/\n       \n   (If CKEDITOR_UPLOAD_PREFIX is not provided, the media URL will fall back to MEDIA_URL with the difference of MEDIA_ROOT and the uploaded resource's full path and filename appended.)\n\n#. Optionally, add CKEDITOR_CONFIGS setting to the project's ``settings.py`` file. This specifies sets of CKEditor settings that are passed to CKEditor (see CKEditor's `Setting Configurations <http://docs.cksource.com/CKEditor_3.x/Developers_Guide/Setting_Configurations>`_), i.e.::\n\n       CKEDITOR_CONFIGS = {\n           'awesome_ckeditor': {\n               'toolbar': 'Basic',\n           },\n       }\n   \n   The name of the settings can be referenced when instantiating a RichTextField::\n\n       content = RichTextField(config_name='awesome_ckeditor')\n\n   The name of the settings can be referenced when instantiating a CKEditorWidget::\n\n       widget = CKEditorWidget(config_name='awesome_ckeditor')\n   \n   By specifying a set named ``default`` you'll be applying its settings to all RichTextField and CKEditorWidget objects for which ``config_name`` has not been explicitly defined ::\n       \n       CKEDITOR_CONFIGS = {\n           'default': {\n               'toolbar': 'Full',\n               'height': 300,\n               'width': 300,\n           },\n       }\n\nUsage\n-----\n\nField\n~~~~~\nThe quickest way to add rich text editing capabilities to your models is to use the included ``RichTextField`` model field type. A CKEditor widget is rendered as the form field but in all other regards the field behaves as the standard Django ``TextField``. For example::\n\n    from django.db import models\n    from ckeditor.fields import RichTextField\n\n    class Post(models.Model):\n        content = RichTextField()\n\n\nWidget\n~~~~~~\nAlernatively you can use the included ``CKEditorWidget`` as the widget for a formfield. For example::\n\n    from django import forms\n    from django.contrib import admin\n    from ckeditor.widgets import CKEditorWidget\n\n    from post.models import Post\n\n    class PostAdminForm(forms.ModelForm):\n        content = forms.CharField(widget=CKEditorWidget())\n        class Meta:\n            model = Post\n\n    class PostAdmin(admin.ModelAdmin):\n        form = PostAdminForm\n    \n    admin.site.register(Post, PostAdmin)\n\n**NOTE**: If you're using custom views remember to include ckeditor.js in your form's media either through ``{{ form.media }}`` or through a ``<script>`` tag. Admin will do this for you automatically. See `Django's Form Media docs <http://docs.djangoproject.com/en/dev/topics/forms/media/>`_ for more info.\nAUTHORS\n=======\n\nCreated By\n----------\n#. `shaunsephton <http://github.com/shaunsephton>`_\n\nContributors\n------------\n#. `buchuki <http://github.com/buchuki>`_\n#. `chr15m <http://github.com/chr15m>`_\n#. `jeffh <https://github.com/jeffh>`_\n#. `loop0 <http://github.com/loop0>`_\n\nChangelog\n=========\n\n0.0.9\n-----\n\n#. Added ability to configure CKeditor through a CKEDITOR_CONFIGS settings. Thanks `jeffh <https://github.com/jeffh>`_ for the input.\n\n0.0.8\n-----\n\n#. Removed buggy url include check.\n\n0.0.7\n-----\n#. Egg package corrected to exclude testing admin.py and models.py.\n\n0.0.6\n-----\n#. Enforce correct configuration.\n#. Changed upload behavior to separate files into directories by upload date. Thanks `loop0 <http://github.com/loop0>`_ .\n#. Added ability to limit user access to uploaded content (see the CKEDITOR_RESTRICT_BY_USER setting). Thanks `chr15m <http://github.com/chr15m>`_ for the input.\n#. Added initial set of much needed tests.\n#. General cleanup, light refactor.\n\n0.0.5\n-----\n#. csrf_exempt backwards compatability. Thanks `chr15m <http://github.com/chr15m>`_ .\n\n0.0.4\n-----\n#. Include resources, sorry about that.\n\n0.0.3\n-----\n#. More robust PIL import. Thanks `buchuki <http://github.com/buchuki>`_ .\n#. Better CKEDITOR_MEDIA_PREFIX setting error.\n\n0.0.2\n-----\n#. Included README.rst in manifest.\n\n0.0.1\n-----\n#. Added CKEDITOR_UPLOAD_PREFIX setting. Thanks `chr15m <http://github.com/chr15m>`_ for the input.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/futurecolors/django-ckeditor", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-ckeditor-fc", "package_url": "https://pypi.org/project/django-ckeditor-fc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-ckeditor-fc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/futurecolors/django-ckeditor"}, "release_url": "https://pypi.org/project/django-ckeditor-fc/1.1/", "requires_dist": null, "requires_python": null, "summary": "Django admin CKEditor integration.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-ckeditor\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Django CKEditor</a></h2>\n<p><strong>Django admin CKEditor integration.</strong></p>\n<p>Provides a <tt>RichTextField</tt> and <tt>CKEditorWidget</tt> utilizing CKEditor with image upload and browsing support included.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#django-ckeditor\" id=\"id16\" rel=\"nofollow\">Django CKEditor</a><ul>\n<li><a href=\"#installation\" id=\"id17\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id18\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#field\" id=\"id19\" rel=\"nofollow\">Field</a></li>\n<li><a href=\"#widget\" id=\"id20\" rel=\"nofollow\">Widget</a></li>\n</ul>\n</li>\n<li><a href=\"#created-by\" id=\"id21\" rel=\"nofollow\">Created By</a></li>\n<li><a href=\"#contributors\" id=\"id22\" rel=\"nofollow\">Contributors</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id23\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id24\" rel=\"nofollow\">0.0.9</a></li>\n<li><a href=\"#id3\" id=\"id25\" rel=\"nofollow\">0.0.8</a></li>\n<li><a href=\"#id4\" id=\"id26\" rel=\"nofollow\">0.0.7</a></li>\n<li><a href=\"#id5\" id=\"id27\" rel=\"nofollow\">0.0.6</a></li>\n<li><a href=\"#id8\" id=\"id28\" rel=\"nofollow\">0.0.5</a></li>\n<li><a href=\"#id10\" id=\"id29\" rel=\"nofollow\">0.0.4</a></li>\n<li><a href=\"#id11\" id=\"id30\" rel=\"nofollow\">0.0.3</a></li>\n<li><a href=\"#id13\" id=\"id31\" rel=\"nofollow\">0.0.2</a></li>\n<li><a href=\"#id14\" id=\"id32\" rel=\"nofollow\">0.0.1</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Installation</a></h3>\n<ol>\n<li><p>Install or add django-ckeditor to your python path.</p>\n</li>\n<li><p>Add <tt>ckeditor</tt> to your INSTALLED_APPS setting.</p>\n</li>\n<li><p>Copy the <tt>media/ckeditor</tt> directory into any directory within your media root. You can override the location in your settings (see below).</p>\n</li>\n<li><p>Add a CKEDITOR_UPLOAD_PATH setting to the project\u2019s <tt>settings.py</tt> file. This setting specifies an absolute path to your ckeditor media upload directory. Make sure you have write permissions for the path, i.e.:</p>\n<pre>CKEDITOR_UPLOAD_PATH = \"/home/media/media.lawrence.com/uploads\"\n</pre>\n</li>\n<li><p>Add ckeditor url include to the project\u2019s <tt>urls.py</tt> file:</p>\n<pre>(r'^ckeditor/', include('ckeditor.urls')),\n</pre>\n</li>\n<li><p>Optionally, set the CKEDITOR_RESTRICT_BY_USER setting to <tt>True</tt> in the project\u2019s <tt>settings.py</tt> file (default <tt>False</tt>). This restricts access to uploaded images to the uploading user (e.g. each user only sees and uploads their own images). Superusers can still see all images. <strong>NOTE</strong>: This restriction is only enforced within the CKEditor media browser.</p>\n</li>\n<li><p>Optionally, add a CKEDITOR_UPLOAD_PREFIX setting to the project\u2019s <tt>settings.py</tt> file. This setting specifies a URL prefix to media uploaded through ckeditor, i.e.:</p>\n<pre>CKEDITOR_UPLOAD_PREFIX = \"http://media.lawrence.com/media/ckuploads/\n</pre>\n<p>(If CKEDITOR_UPLOAD_PREFIX is not provided, the media URL will fall back to MEDIA_URL with the difference of MEDIA_ROOT and the uploaded resource\u2019s full path and filename appended.)</p>\n</li>\n<li><p>Optionally, add CKEDITOR_CONFIGS setting to the project\u2019s <tt>settings.py</tt> file. This specifies sets of CKEditor settings that are passed to CKEditor (see CKEditor\u2019s <a href=\"http://docs.cksource.com/CKEditor_3.x/Developers_Guide/Setting_Configurations\" rel=\"nofollow\">Setting Configurations</a>), i.e.:</p>\n<pre>CKEDITOR_CONFIGS = {\n    'awesome_ckeditor': {\n        'toolbar': 'Basic',\n    },\n}\n</pre>\n<p>The name of the settings can be referenced when instantiating a RichTextField:</p>\n<pre>content = RichTextField(config_name='awesome_ckeditor')\n</pre>\n<p>The name of the settings can be referenced when instantiating a CKEditorWidget:</p>\n<pre>widget = CKEditorWidget(config_name='awesome_ckeditor')\n</pre>\n<p>By specifying a set named <tt>default</tt> you\u2019ll be applying its settings to all RichTextField and CKEditorWidget objects for which <tt>config_name</tt> has not been explicitly defined</p>\n<pre>CKEDITOR_CONFIGS = {\n    'default': {\n        'toolbar': 'Full',\n        'height': 300,\n        'width': 300,\n    },\n}\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Usage</a></h3>\n<div id=\"field\">\n<h4><a href=\"#id19\" rel=\"nofollow\">Field</a></h4>\n<p>The quickest way to add rich text editing capabilities to your models is to use the included <tt>RichTextField</tt> model field type. A CKEditor widget is rendered as the form field but in all other regards the field behaves as the standard Django <tt>TextField</tt>. For example:</p>\n<pre>from django.db import models\nfrom ckeditor.fields import RichTextField\n\nclass Post(models.Model):\n    content = RichTextField()\n</pre>\n</div>\n<div id=\"widget\">\n<h4><a href=\"#id20\" rel=\"nofollow\">Widget</a></h4>\n<p>Alernatively you can use the included <tt>CKEditorWidget</tt> as the widget for a formfield. For example:</p>\n<pre>from django import forms\nfrom django.contrib import admin\nfrom ckeditor.widgets import CKEditorWidget\n\nfrom post.models import Post\n\nclass PostAdminForm(forms.ModelForm):\n    content = forms.CharField(widget=CKEditorWidget())\n    class Meta:\n        model = Post\n\nclass PostAdmin(admin.ModelAdmin):\n    form = PostAdminForm\n\nadmin.site.register(Post, PostAdmin)\n</pre>\n<p><strong>NOTE</strong>: If you\u2019re using custom views remember to include ckeditor.js in your form\u2019s media either through <tt>{{ form.media }}</tt> or through a <tt>&lt;script&gt;</tt> tag. Admin will do this for you automatically. See <a href=\"http://docs.djangoproject.com/en/dev/topics/forms/media/\" rel=\"nofollow\">Django\u2019s Form Media docs</a> for more info.\nAUTHORS\n=======</p>\n</div>\n</div>\n<div id=\"created-by\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Created By</a></h3>\n<ol>\n<li><a href=\"http://github.com/shaunsephton\" rel=\"nofollow\">shaunsephton</a></li>\n</ol>\n</div>\n<div id=\"contributors\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Contributors</a></h3>\n<ol>\n<li><a href=\"http://github.com/buchuki\" rel=\"nofollow\">buchuki</a></li>\n<li><a href=\"http://github.com/chr15m\" rel=\"nofollow\">chr15m</a></li>\n<li><a href=\"https://github.com/jeffh\" rel=\"nofollow\">jeffh</a></li>\n<li><a href=\"http://github.com/loop0\" rel=\"nofollow\">loop0</a></li>\n</ol>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id23\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id24\" rel=\"nofollow\">0.0.9</a></h3>\n<ol>\n<li>Added ability to configure CKeditor through a CKEDITOR_CONFIGS settings. Thanks <a href=\"https://github.com/jeffh\" rel=\"nofollow\">jeffh</a> for the input.</li>\n</ol>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id25\" rel=\"nofollow\">0.0.8</a></h3>\n<ol>\n<li>Removed buggy url include check.</li>\n</ol>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id26\" rel=\"nofollow\">0.0.7</a></h3>\n<ol>\n<li>Egg package corrected to exclude testing admin.py and models.py.</li>\n</ol>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id27\" rel=\"nofollow\">0.0.6</a></h3>\n<ol>\n<li>Enforce correct configuration.</li>\n<li>Changed upload behavior to separate files into directories by upload date. Thanks <a href=\"http://github.com/loop0\" rel=\"nofollow\">loop0</a> .</li>\n<li>Added ability to limit user access to uploaded content (see the CKEDITOR_RESTRICT_BY_USER setting). Thanks <a href=\"http://github.com/chr15m\" rel=\"nofollow\">chr15m</a> for the input.</li>\n<li>Added initial set of much needed tests.</li>\n<li>General cleanup, light refactor.</li>\n</ol>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id28\" rel=\"nofollow\">0.0.5</a></h3>\n<ol>\n<li>csrf_exempt backwards compatability. Thanks <a href=\"http://github.com/chr15m\" rel=\"nofollow\">chr15m</a> .</li>\n</ol>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id29\" rel=\"nofollow\">0.0.4</a></h3>\n<ol>\n<li>Include resources, sorry about that.</li>\n</ol>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id30\" rel=\"nofollow\">0.0.3</a></h3>\n<ol>\n<li>More robust PIL import. Thanks <a href=\"http://github.com/buchuki\" rel=\"nofollow\">buchuki</a> .</li>\n<li>Better CKEDITOR_MEDIA_PREFIX setting error.</li>\n</ol>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id31\" rel=\"nofollow\">0.0.2</a></h3>\n<ol>\n<li>Included README.rst in manifest.</li>\n</ol>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id32\" rel=\"nofollow\">0.0.1</a></h3>\n<ol>\n<li>Added CKEDITOR_UPLOAD_PREFIX setting. Thanks <a href=\"http://github.com/chr15m\" rel=\"nofollow\">chr15m</a> for the input.</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 827981, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2fbf23afa9d7ad06835c4593fed1fbb1", "sha256": "6ebc7c43ff6a2df5bf0b9456f8c62e0355a56c84fca8e5f5dc6d45a2750c2746"}, "downloads": -1, "filename": "django-ckeditor-fc-1.0.zip", "has_sig": false, "md5_digest": "2fbf23afa9d7ad06835c4593fed1fbb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3345016, "upload_time": "2013-05-08T15:05:17", "upload_time_iso_8601": "2013-05-08T15:05:17.067550Z", "url": "https://files.pythonhosted.org/packages/66/ec/f066ab428c6e5e5f4c9903aec403a2ebaa5572dc169ad8abf7b41f8b5415/django-ckeditor-fc-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "b31c8466bd362c04302e41775e3c82ab", "sha256": "841c82b23898a5885e25ca5deffc2332522e540311ada52efaac5eda99691da1"}, "downloads": -1, "filename": "django-ckeditor-fc-1.1.tar.gz", "has_sig": false, "md5_digest": "b31c8466bd362c04302e41775e3c82ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2695786, "upload_time": "2013-07-30T10:38:38", "upload_time_iso_8601": "2013-07-30T10:38:38.220280Z", "url": "https://files.pythonhosted.org/packages/ee/b0/30e8ff42c2be651d977bda2ce604c06ba4772738c62f6436fb3997ec46a6/django-ckeditor-fc-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b31c8466bd362c04302e41775e3c82ab", "sha256": "841c82b23898a5885e25ca5deffc2332522e540311ada52efaac5eda99691da1"}, "downloads": -1, "filename": "django-ckeditor-fc-1.1.tar.gz", "has_sig": false, "md5_digest": "b31c8466bd362c04302e41775e3c82ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2695786, "upload_time": "2013-07-30T10:38:38", "upload_time_iso_8601": "2013-07-30T10:38:38.220280Z", "url": "https://files.pythonhosted.org/packages/ee/b0/30e8ff42c2be651d977bda2ce604c06ba4772738c62f6436fb3997ec46a6/django-ckeditor-fc-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:08 2020"}