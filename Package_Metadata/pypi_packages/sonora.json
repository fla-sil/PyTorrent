{"info": {"author": "Alex Stapleton", "author_email": "alexs@prol.etari.at", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "\n[![CircleCI](https://circleci.com/gh/public/sonora.svg?style=svg)](https://circleci.com/gh/public/sonora)\n\n# Sonora\n\nSonora is a Python-first implementation of gRPC-Web built on top of standard Python APIs like WSGI and ASGI for easy integration.\n\n## Why?\n\nRegular gRPC has a lot going for it but is awkward to use in some environments. gRPC-Web makes it easy to get gRPC working in\nenvironments that need HTTP/1.1 but the Google gRPC and gRPC-Web implementations don't like to coexist with your normal Python\nframeworks like Django or Flask. Unlike [grpc/grpc](https://github.com/grpc/grpc) Sonora doesn't care what ioloop you use, this\nmeans you can run it along side any other Python web framework in the same application!\n\nThis makes it easy to\n\n- Add gRPC to an existing code base.\n- Run gRPC behind AWS and other HTTP/1.1 load balancers.\n- Integrate with other ASGI frameworks like Channels, Starlette, Quart etc.\n- Integrate with other WSGI frameworks like Flask, Django etc.\n\nThe name Sonora was inspired by the [Sonoran gopher snake](https://en.wikipedia.org/wiki/Pituophis_catenifer_affinis).\n\n![Snek](https://i.imgur.com/eqhQnlY.jpg)\n\n## How?\n\nSonora is designed to require minimal changes to an existing Python application.\n\n### Server\n\n#### WSGI\n\nNormally a WSGI application ([such as your favourite Django app](https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/)) will have a file somewhere named `wsgi.py`\nthat gets your application setup and ready for your web server of choice.\n\n```python\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()\n```\n\nin it somewhere so that your application server (uWSGI, Gunicorn etc) knows where your code is.\n\nTo add Sonora's gRPC-Web capabilities to an application like the above all you need to do to enable it is this.\n\n```python\nfrom django.core.wsgi import get_wsgi_application\nfrom sonora.wsgi import grpcWSGI\nimport helloworld_pb2_grpc\n\n# Setup your frameworks default WSGI app.\n\napplication = get_wsgi_application()\n\n# Install the Sonora grpcWSGI middleware so we can handle requests to gRPC's paths.\n\napplication = grpcWSGI(application)\n\n# Attach your gRPC server implementation.\n\nhelloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), application)\n```\n\nAnd now you have a combined HTTP/1.1 Django + gRPC application all under a single port.\n\n#### ASGI\n\nFor ASGI things are mostly the same, the example shown here integrates with [Quart](https://github.com/pgjones/quart) but it's more or less the same for other frameworks.\n\n```python\nfrom sonora.asgi import grpcASGI\nfrom quart import Quart\nimport helloworld_pb2_grpc\n\n# Setup your frameworks default ASGI app.\n\napplication = Quart(__name__)\n\n# Install the Sonora grpcASGI middleware so we can handle requests to gRPC's paths.\n\napplication = grpcASGI(application)\n\n# Attach your gRPC server implementation.\n\nhelloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), application)\n```\n\nAnd now you have a combined HTTP/1.1 Quart + gRPC application all under a single port.\n\n### Clients\n\nSonora currently only provides a sync API implementation based on requests.\n\n#### Requests (Sync)\n\nInstead of using gRPCs native `grpc.insecure_channel` API we have `sonora.client.insecure_web_channel` instead which provides a [requests](https://github.com/kennethreitz/requests) powered client channel to a gRPC-Web server. e.g.\n\n```python\n    import sonora.client\n\n    with sonora.client.insecure_web_channel(\n        f\"http://localhost:8080\"\n    ) as channel:\n        stub = helloworld_pb2_grpc.GreeterStub(channel)\n        print(stub.SayHello(\"world\"))\n```\n\n#### Aiohttp (Async)\n\nInstead of `grpc.aio.insecure_channel` we have `sonora.aio.insecure_web_channel` which provides an [aiohttp](https://docs.aiohttp.org/) based asyncio compatible client for gRPC-Web. e.g.\n\n```python\n    import sonora.aio\n\n    async with sonora.aio.insecure_web_channel(\n        f\"http://localhost:8080\"\n    ) as channel:\n        stub = helloworld_pb2_grpc.GreeterStub(channel)\n        print(await stub.SayHello(\"world\"))\n\n        stub = helloworld_pb2_grpc.GreeterStub(channel)\n        async for response in stub.SayHelloSlowly(\"world\"):\n            print(response)\n```\n\nThis also supports the new streaming response API introduced by [gRFC L58](https://github.com/grpc/proposal/pull/155)\n\n```python\n    import sonora.aio\n\n    async with sonora.aio.insecure_web_channel(\n        f\"http://localhost:8080\"\n    ) as channel:\n        stub = helloworld_pb2_grpc.GreeterStub(channel)\n        async with stub.SayHelloSlowly(\"world\") as response:\n            print(await response.read())\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/public/sonora", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "sonora", "package_url": "https://pypi.org/project/sonora/", "platform": "", "project_url": "https://pypi.org/project/sonora/", "project_urls": {"Homepage": "https://github.com/public/sonora"}, "release_url": "https://pypi.org/project/sonora/0.1.0/", "requires_dist": ["grpcio", "requests", "aiohttp", "async-timeout", "grpcio-tools ; extra == 'tests'", "pytest ; extra == 'tests'", "pytest-mockservers ; extra == 'tests'", "pytest-asyncio ; extra == 'tests'", "pytest-benchmark ; extra == 'tests'", "requests ; extra == 'tests'", "bjoern ; extra == 'tests'", "uvicorn ; extra == 'tests'", "aiohttp[speedups] ; extra == 'tests'"], "requires_python": ">=3.7.0", "summary": "gRPC-Web for Python", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/public/sonora\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7d15e8d620c9cbe0b842fe46590c9a7aa63357b/68747470733a2f2f636972636c6563692e636f6d2f67682f7075626c69632f736f6e6f72612e7376673f7374796c653d737667\"></a></p>\n<h1>Sonora</h1>\n<p>Sonora is a Python-first implementation of gRPC-Web built on top of standard Python APIs like WSGI and ASGI for easy integration.</p>\n<h2>Why?</h2>\n<p>Regular gRPC has a lot going for it but is awkward to use in some environments. gRPC-Web makes it easy to get gRPC working in\nenvironments that need HTTP/1.1 but the Google gRPC and gRPC-Web implementations don't like to coexist with your normal Python\nframeworks like Django or Flask. Unlike <a href=\"https://github.com/grpc/grpc\" rel=\"nofollow\">grpc/grpc</a> Sonora doesn't care what ioloop you use, this\nmeans you can run it along side any other Python web framework in the same application!</p>\n<p>This makes it easy to</p>\n<ul>\n<li>Add gRPC to an existing code base.</li>\n<li>Run gRPC behind AWS and other HTTP/1.1 load balancers.</li>\n<li>Integrate with other ASGI frameworks like Channels, Starlette, Quart etc.</li>\n<li>Integrate with other WSGI frameworks like Flask, Django etc.</li>\n</ul>\n<p>The name Sonora was inspired by the <a href=\"https://en.wikipedia.org/wiki/Pituophis_catenifer_affinis\" rel=\"nofollow\">Sonoran gopher snake</a>.</p>\n<p><img alt=\"Snek\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8814215c79680252f6747bfad2586e0c20ed6869/68747470733a2f2f692e696d6775722e636f6d2f657168516e6c592e6a7067\"></p>\n<h2>How?</h2>\n<p>Sonora is designed to require minimal changes to an existing Python application.</p>\n<h3>Server</h3>\n<h4>WSGI</h4>\n<p>Normally a WSGI application (<a href=\"https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/\" rel=\"nofollow\">such as your favourite Django app</a>) will have a file somewhere named <code>wsgi.py</code>\nthat gets your application setup and ready for your web server of choice.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.wsgi</span> <span class=\"kn\">import</span> <span class=\"n\">get_wsgi_application</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">get_wsgi_application</span><span class=\"p\">()</span>\n</pre>\n<p>in it somewhere so that your application server (uWSGI, Gunicorn etc) knows where your code is.</p>\n<p>To add Sonora's gRPC-Web capabilities to an application like the above all you need to do to enable it is this.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.wsgi</span> <span class=\"kn\">import</span> <span class=\"n\">get_wsgi_application</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sonora.wsgi</span> <span class=\"kn\">import</span> <span class=\"n\">grpcWSGI</span>\n<span class=\"kn\">import</span> <span class=\"nn\">helloworld_pb2_grpc</span>\n\n<span class=\"c1\"># Setup your frameworks default WSGI app.</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">get_wsgi_application</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Install the Sonora grpcWSGI middleware so we can handle requests to gRPC's paths.</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">grpcWSGI</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Attach your gRPC server implementation.</span>\n\n<span class=\"n\">helloworld_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">add_GreeterServicer_to_server</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">(),</span> <span class=\"n\">application</span><span class=\"p\">)</span>\n</pre>\n<p>And now you have a combined HTTP/1.1 Django + gRPC application all under a single port.</p>\n<h4>ASGI</h4>\n<p>For ASGI things are mostly the same, the example shown here integrates with <a href=\"https://github.com/pgjones/quart\" rel=\"nofollow\">Quart</a> but it's more or less the same for other frameworks.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sonora.asgi</span> <span class=\"kn\">import</span> <span class=\"n\">grpcASGI</span>\n<span class=\"kn\">from</span> <span class=\"nn\">quart</span> <span class=\"kn\">import</span> <span class=\"n\">Quart</span>\n<span class=\"kn\">import</span> <span class=\"nn\">helloworld_pb2_grpc</span>\n\n<span class=\"c1\"># Setup your frameworks default ASGI app.</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">Quart</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Install the Sonora grpcASGI middleware so we can handle requests to gRPC's paths.</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">grpcASGI</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Attach your gRPC server implementation.</span>\n\n<span class=\"n\">helloworld_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">add_GreeterServicer_to_server</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">(),</span> <span class=\"n\">application</span><span class=\"p\">)</span>\n</pre>\n<p>And now you have a combined HTTP/1.1 Quart + gRPC application all under a single port.</p>\n<h3>Clients</h3>\n<p>Sonora currently only provides a sync API implementation based on requests.</p>\n<h4>Requests (Sync)</h4>\n<p>Instead of using gRPCs native <code>grpc.insecure_channel</code> API we have <code>sonora.client.insecure_web_channel</code> instead which provides a <a href=\"https://github.com/kennethreitz/requests\" rel=\"nofollow\">requests</a> powered client channel to a gRPC-Web server. e.g.</p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">sonora.client</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">sonora</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">insecure_web_channel</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">\"http://localhost:8080\"</span>\n    <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n        <span class=\"n\">stub</span> <span class=\"o\">=</span> <span class=\"n\">helloworld_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">GreeterStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">SayHello</span><span class=\"p\">(</span><span class=\"s2\">\"world\"</span><span class=\"p\">))</span>\n</pre>\n<h4>Aiohttp (Async)</h4>\n<p>Instead of <code>grpc.aio.insecure_channel</code> we have <code>sonora.aio.insecure_web_channel</code> which provides an <a href=\"https://docs.aiohttp.org/\" rel=\"nofollow\">aiohttp</a> based asyncio compatible client for gRPC-Web. e.g.</p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">sonora.aio</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">sonora</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">insecure_web_channel</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">\"http://localhost:8080\"</span>\n    <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n        <span class=\"n\">stub</span> <span class=\"o\">=</span> <span class=\"n\">helloworld_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">GreeterStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">SayHello</span><span class=\"p\">(</span><span class=\"s2\">\"world\"</span><span class=\"p\">))</span>\n\n        <span class=\"n\">stub</span> <span class=\"o\">=</span> <span class=\"n\">helloworld_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">GreeterStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">response</span> <span class=\"ow\">in</span> <span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">SayHelloSlowly</span><span class=\"p\">(</span><span class=\"s2\">\"world\"</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<p>This also supports the new streaming response API introduced by <a href=\"https://github.com/grpc/proposal/pull/155\" rel=\"nofollow\">gRFC L58</a></p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">sonora.aio</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">sonora</span><span class=\"o\">.</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">insecure_web_channel</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">\"http://localhost:8080\"</span>\n    <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n        <span class=\"n\">stub</span> <span class=\"o\">=</span> <span class=\"n\">helloworld_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">GreeterStub</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">stub</span><span class=\"o\">.</span><span class=\"n\">SayHelloSlowly</span><span class=\"p\">(</span><span class=\"s2\">\"world\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 6739420, "releases": {"0.0.4.dev1": [{"comment_text": "", "digests": {"md5": "05db22c24b8fc28a8dc7f0ee22d1c759", "sha256": "f0dc01ea6cde33c759b59c678e2128b268a972297355ae1626e8d875b38199be"}, "downloads": -1, "filename": "sonora-0.0.4.dev1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "05db22c24b8fc28a8dc7f0ee22d1c759", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 24118, "upload_time": "2019-11-03T12:58:19", "upload_time_iso_8601": "2019-11-03T12:58:19.642662Z", "url": "https://files.pythonhosted.org/packages/e1/b9/e451e6d700c2cf1b90296cf69017539eab26174daf78e7f0bcba21d54338/sonora-0.0.4.dev1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43c6c9550d5f9c3873eb962fe4be4014", "sha256": "ea3b1fe31b257e804189a88ac6fe13b4930e1e6da93be3f15c908f92e15b8d84"}, "downloads": -1, "filename": "sonora-0.0.4.dev1.tar.gz", "has_sig": false, "md5_digest": "43c6c9550d5f9c3873eb962fe4be4014", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 14990, "upload_time": "2019-11-03T12:58:22", "upload_time_iso_8601": "2019-11-03T12:58:22.159544Z", "url": "https://files.pythonhosted.org/packages/ff/8f/260ee8dded678403f2411b8a685ced7f2307a711729cb6fabf9fc3d43e19/sonora-0.0.4.dev1.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "1dcf67b248737ec88f9ef8adeddc7470", "sha256": "b97f6f871e030200f621fd356b26d554b10ce40fc2201a99d19c64a6e2355a91"}, "downloads": -1, "filename": "sonora-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1dcf67b248737ec88f9ef8adeddc7470", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 18914, "upload_time": "2019-12-01T18:21:37", "upload_time_iso_8601": "2019-12-01T18:21:37.943459Z", "url": "https://files.pythonhosted.org/packages/dc/96/1529cefd2e7612a229045be1cab18b096cce40ec05d99877a55877d6a42d/sonora-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "084296751833c77b3459209777865c87", "sha256": "e94aeefeb9628f5b917bda2d3f93ed265d35e3e952ef059f335e466c643533a9"}, "downloads": -1, "filename": "sonora-0.0.5.tar.gz", "has_sig": false, "md5_digest": "084296751833c77b3459209777865c87", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 17752, "upload_time": "2019-12-01T18:21:39", "upload_time_iso_8601": "2019-12-01T18:21:39.512863Z", "url": "https://files.pythonhosted.org/packages/bc/5b/47ca4967341130ea195e1be5df94b7e9841dfc334927f5b2c4a5c6d1df62/sonora-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "84ca1eee94342c032edf1e4a5f3f7ee4", "sha256": "09632972b48535766c4e1688914103d4023aebeaed03ab47069541c2f503860e"}, "downloads": -1, "filename": "sonora-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "84ca1eee94342c032edf1e4a5f3f7ee4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 21669, "upload_time": "2020-03-03T10:56:17", "upload_time_iso_8601": "2020-03-03T10:56:17.270431Z", "url": "https://files.pythonhosted.org/packages/1e/97/f9c44d8bfabff1af75dfbd81f03a20e5e603798dd8615ac7f309c48c5cf4/sonora-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "212ea5a059c709abd3d70e104cb72bf9", "sha256": "5e201e7cd337ecd3375c79095f7bf9b1f6127a63fe96d7f9f336ebf724721437"}, "downloads": -1, "filename": "sonora-0.1.0.tar.gz", "has_sig": false, "md5_digest": "212ea5a059c709abd3d70e104cb72bf9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 20213, "upload_time": "2020-03-03T10:56:18", "upload_time_iso_8601": "2020-03-03T10:56:18.709681Z", "url": "https://files.pythonhosted.org/packages/9f/05/35be8085f9f5269a8819d5135dd901d80f8e80ba79c4980959694d622954/sonora-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "84ca1eee94342c032edf1e4a5f3f7ee4", "sha256": "09632972b48535766c4e1688914103d4023aebeaed03ab47069541c2f503860e"}, "downloads": -1, "filename": "sonora-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "84ca1eee94342c032edf1e4a5f3f7ee4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 21669, "upload_time": "2020-03-03T10:56:17", "upload_time_iso_8601": "2020-03-03T10:56:17.270431Z", "url": "https://files.pythonhosted.org/packages/1e/97/f9c44d8bfabff1af75dfbd81f03a20e5e603798dd8615ac7f309c48c5cf4/sonora-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "212ea5a059c709abd3d70e104cb72bf9", "sha256": "5e201e7cd337ecd3375c79095f7bf9b1f6127a63fe96d7f9f336ebf724721437"}, "downloads": -1, "filename": "sonora-0.1.0.tar.gz", "has_sig": false, "md5_digest": "212ea5a059c709abd3d70e104cb72bf9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 20213, "upload_time": "2020-03-03T10:56:18", "upload_time_iso_8601": "2020-03-03T10:56:18.709681Z", "url": "https://files.pythonhosted.org/packages/9f/05/35be8085f9f5269a8819d5135dd901d80f8e80ba79c4980959694d622954/sonora-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:36 2020"}