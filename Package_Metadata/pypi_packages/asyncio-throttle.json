{"info": {"author": "Hanjun Kim", "author_email": "hallazzang@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# asyncio-throttle\n\n[![travis-ci](https://travis-ci.org/hallazzang/asyncio-throttle.svg?branch=master)](https://travis-ci.org/hallazzang/asyncio-throttle)\n[![pypi-version](https://badge.fury.io/py/asyncio-throttle.svg)](https://badge.fury.io/py/asyncio-throttle)\n\nSimple, easy-to-use throttler for asyncio.\n\n## Example\n\n```python\nimport time\nimport random\nimport asyncio\n\nfrom asyncio_throttle import Throttler\n\nasync def worker(no, throttler, n):\n    for _ in range(n):\n        await asyncio.sleep(random.random() * 2)\n\n        async with throttler:\n            print(time.time(), 'Worker #%d: Bang!' % no)\n\nasync def main():\n    throttler = Throttler(rate_limit=5)\n\n    tasks = [\n        loop.create_task(worker(no, throttler, 10))\n            for no in range(5)\n    ]\n    await asyncio.wait(tasks)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\nloop.close()\n```\n\nHere I limited work rate to 5/sec while there are 5 workers.\nAnd the result:\n\n```plain\n1508273760.3462772 Worker #2: Bang!\n1508273760.590009 Worker #3: Bang!\n1508273760.856431 Worker #0: Bang!\n1508273761.0110679 Worker #2: Bang!\n1508273761.086856 Worker #4: Bang!\n1508273761.350699 Worker #3: Bang!\n1508273761.5906 Worker #1: Bang!\n1508273761.8655958 Worker #4: Bang!\n1508273762.224158 Worker #0: Bang!\n1508273762.600234 Worker #2: Bang!\n1508273762.694332 Worker #2: Bang!\n1508273762.726774 Worker #0: Bang!\n1508273762.944273 Worker #4: Bang!\n```\n\n## Installation\n\n```bash\n$ pip install asyncio-throttle\n```\n\nIt requires Python 3.6 or later.\n\n## Usage\n\n`asyncio_throttle.Throttler` introduces simple APIs: `flush()` and\n`acquire()`. But you will not be interested in those because you can\njust use it within `with` statement and it looks nicer.\n\nFirst, create a throttler given desired rate limit. For example if you\nwant to limit rate to 500/min, you can make it as:\n\n```python\nfrom asyncio_throttle import Throttler\n\nthrottler = Throttler(rate_limit=500, period=60)\n```\n\nThen whenever you want to do some jobs which should have limited\nrate(e.g. sending request to server), Put it in `async with` statement:\n\n```python\nasync with throttler:\n    send_a_request()\n```\n\nIt's that easy. `asyncio_throttler` can be easily integrated with\n`aiohttp` too:\n\n```python\nasync def worker(throttler, session):\n    while True:\n        async with throttler:\n            async with session.get('http://example.com') as resp:\n                do_some_job_with(await resp.text())\n\n        await asyncio.sleep(0.05)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hallazzang/asyncio-throttle", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "asyncio-throttle", "package_url": "https://pypi.org/project/asyncio-throttle/", "platform": "any", "project_url": "https://pypi.org/project/asyncio-throttle/", "project_urls": {"Homepage": "https://github.com/hallazzang/asyncio-throttle"}, "release_url": "https://pypi.org/project/asyncio-throttle/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Simple, easy-to-use throttler for asyncio", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>asyncio-throttle</h1>\n<p><a href=\"https://travis-ci.org/hallazzang/asyncio-throttle\" rel=\"nofollow\"><img alt=\"travis-ci\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/639877e2711faab91458d3367ad12d0e3240e19d/68747470733a2f2f7472617669732d63692e6f72672f68616c6c617a7a616e672f6173796e63696f2d7468726f74746c652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/asyncio-throttle\" rel=\"nofollow\"><img alt=\"pypi-version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1ad41a1a0a0fadd113a840e6e44b7c8f4cb9181/68747470733a2f2f62616467652e667572792e696f2f70792f6173796e63696f2d7468726f74746c652e737667\"></a></p>\n<p>Simple, easy-to-use throttler for asyncio.</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">asyncio_throttle</span> <span class=\"kn\">import</span> <span class=\"n\">Throttler</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">worker</span><span class=\"p\">(</span><span class=\"n\">no</span><span class=\"p\">,</span> <span class=\"n\">throttler</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">throttler</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span> <span class=\"s1\">'Worker #</span><span class=\"si\">%d</span><span class=\"s1\">: Bang!'</span> <span class=\"o\">%</span> <span class=\"n\">no</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">throttler</span> <span class=\"o\">=</span> <span class=\"n\">Throttler</span><span class=\"p\">(</span><span class=\"n\">rate_limit</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"n\">no</span><span class=\"p\">,</span> <span class=\"n\">throttler</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">no</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">)</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Here I limited work rate to 5/sec while there are 5 workers.\nAnd the result:</p>\n<pre>1508273760.3462772 Worker #2: Bang!\n1508273760.590009 Worker #3: Bang!\n1508273760.856431 Worker #0: Bang!\n1508273761.0110679 Worker #2: Bang!\n1508273761.086856 Worker #4: Bang!\n1508273761.350699 Worker #3: Bang!\n1508273761.5906 Worker #1: Bang!\n1508273761.8655958 Worker #4: Bang!\n1508273762.224158 Worker #0: Bang!\n1508273762.600234 Worker #2: Bang!\n1508273762.694332 Worker #2: Bang!\n1508273762.726774 Worker #0: Bang!\n1508273762.944273 Worker #4: Bang!\n</pre>\n<h2>Installation</h2>\n<pre>$ pip install asyncio-throttle\n</pre>\n<p>It requires Python 3.6 or later.</p>\n<h2>Usage</h2>\n<p><code>asyncio_throttle.Throttler</code> introduces simple APIs: <code>flush()</code> and\n<code>acquire()</code>. But you will not be interested in those because you can\njust use it within <code>with</code> statement and it looks nicer.</p>\n<p>First, create a throttler given desired rate limit. For example if you\nwant to limit rate to 500/min, you can make it as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asyncio_throttle</span> <span class=\"kn\">import</span> <span class=\"n\">Throttler</span>\n\n<span class=\"n\">throttler</span> <span class=\"o\">=</span> <span class=\"n\">Throttler</span><span class=\"p\">(</span><span class=\"n\">rate_limit</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n</pre>\n<p>Then whenever you want to do some jobs which should have limited\nrate(e.g. sending request to server), Put it in <code>async with</code> statement:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">throttler</span><span class=\"p\">:</span>\n    <span class=\"n\">send_a_request</span><span class=\"p\">()</span>\n</pre>\n<p>It's that easy. <code>asyncio_throttler</code> can be easily integrated with\n<code>aiohttp</code> too:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">worker</span><span class=\"p\">(</span><span class=\"n\">throttler</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">throttler</span><span class=\"p\">:</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://example.com'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">resp</span><span class=\"p\">:</span>\n                <span class=\"n\">do_some_job_with</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">())</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6929066, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8061c9de537150ace1022a079a4c0c6a", "sha256": "e4f38ad72275c3518b4692f777cc5e7a3285d1623f937118818955fb04d309e4"}, "downloads": -1, "filename": "asyncio_throttle-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8061c9de537150ace1022a079a4c0c6a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3547, "upload_time": "2017-10-16T03:49:36", "upload_time_iso_8601": "2017-10-16T03:49:36.866309Z", "url": "https://files.pythonhosted.org/packages/ff/bf/c23c926ce0e01fc05723bea8ca48d233488a489634a4c4fb0b0766927420/asyncio_throttle-0.0.1-py2.py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "70ec3a630f78c753b2271aae519ef71e", "sha256": "7678e6192a34dda2e3fba78b55520556473ae709f7867e602a9ab17358a0d582"}, "downloads": -1, "filename": "asyncio_throttle-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "70ec3a630f78c753b2271aae519ef71e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3549, "upload_time": "2017-10-16T05:08:43", "upload_time_iso_8601": "2017-10-16T05:08:43.573483Z", "url": "https://files.pythonhosted.org/packages/ec/2c/9cdebeb636531f14274ac6853bb6cba2dd85bbbb70ca18035cf67d3c408f/asyncio_throttle-0.0.2-py2.py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "57d03a89147ec088591a6ae9ab0d2250", "sha256": "e639d07b4f0431c3090ca7c582a6e12e695a00889eefee3206cd5b96f8910b88"}, "downloads": -1, "filename": "asyncio_throttle-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "57d03a89147ec088591a6ae9ab0d2250", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5369, "upload_time": "2017-10-16T05:21:32", "upload_time_iso_8601": "2017-10-16T05:21:32.830794Z", "url": "https://files.pythonhosted.org/packages/3d/ef/88e1a2fd571a551d50ec20158e78e481ec050227e0ef9e23b1c8632e488e/asyncio_throttle-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d96a71bb5bcaab9ce9e9110d857d49c5", "sha256": "a01a56f3671e961253cf262918f3e0741e222fc50d57d981ba5c801f284eccfe"}, "downloads": -1, "filename": "asyncio_throttle-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d96a71bb5bcaab9ce9e9110d857d49c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5409, "upload_time": "2017-10-16T08:13:07", "upload_time_iso_8601": "2017-10-16T08:13:07.738900Z", "url": "https://files.pythonhosted.org/packages/c2/b4/0b6bd59151d979c3d9902d9b35c992aa1e55ab0f60d8b0b7fbbf61dd3138/asyncio_throttle-0.1.1-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "914b42cb21c61f59bb7fbabc9e0eefe6", "sha256": "ac284c65e6d595687f8b4025bdb6f81a012fbc640eb76258f65d39fadcb5dc8b"}, "downloads": -1, "filename": "asyncio_throttle-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "914b42cb21c61f59bb7fbabc9e0eefe6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4063, "upload_time": "2020-04-01T15:30:44", "upload_time_iso_8601": "2020-04-01T15:30:44.453268Z", "url": "https://files.pythonhosted.org/packages/00/a2/87e28afc7ff726dfcf1615357d8a261a37dae48888479c093fa4b856085d/asyncio_throttle-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52f24c4e32a92b0662d689c2fbfffffd", "sha256": "8a9199b5bd4844c19bb8474d0f0df23962fb2fe837ae35fde1d501ae3942ac5a"}, "downloads": -1, "filename": "asyncio-throttle-1.0.0.tar.gz", "has_sig": false, "md5_digest": "52f24c4e32a92b0662d689c2fbfffffd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3560, "upload_time": "2020-04-01T15:30:46", "upload_time_iso_8601": "2020-04-01T15:30:46.044589Z", "url": "https://files.pythonhosted.org/packages/50/72/63ce49d984fd5d87cffc81dee634c6d0664bfe08d5a1bf72d53bd5d4dcc8/asyncio-throttle-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e25e8c378384b6e5c85ad8f1ebc5387b", "sha256": "80c8bba5ce77d37c9bb679f16fa875b5a99f09f418a6f26c59890fa0cf798f32"}, "downloads": -1, "filename": "asyncio_throttle-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e25e8c378384b6e5c85ad8f1ebc5387b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4072, "upload_time": "2020-04-01T16:53:03", "upload_time_iso_8601": "2020-04-01T16:53:03.048751Z", "url": "https://files.pythonhosted.org/packages/72/7a/0612390472ad2bcd239340aa27fdcfe4e7be64157fdf032b6e7bdafb6432/asyncio_throttle-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d105ad0dab4ae28ba95cfd260a9ebac", "sha256": "47678bb340742d197eeb71a1a3d9d179199d7144ed1e9c900a5605ec53b09bfa"}, "downloads": -1, "filename": "asyncio-throttle-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0d105ad0dab4ae28ba95cfd260a9ebac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3573, "upload_time": "2020-04-01T16:53:04", "upload_time_iso_8601": "2020-04-01T16:53:04.494208Z", "url": "https://files.pythonhosted.org/packages/51/14/48ae6c8c5d698fac1ff3f990aa3c4a7155101a56eba2faa1f3f03aec799b/asyncio-throttle-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e25e8c378384b6e5c85ad8f1ebc5387b", "sha256": "80c8bba5ce77d37c9bb679f16fa875b5a99f09f418a6f26c59890fa0cf798f32"}, "downloads": -1, "filename": "asyncio_throttle-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e25e8c378384b6e5c85ad8f1ebc5387b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4072, "upload_time": "2020-04-01T16:53:03", "upload_time_iso_8601": "2020-04-01T16:53:03.048751Z", "url": "https://files.pythonhosted.org/packages/72/7a/0612390472ad2bcd239340aa27fdcfe4e7be64157fdf032b6e7bdafb6432/asyncio_throttle-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d105ad0dab4ae28ba95cfd260a9ebac", "sha256": "47678bb340742d197eeb71a1a3d9d179199d7144ed1e9c900a5605ec53b09bfa"}, "downloads": -1, "filename": "asyncio-throttle-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0d105ad0dab4ae28ba95cfd260a9ebac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3573, "upload_time": "2020-04-01T16:53:04", "upload_time_iso_8601": "2020-04-01T16:53:04.494208Z", "url": "https://files.pythonhosted.org/packages/51/14/48ae6c8c5d698fac1ff3f990aa3c4a7155101a56eba2faa1f3f03aec799b/asyncio-throttle-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:43 2020"}