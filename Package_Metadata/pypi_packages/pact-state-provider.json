{"info": {"author": "nalch", "author_email": "Scholze.Kristian@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6"], "description": "pact-state-provider\n=======================\n\n> Simple server to provide an endpoint used by pact to generate a provider state\n\n.. image:: https://badge.fury.io/py/pact-state-provider.svg\n    :target: https://badge.fury.io/py/pact-state-provider\n    :alt: PyPi Status\n\n.. image:: https://travis-ci.org/nalch/pact-state-provider.svg?branch=master\n    :target: https://travis-ci.org/nalch/pact-state-provider\n    :alt: Travis Status\n\n.. image:: https://readthedocs.org/projects/pact-state-provider/badge/?version=latest\n    :target: https://pact-state-provider.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nUsage\n-----\n\nInstallation\n************\n1. Install the package::\n\n    pip install pact_state_provider\n\n\nClient\n******\nEntrypoint :code:`pact-state-provider`::\n\n    Usage: pact-state-provider [OPTIONS]\n\n      Start the state provider server on the specified host and port.\n\n    Options:\n      --base-module TEXT  Module containing the state providers.\n      --host TEXT         Host for the endpoint. Default: 127.0.0.1\n      --port INTEGER      Port for the endpoint. Default: 1235\n      --log-level TEXT    Log Level Name (DEBUG, INFO, ...). Default: INFO\n      --help              Show this message and exit.\n\nTL;DR\n*****\nExample::\n\n    $ pact-state-provider --base-module my_provider.states\n\n::\n\n    $ http http://127.0.0.1:1235 consumer=TestConsumer state=\"user exists\" --json\n    DEBUG: Importing my_provider.states\n    DEBUG: Getting function \"user_exists\"\n    -> \"my_provider.states.user_exists('TestConsumer')\" is called\n\nNot Long Enough;Will Read\n*************************\nWhen verifying contracts with `Pact <https://docs.pact.io/getting_started/provider_states>`_ a\nstate provider is called for the particular consumer with the state requested. A consumer\n:code:`TestConsumer` with a contract starting with :code:`given('user exists')` requests the\nconfigured endpoint with the payload::\n\n    {\n        'consumer': 'TestConsumer',\n        'state': 'user exists'\n    }\n\nIn order to execute the specific provider functions without having to implement a dedicated\nendpoint on the provider or a dedicated application with provider specific code\n:code:`pact-state-provider` provides a simple http server endpoint which calls an existing\nmodule function based on the request payload.\n\nIn the given example a function called :code:`user_exists` (invalid characters are translated to\nunderscores) will be executed on the specified base module (:code:`--base-module` parameter).\n\nThis gives the user to maintain the state provider code in the actual provider codebase, but\neasily have an endpoint to use with pact.\n\nDevelopment\n-----------\n\nMakefile\n********\n\nThis project uses a Makefile for various tasks. Some of the available tasks\nare listed below.\n\n* `make clean` - Clean build artifacts out of your project\n* `make test` - Run Tests\n* `make plain-test` - Run Tests without rebuilding the project\n* `make sdist` - Build a Python source distribution\n* `make docs` - Build the Sphinx documentation\n* `make lint` - Get a codestyle report about your code\n* `make plain-lint` - Get a codestyle report without rebuilding the project\n* `make` - Equivalent to `make test lint docs sdist`\n\nA New Version\n*************\n1. Cherrypick all wanted commits onto the support branch (f.e. support/1.0)\n2. Push the commits\n3. Increment the version in `setup.py` and update the changelog and commit\n4. Tag the commit with the new version (f.e. v1.0.8)\n5. Push the version commit\n\nTravis will build the new version and upload it to Pypi automatically when finding a tag on the support branch.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nalch/pact-state-provider", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "pact-state-provider", "package_url": "https://pypi.org/project/pact-state-provider/", "platform": "", "project_url": "https://pypi.org/project/pact-state-provider/", "project_urls": {"Homepage": "https://github.com/nalch/pact-state-provider"}, "release_url": "https://pypi.org/project/pact-state-provider/1.0.9/", "requires_dist": null, "requires_python": "", "summary": "Simple server to provide an endpoint used by pact to generate a provider state", "version": "1.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>&gt; Simple server to provide an endpoint used by pact to generate a provider state</p>\n<a href=\"https://badge.fury.io/py/pact-state-provider\" rel=\"nofollow\"><img alt=\"PyPi Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b97868fdc02e7ce7b50ff70d326acd9c39deddc/68747470733a2f2f62616467652e667572792e696f2f70792f706163742d73746174652d70726f76696465722e737667\"></a>\n<a href=\"https://travis-ci.org/nalch/pact-state-provider\" rel=\"nofollow\"><img alt=\"Travis Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c30ad5507d78306a4d35890370438b96e148aeb/68747470733a2f2f7472617669732d63692e6f72672f6e616c63682f706163742d73746174652d70726f76696465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pact-state-provider.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8fa92421fc1af9c60d1a54aa65fee7c3e66a815/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f706163742d73746174652d70726f76696465722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<ol>\n<li><p>Install the package:</p>\n<pre>pip install pact_state_provider\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"client\">\n<h3>Client</h3>\n<p>Entrypoint <code>pact-state-provider</code>:</p>\n<pre>Usage: pact-state-provider [OPTIONS]\n\n  Start the state provider server on the specified host and port.\n\nOptions:\n  --base-module TEXT  Module containing the state providers.\n  --host TEXT         Host for the endpoint. Default: 127.0.0.1\n  --port INTEGER      Port for the endpoint. Default: 1235\n  --log-level TEXT    Log Level Name (DEBUG, INFO, ...). Default: INFO\n  --help              Show this message and exit.\n</pre>\n</div>\n<div id=\"tl-dr\">\n<h3>TL;DR</h3>\n<p>Example:</p>\n<pre>$ pact-state-provider --base-module my_provider.states\n</pre>\n<pre>$ http http://127.0.0.1:1235 consumer=TestConsumer state=\"user exists\" --json\nDEBUG: Importing my_provider.states\nDEBUG: Getting function \"user_exists\"\n-&gt; \"my_provider.states.user_exists('TestConsumer')\" is called\n</pre>\n</div>\n<div id=\"not-long-enough-will-read\">\n<h3>Not Long Enough;Will Read</h3>\n<p>When verifying contracts with <a href=\"https://docs.pact.io/getting_started/provider_states\" rel=\"nofollow\">Pact</a> a\nstate provider is called for the particular consumer with the state requested. A consumer\n<code>TestConsumer</code> with a contract starting with <code>given('user exists')</code> requests the\nconfigured endpoint with the payload:</p>\n<pre>{\n    'consumer': 'TestConsumer',\n    'state': 'user exists'\n}\n</pre>\n<p>In order to execute the specific provider functions without having to implement a dedicated\nendpoint on the provider or a dedicated application with provider specific code\n<code>pact-state-provider</code> provides a simple http server endpoint which calls an existing\nmodule function based on the request payload.</p>\n<p>In the given example a function called <code>user_exists</code> (invalid characters are translated to\nunderscores) will be executed on the specified base module (<code>--base-module</code> parameter).</p>\n<p>This gives the user to maintain the state provider code in the actual provider codebase, but\neasily have an endpoint to use with pact.</p>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<div id=\"makefile\">\n<h3>Makefile</h3>\n<p>This project uses a Makefile for various tasks. Some of the available tasks\nare listed below.</p>\n<ul>\n<li><cite>make clean</cite> - Clean build artifacts out of your project</li>\n<li><cite>make test</cite> - Run Tests</li>\n<li><cite>make plain-test</cite> - Run Tests without rebuilding the project</li>\n<li><cite>make sdist</cite> - Build a Python source distribution</li>\n<li><cite>make docs</cite> - Build the Sphinx documentation</li>\n<li><cite>make lint</cite> - Get a codestyle report about your code</li>\n<li><cite>make plain-lint</cite> - Get a codestyle report without rebuilding the project</li>\n<li><cite>make</cite> - Equivalent to <cite>make test lint docs sdist</cite></li>\n</ul>\n</div>\n<div id=\"a-new-version\">\n<h3>A New Version</h3>\n<ol>\n<li>Cherrypick all wanted commits onto the support branch (f.e. support/1.0)</li>\n<li>Push the commits</li>\n<li>Increment the version in <cite>setup.py</cite> and update the changelog and commit</li>\n<li>Tag the commit with the new version (f.e. v1.0.8)</li>\n<li>Push the version commit</li>\n</ol>\n<p>Travis will build the new version and upload it to Pypi automatically when finding a tag on the support branch.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6390186, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "dacf2e749c4da0fbea6e6521cc40fdab", "sha256": "042dabeb6eeef1bb20081a024fe85aa508ea6c038399629d5e718578450e2538"}, "downloads": -1, "filename": "pact_state_provider-1.0.2.tar.gz", "has_sig": false, "md5_digest": "dacf2e749c4da0fbea6e6521cc40fdab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10796, "upload_time": "2019-12-21T18:31:50", "upload_time_iso_8601": "2019-12-21T18:31:50.863213Z", "url": "https://files.pythonhosted.org/packages/ed/12/8026fce5c33f0751928c858b5fa1cfa4f113054b84e6af01a87ab0c869ec/pact_state_provider-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "6e148df07950aa6e5d540ece2e09b052", "sha256": "78d0f267c97a17b798739f8b00f52ee20a6cb670202e7aa2a92ba6d03c7f1774"}, "downloads": -1, "filename": "pact_state_provider-1.0.3.tar.gz", "has_sig": false, "md5_digest": "6e148df07950aa6e5d540ece2e09b052", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10771, "upload_time": "2019-12-21T18:51:36", "upload_time_iso_8601": "2019-12-21T18:51:36.496188Z", "url": "https://files.pythonhosted.org/packages/69/81/fc91b134ed07c5f1f68db0f317db1d1b472ef6a468447bffd9684c37f605/pact_state_provider-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "c9d707e40f875dc696a0b0cc98853ec0", "sha256": "175cd3ed4feca505018d313ef17de042b5c66a9733bb00c1536662562b73a74e"}, "downloads": -1, "filename": "pact_state_provider-1.0.4.tar.gz", "has_sig": false, "md5_digest": "c9d707e40f875dc696a0b0cc98853ec0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10964, "upload_time": "2019-12-29T10:53:57", "upload_time_iso_8601": "2019-12-29T10:53:57.961063Z", "url": "https://files.pythonhosted.org/packages/f7/7b/d8cad3f6091c62b3828cfa35c4f1c9d32aa75d8e2e1fce7377f212e455ca/pact_state_provider-1.0.4.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "90687238474fefb9eb4cd6918da9d973", "sha256": "951a51c38118a0753ef571f8b07ad5ddc2beb7b747b7933913bbe68e66e59bf1"}, "downloads": -1, "filename": "pact_state_provider-1.0.6.tar.gz", "has_sig": false, "md5_digest": "90687238474fefb9eb4cd6918da9d973", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10967, "upload_time": "2019-12-29T11:02:43", "upload_time_iso_8601": "2019-12-29T11:02:43.949868Z", "url": "https://files.pythonhosted.org/packages/48/1b/7e8fa3a137ac8c6a867fde08fc8a6c77af1c25873a261b258800d68f552e/pact_state_provider-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "d76c1e1c774e497f5b5eefc3b5942a71", "sha256": "3a9ea8735580f5ab8f8e4f59bdff562a4684af43f4e789f8f7f92a6858fa4abb"}, "downloads": -1, "filename": "pact_state_provider-1.0.7.tar.gz", "has_sig": false, "md5_digest": "d76c1e1c774e497f5b5eefc3b5942a71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11101, "upload_time": "2020-01-03T09:15:19", "upload_time_iso_8601": "2020-01-03T09:15:19.398779Z", "url": "https://files.pythonhosted.org/packages/67/02/31168f430376323794aed6585f2c28692353facf27da60c785a7c111698a/pact_state_provider-1.0.7.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "5f5a864f0dfeba2deb35951e5415ed72", "sha256": "b4d039212d793b9979cb858fe5fcb2fdcf284c8a4225329f8499a504f8abd64e"}, "downloads": -1, "filename": "pact_state_provider-1.0.9.tar.gz", "has_sig": false, "md5_digest": "5f5a864f0dfeba2deb35951e5415ed72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11353, "upload_time": "2020-01-03T09:40:01", "upload_time_iso_8601": "2020-01-03T09:40:01.507815Z", "url": "https://files.pythonhosted.org/packages/83/99/7c6c85e866d887338f181050bc59a7569459ec97a92cf7e4e6561e28fd49/pact_state_provider-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f5a864f0dfeba2deb35951e5415ed72", "sha256": "b4d039212d793b9979cb858fe5fcb2fdcf284c8a4225329f8499a504f8abd64e"}, "downloads": -1, "filename": "pact_state_provider-1.0.9.tar.gz", "has_sig": false, "md5_digest": "5f5a864f0dfeba2deb35951e5415ed72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11353, "upload_time": "2020-01-03T09:40:01", "upload_time_iso_8601": "2020-01-03T09:40:01.507815Z", "url": "https://files.pythonhosted.org/packages/83/99/7c6c85e866d887338f181050bc59a7569459ec97a92cf7e4e6561e28fd49/pact_state_provider-1.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:01 2020"}