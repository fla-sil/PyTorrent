{"info": {"author": "Dustin Cotton", "author_email": "dcotton@stormpurple.net", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# A Django app to add Ajax capabilities to django-tables2\n\nThis app is an enhancement for [django-tables2](https://pypi.python.org/pypi/django-tables2). It adds Ajax capability to allow tables to be sorted and paged without reloading the entire page. \n\n- On Pypi [django-ajax-tables](https://pypi.org/project/django-ajax-tables/)\n- On Git [django-ajax-tables](https://github.com/KiwiTrinsic/django-ajax-tables)\n\n## Requirements\n\n- Python 3\n- Django (version 2+)\n- [django-tables2](https://pypi.python.org/pypi/django-tables2)\n\n## Installation\n\nInstall with pip:\n\n```python\npip install django-ajax-tables\n```\n\nAdd django_ajax_tables to the settings.py installed_apps:\n\n```python\nINSTALLED_APPS = (\n    ...,\n    \"django_ajax_tables\",\n)\n```\n\n## Features\n\nThis app adds a new Django template tag {% ajax_table %}. \nThis is a replacement for the django-tables2 {% render_table %} tag.\n\nTo implement the Ajax functionality you will need to add a view which returns the raw table html (example shown below).\nThe {% ajax_table %} tag will use that html to render the table on the page.\nIt will also configure the table sorting and pagination links to perform Ajax calls and in-place updates of the table.\nThis will allow you to sort and page through the table without the entire webpage refreshing on each click.\n\nThis will not affect any LinkColumns that have been added to the table layout.\n\n## Example\n\nCreate a django-tables2 table and wire it to a model as normal:\n\n```python\nimport django_tables2 as tables\n\nclass SimpleTable(tables.Table):\n    class Meta:\n        model = Simple\n```\n\nCreate a view that exposes the table as raw html:\n\n```python\nfrom django.http import HttpResponse\nfrom django_tables2 import RequestConfig\n\ndef simple_view(request):\n    simple_table = SimpleTable(Simple.objects.all())\n    RequestConfig(request).configure(simple_table)\n    return HttpResponse(simple_table.as_html(request))\n```\nCreate a url mapping for the view:\n\n```\nurlpatterns = [\n    ...,\n    url(r'^simple_url$', simple_view, name='simple_url_name'),\n```\n\nPlace ajax_table tags where tables are to be displayed:\n\n```\n{% ajax_table \"unique_div_id\" \"simple_url_name\" %}\n```\n\n## Usage\n\nThe ajax_table tag requires at least two parameters.\n\n- The first parameter is a unique id. This id should not used for any other element on the page. The ajax_table tag will create a div element with this id to contain the table.\n- The second parameter is the name of the url that is mapped to the table view.\n- Any additional non-keyword arguments will be passed as positional arguments to the url. If used this will prevent the passing of keyword arguments to the url.\n- The template keyword argument can be used to replace the django-ajax-tables javascript with custom javascript.\n- Any additional keyword arguments will be passed as keyword aguments to the url but only if there were no positional arguments passed to the url.\n\n### Example with positional arguments\n```\n{% ajax_table \"unique_div_id\" \"simple_url_name\" arg1 arg2 %}\n```\n\n### Example with keyword arguments\n```\n{% ajax_table \"unique_div_id\" \"simple_url_name\" filter1=arg1 filter2=arg2 %}\n```\n\n## Javascript API\n\nThe table loading function can also be caled direcly in javascript. \nThis can be useful if the data needs to be refreshed.\nThe function name will be in the form of *update_\\<id\\>* where *\\<id\\>* is the unique id parameter that was pased in to the ajax_table tag.\n\nThe function can take two optional parameters.\nThe first parameter is a query string which will appened to the url.\nThis defaults to an empty string. \nThe second parameter is a url which will be used by the ajax call to fetch the table data.\nThis defaults to the original url as created by the ajax_table tag.\n\nTogether these two parameters allow the table data to be loaded with different query parameters or from entirly different urls.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KiwiTrinsic/django-ajax-tables", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-ajax-tables", "package_url": "https://pypi.org/project/django-ajax-tables/", "platform": "", "project_url": "https://pypi.org/project/django-ajax-tables/", "project_urls": {"Homepage": "https://github.com/KiwiTrinsic/django-ajax-tables"}, "release_url": "https://pypi.org/project/django-ajax-tables/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Django tag for ajax-enabled tables", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>A Django app to add Ajax capabilities to django-tables2</h1>\n<p>This app is an enhancement for <a href=\"https://pypi.python.org/pypi/django-tables2\" rel=\"nofollow\">django-tables2</a>. It adds Ajax capability to allow tables to be sorted and paged without reloading the entire page.</p>\n<ul>\n<li>On Pypi <a href=\"https://pypi.org/project/django-ajax-tables/\" rel=\"nofollow\">django-ajax-tables</a></li>\n<li>On Git <a href=\"https://github.com/KiwiTrinsic/django-ajax-tables\" rel=\"nofollow\">django-ajax-tables</a></li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3</li>\n<li>Django (version 2+)</li>\n<li><a href=\"https://pypi.python.org/pypi/django-tables2\" rel=\"nofollow\">django-tables2</a></li>\n</ul>\n<h2>Installation</h2>\n<p>Install with pip:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">django</span><span class=\"o\">-</span><span class=\"n\">ajax</span><span class=\"o\">-</span><span class=\"n\">tables</span>\n</pre>\n<p>Add django_ajax_tables to the settings.py installed_apps:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"django_ajax_tables\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Features</h2>\n<p>This app adds a new Django template tag {% ajax_table %}.\nThis is a replacement for the django-tables2 {% render_table %} tag.</p>\n<p>To implement the Ajax functionality you will need to add a view which returns the raw table html (example shown below).\nThe {% ajax_table %} tag will use that html to render the table on the page.\nIt will also configure the table sorting and pagination links to perform Ajax calls and in-place updates of the table.\nThis will allow you to sort and page through the table without the entire webpage refreshing on each click.</p>\n<p>This will not affect any LinkColumns that have been added to the table layout.</p>\n<h2>Example</h2>\n<p>Create a django-tables2 table and wire it to a model as normal:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">django_tables2</span> <span class=\"k\">as</span> <span class=\"nn\">tables</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleTable</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Simple</span>\n</pre>\n<p>Create a view that exposes the table as raw html:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_tables2</span> <span class=\"kn\">import</span> <span class=\"n\">RequestConfig</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">simple_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">simple_table</span> <span class=\"o\">=</span> <span class=\"n\">SimpleTable</span><span class=\"p\">(</span><span class=\"n\">Simple</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n    <span class=\"n\">RequestConfig</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">simple_table</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">simple_table</span><span class=\"o\">.</span><span class=\"n\">as_html</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">))</span>\n</pre>\n<p>Create a url mapping for the view:</p>\n<pre><code>urlpatterns = [\n    ...,\n    url(r'^simple_url$', simple_view, name='simple_url_name'),\n</code></pre>\n<p>Place ajax_table tags where tables are to be displayed:</p>\n<pre><code>{% ajax_table \"unique_div_id\" \"simple_url_name\" %}\n</code></pre>\n<h2>Usage</h2>\n<p>The ajax_table tag requires at least two parameters.</p>\n<ul>\n<li>The first parameter is a unique id. This id should not used for any other element on the page. The ajax_table tag will create a div element with this id to contain the table.</li>\n<li>The second parameter is the name of the url that is mapped to the table view.</li>\n<li>Any additional non-keyword arguments will be passed as positional arguments to the url. If used this will prevent the passing of keyword arguments to the url.</li>\n<li>The template keyword argument can be used to replace the django-ajax-tables javascript with custom javascript.</li>\n<li>Any additional keyword arguments will be passed as keyword aguments to the url but only if there were no positional arguments passed to the url.</li>\n</ul>\n<h3>Example with positional arguments</h3>\n<pre><code>{% ajax_table \"unique_div_id\" \"simple_url_name\" arg1 arg2 %}\n</code></pre>\n<h3>Example with keyword arguments</h3>\n<pre><code>{% ajax_table \"unique_div_id\" \"simple_url_name\" filter1=arg1 filter2=arg2 %}\n</code></pre>\n<h2>Javascript API</h2>\n<p>The table loading function can also be caled direcly in javascript.\nThis can be useful if the data needs to be refreshed.\nThe function name will be in the form of <em>update_&lt;id&gt;</em> where <em>&lt;id&gt;</em> is the unique id parameter that was pased in to the ajax_table tag.</p>\n<p>The function can take two optional parameters.\nThe first parameter is a query string which will appened to the url.\nThis defaults to an empty string.\nThe second parameter is a url which will be used by the ajax call to fetch the table data.\nThis defaults to the original url as created by the ajax_table tag.</p>\n<p>Together these two parameters allow the table data to be loaded with different query parameters or from entirly different urls.</p>\n\n          </div>"}, "last_serial": 6479169, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "24b082e013f881b054b09cced1bbc396", "sha256": "0cc9c42f1516d62471369cf8d6881176bb9a17eccb0e2ce3915f7f28e6e9c4e9"}, "downloads": -1, "filename": "django_ajax_tables-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "24b082e013f881b054b09cced1bbc396", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4830, "upload_time": "2019-06-08T20:15:14", "upload_time_iso_8601": "2019-06-08T20:15:14.068779Z", "url": "https://files.pythonhosted.org/packages/b0/0d/7b5fc58e93ee9bdf01f6a40b2bd244961f7bf20a5cb45ada23b66d422673/django_ajax_tables-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac1ad29ebccc1460ff9951790c336706", "sha256": "6df97b3d04f11868b2105383e99da99c473141f4d1e039d53c257f3685113927"}, "downloads": -1, "filename": "django_ajax_tables-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ac1ad29ebccc1460ff9951790c336706", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4037, "upload_time": "2019-06-08T20:15:16", "upload_time_iso_8601": "2019-06-08T20:15:16.446784Z", "url": "https://files.pythonhosted.org/packages/b2/53/54c877def6c90d871dc5eda265ebede4135d7086dcfa81e437bc7dd3534b/django_ajax_tables-1.0.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "281ec9d173264fd3cf05fda8eab15102", "sha256": "62e0138949153c0a994eefbf469f5496b1ad98bc073e170bc021a1aada7a32d0"}, "downloads": -1, "filename": "django_ajax_tables-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "281ec9d173264fd3cf05fda8eab15102", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5310, "upload_time": "2020-01-18T18:58:47", "upload_time_iso_8601": "2020-01-18T18:58:47.172527Z", "url": "https://files.pythonhosted.org/packages/78/30/e152372e9b629648566e24236a0044d7e35367eef6db22a240318073dadc/django_ajax_tables-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13fbf6475f18d2128a14f4a3c326366d", "sha256": "5a7e7bc7940aa6332a564916cde22010a858a3d29fc1090ce8061010ec76337c"}, "downloads": -1, "filename": "django_ajax_tables-1.1.1.tar.gz", "has_sig": false, "md5_digest": "13fbf6475f18d2128a14f4a3c326366d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4532, "upload_time": "2020-01-18T18:58:48", "upload_time_iso_8601": "2020-01-18T18:58:48.905509Z", "url": "https://files.pythonhosted.org/packages/12/f7/0240d6694bb29be34ada44364e5459d0ce318e5b34b850fd4a6b576847ef/django_ajax_tables-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "281ec9d173264fd3cf05fda8eab15102", "sha256": "62e0138949153c0a994eefbf469f5496b1ad98bc073e170bc021a1aada7a32d0"}, "downloads": -1, "filename": "django_ajax_tables-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "281ec9d173264fd3cf05fda8eab15102", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5310, "upload_time": "2020-01-18T18:58:47", "upload_time_iso_8601": "2020-01-18T18:58:47.172527Z", "url": "https://files.pythonhosted.org/packages/78/30/e152372e9b629648566e24236a0044d7e35367eef6db22a240318073dadc/django_ajax_tables-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13fbf6475f18d2128a14f4a3c326366d", "sha256": "5a7e7bc7940aa6332a564916cde22010a858a3d29fc1090ce8061010ec76337c"}, "downloads": -1, "filename": "django_ajax_tables-1.1.1.tar.gz", "has_sig": false, "md5_digest": "13fbf6475f18d2128a14f4a3c326366d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4532, "upload_time": "2020-01-18T18:58:48", "upload_time_iso_8601": "2020-01-18T18:58:48.905509Z", "url": "https://files.pythonhosted.org/packages/12/f7/0240d6694bb29be34ada44364e5459d0ce318e5b34b850fd4a6b576847ef/django_ajax_tables-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:44 2020"}