{"info": {"author": "Alberto Berti", "author_email": "alberto@arstecnica.it", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": ".. -*- coding: utf-8 -*-\n.. :Project:  metapensiero.pj -- readme\n.. :Created:  mar 01 mar 2016 15:52:36 CET\n.. :Author:   Alberto Berti <alberto@metapensiero.it>\n.. :License:  GNU General Public License version 3 or later\n..\n\n======================================================\nJavaScripthon: a Python 3 to ES6 JavaScript translator\n======================================================\n\n.. image:: https://gitlab.com/metapensiero/metapensiero.pj/badges/master/pipeline.svg\n   :target: https://gitlab.com/metapensiero/metapensiero.pj/commits/master\n   :align: left\n   :alt: tests status\n\n.. image:: https://gitlab.com/metapensiero/metapensiero.pj/badges/master/coverage.svg\n   :target: https://gitlab.com/metapensiero/metapensiero.pj/commits/master\n   :align: left\n   :alt: tests coverage\n\n.. image:: https://badges.gitter.im/javascripthon/Lobby.svg\n   :alt: Join the chat at https://gitter.im/javascripthon/Lobby\n   :target: https://gitter.im/javascripthon/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n   :align: left\n\n.. figure:: http://s3.amazonaws.com/fossbytes.content/wp-content/uploads/2016/04/Javascripthon-python-js-converter.jpg\n   :alt: JavaScripthon\n   :align: left\n   :width: 750px\n\n   ..\n\n   (image courtesy of `fossBytes`__)\n\n   __ http://fossbytes.com/javascripthon-a-simple-python-to-es6-javascript-translator/\n\n\nIt is based on previous work by `Andrew Schaaf <andrew@andrewschaaf.com>`_.\n\n :author: Alberto Berti\n :contact: alberto@metapensiero.it\n :license: GNU General Public License version 3 or later\n\n.. contents:: Table of Contents\n   :backlinks: top\n\nIntroduction\n------------\n\nJavaScripthon is a small and simple Python 3.5+ translator to JavaScript which\naims to be able to translate most of the Python's core semantics without\nproviding a full python-in-js environment, as most existing translators do. It\ntries to emit code which is simple to read and check. It does so by switching\nto ES6 construct when possible/required. This allows to simplify the needs of\npolyfills for many of the expected Python behaviors.\n\nIt is designed to be the first step in a pipeline that translates your Pyhton\ncode into something that a browser can understand. Usually it is used with\ntools like `BabelJS`__ and `Webpack`__ to prepare the final bundle that will\nbe served to the browser. The steps from the source code to the bundle are the\nfollowing:\n\n1) JavaScripthon converts your Python 3.5+ code to ES6 JavaScript modules;\n2) the BabelJS loader (configured inside Webpack or standalone) translates the\n   ES6 JavaScript to ES5 so that the browser can understand it;\n3) Webpack parses the resulting source code and packages your source code with\n   its dependencies by analyzing ``import`` statements and emits a\n   ``bundle.js`` ready to be served to the browser.\n\nAlong this process the corresponding `source maps`__ are read and integrated at\nevery step, allowing you to place breakpoints on your original Python source\nfiles when working with the developer tools of your browser.\n\nAn example of such setup is provided in the ``examples`` directory.\n\n__ http://babeljs.io/\n__ http://webpack.github.io/\n__ http://blog.teamtreehouse.com/introduction-source-maps\n\n\nIn addition to that, you can choose to do most these steps without using\nexternal JS tools. It comes with an `embedded js interpreter`__ that loads a\nstandalone version of BabelJS and converts your code to ES5 JavaScript without\nthe need to install anything else. In fact most of the the test you can find\nin ``tests/test_evaljs.py`` use the embedded interpreter to dual evaluate the\nsource code (one time in Python, one time in JavaScript) and simply check that\nthe results are the same.\n\n__ https://github.com/amol-/dukpy\n\nThanks to that, JavaScripthon can also be used as a server-side library to\ntranslate single functions or classes that you want your browser to load and\nevaluate.\n\nThe interface with the JS world is completely flat, just import the modules\nor use the expected globals (``window``, ``document``, etc...) as you\nwould do in JavaScript.\n\nBrief list of the supported Python semantics\n--------------------------------------------\n\nThe fact that JavaScripthon doesn't *reinvent the wheel* by reimplementing in\nPython many of the features available with JavaScript translators/transpilers\nallows it to be lean while implementing quite a decent set of the core Python\nsemanticts. These are, briefly:\n\n* Misc\n\n  - list slices;\n  - list's ``append()``;\n  - dict's ``copy()``, ``update()``;\n  - ``len()``;\n  - ``print()``;\n  - ``str()``;\n  - ``type(instance)``;\n  - ``yield`` and ``yield from``;\n  - ``async`` and ``await``;\n  - ``import`` and ``from...import`` to use any JS module (see `import\n    statements`_);\n  - ``callable()``;\n  - ``hasattr()``, ``getattr()``, ``setattr()``;\n  - template literals with ``tmpl('a string with ${substitution}')``;\n  - simple Python 3.6+ `f-strings`_ (see `Strings`_);\n  - template literals and tagged_templates (see `Strings`_);\n  - names starting with ``d_`` and ``dd_`` will have that part replaced with\n    ``$`` and ``$$``, respectively;\n  - names ending with an underscore will have it removed. Useful for example\n    with the AVA ES6 test runner which has a check named ``is``;\n  - ``__instancecheck__`` to ``[Symbol.hasInstance]``;\n  - ``int`` to ``parseInt``;\n  - ``float`` to ``parseFloat``;\n  - dictionary keys are unanbiguous when ES6 translation is\n    enabled. For example the following code gets translated correctly:\n\n    .. code:: python\n\n       a = 'foo'\n       d = {a: 1}\n       print(d[a])\n\n    prints ``1`` in both Python and JavaScript, while it prints\n    ``undefined`` when translated and evaluated in JavaScript without\n    ES6.\n\n.. _f-strings: https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings\n\n* Comparisons (see section `Simple stuff`_ for the details)\n\n  - most of the basics;\n  - ``isinstance()`` and ``issubclass()``;\n  - ``element in container`` for use with lists, objects, strings and the new\n    ES6 collections like ``Map``, ``Set`` and so on;\n  - identity checks: ``foo is bar``;\n  - chained comparisons like ``x < y <= z``;\n\n* Statements (see section `Simple stuff`_ and `for statement`_ for the\n  details)\n\n  - ``if...elif...else``;\n  - ``while`` loop;\n  - ``for`` over list, over range, over plain js objects, over iterables (JS\n    iterables);\n  - ``try...except...finally`` with pythonesque behavior (see\n    `try...except...finally statement`_ section for the details);\n  - ``assert`` statement;\n\n* Functions (see `Functions`_ section)\n\n  - standard functions, generator functions, async functions;\n  - parameters defaults;\n  - keyword parameters;\n  - parameters accumulators (``*args`` and ``**kwargs``), with some\n    restrictions;\n  - functions in methods are usually converted to \"arrow functions\" (the new\n    ES6 syntax like ``(foo, bar) => foo * bar;``) because they automatically\n    keep ``this`` from the enclosing scope. Appending ``_fn`` to a function\n    declaration will force the translation to a normal function;\n\n* Classes (see `Classes`_ section)\n\n  - single inheritance;\n  - Exception classes for use with ``except`` statement;\n  - class decorators and method decorators;\n  - property descriptors;\n  - special handling of ``property`` and ``classmethod`` descriptors;\n  - async methods, generator methods;\n  - non-function body members (i.e. ``member_of_class_Foo = bar``);\n\nLicense\n-------\n\nThis package is covered by the `GNU General Public License version\n3 or later`__. The code produced by it (i.e. the transpiled\nJavaScript) is *your* code, and *you* are free to choose whatever\nlicense you like. The only ``runtime`` that exists is the file\n`snippets.py`__ from which some utility functions are picked when\nnecessary and transpiled together with your code. While it's\ndistributed with the same license as the other source code, in its\n*transpiled* form will have the license you choose.\n\nSo, to summarize, the license of the this tool is GPL, but it doesn't\nextends to the products of this tool, on which you are free to decide.\n\n__ https://www.gnu.org/licenses/gpl.html\n__ https://github.com/azazel75/metapensiero.pj/blob/master/src/metapensiero/pj/snippets.py\n\nInstallation\n------------\n\nPython 3.5 is required because Python's AST has changed between 3.4\nand 3.5 and as of now supporting multiple Python versions is not one\nof my priorities.\n\nTo install the package execute the following command::\n\n  $ pip install javascripthon\n\nor, if you want install it from sources::\n\n  $ git clone https://github.com/azazel75/metapensiero.pj\n  $ pip install -r metapensiero.pj/requirements.txt\n  $ pip install metapensiero.pj\n\nUsage\n-----\n\nTo *compile* or *transpile* a python source module, use the\ncommandline:\n\n.. code:: bash\n\n  $ python -m metapensiero.pj source.py\n\nor:\n\n.. code:: bash\n\n  $ python -m metapensiero.pj -5 source.py\n\nto transpile.\n\nA ``pj`` console script is also automatically installed:\n\n.. code:: bash\n\n\n  $ pj --help\n  usage: pj [-h] [--disable-es6] [--disable-stage3] [-5] [--transform-runtime]\n            [-o OUTPUT] [-d] [--pdb] [-s STRING] [-e]\n            [file [file ...]]\n\n  A Python 3.5+ to ES6 JavaScript compiler\n\n  positional arguments:\n    file                  Python source file(s) or directory(ies) to convert.\n                          When it is a directory it will be converted\n                          recursively\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    --disable-es6         Disable ES6 features during conversion (Ignored if\n                          --es5 is specified)\n    --disable-stage3      Disable ES7 stage3 features during conversion\n    -5, --es5             Also transpile to ES5 using BabelJS.\n    --transform-runtime   Add trasform runtime as plugin during transpile\n    -o OUTPUT, --output OUTPUT\n                          Output file/directory where to save the generated code\n    -d, --debug           Enable error reporting\n    --pdb                 Enter post-mortem debug when an error occurs\n    -s STRING, --string STRING\n                          Convert a string, useful for small snippets. If the\n                          string is '-' will be read from the standard input.\n    -e, --eval            Evaluate the string supplied with the -s using the\n                          embedded interpreter and return the last result. This\n                          will convert the input string with all the extensions\n                          enabled (comparable to adding the '-5' option) and so\n                          it will take some time because of BabelJS load times.\n\nThis offers many ways to test the framework, both the string conversion and\nthe evaluation using the embedded JavaScript interpreter are very handy. For\nexample:\n\n.. code:: bash\n\n  $ pj -s '\"foo\" if True else \"bar\"'\n  (true ? \"foo\" : \"bar\");\n\nand evaluating the same statement:\n\n.. code:: bash\n\n  $ pj -s '\"foo\" if True else \"bar\"' -e\n  foo\n\nYou can even try more fancy ES6 features, like destructuring assignment:\n\n.. code:: bash\n\n   $ pj -s \"a, b, c = (2, 3, 5) \\na+b+c\" -e\n   10\n\nReporting Bugs\n--------------\n\nThe main development repository is the one on gitlab__, the one on\ngithub is just a mirror so please report issues and feature requests\nthere__.\n\n__ https://gitlab.com/metapensiero/metapensiero.pj\n__ https://gitlab.com/metapensiero/metapensiero.pj/issues\n\nConversions Rosetta Stone\n-------------------------\n\nHere is a brief list of examples of the conversions the tool applies,\njust some, but not all.\n\nSimple stuff\n~~~~~~~~~~~~\n\n.. list-table:: Most are obvious\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n\n  * - .. code:: python\n\n        x < y <= z < 5\n\n    - .. code:: javascript\n\n        ((x < y) && (y <= z) && (z < 5))\n\n  * - .. code:: python\n\n\n        def foo():\n            return [True, False, None, 1729,\n                    \"foo\", r\"foo\\bar\", {}]\n\n    - .. code:: javascript\n\n        function foo() {\n            return [true, false, null, 1729,\n                    \"foo\", \"foo\\\\bar\", {}];\n        }\n\n\n  * - .. code:: python\n\n        while len(foo) > 0:\n            print(foo.pop())\n\n    - .. code:: javascript\n\n        while ((foo.length > 0)) {\n            console.log(foo.pop());\n        }\n\n\n  * - .. code:: python\n\n        if foo > 0:\n            ....\n        elif foo < 0:\n            ....\n        else:\n            ....\n\n    - .. code:: javascript\n\n        if ((foo > 0)) {\n            ....\n        } else {\n            if ((foo < 0)) {\n                ....\n            } else {\n                ....\n            }\n        }\n\n\n  * - .. code:: python\n\n        str(x)\n\n    - .. code:: javascript\n\n        x.toString()\n\n  * - .. code:: python\n\n        yield foo\n        yield from foo\n\n    - .. code:: javascript\n\n        yield foo\n        yield* foo\n\n\nThen there are special cases. Here you can see some of these\nconversions. JavaScripthon cannot do a full trace of the sources, so\nsome shortcuts are taken about the conversion of some core, specific\nPython's semantics. For example Python's ``self`` is always converted\nto JavaScript's ``this``, no matter where it's found. Or ``len(foo)``\nis always translated to ``foo.length``. Albeit this an API specific of\njust some objects (Strings, Arrays, etc...), it is considered wide\nadopted and something the user may consider obvious.\n\nThe rules of thumb to treat things especially are:\n\n* Is it possible to think of a conversion that covers most of the use\n  cases?\n\n* Is ts possible to find a convention widely used on the Python world\n  to express this special case?\n\n.. list-table:: There are special cases\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n\n  * - .. code:: python\n\n        ==\n\n    - .. code:: javascript\n\n        ===\n\n  * - .. code:: python\n\n        !=\n\n    - .. code:: javascript\n\n        !==\n\n  * - .. code:: python\n\n        2**3\n\n    - .. code:: javascript\n\n        Math.pow(2, 3)\n\n  * - .. code:: python\n\n        'docstring'\n\n    - .. code:: javascript\n\n        /* docstring */\n\n  * - .. code:: python\n\n        self\n\n    - .. code:: javascript\n\n        this\n\n  * - .. code:: python\n\n        len(...)\n\n    - .. code:: javascript\n\n        (...).length\n\n  * - .. code:: python\n\n        print(...)\n\n    - .. code:: javascript\n\n        console.log(...)\n\n  * - .. code:: python\n\n        isinstance(x, y)\n        isinstance(x, (y, z))\n\n    - .. code:: javascript\n\n        (x instanceof y)\n        (x instanceof y || x instanceof z)\n\n  * - .. code:: python\n\n        typeof(x)\n\n    - .. code:: javascript\n\n        (typeof x)\n\n  * - .. code:: python\n\n        type(x)\n\n    - .. code:: javascript\n\n        Object.getPrototypeOf(x)\n\n  * - .. code:: python\n\n        FirstCharCapitalized(...)\n        new(any_function(...))\n\n    - .. code:: javascript\n\n        new FirstCharCapitalized(...)\n        new any_function(...)\n\n  * - .. code:: python\n\n        foo in bar\n\n    - .. code:: javascript\n\n        var _pj;\n        function _pj_snippets(container) {\n            function in_es6(left, right) {\n                if (((right instanceof Array) || ((typeof right) === \"string\"))) {\n                    return (right.indexOf(left) > (- 1));\n                } else {\n                    if (((right instanceof Map) || (right instanceof Set)\n                        || (right instanceof WeakMap)\n                        || (right instanceof WeakSet))) {\n                        return right.has(left);\n                    } else {\n                        return (left in right);\n                    }\n                }\n            }\n            container[\"in_es6\"] = in_es6;\n            return container;\n        }\n        _pj = {};\n        _pj_snippets(_pj);\n        _pj.in_es6(foo, bar);\n\n  * - .. code:: python\n\n        foo[3:]\n        foo[:3]\n\n    - .. code:: javascript\n\n        foo.slice(3);\n        foo.slice(0, 3);\n\n  * - .. code:: python\n\n        list(foo).append(bar)\n\n    - .. code:: javascript\n\n        foo.push(bar);\n\n  * - .. code:: python\n\n        dict(foo).update(bar)\n\n    - .. code:: javascript\n\n        Object.assign(foo, bar);\n\n  * - .. code:: python\n\n        dict(foo).copy()\n\n    - .. code:: javascript\n\n        Object.assign({}, foo);\n\n\n``for`` statement\n~~~~~~~~~~~~~~~~~\n\nThe ``for`` statement by default is translated as if the object of the\ncycle is a list but has two special cases:\n\n\n.. list-table:: ``for`` loops\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n    - notes\n\n  * - .. code:: python\n\n        for el in dict(a_dict):\n            print(el)\n\n    - .. code:: javascript\n\n        var _pj_a = a_dict;\n        for (var el in _pj_a) {\n            if (_pj_a.hasOwnProperty(el)) {\n                console.log(el);\n            }\n        }\n\n    - With this kind of loop if you use ``dict(a_dict, True)`` the check on\n      ``hasOwnProperty()`` will not be added, so the loop will include\n      *inherited* (and *enumerable*) properties.\n\n  * - .. code:: python\n\n        for el in an_array:\n            print(el)\n\n    - .. code:: javascript\n\n        for (var el, _pj_c = 0, _pj_a = an_array, _pj_b = _pj_a.length;\n              (_pj_c < _pj_b); _pj_c += 1) {\n            el = _pj_a[_pj_c];\n            console.log(el);\n        }\n\n    -\n\n  * - .. code:: python\n\n        for i in range(5):\n            print(i)\n\n    - .. code:: javascript\n\n        for (var i = 0, _pj_a = 5; (i < _pj_a); i += 1) {\n            console.log(i);\n        }\n\n    -\n\n  * - .. code:: python\n\n        for el in iterable(a_set):\n            print(el)\n\n    - .. code:: javascript\n\n        var _pj_a = a_set;\n        for (var el of  _pj_a) {\n            console.log(el);\n        }\n\n    - This will loop over all the iterables, like instances of ``Array``,\n      ``Map``, ``Set``, etc. **but not over normal objects**.\n\nFunctions\n~~~~~~~~~\n\nFunctions are very well supported. This should be obvious, you can say. Really\nit is not so simple, if we mean functions in their broader meaning, including\nthe  *async functions* and *generator functions*.\n\n.. list-table:: The various types of functions at play\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n    - notes\n\n  * - .. code:: python\n\n        def foo(a, b, c):\n            pass\n\n    - .. code:: javascript\n\n        function foo(a, b, c) {\n        }\n\n    - Normal functions\n\n  * - .. code:: python\n\n        def foo(a, b, c):\n            for i in range(a, b, c):\n                yield i\n\n        for i in iterable(foo(0, 5, 2)):\n            print(i)\n\n    - .. code:: javascript\n\n        function* foo(a, b, c) {\n            for ... { // loop control omitted for brevity\n                yield i;\n            }\n        }\n\n        for (var i of foo(0, 5, 2)) {\n            console.log(i);\n        }\n\n    - Generator functions. They return an iterable and to correctly loop over\n      it you should use the ``iterable(...)`` call, so that the Python's\n      ``for...in`` will be converted into a ``for...of``\n\n  * - .. code:: python\n\n        async def foo(a, b, c):\n            await some_promise_based_async\n\n\n    - .. code:: javascript\n\n        async function foo(a, b, c) {\n            await some_promised_base_async;\n        }\n\n    - Async functions. They make use of the new ``Promise`` class, which is\n      also available.\n\n\nFunction's args and call parameters\n+++++++++++++++++++++++++++++++++++\n\nParmeters defaults and keyword parameters are supported and so is ``*foo``\naccumulator, which is translated into the ES6 rest expression (``...foo``).\n\nThe only caveat is that JS support for keyword args sucks, so you will have to\n**remember to fill in all the arguments before specifying keywords**.\n\nOn function definitions, ``**kwargs`` is supported if it's alone, i.e. without\neither keyword arguments or ``*args``.\n\n.. list-table:: function's args and call parameters\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n\n  * - .. code:: python\n\n        def foo(a=2, b=3, *args):\n            pass\n\n    - .. code:: javascript\n\n        function foo(a = 2, b = 3, ...args) {\n        }\n\n  * - .. code:: python\n\n        def bar(c, d, *, zoo=2):\n            pass\n\n    - .. code:: javascript\n\n        function bar(c, d, {zoo = 2}={}) {\n        }\n\n  * - .. code:: python\n\n        foo(5, *a_list)\n\n    - .. code:: javascript\n\n        foo(5, ...a_list);\n\n  * - .. code:: python\n\n        bar('a', 'b', zoo=5, another='c')\n\n    - .. code:: javascript\n\n        bar(\"a\", \"b\", {zoo: 5, another: \"c\"});\n\n  * - .. code:: python\n\n        def zoo(e, **kwargs):\n            print(kwargs['bar'])\n\n    - .. code:: javascript\n\n        function zoo(e, kwargs = {}) {\n            console.log(kwargs['bar'])\n        }\n\n  * - .. code:: python\n\n        zoo(4, bar=6)\n\n    - .. code:: javascript\n\n        zoo(4, {bar: 6})\n\nClasses\n~~~~~~~\n\nClasses are translated to ES6 classes as much as they can support. This means:\n\n* no direct support multi-class inheritance, you have to come up with your own\n  solution for now. Many established frameworks support this in a way or\n  another so just use those facilities for now. I've read of some attempts,\n  see for example the suggestion on `Mozilla developer`__ or the other about\n  `simple mixins`__ on ``Exploring ES6``.\n\n* external implementation for class-level non assignment members. Assignment\n  members are those on the body of a class which are defined with: ``a_label =\n  an_expression`` like:\n\n  .. code:: python\n\n    class Foo:\n\n        bar = 'zoo' # or any kind of expression\n\n  These members are removed from the translated body and submitted to a\n  snippet of code that will run after class creation in JS land. This serves\n  two purposes: if the value is *simple*, i.e. it isn't an instance of\n  ``Object``, it will be setup as a *data descriptor*, and it will work mostly\n  like you are used to in Python. The most noticeable caveat is that it will\n  not be accessible through the class as it is in Python, you will have to\n  access the class' *prototype*, so in the case above i mean\n  ``Foo.prototype.bar``.\n\n  The other purpose is to check for *accessor descriptors*. If the value on\n  the right side of the assignment implements a ``get`` function, it will be\n  installed as a property as-is, and its *get* and *set* members will be used\n  to manage the value with the ``bar`` name.\n\n* external implementation for method decorators whose name is different from\n  ``property`` or ``classmethod`` (more on these later on), because these are\n  already supported by the ES6 class notation.\n\n* external implementation for class decorators. One caveat here is that the\n  return value of the decorator has always to be a function with a prototype:\n  unfortunately a ``new`` statement seems not to be *delegable* in any way. So\n  for example a class decorator implemented like the following:\n\n  .. code:: python\n\n    def test_class_deco():\n\n        counter = 0\n\n        def deco(cls):\n            def wrapper(self, *args):\n                counter += 1 # side effect\n                return cls(*args)\n            return wrapper\n\n        @deco\n        class Foo:\n            pass\n\n  will never work. This will work instead:\n\n  .. code:: python\n\n    def deco(cls):\n        def wrapper(self, *args):\n            counter += 1 # side effect\n            return cls.prototype.constructor.call(self, *args)\n        wrapper.prototype = cls.prototype\n        return wrapper\n\n  So either return the original class or setup the wrapper appropriately.\n\n\n__ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Mix-ins\n__ http://exploringjs.com/es6/ch_classes.html#_simple-mixins\n\n\nMethods can be functions or async-functions although the latters aren't\nofficially supported yet by the JavaScript specification. You can disable them\nadding a ``--disable-stage3`` to the command line utility.\n\nPython`s ``super()`` calls are converted accordingly to the type of\ntheir surrounding method: ``super().__init__(foo)`` becomes\n``super(foo)`` in constructors.\n\nFunctions inside methods are translated to arrow functions so that\nthey keep the ``this`` of the surrounding method.\n\n``@property`` and ``@a_property.setter`` are translated to ES6 properties.\n\nMethods decorated with ``@classmethod`` are translated to ``static`` methods.\n\nSpecial methods ``__str__`` and ``__len__`` are translated to\n``toString()`` method and ``get length()`` property, respectively.\n\nArrow method expression to retain the ``this`` at method level aren't\nimplemented yet.\n\n\n.. list-table:: Classes\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n\n  * - .. code:: python\n\n        class Foo(bar):\n            def __init__(self, zoo):\n                super().__init__(zoo)\n\n\n            def meth(self, zoo):\n                super().meth(zoo)\n                def cool(a, b, c):\n                    print(self.zoo)\n\n\n            async def something(self, a_promise):\n                result = await a_promise\n\n            def generator_method(self):\n                yield something\n\n            @property\n            def foo(self):\n                return self._foo\n\n\n            @foo.setter\n            def foo(self, value):\n                self._foo = value\n\n\n            @classmethod\n            def bar(self, val):\n                do_something()\n\n\n            def __len__(self):\n                return 1\n\n\n            def __str__(self):\n                return 'Foo instance'\n\n    - .. code:: javascript\n\n        class Foo extends bar {\n            constructor(zoo) {\n                super(zoo);\n            }\n\n            meth(zoo) {\n                super.meth(zoo);\n                var cool;\n                cool = (a, b, c) => {\n                    console.log(this.zoo);\n                };\n            }\n\n            async something(a_promise) {\n                var result;\n                result = await a_promise;\n            }\n\n            * generator_method() {\n                yield something;\n            }\n\n            get foo() {\n                return this._foo;\n            }\n\n            set foo(value) {\n                self._foo = value;\n            }\n\n            static bar(val) {\n                do_something()\n            }\n\n            get length() {\n                return 1;\n            }\n\n            toString() {\n                return \"Foo instance\";\n            }\n        }\n\nOnly direct descendants of ``Exception`` are threated especially, but\njust for them to be meaningful in JS land and to be detectable with\n``instanceof`` in catch statements.\n\n\n.. list-table:: Exceptions\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n\n  * - .. code:: python\n\n        class MyError(Exception):\n            pass\n\n        raise MyError(\"An error occurred\")\n\n    - .. code:: javascript\n\n        function MyError(message) {\n            this.name = \"MyError\";\n            this.message = (message || \"Custom error MyError\");\n            if (((typeof Error.captureStackTrace) === \"function\")) {\n                Error.captureStackTrace(this, this.constructor);\n            } else {\n                this.stack = new Error(message).stack;\n            }\n        }\n        MyError.prototype = Object.create(Error.prototype);\n        MyError.prototype.constructor = MyError;\n        throw new MyError(\"An error occurred\");\n\n\n``try...except...finally`` statement\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe conversion of this statement is mostly obvious with the only\nexception of the ``except`` part: it translates to a ``catch`` part\ncontaining one ``if`` statement for each non catchall ``except``. If a\ncatchall ``except`` isn't present, the error will be re-thrown, to mimic\nPython's behavior.\n\n.. list-table:: ``try...catch...finally`` statement\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n\n  * - .. code:: python\n\n        try:\n            foo.bar()\n        except MyError:\n            recover()\n        except MyOtherError:\n            recover_bad()\n        finally:\n            foo.on_end()\n\n    - .. code:: javascript\n\n        try {\n            foo.bar();\n        } catch(e) {\n            if ((e instanceof MyError)) {\n                recover();\n            } else {\n                if ((e instanceof MyOtherError)) {\n                    recover_bad()\n                } else {\n                    throw e;\n                }\n            }\n        } finally {\n            foo.on_end();\n        }\n\n\n``import`` statements\n~~~~~~~~~~~~~~~~~~~~~\n\n``import`` and ``from ... import`` statements are converted to ES6\nimports, and the declaration of an ``__all__`` member on the module\ntop level is translated to ES6 named exports.\n\n.. list-table:: import and exports\n  :header-rows: 1\n\n  * - Python\n    - JavaScript\n\n  * - .. code:: python\n\n        import foo, bar\n        import foo.bar as b\n        from foo.bar import hello as h, bye as bb\n        from ..foo.zoo import bar\n        from . import foo\n        from .foo import bar\n\n        from foo__bar import zoo\n\n        from __foo.zoo import bar\n\n        from foo import __default__ as bar\n\n        from __globals__ import test_name\n\n        # this should not trigger variable definition\n        test_name = 2\n\n        # this instead should do it\n        test_foo = True\n\n        __all__ = ['test_name', 'test_foo']\n        __default__ = 'test_name'\n\n    - .. code:: javascript\n\n        var test_foo;\n\n        import * as foo from 'foo';\n        import * as bar from 'bar';\n        import * as b from 'foo/bar';\n        import {hello as h, bye as bb} from 'foo/bar';\n        import {bar} from '../foo/zoo';\n        import * as foo from './foo';\n        import {bar} from './foo';\n\n        import {zoo} from 'foo-bar';\n\n        import {bar} from '@foo/zoo';\n\n        import bar from 'foo';\n\n        test_name = 2;\n        test_foo = true;\n\n        export {test_name, test_foo};\n        export default test_name;\n\nAbout JS **default** ``export`` and ``import``\n++++++++++++++++++++++++++++++++++++++++++++++\n\nIf you want to export something as *default export* in your modules,\ndeclare a ``__default__`` member and assign to it the string of the\nsymbol you want to export. To clarify:\n\n.. code:: python\n\n  foo = 42\n  bar = \"hello\"\n\n  __all__ = ['foo', 'bar']  # foo and bar will be exported as named exports\n  __default__ = 'bar'  # bar will also be exported as the *default*\n\nThis becomes:\n\n.. code:: javascript\n\n  var bar, foo;\n\n  foo = 42;\n  bar = \"hello\";\n\n  export {foo, bar};\n  export default bar;\n\nFor what concerns the ``import``, you can import the default export of\na module using the ``default`` name, as defined by the ES6\nspec. However, as there were some issues reported to me with bundlers\nnot supporting the named import of the default export, a special\n``import`` statement using ``__default__ as name`` has been added that\ndirectly translates to the more common form of ES6 default import. So:\n\n.. code:: python\n\n  from foo import default as bar\n  from foo import __default__ as zoo\n\nTranslates to:\n\n.. code:: javascript\n\n  import {default as bar} from 'foo';\n  import zoo from 'foo';\n\nThe two imports should work the same, see `exploring js section`__ and\nthe linked spec. But if you encounter problems with the former use\nthe latter instead. Keep in mind that you cannot mix the\n``__default__`` import with others (i.e. it needs to be on a line of\nits own) and that you always need to specify an ``... as name ...`` part.\n\n__ http://exploringjs.com/es6/ch_modules.html#sec_importing-exporting-details\n\nStrings\n-------\n\nJavascripthon supports converting Python 3.6+ `f-strings`_ to ES6\n`template literals`_. The expression in the braces gets converted, but\nneither `conversion`__ nor `format_spec`__ are supported: ``f\"Value of\n{a}\"`` becomes ```Value of ${a}``` and ``f\"Value of {self.foo}\"``\nbecomes ```Value of ${this.foo}```.\n\n.. _template literals: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n__ https://docs.python.org/3.6/reference/lexical_analysis.html#grammar-token-conversion\n__ https://docs.python.org/3.6/reference/lexical_analysis.html#grammar-token-format_spec\n\nYou can also write *raw* template literals by using the function\n``tmpl()`` it does only a conversion of the string markers, from those\nused in Python's literal string notation to template literal notation.\n\nThere is also the way to express *tagged templates*, template literals\nthat are parsed using a provided function. This is done by using the\nfunction ``__``. So for example:\n\n.. code:: python\n\n  __('A template ${string} with foo', bar)\n\ngets translated to:\n\n.. code:: javascript\n\n  bar`A template ${string} with foo`\n\n``bar`` will be executed with the value of ``${string}`` as a\nparameter, see the link for `template literals`_ for help.\n\nVerbatim JS\n-----------\n\nYou can intermix Python and JS by using the\n``JS('Your-JS-code-here')`` marker function. It will not be touched by\nthe ES6 transcoder but if you choose to also transpile it to ES5, il\nwill be considered by Babel.\n\n\nExamples\n--------\n\nExecute ``make`` inside the ``examples`` directory.\n\nTesting\n-------\n\nTo run the tests you should run the following at the package root::\n\n  python setup.py test\n\nHow to contribute\n-----------------\n\nSo you like this project and want to contribute? Good!\n\nThese are the terse guidelines::\n\n  There are some TODO points in the readme, or even the issue #6 is\n  quite simple to fix. Feel free to pick what you like.\n\n  The guidelines are to follow PEP8 for coding where possible, so use\n  CamelCase for classes and snake_case for variables, functions and\n  members, and UPPERCASE for constants.\n\n  An exception to this rules are the function names inside\n  ``metapensiero.pj.transformations`` subpackage. Those are matched\n  against names of the AST objects coming from the ``ast`` module in\n  standard lib, so they have to to match even in case.\n\n  Try to keep lines lengths under 79 chars, more or less ;-)\n\n  The workflow is to fork the project, do your stuff, maybe add a test\n  for it and then submit a pull request.\n\n  Have fun\n\nContributing\n------------\n\nAny contribution is welcome, drop me a line or file a pull request.\n\nExternal contributions\n----------------------\n\n* `BrainBacon`__ has made a `JavaScripthon loader`__ for WebPack;\n\n* `icarito`_ has contributed support for JavaScripthon to the\n  `python-webpack-loader`__ for WebPack (Every valid JS package has at\n  least two implementations! ROTFL);\n\n* `icarito`_ has also `integrated JavaScripthon with Nuxt.js and\n  Vue.js`__;\n\n* `chfw`__ has integrated `JavaScripthon into pyecharts`__ to allow\n  Python function translation.\n\n.. _icarito: https://github.com/icarito\n__ https://github.com/BrainBacon\n__ https://github.com/Beg-in/javascripthon-loader\n__ https://github.com/martim00/python-webpack-loader\n__ https://nuxt-python.surge.sh/\n__ https://github.com/chfw\n__ https://github.com/pyecharts/pyecharts\n\nTodo\n----\n\nThis is a brief list of what needs to be done:\n\n* refactor the comprehensions conversion to use the snippets facility;\n* refactor snippets rendering to write them as a module and import\n  them in the module when tree conversion is enabled;\n* convert ``dict()`` calls to ES6 ``Map`` object creation;\n* convert *set* literals to ES6 ``Set`` objects. Also, update\n  \"foo in bar\" to use bar.has(foo) for sets;\n\nDone\n----\n\nStuff that was previously in the todo:\n\n* translate *import* statements to ES6;\n* translate ``__all__`` definition to ES6 module exports;\n* write a command line interface to expose the api;\n* make try...except work again and implement try...finally;\n* convert *async* and *await* to the same proposed features for js\n  (see BabelJS documentation);\n* convert argument defaults on functions to ES6;\n* convert call keyword arguments;\n* convert `*iterable` syntax to ES6 destructuring;\n* use arrow functions for functions created in functions;\n* properties to ES6 properties (getter and setter);\n* take advantage of new duckpy features to use a JS execution context\n  that lasts multiple calls. This way the BabelJS bootstrap affects\n  only the initial execution;\n* class and method decorators;\n* implement *yield*, *yield from* and generator functions;\n* update \"foo in bar\" to use bar.has(foo) for maps;\n\n\nExternal documentation\n----------------------\n\nA good documentation and explanation of ES6 features can be found on\nthe book `Exploring ES6`__ by Axel Rauschmayer (donate if you can).\n\n__ http://exploringjs.com/es6/\n\nAn `extensive documentation`__ about Python's AST objects, very handy.\n\n__ https://greentreesnakes.readthedocs.org/en/latest/\n\nTools\n-----\n\nHave a look at `ECMAScript 6 Tools`__ by Addy Osmani.\n\n__ https://github.com/addyosmani/es6-tools\n\nTo debug *source maps* have a look at `source-map-visualization`__ and\nits `package`__ on npm.\n\n__ https://sokra.github.io/source-map-visualization/\n__ https://www.npmjs.com/package/source-map-visualize\n\nStill i found these links to be helpful:\n\n* `BASE64 VLQ CODEC (COder/DECoder)`__\n* `Testing Source Maps`__\n\n__ http://murzwin.com/base64vlq.html\n__ http://fitzgeraldnick.com/2013/08/02/testing-source-maps.html\n\nHere is an `example`__ of the latter tool showing code generated by\nJavaScripthon, have fun!\n\n__ https://sokra.github.io/source-map-visualization/#base64,ZnVuY3Rpb24gc2ltcGxlX2FsZXJ0KCkgewogICAgd2luZG93LmFsZXJ0KCJIaSB0aGVyZSEiKTsKfQpmdW5jdGlvbiBhdHRhY2hfaGFuZGxlcigpIHsKICAgIHZhciBlbDsKICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiYnV0dG9uIik7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHNpbXBsZV9hbGVydCk7Cn0KYXR0YWNoX2hhbmRsZXIoKTsKCi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0bWxfdGVzdC5qcy5tYXAK,eyJtYXBwaW5ncyI6IkFBT0E7SUFDSUEsTUFBQUMsTUFBQSxDQUFhLFdBQWI7QUFESjtBQUdBOztJQUNJQyxLQUFLQyxRQUFBQyxjQUFBLENBQXVCLFFBQXZCO0lBQ0xGLEVBQUFHLGlCQUFBLENBQW9CLE9BQXBCLEVBQTZCQyxZQUE3QjtBQUZKO0FBSUFDLGNBQUEiLCJzb3VyY2VzIjpbImh0bWxfdGVzdC5weSJdLCJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3aW5kb3ciLCJ3aW5kb3cuYWxlcnQiLCJlbCIsImRvY3VtZW50IiwiZG9jdW1lbnQucXVlcnlTZWxlY3RvciIsImVsLmFkZEV2ZW50TGlzdGVuZXIiLCJzaW1wbGVfYWxlcnQiLCJhdHRhY2hfaGFuZGxlciJdLCJzb3VyY2VzQ29udGVudCI6WyIjIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuIyA6UHJvamVjdDogIHBqIC0tIHRlc3QgZm9yIGh0bWxcbiMgOkNyZWF0ZWQ6ICAgIG1hciAwMSBtYXIgMjAxNiAyMzo0ODo1MiBDRVRcbiMgOkF1dGhvcjogICAgQWxiZXJ0byBCZXJ0aSA8YWxiZXJ0b0BtZXRhcGVuc2llcm8uaXQ+XG4jIDpMaWNlbnNlOiAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHZlcnNpb24gMyBvciBsYXRlclxuI1xuXG5kZWYgc2ltcGxlX2FsZXJ0KCk6XG4gICAgd2luZG93LmFsZXJ0KCdIaSB0aGVyZSEnKVxuXG5kZWYgYXR0YWNoX2hhbmRsZXIoKTpcbiAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaW1wbGVfYWxlcnQpXG5cbmF0dGFjaF9oYW5kbGVyKClcbiJdfQ==,IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIyA6UHJvamVjdDogIHBqIC0tIHRlc3QgZm9yIGh0bWwKIyA6Q3JlYXRlZDogICAgbWFyIDAxIG1hciAyMDE2IDIzOjQ4OjUyIENFVAojIDpBdXRob3I6ICAgIEFsYmVydG8gQmVydGkgPGFsYmVydG9AbWV0YXBlbnNpZXJvLml0PgojIDpMaWNlbnNlOiAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHZlcnNpb24gMyBvciBsYXRlcgojCgpkZWYgc2ltcGxlX2FsZXJ0KCk6CiAgICB3aW5kb3cuYWxlcnQoJ0hpIHRoZXJlIScpCgpkZWYgYXR0YWNoX2hhbmRsZXIoKToKICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uJykKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2ltcGxlX2FsZXJ0KQoKYXR0YWNoX2hhbmRsZXIoKQo=\n\n\nNotes\n-----\n\n* A `post`__ about proposed solutions to use ES6 classes with\n  `Backbone`__. See also the `bug`__ open on github.\n\n__ http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/\n__ http://backbonejs.org\n__ https://github.com/jashkenas/backbone/issues/3560\n\n\n* A `benchmark of ES6 features`__ and `discussion about it`__ on\n  hacker's news.\n\n__ https://kpdecker.github.io/six-speed/\n__ https://news.ycombinator.com/item?id=11203183\n\n* A `compatibility table of ES6 features`__ showing completeness of\n  support feature by feature.\n\n__ http://kangax.github.io/compat-table/es6/\n\n* `A story`__ about ES6 crazyest stuff... symbols\n\n__ http://blog.keithcirkel.co.uk/metaprogramming-in-es6-symbols/\n\n\n.. -*- coding: utf-8 -*-\n\nChanges\n-------\n\n0.11 (2020-03-30)\n~~~~~~~~~~~~~~~~~\n\n- update test infrastructure to work with latest ``pytest``;\n- add support for Python 3.7 and 3.8 (thanks to Richard H\u00f6chenberger).\n- do not crash when translating source with assignment typehints (\n  with the help of Sirenfal)\n\n0.10 (2018-05-12)\n~~~~~~~~~~~~~~~~~\n\n- use Macropy3 version 1.1.0b2 to avoid issues with Django\n\n0.9 (2018-04-19)\n~~~~~~~~~~~~~~~~\n\n- add a ``--source-name`` options to be used together with\n  ``--inline-map`` when using ``-s``;\n- move main repository to gitlab.com/metapensiero;\n- add support for default export and import;\n- add documentation for the ``JS()`` marker function;\n- refactor of the JS AST nodes;\n- fix path splitting and joining on Windows (thanks to Roman Yakubuk);\n\n0.8 (2017-11-16)\n~~~~~~~~~~~~~~~~\n\n- add support for ``except`` sections with more than one exception\n  type and arbitrary exception variable name. Thanks to @devanlai;\n- dict keys conversion fixes;\n- enable ``--inline-map`` when translating a string with ``-s``;\n\n\n0.7 (2017-09-08)\n~~~~~~~~~~~~~~~~\n\n- translate dicts unambiguously, using \"computed member name form\" for\n  keys that aren't strings;\n- use ``macropy`` package to deal with some of the translation\n  details;\n- translate ``int()`` and ``float()``;\n- fix a bug that prevented BabelJS translation when keyword arguments;\n  are present;\n\n0.6 (2017-05-09)\n~~~~~~~~~~~~~~~~~\n\n- allow to define template literals and tagged templates;\n- define package scopes in imports prepending names with ``__``;\n- translate ``issubclass()``;\n- translate lambdas as arrow functions;\n- translate Python 3.6+ f-strings to ES6 template literals;\n- Add translation for ``__instancecheck__`` to ``[Symbol.hasInstance]``;\n- Sort imports alphabetically;\n\n0.5 (2016-11-23)\n~~~~~~~~~~~~~~~~\n\n- translate ``tmpl(\"A string with js ${interpolation}\")`` to ES6 template\n  literals;\n- preliminary support to translate names like ``d_foo`` and ``dd_bar`` to\n  ``$foo`` and ``$$bar``;\n- addded translation of the ``assert`` statement;\n- fixed a bug in ``try...except...finally`` statement when there's no\n  ``except`` section;\n- added translation for ``foo is not bar`` that seems to have dedicated ast\n  node;\n- if the function is defined in a method but starts with ``fn_`` do not convert\n  it to an arrow function. Useful to *not* maintain ``this``;\n- added translation for ``callable`` and ``hasattr/getattr/setattr``;\n- updated for loops to support more than one target, so now its possible to\n  write loops like ``for k, v in iterable(a_map):``;\n- updated documentation;\n- added a new cli option ``-s`` to translate source from the command line or\n  the standard input;\n- fixed a pair of bugs on sourcemaps;\n- added a new cli option ``--eval`` to also evaluate the produced JavaScript\n  using the embedded interpreter;\n- added a new cli option ``--dump-ast`` to print out the ast tree of the\n  passed in string;\n- added sorting to the rendered snippets/decorators/assignments so that their\n  order does not change at every ricompilation;\n- do not re-declare variables declare in outer scopes;\n\n0.4 (2016-11-15)\n~~~~~~~~~~~~~~~~\n\n- updated BabelJS to version 6.18.1;\n- allow to import modules with dashes inside by using dunder-inside-words\n  notation (``foo__bar`` becomes ``foo-bar``);\n- reuse JavaScript interpreter context to speedup translation;\n- update ``in`` operator to support ES6 collections;\n- added support for method and class decorators;\n- added support for class properties and descriptors;\n- add ``for`` loop over JS iterables;\n- allow to loop over inherited properties;\n- fix a bug on ``type()`` translation;\n- support for ``range()`` steps;\n- add support for generator functions and ``yield`` and ``yield from``\n  expressions;\n- optionally load babel-polyfill before evaluating code;\n- fix a bug on sourcemaps having wrong references when there are documentation\n  elements;\n- translate ``__get__()`` and ``__set__()`` to to JS equivalents;\n- implement ``dict(foo).update(bar)`` and ``dict(foo).copy``;\n- documentation improvements;\n\n0.3 (2016-04-08)\n~~~~~~~~~~~~~~~~\n\n- updates to the documentation ( with some fixes made by Hugo Herter,\n  Daniel Kopitchinski and ironmaniiith)\n- Translate ``str(x)`` into ``x.toString()``\n- Add support for properties and classmethods\n- Translate ``__len__`` and ``__str__`` methods to ``get length()``\n  and ``toString()``\n- Add support for slices syntax to ``.slice()``\n- Fixed two bugs in sourcemaps generation\n- Fixed a bug in the ``inport ... from`` translation\n- Correctly include BabelJS minimized code\n- Fix transpiling of stage3 features\n\n0.2 (2016-03-29)\n~~~~~~~~~~~~~~~~\n\n- use arrow functions to retain ``this`` were possible\n- translate ``async/await``\n- refactoring of the ``for`` loops\n- add ability to subtranslate pieces of Python code or objects. Used\n  to template the creation of ``Exception`` sublasses\n- add support for param defaults and keyword arguments\n- updated documentation\n\n0.1 (2016-03-21)\n~~~~~~~~~~~~~~~~\n\n- First cut of the features", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/azazel75/metapensiero.pj", "keywords": "JavaScript EcmaScript compilation translation transpiling babel", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "javascripthon", "package_url": "https://pypi.org/project/javascripthon/", "platform": "", "project_url": "https://pypi.org/project/javascripthon/", "project_urls": {"Homepage": "https://github.com/azazel75/metapensiero.pj"}, "release_url": "https://pypi.org/project/javascripthon/0.11/", "requires_dist": null, "requires_python": "", "summary": "Javascript for refined palates: a Python 3 to ES6 Javascript translator", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://gitlab.com/metapensiero/metapensiero.pj/commits/master\" rel=\"nofollow\"><img alt=\"tests status\" class=\"align-left\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa042bb4ea956eab28e86c2bfa5841139eee848b/68747470733a2f2f6769746c61622e636f6d2f6d65746170656e736965726f2f6d65746170656e736965726f2e706a2f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://gitlab.com/metapensiero/metapensiero.pj/commits/master\" rel=\"nofollow\"><img alt=\"tests coverage\" class=\"align-left\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/343c1d29c1d2e85cb9194e6278b7e30f6d5ded30/68747470733a2f2f6769746c61622e636f6d2f6d65746170656e736965726f2f6d65746170656e736965726f2e706a2f6261646765732f6d61737465722f636f7665726167652e737667\"></a>\n<a href=\"https://gitter.im/javascripthon/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/javascripthon/Lobby\" class=\"align-left\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33e440c9417934a98271eeeb86d67056b0fb06ae/68747470733a2f2f6261646765732e6769747465722e696d2f6a617661736372697074686f6e2f4c6f6262792e737667\"></a>\n<div>\n<img alt=\"JavaScripthon\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bee98606704f0328ffbc5017a9ea0f26ac249bf3/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f666f737362797465732e636f6e74656e742f77702d636f6e74656e742f75706c6f6164732f323031362f30342f4a617661736372697074686f6e2d707974686f6e2d6a732d636f6e7665727465722e6a7067\" width=\"750px\">\n<div>\n(image courtesy of <a href=\"http://fossbytes.com/javascripthon-a-simple-python-to-es6-javascript-translator/\" rel=\"nofollow\">fossBytes</a>)</div>\n</div>\n<p>It is based on previous work by <a href=\"mailto:andrew%40andrewschaaf.com\">Andrew Schaaf</a>.</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>author:</th><td>Alberto Berti</td>\n</tr>\n<tr><th>contact:</th><td><a href=\"mailto:alberto%40metapensiero.it\">alberto<span>@</span>metapensiero<span>.</span>it</a></td>\n</tr>\n<tr><th>license:</th><td>GNU General Public License version 3 or later</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id47\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#brief-list-of-the-supported-python-semantics\" id=\"id48\" rel=\"nofollow\">Brief list of the supported Python semantics</a></li>\n<li><a href=\"#license\" id=\"id49\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#installation\" id=\"id50\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id51\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#reporting-bugs\" id=\"id52\" rel=\"nofollow\">Reporting Bugs</a></li>\n<li><a href=\"#conversions-rosetta-stone\" id=\"id53\" rel=\"nofollow\">Conversions Rosetta Stone</a><ul>\n<li><a href=\"#simple-stuff\" id=\"id54\" rel=\"nofollow\">Simple stuff</a></li>\n<li><a href=\"#for-statement\" id=\"id55\" rel=\"nofollow\"><tt>for</tt> statement</a></li>\n<li><a href=\"#functions\" id=\"id56\" rel=\"nofollow\">Functions</a><ul>\n<li><a href=\"#function-s-args-and-call-parameters\" id=\"id57\" rel=\"nofollow\">Function\u2019s args and call parameters</a></li>\n</ul>\n</li>\n<li><a href=\"#classes\" id=\"id58\" rel=\"nofollow\">Classes</a></li>\n<li><a href=\"#try-except-finally-statement\" id=\"id59\" rel=\"nofollow\"><tt><span class=\"pre\">try...except...finally</span></tt> statement</a></li>\n<li><a href=\"#import-statements\" id=\"id60\" rel=\"nofollow\"><tt>import</tt> statements</a><ul>\n<li><a href=\"#about-js-default-export-and-import\" id=\"id61\" rel=\"nofollow\">About JS <strong>default</strong> <tt>export</tt> and <tt>import</tt></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#strings\" id=\"id62\" rel=\"nofollow\">Strings</a></li>\n<li><a href=\"#verbatim-js\" id=\"id63\" rel=\"nofollow\">Verbatim JS</a></li>\n<li><a href=\"#examples\" id=\"id64\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#testing\" id=\"id65\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#how-to-contribute\" id=\"id66\" rel=\"nofollow\">How to contribute</a></li>\n<li><a href=\"#contributing\" id=\"id67\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#external-contributions\" id=\"id68\" rel=\"nofollow\">External contributions</a></li>\n<li><a href=\"#todo\" id=\"id69\" rel=\"nofollow\">Todo</a></li>\n<li><a href=\"#done\" id=\"id70\" rel=\"nofollow\">Done</a></li>\n<li><a href=\"#external-documentation\" id=\"id71\" rel=\"nofollow\">External documentation</a></li>\n<li><a href=\"#tools\" id=\"id72\" rel=\"nofollow\">Tools</a></li>\n<li><a href=\"#notes\" id=\"id73\" rel=\"nofollow\">Notes</a></li>\n<li><a href=\"#changes\" id=\"id74\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#id36\" id=\"id75\" rel=\"nofollow\">0.11 (2020-03-30)</a></li>\n<li><a href=\"#id37\" id=\"id76\" rel=\"nofollow\">0.10 (2018-05-12)</a></li>\n<li><a href=\"#id38\" id=\"id77\" rel=\"nofollow\">0.9 (2018-04-19)</a></li>\n<li><a href=\"#id39\" id=\"id78\" rel=\"nofollow\">0.8 (2017-11-16)</a></li>\n<li><a href=\"#id40\" id=\"id79\" rel=\"nofollow\">0.7 (2017-09-08)</a></li>\n<li><a href=\"#id41\" id=\"id80\" rel=\"nofollow\">0.6 (2017-05-09)</a></li>\n<li><a href=\"#id42\" id=\"id81\" rel=\"nofollow\">0.5 (2016-11-23)</a></li>\n<li><a href=\"#id43\" id=\"id82\" rel=\"nofollow\">0.4 (2016-11-15)</a></li>\n<li><a href=\"#id44\" id=\"id83\" rel=\"nofollow\">0.3 (2016-04-08)</a></li>\n<li><a href=\"#id45\" id=\"id84\" rel=\"nofollow\">0.2 (2016-03-29)</a></li>\n<li><a href=\"#id46\" id=\"id85\" rel=\"nofollow\">0.1 (2016-03-21)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Introduction</a></h2>\n<p>JavaScripthon is a small and simple Python 3.5+ translator to JavaScript which\naims to be able to translate most of the Python\u2019s core semantics without\nproviding a full python-in-js environment, as most existing translators do. It\ntries to emit code which is simple to read and check. It does so by switching\nto ES6 construct when possible/required. This allows to simplify the needs of\npolyfills for many of the expected Python behaviors.</p>\n<p>It is designed to be the first step in a pipeline that translates your Pyhton\ncode into something that a browser can understand. Usually it is used with\ntools like <a href=\"http://babeljs.io/\" rel=\"nofollow\">BabelJS</a> and <a href=\"http://webpack.github.io/\" rel=\"nofollow\">Webpack</a> to prepare the final bundle that will\nbe served to the browser. The steps from the source code to the bundle are the\nfollowing:</p>\n<ol>\n<li>JavaScripthon converts your Python 3.5+ code to ES6 JavaScript modules;</li>\n<li>the BabelJS loader (configured inside Webpack or standalone) translates the\nES6 JavaScript to ES5 so that the browser can understand it;</li>\n<li>Webpack parses the resulting source code and packages your source code with\nits dependencies by analyzing <tt>import</tt> statements and emits a\n<tt>bundle.js</tt> ready to be served to the browser.</li>\n</ol>\n<p>Along this process the corresponding <a href=\"http://blog.teamtreehouse.com/introduction-source-maps\" rel=\"nofollow\">source maps</a> are read and integrated at\nevery step, allowing you to place breakpoints on your original Python source\nfiles when working with the developer tools of your browser.</p>\n<p>An example of such setup is provided in the <tt>examples</tt> directory.</p>\n<p>In addition to that, you can choose to do most these steps without using\nexternal JS tools. It comes with an <a href=\"https://github.com/amol-/dukpy\" rel=\"nofollow\">embedded js interpreter</a> that loads a\nstandalone version of BabelJS and converts your code to ES5 JavaScript without\nthe need to install anything else. In fact most of the the test you can find\nin <tt>tests/test_evaljs.py</tt> use the embedded interpreter to dual evaluate the\nsource code (one time in Python, one time in JavaScript) and simply check that\nthe results are the same.</p>\n<p>Thanks to that, JavaScripthon can also be used as a server-side library to\ntranslate single functions or classes that you want your browser to load and\nevaluate.</p>\n<p>The interface with the JS world is completely flat, just import the modules\nor use the expected globals (<tt>window</tt>, <tt>document</tt>, etc\u2026) as you\nwould do in JavaScript.</p>\n</div>\n<div id=\"brief-list-of-the-supported-python-semantics\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Brief list of the supported Python semantics</a></h2>\n<p>The fact that JavaScripthon doesn\u2019t <em>reinvent the wheel</em> by reimplementing in\nPython many of the features available with JavaScript translators/transpilers\nallows it to be lean while implementing quite a decent set of the core Python\nsemanticts. These are, briefly:</p>\n<ul>\n<li><p>Misc</p>\n<ul>\n<li><p>list slices;</p>\n</li>\n<li><p>list\u2019s <tt>append()</tt>;</p>\n</li>\n<li><p>dict\u2019s <tt>copy()</tt>, <tt>update()</tt>;</p>\n</li>\n<li><p><tt>len()</tt>;</p>\n</li>\n<li><p><tt>print()</tt>;</p>\n</li>\n<li><p><tt>str()</tt>;</p>\n</li>\n<li><p><tt>type(instance)</tt>;</p>\n</li>\n<li><p><tt>yield</tt> and <tt>yield from</tt>;</p>\n</li>\n<li><p><tt>async</tt> and <tt>await</tt>;</p>\n</li>\n<li><p><tt>import</tt> and <tt><span class=\"pre\">from...import</span></tt> to use any JS module (see <a href=\"#import-statements\" rel=\"nofollow\">import\nstatements</a>);</p>\n</li>\n<li><p><tt>callable()</tt>;</p>\n</li>\n<li><p><tt>hasattr()</tt>, <tt>getattr()</tt>, <tt>setattr()</tt>;</p>\n</li>\n<li><p>template literals with <tt><span class=\"pre\">tmpl('a</span> string with <span class=\"pre\">${substitution}')</span></tt>;</p>\n</li>\n<li><p>simple Python 3.6+ <a href=\"https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings\" rel=\"nofollow\">f-strings</a> (see <a href=\"#strings\" rel=\"nofollow\">Strings</a>);</p>\n</li>\n<li><p>template literals and tagged_templates (see <a href=\"#strings\" rel=\"nofollow\">Strings</a>);</p>\n</li>\n<li><p>names starting with <tt>d_</tt> and <tt>dd_</tt> will have that part replaced with\n<tt>$</tt> and <tt>$$</tt>, respectively;</p>\n</li>\n<li><p>names ending with an underscore will have it removed. Useful for example\nwith the AVA ES6 test runner which has a check named <tt>is</tt>;</p>\n</li>\n<li><p><tt>__instancecheck__</tt> to <tt>[Symbol.hasInstance]</tt>;</p>\n</li>\n<li><p><tt>int</tt> to <tt>parseInt</tt>;</p>\n</li>\n<li><p><tt>float</tt> to <tt>parseFloat</tt>;</p>\n</li>\n<li><p>dictionary keys are unanbiguous when ES6 translation is\nenabled. For example the following code gets translated correctly:</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])</span>\n</pre>\n<p>prints <tt>1</tt> in both Python and JavaScript, while it prints\n<tt>undefined</tt> when translated and evaluated in JavaScript without\nES6.</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Comparisons (see section <a href=\"#simple-stuff\" rel=\"nofollow\">Simple stuff</a> for the details)<ul>\n<li>most of the basics;</li>\n<li><tt>isinstance()</tt> and <tt>issubclass()</tt>;</li>\n<li><tt>element in container</tt> for use with lists, objects, strings and the new\nES6 collections like <tt>Map</tt>, <tt>Set</tt> and so on;</li>\n<li>identity checks: <tt>foo is bar</tt>;</li>\n<li>chained comparisons like <tt>x &lt; y &lt;= z</tt>;</li>\n</ul>\n</li>\n<li>Statements (see section <a href=\"#simple-stuff\" rel=\"nofollow\">Simple stuff</a> and <a href=\"#for-statement\" rel=\"nofollow\">for statement</a> for the\ndetails)<ul>\n<li><tt><span class=\"pre\">if...elif...else</span></tt>;</li>\n<li><tt>while</tt> loop;</li>\n<li><tt>for</tt> over list, over range, over plain js objects, over iterables (JS\niterables);</li>\n<li><tt><span class=\"pre\">try...except...finally</span></tt> with pythonesque behavior (see\n<a href=\"#try-except-finally-statement\" rel=\"nofollow\">try\u2026except\u2026finally statement</a> section for the details);</li>\n<li><tt>assert</tt> statement;</li>\n</ul>\n</li>\n<li>Functions (see <a href=\"#functions\" rel=\"nofollow\">Functions</a> section)<ul>\n<li>standard functions, generator functions, async functions;</li>\n<li>parameters defaults;</li>\n<li>keyword parameters;</li>\n<li>parameters accumulators (<tt>*args</tt> and <tt>**kwargs</tt>), with some\nrestrictions;</li>\n<li>functions in methods are usually converted to \u201carrow functions\u201d (the new\nES6 syntax like <tt>(foo, bar) =&gt; foo * bar;</tt>) because they automatically\nkeep <tt>this</tt> from the enclosing scope. Appending <tt>_fn</tt> to a function\ndeclaration will force the translation to a normal function;</li>\n</ul>\n</li>\n<li>Classes (see <a href=\"#classes\" rel=\"nofollow\">Classes</a> section)<ul>\n<li>single inheritance;</li>\n<li>Exception classes for use with <tt>except</tt> statement;</li>\n<li>class decorators and method decorators;</li>\n<li>property descriptors;</li>\n<li>special handling of <tt>property</tt> and <tt>classmethod</tt> descriptors;</li>\n<li>async methods, generator methods;</li>\n<li>non-function body members (i.e. <tt>member_of_class_Foo = bar</tt>);</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">License</a></h2>\n<p>This package is covered by the <a href=\"https://www.gnu.org/licenses/gpl.html\" rel=\"nofollow\">GNU General Public License version\n3 or later</a>. The code produced by it (i.e. the transpiled\nJavaScript) is <em>your</em> code, and <em>you</em> are free to choose whatever\nlicense you like. The only <tt>runtime</tt> that exists is the file\n<a href=\"https://github.com/azazel75/metapensiero.pj/blob/master/src/metapensiero/pj/snippets.py\" rel=\"nofollow\">snippets.py</a> from which some utility functions are picked when\nnecessary and transpiled together with your code. While it\u2019s\ndistributed with the same license as the other source code, in its\n<em>transpiled</em> form will have the license you choose.</p>\n<p>So, to summarize, the license of the this tool is GPL, but it doesn\u2019t\nextends to the products of this tool, on which you are free to decide.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Installation</a></h2>\n<p>Python 3.5 is required because Python\u2019s AST has changed between 3.4\nand 3.5 and as of now supporting multiple Python versions is not one\nof my priorities.</p>\n<p>To install the package execute the following command:</p>\n<pre>$ pip install javascripthon\n</pre>\n<p>or, if you want install it from sources:</p>\n<pre>$ git clone https://github.com/azazel75/metapensiero.pj\n$ pip install -r metapensiero.pj/requirements.txt\n$ pip install metapensiero.pj\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Usage</a></h2>\n<p>To <em>compile</em> or <em>transpile</em> a python source module, use the\ncommandline:</p>\n<pre>$ python -m metapensiero.pj source.py\n</pre>\n<p>or:</p>\n<pre>$ python -m metapensiero.pj -5 source.py\n</pre>\n<p>to transpile.</p>\n<p>A <tt>pj</tt> console script is also automatically installed:</p>\n<pre>$ pj --help\nusage: pj <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--disable-es6<span class=\"o\">]</span> <span class=\"o\">[</span>--disable-stage3<span class=\"o\">]</span> <span class=\"o\">[</span>-5<span class=\"o\">]</span> <span class=\"o\">[</span>--transform-runtime<span class=\"o\">]</span>\n          <span class=\"o\">[</span>-o OUTPUT<span class=\"o\">]</span> <span class=\"o\">[</span>-d<span class=\"o\">]</span> <span class=\"o\">[</span>--pdb<span class=\"o\">]</span> <span class=\"o\">[</span>-s STRING<span class=\"o\">]</span> <span class=\"o\">[</span>-e<span class=\"o\">]</span>\n          <span class=\"o\">[</span>file <span class=\"o\">[</span>file ...<span class=\"o\">]]</span>\n\nA Python <span class=\"m\">3</span>.5+ to ES6 JavaScript compiler\n\npositional arguments:\n  file                  Python <span class=\"nb\">source</span> file<span class=\"o\">(</span>s<span class=\"o\">)</span> or directory<span class=\"o\">(</span>ies<span class=\"o\">)</span> to convert.\n                        When it is a directory it will be converted\n                        recursively\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --disable-es6         Disable ES6 features during conversion <span class=\"o\">(</span>Ignored <span class=\"k\">if</span>\n                        --es5 is specified<span class=\"o\">)</span>\n  --disable-stage3      Disable ES7 stage3 features during conversion\n  -5, --es5             Also transpile to ES5 using BabelJS.\n  --transform-runtime   Add trasform runtime as plugin during transpile\n  -o OUTPUT, --output OUTPUT\n                        Output file/directory where to save the generated code\n  -d, --debug           Enable error reporting\n  --pdb                 Enter post-mortem debug when an error occurs\n  -s STRING, --string STRING\n                        Convert a string, useful <span class=\"k\">for</span> small snippets. If the\n                        string is <span class=\"s1\">'-'</span> will be <span class=\"nb\">read</span> from the standard input.\n  -e, --eval            Evaluate the string supplied with the -s using the\n                        embedded interpreter and <span class=\"k\">return</span> the last result. This\n                        will convert the input string with all the extensions\n                        enabled <span class=\"o\">(</span>comparable to adding the <span class=\"s1\">'-5'</span> option<span class=\"o\">)</span> and so\n                        it will take some <span class=\"nb\">time</span> because of BabelJS load times.\n</pre>\n<p>This offers many ways to test the framework, both the string conversion and\nthe evaluation using the embedded JavaScript interpreter are very handy. For\nexample:</p>\n<pre>$ pj -s <span class=\"s1\">'\"foo\" if True else \"bar\"'</span>\n<span class=\"o\">(</span><span class=\"nb\">true</span> ? <span class=\"s2\">\"foo\"</span> : <span class=\"s2\">\"bar\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n</pre>\n<p>and evaluating the same statement:</p>\n<pre>$ pj -s <span class=\"s1\">'\"foo\" if True else \"bar\"'</span> -e\nfoo\n</pre>\n<p>You can even try more fancy ES6 features, like destructuring assignment:</p>\n<pre>$ pj -s <span class=\"s2\">\"a, b, c = (2, 3, 5) \\na+b+c\"</span> -e\n<span class=\"m\">10</span>\n</pre>\n</div>\n<div id=\"reporting-bugs\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Reporting Bugs</a></h2>\n<p>The main development repository is the one on <a href=\"https://gitlab.com/metapensiero/metapensiero.pj\" rel=\"nofollow\">gitlab</a>, the one on\ngithub is just a mirror so please report issues and feature requests\n<a href=\"https://gitlab.com/metapensiero/metapensiero.pj/issues\" rel=\"nofollow\">there</a>.</p>\n</div>\n<div id=\"conversions-rosetta-stone\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Conversions Rosetta Stone</a></h2>\n<p>Here is a brief list of examples of the conversions the tool applies,\njust some, but not all.</p>\n<div id=\"simple-stuff\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Simple stuff</a></h3>\n<table>\n<caption>Most are obvious</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">&lt;=</span> <span class=\"n\">z</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"p\">((</span><span class=\"nx\">x</span> <span class=\"o\">&lt;</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">y</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">z</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">z</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1729</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s2\">\"foo\\bar\"</span><span class=\"p\">,</span> <span class=\"p\">{}]</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"mi\">1729</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\\\\bar\"</span><span class=\"p\">,</span> <span class=\"p\">{}];</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">pop</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">if</span> <span class=\"n\">foo</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"o\">....</span>\n<span class=\"k\">elif</span> <span class=\"n\">foo</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"o\">....</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"o\">....</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">foo</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"p\">....</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">foo</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"p\">....</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"p\">....</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">()</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">yield</span> <span class=\"n\">foo</span>\n<span class=\"k\">yield from</span> <span class=\"n\">foo</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"k\">yield</span> <span class=\"nx\">foo</span>\n<span class=\"k\">yield</span><span class=\"o\">*</span> <span class=\"nx\">foo</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Then there are special cases. Here you can see some of these\nconversions. JavaScripthon cannot do a full trace of the sources, so\nsome shortcuts are taken about the conversion of some core, specific\nPython\u2019s semantics. For example Python\u2019s <tt>self</tt> is always converted\nto JavaScript\u2019s <tt>this</tt>, no matter where it\u2019s found. Or <tt>len(foo)</tt>\nis always translated to <tt>foo.length</tt>. Albeit this an API specific of\njust some objects (Strings, Arrays, etc\u2026), it is considered wide\nadopted and something the user may consider obvious.</p>\n<p>The rules of thumb to treat things especially are:</p>\n<ul>\n<li>Is it possible to think of a conversion that covers most of the use\ncases?</li>\n<li>Is ts possible to find a convention widely used on the Python world\nto express this special case?</li>\n</ul>\n<table>\n<caption>There are special cases</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"o\">==</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"o\">===</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"o\">!=</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"o\">!==</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">3</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"s1\">'docstring'</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"cm\">/* docstring */</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"bp\">self</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"k\">this</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"p\">(...).</span><span class=\"nx\">length</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(...)</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"k\">instanceof</span> <span class=\"nx\">y</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"k\">instanceof</span> <span class=\"nx\">y</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"k\">instanceof</span> <span class=\"nx\">z</span><span class=\"p\">)</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">x</span><span class=\"p\">)</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"n\">FirstCharCapitalized</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">any_function</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"k\">new</span> <span class=\"nx\">FirstCharCapitalized</span><span class=\"p\">(...)</span>\n<span class=\"k\">new</span> <span class=\"nx\">any_function</span><span class=\"p\">(...)</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"n\">foo</span> <span class=\"ow\">in</span> <span class=\"n\">bar</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">var</span> <span class=\"nx\">_pj</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">_pj_snippets</span><span class=\"p\">(</span><span class=\"nx\">container</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">in_es6</span><span class=\"p\">(</span><span class=\"nx\">left</span><span class=\"p\">,</span> <span class=\"nx\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(((</span><span class=\"nx\">right</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Array</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">((</span><span class=\"k\">typeof</span> <span class=\"nx\">right</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s2\">\"string\"</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">right</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">left</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(((</span><span class=\"nx\">right</span> <span class=\"k\">instanceof</span> <span class=\"nx\">Map</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">right</span> <span class=\"k\">instanceof</span> <span class=\"nx\">Set</span><span class=\"p\">)</span>\n                <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">right</span> <span class=\"k\">instanceof</span> <span class=\"nx\">WeakMap</span><span class=\"p\">)</span>\n                <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">right</span> <span class=\"k\">instanceof</span> <span class=\"nx\">WeakSet</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nx\">right</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"nx\">left</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">left</span> <span class=\"k\">in</span> <span class=\"nx\">right</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">container</span><span class=\"p\">[</span><span class=\"s2\">\"in_es6\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">in_es6</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">container</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">_pj</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"nx\">_pj_snippets</span><span class=\"p\">(</span><span class=\"nx\">_pj</span><span class=\"p\">);</span>\n<span class=\"nx\">_pj</span><span class=\"p\">.</span><span class=\"nx\">in_es6</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"p\">);</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:]</span>\n<span class=\"n\">foo</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">bar</span><span class=\"p\">);</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">(</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"p\">);</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">foo</span><span class=\"p\">);</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"for-statement\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\"><tt>for</tt> statement</a></h3>\n<p>The <tt>for</tt> statement by default is translated as if the object of the\ncycle is a list but has two special cases:</p>\n<table>\n<caption><tt>for</tt> loops</caption>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n<th>notes</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a_dict</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">var</span> <span class=\"nx\">_pj_a</span> <span class=\"o\">=</span> <span class=\"nx\">a_dict</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">el</span> <span class=\"k\">in</span> <span class=\"nx\">_pj_a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">_pj_a</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n<td>With this kind of loop if you use <tt>dict(a_dict, True)</tt> the check on\n<tt>hasOwnProperty()</tt> will not be added, so the loop will include\n<em>inherited</em> (and <em>enumerable</em>) properties.</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">an_array</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">el</span><span class=\"p\">,</span> <span class=\"nx\">_pj_c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">_pj_a</span> <span class=\"o\">=</span> <span class=\"nx\">an_array</span><span class=\"p\">,</span> <span class=\"nx\">_pj_b</span> <span class=\"o\">=</span> <span class=\"nx\">_pj_a</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n      <span class=\"p\">(</span><span class=\"nx\">_pj_c</span> <span class=\"o\">&lt;</span> <span class=\"nx\">_pj_b</span><span class=\"p\">);</span> <span class=\"nx\">_pj_c</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">_pj_a</span><span class=\"p\">[</span><span class=\"nx\">_pj_c</span><span class=\"p\">];</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n<td>\u00a0</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">_pj_a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">_pj_a</span><span class=\"p\">);</span> <span class=\"nx\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n<td>\u00a0</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">iterable</span><span class=\"p\">(</span><span class=\"n\">a_set</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">var</span> <span class=\"nx\">_pj_a</span> <span class=\"o\">=</span> <span class=\"nx\">a_set</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">el</span> <span class=\"k\">of</span>  <span class=\"nx\">_pj_a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n<td>This will loop over all the iterables, like instances of <tt>Array</tt>,\n<tt>Map</tt>, <tt>Set</tt>, etc. <strong>but not over normal objects</strong>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"functions\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Functions</a></h3>\n<p>Functions are very well supported. This should be obvious, you can say. Really\nit is not so simple, if we mean functions in their broader meaning, including\nthe  <em>async functions</em> and <em>generator functions</em>.</p>\n<table>\n<caption>The various types of functions at play</caption>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n<th>notes</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n<td>Normal functions</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">iterable</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">function</span><span class=\"o\">*</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">...</span> <span class=\"p\">{</span> <span class=\"c1\">// loop control omitted for brevity\n</span>        <span class=\"k\">yield</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"k\">of</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n<td>Generator functions. They return an iterable and to correctly loop over\nit you should use the <tt><span class=\"pre\">iterable(...)</span></tt> call, so that the Python\u2019s\n<tt><span class=\"pre\">for...in</span></tt> will be converted into a <tt><span class=\"pre\">for...of</span></tt></td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">some_promise_based_async</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">await</span> <span class=\"nx\">some_promised_base_async</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n<td>Async functions. They make use of the new <tt>Promise</tt> class, which is\nalso available.</td>\n</tr>\n</tbody>\n</table>\n<div id=\"function-s-args-and-call-parameters\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">Function\u2019s args and call parameters</a></h4>\n<p>Parmeters defaults and keyword parameters are supported and so is <tt>*foo</tt>\naccumulator, which is translated into the ES6 rest expression (<tt><span class=\"pre\">...foo</span></tt>).</p>\n<p>The only caveat is that JS support for keyword args sucks, so you will have to\n<strong>remember to fill in all the arguments before specifying keywords</strong>.</p>\n<p>On function definitions, <tt>**kwargs</tt> is supported if it\u2019s alone, i.e. without\neither keyword arguments or <tt>*args</tt>.</p>\n<table>\n<caption>function\u2019s args and call parameters</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">zoo</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">function</span> <span class=\"nx\">bar</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">zoo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">}</span><span class=\"o\">=</span><span class=\"p\">{})</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">a_list</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">a_list</span><span class=\"p\">);</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"n\">zoo</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">another</span><span class=\"o\">=</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nx\">bar</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">zoo</span><span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nx\">another</span><span class=\"o\">:</span> <span class=\"s2\">\"c\"</span><span class=\"p\">});</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"k\">def</span> <span class=\"nf\">zoo</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">])</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">function</span> <span class=\"nx\">zoo</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n<tr><td><pre>\n<span class=\"n\">zoo</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"nx\">zoo</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"p\">})</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"classes\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">Classes</a></h3>\n<p>Classes are translated to ES6 classes as much as they can support. This means:</p>\n<ul>\n<li><p>no direct support multi-class inheritance, you have to come up with your own\nsolution for now. Many established frameworks support this in a way or\nanother so just use those facilities for now. I\u2019ve read of some attempts,\nsee for example the suggestion on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Mix-ins\" rel=\"nofollow\">Mozilla developer</a> or the other about\n<a href=\"http://exploringjs.com/es6/ch_classes.html#_simple-mixins\" rel=\"nofollow\">simple mixins</a> on <tt>Exploring ES6</tt>.</p>\n</li>\n<li><p>external implementation for class-level non assignment members. Assignment\nmembers are those on the body of a class which are defined with: <tt>a_label =\nan_expression</tt> like:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"s1\">'zoo'</span> <span class=\"c1\"># or any kind of expression</span>\n</pre>\n<p>These members are removed from the translated body and submitted to a\nsnippet of code that will run after class creation in JS land. This serves\ntwo purposes: if the value is <em>simple</em>, i.e. it isn\u2019t an instance of\n<tt>Object</tt>, it will be setup as a <em>data descriptor</em>, and it will work mostly\nlike you are used to in Python. The most noticeable caveat is that it will\nnot be accessible through the class as it is in Python, you will have to\naccess the class\u2019 <em>prototype</em>, so in the case above i mean\n<tt>Foo.prototype.bar</tt>.</p>\n<p>The other purpose is to check for <em>accessor descriptors</em>. If the value on\nthe right side of the assignment implements a <tt>get</tt> function, it will be\ninstalled as a property as-is, and its <em>get</em> and <em>set</em> members will be used\nto manage the value with the <tt>bar</tt> name.</p>\n</li>\n<li><p>external implementation for method decorators whose name is different from\n<tt>property</tt> or <tt>classmethod</tt> (more on these later on), because these are\nalready supported by the ES6 class notation.</p>\n</li>\n<li><p>external implementation for class decorators. One caveat here is that the\nreturn value of the decorator has always to be a function with a prototype:\nunfortunately a <tt>new</tt> statement seems not to be <em>delegable</em> in any way. So\nfor example a class decorator implemented like the following:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_class_deco</span><span class=\"p\">():</span>\n\n    <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deco</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n            <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"c1\"># side effect</span>\n            <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n    <span class=\"nd\">@deco</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>will never work. This will work instead:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">deco</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"c1\"># side effect</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">prototype</span><span class=\"o\">.</span><span class=\"n\">constructor</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">prototype</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">prototype</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n</pre>\n<p>So either return the original class or setup the wrapper appropriately.</p>\n</li>\n</ul>\n<p>Methods can be functions or async-functions although the latters aren\u2019t\nofficially supported yet by the JavaScript specification. You can disable them\nadding a <tt><span class=\"pre\">--disable-stage3</span></tt> to the command line utility.</p>\n<p>Python`s <tt>super()</tt> calls are converted accordingly to the type of\ntheir surrounding method: <tt><span class=\"pre\">super().__init__(foo)</span></tt> becomes\n<tt>super(foo)</tt> in constructors.</p>\n<p>Functions inside methods are translated to arrow functions so that\nthey keep the <tt>this</tt> of the surrounding method.</p>\n<p><tt>@property</tt> and <tt>@a_property.setter</tt> are translated to ES6 properties.</p>\n<p>Methods decorated with <tt>@classmethod</tt> are translated to <tt>static</tt> methods.</p>\n<p>Special methods <tt>__str__</tt> and <tt>__len__</tt> are translated to\n<tt>toString()</tt> method and <tt>get length()</tt> property, respectively.</p>\n<p>Arrow method expression to retain the <tt>this</tt> at method level aren\u2019t\nimplemented yet.</p>\n<table>\n<caption>Classes</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">zoo</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">zoo</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">meth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">zoo</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">meth</span><span class=\"p\">(</span><span class=\"n\">zoo</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">cool</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zoo</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a_promise</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">a_promise</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">generator_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"n\">something</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_foo</span>\n\n\n    <span class=\"nd\">@foo</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_foo</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"n\">do_something</span><span class=\"p\">()</span>\n\n\n    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'Foo instance'</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kr\">class</span> <span class=\"nx\">Foo</span> <span class=\"kr\">extends</span> <span class=\"nx\">bar</span> <span class=\"p\">{</span>\n    <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">zoo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">super</span><span class=\"p\">(</span><span class=\"nx\">zoo</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">meth</span><span class=\"p\">(</span><span class=\"nx\">zoo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">super</span><span class=\"p\">.</span><span class=\"nx\">meth</span><span class=\"p\">(</span><span class=\"nx\">zoo</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">cool</span><span class=\"p\">;</span>\n        <span class=\"nx\">cool</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">zoo</span><span class=\"p\">);</span>\n        <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">async</span> <span class=\"nx\">something</span><span class=\"p\">(</span><span class=\"nx\">a_promise</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">a_promise</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"o\">*</span> <span class=\"nx\">generator_method</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">yield</span> <span class=\"nx\">something</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">get</span> <span class=\"nx\">foo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_foo</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">set</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">_foo</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">static</span> <span class=\"nx\">bar</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">do_something</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">get</span> <span class=\"nx\">length</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">toString</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Foo instance\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Only direct descendants of <tt>Exception</tt> are threated especially, but\njust for them to be meaningful in JS land and to be detectable with\n<tt>instanceof</tt> in catch statements.</p>\n<table>\n<caption>Exceptions</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"k\">class</span> <span class=\"nc\">MyError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">raise</span> <span class=\"n\">MyError</span><span class=\"p\">(</span><span class=\"s2\">\"An error occurred\"</span><span class=\"p\">)</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">function</span> <span class=\"nx\">MyError</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"MyError\"</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">message</span> <span class=\"o\">||</span> <span class=\"s2\">\"Custom error MyError\"</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(((</span><span class=\"k\">typeof</span> <span class=\"nb\">Error</span><span class=\"p\">.</span><span class=\"nx\">captureStackTrace</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s2\">\"function\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nb\">Error</span><span class=\"p\">.</span><span class=\"nx\">captureStackTrace</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">stack</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">MyError</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nb\">Error</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">);</span>\n<span class=\"nx\">MyError</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">constructor</span> <span class=\"o\">=</span> <span class=\"nx\">MyError</span><span class=\"p\">;</span>\n<span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">MyError</span><span class=\"p\">(</span><span class=\"s2\">\"An error occurred\"</span><span class=\"p\">);</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"try-except-finally-statement\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\"><tt><span class=\"pre\">try...except...finally</span></tt> statement</a></h3>\n<p>The conversion of this statement is mostly obvious with the only\nexception of the <tt>except</tt> part: it translates to a <tt>catch</tt> part\ncontaining one <tt>if</tt> statement for each non catchall <tt>except</tt>. If a\ncatchall <tt>except</tt> isn\u2019t present, the error will be re-thrown, to mimic\nPython\u2019s behavior.</p>\n<table>\n<caption><tt><span class=\"pre\">try...catch...finally</span></tt> statement</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">MyError</span><span class=\"p\">:</span>\n    <span class=\"n\">recover</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">MyOtherError</span><span class=\"p\">:</span>\n    <span class=\"n\">recover_bad</span><span class=\"p\">()</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">on_end</span><span class=\"p\">()</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">();</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">e</span> <span class=\"k\">instanceof</span> <span class=\"nx\">MyError</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">recover</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">e</span> <span class=\"k\">instanceof</span> <span class=\"nx\">MyOtherError</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">recover_bad</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"nx\">e</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">finally</span> <span class=\"p\">{</span>\n    <span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">on_end</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"import-statements\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\"><tt>import</tt> statements</a></h3>\n<p><tt>import</tt> and <tt>from ... import</tt> statements are converted to ES6\nimports, and the declaration of an <tt>__all__</tt> member on the module\ntop level is translated to ES6 named exports.</p>\n<table>\n<caption>import and exports</caption>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JavaScript</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><pre>\n<span class=\"kn\">import</span> <span class=\"nn\">foo</span><span class=\"o\">,</span> <span class=\"nn\">bar</span>\n<span class=\"kn\">import</span> <span class=\"nn\">foo.bar</span> <span class=\"k\">as</span> <span class=\"nn\">b</span>\n<span class=\"kn\">from</span> <span class=\"nn\">foo.bar</span> <span class=\"kn\">import</span> <span class=\"n\">hello</span> <span class=\"k\">as</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">bye</span> <span class=\"k\">as</span> <span class=\"n\">bb</span>\n<span class=\"kn\">from</span> <span class=\"nn\">..foo.zoo</span> <span class=\"kn\">import</span> <span class=\"n\">bar</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">foo</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.foo</span> <span class=\"kn\">import</span> <span class=\"n\">bar</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">foo__bar</span> <span class=\"kn\">import</span> <span class=\"n\">zoo</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__foo.zoo</span> <span class=\"kn\">import</span> <span class=\"n\">bar</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">foo</span> <span class=\"kn\">import</span> <span class=\"n\">__default__</span> <span class=\"k\">as</span> <span class=\"n\">bar</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__globals__</span> <span class=\"kn\">import</span> <span class=\"n\">test_name</span>\n\n<span class=\"c1\"># this should not trigger variable definition</span>\n<span class=\"n\">test_name</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># this instead should do it</span>\n<span class=\"n\">test_foo</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'test_name'</span><span class=\"p\">,</span> <span class=\"s1\">'test_foo'</span><span class=\"p\">]</span>\n<span class=\"n\">__default__</span> <span class=\"o\">=</span> <span class=\"s1\">'test_name'</span>\n</pre>\n</td>\n<td><pre>\n<span class=\"kd\">var</span> <span class=\"nx\">test_foo</span><span class=\"p\">;</span>\n\n<span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">foo</span> <span class=\"nx\">from</span> <span class=\"s1\">'foo'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">bar</span> <span class=\"nx\">from</span> <span class=\"s1\">'bar'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">b</span> <span class=\"nx\">from</span> <span class=\"s1\">'foo/bar'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">hello</span> <span class=\"nx\">as</span> <span class=\"nx\">h</span><span class=\"p\">,</span> <span class=\"nx\">bye</span> <span class=\"nx\">as</span> <span class=\"nx\">bb</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'foo/bar'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">bar</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'../foo/zoo'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">foo</span> <span class=\"nx\">from</span> <span class=\"s1\">'./foo'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">bar</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'./foo'</span><span class=\"p\">;</span>\n\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">zoo</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'foo-bar'</span><span class=\"p\">;</span>\n\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">bar</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'@foo/zoo'</span><span class=\"p\">;</span>\n\n<span class=\"kr\">import</span> <span class=\"nx\">bar</span> <span class=\"nx\">from</span> <span class=\"s1\">'foo'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">test_name</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"nx\">test_foo</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span> <span class=\"p\">{</span><span class=\"nx\">test_name</span><span class=\"p\">,</span> <span class=\"nx\">test_foo</span><span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">test_name</span><span class=\"p\">;</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n<div id=\"about-js-default-export-and-import\">\n<h4><a href=\"#table-of-contents\" rel=\"nofollow\">About JS <strong>default</strong> <tt>export</tt> and <tt>import</tt></a></h4>\n<p>If you want to export something as <em>default export</em> in your modules,\ndeclare a <tt>__default__</tt> member and assign to it the string of the\nsymbol you want to export. To clarify:</p>\n<pre><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello\"</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">]</span>  <span class=\"c1\"># foo and bar will be exported as named exports</span>\n<span class=\"n\">__default__</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>  <span class=\"c1\"># bar will also be exported as the *default*</span>\n</pre>\n<p>This becomes:</p>\n<pre><span class=\"kd\">var</span> <span class=\"nx\">bar</span><span class=\"p\">,</span> <span class=\"nx\">foo</span><span class=\"p\">;</span>\n\n<span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span> <span class=\"p\">{</span><span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"p\">};</span>\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">bar</span><span class=\"p\">;</span>\n</pre>\n<p>For what concerns the <tt>import</tt>, you can import the default export of\na module using the <tt>default</tt> name, as defined by the ES6\nspec. However, as there were some issues reported to me with bundlers\nnot supporting the named import of the default export, a special\n<tt>import</tt> statement using <tt>__default__ as name</tt> has been added that\ndirectly translates to the more common form of ES6 default import. So:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">foo</span> <span class=\"kn\">import</span> <span class=\"n\">default</span> <span class=\"k\">as</span> <span class=\"n\">bar</span>\n<span class=\"kn\">from</span> <span class=\"nn\">foo</span> <span class=\"kn\">import</span> <span class=\"n\">__default__</span> <span class=\"k\">as</span> <span class=\"n\">zoo</span>\n</pre>\n<p>Translates to:</p>\n<pre><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"k\">default</span> <span class=\"nx\">as</span> <span class=\"nx\">bar</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'foo'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">zoo</span> <span class=\"nx\">from</span> <span class=\"s1\">'foo'</span><span class=\"p\">;</span>\n</pre>\n<p>The two imports should work the same, see <a href=\"http://exploringjs.com/es6/ch_modules.html#sec_importing-exporting-details\" rel=\"nofollow\">exploring js section</a> and\nthe linked spec. But if you encounter problems with the former use\nthe latter instead. Keep in mind that you cannot mix the\n<tt>__default__</tt> import with others (i.e. it needs to be on a line of\nits own) and that you always need to specify an <tt>... as name ...</tt> part.</p>\n</div>\n</div>\n</div>\n<div id=\"strings\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Strings</a></h2>\n<p>Javascripthon supports converting Python 3.6+ <a href=\"https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings\" rel=\"nofollow\">f-strings</a> to ES6\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" rel=\"nofollow\">template literals</a>. The expression in the braces gets converted, but\nneither <a href=\"https://docs.python.org/3.6/reference/lexical_analysis.html#grammar-token-conversion\" rel=\"nofollow\">conversion</a> nor <a href=\"https://docs.python.org/3.6/reference/lexical_analysis.html#grammar-token-format_spec\" rel=\"nofollow\">format_spec</a> are supported: <tt>f\"Value of\n{a}\"</tt> becomes <tt>`Value of ${a}`</tt> and <tt>f\"Value of {self.foo}\"</tt>\nbecomes <tt>`Value of ${this.foo}`</tt>.</p>\n<p>You can also write <em>raw</em> template literals by using the function\n<tt>tmpl()</tt> it does only a conversion of the string markers, from those\nused in Python\u2019s literal string notation to template literal notation.</p>\n<p>There is also the way to express <em>tagged templates</em>, template literals\nthat are parsed using a provided function. This is done by using the\nfunction <tt>__</tt>. So for example:</p>\n<pre><span class=\"n\">__</span><span class=\"p\">(</span><span class=\"s1\">'A template $</span><span class=\"si\">{string}</span><span class=\"s1\"> with foo'</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n<p>gets translated to:</p>\n<pre><span class=\"nx\">bar</span><span class=\"sb\">`A template </span><span class=\"si\">${</span><span class=\"nx\">string</span><span class=\"si\">}</span><span class=\"sb\"> with foo`</span>\n</pre>\n<p><tt>bar</tt> will be executed with the value of <tt>${string}</tt> as a\nparameter, see the link for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" rel=\"nofollow\">template literals</a> for help.</p>\n</div>\n<div id=\"verbatim-js\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Verbatim JS</a></h2>\n<p>You can intermix Python and JS by using the\n<tt><span class=\"pre\">JS('Your-JS-code-here')</span></tt> marker function. It will not be touched by\nthe ES6 transcoder but if you choose to also transpile it to ES5, il\nwill be considered by Babel.</p>\n</div>\n<div id=\"examples\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Examples</a></h2>\n<p>Execute <tt>make</tt> inside the <tt>examples</tt> directory.</p>\n</div>\n<div id=\"testing\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Testing</a></h2>\n<p>To run the tests you should run the following at the package root:</p>\n<pre>python setup.py test\n</pre>\n</div>\n<div id=\"how-to-contribute\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">How to contribute</a></h2>\n<p>So you like this project and want to contribute? Good!</p>\n<p>These are the terse guidelines:</p>\n<pre>There are some TODO points in the readme, or even the issue #6 is\nquite simple to fix. Feel free to pick what you like.\n\nThe guidelines are to follow PEP8 for coding where possible, so use\nCamelCase for classes and snake_case for variables, functions and\nmembers, and UPPERCASE for constants.\n\nAn exception to this rules are the function names inside\n``metapensiero.pj.transformations`` subpackage. Those are matched\nagainst names of the AST objects coming from the ``ast`` module in\nstandard lib, so they have to to match even in case.\n\nTry to keep lines lengths under 79 chars, more or less ;-)\n\nThe workflow is to fork the project, do your stuff, maybe add a test\nfor it and then submit a pull request.\n\nHave fun\n</pre>\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Contributing</a></h2>\n<p>Any contribution is welcome, drop me a line or file a pull request.</p>\n</div>\n<div id=\"external-contributions\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">External contributions</a></h2>\n<ul>\n<li><a href=\"https://github.com/BrainBacon\" rel=\"nofollow\">BrainBacon</a> has made a <a href=\"https://github.com/Beg-in/javascripthon-loader\" rel=\"nofollow\">JavaScripthon loader</a> for WebPack;</li>\n<li><a href=\"https://github.com/icarito\" rel=\"nofollow\">icarito</a> has contributed support for JavaScripthon to the\n<a href=\"https://github.com/martim00/python-webpack-loader\" rel=\"nofollow\">python-webpack-loader</a> for WebPack (Every valid JS package has at\nleast two implementations! ROTFL);</li>\n<li><a href=\"https://github.com/icarito\" rel=\"nofollow\">icarito</a> has also <a href=\"https://nuxt-python.surge.sh/\" rel=\"nofollow\">integrated JavaScripthon with Nuxt.js and\nVue.js</a>;</li>\n<li><a href=\"https://github.com/chfw\" rel=\"nofollow\">chfw</a> has integrated <a href=\"https://github.com/pyecharts/pyecharts\" rel=\"nofollow\">JavaScripthon into pyecharts</a> to allow\nPython function translation.</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Todo</a></h2>\n<p>This is a brief list of what needs to be done:</p>\n<ul>\n<li>refactor the comprehensions conversion to use the snippets facility;</li>\n<li>refactor snippets rendering to write them as a module and import\nthem in the module when tree conversion is enabled;</li>\n<li>convert <tt>dict()</tt> calls to ES6 <tt>Map</tt> object creation;</li>\n<li>convert <em>set</em> literals to ES6 <tt>Set</tt> objects. Also, update\n\u201cfoo in bar\u201d to use bar.has(foo) for sets;</li>\n</ul>\n</div>\n<div id=\"done\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Done</a></h2>\n<p>Stuff that was previously in the todo:</p>\n<ul>\n<li>translate <em>import</em> statements to ES6;</li>\n<li>translate <tt>__all__</tt> definition to ES6 module exports;</li>\n<li>write a command line interface to expose the api;</li>\n<li>make try\u2026except work again and implement try\u2026finally;</li>\n<li>convert <em>async</em> and <em>await</em> to the same proposed features for js\n(see BabelJS documentation);</li>\n<li>convert argument defaults on functions to ES6;</li>\n<li>convert call keyword arguments;</li>\n<li>convert <cite>*iterable</cite> syntax to ES6 destructuring;</li>\n<li>use arrow functions for functions created in functions;</li>\n<li>properties to ES6 properties (getter and setter);</li>\n<li>take advantage of new duckpy features to use a JS execution context\nthat lasts multiple calls. This way the BabelJS bootstrap affects\nonly the initial execution;</li>\n<li>class and method decorators;</li>\n<li>implement <em>yield</em>, <em>yield from</em> and generator functions;</li>\n<li>update \u201cfoo in bar\u201d to use bar.has(foo) for maps;</li>\n</ul>\n</div>\n<div id=\"external-documentation\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">External documentation</a></h2>\n<p>A good documentation and explanation of ES6 features can be found on\nthe book <a href=\"http://exploringjs.com/es6/\" rel=\"nofollow\">Exploring ES6</a> by Axel Rauschmayer (donate if you can).</p>\n<p>An <a href=\"https://greentreesnakes.readthedocs.org/en/latest/\" rel=\"nofollow\">extensive documentation</a> about Python\u2019s AST objects, very handy.</p>\n</div>\n<div id=\"tools\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Tools</a></h2>\n<p>Have a look at <a href=\"https://github.com/addyosmani/es6-tools\" rel=\"nofollow\">ECMAScript 6 Tools</a> by Addy Osmani.</p>\n<p>To debug <em>source maps</em> have a look at <a href=\"https://sokra.github.io/source-map-visualization/\" rel=\"nofollow\">source-map-visualization</a> and\nits <a href=\"https://www.npmjs.com/package/source-map-visualize\" rel=\"nofollow\">package</a> on npm.</p>\n<p>Still i found these links to be helpful:</p>\n<ul>\n<li><a href=\"http://murzwin.com/base64vlq.html\" rel=\"nofollow\">BASE64 VLQ CODEC (COder/DECoder)</a></li>\n<li><a href=\"http://fitzgeraldnick.com/2013/08/02/testing-source-maps.html\" rel=\"nofollow\">Testing Source Maps</a></li>\n</ul>\n<p>Here is an <a href=\"https://sokra.github.io/source-map-visualization/#base64,ZnVuY3Rpb24gc2ltcGxlX2FsZXJ0KCkgewogICAgd2luZG93LmFsZXJ0KCJIaSB0aGVyZSEiKTsKfQpmdW5jdGlvbiBhdHRhY2hfaGFuZGxlcigpIHsKICAgIHZhciBlbDsKICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiYnV0dG9uIik7CiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHNpbXBsZV9hbGVydCk7Cn0KYXR0YWNoX2hhbmRsZXIoKTsKCi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0bWxfdGVzdC5qcy5tYXAK,eyJtYXBwaW5ncyI6IkFBT0E7SUFDSUEsTUFBQUMsTUFBQSxDQUFhLFdBQWI7QUFESjtBQUdBOztJQUNJQyxLQUFLQyxRQUFBQyxjQUFBLENBQXVCLFFBQXZCO0lBQ0xGLEVBQUFHLGlCQUFBLENBQW9CLE9BQXBCLEVBQTZCQyxZQUE3QjtBQUZKO0FBSUFDLGNBQUEiLCJzb3VyY2VzIjpbImh0bWxfdGVzdC5weSJdLCJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3aW5kb3ciLCJ3aW5kb3cuYWxlcnQiLCJlbCIsImRvY3VtZW50IiwiZG9jdW1lbnQucXVlcnlTZWxlY3RvciIsImVsLmFkZEV2ZW50TGlzdGVuZXIiLCJzaW1wbGVfYWxlcnQiLCJhdHRhY2hfaGFuZGxlciJdLCJzb3VyY2VzQ29udGVudCI6WyIjIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuIyA6UHJvamVjdDogIHBqIC0tIHRlc3QgZm9yIGh0bWxcbiMgOkNyZWF0ZWQ6ICAgIG1hciAwMSBtYXIgMjAxNiAyMzo0ODo1MiBDRVRcbiMgOkF1dGhvcjogICAgQWxiZXJ0byBCZXJ0aSA8YWxiZXJ0b0BtZXRhcGVuc2llcm8uaXQ+XG4jIDpMaWNlbnNlOiAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHZlcnNpb24gMyBvciBsYXRlclxuI1xuXG5kZWYgc2ltcGxlX2FsZXJ0KCk6XG4gICAgd2luZG93LmFsZXJ0KCdIaSB0aGVyZSEnKVxuXG5kZWYgYXR0YWNoX2hhbmRsZXIoKTpcbiAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaW1wbGVfYWxlcnQpXG5cbmF0dGFjaF9oYW5kbGVyKClcbiJdfQ==,IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIyA6UHJvamVjdDogIHBqIC0tIHRlc3QgZm9yIGh0bWwKIyA6Q3JlYXRlZDogICAgbWFyIDAxIG1hciAyMDE2IDIzOjQ4OjUyIENFVAojIDpBdXRob3I6ICAgIEFsYmVydG8gQmVydGkgPGFsYmVydG9AbWV0YXBlbnNpZXJvLml0PgojIDpMaWNlbnNlOiAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHZlcnNpb24gMyBvciBsYXRlcgojCgpkZWYgc2ltcGxlX2FsZXJ0KCk6CiAgICB3aW5kb3cuYWxlcnQoJ0hpIHRoZXJlIScpCgpkZWYgYXR0YWNoX2hhbmRsZXIoKToKICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uJykKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2ltcGxlX2FsZXJ0KQoKYXR0YWNoX2hhbmRsZXIoKQo=\" rel=\"nofollow\">example</a> of the latter tool showing code generated by\nJavaScripthon, have fun!</p>\n</div>\n<div id=\"notes\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Notes</a></h2>\n<ul>\n<li>A <a href=\"http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/\" rel=\"nofollow\">post</a> about proposed solutions to use ES6 classes with\n<a href=\"http://backbonejs.org\" rel=\"nofollow\">Backbone</a>. See also the <a href=\"https://github.com/jashkenas/backbone/issues/3560\" rel=\"nofollow\">bug</a> open on github.</li>\n</ul>\n<ul>\n<li>A <a href=\"https://kpdecker.github.io/six-speed/\" rel=\"nofollow\">benchmark of ES6 features</a> and <a href=\"https://news.ycombinator.com/item?id=11203183\" rel=\"nofollow\">discussion about it</a> on\nhacker\u2019s news.</li>\n</ul>\n<ul>\n<li>A <a href=\"http://kangax.github.io/compat-table/es6/\" rel=\"nofollow\">compatibility table of ES6 features</a> showing completeness of\nsupport feature by feature.</li>\n</ul>\n<ul>\n<li><a href=\"http://blog.keithcirkel.co.uk/metaprogramming-in-es6-symbols/\" rel=\"nofollow\">A story</a> about ES6 crazyest stuff\u2026 symbols</li>\n</ul>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#table-of-contents\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"id36\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.11 (2020-03-30)</a></h3>\n<ul>\n<li>update test infrastructure to work with latest <tt>pytest</tt>;</li>\n<li>add support for Python 3.7 and 3.8 (thanks to Richard H\u00f6chenberger).</li>\n<li>do not crash when translating source with assignment typehints (\nwith the help of Sirenfal)</li>\n</ul>\n</div>\n<div id=\"id37\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.10 (2018-05-12)</a></h3>\n<ul>\n<li>use Macropy3 version 1.1.0b2 to avoid issues with Django</li>\n</ul>\n</div>\n<div id=\"id38\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.9 (2018-04-19)</a></h3>\n<ul>\n<li>add a <tt><span class=\"pre\">--source-name</span></tt> options to be used together with\n<tt><span class=\"pre\">--inline-map</span></tt> when using <tt><span class=\"pre\">-s</span></tt>;</li>\n<li>move main repository to gitlab.com/metapensiero;</li>\n<li>add support for default export and import;</li>\n<li>add documentation for the <tt>JS()</tt> marker function;</li>\n<li>refactor of the JS AST nodes;</li>\n<li>fix path splitting and joining on Windows (thanks to Roman Yakubuk);</li>\n</ul>\n</div>\n<div id=\"id39\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.8 (2017-11-16)</a></h3>\n<ul>\n<li>add support for <tt>except</tt> sections with more than one exception\ntype and arbitrary exception variable name. Thanks to @devanlai;</li>\n<li>dict keys conversion fixes;</li>\n<li>enable <tt><span class=\"pre\">--inline-map</span></tt> when translating a string with <tt><span class=\"pre\">-s</span></tt>;</li>\n</ul>\n</div>\n<div id=\"id40\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.7 (2017-09-08)</a></h3>\n<ul>\n<li>translate dicts unambiguously, using \u201ccomputed member name form\u201d for\nkeys that aren\u2019t strings;</li>\n<li>use <tt>macropy</tt> package to deal with some of the translation\ndetails;</li>\n<li>translate <tt>int()</tt> and <tt>float()</tt>;</li>\n<li>fix a bug that prevented BabelJS translation when keyword arguments;\nare present;</li>\n</ul>\n</div>\n<div id=\"id41\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.6 (2017-05-09)</a></h3>\n<ul>\n<li>allow to define template literals and tagged templates;</li>\n<li>define package scopes in imports prepending names with <tt>__</tt>;</li>\n<li>translate <tt>issubclass()</tt>;</li>\n<li>translate lambdas as arrow functions;</li>\n<li>translate Python 3.6+ f-strings to ES6 template literals;</li>\n<li>Add translation for <tt>__instancecheck__</tt> to <tt>[Symbol.hasInstance]</tt>;</li>\n<li>Sort imports alphabetically;</li>\n</ul>\n</div>\n<div id=\"id42\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.5 (2016-11-23)</a></h3>\n<ul>\n<li>translate <tt><span class=\"pre\">tmpl(\"A</span> string with js <span class=\"pre\">${interpolation}\")</span></tt> to ES6 template\nliterals;</li>\n<li>preliminary support to translate names like <tt>d_foo</tt> and <tt>dd_bar</tt> to\n<tt>$foo</tt> and <tt>$$bar</tt>;</li>\n<li>addded translation of the <tt>assert</tt> statement;</li>\n<li>fixed a bug in <tt><span class=\"pre\">try...except...finally</span></tt> statement when there\u2019s no\n<tt>except</tt> section;</li>\n<li>added translation for <tt>foo is not bar</tt> that seems to have dedicated ast\nnode;</li>\n<li>if the function is defined in a method but starts with <tt>fn_</tt> do not convert\nit to an arrow function. Useful to <em>not</em> maintain <tt>this</tt>;</li>\n<li>added translation for <tt>callable</tt> and <tt>hasattr/getattr/setattr</tt>;</li>\n<li>updated for loops to support more than one target, so now its possible to\nwrite loops like <tt>for k, v in iterable(a_map):</tt>;</li>\n<li>updated documentation;</li>\n<li>added a new cli option <tt><span class=\"pre\">-s</span></tt> to translate source from the command line or\nthe standard input;</li>\n<li>fixed a pair of bugs on sourcemaps;</li>\n<li>added a new cli option <tt><span class=\"pre\">--eval</span></tt> to also evaluate the produced JavaScript\nusing the embedded interpreter;</li>\n<li>added a new cli option <tt><span class=\"pre\">--dump-ast</span></tt> to print out the ast tree of the\npassed in string;</li>\n<li>added sorting to the rendered snippets/decorators/assignments so that their\norder does not change at every ricompilation;</li>\n<li>do not re-declare variables declare in outer scopes;</li>\n</ul>\n</div>\n<div id=\"id43\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.4 (2016-11-15)</a></h3>\n<ul>\n<li>updated BabelJS to version 6.18.1;</li>\n<li>allow to import modules with dashes inside by using dunder-inside-words\nnotation (<tt>foo__bar</tt> becomes <tt><span class=\"pre\">foo-bar</span></tt>);</li>\n<li>reuse JavaScript interpreter context to speedup translation;</li>\n<li>update <tt>in</tt> operator to support ES6 collections;</li>\n<li>added support for method and class decorators;</li>\n<li>added support for class properties and descriptors;</li>\n<li>add <tt>for</tt> loop over JS iterables;</li>\n<li>allow to loop over inherited properties;</li>\n<li>fix a bug on <tt>type()</tt> translation;</li>\n<li>support for <tt>range()</tt> steps;</li>\n<li>add support for generator functions and <tt>yield</tt> and <tt>yield from</tt>\nexpressions;</li>\n<li>optionally load babel-polyfill before evaluating code;</li>\n<li>fix a bug on sourcemaps having wrong references when there are documentation\nelements;</li>\n<li>translate <tt>__get__()</tt> and <tt>__set__()</tt> to to JS equivalents;</li>\n<li>implement <tt><span class=\"pre\">dict(foo).update(bar)</span></tt> and <tt><span class=\"pre\">dict(foo).copy</span></tt>;</li>\n<li>documentation improvements;</li>\n</ul>\n</div>\n<div id=\"id44\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.3 (2016-04-08)</a></h3>\n<ul>\n<li>updates to the documentation ( with some fixes made by Hugo Herter,\nDaniel Kopitchinski and ironmaniiith)</li>\n<li>Translate <tt>str(x)</tt> into <tt>x.toString()</tt></li>\n<li>Add support for properties and classmethods</li>\n<li>Translate <tt>__len__</tt> and <tt>__str__</tt> methods to <tt>get length()</tt>\nand <tt>toString()</tt></li>\n<li>Add support for slices syntax to <tt>.slice()</tt></li>\n<li>Fixed two bugs in sourcemaps generation</li>\n<li>Fixed a bug in the <tt>inport ... from</tt> translation</li>\n<li>Correctly include BabelJS minimized code</li>\n<li>Fix transpiling of stage3 features</li>\n</ul>\n</div>\n<div id=\"id45\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.2 (2016-03-29)</a></h3>\n<ul>\n<li>use arrow functions to retain <tt>this</tt> were possible</li>\n<li>translate <tt>async/await</tt></li>\n<li>refactoring of the <tt>for</tt> loops</li>\n<li>add ability to subtranslate pieces of Python code or objects. Used\nto template the creation of <tt>Exception</tt> sublasses</li>\n<li>add support for param defaults and keyword arguments</li>\n<li>updated documentation</li>\n</ul>\n</div>\n<div id=\"id46\">\n<h3><a href=\"#table-of-contents\" rel=\"nofollow\">0.1 (2016-03-21)</a></h3>\n<ul>\n<li>First cut of the features</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6909448, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "115575efb4040c22748eafbb480e9401", "sha256": "232a725ad16564eb0fd6460041dd2d2e5fb8aa8a83da5a1201449d9fe9cb2f4a"}, "downloads": -1, "filename": "javascripthon-0.1.tar.gz", "has_sig": false, "md5_digest": "115575efb4040c22748eafbb480e9401", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46066, "upload_time": "2016-03-21T18:53:17", "upload_time_iso_8601": "2016-03-21T18:53:17.429405Z", "url": "https://files.pythonhosted.org/packages/11/cb/a19f66fbde93a885793b978cf41ebbf50791b766664b7dfe0a4b3f69a3ef/javascripthon-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "dd9180beddd9f919513e8d7f6794303e", "sha256": "95fc362624513c5f0ec0ee0f355cf26807621da6fb94af94b0cf0ed313e4e957"}, "downloads": -1, "filename": "javascripthon-0.10.tar.gz", "has_sig": false, "md5_digest": "dd9180beddd9f919513e8d7f6794303e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 538861, "upload_time": "2018-05-11T23:27:28", "upload_time_iso_8601": "2018-05-11T23:27:28.316939Z", "url": "https://files.pythonhosted.org/packages/ea/ef/b46401e181768b3738660f5dc1f7ea0b334ed17fff685a61503d2989e77e/javascripthon-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "617c58ad45cca71c9fe729c87fb7062f", "sha256": "16077e073721507dbea175465cf52b30b7bb16a178a346b5834ae41d95463ad9"}, "downloads": -1, "filename": "javascripthon-0.11.tar.gz", "has_sig": false, "md5_digest": "617c58ad45cca71c9fe729c87fb7062f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 540901, "upload_time": "2020-03-30T00:58:30", "upload_time_iso_8601": "2020-03-30T00:58:30.768571Z", "url": "https://files.pythonhosted.org/packages/b2/6d/e8339cae8487b8a226d9fcc25804697bcbcdf2c0b46f879f3de36d124887/javascripthon-0.11.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "791e7819f52233f663e795c3de19c795", "sha256": "a4be367664b97848a741f71c3898e9393487e7dc55092ac84b723be5598ecf5d"}, "downloads": -1, "filename": "javascripthon-0.2.tar.gz", "has_sig": false, "md5_digest": "791e7819f52233f663e795c3de19c795", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55244, "upload_time": "2016-03-29T17:44:01", "upload_time_iso_8601": "2016-03-29T17:44:01.532345Z", "url": "https://files.pythonhosted.org/packages/bc/ef/16c8cfe35f55d635d09848185010d90d2d147c61f347aa6537063529181f/javascripthon-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "70b50baf6a90dae0356843003a8801aa", "sha256": "3875a129226c1235b8803851b01ae9ca67b51d4eb6a463aac4788e34da1df54b"}, "downloads": -1, "filename": "javascripthon-0.3.tar.gz", "has_sig": false, "md5_digest": "70b50baf6a90dae0356843003a8801aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 291570, "upload_time": "2016-04-08T21:06:47", "upload_time_iso_8601": "2016-04-08T21:06:47.399945Z", "url": "https://files.pythonhosted.org/packages/bb/f3/ee6f8ad1f98ac8f00ff2ccafa9332c49c137ebff7e8a2711910169e711b3/javascripthon-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "e7221528c97672584841d23afc867eff", "sha256": "c2638e6f325da1c1b3083ea270fc52458c0ffc3d48cf78d17fb48fe7139ec4bf"}, "downloads": -1, "filename": "javascripthon-0.4.tar.gz", "has_sig": false, "md5_digest": "e7221528c97672584841d23afc867eff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 517891, "upload_time": "2016-11-15T14:35:54", "upload_time_iso_8601": "2016-11-15T14:35:54.490806Z", "url": "https://files.pythonhosted.org/packages/e6/7b/3558a1090256ec82c6066b464b116503182194d70e53406a47071516308a/javascripthon-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "32f0b966bca88bc27c372674a94f02f3", "sha256": "c5db00bd40a6eb8ad6f7e6082e221e6ced9fb4a8540f55b502bce6270eb2fb4e"}, "downloads": -1, "filename": "javascripthon-0.5.tar.gz", "has_sig": false, "md5_digest": "32f0b966bca88bc27c372674a94f02f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 524442, "upload_time": "2016-11-23T00:41:47", "upload_time_iso_8601": "2016-11-23T00:41:47.032970Z", "url": "https://files.pythonhosted.org/packages/ab/46/6e0e52ca163f95ee7cd3c2a50c1672c1c22c29a1fac99ed4e1fd41b5c4ea/javascripthon-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "e1bf1dea4b645e5790655aa2bcbc3a3f", "sha256": "5841164747b010dfe35b0f498e9b326726689d3eb56d2f363fe76a3ba49f4ed8"}, "downloads": -1, "filename": "javascripthon-0.6.tar.gz", "has_sig": false, "md5_digest": "e1bf1dea4b645e5790655aa2bcbc3a3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 528195, "upload_time": "2017-05-09T13:29:39", "upload_time_iso_8601": "2017-05-09T13:29:39.067067Z", "url": "https://files.pythonhosted.org/packages/87/31/0b8047ff7f9ee45ee0d04ab397c38ba1896e05f073507f31e44ff31e14a0/javascripthon-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "27a0329b409b2f9677b10772aa16dea4", "sha256": "50f9a938e5ad83790d2a22451482e500f5d51abb91386931024e9d7f21c6dbb2"}, "downloads": -1, "filename": "javascripthon-0.7.tar.gz", "has_sig": false, "md5_digest": "27a0329b409b2f9677b10772aa16dea4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 530843, "upload_time": "2017-09-08T17:47:02", "upload_time_iso_8601": "2017-09-08T17:47:02.936584Z", "url": "https://files.pythonhosted.org/packages/26/7f/fd316fdbb40b242b1dbb29985bf65517ff9a115dc18160f559fe83d7314d/javascripthon-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "696773a04fa60d65d039679e40bd1146", "sha256": "ec4369f2c328472bf5199b1fe92c1dc2f1b61da2d5bbd75078f9f288a03330b4"}, "downloads": -1, "filename": "javascripthon-0.8.tar.gz", "has_sig": false, "md5_digest": "696773a04fa60d65d039679e40bd1146", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 531582, "upload_time": "2017-11-16T14:09:35", "upload_time_iso_8601": "2017-11-16T14:09:35.121361Z", "url": "https://files.pythonhosted.org/packages/52/49/ec07d720ab75d16a9909d1e90412ab262ef1c5e6a0129c56ced772c72633/javascripthon-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "d09963c99da29de4135f2f2f4c1353d2", "sha256": "65d55e3e5fe65d0045fa9fb0463f7dfb1078948029fc4e5ed2f4e50dba81a660"}, "downloads": -1, "filename": "javascripthon-0.9.tar.gz", "has_sig": false, "md5_digest": "d09963c99da29de4135f2f2f4c1353d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 538746, "upload_time": "2018-04-19T17:02:58", "upload_time_iso_8601": "2018-04-19T17:02:58.405296Z", "url": "https://files.pythonhosted.org/packages/f1/b1/9914b045a58e514956cdddba879775aec4edc6625cff1758131264e67be7/javascripthon-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "617c58ad45cca71c9fe729c87fb7062f", "sha256": "16077e073721507dbea175465cf52b30b7bb16a178a346b5834ae41d95463ad9"}, "downloads": -1, "filename": "javascripthon-0.11.tar.gz", "has_sig": false, "md5_digest": "617c58ad45cca71c9fe729c87fb7062f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 540901, "upload_time": "2020-03-30T00:58:30", "upload_time_iso_8601": "2020-03-30T00:58:30.768571Z", "url": "https://files.pythonhosted.org/packages/b2/6d/e8339cae8487b8a226d9fcc25804697bcbcdf2c0b46f879f3de36d124887/javascripthon-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:03 2020"}