{"info": {"author": "Leiden University Medical Center", "author_email": "sasc@lumc.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": ".. Badges have empty alts. So nothing shows up if they do not work.\n\n.. image:: https://img.shields.io/pypi/v/biotdg.svg\n  :target: https://pypi.org/project/biotdg/\n  :alt:\n\n.. image:: https://img.shields.io/conda/v/bioconda/biotdg.svg\n  :target: http://bioconda.github.io/recipes/biotdg/README.html\n  :alt:\n\n.. image:: https://img.shields.io/pypi/pyversions/biotdg.svg\n  :target: https://pypi.org/project/biotdg/\n  :alt:\n\n.. image:: https://img.shields.io/pypi/l/biotdg.svg\n  :target: https://github.com/biowdl/biotdg/blob/master/LICENSE\n  :alt:\n\n.. image:: https://travis-ci.com/biowdl/biotdg.svg?branch=develop\n  :target: https://travis-ci.com/biowdl/biotdg\n  :alt:\n\n.. image:: https://codecov.io/gh/biowdl/biotdg/branch/develop/graph/badge.svg\n  :target: https://codecov.io/gh/biowdl/biotdg\n  :alt:\n\nbiotdg: Bioinformatics Test Data Generator\n==========================================\n\n``biotdg`` can generate mutations based on vcf files for genomes where the\nchromosomes have different ploidy. It was made to create test genomes for\npipelines that correctly handle the ploidy of sex chromosomes. It can also be\nused to create test data for pipelines that handle triploid species, such as\nbanana, or for pipelines that discover chromosome imbalances, such as\ntrisomy-21 (Down syndrome) and XXY males (Klinefelter syndrome).\n\n``biotdg`` uses a reference genome, a ploidy table and a vcf file to create a\n\"true genome\" for a sample. For example, if the ploidy table states that\n``chr21`` has a ploidy of 3 then the \"true genome\" will have three copies\nof ``chr21``. Each ``chr21`` copy will have its own mutations based on the\nvcf file.\n\nAfter creating the \"true genome\" fasta file. ``biotdg`` uses the\n`dwgsim <https://github.com/nh13/dwgsim>`_ program to generate fastq reads.\n\nUsage\n-----\n\n.. code-block:: text\n\n    usage: biotdg [-h] [--version] -r REFERENCE --vcf VCF -p PLOIDY_TABLE -s\n                  SAMPLE_NAME [-z RANDOM_SEED] [-l READ_LENGTH] [-C COVERAGE]\n                  [-e READ1_ERROR_RATE] [-E READ2_ERROR_RATE]\n                  [-n MAXIMUM_N_NUMBER] [-o OUTPUT_DIR]\n\n    Bioinformatics Test Data Generator\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n      -r REFERENCE, --reference REFERENCE\n                            Reference genome for the sample.\n      --vcf VCF             VCF file with mutations.\n      -p PLOIDY_TABLE, --ploidy-table PLOIDY_TABLE\n                            Tab-delimited file with two columns specifying the\n                            chromosome name and its ploidy. By default all\n                            chromosomes have a ploidy of 2.\n      -s SAMPLE_NAME, --sample-name SAMPLE_NAME\n                            Name of the sample to generate. The sample must be in\n                            the VCF file.\n      -z RANDOM_SEED, --random-seed RANDOM_SEED\n                            Random seed for dwgsim (default: 1).\n      -l READ_LENGTH, --read-length READ_LENGTH\n                            Read length to be used by dwgsim.\n      -C COVERAGE, --coverage COVERAGE\n                            Average coverage for the generated reads. NOTE: This\n                            is multiplied by the ploidy of the chromosome.\n      -e READ1_ERROR_RATE, --read1-error-rate READ1_ERROR_RATE\n                            Same as -e flag in dwgsim. per base/color/flow error\n                            rate of the first read.\n      -E READ2_ERROR_RATE, --read2-error-rate READ2_ERROR_RATE\n                            Same as -E flag in dwgsim. per base/color/flow error\n                            rate of the second read.\n      -n MAXIMUM_N_NUMBER, --maximum-n-number MAXIMUM_N_NUMBER\n                            Maximum number of Ns allowed in a given read.\n      -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n\n\nExample\n-------\nGiven the following ``reference.fasta`` file\n\n.. code-block:: text\n\n    >chr1\n    GATTACA\n    GATTACA\n    GATTACA\n    >chrX\n    AGTCAGTCAGTC\n    >chrY\n    AGAATC\n\nthe following ploidy table.tsv\n\n.. code-block:: text\n\n    chr1\t3\n    chrX\t2\n    chrY\t1\n\nand the following vcf:\n\n.. code-block:: text\n\n    ##fileformat=VCFv4.1\n    ##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n    ##contig=<ID=chr1,length=21>\n    ##contig=<ID=chrX,length=12>\n    ##contig=<ID=chrY,length=6>\n    #CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tsample1\n    chr1\t4\t.\tT\tA,C,G\t.\t.\t.\tGT\t1/2/3\n    chr1\t7\t.\tA\tT\t.\t.\t.\tGT\t0/1/0\n    chrX\t1\t.\tA\tT\t.\t.\t.\tGT\t0/1\n    chrX\t2\t.\tG\tT\t.\t.\t.\tGT\t0/0\n    chrY\t4\t.\tA\tC\t.\t.\t.\tGT\t1\n\nA \"true genome\" for sample1 looks like this:\n\n.. code-block:: text\n\n    >chr1_0\n    GATAACAGATTACAGATTACA\n    >chr1_1\n    GATCACTGATTACAGATTACA\n    >chr1_2\n    GATGACAGATTACAGATTACA\n    >chrX_0\n    AGTCAGTCAGTC\n    >chrX_1\n    TGTCAGTCAGTC\n    >chrY_0\n    AGACTC\n\n.. note::\n\n    Mutations are always generated in a phased manner. A ``_0`` chromosome\n    will receive all the genotypes in the VCF that are at index 0 (the outer\n    left one). This is true even if the variants are not described as phased\n    in the vcf.\n\nWhy ``biotdg`` and not ``dwgsim``?\n----------------------------------\n\n``dwgsim`` has excellent capabilities for generating reads that are close to\nreal data. Therefore ``dwgsim`` is used by ``biotdg`` in this capacity.\n\n``dwgsim`` can also generate mutations randomly and output these in VCF format.\nIt also has the capability to use a VCF to generate mutations. This VCF-based\nmethod was not deemed sufficient for the following reasons:\n\n+ Very poorly documented.\n+ Only allows ploidy of 1 or 2. There is an option '3' but that does something\n  different.\n+ How exactly mutations are generated is unknown. Is it aware of phasing? If\n  so, how does it handle it?\n\n``biotdg`` handles the creation of the \"true genome\" transparently and then\nuses dwgsim to generate reads. ``biotdg`` can handle genomes with mixed\nploidies (as is the case for most species with a sex chromosome) well.\n\nKnown limitations\n-----------------\n+ Overlapping mutations are not handled properly. (Probably not a concern for\n  generating test data.)\n+ Mutations are always generated in a phased manner. This was easier to\n  implement than an unphased manner. It is also more transparent. Some extra\n  work will be required to handle unphased generation of mutations.\n+ ``biotdg`` is only tested with SNPs. Indels and other variant types were not\n  tested.\n\n.. TODO: Test with indels.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/biowdl/biotdg", "keywords": "bioinformatics test data generator creator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "biotdg", "package_url": "https://pypi.org/project/biotdg/", "platform": "", "project_url": "https://pypi.org/project/biotdg/", "project_urls": {"Homepage": "https://github.com/biowdl/biotdg"}, "release_url": "https://pypi.org/project/biotdg/0.1.0/", "requires_dist": ["biopython", "cyvcf2", "setuptools"], "requires_python": ">=3.6,<3.8", "summary": "Bioinformatics Test Data Generator", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/biotdg/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26f09cad0395104df2c3845d98b7f4842c0ab402/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f62696f7464672e737667\"></a>\n<a href=\"http://bioconda.github.io/recipes/biotdg/README.html\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36448d719d8cdc0a806cc6fb622324e99a5985bb/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f762f62696f636f6e64612f62696f7464672e737667\"></a>\n<a href=\"https://pypi.org/project/biotdg/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/170f5af698f86bb540d00bd9c67d1ca9930b3273/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f62696f7464672e737667\"></a>\n<a href=\"https://github.com/biowdl/biotdg/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b0477ab00e37eb3703da8dfb54099ae4a062122/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f62696f7464672e737667\"></a>\n<a href=\"https://travis-ci.com/biowdl/biotdg\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42e85229162b570599a648aed49e8d489ee6a299/68747470733a2f2f7472617669732d63692e636f6d2f62696f77646c2f62696f7464672e7376673f6272616e63683d646576656c6f70\"></a>\n<a href=\"https://codecov.io/gh/biowdl/biotdg\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2cb0d12e43cc22406f896d2495cef00a47907e1a/68747470733a2f2f636f6465636f762e696f2f67682f62696f77646c2f62696f7464672f6272616e63682f646576656c6f702f67726170682f62616467652e737667\"></a>\n<div id=\"biotdg-bioinformatics-test-data-generator\">\n<h2>biotdg: Bioinformatics Test Data Generator</h2>\n<p><tt>biotdg</tt> can generate mutations based on vcf files for genomes where the\nchromosomes have different ploidy. It was made to create test genomes for\npipelines that correctly handle the ploidy of sex chromosomes. It can also be\nused to create test data for pipelines that handle triploid species, such as\nbanana, or for pipelines that discover chromosome imbalances, such as\ntrisomy-21 (Down syndrome) and XXY males (Klinefelter syndrome).</p>\n<p><tt>biotdg</tt> uses a reference genome, a ploidy table and a vcf file to create a\n\u201ctrue genome\u201d for a sample. For example, if the ploidy table states that\n<tt>chr21</tt> has a ploidy of 3 then the \u201ctrue genome\u201d will have three copies\nof <tt>chr21</tt>. Each <tt>chr21</tt> copy will have its own mutations based on the\nvcf file.</p>\n<p>After creating the \u201ctrue genome\u201d fasta file. <tt>biotdg</tt> uses the\n<a href=\"https://github.com/nh13/dwgsim\" rel=\"nofollow\">dwgsim</a> program to generate fastq reads.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<pre>usage: biotdg [-h] [--version] -r REFERENCE --vcf VCF -p PLOIDY_TABLE -s\n              SAMPLE_NAME [-z RANDOM_SEED] [-l READ_LENGTH] [-C COVERAGE]\n              [-e READ1_ERROR_RATE] [-E READ2_ERROR_RATE]\n              [-n MAXIMUM_N_NUMBER] [-o OUTPUT_DIR]\n\nBioinformatics Test Data Generator\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -r REFERENCE, --reference REFERENCE\n                        Reference genome for the sample.\n  --vcf VCF             VCF file with mutations.\n  -p PLOIDY_TABLE, --ploidy-table PLOIDY_TABLE\n                        Tab-delimited file with two columns specifying the\n                        chromosome name and its ploidy. By default all\n                        chromosomes have a ploidy of 2.\n  -s SAMPLE_NAME, --sample-name SAMPLE_NAME\n                        Name of the sample to generate. The sample must be in\n                        the VCF file.\n  -z RANDOM_SEED, --random-seed RANDOM_SEED\n                        Random seed for dwgsim (default: 1).\n  -l READ_LENGTH, --read-length READ_LENGTH\n                        Read length to be used by dwgsim.\n  -C COVERAGE, --coverage COVERAGE\n                        Average coverage for the generated reads. NOTE: This\n                        is multiplied by the ploidy of the chromosome.\n  -e READ1_ERROR_RATE, --read1-error-rate READ1_ERROR_RATE\n                        Same as -e flag in dwgsim. per base/color/flow error\n                        rate of the first read.\n  -E READ2_ERROR_RATE, --read2-error-rate READ2_ERROR_RATE\n                        Same as -E flag in dwgsim. per base/color/flow error\n                        rate of the second read.\n  -n MAXIMUM_N_NUMBER, --maximum-n-number MAXIMUM_N_NUMBER\n                        Maximum number of Ns allowed in a given read.\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n</pre>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Given the following <tt>reference.fasta</tt> file</p>\n<pre>&gt;chr1\nGATTACA\nGATTACA\nGATTACA\n&gt;chrX\nAGTCAGTCAGTC\n&gt;chrY\nAGAATC\n</pre>\n<p>the following ploidy table.tsv</p>\n<pre>chr1        3\nchrX        2\nchrY        1\n</pre>\n<p>and the following vcf:</p>\n<pre>##fileformat=VCFv4.1\n##FORMAT=&lt;ID=GT,Number=1,Type=String,Description=\"Genotype\"&gt;\n##contig=&lt;ID=chr1,length=21&gt;\n##contig=&lt;ID=chrX,length=12&gt;\n##contig=&lt;ID=chrY,length=6&gt;\n#CHROM      POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  sample1\nchr1        4       .       T       A,C,G   .       .       .       GT      1/2/3\nchr1        7       .       A       T       .       .       .       GT      0/1/0\nchrX        1       .       A       T       .       .       .       GT      0/1\nchrX        2       .       G       T       .       .       .       GT      0/0\nchrY        4       .       A       C       .       .       .       GT      1\n</pre>\n<p>A \u201ctrue genome\u201d for sample1 looks like this:</p>\n<pre>&gt;chr1_0\nGATAACAGATTACAGATTACA\n&gt;chr1_1\nGATCACTGATTACAGATTACA\n&gt;chr1_2\nGATGACAGATTACAGATTACA\n&gt;chrX_0\nAGTCAGTCAGTC\n&gt;chrX_1\nTGTCAGTCAGTC\n&gt;chrY_0\nAGACTC\n</pre>\n<div>\n<p>Note</p>\n<p>Mutations are always generated in a phased manner. A <tt>_0</tt> chromosome\nwill receive all the genotypes in the VCF that are at index 0 (the outer\nleft one). This is true even if the variants are not described as phased\nin the vcf.</p>\n</div>\n</div>\n<div id=\"why-biotdg-and-not-dwgsim\">\n<h3>Why <tt>biotdg</tt> and not <tt>dwgsim</tt>?</h3>\n<p><tt>dwgsim</tt> has excellent capabilities for generating reads that are close to\nreal data. Therefore <tt>dwgsim</tt> is used by <tt>biotdg</tt> in this capacity.</p>\n<p><tt>dwgsim</tt> can also generate mutations randomly and output these in VCF format.\nIt also has the capability to use a VCF to generate mutations. This VCF-based\nmethod was not deemed sufficient for the following reasons:</p>\n<ul>\n<li>Very poorly documented.</li>\n<li>Only allows ploidy of 1 or 2. There is an option \u20183\u2019 but that does something\ndifferent.</li>\n<li>How exactly mutations are generated is unknown. Is it aware of phasing? If\nso, how does it handle it?</li>\n</ul>\n<p><tt>biotdg</tt> handles the creation of the \u201ctrue genome\u201d transparently and then\nuses dwgsim to generate reads. <tt>biotdg</tt> can handle genomes with mixed\nploidies (as is the case for most species with a sex chromosome) well.</p>\n</div>\n<div id=\"known-limitations\">\n<h3>Known limitations</h3>\n<ul>\n<li>Overlapping mutations are not handled properly. (Probably not a concern for\ngenerating test data.)</li>\n<li>Mutations are always generated in a phased manner. This was easier to\nimplement than an unphased manner. It is also more transparent. Some extra\nwork will be required to handle unphased generation of mutations.</li>\n<li><tt>biotdg</tt> is only tested with SNPs. Indels and other variant types were not\ntested.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6450998, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "76c769f0fc8731aed6b2ca9ceefedcb6", "sha256": "f48874e3caa2ba48bf12e2a5de31be287c8106750da546a67625deeb54dc8f3a"}, "downloads": -1, "filename": "biotdg-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "76c769f0fc8731aed6b2ca9ceefedcb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 8740, "upload_time": "2020-01-14T10:37:25", "upload_time_iso_8601": "2020-01-14T10:37:25.756562Z", "url": "https://files.pythonhosted.org/packages/be/71/b52e7aa2e13bb02987d63f42cd78df0ba26af590d3b17aba557dcb4ff1c6/biotdg-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b858d1fd61889a5047a0348ab3fe32a3", "sha256": "981d588a3be672fd62ec5eac402a87d5e5f0865d040d1a1b6ae2f8398f840cd1"}, "downloads": -1, "filename": "biotdg-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b858d1fd61889a5047a0348ab3fe32a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 8899, "upload_time": "2020-01-14T10:37:27", "upload_time_iso_8601": "2020-01-14T10:37:27.949943Z", "url": "https://files.pythonhosted.org/packages/cd/02/bb2281eae8fd2c4f1fd056a9b567b805a45d01d8f6a64e88ee5f5a20d962/biotdg-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76c769f0fc8731aed6b2ca9ceefedcb6", "sha256": "f48874e3caa2ba48bf12e2a5de31be287c8106750da546a67625deeb54dc8f3a"}, "downloads": -1, "filename": "biotdg-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "76c769f0fc8731aed6b2ca9ceefedcb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 8740, "upload_time": "2020-01-14T10:37:25", "upload_time_iso_8601": "2020-01-14T10:37:25.756562Z", "url": "https://files.pythonhosted.org/packages/be/71/b52e7aa2e13bb02987d63f42cd78df0ba26af590d3b17aba557dcb4ff1c6/biotdg-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b858d1fd61889a5047a0348ab3fe32a3", "sha256": "981d588a3be672fd62ec5eac402a87d5e5f0865d040d1a1b6ae2f8398f840cd1"}, "downloads": -1, "filename": "biotdg-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b858d1fd61889a5047a0348ab3fe32a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 8899, "upload_time": "2020-01-14T10:37:27", "upload_time_iso_8601": "2020-01-14T10:37:27.949943Z", "url": "https://files.pythonhosted.org/packages/cd/02/bb2281eae8fd2c4f1fd056a9b567b805a45d01d8f6a64e88ee5f5a20d962/biotdg-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:23 2020"}