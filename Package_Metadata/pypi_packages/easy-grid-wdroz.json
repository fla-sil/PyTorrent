{"info": {"author": "William Droz", "author_email": "william.droz@idiap.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# GridSearch-like on the grid\nSearching good combinaisons of parameters happen quite ofter in ML-related task. I wrote a tool that help to achieve that. If you worked with the unix system call *fork*, you will see a similar approach with the API.\n\n*The only requirement is jinja2*\n\n## Hello World example\nIn this example we wrote all combinaisons of hello/hi world/Idiap.\n```python\nfrom easy_grid.experiences_manager import ExperienceBase\n\nif __name__ == '__main__':\n    if ExperienceBase.is_in_SGE(): # Write your task\n        parameters = ExperienceBase.load_only_current()\n        first = parameters['first']\n        second = parameters['second']\n        print('{} {}'.format(first, second))\n    else: # Configure your task\n        my_experience = ExperienceBase(python_executable='python3')\n        my_experience.add_experience_key_values('first', ['hello', 'hi'])\n        my_experience.add_experience_key_values('second', ['world', 'idiap'])\n\n        my_experience.add_grid_parameter('-cwd', '')\n        my_experience.add_grid_parameter('-N', 'hello_world')\n\n        my_experience.add_export_parameter('PYTHONPATH', '.:$PYTHONPATH')\n\n        my_experience.run()\n```\nRun the example `python3 -m examples.hello_world` then check the results after running the script (and waiting a little bit)\n`ls -1 output/hello_world.o*`\n<pre>\noutput/hello_world.o5439319.1\noutput/hello_world.o5439319.2\noutput/hello_world.o5439319.3\noutput/hello_world.o5439319.4\n</pre>\nEach file contains the result of a combinaison. Let's check the content of the first one\n`cat output/hello_world.o5439319.1`\n> hello world\n\nGet all results at once\n`cat output/hello_world.o*`\n<pre>\nhello world\nhi world\nhello idiap\nhi idiap\n</pre>\n\n## FizzBuzz example\nWe can also use task over a single parameter, like in fizzbuzz, which depend of *n*. Here an example with fizzbuzz from [1, 100]\n\n```python\nfrom easy_grid.experiences_manager import ExperienceBase\n\nif __name__ == '__main__':\n    if ExperienceBase.is_in_SGE(): # Write your task\n        parameters = ExperienceBase.load_only_current()\n        n = parameters['n']\n        my_str = ''\n        if n % 3 == 0: \n            my_str += 'Fizz'\n        if n % 5 == 0: \n            my_str += 'Buzz'\n        if my_str == '': \n            my_str = str(n)\n        print('(n={:04d}) -> {}'.format(n, my_str))\n    else: # Configure your task\n        my_experience = ExperienceBase(python_executable='python3')\n        my_experience.add_experience_key_values('n', list(range(1, 101)))\n\n        my_experience.add_grid_parameter('-cwd', '')\n        my_experience.add_grid_parameter('-N', 'fizzbuzz')\n\n        my_experience.add_export_parameter('PYTHONPATH', '.:$PYTHONPATH')\n\n        my_experience.run()\n```\n\nRun the example `python3 -m examples.fizzbuzz`\n\nGet all results at once and sort by n\n`cat output/fizzbuzz.o* | sort`\n<pre>\n(n=0001) -> 1\n(n=0002) -> 2\n(n=0003) -> Fizz\n(n=0004) -> 4\n(n=0005) -> Buzz\n(n=0006) -> Fizz\n(n=0007) -> 7\n(n=0008) -> 8\n(n=0009) -> Fizz\n(n=0010) -> Buzz\n(n=0011) -> 11\n...\n(n=0090) -> FizzBuzz\n(n=0091) -> 91\n(n=0092) -> 92\n(n=0093) -> Fizz\n(n=0094) -> 94\n(n=0095) -> Buzz\n(n=0096) -> Fizz\n(n=0097) -> 97\n(n=0098) -> 98\n(n=0099) -> Fizz\n(n=0100) -> Buzz\n</pre>\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.idiap.ch/devel/easy_grid", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "easy-grid-wdroz", "package_url": "https://pypi.org/project/easy-grid-wdroz/", "platform": "", "project_url": "https://pypi.org/project/easy-grid-wdroz/", "project_urls": {"Homepage": "https://gitlab.idiap.ch/devel/easy_grid"}, "release_url": "https://pypi.org/project/easy-grid-wdroz/0.0.5/", "requires_dist": ["jinja2 (==2.10)"], "requires_python": ">=3.5", "summary": "Internal tools to use the SGE grid at Idiap Research Institute", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GridSearch-like on the grid</h1>\n<p>Searching good combinaisons of parameters happen quite ofter in ML-related task. I wrote a tool that help to achieve that. If you worked with the unix system call <em>fork</em>, you will see a similar approach with the API.</p>\n<p><em>The only requirement is jinja2</em></p>\n<h2>Hello World example</h2>\n<p>In this example we wrote all combinaisons of hello/hi world/Idiap.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_grid.experiences_manager</span> <span class=\"kn\">import</span> <span class=\"n\">ExperienceBase</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">ExperienceBase</span><span class=\"o\">.</span><span class=\"n\">is_in_SGE</span><span class=\"p\">():</span> <span class=\"c1\"># Write your task</span>\n        <span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">ExperienceBase</span><span class=\"o\">.</span><span class=\"n\">load_only_current</span><span class=\"p\">()</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">'first'</span><span class=\"p\">]</span>\n        <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">'second'</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span> <span class=\"c1\"># Configure your task</span>\n        <span class=\"n\">my_experience</span> <span class=\"o\">=</span> <span class=\"n\">ExperienceBase</span><span class=\"p\">(</span><span class=\"n\">python_executable</span><span class=\"o\">=</span><span class=\"s1\">'python3'</span><span class=\"p\">)</span>\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_experience_key_values</span><span class=\"p\">(</span><span class=\"s1\">'first'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"s1\">'hi'</span><span class=\"p\">])</span>\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_experience_key_values</span><span class=\"p\">(</span><span class=\"s1\">'second'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'world'</span><span class=\"p\">,</span> <span class=\"s1\">'idiap'</span><span class=\"p\">])</span>\n\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_grid_parameter</span><span class=\"p\">(</span><span class=\"s1\">'-cwd'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_grid_parameter</span><span class=\"p\">(</span><span class=\"s1\">'-N'</span><span class=\"p\">,</span> <span class=\"s1\">'hello_world'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_export_parameter</span><span class=\"p\">(</span><span class=\"s1\">'PYTHONPATH'</span><span class=\"p\">,</span> <span class=\"s1\">'.:$PYTHONPATH'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Run the example <code>python3 -m examples.hello_world</code> then check the results after running the script (and waiting a little bit)\n<code>ls -1 output/hello_world.o*</code></p>\n<pre>output/hello_world.o5439319.1\noutput/hello_world.o5439319.2\noutput/hello_world.o5439319.3\noutput/hello_world.o5439319.4\n</pre>\n<p>Each file contains the result of a combinaison. Let's check the content of the first one\n<code>cat output/hello_world.o5439319.1</code></p>\n<blockquote>\n<p>hello world</p>\n</blockquote>\n<p>Get all results at once\n<code>cat output/hello_world.o*</code></p>\n<pre>hello world\nhi world\nhello idiap\nhi idiap\n</pre>\n<h2>FizzBuzz example</h2>\n<p>We can also use task over a single parameter, like in fizzbuzz, which depend of <em>n</em>. Here an example with fizzbuzz from [1, 100]</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_grid.experiences_manager</span> <span class=\"kn\">import</span> <span class=\"n\">ExperienceBase</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">ExperienceBase</span><span class=\"o\">.</span><span class=\"n\">is_in_SGE</span><span class=\"p\">():</span> <span class=\"c1\"># Write your task</span>\n        <span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">ExperienceBase</span><span class=\"o\">.</span><span class=\"n\">load_only_current</span><span class=\"p\">()</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">'n'</span><span class=\"p\">]</span>\n        <span class=\"n\">my_str</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> \n            <span class=\"n\">my_str</span> <span class=\"o\">+=</span> <span class=\"s1\">'Fizz'</span>\n        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> \n            <span class=\"n\">my_str</span> <span class=\"o\">+=</span> <span class=\"s1\">'Buzz'</span>\n        <span class=\"k\">if</span> <span class=\"n\">my_str</span> <span class=\"o\">==</span> <span class=\"s1\">''</span><span class=\"p\">:</span> \n            <span class=\"n\">my_str</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'(n=</span><span class=\"si\">{:04d}</span><span class=\"s1\">) -&gt; </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">my_str</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span> <span class=\"c1\"># Configure your task</span>\n        <span class=\"n\">my_experience</span> <span class=\"o\">=</span> <span class=\"n\">ExperienceBase</span><span class=\"p\">(</span><span class=\"n\">python_executable</span><span class=\"o\">=</span><span class=\"s1\">'python3'</span><span class=\"p\">)</span>\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_experience_key_values</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">)))</span>\n\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_grid_parameter</span><span class=\"p\">(</span><span class=\"s1\">'-cwd'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_grid_parameter</span><span class=\"p\">(</span><span class=\"s1\">'-N'</span><span class=\"p\">,</span> <span class=\"s1\">'fizzbuzz'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">add_export_parameter</span><span class=\"p\">(</span><span class=\"s1\">'PYTHONPATH'</span><span class=\"p\">,</span> <span class=\"s1\">'.:$PYTHONPATH'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">my_experience</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Run the example <code>python3 -m examples.fizzbuzz</code></p>\n<p>Get all results at once and sort by n\n<code>cat output/fizzbuzz.o* | sort</code></p>\n<pre>(n=0001) -&gt; 1\n(n=0002) -&gt; 2\n(n=0003) -&gt; Fizz\n(n=0004) -&gt; 4\n(n=0005) -&gt; Buzz\n(n=0006) -&gt; Fizz\n(n=0007) -&gt; 7\n(n=0008) -&gt; 8\n(n=0009) -&gt; Fizz\n(n=0010) -&gt; Buzz\n(n=0011) -&gt; 11\n...\n(n=0090) -&gt; FizzBuzz\n(n=0091) -&gt; 91\n(n=0092) -&gt; 92\n(n=0093) -&gt; Fizz\n(n=0094) -&gt; 94\n(n=0095) -&gt; Buzz\n(n=0096) -&gt; Fizz\n(n=0097) -&gt; 97\n(n=0098) -&gt; 98\n(n=0099) -&gt; Fizz\n(n=0100) -&gt; Buzz\n</pre>\n\n          </div>"}, "last_serial": 6235519, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e3db7220262d6bd903b89dac05c80d21", "sha256": "a404d7950066dc89cf668634d1236ef35ad0431db854d017cc1998fcc04c069a"}, "downloads": -1, "filename": "easy_grid_wdroz-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e3db7220262d6bd903b89dac05c80d21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5089, "upload_time": "2019-12-03T13:59:33", "upload_time_iso_8601": "2019-12-03T13:59:33.539412Z", "url": "https://files.pythonhosted.org/packages/9a/83/33e638c42a53b491b66b00c1d28770505eaf5cd88e125bdea671cdfcf6d5/easy_grid_wdroz-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c89a105b8423fdd995673b140a19f227", "sha256": "81644b57f2abcf60c272bffd69ff257bd3634d248597310f07df20b579c111f2"}, "downloads": -1, "filename": "easy_grid-wdroz-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c89a105b8423fdd995673b140a19f227", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4806, "upload_time": "2019-12-03T13:59:35", "upload_time_iso_8601": "2019-12-03T13:59:35.712529Z", "url": "https://files.pythonhosted.org/packages/e3/ec/691560441bb3421fcd46505a49a7265765b62272b353be2904e9561ebe86/easy_grid-wdroz-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5ddbfbd1c141a7e4bdbf4d47465bbfe0", "sha256": "fb664b5f78921be5e92caaacee6aba08b3700b38e511f8383057c74f8a35cc54"}, "downloads": -1, "filename": "easy_grid_wdroz-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5ddbfbd1c141a7e4bdbf4d47465bbfe0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5090, "upload_time": "2019-12-03T14:13:22", "upload_time_iso_8601": "2019-12-03T14:13:22.327281Z", "url": "https://files.pythonhosted.org/packages/c1/2e/de857c04d705266ccd19b4dda3ad682997b66d718a55ace8b3ba3b01b2b9/easy_grid_wdroz-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20e2d748c0766aef332b8ce8421eec11", "sha256": "5dfb8a7162b4ae158a36e2e75900696d21b5025c0a478cc89794450310c2ca81"}, "downloads": -1, "filename": "easy_grid-wdroz-0.0.2.tar.gz", "has_sig": false, "md5_digest": "20e2d748c0766aef332b8ce8421eec11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5034, "upload_time": "2019-12-03T14:13:23", "upload_time_iso_8601": "2019-12-03T14:13:23.638075Z", "url": "https://files.pythonhosted.org/packages/aa/0b/84ae26bee50854d0ca91cdd906251358b492ab8825cc58d41cd689326e33/easy_grid-wdroz-0.0.2.tar.gz", "yanked": false}], "0.0.3a0": [{"comment_text": "", "digests": {"md5": "d3adcc139803384e964b9dfaccd69f75", "sha256": "161ee61057cd3fa9aafd7c046ef0027bb054671267c077d002b2cb743966da18"}, "downloads": -1, "filename": "easy_grid_wdroz-0.0.3a0-py3-none-any.whl", "has_sig": false, "md5_digest": "d3adcc139803384e964b9dfaccd69f75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5115, "upload_time": "2019-12-03T14:21:37", "upload_time_iso_8601": "2019-12-03T14:21:37.212746Z", "url": "https://files.pythonhosted.org/packages/b7/1c/5e72447d1db9809f191b4023fada55e946856f54bc7bba2e9bfbc4fef857/easy_grid_wdroz-0.0.3a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36a286e7cb9adb39b3726d25040bdc7d", "sha256": "0b0a4e840d891fc90976a8d1426968e95abd1c620dfb1d5c43130ff3b27bfcd6"}, "downloads": -1, "filename": "easy_grid-wdroz-0.0.3a0.tar.gz", "has_sig": false, "md5_digest": "36a286e7cb9adb39b3726d25040bdc7d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5040, "upload_time": "2019-12-03T14:21:38", "upload_time_iso_8601": "2019-12-03T14:21:38.485089Z", "url": "https://files.pythonhosted.org/packages/eb/01/dd42cac51af1b2552d5a6385a0e66a3f6302a4b5b841bf5ac6d9251804bd/easy_grid-wdroz-0.0.3a0.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "cfd2520732d4ec0c762d8f4b1369def2", "sha256": "a37eaa8d90cdb16a849d5daff4762527b12faea5a54e431e5b20eb0c0e1ad850"}, "downloads": -1, "filename": "easy_grid_wdroz-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cfd2520732d4ec0c762d8f4b1369def2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5080, "upload_time": "2019-12-03T14:30:06", "upload_time_iso_8601": "2019-12-03T14:30:06.323577Z", "url": "https://files.pythonhosted.org/packages/0f/0e/647a69b543e87a017f74d1eaee8702698d9b92ad0a7368c57c3d0677098f/easy_grid_wdroz-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c3711464601331716e906302417f7d1", "sha256": "0b35aa35872761a35385a980f0b1a167504ae8d6b90134307d03d4c73d42d3f7"}, "downloads": -1, "filename": "easy_grid-wdroz-0.0.4.tar.gz", "has_sig": false, "md5_digest": "2c3711464601331716e906302417f7d1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4867, "upload_time": "2019-12-03T14:30:07", "upload_time_iso_8601": "2019-12-03T14:30:07.990784Z", "url": "https://files.pythonhosted.org/packages/00/79/e56cb8ed0cd934a9bcf39acbe6a2243c90ef08967f78991deb1a395bc104/easy_grid-wdroz-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "f780ef1574d708d78e497a4b023051b6", "sha256": "792d7e4d9fa5322b7644b525885885cd4c43d7d0429d75cde78af8f4c329e7a9"}, "downloads": -1, "filename": "easy_grid_wdroz-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f780ef1574d708d78e497a4b023051b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5470, "upload_time": "2019-12-03T15:07:32", "upload_time_iso_8601": "2019-12-03T15:07:32.210785Z", "url": "https://files.pythonhosted.org/packages/ae/9b/cc5ac5c95dfb83eea87d0ef82c2b29005a3f7749c2ee4a8b5c35ee29e4a6/easy_grid_wdroz-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b61168a4cfca8cf062e480714ab50d09", "sha256": "625898fb620b3dd64c75989c816a87878a41f7a243945f6cad18138d144eb7f1"}, "downloads": -1, "filename": "easy_grid-wdroz-0.0.5.tar.gz", "has_sig": false, "md5_digest": "b61168a4cfca8cf062e480714ab50d09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5017, "upload_time": "2019-12-03T15:07:33", "upload_time_iso_8601": "2019-12-03T15:07:33.748496Z", "url": "https://files.pythonhosted.org/packages/8a/5b/ee89dfa8f2970761c40d0857e64313325474b57c4e9748506c3ec44c0b17/easy_grid-wdroz-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f780ef1574d708d78e497a4b023051b6", "sha256": "792d7e4d9fa5322b7644b525885885cd4c43d7d0429d75cde78af8f4c329e7a9"}, "downloads": -1, "filename": "easy_grid_wdroz-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f780ef1574d708d78e497a4b023051b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5470, "upload_time": "2019-12-03T15:07:32", "upload_time_iso_8601": "2019-12-03T15:07:32.210785Z", "url": "https://files.pythonhosted.org/packages/ae/9b/cc5ac5c95dfb83eea87d0ef82c2b29005a3f7749c2ee4a8b5c35ee29e4a6/easy_grid_wdroz-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b61168a4cfca8cf062e480714ab50d09", "sha256": "625898fb620b3dd64c75989c816a87878a41f7a243945f6cad18138d144eb7f1"}, "downloads": -1, "filename": "easy_grid-wdroz-0.0.5.tar.gz", "has_sig": false, "md5_digest": "b61168a4cfca8cf062e480714ab50d09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5017, "upload_time": "2019-12-03T15:07:33", "upload_time_iso_8601": "2019-12-03T15:07:33.748496Z", "url": "https://files.pythonhosted.org/packages/8a/5b/ee89dfa8f2970761c40d0857e64313325474b57c4e9748506c3ec44c0b17/easy_grid-wdroz-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:22 2020"}