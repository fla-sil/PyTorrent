{"info": {"author": "Kay Zhu", "author_email": "me@kayzhu.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "======\nLSHash\n======\n\n:Version: 0.0.4dev\n\nA fast Python implementation of locality sensitive hashing with persistance\nsupport.\n\nHighlights\n==========\n\n- Fast hash calculation for large amount of high dimensional data through the use of `numpy` arrays.\n- Built-in support for persistency through Redis.\n- Multiple hash indexes support.\n- Built-in support for common distance/objective functions for ranking outputs.\n\nInstallation\n============\n``LSHash`` depends on the following libraries:\n\n- numpy\n- redis (if persistency through Redis is needed)\n- bitarray (if hamming distance is used as distance function)\n\nTo install:\n\n.. code-block:: bash\n\n    $ pip install lshash\n\nQuickstart\n==========\nTo create 6-bit hashes for input data of 8 dimensions:\n\n.. code-block:: python\n\n    >>> from lshash import LSHash\n\n    >>> lsh = LSHash(6, 8)\n    >>> lsh.index([1,2,3,4,5,6,7,8])\n    >>> lsh.index([2,3,4,5,6,7,8,9])\n    >>> lsh.index([10,12,99,1,5,31,2,3])\n    >>> lsh.query([1,2,3,4,5,6,7,7])\n    [((1, 2, 3, 4, 5, 6, 7, 8), 1.0),\n     ((2, 3, 4, 5, 6, 7, 8, 9), 11)]\n\n\nMain Interface\n==============\n\n- To initialize a ``LSHash`` instance:\n\n.. code-block:: python\n\n    LSHash(hash_size, input_dim, num_of_hashtables=1, storage=None, matrices_filename=None, overwrite=False)\n\nparameters:\n\n``hash_size``:\n    The length of the resulting binary hash.\n``input_dim``:\n    The dimension of the input vector.\n``num_hashtables = 1``:\n    (optional) The number of hash tables used for multiple lookups.\n``storage = None``:\n    (optional) Specify the name of the storage to be used for the index\n    storage. Options include \"redis\".\n``matrices_filename = None``:\n    (optional) Specify the path to the .npz file random matrices are stored\n    or to be stored if the file does not exist yet\n``overwrite = False``:\n    (optional) Whether to overwrite the matrices file if it already exist\n\n- To index a data point of a given ``LSHash`` instance, e.g., ``lsh``:\n\n.. code-block:: python\n\n    lsh.index(input_point, extra_data=None):\n\nparameters:\n\n``input_point``:\n    The input data point is an array or tuple of numbers of input_dim.\n``extra_data = None``:\n    (optional) Extra data to be added along with the input_point.\n\n- To query a data point against a given ``LSHash`` instance, e.g., ``lsh``:\n\n.. code-block:: python\n\n    lsh.query(query_point, num_results=None, distance_func=\"euclidean\"):\n\nparameters:\n\n``query_point``:\n    The query data point is an array or tuple of numbers of input_dim.\n``num_results = None``:\n    (optional) The number of query results to return in ranked order. By\n    default all results will be returned.\n``distance_func = \"euclidean\"``:\n    (optional) Distance function to use to rank the candidates. By default\n    euclidean distance function will be used.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://...", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "lshash3", "package_url": "https://pypi.org/project/lshash3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lshash3/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://..."}, "release_url": "https://pypi.org/project/lshash3/0.0.8/", "requires_dist": null, "requires_python": null, "summary": "A fast Python implementation of locality sensitive hashing with persistance (Redis) support.", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th>\n<td>0.0.4dev</td></tr>\n</tbody>\n</table>\n<p>A fast Python implementation of locality sensitive hashing with persistance\nsupport.</p>\n<div id=\"highlights\">\n<h2>Highlights</h2>\n<ul>\n<li>Fast hash calculation for large amount of high dimensional data through the use of <cite>numpy</cite> arrays.</li>\n<li>Built-in support for persistency through Redis.</li>\n<li>Multiple hash indexes support.</li>\n<li>Built-in support for common distance/objective functions for ranking outputs.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>LSHash</tt> depends on the following libraries:</p>\n<ul>\n<li>numpy</li>\n<li>redis (if persistency through Redis is needed)</li>\n<li>bitarray (if hamming distance is used as distance function)</li>\n</ul>\n<p>To install:</p>\n<pre>$ pip install lshash\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>To create 6-bit hashes for input data of 8 dimensions:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">lshash</span> <span class=\"kn\">import</span> <span class=\"n\">LSHash</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lsh</span> <span class=\"o\">=</span> <span class=\"n\">LSHash</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lsh</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lsh</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lsh</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">31</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lsh</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"p\">[((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"mf\">1.0</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"mi\">11</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"main-interface\">\n<h2>Main Interface</h2>\n<ul>\n<li>To initialize a <tt>LSHash</tt> instance:</li>\n</ul>\n<pre><span class=\"n\">LSHash</span><span class=\"p\">(</span><span class=\"n\">hash_size</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">,</span> <span class=\"n\">num_of_hashtables</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matrices_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>parameters:</p>\n<dl>\n<dt><tt>hash_size</tt>:</dt>\n<dd>The length of the resulting binary hash.</dd>\n<dt><tt>input_dim</tt>:</dt>\n<dd>The dimension of the input vector.</dd>\n<dt><tt>num_hashtables = 1</tt>:</dt>\n<dd>(optional) The number of hash tables used for multiple lookups.</dd>\n<dt><tt>storage = None</tt>:</dt>\n<dd>(optional) Specify the name of the storage to be used for the index\nstorage. Options include \u201credis\u201d.</dd>\n<dt><tt>matrices_filename = None</tt>:</dt>\n<dd>(optional) Specify the path to the .npz file random matrices are stored\nor to be stored if the file does not exist yet</dd>\n<dt><tt>overwrite = False</tt>:</dt>\n<dd>(optional) Whether to overwrite the matrices file if it already exist</dd>\n</dl>\n<ul>\n<li>To index a data point of a given <tt>LSHash</tt> instance, e.g., <tt>lsh</tt>:</li>\n</ul>\n<pre><span class=\"n\">lsh</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">input_point</span><span class=\"p\">,</span> <span class=\"n\">extra_data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n</pre>\n<p>parameters:</p>\n<dl>\n<dt><tt>input_point</tt>:</dt>\n<dd>The input data point is an array or tuple of numbers of input_dim.</dd>\n<dt><tt>extra_data = None</tt>:</dt>\n<dd>(optional) Extra data to be added along with the input_point.</dd>\n</dl>\n<ul>\n<li>To query a data point against a given <tt>LSHash</tt> instance, e.g., <tt>lsh</tt>:</li>\n</ul>\n<pre><span class=\"n\">lsh</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">query_point</span><span class=\"p\">,</span> <span class=\"n\">num_results</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">distance_func</span><span class=\"o\">=</span><span class=\"s2\">\"euclidean\"</span><span class=\"p\">):</span>\n</pre>\n<p>parameters:</p>\n<dl>\n<dt><tt>query_point</tt>:</dt>\n<dd>The query data point is an array or tuple of numbers of input_dim.</dd>\n<dt><tt>num_results = None</tt>:</dt>\n<dd>(optional) The number of query results to return in ranked order. By\ndefault all results will be returned.</dd>\n<dt><tt>distance_func = \"euclidean\"</tt>:</dt>\n<dd>(optional) Distance function to use to rank the candidates. By default\neuclidean distance function will be used.</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 2833598, "releases": {"0.0.8": [{"comment_text": "", "digests": {"md5": "f5a100db4eca21aa23abb995a3aeaa62", "sha256": "aec18362311a44c62a3440915fd26533f2d6fc3708bfd5063d4856390ae9d220"}, "downloads": -1, "filename": "lshash3-0.0.8.tar.gz", "has_sig": false, "md5_digest": "f5a100db4eca21aa23abb995a3aeaa62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9441, "upload_time": "2017-04-27T04:26:10", "upload_time_iso_8601": "2017-04-27T04:26:10.365548Z", "url": "https://files.pythonhosted.org/packages/51/a7/825799ea4c52ff477aae56f08b172016c434cd0264cbdd9cd7d82895bfe4/lshash3-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5a100db4eca21aa23abb995a3aeaa62", "sha256": "aec18362311a44c62a3440915fd26533f2d6fc3708bfd5063d4856390ae9d220"}, "downloads": -1, "filename": "lshash3-0.0.8.tar.gz", "has_sig": false, "md5_digest": "f5a100db4eca21aa23abb995a3aeaa62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9441, "upload_time": "2017-04-27T04:26:10", "upload_time_iso_8601": "2017-04-27T04:26:10.365548Z", "url": "https://files.pythonhosted.org/packages/51/a7/825799ea4c52ff477aae56f08b172016c434cd0264cbdd9cd7d82895bfe4/lshash3-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:29 2020"}