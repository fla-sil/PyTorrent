{"info": {"author": "Ryan Hiebert", "author_email": "ryan@ryanhiebert.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "===================================\nGenseq: A Lazily Resolving Sequence\n===================================\n\n.. image:: https://img.shields.io/pypi/v/genseq/badge/?version=stable\n   :target: https://pypi.python.org/pypi/genseq\n   :alt: Latest version\n\n.. image:: https://travis-ci.org/ryanhiebert/genseq.svg?branch=master\n   :target: https://travis-ci.org/ryanhiebert/genseq\n\nGenseq is sequence data structure that lazily consumes any iterable,\nincluding a generator, so that you can enjoy the benefits of both\ndelayed evaluation, and the slicing and random access of lists.\n\nThe ``Genseq`` class implements the collections ``Sequence`` ABC,\nso the standard methods of using an immutable sequence are all available.\n\nUsage\n=====\n\nInstall using Pip:\n\n.. code-block:: sh\n\n    pip install genseq\n\nThen wrap your generator with ``genseq``:\n\n.. code-block:: pycon\n\n    >>> from genseq import genseq\n    >>> @genseq\n    ... def myiter(stop):\n    ...     for i in range(stop):\n    ...         yield i\n    ...\n    >>> myiter(5)[2]\n    2\n    >>>\n\nOr use the ``Genseq`` class on any iterable:\n\n.. code-block:: pycon\n\n   >>> from genseq import Genseq\n   >>> Genseq(range(5))[3]\n   3\n   >>>\n\nHappy indexing!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ryanhiebert/genseq", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "genseq", "package_url": "https://pypi.org/project/genseq/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/genseq/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ryanhiebert/genseq"}, "release_url": "https://pypi.org/project/genseq/1.0/", "requires_dist": null, "requires_python": null, "summary": "Lazily Resolving Sequence", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/genseq\" rel=\"nofollow\"><img alt=\"Latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a00211a915675d9cde7cbab76ac7ef71b8afa13/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f67656e7365712f62616467652f3f76657273696f6e3d737461626c65\"></a>\n<a href=\"https://travis-ci.org/ryanhiebert/genseq\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ryanhiebert/genseq.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f97dfa657828192918ca2404542352c8176e0a3f/68747470733a2f2f7472617669732d63692e6f72672f7279616e686965626572742f67656e7365712e7376673f6272616e63683d6d6173746572\"></a>\n<p>Genseq is sequence data structure that lazily consumes any iterable,\nincluding a generator, so that you can enjoy the benefits of both\ndelayed evaluation, and the slicing and random access of lists.</p>\n<p>The <tt>Genseq</tt> class implements the collections <tt>Sequence</tt> ABC,\nso the standard methods of using an immutable sequence are all available.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Install using Pip:</p>\n<pre>pip install genseq\n</pre>\n<p>Then wrap your generator with <tt>genseq</tt>:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">genseq</span> <span class=\"kn\">import</span> <span class=\"n\">genseq</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@genseq</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">myiter</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">myiter</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"go\">2\n&gt;&gt;&gt;</span>\n</pre>\n<p>Or use the <tt>Genseq</tt> class on any iterable:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">genseq</span> <span class=\"kn\">import</span> <span class=\"n\">Genseq</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Genseq</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"go\">3\n&gt;&gt;&gt;</span>\n</pre>\n<p>Happy indexing!</p>\n</div>\n\n          </div>"}, "last_serial": 2666911, "releases": {"1.0": []}, "urls": [], "timestamp": "Fri May  8 00:58:14 2020"}