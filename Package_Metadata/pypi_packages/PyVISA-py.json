{"info": {"author": "Hernan E. Grecco", "author_email": "hernan.grecco@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "PyVISA-py\n=========\n\nA PyVISA backend that implements a large part of the \"Virtual Instrument Software\nArchitecture\" (VISA_) in pure Python (with the help of some nice cross platform\nlibraries python packages!).\n\n\nDescription\n-----------\n\nPyVISA started as wrapper for the NI-VISA library and therefore you need to install\nNational Instruments VISA library in your system. This works most of the time,\nfor most people. But NI-VISA is a proprietary library that only works on certain\nsystems. That is when PyVISA-py jumps in.\n\nStarting from version 1.6, PyVISA allows to use different backends. These backends can be\ndynamically loaded. PyVISA-py is one of such backends. It implements most of the methods\nfor Message Based communication (Serial/USB/GPIB/Ethernet) using Python and some well developed,\neasy to deploy and cross platform libraries\n\n.. _VISA: http://www.ivifoundation.org/Downloads/Specifications.htm\n\n\nVISA and Python\n---------------\n\nPython has a couple of features that make it very interesting for measurement controlling:\n\n- Python is an easy-to-learn scripting language with short development cycles.\n- It represents a high abstraction level, which perfectly blends with the abstraction\n  level of measurement programs.\n- It has a very rich set of native libraries, including numerical and plotting modules for\n  data analysis and visualisation.\n- A large set of books (in many languages) and on-line publications is available.\n\n\nRequirements\n------------\n\n- Python (tested with 2.7, 3.4+)\n- PyVISA 1.6+\n\nOptionally\n- PySerial (to interface with Serial instruments)\n- PyUSB (to interface with USB instruments)\n- linux-gpib (to interface with gpib instruments, only on linux)\n- gpib-ctypes (to interface with GPIB instruments on Windows and Linux, warning: experimental)\n\n\nPython 2 support\n----------------\n\nWith Python 2 EOL behind us, and given the limited time maintainers have,\nthe 0.4.0 release of PyVISA-py  will be the last version of PyVISA-py supporting\nPython 2.\n\n\nInstallation\n--------------\n\nUsing pip:\n\n    $ pip install pyvisa-py\n\n\nDocumentation\n--------------\n\nThe documentation can be read online at https://pyvisa-py.readthedocs.org\n\n\npyvisa-py is written and maintained by Hernan E. Grecco <hernan.grecco@gmail.com>.\n\n\nOther contributors, listed alphabetically, are:\n\n* Alex Forencich <alex@alexforencich.com>\n* Alexander Bessman <bessman@kth.se>\n* Colin Marquardt <github@marquardt-home.de>\n* Lance McCulley <lancemcculley@gmail.com>\n* Martin Ritter <ritter@mpp.mpg.de>\n* Matthieu Dartiailh <marul@laposte.net>\n* Sebastian Held <sebastian.held@imst.de>\n* Thomas Kopp <20.kopp@gmail.com>\n* Thorsten Liebig <liebig@imst.de>\n* Tobias M\u00fcller <Tobias_Mueller@twam.info>\n\n(If you think that your name belongs here, please let the maintainer know)\n\n\nPyVISA-py Changelog\n===================\n\n0.4.0 (unreleased)\n------------------\n\n- support device lan name in TCPIP INSTR resources PR #226\n- fix handling of VXI11 flags in device_write PR #226\n- do not enforce 4 bytes padding RFC 1014 since some instrument do not respect\n  it (Issue # 225) PR #226\n- fix not setting stop bits with serial devices PR #205\n- fix improper wait time before a timeout in the TCPIP backend PR # 173\n- add GPIB support for proprietary device drivers on Windows and Linux\n  (experimental): try importing gpib-ctypes if linux-gpib is not present.\n  fix #105 #137\n- fix return types of PyVisaLibrary and Session methods to match\n  pyvisa.highlevel.VisaLibraryBase fix #169 PR #170\n- avoid double closing of gpib resources PR #171\n- fix initialization of timeout for the USB resources (the default was set\n  before creating the underlying connection to which the timeout must be passed\n  and was not). PR #167\n- implement USBTMC abort sequence after read timeout to avoid losing\n  communication with the instrument after a timeout occurs. PR #179\n- fix custom timeout for USB instruments. PR #179\n- fix triggering for all protocols. PR #180\n- add support for \"quirky\" devices made by Rigol. PR #186 PR #207\n- add support for Visa flush operation. PR #208\n- fix reading large amounts of data from some instruments when using VXI-11. PR #209\n\n0.3.1 (2018-09-12)\n------------------\n\n- Fix initialization of timeout (issue identified in TCPIP resources) PR #160\n\n0.3 (2018-09-05)\n----------------\n\n- Fix handling of seesion registration under Python 3.7 PR #155\n- Add read_stb, assert_trigger, lock, unlock to highlevel PR #139\n- Fix timeout handling in usb PR #144\n- Add gpib_command and assert_trigger to GPIB PR # 136\n- Handle ValueError in usb list fix #131 PR #132\n- Fix reading on GPIB and implement clear and gpib_send_ifc PR #132\n- Do not error when listing USB devices PR #126\n- Fix an error in the handling of the termchar for TCPIP INSTR PR #126\n- Make list_resources return an empty tuple instead of erroring PR #121\n- Proper support for timeout in TCPIP INSTR sessions PR #120 #127 #130 #144\n- Proper encoding of data before transfer for all backends PR #119\n- Unify use of StatusCode PR #118\n- Improve handling of sessions attrs PR #116\n- TCPIP SOCKET timeout handling improvement PR #115\n- Fix compatibility with pyserial 3.0 PR #112\n- TCPIP SOCKET handler read should not block PR #107\n- TCPIP error handling fixes PR #100\n- Use repr() instead of str() to log RPC record PR #97\n- Speed up large transfer over GPIB 2beb52a5bcea2dae32d4a9908dc19f7874bfc0b7\n- Catch GPIB errors while enumerating devices 9fea9d5c40cc6c33ce1244c209e5e576a33abfc2\n- Add a serial poll function to GPIB backend PR #67\n- Handle timeout in USB TMC backend PR #64\n- Make USB TMC backend faster by transferring multiple bytes PR #63\n- Fix issue with encoding before data transfer PR #59 #\n- Get Linux GPIB version PR #55\n- Fix broken import in TCPIP sessions PR #51\n\n\n0.2 (2015-08-25)\n----------------\n\n- Added support for TCPIP Socket.\n  (Issue #38, thanks Thorsten Liebig)\n- Added support for GPIB INSTR using linux-gpib.\n  (Issue #24, thanks bessman)\n- Added support for USB RAW.\n  (Issue #18, kopp)\n- Better error reporting when pyusb or pyserial is missing.\n- Fixed logging of unicode strings.\n  (Issue #54)\n- Fixed timeout in SerialSession.\n  (Issue #44)\n- Moved resource name parsing to PyVISA.\n- VXI11 protocol performance enhancement.\n  (thanks alexforencich)\n- Improved pyusb importing.\n- Fixed large binary reads in TCPIP.\n- Added backend information to logger.\n- Use pyvisa compat/struct.py for python < 2.7.8\n  (thanks Martin Ritter)\n\n\n\n0.1 (2015-02-08)\n----------------\n\n- Initial release. Preliminary support for:\n  - USB INSTR\n  - TCPIP INSTR\n  - ASRL INSTR\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyvisa/pyvisa-py", "keywords": "Remote VISA GPIB USB serial RS232 measurement acquisition", "license": "MIT License", "maintainer": "Hernan E. Grecco", "maintainer_email": "hernan.grecco@gmail.com", "name": "PyVISA-py", "package_url": "https://pypi.org/project/PyVISA-py/", "platform": "Linux", "project_url": "https://pypi.org/project/PyVISA-py/", "project_urls": {"Homepage": "https://github.com/pyvisa/pyvisa-py"}, "release_url": "https://pypi.org/project/PyVISA-py/0.4.0/", "requires_dist": ["pyvisa (<1.11,>=1.8)", "gpib-ctypes (>=0.3.0); extra == 'gpib-ctypes'", "pyserial (>=3.0); extra == 'serial'", "pyusb; extra == 'usb'"], "requires_python": "", "summary": "Python VISA bindings for GPIB, RS232, and USB instruments", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pyvisa-py\">\n<h2>PyVISA-py</h2>\n<p>A PyVISA backend that implements a large part of the \u201cVirtual Instrument Software\nArchitecture\u201d (<a href=\"http://www.ivifoundation.org/Downloads/Specifications.htm\" rel=\"nofollow\">VISA</a>) in pure Python (with the help of some nice cross platform\nlibraries python packages!).</p>\n<div id=\"description\">\n<h3>Description</h3>\n<p>PyVISA started as wrapper for the NI-VISA library and therefore you need to install\nNational Instruments VISA library in your system. This works most of the time,\nfor most people. But NI-VISA is a proprietary library that only works on certain\nsystems. That is when PyVISA-py jumps in.</p>\n<p>Starting from version 1.6, PyVISA allows to use different backends. These backends can be\ndynamically loaded. PyVISA-py is one of such backends. It implements most of the methods\nfor Message Based communication (Serial/USB/GPIB/Ethernet) using Python and some well developed,\neasy to deploy and cross platform libraries</p>\n</div>\n<div id=\"visa-and-python\">\n<h3>VISA and Python</h3>\n<p>Python has a couple of features that make it very interesting for measurement controlling:</p>\n<ul>\n<li>Python is an easy-to-learn scripting language with short development cycles.</li>\n<li>It represents a high abstraction level, which perfectly blends with the abstraction\nlevel of measurement programs.</li>\n<li>It has a very rich set of native libraries, including numerical and plotting modules for\ndata analysis and visualisation.</li>\n<li>A large set of books (in many languages) and on-line publications is available.</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python (tested with 2.7, 3.4+)</li>\n<li>PyVISA 1.6+</li>\n</ul>\n<p>Optionally\n- PySerial (to interface with Serial instruments)\n- PyUSB (to interface with USB instruments)\n- linux-gpib (to interface with gpib instruments, only on linux)\n- gpib-ctypes (to interface with GPIB instruments on Windows and Linux, warning: experimental)</p>\n</div>\n<div id=\"python-2-support\">\n<h3>Python 2 support</h3>\n<p>With Python 2 EOL behind us, and given the limited time maintainers have,\nthe 0.4.0 release of PyVISA-py  will be the last version of PyVISA-py supporting\nPython 2.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Using pip:</p>\n<blockquote>\n$ pip install pyvisa-py</blockquote>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>The documentation can be read online at <a href=\"https://pyvisa-py.readthedocs.org\" rel=\"nofollow\">https://pyvisa-py.readthedocs.org</a></p>\n<p>pyvisa-py is written and maintained by Hernan E. Grecco &lt;<a href=\"mailto:hernan.grecco%40gmail.com\">hernan<span>.</span>grecco<span>@</span>gmail<span>.</span>com</a>&gt;.</p>\n<p>Other contributors, listed alphabetically, are:</p>\n<ul>\n<li>Alex Forencich &lt;<a href=\"mailto:alex%40alexforencich.com\">alex<span>@</span>alexforencich<span>.</span>com</a>&gt;</li>\n<li>Alexander Bessman &lt;<a href=\"mailto:bessman%40kth.se\">bessman<span>@</span>kth<span>.</span>se</a>&gt;</li>\n<li>Colin Marquardt &lt;<a href=\"mailto:github%40marquardt-home.de\">github<span>@</span>marquardt-home<span>.</span>de</a>&gt;</li>\n<li>Lance McCulley &lt;<a href=\"mailto:lancemcculley%40gmail.com\">lancemcculley<span>@</span>gmail<span>.</span>com</a>&gt;</li>\n<li>Martin Ritter &lt;<a href=\"mailto:ritter%40mpp.mpg.de\">ritter<span>@</span>mpp<span>.</span>mpg<span>.</span>de</a>&gt;</li>\n<li>Matthieu Dartiailh &lt;<a href=\"mailto:marul%40laposte.net\">marul<span>@</span>laposte<span>.</span>net</a>&gt;</li>\n<li>Sebastian Held &lt;<a href=\"mailto:sebastian.held%40imst.de\">sebastian<span>.</span>held<span>@</span>imst<span>.</span>de</a>&gt;</li>\n<li>Thomas Kopp &lt;<a href=\"mailto:20.kopp%40gmail.com\">20<span>.</span>kopp<span>@</span>gmail<span>.</span>com</a>&gt;</li>\n<li>Thorsten Liebig &lt;<a href=\"mailto:liebig%40imst.de\">liebig<span>@</span>imst<span>.</span>de</a>&gt;</li>\n<li>Tobias M\u00fcller &lt;<a href=\"mailto:Tobias_Mueller%40twam.info\">Tobias_Mueller<span>@</span>twam<span>.</span>info</a>&gt;</li>\n</ul>\n<p>(If you think that your name belongs here, please let the maintainer know)</p>\n</div>\n</div>\n<div id=\"pyvisa-py-changelog\">\n<h2>PyVISA-py Changelog</h2>\n<div id=\"unreleased\">\n<h3>0.4.0 (unreleased)</h3>\n<ul>\n<li>support device lan name in TCPIP INSTR resources PR #226</li>\n<li>fix handling of VXI11 flags in device_write PR #226</li>\n<li>do not enforce 4 bytes padding RFC 1014 since some instrument do not respect\nit (Issue # 225) PR #226</li>\n<li>fix not setting stop bits with serial devices PR #205</li>\n<li>fix improper wait time before a timeout in the TCPIP backend PR # 173</li>\n<li>add GPIB support for proprietary device drivers on Windows and Linux\n(experimental): try importing gpib-ctypes if linux-gpib is not present.\nfix #105 #137</li>\n<li>fix return types of PyVisaLibrary and Session methods to match\npyvisa.highlevel.VisaLibraryBase fix #169 PR #170</li>\n<li>avoid double closing of gpib resources PR #171</li>\n<li>fix initialization of timeout for the USB resources (the default was set\nbefore creating the underlying connection to which the timeout must be passed\nand was not). PR #167</li>\n<li>implement USBTMC abort sequence after read timeout to avoid losing\ncommunication with the instrument after a timeout occurs. PR #179</li>\n<li>fix custom timeout for USB instruments. PR #179</li>\n<li>fix triggering for all protocols. PR #180</li>\n<li>add support for \u201cquirky\u201d devices made by Rigol. PR #186 PR #207</li>\n<li>add support for Visa flush operation. PR #208</li>\n<li>fix reading large amounts of data from some instruments when using VXI-11. PR #209</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h3>0.3.1 (2018-09-12)</h3>\n<ul>\n<li>Fix initialization of timeout (issue identified in TCPIP resources) PR #160</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.3 (2018-09-05)</h3>\n<ul>\n<li>Fix handling of seesion registration under Python 3.7 PR #155</li>\n<li>Add read_stb, assert_trigger, lock, unlock to highlevel PR #139</li>\n<li>Fix timeout handling in usb PR #144</li>\n<li>Add gpib_command and assert_trigger to GPIB PR # 136</li>\n<li>Handle ValueError in usb list fix #131 PR #132</li>\n<li>Fix reading on GPIB and implement clear and gpib_send_ifc PR #132</li>\n<li>Do not error when listing USB devices PR #126</li>\n<li>Fix an error in the handling of the termchar for TCPIP INSTR PR #126</li>\n<li>Make list_resources return an empty tuple instead of erroring PR #121</li>\n<li>Proper support for timeout in TCPIP INSTR sessions PR #120 #127 #130 #144</li>\n<li>Proper encoding of data before transfer for all backends PR #119</li>\n<li>Unify use of StatusCode PR #118</li>\n<li>Improve handling of sessions attrs PR #116</li>\n<li>TCPIP SOCKET timeout handling improvement PR #115</li>\n<li>Fix compatibility with pyserial 3.0 PR #112</li>\n<li>TCPIP SOCKET handler read should not block PR #107</li>\n<li>TCPIP error handling fixes PR #100</li>\n<li>Use repr() instead of str() to log RPC record PR #97</li>\n<li>Speed up large transfer over GPIB 2beb52a5bcea2dae32d4a9908dc19f7874bfc0b7</li>\n<li>Catch GPIB errors while enumerating devices 9fea9d5c40cc6c33ce1244c209e5e576a33abfc2</li>\n<li>Add a serial poll function to GPIB backend PR #67</li>\n<li>Handle timeout in USB TMC backend PR #64</li>\n<li>Make USB TMC backend faster by transferring multiple bytes PR #63</li>\n<li>Fix issue with encoding before data transfer PR #59 #</li>\n<li>Get Linux GPIB version PR #55</li>\n<li>Fix broken import in TCPIP sessions PR #51</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.2 (2015-08-25)</h3>\n<ul>\n<li>Added support for TCPIP Socket.\n(Issue #38, thanks Thorsten Liebig)</li>\n<li>Added support for GPIB INSTR using linux-gpib.\n(Issue #24, thanks bessman)</li>\n<li>Added support for USB RAW.\n(Issue #18, kopp)</li>\n<li>Better error reporting when pyusb or pyserial is missing.</li>\n<li>Fixed logging of unicode strings.\n(Issue #54)</li>\n<li>Fixed timeout in SerialSession.\n(Issue #44)</li>\n<li>Moved resource name parsing to PyVISA.</li>\n<li>VXI11 protocol performance enhancement.\n(thanks alexforencich)</li>\n<li>Improved pyusb importing.</li>\n<li>Fixed large binary reads in TCPIP.</li>\n<li>Added backend information to logger.</li>\n<li>Use pyvisa compat/struct.py for python &lt; 2.7.8\n(thanks Martin Ritter)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.1 (2015-02-08)</h3>\n<ul>\n<li>Initial release. Preliminary support for:\n- USB INSTR\n- TCPIP INSTR\n- ASRL INSTR</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7191230, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8b61cd1b33753b8ae2e994b736cef972", "sha256": "680858e76ec5cdcce3283ca15eeb565ce2e84f4b28f8942f25b410a86b086f31"}, "downloads": -1, "filename": "PyVISA-py-0.1.tar.gz", "has_sig": false, "md5_digest": "8b61cd1b33753b8ae2e994b736cef972", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52764, "upload_time": "2015-02-08T05:16:36", "upload_time_iso_8601": "2015-02-08T05:16:36.525285Z", "url": "https://files.pythonhosted.org/packages/ed/5d/a5131083bf71312adfc7a3c18fc0e1b559dfa5d5278d4b93ba06869ceb67/PyVISA-py-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "1f5433d4f0b8f42bd8507fbc0a77f66b", "sha256": "4e77ac0302f13f22e003d9be07ede371ead3fd672a17d9a963e24e8babc29ad7"}, "downloads": -1, "filename": "PyVISA-py-0.2.tar.gz", "has_sig": false, "md5_digest": "1f5433d4f0b8f42bd8507fbc0a77f66b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50244, "upload_time": "2015-08-25T03:39:38", "upload_time_iso_8601": "2015-08-25T03:39:38.225185Z", "url": "https://files.pythonhosted.org/packages/59/ef/c79cd2c221dba12628242e917afe53aa08bb221016f7bee76ea1ff130a22/PyVISA-py-0.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "571e1dc2928396ca49027fe575ca6d09", "sha256": "d6e829a8d9cae2c3dbfe0afae6aef64fd75c89c1dcd64bf4daa921a2fcc983b3"}, "downloads": -1, "filename": "PyVISA_py-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "571e1dc2928396ca49027fe575ca6d09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 45322, "upload_time": "2018-09-06T02:15:07", "upload_time_iso_8601": "2018-09-06T02:15:07.757717Z", "url": "https://files.pythonhosted.org/packages/a4/af/631089598ae8aa0179b1b06d23881c569199c70fec9a78b16a478c8416ac/PyVISA_py-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "244ca74b208eca3094b986ecd4437e8a", "sha256": "56d69954faaa0769b150ffe67f4158132cd9dd709c20e186a6bd66e8d6577b85"}, "downloads": -1, "filename": "PyVISA-py-0.3.0.tar.gz", "has_sig": false, "md5_digest": "244ca74b208eca3094b986ecd4437e8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57505, "upload_time": "2018-09-06T02:15:09", "upload_time_iso_8601": "2018-09-06T02:15:09.558735Z", "url": "https://files.pythonhosted.org/packages/d6/1a/24a96fb61406606f4d036f2ff29d45637ceb006e232bd8d31580906e72ee/PyVISA-py-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e522a2f51f2adb42274d15eea28e939f", "sha256": "3f907cadd10cd40955ed5aa90e42a5bf0c0d2abc6077895c940dbaf75b7666b7"}, "downloads": -1, "filename": "PyVISA_py-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e522a2f51f2adb42274d15eea28e939f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 45372, "upload_time": "2018-09-13T00:15:43", "upload_time_iso_8601": "2018-09-13T00:15:43.941135Z", "url": "https://files.pythonhosted.org/packages/e8/50/33fef348ffaec0e773eb0fb465a594554d536df1efef3498a2b7484099fd/PyVISA_py-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2a648b715abb078a9cfc76583394bdb", "sha256": "1c918650a770a634434f6e8e0e1c097b5f0f80dc23bc60d3779c9890b4aa9150"}, "downloads": -1, "filename": "PyVISA-py-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a2a648b715abb078a9cfc76583394bdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57613, "upload_time": "2018-09-13T00:15:46", "upload_time_iso_8601": "2018-09-13T00:15:46.028146Z", "url": "https://files.pythonhosted.org/packages/7c/85/6f3170a31596d8e1ae55a108c07976da7ed2827c7a4328958fc242a88bc9/PyVISA-py-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "7be0fc587ee34d566112172a30e67a6d", "sha256": "eccaaf67c19e11be2d356809ebe33de6e0a6d007eaecaf9170bddb7edbae6ad1"}, "downloads": -1, "filename": "PyVISA_py-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7be0fc587ee34d566112172a30e67a6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53195, "upload_time": "2020-05-07T19:37:51", "upload_time_iso_8601": "2020-05-07T19:37:51.020600Z", "url": "https://files.pythonhosted.org/packages/a6/ed/0a7676d77865974344490b8d06fd75d1c237907d15ab39068d14252bd10f/PyVISA_py-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df742a9fbc024e0fc8e4e46abf9e5545", "sha256": "a27b509a626607cd21e871cbf2ca2df63422937f4621038a8ca8c30cdb688f61"}, "downloads": -1, "filename": "PyVISA-py-0.4.0.tar.gz", "has_sig": false, "md5_digest": "df742a9fbc024e0fc8e4e46abf9e5545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5867497, "upload_time": "2020-05-07T19:37:54", "upload_time_iso_8601": "2020-05-07T19:37:54.777449Z", "url": "https://files.pythonhosted.org/packages/69/c6/6d1f1777bae719cb521a5c3a93eb36935d4dd9e9adb650c6e253151dc4c9/PyVISA-py-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7be0fc587ee34d566112172a30e67a6d", "sha256": "eccaaf67c19e11be2d356809ebe33de6e0a6d007eaecaf9170bddb7edbae6ad1"}, "downloads": -1, "filename": "PyVISA_py-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7be0fc587ee34d566112172a30e67a6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53195, "upload_time": "2020-05-07T19:37:51", "upload_time_iso_8601": "2020-05-07T19:37:51.020600Z", "url": "https://files.pythonhosted.org/packages/a6/ed/0a7676d77865974344490b8d06fd75d1c237907d15ab39068d14252bd10f/PyVISA_py-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df742a9fbc024e0fc8e4e46abf9e5545", "sha256": "a27b509a626607cd21e871cbf2ca2df63422937f4621038a8ca8c30cdb688f61"}, "downloads": -1, "filename": "PyVISA-py-0.4.0.tar.gz", "has_sig": false, "md5_digest": "df742a9fbc024e0fc8e4e46abf9e5545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5867497, "upload_time": "2020-05-07T19:37:54", "upload_time_iso_8601": "2020-05-07T19:37:54.777449Z", "url": "https://files.pythonhosted.org/packages/69/c6/6d1f1777bae719cb521a5c3a93eb36935d4dd9e9adb650c6e253151dc4c9/PyVISA-py-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:55 2020"}