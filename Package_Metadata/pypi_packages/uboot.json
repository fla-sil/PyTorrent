{"info": {"author": "Martin Olejar", "author_email": "martin.olejar@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Embedded Systems", "Topic :: Utilities"], "description": "pyUBoot\n=======\n\n|Build Status| |Coverage Status| |PyPI Status| |Python Version|\n\npyUBoot is an Open Source python based library for manipulating with\nU-Boot images and environment variables. Is distributed with following\ncommand-line utilities (tools):\n\n-  `envimg <docs/envimg.md>`__ - a tool for editing environment\n   variables inside U-Boot image\n-  `mkenv <docs/mkenv.md>`__ - a tool to generate/extract U-Boot\n   environment variables into/from a binary blob\n-  `mkimg <docs/mkimg.md>`__ - a tool for manipulation with U-Boot\n   executable images (zImage, Scripts, ...)\n\nDependencies\n------------\n\n-  `Python <https://www.python.org>`__ - Python 3.x interpreter\n-  `Click <http://click.pocoo.org/6>`__ - Python package for creating\n   beautiful command line interface.\n-  `pyFDT <https://github.com/molejar/pyFDT>`__ - Python package for\n   manipulation with Device Tree images.\n\nInstallation\n------------\n\n.. code:: bash\n\n        $ pip install uboot\n\nTo install the latest version from master branch execute in shell\nfollowing commands:\n\n.. code:: bash\n\n        $ pip install -r https://raw.githubusercontent.com/molejar/pyUBoot/master/requirements.txt\n        $ pip install -U https://github.com/molejar/pyUBoot/archive/master.zip\n\nIn case of development, install it from cloned sources:\n\n.. code:: bash\n\n        $ git clone https://github.com/molejar/pyUBoot.git\n        $ cd pyUBoot\n        $ pip install -r requirements.txt\n        $ pip install -U -e .\n\n**NOTE:** You may run into a permissions issues running these commands.\nHere are a few options how to fix it:\n\n1. Run with ``sudo`` to install pyUBoot and dependencies globally\n2. Specify the ``--user`` option to install locally into your home\n   directory (export \"~/.local/bin\" into PATH variable if haven't).\n3. Run the command in a\n   `virtualenv <https://virtualenv.pypa.io/en/latest/>`__ local to a\n   specific project working set.\n\nUsage\n-----\n\nThe first example is showing how to use ``EnvBlob`` class from ``uboot``\nmodule in your code.\n\n.. code:: python\n\n\n        import uboot\n\n        # --------------------------------------------------------------------------------\n        # create env blob\n        # --------------------------------------------------------------------------------\n        env = uboot.EnvBlob(name=\"U-Boot Variables\")\n        env.redundant = True\n        env.set(\"bootdelay\", \"3\")\n        env.set(\"stdin\", \"serial\")\n        env.set(\"stdout\", \"serial\")\n\n        # --------------------------------------------------------------------------------\n        # save env blob as binary file\n        # --------------------------------------------------------------------------------\n        with open(\"env.img\", 'wb') as f:\n            f.write(env.export())\n\n        # --------------------------------------------------------------------------------\n        # save env blob in readable format as text file\n        # --------------------------------------------------------------------------------\n        with open(\"env.txt\", 'w') as f:\n            f.write(env.store())\n\n        # --------------------------------------------------------------------------------\n        # parse env blob from binary file\n        # --------------------------------------------------------------------------------\n        with open(\"env.img\", 'rb') as f:\n            env.parse(f.read())\n\n        # print env blob info\n        print(\"U-Boot enviroment blob loaded from env.img file:\")\n        print(env)\n        print()\n\n        # --------------------------------------------------------------------------------\n        # load env blob from text file\n        # --------------------------------------------------------------------------------\n        with open(\"env.txt\", 'r') as f:\n            env.load(f.read())\n\n        # print env blob info\n        print(\"U-Boot enviroment blob loaded from env.txt file:\")\n        print(env)\n\nThe second example is showing how to create Multi-File U-Boot image with\n``uboot`` module.\n\n.. code:: python\n\n\n        import uboot\n\n        # --------------------------------------------------------------------------------\n        # create dummy firmware image (u-boot executable image)\n        # --------------------------------------------------------------------------------\n        fwimg = uboot.StdImage(bytes([1]*512),\n                               name=\"Firmware Test Image\",\n                               laddr=0,\n                               eaddr=0,\n                               arch=uboot.EnumArchType.ARM,\n                               os=uboot.EnumOsType.LINUX,\n                               image=uboot.EnumImageType.FIRMWARE,\n                               compress=uboot.EnumCompressionType.NONE)\n\n        # --------------------------------------------------------------------------------\n        # create script image (u-boot executable image)\n        # --------------------------------------------------------------------------------\n        scimg = uboot.ScriptImage()\n        scimg.Name = \"Test Script Image\"\n        scimg.OsType = uboot.EnumOsType.LINUX\n        scimg.ArchType = uboot.EnumArchType.ARM\n        scimg.Compression = uboot.EnumCompressionType.NONE\n        scimg.EntryAddress = 0\n        scimg.LoadAddress = 0\n        scimg.append(\"echo\", \"'===== U-Boot settings ====='\")\n        scimg.append(\"setenv\", \"stdin serial\")\n        scimg.append(\"setenv\", \"stdout serial\")\n        scimg.append(\"setenv\", \"rootdev mmcblk2p2\")\n\n        # --------------------------------------------------------------------------------\n        # create multi-file image\n        # --------------------------------------------------------------------------------\n        mimg = uboot.MultiImage(name=\"Multi-File Test Image\",\n                                laddr=0,\n                                eaddr=0,\n                                arch=uboot.EnumArchType.ARM,\n                                os=uboot.EnumOsType.LINUX,\n                                compress=uboot.EnumCompressionType.NONE)\n        mimg.append(fwimg)\n        mimg.append(scimg)\n        # print created image info\n        print(mimg)\n\n        # --------------------------------------------------------------------------------\n        # save created image into file: uboot_mimg.img\n        # --------------------------------------------------------------------------------\n        with open(\"uboot_mimg.img\", \"wb\") as f:\n            f.write(mimg.export())\n\n        # --------------------------------------------------------------------------------\n        # open and read image file: uboot_mimg.img\n        # --------------------------------------------------------------------------------\n        with open(\"uboot_mimg.img\", \"rb\") as f:\n            data = f.read()\n\n        # --------------------------------------------------------------------------------\n        # parse binary data into new img object of specific image type\n        # --------------------------------------------------------------------------------\n        img = uboot.parse_img(data)\n\n        # print parsed image info\n        print(img)\n\n.. |Build Status| image:: https://travis-ci.org/molejar/pyUBoot.svg?branch=master\n   :target: https://travis-ci.org/molejar/pyUBoot\n.. |Coverage Status| image:: https://coveralls.io/repos/github/molejar/pyUBoot/badge.svg?branch=master\n   :target: https://coveralls.io/github/molejar/pyUBoot?branch=master\n.. |PyPI Status| image:: https://img.shields.io/pypi/v/uboot.svg\n   :target: https://pypi.python.org/pypi/uboot\n.. |Python Version| image:: https://img.shields.io/pypi/pyversions/uboot.svg\n   :target: https://www.python.org\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/molejar/pyUBoot", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "uboot", "package_url": "https://pypi.org/project/uboot/", "platform": "", "project_url": "https://pypi.org/project/uboot/", "project_urls": {"Homepage": "https://github.com/molejar/pyUBoot"}, "release_url": "https://pypi.org/project/uboot/0.1.1/", "requires_dist": ["click (==7.0)", "easy-enum (==0.2.0)", "fdt (==0.1.2)"], "requires_python": ">=3.6", "summary": "Open Source library for manipulating with U-Boot images and environment variables", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/molejar/pyUBoot\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c08e902e90f5fa09b4bb02a16f997118e8f0d233/68747470733a2f2f7472617669732d63692e6f72672f6d6f6c656a61722f707955426f6f742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/molejar/pyUBoot?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dcbeee74761df6823f4c60bbd76bdfea4d74d9c9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6f6c656a61722f707955426f6f742f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/uboot\" rel=\"nofollow\"><img alt=\"PyPI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/210a7beb4c6b4c7a07ee1686655caeb7ca499871/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f75626f6f742e737667\"></a> <a href=\"https://www.python.org\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a568e82e2a3c82bb8a71b977d4ca827c1f64495a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f75626f6f742e737667\"></a></p>\n<p>pyUBoot is an Open Source python based library for manipulating with\nU-Boot images and environment variables. Is distributed with following\ncommand-line utilities (tools):</p>\n<ul>\n<li><a href=\"docs/envimg.md\" rel=\"nofollow\">envimg</a> - a tool for editing environment\nvariables inside U-Boot image</li>\n<li><a href=\"docs/mkenv.md\" rel=\"nofollow\">mkenv</a> - a tool to generate/extract U-Boot\nenvironment variables into/from a binary blob</li>\n<li><a href=\"docs/mkimg.md\" rel=\"nofollow\">mkimg</a> - a tool for manipulation with U-Boot\nexecutable images (zImage, Scripts, \u2026)</li>\n</ul>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> - Python 3.x interpreter</li>\n<li><a href=\"http://click.pocoo.org/6\" rel=\"nofollow\">Click</a> - Python package for creating\nbeautiful command line interface.</li>\n<li><a href=\"https://github.com/molejar/pyFDT\" rel=\"nofollow\">pyFDT</a> - Python package for\nmanipulation with Device Tree images.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install uboot\n</pre>\n<p>To install the latest version from master branch execute in shell\nfollowing commands:</p>\n<pre>$ pip install -r https://raw.githubusercontent.com/molejar/pyUBoot/master/requirements.txt\n$ pip install -U https://github.com/molejar/pyUBoot/archive/master.zip\n</pre>\n<p>In case of development, install it from cloned sources:</p>\n<pre>$ git clone https://github.com/molejar/pyUBoot.git\n$ <span class=\"nb\">cd</span> pyUBoot\n$ pip install -r requirements.txt\n$ pip install -U -e .\n</pre>\n<p><strong>NOTE:</strong> You may run into a permissions issues running these commands.\nHere are a few options how to fix it:</p>\n<ol>\n<li>Run with <tt>sudo</tt> to install pyUBoot and dependencies globally</li>\n<li>Specify the <tt><span class=\"pre\">--user</span></tt> option to install locally into your home\ndirectory (export \u201c~/.local/bin\u201d into PATH variable if haven\u2019t).</li>\n<li>Run the command in a\n<a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtualenv</a> local to a\nspecific project working set.</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The first example is showing how to use <tt>EnvBlob</tt> class from <tt>uboot</tt>\nmodule in your code.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uboot</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># create env blob</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnvBlob</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"U-Boot Variables\"</span><span class=\"p\">)</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">redundant</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"bootdelay\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">)</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"stdin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"serial\"</span><span class=\"p\">)</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"stdout\"</span><span class=\"p\">,</span> <span class=\"s2\">\"serial\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># save env blob as binary file</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"env.img\"</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># save env blob in readable format as text file</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"env.txt\"</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># parse env blob from binary file</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"env.img\"</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># print env blob info</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"U-Boot enviroment blob loaded from env.img file:\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># load env blob from text file</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"env.txt\"</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># print env blob info</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"U-Boot enviroment blob loaded from env.txt file:\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n</pre>\n<p>The second example is showing how to create Multi-File U-Boot image with\n<tt>uboot</tt> module.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uboot</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># create dummy firmware image (u-boot executable image)</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"n\">fwimg</span> <span class=\"o\">=</span> <span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">StdImage</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">512</span><span class=\"p\">),</span>\n                       <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Firmware Test Image\"</span><span class=\"p\">,</span>\n                       <span class=\"n\">laddr</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"n\">eaddr</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"n\">arch</span><span class=\"o\">=</span><span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumArchType</span><span class=\"o\">.</span><span class=\"n\">ARM</span><span class=\"p\">,</span>\n                       <span class=\"n\">os</span><span class=\"o\">=</span><span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumOsType</span><span class=\"o\">.</span><span class=\"n\">LINUX</span><span class=\"p\">,</span>\n                       <span class=\"n\">image</span><span class=\"o\">=</span><span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumImageType</span><span class=\"o\">.</span><span class=\"n\">FIRMWARE</span><span class=\"p\">,</span>\n                       <span class=\"n\">compress</span><span class=\"o\">=</span><span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumCompressionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># create script image (u-boot executable image)</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"n\">scimg</span> <span class=\"o\">=</span> <span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">ScriptImage</span><span class=\"p\">()</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">Name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Test Script Image\"</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">OsType</span> <span class=\"o\">=</span> <span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumOsType</span><span class=\"o\">.</span><span class=\"n\">LINUX</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">ArchType</span> <span class=\"o\">=</span> <span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumArchType</span><span class=\"o\">.</span><span class=\"n\">ARM</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">Compression</span> <span class=\"o\">=</span> <span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumCompressionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">EntryAddress</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">LoadAddress</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"echo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"'===== U-Boot settings ====='\"</span><span class=\"p\">)</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"setenv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"stdin serial\"</span><span class=\"p\">)</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"setenv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"stdout serial\"</span><span class=\"p\">)</span>\n<span class=\"n\">scimg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"setenv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rootdev mmcblk2p2\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># create multi-file image</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"n\">mimg</span> <span class=\"o\">=</span> <span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">MultiImage</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Multi-File Test Image\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">laddr</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"n\">eaddr</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"n\">arch</span><span class=\"o\">=</span><span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumArchType</span><span class=\"o\">.</span><span class=\"n\">ARM</span><span class=\"p\">,</span>\n                        <span class=\"n\">os</span><span class=\"o\">=</span><span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumOsType</span><span class=\"o\">.</span><span class=\"n\">LINUX</span><span class=\"p\">,</span>\n                        <span class=\"n\">compress</span><span class=\"o\">=</span><span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">EnumCompressionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">)</span>\n<span class=\"n\">mimg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">fwimg</span><span class=\"p\">)</span>\n<span class=\"n\">mimg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">scimg</span><span class=\"p\">)</span>\n<span class=\"c1\"># print created image info</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mimg</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># save created image into file: uboot_mimg.img</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"uboot_mimg.img\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">mimg</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># open and read image file: uboot_mimg.img</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"uboot_mimg.img\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"c1\"># parse binary data into new img object of specific image type</span>\n<span class=\"c1\"># --------------------------------------------------------------------------------</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">uboot</span><span class=\"o\">.</span><span class=\"n\">parse_img</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># print parsed image info</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5564922, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5a9064a43d9cf5233a1edf5cfe6f8208", "sha256": "1d4236ba4cddc00a1a1db2fc530e35a3699f13f08dc7e9336fe084b8bcec7a70"}, "downloads": -1, "filename": "uboot-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5a9064a43d9cf5233a1edf5cfe6f8208", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27721, "upload_time": "2018-05-09T20:23:36", "upload_time_iso_8601": "2018-05-09T20:23:36.984853Z", "url": "https://files.pythonhosted.org/packages/99/86/43f8d635114b79693695cacaf1e6cdb68fbce0cb021b0baea766df996e01/uboot-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1ef7e8af51d9a26455ba48c153fd8719", "sha256": "55b703df4dcce1eb4dad42c427dc71d64f3fba25db3cae8ad2647b738e5a8369"}, "downloads": -1, "filename": "uboot-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1ef7e8af51d9a26455ba48c153fd8719", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28121, "upload_time": "2019-07-21T22:31:25", "upload_time_iso_8601": "2019-07-21T22:31:25.256734Z", "url": "https://files.pythonhosted.org/packages/b7/0e/989c8b041ed265efa20c9e49ae20f103c5c41de66556cd2eed2a792758cd/uboot-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebc48586e6500d4c70fbc7a3c152b957", "sha256": "1b50f3d1653ebdf8269c715ab718f245eac082ebd41d6ac1e25c386e75a090a7"}, "downloads": -1, "filename": "uboot-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ebc48586e6500d4c70fbc7a3c152b957", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20121, "upload_time": "2019-07-21T22:31:26", "upload_time_iso_8601": "2019-07-21T22:31:26.764797Z", "url": "https://files.pythonhosted.org/packages/b4/5f/aaf85e1680f7e075550943fe7a84a1759448aab5338185ff8c2b479ce796/uboot-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ef7e8af51d9a26455ba48c153fd8719", "sha256": "55b703df4dcce1eb4dad42c427dc71d64f3fba25db3cae8ad2647b738e5a8369"}, "downloads": -1, "filename": "uboot-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1ef7e8af51d9a26455ba48c153fd8719", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28121, "upload_time": "2019-07-21T22:31:25", "upload_time_iso_8601": "2019-07-21T22:31:25.256734Z", "url": "https://files.pythonhosted.org/packages/b7/0e/989c8b041ed265efa20c9e49ae20f103c5c41de66556cd2eed2a792758cd/uboot-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebc48586e6500d4c70fbc7a3c152b957", "sha256": "1b50f3d1653ebdf8269c715ab718f245eac082ebd41d6ac1e25c386e75a090a7"}, "downloads": -1, "filename": "uboot-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ebc48586e6500d4c70fbc7a3c152b957", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20121, "upload_time": "2019-07-21T22:31:26", "upload_time_iso_8601": "2019-07-21T22:31:26.764797Z", "url": "https://files.pythonhosted.org/packages/b4/5f/aaf85e1680f7e075550943fe7a84a1759448aab5338185ff8c2b479ce796/uboot-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:15 2020"}