{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "|Build Status|\n\nnlg\n===\n\nNatural Language Generation component for\n`Gramex <https://github.com/gramener/gramex>`__. The NLG module is\ndesigned to work as a Python library, as well as a `Gramex\napplication <https://learn.gramener.com/guide/apps/#gramex-apps>`__.\n\nThe library:\n\n1. Automatically creates tornado templates from English text in the\n   context of a dataset.\n2. Allows for modification and generalization of these templates.\n3. Renders these templates as a unified narrative.\n\nInstallation\n------------\n\nThe NLG library can be installed from PyPI as follows:\n\n.. code:: bash\n\n    $ pip install nlg\n    $ python -m spacy download en_core_web_sm\n    $ gramex setup ui\n\nor from source as follows:\n\n.. code:: bash\n\n    $ git clone https://github.com/gramener/gramex-nlg.git\n    $ cd gramex-nlg\n    $ pip install -e .\n    $ gramex setup ./app\n\nUsage\n-----\n\nUsing the Python library\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo get started, see the `example notebook here <https://github.com/gramener/gramex-nlg/tree/dev/examples/intro-narrative-api.ipynb>`_.\n\n.. code:: python\n\n    >>> import pandas as pd\n    >>> from gramex import data\n\n    >>> # load some data\n    >>> df = pd.read_csv('iris.csv')\n\n    >>> # specify a FormHandler operation - find the average sepal_width per species\n    >>> fh_args = {'_by': ['species'], '_c': ['sepal_width|avg'], '_sort': ['sepal_width|avg']}\n\n    >>> # Draw a sample\n    >>> xdf = df.sample(frac=0.1, random_state=10)\n\n    >>> # perform the FormHandler operation on the data\n    >>> print(data.filter(xdf, fh_args.copy()))\n          species  sepal_width|avg\n    2   virginica             2.70\n    1  versicolor             2.92\n    0      setosa             3.15\n\n    >>> # Write something about the output\n    >>> from nlg.utils import load_spacy_model\n    >>> text = nlp(\"The virginica species has the least average sepal_width.\")\n\n    >>> # Generate a template\n    >>> from nlg.search import templatize\n    >>> tmpl = templatize(text, fh_args, xdf)\n    >>> print(tmpl)\n    {% set fh_args = {\"_by\": [\"species\"], \"_c\": [\"sepal_width|avg\"], \"_sort\": [\"sepal_width|avg\"]}  %}\n    {% set df = U.gfilter(orgdf, fh_args.copy()) %}\n    {% set fh_args = U.sanitize_fh_args(fh_args, orgdf) %}\n    The {{ df[\"species\"].iloc[0] }} species has the least average {{ fh_args[\"_sort\"][0].lower() }}.\n\n    >>> # Render the same template with new data.\n    >>> print(render(df, tmpl).decode('utf8'))\n    The versicolor species has the least average sepal_width|avg.\n\nUsing the NLG IDE\n~~~~~~~~~~~~~~~~~\n\nThe NLG module ships with an IDE. The IDE is a `Gramex\napplication <https://learn.gramener.com/guide/apps/>`__.\n\nTo use it, install the NLG module as indicated above, and add the\nfollowing to your ``gramex.yaml``:\n\n.. code:: yaml\n\n    variables:\n      NLG_ROOT:\n        function: nlg.utils._locate_app_config()\n\n    import:\n      nlg:\n        path: $NLG_ROOT\n        YAMLURL: $YAMLURL/nlg\n\nThis configuration mounts the app at the ``/nlg/`` resource. Start gramex to access it.\n\nThe Gramex NLG IDE\n------------------\n\nThe NLG component depends on two sources of information:\n\n1. A source dataset, which can be uploaded on to the IDE. A dataset is\n   uniquely identified with its filename. Once uploaded, the file\n   persists and is available for selection from the app. Any *file* that\n   makes a valid URL for\n   `FormHandler <http://learn.gramener.com/guide/formhandler>`__ can be\n   used with the NLG app.\n2. A *narrative*, which is a collection of templates and rules around\n   them. The narrative consists of the configuration which governs the\n   rendered text. An existing narrative can be uploaded through the \"Add\n   Data\" button, or can be created through the IDE. Once created, the\n   narrative can be named and becomes available for selection from the\n   \"Add Data\" modal.\n\nThe NLG IDE\n-----------\n\nThe primary purpose of the IDE is to create or edit narratives based on\na dataset. Once a dataset has been selected, it is exposed in the IDE as\na `FormHandler\ntable <https://learn.gramener.com/guide/formhandler/#formhandler-tables>`__.\n\n.. figure:: doc/images/nlg-ide-input.png\n   :alt: \n\nUsers can now type English text into the IDE and add it to the\nnarrative. This automatically templatizes the text, and adds the\ntemplate to the narrative. For example, typing \"Humphrey Bogart is at\nthe top of the list.\" does this:\n\n.. figure:: doc/images/nlg-ide-toplist.gif\n   :alt: \n\nThis means that the input statement has been templatized and added to\nthe narrative. The part of the input text that was successfully\ntemplatized is highlighted in green. Clicking on the spanner button next\nto a template opens the `Template Settings <#template-settings>`__\nmodal.\n\nTemplate Settings\n-----------------\n\n.. figure:: doc/images/nlg-template-settings.png\n   :alt: \n\nThis dialog provides configuration options for all template attributes:\n\n1. **Template Name** - Each template can optionally be named.\n2. **Condition** - Any Python expression which evaluates to a boolean\n   may be set as a condition, which controls whether the template is\n   rendered.\n3. The actual Tornado template itself can be edited. Any valid Tornado\n   template is acceptable.\n4. **Token Settings** - Every token from the input text that finds a\n   match in the dataset or in FormHandler arguments (i.e. every token\n   that is highlighted in the preview) is converted into a `template\n   expression <https://www.tornadoweb.org/en/stable/template.html#syntax-reference>`__.\n   Such tokens have their own attributes, as follows:\n\n   -  **Token search results** - if a token is found in more than one\n      place (say, a dataframe cell as well as a FormHandler argument),\n      this setting allows the user to select the right result.\n   -  **Grammar options** - the NLG engine may automatically apply\n      certain string formatting or lexical operations to the template\n      expression to make it match the input text. Any number of these\n      operations can be enabled / disabled through this setting.\n   -  **Make variable** - a token may be set as a local variable within\n      the template.\n   -  **Ignore** - the template expression corresponding to the token\n      may be ignored, and set back to the literal input text.\n\n5. **Run Template** - Run the current template against the dataframe and\n   preview its output.\n6. **Save Template** - Save the template. Note that this is required if\n   the template has been manually edited in the textarea.\n\nNaming and Saving a Narrative\n-----------------------------\n\nOnce a narrative has been fully configured, it can be named and saved.\nDoing so causes it to appear the narrative dropdown menu on the app.\n\nSharing a Narrative\n-------------------\n\nAfter a narrative has been named and saved, it be shared in two modes:\n\n1. **IDE mode** - This option lets users copy a URL that redirects to\n   the IDE, with the current dataset and the current narrative set in\n   the session.\n2. **Embed mode** - Copy an HTML snippet to embed into a page which\n   contains a Formhandler table. The template will render live as the\n   table changes.\n\n\nGlossary: Grammar of Data-Driven Narratives\n===========================================\n\nThis section describes the building blocks of Gramex's approach to natural language generation.\nThese concepts serve as primitives to the logic and automation capabilities of the NLG engine.\n\n1. **Narrative** - A *narrative* is a piece of text written by a user or generated by a machine which contains facts about a dataset.\n   A narrative in its entirity is assumed to be a function of three items:\n\n   a. A dataset\n   b. Operations on that dataset\n   c. Some \"source text\" provided by the user.\n\n   For example, the following is a narrative about the `Fisher Iris dataset <https://archive.ics.uci.edu/ml/datasets/Iris>`_.\n\n      The iris dataset contains measurements from a hundred and fifty samples of three unique species of the iris flower - setosa, versicolor and virginica. The species are equally distributed within the dataset, so that each species has fifty samples. For each sample, four measurements are taken - sepal width, petal width, sepal width and sepal length. The average petal length of the setosa is significantly less than that of versicolor or virginica. The average petal width of virginica is much higher than that of versicolor. However, there is no pair of features that can uniquely identify a species. The presence of such properties makes the iris dataset ideal for explaining machine learning concepts.\n\n2. **Nugget** - A *nugget* is ideally a single sentence which conveys a fact about the data. Each sentence in the example narrative except the last two is a nugget. Note that each nugget derives its facts from the source data directly, or from the result of some operation on the data. For example, the following nugget\n\n   The average petal length of the setosa is significantly less than that of versicolor or virginica.\n   \n   derives from a groupby-and-average operation on one column of the dataset. Some nuggets, like the one enumerating the number of samples in the dataset, derive from the raw dataset, *not* from the result of any operations on it. A narrative is essentially an ordered collection of nuggets.\n\n3. **Variables**  - A *variable* is a piece of text which can change with the data or the operations performed on it. Here is a reproduction of the example narrative, with all variables shown in bold.\n\n      The iris dataset contains measurements from **a hundred and fifty** samples of **three** unique species of the iris flower - **setosa, versicolor and virginica**. The species are equally distributed within the dataset, so that each species has **fifty** samples. For each sample, **four** measurements are taken - **sepal width, petal width, sepal width and sepal length**. The **average petal length** of the setosa is significantly **less** than that of versicolor or virginica. The **average petal width** of virginica is much **higher** than that of versicolor. However, there is no pair of features that can uniquely identify a species. The presence of such properties makes the iris dataset ideal for explaining machine learning concepts.\n\n   Note that each variable has two defining components:\n\n   * a *source text*, as initially provided by the user\n   * one or more *formulae*, which compute the value of the variable for a specific instance of the data. Note that the source text of a variable may be found in multiple places within a dataset, and as such, a variable may have multiple formulae - one of which will have to be preferred by the user.\n\n   For example, for the first variable in example narrative, \"hundred and fifty\" is the source text, and the formula is any machine code that counts the number of rows in the dataset and translates it into a human-readable form. A variable may additionally have other attributes, like:\n\n   * a set of linguistic *inflections* which determine the form of the rendered variable text - these are distinct from the formula itself, in that the formula creates the base form of the text and inflections modify the base form.\n   * a *name* used to identify the variable within the template of the nugget\n\n\nThus, narratives are composed from nuggets, and nuggets from variables. This grammar allows the NLG engine to approach the problem of data-driven, machine-generated narratives in a more *compositional* manner than a *generative* one.\n\n.. |Build Status| image:: https://travis-ci.org/gramener/gramex-nlg.svg?branch=dev\n   :target: https://travis-ci.org/gramener/gramex-nlg", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.org/project/nlg/#files", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gramener/gramex-nlg", "keywords": "", "license": "MIT", "maintainer": "Jaidev Deshpande", "maintainer_email": "jaidev.deshpande@gramener.com", "name": "nlg", "package_url": "https://pypi.org/project/nlg/", "platform": "", "project_url": "https://pypi.org/project/nlg/", "project_urls": {"Download": "https://pypi.org/project/nlg/#files", "Homepage": "https://github.com/gramener/gramex-nlg"}, "release_url": "https://pypi.org/project/nlg/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Natural Language Generation framework for Python.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/gramener/gramex-nlg\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4ec922e0037a1ca4fefc57833d60dbc388979d0/68747470733a2f2f7472617669732d63692e6f72672f6772616d656e65722f6772616d65782d6e6c672e7376673f6272616e63683d646576\"></a></p>\n<div id=\"nlg\">\n<h2>nlg</h2>\n<p>Natural Language Generation component for\n<a href=\"https://github.com/gramener/gramex\" rel=\"nofollow\">Gramex</a>. The NLG module is\ndesigned to work as a Python library, as well as a <a href=\"https://learn.gramener.com/guide/apps/#gramex-apps\" rel=\"nofollow\">Gramex\napplication</a>.</p>\n<p>The library:</p>\n<ol>\n<li>Automatically creates tornado templates from English text in the\ncontext of a dataset.</li>\n<li>Allows for modification and generalization of these templates.</li>\n<li>Renders these templates as a unified narrative.</li>\n</ol>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>The NLG library can be installed from PyPI as follows:</p>\n<pre>$ pip install nlg\n$ python -m spacy download en_core_web_sm\n$ gramex setup ui\n</pre>\n<p>or from source as follows:</p>\n<pre>$ git clone https://github.com/gramener/gramex-nlg.git\n$ <span class=\"nb\">cd</span> gramex-nlg\n$ pip install -e .\n$ gramex setup ./app\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"using-the-python-library\">\n<h4>Using the Python library</h4>\n<p>To get started, see the <a href=\"https://github.com/gramener/gramex-nlg/tree/dev/examples/intro-narrative-api.ipynb\" rel=\"nofollow\">example notebook here</a>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">gramex</span> <span class=\"kn\">import</span> <span class=\"n\">data</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># load some data</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'iris.csv'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># specify a FormHandler operation - find the average sepal_width per species</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fh_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'_by'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'species'</span><span class=\"p\">],</span> <span class=\"s1\">'_c'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'sepal_width|avg'</span><span class=\"p\">],</span> <span class=\"s1\">'_sort'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'sepal_width|avg'</span><span class=\"p\">]}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Draw a sample</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">xdf</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">frac</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># perform the FormHandler operation on the data</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">xdf</span><span class=\"p\">,</span> <span class=\"n\">fh_args</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()))</span>\n      <span class=\"n\">species</span>  <span class=\"n\">sepal_width</span><span class=\"o\">|</span><span class=\"n\">avg</span>\n<span class=\"mi\">2</span>   <span class=\"n\">virginica</span>             <span class=\"mf\">2.70</span>\n<span class=\"mi\">1</span>  <span class=\"n\">versicolor</span>             <span class=\"mf\">2.92</span>\n<span class=\"mi\">0</span>      <span class=\"n\">setosa</span>             <span class=\"mf\">3.15</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Write something about the output</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nlg.utils</span> <span class=\"kn\">import</span> <span class=\"n\">load_spacy_model</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">nlp</span><span class=\"p\">(</span><span class=\"s2\">\"The virginica species has the least average sepal_width.\"</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Generate a template</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nlg.search</span> <span class=\"kn\">import</span> <span class=\"n\">templatize</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tmpl</span> <span class=\"o\">=</span> <span class=\"n\">templatize</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">fh_args</span><span class=\"p\">,</span> <span class=\"n\">xdf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tmpl</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nb\">set</span> <span class=\"n\">fh_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"_by\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"species\"</span><span class=\"p\">],</span> <span class=\"s2\">\"_c\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"sepal_width|avg\"</span><span class=\"p\">],</span> <span class=\"s2\">\"_sort\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"sepal_width|avg\"</span><span class=\"p\">]}</span>  <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nb\">set</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">U</span><span class=\"o\">.</span><span class=\"n\">gfilter</span><span class=\"p\">(</span><span class=\"n\">orgdf</span><span class=\"p\">,</span> <span class=\"n\">fh_args</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">())</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nb\">set</span> <span class=\"n\">fh_args</span> <span class=\"o\">=</span> <span class=\"n\">U</span><span class=\"o\">.</span><span class=\"n\">sanitize_fh_args</span><span class=\"p\">(</span><span class=\"n\">fh_args</span><span class=\"p\">,</span> <span class=\"n\">orgdf</span><span class=\"p\">)</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"n\">The</span> <span class=\"p\">{{</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s2\">\"species\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">}}</span> <span class=\"n\">species</span> <span class=\"n\">has</span> <span class=\"n\">the</span> <span class=\"n\">least</span> <span class=\"n\">average</span> <span class=\"p\">{{</span> <span class=\"n\">fh_args</span><span class=\"p\">[</span><span class=\"s2\">\"_sort\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"p\">}}</span><span class=\"o\">.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Render the same template with new data.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">tmpl</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf8'</span><span class=\"p\">))</span>\n<span class=\"n\">The</span> <span class=\"n\">versicolor</span> <span class=\"n\">species</span> <span class=\"n\">has</span> <span class=\"n\">the</span> <span class=\"n\">least</span> <span class=\"n\">average</span> <span class=\"n\">sepal_width</span><span class=\"o\">|</span><span class=\"n\">avg</span><span class=\"o\">.</span>\n</pre>\n</div>\n<div id=\"using-the-nlg-ide\">\n<h4>Using the NLG IDE</h4>\n<p>The NLG module ships with an IDE. The IDE is a <a href=\"https://learn.gramener.com/guide/apps/\" rel=\"nofollow\">Gramex\napplication</a>.</p>\n<p>To use it, install the NLG module as indicated above, and add the\nfollowing to your <tt>gramex.yaml</tt>:</p>\n<pre><span class=\"nt\">variables</span><span class=\"p\">:</span>\n  <span class=\"nt\">NLG_ROOT</span><span class=\"p\">:</span>\n    <span class=\"nt\">function</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">nlg.utils._locate_app_config()</span>\n\n<span class=\"nt\">import</span><span class=\"p\">:</span>\n  <span class=\"nt\">nlg</span><span class=\"p\">:</span>\n    <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">$NLG_ROOT</span>\n    <span class=\"nt\">YAMLURL</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">$YAMLURL/nlg</span>\n</pre>\n<p>This configuration mounts the app at the <tt>/nlg/</tt> resource. Start gramex to access it.</p>\n</div>\n</div>\n<div id=\"the-gramex-nlg-ide\">\n<h3>The Gramex NLG IDE</h3>\n<p>The NLG component depends on two sources of information:</p>\n<ol>\n<li>A source dataset, which can be uploaded on to the IDE. A dataset is\nuniquely identified with its filename. Once uploaded, the file\npersists and is available for selection from the app. Any <em>file</em> that\nmakes a valid URL for\n<a href=\"http://learn.gramener.com/guide/formhandler\" rel=\"nofollow\">FormHandler</a> can be\nused with the NLG app.</li>\n<li>A <em>narrative</em>, which is a collection of templates and rules around\nthem. The narrative consists of the configuration which governs the\nrendered text. An existing narrative can be uploaded through the \u201cAdd\nData\u201d button, or can be created through the IDE. Once created, the\nnarrative can be named and becomes available for selection from the\n\u201cAdd Data\u201d modal.</li>\n</ol>\n</div>\n<div id=\"the-nlg-ide\">\n<h3>The NLG IDE</h3>\n<p>The primary purpose of the IDE is to create or edit narratives based on\na dataset. Once a dataset has been selected, it is exposed in the IDE as\na <a href=\"https://learn.gramener.com/guide/formhandler/#formhandler-tables\" rel=\"nofollow\">FormHandler\ntable</a>.</p>\n<div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2709b7c1418e7d566507c607cf41d2b7c61898e/646f632f696d616765732f6e6c672d6964652d696e7075742e706e67\">\n</div>\n<p>Users can now type English text into the IDE and add it to the\nnarrative. This automatically templatizes the text, and adds the\ntemplate to the narrative. For example, typing \u201cHumphrey Bogart is at\nthe top of the list.\u201d does this:</p>\n<div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab2bb8864cb0f2a3cdb76c6fc44019f9443f8b8f/646f632f696d616765732f6e6c672d6964652d746f706c6973742e676966\">\n</div>\n<p>This means that the input statement has been templatized and added to\nthe narrative. The part of the input text that was successfully\ntemplatized is highlighted in green. Clicking on the spanner button next\nto a template opens the <a href=\"#template-settings\" rel=\"nofollow\">Template Settings</a>\nmodal.</p>\n</div>\n<div id=\"template-settings\">\n<h3>Template Settings</h3>\n<div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91b153394509a89cec6ba80ce2d7b34b2ac6ab1e/646f632f696d616765732f6e6c672d74656d706c6174652d73657474696e67732e706e67\">\n</div>\n<p>This dialog provides configuration options for all template attributes:</p>\n<ol>\n<li><strong>Template Name</strong> - Each template can optionally be named.</li>\n<li><strong>Condition</strong> - Any Python expression which evaluates to a boolean\nmay be set as a condition, which controls whether the template is\nrendered.</li>\n<li>The actual Tornado template itself can be edited. Any valid Tornado\ntemplate is acceptable.</li>\n<li><strong>Token Settings</strong> - Every token from the input text that finds a\nmatch in the dataset or in FormHandler arguments (i.e. every token\nthat is highlighted in the preview) is converted into a <a href=\"https://www.tornadoweb.org/en/stable/template.html#syntax-reference\" rel=\"nofollow\">template\nexpression</a>.\nSuch tokens have their own attributes, as follows:<ul>\n<li><strong>Token search results</strong> - if a token is found in more than one\nplace (say, a dataframe cell as well as a FormHandler argument),\nthis setting allows the user to select the right result.</li>\n<li><strong>Grammar options</strong> - the NLG engine may automatically apply\ncertain string formatting or lexical operations to the template\nexpression to make it match the input text. Any number of these\noperations can be enabled / disabled through this setting.</li>\n<li><strong>Make variable</strong> - a token may be set as a local variable within\nthe template.</li>\n<li><strong>Ignore</strong> - the template expression corresponding to the token\nmay be ignored, and set back to the literal input text.</li>\n</ul>\n</li>\n<li><strong>Run Template</strong> - Run the current template against the dataframe and\npreview its output.</li>\n<li><strong>Save Template</strong> - Save the template. Note that this is required if\nthe template has been manually edited in the textarea.</li>\n</ol>\n</div>\n<div id=\"naming-and-saving-a-narrative\">\n<h3>Naming and Saving a Narrative</h3>\n<p>Once a narrative has been fully configured, it can be named and saved.\nDoing so causes it to appear the narrative dropdown menu on the app.</p>\n</div>\n<div id=\"sharing-a-narrative\">\n<h3>Sharing a Narrative</h3>\n<p>After a narrative has been named and saved, it be shared in two modes:</p>\n<ol>\n<li><strong>IDE mode</strong> - This option lets users copy a URL that redirects to\nthe IDE, with the current dataset and the current narrative set in\nthe session.</li>\n<li><strong>Embed mode</strong> - Copy an HTML snippet to embed into a page which\ncontains a Formhandler table. The template will render live as the\ntable changes.</li>\n</ol>\n</div>\n</div>\n<div id=\"glossary-grammar-of-data-driven-narratives\">\n<h2>Glossary: Grammar of Data-Driven Narratives</h2>\n<p>This section describes the building blocks of Gramex\u2019s approach to natural language generation.\nThese concepts serve as primitives to the logic and automation capabilities of the NLG engine.</p>\n<ol>\n<li><p><strong>Narrative</strong> - A <em>narrative</em> is a piece of text written by a user or generated by a machine which contains facts about a dataset.\nA narrative in its entirity is assumed to be a function of three items:</p>\n<ol>\n<li>A dataset</li>\n<li>Operations on that dataset</li>\n<li>Some \u201csource text\u201d provided by the user.</li>\n</ol>\n<p>For example, the following is a narrative about the <a href=\"https://archive.ics.uci.edu/ml/datasets/Iris\" rel=\"nofollow\">Fisher Iris dataset</a>.</p>\n<blockquote>\n<p>The iris dataset contains measurements from a hundred and fifty samples of three unique species of the iris flower - setosa, versicolor and virginica. The species are equally distributed within the dataset, so that each species has fifty samples. For each sample, four measurements are taken - sepal width, petal width, sepal width and sepal length. The average petal length of the setosa is significantly less than that of versicolor or virginica. The average petal width of virginica is much higher than that of versicolor. However, there is no pair of features that can uniquely identify a species. The presence of such properties makes the iris dataset ideal for explaining machine learning concepts.</p>\n</blockquote>\n</li>\n<li><p><strong>Nugget</strong> - A <em>nugget</em> is ideally a single sentence which conveys a fact about the data. Each sentence in the example narrative except the last two is a nugget. Note that each nugget derives its facts from the source data directly, or from the result of some operation on the data. For example, the following nugget</p>\n<p>The average petal length of the setosa is significantly less than that of versicolor or virginica.</p>\n<p>derives from a groupby-and-average operation on one column of the dataset. Some nuggets, like the one enumerating the number of samples in the dataset, derive from the raw dataset, <em>not</em> from the result of any operations on it. A narrative is essentially an ordered collection of nuggets.</p>\n</li>\n<li><p><strong>Variables</strong>  - A <em>variable</em> is a piece of text which can change with the data or the operations performed on it. Here is a reproduction of the example narrative, with all variables shown in bold.</p>\n<blockquote>\n<p>The iris dataset contains measurements from <strong>a hundred and fifty</strong> samples of <strong>three</strong> unique species of the iris flower - <strong>setosa, versicolor and virginica</strong>. The species are equally distributed within the dataset, so that each species has <strong>fifty</strong> samples. For each sample, <strong>four</strong> measurements are taken - <strong>sepal width, petal width, sepal width and sepal length</strong>. The <strong>average petal length</strong> of the setosa is significantly <strong>less</strong> than that of versicolor or virginica. The <strong>average petal width</strong> of virginica is much <strong>higher</strong> than that of versicolor. However, there is no pair of features that can uniquely identify a species. The presence of such properties makes the iris dataset ideal for explaining machine learning concepts.</p>\n</blockquote>\n<p>Note that each variable has two defining components:</p>\n<ul>\n<li>a <em>source text</em>, as initially provided by the user</li>\n<li>one or more <em>formulae</em>, which compute the value of the variable for a specific instance of the data. Note that the source text of a variable may be found in multiple places within a dataset, and as such, a variable may have multiple formulae - one of which will have to be preferred by the user.</li>\n</ul>\n<p>For example, for the first variable in example narrative, \u201chundred and fifty\u201d is the source text, and the formula is any machine code that counts the number of rows in the dataset and translates it into a human-readable form. A variable may additionally have other attributes, like:</p>\n<ul>\n<li>a set of linguistic <em>inflections</em> which determine the form of the rendered variable text - these are distinct from the formula itself, in that the formula creates the base form of the text and inflections modify the base form.</li>\n<li>a <em>name</em> used to identify the variable within the template of the nugget</li>\n</ul>\n</li>\n</ol>\n<p>Thus, narratives are composed from nuggets, and nuggets from variables. This grammar allows the NLG engine to approach the problem of data-driven, machine-generated narratives in a more <em>compositional</em> manner than a <em>generative</em> one.</p>\n</div>\n\n          </div>"}, "last_serial": 6609110, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c05be825dc50e4b5357938ddfe5a8bab", "sha256": "57576d284ba96ebb71a69745d14b8c52fe983ca12ed7932e2af44a41ec912f3b"}, "downloads": -1, "filename": "nlg-0.1.tar.gz", "has_sig": false, "md5_digest": "c05be825dc50e4b5357938ddfe5a8bab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19802, "upload_time": "2019-11-21T10:15:23", "upload_time_iso_8601": "2019-11-21T10:15:23.903544Z", "url": "https://files.pythonhosted.org/packages/0e/d4/ebf9e8aeaa934f37d922ba1cee9b07fdba9e0b21cb2e75ac1228e21e40ed/nlg-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cddba1661f6a7b50341ec3df7f981f3e", "sha256": "8e4efe5e6d1e5a86ffc02ae95cf802293b8bf74bbd9f84c1ba2f1e636fb43372"}, "downloads": -1, "filename": "nlg-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cddba1661f6a7b50341ec3df7f981f3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32073, "upload_time": "2020-01-07T11:11:17", "upload_time_iso_8601": "2020-01-07T11:11:17.210699Z", "url": "https://files.pythonhosted.org/packages/62/08/f127928dc9adaec95707fe712195ab8378564e16f55b3917538b74707a26/nlg-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b838a8ce58024a9ee38e106613122695", "sha256": "c0383a135426c47db286bd4e4db55624e809b7ede0be6af3084fcc6ce473d615"}, "downloads": -1, "filename": "nlg-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b838a8ce58024a9ee38e106613122695", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41366, "upload_time": "2020-02-11T12:36:30", "upload_time_iso_8601": "2020-02-11T12:36:30.345233Z", "url": "https://files.pythonhosted.org/packages/9c/41/fc849fcd8df5c75051eb6d60e71f0882c5b165aef14b434339c509b8dbd2/nlg-0.1.2.tar.gz", "yanked": false}], "0.1.2rc1": [{"comment_text": "", "digests": {"md5": "ed3fc078e09e5b04c12f6e4733426af7", "sha256": "c67dee58edf45ba8c2c4e2d14d178edc1577d328e64eb53989b4ebd608130404"}, "downloads": -1, "filename": "nlg-0.1.2rc1.tar.gz", "has_sig": false, "md5_digest": "ed3fc078e09e5b04c12f6e4733426af7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38457, "upload_time": "2020-01-17T13:11:13", "upload_time_iso_8601": "2020-01-17T13:11:13.369795Z", "url": "https://files.pythonhosted.org/packages/0c/83/9b1efaa07707b99db0f77d3031d55655d034482476b1a5754ab0fbc9f8c5/nlg-0.1.2rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b838a8ce58024a9ee38e106613122695", "sha256": "c0383a135426c47db286bd4e4db55624e809b7ede0be6af3084fcc6ce473d615"}, "downloads": -1, "filename": "nlg-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b838a8ce58024a9ee38e106613122695", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41366, "upload_time": "2020-02-11T12:36:30", "upload_time_iso_8601": "2020-02-11T12:36:30.345233Z", "url": "https://files.pythonhosted.org/packages/9c/41/fc849fcd8df5c75051eb6d60e71f0882c5b165aef14b434339c509b8dbd2/nlg-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:12 2020"}