{"info": {"author": "Chris Amico", "author_email": "eyeseast@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Python TableFu is a tool for manipulating spreadsheet-like tables in Python. It began as a Python implementation of ProPublica's [TableFu](http://propublica.github.com/table-fu/), though new methods have been added. TableFu allows filtering, faceting and manipulating of data. Going forward, the project aims to create something akin to an ORM for spreadsheets.\n\nUsage:\n------\n\n    >>> from table_fu import TableFu\n    >>> table = TableFu.from_file('tests/test.csv')\n    >>> table.columns\n    ['Author', 'Best Book', 'Number of Pages', 'Style']\n\n    # get all authors\n    >>> table.values('Author')\n    ['Samuel Beckett', 'James Joyce', 'Nicholson Baker', 'Vladimir Sorokin']\n\n    # total a column\n    >>> table.total('Number of Pages')\n    1177.0\n    \n    # filtering a table returns a new instance\n    >>> t2 = table.filter(Style='Modernism')\n    >>> list(t2)\n    [<Row: Samuel Beckett, Malone Muert, 120, Modernism>,\n     <Row: James Joyce, Ulysses, 644, Modernism>]\n    \n    \n    # each TableFu instance acts like a list of rows\n    >>> table[0]\n    <Row: Samuel Beckett, Malone Muert, 120, Modernism>\n    \n    list(table.rows)\n    [<Row: Samuel Beckett, Malone Muert, 120, Modernism>,\n     <Row: James Joyce, Ulysses, 644, Modernism>,\n     <Row: Nicholson Baker, Mezannine, 150, Minimalism>,\n     <Row: Vladimir Sorokin, The Queue, 263, Satire>]\n    \n    # rows, in turn, act like dictionaries\n    >>> row = table[1]\n    >>> print row['Author']\n    James Joyce\n    \n    # transpose a table\n    >>> t2 = table.transpose()\n    >>> list(t2)\n    [<Row: Best Book, Malone Muert, Ulysses, Mezannine, The Queue>,\n     <Row: Number of Pages, 120, 644, 150, 263>,\n     <Row: Style, Modernism, Modernism, Minimalism, Satire>]\n    \n    >>> t2.columns\n    ['Author',\n     'Samuel Beckett',\n     'James Joyce',\n     'Nicholson Baker',\n     'Vladimir Sorokin']\n    \n    # sort rows\n    >>> table.sort('Author')\n    >>> table.rows\n    [<Row: James Joyce, Ulysses, 644, Modernism>,\n     <Row: Nicholson Baker, Mezannine, 150, Minimalism>,\n     <Row: Samuel Beckett, Malone Muert, 120, Modernism>,\n     <Row: Vladimir Sorokin, The Queue, 263, Satire>]\n    \n    # sorting is stored\n    table.options['sorted_by']\n    {'Author': {'reverse': False}}\n    \n    # which is handy because...\n    \n    # tables can also be faceted (and options are copied to new tables)\n    >>> for t in table.facet_by('Style'):\n    ...     print t.faceted_on\n    ...     t.table\n    Minimalism\n    [['Nicholson Baker', 'Mezannine', '150', 'Minimalism']]\n    Modernism\n    [['Samuel Beckett', 'Malone Muert', '120', 'Modernism'],\n     ['James Joyce', 'Ulysses', '644', 'Modernism']]\n    Satire\n    [['Vladimir Sorokin', 'The Queue', '263', 'Satire']]\n\nHere's an [advanced example](https://gist.github.com/765321) that uses faceting and filtering to produce aggregates from [this spreadsheet](https://spreadsheets.google.com/ccc?key=0AprNP7zjIYS1dG5wbVJpWTVacWpUaUh5VHUxMk1wTEE&hl=en&authkey=CJfB5MYP) (extracted from the New York Times Congress API).\n\nFormatting\n----------\n\nFilters are just functions that take a value and some number of positional arguments.\nNew filters can be registered with the included Formatter class.\n\n    >>> from table_fu.formatting import Formatter\n    >>> format = Formatter()\n    >>> def capitalize(value, *args):\n    ...     return str(value).capitalize()\n    >>> format.register(capitalize)\n    >>> print format('foo', 'capitalize')\n    Foo\n    \nCells can be formatted according to rules of the table (which carry over if the table is faceted):\n\n    >>> table = TableFu(open('tests/sites.csv'))\n    >>> table.columns\n    ['Name', 'URL', 'About']\n    >>> table.formatting = {\n    ... 'Name': {'filter': 'link', 'args': ['URL']}\n    ... }\n    >>> print table[0]['Name']\n    <a href=\"http://www.chrisamico.com\" title=\"ChrisAmico.com\">ChrisAmico.com</a>\n    \n    \nHTML Output\n-----------\n\nTableFu can output an HTML table, using formatting you specify:\n\n    >>> table = TableFu(open('tests/sites.csv'))\n    >>> table.columns\n    ['Name', 'URL', 'About']\n    >>> table.formatting = {'Name': {'filter: 'link', 'args': ['URL']}}\n    >>> table.columns = 'Name', 'About'\n    >>> print table.html()\n    <table>\n    <thead>\n    <tr><th>Name</th><th>About</th></tr>\n    </thead>\n    <tbody>\n    <tr id=\"row0\" class=\"row even\"><td class=\"datum\"><a href=\"http://www.chrisamico.com\" title=\"ChrisAmico.com\">ChrisAmico.com</a></td><td class=\"datum\">My personal site and blog</td></tr>\n    <tr id=\"row1\" class=\"row odd\"><td class=\"datum\"><a href=\"http://www.propublica.org\" title=\"ProPublica\">ProPublica</a></td><td class=\"datum\">Builders of the Ruby version of this library</td></tr>\n    <tr id=\"row2\" class=\"row even\"><td class=\"datum\"><a href=\"http://www.pbs.org/newshour\" title=\"PBS NewsHour\">PBS NewsHour</a></td><td class=\"datum\">Where I spend my days</td></tr>\n    </tbody>\n    </table>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/eyeseast/python-tablefu", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "python-tablefu", "package_url": "https://pypi.org/project/python-tablefu/", "platform": "any", "project_url": "https://pypi.org/project/python-tablefu/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/eyeseast/python-tablefu"}, "release_url": "https://pypi.org/project/python-tablefu/0.4.2/", "requires_dist": null, "requires_python": null, "summary": "A tool for manipulating spreadsheets and tables in Python, based on ProPublica's TableFu", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Python TableFu is a tool for manipulating spreadsheet-like tables in Python. It began as a Python implementation of ProPublica's [TableFu](http://propublica.github.com/table-fu/), though new methods have been added. TableFu allows filtering, faceting and manipulating of data. Going forward, the project aims to create something akin to an ORM for spreadsheets.<br><br>Usage:<br>------<br><br>    &gt;&gt;&gt; from table_fu import TableFu<br>    &gt;&gt;&gt; table = TableFu.from_file('tests/test.csv')<br>    &gt;&gt;&gt; table.columns<br>    ['Author', 'Best Book', 'Number of Pages', 'Style']<br><br>    # get all authors<br>    &gt;&gt;&gt; table.values('Author')<br>    ['Samuel Beckett', 'James Joyce', 'Nicholson Baker', 'Vladimir Sorokin']<br><br>    # total a column<br>    &gt;&gt;&gt; table.total('Number of Pages')<br>    1177.0<br>    <br>    # filtering a table returns a new instance<br>    &gt;&gt;&gt; t2 = table.filter(Style='Modernism')<br>    &gt;&gt;&gt; list(t2)<br>    [&lt;Row: Samuel Beckett, Malone Muert, 120, Modernism&gt;,<br>     &lt;Row: James Joyce, Ulysses, 644, Modernism&gt;]<br>    <br>    <br>    # each TableFu instance acts like a list of rows<br>    &gt;&gt;&gt; table[0]<br>    &lt;Row: Samuel Beckett, Malone Muert, 120, Modernism&gt;<br>    <br>    list(table.rows)<br>    [&lt;Row: Samuel Beckett, Malone Muert, 120, Modernism&gt;,<br>     &lt;Row: James Joyce, Ulysses, 644, Modernism&gt;,<br>     &lt;Row: Nicholson Baker, Mezannine, 150, Minimalism&gt;,<br>     &lt;Row: Vladimir Sorokin, The Queue, 263, Satire&gt;]<br>    <br>    # rows, in turn, act like dictionaries<br>    &gt;&gt;&gt; row = table[1]<br>    &gt;&gt;&gt; print row['Author']<br>    James Joyce<br>    <br>    # transpose a table<br>    &gt;&gt;&gt; t2 = table.transpose()<br>    &gt;&gt;&gt; list(t2)<br>    [&lt;Row: Best Book, Malone Muert, Ulysses, Mezannine, The Queue&gt;,<br>     &lt;Row: Number of Pages, 120, 644, 150, 263&gt;,<br>     &lt;Row: Style, Modernism, Modernism, Minimalism, Satire&gt;]<br>    <br>    &gt;&gt;&gt; t2.columns<br>    ['Author',<br>     'Samuel Beckett',<br>     'James Joyce',<br>     'Nicholson Baker',<br>     'Vladimir Sorokin']<br>    <br>    # sort rows<br>    &gt;&gt;&gt; table.sort('Author')<br>    &gt;&gt;&gt; table.rows<br>    [&lt;Row: James Joyce, Ulysses, 644, Modernism&gt;,<br>     &lt;Row: Nicholson Baker, Mezannine, 150, Minimalism&gt;,<br>     &lt;Row: Samuel Beckett, Malone Muert, 120, Modernism&gt;,<br>     &lt;Row: Vladimir Sorokin, The Queue, 263, Satire&gt;]<br>    <br>    # sorting is stored<br>    table.options['sorted_by']<br>    {'Author': {'reverse': False}}<br>    <br>    # which is handy because...<br>    <br>    # tables can also be faceted (and options are copied to new tables)<br>    &gt;&gt;&gt; for t in table.facet_by('Style'):<br>    ...     print t.faceted_on<br>    ...     t.table<br>    Minimalism<br>    [['Nicholson Baker', 'Mezannine', '150', 'Minimalism']]<br>    Modernism<br>    [['Samuel Beckett', 'Malone Muert', '120', 'Modernism'],<br>     ['James Joyce', 'Ulysses', '644', 'Modernism']]<br>    Satire<br>    [['Vladimir Sorokin', 'The Queue', '263', 'Satire']]<br><br>Here's an [advanced example](https://gist.github.com/765321) that uses faceting and filtering to produce aggregates from [this spreadsheet](https://spreadsheets.google.com/ccc?key=0AprNP7zjIYS1dG5wbVJpWTVacWpUaUh5VHUxMk1wTEE&amp;hl=en&amp;authkey=CJfB5MYP) (extracted from the New York Times Congress API).<br><br>Formatting<br>----------<br><br>Filters are just functions that take a value and some number of positional arguments.<br>New filters can be registered with the included Formatter class.<br><br>    &gt;&gt;&gt; from table_fu.formatting import Formatter<br>    &gt;&gt;&gt; format = Formatter()<br>    &gt;&gt;&gt; def capitalize(value, *args):<br>    ...     return str(value).capitalize()<br>    &gt;&gt;&gt; format.register(capitalize)<br>    &gt;&gt;&gt; print format('foo', 'capitalize')<br>    Foo<br>    <br>Cells can be formatted according to rules of the table (which carry over if the table is faceted):<br><br>    &gt;&gt;&gt; table = TableFu(open('tests/sites.csv'))<br>    &gt;&gt;&gt; table.columns<br>    ['Name', 'URL', 'About']<br>    &gt;&gt;&gt; table.formatting = {<br>    ... 'Name': {'filter': 'link', 'args': ['URL']}<br>    ... }<br>    &gt;&gt;&gt; print table[0]['Name']<br>    &lt;a href=\"http://www.chrisamico.com\" title=\"ChrisAmico.com\"&gt;ChrisAmico.com&lt;/a&gt;<br>    <br>    <br>HTML Output<br>-----------<br><br>TableFu can output an HTML table, using formatting you specify:<br><br>    &gt;&gt;&gt; table = TableFu(open('tests/sites.csv'))<br>    &gt;&gt;&gt; table.columns<br>    ['Name', 'URL', 'About']<br>    &gt;&gt;&gt; table.formatting = {'Name': {'filter: 'link', 'args': ['URL']}}<br>    &gt;&gt;&gt; table.columns = 'Name', 'About'<br>    &gt;&gt;&gt; print table.html()<br>    &lt;table&gt;<br>    &lt;thead&gt;<br>    &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;About&lt;/th&gt;&lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>    &lt;tr id=\"row0\" class=\"row even\"&gt;&lt;td class=\"datum\"&gt;&lt;a href=\"http://www.chrisamico.com\" title=\"ChrisAmico.com\"&gt;ChrisAmico.com&lt;/a&gt;&lt;/td&gt;&lt;td class=\"datum\"&gt;My personal site and blog&lt;/td&gt;&lt;/tr&gt;<br>    &lt;tr id=\"row1\" class=\"row odd\"&gt;&lt;td class=\"datum\"&gt;&lt;a href=\"http://www.propublica.org\" title=\"ProPublica\"&gt;ProPublica&lt;/a&gt;&lt;/td&gt;&lt;td class=\"datum\"&gt;Builders of the Ruby version of this library&lt;/td&gt;&lt;/tr&gt;<br>    &lt;tr id=\"row2\" class=\"row even\"&gt;&lt;td class=\"datum\"&gt;&lt;a href=\"http://www.pbs.org/newshour\" title=\"PBS NewsHour\"&gt;PBS NewsHour&lt;/a&gt;&lt;/td&gt;&lt;td class=\"datum\"&gt;Where I spend my days&lt;/td&gt;&lt;/tr&gt;<br>    &lt;/tbody&gt;<br>    &lt;/table&gt;\n          </div>"}, "last_serial": 798102, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "f38f755e758f6aaa0bbb05c68fd65543", "sha256": "3ca62be8ec3baae3a00261f7ef372ed59a1b349c530b251f4f7a63eb4bcee10f"}, "downloads": -1, "filename": "python-tablefu-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f38f755e758f6aaa0bbb05c68fd65543", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 245354, "upload_time": "2010-12-28T21:57:04", "upload_time_iso_8601": "2010-12-28T21:57:04.409049Z", "url": "https://files.pythonhosted.org/packages/2f/b5/c2362c8c0d9c08dfb2491a8a7f2287e3481e0c4dc157c7db50efc0f6f52d/python-tablefu-0.3.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bb43c1018aaa3fe3ea9996ce7905e3c", "sha256": "d9404d28c575fb8313eda87d303fd300c32fbffd9bef172f168ceb845177b808"}, "downloads": -1, "filename": "python-tablefu-0.3.0.zip", "has_sig": false, "md5_digest": "7bb43c1018aaa3fe3ea9996ce7905e3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 249369, "upload_time": "2010-12-28T21:57:05", "upload_time_iso_8601": "2010-12-28T21:57:05.547476Z", "url": "https://files.pythonhosted.org/packages/a6/9e/bf7bffbf56568733b4be5f2a2491b504f97625499954ffae3d6adfaf85bb/python-tablefu-0.3.0.zip", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "95d952383969cf7a4cca9513d92103cb", "sha256": "70ccda5e74122d9fcc709cccc6dc5809803e974af27e831484c73f7a3e74c728"}, "downloads": -1, "filename": "python-tablefu-0.4.0.tar.gz", "has_sig": false, "md5_digest": "95d952383969cf7a4cca9513d92103cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 246522, "upload_time": "2012-03-29T20:39:13", "upload_time_iso_8601": "2012-03-29T20:39:13.003435Z", "url": "https://files.pythonhosted.org/packages/f1/0e/87d9ffac5a2488e959255c765ecb05117add65f44b4135b3cadbb2f31f8d/python-tablefu-0.4.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "62dcb4af132ee6e67dd828537892b64e", "sha256": "6657bff6b7db1f974e4c63f732ef001c6127087c4fcd52298cc8b67b18975312"}, "downloads": -1, "filename": "python-tablefu-0.4.0.zip", "has_sig": false, "md5_digest": "62dcb4af132ee6e67dd828537892b64e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 251320, "upload_time": "2012-03-29T20:39:16", "upload_time_iso_8601": "2012-03-29T20:39:16.040875Z", "url": "https://files.pythonhosted.org/packages/98/c5/802a821b874a04ecfaa2d9b95c2fdc858b93674c81ccaf65e6f6d82799f6/python-tablefu-0.4.0.zip", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "0969460d83bc24432bf8031108703987", "sha256": "667df72dc977d900f9ba16e20ca6262045cff13f6acde351af99c3459298ce1f"}, "downloads": -1, "filename": "python-tablefu-0.4.1.tar.gz", "has_sig": false, "md5_digest": "0969460d83bc24432bf8031108703987", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 247424, "upload_time": "2012-03-30T02:54:32", "upload_time_iso_8601": "2012-03-30T02:54:32.741206Z", "url": "https://files.pythonhosted.org/packages/5f/10/d7eaf52ab31976be613743693190c6047126b440959e2457233ce2ff4931/python-tablefu-0.4.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2541f9c4b38bebf4391d2fca6b859e0", "sha256": "4263b9a440e86d92c8cd7d7f61cb00c0968477b2409d50df825ef0a2d087ab9f"}, "downloads": -1, "filename": "python-tablefu-0.4.1.zip", "has_sig": false, "md5_digest": "e2541f9c4b38bebf4391d2fca6b859e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 252389, "upload_time": "2012-03-30T02:54:34", "upload_time_iso_8601": "2012-03-30T02:54:34.393750Z", "url": "https://files.pythonhosted.org/packages/00/6f/50d403fa55452b5f3166634bfe26629e82a3ce3e4a8b19d6f46f03c8c3e3/python-tablefu-0.4.1.zip", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "bf9017dca1d095cec15324a8ccc4c025", "sha256": "8de8091d031633fdc3c2cb1a5c986501116ad681a7347f305f1fec7b45803719"}, "downloads": -1, "filename": "python-tablefu-0.4.2.tar.gz", "has_sig": false, "md5_digest": "bf9017dca1d095cec15324a8ccc4c025", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 247445, "upload_time": "2012-04-22T20:53:48", "upload_time_iso_8601": "2012-04-22T20:53:48.403051Z", "url": "https://files.pythonhosted.org/packages/21/37/7932aa140eb6a2d9d1e8ac7ba2430d93c847235ecef317d7ea371f5f3d3c/python-tablefu-0.4.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "82a6b29ddd91b33b0fdece9415e679ab", "sha256": "e67c51438ea862a19bb91f62e30a5304864fa613daecc45ad79946b803a7f9ff"}, "downloads": -1, "filename": "python-tablefu-0.4.2.zip", "has_sig": false, "md5_digest": "82a6b29ddd91b33b0fdece9415e679ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 252429, "upload_time": "2012-04-22T20:53:49", "upload_time_iso_8601": "2012-04-22T20:53:49.772689Z", "url": "https://files.pythonhosted.org/packages/fe/a3/77dfe0b23c09f5a87b34997c0eb415327efc59832c87090c0d3242cd7664/python-tablefu-0.4.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf9017dca1d095cec15324a8ccc4c025", "sha256": "8de8091d031633fdc3c2cb1a5c986501116ad681a7347f305f1fec7b45803719"}, "downloads": -1, "filename": "python-tablefu-0.4.2.tar.gz", "has_sig": false, "md5_digest": "bf9017dca1d095cec15324a8ccc4c025", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 247445, "upload_time": "2012-04-22T20:53:48", "upload_time_iso_8601": "2012-04-22T20:53:48.403051Z", "url": "https://files.pythonhosted.org/packages/21/37/7932aa140eb6a2d9d1e8ac7ba2430d93c847235ecef317d7ea371f5f3d3c/python-tablefu-0.4.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "82a6b29ddd91b33b0fdece9415e679ab", "sha256": "e67c51438ea862a19bb91f62e30a5304864fa613daecc45ad79946b803a7f9ff"}, "downloads": -1, "filename": "python-tablefu-0.4.2.zip", "has_sig": false, "md5_digest": "82a6b29ddd91b33b0fdece9415e679ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 252429, "upload_time": "2012-04-22T20:53:49", "upload_time_iso_8601": "2012-04-22T20:53:49.772689Z", "url": "https://files.pythonhosted.org/packages/fe/a3/77dfe0b23c09f5a87b34997c0eb415327efc59832c87090c0d3242cd7664/python-tablefu-0.4.2.zip", "yanked": false}], "timestamp": "Fri May  8 03:15:07 2020"}