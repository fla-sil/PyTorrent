{"info": {"author": "Georgi Valkov", "author_email": "georgi.t.valkov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Ansimarkup\n==========\n\n.. class:: no-web no-pdf\n\n|pypi| |build| |license|\n\n\nAnsimarkup is an XML-like markup for producing colored terminal text.\n\n\n.. code-block:: python\n\n  from ansimarkup import ansiprint as print\n\n  print(\"<b>bold text</b>\"))\n  print(\"<red>red text</red>\", \"<red,green>red text on a green background</red,green>\")\n  print(\"<fg #ffaf00>orange text</fg #ffaf00>\")\n\n\nInstallation\n------------\n\nThe latest stable version of ansimarkup can be installed from pypi:\n\n.. code-block:: bash\n\n  $ pip install ansimarkup\n\n\nUsage\n-----\n\nBasic\n~~~~~\n\n.. code-block:: python\n\n  from ansimarkup import parse, ansiprint\n\n  # parse() converts the tags to the corresponding ansi escape sequence.\n  parse(\"<b>bold</b> <d>dim</d>\")\n\n  # ansiprint() works exactly like print(), but first runs parse() on all arguments.\n  ansiprint(\"<b>bold</b>\", \"<d>dim</d>\")\n  ansiprint(\"<b>bold</b>\", \"<d>dim</d>\", sep=\":\", file=sys.stderr)\n\n\nColors and styles\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n  # Colors may be specified in one of several ways.\n  parse(\"<red>red foreground</red>\")\n  parse(\"<RED>red background</RED>\")\n  parse(\"<fg red>red foreground</fg red>\")\n  parse(\"<bg red>red background</bg red>\")\n\n  # Xterm, hex and rgb colors are accepted by the <fg> and <bg> tags.\n  parse(\"<fg 86>aquamarine foreground</fg 86>\")\n  parse(\"<bg #00005f>dark blue background</bg #00005f>\")\n  parse(\"<fg 0,95,0>dark green foreground</fg 0,95,0>\")\n\n  # Tags may be nested.\n  parse(\"<r><Y>red text on a yellow foreground</Y></r>\")\n\n  # The above may be more concisely written as:\n  parse(\"<r,y>red text on a yellow background</r,y>\")\n\n  # This shorthand also supports style tags.\n  parse(\"<b,r,y>bold red text on a yellow background</b,r,y>\")\n  parse(\"<b,r,>bold red text</b,r,>\")\n  parse(\"<b,,y>bold regular text on a yellow background</b,,y>\")\n\n  # Unrecognized tags are left as-is.\n  parse(\"<b><element1></element1></b>\")\n\nFor a list of markup tags, please refer to `tags.py`_.\n\n\nUser-defined tags\n~~~~~~~~~~~~~~~~~\n\nCustom tags or overrides for existing tags may be defined by creating a new\n``AnsiMarkup`` instance:\n\n.. code-block:: python\n\n  from ansimarkup import AnsiMarkup, parse\n\n  user_tags = {\n      # Add a new tag (e.g. we want <info> to expand to \"<bold><green>\").\n      \"info\": parse(\"<b><g>\")\n\n      # The ansi escape sequence can be used directly.\n      \"info\": \"e\\x1b[32m\\x1b[1m\",\n\n      # Tag names may also be callables.\n      \"err\":  lambda: parse(\"<r>\")\n\n      # Colors may also be given convenient tag names.\n      \"orange\": parse(\"<fg #d78700>\"),\n\n      # User-defined tags always take precedence over existing tags.\n      \"bold\": parse(\"<dim>\")\n  }\n\n  am = AnsiMarkup(tags=user_tags)\n\n  am.parse(\"<info>bold green</info>\")\n  am.ansiprint(\"<err>red</err>\")\n\n  # Calling the instance is equivalent to calling its parse method.\n  am(\"<b>bold</b>\") == am.parse(\"<b>bold</b>\")\n\n\nOther features\n~~~~~~~~~~~~~~\n\nThe default tag separators can be changed by passing the ``tag_sep`` argument to\n``AnsiMarkup``:\n\n\n.. code-block:: python\n\n  from ansimarkup import AnsiMarkup\n\n  am = AnsiMarkup(tag_sep=\"{}\")\n  am.parse(\"{b}{r}bold red{/b}{/r}\")\n\nMarkup tags can be removed using the ``strip()`` method:\n\n.. code-block:: python\n\n  from ansimarkup import AnsiMarkup\n\n  am = AnsiMarkup()\n  am.strip(\"<b><r>bold red</b></r>\")\n\nCommand-line\n~~~~~~~~~~~~\n\nAnsimarkup may also be used as a command-line script. This works as if all\narguments were passed to ``ansiprint()``::\n\n  $ python -m ansimarkup \"<b>bold</b>\" \"<red>red</red>\"\n\n\nLogging formatter\n~~~~~~~~~~~~~~~~~\n\nAnsimarkup also comes with a formatter for the standard library `logging`\nmodule. It can be used as:\n\n.. code-block:: python\n\n  import logging\n  from ansimarkup.logformatter import AnsiMarkupFormatter\n\n  log = logging.getLogger()\n  hdl = logging.StreamHandler()\n  fmt = AnsiMarkupFormatter()\n  hdl.setFormatter(fmt)\n  log.addHandler(hdl)\n\n  log.info(\"<b>bold text</b>\")\n\n\nWindows\n~~~~~~~\n\nAnsimarkup uses the colorama_ library internally, which means that Windows\nsupport for ansi escape sequences is available by first running:\n\n.. code-block:: python\n\n  import colorama\n  colorama.init()\n\nFor more information on Windows support, consult the \"Usage\" section of the\ncolorama_ documentation.\n\n\nPerformance\n-----------\n\nWhile the focus of ansimarkup is convenience, it does try to keep processing to\na minimum. The `benchmark.py`_ script attempts to benchmark different ansi\nescape code libraries::\n\n  Benchmark 1: <r><b>red bold</b></r>\n    colorama     0.2998 \u03bcs\n    termcolor    3.2339 \u03bcs\n    colr         3.6483 \u03bcs\n    ansimarkup   6.8679 \u03bcs\n    pastel       28.8538 \u03bcs\n    plumbum      53.5004 \u03bcs\n\n  Benchmark 2: <r><b>red bold</b>red</r><b>bold</b>\n    colorama     0.8269 \u03bcs\n    termcolor    8.9296 \u03bcs\n    ansimarkup   9.3099 \u03bcs\n    colr         9.6244 \u03bcs\n    pastel       62.2018 \u03bcs\n    plumbum      120.8048 \u03bcs\n\n\nLimitations\n-----------\n\nAnsimarkup is a simple wrapper around colorama. It does very little in the way\nof validating that markup strings are well-formed. This is a conscious decision\nwith the goal of keeping things simple and fast.\n\nUnbalanced nesting, such as in the following example, will produce incorrect\noutput::\n\n  <r><Y>1</r>2</Y>\n\n\nTodo\n----\n\n- Many corner cases remain to be fixed.\n\n- More elaborate testing. The current test suite mostly covers the\n  \"happy paths\".\n\n- Replace ``tag_list.index`` in ``sub_end`` with something more\n  efficient (i.e. something like an ordered MultiDict).\n\n\nSimilar libraries\n-----------------\n\n- pastel_: bring colors to your terminal\n- `plumbum.colors`_: small yet feature-rich library for shell script-like programs in Python\n- colr_: easy terminal colors, with chainable methods\n\n\nLicense\n-------\n\nAnsimarkup is released under the terms of the `Revised BSD License`_.\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/ansimarkup.svg?style=flat-square&label=latest%20stable%20version\n    :target: https://pypi.python.org/pypi/ansimarkup\n    :alt: Latest version released on PyPi\n\n.. |license| image:: https://img.shields.io/pypi/l/ansimarkup.svg?style=flat-square&label=license\n    :target: https://pypi.python.org/pypi/ansimarkup\n    :alt: BSD 3-Clause\n\n.. |build| image:: https://img.shields.io/travis/gvalkov/python-ansimarkup/master.svg?style=flat-square&label=build\n    :target: http://travis-ci.org/gvalkov/python-ansimarkup\n    :alt: Build status\n\n\n.. _tags.py:        https://github.com/gvalkov/python-ansimarkup/blob/master/ansimarkup/tags.py\n.. _benchmark.py:   https://github.com/gvalkov/python-ansimarkup/blob/master/tests/benchmark.py\n\n.. _colorama:       https://pypi.python.org/pypi/colorama\n.. _pastel:         https://github.com/sdispater/pastel\n.. _plumbum.colors: https://plumbum.readthedocs.io/en/latest/cli.html#colors\n.. _colr:           https://pypi.python.org/pypi/Colr/\n.. _`Revised BSD License`: https://raw.github.com/gvalkov/python-ansimarkup/master/LICENSE\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gvalkov/grblcom", "keywords": "grbl", "license": "Revised BSD License", "maintainer": "", "maintainer_email": "", "name": "grblcom", "package_url": "https://pypi.org/project/grblcom/", "platform": "", "project_url": "https://pypi.org/project/grblcom/", "project_urls": {"Homepage": "https://github.com/gvalkov/grblcom"}, "release_url": "https://pypi.org/project/grblcom/0.0.0/", "requires_dist": null, "requires_python": "", "summary": "Rich serial-console client for GRBL", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/ansimarkup\" rel=\"nofollow\"><img alt=\"Latest version released on PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5054bf5939e3705849bc0860903200030a87a83/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f616e73696d61726b75702e7376673f7374796c653d666c61742d737175617265266c6162656c3d6c6174657374253230737461626c6525323076657273696f6e\"></a> <a href=\"http://travis-ci.org/gvalkov/python-ansimarkup\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2f3fcc30ecc399d2edb915db3497843268c3837/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6776616c6b6f762f707974686f6e2d616e73696d61726b75702f6d61737465722e7376673f7374796c653d666c61742d737175617265266c6162656c3d6275696c64\"></a> <a href=\"https://pypi.python.org/pypi/ansimarkup\" rel=\"nofollow\"><img alt=\"BSD 3-Clause\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d43fb889b901ac329ba9f3e3ad01fc09ce19812/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f616e73696d61726b75702e7376673f7374796c653d666c61742d737175617265266c6162656c3d6c6963656e7365\"></a></p>\n<p>Ansimarkup is an XML-like markup for producing colored terminal text.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">ansiprint</span> <span class=\"k\">as</span> <span class=\"nb\">print</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold text&lt;/b&gt;\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;red&gt;red text&lt;/red&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;red,green&gt;red text on a green background&lt;/red,green&gt;\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg #ffaf00&gt;orange text&lt;/fg #ffaf00&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The latest stable version of ansimarkup can be installed from pypi:</p>\n<pre>$ pip install ansimarkup\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"basic\">\n<h3>Basic</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">parse</span><span class=\"p\">,</span> <span class=\"n\">ansiprint</span>\n\n<span class=\"c1\"># parse() converts the tags to the corresponding ansi escape sequence.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt; &lt;d&gt;dim&lt;/d&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ansiprint() works exactly like print(), but first runs parse() on all arguments.</span>\n<span class=\"n\">ansiprint</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;d&gt;dim&lt;/d&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">ansiprint</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;d&gt;dim&lt;/d&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s2\">\":\"</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"colors-and-styles\">\n<h3>Colors and styles</h3>\n<pre><span class=\"c1\"># Colors may be specified in one of several ways.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;red&gt;red foreground&lt;/red&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;RED&gt;red background&lt;/RED&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg red&gt;red foreground&lt;/fg red&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;bg red&gt;red background&lt;/bg red&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Xterm, hex and rgb colors are accepted by the &lt;fg&gt; and &lt;bg&gt; tags.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg 86&gt;aquamarine foreground&lt;/fg 86&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;bg #00005f&gt;dark blue background&lt;/bg #00005f&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg 0,95,0&gt;dark green foreground&lt;/fg 0,95,0&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Tags may be nested.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;r&gt;&lt;Y&gt;red text on a yellow foreground&lt;/Y&gt;&lt;/r&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The above may be more concisely written as:</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;r,y&gt;red text on a yellow background&lt;/r,y&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This shorthand also supports style tags.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b,r,y&gt;bold red text on a yellow background&lt;/b,r,y&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b,r,&gt;bold red text&lt;/b,r,&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b,,y&gt;bold regular text on a yellow background&lt;/b,,y&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Unrecognized tags are left as-is.</span>\n<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;&lt;element1&gt;&lt;/element1&gt;&lt;/b&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<p>For a list of markup tags, please refer to <a href=\"https://github.com/gvalkov/python-ansimarkup/blob/master/ansimarkup/tags.py\" rel=\"nofollow\">tags.py</a>.</p>\n</div>\n<div id=\"user-defined-tags\">\n<h3>User-defined tags</h3>\n<p>Custom tags or overrides for existing tags may be defined by creating a new\n<tt>AnsiMarkup</tt> instance:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">,</span> <span class=\"n\">parse</span>\n\n<span class=\"n\">user_tags</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Add a new tag (e.g. we want &lt;info&gt; to expand to \"&lt;bold&gt;&lt;green&gt;\").</span>\n    <span class=\"s2\">\"info\"</span><span class=\"p\">:</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;&lt;g&gt;\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The ansi escape sequence can be used directly.</span>\n    <span class=\"s2\">\"info\"</span><span class=\"p\">:</span> <span class=\"s2\">\"e</span><span class=\"se\">\\x1b</span><span class=\"s2\">[32m</span><span class=\"se\">\\x1b</span><span class=\"s2\">[1m\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Tag names may also be callables.</span>\n    <span class=\"s2\">\"err\"</span><span class=\"p\">:</span>  <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;r&gt;\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Colors may also be given convenient tag names.</span>\n    <span class=\"s2\">\"orange\"</span><span class=\"p\">:</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;fg #d78700&gt;\"</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># User-defined tags always take precedence over existing tags.</span>\n    <span class=\"s2\">\"bold\"</span><span class=\"p\">:</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;dim&gt;\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">am</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">user_tags</span><span class=\"p\">)</span>\n\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;info&gt;bold green&lt;/info&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">ansiprint</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;err&gt;red&lt;/err&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calling the instance is equivalent to calling its parse method.</span>\n<span class=\"n\">am</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt;\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold&lt;/b&gt;\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"other-features\">\n<h3>Other features</h3>\n<p>The default tag separators can be changed by passing the <tt>tag_sep</tt> argument to\n<tt>AnsiMarkup</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkup</span>\n\n<span class=\"n\">am</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">(</span><span class=\"n\">tag_sep</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{b}{r}</span><span class=\"s2\">bold red{/b}{/r}\"</span><span class=\"p\">)</span>\n</pre>\n<p>Markup tags can be removed using the <tt>strip()</tt> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ansimarkup</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkup</span>\n\n<span class=\"n\">am</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkup</span><span class=\"p\">()</span>\n<span class=\"n\">am</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;&lt;r&gt;bold red&lt;/b&gt;&lt;/r&gt;\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"command-line\">\n<h3>Command-line</h3>\n<p>Ansimarkup may also be used as a command-line script. This works as if all\narguments were passed to <tt>ansiprint()</tt>:</p>\n<pre>$ python -m ansimarkup \"&lt;b&gt;bold&lt;/b&gt;\" \"&lt;red&gt;red&lt;/red&gt;\"\n</pre>\n</div>\n<div id=\"logging-formatter\">\n<h3>Logging formatter</h3>\n<p>Ansimarkup also comes with a formatter for the standard library <cite>logging</cite>\nmodule. It can be used as:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ansimarkup.logformatter</span> <span class=\"kn\">import</span> <span class=\"n\">AnsiMarkupFormatter</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">hdl</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">fmt</span> <span class=\"o\">=</span> <span class=\"n\">AnsiMarkupFormatter</span><span class=\"p\">()</span>\n<span class=\"n\">hdl</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">hdl</span><span class=\"p\">)</span>\n\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;b&gt;bold text&lt;/b&gt;\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"windows\">\n<h3>Windows</h3>\n<p>Ansimarkup uses the <a href=\"https://pypi.python.org/pypi/colorama\" rel=\"nofollow\">colorama</a> library internally, which means that Windows\nsupport for ansi escape sequences is available by first running:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">colorama</span>\n<span class=\"n\">colorama</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n</pre>\n<p>For more information on Windows support, consult the \u201cUsage\u201d section of the\n<a href=\"https://pypi.python.org/pypi/colorama\" rel=\"nofollow\">colorama</a> documentation.</p>\n</div>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>While the focus of ansimarkup is convenience, it does try to keep processing to\na minimum. The <a href=\"https://github.com/gvalkov/python-ansimarkup/blob/master/tests/benchmark.py\" rel=\"nofollow\">benchmark.py</a> script attempts to benchmark different ansi\nescape code libraries:</p>\n<pre>Benchmark 1: &lt;r&gt;&lt;b&gt;red bold&lt;/b&gt;&lt;/r&gt;\n  colorama     0.2998 \u03bcs\n  termcolor    3.2339 \u03bcs\n  colr         3.6483 \u03bcs\n  ansimarkup   6.8679 \u03bcs\n  pastel       28.8538 \u03bcs\n  plumbum      53.5004 \u03bcs\n\nBenchmark 2: &lt;r&gt;&lt;b&gt;red bold&lt;/b&gt;red&lt;/r&gt;&lt;b&gt;bold&lt;/b&gt;\n  colorama     0.8269 \u03bcs\n  termcolor    8.9296 \u03bcs\n  ansimarkup   9.3099 \u03bcs\n  colr         9.6244 \u03bcs\n  pastel       62.2018 \u03bcs\n  plumbum      120.8048 \u03bcs\n</pre>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>Ansimarkup is a simple wrapper around colorama. It does very little in the way\nof validating that markup strings are well-formed. This is a conscious decision\nwith the goal of keeping things simple and fast.</p>\n<p>Unbalanced nesting, such as in the following example, will produce incorrect\noutput:</p>\n<pre>&lt;r&gt;&lt;Y&gt;1&lt;/r&gt;2&lt;/Y&gt;\n</pre>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>Many corner cases remain to be fixed.</li>\n<li>More elaborate testing. The current test suite mostly covers the\n\u201chappy paths\u201d.</li>\n<li>Replace <tt>tag_list.index</tt> in <tt>sub_end</tt> with something more\nefficient (i.e. something like an ordered MultiDict).</li>\n</ul>\n</div>\n<div id=\"similar-libraries\">\n<h2>Similar libraries</h2>\n<ul>\n<li><a href=\"https://github.com/sdispater/pastel\" rel=\"nofollow\">pastel</a>: bring colors to your terminal</li>\n<li><a href=\"https://plumbum.readthedocs.io/en/latest/cli.html#colors\" rel=\"nofollow\">plumbum.colors</a>: small yet feature-rich library for shell script-like programs in Python</li>\n<li><a href=\"https://pypi.python.org/pypi/Colr/\" rel=\"nofollow\">colr</a>: easy terminal colors, with chainable methods</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Ansimarkup is released under the terms of the <a href=\"https://raw.github.com/gvalkov/python-ansimarkup/master/LICENSE\" rel=\"nofollow\">Revised BSD License</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3163986, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "c23e462feb489bb78c3f6fc5ecd01848", "sha256": "4404f32bbdbf94d5b31f65e3ffe862eea195923a351702d242c063e78246fb88"}, "downloads": -1, "filename": "grblcom-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c23e462feb489bb78c3f6fc5ecd01848", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 11192, "upload_time": "2017-09-10T22:25:52", "upload_time_iso_8601": "2017-09-10T22:25:52.514747Z", "url": "https://files.pythonhosted.org/packages/a3/ae/c8197c48983ac9b1548954c5ed3b640ac7aeaf5d8440301ef38c15be59fb/grblcom-0.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "decd56536b31091cac10a5fdcadfe931", "sha256": "c440f30777d800fed0304abebd0b29e4a0176be1cc6d5fa453706db5d744003a"}, "downloads": -1, "filename": "grblcom-0.0.0.tar.gz", "has_sig": false, "md5_digest": "decd56536b31091cac10a5fdcadfe931", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8200, "upload_time": "2017-09-10T22:25:49", "upload_time_iso_8601": "2017-09-10T22:25:49.827958Z", "url": "https://files.pythonhosted.org/packages/06/9d/22e0d4245eb8117494ac63b4753e2fa3737e98c993aaed69a091793d45ef/grblcom-0.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c23e462feb489bb78c3f6fc5ecd01848", "sha256": "4404f32bbdbf94d5b31f65e3ffe862eea195923a351702d242c063e78246fb88"}, "downloads": -1, "filename": "grblcom-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c23e462feb489bb78c3f6fc5ecd01848", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 11192, "upload_time": "2017-09-10T22:25:52", "upload_time_iso_8601": "2017-09-10T22:25:52.514747Z", "url": "https://files.pythonhosted.org/packages/a3/ae/c8197c48983ac9b1548954c5ed3b640ac7aeaf5d8440301ef38c15be59fb/grblcom-0.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "decd56536b31091cac10a5fdcadfe931", "sha256": "c440f30777d800fed0304abebd0b29e4a0176be1cc6d5fa453706db5d744003a"}, "downloads": -1, "filename": "grblcom-0.0.0.tar.gz", "has_sig": false, "md5_digest": "decd56536b31091cac10a5fdcadfe931", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8200, "upload_time": "2017-09-10T22:25:49", "upload_time_iso_8601": "2017-09-10T22:25:49.827958Z", "url": "https://files.pythonhosted.org/packages/06/9d/22e0d4245eb8117494ac63b4753e2fa3737e98c993aaed69a091793d45ef/grblcom-0.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:24 2020"}