{"info": {"author": "Alberto Alcolea", "author_email": "albertoalcolea@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "dbhelpers\n=========\n\n[![Build Status](https://travis-ci.org/albertoalcolea/dbhelpers.svg?branch=master)](https://travis-ci.org/albertoalcolea/dbhelpers)\n[![Latest PyPI Version](https://img.shields.io/pypi/v/dbhelpers.svg)](https://pypi.python.org/pypi/dbhelpers)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/dbhelpers.svg)](https://pypi.python.org/pypi/dbhelpers)\n\nDatabase helpers and utilities.\n\nThis is not an ORM, is a set of useful utilities to work with raw queries using the Python Database API Specification.\n\n\nInstallation\n------------\n\nThe easiest way to install dbhelpers is with pip:\n\n    $ pip install dbhelpers\n\n\nBackends\n--------\n\nThe following backends are supported by default:\n * **PostgreSQL**: with the `psycopg2` adapter: `Psycopg2Connection`\n * **MySQL**: with the `MySQLdb` adapter: `MySQLdbConnection`\n * **SQLite3**: with the default adapter of Python: `Sqlite3Connection`\n\nYou can extend the functionality of dbhelpers making new connection classes for your custom backends. See the usage section for more information.\n\n\nUsage\n-----\n\n### Connection classes\n\nUse a default connection class for your db backend:\n\n```python\nfrom dbhelpers import Psycopg2Connection\n\n# Simple connection\nconn = Psycopg2Connection(db='mydb', user='myuser', passwd='mypass').connect()\n(...)\nconn.close()\n\n# Or using a context manager:\nwith Psycopg2Connection(db='mydb', user='myuser', passwd='mypass') as conn:\n    cursor = conn.cursor()\n    ...\n```\n\nOr create a custom connection class with your default parameters:\n\n```python\nfrom dbhelpers import MySQLdbConnection\n\nclass customconn(MySQLdbConnection):\n    default_user = 'myuser'\n    default_passwd = 'mypass'\n    default_host = 'localhost'\n    default_port = 13306\n    default_extra_kwargs = {'charset': 'utf8mb4'}\n\nwith customconn('mydb') as conn:\n    cursor = conn.cursor()\n    ....\n```\n\nAlso you can make a connection class for a custom backend inheriting the abstract class `BaseConnection` and overriding the method `connect`.\n\n```python\nfrom dbhelpers.connections import BaseConnection\n\nclass MyCustomBackendConnection(BaseConnection):\n    default_port = 9876\n\n    def connect(self):\n        \"\"\"Returns a new connection object.\"\"\"\n        return customadapter.connect(database=self.db, user=self.user,\n            password=self.passwd, host=self.host, port=self.port,\n            **self.extra_kwargs)\n```\n\n### Helpers\n\nThe package include some useful utilities to work with database cursors.\n\n#### Cursor as a context manager:\n\nThe cursor is executed inside a `with` block. When the block ends the cursor is closed. Also does a `connection.commit()` when the block ends if `commit=True` (True by default).\n\n```python\nfrom dbhelpers import cm_cursor\n\n# With autocommit\nwith customconn('mydb') as conn:\n    with cm_cursor(conn) as cursor:\n        cursor.execute(\"INSERT INTO mytable (id, status) VALUES (23, 'info')\")\n\n# Disable autocommit\nwith customconn('mydb') as conn:\n    with cm_cursor(conn, commit=False) as cursor:\n        (...)\n```\n\nIf `commit=True` (default) and an exception is thrown inside the `with` block, `cm_cursor` calls the `conn.rollback()` method instead of `conn.commit()`\n\nIn Python 2.7 and 3.x you can get the connection object and the cursor object of the context managers in a single with statment:\n\n```python\nwith customconn('mydb') as conn, cm_cursor(conn) as cursor:\n    # Do something ...\n```\n\n#### Fetchiter\n\n`fetchiter` can be used as a generator for large recordsets:\n\n```python\nfrom dbhelpers import fetchiter\n\nwith customconn('mydb') as conn:\n    with cm_cursor(conn) as cursor:\n        cursor.execute(\"SELECT * FROM bigtable\")\n        for row in fetchiter(cursor):\n            # Do something\n```\n\nThe `fetchiter` function does not copy all rows in memory, do sucessive calls in blocks to retrieve all data. The default block size is 1000.\n\nThe `cursor.fetchall()` method can fill the process memory easily if there are a lot of register to return. `fetchiter` do calls to `cursor.fetchmany()` iteratively until there are no more data  to return. The `fetchiter` function behaves like an iterator.\n\nYou can get the whole blocks or change the size of the block:\n\n```python\nwith customconn('mydb') as conn:\n    with cm_cursor(conn) as cursor:\n        cursor.execute(\"SELECT * FROM bigtable\")\n        for block in fetchiter(cursor, size=50, batch=True):\n            # Do something, block is a tuple with 50 rows\n```\n\n#### PostgreSQL server cursor\n\nAlso, `fetchiter` allows work with PostgreSQL server cursors previously declared.\n\nInstead of the standard `fetchiter` behavior, which do a query to a server, the server calculates the whole recordset, and `fetchiter` retrieve the results iteratively to avoid fill the process memory, a server cursor runs the pseudo-iterator on a Postgres server and calculates the partial recordset in blocks iteratively.\n\nSee more about PostgreSQL cursors in the [PostgreSQL documentation](http://www.postgresql.org/docs/9.3/static/plpgsql-cursors.html).\n\n```python\nfrom dbhelpers import fetchiter\n\nwith customconn('mydb') as conn:\n    with cm_cursor(conn) as cursor:\n        cursor.execute(\"DECLARE C CURSOR FOR SELECT * FROM bigtable\")\n        for row in fetchiter(cursor, server_cursor='C'):\n            # Do something\n        cursor.execute(\"CLOSE C\")\n```\n\n`fetchiter` can return the server cursor results as the above example (as an interator or as a block), an you can change the block size. The default block size is 1000.\n\n#### Rows as NamedTuples\n\n`fetchone_nt`, `fetchmany_nt`, `fetchall_nt` `fetchiter_nt` returns the rows as NamedTuples:\n\n```python\nfrom dbhelpers import fetchone_nt, fetchmany_nt, fetchall_nt\n\nwith customconn('mydb') as conn:\n    with cm_cursor(conn) as cursor:\n        cursor.execute(\"SELECT id, status FROM mytable WHERE id = 23\")\n        row = fetchone_nt(cursor)\n        # Now, row is a NamedTuple with each column mapped as an attribute:\n        # >>> row.id\n        # 32\n        # >>> row.status\n        # 'warning'\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://albertoalcolea.com", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "dbhelpers", "package_url": "https://pypi.org/project/dbhelpers/", "platform": "", "project_url": "https://pypi.org/project/dbhelpers/", "project_urls": {"Homepage": "http://albertoalcolea.com"}, "release_url": "https://pypi.org/project/dbhelpers/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Database helpers and utilities.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dbhelpers</h1>\n<p><a href=\"https://travis-ci.org/albertoalcolea/dbhelpers\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3123da95e01fd659b02ad6a9d9d02ebe68f1c17/68747470733a2f2f7472617669732d63692e6f72672f616c626572746f616c636f6c65612f646268656c706572732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/dbhelpers\" rel=\"nofollow\"><img alt=\"Latest PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3225c9c60063dbc3c8246eb46d72be103f214720/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646268656c706572732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/dbhelpers\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5e9bc140da38b6d6ae6c408d6808ec04e363a5c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646268656c706572732e737667\"></a></p>\n<p>Database helpers and utilities.</p>\n<p>This is not an ORM, is a set of useful utilities to work with raw queries using the Python Database API Specification.</p>\n<h2>Installation</h2>\n<p>The easiest way to install dbhelpers is with pip:</p>\n<pre><code>$ pip install dbhelpers\n</code></pre>\n<h2>Backends</h2>\n<p>The following backends are supported by default:</p>\n<ul>\n<li><strong>PostgreSQL</strong>: with the <code>psycopg2</code> adapter: <code>Psycopg2Connection</code></li>\n<li><strong>MySQL</strong>: with the <code>MySQLdb</code> adapter: <code>MySQLdbConnection</code></li>\n<li><strong>SQLite3</strong>: with the default adapter of Python: <code>Sqlite3Connection</code></li>\n</ul>\n<p>You can extend the functionality of dbhelpers making new connection classes for your custom backends. See the usage section for more information.</p>\n<h2>Usage</h2>\n<h3>Connection classes</h3>\n<p>Use a default connection class for your db backend:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbhelpers</span> <span class=\"kn\">import</span> <span class=\"n\">Psycopg2Connection</span>\n\n<span class=\"c1\"># Simple connection</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">Psycopg2Connection</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"s1\">'mydb'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'myuser'</span><span class=\"p\">,</span> <span class=\"n\">passwd</span><span class=\"o\">=</span><span class=\"s1\">'mypass'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Or using a context manager:</span>\n<span class=\"k\">with</span> <span class=\"n\">Psycopg2Connection</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"s1\">'mydb'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'myuser'</span><span class=\"p\">,</span> <span class=\"n\">passwd</span><span class=\"o\">=</span><span class=\"s1\">'mypass'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Or create a custom connection class with your default parameters:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbhelpers</span> <span class=\"kn\">import</span> <span class=\"n\">MySQLdbConnection</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">customconn</span><span class=\"p\">(</span><span class=\"n\">MySQLdbConnection</span><span class=\"p\">):</span>\n    <span class=\"n\">default_user</span> <span class=\"o\">=</span> <span class=\"s1\">'myuser'</span>\n    <span class=\"n\">default_passwd</span> <span class=\"o\">=</span> <span class=\"s1\">'mypass'</span>\n    <span class=\"n\">default_host</span> <span class=\"o\">=</span> <span class=\"s1\">'localhost'</span>\n    <span class=\"n\">default_port</span> <span class=\"o\">=</span> <span class=\"mi\">13306</span>\n    <span class=\"n\">default_extra_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'charset'</span><span class=\"p\">:</span> <span class=\"s1\">'utf8mb4'</span><span class=\"p\">}</span>\n\n<span class=\"k\">with</span> <span class=\"n\">customconn</span><span class=\"p\">(</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n    <span class=\"o\">....</span>\n</pre>\n<p>Also you can make a connection class for a custom backend inheriting the abstract class <code>BaseConnection</code> and overriding the method <code>connect</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbhelpers.connections</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConnection</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCustomBackendConnection</span><span class=\"p\">(</span><span class=\"n\">BaseConnection</span><span class=\"p\">):</span>\n    <span class=\"n\">default_port</span> <span class=\"o\">=</span> <span class=\"mi\">9876</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Returns a new connection object.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">customadapter</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">passwd</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extra_kwargs</span><span class=\"p\">)</span>\n</pre>\n<h3>Helpers</h3>\n<p>The package include some useful utilities to work with database cursors.</p>\n<h4>Cursor as a context manager:</h4>\n<p>The cursor is executed inside a <code>with</code> block. When the block ends the cursor is closed. Also does a <code>connection.commit()</code> when the block ends if <code>commit=True</code> (True by default).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbhelpers</span> <span class=\"kn\">import</span> <span class=\"n\">cm_cursor</span>\n\n<span class=\"c1\"># With autocommit</span>\n<span class=\"k\">with</span> <span class=\"n\">customconn</span><span class=\"p\">(</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">cm_cursor</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"INSERT INTO mytable (id, status) VALUES (23, 'info')\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Disable autocommit</span>\n<span class=\"k\">with</span> <span class=\"n\">customconn</span><span class=\"p\">(</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">cm_cursor</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">commit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>If <code>commit=True</code> (default) and an exception is thrown inside the <code>with</code> block, <code>cm_cursor</code> calls the <code>conn.rollback()</code> method instead of <code>conn.commit()</code></p>\n<p>In Python 2.7 and 3.x you can get the connection object and the cursor object of the context managers in a single with statment:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">customconn</span><span class=\"p\">(</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">cm_cursor</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Do something ...</span>\n</pre>\n<h4>Fetchiter</h4>\n<p><code>fetchiter</code> can be used as a generator for large recordsets:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbhelpers</span> <span class=\"kn\">import</span> <span class=\"n\">fetchiter</span>\n\n<span class=\"k\">with</span> <span class=\"n\">customconn</span><span class=\"p\">(</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">cm_cursor</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT * FROM bigtable\"</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">fetchiter</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Do something</span>\n</pre>\n<p>The <code>fetchiter</code> function does not copy all rows in memory, do sucessive calls in blocks to retrieve all data. The default block size is 1000.</p>\n<p>The <code>cursor.fetchall()</code> method can fill the process memory easily if there are a lot of register to return. <code>fetchiter</code> do calls to <code>cursor.fetchmany()</code> iteratively until there are no more data  to return. The <code>fetchiter</code> function behaves like an iterator.</p>\n<p>You can get the whole blocks or change the size of the block:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">customconn</span><span class=\"p\">(</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">cm_cursor</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT * FROM bigtable\"</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">block</span> <span class=\"ow\">in</span> <span class=\"n\">fetchiter</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Do something, block is a tuple with 50 rows</span>\n</pre>\n<h4>PostgreSQL server cursor</h4>\n<p>Also, <code>fetchiter</code> allows work with PostgreSQL server cursors previously declared.</p>\n<p>Instead of the standard <code>fetchiter</code> behavior, which do a query to a server, the server calculates the whole recordset, and <code>fetchiter</code> retrieve the results iteratively to avoid fill the process memory, a server cursor runs the pseudo-iterator on a Postgres server and calculates the partial recordset in blocks iteratively.</p>\n<p>See more about PostgreSQL cursors in the <a href=\"http://www.postgresql.org/docs/9.3/static/plpgsql-cursors.html\" rel=\"nofollow\">PostgreSQL documentation</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbhelpers</span> <span class=\"kn\">import</span> <span class=\"n\">fetchiter</span>\n\n<span class=\"k\">with</span> <span class=\"n\">customconn</span><span class=\"p\">(</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">cm_cursor</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"DECLARE C CURSOR FOR SELECT * FROM bigtable\"</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">fetchiter</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">,</span> <span class=\"n\">server_cursor</span><span class=\"o\">=</span><span class=\"s1\">'C'</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Do something</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"CLOSE C\"</span><span class=\"p\">)</span>\n</pre>\n<p><code>fetchiter</code> can return the server cursor results as the above example (as an interator or as a block), an you can change the block size. The default block size is 1000.</p>\n<h4>Rows as NamedTuples</h4>\n<p><code>fetchone_nt</code>, <code>fetchmany_nt</code>, <code>fetchall_nt</code> <code>fetchiter_nt</code> returns the rows as NamedTuples:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dbhelpers</span> <span class=\"kn\">import</span> <span class=\"n\">fetchone_nt</span><span class=\"p\">,</span> <span class=\"n\">fetchmany_nt</span><span class=\"p\">,</span> <span class=\"n\">fetchall_nt</span>\n\n<span class=\"k\">with</span> <span class=\"n\">customconn</span><span class=\"p\">(</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">cm_cursor</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT id, status FROM mytable WHERE id = 23\"</span><span class=\"p\">)</span>\n        <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">fetchone_nt</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Now, row is a NamedTuple with each column mapped as an attribute:</span>\n        <span class=\"c1\"># &gt;&gt;&gt; row.id</span>\n        <span class=\"c1\"># 32</span>\n        <span class=\"c1\"># &gt;&gt;&gt; row.status</span>\n        <span class=\"c1\"># 'warning'</span>\n</pre>\n\n          </div>"}, "last_serial": 7157656, "releases": {"0.1.0.3": [{"comment_text": "", "digests": {"md5": "0b89b0a2a8a9438a2ee088f181f0d4a5", "sha256": "fe729d0812db82c14d26d9384564e922c04014b5ce297268e0a4a2e93fc28bcd"}, "downloads": -1, "filename": "dbhelpers-0.1.0.3.tar.gz", "has_sig": false, "md5_digest": "0b89b0a2a8a9438a2ee088f181f0d4a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6829, "upload_time": "2015-10-31T00:48:59", "upload_time_iso_8601": "2015-10-31T00:48:59.691561Z", "url": "https://files.pythonhosted.org/packages/71/ab/3349a0b60671e24cde9c87e421f3a81e82bbe9b226f33eaa6afab20cbcc0/dbhelpers-0.1.0.3.tar.gz", "yanked": false}], "0.1.0.4": [{"comment_text": "", "digests": {"md5": "f2124c59ecffae0c7c000809bc3a51e9", "sha256": "c0e37b717a07f5ae9ad171a170954a17be6c530b2f7a70d805294c6eb7710236"}, "downloads": -1, "filename": "dbhelpers-0.1.0.4.tar.gz", "has_sig": false, "md5_digest": "f2124c59ecffae0c7c000809bc3a51e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6971, "upload_time": "2015-11-05T23:09:15", "upload_time_iso_8601": "2015-11-05T23:09:15.628740Z", "url": "https://files.pythonhosted.org/packages/f9/de/f13e05295adcdc9211a0c8688edde23d629895307879f6404566029442c3/dbhelpers-0.1.0.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "54a77452e62afb3f5abd8ec78817361c", "sha256": "8b8671425126f1171ad55e5e6838d7eb7d3ab61946f6b3d07c2360c4e5eef217"}, "downloads": -1, "filename": "dbhelpers-0.2.0.tar.gz", "has_sig": false, "md5_digest": "54a77452e62afb3f5abd8ec78817361c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6889, "upload_time": "2020-05-03T15:45:46", "upload_time_iso_8601": "2020-05-03T15:45:46.040060Z", "url": "https://files.pythonhosted.org/packages/44/cf/53474621dda265f9af250b8279db18989c60fa53ee2d3892e36db47211fb/dbhelpers-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54a77452e62afb3f5abd8ec78817361c", "sha256": "8b8671425126f1171ad55e5e6838d7eb7d3ab61946f6b3d07c2360c4e5eef217"}, "downloads": -1, "filename": "dbhelpers-0.2.0.tar.gz", "has_sig": false, "md5_digest": "54a77452e62afb3f5abd8ec78817361c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6889, "upload_time": "2020-05-03T15:45:46", "upload_time_iso_8601": "2020-05-03T15:45:46.040060Z", "url": "https://files.pythonhosted.org/packages/44/cf/53474621dda265f9af250b8279db18989c60fa53ee2d3892e36db47211fb/dbhelpers-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:56 2020"}