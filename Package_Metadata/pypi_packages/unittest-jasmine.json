{"info": {"author": "Moses Palm\u00e9r", "author_email": "moses.palmer@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "*Jasmine* integration for *unittest*\n====================================\n\nThis package allows you to run `Jasmine <http://jasmine.github.io/>`_ unit\ntests fully integrated with the *Python* standard module *unittest*.\n\nThe main use case is to run *JavaScript* tests for Python server APIs.\n\n\nQuick start\n-----------\n\nTo use this module, please follow these steps:\n\n1. Add ``unittest-jasmine`` to the ``tests_require`` parameter to\n   ``setuptools.setup()``.\n2. Change or add the ``test_loader`` argument to ``setuptools.setup()`` to\n   ``'unittest_jasmine.SetuptoolsLoader'``.\n3. Add your *Jasmine* specs to your test package, and make sure the file names\n   end with ``spec.js``.\n\nIf your project uses *npm* to manage dependencies, those will be automatically\nupdated when the tests are run using ``npm install``.\n\n\nAdvanced options\n----------------\n\nPass additional options to *unittest-jasmine* by modifying the ``test_suite``\nparameter to ``setuptools.setup()``; append the character ``'|'`` and then\nthe options separated by ``';'``::\n\n    setuptools.setup(\n        . . .\n        test_suite='tests|option1=value1;option2={\"flag\":true}',\n        . . .\n    )\n\nThe value part of an option may be either *JSON* or a simple string. Anything\nthat is not parsable as *JSON* is treated as a simple string. A simple string\nis treated as a *JSON* string.\n\nThe following options are recognised by *unittest-jasmine*:\n\nlifecycle\n    A module receiving notifications about the lifecycle of suites and tests.\n    See `I need to run Python code before each test or suite`_ for more\n    information.\n\nspec_regex\n    A regular expression used to find the spec files in the test directory.\n\ntest_directory\n    The directory that contains the spec files. This must be an absolute path.\n\nAny option not in this list will be passed on to the *Jasmine* ``loadConfig``\nmethod.\n\n\nCommon tasks\n------------\n\n\nMy *Jasmine* specs are not located in the same directory as my *Python* tests\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOverride the default path to the spec files by setting the option\n``test_directory``. This must be the absolute path to the directory containing\nthe spec files.\n\n\nMy *Jasmine* spec files do not end with ``spec.js``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOverride the regular expression used to filter spec files from the test\ndirectory by setting the option ``spec_regex``. This is used as a regular\nexpression to filter the files to include.\n\nAn example value is::\n\n    setuptools.setup(\n        . . .\n        test_suite='tests|spec_regex=.*?-test\\\\.js',\n        . . .\n    )\n\n\nI need to run *Python* code before each test or suite\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSet the option ``lifecycle`` to specify a module with functions handling the\nsetup and teardown of tests and suites.\n\nThe functions ``suite_setup``, ``suite_teardown``, ``test_setup`` and\n``test_teardown``, if defined, will be called with the suite or test as\nparameter. The functions will be called as instance methods of the respective\nsuites and tests.\n\nYou may copy templates for these functions from\n``.../unittest_jasmine/_setuptools.py``.\n\nAn example value is::\n\n    setuptools.setup(\n        . . .\n        test_suite='tests|lifecycle=test._jasmine_lifecycle',\n        . . .\n    )\n\n\nI need to load *Jasmine* helper files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSet the option ``helper`` to a *JSON* encoded list of strings. The strings are\ninterpreted by *Jasmine* as paths to helper files, relative to the directory\ncontaining the spec files; they must not be absolute paths.\n\n\nI have specs written in *CoffeeScript*\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo enable running tests written in *CoffeeScript*, first modify the option\n``spec_regex`` to ensure that it also includes ``.coffee`` files, and then make\nsure that one of your *Jasmine* helper files contains the expression\n``require(\"coffee-script/register\")``. An example value is::\n\n    setuptools.setup(\n        . . .\n        test_suite='tests|spec_regex=.*?spec\\\\.(js|coffee);helpers=[\"cs.js\"]',\n        . . .\n    )\n\n\nRelease notes\n=============\n\nv1.0.2 - pkg_resources fixes\n----------------------------\n*  Make sure to actually include the *JavaScript* runner in the package.\n*  Use ``__name__`` instead of ``__package__`` when loading runner using\n   ``pkg_resources`` to work on *Python 3*.\n\n\nv1.0.1 - Python 3 fixes\n-----------------------\n*  Corrected dynamic method addition to work with *Python 3*.\n*  Allow using release maker script on *Python 3*.\n*  Build a universal wheel when making a release.\n\n\nv1.0 - Initial Release\n----------------------\n*  Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/moses-palmer/unittest-jasmine", "keywords": null, "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "unittest-jasmine", "package_url": "https://pypi.org/project/unittest-jasmine/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/unittest-jasmine/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/moses-palmer/unittest-jasmine"}, "release_url": "https://pypi.org/project/unittest-jasmine/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "A unittest test loader for Jasmine tests", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"jasmine-integration-for-unittest\">\n<h2><em>Jasmine</em> integration for <em>unittest</em></h2>\n<p>This package allows you to run <a href=\"http://jasmine.github.io/\" rel=\"nofollow\">Jasmine</a> unit\ntests fully integrated with the <em>Python</em> standard module <em>unittest</em>.</p>\n<p>The main use case is to run <em>JavaScript</em> tests for Python server APIs.</p>\n<div id=\"quick-start\">\n<h3>Quick start</h3>\n<p>To use this module, please follow these steps:</p>\n<ol>\n<li>Add <tt><span class=\"pre\">unittest-jasmine</span></tt> to the <tt>tests_require</tt> parameter to\n<tt>setuptools.setup()</tt>.</li>\n<li>Change or add the <tt>test_loader</tt> argument to <tt>setuptools.setup()</tt> to\n<tt>'unittest_jasmine.SetuptoolsLoader'</tt>.</li>\n<li>Add your <em>Jasmine</em> specs to your test package, and make sure the file names\nend with <tt>spec.js</tt>.</li>\n</ol>\n<p>If your project uses <em>npm</em> to manage dependencies, those will be automatically\nupdated when the tests are run using <tt>npm install</tt>.</p>\n</div>\n<div id=\"advanced-options\">\n<h3>Advanced options</h3>\n<p>Pass additional options to <em>unittest-jasmine</em> by modifying the <tt>test_suite</tt>\nparameter to <tt>setuptools.setup()</tt>; append the character <tt>'|'</tt> and then\nthe options separated by <tt>';'</tt>:</p>\n<pre>setuptools.setup(\n    . . .\n    test_suite='tests|option1=value1;option2={\"flag\":true}',\n    . . .\n)\n</pre>\n<p>The value part of an option may be either <em>JSON</em> or a simple string. Anything\nthat is not parsable as <em>JSON</em> is treated as a simple string. A simple string\nis treated as a <em>JSON</em> string.</p>\n<p>The following options are recognised by <em>unittest-jasmine</em>:</p>\n<dl>\n<dt>lifecycle</dt>\n<dd>A module receiving notifications about the lifecycle of suites and tests.\nSee <a href=\"#i-need-to-run-python-code-before-each-test-or-suite\" rel=\"nofollow\">I need to run Python code before each test or suite</a> for more\ninformation.</dd>\n<dt>spec_regex</dt>\n<dd>A regular expression used to find the spec files in the test directory.</dd>\n<dt>test_directory</dt>\n<dd>The directory that contains the spec files. This must be an absolute path.</dd>\n</dl>\n<p>Any option not in this list will be passed on to the <em>Jasmine</em> <tt>loadConfig</tt>\nmethod.</p>\n</div>\n<div id=\"common-tasks\">\n<h3>Common tasks</h3>\n<div id=\"my-jasmine-specs-are-not-located-in-the-same-directory-as-my-python-tests\">\n<h4>My <em>Jasmine</em> specs are not located in the same directory as my <em>Python</em> tests</h4>\n<p>Override the default path to the spec files by setting the option\n<tt>test_directory</tt>. This must be the absolute path to the directory containing\nthe spec files.</p>\n</div>\n<div id=\"my-jasmine-spec-files-do-not-end-with-spec-js\">\n<h4>My <em>Jasmine</em> spec files do not end with <tt>spec.js</tt></h4>\n<p>Override the regular expression used to filter spec files from the test\ndirectory by setting the option <tt>spec_regex</tt>. This is used as a regular\nexpression to filter the files to include.</p>\n<p>An example value is:</p>\n<pre>setuptools.setup(\n    . . .\n    test_suite='tests|spec_regex=.*?-test\\\\.js',\n    . . .\n)\n</pre>\n</div>\n<div id=\"i-need-to-run-python-code-before-each-test-or-suite\">\n<h4>I need to run <em>Python</em> code before each test or suite</h4>\n<p>Set the option <tt>lifecycle</tt> to specify a module with functions handling the\nsetup and teardown of tests and suites.</p>\n<p>The functions <tt>suite_setup</tt>, <tt>suite_teardown</tt>, <tt>test_setup</tt> and\n<tt>test_teardown</tt>, if defined, will be called with the suite or test as\nparameter. The functions will be called as instance methods of the respective\nsuites and tests.</p>\n<p>You may copy templates for these functions from\n<tt><span class=\"pre\">.../unittest_jasmine/_setuptools.py</span></tt>.</p>\n<p>An example value is:</p>\n<pre>setuptools.setup(\n    . . .\n    test_suite='tests|lifecycle=test._jasmine_lifecycle',\n    . . .\n)\n</pre>\n</div>\n<div id=\"i-need-to-load-jasmine-helper-files\">\n<h4>I need to load <em>Jasmine</em> helper files</h4>\n<p>Set the option <tt>helper</tt> to a <em>JSON</em> encoded list of strings. The strings are\ninterpreted by <em>Jasmine</em> as paths to helper files, relative to the directory\ncontaining the spec files; they must not be absolute paths.</p>\n</div>\n<div id=\"i-have-specs-written-in-coffeescript\">\n<h4>I have specs written in <em>CoffeeScript</em></h4>\n<p>To enable running tests written in <em>CoffeeScript</em>, first modify the option\n<tt>spec_regex</tt> to ensure that it also includes <tt>.coffee</tt> files, and then make\nsure that one of your <em>Jasmine</em> helper files contains the expression\n<tt><span class=\"pre\">require(\"coffee-script/register\")</span></tt>. An example value is:</p>\n<pre>setuptools.setup(\n    . . .\n    test_suite='tests|spec_regex=.*?spec\\\\.(js|coffee);helpers=[\"cs.js\"]',\n    . . .\n)\n</pre>\n</div>\n</div>\n</div>\n<div id=\"release-notes\">\n<h2>Release notes</h2>\n<div id=\"v1-0-2-pkg-resources-fixes\">\n<h3>v1.0.2 - pkg_resources fixes</h3>\n<ul>\n<li>Make sure to actually include the <em>JavaScript</em> runner in the package.</li>\n<li>Use <tt>__name__</tt> instead of <tt>__package__</tt> when loading runner using\n<tt>pkg_resources</tt> to work on <em>Python 3</em>.</li>\n</ul>\n</div>\n<div id=\"v1-0-1-python-3-fixes\">\n<h3>v1.0.1 - Python 3 fixes</h3>\n<ul>\n<li>Corrected dynamic method addition to work with <em>Python 3</em>.</li>\n<li>Allow using release maker script on <em>Python 3</em>.</li>\n<li>Build a universal wheel when making a release.</li>\n</ul>\n</div>\n<div id=\"v1-0-initial-release\">\n<h3>v1.0 - Initial Release</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2141436, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3c2e71415dd8c73da2bff040920fbbde", "sha256": "10d652f2e58d60273629e1e3312e20098ac7e2956fd590d36e86edf5d1200ba0"}, "downloads": -1, "filename": "unittest_jasmine-1.0-py3.5.egg", "has_sig": false, "md5_digest": "3c2e71415dd8c73da2bff040920fbbde", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 33762, "upload_time": "2016-05-30T19:38:22", "upload_time_iso_8601": "2016-05-30T19:38:22.818746Z", "url": "https://files.pythonhosted.org/packages/7e/2f/d4f61ec33720afc9ab3a4c90b950ae07f734e602757bfb189272592b871d/unittest_jasmine-1.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "52e92e9876e376e9a70a2fa3e027167b", "sha256": "9005b4e87a05c42d81fc3c90ed78ec2841be9c117123a9065f8309c389bbf932"}, "downloads": -1, "filename": "unittest_jasmine-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "52e92e9876e376e9a70a2fa3e027167b", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 19784, "upload_time": "2016-05-30T19:38:30", "upload_time_iso_8601": "2016-05-30T19:38:30.070855Z", "url": "https://files.pythonhosted.org/packages/f0/f6/f88e7ee114ec5139c135e8d556b5fb938b2c178b8350a6668dd2c47b953d/unittest_jasmine-1.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e6e9c8d7611ead5cfdd8d931b4ceaad8", "sha256": "7ecbdb81469e3fd494073e7b53c1505e2d8550398d3cc972b206eeab82b7febd"}, "downloads": -1, "filename": "unittest_jasmine-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6e9c8d7611ead5cfdd8d931b4ceaad8", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 20224, "upload_time": "2016-05-30T20:54:42", "upload_time_iso_8601": "2016-05-30T20:54:42.458947Z", "url": "https://files.pythonhosted.org/packages/33/42/c9158a770acb3d1febd435e65df15e49c9a76fbbc4c9fc1c97860ef2e337/unittest_jasmine-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e36991fff6ce78d04664e8f41dbc5835", "sha256": "4da9f04df9d0dbdcf4c4db5e599f59b238bf0da40655ae6221273377c85e809a"}, "downloads": -1, "filename": "unittest_jasmine-1.0.1-py3.5.egg", "has_sig": false, "md5_digest": "e36991fff6ce78d04664e8f41dbc5835", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 17039, "upload_time": "2016-05-30T20:54:48", "upload_time_iso_8601": "2016-05-30T20:54:48.197942Z", "url": "https://files.pythonhosted.org/packages/d6/f6/0535de68fc99e60e76d6e903f99d6b9c4d952304e12268627d380dfbab73/unittest_jasmine-1.0.1-py3.5.egg", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d37dabfda7edc75b3fb1d05cb55e6932", "sha256": "7788758bc959bdadebca4622d41abf1eecfcac67c5de84f8d1bd395c491addce"}, "downloads": -1, "filename": "unittest_jasmine-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d37dabfda7edc75b3fb1d05cb55e6932", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 21184, "upload_time": "2016-05-30T21:17:55", "upload_time_iso_8601": "2016-05-30T21:17:55.228245Z", "url": "https://files.pythonhosted.org/packages/aa/65/ec5b2f40eae486b8d60aad764ba525b513aab3a412aad84fa5b9fbd11d97/unittest_jasmine-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6aae25f0e1afcd832ffda26ad7ace107", "sha256": "8776b35f9a191cca2d5677475a49e458965efafea0ae4a881c77963a5f83f3dc"}, "downloads": -1, "filename": "unittest_jasmine-1.0.2-py3.5.egg", "has_sig": false, "md5_digest": "6aae25f0e1afcd832ffda26ad7ace107", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 34840, "upload_time": "2016-05-30T21:17:33", "upload_time_iso_8601": "2016-05-30T21:17:33.744389Z", "url": "https://files.pythonhosted.org/packages/e3/6f/0dacab02199419340afbe1264afd4dd57ac84a70045fe8d42f490ce95482/unittest_jasmine-1.0.2-py3.5.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d37dabfda7edc75b3fb1d05cb55e6932", "sha256": "7788758bc959bdadebca4622d41abf1eecfcac67c5de84f8d1bd395c491addce"}, "downloads": -1, "filename": "unittest_jasmine-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d37dabfda7edc75b3fb1d05cb55e6932", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 21184, "upload_time": "2016-05-30T21:17:55", "upload_time_iso_8601": "2016-05-30T21:17:55.228245Z", "url": "https://files.pythonhosted.org/packages/aa/65/ec5b2f40eae486b8d60aad764ba525b513aab3a412aad84fa5b9fbd11d97/unittest_jasmine-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6aae25f0e1afcd832ffda26ad7ace107", "sha256": "8776b35f9a191cca2d5677475a49e458965efafea0ae4a881c77963a5f83f3dc"}, "downloads": -1, "filename": "unittest_jasmine-1.0.2-py3.5.egg", "has_sig": false, "md5_digest": "6aae25f0e1afcd832ffda26ad7ace107", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 34840, "upload_time": "2016-05-30T21:17:33", "upload_time_iso_8601": "2016-05-30T21:17:33.744389Z", "url": "https://files.pythonhosted.org/packages/e3/6f/0dacab02199419340afbe1264afd4dd57ac84a70045fe8d42f490ce95482/unittest_jasmine-1.0.2-py3.5.egg", "yanked": false}], "timestamp": "Fri May  8 03:40:19 2020"}