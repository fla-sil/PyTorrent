{"info": {"author": "Miloslav Pojman", "author_email": "mpojman@akamai.com", "bugtrack_url": null, "classifiers": ["Framework :: IPython", "Framework :: Jupyter", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: SQL", "Topic :: Database", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules", "Typing :: Typed"], "description": "\n# Pallas \u2013 AWS Athena client\n\nPallas makes querying AWS Athena easy.\n\nWe found it valuable for analyses in Jupyter Notebook,\nbut it is designed to be generic and usable in any application.\n\nFeatures:\n\n * Friendly interface to AWS Athena.\n * Performance \u2013 Large results are downloaded directly from S3,\n   which is much faster than using Athena API.\n * Pandas integration - Results can be converted to Pandas DataFrame\n   with correct data types mapped automatically.\n * Local caching \u2013 Query results can be cached locally,\n   so no data have to be downloaded when a Jupyter notebook is restarted.\n * Remote caching \u2013 Query IDs can be cached in S3,\n   so team mates can reproduce results without incurring additional costs.\n * Fixes malformed results returned by Athena to DCL\n   (for example DESCRIBE) queries.\n * Optional white space normalization for better caching.\n * Kills queries on KeyboardInterrupt.\n\n## Installation\n\nPallas requires Python 3.7 or newer. It can be installed using pip:\n\n```shell script\npip install --upgrade pallas\n```\n\n## Quick start\n\nAthena client can be obtained using the ``pallas.setup()`` method.\nAll arguments are optional.\n\n```python\nimport pallas\nathena = pallas.setup(\n    # Athena (AWS Glue) database. Can be overridden in queries.\n    database=None,\n    # Athena workgroup. Will use default workgroup if omitted.\n    workgroup=None,\n    # Athena output location, will use workgroup default location if omitted.\n    output_location=\"s3://...\",\n    # AWS region, read from ~/.aws/config if not specified.\n    region=None,\n    # Query execution cache.\n    cache_remote=\"s3://...\",\n    # Query result cache.\n    cache_local=\"~/Notebooks/.cache/\",\n    # Normalize white whitespace for better caching. Enabled by default.\n    normalize=True,\n    # Kill queries on KeybordInterrupt. Enabled by default.\n    kill_on_interrupt=True\n)\n```\n\nTo avoid hardcoded configuration values,\nPallas can be setup using environment variables,\ncorresponding to arguments in the previous example:\n\n```shell script\nexport PALLAS_DATABASE=\nexport PALLAS_WORKGROUP=\nexport PALLAS_OUTPUT_LOCATION=\nexport PALLAS_REGION=\nexport PALLAS_NORMALIZE=true\nexport PALLAS_KILL_ON_INTERRUPT=true\nexport PALLAS_CACHE_REMOTE=$PALLAS_OUTPUT_LOCATION\nexport PALLAS_CACHE_LOCAL=~/Notebooks/.cache/\n```\n\n```python\nathena = pallas.environ_setup()\n```\nPython standard logging is available for monitoring:\n\n```python\nimport logging\nimport sys\nlogging.basicConfig(level=logging.INFO, stream=sys.stdout)\n```\n\nUse the `Athena.execute()` method to execute queries:\n\n```python\nsql = \"\"\"\n    SELECT * FROM (\n        VALUES (1, 'foo', 3.14), (2, 'bar', NULL)\n    ) AS t (id, name, value)\n\"\"\"\nresults = athena.execute(sql)\n```\nIf you rerun same query, results should be read from cache.\n\nPallas also support non-blocking query execution:\n\n```python\nquery = athena.submit(sql)  # Submit a query and return\nquery.join()  # Wait for query completion.\nresults = query.get_results()  # Retrieve results. Calls query.join() internally.\n```\n\nThe result objects provides a list-like interface\nand can be converted to a Pandas DataFrame:\n\n```python\ndf = results.to_df()\n```\n\n\n## Development\n\nPallas can be installed with development dependencies using pip:\n\n```shell script\n$ pip install -e .[dev]\n```\n\nCode is checked with [flake8] and [Mypy]. Tests are run using [pytest].\n\nFor integration test to run, access to AWS resources has to be configured:\n\n```shell script\nexport PALLAS_TEST_REGION=            # AWS region, can be also specified in ~/.aws/config\nexport PALLAS_TEST_ATHENA_DATABASE=   # Name of Athena database\nexport PALLAS_TEST_ATHENA_WORKGROUP=  # Optional\nexport PALLAS_TEST_S3_TMP=            # s3:// URI\n```\nCode checks and testing are automated using tox:\n\n```shell script\n$ tox\n```\n\n[flake8]: https://flake8.pycqa.org/en/latest/\n[Mypy]: http://mypy-lang.org\n[pytest]: https://docs.pytest.org/en/latest/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/akamai/pallas", "keywords": "Amazon,Athena,AWS,database,db,Jupyter,Presto,SQL", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "pallas", "package_url": "https://pypi.org/project/pallas/", "platform": "", "project_url": "https://pypi.org/project/pallas/", "project_urls": {"Homepage": "https://github.com/akamai/pallas"}, "release_url": "https://pypi.org/project/pallas/0.1/", "requires_dist": ["boto3", "flake8 ; extra == 'dev'", "pytest ; extra == 'dev'", "mypy ; extra == 'dev'", "pandas (>=1.0.0) ; extra == 'pandas'"], "requires_python": ">=3.7", "summary": "AWS Athena client", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pallas \u2013 AWS Athena client</h1>\n<p>Pallas makes querying AWS Athena easy.</p>\n<p>We found it valuable for analyses in Jupyter Notebook,\nbut it is designed to be generic and usable in any application.</p>\n<p>Features:</p>\n<ul>\n<li>Friendly interface to AWS Athena.</li>\n<li>Performance \u2013 Large results are downloaded directly from S3,\nwhich is much faster than using Athena API.</li>\n<li>Pandas integration - Results can be converted to Pandas DataFrame\nwith correct data types mapped automatically.</li>\n<li>Local caching \u2013 Query results can be cached locally,\nso no data have to be downloaded when a Jupyter notebook is restarted.</li>\n<li>Remote caching \u2013 Query IDs can be cached in S3,\nso team mates can reproduce results without incurring additional costs.</li>\n<li>Fixes malformed results returned by Athena to DCL\n(for example DESCRIBE) queries.</li>\n<li>Optional white space normalization for better caching.</li>\n<li>Kills queries on KeyboardInterrupt.</li>\n</ul>\n<h2>Installation</h2>\n<p>Pallas requires Python 3.7 or newer. It can be installed using pip:</p>\n<pre>pip install --upgrade pallas\n</pre>\n<h2>Quick start</h2>\n<p>Athena client can be obtained using the <code>pallas.setup()</code> method.\nAll arguments are optional.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pallas</span>\n<span class=\"n\">athena</span> <span class=\"o\">=</span> <span class=\"n\">pallas</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Athena (AWS Glue) database. Can be overridden in queries.</span>\n    <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Athena workgroup. Will use default workgroup if omitted.</span>\n    <span class=\"n\">workgroup</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Athena output location, will use workgroup default location if omitted.</span>\n    <span class=\"n\">output_location</span><span class=\"o\">=</span><span class=\"s2\">\"s3://...\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># AWS region, read from ~/.aws/config if not specified.</span>\n    <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Query execution cache.</span>\n    <span class=\"n\">cache_remote</span><span class=\"o\">=</span><span class=\"s2\">\"s3://...\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Query result cache.</span>\n    <span class=\"n\">cache_local</span><span class=\"o\">=</span><span class=\"s2\">\"~/Notebooks/.cache/\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Normalize white whitespace for better caching. Enabled by default.</span>\n    <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Kill queries on KeybordInterrupt. Enabled by default.</span>\n    <span class=\"n\">kill_on_interrupt</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To avoid hardcoded configuration values,\nPallas can be setup using environment variables,\ncorresponding to arguments in the previous example:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">PALLAS_DATABASE</span><span class=\"o\">=</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_WORKGROUP</span><span class=\"o\">=</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_OUTPUT_LOCATION</span><span class=\"o\">=</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_REGION</span><span class=\"o\">=</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_NORMALIZE</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_KILL_ON_INTERRUPT</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_CACHE_REMOTE</span><span class=\"o\">=</span><span class=\"nv\">$PALLAS_OUTPUT_LOCATION</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_CACHE_LOCAL</span><span class=\"o\">=</span>~/Notebooks/.cache/\n</pre>\n<pre><span class=\"n\">athena</span> <span class=\"o\">=</span> <span class=\"n\">pallas</span><span class=\"o\">.</span><span class=\"n\">environ_setup</span><span class=\"p\">()</span>\n</pre>\n<p>Python standard logging is available for monitoring:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n</pre>\n<p>Use the <code>Athena.execute()</code> method to execute queries:</p>\n<pre><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    SELECT * FROM (</span>\n<span class=\"s2\">        VALUES (1, 'foo', 3.14), (2, 'bar', NULL)</span>\n<span class=\"s2\">    ) AS t (id, name, value)</span>\n<span class=\"s2\">\"\"\"</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">athena</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n</pre>\n<p>If you rerun same query, results should be read from cache.</p>\n<p>Pallas also support non-blocking query execution:</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">athena</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>  <span class=\"c1\"># Submit a query and return</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>  <span class=\"c1\"># Wait for query completion.</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">get_results</span><span class=\"p\">()</span>  <span class=\"c1\"># Retrieve results. Calls query.join() internally.</span>\n</pre>\n<p>The result objects provides a list-like interface\nand can be converted to a Pandas DataFrame:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">to_df</span><span class=\"p\">()</span>\n</pre>\n<h2>Development</h2>\n<p>Pallas can be installed with development dependencies using pip:</p>\n<pre>$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>Code is checked with <a href=\"https://flake8.pycqa.org/en/latest/\" rel=\"nofollow\">flake8</a> and <a href=\"http://mypy-lang.org\" rel=\"nofollow\">Mypy</a>. Tests are run using <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>.</p>\n<p>For integration test to run, access to AWS resources has to be configured:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">PALLAS_TEST_REGION</span><span class=\"o\">=</span>            <span class=\"c1\"># AWS region, can be also specified in ~/.aws/config</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_TEST_ATHENA_DATABASE</span><span class=\"o\">=</span>   <span class=\"c1\"># Name of Athena database</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_TEST_ATHENA_WORKGROUP</span><span class=\"o\">=</span>  <span class=\"c1\"># Optional</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PALLAS_TEST_S3_TMP</span><span class=\"o\">=</span>            <span class=\"c1\"># s3:// URI</span>\n</pre>\n<p>Code checks and testing are automated using tox:</p>\n<pre>$ tox\n</pre>\n\n          </div>"}, "last_serial": 6874454, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "38878e426c36aca0d94e3d6d327f2bbf", "sha256": "3452f59a6321d3ba7498191fd1633ff064c1e183a78933122fa2f428f4dd85b4"}, "downloads": -1, "filename": "pallas-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "38878e426c36aca0d94e3d6d327f2bbf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37644, "upload_time": "2020-03-24T16:56:47", "upload_time_iso_8601": "2020-03-24T16:56:47.395386Z", "url": "https://files.pythonhosted.org/packages/16/2e/f533354c8de58910d87fd0da5d00ea1b99d4a446483b74bed2c8e92e0a17/pallas-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efd8c5bef523ed3dac5f81ec8bd32a47", "sha256": "8f794a696b6439074efbe34cd6bf8f289407c25cf7a57e58f558626f45e2ea6b"}, "downloads": -1, "filename": "pallas-0.1.tar.gz", "has_sig": false, "md5_digest": "efd8c5bef523ed3dac5f81ec8bd32a47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 35154, "upload_time": "2020-03-24T16:56:48", "upload_time_iso_8601": "2020-03-24T16:56:48.981730Z", "url": "https://files.pythonhosted.org/packages/25/03/1b44e7f1e08565fa5d1d43fad9b5753cb338124fac7dba255e8a043663f1/pallas-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "38878e426c36aca0d94e3d6d327f2bbf", "sha256": "3452f59a6321d3ba7498191fd1633ff064c1e183a78933122fa2f428f4dd85b4"}, "downloads": -1, "filename": "pallas-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "38878e426c36aca0d94e3d6d327f2bbf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37644, "upload_time": "2020-03-24T16:56:47", "upload_time_iso_8601": "2020-03-24T16:56:47.395386Z", "url": "https://files.pythonhosted.org/packages/16/2e/f533354c8de58910d87fd0da5d00ea1b99d4a446483b74bed2c8e92e0a17/pallas-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efd8c5bef523ed3dac5f81ec8bd32a47", "sha256": "8f794a696b6439074efbe34cd6bf8f289407c25cf7a57e58f558626f45e2ea6b"}, "downloads": -1, "filename": "pallas-0.1.tar.gz", "has_sig": false, "md5_digest": "efd8c5bef523ed3dac5f81ec8bd32a47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 35154, "upload_time": "2020-03-24T16:56:48", "upload_time_iso_8601": "2020-03-24T16:56:48.981730Z", "url": "https://files.pythonhosted.org/packages/25/03/1b44e7f1e08565fa5d1d43fad9b5753cb338124fac7dba255e8a043663f1/pallas-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:44 2020"}