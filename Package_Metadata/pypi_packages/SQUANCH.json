{"info": {"author": "Ben Bartlett", "author_email": "benbartlett@stanford.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Simulator for quantum networks and channels\n\n<!-- images are hard-linked so they will show up on pypi page -->\n\nThe _Simulator for Quantum Networks and Channels_ (`SQUANCH`) is an open-source Python library for creating parallelized simulations of distributed quantum information processing. The framework includes many features of a general-purpose quantum computing simulator, but it is optimized specifically for simulating quantum networks. It includes functionality to allow users to easily design complex multi-party quantum networks, extensible classes for modeling noisy quantum channels, and a multiprocessed NumPy backend for performant simulations.\n\nA schematic overview of the modules available in `SQUANCH` is shown below. (Refer to the [documentation](https://att-innovate.github.io/squanch/) or the [whitepaper](https://arxiv.org/abs/1808.07047) for more details.)\n\n![Overview of SQUANCH framework structure](https://raw.githubusercontent.com/att-innovate/squanch/master/docs/source/img/moduleOverview.png)\n\n`SQUANCH` is developed as part of the Intelligent Quantum Networks and Technologies ([INQNET](http://inqnet.caltech.edu)) program, a [collaboration](http://about.att.com/story/beyond_quantum_computing.html) between AT&T and the California Institute of Technology. \n\n## Documentation\n\nDocumentation for this package is available at the [documentation website](https://att-innovate.github.io/squanch/) or as a [pdf manual](/docs/SQUANCH.pdf). We encourage interested users to read the whitepaper for the `SQUANCH` platform, \"A distributed simulation framework for quantum networks and channels\" (arXiv: [1808.07047](https://arxiv.org/abs/1808.07047)), which provides an overview of the framework and a primer on quantum information.\n\n## Installation \n\nYou can install SQUANCH directly using the Python package manager, `pip`:\n\n```\npip install squanch\n```\n\nIf you don't have `pip`, you can get it using `easy_install pip`.\n\n## Demonstrations\n\nDemonstrations of various quantum protocols can be found in the [demos](/demos) folder and in the [documentation](https://att-innovate.github.io/squanch/demos.html):\n\n- [Quantum teleportation](https://att-innovate.github.io/squanch/demos/quantum-teleportation.html)\n- [Superdense coding](https://att-innovate.github.io/squanch/demos/superdense-coding.html)\n- [Man-in-the-middle attack](https://att-innovate.github.io/squanch/demos/man-in-the-middle.html)\n- [Quantum error correction](https://att-innovate.github.io/squanch/demos/quantum-error-correction.html)\n\n### Example: quantum interception attack\n\nAs an example to put in this readme, let's consider a scenario where Alice wants to send data to Bob. For security, she transmits her message through [quantum superdense coding](https://en.wikipedia.org/wiki/Superdense_coding). In this scenario, shown below as a circuit diagram, we have four [`Agents`](https://att-innovate.github.io/squanch/getting-started.html#using-agents-in-your-simulations), who act as follows:\n\n<img src=\"https://raw.githubusercontent.com/att-innovate/squanch/master/docs/source/img/man-in-middle-circuit.png\" width=500>\n\n- Charlie generates entangled pairs of qubits, which he sends to Alice and Bob.\n- Alice receives Charlie's qubit. She encodes two bits of her data in it and sends it Bob.\n- Bob receives the qubits from Charlie and Alice. He operates jointly on them and measures them to reconstruct Alice's two bits of information.\n- However, the fourth agent, Eve, wants to know Alice's data. She intercepts every qubit Alice sends to Bob, measures it, and re-transmits it to Bob, hoping he won't notice.\n\nAn implementation of this scenario in `SQUANCH` is given below.\n\n```python\nimport numpy as np\nimport matplotlib.image as image\nfrom squanch import *\n\nclass Charlie(Agent):\n    '''Charlie sends Bell pairs to Alice and Bob'''\n    def run(self):\n        for qsys in self.qstream:\n            a, b = qsys.qubits\n            H(a)\n            CNOT(a, b)\n            self.qsend(alice, a)\n            self.qsend(bob, b)\n\nclass Alice(Agent):\n    '''Alice tries to send data to Bob, but Eve intercepts'''\n    def run(self):\n        for _ in self.qstream:\n            bit1 = self.data.pop(0)\n            bit2 = self.data.pop(0)\n            q = self.qrecv(charlie)\n            if bit2 == 1: X(q)\n            if bit1 == 1: Z(q)\n            # Alice unknowingly sends the qubit to Eve\n            self.qsend(eve, q) \n\nclass Eve(Agent):\n    '''Eve naively tries to intercept Alice's data'''\n    def run(self):\n        bits = [] \n        for _ in self.qstream:\n            a = self.qrecv(alice)\n            bits.append(a.measure())\n            self.qsend(bob, a)\n        self.output(bits)\n\nclass Bob(Agent):\n    '''Bob receives Eve's intercepted data'''\n    def run(self):\n        bits = []\n        for _ in self.qstream:\n            a = self.qrecv(eve)\n            c = self.qrecv(charlie)\n            CNOT(a, c)\n            H(a)\n            bits.extend([a.measure(), c.measure()])\n        self.output(bits)\n\n# Load Alice's data (an image) and serialize it to a bitstream\nimg = image.imread(\"docs/source/img/foundryLogo.bmp\") \nbitstream = list(np.unpackbits(img))\n\n# Prepare an appropriately sized quantum stream\nqstream = QStream(2, int(len(bitstream) / 2))\nout = Agent.shared_output()\n\n# Instantiate agents\nalice = Alice(qstream, out, data=bitstream)\nbob = Bob(qstream, out)\ncharlie = Charlie(qstream, out)\neve = Eve(qstream, out)\n\n# Connect the agents to form the network\nalice.qconnect(bob)\nalice.qconnect(eve)\nalice.qconnect(charlie)\nbob.qconnect(charlie)\nbob.qconnect(eve)\n\n# Run the simulation\nSimulation(alice, eve, bob, charlie).run()\n\n# Display the images Alice sent, Eve intercepted, and Bob received\n# (Plotting code omitted for brevity; results shown below)\n``` \n\n![Images sent by Alice, intercepted by Eve, and received by Bob](https://raw.githubusercontent.com/att-innovate/squanch/master/docs/source/img/man-in-the-middle-results.png)\n\n## Citation\n\nIf you are doing research using `SQUANCH`, please cite our whitepaper:\n\n> B. Bartlett, \"A distributed simulation framework for quantum networks and channels,\" arXiv: 1808.07047 [quant-ph], Aug. 2018.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/att-innovate/squanch", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "SQUANCH", "package_url": "https://pypi.org/project/SQUANCH/", "platform": "", "project_url": "https://pypi.org/project/SQUANCH/", "project_urls": {"Homepage": "https://github.com/att-innovate/squanch"}, "release_url": "https://pypi.org/project/SQUANCH/1.1.0/", "requires_dist": ["numpy", "tqdm"], "requires_python": "", "summary": "Simulator for Quantum Networks and Channels", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Simulator for quantum networks and channels</h1>\n\n<p>The <em>Simulator for Quantum Networks and Channels</em> (<code>SQUANCH</code>) is an open-source Python library for creating parallelized simulations of distributed quantum information processing. The framework includes many features of a general-purpose quantum computing simulator, but it is optimized specifically for simulating quantum networks. It includes functionality to allow users to easily design complex multi-party quantum networks, extensible classes for modeling noisy quantum channels, and a multiprocessed NumPy backend for performant simulations.</p>\n<p>A schematic overview of the modules available in <code>SQUANCH</code> is shown below. (Refer to the <a href=\"https://att-innovate.github.io/squanch/\" rel=\"nofollow\">documentation</a> or the <a href=\"https://arxiv.org/abs/1808.07047\" rel=\"nofollow\">whitepaper</a> for more details.)</p>\n<p><img alt=\"Overview of SQUANCH framework structure\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30c8626d148092db7122d829d0ce197278e31cb8/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6174742d696e6e6f766174652f737175616e63682f6d61737465722f646f63732f736f757263652f696d672f6d6f64756c654f766572766965772e706e67\"></p>\n<p><code>SQUANCH</code> is developed as part of the Intelligent Quantum Networks and Technologies (<a href=\"http://inqnet.caltech.edu\" rel=\"nofollow\">INQNET</a>) program, a <a href=\"http://about.att.com/story/beyond_quantum_computing.html\" rel=\"nofollow\">collaboration</a> between AT&amp;T and the California Institute of Technology.</p>\n<h2>Documentation</h2>\n<p>Documentation for this package is available at the <a href=\"https://att-innovate.github.io/squanch/\" rel=\"nofollow\">documentation website</a> or as a <a href=\"/docs/SQUANCH.pdf\" rel=\"nofollow\">pdf manual</a>. We encourage interested users to read the whitepaper for the <code>SQUANCH</code> platform, \"A distributed simulation framework for quantum networks and channels\" (arXiv: <a href=\"https://arxiv.org/abs/1808.07047\" rel=\"nofollow\">1808.07047</a>), which provides an overview of the framework and a primer on quantum information.</p>\n<h2>Installation</h2>\n<p>You can install SQUANCH directly using the Python package manager, <code>pip</code>:</p>\n<pre><code>pip install squanch\n</code></pre>\n<p>If you don't have <code>pip</code>, you can get it using <code>easy_install pip</code>.</p>\n<h2>Demonstrations</h2>\n<p>Demonstrations of various quantum protocols can be found in the <a href=\"/demos\" rel=\"nofollow\">demos</a> folder and in the <a href=\"https://att-innovate.github.io/squanch/demos.html\" rel=\"nofollow\">documentation</a>:</p>\n<ul>\n<li><a href=\"https://att-innovate.github.io/squanch/demos/quantum-teleportation.html\" rel=\"nofollow\">Quantum teleportation</a></li>\n<li><a href=\"https://att-innovate.github.io/squanch/demos/superdense-coding.html\" rel=\"nofollow\">Superdense coding</a></li>\n<li><a href=\"https://att-innovate.github.io/squanch/demos/man-in-the-middle.html\" rel=\"nofollow\">Man-in-the-middle attack</a></li>\n<li><a href=\"https://att-innovate.github.io/squanch/demos/quantum-error-correction.html\" rel=\"nofollow\">Quantum error correction</a></li>\n</ul>\n<h3>Example: quantum interception attack</h3>\n<p>As an example to put in this readme, let's consider a scenario where Alice wants to send data to Bob. For security, she transmits her message through <a href=\"https://en.wikipedia.org/wiki/Superdense_coding\" rel=\"nofollow\">quantum superdense coding</a>. In this scenario, shown below as a circuit diagram, we have four <a href=\"https://att-innovate.github.io/squanch/getting-started.html#using-agents-in-your-simulations\" rel=\"nofollow\"><code>Agents</code></a>, who act as follows:</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72bd4fc95d6c281a6d65299566035b9337262e25/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6174742d696e6e6f766174652f737175616e63682f6d61737465722f646f63732f736f757263652f696d672f6d616e2d696e2d6d6964646c652d636972637569742e706e67\" width=\"500\">\n<ul>\n<li>Charlie generates entangled pairs of qubits, which he sends to Alice and Bob.</li>\n<li>Alice receives Charlie's qubit. She encodes two bits of her data in it and sends it Bob.</li>\n<li>Bob receives the qubits from Charlie and Alice. He operates jointly on them and measures them to reconstruct Alice's two bits of information.</li>\n<li>However, the fourth agent, Eve, wants to know Alice's data. She intercepts every qubit Alice sends to Bob, measures it, and re-transmits it to Bob, hoping he won't notice.</li>\n</ul>\n<p>An implementation of this scenario in <code>SQUANCH</code> is given below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.image</span> <span class=\"k\">as</span> <span class=\"nn\">image</span>\n<span class=\"kn\">from</span> <span class=\"nn\">squanch</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Charlie</span><span class=\"p\">(</span><span class=\"n\">Agent</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Charlie sends Bell pairs to Alice and Bob'''</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">qsys</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qstream</span><span class=\"p\">:</span>\n            <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">qsys</span><span class=\"o\">.</span><span class=\"n\">qubits</span>\n            <span class=\"n\">H</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n            <span class=\"n\">CNOT</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qsend</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qsend</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Alice</span><span class=\"p\">(</span><span class=\"n\">Agent</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Alice tries to send data to Bob, but Eve intercepts'''</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qstream</span><span class=\"p\">:</span>\n            <span class=\"n\">bit1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">bit2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qrecv</span><span class=\"p\">(</span><span class=\"n\">charlie</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">bit2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">bit1</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">Z</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Alice unknowingly sends the qubit to Eve</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qsend</span><span class=\"p\">(</span><span class=\"n\">eve</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">)</span> \n\n<span class=\"k\">class</span> <span class=\"nc\">Eve</span><span class=\"p\">(</span><span class=\"n\">Agent</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Eve naively tries to intercept Alice's data'''</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> \n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qstream</span><span class=\"p\">:</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qrecv</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">)</span>\n            <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">())</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qsend</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Bob</span><span class=\"p\">(</span><span class=\"n\">Agent</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Bob receives Eve's intercepted data'''</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qstream</span><span class=\"p\">:</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qrecv</span><span class=\"p\">(</span><span class=\"n\">eve</span><span class=\"p\">)</span>\n            <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qrecv</span><span class=\"p\">(</span><span class=\"n\">charlie</span><span class=\"p\">)</span>\n            <span class=\"n\">CNOT</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n            <span class=\"n\">H</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n            <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(),</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">()])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load Alice's data (an image) and serialize it to a bitstream</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s2\">\"docs/source/img/foundryLogo.bmp\"</span><span class=\"p\">)</span> \n<span class=\"n\">bitstream</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unpackbits</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Prepare an appropriately sized quantum stream</span>\n<span class=\"n\">qstream</span> <span class=\"o\">=</span> <span class=\"n\">QStream</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bitstream</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">Agent</span><span class=\"o\">.</span><span class=\"n\">shared_output</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Instantiate agents</span>\n<span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Alice</span><span class=\"p\">(</span><span class=\"n\">qstream</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">bitstream</span><span class=\"p\">)</span>\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Bob</span><span class=\"p\">(</span><span class=\"n\">qstream</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"n\">charlie</span> <span class=\"o\">=</span> <span class=\"n\">Charlie</span><span class=\"p\">(</span><span class=\"n\">qstream</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"n\">eve</span> <span class=\"o\">=</span> <span class=\"n\">Eve</span><span class=\"p\">(</span><span class=\"n\">qstream</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Connect the agents to form the network</span>\n<span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">qconnect</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">)</span>\n<span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">qconnect</span><span class=\"p\">(</span><span class=\"n\">eve</span><span class=\"p\">)</span>\n<span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">qconnect</span><span class=\"p\">(</span><span class=\"n\">charlie</span><span class=\"p\">)</span>\n<span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">qconnect</span><span class=\"p\">(</span><span class=\"n\">charlie</span><span class=\"p\">)</span>\n<span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">qconnect</span><span class=\"p\">(</span><span class=\"n\">eve</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run the simulation</span>\n<span class=\"n\">Simulation</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">,</span> <span class=\"n\">eve</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">charlie</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Display the images Alice sent, Eve intercepted, and Bob received</span>\n<span class=\"c1\"># (Plotting code omitted for brevity; results shown below)</span>\n</pre>\n<p><img alt=\"Images sent by Alice, intercepted by Eve, and received by Bob\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33c710d71567bb2737071c482bcb6dbb49330817/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6174742d696e6e6f766174652f737175616e63682f6d61737465722f646f63732f736f757263652f696d672f6d616e2d696e2d7468652d6d6964646c652d726573756c74732e706e67\"></p>\n<h2>Citation</h2>\n<p>If you are doing research using <code>SQUANCH</code>, please cite our whitepaper:</p>\n<blockquote>\n<p>B. Bartlett, \"A distributed simulation framework for quantum networks and channels,\" arXiv: 1808.07047 [quant-ph], Aug. 2018.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 4194563, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "cd6272baf339bd869e09e84477000bf8", "sha256": "d4c729ce8dfa35dd6b826f8964a3e351b7296136487d0ec0a906dccd6760b719"}, "downloads": -1, "filename": "SQUANCH-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cd6272baf339bd869e09e84477000bf8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16548, "upload_time": "2018-07-13T00:04:42", "upload_time_iso_8601": "2018-07-13T00:04:42.892882Z", "url": "https://files.pythonhosted.org/packages/5d/3d/da3279bc70f72a47a3c6685a7d715eefe16f7eb31822d60005fda6eed4e4/SQUANCH-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "866753915f1690df255dc1ba92d0e1c8", "sha256": "87a09d717e18a9122202191c3513aa10b1a39fd9010e372099be2b3de38f98f9"}, "downloads": -1, "filename": "SQUANCH-1.0.0.tar.gz", "has_sig": false, "md5_digest": "866753915f1690df255dc1ba92d0e1c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15423, "upload_time": "2018-07-13T00:04:44", "upload_time_iso_8601": "2018-07-13T00:04:44.205578Z", "url": "https://files.pythonhosted.org/packages/b4/c9/d7f5ef1cf31fab446371ef73c22e6117a48a566b946cc8433a3a3bc58a87/SQUANCH-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "987a1528a9d34ae61167ad43113f299b", "sha256": "a151225c96fa57232e9337043582a8e23508128acc05ad0eb848fe6dffd9accf"}, "downloads": -1, "filename": "SQUANCH-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "987a1528a9d34ae61167ad43113f299b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16683, "upload_time": "2018-08-22T00:49:20", "upload_time_iso_8601": "2018-08-22T00:49:20.786695Z", "url": "https://files.pythonhosted.org/packages/5e/9e/cbc63bea6a87b21adab86895d3e477a8ac431f1453a49e96ead98e315825/SQUANCH-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4856c16b44f984f6a5029fba1d23a04b", "sha256": "9c1a6c71d4a43fac5defbed4c164f59ba5635eefc9651d0947b1f806a17278e4"}, "downloads": -1, "filename": "SQUANCH-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4856c16b44f984f6a5029fba1d23a04b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15841, "upload_time": "2018-08-22T00:49:22", "upload_time_iso_8601": "2018-08-22T00:49:22.259331Z", "url": "https://files.pythonhosted.org/packages/1c/53/5a039f3c1890ee6448ecc42fb27a405471562683728a5b215675b274bb74/SQUANCH-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "987a1528a9d34ae61167ad43113f299b", "sha256": "a151225c96fa57232e9337043582a8e23508128acc05ad0eb848fe6dffd9accf"}, "downloads": -1, "filename": "SQUANCH-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "987a1528a9d34ae61167ad43113f299b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16683, "upload_time": "2018-08-22T00:49:20", "upload_time_iso_8601": "2018-08-22T00:49:20.786695Z", "url": "https://files.pythonhosted.org/packages/5e/9e/cbc63bea6a87b21adab86895d3e477a8ac431f1453a49e96ead98e315825/SQUANCH-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4856c16b44f984f6a5029fba1d23a04b", "sha256": "9c1a6c71d4a43fac5defbed4c164f59ba5635eefc9651d0947b1f806a17278e4"}, "downloads": -1, "filename": "SQUANCH-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4856c16b44f984f6a5029fba1d23a04b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15841, "upload_time": "2018-08-22T00:49:22", "upload_time_iso_8601": "2018-08-22T00:49:22.259331Z", "url": "https://files.pythonhosted.org/packages/1c/53/5a039f3c1890ee6448ecc42fb27a405471562683728a5b215675b274bb74/SQUANCH-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:27 2020"}