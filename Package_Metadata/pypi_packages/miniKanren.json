{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# `kanren`\n\n[![Build Status](https://travis-ci.org/pythological/kanren.svg?branch=master)](https://travis-ci.org/pythological/kanren) [![Coverage Status](https://coveralls.io/repos/github/pythological/kanren/badge.svg?branch=master)](https://coveralls.io/github/pythological/kanren?branch=master) [![PyPI](https://img.shields.io/pypi/v/miniKanren)](https://pypi.org/project/miniKanren/)\n\nLogic/relational programming in Python with [miniKanren](http://minikanren.org/).\n\n## Installation\n\nUsing `pip`:\n```bash\npip install miniKanren\n```\n\nTo install from source:\n```bash\ngit clone git@github.com:pythological/kanren.git\ncd kanren\npip install -r requirements.txt\n```\n\nTests can be run with the provided `Makefile`:\n```bash\nmake check\n```\n\n## Motivation\n\nLogic programming is a general programming paradigm.  This implementation however came about specifically to serve as an algorithmic core for Computer Algebra Systems in Python and for the automated generation and optimization of numeric software.  Domain specific languages, code generation, and compilers have recently been a hot topic in the Scientific Python community.  `kanren` aims to be a low-level core for these projects.\n\n## Examples\n\n`kanren` enables one to express sophisticated relations&mdash;in the form of *goals*&mdash;and generate values that satisfy the relations.  The following code is the \"Hello, world!\" of logic programming; it asks for values of the *logic variable* `x` such that `x == 5`:\n\n```python\n>>> from kanren import run, eq, membero, var, lall\n>>> x = var()\n>>> run(1, x, eq(x, 5))\n(5,)\n```\n\nMultiple logic variables and goals can be used simultaneously.  The following code asks for one list containing the values of `x` and `z` such that `x == z` **and** `z == 3`:\n\n```python\n>>> z = var()\n>>> run(1, [x, z], eq(x, z),\n                   eq(z, 3))\n([3, 4],)\n```\n\n`kanren` uses [unification](http://en.wikipedia.org/wiki/Unification_%28computer_science%29) to match forms within expression trees.  The following code asks for values of `x` such that `(1, 2) == (1, x)`:\n\n```python\n>>> run(1, x, eq((1, 2), (1, x)))\n(2,)\n```\n\nThe above examples use `eq`: a *goal constructor* that creates a goal for unification between two objects.  Other goal constructors, such as `membero(item, coll)`, express more sophisticated relations and are often constructed from simpler ones like `eq`.  More specifically, `membero` states that `item` is a member of the collection `coll`.\n\nThe following example uses `membero` to ask for *all* values of `x`, such that `x` is a member of `(1, 2, 3)` **and** `x` is a member of `(2, 3, 4)`.\n\n```python\n>>> run(0, x, membero(x, (1, 2, 3)),  # x is a member of (1, 2, 3)\n              membero(x, (2, 3, 4)))  # x is a member of (2, 3, 4)\n(2, 3)\n```\n\nThe examples above made implicit use of the goal constructors `lall` and `lany`, which represent goal *conjunction* and *disjunction*, respectively.  Many useful relations can be expressed with `lall`, `lany`, and `eq` alone, but in `kanren` it's also easy to leverage the host language and explicitly create any relation expressible in Python.\n\n### Representing Knowledge\n\n`kanren` stores data as facts that state relationships between terms.  The following code creates a parent relationship and uses it to state facts about who is a parent of whom within the Simpsons family:\n\n```python\n>>> from kanren import Relation, facts\n>>> parent = Relation()\n>>> facts(parent, (\"Homer\", \"Bart\"),\n...               (\"Homer\", \"Lisa\"),\n...               (\"Abe\",  \"Homer\"))\n\n>>> run(1, x, parent(x, \"Bart\"))\n('Homer',)\n\n>>> run(2, x, parent(\"Homer\", x))\n('Lisa', 'Bart')\n```\n\nWe can use intermediate variables for more complex queries.  For instance, who is Bart's grandfather?\n\n```python\n>>> grandparent_lv, parent_lv = var(), var()\n>>> run(1, grandparent_lv, parent(grandparent_lv, parent_lv),\n                           parent(parent_lv, 'Bart'))\n('Abe',)\n```\n\nWe can express the grandfather relationship as a distinct relation by creating a goal constructor:\n```python\n>>> def grandparent(x, z):\n...     y = var()\n...     return lall(parent(x, y), parent(y, z))\n\n>>> run(1, x, grandparent(x, 'Bart'))\n('Abe,')\n```\n\n## Constraints\n\n`kanren` provides a fully functional constraint system that allows one to restrict unification and object types:\n\n```python\n>>> from kanren.constraints import neq, isinstanceo\n\n>>> run(0, x,\n...     neq(x, 1),  # Not \"equal\" to 1\n...     neq(x, 3),  # Not \"equal\" to 3\n...     membero(x, (1, 2, 3)))\n(2,)\n\n>>> from numbers import Integral\n>>> run(0, x,\n...     isinstanceo(x, Integral),  # `x` must be of type `Integral`\n...     membero(x, (1.1, 2, 3.2, 4)))\n(2, 4)\n```\n\n## Graph Relations\n\n`kanren` comes with support for relational graph operations suitable for basic symbolic algebra operations.  See the examples in [`doc/graphs.md`](doc/graphs.md).\n\n## Extending `kanren`\n\n`kanren` uses [`multipledispatch`](http://github.com/mrocklin/multipledispatch/) and the [`logical-unification` library](https://github.com/pythological/unification) to support pattern matching on user defined types.  Essentially, types that can be unified can be used with most `kanren` goals.  See the [`logical-unification` project's examples](https://github.com/pythological/unification#examples) for demonstrations of how arbitrary types can be made unifiable.\n\n## About\n\nThis project is a fork of [`logpy`](https://github.com/logpy/logpy).\n\n## References\n\n* [Logic Programming on wikipedia](http://en.wikipedia.org/wiki/Logic_programming)\n* [miniKanren](http://minikanren.org/), a Scheme library for relational programming on which this library is based.  More information can be found in the\n[thesis of William\nByrd](https://scholarworks.iu.edu/dspace/bitstream/handle/2022/8777/Byrd_indiana_0093A_10344.pdf).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pythological/kanren", "keywords": "", "license": "BSD", "maintainer": "Brandon T. Willard", "maintainer_email": "brandonwillard+kanren@gmail.com", "name": "miniKanren", "package_url": "https://pypi.org/project/miniKanren/", "platform": "", "project_url": "https://pypi.org/project/miniKanren/", "project_urls": {"Homepage": "http://github.com/pythological/kanren"}, "release_url": "https://pypi.org/project/miniKanren/1.0.1/", "requires_dist": ["toolz", "cons (>=0.4.0)", "multipledispatch", "etuples (>=0.3.1)", "logical-unification (>=0.4.1)"], "requires_python": ">=3.6", "summary": "Relational programming in Python", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>kanren</code></h1>\n<p><a href=\"https://travis-ci.org/pythological/kanren\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab6022e5a998f8a24b5b8785ed39645c22588d2a/68747470733a2f2f7472617669732d63692e6f72672f707974686f6c6f676963616c2f6b616e72656e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/pythological/kanren?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38f8f7f0b24afde9683b7a53c1ef98436686666b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f707974686f6c6f676963616c2f6b616e72656e2f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/miniKanren/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f29047f3461cde08f4782ba79ab741ba6cfc1a61/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d696e694b616e72656e\"></a></p>\n<p>Logic/relational programming in Python with <a href=\"http://minikanren.org/\" rel=\"nofollow\">miniKanren</a>.</p>\n<h2>Installation</h2>\n<p>Using <code>pip</code>:</p>\n<pre>pip install miniKanren\n</pre>\n<p>To install from source:</p>\n<pre>git clone git@github.com:pythological/kanren.git\n<span class=\"nb\">cd</span> kanren\npip install -r requirements.txt\n</pre>\n<p>Tests can be run with the provided <code>Makefile</code>:</p>\n<pre>make check\n</pre>\n<h2>Motivation</h2>\n<p>Logic programming is a general programming paradigm.  This implementation however came about specifically to serve as an algorithmic core for Computer Algebra Systems in Python and for the automated generation and optimization of numeric software.  Domain specific languages, code generation, and compilers have recently been a hot topic in the Scientific Python community.  <code>kanren</code> aims to be a low-level core for these projects.</p>\n<h2>Examples</h2>\n<p><code>kanren</code> enables one to express sophisticated relations\u2014in the form of <em>goals</em>\u2014and generate values that satisfy the relations.  The following code is the \"Hello, world!\" of logic programming; it asks for values of the <em>logic variable</em> <code>x</code> such that <code>x == 5</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kanren</span> <span class=\"kn\">import</span> <span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">eq</span><span class=\"p\">,</span> <span class=\"n\">membero</span><span class=\"p\">,</span> <span class=\"n\">var</span><span class=\"p\">,</span> <span class=\"n\">lall</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,)</span>\n</pre>\n<p>Multiple logic variables and goals can be used simultaneously.  The following code asks for one list containing the values of <code>x</code> and <code>z</code> such that <code>x == z</code> <strong>and</strong> <code>z == 3</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">],</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span>\n                   <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],)</span>\n</pre>\n<p><code>kanren</code> uses <a href=\"http://en.wikipedia.org/wiki/Unification_%28computer_science%29\" rel=\"nofollow\">unification</a> to match forms within expression trees.  The following code asks for values of <code>x</code> such that <code>(1, 2) == (1, x)</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">eq</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,)</span>\n</pre>\n<p>The above examples use <code>eq</code>: a <em>goal constructor</em> that creates a goal for unification between two objects.  Other goal constructors, such as <code>membero(item, coll)</code>, express more sophisticated relations and are often constructed from simpler ones like <code>eq</code>.  More specifically, <code>membero</code> states that <code>item</code> is a member of the collection <code>coll</code>.</p>\n<p>The following example uses <code>membero</code> to ask for <em>all</em> values of <code>x</code>, such that <code>x</code> is a member of <code>(1, 2, 3)</code> <strong>and</strong> <code>x</code> is a member of <code>(2, 3, 4)</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">membero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)),</span>  <span class=\"c1\"># x is a member of (1, 2, 3)</span>\n              <span class=\"n\">membero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>  <span class=\"c1\"># x is a member of (2, 3, 4)</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>The examples above made implicit use of the goal constructors <code>lall</code> and <code>lany</code>, which represent goal <em>conjunction</em> and <em>disjunction</em>, respectively.  Many useful relations can be expressed with <code>lall</code>, <code>lany</code>, and <code>eq</code> alone, but in <code>kanren</code> it's also easy to leverage the host language and explicitly create any relation expressible in Python.</p>\n<h3>Representing Knowledge</h3>\n<p><code>kanren</code> stores data as facts that state relationships between terms.  The following code creates a parent relationship and uses it to state facts about who is a parent of whom within the Simpsons family:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kanren</span> <span class=\"kn\">import</span> <span class=\"n\">Relation</span><span class=\"p\">,</span> <span class=\"n\">facts</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">Relation</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">facts</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"Homer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Bart\"</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>               <span class=\"p\">(</span><span class=\"s2\">\"Homer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Lisa\"</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>               <span class=\"p\">(</span><span class=\"s2\">\"Abe\"</span><span class=\"p\">,</span>  <span class=\"s2\">\"Homer\"</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s2\">\"Bart\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s1\">'Homer'</span><span class=\"p\">,)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"s2\">\"Homer\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s1\">'Lisa'</span><span class=\"p\">,</span> <span class=\"s1\">'Bart'</span><span class=\"p\">)</span>\n</pre>\n<p>We can use intermediate variables for more complex queries.  For instance, who is Bart's grandfather?</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">grandparent_lv</span><span class=\"p\">,</span> <span class=\"n\">parent_lv</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">(),</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">grandparent_lv</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">grandparent_lv</span><span class=\"p\">,</span> <span class=\"n\">parent_lv</span><span class=\"p\">),</span>\n                           <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">parent_lv</span><span class=\"p\">,</span> <span class=\"s1\">'Bart'</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s1\">'Abe'</span><span class=\"p\">,)</span>\n</pre>\n<p>We can express the grandfather relationship as a distinct relation by creating a goal constructor:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">grandparent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">lall</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s1\">'Bart'</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s1\">'Abe,'</span><span class=\"p\">)</span>\n</pre>\n<h2>Constraints</h2>\n<p><code>kanren</code> provides a fully functional constraint system that allows one to restrict unification and object types:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">kanren.constraints</span> <span class=\"kn\">import</span> <span class=\"n\">neq</span><span class=\"p\">,</span> <span class=\"n\">isinstanceo</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">neq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>  <span class=\"c1\"># Not \"equal\" to 1</span>\n<span class=\"o\">...</span>     <span class=\"n\">neq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>  <span class=\"c1\"># Not \"equal\" to 3</span>\n<span class=\"o\">...</span>     <span class=\"n\">membero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">numbers</span> <span class=\"kn\">import</span> <span class=\"n\">Integral</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">isinstanceo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Integral</span><span class=\"p\">),</span>  <span class=\"c1\"># `x` must be of type `Integral`</span>\n<span class=\"o\">...</span>     <span class=\"n\">membero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">3.2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<h2>Graph Relations</h2>\n<p><code>kanren</code> comes with support for relational graph operations suitable for basic symbolic algebra operations.  See the examples in <a href=\"doc/graphs.md\" rel=\"nofollow\"><code>doc/graphs.md</code></a>.</p>\n<h2>Extending <code>kanren</code></h2>\n<p><code>kanren</code> uses <a href=\"http://github.com/mrocklin/multipledispatch/\" rel=\"nofollow\"><code>multipledispatch</code></a> and the <a href=\"https://github.com/pythological/unification\" rel=\"nofollow\"><code>logical-unification</code> library</a> to support pattern matching on user defined types.  Essentially, types that can be unified can be used with most <code>kanren</code> goals.  See the <a href=\"https://github.com/pythological/unification#examples\" rel=\"nofollow\"><code>logical-unification</code> project's examples</a> for demonstrations of how arbitrary types can be made unifiable.</p>\n<h2>About</h2>\n<p>This project is a fork of <a href=\"https://github.com/logpy/logpy\" rel=\"nofollow\"><code>logpy</code></a>.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Logic_programming\" rel=\"nofollow\">Logic Programming on wikipedia</a></li>\n<li><a href=\"http://minikanren.org/\" rel=\"nofollow\">miniKanren</a>, a Scheme library for relational programming on which this library is based.  More information can be found in the\n<a href=\"https://scholarworks.iu.edu/dspace/bitstream/handle/2022/8777/Byrd_indiana_0093A_10344.pdf\" rel=\"nofollow\">thesis of William\nByrd</a>.</li>\n</ul>\n\n          </div>"}, "last_serial": 6686092, "releases": {"0.2.5": [{"comment_text": "", "digests": {"md5": "bdf9b7fdb5fa5c6d7edde3aa1c77abf7", "sha256": "2a9508777f06f16d2562d759fd2a8281f9e5c8b07c522c29949fe0f07cfe67a0"}, "downloads": -1, "filename": "miniKanren-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bdf9b7fdb5fa5c6d7edde3aa1c77abf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16214, "upload_time": "2019-12-22T06:22:34", "upload_time_iso_8601": "2019-12-22T06:22:34.322967Z", "url": "https://files.pythonhosted.org/packages/2e/94/a1c1b5f6044c3770605e5aec56c102210d5981855beebcdf3df112217fe9/miniKanren-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0c1a4cceb6c93ba6c87c34e28180db7", "sha256": "ff44c75d1dbf7c7c32b3d8acbb407eae46cbd9fed808371261812fd2438df325"}, "downloads": -1, "filename": "miniKanren-0.2.5.tar.gz", "has_sig": false, "md5_digest": "d0c1a4cceb6c93ba6c87c34e28180db7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30845, "upload_time": "2019-12-22T06:22:36", "upload_time_iso_8601": "2019-12-22T06:22:36.717053Z", "url": "https://files.pythonhosted.org/packages/77/50/21166f220e3146d121db4b39e22f3c3daa90bde0b877856ff30dbf02f253/miniKanren-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "ed8a72bd1d8d29346230a992e2d78492", "sha256": "0c60377f0be98e67867ac0598202124f4d0febc0033fbdc5ac898ad69cb24cdf"}, "downloads": -1, "filename": "miniKanren-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ed8a72bd1d8d29346230a992e2d78492", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16264, "upload_time": "2019-12-22T21:25:48", "upload_time_iso_8601": "2019-12-22T21:25:48.169742Z", "url": "https://files.pythonhosted.org/packages/9e/96/7ef50bb20b67f670e2678cd8b8cccbc860421474593f2aed95ab23b47dff/miniKanren-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7baecd2934f361af745f1f3f8ce86c16", "sha256": "21db17dd8b4c47d62a97ffea8c1507d0c441f7915a8383fa9a107c86d3b79618"}, "downloads": -1, "filename": "miniKanren-0.2.6.tar.gz", "has_sig": false, "md5_digest": "7baecd2934f361af745f1f3f8ce86c16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30923, "upload_time": "2019-12-22T21:25:49", "upload_time_iso_8601": "2019-12-22T21:25:49.655527Z", "url": "https://files.pythonhosted.org/packages/17/c6/d1f5bb35c646f44c6768332016228621b3dc83a975e69f12c385ce5ff6ad/miniKanren-0.2.6.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b43a8ecde7de7a78c03588a1d25fc690", "sha256": "4d217df99297f2576212501471de97fd62fd9c892e93f4475d396e8a3c2b83bd"}, "downloads": -1, "filename": "miniKanren-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b43a8ecde7de7a78c03588a1d25fc690", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39383, "upload_time": "2019-12-26T22:25:16", "upload_time_iso_8601": "2019-12-26T22:25:16.066057Z", "url": "https://files.pythonhosted.org/packages/b0/1b/f73aeedfa399dedfdfa7c8b02c90989484560f2ae37a9f7b29694b8cc51f/miniKanren-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7211bca3fa8a73686373f712c8404a3f", "sha256": "e6eea2ba7df68e09d656242d60c439bdbcd361563ab9eda7e152cdf84d008384"}, "downloads": -1, "filename": "miniKanren-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7211bca3fa8a73686373f712c8404a3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34506, "upload_time": "2019-12-26T22:25:17", "upload_time_iso_8601": "2019-12-26T22:25:17.549028Z", "url": "https://files.pythonhosted.org/packages/a7/88/c9ee0a0c62699945badda322a0629a95a845ba386f3a72a914685d114db9/miniKanren-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "c84c7c1fc18a0dfb3206dc714c78d22d", "sha256": "d5a57ab86673f23620830a1f6a1cf2bac42fd2a16e3c15ccb1a7dae446111007"}, "downloads": -1, "filename": "miniKanren-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c84c7c1fc18a0dfb3206dc714c78d22d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 46176, "upload_time": "2019-12-28T23:39:00", "upload_time_iso_8601": "2019-12-28T23:39:00.255303Z", "url": "https://files.pythonhosted.org/packages/20/8b/67dc86a4a34ff886375fae0e5a22f5e32562268025578d7dc2ba8bd21db3/miniKanren-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2932b74f6e79ee6c84b1b6d1c807dc8", "sha256": "f0f3ea1eb8745e2e1c36eac0d10ac42b523c9e9ff7ba31f3b1185116906801ff"}, "downloads": -1, "filename": "miniKanren-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c2932b74f6e79ee6c84b1b6d1c807dc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35016, "upload_time": "2019-12-28T23:39:01", "upload_time_iso_8601": "2019-12-28T23:39:01.527533Z", "url": "https://files.pythonhosted.org/packages/26/ea/9e043f17d2976987889f3c5d36f2ca4e770dd8ac3fdb78c00dcb0b1dd9fa/miniKanren-0.3.1.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "37223a69e5b0cfa56b736db9495e44e2", "sha256": "1532a8da56690cdcb05998502442ad8edbb8e519f863c096bb978edad3e7eaba"}, "downloads": -1, "filename": "miniKanren-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "37223a69e5b0cfa56b736db9495e44e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23855, "upload_time": "2020-01-01T02:29:33", "upload_time_iso_8601": "2020-01-01T02:29:33.308054Z", "url": "https://files.pythonhosted.org/packages/e0/e0/f4d6cb122cefb630dcf5aca50d71ac483d9c35a768728a41f197bd2b3db6/miniKanren-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef797ef2af02e901f67d1bb0dc29c5c0", "sha256": "0483b177968ba0a2412140cc7edf62dd023a2272d6652bb0eacda903548939bc"}, "downloads": -1, "filename": "miniKanren-0.3.5.tar.gz", "has_sig": false, "md5_digest": "ef797ef2af02e901f67d1bb0dc29c5c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38079, "upload_time": "2020-01-01T02:29:36", "upload_time_iso_8601": "2020-01-01T02:29:36.844234Z", "url": "https://files.pythonhosted.org/packages/a2/d5/ffa2973656d77ce0d2eec20ef3bb6abe01aa97028e8d841890dc1dc31e6d/miniKanren-0.3.5.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "54120cd9ec66ae94767fdb7d6d76813d", "sha256": "eed15a3becb32ef78d15212790749c07b2d1d343db1ba26fde3c5834d985749d"}, "downloads": -1, "filename": "miniKanren-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "54120cd9ec66ae94767fdb7d6d76813d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26198, "upload_time": "2020-01-31T06:47:56", "upload_time_iso_8601": "2020-01-31T06:47:56.089498Z", "url": "https://files.pythonhosted.org/packages/e6/1e/fe305fa97f99170fb09c366e9f08e78fb985a6b5871625063dde05f50f4c/miniKanren-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1df8b4145842e9bcfe6123b4057b33fe", "sha256": "d28d35e4f306a300b29bcbb8ec7259fa5dfbb6f0d8008a7080caae20c07257b6"}, "downloads": -1, "filename": "miniKanren-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1df8b4145842e9bcfe6123b4057b33fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 40143, "upload_time": "2020-01-31T06:47:57", "upload_time_iso_8601": "2020-01-31T06:47:57.443444Z", "url": "https://files.pythonhosted.org/packages/d5/8a/5a15688c1dfa6124c21b17e6d0c8b9370cf022e981e15ca23a8412449572/miniKanren-0.4.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a5412edbc123e4468390adffdb021065", "sha256": "5aafef54342ef277d5d44f5cd21b0419e97b6c04bc8e5d49d015de5581e4ed52"}, "downloads": -1, "filename": "miniKanren-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a5412edbc123e4468390adffdb021065", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23663, "upload_time": "2020-02-24T02:21:27", "upload_time_iso_8601": "2020-02-24T02:21:27.593960Z", "url": "https://files.pythonhosted.org/packages/67/bc/3df15fdaf51de97d1377c5647ff3f5fc10665703a43786eceb2f7ba770e9/miniKanren-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a08e8ce4c4e492cd99ebca8fcc55cc6c", "sha256": "3213e21cd7af95cbb86927af42eb68aecc2e8f88e745058425add19ded9165cc"}, "downloads": -1, "filename": "miniKanren-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a08e8ce4c4e492cd99ebca8fcc55cc6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37892, "upload_time": "2020-02-24T02:21:28", "upload_time_iso_8601": "2020-02-24T02:21:28.699236Z", "url": "https://files.pythonhosted.org/packages/84/81/6f58b47d043e081c8301c8608d6f939aa8ef044b6a0765046df386e263a4/miniKanren-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a5412edbc123e4468390adffdb021065", "sha256": "5aafef54342ef277d5d44f5cd21b0419e97b6c04bc8e5d49d015de5581e4ed52"}, "downloads": -1, "filename": "miniKanren-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a5412edbc123e4468390adffdb021065", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23663, "upload_time": "2020-02-24T02:21:27", "upload_time_iso_8601": "2020-02-24T02:21:27.593960Z", "url": "https://files.pythonhosted.org/packages/67/bc/3df15fdaf51de97d1377c5647ff3f5fc10665703a43786eceb2f7ba770e9/miniKanren-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a08e8ce4c4e492cd99ebca8fcc55cc6c", "sha256": "3213e21cd7af95cbb86927af42eb68aecc2e8f88e745058425add19ded9165cc"}, "downloads": -1, "filename": "miniKanren-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a08e8ce4c4e492cd99ebca8fcc55cc6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37892, "upload_time": "2020-02-24T02:21:28", "upload_time_iso_8601": "2020-02-24T02:21:28.699236Z", "url": "https://files.pythonhosted.org/packages/84/81/6f58b47d043e081c8301c8608d6f939aa8ef044b6a0765046df386e263a4/miniKanren-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:24 2020"}