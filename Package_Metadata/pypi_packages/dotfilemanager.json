{"info": {"author": "Sean Hammond", "author_email": "dotfilemanager@seanh.cc", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2.7"], "description": "dotfilemanager.py - a dotfiles manager script.\n\nThis is similar to [Steve Kemp's dotfile manager][] but I rewrote it in\nPython and tweaked the behaviour a bit.\n\n[Steve Kemp's dotfile manager]: http://blog.steve.org.uk/i_ve_got_a_sick_friend__i_need_her_help_.html\n\n`dotfilemanager link` Make a symlink in your homedir to each top-level \nfile and directory in `~/.dotfiles`.\n\n`dotfilemanager tidy` Delete any broken symlinks in your homedir.\n\n`dotfilemanager report` Report on what link or tidy would do, but don't \nactually create or delete any symlinks.\n\nOptionally you can specify the directories to link from and to as \narguments, usage:\n\n    dotfilemanager link|tidy|report [FROM_DIR [TO_DIR]]\n\n* * *\n\nThe idea is that you have some folder called the `TO_DIR` (defaults to\n`~/.dotfiles`), where you move all the dotfiles that you want to manage,\ne.g.\n\n    ~/.dotfiles/\n    ~/.dotfiles/_muttrc\n    ~/.dotfiles/_nanorc\n    ...\n\nYou can backup and synchronise this directory between multiple hosts\nusing rsync, unison, a version-control system, Dropbox, or whatever you\nwant. When you run `dotfilemanager link` it will create symlinks in a\nfolder called the `FROM_DIR` (defaults to `~`), e.g.\n\n    ~/.muttrc -> ~/.dotfiles/_muttrc \n    ~/.nanorc -> ~/.dotfiles/_nanorc\n    ...\n\nLeading underscores in the filenames in `TO_DIR` will be converted to\nleading dots for the symlinks. You can also link files without leading\nunderscores, and you can link directories too, just place them in\n`TO_DIR` and run `dotfilemanager link`.\n\nPer-host configuration is supported by putting `__hostname` at the end\nof file and directory names in `TO_DIR`. For example if `TO_DIR`\ncontains files named:\n\n    _muttrc\n    _muttrc__kisimul\n    _muttrc__dulip\n    \nThen on the host dulip a symlink `FROM_DIR/.muttrc` will be created to\n`TO_DIR/_muttrc__dulip`. On a host named kisimul `_muttrc__kisimul` will be\nlinked to. On other hosts `_muttrc` will be linked to.\n\n(To discover the hostname of your machine run `uname -n`.)\n\nTip: handle directories like `~/.config` separately\n-------------------------------------------------\n\nOn my system a lot of config files are stored in `~/.config`. I want to\nmanage some of the files in `~/.config` but not all of them. I have\nhost-specific versions of some files in `~/.config` but not others. I\nwouldn't want to move `~/.config` to `~/.dotfiles/_config` and have\ndotfilemanager make a symlink `~/.config -> ~/.dotfiles/_config` because\nthat would be putting _all_ the files in `~/.config` into `~/.dotfiles`,\nand dotfilemanager would make the same symlink for every host, if I\nwanted a host-specific version of a file in `~/.config` I'd have to put\n_another_ complete copy of the directory into `~/.dotfiles` with a\n`__hostname` at the end.\n\nWhat you can do instead is have a `~/config` directory separate from\n`~/.dotfiles`, move the files from `~/.config` that you want to manage\ninto `~/config`, make host-specific versions if you want, then run both\ncommands:\n\n    dotfilemanager.py link ~ ~/.dotfiles\n    dotfilemanager.py link ~/.config ~/config\n\nTip: override hostname with `DOTFILEMANAGER_HOSTNAME` environment variable\n------------------------------------------------------------------------\n\nIf the `DOTFILEMANAGER_HOSTNAME` environment variable is set then it is\nused instead of your real hostname to resolve hostname-specific files in\n`TO_DIR`.  This is useful for accounts on networked systems where you\nlogin to the same user account from different computers, the system\nhostname will be different each time you switch computers but you want\nto use the same config files whenever you login to this account. So just\nmake up a name for the account and set it as the value of\n`DOTFILEMANAGER_HOSTNAME`.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seanh/dotfilemanager", "keywords": "", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "dotfilemanager", "package_url": "https://pypi.org/project/dotfilemanager/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dotfilemanager/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/seanh/dotfilemanager"}, "release_url": "https://pypi.org/project/dotfilemanager/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A dotfiles manager script", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            dotfilemanager.py - a dotfiles manager script.<br><br>This is similar to [Steve Kemp's dotfile manager][] but I rewrote it in<br>Python and tweaked the behaviour a bit.<br><br>[Steve Kemp's dotfile manager]: http://blog.steve.org.uk/i_ve_got_a_sick_friend__i_need_her_help_.html<br><br>`dotfilemanager link` Make a symlink in your homedir to each top-level <br>file and directory in `~/.dotfiles`.<br><br>`dotfilemanager tidy` Delete any broken symlinks in your homedir.<br><br>`dotfilemanager report` Report on what link or tidy would do, but don't <br>actually create or delete any symlinks.<br><br>Optionally you can specify the directories to link from and to as <br>arguments, usage:<br><br>    dotfilemanager link|tidy|report [FROM_DIR [TO_DIR]]<br><br>* * *<br><br>The idea is that you have some folder called the `TO_DIR` (defaults to<br>`~/.dotfiles`), where you move all the dotfiles that you want to manage,<br>e.g.<br><br>    ~/.dotfiles/<br>    ~/.dotfiles/_muttrc<br>    ~/.dotfiles/_nanorc<br>    ...<br><br>You can backup and synchronise this directory between multiple hosts<br>using rsync, unison, a version-control system, Dropbox, or whatever you<br>want. When you run `dotfilemanager link` it will create symlinks in a<br>folder called the `FROM_DIR` (defaults to `~`), e.g.<br><br>    ~/.muttrc -&gt; ~/.dotfiles/_muttrc <br>    ~/.nanorc -&gt; ~/.dotfiles/_nanorc<br>    ...<br><br>Leading underscores in the filenames in `TO_DIR` will be converted to<br>leading dots for the symlinks. You can also link files without leading<br>underscores, and you can link directories too, just place them in<br>`TO_DIR` and run `dotfilemanager link`.<br><br>Per-host configuration is supported by putting `__hostname` at the end<br>of file and directory names in `TO_DIR`. For example if `TO_DIR`<br>contains files named:<br><br>    _muttrc<br>    _muttrc__kisimul<br>    _muttrc__dulip<br>    <br>Then on the host dulip a symlink `FROM_DIR/.muttrc` will be created to<br>`TO_DIR/_muttrc__dulip`. On a host named kisimul `_muttrc__kisimul` will be<br>linked to. On other hosts `_muttrc` will be linked to.<br><br>(To discover the hostname of your machine run `uname -n`.)<br><br>Tip: handle directories like `~/.config` separately<br>-------------------------------------------------<br><br>On my system a lot of config files are stored in `~/.config`. I want to<br>manage some of the files in `~/.config` but not all of them. I have<br>host-specific versions of some files in `~/.config` but not others. I<br>wouldn't want to move `~/.config` to `~/.dotfiles/_config` and have<br>dotfilemanager make a symlink `~/.config -&gt; ~/.dotfiles/_config` because<br>that would be putting _all_ the files in `~/.config` into `~/.dotfiles`,<br>and dotfilemanager would make the same symlink for every host, if I<br>wanted a host-specific version of a file in `~/.config` I'd have to put<br>_another_ complete copy of the directory into `~/.dotfiles` with a<br>`__hostname` at the end.<br><br>What you can do instead is have a `~/config` directory separate from<br>`~/.dotfiles`, move the files from `~/.config` that you want to manage<br>into `~/config`, make host-specific versions if you want, then run both<br>commands:<br><br>    dotfilemanager.py link ~ ~/.dotfiles<br>    dotfilemanager.py link ~/.config ~/config<br><br>Tip: override hostname with `DOTFILEMANAGER_HOSTNAME` environment variable<br>------------------------------------------------------------------------<br><br>If the `DOTFILEMANAGER_HOSTNAME` environment variable is set then it is<br>used instead of your real hostname to resolve hostname-specific files in<br>`TO_DIR`.  This is useful for accounts on networked systems where you<br>login to the same user account from different computers, the system<br>hostname will be different each time you switch computers but you want<br>to use the same config files whenever you login to this account. So just<br>make up a name for the account and set it as the value of<br>`DOTFILEMANAGER_HOSTNAME`.\n          </div>"}, "last_serial": 1434982, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d5e719eec21197c870ac33191b1c9f4e", "sha256": "57be9022b4c940d8d5ce0956707b9ae458908d4c16441f6527dbe11361ad1304"}, "downloads": -1, "filename": "dotfilemanager-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d5e719eec21197c870ac33191b1c9f4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5865, "upload_time": "2015-02-23T17:08:22", "upload_time_iso_8601": "2015-02-23T17:08:22.270504Z", "url": "https://files.pythonhosted.org/packages/8a/60/20e938b8058d7aaee55338a847829617a6f5c0f08d541bba50b829326c41/dotfilemanager-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5e719eec21197c870ac33191b1c9f4e", "sha256": "57be9022b4c940d8d5ce0956707b9ae458908d4c16441f6527dbe11361ad1304"}, "downloads": -1, "filename": "dotfilemanager-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d5e719eec21197c870ac33191b1c9f4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5865, "upload_time": "2015-02-23T17:08:22", "upload_time_iso_8601": "2015-02-23T17:08:22.270504Z", "url": "https://files.pythonhosted.org/packages/8a/60/20e938b8058d7aaee55338a847829617a6f5c0f08d541bba50b829326c41/dotfilemanager-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:13 2020"}