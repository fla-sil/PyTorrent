{"info": {"author": "Victor Semionov", "author_email": "vsemionov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Security"], "description": "# Django Blacklist\n\nBlacklist users and hosts in Django. Automatically blacklist rate-limited clients.\n\n\n## Overview\n\nDjango Blacklist allows you to block specific users and IP addresses/networks from accessing your application.\nClients can be blocked manually from the admin interface, or automatically after exceeding a request rate limit.\nThe blacklist rules are applied for a specific duration.\n\n\n## Installation\n\nTo install the package, run:\n```\n$ pip install django-blacklist\n```\n\nAdd the `blacklist` application to `INSTALLED_APPS`:\n```\nINSTALLED_APPS = [\n    ...\n    'blacklist'\n]\n```\n\nAdd the `blacklist_middleware` middleware after `AuthenticationMiddleware`:\n```\nMIDDLEWARE = [\n    ...\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'blacklist.middleware.blacklist_middleware',\n    ...\n]\n```\n\nApply the blacklist database migrations:\n```\n$ python manage.py migrate blacklist\n```\n\n\n## Usage\n\nYou can manage the blacklist rules from the admin. Changes take effect after restarting the server.\nA rule can target a user or an IP address.\nYou can also target IP networks (ranges) by specifying the optional prefixlen field (number of network prefix bits).\nEach rule has a specific duration. After that duration passes, rules expire automatically, without a restart.\nWhen a request is blocked due to a matching rule:\n* Status 400 (bad request) is returned.\n* An error template is rendered.\n  You can specify a custom one (see below), or use the one for status 400.\n* A message is logged\n  (warning from logger `blacklist.middleware` for custom templates, or error from logger `django.security` otherwise).\n\n### Removing Expired Rules\n\nExpired rules are not automatically removed from the database.\nThey can be cleaned up with the included management command `trim_blacklist`:\n```\n$ python manage.py trim_blacklist [-c <created_days>] [-e <expired_days>]\n```\nThe options `-c` and `-e` specify the minimum ages of creation and expiry, respectively.\n\n\n## Automatic Blacklisting\n\nClients can be blacklisted automatically, after exceeding a specified request rate limit.\nThis feature requires [django-ratelimit](https://github.com/jsocol/django-ratelimit).\n\nFirst, rate-limit a view by applying the `@ratelimit` decorator. Make sure to set `block=False`.\nThen, blacklist rate-limited clients by adding the `@blacklist_ratelimited` decorator. Specify the blacklist duration.\nFor example:\n```\nfrom datetime import timedelta\nfrom ratelimit.decorators import ratelimit\nfrom blacklist.ratelimit import blacklist_ratelimited\n\n@ratelimit(key='user_or_ip', rate='50/m', block=False)\n@blacklist_ratelimited(timedelta(minutes=30))\ndef index(request):\n    ...\n```\n\nAutomatic rules take effect immediately, without a restart.\nIf the request comes from an authenticated user, the rule will target that user.\nOtherwise, it will target their IP address.\n***\nNote: The client IP address is taken from the `REMOTE_ADDR` value of `request.META`.\nIf your application is behind one or more reverse proxies, this will, by default,\nalways be the address of the nearest proxy.\nTo avoid blacklisting all clients, you can set `REMOTE_ADDR` from the `X-Forwarded-For` header in middleware.\nHowever, keep in mind that this header can be forged to bypass the rate limits.\nTo counter that, you can use the last address in that header.\nIf you are behind two proxies, use the second to last, etc.\n***\n\n`@blacklist_ratelimited` accepts two arguments: `(duration, block=True)`.\n* `duration` can be a `timedelta` object, or a tuple of two separate durations\n(for user-based and IP-based rules).\n* `block` specifies if the request should be blocked immediately, or passed to the view.\n\nAutomatic rules will have a comment that contains the ID of the request, which triggered the creation of the rule,\nand the \"request line\".\nThe request ID is added only if available. Django does not generate request IDs.\nFor that purpose, you can install [django-log-request-id](https://github.com/dabapps/django-log-request-id).\n\n\n## Settings\n\n* `BLACKLIST_ENABLE` - whether blacklisted clients should be blocked,\n  and rate-limited clients should be blacklisted; default: `True`\n* `BLACKLIST_RATELIMITED_ENABLE` - whether rate-limited clients should be automatically blacklisted;\n  requires `BLACKLIST_ENABLE`; default: `True`\n* `BLACKLIST_TEMPLATE` - name of a custom error template to render to blocked clients;\n  its context will contain `request` and `exception`;\n  set to `None` to use the template for status 400; default: `None`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vsemionov/django-blacklist", "keywords": "django blacklist ratelimit firewall", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-blacklist", "package_url": "https://pypi.org/project/django-blacklist/", "platform": "", "project_url": "https://pypi.org/project/django-blacklist/", "project_urls": {"Homepage": "https://github.com/vsemionov/django-blacklist"}, "release_url": "https://pypi.org/project/django-blacklist/0.3.0/", "requires_dist": ["Django"], "requires_python": "", "summary": "Blacklist users and hosts in Django. Automatically blacklist rate-limited clients.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Blacklist</h1>\n<p>Blacklist users and hosts in Django. Automatically blacklist rate-limited clients.</p>\n<h2>Overview</h2>\n<p>Django Blacklist allows you to block specific users and IP addresses/networks from accessing your application.\nClients can be blocked manually from the admin interface, or automatically after exceeding a request rate limit.\nThe blacklist rules are applied for a specific duration.</p>\n<h2>Installation</h2>\n<p>To install the package, run:</p>\n<pre><code>$ pip install django-blacklist\n</code></pre>\n<p>Add the <code>blacklist</code> application to <code>INSTALLED_APPS</code>:</p>\n<pre><code>INSTALLED_APPS = [\n    ...\n    'blacklist'\n]\n</code></pre>\n<p>Add the <code>blacklist_middleware</code> middleware after <code>AuthenticationMiddleware</code>:</p>\n<pre><code>MIDDLEWARE = [\n    ...\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'blacklist.middleware.blacklist_middleware',\n    ...\n]\n</code></pre>\n<p>Apply the blacklist database migrations:</p>\n<pre><code>$ python manage.py migrate blacklist\n</code></pre>\n<h2>Usage</h2>\n<p>You can manage the blacklist rules from the admin. Changes take effect after restarting the server.\nA rule can target a user or an IP address.\nYou can also target IP networks (ranges) by specifying the optional prefixlen field (number of network prefix bits).\nEach rule has a specific duration. After that duration passes, rules expire automatically, without a restart.\nWhen a request is blocked due to a matching rule:</p>\n<ul>\n<li>Status 400 (bad request) is returned.</li>\n<li>An error template is rendered.\nYou can specify a custom one (see below), or use the one for status 400.</li>\n<li>A message is logged\n(warning from logger <code>blacklist.middleware</code> for custom templates, or error from logger <code>django.security</code> otherwise).</li>\n</ul>\n<h3>Removing Expired Rules</h3>\n<p>Expired rules are not automatically removed from the database.\nThey can be cleaned up with the included management command <code>trim_blacklist</code>:</p>\n<pre><code>$ python manage.py trim_blacklist [-c &lt;created_days&gt;] [-e &lt;expired_days&gt;]\n</code></pre>\n<p>The options <code>-c</code> and <code>-e</code> specify the minimum ages of creation and expiry, respectively.</p>\n<h2>Automatic Blacklisting</h2>\n<p>Clients can be blacklisted automatically, after exceeding a specified request rate limit.\nThis feature requires <a href=\"https://github.com/jsocol/django-ratelimit\" rel=\"nofollow\">django-ratelimit</a>.</p>\n<p>First, rate-limit a view by applying the <code>@ratelimit</code> decorator. Make sure to set <code>block=False</code>.\nThen, blacklist rate-limited clients by adding the <code>@blacklist_ratelimited</code> decorator. Specify the blacklist duration.\nFor example:</p>\n<pre><code>from datetime import timedelta\nfrom ratelimit.decorators import ratelimit\nfrom blacklist.ratelimit import blacklist_ratelimited\n\n@ratelimit(key='user_or_ip', rate='50/m', block=False)\n@blacklist_ratelimited(timedelta(minutes=30))\ndef index(request):\n    ...\n</code></pre>\n<p>Automatic rules take effect immediately, without a restart.\nIf the request comes from an authenticated user, the rule will target that user.\nOtherwise, it will target their IP address.</p>\n<hr>\n<p>Note: The client IP address is taken from the <code>REMOTE_ADDR</code> value of <code>request.META</code>.\nIf your application is behind one or more reverse proxies, this will, by default,\nalways be the address of the nearest proxy.\nTo avoid blacklisting all clients, you can set <code>REMOTE_ADDR</code> from the <code>X-Forwarded-For</code> header in middleware.\nHowever, keep in mind that this header can be forged to bypass the rate limits.\nTo counter that, you can use the last address in that header.\nIf you are behind two proxies, use the second to last, etc.</p>\n<hr>\n<p><code>@blacklist_ratelimited</code> accepts two arguments: <code>(duration, block=True)</code>.</p>\n<ul>\n<li><code>duration</code> can be a <code>timedelta</code> object, or a tuple of two separate durations\n(for user-based and IP-based rules).</li>\n<li><code>block</code> specifies if the request should be blocked immediately, or passed to the view.</li>\n</ul>\n<p>Automatic rules will have a comment that contains the ID of the request, which triggered the creation of the rule,\nand the \"request line\".\nThe request ID is added only if available. Django does not generate request IDs.\nFor that purpose, you can install <a href=\"https://github.com/dabapps/django-log-request-id\" rel=\"nofollow\">django-log-request-id</a>.</p>\n<h2>Settings</h2>\n<ul>\n<li><code>BLACKLIST_ENABLE</code> - whether blacklisted clients should be blocked,\nand rate-limited clients should be blacklisted; default: <code>True</code></li>\n<li><code>BLACKLIST_RATELIMITED_ENABLE</code> - whether rate-limited clients should be automatically blacklisted;\nrequires <code>BLACKLIST_ENABLE</code>; default: <code>True</code></li>\n<li><code>BLACKLIST_TEMPLATE</code> - name of a custom error template to render to blocked clients;\nits context will contain <code>request</code> and <code>exception</code>;\nset to <code>None</code> to use the template for status 400; default: <code>None</code></li>\n</ul>\n\n          </div>"}, "last_serial": 6302921, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "157558275e6c14f153fb919611b4ddba", "sha256": "cd8555cfa139d117a3192909489a0b7da6d5907b112315553d1aebae2dc74d78"}, "downloads": -1, "filename": "django_blacklist-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "157558275e6c14f153fb919611b4ddba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7591, "upload_time": "2019-06-13T06:43:44", "upload_time_iso_8601": "2019-06-13T06:43:44.078786Z", "url": "https://files.pythonhosted.org/packages/ac/4e/c2ba8a9e4f631a0d1b686d124f784d09cab4e76fd8323917f8df8fe961b7/django_blacklist-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e09a4bb6c65f8032ab591c7fc75ca38", "sha256": "5b151c541b6dfd64c86f450d513177bc3ad6946ffeefed2222918e7169568f45"}, "downloads": -1, "filename": "django-blacklist-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5e09a4bb6c65f8032ab591c7fc75ca38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5459, "upload_time": "2019-06-13T06:43:46", "upload_time_iso_8601": "2019-06-13T06:43:46.143998Z", "url": "https://files.pythonhosted.org/packages/5d/c1/624e062a6f739fcaf9c0617501387156340a01f4ea9e73207b26bf53747e/django-blacklist-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b681edc9ef326c09f157cacd807cc37b", "sha256": "1a7a292b0b3e84ba9fa0d8737e0dad863f11e2841e0e4587019f9f53d5b551fd"}, "downloads": -1, "filename": "django_blacklist-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b681edc9ef326c09f157cacd807cc37b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7648, "upload_time": "2019-06-13T08:20:30", "upload_time_iso_8601": "2019-06-13T08:20:30.416902Z", "url": "https://files.pythonhosted.org/packages/b7/43/4e46355c47d96db1b4ddf8d75c7973abaa12b1c64f47dbb6e8804ee3842e/django_blacklist-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b70a6b004bb1378e49c2368138c74e1", "sha256": "d930a711ef5be93f82d99aa7fae386127e1b1711aa8cee77bc06fdfc95708b5c"}, "downloads": -1, "filename": "django-blacklist-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1b70a6b004bb1378e49c2368138c74e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5487, "upload_time": "2019-06-13T08:20:32", "upload_time_iso_8601": "2019-06-13T08:20:32.042972Z", "url": "https://files.pythonhosted.org/packages/d5/b5/cfe2c547eb4dfcf0b69722f9f147a64f65687de87bae1a0c07cf14e06ca9/django-blacklist-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1a1e917343bd1a0d50bba9190711f230", "sha256": "59ec24a088ba243208f9f8062449f43ebc101f3b952465f75ee711cc26eab3b2"}, "downloads": -1, "filename": "django_blacklist-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1a1e917343bd1a0d50bba9190711f230", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8332, "upload_time": "2019-06-22T16:01:00", "upload_time_iso_8601": "2019-06-22T16:01:00.337926Z", "url": "https://files.pythonhosted.org/packages/f4/61/65df569174bf71d039ce21f2af41a7e3c1fa1c96fb2774888298704a55db/django_blacklist-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32174b3cb4a6bb7268a7ada6f9e7b39d", "sha256": "2ba4586594488015e2464f6626533cc8e4217cf30d47cb33cb3c6461b1660706"}, "downloads": -1, "filename": "django-blacklist-0.1.2.tar.gz", "has_sig": false, "md5_digest": "32174b3cb4a6bb7268a7ada6f9e7b39d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5914, "upload_time": "2019-06-22T16:01:01", "upload_time_iso_8601": "2019-06-22T16:01:01.643267Z", "url": "https://files.pythonhosted.org/packages/c8/9d/311708113da10fcc0234f16f4ce34135626f08d5312d6ecbea09ace0e7dc/django-blacklist-0.1.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e15799fec3352298cbf772e5f5954f36", "sha256": "c2ee7b926a4932872c779135601231d9871185deb41a761b95f5ba58200c944c"}, "downloads": -1, "filename": "django_blacklist-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e15799fec3352298cbf772e5f5954f36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8725, "upload_time": "2019-12-01T19:50:12", "upload_time_iso_8601": "2019-12-01T19:50:12.738704Z", "url": "https://files.pythonhosted.org/packages/ed/ca/51568e1f7608f9e4e61777002b0ec882fdeabba48457f8bb7212bd973390/django_blacklist-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "922ca96f739453f32842e43dd7cf72e9", "sha256": "c0f528955ce75c35321b6b28ff3f474dc931fb85f1525ab4c5c709181186a7c5"}, "downloads": -1, "filename": "django-blacklist-0.2.1.tar.gz", "has_sig": false, "md5_digest": "922ca96f739453f32842e43dd7cf72e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6268, "upload_time": "2019-12-01T19:50:14", "upload_time_iso_8601": "2019-12-01T19:50:14.547125Z", "url": "https://files.pythonhosted.org/packages/87/ef/5aaf1970e5f7d2c2df6ff37baf2135cd6685019cff1085902f9ac86148f3/django-blacklist-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "395614a08c89b5abdb10b0f6bb9e74a7", "sha256": "a7f0f490fc808de6bf506f69327255217cd11ef40756ec515b6e476ad0bd7dc9"}, "downloads": -1, "filename": "django_blacklist-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "395614a08c89b5abdb10b0f6bb9e74a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8783, "upload_time": "2019-12-01T20:43:45", "upload_time_iso_8601": "2019-12-01T20:43:45.562941Z", "url": "https://files.pythonhosted.org/packages/e4/a0/ae80da9b654425ce753497f5b43b7e75ff74e9431f10ce8f8fcccaa9c392/django_blacklist-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7198fde51ebc2c6e8409e1b82d4f2080", "sha256": "0401be04a8eb2e79c2c875655c6701157d3485627b0d7949d37c1d67944bc057"}, "downloads": -1, "filename": "django-blacklist-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7198fde51ebc2c6e8409e1b82d4f2080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6295, "upload_time": "2019-12-01T20:43:47", "upload_time_iso_8601": "2019-12-01T20:43:47.363110Z", "url": "https://files.pythonhosted.org/packages/e9/e3/e104c029258ec8826eb828b3cee5e6e8327da3ae87a4c757afe6ab270317/django-blacklist-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a85df0a16c414a2f58687269e983d630", "sha256": "4cb95c74dd93ecb21d8707245c7e61e25eef45aa71c9f94246fe9ad6a52098f4"}, "downloads": -1, "filename": "django_blacklist-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a85df0a16c414a2f58687269e983d630", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8833, "upload_time": "2019-12-14T12:32:02", "upload_time_iso_8601": "2019-12-14T12:32:02.654089Z", "url": "https://files.pythonhosted.org/packages/21/ba/fb38148942a22fa131c8c892037b1cc8d2bac1356e4be44882309bd80224/django_blacklist-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbf35b3d9f498e19c13be069023a3ad2", "sha256": "ff57415961b2c37772f2c700c7ff3cf619d5c359c75e8eaedf163aa2b9a8eae5"}, "downloads": -1, "filename": "django-blacklist-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cbf35b3d9f498e19c13be069023a3ad2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6354, "upload_time": "2019-12-14T12:32:04", "upload_time_iso_8601": "2019-12-14T12:32:04.093150Z", "url": "https://files.pythonhosted.org/packages/c9/ba/72b63c4f8b1bbb8b774bf57003506d628573482413b6a2be314787d29261/django-blacklist-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a85df0a16c414a2f58687269e983d630", "sha256": "4cb95c74dd93ecb21d8707245c7e61e25eef45aa71c9f94246fe9ad6a52098f4"}, "downloads": -1, "filename": "django_blacklist-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a85df0a16c414a2f58687269e983d630", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8833, "upload_time": "2019-12-14T12:32:02", "upload_time_iso_8601": "2019-12-14T12:32:02.654089Z", "url": "https://files.pythonhosted.org/packages/21/ba/fb38148942a22fa131c8c892037b1cc8d2bac1356e4be44882309bd80224/django_blacklist-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbf35b3d9f498e19c13be069023a3ad2", "sha256": "ff57415961b2c37772f2c700c7ff3cf619d5c359c75e8eaedf163aa2b9a8eae5"}, "downloads": -1, "filename": "django-blacklist-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cbf35b3d9f498e19c13be069023a3ad2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6354, "upload_time": "2019-12-14T12:32:04", "upload_time_iso_8601": "2019-12-14T12:32:04.093150Z", "url": "https://files.pythonhosted.org/packages/c9/ba/72b63c4f8b1bbb8b774bf57003506d628573482413b6a2be314787d29261/django-blacklist-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:25 2020"}