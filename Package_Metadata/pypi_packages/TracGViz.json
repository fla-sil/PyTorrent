{"info": {"author": "Olemis Lang", "author_email": "olemis+trac@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Plugins", "Environment :: Web Environment", "Framework :: Trac", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Other Audience", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Natural Language :: Spanish", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Topic :: Database", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Bug Tracking", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: User Interfaces", "Topic :: Software Development :: Widget Sets"], "description": "Trac Data Sources for Google Visualization API. Embed iGoogle gadgets using WikiFormatting.\n\nThis package (plugin) provides components so that Trac be able to\nuse widgets and related technologies provided by Google.\n\n- It allows to feed data managed by Trac to widgets based on Google \n  Visualization API. \n- It allows embedding iGoogle Gadgets in wiki pages using WikiFormatting.\n\nCopyright 2009-2011 Olemis Lang <olemis at gmail.com>\nLicensed under the Apache License, Version 2.0 \n\n\n\nWhat's new in version 1.4.2\n---------------------------\n\n- #103 - Bug fixed: PIVOT fails for calculated columns with aggregate functions\n\n- #66 - Bug fixed: Unicode values in ticket list schema\n\n- #105 - Bug fixed:  Unicode values in date constants schema\n\n- #106 - Bug fixed:  Type error in dateDiff\n\n- #111 - Bug fixed:  Error executing scalar function `now()`\n\n- #88 - Wiki page text and size in GViz data source\n\n- New! #92 - GViz QL : Implement PIVOT clause\n\n- New! #112 - Integer division in GViz queries\n\n- #113 - Bug fixed:  Unknown: error in HTML cells\n\n- #67 Implement TracLinks for Ohloh widget gadgets\n\n- #104 - Bug fixed:  Empty cells messed up by GViz MoinMoin encoder\n\n- #114  URL escape plus sign in query URL\n\n- Migrate `tracgviz.testing` to a new package `dutest-trac`\n\n- Remove relative import statements\n\n- Error message for GViz content providers when guessed mimetype is still `None`\n\n- Move `dutest` to `tests_require` rather than `install_requires`.\n\n- New! Naive typecasts in CSV to GViz MIME converter.\n\n- URL column in milestone GViz provider.\n\n\nWhat's new in version 1.4.1\n---------------------------\n\n- New! The plugin is easy-installable. Modules like `dutest`,  \n  `TracXmlRpcPlugin` and `Pygments` are external dependencies.\n\n- New! Simple test cases (doctests) have been written for RPC handlers \n  implemented by TracGViz : `TimelineRPC`, `ReportRPC`. They are run \n  using a minimalistic framework built on top of `dutest` and allowing \n  to (efficiently) write readable doctests for Trac plugins.\n\n- New! It is possible to select the columns to be returned, their \n  order, and labels. There is partial support for `SELECT` statement, \n  since only column names are allowed so far, and full support for \n  `LABEL` clause.\n\n- New! Added full support for limitting the number of returned rows, \n  as well as skipping a given number of first rows (i.e. `OFFSET` and \n  `LIMIT` clauses in GViz QL).\n\n- New! A GViz QL error message is sent back to the caller if the data \n  source doesn't support the base table specified in `FROM` clause. \n  This clause has been deprecated in recent versions of the API.\n\n- New! Calculated columns (e.g. arithmetic expressions) in \n  `LABEL` and `FORMAT` clauses follow a syntax simlar to variable names\n  e.g. `a + sum(b)`\n\n- New! `FORMAT` clause powered by PyICU.\n\n- New! `ORDER BY` clause supported in queries.\n\n- New! `GROUP BY` clause supported in queries.\n\n- New! Added data source and infrastructure to convert files containing \n  tabular data in different formats to the JSON representation \n  defined by Google Visualization API. It is integrated with Trac \n  MIME conversions. The contents may be retrieved from anywhere if \n  the right plugin is implemented. \n  \n- New! Added GViz provider to convert contents of files under version \n  control to GViz Data Tables (provided that a MIME conversion is \n  available). Further optimizations have been deferred.\n\n- New! Added GViz provider to convert files attached to Trac resources \n  in order to obtain GViz Data Tables (provided that a MIME conversion \n  is available). Especially implemented to help users like \n  Robert Obertholtzer. Thanks for the feedback and help !\n\n- New! Included helper to convert CSV files under version control to \n  GViz API JSON format. Especially implemented to help users like \n  Robert Obertholtzer. Thanks for the feedback and help !\n\n- New! Added `GVizTableMacro`, a macro that embeds in TracWiki pages \n  the data tables returned by *LOCAL* GViz data providers (i.e. \n  instances of `IGVizDataProvider`). It is possible to include custom \n  parameters (e.g. `tq` for queries written using Google \n  Visualization API Query Language). The table contents are displayed \n  using HTML tables, hence neither gadgets nor internet connection \n  are needed in this case.\n\n- New! Implemented TSV Response Format encoder. It is compliant with \n  the specification and response is encoded using UTF-16 charset. \n  Nonetheless `outFileName` parameter is not supported yet.\n\n- New! Added sample TracGViz providers. They illustrate how easy is \n  to implement custom GViz providers in order to offer your data to \n  the world.\n\n- New! Added support for `HMAC` (`RFC 2104`) hash by using `hmac` module.\n\n- New! GViz providers list rendered on accessing `/gviz` path.\n\n- New! Support for parsing other (more complex) expressions in `select` \n  clause (e.g. aggregate functions, -date- constants).\n\n- New! Support for parsing `WHERE` clause in detail\n\n- New! Support for parsing more complex expressions in `ORDER BY` clause \n  (e.g. aggregate functions).\n\n- New! Constants accepted in `select` clause.\n\n- New! Support for parsing and evaluating scalar functions in `select` clause.\n\n- New! Support for parsing and evaluating expressions in `select` clause.\n\n- New! GViz QL grammar to include SQL clauses and refactor \n  current parsing solution.\n\n- Column type checks may trigger error responses on missmatch.\n\n- Fix GViz providers index, broken using Trac=1.0\n\n- Apache(TM) Bloodhound web UI enhancements\n\n- Upgrade RPC providers for Trac=1.0 and Apache(TM) Bloodhound.\n\n- CSV and TSV encoders are implemented by using `csv` module in stdlib.\n\n- Include helper to convert CSV attachments to GViz API JSON format.\n\n- It is possible to create reports from remote via XML-RPC API.\n\n- Report SQL is not shown in `ReportRPC.get` if client is not granted \n  `REPORT_SQL_VIEW` permission.\n\n- Added support in the test suite for adding and loading test data.\n\n- Test cases written for all supported (and unsupported) GVizQL \n  features.\n\n- Some test cases written for data sources included in TracGViz 1.3.4 \n  that are not about version control. Much more work is needed :(\n\n- The plugin works even if `Pygments` is not installed. In that case \n  only GViz QL will be missing and thereby all other features will be \n  available.\n\n- Further precautions to ensure that responses are UTF-8 encoded, \n  unless otherwise stated.\n\n- Added support for GViz queries (i.e. `tq` parameter) in GViz \n  TracLinks providers.\n\n- Included provider documentation in a resource file.\n\n- It is possible to iterate over rows and values of `DataTable` \n  instances.\n\n- Bug fixed: Relative URL converted into absolute in \n  `ReportRPC.execute` only if needed.\n\n- Bug fixed: Data provided by `GVizChagesetProvider` in columns `chg` \n  and `target` were exchanged. Now they are in the right place.\n\n- Bug fixed: Details about the latest changeset are shown by \n  `GVizChagesetProvider` when only `since` and `until` parameters are \n  specified.\n\n- Bug fixed: Enhanced compatibilty with Trac XmlRpcPlugin=1.0.6 and \n  the way it handles datetime values. Errors like \n  `TypeError: unsupported operand type(s) for -: instance and datetime.datetime`\n  and `AttributeError: datetime.datetime object has no attribute value`\n  do not happen anymore.\n\n- Bug fixed #57 : `ValueError` was raised (sometimes) in \n  `GadgetAliases.__init__` when parsing aliases in config file. Not \n  anymore.\n\nWhat's new in version 1.3.4\n---------------------------\n\n- New ! `GVizQuickJumpEntries` offers data about interesting places \n  in the repository (a.k.a. `quick jump entries`). This includes \n  tags and branches, for instance. The data is provided by \n  VersionControlRPC.\n\n- Bug fixed: Formerly all revisions were included in the revision \n  log if only individual revisions were requested. Now the result \n  sets include just the information for the particular changesets \n  supplied in `rev` parameter. Tested with both `hg` and `svn`.\n\n- Bug fixed: Exception with message `Invalid list index` was raised when\n  using Subversion backend when requesting the log for individual \n  revisions. This works OK now for both `hg` and `svn`.\n\n- Bug fixed: Wrong default value for `fmt` parameter in \n  `GVizChangesetDetails`. Now it's OK.\n\n- Bug fixed: Formerly undocumented column in `GVizTimelineFilters` \n  provider now contains appropriate description.\n\n- WikiFormatting may be used to document the data sources. It may be \n  included in the documentation written for parameters, columns, and \n  the data source itself.  \n\n- Bug fixed: Documentation for providers having dynamic schemas was \n  not previously rendered. This has been fixed and a new property \n  has been added in docs to highlight whether the data source returns \n  always the same columns or if they can vary depending upon run-time \n  conditions.\n\n- Milestones may be filtered by name by providing a UNIX pattern in \n  `filter_by` parameter.\n\n- UNIX filename patterns are compiled using REs for better performance.\n\n- Bug fixed: When using Hg backend, the code in version 1.3.3 in \n  order to revisions iterator (VCS RPC) entered infinite loop (under \n  certain conditions apparently related to branching or version \n  numbers). This doesnt happen anymore.\n\n- Bug fixed: Now VCS RPC retrieves all changesets when using Hg backend.\n  The implementation doesn't guess anymore the revision order and\n  retrieves all that information directly from the underlying VCS\n  connector in use. The former algorithm was weak because it only\n  considered the first parent of a given revision. Therefore many\n  others (especially all those in different branches) were missing \n  from the result set.\n\n- Individual revisions (and not just intervals like before) may be \n  selected in `GVizChangesets` (i.e. to obtain the revision log).\n\n- Bug fixed: As a consequence of the changes introduced in version \n  1.3.3 (especially in ReportRPC and VersionControlRPC) together \n  with `bug #5586@TH.org`_ in XmlRpcPlugin, made impossible \n  to render the main displaying documentation about the different \n  RPC handlers. Both docstrings have been modified and everything \n  is back to normal right now.\n\n.. _bug #5586@TH.org: http://trac-hacks.org/ticket/5586\n\nWhat's new in version 1.3.3\n---------------------------\n\n- New ! Since version 1.3.3 macro aliases are supported so that \n  embedding iGoogle gadgets in wiki pages be even easier. Aliases are \n  names of macros configured using `gadgets.aliases` option which \n  are shortcuts to use iGoogleGadget with a fixed name. For example, \n  if the aforementioned option is set to \n  `MotionChart=http://www.google.com/ig/modules/motionchart.xml`\n  then the following snippets are equivalent (so users wont need to\n  remember gadget URLs anymore but names they are familiar with ;). \n\n    [[iGoogleGadget(url=http://www.google.com/ig/modules/motionchart.xml, \n    _table_query_url=http://spreadsheets.google.com/tq?range=B3%3AG17&key=1234, \n    _table_query_refresh_interval=5)]]\n\n    [[iGoogleGadget(url=gadget:google:modules:motionchart, \n    _table_query_url=[gviz:google:sheet:1234:B3-G17], \n    _table_query_refresh_interval=5)]]\n\n    [[MotionChart(_table_query_url=[gviz:google:sheet:1234:B3-G17], \n    _table_query_refresh_interval=5)]]\n\n- Aliases for Google's visualization gadgets are offered by default.\n\n- TracLinks expressions are supported in config options used to \n  define iGoogleGadget macro aliases.\n\n- New ! GVizTicketList now lists the tickets created in a Trac \n  environment together with their attributes. Custom fields, if \n  available, are also included in separate columns. That's why the \n  columns in the data tables returned as well as their order can \n  change from time to time, depending on the plugins enabled in the \n  particular environment and other factors.\n\n- New ! ReportRPC now provides an interface to Trac's report module\n  via XML-RPC protocol. So far report execution is only supported for \n  reports defined by using SQL and TracQuery syntax. This means that \n  saved custom queries specified using URLs are not supported yet, \n  but will be (hopefully) in a near future. In the mean time a \n  `NotImplementedError` exception is raised.\n\n- New ! GVizAvailableReports now lists available reports and their \n  data, including report ID, title, description and the query string \n  used to select the tickets to be included in each report.\n\n- Important ! Architectural change. From now on Request objects \n  can be supplied in to IGVizDataProvider.get_data_schema method. \n  This change allows to implement more dynamic data providers \n  since schemas can vary depending upon the run-time values provided \n  for some parameters.\n\n- New ! GVizReportProvider now offers the data included in custom Trac \n  Reports defined by Trac users. This is a very dynamic data \n  provider, and also the first example where schema can change \n  depending upon the report specification.\n\n- New ! VersionControlRPC now provides an interface to Trac's Version \n  Control API via XML-RPC protocol. Therefore information about files \n  in the project's repository and also about changesets is available \n  using standard protocols. It is posible to list files and folders \n  (`ls`) recursively with depth limit and filters written like \n  UNIX filename patterns. File attributes (e.g. size, content type, \n  ...), data about revisions (e.g. message, author, ...) in a given \n  (time) interval, file and folder history, and full description of \n  changes performed at a given revision, are some of the features \n  supported so far. Looking forward for further useful data to \n  be published ! This feature was \"tested\" using Mercurial SCM (`hg`) \n  and Subversion (`svn`), but the code *SHOULD* work as long as \n  connectors fully compatible with Trac's Version Control API be used. \n  However the different approaches taken by different VCS may lead to \n  wrong behaviors. So if you find any bug, please let me know.\n\n- New ! GVizSourceFiles now offers information about individual \n  files and those located in a folder. This data source supports filters \n  (i.e. UNIX filename patterns), and recursive lookup with optional \n  depth value. It is also possible to get the data for an specific \n  revision. The results are mostly file attributes (e.g. size, \n  extension, content type ...), but the actual values depend upon \n  the capabilities supported by the specific repository connector in \n  use.\n\n- New ! GVizSourceFileHistory now makes available the modifications \n  performed on  a group of files during a given time interval. \n  Boundary values may be either datetime values or revision \n  identifiers (supported by the specific repository connector). \n  Clients'll get back detailed information about the changes performed \n  on the given files in the different revisions together with the \n  file's attributes at that specific time.\n  This data source supports filters (i.e. UNIX filename \n  patterns) as well as recursive lookup with optional depth value. \n  Multiple datetime formats are supported as usual.\n\n- New ! GVizChangesetDetails now provides a detailed report \n  containing all the individual changes comitted at \n  once onto the repository and recorded in separate changesets. It \n  is possible to specify multiple changeset identifiers (supported by \n  the specific repository connector) (and | or) time intervals.\n  Boundary values may be either datetime values or changeset\n  identifiers.\n\n- New ! GVizChangesets now provides meta-data describing the \n  different changesets committed to the repository related to a \n  Trac environment (i.e. revision ID, messages, author, and date). It \n  is possible to limit the results by specifying a time interval.\n  Boundary values may be either datetime values or changeset\n  identifiers.\n\n- All the data providers interacting with the repository have been \n  \"tested\" using the connector for Mercurial SCM (i.e. `hg`). In this \n  case there are a few open issues that seem to be related with the \n  lack of support in TracMercurial for `copy` events (but it's not a \n  definitive conclusion). The current implementation *SHOULD* work \n  with other connectors compatible with Trac's Version Control API, \n  but THERE IS NO WARRANTY OF ANY KIND if you use another VCS. \n  However if your connector is not causing any trouble then you the \n  use of the aforementionned data sources *SHOULD NOT* cause any \n  damage to both your environment and your repository. Further tests \n  will be performed in the future but there's no clear schedule. \n  You could be the first one to test them. Suggestions, patches and \n  further feedback is welcome in order to overcome the actual \n  limitations. \n\n- Added api.IHashLibrary interface so that plugins and extensions can \n  contribute with other secure hash, message digest and checksum \n  algorithms in order to compute `sig` field in GViz API responses.\n\n- All the code needed to support secure hash algorithms provided by \n  `hashlib` module can be found from now on in class `stdhash.HashLib`.\n  It supports the following methods : `sha1`, `sha224`, `sha256`, \n  `sha384`, `sha512`, and `md5`. Additional algorithms may also be \n  available depending upon the OpenSSL library that Python uses on \n  your platform.\n\n- All the code needed to support checksum algorithms provided by \n  `zlib` module can be found from now on in class `stdhash.ZLibChecksum`.\n  It supports the following methods : `adler32`, `crc32`\n\n- Minor adjustments to adapt support for `sig` parameter to the \n  recent introduction of `IHashLibrary` interface.\n\n- Bug fixed: Formerly `sig` value was included in GViz API response \n  only if both, the hash method was setup and the `sig` parameter was \n  set in the request. From now on only the first condition has to \n  be met in order to send the hash value back to the client.\n\n- Bug fixed: Minor bug while displaying instances of `datetime` \n  using plain text encoders.\n\n- Support in `DataTable.SingleValueToJS` for automatic \n  conversion of instances of `xmlrpclib.DateTime` and `int` values \n  (POSTFIX timestamp) into instances of `datetime`. This allows to \n  supply such values in columns having types `date`, `datetime`, and \n  `timeofday` (not possible with gviz_api 1.0).\n\n- Support in `DataTable.SingleValueToJS` for automatic \n  conversion of unicode strings using utf-8 encoding. This allows to \n  supply such strings in columns having `string` type (not possible \n  with gviz_api 1.0).\n\n- Module `rpc` has been added to group all RPC handlers offered \n  by `TracGViz` package.\n\n- Documentation added to highlight the use of \n  timeline.ticket_show_details option in trac.ini in order to \n  retrieve all events related to ticket changes (e.g. attachments).\n\n- Bug fixed: TimelineRPC doesnt fail when filter definitions\n  provided by instances of ITimelineEventProvider interface contain \n  a third (i.e. `checked`) element. It also handles unicode \n  characters appropriately.\n\n- MoinMoin encoder now returns `text/x.moin.wiki` MIME type.\n\n- Few optimizations and refactorings (e.g. unnecessary imports have \n  been removed) ... bah!\n\nWhat's new in version 1.3.2\n---------------------------\n\n- TracGVizSystem now implements IPermissionRequestor interface. This \n  means that Trac admins can use `GVIZ_VIEW` permission to control \n  which users may access GViz data sources or not. On accessing such \n  data, if the aforementioned permission is not granted to the user \n  performing the request then a GViz API error response is returned \n  to the caller with `reason` set to `user_not_authenticated` in case \n  of anonymous access, or `access_denied` otherwise.\n\n- Now absolute URLs are returned while expanding TracLinks \n  expressions found used inside iGoogleGadget macro. Formerly this \n  prevented the iGoogle container to find data inside the project \n  environment in case TracLinks expressions were used.\n\n- Add support for `sheet` option in GoogleDocsConnector in order \n  to have links to data inside an specific sheet provided its name. \n  Hence, links like the following are supported from now on: \n  https://spreadsheets.google.com/tq?key=ABCD&sheet=Sheet1,\n  https://spreadsheets.google.com/tq?key=ABCD&sheet=Sheet+2. \n  Sheet names may have alphanumeric characters as well as whitespaces.\n  Syntax -> \n  `gviz:google:sheet:<spreadsheet_id>[:[<sheet_name>][:<top_cell>-<bottom_cell>]][?[headers=<number>]]`\n\n- Formerly values in columns having types `date`, `datetime` or \n  `timeofday` were shown in non-JSON responses (e.g. HTML) \n  in a way similar to `new Date(2009, 12, 2)`. Now they are rendered \n  using the following formats `%Y-%m-%d`, `%Y-%m-%d %H:%M:%S`, \n  `%H:%M:%S` respectively.\n\n- New ! The following (non-standard) formats are supported using \n  special format identifiers for `out` option in `tqx` parameter:\n  MoinMoin wiki tables (class extfmt.GVizMoinEncoder `out:moin`).\n\n- Every wiki GViz provider now supports name expansion using Unix \n  shell-style wildcards. This means that if such patterns are \n  specified for `name` parameter either once or multiple times, then\n  all those wiki pages for which a match is found will be included in \n  the result set \n  (e.g. `/gviz/wiki/index?tqx=out:html&all&name=Wiki*&name=TracN*`\n  will return information about all the versions of the wiki pages \n  starting with either `Wiki` or `TracN` prefixes, such as \n  `WikiNewPage`, `WikiHtml`, `WikiProcessors`, \n  `WikiRestructuredText`, `WikiStart`, `TracNavigation`, \n  `WikiRestructuredTextLinks`, `TracNotification`, `WikiMacros`, \n  `WikiFormatting`, `WikiPageNames`, `WikiDeletePage`).\n\nWhat's new in version 1.3.1\n---------------------------\n\n- Assertions concerning permissions are supported, but not directly.\n  They are delegated to the underlying layers on top of which the data \n  sources have been implemented (e.g. XML-RPC handlers).\n\n- GadgetLinksDispatcher has been renamed. Now it is known as \n  LinksTreeDispatcher. It supports multiple root namespaces \n  (i.e. so far `gadgets`, and `gviz`) as well as the former hierarchy \n  of links. \n\n- IGadgetTracLinksResolver now is known as ITracLinksItem interface. \n  From now on its `get_link_resolvers` method *has to* return the \n  name of the root namespace (e.g. `gviz`).\n\n- New ! TracLinks expressions for Google Apps Reporting Visualization \n  API have been implemented. It may be necessary to be logged in to \n  the Google Apps control panel in order to access the data. \n  Syntax -> \n  `gviz:google:apps:<report_key>@<report_date>:<domain>[?tq=<query>]`\n\n- New ! It is possible to make reference to Google Spreadsheets using \n  TracLinks expressions starting with `gviz:google:sheet:` prefix. \n  They also support `range` attribute -to select only specific cells- \n  and `headers` option -in order to specify how many rows are header \n  rows-. Syntax -> \n  `gviz:google:sheet:<sheet_id>[:<top_cell>-<bottom_cell>][?headers=<number>]`\n\n- New ! It is possible to make reference to Google's standard \n  visualizations using TracLinks expressions starting with \n  `gadget:google:modules:` prefix. Syntax -> \n  `gadget:google:modules:<chart_name>`\n\n- TracLinks expansion for custom arguments in iGoogleGadget macro is \n  not a dream anymore. You can enclose TracLinks expressions in \n  brackets and assign such values to custom arguments. In such cases \n  the macro will perform the expansion looking for the target URL. \n  Hence the first expression shown below can be written now as shown \n  in the second example. Both of them will embed in the wiki page a \n  motion chart displaying the data found in cells B3-G17 inside \n  Google Spreadsheet number 1234.\n\n    [[iGoogleGadget(url=http://www.google.com/ig/modules/motionchart.xml, \n    _table_query_url=http://spreadsheets.google.com/tq?range=B3%3AG17&key=1234, \n    _table_query_refresh_interval=5)]]\n\n    [[iGoogleGadget(url=gadget:google:modules:motionchart, \n    _table_query_url=[gviz:google:sheet:1234:B3-G17], \n    _table_query_refresh_interval=5)]]\n\n- All links to third-party sites resulting from expanding a \n  TracLinks expression are rendered in wiki pages with the well-know \n  icon `[]->`.\n\n- Instances of GVizXMLRPCAdapter now can implement the method \n  `xmlrpc_namespace`. It is similar to the former `gviz_namespace` \n  method, but returns the XML-RPC namespace. This way multiple data \n  sources can be implemented using the services provided by a single \n  XML-RPC component.\n\n- New ! GVizSearchFiltersProvider now allows to list all search \n  filters installed in a Trac environment.\n\n- New ! It is possible to document the parameters accepted by a data \n  source using `gviz_param` decorator.\n\n- GVizProviderList macro now displays the parameters accepted by \n  data providers.\n\n- Now it is much easier to handle unicode, date & time and values \n  returned by the different data sources. From now on there is no \n  need to convert instances of xmlrpclib.DateTime in to instances of \n  datetime.date*\n\n- New ! GVizSearchProvider now gives access to search results \n  returned by Trac built-in search engine. You can specify a query \n  string and control the search filters (e.g. `wiki`, `ticket`, \n  `milestone`, `pydoc`) in use.\n\n- New ! You can get the names of the actions that can be performed on \n  a given ticket using `ticket/actions` data source.\n\n- New ! You can get all the meta-data describing ticket fields by \n  accessing `ticket/fields` data source.\n\n- New ! GVizTicketChangeLog provides a detailed changelog in order \n  to know the modifications made to different tickets. The data \n  source is available at `ticket/log`.\n\n- New ! GVizTicketAttachments provides detailed information about the \n  files attached to different tickets. The data source is available \n  at `ticket/attachments`.\n\n- New ! GVizTimelineFilters provides detailed information about the \n  different filters offered by those sources contributing to the \n  timeline. The data source is available at `timeline/filters`.\n\n- New ! GVizTimelineEvents provides detailed information about the \n  timed events reported by those sources contributing to the \n  timeline. It supports time slicing, and filtering. The data source \n  is available at `timeline/log`.\n\n- GVizMilestoneProvider has been enhanced. Formerly it just offered \n  the milestone name, due and completed time, plus its description. \n  Now it also contains some statistics on groups of tickets like \n  those displayed in the roadmap views. This includes the amount of \n  work that's been done, the units used to measure the indicators, \n  percent of the whole work that's been already done, the number of \n  active and closed tickets, and the percent they represent with \n  respect to the total number of tickets.\n\n- New ! GVizWikiPages provides detailed information about the wiki \n  pages found in the Trac environment. It supports multiple features, \n  being timed filters, page selection and multiple versions, just a \n  few of them. The data source is available at `wiki/index`.\n\n- New ! GVizWikiAttachments provides detailed information about the \n  files attached to wiki pages found in the Trac environment. \n  The data source is available at `wiki/attachments`.\n\n- The right MIME type (i.e. `application/json`) is sent back to the \n  client in the HTTP response when JSON is requested. This \n  is consistent with RFC xxx.\n\nWhat's new in version 1.2.3\n-----------------------------\n\n- Minor changes ... bah!\n\nWhat's new in version 1.2.2\n-----------------------------\n\n- The meaning of the different columns in the table returned by GViz \n  data sources as well as the default labels can be documented using \n  `gviz_col`. This function is compliant with annotations as defined \n  by PEP 3107.\n\n- Data sources' documentation can be included in wiki pages using \n  `GVizDataSource` macro.\n\n- Docstrings have changed a little.\n\n- Bug fixed: Until now, if no protocol handler was enabled then \n  the project environment became broken, because of a ValueError \n  exception being raised. This is annoying and therefore has been \n  fixed. Now if a URL having `gviz` prefix is accessed and \n  there's no protocol handler available, a ``Not Found`` (404) HTTP \n  response is returned to the caller with message \n  ``Unable to find any protocol handler``.\n\nWhat's new in version 1.2.1\n-----------------------------\n\n- The `gviz_api` module (version 1.0.0) is redistributed in this \n  package. This has been made to fall back to this implementation \n  if no other has been previously installed.\n\n- From this version on, the work is licensed under the Apache License. \n  See COPYRIGHT and NOTICE for details.\n\n- Babel is no longer a dependency.\n\n- Full TracLinks expansion in `iGoogleGadget` macro parameters.\n\n- iGoogle gadgets logo included as image resource. Borders template \n  updated.\n\n- Bug fixed: Until now, if an underlying RPC handler was disabled \n  then environment initialization failed since an annoying ValueError \n  exception was raised. That won't happen anymore. Now, once a method \n  is requested on the corresponding GViz data source provider, a GViz \n  error response is returned to the caller containing an explanatory \n  message.\n\nWhat's new in version 1.2.0\n---------------------------\n\n- Added support to display iGoogle gadgets using WikiFormatting \n  extensions (i.e. iGoogleGadget macro).\n\n- Added support to upload and host custom image-based gadget borders \n  inside the project environment.\n\n- Bug fixed : All requests handled by IGVizDataProvider implementors \n  not having `tq` and `tqx` parameters \n  (e.g. http://myserver.com/project_name/gviz/ticket/status) now \n  output the correct data. Previously on accessing these URLs the\n  HTTP response body contained an HTML error page.\n\nWhat's new in version 1.1.0\n---------------------------\n\n- Support has been added to implement Google Visualization API data \n  sources by reusing existing Trac XML RPC components.\n\n- Some (but not all) data sources for Trac ticket system are provided.\n  They are based on the following Trac XML-RPC providers (listed \n  hereafter by namespace): ticket.milestone, ticket.severity, \n  ticket.type, ticket.resolution, ticket.priority, ticket.component,\n  ticket.version, ticket.status.\n\nWhat's new in version 1.0.0\n---------------------------\n\n- An architecture is available so as to provide a project's data in\n  the format specified in Google Visualization API protocol \n  specification (version 0.5) api.TracGVizSystem.\n\n- Multiple protocol handlers (e.g. for different versions, and \n  protocol evolution) are allowed by implementing the interface\n  api.IGVizProtocolHandler. There is native support for version 0.5 of\n  Google Visualization API protocol through GViz_0_5.\n\n- It is possible to register new data sources by implementing the \n  interface api.IGVizDataProvider\n\n- A pluggable architecture is at hand to retrieve table contents\n  in multiple formats by merely implementing api.IGVizTableEncoder\n  interface. The following formats are supported : JSON \n  (class stdfmt.GVizJsonEncoder), HTML (class stdfmt.GVizHtmlEncoder),\n  CSV (class stdfmt.GVizCSVEncoder).\n\n- The exception conditions mentioned in Google Visualization API\n  protocol specification (version 0.5) have been identified.", "description_content_type": null, "docs_url": null, "download_url": "https://sourceforge.net/projects/simelo/files/TracGViz/1.4.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://dataviz.blood-hound.net/wiki/Packages/TracGViz", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "TracGViz", "package_url": "https://pypi.org/project/TracGViz/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/TracGViz/", "project_urls": {"Download": "https://sourceforge.net/projects/simelo/files/TracGViz/1.4.2", "Homepage": "https://dataviz.blood-hound.net/wiki/Packages/TracGViz"}, "release_url": "https://pypi.org/project/TracGViz/1.4.2/", "requires_dist": null, "requires_python": null, "summary": "Trac Data Sources for Google Visualization API. Embed iGoogle gadgets using WikiFormatting.", "version": "1.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Trac Data Sources for Google Visualization API. Embed iGoogle gadgets using WikiFormatting.</p>\n<p>This package (plugin) provides components so that Trac be able to\nuse widgets and related technologies provided by Google.</p>\n<ul>\n<li>It allows to feed data managed by Trac to widgets based on Google\nVisualization API.</li>\n<li>It allows embedding iGoogle Gadgets in wiki pages using WikiFormatting.</li>\n</ul>\n<p>Copyright 2009-2011 Olemis Lang &lt;olemis at gmail.com&gt;\nLicensed under the Apache License, Version 2.0</p>\n<div id=\"what-s-new-in-version-1-4-2\">\n<h2>What\u2019s new in version 1.4.2</h2>\n<ul>\n<li>#103 - Bug fixed: PIVOT fails for calculated columns with aggregate functions</li>\n<li>#66 - Bug fixed: Unicode values in ticket list schema</li>\n<li>#105 - Bug fixed:  Unicode values in date constants schema</li>\n<li>#106 - Bug fixed:  Type error in dateDiff</li>\n<li>#111 - Bug fixed:  Error executing scalar function <cite>now()</cite></li>\n<li>#88 - Wiki page text and size in GViz data source</li>\n<li>New! #92 - GViz QL : Implement PIVOT clause</li>\n<li>New! #112 - Integer division in GViz queries</li>\n<li>#113 - Bug fixed:  Unknown: error in HTML cells</li>\n<li>#67 Implement TracLinks for Ohloh widget gadgets</li>\n<li>#104 - Bug fixed:  Empty cells messed up by GViz MoinMoin encoder</li>\n<li>#114  URL escape plus sign in query URL</li>\n<li>Migrate <cite>tracgviz.testing</cite> to a new package <cite>dutest-trac</cite></li>\n<li>Remove relative import statements</li>\n<li>Error message for GViz content providers when guessed mimetype is still <cite>None</cite></li>\n<li>Move <cite>dutest</cite> to <cite>tests_require</cite> rather than <cite>install_requires</cite>.</li>\n<li>New! Naive typecasts in CSV to GViz MIME converter.</li>\n<li>URL column in milestone GViz provider.</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-4-1\">\n<h2>What\u2019s new in version 1.4.1</h2>\n<ul>\n<li>New! The plugin is easy-installable. Modules like <cite>dutest</cite>,\n<cite>TracXmlRpcPlugin</cite> and <cite>Pygments</cite> are external dependencies.</li>\n<li>New! Simple test cases (doctests) have been written for RPC handlers\nimplemented by TracGViz : <cite>TimelineRPC</cite>, <cite>ReportRPC</cite>. They are run\nusing a minimalistic framework built on top of <cite>dutest</cite> and allowing\nto (efficiently) write readable doctests for Trac plugins.</li>\n<li>New! It is possible to select the columns to be returned, their\norder, and labels. There is partial support for <cite>SELECT</cite> statement,\nsince only column names are allowed so far, and full support for\n<cite>LABEL</cite> clause.</li>\n<li>New! Added full support for limitting the number of returned rows,\nas well as skipping a given number of first rows (i.e. <cite>OFFSET</cite> and\n<cite>LIMIT</cite> clauses in GViz QL).</li>\n<li>New! A GViz QL error message is sent back to the caller if the data\nsource doesn\u2019t support the base table specified in <cite>FROM</cite> clause.\nThis clause has been deprecated in recent versions of the API.</li>\n<li>New! Calculated columns (e.g. arithmetic expressions) in\n<cite>LABEL</cite> and <cite>FORMAT</cite> clauses follow a syntax simlar to variable names\ne.g. <cite>a + sum(b)</cite></li>\n<li>New! <cite>FORMAT</cite> clause powered by PyICU.</li>\n<li>New! <cite>ORDER BY</cite> clause supported in queries.</li>\n<li>New! <cite>GROUP BY</cite> clause supported in queries.</li>\n<li>New! Added data source and infrastructure to convert files containing\ntabular data in different formats to the JSON representation\ndefined by Google Visualization API. It is integrated with Trac\nMIME conversions. The contents may be retrieved from anywhere if\nthe right plugin is implemented.</li>\n<li>New! Added GViz provider to convert contents of files under version\ncontrol to GViz Data Tables (provided that a MIME conversion is\navailable). Further optimizations have been deferred.</li>\n<li>New! Added GViz provider to convert files attached to Trac resources\nin order to obtain GViz Data Tables (provided that a MIME conversion\nis available). Especially implemented to help users like\nRobert Obertholtzer. Thanks for the feedback and help !</li>\n<li>New! Included helper to convert CSV files under version control to\nGViz API JSON format. Especially implemented to help users like\nRobert Obertholtzer. Thanks for the feedback and help !</li>\n<li>New! Added <cite>GVizTableMacro</cite>, a macro that embeds in TracWiki pages\nthe data tables returned by <em>LOCAL</em> GViz data providers (i.e.\ninstances of <cite>IGVizDataProvider</cite>). It is possible to include custom\nparameters (e.g. <cite>tq</cite> for queries written using Google\nVisualization API Query Language). The table contents are displayed\nusing HTML tables, hence neither gadgets nor internet connection\nare needed in this case.</li>\n<li>New! Implemented TSV Response Format encoder. It is compliant with\nthe specification and response is encoded using UTF-16 charset.\nNonetheless <cite>outFileName</cite> parameter is not supported yet.</li>\n<li>New! Added sample TracGViz providers. They illustrate how easy is\nto implement custom GViz providers in order to offer your data to\nthe world.</li>\n<li>New! Added support for <cite>HMAC</cite> (<cite>RFC 2104</cite>) hash by using <cite>hmac</cite> module.</li>\n<li>New! GViz providers list rendered on accessing <cite>/gviz</cite> path.</li>\n<li>New! Support for parsing other (more complex) expressions in <cite>select</cite>\nclause (e.g. aggregate functions, -date- constants).</li>\n<li>New! Support for parsing <cite>WHERE</cite> clause in detail</li>\n<li>New! Support for parsing more complex expressions in <cite>ORDER BY</cite> clause\n(e.g. aggregate functions).</li>\n<li>New! Constants accepted in <cite>select</cite> clause.</li>\n<li>New! Support for parsing and evaluating scalar functions in <cite>select</cite> clause.</li>\n<li>New! Support for parsing and evaluating expressions in <cite>select</cite> clause.</li>\n<li>New! GViz QL grammar to include SQL clauses and refactor\ncurrent parsing solution.</li>\n<li>Column type checks may trigger error responses on missmatch.</li>\n<li>Fix GViz providers index, broken using Trac=1.0</li>\n<li>Apache(TM) Bloodhound web UI enhancements</li>\n<li>Upgrade RPC providers for Trac=1.0 and Apache(TM) Bloodhound.</li>\n<li>CSV and TSV encoders are implemented by using <cite>csv</cite> module in stdlib.</li>\n<li>Include helper to convert CSV attachments to GViz API JSON format.</li>\n<li>It is possible to create reports from remote via XML-RPC API.</li>\n<li>Report SQL is not shown in <cite>ReportRPC.get</cite> if client is not granted\n<cite>REPORT_SQL_VIEW</cite> permission.</li>\n<li>Added support in the test suite for adding and loading test data.</li>\n<li>Test cases written for all supported (and unsupported) GVizQL\nfeatures.</li>\n<li>Some test cases written for data sources included in TracGViz 1.3.4\nthat are not about version control. Much more work is needed :(</li>\n<li>The plugin works even if <cite>Pygments</cite> is not installed. In that case\nonly GViz QL will be missing and thereby all other features will be\navailable.</li>\n<li>Further precautions to ensure that responses are UTF-8 encoded,\nunless otherwise stated.</li>\n<li>Added support for GViz queries (i.e. <cite>tq</cite> parameter) in GViz\nTracLinks providers.</li>\n<li>Included provider documentation in a resource file.</li>\n<li>It is possible to iterate over rows and values of <cite>DataTable</cite>\ninstances.</li>\n<li>Bug fixed: Relative URL converted into absolute in\n<cite>ReportRPC.execute</cite> only if needed.</li>\n<li>Bug fixed: Data provided by <cite>GVizChagesetProvider</cite> in columns <cite>chg</cite>\nand <cite>target</cite> were exchanged. Now they are in the right place.</li>\n<li>Bug fixed: Details about the latest changeset are shown by\n<cite>GVizChagesetProvider</cite> when only <cite>since</cite> and <cite>until</cite> parameters are\nspecified.</li>\n<li>Bug fixed: Enhanced compatibilty with Trac XmlRpcPlugin=1.0.6 and\nthe way it handles datetime values. Errors like\n<cite>TypeError: unsupported operand type(s) for -: instance and datetime.datetime</cite>\nand <cite>AttributeError: datetime.datetime object has no attribute value</cite>\ndo not happen anymore.</li>\n<li>Bug fixed #57 : <cite>ValueError</cite> was raised (sometimes) in\n<cite>GadgetAliases.__init__</cite> when parsing aliases in config file. Not\nanymore.</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-3-4\">\n<h2>What\u2019s new in version 1.3.4</h2>\n<ul>\n<li>New ! <cite>GVizQuickJumpEntries</cite> offers data about interesting places\nin the repository (a.k.a. <cite>quick jump entries</cite>). This includes\ntags and branches, for instance. The data is provided by\nVersionControlRPC.</li>\n<li>Bug fixed: Formerly all revisions were included in the revision\nlog if only individual revisions were requested. Now the result\nsets include just the information for the particular changesets\nsupplied in <cite>rev</cite> parameter. Tested with both <cite>hg</cite> and <cite>svn</cite>.</li>\n<li>Bug fixed: Exception with message <cite>Invalid list index</cite> was raised when\nusing Subversion backend when requesting the log for individual\nrevisions. This works OK now for both <cite>hg</cite> and <cite>svn</cite>.</li>\n<li>Bug fixed: Wrong default value for <cite>fmt</cite> parameter in\n<cite>GVizChangesetDetails</cite>. Now it\u2019s OK.</li>\n<li>Bug fixed: Formerly undocumented column in <cite>GVizTimelineFilters</cite>\nprovider now contains appropriate description.</li>\n<li>WikiFormatting may be used to document the data sources. It may be\nincluded in the documentation written for parameters, columns, and\nthe data source itself.</li>\n<li>Bug fixed: Documentation for providers having dynamic schemas was\nnot previously rendered. This has been fixed and a new property\nhas been added in docs to highlight whether the data source returns\nalways the same columns or if they can vary depending upon run-time\nconditions.</li>\n<li>Milestones may be filtered by name by providing a UNIX pattern in\n<cite>filter_by</cite> parameter.</li>\n<li>UNIX filename patterns are compiled using REs for better performance.</li>\n<li>Bug fixed: When using Hg backend, the code in version 1.3.3 in\norder to revisions iterator (VCS RPC) entered infinite loop (under\ncertain conditions apparently related to branching or version\nnumbers). This doesnt happen anymore.</li>\n<li>Bug fixed: Now VCS RPC retrieves all changesets when using Hg backend.\nThe implementation doesn\u2019t guess anymore the revision order and\nretrieves all that information directly from the underlying VCS\nconnector in use. The former algorithm was weak because it only\nconsidered the first parent of a given revision. Therefore many\nothers (especially all those in different branches) were missing\nfrom the result set.</li>\n<li>Individual revisions (and not just intervals like before) may be\nselected in <cite>GVizChangesets</cite> (i.e. to obtain the revision log).</li>\n<li>Bug fixed: As a consequence of the changes introduced in version\n1.3.3 (especially in ReportRPC and VersionControlRPC) together\nwith <a href=\"http://trac-hacks.org/ticket/5586\" rel=\"nofollow\">bug #5586@TH.org</a> in XmlRpcPlugin, made impossible\nto render the main displaying documentation about the different\nRPC handlers. Both docstrings have been modified and everything\nis back to normal right now.</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-3-3\">\n<h2>What\u2019s new in version 1.3.3</h2>\n<ul>\n<li><p>New ! Since version 1.3.3 macro aliases are supported so that\nembedding iGoogle gadgets in wiki pages be even easier. Aliases are\nnames of macros configured using <cite>gadgets.aliases</cite> option which\nare shortcuts to use iGoogleGadget with a fixed name. For example,\nif the aforementioned option is set to\n<cite>MotionChart=http://www.google.com/ig/modules/motionchart.xml</cite>\nthen the following snippets are equivalent (so users wont need to\nremember gadget URLs anymore but names they are familiar with ;).</p>\n<blockquote>\n<p>[[iGoogleGadget(url=http://www.google.com/ig/modules/motionchart.xml,\n_table_query_url=http://spreadsheets.google.com/tq?range=B3%3AG17&amp;key=1234,\n_table_query_refresh_interval=5)]]</p>\n<p>[[iGoogleGadget(url=gadget:google:modules:motionchart,\n_table_query_url=[gviz:google:sheet:1234:B3-G17],\n_table_query_refresh_interval=5)]]</p>\n<p>[[MotionChart(_table_query_url=[gviz:google:sheet:1234:B3-G17],\n_table_query_refresh_interval=5)]]</p>\n</blockquote>\n</li>\n<li><p>Aliases for Google\u2019s visualization gadgets are offered by default.</p>\n</li>\n<li><p>TracLinks expressions are supported in config options used to\ndefine iGoogleGadget macro aliases.</p>\n</li>\n<li><p>New ! GVizTicketList now lists the tickets created in a Trac\nenvironment together with their attributes. Custom fields, if\navailable, are also included in separate columns. That\u2019s why the\ncolumns in the data tables returned as well as their order can\nchange from time to time, depending on the plugins enabled in the\nparticular environment and other factors.</p>\n</li>\n<li><p>New ! ReportRPC now provides an interface to Trac\u2019s report module\nvia XML-RPC protocol. So far report execution is only supported for\nreports defined by using SQL and TracQuery syntax. This means that\nsaved custom queries specified using URLs are not supported yet,\nbut will be (hopefully) in a near future. In the mean time a\n<cite>NotImplementedError</cite> exception is raised.</p>\n</li>\n<li><p>New ! GVizAvailableReports now lists available reports and their\ndata, including report ID, title, description and the query string\nused to select the tickets to be included in each report.</p>\n</li>\n<li><p>Important ! Architectural change. From now on Request objects\ncan be supplied in to IGVizDataProvider.get_data_schema method.\nThis change allows to implement more dynamic data providers\nsince schemas can vary depending upon the run-time values provided\nfor some parameters.</p>\n</li>\n<li><p>New ! GVizReportProvider now offers the data included in custom Trac\nReports defined by Trac users. This is a very dynamic data\nprovider, and also the first example where schema can change\ndepending upon the report specification.</p>\n</li>\n<li><p>New ! VersionControlRPC now provides an interface to Trac\u2019s Version\nControl API via XML-RPC protocol. Therefore information about files\nin the project\u2019s repository and also about changesets is available\nusing standard protocols. It is posible to list files and folders\n(<cite>ls</cite>) recursively with depth limit and filters written like\nUNIX filename patterns. File attributes (e.g. size, content type,\n\u2026), data about revisions (e.g. message, author, \u2026) in a given\n(time) interval, file and folder history, and full description of\nchanges performed at a given revision, are some of the features\nsupported so far. Looking forward for further useful data to\nbe published ! This feature was \u201ctested\u201d using Mercurial SCM (<cite>hg</cite>)\nand Subversion (<cite>svn</cite>), but the code <em>SHOULD</em> work as long as\nconnectors fully compatible with Trac\u2019s Version Control API be used.\nHowever the different approaches taken by different VCS may lead to\nwrong behaviors. So if you find any bug, please let me know.</p>\n</li>\n<li><p>New ! GVizSourceFiles now offers information about individual\nfiles and those located in a folder. This data source supports filters\n(i.e. UNIX filename patterns), and recursive lookup with optional\ndepth value. It is also possible to get the data for an specific\nrevision. The results are mostly file attributes (e.g. size,\nextension, content type \u2026), but the actual values depend upon\nthe capabilities supported by the specific repository connector in\nuse.</p>\n</li>\n<li><p>New ! GVizSourceFileHistory now makes available the modifications\nperformed on  a group of files during a given time interval.\nBoundary values may be either datetime values or revision\nidentifiers (supported by the specific repository connector).\nClients\u2019ll get back detailed information about the changes performed\non the given files in the different revisions together with the\nfile\u2019s attributes at that specific time.\nThis data source supports filters (i.e. UNIX filename\npatterns) as well as recursive lookup with optional depth value.\nMultiple datetime formats are supported as usual.</p>\n</li>\n<li><p>New ! GVizChangesetDetails now provides a detailed report\ncontaining all the individual changes comitted at\nonce onto the repository and recorded in separate changesets. It\nis possible to specify multiple changeset identifiers (supported by\nthe specific repository connector) (and | or) time intervals.\nBoundary values may be either datetime values or changeset\nidentifiers.</p>\n</li>\n<li><p>New ! GVizChangesets now provides meta-data describing the\ndifferent changesets committed to the repository related to a\nTrac environment (i.e. revision ID, messages, author, and date). It\nis possible to limit the results by specifying a time interval.\nBoundary values may be either datetime values or changeset\nidentifiers.</p>\n</li>\n<li><p>All the data providers interacting with the repository have been\n\u201ctested\u201d using the connector for Mercurial SCM (i.e. <cite>hg</cite>). In this\ncase there are a few open issues that seem to be related with the\nlack of support in TracMercurial for <cite>copy</cite> events (but it\u2019s not a\ndefinitive conclusion). The current implementation <em>SHOULD</em> work\nwith other connectors compatible with Trac\u2019s Version Control API,\nbut THERE IS NO WARRANTY OF ANY KIND if you use another VCS.\nHowever if your connector is not causing any trouble then you the\nuse of the aforementionned data sources <em>SHOULD NOT</em> cause any\ndamage to both your environment and your repository. Further tests\nwill be performed in the future but there\u2019s no clear schedule.\nYou could be the first one to test them. Suggestions, patches and\nfurther feedback is welcome in order to overcome the actual\nlimitations.</p>\n</li>\n<li><p>Added api.IHashLibrary interface so that plugins and extensions can\ncontribute with other secure hash, message digest and checksum\nalgorithms in order to compute <cite>sig</cite> field in GViz API responses.</p>\n</li>\n<li><p>All the code needed to support secure hash algorithms provided by\n<cite>hashlib</cite> module can be found from now on in class <cite>stdhash.HashLib</cite>.\nIt supports the following methods : <cite>sha1</cite>, <cite>sha224</cite>, <cite>sha256</cite>,\n<cite>sha384</cite>, <cite>sha512</cite>, and <cite>md5</cite>. Additional algorithms may also be\navailable depending upon the OpenSSL library that Python uses on\nyour platform.</p>\n</li>\n<li><p>All the code needed to support checksum algorithms provided by\n<cite>zlib</cite> module can be found from now on in class <cite>stdhash.ZLibChecksum</cite>.\nIt supports the following methods : <cite>adler32</cite>, <cite>crc32</cite></p>\n</li>\n<li><p>Minor adjustments to adapt support for <cite>sig</cite> parameter to the\nrecent introduction of <cite>IHashLibrary</cite> interface.</p>\n</li>\n<li><p>Bug fixed: Formerly <cite>sig</cite> value was included in GViz API response\nonly if both, the hash method was setup and the <cite>sig</cite> parameter was\nset in the request. From now on only the first condition has to\nbe met in order to send the hash value back to the client.</p>\n</li>\n<li><p>Bug fixed: Minor bug while displaying instances of <cite>datetime</cite>\nusing plain text encoders.</p>\n</li>\n<li><p>Support in <cite>DataTable.SingleValueToJS</cite> for automatic\nconversion of instances of <cite>xmlrpclib.DateTime</cite> and <cite>int</cite> values\n(POSTFIX timestamp) into instances of <cite>datetime</cite>. This allows to\nsupply such values in columns having types <cite>date</cite>, <cite>datetime</cite>, and\n<cite>timeofday</cite> (not possible with gviz_api 1.0).</p>\n</li>\n<li><p>Support in <cite>DataTable.SingleValueToJS</cite> for automatic\nconversion of unicode strings using utf-8 encoding. This allows to\nsupply such strings in columns having <cite>string</cite> type (not possible\nwith gviz_api 1.0).</p>\n</li>\n<li><p>Module <cite>rpc</cite> has been added to group all RPC handlers offered\nby <cite>TracGViz</cite> package.</p>\n</li>\n<li><p>Documentation added to highlight the use of\ntimeline.ticket_show_details option in trac.ini in order to\nretrieve all events related to ticket changes (e.g. attachments).</p>\n</li>\n<li><p>Bug fixed: TimelineRPC doesnt fail when filter definitions\nprovided by instances of ITimelineEventProvider interface contain\na third (i.e. <cite>checked</cite>) element. It also handles unicode\ncharacters appropriately.</p>\n</li>\n<li><p>MoinMoin encoder now returns <cite>text/x.moin.wiki</cite> MIME type.</p>\n</li>\n<li><p>Few optimizations and refactorings (e.g. unnecessary imports have\nbeen removed) \u2026 bah!</p>\n</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-3-2\">\n<h2>What\u2019s new in version 1.3.2</h2>\n<ul>\n<li>TracGVizSystem now implements IPermissionRequestor interface. This\nmeans that Trac admins can use <cite>GVIZ_VIEW</cite> permission to control\nwhich users may access GViz data sources or not. On accessing such\ndata, if the aforementioned permission is not granted to the user\nperforming the request then a GViz API error response is returned\nto the caller with <cite>reason</cite> set to <cite>user_not_authenticated</cite> in case\nof anonymous access, or <cite>access_denied</cite> otherwise.</li>\n<li>Now absolute URLs are returned while expanding TracLinks\nexpressions found used inside iGoogleGadget macro. Formerly this\nprevented the iGoogle container to find data inside the project\nenvironment in case TracLinks expressions were used.</li>\n<li>Add support for <cite>sheet</cite> option in GoogleDocsConnector in order\nto have links to data inside an specific sheet provided its name.\nHence, links like the following are supported from now on:\n<a href=\"https://spreadsheets.google.com/tq?key=ABCD&amp;sheet=Sheet1\" rel=\"nofollow\">https://spreadsheets.google.com/tq?key=ABCD&amp;sheet=Sheet1</a>,\n<a href=\"https://spreadsheets.google.com/tq?key=ABCD&amp;sheet=Sheet+2\" rel=\"nofollow\">https://spreadsheets.google.com/tq?key=ABCD&amp;sheet=Sheet+2</a>.\nSheet names may have alphanumeric characters as well as whitespaces.\nSyntax -&gt;\n<cite>gviz:google:sheet:&lt;spreadsheet_id&gt;[:[&lt;sheet_name&gt;][:&lt;top_cell&gt;-&lt;bottom_cell&gt;]][?[headers=&lt;number&gt;]]</cite></li>\n<li>Formerly values in columns having types <cite>date</cite>, <cite>datetime</cite> or\n<cite>timeofday</cite> were shown in non-JSON responses (e.g. HTML)\nin a way similar to <cite>new Date(2009, 12, 2)</cite>. Now they are rendered\nusing the following formats <cite>%Y-%m-%d</cite>, <cite>%Y-%m-%d %H:%M:%S</cite>,\n<cite>%H:%M:%S</cite> respectively.</li>\n<li>New ! The following (non-standard) formats are supported using\nspecial format identifiers for <cite>out</cite> option in <cite>tqx</cite> parameter:\nMoinMoin wiki tables (class extfmt.GVizMoinEncoder <cite>out:moin</cite>).</li>\n<li>Every wiki GViz provider now supports name expansion using Unix\nshell-style wildcards. This means that if such patterns are\nspecified for <cite>name</cite> parameter either once or multiple times, then\nall those wiki pages for which a match is found will be included in\nthe result set\n(e.g. <cite>/gviz/wiki/index?tqx=out:html&amp;all&amp;name=Wiki*&amp;name=TracN*</cite>\nwill return information about all the versions of the wiki pages\nstarting with either <cite>Wiki</cite> or <cite>TracN</cite> prefixes, such as\n<cite>WikiNewPage</cite>, <cite>WikiHtml</cite>, <cite>WikiProcessors</cite>,\n<cite>WikiRestructuredText</cite>, <cite>WikiStart</cite>, <cite>TracNavigation</cite>,\n<cite>WikiRestructuredTextLinks</cite>, <cite>TracNotification</cite>, <cite>WikiMacros</cite>,\n<cite>WikiFormatting</cite>, <cite>WikiPageNames</cite>, <cite>WikiDeletePage</cite>).</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-3-1\">\n<h2>What\u2019s new in version 1.3.1</h2>\n<ul>\n<li><p>Assertions concerning permissions are supported, but not directly.\nThey are delegated to the underlying layers on top of which the data\nsources have been implemented (e.g. XML-RPC handlers).</p>\n</li>\n<li><p>GadgetLinksDispatcher has been renamed. Now it is known as\nLinksTreeDispatcher. It supports multiple root namespaces\n(i.e. so far <cite>gadgets</cite>, and <cite>gviz</cite>) as well as the former hierarchy\nof links.</p>\n</li>\n<li><p>IGadgetTracLinksResolver now is known as ITracLinksItem interface.\nFrom now on its <cite>get_link_resolvers</cite> method <em>has to</em> return the\nname of the root namespace (e.g. <cite>gviz</cite>).</p>\n</li>\n<li><p>New ! TracLinks expressions for Google Apps Reporting Visualization\nAPI have been implemented. It may be necessary to be logged in to\nthe Google Apps control panel in order to access the data.\nSyntax -&gt;\n<cite>gviz:google:apps:&lt;report_key&gt;@&lt;report_date&gt;:&lt;domain&gt;[?tq=&lt;query&gt;]</cite></p>\n</li>\n<li><p>New ! It is possible to make reference to Google Spreadsheets using\nTracLinks expressions starting with <cite>gviz:google:sheet:</cite> prefix.\nThey also support <cite>range</cite> attribute -to select only specific cells-\nand <cite>headers</cite> option -in order to specify how many rows are header\nrows-. Syntax -&gt;\n<cite>gviz:google:sheet:&lt;sheet_id&gt;[:&lt;top_cell&gt;-&lt;bottom_cell&gt;][?headers=&lt;number&gt;]</cite></p>\n</li>\n<li><p>New ! It is possible to make reference to Google\u2019s standard\nvisualizations using TracLinks expressions starting with\n<cite>gadget:google:modules:</cite> prefix. Syntax -&gt;\n<cite>gadget:google:modules:&lt;chart_name&gt;</cite></p>\n</li>\n<li><p>TracLinks expansion for custom arguments in iGoogleGadget macro is\nnot a dream anymore. You can enclose TracLinks expressions in\nbrackets and assign such values to custom arguments. In such cases\nthe macro will perform the expansion looking for the target URL.\nHence the first expression shown below can be written now as shown\nin the second example. Both of them will embed in the wiki page a\nmotion chart displaying the data found in cells B3-G17 inside\nGoogle Spreadsheet number 1234.</p>\n<blockquote>\n<p>[[iGoogleGadget(url=http://www.google.com/ig/modules/motionchart.xml,\n_table_query_url=http://spreadsheets.google.com/tq?range=B3%3AG17&amp;key=1234,\n_table_query_refresh_interval=5)]]</p>\n<p>[[iGoogleGadget(url=gadget:google:modules:motionchart,\n_table_query_url=[gviz:google:sheet:1234:B3-G17],\n_table_query_refresh_interval=5)]]</p>\n</blockquote>\n</li>\n<li><p>All links to third-party sites resulting from expanding a\nTracLinks expression are rendered in wiki pages with the well-know\nicon <cite>[]-&gt;</cite>.</p>\n</li>\n<li><p>Instances of GVizXMLRPCAdapter now can implement the method\n<cite>xmlrpc_namespace</cite>. It is similar to the former <cite>gviz_namespace</cite>\nmethod, but returns the XML-RPC namespace. This way multiple data\nsources can be implemented using the services provided by a single\nXML-RPC component.</p>\n</li>\n<li><p>New ! GVizSearchFiltersProvider now allows to list all search\nfilters installed in a Trac environment.</p>\n</li>\n<li><p>New ! It is possible to document the parameters accepted by a data\nsource using <cite>gviz_param</cite> decorator.</p>\n</li>\n<li><p>GVizProviderList macro now displays the parameters accepted by\ndata providers.</p>\n</li>\n<li><p>Now it is much easier to handle unicode, date &amp; time and values\nreturned by the different data sources. From now on there is no\nneed to convert instances of xmlrpclib.DateTime in to instances of\ndatetime.date*</p>\n</li>\n<li><p>New ! GVizSearchProvider now gives access to search results\nreturned by Trac built-in search engine. You can specify a query\nstring and control the search filters (e.g. <cite>wiki</cite>, <cite>ticket</cite>,\n<cite>milestone</cite>, <cite>pydoc</cite>) in use.</p>\n</li>\n<li><p>New ! You can get the names of the actions that can be performed on\na given ticket using <cite>ticket/actions</cite> data source.</p>\n</li>\n<li><p>New ! You can get all the meta-data describing ticket fields by\naccessing <cite>ticket/fields</cite> data source.</p>\n</li>\n<li><p>New ! GVizTicketChangeLog provides a detailed changelog in order\nto know the modifications made to different tickets. The data\nsource is available at <cite>ticket/log</cite>.</p>\n</li>\n<li><p>New ! GVizTicketAttachments provides detailed information about the\nfiles attached to different tickets. The data source is available\nat <cite>ticket/attachments</cite>.</p>\n</li>\n<li><p>New ! GVizTimelineFilters provides detailed information about the\ndifferent filters offered by those sources contributing to the\ntimeline. The data source is available at <cite>timeline/filters</cite>.</p>\n</li>\n<li><p>New ! GVizTimelineEvents provides detailed information about the\ntimed events reported by those sources contributing to the\ntimeline. It supports time slicing, and filtering. The data source\nis available at <cite>timeline/log</cite>.</p>\n</li>\n<li><p>GVizMilestoneProvider has been enhanced. Formerly it just offered\nthe milestone name, due and completed time, plus its description.\nNow it also contains some statistics on groups of tickets like\nthose displayed in the roadmap views. This includes the amount of\nwork that\u2019s been done, the units used to measure the indicators,\npercent of the whole work that\u2019s been already done, the number of\nactive and closed tickets, and the percent they represent with\nrespect to the total number of tickets.</p>\n</li>\n<li><p>New ! GVizWikiPages provides detailed information about the wiki\npages found in the Trac environment. It supports multiple features,\nbeing timed filters, page selection and multiple versions, just a\nfew of them. The data source is available at <cite>wiki/index</cite>.</p>\n</li>\n<li><p>New ! GVizWikiAttachments provides detailed information about the\nfiles attached to wiki pages found in the Trac environment.\nThe data source is available at <cite>wiki/attachments</cite>.</p>\n</li>\n<li><p>The right MIME type (i.e. <cite>application/json</cite>) is sent back to the\nclient in the HTTP response when JSON is requested. This\nis consistent with RFC xxx.</p>\n</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-2-3\">\n<h2>What\u2019s new in version 1.2.3</h2>\n<ul>\n<li>Minor changes \u2026 bah!</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-2-2\">\n<h2>What\u2019s new in version 1.2.2</h2>\n<ul>\n<li>The meaning of the different columns in the table returned by GViz\ndata sources as well as the default labels can be documented using\n<cite>gviz_col</cite>. This function is compliant with annotations as defined\nby PEP 3107.</li>\n<li>Data sources\u2019 documentation can be included in wiki pages using\n<cite>GVizDataSource</cite> macro.</li>\n<li>Docstrings have changed a little.</li>\n<li>Bug fixed: Until now, if no protocol handler was enabled then\nthe project environment became broken, because of a ValueError\nexception being raised. This is annoying and therefore has been\nfixed. Now if a URL having <cite>gviz</cite> prefix is accessed and\nthere\u2019s no protocol handler available, a <tt>Not Found</tt> (404) HTTP\nresponse is returned to the caller with message\n<tt>Unable to find any protocol handler</tt>.</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-2-1\">\n<h2>What\u2019s new in version 1.2.1</h2>\n<ul>\n<li>The <cite>gviz_api</cite> module (version 1.0.0) is redistributed in this\npackage. This has been made to fall back to this implementation\nif no other has been previously installed.</li>\n<li>From this version on, the work is licensed under the Apache License.\nSee COPYRIGHT and NOTICE for details.</li>\n<li>Babel is no longer a dependency.</li>\n<li>Full TracLinks expansion in <cite>iGoogleGadget</cite> macro parameters.</li>\n<li>iGoogle gadgets logo included as image resource. Borders template\nupdated.</li>\n<li>Bug fixed: Until now, if an underlying RPC handler was disabled\nthen environment initialization failed since an annoying ValueError\nexception was raised. That won\u2019t happen anymore. Now, once a method\nis requested on the corresponding GViz data source provider, a GViz\nerror response is returned to the caller containing an explanatory\nmessage.</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-2-0\">\n<h2>What\u2019s new in version 1.2.0</h2>\n<ul>\n<li>Added support to display iGoogle gadgets using WikiFormatting\nextensions (i.e. iGoogleGadget macro).</li>\n<li>Added support to upload and host custom image-based gadget borders\ninside the project environment.</li>\n<li>Bug fixed : All requests handled by IGVizDataProvider implementors\nnot having <cite>tq</cite> and <cite>tqx</cite> parameters\n(e.g. <a href=\"http://myserver.com/project_name/gviz/ticket/status\" rel=\"nofollow\">http://myserver.com/project_name/gviz/ticket/status</a>) now\noutput the correct data. Previously on accessing these URLs the\nHTTP response body contained an HTML error page.</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-1-0\">\n<h2>What\u2019s new in version 1.1.0</h2>\n<ul>\n<li>Support has been added to implement Google Visualization API data\nsources by reusing existing Trac XML RPC components.</li>\n<li>Some (but not all) data sources for Trac ticket system are provided.\nThey are based on the following Trac XML-RPC providers (listed\nhereafter by namespace): ticket.milestone, ticket.severity,\nticket.type, ticket.resolution, ticket.priority, ticket.component,\nticket.version, ticket.status.</li>\n</ul>\n</div>\n<div id=\"what-s-new-in-version-1-0-0\">\n<h2>What\u2019s new in version 1.0.0</h2>\n<ul>\n<li>An architecture is available so as to provide a project\u2019s data in\nthe format specified in Google Visualization API protocol\nspecification (version 0.5) api.TracGVizSystem.</li>\n<li>Multiple protocol handlers (e.g. for different versions, and\nprotocol evolution) are allowed by implementing the interface\napi.IGVizProtocolHandler. There is native support for version 0.5 of\nGoogle Visualization API protocol through GViz_0_5.</li>\n<li>It is possible to register new data sources by implementing the\ninterface api.IGVizDataProvider</li>\n<li>A pluggable architecture is at hand to retrieve table contents\nin multiple formats by merely implementing api.IGVizTableEncoder\ninterface. The following formats are supported : JSON\n(class stdfmt.GVizJsonEncoder), HTML (class stdfmt.GVizHtmlEncoder),\nCSV (class stdfmt.GVizCSVEncoder).</li>\n<li>The exception conditions mentioned in Google Visualization API\nprotocol specification (version 0.5) have been identified.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 843404, "releases": {"1.2.1": [], "1.2.2": [], "1.3.1": [{"comment_text": "", "digests": {"md5": "2684a25ff10d1a91c0eccbaedce2dae5", "sha256": "6b391e1988169fb9b9632b490410aefa7b66c9b285aa59ddd1396247df782b0b"}, "downloads": -1, "filename": "TracGViz-1.3.1-py2.5.egg", "has_sig": false, "md5_digest": "2684a25ff10d1a91c0eccbaedce2dae5", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 163374, "upload_time": "2009-05-19T19:59:13", "upload_time_iso_8601": "2009-05-19T19:59:13.517664Z", "url": "https://files.pythonhosted.org/packages/49/58/5e0077f372f5d97847b20f0f984e8e6a8117f66be5e337cebf88de9c023f/TracGViz-1.3.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e714d598eb546894cb014c5b4d7f880b", "sha256": "6a3841f78f4fb905cd592ed93c8f44d248aedb20aa4af9158df95d978a43d79f"}, "downloads": -1, "filename": "TracGViz-1.3.1.tar.gz", "has_sig": false, "md5_digest": "e714d598eb546894cb014c5b4d7f880b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87476, "upload_time": "2009-05-22T19:05:42", "upload_time_iso_8601": "2009-05-22T19:05:42.994007Z", "url": "https://files.pythonhosted.org/packages/e4/3e/ce7fdfc4032c73aba1e80d5cf98d62e495144e40795a8933d4c71b32eade/TracGViz-1.3.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "874c6388d8ceb9fdd6d2c814c351afd8", "sha256": "37fc48d5ff1c892f5fceaa0691c008c5bf595d2b11d6e3c2402f99bf3cc864a7"}, "downloads": -1, "filename": "TracGViz-1.3.1.zip", "has_sig": false, "md5_digest": "874c6388d8ceb9fdd6d2c814c351afd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104667, "upload_time": "2009-05-22T19:18:51", "upload_time_iso_8601": "2009-05-22T19:18:51.176338Z", "url": "https://files.pythonhosted.org/packages/7e/9d/1b58cd92ed33532b7fa703f9c55763732a2c934c86fb230c4158ecd788ff/TracGViz-1.3.1.zip", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "aa9af20d5ee2d98c16706eef14c94430", "sha256": "605da9569d5684b6354618b0dd49adeb54e6e818898fbb0c286de0c0f593a85e"}, "downloads": -1, "filename": "TracGViz-1.3.2-py2.5.egg", "has_sig": false, "md5_digest": "aa9af20d5ee2d98c16706eef14c94430", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 171693, "upload_time": "2009-06-16T20:48:26", "upload_time_iso_8601": "2009-06-16T20:48:26.729335Z", "url": "https://files.pythonhosted.org/packages/f2/04/900917c240e86288f7c19a664eef5d172f717c8df84875b661baee47cc4e/TracGViz-1.3.2-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b631f1c85a7f51b43a1275005882fc0", "sha256": "be79dc5cf59d5f848af939687a12f421b0ce70c93a2b93b24e3f565e28024712"}, "downloads": -1, "filename": "TracGViz-1.3.2.tar.bz2", "has_sig": false, "md5_digest": "2b631f1c85a7f51b43a1275005882fc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75424, "upload_time": "2009-06-16T20:49:46", "upload_time_iso_8601": "2009-06-16T20:49:46.028585Z", "url": "https://files.pythonhosted.org/packages/60/2e/5d9e7093221b1338a5840059968d145a41f1067b716fe0194f6ca18825e7/TracGViz-1.3.2.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fd8fc401a11eb194d8d7619a372138f", "sha256": "c1b56eb500d6517bc8dca32473759c3eca8a33948e84c539af322a856bc0498b"}, "downloads": -1, "filename": "TracGViz-1.3.2.tar.gz", "has_sig": false, "md5_digest": "1fd8fc401a11eb194d8d7619a372138f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92687, "upload_time": "2009-06-16T20:49:04", "upload_time_iso_8601": "2009-06-16T20:49:04.548605Z", "url": "https://files.pythonhosted.org/packages/9a/87/4fc5dc9b10c686f6ffad3c19a68f663f3301c0955dc7ab2c2a015b9058e4/TracGViz-1.3.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "788e5195c6bd00316e0d30ad43b6c2d2", "sha256": "627d4c0dcef2c8dd4796a16a8e85efa686438d74432ab51190633bdcdc2e599d"}, "downloads": -1, "filename": "TracGViz-1.3.2.zip", "has_sig": false, "md5_digest": "788e5195c6bd00316e0d30ad43b6c2d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110383, "upload_time": "2009-06-16T20:48:56", "upload_time_iso_8601": "2009-06-16T20:48:56.570780Z", "url": "https://files.pythonhosted.org/packages/20/bc/a134a727f60f52e470b0e521f14f0cb6681cb97c83f13ab9de24338a8da2/TracGViz-1.3.2.zip", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "ed17a681af8288195d9a846aa6d96252", "sha256": "3d7a8c2c66e0f7f11e47f68feedd2ef4cd30de0bde5f78fc0f7d05c611b432de"}, "downloads": -1, "filename": "TracGViz-1.3.3-py2.5.egg", "has_sig": false, "md5_digest": "ed17a681af8288195d9a846aa6d96252", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 219539, "upload_time": "2009-07-16T20:11:19", "upload_time_iso_8601": "2009-07-16T20:11:19.248889Z", "url": "https://files.pythonhosted.org/packages/cf/2c/4f8081e864dcbbc9c2e6a3a82d54e2d0f2b4ebd31cc9c20c959c3ceb2ad0/TracGViz-1.3.3-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "17323ce6f1f3c25599d9c26ed0283814", "sha256": "1eec761d210b6e29c90da2cb9029578fc2e43f8130732ec4c6b522039dcbedc4"}, "downloads": -1, "filename": "TracGViz-1.3.3.tar.bz2", "has_sig": false, "md5_digest": "17323ce6f1f3c25599d9c26ed0283814", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91755, "upload_time": "2009-07-16T20:12:51", "upload_time_iso_8601": "2009-07-16T20:12:51.595577Z", "url": "https://files.pythonhosted.org/packages/1c/3f/dc5159e040956b585751231528e73ce688e398227e5e313e3642a2d21def/TracGViz-1.3.3.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d55b6a5c7e84ebfd0f7ba27d4d109f2", "sha256": "2fcbdf5bf193d0e823a4078cc25b8da89fd5973945b9b733419dcee2c40e5f29"}, "downloads": -1, "filename": "TracGViz-1.3.3.tar.gz", "has_sig": false, "md5_digest": "4d55b6a5c7e84ebfd0f7ba27d4d109f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117505, "upload_time": "2009-07-16T20:12:31", "upload_time_iso_8601": "2009-07-16T20:12:31.205121Z", "url": "https://files.pythonhosted.org/packages/7a/8a/6469bd7c13149569b91a62218eecc89121d0b87f018072c1db725c2f2851/TracGViz-1.3.3.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4a5d64b71e6e54caf88553ea527270b", "sha256": "10d741a62d611113eda5d87cd596e27bf1d2c6dfd2bb502f03bd8850083ba6a8"}, "downloads": -1, "filename": "TracGViz-1.3.3.zip", "has_sig": false, "md5_digest": "c4a5d64b71e6e54caf88553ea527270b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137332, "upload_time": "2009-07-16T20:11:48", "upload_time_iso_8601": "2009-07-16T20:11:48.091954Z", "url": "https://files.pythonhosted.org/packages/1e/93/f0328de23838b610e53bd270e3843f4bece4421a860b94755ce31cbd6b10/TracGViz-1.3.3.zip", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "ee0a0fc435f6f4892c6920c7b71c51a5", "sha256": "139836b198f22219f25c80971fa5595674d930ff879b5a560ba04e58f7e9e06a"}, "downloads": -1, "filename": "TracGViz-1.3.4-py2.5.egg", "has_sig": false, "md5_digest": "ee0a0fc435f6f4892c6920c7b71c51a5", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 232707, "upload_time": "2009-07-30T22:19:46", "upload_time_iso_8601": "2009-07-30T22:19:46.480319Z", "url": "https://files.pythonhosted.org/packages/56/7e/054463ba1fe873d6285a34fbbd5c9bc33357be6341006aa5dc89ab43faab/TracGViz-1.3.4-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "da941d484c4d1a604ed27f666e7fa639", "sha256": "8c4fa553b262712f433a1e749251b530f5687cd5b7fefcf86f9ef0db94617789"}, "downloads": -1, "filename": "TracGViz-1.3.4.tar.bz2", "has_sig": false, "md5_digest": "da941d484c4d1a604ed27f666e7fa639", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94370, "upload_time": "2009-07-30T22:20:05", "upload_time_iso_8601": "2009-07-30T22:20:05.956977Z", "url": "https://files.pythonhosted.org/packages/5e/dd/5100b6cd02992479647d209327d75c9073a392cb78bfc4427f8da9c474d2/TracGViz-1.3.4.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "53778e5c2b3e4fa2b01fdbb1495a7f90", "sha256": "9bbd3c6bf57151f2e6e35d670148f5c9f0847238e13df08da52d54d8faa865c8"}, "downloads": -1, "filename": "TracGViz-1.3.4.tar.gz", "has_sig": false, "md5_digest": "53778e5c2b3e4fa2b01fdbb1495a7f90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122124, "upload_time": "2009-07-30T22:20:00", "upload_time_iso_8601": "2009-07-30T22:20:00.444123Z", "url": "https://files.pythonhosted.org/packages/40/2a/6b497a10abbc85accc70f89fcad6ab80e412bcdb04d7ad320489bd8edba2/TracGViz-1.3.4.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3eb5f087f70d2c510553d0683e0686b", "sha256": "0bb3b4144d0957a2cc827c58a0afbd31b559bfce4c359171efa1b23902f4d44f"}, "downloads": -1, "filename": "TracGViz-1.3.4.zip", "has_sig": false, "md5_digest": "b3eb5f087f70d2c510553d0683e0686b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 142206, "upload_time": "2009-07-30T22:19:52", "upload_time_iso_8601": "2009-07-30T22:19:52.478934Z", "url": "https://files.pythonhosted.org/packages/e2/91/9e99f1f7841cddc28598d681ff4f1f5d01f3a1d4a95ac48d4f100a32173d/TracGViz-1.3.4.zip", "yanked": false}], "1.4.2": []}, "urls": [], "timestamp": "Fri May  8 03:48:54 2020"}