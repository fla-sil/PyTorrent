{"info": {"author": "Peter Pentchev", "author_email": "roam@ringlet.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: DFSG approved", "License :: Freely Distributable", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Trivial validation - when the full power of the JSON Schema is not needed\n\nThis library provides a simplistic way to validate a dictionary against\nsomething resembling a schema - a dictionary describing the desired data\nstructure by example.\n\nThe main entry point is the `validate()` function, but the various\n`validate_*()` functions may be invoked directly with appropriate\narguments.\n\nThe schema used for validation is a dictionary (the top-level object must\nbe a dictionary). For the present, the keys may only be strings.\nA special case of a dictionary with a single key `*` means any value for\na key will be accepted. Otherwise, all keys with names not starting with\na `?` character are mandatory, and any keys with names starting with\na `?` character are optional.\n\nThe dictionary values may be any of:\n\n- a Python type signifying that the value must be an instance thereof\n- a single-element list signifying that the value must be a list with\n  all the elements validated by the same rules as a dictionary value\n  (i.e. one of a Python type, a single-element list, a set, or\n  a dictionary)\n- a set signifying that the value must be exactly equal to one of\n  the set elements, i.e. an enumeration of the allowed values\n- a dictionary with the same semantics as described above\n\nFor example, the following schema:\n\n    {\n        \"name\": str,\n        \"id\": int,\n        \"address\": [str],\n        \"preferences\": {\n            \"meal\": set((\"breakfast\", \"lunch\", \"brunch\")),\n            \"colors\": [{\n                \"name\": str,\n                \"intensity\": set([\"dark\", \"light\"])\n            }]\n        },\n        \"possessions\": {\n            \"*\": int\n        }\n    }\n\n...may be used to validate the following dictionary:\n\n    {\n        \"name\": \"A. N. Nymous\",\n        \"id\": 13,\n        \"address\": [\n            \"42 Nowhere Circle\",\n            \"Notown-at-all\",\n            \"Unnamed territory\"\n        ],\n        \"preferences\": {\n            \"meal\": \"brunch\",\n            \"colors\": [\n                {\"name\": \"blue\", \"intensity\": \"light\"},\n                {\"name\": \"green\", \"intensity\": \"dark\"}\n            ]\n        },\n        \"possessions\": {\n            \"pencil\": 4,\n            \"paper\": 0\n        }\n    }", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/ppentchev/python-trivval", "keywords": "validate validation schema", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "trivval", "package_url": "https://pypi.org/project/trivval/", "platform": "", "project_url": "https://pypi.org/project/trivval/", "project_urls": {"Homepage": "https://gitlab.com/ppentchev/python-trivval"}, "release_url": "https://pypi.org/project/trivval/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A library for trivial structure validation", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Trivial validation - when the full power of the JSON Schema is not needed</h1>\n<p>This library provides a simplistic way to validate a dictionary against\nsomething resembling a schema - a dictionary describing the desired data\nstructure by example.</p>\n<p>The main entry point is the <code>validate()</code> function, but the various\n<code>validate_*()</code> functions may be invoked directly with appropriate\narguments.</p>\n<p>The schema used for validation is a dictionary (the top-level object must\nbe a dictionary). For the present, the keys may only be strings.\nA special case of a dictionary with a single key <code>*</code> means any value for\na key will be accepted. Otherwise, all keys with names not starting with\na <code>?</code> character are mandatory, and any keys with names starting with\na <code>?</code> character are optional.</p>\n<p>The dictionary values may be any of:</p>\n<ul>\n<li>a Python type signifying that the value must be an instance thereof</li>\n<li>a single-element list signifying that the value must be a list with\nall the elements validated by the same rules as a dictionary value\n(i.e. one of a Python type, a single-element list, a set, or\na dictionary)</li>\n<li>a set signifying that the value must be exactly equal to one of\nthe set elements, i.e. an enumeration of the allowed values</li>\n<li>a dictionary with the same semantics as described above</li>\n</ul>\n<p>For example, the following schema:</p>\n<pre><code>{\n    \"name\": str,\n    \"id\": int,\n    \"address\": [str],\n    \"preferences\": {\n        \"meal\": set((\"breakfast\", \"lunch\", \"brunch\")),\n        \"colors\": [{\n            \"name\": str,\n            \"intensity\": set([\"dark\", \"light\"])\n        }]\n    },\n    \"possessions\": {\n        \"*\": int\n    }\n}\n</code></pre>\n<p>...may be used to validate the following dictionary:</p>\n<pre><code>{\n    \"name\": \"A. N. Nymous\",\n    \"id\": 13,\n    \"address\": [\n        \"42 Nowhere Circle\",\n        \"Notown-at-all\",\n        \"Unnamed territory\"\n    ],\n    \"preferences\": {\n        \"meal\": \"brunch\",\n        \"colors\": [\n            {\"name\": \"blue\", \"intensity\": \"light\"},\n            {\"name\": \"green\", \"intensity\": \"dark\"}\n        ]\n    },\n    \"possessions\": {\n        \"pencil\": 4,\n        \"paper\": 0\n    }\n}\n</code></pre>\n\n          </div>"}, "last_serial": 7017976, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8d385cf9181566d9108f6aeed571509c", "sha256": "33f2b7354875c5231b0857bfb7f6e22c276a9105f34f8b04b00f3856b30d2d18"}, "downloads": -1, "filename": "trivval-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8d385cf9181566d9108f6aeed571509c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 5660, "upload_time": "2020-04-14T11:23:06", "upload_time_iso_8601": "2020-04-14T11:23:06.227761Z", "url": "https://files.pythonhosted.org/packages/db/e4/b4c0938e5b48313ea2403b3c7279e0ff08eafca5c9eefbd2027f68fde75a/trivval-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1beb09d18fdb302601458ceaab3ff4a", "sha256": "4b9c349e2312b7171b5372445c8f63f1e86d7f9680b5ce20ffa3322d23a81312"}, "downloads": -1, "filename": "trivval-0.1.0.tar.gz", "has_sig": true, "md5_digest": "c1beb09d18fdb302601458ceaab3ff4a", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 10056, "upload_time": "2020-04-14T11:22:56", "upload_time_iso_8601": "2020-04-14T11:22:56.399153Z", "url": "https://files.pythonhosted.org/packages/fe/e7/2bb747d8530e7f1df08f7763fbe60445be3ba02534a8092288655e3ef77b/trivval-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "9cfd4c8d427fbbc370373fadfc38abab", "sha256": "6ec26665fb74c390b49b47c65567249e79c71a9631411f8e0efc28ccf25be013"}, "downloads": -1, "filename": "trivval-1.0.0-py3-none-any.whl", "has_sig": true, "md5_digest": "9cfd4c8d427fbbc370373fadfc38abab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5429, "upload_time": "2020-04-14T15:40:01", "upload_time_iso_8601": "2020-04-14T15:40:01.024755Z", "url": "https://files.pythonhosted.org/packages/80/e0/b134ead18c50f86115919e191c9c2fe483f664a5998adf2bfe9be856970a/trivval-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c366e293a67080cf6cb39b309c4ee10", "sha256": "3fb2c4982b31198a5f0fc3b9cafbbb4d9848311de07f2b7e9bd924d6f2e24e0e"}, "downloads": -1, "filename": "trivval-1.0.0.tar.gz", "has_sig": true, "md5_digest": "8c366e293a67080cf6cb39b309c4ee10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10828, "upload_time": "2020-04-14T15:39:36", "upload_time_iso_8601": "2020-04-14T15:39:36.852516Z", "url": "https://files.pythonhosted.org/packages/60/66/7eda535283ef0698a6b7e74f7329018df4873c7ff7a9b3b88024218321aa/trivval-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9cfd4c8d427fbbc370373fadfc38abab", "sha256": "6ec26665fb74c390b49b47c65567249e79c71a9631411f8e0efc28ccf25be013"}, "downloads": -1, "filename": "trivval-1.0.0-py3-none-any.whl", "has_sig": true, "md5_digest": "9cfd4c8d427fbbc370373fadfc38abab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5429, "upload_time": "2020-04-14T15:40:01", "upload_time_iso_8601": "2020-04-14T15:40:01.024755Z", "url": "https://files.pythonhosted.org/packages/80/e0/b134ead18c50f86115919e191c9c2fe483f664a5998adf2bfe9be856970a/trivval-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c366e293a67080cf6cb39b309c4ee10", "sha256": "3fb2c4982b31198a5f0fc3b9cafbbb4d9848311de07f2b7e9bd924d6f2e24e0e"}, "downloads": -1, "filename": "trivval-1.0.0.tar.gz", "has_sig": true, "md5_digest": "8c366e293a67080cf6cb39b309c4ee10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10828, "upload_time": "2020-04-14T15:39:36", "upload_time_iso_8601": "2020-04-14T15:39:36.852516Z", "url": "https://files.pythonhosted.org/packages/60/66/7eda535283ef0698a6b7e74f7329018df4873c7ff7a9b3b88024218321aa/trivval-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:50 2020"}