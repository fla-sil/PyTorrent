{"info": {"author": "Joeri Bekker", "author_email": "joeri@maykinmedia.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 1.8", "Framework :: Django :: 2.0", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Communications", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing"], "description": "============\nPython iDEAL\n============\n\n:Version: 0.3.0\n:Download: https://pypi.python.org/pypi/ideal\n:Source: https://github.com/maykinmedia/python-ideal\n:Keywords: python, ideal, django\n\n|build-status| |coverage| |license| |pyversion|\n\nAbout\n=====\n\nImplementation of the iDEAL v3.3.1 specification in Python.\n\nInstallation\n============\n\nYou can install `ideal` either via the Python Package Index (PyPI) or from\nsource.\n\nTo install using ``pip``:\n\n.. code-block:: console\n\n    $ pip install -U ideal\n\nUsage\n=====\n\nIt is assumed you have already requested access at your bank for iDEAL.\n\n#. Install the `ideal` library:\n\n   .. code-block:: console\n\n      $ pip install ideal\n\n#. Generate or locate your certificates (``cert.cer``, and ``priv.pem``) and your bank's public certificate (here named\n   ``ideal_v3.cer`` but depends on your bank), and place them in a folder where your web application can access them.\n\n#. Create a config file called ``ideal.cfg`` (or copy and modify the ``ideal-example.cfg``)::\n\n    [ideal]\n    debug = 1\n    private_key_file = priv.pem\n    private_key_password = secret\n    private_certificate = cert.cer\n    certificates = ideal_v3.cer\n    merchant_id = 123456789\n    sub_id = 0\n    merchant_return_url = https://www.example.com/ideal/callback/\n    acquirer = ING\n\n4. In Python, make sure your settings are initialized by loading the config file:\n\n   .. code-block:: python\n\n    from ideal.conf import settings\n    settings.load('ideal.cfg')\n\n    # You may adjust (or completely define) your settings (capitalized) in Python as well\n    settings.DEBUG = True\n\n5. After your settings are loaded, you can communicate with iDEAL:\n\n   .. code-block:: python\n\n    from ideal.client import IdealClient\n    ideal = IdealClient()\n\n    response = ideal.get_issuers()\n    print response.issuers\n\n\nSettings\n========\n\nThese settings are lower-case and stored in your ``ideal.cfg`` file (or in Django's ``settings.py``, prefixed with\n``IDEAL_``).\n\n*DEBUG* (``boolean``)\n    Uses the test URL of the acquirer if set to ``True``, otherwise the production URL is used (default: ``True``).\n\n*PRIVATE_KEY_FILE* (``string``)\n    Absolute path to the merchant's private key (default: ``priv.pem``).\n\n*PRIVATE_KEY_PASSWORD* (``string``)\n    Password to access the merchant's private key.\n\n*PRIVATE_CERTIFICATE* (``string``)\n    Absolute path to the merchant's private certificate (default: ``cert.cer``).\n\n*CERTIFICATES* (``list`` or comma-separated ``string`` if file config is used)\n    Absolute path the the acquirer's iDEAL certificate (default: ``ideal_v3.cer``).\n\n*MERCHANT_ID* (``string``)\n    The ID of the online shop, received by the acceptor during the iDEAL registration process.\n\n*SUB_ID* (``string``)\n    Sub ID of the online shop, also received during the registration process (default: ``0``).\n\n*MERCHANT_RETURN_URL* (``string``)\n    The callback URL for iDEAL. The customer is redirected to this URL after the payment process at the acquirer.\n\n*EXPIRATION_PERIOD* (``string``)\n    The time a transaction is valid for in ISO 8601 format, minimum is 1 minute, maximum is 1 hour\n    (default: ``PT15M``).\n\n*ACQUIRER* (``string``)\n    Acquirer code to identify the endpoint. Valid values are: [``ING``, ``RABOBANK``] (default: ``None``).\n\n*ACQUIRER_URL* (``string``)\n    Overrides the default acquirer URL and ignores the ``ACQUIRER`` and ``DEBUG`` setting (default: ``None``).\n\n*LANGUAGE* (``string``)\n    Response language in ISO 639-1 format, only Dutch (``nl``) and English (``en``) are supported (default: ``nl``).\n\n\nTesting\n=======\n\nTo run all unit tests, download the entire package and run:\n\n.. code-block:: console\n\n    $ python setup.py test\n\n\nContrib\n=======\n\nDjango\n------\n\n1. All settings can be capitalized and prefixed with ``IDEAL_`` and placed in Django's ``settings.py`` file, rather\n   than using a configuration file. Of course, you may still use the settings file method.\n\n2. Add ``ideal.contrib.django.ideal_compat`` to your ``INSTALLED_APPS``.\n\n3. Run ``python manage.py migrate`` to create the ``Issuer`` table in your database, to store a local\n   copy of all issuers.\n\n4. Run ``python manage.py sync_issuers`` to fill the ``Issuer`` table with a list of issuers.  You should run this\n   command every day or so using a cronjob.\n\n5. You should create a view to handle the iDEAL callback and add the URL (as defined in your settings as\n   ``MERCHANT_RETURN_URL``) to your ``urls.py``. Below, you'll find an example view to redirect the use depending on\n   the transaction status:\n\n   .. code-block:: python\n\n    from django.views.generic.base import RedirectView\n    from ideal.client import IdealClient, TransactionStatus\n    from ideal.exceptions import IdealException\n\n    class IdealCallbackView(RedirectView):\n        permanent = False\n\n        def get_redirect_url(self, **kwargs):\n            \"\"\"\n            Simplistic view to handle the callback. You probably want to update your database with the transaction\n            status as well, or sent a confirmation email, etc.\n            \"\"\"\n            client = IdealClient()\n\n            try:\n                response = client.get_transaction_status(self.request.GET.get('trxid'))\n                if response.status == TransactionStatus.SUCCESS:\n                    # Redirect to some view with a success message.\n                    return '<payment success url>'\n            except IdealException, e:\n                # Do something with the error message.\n                error_message = e.message\n\n            # Redirect to some view with a failure message.\n            return '<payment failed url>'\n\n6. Optionally, you can add the the following to your main ``urls.py`` to test your configuration and perform all iDEAL\n   operations via a web interface:\n\n   .. code-block:: python\n\n    if settings.DEBUG:\n        urlpatterns += [\n            url(r'^ideal/tests/', include('ideal.contrib.django.ideal_compat.test_urls')),\n        ]\n\n7. If you are in DEBUG mode and use ``runserver``, you can point your browser to:\n   ``http://localhost:8000/ideal/tests/``.\n\n\n.. |build-status| image:: https://secure.travis-ci.org/maykinmedia/python-ideal.svg?branch=master\n    :alt: Build status\n    :target: https://travis-ci.org/maykinmedia/python-ideal\n\n.. |coverage| image:: https://codecov.io/github/maykinmedia/python-ideal/coverage.svg?branch=master\n    :target: https://codecov.io/github/maykinmedia/python-ideal?branch=master\n\n.. |license| image:: https://img.shields.io/pypi/l/ideal.svg\n    :alt: MIT License\n    :target: https://opensource.org/licenses/MIT\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/ideal.svg\n    :alt: Supported Python versions\n    :target: http://pypi.python.org/pypi/python-ideal/\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maykinmedia/python-ideal", "keywords": "python ideal django", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ideal", "package_url": "https://pypi.org/project/ideal/", "platform": "any", "project_url": "https://pypi.org/project/ideal/", "project_urls": {"Homepage": "https://github.com/maykinmedia/python-ideal"}, "release_url": "https://pypi.org/project/ideal/0.3.0/", "requires_dist": ["requests (>=1.2.0)", "lxml", "python-dateutil", "pyOpenSSL", "six"], "requires_python": "", "summary": "Implementation of the iDEAL v3.3.1 specification in Python.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th>\n<td>0.3.0</td></tr>\n<tr><th>Download:</th><td><a href=\"https://pypi.python.org/pypi/ideal\" rel=\"nofollow\">https://pypi.python.org/pypi/ideal</a></td>\n</tr>\n<tr><th>Source:</th><td><a href=\"https://github.com/maykinmedia/python-ideal\" rel=\"nofollow\">https://github.com/maykinmedia/python-ideal</a></td>\n</tr>\n<tr><th>Keywords:</th><td>python, ideal, django</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://travis-ci.org/maykinmedia/python-ideal\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4416d9075d3ed47437c3492195c72bee4c97bc6c/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6d61796b696e6d656469612f707974686f6e2d696465616c2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/github/maykinmedia/python-ideal?branch=master\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f15bef2ec513f033f724aba49cf6073d39448291/68747470733a2f2f636f6465636f762e696f2f6769746875622f6d61796b696e6d656469612f707974686f6e2d696465616c2f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8b1b74877709ea619597833abb2f1db52f21923/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f696465616c2e737667\"></a> <a href=\"http://pypi.python.org/pypi/python-ideal/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99dddd49355fb6c4a18610eb50796eced53790d4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f696465616c2e737667\"></a></p>\n<div id=\"about\">\n<h2>About</h2>\n<p>Implementation of the iDEAL v3.3.1 specification in Python.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install <cite>ideal</cite> either via the Python Package Index (PyPI) or from\nsource.</p>\n<p>To install using <tt>pip</tt>:</p>\n<pre><span class=\"gp\">$</span> pip install -U ideal\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>It is assumed you have already requested access at your bank for iDEAL.</p>\n<ol>\n<li><p>Install the <cite>ideal</cite> library:</p>\n<pre><span class=\"gp\">$</span> pip install ideal\n</pre>\n</li>\n<li><p>Generate or locate your certificates (<tt>cert.cer</tt>, and <tt>priv.pem</tt>) and your bank\u2019s public certificate (here named\n<tt>ideal_v3.cer</tt> but depends on your bank), and place them in a folder where your web application can access them.</p>\n</li>\n<li><p>Create a config file called <tt>ideal.cfg</tt> (or copy and modify the <tt><span class=\"pre\">ideal-example.cfg</span></tt>):</p>\n<pre>[ideal]\ndebug = 1\nprivate_key_file = priv.pem\nprivate_key_password = secret\nprivate_certificate = cert.cer\ncertificates = ideal_v3.cer\nmerchant_id = 123456789\nsub_id = 0\nmerchant_return_url = https://www.example.com/ideal/callback/\nacquirer = ING\n</pre>\n</li>\n</ol>\n<ol>\n<li><p>In Python, make sure your settings are initialized by loading the config file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ideal.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'ideal.cfg'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You may adjust (or completely define) your settings (capitalized) in Python as well</span>\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</li>\n<li><p>After your settings are loaded, you can communicate with iDEAL:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ideal.client</span> <span class=\"kn\">import</span> <span class=\"n\">IdealClient</span>\n<span class=\"n\">ideal</span> <span class=\"o\">=</span> <span class=\"n\">IdealClient</span><span class=\"p\">()</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">ideal</span><span class=\"o\">.</span><span class=\"n\">get_issuers</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">issuers</span>\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>These settings are lower-case and stored in your <tt>ideal.cfg</tt> file (or in Django\u2019s <tt>settings.py</tt>, prefixed with\n<tt>IDEAL_</tt>).</p>\n<dl>\n<dt><em>DEBUG</em> (<tt>boolean</tt>)</dt>\n<dd>Uses the test URL of the acquirer if set to <tt>True</tt>, otherwise the production URL is used (default: <tt>True</tt>).</dd>\n<dt><em>PRIVATE_KEY_FILE</em> (<tt>string</tt>)</dt>\n<dd>Absolute path to the merchant\u2019s private key (default: <tt>priv.pem</tt>).</dd>\n<dt><em>PRIVATE_KEY_PASSWORD</em> (<tt>string</tt>)</dt>\n<dd>Password to access the merchant\u2019s private key.</dd>\n<dt><em>PRIVATE_CERTIFICATE</em> (<tt>string</tt>)</dt>\n<dd>Absolute path to the merchant\u2019s private certificate (default: <tt>cert.cer</tt>).</dd>\n<dt><em>CERTIFICATES</em> (<tt>list</tt> or comma-separated <tt>string</tt> if file config is used)</dt>\n<dd>Absolute path the the acquirer\u2019s iDEAL certificate (default: <tt>ideal_v3.cer</tt>).</dd>\n<dt><em>MERCHANT_ID</em> (<tt>string</tt>)</dt>\n<dd>The ID of the online shop, received by the acceptor during the iDEAL registration process.</dd>\n<dt><em>SUB_ID</em> (<tt>string</tt>)</dt>\n<dd>Sub ID of the online shop, also received during the registration process (default: <tt>0</tt>).</dd>\n<dt><em>MERCHANT_RETURN_URL</em> (<tt>string</tt>)</dt>\n<dd>The callback URL for iDEAL. The customer is redirected to this URL after the payment process at the acquirer.</dd>\n<dt><em>EXPIRATION_PERIOD</em> (<tt>string</tt>)</dt>\n<dd>The time a transaction is valid for in ISO 8601 format, minimum is 1 minute, maximum is 1 hour\n(default: <tt>PT15M</tt>).</dd>\n<dt><em>ACQUIRER</em> (<tt>string</tt>)</dt>\n<dd>Acquirer code to identify the endpoint. Valid values are: [<tt>ING</tt>, <tt>RABOBANK</tt>] (default: <tt>None</tt>).</dd>\n<dt><em>ACQUIRER_URL</em> (<tt>string</tt>)</dt>\n<dd>Overrides the default acquirer URL and ignores the <tt>ACQUIRER</tt> and <tt>DEBUG</tt> setting (default: <tt>None</tt>).</dd>\n<dt><em>LANGUAGE</em> (<tt>string</tt>)</dt>\n<dd>Response language in ISO 639-1 format, only Dutch (<tt>nl</tt>) and English (<tt>en</tt>) are supported (default: <tt>nl</tt>).</dd>\n</dl>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>To run all unit tests, download the entire package and run:</p>\n<pre><span class=\"gp\">$</span> python setup.py <span class=\"nb\">test</span>\n</pre>\n</div>\n<div id=\"contrib\">\n<h2>Contrib</h2>\n<h2 id=\"django\"><span class=\"section-subtitle\">Django</span></h2>\n<ol>\n<li><p>All settings can be capitalized and prefixed with <tt>IDEAL_</tt> and placed in Django\u2019s <tt>settings.py</tt> file, rather\nthan using a configuration file. Of course, you may still use the settings file method.</p>\n</li>\n<li><p>Add <tt>ideal.contrib.django.ideal_compat</tt> to your <tt>INSTALLED_APPS</tt>.</p>\n</li>\n<li><p>Run <tt>python manage.py migrate</tt> to create the <tt>Issuer</tt> table in your database, to store a local\ncopy of all issuers.</p>\n</li>\n<li><p>Run <tt>python manage.py sync_issuers</tt> to fill the <tt>Issuer</tt> table with a list of issuers.  You should run this\ncommand every day or so using a cronjob.</p>\n</li>\n<li><p>You should create a view to handle the iDEAL callback and add the URL (as defined in your settings as\n<tt>MERCHANT_RETURN_URL</tt>) to your <tt>urls.py</tt>. Below, you\u2019ll find an example view to redirect the use depending on\nthe transaction status:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.base</span> <span class=\"kn\">import</span> <span class=\"n\">RedirectView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ideal.client</span> <span class=\"kn\">import</span> <span class=\"n\">IdealClient</span><span class=\"p\">,</span> <span class=\"n\">TransactionStatus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ideal.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">IdealException</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">IdealCallbackView</span><span class=\"p\">(</span><span class=\"n\">RedirectView</span><span class=\"p\">):</span>\n    <span class=\"n\">permanent</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_redirect_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        Simplistic view to handle the callback. You probably want to update your database with the transaction\n        status as well, or sent a confirmation email, etc.\n        \"\"\"</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">IdealClient</span><span class=\"p\">()</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_transaction_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'trxid'</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">TransactionStatus</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Redirect to some view with a success message.</span>\n                <span class=\"k\">return</span> <span class=\"s1\">'&lt;payment success url&gt;'</span>\n        <span class=\"k\">except</span> <span class=\"n\">IdealException</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Do something with the error message.</span>\n            <span class=\"n\">error_message</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span>\n\n        <span class=\"c1\"># Redirect to some view with a failure message.</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'&lt;payment failed url&gt;'</span>\n</pre>\n</li>\n<li><p>Optionally, you can add the the following to your main <tt>urls.py</tt> to test your configuration and perform all iDEAL\noperations via a web interface:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">:</span>\n    <span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^ideal/tests/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'ideal.contrib.django.ideal_compat.test_urls'</span><span class=\"p\">)),</span>\n    <span class=\"p\">]</span>\n</pre>\n</li>\n<li><p>If you are in DEBUG mode and use <tt>runserver</tt>, you can point your browser to:\n<tt><span class=\"pre\">http://localhost:8000/ideal/tests/</span></tt>.</p>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 5181000, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "c74a4fe0c54c7aad52a80bfb35aa0f5c", "sha256": "feef2f11923df0066af3000c737b8f008c96b6513cdda7414bcf424b31625009"}, "downloads": -1, "filename": "ideal-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c74a4fe0c54c7aad52a80bfb35aa0f5c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43750, "upload_time": "2018-02-12T16:38:38", "upload_time_iso_8601": "2018-02-12T16:38:38.605994Z", "url": "https://files.pythonhosted.org/packages/1c/0d/7d9534f4a9949d8151bdd27629f0e398e35012b4b32f9f4da25ad98c35e7/ideal-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ec68152c6fbf7dca8324004cf77f931", "sha256": "3f3820f82b4f8baaafa8ac901dbe3d799064c6424e79a046a79c71c79e6bf8c1"}, "downloads": -1, "filename": "ideal-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7ec68152c6fbf7dca8324004cf77f931", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33543, "upload_time": "2018-02-12T16:38:41", "upload_time_iso_8601": "2018-02-12T16:38:41.456170Z", "url": "https://files.pythonhosted.org/packages/3d/66/8ad3b9c1bdae895a8e6fe0a4b47cbf42a8b20bcc4280a118ade85daf9e39/ideal-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bcc1541191586fd46b9324daebc295fa", "sha256": "445212b3c312b9094e399fc9041710d24645bb76714a8e09632ca2679a5d54b1"}, "downloads": -1, "filename": "ideal-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bcc1541191586fd46b9324daebc295fa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44306, "upload_time": "2018-02-21T17:13:11", "upload_time_iso_8601": "2018-02-21T17:13:11.492623Z", "url": "https://files.pythonhosted.org/packages/5e/dd/b671144cea8b5143b9a5eaf8d5efd56f6cbc0f8780b39bdb48dafff9a4fa/ideal-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "544db84102d840ee8320d4b23bb5913b", "sha256": "f699475e0ae592056ed9e4a28d2d32ffc91950e4ed9de920ca9c7ff853a40749"}, "downloads": -1, "filename": "ideal-0.3.0.tar.gz", "has_sig": false, "md5_digest": "544db84102d840ee8320d4b23bb5913b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34177, "upload_time": "2018-02-21T17:13:13", "upload_time_iso_8601": "2018-02-21T17:13:13.598317Z", "url": "https://files.pythonhosted.org/packages/f3/0a/42d7b3d2adad42ab0306b8e0e8502ee128a2422a157675a7ef28f32117e4/ideal-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bcc1541191586fd46b9324daebc295fa", "sha256": "445212b3c312b9094e399fc9041710d24645bb76714a8e09632ca2679a5d54b1"}, "downloads": -1, "filename": "ideal-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bcc1541191586fd46b9324daebc295fa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44306, "upload_time": "2018-02-21T17:13:11", "upload_time_iso_8601": "2018-02-21T17:13:11.492623Z", "url": "https://files.pythonhosted.org/packages/5e/dd/b671144cea8b5143b9a5eaf8d5efd56f6cbc0f8780b39bdb48dafff9a4fa/ideal-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "544db84102d840ee8320d4b23bb5913b", "sha256": "f699475e0ae592056ed9e4a28d2d32ffc91950e4ed9de920ca9c7ff853a40749"}, "downloads": -1, "filename": "ideal-0.3.0.tar.gz", "has_sig": false, "md5_digest": "544db84102d840ee8320d4b23bb5913b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34177, "upload_time": "2018-02-21T17:13:13", "upload_time_iso_8601": "2018-02-21T17:13:13.598317Z", "url": "https://files.pythonhosted.org/packages/f3/0a/42d7b3d2adad42ab0306b8e0e8502ee128a2422a157675a7ef28f32117e4/ideal-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:56 2020"}