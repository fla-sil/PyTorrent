{"info": {"author": "Srikandan Raju, Sathish Anandha", "author_email": "kandan.sri15@gmail.com, sathishvp7@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Model Performance Investigator\n\n\n## Short Description\n\n        Model Performance Investigator is used to analyse the performance of Machine Learning and\n    Deep learning models. It gives the user, basic idea how the model performance on given data.\n    So that user can start work on the right model.\n        Current Version supports Regression and Classification type of problems with \n    Visualization support.\n\n\n## Installation\n\n    pip install model-performance-investigator\n\n\n## How to use ?\n\n    * Import the package.\n        from model_analyzer.ml_models import MLPredictor as ml\n\n    * Call the required function, assign it to a variable and run.\n\n\n## Functions ?\n\n    1. predector()  ->  Used to get Score for the Models. Returns score data\n                        if error is not present else returns error message.\n\n    2. draw_plot()  ->  Used to plot Distribution plot of the Features. Return \n                        PDF file if correct dataframe send with only 'int' \n                        featurs only else returns error message.\n\n\n## Parameters ?\n\n    1. predector():\n        * prob_type -> It is mandatory parameter.\n\n                       TYPE : String\n\n                       KEYS :\n                        * regression\n                        * classification      \n\n                       FORMAT :\n                           prob_type = ['regression']\n\n        * data -> data must contain \"train_X, train_y, test_x\". train_X, train_y is for fitting\n                   the model and test_x is for predicting. It is mandatory.\n\n                   TYPE : List\n\n                   FORMAT :\n                       data = [train_X, train_y, test_x]\n\n        * alg_type -> Type of the algorithm. It is optional parameter. Provide the parameter\n                      values in list.  \n                      Default is \"Linear Regression\" algorithm.\n\n                      TYPE : List\n\n                      KEYS :\n                         Regression :\n                             Algorithm Name             | Parameter \n                             ---------------------------|------------------------\n                             Linear Regression          | linear\n                             Polynomial Regression      | polynomial\n                             Redige Regression          | ridge\n                             Lasso Regression           | lasso\n                             ElasticNet Regression      | elasticnet\n                             Random Forest Regression   | random_forest_regressor\n                             XG Boost Regressor         | xgb_regressor\n\n                        Classification :\n                             Algorithm Name             | Parameter \n                             ---------------------------|------------------------\n                             Logistic                   | logistic\n                             Decision Tree              | decision_tree\n                             Random Forest              | random_forest\n                             Naive Bayes                | naive_bayes\n                             SVC                        | svc\n                             XGB Classifier             | xgb_classifier\n\n                     FORMAT :\n                        alg_type = ['linear', 'polynomial']\n\n\n        * score_type -> Type of the score. It is optional parameter. Provide the parameter\n                        values in list. Default is \"r2\" algorithm.\n\n                        TYPE : List\n\n                        1. Regression:\n                           It Supports:\n                            * r2\n                            * explained_variance\n                            * max_error\n                            * neg_mean_absolute_error\n                            * neg_mean_squared_error\n                            * neg_mean_squared_log_error\n                            * neg_median_absolute_error\n                            * neg_mean_poisson_deviance\n                            * neg_mean_gamma_deviance\n\n                        2. Classification:\n                            It Supports:\n                            * jaccard\n                            * f1\n                            * neg_log_loss\n                            * roc_auc\n                            * accuracy\n                            * balanced_accuracy\n                            * average_precision\n\n                        FORMAT :\n                            score_type = ['explained_variance', 'neg_mean_poisson_deviance']\n\n\n        * tune_param ->  Tuning Parameters for the model. It is an optional. By Default, \n                         this package uses some basic parameters for each models.\n                         User can provide own Tunning Parameters.\n\n                         TYPE : List of Dict\n\n                         Template:\n                             tune_param = {Name of the model: {parameters}}\n                             Name of the model -> should be similar like alg_type.\n\n                         FORMAT:\n                             linear_tune_param = {\n                                  \"fit_intercept\"       : [True, False],\n                                  \"normalize\"           : [True, False],\n                                  \"copy_X\"              : [True, False],\n                                  \"n_jobs\"              : [ -1]\n                                }\n                            lasso_tune_param = {\n                                  \"alpha\":[1e-15, 1e-10, 1e-8, 1e-3, 1e-2, \n                                           1, 5, 10, 15, 20, 40, 50,\n                                           85, 100, 300, 500, 1000\n                                           ]\n                                }\n\n                             tune_param = {'linear': linear_tune_param, \n                                          'lasso': lasso_tune_param}\n\n                         Note : User don't have to specify tunning parameters for all the\n                                models used in 'alg_type'. If tunning parameters are not provided\n                                then this package use default tunning parameters.\n\n        * set_plot -> Creates Residual Plot for regression model only.\n                      By default, it is Set as True.\n\n                      TYPE : Boolean\n\n                      FORMAT :\n                         set_plot = True\n\n\n    EXAMPLE :\n        from model_analyzer.ml_models import MLPredictor as ml\n\n        data = [train_X, train_y, test_x]\n        new_out = ml.predector('regression', data, alg_type=['linear','lasso'], \n                  score_type=['r2'], tune_param='default', set_plot=True)\n\n\n    2. draw_plot():\n        * prob_type -> Currently it supports 'regression' only. It is mandatory parameter.\n\n                       TYPE : String\n\n                       FORMAT :\n                         prob_type = 'regression'\n\n        * datafarme -> Used needs to send Dataframe objetc. All the features must be \n                       integers only.\n\n        * columns -> It is optional parameter. By default all the columns are selected.\n                     User can send required features alone.\n\n                     TYPE : List\n\n                     FORMAT :\n                         columns = ['ColA', 'ColB', 'ColC']\n\n        * plot_type -> It is optional parameter. By default 'Histograme' plot is selected.\n                       User can select Histograme or Scatter plots\n\n                       TYPE : String\n\n                       Keys :\n                           Histograme -> hist\n                           Scatter    -> scatter\n\n                       FORMAT :\n                         plot_type = 'hist'\n\n\n    EXAMPLE :\n        from model_analyzer.ml_models import MLPredictor as ml\n\n        output = ml.draw_plot('regression', dataframe, columns =  ['ColA', 'ColB', 'ColC'],\n                 plot_type='hist')\n\n\n## Project History\n\n        The project was started in 2019 by Srikandan Raju and Sathish Anandha.\n\n\n## NOTE :\n        Download latest version only.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/srikandan/model-evaluation", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "model-performance-investigator", "package_url": "https://pypi.org/project/model-performance-investigator/", "platform": "", "project_url": "https://pypi.org/project/model-performance-investigator/", "project_urls": {"Homepage": "https://github.com/srikandan/model-evaluation"}, "release_url": "https://pypi.org/project/model-performance-investigator/1.0.5/", "requires_dist": ["tensorflow", "keras", "mxnet", "scikit-learn", "numpy", "pandas", "statsmodels", "xgboost", "scipy"], "requires_python": ">=3.6", "summary": "Package give idea of a models performance based on given data", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Model Performance Investigator</h1>\n<h2>Short Description</h2>\n<pre><code>    Model Performance Investigator is used to analyse the performance of Machine Learning and\nDeep learning models. It gives the user, basic idea how the model performance on given data.\nSo that user can start work on the right model.\n    Current Version supports Regression and Classification type of problems with \nVisualization support.\n</code></pre>\n<h2>Installation</h2>\n<pre><code>pip install model-performance-investigator\n</code></pre>\n<h2>How to use ?</h2>\n<pre><code>* Import the package.\n    from model_analyzer.ml_models import MLPredictor as ml\n\n* Call the required function, assign it to a variable and run.\n</code></pre>\n<h2>Functions ?</h2>\n<pre><code>1. predector()  -&gt;  Used to get Score for the Models. Returns score data\n                    if error is not present else returns error message.\n\n2. draw_plot()  -&gt;  Used to plot Distribution plot of the Features. Return \n                    PDF file if correct dataframe send with only 'int' \n                    featurs only else returns error message.\n</code></pre>\n<h2>Parameters ?</h2>\n<pre><code>1. predector():\n    * prob_type -&gt; It is mandatory parameter.\n\n                   TYPE : String\n\n                   KEYS :\n                    * regression\n                    * classification      \n\n                   FORMAT :\n                       prob_type = ['regression']\n\n    * data -&gt; data must contain \"train_X, train_y, test_x\". train_X, train_y is for fitting\n               the model and test_x is for predicting. It is mandatory.\n\n               TYPE : List\n\n               FORMAT :\n                   data = [train_X, train_y, test_x]\n\n    * alg_type -&gt; Type of the algorithm. It is optional parameter. Provide the parameter\n                  values in list.  \n                  Default is \"Linear Regression\" algorithm.\n\n                  TYPE : List\n\n                  KEYS :\n                     Regression :\n                         Algorithm Name             | Parameter \n                         ---------------------------|------------------------\n                         Linear Regression          | linear\n                         Polynomial Regression      | polynomial\n                         Redige Regression          | ridge\n                         Lasso Regression           | lasso\n                         ElasticNet Regression      | elasticnet\n                         Random Forest Regression   | random_forest_regressor\n                         XG Boost Regressor         | xgb_regressor\n\n                    Classification :\n                         Algorithm Name             | Parameter \n                         ---------------------------|------------------------\n                         Logistic                   | logistic\n                         Decision Tree              | decision_tree\n                         Random Forest              | random_forest\n                         Naive Bayes                | naive_bayes\n                         SVC                        | svc\n                         XGB Classifier             | xgb_classifier\n\n                 FORMAT :\n                    alg_type = ['linear', 'polynomial']\n\n\n    * score_type -&gt; Type of the score. It is optional parameter. Provide the parameter\n                    values in list. Default is \"r2\" algorithm.\n\n                    TYPE : List\n\n                    1. Regression:\n                       It Supports:\n                        * r2\n                        * explained_variance\n                        * max_error\n                        * neg_mean_absolute_error\n                        * neg_mean_squared_error\n                        * neg_mean_squared_log_error\n                        * neg_median_absolute_error\n                        * neg_mean_poisson_deviance\n                        * neg_mean_gamma_deviance\n\n                    2. Classification:\n                        It Supports:\n                        * jaccard\n                        * f1\n                        * neg_log_loss\n                        * roc_auc\n                        * accuracy\n                        * balanced_accuracy\n                        * average_precision\n\n                    FORMAT :\n                        score_type = ['explained_variance', 'neg_mean_poisson_deviance']\n\n\n    * tune_param -&gt;  Tuning Parameters for the model. It is an optional. By Default, \n                     this package uses some basic parameters for each models.\n                     User can provide own Tunning Parameters.\n\n                     TYPE : List of Dict\n\n                     Template:\n                         tune_param = {Name of the model: {parameters}}\n                         Name of the model -&gt; should be similar like alg_type.\n\n                     FORMAT:\n                         linear_tune_param = {\n                              \"fit_intercept\"       : [True, False],\n                              \"normalize\"           : [True, False],\n                              \"copy_X\"              : [True, False],\n                              \"n_jobs\"              : [ -1]\n                            }\n                        lasso_tune_param = {\n                              \"alpha\":[1e-15, 1e-10, 1e-8, 1e-3, 1e-2, \n                                       1, 5, 10, 15, 20, 40, 50,\n                                       85, 100, 300, 500, 1000\n                                       ]\n                            }\n\n                         tune_param = {'linear': linear_tune_param, \n                                      'lasso': lasso_tune_param}\n\n                     Note : User don't have to specify tunning parameters for all the\n                            models used in 'alg_type'. If tunning parameters are not provided\n                            then this package use default tunning parameters.\n\n    * set_plot -&gt; Creates Residual Plot for regression model only.\n                  By default, it is Set as True.\n\n                  TYPE : Boolean\n\n                  FORMAT :\n                     set_plot = True\n\n\nEXAMPLE :\n    from model_analyzer.ml_models import MLPredictor as ml\n\n    data = [train_X, train_y, test_x]\n    new_out = ml.predector('regression', data, alg_type=['linear','lasso'], \n              score_type=['r2'], tune_param='default', set_plot=True)\n\n\n2. draw_plot():\n    * prob_type -&gt; Currently it supports 'regression' only. It is mandatory parameter.\n\n                   TYPE : String\n\n                   FORMAT :\n                     prob_type = 'regression'\n\n    * datafarme -&gt; Used needs to send Dataframe objetc. All the features must be \n                   integers only.\n\n    * columns -&gt; It is optional parameter. By default all the columns are selected.\n                 User can send required features alone.\n\n                 TYPE : List\n\n                 FORMAT :\n                     columns = ['ColA', 'ColB', 'ColC']\n\n    * plot_type -&gt; It is optional parameter. By default 'Histograme' plot is selected.\n                   User can select Histograme or Scatter plots\n\n                   TYPE : String\n\n                   Keys :\n                       Histograme -&gt; hist\n                       Scatter    -&gt; scatter\n\n                   FORMAT :\n                     plot_type = 'hist'\n\n\nEXAMPLE :\n    from model_analyzer.ml_models import MLPredictor as ml\n\n    output = ml.draw_plot('regression', dataframe, columns =  ['ColA', 'ColB', 'ColC'],\n             plot_type='hist')\n</code></pre>\n<h2>Project History</h2>\n<pre><code>    The project was started in 2019 by Srikandan Raju and Sathish Anandha.\n</code></pre>\n<h2>NOTE :</h2>\n<pre><code>    Download latest version only.\n</code></pre>\n\n          </div>"}, "last_serial": 6592680, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "a4863876da898ff1672c45f46ca15051", "sha256": "94250e132b58cdc9f943bf790b11c6b8ee297678133cbad009356b8c24c6706e"}, "downloads": -1, "filename": "model_performance_investigator-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a4863876da898ff1672c45f46ca15051", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12735, "upload_time": "2020-02-02T16:16:03", "upload_time_iso_8601": "2020-02-02T16:16:03.159585Z", "url": "https://files.pythonhosted.org/packages/8b/e4/cfdae4cf193412f331363e4512ae9ec8d152fc1b12ac7265375908483326/model_performance_investigator-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "158e51a8216f4624e722420fbaad7b8a", "sha256": "7c6579b135bda33564c86ae2b1f0589a89257e7b09b33c07554cb94a68cdd404"}, "downloads": -1, "filename": "model-performance-investigator-1.0.1.tar.gz", "has_sig": false, "md5_digest": "158e51a8216f4624e722420fbaad7b8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7431, "upload_time": "2020-02-02T16:16:04", "upload_time_iso_8601": "2020-02-02T16:16:04.907272Z", "url": "https://files.pythonhosted.org/packages/3d/12/1fa88d652828ccdbbb719ab74bcb8a45c3654d2e3686e8b60d6e3d657a70/model-performance-investigator-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "99c09ed7613a681a7d964062b0c1ed9a", "sha256": "c070932e04f50841d4c10cf31599678d99ca65738483d6e88b4ad6fbc9dd31c3"}, "downloads": -1, "filename": "model_performance_investigator-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "99c09ed7613a681a7d964062b0c1ed9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16923, "upload_time": "2020-02-04T02:41:42", "upload_time_iso_8601": "2020-02-04T02:41:42.602787Z", "url": "https://files.pythonhosted.org/packages/dd/bc/bfe584a924159a4f6c7bec2f42946ff8a64407201a6192d74900aa47539a/model_performance_investigator-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a97b45ec70450af68d691f18e4d905ae", "sha256": "08db682b0803986315f2078d691b51e68b90074fd6b1504fc3e90216b83f52ab"}, "downloads": -1, "filename": "model-performance-investigator-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a97b45ec70450af68d691f18e4d905ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9212, "upload_time": "2020-02-04T02:41:44", "upload_time_iso_8601": "2020-02-04T02:41:44.475894Z", "url": "https://files.pythonhosted.org/packages/47/58/e3b938a7792c1daf0aa0b076325b52ef48b0bcf5ef9e69120b7ab90f08b1/model-performance-investigator-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "98acc0a351f478d22a80d463132628b3", "sha256": "759cea12257abfa9a228f6ce6d26d6da9c3c183ced6cbc7282c0f99d5a7acd49"}, "downloads": -1, "filename": "model_performance_investigator-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "98acc0a351f478d22a80d463132628b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19915, "upload_time": "2020-02-07T19:39:03", "upload_time_iso_8601": "2020-02-07T19:39:03.381570Z", "url": "https://files.pythonhosted.org/packages/6a/cc/f255a6a8fe67127acc7c2ddcc048748a1d4dd116616a68486d6ef1209d5e/model_performance_investigator-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b382c9b6889376f9fa59cf472fd1051", "sha256": "cf9a599015f9220c438078abf83b6b51b7b79ea67c65fc0605b71096e9804c47"}, "downloads": -1, "filename": "model-performance-investigator-1.0.3.tar.gz", "has_sig": false, "md5_digest": "6b382c9b6889376f9fa59cf472fd1051", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12012, "upload_time": "2020-02-07T19:39:04", "upload_time_iso_8601": "2020-02-07T19:39:04.926446Z", "url": "https://files.pythonhosted.org/packages/31/b3/a3d5f3b38371d6b09a482bebaafdca81685f977a3faf3fc1cb6f238ae339/model-performance-investigator-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "e6478e6643a644604a31282d467fc883", "sha256": "1e50e18ff6cea4e6c024a8b5c204d2ff2c7ce6d6c3dbcbc2be58a9a893102005"}, "downloads": -1, "filename": "model_performance_investigator-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e6478e6643a644604a31282d467fc883", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19931, "upload_time": "2020-02-08T05:54:45", "upload_time_iso_8601": "2020-02-08T05:54:45.286628Z", "url": "https://files.pythonhosted.org/packages/b0/a1/ea44bfb3212ea7996f4ae4dd6c206718407df2239e9f299ccaf4b020dbc5/model_performance_investigator-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cea74ba13e778f3afc987024e01f385a", "sha256": "c3a10492fff23856f1d311099ee30399aadb57666ce3e3c4248bc971495ee025"}, "downloads": -1, "filename": "model-performance-investigator-1.0.4.tar.gz", "has_sig": false, "md5_digest": "cea74ba13e778f3afc987024e01f385a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12035, "upload_time": "2020-02-08T05:54:47", "upload_time_iso_8601": "2020-02-08T05:54:47.685754Z", "url": "https://files.pythonhosted.org/packages/bb/b8/10db65d8ecfa2ea76740fdf3d4c894666d51c69ed2ea60dfb1f079ce0028/model-performance-investigator-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "516cbdbb286a9a4ae2e7d554fc210080", "sha256": "23f0c11b9fe08304aaa268f3ca1b02da882b69b37e6b076ef9858cdf43c5b85d"}, "downloads": -1, "filename": "model_performance_investigator-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "516cbdbb286a9a4ae2e7d554fc210080", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19933, "upload_time": "2020-02-08T06:15:55", "upload_time_iso_8601": "2020-02-08T06:15:55.400255Z", "url": "https://files.pythonhosted.org/packages/93/77/ff5451d2d4b8a5602701517a45f680200927062eb9a8e6caec8200c5be75/model_performance_investigator-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f72769397e26959657507fafd9fa6a15", "sha256": "e6f009866bbd35232124d9291a82122e7e9063c23f4a030a9427727ac7efdc92"}, "downloads": -1, "filename": "model-performance-investigator-1.0.5.tar.gz", "has_sig": false, "md5_digest": "f72769397e26959657507fafd9fa6a15", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12022, "upload_time": "2020-02-08T06:15:57", "upload_time_iso_8601": "2020-02-08T06:15:57.434246Z", "url": "https://files.pythonhosted.org/packages/95/2d/7d33a12c8a0327429526114a386e5a6d7af4c88b7d7d2068fa9b830899c4/model-performance-investigator-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "516cbdbb286a9a4ae2e7d554fc210080", "sha256": "23f0c11b9fe08304aaa268f3ca1b02da882b69b37e6b076ef9858cdf43c5b85d"}, "downloads": -1, "filename": "model_performance_investigator-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "516cbdbb286a9a4ae2e7d554fc210080", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19933, "upload_time": "2020-02-08T06:15:55", "upload_time_iso_8601": "2020-02-08T06:15:55.400255Z", "url": "https://files.pythonhosted.org/packages/93/77/ff5451d2d4b8a5602701517a45f680200927062eb9a8e6caec8200c5be75/model_performance_investigator-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f72769397e26959657507fafd9fa6a15", "sha256": "e6f009866bbd35232124d9291a82122e7e9063c23f4a030a9427727ac7efdc92"}, "downloads": -1, "filename": "model-performance-investigator-1.0.5.tar.gz", "has_sig": false, "md5_digest": "f72769397e26959657507fafd9fa6a15", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12022, "upload_time": "2020-02-08T06:15:57", "upload_time_iso_8601": "2020-02-08T06:15:57.434246Z", "url": "https://files.pythonhosted.org/packages/95/2d/7d33a12c8a0327429526114a386e5a6d7af4c88b7d7d2068fa9b830899c4/model-performance-investigator-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:53 2020"}