{"info": {"author": "Danyang Su", "author_email": "fnosdy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# linkalman\n\n`linkalman` is a python package that solves linear structural time series models with Gaussian noises. Compared with some other popular Kalman filter packages written in python, linkalman has a combination of several advantages:\n\n  - Account for partially and fully incomplete measurements \n  - Flexible and convenient model structure\n  - Robust and efficient implementation\n  - Proper implementation for unknown priors\n  - Built-in numerical and EM algorithm\n  - Open-source with a comprehensive user manual \n  - Modular design with intuitive model specification\n\n### Installation\n`linkalman` requires the following packages to run:\n\n  - numpy\n  - pandas\n  - networkx\n  - scipy\n \nTo install `linkalman`, simply use the standard `pip` command:\n\n```sh\n$ pip install linkalman\n```\n### Example\nHere I will provide a simple example using `linkalman`. See [here](https://github.com/DanyangSu/linkalman/tree/master/examples/jupyter_notebooks) for more examples, and [user's manual](https://github.com/DanyangSu/linkalman/blob/master/doc/manual.pdf) for technical details.\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom scipy.optimize import minimize\nfrom linkalman.models import BaseConstantModel as BCM\nimport matplotlib.pyplot as plt\n\n\n# Get data\ndf = pd.read_csv('https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-total-female-births.csv')\ndf['x'] = 1\ndf.set_index('Date', inplace=True)\n```\n\nFirst we define the system dynamics of a Bayesian Structural Time Series (BSTS) model. Here I define a Stochastic linear trend model to extract the trend information from the time series (referring to the example section of [user's manual](https://github.com/DanyangSu/linkalman/blob/master/doc/manual.pdf) for details)\n```python\ndef my_f(theta):\n    sig1 = np.exp(theta[0])\n    sig2 = np.exp(theta[1])\n    sig3 = np.exp(theta[2])\n\n    F = np.array([[1, 1], [0, 1]])\n    Q = np.array([[sig1, 0], [0, sig2]]) \n    R = np.array([[sig3]])\n    H = np.array([[1, 0]])\n    # Collect system matrices\n    M = {'F': F, 'Q': Q, 'H': H, 'R': R}\n\n    return M \n```\nNext we define a solver or optimizer, you can choose any solver you prefer. Here I just use `scipy.optimize.minimize`.\n```python\ndef my_solver(param, obj_func, verbose=False, **kwargs):\n    obj_ = lambda x: -obj_func(x)\n    res = minimize(obj_, param, **kwargs)\n    theta_opt = np.array(res.x)\n    fval_opt = res.fun\n    return theta_opt, fval_opt\n```\nNow we can fit the data. First we initialize the model and feed the system dynamics (`my_f`) and solver (`my_solver`). You may also pass the keyworded arguments to for `my_f` and `my_solver`.\n```python\nmodel = BCM()\nmodel.set_f(my_f)\nmodel.set_solver(my_solver, method='nelder-mead', \n        options={'xatol': 1e-8, 'disp': True, 'maxiter': 10000})\ntheta_init = np.random.rand(3)\nmodel.fit(df, theta_init, y_col=['Births'], x_col=['x'], \n              method='LLY')\ndf_LLY = model.predict(df)\n```\nThat is it! If you want to do additional work, you can do the following to plot a confidence interval around your predictions.\n```python\ndf_LLY['kf_ub'] = df_LLY.Births_filtered + 1.96 * np.sqrt(df_LLY.Births_fvar)\ndf_LLY['kf_lb'] = df_LLY.Births_filtered - 1.96 * np.sqrt(df_LLY.Births_fvar)\ndf_LLY = df_LLY[df_LLY.index > '1959-01-01']\ndf_LLY.index = pd.to_datetime(df_LLY.index)\n\n# Define plot function\ndef simple_plot(df, col_est, col_actual, col_ub, col_lb, label_est,\n                label_actual, title, figsize=(12, 8)):\n    ax = plt.figure(figsize=figsize)\n    plt.plot(df.index, df[col_est], 'r', label=label_est)\n    plt.scatter(df_LLY.index, df[col_actual], s=20, c='b', \n                marker='o', label=label_actual)\n    plt.fill_between(df.index, df[col_ub], df[col_lb], color='g', alpha=0.2)\n    ax.legend(loc='right', fontsize=9)\n    plt.title(title, fontsize=22)\n    plt.show()\nsimple_plot(df_LLY, 'Births_filtered', 'Births', 'kf_ub', 'kf_lb',  \n           'Prediction', 'Births', 'Filtered Births Data')\n```\n\n### License\n\n3-Clause BSD", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/DanyangSu/linkalman/archive/v0.11.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DanyangSu/linkalman", "keywords": "kalman,time series,signal,filter", "license": "3-clause BSD", "maintainer": "", "maintainer_email": "", "name": "linkalman", "package_url": "https://pypi.org/project/linkalman/", "platform": "", "project_url": "https://pypi.org/project/linkalman/", "project_urls": {"Download": "https://github.com/DanyangSu/linkalman/archive/v0.11.2.tar.gz", "Homepage": "https://github.com/DanyangSu/linkalman"}, "release_url": "https://pypi.org/project/linkalman/0.11.5/", "requires_dist": null, "requires_python": "", "summary": "Flexible Linear Kalman Filter", "version": "0.11.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>linkalman</h1>\n<p><code>linkalman</code> is a python package that solves linear structural time series models with Gaussian noises. Compared with some other popular Kalman filter packages written in python, linkalman has a combination of several advantages:</p>\n<ul>\n<li>Account for partially and fully incomplete measurements</li>\n<li>Flexible and convenient model structure</li>\n<li>Robust and efficient implementation</li>\n<li>Proper implementation for unknown priors</li>\n<li>Built-in numerical and EM algorithm</li>\n<li>Open-source with a comprehensive user manual</li>\n<li>Modular design with intuitive model specification</li>\n</ul>\n<h3>Installation</h3>\n<p><code>linkalman</code> requires the following packages to run:</p>\n<ul>\n<li>numpy</li>\n<li>pandas</li>\n<li>networkx</li>\n<li>scipy</li>\n</ul>\n<p>To install <code>linkalman</code>, simply use the standard <code>pip</code> command:</p>\n<pre>$ pip install linkalman\n</pre>\n<h3>Example</h3>\n<p>Here I will provide a simple example using <code>linkalman</code>. See <a href=\"https://github.com/DanyangSu/linkalman/tree/master/examples/jupyter_notebooks\" rel=\"nofollow\">here</a> for more examples, and <a href=\"https://github.com/DanyangSu/linkalman/blob/master/doc/manual.pdf\" rel=\"nofollow\">user's manual</a> for technical details.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scipy.optimize</span> <span class=\"kn\">import</span> <span class=\"n\">minimize</span>\n<span class=\"kn\">from</span> <span class=\"nn\">linkalman.models</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConstantModel</span> <span class=\"k\">as</span> <span class=\"n\">BCM</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n\n<span class=\"c1\"># Get data</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-total-female-births.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">'Date'</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>First we define the system dynamics of a Bayesian Structural Time Series (BSTS) model. Here I define a Stochastic linear trend model to extract the trend information from the time series (referring to the example section of <a href=\"https://github.com/DanyangSu/linkalman/blob/master/doc/manual.pdf\" rel=\"nofollow\">user's manual</a> for details)</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">my_f</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">):</span>\n    <span class=\"n\">sig1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">sig2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">sig3</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n\n    <span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]])</span>\n    <span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"n\">sig1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sig2</span><span class=\"p\">]])</span> \n    <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"n\">sig3</span><span class=\"p\">]])</span>\n    <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n    <span class=\"c1\"># Collect system matrices</span>\n    <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'F'</span><span class=\"p\">:</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"s1\">'Q'</span><span class=\"p\">:</span> <span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">:</span> <span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"s1\">'R'</span><span class=\"p\">:</span> <span class=\"n\">R</span><span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">M</span> \n</pre>\n<p>Next we define a solver or optimizer, you can choose any solver you prefer. Here I just use <code>scipy.optimize.minimize</code>.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">my_solver</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">,</span> <span class=\"n\">obj_func</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">obj_</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">obj_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">minimize</span><span class=\"p\">(</span><span class=\"n\">obj_</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">theta_opt</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">fval_opt</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">fun</span>\n    <span class=\"k\">return</span> <span class=\"n\">theta_opt</span><span class=\"p\">,</span> <span class=\"n\">fval_opt</span>\n</pre>\n<p>Now we can fit the data. First we initialize the model and feed the system dynamics (<code>my_f</code>) and solver (<code>my_solver</code>). You may also pass the keyworded arguments to for <code>my_f</code> and <code>my_solver</code>.</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">BCM</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">set_f</span><span class=\"p\">(</span><span class=\"n\">my_f</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">set_solver</span><span class=\"p\">(</span><span class=\"n\">my_solver</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'nelder-mead'</span><span class=\"p\">,</span> \n        <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'xatol'</span><span class=\"p\">:</span> <span class=\"mf\">1e-8</span><span class=\"p\">,</span> <span class=\"s1\">'disp'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'maxiter'</span><span class=\"p\">:</span> <span class=\"mi\">10000</span><span class=\"p\">})</span>\n<span class=\"n\">theta_init</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">theta_init</span><span class=\"p\">,</span> <span class=\"n\">y_col</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Births'</span><span class=\"p\">],</span> <span class=\"n\">x_col</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">],</span> \n              <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'LLY'</span><span class=\"p\">)</span>\n<span class=\"n\">df_LLY</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p>That is it! If you want to do additional work, you can do the following to plot a confidence interval around your predictions.</p>\n<pre><span class=\"n\">df_LLY</span><span class=\"p\">[</span><span class=\"s1\">'kf_ub'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df_LLY</span><span class=\"o\">.</span><span class=\"n\">Births_filtered</span> <span class=\"o\">+</span> <span class=\"mf\">1.96</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">df_LLY</span><span class=\"o\">.</span><span class=\"n\">Births_fvar</span><span class=\"p\">)</span>\n<span class=\"n\">df_LLY</span><span class=\"p\">[</span><span class=\"s1\">'kf_lb'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df_LLY</span><span class=\"o\">.</span><span class=\"n\">Births_filtered</span> <span class=\"o\">-</span> <span class=\"mf\">1.96</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">df_LLY</span><span class=\"o\">.</span><span class=\"n\">Births_fvar</span><span class=\"p\">)</span>\n<span class=\"n\">df_LLY</span> <span class=\"o\">=</span> <span class=\"n\">df_LLY</span><span class=\"p\">[</span><span class=\"n\">df_LLY</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">&gt;</span> <span class=\"s1\">'1959-01-01'</span><span class=\"p\">]</span>\n<span class=\"n\">df_LLY</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">to_datetime</span><span class=\"p\">(</span><span class=\"n\">df_LLY</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Define plot function</span>\n<span class=\"k\">def</span> <span class=\"nf\">simple_plot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">col_est</span><span class=\"p\">,</span> <span class=\"n\">col_actual</span><span class=\"p\">,</span> <span class=\"n\">col_ub</span><span class=\"p\">,</span> <span class=\"n\">col_lb</span><span class=\"p\">,</span> <span class=\"n\">label_est</span><span class=\"p\">,</span>\n                <span class=\"n\">label_actual</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)):</span>\n    <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"n\">figsize</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">col_est</span><span class=\"p\">],</span> <span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">label_est</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">df_LLY</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">col_actual</span><span class=\"p\">],</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> \n                <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">'o'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">label_actual</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">fill_between</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">col_ub</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">col_lb</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">'right'</span><span class=\"p\">,</span> <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"n\">simple_plot</span><span class=\"p\">(</span><span class=\"n\">df_LLY</span><span class=\"p\">,</span> <span class=\"s1\">'Births_filtered'</span><span class=\"p\">,</span> <span class=\"s1\">'Births'</span><span class=\"p\">,</span> <span class=\"s1\">'kf_ub'</span><span class=\"p\">,</span> <span class=\"s1\">'kf_lb'</span><span class=\"p\">,</span>  \n           <span class=\"s1\">'Prediction'</span><span class=\"p\">,</span> <span class=\"s1\">'Births'</span><span class=\"p\">,</span> <span class=\"s1\">'Filtered Births Data'</span><span class=\"p\">)</span>\n</pre>\n<h3>License</h3>\n<p>3-Clause BSD</p>\n\n          </div>"}, "last_serial": 5910247, "releases": {"0.11.5": [{"comment_text": "", "digests": {"md5": "d5dd376c7b3643f0b6744cc9ba6ea8b8", "sha256": "54e7d4e8082be1aedd7ab9d47f1d15b4932a85cf278de98bbf3df680beb15e02"}, "downloads": -1, "filename": "linkalman-0.11.5.tar.gz", "has_sig": false, "md5_digest": "d5dd376c7b3643f0b6744cc9ba6ea8b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25737, "upload_time": "2019-10-01T03:53:44", "upload_time_iso_8601": "2019-10-01T03:53:44.444350Z", "url": "https://files.pythonhosted.org/packages/be/e5/77a7e03bd0e87486ef0f7846753efcf63512edf13896ce80a536eceeb073/linkalman-0.11.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5dd376c7b3643f0b6744cc9ba6ea8b8", "sha256": "54e7d4e8082be1aedd7ab9d47f1d15b4932a85cf278de98bbf3df680beb15e02"}, "downloads": -1, "filename": "linkalman-0.11.5.tar.gz", "has_sig": false, "md5_digest": "d5dd376c7b3643f0b6744cc9ba6ea8b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25737, "upload_time": "2019-10-01T03:53:44", "upload_time_iso_8601": "2019-10-01T03:53:44.444350Z", "url": "https://files.pythonhosted.org/packages/be/e5/77a7e03bd0e87486ef0f7846753efcf63512edf13896ce80a536eceeb073/linkalman-0.11.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:40 2020"}