{"info": {"author": "Stefan Talpalaru", "author_email": "stefantalpalaru@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: BSD License", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: Implementation :: CPython"], "description": "description\n-----------\n\nBayesian filtering applied to comment spam.\n\nWhen CAPTCHA can't cut it anymore, Akismet and Disqus are not an option\nand the weasels are closing in it's time to look at how the problem is\ntackled for the biggest spam target of all time: email. Statistical\nanalysis of word frequency in individual messages proved to be simple,\nfast and reliable given enough training data.\n\nThe trick to using a tool designed for emails on comment spam is to\ngenerate email messages on the fly using comment data. Custom email\nheaders allow us to feed bogofilter any field we deem relevant. Training\nis done from the Django admin, moderation with a custom moderation class\nand the app is highly configurable.\n\nusage\n-----\n\n-  if you don't have a `custom comments\n   app <http://django-contrib-comments.readthedocs.org/en/latest/custom.html>`__,\n   make one\n-  in your custom comments app subclass your model from\n   bogofilter.models.BogofilterComment (it's a proxy model that will not\n   add any new fields)\n-  subclass your form from bogofilter.forms.BogofilterCommentForm\n-  `register <http://django-contrib-comments.readthedocs.org/en/latest/moderation.html>`__\n   bogofilter.moderation.BogofilterCommentModerator or a subclass of it\n   for the model that your comments are attached to. You can do this in\n   that app's models.py file with something like this (assuming the\n   target model is Entry):\n\n   .. code:: python\n\n       if Entry not in moderator._registry:\n           moderator.register(Entry, BogofilterCommentModerator)\n\n-  in admin.py you probably want to change the fields order in your\n   custom admin model. Use bogofilter.admin.bogo\\_status as a field for\n   list\\_display. Register your admin model subclassed from\n   bogofilter.admin.BogofilterCommentsAdmin like this:\n\n   .. code:: python\n\n       admin.site.unregister(BogofilterComment)\n       admin.site.register(MyComment, MyCommentAdmin)\n\n-  from the admin, train bogofilter with a batch of wanted (ham) and\n   unwanted (spam) comments. 100 of each is a good start. After this\n   filter by \"Unsure\" and mark those accordingly. Next filter by\n   'Mismatches'. The assumption is that your ham comments are public,\n   while the spam ones are not. Fix any conflict between bogofilter's\n   status and your public status by marking the comments as spam or ham.\n-  you can pass command line arguments to bogofilter through the\n   BOGOFILTER\\_ARGS variable in settings.py:\n\n   .. code:: python\n\n       BOGOFILTER_ARGS = ['-o', '0.7'] # lower the spam_cutoff from the default 0.95\n\n-  if you have use bogofilter for more than one thing in the same\n   account, you'll want to specify a directory other than the default\n   ~/.bogofilter:\n\n   .. code:: python\n\n       BOGOFILTER_ARGS = ['-d', './bogofilter_test_dir', '-o', '0.7']\n\ntips\n----\n\n-  some spam bots stay only a few seconds on page so they can be weeded\n   out based on that. You can get the 'time\\_on\\_page' field from the\n   form (it's a floating point timestamp), store it in the model and\n   return False from the 'allow' method of the moderator class if it's\n   less than a certain value (4 seconds should be enough to avoid false\n   negatives).\n-  for some reason, moderation signals might get lost and spam comments\n   with a .bogotype() of 'S' (spam) or a time on page lower than your\n   limit get through. You can deal with those with a periodic task that\n   deletes them. I have mine running every 5 minutes and any\n   notification related to new comments ignores those newer than that.\n-  regularly delete the spam comments after an interval long enough to\n   allow you to rescue incorrectly classified ham.\n\nrequirements\n------------\n\n-  `Django <https://www.djangoproject.com/>`__\n-  `django-contrib-comments <https://github.com/django/django-contrib-comments>`__\n-  `bogofilter <http://bogofilter.sourceforge.net/>`__\n\ntesting\n-------\n\n.. code:: sh\n\n    python setup.py test\n\nThe test suite is shamelessly taken from django-contrib-comments and\nconverted to use the 'bogofilter' app wherever possible.\n\nTested with python-2.7.6, python-3.3.4, django-1.6.2,\ndjango-contrib-comments-1.5 and bogofilter-1.2.4 .\n\ncredits\n-------\n\n-  author: Stefan Talpalaru stefantalpalaru@yahoo.com\n\n-  homepage: https://github.com/stefantalpalaru/django-bogofilter", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stefantalpalaru/django-bogofilter", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-bogofilter", "package_url": "https://pypi.org/project/django-bogofilter/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-bogofilter/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/stefantalpalaru/django-bogofilter"}, "release_url": "https://pypi.org/project/django-bogofilter/0.1/", "requires_dist": null, "requires_python": null, "summary": "Bayesian spam filtering for django_comments using bogofilter", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>description</h2>\n<p>Bayesian filtering applied to comment spam.</p>\n<p>When CAPTCHA can\u2019t cut it anymore, Akismet and Disqus are not an option\nand the weasels are closing in it\u2019s time to look at how the problem is\ntackled for the biggest spam target of all time: email. Statistical\nanalysis of word frequency in individual messages proved to be simple,\nfast and reliable given enough training data.</p>\n<p>The trick to using a tool designed for emails on comment spam is to\ngenerate email messages on the fly using comment data. Custom email\nheaders allow us to feed bogofilter any field we deem relevant. Training\nis done from the Django admin, moderation with a custom moderation class\nand the app is highly configurable.</p>\n</div>\n<div id=\"usage\">\n<h2>usage</h2>\n<ul>\n<li><p>if you don\u2019t have a <a href=\"http://django-contrib-comments.readthedocs.org/en/latest/custom.html\" rel=\"nofollow\">custom comments\napp</a>,\nmake one</p>\n</li>\n<li><p>in your custom comments app subclass your model from\nbogofilter.models.BogofilterComment (it\u2019s a proxy model that will not\nadd any new fields)</p>\n</li>\n<li><p>subclass your form from bogofilter.forms.BogofilterCommentForm</p>\n</li>\n<li><p><a href=\"http://django-contrib-comments.readthedocs.org/en/latest/moderation.html\" rel=\"nofollow\">register</a>\nbogofilter.moderation.BogofilterCommentModerator or a subclass of it\nfor the model that your comments are attached to. You can do this in\nthat app\u2019s models.py file with something like this (assuming the\ntarget model is Entry):</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">Entry</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">moderator</span><span class=\"o\">.</span><span class=\"n\">_registry</span><span class=\"p\">:</span>\n    <span class=\"n\">moderator</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">,</span> <span class=\"n\">BogofilterCommentModerator</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>in admin.py you probably want to change the fields order in your\ncustom admin model. Use bogofilter.admin.bogo_status as a field for\nlist_display. Register your admin model subclassed from\nbogofilter.admin.BogofilterCommentsAdmin like this:</p>\n<pre><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">(</span><span class=\"n\">BogofilterComment</span><span class=\"p\">)</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">MyComment</span><span class=\"p\">,</span> <span class=\"n\">MyCommentAdmin</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>from the admin, train bogofilter with a batch of wanted (ham) and\nunwanted (spam) comments. 100 of each is a good start. After this\nfilter by \u201cUnsure\u201d and mark those accordingly. Next filter by\n\u2018Mismatches\u2019. The assumption is that your ham comments are public,\nwhile the spam ones are not. Fix any conflict between bogofilter\u2019s\nstatus and your public status by marking the comments as spam or ham.</p>\n</li>\n<li><p>you can pass command line arguments to bogofilter through the\nBOGOFILTER_ARGS variable in settings.py:</p>\n<pre><span class=\"n\">BOGOFILTER_ARGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'-o'</span><span class=\"p\">,</span> <span class=\"s1\">'0.7'</span><span class=\"p\">]</span> <span class=\"c1\"># lower the spam_cutoff from the default 0.95</span>\n</pre>\n</li>\n<li><p>if you have use bogofilter for more than one thing in the same\naccount, you\u2019ll want to specify a directory other than the default\n~/.bogofilter:</p>\n<pre><span class=\"n\">BOGOFILTER_ARGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'-d'</span><span class=\"p\">,</span> <span class=\"s1\">'./bogofilter_test_dir'</span><span class=\"p\">,</span> <span class=\"s1\">'-o'</span><span class=\"p\">,</span> <span class=\"s1\">'0.7'</span><span class=\"p\">]</span>\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"tips\">\n<h2>tips</h2>\n<ul>\n<li>some spam bots stay only a few seconds on page so they can be weeded\nout based on that. You can get the \u2018time_on_page\u2019 field from the\nform (it\u2019s a floating point timestamp), store it in the model and\nreturn False from the \u2018allow\u2019 method of the moderator class if it\u2019s\nless than a certain value (4 seconds should be enough to avoid false\nnegatives).</li>\n<li>for some reason, moderation signals might get lost and spam comments\nwith a .bogotype() of \u2018S\u2019 (spam) or a time on page lower than your\nlimit get through. You can deal with those with a periodic task that\ndeletes them. I have mine running every 5 minutes and any\nnotification related to new comments ignores those newer than that.</li>\n<li>regularly delete the spam comments after an interval long enough to\nallow you to rescue incorrectly classified ham.</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>requirements</h2>\n<ul>\n<li><a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a></li>\n<li><a href=\"https://github.com/django/django-contrib-comments\" rel=\"nofollow\">django-contrib-comments</a></li>\n<li><a href=\"http://bogofilter.sourceforge.net/\" rel=\"nofollow\">bogofilter</a></li>\n</ul>\n</div>\n<div id=\"testing\">\n<h2>testing</h2>\n<pre>python setup.py <span class=\"nb\">test</span>\n</pre>\n<p>The test suite is shamelessly taken from django-contrib-comments and\nconverted to use the \u2018bogofilter\u2019 app wherever possible.</p>\n<p>Tested with python-2.7.6, python-3.3.4, django-1.6.2,\ndjango-contrib-comments-1.5 and bogofilter-1.2.4 .</p>\n</div>\n<div id=\"credits\">\n<h2>credits</h2>\n<ul>\n<li>author: Stefan Talpalaru <a href=\"mailto:stefantalpalaru%40yahoo.com\">stefantalpalaru<span>@</span>yahoo<span>.</span>com</a></li>\n<li>homepage: <a href=\"https://github.com/stefantalpalaru/django-bogofilter\" rel=\"nofollow\">https://github.com/stefantalpalaru/django-bogofilter</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1049463, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f873a8e51f2df8d69239afbc4f16138f", "sha256": "897dc02742a1c104c43ddbfc1174be5850063eb786d6693a6bad9853404ab0ae"}, "downloads": -1, "filename": "django-bogofilter-0.1.tar.gz", "has_sig": false, "md5_digest": "f873a8e51f2df8d69239afbc4f16138f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20192, "upload_time": "2014-04-02T20:04:26", "upload_time_iso_8601": "2014-04-02T20:04:26.306338Z", "url": "https://files.pythonhosted.org/packages/0e/fd/e86be45db7b9c0af8d8c2da292774ca6e6a38a3a24bc1215527e3a593958/django-bogofilter-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f873a8e51f2df8d69239afbc4f16138f", "sha256": "897dc02742a1c104c43ddbfc1174be5850063eb786d6693a6bad9853404ab0ae"}, "downloads": -1, "filename": "django-bogofilter-0.1.tar.gz", "has_sig": false, "md5_digest": "f873a8e51f2df8d69239afbc4f16138f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20192, "upload_time": "2014-04-02T20:04:26", "upload_time_iso_8601": "2014-04-02T20:04:26.306338Z", "url": "https://files.pythonhosted.org/packages/0e/fd/e86be45db7b9c0af8d8c2da292774ca6e6a38a3a24bc1215527e3a593958/django-bogofilter-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:24 2020"}