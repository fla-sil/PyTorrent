{"info": {"author": "Katja Della Libera", "author_email": "katja.dellalibera@minerva.kgi.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# KD-tree-implementation\nAn implementation of kd-search trees with functions to find the nearest neighbor, an operation that would take a long time using linear search on large datasets. That is where kd-search trees come in, since they can exclude a larger part of the dataset at once.<br>\nThis project was created as a final project for the course CS110/Computation: Solving Problems with algorithms.\n\n# Installation guide\nOpen the Command center and paste the following<br>\n```\npip install Katjas-kd-tree\n```\n# How to run\nAfter installing the package import it by typing<br>\n```\nimport kd_tree as kd\n```\nYou are now able to use the following functions<br>\n```\nkd.build_tree(dict)\n# this will build a kd-tree from a given dictionary of format key:[values]\nkd.distance(lsta,lstb)\n# returns the distance between two points a and b with coordinates given by lsta and lstb\nkd.find_approx_nearest(tree,value)\n# returns the approximate nearest neighbor for a given value\nkd.find_exact_nearest(tree,value)\n# returns the exact nearest element of the tree to the value\n```\n# Example use case\nTo find the closest color in a dataset of named colors in the LAB (or CIELAB) color space. This color space works similar to RBG colors, but is design to let make colors that look similar to huymans be closer to each other in the color space. The first dimesnions is a spectrum from light to dark, the other two describe the green-red and blue-yellow value going from negative to positive value. More on LAB colors: https://en.wikipedia.org/wiki/CIELAB_color_space<br>\nWe cannot use our usual quick-search methods or binary search-trees, since the data has more than 1 dimension and cannot simply be ordered. Therefore, we can create a tree with 3 dimensions, where every new level is split along a new dimension, iterating through all of them as often as needed. This allows us to very quickly get an approximation of the nearest neighbor and with slightly more effort find the exact nearest neighbor quicker than with a linear search.<br>\n```\n# importing a dataset of paint colors and their position in the LAB colorspace\nwith open (\"paintcolors.json\") as json_file:\n    paintcolors=json.load(json_file)\n# creating a tree out of the paintcolors\npainttree=kd.build_tree(paintcolors)\n# finding the approximate and exact nearest color to [0,0,0]\nprint((kd.distance(kd.find_approx_nearest(painttree,[0,0,0]).value,[0,0,0]),\n    kd.find_approx_nearest(painttree,[0,0,0]).name,\n    kd.find_approx_nearest(painttree,[0,0,0]).value))\nprint(kd.find_exact_nearest(painttree,[0,0,0]))\n```\nThis will return the approximate and exact nearest color to [0,0,0]<br>\n(0.23327147726897515, 'UniversalBlack', [0.233007, 0.010686, -0.0030215])<br>\n(0.22615200000001437, 'TwilightZone', [0.226152, 5.54817e-08, 5.84874e-08])<br>\n<br>\nThe resulting kd-tree looks like this (nodes not above each other for clarity)<br>\n![Visualization of the kd-tree for paintcolors](https://raw.githubusercontent.com/katjadellalibera/KD-tree-implementation/master/Mathematica_visualization.jpg)\n<br>\nIf you would like to run this code for yourself, please download the data from https://github.com/katjadellalibera/KD-tree-implementation/blob/master/paintcolors.json and the code from https://github.com/katjadellalibera/KD-tree-implementation/blob/master/example.py\n# Background\n**Time-Complexity:**<br>\nA linear search runs with O(n) complexity, since it has to check every value. find_approx_nearest runs with $O(\\log(n))$ complexity on average, because it just has to go down a binary tree with a depth of $\\log_2(n)$. In the worst case we have a oddly shaped tree like one with only two nodes, where the worst-case runtime could be $O(n)$, because every node is visited. The find_exact_nearest function will exclude less of the tree at a time, but still run in $O(\\log(n))$, just with a higher constant factor.<br>\n**Space-Complexity:**<br>\nStoring the data points as nodes rather than in a dictionary or array will still take $O(n)$ space complexity. There may be a slightly higher constant term k, accounting for the split-dimension d and pointers to the left an right child, but the total complexity is $O(n)$\n# Dependencies\nThe implementation depends on a the pre-installed packages random, math and json as well as the numpy package.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/katjadellalibera/KD-tree-implementation", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Katjas-kd-tree", "package_url": "https://pypi.org/project/Katjas-kd-tree/", "platform": "", "project_url": "https://pypi.org/project/Katjas-kd-tree/", "project_urls": {"Homepage": "https://github.com/katjadellalibera/KD-tree-implementation"}, "release_url": "https://pypi.org/project/Katjas-kd-tree/0.0.4/", "requires_dist": ["numpy"], "requires_python": "", "summary": "An implementation of KD trees", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>KD-tree-implementation</h1>\n<p>An implementation of kd-search trees with functions to find the nearest neighbor, an operation that would take a long time using linear search on large datasets. That is where kd-search trees come in, since they can exclude a larger part of the dataset at once.<br>\nThis project was created as a final project for the course CS110/Computation: Solving Problems with algorithms.</p>\n<h1>Installation guide</h1>\n<p>Open the Command center and paste the following<br></p>\n<pre><code>pip install Katjas-kd-tree\n</code></pre>\n<h1>How to run</h1>\n<p>After installing the package import it by typing<br></p>\n<pre><code>import kd_tree as kd\n</code></pre>\n<p>You are now able to use the following functions<br></p>\n<pre><code>kd.build_tree(dict)\n# this will build a kd-tree from a given dictionary of format key:[values]\nkd.distance(lsta,lstb)\n# returns the distance between two points a and b with coordinates given by lsta and lstb\nkd.find_approx_nearest(tree,value)\n# returns the approximate nearest neighbor for a given value\nkd.find_exact_nearest(tree,value)\n# returns the exact nearest element of the tree to the value\n</code></pre>\n<h1>Example use case</h1>\n<p>To find the closest color in a dataset of named colors in the LAB (or CIELAB) color space. This color space works similar to RBG colors, but is design to let make colors that look similar to huymans be closer to each other in the color space. The first dimesnions is a spectrum from light to dark, the other two describe the green-red and blue-yellow value going from negative to positive value. More on LAB colors: <a href=\"https://en.wikipedia.org/wiki/CIELAB_color_space\" rel=\"nofollow\">https://en.wikipedia.org/wiki/CIELAB_color_space</a><br>\nWe cannot use our usual quick-search methods or binary search-trees, since the data has more than 1 dimension and cannot simply be ordered. Therefore, we can create a tree with 3 dimensions, where every new level is split along a new dimension, iterating through all of them as often as needed. This allows us to very quickly get an approximation of the nearest neighbor and with slightly more effort find the exact nearest neighbor quicker than with a linear search.<br></p>\n<pre><code># importing a dataset of paint colors and their position in the LAB colorspace\nwith open (\"paintcolors.json\") as json_file:\n    paintcolors=json.load(json_file)\n# creating a tree out of the paintcolors\npainttree=kd.build_tree(paintcolors)\n# finding the approximate and exact nearest color to [0,0,0]\nprint((kd.distance(kd.find_approx_nearest(painttree,[0,0,0]).value,[0,0,0]),\n    kd.find_approx_nearest(painttree,[0,0,0]).name,\n    kd.find_approx_nearest(painttree,[0,0,0]).value))\nprint(kd.find_exact_nearest(painttree,[0,0,0]))\n</code></pre>\n<p>This will return the approximate and exact nearest color to [0,0,0]<br>\n(0.23327147726897515, 'UniversalBlack', [0.233007, 0.010686, -0.0030215])<br>\n(0.22615200000001437, 'TwilightZone', [0.226152, 5.54817e-08, 5.84874e-08])<br>\n<br>\nThe resulting kd-tree looks like this (nodes not above each other for clarity)<br>\n<img alt=\"Visualization of the kd-tree for paintcolors\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78832f038c99e1c3323c859d2883d2de87c7c307/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6b61746a6164656c6c616c69626572612f4b442d747265652d696d706c656d656e746174696f6e2f6d61737465722f4d617468656d61746963615f76697375616c697a6174696f6e2e6a7067\">\n<br>\nIf you would like to run this code for yourself, please download the data from <a href=\"https://github.com/katjadellalibera/KD-tree-implementation/blob/master/paintcolors.json\" rel=\"nofollow\">https://github.com/katjadellalibera/KD-tree-implementation/blob/master/paintcolors.json</a> and the code from <a href=\"https://github.com/katjadellalibera/KD-tree-implementation/blob/master/example.py\" rel=\"nofollow\">https://github.com/katjadellalibera/KD-tree-implementation/blob/master/example.py</a></p>\n<h1>Background</h1>\n<p><strong>Time-Complexity:</strong><br>\nA linear search runs with O(n) complexity, since it has to check every value. find_approx_nearest runs with $O(\\log(n))$ complexity on average, because it just has to go down a binary tree with a depth of $\\log_2(n)$. In the worst case we have a oddly shaped tree like one with only two nodes, where the worst-case runtime could be $O(n)$, because every node is visited. The find_exact_nearest function will exclude less of the tree at a time, but still run in $O(\\log(n))$, just with a higher constant factor.<br>\n<strong>Space-Complexity:</strong><br>\nStoring the data points as nodes rather than in a dictionary or array will still take $O(n)$ space complexity. There may be a slightly higher constant term k, accounting for the split-dimension d and pointers to the left an right child, but the total complexity is $O(n)$</p>\n<h1>Dependencies</h1>\n<p>The implementation depends on a the pre-installed packages random, math and json as well as the numpy package.</p>\n\n          </div>"}, "last_serial": 4619149, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "910fedd2898c2d7e40b76b18ded8d9ac", "sha256": "4b36d1cb11d5833270653542aa19cc39dfc7a33cc2cddc8c64eae32e3c9873b8"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "910fedd2898c2d7e40b76b18ded8d9ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4053, "upload_time": "2018-12-19T03:49:16", "upload_time_iso_8601": "2018-12-19T03:49:16.693071Z", "url": "https://files.pythonhosted.org/packages/d6/b6/9238922940145e9dbb7e6ed8222d39a8328b16eb15bee6b47c58248a63e5/Katjas_kd_tree-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "562c05e5c5b2c6de50ae292e1815e1e0", "sha256": "b981597147cb6c3b71366f12b1b9ecbfa5c767c5ac0c538e5301442f0ec97845"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.1.tar.gz", "has_sig": false, "md5_digest": "562c05e5c5b2c6de50ae292e1815e1e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2826, "upload_time": "2018-12-19T03:49:18", "upload_time_iso_8601": "2018-12-19T03:49:18.650786Z", "url": "https://files.pythonhosted.org/packages/a4/46/18502a4fe22a344400dc2da690c730f8233a05c57612b6c593d80663ed59/Katjas_kd_tree-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "461eab509fdaabba2004c9d565e5e2a2", "sha256": "9ab056d2a441a44f3c384634ac0b7e5feedc9be9dfb59812234f1744133f334d"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "461eab509fdaabba2004c9d565e5e2a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4806, "upload_time": "2018-12-20T01:11:28", "upload_time_iso_8601": "2018-12-20T01:11:28.448990Z", "url": "https://files.pythonhosted.org/packages/02/c8/5d214807f15fdb47ee8b530122c979e9708ad7ca3882149a1de6e49dbea4/Katjas_kd_tree-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b90943ce82becca404740e0b7a6fe5d", "sha256": "9e184c7b89f4221b48986ca17614af7227044ace504ee84d42e274b52122672b"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6b90943ce82becca404740e0b7a6fe5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3715, "upload_time": "2018-12-20T01:11:30", "upload_time_iso_8601": "2018-12-20T01:11:30.739008Z", "url": "https://files.pythonhosted.org/packages/44/15/b391044306fb0659a06b02652fed88ee91bd3b3292ad826840a841d14e99/Katjas_kd_tree-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "14ceeb1183e0bb8a9d3aafa2e14cf055", "sha256": "f1bb3ceb3ba443f9e2efa6c1cd8435b828babe648b3209ebcc6bc0e357e796a9"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "14ceeb1183e0bb8a9d3aafa2e14cf055", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5249, "upload_time": "2018-12-20T02:39:46", "upload_time_iso_8601": "2018-12-20T02:39:46.127910Z", "url": "https://files.pythonhosted.org/packages/e8/e6/e477538608892698f05334fc75c2d2fc72c6c37bf08b7c188b975adb5622/Katjas_kd_tree-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4da3c37e2f38f728c3895ce45c8eb1c1", "sha256": "c2c2ef0bcbaf14201418d79c591b3244430ca3347635fd96394bdd5e9f92d634"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.3.tar.gz", "has_sig": false, "md5_digest": "4da3c37e2f38f728c3895ce45c8eb1c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4249, "upload_time": "2018-12-20T02:39:49", "upload_time_iso_8601": "2018-12-20T02:39:49.144325Z", "url": "https://files.pythonhosted.org/packages/f5/ee/56ef6efc5f825f1fea773cb236c719aa88b81c1b12404306fc269d6064c0/Katjas_kd_tree-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a949f926c87ca5219d40e4b0a88a1f48", "sha256": "56ddf2415243d9c2b2f5be18fd7a0f7c0c9ca1ffbe91549e555f38ec605c0865"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a949f926c87ca5219d40e4b0a88a1f48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5261, "upload_time": "2018-12-20T02:45:53", "upload_time_iso_8601": "2018-12-20T02:45:53.674265Z", "url": "https://files.pythonhosted.org/packages/d9/8a/eeae952ded0441402ae953a48f4a4f51695a2b0ee0baa1e7be62115003d3/Katjas_kd_tree-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef4cf035862425ce37773b431de3229c", "sha256": "aa2bae4d9836047f9f48091e736436ee1c6a0490f3119cc2d226d9418e85667c"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ef4cf035862425ce37773b431de3229c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4255, "upload_time": "2018-12-20T02:45:57", "upload_time_iso_8601": "2018-12-20T02:45:57.396685Z", "url": "https://files.pythonhosted.org/packages/a3/de/86e7366bd9da33d59ff90f1084513aa801e7348b46ce890d5fa21d1701c6/Katjas_kd_tree-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a949f926c87ca5219d40e4b0a88a1f48", "sha256": "56ddf2415243d9c2b2f5be18fd7a0f7c0c9ca1ffbe91549e555f38ec605c0865"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a949f926c87ca5219d40e4b0a88a1f48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5261, "upload_time": "2018-12-20T02:45:53", "upload_time_iso_8601": "2018-12-20T02:45:53.674265Z", "url": "https://files.pythonhosted.org/packages/d9/8a/eeae952ded0441402ae953a48f4a4f51695a2b0ee0baa1e7be62115003d3/Katjas_kd_tree-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef4cf035862425ce37773b431de3229c", "sha256": "aa2bae4d9836047f9f48091e736436ee1c6a0490f3119cc2d226d9418e85667c"}, "downloads": -1, "filename": "Katjas_kd_tree-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ef4cf035862425ce37773b431de3229c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4255, "upload_time": "2018-12-20T02:45:57", "upload_time_iso_8601": "2018-12-20T02:45:57.396685Z", "url": "https://files.pythonhosted.org/packages/a3/de/86e7366bd9da33d59ff90f1084513aa801e7348b46ce890d5fa21d1701c6/Katjas_kd_tree-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:34 2020"}