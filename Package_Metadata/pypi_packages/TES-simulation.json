{"info": {"author": "John Boik", "author_email": "john.boik@PrincipledSocietiesProject.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Topic :: Scientific/Engineering"], "description": "****************************\n\u201cTES-simulation\u201d Users Guide\n****************************\n\n:Author: John C. Boik\n:Version: 0.1.0 of May, 2014 \n:Email: john.boik@PrincipledSocietiesProject.org\n\n\nIntroduction\n============\n\nThis document is a users guide for the python package ``TES-simulation``, which simulates a Token Exchange System (TES), a type of complementary currency system that is described in the book *Economic Direct Democracy*.\\ [JCB14]_ The local electronic currency is called the *token*. Together with the dollar, it defines a local token--dollar economy. A Local Economic Direct Democracy Association (LEDDA)---a membership-based, community-benefit corporation---implements a TES. \n\nThe simulation tracks the flows of tokens and dollars in a U.S. county economy over a period of years, in annual steps. To understand the package, one should read \u201cFirst Microsimulation Model of a LEDDA Community Currency--Dollar Economy,\u201d by John Boik, available as a working paper from the IDEAS repository.\\ [JCB14b]_ The paper was submitted in 2014 to a peer-reviewed journal for publication. This Users Guide provides information about the ``TES-simulation`` package that was not contained in the paper or the paper's appendix.\\ [JCB14c]_\n\n\nModules and Classes\n===================\n\nModules for this package are listed below. Each module describes a single class. \n\n1. Module ``Class_CBFS`` describes the CBFS class. \n\n2. Module ``Class_County`` describes the COUNTY class. \n\n3. Module ``Class_Gov`` describes the GOVERNMENT class. \n\n4. Module ``Class_Ledda`` describes the LEDDA class. \n\n5. Module ``Class_Org`` describes the ORGANIZATIONS class. \n\n6. Module ``Class_Persons`` describes the PERSONS class. \n\n7. Module ``Class_Roc`` describes the ROC (Rest-of-Counties) class. \n\n8. Module ``Config`` holds configuration information and serves as a common container for data objects. \n\n9. Module ``InitializeFx`` holds functions that initialize objects at the start of the simulation. \n\n10. Module ``MiscFx`` holds miscellaneous functions. Most of these are graphing and printing functions.\n\n11. Module ``Debug`` holds a function that starts pdb (python debugger) when an exception is raised and not otherwise caught. It is a useful aid during code development. Import of this module can be commented out from all package files, if desired.\n\nThe main script is ``run_simulation.py``.\n\n\nRequirements\n============\n\n``TES-simulation`` requires python and the following python packages: ``numpy``, ``scipy``, ``pytables``, and ``pylab``. To make animated gifs, the python library ``wand`` is required (it is a binding for the ImageMagick library). \n\n``TES-simulation`` is tested on a Linux operating system using:\n\n- ubuntu 13.04 (raring)\n- python 2.7.4\n- numpy 1.9.0.dev-6a7830b\n- scipy 0.14.0.dev-70fd6ff\n- pytables 3.0.0\n- wand 0.3.5\n\nWhile ``TES-simulation`` can be installed via pip, use of ``pip install TES-simulation`` does not install the requirements. It is assumed that they are already installed in your system python environment. Numerous tutorials are available on the Web if you need to install these packages.\n\n\nInstallation\n============\n\nThe recommended location for installation of this package is a virtual environment. These instructions pertain to a Linux operating system. Some adjustments might be necessary for the Windows operating system. \n\n1. If your system does not already have virtualenv, install it using: ``sudo pip install virtualenv``\n\n2. Change directory to your chosen working directory, for example, ``./home/myname/mysimulation`` .\n\n3. Open a terminal window, if one is not already open. To create a new virtual environment, type: ``virtualenv --system-site-packages env`` . Here, the virtual environment is called ``env`` . It is located in the working directory. Run with the ``--no-site-packages`` flag if you do not want to use packages that are installed in your system python environment. In this case, you would have to install ``numpy``, ``scipy``, ``pytables``, ``pylab``, and ``wand`` packages in the virtual environment. Doing so for ``pylab`` can be tricky. \n\n4. Activate the virtual environment: ``source env/bin/activate`` . \n\n5. Install ``TES-simulation`` in the virtual environment: ``pip install TES-simulation``\n\nTo deactivate the virtual environment, type: ``deactivate`` ; to remove it entirely, deactivate it and then type: ``rm -rf env`` .\n\n\nHow to Run a Simulation\n=========================\n\nThe four steps to run a simulation are:\n\n1. Open a terminal window and change directory into your working directory (see previous). You may need to edit the configuration file (``Config.py``) before running a simulation. This file, and other package files, will be located in, for example, ``./env/local/lib/python2.7/site-packages/tes-simulation/`` . Set a population size for ``Config.adult_county_population``, set a results folder name for ``Config.results_folder_name``, and set any other parameters as desired. \n\n2. Set ``Config.create_new_HDF5=True`` in order to create a new \"master\" pytables file (``LEDDA_simulation_master.hdf5``) in the results folder that holds income and other data for individuals and families. If you change the population size, you will need to set this flag to ``True`` again to create a new master pytables file. After setting the flag, run by typing: ``python ./env/local/lib/python2.7/site-packages/tes-simulation/run_simulation.py`` (or use a different path to ``run_simulation.py`` , if appropriate). If there is an error during runtime, the Python debugger will start. To exit the debugger, type: ``q`` . Answer ``Y`` to question about overwriting files. A log of results is saved in the ``./HDF5_log.txt`` file in the results folder.\n\n3. Set ``Config.create_new_HDF5=False``, and set ``Config.preliminary_graphs_Option_1=True``. Run as noted in Step 2. Answer ``Y`` to question about overwriting files. This will create some preliminary graphs and printout, which you should check. See ``Initialize.examineOption1()`` for more information. The screen results from ``Initialize.examineOption1()`` will provide suggested values for some parameters contained in the ``Config.py`` file. Results will be saved to the results folder. A log of results is saved in the ``./Opt1_log.txt`` file in the results folder. Graphs are saved in ``./figs/Option_1/`` of the results folder.\n\n4. Set ``Config.preliminary_graphs_Option_1=False``, and change other parameters in ``Config.py`` as suggested or as desired. After setting all parameters, run the simulation as noted in Step 2. The simulation will now run for as many years as specified in ``Config.simulation_period`` . Results will be saved to the results folder. A new \"current\" HDF5 file (``LEDDA_simulation_current.hdf5``) will be created in ``./data/`` in the results folder, based on information in the master HDF5 file. The master HDF5 will not be overwritten with each new simulation run (unless the flag to create a new file is set to ``True``), but the current HDF5 table will be overwritten. A log of results is saved in the ``./data/general_log.txt`` file in the results folder.\n\nExample results for a population of size 10,000 can be viewed in the package's ``examples`` folder. The results used in the submitted paper are available from the author on request. \n\nIf you need to run a saved simulation for additional years, set ``Config.simulation_period`` using a higher number and then set ``Config.start_simulation_year`` to the year you wish to begin the continued simulation. You might want to save a copy of your current results folder prior to running the continued simulation, just in case something goes wrong. Note that the Year shown in the graphs is not the same as the Year used in the simulation; the former is calculated as ``Year - Config.burn_in_period + 1``. \n\nFor information on acronyms, parameters, and variables, see the docstring of each class (module). This information will be helpful for understanding the labels on graphs, for example.\n\nReferences\n==========\n\n.. [JCB14] John C. Boik. Economic Direct Democracy: A Framework to End Poverty and Maximize Well-Being. SiteForChange: Houston; 2014. URL: http://www.PrincipledSocietiesProject.org. \n\n.. [JCB14b] John C. Boik. First Microsimulation Model of a LEDDA Community Currency--Dollar Economy. Working Paper 0001, Principled Societies Project. 2014. URL: http://ideas.repec.org/p/psp/wpaper/0001.html\n\n.. [JCB14c] John C. Boik. Appendix to \"First Microsimulation Model of a LEDDA Community Currency--Dollar Economy\". Working Paper 0002, Principled Societies Project. 2014. URL: http://ideas.repec.org/p/psp/wpaper/0002.html\n\n\n\n0.1.0 (May, 2014)\n=================\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.PrincipledSocietiesProject.org", "keywords": null, "license": "GPL v3", "maintainer": null, "maintainer_email": null, "name": "TES-simulation", "package_url": "https://pypi.org/project/TES-simulation/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/TES-simulation/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.PrincipledSocietiesProject.org"}, "release_url": "https://pypi.org/project/TES-simulation/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Simulates a Token Exchange System (TES, a token--dollar local economy)", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td>John C. Boik</td></tr>\n<tr><th>Version:</th>\n<td>0.1.0 of May, 2014</td></tr>\n<tr><th>Email:</th><td><a href=\"mailto:john.boik%40PrincipledSocietiesProject.org\">john<span>.</span>boik<span>@</span>PrincipledSocietiesProject<span>.</span>org</a></td>\n</tr>\n</tbody>\n</table>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This document is a users guide for the python package <tt><span class=\"pre\">TES-simulation</span></tt>, which simulates a Token Exchange System (TES), a type of complementary currency system that is described in the book <em>Economic Direct Democracy</em>.<a href=\"#jcb14\" id=\"id1\" rel=\"nofollow\">[JCB14]</a> The local electronic currency is called the <em>token</em>. Together with the dollar, it defines a local token\u2013dollar economy. A Local Economic Direct Democracy Association (LEDDA)\u2014a membership-based, community-benefit corporation\u2014implements a TES.</p>\n<p>The simulation tracks the flows of tokens and dollars in a U.S. county economy over a period of years, in annual steps. To understand the package, one should read \u201cFirst Microsimulation Model of a LEDDA Community Currency\u2013Dollar Economy,\u201d by John Boik, available as a working paper from the IDEAS repository.<a href=\"#jcb14b\" id=\"id2\" rel=\"nofollow\">[JCB14b]</a> The paper was submitted in 2014 to a peer-reviewed journal for publication. This Users Guide provides information about the <tt><span class=\"pre\">TES-simulation</span></tt> package that was not contained in the paper or the paper\u2019s appendix.<a href=\"#jcb14c\" id=\"id3\" rel=\"nofollow\">[JCB14c]</a></p>\n</div>\n<div id=\"modules-and-classes\">\n<h2>Modules and Classes</h2>\n<p>Modules for this package are listed below. Each module describes a single class.</p>\n<ol>\n<li>Module <tt>Class_CBFS</tt> describes the CBFS class.</li>\n<li>Module <tt>Class_County</tt> describes the COUNTY class.</li>\n<li>Module <tt>Class_Gov</tt> describes the GOVERNMENT class.</li>\n<li>Module <tt>Class_Ledda</tt> describes the LEDDA class.</li>\n<li>Module <tt>Class_Org</tt> describes the ORGANIZATIONS class.</li>\n<li>Module <tt>Class_Persons</tt> describes the PERSONS class.</li>\n<li>Module <tt>Class_Roc</tt> describes the ROC (Rest-of-Counties) class.</li>\n<li>Module <tt>Config</tt> holds configuration information and serves as a common container for data objects.</li>\n<li>Module <tt>InitializeFx</tt> holds functions that initialize objects at the start of the simulation.</li>\n<li>Module <tt>MiscFx</tt> holds miscellaneous functions. Most of these are graphing and printing functions.</li>\n<li>Module <tt>Debug</tt> holds a function that starts pdb (python debugger) when an exception is raised and not otherwise caught. It is a useful aid during code development. Import of this module can be commented out from all package files, if desired.</li>\n</ol>\n<p>The main script is <tt>run_simulation.py</tt>.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p><tt><span class=\"pre\">TES-simulation</span></tt> requires python and the following python packages: <tt>numpy</tt>, <tt>scipy</tt>, <tt>pytables</tt>, and <tt>pylab</tt>. To make animated gifs, the python library <tt>wand</tt> is required (it is a binding for the ImageMagick library).</p>\n<p><tt><span class=\"pre\">TES-simulation</span></tt> is tested on a Linux operating system using:</p>\n<ul>\n<li>ubuntu 13.04 (raring)</li>\n<li>python 2.7.4</li>\n<li>numpy 1.9.0.dev-6a7830b</li>\n<li>scipy 0.14.0.dev-70fd6ff</li>\n<li>pytables 3.0.0</li>\n<li>wand 0.3.5</li>\n</ul>\n<p>While <tt><span class=\"pre\">TES-simulation</span></tt> can be installed via pip, use of <tt>pip install <span class=\"pre\">TES-simulation</span></tt> does not install the requirements. It is assumed that they are already installed in your system python environment. Numerous tutorials are available on the Web if you need to install these packages.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The recommended location for installation of this package is a virtual environment. These instructions pertain to a Linux operating system. Some adjustments might be necessary for the Windows operating system.</p>\n<ol>\n<li>If your system does not already have virtualenv, install it using: <tt>sudo pip install virtualenv</tt></li>\n<li>Change directory to your chosen working directory, for example, <tt>./home/myname/mysimulation</tt> .</li>\n<li>Open a terminal window, if one is not already open. To create a new virtual environment, type: <tt>virtualenv <span class=\"pre\">--system-site-packages</span> env</tt> . Here, the virtual environment is called <tt>env</tt> . It is located in the working directory. Run with the <tt><span class=\"pre\">--no-site-packages</span></tt> flag if you do not want to use packages that are installed in your system python environment. In this case, you would have to install <tt>numpy</tt>, <tt>scipy</tt>, <tt>pytables</tt>, <tt>pylab</tt>, and <tt>wand</tt> packages in the virtual environment. Doing so for <tt>pylab</tt> can be tricky.</li>\n<li>Activate the virtual environment: <tt>source env/bin/activate</tt> .</li>\n<li>Install <tt><span class=\"pre\">TES-simulation</span></tt> in the virtual environment: <tt>pip install <span class=\"pre\">TES-simulation</span></tt></li>\n</ol>\n<p>To deactivate the virtual environment, type: <tt>deactivate</tt> ; to remove it entirely, deactivate it and then type: <tt>rm <span class=\"pre\">-rf</span> env</tt> .</p>\n</div>\n<div id=\"how-to-run-a-simulation\">\n<h2>How to Run a Simulation</h2>\n<p>The four steps to run a simulation are:</p>\n<ol>\n<li>Open a terminal window and change directory into your working directory (see previous). You may need to edit the configuration file (<tt>Config.py</tt>) before running a simulation. This file, and other package files, will be located in, for example, <tt><span class=\"pre\">./env/local/lib/python2.7/site-packages/tes-simulation/</span></tt> . Set a population size for <tt>Config.adult_county_population</tt>, set a results folder name for <tt>Config.results_folder_name</tt>, and set any other parameters as desired.</li>\n<li>Set <tt>Config.create_new_HDF5=True</tt> in order to create a new \u201cmaster\u201d pytables file (<tt>LEDDA_simulation_master.hdf5</tt>) in the results folder that holds income and other data for individuals and families. If you change the population size, you will need to set this flag to <tt>True</tt> again to create a new master pytables file. After setting the flag, run by typing: <tt>python <span class=\"pre\">./env/local/lib/python2.7/site-packages/tes-simulation/run_simulation.py</span></tt> (or use a different path to <tt>run_simulation.py</tt> , if appropriate). If there is an error during runtime, the Python debugger will start. To exit the debugger, type: <tt>q</tt> . Answer <tt>Y</tt> to question about overwriting files. A log of results is saved in the <tt>./HDF5_log.txt</tt> file in the results folder.</li>\n<li>Set <tt>Config.create_new_HDF5=False</tt>, and set <tt>Config.preliminary_graphs_Option_1=True</tt>. Run as noted in Step 2. Answer <tt>Y</tt> to question about overwriting files. This will create some preliminary graphs and printout, which you should check. See <tt>Initialize.examineOption1()</tt> for more information. The screen results from <tt>Initialize.examineOption1()</tt> will provide suggested values for some parameters contained in the <tt>Config.py</tt> file. Results will be saved to the results folder. A log of results is saved in the <tt>./Opt1_log.txt</tt> file in the results folder. Graphs are saved in <tt>./figs/Option_1/</tt> of the results folder.</li>\n<li>Set <tt>Config.preliminary_graphs_Option_1=False</tt>, and change other parameters in <tt>Config.py</tt> as suggested or as desired. After setting all parameters, run the simulation as noted in Step 2. The simulation will now run for as many years as specified in <tt>Config.simulation_period</tt> . Results will be saved to the results folder. A new \u201ccurrent\u201d HDF5 file (<tt>LEDDA_simulation_current.hdf5</tt>) will be created in <tt>./data/</tt> in the results folder, based on information in the master HDF5 file. The master HDF5 will not be overwritten with each new simulation run (unless the flag to create a new file is set to <tt>True</tt>), but the current HDF5 table will be overwritten. A log of results is saved in the <tt>./data/general_log.txt</tt> file in the results folder.</li>\n</ol>\n<p>Example results for a population of size 10,000 can be viewed in the package\u2019s <tt>examples</tt> folder. The results used in the submitted paper are available from the author on request.</p>\n<p>If you need to run a saved simulation for additional years, set <tt>Config.simulation_period</tt> using a higher number and then set <tt>Config.start_simulation_year</tt> to the year you wish to begin the continued simulation. You might want to save a copy of your current results folder prior to running the continued simulation, just in case something goes wrong. Note that the Year shown in the graphs is not the same as the Year used in the simulation; the former is calculated as <tt>Year - Config.burn_in_period + 1</tt>.</p>\n<p>For information on acronyms, parameters, and variables, see the docstring of each class (module). This information will be helpful for understanding the labels on graphs, for example.</p>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<table id=\"jcb14\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[JCB14]</a></td><td>John C. Boik. Economic Direct Democracy: A Framework to End Poverty and Maximize Well-Being. SiteForChange: Houston; 2014. URL: <a href=\"http://www.PrincipledSocietiesProject.org\" rel=\"nofollow\">http://www.PrincipledSocietiesProject.org</a>.</td></tr>\n</tbody>\n</table>\n<table id=\"jcb14b\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[JCB14b]</a></td><td>John C. Boik. First Microsimulation Model of a LEDDA Community Currency\u2013Dollar Economy. Working Paper 0001, Principled Societies Project. 2014. URL: <a href=\"http://ideas.repec.org/p/psp/wpaper/0001.html\" rel=\"nofollow\">http://ideas.repec.org/p/psp/wpaper/0001.html</a></td></tr>\n</tbody>\n</table>\n<table id=\"jcb14c\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[JCB14c]</a></td><td>John C. Boik. Appendix to \u201cFirst Microsimulation Model of a LEDDA Community Currency\u2013Dollar Economy\u201d. Working Paper 0002, Principled Societies Project. 2014. URL: <a href=\"http://ideas.repec.org/p/psp/wpaper/0002.html\" rel=\"nofollow\">http://ideas.repec.org/p/psp/wpaper/0002.html</a></td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"may-2014\">\n<h2>0.1.0 (May, 2014)</h2>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1197767, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1b79e1c219fd2d4f8c4e7ad520ad05ac", "sha256": "499cd031a9474245525bdc553b226ed900d810316f3250f5551d31eacd1b26d2"}, "downloads": -1, "filename": "TES-simulation-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1b79e1c219fd2d4f8c4e7ad520ad05ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52435304, "upload_time": "2014-05-21T17:50:32", "upload_time_iso_8601": "2014-05-21T17:50:32.118222Z", "url": "https://files.pythonhosted.org/packages/dc/b4/404c5433c8b5e11231771243dba24c18bf52a5579e081e98e83255f57632/TES-simulation-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1b79e1c219fd2d4f8c4e7ad520ad05ac", "sha256": "499cd031a9474245525bdc553b226ed900d810316f3250f5551d31eacd1b26d2"}, "downloads": -1, "filename": "TES-simulation-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1b79e1c219fd2d4f8c4e7ad520ad05ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52435304, "upload_time": "2014-05-21T17:50:32", "upload_time_iso_8601": "2014-05-21T17:50:32.118222Z", "url": "https://files.pythonhosted.org/packages/dc/b4/404c5433c8b5e11231771243dba24c18bf52a5579e081e98e83255f57632/TES-simulation-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:41 2020"}