{"info": {"author": "Sitthykun LY", "author_email": "ly.sitthykun@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# SmileLog\n\nIt's gonna change the traditional tracing in another way.\\\nWhat will it assist us.\n\n1. Colorise output\n2. Be able to stop any output via its public id\n3. Split each output with a big span and symbols\n4. Generate a new dynamic log filename\n5. Disable the entire tracking in a second\n6. 5 methods for 5 outputs\n\n### 5 Methods\nUse in different situation, and show up in different color\n1. track: track(title, content)\n2. information: info(title, content)\n3. success: success(title, content)\n4. warning: warning(title, content)\n5. error: error(title, content)\n```\n- title is a string\n- content can be a string or dict\n```\n\n#### Start using in the simple way:\n\n```\nfrom smilelog import Logger, Consoler\n\n\n# first instant\nconsole\t= Consoler(\n            enable= True\n\t)\n\n# try to print out\nconsole.info(\n\t'My Info Title'\n\t, {'data':'My Dictionary Content'}\n\t)\n\n# success method\nconsole.success(\n\t'My Success Title'\n        , 'My String'\n        )\n```\n\n### Logger Vs. Consoler\n\n##### 1. Logger:\nLogger is a tracing class library and write/output into a file.\\\nThis will need generating a file and keep writing the content.\nLet's Look at its configure would explain more:\n\n```\nlog\t= Logger(\n            path: str, \n            prefix: str, \n            extension: str, \n            formatFileName: str, \n            enable: bool, \n            color: bool = True\n\t)\n```\n- path: is a directory\n```\nEx:\n/var/www/my-project/logs/\n```\n- formatFileName: is suffix name of log file\n```\n# set filename\nformatFileName = 'my-logger'\nEx:\n/var/www/my-project/logs/my-logger\n\n# in dynamic way\nformatFileName = '%Y-%m-%d'\nEx:\n/var/www/my-project/logs/2020-01-19\n```\n- extension: is an extension of log file. The standard extension is '.log'\n```\n# set extension\nextension = '.log'\nEx:\n/var/www/my-project/logs/2020-01-19.log\n```\n- prefix: is prefix name of a new file log. \n```\n# set prefix\nprefix= 'my-log-'\n\nEx: \n/var/www/my-project/logs/my-log-2020-01-19.log \n# some app move it into system log directory, it is an advantage of prefix\n\nEx:\n/var/log/my-project-2020-01-19.log\n```\n- color: is for showing the color on terminal with tail command or terminal editor.\n```\n# set color\ncolor= True\nor\ncolor= False\n```\n- enable: is a main parameter that determines above features. It has two value only.\n\t- True: To enable the logging\n\t- False: To disable the logging\n```\n# set enable\n# make all above working\nenable= True\n```\n\n##### 2. Consoler\nConsoler is a tracing class library and show in terminal as just in time.\nThe class is simpler that Logger by just needing a couple parameters and no storage requirement.\n\nAs the first sample above:\n```\nconsole\t= Consoler(\n        enable= True\n\t\t)\n```\n\n### Disable print out\nThe most feature developer guy needs.\\\nIt will disable only the index that we set in the disable list.\n##### Note: \nconsole and log object are not related each other.\n\n```\n# Logger instant\n# it shows all except 1,2,3\nlog.disable([1,2,3])\n\n# Consolder instant\n# it shows all except 3, 6, 7\nconsole.disable([3, 6, 7, 89])\n```\n\n### Output\nIt's gonna show like this:\n```\n02:48:29 <id: 6>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n[SUCCESS] Success \n{'data': 'my content'} \n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n\n\n\n02:48:29 <id: 8>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n[WARNING] Warning \n{'data': 'my content'} \n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n\n\n\n02:48:29 <id: 9>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n[SUCCESS] Success \n{'data': 'my content'} \n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n\n\n\n02:48:29 <id: 10>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n[SUCCESS] Success \nHello String \n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n\n```\n\n##### My unique slogan is:\na little developer in the big world \\o/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sitthykun/smilelog", "keywords": "smilelog,log,logger,console,consoler", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "SmileLog", "package_url": "https://pypi.org/project/SmileLog/", "platform": "All", "project_url": "https://pypi.org/project/SmileLog/", "project_urls": {"Homepage": "https://github.com/sitthykun/smilelog"}, "release_url": "https://pypi.org/project/SmileLog/1.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Log and Console library", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SmileLog</h1>\n<p>It's gonna change the traditional tracing in another way.<br>\nWhat will it assist us.</p>\n<ol>\n<li>Colorise output</li>\n<li>Be able to stop any output via its public id</li>\n<li>Split each output with a big span and symbols</li>\n<li>Generate a new dynamic log filename</li>\n<li>Disable the entire tracking in a second</li>\n<li>5 methods for 5 outputs</li>\n</ol>\n<h3>5 Methods</h3>\n<p>Use in different situation, and show up in different color</p>\n<ol>\n<li>track: track(title, content)</li>\n<li>information: info(title, content)</li>\n<li>success: success(title, content)</li>\n<li>warning: warning(title, content)</li>\n<li>error: error(title, content)</li>\n</ol>\n<pre><code>- title is a string\n- content can be a string or dict\n</code></pre>\n<h4>Start using in the simple way:</h4>\n<pre><code>from smilelog import Logger, Consoler\n\n\n# first instant\nconsole\t= Consoler(\n            enable= True\n\t)\n\n# try to print out\nconsole.info(\n\t'My Info Title'\n\t, {'data':'My Dictionary Content'}\n\t)\n\n# success method\nconsole.success(\n\t'My Success Title'\n        , 'My String'\n        )\n</code></pre>\n<h3>Logger Vs. Consoler</h3>\n<h5>1. Logger:</h5>\n<p>Logger is a tracing class library and write/output into a file.<br>\nThis will need generating a file and keep writing the content.\nLet's Look at its configure would explain more:</p>\n<pre><code>log\t= Logger(\n            path: str, \n            prefix: str, \n            extension: str, \n            formatFileName: str, \n            enable: bool, \n            color: bool = True\n\t)\n</code></pre>\n<ul>\n<li>path: is a directory</li>\n</ul>\n<pre><code>Ex:\n/var/www/my-project/logs/\n</code></pre>\n<ul>\n<li>formatFileName: is suffix name of log file</li>\n</ul>\n<pre><code># set filename\nformatFileName = 'my-logger'\nEx:\n/var/www/my-project/logs/my-logger\n\n# in dynamic way\nformatFileName = '%Y-%m-%d'\nEx:\n/var/www/my-project/logs/2020-01-19\n</code></pre>\n<ul>\n<li>extension: is an extension of log file. The standard extension is '.log'</li>\n</ul>\n<pre><code># set extension\nextension = '.log'\nEx:\n/var/www/my-project/logs/2020-01-19.log\n</code></pre>\n<ul>\n<li>prefix: is prefix name of a new file log.</li>\n</ul>\n<pre><code># set prefix\nprefix= 'my-log-'\n\nEx: \n/var/www/my-project/logs/my-log-2020-01-19.log \n# some app move it into system log directory, it is an advantage of prefix\n\nEx:\n/var/log/my-project-2020-01-19.log\n</code></pre>\n<ul>\n<li>color: is for showing the color on terminal with tail command or terminal editor.</li>\n</ul>\n<pre><code># set color\ncolor= True\nor\ncolor= False\n</code></pre>\n<ul>\n<li>enable: is a main parameter that determines above features. It has two value only.\n<ul>\n<li>True: To enable the logging</li>\n<li>False: To disable the logging</li>\n</ul>\n</li>\n</ul>\n<pre><code># set enable\n# make all above working\nenable= True\n</code></pre>\n<h5>2. Consoler</h5>\n<p>Consoler is a tracing class library and show in terminal as just in time.\nThe class is simpler that Logger by just needing a couple parameters and no storage requirement.</p>\n<p>As the first sample above:</p>\n<pre><code>console\t= Consoler(\n        enable= True\n\t\t)\n</code></pre>\n<h3>Disable print out</h3>\n<p>The most feature developer guy needs.<br>\nIt will disable only the index that we set in the disable list.</p>\n<h5>Note:</h5>\n<p>console and log object are not related each other.</p>\n<pre><code># Logger instant\n# it shows all except 1,2,3\nlog.disable([1,2,3])\n\n# Consolder instant\n# it shows all except 3, 6, 7\nconsole.disable([3, 6, 7, 89])\n</code></pre>\n<h3>Output</h3>\n<p>It's gonna show like this:</p>\n<pre><code>02:48:29 &lt;id: 6&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n[SUCCESS] Success \n{'data': 'my content'} \n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n\n02:48:29 &lt;id: 8&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n[WARNING] Warning \n{'data': 'my content'} \n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n\n02:48:29 &lt;id: 9&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n[SUCCESS] Success \n{'data': 'my content'} \n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n\n02:48:29 &lt;id: 10&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n[SUCCESS] Success \nHello String \n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n</code></pre>\n<h5>My unique slogan is:</h5>\n<p>a little developer in the big world \\o/</p>\n\n          </div>"}, "last_serial": 6812351, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "61e569423f27a7a512d07407d73ce96a", "sha256": "c40ee37fcb00acb9fde95219fd816ccddf85bddf886e70c47654e25a517d5527"}, "downloads": -1, "filename": "SmileLog-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "61e569423f27a7a512d07407d73ce96a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4882, "upload_time": "2020-03-14T17:23:08", "upload_time_iso_8601": "2020-03-14T17:23:08.185210Z", "url": "https://files.pythonhosted.org/packages/3a/2f/29d4b1266ae1bd1d8dae29356f64f991174c7f82d9fc7e7e82fda4d34c1a/SmileLog-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fe7669496cfccc6e761b9558dc2c837", "sha256": "6c1137b20d495b5358ef6145c69747b65ffc79cd165daa7998449b8ba72277eb"}, "downloads": -1, "filename": "SmileLog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9fe7669496cfccc6e761b9558dc2c837", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4393, "upload_time": "2020-03-14T17:23:10", "upload_time_iso_8601": "2020-03-14T17:23:10.159414Z", "url": "https://files.pythonhosted.org/packages/7f/56/0173b9e57d4b23be921cfa3afc2cd45f94936dac74c8d102c0d920eb9f41/SmileLog-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "41e8f94aa4dd2b9120a71fe91da7c58b", "sha256": "1d959da74ec0b80d85ec0171a9e52e62bfc3e352d6a641ba9ded119af72be84b"}, "downloads": -1, "filename": "SmileLog-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "41e8f94aa4dd2b9120a71fe91da7c58b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6292, "upload_time": "2020-03-14T18:05:51", "upload_time_iso_8601": "2020-03-14T18:05:51.668582Z", "url": "https://files.pythonhosted.org/packages/9a/99/cd2388d18734c21deba3ffd73c8deab5f2391c816bc9bb29af0c4674e4bf/SmileLog-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c06dfb9c835c7a4747defe7304c4570", "sha256": "ebe2835a7a5a7e67c01d509beb204234901c2e9843328e93ff834fcba047591c"}, "downloads": -1, "filename": "SmileLog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0c06dfb9c835c7a4747defe7304c4570", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4868, "upload_time": "2020-03-14T18:05:52", "upload_time_iso_8601": "2020-03-14T18:05:52.811961Z", "url": "https://files.pythonhosted.org/packages/87/8f/dbac5fd73cb8541a82ecafe01b12f968ef196c77ffe57fa53ee6af85648e/SmileLog-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d62c0e2ee78e7be2051cb9511d7ab4d5", "sha256": "a5ddb046b7e15ddaff454176879cc32b50bca5fa256ec54e108e200340ac101a"}, "downloads": -1, "filename": "SmileLog-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d62c0e2ee78e7be2051cb9511d7ab4d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6300, "upload_time": "2020-03-14T18:20:41", "upload_time_iso_8601": "2020-03-14T18:20:41.868602Z", "url": "https://files.pythonhosted.org/packages/65/cc/a9559c858fbe937fc31863c372fb45d7dcb1bfdb3bf07907bf5ce8a0b7a9/SmileLog-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bedbbe3721343824cdd37163d64cc1a", "sha256": "d8fa34cec189ab252b80d8da44878b30c0e772d6b638a89a237078416fbd74ab"}, "downloads": -1, "filename": "SmileLog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2bedbbe3721343824cdd37163d64cc1a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4883, "upload_time": "2020-03-14T18:20:44", "upload_time_iso_8601": "2020-03-14T18:20:44.426781Z", "url": "https://files.pythonhosted.org/packages/53/cc/5b04edcd6744f5e67d1d98ff187b8995e1024346a19602069f10842f871d/SmileLog-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d62c0e2ee78e7be2051cb9511d7ab4d5", "sha256": "a5ddb046b7e15ddaff454176879cc32b50bca5fa256ec54e108e200340ac101a"}, "downloads": -1, "filename": "SmileLog-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d62c0e2ee78e7be2051cb9511d7ab4d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6300, "upload_time": "2020-03-14T18:20:41", "upload_time_iso_8601": "2020-03-14T18:20:41.868602Z", "url": "https://files.pythonhosted.org/packages/65/cc/a9559c858fbe937fc31863c372fb45d7dcb1bfdb3bf07907bf5ce8a0b7a9/SmileLog-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bedbbe3721343824cdd37163d64cc1a", "sha256": "d8fa34cec189ab252b80d8da44878b30c0e772d6b638a89a237078416fbd74ab"}, "downloads": -1, "filename": "SmileLog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2bedbbe3721343824cdd37163d64cc1a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4883, "upload_time": "2020-03-14T18:20:44", "upload_time_iso_8601": "2020-03-14T18:20:44.426781Z", "url": "https://files.pythonhosted.org/packages/53/cc/5b04edcd6744f5e67d1d98ff187b8995e1024346a19602069f10842f871d/SmileLog-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:54 2020"}