{"info": {"author": "Suman Saurabh", "author_email": "saurabh.suman@tcpwave.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "*********************\nTCPWave's IPAM Client\n*********************\nPython client for communication with Tcpwave's IPAM.\n\nPre-requisites\n##############\nBasic Authentication is not supported. Only certificates based authentication is supported.\nSo client must have a proper certificate and these certificates must be added to IPAM.\\\n\nCertificate files required:\n\n* client certificate.\n* client key.\n\nSupported Operations\n####################\nFollowing operations are supported:\n\n* Create/list/detail/delete Network\n* Create/list/detail/delete Subnet\n* Fetches Next Available IP in the Subnet\n* Create/delete IP Object\n\nInstalling library\n##################\nRun below command from python virtual environment::\n\n    pip install tcpwave-client\n\nSample Examples\n###############\n\nCreate Network\n**************\nBelow is a complete program showing the use of this library.\\\nThis example shows how to create network in IPAM using this library::\n\n    from client.networks import NetworkManager\n    from client.exceptions import APICallFailedException\n    import json\n\n    def create_network():\n        \"\"\"\n        Create test network\n        :return:\n        \"\"\"\n        try:\n            nw_create_payload = {\n                'network_address': '153.168.0.0/16',\n                'name': 'Test Network 3',\n                'organization_name': 'Tcpwave',\n                'provider': provider\n            }\n            rsp = NetworkManager.create_network(network=json.dumps(nw_create_payload))\n            print(str(rsp))\n        except APICallFailedException as ex:\n            print(ex.msg)\n\n    if __name__ == \"__main__\":\n        provider = {\n            'cert': '/path/to/cert/client.crt',\n            'key': '/path/to/key/client.key',\n            'host': '192.168.0.116'\n        }\n        create_network()\n\n\nList Network\n************\nThis snippet shows only the complete payload required for thr API call to work for listing all networks::\n\n    def networks_list():\n        \"\"\"\n        List all networks\n        :return:\n        \"\"\"\n        try:\n            list_payload = {\n                'provider': {\n                    'cert': '/path/to/client.crt',\n                    'key': '/path/to/client.key',\n                    'host': '192.168.0.116'\n                }\n            }\n            rsp = NetworkManager.list_all_networks(network=json.dumps(list_payload))\n            print(\"Networks Count : \" + str(len(rsp)))\n            for i in range(0, len(rsp)):\n                print(str(rsp[i]))\n        except APICallFailedException as ex:\n            print(ex.msg)\n\nDelete Network\n**************\nThis example shows the deletion of a network::\n\n    def test_network_delete():\n        \"\"\"\n        Deletes given network\n        :return:\n        \"\"\"\n        try:\n            nw_create_payload = {\n                'address': '153.168.0.0/16',\n                'organization_name': 'Tcpwave',\n                'provider': {\n                    'cert': '/path/to/client.crt',\n                    'key': '/path/to/client.key',\n                    'host': '192.168.0.116'\n                }\n            }\n            rsp = NetworkManager.delete_network(network=json.dumps(nw_create_payload))\n            print(str(rsp))\n        except APICallFailedException as ex:\n            print(ex.msg)\n\n\nCreate Subnet\n*************\nThis example shows creation of a subnet::\n\n    def subnet_create():\n        \"\"\"\n        Creates test subnet\n        :return:\n        \"\"\"\n        try:\n            subnet_payload = {\n                'provider': {\n                    'cert': '/path/to/client.crt',\n                    'key': '/path/to/client.key',\n                    'host': '192.168.0.116'\n                },\n                'organization_name': 'Tcpwave',\n                'name': 'Test Subnet 1',\n                'router_address': '153.168.0.1',\n                'network_address': '153.168.0.0/16',\n                'primary_domain': 'test.tcpwave.com'\n            }\n            rsp = NetworkManager.create_subnet(subnet=json.dumps(subnet_payload))\n            print(str(rsp))\n        except APICallFailedException as ex:\n            print(ex.msg)\n\n\nNext Free IP\n************\nThis fetch the next free IP::\n\n    def next_available_ip():\n        \"\"\"\n        Fetches next available ip\n        :return:\n        \"\"\"\n        try:\n            subnet_payload = {\n                'provider': {\n                    'cert': '/path/to/client.crt',\n                    'key': '/path/to/client.key',\n                    'host': '192.168.0.116'\n                },\n                'organization_name': 'Tcpwave',\n                'subnet_address': '153.168.0.0/16'\n            }\n            rsp = NetworkManager.get_next_available_ip(subnet=json.dumps(subnet_payload))\n            print('Next available IP : ', str(rsp))\n            return str(rsp)\n        except APICallFailedException as ex:\n            print(ex.msg)\n\n\nCreates IP Object\n*****************\nThis example shows creating an object.::\n\n    def create_object():\n        \"\"\"\n        Creates IP Object\n        :return:\n        \"\"\"\n        try:\n            ip_payload = {\n                'provider': {\n                    'cert': '/path/to/client.crt',\n                    'key': '/path/to/client.key',\n                    'host': '192.168.0.116'\n                },\n                'organization_name': 'Tcpwave',\n                'subnet_address': '153.168.0.0/16',\n                'ip_address': '153.168.0.5',\n                'name': 'tst obj  1',\n                'domain_name': 'test.tcpwave.com'\n\n            }\n            rsp = NetworkManager.create_ip(ip_payload=json.dumps(ip_payload))\n            print(str(rsp))\n        except APICallFailedException as ex:\n            print(ex.msg)\n\nDeletes Object\n**************\nThis example shows deletion of an object::\n\n    def delete_object(ip):\n        \"\"\"\n        Releases the ip\n        :return:\n        \"\"\"\n        try:\n            ip_payload = {\n                'provider': {\n                    'cert': '/path/to/client.crt',\n                    'key': '/path/to/client.key',\n                    'host': '192.168.0.116'\n                },\n                'organization_name': 'Tcpwave',\n                'ip_address': ip\n            }\n            rsp = NetworkManager.release_ip(ip_payload=json.dumps(ip_payload))\n            print(str(rsp))\n        except APICallFailedException as ex:\n            print(ex.msg)\n\n\n1.0.2 (2020-04-15)\n---------------------\n* packaging restructure\n* imports reordering for bug fix\n\n1.0.1 (2020-04-15)\n---------------------\n* Updated README.rst with usage examples\n\n1.0.0 (2020-04-15)\n---------------------\n* code cleanup\n\n0.0.1 (2020-04-15)\n---------------------\n* Added connector to send API requests to Tcpwave's IPAM\n* First release on PyPI.\n* Supports operation as follows:\n    * Create/list/detail/delete Network\n    * Create/list/detail/delete Subnet\n    * Fetches Next Available IP in the Subnet\n    * Create/delete IP Object", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/TCPWAVE/tims-python-client/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TCPWAVE/tims-python-client", "keywords": "tcpwave-client,ipam-client,tcpwave", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "tcpwave-client", "package_url": "https://pypi.org/project/tcpwave-client/", "platform": "", "project_url": "https://pypi.org/project/tcpwave-client/", "project_urls": {"Download": "https://github.com/TCPWAVE/tims-python-client/archive/master.zip", "Homepage": "https://github.com/TCPWAVE/tims-python-client"}, "release_url": "https://pypi.org/project/tcpwave-client/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Client for interacting with Tcpwave's IPAM", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <hr>\n<p>TCPWave's IPAM Client</p>\n<hr>\n<p>Python client for communication with Tcpwave's IPAM.</p>\n<p>Pre-requisites\n##############\nBasic Authentication is not supported. Only certificates based authentication is supported.\nSo client must have a proper certificate and these certificates must be added to IPAM.\\</p>\n<p>Certificate files required:</p>\n<ul>\n<li>client certificate.</li>\n<li>client key.</li>\n</ul>\n<p>Supported Operations\n####################\nFollowing operations are supported:</p>\n<ul>\n<li>Create/list/detail/delete Network</li>\n<li>Create/list/detail/delete Subnet</li>\n<li>Fetches Next Available IP in the Subnet</li>\n<li>Create/delete IP Object</li>\n</ul>\n<p>Installing library\n##################\nRun below command from python virtual environment::</p>\n<pre><code>pip install tcpwave-client\n</code></pre>\n<p>Sample Examples\n###############</p>\n<p>Create Network</p>\n<hr>\n<p>Below is a complete program showing the use of this library.<br>\nThis example shows how to create network in IPAM using this library::</p>\n<pre><code>from client.networks import NetworkManager\nfrom client.exceptions import APICallFailedException\nimport json\n\ndef create_network():\n    \"\"\"\n    Create test network\n    :return:\n    \"\"\"\n    try:\n        nw_create_payload = {\n            'network_address': '153.168.0.0/16',\n            'name': 'Test Network 3',\n            'organization_name': 'Tcpwave',\n            'provider': provider\n        }\n        rsp = NetworkManager.create_network(network=json.dumps(nw_create_payload))\n        print(str(rsp))\n    except APICallFailedException as ex:\n        print(ex.msg)\n\nif __name__ == \"__main__\":\n    provider = {\n        'cert': '/path/to/cert/client.crt',\n        'key': '/path/to/key/client.key',\n        'host': '192.168.0.116'\n    }\n    create_network()\n</code></pre>\n<p>List Network</p>\n<hr>\n<p>This snippet shows only the complete payload required for thr API call to work for listing all networks::</p>\n<pre><code>def networks_list():\n    \"\"\"\n    List all networks\n    :return:\n    \"\"\"\n    try:\n        list_payload = {\n            'provider': {\n                'cert': '/path/to/client.crt',\n                'key': '/path/to/client.key',\n                'host': '192.168.0.116'\n            }\n        }\n        rsp = NetworkManager.list_all_networks(network=json.dumps(list_payload))\n        print(\"Networks Count : \" + str(len(rsp)))\n        for i in range(0, len(rsp)):\n            print(str(rsp[i]))\n    except APICallFailedException as ex:\n        print(ex.msg)\n</code></pre>\n<p>Delete Network</p>\n<hr>\n<p>This example shows the deletion of a network::</p>\n<pre><code>def test_network_delete():\n    \"\"\"\n    Deletes given network\n    :return:\n    \"\"\"\n    try:\n        nw_create_payload = {\n            'address': '153.168.0.0/16',\n            'organization_name': 'Tcpwave',\n            'provider': {\n                'cert': '/path/to/client.crt',\n                'key': '/path/to/client.key',\n                'host': '192.168.0.116'\n            }\n        }\n        rsp = NetworkManager.delete_network(network=json.dumps(nw_create_payload))\n        print(str(rsp))\n    except APICallFailedException as ex:\n        print(ex.msg)\n</code></pre>\n<p>Create Subnet</p>\n<hr>\n<p>This example shows creation of a subnet::</p>\n<pre><code>def subnet_create():\n    \"\"\"\n    Creates test subnet\n    :return:\n    \"\"\"\n    try:\n        subnet_payload = {\n            'provider': {\n                'cert': '/path/to/client.crt',\n                'key': '/path/to/client.key',\n                'host': '192.168.0.116'\n            },\n            'organization_name': 'Tcpwave',\n            'name': 'Test Subnet 1',\n            'router_address': '153.168.0.1',\n            'network_address': '153.168.0.0/16',\n            'primary_domain': 'test.tcpwave.com'\n        }\n        rsp = NetworkManager.create_subnet(subnet=json.dumps(subnet_payload))\n        print(str(rsp))\n    except APICallFailedException as ex:\n        print(ex.msg)\n</code></pre>\n<p>Next Free IP</p>\n<hr>\n<p>This fetch the next free IP::</p>\n<pre><code>def next_available_ip():\n    \"\"\"\n    Fetches next available ip\n    :return:\n    \"\"\"\n    try:\n        subnet_payload = {\n            'provider': {\n                'cert': '/path/to/client.crt',\n                'key': '/path/to/client.key',\n                'host': '192.168.0.116'\n            },\n            'organization_name': 'Tcpwave',\n            'subnet_address': '153.168.0.0/16'\n        }\n        rsp = NetworkManager.get_next_available_ip(subnet=json.dumps(subnet_payload))\n        print('Next available IP : ', str(rsp))\n        return str(rsp)\n    except APICallFailedException as ex:\n        print(ex.msg)\n</code></pre>\n<p>Creates IP Object</p>\n<hr>\n<p>This example shows creating an object.::</p>\n<pre><code>def create_object():\n    \"\"\"\n    Creates IP Object\n    :return:\n    \"\"\"\n    try:\n        ip_payload = {\n            'provider': {\n                'cert': '/path/to/client.crt',\n                'key': '/path/to/client.key',\n                'host': '192.168.0.116'\n            },\n            'organization_name': 'Tcpwave',\n            'subnet_address': '153.168.0.0/16',\n            'ip_address': '153.168.0.5',\n            'name': 'tst obj  1',\n            'domain_name': 'test.tcpwave.com'\n\n        }\n        rsp = NetworkManager.create_ip(ip_payload=json.dumps(ip_payload))\n        print(str(rsp))\n    except APICallFailedException as ex:\n        print(ex.msg)\n</code></pre>\n<p>Deletes Object</p>\n<hr>\n<p>This example shows deletion of an object::</p>\n<pre><code>def delete_object(ip):\n    \"\"\"\n    Releases the ip\n    :return:\n    \"\"\"\n    try:\n        ip_payload = {\n            'provider': {\n                'cert': '/path/to/client.crt',\n                'key': '/path/to/client.key',\n                'host': '192.168.0.116'\n            },\n            'organization_name': 'Tcpwave',\n            'ip_address': ip\n        }\n        rsp = NetworkManager.release_ip(ip_payload=json.dumps(ip_payload))\n        print(str(rsp))\n    except APICallFailedException as ex:\n        print(ex.msg)\n</code></pre>\n<h2>1.0.2 (2020-04-15)</h2>\n<ul>\n<li>packaging restructure</li>\n<li>imports reordering for bug fix</li>\n</ul>\n<h2>1.0.1 (2020-04-15)</h2>\n<ul>\n<li>Updated README.rst with usage examples</li>\n</ul>\n<h2>1.0.0 (2020-04-15)</h2>\n<ul>\n<li>code cleanup</li>\n</ul>\n<h2>0.0.1 (2020-04-15)</h2>\n<ul>\n<li>Added connector to send API requests to Tcpwave's IPAM</li>\n<li>First release on PyPI.</li>\n<li>Supports operation as follows:\n<ul>\n<li>Create/list/detail/delete Network</li>\n<li>Create/list/detail/delete Subnet</li>\n<li>Fetches Next Available IP in the Subnet</li>\n<li>Create/delete IP Object</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7017365, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f492d050c7532449c95768692c4bb914", "sha256": "10e8048fa6f31fa62e6b07b3d56249b324fadc915b6f5c6479c7dcc758530fb2"}, "downloads": -1, "filename": "tcpwave-client-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f492d050c7532449c95768692c4bb914", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10957, "upload_time": "2020-04-14T07:59:47", "upload_time_iso_8601": "2020-04-14T07:59:47.748761Z", "url": "https://files.pythonhosted.org/packages/a4/96/8c98d1978ed35d83556642356589cf534ee22bc0c94db39058f9d82a4e37/tcpwave-client-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "5cf3368bcee5e27385f78fb3c6b2094c", "sha256": "774ff1d9e584fe172901de9adc73a1ac8f997f4ff0d7da92f9374ec4fcd9788b"}, "downloads": -1, "filename": "tcpwave-client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5cf3368bcee5e27385f78fb3c6b2094c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12434, "upload_time": "2020-04-14T11:56:35", "upload_time_iso_8601": "2020-04-14T11:56:35.987338Z", "url": "https://files.pythonhosted.org/packages/cf/be/10ccb188cc8bff202daf5ad1a408826e96f2438ae56df87787c4677a48b1/tcpwave-client-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "980ffbae897a3c6150542efca4aaacee", "sha256": "5eab01869fa6f3e19db017f6bb8cb0f9eb7608b642676ac38ebbcedbc4b5cf51"}, "downloads": -1, "filename": "tcpwave-client-1.0.1.tar.gz", "has_sig": false, "md5_digest": "980ffbae897a3c6150542efca4aaacee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13086, "upload_time": "2020-04-14T12:31:32", "upload_time_iso_8601": "2020-04-14T12:31:32.623426Z", "url": "https://files.pythonhosted.org/packages/5a/7e/812fbc1420ab640e6f9bb78eabc14989a9e8c0b5850525cd94b487772f00/tcpwave-client-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ca928407261a6aceac8225ba51460285", "sha256": "0a4c2ec04d85e0b0ee9922a5f857bcae9fd508a9c9c507a98efd1b9992661135"}, "downloads": -1, "filename": "tcpwave_client-1.0.2-py3.7.egg", "has_sig": false, "md5_digest": "ca928407261a6aceac8225ba51460285", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 13967, "upload_time": "2020-04-14T14:08:24", "upload_time_iso_8601": "2020-04-14T14:08:24.468397Z", "url": "https://files.pythonhosted.org/packages/a9/9d/486de0dced31376a6ab0acbb2ebbabb664fd84e67a238c14ccfbd1f1ff0e/tcpwave_client-1.0.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "12f9dcb2c855b8c14e5c4bcf6be389af", "sha256": "017f6e76b65d0e5b70e39df0376d5e50ae31583d2d4ca26f6d84fdaadf1c3110"}, "downloads": -1, "filename": "tcpwave-client-1.0.2.tar.gz", "has_sig": false, "md5_digest": "12f9dcb2c855b8c14e5c4bcf6be389af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13127, "upload_time": "2020-04-14T14:08:25", "upload_time_iso_8601": "2020-04-14T14:08:25.924026Z", "url": "https://files.pythonhosted.org/packages/6b/54/2b77e29670c3b05316b31699684fdb96d734777cc5103e7ddd0185e6ae0c/tcpwave-client-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca928407261a6aceac8225ba51460285", "sha256": "0a4c2ec04d85e0b0ee9922a5f857bcae9fd508a9c9c507a98efd1b9992661135"}, "downloads": -1, "filename": "tcpwave_client-1.0.2-py3.7.egg", "has_sig": false, "md5_digest": "ca928407261a6aceac8225ba51460285", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 13967, "upload_time": "2020-04-14T14:08:24", "upload_time_iso_8601": "2020-04-14T14:08:24.468397Z", "url": "https://files.pythonhosted.org/packages/a9/9d/486de0dced31376a6ab0acbb2ebbabb664fd84e67a238c14ccfbd1f1ff0e/tcpwave_client-1.0.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "12f9dcb2c855b8c14e5c4bcf6be389af", "sha256": "017f6e76b65d0e5b70e39df0376d5e50ae31583d2d4ca26f6d84fdaadf1c3110"}, "downloads": -1, "filename": "tcpwave-client-1.0.2.tar.gz", "has_sig": false, "md5_digest": "12f9dcb2c855b8c14e5c4bcf6be389af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13127, "upload_time": "2020-04-14T14:08:25", "upload_time_iso_8601": "2020-04-14T14:08:25.924026Z", "url": "https://files.pythonhosted.org/packages/6b/54/2b77e29670c3b05316b31699684fdb96d734777cc5103e7ddd0185e6ae0c/tcpwave-client-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:17 2020"}