{"info": {"author": "eamanu", "author_email": "eamanu@eamanu.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "# ConfigFilesManager\nA python module to a easy manage configs files for applications\n\n\n# Why?\nThis module help you to manage configurations files of python applications.\nSo, you can check the value or type of a variable in configuration file, without to \nhave write more code. You can check if a required variables is present or not. And then \nraise (or not) Exceptions.\n\n\n# Sample\nFor example if we have a config file like this:\n\n```ini\n[CONFIG]\n# Configuration file\nIP = 127.0.0.1\nPORT = 27017\nDB_NAME = CoreDatabase\nINSTALL_PATH = /home/eamanu/dev/test_coremanagement\n; timeout on milliseconds. 5000 ms = 5 seconds\nTIMEOUT_DB_MS = 5000\n```\n\nIf we want all the variables to be obligatory, we have to mark the variable \nlike 'required'. Then, we have to say what is the type is the variable.\n\nOur code is the next: \n\n```python\n\nfrom configFilesManager import configFilesManager\n\nschema = {'CONFIG': {'IP': {'type': 'str', 'required': True},\n                        'TIMEOUT_DB_MS': {'type': 'int', 'required': True},\n                        'PORT': {'type': 'int', 'required': True},\n                        'DB_NAME': {'type': 'str', 'required': True},\n                        'INSTALL_PATH': {'type': 'str', 'required': True}}}\n\nconfig = 'path/to/config.ini'\n\ncfm = configFilesManager(config, schema)\ncfm.run_check()\n\n```\n\nIf whole it's ok, you don't have catch any exception, but if some is bad you \nwill have a Exception raised. You could access to the values of the configs \nparsed on `cfm.parser_config_dict` dict\n\n\n# Contribution\n\nPlease see [CONTRIBUTE.md](CONTRIBUTE.md)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/orgs/PyModuleManage", "keywords": "", "license": "GPL-v3+", "maintainer": "", "maintainer_email": "", "name": "ConfigFilesManager", "package_url": "https://pypi.org/project/ConfigFilesManager/", "platform": "", "project_url": "https://pypi.org/project/ConfigFilesManager/", "project_urls": {"Bug Reports": "https://github.com/PyModuleManage/ConfigFilesManager/issues", "Homepage": "https://github.com/orgs/PyModuleManage", "Source": "https://github.com/PyModuleManage/ConfigFilesManager"}, "release_url": "https://pypi.org/project/ConfigFilesManager/0.1b1/", "requires_dist": null, "requires_python": "", "summary": "A python module to a easy manage configs files for applications", "version": "0.1b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ConfigFilesManager</h1>\n<p>A python module to a easy manage configs files for applications</p>\n<h1>Why?</h1>\n<p>This module help you to manage configurations files of python applications.\nSo, you can check the value or type of a variable in configuration file, without to\nhave write more code. You can check if a required variables is present or not. And then\nraise (or not) Exceptions.</p>\n<h1>Sample</h1>\n<p>For example if we have a config file like this:</p>\n<pre><span class=\"k\">[CONFIG]</span>\n<span class=\"c1\"># Configuration file</span>\n<span class=\"na\">IP</span> <span class=\"o\">=</span> <span class=\"s\">127.0.0.1</span>\n<span class=\"na\">PORT</span> <span class=\"o\">=</span> <span class=\"s\">27017</span>\n<span class=\"na\">DB_NAME</span> <span class=\"o\">=</span> <span class=\"s\">CoreDatabase</span>\n<span class=\"na\">INSTALL_PATH</span> <span class=\"o\">=</span> <span class=\"s\">/home/eamanu/dev/test_coremanagement</span>\n<span class=\"c1\">; timeout on milliseconds. 5000 ms = 5 seconds</span>\n<span class=\"na\">TIMEOUT_DB_MS</span> <span class=\"o\">=</span> <span class=\"s\">5000</span>\n</pre>\n<p>If we want all the variables to be obligatory, we have to mark the variable\nlike 'required'. Then, we have to say what is the type is the variable.</p>\n<p>Our code is the next:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configFilesManager</span> <span class=\"kn\">import</span> <span class=\"n\">configFilesManager</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CONFIG'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'IP'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'str'</span><span class=\"p\">,</span> <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n                        <span class=\"s1\">'TIMEOUT_DB_MS'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'int'</span><span class=\"p\">,</span> <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n                        <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'int'</span><span class=\"p\">,</span> <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n                        <span class=\"s1\">'DB_NAME'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'str'</span><span class=\"p\">,</span> <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n                        <span class=\"s1\">'INSTALL_PATH'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'str'</span><span class=\"p\">,</span> <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}}}</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"s1\">'path/to/config.ini'</span>\n\n<span class=\"n\">cfm</span> <span class=\"o\">=</span> <span class=\"n\">configFilesManager</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"n\">cfm</span><span class=\"o\">.</span><span class=\"n\">run_check</span><span class=\"p\">()</span>\n</pre>\n<p>If whole it's ok, you don't have catch any exception, but if some is bad you\nwill have a Exception raised. You could access to the values of the configs\nparsed on <code>cfm.parser_config_dict</code> dict</p>\n<h1>Contribution</h1>\n<p>Please see <a href=\"CONTRIBUTE.md\" rel=\"nofollow\">CONTRIBUTE.md</a></p>\n\n          </div>"}, "last_serial": 4242997, "releases": {"0.1b1": [{"comment_text": "", "digests": {"md5": "3d98b10d8a8b163e8a8edd823cfcffe9", "sha256": "0adf8f5b6e4ff4fc1e7ef5245b93c515e62e703d853606102385ebce57c555db"}, "downloads": -1, "filename": "ConfigFilesManager-0.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d98b10d8a8b163e8a8edd823cfcffe9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3762, "upload_time": "2018-09-06T00:43:54", "upload_time_iso_8601": "2018-09-06T00:43:54.518829Z", "url": "https://files.pythonhosted.org/packages/8f/44/bbc3e28a204e8abfba0f988a796f9994142496bd934a33991b6d443989fc/ConfigFilesManager-0.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31a376d34f0c81ab1ae9a0f43bbe7ffc", "sha256": "1c056a22ff47468a05d40a183b3fdc0273470e9eb56417900f4714dbbb566b3c"}, "downloads": -1, "filename": "ConfigFilesManager-0.1b1.tar.gz", "has_sig": false, "md5_digest": "31a376d34f0c81ab1ae9a0f43bbe7ffc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3352, "upload_time": "2018-09-06T00:43:56", "upload_time_iso_8601": "2018-09-06T00:43:56.656095Z", "url": "https://files.pythonhosted.org/packages/e5/ba/a92e4ccdf2efff124e6291ce59cbd5f986935754ed0e39ae070e2b2d517a/ConfigFilesManager-0.1b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d98b10d8a8b163e8a8edd823cfcffe9", "sha256": "0adf8f5b6e4ff4fc1e7ef5245b93c515e62e703d853606102385ebce57c555db"}, "downloads": -1, "filename": "ConfigFilesManager-0.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d98b10d8a8b163e8a8edd823cfcffe9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3762, "upload_time": "2018-09-06T00:43:54", "upload_time_iso_8601": "2018-09-06T00:43:54.518829Z", "url": "https://files.pythonhosted.org/packages/8f/44/bbc3e28a204e8abfba0f988a796f9994142496bd934a33991b6d443989fc/ConfigFilesManager-0.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31a376d34f0c81ab1ae9a0f43bbe7ffc", "sha256": "1c056a22ff47468a05d40a183b3fdc0273470e9eb56417900f4714dbbb566b3c"}, "downloads": -1, "filename": "ConfigFilesManager-0.1b1.tar.gz", "has_sig": false, "md5_digest": "31a376d34f0c81ab1ae9a0f43bbe7ffc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3352, "upload_time": "2018-09-06T00:43:56", "upload_time_iso_8601": "2018-09-06T00:43:56.656095Z", "url": "https://files.pythonhosted.org/packages/e5/ba/a92e4ccdf2efff124e6291ce59cbd5f986935754ed0e39ae070e2b2d517a/ConfigFilesManager-0.1b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:56 2020"}