{"info": {"author": "django-notifications team", "author_email": "yang@yangyubo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Utilities"], "description": "``django-notifications`` Documentation\n=======================================\n(Reason for this repo is that parent repo ``django-notifications`` has not released their latest abstract model version)\n\n|build-status| |coveralls|\n\n`django-notifications <https://github.com/django-notifications/django-notifications>`_ is a GitHub notification alike app for Django, it was derived from `django-activity-stream <https://github.com/justquick/django-activity-stream>`_\n\nThe major difference between ``django-notifications`` and ``django-activity-stream``:\n\n* ``django-notifications`` is for building something like Github \"Notifications\"\n* While ``django-activity-stream`` is for building Github \"News Feed\"\n\nNotifications are actually actions events, which are categorized by four main components.\n\n* ``Actor``. The object that performed the activity.\n* ``Verb``. The verb phrase that identifies the action of the activity.\n* ``Action Object``. *(Optional)* The object linked to the action itself.\n* ``Target``. *(Optional)* The object to which the activity was performed.\n\n``Actor``, ``Action Object`` and ``Target`` are ``GenericForeignKeys`` to any arbitrary Django object.\nAn action is a description of an action that was performed (``Verb``) at some instant in time by some ``Actor`` on some optional ``Target`` that results in an ``Action Object`` getting created/updated/deleted.\n\nFor example: `justquick <https://github.com/justquick/>`_ ``(actor)`` *closed* ``(verb)`` `issue 2 <https://github.com/justquick/django-activity-stream/issues/2>`_ ``(action_object)`` on `activity-stream <https://github.com/justquick/django-activity-stream/>`_ ``(target)`` 12 hours ago\n\nNomenclature of this specification is based on the Activity Streams Spec: `<http://activitystrea.ms/specs/atom/1.0/>`_\n\nRequirements\n============\n\n- Python 2.7, 3.4, 3.5, 3.6\n- Django 1.7, 1.8, 1.9, 1.10, 1.11, 2.0\n\nInstallation\n============\n\nInstallation is easy using ``pip`` and will install all required libraries.\n\n::\n\n    $ pip install django-notifications-latest\n\nor get it from source\n\n::\n\n    $ git clone https://github.com/shamilbuzz/django-notifications\n    $ cd django-notifications\n    $ python setup.py sdist\n    $ pip install dist/django-notifications-latest*a\n\nNote that `django-model-utils <http://pypi.python.org/pypi/django-model-utils>`_ will be installed: this is required for the pass-through QuerySet manager.\n\nThen to add the Django Notifications to your project add the app ``notifications`` to your ``INSTALLED_APPS`` and urlconf.\n\nThe app should go somewhere after all the apps that are going to be generating notifications like ``django.contrib.auth``\n\n::\n\n    INSTALLED_APPS = (\n        'django.contrib.auth',\n        ...\n        'notifications',\n        ...\n    )\n\nAdd the notifications urls to your urlconf::\n\n    import notifications.urls\n\n    urlpatterns = [\n        ...\n        url('^inbox/notifications/', include(notifications.urls, namespace='notifications')),\n        ...\n    ]\n\nThe method of installing these urls, importing rather than using ``'notifications.urls'``, is required to ensure that the urls are installed in the ``notifications`` namespace.\n\nTo run schema migration, execute ``python manage.py migrate notifications``.\n\nGenerating Notifications\n=========================\n\nGenerating notifications is probably best done in a separate signal.\n\n::\n\n    from django.db.models.signals import post_save\n    from notifications.signals import notify\n    from myapp.models import MyModel\n\n    def my_handler(sender, instance, created, **kwargs):\n        notify.send(instance, verb='was saved')\n\n    post_save.connect(my_handler, sender=MyModel)\n\nTo generate an notification anywhere in your code, simply import the notify signal and send it with your actor, recipient, and verb.\n\n::\n\n    from notifications.signals import notify\n\n    notify.send(user, recipient=user, verb='you reached level 10')\n\nThe complete syntax is.\n\n::\n\n    notify.send(actor, recipient, verb, action_object, target, level, description, public, timestamp, **kwargs)\n\nArguments:\n * **actor**: An object of any type. (Required) Note: Use **sender** instead of **actor** if you intend to use keyword arguments\n * **recipient**: A **Group** or a **User QuerySet** or a list of **User**. (Required)\n * **verb**: An string. (Required)\n * **action_object**: An object of any type. (Optional)\n * **target**: An object of any type. (Optional)\n * **level**: One of Notification.LEVELS ('success', 'info', 'warning', 'error') (default=info). (Optional)\n * **description**: An string. (Optional)\n * **public**: An boolean (default=True). (Optional)\n * **timestamp**: An tzinfo (default=timezone.now()). (Optional)\n\nExtra data\n----------\n\nYou can attach arbitrary data to your notifications by doing the following:\n\n* Add to your settings.py: ``DJANGO_NOTIFICATIONS_CONFIG = { 'USE_JSONFIELD': True}``\n\nThen, any extra arguments you pass to ``notify.send(...)`` will be attached to the ``.data`` attribute of the notification object.\nThese will be serialised using the JSONField's serialiser, so you may need to take that into account: using only objects that will be serialised is a good idea.\n\nSoft delete\n-----------\n\nBy default, ``delete/(?P<slug>\\d+)/`` deletes specified notification record from DB.\nYou can change this behaviour to \"mark ``Notification.deleted`` field as ``True``\" by:\n\n* Add to your settings.py: ``DJANGO_NOTIFICATIONS_CONFIG = { 'SOFT_DELETE': True}``\n\nWith this option, QuerySet methods ``unread`` and ``read`` contain one more filter: ``deleted=False``.\nMeanwhile, QuerySet methods ``deleted``, ``active``, ``mark_all_as_deleted``, ``mark_all_as_active`` are turned on.\nSee more details in QuerySet methods section.\n\nAPI\n====\n\nQuerySet methods\n-----------------\n\nUsing ``django-model-utils``, we get the ability to add queryset methods to not only the manager, but to all querysets that will be used, including related objects. This enables us to do things like::\n\n  Notification.objects.unread()\n\nwhich returns all unread notifications. To do this for a single user, we can do::\n\n  user = User.objects.get(pk=pk)\n  user.notifications.unread()\n\nThere are some other QuerySet methods, too.\n\n``qs.unsent()``\n~~~~~~~~~~~~~~~\n\nReturn all of the unsent notifications, filtering the current queryset. (emailed=False)\n\n``qs.sent()``\n~~~~~~~~~~~~~~~\n\nReturn all of the sent notifications, filtering the current queryset. (emailed=True)\n\n``qs.unread()``\n~~~~~~~~~~~~~~~\n\nReturn all of the unread notifications, filtering the current queryset.\nWhen ``SOFT_DELETE=True``, this filter contains ``deleted=False``.\n\n``qs.read()``\n~~~~~~~~~~~~~~~\n\nReturn all of the read notifications, filtering the current queryset.\nWhen ``SOFT_DELETE=True``, this filter contains ``deleted=False``.\n\n\n``qs.mark_all_as_read()`` | ``qs.mark_all_as_read(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all of the unread notifications in the queryset (optionally also filtered by ``recipient``) as read.\n\n\n``qs.mark_all_as_unread()`` | ``qs.mark_all_as_unread(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all of the read notifications in the queryset (optionally also filtered by ``recipient``) as unread.\n\n``qs.mark_as_sent()`` | ``qs.mark_as_sent(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all of the unsent notifications in the queryset (optionally also filtered by ``recipient``) as sent.\n\n\n``qs.mark_as_unsent()`` | ``qs.mark_as_unsent(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all of the sent notifications in the queryset (optionally also filtered by ``recipient``) as unsent.\n\n``qs.deleted()``\n~~~~~~~~~~~~~~~~\n\nReturn all notifications that have ``deleted=True``, filtering the current queryset.\nMust be used with ``SOFT_DELETE=True``.\n\n``qs.active()``\n~~~~~~~~~~~~~~~\n\nReturn all notifications that have ``deleted=False``, filtering the current queryset.\nMust be used with ``DELETE=True``.\n\n``qs.mark_all_as_deleted()`` | ``qs.mark_all_as_deleted(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all notifications in the queryset (optionally also filtered by ``recipient``) as ``deleted=True``.\nMust be used with ``DELETE=True``.\n\n``qs.mark_all_as_active()`` | ``qs.mark_all_as_active(recipient)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMark all notifications in the queryset (optionally also filtered by ``recipient``) as ``deleted=False``.\nMust be used with ``SOFT_DELETE=True``.\n\n\nModel methods\n-------------\n\n``obj.timesince([datetime])``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA wrapper for Django's ``timesince`` function.\n\n``obj.mark_as_read()``\n~~~~~~~~~~~~~~~~~~~~~~\n\nMark the current object as read.\n\n\nTemplate tags\n-------------\n\nPut `{% load notifications_tags %}` in the template before you actually use notification tags.\n\n\n``notifications_unread``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    {% notifications_unread %}\n\nGive the number of unread notifications for a user, or nothing (an empty string) for an anonymous user.\n\nStoring the count in a variable for further processing is advised, such as::\n\n    {% notifications_unread as unread_count %}\n    ...\n    {% if unread_count %}\n        You have <strong>{{ unread_count }}</strong> unread notifications.\n    {% endif %}\n\nLive-updater API\n================\n\nTo ensure users always have the most up-to-date notifications, `django-notifications` includes a simple javascript API\nfor updating specific fields within a django template.\n\nThere are two possible API calls that can be made:\n\n1. ``api/unread_count/`` that returns a javascript object with 1 key: ``unread_count`` eg::\n\n        {\"unread_count\":1}\n\n#. ``api/unread_list/`` that returns a javascript object with 2 keys: `unread_count` and `unread_list` eg::\n\n        {\n         \"unread_count\":1,\n         \"unread_list\":[--list of json representations of notifications--]\n        }\n\n   Representations of notifications are based on the django method: ``model_to_dict``\n\n   Query string arguments:\n\n   - **max** - maximum length of unread list.\n   - **mark_as_read** - mark notification in list as read.\n\n   For example, get ``api/unread_list/?max=3&mark_as_read=true`` returns 3 notifications and mark them read (remove from list on next request).\n\n\nHow to use:\n-----------\n\n1. Put ``{% load notifications_tags %}`` in the template before you actually use notification tags.\n2. In the area where you are loading javascript resources add the following tags in the order below::\n\n       <script src=\"{% static 'notifications/notify.js' %}\" type=\"text/javascript\"></script>\n       {% register_notify_callbacks callbacks='fill_notification_list,fill_notification_badge' %}\n\n   ``register_notify_callbacks`` takes the following arguments:\n\n   1. ``badge_class`` (default ``live_notify_badge``) - The identifier `class` of the element to show the unread count, that will be periodically updated.\n   #. ``menu_class`` (default ``live_notify_list``) - The identifier `class` of the element to insert a list of unread items, that will be periodically updated.\n   #. ``refresh_period`` (default ``15``) - How often to fetch unread items from the server (integer in seconds).\n   #. ``fetch`` (default ``5``) - How many notifications to fetch each time.\n   #. ``callbacks`` (default ``<empty string>``) - A comma-separated list of javascript functions to call each period.\n   #. ``api_name`` (default ``list``) - The name of the API to call (this can be either ``list`` or ``count``).\n\n3. To insert a live-updating unread count, use the following template::\n\n       {% live_notify_badge %}\n\n   ``live_notify_badge`` takes the following arguments:\n\n   1. ``badge_class`` (default ``live_notify_badge``) - The identifier ``class`` for the ``<span>`` element that will be created to show the unread count.\n\n4. To insert a live-updating unread list, use the following template::\n\n       {% live_notify_list %}\n\n   ``live_notify_list`` takes the following arguments:\n\n   1. ``list_class`` (default ``live_notify_list``) - The identifier ``class`` for the ``<ul>`` element that will be created to insert the list of notifications into.\n\nUsing the live-updater with bootstrap\n-------------------------------------\n\nThe Live-updater can be incorporated into bootstrap with minimal code.\n\nTo create a live-updating bootstrap badge containing the unread count, simply use the template tag::\n\n    {% live_notify_badge badge_class=\"badge\" %}\n\nTo create a live-updating bootstrap dropdown menu containing a selection of recent unread notifications, simply use the template tag::\n\n    {% live_notify_list list_class=\"dropdown-menu\" %}\n\nCustomising the display of notifications using javascript callbacks\n-------------------------------------------------------------------\n\nWhile the live notifier for unread counts should suit most use cases, users may wish to alter how\nunread notifications are shown.\n\nThe ``callbacks`` argument of the ``register_notify_callbacks`` dictates which javascript functions are called when\nthe unread api call is made.\n\nTo add a custom javascript callback, simply add this to the list, like so::\n\n       {% register_notify_callbacks callbacks='fill_notification_badge,my_special_notification_callback' %}\n\nThe above would cause the callback to update the unread count badge, and would call the custom function `my_special_notification_callback`.\nAll callback functions are passed a single argument by convention called `data`, which contains the entire result from the API.\n\nFor example, the below function would get the recent list of unread messages and log them to the console::\n\n    function my_special_notification_callback(data) {\n        for (var i=0; i < data.unread_list.length; i++) {\n            msg = data.unread_list[i];\n            console.log(msg);\n        }\n    }\n\nTesting the live-updater\n------------------------\n\n1. Clone the repo\n2. Run `./manage.py runserver`\n3. Browse to `yourserverip/test/`\n4. Click 'Make a notification' and a new notification should appear in the list in 5-10 seconds.\n\nSerializing the django-notifications Model\n==========================================\n\nSee here - http://www.django-rest-framework.org/api-guide/relations/#generic-relationships\n\nIn this example the target object can be of type Foo or Bar and the appropriate serializer will be used.\n\n::\n\n    class GenericNotificationRelatedField(serializers.RelatedField):\n\n        def to_representation(self, value):\n            if isinstance(value, Foo):\n                serializer = FooSerializer(value)\n            if isinstance(value, Bar):\n                serializer = BarSerializer(value)\n\n            return serializer.data\n\n\n    class NotificationSerializer(serializers.Serializer):\n        recipient = PublicUserSerializer(User, read_only=True)\n        unread = serializers.BooleanField(read_only=True)\n        target = GenericNotificationRelatedField(read_only=True)\n\nThanks to @DaWy\n\n``AbstractNotification`` model\n------------------------------\n\nIn case you need to customize the notification model in order to add field or\ncustomised features that depend on your application, you can inherit and extend\nthe ``AbstractNotification`` model, example:\n\n.. code-block:: python\n\n    from django.db import models\n    from notifications.base.models import AbstractNotification\n\n\n    class Notification(AbstractNotification):\n        # custom field example\n        category = models.ForeignKey('myapp.Category',\n                                     on_delete=models.CASCADE)\n\n        class Meta(AbstractNotification.Meta):\n            abstract = False\n\nNotes\n=====\n\nEmail Notification\n------------------\n\nSending email to users has not been integrated into this library. So for now you need to implement it if needed. There is a reserved field `Notification.emailed` to make it easier.\n\n\n``django-notifications`` Team\n==============================\n\nCore contributors (in alphabetical order):\n\n- `Alvaro Leonel <https://github.com/AlvaroLQueiroz>`_\n- `Samuel Spencer <https://github.com/LegoStormtroopr>`_\n- `Yang Yubo <https://github.com/yangyubo>`_\n- `Zhongyuan Zhang <https://github.com/zhang-z>`_\n\n.. |build-status| image:: https://travis-ci.org/django-notifications/django-notifications.svg\n    :target: https://travis-ci.org/django-notifications/django-notifications\n\n.. |coveralls| image:: https://coveralls.io/repos/django-notifications/django-notifications/badge.png?branch=master\n    :alt: Code coverage on coveralls\n    :scale: 100%\n    :target: https://coveralls.io/r/django-notifications/django-notifications?branch=master\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shamilbuzz/django-notifications", "keywords": "django notifications github action event stream", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-notifications-latest", "package_url": "https://pypi.org/project/django-notifications-latest/", "platform": "", "project_url": "https://pypi.org/project/django-notifications-latest/", "project_urls": {"Homepage": "https://github.com/shamilbuzz/django-notifications"}, "release_url": "https://pypi.org/project/django-notifications-latest/2.1.0/", "requires_dist": null, "requires_python": "", "summary": "GitHub notifications alike app for Django.", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-notifications-documentation\">\n<h2><tt><span class=\"pre\">django-notifications</span></tt> Documentation</h2>\n<p>(Reason for this repo is that parent repo <tt><span class=\"pre\">django-notifications</span></tt> has not released their latest abstract model version)</p>\n<p><a href=\"https://travis-ci.org/django-notifications/django-notifications\" rel=\"nofollow\"><img alt=\"build-status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9ae0c2178c17e08f8b7d6b568cbd3ed1b949e15/68747470733a2f2f7472617669732d63692e6f72672f646a616e676f2d6e6f74696669636174696f6e732f646a616e676f2d6e6f74696669636174696f6e732e737667\"></a> <a href=\"https://coveralls.io/r/django-notifications/django-notifications?branch=master\" rel=\"nofollow\"><img alt=\"Code coverage on coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4cd56f7701a945b5703766358158f7230202363e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f646a616e676f2d6e6f74696669636174696f6e732f646a616e676f2d6e6f74696669636174696f6e732f62616467652e706e673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"https://github.com/django-notifications/django-notifications\" rel=\"nofollow\">django-notifications</a> is a GitHub notification alike app for Django, it was derived from <a href=\"https://github.com/justquick/django-activity-stream\" rel=\"nofollow\">django-activity-stream</a></p>\n<p>The major difference between <tt><span class=\"pre\">django-notifications</span></tt> and <tt><span class=\"pre\">django-activity-stream</span></tt>:</p>\n<ul>\n<li><tt><span class=\"pre\">django-notifications</span></tt> is for building something like Github \u201cNotifications\u201d</li>\n<li>While <tt><span class=\"pre\">django-activity-stream</span></tt> is for building Github \u201cNews Feed\u201d</li>\n</ul>\n<p>Notifications are actually actions events, which are categorized by four main components.</p>\n<ul>\n<li><tt>Actor</tt>. The object that performed the activity.</li>\n<li><tt>Verb</tt>. The verb phrase that identifies the action of the activity.</li>\n<li><tt>Action Object</tt>. <em>(Optional)</em> The object linked to the action itself.</li>\n<li><tt>Target</tt>. <em>(Optional)</em> The object to which the activity was performed.</li>\n</ul>\n<p><tt>Actor</tt>, <tt>Action Object</tt> and <tt>Target</tt> are <tt>GenericForeignKeys</tt> to any arbitrary Django object.\nAn action is a description of an action that was performed (<tt>Verb</tt>) at some instant in time by some <tt>Actor</tt> on some optional <tt>Target</tt> that results in an <tt>Action Object</tt> getting created/updated/deleted.</p>\n<p>For example: <a href=\"https://github.com/justquick/\" rel=\"nofollow\">justquick</a> <tt>(actor)</tt> <em>closed</em> <tt>(verb)</tt> <a href=\"https://github.com/justquick/django-activity-stream/issues/2\" rel=\"nofollow\">issue 2</a> <tt>(action_object)</tt> on <a href=\"https://github.com/justquick/django-activity-stream/\" rel=\"nofollow\">activity-stream</a> <tt>(target)</tt> 12 hours ago</p>\n<p>Nomenclature of this specification is based on the Activity Streams Spec: <a href=\"http://activitystrea.ms/specs/atom/1.0/\" rel=\"nofollow\">http://activitystrea.ms/specs/atom/1.0/</a></p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7, 3.4, 3.5, 3.6</li>\n<li>Django 1.7, 1.8, 1.9, 1.10, 1.11, 2.0</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installation is easy using <tt>pip</tt> and will install all required libraries.</p>\n<pre>$ pip install django-notifications-latest\n</pre>\n<p>or get it from source</p>\n<pre>$ git clone https://github.com/shamilbuzz/django-notifications\n$ cd django-notifications\n$ python setup.py sdist\n$ pip install dist/django-notifications-latest*a\n</pre>\n<p>Note that <a href=\"http://pypi.python.org/pypi/django-model-utils\" rel=\"nofollow\">django-model-utils</a> will be installed: this is required for the pass-through QuerySet manager.</p>\n<p>Then to add the Django Notifications to your project add the app <tt>notifications</tt> to your <tt>INSTALLED_APPS</tt> and urlconf.</p>\n<p>The app should go somewhere after all the apps that are going to be generating notifications like <tt>django.contrib.auth</tt></p>\n<pre>INSTALLED_APPS = (\n    'django.contrib.auth',\n    ...\n    'notifications',\n    ...\n)\n</pre>\n<p>Add the notifications urls to your urlconf:</p>\n<pre>import notifications.urls\n\nurlpatterns = [\n    ...\n    url('^inbox/notifications/', include(notifications.urls, namespace='notifications')),\n    ...\n]\n</pre>\n<p>The method of installing these urls, importing rather than using <tt>'notifications.urls'</tt>, is required to ensure that the urls are installed in the <tt>notifications</tt> namespace.</p>\n<p>To run schema migration, execute <tt>python manage.py migrate notifications</tt>.</p>\n</div>\n<div id=\"generating-notifications\">\n<h2>Generating Notifications</h2>\n<p>Generating notifications is probably best done in a separate signal.</p>\n<pre>from django.db.models.signals import post_save\nfrom notifications.signals import notify\nfrom myapp.models import MyModel\n\ndef my_handler(sender, instance, created, **kwargs):\n    notify.send(instance, verb='was saved')\n\npost_save.connect(my_handler, sender=MyModel)\n</pre>\n<p>To generate an notification anywhere in your code, simply import the notify signal and send it with your actor, recipient, and verb.</p>\n<pre>from notifications.signals import notify\n\nnotify.send(user, recipient=user, verb='you reached level 10')\n</pre>\n<p>The complete syntax is.</p>\n<pre>notify.send(actor, recipient, verb, action_object, target, level, description, public, timestamp, **kwargs)\n</pre>\n<dl>\n<dt>Arguments:</dt>\n<dd><ul>\n<li><strong>actor</strong>: An object of any type. (Required) Note: Use <strong>sender</strong> instead of <strong>actor</strong> if you intend to use keyword arguments</li>\n<li><strong>recipient</strong>: A <strong>Group</strong> or a <strong>User QuerySet</strong> or a list of <strong>User</strong>. (Required)</li>\n<li><strong>verb</strong>: An string. (Required)</li>\n<li><strong>action_object</strong>: An object of any type. (Optional)</li>\n<li><strong>target</strong>: An object of any type. (Optional)</li>\n<li><strong>level</strong>: One of Notification.LEVELS (\u2018success\u2019, \u2018info\u2019, \u2018warning\u2019, \u2018error\u2019) (default=info). (Optional)</li>\n<li><strong>description</strong>: An string. (Optional)</li>\n<li><strong>public</strong>: An boolean (default=True). (Optional)</li>\n<li><strong>timestamp</strong>: An tzinfo (default=timezone.now()). (Optional)</li>\n</ul>\n</dd>\n</dl>\n<div id=\"extra-data\">\n<h3>Extra data</h3>\n<p>You can attach arbitrary data to your notifications by doing the following:</p>\n<ul>\n<li>Add to your settings.py: <tt>DJANGO_NOTIFICATIONS_CONFIG = { 'USE_JSONFIELD': True}</tt></li>\n</ul>\n<p>Then, any extra arguments you pass to <tt><span class=\"pre\">notify.send(...)</span></tt> will be attached to the <tt>.data</tt> attribute of the notification object.\nThese will be serialised using the JSONField\u2019s serialiser, so you may need to take that into account: using only objects that will be serialised is a good idea.</p>\n</div>\n<div id=\"soft-delete\">\n<h3>Soft delete</h3>\n<p>By default, <tt><span class=\"pre\">delete/(?P&lt;slug&gt;\\d+)/</span></tt> deletes specified notification record from DB.\nYou can change this behaviour to \u201cmark <tt>Notification.deleted</tt> field as <tt>True</tt>\u201d by:</p>\n<ul>\n<li>Add to your settings.py: <tt>DJANGO_NOTIFICATIONS_CONFIG = { 'SOFT_DELETE': True}</tt></li>\n</ul>\n<p>With this option, QuerySet methods <tt>unread</tt> and <tt>read</tt> contain one more filter: <tt>deleted=False</tt>.\nMeanwhile, QuerySet methods <tt>deleted</tt>, <tt>active</tt>, <tt>mark_all_as_deleted</tt>, <tt>mark_all_as_active</tt> are turned on.\nSee more details in QuerySet methods section.</p>\n</div>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<div id=\"queryset-methods\">\n<h3>QuerySet methods</h3>\n<p>Using <tt><span class=\"pre\">django-model-utils</span></tt>, we get the ability to add queryset methods to not only the manager, but to all querysets that will be used, including related objects. This enables us to do things like:</p>\n<pre>Notification.objects.unread()\n</pre>\n<p>which returns all unread notifications. To do this for a single user, we can do:</p>\n<pre>user = User.objects.get(pk=pk)\nuser.notifications.unread()\n</pre>\n<p>There are some other QuerySet methods, too.</p>\n<div id=\"qs-unsent\">\n<h4><tt>qs.unsent()</tt></h4>\n<p>Return all of the unsent notifications, filtering the current queryset. (emailed=False)</p>\n</div>\n<div id=\"qs-sent\">\n<h4><tt>qs.sent()</tt></h4>\n<p>Return all of the sent notifications, filtering the current queryset. (emailed=True)</p>\n</div>\n<div id=\"qs-unread\">\n<h4><tt>qs.unread()</tt></h4>\n<p>Return all of the unread notifications, filtering the current queryset.\nWhen <tt>SOFT_DELETE=True</tt>, this filter contains <tt>deleted=False</tt>.</p>\n</div>\n<div id=\"qs-read\">\n<h4><tt>qs.read()</tt></h4>\n<p>Return all of the read notifications, filtering the current queryset.\nWhen <tt>SOFT_DELETE=True</tt>, this filter contains <tt>deleted=False</tt>.</p>\n</div>\n<div id=\"qs-mark-all-as-read-qs-mark-all-as-read-recipient\">\n<h4><tt>qs.mark_all_as_read()</tt> | <tt>qs.mark_all_as_read(recipient)</tt></h4>\n<p>Mark all of the unread notifications in the queryset (optionally also filtered by <tt>recipient</tt>) as read.</p>\n</div>\n<div id=\"qs-mark-all-as-unread-qs-mark-all-as-unread-recipient\">\n<h4><tt>qs.mark_all_as_unread()</tt> | <tt>qs.mark_all_as_unread(recipient)</tt></h4>\n<p>Mark all of the read notifications in the queryset (optionally also filtered by <tt>recipient</tt>) as unread.</p>\n</div>\n<div id=\"qs-mark-as-sent-qs-mark-as-sent-recipient\">\n<h4><tt>qs.mark_as_sent()</tt> | <tt>qs.mark_as_sent(recipient)</tt></h4>\n<p>Mark all of the unsent notifications in the queryset (optionally also filtered by <tt>recipient</tt>) as sent.</p>\n</div>\n<div id=\"qs-mark-as-unsent-qs-mark-as-unsent-recipient\">\n<h4><tt>qs.mark_as_unsent()</tt> | <tt>qs.mark_as_unsent(recipient)</tt></h4>\n<p>Mark all of the sent notifications in the queryset (optionally also filtered by <tt>recipient</tt>) as unsent.</p>\n</div>\n<div id=\"qs-deleted\">\n<h4><tt>qs.deleted()</tt></h4>\n<p>Return all notifications that have <tt>deleted=True</tt>, filtering the current queryset.\nMust be used with <tt>SOFT_DELETE=True</tt>.</p>\n</div>\n<div id=\"qs-active\">\n<h4><tt>qs.active()</tt></h4>\n<p>Return all notifications that have <tt>deleted=False</tt>, filtering the current queryset.\nMust be used with <tt>DELETE=True</tt>.</p>\n</div>\n<div id=\"qs-mark-all-as-deleted-qs-mark-all-as-deleted-recipient\">\n<h4><tt>qs.mark_all_as_deleted()</tt> | <tt>qs.mark_all_as_deleted(recipient)</tt></h4>\n<p>Mark all notifications in the queryset (optionally also filtered by <tt>recipient</tt>) as <tt>deleted=True</tt>.\nMust be used with <tt>DELETE=True</tt>.</p>\n</div>\n<div id=\"qs-mark-all-as-active-qs-mark-all-as-active-recipient\">\n<h4><tt>qs.mark_all_as_active()</tt> | <tt>qs.mark_all_as_active(recipient)</tt></h4>\n<p>Mark all notifications in the queryset (optionally also filtered by <tt>recipient</tt>) as <tt>deleted=False</tt>.\nMust be used with <tt>SOFT_DELETE=True</tt>.</p>\n</div>\n</div>\n<div id=\"model-methods\">\n<h3>Model methods</h3>\n<div id=\"obj-timesince-datetime\">\n<h4><tt><span class=\"pre\">obj.timesince([datetime])</span></tt></h4>\n<p>A wrapper for Django\u2019s <tt>timesince</tt> function.</p>\n</div>\n<div id=\"obj-mark-as-read\">\n<h4><tt>obj.mark_as_read()</tt></h4>\n<p>Mark the current object as read.</p>\n</div>\n</div>\n<div id=\"template-tags\">\n<h3>Template tags</h3>\n<p>Put <cite>{% load notifications_tags %}</cite> in the template before you actually use notification tags.</p>\n<div id=\"notifications-unread\">\n<h4><tt>notifications_unread</tt></h4>\n<pre>{% notifications_unread %}\n</pre>\n<p>Give the number of unread notifications for a user, or nothing (an empty string) for an anonymous user.</p>\n<p>Storing the count in a variable for further processing is advised, such as:</p>\n<pre>{% notifications_unread as unread_count %}\n...\n{% if unread_count %}\n    You have &lt;strong&gt;{{ unread_count }}&lt;/strong&gt; unread notifications.\n{% endif %}\n</pre>\n</div>\n</div>\n</div>\n<div id=\"live-updater-api\">\n<h2>Live-updater API</h2>\n<p>To ensure users always have the most up-to-date notifications, <cite>django-notifications</cite> includes a simple javascript API\nfor updating specific fields within a django template.</p>\n<p>There are two possible API calls that can be made:</p>\n<ol>\n<li><p><tt>api/unread_count/</tt> that returns a javascript object with 1 key: <tt>unread_count</tt> eg:</p>\n<pre>{\"unread_count\":1}\n</pre>\n</li>\n<li><p><tt>api/unread_list/</tt> that returns a javascript object with 2 keys: <cite>unread_count</cite> and <cite>unread_list</cite> eg:</p>\n<pre>{\n \"unread_count\":1,\n \"unread_list\":[--list of json representations of notifications--]\n}\n</pre>\n<p>Representations of notifications are based on the django method: <tt>model_to_dict</tt></p>\n<p>Query string arguments:</p>\n<ul>\n<li><strong>max</strong> - maximum length of unread list.</li>\n<li><strong>mark_as_read</strong> - mark notification in list as read.</li>\n</ul>\n<p>For example, get <tt><span class=\"pre\">api/unread_list/?max=3&amp;mark_as_read=true</span></tt> returns 3 notifications and mark them read (remove from list on next request).</p>\n</li>\n</ol>\n<div id=\"how-to-use\">\n<h3>How to use:</h3>\n<ol>\n<li><p>Put <tt>{% load notifications_tags %}</tt> in the template before you actually use notification tags.</p>\n</li>\n<li><p>In the area where you are loading javascript resources add the following tags in the order below:</p>\n<pre>&lt;script src=\"{% static 'notifications/notify.js' %}\" type=\"text/javascript\"&gt;&lt;/script&gt;\n{% register_notify_callbacks callbacks='fill_notification_list,fill_notification_badge' %}\n</pre>\n<p><tt>register_notify_callbacks</tt> takes the following arguments:</p>\n<ol>\n<li><tt>badge_class</tt> (default <tt>live_notify_badge</tt>) - The identifier <cite>class</cite> of the element to show the unread count, that will be periodically updated.</li>\n<li><tt>menu_class</tt> (default <tt>live_notify_list</tt>) - The identifier <cite>class</cite> of the element to insert a list of unread items, that will be periodically updated.</li>\n<li><tt>refresh_period</tt> (default <tt>15</tt>) - How often to fetch unread items from the server (integer in seconds).</li>\n<li><tt>fetch</tt> (default <tt>5</tt>) - How many notifications to fetch each time.</li>\n<li><tt>callbacks</tt> (default <tt>&lt;empty string&gt;</tt>) - A comma-separated list of javascript functions to call each period.</li>\n<li><tt>api_name</tt> (default <tt>list</tt>) - The name of the API to call (this can be either <tt>list</tt> or <tt>count</tt>).</li>\n</ol>\n</li>\n<li><p>To insert a live-updating unread count, use the following template:</p>\n<pre>{% live_notify_badge %}\n</pre>\n<p><tt>live_notify_badge</tt> takes the following arguments:</p>\n<ol>\n<li><tt>badge_class</tt> (default <tt>live_notify_badge</tt>) - The identifier <tt>class</tt> for the <tt>&lt;span&gt;</tt> element that will be created to show the unread count.</li>\n</ol>\n</li>\n<li><p>To insert a live-updating unread list, use the following template:</p>\n<pre>{% live_notify_list %}\n</pre>\n<p><tt>live_notify_list</tt> takes the following arguments:</p>\n<ol>\n<li><tt>list_class</tt> (default <tt>live_notify_list</tt>) - The identifier <tt>class</tt> for the <tt>&lt;ul&gt;</tt> element that will be created to insert the list of notifications into.</li>\n</ol>\n</li>\n</ol>\n</div>\n<div id=\"using-the-live-updater-with-bootstrap\">\n<h3>Using the live-updater with bootstrap</h3>\n<p>The Live-updater can be incorporated into bootstrap with minimal code.</p>\n<p>To create a live-updating bootstrap badge containing the unread count, simply use the template tag:</p>\n<pre>{% live_notify_badge badge_class=\"badge\" %}\n</pre>\n<p>To create a live-updating bootstrap dropdown menu containing a selection of recent unread notifications, simply use the template tag:</p>\n<pre>{% live_notify_list list_class=\"dropdown-menu\" %}\n</pre>\n</div>\n<div id=\"customising-the-display-of-notifications-using-javascript-callbacks\">\n<h3>Customising the display of notifications using javascript callbacks</h3>\n<p>While the live notifier for unread counts should suit most use cases, users may wish to alter how\nunread notifications are shown.</p>\n<p>The <tt>callbacks</tt> argument of the <tt>register_notify_callbacks</tt> dictates which javascript functions are called when\nthe unread api call is made.</p>\n<p>To add a custom javascript callback, simply add this to the list, like so:</p>\n<pre>{% register_notify_callbacks callbacks='fill_notification_badge,my_special_notification_callback' %}\n</pre>\n<p>The above would cause the callback to update the unread count badge, and would call the custom function <cite>my_special_notification_callback</cite>.\nAll callback functions are passed a single argument by convention called <cite>data</cite>, which contains the entire result from the API.</p>\n<p>For example, the below function would get the recent list of unread messages and log them to the console:</p>\n<pre>function my_special_notification_callback(data) {\n    for (var i=0; i &lt; data.unread_list.length; i++) {\n        msg = data.unread_list[i];\n        console.log(msg);\n    }\n}\n</pre>\n</div>\n<div id=\"testing-the-live-updater\">\n<h3>Testing the live-updater</h3>\n<ol>\n<li>Clone the repo</li>\n<li>Run <cite>./manage.py runserver</cite></li>\n<li>Browse to <cite>yourserverip/test/</cite></li>\n<li>Click \u2018Make a notification\u2019 and a new notification should appear in the list in 5-10 seconds.</li>\n</ol>\n</div>\n</div>\n<div id=\"serializing-the-django-notifications-model\">\n<h2>Serializing the django-notifications Model</h2>\n<p>See here - <a href=\"http://www.django-rest-framework.org/api-guide/relations/#generic-relationships\" rel=\"nofollow\">http://www.django-rest-framework.org/api-guide/relations/#generic-relationships</a></p>\n<p>In this example the target object can be of type Foo or Bar and the appropriate serializer will be used.</p>\n<pre>class GenericNotificationRelatedField(serializers.RelatedField):\n\n    def to_representation(self, value):\n        if isinstance(value, Foo):\n            serializer = FooSerializer(value)\n        if isinstance(value, Bar):\n            serializer = BarSerializer(value)\n\n        return serializer.data\n\n\nclass NotificationSerializer(serializers.Serializer):\n    recipient = PublicUserSerializer(User, read_only=True)\n    unread = serializers.BooleanField(read_only=True)\n    target = GenericNotificationRelatedField(read_only=True)\n</pre>\n<p>Thanks to @DaWy</p>\n<div id=\"abstractnotification-model\">\n<h3><tt>AbstractNotification</tt> model</h3>\n<p>In case you need to customize the notification model in order to add field or\ncustomised features that depend on your application, you can inherit and extend\nthe <tt>AbstractNotification</tt> model, example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">notifications.base.models</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractNotification</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Notification</span><span class=\"p\">(</span><span class=\"n\">AbstractNotification</span><span class=\"p\">):</span>\n    <span class=\"c1\"># custom field example</span>\n    <span class=\"n\">category</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'myapp.Category'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">AbstractNotification</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n</div>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<h2 id=\"email-notification\"><span class=\"section-subtitle\">Email Notification</span></h2>\n<p>Sending email to users has not been integrated into this library. So for now you need to implement it if needed. There is a reserved field <cite>Notification.emailed</cite> to make it easier.</p>\n</div>\n<div id=\"django-notifications-team\">\n<h2><tt><span class=\"pre\">django-notifications</span></tt> Team</h2>\n<p>Core contributors (in alphabetical order):</p>\n<ul>\n<li><a href=\"https://github.com/AlvaroLQueiroz\" rel=\"nofollow\">Alvaro Leonel</a></li>\n<li><a href=\"https://github.com/LegoStormtroopr\" rel=\"nofollow\">Samuel Spencer</a></li>\n<li><a href=\"https://github.com/yangyubo\" rel=\"nofollow\">Yang Yubo</a></li>\n<li><a href=\"https://github.com/zhang-z\" rel=\"nofollow\">Zhongyuan Zhang</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5662215, "releases": {"2.0.3": [{"comment_text": "", "digests": {"md5": "ef3ea7577808390b082f1a92197f42ff", "sha256": "0cc81fecc558d562bac4a6f5930d1e391f4a28db24249014aa869c992412cae2"}, "downloads": -1, "filename": "django-notifications-latest-2.0.3.tar.gz", "has_sig": false, "md5_digest": "ef3ea7577808390b082f1a92197f42ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26460, "upload_time": "2019-08-11T13:57:38", "upload_time_iso_8601": "2019-08-11T13:57:38.719695Z", "url": "https://files.pythonhosted.org/packages/3e/9c/16d788608579dfb08bedd77afb068b2af5fa2876c65d60be28e925a9879b/django-notifications-latest-2.0.3.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "6486aa1ef269b3bec17c857d41567ea0", "sha256": "292c0a54c90e00411f2704b739f5e044c968e0e342ffb69f29afb74b71dd6394"}, "downloads": -1, "filename": "django-notifications-latest-2.1.0.tar.gz", "has_sig": false, "md5_digest": "6486aa1ef269b3bec17c857d41567ea0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26474, "upload_time": "2019-08-11T14:02:19", "upload_time_iso_8601": "2019-08-11T14:02:19.871305Z", "url": "https://files.pythonhosted.org/packages/c4/d5/e042768b6490873cf91100d48b5970768f64a7b346b3969879c8b6c0e535/django-notifications-latest-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6486aa1ef269b3bec17c857d41567ea0", "sha256": "292c0a54c90e00411f2704b739f5e044c968e0e342ffb69f29afb74b71dd6394"}, "downloads": -1, "filename": "django-notifications-latest-2.1.0.tar.gz", "has_sig": false, "md5_digest": "6486aa1ef269b3bec17c857d41567ea0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26474, "upload_time": "2019-08-11T14:02:19", "upload_time_iso_8601": "2019-08-11T14:02:19.871305Z", "url": "https://files.pythonhosted.org/packages/c4/d5/e042768b6490873cf91100d48b5970768f64a7b346b3969879c8b6c0e535/django-notifications-latest-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:38 2020"}