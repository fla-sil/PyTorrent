{"info": {"author": "Adam Wasilewski", "author_email": "adam@wasilewski.pw", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Few handy python modules\n\nHey, I wanna share with You my python modules,\n\nI have for now:\n* logger\n* tictoc\n* hashing passwords\n* files_info\n* downloading files\n* password validation\n\nI hope You enjoy it!\n\nPS. You can find source codes on [my github](https://github.com/admw15/modules)\n\n## Docs:\n* logger:  \n##### Info\n\nPackage contains \"CreateLogger\" class that quickly create logger for us, \ninstead of importing logging module and adding handlers etc...\n\nlog file has default name same as file name, with .log.\nAlso it is in new folder called 'logs'  \nExample: python_file.py -> logs/python_file.log\n\n##### Arguments:\n* logger_name  \nType: str  \nDefault: your file name  \nDescription: logger name should be unique!  \nDefault is your filename (without .py) so it will look like: \nmailer/flask_receiver/my_first_file etc.\n\nWARNING: If you have file (parent) \nwith logger, and you are importing in it another local file (child), \nthen remember to give a new logger name to child!  \n\n```python\n# parent.py:\nimport handymodules\nimport child  # local file\n\nlog = handymodules.CreateLogger()  # its ok, don't need any arguments\nlog.info('Starting...')\nchild.function()\nlog.info('Done')\n```\n\n```python\n# child.py:\nimport handymodules\nlog = handymodules.CreateLogger()  # BAD!!!\nlog = handymodules.CreateLogger('child')  # Good\n\ndef function():\n    # do something\n    log.warning('Something is wrong')\n```\n\nIn this case, there are two loggers and two files, if you want to have \nthese two loggers in one file, then you should edit line in child  \n```python\nlog = handymodules.CreateLogger('child', log_filename='parent')\n```  \nRemember to use file basename (without .py) \n\n* stream_handler  \nType: bool  \nDefault: True  \nDescription: add a stream handler to your logger (logs in console)\n\n* file_handler  \nType: bool  \nDefault: True  \nDescription: add a file handler to your logger. It creates \"logs\" \nfolder inside directory where your file is.  \n\n* log_filename  \nType: str  \nDefault: filename  \nDescription: Just what it says, default logfile has same name as your \npython file, but with .log  \nEg. flask_app.py -> logs/flask_app.log \n\n##### Kwargs\n* timed_rotating_file  \nType: bool  \nDefault: False  \nDescription: if file handler should be timed rotating. If True, it\nwill change every midnight  \n\n* days_to_keep  \nType: int  \nDefault: 7  \nDescription: only if timed rotated file, select how long should logger\nkeep old daily files\n\n* log_inside_folder  \nType: bool  \nDefault: False  \nDescription: if True, logs are saving inside logs and inside one \nmore folder, eg.   \nFalse - logs/flask_app.log  \nTrue - logs/flask_app/flask_app.log  \n\nUseful when using timed rotating for like month or three months\n\n##### Usage:\n\n```python\nimport handymodules\nlog = handymodules.CreateLogger(stream_handler=True, file_handler=False)\n\nlog.info('some info')\nlog.debug('some info')\nlog.warning('some info')\nlog.error('some info')\nlog.critical('some info')\n\ntry:\n    x += 2\nexcept:\n    log.add_file_handler()\n    log.exception('Only when exception!')\n\nlog.change_level('warning')\nlog.change_format('%(message)s')\n```\n\nSample log file line:\n\n`2019-03-27 20:52:27,471 - flask_app - INFO - some info`\n\n* tictoc:\n\n```python\nimport tictoc as t\n\nt.tic()\nt.toc()\n# more code\nt.toc()\n\nt.tic()\nt.toc()\n```\nYou can use toc multiple times, it will count since last `tic()` function\n\ntoc() output:\n`Elapsed time: 2.562 seconds.`\n\nAlso there is a class with this functionality,  \nYou can have now multiple timers.\n```python\nimport handymodules\nt = handymodules.TicToc()\nt.tic()\nt.toc()\n```\n\n* hashing passwords\n\nTwo functions:\n```python\nimport handymodules as h\nhashed = h.hash_password('Pa$$w0rd')\n# store it somewhere!\nh.validate_hashed_password('Pa$$w0rd', hashed)\n```\nIt's simple and secure, returns `True` or `False`\nI am using SHA3-512.\n\n* files_info\n```python\nimport handymodules\nfilename = handymodules.get_filename()\nfilepath = handymodules.get_file_abspath(file)\n```\n\nit will always return filename that uses it, \nand absolute file path to the specific file\n\n* password validation\n\n```python\nimport handymodules.password_validation as p\npassword = p.validate_password()\n```\nin `password` variable You have user password from keyboard.   \nIt was taken by getpass so it wasn't visible for others (just like in linux)  \n\nI recommend to use it with hashing_password, \ndo not store passwords in plain text!\n\n* download_file\n\n```python\nimport handymodules.downloading_file as d\n\nurl1 = 'http://example.com/text.txt'\nurl2 = 'http://example.com/zipfile.zip'\n\nd.download(url1)\nd.download_zip(url2)\n```\n\nYou can simply download any file from web giving url only.  \nZip default will be unpacked to folder (with same name as package) and deleted, \nof course You can change it\n\n\n\n### changelog:\n* 2.1.0 - Added support to Python versions lower than 3.6 (removed f-strings)\n* 2.0.1 - updated docs\n* 2.0.0 - Changed name to handymodules, added kwargs to CreateLogger, \nyou can now change logfile name, updated docs", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/handymodules/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "handymodules", "package_url": "https://pypi.org/project/handymodules/", "platform": "", "project_url": "https://pypi.org/project/handymodules/", "project_urls": {"Homepage": "https://pypi.org/project/handymodules/"}, "release_url": "https://pypi.org/project/handymodules/2.1.0/", "requires_dist": null, "requires_python": "", "summary": "A few handy, useful python modules", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Few handy python modules</h1>\n<p>Hey, I wanna share with You my python modules,</p>\n<p>I have for now:</p>\n<ul>\n<li>logger</li>\n<li>tictoc</li>\n<li>hashing passwords</li>\n<li>files_info</li>\n<li>downloading files</li>\n<li>password validation</li>\n</ul>\n<p>I hope You enjoy it!</p>\n<p>PS. You can find source codes on <a href=\"https://github.com/admw15/modules\" rel=\"nofollow\">my github</a></p>\n<h2>Docs:</h2>\n<ul>\n<li>logger:</li>\n</ul>\n<h5>Info</h5>\n<p>Package contains \"CreateLogger\" class that quickly create logger for us,\ninstead of importing logging module and adding handlers etc...</p>\n<p>log file has default name same as file name, with .log.\nAlso it is in new folder called 'logs'<br>\nExample: python_file.py -&gt; logs/python_file.log</p>\n<h5>Arguments:</h5>\n<ul>\n<li>logger_name<br>\nType: str<br>\nDefault: your file name<br>\nDescription: logger name should be unique!<br>\nDefault is your filename (without .py) so it will look like:\nmailer/flask_receiver/my_first_file etc.</li>\n</ul>\n<p>WARNING: If you have file (parent)\nwith logger, and you are importing in it another local file (child),\nthen remember to give a new logger name to child!</p>\n<pre><span class=\"c1\"># parent.py:</span>\n<span class=\"kn\">import</span> <span class=\"nn\">handymodules</span>\n<span class=\"kn\">import</span> <span class=\"nn\">child</span>  <span class=\"c1\"># local file</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">handymodules</span><span class=\"o\">.</span><span class=\"n\">CreateLogger</span><span class=\"p\">()</span>  <span class=\"c1\"># its ok, don't need any arguments</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Starting...'</span><span class=\"p\">)</span>\n<span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">()</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Done'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># child.py:</span>\n<span class=\"kn\">import</span> <span class=\"nn\">handymodules</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">handymodules</span><span class=\"o\">.</span><span class=\"n\">CreateLogger</span><span class=\"p\">()</span>  <span class=\"c1\"># BAD!!!</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">handymodules</span><span class=\"o\">.</span><span class=\"n\">CreateLogger</span><span class=\"p\">(</span><span class=\"s1\">'child'</span><span class=\"p\">)</span>  <span class=\"c1\"># Good</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">function</span><span class=\"p\">():</span>\n    <span class=\"c1\"># do something</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'Something is wrong'</span><span class=\"p\">)</span>\n</pre>\n<p>In this case, there are two loggers and two files, if you want to have\nthese two loggers in one file, then you should edit line in child</p>\n<pre><span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">handymodules</span><span class=\"o\">.</span><span class=\"n\">CreateLogger</span><span class=\"p\">(</span><span class=\"s1\">'child'</span><span class=\"p\">,</span> <span class=\"n\">log_filename</span><span class=\"o\">=</span><span class=\"s1\">'parent'</span><span class=\"p\">)</span>\n</pre>\n<p>Remember to use file basename (without .py)</p>\n<ul>\n<li>\n<p>stream_handler<br>\nType: bool<br>\nDefault: True<br>\nDescription: add a stream handler to your logger (logs in console)</p>\n</li>\n<li>\n<p>file_handler<br>\nType: bool<br>\nDefault: True<br>\nDescription: add a file handler to your logger. It creates \"logs\"\nfolder inside directory where your file is.</p>\n</li>\n<li>\n<p>log_filename<br>\nType: str<br>\nDefault: filename<br>\nDescription: Just what it says, default logfile has same name as your\npython file, but with .log<br>\nEg. flask_app.py -&gt; logs/flask_app.log</p>\n</li>\n</ul>\n<h5>Kwargs</h5>\n<ul>\n<li>\n<p>timed_rotating_file<br>\nType: bool<br>\nDefault: False<br>\nDescription: if file handler should be timed rotating. If True, it\nwill change every midnight</p>\n</li>\n<li>\n<p>days_to_keep<br>\nType: int<br>\nDefault: 7<br>\nDescription: only if timed rotated file, select how long should logger\nkeep old daily files</p>\n</li>\n<li>\n<p>log_inside_folder<br>\nType: bool<br>\nDefault: False<br>\nDescription: if True, logs are saving inside logs and inside one\nmore folder, eg.<br>\nFalse - logs/flask_app.log<br>\nTrue - logs/flask_app/flask_app.log</p>\n</li>\n</ul>\n<p>Useful when using timed rotating for like month or three months</p>\n<h5>Usage:</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">handymodules</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">handymodules</span><span class=\"o\">.</span><span class=\"n\">CreateLogger</span><span class=\"p\">(</span><span class=\"n\">stream_handler</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">file_handler</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'some info'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'some info'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'some info'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'some info'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">'some info'</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">x</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">add_file_handler</span><span class=\"p\">()</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"s1\">'Only when exception!'</span><span class=\"p\">)</span>\n\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">change_level</span><span class=\"p\">(</span><span class=\"s1\">'warning'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">change_format</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Sample log file line:</p>\n<p><code>2019-03-27 20:52:27,471 - flask_app - INFO - some info</code></p>\n<ul>\n<li>tictoc:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tictoc</span> <span class=\"k\">as</span> <span class=\"nn\">t</span>\n\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tic</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">toc</span><span class=\"p\">()</span>\n<span class=\"c1\"># more code</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">toc</span><span class=\"p\">()</span>\n\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tic</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">toc</span><span class=\"p\">()</span>\n</pre>\n<p>You can use toc multiple times, it will count since last <code>tic()</code> function</p>\n<p>toc() output:\n<code>Elapsed time: 2.562 seconds.</code></p>\n<p>Also there is a class with this functionality,<br>\nYou can have now multiple timers.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">handymodules</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">handymodules</span><span class=\"o\">.</span><span class=\"n\">TicToc</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tic</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">toc</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>hashing passwords</li>\n</ul>\n<p>Two functions:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">handymodules</span> <span class=\"k\">as</span> <span class=\"nn\">h</span>\n<span class=\"n\">hashed</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">hash_password</span><span class=\"p\">(</span><span class=\"s1\">'Pa$$w0rd'</span><span class=\"p\">)</span>\n<span class=\"c1\"># store it somewhere!</span>\n<span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">validate_hashed_password</span><span class=\"p\">(</span><span class=\"s1\">'Pa$$w0rd'</span><span class=\"p\">,</span> <span class=\"n\">hashed</span><span class=\"p\">)</span>\n</pre>\n<p>It's simple and secure, returns <code>True</code> or <code>False</code>\nI am using SHA3-512.</p>\n<ul>\n<li>files_info</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">handymodules</span>\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">handymodules</span><span class=\"o\">.</span><span class=\"n\">get_filename</span><span class=\"p\">()</span>\n<span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"n\">handymodules</span><span class=\"o\">.</span><span class=\"n\">get_file_abspath</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n</pre>\n<p>it will always return filename that uses it,\nand absolute file path to the specific file</p>\n<ul>\n<li>password validation</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">handymodules.password_validation</span> <span class=\"k\">as</span> <span class=\"nn\">p</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">validate_password</span><span class=\"p\">()</span>\n</pre>\n<p>in <code>password</code> variable You have user password from keyboard.<br>\nIt was taken by getpass so it wasn't visible for others (just like in linux)</p>\n<p>I recommend to use it with hashing_password,\ndo not store passwords in plain text!</p>\n<ul>\n<li>download_file</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">handymodules.downloading_file</span> <span class=\"k\">as</span> <span class=\"nn\">d</span>\n\n<span class=\"n\">url1</span> <span class=\"o\">=</span> <span class=\"s1\">'http://example.com/text.txt'</span>\n<span class=\"n\">url2</span> <span class=\"o\">=</span> <span class=\"s1\">'http://example.com/zipfile.zip'</span>\n\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">url1</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">download_zip</span><span class=\"p\">(</span><span class=\"n\">url2</span><span class=\"p\">)</span>\n</pre>\n<p>You can simply download any file from web giving url only.<br>\nZip default will be unpacked to folder (with same name as package) and deleted,\nof course You can change it</p>\n<h3>changelog:</h3>\n<ul>\n<li>2.1.0 - Added support to Python versions lower than 3.6 (removed f-strings)</li>\n<li>2.0.1 - updated docs</li>\n<li>2.0.0 - Changed name to handymodules, added kwargs to CreateLogger,\nyou can now change logfile name, updated docs</li>\n</ul>\n\n          </div>"}, "last_serial": 5959306, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "ba534cb3161ae229f3f3c6081cb11e3d", "sha256": "d5c0c2f39c46b1eb8fd8ef7bcaa5cb00aed8b52c0c8edfc745bef90722ebb62f"}, "downloads": -1, "filename": "handymodules-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ba534cb3161ae229f3f3c6081cb11e3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9303, "upload_time": "2019-09-17T14:05:23", "upload_time_iso_8601": "2019-09-17T14:05:23.262314Z", "url": "https://files.pythonhosted.org/packages/5e/d9/017f6f9ba88db2e61f37ff2f082c0842e15492d7ba869a6a687e7c0aa239/handymodules-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03aaaaa31c5b1faf35a125648f053da7", "sha256": "41b4dad87775058072932b1eeb2ea6fa073df04c77cc40d11bc75dc67763ebdc"}, "downloads": -1, "filename": "handymodules-2.0.0.tar.gz", "has_sig": false, "md5_digest": "03aaaaa31c5b1faf35a125648f053da7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7352, "upload_time": "2019-09-17T14:05:25", "upload_time_iso_8601": "2019-09-17T14:05:25.095226Z", "url": "https://files.pythonhosted.org/packages/a8/6a/353a47969c28ed9409dc2c0e799d190e247493eedb6dc1be5cdcc8d2b797/handymodules-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "f2619b3be54aa09dfe723a5c78855237", "sha256": "bf37d9ecf995ac7f856c89fc4b8351ca830b0c4ebba5de01725383dedf100b60"}, "downloads": -1, "filename": "handymodules-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f2619b3be54aa09dfe723a5c78855237", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9310, "upload_time": "2019-09-17T14:08:06", "upload_time_iso_8601": "2019-09-17T14:08:06.421810Z", "url": "https://files.pythonhosted.org/packages/1b/38/1e57177ee459d14a858f78bfb8a6197a498fb133a001d6fe726a95579861/handymodules-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0a8c5f1200b896e60b2b3038455a04f", "sha256": "927d2bf44aea6ee9d12db108a160a2763c77bc45a6ae53fdc5b2b8d9d48a5587"}, "downloads": -1, "filename": "handymodules-2.0.1.tar.gz", "has_sig": false, "md5_digest": "e0a8c5f1200b896e60b2b3038455a04f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7372, "upload_time": "2019-09-17T14:08:08", "upload_time_iso_8601": "2019-09-17T14:08:08.629413Z", "url": "https://files.pythonhosted.org/packages/42/a6/0057d4356f9442f747d76af1afcfe5c701d33023a82869b4d521065a27cd/handymodules-2.0.1.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "e4b4225264d0de82f4878a9b5d7df73a", "sha256": "b5a503fcf7bc386299a04106c146031638c1edf6c53bac36095b37b03f48c2d2"}, "downloads": -1, "filename": "handymodules-2.1.0.tar.gz", "has_sig": false, "md5_digest": "e4b4225264d0de82f4878a9b5d7df73a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7461, "upload_time": "2019-10-11T09:18:30", "upload_time_iso_8601": "2019-10-11T09:18:30.917404Z", "url": "https://files.pythonhosted.org/packages/28/79/2a7f85abbf6c31dc238f45f55b21f051b2cbce9b7845af9d8d178dc195b0/handymodules-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e4b4225264d0de82f4878a9b5d7df73a", "sha256": "b5a503fcf7bc386299a04106c146031638c1edf6c53bac36095b37b03f48c2d2"}, "downloads": -1, "filename": "handymodules-2.1.0.tar.gz", "has_sig": false, "md5_digest": "e4b4225264d0de82f4878a9b5d7df73a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7461, "upload_time": "2019-10-11T09:18:30", "upload_time_iso_8601": "2019-10-11T09:18:30.917404Z", "url": "https://files.pythonhosted.org/packages/28/79/2a7f85abbf6c31dc238f45f55b21f051b2cbce9b7845af9d8d178dc195b0/handymodules-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:35 2020"}