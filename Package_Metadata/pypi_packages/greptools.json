{"info": {"author": "Nic Roland", "author_email": "nicroland9@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Topic :: Software Development", "Topic :: Text Processing :: Filters", "Topic :: Utilities"], "description": "GrepTools\n=========\n\nInstallation\n------------\n\nFrom pip (recommended):\n\n::\n\n    $ sudo pip install greptools\n\nFrom source (for developers):\n\n::\n\n    $ git clone https://github.com/nicr9/greptools.git\n    $ cd greptools\n    $ sudo python2.7 setup.py develop\n\nAbout\n-----\n\n``greptools`` is a collection of CLI search tools similar to ``grep`` or\n``ack``. These tools were designed with programmers in mind and each\ntool is targetted at a different programming language or structured file\nformat.\n\nEach language specific tool recursively searches files relating to that\nlanguage in the current directory and sorts results into a context tree\n(refered to as a grep tree). The exact format of the grep tree depends\non the language in question but it takes the form of nested datstructure\nwith each level representing a file, class or function.\n\nEach tool uses ``grep`` to perform the actual searching, and for each\nresult it opens the file and reads it to decide which class/function it\nbelongs to.\n\nUsage\n-----\n\nIt's simple to use. Here's an example using the tool for python code:\n``pygt``.\n\nTo look for usages of the word \"traceback\" inside a subdirectory of the\ncore Python source code:\n\n::\n\n    $ cd Python-2.7.3/Lib/multiprocessing\n    $ pygt traceback\n    ./reduction.py\n        def _serve\n             132:^                import traceback$\n             135:^                    '-'*79 + '\\n' + traceback.format_exc() + '-'*79$\n\n    ./queues.py\n        class Queue\n            def _feed\n                 280:^                    import traceback$\n                 281:^                    traceback.print_exc()$\n\n    ./managers.py\n         49:^from traceback import format_exc$\n\n        class Server\n            def shutdown\n                 368:^                import traceback$\n                 369:^                traceback.print_exc()$\n\n    ./util.py\n        def _run_finalizers\n             263:^            import traceback$\n             264:^            traceback.print_exc()$\n\n    ./process.py\n        class Process\n            def _bootstrap\n                 273:^            import traceback$\n                 276:^            traceback.print_exc()$\n\nCommand-line options\n--------------------\n\nThese options should apply to all the available greptools so just use\nthe name of the tool you're using in place of ``<greptool>`` below:\n\nCase-insensitive search\n~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    $ <greptool> -i <SEARCH_TERM>\n\nDebug information\n~~~~~~~~~~~~~~~~~\n\nTurning this on prints out lots of additional information (e.g. raw grep\nresults) that can be used to diagnose bugs in the logic at various\nstages. Useful if you're trying to develop your own greptool or add\nfeatures to the base classes.\n\n::\n\n    $ <greptool> -d <SEARCH_TERM>\n\nSet operations\n~~~~~~~~~~~~~~\n\nOne of the really useful features these greptools is that they support\ntreating the results like sets and quickly filtering results by applying\nset operations.\n\nLet's look at a simple example.\n\nLet's say you need to quickly look through all the ``import``\\ s in your\npython project. That's simple: ``pygt import``.\n\nNow lets say you want to narrow down those results to those that mention\n``os.path``. This can be done by piping the results from our earlier\nsearch into a new search for the new term like so:\n\n::\n\n    $ pygt import | pygt os.path\n\nThis will effectively perform an intersection on both sets of results\nand so only provide matches that contain both ``import`` and\n``os.path``.\n\nYou can perform other set operations too! Let's say you don't want any\nresults containing ``os.path``. You can get the relative complement by\npiping like we did before and setting the ``-F`` (filter) flag on the\nlast search command like so:\n\n::\n\n    $ pygt import | pygt -F os.path\n\nYou can add both sets of results together with ``-U`` (union) and only\nreturn results that contain one and not the other by using ``-X`` (XOR,\na.k.a symetric difference).\n\nCaveats with using set operations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBoth the default (intersection) set op and the filter set op shown above\naren't actually true set operations.\n\nIt turns out treating search results like sets and performing these\noperations isn't that fast as we hoped so we made a compromise. These\ntwo work by iterating through that first set of results and checking for\nthe second search term using python's built in regex engine.\n\nYou may experience issues from the use of two different engines. For\nexample, if you are using complicated regular expressions you may find\nthat they behave differently when using intersection or filter set\noperations.\n\nYou can choose to use the slow intersection (``-N``) and the slow filter\n(``-E``) instead which work by building both sets of results and\ncomparing.\n\nIn order to use the pipe to pass one set of results to an other pygt\nprocess we had to serialise them first. This means that if you try\npiping the results to any other process (like ``less`` for example)\nthey'll show up in json format. This will happen even if you use other\noutput formats like the histogram format.\n\nIf this causes problems for you, use ``-p``. This will force it to pipe\nout results in what ever format you've choosen (except the default\n'colour' format. It will be changed to clean because it looks really\nugly when it's piped out).\n\nWriting a new greptool\n----------------------\n\nSo you've decided you need a greptool for your favourite language X.\n\nHere are a basic set of instructions to create a new greptool:\n\n1) Implement a new Reader class.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAre code blocks in X based on indentation or deliniated by braces?\n\nThere are some classes you can inherit from (``IndentReader`` and\n``BraceReader``) that are generalised for these cases. The docstrings\nshould have details that tell you what needs to be implemented by\nsubclasses. ``PythonReader`` and ``JavaReader`` are good examples of\n``IndentReader`` and ``BraceReader`` subclasses respectively.\n\nIf neither of these suit your purposes, you may need to inherit from\n``BaseReader``. The logic you need to implement in this case is a little\nmore abstract, I'm not sure the docstrings are detailed enough. If you\ncan't figure out what to do from a reading of the code feel free to drop\nme an email with an outline of what you're working on, I'd be glad to\nhelp!\n\n2) Add details to ``greptools/reader/__init__.py``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTwo things you'll need to do: include a relative import of your new\nreader class and add the name of that class to ``__all__``.\n\n3) Add new script to ``bin/``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMy advice is to copy a preexisting script. The convention is to base the\nscript name on the language file extention (e.g. Python files have a\n``.py`` extention so the Python greptool is called ``pygt``).\n\nDon't forget to change the name of the Reader class used in the script.\n\n::\n\n    $ cp bin/pygt bin/xgt\n    $ sed -i \"s/PythonReader/XReader/g\" bin/xgt\n\n4) Mention script in setup.py.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere's a ``scripts`` list in setup.py. Add your new script here so that\nit's installed with all the others.\n\n5) Reinstall.\n~~~~~~~~~~~~~\n\n::\n\n    $ sudo python2.7 setup.py develop\n\nAuthor\n------\n\n::\n\n    Name: Nic Roland\n    Twitter: @nicr9_\n    Email: nicroland9@gmail.com", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/nicr9/greptools/tarball/0.9b1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nicr9/greptools", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "greptools", "package_url": "https://pypi.org/project/greptools/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/greptools/", "project_urls": {"Download": "https://github.com/nicr9/greptools/tarball/0.9b1", "Homepage": "https://github.com/nicr9/greptools"}, "release_url": "https://pypi.org/project/greptools/0.9b1/", "requires_dist": null, "requires_python": null, "summary": "A collection of grep wrappers and tools for various filetypes.", "version": "0.9b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"installation\">\n<h2>Installation</h2>\n<p>From pip (recommended):</p>\n<pre>$ sudo pip install greptools\n</pre>\n<p>From source (for developers):</p>\n<pre>$ git clone https://github.com/nicr9/greptools.git\n$ cd greptools\n$ sudo python2.7 setup.py develop\n</pre>\n</div>\n<div id=\"about\">\n<h2>About</h2>\n<p><tt>greptools</tt> is a collection of CLI search tools similar to <tt>grep</tt> or\n<tt>ack</tt>. These tools were designed with programmers in mind and each\ntool is targetted at a different programming language or structured file\nformat.</p>\n<p>Each language specific tool recursively searches files relating to that\nlanguage in the current directory and sorts results into a context tree\n(refered to as a grep tree). The exact format of the grep tree depends\non the language in question but it takes the form of nested datstructure\nwith each level representing a file, class or function.</p>\n<p>Each tool uses <tt>grep</tt> to perform the actual searching, and for each\nresult it opens the file and reads it to decide which class/function it\nbelongs to.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>It\u2019s simple to use. Here\u2019s an example using the tool for python code:\n<tt>pygt</tt>.</p>\n<p>To look for usages of the word \u201ctraceback\u201d inside a subdirectory of the\ncore Python source code:</p>\n<pre>$ cd Python-2.7.3/Lib/multiprocessing\n$ pygt traceback\n./reduction.py\n    def _serve\n         132:^                import traceback$\n         135:^                    '-'*79 + '\\n' + traceback.format_exc() + '-'*79$\n\n./queues.py\n    class Queue\n        def _feed\n             280:^                    import traceback$\n             281:^                    traceback.print_exc()$\n\n./managers.py\n     49:^from traceback import format_exc$\n\n    class Server\n        def shutdown\n             368:^                import traceback$\n             369:^                traceback.print_exc()$\n\n./util.py\n    def _run_finalizers\n         263:^            import traceback$\n         264:^            traceback.print_exc()$\n\n./process.py\n    class Process\n        def _bootstrap\n             273:^            import traceback$\n             276:^            traceback.print_exc()$\n</pre>\n</div>\n<div id=\"command-line-options\">\n<h2>Command-line options</h2>\n<p>These options should apply to all the available greptools so just use\nthe name of the tool you\u2019re using in place of <tt>&lt;greptool&gt;</tt> below:</p>\n<div id=\"case-insensitive-search\">\n<h3>Case-insensitive search</h3>\n<pre>$ &lt;greptool&gt; -i &lt;SEARCH_TERM&gt;\n</pre>\n</div>\n<div id=\"debug-information\">\n<h3>Debug information</h3>\n<p>Turning this on prints out lots of additional information (e.g. raw grep\nresults) that can be used to diagnose bugs in the logic at various\nstages. Useful if you\u2019re trying to develop your own greptool or add\nfeatures to the base classes.</p>\n<pre>$ &lt;greptool&gt; -d &lt;SEARCH_TERM&gt;\n</pre>\n</div>\n<div id=\"set-operations\">\n<h3>Set operations</h3>\n<p>One of the really useful features these greptools is that they support\ntreating the results like sets and quickly filtering results by applying\nset operations.</p>\n<p>Let\u2019s look at a simple example.</p>\n<p>Let\u2019s say you need to quickly look through all the <tt>import</tt>s in your\npython project. That\u2019s simple: <tt>pygt import</tt>.</p>\n<p>Now lets say you want to narrow down those results to those that mention\n<tt>os.path</tt>. This can be done by piping the results from our earlier\nsearch into a new search for the new term like so:</p>\n<pre>$ pygt import | pygt os.path\n</pre>\n<p>This will effectively perform an intersection on both sets of results\nand so only provide matches that contain both <tt>import</tt> and\n<tt>os.path</tt>.</p>\n<p>You can perform other set operations too! Let\u2019s say you don\u2019t want any\nresults containing <tt>os.path</tt>. You can get the relative complement by\npiping like we did before and setting the <tt><span class=\"pre\">-F</span></tt> (filter) flag on the\nlast search command like so:</p>\n<pre>$ pygt import | pygt -F os.path\n</pre>\n<p>You can add both sets of results together with <tt><span class=\"pre\">-U</span></tt> (union) and only\nreturn results that contain one and not the other by using <tt><span class=\"pre\">-X</span></tt> (XOR,\na.k.a symetric difference).</p>\n</div>\n<div id=\"caveats-with-using-set-operations\">\n<h3>Caveats with using set operations</h3>\n<p>Both the default (intersection) set op and the filter set op shown above\naren\u2019t actually true set operations.</p>\n<p>It turns out treating search results like sets and performing these\noperations isn\u2019t that fast as we hoped so we made a compromise. These\ntwo work by iterating through that first set of results and checking for\nthe second search term using python\u2019s built in regex engine.</p>\n<p>You may experience issues from the use of two different engines. For\nexample, if you are using complicated regular expressions you may find\nthat they behave differently when using intersection or filter set\noperations.</p>\n<p>You can choose to use the slow intersection (<tt><span class=\"pre\">-N</span></tt>) and the slow filter\n(<tt><span class=\"pre\">-E</span></tt>) instead which work by building both sets of results and\ncomparing.</p>\n<p>In order to use the pipe to pass one set of results to an other pygt\nprocess we had to serialise them first. This means that if you try\npiping the results to any other process (like <tt>less</tt> for example)\nthey\u2019ll show up in json format. This will happen even if you use other\noutput formats like the histogram format.</p>\n<p>If this causes problems for you, use <tt><span class=\"pre\">-p</span></tt>. This will force it to pipe\nout results in what ever format you\u2019ve choosen (except the default\n\u2018colour\u2019 format. It will be changed to clean because it looks really\nugly when it\u2019s piped out).</p>\n</div>\n</div>\n<div id=\"writing-a-new-greptool\">\n<h2>Writing a new greptool</h2>\n<p>So you\u2019ve decided you need a greptool for your favourite language X.</p>\n<p>Here are a basic set of instructions to create a new greptool:</p>\n<div id=\"implement-a-new-reader-class\">\n<h3>1) Implement a new Reader class.</h3>\n<p>Are code blocks in X based on indentation or deliniated by braces?</p>\n<p>There are some classes you can inherit from (<tt>IndentReader</tt> and\n<tt>BraceReader</tt>) that are generalised for these cases. The docstrings\nshould have details that tell you what needs to be implemented by\nsubclasses. <tt>PythonReader</tt> and <tt>JavaReader</tt> are good examples of\n<tt>IndentReader</tt> and <tt>BraceReader</tt> subclasses respectively.</p>\n<p>If neither of these suit your purposes, you may need to inherit from\n<tt>BaseReader</tt>. The logic you need to implement in this case is a little\nmore abstract, I\u2019m not sure the docstrings are detailed enough. If you\ncan\u2019t figure out what to do from a reading of the code feel free to drop\nme an email with an outline of what you\u2019re working on, I\u2019d be glad to\nhelp!</p>\n</div>\n<div id=\"add-details-to-greptools-reader-init-py\">\n<h3>2) Add details to <tt>greptools/reader/__init__.py</tt></h3>\n<p>Two things you\u2019ll need to do: include a relative import of your new\nreader class and add the name of that class to <tt>__all__</tt>.</p>\n</div>\n<div id=\"add-new-script-to-bin\">\n<h3>3) Add new script to <tt>bin/</tt></h3>\n<p>My advice is to copy a preexisting script. The convention is to base the\nscript name on the language file extention (e.g. Python files have a\n<tt>.py</tt> extention so the Python greptool is called <tt>pygt</tt>).</p>\n<p>Don\u2019t forget to change the name of the Reader class used in the script.</p>\n<pre>$ cp bin/pygt bin/xgt\n$ sed -i \"s/PythonReader/XReader/g\" bin/xgt\n</pre>\n</div>\n<div id=\"mention-script-in-setup-py\">\n<h3>4) Mention script in setup.py.</h3>\n<p>There\u2019s a <tt>scripts</tt> list in setup.py. Add your new script here so that\nit\u2019s installed with all the others.</p>\n</div>\n<div id=\"reinstall\">\n<h3>5) Reinstall.</h3>\n<pre>$ sudo python2.7 setup.py develop\n</pre>\n</div>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<pre>Name: Nic Roland\nTwitter: @nicr9_\nEmail: nicroland9@gmail.com\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1879004, "releases": {"0.9b0": [{"comment_text": "", "digests": {"md5": "b0c3811a82ab16446fd5b9bae458a444", "sha256": "278e41f0ef0eea17df2ae8f9ee63afd89350de338ca16a2a898fdae64ac2a15c"}, "downloads": -1, "filename": "greptools-0.9b0.tar.gz", "has_sig": false, "md5_digest": "b0c3811a82ab16446fd5b9bae458a444", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14349, "upload_time": "2015-12-27T18:11:35", "upload_time_iso_8601": "2015-12-27T18:11:35.449837Z", "url": "https://files.pythonhosted.org/packages/63/9b/1a67c35aab930f9cf36ec25e5a776262c072ed4f2a51c34860cd2cbaba53/greptools-0.9b0.tar.gz", "yanked": false}], "0.9b1": [{"comment_text": "", "digests": {"md5": "7be4f4c124e8955c29dda86294fbc4e9", "sha256": "3a8408f6d6f772a06a86622b04a09f91b3ec94219d5e2128562a33adcef6f1b1"}, "downloads": -1, "filename": "greptools-0.9b1.tar.gz", "has_sig": false, "md5_digest": "7be4f4c124e8955c29dda86294fbc4e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14380, "upload_time": "2015-12-27T18:18:52", "upload_time_iso_8601": "2015-12-27T18:18:52.133206Z", "url": "https://files.pythonhosted.org/packages/e0/be/cc79046e917d280c992f32caed5e43936022d0efd39f605237fbcbf60336/greptools-0.9b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7be4f4c124e8955c29dda86294fbc4e9", "sha256": "3a8408f6d6f772a06a86622b04a09f91b3ec94219d5e2128562a33adcef6f1b1"}, "downloads": -1, "filename": "greptools-0.9b1.tar.gz", "has_sig": false, "md5_digest": "7be4f4c124e8955c29dda86294fbc4e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14380, "upload_time": "2015-12-27T18:18:52", "upload_time_iso_8601": "2015-12-27T18:18:52.133206Z", "url": "https://files.pythonhosted.org/packages/e0/be/cc79046e917d280c992f32caed5e43936022d0efd39f605237fbcbf60336/greptools-0.9b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:16 2020"}