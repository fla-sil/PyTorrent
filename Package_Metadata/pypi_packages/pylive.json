{"info": {"author": "Daniel Jones", "author_email": "dan-pylive@erase.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Topic :: Artistic Software", "Topic :: Communications", "Topic :: Multimedia :: Sound/Audio"], "description": "# PyLive\n\nPyLive is a framework for querying and controlling Ableton Live from a standalone Python script, mediated via Open Sound Control. It is effectively an interface to the Live Control Surfaces paradigm, which means it can do anything that a hardware control surface can do, including:\n\n - query and modify global parameters such as tempo, volume, pan, quantize, arrangement time\n - query and modify properties of tracks, clips, scenes and devices\n - trigger and stop clips and scenes\n\nIt can perform most of the operations described in the [LiveOSC OSC API](https://github.com/hanshuebner/LiveOSC/blob/master/OSCAPI.txt).\n\n## Requirements\n\n* [Ableton Live 9+](http://www.ableton.com/live)\n* [Python 2.6+](http://www.python.org)\n* [LiveOSC (fork)](https://github.com/ideoforms/LiveOSC): A maintained fork of the [LiveOSC](http://livecontrol.q3f.org/ableton-liveapi/liveosc/) MIDI control script, updated to work with Live 9.6 and 10. Must be installed in Live's `MIDI Remote Scripts` (see [README](https://github.com/ideoforms/LiveOSC))\n* [liblo](http://liblo.sourceforge.net/): Install via Homebrew with `brew install liblo`\n\n## Installation\n\nFrom PyPi:\n\n```\npip install pylive\n```\n\nVia git:\n```\ngit clone https://github.com/ideoforms/pylive.git\ncd pylive\npython setup.py install\n```\n\nTo check that pylive is communicating successfully with Ableton Live, try running one of the [examples](examples), or run the test suite with:\n```\npython setup.py test\n```\n\n## Usage\n\n```python\n#------------------------------------------------------------------------\n# Basic example of pylive usage: scan a Live set, trigger a clip,\n# and modulate some device parameters.\n#------------------------------------------------------------------------\nimport live\nimport random\n\n#------------------------------------------------------------------------\n# Scan the set's contents and set its tempo to 110bpm.\n#------------------------------------------------------------------------\nset = live.Set()\nset.scan(scan_clip_names = True, scan_devices = True)\nset.tempo = 110.0\n\n#------------------------------------------------------------------------\n# Each Set contains a list of Track objects.\n#------------------------------------------------------------------------\ntrack = set.tracks[0]\nprint(\"Track name %s\" % track.name)\n\n#------------------------------------------------------------------------\n# Each Track contains a list of Clip objects.\n#------------------------------------------------------------------------\nclip = track.clips[0]\nprint(\"Clip name %s, length %d beats\" % (clip.name, clip.length))\nclip.play()\n\n#------------------------------------------------------------------------\n# We can determine our internal timing based on Live's timeline using\n# Set.wait_for_next_beat(), and trigger clips accordingly.\n#------------------------------------------------------------------------\nset.wait_for_next_beat()\nclip.get_next_clip().play()\n\n#------------------------------------------------------------------------\n# Now let's modulate the parameters of a Device object.\n#------------------------------------------------------------------------\ndevice = track.devices[0]\nparameter = random.choice(device.parameters)\nparameter.value = random.uniform(parameter.minimum, parameter.maximum)\n```\n\n## Overview\n\nTo begin interacting with an Ableton Live set, the typical workflow is as follows. Live should normally be running on localhost, with LiveOSC enabled as a Control Surface.\n\n* Create a `live.Set` object.\n* Call `set.scan()`, which queries Live for an index of tracks, clip statuses, and (optionally) clip names and devices\n* Interact with Live by setting and getting properties on your `Set`:\n  * `set.tempo`, `set.time`, `set.overdub` are global Set properties\n  * `set.tracks` is a list of Track objects\n  * `set.tracks[N].name`, `set.tracks[N].mute`, are Track properties\n  * `set.tracks[N].clips` is a list of Clip objects (with empty slots containing `None`)\n  * `set.tracks[N].devices` is a list of Device objects\n  * `set.tracks[N].devices[M].parameters` is a list of Parameter objects\n\nGetters and setters use Python's `@property` idiom, meaning that accessing `set.tempo` will query or update your Live set.\n\nIf you know that no other processes will interact with Live, set `set.caching = True` to cache properties such as tempo. This will query the Live set on the first instance, and subsequently return locally-stored values.\n\nFor further help, see `pydoc live`.\n\n## Classes\n\n* `Set`: Represents a single Ableton Live set in its entirety. \n* `Track`: A single Live track object. Contains `Device` and `Clip` objects. May be a member of a `Group`.\n* `Group`: A grouped set of one or more `Track` objects.\n* `Device`: An instrument or audio effect residing within a `Track`. Contains a number of `Parameter` objects.\n* `Parameter`: An individual control parameter of a `Device`, with a fixed range and variable value.\n\n## Limitations\n\nNote that pylive is not intended for sending MIDI note events or control messages to a set. For MIDI controls, use a separate module such as [mido](https://mido.readthedocs.io).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ideoforms/pylive", "keywords": "sound,music,ableton,osc", "license": "", "maintainer": "", "maintainer_email": "", "name": "pylive", "package_url": "https://pypi.org/project/pylive/", "platform": "", "project_url": "https://pypi.org/project/pylive/", "project_urls": {"Homepage": "https://github.com/ideoforms/pylive"}, "release_url": "https://pypi.org/project/pylive/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Python remote control of Ableton Live", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyLive</h1>\n<p>PyLive is a framework for querying and controlling Ableton Live from a standalone Python script, mediated via Open Sound Control. It is effectively an interface to the Live Control Surfaces paradigm, which means it can do anything that a hardware control surface can do, including:</p>\n<ul>\n<li>query and modify global parameters such as tempo, volume, pan, quantize, arrangement time</li>\n<li>query and modify properties of tracks, clips, scenes and devices</li>\n<li>trigger and stop clips and scenes</li>\n</ul>\n<p>It can perform most of the operations described in the <a href=\"https://github.com/hanshuebner/LiveOSC/blob/master/OSCAPI.txt\" rel=\"nofollow\">LiveOSC OSC API</a>.</p>\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"http://www.ableton.com/live\" rel=\"nofollow\">Ableton Live 9+</a></li>\n<li><a href=\"http://www.python.org\" rel=\"nofollow\">Python 2.6+</a></li>\n<li><a href=\"https://github.com/ideoforms/LiveOSC\" rel=\"nofollow\">LiveOSC (fork)</a>: A maintained fork of the <a href=\"http://livecontrol.q3f.org/ableton-liveapi/liveosc/\" rel=\"nofollow\">LiveOSC</a> MIDI control script, updated to work with Live 9.6 and 10. Must be installed in Live's <code>MIDI Remote Scripts</code> (see <a href=\"https://github.com/ideoforms/LiveOSC\" rel=\"nofollow\">README</a>)</li>\n<li><a href=\"http://liblo.sourceforge.net/\" rel=\"nofollow\">liblo</a>: Install via Homebrew with <code>brew install liblo</code></li>\n</ul>\n<h2>Installation</h2>\n<p>From PyPi:</p>\n<pre><code>pip install pylive\n</code></pre>\n<p>Via git:</p>\n<pre><code>git clone https://github.com/ideoforms/pylive.git\ncd pylive\npython setup.py install\n</code></pre>\n<p>To check that pylive is communicating successfully with Ableton Live, try running one of the <a href=\"examples\" rel=\"nofollow\">examples</a>, or run the test suite with:</p>\n<pre><code>python setup.py test\n</code></pre>\n<h2>Usage</h2>\n<pre><span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"c1\"># Basic example of pylive usage: scan a Live set, trigger a clip,</span>\n<span class=\"c1\"># and modulate some device parameters.</span>\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"kn\">import</span> <span class=\"nn\">live</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"c1\"># Scan the set's contents and set its tempo to 110bpm.</span>\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"nb\">set</span> <span class=\"o\">=</span> <span class=\"n\">live</span><span class=\"o\">.</span><span class=\"n\">Set</span><span class=\"p\">()</span>\n<span class=\"nb\">set</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">scan_clip_names</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">scan_devices</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"o\">.</span><span class=\"n\">tempo</span> <span class=\"o\">=</span> <span class=\"mf\">110.0</span>\n\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"c1\"># Each Set contains a list of Track objects.</span>\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"n\">track</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"o\">.</span><span class=\"n\">tracks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Track name </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"c1\"># Each Track contains a list of Clip objects.</span>\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"n\">clip</span> <span class=\"o\">=</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">clips</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Clip name </span><span class=\"si\">%s</span><span class=\"s2\">, length </span><span class=\"si\">%d</span><span class=\"s2\"> beats\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">))</span>\n<span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"c1\"># We can determine our internal timing based on Live's timeline using</span>\n<span class=\"c1\"># Set.wait_for_next_beat(), and trigger clips accordingly.</span>\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"nb\">set</span><span class=\"o\">.</span><span class=\"n\">wait_for_next_beat</span><span class=\"p\">()</span>\n<span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">get_next_clip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"c1\"># Now let's modulate the parameters of a Device object.</span>\n<span class=\"c1\">#------------------------------------------------------------------------</span>\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">devices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">parameter</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n<span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">maximum</span><span class=\"p\">)</span>\n</pre>\n<h2>Overview</h2>\n<p>To begin interacting with an Ableton Live set, the typical workflow is as follows. Live should normally be running on localhost, with LiveOSC enabled as a Control Surface.</p>\n<ul>\n<li>Create a <code>live.Set</code> object.</li>\n<li>Call <code>set.scan()</code>, which queries Live for an index of tracks, clip statuses, and (optionally) clip names and devices</li>\n<li>Interact with Live by setting and getting properties on your <code>Set</code>:\n<ul>\n<li><code>set.tempo</code>, <code>set.time</code>, <code>set.overdub</code> are global Set properties</li>\n<li><code>set.tracks</code> is a list of Track objects</li>\n<li><code>set.tracks[N].name</code>, <code>set.tracks[N].mute</code>, are Track properties</li>\n<li><code>set.tracks[N].clips</code> is a list of Clip objects (with empty slots containing <code>None</code>)</li>\n<li><code>set.tracks[N].devices</code> is a list of Device objects</li>\n<li><code>set.tracks[N].devices[M].parameters</code> is a list of Parameter objects</li>\n</ul>\n</li>\n</ul>\n<p>Getters and setters use Python's <code>@property</code> idiom, meaning that accessing <code>set.tempo</code> will query or update your Live set.</p>\n<p>If you know that no other processes will interact with Live, set <code>set.caching = True</code> to cache properties such as tempo. This will query the Live set on the first instance, and subsequently return locally-stored values.</p>\n<p>For further help, see <code>pydoc live</code>.</p>\n<h2>Classes</h2>\n<ul>\n<li><code>Set</code>: Represents a single Ableton Live set in its entirety.</li>\n<li><code>Track</code>: A single Live track object. Contains <code>Device</code> and <code>Clip</code> objects. May be a member of a <code>Group</code>.</li>\n<li><code>Group</code>: A grouped set of one or more <code>Track</code> objects.</li>\n<li><code>Device</code>: An instrument or audio effect residing within a <code>Track</code>. Contains a number of <code>Parameter</code> objects.</li>\n<li><code>Parameter</code>: An individual control parameter of a <code>Device</code>, with a fixed range and variable value.</li>\n</ul>\n<h2>Limitations</h2>\n<p>Note that pylive is not intended for sending MIDI note events or control messages to a set. For MIDI controls, use a separate module such as <a href=\"https://mido.readthedocs.io\" rel=\"nofollow\">mido</a>.</p>\n\n          </div>"}, "last_serial": 5907162, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "414e6f7d78f5b50b33590c1d1fc30ac1", "sha256": "1e11726d27eab4117c1631e56b0a21ff7b1431a8306d52018c83c41299bb367b"}, "downloads": -1, "filename": "pylive-0.1.0.tar.gz", "has_sig": false, "md5_digest": "414e6f7d78f5b50b33590c1d1fc30ac1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12227, "upload_time": "2013-10-02T15:41:06", "upload_time_iso_8601": "2013-10-02T15:41:06.514126Z", "url": "https://files.pythonhosted.org/packages/73/b4/306026a18953823b677443bad4f53ebe65e419e3a1337bc2203588f68ee5/pylive-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f43572528dbb56c5f06ba9fc8018c16f", "sha256": "2e9d7231d1d480a54a8e448f109b0dfb84dd06d20b545911d75aeccb6daa21c0"}, "downloads": -1, "filename": "pylive-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f43572528dbb56c5f06ba9fc8018c16f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14325, "upload_time": "2013-10-02T18:41:08", "upload_time_iso_8601": "2013-10-02T18:41:08.248117Z", "url": "https://files.pythonhosted.org/packages/0f/a6/275f5f6da3513a69135127573e472371c9298a0b1622e5781623609414e9/pylive-0.1.1.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d58f4f8b2684deae526938cdf774f329", "sha256": "ccabcc384251586efdd2d51daf2a1bb60eabbc4c24f8a313836f9ec8d48a1d4e"}, "downloads": -1, "filename": "pylive-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d58f4f8b2684deae526938cdf774f329", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16141, "upload_time": "2015-09-01T15:14:25", "upload_time_iso_8601": "2015-09-01T15:14:25.115620Z", "url": "https://files.pythonhosted.org/packages/06/50/40afdc736873b159845971c78fc11deedd602deac8817ebc982382e0ec6d/pylive-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ff2ea1364d724f72219bb8fcc39464f0", "sha256": "ccf7b7377ce46d4f7b1ea7734737b2db116737b0898413a7b5dfd09cb21add50"}, "downloads": -1, "filename": "pylive-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff2ea1364d724f72219bb8fcc39464f0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21792, "upload_time": "2019-05-28T02:49:19", "upload_time_iso_8601": "2019-05-28T02:49:19.280936Z", "url": "https://files.pythonhosted.org/packages/6c/3e/81c21cfffc755094d287a4be750f44ab483e46205cd9566cb112391d603b/pylive-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c51a37471be233fd7b1d707e9804e20a", "sha256": "3286d95158e9a3ff52efe2cc585eb0ec3629945fb6aa1833ed2a83113d90d028"}, "downloads": -1, "filename": "pylive-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c51a37471be233fd7b1d707e9804e20a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20162, "upload_time": "2019-09-30T14:25:24", "upload_time_iso_8601": "2019-09-30T14:25:24.242957Z", "url": "https://files.pythonhosted.org/packages/de/51/63dfd27acee680a88452eec9edc05057976358c1e39a423d42de4305c750/pylive-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c51a37471be233fd7b1d707e9804e20a", "sha256": "3286d95158e9a3ff52efe2cc585eb0ec3629945fb6aa1833ed2a83113d90d028"}, "downloads": -1, "filename": "pylive-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c51a37471be233fd7b1d707e9804e20a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20162, "upload_time": "2019-09-30T14:25:24", "upload_time_iso_8601": "2019-09-30T14:25:24.242957Z", "url": "https://files.pythonhosted.org/packages/de/51/63dfd27acee680a88452eec9edc05057976358c1e39a423d42de4305c750/pylive-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:58 2020"}