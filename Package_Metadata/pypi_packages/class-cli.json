{"info": {"author": "Yoav Hayun", "author_email": "yoavhayun@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Class CLI\n\nA Python module for converting a Python class into a CLI program.\n\nUsing the module encourages for well documented code while not demanding it.\nIt allows for separation in implementation between method execution and it's argument validations.\n\n## Capabilities\n\n* Full command and argument auto-completion and suggestions\n* Basic type validation for entered arguments while typing\n* Full input line validation\n* Useful help messages for all methods and arguments \n* Can combine CLI Class Objects together into a single Program\n* Logging support\n* Command history\n* Execution of commands from a text file, line by line\n\n******************\n******************\n\n## API\n\nThe module exposes an API in the form of decorators.\n\nFirst import the CLI class\n\n    from class_cli import CLI\n\ncreate an instance and wrap a class with decorators the it exposes\n\n    cli = CLI()\n\n    @cli.Program()\n    class MyClass:\n\n        @cli.Operation()\n        def show(self):\n            return \"I'm a CLI Program!\"\n\nRun the main method of the CLI\n\n    if __name__ == \"__main__\":\n        MyClass().CLI.main()\n\nWhen running the script without arguments, It will open the CLI for user input:\n\n> **MyClass>** show\\\n> I'm a CLI Program!\n>\n> **MyClass>** |\n\n******************\n\n## These are the available decorators\n\n### **@Program**\n\n    Program(name=None, version=None, description=None, log=None, style=None, verbosity=logging.INFO)\n\n        a class decorator that defines the CLI program.\n        Instantiation of the wrapped user class can be used as normal python code, accessing all it's attributes.\n        It also exposes the CLI interface with an added attribute named 'CLI'\n\n        * Only a single Program can be declared for every CLI instance\n\n        @name           The name of the CLI program.                                                (Default is the class name)\n        @version        The version of the CLI program.                                             (Default is a CLI without versioning)\n        @description    The description of the CLI program.                                         (Default is the class documentation)\n        @log            A path to a log file.                                                       (Default is no log file)\n        @style          A dictionary that overrides the styling of the CLI for the given keys       (Keys: CLI.STYLE)\n        @verbosity      Determines the verbosity level on the logger. Use None to silence STDOUT    (Keys: logging module)\n\n### **@Operation**\n\n    Operation()\n\n        a method decorator that defines the execution code of an operation in the CLI\n\n### **@Setting**\n\n    Setting(initial_value, updates_value=True)\n\n        a method decorator that creates a setting value for the CLI with name equals to the method name.\n        It defines the execution code for setting the value into the created setting.\n\n        @initial_value      An initial value that the setting will hold after class initialization\n        @updates_value      Whether or not calling this method automatically updates the inner setting value\n\n### **@Delegate**\n\n    Delegate(reuse=True)\n\n        a method decorator that delegates control to another CLI Object instance by exposing an access point. \n        The wrapped method does not accept any arguments and returns the CLI Object instance to delegate control to.\n        * This allows for easy integration and combination of CLI Objects into a single CLI Program\n\n        @reuse      Whether or not the returned CLI Object should be reused for later calls\n\n### **@Validation**\n\n    Validation()\n\n        A method decorator that defines a validation to be performed on an execution (Operation / Setting / Delegation)\n        Holds the same signature as the execution it is validating and raises an exception for invalid arguments.\n        * A single execution can have multiple Validations\n\n******************\n\n## API Example\n\nIn this example, we are wrapping a class, that holds a Setting named **value**, and exposes a method called **show** that prints it to the screen.\n\n    from class_cli import CLI\n\n    cli = CLI()\n    @cli.Program()\n    class MyClass:\n\n        @cli.Operation()\n        def show(self): \n            if self.CLI.name is None:\n                return \"I'm a CLI Program!\"\n            else:\n                return \"My name is {}!\".format(self.CLI.name)\n\n        @cli.Setting()\n        def name(self, str):\n            return str\n\n    if __name__ == \"__main__\":\n        MyClass().CLI.main()\n\n In the main method we called **MyClass().CLI.main()** which checks for sys.argv for input and executes the commands using the instance.\n\n> $> **python3 MyClass.py show**\\\n> I'm a CLI Program!\n\n If we execute the script without arguments, it will open the CLI for user input:\n\n> $> **python3 MyClass.py**\\\n> **MyClass**\\\n> &emsp;&emsp;&emsp;&emsp;To exit, enter one of the following: **'q'** **'quit'** **'exit'**\\\n> &emsp;&emsp;&emsp;&emsp;To read commands from a file, enter one of the following: **'.r'** **'.read'**\\\n> &emsp;&emsp;&emsp;&emsp;To access the program settings, enter one of the following: **'.set'** **'.setting'**\\\n>\n> &emsp;&emsp;&emsp;&emsp;**At any time, add '-h' flag to the command for help.**\\\n> \\\n> **MyClass>** show\\\n> I'm a CLI Program!\n>\n> **MyClass>** .setting name John\\\n> =John\n>\n> **MyClass>** show\\\n> My name is John!\n>\n> **MyClass>** |\n\n You can also open the CLI directly by calling **run(\\*args)** instead of **main**\n\n     if __name__ == \"__main__\":\n         MyClass().CLI.run()\n\nOther commands:\n\n**run_line(line)** which executes a single line of String\n\n**execute(\\*args)** which executes the same as **run**, but does not print out log outputs.\n\n## Instance API\n\nYou can call the methods of a CLI Object directly without opening a CLI session:\n\n    >>> instance = MyClass()\n\n    >>> instance.show()\n    'I'm a CLI Program!'\n\n    >>> instance.name(\"Bob\")\n    'Bob'\n\n    >> instance.show()\n    'My name is Bob!'\n\n******************\n******************\n\n## Delegation\n\nThe library treats Class CLIs as building blocks that can integrate into a larger program.\nThis encourages for code separation between the components of a program.\n\nThis is done by wrapping a class method with the @Delegate decorator.\n\n    cli = CLI()\n    @cli.Program()\n    class Main:\n        @cli.Operation()\n        def show(self): return \"Main CLI\"\n\n        @cli.Delegate()\n        def inner(self):\n            inner_cli = CLI()\n            @cli.Program()\n            class Inner:\n                @cli.Operation()\n                def show(self): return \"Inner CLI\"\n            return Inner()\n\n    if __name__ == \"__main__\":\n        Main().CLI.main()\n\nYou can access the inner CLI by calling the inner method:\n\n    >>> Main()\n    <__main__.Main object at 0x03DBF5D0>\n\n    >>> Main().inner()\n    <__main__.Main.inner.<locals>.Inner object at 0x03B6D750>\n\nFrom the CLI, you can pass commands to it by prefixing with the **inner** method, or open it directly for commands\n\n> **Main>** show\\\n> Main CLI\n>\n> **Main>** inner show\\\n> Inner CLI\n>\n> **Main>** inner\n>\n> **Main\\\\Inner>** show\\\n> Inner CLI\n>\n> **Main\\\\Inner>** q\n>\n> **Main>** |\n\n******************\n******************\n\n## Logging\n\n To log messages, the cli holds a Logger instance. to access it, use the **CLI.log** keyword\n\n    def method(self):\n        self.CLI.log.info(\"This is an information Line\")\n        self.CLI.log.warning(\"This is a Warning\")\n        self.CLI.log.error(\"This is an Error\")\n        self.CLI.log.debug(\"This line is shown only when Program decorator is called with 'debug=True'\"\")\n\n> **MyClass>** method\\\n> This is an information Line\\\n> [WARNING] This is a Warning\\\n> `2019-10-10 17:51:21,807`\\\n> `[ERROR] This is an Error`\\\n> 2019-10-10 17:51:21,808\\\n> [DEBUG][test:12] This line is shown only when Program decorator is called with 'debug=True'\n>\n> **MyClass>** |\n\nYou can see documentation for the Logger object [here](https://docs.python.org/3/library/logging.html)\n\n******************\n******************\n\n## Help Messages\n\nThe CLI makes use of user code documentation in order to provide help messages to the user providing the **--help**/**-h** flag in the input.\nUsing the **--help** flag will display a message relevant to the user input.\nUsing it alone will display a usage message for the entire program while adding it after an Operation or Setting name will display usage information for that Operation or Setting.\n\n    @cli.Operation()\n    def method(self):\n        \"\"\"\n        A description of the method\n        \"\"\"\n        pass\n\n> **CLI>** method -h\\\n> usage: CLI method [-h]\n>\n> =========================\\\n> A description of the method\n>\n> =========================\\\n> optional arguments:\\\n> -h, --help  show this help message and exit\\\n>\n> **CLI>**|\n\nAny Validations for the method will be added to the description\n\n    @cli.Validation()\n    def method(self, arg):\n        \"\"\"\n        cannot perform operation when disabled\n        \"\"\"\n        if self.disabled:\n            raise Exception(\"Cannot perform operations when disabled\")\n\n> **CLI>** method -h\\\n> usage: CLI method [-h]\n>\n> =========================\\\n> A description of the method\\\n> \\* cannot perform operation when disabled\\\n> \\=========================\n>\n> optional arguments:\\\n> -h, --help  show this help message and exit\\\n>\n> **CLI>**|\n\nIf there are arguments for the method, you can add descriptions for them inside the method documentation with a **@** prefix as demonstrated below.\n\n    @cli.Operation()\n    def method(self, arg):\n        \"\"\"\n        A description of the method\n\n        Accepts:\n            @arg    arg description\n            @arg    another line of the description\n        \"\"\"\n        pass\n\n> **CLI>** method -h\\\n> usage: CLI method [-h] arg\n>\n> =========================\\\n> A description of the method\n>\n> Accepts:\\\n> &emsp;&emsp;@arg    arg description\\\n> &emsp;&emsp;@arg    another line of the description\n>\n> &emsp;&emsp;* cannot perform operation when disabled\n>\n> =========================\\\n> positional arguments:\\\n> &emsp;arg&emsp;&emsp;&emsp;&emsp;=========================\\\n> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;arg description\\\n> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;another line of the description\\\n> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;Type: \\<class 'str'>\\\n> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;=========================\\\n> optional arguments:\\\n> -h, --help  show this help message and exit\n>\n> **CLI>**|\n\n******************\n******************\n\n## Type Annotations\n\nPythons type annotations are used by the CLI in order to use type validation and conversion.\n\n### Type Conversion\n\nSince the user input is a String, by default the arguments passed to a method are String\n\n**Default Behavior**:\n\n    @cli.Operation()\n    def method(self, arg):\n        print(type(arg), ';', arg)\n\n> **CLI>** method value\\\n> \\<class 'str'> ; value\n>\n> **CLI>**|\n\n**Basic Annotation**:\nUsing annotations, we can provide a type to tell the CLI what is expected, and use it to convert the String into its proper type.\nThe CLI accepts annotations which are a Python Callable that receive a String and returns it converted to the desired type.\n\n    @cli.Operation()\n    def method(self, arg:int):\n        print(type(arg), ';', arg)\n\n> **CLI>** method 17\\\n> \\<class 'int'> ; 17\n>\n> **CLI>**|\n\n**Iterable Annotation**:\nYou can also use an Iterable as an annotation to specify a set of options.\n\n    @cli.Operation()\n    def method(self, value:[1, \"value\", (0,0)]):\n        print(type(value), ';', value)\n\n> **CLI>** method 1\\\n> \\<class 'int'> ; 1\n>\n> **CLI>** method value\\\n> \\<class 'str'> ; value\n>\n> **CLI>** method '(0, 0)'\\\n> \\<class 'tuple'> ; (0, 0)\n>\n> **CLI>**|\n\n* *Since the string representation of the items in the List are used to select the value from it, The String representations of the Items need to be unique.*\n\n### Type Validation\n\nDuring typing of input, The CLI will tip the user for the expected inputs, as well as block the user from entering invalid types into a command.\n\n    @cli.Operation()\n    def method(self, arg1, arg2:int=0, arg3:[1, -1]=1, **extras):\n        pass\n> **CLI>** method value number|\\\n> \\\n> \\\n> `invalid literal for int() with base 10: 'number'`\\\n> arg1 **arg2[=0]** arg3[=1] {*\\*extras}  :  **{\\<class 'int'>}**\n\\\n> **CLI>** method value 0 2|\\\n> \\\n> \\\n> `'2' is not a valid option`\\\n> arg1 arg2[=0] **arg3[=1]** {*\\*extras}  :  **{\\<value from: 1, -1>}**\n\\\n> **CLI>** method value 0 -1 arg|\\\n> \\\n> \\\n> `'arg' must be in the format [key]=[value]`\\\n> arg1 arg2[=0] arg3[=1] **{\\*\\*extras}**  :  **{\\<class 'dict'> [items=0]}**\n\\\n> **CLI>** method value 0 -1 arg=val|\\\n> \\\n> \\\n> \\\n> arg1 arg2[=0] arg3[=1] **{\\*\\*extras}**  :  **{\\<class 'dict'> [items=1]}**\n\n******************\n\n## Auto Completion\n\nThe CLI can auto-complete command names, file paths and argument values.\n\n    @cli.Operation()\n    def method(self, arg1, arg2:int=0, arg3:[1, -1]=None, *extras):\n        pass\n\n    @cli.Setting()\n    def name(self, arg1):\n        return arg1\n\nPressing 'TAB' will open up all available suggestions\n> **CLI>** |\\\n> &emsp;&emsp;&ensp;| method |\\\n> &emsp;&emsp;&ensp;| .setting&nbsp; |\\\n> &emsp;&emsp;&ensp;| &ensp;.read&ensp;&nbsp; |  \n\\\n> **CLI>** .setting |\\\n> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;| name |\n\nWhen browsing suggestions, you can see the expected arguments at the bottom:\n\n> **CLI>** method|\\\n> &emsp;&emsp;&ensp;**| method |**\\\n> &emsp;&emsp;&ensp;| &ensp;.setting&nbsp; |\\\n> &emsp;&emsp;&ensp;| &emsp;.read&ensp;&nbsp; |\\\n> \\\n> **arg1 arg2[=0] arg3[=None] {\\*extras}**\n\nWhen the expected argument is an Iterable, the CLI will suggest all the Iterable items\n\n> **CLI>** method value 0 |\\\n> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;| &nbsp;1 |\\\n> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;| -1 |\\\n> \\\n> arg1 arg2[=0] **arg3[=None]** {*extras}  :  **{1, -1}**\n\nIf you are providing your own Callable for annotation, you can make use of the auto complete mechanism by implementing **\\__complete__(self, keyword)**\n\n******************\n\n## Implementing a Custom Annotation\n\nYou can use any callable(str) as a type annotation for the CLI.\n\n### Representation\n\nThe CLI displays the callable to the user as its String representation. To set the description, override the **\\__str__(self)** method\n\n    def __str__(self):\n        return \"A Custom Type\"\n\n### Callable\n\nThe annotation must be a callable that accepts a string and returns a list of strings.\nThe callable returns all the suggestions relevant to the given keyword\n\n    def __call__(self, key):\n        if key in self.options_dict:\n            return self.options_dict[key]\n\n### Validation\n\nIf the given string is not a valid option, you can throw an exception inside the **\\__call__** method\n\n    def __call__(self, str):\n        if key in self.options_dict:\n            return self.options_dict[key]\n        throw Exception(\"'{}'' is not a valid option\".format(str))\n\nThis will block the user from entering a non existing key\n\n### Autocomplete Suggestion\n\nTo make use of the auto complete mechanism, implement the **\\__complete__(self, keyword)** method\n\n    def __complete__(self, str):\n        return [s for s in self.suggestions if s.startswith(str)]\n\n# Dynamic Iterable Annotation\n\nWe've seen that you can use an iterable as an annotation for a variable\n\n    @cli.Program()\n    class MyClass:\n        @cli.Operation()\n        def oper(self, value:[True, False]):\n            print(\"You have selected\", value)\n\nIn this example, we are using a list to specify that only boolean values are accepted.\n\nWhat if we want to use a list that is dynamic and can change throughout the run of the program.\nTo do that, we need to define the list outside the class scope in order to access it in method signature\n\n    values = [1, 2, 3]\n\n    @cli.Program()\n    class MyClass:\n        @cli.Operation()\n        def oper(self, value:values):\n            print(\"You have selected\", value)\n\n        @cli.Operation()\n        def add_value(self, value:int):\n            values.append(value)\n\nThe **oper** operation will now accept values in [1, 2, 3].\nWe can also use the **add_value** operation in order to add more options to be selected\n\nFor better code structure, we can use the **with** statement with the CLI object\n\n    with CLI() as cli:\n        values = [1, 2, 3]\n\n        @cli.Program()\n        class MyClass:\n            @cli.Operation()\n            def oper(self, value:values):\n                print(\"You have selected\", value)\n\n            @cli.Operation()\n            def add_value(self, value:int):\n                values.append(value)\n\nThis will make it clear that the **values** variable is associated with the CLI.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yoavhayun/CLI", "keywords": "", "license": "GNU General Public License v3.0", "maintainer": "", "maintainer_email": "", "name": "class-cli", "package_url": "https://pypi.org/project/class-cli/", "platform": "", "project_url": "https://pypi.org/project/class-cli/", "project_urls": {"Homepage": "https://github.com/yoavhayun/CLI"}, "release_url": "https://pypi.org/project/class-cli/0.3.3/", "requires_dist": ["prompt-toolkit (>=3.0)"], "requires_python": ">=3.0", "summary": "Converts a python class into a CLI program", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Class CLI</h1>\n<p>A Python module for converting a Python class into a CLI program.</p>\n<p>Using the module encourages for well documented code while not demanding it.\nIt allows for separation in implementation between method execution and it's argument validations.</p>\n<h2>Capabilities</h2>\n<ul>\n<li>Full command and argument auto-completion and suggestions</li>\n<li>Basic type validation for entered arguments while typing</li>\n<li>Full input line validation</li>\n<li>Useful help messages for all methods and arguments</li>\n<li>Can combine CLI Class Objects together into a single Program</li>\n<li>Logging support</li>\n<li>Command history</li>\n<li>Execution of commands from a text file, line by line</li>\n</ul>\n<hr>\n<hr>\n<h2>API</h2>\n<p>The module exposes an API in the form of decorators.</p>\n<p>First import the CLI class</p>\n<pre><code>from class_cli import CLI\n</code></pre>\n<p>create an instance and wrap a class with decorators the it exposes</p>\n<pre><code>cli = CLI()\n\n@cli.Program()\nclass MyClass:\n\n    @cli.Operation()\n    def show(self):\n        return \"I'm a CLI Program!\"\n</code></pre>\n<p>Run the main method of the CLI</p>\n<pre><code>if __name__ == \"__main__\":\n    MyClass().CLI.main()\n</code></pre>\n<p>When running the script without arguments, It will open the CLI for user input:</p>\n<blockquote>\n<p><strong>MyClass&gt;</strong> show<br>\nI'm a CLI Program!</p>\n<p><strong>MyClass&gt;</strong> |</p>\n</blockquote>\n<hr>\n<h2>These are the available decorators</h2>\n<h3><strong>@Program</strong></h3>\n<pre><code>Program(name=None, version=None, description=None, log=None, style=None, verbosity=logging.INFO)\n\n    a class decorator that defines the CLI program.\n    Instantiation of the wrapped user class can be used as normal python code, accessing all it's attributes.\n    It also exposes the CLI interface with an added attribute named 'CLI'\n\n    * Only a single Program can be declared for every CLI instance\n\n    @name           The name of the CLI program.                                                (Default is the class name)\n    @version        The version of the CLI program.                                             (Default is a CLI without versioning)\n    @description    The description of the CLI program.                                         (Default is the class documentation)\n    @log            A path to a log file.                                                       (Default is no log file)\n    @style          A dictionary that overrides the styling of the CLI for the given keys       (Keys: CLI.STYLE)\n    @verbosity      Determines the verbosity level on the logger. Use None to silence STDOUT    (Keys: logging module)\n</code></pre>\n<h3><strong>@Operation</strong></h3>\n<pre><code>Operation()\n\n    a method decorator that defines the execution code of an operation in the CLI\n</code></pre>\n<h3><strong>@Setting</strong></h3>\n<pre><code>Setting(initial_value, updates_value=True)\n\n    a method decorator that creates a setting value for the CLI with name equals to the method name.\n    It defines the execution code for setting the value into the created setting.\n\n    @initial_value      An initial value that the setting will hold after class initialization\n    @updates_value      Whether or not calling this method automatically updates the inner setting value\n</code></pre>\n<h3><strong>@Delegate</strong></h3>\n<pre><code>Delegate(reuse=True)\n\n    a method decorator that delegates control to another CLI Object instance by exposing an access point. \n    The wrapped method does not accept any arguments and returns the CLI Object instance to delegate control to.\n    * This allows for easy integration and combination of CLI Objects into a single CLI Program\n\n    @reuse      Whether or not the returned CLI Object should be reused for later calls\n</code></pre>\n<h3><strong>@Validation</strong></h3>\n<pre><code>Validation()\n\n    A method decorator that defines a validation to be performed on an execution (Operation / Setting / Delegation)\n    Holds the same signature as the execution it is validating and raises an exception for invalid arguments.\n    * A single execution can have multiple Validations\n</code></pre>\n<hr>\n<h2>API Example</h2>\n<p>In this example, we are wrapping a class, that holds a Setting named <strong>value</strong>, and exposes a method called <strong>show</strong> that prints it to the screen.</p>\n<pre><code>from class_cli import CLI\n\ncli = CLI()\n@cli.Program()\nclass MyClass:\n\n    @cli.Operation()\n    def show(self): \n        if self.CLI.name is None:\n            return \"I'm a CLI Program!\"\n        else:\n            return \"My name is {}!\".format(self.CLI.name)\n\n    @cli.Setting()\n    def name(self, str):\n        return str\n\nif __name__ == \"__main__\":\n    MyClass().CLI.main()\n</code></pre>\n<p>In the main method we called <strong>MyClass().CLI.main()</strong> which checks for sys.argv for input and executes the commands using the instance.</p>\n<blockquote>\n<p>$&gt; <strong>python3 MyClass.py show</strong><br>\nI'm a CLI Program!</p>\n</blockquote>\n<p>If we execute the script without arguments, it will open the CLI for user input:</p>\n<blockquote>\n<p>$&gt; <strong>python3 MyClass.py</strong><br>\n<strong>MyClass</strong><br>\n\u2003\u2003\u2003\u2003To exit, enter one of the following: <strong>'q'</strong> <strong>'quit'</strong> <strong>'exit'</strong><br>\n\u2003\u2003\u2003\u2003To read commands from a file, enter one of the following: <strong>'.r'</strong> <strong>'.read'</strong><br>\n\u2003\u2003\u2003\u2003To access the program settings, enter one of the following: <strong>'.set'</strong> <strong>'.setting'</strong>\\</p>\n<p>\u2003\u2003\u2003\u2003<strong>At any time, add '-h' flag to the command for help.</strong><br>\n<br>\n<strong>MyClass&gt;</strong> show<br>\nI'm a CLI Program!</p>\n<p><strong>MyClass&gt;</strong> .setting name John<br>\n=John</p>\n<p><strong>MyClass&gt;</strong> show<br>\nMy name is John!</p>\n<p><strong>MyClass&gt;</strong> |</p>\n</blockquote>\n<p>You can also open the CLI directly by calling <strong>run(*args)</strong> instead of <strong>main</strong></p>\n<pre><code> if __name__ == \"__main__\":\n     MyClass().CLI.run()\n</code></pre>\n<p>Other commands:</p>\n<p><strong>run_line(line)</strong> which executes a single line of String</p>\n<p><strong>execute(*args)</strong> which executes the same as <strong>run</strong>, but does not print out log outputs.</p>\n<h2>Instance API</h2>\n<p>You can call the methods of a CLI Object directly without opening a CLI session:</p>\n<pre><code>&gt;&gt;&gt; instance = MyClass()\n\n&gt;&gt;&gt; instance.show()\n'I'm a CLI Program!'\n\n&gt;&gt;&gt; instance.name(\"Bob\")\n'Bob'\n\n&gt;&gt; instance.show()\n'My name is Bob!'\n</code></pre>\n<hr>\n<hr>\n<h2>Delegation</h2>\n<p>The library treats Class CLIs as building blocks that can integrate into a larger program.\nThis encourages for code separation between the components of a program.</p>\n<p>This is done by wrapping a class method with the @Delegate decorator.</p>\n<pre><code>cli = CLI()\n@cli.Program()\nclass Main:\n    @cli.Operation()\n    def show(self): return \"Main CLI\"\n\n    @cli.Delegate()\n    def inner(self):\n        inner_cli = CLI()\n        @cli.Program()\n        class Inner:\n            @cli.Operation()\n            def show(self): return \"Inner CLI\"\n        return Inner()\n\nif __name__ == \"__main__\":\n    Main().CLI.main()\n</code></pre>\n<p>You can access the inner CLI by calling the inner method:</p>\n<pre><code>&gt;&gt;&gt; Main()\n&lt;__main__.Main object at 0x03DBF5D0&gt;\n\n&gt;&gt;&gt; Main().inner()\n&lt;__main__.Main.inner.&lt;locals&gt;.Inner object at 0x03B6D750&gt;\n</code></pre>\n<p>From the CLI, you can pass commands to it by prefixing with the <strong>inner</strong> method, or open it directly for commands</p>\n<blockquote>\n<p><strong>Main&gt;</strong> show<br>\nMain CLI</p>\n<p><strong>Main&gt;</strong> inner show<br>\nInner CLI</p>\n<p><strong>Main&gt;</strong> inner</p>\n<p><strong>Main\\Inner&gt;</strong> show<br>\nInner CLI</p>\n<p><strong>Main\\Inner&gt;</strong> q</p>\n<p><strong>Main&gt;</strong> |</p>\n</blockquote>\n<hr>\n<hr>\n<h2>Logging</h2>\n<p>To log messages, the cli holds a Logger instance. to access it, use the <strong>CLI.log</strong> keyword</p>\n<pre><code>def method(self):\n    self.CLI.log.info(\"This is an information Line\")\n    self.CLI.log.warning(\"This is a Warning\")\n    self.CLI.log.error(\"This is an Error\")\n    self.CLI.log.debug(\"This line is shown only when Program decorator is called with 'debug=True'\"\")\n</code></pre>\n<blockquote>\n<p><strong>MyClass&gt;</strong> method<br>\nThis is an information Line<br>\n[WARNING] This is a Warning<br>\n<code>2019-10-10 17:51:21,807</code><br>\n<code>[ERROR] This is an Error</code><br>\n2019-10-10 17:51:21,808<br>\n[DEBUG][test:12] This line is shown only when Program decorator is called with 'debug=True'</p>\n<p><strong>MyClass&gt;</strong> |</p>\n</blockquote>\n<p>You can see documentation for the Logger object <a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\">here</a></p>\n<hr>\n<hr>\n<h2>Help Messages</h2>\n<p>The CLI makes use of user code documentation in order to provide help messages to the user providing the <strong>--help</strong>/<strong>-h</strong> flag in the input.\nUsing the <strong>--help</strong> flag will display a message relevant to the user input.\nUsing it alone will display a usage message for the entire program while adding it after an Operation or Setting name will display usage information for that Operation or Setting.</p>\n<pre><code>@cli.Operation()\ndef method(self):\n    \"\"\"\n    A description of the method\n    \"\"\"\n    pass\n</code></pre>\n<blockquote>\n<p><strong>CLI&gt;</strong> method -h<br>\nusage: CLI method [-h]</p>\n<p>=========================<br>\nA description of the method</p>\n<p>=========================<br>\noptional arguments:<br>\n-h, --help  show this help message and exit\\</p>\n<p><strong>CLI&gt;</strong>|</p>\n</blockquote>\n<p>Any Validations for the method will be added to the description</p>\n<pre><code>@cli.Validation()\ndef method(self, arg):\n    \"\"\"\n    cannot perform operation when disabled\n    \"\"\"\n    if self.disabled:\n        raise Exception(\"Cannot perform operations when disabled\")\n</code></pre>\n<blockquote>\n<p><strong>CLI&gt;</strong> method -h<br>\nusage: CLI method [-h]</p>\n<p>=========================<br>\nA description of the method<br>\n* cannot perform operation when disabled<br>\n=========================</p>\n<p>optional arguments:<br>\n-h, --help  show this help message and exit\\</p>\n<p><strong>CLI&gt;</strong>|</p>\n</blockquote>\n<p>If there are arguments for the method, you can add descriptions for them inside the method documentation with a <strong>@</strong> prefix as demonstrated below.</p>\n<pre><code>@cli.Operation()\ndef method(self, arg):\n    \"\"\"\n    A description of the method\n\n    Accepts:\n        @arg    arg description\n        @arg    another line of the description\n    \"\"\"\n    pass\n</code></pre>\n<blockquote>\n<p><strong>CLI&gt;</strong> method -h<br>\nusage: CLI method [-h] arg</p>\n<p>=========================<br>\nA description of the method</p>\n<p>Accepts:<br>\n\u2003\u2003@arg    arg description<br>\n\u2003\u2003@arg    another line of the description</p>\n<p>\u2003\u2003* cannot perform operation when disabled</p>\n<p>=========================<br>\npositional arguments:<br>\n\u2003arg\u2003\u2003\u2003\u2003=========================<br>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2002arg description<br>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2002another line of the description<br>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2002Type: &lt;class 'str'&gt;<br>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2002=========================<br>\noptional arguments:<br>\n-h, --help  show this help message and exit</p>\n<p><strong>CLI&gt;</strong>|</p>\n</blockquote>\n<hr>\n<hr>\n<h2>Type Annotations</h2>\n<p>Pythons type annotations are used by the CLI in order to use type validation and conversion.</p>\n<h3>Type Conversion</h3>\n<p>Since the user input is a String, by default the arguments passed to a method are String</p>\n<p><strong>Default Behavior</strong>:</p>\n<pre><code>@cli.Operation()\ndef method(self, arg):\n    print(type(arg), ';', arg)\n</code></pre>\n<blockquote>\n<p><strong>CLI&gt;</strong> method value<br>\n&lt;class 'str'&gt; ; value</p>\n<p><strong>CLI&gt;</strong>|</p>\n</blockquote>\n<p><strong>Basic Annotation</strong>:\nUsing annotations, we can provide a type to tell the CLI what is expected, and use it to convert the String into its proper type.\nThe CLI accepts annotations which are a Python Callable that receive a String and returns it converted to the desired type.</p>\n<pre><code>@cli.Operation()\ndef method(self, arg:int):\n    print(type(arg), ';', arg)\n</code></pre>\n<blockquote>\n<p><strong>CLI&gt;</strong> method 17<br>\n&lt;class 'int'&gt; ; 17</p>\n<p><strong>CLI&gt;</strong>|</p>\n</blockquote>\n<p><strong>Iterable Annotation</strong>:\nYou can also use an Iterable as an annotation to specify a set of options.</p>\n<pre><code>@cli.Operation()\ndef method(self, value:[1, \"value\", (0,0)]):\n    print(type(value), ';', value)\n</code></pre>\n<blockquote>\n<p><strong>CLI&gt;</strong> method 1<br>\n&lt;class 'int'&gt; ; 1</p>\n<p><strong>CLI&gt;</strong> method value<br>\n&lt;class 'str'&gt; ; value</p>\n<p><strong>CLI&gt;</strong> method '(0, 0)'<br>\n&lt;class 'tuple'&gt; ; (0, 0)</p>\n<p><strong>CLI&gt;</strong>|</p>\n</blockquote>\n<ul>\n<li><em>Since the string representation of the items in the List are used to select the value from it, The String representations of the Items need to be unique.</em></li>\n</ul>\n<h3>Type Validation</h3>\n<p>During typing of input, The CLI will tip the user for the expected inputs, as well as block the user from entering invalid types into a command.</p>\n<pre><code>@cli.Operation()\ndef method(self, arg1, arg2:int=0, arg3:[1, -1]=1, **extras):\n    pass\n</code></pre>\n<blockquote>\n<p><strong>CLI&gt;</strong> method value number|<br>\n<br>\n<br>\n<code>invalid literal for int() with base 10: 'number'</code><br>\narg1 <strong>arg2[=0]</strong> arg3[=1] {<em>*extras}  :  <strong>{&lt;class 'int'&gt;}</strong>\n<br>\n<strong>CLI&gt;</strong> method value 0 2|<br>\n<br>\n<br>\n<code>'2' is not a valid option</code><br>\narg1 arg2[=0] <strong>arg3[=1]</strong> {</em>*extras}  :  <strong>{&lt;value from: 1, -1&gt;}</strong>\n<br>\n<strong>CLI&gt;</strong> method value 0 -1 arg|<br>\n<br>\n<br>\n<code>'arg' must be in the format [key]=[value]</code><br>\narg1 arg2[=0] arg3[=1] <strong>{**extras}</strong>  :  <strong>{&lt;class 'dict'&gt; [items=0]}</strong>\n<br>\n<strong>CLI&gt;</strong> method value 0 -1 arg=val|<br>\n<br>\n<br>\n<br>\narg1 arg2[=0] arg3[=1] <strong>{**extras}</strong>  :  <strong>{&lt;class 'dict'&gt; [items=1]}</strong></p>\n</blockquote>\n<hr>\n<h2>Auto Completion</h2>\n<p>The CLI can auto-complete command names, file paths and argument values.</p>\n<pre><code>@cli.Operation()\ndef method(self, arg1, arg2:int=0, arg3:[1, -1]=None, *extras):\n    pass\n\n@cli.Setting()\ndef name(self, arg1):\n    return arg1\n</code></pre>\n<p>Pressing 'TAB' will open up all available suggestions</p>\n<blockquote>\n<p><strong>CLI&gt;</strong> |<br>\n\u2003\u2003\u2002| method |<br>\n\u2003\u2003\u2002| .setting\u00a0 |<br>\n\u2003\u2003\u2002| \u2002.read\u2002\u00a0 |<br>\n<br>\n<strong>CLI&gt;</strong> .setting |<br>\n\u2003\u2003\u2003\u2003\u2003\u2003| name |</p>\n</blockquote>\n<p>When browsing suggestions, you can see the expected arguments at the bottom:</p>\n<blockquote>\n<p><strong>CLI&gt;</strong> method|<br>\n\u2003\u2003\u2002<strong>| method |</strong><br>\n\u2003\u2003\u2002| \u2002.setting\u00a0 |<br>\n\u2003\u2003\u2002| \u2003.read\u2002\u00a0 |<br>\n<br>\n<strong>arg1 arg2[=0] arg3[=None] {*extras}</strong></p>\n</blockquote>\n<p>When the expected argument is an Iterable, the CLI will suggest all the Iterable items</p>\n<blockquote>\n<p><strong>CLI&gt;</strong> method value 0 |<br>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002| \u00a01 |<br>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002| -1 |<br>\n<br>\narg1 arg2[=0] <strong>arg3[=None]</strong> {*extras}  :  <strong>{1, -1}</strong></p>\n</blockquote>\n<p>If you are providing your own Callable for annotation, you can make use of the auto complete mechanism by implementing <strong>_<em>complete</em>_(self, keyword)</strong></p>\n<hr>\n<h2>Implementing a Custom Annotation</h2>\n<p>You can use any callable(str) as a type annotation for the CLI.</p>\n<h3>Representation</h3>\n<p>The CLI displays the callable to the user as its String representation. To set the description, override the <strong>_<em>str</em>_(self)</strong> method</p>\n<pre><code>def __str__(self):\n    return \"A Custom Type\"\n</code></pre>\n<h3>Callable</h3>\n<p>The annotation must be a callable that accepts a string and returns a list of strings.\nThe callable returns all the suggestions relevant to the given keyword</p>\n<pre><code>def __call__(self, key):\n    if key in self.options_dict:\n        return self.options_dict[key]\n</code></pre>\n<h3>Validation</h3>\n<p>If the given string is not a valid option, you can throw an exception inside the <strong>_<em>call</em>_</strong> method</p>\n<pre><code>def __call__(self, str):\n    if key in self.options_dict:\n        return self.options_dict[key]\n    throw Exception(\"'{}'' is not a valid option\".format(str))\n</code></pre>\n<p>This will block the user from entering a non existing key</p>\n<h3>Autocomplete Suggestion</h3>\n<p>To make use of the auto complete mechanism, implement the <strong>_<em>complete</em>_(self, keyword)</strong> method</p>\n<pre><code>def __complete__(self, str):\n    return [s for s in self.suggestions if s.startswith(str)]\n</code></pre>\n<h1>Dynamic Iterable Annotation</h1>\n<p>We've seen that you can use an iterable as an annotation for a variable</p>\n<pre><code>@cli.Program()\nclass MyClass:\n    @cli.Operation()\n    def oper(self, value:[True, False]):\n        print(\"You have selected\", value)\n</code></pre>\n<p>In this example, we are using a list to specify that only boolean values are accepted.</p>\n<p>What if we want to use a list that is dynamic and can change throughout the run of the program.\nTo do that, we need to define the list outside the class scope in order to access it in method signature</p>\n<pre><code>values = [1, 2, 3]\n\n@cli.Program()\nclass MyClass:\n    @cli.Operation()\n    def oper(self, value:values):\n        print(\"You have selected\", value)\n\n    @cli.Operation()\n    def add_value(self, value:int):\n        values.append(value)\n</code></pre>\n<p>The <strong>oper</strong> operation will now accept values in [1, 2, 3].\nWe can also use the <strong>add_value</strong> operation in order to add more options to be selected</p>\n<p>For better code structure, we can use the <strong>with</strong> statement with the CLI object</p>\n<pre><code>with CLI() as cli:\n    values = [1, 2, 3]\n\n    @cli.Program()\n    class MyClass:\n        @cli.Operation()\n        def oper(self, value:values):\n            print(\"You have selected\", value)\n\n        @cli.Operation()\n        def add_value(self, value:int):\n            values.append(value)\n</code></pre>\n<p>This will make it clear that the <strong>values</strong> variable is associated with the CLI.</p>\n\n          </div>"}, "last_serial": 6285502, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "878107b4ceebd013768b673260f053a2", "sha256": "bf469a6218f100cf2349422bd34dced2a013f176abf3c2b99da2dae8669dedbc"}, "downloads": -1, "filename": "class_cli-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "878107b4ceebd013768b673260f053a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30039, "upload_time": "2019-10-08T08:37:12", "upload_time_iso_8601": "2019-10-08T08:37:12.796173Z", "url": "https://files.pythonhosted.org/packages/56/6b/9961a81401a71c83f804804331b6ab4c74a950bcd6fb7a793af749beaacb/class_cli-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "385be45dad1f431431e3087fae70f6df", "sha256": "7061ee93b80641498f71955e10e6ee86e2dd3abc32cde15d8e3bb62cfd85f8eb"}, "downloads": -1, "filename": "class_cli-0.1.tar.gz", "has_sig": false, "md5_digest": "385be45dad1f431431e3087fae70f6df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16792, "upload_time": "2019-10-08T08:37:15", "upload_time_iso_8601": "2019-10-08T08:37:15.215651Z", "url": "https://files.pythonhosted.org/packages/91/54/61fb2fbfb00bd45522c6e4d01de967e3237fec2ed6bcf66de1bbdcba6a0a/class_cli-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0b6c046774762837ac2c06978ad32236", "sha256": "8ce202c72ec3cffd66e6b87bdc727ecc82a2ceb7da37f775aaab93988b2efca5"}, "downloads": -1, "filename": "class_cli-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0b6c046774762837ac2c06978ad32236", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 32272, "upload_time": "2019-10-10T08:32:29", "upload_time_iso_8601": "2019-10-10T08:32:29.933716Z", "url": "https://files.pythonhosted.org/packages/24/72/10ba5a4298e626058a69cce2eaa8bbceb883a6d815d476da5d2a77ae5455/class_cli-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c74b62bd2df81e9481efbb79251ee53a", "sha256": "a268f485c6a59750ec8ac10c4bf1e64f78123e59c992945d65d6003f3538f3f3"}, "downloads": -1, "filename": "class_cli-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c74b62bd2df81e9481efbb79251ee53a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 18464, "upload_time": "2019-10-10T08:32:31", "upload_time_iso_8601": "2019-10-10T08:32:31.834784Z", "url": "https://files.pythonhosted.org/packages/39/86/0c60c250d8692448dd2a4650be2f308dd28c595b8cdf355720abbb4cb127/class_cli-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3fe83a0479c38c8762aaa271e07e13c8", "sha256": "3438a3cc71a1f572aa97618a167970fbd6fe6376d669db1dcc86a77533d26558"}, "downloads": -1, "filename": "class_cli-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3fe83a0479c38c8762aaa271e07e13c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 34614, "upload_time": "2019-10-10T16:49:16", "upload_time_iso_8601": "2019-10-10T16:49:16.488029Z", "url": "https://files.pythonhosted.org/packages/cb/07/8186bb8baf1ea06e4ff42f20c7437a6dfccb7c04957405b9dcb993ec6528/class_cli-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e147ea499c2e379c8e929e65875dcf9", "sha256": "1d0297eaeb5d097dd89ca93d1e7b082d9dc9aaf7e27487afd21c056cf09c8f08"}, "downloads": -1, "filename": "class_cli-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5e147ea499c2e379c8e929e65875dcf9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 23258, "upload_time": "2019-10-10T16:49:17", "upload_time_iso_8601": "2019-10-10T16:49:17.994782Z", "url": "https://files.pythonhosted.org/packages/a1/8d/5707c82581827920d558b9b3dd2f47fd7f7525de781db6442cce8f066c5c/class_cli-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "25d68b123885f798768e5461ead79981", "sha256": "bd3d4541113715702a003567c7d2678e44b21eb724659d5167b664c851a00a57"}, "downloads": -1, "filename": "class_cli-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "25d68b123885f798768e5461ead79981", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 34614, "upload_time": "2019-10-10T17:19:17", "upload_time_iso_8601": "2019-10-10T17:19:17.731588Z", "url": "https://files.pythonhosted.org/packages/a6/3a/e177127402b48797bbc2b2ebb37b2a69d2f83ef68fa65b8949afc762e779/class_cli-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35f33908398fd633ed20b8a38f58bf28", "sha256": "7f9d9513282cc0ade0e322c9946681fc5f9a330289f6c08023129eb5db5f97d8"}, "downloads": -1, "filename": "class_cli-0.1.3.tar.gz", "has_sig": false, "md5_digest": "35f33908398fd633ed20b8a38f58bf28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 23255, "upload_time": "2019-10-10T17:19:19", "upload_time_iso_8601": "2019-10-10T17:19:19.507002Z", "url": "https://files.pythonhosted.org/packages/62/28/fa082286b683ca50b7540db967a0245fb543c3bd3c2fa7dd4188a921afc1/class_cli-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "287efcfbb4ef214b643ffc3b70a23303", "sha256": "8495e7cccf40f162bd5d549ec2d8154ce33b928a988c07b5af0f10b5cc92bc72"}, "downloads": -1, "filename": "class_cli-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "287efcfbb4ef214b643ffc3b70a23303", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 35040, "upload_time": "2019-10-14T11:19:46", "upload_time_iso_8601": "2019-10-14T11:19:46.514785Z", "url": "https://files.pythonhosted.org/packages/17/8a/fe97bb14faa2723c60b12b2f56663c6b5924dc3b9e9a6af0fc1e9f983ca1/class_cli-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b44cf017f7556e1c0ebf056144965f8f", "sha256": "308ea9e72b6b83b077ca4d0a2092eff01371c8c16079d3d2a98c763d38f6b111"}, "downloads": -1, "filename": "class_cli-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b44cf017f7556e1c0ebf056144965f8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 23645, "upload_time": "2019-10-14T11:19:48", "upload_time_iso_8601": "2019-10-14T11:19:48.394782Z", "url": "https://files.pythonhosted.org/packages/46/42/8cad86c4f49ce6a30b8f80013541a9bbfa8a69676e929566f32b10ffbea4/class_cli-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "79cef60b43a39de96f31176ffa9507a7", "sha256": "c041368de956ee89ca9cc470b2b44e92660a9af86395f67375416a59dba10021"}, "downloads": -1, "filename": "class_cli-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "79cef60b43a39de96f31176ffa9507a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 35218, "upload_time": "2019-10-14T12:27:01", "upload_time_iso_8601": "2019-10-14T12:27:01.999382Z", "url": "https://files.pythonhosted.org/packages/32/d1/ecc5a9c938dd12f22e0ff27e986c1a84ab0773bc9adbcbc2f79bcee3fecd/class_cli-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "feb7430c417ed870510c4a9651d8d385", "sha256": "5cb3939e01721276076652b0bd0f4b725f1c28d225b56341135ffd965c24d2c9"}, "downloads": -1, "filename": "class_cli-0.1.5.tar.gz", "has_sig": false, "md5_digest": "feb7430c417ed870510c4a9651d8d385", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 23836, "upload_time": "2019-10-14T12:27:03", "upload_time_iso_8601": "2019-10-14T12:27:03.538055Z", "url": "https://files.pythonhosted.org/packages/89/d1/b34ba92f3760716fb60a086d274e1e723bd38fd161c7d86846d8214bf7dc/class_cli-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "fa15d7fb69822ec7398bc13e01b185cf", "sha256": "2f4ae05f06c579b98d55cf9590773d885011c41a2c3bc0e588035b6d724b4a42"}, "downloads": -1, "filename": "class_cli-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "fa15d7fb69822ec7398bc13e01b185cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 35294, "upload_time": "2019-10-16T15:09:32", "upload_time_iso_8601": "2019-10-16T15:09:32.870929Z", "url": "https://files.pythonhosted.org/packages/7e/9b/3c81f50e638893cf887b84844a9a4d5009737248e8d36fca61caa095c11d/class_cli-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec3672e36602db367e8739a4df8dc9cd", "sha256": "069627d3079316f5ec7e86060ae81823c813d1d4d3143577f3804526b28d6549"}, "downloads": -1, "filename": "class_cli-0.1.6.tar.gz", "has_sig": false, "md5_digest": "ec3672e36602db367e8739a4df8dc9cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 24397, "upload_time": "2019-10-16T15:09:46", "upload_time_iso_8601": "2019-10-16T15:09:46.646778Z", "url": "https://files.pythonhosted.org/packages/ab/60/8bfd8644536d08e3b222934863428e172b0ad2cd79f9805c1cb30492bc0c/class_cli-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "4a47f700dd74517763b68886076130cb", "sha256": "a68e5a60ab4120e9b8496dc0e2739d6eaa47aa39b14cd945850d6d8cc60a7afb"}, "downloads": -1, "filename": "class_cli-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "4a47f700dd74517763b68886076130cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 35296, "upload_time": "2019-10-16T15:26:00", "upload_time_iso_8601": "2019-10-16T15:26:00.106569Z", "url": "https://files.pythonhosted.org/packages/da/e9/6c97ebe374e92b7d3db6c0b6f58084f3806cb889a754d371f8e5dd5d3805/class_cli-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43225880fa883ac4041f46663ca71660", "sha256": "151a20f4d3b04350c8b5a3ca977b19608c3dbf9d76237e2c5c0bd13a6f4bf291"}, "downloads": -1, "filename": "class_cli-0.1.7.tar.gz", "has_sig": false, "md5_digest": "43225880fa883ac4041f46663ca71660", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 24863, "upload_time": "2019-10-16T15:26:08", "upload_time_iso_8601": "2019-10-16T15:26:08.646869Z", "url": "https://files.pythonhosted.org/packages/55/b3/a55a6d2a2d35adf72625684ce8f9da57bacc2c38e26431571087b7a3007f/class_cli-0.1.7.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "389ef843ec2ce9cf3d0e144a7fa6140d", "sha256": "414ff3fb7536e1ee1d68a8828dd3f4f814e5d462688b84d0b99b6fbda41ba04e"}, "downloads": -1, "filename": "class_cli-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "389ef843ec2ce9cf3d0e144a7fa6140d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 37059, "upload_time": "2019-10-20T08:57:30", "upload_time_iso_8601": "2019-10-20T08:57:30.231592Z", "url": "https://files.pythonhosted.org/packages/33/b2/7928b6224c2a8ce28bb904b61bcf8681a08179f4e38037b5b17d1d59c136/class_cli-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a50c02fd2ae73b180d36da8be4475dd9", "sha256": "d9f0078c8d7bd7a42a7591af5736278a7ad40674979541740f8df2fb48c9cee4"}, "downloads": -1, "filename": "class_cli-0.2.tar.gz", "has_sig": false, "md5_digest": "a50c02fd2ae73b180d36da8be4475dd9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 27662, "upload_time": "2019-10-20T08:57:32", "upload_time_iso_8601": "2019-10-20T08:57:32.276735Z", "url": "https://files.pythonhosted.org/packages/a3/8b/0b4588882298596cde7bd333e0a08f6ec3f7bb8aee6ba4c0273c1b475f75/class_cli-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b3139fcb067290216355f9f839e9cb01", "sha256": "ccd90e6ebcd1708f003d84365d88c2f6cd8b9fcb39d8480e551a2ac24f47f825"}, "downloads": -1, "filename": "class_cli-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3139fcb067290216355f9f839e9cb01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 37201, "upload_time": "2019-10-20T09:17:01", "upload_time_iso_8601": "2019-10-20T09:17:01.042787Z", "url": "https://files.pythonhosted.org/packages/ca/b8/12e544a5b08741bb8ddd612f9b1be448dd93841889d1533d9a34a8f01cf4/class_cli-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ed960478f267574705cea76b2652c7e", "sha256": "49cd34d15659e593ede9017b5de58b5979226ddd1e244fc818afe2a2c847303b"}, "downloads": -1, "filename": "class_cli-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9ed960478f267574705cea76b2652c7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 27933, "upload_time": "2019-10-20T09:17:03", "upload_time_iso_8601": "2019-10-20T09:17:03.106881Z", "url": "https://files.pythonhosted.org/packages/3b/c3/b9e1d902bcfab2ad11c94844439275f681a8d21ac32eeb4d0986083d3260/class_cli-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "655cb1055c41fa4d35a6945e9c70b7dc", "sha256": "a40d0e9810b5f3c1a55b8796edf57891a04266a5f4aa7fa3c1b7cfd62888e977"}, "downloads": -1, "filename": "class_cli-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "655cb1055c41fa4d35a6945e9c70b7dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 36653, "upload_time": "2019-10-22T14:27:11", "upload_time_iso_8601": "2019-10-22T14:27:11.697347Z", "url": "https://files.pythonhosted.org/packages/94/d0/5a32714b08a5d5376af882768824d478084f4b0624cae23c3a7240d11c27/class_cli-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "548d7bcb5e8e73c24a658fca77a00955", "sha256": "9255943bdfeb8dd68a9ffdcdd6abdf5f9ff64bbd24636cdfffa36b25f8b00df1"}, "downloads": -1, "filename": "class_cli-0.2.2.tar.gz", "has_sig": false, "md5_digest": "548d7bcb5e8e73c24a658fca77a00955", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 26233, "upload_time": "2019-10-22T14:27:14", "upload_time_iso_8601": "2019-10-22T14:27:14.103423Z", "url": "https://files.pythonhosted.org/packages/eb/89/7c73f2a4c732de3686c18fdee92af3dc760b7d0a561a3231fe14eb7a4ea0/class_cli-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "d8182f5a8fe2d221b28c3c1d6fd74e25", "sha256": "b58100996e8951a8f1fa91567812387ada87dd181fa31349ae289650b14c1020"}, "downloads": -1, "filename": "class_cli-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d8182f5a8fe2d221b28c3c1d6fd74e25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 36657, "upload_time": "2019-10-24T07:44:21", "upload_time_iso_8601": "2019-10-24T07:44:21.237814Z", "url": "https://files.pythonhosted.org/packages/ff/0b/8d14b4927e4ef2454f6379b4457a8fc99a3bb69ff859f1f56d36df49f199/class_cli-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3dac296891ef0efd4d624d245373754a", "sha256": "f3e67413392eead5d04575f6579b9da0f70c846bfe2e8be486430b450e94c691"}, "downloads": -1, "filename": "class_cli-0.2.3.tar.gz", "has_sig": false, "md5_digest": "3dac296891ef0efd4d624d245373754a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 26240, "upload_time": "2019-10-24T07:44:23", "upload_time_iso_8601": "2019-10-24T07:44:23.488310Z", "url": "https://files.pythonhosted.org/packages/7b/8b/aaf20ee54692e98b244015669a5112c8bad5b415d46b758e109fc47eb216/class_cli-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "71ed340091cdc1aeef43f9e745b33916", "sha256": "637a29e4b5a884c1a3811a0af81ec96e3bf13dbc91d6f3a96e7d360a3bd815a0"}, "downloads": -1, "filename": "class_cli-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "71ed340091cdc1aeef43f9e745b33916", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 36461, "upload_time": "2019-10-26T10:11:31", "upload_time_iso_8601": "2019-10-26T10:11:31.042720Z", "url": "https://files.pythonhosted.org/packages/0c/91/32b0cafc6c1dc405c0eebcd0a92a13898ff4251ded9a932ea38dbc138b6f/class_cli-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "377d5b293c9edc6d6bea3ed978556360", "sha256": "3281799da0cd4df1ec55d6e30b8f0dffd5803f2ddec9c12a23c2b269190019ae"}, "downloads": -1, "filename": "class_cli-0.2.4.tar.gz", "has_sig": false, "md5_digest": "377d5b293c9edc6d6bea3ed978556360", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 26087, "upload_time": "2019-10-26T10:11:32", "upload_time_iso_8601": "2019-10-26T10:11:32.980205Z", "url": "https://files.pythonhosted.org/packages/d6/7e/a581fbbe21e6261c91795ca86ee3baf4b8aaf5de019a159eb4058f651ef4/class_cli-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "a38841ab1290daf5119fe500e1504438", "sha256": "c5fad48d9f389d466c30cc827a2af448474fd3a9b01c9f03cd4d089ab5167b7c"}, "downloads": -1, "filename": "class_cli-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a38841ab1290daf5119fe500e1504438", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 36501, "upload_time": "2019-10-31T10:58:04", "upload_time_iso_8601": "2019-10-31T10:58:04.087196Z", "url": "https://files.pythonhosted.org/packages/4e/43/0713f74110335db8c69710a9fec5dc7c3878b67640bd58e5730d3a4dfbd7/class_cli-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40a19b7fdbd2365c238422d1a97c01f7", "sha256": "60fc6cd39f497dd5989168ba2019964a837aa6c7c6dec7f64c4ec73adc3ab7e6"}, "downloads": -1, "filename": "class_cli-0.2.5.tar.gz", "has_sig": false, "md5_digest": "40a19b7fdbd2365c238422d1a97c01f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 26143, "upload_time": "2019-10-31T10:58:06", "upload_time_iso_8601": "2019-10-31T10:58:06.096842Z", "url": "https://files.pythonhosted.org/packages/d8/76/31f1028e97dc5a6c571a1ea44e2b96d5a2d73e6d79e10bf403b33fbf475c/class_cli-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "1b5887faff4ba24c7f53589f56fa89a2", "sha256": "702bb65845abf3dd935437846aeb04ac5eae73ff35bc74524ee1e8629568abf7"}, "downloads": -1, "filename": "class_cli-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1b5887faff4ba24c7f53589f56fa89a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 36625, "upload_time": "2019-11-07T09:55:15", "upload_time_iso_8601": "2019-11-07T09:55:15.402790Z", "url": "https://files.pythonhosted.org/packages/86/09/0d4fcc23dea8cf9c6eb7882ef737beb2036945ea462757d5e5b82dd7223b/class_cli-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4fdf992539954be96a209fec55c226b5", "sha256": "8f8a6814d238e6a85c9717a9e25630297a2ad7ff5615876fbe2260310539ce25"}, "downloads": -1, "filename": "class_cli-0.2.6.tar.gz", "has_sig": false, "md5_digest": "4fdf992539954be96a209fec55c226b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 26263, "upload_time": "2019-11-07T09:55:17", "upload_time_iso_8601": "2019-11-07T09:55:17.538020Z", "url": "https://files.pythonhosted.org/packages/31/11/f065aeb69117e43b6e6b5025f024bd801a02f18f8fcdb2da07f67451d1ea/class_cli-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "d7e1394cae377cf30d9d235710924310", "sha256": "bef0b337bbe4eb9b2f957e9fc4e0dedcc76cf4c8ec16c1006b3b9e378d194a15"}, "downloads": -1, "filename": "class_cli-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d7e1394cae377cf30d9d235710924310", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 37450, "upload_time": "2019-11-10T08:39:47", "upload_time_iso_8601": "2019-11-10T08:39:47.738811Z", "url": "https://files.pythonhosted.org/packages/e6/c2/a0ec0cd58b3ad04f0213c6517593d6e5098380b6aa67a0a63ecfaf47e871/class_cli-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3d6e780c7d22da63173151d5c6180be", "sha256": "68b374be72eff823f3dc94316a5c519865cdaa66757093082e16401521480b21"}, "downloads": -1, "filename": "class_cli-0.2.7.tar.gz", "has_sig": false, "md5_digest": "f3d6e780c7d22da63173151d5c6180be", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 27517, "upload_time": "2019-11-10T08:39:49", "upload_time_iso_8601": "2019-11-10T08:39:49.551541Z", "url": "https://files.pythonhosted.org/packages/5f/7a/628464c8276d8b37969753b577c6d2c7a19ca2a92e4085677ab85825b60a/class_cli-0.2.7.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "166eb05d88f1ec6a56747fbbfab0fbfc", "sha256": "7c2e4fe24f0ea68227e10016eb6afc4487802f459a279d7ae29d2fed88fd18d7"}, "downloads": -1, "filename": "class_cli-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "166eb05d88f1ec6a56747fbbfab0fbfc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 37242, "upload_time": "2019-11-28T09:13:28", "upload_time_iso_8601": "2019-11-28T09:13:28.458788Z", "url": "https://files.pythonhosted.org/packages/20/ee/bb52a9208b2a415ff5646cd130a353efbe53c593d89540afe018a676d2b2/class_cli-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18c0c8967aa6b14b11af149ebb4ef42d", "sha256": "874e234f837d454933342072dace04ade2de11b4e6fa583649d2d8baafcef184"}, "downloads": -1, "filename": "class_cli-0.3.0.tar.gz", "has_sig": false, "md5_digest": "18c0c8967aa6b14b11af149ebb4ef42d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 27285, "upload_time": "2019-11-28T09:13:29", "upload_time_iso_8601": "2019-11-28T09:13:29.923154Z", "url": "https://files.pythonhosted.org/packages/6b/9d/2782eae045239b85ec2467a87f1a65cc033e85e85d60211d436405c4c651/class_cli-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5b05090c82386ff86d7da2dec18b47ca", "sha256": "37bf6c7b993737066cf92841e6ad6c4df6fd43c9736f7de9ed172811a15bcd52"}, "downloads": -1, "filename": "class_cli-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5b05090c82386ff86d7da2dec18b47ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 18924, "upload_time": "2019-12-12T10:59:41", "upload_time_iso_8601": "2019-12-12T10:59:41.196053Z", "url": "https://files.pythonhosted.org/packages/b9/2b/5b45954b8a6a14c6a899ab5bf06c9d48f3018d3b21e686bf840aad9793c3/class_cli-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef881dae570aa117fb12e10cb2134e06", "sha256": "9b3b5d2074b1d1a59f4ae85cd7c975e9442c192455b47f4114bd3c7bea890339"}, "downloads": -1, "filename": "class_cli-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ef881dae570aa117fb12e10cb2134e06", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 9568, "upload_time": "2019-12-12T10:59:43", "upload_time_iso_8601": "2019-12-12T10:59:43.210904Z", "url": "https://files.pythonhosted.org/packages/56/ad/65ec0b00d5a10c73d69fce44f60ba93c4081060a4212fce783636d19dcc6/class_cli-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "1501dfa552c52ef19ef13f0bb54d89ea", "sha256": "2df243e92507babdca361ba1b633aea4c84429c23b5575c044eecaf45fcd0c62"}, "downloads": -1, "filename": "class_cli-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1501dfa552c52ef19ef13f0bb54d89ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 18923, "upload_time": "2019-12-12T11:01:53", "upload_time_iso_8601": "2019-12-12T11:01:53.355995Z", "url": "https://files.pythonhosted.org/packages/1e/61/4b6e99e34d54cbf0a388cbfa040cf35b01737c8fb22f963af14963b0a5b7/class_cli-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6374dca790be5a9170d4a1dd500d562", "sha256": "9133e6c6c26d978a61268ba59130ec84a2ffb36cf0052f45c7a394967ef55b93"}, "downloads": -1, "filename": "class_cli-0.3.2.tar.gz", "has_sig": false, "md5_digest": "f6374dca790be5a9170d4a1dd500d562", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 9562, "upload_time": "2019-12-12T11:01:54", "upload_time_iso_8601": "2019-12-12T11:01:54.926675Z", "url": "https://files.pythonhosted.org/packages/04/86/1c23bce762a9f2d9759794a02b3f025604e293b5f4cd7bffd4ff7ac3b109/class_cli-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "6923e5a630a6c8f22f18564be97c7de6", "sha256": "c80b9e9fb85b6ea48fcfcfe2817b7772ce5e53dfc0bc0f636760c333377bc38c"}, "downloads": -1, "filename": "class_cli-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6923e5a630a6c8f22f18564be97c7de6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 37683, "upload_time": "2019-12-12T11:51:11", "upload_time_iso_8601": "2019-12-12T11:51:11.135414Z", "url": "https://files.pythonhosted.org/packages/7c/11/44cf0245441a95597fe5326e6401f845101060c9f9c4de72f569c2fe8aca/class_cli-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9733d5851168b18c793be5c7346ec928", "sha256": "59e6767c70df684dc02c8e98251cb18ae7a6ba255c2f7fa26e20756911112b32"}, "downloads": -1, "filename": "class_cli-0.3.3.tar.gz", "has_sig": false, "md5_digest": "9733d5851168b18c793be5c7346ec928", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 27299, "upload_time": "2019-12-12T11:51:13", "upload_time_iso_8601": "2019-12-12T11:51:13.770511Z", "url": "https://files.pythonhosted.org/packages/2e/d4/dd7ffebebb2e064789dac4d4ff80dfcace6f1fc605b7028568637c3eaf25/class_cli-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6923e5a630a6c8f22f18564be97c7de6", "sha256": "c80b9e9fb85b6ea48fcfcfe2817b7772ce5e53dfc0bc0f636760c333377bc38c"}, "downloads": -1, "filename": "class_cli-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6923e5a630a6c8f22f18564be97c7de6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 37683, "upload_time": "2019-12-12T11:51:11", "upload_time_iso_8601": "2019-12-12T11:51:11.135414Z", "url": "https://files.pythonhosted.org/packages/7c/11/44cf0245441a95597fe5326e6401f845101060c9f9c4de72f569c2fe8aca/class_cli-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9733d5851168b18c793be5c7346ec928", "sha256": "59e6767c70df684dc02c8e98251cb18ae7a6ba255c2f7fa26e20756911112b32"}, "downloads": -1, "filename": "class_cli-0.3.3.tar.gz", "has_sig": false, "md5_digest": "9733d5851168b18c793be5c7346ec928", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 27299, "upload_time": "2019-12-12T11:51:13", "upload_time_iso_8601": "2019-12-12T11:51:13.770511Z", "url": "https://files.pythonhosted.org/packages/2e/d4/dd7ffebebb2e064789dac4d4ff80dfcace6f1fc605b7028568637c3eaf25/class_cli-0.3.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:09 2020"}