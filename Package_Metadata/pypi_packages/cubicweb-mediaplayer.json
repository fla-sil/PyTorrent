{"info": {"author": "LOGILAB S.A. (Paris, FRANCE)", "author_email": "contact@logilab.fr", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: CubicWeb", "Programming Language :: JavaScript", "Programming Language :: Python"], "description": "Summary\n-------\n\nThis cube provides basic media storage, transcoding and streaming features.\n\nStorage\n-------\n\nThis cube defines two ``SoundFile`` and ``VideoFile`` entity\ntypes. Each entity uses a ``data`` attribute to store original raw\ndata and custom ``data_<fmt>`` (e.g. ``data_mp3``, ``data_ogv``\nattributes) to store transcoded data.\n\nBFSS is used to store data on the filesystem. The root directory\nis specified by the ``media-dir`` configuration option.\n\n\nTranscoding\n-----------\n\nModification hooks are responsible for reenconding media files.\n`ffmpeg <http://www.ffmpeg.org/>`_ is used to convert sound and video\nfiles to streamable formats.\n\nEncoding uses Celery_ as an asynchronous task queue manager, see below\nfor installation.\n\n.. _Celery: http://www.celeryproject.org\n\n\nStreaming\n---------\n\n`jplayer <http://jplayer.org/>`_ is used to stream media content.\n\n\nInstallation\n------------\n\nSee Celery_ for a complete documentation. Here is a quick startup using \nRabbitMQ_ as broker for Celery_:\n\n.. code-block:: bash\n\n  apt-get install rabbitmq-server\n\nRabbitMQ requires a minimal setup. For instance (all permissions for\nuser `user` on vhost `vhost`):\n\n.. code-block:: bash\n\n  sudo rabbitmqctl add_user user password\n  sudo rabbitmqctl add_vhost vhost\n  sudo rabbitmqctl set_permissions -p vhost user '.*' '.*' '.*'\n\n.. _RabbitMQ: https://www.rabbitmq.com/\n\nConfiguration\n-------------\n\nCreate a `celeryconfig.py` file in the same directory as the\n`all-in-one.conf` file (namely, the application home), with\nfollowing content::\n\n  BROKER_URL = 'amqp://user:password@localhost:5672/vhost'\n\nSee\nhttp://docs.celeryproject.org/en/latest/userguide/application.html#configuration\nfor more configuration options.\n\n\nExecution\n---------\n\nUse the command below to run the celery worker handler:\n\n.. code-block:: bash\n\n celery -A cubicweb_celery -i <instance_name> worker [ --beat ]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.cubicweb.org/project/cubicweb-mediaplayer", "keywords": null, "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "cubicweb-mediaplayer", "package_url": "https://pypi.org/project/cubicweb-mediaplayer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cubicweb-mediaplayer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.cubicweb.org/project/cubicweb-mediaplayer"}, "release_url": "https://pypi.org/project/cubicweb-mediaplayer/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "provide a schema and API for sound and media files with a html5 player", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"summary\">\n<h2>Summary</h2>\n<p>This cube provides basic media storage, transcoding and streaming features.</p>\n</div>\n<div id=\"storage\">\n<h2>Storage</h2>\n<p>This cube defines two <tt>SoundFile</tt> and <tt>VideoFile</tt> entity\ntypes. Each entity uses a <tt>data</tt> attribute to store original raw\ndata and custom <tt>data_&lt;fmt&gt;</tt> (e.g. <tt>data_mp3</tt>, <tt>data_ogv</tt>\nattributes) to store transcoded data.</p>\n<p>BFSS is used to store data on the filesystem. The root directory\nis specified by the <tt><span class=\"pre\">media-dir</span></tt> configuration option.</p>\n</div>\n<div id=\"transcoding\">\n<h2>Transcoding</h2>\n<p>Modification hooks are responsible for reenconding media files.\n<a href=\"http://www.ffmpeg.org/\" rel=\"nofollow\">ffmpeg</a> is used to convert sound and video\nfiles to streamable formats.</p>\n<p>Encoding uses <a href=\"http://www.celeryproject.org\" rel=\"nofollow\">Celery</a> as an asynchronous task queue manager, see below\nfor installation.</p>\n</div>\n<div id=\"streaming\">\n<h2>Streaming</h2>\n<p><a href=\"http://jplayer.org/\" rel=\"nofollow\">jplayer</a> is used to stream media content.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>See <a href=\"http://www.celeryproject.org\" rel=\"nofollow\">Celery</a> for a complete documentation. Here is a quick startup using\n<a href=\"https://www.rabbitmq.com/\" rel=\"nofollow\">RabbitMQ</a> as broker for <a href=\"http://www.celeryproject.org\" rel=\"nofollow\">Celery</a>:</p>\n<pre>apt-get install rabbitmq-server\n</pre>\n<p>RabbitMQ requires a minimal setup. For instance (all permissions for\nuser <cite>user</cite> on vhost <cite>vhost</cite>):</p>\n<pre>sudo rabbitmqctl add_user user password\nsudo rabbitmqctl add_vhost vhost\nsudo rabbitmqctl set_permissions -p vhost user <span class=\"s1\">'.*'</span> <span class=\"s1\">'.*'</span> <span class=\"s1\">'.*'</span>\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Create a <cite>celeryconfig.py</cite> file in the same directory as the\n<cite>all-in-one.conf</cite> file (namely, the application home), with\nfollowing content:</p>\n<pre>BROKER_URL = 'amqp://user:password@localhost:5672/vhost'\n</pre>\n<p>See\n<a href=\"http://docs.celeryproject.org/en/latest/userguide/application.html#configuration\" rel=\"nofollow\">http://docs.celeryproject.org/en/latest/userguide/application.html#configuration</a>\nfor more configuration options.</p>\n</div>\n<div id=\"execution\">\n<h2>Execution</h2>\n<p>Use the command below to run the celery worker handler:</p>\n<pre>celery -A cubicweb_celery -i &lt;instance_name&gt; worker <span class=\"o\">[</span> --beat <span class=\"o\">]</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2534643, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d5fcf2b440994b339597c3a72b532687", "sha256": "9d52360730525fd986fe5f2b8b37e4dfbaeffbe4ab21baf999692d1e95dcf753"}, "downloads": -1, "filename": "cubicweb-mediaplayer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d5fcf2b440994b339597c3a72b532687", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 136214, "upload_time": "2014-03-04T09:33:12", "upload_time_iso_8601": "2014-03-04T09:33:12.634842Z", "url": "https://files.pythonhosted.org/packages/5c/e9/8576ccd37bf8be55739298dba38e785d0a725b4ea80bfb4b9b5fd5f225e4/cubicweb-mediaplayer-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a3708e543b60be4aed38c8b247fa2e95", "sha256": "afddf72849535d545bb64161458f5b75f13e4c527334b35f3652ce0266f85cab"}, "downloads": -1, "filename": "cubicweb-mediaplayer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a3708e543b60be4aed38c8b247fa2e95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217688, "upload_time": "2014-03-07T15:34:11", "upload_time_iso_8601": "2014-03-07T15:34:11.722521Z", "url": "https://files.pythonhosted.org/packages/82/4c/71f64891f9f904789b25e986da4f5db03f678f343c18f812bf5d30151b25/cubicweb-mediaplayer-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e2954be1182bfba004594897f50bb13e", "sha256": "f4985baaf7b381503a79a937f063a60e592fcac79e9b354b18bf6540ce13168e"}, "downloads": -1, "filename": "cubicweb-mediaplayer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e2954be1182bfba004594897f50bb13e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217550, "upload_time": "2014-03-17T12:34:46", "upload_time_iso_8601": "2014-03-17T12:34:46.982133Z", "url": "https://files.pythonhosted.org/packages/1e/ee/0e8814aa717e17bc5dc66d1524a4d6076e0ca46130ead62515f52f483067/cubicweb-mediaplayer-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8f8618fdb176552ea23d2ca45621883a", "sha256": "bff33880a4f0e1e907f0ee0a63f67a9161b0940285f86941c41f899da7e55a5f"}, "downloads": -1, "filename": "cubicweb-mediaplayer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8f8618fdb176552ea23d2ca45621883a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236178, "upload_time": "2014-09-01T16:04:39", "upload_time_iso_8601": "2014-09-01T16:04:39.042344Z", "url": "https://files.pythonhosted.org/packages/7d/90/d8b5b0fcc96d39d0153b23b059af8456111b1c451bbf03ff823fb02f4fe3/cubicweb-mediaplayer-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "1b0df9e296713f13bf9dada4e4a9f5d3", "sha256": "d52ae8c617edf0a3aa1d4e1a29e9a4d065651ea66c965525f0191b7c566485d1"}, "downloads": -1, "filename": "cubicweb-mediaplayer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "1b0df9e296713f13bf9dada4e4a9f5d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236187, "upload_time": "2014-10-03T10:07:42", "upload_time_iso_8601": "2014-10-03T10:07:42.128618Z", "url": "https://files.pythonhosted.org/packages/e4/43/5166eec79d20e568463d42cb376e574b2b9fc13c554c5e991541d73b377a/cubicweb-mediaplayer-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a2ab8cf1a6d7f21000f5337ce9beaf57", "sha256": "0e704439aec6a237aa9e5fdc2a7bd11d6d1b862e0b8e2707ff29523ec3fe4a7f"}, "downloads": -1, "filename": "cubicweb-mediaplayer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a2ab8cf1a6d7f21000f5337ce9beaf57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 239943, "upload_time": "2016-04-14T12:55:12", "upload_time_iso_8601": "2016-04-14T12:55:12.055897Z", "url": "https://files.pythonhosted.org/packages/8c/a6/cee6579597d1f31bb8806fed93ff6e272c8aae2de09beb9df9f2caf3433f/cubicweb-mediaplayer-0.2.0.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "7401c87eadf23c2661ae728a5af53cc9", "sha256": "b2e0ccc85e43d597966e72b263dc6137d8e8d7a38718d037a03194847a1149e1"}, "downloads": -1, "filename": "cubicweb-mediaplayer-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7401c87eadf23c2661ae728a5af53cc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224557, "upload_time": "2016-12-22T12:13:37", "upload_time_iso_8601": "2016-12-22T12:13:37.845726Z", "url": "https://files.pythonhosted.org/packages/46/06/59d4b76bce2e524f1056275f86631e58cc603fcb083f332e04ca58f190b3/cubicweb-mediaplayer-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7401c87eadf23c2661ae728a5af53cc9", "sha256": "b2e0ccc85e43d597966e72b263dc6137d8e8d7a38718d037a03194847a1149e1"}, "downloads": -1, "filename": "cubicweb-mediaplayer-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7401c87eadf23c2661ae728a5af53cc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224557, "upload_time": "2016-12-22T12:13:37", "upload_time_iso_8601": "2016-12-22T12:13:37.845726Z", "url": "https://files.pythonhosted.org/packages/46/06/59d4b76bce2e524f1056275f86631e58cc603fcb083f332e04ca58f190b3/cubicweb-mediaplayer-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:29 2020"}