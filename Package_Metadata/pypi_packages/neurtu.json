{"info": {"author": "Roman Yurchak", "author_email": "roman.yurchak@symerio.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development"], "description": "neurtu\n======\n\n|pypi| |rdfd|\n\n|travis| |appveyor| |codecov|\n\nSimple performance measurement tool\n\nneurtu is a Python package providing a common interface for multi-metric benchmarks\n(including time and memory measurements). It can can be used to estimate time\nand space complexity of algorithms, while pandas integration\nallows quick analysis and visualization of the results.\n\n*neurtu* means \"to measure / evaluate\" in Basque language.\n\nSee the `documentation <http://neurtu.readthedocs.io/>`_ for more details.\n\nInstallation\n------------\n\nneurtu requires Python 2.7 or 3.4+, it can be installed with,\n\n.. code::\n\n   pip install neurtu\n\n`pandas >=0.20 <https://pandas.pydata.org/pandas-docs/stable/install.html#installation>`_ is an optional (but highly recommended) dependency.\n\n\nQuickstart\n----------\n\nTo illustrate neurtu usage, will will benchmark array sorting in numpy. First, we will\ngenerator of cases,\n\n.. code:: python\n\n    import numpy as np\n    import neurtu\n\n    def cases()\n        rng = np.random.RandomState(42)\n\n        for N in [1000, 10000, 100000]:\n            X = rng.rand(N)\n            tags = {'N' : N}\n            yield neurtu.delayed(X, tags=tags).sort()\n\nthat yields a sequence of delayed calculations, each tagged with the parameters defining individual runs.\n\nWe can evaluate the run time with,\n\n.. code:: python\n\n    >>> df = neurtu.timeit(cases())\n    >>> print(df)\n            wall_time\n    N\n    1000     0.000014\n    10000    0.000134\n    100000   0.001474\n\nwhich will internally use ``timeit`` module with a sufficient number of evaluation to work around the timer precision\nlimitations (similarly to IPython's ``%timeit``). It will also display a progress bar for long running benchmarks,\nand return the results as a ``pandas.DataFrame`` (if pandas is installed).\n\nBy default, all evaluations are run with ``repeat=1``. If more statistical confidence is required, this value can\nbe increased,\n\n.. code:: python\n\n    >>> neurtu.timeit(cases(), repeat=3)\n           wall_time\n                mean       max       std\n    N\n    1000    0.000012  0.000014  0.000002\n    10000   0.000116  0.000149  0.000029\n    100000  0.001323  0.001714  0.000339\n\nIn this case we will get a frame with a\n`pandas.MultiIndex <https://pandas.pydata.org/pandas-docs/stable/advanced.html#multiindex-advanced-indexing>`_ for\ncolumns, where the first level represents the metric name (``wall_time``) and the second -- the aggregation method.\nBy default ``neurtu.timeit`` is called with ``aggregate=['mean', 'max', 'std']`` methods, as supported \nby the `pandas aggregation API <https://pandas.pydata.org/pandas-docs/version/0.22.0/groupby.html#aggregation>`_. To disable,\naggregation and obtains timings for individual runs, use ``aggregate=False``.\nSee `neurtu.timeit documentation <https://neurtu.readthedocs.io/generated/neurtu.timeit.html>`_ for more details.\n\nTo evaluate the peak memory usage, one can use the ``neurtu.memit`` function with the same API,\n\n.. code:: python\n\n    >>> neurtu.memit(cases(), repeat=3)\n            peak_memory\n                   mean  max  std\n    N\n    10000           0.0  0.0  0.0\n    100000          0.0  0.0  0.0\n    1000000         0.0  0.0  0.0\n\nMore generally ``neurtu.Benchmark`` supports a wide number of evaluation metrics,\n\n.. code:: python\n\n    >>> bench = neurtu.Benchmark(wall_time=True, cpu_time=True, peak_memory=True)\n    >>> bench(cases())\n             cpu_time  peak_memory  wall_time\n    N\n    10000    0.000100          0.0   0.000142\n    100000   0.001149          0.0   0.001680\n    1000000  0.013677          0.0   0.018347\n\nincluding `psutil process metrics <https://psutil.readthedocs.io/en/latest/#psutil.Process>`_.\n\nFor more information see the `documentation <http://neurtu.readthedocs.io/>`_ and \n`examples <http://neurtu.readthedocs.io/examples/index.html>`_.\n\nLicense\n-------\n\nneurtu is released under the 3-clause BSD license.\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/neurtu.svg\n    :target: https://pypi.python.org/pypi/neurtu\n\n.. |rdfd| image:: https://readthedocs.org/projects/neurtu/badge/?version=latest\n    :target: http://neurtu.readthedocs.io/\n\n.. |travis| image:: https://travis-ci.org/symerio/neurtu.svg?branch=master\n    :target: https://travis-ci.org/symerio/neurtu\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/2i1dx8fi3bue4qwl?svg=true\n    :target: https://ci.appveyor.com/project/rth/neurtu/branch/master\n\n.. |codecov| image:: https://codecov.io/gh/symerio/neurtu/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/symerio/neurtu\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/symerio/neurtu", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "neurtu", "package_url": "https://pypi.org/project/neurtu/", "platform": "", "project_url": "https://pypi.org/project/neurtu/", "project_urls": {"Homepage": "https://github.com/symerio/neurtu"}, "release_url": "https://pypi.org/project/neurtu/0.3.0/", "requires_dist": ["memory-profiler", "psutil", "tqdm"], "requires_python": "", "summary": "A simple benchmarking tool", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/neurtu\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2f801465c41a0689c406abbdbfc878ccaeeed2d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e65757274752e737667\"></a> <a href=\"http://neurtu.readthedocs.io/\" rel=\"nofollow\"><img alt=\"rdfd\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6975d6d300ff91f9b0575be5c3ee5c97ae5db6e3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6e65757274752f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><a href=\"https://travis-ci.org/symerio/neurtu\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f4f315b14fd206920d216fe9282cb66d2d8670f/68747470733a2f2f7472617669732d63692e6f72672f73796d6572696f2f6e65757274752e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://ci.appveyor.com/project/rth/neurtu/branch/master\" rel=\"nofollow\"><img alt=\"appveyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/031481c8d8f0d4762d4a464d6d7d9810df993c01/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3269316478386669336275653471776c3f7376673d74727565\"></a> <a href=\"https://codecov.io/gh/symerio/neurtu\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9492193466122d802eb32f2c097e99a84d095c72/68747470733a2f2f636f6465636f762e696f2f67682f73796d6572696f2f6e65757274752f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Simple performance measurement tool</p>\n<p>neurtu is a Python package providing a common interface for multi-metric benchmarks\n(including time and memory measurements). It can can be used to estimate time\nand space complexity of algorithms, while pandas integration\nallows quick analysis and visualization of the results.</p>\n<p><em>neurtu</em> means \u201cto measure / evaluate\u201d in Basque language.</p>\n<p>See the <a href=\"http://neurtu.readthedocs.io/\" rel=\"nofollow\">documentation</a> for more details.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>neurtu requires Python 2.7 or 3.4+, it can be installed with,</p>\n<pre>pip install neurtu\n</pre>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/install.html#installation\" rel=\"nofollow\">pandas &gt;=0.20</a> is an optional (but highly recommended) dependency.</p>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>To illustrate neurtu usage, will will benchmark array sorting in numpy. First, we will\ngenerator of cases,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">neurtu</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cases</span><span class=\"p\">()</span>\n    <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">RandomState</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">N</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">100000</span><span class=\"p\">]:</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span>\n        <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'N'</span> <span class=\"p\">:</span> <span class=\"n\">N</span><span class=\"p\">}</span>\n        <span class=\"k\">yield</span> <span class=\"n\">neurtu</span><span class=\"o\">.</span><span class=\"n\">delayed</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tags</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n</pre>\n<p>that yields a sequence of delayed calculations, each tagged with the parameters defining individual runs.</p>\n<p>We can evaluate the run time with,</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">neurtu</span><span class=\"o\">.</span><span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n        <span class=\"n\">wall_time</span>\n<span class=\"n\">N</span>\n<span class=\"mi\">1000</span>     <span class=\"mf\">0.000014</span>\n<span class=\"mi\">10000</span>    <span class=\"mf\">0.000134</span>\n<span class=\"mi\">100000</span>   <span class=\"mf\">0.001474</span>\n</pre>\n<p>which will internally use <tt>timeit</tt> module with a sufficient number of evaluation to work around the timer precision\nlimitations (similarly to IPython\u2019s <tt>%timeit</tt>). It will also display a progress bar for long running benchmarks,\nand return the results as a <tt>pandas.DataFrame</tt> (if pandas is installed).</p>\n<p>By default, all evaluations are run with <tt>repeat=1</tt>. If more statistical confidence is required, this value can\nbe increased,</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">neurtu</span><span class=\"o\">.</span><span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">(),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n       <span class=\"n\">wall_time</span>\n            <span class=\"n\">mean</span>       <span class=\"nb\">max</span>       <span class=\"n\">std</span>\n<span class=\"n\">N</span>\n<span class=\"mi\">1000</span>    <span class=\"mf\">0.000012</span>  <span class=\"mf\">0.000014</span>  <span class=\"mf\">0.000002</span>\n<span class=\"mi\">10000</span>   <span class=\"mf\">0.000116</span>  <span class=\"mf\">0.000149</span>  <span class=\"mf\">0.000029</span>\n<span class=\"mi\">100000</span>  <span class=\"mf\">0.001323</span>  <span class=\"mf\">0.001714</span>  <span class=\"mf\">0.000339</span>\n</pre>\n<p>In this case we will get a frame with a\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/advanced.html#multiindex-advanced-indexing\" rel=\"nofollow\">pandas.MultiIndex</a> for\ncolumns, where the first level represents the metric name (<tt>wall_time</tt>) and the second \u2013 the aggregation method.\nBy default <tt>neurtu.timeit</tt> is called with <tt><span class=\"pre\">aggregate=['mean',</span> 'max', 'std']</tt> methods, as supported\nby the <a href=\"https://pandas.pydata.org/pandas-docs/version/0.22.0/groupby.html#aggregation\" rel=\"nofollow\">pandas aggregation API</a>. To disable,\naggregation and obtains timings for individual runs, use <tt>aggregate=False</tt>.\nSee <a href=\"https://neurtu.readthedocs.io/generated/neurtu.timeit.html\" rel=\"nofollow\">neurtu.timeit documentation</a> for more details.</p>\n<p>To evaluate the peak memory usage, one can use the <tt>neurtu.memit</tt> function with the same API,</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">neurtu</span><span class=\"o\">.</span><span class=\"n\">memit</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">(),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">peak_memory</span>\n               <span class=\"n\">mean</span>  <span class=\"nb\">max</span>  <span class=\"n\">std</span>\n<span class=\"n\">N</span>\n<span class=\"mi\">10000</span>           <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>\n<span class=\"mi\">100000</span>          <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>\n<span class=\"mi\">1000000</span>         <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>  <span class=\"mf\">0.0</span>\n</pre>\n<p>More generally <tt>neurtu.Benchmark</tt> supports a wide number of evaluation metrics,</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bench</span> <span class=\"o\">=</span> <span class=\"n\">neurtu</span><span class=\"o\">.</span><span class=\"n\">Benchmark</span><span class=\"p\">(</span><span class=\"n\">wall_time</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cpu_time</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">peak_memory</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bench</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">())</span>\n         <span class=\"n\">cpu_time</span>  <span class=\"n\">peak_memory</span>  <span class=\"n\">wall_time</span>\n<span class=\"n\">N</span>\n<span class=\"mi\">10000</span>    <span class=\"mf\">0.000100</span>          <span class=\"mf\">0.0</span>   <span class=\"mf\">0.000142</span>\n<span class=\"mi\">100000</span>   <span class=\"mf\">0.001149</span>          <span class=\"mf\">0.0</span>   <span class=\"mf\">0.001680</span>\n<span class=\"mi\">1000000</span>  <span class=\"mf\">0.013677</span>          <span class=\"mf\">0.0</span>   <span class=\"mf\">0.018347</span>\n</pre>\n<p>including <a href=\"https://psutil.readthedocs.io/en/latest/#psutil.Process\" rel=\"nofollow\">psutil process metrics</a>.</p>\n<p>For more information see the <a href=\"http://neurtu.readthedocs.io/\" rel=\"nofollow\">documentation</a> and\n<a href=\"http://neurtu.readthedocs.io/examples/index.html\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>neurtu is released under the 3-clause BSD license.</p>\n</div>\n\n          </div>"}, "last_serial": 5564334, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d3876163604fd5fd6c4c4cf65ec1fe0f", "sha256": "55cb0de130a50752662a89cf35e83dc08ed4fd3717e945e1db6c43607f5c8232"}, "downloads": -1, "filename": "neurtu-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d3876163604fd5fd6c4c4cf65ec1fe0f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16684, "upload_time": "2018-03-04T18:06:45", "upload_time_iso_8601": "2018-03-04T18:06:45.593088Z", "url": "https://files.pythonhosted.org/packages/9c/d0/f4db334caad5a966617b1e8a72ae9815a54fd1d462fe43c12c9d64571ebe/neurtu-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6e69f629d6f1d7c0d027517d3da309b", "sha256": "e3f62d87b07d6f5f1fb1d1e0e5c2edd9015acf7448acd0ce7faee2068d02736e"}, "downloads": -1, "filename": "neurtu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a6e69f629d6f1d7c0d027517d3da309b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10864, "upload_time": "2018-03-04T18:06:46", "upload_time_iso_8601": "2018-03-04T18:06:46.977109Z", "url": "https://files.pythonhosted.org/packages/71/ed/059724f2cee5c248419fa22ca2d298e01e68f799210f2064ff5a79da8176/neurtu-0.1.0.tar.gz", "yanked": false}], "0.1a0": [{"comment_text": "", "digests": {"md5": "03915b78cf243f9985e897d1a235f5b1", "sha256": "6d60157cdbd28c8bae213215eec8264a04d13ee84de7faf36176269131792032"}, "downloads": -1, "filename": "neurtu-0.1a0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03915b78cf243f9985e897d1a235f5b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11468, "upload_time": "2018-02-19T12:45:57", "upload_time_iso_8601": "2018-02-19T12:45:57.032233Z", "url": "https://files.pythonhosted.org/packages/42/89/ee9f1b712421b5fd43dcea3cbaba1666b73f71c57ce030f88ffef6fe822f/neurtu-0.1a0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b00a7417826069e576dd1199dd2d6296", "sha256": "f40f7a04f8cce9a000c660013cfc5dce8f9f6277ebfbbfe8ea245a9a097029f1"}, "downloads": -1, "filename": "neurtu-0.1a0.tar.gz", "has_sig": false, "md5_digest": "b00a7417826069e576dd1199dd2d6296", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7699, "upload_time": "2018-02-19T12:45:59", "upload_time_iso_8601": "2018-02-19T12:45:59.058409Z", "url": "https://files.pythonhosted.org/packages/8d/b3/297938d0f04c7f5377dee7597ef6c582c112120e1e300a45dfbf2ac7aa09/neurtu-0.1a0.tar.gz", "yanked": false}], "0.1a1": [{"comment_text": "", "digests": {"md5": "dd85b7551468ad2a076e71e5f33a203c", "sha256": "2bbb6e7b3f568693dadf547bcadaf4d9198e60c2fde2f0fe4439dc46a4177b07"}, "downloads": -1, "filename": "neurtu-0.1a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dd85b7551468ad2a076e71e5f33a203c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11814, "upload_time": "2018-02-20T00:05:52", "upload_time_iso_8601": "2018-02-20T00:05:52.228863Z", "url": "https://files.pythonhosted.org/packages/bc/a5/89f50c4bdfdd2d886d4184d739f4c7638d020b5c3dfb1d27251d491ebdd4/neurtu-0.1a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "988f82c1e762a11f5364e66cf6b79181", "sha256": "d99b3797cd73411f4e4e8c88036478ee8180079daa7ae293c0e753b0cdcae5e5"}, "downloads": -1, "filename": "neurtu-0.1a1.tar.gz", "has_sig": false, "md5_digest": "988f82c1e762a11f5364e66cf6b79181", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7953, "upload_time": "2018-02-20T00:05:54", "upload_time_iso_8601": "2018-02-20T00:05:54.186659Z", "url": "https://files.pythonhosted.org/packages/ee/66/f46132c02db9e90172cd8fa9c5197f407543509bea62003a12765ea7e685/neurtu-0.1a1.tar.gz", "yanked": false}], "0.1a2": [{"comment_text": "", "digests": {"md5": "77991f2ac24c103c85f33261c02cb297", "sha256": "6547737e160945034d7a1bcf3b0a8fb603c5e96efeabbc943c32bcb203c35deb"}, "downloads": -1, "filename": "neurtu-0.1a2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "77991f2ac24c103c85f33261c02cb297", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14961, "upload_time": "2018-02-27T23:38:53", "upload_time_iso_8601": "2018-02-27T23:38:53.776978Z", "url": "https://files.pythonhosted.org/packages/0d/1c/08e7f025aab9997aa4015d1e10f231b4e78a204966479edf2a83cf22de01/neurtu-0.1a2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47e3c83f9345c9851feee552c8b44b11", "sha256": "f38ec73d5dfbf254311488fda0da3864aab54c0a693b9c7bfd0f5a6842733683"}, "downloads": -1, "filename": "neurtu-0.1a2.tar.gz", "has_sig": false, "md5_digest": "47e3c83f9345c9851feee552c8b44b11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9856, "upload_time": "2018-02-27T23:38:55", "upload_time_iso_8601": "2018-02-27T23:38:55.452975Z", "url": "https://files.pythonhosted.org/packages/5b/d6/2db4608d2a2bad6fa2093129965d27e58ee3f200dd3c5a9b46a99468246b/neurtu-0.1a2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "72cd402b3496e558cf0dd63e24f69c1f", "sha256": "5a357a9447472d26f32dba4d2249cef174610c9b35a6576e8f23ab2ce797112b"}, "downloads": -1, "filename": "neurtu-0.2.0.tar.gz", "has_sig": false, "md5_digest": "72cd402b3496e558cf0dd63e24f69c1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22086, "upload_time": "2018-08-31T10:15:18", "upload_time_iso_8601": "2018-08-31T10:15:18.749071Z", "url": "https://files.pythonhosted.org/packages/1e/7c/e82609ec5a5972d50f905471e3760912c82006692e63eb3590f38b227f38/neurtu-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e9ff87047fb06d913c620ef797ac0257", "sha256": "033aab806c54cba4accb0c8b25b9b8584a8ccd3c65cadf94f4e668dda99008f9"}, "downloads": -1, "filename": "neurtu-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e9ff87047fb06d913c620ef797ac0257", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14871, "upload_time": "2019-07-21T19:40:22", "upload_time_iso_8601": "2019-07-21T19:40:22.811015Z", "url": "https://files.pythonhosted.org/packages/4b/e3/07f0e7b207798e45b553763f7b5d7beeb2e9965888bf3638dd5c627958ad/neurtu-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21aedb1d1a51d941097ad3ce1638eb5b", "sha256": "260a3f3884a09132f43a89613e670e9dc4ab4f32e9afa4a57bbc836bd61615b9"}, "downloads": -1, "filename": "neurtu-0.3.0.tar.gz", "has_sig": false, "md5_digest": "21aedb1d1a51d941097ad3ce1638eb5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20615, "upload_time": "2019-07-21T19:41:03", "upload_time_iso_8601": "2019-07-21T19:41:03.516898Z", "url": "https://files.pythonhosted.org/packages/62/2f/30541acbf0a9e76552ca56c62696454ad0d189be1fb0577dca0b1f126015/neurtu-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9ff87047fb06d913c620ef797ac0257", "sha256": "033aab806c54cba4accb0c8b25b9b8584a8ccd3c65cadf94f4e668dda99008f9"}, "downloads": -1, "filename": "neurtu-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e9ff87047fb06d913c620ef797ac0257", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14871, "upload_time": "2019-07-21T19:40:22", "upload_time_iso_8601": "2019-07-21T19:40:22.811015Z", "url": "https://files.pythonhosted.org/packages/4b/e3/07f0e7b207798e45b553763f7b5d7beeb2e9965888bf3638dd5c627958ad/neurtu-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21aedb1d1a51d941097ad3ce1638eb5b", "sha256": "260a3f3884a09132f43a89613e670e9dc4ab4f32e9afa4a57bbc836bd61615b9"}, "downloads": -1, "filename": "neurtu-0.3.0.tar.gz", "has_sig": false, "md5_digest": "21aedb1d1a51d941097ad3ce1638eb5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20615, "upload_time": "2019-07-21T19:41:03", "upload_time_iso_8601": "2019-07-21T19:41:03.516898Z", "url": "https://files.pythonhosted.org/packages/62/2f/30541acbf0a9e76552ca56c62696454ad0d189be1fb0577dca0b1f126015/neurtu-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:44 2020"}