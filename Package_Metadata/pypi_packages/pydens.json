{"info": {"author": "Data Analysis Center", "author_email": "akoriagin@nes.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "[![License](https://img.shields.io/github/license/analysiscenter/pydens.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n[![Python](https://img.shields.io/badge/python-3.5-blue.svg)](https://python.org)\n[![TensorFlow](https://img.shields.io/badge/TensorFlow-1.14-orange.svg)](https://tensorflow.org)\n[![Run Status](https://api.shippable.com/projects/5d2deaa02900de000646cdf7/badge?branch=master)](https://app.shippable.com/github/analysiscenter/pydens)\n\n# PyDEns\n\n**PyDEns** is a framework for solving Ordinary and Partial Differential Equations (ODEs & PDEs) using neural networks. With **PyDEns** one can solve\n - PDEs & ODEs from a large family including [heat-equation](https://en.wikipedia.org/wiki/Heat_equation), [poisson equation](https://en.wikipedia.org/wiki/Poisson%27s_equation) and [wave-equation](https://en.wikipedia.org/wiki/Wave_equation)\n - parametric families of PDEs\n - PDEs with trainable coefficients.\n\nThis page outlines main capabilities of **PyDEns**. To get an in-depth understanding we suggest you to also read [the tutorial](https://github.com/analysiscenter/pydens/blob/master/tutorials/PDE_solving.ipynb).\n\n## Getting started with **PyDEns**: solving common PDEs\nLet's solve poisson equation\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/analysiscenter/pydens/master/imgs/poisson_eq.png?invert_in_darkmode\" align=middle width=621.3306pt height=38.973825pt/>\n</p>\n\nusing simple feed-forward neural network with `tahn`-activations. The first step is to add a grammar of *tokens* - expressions used for writing down differential equations - to the current namespace:\n\n```python\nfrom pydens import Solver, NumpySampler, add_tokens\nimport numpy as np\n\nadd_tokens()\n# we've now got functions like sin, cos, D in our namespace. More on that later!\n```\n\nYou can now set up a **PyDEns**-model for solving the task at hand using *configuration dictionary*. Note the use of differentiation token `D` and `sin`-token:\n\n```python\npde = {'n_dims': 2,\n       'form': lambda u, x, y: D(D(u, x), x) + D(D(u, y), y) - 5 * sin(np.pi * (x + y)),\n       'boundary_condition': 1}\n\nbody = {'layout': 'fa fa fa f',\n        'units': [15, 25, 15, 1],\n        'activation': [tf.nn.tanh, tf.nn.tanh, tf.nn.tanh]}\n\nconfig = {'body': body,\n          'pde': pde}\n\nus = NumpySampler('uniform', dim=2) # procedure for sampling points from domain\n```\n\nand run the optimization procedure\n\n```python\ndg = Solver(config)\ndg.fit(batch_size=100, sampler=us, n_iters=1500)\n```\nin a fraction of second we've got a mesh-free approximation of the solution on **[0, 1]X[0, 1]**-square:\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/analysiscenter/pydens/master/imgs/poisson_sol.png?invert_in_darkmode\" align=middle height=350.973825pt/>\n</p>\n\n## Going deeper into **PyDEns**-capabilities\n**PyDEns** allows to do much more than just solve common PDEs: it also deals with (i) parametric families of PDEs and (ii) PDEs with trainable coefficients.\n\n### Solving parametric families of PDEs\nConsider a *family* of ordinary differential equations\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/analysiscenter/pydens/master/imgs/sinus_eq.png?invert_in_darkmode\" align=middle height=40.973825pt/>\n</p>\n\nClearly, the solution is a **sin** wave with a phase parametrized by \u03f5:\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/analysiscenter/pydens/master/imgs/sinus_sol_expr.png?invert_in_darkmode\" align=middle height=18.973825pt/>\n</p>\n\nSolving this problem is just as easy as solving common PDEs. You only need to introduce parameter in the equation, using token `P`:\n\n```python\npde = {'n_dims': 1,\n       'form': lambda u, t, e: D(u, t) - P(e) * np.pi * cos(P(e) * np.pi * t),\n       'initial_condition': 1}\n\nconfig = {'pde': pde}\n# One for argument, one for parameter\ns = NumpySampler('uniform') & NumpySampler('uniform', low=1, high=5)\n\ndg = Solver(config)\ndg.fit(batch_size=1000, sampler=s, n_iters=5000)\n# solving the whole family takes no more than a couple of seconds!\n```\n\nCheck out the result:\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/analysiscenter/pydens/master/imgs/sinus_sol.gif?invert_in_darkmode\" align=middle height=250.973825pt/>\n</p>\n\n### Solving PDEs with trainable coefficients\n\nWith **PyDEns** things can get even more interesting! Assume that the *initial state of the system is unknown and yet to be determined*:\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/analysiscenter/pydens/master/imgs/sinus_eq_trainable.png?invert_in_darkmode\" align=middle height=40.973825pt/>\n</p>\n\nOf course, without additional information, [the problem is undefined](https://en.wikipedia.org/wiki/Initial_value_problem). To make things better, let's fix the state of the system at some other point:\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/analysiscenter/pydens/master/imgs/sinus_eq_middle_fix.png?invert_in_darkmode\" align=middle height=18.973825pt/>\n</p>\n\nSetting this problem requires a [slightly more complex configuring](https://github.com/analysiscenter/pydens/blob/master/tutorials/PDE_solving.ipynb). Note the use of `V`-token, that stands for trainable variable, in the initial condition of the problem. Also pay attention to `train_steps`-key of the `config`, where *two train steps* are configured: one for better solving the equation and the other for satisfying the additional constraint:\n\n```python\npde = {'n_dims': 1,\n       'form': lambda u, t: D(u, t) - 2 * np.pi * cos(2 * np.pi * t),\n       'initial_condition': lambda: V(3.0)}\n\nconfig = {'pde': pde,\n          'track': {'u05': lambda u, t: u - 2},\n          'train_steps': {'initial_condition_step': {'scope': 'addendums',\n                                                     'loss': {'name': 'mse', 'predictions': 'u05'}},\n                          'equation_step': {'scope': '-addendums'}}}\n\ns1 = NumpySampler('uniform')\ns2 = ConstantSampler(0.5)\n```\n\nModel-fitting comes in two parts now: (i) solving the equation and (ii) adjusting initial condition to satisfy the additional constraint:\n\n```python\ndg.fit(batch_size=150, sampler=s1, n_iters=2000, train_mode='equation_step')\ndg.fit(batch_size=150, sampler=s2, n_iters=2000, train_mode='initial_condition_step')\n```\n\nCheck out the results:\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/analysiscenter/pydens/master/imgs/converging_sol.gif?invert_in_darkmode\" align=middle height=250.973825pt/>\n</p>\n\n## Installation\n\nFirst of all, you have to manually install [tensorflow](https://www.tensorflow.org/install/pip),\nas you might need a certain version or a specific build for CPU / GPU.\n\n### Stable python package\n\nWith modern [pipenv](https://docs.pipenv.org/)\n```\npipenv install pydens\n```\n\nWith old-fashioned [pip](https://pip.pypa.io/en/stable/)\n```\npip3 install pydens\n```\n\n### Development version\n\n```\npipenv install git+https://github.com/analysiscenter/pydens.git\n```\n\n```\npip3 install git+https://github.com/analysiscenter/pydens.git\n```\n\n### Installation as a project repository:\n\nDo not forget to use the flag ``--recursive`` to make sure that ``BatchFlow`` submodule is also cloned.\n\n```\ngit clone --recursive https://github.com/analysiscenter/pydens.git\n```\n\nIn this case you need to manually install the dependencies.\n\n\n## Citing PyDEns\n\nPlease cite **PyDEns** if it helps your research.\n\n```\nRoman Khudorozhkov, Sergey Tsimfer, Alexander Koryagin. PyDEns framework for solving differential equations with deep learning. 2019.\n```\n\n```\n@misc{pydens_2019,\n  author       = {Khudorozhkov R. and Tsimfer S. and Koryagin. A.},\n  title        = {PyDEns framework for solving differential equations with deep learning},\n  year         = 2019\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/analysiscenter/pydens.git", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "pydens", "package_url": "https://pypi.org/project/pydens/", "platform": "any", "project_url": "https://pypi.org/project/pydens/", "project_urls": {"Homepage": "https://github.com/analysiscenter/pydens.git"}, "release_url": "https://pypi.org/project/pydens/0.1.2/", "requires_dist": ["numpy (>=1.10)", "dill (>=0.2.7)", "tqdm (>=4.19.7)", "scipy (>=0.19.1)", "scikit-image (>=0.13.1)", "numba (>=0.42)"], "requires_python": "", "summary": "Framework for solving differential equations with deep learning", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/329c3c95529813754cef2945951fa0d4adf76128/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f616e616c7973697363656e7465722f707964656e732e737667\"></a>\n<a href=\"https://python.org\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8963091336cb0312d5fefe404229cb9ec0fb8b25/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e352d626c75652e737667\"></a>\n<a href=\"https://tensorflow.org\" rel=\"nofollow\"><img alt=\"TensorFlow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ac555e5020ba12a12316f80dd3a90b079158199/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f54656e736f72466c6f772d312e31342d6f72616e67652e737667\"></a>\n<a href=\"https://app.shippable.com/github/analysiscenter/pydens\" rel=\"nofollow\"><img alt=\"Run Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfd83353393e6296f23f47e1f25886af1282ce16/68747470733a2f2f6170692e736869707061626c652e636f6d2f70726f6a656374732f3564326465616130323930306465303030363436636466372f62616467653f6272616e63683d6d6173746572\"></a></p>\n<h1>PyDEns</h1>\n<p><strong>PyDEns</strong> is a framework for solving Ordinary and Partial Differential Equations (ODEs &amp; PDEs) using neural networks. With <strong>PyDEns</strong> one can solve</p>\n<ul>\n<li>PDEs &amp; ODEs from a large family including <a href=\"https://en.wikipedia.org/wiki/Heat_equation\" rel=\"nofollow\">heat-equation</a>, <a href=\"https://en.wikipedia.org/wiki/Poisson%27s_equation\" rel=\"nofollow\">poisson equation</a> and <a href=\"https://en.wikipedia.org/wiki/Wave_equation\" rel=\"nofollow\">wave-equation</a></li>\n<li>parametric families of PDEs</li>\n<li>PDEs with trainable coefficients.</li>\n</ul>\n<p>This page outlines main capabilities of <strong>PyDEns</strong>. To get an in-depth understanding we suggest you to also read <a href=\"https://github.com/analysiscenter/pydens/blob/master/tutorials/PDE_solving.ipynb\" rel=\"nofollow\">the tutorial</a>.</p>\n<h2>Getting started with <strong>PyDEns</strong>: solving common PDEs</h2>\n<p>Let's solve poisson equation</p>\n<p align=\"center\">\n<img align=\"middle\" height=\"38.973825pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e98c52d1709dfab383531fc1d51777ae4feaca22/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616e616c7973697363656e7465722f707964656e732f6d61737465722f696d67732f706f6973736f6e5f65712e706e673f696e766572745f696e5f6461726b6d6f6465\" width=\"621.3306pt\">\n</p>\n<p>using simple feed-forward neural network with <code>tahn</code>-activations. The first step is to add a grammar of <em>tokens</em> - expressions used for writing down differential equations - to the current namespace:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydens</span> <span class=\"kn\">import</span> <span class=\"n\">Solver</span><span class=\"p\">,</span> <span class=\"n\">NumpySampler</span><span class=\"p\">,</span> <span class=\"n\">add_tokens</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">add_tokens</span><span class=\"p\">()</span>\n<span class=\"c1\"># we've now got functions like sin, cos, D in our namespace. More on that later!</span>\n</pre>\n<p>You can now set up a <strong>PyDEns</strong>-model for solving the task at hand using <em>configuration dictionary</em>. Note the use of differentiation token <code>D</code> and <code>sin</code>-token:</p>\n<pre><span class=\"n\">pde</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'n_dims'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n       <span class=\"s1\">'form'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)),</span>\n       <span class=\"s1\">'boundary_condition'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n\n<span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'layout'</span><span class=\"p\">:</span> <span class=\"s1\">'fa fa fa f'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'units'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"s1\">'activation'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">tanh</span><span class=\"p\">,</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">tanh</span><span class=\"p\">,</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">tanh</span><span class=\"p\">]}</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"n\">body</span><span class=\"p\">,</span>\n          <span class=\"s1\">'pde'</span><span class=\"p\">:</span> <span class=\"n\">pde</span><span class=\"p\">}</span>\n\n<span class=\"n\">us</span> <span class=\"o\">=</span> <span class=\"n\">NumpySampler</span><span class=\"p\">(</span><span class=\"s1\">'uniform'</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># procedure for sampling points from domain</span>\n</pre>\n<p>and run the optimization procedure</p>\n<pre><span class=\"n\">dg</span> <span class=\"o\">=</span> <span class=\"n\">Solver</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"n\">dg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">us</span><span class=\"p\">,</span> <span class=\"n\">n_iters</span><span class=\"o\">=</span><span class=\"mi\">1500</span><span class=\"p\">)</span>\n</pre>\n<p>in a fraction of second we've got a mesh-free approximation of the solution on <strong>[0, 1]X[0, 1]</strong>-square:</p>\n<p align=\"center\">\n<img align=\"middle\" height=\"350.973825pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fd33472389e3047c7d639d39fdd0f26a219e8e1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616e616c7973697363656e7465722f707964656e732f6d61737465722f696d67732f706f6973736f6e5f736f6c2e706e673f696e766572745f696e5f6461726b6d6f6465\">\n</p>\n<h2>Going deeper into <strong>PyDEns</strong>-capabilities</h2>\n<p><strong>PyDEns</strong> allows to do much more than just solve common PDEs: it also deals with (i) parametric families of PDEs and (ii) PDEs with trainable coefficients.</p>\n<h3>Solving parametric families of PDEs</h3>\n<p>Consider a <em>family</em> of ordinary differential equations</p>\n<p align=\"center\">\n<img align=\"middle\" height=\"40.973825pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a46666defbbef6672becfaef5585418ee8b0233/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616e616c7973697363656e7465722f707964656e732f6d61737465722f696d67732f73696e75735f65712e706e673f696e766572745f696e5f6461726b6d6f6465\">\n</p>\n<p>Clearly, the solution is a <strong>sin</strong> wave with a phase parametrized by \u03f5:</p>\n<p align=\"center\">\n<img align=\"middle\" height=\"18.973825pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d707835ac6007637de746c8e14d736ef7c5e59e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616e616c7973697363656e7465722f707964656e732f6d61737465722f696d67732f73696e75735f736f6c5f657870722e706e673f696e766572745f696e5f6461726b6d6f6465\">\n</p>\n<p>Solving this problem is just as easy as solving common PDEs. You only need to introduce parameter in the equation, using token <code>P</code>:</p>\n<pre><span class=\"n\">pde</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'n_dims'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n       <span class=\"s1\">'form'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"s1\">'initial_condition'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'pde'</span><span class=\"p\">:</span> <span class=\"n\">pde</span><span class=\"p\">}</span>\n<span class=\"c1\"># One for argument, one for parameter</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">NumpySampler</span><span class=\"p\">(</span><span class=\"s1\">'uniform'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">NumpySampler</span><span class=\"p\">(</span><span class=\"s1\">'uniform'</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">dg</span> <span class=\"o\">=</span> <span class=\"n\">Solver</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"n\">dg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n_iters</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"c1\"># solving the whole family takes no more than a couple of seconds!</span>\n</pre>\n<p>Check out the result:</p>\n<p align=\"center\">\n<img align=\"middle\" height=\"250.973825pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65c4fd7504b7594d0cbce4e18e18b6da13c20e6e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616e616c7973697363656e7465722f707964656e732f6d61737465722f696d67732f73696e75735f736f6c2e6769663f696e766572745f696e5f6461726b6d6f6465\">\n</p>\n<h3>Solving PDEs with trainable coefficients</h3>\n<p>With <strong>PyDEns</strong> things can get even more interesting! Assume that the <em>initial state of the system is unknown and yet to be determined</em>:</p>\n<p align=\"center\">\n<img align=\"middle\" height=\"40.973825pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fed15f4d04701ba52a4f211f1de3f1ff897737e6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616e616c7973697363656e7465722f707964656e732f6d61737465722f696d67732f73696e75735f65715f747261696e61626c652e706e673f696e766572745f696e5f6461726b6d6f6465\">\n</p>\n<p>Of course, without additional information, <a href=\"https://en.wikipedia.org/wiki/Initial_value_problem\" rel=\"nofollow\">the problem is undefined</a>. To make things better, let's fix the state of the system at some other point:</p>\n<p align=\"center\">\n<img align=\"middle\" height=\"18.973825pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d35d0e023e0e6a87b448b82e1a0f420c4db65898/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616e616c7973697363656e7465722f707964656e732f6d61737465722f696d67732f73696e75735f65715f6d6964646c655f6669782e706e673f696e766572745f696e5f6461726b6d6f6465\">\n</p>\n<p>Setting this problem requires a <a href=\"https://github.com/analysiscenter/pydens/blob/master/tutorials/PDE_solving.ipynb\" rel=\"nofollow\">slightly more complex configuring</a>. Note the use of <code>V</code>-token, that stands for trainable variable, in the initial condition of the problem. Also pay attention to <code>train_steps</code>-key of the <code>config</code>, where <em>two train steps</em> are configured: one for better solving the equation and the other for satisfying the additional constraint:</p>\n<pre><span class=\"n\">pde</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'n_dims'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n       <span class=\"s1\">'form'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"s1\">'initial_condition'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">)}</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'pde'</span><span class=\"p\">:</span> <span class=\"n\">pde</span><span class=\"p\">,</span>\n          <span class=\"s1\">'track'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'u05'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"n\">u</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n          <span class=\"s1\">'train_steps'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'initial_condition_step'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'scope'</span><span class=\"p\">:</span> <span class=\"s1\">'addendums'</span><span class=\"p\">,</span>\n                                                     <span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'mse'</span><span class=\"p\">,</span> <span class=\"s1\">'predictions'</span><span class=\"p\">:</span> <span class=\"s1\">'u05'</span><span class=\"p\">}},</span>\n                          <span class=\"s1\">'equation_step'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'scope'</span><span class=\"p\">:</span> <span class=\"s1\">'-addendums'</span><span class=\"p\">}}}</span>\n\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">NumpySampler</span><span class=\"p\">(</span><span class=\"s1\">'uniform'</span><span class=\"p\">)</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">ConstantSampler</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</pre>\n<p>Model-fitting comes in two parts now: (i) solving the equation and (ii) adjusting initial condition to satisfy the additional constraint:</p>\n<pre><span class=\"n\">dg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">n_iters</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"n\">train_mode</span><span class=\"o\">=</span><span class=\"s1\">'equation_step'</span><span class=\"p\">)</span>\n<span class=\"n\">dg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">n_iters</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"n\">train_mode</span><span class=\"o\">=</span><span class=\"s1\">'initial_condition_step'</span><span class=\"p\">)</span>\n</pre>\n<p>Check out the results:</p>\n<p align=\"center\">\n<img align=\"middle\" height=\"250.973825pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf54f6585759cb1288bf6144be07a980a8ba261b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616e616c7973697363656e7465722f707964656e732f6d61737465722f696d67732f636f6e76657267696e675f736f6c2e6769663f696e766572745f696e5f6461726b6d6f6465\">\n</p>\n<h2>Installation</h2>\n<p>First of all, you have to manually install <a href=\"https://www.tensorflow.org/install/pip\" rel=\"nofollow\">tensorflow</a>,\nas you might need a certain version or a specific build for CPU / GPU.</p>\n<h3>Stable python package</h3>\n<p>With modern <a href=\"https://docs.pipenv.org/\" rel=\"nofollow\">pipenv</a></p>\n<pre><code>pipenv install pydens\n</code></pre>\n<p>With old-fashioned <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a></p>\n<pre><code>pip3 install pydens\n</code></pre>\n<h3>Development version</h3>\n<pre><code>pipenv install git+https://github.com/analysiscenter/pydens.git\n</code></pre>\n<pre><code>pip3 install git+https://github.com/analysiscenter/pydens.git\n</code></pre>\n<h3>Installation as a project repository:</h3>\n<p>Do not forget to use the flag <code>--recursive</code> to make sure that <code>BatchFlow</code> submodule is also cloned.</p>\n<pre><code>git clone --recursive https://github.com/analysiscenter/pydens.git\n</code></pre>\n<p>In this case you need to manually install the dependencies.</p>\n<h2>Citing PyDEns</h2>\n<p>Please cite <strong>PyDEns</strong> if it helps your research.</p>\n<pre><code>Roman Khudorozhkov, Sergey Tsimfer, Alexander Koryagin. PyDEns framework for solving differential equations with deep learning. 2019.\n</code></pre>\n<pre><code>@misc{pydens_2019,\n  author       = {Khudorozhkov R. and Tsimfer S. and Koryagin. A.},\n  title        = {PyDEns framework for solving differential equations with deep learning},\n  year         = 2019\n}\n</code></pre>\n\n          </div>"}, "last_serial": 6018378, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "34ea7b34fb725d06320a256464926776", "sha256": "89e6ab43d54a7870ffb4af4536ce3c5c2d3b931d74df04146686a7dc2c2693b5"}, "downloads": -1, "filename": "pydens-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "34ea7b34fb725d06320a256464926776", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22578, "upload_time": "2019-08-26T11:14:11", "upload_time_iso_8601": "2019-08-26T11:14:11.194032Z", "url": "https://files.pythonhosted.org/packages/17/3f/22631fcf48545d12715b0e75cc27a4170f133e5463153c106fb1d438dcfd/pydens-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4352d160096a1f57abed3d72547c201d", "sha256": "5e9c7a55496de35369c9b386860cd67a8ca37d85ec9a34ad7679d531e96cdbfe"}, "downloads": -1, "filename": "pydens-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4352d160096a1f57abed3d72547c201d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 278808, "upload_time": "2019-10-02T11:59:25", "upload_time_iso_8601": "2019-10-02T11:59:25.945494Z", "url": "https://files.pythonhosted.org/packages/af/c5/8d53a4cf059b0fd1cc47275d67a9b571a6ba6fb1afde822eda16776b28fe/pydens-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a6aaa37a5b94f03a0f756c2ea7ba8d25", "sha256": "925db8c47752c7bcbee8ac1cc7d986004106b42d0577bd3ce667aae15714ef31"}, "downloads": -1, "filename": "pydens-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a6aaa37a5b94f03a0f756c2ea7ba8d25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 281003, "upload_time": "2019-10-23T12:44:18", "upload_time_iso_8601": "2019-10-23T12:44:18.478786Z", "url": "https://files.pythonhosted.org/packages/ad/4b/a5b23a20dfbc0fa8c0999fa77c00381cd6cf60051e975d3b39593743c3a3/pydens-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39e588bb07d40f826aa6a7d8af2aecc7", "sha256": "ad7963e608b7dd0083a7c7f8c0f7910adc976045f3d4de74428fb181e9a53432"}, "downloads": -1, "filename": "pydens-0.1.2.tar.gz", "has_sig": false, "md5_digest": "39e588bb07d40f826aa6a7d8af2aecc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 205793, "upload_time": "2019-10-23T12:44:21", "upload_time_iso_8601": "2019-10-23T12:44:21.425727Z", "url": "https://files.pythonhosted.org/packages/1f/34/f3bcdb1746b440311e7f446455c925164ba80afb6ce1ebe7c1b16ecf97fd/pydens-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a6aaa37a5b94f03a0f756c2ea7ba8d25", "sha256": "925db8c47752c7bcbee8ac1cc7d986004106b42d0577bd3ce667aae15714ef31"}, "downloads": -1, "filename": "pydens-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a6aaa37a5b94f03a0f756c2ea7ba8d25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 281003, "upload_time": "2019-10-23T12:44:18", "upload_time_iso_8601": "2019-10-23T12:44:18.478786Z", "url": "https://files.pythonhosted.org/packages/ad/4b/a5b23a20dfbc0fa8c0999fa77c00381cd6cf60051e975d3b39593743c3a3/pydens-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39e588bb07d40f826aa6a7d8af2aecc7", "sha256": "ad7963e608b7dd0083a7c7f8c0f7910adc976045f3d4de74428fb181e9a53432"}, "downloads": -1, "filename": "pydens-0.1.2.tar.gz", "has_sig": false, "md5_digest": "39e588bb07d40f826aa6a7d8af2aecc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 205793, "upload_time": "2019-10-23T12:44:21", "upload_time_iso_8601": "2019-10-23T12:44:21.425727Z", "url": "https://files.pythonhosted.org/packages/1f/34/f3bcdb1746b440311e7f446455c925164ba80afb6ce1ebe7c1b16ecf97fd/pydens-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:09 2020"}