{"info": {"author": "L. Coues", "author_email": "couesl@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License"], "description": "Ruby on Rails Syntax for Django\n==============================\n\n\nUsage\n-----\n\n::\n\n    from ror_url import ror_url\n    \n    urlpatterns = [\n        ror_url('blog/', index_view, name=\"index\"),\n        ror_url('blog/:slug', article_view, name=\"article\",\n            constraints={\"slug\": \"[-\\w]+\"})\n    ]\n\n\nAbout\n-----\n\ndjango_ror_url try to replicate the Ruby on Rail routing syntax for\nuse with django routing system.\n\nIt is currently in alpha state with most but the essential part\nmissing.\n\nHow is it working ?\n-------------------\n\nCurrently, the ror_url module only provide a single function, ror_url\nintended to replace the native django's django.conf.urls.url. There are\ntwo differences between these functions. The ror_url take a segment\nbased path instead of a regex as its first argument and it also take an\nextra argument, constraints.\n\nIn the segment based path, the url is split on slash and each resulting\npiece is considered a segment. A segment can either be a fixed piece,\nlike ``blog`` or can be an argument, like ``:slug``.\n\nBy default, each argument match any string. That can be changed with\nthe use of the constraints argument. It is a dict, with argument as key\nand regex or flag as values. If a flag is used, it will be replaced by\na corresponding regex.\n\nThe currents flags and their corresponding regex are:\n\n==== =====\nflag regex\n==== =====\nstr  .+\nint  \\d+\n==== ====", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://example.org", "keywords": "django ruby routing", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django_ror_url", "package_url": "https://pypi.org/project/django_ror_url/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django_ror_url/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://example.org"}, "release_url": "https://pypi.org/project/django_ror_url/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Provide Ruby On Rails routing for django", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Ruby on Rails Syntax for Django<br>==============================<br><br><br>Usage<br>-----<br><br>::<br><br>    from ror_url import ror_url<br>    <br>    urlpatterns = [<br>        ror_url('blog/', index_view, name=\"index\"),<br>        ror_url('blog/:slug', article_view, name=\"article\",<br>            constraints={\"slug\": \"[-\\w]+\"})<br>    ]<br><br><br>About<br>-----<br><br>django_ror_url try to replicate the Ruby on Rail routing syntax for<br>use with django routing system.<br><br>It is currently in alpha state with most but the essential part<br>missing.<br><br>How is it working ?<br>-------------------<br><br>Currently, the ror_url module only provide a single function, ror_url<br>intended to replace the native django's django.conf.urls.url. There are<br>two differences between these functions. The ror_url take a segment<br>based path instead of a regex as its first argument and it also take an<br>extra argument, constraints.<br><br>In the segment based path, the url is split on slash and each resulting<br>piece is considered a segment. A segment can either be a fixed piece,<br>like ``blog`` or can be an argument, like ``:slug``.<br><br>By default, each argument match any string. That can be changed with<br>the use of the constraints argument. It is a dict, with argument as key<br>and regex or flag as values. If a flag is used, it will be replaced by<br>a corresponding regex.<br><br>The currents flags and their corresponding regex are:<br><br>==== =====<br>flag regex<br>==== =====<br>str  .+<br>int  \\d+<br>==== ====\n          </div>"}, "last_serial": 2384594, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 00:53:54 2020"}