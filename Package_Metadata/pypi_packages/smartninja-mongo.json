{"info": {"author": "Matej Ramuta", "author_email": "matej.ramuta@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# SmartNinja Mongo\n\nA simple **wrapper** for MongoDB (`pymongo`) and TinyDB (`tinymongo`). It also provides a lightweight **object-document mapper** (ODM).\n\nUse it if you don't want to (or can't) install MongoDB locally.\n\n## Installation\n\nInstall the package via pip:\n\n\tpip install smartninja-mongo\n\nOr add it in your `requirements.txt` and run `pip install -r requirements.txt`.\n\n### Dependencies\n\nSmartNinja Mongo automatically installs the following dependencies:\n\n- `tinymongo`\n- `pymongo`\n- `tinydb`\n- `tinydb_serialization` (used to easily convert datetime objects)\n\n## How it works\n\nYou write your code as you would using the `pymongo` package. Except that you get the `MongoClient` class from the `smartninja_mongo` library (see examples below).\n\nSmartNinja Mongo **automatically** figures out whether you're the program is running on **localhost** or on a **production** server.\n\nIf it's on **localhost**, TinyDB will be used instead of MongoDB via the `tinymongo` package (except if you set the `CUSTOM_MONGO_SERVER` env var).\n\nIf the app runs on **Heroku** or on **Azure**, the `smartninja_mongo` package automatically recognizes this and returns the `pymongo` client class instead of the one from `tinymongo`.\n\nIf your program runs in **some other production environment**, just set the `CUSTOM_MONGO_SERVER` env var (add any value to it that comes back as `True`, like for example `\"1\"`) and `pymongo` client will be used.\n\n## Usage\n\nSmartNinja Mongo's only task is to get you the right Mongo client:\n\n```python\nfrom smartninja_mongo.connection import MongoClient\n\nclient = MongoClient('mongodb://ds012345.mlab.com:56789/')\n```\n\nIf your Python program runs on Heroku (for example), you'll get back a `MongoClient` from the `pymongo` library which has a connection to the production MongoDB database (in this case the mLab's Mongo database).\n\nBut if your app runs on localhost, a TinyDB instance will be created (you'll see a `localhost.db` folder created, put it in `.gitignore`).\n\nEven if TinyDB is used on localhost instead of the MongoDB, you can write your code in the MongoDB way (or `pymongo` way).\n\nSee the following examples:\n\n```python\ndb = client.my_database\n\ncollection = db.users\n\nuser_id = collection.insert_one({\"first_name\": \"Matej\", \"last_name\": \"Ramuta\", \"year_born\": 1987, \"created\": datetime.datetime.now()}).inserted_id\n\nuser_info = collection.find_one({\"_id\": user_id})\n\nprint(user_info)\n```\n\n### More usage examples\n\nFor more usage examples see PyMongo docs: [https://api.mongodb.com/python/current/](https://api.mongodb.com/python/current/).\n\n### Beware\n\nThere might be some incompatibilities between TinyMongo and PyMongo. Make sure to also check the [TinyMongo docs](https://tinydb.readthedocs.io/en/latest/index.html) to identify the problem if weird behavior occurs.\n\n### ODM\n\nMongoDB accepts data as dictionaries and also returns data as dicts. If you'd like to use model classes in your project, you can use a base model from the SmartNinja Mongo library:\n\n```python\nfrom smartninja_mongo.odm import Model\n\n\nclass User(Model):\n    def __init__(self, first_name, **kwargs):\n        self.first_name = first_name\n\n        super().__init__(**kwargs)\n```\n\nMake sure to add `**kwargs` as a parameter and call `super()` at the end of the `__init__` method.\n\nAlternatively you can skip `__init__` completely\n\n```python\nclass User(Model):\n\tpass\n```\n\n#### The benefit of using SmartNinja Mongo ODM `Model`\n\nThe main benefit is that you get a method called: `convert_dict_to_object()`:\n\n```python\nuser_info = collection.find_one({\"_id\": user_id})\n\nuser_obj = User.convert_dict_to_object(data_dict=user_info)\n\nprint(user_obj.first_name)\n```\n\nThis `Model` class provides a very lightweight and simple **object-document mapping** (ODM).\n\n## Contributions\n\nContributions via pull requests are warmly welcome!\n\n### TODO\n\n- tests\n- CI", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smartninja/smartninja-mongo", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "smartninja-mongo", "package_url": "https://pypi.org/project/smartninja-mongo/", "platform": "", "project_url": "https://pypi.org/project/smartninja-mongo/", "project_urls": {"Homepage": "https://github.com/smartninja/smartninja-mongo"}, "release_url": "https://pypi.org/project/smartninja-mongo/0.5/", "requires_dist": null, "requires_python": "", "summary": "SmartNinja Mongo - a simple MongoDB & TinyDB wrapper.", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SmartNinja Mongo</h1>\n<p>A simple <strong>wrapper</strong> for MongoDB (<code>pymongo</code>) and TinyDB (<code>tinymongo</code>). It also provides a lightweight <strong>object-document mapper</strong> (ODM).</p>\n<p>Use it if you don't want to (or can't) install MongoDB locally.</p>\n<h2>Installation</h2>\n<p>Install the package via pip:</p>\n<pre><code>pip install smartninja-mongo\n</code></pre>\n<p>Or add it in your <code>requirements.txt</code> and run <code>pip install -r requirements.txt</code>.</p>\n<h3>Dependencies</h3>\n<p>SmartNinja Mongo automatically installs the following dependencies:</p>\n<ul>\n<li><code>tinymongo</code></li>\n<li><code>pymongo</code></li>\n<li><code>tinydb</code></li>\n<li><code>tinydb_serialization</code> (used to easily convert datetime objects)</li>\n</ul>\n<h2>How it works</h2>\n<p>You write your code as you would using the <code>pymongo</code> package. Except that you get the <code>MongoClient</code> class from the <code>smartninja_mongo</code> library (see examples below).</p>\n<p>SmartNinja Mongo <strong>automatically</strong> figures out whether you're the program is running on <strong>localhost</strong> or on a <strong>production</strong> server.</p>\n<p>If it's on <strong>localhost</strong>, TinyDB will be used instead of MongoDB via the <code>tinymongo</code> package (except if you set the <code>CUSTOM_MONGO_SERVER</code> env var).</p>\n<p>If the app runs on <strong>Heroku</strong> or on <strong>Azure</strong>, the <code>smartninja_mongo</code> package automatically recognizes this and returns the <code>pymongo</code> client class instead of the one from <code>tinymongo</code>.</p>\n<p>If your program runs in <strong>some other production environment</strong>, just set the <code>CUSTOM_MONGO_SERVER</code> env var (add any value to it that comes back as <code>True</code>, like for example <code>\"1\"</code>) and <code>pymongo</code> client will be used.</p>\n<h2>Usage</h2>\n<p>SmartNinja Mongo's only task is to get you the right Mongo client:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smartninja_mongo.connection</span> <span class=\"kn\">import</span> <span class=\"n\">MongoClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">(</span><span class=\"s1\">'mongodb://ds012345.mlab.com:56789/'</span><span class=\"p\">)</span>\n</pre>\n<p>If your Python program runs on Heroku (for example), you'll get back a <code>MongoClient</code> from the <code>pymongo</code> library which has a connection to the production MongoDB database (in this case the mLab's Mongo database).</p>\n<p>But if your app runs on localhost, a TinyDB instance will be created (you'll see a <code>localhost.db</code> folder created, put it in <code>.gitignore</code>).</p>\n<p>Even if TinyDB is used on localhost instead of the MongoDB, you can write your code in the MongoDB way (or <code>pymongo</code> way).</p>\n<p>See the following examples:</p>\n<pre><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">my_database</span>\n\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">users</span>\n\n<span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">insert_one</span><span class=\"p\">({</span><span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Matej\"</span><span class=\"p\">,</span> <span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ramuta\"</span><span class=\"p\">,</span> <span class=\"s2\">\"year_born\"</span><span class=\"p\">:</span> <span class=\"mi\">1987</span><span class=\"p\">,</span> <span class=\"s2\">\"created\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()})</span><span class=\"o\">.</span><span class=\"n\">inserted_id</span>\n\n<span class=\"n\">user_info</span> <span class=\"o\">=</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">({</span><span class=\"s2\">\"_id\"</span><span class=\"p\">:</span> <span class=\"n\">user_id</span><span class=\"p\">})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user_info</span><span class=\"p\">)</span>\n</pre>\n<h3>More usage examples</h3>\n<p>For more usage examples see PyMongo docs: <a href=\"https://api.mongodb.com/python/current/\" rel=\"nofollow\">https://api.mongodb.com/python/current/</a>.</p>\n<h3>Beware</h3>\n<p>There might be some incompatibilities between TinyMongo and PyMongo. Make sure to also check the <a href=\"https://tinydb.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">TinyMongo docs</a> to identify the problem if weird behavior occurs.</p>\n<h3>ODM</h3>\n<p>MongoDB accepts data as dictionaries and also returns data as dicts. If you'd like to use model classes in your project, you can use a base model from the SmartNinja Mongo library:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smartninja_mongo.odm</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">first_name</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Make sure to add <code>**kwargs</code> as a parameter and call <code>super()</code> at the end of the <code>__init__</code> method.</p>\n<p>Alternatively you can skip <code>__init__</code> completely</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</pre>\n<h4>The benefit of using SmartNinja Mongo ODM <code>Model</code></h4>\n<p>The main benefit is that you get a method called: <code>convert_dict_to_object()</code>:</p>\n<pre><span class=\"n\">user_info</span> <span class=\"o\">=</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">({</span><span class=\"s2\">\"_id\"</span><span class=\"p\">:</span> <span class=\"n\">user_id</span><span class=\"p\">})</span>\n\n<span class=\"n\">user_obj</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">convert_dict_to_object</span><span class=\"p\">(</span><span class=\"n\">data_dict</span><span class=\"o\">=</span><span class=\"n\">user_info</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user_obj</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">)</span>\n</pre>\n<p>This <code>Model</code> class provides a very lightweight and simple <strong>object-document mapping</strong> (ODM).</p>\n<h2>Contributions</h2>\n<p>Contributions via pull requests are warmly welcome!</p>\n<h3>TODO</h3>\n<ul>\n<li>tests</li>\n<li>CI</li>\n</ul>\n\n          </div>"}, "last_serial": 4837526, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7ed43c10b5ea0f394d1520d7b19d8e82", "sha256": "b58297db98a3c2692b5abf46a5356398aba3e9a9859095fea08094e4bf0632b1"}, "downloads": -1, "filename": "smartninja-mongo-0.1.tar.gz", "has_sig": false, "md5_digest": "7ed43c10b5ea0f394d1520d7b19d8e82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2869, "upload_time": "2019-02-10T17:33:34", "upload_time_iso_8601": "2019-02-10T17:33:34.714882Z", "url": "https://files.pythonhosted.org/packages/99/1d/57acd556463fcbdc913a5450ad4bd02fb4aea2072edf49b25a706a5c6ebc/smartninja-mongo-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "cc082d06ee9216b42b7495b06588fceb", "sha256": "8c7074d0831d074aca1e0e558c03f7295fc7ebea62b37284956a36f13c843d9d"}, "downloads": -1, "filename": "smartninja-mongo-0.2.tar.gz", "has_sig": false, "md5_digest": "cc082d06ee9216b42b7495b06588fceb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2872, "upload_time": "2019-02-10T17:41:58", "upload_time_iso_8601": "2019-02-10T17:41:58.217442Z", "url": "https://files.pythonhosted.org/packages/1a/23/9541e79679b112c0c29a074aee3ba6a33f3c342a1ccd5ff2ae098e702bc1/smartninja-mongo-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "d061cde5ed91f6b419b604fb5bc39fa2", "sha256": "110c2a820994cca080c65d1b9be3fae53b07261bdb896db1189c53d980893768"}, "downloads": -1, "filename": "smartninja-mongo-0.3.tar.gz", "has_sig": false, "md5_digest": "d061cde5ed91f6b419b604fb5bc39fa2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3502, "upload_time": "2019-02-15T01:12:17", "upload_time_iso_8601": "2019-02-15T01:12:17.570349Z", "url": "https://files.pythonhosted.org/packages/bf/dd/a368361252eefa5a9df3914e7294b4054d62f1197d2ba4e88669cfcc5f5a/smartninja-mongo-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "e3d11ec6aed5ea5e323b7bcfe40bc773", "sha256": "1532720753a5e5d0baefe54ca15e9783da055304958de333a236e8215851dea7"}, "downloads": -1, "filename": "smartninja-mongo-0.4.tar.gz", "has_sig": false, "md5_digest": "e3d11ec6aed5ea5e323b7bcfe40bc773", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3758, "upload_time": "2019-02-18T16:47:58", "upload_time_iso_8601": "2019-02-18T16:47:58.647744Z", "url": "https://files.pythonhosted.org/packages/5f/39/a121da25c59a6ec7c4cef602ca8ff1bd1fb2d6a8fb323ae4fdbf8939f1ce/smartninja-mongo-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "35bf8345fbaf278a8b5e42d6afbb4ef7", "sha256": "c4f862e07183dfe06154904115b0df81da448cbfc99b33e2e0f487e1313fc415"}, "downloads": -1, "filename": "smartninja-mongo-0.5.tar.gz", "has_sig": false, "md5_digest": "35bf8345fbaf278a8b5e42d6afbb4ef7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3834, "upload_time": "2019-02-18T23:59:34", "upload_time_iso_8601": "2019-02-18T23:59:34.348657Z", "url": "https://files.pythonhosted.org/packages/8d/6e/719226e517ae95fabd1cfaaccb2784d1f4f82ff053e17d27010402782426/smartninja-mongo-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35bf8345fbaf278a8b5e42d6afbb4ef7", "sha256": "c4f862e07183dfe06154904115b0df81da448cbfc99b33e2e0f487e1313fc415"}, "downloads": -1, "filename": "smartninja-mongo-0.5.tar.gz", "has_sig": false, "md5_digest": "35bf8345fbaf278a8b5e42d6afbb4ef7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3834, "upload_time": "2019-02-18T23:59:34", "upload_time_iso_8601": "2019-02-18T23:59:34.348657Z", "url": "https://files.pythonhosted.org/packages/8d/6e/719226e517ae95fabd1cfaaccb2784d1f4f82ff053e17d27010402782426/smartninja-mongo-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:02 2020"}