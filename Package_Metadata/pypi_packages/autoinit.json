{"info": {"author": "Constantine Kosmachevski", "author_email": "oversider_kosma@mail.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: Jython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "\n# autoinit\n> Python decorator for automatic initialization instance attributes\n\n### What\n```python3\nfrom autoinit import autoinit\n\n@autoinit\nclass X:\n    def __init__(self, a, b, c, d:int, e=99.99, f='some_default_value'):\n\t    print(\"__init__ do some another things\")\n\nx = X(42, 100, 500, None)\n#  Output: \"__init__ do some another things\"\n\nprint(x.__dict__)\n# Output: {'a': 42, 'b': 100, 'c': 500, 'd': None, 'e': 99.99, 'f': 'some_default_value'}\n```\n### How\n$ ```pip install autoinit```\n### Where\nTested in:\n* CPython: 2.7, 3.5-3.8\n* Pypy: 2.7, 3.5, 3.6\n* Jython: 2.7\n\n...but with a high probability will work with other implementations as well.\n### Why\nA lot of elementary assignments inside `__init__` are a fairly frequent and rather dull case.\n\n```python3\nclass FiveDimensionRecord:\n    def __init__(self, x:int, y:int, z:int, u:int,\n                 v:int, dt:typing.Optional[datetime]=None, description:str=''):\n        self.x = x\n        self.y = y\n        self.z = z\n        self.u = u\n        self.v = v\n        self.dt = dt or datetime.now()\n        self.description = description\n```\n\nDataclasses do not make it much more fun, mainly because you still cannot declare attributes in one line\n```python3\n@dataclass\nclass FiveDimensionRecord:\n    x: int\n    y: int\n    z: int\n    u: int\n    v: int\n    dt: 'typing.Any' = None\n    description: str = ''\n\n    def __post_init__(self):\n        self.dt = self.dt or datetime.now()\n```\n\nWith `autoinit` it looks much more compact and minimalistic\n\n```python3\nclass FiveDimensionRecord:\n    @autoinit\n    def __init__(self, x:int, y:int, z:int,\n                 u:int, v:int, dt=None, description:str=''):\n        self.dt = self.dt or datetime.now()\n```\n\n### Options\n* `@autoinit(exclude='attr')` or `@autoinit(exclude=['attr1', 'attr2]')`: skip specified attributes\n\n* `@autoinit(no_warn=True)`: do not throw warning if decorator applied to non-`__init__` method\n\n* `@autoinit(reverse=True)`: invert the order of actions - first call the wrapped method (which is usually `__init__`), and then do assignment\n\nThe decorator itself can be equally applied to both the `__init__` method and the entire class.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oversider-kosma/autoinit", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "autoinit", "package_url": "https://pypi.org/project/autoinit/", "platform": "", "project_url": "https://pypi.org/project/autoinit/", "project_urls": {"Homepage": "https://github.com/oversider-kosma/autoinit"}, "release_url": "https://pypi.org/project/autoinit/1.0.0/", "requires_dist": null, "requires_python": ">=2.7.0", "summary": "Python decorator for automatic initialization instance attributes", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>autoinit</h1>\n<blockquote>\n<p>Python decorator for automatic initialization instance attributes</p>\n</blockquote>\n<h3>What</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autoinit</span> <span class=\"kn\">import</span> <span class=\"n\">autoinit</span>\n\n<span class=\"nd\">@autoinit</span>\n<span class=\"k\">class</span> <span class=\"nc\">X</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">=</span><span class=\"mf\">99.99</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"s1\">'some_default_value'</span><span class=\"p\">):</span>\n\t    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"__init__ do some another things\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"c1\">#  Output: \"__init__ do some another things\"</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output: {'a': 42, 'b': 100, 'c': 500, 'd': None, 'e': 99.99, 'f': 'some_default_value'}</span>\n</pre>\n<h3>How</h3>\n<p>$ <code>pip install autoinit</code></p>\n<h3>Where</h3>\n<p>Tested in:</p>\n<ul>\n<li>CPython: 2.7, 3.5-3.8</li>\n<li>Pypy: 2.7, 3.5, 3.6</li>\n<li>Jython: 2.7</li>\n</ul>\n<p>...but with a high probability will work with other implementations as well.</p>\n<h3>Why</h3>\n<p>A lot of elementary assignments inside <code>__init__</code> are a fairly frequent and rather dull case.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FiveDimensionRecord</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n                 <span class=\"n\">v</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">:</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">z</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">u</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">dt</span> <span class=\"ow\">or</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">description</span>\n</pre>\n<p>Dataclasses do not make it much more fun, mainly because you still cannot declare attributes in one line</p>\n<pre><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">FiveDimensionRecord</span><span class=\"p\">:</span>\n    <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">u</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"s1\">'typing.Any'</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__post_init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dt</span> <span class=\"ow\">or</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n</pre>\n<p>With <code>autoinit</code> it looks much more compact and minimalistic</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FiveDimensionRecord</span><span class=\"p\">:</span>\n    <span class=\"nd\">@autoinit</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n                 <span class=\"n\">u</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dt</span> <span class=\"ow\">or</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n</pre>\n<h3>Options</h3>\n<ul>\n<li>\n<p><code>@autoinit(exclude='attr')</code> or <code>@autoinit(exclude=['attr1', 'attr2]')</code>: skip specified attributes</p>\n</li>\n<li>\n<p><code>@autoinit(no_warn=True)</code>: do not throw warning if decorator applied to non-<code>__init__</code> method</p>\n</li>\n<li>\n<p><code>@autoinit(reverse=True)</code>: invert the order of actions - first call the wrapped method (which is usually <code>__init__</code>), and then do assignment</p>\n</li>\n</ul>\n<p>The decorator itself can be equally applied to both the <code>__init__</code> method and the entire class.</p>\n\n          </div>"}, "last_serial": 6774707, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "17ebace37a6e650e89a426ec09cf00fe", "sha256": "d0ddd20a2ead44e64a3607ea2b9000c0e37dcf2c2d659ea2e7b7501f3457e349"}, "downloads": -1, "filename": "autoinit-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "17ebace37a6e650e89a426ec09cf00fe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 4223, "upload_time": "2020-03-09T03:49:38", "upload_time_iso_8601": "2020-03-09T03:49:38.460784Z", "url": "https://files.pythonhosted.org/packages/aa/96/5074ed55eef6723f09b35c562d4bb67997d6e83ae17724e47f2754f80617/autoinit-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dff4ee17862d0425abae3f9215f7ff4", "sha256": "530f980140d0755f8dcdc4bf55276cd1d95af80d2437af0c16d22abcdcea9d3f"}, "downloads": -1, "filename": "autoinit-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8dff4ee17862d0425abae3f9215f7ff4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 4512, "upload_time": "2020-03-09T03:49:40", "upload_time_iso_8601": "2020-03-09T03:49:40.730625Z", "url": "https://files.pythonhosted.org/packages/1f/9c/22c852061b2504cc9032fd7098a20de13eb7a08b210a55f0843c22554c61/autoinit-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17ebace37a6e650e89a426ec09cf00fe", "sha256": "d0ddd20a2ead44e64a3607ea2b9000c0e37dcf2c2d659ea2e7b7501f3457e349"}, "downloads": -1, "filename": "autoinit-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "17ebace37a6e650e89a426ec09cf00fe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 4223, "upload_time": "2020-03-09T03:49:38", "upload_time_iso_8601": "2020-03-09T03:49:38.460784Z", "url": "https://files.pythonhosted.org/packages/aa/96/5074ed55eef6723f09b35c562d4bb67997d6e83ae17724e47f2754f80617/autoinit-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dff4ee17862d0425abae3f9215f7ff4", "sha256": "530f980140d0755f8dcdc4bf55276cd1d95af80d2437af0c16d22abcdcea9d3f"}, "downloads": -1, "filename": "autoinit-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8dff4ee17862d0425abae3f9215f7ff4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 4512, "upload_time": "2020-03-09T03:49:40", "upload_time_iso_8601": "2020-03-09T03:49:40.730625Z", "url": "https://files.pythonhosted.org/packages/1f/9c/22c852061b2504cc9032fd7098a20de13eb7a08b210a55f0843c22554c61/autoinit-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:16 2020"}