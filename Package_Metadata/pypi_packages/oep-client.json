{"info": {"author": "Christian Winger", "author_email": "c.winger@oeko.de", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# OEP Client\n\nThis tool eases data sharing with the Open Energy Platform (OEP). Common tasks on the OEP are:\n\n* creating a table\n* uploading data\n* updating a table's metadata\n* downloading data\n* retrieving a table's metadata \n* deleting a table (that you created)\n\nYou can also always just use the API `(TODO: link to documentation)` directly if your tasks are more complex.  \n\n## Notes for Windows Users\n\nAll the example commands below use `python3`, because we need python 3. Under Windows, it's most likely to be `python.exe` or just `python`.\n \n\n## Installation\n\nInstall package `oep-client` from python package index with pip:\n\n```bash\npython3 -m pip install --upgrade oep-client\n```\n\n## Authentification\n\nYou need to be [registered on the OEP platform](https://openenergy-platform.org/user/register) and have a valid API token.\nYou can find your token in your user profile on the OEP under _Your Security Information_.\n\n## Test\n\nThere is a short test script that creates a table on the platform, uploads data and metadata, downloads them again \nand finally deletes the table.\n\nYou can run it either directly from the command prompt using\n\n```\noep-client --test --token API_TOKEN\n```\n\n`TODO: example output if everything is ok`\n\n\n## Notes on Data and Metadata\n\nSupported filetypes that the client can work with are are: xslx, csv, json\nYour metadata must be a json file that complies with the [metadata specification of the OEP](https://github.com/OpenEnergyPlatform/metadata)\n\n## Notes on Usage\n\nAll tasks can be executed either directly as a comand line script (CLI) `oep-client` that comes with this package, or in a python environment.\n\nThe CLI is very handy for standardized tasks as it requires just one command line, but is somewhat limited when for instance your input data is not in a very specific format.\nTo see avaiblabe command line options, use\n```\noep-client --help\n```\n\nIn a python environment, you have more flexibility to prepare / clean your data before uploading it.\n\n## Notes on Names\n\n`TODO: schema.tablename, but upload only in model_draft ...`\n\n\n# Using the CLI\n\n## Creating a table\n\nRequires a valid metadata file.\n\nYou need to specify names and data types of your columns in the metadata, which also must be valid [post-gres data types](https://www.postgresql.org/docs/9.5/datatype.html \"postgres data types\").\n\nExample (excerpt):\n```\n{\n  \"resources\": [\n    {\n      \"schema\": {\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\": \"bigserial\"\n          },\n          {\n            \"name\": \"field_1\",\n            \"type\": \"character vaying(32)\",\n            \"description\": \"column description\",\n            \"unit\": \"unit name\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n```bash\noep-client -t API_TOKEN -n TABLE_NAME -m METADATA --create \n```\n\n## Uploading data\n\n```bash\noep-client -t API_TOKEN -n TABLE_NAME --upload-data FILENAME \n```\nif  `FILENAME` is a \n* `xlsx`, you *have to* also specify `--sheet SHEETNAME`  \n* `csv`, you *may* also specify  `--delimiter DELIMITER` and or  `--encoding ENCODING`  \n\n## Updating a table's metadata\n\nThis of course requires a valid metadata file.\n\n```bash\noep-client -t API_TOKEN -n TABLE_NAME -m METADATA --update-metadata  \n```\n\nyou can also add use `--validate` to check if the metadata file is valid according to the OEP metadata specification\n\n## Downloading data\n\nNote: you do not need an API_TOKEN to downlad data. Also, the table might not be in the `model_draft` schema, in which case you can specify the table name as  `schema_name.table_name`. -> [List of schemas](https://openenergy-platform.org/dataedit/schemas).  \n\n```bash\noep-client -n TABLE_NAME FILENAME\n```\nif  `FILENAME` is a \n* `xlsx`, you *have to* also specify `--sheet SHEETNAME`  \n* `csv`, you *may* also specify  `--delimiter DELIMITER` and or  `--encoding ENCODING`\n\n## Retrieving a table's metadata \n\nNote: you do not need an API_TOKEN to downlad metadata. Also, the table might not be in the `model_draft` schema, in which case you can specify the table name as  `schema_name.table_name`. -> [List of schemas](https://openenergy-platform.org/dataedit/schemas).\n\n```bash\noep-client -n TABLE_NAME --download-metadata FILENAME \n```\n\n## Deleting a table (that you created)\n\n```bash\noep-client -t API_TOKEN -n TABLE_NAME --delete\n```\n\n# Using the Package in Python\n\nAll examples assume that you import the package and create a client instance first:\n```\nfrom oep_client import OepClient\ncl = OepClient(token='API_TOKEN', ...)\n```\n\n`... TODO` \n\n\n# More Information - Use the API without the oep-client\n\nThis section describes how to upload data to the [OEP](https://openenergy-platform.org \"OEP\") using Python and the REST-API.\n\n## Create and upload data table(s)\n* The REST-API can be used with any language than can make HTTP(s) requests.\n\n* Most requests require you to add an authorization header: \nAuthorization: `Token API_TOKEN`, where you substitute `API_TOKEN` with your token.\n\n* All requests (and most responses) will use json data as payload. A paylpad is the actual data content of the request.\n\n* An example is provided below. For it, we use python and the [requests package](https://2.python-requests.org/en/master/ \"Python request package\"). All requests will use a requests session with the authorization header.\n\n```\nimport requests\nAPI_URL = 'https://openenergy-platform.org/api/v0'\nsession = requests.Session()\nsession.headers = {'Authorization': 'Token %s' % API_TOKEN}\n``` \n* The requests in the following sections use roughly the same pattern: \n    * Prepare your request payload as a json object\n    * Prepare your request url\n    * Send your request using the correct verb (get, post, put, delete)\n    * Check if the request was successful\n\n### Create a new table\n* You will create the tables at first in the [_model_draft_](https://openenergy-platform.org/dataedit/view/model_draft) schema. After a successful review later, the table will be moved to the final target schema.\n\n* You need to specify the name of the new table (`TABLE_NAME`), which should be a valid\npost-gresql table name, without spaces, ideally only containing lower case letters, numbers and underscores.\n\n# make request and check using PUT\nres = session.put(url, json=data)\nres.raise_for_status()  # check: throws exception if not successful\n```\n### Upload data\n* To upload data, you must first load it into a json structure as a [list](https://www.w3schools.com/python/python_lists.asp \"python lists\") representing data rows, each of which is a [dictionary](https://www.w3schools.com/python/python_dictionaries.asp \"python dictionary\") mapping column names to values.\n\n* In the example, we will use [pandas](https://pypi.org/project/pandas/ \"pandas\") to read data from an Excel workbook (`WORKBOOK, WORKSHEET`) into a [data frame](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html \"data frame\") which we will then convert into a json object. Please note that this step will most likely require some modification to accommodate the specifics of your in-put data.\n\n* In addition to that, at the end, you need to load your data into the specified json structure.\n\n* After that, the data can be uploaded making a request to the API:\n```\n# load data into dataframe, convert into json\ndf = pd.read_excel(WORKBOOK, WORKSHEET)\nrecords = df.to_json(orient='records')\nrecords = json.loads(records)\n\n# prepare request payload\ndata = {'query': records}\n\n# prepare api url\nurl = API_URL + '/schema/model_draft/tables/' + TABLE_NAME + '/rows/new'\n\n# make request\nres = session.post(url, json=data)\nres.raise_for_status()  # check", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wingechr/oep-client", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "oep-client", "package_url": "https://pypi.org/project/oep-client/", "platform": "", "project_url": "https://pypi.org/project/oep-client/", "project_urls": {"Homepage": "https://github.com/wingechr/oep-client"}, "release_url": "https://pypi.org/project/oep-client/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "client side tool for openenergy platform", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OEP Client</h1>\n<p>This tool eases data sharing with the Open Energy Platform (OEP). Common tasks on the OEP are:</p>\n<ul>\n<li>creating a table</li>\n<li>uploading data</li>\n<li>updating a table's metadata</li>\n<li>downloading data</li>\n<li>retrieving a table's metadata</li>\n<li>deleting a table (that you created)</li>\n</ul>\n<p>You can also always just use the API <code>(TODO: link to documentation)</code> directly if your tasks are more complex.</p>\n<h2>Notes for Windows Users</h2>\n<p>All the example commands below use <code>python3</code>, because we need python 3. Under Windows, it's most likely to be <code>python.exe</code> or just <code>python</code>.</p>\n<h2>Installation</h2>\n<p>Install package <code>oep-client</code> from python package index with pip:</p>\n<pre>python3 -m pip install --upgrade oep-client\n</pre>\n<h2>Authentification</h2>\n<p>You need to be <a href=\"https://openenergy-platform.org/user/register\" rel=\"nofollow\">registered on the OEP platform</a> and have a valid API token.\nYou can find your token in your user profile on the OEP under <em>Your Security Information</em>.</p>\n<h2>Test</h2>\n<p>There is a short test script that creates a table on the platform, uploads data and metadata, downloads them again\nand finally deletes the table.</p>\n<p>You can run it either directly from the command prompt using</p>\n<pre><code>oep-client --test --token API_TOKEN\n</code></pre>\n<p><code>TODO: example output if everything is ok</code></p>\n<h2>Notes on Data and Metadata</h2>\n<p>Supported filetypes that the client can work with are are: xslx, csv, json\nYour metadata must be a json file that complies with the <a href=\"https://github.com/OpenEnergyPlatform/metadata\" rel=\"nofollow\">metadata specification of the OEP</a></p>\n<h2>Notes on Usage</h2>\n<p>All tasks can be executed either directly as a comand line script (CLI) <code>oep-client</code> that comes with this package, or in a python environment.</p>\n<p>The CLI is very handy for standardized tasks as it requires just one command line, but is somewhat limited when for instance your input data is not in a very specific format.\nTo see avaiblabe command line options, use</p>\n<pre><code>oep-client --help\n</code></pre>\n<p>In a python environment, you have more flexibility to prepare / clean your data before uploading it.</p>\n<h2>Notes on Names</h2>\n<p><code>TODO: schema.tablename, but upload only in model_draft ...</code></p>\n<h1>Using the CLI</h1>\n<h2>Creating a table</h2>\n<p>Requires a valid metadata file.</p>\n<p>You need to specify names and data types of your columns in the metadata, which also must be valid <a href=\"https://www.postgresql.org/docs/9.5/datatype.html\" rel=\"nofollow\" title=\"postgres data types\">post-gres data types</a>.</p>\n<p>Example (excerpt):</p>\n<pre><code>{\n  \"resources\": [\n    {\n      \"schema\": {\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\": \"bigserial\"\n          },\n          {\n            \"name\": \"field_1\",\n            \"type\": \"character vaying(32)\",\n            \"description\": \"column description\",\n            \"unit\": \"unit name\"\n          }\n        ]\n      }\n    }\n  ]\n}\n</code></pre>\n<pre>oep-client -t API_TOKEN -n TABLE_NAME -m METADATA --create \n</pre>\n<h2>Uploading data</h2>\n<pre>oep-client -t API_TOKEN -n TABLE_NAME --upload-data FILENAME \n</pre>\n<p>if  <code>FILENAME</code> is a</p>\n<ul>\n<li><code>xlsx</code>, you <em>have to</em> also specify <code>--sheet SHEETNAME</code></li>\n<li><code>csv</code>, you <em>may</em> also specify  <code>--delimiter DELIMITER</code> and or  <code>--encoding ENCODING</code></li>\n</ul>\n<h2>Updating a table's metadata</h2>\n<p>This of course requires a valid metadata file.</p>\n<pre>oep-client -t API_TOKEN -n TABLE_NAME -m METADATA --update-metadata  \n</pre>\n<p>you can also add use <code>--validate</code> to check if the metadata file is valid according to the OEP metadata specification</p>\n<h2>Downloading data</h2>\n<p>Note: you do not need an API_TOKEN to downlad data. Also, the table might not be in the <code>model_draft</code> schema, in which case you can specify the table name as  <code>schema_name.table_name</code>. -&gt; <a href=\"https://openenergy-platform.org/dataedit/schemas\" rel=\"nofollow\">List of schemas</a>.</p>\n<pre>oep-client -n TABLE_NAME FILENAME\n</pre>\n<p>if  <code>FILENAME</code> is a</p>\n<ul>\n<li><code>xlsx</code>, you <em>have to</em> also specify <code>--sheet SHEETNAME</code></li>\n<li><code>csv</code>, you <em>may</em> also specify  <code>--delimiter DELIMITER</code> and or  <code>--encoding ENCODING</code></li>\n</ul>\n<h2>Retrieving a table's metadata</h2>\n<p>Note: you do not need an API_TOKEN to downlad metadata. Also, the table might not be in the <code>model_draft</code> schema, in which case you can specify the table name as  <code>schema_name.table_name</code>. -&gt; <a href=\"https://openenergy-platform.org/dataedit/schemas\" rel=\"nofollow\">List of schemas</a>.</p>\n<pre>oep-client -n TABLE_NAME --download-metadata FILENAME \n</pre>\n<h2>Deleting a table (that you created)</h2>\n<pre>oep-client -t API_TOKEN -n TABLE_NAME --delete\n</pre>\n<h1>Using the Package in Python</h1>\n<p>All examples assume that you import the package and create a client instance first:</p>\n<pre><code>from oep_client import OepClient\ncl = OepClient(token='API_TOKEN', ...)\n</code></pre>\n<p><code>... TODO</code></p>\n<h1>More Information - Use the API without the oep-client</h1>\n<p>This section describes how to upload data to the <a href=\"https://openenergy-platform.org\" rel=\"nofollow\" title=\"OEP\">OEP</a> using Python and the REST-API.</p>\n<h2>Create and upload data table(s)</h2>\n<ul>\n<li>\n<p>The REST-API can be used with any language than can make HTTP(s) requests.</p>\n</li>\n<li>\n<p>Most requests require you to add an authorization header:\nAuthorization: <code>Token API_TOKEN</code>, where you substitute <code>API_TOKEN</code> with your token.</p>\n</li>\n<li>\n<p>All requests (and most responses) will use json data as payload. A paylpad is the actual data content of the request.</p>\n</li>\n<li>\n<p>An example is provided below. For it, we use python and the <a href=\"https://2.python-requests.org/en/master/\" rel=\"nofollow\" title=\"Python request package\">requests package</a>. All requests will use a requests session with the authorization header.</p>\n</li>\n</ul>\n<pre><code>import requests\nAPI_URL = 'https://openenergy-platform.org/api/v0'\nsession = requests.Session()\nsession.headers = {'Authorization': 'Token %s' % API_TOKEN}\n</code></pre>\n<ul>\n<li>The requests in the following sections use roughly the same pattern:\n<ul>\n<li>Prepare your request payload as a json object</li>\n<li>Prepare your request url</li>\n<li>Send your request using the correct verb (get, post, put, delete)</li>\n<li>Check if the request was successful</li>\n</ul>\n</li>\n</ul>\n<h3>Create a new table</h3>\n<ul>\n<li>\n<p>You will create the tables at first in the <a href=\"https://openenergy-platform.org/dataedit/view/model_draft\" rel=\"nofollow\"><em>model_draft</em></a> schema. After a successful review later, the table will be moved to the final target schema.</p>\n</li>\n<li>\n<p>You need to specify the name of the new table (<code>TABLE_NAME</code>), which should be a valid\npost-gresql table name, without spaces, ideally only containing lower case letters, numbers and underscores.</p>\n</li>\n</ul>\n<h1>make request and check using PUT</h1>\n<p>res = session.put(url, json=data)\nres.raise_for_status()  # check: throws exception if not successful</p>\n<pre><code>### Upload data\n* To upload data, you must first load it into a json structure as a [list](https://www.w3schools.com/python/python_lists.asp \"python lists\") representing data rows, each of which is a [dictionary](https://www.w3schools.com/python/python_dictionaries.asp \"python dictionary\") mapping column names to values.\n\n* In the example, we will use [pandas](https://pypi.org/project/pandas/ \"pandas\") to read data from an Excel workbook (`WORKBOOK, WORKSHEET`) into a [data frame](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html \"data frame\") which we will then convert into a json object. Please note that this step will most likely require some modification to accommodate the specifics of your in-put data.\n\n* In addition to that, at the end, you need to load your data into the specified json structure.\n\n* After that, the data can be uploaded making a request to the API:\n</code></pre>\n<h1>load data into dataframe, convert into json</h1>\n<p>df = pd.read_excel(WORKBOOK, WORKSHEET)\nrecords = df.to_json(orient='records')\nrecords = json.loads(records)</p>\n<h1>prepare request payload</h1>\n<p>data = {'query': records}</p>\n<h1>prepare api url</h1>\n<p>url = API_URL + '/schema/model_draft/tables/' + TABLE_NAME + '/rows/new'</p>\n<h1>make request</h1>\n<p>res = session.post(url, json=data)\nres.raise_for_status()  # check</p>\n\n          </div>"}, "last_serial": 7179886, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "66df2ce100ec90282f418e5ef56626d0", "sha256": "ef318fc4545cebe7b6d16d00469a06984371368e260086f29eb14d780a1eabc7"}, "downloads": -1, "filename": "oep-client-0.0.0.tar.gz", "has_sig": false, "md5_digest": "66df2ce100ec90282f418e5ef56626d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1120, "upload_time": "2020-03-30T06:45:30", "upload_time_iso_8601": "2020-03-30T06:45:30.360929Z", "url": "https://files.pythonhosted.org/packages/4a/3f/2a27efe245d329791eb673f64981557a86f5327461a0c241cce13f9ee305/oep-client-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "be80f3a8e1659b2f4266948b8bab8f2f", "sha256": "e17d3bfc81d4eb56c24220ddb46ccba6ed7e59e8d7ffbce67e290214d8cea842"}, "downloads": -1, "filename": "oep-client-0.1.0.tar.gz", "has_sig": false, "md5_digest": "be80f3a8e1659b2f4266948b8bab8f2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6892, "upload_time": "2020-03-30T13:10:01", "upload_time_iso_8601": "2020-03-30T13:10:01.849928Z", "url": "https://files.pythonhosted.org/packages/3a/87/ec5f89365c5f6fa673e84cfbbe08cdde895871d776025ef8ad95585c98b4/oep-client-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "16f66d7c6647113435038e88b571d1e3", "sha256": "4dd955d8ccec0c41eadb3b089a05acca2e02fdb80ca518f1034b71fe49bf3f3c"}, "downloads": -1, "filename": "oep-client-0.1.1.tar.gz", "has_sig": false, "md5_digest": "16f66d7c6647113435038e88b571d1e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7233, "upload_time": "2020-04-03T07:32:14", "upload_time_iso_8601": "2020-04-03T07:32:14.539618Z", "url": "https://files.pythonhosted.org/packages/e0/27/37f0bf76fa4c8949e55a6a8104d8a9c0c6ab72c84ec4d543d373eb8ffa06/oep-client-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7998cf81cf78a73010a1461144e859d0", "sha256": "0a68e8c6d33743422a307a3a55873eee4806aaaa9d6dbffc1cf118d74a20b647"}, "downloads": -1, "filename": "oep-client-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7998cf81cf78a73010a1461144e859d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7292, "upload_time": "2020-04-03T07:59:42", "upload_time_iso_8601": "2020-04-03T07:59:42.400018Z", "url": "https://files.pythonhosted.org/packages/64/db/303d61e363e44523b52ef07021a4b0c60c657ebbbdbde716e894e95fba41/oep-client-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c7beb4a15f34339baaee20262c74ce6a", "sha256": "cca142e7d4cd3c6f4dfbb3131159c69a1334eeba9d014ea29ec620d1058a1bcb"}, "downloads": -1, "filename": "oep-client-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c7beb4a15f34339baaee20262c74ce6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8977, "upload_time": "2020-04-03T08:37:08", "upload_time_iso_8601": "2020-04-03T08:37:08.227870Z", "url": "https://files.pythonhosted.org/packages/2a/dd/d78d4b53998cbe923c42b5a5412c97327acf1d1874bee3ca34902c6005eb/oep-client-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "cabe4b02d6a4927ca6b3adc3b1f72dfe", "sha256": "51ef25b7205adbb52318d4e51e9a4776401236067586f6b1109121702538b6ef"}, "downloads": -1, "filename": "oep-client-0.2.1.tar.gz", "has_sig": false, "md5_digest": "cabe4b02d6a4927ca6b3adc3b1f72dfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9620, "upload_time": "2020-04-03T09:23:49", "upload_time_iso_8601": "2020-04-03T09:23:49.856220Z", "url": "https://files.pythonhosted.org/packages/0c/2d/cd044741878e731a090343080822af16b72ea6fe91ebcaac5b4334ad7798/oep-client-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8fc1c02304ad3635ddcf173c9872bedb", "sha256": "22f3e9ff84f4989bc5a54913c2183087388354602a3586027b7c048879156bfd"}, "downloads": -1, "filename": "oep-client-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8fc1c02304ad3635ddcf173c9872bedb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9736, "upload_time": "2020-05-06T12:05:28", "upload_time_iso_8601": "2020-05-06T12:05:28.409222Z", "url": "https://files.pythonhosted.org/packages/f8/cd/2dc4f1c4ea68c02b91bd49c44a68a649caddd5dd4aed0538043df69e5a6a/oep-client-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "eb1acdb4d13db8d52909952db59b1e64", "sha256": "f70fac8cb0b01b730ae0475b785812ff6a76f53f1b98dda5cd379498bcf5e285"}, "downloads": -1, "filename": "oep-client-0.4.0.tar.gz", "has_sig": false, "md5_digest": "eb1acdb4d13db8d52909952db59b1e64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9838, "upload_time": "2020-05-06T12:16:57", "upload_time_iso_8601": "2020-05-06T12:16:57.632903Z", "url": "https://files.pythonhosted.org/packages/b3/a2/b9a465add9c25817610fc2e7b3ffe3edfc01f723dcfaa1193a5e676337d5/oep-client-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "0ad7a196af842271b381a0fd6a37c739", "sha256": "6744393cf11f39db79014da7af706d1cc3bf0eefa8fd67ec380eadb24019ba2c"}, "downloads": -1, "filename": "oep-client-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0ad7a196af842271b381a0fd6a37c739", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9844, "upload_time": "2020-05-06T12:20:01", "upload_time_iso_8601": "2020-05-06T12:20:01.591646Z", "url": "https://files.pythonhosted.org/packages/5a/2a/3026ce0916f843d745cdc4315791b6b2b888ae8f79ae1238b5a4f7654900/oep-client-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ad7a196af842271b381a0fd6a37c739", "sha256": "6744393cf11f39db79014da7af706d1cc3bf0eefa8fd67ec380eadb24019ba2c"}, "downloads": -1, "filename": "oep-client-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0ad7a196af842271b381a0fd6a37c739", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9844, "upload_time": "2020-05-06T12:20:01", "upload_time_iso_8601": "2020-05-06T12:20:01.591646Z", "url": "https://files.pythonhosted.org/packages/5a/2a/3026ce0916f843d745cdc4315791b6b2b888ae8f79ae1238b5a4f7654900/oep-client-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:00 2020"}