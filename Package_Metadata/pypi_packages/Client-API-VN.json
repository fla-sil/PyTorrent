{"info": {"author": "Daniel Thonon", "author_email": "d.thonon9@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "=============\nClient_API_VN\n=============\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n.. image:: https://img.shields.io/pypi/status/Client-API-VN\n    :alt: PyPI - Status\n.. image:: https://img.shields.io/pypi/pyversions/Client-API-VN\n    :alt: PyPI - Python Version\n.. image:: https://img.shields.io/pypi/l/Client-API-VN\n    :alt: PyPI - License\n\nDescription\n===========\n\nPython applications that use Biolovision/VisioNature (VN) API to:\n\n- download data from VN sites and stores it to a Postgresql database.\n- update sightings directly in VN site\n\nApplications are available either as:\n\n- Python modules from PyPI\n- Docker images from Docker Hub\n\nThey are tested under Linux Ubuntu or Debian. Other Linux\ndistributions could work. Windows is not tested at all and will\nprobably not work.\n\nInstallation - Python\n---------------------\n\nThese instructions present the steps required to install the\nPython applications.\n\nCreate a python virtual environment, activate it and update basic tools::\n\n    python3 -m venv VN_env\n    source VN_env/bin/activate\n    python -m pip install --upgrade pip\n\nInstall from PyPI::\n\n    pip install Client-API-VN\n\nInstallation - Docker\n---------------------\n\nThese instructions present the steps required to install the\nDocker applications::\n\n    docker pull dthonon/client-api-vn\n    docker run --name xfer_vn \\\n               --mount source=xfer_vn,target=/root \\\n               --workdir /root \\\n               --tty --interactive \\\n               dthonon/client-api-vn bash\n\nThe following steps are the common to both Python and Docker installation.\n\nGetting Started - transfer_vn\n-----------------------------\n\nInitialize the sample YAML file in your HOME directory and edit with\nyour local details. The YAML file is self documented::\n\n    transfer_vn --init .evn_your_site.yaml\n    editor $HOME/.evn_your_site.yaml\n\nCreate the database and tables::\n\n    transfer_vn --db_create --json_tables_create --col_tables_create .evn_your_site.yaml\n\nYou can then download data, as enabled and filtered in the YAML file.\nBeware that, depending on the volume of observations,\nthis can take several hours. We recommend starting with a small taxonomic\ngroup first::\n\n    transfer_vn --full .evn_your_site.yaml\n\nAfter this full download, data can be updated. For observations, only new,\nmodified or deleted observations are downloaded. For other controlers, a full\ndownload is always performed. Each controler runs on its own schedule,\ndefined in the YAML configuration file. To create or update, after\nmodifying the configuration file, the schedule::\n\n    transfer_vn --schedule .evn_your_site.yaml\n\nOnce this is done, you can update the database with new observations::\n\n    transfer_vn --update .evn_your_site.yaml\n\nNote: this script should run hourly or dayly in a cron job.\nIt must run at least every week.\n\nGetting Started - update_vn\n----------------------------\n\nInitialize the sample YAML file in your HOME directory and edit with\nyour local details. The YAML file is self documented::\n\n    update_vn --init .evn_your_site.yaml\n    editor $HOME/.evn_your_site.yaml\n\n\nPrerequisites\n-------------\n\nFor Linux and Postgresql installation, refer to `server installation`_\n\n.. _server installation: docs/server_install.rst\n\nInstallation requires the following python module::\n\n    pip\n\nAll other python dependencies are managed by pip install.\n\nCommand-line options - transfer_vn\n----------------------------------\n\nThe application runs as::\n\n    transfer_vn options config\n\nwhere:\n\n- options  command line options described below\n- config   YAML file, located in $HOME directory, described in sample file\n\n-h, --help             Prints help and exits\n--version              Print version number\n--verbose              Increase output verbosity\n--quiet                Reduce output verbosity\n--init                 Initialize the YAML configuration file\n--db_drop              Delete if exists database and roles\n--db_create            Create database and roles\n--json_tables_create   Create or recreate json tables\n--col_tables_create    Create or recreate colums based tables\n--full                 Perform a full download\n--update               Perform an incremental download\n--schedule             Create or update the incremental update schedule\n--status               Print downloading status (schedule, errors...)\n--count                Count observations by site and taxo_group\n--profile              Gather and print profiling times\n\nCommand-line options - update_vn\n----------------------------------\n\nThe application runs as::\n\n    update_vn options config input\n\nwhere:\n\n- options  command line options described below\n- config   YAML file, located in $HOME directory, described in sample file\n- input    CSV file listing sightings to be updated\n\n-h, --help             Prints help and exits\n--version              Print version number\n--verbose              Increase output verbosity\n--quiet                Reduce output verbosity\n--init                 Initialize the YAML configuration file\n\nCSV input file must contain the following columns:\n\n- site, as defined in YAML site section\n- id_universal of the sighting to modify\n- path to the attribute to modify, in JSONPath syntax\n- operation:\n  - replace: add if not present or update a sighting attribute\n- value: new value inserted or updated\n\nFor example::\n\n    site;id_universal;path;operation;value\n    Is\u00e8re;2246086;$['data']['sightings'][0]['observers'][0]['atlas_code'];replace;4\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://framagit.org/lpo/Client_API_VN", "keywords": "", "license": "gpl3", "maintainer": "", "maintainer_email": "", "name": "Client-API-VN", "package_url": "https://pypi.org/project/Client-API-VN/", "platform": "any", "project_url": "https://pypi.org/project/Client-API-VN/", "project_urls": {"BugTracker": "https://framagit.org/lpo/Client_API_VN/issues", "Documentation": "https://client-api-vn1.readthedocs.io/en/latest/", "Homepage": "https://framagit.org/lpo/Client_API_VN"}, "release_url": "https://pypi.org/project/Client-API-VN/2.6.4/", "requires_dist": ["apscheduler", "beautifulsoup4", "docutils", "petl", "psycopg2-binary", "pyexpander", "pyproj", "requests", "requests-oauthlib", "setuptools-scm", "SQLAlchemy", "strictyaml", "tabulate", "towncrier", "xmltodict", "yappi", "pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": ">=3.5", "summary": "Python API to Biolovision API and applications using it", "version": "2.6.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5aad6a181a1d8445f447bebf09f6a6fa93e2f82/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f436c69656e742d4150492d564e\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3518dde3db2055154499b484e818177c08ab7345/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f436c69656e742d4150492d564e\">\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81869a7de0b4f4e9a5f4c3e75c2e510891dccc8e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f436c69656e742d4150492d564e\">\n<div id=\"description\">\n<h2>Description</h2>\n<p>Python applications that use Biolovision/VisioNature (VN) API to:</p>\n<ul>\n<li>download data from VN sites and stores it to a Postgresql database.</li>\n<li>update sightings directly in VN site</li>\n</ul>\n<p>Applications are available either as:</p>\n<ul>\n<li>Python modules from PyPI</li>\n<li>Docker images from Docker Hub</li>\n</ul>\n<p>They are tested under Linux Ubuntu or Debian. Other Linux\ndistributions could work. Windows is not tested at all and will\nprobably not work.</p>\n<div id=\"installation-python\">\n<h3>Installation - Python</h3>\n<p>These instructions present the steps required to install the\nPython applications.</p>\n<p>Create a python virtual environment, activate it and update basic tools:</p>\n<pre>python3 -m venv VN_env\nsource VN_env/bin/activate\npython -m pip install --upgrade pip\n</pre>\n<p>Install from PyPI:</p>\n<pre>pip install Client-API-VN\n</pre>\n</div>\n<div id=\"installation-docker\">\n<h3>Installation - Docker</h3>\n<p>These instructions present the steps required to install the\nDocker applications:</p>\n<pre>docker pull dthonon/client-api-vn\ndocker run --name xfer_vn \\\n           --mount source=xfer_vn,target=/root \\\n           --workdir /root \\\n           --tty --interactive \\\n           dthonon/client-api-vn bash\n</pre>\n<p>The following steps are the common to both Python and Docker installation.</p>\n</div>\n<div id=\"getting-started-transfer-vn\">\n<h3>Getting Started - transfer_vn</h3>\n<p>Initialize the sample YAML file in your HOME directory and edit with\nyour local details. The YAML file is self documented:</p>\n<pre>transfer_vn --init .evn_your_site.yaml\neditor $HOME/.evn_your_site.yaml\n</pre>\n<p>Create the database and tables:</p>\n<pre>transfer_vn --db_create --json_tables_create --col_tables_create .evn_your_site.yaml\n</pre>\n<p>You can then download data, as enabled and filtered in the YAML file.\nBeware that, depending on the volume of observations,\nthis can take several hours. We recommend starting with a small taxonomic\ngroup first:</p>\n<pre>transfer_vn --full .evn_your_site.yaml\n</pre>\n<p>After this full download, data can be updated. For observations, only new,\nmodified or deleted observations are downloaded. For other controlers, a full\ndownload is always performed. Each controler runs on its own schedule,\ndefined in the YAML configuration file. To create or update, after\nmodifying the configuration file, the schedule:</p>\n<pre>transfer_vn --schedule .evn_your_site.yaml\n</pre>\n<p>Once this is done, you can update the database with new observations:</p>\n<pre>transfer_vn --update .evn_your_site.yaml\n</pre>\n<p>Note: this script should run hourly or dayly in a cron job.\nIt must run at least every week.</p>\n</div>\n<div id=\"getting-started-update-vn\">\n<h3>Getting Started - update_vn</h3>\n<p>Initialize the sample YAML file in your HOME directory and edit with\nyour local details. The YAML file is self documented:</p>\n<pre>update_vn --init .evn_your_site.yaml\neditor $HOME/.evn_your_site.yaml\n</pre>\n</div>\n<div id=\"prerequisites\">\n<h3>Prerequisites</h3>\n<p>For Linux and Postgresql installation, refer to <a href=\"docs/server_install.rst\" rel=\"nofollow\">server installation</a></p>\n<p>Installation requires the following python module:</p>\n<pre>pip\n</pre>\n<p>All other python dependencies are managed by pip install.</p>\n</div>\n<div id=\"command-line-options-transfer-vn\">\n<h3>Command-line options - transfer_vn</h3>\n<p>The application runs as:</p>\n<pre>transfer_vn options config\n</pre>\n<p>where:</p>\n<ul>\n<li>options  command line options described below</li>\n<li>config   YAML file, located in $HOME directory, described in sample file</li>\n</ul>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>Prints help and exits</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--version</span></kbd></td>\n<td>Print version number</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--verbose</span></kbd></td>\n<td>Increase output verbosity</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--quiet</span></kbd></td>\n<td>Reduce output verbosity</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--init</span></kbd></td>\n<td>Initialize the YAML configuration file</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--db_drop</span></kbd></td>\n<td>Delete if exists database and roles</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--db_create</span></kbd></td>\n<td>Create database and roles</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--json_tables_create</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Create or recreate json tables</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--col_tables_create</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Create or recreate colums based tables</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--full</span></kbd></td>\n<td>Perform a full download</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--update</span></kbd></td>\n<td>Perform an incremental download</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--schedule</span></kbd></td>\n<td>Create or update the incremental update schedule</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--status</span></kbd></td>\n<td>Print downloading status (schedule, errors\u2026)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--count</span></kbd></td>\n<td>Count observations by site and taxo_group</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--profile</span></kbd></td>\n<td>Gather and print profiling times</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"command-line-options-update-vn\">\n<h3>Command-line options - update_vn</h3>\n<p>The application runs as:</p>\n<pre>update_vn options config input\n</pre>\n<p>where:</p>\n<ul>\n<li>options  command line options described below</li>\n<li>config   YAML file, located in $HOME directory, described in sample file</li>\n<li>input    CSV file listing sightings to be updated</li>\n</ul>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>Prints help and exits</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--version</span></kbd></td>\n<td>Print version number</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--verbose</span></kbd></td>\n<td>Increase output verbosity</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--quiet</span></kbd></td>\n<td>Reduce output verbosity</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--init</span></kbd></td>\n<td>Initialize the YAML configuration file</td></tr>\n</tbody>\n</table>\n<p>CSV input file must contain the following columns:</p>\n<ul>\n<li>site, as defined in YAML site section</li>\n<li>id_universal of the sighting to modify</li>\n<li>path to the attribute to modify, in JSONPath syntax</li>\n<li>operation:\n- replace: add if not present or update a sighting attribute</li>\n<li>value: new value inserted or updated</li>\n</ul>\n<p>For example:</p>\n<pre>site;id_universal;path;operation;value\nIs\u00e8re;2246086;$['data']['sightings'][0]['observers'][0]['atlas_code'];replace;4\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6931367, "releases": {"2.5.2": [{"comment_text": "", "digests": {"md5": "92aee60fa2893a6c81b6b7e7babee515", "sha256": "3ea4db55c6e9497940745f13559b07fda79c4f005f00b256bf85b27e177ad49e"}, "downloads": -1, "filename": "Client_API_VN-2.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "92aee60fa2893a6c81b6b7e7babee515", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 64980, "upload_time": "2019-10-06T21:58:08", "upload_time_iso_8601": "2019-10-06T21:58:08.554962Z", "url": "https://files.pythonhosted.org/packages/14/4b/55e9ee621a211ede7e52384c8462f91f18bec34297dabc6341c2f5088952/Client_API_VN-2.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57b9d299232bb8289b95ce063b2a98f0", "sha256": "fee7f4e26462454e2f114dd7583dbf021d0ff4eac87b95085e0dca1e55f6e707"}, "downloads": -1, "filename": "Client_API_VN-2.5.2.tar.gz", "has_sig": false, "md5_digest": "57b9d299232bb8289b95ce063b2a98f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 128345, "upload_time": "2019-10-06T21:58:10", "upload_time_iso_8601": "2019-10-06T21:58:10.581877Z", "url": "https://files.pythonhosted.org/packages/b1/08/a326da3850306204753d3c42777ddab31838b7f62da3f1ce4701a5defa3a/Client_API_VN-2.5.2.tar.gz", "yanked": false}], "2.6.3": [{"comment_text": "", "digests": {"md5": "62b360308081c188b7995facfedb74fe", "sha256": "1bf8d126671aa9b81a47b89189f24a10a27a206b729b33f592d4335cff8c03ca"}, "downloads": -1, "filename": "Client_API_VN-2.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "62b360308081c188b7995facfedb74fe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 70596, "upload_time": "2020-03-14T07:09:55", "upload_time_iso_8601": "2020-03-14T07:09:55.353681Z", "url": "https://files.pythonhosted.org/packages/df/f8/c8eb311e5e6e1517ec842fb26d4877e6e4e202bc0e303bca90827369c646/Client_API_VN-2.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a58e5cdc18f17569c29aea3a18323c41", "sha256": "84c89ad58635c4308a12a423a77f5696f70d5207ab4c3447ca2ff108d1627f28"}, "downloads": -1, "filename": "Client_API_VN-2.6.3.tar.gz", "has_sig": false, "md5_digest": "a58e5cdc18f17569c29aea3a18323c41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 132740, "upload_time": "2020-03-14T07:09:57", "upload_time_iso_8601": "2020-03-14T07:09:57.328753Z", "url": "https://files.pythonhosted.org/packages/55/c3/be759bdcc1b06ef0c7af74feb14457477a7b82a61ad3d2f1983d54e24e27/Client_API_VN-2.6.3.tar.gz", "yanked": false}], "2.6.4": [{"comment_text": "", "digests": {"md5": "19cd632b3218f8191669e71a4a5a0064", "sha256": "5fde9a92a3333caf8c387f4aa4f59a4256ca3bec0b98bf55f5ac4ec0197a80af"}, "downloads": -1, "filename": "Client_API_VN-2.6.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "19cd632b3218f8191669e71a4a5a0064", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 76609, "upload_time": "2020-04-01T21:25:50", "upload_time_iso_8601": "2020-04-01T21:25:50.549271Z", "url": "https://files.pythonhosted.org/packages/06/17/fc0c436552e392b8a895073142d37ff7f1add28906f76280b82fc3b72b7b/Client_API_VN-2.6.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0db8de62d3fa652b0d4c9988b88e38e", "sha256": "109748ec954f363509e437576d26184b651806e4f8f97eb60e4ba13430482049"}, "downloads": -1, "filename": "Client_API_VN-2.6.4.tar.gz", "has_sig": false, "md5_digest": "b0db8de62d3fa652b0d4c9988b88e38e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 137945, "upload_time": "2020-04-01T21:25:52", "upload_time_iso_8601": "2020-04-01T21:25:52.478112Z", "url": "https://files.pythonhosted.org/packages/f3/bd/ec494c4e612ea48bddcdac910b80f585f583b17214b7d326a9613ddd5752/Client_API_VN-2.6.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19cd632b3218f8191669e71a4a5a0064", "sha256": "5fde9a92a3333caf8c387f4aa4f59a4256ca3bec0b98bf55f5ac4ec0197a80af"}, "downloads": -1, "filename": "Client_API_VN-2.6.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "19cd632b3218f8191669e71a4a5a0064", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 76609, "upload_time": "2020-04-01T21:25:50", "upload_time_iso_8601": "2020-04-01T21:25:50.549271Z", "url": "https://files.pythonhosted.org/packages/06/17/fc0c436552e392b8a895073142d37ff7f1add28906f76280b82fc3b72b7b/Client_API_VN-2.6.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0db8de62d3fa652b0d4c9988b88e38e", "sha256": "109748ec954f363509e437576d26184b651806e4f8f97eb60e4ba13430482049"}, "downloads": -1, "filename": "Client_API_VN-2.6.4.tar.gz", "has_sig": false, "md5_digest": "b0db8de62d3fa652b0d4c9988b88e38e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 137945, "upload_time": "2020-04-01T21:25:52", "upload_time_iso_8601": "2020-04-01T21:25:52.478112Z", "url": "https://files.pythonhosted.org/packages/f3/bd/ec494c4e612ea48bddcdac910b80f585f583b17214b7d326a9613ddd5752/Client_API_VN-2.6.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:00 2020"}