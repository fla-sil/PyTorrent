{"info": {"author": "Roop Sai Pavan Tej Pendyala", "author_email": "roopsai84@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Number Functions\n\nA Python Package of various Number(Integer) Functions for computations\n\n## Various Functions and their Description\nYou can call directly these functions by importing this package\n\n1.quotient(a,b) //It takes two arguments and returns quotient i.e a/b\n\n2.remainder(a,b) //It takes two arguments and returns remainder i.e a%b\n\n3.floordiv(a,b) //It takes two arguments and returns quotient along with specific floor and ceil i.e a//b\n\n4.product(a,b) //It takes two arguments and returns product i.e a * b\n\n5.power(a,b) //It takes two arguments and returns a power b\n\n\n6.sum(a,b) //It takes two arguments and returns sum i.e a+b\n\n7.subtract(a,b) //It takes two arguments and returns subtraction i.e a-b\n\n8.iseven(n) //It takes one argument and returns true if passed argument is even otherwise false\n\n9.isodd(n) //It takes one argument and returns true if passed argument is odd otherwise false\n\n10.prteven(n) //It takes one argument and prints even digits of that number\n\n11.prtodd(n) //It takes one argument and prints odd digits of that number\n\n12.digcount(n) //It takes one argument and returns the count of digits of given number\n\n13.prtevencount(n) //It takes one argument and prints the count of even digits of given number\n\n14.prtoddcount(n) //It takes one argument and prints the count of odd digits of given number\n\n15.evensum(n) //It takes one argument and returns the sum of even digits of given number\n\n16.oddsum(n) //It takes one argument and returns the sum of odd digits of given number\n\n17.digitsum(n) //It takes one argument and returns the sum of all digits of given number\n\n18.isprime(n) //It takes one argument and returns true if passed argument is prime number otherwise false\n\n19.primedigitcount(n) //It takes one argument and returns count of prime digits in given number\n\n20.prtprime(n) //It takes one argument and prints the prime digits of given number\n\n21.primedigitsum(n) //It takes one argument and returns sum of prime digits  of given number\n\n22.digreverse(n) //It takes one argument and returns the number which is reverse of given number\n\n23.ispalindrome(n) //It takes one argument and returns true if passed argument is palindrome otherwise false\n\n24.factorial(n) //It takes one argument and returns factorial of given number\n\n25.factor(n) //It takes one argument and returns factors of given number\n\n26.factorcount(n) //It takes one argument and returns count of factors of given number\n\n27.factorsum(n) //It takes one argument and returns sum of factors of given number\n\n28.isstrong(n) //It takes one argument and returns true if passed argument is strong otherwise false\n\nSTRONG:\n-----------\nIf sum of individual digits factorial is equal to given number then it is called Strong number\nEx:-\n====\n145\n\n\n29.isperfect(n) //It takes one argument and return true if passed argument is perfect otherwise false\n\nPERFECT:\n------------------\nIf sum of factors of given number except that one which is equal to given number is called Perfect number\nEx:-\n====\n28\n\n30.isarmstrong(n) //It takes one argument and return true if passed argument is armstrong otherwise false \n\nARMSTRONG:\n-------------------------\nAn armstrong number is a number which equal to the sum of the cubes of its individual digits\nEx:\n====\n153\n\n31.digitproduct(n) //It returns product of digits of given number(number should not contains zeroes(0))\n\n\n\n\n###  Usage\n\nFollowing query on terminal will provide the following\n\n```\nINPUT:\n-----------------------------------------------\nimport Numfunctions\na=Num-functions.isprime(407)\nprint (a)\n\nb=Numfunctions.isodd(51432)\nprint(b)\n\nc=Numfunctions.digreverse(995186)\nprint(c)\n\nNumfunctions.prteven(123456789)\n\nNumfunctions.prtprime(123456789123456789)\n\nOUTPUT:\n----------------------------------------------\nFalse\nFalse\n681599\n2 4 6 8\n2 3 5 7 2 3 5 7\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RoopSai-PavanTej/NumberFunctions", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "NumFunc", "package_url": "https://pypi.org/project/NumFunc/", "platform": "", "project_url": "https://pypi.org/project/NumFunc/", "project_urls": {"Homepage": "https://github.com/RoopSai-PavanTej/NumberFunctions"}, "release_url": "https://pypi.org/project/NumFunc/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Computations on Numbers", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Number Functions</h1>\n<p>A Python Package of various Number(Integer) Functions for computations</p>\n<h2>Various Functions and their Description</h2>\n<p>You can call directly these functions by importing this package</p>\n<p>1.quotient(a,b) //It takes two arguments and returns quotient i.e a/b</p>\n<p>2.remainder(a,b) //It takes two arguments and returns remainder i.e a%b</p>\n<p>3.floordiv(a,b) //It takes two arguments and returns quotient along with specific floor and ceil i.e a//b</p>\n<p>4.product(a,b) //It takes two arguments and returns product i.e a * b</p>\n<p>5.power(a,b) //It takes two arguments and returns a power b</p>\n<p>6.sum(a,b) //It takes two arguments and returns sum i.e a+b</p>\n<p>7.subtract(a,b) //It takes two arguments and returns subtraction i.e a-b</p>\n<p>8.iseven(n) //It takes one argument and returns true if passed argument is even otherwise false</p>\n<p>9.isodd(n) //It takes one argument and returns true if passed argument is odd otherwise false</p>\n<p>10.prteven(n) //It takes one argument and prints even digits of that number</p>\n<p>11.prtodd(n) //It takes one argument and prints odd digits of that number</p>\n<p>12.digcount(n) //It takes one argument and returns the count of digits of given number</p>\n<p>13.prtevencount(n) //It takes one argument and prints the count of even digits of given number</p>\n<p>14.prtoddcount(n) //It takes one argument and prints the count of odd digits of given number</p>\n<p>15.evensum(n) //It takes one argument and returns the sum of even digits of given number</p>\n<p>16.oddsum(n) //It takes one argument and returns the sum of odd digits of given number</p>\n<p>17.digitsum(n) //It takes one argument and returns the sum of all digits of given number</p>\n<p>18.isprime(n) //It takes one argument and returns true if passed argument is prime number otherwise false</p>\n<p>19.primedigitcount(n) //It takes one argument and returns count of prime digits in given number</p>\n<p>20.prtprime(n) //It takes one argument and prints the prime digits of given number</p>\n<p>21.primedigitsum(n) //It takes one argument and returns sum of prime digits  of given number</p>\n<p>22.digreverse(n) //It takes one argument and returns the number which is reverse of given number</p>\n<p>23.ispalindrome(n) //It takes one argument and returns true if passed argument is palindrome otherwise false</p>\n<p>24.factorial(n) //It takes one argument and returns factorial of given number</p>\n<p>25.factor(n) //It takes one argument and returns factors of given number</p>\n<p>26.factorcount(n) //It takes one argument and returns count of factors of given number</p>\n<p>27.factorsum(n) //It takes one argument and returns sum of factors of given number</p>\n<p>28.isstrong(n) //It takes one argument and returns true if passed argument is strong otherwise false</p>\n<h2>STRONG:</h2>\n<h1>If sum of individual digits factorial is equal to given number then it is called Strong number\nEx:-</h1>\n<p>145</p>\n<p>29.isperfect(n) //It takes one argument and return true if passed argument is perfect otherwise false</p>\n<h2>PERFECT:</h2>\n<h1>If sum of factors of given number except that one which is equal to given number is called Perfect number\nEx:-</h1>\n<p>28</p>\n<p>30.isarmstrong(n) //It takes one argument and return true if passed argument is armstrong otherwise false</p>\n<h2>ARMSTRONG:</h2>\n<h1>An armstrong number is a number which equal to the sum of the cubes of its individual digits\nEx:</h1>\n<p>153</p>\n<p>31.digitproduct(n) //It returns product of digits of given number(number should not contains zeroes(0))</p>\n<h3>Usage</h3>\n<p>Following query on terminal will provide the following</p>\n<pre><code>INPUT:\n-----------------------------------------------\nimport Numfunctions\na=Num-functions.isprime(407)\nprint (a)\n\nb=Numfunctions.isodd(51432)\nprint(b)\n\nc=Numfunctions.digreverse(995186)\nprint(c)\n\nNumfunctions.prteven(123456789)\n\nNumfunctions.prtprime(123456789123456789)\n\nOUTPUT:\n----------------------------------------------\nFalse\nFalse\n681599\n2 4 6 8\n2 3 5 7 2 3 5 7\n\n</code></pre>\n\n          </div>"}, "last_serial": 6596212, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "405b5e8c252e5516486a06285fcf372f", "sha256": "42c0ee97539077ffb1c60996a635259d8bc6f9f82eab6f477e94de95c27d4769"}, "downloads": -1, "filename": "NumFunc-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "405b5e8c252e5516486a06285fcf372f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3886, "upload_time": "2020-02-09T03:16:30", "upload_time_iso_8601": "2020-02-09T03:16:30.463820Z", "url": "https://files.pythonhosted.org/packages/51/68/63ed7484dff1a612b2ea783a5990de28c16a1d9c062113f32fbac19962a1/NumFunc-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a6da0efec0d6590121a69d788373d99", "sha256": "d7e1f694fe46e8ca49ed44a6331986ae089c4e951f9112b9d013f16a12d021d0"}, "downloads": -1, "filename": "NumFunc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5a6da0efec0d6590121a69d788373d99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4216, "upload_time": "2020-02-09T03:16:32", "upload_time_iso_8601": "2020-02-09T03:16:32.747770Z", "url": "https://files.pythonhosted.org/packages/a1/06/eab65db5140582e30ca99d9b16a331c0e3e5a558cadf83f46c78bf451c2a/NumFunc-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "405b5e8c252e5516486a06285fcf372f", "sha256": "42c0ee97539077ffb1c60996a635259d8bc6f9f82eab6f477e94de95c27d4769"}, "downloads": -1, "filename": "NumFunc-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "405b5e8c252e5516486a06285fcf372f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3886, "upload_time": "2020-02-09T03:16:30", "upload_time_iso_8601": "2020-02-09T03:16:30.463820Z", "url": "https://files.pythonhosted.org/packages/51/68/63ed7484dff1a612b2ea783a5990de28c16a1d9c062113f32fbac19962a1/NumFunc-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a6da0efec0d6590121a69d788373d99", "sha256": "d7e1f694fe46e8ca49ed44a6331986ae089c4e951f9112b9d013f16a12d021d0"}, "downloads": -1, "filename": "NumFunc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5a6da0efec0d6590121a69d788373d99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4216, "upload_time": "2020-02-09T03:16:32", "upload_time_iso_8601": "2020-02-09T03:16:32.747770Z", "url": "https://files.pythonhosted.org/packages/a1/06/eab65db5140582e30ca99d9b16a331c0e3e5a558cadf83f46c78bf451c2a/NumFunc-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:13 2020"}