{"info": {"author": "Sofya Lipnitskaya", "author_email": "lipnitskaya.sofya@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Education :: Testing", "Topic :: Office/Business", "Topic :: Other/Nonlisted Topic", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries", "Typing :: Typed"], "description": "# Experiment Runner (exp-runner)\n\n**exp-runner** is a simple and extensible framework for data analysis and machine learning experiments in Python.\n\n#### Structure\nThe framework includes following step:\n1. _Data loading_\n2. _Data transformation_\n3. _Model training and testing_\n4. _Performance evaluation_\n5. _Results saving_\n\n#### Main features\n* _Generability_: Variaty of models and methods are supported and it can be used in a number of tasks \n(such as preprocessing, dimensionality reduction, classification, \nregression, clustering, statistical tests, etc.)\n* _Flexability_: Steps can be easily skipped and/or included\n* _Dynamic loading_: Automatically imports modules during runtime - no additional lines are needed\n\n### Installation\n```bash\npip install exp-runner\n```\n\n### Usage \n\nLet's say, your project has the following structure:\n\n    MyAwesomeProject/\n            main.py\n            my_custom_module.py\n\n            data/\n                    data_00.npy\n                    data_01.npy\n                    ...\n                    data_NN.npy\n\n            protocols/\n                    experiment_config.json\n\n            results/\n\n\n#### Just give me a code!\nYou just need to describe your **framework** in the [JSON](https://json.org) configuration file:\n\n##### experiment_config.json\n```JSON\n{\n  \"Setup\": {\n    \"description\": \"You can add detailed description of the experiment\",\n    \"random_seed\": 42\n  },\n  \"Dataset\": {\n    \"class\": \"my_custom_module.MyAwesomeDataLoader\",\n    \"args\": {\"path_to_data\": \"data/*.npy\"}\n  },\n  \"Transforms\": [\n    {\n      \"class\": \"sklearn.decomposition.PCA\",\n      \"args\": {\"n_components\": 3, \"whiten\": true}\n    }\n  ],\n  \"Model\": {\n    \"class\": \"sklearn.cluster.KMeans\",\n    \"args\": {\"n_clusters\": 3, \"n_jobs\": -1, \"verbose\": 0}\n  },\n  \"Metric\": {\n    \"class\": \"my_custom_module.SklearnMetricWrapper\",\n    \"args\": {\"metric\": \"normalized_mutual_info_score\"}\n  },\n  \"Saver\": {\n    \"class\": \"my_custom_module.CSVReport\",\n    \"args\": {\"path_to_output\": \"results/evaluation_results.csv\", \"sep\": \";\"}\n  }\n}\n```\n<details><summary>Here are aforementioned classes (click):</summary>\n<p>\n\n##### my_custom_module.py\n\n```python\nimport os\nimport glob\nimport numpy as np\nimport sklearn.metrics\n\nfrom exp_runner import Dataset, Metric, Saver\n\nfrom collections import defaultdict\nfrom typing import Any, Dict, List, Union, NoReturn, Iterable, Callable\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\n\n\nclass MyAwesomeDataLoader(Dataset):\n\n    def __init__(self, path_to_data: str, test_size: float = 0.1, training: bool = True):\n\n        super(MyAwesomeDataLoader, self).__init__()\n\n        self._samples = dict()\n        self._labels = dict()\n        self._splits = defaultdict(dict)\n\n        paths_to_data = glob.glob(path_to_data)\n\n        for path in paths_to_data:\n            fname = os.path.basename(path)\n\n            data = np.load(path)\n            X = data[:, :-1]   \n            y = data[:, -1]\n\n            indices_train, indices_test = next(StratifiedShuffleSplit(\n                test_size=test_size\n            ).split(X, y))\n\n            self._samples[fname] = X\n            self._labels[fname] = y\n            self._splits[fname]['train'] = indices_train\n            self._splits[fname]['test'] = indices_test\n\n        self._indices = list(self._samples.keys())\n\n        self._training = training\n\n    def __getitem__(self, index: int) -> Dict[str, Dict[str, Union[str, np.ndarray]]]:\n        if not (0 <= index < len(self._indices)):\n            raise IndexError\n\n        fname = self._indices[index]\n\n        item = {\n        'X': self._samples[fname][self._splits[fname]['train'] if self.training else self._splits[fname]['test']],\n        'y': self._labels[fname][self._splits[fname]['train'] if self.training else self._splits[fname]['test']]\n        }\n\n        item['desc'] = 'it is possible to add description for each data sample'\n\n        return {'filename': fname, 'item': item}\n\n    def __len__(self) -> int:\n        return len(self._indices)\n\n    @property\n    def training(self):\n        return self._training\n\n\nclass SklearnMetricWrapper(Metric):\n\n    def __init__(self, metric: str):\n        super(SklearnMetricWrapper, self).__init__()\n\n        metric = getattr(sklearn.metrics, metric)\n        self._metric: Callable[[Iterable[Union[float, int]], Iterable[Union[float, int]]], float] = metric\n\n    def __call__(self, y_true: Iterable[Union[float, int]], y_pred: Iterable[Union[float, int]]) -> float:\n        return self._metric(y_true, y_pred)\n\n\nclass CSVReport(Saver):\n\n    def __init__(self, path_to_output: str, sep: str = ';', append: bool = True):\n        super(CSVReport, self).__init__()\n\n        self.path_to_output = path_to_output\n        self.sep = sep\n        self.mode = 'a+' if append else 'w+'\n\n    def save(self, report: List[Dict[str, Any]]) -> NoReturn:\n        with open(self.path_to_output, self.mode) as csv:\n            for entry in report:\n                line = self.sep.join([\n                    entry['filename'],\n                    entry['desc'],\n                    entry['perf']\n                ]) + '\\n'\n                csv.write(line)\n```\n\n</p>\n</details>\n\nFinally, to run your experiment type in your terminal:\n```bash\ncd /path/to/MyAwesomeProject\npython main.py --config protocols/experiment_config.json\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/slipnitskaya/exp-runner.git", "keywords": "pipeline framework modelling model training testing classification regression clustering,pipeline framework data analysis", "license": "", "maintainer": "", "maintainer_email": "", "name": "exp-runner", "package_url": "https://pypi.org/project/exp-runner/", "platform": "", "project_url": "https://pypi.org/project/exp-runner/", "project_urls": {"Homepage": "https://github.com/slipnitskaya/exp-runner.git"}, "release_url": "https://pypi.org/project/exp-runner/0.1.0b2/", "requires_dist": ["tqdm (>=4.28.1)", "numpy (>=1.15.4)", "scikit-learn (>=0.20.1)"], "requires_python": ">=3.6", "summary": "Framework for data analysis and machine learning experiments", "version": "0.1.0b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Experiment Runner (exp-runner)</h1>\n<p><strong>exp-runner</strong> is a simple and extensible framework for data analysis and machine learning experiments in Python.</p>\n<h4>Structure</h4>\n<p>The framework includes following step:</p>\n<ol>\n<li><em>Data loading</em></li>\n<li><em>Data transformation</em></li>\n<li><em>Model training and testing</em></li>\n<li><em>Performance evaluation</em></li>\n<li><em>Results saving</em></li>\n</ol>\n<h4>Main features</h4>\n<ul>\n<li><em>Generability</em>: Variaty of models and methods are supported and it can be used in a number of tasks\n(such as preprocessing, dimensionality reduction, classification,\nregression, clustering, statistical tests, etc.)</li>\n<li><em>Flexability</em>: Steps can be easily skipped and/or included</li>\n<li><em>Dynamic loading</em>: Automatically imports modules during runtime - no additional lines are needed</li>\n</ul>\n<h3>Installation</h3>\n<pre>pip install exp-runner\n</pre>\n<h3>Usage</h3>\n<p>Let's say, your project has the following structure:</p>\n<pre><code>MyAwesomeProject/\n        main.py\n        my_custom_module.py\n\n        data/\n                data_00.npy\n                data_01.npy\n                ...\n                data_NN.npy\n\n        protocols/\n                experiment_config.json\n\n        results/\n</code></pre>\n<h4>Just give me a code!</h4>\n<p>You just need to describe your <strong>framework</strong> in the <a href=\"https://json.org\" rel=\"nofollow\">JSON</a> configuration file:</p>\n<h5>experiment_config.json</h5>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"Setup\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"You can add detailed description of the experiment\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"random_seed\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"Dataset\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my_custom_module.MyAwesomeDataLoader\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"path_to_data\"</span><span class=\"p\">:</span> <span class=\"s2\">\"data/*.npy\"</span><span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"Transforms\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sklearn.decomposition.PCA\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"n_components\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nt\">\"whiten\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"Model\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sklearn.cluster.KMeans\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"n_clusters\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nt\">\"n_jobs\"</span><span class=\"p\">:</span> <span class=\"mi\">-1</span><span class=\"p\">,</span> <span class=\"nt\">\"verbose\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"Metric\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my_custom_module.SklearnMetricWrapper\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"metric\"</span><span class=\"p\">:</span> <span class=\"s2\">\"normalized_mutual_info_score\"</span><span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"Saver\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my_custom_module.CSVReport\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"path_to_output\"</span><span class=\"p\">:</span> <span class=\"s2\">\"results/evaluation_results.csv\"</span><span class=\"p\">,</span> <span class=\"nt\">\"sep\"</span><span class=\"p\">:</span> <span class=\"s2\">\";\"</span><span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<details><summary>Here are aforementioned classes (click):</summary>\n<p>\n</p><h5>my_custom_module.py</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">glob</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn.metrics</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">exp_runner</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span><span class=\"p\">,</span> <span class=\"n\">Metric</span><span class=\"p\">,</span> <span class=\"n\">Saver</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">,</span> <span class=\"n\">NoReturn</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">,</span> <span class=\"n\">Callable</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">StratifiedShuffleSplit</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAwesomeDataLoader</span><span class=\"p\">(</span><span class=\"n\">Dataset</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path_to_data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">training</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyAwesomeDataLoader</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_samples</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_labels</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_splits</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n\n        <span class=\"n\">paths_to_data</span> <span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"n\">path_to_data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths_to_data</span><span class=\"p\">:</span>\n            <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n            <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>   \n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n            <span class=\"n\">indices_train</span><span class=\"p\">,</span> <span class=\"n\">indices_test</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">StratifiedShuffleSplit</span><span class=\"p\">(</span>\n                <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"n\">test_size</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_samples</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">X</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_labels</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_splits</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">][</span><span class=\"s1\">'train'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">indices_train</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_splits</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">][</span><span class=\"s1\">'test'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">indices_test</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_samples</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_training</span> <span class=\"o\">=</span> <span class=\"n\">training</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]]:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices</span><span class=\"p\">)):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">IndexError</span>\n\n        <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'X'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_samples</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_splits</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">][</span><span class=\"s1\">'train'</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">training</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_splits</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">][</span><span class=\"s1\">'test'</span><span class=\"p\">]],</span>\n        <span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_labels</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_splits</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">][</span><span class=\"s1\">'train'</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">training</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_splits</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">][</span><span class=\"s1\">'test'</span><span class=\"p\">]]</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'desc'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'it is possible to add description for each data sample'</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'filename'</span><span class=\"p\">:</span> <span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"s1\">'item'</span><span class=\"p\">:</span> <span class=\"n\">item</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_indices</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">training</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_training</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SklearnMetricWrapper</span><span class=\"p\">(</span><span class=\"n\">Metric</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">SklearnMetricWrapper</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n        <span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_metric</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]],</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">metric</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">y_true</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_metric</span><span class=\"p\">(</span><span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CSVReport</span><span class=\"p\">(</span><span class=\"n\">Saver</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path_to_output</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">';'</span><span class=\"p\">,</span> <span class=\"n\">append</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CSVReport</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path_to_output</span> <span class=\"o\">=</span> <span class=\"n\">path_to_output</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"n\">sep</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s1\">'a+'</span> <span class=\"k\">if</span> <span class=\"n\">append</span> <span class=\"k\">else</span> <span class=\"s1\">'w+'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">report</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">NoReturn</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path_to_output</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">csv</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">report</span><span class=\"p\">:</span>\n                <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n                    <span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s1\">'filename'</span><span class=\"p\">],</span>\n                    <span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s1\">'desc'</span><span class=\"p\">],</span>\n                    <span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s1\">'perf'</span><span class=\"p\">]</span>\n                <span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n                <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n</pre>\n<p></p>\n</details>\n<p>Finally, to run your experiment type in your terminal:</p>\n<pre><span class=\"nb\">cd</span> /path/to/MyAwesomeProject\npython main.py --config protocols/experiment_config.json\n</pre>\n\n          </div>"}, "last_serial": 5229623, "releases": {"0.1.0b1": [{"comment_text": "", "digests": {"md5": "2ca3883f6edcb11650a9f850c0815bb6", "sha256": "1f5ed8db3b1f07d341ab0c776634473b4fd66755c868b2bda101f1e5d8025c52"}, "downloads": -1, "filename": "exp_runner-0.1.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "2ca3883f6edcb11650a9f850c0815bb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6603, "upload_time": "2019-03-25T19:51:35", "upload_time_iso_8601": "2019-03-25T19:51:35.180930Z", "url": "https://files.pythonhosted.org/packages/1a/bf/f14372c4d8c2bd97c74d1ee9f6d0cb7134218e017a1130bb78bc69e1ddf0/exp_runner-0.1.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b4a80ee0d161cc5b1be778e22ed5cc5", "sha256": "6ab14d9a791879b9ab200aee5fbe1c850a8d10850a79dd5f6a0240255a74d269"}, "downloads": -1, "filename": "exp-runner-0.1.0b1.tar.gz", "has_sig": false, "md5_digest": "6b4a80ee0d161cc5b1be778e22ed5cc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5498, "upload_time": "2019-03-25T19:51:42", "upload_time_iso_8601": "2019-03-25T19:51:42.155140Z", "url": "https://files.pythonhosted.org/packages/1f/25/72585f764dc7da4451903160fd4dcf78158fda90492d023c2e784b485cf8/exp-runner-0.1.0b1.tar.gz", "yanked": false}], "0.1.0b2": [{"comment_text": "", "digests": {"md5": "5cbca2ebb141bb49036031448c596be6", "sha256": "ed7118cada6a5f2dcc74ac84485bdddc0fc988514a18f7fac905da42e822b202"}, "downloads": -1, "filename": "exp_runner-0.1.0b2-py3-none-any.whl", "has_sig": false, "md5_digest": "5cbca2ebb141bb49036031448c596be6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6637, "upload_time": "2019-05-05T20:49:45", "upload_time_iso_8601": "2019-05-05T20:49:45.337778Z", "url": "https://files.pythonhosted.org/packages/3a/5c/a9af5166e6c2dbf84e945b248409494a0f33e59bb4ac0d500203ccb38b1d/exp_runner-0.1.0b2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5cbca2ebb141bb49036031448c596be6", "sha256": "ed7118cada6a5f2dcc74ac84485bdddc0fc988514a18f7fac905da42e822b202"}, "downloads": -1, "filename": "exp_runner-0.1.0b2-py3-none-any.whl", "has_sig": false, "md5_digest": "5cbca2ebb141bb49036031448c596be6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6637, "upload_time": "2019-05-05T20:49:45", "upload_time_iso_8601": "2019-05-05T20:49:45.337778Z", "url": "https://files.pythonhosted.org/packages/3a/5c/a9af5166e6c2dbf84e945b248409494a0f33e59bb4ac0d500203ccb38b1d/exp_runner-0.1.0b2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:44:35 2020"}