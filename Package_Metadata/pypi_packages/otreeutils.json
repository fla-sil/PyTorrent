{"info": {"author": "Markus Konrad", "author_email": "markus.konrad@wzb.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# otreeutils\n\nSeptember 2019, Markus Konrad <markus.konrad@wzb.eu> / [Berlin Social Science Center](https://wzb.eu)\n\n## A package with common oTree utilities\n\nThis repository contains the package `otreeutils`. It features a set of common helper / utility functions and classes often needed when developing experiments with [oTree](http://www.otree.org/). So far, this covers the following use cases:\n\n* Extensions to oTree's admin interface for [using custom data models](https://datascience.blog.wzb.eu/2016/10/31/using-custom-data-models-in-otree/), which include:\n    * Live session data view shows data from custom models\n    * Export page allows download of complete data with data from custom models\n    * Export page allows download in nested JSON format\n* Displaying and validating understanding questions\n* Easier creation of surveys:\n    * define all survey questions in a single data structure, let `otreeutils` create the required `Player` fields\n    * create a table of Likert scale inputs (\"Likert matrix\")\n    * create single Likert scale fields from given labels\n    * easy survey forms styling via CSS due to cleanly structured HTML output\n    * make survey forms with conditional inputs  \n* Displaying warnings to participants when a timeout occurs on a page (no automatic form submission after timeout)\n* More convenient development process by optional automatic fill-in of forms (saves you from clicking through many inputs during development)  \n* Setting custom URLs for pages (instead of default: the page's class name)\n\n**Compatibility note:** This package is compatible with oTree v2.x. (It has been tested with oTree v2.1.36 but any other 2.x version should work. If you want to use this package with oTree v1.x, you should use otreeutils v0.3.1, which is the last version to support oTree 1.) \n\nThe package is [available on PyPI](https://pypi.org/project/otreeutils/) and can be installed\nvia `pip install otreeutils`.\n\n## Citation\n\nIf you used *otreeutils* in your published research, please cite it as follows:\n\n[Konrad, M. (2018). oTree: Implementing experiments with dynamically determined data quantity. *Journal of Behavioral and Experimental Finance.*](https://doi.org/10.1016/j.jbef.2018.10.006)\n\n\n## Examples\n\nThe repository contains three example apps which show the respective features and how they can be used in own experiments:\n\n* `otreeutils_example1` -- Understanding questions and timeout warnings\n* `otreeutils_example2` -- Surveys\n* `otreeutils_example3_market` -- Market: An example showing custom data models to collect a dynamically determined data quantity. Shows how otreeutils' admin extensions allow live data view and data export for these requirements. Companion code for [Konrad 2018](https://doi.org/10.1016/j.jbef.2018.10.006). See [its dedicated README page](https://github.com/WZBSocialScienceCenter/otreeutils/tree/master/otreeutils_example3_market). \n\n## Limitations\n\nThe admin interface extensions have still a limitation: Data export with all data from custom models is only possible with per app download option, not with the \"all apps\" option.\n\n## Requirements\n\nThis package requires oTree v2.x and [pandas](http://pandas.pydata.org/). The requirements will be installed along with otreeutils when using `pip` (see below). \n\n## Installation and setup\n\nIn order to use otreeutils in your experiment implementation, you only need to do the following things:\n\n1. Either install the package from [PyPI](https://pypi.python.org/pypi/otreeutils) via\n   *pip* (`pip install otreeutils`) or download/clone this github repository and copy\n   the `otreeutils` folder to your oTree experiment directory.\n2. Edit your `settings.py` so that you add \"otreeutils\" to your `INSTALLED_APPS` list. **Don't forget this, otherwise the required templates and static files cannot be loaded correctly!**\n\n\n## API overview\n\nIt's best to have a look at the (documented) examples to see how to use the API.\n\n### `otreeutils.pages` module\n\n#### `ExtendedPage` class\n\nA common page extension to oTree's default `Page` class.\n All other page classes in `otreeutils` extend this class. Allows to define a custom page URL via `custom_name_in_url`, timeout warnings, a page title and provides a template variable `debug` with which you can toggle debug code in your templates / JavaScript parts.\n\nThe template variable `debug` (integer \u2013 0 or 1) is toggled using an additional `APPS_DEBUG` variable in `settings.py`. See the `settings.py` of this repository. This is quite useful for example in order to fill in the correct questions on a page with understanding questions automatically in a debug session (so that it is easier to click through the pages).\n\nThere is also a page variable `debug_fill_forms_randomly`, which can be set for any page derived from the `ExtendedPage` class (i.e. also for survey pages -- see below). If you set this variable to `True`, then all form inputs on the page are automatically filled in with random values once you visit the page. This happens when you run the experiment in \"debug mode\", i.e. when `APPS_DEBUG` is set to `True`. By default, `debug_fill_forms_randomly` is set to `False`. You can enable this feature for a given page like this:\n\n```python\nfrom otreeutils.pages import ExtendedPage\n\nclass MyPage(ExtendedPage):\n    debug_fill_forms_randomly = True\n```\n\nThis saves time when you click through an experiment with many complex forms.\n\n#### `UnderstandingQuestionsPage` class\n\nBase class to implement understanding questions. A participant must complete all questions in order to proceed. You can display hints. Use it as follows:\n\n```python\nfrom otreeutils.pages import UnderstandingQuestionsPage\n\nclass SomeUnderstandingQuestions(UnderstandingQuestionsPage):\n    page_title = 'Set a page title'\n    questions = [\n        {\n            'question': 'What is \u03c0?',\n            'options': [1.2345, 3.14159],\n            'correct': 3.14159,\n            'hint': 'You can have a look at Wikipedia!'   # this is optional\n        },\n        # ...\n    ]\n```\n\nBy default, the performance of the participant is not recorded, but you can optionally provide a `form_model` and set a field in `form_field_n_wrong_attempts` which defines in which field the number of wrong attempts is written.\n\nIf you set `APPS_DEBUG` to `True`, the correct answers will already be filled in order to skip swiftly through pages during development.\n\n\n### `otreeutils.surveys` module\n\n#### `create_player_model_for_survey` function\n\nThis function allows to dynamically create a `Player` model class for a survey. It can be used as follows in `models.py`.\n\nAt first you define your questions per page in a survey definitions data structure, for example like this:\n\n```python\nfrom otreeutils.surveys import create_player_model_for_survey\n\n\nGENDER_CHOICES = (\n    ('female', 'Female'),\n    ('male', 'Male'),\n    ('no_answer', 'Prefer not to answer'),\n)\n\n\nSURVEY_DEFINITIONS = (\n    {\n        'page_title': 'Survey Questions - Page 1',\n        'survey_fields': [\n            ('q1_a', {   # field name (which will also end up in your \"Player\" class and hence in your output data)\n                'text': 'How old are you?',   # survey question\n                'field': models.PositiveIntegerField(min=18, max=100),  # the same as in normal oTree model field definitions\n            }),\n            ('q1_b', {\n                'text': 'Please tell us your gender.',\n                'field': models.CharField(choices=GENDER_CHOICES),\n            }),\n            # ... more questions\n        ]\n    },\n    # ... more pages\n)\n```\n\nNow you dynamically create the `Player` class by passing the name of the module for which it will be created (should be the `models` module of your app) and the survey definitions:\n\n```python\nPlayer = create_player_model_for_survey('otreeutils_example2.models', SURVEY_DEFINITIONS)\n```\n\nThe attributes (model fields, etc.) will be automatically created. When you run `otree resetdb`, you will see that the fields `q1_a`, `q1_b`, etc. will be generated in the database.\n\nYou may also add extra (non-survey) fields to your `Player` class, by passing a dict to the optional `other_fields` parameter:\n\n```python\nPlayer = create_player_model_for_survey('otreeutils_example2.models', SURVEY_DEFINITIONS, other_fields={\n    'treatment': models.IntegerField()\n})\n```\n\n##### Likert score inputs via `generate_likert_field` and `generate_likert_table` functions\n\nThe function `generate_likert_field` allows you to easily generate fields for a given Likert scale and can be used inside a survey definitions data structure:\n\n```python\nfrom otreeutils.surveys import generate_likert_field\n\nlikert_5_labels = (\n    'Strongly disagree',            # value: 1\n    'Disagree',                     # value: 2\n    'Neither agree nor disagree',   # ...\n    'Agree',\n    'Strongly agree'                  # value: 5\n)\n\nlikert_5point_field = generate_likert_field(likert_5_labels)\n```\n\nThe object `likert_5point_field` is now a *function* to generate new fields of the specified Likert scale:\n\n```python\n# ...\n\nSURVEY_DEFINITIONS = (\n    {\n        'page_title': 'A Likert 5-point scale example',\n        'survey_fields': [\n            ('q_otree_surveys', {  # most of the time, you'd add a \"help_text\" for a Likert scale question. You can use HTML:\n                'help_text': \"\"\"\n                    <p>Consider this quote:</p>\n                    <blockquote>\n                        \"oTree is great to make surveys, too.\"\n                    </blockquote>\n                    <p>What do you think?</p>\n                \"\"\",\n                'field': likert_5point_field(),   # don't forget the parentheses at the end!\n            }),\n            ('q_just_likert', {\n                 'label': 'Another Likert scale input:',  # optional, no HTML\n                 'field': likert_5point_field(),  # don't forget the parentheses at the end!\n            }),\n        ]\n    },\n    # ... more pages\n)\n```\n\nThe function `generate_likert_table` allows you to easily generate a table of Likert scale inputs like a matrix with the Likert scale increments in the columns and your questions in the rows:\n\n```python\n# ...\n\nSURVEY_DEFINITIONS = (\n    {\n        'page_title': 'A Likert scale table example',\n        'survey_fields': [\n            # create a table of Likert scale choices\n            # we use the same 5-point scale a before and specify four rows for the table,\n            # each with a tuple (field name, label)\n            generate_likert_table(likert_5_labels,\n                                  [\n                                      ('q_pizza_tasty', 'Tasty'),\n                                      ('q_pizza_spicy', 'Spicy'),\n                                      ('q_pizza_cold', 'Too cold'),\n                                      ('q_pizza_satiable', 'Satiable'),\n                                  ],\n                                  form_help_initial='<p>How was your latest Pizza?</p>',  # HTML to be placed on top of form\n                                  form_help_final='<p>Thank you!</p>'                     # HTML to be placed below form\n            )\n        ]\n    },\n    # ... more pages\n)\n```\n\nThere are several additional parameters that you can pass to `generate_likert_table()` which will control the display and behavior of the table:\n\n- `table_repeat_header_each_n_rows=<integer>`: set to integer N > 0 to repeat the table header after every N rows\n- `table_cols_equal_width=<True/False>`: adjust form columns so that they have equal width\n- `table_row_header_width_pct=<number>`: if form columns should have equal width, this specifies the width of the first column (the table row header) in percent (default: 25)\n- `table_rows_equal_height=<True/False>`: adjust form rows so that they have equal height\n- `table_rows_alternate=<True/False>`: alternate form rows between \"odd\" and \"even\" CSS classes (alternates background colors)\n- `table_rows_randomize=<True/False>`: randomize form rows\n- `table_rows_highlight=<True/False>`: highlight form rows on mouse-over\n- `table_cells_highlight=<True/False>`: highlight form cells on mouse-over\n- `table_cells_clickable=<True/False>`: make form cells clickable for selection (otherwise only the small radio buttons can be clicked)\n\n#### More options for surveys\n\nTo implement advanced features such as conditional input display, have a look at the example app `otreeutils_example2`.\n\n#### `SurveyPage` class\n\nYou can then create the survey pages which will contain the questions for the respective pages as defined before in `SURVEY_DEFINITIONS`:\n\n**Please note:** Unfortunately, it was not possible for me to create the page classes dynamically, so you have to define them manually here. At least the overhead is minimal, because you don't need to define any additional attributes. However, this way you *can* also specify additional attributes, set a custom template, etc.\n\n```python\n# (in pages.py)\n\nfrom otreeutils.surveys import SurveyPage, setup_survey_pages\n\n\nclass SurveyPage1(SurveyPage):\n    pass\nclass SurveyPage2(SurveyPage):\n    pass\n# more pages ...\n\n# Create a list of survey pages.\n# The order is important! The survey questions are taken in the same order\n# from the SURVEY_DEFINITIONS in models.py\n\nsurvey_pages = [\n    SurveyPage1,\n    SurveyPage2,\n    # more pages ...\n]\n```\n\nSince each `SurveyPage` is derived from the `ExtendedPage` class, you can also enable the automatic fill-in feature. This means that all form inputs on the page are automatically filled in with random values once you visit the page. That happens when you run the experiment in \"debug mode\", i.e. when `APPS_DEBUG` is set to `True`. By default, `debug_fill_forms_randomly` is set to `False`. You can enable this feature for a given survey page like this:\n\n```python\nclass SurveyPage3(SurveyPage):\n    debug_fill_forms_randomly = True\n```\n\nThis saves time when you click through an experiment with many survey fields.\n\n#### `setup_survey_pages` function\n\nNow all survey pages need to be set up. The `Player` class will be passed to all survey pages and the questions for each page will be set according to their order. \n\n```python\n# Common setup for all pages (will set the questions per page)\nsetup_survey_pages(models.Player, survey_pages)\n```\n\nFinally, we can set the `page_sequence` in order to use our survey pages:\n\n```python\npage_sequence = [\n    SurveyIntro,  # define some pages that come before the survey\n    # ...\n]\n\n# add the survey pages to the page sequence list\npage_sequence.extend(survey_pages)\n\n# we could add more pages after the survey here\n# ...\n```\n\n**Have a look into the example implementations provided as `otreeutils_example1` (understanding questions, simple page extensions), `otreeutils_example2` (surveys) and `otreeutils_example3_market` (custom data models).**  \n\n\n### `otreeutils.scripts` module\n\nThis module allows creating scripts that interface with oTree from the command line. Importing `otreeutils.scripts` makes sure that everything is correctly set up and the settings are loaded. An example might be a script which exports data from the current sessions for specific apps as JSON file:\n\n```python\nimport sys\n\nfrom otreeutils import scripts   # this is the most import line and must be included at the beginning\n\n\nif len(sys.argv) != 2:\n    print('call this script with a single argument: python %s <output.json>' % sys.argv[0])\n    exit(1)\n\noutput_file = sys.argv[1]\n\napps = ['intro',\n        'my_app',\n        'outro']\n\nprint('loading data...')\n\n# get the data as hierarchical data structure. this is esp. useful if you use\n# custom data models\ncombined = scripts.get_hierarchical_data_for_apps(apps)\n\nprint('writing data to file', output_file)\n\nscripts.save_data_as_json_file(combined, output_file, indent=2)\n\nprint('done.')\n```\n\n### Custom data models and admin extensions\n\nIf you implement custom data models and want to use otreeutils' admin extensions you additionally need to follow these steps:\n\n#### 1. Add configuration class to custom models\n\nFor each of the custom models that you want to include in the live data view or extended data export, you have to define a subclass called `CustomModelConf` like this:\n\n```python\nfrom otree.db.models import Model, ForeignKey   # import base Model class and ForeignKey\n\n# ...\n\nclass FruitOffer(Model):\n    amount = models.IntegerField(label='Amount', min=0, initial=0)\n\n    # ... more fields here ...\n\n    seller = ForeignKey(Player)\n\n\n    class CustomModelConf:\n        \"\"\"\n        Configuration for otreeutils admin extensions.\n        \"\"\"\n        data_view = {    # define this attribute if you want to include this model in the live data view\n            'exclude_fields': ['seller'],\n            'link_with': 'seller'\n        }\n        export_data = {  # define this attribute if you want to include this model in the data export\n            'exclude_fields': ['seller_id'],\n            'link_with': 'seller'\n        }\n\n``` \n\n#### 2. Add a custom urls module\n\nIn your experiment app, add a file `urls.py` and simply include the custom URL patters from otreeutils as follows:\n\n```python\nfrom otreeutils.admin_extensions.urls import urlpatterns\n\n# add more custom URL rules here if necessary\n# ...\n```\n\n#### 3. Add a custom routing module\n\nIn your experiment app, add a file `routing.py` and simply include the custom channel routing patters from otreeutils as follows:\n\n```python\nfrom otreeutils.admin_extensions.routing import channel_routing\n\n# add more custom channel routing rules here if necessary\n# ...\n```\n\n#### 4. Update `settings.py` to load the custom URLs and channel routes\n\nAdd these lines to your `settings.py`:\n\n```python\nROOT_URLCONF = '<APP_PACKAGE>.urls'\nCHANNEL_ROUTING = '<APP_PACKAGE>.routing.channel_routing'\n```\n\nInstead of `<APP_PACKAGE>` write your app's package name (e.g. \"market\" if your app is named \"market\").\n\n**And don't forget to edit your settings.py so that you add \"otreeutils\" to your INSTALLED_APPS list!**\n\nThat's it! When you visit the admin pages, they won't really look different, however, the live data view will now support your custom models and in the data export view you can download the data *including* the custom models' data, **when you select the download per app. So far, the \"all-apps\" download option will not include the custom models' data.**\n\nSee also the [market example experiment](https://github.com/WZBSocialScienceCenter/otree_example_market) that uses custom data models.\n\n## License\n\nApache License 2.0. See LICENSE file.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/WZBSocialScienceCenter/otreeutils", "keywords": "otree experiments social science finance economics development", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "otreeutils", "package_url": "https://pypi.org/project/otreeutils/", "platform": "", "project_url": "https://pypi.org/project/otreeutils/", "project_urls": {"Bug Reports": "https://github.com/WZBSocialScienceCenter/otreeutils/issues", "Homepage": "https://github.com/WZBSocialScienceCenter/otreeutils", "Source": "https://github.com/WZBSocialScienceCenter/otreeutils"}, "release_url": "https://pypi.org/project/otreeutils/0.9.2/", "requires_dist": ["otree (>=2.0.0)", "pandas"], "requires_python": "", "summary": "Facilitate oTree experiment implementation with extensions for custom data models, surveys, understanding questions, timeout warnings and more.", "version": "0.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>otreeutils</h1>\n<p>September 2019, Markus Konrad <a href=\"mailto:markus.konrad@wzb.eu\">markus.konrad@wzb.eu</a> / <a href=\"https://wzb.eu\" rel=\"nofollow\">Berlin Social Science Center</a></p>\n<h2>A package with common oTree utilities</h2>\n<p>This repository contains the package <code>otreeutils</code>. It features a set of common helper / utility functions and classes often needed when developing experiments with <a href=\"http://www.otree.org/\" rel=\"nofollow\">oTree</a>. So far, this covers the following use cases:</p>\n<ul>\n<li>Extensions to oTree's admin interface for <a href=\"https://datascience.blog.wzb.eu/2016/10/31/using-custom-data-models-in-otree/\" rel=\"nofollow\">using custom data models</a>, which include:\n<ul>\n<li>Live session data view shows data from custom models</li>\n<li>Export page allows download of complete data with data from custom models</li>\n<li>Export page allows download in nested JSON format</li>\n</ul>\n</li>\n<li>Displaying and validating understanding questions</li>\n<li>Easier creation of surveys:\n<ul>\n<li>define all survey questions in a single data structure, let <code>otreeutils</code> create the required <code>Player</code> fields</li>\n<li>create a table of Likert scale inputs (\"Likert matrix\")</li>\n<li>create single Likert scale fields from given labels</li>\n<li>easy survey forms styling via CSS due to cleanly structured HTML output</li>\n<li>make survey forms with conditional inputs</li>\n</ul>\n</li>\n<li>Displaying warnings to participants when a timeout occurs on a page (no automatic form submission after timeout)</li>\n<li>More convenient development process by optional automatic fill-in of forms (saves you from clicking through many inputs during development)</li>\n<li>Setting custom URLs for pages (instead of default: the page's class name)</li>\n</ul>\n<p><strong>Compatibility note:</strong> This package is compatible with oTree v2.x. (It has been tested with oTree v2.1.36 but any other 2.x version should work. If you want to use this package with oTree v1.x, you should use otreeutils v0.3.1, which is the last version to support oTree 1.)</p>\n<p>The package is <a href=\"https://pypi.org/project/otreeutils/\" rel=\"nofollow\">available on PyPI</a> and can be installed\nvia <code>pip install otreeutils</code>.</p>\n<h2>Citation</h2>\n<p>If you used <em>otreeutils</em> in your published research, please cite it as follows:</p>\n<p><a href=\"https://doi.org/10.1016/j.jbef.2018.10.006\" rel=\"nofollow\">Konrad, M. (2018). oTree: Implementing experiments with dynamically determined data quantity. <em>Journal of Behavioral and Experimental Finance.</em></a></p>\n<h2>Examples</h2>\n<p>The repository contains three example apps which show the respective features and how they can be used in own experiments:</p>\n<ul>\n<li><code>otreeutils_example1</code> -- Understanding questions and timeout warnings</li>\n<li><code>otreeutils_example2</code> -- Surveys</li>\n<li><code>otreeutils_example3_market</code> -- Market: An example showing custom data models to collect a dynamically determined data quantity. Shows how otreeutils' admin extensions allow live data view and data export for these requirements. Companion code for <a href=\"https://doi.org/10.1016/j.jbef.2018.10.006\" rel=\"nofollow\">Konrad 2018</a>. See <a href=\"https://github.com/WZBSocialScienceCenter/otreeutils/tree/master/otreeutils_example3_market\" rel=\"nofollow\">its dedicated README page</a>.</li>\n</ul>\n<h2>Limitations</h2>\n<p>The admin interface extensions have still a limitation: Data export with all data from custom models is only possible with per app download option, not with the \"all apps\" option.</p>\n<h2>Requirements</h2>\n<p>This package requires oTree v2.x and <a href=\"http://pandas.pydata.org/\" rel=\"nofollow\">pandas</a>. The requirements will be installed along with otreeutils when using <code>pip</code> (see below).</p>\n<h2>Installation and setup</h2>\n<p>In order to use otreeutils in your experiment implementation, you only need to do the following things:</p>\n<ol>\n<li>Either install the package from <a href=\"https://pypi.python.org/pypi/otreeutils\" rel=\"nofollow\">PyPI</a> via\n<em>pip</em> (<code>pip install otreeutils</code>) or download/clone this github repository and copy\nthe <code>otreeutils</code> folder to your oTree experiment directory.</li>\n<li>Edit your <code>settings.py</code> so that you add \"otreeutils\" to your <code>INSTALLED_APPS</code> list. <strong>Don't forget this, otherwise the required templates and static files cannot be loaded correctly!</strong></li>\n</ol>\n<h2>API overview</h2>\n<p>It's best to have a look at the (documented) examples to see how to use the API.</p>\n<h3><code>otreeutils.pages</code> module</h3>\n<h4><code>ExtendedPage</code> class</h4>\n<p>A common page extension to oTree's default <code>Page</code> class.\nAll other page classes in <code>otreeutils</code> extend this class. Allows to define a custom page URL via <code>custom_name_in_url</code>, timeout warnings, a page title and provides a template variable <code>debug</code> with which you can toggle debug code in your templates / JavaScript parts.</p>\n<p>The template variable <code>debug</code> (integer \u2013 0 or 1) is toggled using an additional <code>APPS_DEBUG</code> variable in <code>settings.py</code>. See the <code>settings.py</code> of this repository. This is quite useful for example in order to fill in the correct questions on a page with understanding questions automatically in a debug session (so that it is easier to click through the pages).</p>\n<p>There is also a page variable <code>debug_fill_forms_randomly</code>, which can be set for any page derived from the <code>ExtendedPage</code> class (i.e. also for survey pages -- see below). If you set this variable to <code>True</code>, then all form inputs on the page are automatically filled in with random values once you visit the page. This happens when you run the experiment in \"debug mode\", i.e. when <code>APPS_DEBUG</code> is set to <code>True</code>. By default, <code>debug_fill_forms_randomly</code> is set to <code>False</code>. You can enable this feature for a given page like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">otreeutils.pages</span> <span class=\"kn\">import</span> <span class=\"n\">ExtendedPage</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPage</span><span class=\"p\">(</span><span class=\"n\">ExtendedPage</span><span class=\"p\">):</span>\n    <span class=\"n\">debug_fill_forms_randomly</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>This saves time when you click through an experiment with many complex forms.</p>\n<h4><code>UnderstandingQuestionsPage</code> class</h4>\n<p>Base class to implement understanding questions. A participant must complete all questions in order to proceed. You can display hints. Use it as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">otreeutils.pages</span> <span class=\"kn\">import</span> <span class=\"n\">UnderstandingQuestionsPage</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeUnderstandingQuestions</span><span class=\"p\">(</span><span class=\"n\">UnderstandingQuestionsPage</span><span class=\"p\">):</span>\n    <span class=\"n\">page_title</span> <span class=\"o\">=</span> <span class=\"s1\">'Set a page title'</span>\n    <span class=\"n\">questions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'question'</span><span class=\"p\">:</span> <span class=\"s1\">'What is \u03c0?'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'options'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">1.2345</span><span class=\"p\">,</span> <span class=\"mf\">3.14159</span><span class=\"p\">],</span>\n            <span class=\"s1\">'correct'</span><span class=\"p\">:</span> <span class=\"mf\">3.14159</span><span class=\"p\">,</span>\n            <span class=\"s1\">'hint'</span><span class=\"p\">:</span> <span class=\"s1\">'You can have a look at Wikipedia!'</span>   <span class=\"c1\"># this is optional</span>\n        <span class=\"p\">},</span>\n        <span class=\"c1\"># ...</span>\n    <span class=\"p\">]</span>\n</pre>\n<p>By default, the performance of the participant is not recorded, but you can optionally provide a <code>form_model</code> and set a field in <code>form_field_n_wrong_attempts</code> which defines in which field the number of wrong attempts is written.</p>\n<p>If you set <code>APPS_DEBUG</code> to <code>True</code>, the correct answers will already be filled in order to skip swiftly through pages during development.</p>\n<h3><code>otreeutils.surveys</code> module</h3>\n<h4><code>create_player_model_for_survey</code> function</h4>\n<p>This function allows to dynamically create a <code>Player</code> model class for a survey. It can be used as follows in <code>models.py</code>.</p>\n<p>At first you define your questions per page in a survey definitions data structure, for example like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">otreeutils.surveys</span> <span class=\"kn\">import</span> <span class=\"n\">create_player_model_for_survey</span>\n\n\n<span class=\"n\">GENDER_CHOICES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"s1\">'female'</span><span class=\"p\">,</span> <span class=\"s1\">'Female'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'male'</span><span class=\"p\">,</span> <span class=\"s1\">'Male'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'no_answer'</span><span class=\"p\">,</span> <span class=\"s1\">'Prefer not to answer'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">SURVEY_DEFINITIONS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'page_title'</span><span class=\"p\">:</span> <span class=\"s1\">'Survey Questions - Page 1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'survey_fields'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">'q1_a'</span><span class=\"p\">,</span> <span class=\"p\">{</span>   <span class=\"c1\"># field name (which will also end up in your \"Player\" class and hence in your output data)</span>\n                <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'How old are you?'</span><span class=\"p\">,</span>   <span class=\"c1\"># survey question</span>\n                <span class=\"s1\">'field'</span><span class=\"p\">:</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">PositiveIntegerField</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">),</span>  <span class=\"c1\"># the same as in normal oTree model field definitions</span>\n            <span class=\"p\">}),</span>\n            <span class=\"p\">(</span><span class=\"s1\">'q1_b'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'Please tell us your gender.'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'field'</span><span class=\"p\">:</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">GENDER_CHOICES</span><span class=\"p\">),</span>\n            <span class=\"p\">}),</span>\n            <span class=\"c1\"># ... more questions</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># ... more pages</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Now you dynamically create the <code>Player</code> class by passing the name of the module for which it will be created (should be the <code>models</code> module of your app) and the survey definitions:</p>\n<pre><span class=\"n\">Player</span> <span class=\"o\">=</span> <span class=\"n\">create_player_model_for_survey</span><span class=\"p\">(</span><span class=\"s1\">'otreeutils_example2.models'</span><span class=\"p\">,</span> <span class=\"n\">SURVEY_DEFINITIONS</span><span class=\"p\">)</span>\n</pre>\n<p>The attributes (model fields, etc.) will be automatically created. When you run <code>otree resetdb</code>, you will see that the fields <code>q1_a</code>, <code>q1_b</code>, etc. will be generated in the database.</p>\n<p>You may also add extra (non-survey) fields to your <code>Player</code> class, by passing a dict to the optional <code>other_fields</code> parameter:</p>\n<pre><span class=\"n\">Player</span> <span class=\"o\">=</span> <span class=\"n\">create_player_model_for_survey</span><span class=\"p\">(</span><span class=\"s1\">'otreeutils_example2.models'</span><span class=\"p\">,</span> <span class=\"n\">SURVEY_DEFINITIONS</span><span class=\"p\">,</span> <span class=\"n\">other_fields</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'treatment'</span><span class=\"p\">:</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n<span class=\"p\">})</span>\n</pre>\n<h5>Likert score inputs via <code>generate_likert_field</code> and <code>generate_likert_table</code> functions</h5>\n<p>The function <code>generate_likert_field</code> allows you to easily generate fields for a given Likert scale and can be used inside a survey definitions data structure:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">otreeutils.surveys</span> <span class=\"kn\">import</span> <span class=\"n\">generate_likert_field</span>\n\n<span class=\"n\">likert_5_labels</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'Strongly disagree'</span><span class=\"p\">,</span>            <span class=\"c1\"># value: 1</span>\n    <span class=\"s1\">'Disagree'</span><span class=\"p\">,</span>                     <span class=\"c1\"># value: 2</span>\n    <span class=\"s1\">'Neither agree nor disagree'</span><span class=\"p\">,</span>   <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'Agree'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'Strongly agree'</span>                  <span class=\"c1\"># value: 5</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">likert_5point_field</span> <span class=\"o\">=</span> <span class=\"n\">generate_likert_field</span><span class=\"p\">(</span><span class=\"n\">likert_5_labels</span><span class=\"p\">)</span>\n</pre>\n<p>The object <code>likert_5point_field</code> is now a <em>function</em> to generate new fields of the specified Likert scale:</p>\n<pre><span class=\"c1\"># ...</span>\n\n<span class=\"n\">SURVEY_DEFINITIONS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'page_title'</span><span class=\"p\">:</span> <span class=\"s1\">'A Likert 5-point scale example'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'survey_fields'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">'q_otree_surveys'</span><span class=\"p\">,</span> <span class=\"p\">{</span>  <span class=\"c1\"># most of the time, you'd add a \"help_text\" for a Likert scale question. You can use HTML:</span>\n                <span class=\"s1\">'help_text'</span><span class=\"p\">:</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">                    &lt;p&gt;Consider this quote:&lt;/p&gt;</span>\n<span class=\"s2\">                    &lt;blockquote&gt;</span>\n<span class=\"s2\">                        \"oTree is great to make surveys, too.\"</span>\n<span class=\"s2\">                    &lt;/blockquote&gt;</span>\n<span class=\"s2\">                    &lt;p&gt;What do you think?&lt;/p&gt;</span>\n<span class=\"s2\">                \"\"\"</span><span class=\"p\">,</span>\n                <span class=\"s1\">'field'</span><span class=\"p\">:</span> <span class=\"n\">likert_5point_field</span><span class=\"p\">(),</span>   <span class=\"c1\"># don't forget the parentheses at the end!</span>\n            <span class=\"p\">}),</span>\n            <span class=\"p\">(</span><span class=\"s1\">'q_just_likert'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                 <span class=\"s1\">'label'</span><span class=\"p\">:</span> <span class=\"s1\">'Another Likert scale input:'</span><span class=\"p\">,</span>  <span class=\"c1\"># optional, no HTML</span>\n                 <span class=\"s1\">'field'</span><span class=\"p\">:</span> <span class=\"n\">likert_5point_field</span><span class=\"p\">(),</span>  <span class=\"c1\"># don't forget the parentheses at the end!</span>\n            <span class=\"p\">}),</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># ... more pages</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The function <code>generate_likert_table</code> allows you to easily generate a table of Likert scale inputs like a matrix with the Likert scale increments in the columns and your questions in the rows:</p>\n<pre><span class=\"c1\"># ...</span>\n\n<span class=\"n\">SURVEY_DEFINITIONS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'page_title'</span><span class=\"p\">:</span> <span class=\"s1\">'A Likert scale table example'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'survey_fields'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"c1\"># create a table of Likert scale choices</span>\n            <span class=\"c1\"># we use the same 5-point scale a before and specify four rows for the table,</span>\n            <span class=\"c1\"># each with a tuple (field name, label)</span>\n            <span class=\"n\">generate_likert_table</span><span class=\"p\">(</span><span class=\"n\">likert_5_labels</span><span class=\"p\">,</span>\n                                  <span class=\"p\">[</span>\n                                      <span class=\"p\">(</span><span class=\"s1\">'q_pizza_tasty'</span><span class=\"p\">,</span> <span class=\"s1\">'Tasty'</span><span class=\"p\">),</span>\n                                      <span class=\"p\">(</span><span class=\"s1\">'q_pizza_spicy'</span><span class=\"p\">,</span> <span class=\"s1\">'Spicy'</span><span class=\"p\">),</span>\n                                      <span class=\"p\">(</span><span class=\"s1\">'q_pizza_cold'</span><span class=\"p\">,</span> <span class=\"s1\">'Too cold'</span><span class=\"p\">),</span>\n                                      <span class=\"p\">(</span><span class=\"s1\">'q_pizza_satiable'</span><span class=\"p\">,</span> <span class=\"s1\">'Satiable'</span><span class=\"p\">),</span>\n                                  <span class=\"p\">],</span>\n                                  <span class=\"n\">form_help_initial</span><span class=\"o\">=</span><span class=\"s1\">'&lt;p&gt;How was your latest Pizza?&lt;/p&gt;'</span><span class=\"p\">,</span>  <span class=\"c1\"># HTML to be placed on top of form</span>\n                                  <span class=\"n\">form_help_final</span><span class=\"o\">=</span><span class=\"s1\">'&lt;p&gt;Thank you!&lt;/p&gt;'</span>                     <span class=\"c1\"># HTML to be placed below form</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># ... more pages</span>\n<span class=\"p\">)</span>\n</pre>\n<p>There are several additional parameters that you can pass to <code>generate_likert_table()</code> which will control the display and behavior of the table:</p>\n<ul>\n<li><code>table_repeat_header_each_n_rows=&lt;integer&gt;</code>: set to integer N &gt; 0 to repeat the table header after every N rows</li>\n<li><code>table_cols_equal_width=&lt;True/False&gt;</code>: adjust form columns so that they have equal width</li>\n<li><code>table_row_header_width_pct=&lt;number&gt;</code>: if form columns should have equal width, this specifies the width of the first column (the table row header) in percent (default: 25)</li>\n<li><code>table_rows_equal_height=&lt;True/False&gt;</code>: adjust form rows so that they have equal height</li>\n<li><code>table_rows_alternate=&lt;True/False&gt;</code>: alternate form rows between \"odd\" and \"even\" CSS classes (alternates background colors)</li>\n<li><code>table_rows_randomize=&lt;True/False&gt;</code>: randomize form rows</li>\n<li><code>table_rows_highlight=&lt;True/False&gt;</code>: highlight form rows on mouse-over</li>\n<li><code>table_cells_highlight=&lt;True/False&gt;</code>: highlight form cells on mouse-over</li>\n<li><code>table_cells_clickable=&lt;True/False&gt;</code>: make form cells clickable for selection (otherwise only the small radio buttons can be clicked)</li>\n</ul>\n<h4>More options for surveys</h4>\n<p>To implement advanced features such as conditional input display, have a look at the example app <code>otreeutils_example2</code>.</p>\n<h4><code>SurveyPage</code> class</h4>\n<p>You can then create the survey pages which will contain the questions for the respective pages as defined before in <code>SURVEY_DEFINITIONS</code>:</p>\n<p><strong>Please note:</strong> Unfortunately, it was not possible for me to create the page classes dynamically, so you have to define them manually here. At least the overhead is minimal, because you don't need to define any additional attributes. However, this way you <em>can</em> also specify additional attributes, set a custom template, etc.</p>\n<pre><span class=\"c1\"># (in pages.py)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">otreeutils.surveys</span> <span class=\"kn\">import</span> <span class=\"n\">SurveyPage</span><span class=\"p\">,</span> <span class=\"n\">setup_survey_pages</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SurveyPage1</span><span class=\"p\">(</span><span class=\"n\">SurveyPage</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">SurveyPage2</span><span class=\"p\">(</span><span class=\"n\">SurveyPage</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n<span class=\"c1\"># more pages ...</span>\n\n<span class=\"c1\"># Create a list of survey pages.</span>\n<span class=\"c1\"># The order is important! The survey questions are taken in the same order</span>\n<span class=\"c1\"># from the SURVEY_DEFINITIONS in models.py</span>\n\n<span class=\"n\">survey_pages</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">SurveyPage1</span><span class=\"p\">,</span>\n    <span class=\"n\">SurveyPage2</span><span class=\"p\">,</span>\n    <span class=\"c1\"># more pages ...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Since each <code>SurveyPage</code> is derived from the <code>ExtendedPage</code> class, you can also enable the automatic fill-in feature. This means that all form inputs on the page are automatically filled in with random values once you visit the page. That happens when you run the experiment in \"debug mode\", i.e. when <code>APPS_DEBUG</code> is set to <code>True</code>. By default, <code>debug_fill_forms_randomly</code> is set to <code>False</code>. You can enable this feature for a given survey page like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SurveyPage3</span><span class=\"p\">(</span><span class=\"n\">SurveyPage</span><span class=\"p\">):</span>\n    <span class=\"n\">debug_fill_forms_randomly</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>This saves time when you click through an experiment with many survey fields.</p>\n<h4><code>setup_survey_pages</code> function</h4>\n<p>Now all survey pages need to be set up. The <code>Player</code> class will be passed to all survey pages and the questions for each page will be set according to their order.</p>\n<pre><span class=\"c1\"># Common setup for all pages (will set the questions per page)</span>\n<span class=\"n\">setup_survey_pages</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Player</span><span class=\"p\">,</span> <span class=\"n\">survey_pages</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, we can set the <code>page_sequence</code> in order to use our survey pages:</p>\n<pre><span class=\"n\">page_sequence</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">SurveyIntro</span><span class=\"p\">,</span>  <span class=\"c1\"># define some pages that come before the survey</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># add the survey pages to the page sequence list</span>\n<span class=\"n\">page_sequence</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">survey_pages</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># we could add more pages after the survey here</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<p><strong>Have a look into the example implementations provided as <code>otreeutils_example1</code> (understanding questions, simple page extensions), <code>otreeutils_example2</code> (surveys) and <code>otreeutils_example3_market</code> (custom data models).</strong></p>\n<h3><code>otreeutils.scripts</code> module</h3>\n<p>This module allows creating scripts that interface with oTree from the command line. Importing <code>otreeutils.scripts</code> makes sure that everything is correctly set up and the settings are loaded. An example might be a script which exports data from the current sessions for specific apps as JSON file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">otreeutils</span> <span class=\"kn\">import</span> <span class=\"n\">scripts</span>   <span class=\"c1\"># this is the most import line and must be included at the beginning</span>\n\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'call this script with a single argument: python </span><span class=\"si\">%s</span><span class=\"s1\"> &lt;output.json&gt;'</span> <span class=\"o\">%</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">output_file</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">apps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'intro'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'my_app'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'outro'</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'loading data...'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the data as hierarchical data structure. this is esp. useful if you use</span>\n<span class=\"c1\"># custom data models</span>\n<span class=\"n\">combined</span> <span class=\"o\">=</span> <span class=\"n\">scripts</span><span class=\"o\">.</span><span class=\"n\">get_hierarchical_data_for_apps</span><span class=\"p\">(</span><span class=\"n\">apps</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'writing data to file'</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">scripts</span><span class=\"o\">.</span><span class=\"n\">save_data_as_json_file</span><span class=\"p\">(</span><span class=\"n\">combined</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done.'</span><span class=\"p\">)</span>\n</pre>\n<h3>Custom data models and admin extensions</h3>\n<p>If you implement custom data models and want to use otreeutils' admin extensions you additionally need to follow these steps:</p>\n<h4>1. Add configuration class to custom models</h4>\n<p>For each of the custom models that you want to include in the live data view or extended data export, you have to define a subclass called <code>CustomModelConf</code> like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">otree.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span>   <span class=\"c1\"># import base Model class and ForeignKey</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FruitOffer</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Amount'</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ... more fields here ...</span>\n\n    <span class=\"n\">seller</span> <span class=\"o\">=</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Player</span><span class=\"p\">)</span>\n\n\n    <span class=\"k\">class</span> <span class=\"nc\">CustomModelConf</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Configuration for otreeutils admin extensions.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">data_view</span> <span class=\"o\">=</span> <span class=\"p\">{</span>    <span class=\"c1\"># define this attribute if you want to include this model in the live data view</span>\n            <span class=\"s1\">'exclude_fields'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'seller'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'link_with'</span><span class=\"p\">:</span> <span class=\"s1\">'seller'</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">export_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"c1\"># define this attribute if you want to include this model in the data export</span>\n            <span class=\"s1\">'exclude_fields'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'seller_id'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'link_with'</span><span class=\"p\">:</span> <span class=\"s1\">'seller'</span>\n        <span class=\"p\">}</span>\n</pre>\n<h4>2. Add a custom urls module</h4>\n<p>In your experiment app, add a file <code>urls.py</code> and simply include the custom URL patters from otreeutils as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">otreeutils.admin_extensions.urls</span> <span class=\"kn\">import</span> <span class=\"n\">urlpatterns</span>\n\n<span class=\"c1\"># add more custom URL rules here if necessary</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<h4>3. Add a custom routing module</h4>\n<p>In your experiment app, add a file <code>routing.py</code> and simply include the custom channel routing patters from otreeutils as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">otreeutils.admin_extensions.routing</span> <span class=\"kn\">import</span> <span class=\"n\">channel_routing</span>\n\n<span class=\"c1\"># add more custom channel routing rules here if necessary</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<h4>4. Update <code>settings.py</code> to load the custom URLs and channel routes</h4>\n<p>Add these lines to your <code>settings.py</code>:</p>\n<pre><span class=\"n\">ROOT_URLCONF</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;APP_PACKAGE&gt;.urls'</span>\n<span class=\"n\">CHANNEL_ROUTING</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;APP_PACKAGE&gt;.routing.channel_routing'</span>\n</pre>\n<p>Instead of <code>&lt;APP_PACKAGE&gt;</code> write your app's package name (e.g. \"market\" if your app is named \"market\").</p>\n<p><strong>And don't forget to edit your settings.py so that you add \"otreeutils\" to your INSTALLED_APPS list!</strong></p>\n<p>That's it! When you visit the admin pages, they won't really look different, however, the live data view will now support your custom models and in the data export view you can download the data <em>including</em> the custom models' data, <strong>when you select the download per app. So far, the \"all-apps\" download option will not include the custom models' data.</strong></p>\n<p>See also the <a href=\"https://github.com/WZBSocialScienceCenter/otree_example_market\" rel=\"nofollow\">market example experiment</a> that uses custom data models.</p>\n<h2>License</h2>\n<p>Apache License 2.0. See LICENSE file.</p>\n\n          </div>"}, "last_serial": 5872933, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c6d6ea7fc8800fa2b2b0020b1f6debe3", "sha256": "7690197476ad2c4cfe8a080e80c55f88ed8b57fa5b202bf4b7a4fedde27b7fe2"}, "downloads": -1, "filename": "otreeutils-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c6d6ea7fc8800fa2b2b0020b1f6debe3", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 8716, "upload_time": "2016-11-30T14:31:21", "upload_time_iso_8601": "2016-11-30T14:31:21.601879Z", "url": "https://files.pythonhosted.org/packages/c4/06/01066664d61b6ad912af1230a2ea75a5b135729f8c737b86a7c05ab6879a/otreeutils-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4038728fde7fca395f0cd513be5787f1", "sha256": "b80d2e3e030352ce1c52b0d8e938b6139e93180f26618c8c4e0ba13be866a3a3"}, "downloads": -1, "filename": "otreeutils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4038728fde7fca395f0cd513be5787f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11227, "upload_time": "2016-11-30T14:31:17", "upload_time_iso_8601": "2016-11-30T14:31:17.915558Z", "url": "https://files.pythonhosted.org/packages/52/23/8c6db25526621951dc3a17c4b4aad8a53d38d2be10eed4fc1ff5623c72cc/otreeutils-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "26e68f8e33b8e23d459a87fd2a25e3d7", "sha256": "a9747db47181d3d1f2fa53efb1be3b959de3d413a27f6f6f8430e2ac15fb8f2f"}, "downloads": -1, "filename": "otreeutils-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "26e68f8e33b8e23d459a87fd2a25e3d7", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9256, "upload_time": "2016-12-01T16:21:03", "upload_time_iso_8601": "2016-12-01T16:21:03.484222Z", "url": "https://files.pythonhosted.org/packages/ee/29/63a87478c7ab24e4e62f7207b59d396e3ac446c686e602fa12cdb2c4b2e5/otreeutils-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e31195e8c48ff45728527b0d12d22ede", "sha256": "a736c2022131a77c7e86d2cf2ee22b0306a8c49067ffa6520232a427f7d83cea"}, "downloads": -1, "filename": "otreeutils-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e31195e8c48ff45728527b0d12d22ede", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11833, "upload_time": "2016-12-01T16:21:01", "upload_time_iso_8601": "2016-12-01T16:21:01.082129Z", "url": "https://files.pythonhosted.org/packages/c3/86/208ec8c09d30a3ff1c341e70c9443df0718a6d67c2395d24aa93e42a9ba2/otreeutils-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8d3566faef5655e827017345c2ad3e49", "sha256": "350aa668e2c04b8fd7f86820c83d88dba8fa4c0bfd6d5cdcbf5a60d033996a4b"}, "downloads": -1, "filename": "otreeutils-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8d3566faef5655e827017345c2ad3e49", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9326, "upload_time": "2016-12-08T10:52:09", "upload_time_iso_8601": "2016-12-08T10:52:09.481040Z", "url": "https://files.pythonhosted.org/packages/b4/21/87597ce4279e0deca2a88a6e1353c173240a0d3bb8de8983863571b17788/otreeutils-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da02216af0e807a6be9664080c42e3df", "sha256": "6f4145b75d59f6d96b23dddfa80f41a6d93332b29253a9095f56bebd9e07ec19"}, "downloads": -1, "filename": "otreeutils-0.2.0.tar.gz", "has_sig": false, "md5_digest": "da02216af0e807a6be9664080c42e3df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11898, "upload_time": "2016-12-08T10:52:05", "upload_time_iso_8601": "2016-12-08T10:52:05.263124Z", "url": "https://files.pythonhosted.org/packages/60/04/83514a4969d97460266b6ed807ab636709d822aa032e3201df5e1b1fbb10/otreeutils-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "72a24e9ea63ddc665ddbd8bea529a13c", "sha256": "1c796fa7e6f30cc4393b44178f686c1a38517fbd0a657d3c4cb33404b2cd04cc"}, "downloads": -1, "filename": "otreeutils-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "72a24e9ea63ddc665ddbd8bea529a13c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9329, "upload_time": "2017-02-03T08:45:06", "upload_time_iso_8601": "2017-02-03T08:45:06.957059Z", "url": "https://files.pythonhosted.org/packages/b9/93/a4e64eb33cc3961671c6e93e1b7a16d9684b8b213106443b406fc56783b6/otreeutils-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6473eb3e4cf7fc62207e7fae306c007b", "sha256": "fbdb7e47f9d32afce90aeaf191b6e71edc2ac78ab45a9e657eaa37b853048c70"}, "downloads": -1, "filename": "otreeutils-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6473eb3e4cf7fc62207e7fae306c007b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11925, "upload_time": "2017-02-03T08:45:04", "upload_time_iso_8601": "2017-02-03T08:45:04.531044Z", "url": "https://files.pythonhosted.org/packages/68/cb/f79df6e899c07c094e184d1db38bd2b3375bc2219a1ec15310c33d2f99dc/otreeutils-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d4b5e5b6b98c38d3adeb44cfaa1d4f31", "sha256": "19d140aa162775318e1c01c54cbd9cb2f79aa315834c7fd332bd66945d467dd5"}, "downloads": -1, "filename": "otreeutils-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d4b5e5b6b98c38d3adeb44cfaa1d4f31", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9640, "upload_time": "2017-10-16T11:33:38", "upload_time_iso_8601": "2017-10-16T11:33:38.794789Z", "url": "https://files.pythonhosted.org/packages/a0/8d/64553579d26bf1ba673bffa3e25770339636e347ee956ee6c90fd92a17ae/otreeutils-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc32a5023feceb2fd57a95ade7444f5c", "sha256": "268e8b9e442bc50e9f5df95bc2c76bf6c4daa274f2b5717a61bd3ebeaddad8d4"}, "downloads": -1, "filename": "otreeutils-0.2.2.tar.gz", "has_sig": false, "md5_digest": "dc32a5023feceb2fd57a95ade7444f5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12371, "upload_time": "2017-10-16T11:33:37", "upload_time_iso_8601": "2017-10-16T11:33:37.309057Z", "url": "https://files.pythonhosted.org/packages/4c/8c/e9e21323cb3db86460a751fd2ac14f0ffb6e4b3a8a2d65b8ca9816a93586/otreeutils-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "012fdc7d8f59b65455d4324d83b593a4", "sha256": "f151660189896285810e435bb6582b565c59baafd4ac667b00c495012c4c5268"}, "downloads": -1, "filename": "otreeutils-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "012fdc7d8f59b65455d4324d83b593a4", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 10026, "upload_time": "2017-11-03T09:33:25", "upload_time_iso_8601": "2017-11-03T09:33:25.256088Z", "url": "https://files.pythonhosted.org/packages/0a/28/465e959e2d7232eedd833c1297a877a40c3a860f707c79e80d0f81596292/otreeutils-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a79dfdbb8ac354226de20731d641535", "sha256": "68a17c5f9af1c0b87af5a90ff975406d3cf98d06f58a6542fcc91353a6f23963"}, "downloads": -1, "filename": "otreeutils-0.2.3.tar.gz", "has_sig": false, "md5_digest": "1a79dfdbb8ac354226de20731d641535", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12807, "upload_time": "2017-11-03T09:33:23", "upload_time_iso_8601": "2017-11-03T09:33:23.832211Z", "url": "https://files.pythonhosted.org/packages/f1/72/41e136297e1982f1dde271e7d01d4bb518e04fb41878c0ce2af486c301f2/otreeutils-0.2.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7f3e023567a8e2328ee31c5f739f6da0", "sha256": "6739ad4163e276fb2178595a748d3d067eb77ff5af72cb55d2cdffc7bafe12b5"}, "downloads": -1, "filename": "otreeutils-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7f3e023567a8e2328ee31c5f739f6da0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14556, "upload_time": "2018-04-25T11:15:52", "upload_time_iso_8601": "2018-04-25T11:15:52.675895Z", "url": "https://files.pythonhosted.org/packages/e9/e8/b4e2b4ef6377295d6174c223b2716b1b832acf4ec3ebff8a834133c1f478/otreeutils-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "897d452bdcabc0186fd916f62cf20b86", "sha256": "701faf1de3d65c939b7b1a9fd8ee4ce34ca1f40a70ad605fa5ea3f39993c34a3"}, "downloads": -1, "filename": "otreeutils-0.3.1.tar.gz", "has_sig": false, "md5_digest": "897d452bdcabc0186fd916f62cf20b86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16329, "upload_time": "2018-04-25T11:34:01", "upload_time_iso_8601": "2018-04-25T11:34:01.834828Z", "url": "https://files.pythonhosted.org/packages/ff/5a/e217eeafc358945e791d070eaccca726ccbdba6da7c23023b77291306a8d/otreeutils-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ead6fa08ba56e500a85d756fc2969159", "sha256": "ecf85ae1b567bcb3a655416bd50ea5ba3693743cbf7032a655878adf4127cbe4"}, "downloads": -1, "filename": "otreeutils-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ead6fa08ba56e500a85d756fc2969159", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25961, "upload_time": "2018-09-27T15:07:25", "upload_time_iso_8601": "2018-09-27T15:07:25.486745Z", "url": "https://files.pythonhosted.org/packages/7f/30/71b9ea4be343827366271a2870a58d5d6cccf6486be88ddcfe52419980a8/otreeutils-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e4338b816eb3d899b03a0135ddc77de", "sha256": "61b9da8f1c18f6b38b35fca3c2d83b8bead0b78438e763d26fa349acefdd9b95"}, "downloads": -1, "filename": "otreeutils-0.4.0.tar.gz", "has_sig": false, "md5_digest": "7e4338b816eb3d899b03a0135ddc77de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18962, "upload_time": "2018-09-27T15:07:27", "upload_time_iso_8601": "2018-09-27T15:07:27.277322Z", "url": "https://files.pythonhosted.org/packages/1d/70/399049f7a636db10b84007ca0000f265a7a4b33b3087a70c4a408e1c2065/otreeutils-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "1053b4945abff6b7de157c4e77a05887", "sha256": "f1ce8e8562d046d2c7d11331b8706068daafe7b90eb75b6e45177d73bdd1cca8"}, "downloads": -1, "filename": "otreeutils-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1053b4945abff6b7de157c4e77a05887", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25967, "upload_time": "2018-09-28T13:59:50", "upload_time_iso_8601": "2018-09-28T13:59:50.423397Z", "url": "https://files.pythonhosted.org/packages/72/59/3c2a12e0cd9c843262d7b5767f75099ace51eda086b835da720e7104e1ee/otreeutils-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e5dddd92fcf27e919f4976672a9ef94", "sha256": "fb9871e582678e457b254f9054763baf07c624a4ff9bf29516f8df65351b4301"}, "downloads": -1, "filename": "otreeutils-0.4.1.tar.gz", "has_sig": false, "md5_digest": "7e5dddd92fcf27e919f4976672a9ef94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18969, "upload_time": "2018-09-28T13:59:52", "upload_time_iso_8601": "2018-09-28T13:59:52.008256Z", "url": "https://files.pythonhosted.org/packages/f8/12/870cf046cda50732f7c56bd336cc8764bafdfae622f5395c041baf974476/otreeutils-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "55db881e9aca90dce12639c8b6aae104", "sha256": "fe7db5f0ad89daa9c3cb78061b8ceafa411079ed2811837514ca6a07079ec076"}, "downloads": -1, "filename": "otreeutils-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "55db881e9aca90dce12639c8b6aae104", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25972, "upload_time": "2018-10-02T07:29:15", "upload_time_iso_8601": "2018-10-02T07:29:15.586299Z", "url": "https://files.pythonhosted.org/packages/f6/79/8a04c63f6751d9193bb6a638dffe8894b02f38913a805d0049b0988793a4/otreeutils-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "467c16f8f86b84b9340edfc9654b2409", "sha256": "bbc556e50ce6f584a54bcfad6bb36ab1a7d33d00dc29be09464da074038c9532"}, "downloads": -1, "filename": "otreeutils-0.5.0.tar.gz", "has_sig": false, "md5_digest": "467c16f8f86b84b9340edfc9654b2409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16067, "upload_time": "2018-10-02T07:29:17", "upload_time_iso_8601": "2018-10-02T07:29:17.354691Z", "url": "https://files.pythonhosted.org/packages/55/26/a041085402fe61fdb2f63e6742290e53386d53580a4779124f3f40b79500/otreeutils-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "c34855a46122a04f502797ab3b338638", "sha256": "4596a3c6ed2742967b22736a25abf6bbfb5b2402f397ab897621569bb86443f2"}, "downloads": -1, "filename": "otreeutils-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c34855a46122a04f502797ab3b338638", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29764, "upload_time": "2019-02-18T15:48:49", "upload_time_iso_8601": "2019-02-18T15:48:49.066340Z", "url": "https://files.pythonhosted.org/packages/83/11/bdc54fc23ed81304d8f3a1662a8d1b40a273ff04d5fd6c34de49d0253337/otreeutils-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d50be6b1735483210f148438443333cb", "sha256": "90fe0a6cb2067ed7e06a45b3df29d9b33d1dcc13938219f3b25bdda9e48f1de7"}, "downloads": -1, "filename": "otreeutils-0.5.1.tar.gz", "has_sig": false, "md5_digest": "d50be6b1735483210f148438443333cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26467, "upload_time": "2019-02-18T15:48:50", "upload_time_iso_8601": "2019-02-18T15:48:50.696151Z", "url": "https://files.pythonhosted.org/packages/48/b1/e92056376309cb7415d554e2336e7c96b6463af5d3559c575ff408643158/otreeutils-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "ab459fed0b02a3553b58b738b7dc45b2", "sha256": "d936981c569be9ad566d80a70e4e6784fbd8221f8788fa7bb0bbaef0ab2eb49b"}, "downloads": -1, "filename": "otreeutils-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ab459fed0b02a3553b58b738b7dc45b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34186, "upload_time": "2019-02-28T14:05:14", "upload_time_iso_8601": "2019-02-28T14:05:14.767227Z", "url": "https://files.pythonhosted.org/packages/c3/c2/463aecf61dfd45c77c5191fc07feba876226a2b76dfcc79bc2c21a1edb6e/otreeutils-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2dbdcc2f7f7ea5ea3eb04ef2315fc80", "sha256": "ba45d35bcdb45eddb1ebbebdea17b96495c82553731e56b0915cd0ac0ccf9fd4"}, "downloads": -1, "filename": "otreeutils-0.6.0.tar.gz", "has_sig": false, "md5_digest": "d2dbdcc2f7f7ea5ea3eb04ef2315fc80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29781, "upload_time": "2019-02-28T14:05:16", "upload_time_iso_8601": "2019-02-28T14:05:16.397030Z", "url": "https://files.pythonhosted.org/packages/9a/e8/ff2043582662fdd64ee36135375a7a97afa56d07216ca84e580d8f795300/otreeutils-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "c1e76462774c47df14df63cc19d97dbc", "sha256": "c03047eb93e0799fee4450ee1dbe9b0464e093ee3ebe3f4ab834ff371481ecd0"}, "downloads": -1, "filename": "otreeutils-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c1e76462774c47df14df63cc19d97dbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38351, "upload_time": "2019-04-09T14:38:35", "upload_time_iso_8601": "2019-04-09T14:38:35.998124Z", "url": "https://files.pythonhosted.org/packages/25/27/a08d3459d24b3863c56356f2bac713c2ac18e34df12466fe06039b07bcfb/otreeutils-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "364ecfd7d17966956188f153fddfc082", "sha256": "dc9f00557543cc7158e683ff7dc3ef9998ed4874d0611fbac0c14804f2869ce3"}, "downloads": -1, "filename": "otreeutils-0.7.0.tar.gz", "has_sig": false, "md5_digest": "364ecfd7d17966956188f153fddfc082", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33252, "upload_time": "2019-04-09T14:38:37", "upload_time_iso_8601": "2019-04-09T14:38:37.678977Z", "url": "https://files.pythonhosted.org/packages/28/b1/218c4b0f4d08107c6677c69134c9cbbc55a72cfa35dbcb8ed7aa677b0530/otreeutils-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "54a2ab867effea30a1b365a13e85474a", "sha256": "bdae1e0e75b93c627c3e43c54d0e74d700c319bd933136184c98a6b742d2dc0d"}, "downloads": -1, "filename": "otreeutils-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "54a2ab867effea30a1b365a13e85474a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38355, "upload_time": "2019-05-07T11:18:41", "upload_time_iso_8601": "2019-05-07T11:18:41.269962Z", "url": "https://files.pythonhosted.org/packages/c9/dd/6f5b85764600ea5103a700323f7eedd1a273b3257297ddab975cf19f6d83/otreeutils-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79ea9e0b8446aa98ee5498801a8b59c8", "sha256": "6273597fe3bf1172e16ae1911d9dddb1abe54629a352336eee069bfef7d2e531"}, "downloads": -1, "filename": "otreeutils-0.7.1.tar.gz", "has_sig": false, "md5_digest": "79ea9e0b8446aa98ee5498801a8b59c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33237, "upload_time": "2019-05-07T11:18:43", "upload_time_iso_8601": "2019-05-07T11:18:43.008997Z", "url": "https://files.pythonhosted.org/packages/de/25/bc83589bc66d0a2ef2ac3fcb9e78b3ab7a263340a3e1debe546fd701752e/otreeutils-0.7.1.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "fd56e222c9879d9ccd6e1fba12311cab", "sha256": "45572c5d07e40ee205d117e77c06a0016696c2e4edb5de744127c52ff78968fd"}, "downloads": -1, "filename": "otreeutils-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fd56e222c9879d9ccd6e1fba12311cab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37100, "upload_time": "2019-05-15T10:47:59", "upload_time_iso_8601": "2019-05-15T10:47:59.022123Z", "url": "https://files.pythonhosted.org/packages/28/25/4563f82e1f1a615de4a3bd5e0728efccc3160a9e287ff25de267e4299f46/otreeutils-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb0c9a9847ca7f01e251ea77ab4f6976", "sha256": "eb9288e9277602322e4ed185c5b2ecf5f39029885efae3e5dfc84b46077990d9"}, "downloads": -1, "filename": "otreeutils-0.8.0.tar.gz", "has_sig": false, "md5_digest": "bb0c9a9847ca7f01e251ea77ab4f6976", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34917, "upload_time": "2019-05-15T10:48:01", "upload_time_iso_8601": "2019-05-15T10:48:01.066816Z", "url": "https://files.pythonhosted.org/packages/33/cf/a2a05f689c837063ea694e89644e709b444e39e8e9235485b0eeec454de4/otreeutils-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "625eded5ea19a248f75ce199589fe5b1", "sha256": "1320b94752f5e08705f48c39b7fa13e483ec49ef9817326a65b06f43021dd7a1"}, "downloads": -1, "filename": "otreeutils-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "625eded5ea19a248f75ce199589fe5b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38232, "upload_time": "2019-05-28T11:16:10", "upload_time_iso_8601": "2019-05-28T11:16:10.204916Z", "url": "https://files.pythonhosted.org/packages/f4/50/8643e27220934b5b248dd031fc335e791ca07ef31884b0bf289fb8b782ea/otreeutils-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "253be772e9d1262af57e801aa1e2e3ab", "sha256": "4a95f07d901b3bc57f928a8e76cf70e0008f43d81c68580f529084fecf12c0cf"}, "downloads": -1, "filename": "otreeutils-0.9.0.tar.gz", "has_sig": false, "md5_digest": "253be772e9d1262af57e801aa1e2e3ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36007, "upload_time": "2019-05-28T11:16:12", "upload_time_iso_8601": "2019-05-28T11:16:12.358656Z", "url": "https://files.pythonhosted.org/packages/43/a0/ac48d39f880cbffdf8ea3ff18099ef77fc9dca641ed307fed30d430eecd5/otreeutils-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "ba2af7c2a72b08f076d347200813ebb7", "sha256": "56d389600ad04d02aa80869d246a645c6cec004f33887f7379e77943b1d05e7c"}, "downloads": -1, "filename": "otreeutils-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba2af7c2a72b08f076d347200813ebb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38500, "upload_time": "2019-06-13T13:30:45", "upload_time_iso_8601": "2019-06-13T13:30:45.724236Z", "url": "https://files.pythonhosted.org/packages/be/27/4a0d526f08062f9a041c2d91e644516916c1ec51db2a35ab01120cf8a70a/otreeutils-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a58e5b6bcd5c3ce9c8c7994adae0668", "sha256": "2c6f51105a55df5d0bf8c1780d39635c84b6a9d4d30e975647569565b650f0e3"}, "downloads": -1, "filename": "otreeutils-0.9.1.tar.gz", "has_sig": false, "md5_digest": "6a58e5b6bcd5c3ce9c8c7994adae0668", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36232, "upload_time": "2019-06-13T13:30:48", "upload_time_iso_8601": "2019-06-13T13:30:48.339188Z", "url": "https://files.pythonhosted.org/packages/8b/aa/ac1510f6b027630fca1d8d6735b33ae7446f7728a7ee439ac2d26d1ab211/otreeutils-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "5177067bb5b4bb774a7d1834ecad4a75", "sha256": "62ac03b3165d8f9479307004c59ade975de22e34301350d5ee8da34ba688bc49"}, "downloads": -1, "filename": "otreeutils-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5177067bb5b4bb774a7d1834ecad4a75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38526, "upload_time": "2019-09-23T11:00:54", "upload_time_iso_8601": "2019-09-23T11:00:54.763958Z", "url": "https://files.pythonhosted.org/packages/f0/ee/d192854c78bd4a19abde59c23c24aca99924a3062848d4c81d8b722d3c73/otreeutils-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fcbae2b364646c38509966216394c3f", "sha256": "8fd07c7c828afcbf6e10e53d2497da38e61c678ee255d0d199b765c930c7e0f5"}, "downloads": -1, "filename": "otreeutils-0.9.2.tar.gz", "has_sig": false, "md5_digest": "7fcbae2b364646c38509966216394c3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36253, "upload_time": "2019-09-23T11:00:57", "upload_time_iso_8601": "2019-09-23T11:00:57.280537Z", "url": "https://files.pythonhosted.org/packages/4b/70/fb6940af536f18ad9b6fcf21662df142f64b83b758ff2f4b943cdb90c1d5/otreeutils-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5177067bb5b4bb774a7d1834ecad4a75", "sha256": "62ac03b3165d8f9479307004c59ade975de22e34301350d5ee8da34ba688bc49"}, "downloads": -1, "filename": "otreeutils-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5177067bb5b4bb774a7d1834ecad4a75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38526, "upload_time": "2019-09-23T11:00:54", "upload_time_iso_8601": "2019-09-23T11:00:54.763958Z", "url": "https://files.pythonhosted.org/packages/f0/ee/d192854c78bd4a19abde59c23c24aca99924a3062848d4c81d8b722d3c73/otreeutils-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fcbae2b364646c38509966216394c3f", "sha256": "8fd07c7c828afcbf6e10e53d2497da38e61c678ee255d0d199b765c930c7e0f5"}, "downloads": -1, "filename": "otreeutils-0.9.2.tar.gz", "has_sig": false, "md5_digest": "7fcbae2b364646c38509966216394c3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36253, "upload_time": "2019-09-23T11:00:57", "upload_time_iso_8601": "2019-09-23T11:00:57.280537Z", "url": "https://files.pythonhosted.org/packages/4b/70/fb6940af536f18ad9b6fcf21662df142f64b83b758ff2f4b943cdb90c1d5/otreeutils-0.9.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:47 2020"}