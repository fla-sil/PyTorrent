{"info": {"author": "Morten Jensen", "author_email": "release@virtuability.com", "bugtrack_url": null, "classifiers": [], "description": "# Python context-log library\n\n## About\n\ncontext-log is a simple library to emit contextual information in structured logs (JSON).\n\nIt works particularly well in a Docker or Serverless (e.g. AWS Lambda) environment where a single thread executes a request and produces a response.\n\nThe library uses python threading to store contextual information that is automatically added to all subsequent logs in a `contextMap` field.\n\nBecause the library uses the Python thread local context it works across packages and modules in a given project.\n\nThe approach is loosely based on the [Log4j 2 API Thread Context](https://logging.apache.org/log4j/2.x/manual/thread-context.html).\n\n## Usage\n\nStructured logging can be achieved with the [python-json-logger library](https://pypi.org/project/python-json-logger/).\n\nSimply add project dependencies to requirements.txt:\n\n```python\npython_json_logger\nPyYAML\ncontext-log\n```\n\nAdd the code below to the main code module.\n\nAdd the following YAML configuration in the `resources/logging.yaml` file, which outputs JSON structured logs to `stdout`.\n\n```yaml\nversion: 1\nformatters:\n  json:\n    class:  .jsonlogger.JsonFormatter\n    format: '%(asctime)s %(name)s %(levelname)s %(message)s %(filename)s'\nhandlers:\n  console:\n    class: logging.StreamHandler\n    level: DEBUG\n    formatter: json\nroot:\n  level: DEBUG\n  handlers:\n    - console\n```\n\nUse the context_log library to emit logs. Example below.\n\n```python\nimport logging.config\nimport yaml\n\nwith open('resources/logging.yaml', 'r') as log_config_file:\n  logging.config.dictConfig(yaml.safe_load(log_config_file))\n\nfrom context_log import ContextLog\n\ndef handler(event, context):\n    # Clear context (e.g. re-use) and get logger\n    log = ContextLog.get_logger('handler', True)\n    log.info('start')\n\n    ContextLog.put('ip', '1.2.3.4')\n\n    # Helper to add start time in ISO and epoch time\n    ContextLog.put_request_start_time()\n\n    # Process request\n    sleep(0.1)\n\n    # Helper to add end time in ISO and epoch time\n    # as well as duration in milliseconds\n    ContextLog.put_request_end_time()\n\n    log.info('end')\n```\n\nFirst log info event:\n\n```json\n{\n    \"asctime\": \"2019-09-19 11:53:20,479\",\n    \"name\": \"handler\",\n    \"levelname\": \"INFO\",\n    \"message\": \"start\",\n    \"filename\": \"test_example.py\",\n    \"contextMap\": {}\n}\n```\n\nSecond log info event:\n\n```json\n{\n  \"asctime\": \"2019-09-19 11:53:20,580\",\n  \"name\": \"handler\",\n  \"levelname\": \"INFO\",\n  \"message\": \"end\",\n  \"filename\": \"test_example.py\",\n  \"contextMap\": {\n      \"ip\": \"1.2.3.4\",\n      \"start-time\": \"2019-09-19T11:53:20.480085\",\n      \"epoch-start-time\": 1568890400.480085,\n      \"end-time\": \"2019-09-19T11:53:20.580513\",\n      \"epoch-end-time\": 1568890400.580513,\n      \"duration\": 100.428}\n}\n```\n\n## The Detail\n\nThe standard logger is wrapped by a `LoggerAdapter`. It is therefore imperative that the `ContextLog.get_logger(name='<name>', clear=True|False)` call is made to get the logger to emit contextual logs.\n\nUse `clear=True` when starting a new request in order to clear the previous context if the thread is re-used. This is typically the case in thread pools and in AWS Lambda's.\n\nTo manipulate or retrieve the `contextMap` use the following methods:\n\n* `clear()`\n* `put(key, value)`\n* `get(key)`\n* `get_map()`\n\nThere are also a number of helpers in an attempt to standardise log output `contextMap` fields:\n\n* `put_request_id(request_id)`\n* `put_request_method(request_method)`\n* `put_request_path(request_path)`\n* `put_response_status(response_status)`\n* `put_start_time()`\n* `put_end_time()`\n* `put_request_user_id(request_user_id)`\n* `put_request_client_id(request_client_id)`\n* `put_request_primary_ip(primary_ip)`\n* `put_request_client_ip(client_ip)`\n* `put_request_viewer_country(viewer_country)`\n* `put_trigger_source(trigger_source)`\n\n## Contributing\n\nPull requests are more than welcome.\n\n## Running pytest\n\nCreate virtualenv, download dependencies and run tests:\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate\npip3 install -r tests/requirements.txt\npip3 install -e .\npytest\n```\n\n## Running tox\n\n```bash\npip3 install --user --upgrade tox\ntox\n```\n\n## Releasing library to PyPI\n\nShort version from the [Packaging Python Projects](https://packaging.python.org/tutorials/packaging-projects/) site.\n\nInstall the release tools:\n\n```bash\npython3 -m pip install --user --upgrade setuptools wheel twine\n```\n\nRemove old distribution(s):\n\n```\nrm -rf dist/\n```\n\nBuild the context-log package:\n\n```bash\npython3 setup.py sdist bdist_wheel\n```\n\nUpload context-log first to Test PyPI:\n\n```bash\npython3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/virtuability/context-log", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "context-log", "package_url": "https://pypi.org/project/context-log/", "platform": "", "project_url": "https://pypi.org/project/context-log/", "project_urls": {"Homepage": "https://github.com/virtuability/context-log"}, "release_url": "https://pypi.org/project/context-log/0.1.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A simple library to emit contextual information in structured logs (JSON)", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python context-log library</h1>\n<h2>About</h2>\n<p>context-log is a simple library to emit contextual information in structured logs (JSON).</p>\n<p>It works particularly well in a Docker or Serverless (e.g. AWS Lambda) environment where a single thread executes a request and produces a response.</p>\n<p>The library uses python threading to store contextual information that is automatically added to all subsequent logs in a <code>contextMap</code> field.</p>\n<p>Because the library uses the Python thread local context it works across packages and modules in a given project.</p>\n<p>The approach is loosely based on the <a href=\"https://logging.apache.org/log4j/2.x/manual/thread-context.html\" rel=\"nofollow\">Log4j 2 API Thread Context</a>.</p>\n<h2>Usage</h2>\n<p>Structured logging can be achieved with the <a href=\"https://pypi.org/project/python-json-logger/\" rel=\"nofollow\">python-json-logger library</a>.</p>\n<p>Simply add project dependencies to requirements.txt:</p>\n<pre><span class=\"n\">python_json_logger</span>\n<span class=\"n\">PyYAML</span>\n<span class=\"n\">context</span><span class=\"o\">-</span><span class=\"n\">log</span>\n</pre>\n<p>Add the code below to the main code module.</p>\n<p>Add the following YAML configuration in the <code>resources/logging.yaml</code> file, which outputs JSON structured logs to <code>stdout</code>.</p>\n<pre><span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n<span class=\"nt\">formatters</span><span class=\"p\">:</span>\n  <span class=\"nt\">json</span><span class=\"p\">:</span>\n    <span class=\"nt\">class</span><span class=\"p\">:</span>  <span class=\"l l-Scalar l-Scalar-Plain\">.jsonlogger.JsonFormatter</span>\n    <span class=\"nt\">format</span><span class=\"p\">:</span> <span class=\"s\">'%(asctime)s</span><span class=\"nv\"> </span><span class=\"s\">%(name)s</span><span class=\"nv\"> </span><span class=\"s\">%(levelname)s</span><span class=\"nv\"> </span><span class=\"s\">%(message)s</span><span class=\"nv\"> </span><span class=\"s\">%(filename)s'</span>\n<span class=\"nt\">handlers</span><span class=\"p\">:</span>\n  <span class=\"nt\">console</span><span class=\"p\">:</span>\n    <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">logging.StreamHandler</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">DEBUG</span>\n    <span class=\"nt\">formatter</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">json</span>\n<span class=\"nt\">root</span><span class=\"p\">:</span>\n  <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">DEBUG</span>\n  <span class=\"nt\">handlers</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">console</span>\n</pre>\n<p>Use the context_log library to emit logs. Example below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging.config</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'resources/logging.yaml'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">log_config_file</span><span class=\"p\">:</span>\n  <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">dictConfig</span><span class=\"p\">(</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">(</span><span class=\"n\">log_config_file</span><span class=\"p\">))</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">context_log</span> <span class=\"kn\">import</span> <span class=\"n\">ContextLog</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Clear context (e.g. re-use) and get logger</span>\n    <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">ContextLog</span><span class=\"o\">.</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s1\">'handler'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'start'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ContextLog</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'ip'</span><span class=\"p\">,</span> <span class=\"s1\">'1.2.3.4'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Helper to add start time in ISO and epoch time</span>\n    <span class=\"n\">ContextLog</span><span class=\"o\">.</span><span class=\"n\">put_request_start_time</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Process request</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Helper to add end time in ISO and epoch time</span>\n    <span class=\"c1\"># as well as duration in milliseconds</span>\n    <span class=\"n\">ContextLog</span><span class=\"o\">.</span><span class=\"n\">put_request_end_time</span><span class=\"p\">()</span>\n\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">)</span>\n</pre>\n<p>First log info event:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"asctime\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-09-19 11:53:20,479\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"handler\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"levelname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"INFO\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"start\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"filename\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_example.py\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"contextMap\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Second log info event:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"asctime\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-09-19 11:53:20,580\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"handler\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"levelname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"INFO\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"end\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"filename\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_example.py\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"contextMap\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"ip\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.2.3.4\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"start-time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-09-19T11:53:20.480085\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"epoch-start-time\"</span><span class=\"p\">:</span> <span class=\"mf\">1568890400.480085</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"end-time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-09-19T11:53:20.580513\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"epoch-end-time\"</span><span class=\"p\">:</span> <span class=\"mf\">1568890400.580513</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"duration\"</span><span class=\"p\">:</span> <span class=\"mf\">100.428</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>The Detail</h2>\n<p>The standard logger is wrapped by a <code>LoggerAdapter</code>. It is therefore imperative that the <code>ContextLog.get_logger(name='&lt;name&gt;', clear=True|False)</code> call is made to get the logger to emit contextual logs.</p>\n<p>Use <code>clear=True</code> when starting a new request in order to clear the previous context if the thread is re-used. This is typically the case in thread pools and in AWS Lambda's.</p>\n<p>To manipulate or retrieve the <code>contextMap</code> use the following methods:</p>\n<ul>\n<li><code>clear()</code></li>\n<li><code>put(key, value)</code></li>\n<li><code>get(key)</code></li>\n<li><code>get_map()</code></li>\n</ul>\n<p>There are also a number of helpers in an attempt to standardise log output <code>contextMap</code> fields:</p>\n<ul>\n<li><code>put_request_id(request_id)</code></li>\n<li><code>put_request_method(request_method)</code></li>\n<li><code>put_request_path(request_path)</code></li>\n<li><code>put_response_status(response_status)</code></li>\n<li><code>put_start_time()</code></li>\n<li><code>put_end_time()</code></li>\n<li><code>put_request_user_id(request_user_id)</code></li>\n<li><code>put_request_client_id(request_client_id)</code></li>\n<li><code>put_request_primary_ip(primary_ip)</code></li>\n<li><code>put_request_client_ip(client_ip)</code></li>\n<li><code>put_request_viewer_country(viewer_country)</code></li>\n<li><code>put_trigger_source(trigger_source)</code></li>\n</ul>\n<h2>Contributing</h2>\n<p>Pull requests are more than welcome.</p>\n<h2>Running pytest</h2>\n<p>Create virtualenv, download dependencies and run tests:</p>\n<pre>python3 -m venv .venv\n<span class=\"nb\">source</span> .venv/bin/activate\npip3 install -r tests/requirements.txt\npip3 install -e .\npytest\n</pre>\n<h2>Running tox</h2>\n<pre>pip3 install --user --upgrade tox\ntox\n</pre>\n<h2>Releasing library to PyPI</h2>\n<p>Short version from the <a href=\"https://packaging.python.org/tutorials/packaging-projects/\" rel=\"nofollow\">Packaging Python Projects</a> site.</p>\n<p>Install the release tools:</p>\n<pre>python3 -m pip install --user --upgrade setuptools wheel twine\n</pre>\n<p>Remove old distribution(s):</p>\n<pre><code>rm -rf dist/\n</code></pre>\n<p>Build the context-log package:</p>\n<pre>python3 setup.py sdist bdist_wheel\n</pre>\n<p>Upload context-log first to Test PyPI:</p>\n<pre>python3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n</pre>\n\n          </div>"}, "last_serial": 6020044, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9e5268ac42ef8c23d6b17a775ca68413", "sha256": "0a60541a824225604023476fad28acc21aa4bc21af064f6545490a07c1fc9948"}, "downloads": -1, "filename": "context_log-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9e5268ac42ef8c23d6b17a775ca68413", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5700, "upload_time": "2019-09-20T08:06:26", "upload_time_iso_8601": "2019-09-20T08:06:26.294784Z", "url": "https://files.pythonhosted.org/packages/80/a1/0df23bbb5d12a64b40c10de1c2d9da26e2bc855f1e4f2b3d171abce8cdf1/context_log-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b147d371a93d9e64ea2e359ea41cb825", "sha256": "f7473b5cb1fcc1a5943c4eb1ce6c69541dfbbe3fb01c72e52ae05d343c26d5ea"}, "downloads": -1, "filename": "context-log-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b147d371a93d9e64ea2e359ea41cb825", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4345, "upload_time": "2019-09-20T08:06:28", "upload_time_iso_8601": "2019-09-20T08:06:28.834782Z", "url": "https://files.pythonhosted.org/packages/d7/f9/0f041f79f4c8064eb2f07d2e23305a831a2fed7ddd46008b56071896cafb/context-log-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2b943b3e56f3373622851f7a6950893f", "sha256": "3b4afbcdad68fb6e756a4189fa2fed2dedd79dc585ac97f1d4b115b0b15d9e74"}, "downloads": -1, "filename": "context_log-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2b943b3e56f3373622851f7a6950893f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6015, "upload_time": "2019-10-23T18:46:50", "upload_time_iso_8601": "2019-10-23T18:46:50.832969Z", "url": "https://files.pythonhosted.org/packages/af/2e/a5f7167defaceda79657cb20f72690b4ac082508db9a2e34c90a4890f464/context_log-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9433d02de03e11be22a4daf3cba91e4c", "sha256": "c4022a86ebe2c55cb456ade01db05f696177437c7f5dc1f9cb8c05240585082a"}, "downloads": -1, "filename": "context-log-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9433d02de03e11be22a4daf3cba91e4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4752, "upload_time": "2019-10-23T18:46:52", "upload_time_iso_8601": "2019-10-23T18:46:52.783035Z", "url": "https://files.pythonhosted.org/packages/e7/97/de326181cb1238675abb50ce34b6ec17474f1416f39eb1f0a08a17f4d304/context-log-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b943b3e56f3373622851f7a6950893f", "sha256": "3b4afbcdad68fb6e756a4189fa2fed2dedd79dc585ac97f1d4b115b0b15d9e74"}, "downloads": -1, "filename": "context_log-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2b943b3e56f3373622851f7a6950893f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6015, "upload_time": "2019-10-23T18:46:50", "upload_time_iso_8601": "2019-10-23T18:46:50.832969Z", "url": "https://files.pythonhosted.org/packages/af/2e/a5f7167defaceda79657cb20f72690b4ac082508db9a2e34c90a4890f464/context_log-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9433d02de03e11be22a4daf3cba91e4c", "sha256": "c4022a86ebe2c55cb456ade01db05f696177437c7f5dc1f9cb8c05240585082a"}, "downloads": -1, "filename": "context-log-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9433d02de03e11be22a4daf3cba91e4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4752, "upload_time": "2019-10-23T18:46:52", "upload_time_iso_8601": "2019-10-23T18:46:52.783035Z", "url": "https://files.pythonhosted.org/packages/e7/97/de326181cb1238675abb50ce34b6ec17474f1416f39eb1f0a08a17f4d304/context-log-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:33 2020"}