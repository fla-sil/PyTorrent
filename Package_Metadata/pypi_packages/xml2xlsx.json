{"info": {"author": "Piotr Kaczy\u0144ski", "author_email": "pkaczyns@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "========\r\nxml2xlsx\r\n========\r\n\r\n.. image:: https://travis-ci.org/pkaczynski/xml2xlsx.svg?branch=master\r\n    :target: https://travis-ci.org/pkaczynski/xml2xlsx\r\n\r\n\r\n.. image:: https://coveralls.io/repos/github/pkaczynski/xml2xlsx/badge.svg?branch=master\r\n    :target: https://coveralls.io/github/pkaczynski/xml2xlsx?branch=master\r\n\r\n\r\n.. image:: https://img.shields.io/pypi/v/xml2xlsx.svg\r\n    :target: https://pypi.python.org/pypi/xml2xlsx\r\n    \r\n.. image:: https://img.shields.io/pypi/pyversions/xml2xlsx.svg\r\n    :target: https://pypi.python.org/pypi/xml2xlsx/\r\n    \r\n.. image:: https://img.shields.io/pypi/dd/xml2xlsx.svg\r\n    :target: https://pypi.python.org/pypi/xml2xlsx/\r\n\r\n\r\nCreating ``xlsx`` files from ``xml`` template using openpyxl_.\r\n\r\nTarget\r\n======\r\nThis project is intended to create ``xlsx`` files from ``xml`` api to\r\n``openpyxl``, supposedly generated by other tamplate engines (i.e. django,\r\njinja).\r\n\r\nThis is a merely an xml parser translating mostly linearly to worksheet, rows\r\nand finally cells of the Excel workbook.\r\n\r\nExample\r\n-------\r\nAn xml file like this one\r\n\r\n.. code-block:: xml\r\n\r\n    <workbook>\r\n        <worksheet title=\"test\">\r\n            <row><cell>This</cell><cell>is</cell><cell>a TEST</cell></row>\r\n            <row><cell>Nice, isn't it?</cell></row>\r\n        </worksheet>\r\n    </workbook>\r\n\r\ncan be parsed to create a neat Excel workbook with two rows of data in one\r\nworksheet. Parsing can be done using command line (provided that you have your\r\nsystem paths set correctly:\r\n\r\n.. code-block:: bash\r\n\r\n    xml2xlsx < input.xml > output.xml\r\n\r\nor as a library call\r\n\r\n.. code-block:: python\r\n\r\n    from xml2xlsx import xml2xlsx\r\n    template = '<sheet title=\"test\"></sheet>'\r\n    f = open('test.xlsx', 'wb')\r\n    f.write(xml2xlsx(template))\r\n    f.close()\r\n\r\nThis is mainly intended (and was developed for this purpose) to parse files\r\ngenerated by other templating engines, like django template system. One can\r\ngenerate an excel workbook from template like this:\r\n\r\n.. code-block:: xml\r\n\r\n    {% for e in list %}\r\n        <row><cell>{{ e.name }}</cell></row>\r\n    {% endfor %}\r\n\r\n\r\nFeatures\r\n========\r\nBasic features of the library include creating multiple, named sheets within one\r\nworkbook and creating rows of cells in these sheets. However, there are more\r\npossibiliteis to create complex excel based reports.\r\n\r\nCell type\r\n---------\r\nEach cell can be specified to use one of the types:\r\n\r\n* string (default)\r\n* number\r\n* date\r\n\r\nType is defined in ``type`` cell attribute. The cell value is converted\r\nappropriately to the type specified. If you insert a number in the cell value\r\nand do not specify ``type=\"number\"`` attribute, you will find Excel complaining\r\nabout storing nubers as text.\r\n\r\nSince there are more date formats than countries, you have to be aware of\r\ncurrent locale. The simplest way to be i18n compatible is to specify date format\r\nin ``date-fmt`` attribute and pass compatible (possibily non localized) date\r\nin the cell value, as in the following example\r\n\r\n.. code-block:: xml\r\n\r\n    ...\r\n    <row><cell type=\"date\" date-fmt=\"%Y-%m-%d\">2016-10-01</cell></row>\r\n    <row><cell type=\"date\" date-fmt=\"%d.%m.%Y\">01.10.2016</cell></row>\r\n    ...\r\n\r\nGenerated excel file will have two rows with the same date (1st of October 2016)\r\nwith date formatted according to Excel defaults (and current locale).\r\n\r\n.. warning::\r\n\r\n    Excel tries to be very smart and converts date-like text to date format.\r\n    Please use ``type=\"date\"`` and ``date-fmt`` attribute always if you pass\r\n    dates to cells.\r\n\r\nColumns\r\n-------\r\nColumns can be tackled only in a limited way, i.e. only column widths can be\r\nchanged. Column properties are defined in ``columns`` tag as one or more child\r\nof the ``sheet`` tag. It is possible to specify a range of columns using\r\n``start`` and ``end`` atrributes. For example:\r\n\r\n.. code-block:: xml\r\n\r\n    ...\r\n    <sheet title=\"test\">\r\n        <columns start=\"A\" end=\"D\" width=\"123\"/>\r\n        <row><cell>Test</cell></row>\r\n    </sheet>\r\n    ...\r\n\r\n\r\nFormulas\r\n--------\r\n``xml2xls`` can effectively create cells with formulas in them. The only\r\nlimitation (as with ``openpyxl``) is using English names of the functions.\r\n\r\nFor example:\r\n\r\n.. code-block:: xml\r\n\r\n    ...\r\n    <row><cell>=SUM(A1:A5)</cell></row>\r\n    ...\r\n\r\nCell referencing\r\n----------------\r\nThe parser can store positions of the cell in a dictionary-like structure. It\r\nthen can be referenced to create complex formulas. Each value of the cell is\r\npreprocessed using string format with stored values. This means that these\r\nvalues can be referenced using ``{`` and ``}`` brackets.\r\n\r\nCurrent row and column\r\n~~~~~~~~~~~~~~~~~~~~~~\r\nThere are two basic values that can always be used, i.e. ``row`` and ``col``\r\nwhich return current row number and column name.\r\n\r\n.. code-block:: xml\r\n\r\n    <workbook>\r\n        <sheet>\r\n            <row><cell>{col}{row}</cell></row>\r\n        </sheet>\r\n    </workbook>\r\n    ...\r\n\r\nwould create a workbook with a text \"A1\" included in the ``A1`` cell of the\r\nworksheet. Using template languages, you can create more complicated\r\nconstructs, like (using django template system):\r\n\r\n.. code-block:: xml\r\n\r\n    ...\r\n    {% for e in list %}\r\n    <row>\r\n        <cell type=\"date\" date-fmt=\"%Y-%m-%d\">{{ e|date:\"Y-m-d\" }}</cell>\r\n        <cell>=TEXT(A{row}, \"ddd\")</cell>\r\n    </row>\r\n    {% endfor %}\r\n    ...\r\n\r\nwould create a list of rows with a date in the first column and weekday names\r\nfor these dates in the second column (provided ``list`` context variable\r\ncontains a list of dates).\r\n\r\nSpecified cell\r\n~~~~~~~~~~~~~~\r\nIt is also possible to store cell possible to store names of specified cells in\r\na pseudo-variable (as in a dictionary). One has to use ``ref-id`` attribute of\r\nthe ``cell`` tag and then reuse the value of this attribute in the remainder of\r\nthe xml input. This is very useful in formulas. A simple example would be\r\nreferencing another cell in a formula like this:\r\n\r\n.. code-block:: xml\r\n\r\n    ...\r\n    <row><cell ref-id=\"mycell\">This is just a test</cell></row>\r\n    ...\r\n    <row><cell>={mycell}</cell></row>\r\n    ...\r\n\r\nwhich would create an excel formula referencing a cell with \"this is just a\r\ntest\" text, whatever this cell address was.\r\n\r\n.. warning::\r\n\r\n    Using the same identifier in ``ref-id`` attribute for two different cells\r\n    **overwrites** the cell reference, i.e. the last cell in the xml template\r\n    would be referenced.\r\n\r\nA more complex example using django template engine to create summaries can\r\nlook like this:\r\n\r\n.. code-block:: xml\r\n\r\n    ...\r\n    {% for e in list %}\r\n        <row>\r\n            <cell ref-id=\"{% if forloop.first %}start{% elsif forloop.last %}end{% endif %}\">\r\n                {{ e }}\r\n            </cell>\r\n        </row>\r\n    {% endfor %}\r\n    <row>\r\n        <cell>Summary</cell>\r\n        <cell>=SUM({start}:{end})</cell>\r\n    </row>\r\n    ...\r\n\r\nList of cells\r\n~~~~~~~~~~~~~\r\nReferencing a single cell can be harsh when dealing with complex reports.\r\nEspecially when creating summaries of irregularly sheet-distributed data.\r\n``xml2xlsx`` can append a cell to a variable-like list, as in ``ref-id``\r\nattribute, to reuse it as a comma concatenated value. Instead of ``ref-id``, one\r\nhas to use ``ref-append`` attribute.\r\n\r\nThis is a simple example to demonstrate the feature:\r\n\r\n.. code-block::\r\n\r\n    ...\r\n    <sheet>\r\n        <row>\r\n            <cell ref-append=\"mylist\">1</cell>\r\n            <cell ref-append=\"mylist\">2</cell>\r\n        </row>\r\n        <row><cell ref-append=\"mylist\">3</cell></row>\r\n        <row><cell>=SUM({mylist})</cell></row>\r\n    </sheet>\r\n\r\nThis will generate an Excel sheet with ``A3`` cell containing formula to sum\r\n``A1``, ``B1`` and ``A2`` cells (``=SUM(A1, B1, A2)``).\r\n\r\nReferencing limitations\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\nIt is perfectly possible to reference a cell in another sheet with both\r\n``ref-id`` and ``ref-append``. However, there is a limitation to that. Since\r\n``xml2xslx`` is a linear parser, you are only allowed to reference already\r\nparsed elements. This means, you have to create sheets in a proper order (sheets\r\nreferencing other sheets must be created **after** referenced cells are parsed).\r\n\r\nThe following example **will not work**:\r\n\r\n.. code-block:: xml\r\n\r\n    ...\r\n    <sheet title=\"one\">\r\n        <row><cell>{mycell}</cell></row>\r\n    </sheet>\r\n    <sheet title=\"two\">\r\n        <row><cell ref-id=\"mycell\">XYZ</cell></row>\r\n    </sheet>\r\n    ...\r\n\r\nHowever, it is possible to make this exmaple work **and** retain the same\r\nworksheet ordering using ``index`` attribute:\r\n\r\n.. code-block:: xml\r\n\r\n    ...\r\n    <sheet title=\"two\">\r\n        <row><cell ref-id=\"mycell\">XYZ</cell></row>\r\n    </sheet>\r\n    <sheet title=\"one\" index=\"0\">\r\n        <row><cell>{mycell}</cell></row>\r\n    </sheet>\r\n    ...\r\n\r\n\r\nCell formatting\r\n---------------\r\nThe cell format can be specified using various attributes of the cell tag. Only\r\nfont formatting can be specifed for now.\r\n\r\nFont format\r\n~~~~~~~~~~~\r\nA font format is specified in in ``font`` attribute. It is a semicolon separated\r\ndict like list of font formats as specified in\r\n`font <http://openpyxl.readthedocs.io/en/default/api/openpyxl.styles.fonts.html#openpyxl.styles.fonts.Font>`_ class of\r\nopenpyxl_ library.\r\n\r\nAn example to create a cell with bold 10px font:\r\n\r\n.. code-block::\r\n\r\n    ...\r\n    <cell font=\"bold: True; size: 10px;\">Cell formatted</cell>\r\n    ...\r\n\r\n\r\nPlanned features\r\n----------------\r\nHere is the (probably incomplete) wishlist for the project\r\n\r\n* Global font and cell styles\r\n* Row widths and column heights\r\n* Horizontal and vertical cell merging\r\n* XML validation with XSD to quickly raise an error if parsing wrong xml\r\n\r\nXML Schema Reference\r\n====================\r\nParsed xml should be enclosed in a ``workbook`` tag. Each ``workbook`` tag can\r\nhave multiple ``sheet``. The hierarchy continues to ``row`` and ``cell`` tags.\r\n\r\nHere is a complete list of available attributes of these tags.\r\n\r\n``workbook``\r\n------------\r\nNo attributes for now.\r\n\r\n``sheet``\r\n---------\r\n\r\n:Attribute:\r\n    ``title``\r\n:Usage:\r\n    Specifies the worksheet title\r\n\r\n\r\n:Attribute:\r\n    ``index``\r\n:Usage:\r\n    Specifies the worksheet index. This is relative to already created indexes.\r\n    An index of 0 creates sheet at the beginning of the sheets collection.\r\n\r\n``row``\r\n-------\r\nNo attributes for now\r\n\r\n\r\n``columns``\r\n-----------\r\n\r\n:Attribute:\r\n    ``start``\r\n:Usage:\r\n    Specifies the starting column for the column range (in a letter format).\r\n\r\n:Attribute:\r\n    ``end``\r\n:Usage:\r\n    Specifies the ending column for the column range (in a letter format).\r\n:Default:\r\n    Same as ``start`` attribute\r\n\r\n:Attribute:\r\n    ``width``\r\n:Usage:\r\n    Specifies the width for all columns in the range. It is in px format.\r\n\r\n\r\n.. _cell:\r\n\r\n``cell``\r\n--------\r\n\r\n:Attribute:\r\n    ``type``\r\n:Usage:\r\n    Specifies the resulting type of the excel cell.\r\n:Type:\r\n    One of ``unicode``, ``date``, ``number``\r\n:Default:\r\n    ``unicode``\r\n\r\n\r\n:Attribute:\r\n    ``date-fmt``\r\n:Usage:\r\n    Specifies the format of the date parsed as in `strftime and strptime <https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior>`_\r\n    functions of ``datetime`` standard python library.\r\n:Remarks:\r\n    Parsed only if ``type=\"date\"``.\r\n\r\n\r\n:Attribute:\r\n    ``font``\r\n:Usage:\r\n    Sepcifies font formatting for a single cell.\r\n:Type:\r\n    List of semicolon separated dict-like values in form of\r\n    ``key: value; key: value;``\r\n:Remarks:\r\n    Key and values are arguments of ``Font`` clas in ``openpyxl``.\r\n\r\nRelease History\r\n---------------\r\n\r\n0.2\r\n~~~\r\n\r\n* Added documentation\r\n* Added cell referencing with inter-sheet possibility\r\n* Changed ``sheet`` title attribute from ``name`` to ``title``\r\n* Added possibility to set index for a sheet\r\n\r\n\r\n.. _openpyxl: https://bitbucket.org/openpyxl/openpyxl", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marrog/xml2xlsx", "keywords": "xml lxml xlsx development", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xml2xlsx", "package_url": "https://pypi.org/project/xml2xlsx/", "platform": "", "project_url": "https://pypi.org/project/xml2xlsx/", "project_urls": {"Homepage": "https://github.com/marrog/xml2xlsx"}, "release_url": "https://pypi.org/project/xml2xlsx/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "XML to XLSX converter", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/pkaczynski/xml2xlsx\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/pkaczynski/xml2xlsx.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a58983cd5f0eb025ceeae5bbf860d09ec19f6fc6/68747470733a2f2f7472617669732d63692e6f72672f706b61637a796e736b692f786d6c32786c73782e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/pkaczynski/xml2xlsx?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/pkaczynski/xml2xlsx/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98c37430fbe3747a0a9037c3574e285fcbaefdae/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f706b61637a796e736b692f786d6c32786c73782f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/xml2xlsx\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/xml2xlsx.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35be209dab127db92019eaaf379901b1a151ece8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f786d6c32786c73782e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/xml2xlsx/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/xml2xlsx.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a91eab8b02d8051786b868308f4a2d53fc6077a9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f786d6c32786c73782e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/xml2xlsx/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dd/xml2xlsx.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2195c118d644019fbb8b6bd434b7a1fa52f6fe7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f786d6c32786c73782e737667\"></a>\n<p>Creating <tt>xlsx</tt> files from <tt>xml</tt> template using <a href=\"https://bitbucket.org/openpyxl/openpyxl\" rel=\"nofollow\">openpyxl</a>.</p>\n<div id=\"target\">\n<h2>Target</h2>\n<p>This project is intended to create <tt>xlsx</tt> files from <tt>xml</tt> api to\n<tt>openpyxl</tt>, supposedly generated by other tamplate engines (i.e. django,\njinja).</p>\n<p>This is a merely an xml parser translating mostly linearly to worksheet, rows\nand finally cells of the Excel workbook.</p>\n<div id=\"example\">\n<h3>Example</h3>\n<p>An xml file like this one</p>\n<pre><span class=\"nt\">&lt;workbook&gt;</span>\n    <span class=\"nt\">&lt;worksheet</span> <span class=\"na\">title=</span><span class=\"s\">\"test\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>This<span class=\"nt\">&lt;/cell&gt;&lt;cell&gt;</span>is<span class=\"nt\">&lt;/cell&gt;&lt;cell&gt;</span>a TEST<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n        <span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>Nice, isn't it?<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n    <span class=\"nt\">&lt;/worksheet&gt;</span>\n<span class=\"nt\">&lt;/workbook&gt;</span>\n</pre>\n<p>can be parsed to create a neat Excel workbook with two rows of data in one\nworksheet. Parsing can be done using command line (provided that you have your\nsystem paths set correctly:</p>\n<pre>xml2xlsx &lt; input.xml &gt; output.xml\n</pre>\n<p>or as a library call</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xml2xlsx</span> <span class=\"kn\">import</span> <span class=\"n\">xml2xlsx</span>\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;sheet title=\"test\"&gt;&lt;/sheet&gt;'</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'test.xlsx'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">xml2xlsx</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">))</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>This is mainly intended (and was developed for this purpose) to parse files\ngenerated by other templating engines, like django template system. One can\ngenerate an excel workbook from template like this:</p>\n<pre>{% for e in list %}\n    <span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>{{ e.name }}<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n{% endfor %}\n</pre>\n</div>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>Basic features of the library include creating multiple, named sheets within one\nworkbook and creating rows of cells in these sheets. However, there are more\npossibiliteis to create complex excel based reports.</p>\n<div id=\"cell-type\">\n<h3>Cell type</h3>\n<p>Each cell can be specified to use one of the types:</p>\n<ul>\n<li>string (default)</li>\n<li>number</li>\n<li>date</li>\n</ul>\n<p>Type is defined in <tt>type</tt> cell attribute. The cell value is converted\nappropriately to the type specified. If you insert a number in the cell value\nand do not specify <tt><span class=\"pre\">type=\"number\"</span></tt> attribute, you will find Excel complaining\nabout storing nubers as text.</p>\n<p>Since there are more date formats than countries, you have to be aware of\ncurrent locale. The simplest way to be i18n compatible is to specify date format\nin <tt><span class=\"pre\">date-fmt</span></tt> attribute and pass compatible (possibily non localized) date\nin the cell value, as in the following example</p>\n<pre>...\n<span class=\"nt\">&lt;row&gt;&lt;cell</span> <span class=\"na\">type=</span><span class=\"s\">\"date\"</span> <span class=\"na\">date-fmt=</span><span class=\"s\">\"%Y-%m-%d\"</span><span class=\"nt\">&gt;</span>2016-10-01<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n<span class=\"nt\">&lt;row&gt;&lt;cell</span> <span class=\"na\">type=</span><span class=\"s\">\"date\"</span> <span class=\"na\">date-fmt=</span><span class=\"s\">\"%d.%m.%Y\"</span><span class=\"nt\">&gt;</span>01.10.2016<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n...\n</pre>\n<p>Generated excel file will have two rows with the same date (1st of October 2016)\nwith date formatted according to Excel defaults (and current locale).</p>\n<div>\n<p>Warning</p>\n<p>Excel tries to be very smart and converts date-like text to date format.\nPlease use <tt><span class=\"pre\">type=\"date\"</span></tt> and <tt><span class=\"pre\">date-fmt</span></tt> attribute always if you pass\ndates to cells.</p>\n</div>\n</div>\n<div id=\"columns\">\n<h3>Columns</h3>\n<p>Columns can be tackled only in a limited way, i.e. only column widths can be\nchanged. Column properties are defined in <tt>columns</tt> tag as one or more child\nof the <tt>sheet</tt> tag. It is possible to specify a range of columns using\n<tt>start</tt> and <tt>end</tt> atrributes. For example:</p>\n<pre>...\n<span class=\"nt\">&lt;sheet</span> <span class=\"na\">title=</span><span class=\"s\">\"test\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;columns</span> <span class=\"na\">start=</span><span class=\"s\">\"A\"</span> <span class=\"na\">end=</span><span class=\"s\">\"D\"</span> <span class=\"na\">width=</span><span class=\"s\">\"123\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>Test<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n<span class=\"nt\">&lt;/sheet&gt;</span>\n...\n</pre>\n</div>\n<div id=\"formulas\">\n<h3>Formulas</h3>\n<p><tt>xml2xls</tt> can effectively create cells with formulas in them. The only\nlimitation (as with <tt>openpyxl</tt>) is using English names of the functions.</p>\n<p>For example:</p>\n<pre>...\n<span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>=SUM(A1:A5)<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n...\n</pre>\n</div>\n<div id=\"cell-referencing\">\n<h3>Cell referencing</h3>\n<p>The parser can store positions of the cell in a dictionary-like structure. It\nthen can be referenced to create complex formulas. Each value of the cell is\npreprocessed using string format with stored values. This means that these\nvalues can be referenced using <tt>{</tt> and <tt>}</tt> brackets.</p>\n<div id=\"current-row-and-column\">\n<h4>Current row and column</h4>\n<p>There are two basic values that can always be used, i.e. <tt>row</tt> and <tt>col</tt>\nwhich return current row number and column name.</p>\n<pre><span class=\"nt\">&lt;workbook&gt;</span>\n    <span class=\"nt\">&lt;sheet&gt;</span>\n        <span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>{col}{row}<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n    <span class=\"nt\">&lt;/sheet&gt;</span>\n<span class=\"nt\">&lt;/workbook&gt;</span>\n...\n</pre>\n<p>would create a workbook with a text \u201cA1\u201d included in the <tt>A1</tt> cell of the\nworksheet. Using template languages, you can create more complicated\nconstructs, like (using django template system):</p>\n<pre>...\n{% for e in list %}\n<span class=\"nt\">&lt;row&gt;</span>\n    <span class=\"nt\">&lt;cell</span> <span class=\"na\">type=</span><span class=\"s\">\"date\"</span> <span class=\"na\">date-fmt=</span><span class=\"s\">\"%Y-%m-%d\"</span><span class=\"nt\">&gt;</span>{{ e|date:\"Y-m-d\" }}<span class=\"nt\">&lt;/cell&gt;</span>\n    <span class=\"nt\">&lt;cell&gt;</span>=TEXT(A{row}, \"ddd\")<span class=\"nt\">&lt;/cell&gt;</span>\n<span class=\"nt\">&lt;/row&gt;</span>\n{% endfor %}\n...\n</pre>\n<p>would create a list of rows with a date in the first column and weekday names\nfor these dates in the second column (provided <tt>list</tt> context variable\ncontains a list of dates).</p>\n</div>\n<div id=\"specified-cell\">\n<h4>Specified cell</h4>\n<p>It is also possible to store cell possible to store names of specified cells in\na pseudo-variable (as in a dictionary). One has to use <tt><span class=\"pre\">ref-id</span></tt> attribute of\nthe <tt>cell</tt> tag and then reuse the value of this attribute in the remainder of\nthe xml input. This is very useful in formulas. A simple example would be\nreferencing another cell in a formula like this:</p>\n<pre>...\n<span class=\"nt\">&lt;row&gt;&lt;cell</span> <span class=\"na\">ref-id=</span><span class=\"s\">\"mycell\"</span><span class=\"nt\">&gt;</span>This is just a test<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n...\n<span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>={mycell}<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n...\n</pre>\n<p>which would create an excel formula referencing a cell with \u201cthis is just a\ntest\u201d text, whatever this cell address was.</p>\n<div>\n<p>Warning</p>\n<p>Using the same identifier in <tt><span class=\"pre\">ref-id</span></tt> attribute for two different cells\n<strong>overwrites</strong> the cell reference, i.e. the last cell in the xml template\nwould be referenced.</p>\n</div>\n<p>A more complex example using django template engine to create summaries can\nlook like this:</p>\n<pre>...\n{% for e in list %}\n    <span class=\"nt\">&lt;row&gt;</span>\n        <span class=\"nt\">&lt;cell</span> <span class=\"na\">ref-id=</span><span class=\"s\">\"{% if forloop.first %}start{% elsif forloop.last %}end{% endif %}\"</span><span class=\"nt\">&gt;</span>\n            {{ e }}\n        <span class=\"nt\">&lt;/cell&gt;</span>\n    <span class=\"nt\">&lt;/row&gt;</span>\n{% endfor %}\n<span class=\"nt\">&lt;row&gt;</span>\n    <span class=\"nt\">&lt;cell&gt;</span>Summary<span class=\"nt\">&lt;/cell&gt;</span>\n    <span class=\"nt\">&lt;cell&gt;</span>=SUM({start}:{end})<span class=\"nt\">&lt;/cell&gt;</span>\n<span class=\"nt\">&lt;/row&gt;</span>\n...\n</pre>\n</div>\n<div id=\"list-of-cells\">\n<h4>List of cells</h4>\n<p>Referencing a single cell can be harsh when dealing with complex reports.\nEspecially when creating summaries of irregularly sheet-distributed data.\n<tt>xml2xlsx</tt> can append a cell to a variable-like list, as in <tt><span class=\"pre\">ref-id</span></tt>\nattribute, to reuse it as a comma concatenated value. Instead of <tt><span class=\"pre\">ref-id</span></tt>, one\nhas to use <tt><span class=\"pre\">ref-append</span></tt> attribute.</p>\n<p>This is a simple example to demonstrate the feature:</p>\n<pre>...\n&lt;sheet&gt;\n    &lt;row&gt;\n        &lt;cell ref-append=\"mylist\"&gt;1&lt;/cell&gt;\n        &lt;cell ref-append=\"mylist\"&gt;2&lt;/cell&gt;\n    &lt;/row&gt;\n    &lt;row&gt;&lt;cell ref-append=\"mylist\"&gt;3&lt;/cell&gt;&lt;/row&gt;\n    &lt;row&gt;&lt;cell&gt;=SUM({mylist})&lt;/cell&gt;&lt;/row&gt;\n&lt;/sheet&gt;\n</pre>\n<p>This will generate an Excel sheet with <tt>A3</tt> cell containing formula to sum\n<tt>A1</tt>, <tt>B1</tt> and <tt>A2</tt> cells (<tt>=SUM(A1, B1, A2)</tt>).</p>\n</div>\n<div id=\"referencing-limitations\">\n<h4>Referencing limitations</h4>\n<p>It is perfectly possible to reference a cell in another sheet with both\n<tt><span class=\"pre\">ref-id</span></tt> and <tt><span class=\"pre\">ref-append</span></tt>. However, there is a limitation to that. Since\n<tt>xml2xslx</tt> is a linear parser, you are only allowed to reference already\nparsed elements. This means, you have to create sheets in a proper order (sheets\nreferencing other sheets must be created <strong>after</strong> referenced cells are parsed).</p>\n<p>The following example <strong>will not work</strong>:</p>\n<pre>...\n<span class=\"nt\">&lt;sheet</span> <span class=\"na\">title=</span><span class=\"s\">\"one\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>{mycell}<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n<span class=\"nt\">&lt;/sheet&gt;</span>\n<span class=\"nt\">&lt;sheet</span> <span class=\"na\">title=</span><span class=\"s\">\"two\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;row&gt;&lt;cell</span> <span class=\"na\">ref-id=</span><span class=\"s\">\"mycell\"</span><span class=\"nt\">&gt;</span>XYZ<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n<span class=\"nt\">&lt;/sheet&gt;</span>\n...\n</pre>\n<p>However, it is possible to make this exmaple work <strong>and</strong> retain the same\nworksheet ordering using <tt>index</tt> attribute:</p>\n<pre>...\n<span class=\"nt\">&lt;sheet</span> <span class=\"na\">title=</span><span class=\"s\">\"two\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;row&gt;&lt;cell</span> <span class=\"na\">ref-id=</span><span class=\"s\">\"mycell\"</span><span class=\"nt\">&gt;</span>XYZ<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n<span class=\"nt\">&lt;/sheet&gt;</span>\n<span class=\"nt\">&lt;sheet</span> <span class=\"na\">title=</span><span class=\"s\">\"one\"</span> <span class=\"na\">index=</span><span class=\"s\">\"0\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;row&gt;&lt;cell&gt;</span>{mycell}<span class=\"nt\">&lt;/cell&gt;&lt;/row&gt;</span>\n<span class=\"nt\">&lt;/sheet&gt;</span>\n...\n</pre>\n</div>\n</div>\n<div id=\"cell-formatting\">\n<h3>Cell formatting</h3>\n<p>The cell format can be specified using various attributes of the cell tag. Only\nfont formatting can be specifed for now.</p>\n<div id=\"font-format\">\n<h4>Font format</h4>\n<p>A font format is specified in in <tt>font</tt> attribute. It is a semicolon separated\ndict like list of font formats as specified in\n<a href=\"http://openpyxl.readthedocs.io/en/default/api/openpyxl.styles.fonts.html#openpyxl.styles.fonts.Font\" rel=\"nofollow\">font</a> class of\n<a href=\"https://bitbucket.org/openpyxl/openpyxl\" rel=\"nofollow\">openpyxl</a> library.</p>\n<p>An example to create a cell with bold 10px font:</p>\n<pre>...\n&lt;cell font=\"bold: True; size: 10px;\"&gt;Cell formatted&lt;/cell&gt;\n...\n</pre>\n</div>\n</div>\n<div id=\"planned-features\">\n<h3>Planned features</h3>\n<p>Here is the (probably incomplete) wishlist for the project</p>\n<ul>\n<li>Global font and cell styles</li>\n<li>Row widths and column heights</li>\n<li>Horizontal and vertical cell merging</li>\n<li>XML validation with XSD to quickly raise an error if parsing wrong xml</li>\n</ul>\n</div>\n</div>\n<div id=\"xml-schema-reference\">\n<h2>XML Schema Reference</h2>\n<p>Parsed xml should be enclosed in a <tt>workbook</tt> tag. Each <tt>workbook</tt> tag can\nhave multiple <tt>sheet</tt>. The hierarchy continues to <tt>row</tt> and <tt>cell</tt> tags.</p>\n<p>Here is a complete list of available attributes of these tags.</p>\n<div id=\"workbook\">\n<h3><tt>workbook</tt></h3>\n<p>No attributes for now.</p>\n</div>\n<div id=\"sheet\">\n<h3><tt>sheet</tt></h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Attribute:</th><td><tt>title</tt></td>\n</tr>\n<tr><th>Usage:</th><td>Specifies the worksheet title</td>\n</tr>\n<tr><th>Attribute:</th><td><tt>index</tt></td>\n</tr>\n<tr><th>Usage:</th><td>Specifies the worksheet index. This is relative to already created indexes.\nAn index of 0 creates sheet at the beginning of the sheets collection.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"row\">\n<h3><tt>row</tt></h3>\n<p>No attributes for now</p>\n</div>\n<div id=\"id1\">\n<h3><tt>columns</tt></h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Attribute:</th><td><tt>start</tt></td>\n</tr>\n<tr><th>Usage:</th><td>Specifies the starting column for the column range (in a letter format).</td>\n</tr>\n<tr><th>Attribute:</th><td><tt>end</tt></td>\n</tr>\n<tr><th>Usage:</th><td>Specifies the ending column for the column range (in a letter format).</td>\n</tr>\n<tr><th>Default:</th><td>Same as <tt>start</tt> attribute</td>\n</tr>\n<tr><th>Attribute:</th><td><tt>width</tt></td>\n</tr>\n<tr><th>Usage:</th><td>Specifies the width for all columns in the range. It is in px format.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"id2\">\n<span id=\"cell\"></span><h3><tt>cell</tt></h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Attribute:</th><td><tt>type</tt></td>\n</tr>\n<tr><th>Usage:</th><td>Specifies the resulting type of the excel cell.</td>\n</tr>\n<tr><th>Type:</th><td>One of <tt>unicode</tt>, <tt>date</tt>, <tt>number</tt></td>\n</tr>\n<tr><th>Default:</th><td><tt>unicode</tt></td>\n</tr>\n<tr><th>Attribute:</th><td><tt><span class=\"pre\">date-fmt</span></tt></td>\n</tr>\n<tr><th>Usage:</th><td>Specifies the format of the date parsed as in <a href=\"https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior\" rel=\"nofollow\">strftime and strptime</a>\nfunctions of <tt>datetime</tt> standard python library.</td>\n</tr>\n<tr><th>Remarks:</th><td>Parsed only if <tt><span class=\"pre\">type=\"date\"</span></tt>.</td>\n</tr>\n<tr><th>Attribute:</th><td><tt>font</tt></td>\n</tr>\n<tr><th>Usage:</th><td>Sepcifies font formatting for a single cell.</td>\n</tr>\n<tr><th>Type:</th><td>List of semicolon separated dict-like values in form of\n<tt>key: value; key: value;</tt></td>\n</tr>\n<tr><th>Remarks:</th><td>Key and values are arguments of <tt>Font</tt> clas in <tt>openpyxl</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"release-history\">\n<h3>Release History</h3>\n<h3 id=\"id3\"><span class=\"section-subtitle\">0.2</span></h3>\n<ul>\n<li>Added documentation</li>\n<li>Added cell referencing with inter-sheet possibility</li>\n<li>Changed <tt>sheet</tt> title attribute from <tt>name</tt> to <tt>title</tt></li>\n<li>Added possibility to set index for a sheet</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3757007, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9c305428528addbd942d567a41f885f3", "sha256": "57b3a3e705cf2e3f1dca51251bc1b190be3f1f4e3d16b8ff1f0621f89d0db4b7"}, "downloads": -1, "filename": "xml2xlsx-0.1.tar.gz", "has_sig": false, "md5_digest": "9c305428528addbd942d567a41f885f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3320, "upload_time": "2016-02-01T12:03:20", "upload_time_iso_8601": "2016-02-01T12:03:20.697826Z", "url": "https://files.pythonhosted.org/packages/c5/12/2a411476c06c1aeb862104c5780f29f442c9037610d8546a2895b058c51a/xml2xlsx-0.1.tar.gz", "yanked": false}], "0.2a0": [{"comment_text": "", "digests": {"md5": "ccb2388419605bab5115a147d0990fbb", "sha256": "b7b9939087628f515a6589e9ce20ca108da8a5d77033903c14a040d5a1de3b29"}, "downloads": -1, "filename": "xml2xlsx-0.2a0.zip", "has_sig": false, "md5_digest": "ccb2388419605bab5115a147d0990fbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15571, "upload_time": "2016-11-18T12:10:45", "upload_time_iso_8601": "2016-11-18T12:10:45.913939Z", "url": "https://files.pythonhosted.org/packages/c0/24/4e7d1f34a56aae302b42d6d46e0d4d826f82ccdea5a479507df22e9868ae/xml2xlsx-0.2a0.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "703f3caf6630cbc0163dd17881ecbbf0", "sha256": "d10f546bca7e9432656354a5410b659fac6aa315248094e3833a43658970481a"}, "downloads": -1, "filename": "xml2xlsx-1.0.0.tar.gz", "has_sig": false, "md5_digest": "703f3caf6630cbc0163dd17881ecbbf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10337, "upload_time": "2017-08-17T12:14:59", "upload_time_iso_8601": "2017-08-17T12:14:59.084199Z", "url": "https://files.pythonhosted.org/packages/c7/57/b0fea14d83b5cffaa3d842f921bb04ee084fa83d607ef948324ddd1c6d1f/xml2xlsx-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a11bed867d67e0356958e38b8bb3f78d", "sha256": "4da9b7ac8e274ae9b2bb4ed57482e94941b6cf01d6022a19d69f2ad007e5ea41"}, "downloads": -1, "filename": "xml2xlsx-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a11bed867d67e0356958e38b8bb3f78d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11958, "upload_time": "2018-04-11T23:41:55", "upload_time_iso_8601": "2018-04-11T23:41:55.254233Z", "url": "https://files.pythonhosted.org/packages/84/bb/3745bcbb87c859bab5f4124cd4b71ec1a1e8e6ebdcbf81a838c22e021a35/xml2xlsx-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a11bed867d67e0356958e38b8bb3f78d", "sha256": "4da9b7ac8e274ae9b2bb4ed57482e94941b6cf01d6022a19d69f2ad007e5ea41"}, "downloads": -1, "filename": "xml2xlsx-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a11bed867d67e0356958e38b8bb3f78d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11958, "upload_time": "2018-04-11T23:41:55", "upload_time_iso_8601": "2018-04-11T23:41:55.254233Z", "url": "https://files.pythonhosted.org/packages/84/bb/3745bcbb87c859bab5f4124cd4b71ec1a1e8e6ebdcbf81a838c22e021a35/xml2xlsx-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:06 2020"}