{"info": {"author": "Fabrice Salvaire", "author_email": "fabrice.salvaire@orange.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Topic :: System :: Distributed Computing", "Topic :: System :: Hardware :: Symmetric Multi-processing"], "description": ".. -*- Mode: rst -*-\n\n.. -*- Mode: rst -*-\n\n..\n   |siditaUrl|\n   |siditaHomePage|_\n   |siditaDoc|_\n   |sidita@github|_\n   |sidita@readthedocs|_\n   |sidita@readthedocs-badge|\n   |sidita@pypi|_\n\n.. |ohloh| image:: https://www.openhub.net/accounts/230426/widgets/account_tiny.gif\n   :target: https://www.openhub.net/accounts/fabricesalvaire\n   :alt: Fabrice Salvaire's Ohloh profile\n   :height: 15px\n   :width:  80px\n\n.. |siditaUrl| replace:: https://fabricesalvaire.github.io/sidita\n\n.. |siditaHomePage| replace:: sidita Home Page\n.. _siditaHomePage: https://fabricesalvaire.github.io/sidita\n\n.. |sidita@readthedocs-badge| image:: https://readthedocs.org/projects/sidita/badge/?version=latest\n   :target: http://sidita.readthedocs.org/en/latest\n\n.. |sidita@github| replace:: https://github.com/FabriceSalvaire/sidita\n.. .. _sidita@github: https://github.com/FabriceSalvaire/sidita\n\n.. |sidita@pypi| replace:: https://pypi.python.org/pypi/sidita\n.. .. _sidita@pypi: https://pypi.python.org/pypi/sidita\n\n.. |Build Status| image:: https://travis-ci.org/FabriceSalvaire/sidita.svg?branch=master\n   :target: https://travis-ci.org/FabriceSalvaire/sidita\n   :alt: sidita build status @travis-ci.org\n\n.. |Pypi Version| image:: https://img.shields.io/pypi/v/sidita.svg\n   :target: https://pypi.python.org/pypi/sidita\n   :alt: sidita last version\n\n.. |Pypi License| image:: https://img.shields.io/pypi/l/sidita.svg\n   :target: https://pypi.python.org/pypi/sidita\n   :alt: sidita license\n\n.. |Pypi Python Version| image:: https://img.shields.io/pypi/pyversions/sidita.svg\n   :target: https://pypi.python.org/pypi/sidita\n   :alt: sidita python version\n\n..  coverage test\n..  https://img.shields.io/pypi/status/Django.svg\n..  https://img.shields.io/github/stars/badges/shields.svg?style=social&label=Star\n.. -*- Mode: rst -*-\n\n.. |Python| replace:: Python\n.. _Python: http://python.org\n\n.. |PyPI| replace:: PyPI\n.. _PyPI: https://pypi.python.org/pypi\n\n.. |Sphinx| replace:: Sphinx\n.. _Sphinx: http://sphinx-doc.org\n\n.. |asyncio| replace:: asyncio\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n\n.. |asyncio event loop| replace:: asyncio event loop\n.. _asyncio event loop: https://docs.python.org/3/library/asyncio-eventloops.html\n\n.. |asyncio queue| replace:: asyncio queue\n.. _asyncio queue: https://docs.python.org/3/library/asyncio-queue.html\n\n.. |asyncio subprocess| replace:: asyncio subprocess\n.. _asyncio subprocess: https://docs.python.org/3/library/asyncio-subprocess.html\n\n.. |multiprocessing module| replace:: multiprocessing module\n.. _multiprocessing module: https://docs.python.org/3.6/library/multiprocessing.html\n\n.. |Celery| replace:: Celery\n.. _Celery: http://www.celeryproject.org\n\n============\n sidita\n============\n\n|Pypi License|\n|Pypi Python Version|\n\n|Pypi Version|\n\n* Quick Link to `Production Branch <https://github.com/FabriceSalvaire/sidita/tree/master>`_\n* Quick Link to `Devel Branch <https://github.com/FabriceSalvaire/sidita/tree/devel>`_\n\nOverview\n========\n\nWhat is sidita ?\n---------------------\n\nSidita is a Python module which implements a distributed task queue featuring an intermediate\nsolution between the |multiprocessing module|_ and a task scheduler like |Celery|_.\n\nThe Sidita use case corresponds to the case where you need to run CPU bound tasks in parallel and\nyou require an immunity to crashes, memory leaks and overruns.  Theses requirements are met by a\nmonitored subprocess implementation.\n\nWhere is the Documentation ?\n----------------------------\n\nThe documentation is available on the |siditaHomePage|_.\n\nWhat are the main features ?\n----------------------------\n\n.. -*- Mode: rst -*-\n\n\n.. no title here\n\n* Must be a simple solution to circumvent to the GIL limitation : i.e. distribute and run tasks in parallel on local CPU cores\n* Must be a lightweight solution to Celery : no broker\n* Should be portable on main OS like Unix and Windows\n* Scheduler is implemented using an |asyncio event loop|_ and |asyncio queue|_\n* Scheduler queue can be limited on size so as to prevent a memory overshoot at startup\n* Workers are spawned using |asyncio subprocess|_ and communicate through a pipe (stdin, stdout)\n* Pass any pickable object as request and response\n* Scheduler monitors workers and restart them when they was killed or they exceeded a memory or timeout threshold\n* Provide basic metrics on workers\n\nTechnical details in brief:\n\n* scheduler run a producer and N consumers coroutines in an |asyncio|_ event loop\n* the producer coroutine awaits on :code:`queue.put(task)` ( if a size limit is set )\n* each consumer coroutine wraps a worker subprocess and await data on the stdout pipe\n\n.. -*- Mode: rst -*-\n\n\n.. no title here\n\nTechnical details in brief:\n\n* scheduler run a producer and N consumers coroutines in an |asyncio|_ event loop\n* the producer coroutine awaits on :code:`queue.put(task)` ( if a size limit is set )\n* each consumer coroutine wraps a worker subprocess and await data on the stdout pipe\n\nHow to install it ?\n-------------------\n\nLook at the `installation <https://fabricesalvaire.github.io/sidita/installation.html>`_ section in the documentation.\n\nCredits\n=======\n\nAuthors: `Fabrice Salvaire <http://fabrice-salvaire.fr>`_\n\nNews\n====\n\n.. -*- Mode: rst -*-\n\n\n.. no title here\n\nV0 2018-05-01\n-------------\n\nStarted project\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FabriceSalvaire/sidita", "keywords": "distributed task queue asyncio multiprocessing", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "sidita", "package_url": "https://pypi.org/project/sidita/", "platform": "any", "project_url": "https://pypi.org/project/sidita/", "project_urls": {"Homepage": "https://github.com/FabriceSalvaire/sidita"}, "release_url": "https://pypi.org/project/sidita/1.0.1/", "requires_dist": ["PyYAML (>=3.10)", "psutil (>=5.4.3)"], "requires_python": "", "summary": "Simple Distributed Task Queue : multiprocessing < sidita < celery", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/sidita\" rel=\"nofollow\"><img alt=\"sidita license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a49ad60aea74ace3c3c5a45ee3355f57466f5008/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7369646974612e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/sidita\" rel=\"nofollow\"><img alt=\"sidita python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb1c4d9d9ba5d2a865eb876cde4fcc373bddddef/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7369646974612e737667\"></a></p>\n<p><a href=\"https://pypi.python.org/pypi/sidita\" rel=\"nofollow\"><img alt=\"sidita last version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c881685d09c3c8d89c43c44c207d0a90d325734/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7369646974612e737667\"></a></p>\n<ul>\n<li>Quick Link to <a href=\"https://github.com/FabriceSalvaire/sidita/tree/master\" rel=\"nofollow\">Production Branch</a></li>\n<li>Quick Link to <a href=\"https://github.com/FabriceSalvaire/sidita/tree/devel\" rel=\"nofollow\">Devel Branch</a></li>\n</ul>\n<div id=\"overview\">\n<h2>Overview</h2>\n<div id=\"what-is-sidita\">\n<h3>What is sidita ?</h3>\n<p>Sidita is a Python module which implements a distributed task queue featuring an intermediate\nsolution between the <a href=\"https://docs.python.org/3.6/library/multiprocessing.html\" rel=\"nofollow\">multiprocessing module</a> and a task scheduler like <a href=\"http://www.celeryproject.org\" rel=\"nofollow\">Celery</a>.</p>\n<p>The Sidita use case corresponds to the case where you need to run CPU bound tasks in parallel and\nyou require an immunity to crashes, memory leaks and overruns.  Theses requirements are met by a\nmonitored subprocess implementation.</p>\n</div>\n<div id=\"where-is-the-documentation\">\n<h3>Where is the Documentation ?</h3>\n<p>The documentation is available on the <a href=\"https://fabricesalvaire.github.io/sidita\" rel=\"nofollow\">sidita Home Page</a>.</p>\n</div>\n<div id=\"what-are-the-main-features\">\n<h3>What are the main features ?</h3>\n<ul>\n<li>Must be a simple solution to circumvent to the GIL limitation : i.e. distribute and run tasks in parallel on local CPU cores</li>\n<li>Must be a lightweight solution to Celery : no broker</li>\n<li>Should be portable on main OS like Unix and Windows</li>\n<li>Scheduler is implemented using an <a href=\"https://docs.python.org/3/library/asyncio-eventloops.html\" rel=\"nofollow\">asyncio event loop</a> and <a href=\"https://docs.python.org/3/library/asyncio-queue.html\" rel=\"nofollow\">asyncio queue</a></li>\n<li>Scheduler queue can be limited on size so as to prevent a memory overshoot at startup</li>\n<li>Workers are spawned using <a href=\"https://docs.python.org/3/library/asyncio-subprocess.html\" rel=\"nofollow\">asyncio subprocess</a> and communicate through a pipe (stdin, stdout)</li>\n<li>Pass any pickable object as request and response</li>\n<li>Scheduler monitors workers and restart them when they was killed or they exceeded a memory or timeout threshold</li>\n<li>Provide basic metrics on workers</li>\n</ul>\n<p>Technical details in brief:</p>\n<ul>\n<li>scheduler run a producer and N consumers coroutines in an <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a> event loop</li>\n<li>the producer coroutine awaits on <code>queue.put(task)</code> ( if a size limit is set )</li>\n<li>each consumer coroutine wraps a worker subprocess and await data on the stdout pipe</li>\n</ul>\n<p>Technical details in brief:</p>\n<ul>\n<li>scheduler run a producer and N consumers coroutines in an <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a> event loop</li>\n<li>the producer coroutine awaits on <code>queue.put(task)</code> ( if a size limit is set )</li>\n<li>each consumer coroutine wraps a worker subprocess and await data on the stdout pipe</li>\n</ul>\n</div>\n<div id=\"how-to-install-it\">\n<h3>How to install it ?</h3>\n<p>Look at the <a href=\"https://fabricesalvaire.github.io/sidita/installation.html\" rel=\"nofollow\">installation</a> section in the documentation.</p>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Authors: <a href=\"http://fabrice-salvaire.fr\" rel=\"nofollow\">Fabrice Salvaire</a></p>\n</div>\n<div id=\"news\">\n<h2>News</h2>\n<h2 id=\"v0-2018-05-01\"><span class=\"section-subtitle\">V0 2018-05-01</span></h2>\n<p>Started project</p>\n</div>\n\n          </div>"}, "last_serial": 3822397, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "60d305e11df29003845a062edcc13e6e", "sha256": "782d75b0dcd7fbd46d8825fff2bc78d85e08ccde6ed584a7aa0cef22a146777c"}, "downloads": -1, "filename": "sidita-1.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "60d305e11df29003845a062edcc13e6e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15868, "upload_time": "2018-04-30T22:35:01", "upload_time_iso_8601": "2018-04-30T22:35:01.891775Z", "url": "https://files.pythonhosted.org/packages/c4/8d/6fb7439547caa48b95abbbfd87fa7066d286b726189a662101a29bc0c7d3/sidita-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2ec04bad585051fba390db67ca1f848f", "sha256": "6b33b9279d285b219f5cfa66e17428a97669e3922b714228cacce36a3e02d73e"}, "downloads": -1, "filename": "sidita-1.0.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "2ec04bad585051fba390db67ca1f848f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15892, "upload_time": "2018-04-30T22:49:44", "upload_time_iso_8601": "2018-04-30T22:49:44.827358Z", "url": "https://files.pythonhosted.org/packages/80/b8/53000883cfe1921037eedd6451809a055a2e39afb93b2e9445ba2b8b6862/sidita-1.0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ec04bad585051fba390db67ca1f848f", "sha256": "6b33b9279d285b219f5cfa66e17428a97669e3922b714228cacce36a3e02d73e"}, "downloads": -1, "filename": "sidita-1.0.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "2ec04bad585051fba390db67ca1f848f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15892, "upload_time": "2018-04-30T22:49:44", "upload_time_iso_8601": "2018-04-30T22:49:44.827358Z", "url": "https://files.pythonhosted.org/packages/80/b8/53000883cfe1921037eedd6451809a055a2e39afb93b2e9445ba2b8b6862/sidita-1.0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:11:58 2020"}