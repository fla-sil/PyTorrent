{"info": {"author": "Rolando Espinoza", "author_email": "rolando at rmax.io", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "===============================\nYet Another Murmurhash3 Binding\n===============================\n\n.. image:: https://img.shields.io/pypi/v/yammh3.svg\n        :target: https://pypi.python.org/pypi/yammh3\n\n.. image:: https://img.shields.io/travis/rolando/yammh3.svg\n        :target: https://travis-ci.org/rolando/yammh3\n\n.. image:: https://readthedocs.org/projects/yammh3/badge/?version=latest\n        :target: https://readthedocs.org/projects/yammh3/?badge=latest\n        :alt: Documentation Status\n\n\nPython/Cython Murmurhash3 binding.\n\n* Free software: MIT license\n* Documentation: https://yammh3.readthedocs.org.\n\nFeatures\n--------\n\n* Provides a high-level Python API.\n* Provides a low-level Cython binding.\n* Python 2 and 3 support.\n\nExample\n-------\n\nHere is an example in Python:\n\n.. code:: python\n\n  from yammh3 import hash64\n\n  key = b\"yammh3!\"\n\n  # hash* functions return a signed integer by default.\n  print(\"signed 64 bits hash is %s\" % hash64(key))  # -> -1339990020854215562\n  print(\"unsigned 64 bits hash is %s\" % hash64(key, signed=False))  # -> 17106754052855336054L\n\n\nIn Cython, first we need to write a ``.pyx`` file with our code:\n\n.. code:: cython\n\n    # file: yammh3_example.pyx\n    # mhash* functions are only available via cimport.\n    from yammh3._yammh3 cimport mhash64, mhash64s\n    from yammh3._yammh3 cimport int64_t, uint64_t, uint32_t\n\n    def print_hashes(bytes key):\n        cdef uint64_t h1\n        cdef int64_t h2\n        cdef uint32_t n = len(key)\n        cdef char *c_key = <char *>key\n\n        with nogil:  # releasing the GIL!\n            h1 = mhash64(c_key, n)\n            h2 = mhash64s(c_key, n)\n\n        print(\"unsigned 64 bits hash is %d\" % h1)\n        print(\"signed 64 bits hash is %d\" % h2)\n\n\nWe need to compile it as a module, usually by using a setup script:\n\n.. code:: python\n\n    # file: setup.py\n    from setuptools import setup\n    from setuptools.extension import Extension\n    from Cython.Build import cythonize\n\n    import yammh3  # already installed\n\n    setup(\n        name='yammh3-example',\n        ext_modules=cythonize([\n            Extension('*', ['*.pyx'], include_dirs=[yammh3.get_include()]),\n        ])\n    )\n\n\nThen we build the modules in-place:\n\n.. code::\n\n    $ python setup.py build_ext --inplace\n    Running build_ext\n    building 'yammh3_example' extension\n    ... [snip] ...\n    copying build/lib.macosx-10.5-x86_64-2.7/yammh3_example.so ->\n\n\nNow we are ready to run our code:\n\n.. code::\n\n    $ python -c 'import yammh3_example; yammh3_example.print_hashes(b\"yammh3!\")'\n    unsigned 64 bits hash is 17106754052855336054\n    signed 64 bits hash is -1339990020854215562\n\n\nCredits\n---------\n\nMurmurhash3 was originally created by `Austin Appleby`_.\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _`Austin Appleby`: https://github.com/aappleby/smhasher\n\n\n=======\nHistory\n=======\n\n0.1.1 (2016-06-23)\n------------------\n\n* First **usable** release :)\n\n0.1.0 (2016-06-17)\n------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rolando/yammh3", "keywords": "yammh3", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "yammh3", "package_url": "https://pypi.org/project/yammh3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/yammh3/", "project_urls": {"Homepage": "https://github.com/rolando/yammh3"}, "release_url": "https://pypi.org/project/yammh3/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Python/Cython Murmurhash3 binding.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"yet-another-murmurhash3-binding\">\n<h2>Yet Another Murmurhash3 Binding</h2>\n<a href=\"https://pypi.python.org/pypi/yammh3\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/yammh3.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6795067fe43ac79e40c00cc8e35fff83f6f41ff0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f79616d6d68332e737667\"></a>\n<a href=\"https://travis-ci.org/rolando/yammh3\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/rolando/yammh3.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc1501a41b8af36bb082a35d9cadd2c5c00a433b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f726f6c616e646f2f79616d6d68332e737667\"></a>\n<a href=\"https://readthedocs.org/projects/yammh3/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6937eb8c7c4626286f6c3642ebc275a30f71cfe/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f79616d6d68332f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Python/Cython Murmurhash3 binding.</p>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://yammh3.readthedocs.org\" rel=\"nofollow\">https://yammh3.readthedocs.org</a>.</li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Provides a high-level Python API.</li>\n<li>Provides a low-level Cython binding.</li>\n<li>Python 2 and 3 support.</li>\n</ul>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Here is an example in Python:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yammh3</span> <span class=\"kn\">import</span> <span class=\"n\">hash64</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"yammh3!\"</span>\n\n<span class=\"c1\"># hash* functions return a signed integer by default.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"signed 64 bits hash is </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">hash64</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span>  <span class=\"c1\"># -&gt; -1339990020854215562</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"unsigned 64 bits hash is </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">hash64</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">signed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>  <span class=\"c1\"># -&gt; 17106754052855336054L</span>\n</pre>\n<p>In Cython, first we need to write a <tt>.pyx</tt> file with our code:</p>\n<pre><span class=\"c\"># file: yammh3_example.pyx</span>\n<span class=\"c\"># mhash* functions are only available via cimport.</span>\n<span class=\"k\">from</span> <span class=\"nn\">yammh3._yammh3</span> <span class=\"k\">cimport</span> <span class=\"n\">mhash64</span><span class=\"p\">,</span> <span class=\"n\">mhash64s</span>\n<span class=\"k\">from</span> <span class=\"nn\">yammh3._yammh3</span> <span class=\"k\">cimport</span> <span class=\"n\">int64_t</span><span class=\"p\">,</span> <span class=\"n\">uint64_t</span><span class=\"p\">,</span> <span class=\"n\">uint32_t</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_hashes</span><span class=\"p\">(</span><span class=\"nb\">bytes</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n    <span class=\"k\">cdef</span> <span class=\"kt\">uint64_t</span> <span class=\"nf\">h1</span>\n    <span class=\"k\">cdef</span> <span class=\"kt\">int64_t</span> <span class=\"nf\">h2</span>\n    <span class=\"k\">cdef</span> <span class=\"kt\">uint32_t</span> <span class=\"nf\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"k\">cdef</span> <span class=\"kt\">char</span> *<span class=\"nf\">c_key</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">char</span> <span class=\"o\">*&gt;</span><span class=\"n\">key</span>\n\n    <span class=\"k\">with</span> <span class=\"k\">nogil</span><span class=\"p\">:</span>  <span class=\"c\"># releasing the GIL!</span>\n        <span class=\"n\">h1</span> <span class=\"o\">=</span> <span class=\"n\">mhash64</span><span class=\"p\">(</span><span class=\"n\">c_key</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"n\">h2</span> <span class=\"o\">=</span> <span class=\"n\">mhash64s</span><span class=\"p\">(</span><span class=\"n\">c_key</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"unsigned 64 bits hash is </span><span class=\"si\">%d</span><span class=\"s\">\"</span> <span class=\"o\">%</span> <span class=\"n\">h1</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"signed 64 bits hash is </span><span class=\"si\">%d</span><span class=\"s\">\"</span> <span class=\"o\">%</span> <span class=\"n\">h2</span><span class=\"p\">)</span>\n</pre>\n<p>We need to compile it as a module, usually by using a setup script:</p>\n<pre><span class=\"c1\"># file: setup.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n<span class=\"kn\">from</span> <span class=\"nn\">setuptools.extension</span> <span class=\"kn\">import</span> <span class=\"n\">Extension</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Cython.Build</span> <span class=\"kn\">import</span> <span class=\"n\">cythonize</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">yammh3</span>  <span class=\"c1\"># already installed</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'yammh3-example'</span><span class=\"p\">,</span>\n    <span class=\"n\">ext_modules</span><span class=\"o\">=</span><span class=\"n\">cythonize</span><span class=\"p\">([</span>\n        <span class=\"n\">Extension</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'*.pyx'</span><span class=\"p\">],</span> <span class=\"n\">include_dirs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">yammh3</span><span class=\"o\">.</span><span class=\"n\">get_include</span><span class=\"p\">()]),</span>\n    <span class=\"p\">])</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Then we build the modules in-place:</p>\n<pre>$ python setup.py build_ext --inplace\nRunning build_ext\nbuilding 'yammh3_example' extension\n... [snip] ...\ncopying build/lib.macosx-10.5-x86_64-2.7/yammh3_example.so -&gt;\n</pre>\n<p>Now we are ready to run our code:</p>\n<pre>$ python -c 'import yammh3_example; yammh3_example.print_hashes(b\"yammh3!\")'\nunsigned 64 bits hash is 17106754052855336054\nsigned 64 bits hash is -1339990020854215562\n</pre>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>Murmurhash3 was originally created by <a href=\"https://github.com/aappleby/smhasher\" rel=\"nofollow\">Austin Appleby</a>.</p>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.1.1 (2016-06-23)</h3>\n<ul>\n<li>First <strong>usable</strong> release :)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.0 (2016-06-17)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2184552, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "f899ff3811169d96335c9afdd7d33a5a", "sha256": "45a1d208a1b413a50f948794e56c0bb30011df2d8ac777665ba984282da428a1"}, "downloads": -1, "filename": "yammh3-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f899ff3811169d96335c9afdd7d33a5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236522, "upload_time": "2016-06-23T10:56:43", "upload_time_iso_8601": "2016-06-23T10:56:43.905606Z", "url": "https://files.pythonhosted.org/packages/a7/ee/ed160cb363c988aa2c6671869bc4b3c0045106a8c1e8708fecde6724b3c0/yammh3-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6ed985c6fe6eb30e2a0af0e01e0d99c5", "sha256": "187ade7ee6fd0d9499bc71835e79b5e79cb4b8fce4d072ff071f67285187dd77"}, "downloads": -1, "filename": "yammh3-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6ed985c6fe6eb30e2a0af0e01e0d99c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 225358, "upload_time": "2016-06-24T03:17:06", "upload_time_iso_8601": "2016-06-24T03:17:06.972353Z", "url": "https://files.pythonhosted.org/packages/06/47/5aeeeb8739dad8ecc642c65c0b8db4f42f7ff5dd9ca50023719747c3a3e4/yammh3-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ed985c6fe6eb30e2a0af0e01e0d99c5", "sha256": "187ade7ee6fd0d9499bc71835e79b5e79cb4b8fce4d072ff071f67285187dd77"}, "downloads": -1, "filename": "yammh3-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6ed985c6fe6eb30e2a0af0e01e0d99c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 225358, "upload_time": "2016-06-24T03:17:06", "upload_time_iso_8601": "2016-06-24T03:17:06.972353Z", "url": "https://files.pythonhosted.org/packages/06/47/5aeeeb8739dad8ecc642c65c0b8db4f42f7ff5dd9ca50023719747c3a3e4/yammh3-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:14 2020"}