{"info": {"author": "Fahri Reza", "author_email": "dozymoe@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "PyBuildTool\n===========\n\n* License      : MIT\n* Project URL  : http://github.com/dozymoe/PyBuildTool\n\n\nSummary\n-------\n\nPyBuildTool helps transform resources and run automated tests as you code, I\nusually have it watched the project files while editing with vim.\n\nPyBuildTool is written in python as a higher level interface to `Waf\n<http://waf.io>`_, a meta build system.\n\nThe configuration file you'd interact with: ``build.yml``, is declarative,\nwritten in yaml. While the build tools which you could also write, were made to\nbe simple, following a pattern.\n\nThe configuration file does not need to be named \"build.yml\", just change\nthe file ``wscript`` (this is something that waf needs). You need to create\n``wscript`` file yourself, following the example here:\nhttp://raw.githubusercontent.com/dozymoe/PyBuildTool/master/pybuildtool/wscript.example\n\nThere are builtin tools, you can use them as examples to build your own build\ntools, see them here: http://github.com/dozymoe/PyBuildTool/tree/master/pybuildtool/tools.\nSee how they were imported by the ``wscript`` file.\n\nSince you control the ``wscript`` file, you control much of the aspect of the\nbuild process.\n\nIf you wanted to go deeper than just editing ``build.yml`` you could read\n`introduction to waf and wscript <http://waf.io/apidocs/tutorial.html>`_, or\na more technical `waf project structure <http://waf.io/book/#_basic_project_structure>`_.\n\nThere're three stages predefined: \"dev\", \"stage\", and \"prod\" (see the\n``wscript`` file), but the functionality isn't there yet, they have separate\ntemporary build directory of their own but they still share the same build\nrules.\n\nCurrently stages were implemented like this: for ``clean-css`` tool, if the\ncurrent stage was one of \"dev\" or \"devel\" or \"development\" it will do copy\noperation instead of css file minification.\n\nThis is an example of ``build.yml``, pretend it's a django project:\n\n.. code:: yaml\n\n    # Macro, reusable definition, defined once - used plenty.\n    # The word started with ampersand (&) is called yaml node anchor.\n    # The anchor is what matters, it's a yaml feature.\n    #\n    # Group name in all uppercase will be ignored.\n    #\n    # {_1} is a replacement pattern for parent group's name at level 1.\n    # It is being used to easily reproduce the directory structure.\n    JSHINT_EXCLUDES: &JSHINT_EXCLUDES\n        - \"{_1}/{_2}/js/jquery.js\"\n        - \"{_1}/{_2}/js/require.js\"\n        - \"{_1}/{_2}/js/underscore.js\"\n\n\n    # Build group at level 1.\n    djangoprj:\n        # This is special, not a group.\n        options:\n            # Lower level tool configurations can be defined at higher level.\n            #\n            # `config_file` of the tool `jshint`\n            jshint_config_file: \"etc/jshint.rc\"\n            # `config_file` of the tool `pylint`\n            pylint_config_file: \"etc/pylint.rc\"\n\n        # Build group at level 2\n        blogapp:\n            # The lowest level group is the tool being used, if no such tool\n            # was found a fatal error will be raised.\n            jshint:\n                # Wildcards is a okay, see ant-glob.\n                file_in: \"{_1}/{_2}/js/**/*.js\"\n            concat:\n                # `raw_file_in` will be monitored for changes by `waf watch`\n                raw_file_in: \"{_1}/{_2}/js/**/*.js\"\n                # `{_1}:{_2}` will be replaced with the groups' names, in this\n                # case it will be read as `djangoprj/blogapp/jshint`\n                rule_in: \"{_1}/{_2}/jshint\"\n                # Relative files are relative to the directory where you\n                # run `waf configure`\n                file_out: \"js/blogapp.js\"\n\n        # Build group at level 2\n        djangoprj:\n            # Test javascript files syntax for errors\n            jshint:\n                options:\n                    # Example of macro usage, see yaml node anchor.\n                    # `_source_excluded_` is a special directive, excludes some\n                    # files listed in `file_in` (could be from wildcards) from\n                    # being processed.\n                    _source_excluded_: *JSHINT_EXCLUDES\n                file_in: \"{_1}/{_2}/js/**/*.js\"\n            # Test javascript files syntax for errors\n            jscs:\n                options:\n                    _source_excluded_: *JSHINT_EXCLUDES\n                    # This one is defined here, not in higher level group\n                    config_file: \"etc/jscs.rc\"\n                file_in: \"{_1}/{_2}/js/**/*.js\"\n            # Test python files syntax for errors\n            pylint:\n                raw_file_in: \"{_1}/{_2}/**/*.py\"\n            # Concacenate javascript files into one file for production site\n            concat:\n                rule_in:\n                    # Can has multiple items\n                    -   \"djangoprj/djangoprj/jshint\"\n                    -   \"{_1}/{_2}/jscs\"\n                # The `@` symbol means to use the files produced by other tools\n                file_in: \"@{_1}/blogapp/concat\"\n                raw_file_in: \"{_1}/{_2}/js/**/*.js\"\n                file_out: \"js/djangoprj.js\"\n            # Copy final javascript file to production directory\n            cp:\n                file_in: \"@{_1}/{_2}/concat\"\n                # Files usually produced in sandbox directories, `raw_file_out`\n                # directive made it produced in the real project directory\n                raw_file_out: \"dist/\"\n            # Copy compressed final javascript file to production\n            # directory\n            uglifyjs:\n                file_in: \"@{_1}/{_2}/concat\"\n                # Directory as target is a okay, directory must ends with `/`.\n                raw_file_out: \"dist/\"\n\n\nSeveral things to keep in mind:\n\n-   \"djangoprj\", \"blogapp\", \"jshint\", \"concat\" are group names.\n\n-   JSHINT_EXCLUDES is not a group name (it matches all capital letters and\n    underscore), pybuildtool will not recognize this entry, but ``yaml.load``\n    will.\n    It can be used as `yaml node anchor`_.\n\n-   ``{_1}`` is string replacement thingy for a group name based on its level.\n\n-   Because group name can be used as string replacement for file\n    names, they can be used to represent directory structures.\n\n-   \"@djangoprj/djangoprj/jshint\" is a reference to files\n    generated by the rule \"djangoprj\"-\"djangoprj\"-\"jshint\", that is,\n    the combination of its ``file_out``, ``raw_file_out`` and ``extra_out``.\n\n-   You can use `ant glob`_ like this ``**/*.js``\n\n-   You can use directory as output, they must end with path separator, for\n    example: \"minified_js/\"\n\n-   The child-most groups are special, they must match tool name like \"jshint\",\n    \"concat\", \"pylint\", \"uglifyjs\", etc.\n\n-   Rules are read in the order they are written, you can reference other rules\n    generated output files as a input files but those rules must have been\n    specified before.\n    We don't support lazy loading of rules yet.\n\n-   The directive ``raw_file_in`` or ``raw_depend_in`` is used for ``waf watch``\n    to get list of files need to be monitored.\n\n-   The directive ``depend_in`` can be used to force the tool to process\n    ``file_in`` if files in ``depend_in`` changes.\n\n-   The directive ``extra_out`` can be used to list auxiliary files produced by\n    the tool, it can be used with combination of ``@group:group`` directive as\n    inputs for other tools.\n\n-   The option field: ``_source_excluded_`` is list of files which will be\n    excluded from inputs.\n\n-   The directive ``raw_file_out`` means this rule's outputs will be\n    written in the actual file system, by default it's generated inside\n    '.BUILD/stage/' directory.\n\n-   The option field: ``config_file`` is configuration item provided by each\n    tools, in this case it was provided by \"pylint\", \"jshint\", and \"jscs\", and\n    they happened to have used the same name.  \n    When option field is placed in higher group level, it's prefixed with the\n    tool name, for example: \"jscs_config_file\"\n\n\nWarning\n-------\n\n``waf`` does not like it if the source and target existed in the same directory,\nsee: `Files are always built`_.\n\nIf you used `rule_in` you may need to run `waf build` multiple times until there\nwas nothing to build, when the system is first initialize with `waf configure`\nor by `waf clean`.\n\nInstall\n-------\n\n1.   ``pip install pybuildtool``\n\n\n#.   Install **waf** as executable binary, download from `Waf project\n     <http://waf.io>`_.\n\n     You could also ``pip install waftools`` and then run ``wafinstall``,\n     caution: this method will modify your ``~/.bashrc`` adding ``WAFDIR=???``.\n\n#.   Copy and modify ``wscript`` in your project's root directory, specify the\n     build tools your are going to use.\n\n#.   Create ``build.yml`` with content like our example, this will be\n     your build rules.\n\n#.   ``waf configure``\n\n#.   ``waf build_dev`` or ``waf watch_dev``\n\n\n.. _ant glob: http://ant.apache.org/manual/dirtasks.html\n.. _yaml node anchor: http://yaml.org/spec/1.2/spec.html#id2785586\n.. _Files are always built: https://code.google.com/p/waf/wiki/FAQ#The_same_files_are_always_built", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dozymoe/PyBuildTool", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pybuildtool", "package_url": "https://pypi.org/project/pybuildtool/", "platform": "", "project_url": "https://pypi.org/project/pybuildtool/", "project_urls": {"Homepage": "https://github.com/dozymoe/PyBuildTool"}, "release_url": "https://pypi.org/project/pybuildtool/2.0.32/", "requires_dist": null, "requires_python": ">=2.7.0", "summary": "Build utility to manage web resources.", "version": "2.0.32", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyBuildTool</h1>\n<ul>\n<li>License      : MIT</li>\n<li>Project URL  : <a href=\"http://github.com/dozymoe/PyBuildTool\" rel=\"nofollow\">http://github.com/dozymoe/PyBuildTool</a></li>\n</ul>\n<h2>Summary</h2>\n<p>PyBuildTool helps transform resources and run automated tests as you code, I\nusually have it watched the project files while editing with vim.</p>\n<p>PyBuildTool is written in python as a higher level interface to <code>Waf &lt;http://waf.io&gt;</code>_, a meta build system.</p>\n<p>The configuration file you'd interact with: <code>build.yml</code>, is declarative,\nwritten in yaml. While the build tools which you could also write, were made to\nbe simple, following a pattern.</p>\n<p>The configuration file does not need to be named \"build.yml\", just change\nthe file <code>wscript</code> (this is something that waf needs). You need to create\n<code>wscript</code> file yourself, following the example here:\n<a href=\"http://raw.githubusercontent.com/dozymoe/PyBuildTool/master/pybuildtool/wscript.example\" rel=\"nofollow\">http://raw.githubusercontent.com/dozymoe/PyBuildTool/master/pybuildtool/wscript.example</a></p>\n<p>There are builtin tools, you can use them as examples to build your own build\ntools, see them here: <a href=\"http://github.com/dozymoe/PyBuildTool/tree/master/pybuildtool/tools\" rel=\"nofollow\">http://github.com/dozymoe/PyBuildTool/tree/master/pybuildtool/tools</a>.\nSee how they were imported by the <code>wscript</code> file.</p>\n<p>Since you control the <code>wscript</code> file, you control much of the aspect of the\nbuild process.</p>\n<p>If you wanted to go deeper than just editing <code>build.yml</code> you could read\n<code>introduction to waf and wscript &lt;http://waf.io/apidocs/tutorial.html&gt;</code><em>, or\na more technical <code>waf project structure &lt;http://waf.io/book/#_basic_project_structure&gt;</code></em>.</p>\n<p>There're three stages predefined: \"dev\", \"stage\", and \"prod\" (see the\n<code>wscript</code> file), but the functionality isn't there yet, they have separate\ntemporary build directory of their own but they still share the same build\nrules.</p>\n<p>Currently stages were implemented like this: for <code>clean-css</code> tool, if the\ncurrent stage was one of \"dev\" or \"devel\" or \"development\" it will do copy\noperation instead of css file minification.</p>\n<p>This is an example of <code>build.yml</code>, pretend it's a django project:</p>\n<p>.. code:: yaml</p>\n<pre><code># Macro, reusable definition, defined once - used plenty.\n# The word started with ampersand (&amp;) is called yaml node anchor.\n# The anchor is what matters, it's a yaml feature.\n#\n# Group name in all uppercase will be ignored.\n#\n# {_1} is a replacement pattern for parent group's name at level 1.\n# It is being used to easily reproduce the directory structure.\nJSHINT_EXCLUDES: &amp;JSHINT_EXCLUDES\n    - \"{_1}/{_2}/js/jquery.js\"\n    - \"{_1}/{_2}/js/require.js\"\n    - \"{_1}/{_2}/js/underscore.js\"\n\n\n# Build group at level 1.\ndjangoprj:\n    # This is special, not a group.\n    options:\n        # Lower level tool configurations can be defined at higher level.\n        #\n        # `config_file` of the tool `jshint`\n        jshint_config_file: \"etc/jshint.rc\"\n        # `config_file` of the tool `pylint`\n        pylint_config_file: \"etc/pylint.rc\"\n\n    # Build group at level 2\n    blogapp:\n        # The lowest level group is the tool being used, if no such tool\n        # was found a fatal error will be raised.\n        jshint:\n            # Wildcards is a okay, see ant-glob.\n            file_in: \"{_1}/{_2}/js/**/*.js\"\n        concat:\n            # `raw_file_in` will be monitored for changes by `waf watch`\n            raw_file_in: \"{_1}/{_2}/js/**/*.js\"\n            # `{_1}:{_2}` will be replaced with the groups' names, in this\n            # case it will be read as `djangoprj/blogapp/jshint`\n            rule_in: \"{_1}/{_2}/jshint\"\n            # Relative files are relative to the directory where you\n            # run `waf configure`\n            file_out: \"js/blogapp.js\"\n\n    # Build group at level 2\n    djangoprj:\n        # Test javascript files syntax for errors\n        jshint:\n            options:\n                # Example of macro usage, see yaml node anchor.\n                # `_source_excluded_` is a special directive, excludes some\n                # files listed in `file_in` (could be from wildcards) from\n                # being processed.\n                _source_excluded_: *JSHINT_EXCLUDES\n            file_in: \"{_1}/{_2}/js/**/*.js\"\n        # Test javascript files syntax for errors\n        jscs:\n            options:\n                _source_excluded_: *JSHINT_EXCLUDES\n                # This one is defined here, not in higher level group\n                config_file: \"etc/jscs.rc\"\n            file_in: \"{_1}/{_2}/js/**/*.js\"\n        # Test python files syntax for errors\n        pylint:\n            raw_file_in: \"{_1}/{_2}/**/*.py\"\n        # Concacenate javascript files into one file for production site\n        concat:\n            rule_in:\n                # Can has multiple items\n                -   \"djangoprj/djangoprj/jshint\"\n                -   \"{_1}/{_2}/jscs\"\n            # The `@` symbol means to use the files produced by other tools\n            file_in: \"@{_1}/blogapp/concat\"\n            raw_file_in: \"{_1}/{_2}/js/**/*.js\"\n            file_out: \"js/djangoprj.js\"\n        # Copy final javascript file to production directory\n        cp:\n            file_in: \"@{_1}/{_2}/concat\"\n            # Files usually produced in sandbox directories, `raw_file_out`\n            # directive made it produced in the real project directory\n            raw_file_out: \"dist/\"\n        # Copy compressed final javascript file to production\n        # directory\n        uglifyjs:\n            file_in: \"@{_1}/{_2}/concat\"\n            # Directory as target is a okay, directory must ends with `/`.\n            raw_file_out: \"dist/\"\n</code></pre>\n<p>Several things to keep in mind:</p>\n<ul>\n<li>\n<p>\"djangoprj\", \"blogapp\", \"jshint\", \"concat\" are group names.</p>\n</li>\n<li>\n<p>JSHINT_EXCLUDES is not a group name (it matches all capital letters and\nunderscore), pybuildtool will not recognize this entry, but <code>yaml.load</code>\nwill.\nIt can be used as <code>yaml node anchor</code>_.</p>\n</li>\n<li>\n<p><code>{_1}</code> is string replacement thingy for a group name based on its level.</p>\n</li>\n<li>\n<p>Because group name can be used as string replacement for file\nnames, they can be used to represent directory structures.</p>\n</li>\n<li>\n<p>\"@djangoprj/djangoprj/jshint\" is a reference to files\ngenerated by the rule \"djangoprj\"-\"djangoprj\"-\"jshint\", that is,\nthe combination of its <code>file_out</code>, <code>raw_file_out</code> and <code>extra_out</code>.</p>\n</li>\n<li>\n<p>You can use <code>ant glob</code>_ like this <code>**/*.js</code></p>\n</li>\n<li>\n<p>You can use directory as output, they must end with path separator, for\nexample: \"minified_js/\"</p>\n</li>\n<li>\n<p>The child-most groups are special, they must match tool name like \"jshint\",\n\"concat\", \"pylint\", \"uglifyjs\", etc.</p>\n</li>\n<li>\n<p>Rules are read in the order they are written, you can reference other rules\ngenerated output files as a input files but those rules must have been\nspecified before.\nWe don't support lazy loading of rules yet.</p>\n</li>\n<li>\n<p>The directive <code>raw_file_in</code> or <code>raw_depend_in</code> is used for <code>waf watch</code>\nto get list of files need to be monitored.</p>\n</li>\n<li>\n<p>The directive <code>depend_in</code> can be used to force the tool to process\n<code>file_in</code> if files in <code>depend_in</code> changes.</p>\n</li>\n<li>\n<p>The directive <code>extra_out</code> can be used to list auxiliary files produced by\nthe tool, it can be used with combination of <code>@group:group</code> directive as\ninputs for other tools.</p>\n</li>\n<li>\n<p>The option field: <code>_source_excluded_</code> is list of files which will be\nexcluded from inputs.</p>\n</li>\n<li>\n<p>The directive <code>raw_file_out</code> means this rule's outputs will be\nwritten in the actual file system, by default it's generated inside\n'.BUILD/stage/' directory.</p>\n</li>\n<li>\n<p>The option field: <code>config_file</code> is configuration item provided by each\ntools, in this case it was provided by \"pylint\", \"jshint\", and \"jscs\", and\nthey happened to have used the same name.<br>\nWhen option field is placed in higher group level, it's prefixed with the\ntool name, for example: \"jscs_config_file\"</p>\n</li>\n</ul>\n<h2>Warning</h2>\n<p><code>waf</code> does not like it if the source and target existed in the same directory,\nsee: <code>Files are always built</code>_.</p>\n<p>If you used <code>rule_in</code> you may need to run <code>waf build</code> multiple times until there\nwas nothing to build, when the system is first initialize with <code>waf configure</code>\nor by <code>waf clean</code>.</p>\n<h2>Install</h2>\n<ol>\n<li><code>pip install pybuildtool</code></li>\n</ol>\n<p>#.   Install <strong>waf</strong> as executable binary, download from <code>Waf project &lt;http://waf.io&gt;</code>_.</p>\n<pre><code> You could also ``pip install waftools`` and then run ``wafinstall``,\n caution: this method will modify your ``~/.bashrc`` adding ``WAFDIR=???``.\n</code></pre>\n<p>#.   Copy and modify <code>wscript</code> in your project's root directory, specify the\nbuild tools your are going to use.</p>\n<p>#.   Create <code>build.yml</code> with content like our example, this will be\nyour build rules.</p>\n<p>#.   <code>waf configure</code></p>\n<p>#.   <code>waf build_dev</code> or <code>waf watch_dev</code></p>\n<p>.. _ant glob: <a href=\"http://ant.apache.org/manual/dirtasks.html\" rel=\"nofollow\">http://ant.apache.org/manual/dirtasks.html</a>\n.. _yaml node anchor: <a href=\"http://yaml.org/spec/1.2/spec.html#id2785586\" rel=\"nofollow\">http://yaml.org/spec/1.2/spec.html#id2785586</a>\n.. _Files are always built: <a href=\"https://code.google.com/p/waf/wiki/FAQ#The_same_files_are_always_built\" rel=\"nofollow\">https://code.google.com/p/waf/wiki/FAQ#The_same_files_are_always_built</a></p>\n\n          </div>"}, "last_serial": 6862832, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "18175c155b2c051995e8eae8f2ef0da7", "sha256": "b53ba1db0d56e0635c9691291edea42022312914721f412d2d61bf68c4bea86b"}, "downloads": -1, "filename": "pybuildtool-2.0.1.tar.gz", "has_sig": true, "md5_digest": "18175c155b2c051995e8eae8f2ef0da7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25814, "upload_time": "2017-01-21T17:20:31", "upload_time_iso_8601": "2017-01-21T17:20:31.483662Z", "url": "https://files.pythonhosted.org/packages/f4/40/4204d55789d376cbdb32c5ab18371d442815932993186dc6697cdc8c13c6/pybuildtool-2.0.1.tar.gz", "yanked": false}], "2.0.10": [{"comment_text": "", "digests": {"md5": "5bc1ad0bee655ffe281533780a4cfddc", "sha256": "d3923f9be2ed263b2a122c31dc81b7c763a83af9e20a86e7438e5ce17e7ce896"}, "downloads": -1, "filename": "pybuildtool-2.0.10.tar.gz", "has_sig": false, "md5_digest": "5bc1ad0bee655ffe281533780a4cfddc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50796, "upload_time": "2017-04-22T00:12:31", "upload_time_iso_8601": "2017-04-22T00:12:31.771392Z", "url": "https://files.pythonhosted.org/packages/fa/35/df99bcc254d77592426af582c722a5b63cb7e21e648ab3b70e95f2f2d333/pybuildtool-2.0.10.tar.gz", "yanked": false}], "2.0.11": [{"comment_text": "", "digests": {"md5": "5fb2e338c84fca37179a82751c97c5de", "sha256": "23836244b30ff1f7972dcf51e5edc36ee8c106705d9926596ef8652d7235469f"}, "downloads": -1, "filename": "pybuildtool-2.0.11.tar.gz", "has_sig": false, "md5_digest": "5fb2e338c84fca37179a82751c97c5de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52531, "upload_time": "2017-06-22T02:08:28", "upload_time_iso_8601": "2017-06-22T02:08:28.611990Z", "url": "https://files.pythonhosted.org/packages/11/0c/1121f7d089a93be0867e65c648ffd4a248f7bdf2a91a8243d239f06729ef/pybuildtool-2.0.11.tar.gz", "yanked": false}], "2.0.12": [{"comment_text": "", "digests": {"md5": "cd9dd9a9c1b9c80872064610c2ea320f", "sha256": "add1f330b121f604243cf14f8f8e042e9f361713f4d48658339ef0a609787955"}, "downloads": -1, "filename": "pybuildtool-2.0.12.tar.gz", "has_sig": false, "md5_digest": "cd9dd9a9c1b9c80872064610c2ea320f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56287, "upload_time": "2017-07-17T10:36:01", "upload_time_iso_8601": "2017-07-17T10:36:01.486059Z", "url": "https://files.pythonhosted.org/packages/fb/ae/e54f504a546b066ca6b0ef1e1abcbf34330624f0578822b7755aaf38cce8/pybuildtool-2.0.12.tar.gz", "yanked": false}], "2.0.13": [{"comment_text": "", "digests": {"md5": "18782b0a74a922317259c3a74cbcd95f", "sha256": "79fb673d772f95777ac1580763374a6c6baa75c7c2b8ae1fcfd1c523ca1b691d"}, "downloads": -1, "filename": "pybuildtool-2.0.13.tar.gz", "has_sig": false, "md5_digest": "18782b0a74a922317259c3a74cbcd95f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57676, "upload_time": "2017-07-17T16:26:34", "upload_time_iso_8601": "2017-07-17T16:26:34.217690Z", "url": "https://files.pythonhosted.org/packages/8f/1b/070b4be2e26d4624b4ef420100ee33034abcfe8b3c1aa29fd0a199787df9/pybuildtool-2.0.13.tar.gz", "yanked": false}], "2.0.14": [{"comment_text": "", "digests": {"md5": "d00074967f1204780ad0851246d7274f", "sha256": "6cab7ac1eb66f4d34677beec974b3f278a48b471d94b4a0719d86d822fb0401a"}, "downloads": -1, "filename": "pybuildtool-2.0.14.tar.gz", "has_sig": false, "md5_digest": "d00074967f1204780ad0851246d7274f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58014, "upload_time": "2017-08-10T15:23:11", "upload_time_iso_8601": "2017-08-10T15:23:11.298961Z", "url": "https://files.pythonhosted.org/packages/a0/8e/e96f61b93761a6bb0124172b1aaf4bf3493aac9618fe967bd259ee04d026/pybuildtool-2.0.14.tar.gz", "yanked": false}], "2.0.15": [{"comment_text": "", "digests": {"md5": "16f75ff926387c4fcb9f5956d239c2bc", "sha256": "d90ab1c34710955893b9b5df90dd1be64314b0c2f9f4a7a22c704189b2ae8033"}, "downloads": -1, "filename": "pybuildtool-2.0.15.tar.gz", "has_sig": false, "md5_digest": "16f75ff926387c4fcb9f5956d239c2bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59060, "upload_time": "2017-08-13T12:25:29", "upload_time_iso_8601": "2017-08-13T12:25:29.924623Z", "url": "https://files.pythonhosted.org/packages/3e/fa/adf05ca668783af7d13b7f1c8bf1513dfe47a8ed87a49b64f34120ac6f33/pybuildtool-2.0.15.tar.gz", "yanked": false}], "2.0.16": [{"comment_text": "", "digests": {"md5": "40491cf020df84950b038c21595ff6b4", "sha256": "770cdbaceb0c0e7ab94ec1d804dd2e50469cdd1efae6a552233b7827df7192b2"}, "downloads": -1, "filename": "pybuildtool-2.0.16.tar.gz", "has_sig": false, "md5_digest": "40491cf020df84950b038c21595ff6b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59414, "upload_time": "2017-12-03T23:51:10", "upload_time_iso_8601": "2017-12-03T23:51:10.357441Z", "url": "https://files.pythonhosted.org/packages/f1/e4/154c5f66b64d1e64aa4230ae5b54d923636dd45db952770b55d927a14ae5/pybuildtool-2.0.16.tar.gz", "yanked": false}], "2.0.17": [{"comment_text": "", "digests": {"md5": "bea7c27cd7a85aaa9f92a63e36105b94", "sha256": "b9f87f2c537ceef14a4a67c144fd55c4e69edf7f655b8cc0b527e8c58047aa04"}, "downloads": -1, "filename": "pybuildtool-2.0.17.tar.gz", "has_sig": false, "md5_digest": "bea7c27cd7a85aaa9f92a63e36105b94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59198, "upload_time": "2017-12-04T22:00:37", "upload_time_iso_8601": "2017-12-04T22:00:37.802809Z", "url": "https://files.pythonhosted.org/packages/63/78/d61f786f59a253ef7ee22308a4f2627b866e475ed372523752f483e3a8e4/pybuildtool-2.0.17.tar.gz", "yanked": false}], "2.0.18": [{"comment_text": "", "digests": {"md5": "47d0bfff0f9c9edb93cc7fb13fdba971", "sha256": "3cf83b7b7f0748b2a83953948efd894a6a7da9a626acf34ab0dfc01a6ecc3167"}, "downloads": -1, "filename": "pybuildtool-2.0.18.tar.gz", "has_sig": false, "md5_digest": "47d0bfff0f9c9edb93cc7fb13fdba971", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59627, "upload_time": "2017-12-07T04:36:07", "upload_time_iso_8601": "2017-12-07T04:36:07.074483Z", "url": "https://files.pythonhosted.org/packages/51/47/8841276df803de6a6218b6ae05a22a99ff565adc79c034684a5766ce0666/pybuildtool-2.0.18.tar.gz", "yanked": false}], "2.0.19": [{"comment_text": "", "digests": {"md5": "23ec9138bfc29e30c368a87ef09aecc7", "sha256": "93711058c82089761a7124c0de7acd4131080383186c4355f979d5884c2228d2"}, "downloads": -1, "filename": "pybuildtool-2.0.19.tar.gz", "has_sig": false, "md5_digest": "23ec9138bfc29e30c368a87ef09aecc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59648, "upload_time": "2017-12-16T01:23:02", "upload_time_iso_8601": "2017-12-16T01:23:02.425226Z", "url": "https://files.pythonhosted.org/packages/69/ab/32fc6e6cfd34331f61fc4d0e80e93be5fb1e3f6e25937116749feeff6638/pybuildtool-2.0.19.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "f2b79ac2b81740a2e04734baa976ad31", "sha256": "8156a9bd51601800a2085bdc5f2e4f0961508829034449b0dc172fa0d8eb6700"}, "downloads": -1, "filename": "pybuildtool-2.0.2.tar.gz", "has_sig": true, "md5_digest": "f2b79ac2b81740a2e04734baa976ad31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26172, "upload_time": "2017-01-21T20:29:37", "upload_time_iso_8601": "2017-01-21T20:29:37.801248Z", "url": "https://files.pythonhosted.org/packages/62/0a/165e4bf2e57f9cc3f5cf1c3fde3d19e6aa3dae4fcb08181b5edd2dabf12d/pybuildtool-2.0.2.tar.gz", "yanked": false}], "2.0.20": [{"comment_text": "", "digests": {"md5": "0a966ac08ea39ff8058ada68664cf2ce", "sha256": "3b6c584eefb22d9cbfcb66c6da0e524063e4d1ad52a0887c43e7634d980c6574"}, "downloads": -1, "filename": "pybuildtool-2.0.20.tar.gz", "has_sig": false, "md5_digest": "0a966ac08ea39ff8058ada68664cf2ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59816, "upload_time": "2018-03-02T23:39:48", "upload_time_iso_8601": "2018-03-02T23:39:48.470797Z", "url": "https://files.pythonhosted.org/packages/46/06/b0f8967693c7b611826cbc86d3ee1923d0017c5d51c7320f8e0bfd293402/pybuildtool-2.0.20.tar.gz", "yanked": false}], "2.0.21": [{"comment_text": "", "digests": {"md5": "c536bf3eba2a8bb4c52108b73bd7ac45", "sha256": "a24ea2f2bd7975aa4b3772f36c4a5d087ed92d69d9b120bd6c47ff63a016ee21"}, "downloads": -1, "filename": "pybuildtool-2.0.21-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c536bf3eba2a8bb4c52108b73bd7ac45", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 113347, "upload_time": "2019-06-08T04:58:12", "upload_time_iso_8601": "2019-06-08T04:58:12.345186Z", "url": "https://files.pythonhosted.org/packages/44/9c/af11bc025252e766005465adf76041abbc4ab667647eee025fbe3fd0f22a/pybuildtool-2.0.21-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb5c5c27abefdd4a8a6da2fa4870b3a1", "sha256": "ad81fb0380d945ed518ec3e12e63b7b992f8da7fc2f5d590c639b7a042fffde4"}, "downloads": -1, "filename": "pybuildtool-2.0.21.tar.gz", "has_sig": false, "md5_digest": "eb5c5c27abefdd4a8a6da2fa4870b3a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 58124, "upload_time": "2019-06-08T04:58:17", "upload_time_iso_8601": "2019-06-08T04:58:17.514011Z", "url": "https://files.pythonhosted.org/packages/9c/9a/80136dfb4a8599ebdba4faa8b9bd65964fcf49b5f0b866818042889802a5/pybuildtool-2.0.21.tar.gz", "yanked": false}], "2.0.22": [{"comment_text": "", "digests": {"md5": "601fcae3a22730d0c2815bc21a9daea0", "sha256": "ce9f432083bef2e996329a7823f5caf2bb813345d23bc552a7d87765694f9123"}, "downloads": -1, "filename": "pybuildtool-2.0.22.tar.gz", "has_sig": false, "md5_digest": "601fcae3a22730d0c2815bc21a9daea0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 59630, "upload_time": "2019-06-19T02:23:20", "upload_time_iso_8601": "2019-06-19T02:23:20.179136Z", "url": "https://files.pythonhosted.org/packages/2f/6e/f1234143a935b1d273563545ab071f3efa02577dfa47f61e223b091e5beb/pybuildtool-2.0.22.tar.gz", "yanked": false}], "2.0.23": [{"comment_text": "", "digests": {"md5": "2d5781a810a18ee829e518a9930d2493", "sha256": "f05798559cc9968b8905c9e4e0c35eecbbeedade07deff46abb86489d9dbbc37"}, "downloads": -1, "filename": "pybuildtool-2.0.23.tar.gz", "has_sig": false, "md5_digest": "2d5781a810a18ee829e518a9930d2493", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 59640, "upload_time": "2019-06-21T03:14:42", "upload_time_iso_8601": "2019-06-21T03:14:42.545737Z", "url": "https://files.pythonhosted.org/packages/80/8e/3d5f38c81b3f4471e73c3ea42ad4dead4fa81af6ea39963edfe4d05e7ca4/pybuildtool-2.0.23.tar.gz", "yanked": false}], "2.0.24": [{"comment_text": "", "digests": {"md5": "099711272ef8d0419572052830f348e7", "sha256": "28d4e0e46d5b0ac3228206df556b3427031fa42babf22245b68baafb6a2d7cbf"}, "downloads": -1, "filename": "pybuildtool-2.0.24.tar.gz", "has_sig": false, "md5_digest": "099711272ef8d0419572052830f348e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 59745, "upload_time": "2019-06-26T15:54:20", "upload_time_iso_8601": "2019-06-26T15:54:20.470884Z", "url": "https://files.pythonhosted.org/packages/ab/d7/12a88bff1d728940ee253b0632325bfdbd97eac2ecfc84f348a9af4e7038/pybuildtool-2.0.24.tar.gz", "yanked": false}], "2.0.26": [{"comment_text": "", "digests": {"md5": "1dfa9ac75793b276637e1fd6f0f6dc3a", "sha256": "bf63bba0a3a4f5202f44babd3ed85c3dc8ffd19db30ae242dc42d2d3c359f9e6"}, "downloads": -1, "filename": "pybuildtool-2.0.26.tar.gz", "has_sig": false, "md5_digest": "1dfa9ac75793b276637e1fd6f0f6dc3a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 59726, "upload_time": "2019-09-14T20:22:00", "upload_time_iso_8601": "2019-09-14T20:22:00.124927Z", "url": "https://files.pythonhosted.org/packages/bb/81/d9920959ed56d9561ffdae247f6df1fa6f700aa5f19c3496bbedf5e5695d/pybuildtool-2.0.26.tar.gz", "yanked": false}], "2.0.27": [{"comment_text": "", "digests": {"md5": "b33f0974f8970b171ac84304f3c802f6", "sha256": "8360582657eb4b30afd326a24ae5b8d2b19500134b5dde61ef99b5abf9735a01"}, "downloads": -1, "filename": "pybuildtool-2.0.27.tar.gz", "has_sig": false, "md5_digest": "b33f0974f8970b171ac84304f3c802f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 59915, "upload_time": "2019-10-02T13:58:34", "upload_time_iso_8601": "2019-10-02T13:58:34.574859Z", "url": "https://files.pythonhosted.org/packages/e5/13/9cf608c35f1972194dedf6db2a782bf47ded77e1ab63be5bf4c088dd6ff7/pybuildtool-2.0.27.tar.gz", "yanked": false}], "2.0.28": [{"comment_text": "", "digests": {"md5": "ae6da64d5bd0665d12c72f9763628e56", "sha256": "813ed5c552c1ed577d2ad2f34638ec95b948931898eb0c90e7bc9b7fdd60d2ba"}, "downloads": -1, "filename": "pybuildtool-2.0.28.tar.gz", "has_sig": false, "md5_digest": "ae6da64d5bd0665d12c72f9763628e56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 61578, "upload_time": "2019-10-05T13:57:26", "upload_time_iso_8601": "2019-10-05T13:57:26.736882Z", "url": "https://files.pythonhosted.org/packages/52/b3/7eddca621d24cdab9a218d60190a504c40e0941dfd6cc6068b61e3544b68/pybuildtool-2.0.28.tar.gz", "yanked": false}], "2.0.29": [{"comment_text": "", "digests": {"md5": "400115fde3d578602e4eb373e4ba322e", "sha256": "d4625c383bc560a824a24547386cf8b55bbb231767705284cf47f446ec7f5083"}, "downloads": -1, "filename": "pybuildtool-2.0.29.tar.gz", "has_sig": false, "md5_digest": "400115fde3d578602e4eb373e4ba322e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 61749, "upload_time": "2019-10-15T13:55:14", "upload_time_iso_8601": "2019-10-15T13:55:14.913094Z", "url": "https://files.pythonhosted.org/packages/e5/fc/8b2208ef3544e4b9d8dd4027c070e638ea1687bbb8a2fd936b996b917468/pybuildtool-2.0.29.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "c196b069c606c6d2265bfb01b338fdd1", "sha256": "683758c217450cd7ffa7a0316c7b53ebc4663198567fbce402d2756a88419ddc"}, "downloads": -1, "filename": "pybuildtool-2.0.3.tar.gz", "has_sig": true, "md5_digest": "c196b069c606c6d2265bfb01b338fdd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32744, "upload_time": "2017-02-07T10:15:32", "upload_time_iso_8601": "2017-02-07T10:15:32.104200Z", "url": "https://files.pythonhosted.org/packages/5c/5b/4bc16eb13e7508f53d2f45084879cdf518782745137ecb35b9f71e6a4e88/pybuildtool-2.0.3.tar.gz", "yanked": false}], "2.0.30": [{"comment_text": "", "digests": {"md5": "aa4f320b7f48ada4648bda7e564fc5de", "sha256": "ec7adb3a2197666d9efe587a2173e6f96d3a8d93e1bef21dacfdab66b6c95eaa"}, "downloads": -1, "filename": "pybuildtool-2.0.30.tar.gz", "has_sig": false, "md5_digest": "aa4f320b7f48ada4648bda7e564fc5de", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 61764, "upload_time": "2019-10-23T07:44:20", "upload_time_iso_8601": "2019-10-23T07:44:20.326947Z", "url": "https://files.pythonhosted.org/packages/ff/11/8020af1d45d0265154e51eae35de25187372bc231973cf6fef8e5a2f6e83/pybuildtool-2.0.30.tar.gz", "yanked": false}], "2.0.31": [{"comment_text": "", "digests": {"md5": "deccada89b6b3c1e310cf8fd4c7a17c7", "sha256": "f4f21005f132a90acca619345d77474cf16c2806559cf8674ccbf74ac662ea54"}, "downloads": -1, "filename": "pybuildtool-2.0.31.tar.gz", "has_sig": false, "md5_digest": "deccada89b6b3c1e310cf8fd4c7a17c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 61871, "upload_time": "2020-02-18T03:14:04", "upload_time_iso_8601": "2020-02-18T03:14:04.320405Z", "url": "https://files.pythonhosted.org/packages/df/e3/ca36d6e095389bb86c7dc11fbf191c732243b8d666b6a0ea2946022a4cf4/pybuildtool-2.0.31.tar.gz", "yanked": false}], "2.0.32": [{"comment_text": "", "digests": {"md5": "bc7336025abfa847c5e8612d6d8f0098", "sha256": "a9452791dc768b6512f27aaa5d48f41486239f2cb46b069d57b95dac23339332"}, "downloads": -1, "filename": "pybuildtool-2.0.32.tar.gz", "has_sig": false, "md5_digest": "bc7336025abfa847c5e8612d6d8f0098", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 62037, "upload_time": "2020-03-23T02:28:17", "upload_time_iso_8601": "2020-03-23T02:28:17.342812Z", "url": "https://files.pythonhosted.org/packages/d7/97/43b3ab962f7b7db3e31bbbf2365b3e5d6607441e06767bc82b41a02347d4/pybuildtool-2.0.32.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "dfe2b2a3dc48716692e67d7a2e264052", "sha256": "5cc8b254a8082dca540a27d1eab981f10ab3a67bdf81158b4f8b2a0aebbc8a9e"}, "downloads": -1, "filename": "pybuildtool-2.0.4.tar.gz", "has_sig": true, "md5_digest": "dfe2b2a3dc48716692e67d7a2e264052", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34034, "upload_time": "2017-02-13T07:31:10", "upload_time_iso_8601": "2017-02-13T07:31:10.049025Z", "url": "https://files.pythonhosted.org/packages/e4/2c/a066b8e6f2cbd6a8ef836a74b717c4057c00879f9aecce05d407c0f4c646/pybuildtool-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "c27f22ee846fb8fb8a68b6cddc6140a8", "sha256": "8a193dd787ab63997d2c7fbecfae9f24fd37acd902582810e85d0ded29fc204e"}, "downloads": -1, "filename": "pybuildtool-2.0.5.tar.gz", "has_sig": true, "md5_digest": "c27f22ee846fb8fb8a68b6cddc6140a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34451, "upload_time": "2017-02-14T11:41:21", "upload_time_iso_8601": "2017-02-14T11:41:21.479115Z", "url": "https://files.pythonhosted.org/packages/62/79/63fc222014215bf486e4a52a88834b295dc9f5bf7cf2cd74d9848de36b05/pybuildtool-2.0.5.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "16c2d15528d3d35cda8a57ceada4aa6f", "sha256": "afa7c44ae994ed139a7a89bc2c338cb2edb757705a47ecc03bb03bdf657901a6"}, "downloads": -1, "filename": "pybuildtool-2.0.6.tar.gz", "has_sig": true, "md5_digest": "16c2d15528d3d35cda8a57ceada4aa6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36713, "upload_time": "2017-02-17T14:56:33", "upload_time_iso_8601": "2017-02-17T14:56:33.651987Z", "url": "https://files.pythonhosted.org/packages/6a/fe/b33dc8604cf6e3631293838bc81759bf34842afbc9f29860522af4298380/pybuildtool-2.0.6.tar.gz", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "a91c10375b3271e073900d7201e6585f", "sha256": "355599b86b12e97f57a2fe0008cec2bf693602e226dfe2f5edb33526ad66e6f2"}, "downloads": -1, "filename": "pybuildtool-2.0.7.tar.gz", "has_sig": false, "md5_digest": "a91c10375b3271e073900d7201e6585f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38096, "upload_time": "2017-03-12T21:43:39", "upload_time_iso_8601": "2017-03-12T21:43:39.639045Z", "url": "https://files.pythonhosted.org/packages/37/d0/e884646defbc61e6bd70b227d54e3d6d56bddec3514b3805aa0d7f0cdc08/pybuildtool-2.0.7.tar.gz", "yanked": false}], "2.0.8": [{"comment_text": "", "digests": {"md5": "6e71e1df8d2b9c59717423ee853c91ee", "sha256": "218cb02a2784622591cee701a88fbaded05e95c47d0d48dae65bf9ba33bbc407"}, "downloads": -1, "filename": "pybuildtool-2.0.8.tar.gz", "has_sig": false, "md5_digest": "6e71e1df8d2b9c59717423ee853c91ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38111, "upload_time": "2017-03-13T17:38:23", "upload_time_iso_8601": "2017-03-13T17:38:23.705373Z", "url": "https://files.pythonhosted.org/packages/4b/62/fb1c10d6e7f1127cbb94bb78debf61225c714cb9740facdc8108b502c061/pybuildtool-2.0.8.tar.gz", "yanked": false}], "2.0.9": [{"comment_text": "", "digests": {"md5": "4a45bf813896f1b00e2a493a2e425c7a", "sha256": "97b8cfde8e4434d9fea055a69aebbd4f94b96b157a55445d06ac3a024fbbb8c5"}, "downloads": -1, "filename": "pybuildtool-2.0.9.tar.gz", "has_sig": false, "md5_digest": "4a45bf813896f1b00e2a493a2e425c7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48444, "upload_time": "2017-04-03T18:29:11", "upload_time_iso_8601": "2017-04-03T18:29:11.037195Z", "url": "https://files.pythonhosted.org/packages/30/6c/06fec36ddd380ffa9413c86cb6dbf2607c54d5eccd349e816340f15f1e27/pybuildtool-2.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc7336025abfa847c5e8612d6d8f0098", "sha256": "a9452791dc768b6512f27aaa5d48f41486239f2cb46b069d57b95dac23339332"}, "downloads": -1, "filename": "pybuildtool-2.0.32.tar.gz", "has_sig": false, "md5_digest": "bc7336025abfa847c5e8612d6d8f0098", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 62037, "upload_time": "2020-03-23T02:28:17", "upload_time_iso_8601": "2020-03-23T02:28:17.342812Z", "url": "https://files.pythonhosted.org/packages/d7/97/43b3ab962f7b7db3e31bbbf2365b3e5d6607441e06767bc82b41a02347d4/pybuildtool-2.0.32.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:55 2020"}