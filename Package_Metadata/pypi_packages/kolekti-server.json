{"info": {"author": "Miguel \u00c1ngel Garc\u00eda", "author_email": "miguelangel.garcia@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4"], "description": "=========  ============\nTESTS      COVERAGE\n=========  ============\n|travis|   |coveralls|\n=========  ============\n\nKolekti is a metric gatherer with lightweight agents.\n\nCurrent status: **Under Heavy development**\n\n\n.. |travis| image:: https://travis-ci.org/kolekti-project/kolekti-server.png\n  :target: `Travis`_\n  :alt: Travis results\n\n.. _Travis: https://travis-ci.org/kolekti-project/kolekti-server\n\n.. |coveralls| image:: https://coveralls.io/repos/kolekti-project/kolekti-server/badge.png\n  :target: Coveralls_\n  :alt: Coveralls_ results\n\n.. _Coveralls: https://coveralls.io/r/kolekti-project/kolekti-server\n\nInstallation\n============\n\nBecause Kolekti is under heavy development, the only way to install it is by cloning this repository.\n\nDefaults will use a local sqlite with RabbitMQ for tasks. You can reconfigure it under ``server/app/settings.py`` or create your own settings and set the environment variable `DJANGO_SETTINGS_MODULE`.\n\nYou can use Uchiwa_ with this configuration::\n\n  {\n    \"sensu\": [\n      {\n        \"name\": \"Kolekti 1\",\n        \"host\": \"localhost\",\n        \"port\": 9996,\n        \"path\": \"/sensu\"\n      }\n    ],\n    \"uchiwa\": {\n      \"host\": \"0.0.0.0\",\n      \"port\": 3000,\n      \"refresh\": 5\n    }\n  }\n\nBy default, Kolekti server will listen on port 9996, and will serve the Sensu_ API on path ``/sensu``.\n\nTo create the database you can use::\n\n  python server/manage.py syncdb\n\nDevelopers\n----------\n\nYou can create fake data by running::\n\n  python server/manage.py sample_kolekti\n\n\nKolekti vs Sensu\n================\n\nWhy to write another application similar to Sensu_? Well... Here you have a comparative (some features are not available yet):\n\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Feature                    | Sensu                                   | Kolekti                                                       |\n+============================+=========================================+===============================================================+\n| Language                   | Ruby                                    | Python                                                        |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Database                   | Redis                                   | Relational (Django ORM): Posgresql, MySQL, ...                |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Interface                  | Uchiwa                                  | Uchiwa                                                        |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| License                    | MIT                                     | MIT                                                           |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Internal communications    | Redis                                   | Celery over RabbitMQ, Redis, Postgresql, ...                  |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| External communications    | RabbitMQ                                | HTTP, HTTPS in near future                                    |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Min. Threads on client     | 3 (keepalive, client, subscriptions)    | 1 (subscriptions)                                             |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Keepalives                 | Sent by clients                         | Not needed. Any communication with clients is a keepalive.    |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Metrics                    | Do not launch alerts                    | May raise an alert                                            |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Checks                     | Do not store metrics                    | May store metrics                                             |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Clients register themselves| Always                                  | Optional                                                      |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Subscriptions              | Managed by clients                      | Managed by clients, by server or both.                        |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Nagios-compatible checks   | Yes                                     | No. It requires same format for checks and alerts.            |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n| Check failures             | Decided on client                       | Decided on server                                             |\n+----------------------------+-----------------------------------------+---------------------------------------------------------------+\n\n\n\n\n.. _`Sensu`: https://sensuapp.org\n.. _`Uchiwa`: https://github.com/sensu/uchiwa", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/magmax/kolekti", "keywords": "monitoring lightweight", "license": "Affero", "maintainer": null, "maintainer_email": null, "name": "kolekti-server", "package_url": "https://pypi.org/project/kolekti-server/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/kolekti-server/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/magmax/kolekti"}, "release_url": "https://pypi.org/project/kolekti-server/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Lightweight monitoring system", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>TESTS</th>\n<th>COVERAGE</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><a href=\"https://travis-ci.org/kolekti-project/kolekti-server\" rel=\"nofollow\"><img alt=\"Travis results\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b04bdcf8833a702f26d2f5e7e1fd0bf5575899df/68747470733a2f2f7472617669732d63692e6f72672f6b6f6c656b74692d70726f6a6563742f6b6f6c656b74692d7365727665722e706e67\"></a></td>\n<td><a href=\"https://coveralls.io/r/kolekti-project/kolekti-server\" rel=\"nofollow\"><img alt=\"Coveralls_ results\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d783a531a8cfd46a34fb3dcb87230dfb0117678/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6b6f6c656b74692d70726f6a6563742f6b6f6c656b74692d7365727665722f62616467652e706e67\"></a></td>\n</tr>\n</tbody>\n</table>\n<p>Kolekti is a metric gatherer with lightweight agents.</p>\n<p>Current status: <strong>Under Heavy development</strong></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Because Kolekti is under heavy development, the only way to install it is by cloning this repository.</p>\n<p>Defaults will use a local sqlite with RabbitMQ for tasks. You can reconfigure it under <tt>server/app/settings.py</tt> or create your own settings and set the environment variable <cite>DJANGO_SETTINGS_MODULE</cite>.</p>\n<p>You can use <a href=\"https://github.com/sensu/uchiwa\" rel=\"nofollow\">Uchiwa</a> with this configuration:</p>\n<pre>{\n  \"sensu\": [\n    {\n      \"name\": \"Kolekti 1\",\n      \"host\": \"localhost\",\n      \"port\": 9996,\n      \"path\": \"/sensu\"\n    }\n  ],\n  \"uchiwa\": {\n    \"host\": \"0.0.0.0\",\n    \"port\": 3000,\n    \"refresh\": 5\n  }\n}\n</pre>\n<p>By default, Kolekti server will listen on port 9996, and will serve the <a href=\"https://sensuapp.org\" rel=\"nofollow\">Sensu</a> API on path <tt>/sensu</tt>.</p>\n<p>To create the database you can use:</p>\n<pre>python server/manage.py syncdb\n</pre>\n<div id=\"developers\">\n<h3>Developers</h3>\n<p>You can create fake data by running:</p>\n<pre>python server/manage.py sample_kolekti\n</pre>\n</div>\n</div>\n<div id=\"kolekti-vs-sensu\">\n<h2>Kolekti vs Sensu</h2>\n<p>Why to write another application similar to <a href=\"https://sensuapp.org\" rel=\"nofollow\">Sensu</a>? Well\u2026 Here you have a comparative (some features are not available yet):</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Feature</th>\n<th>Sensu</th>\n<th>Kolekti</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Language</td>\n<td>Ruby</td>\n<td>Python</td>\n</tr>\n<tr><td>Database</td>\n<td>Redis</td>\n<td>Relational (Django ORM): Posgresql, MySQL, \u2026</td>\n</tr>\n<tr><td>Interface</td>\n<td>Uchiwa</td>\n<td>Uchiwa</td>\n</tr>\n<tr><td>License</td>\n<td>MIT</td>\n<td>MIT</td>\n</tr>\n<tr><td>Internal communications</td>\n<td>Redis</td>\n<td>Celery over RabbitMQ, Redis, Postgresql, \u2026</td>\n</tr>\n<tr><td>External communications</td>\n<td>RabbitMQ</td>\n<td>HTTP, HTTPS in near future</td>\n</tr>\n<tr><td>Min. Threads on client</td>\n<td>3 (keepalive, client, subscriptions)</td>\n<td>1 (subscriptions)</td>\n</tr>\n<tr><td>Keepalives</td>\n<td>Sent by clients</td>\n<td>Not needed. Any communication with clients is a keepalive.</td>\n</tr>\n<tr><td>Metrics</td>\n<td>Do not launch alerts</td>\n<td>May raise an alert</td>\n</tr>\n<tr><td>Checks</td>\n<td>Do not store metrics</td>\n<td>May store metrics</td>\n</tr>\n<tr><td>Clients register themselves</td>\n<td>Always</td>\n<td>Optional</td>\n</tr>\n<tr><td>Subscriptions</td>\n<td>Managed by clients</td>\n<td>Managed by clients, by server or both.</td>\n</tr>\n<tr><td>Nagios-compatible checks</td>\n<td>Yes</td>\n<td>No. It requires same format for checks and alerts.</td>\n</tr>\n<tr><td>Check failures</td>\n<td>Decided on client</td>\n<td>Decided on server</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 1779275, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 00:49:06 2020"}