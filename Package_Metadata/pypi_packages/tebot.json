{"info": {"author": "Altertech", "author_email": "div@altertech.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "# TeBot - Telegram bot library for Python and humans\n\nThe goal is to to keep it simple.\n\n<img src=\"https://img.shields.io/pypi/v/tebot.svg\" />\n<img src=\"https://img.shields.io/badge/license-MIT-green.svg\" />\n<img src=\"https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8-blue.svg\" />\n\nDemo (sometimes may not work): [@demo_tebot](https://telegram.me/demo_tebot)\n\n## How to install\n\n```shell\npip3 install tebot\n```\n\n## How to use\n\n### Start bot\n\nIf your project uses [neotasker](https://github.com/alttch/neotasker)\n\n```python\nfrom tebot import TeBot\n\n# delay - delay between pollings, must be specified\nmybot = TeBot(delay=2)\n# obtain token from https://telegram.me/BotFather\nmybot.set_token('botsecrettoken')\n# optionally - load previous state\nimport json\nwith open('bot-state.json') as fh:\n    mybot.load(json.loads(fh.read()))\n# start bot\nmybot.start()\n```\n\nIf it doesn't:\n\n```python\nfrom neotasker import task_supervisor\nfrom tebot import TeBot\n\ntask_supervisor.create_aloop('default', default=True)\ntask_supervisor.start()\nmybot = TeBot(delay=2)\nmybot.set_token('botsecrettoken')\nmybot.start()\n```\n\n(refer to **neotasker** documentation for more info)\n\n### Stop bot\n\n```python\nmybot.stop()\n# if your project doesn't use neotasker\ntask_supervisor.stop()\n# optionally - save bot state\nwith open('bot-state.json', 'w') as fh:\n    fh.write(json.dumps(mybot.serialize()))\n```\n\n### Send messages\n\n```python\n# text\nmybot.send(text='hello world', chat_id=chat_id)\n# files\nwith open('image.jpg', 'rb') as fh:\n    mybot.send(media=fh.read(), chat_id=chat_id)\n```\n\nIf message is being sent from the handler and *chat_id* is not specified,\ncurrent chat ID is used:\n\n```python\n@mybot.route(path='/start')\ndef start(**kwargs):\n    mybot.send('bot started')\n```\n\n### Download files\n\n```python\ndef somehandler(**kwargs):\n    payload = kwargs.get('payload')\n    if 'document' in payload:\n        try:\n            content = mybot.get_file_content(payload['document'].get('file_id'))\n            # process file content\n        except:\n            # unable to download file\n```\n\n### High-level API: routes\n\n**TeBot** has flask-style routes, which may be registered either by calling\n\n```python\n    mybot.register_route(fn, path, methods)\n```\n\nor with function decorator:\n\n```python\n# message handler. can be only one, registered to handle all regular messages\n@mybot.route(methods='message')\ndef my_message(chat_id, text, **kwargs):\n    # some code\n\n# command handler for /start and /help\n@mybot.route(path=['/start', '/help'])\ndef start(**kwargs):\n    mybot.send('got HELP command')\n\n# command and callback query handler\n@mybot.route(methods='*')\ndef default_cmd_handler(path, **kwargs):\n    mybot.send(f'command not implemented: {path}')\n```\n\n#### Route parameters\n\n* **path** command path, can be string or list/tuple for multiple commands\n\n* **methods** can be either a string or a list/tuple. Valid values are:\n  \"message\", \"command\" (default if no methods specified) and\n  \"query\" / \"callback_query\". If \"\\*\" specified, the method is registered for\n  both commands and callback queries\n\n\n#### Handler kwargs\n\nThe following kwargs are sent to registered handlers:\n\n* **text** message text (only for message handler)\n\n* **path** command path (e.g. \"/select\" for \"/select \\* from data\")\n\n* **query_string** command query string (e.g. \"\\* from data\" for the above\n  example)\n\n* **chat_id** current chat id\n\n* **query_id** callback query id, if handler is executed as a callback query\n  handler\n\n* **payload** full request payload\n\n* **method** \"command\" or \"query\" for callback query\n\n#### Handler return data\n\n* If command is handled, the handler may return nothing\n\n* If callback query is handled, the handler may return dict, which is used as a\n  payload for the callback query answer (e.g. include \"url\", \"show_alert\" etc,\n  see Telegram Bot API for more details)\n\n### Low-level API: handlers\n\nOverride class methods:\n\n* **handle_message** handle regular messages\n\n* **handle_command** handle commands (starting\n  with '/')\n\n* **handle_query** handle callback queries\n\n* **on_message** override to implement advanced message handling\n\n* **on_query** override to implement advanced callback query handling\n\n## Bot options\n\n```python\nmybot.timeout = 5 # set Telegram API timeout (default: 10 sec)\nmybot.retry_interval = 1 # if API command fails, re-send it in 1 second\n                         # (default: None, don't re-send)\n```\n\n## Web hooks\n\nTo use web hooks, init bot object, **but don't start it**. Use\n*process_update(payload)* method to process webhook payloads.\n\nTeBot doesn't have own web server module, you may use any available.\n\nTo register webhook, use *set_webhook* bot object method (args are the same as\nfor https://core.telegram.org/bots/api#setwebhook)\n\nTo delete webhook, use *delete_webhook* bot object method (no args required).\n\n## Everything else\n\nRefer to function pydoc for more info.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alttch/tebot", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tebot", "package_url": "https://pypi.org/project/tebot/", "platform": "", "project_url": "https://pypi.org/project/tebot/", "project_urls": {"Homepage": "https://github.com/alttch/tebot"}, "release_url": "https://pypi.org/project/tebot/0.2.6/", "requires_dist": null, "requires_python": "", "summary": "Telegram bot library for Python and humans", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TeBot - Telegram bot library for Python and humans</h1>\n<p>The goal is to to keep it simple.</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cdb28b6be722c55900d0a177b9732db340bef0f5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7465626f742e737667\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7db8d43223f55fabe102838639f47819829c1ca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e93434e60561c68404232b58ce916917e8a3e2d7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e36253230253743253230332e37253230253743253230332e382d626c75652e737667\">\n<p>Demo (sometimes may not work): <a href=\"https://telegram.me/demo_tebot\" rel=\"nofollow\">@demo_tebot</a></p>\n<h2>How to install</h2>\n<pre>pip3 install tebot\n</pre>\n<h2>How to use</h2>\n<h3>Start bot</h3>\n<p>If your project uses <a href=\"https://github.com/alttch/neotasker\" rel=\"nofollow\">neotasker</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tebot</span> <span class=\"kn\">import</span> <span class=\"n\">TeBot</span>\n\n<span class=\"c1\"># delay - delay between pollings, must be specified</span>\n<span class=\"n\">mybot</span> <span class=\"o\">=</span> <span class=\"n\">TeBot</span><span class=\"p\">(</span><span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># obtain token from https://telegram.me/BotFather</span>\n<span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">set_token</span><span class=\"p\">(</span><span class=\"s1\">'botsecrettoken'</span><span class=\"p\">)</span>\n<span class=\"c1\"># optionally - load previous state</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'bot-state.json'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n    <span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()))</span>\n<span class=\"c1\"># start bot</span>\n<span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>If it doesn't:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">neotasker</span> <span class=\"kn\">import</span> <span class=\"n\">task_supervisor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tebot</span> <span class=\"kn\">import</span> <span class=\"n\">TeBot</span>\n\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">create_aloop</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">mybot</span> <span class=\"o\">=</span> <span class=\"n\">TeBot</span><span class=\"p\">(</span><span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">set_token</span><span class=\"p\">(</span><span class=\"s1\">'botsecrettoken'</span><span class=\"p\">)</span>\n<span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>(refer to <strong>neotasker</strong> documentation for more info)</p>\n<h3>Stop bot</h3>\n<pre><span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n<span class=\"c1\"># if your project doesn't use neotasker</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n<span class=\"c1\"># optionally - save bot state</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'bot-state.json'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n    <span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()))</span>\n</pre>\n<h3>Send messages</h3>\n<pre><span class=\"c1\"># text</span>\n<span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"n\">chat_id</span><span class=\"p\">)</span>\n<span class=\"c1\"># files</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'image.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n    <span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">media</span><span class=\"o\">=</span><span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"n\">chat_id</span><span class=\"p\">)</span>\n</pre>\n<p>If message is being sent from the handler and <em>chat_id</em> is not specified,\ncurrent chat ID is used:</p>\n<pre><span class=\"nd\">@mybot</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/start'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s1\">'bot started'</span><span class=\"p\">)</span>\n</pre>\n<h3>Download files</h3>\n<pre><span class=\"k\">def</span> <span class=\"nf\">somehandler</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'payload'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"s1\">'document'</span> <span class=\"ow\">in</span> <span class=\"n\">payload</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">get_file_content</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s1\">'document'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'file_id'</span><span class=\"p\">))</span>\n            <span class=\"c1\"># process file content</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"c1\"># unable to download file</span>\n</pre>\n<h3>High-level API: routes</h3>\n<p><strong>TeBot</strong> has flask-style routes, which may be registered either by calling</p>\n<pre>    <span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">register_route</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n</pre>\n<p>or with function decorator:</p>\n<pre><span class=\"c1\"># message handler. can be only one, registered to handle all regular messages</span>\n<span class=\"nd\">@mybot</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"s1\">'message'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_message</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># some code</span>\n\n<span class=\"c1\"># command handler for /start and /help</span>\n<span class=\"nd\">@mybot</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'/start'</span><span class=\"p\">,</span> <span class=\"s1\">'/help'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s1\">'got HELP command'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># command and callback query handler</span>\n<span class=\"nd\">@mybot</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">default_cmd_handler</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'command not implemented: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h4>Route parameters</h4>\n<ul>\n<li>\n<p><strong>path</strong> command path, can be string or list/tuple for multiple commands</p>\n</li>\n<li>\n<p><strong>methods</strong> can be either a string or a list/tuple. Valid values are:\n\"message\", \"command\" (default if no methods specified) and\n\"query\" / \"callback_query\". If \"*\" specified, the method is registered for\nboth commands and callback queries</p>\n</li>\n</ul>\n<h4>Handler kwargs</h4>\n<p>The following kwargs are sent to registered handlers:</p>\n<ul>\n<li>\n<p><strong>text</strong> message text (only for message handler)</p>\n</li>\n<li>\n<p><strong>path</strong> command path (e.g. \"/select\" for \"/select * from data\")</p>\n</li>\n<li>\n<p><strong>query_string</strong> command query string (e.g. \"* from data\" for the above\nexample)</p>\n</li>\n<li>\n<p><strong>chat_id</strong> current chat id</p>\n</li>\n<li>\n<p><strong>query_id</strong> callback query id, if handler is executed as a callback query\nhandler</p>\n</li>\n<li>\n<p><strong>payload</strong> full request payload</p>\n</li>\n<li>\n<p><strong>method</strong> \"command\" or \"query\" for callback query</p>\n</li>\n</ul>\n<h4>Handler return data</h4>\n<ul>\n<li>\n<p>If command is handled, the handler may return nothing</p>\n</li>\n<li>\n<p>If callback query is handled, the handler may return dict, which is used as a\npayload for the callback query answer (e.g. include \"url\", \"show_alert\" etc,\nsee Telegram Bot API for more details)</p>\n</li>\n</ul>\n<h3>Low-level API: handlers</h3>\n<p>Override class methods:</p>\n<ul>\n<li>\n<p><strong>handle_message</strong> handle regular messages</p>\n</li>\n<li>\n<p><strong>handle_command</strong> handle commands (starting\nwith '/')</p>\n</li>\n<li>\n<p><strong>handle_query</strong> handle callback queries</p>\n</li>\n<li>\n<p><strong>on_message</strong> override to implement advanced message handling</p>\n</li>\n<li>\n<p><strong>on_query</strong> override to implement advanced callback query handling</p>\n</li>\n</ul>\n<h2>Bot options</h2>\n<pre><span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"c1\"># set Telegram API timeout (default: 10 sec)</span>\n<span class=\"n\">mybot</span><span class=\"o\">.</span><span class=\"n\">retry_interval</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"c1\"># if API command fails, re-send it in 1 second</span>\n                         <span class=\"c1\"># (default: None, don't re-send)</span>\n</pre>\n<h2>Web hooks</h2>\n<p>To use web hooks, init bot object, <strong>but don't start it</strong>. Use\n<em>process_update(payload)</em> method to process webhook payloads.</p>\n<p>TeBot doesn't have own web server module, you may use any available.</p>\n<p>To register webhook, use <em>set_webhook</em> bot object method (args are the same as\nfor <a href=\"https://core.telegram.org/bots/api#setwebhook\" rel=\"nofollow\">https://core.telegram.org/bots/api#setwebhook</a>)</p>\n<p>To delete webhook, use <em>delete_webhook</em> bot object method (no args required).</p>\n<h2>Everything else</h2>\n<p>Refer to function pydoc for more info.</p>\n\n          </div>"}, "last_serial": 6625688, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "812522ecbbdcbb5431f395812fa7a509", "sha256": "0a621f7da81ff720db21e6c6560d349bf3b72bc93f840aefbc57cd7bd39b543c"}, "downloads": -1, "filename": "tebot-0.0.1.tar.gz", "has_sig": false, "md5_digest": "812522ecbbdcbb5431f395812fa7a509", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125875, "upload_time": "2020-01-19T22:42:43", "upload_time_iso_8601": "2020-01-19T22:42:43.810456Z", "url": "https://files.pythonhosted.org/packages/a1/de/22189f22dd6b993124a4df787dd83b81b87e34b5692042b44b3064aa94cb/tebot-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "82f1e1c9f0b4740af46267805cf390b7", "sha256": "5bc6d42e431c1cab503bfaf611f30bcaaa3ad46bd5e404e81179ac148af43579"}, "downloads": -1, "filename": "tebot-0.0.2.tar.gz", "has_sig": false, "md5_digest": "82f1e1c9f0b4740af46267805cf390b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126233, "upload_time": "2020-01-19T23:09:05", "upload_time_iso_8601": "2020-01-19T23:09:05.703269Z", "url": "https://files.pythonhosted.org/packages/4b/21/908917826f03b385b96c1a9cd7c5202d6a54b755719061d070fee6d85e9b/tebot-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c71b5b55f731bb442b93ecd08ad6ec1b", "sha256": "83e0bc3e2ae8cc9c7299b1491f5f8758ebc928b9745db1480e08ed6fd67cf1fe"}, "downloads": -1, "filename": "tebot-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c71b5b55f731bb442b93ecd08ad6ec1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126667, "upload_time": "2020-01-20T00:53:36", "upload_time_iso_8601": "2020-01-20T00:53:36.833275Z", "url": "https://files.pythonhosted.org/packages/a7/30/05438e41a94244157f4960bcd78585d7b2429ef4cf38b86b5796bc020ab3/tebot-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "228c052e12de369a01799775e719fb65", "sha256": "d0a472113497313c1d13064140e7996323da40d5e398aac55054e970a2eb6ebb"}, "downloads": -1, "filename": "tebot-0.0.4.tar.gz", "has_sig": false, "md5_digest": "228c052e12de369a01799775e719fb65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126790, "upload_time": "2020-01-20T01:10:57", "upload_time_iso_8601": "2020-01-20T01:10:57.815947Z", "url": "https://files.pythonhosted.org/packages/a9/a2/7576e18aa282a48af3c5f56bed89c2c2eea07b80358c2144d0c805d0ed2b/tebot-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "b0e5490af41fe841a29e9b582f3085a5", "sha256": "dfb8c2c9bedd134f3fce07f41b6ad97ce987edf8c05a28c2fd3a18801e4ad086"}, "downloads": -1, "filename": "tebot-0.0.5.tar.gz", "has_sig": false, "md5_digest": "b0e5490af41fe841a29e9b582f3085a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126788, "upload_time": "2020-01-20T02:02:26", "upload_time_iso_8601": "2020-01-20T02:02:26.973456Z", "url": "https://files.pythonhosted.org/packages/7b/06/aede7ec9845d71f1ff24a40b68403ac25bed7016a7bf6d19bb720acfab33/tebot-0.0.5.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "d4a5f5a8cd372c3b5b04866f6e92588b", "sha256": "b857f68757059b2a561a3edce3681decca4cbe6d77b621b31d0b153e00c990ff"}, "downloads": -1, "filename": "tebot-0.0.7.tar.gz", "has_sig": false, "md5_digest": "d4a5f5a8cd372c3b5b04866f6e92588b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126867, "upload_time": "2020-01-20T02:31:58", "upload_time_iso_8601": "2020-01-20T02:31:58.804254Z", "url": "https://files.pythonhosted.org/packages/48/4e/d2b4679c8681fa3c95ab974eadf3432b98d50e68f6569cb8236e62a8c324/tebot-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "8e03703b650f43b29cecd7a65718d09a", "sha256": "da5c64f006cdbe9197ac6fad0a5f6767b55b536e9666dbbc4a2ec6dd1a269984"}, "downloads": -1, "filename": "tebot-0.0.8.tar.gz", "has_sig": false, "md5_digest": "8e03703b650f43b29cecd7a65718d09a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126895, "upload_time": "2020-01-20T11:05:16", "upload_time_iso_8601": "2020-01-20T11:05:16.434805Z", "url": "https://files.pythonhosted.org/packages/c7/57/72369d157333082450eb74f4f9e9d38967240323f32cabf1a450fa974a1b/tebot-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "0be519a7ee9962b9b9479af85c0e7484", "sha256": "39292987b12db680f47dfb59926fdf2c05a6084d3e9fd72c34f60f943d72e427"}, "downloads": -1, "filename": "tebot-0.0.9.tar.gz", "has_sig": false, "md5_digest": "0be519a7ee9962b9b9479af85c0e7484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5836, "upload_time": "2020-01-20T16:51:28", "upload_time_iso_8601": "2020-01-20T16:51:28.781575Z", "url": "https://files.pythonhosted.org/packages/ba/c1/82666abfe869d4219d5213f1c160dee66ff99b4050e622d718596c829521/tebot-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3db0bf3e1a35e35bb3c213782e458889", "sha256": "4bc4d5a4c677da66f7321a5057bd5f936e0a950c547e89233bf84c0ce20c522d"}, "downloads": -1, "filename": "tebot-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3db0bf3e1a35e35bb3c213782e458889", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5833, "upload_time": "2020-01-20T16:51:47", "upload_time_iso_8601": "2020-01-20T16:51:47.956119Z", "url": "https://files.pythonhosted.org/packages/00/c2/350278c794b13b85f589b4ca74498686e05603b96e4461b0662586328c35/tebot-0.1.0.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ab1a0a1d9f2909a3b2545ac63e0cbaca", "sha256": "bc2a9dd4bd62d5a9c292bd98bc9a2b3310bc454255910342a7ed52b5e2c29f20"}, "downloads": -1, "filename": "tebot-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ab1a0a1d9f2909a3b2545ac63e0cbaca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6006, "upload_time": "2020-01-20T17:47:35", "upload_time_iso_8601": "2020-01-20T17:47:35.925884Z", "url": "https://files.pythonhosted.org/packages/a4/d0/62e0dbd4c8d20613ec6c219648ab1ba40bf85b072be2c2c6642b6b3d9ff4/tebot-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "f36d6ebc9f5fa47e1acde0d80205542e", "sha256": "b70213fdf92ec82f03d98069739f9286fc585f22a38ab17e28242a993444d085"}, "downloads": -1, "filename": "tebot-0.1.4.tar.gz", "has_sig": false, "md5_digest": "f36d6ebc9f5fa47e1acde0d80205542e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6009, "upload_time": "2020-01-20T17:52:50", "upload_time_iso_8601": "2020-01-20T17:52:50.306493Z", "url": "https://files.pythonhosted.org/packages/39/ff/d203b0260bddbdb1fb56a0d08c6321ac403fcfd7252b9ebca1e582d74a5e/tebot-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "a62b28840ec03ccbc47c3f39ff06b872", "sha256": "bd44aa97a373bab033d74e0699b6a6fa93c118ccc7e0118cf9e4390f693f615f"}, "downloads": -1, "filename": "tebot-0.1.5.tar.gz", "has_sig": false, "md5_digest": "a62b28840ec03ccbc47c3f39ff06b872", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6073, "upload_time": "2020-01-20T21:40:56", "upload_time_iso_8601": "2020-01-20T21:40:56.252890Z", "url": "https://files.pythonhosted.org/packages/ca/09/ca8a3b6e410a2cb9cd3835e6fb0a3631dcfbcec835b67734cbaf191dc338/tebot-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fec7aa79bc46ee95256a54f2d6f1ea57", "sha256": "a545d3bc0b3240dd32cd753494b6900219ad440ee5c5d62685606e3dba1c5a77"}, "downloads": -1, "filename": "tebot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fec7aa79bc46ee95256a54f2d6f1ea57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7093, "upload_time": "2020-01-21T00:03:03", "upload_time_iso_8601": "2020-01-21T00:03:03.149537Z", "url": "https://files.pythonhosted.org/packages/08/61/2782f3648b0e88e57724be0fe4645d7a760c5b229c89d2208c070d40a43d/tebot-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5260ebe52cd9538073bb6ddae9a78794", "sha256": "b5d01334b4b970dbd9e186dfac12a83f8a43684de9dab10c88e2989a973af011"}, "downloads": -1, "filename": "tebot-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5260ebe52cd9538073bb6ddae9a78794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7087, "upload_time": "2020-01-21T00:31:50", "upload_time_iso_8601": "2020-01-21T00:31:50.877159Z", "url": "https://files.pythonhosted.org/packages/01/08/838714d7685d86e6856c3485281322459949a4a23490d35115527d9120d8/tebot-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "4461c16378ec6aba36a4b58e7a2ed346", "sha256": "42e228d6cc3fce2a257f7525912c1715e6bdce10398e20f7bb11cfc4e42a00d2"}, "downloads": -1, "filename": "tebot-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4461c16378ec6aba36a4b58e7a2ed346", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7092, "upload_time": "2020-01-21T10:15:41", "upload_time_iso_8601": "2020-01-21T10:15:41.942590Z", "url": "https://files.pythonhosted.org/packages/8d/f2/2a681f419510db09c6b0713bba0ba7aaf55269c6946710384f1d50fc55b8/tebot-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "cf29426de0bc37983f87dffc84bd26e8", "sha256": "c6299b979126d35fb82baaf8a1775a350a002b48646d9813b25f66e0ead9f62f"}, "downloads": -1, "filename": "tebot-0.2.3.tar.gz", "has_sig": false, "md5_digest": "cf29426de0bc37983f87dffc84bd26e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7418, "upload_time": "2020-01-22T19:45:56", "upload_time_iso_8601": "2020-01-22T19:45:56.230543Z", "url": "https://files.pythonhosted.org/packages/b7/46/dacfe548fe0eedf597d764728b4365f2dee62af29ee3d1bbb24278bc7b4b/tebot-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "71e5645b29151c2b072f681d1ef5e6b4", "sha256": "5acf5581d405c719e3584e1f4da0cbe5b716f1466976d3e08c0d59be6d903da1"}, "downloads": -1, "filename": "tebot-0.2.4.tar.gz", "has_sig": false, "md5_digest": "71e5645b29151c2b072f681d1ef5e6b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7469, "upload_time": "2020-01-23T02:09:12", "upload_time_iso_8601": "2020-01-23T02:09:12.924909Z", "url": "https://files.pythonhosted.org/packages/66/48/56e21da2fd0920031293a1a9330d251a4a329e6836d6f8644e54a69be0ca/tebot-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "1800c6ec69cd1a85f43026618524c01f", "sha256": "701c731e21b96ea54ce8d30e23394cb3322aa22a20adc893f11253482df09297"}, "downloads": -1, "filename": "tebot-0.2.5.tar.gz", "has_sig": false, "md5_digest": "1800c6ec69cd1a85f43026618524c01f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7476, "upload_time": "2020-01-24T00:49:48", "upload_time_iso_8601": "2020-01-24T00:49:48.906684Z", "url": "https://files.pythonhosted.org/packages/2d/4a/04eeb8f867a91367fbd8cb3f1bc38c8c5108844f5b3819734eddbbe29f7f/tebot-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "b65af952e0a2f02ae9812917f8c1a2cb", "sha256": "0788d6ebe6a140ca7130900e3e9e574adc8daa79738a13e329dbb5d5d0b8562e"}, "downloads": -1, "filename": "tebot-0.2.6.tar.gz", "has_sig": false, "md5_digest": "b65af952e0a2f02ae9812917f8c1a2cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7657, "upload_time": "2020-02-13T20:02:54", "upload_time_iso_8601": "2020-02-13T20:02:54.070110Z", "url": "https://files.pythonhosted.org/packages/2b/32/7af2728b5c72499361316b0c2ba6552b58b3941aab609494c72520a3f534/tebot-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b65af952e0a2f02ae9812917f8c1a2cb", "sha256": "0788d6ebe6a140ca7130900e3e9e574adc8daa79738a13e329dbb5d5d0b8562e"}, "downloads": -1, "filename": "tebot-0.2.6.tar.gz", "has_sig": false, "md5_digest": "b65af952e0a2f02ae9812917f8c1a2cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7657, "upload_time": "2020-02-13T20:02:54", "upload_time_iso_8601": "2020-02-13T20:02:54.070110Z", "url": "https://files.pythonhosted.org/packages/2b/32/7af2728b5c72499361316b0c2ba6552b58b3941aab609494c72520a3f534/tebot-0.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:04 2020"}