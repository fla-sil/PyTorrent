{"info": {"author": "Guillaume Paulet", "author_email": "guillaume.paulet@giome.fr", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: Public Domain", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://raw.githubusercontent.com/ducdetronquito/scalpl/master/assets/scalpl.png\n    :target: https://github.com/ducdetronquito/scalpl\n\nScalpl\n======\n\n.. image:: https://img.shields.io/badge/license-public%20domain-ff69b4.svg\n    :target: https://github.com/ducdetronquito/scalpl#license\n\n.. image:: https://img.shields.io/badge/coverage-100%25-green.svg\n    :target: #\n\n.. image:: https://img.shields.io/badge/pypi-v0.3.0-blue.svg\n    :target: https://pypi.python.org/pypi/scalpl/\n\n.. image:: https://travis-ci.org/ducdetronquito/scalpl.svg?branch=master\n     :target: https://travis-ci.org/ducdetronquito/scalpl\n\n\nOutline\n~~~~~~~\n\n1. `Overview <https://github.com/ducdetronquito/scalpl#overview>`_\n2. `Benefits <https://github.com/ducdetronquito/scalpl#benefits>`_\n3. `Installation <https://github.com/ducdetronquito/scalpl#installation>`_\n4. `Usage <https://github.com/ducdetronquito/scalpl#usage>`_\n5. `Benchmark <https://github.com/ducdetronquito/scalpl#benchmark>`_\n6. `Frequently Asked Questions <https://github.com/ducdetronquito/scalpl#frequently-asked-questions>`_\n7. `How to Contribute <https://github.com/ducdetronquito/scalpl#how-to-contribute>`_\n8. `License <https://github.com/ducdetronquito/scalpl#license>`_\n\n\nOverview\n~~~~~~~~\n\n\n**Scalpl** provides a **lightweight wrapper** that helps you to operate\non **nested dictionaries** seamlessly **through the built-in** ``dict``\n**API**, by using dot-separated string keys.\n\nIt's not a drop-in replacement for your dictionnaries, just syntactic\nsugar to avoid ``this['annoying']['kind']['of']['things']`` and\n``prefer['a.different.approach']``.\n\nNo conversion cost, a thin computation overhead: that's **Scalpl** in a\nnutshell.\n\n\nBenefits\n~~~~~~~~\n\nThere are a lot of good libraries to operate on nested dictionaries,\nsuch as `Addict <https://github.com/mewwts/addict>`_ or \n`Box <https://github.com/cdgriffith/Box>`_ , but if you give **Scalpl**\na try, you will find it:\n\n* \ud83d\ude80 Powerful as the standard dict API\n* \u26a1 Lightweight\n* \ud83d\udc4c Well tested\n\n\nInstallation\n~~~~~~~~~~~~\n\n**Scalpl** is a Python3 library that you can install via ``pip``\n\n.. code:: sh\n\n    pip3 install scalpl\n\n\nUsage\n~~~~~\n\n**Scalpl** provides a simple class named **Cut** that wraps around your dictionary\nand handles operations on nested ``dict`` and that can cut accross ``list`` item.\n\nThis wrapper strictly follows the standard ``dict``\n`API <https://docs.python.org/3/library/stdtypes.html#dict>`_, which\nmeans you can operate seamlessly on ``dict``,\n``collections.defaultdict`` or ``collections.OrderedDict`` by using their methods\nwith dot-separated keys.\n \nLet's see what it looks like with an example ! \ud83d\udc47\n\n.. code:: python\n\n    from scalpl import Cut\n\n    data = {\n        'pokemons': [\n            {\n                'name': 'Bulbasaur',\n                'type': ['Grass', 'Poison'],\n                'category': 'Seed',\n                'ability': 'Overgrow'\n            },\n            {   \n                'name': 'Charmander',\n                'type': 'Fire',\n                'category': 'Lizard',\n                'ability': 'Blaze',\n            },\n            {\n                'name': 'Squirtle',\n                'type': 'Water',\n                'category': 'Tiny Turtle',\n                'ability': 'Torrent',\n            }\n        ],\n        'trainers': [\n            {\n                'name': 'Ash',\n                'hometown': 'Pallet Town'\n            }\n        ]\n    }\n    # Just wrap your data, and you're ready to go deeper !\n    proxy = Cut(data)\n\nYou can use the built-in ``dict`` API to access its values.\n\n.. code:: python\n\n    proxy['pokemons[0].name']\n    # 'Bulbasaur'\n    proxy.get('pokemons[1].sex', 'Unknown')\n    # 'Unknown'\n    'trainers[0].hometown' in proxy\n    # True\n\nBy default, **Scalpl** uses dot as a key separator, but you are free to\nuse a different character that better suits your needs.\n\n.. code:: python\n\n    # You just have to provide one when you wrap your data.\n    proxy = Cut(data, sep='->')\n    # Yarrr!\n    proxy['pokemons[0]->name']\n\nYou can also easily create or update any key/value pair.\n\n.. code:: python\n\n    proxy['pokemons[1].weaknesses'] = ['Ground', 'Rock', 'Water']\n    proxy['pokemons[1].weaknesses']\n    # ['Ground', 'Rock', 'Water']\n    proxy.update({\n        'trainers[0].region': 'Kanto',\n    })\n\n\nFollowing its purpose in the standard API, the *setdefault* method allows\nyou to create any missing dictionary when you try to access a nested key.\n\n.. code:: python\n\n    proxy.setdefault('pokemons[2].moves.Scratch.power', 40)\n    # 40\n\n\nAnd it is still possible to iterate over your data.\n\n.. code:: python\n\n    proxy.items()\n    # [('pokemons', [...]), ('trainers', [...])]\n    proxy.keys()\n    # ['pokemons', 'trainers']\n    proxy.values()\n    # [[...], [...]]\n\nBy the way, if you have to operate on a list of dictionaries, the\n``Cut.all`` method is what you are looking for.\n\n.. code:: python\n\n    # Let's teach these pokemons some sick moves !\n    for pokemon in proxy.all('pokemons'):\n        pokemon.setdefault('moves.Scratch.power', 40)\n\nAlso, you can remove a specific or an arbitrary key/value pair.\n\n.. code:: python\n\n    proxy.pop('pokemons[0].category')\n    # 'Seed'\n    proxy.popitem()\n    # ('trainers', [...])\n    del proxy['pokemons[1].type']\n\nBecause **Scalpl** is only a wrapper around your data, it means you can\nget it back at will without any conversion cost. If you use an external\nAPI that operates on dictionary, it will just work.\n\n.. code:: python\n\n    import json\n    json.dumps(proxy.data)\n    # \"{'pokemons': [...]}\"\n\nFinally, you can retrieve a shallow copy of the inner dictionary or\nremove all keys.\n\n.. code:: python\n\n    shallow_copy = proxy.copy()\n\n    proxy.clear()\n\n\nBenchmark\n~~~~~~~~~\n\nThis humble benchmark is an attempt to give you an overview of the performance\nof `Scalpl <https://github.com/ducdetronquito/scalpl>`_ compared to `Addict <https://github.com/mewwts/addict>`_,\n`Box <https://github.com/cdgriffith/Box>`_ and the built-in ``dict``.\n\nIt will summarize the *number of operations per second* that each library is \nable to perform on a portion of the JSON dump of the `Python subreddit main page <https://www.reddit.com/r/Python.json>`_.\n\nYou can run this benchmark on your machine with the following command:\n\n    python3 ./benchmarks/performance_comparison.py\n\nHere are the results obtained on an Intel Core i5-7500U CPU (2.50GHz) with **Python 3.6.4**.\n\n\n**Addict** 2.2.1::\n\n    instanciate:-------- 271,132  ops per second.\n    get:---------------- 276,090  ops per second.\n    get through list:--- 293,773  ops per second.\n    set:---------------- 300,324  ops per second.\n    set through list:--- 282,149  ops per second.\n\n\n**Box** 3.4.2::\n\n    instanciate:--------- 4,093,439  ops per second.\n    get:-----------------   957,069  ops per second.\n    get through list:----   164,013  ops per second.\n    set:-----------------   900,466  ops per second.\n    set through list:----   165,522  ops per second.\n\n\n**Scalpl** latest::\n\n    instanciate:-------- 183,879,865  ops per second.\n    get:----------------  14,941,355  ops per second.\n    get through list:---  14,175,349  ops per second.\n    set:----------------  11,320,968  ops per second.\n    set through list:---  11,956,001  ops per second.\n\n\n**dict**::\n\n    instanciate:---------  37,816,714  ops per second.\n    get:-----------------  84,317,032  ops per second.\n    get through list:----  62,480,474  ops per second.\n    set:----------------- 146,484,375  ops per second.\n    set through list :--- 122,473,974  ops per second.\n\n\nAs a conclusion and despite being an order of magniture slower than the built-in\n``dict``, **Scalpl** is faster than Box and Addict by an order of magnitude for any operations.\nBesides, the gap increase in favor of **Scalpl** when wrapping large dictionaries.\n\nKeeping in mind that this benchmark may vary depending on your use-case, it is very unlikely that\n**Scalpl** will become a bottleneck of your application.\n\n\nFrequently Asked Questions:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* **What if my keys contain dots ?**\n    If your keys contain a lot of dots, you should use an other\n    key separator when wrapping your data::\n\n        proxy = Cut(data, sep='->')\n        proxy['computer->network->127.0.0.1']\n\n    Otherwise, split your key in two part::\n\n        proxy = Cut(data)\n        proxy['computer.network']['127.0.0.1']\n\n* **What if my keys contain spaces ?**::\n    \n    proxy = Cut(data)\n    proxy['it works perfectly'] = 'fine'\n\n\nHow to Contribute\n~~~~~~~~~~~~~~~~~\n\nContributions are welcomed and anyone can feel free to submit a patch, report a bug or ask for a feature. Please open an issue first in order to encourage and keep tracks of potential discussions \u270d\ufe0f\n\n\nLicense\n~~~~~~~\n\n**Scalpl** is released into the **Public Domain**. \ud83c\udf89\n\nPs: If we meet some day, and you think this small stuff worths it, you\ncan give me a beer, a coffee or a high-five in return: I would be really\nhappy to share a moment with you ! \ud83c\udf7b", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/ducdetronquito/scalpl/archive/0.3.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ducdetronquito/scalpl", "keywords": "dict,nested,proxy,traversable,dictionary,box,addict,munch,scalpl,scalpel,wrapper", "license": "Public Domain", "maintainer": "", "maintainer_email": "", "name": "scalpl", "package_url": "https://pypi.org/project/scalpl/", "platform": "", "project_url": "https://pypi.org/project/scalpl/", "project_urls": {"Download": "https://github.com/ducdetronquito/scalpl/archive/0.3.0.tar.gz", "Homepage": "https://github.com/ducdetronquito/scalpl"}, "release_url": "https://pypi.org/project/scalpl/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "A lightweight wrapper to operate on nested dictionaries seamlessly.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/ducdetronquito/scalpl\" rel=\"nofollow\"><img alt=\"https://raw.githubusercontent.com/ducdetronquito/scalpl/master/assets/scalpl.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60fb8a70c23a30deb16bf30eb0f690235108f0c9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f647563646574726f6e717569746f2f7363616c706c2f6d61737465722f6173736574732f7363616c706c2e706e67\"></a>\n<div id=\"scalpl\">\n<h2>Scalpl</h2>\n<a href=\"https://github.com/ducdetronquito/scalpl#license\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/license-public%20domain-ff69b4.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b30810b6a8dbff278f72d36758b92e16d9995004/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d7075626c6963253230646f6d61696e2d6666363962342e737667\"></a>\n<a href=\"#\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/coverage-100%25-green.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5fb2a969fc838da897b1188eda6dc0ca8f283d4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d677265656e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/scalpl/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/pypi-v0.3.0-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f0a1204a2007ff9b553f310cd8e7c81ffc401de/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707970692d76302e332e302d626c75652e737667\"></a>\n<a href=\"https://travis-ci.org/ducdetronquito/scalpl\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ducdetronquito/scalpl.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d420f0e8b45947cc2b1d3a291ac682bf21a5c8a/68747470733a2f2f7472617669732d63692e6f72672f647563646574726f6e717569746f2f7363616c706c2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"outline\">\n<h3>Outline</h3>\n<ol>\n<li><a href=\"https://github.com/ducdetronquito/scalpl#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"https://github.com/ducdetronquito/scalpl#benefits\" rel=\"nofollow\">Benefits</a></li>\n<li><a href=\"https://github.com/ducdetronquito/scalpl#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"https://github.com/ducdetronquito/scalpl#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"https://github.com/ducdetronquito/scalpl#benchmark\" rel=\"nofollow\">Benchmark</a></li>\n<li><a href=\"https://github.com/ducdetronquito/scalpl#frequently-asked-questions\" rel=\"nofollow\">Frequently Asked Questions</a></li>\n<li><a href=\"https://github.com/ducdetronquito/scalpl#how-to-contribute\" rel=\"nofollow\">How to Contribute</a></li>\n<li><a href=\"https://github.com/ducdetronquito/scalpl#license\" rel=\"nofollow\">License</a></li>\n</ol>\n</div>\n<div id=\"id1\">\n<h3>Overview</h3>\n<p><strong>Scalpl</strong> provides a <strong>lightweight wrapper</strong> that helps you to operate\non <strong>nested dictionaries</strong> seamlessly <strong>through the built-in</strong> <tt>dict</tt>\n<strong>API</strong>, by using dot-separated string keys.</p>\n<p>It\u2019s not a drop-in replacement for your dictionnaries, just syntactic\nsugar to avoid <tt><span class=\"pre\">this['annoying']['kind']['of']['things']</span></tt> and\n<tt><span class=\"pre\">prefer['a.different.approach']</span></tt>.</p>\n<p>No conversion cost, a thin computation overhead: that\u2019s <strong>Scalpl</strong> in a\nnutshell.</p>\n</div>\n<div id=\"id2\">\n<h3>Benefits</h3>\n<p>There are a lot of good libraries to operate on nested dictionaries,\nsuch as <a href=\"https://github.com/mewwts/addict\" rel=\"nofollow\">Addict</a> or\n<a href=\"https://github.com/cdgriffith/Box\" rel=\"nofollow\">Box</a> , but if you give <strong>Scalpl</strong>\na try, you will find it:</p>\n<ul>\n<li>\ud83d\ude80 Powerful as the standard dict API</li>\n<li>\u26a1 Lightweight</li>\n<li>\ud83d\udc4c Well tested</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>Installation</h3>\n<p><strong>Scalpl</strong> is a Python3 library that you can install via <tt>pip</tt></p>\n<pre>pip3 install scalpl\n</pre>\n</div>\n<div id=\"id4\">\n<h3>Usage</h3>\n<p><strong>Scalpl</strong> provides a simple class named <strong>Cut</strong> that wraps around your dictionary\nand handles operations on nested <tt>dict</tt> and that can cut accross <tt>list</tt> item.</p>\n<p>This wrapper strictly follows the standard <tt>dict</tt>\n<a href=\"https://docs.python.org/3/library/stdtypes.html#dict\" rel=\"nofollow\">API</a>, which\nmeans you can operate seamlessly on <tt>dict</tt>,\n<tt>collections.defaultdict</tt> or <tt>collections.OrderedDict</tt> by using their methods\nwith dot-separated keys.</p>\n<p>Let\u2019s see what it looks like with an example ! \ud83d\udc47</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scalpl</span> <span class=\"kn\">import</span> <span class=\"n\">Cut</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'pokemons'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Bulbasaur'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Grass'</span><span class=\"p\">,</span> <span class=\"s1\">'Poison'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'category'</span><span class=\"p\">:</span> <span class=\"s1\">'Seed'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'ability'</span><span class=\"p\">:</span> <span class=\"s1\">'Overgrow'</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Charmander'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Fire'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'category'</span><span class=\"p\">:</span> <span class=\"s1\">'Lizard'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'ability'</span><span class=\"p\">:</span> <span class=\"s1\">'Blaze'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Squirtle'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Water'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'category'</span><span class=\"p\">:</span> <span class=\"s1\">'Tiny Turtle'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'ability'</span><span class=\"p\">:</span> <span class=\"s1\">'Torrent'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s1\">'trainers'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Ash'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'hometown'</span><span class=\"p\">:</span> <span class=\"s1\">'Pallet Town'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"c1\"># Just wrap your data, and you're ready to go deeper !</span>\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">Cut</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>You can use the built-in <tt>dict</tt> API to access its values.</p>\n<pre><span class=\"n\">proxy</span><span class=\"p\">[</span><span class=\"s1\">'pokemons[0].name'</span><span class=\"p\">]</span>\n<span class=\"c1\"># 'Bulbasaur'</span>\n<span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'pokemons[1].sex'</span><span class=\"p\">,</span> <span class=\"s1\">'Unknown'</span><span class=\"p\">)</span>\n<span class=\"c1\"># 'Unknown'</span>\n<span class=\"s1\">'trainers[0].hometown'</span> <span class=\"ow\">in</span> <span class=\"n\">proxy</span>\n<span class=\"c1\"># True</span>\n</pre>\n<p>By default, <strong>Scalpl</strong> uses dot as a key separator, but you are free to\nuse a different character that better suits your needs.</p>\n<pre><span class=\"c1\"># You just have to provide one when you wrap your data.</span>\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">Cut</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'-&gt;'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Yarrr!</span>\n<span class=\"n\">proxy</span><span class=\"p\">[</span><span class=\"s1\">'pokemons[0]-&gt;name'</span><span class=\"p\">]</span>\n</pre>\n<p>You can also easily create or update any key/value pair.</p>\n<pre><span class=\"n\">proxy</span><span class=\"p\">[</span><span class=\"s1\">'pokemons[1].weaknesses'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Ground'</span><span class=\"p\">,</span> <span class=\"s1\">'Rock'</span><span class=\"p\">,</span> <span class=\"s1\">'Water'</span><span class=\"p\">]</span>\n<span class=\"n\">proxy</span><span class=\"p\">[</span><span class=\"s1\">'pokemons[1].weaknesses'</span><span class=\"p\">]</span>\n<span class=\"c1\"># ['Ground', 'Rock', 'Water']</span>\n<span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n    <span class=\"s1\">'trainers[0].region'</span><span class=\"p\">:</span> <span class=\"s1\">'Kanto'</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Following its purpose in the standard API, the <em>setdefault</em> method allows\nyou to create any missing dictionary when you try to access a nested key.</p>\n<pre><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s1\">'pokemons[2].moves.Scratch.power'</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"c1\"># 40</span>\n</pre>\n<p>And it is still possible to iterate over your data.</p>\n<pre><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n<span class=\"c1\"># [('pokemons', [...]), ('trainers', [...])]</span>\n<span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"c1\"># ['pokemons', 'trainers']</span>\n<span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n<span class=\"c1\"># [[...], [...]]</span>\n</pre>\n<p>By the way, if you have to operate on a list of dictionaries, the\n<tt>Cut.all</tt> method is what you are looking for.</p>\n<pre><span class=\"c1\"># Let's teach these pokemons some sick moves !</span>\n<span class=\"k\">for</span> <span class=\"n\">pokemon</span> <span class=\"ow\">in</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"s1\">'pokemons'</span><span class=\"p\">):</span>\n    <span class=\"n\">pokemon</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s1\">'moves.Scratch.power'</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n</pre>\n<p>Also, you can remove a specific or an arbitrary key/value pair.</p>\n<pre><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'pokemons[0].category'</span><span class=\"p\">)</span>\n<span class=\"c1\"># 'Seed'</span>\n<span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">popitem</span><span class=\"p\">()</span>\n<span class=\"c1\"># ('trainers', [...])</span>\n<span class=\"k\">del</span> <span class=\"n\">proxy</span><span class=\"p\">[</span><span class=\"s1\">'pokemons[1].type'</span><span class=\"p\">]</span>\n</pre>\n<p>Because <strong>Scalpl</strong> is only a wrapper around your data, it means you can\nget it back at will without any conversion cost. If you use an external\nAPI that operates on dictionary, it will just work.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"{'pokemons': [...]}\"</span>\n</pre>\n<p>Finally, you can retrieve a shallow copy of the inner dictionary or\nremove all keys.</p>\n<pre><span class=\"n\">shallow_copy</span> <span class=\"o\">=</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"id5\">\n<h3>Benchmark</h3>\n<p>This humble benchmark is an attempt to give you an overview of the performance\nof <a href=\"https://github.com/ducdetronquito/scalpl\" rel=\"nofollow\">Scalpl</a> compared to <a href=\"https://github.com/mewwts/addict\" rel=\"nofollow\">Addict</a>,\n<a href=\"https://github.com/cdgriffith/Box\" rel=\"nofollow\">Box</a> and the built-in <tt>dict</tt>.</p>\n<p>It will summarize the <em>number of operations per second</em> that each library is\nable to perform on a portion of the JSON dump of the <a href=\"https://www.reddit.com/r/Python.json\" rel=\"nofollow\">Python subreddit main page</a>.</p>\n<p>You can run this benchmark on your machine with the following command:</p>\n<blockquote>\npython3 ./benchmarks/performance_comparison.py</blockquote>\n<p>Here are the results obtained on an Intel Core i5-7500U CPU (2.50GHz) with <strong>Python 3.6.4</strong>.</p>\n<p><strong>Addict</strong> 2.2.1:</p>\n<pre>instanciate:-------- 271,132  ops per second.\nget:---------------- 276,090  ops per second.\nget through list:--- 293,773  ops per second.\nset:---------------- 300,324  ops per second.\nset through list:--- 282,149  ops per second.\n</pre>\n<p><strong>Box</strong> 3.4.2:</p>\n<pre>instanciate:--------- 4,093,439  ops per second.\nget:-----------------   957,069  ops per second.\nget through list:----   164,013  ops per second.\nset:-----------------   900,466  ops per second.\nset through list:----   165,522  ops per second.\n</pre>\n<p><strong>Scalpl</strong> latest:</p>\n<pre>instanciate:-------- 183,879,865  ops per second.\nget:----------------  14,941,355  ops per second.\nget through list:---  14,175,349  ops per second.\nset:----------------  11,320,968  ops per second.\nset through list:---  11,956,001  ops per second.\n</pre>\n<p><strong>dict</strong>:</p>\n<pre>instanciate:---------  37,816,714  ops per second.\nget:-----------------  84,317,032  ops per second.\nget through list:----  62,480,474  ops per second.\nset:----------------- 146,484,375  ops per second.\nset through list :--- 122,473,974  ops per second.\n</pre>\n<p>As a conclusion and despite being an order of magniture slower than the built-in\n<tt>dict</tt>, <strong>Scalpl</strong> is faster than Box and Addict by an order of magnitude for any operations.\nBesides, the gap increase in favor of <strong>Scalpl</strong> when wrapping large dictionaries.</p>\n<p>Keeping in mind that this benchmark may vary depending on your use-case, it is very unlikely that\n<strong>Scalpl</strong> will become a bottleneck of your application.</p>\n</div>\n<div id=\"id9\">\n<h3>Frequently Asked Questions:</h3>\n<ul>\n<li><dl>\n<dt><strong>What if my keys contain dots ?</strong></dt>\n<dd><p>If your keys contain a lot of dots, you should use an other\nkey separator when wrapping your data:</p>\n<pre>proxy = Cut(data, sep='-&gt;')\nproxy['computer-&gt;network-&gt;127.0.0.1']\n</pre>\n<p>Otherwise, split your key in two part:</p>\n<pre>proxy = Cut(data)\nproxy['computer.network']['127.0.0.1']\n</pre>\n</dd>\n</dl>\n</li>\n<li><p><strong>What if my keys contain spaces ?</strong>:</p>\n<pre>proxy = Cut(data)\nproxy['it works perfectly'] = 'fine'\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>How to Contribute</h3>\n<p>Contributions are welcomed and anyone can feel free to submit a patch, report a bug or ask for a feature. Please open an issue first in order to encourage and keep tracks of potential discussions \u270d\ufe0f</p>\n</div>\n<div id=\"id11\">\n<h3>License</h3>\n<p><strong>Scalpl</strong> is released into the <strong>Public Domain</strong>. \ud83c\udf89</p>\n<p>Ps: If we meet some day, and you think this small stuff worths it, you\ncan give me a beer, a coffee or a high-five in return: I would be really\nhappy to share a moment with you ! \ud83c\udf7b</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5884828, "releases": {"0.2.3": [{"comment_text": "", "digests": {"md5": "3e555773ed09cde5b860c4061b036240", "sha256": "0316bfcd3b72d7bfcfce05ce9d2a8687c6b04afeb222979c09e5874c60ff0269"}, "downloads": -1, "filename": "scalpl-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3e555773ed09cde5b860c4061b036240", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8063, "upload_time": "2017-05-26T20:30:53", "upload_time_iso_8601": "2017-05-26T20:30:53.596448Z", "url": "https://files.pythonhosted.org/packages/d9/84/e900922d1a1385ece4edc5e427c1828b774016dcd025728172c09cfaa418/scalpl-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "4511099626aa6552fff8f8d50d7ef5bb", "sha256": "6f1adddafa65eae54ba747f05e15103d31b7617482b4fad6b764856cd99a1c95"}, "downloads": -1, "filename": "scalpl-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4511099626aa6552fff8f8d50d7ef5bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10127, "upload_time": "2017-06-07T22:44:40", "upload_time_iso_8601": "2017-06-07T22:44:40.187003Z", "url": "https://files.pythonhosted.org/packages/23/14/4bea4a0922fbfb5096d71b1d3512f7e160e6f6af0aa3a2edb27d1e376738/scalpl-0.2.4-py3-none-any.whl", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "44d551dfd48e6b85f6d47dc395d9084b", "sha256": "893e293140d9716b0103a12cac6cfe096690b584b629f3504671c2b7d778515c"}, "downloads": -1, "filename": "scalpl-0.2.5.tar.gz", "has_sig": false, "md5_digest": "44d551dfd48e6b85f6d47dc395d9084b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6644, "upload_time": "2017-06-26T14:32:35", "upload_time_iso_8601": "2017-06-26T14:32:35.512863Z", "url": "https://files.pythonhosted.org/packages/b0/a9/cff0ada8a2b6eb794eaf92faffd9a4fb2286845f7cb4d9bcc971b77f4efa/scalpl-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "6fc4402da3dc2a21fe1800bf7a70ef2b", "sha256": "06113d6bcec0a77239754e6fb5bc6920f8fbc37c954acdb3320d552938efc986"}, "downloads": -1, "filename": "scalpl-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6fc4402da3dc2a21fe1800bf7a70ef2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5919, "upload_time": "2018-09-04T20:17:20", "upload_time_iso_8601": "2018-09-04T20:17:20.856981Z", "url": "https://files.pythonhosted.org/packages/29/a6/64d413e6b0dbffab30f09c5bfa8dadeaf7252afbb011d16dcd6c71c6c576/scalpl-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "619d3a2a8dd2be6f24624c11f98dc380", "sha256": "8078ebec893f60b60d3301011039eb512e73be6d91fbb3d78ea3b3eb3b907c63"}, "downloads": -1, "filename": "scalpl-0.2.6.tar.gz", "has_sig": false, "md5_digest": "619d3a2a8dd2be6f24624c11f98dc380", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6540, "upload_time": "2018-09-04T20:17:22", "upload_time_iso_8601": "2018-09-04T20:17:22.198088Z", "url": "https://files.pythonhosted.org/packages/4c/2f/735be75e9569850033fc87f682e92874b44c768e5ada0755a202e2ef19b3/scalpl-0.2.6.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a52488969ef4500e7c41e600bbeec5df", "sha256": "51d07d720d0f26bb70502e42297b45a63d6fa14ab1f9af1683ed64ab49db27f9"}, "downloads": -1, "filename": "scalpl-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a52488969ef4500e7c41e600bbeec5df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8415, "upload_time": "2019-08-08T11:19:41", "upload_time_iso_8601": "2019-08-08T11:19:41.262759Z", "url": "https://files.pythonhosted.org/packages/fe/c9/ac25ec1d4a5347629453916d1cbdac217b226486e87266b5d466fad595b9/scalpl-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a52488969ef4500e7c41e600bbeec5df", "sha256": "51d07d720d0f26bb70502e42297b45a63d6fa14ab1f9af1683ed64ab49db27f9"}, "downloads": -1, "filename": "scalpl-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a52488969ef4500e7c41e600bbeec5df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8415, "upload_time": "2019-08-08T11:19:41", "upload_time_iso_8601": "2019-08-08T11:19:41.262759Z", "url": "https://files.pythonhosted.org/packages/fe/c9/ac25ec1d4a5347629453916d1cbdac217b226486e87266b5d466fad595b9/scalpl-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:09 2020"}