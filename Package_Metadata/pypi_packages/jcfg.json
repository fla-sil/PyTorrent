{"info": {"author": "chkap", "author_email": "d47bc0@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# jcfg\n\njcfg is an easy-to-use json-based configuration tool for building python programs.\n\nSuppose that you want to develop an program that has three config options: a file path (type of string), an integer (type of int), and a float number. And also want to be able to load configs from a local file. Then, you can write code like this, with jcfg:\n\n```python\n# in file: my_program.py\nfrom jcfg import JsonCfg\n\ndef main():\n    cfg = JsonCfg({\n        'input_path': '',\n        'input_int': 0,\n        'input_float': 0.0\n    })\n    cfg.parse_args()\n\n    # do any work you want below\n    # you can get the input_path, input_int, or input_float like this:\n\n    res = cfg.input_int + cfg.input_float\n    # `cfg.input_int` and `cfg.input_float` will get the actual value depending on the cli input. jcfg have done the type check work for you. If the input option cannot be parsed as an integer, it will raise error\n\n    ....\n\nif __name__ == '__main__':\n    main()\n\n```\n\nType `python3 my_program.py -h` in your terminal, you will get:\n```bash\nusage: test_readme.py [-h] [-c CONFIG_PATH] [--input_float INPUT_FLOAT]\n                      [--input_int INPUT_INT] [--input_path INPUT_PATH]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONFIG_PATH        file path to update config\n  --input_float INPUT_FLOAT\n                        type: <class 'float'>, default: 0.0\n  --input_int INPUT_INT\n                        type: <class 'int'>, default: 0\n  --input_path INPUT_PATH\n                        type: <class 'str'>, default:\n```\n\nAs you can see above, these config options can be loaded from either cli input or a json file with cli option `-c your_config.json`. \n\n# Usage\n\n## To define config options\n\nThe config options should be defined based on the dict object provided when constructing `JsonCfg`. Each key in the dict will be the name of an config option, and the corresponding value will be either the default value for this config or a sub-config under this key name, based on:\n\n1. if the value is a dict without the key `_default`, this value will define a sub-config under this key,\n2. otherwise, the value indicates the default value (and also some other meta info) for this key. The type of this config will be implicitly determined as the type of the default value. \n\nFor better understanding, here is an example:\n\n```python\ncfg = jcfg.JsonCfg({\n    'option_int': -1,  # this define an config option with name `option_int` with default value of -1, and also with type of int (type(-1) is int).\n    'option_float': 0.0,  # this define config `option_float`, with default value 0.0, and type of float.\n    'option_str': 'default_value',  # default value: 'default_value', with type str\n    'option_list': [],  # this defins an config with default value of empty list, of type list\n    'sub_config': {  # this will define and sub-config\n        'sub_int': 0,\n        'sub_float': 0.0,\n        'sub_sub_config': {  # sub-config can be recursively defined\n            'leaf_key': 0, \n        }\n    },\n    'not_sub_config': {  # however, this won't define a sub-config, but an config with value type: string\n        '_default': 'this_is_default_value', \n        '_desc': 'this_si_description',  # this will provide detailed description for this config when typing --help\n    },\n    'option_by_tuple': (2, 'this is a description'),  # this option is defined with a 2-size tuple, the 1st is default value, 2rd is description\n})\n```\n\nThe config option value currently only supports following types:\n- int\n- float\n- str\n- list\n\nNote that, if you want a config option with type of dict, you'd better define it as an 2-size list, then parse this option as dict in your code yourself.\n\n## To load configs from cli\n\nAll config options could be overrided from cli with the corresponding config key name. For sub-config, the config key name is defined by all the config key name between root config and leaf config. Here is an example to override the sub-config value:\n\n```bash\npython3 test.py --sub_config.sub_int 2\n```\n\n## To load configs from file\n\nAll configs can also be loaded from a json file with a more tolerant json loader: [jstyleson](https://github.com/linjackson78/jstyleson), which supports js-style comments and also allows trailing comma. Here is an examples:\n\n```json\n\\\\ config.json\n/* js-style comments supported!\n*/\n{\n    \"option_str\": \"new_string\",  // in-line comments supported!\n    \"sub_config\":{\n        \"sub_int\": 1,   // trailing comma allowed\n    },\n    \"sub_config.sub_float\": 3\n}\n```\nThese config can be updated by `python3 test.py -c config.json`.\n\nNote that, sub-config value can be defined as a dict or key-value pair with full config path, like above.\n\nIf both config file and cli option are provided, the config will be **first overrided from config file, then overrided from cli options**.\n\n## Access to configs.\n\nThe configs can be easily accessed like this:\n```python\ncfg.option_int   # or \ncfg['option_int']\n\n# for sub-config\ncfg.sub_config.sub_int  # or\ncfg['sub_config']['sub_int']  # or\ncfg['sub_config.sub_int']\n```\n\n# Other features\n\n* Config key startswith `_` denotes private config options, which will never be overrided from cli or file.\n* '_default' is the reserved key, you should never define a config with key name '_default'.\n* '_desc' is another reserved key for defining cli description of config key\n* Some other reserved key startswith `_` may be added someday, to provide more advanced meta control.\n\n# Test\n\nRun `cd test; python3 test_main.py -v`.\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chkap/jcfg", "keywords": "", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "jcfg", "package_url": "https://pypi.org/project/jcfg/", "platform": "", "project_url": "https://pypi.org/project/jcfg/", "project_urls": {"Homepage": "https://github.com/chkap/jcfg"}, "release_url": "https://pypi.org/project/jcfg/0.8.0/", "requires_dist": ["jstyleson"], "requires_python": "", "summary": "A json-based configuration helper lib for python", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jcfg</h1>\n<p>jcfg is an easy-to-use json-based configuration tool for building python programs.</p>\n<p>Suppose that you want to develop an program that has three config options: a file path (type of string), an integer (type of int), and a float number. And also want to be able to load configs from a local file. Then, you can write code like this, with jcfg:</p>\n<pre><span class=\"c1\"># in file: my_program.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jcfg</span> <span class=\"kn\">import</span> <span class=\"n\">JsonCfg</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">JsonCfg</span><span class=\"p\">({</span>\n        <span class=\"s1\">'input_path'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"s1\">'input_int'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'input_float'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span>\n    <span class=\"p\">})</span>\n    <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># do any work you want below</span>\n    <span class=\"c1\"># you can get the input_path, input_int, or input_float like this:</span>\n\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">input_int</span> <span class=\"o\">+</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">input_float</span>\n    <span class=\"c1\"># `cfg.input_int` and `cfg.input_float` will get the actual value depending on the cli input. jcfg have done the type check work for you. If the input option cannot be parsed as an integer, it will raise error</span>\n\n    <span class=\"o\">....</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Type <code>python3 my_program.py -h</code> in your terminal, you will get:</p>\n<pre>usage: test_readme.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-c CONFIG_PATH<span class=\"o\">]</span> <span class=\"o\">[</span>--input_float INPUT_FLOAT<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>--input_int INPUT_INT<span class=\"o\">]</span> <span class=\"o\">[</span>--input_path INPUT_PATH<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -c CONFIG_PATH        file path to update config\n  --input_float INPUT_FLOAT\n                        type: &lt;class <span class=\"s1\">'float'</span>&gt;, default: <span class=\"m\">0</span>.0\n  --input_int INPUT_INT\n                        type: &lt;class <span class=\"s1\">'int'</span>&gt;, default: <span class=\"m\">0</span>\n  --input_path INPUT_PATH\n                        type: &lt;class <span class=\"s1\">'str'</span>&gt;, default:\n</pre>\n<p>As you can see above, these config options can be loaded from either cli input or a json file with cli option <code>-c your_config.json</code>.</p>\n<h1>Usage</h1>\n<h2>To define config options</h2>\n<p>The config options should be defined based on the dict object provided when constructing <code>JsonCfg</code>. Each key in the dict will be the name of an config option, and the corresponding value will be either the default value for this config or a sub-config under this key name, based on:</p>\n<ol>\n<li>if the value is a dict without the key <code>_default</code>, this value will define a sub-config under this key,</li>\n<li>otherwise, the value indicates the default value (and also some other meta info) for this key. The type of this config will be implicitly determined as the type of the default value.</li>\n</ol>\n<p>For better understanding, here is an example:</p>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">jcfg</span><span class=\"o\">.</span><span class=\"n\">JsonCfg</span><span class=\"p\">({</span>\n    <span class=\"s1\">'option_int'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"c1\"># this define an config option with name `option_int` with default value of -1, and also with type of int (type(-1) is int).</span>\n    <span class=\"s1\">'option_float'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>  <span class=\"c1\"># this define config `option_float`, with default value 0.0, and type of float.</span>\n    <span class=\"s1\">'option_str'</span><span class=\"p\">:</span> <span class=\"s1\">'default_value'</span><span class=\"p\">,</span>  <span class=\"c1\"># default value: 'default_value', with type str</span>\n    <span class=\"s1\">'option_list'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>  <span class=\"c1\"># this defins an config with default value of empty list, of type list</span>\n    <span class=\"s1\">'sub_config'</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"c1\"># this will define and sub-config</span>\n        <span class=\"s1\">'sub_int'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sub_float'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sub_sub_config'</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"c1\"># sub-config can be recursively defined</span>\n            <span class=\"s1\">'leaf_key'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> \n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'not_sub_config'</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"c1\"># however, this won't define a sub-config, but an config with value type: string</span>\n        <span class=\"s1\">'_default'</span><span class=\"p\">:</span> <span class=\"s1\">'this_is_default_value'</span><span class=\"p\">,</span> \n        <span class=\"s1\">'_desc'</span><span class=\"p\">:</span> <span class=\"s1\">'this_si_description'</span><span class=\"p\">,</span>  <span class=\"c1\"># this will provide detailed description for this config when typing --help</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'option_by_tuple'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'this is a description'</span><span class=\"p\">),</span>  <span class=\"c1\"># this option is defined with a 2-size tuple, the 1st is default value, 2rd is description</span>\n<span class=\"p\">})</span>\n</pre>\n<p>The config option value currently only supports following types:</p>\n<ul>\n<li>int</li>\n<li>float</li>\n<li>str</li>\n<li>list</li>\n</ul>\n<p>Note that, if you want a config option with type of dict, you'd better define it as an 2-size list, then parse this option as dict in your code yourself.</p>\n<h2>To load configs from cli</h2>\n<p>All config options could be overrided from cli with the corresponding config key name. For sub-config, the config key name is defined by all the config key name between root config and leaf config. Here is an example to override the sub-config value:</p>\n<pre>python3 test.py --sub_config.sub_int <span class=\"m\">2</span>\n</pre>\n<h2>To load configs from file</h2>\n<p>All configs can also be loaded from a json file with a more tolerant json loader: <a href=\"https://github.com/linjackson78/jstyleson\" rel=\"nofollow\">jstyleson</a>, which supports js-style comments and also allows trailing comma. Here is an examples:</p>\n<pre><span class=\"err\">\\\\</span> <span class=\"err\">config.json</span>\n<span class=\"err\">/*</span> <span class=\"err\">js-style</span> <span class=\"err\">comments</span> <span class=\"err\">supported!</span>\n<span class=\"err\">*/</span>\n<span class=\"p\">{</span>\n    <span class=\"nt\">\"option_str\"</span><span class=\"p\">:</span> <span class=\"s2\">\"new_string\"</span><span class=\"p\">,</span>  <span class=\"err\">//</span> <span class=\"err\">in-line</span> <span class=\"err\">comments</span> <span class=\"err\">supported!</span>\n    <span class=\"nt\">\"sub_config\"</span><span class=\"p\">:{</span>\n        <span class=\"nt\">\"sub_int\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>   <span class=\"err\">//</span> <span class=\"err\">trailing</span> <span class=\"err\">comma</span> <span class=\"err\">allowed</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"sub_config.sub_float\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n<span class=\"p\">}</span>\n</pre>\n<p>These config can be updated by <code>python3 test.py -c config.json</code>.</p>\n<p>Note that, sub-config value can be defined as a dict or key-value pair with full config path, like above.</p>\n<p>If both config file and cli option are provided, the config will be <strong>first overrided from config file, then overrided from cli options</strong>.</p>\n<h2>Access to configs.</h2>\n<p>The configs can be easily accessed like this:</p>\n<pre><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">option_int</span>   <span class=\"c1\"># or </span>\n<span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'option_int'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># for sub-config</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">sub_config</span><span class=\"o\">.</span><span class=\"n\">sub_int</span>  <span class=\"c1\"># or</span>\n<span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'sub_config'</span><span class=\"p\">][</span><span class=\"s1\">'sub_int'</span><span class=\"p\">]</span>  <span class=\"c1\"># or</span>\n<span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'sub_config.sub_int'</span><span class=\"p\">]</span>\n</pre>\n<h1>Other features</h1>\n<ul>\n<li>Config key startswith <code>_</code> denotes private config options, which will never be overrided from cli or file.</li>\n<li>'_default' is the reserved key, you should never define a config with key name '_default'.</li>\n<li>'_desc' is another reserved key for defining cli description of config key</li>\n<li>Some other reserved key startswith <code>_</code> may be added someday, to provide more advanced meta control.</li>\n</ul>\n<h1>Test</h1>\n<p>Run <code>cd test; python3 test_main.py -v</code>.</p>\n\n          </div>"}, "last_serial": 6948499, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2f43cd2cb1cf3cf85482245fcf81a424", "sha256": "fc51c06e6b70f55080bb43eae1119cf5f7ff0ed3f091f47fc4925f6607385eca"}, "downloads": -1, "filename": "jcfg-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2f43cd2cb1cf3cf85482245fcf81a424", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5795, "upload_time": "2018-11-29T14:04:25", "upload_time_iso_8601": "2018-11-29T14:04:25.727992Z", "url": "https://files.pythonhosted.org/packages/08/f3/8351074de894bac624374c562426a381d33244c70b9c395fd4255ccacd74/jcfg-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0affb9216ad51edc74b4f7b6c8e46f5", "sha256": "ee470accd87d466c5ce57580980bbcc6bba9c055b66ee45214bd158373d8cd76"}, "downloads": -1, "filename": "jcfg-0.1.tar.gz", "has_sig": false, "md5_digest": "c0affb9216ad51edc74b4f7b6c8e46f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2681, "upload_time": "2018-11-29T14:04:27", "upload_time_iso_8601": "2018-11-29T14:04:27.995013Z", "url": "https://files.pythonhosted.org/packages/02/f2/9198d88e6c1d9b960a8fccb7f0b96b98c548bf54ab80c1b7894ec2fecfac/jcfg-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a43aed2f7a78cc5126349bc9caa1051a", "sha256": "6d9cb0f9d56554ea3e7afdfc5c9b8a32e679130f9e89c5a52431083211ab7ce1"}, "downloads": -1, "filename": "jcfg-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a43aed2f7a78cc5126349bc9caa1051a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6372, "upload_time": "2018-12-14T15:15:21", "upload_time_iso_8601": "2018-12-14T15:15:21.444349Z", "url": "https://files.pythonhosted.org/packages/60/8d/9f23de9c58480a6dc803a416cdd5eb572d6f5218e0c6e14caeb0750be14f/jcfg-0.1.1-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a2869974dfb19a172d20257b671e823a", "sha256": "5acc80c9412701b1165197a199227fca70d371b0cdb7b2af32179ae6da885557"}, "downloads": -1, "filename": "jcfg-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a2869974dfb19a172d20257b671e823a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6345, "upload_time": "2018-12-15T01:20:40", "upload_time_iso_8601": "2018-12-15T01:20:40.985115Z", "url": "https://files.pythonhosted.org/packages/de/10/6bbc33c46bcdd7e327766657cc80dfe66a33e2de74dbde091ff1abbe63c4/jcfg-0.2.0-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "40a7cd7fd2492577073ad4692884f44f", "sha256": "a97e80dbdc41bc4273bf05280fe4f7cb8c1202b44c91a3b70725a589ffa4d8a1"}, "downloads": -1, "filename": "jcfg-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "40a7cd7fd2492577073ad4692884f44f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6495, "upload_time": "2018-12-19T00:38:53", "upload_time_iso_8601": "2018-12-19T00:38:53.942863Z", "url": "https://files.pythonhosted.org/packages/ad/8d/7d1c3e6e7777df72c28f0e965100dec85df79387c52bf33cde6e34a9e851/jcfg-0.3.0-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "bbd82bddfdffa0b463d47c43d271ed1a", "sha256": "f17f26fe0bd751255171df8e013ad1aba8a3c9b0f948e0722a2e1a6a02c05f99"}, "downloads": -1, "filename": "jcfg-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bbd82bddfdffa0b463d47c43d271ed1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6611, "upload_time": "2018-12-23T15:42:51", "upload_time_iso_8601": "2018-12-23T15:42:51.577919Z", "url": "https://files.pythonhosted.org/packages/97/bc/a93505ffee69dd9617e80f506d77f04b73ec36759da19715fa40d4b7945c/jcfg-0.4.0-py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "f70d2cc4c414ee02301be028de562c19", "sha256": "b6e4f9e26009ffb6eb501ec682ce24e91cb12e3c2c8dd4f65deee6794137b04b"}, "downloads": -1, "filename": "jcfg-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f70d2cc4c414ee02301be028de562c19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6609, "upload_time": "2019-01-19T15:02:45", "upload_time_iso_8601": "2019-01-19T15:02:45.057222Z", "url": "https://files.pythonhosted.org/packages/b1/f3/975e833daa1918f5bc797cf2a1bce80d6003795fb8b8c46e2fc8e4b43b5e/jcfg-0.4.1-py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "00fa3b289214eca4cf5891b45236ca32", "sha256": "747832caa2499ae7a1fac5e390a6d469c44c6cded655ed4462cdb844ec3d8cc0"}, "downloads": -1, "filename": "jcfg-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "00fa3b289214eca4cf5891b45236ca32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5125, "upload_time": "2019-05-20T15:22:17", "upload_time_iso_8601": "2019-05-20T15:22:17.125284Z", "url": "https://files.pythonhosted.org/packages/37/2c/1b44ff07cfd05b1c936bb75aba3eaca136fc9128197833656a2ffe173779/jcfg-0.5.0-py3-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "b6264687ba9585a75ae1b774ff219334", "sha256": "ab72dbc5f57f1b343b51afbab5dcbcff9c61c9c58c88aac969858316e4ad51ed"}, "downloads": -1, "filename": "jcfg-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b6264687ba9585a75ae1b774ff219334", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6915, "upload_time": "2019-10-24T16:48:41", "upload_time_iso_8601": "2019-10-24T16:48:41.357173Z", "url": "https://files.pythonhosted.org/packages/9b/74/c4aea58f375498c9b7fafb6020161aff8227aa7d3270bc80186f9e0587a3/jcfg-0.6.0-py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "071d1ae368c3137d61979aa908a1fa0f", "sha256": "23bfb071d0f6caf9435dafe17d96ec8b8e72c51225f7b4b1e95adfbeab30b0a6"}, "downloads": -1, "filename": "jcfg-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "071d1ae368c3137d61979aa908a1fa0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7061, "upload_time": "2020-04-03T20:00:26", "upload_time_iso_8601": "2020-04-03T20:00:26.079709Z", "url": "https://files.pythonhosted.org/packages/c4/e4/ca6dc8c606f989927e79da65e076786ddd1d6a00b656647c029f05108f04/jcfg-0.7.0-py3-none-any.whl", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "c79912f8aaf55fc8249afb286e19d768", "sha256": "6030b005ee17e2e43b8d10be19951d287208a80befe4c8e88b295859814a770b"}, "downloads": -1, "filename": "jcfg-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c79912f8aaf55fc8249afb286e19d768", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10223, "upload_time": "2020-04-04T07:33:06", "upload_time_iso_8601": "2020-04-04T07:33:06.842640Z", "url": "https://files.pythonhosted.org/packages/0d/77/2b0ce7b8d53024cb7a013ac289311bfe625a800dc302fa5fc61636bfa62e/jcfg-0.8.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c79912f8aaf55fc8249afb286e19d768", "sha256": "6030b005ee17e2e43b8d10be19951d287208a80befe4c8e88b295859814a770b"}, "downloads": -1, "filename": "jcfg-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c79912f8aaf55fc8249afb286e19d768", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10223, "upload_time": "2020-04-04T07:33:06", "upload_time_iso_8601": "2020-04-04T07:33:06.842640Z", "url": "https://files.pythonhosted.org/packages/0d/77/2b0ce7b8d53024cb7a013ac289311bfe625a800dc302fa5fc61636bfa62e/jcfg-0.8.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:52:59 2020"}