{"info": {"author": "Istv\u00e1n P\u00e1sztor", "author_email": "pasztorpisti@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===========\nkwonly-args\n===========\n\n\n.. image:: https://img.shields.io/travis/pasztorpisti/kwonly-args.svg?style=flat\n    :target: https://travis-ci.org/pasztorpisti/kwonly-args\n    :alt: build\n\n.. image:: https://img.shields.io/codacy/1a359512094746ae9d39e281cdbc581a/master.svg?style=flat\n    :target: https://www.codacy.com/app/pasztorpisti/kwonly-args\n    :alt: code quality\n\n.. image:: https://landscape.io/github/pasztorpisti/kwonly-args/master/landscape.svg?style=flat\n    :target: https://landscape.io/github/pasztorpisti/kwonly-args/master\n    :alt: code health\n\n.. image:: https://img.shields.io/coveralls/pasztorpisti/kwonly-args/master.svg?style=flat\n    :target: https://coveralls.io/r/pasztorpisti/kwonly-args?branch=master\n    :alt: coverage\n\n.. image:: https://img.shields.io/pypi/v/kwonly-args.svg?style=flat\n    :target: https://pypi.python.org/pypi/kwonly-args\n    :alt: pypi\n\n.. image:: https://img.shields.io/github/tag/pasztorpisti/kwonly-args.svg?style=flat\n    :target: https://github.com/pasztorpisti/kwonly-args\n    :alt: github\n\n.. image:: https://img.shields.io/github/license/pasztorpisti/kwonly-args.svg?style=flat\n    :target: https://github.com/pasztorpisti/kwonly-args/blob/master/LICENSE.txt\n    :alt: license: MIT\n\n\nProviding keyword-only argument emulation for python2. The resulting code is python3 compatible.\n\nYou have to read only the short Usage_ section of the document to get started, the rest is optional for curious people and\nbored time billionaires.\n\n\n.. contents::\n\n\n-----\nUsage\n-----\n\n\nInstallation\n------------\n\n.. code-block:: sh\n\n    pip install kwonly-args\n\nAlternatively you can download the zipped library from https://pypi.python.org/pypi/kwonly-args\n\n\nBrief how-to with code examples\n-------------------------------\n\nWith this library you can turn some or all of the default arguments of your function into keyword-only arguments.\n\n- Decorate your function with ``kwonly_args.first_kwonly_arg`` and select one of the default arguments of your function\n  with the ``name`` parameter of the decorator. The selected argument along with all default arguments on its right\n  side will be treated as keyword-only arguments.\n- All keyword-only arguments have a default value and they aren't required args by default. You can make a\n  keyword-only argument required by using ``kwonly_args.KWONLY_REQUIRED`` as its default value.\n\nYour new-born keyword-only args are no longer treated as positional arguments and varargs still work if your function\nhas ``*args`` or something like that.\n\n.. code-block:: python\n\n    from kwonly_args import first_kwonly_arg, KWONLY_REQUIRED\n\n\n    # This turns default1 and default2 into keyword-only arguments.\n    # They are no longer handled as positional arguments.\n    @first_kwonly_arg('default1')\n    def func(arg0, arg1, default0='d0', default1='d1', default2='d2', *args):\n        print('arg0=%s arg1=%s default0=%s default1=%s default2=%s args=%s' % (\n              arg0, arg1, default0, default1, default2, args))\n\n\n    func(0, 1, 2, 3, 4)\n    # Output:\n    # arg0=0 arg1=1 default0=2 default1=d1 default=d2 args=(3, 4)\n\n    # The default1 and default2 args can be passed only as keyword arguments:\n    func(0, 1, 2, 3, 4, default1='kwonly_param')\n    # Output:\n    # arg0=0 arg1=1 default0=2 default1=kwonly_param default=d2 args=(3, 4)\n\n\n    # In this example all three args are keyword-only args and default1 is required.\n    @first_kwonly_arg('default0')\n    def func2(default0='d0', default1=KWONLY_REQUIRED, default2='d2'):\n        ...\n\n\nYou can also decorate class methods (including both old and new style classes):\n\n.. code-block:: python\n\n    from kwonly_args import first_kwonly_arg\n\n\n    class MyClass:\n        # turning d1 and d2 into keyword-only arguments\n        @first_kwonly_arg('d1')\n        def my_instance_method(self, a0, a1, d0='d0', d1='d1', d2='d2', *args):\n            ...\n\n        # You have to apply @first_kwonly_arg before @classmethod!\n        @classmethod\n        @first_kwonly_arg('d1')\n        def my_class_method(cls, a0, a1, d0='d0', d1='d1', d2='d2', *args):\n            ...\n\n        # You have to apply @first_kwonly_arg before @staticmethod!\n        @staticmethod\n        @first_kwonly_arg('d1')\n        def my_static_method(a0, a1, d0='d0', d1='d1', d2='d2', *args):\n            ...\n\n\nIf you want to turn all default arguments into keyword-only arguments then the following convenience API may be useful:\n\n.. code-block:: python\n\n    from kwonly_args import first_kwonly_arg, FIRST_DEFAULT_ARG, kwonly_defaults\n\n\n    # The FIRST_DEFAULT_ARG constant automatically selects the first default\n    # argument (default0) so it turns all default arguments into keyword-only.\n    @first_kwonly_arg(FIRST_DEFAULT_ARG)\n    def func(arg0, arg1, default0='d0', default1='d1', *args):\n        ...\n\n\n    # As an equivalent shortcut you can use @kwonly_defaults.\n    @kwonly_defaults\n    def func(arg0, arg1, default0='d0', default1='d1', *args):\n        ...\n\n\n--------------------------------------------------\nCode style/design: why use keyword-only arguments?\n--------------------------------------------------\n\nYou may have an understanding of this topic. If not then read along.\nUsing keyword-only arguments provides the following benefits:\n\n\nCode readability\n----------------\n\nIt can make code that calls your function more readable. This is especially true if you have several functions with\nlong argument lists like some of the python standard library APIs. For example ``subprocess.Popen()`` has more than\n10 arguments. ``subprocess.Popen()`` is a legacy function from python2 (so it couldn't make use of keyword-only\narguments despite being a very good candidate for that) but some newer python3 APIs make use of keyword-only\narguments with a good reason. For example the python3 ``subprocess.run()`` has about 10 arguments but only\nthe first ``argv`` argument can be passed as positional, the rest are keyword-only.\n\n.. code-block:: python\n\n    def draw_circle(x, y, radius, filled=False):\n        ...\n\n    def draw_ellipse(x, y, radius_x, radius_y, filled=False):\n        ...\n\n    # 1. calling without using keyword arguments:\n    draw_circle(100, 200, 50, True)\n    draw_ellipse(200, 100, 100, 50)\n\n    # 2. calling using keyword arguments:\n    draw_circle(x=100, y=200, radius=50, filled=True)\n    draw_ellipse(x=200, y=100, radius_x=100, radius_y=50)\n\nWithout keyword-only arguments users of your function will be able to use both of the above conventions. If you\nemploy keyword-only arguments then they can use only #2. In case of a simple function like my ``draw_circle()`` it\nmay not seem reasonable enough to force keyword-only arguments. But imagine what happens if you start having many\nsimilar functions like ``draw_ellpise()``, ``draw_rectangle()``, etc.. and you have to read code that calls these\nwithout keyword arguments with a bunch of listed numbers and bools mixed together as their input... The above\nexample in section #1 is relatively lightweight compared to what it can look in real life.\n\nWhen a function has more than 3-4 arguments (like ``subprocess.Popen()``) I think it is a very good practice to\nallow at most the first few (or none of the) arguments to be passed as positional ones and make the rest kw-only\n(like the standard python3 ``subprocess.run()``).\nIt isn't a problem if a function has a lot of parameters (especially default ones) as long as the code that calls\nthe function remains readable by using keyword argument passing and you can enforce/guarantee that by making the\nmost of the arguments keyword-only:\n\n.. code-block:: python\n\n    import subprocess\n\n    argv = ['ls', '-l']\n\n    # BAD! I think I don't really have to explain why...\n    p = subprocess.Popen(argv, -1, None, subprocess.PIPE, subprocess.PIPE,\n                         subprocess.STDOUT, None, True, True)\n\n    # GOOD! And this has the same behavior as the previous call.\n    # I think it is well worth enforcing this form with keyword-only args.\n    p = subprocess.Popen(argv, stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                         stderr=subprocess.STDOUT, shell=True)\n\n    # If the number of passed arguments exceeds my threshold\n    # I switch to the following format for readability:\n    p = subprocess.Popen(\n        argv,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        shell=True,\n    )\n\n\nEasier maintenance and refactorization\n--------------------------------------\n\nKeyword-only args have an extremely useful property: you can declare them in any order in your function signature and\nthe code that calls your function can also pass them in any order.\nLater you can change the order of declaration of your keyword-only arguments for cosmetic and readability reasons\nwithout affecting behavior and without having to refactor code that calls this function. This comes in handy not only\nin case of code cosmetics but also makes it easier to add new keyword-only args and to remove old ones if necessary.\nLet's review these scenarios with code examples.\n\nImagine a scenario where you have a ``draw_circle(x, y, radius, outline_color=black, filled=False, fill_color=None)``\nfunction. It already looks bad enough without keyword-only args. Let's imagine that someone asks you to add an\n`outline_width` argument. Since all parameters can be passed as positional arguments you have to keep backward\ncompatibility and you have to append this argument to the end of the current arg list with a default value. This\nintroduces another ugly thing: the arguments that belong to the outline aren't adjacent. There will be two unrelated\nargs between ``outline_color`` and the newly added ``outline_width``. If these args were keyword-only arguments then\nthe arbitrary argument order would allow you to insert the new ``outline_width`` arg right after ``outline_color``.\n\nAnother typical and similar scenario is having a function that makes use of 2 or more other functions. For this reason\nit receives input args and passes them through to the two other functions. Let's say you start out with something like\nthis at the beginning of your project:\n\n.. code-block:: python\n\n    # lower level workhorse functions used by the higher level ``my_func()``\n    def workhorse1(wh1_1, wh1_2):\n        ...\n\n    def workhorse2(wh2_1, wh2_2):\n        ...\n\n    # And your function looks like this\n    def my_func(wh1_1, wh2_1, wh2_2):\n        # TODO: perhaps manipulate the input args...\n        workhorse1(wh1_1, 8)\n        workhorse2(wh2_1, wh2_2)\n\n\nThen for some reason someone introduces a new ``wh1_3`` parameter for ``workhorse1()`` and you have to pass it through\nyour higher level ``my_func()``. It will look like this:\n\n.. code-block:: python\n\n    # One arg for wh1, then two args for wh2 and then another arg for wh1... Nice.\n    def my_func(wh1_1, wh2_1, wh2_2, wh1_3):\n        # TODO: perhaps manipulate the input args...\n        workhorse1(wh1_1, 8)\n        workhorse2(wh2_1, wh2_2)\n\n\nIn python you can avoid such scenarios by passing such arguments in ``**kwargs`` or in separate dictionaries but it\noften makes the code less explicit and readable:\n\n.. code-block:: python\n\n    # It is more difficult to find out what's going on with ``*args``\n    # and ``**kwargs`` then with explicitly named arguments.\n    def my_func(**kwargs):\n        # Let the workhorses to cherry pick the parameters they\n        # need and ignore the rest that they don't need.\n        workhorse1(**kwargs)\n        workhorse2(**kwargs)\n\n\nYou can also use two separate dictionaries or data objects to pass the arguments to the workhorses. This technique\nis better than keyword only argument passing when the workhorses have a lot of parameters and/or you have to pass\nthe arguments deeply through several calls but this solution is an an overkill in many simpler situations where the\nnumber of parameters isn't too high and there is no deep arg passing:\n\n.. code-block:: python\n\n    def my_func(wh1_args, wh2_args):\n        # TODO: perhaps manipulate the input args...\n        workhorse1(wh1_args)\n        workhorse2(wh2_args)\n\n\nWith keyword-only arguments the above problems don't exist. The new `wh1_3` argument can be placed anywhere in the\nkeyword-only argument part of the argument list (e.g.: after ``wh1_1``) without affecting the rest of the code that\nalready calls this functions with other keyword-only args (given that they don't want to use the newly added arg).\n\n\n----------------------\nImplementation details\n----------------------\n\n\nPython 2 function signature anatomy\n-----------------------------------\n\nA python2 function signature consists of the following optional parts. Any optional parts that are present in\na function signature appear in the listed order:\n\n1.  Positional arguments\n\n    1.  Required arguments (positional arguments without default value)\n    2.  Default arguments (positional arguments with default value)\n    3.  **Keyword-only arguments (non-standard, emulated/provided by this library)**\n\n2.  VarArgs (``*args``)\n3.  VarKWArgs (``**kwargs``)\n\n\nAs you see in standard python2 your positional argument list consists of zero or more required arguments followed by\nzero or more default arguments. This library can turn the last N default arguments (all/some of them) into keyword-only\narguments. With the help of this library you can now split the positional argument list of your python2 function\nsignatures into 3 parts instead of the standard 2.\n\nIn python3 the keyword-only arguments reside between VarArgs and VarKWArgs but in python2 you can't put anything\nbetween those (it would be a syntax error) so your best bet to emulate keyword-only arguments is turning some of your\npositional arguments into keyword-only args.\n\n\nEmulated keyword-only args VS static analyzers\n..............................................\n\nAs discussed previously unfortunately we can declare our emulated python2 keyword-only arguments only before the\nVarArgs (``*args``) of the function. This means that our signature can have positional arguments not only before our\nkeyword-only args, but also after them (because VarArgs are positional). This may lead to false-positive\nwarnings/errors with static analyzers in the following case:\n\nIf you have a function with both keyword-only arguments and VarArgs then static analyzers may treat some\nof the calls to this function suspicious (resulting in a false positive warning/error).\n\n.. code-block:: python\n\n    @first_kwonly_arg('ko0')\n    def func(a0, d0=-1, ko0=-1, ko1=-1, *args):\n        ...\n\n\n    # No problem: a0=0\n    func(0)\n\n    # No problem: a0=0, d0=1\n    func(0, 1)\n\n    # No problem: a0=0 d0=1 args=(2,)\n    func(0, 1, 2)\n\n    # The static analyzer will probably treat this as an error. It thinks that\n    # you pass both the positional argument 2 and ko0=3 to the ko0 arg of the\n    # function because it can't track down the magic done by the @first_kwonly_arg\n    # decorator and binds the passed parameters to the function args using standard\n    # python2 rules. If func() didn't have our @first_kwonly_arg decorator then\n    # this function call would probably cause an error like:\n    # TypeError: func() got multiple values for argument 'ko0'\n    #\n    # However what actually happens as a result of the magic done by the\n    # decorator is: a0=0 d0=1 ko0=3 ko1=-1 args=(2,)\n    # The decorator ensures that positional parameters passed by function calls\n    # are bound only to positional non-keyword-only arguments and the VarArgs\n    # of the function.\n    func(0, 1, 2, ko0=3)\n\n    # No problem despite the fact that the static analyzer probably assumes\n    # something different than what actually happens. According to standard\n    # python2 arg binding rules the static analyzer probably thinks that:\n    # a0=0 d0=1 ko0=2 ko1=3 args=()\n    #\n    # However the actual outcome caused by our decorator is:\n    # a0=0 d0=1 ko0=-1 ko1=3 args=(2,)\n    func(0, 1, 2, ko1=3)\n\n\nDespite the above issue a decorator like this can still be very useful. The reason for this is that for me it happens\nquite rarely that in a function I need both keyword-only arguments and VarArgs. I need VarArgs quite rarely in general\nwhile keyword-only arguments come in handy quite often. If this is the same for you then go on using this decorator in\nyour python2 projects and in the rare cases where you need both keyword-only arguments and VarArgs use one of the\nfollowing workarounds to aid this issue:\n\n- Static analyzers are stupid! Don't use them! (Well, this was only a joke. :-D)\n- In your static analyzer tool or service ignore the individual instances of these false positive warnings.\n- Use `Poor man's python2 keyword-only arguments`_ with these problematic cases instead of decorating them and use the\n  decorator only with the rest (probably the majority) of the functions that don't have VarArgs.\n\n\nPoor man's python2 keyword-only arguments\n-----------------------------------------\n\nI really like the benefits brought by keyword-only arguments. Long ago before extensively working with python I've\nalready forged some coding-convention rules that have similar advantages (unordered arguments, specifying arg names\nwhile calling the function for readability) in other languages (e.g.: C/C++). Before thinking about using a python2\nsolution like the one provided by this library I've used a \"manually implemented poor man's python2 keyword-only args\"\nsolution like this:\n\n.. code-block:: python\n\n    def func(arg0, arg1, default0='d0', default1='d1', **kwargs):\n        # Keyword-only arg with a default value:\n        optional_kwonly0 = kwargs.pop('kwonly0', 'ko0')\n        # Required keyword-only arg:\n        required_kwonly1 = kwargs.pop('kwonly1')\n\n        # Checking whether the caller has passed an unexpected keyword argument.\n        # Sometimes passing an unexpected keyword argument is simply the result\n        # of a typo in the name of an expected arg. E.g.: kwnly0 instead of kwonly0\n        check_no_kwargs_left(func, kwargs)\n\n        # ... the rest of the function body\n\n\n    # utility function far away somewhere in a central place...\n    def check_no_kwargs_left(func_or_func_name, kwargs):\n        if not kwargs:\n            return\n        func_name = func_or_func_name.__name__ if callable(func_or_func_name) else func_or_func_name\n        arg_names = ', '.join(repr(k) for k in sorted(kwargs.keys()))\n        raise TypeError('%s() got unexpected keyword argument(s): %s' % (func_name, arg_names))\n\n\nWhile I think the above solution if fairly good it still requires checking the function body too in order to see the\nfull signature and sometimes people may forget to check for leftover kwargs after popping the kwonly args.\n\n\n------------------------------\nWhy does this \"library\" exist?\n------------------------------\n\nI've checked out some other python2 keyword-only argument emulator code snippets and decided to roll my own just for\nfun and also for the following reasons:\n\n- Some of those implementations provide you with a decorator with which you have to specify your keyword-only arguments\n  with their (usually zero based) index in the arg list of the function. This is error prone, I never liked the\n  idea of identifying arguments with indexes. The only minor disadvantage of using arg names instead of arg indexes\n  is that using arg names requires direct access to the signature of the *original* wrapped function.\n  If there are other decorators between our decorator and the original function then under python2 using names isn't\n  really possible (because ``functools.update_wrapper()`` and decorators in general don't have/support the\n  ``__wrapped__`` attribute to maintain a chain back to the originally wrapped function).\n- Some implementations allow you to pick an arbitrary set of positional arguments by specifying their indexes or names.\n  I don't like the idea of promoting arbitrary positional arguments into keyword-only arguments by scattering\n  keyword-only args through the remaining positional args. It degrades code readability a lot. This is why I decided\n  to keep positional arguments of the same type (required/default/kwonly) together in a well defined slice of the\n  positional argument list.\n- `The implementation of this solution`__ is brief (~40 lines of logic), simple, and well tested.\n\n.. _decorator_source: https://github.com/pasztorpisti/kwonly-args/blob/7603c3a0f0c2d37d02c7220492de248f65ff0451/src/kwonly_args/__init__.py#L76-L118\n\n__ decorator_source_", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pasztorpisti/kwonly-args", "keywords": "kwonly keyword only arguments args decorator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "kwonly-args", "package_url": "https://pypi.org/project/kwonly-args/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/kwonly-args/", "project_urls": {"Homepage": "https://github.com/pasztorpisti/kwonly-args"}, "release_url": "https://pypi.org/project/kwonly-args/1.0.10/", "requires_dist": null, "requires_python": "", "summary": "Python2 keyword-only argument emulation as a decorator. Python 3 compatible.", "version": "1.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/pasztorpisti/kwonly-args\" rel=\"nofollow\"><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d20929b0264a539d0bf2da4c7bc07a310d3832d0/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7061737a746f7270697374692f6b776f6e6c792d617267732e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://www.codacy.com/app/pasztorpisti/kwonly-args\" rel=\"nofollow\"><img alt=\"code quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac1e0ccc7a5bf2687c16731157510162af4c6f99/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f31613335393531323039343734366165396433396532383163646263353831612f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://landscape.io/github/pasztorpisti/kwonly-args/master\" rel=\"nofollow\"><img alt=\"code health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4afd749b5688367020f60db069f935428a8ac9d4/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f7061737a746f7270697374692f6b776f6e6c792d617267732f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://coveralls.io/r/pasztorpisti/kwonly-args?branch=master\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8bb8d1851902c0aa110a3ace6830423f2c2bff0/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f7061737a746f7270697374692f6b776f6e6c792d617267732f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/kwonly-args\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/040bdf26ef0e4844fc740f791057adc3cdd0dc4d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b776f6e6c792d617267732e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://github.com/pasztorpisti/kwonly-args\" rel=\"nofollow\"><img alt=\"github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/988ada7a7725f0252bdf7bc3dc64ea1559bb1f1f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f7061737a746f7270697374692f6b776f6e6c792d617267732e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://github.com/pasztorpisti/kwonly-args/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"license: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/558a79520c03361af41e46a339fc61f33a4df07c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7061737a746f7270697374692f6b776f6e6c792d617267732e7376673f7374796c653d666c6174\"></a>\n<p>Providing keyword-only argument emulation for python2. The resulting code is python3 compatible.</p>\n<p>You have to read only the short <a href=\"#usage\" rel=\"nofollow\">Usage</a> section of the document to get started, the rest is optional for curious people and\nbored time billionaires.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#brief-how-to-with-code-examples\" id=\"id4\" rel=\"nofollow\">Brief how-to with code examples</a></li>\n</ul>\n</li>\n<li><a href=\"#code-style-design-why-use-keyword-only-arguments\" id=\"id5\" rel=\"nofollow\">Code style/design: why use keyword-only arguments?</a><ul>\n<li><a href=\"#code-readability\" id=\"id6\" rel=\"nofollow\">Code readability</a></li>\n<li><a href=\"#easier-maintenance-and-refactorization\" id=\"id7\" rel=\"nofollow\">Easier maintenance and refactorization</a></li>\n</ul>\n</li>\n<li><a href=\"#implementation-details\" id=\"id8\" rel=\"nofollow\">Implementation details</a><ul>\n<li><a href=\"#python-2-function-signature-anatomy\" id=\"id9\" rel=\"nofollow\">Python 2 function signature anatomy</a><ul>\n<li><a href=\"#emulated-keyword-only-args-vs-static-analyzers\" id=\"id10\" rel=\"nofollow\">Emulated keyword-only args VS static analyzers</a></li>\n</ul>\n</li>\n<li><a href=\"#poor-man-s-python2-keyword-only-arguments\" id=\"id11\" rel=\"nofollow\">Poor man\u2019s python2 keyword-only arguments</a></li>\n</ul>\n</li>\n<li><a href=\"#why-does-this-library-exist\" id=\"id12\" rel=\"nofollow\">Why does this \u201clibrary\u201d exist?</a></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"installation\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Installation</a></h3>\n<pre>pip install kwonly-args\n</pre>\n<p>Alternatively you can download the zipped library from <a href=\"https://pypi.python.org/pypi/kwonly-args\" rel=\"nofollow\">https://pypi.python.org/pypi/kwonly-args</a></p>\n</div>\n<div id=\"brief-how-to-with-code-examples\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Brief how-to with code examples</a></h3>\n<p>With this library you can turn some or all of the default arguments of your function into keyword-only arguments.</p>\n<ul>\n<li>Decorate your function with <tt>kwonly_args.first_kwonly_arg</tt> and select one of the default arguments of your function\nwith the <tt>name</tt> parameter of the decorator. The selected argument along with all default arguments on its right\nside will be treated as keyword-only arguments.</li>\n<li>All keyword-only arguments have a default value and they aren\u2019t required args by default. You can make a\nkeyword-only argument required by using <tt>kwonly_args.KWONLY_REQUIRED</tt> as its default value.</li>\n</ul>\n<p>Your new-born keyword-only args are no longer treated as positional arguments and varargs still work if your function\nhas <tt>*args</tt> or something like that.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kwonly_args</span> <span class=\"kn\">import</span> <span class=\"n\">first_kwonly_arg</span><span class=\"p\">,</span> <span class=\"n\">KWONLY_REQUIRED</span>\n\n\n<span class=\"c1\"># This turns default1 and default2 into keyword-only arguments.</span>\n<span class=\"c1\"># They are no longer handled as positional arguments.</span>\n<span class=\"nd\">@first_kwonly_arg</span><span class=\"p\">(</span><span class=\"s1\">'default1'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">default0</span><span class=\"o\">=</span><span class=\"s1\">'d0'</span><span class=\"p\">,</span> <span class=\"n\">default1</span><span class=\"o\">=</span><span class=\"s1\">'d1'</span><span class=\"p\">,</span> <span class=\"n\">default2</span><span class=\"o\">=</span><span class=\"s1\">'d2'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'arg0=</span><span class=\"si\">%s</span><span class=\"s1\"> arg1=</span><span class=\"si\">%s</span><span class=\"s1\"> default0=</span><span class=\"si\">%s</span><span class=\"s1\"> default1=</span><span class=\"si\">%s</span><span class=\"s1\"> default2=</span><span class=\"si\">%s</span><span class=\"s1\"> args=</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n          <span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">default0</span><span class=\"p\">,</span> <span class=\"n\">default1</span><span class=\"p\">,</span> <span class=\"n\">default2</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:</span>\n<span class=\"c1\"># arg0=0 arg1=1 default0=2 default1=d1 default=d2 args=(3, 4)</span>\n\n<span class=\"c1\"># The default1 and default2 args can be passed only as keyword arguments:</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">default1</span><span class=\"o\">=</span><span class=\"s1\">'kwonly_param'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:</span>\n<span class=\"c1\"># arg0=0 arg1=1 default0=2 default1=kwonly_param default=d2 args=(3, 4)</span>\n\n\n<span class=\"c1\"># In this example all three args are keyword-only args and default1 is required.</span>\n<span class=\"nd\">@first_kwonly_arg</span><span class=\"p\">(</span><span class=\"s1\">'default0'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">(</span><span class=\"n\">default0</span><span class=\"o\">=</span><span class=\"s1\">'d0'</span><span class=\"p\">,</span> <span class=\"n\">default1</span><span class=\"o\">=</span><span class=\"n\">KWONLY_REQUIRED</span><span class=\"p\">,</span> <span class=\"n\">default2</span><span class=\"o\">=</span><span class=\"s1\">'d2'</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>You can also decorate class methods (including both old and new style classes):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kwonly_args</span> <span class=\"kn\">import</span> <span class=\"n\">first_kwonly_arg</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">:</span>\n    <span class=\"c1\"># turning d1 and d2 into keyword-only arguments</span>\n    <span class=\"nd\">@first_kwonly_arg</span><span class=\"p\">(</span><span class=\"s1\">'d1'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">my_instance_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a0</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">d0</span><span class=\"o\">=</span><span class=\"s1\">'d0'</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"o\">=</span><span class=\"s1\">'d1'</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"s1\">'d2'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"c1\"># You have to apply @first_kwonly_arg before @classmethod!</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"nd\">@first_kwonly_arg</span><span class=\"p\">(</span><span class=\"s1\">'d1'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">my_class_method</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">a0</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">d0</span><span class=\"o\">=</span><span class=\"s1\">'d0'</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"o\">=</span><span class=\"s1\">'d1'</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"s1\">'d2'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"c1\"># You have to apply @first_kwonly_arg before @staticmethod!</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@first_kwonly_arg</span><span class=\"p\">(</span><span class=\"s1\">'d1'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">my_static_method</span><span class=\"p\">(</span><span class=\"n\">a0</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">d0</span><span class=\"o\">=</span><span class=\"s1\">'d0'</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"o\">=</span><span class=\"s1\">'d1'</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"s1\">'d2'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>If you want to turn all default arguments into keyword-only arguments then the following convenience API may be useful:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kwonly_args</span> <span class=\"kn\">import</span> <span class=\"n\">first_kwonly_arg</span><span class=\"p\">,</span> <span class=\"n\">FIRST_DEFAULT_ARG</span><span class=\"p\">,</span> <span class=\"n\">kwonly_defaults</span>\n\n\n<span class=\"c1\"># The FIRST_DEFAULT_ARG constant automatically selects the first default</span>\n<span class=\"c1\"># argument (default0) so it turns all default arguments into keyword-only.</span>\n<span class=\"nd\">@first_kwonly_arg</span><span class=\"p\">(</span><span class=\"n\">FIRST_DEFAULT_ARG</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">default0</span><span class=\"o\">=</span><span class=\"s1\">'d0'</span><span class=\"p\">,</span> <span class=\"n\">default1</span><span class=\"o\">=</span><span class=\"s1\">'d1'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># As an equivalent shortcut you can use @kwonly_defaults.</span>\n<span class=\"nd\">@kwonly_defaults</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">default0</span><span class=\"o\">=</span><span class=\"s1\">'d0'</span><span class=\"p\">,</span> <span class=\"n\">default1</span><span class=\"o\">=</span><span class=\"s1\">'d1'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n</div>\n<div id=\"code-style-design-why-use-keyword-only-arguments\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Code style/design: why use keyword-only arguments?</a></h2>\n<p>You may have an understanding of this topic. If not then read along.\nUsing keyword-only arguments provides the following benefits:</p>\n<div id=\"code-readability\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Code readability</a></h3>\n<p>It can make code that calls your function more readable. This is especially true if you have several functions with\nlong argument lists like some of the python standard library APIs. For example <tt>subprocess.Popen()</tt> has more than\n10 arguments. <tt>subprocess.Popen()</tt> is a legacy function from python2 (so it couldn\u2019t make use of keyword-only\narguments despite being a very good candidate for that) but some newer python3 APIs make use of keyword-only\narguments with a good reason. For example the python3 <tt>subprocess.run()</tt> has about 10 arguments but only\nthe first <tt>argv</tt> argument can be passed as positional, the rest are keyword-only.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">draw_circle</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">filled</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">draw_ellipse</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">radius_x</span><span class=\"p\">,</span> <span class=\"n\">radius_y</span><span class=\"p\">,</span> <span class=\"n\">filled</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># 1. calling without using keyword arguments:</span>\n<span class=\"n\">draw_circle</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">draw_ellipse</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 2. calling using keyword arguments:</span>\n<span class=\"n\">draw_circle</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">filled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">draw_ellipse</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">radius_x</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">radius_y</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre>\n<p>Without keyword-only arguments users of your function will be able to use both of the above conventions. If you\nemploy keyword-only arguments then they can use only #2. In case of a simple function like my <tt>draw_circle()</tt> it\nmay not seem reasonable enough to force keyword-only arguments. But imagine what happens if you start having many\nsimilar functions like <tt>draw_ellpise()</tt>, <tt>draw_rectangle()</tt>, etc.. and you have to read code that calls these\nwithout keyword arguments with a bunch of listed numbers and bools mixed together as their input\u2026 The above\nexample in section #1 is relatively lightweight compared to what it can look in real life.</p>\n<p>When a function has more than 3-4 arguments (like <tt>subprocess.Popen()</tt>) I think it is a very good practice to\nallow at most the first few (or none of the) arguments to be passed as positional ones and make the rest kw-only\n(like the standard python3 <tt>subprocess.run()</tt>).\nIt isn\u2019t a problem if a function has a lot of parameters (especially default ones) as long as the code that calls\nthe function remains readable by using keyword argument passing and you can enforce/guarantee that by making the\nmost of the arguments keyword-only:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n\n<span class=\"n\">argv</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'ls'</span><span class=\"p\">,</span> <span class=\"s1\">'-l'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># BAD! I think I don't really have to explain why...</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>\n                     <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">STDOUT</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># GOOD! And this has the same behavior as the previous call.</span>\n<span class=\"c1\"># I think it is well worth enforcing this form with keyword-only args.</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>\n                     <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">STDOUT</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If the number of passed arguments exceeds my threshold</span>\n<span class=\"c1\"># I switch to the following format for readability:</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span>\n    <span class=\"n\">argv</span><span class=\"p\">,</span>\n    <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>\n    <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>\n    <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">STDOUT</span><span class=\"p\">,</span>\n    <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"easier-maintenance-and-refactorization\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Easier maintenance and refactorization</a></h3>\n<p>Keyword-only args have an extremely useful property: you can declare them in any order in your function signature and\nthe code that calls your function can also pass them in any order.\nLater you can change the order of declaration of your keyword-only arguments for cosmetic and readability reasons\nwithout affecting behavior and without having to refactor code that calls this function. This comes in handy not only\nin case of code cosmetics but also makes it easier to add new keyword-only args and to remove old ones if necessary.\nLet\u2019s review these scenarios with code examples.</p>\n<p>Imagine a scenario where you have a <tt>draw_circle(x, y, radius, outline_color=black, filled=False, fill_color=None)</tt>\nfunction. It already looks bad enough without keyword-only args. Let\u2019s imagine that someone asks you to add an\n<cite>outline_width</cite> argument. Since all parameters can be passed as positional arguments you have to keep backward\ncompatibility and you have to append this argument to the end of the current arg list with a default value. This\nintroduces another ugly thing: the arguments that belong to the outline aren\u2019t adjacent. There will be two unrelated\nargs between <tt>outline_color</tt> and the newly added <tt>outline_width</tt>. If these args were keyword-only arguments then\nthe arbitrary argument order would allow you to insert the new <tt>outline_width</tt> arg right after <tt>outline_color</tt>.</p>\n<p>Another typical and similar scenario is having a function that makes use of 2 or more other functions. For this reason\nit receives input args and passes them through to the two other functions. Let\u2019s say you start out with something like\nthis at the beginning of your project:</p>\n<pre><span class=\"c1\"># lower level workhorse functions used by the higher level ``my_func()``</span>\n<span class=\"k\">def</span> <span class=\"nf\">workhorse1</span><span class=\"p\">(</span><span class=\"n\">wh1_1</span><span class=\"p\">,</span> <span class=\"n\">wh1_2</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">workhorse2</span><span class=\"p\">(</span><span class=\"n\">wh2_1</span><span class=\"p\">,</span> <span class=\"n\">wh2_2</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># And your function looks like this</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">wh1_1</span><span class=\"p\">,</span> <span class=\"n\">wh2_1</span><span class=\"p\">,</span> <span class=\"n\">wh2_2</span><span class=\"p\">):</span>\n    <span class=\"c1\"># TODO: perhaps manipulate the input args...</span>\n    <span class=\"n\">workhorse1</span><span class=\"p\">(</span><span class=\"n\">wh1_1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"n\">workhorse2</span><span class=\"p\">(</span><span class=\"n\">wh2_1</span><span class=\"p\">,</span> <span class=\"n\">wh2_2</span><span class=\"p\">)</span>\n</pre>\n<p>Then for some reason someone introduces a new <tt>wh1_3</tt> parameter for <tt>workhorse1()</tt> and you have to pass it through\nyour higher level <tt>my_func()</tt>. It will look like this:</p>\n<pre><span class=\"c1\"># One arg for wh1, then two args for wh2 and then another arg for wh1... Nice.</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">wh1_1</span><span class=\"p\">,</span> <span class=\"n\">wh2_1</span><span class=\"p\">,</span> <span class=\"n\">wh2_2</span><span class=\"p\">,</span> <span class=\"n\">wh1_3</span><span class=\"p\">):</span>\n    <span class=\"c1\"># TODO: perhaps manipulate the input args...</span>\n    <span class=\"n\">workhorse1</span><span class=\"p\">(</span><span class=\"n\">wh1_1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"n\">workhorse2</span><span class=\"p\">(</span><span class=\"n\">wh2_1</span><span class=\"p\">,</span> <span class=\"n\">wh2_2</span><span class=\"p\">)</span>\n</pre>\n<p>In python you can avoid such scenarios by passing such arguments in <tt>**kwargs</tt> or in separate dictionaries but it\noften makes the code less explicit and readable:</p>\n<pre><span class=\"c1\"># It is more difficult to find out what's going on with ``*args``</span>\n<span class=\"c1\"># and ``**kwargs`` then with explicitly named arguments.</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Let the workhorses to cherry pick the parameters they</span>\n    <span class=\"c1\"># need and ignore the rest that they don't need.</span>\n    <span class=\"n\">workhorse1</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">workhorse2</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>You can also use two separate dictionaries or data objects to pass the arguments to the workhorses. This technique\nis better than keyword only argument passing when the workhorses have a lot of parameters and/or you have to pass\nthe arguments deeply through several calls but this solution is an an overkill in many simpler situations where the\nnumber of parameters isn\u2019t too high and there is no deep arg passing:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">wh1_args</span><span class=\"p\">,</span> <span class=\"n\">wh2_args</span><span class=\"p\">):</span>\n    <span class=\"c1\"># TODO: perhaps manipulate the input args...</span>\n    <span class=\"n\">workhorse1</span><span class=\"p\">(</span><span class=\"n\">wh1_args</span><span class=\"p\">)</span>\n    <span class=\"n\">workhorse2</span><span class=\"p\">(</span><span class=\"n\">wh2_args</span><span class=\"p\">)</span>\n</pre>\n<p>With keyword-only arguments the above problems don\u2019t exist. The new <cite>wh1_3</cite> argument can be placed anywhere in the\nkeyword-only argument part of the argument list (e.g.: after <tt>wh1_1</tt>) without affecting the rest of the code that\nalready calls this functions with other keyword-only args (given that they don\u2019t want to use the newly added arg).</p>\n</div>\n</div>\n<div id=\"implementation-details\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Implementation details</a></h2>\n<div id=\"python-2-function-signature-anatomy\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Python 2 function signature anatomy</a></h3>\n<p>A python2 function signature consists of the following optional parts. Any optional parts that are present in\na function signature appear in the listed order:</p>\n<ol>\n<li>Positional arguments<ol>\n<li>Required arguments (positional arguments without default value)</li>\n<li>Default arguments (positional arguments with default value)</li>\n<li><strong>Keyword-only arguments (non-standard, emulated/provided by this library)</strong></li>\n</ol>\n</li>\n<li>VarArgs (<tt>*args</tt>)</li>\n<li>VarKWArgs (<tt>**kwargs</tt>)</li>\n</ol>\n<p>As you see in standard python2 your positional argument list consists of zero or more required arguments followed by\nzero or more default arguments. This library can turn the last N default arguments (all/some of them) into keyword-only\narguments. With the help of this library you can now split the positional argument list of your python2 function\nsignatures into 3 parts instead of the standard 2.</p>\n<p>In python3 the keyword-only arguments reside between VarArgs and VarKWArgs but in python2 you can\u2019t put anything\nbetween those (it would be a syntax error) so your best bet to emulate keyword-only arguments is turning some of your\npositional arguments into keyword-only args.</p>\n<div id=\"emulated-keyword-only-args-vs-static-analyzers\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Emulated keyword-only args VS static analyzers</a></h4>\n<p>As discussed previously unfortunately we can declare our emulated python2 keyword-only arguments only before the\nVarArgs (<tt>*args</tt>) of the function. This means that our signature can have positional arguments not only before our\nkeyword-only args, but also after them (because VarArgs are positional). This may lead to false-positive\nwarnings/errors with static analyzers in the following case:</p>\n<p>If you have a function with both keyword-only arguments and VarArgs then static analyzers may treat some\nof the calls to this function suspicious (resulting in a false positive warning/error).</p>\n<pre><span class=\"nd\">@first_kwonly_arg</span><span class=\"p\">(</span><span class=\"s1\">'ko0'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a0</span><span class=\"p\">,</span> <span class=\"n\">d0</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ko0</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ko1</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># No problem: a0=0</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># No problem: a0=0, d0=1</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># No problem: a0=0 d0=1 args=(2,)</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The static analyzer will probably treat this as an error. It thinks that</span>\n<span class=\"c1\"># you pass both the positional argument 2 and ko0=3 to the ko0 arg of the</span>\n<span class=\"c1\"># function because it can't track down the magic done by the @first_kwonly_arg</span>\n<span class=\"c1\"># decorator and binds the passed parameters to the function args using standard</span>\n<span class=\"c1\"># python2 rules. If func() didn't have our @first_kwonly_arg decorator then</span>\n<span class=\"c1\"># this function call would probably cause an error like:</span>\n<span class=\"c1\"># TypeError: func() got multiple values for argument 'ko0'</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># However what actually happens as a result of the magic done by the</span>\n<span class=\"c1\"># decorator is: a0=0 d0=1 ko0=3 ko1=-1 args=(2,)</span>\n<span class=\"c1\"># The decorator ensures that positional parameters passed by function calls</span>\n<span class=\"c1\"># are bound only to positional non-keyword-only arguments and the VarArgs</span>\n<span class=\"c1\"># of the function.</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">ko0</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># No problem despite the fact that the static analyzer probably assumes</span>\n<span class=\"c1\"># something different than what actually happens. According to standard</span>\n<span class=\"c1\"># python2 arg binding rules the static analyzer probably thinks that:</span>\n<span class=\"c1\"># a0=0 d0=1 ko0=2 ko1=3 args=()</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># However the actual outcome caused by our decorator is:</span>\n<span class=\"c1\"># a0=0 d0=1 ko0=-1 ko1=3 args=(2,)</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">ko1</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>Despite the above issue a decorator like this can still be very useful. The reason for this is that for me it happens\nquite rarely that in a function I need both keyword-only arguments and VarArgs. I need VarArgs quite rarely in general\nwhile keyword-only arguments come in handy quite often. If this is the same for you then go on using this decorator in\nyour python2 projects and in the rare cases where you need both keyword-only arguments and VarArgs use one of the\nfollowing workarounds to aid this issue:</p>\n<ul>\n<li>Static analyzers are stupid! Don\u2019t use them! (Well, this was only a joke. :-D)</li>\n<li>In your static analyzer tool or service ignore the individual instances of these false positive warnings.</li>\n<li>Use <a href=\"#poor-man-s-python2-keyword-only-arguments\" rel=\"nofollow\">Poor man\u2019s python2 keyword-only arguments</a> with these problematic cases instead of decorating them and use the\ndecorator only with the rest (probably the majority) of the functions that don\u2019t have VarArgs.</li>\n</ul>\n</div>\n</div>\n<div id=\"poor-man-s-python2-keyword-only-arguments\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Poor man\u2019s python2 keyword-only arguments</a></h3>\n<p>I really like the benefits brought by keyword-only arguments. Long ago before extensively working with python I\u2019ve\nalready forged some coding-convention rules that have similar advantages (unordered arguments, specifying arg names\nwhile calling the function for readability) in other languages (e.g.: C/C++). Before thinking about using a python2\nsolution like the one provided by this library I\u2019ve used a \u201cmanually implemented poor man\u2019s python2 keyword-only args\u201d\nsolution like this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">default0</span><span class=\"o\">=</span><span class=\"s1\">'d0'</span><span class=\"p\">,</span> <span class=\"n\">default1</span><span class=\"o\">=</span><span class=\"s1\">'d1'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Keyword-only arg with a default value:</span>\n    <span class=\"n\">optional_kwonly0</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'kwonly0'</span><span class=\"p\">,</span> <span class=\"s1\">'ko0'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Required keyword-only arg:</span>\n    <span class=\"n\">required_kwonly1</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'kwonly1'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Checking whether the caller has passed an unexpected keyword argument.</span>\n    <span class=\"c1\"># Sometimes passing an unexpected keyword argument is simply the result</span>\n    <span class=\"c1\"># of a typo in the name of an expected arg. E.g.: kwnly0 instead of kwonly0</span>\n    <span class=\"n\">check_no_kwargs_left</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ... the rest of the function body</span>\n\n\n<span class=\"c1\"># utility function far away somewhere in a central place...</span>\n<span class=\"k\">def</span> <span class=\"nf\">check_no_kwargs_left</span><span class=\"p\">(</span><span class=\"n\">func_or_func_name</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">func_name</span> <span class=\"o\">=</span> <span class=\"n\">func_or_func_name</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">func_or_func_name</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">func_or_func_name</span>\n    <span class=\"n\">arg_names</span> <span class=\"o\">=</span> <span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">() got unexpected keyword argument(s): </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">func_name</span><span class=\"p\">,</span> <span class=\"n\">arg_names</span><span class=\"p\">))</span>\n</pre>\n<p>While I think the above solution if fairly good it still requires checking the function body too in order to see the\nfull signature and sometimes people may forget to check for leftover kwargs after popping the kwonly args.</p>\n</div>\n</div>\n<div id=\"why-does-this-library-exist\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Why does this \u201clibrary\u201d exist?</a></h2>\n<p>I\u2019ve checked out some other python2 keyword-only argument emulator code snippets and decided to roll my own just for\nfun and also for the following reasons:</p>\n<ul>\n<li>Some of those implementations provide you with a decorator with which you have to specify your keyword-only arguments\nwith their (usually zero based) index in the arg list of the function. This is error prone, I never liked the\nidea of identifying arguments with indexes. The only minor disadvantage of using arg names instead of arg indexes\nis that using arg names requires direct access to the signature of the <em>original</em> wrapped function.\nIf there are other decorators between our decorator and the original function then under python2 using names isn\u2019t\nreally possible (because <tt>functools.update_wrapper()</tt> and decorators in general don\u2019t have/support the\n<tt>__wrapped__</tt> attribute to maintain a chain back to the originally wrapped function).</li>\n<li>Some implementations allow you to pick an arbitrary set of positional arguments by specifying their indexes or names.\nI don\u2019t like the idea of promoting arbitrary positional arguments into keyword-only arguments by scattering\nkeyword-only args through the remaining positional args. It degrades code readability a lot. This is why I decided\nto keep positional arguments of the same type (required/default/kwonly) together in a well defined slice of the\npositional argument list.</li>\n<li><a href=\"https://github.com/pasztorpisti/kwonly-args/blob/7603c3a0f0c2d37d02c7220492de248f65ff0451/src/kwonly_args/__init__.py#L76-L118\" rel=\"nofollow\">The implementation of this solution</a> is brief (~40 lines of logic), simple, and well tested.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2062906, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1856109101477e1ae09c37c85ca3327e", "sha256": "f192d9092ef0f9f0c290e9a0336d362e52bdaae4aafad7e0260572855e4253a8"}, "downloads": -1, "filename": "kwonly_args-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1856109101477e1ae09c37c85ca3327e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5861, "upload_time": "2016-04-08T02:06:21", "upload_time_iso_8601": "2016-04-08T02:06:21.487777Z", "url": "https://files.pythonhosted.org/packages/87/d6/a8880ddca565002a7381680f4bf7aa4fdc2972c65590c9b0584d99cabdaf/kwonly_args-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "237dca6b405255b2a345af25b2c8cff4", "sha256": "02cff4850d35aa7e99f836c9ab272a300cde160e311208fff7dfd049caaa548a"}, "downloads": -1, "filename": "kwonly-args-1.0.0.tar.gz", "has_sig": false, "md5_digest": "237dca6b405255b2a345af25b2c8cff4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4604, "upload_time": "2016-04-08T02:06:52", "upload_time_iso_8601": "2016-04-08T02:06:52.404950Z", "url": "https://files.pythonhosted.org/packages/f1/fb/acfb0ce54a13494400e246e65c073cbbee64f5fe54446528f3f6e32287d7/kwonly-args-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "64ef1411ea307ac92ed1d9b12947ee10", "sha256": "a9b5a4e9841c6995a33326f1bf86f343eae4f32adbc61cb9b480fbad74f838c4"}, "downloads": -1, "filename": "kwonly_args-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "64ef1411ea307ac92ed1d9b12947ee10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7364, "upload_time": "2016-04-08T03:36:13", "upload_time_iso_8601": "2016-04-08T03:36:13.335505Z", "url": "https://files.pythonhosted.org/packages/77/97/067b275632f28f1cb431f1980a41c3dceaf1988abe514c68b8f780be0206/kwonly_args-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9192a3ae0ee8a3b802fd18d4316d9d16", "sha256": "61c0b92f44fb8168315c12b2e1f26e573139363eae6b87bb1534cb2ed373bd7b"}, "downloads": -1, "filename": "kwonly-args-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9192a3ae0ee8a3b802fd18d4316d9d16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5675, "upload_time": "2016-04-08T03:36:30", "upload_time_iso_8601": "2016-04-08T03:36:30.211466Z", "url": "https://files.pythonhosted.org/packages/80/f3/2784d095f2572ff5717f5bf215196b8ce61ee9659309832591539b15f580/kwonly-args-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "8fa638e660ef786042227f2370ba9534", "sha256": "3ece6ccf01113dc03fa72da3053b046fbe667d6a1277e16b1aa6397a4e72e1cb"}, "downloads": -1, "filename": "kwonly_args-1.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8fa638e660ef786042227f2370ba9534", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17894, "upload_time": "2016-04-14T00:22:53", "upload_time_iso_8601": "2016-04-14T00:22:53.328860Z", "url": "https://files.pythonhosted.org/packages/00/37/3251dc1c11f5e9c4b8fb1b3f433da4b55ec52e3fe5c14b13a2a558990260/kwonly_args-1.0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40cf6d064fec506d894eb3af238d174e", "sha256": "59c85e1fa626c0ead5438b64f10b53dda2459e0042ea24258c9dc2115979a598"}, "downloads": -1, "filename": "kwonly-args-1.0.10.tar.gz", "has_sig": false, "md5_digest": "40cf6d064fec506d894eb3af238d174e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19947, "upload_time": "2016-04-12T00:40:33", "upload_time_iso_8601": "2016-04-12T00:40:33.684894Z", "url": "https://files.pythonhosted.org/packages/ee/da/a7ba4f2153a536a895a9d29a222ee0f138d617862f9b982bd4ae33714308/kwonly-args-1.0.10.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d44d7ed91e22bfba20c36ab04dd8082e", "sha256": "6bd7e9c2cc1e787ea981162673c25231426c2beabe723ffb7e8fafe87e2b12d2"}, "downloads": -1, "filename": "kwonly_args-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d44d7ed91e22bfba20c36ab04dd8082e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11713, "upload_time": "2016-04-08T11:33:18", "upload_time_iso_8601": "2016-04-08T11:33:18.252062Z", "url": "https://files.pythonhosted.org/packages/05/8d/2a158174c6d4cbd5f579f0dd418ed89c66ddb0174d63a7233223a64b2b7f/kwonly_args-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90b0ca2d8107abc8f12b33463f3bfb23", "sha256": "916716c8e0b4c5220e84192eafedc4c35354500038d0cd1f82cc29bddcac3ee6"}, "downloads": -1, "filename": "kwonly-args-1.0.2.tar.gz", "has_sig": false, "md5_digest": "90b0ca2d8107abc8f12b33463f3bfb23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8089, "upload_time": "2016-04-08T11:33:48", "upload_time_iso_8601": "2016-04-08T11:33:48.403155Z", "url": "https://files.pythonhosted.org/packages/04/a4/8e750ae8fa0336ac3fb55a636ee5dc87090ccde2e78b999b5c1aeefe91af/kwonly-args-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "da9c45f83bef65171d59c7d508aab973", "sha256": "2f3bd9bf4a31e2c44d566cfb9ccd2cb3461687547011c797e194a7a5ee5eb9b1"}, "downloads": -1, "filename": "kwonly_args-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "da9c45f83bef65171d59c7d508aab973", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11749, "upload_time": "2016-04-08T12:13:53", "upload_time_iso_8601": "2016-04-08T12:13:53.695992Z", "url": "https://files.pythonhosted.org/packages/03/3e/9b60d801dc239684da9677fd0f292cdb90c1313b21fc3a8691ce8849562c/kwonly_args-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afcb15dc07d7667954d94c730086192c", "sha256": "3187022e3a49cd8c83c976dcbdad4072ef10011f75d8abf3da638d27c8bc736a"}, "downloads": -1, "filename": "kwonly-args-1.0.3.tar.gz", "has_sig": false, "md5_digest": "afcb15dc07d7667954d94c730086192c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8170, "upload_time": "2016-04-08T12:15:09", "upload_time_iso_8601": "2016-04-08T12:15:09.153500Z", "url": "https://files.pythonhosted.org/packages/5e/c8/4ae39e1f15c4433edc8dfdf8dc9f657c8c636f30308616cdbd74aa60f5e5/kwonly-args-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "c1ad8650d1f8525bfbad09fde4dd3656", "sha256": "16ce548f15742e55fd4216b47d5dbe7e4dcf49b67b09b562c538fe6e88d1e932"}, "downloads": -1, "filename": "kwonly_args-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c1ad8650d1f8525bfbad09fde4dd3656", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11747, "upload_time": "2016-04-08T12:52:47", "upload_time_iso_8601": "2016-04-08T12:52:47.080764Z", "url": "https://files.pythonhosted.org/packages/8d/7f/24d3b8af5a9a34d1b1b65ebcbccd00668cedffc0792fb7782a7e8ae1a89b/kwonly_args-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38042c0264db2e8192aecebfc0c88e10", "sha256": "d14e23ec6af5ee804b9265d6bd87bc9988d5d42141b2c42a2e1a7e309bc3c119"}, "downloads": -1, "filename": "kwonly-args-1.0.4.tar.gz", "has_sig": false, "md5_digest": "38042c0264db2e8192aecebfc0c88e10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8165, "upload_time": "2016-04-08T12:53:14", "upload_time_iso_8601": "2016-04-08T12:53:14.247123Z", "url": "https://files.pythonhosted.org/packages/2a/b3/e1b3806146c60cb942c8604165b16bc060c435cc5fcf28dc7dba1a2e7765/kwonly-args-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "b4911ae4b99d24020c52ecaaf37e656f", "sha256": "ab9321df0cd29e3038a569f182e6263485635fb9b4e728ccdcad7915e2dbaf32"}, "downloads": -1, "filename": "kwonly_args-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b4911ae4b99d24020c52ecaaf37e656f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16036, "upload_time": "2016-04-08T17:52:46", "upload_time_iso_8601": "2016-04-08T17:52:46.754962Z", "url": "https://files.pythonhosted.org/packages/10/dc/4d0c10b6846d288e5a8f80a6573b5f8bfd8c1d7a415943e9c512f787d095/kwonly_args-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47e90d116bdefc7945c510afde22b12d", "sha256": "0623b5539403c269a0e0a5285b2b07dd87c7bec7fe0d03163c1b843ef2f4c9e6"}, "downloads": -1, "filename": "kwonly-args-1.0.5.tar.gz", "has_sig": false, "md5_digest": "47e90d116bdefc7945c510afde22b12d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12122, "upload_time": "2016-04-08T17:53:44", "upload_time_iso_8601": "2016-04-08T17:53:44.034674Z", "url": "https://files.pythonhosted.org/packages/f8/d4/d1c6b60eac342b612dd593b3c88c76873a3f387201c652c0626a3e000274/kwonly-args-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "9324890e6cdcf27365c382a74e958af9", "sha256": "d8ddde4267b54450f00851d54138c80c4a68ae698f6025cf96ef231b726aaf96"}, "downloads": -1, "filename": "kwonly_args-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "9324890e6cdcf27365c382a74e958af9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15770, "upload_time": "2016-04-08T21:09:28", "upload_time_iso_8601": "2016-04-08T21:09:28.380601Z", "url": "https://files.pythonhosted.org/packages/91/80/7daa95fecfff3b7be10d3afdbf258a673b85d2fc895f22205558086e512a/kwonly_args-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f7945463912ff3ee3bb303da1f7a31b", "sha256": "17dcc6d4a1fc6b368660d4d51d9d5459373a3383733d70020e1db9b2eb401158"}, "downloads": -1, "filename": "kwonly-args-1.0.6.tar.gz", "has_sig": false, "md5_digest": "6f7945463912ff3ee3bb303da1f7a31b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11949, "upload_time": "2016-04-08T21:08:41", "upload_time_iso_8601": "2016-04-08T21:08:41.890834Z", "url": "https://files.pythonhosted.org/packages/58/bc/55603a8208bc38de7fc3975bfade6c072d022e9d2a9591fb177d3bfe868d/kwonly-args-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "833ab1e053b5cdc10adbaea8a3fb48f2", "sha256": "48b92d73f93bdef650bb5959ba444eef008bf3b35e1d0b6cf0f1d60ac292e06b"}, "downloads": -1, "filename": "kwonly_args-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "833ab1e053b5cdc10adbaea8a3fb48f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20060, "upload_time": "2016-04-09T12:51:47", "upload_time_iso_8601": "2016-04-09T12:51:47.505500Z", "url": "https://files.pythonhosted.org/packages/d5/ac/a1f0a2b677292464b03742eaac50103438b2ffccb528ca8c987003447a19/kwonly_args-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d27c804e9a108b6d82bfb20db35b8fc", "sha256": "11b7aeaaebfd2ebd11b118f322c28163c194e144e003ff408c2f78c89260ae3c"}, "downloads": -1, "filename": "kwonly-args-1.0.7.tar.gz", "has_sig": false, "md5_digest": "4d27c804e9a108b6d82bfb20db35b8fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15110, "upload_time": "2016-04-09T12:51:31", "upload_time_iso_8601": "2016-04-09T12:51:31.757489Z", "url": "https://files.pythonhosted.org/packages/87/da/cbbe8e0aee66ccd0d037755889e040054b42c689f4af1cbc50532992d129/kwonly-args-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "01da01d67d6e71734c6ee7077a724047", "sha256": "6f2e49da61074fa031cafa794301ac52361993fd7ebc8793172ef645ef70dbe8"}, "downloads": -1, "filename": "kwonly_args-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "01da01d67d6e71734c6ee7077a724047", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20207, "upload_time": "2016-04-09T15:25:25", "upload_time_iso_8601": "2016-04-09T15:25:25.594938Z", "url": "https://files.pythonhosted.org/packages/19/ab/4c68f85a260f5098b8d7972714967c27d22c4d5655568e2f02efdd09ed1b/kwonly_args-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f666f61096688c42d43414a2887c447", "sha256": "a9d06bb9fcabdffccb0bbf42b41e741420689b376348ba3b699b7b9d22a7b0bd"}, "downloads": -1, "filename": "kwonly-args-1.0.8.tar.gz", "has_sig": false, "md5_digest": "5f666f61096688c42d43414a2887c447", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16198, "upload_time": "2016-04-09T15:24:29", "upload_time_iso_8601": "2016-04-09T15:24:29.083930Z", "url": "https://files.pythonhosted.org/packages/5f/26/80a05ee28f0b80c8b0dc9cec83c2c9160e19bca7c265bfd4604ce69f5c8f/kwonly-args-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "c665a6e483fa0facb12afbdf7c4de85f", "sha256": "b53e0728b4d11a344e8d6e9d746dd0621ba64aa3ef8c295a9c5b94e87d749a3b"}, "downloads": -1, "filename": "kwonly_args-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "c665a6e483fa0facb12afbdf7c4de85f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20336, "upload_time": "2016-04-10T07:51:16", "upload_time_iso_8601": "2016-04-10T07:51:16.082603Z", "url": "https://files.pythonhosted.org/packages/62/9c/ae22ee4323cb17124d5250081fecc3049a1f1fcd82caabb33e0ed7271431/kwonly_args-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "801a833408f9d39e3ee93939ec2eccd9", "sha256": "110aecc6f37d623bf3413c2fbcd01cffe8528054107e1fecdf68ab81ebc6f46a"}, "downloads": -1, "filename": "kwonly-args-1.0.9.tar.gz", "has_sig": false, "md5_digest": "801a833408f9d39e3ee93939ec2eccd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16936, "upload_time": "2016-04-10T07:50:55", "upload_time_iso_8601": "2016-04-10T07:50:55.225585Z", "url": "https://files.pythonhosted.org/packages/d3/31/e3f645ee95f2c5da09dbb7e97f2d0fa8387224d4f676aa362981dd0bbef1/kwonly-args-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8fa638e660ef786042227f2370ba9534", "sha256": "3ece6ccf01113dc03fa72da3053b046fbe667d6a1277e16b1aa6397a4e72e1cb"}, "downloads": -1, "filename": "kwonly_args-1.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8fa638e660ef786042227f2370ba9534", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17894, "upload_time": "2016-04-14T00:22:53", "upload_time_iso_8601": "2016-04-14T00:22:53.328860Z", "url": "https://files.pythonhosted.org/packages/00/37/3251dc1c11f5e9c4b8fb1b3f433da4b55ec52e3fe5c14b13a2a558990260/kwonly_args-1.0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40cf6d064fec506d894eb3af238d174e", "sha256": "59c85e1fa626c0ead5438b64f10b53dda2459e0042ea24258c9dc2115979a598"}, "downloads": -1, "filename": "kwonly-args-1.0.10.tar.gz", "has_sig": false, "md5_digest": "40cf6d064fec506d894eb3af238d174e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19947, "upload_time": "2016-04-12T00:40:33", "upload_time_iso_8601": "2016-04-12T00:40:33.684894Z", "url": "https://files.pythonhosted.org/packages/ee/da/a7ba4f2153a536a895a9d29a222ee0f138d617862f9b982bd4ae33714308/kwonly-args-1.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:27 2020"}