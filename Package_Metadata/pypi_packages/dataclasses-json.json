{"info": {"author": "lidatong", "author_email": "charles.dt.li@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Dataclasses JSON\n\n![](https://github.com/lidatong/dataclasses-json/workflows/dataclasses-json/badge.svg)\n\nThis library provides a simple API for encoding and decoding [dataclasses](https://docs.python.org/3/library/dataclasses.html) to and from JSON.\n\nIt's very easy to get started.\n\n[Documentation website](https://lidatong.github.io/dataclasses-json)\n\n## Quickstart\n\n`pip install dataclasses-json`\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass SimpleExample:\n    int_field: int\n\nsimple_example = SimpleExample(1)\n\n# Encoding to JSON. Note the output is a string, not a dictionary.\nsimple_example.to_json()  # {\"int_field\": 1}\n\n# Encoding to a (JSON) dict\nsimple_example.to_dict()  # {'int_field': 1}\n\n# Decoding from JSON. Note the input is a string, not a dictionary.\nSimpleExample.from_json('{\"int_field\": 1}')  # SimpleExample(1)\n\n# Decoding from a (JSON) dict\nSimpleExample.from_dict({'int_field': 1})  # SimpleExample(1)\n```\n\n**What if you want to work with camelCase JSON?**\n\n```python\n# same imports as above, with the additional `LetterCase` import\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json, LetterCase\n\n@dataclass_json(letter_case=LetterCase.CAMEL)  # now all fields are encoded/decoded from camelCase\n@dataclass\nclass ConfiguredSimpleExample:\n    int_field: int\n\nConfiguredSimpleExample(1).to_json()  # {\"intField\": 1}\nConfiguredSimpleExample.from_json('{\"intField\": 1}')  # ConfiguredSimpleExample(1)\n```\n\n## Supported types\n\nIt's recursive (see caveats below), so you can easily work with nested dataclasses.\nIn addition to the supported types in the \n[py to JSON table](https://docs.python.org/3/library/json.html#py-to-json-table), this library supports the following:\n\n- any arbitrary [Collection](https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection) type is supported.\n[Mapping](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping) types are encoded as JSON objects and `str` types as JSON strings. \nAny other Collection types are encoded into JSON arrays, but decoded into the original collection types.\n\n- [datetime](https://docs.python.org/3/library/datetime.html#available-types) \nobjects. `datetime` objects are encoded to `float` (JSON number) using \n[timestamp](https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp).\nAs specified in the `datetime` docs, if your `datetime` object is naive, it will \nassume your system local timezone when calling `.timestamp()`. JSON numbers \ncorresponding to a `datetime` field in your dataclass are decoded \ninto a datetime-aware object, with `tzinfo` set to your system local timezone.\nThus, if you encode a datetime-naive object, you will decode into a \ndatetime-aware object. This is important, because encoding and decoding won't \nstrictly be inverses. See [this section](#Overriding) if you want to override this default\nbehavior (for example, if you want to use ISO).\n\n- [UUID](https://docs.python.org/3/library/uuid.html#uuid.UUID) objects. They \nare encoded as `str` (JSON string).\n\n- [Decimal](https://docs.python.org/3/library/decimal.html) objects. They are\nalso encoded as `str`.\n\n**The [latest release](https://github.com/lidatong/dataclasses-json/releases/latest) is compatible with both Python 3.7 and Python 3.6 (with the dataclasses backport).**\n\n## Usage\n\n#### Approach 1: Class decorator\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n\nlidatong = Person('lidatong')\n\n# Encoding to JSON\nlidatong.to_json()  # '{\"name\": \"lidatong\"}'\n\n# Decoding from JSON\nPerson.from_json('{\"name\": \"lidatong\"}')  # Person(name='lidatong')\n```\n\nNote that the `@dataclass_json` decorator must be stacked above the `@dataclass`\ndecorator (order matters!)\n\n#### Approach 2: Inherit from a mixin\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import DataClassJsonMixin\n\n@dataclass\nclass Person(DataClassJsonMixin):\n    name: str\n\nlidatong = Person('lidatong')\n\n# A different example from Approach 1 above, but usage is the exact same\nassert Person.from_json(lidatong.to_json()) == lidatong\n```\n\nPick whichever approach suits your taste. Note that there is better support for\n the mixin approach when using _static analysis_ tools (e.g. linting, typing),\n but the differences in implementation will be invisible in _runtime_ usage.\n\n## How do I...\n\n\n\n### Use my dataclass with JSON arrays or objects?\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n```\n\n**Encode into a JSON array containing instances of my Data Class**\n\n```python\npeople_json = [Person('lidatong')]\nPerson.schema().dumps(people_json, many=True)  # '[{\"name\": \"lidatong\"}]'\n```\n\n**Decode a JSON array containing instances of my Data Class**\n\n```python\npeople_json = '[{\"name\": \"lidatong\"}]'\nPerson.schema().loads(people_json, many=True)  # [Person(name='lidatong')]\n```\n\n**Encode as part of a larger JSON object containing my Data Class (e.g. an HTTP \nrequest/response)**\n\n```python\nimport json\n\nresponse_dict = {\n    'response': {\n        'person': Person('lidatong').to_dict()\n    }\n}\n\nresponse_json = json.dumps(response_dict)\n```\n\nIn this case, we do two steps. First, we encode the dataclass into a \n**python dictionary** rather than a JSON string, using `.to_dict`. \n\nSecond, we leverage the built-in `json.dumps` to serialize our `dataclass` into \na JSON string.\n\n**Decode as part of a larger JSON object containing my Data Class (e.g. an HTTP \nresponse)**\n\n```python\nimport json\n\nresponse_dict = json.loads('{\"response\": {\"person\": {\"name\": \"lidatong\"}}}')\n\nperson_dict = response_dict['response']\n\nperson = Person.from_dict(person_dict)\n```\n\nIn a similar vein to encoding above, we leverage the built-in `json` module.\n\nFirst, call `json.loads` to read the entire JSON object into a \ndictionary. We then access the key of the value containing the encoded dict of \nour `Person` that we want to decode (`response_dict['response']`).\n\nSecond, we load in the dictionary using `Person.from_dict`.\n\n\n### Encode or decode into Python lists/dictionaries rather than JSON?\n\nThis can be by calling `.schema()` and then using the corresponding \nencoder/decoder methods, ie. `.load(...)`/`.dump(...)`.\n\n**Encode into a single Python dictionary**\n\n```python\nperson = Person('lidatong')\nperson.to_dict()  # {'name': 'lidatong'}\n```\n\n**Encode into a list of Python dictionaries**\n\n```python\npeople = [Person('lidatong')]\nPerson.schema().dump(people, many=True)  # [{'name': 'lidatong'}]\n```\n\n**Decode a dictionary into a single dataclass instance**\n\n```python\nperson_dict = {'name': 'lidatong'}\nPerson.from_dict(person_dict)  # Person(name='lidatong')\n```\n\n**Decode a list of dictionaries into a list of dataclass instances**\n\n```python\npeople_dicts = [{\"name\": \"lidatong\"}]\nPerson.schema().load(people_dicts, many=True)  # [Person(name='lidatong')]\n```\n\n### Encode or decode from camelCase (or kebab-case)?\n\nJSON letter case by convention is camelCase, in Python members are by convention snake_case.\n\nYou can configure it to encode/decode from other casing schemes at both the class level and the field level.\n\n```python\nfrom dataclasses import dataclass, field\n\nfrom dataclasses_json import LetterCase, config, dataclass_json\n\n\n# changing casing at the class level\n@dataclass_json(letter_case=LetterCase.CAMEL)\n@dataclass\nclass Person:\n    given_name: str\n    family_name: str\n\nPerson('Alice', 'Liddell').to_json()  # '{\"givenName\": \"Alice\"}'\nPerson.from_json('{\"givenName\": \"Alice\", \"familyName\": \"Liddell\"}')  # Person('Alice', 'Liddell')\n\n# at the field level\n@dataclass_json\n@dataclass\nclass Person:\n    given_name: str = field(metadata=config(letter_case=LetterCase.CAMEL))\n    family_name: str\n\nPerson('Alice', 'Liddell').to_json()  # '{\"givenName\": \"Alice\"}'\n# notice how the `family_name` field is still snake_case, because it wasn't configured above\nPerson.from_json('{\"givenName\": \"Alice\", \"family_name\": \"Liddell\"}')  # Person('Alice', 'Liddell')\n```\n\n**This library assumes your field follows the Python convention of snake_case naming.**\nIf your field is not `snake_case` to begin with and you attempt to parameterize `LetterCase`, \nthe behavior of encoding/decoding is undefined (most likely it will result in subtle bugs).\n\n### Encode or decode using a different name\n\n```python\nfrom dataclasses import dataclass, field\n\nfrom dataclasses_json import config, dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    given_name: str = field(metadata=config(field_name=\"overriddenGivenName\"))\n\nPerson(given_name=\"Alice\", family_name='Liddell')  # Person('Alice')\nPerson.from_json('{\"overriddenGivenName\": \"Alice\"}')  # Person('Alice')\nPerson('Alice', 'Liddell').to_json()  # {\"overriddenGivenName\": \"Alice\"}\n```\n\n### Handle missing or optional field values when decoding?\n\nBy default, any fields in your dataclass that use `default` or \n`default_factory` will have the values filled with the provided default, if the\ncorresponding field is missing from the JSON you're decoding.\n\n**Decode JSON with missing field**\n\n```python\n@dataclass_json\n@dataclass\nclass Student:\n    id: int\n    name: str = 'student'\n\nStudent.from_json('{\"id\": 1}')  # Student(id=1, name='student')\n```\n\nNotice `from_json` filled the field `name` with the specified default 'student'\nwhen it was missing from the JSON.\n\nSometimes you have fields that are typed as `Optional`, but you don't \nnecessarily want to assign a default. In that case, you can use the \n`infer_missing` kwarg to make `from_json` infer the missing field value as `None`.\n\n**Decode optional field without default**\n\n```python\n@dataclass_json\n@dataclass\nclass Tutor:\n    id: int\n    student: Optional[Student] = None\n\nTutor.from_json('{\"id\": 1}')  # Tutor(id=1, student=None)\n```\n\nPersonally I recommend you leverage dataclass defaults rather than using \n`infer_missing`, but if for some reason you need to decouple the behavior of \nJSON decoding from the field's default value, this will allow you to do so.\n\n\n### Handle unknown input data?\n\nBy default, it is up to the implementation what happens when a `json_dataclass` receives input parameters that are not defined.\n(the `from_dict` method ignores them, when loading using `schema()` a ValidationError is raised.)\nThere are three ways to customize this behavior.\n\nAssume you want to instantiate a dataclass with the following dictionary:\n```python\ndump_dict = {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}, \"undefined_field_name\": [1, 2, 3]}\n```\n\n1. You can enforce to always raise an error by setting the `undefined` keyword to `Undefined.RAISE`\n (`'RAISE'` as a case-insensitive string works as well). Of course it works normally if you don't pass any undefined parameters.\n\n    ```python\n    from dataclasses_json import Undefined\n\n    @dataclass_json(undefined=Undefined.RAISE)\n    @dataclass()\n    class ExactAPIDump:\n        endpoint: str\n        data: Dict[str, Any]\n\n    dump = ExactAPIDump.from_dict(dump_dict)  # raises UndefinedParameterError\n    ```\n\n2. You can simply ignore any undefined parameters by setting the `undefined` keyword to `Undefined.EXCLUDE`\n (`'EXCLUDE'` as a case-insensitive string works as well). Note that you will not be able to retrieve them using `to_dict`:\n\n    ```python\n    from dataclasses_json import Undefined\n\n    @dataclass_json(undefined=Undefined.EXCLUDE)\n    @dataclass()\n    class DontCareAPIDump:\n        endpoint: str\n        data: Dict[str, Any]\n\n    dump = DontCareAPIDump.from_dict(dump_dict)  # DontCareAPIDump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'})\n    dump.to_dict()  # {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}}\n    ```\n\n3. You can save them in a catch-all field and do whatever needs to be done later. Simply set the `undefined`\nkeyword to `Undefined.INCLUDE` (`'INCLUDE'` as a case-insensitive string works as well) and define a field\nof type `CatchAll` where all unknown values will end up.\n This simply represents a dictionary that can hold anything. \n If there are no undefined parameters, this will be an empty dictionary.\n\n    ```python\n    from dataclasses_json import Undefined, CatchAll\n\n    @dataclass_json(undefined=Undefined.INCLUDE)\n    @dataclass()\n    class UnknownAPIDump:\n        endpoint: str\n        data: Dict[str, Any]\n        unknown_things: CatchAll\n\n    dump = UnknownAPIDump.from_dict(dump_dict)  # UnknownAPIDump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'}, unknown_things={'undefined_field_name': [1, 2, 3]})\n    dump.to_dict()  # {'endpoint': 'some_api_endpoint', 'data': {'foo': 1, 'bar': '2'}, 'undefined_field_name': [1, 2, 3]}\n    ```\n\n    - When using `Undefined.INCLUDE`, an `UndefinedParameterError` will be raised if you don't specify\n    exactly one field of type `CatchAll`.\n    - Note that `LetterCase` does not affect values written into the `CatchAll` field, they will be as they are given.\n    - When specifying a default (or a default factory) for the the `CatchAll`-field, e.g. `unknown_things: CatchAll = None`, the default value will be used instead of an empty dict if there are no undefined parameters.\n    - Calling __init__ with non-keyword arguments resolves the arguments to the defined fields and writes everything else into the catch-all field.\n\n4. All 3 options work as well using `schema().loads` and `schema().dumps`, as long as you don't overwrite it by specifying `schema(unknown=<a marshmallow value>)`.\nmarshmallow uses the same 3 keywords ['include', 'exclude', 'raise'](https://marshmallow.readthedocs.io/en/stable/quickstart.html#handling-unknown-fields).\n\n5. All 3 operations work as well using `__init__`, e.g. `UnknownAPIDump(**dump_dict)` will **not** raise a `TypeError`, but write all unknown values to the field tagged as `CatchAll`.\n   Classes tagged with `EXCLUDE` will also simply ignore unknown parameters. Note that classes tagged as `RAISE` still raise a `TypeError`, and **not** a `UndefinedParameterError` if supplied with unknown keywords.\n\n### Explanation\n\nBriefly, on what's going on under the hood in the above examples: calling \n`.schema()` will have this library generate a\n[marshmallow schema]('https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema)\nfor you. It also fills in the corresponding object hook, so that marshmallow\nwill create an instance of your Data Class on `load` (e.g.\n`Person.schema().load` returns a `Person`) rather than a `dict`, which it does\nby default in marshmallow.\n\n**Performance note**\n\n`.schema()` is not cached (it generates the schema on every call), so if you\nhave a nested Data Class you may want to save the result to a variable to \navoid re-generation of the schema on every usage.\n\n```python\nperson_schema = Person.schema()\nperson_schema.dump(people, many=True)\n\n# later in the code...\n\nperson_schema.dump(person)\n```\n\n\n### Override the default encode / decode / marshmallow field of a specific field?\n\nSee [Overriding](#Overriding)\n\n\n\n## Marshmallow interop\n\nUsing the `dataclass_json` decorator or mixing in `DataClassJsonMixin` will\nprovide you with an additional method `.schema()`.\n\n`.schema()` generates a schema exactly equivalent to manually creating a\nmarshmallow schema for your dataclass. You can reference the [marshmallow API docs](https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema)\nto learn other ways you can use the schema returned by `.schema()`.\n\nYou can pass in the exact same arguments to `.schema()` that you would when\nconstructing a `PersonSchema` instance, e.g. `.schema(many=True)`, and they will\nget passed through to the marshmallow schema.\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Person:\n    name: str\n\n# You don't need to do this - it's generated for you by `.schema()`!\nfrom marshmallow import Schema, fields\n\nclass PersonSchema(Schema):\n    name = fields.Str()\n```\n\n## Overriding / Extending\n\n#### Overriding\n\nFor example, you might want to encode/decode `datetime` objects using ISO format\nrather than the default `timestamp`.\n\n```python\nfrom dataclasses import dataclass, field\nfrom dataclasses_json import dataclass_json, config\nfrom datetime import datetime\nfrom marshmallow import fields\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: datetime = field(\n        metadata=config(\n            encoder=datetime.isoformat,\n            decoder=datetime.fromisoformat,\n            mm_field=fields.DateTime(format='iso')\n        )\n    )\n```\n\n#### Extending\n\nSimilarly, you might want to extend `dataclasses_json` to encode `date` objects.\n\n```python\nfrom dataclasses import dataclass, field\nfrom dataclasses_json import dataclass_json, config\nfrom datetime import date\nfrom marshmallow import fields\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: date = field(\n        metadata=config(\n            encoder= date.isoformat,\n            decoder= date.fromisoformat,\n            mm_field= fields.DateTime(format='iso')\n        ))\n```\n\nAs you can see, you can **override** or **extend** the default codecs by providing a \"hook\" via a \ncallable:\n- `encoder`: a callable, which will be invoked to convert the field value when encoding to JSON\n- `decoder`: a callable, which will be invoked to convert the JSON value when decoding from JSON\n- `mm_field`: a marshmallow field, which will affect the behavior of any operations involving `.schema()`\n\nNote that these hooks will be invoked regardless if you're using \n`.to_json`/`dump`/`dumps`\nand `.from_json`/`load`/`loads`. So apply overrides / extensions judiciously, making sure to \ncarefully consider whether the interaction of the encode/decode/mm_field is consistent with what you expect!\n\n\n#### What if I have other dataclass field extensions that rely on `metadata`\n\nAll the `dataclasses_json.config` does is return a mapping, namespaced under the key `'dataclasses_json'`.\n\nSay there's another module, `other_dataclass_package` that uses metadata. Here's how you solve your problem:\n\n```python\nmetadata = {'other_dataclass_package': 'some metadata...'}  # pre-existing metadata for another dataclass package\ndataclass_json_config = config(\n            encoder=datetime.isoformat,\n            decoder=datetime.fromisoformat,\n            mm_field=fields.DateTime(format='iso')\n        )\nmetadata.update(dataclass_json_config)\n\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: datetime = field(metadata=metadata)\n```\n\nYou can also manually specify the dataclass_json configuration mapping.\n\n```python\n@dataclass_json\n@dataclass\nclass DataClassWithIsoDatetime:\n    created_at: date = field(\n        metadata={'dataclasses_json': {\n            'encoder': date.isoformat,\n            'decoder': date.fromisoformat,\n            'mm_field': fields.DateTime(format='iso')\n        }}\n    )\n```\n\n## A larger example\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\nfrom typing import List\n\n@dataclass_json\n@dataclass(frozen=True)\nclass Minion:\n    name: str\n\n\n@dataclass_json\n@dataclass(frozen=True)\nclass Boss:\n    minions: List[Minion]\n\nboss = Boss([Minion('evil minion'), Minion('very evil minion')])\nboss_json = \"\"\"\n{\n    \"minions\": [\n        {\n            \"name\": \"evil minion\"\n        },\n        {\n            \"name\": \"very evil minion\"\n        }\n    ]\n}\n\"\"\".strip()\n\nassert boss.to_json(indent=4) == boss_json\nassert Boss.from_json(boss_json) == boss\n```\n\n## Self Recursion\nObject hierarchies where fields are of the type that they are declared within require a small\ntype hinting trick to declare the forward reference.\n```python\nfrom typing import Optional\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass Tree():\n    value: str\n    left: Optional['Tree']\n    right: Optional['Tree']\n```\n\nAvoid using\n```python\nfrom __future__ import annotations\n```\nas it will cause problems with the way dataclasses_json accesses the type annotations.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lidatong/dataclasses-json", "keywords": "dataclasses json", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dataclasses-json", "package_url": "https://pypi.org/project/dataclasses-json/", "platform": "", "project_url": "https://pypi.org/project/dataclasses-json/", "project_urls": {"Homepage": "https://github.com/lidatong/dataclasses-json"}, "release_url": "https://pypi.org/project/dataclasses-json/0.4.2/", "requires_dist": ["marshmallow (<4.0.0,>=3.3.0)", "marshmallow-enum (<2.0.0,>=1.5.1)", "typing-inspect (>=0.4.0)", "stringcase (<2.0.0,==1.2.0)", "dataclasses ; python_version == \"3.6\"", "pytest ; extra == 'dev'", "ipython ; extra == 'dev'", "mypy (>=0.710) ; extra == 'dev'", "hypothesis ; extra == 'dev'", "portray ; extra == 'dev'", "flake8 ; extra == 'dev'", "simplejson ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "Easily serialize dataclasses to and from JSON", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dataclasses JSON</h1>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ae3afd5107549ed6ce6aadc3b6021eef2b04449/68747470733a2f2f6769746875622e636f6d2f6c696461746f6e672f64617461636c61737365732d6a736f6e2f776f726b666c6f77732f64617461636c61737365732d6a736f6e2f62616467652e737667\"></p>\n<p>This library provides a simple API for encoding and decoding <a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">dataclasses</a> to and from JSON.</p>\n<p>It's very easy to get started.</p>\n<p><a href=\"https://lidatong.github.io/dataclasses-json\" rel=\"nofollow\">Documentation website</a></p>\n<h2>Quickstart</h2>\n<p><code>pip install dataclasses-json</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">SimpleExample</span><span class=\"p\">:</span>\n    <span class=\"n\">int_field</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"n\">simple_example</span> <span class=\"o\">=</span> <span class=\"n\">SimpleExample</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Encoding to JSON. Note the output is a string, not a dictionary.</span>\n<span class=\"n\">simple_example</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>  <span class=\"c1\"># {\"int_field\": 1}</span>\n\n<span class=\"c1\"># Encoding to a (JSON) dict</span>\n<span class=\"n\">simple_example</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>  <span class=\"c1\"># {'int_field': 1}</span>\n\n<span class=\"c1\"># Decoding from JSON. Note the input is a string, not a dictionary.</span>\n<span class=\"n\">SimpleExample</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'{\"int_field\": 1}'</span><span class=\"p\">)</span>  <span class=\"c1\"># SimpleExample(1)</span>\n\n<span class=\"c1\"># Decoding from a (JSON) dict</span>\n<span class=\"n\">SimpleExample</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span><span class=\"s1\">'int_field'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>  <span class=\"c1\"># SimpleExample(1)</span>\n</pre>\n<p><strong>What if you want to work with camelCase JSON?</strong></p>\n<pre><span class=\"c1\"># same imports as above, with the additional `LetterCase` import</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span><span class=\"p\">,</span> <span class=\"n\">LetterCase</span>\n\n<span class=\"nd\">@dataclass_json</span><span class=\"p\">(</span><span class=\"n\">letter_case</span><span class=\"o\">=</span><span class=\"n\">LetterCase</span><span class=\"o\">.</span><span class=\"n\">CAMEL</span><span class=\"p\">)</span>  <span class=\"c1\"># now all fields are encoded/decoded from camelCase</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">ConfiguredSimpleExample</span><span class=\"p\">:</span>\n    <span class=\"n\">int_field</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"n\">ConfiguredSimpleExample</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>  <span class=\"c1\"># {\"intField\": 1}</span>\n<span class=\"n\">ConfiguredSimpleExample</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'{\"intField\": 1}'</span><span class=\"p\">)</span>  <span class=\"c1\"># ConfiguredSimpleExample(1)</span>\n</pre>\n<h2>Supported types</h2>\n<p>It's recursive (see caveats below), so you can easily work with nested dataclasses.\nIn addition to the supported types in the\n<a href=\"https://docs.python.org/3/library/json.html#py-to-json-table\" rel=\"nofollow\">py to JSON table</a>, this library supports the following:</p>\n<ul>\n<li>\n<p>any arbitrary <a href=\"https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection\" rel=\"nofollow\">Collection</a> type is supported.\n<a href=\"https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping\" rel=\"nofollow\">Mapping</a> types are encoded as JSON objects and <code>str</code> types as JSON strings.\nAny other Collection types are encoded into JSON arrays, but decoded into the original collection types.</p>\n</li>\n<li>\n<p><a href=\"https://docs.python.org/3/library/datetime.html#available-types\" rel=\"nofollow\">datetime</a>\nobjects. <code>datetime</code> objects are encoded to <code>float</code> (JSON number) using\n<a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp\" rel=\"nofollow\">timestamp</a>.\nAs specified in the <code>datetime</code> docs, if your <code>datetime</code> object is naive, it will\nassume your system local timezone when calling <code>.timestamp()</code>. JSON numbers\ncorresponding to a <code>datetime</code> field in your dataclass are decoded\ninto a datetime-aware object, with <code>tzinfo</code> set to your system local timezone.\nThus, if you encode a datetime-naive object, you will decode into a\ndatetime-aware object. This is important, because encoding and decoding won't\nstrictly be inverses. See <a href=\"#Overriding\" rel=\"nofollow\">this section</a> if you want to override this default\nbehavior (for example, if you want to use ISO).</p>\n</li>\n<li>\n<p><a href=\"https://docs.python.org/3/library/uuid.html#uuid.UUID\" rel=\"nofollow\">UUID</a> objects. They\nare encoded as <code>str</code> (JSON string).</p>\n</li>\n<li>\n<p><a href=\"https://docs.python.org/3/library/decimal.html\" rel=\"nofollow\">Decimal</a> objects. They are\nalso encoded as <code>str</code>.</p>\n</li>\n</ul>\n<p><strong>The <a href=\"https://github.com/lidatong/dataclasses-json/releases/latest\" rel=\"nofollow\">latest release</a> is compatible with both Python 3.7 and Python 3.6 (with the dataclasses backport).</strong></p>\n<h2>Usage</h2>\n<h4>Approach 1: Class decorator</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">lidatong</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'lidatong'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Encoding to JSON</span>\n<span class=\"n\">lidatong</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>  <span class=\"c1\"># '{\"name\": \"lidatong\"}'</span>\n\n<span class=\"c1\"># Decoding from JSON</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'{\"name\": \"lidatong\"}'</span><span class=\"p\">)</span>  <span class=\"c1\"># Person(name='lidatong')</span>\n</pre>\n<p>Note that the <code>@dataclass_json</code> decorator must be stacked above the <code>@dataclass</code>\ndecorator (order matters!)</p>\n<h4>Approach 2: Inherit from a mixin</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">DataClassJsonMixin</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">DataClassJsonMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">lidatong</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'lidatong'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># A different example from Approach 1 above, but usage is the exact same</span>\n<span class=\"k\">assert</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">lidatong</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"n\">lidatong</span>\n</pre>\n<p>Pick whichever approach suits your taste. Note that there is better support for\nthe mixin approach when using <em>static analysis</em> tools (e.g. linting, typing),\nbut the differences in implementation will be invisible in <em>runtime</em> usage.</p>\n<h2>How do I...</h2>\n<h3>Use my dataclass with JSON arrays or objects?</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</pre>\n<p><strong>Encode into a JSON array containing instances of my Data Class</strong></p>\n<pre><span class=\"n\">people_json</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'lidatong'</span><span class=\"p\">)]</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">people_json</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># '[{\"name\": \"lidatong\"}]'</span>\n</pre>\n<p><strong>Decode a JSON array containing instances of my Data Class</strong></p>\n<pre><span class=\"n\">people_json</span> <span class=\"o\">=</span> <span class=\"s1\">'[{\"name\": \"lidatong\"}]'</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">people_json</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># [Person(name='lidatong')]</span>\n</pre>\n<p><strong>Encode as part of a larger JSON object containing my Data Class (e.g. an HTTP\nrequest/response)</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">response_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'response'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'person'</span><span class=\"p\">:</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'lidatong'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">response_json</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">response_dict</span><span class=\"p\">)</span>\n</pre>\n<p>In this case, we do two steps. First, we encode the dataclass into a\n<strong>python dictionary</strong> rather than a JSON string, using <code>.to_dict</code>.</p>\n<p>Second, we leverage the built-in <code>json.dumps</code> to serialize our <code>dataclass</code> into\na JSON string.</p>\n<p><strong>Decode as part of a larger JSON object containing my Data Class (e.g. an HTTP\nresponse)</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">response_dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'{\"response\": {\"person\": {\"name\": \"lidatong\"}}}'</span><span class=\"p\">)</span>\n\n<span class=\"n\">person_dict</span> <span class=\"o\">=</span> <span class=\"n\">response_dict</span><span class=\"p\">[</span><span class=\"s1\">'response'</span><span class=\"p\">]</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">person_dict</span><span class=\"p\">)</span>\n</pre>\n<p>In a similar vein to encoding above, we leverage the built-in <code>json</code> module.</p>\n<p>First, call <code>json.loads</code> to read the entire JSON object into a\ndictionary. We then access the key of the value containing the encoded dict of\nour <code>Person</code> that we want to decode (<code>response_dict['response']</code>).</p>\n<p>Second, we load in the dictionary using <code>Person.from_dict</code>.</p>\n<h3>Encode or decode into Python lists/dictionaries rather than JSON?</h3>\n<p>This can be by calling <code>.schema()</code> and then using the corresponding\nencoder/decoder methods, ie. <code>.load(...)</code>/<code>.dump(...)</code>.</p>\n<p><strong>Encode into a single Python dictionary</strong></p>\n<pre><span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'lidatong'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>  <span class=\"c1\"># {'name': 'lidatong'}</span>\n</pre>\n<p><strong>Encode into a list of Python dictionaries</strong></p>\n<pre><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'lidatong'</span><span class=\"p\">)]</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># [{'name': 'lidatong'}]</span>\n</pre>\n<p><strong>Decode a dictionary into a single dataclass instance</strong></p>\n<pre><span class=\"n\">person_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'lidatong'</span><span class=\"p\">}</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">person_dict</span><span class=\"p\">)</span>  <span class=\"c1\"># Person(name='lidatong')</span>\n</pre>\n<p><strong>Decode a list of dictionaries into a list of dataclass instances</strong></p>\n<pre><span class=\"n\">people_dicts</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"lidatong\"</span><span class=\"p\">}]</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">people_dicts</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># [Person(name='lidatong')]</span>\n</pre>\n<h3>Encode or decode from camelCase (or kebab-case)?</h3>\n<p>JSON letter case by convention is camelCase, in Python members are by convention snake_case.</p>\n<p>You can configure it to encode/decode from other casing schemes at both the class level and the field level.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">LetterCase</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dataclass_json</span>\n\n\n<span class=\"c1\"># changing casing at the class level</span>\n<span class=\"nd\">@dataclass_json</span><span class=\"p\">(</span><span class=\"n\">letter_case</span><span class=\"o\">=</span><span class=\"n\">LetterCase</span><span class=\"o\">.</span><span class=\"n\">CAMEL</span><span class=\"p\">)</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"n\">given_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">family_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Liddell'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>  <span class=\"c1\"># '{\"givenName\": \"Alice\"}'</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'{\"givenName\": \"Alice\", \"familyName\": \"Liddell\"}'</span><span class=\"p\">)</span>  <span class=\"c1\"># Person('Alice', 'Liddell')</span>\n\n<span class=\"c1\"># at the field level</span>\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"n\">given_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">letter_case</span><span class=\"o\">=</span><span class=\"n\">LetterCase</span><span class=\"o\">.</span><span class=\"n\">CAMEL</span><span class=\"p\">))</span>\n    <span class=\"n\">family_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Liddell'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>  <span class=\"c1\"># '{\"givenName\": \"Alice\"}'</span>\n<span class=\"c1\"># notice how the `family_name` field is still snake_case, because it wasn't configured above</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'{\"givenName\": \"Alice\", \"family_name\": \"Liddell\"}'</span><span class=\"p\">)</span>  <span class=\"c1\"># Person('Alice', 'Liddell')</span>\n</pre>\n<p><strong>This library assumes your field follows the Python convention of snake_case naming.</strong>\nIf your field is not <code>snake_case</code> to begin with and you attempt to parameterize <code>LetterCase</code>,\nthe behavior of encoding/decoding is undefined (most likely it will result in subtle bugs).</p>\n<h3>Encode or decode using a different name</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dataclass_json</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"n\">given_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">field_name</span><span class=\"o\">=</span><span class=\"s2\">\"overriddenGivenName\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">given_name</span><span class=\"o\">=</span><span class=\"s2\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"n\">family_name</span><span class=\"o\">=</span><span class=\"s1\">'Liddell'</span><span class=\"p\">)</span>  <span class=\"c1\"># Person('Alice')</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'{\"overriddenGivenName\": \"Alice\"}'</span><span class=\"p\">)</span>  <span class=\"c1\"># Person('Alice')</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Liddell'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>  <span class=\"c1\"># {\"overriddenGivenName\": \"Alice\"}</span>\n</pre>\n<h3>Handle missing or optional field values when decoding?</h3>\n<p>By default, any fields in your dataclass that use <code>default</code> or\n<code>default_factory</code> will have the values filled with the provided default, if the\ncorresponding field is missing from the JSON you're decoding.</p>\n<p><strong>Decode JSON with missing field</strong></p>\n<pre><span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">:</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'student'</span>\n\n<span class=\"n\">Student</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'{\"id\": 1}'</span><span class=\"p\">)</span>  <span class=\"c1\"># Student(id=1, name='student')</span>\n</pre>\n<p>Notice <code>from_json</code> filled the field <code>name</code> with the specified default 'student'\nwhen it was missing from the JSON.</p>\n<p>Sometimes you have fields that are typed as <code>Optional</code>, but you don't\nnecessarily want to assign a default. In that case, you can use the\n<code>infer_missing</code> kwarg to make <code>from_json</code> infer the missing field value as <code>None</code>.</p>\n<p><strong>Decode optional field without default</strong></p>\n<pre><span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Tutor</span><span class=\"p\">:</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">student</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Student</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">Tutor</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'{\"id\": 1}'</span><span class=\"p\">)</span>  <span class=\"c1\"># Tutor(id=1, student=None)</span>\n</pre>\n<p>Personally I recommend you leverage dataclass defaults rather than using\n<code>infer_missing</code>, but if for some reason you need to decouple the behavior of\nJSON decoding from the field's default value, this will allow you to do so.</p>\n<h3>Handle unknown input data?</h3>\n<p>By default, it is up to the implementation what happens when a <code>json_dataclass</code> receives input parameters that are not defined.\n(the <code>from_dict</code> method ignores them, when loading using <code>schema()</code> a ValidationError is raised.)\nThere are three ways to customize this behavior.</p>\n<p>Assume you want to instantiate a dataclass with the following dictionary:</p>\n<pre><span class=\"n\">dump_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"endpoint\"</span><span class=\"p\">:</span> <span class=\"s2\">\"some_api_endpoint\"</span><span class=\"p\">,</span> <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2\"</span><span class=\"p\">},</span> <span class=\"s2\">\"undefined_field_name\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]}</span>\n</pre>\n<ol>\n<li>\n<p>You can enforce to always raise an error by setting the <code>undefined</code> keyword to <code>Undefined.RAISE</code>\n(<code>'RAISE'</code> as a case-insensitive string works as well). Of course it works normally if you don't pass any undefined parameters.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">Undefined</span>\n\n<span class=\"nd\">@dataclass_json</span><span class=\"p\">(</span><span class=\"n\">undefined</span><span class=\"o\">=</span><span class=\"n\">Undefined</span><span class=\"o\">.</span><span class=\"n\">RAISE</span><span class=\"p\">)</span>\n<span class=\"nd\">@dataclass</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExactAPIDump</span><span class=\"p\">:</span>\n    <span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>\n\n<span class=\"n\">dump</span> <span class=\"o\">=</span> <span class=\"n\">ExactAPIDump</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">dump_dict</span><span class=\"p\">)</span>  <span class=\"c1\"># raises UndefinedParameterError</span>\n</pre>\n</li>\n<li>\n<p>You can simply ignore any undefined parameters by setting the <code>undefined</code> keyword to <code>Undefined.EXCLUDE</code>\n(<code>'EXCLUDE'</code> as a case-insensitive string works as well). Note that you will not be able to retrieve them using <code>to_dict</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">Undefined</span>\n\n<span class=\"nd\">@dataclass_json</span><span class=\"p\">(</span><span class=\"n\">undefined</span><span class=\"o\">=</span><span class=\"n\">Undefined</span><span class=\"o\">.</span><span class=\"n\">EXCLUDE</span><span class=\"p\">)</span>\n<span class=\"nd\">@dataclass</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">DontCareAPIDump</span><span class=\"p\">:</span>\n    <span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>\n\n<span class=\"n\">dump</span> <span class=\"o\">=</span> <span class=\"n\">DontCareAPIDump</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">dump_dict</span><span class=\"p\">)</span>  <span class=\"c1\"># DontCareAPIDump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'})</span>\n<span class=\"n\">dump</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>  <span class=\"c1\"># {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}}</span>\n</pre>\n</li>\n<li>\n<p>You can save them in a catch-all field and do whatever needs to be done later. Simply set the <code>undefined</code>\nkeyword to <code>Undefined.INCLUDE</code> (<code>'INCLUDE'</code> as a case-insensitive string works as well) and define a field\nof type <code>CatchAll</code> where all unknown values will end up.\nThis simply represents a dictionary that can hold anything.\nIf there are no undefined parameters, this will be an empty dictionary.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">Undefined</span><span class=\"p\">,</span> <span class=\"n\">CatchAll</span>\n\n<span class=\"nd\">@dataclass_json</span><span class=\"p\">(</span><span class=\"n\">undefined</span><span class=\"o\">=</span><span class=\"n\">Undefined</span><span class=\"o\">.</span><span class=\"n\">INCLUDE</span><span class=\"p\">)</span>\n<span class=\"nd\">@dataclass</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">UnknownAPIDump</span><span class=\"p\">:</span>\n    <span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>\n    <span class=\"n\">unknown_things</span><span class=\"p\">:</span> <span class=\"n\">CatchAll</span>\n\n<span class=\"n\">dump</span> <span class=\"o\">=</span> <span class=\"n\">UnknownAPIDump</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">dump_dict</span><span class=\"p\">)</span>  <span class=\"c1\"># UnknownAPIDump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'}, unknown_things={'undefined_field_name': [1, 2, 3]})</span>\n<span class=\"n\">dump</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>  <span class=\"c1\"># {'endpoint': 'some_api_endpoint', 'data': {'foo': 1, 'bar': '2'}, 'undefined_field_name': [1, 2, 3]}</span>\n</pre>\n<ul>\n<li>When using <code>Undefined.INCLUDE</code>, an <code>UndefinedParameterError</code> will be raised if you don't specify\nexactly one field of type <code>CatchAll</code>.</li>\n<li>Note that <code>LetterCase</code> does not affect values written into the <code>CatchAll</code> field, they will be as they are given.</li>\n<li>When specifying a default (or a default factory) for the the <code>CatchAll</code>-field, e.g. <code>unknown_things: CatchAll = None</code>, the default value will be used instead of an empty dict if there are no undefined parameters.</li>\n<li>Calling <strong>init</strong> with non-keyword arguments resolves the arguments to the defined fields and writes everything else into the catch-all field.</li>\n</ul>\n</li>\n<li>\n<p>All 3 options work as well using <code>schema().loads</code> and <code>schema().dumps</code>, as long as you don't overwrite it by specifying <code>schema(unknown=&lt;a marshmallow value&gt;)</code>.\nmarshmallow uses the same 3 keywords <a href=\"https://marshmallow.readthedocs.io/en/stable/quickstart.html#handling-unknown-fields\" rel=\"nofollow\">'include', 'exclude', 'raise'</a>.</p>\n</li>\n<li>\n<p>All 3 operations work as well using <code>__init__</code>, e.g. <code>UnknownAPIDump(**dump_dict)</code> will <strong>not</strong> raise a <code>TypeError</code>, but write all unknown values to the field tagged as <code>CatchAll</code>.\nClasses tagged with <code>EXCLUDE</code> will also simply ignore unknown parameters. Note that classes tagged as <code>RAISE</code> still raise a <code>TypeError</code>, and <strong>not</strong> a <code>UndefinedParameterError</code> if supplied with unknown keywords.</p>\n</li>\n</ol>\n<h3>Explanation</h3>\n<p>Briefly, on what's going on under the hood in the above examples: calling\n<code>.schema()</code> will have this library generate a\n<a href=\"'https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema\" rel=\"nofollow\">marshmallow schema</a>\nfor you. It also fills in the corresponding object hook, so that marshmallow\nwill create an instance of your Data Class on <code>load</code> (e.g.\n<code>Person.schema().load</code> returns a <code>Person</code>) rather than a <code>dict</code>, which it does\nby default in marshmallow.</p>\n<p><strong>Performance note</strong></p>\n<p><code>.schema()</code> is not cached (it generates the schema on every call), so if you\nhave a nested Data Class you may want to save the result to a variable to\navoid re-generation of the schema on every usage.</p>\n<pre><span class=\"n\">person_schema</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">()</span>\n<span class=\"n\">person_schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># later in the code...</span>\n\n<span class=\"n\">person_schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n</pre>\n<h3>Override the default encode / decode / marshmallow field of a specific field?</h3>\n<p>See <a href=\"#Overriding\" rel=\"nofollow\">Overriding</a></p>\n<h2>Marshmallow interop</h2>\n<p>Using the <code>dataclass_json</code> decorator or mixing in <code>DataClassJsonMixin</code> will\nprovide you with an additional method <code>.schema()</code>.</p>\n<p><code>.schema()</code> generates a schema exactly equivalent to manually creating a\nmarshmallow schema for your dataclass. You can reference the <a href=\"https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema\" rel=\"nofollow\">marshmallow API docs</a>\nto learn other ways you can use the schema returned by <code>.schema()</code>.</p>\n<p>You can pass in the exact same arguments to <code>.schema()</code> that you would when\nconstructing a <code>PersonSchema</code> instance, e.g. <code>.schema(many=True)</code>, and they will\nget passed through to the marshmallow schema.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"c1\"># You don't need to do this - it's generated for you by `.schema()`!</span>\n<span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonSchema</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Str</span><span class=\"p\">()</span>\n</pre>\n<h2>Overriding / Extending</h2>\n<h4>Overriding</h4>\n<p>For example, you might want to encode/decode <code>datetime</code> objects using ISO format\nrather than the default <code>timestamp</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span><span class=\"p\">,</span> <span class=\"n\">config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">DataClassWithIsoDatetime</span><span class=\"p\">:</span>\n    <span class=\"n\">created_at</span><span class=\"p\">:</span> <span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">(</span>\n            <span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">,</span>\n            <span class=\"n\">decoder</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromisoformat</span><span class=\"p\">,</span>\n            <span class=\"n\">mm_field</span><span class=\"o\">=</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<h4>Extending</h4>\n<p>Similarly, you might want to extend <code>dataclasses_json</code> to encode <code>date</code> objects.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span><span class=\"p\">,</span> <span class=\"n\">config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">DataClassWithIsoDatetime</span><span class=\"p\">:</span>\n    <span class=\"n\">created_at</span><span class=\"p\">:</span> <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">(</span>\n            <span class=\"n\">encoder</span><span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">,</span>\n            <span class=\"n\">decoder</span><span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">fromisoformat</span><span class=\"p\">,</span>\n            <span class=\"n\">mm_field</span><span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n        <span class=\"p\">))</span>\n</pre>\n<p>As you can see, you can <strong>override</strong> or <strong>extend</strong> the default codecs by providing a \"hook\" via a\ncallable:</p>\n<ul>\n<li><code>encoder</code>: a callable, which will be invoked to convert the field value when encoding to JSON</li>\n<li><code>decoder</code>: a callable, which will be invoked to convert the JSON value when decoding from JSON</li>\n<li><code>mm_field</code>: a marshmallow field, which will affect the behavior of any operations involving <code>.schema()</code></li>\n</ul>\n<p>Note that these hooks will be invoked regardless if you're using\n<code>.to_json</code>/<code>dump</code>/<code>dumps</code>\nand <code>.from_json</code>/<code>load</code>/<code>loads</code>. So apply overrides / extensions judiciously, making sure to\ncarefully consider whether the interaction of the encode/decode/mm_field is consistent with what you expect!</p>\n<h4>What if I have other dataclass field extensions that rely on <code>metadata</code></h4>\n<p>All the <code>dataclasses_json.config</code> does is return a mapping, namespaced under the key <code>'dataclasses_json'</code>.</p>\n<p>Say there's another module, <code>other_dataclass_package</code> that uses metadata. Here's how you solve your problem:</p>\n<pre><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'other_dataclass_package'</span><span class=\"p\">:</span> <span class=\"s1\">'some metadata...'</span><span class=\"p\">}</span>  <span class=\"c1\"># pre-existing metadata for another dataclass package</span>\n<span class=\"n\">dataclass_json_config</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">(</span>\n            <span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">,</span>\n            <span class=\"n\">decoder</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromisoformat</span><span class=\"p\">,</span>\n            <span class=\"n\">mm_field</span><span class=\"o\">=</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n<span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">dataclass_json_config</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">DataClassWithIsoDatetime</span><span class=\"p\">:</span>\n    <span class=\"n\">created_at</span><span class=\"p\">:</span> <span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n</pre>\n<p>You can also manually specify the dataclass_json configuration mapping.</p>\n<pre><span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">DataClassWithIsoDatetime</span><span class=\"p\">:</span>\n    <span class=\"n\">created_at</span><span class=\"p\">:</span> <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'dataclasses_json'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'encoder'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">,</span>\n            <span class=\"s1\">'decoder'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">fromisoformat</span><span class=\"p\">,</span>\n            <span class=\"s1\">'mm_field'</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n        <span class=\"p\">}}</span>\n    <span class=\"p\">)</span>\n</pre>\n<h2>A larger example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Minion</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">frozen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Boss</span><span class=\"p\">:</span>\n    <span class=\"n\">minions</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Minion</span><span class=\"p\">]</span>\n\n<span class=\"n\">boss</span> <span class=\"o\">=</span> <span class=\"n\">Boss</span><span class=\"p\">([</span><span class=\"n\">Minion</span><span class=\"p\">(</span><span class=\"s1\">'evil minion'</span><span class=\"p\">),</span> <span class=\"n\">Minion</span><span class=\"p\">(</span><span class=\"s1\">'very evil minion'</span><span class=\"p\">)])</span>\n<span class=\"n\">boss_json</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">{</span>\n<span class=\"s2\">    \"minions\": [</span>\n<span class=\"s2\">        {</span>\n<span class=\"s2\">            \"name\": \"evil minion\"</span>\n<span class=\"s2\">        },</span>\n<span class=\"s2\">        {</span>\n<span class=\"s2\">            \"name\": \"very evil minion\"</span>\n<span class=\"s2\">        }</span>\n<span class=\"s2\">    ]</span>\n<span class=\"s2\">}</span>\n<span class=\"s2\">\"\"\"</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">boss</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">boss_json</span>\n<span class=\"k\">assert</span> <span class=\"n\">Boss</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">boss_json</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">boss</span>\n</pre>\n<h2>Self Recursion</h2>\n<p>Object hierarchies where fields are of the type that they are declared within require a small\ntype hinting trick to declare the forward reference.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses_json</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass_json</span>\n\n<span class=\"nd\">@dataclass_json</span>\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Tree</span><span class=\"p\">():</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"s1\">'Tree'</span><span class=\"p\">]</span>\n    <span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"s1\">'Tree'</span><span class=\"p\">]</span>\n</pre>\n<p>Avoid using</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n</pre>\n<p>as it will cause problems with the way dataclasses_json accesses the type annotations.</p>\n\n          </div>"}, "last_serial": 6805236, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a3549ca3e7d40d4cc46772c554c4516b", "sha256": "43f03cb7b56f0d92cefa955cebc976d68cbede18f8b2f9f6fc7fad82d52ea59f"}, "downloads": -1, "filename": "dataclasses_json-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a3549ca3e7d40d4cc46772c554c4516b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2263, "upload_time": "2018-04-21T01:54:15", "upload_time_iso_8601": "2018-04-21T01:54:15.674903Z", "url": "https://files.pythonhosted.org/packages/17/6c/2d8fe2a05e5b7f5b559ae07cd8dffa316d354d5cfebc7685af4566866c2f/dataclasses_json-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7624e8909a1a5a449c5a15043b82e30b", "sha256": "0316c1b4ad8d23765f48c51ec78243053f9b5b92a6df03179a922e58ed230561"}, "downloads": -1, "filename": "dataclasses-json-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7624e8909a1a5a449c5a15043b82e30b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1590, "upload_time": "2018-04-21T01:54:17", "upload_time_iso_8601": "2018-04-21T01:54:17.006724Z", "url": "https://files.pythonhosted.org/packages/b6/4e/4f8b2839f37d8bf0684248a078460c680022474283f7e7ece96857a4e496/dataclasses-json-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "c7437f67aced5b75d8398a4a8d2bd198", "sha256": "ac613342b321d63130f58f0bc5512b2ae6b76cbd74c722aa0758f5d38edc71a9"}, "downloads": -1, "filename": "dataclasses_json-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "c7437f67aced5b75d8398a4a8d2bd198", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5599, "upload_time": "2018-08-12T16:03:56", "upload_time_iso_8601": "2018-08-12T16:03:56.447293Z", "url": "https://files.pythonhosted.org/packages/41/eb/e78976ce67460d6f99a7482a0ad61d5fdc4a4dcaf52052c2c689a531d028/dataclasses_json-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bd6b75c68b76d51eeed020844623073", "sha256": "786acf7d87e97966e96f93a9505fe4981923755012f312b6ca8629e0b04548d4"}, "downloads": -1, "filename": "dataclasses-json-0.0.10.tar.gz", "has_sig": false, "md5_digest": "0bd6b75c68b76d51eeed020844623073", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3559, "upload_time": "2018-08-12T16:04:02", "upload_time_iso_8601": "2018-08-12T16:04:02.144926Z", "url": "https://files.pythonhosted.org/packages/10/45/ef169e634478265f2aee4c96bb65cdea7403dc3f662fb628d4dfd51967ca/dataclasses-json-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "f944219b915523e3697bed7b1b4b876a", "sha256": "064cef7a593983304a3b1d28740d0e6842499034d48d8cf731744d08a14eb30c"}, "downloads": -1, "filename": "dataclasses_json-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "f944219b915523e3697bed7b1b4b876a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5715, "upload_time": "2018-08-26T14:32:45", "upload_time_iso_8601": "2018-08-26T14:32:45.021589Z", "url": "https://files.pythonhosted.org/packages/60/75/2b931444185f8a1850cbadf05b39b3d33e714ec3c789b396b6bdc4b690eb/dataclasses_json-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5682c7b1a21bad9717b5543d71222554", "sha256": "fc416f51ee12b2451cba65bee16eef75f1b6626c2ede551a22e48621cd2967a3"}, "downloads": -1, "filename": "dataclasses-json-0.0.11.tar.gz", "has_sig": false, "md5_digest": "5682c7b1a21bad9717b5543d71222554", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3691, "upload_time": "2018-08-26T14:32:52", "upload_time_iso_8601": "2018-08-26T14:32:52.330739Z", "url": "https://files.pythonhosted.org/packages/83/46/15949fcf00d51f17e7efc4f9fc88488c8ca17948d04ffa51ce194dcbb05a/dataclasses-json-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "9d149b3c4e9804fef7fc41be69932d11", "sha256": "dd1e6bf7e98e6924849886bf7451e09cfc4f9a1e77ecf64fe79714140fff2f02"}, "downloads": -1, "filename": "dataclasses_json-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "9d149b3c4e9804fef7fc41be69932d11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5830, "upload_time": "2018-08-31T03:48:54", "upload_time_iso_8601": "2018-08-31T03:48:54.710557Z", "url": "https://files.pythonhosted.org/packages/11/48/ef5a7dc88655851c5effced2f3be491a2ddc9e5993767a7a9189069728ce/dataclasses_json-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f13b5bc0a58dc45eb59e88815f1bbba2", "sha256": "ffbe95a119f3f3d234edd8c2727ac7e12fdf819dff26778034cedb6ada3fde06"}, "downloads": -1, "filename": "dataclasses-json-0.0.12.tar.gz", "has_sig": false, "md5_digest": "f13b5bc0a58dc45eb59e88815f1bbba2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3758, "upload_time": "2018-08-31T03:49:01", "upload_time_iso_8601": "2018-08-31T03:49:01.931810Z", "url": "https://files.pythonhosted.org/packages/5a/0c/b3b3032fa3b8a1bf26b3ec7903a14cdf12362fc8b76d9146d6aa4a027280/dataclasses-json-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "6f2d556f0146b908120b73910697e640", "sha256": "cc1c4dd30fe9296ec7dc6eb2435dd8836d306455cf1a4ce0d044ee9402346c83"}, "downloads": -1, "filename": "dataclasses_json-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "6f2d556f0146b908120b73910697e640", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4895, "upload_time": "2018-09-02T03:43:50", "upload_time_iso_8601": "2018-09-02T03:43:50.610277Z", "url": "https://files.pythonhosted.org/packages/61/56/02d8f4c765cfc7df631380101f42bcdcac6d175e92645dad7d7341fe2ded/dataclasses_json-0.0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74a83ded0c35babddb40c0ea0c469a2d", "sha256": "0b56a6a30c3b27ee340faa0f066257f8c428b5495abc93619782f6fe2d101caf"}, "downloads": -1, "filename": "dataclasses-json-0.0.13.tar.gz", "has_sig": false, "md5_digest": "74a83ded0c35babddb40c0ea0c469a2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4386, "upload_time": "2018-09-02T03:43:51", "upload_time_iso_8601": "2018-09-02T03:43:51.720462Z", "url": "https://files.pythonhosted.org/packages/aa/4e/9dd8302405319bdace2bc25301af5c49a388a73c44ac6644bd005152843f/dataclasses-json-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "969f5de5b97e2ba33fd382f7566e8c6a", "sha256": "dc1d48f51413e710b1ad17bf97af98cbaddcf75b6cd1743c56bdf6bd27276f30"}, "downloads": -1, "filename": "dataclasses_json-0.0.14-py3-none-any.whl", "has_sig": false, "md5_digest": "969f5de5b97e2ba33fd382f7566e8c6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6017, "upload_time": "2018-09-02T20:31:15", "upload_time_iso_8601": "2018-09-02T20:31:15.110869Z", "url": "https://files.pythonhosted.org/packages/82/5d/12f71e8c88f4519c2f31af873ea1cee816ebb44ba2b71aea35cbb4972ea9/dataclasses_json-0.0.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bf6f8b9602b726ca43956b9b913195d", "sha256": "bb4fc2be7297b8abc9040c9637ddafbb3a643fc54be502b5bcdbd65fcf663cf4"}, "downloads": -1, "filename": "dataclasses-json-0.0.14.tar.gz", "has_sig": false, "md5_digest": "6bf6f8b9602b726ca43956b9b913195d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5541, "upload_time": "2018-09-02T20:31:17", "upload_time_iso_8601": "2018-09-02T20:31:17.515133Z", "url": "https://files.pythonhosted.org/packages/59/4f/f918f80d858c91535fcb264e6cd21b33fdd34458d26fad62facfb9f3337a/dataclasses-json-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "5b5eedacd467f2f97541209ec5bd1ce9", "sha256": "6903820df0981c297f771eab7ab0152761a2db72d0ab3b3630f67c7e84b70514"}, "downloads": -1, "filename": "dataclasses_json-0.0.15-py3-none-any.whl", "has_sig": false, "md5_digest": "5b5eedacd467f2f97541209ec5bd1ce9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5919, "upload_time": "2018-09-03T03:50:24", "upload_time_iso_8601": "2018-09-03T03:50:24.584066Z", "url": "https://files.pythonhosted.org/packages/52/1b/7155d5043edabd6c52274775e442a99c2b368e6f3569cab409092c61ef32/dataclasses_json-0.0.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f50f933f583b7f654dc73a620a494824", "sha256": "4412ea743a6093bd07474ad978fe7da8458bf59f73b6ec047d2252ee0616f5b5"}, "downloads": -1, "filename": "dataclasses-json-0.0.15.tar.gz", "has_sig": false, "md5_digest": "f50f933f583b7f654dc73a620a494824", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5442, "upload_time": "2018-09-03T03:50:26", "upload_time_iso_8601": "2018-09-03T03:50:26.337234Z", "url": "https://files.pythonhosted.org/packages/8a/37/200e8f34c805deaee64de63881c072fdce465105bec388aea68516ed915b/dataclasses-json-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "2701c030d1a2daa1ecbde899369cd7e1", "sha256": "aa764281a6e76daf10159f2245e519900996af4d4a50ea5b9636b63d954bfbec"}, "downloads": -1, "filename": "dataclasses_json-0.0.16-py3-none-any.whl", "has_sig": false, "md5_digest": "2701c030d1a2daa1ecbde899369cd7e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5938, "upload_time": "2018-09-15T15:53:43", "upload_time_iso_8601": "2018-09-15T15:53:43.869692Z", "url": "https://files.pythonhosted.org/packages/fe/1f/4bc00ab8f1aac15e77437d351bac918b22122c4e774327270e1aa96cd226/dataclasses_json-0.0.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "661bbe3ff5833ab305a0f7f2cbca6c4b", "sha256": "7f90b93ad0deaab3e70d3d2460cc46bfae41458329c12fe86f5c5243ef24b716"}, "downloads": -1, "filename": "dataclasses-json-0.0.16.tar.gz", "has_sig": false, "md5_digest": "661bbe3ff5833ab305a0f7f2cbca6c4b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5461, "upload_time": "2018-09-15T15:53:46", "upload_time_iso_8601": "2018-09-15T15:53:46.934444Z", "url": "https://files.pythonhosted.org/packages/39/0e/d754a5640ad3101b80d5fc584963a92c53ee0cd33973abd178462c152730/dataclasses-json-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "72b71872c7e62fdf448b328976c25cd9", "sha256": "76c4240ad53a7455f40b1b336389f9fd6998cbda554bf3ff2e7ac4f994bc22cd"}, "downloads": -1, "filename": "dataclasses_json-0.0.17-py3-none-any.whl", "has_sig": false, "md5_digest": "72b71872c7e62fdf448b328976c25cd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6154, "upload_time": "2018-09-23T03:42:17", "upload_time_iso_8601": "2018-09-23T03:42:17.234613Z", "url": "https://files.pythonhosted.org/packages/8b/48/a781ddca4bbaae8e7889b519ecc5d4eb162e14df334808522cfd60081c85/dataclasses_json-0.0.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cd6b421a5a5dc55a5088b21af56cd8c", "sha256": "a7b0b3b3ddd78ad306cc24011b84f26cfb7db3a0a676b949bedb637a69551171"}, "downloads": -1, "filename": "dataclasses-json-0.0.17.tar.gz", "has_sig": false, "md5_digest": "5cd6b421a5a5dc55a5088b21af56cd8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5831, "upload_time": "2018-09-23T03:42:21", "upload_time_iso_8601": "2018-09-23T03:42:21.132067Z", "url": "https://files.pythonhosted.org/packages/af/b0/4cddcea510643604d863ca0ab0b1115127dec45b0b3e669ad78be97f0503/dataclasses-json-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "1b592779c801e68dc970a7d177973899", "sha256": "654d68c81eb8dae67fb97eb9719db62ac7021cdec41a1e99750ba2bfd35602e5"}, "downloads": -1, "filename": "dataclasses_json-0.0.18-py3-none-any.whl", "has_sig": false, "md5_digest": "1b592779c801e68dc970a7d177973899", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7062, "upload_time": "2018-10-23T17:31:01", "upload_time_iso_8601": "2018-10-23T17:31:01.347461Z", "url": "https://files.pythonhosted.org/packages/6c/92/285e9c02c6c44617e75579b649c05dbce160968a9baf04939bf726a2ce5a/dataclasses_json-0.0.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44dc00190e6164ad8bc438e02242a853", "sha256": "54303b572aa8d054ca41cd5bffdd2bc5c13c39c35eee647f2c9937cda5797596"}, "downloads": -1, "filename": "dataclasses-json-0.0.18.tar.gz", "has_sig": false, "md5_digest": "44dc00190e6164ad8bc438e02242a853", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6348, "upload_time": "2018-10-23T17:31:08", "upload_time_iso_8601": "2018-10-23T17:31:08.007755Z", "url": "https://files.pythonhosted.org/packages/ba/9f/d3d4b29f2dbd1bad7835929499c8f0f9ffd0748437c3f87a97e60d29057e/dataclasses-json-0.0.18.tar.gz", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "da42e1e43676ff4efe0f348f4ea9937e", "sha256": "0310ca6d95b679417f4fbda736fd256ac1cd410bcbd66bf54ff6f505c2633216"}, "downloads": -1, "filename": "dataclasses_json-0.0.19-py3-none-any.whl", "has_sig": false, "md5_digest": "da42e1e43676ff4efe0f348f4ea9937e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7063, "upload_time": "2018-10-23T17:19:29", "upload_time_iso_8601": "2018-10-23T17:19:29.405481Z", "url": "https://files.pythonhosted.org/packages/2a/a3/342dcf976f84a9188dfc723e3f57eb8823ec1bb16b7c9c8bc75e9c07e224/dataclasses_json-0.0.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3deb38287612234d8595089e025f4c6", "sha256": "5a2a76e14c17e8773cddbad3d6249c86f61a68fcb2d0493b45a56396275f4379"}, "downloads": -1, "filename": "dataclasses-json-0.0.19.tar.gz", "has_sig": false, "md5_digest": "a3deb38287612234d8595089e025f4c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6349, "upload_time": "2018-10-23T17:19:33", "upload_time_iso_8601": "2018-10-23T17:19:33.169057Z", "url": "https://files.pythonhosted.org/packages/4e/af/cbe365c628d565c845f5bae31b5696d5cb5d87b5a7ee0a4d8cf8800184bb/dataclasses-json-0.0.19.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e114fba3d986d2c1e40c3fc388547e8b", "sha256": "d2d5da1e1a2b9f93934290f741a343cfaee8e0ced859ab5e0e843cc8812e0704"}, "downloads": -1, "filename": "dataclasses_json-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e114fba3d986d2c1e40c3fc388547e8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2512, "upload_time": "2018-04-21T14:02:11", "upload_time_iso_8601": "2018-04-21T14:02:11.474072Z", "url": "https://files.pythonhosted.org/packages/74/44/7ecac001bafd12a12467d00842fa5c051c12522464f9bea4c01f55037bfd/dataclasses_json-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ba9267b63a7e9194ce3f31df980bea1", "sha256": "4e6f3401f75b10af62b28975d077a77253a410507dfe94b304c88dd30c6866cb"}, "downloads": -1, "filename": "dataclasses-json-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2ba9267b63a7e9194ce3f31df980bea1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1836, "upload_time": "2018-04-21T14:02:13", "upload_time_iso_8601": "2018-04-21T14:02:13.315194Z", "url": "https://files.pythonhosted.org/packages/f4/07/16ab38e47f2168ab443df312f8ef08b51fc3901b2ab67494c86da1aa599f/dataclasses-json-0.0.2.tar.gz", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "1204021264b9eebe904d3f7e44c9e3d1", "sha256": "194bc8d51a4cc79e238e9b26336cc2e7bbd33287ac91b561a628a25fcb1d6e63"}, "downloads": -1, "filename": "dataclasses_json-0.0.20-py3-none-any.whl", "has_sig": false, "md5_digest": "1204021264b9eebe904d3f7e44c9e3d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7064, "upload_time": "2018-10-23T17:31:03", "upload_time_iso_8601": "2018-10-23T17:31:03.826886Z", "url": "https://files.pythonhosted.org/packages/99/be/c3205dbb87eea937d7826f0ec9dab43ca4b5c905b02a103b94158dce3a7c/dataclasses_json-0.0.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94498aff9de0970a7dd0b2cddcce3e83", "sha256": "3222312281a7e37f94b3b96d345245356a7a7c0578f0a62e3fcdab992ec39ea8"}, "downloads": -1, "filename": "dataclasses-json-0.0.20.tar.gz", "has_sig": false, "md5_digest": "94498aff9de0970a7dd0b2cddcce3e83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6359, "upload_time": "2018-10-23T17:31:09", "upload_time_iso_8601": "2018-10-23T17:31:09.617735Z", "url": "https://files.pythonhosted.org/packages/60/03/3191a11828d7340e710bc15c47cdc7a920519749a9dde6b3cf8e799681b6/dataclasses-json-0.0.20.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "24fc9c71ac681421060ccc6d1dcc9194", "sha256": "315fad2d0712876fa6592c9c3fe77057f04f4882aba4d32fb59f2503521141eb"}, "downloads": -1, "filename": "dataclasses_json-0.0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "24fc9c71ac681421060ccc6d1dcc9194", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7062, "upload_time": "2018-11-03T13:59:42", "upload_time_iso_8601": "2018-11-03T13:59:42.250749Z", "url": "https://files.pythonhosted.org/packages/e5/75/2c549c887ee1aa98283feef506f2b386d488364564d92ed5c5f4451305ff/dataclasses_json-0.0.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ff7497817b901ac51692f3e74bf97bf", "sha256": "86dd593c3309266f359b0c66bad5d3d9ebdb4f46e12177b8a837b213ad06f7b9"}, "downloads": -1, "filename": "dataclasses-json-0.0.21.tar.gz", "has_sig": false, "md5_digest": "7ff7497817b901ac51692f3e74bf97bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6358, "upload_time": "2018-11-03T13:59:48", "upload_time_iso_8601": "2018-11-03T13:59:48.387998Z", "url": "https://files.pythonhosted.org/packages/e9/44/8df8a2fcbf83f0e1781a8bd5161f49957ad89a27ffaf9ef4f0d89b8731cd/dataclasses-json-0.0.21.tar.gz", "yanked": false}], "0.0.22": [{"comment_text": "", "digests": {"md5": "aa27aaa75c4447701c85adda10773642", "sha256": "55a67a5894a2ee4c4424624a53137e9230c3836604dd34a632191959a6e115e3"}, "downloads": -1, "filename": "dataclasses_json-0.0.22-py3-none-any.whl", "has_sig": false, "md5_digest": "aa27aaa75c4447701c85adda10773642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7383, "upload_time": "2018-11-04T17:10:10", "upload_time_iso_8601": "2018-11-04T17:10:10.672154Z", "url": "https://files.pythonhosted.org/packages/f0/08/f5c3a968fc9204f11300918f8c92d4df1970b67de032f5e74dbab434ba06/dataclasses_json-0.0.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83ed140bba3ac87061f7934b346dfd7b", "sha256": "4a996f279b7cdb240dca2f2c113ed3a4ff7eeaec3517d2b6ac8305d8b2241e87"}, "downloads": -1, "filename": "dataclasses-json-0.0.22.tar.gz", "has_sig": false, "md5_digest": "83ed140bba3ac87061f7934b346dfd7b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6647, "upload_time": "2018-11-04T17:10:17", "upload_time_iso_8601": "2018-11-04T17:10:17.513771Z", "url": "https://files.pythonhosted.org/packages/83/ad/dc451dfc8b2860847f2e2e3af39d5b8be43c424fce4f5557fe9984a137df/dataclasses-json-0.0.22.tar.gz", "yanked": false}], "0.0.23": [{"comment_text": "", "digests": {"md5": "aa93c6d1fd87b10ac7462f639a109a56", "sha256": "d04ba7e4efdc43082ff92361cf97af57c8e0a055c2da40910058aadba66cf2fe"}, "downloads": -1, "filename": "dataclasses_json-0.0.23-py3-none-any.whl", "has_sig": false, "md5_digest": "aa93c6d1fd87b10ac7462f639a109a56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7886, "upload_time": "2018-11-10T06:03:10", "upload_time_iso_8601": "2018-11-10T06:03:10.474838Z", "url": "https://files.pythonhosted.org/packages/5c/51/561efd1c357f8d8d4df35c330e0c5a1e61679eea2034ca1a4234acec0e49/dataclasses_json-0.0.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1fca9ea96dc99d62a02c411394e302e", "sha256": "9a3bc07f53ec02e4440b290b83d227ca48697983a6778ca992754ae2ee4ea75d"}, "downloads": -1, "filename": "dataclasses-json-0.0.23.tar.gz", "has_sig": false, "md5_digest": "b1fca9ea96dc99d62a02c411394e302e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7518, "upload_time": "2018-11-10T06:03:17", "upload_time_iso_8601": "2018-11-10T06:03:17.851435Z", "url": "https://files.pythonhosted.org/packages/d1/b7/96ce1e7325204770131e16b135cf63f9946d0bed0a8861a3185686561541/dataclasses-json-0.0.23.tar.gz", "yanked": false}], "0.0.24": [{"comment_text": "", "digests": {"md5": "2e4914c06f09ac6d80f008b6abba0898", "sha256": "0c9245f396003fd4cd2c2a38e5d3c0bec67e8842fe4a5ac6a26b456f11ee09c0"}, "downloads": -1, "filename": "dataclasses_json-0.0.24-py3-none-any.whl", "has_sig": false, "md5_digest": "2e4914c06f09ac6d80f008b6abba0898", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8337, "upload_time": "2018-11-10T20:06:11", "upload_time_iso_8601": "2018-11-10T20:06:11.166595Z", "url": "https://files.pythonhosted.org/packages/87/e8/6a05f1ce1071d2391540ba04a5e58ff61e6c71b8fa652f0689677eb97727/dataclasses_json-0.0.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c6aa47fb82f0b5a11cfef73843f0839", "sha256": "cd8c990e73770f3c30096ef37e6fd8ab452423daedbe265d64372f6680176aab"}, "downloads": -1, "filename": "dataclasses-json-0.0.24.tar.gz", "has_sig": false, "md5_digest": "6c6aa47fb82f0b5a11cfef73843f0839", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7918, "upload_time": "2018-11-10T20:06:13", "upload_time_iso_8601": "2018-11-10T20:06:13.889715Z", "url": "https://files.pythonhosted.org/packages/1e/ab/df7f742616b410099f363cae31fefe0d3abf6936b4d8b201771826edd13e/dataclasses-json-0.0.24.tar.gz", "yanked": false}], "0.0.25": [{"comment_text": "", "digests": {"md5": "be317a8201e0c8d6be3fa2c39c092aac", "sha256": "af2e95c0330c3a79c43dd8d6fd7b7c5e0ac449f9e0d2391247dbcbe8209f6e57"}, "downloads": -1, "filename": "dataclasses_json-0.0.25-py3-none-any.whl", "has_sig": false, "md5_digest": "be317a8201e0c8d6be3fa2c39c092aac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8415, "upload_time": "2018-11-10T20:06:12", "upload_time_iso_8601": "2018-11-10T20:06:12.539652Z", "url": "https://files.pythonhosted.org/packages/b8/dd/bca42db05616dd0a8eb5a3e8f5bf667a569a126a71cd1a20039fbc76cf6b/dataclasses_json-0.0.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "595d8eec217413f680c63c33d3e1f9db", "sha256": "50d4f3eaf6181b8de877b86492788f8f6cf7f917001b3f68f6f9f9bdd52bc15f"}, "downloads": -1, "filename": "dataclasses-json-0.0.25.tar.gz", "has_sig": false, "md5_digest": "595d8eec217413f680c63c33d3e1f9db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7979, "upload_time": "2018-11-10T20:06:15", "upload_time_iso_8601": "2018-11-10T20:06:15.598544Z", "url": "https://files.pythonhosted.org/packages/c4/b3/655841ad7f8b838f425019d72de15f5e02859586fc3deb813b23d5ba8425/dataclasses-json-0.0.25.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "58afa706c3f13df7e6e002d2f44ea9f8", "sha256": "c6b666b0a5d52229c6c4d682289b12ebbadd2fc582d880942f0af95937a48cd8"}, "downloads": -1, "filename": "dataclasses_json-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "58afa706c3f13df7e6e002d2f44ea9f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2775, "upload_time": "2018-04-25T02:11:42", "upload_time_iso_8601": "2018-04-25T02:11:42.139980Z", "url": "https://files.pythonhosted.org/packages/eb/ee/add89cf2e19a2ebd3b0e9887d86248046e663c33b92d40cc3be6e9cd61b4/dataclasses_json-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab1709a1e1f148bffe8a64cef13c717f", "sha256": "db4ebe537d06f778803727f7ce5f1eca36c4158abc95795727aa257e7d5d66fc"}, "downloads": -1, "filename": "dataclasses-json-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ab1709a1e1f148bffe8a64cef13c717f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2122, "upload_time": "2018-04-25T02:11:44", "upload_time_iso_8601": "2018-04-25T02:11:44.679959Z", "url": "https://files.pythonhosted.org/packages/42/97/82a3e918c839f8f92cfb5a25c3921b07e6f6284417a2ff1825d28d2eabb5/dataclasses-json-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "4ea8f72727367e4075124dfb93b27302", "sha256": "c94a95d516c007dc519703eb0d10cccbae445d1819418ce5c9c27ed1d32c8636"}, "downloads": -1, "filename": "dataclasses_json-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4ea8f72727367e4075124dfb93b27302", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2909, "upload_time": "2018-04-25T03:11:58", "upload_time_iso_8601": "2018-04-25T03:11:58.413154Z", "url": "https://files.pythonhosted.org/packages/05/08/bea23878c7d3fd15ea4909ccbbf7066da2d44cac86cc9985020e1b11c80f/dataclasses_json-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cf9723da3105a24bc34ad415329e3c3", "sha256": "4cb4cbf9f1f4fe43934b91fc532a83115c78e417ae88f5f74a7bb2c1e2259cf2"}, "downloads": -1, "filename": "dataclasses-json-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4cf9723da3105a24bc34ad415329e3c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2256, "upload_time": "2018-04-25T03:12:00", "upload_time_iso_8601": "2018-04-25T03:12:00.705616Z", "url": "https://files.pythonhosted.org/packages/c1/39/9fdb2e0a4c2815e01a7464c90fa762ab3eefed3085421745c85089ec23fa/dataclasses-json-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "641c7fd62eb969333e2494a598f0c535", "sha256": "24e75aca89647448a432d911906f6de664263688c2efadc080b97d2cd651f9d7"}, "downloads": -1, "filename": "dataclasses_json-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "641c7fd62eb969333e2494a598f0c535", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2788, "upload_time": "2018-04-25T03:16:32", "upload_time_iso_8601": "2018-04-25T03:16:32.577271Z", "url": "https://files.pythonhosted.org/packages/f8/a6/cce927cfa105f67a24b1093e9b4ec0daf9fbf8cea54f64a73030aa492c84/dataclasses_json-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cfa52e8b6f08673b8051bdb31e5a7a4", "sha256": "c18789d344300c0e60d643688f31d684e703401313da31823c23fc1ea73646a0"}, "downloads": -1, "filename": "dataclasses-json-0.0.5.tar.gz", "has_sig": false, "md5_digest": "4cfa52e8b6f08673b8051bdb31e5a7a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2137, "upload_time": "2018-04-25T03:16:35", "upload_time_iso_8601": "2018-04-25T03:16:35.649431Z", "url": "https://files.pythonhosted.org/packages/c7/63/59f759b4042da78bbad999dbf4c3220586777d133a971d9144650c243fbf/dataclasses-json-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "d91af09c9b4b4781c4b87bfaec8912a7", "sha256": "62da8b7b1c76ef4268167220037ad17267f6f6df6ef0dbad80ef0e5872a8bdfa"}, "downloads": -1, "filename": "dataclasses_json-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d91af09c9b4b4781c4b87bfaec8912a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2875, "upload_time": "2018-06-09T16:22:17", "upload_time_iso_8601": "2018-06-09T16:22:17.108971Z", "url": "https://files.pythonhosted.org/packages/b4/e6/696e3c557a49ace22b2d8bacaf677b9f1a4b1b61f21dbc5e4564222da7f8/dataclasses_json-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c26c667790743cb1daf2491e81d338f1", "sha256": "a64f54a8a3110ddddc102ca9883d5538bff204ffac33b5f17c69bb1119da8143"}, "downloads": -1, "filename": "dataclasses-json-0.0.6.tar.gz", "has_sig": false, "md5_digest": "c26c667790743cb1daf2491e81d338f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2214, "upload_time": "2018-06-09T16:22:19", "upload_time_iso_8601": "2018-06-09T16:22:19.881922Z", "url": "https://files.pythonhosted.org/packages/31/43/edec0e5201d788334543b6006afb61baf5219b6a7c016e43be121e83d92d/dataclasses-json-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "0483c3aea8d73ecc41481d77c1500779", "sha256": "869dcfb1eed24795ae20cea54bdc0a7d76f3556bc8e13d025ca67200a657fd9d"}, "downloads": -1, "filename": "dataclasses_json-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "0483c3aea8d73ecc41481d77c1500779", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5082, "upload_time": "2018-08-26T14:34:04", "upload_time_iso_8601": "2018-08-26T14:34:04.878348Z", "url": "https://files.pythonhosted.org/packages/5d/c9/9796027bbf8b66cb45bba24da8fe3aa0cccf4a17f2d345d81b3d497eb8a0/dataclasses_json-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d74b5abe1721c5af8c877991a824005", "sha256": "d86f1c6c07b491395dab92d03577a4a758c270ad0e2c7257cc21501cd10439ac"}, "downloads": -1, "filename": "dataclasses-json-0.0.7.tar.gz", "has_sig": false, "md5_digest": "2d74b5abe1721c5af8c877991a824005", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2846, "upload_time": "2018-08-26T14:34:11", "upload_time_iso_8601": "2018-08-26T14:34:11.828559Z", "url": "https://files.pythonhosted.org/packages/4f/a3/1d5a5989c45df964de8292794d50f91c7eb9dc33ada0a5f185ed935d2a89/dataclasses-json-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "95afe18b327ad348d2525de7a1275207", "sha256": "0b6114a0a91d9d349204bf7ed7e732c70b0d2dfa21594cce311fa7e6a366f052"}, "downloads": -1, "filename": "dataclasses_json-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "95afe18b327ad348d2525de7a1275207", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5092, "upload_time": "2018-08-26T14:34:05", "upload_time_iso_8601": "2018-08-26T14:34:05.990093Z", "url": "https://files.pythonhosted.org/packages/37/8f/dd2d1fd66aae8ef37cbeab76540700344376e76c72e87c3f3a8dea20bde0/dataclasses_json-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9990fddafa5ed01865e93221d633cfd9", "sha256": "b62f1730c9b8c487b3781b7499f11a4769c26bd81d9b3ac79c98e5de791e5c63"}, "downloads": -1, "filename": "dataclasses-json-0.0.8.tar.gz", "has_sig": false, "md5_digest": "9990fddafa5ed01865e93221d633cfd9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3016, "upload_time": "2018-08-26T14:34:12", "upload_time_iso_8601": "2018-08-26T14:34:12.746041Z", "url": "https://files.pythonhosted.org/packages/0c/b1/d4e55c05b84db337994a2e01138db70212c51f30b392f01d79dbf7055638/dataclasses-json-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "dc53ec5453d81f591d4ac573e9b1b828", "sha256": "e252006248541bcb6f09218c6162da6c2da90da269b4b90b647dc244ec29a73a"}, "downloads": -1, "filename": "dataclasses_json-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "dc53ec5453d81f591d4ac573e9b1b828", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4934, "upload_time": "2018-08-12T15:57:25", "upload_time_iso_8601": "2018-08-12T15:57:25.701862Z", "url": "https://files.pythonhosted.org/packages/3e/ed/bea1402224104675660303c2172df846bce24674a2292fc1ed82f4a9586b/dataclasses_json-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f8690ac99ad1a3d994f7de63aad71c3", "sha256": "9cb6289503a306f0adb859f4d2dbe9a8f56418b6842abcc866dbf961e7a97280"}, "downloads": -1, "filename": "dataclasses-json-0.0.9.tar.gz", "has_sig": false, "md5_digest": "9f8690ac99ad1a3d994f7de63aad71c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3358, "upload_time": "2018-08-12T15:57:31", "upload_time_iso_8601": "2018-08-12T15:57:31.082912Z", "url": "https://files.pythonhosted.org/packages/d7/e7/5750db73556cb8be6594c820130708967c7872dddb4a65af05f96f218972/dataclasses-json-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "5ef5adb0f9fd4faa83b5e68e6a59f3bf", "sha256": "afb3fadf137e80def80e18524053171eb0a9fc6d5f1e133b47a82f7e445812b8"}, "downloads": -1, "filename": "dataclasses_json-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5ef5adb0f9fd4faa83b5e68e6a59f3bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10335, "upload_time": "2018-11-11T19:13:54", "upload_time_iso_8601": "2018-11-11T19:13:54.956266Z", "url": "https://files.pythonhosted.org/packages/00/69/98feca0c06a7b5bf8ea958136aa452e3ffa321b1cf42ae9c6c47e9c44c8a/dataclasses_json-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26baa47d558a35ddcf2e39e773001c52", "sha256": "a70c4ec2a663b35f28e132c8493ecc3f07d8e1b17730dd86281caf36e7caffe7"}, "downloads": -1, "filename": "dataclasses-json-0.1.0.tar.gz", "has_sig": false, "md5_digest": "26baa47d558a35ddcf2e39e773001c52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12336, "upload_time": "2018-11-11T19:13:58", "upload_time_iso_8601": "2018-11-11T19:13:58.017846Z", "url": "https://files.pythonhosted.org/packages/7d/bc/1cb6d4a76ad8bb61dfc6988b3fb417c0bae5240bb4a935b2a3c3589acf5c/dataclasses-json-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a129033c002e4f117b791dcb6739c551", "sha256": "3396123e9826a131286ee9aa8e598770b91a537ca3ec6f5049340c14bf6d9855"}, "downloads": -1, "filename": "dataclasses_json-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a129033c002e4f117b791dcb6739c551", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11241, "upload_time": "2018-11-18T04:21:40", "upload_time_iso_8601": "2018-11-18T04:21:40.821125Z", "url": "https://files.pythonhosted.org/packages/4f/77/cc121991e1aaebaee96b786f92e61e132a09828870f9031e6657590e697e/dataclasses_json-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a84ed61bc0a207c694538298929643e5", "sha256": "9122d68a2738104f472a30246cb4be2b5bc36531010fa979b38c46258813d91e"}, "downloads": -1, "filename": "dataclasses-json-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a84ed61bc0a207c694538298929643e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13851, "upload_time": "2018-11-18T04:21:44", "upload_time_iso_8601": "2018-11-18T04:21:44.818914Z", "url": "https://files.pythonhosted.org/packages/90/77/0ef03bc86d1c5ede0bb51dc351ad462393ef58ab41a750a37ee6b285fe1c/dataclasses-json-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b3e35ae70ff03796732f5cc377ef7fb1", "sha256": "e8deb4f6cd81c5e15c5d82c4e3072ab9ce90c37ab5044bc1efb39520fea0f960"}, "downloads": -1, "filename": "dataclasses_json-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3e35ae70ff03796732f5cc377ef7fb1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11311, "upload_time": "2019-01-09T03:32:25", "upload_time_iso_8601": "2019-01-09T03:32:25.688715Z", "url": "https://files.pythonhosted.org/packages/8c/10/761d92586a5742161eb255023ed047d1b9ec95c381bc217459a48997bef3/dataclasses_json-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8423a5bbc8ea8b6ceee785b522764e56", "sha256": "756aa719aa6d3df9909af829eb390f6a3b97a155994cc28184b0697b99b9f72c"}, "downloads": -1, "filename": "dataclasses-json-0.2.1.tar.gz", "has_sig": false, "md5_digest": "8423a5bbc8ea8b6ceee785b522764e56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14020, "upload_time": "2019-01-09T03:32:29", "upload_time_iso_8601": "2019-01-09T03:32:29.844270Z", "url": "https://files.pythonhosted.org/packages/6f/0a/4e6a233e0971dc217aedbe96d4cdc12b1187bc436e57d8c6ab151306acc8/dataclasses-json-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "5178efaef01335d382e1745443267435", "sha256": "0e1500e861c5f4c6105dfca38e39d44a6006a5ed2b7f1c49fe33a0a6a8543247"}, "downloads": -1, "filename": "dataclasses_json-0.2.10-py3-none-any.whl", "has_sig": false, "md5_digest": "5178efaef01335d382e1745443267435", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14394, "upload_time": "2019-07-08T16:03:54", "upload_time_iso_8601": "2019-07-08T16:03:54.674893Z", "url": "https://files.pythonhosted.org/packages/d2/04/2d44e2dd3207846584e942dc18b4923a76c370fc89691e7fe3fdb3b9c126/dataclasses_json-0.2.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4587c5c85c45fdef11a088345ae03099", "sha256": "fa4dbec71e7bf025f1e216bc6fe4fae01b36543db8ddbb6f3b5fdf7e59f14a4c"}, "downloads": -1, "filename": "dataclasses-json-0.2.10.tar.gz", "has_sig": false, "md5_digest": "4587c5c85c45fdef11a088345ae03099", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16759, "upload_time": "2019-07-08T16:04:01", "upload_time_iso_8601": "2019-07-08T16:04:01.249176Z", "url": "https://files.pythonhosted.org/packages/88/4e/14f86ecc9d6c10ff4cacc2009aad9115254d5b6e7ae109e88c45618a64ad/dataclasses-json-0.2.10.tar.gz", "yanked": false}], "0.2.11": [{"comment_text": "", "digests": {"md5": "4cfbdf1461f685c022af1ac30d98f605", "sha256": "38d92c43be2bad55462bc12159c1d4f1b5b8b1288592fc14e13ac6e721f4de3c"}, "downloads": -1, "filename": "dataclasses_json-0.2.11-py3-none-any.whl", "has_sig": false, "md5_digest": "4cfbdf1461f685c022af1ac30d98f605", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15062, "upload_time": "2019-07-08T16:03:27", "upload_time_iso_8601": "2019-07-08T16:03:27.879550Z", "url": "https://files.pythonhosted.org/packages/02/e7/f679e30f0b16e111ed39883d48585bc6badc62c8017118e3247890521cf6/dataclasses_json-0.2.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0082e6735eb48b413373b686c15a4f2a", "sha256": "4ea6bfec6a1ea68098b7d302439f744db72308d966ae5771d96ffc7baeb27627"}, "downloads": -1, "filename": "dataclasses-json-0.2.11.tar.gz", "has_sig": false, "md5_digest": "0082e6735eb48b413373b686c15a4f2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18041, "upload_time": "2019-07-08T16:03:33", "upload_time_iso_8601": "2019-07-08T16:03:33.003410Z", "url": "https://files.pythonhosted.org/packages/bc/96/bc5e933c2a292bbc006ff5abbb0fd9ec2dc6289f605e8af3fa9008954761/dataclasses-json-0.2.11.tar.gz", "yanked": false}], "0.2.12": [{"comment_text": "", "digests": {"md5": "56f07735ad783c749608f0f2fb83097a", "sha256": "9215acd58e0f7921ea9d60b84481080108f54ee4c8b9ca0cbd9fc5d523b65f21"}, "downloads": -1, "filename": "dataclasses_json-0.2.12-py3-none-any.whl", "has_sig": false, "md5_digest": "56f07735ad783c749608f0f2fb83097a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15055, "upload_time": "2019-07-08T18:06:35", "upload_time_iso_8601": "2019-07-08T18:06:35.134786Z", "url": "https://files.pythonhosted.org/packages/c3/ae/90455d34e1a5691f95e304a7eedea748fb2c1df246ad1a4e476e675d9d6e/dataclasses_json-0.2.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88c0f01bcefdda3f2b97a673af746703", "sha256": "1d9d3aca0fd13fe021b46eb41a2995267e31ad621fec949d9709a85d68705a29"}, "downloads": -1, "filename": "dataclasses-json-0.2.12.tar.gz", "has_sig": false, "md5_digest": "88c0f01bcefdda3f2b97a673af746703", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18030, "upload_time": "2019-07-08T18:06:37", "upload_time_iso_8601": "2019-07-08T18:06:37.008327Z", "url": "https://files.pythonhosted.org/packages/bf/5b/87d03a259a6e37b03ae8633baeecb824d082384196d3e8721d0e143ca402/dataclasses-json-0.2.12.tar.gz", "yanked": false}], "0.2.13": [{"comment_text": "", "digests": {"md5": "7aea119388943e92fa87afa4fcadb496", "sha256": "12e8c21b70e645b1d5981ac6a6cf6f259170cd420dd41f656d9e13e4876d7a9c"}, "downloads": -1, "filename": "dataclasses_json-0.2.13-py3-none-any.whl", "has_sig": false, "md5_digest": "7aea119388943e92fa87afa4fcadb496", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15349, "upload_time": "2019-07-27T15:52:58", "upload_time_iso_8601": "2019-07-27T15:52:58.362875Z", "url": "https://files.pythonhosted.org/packages/39/aa/180154a583d65d38b33250d676c241bf4ef3a0eea0327874cb481e202a0f/dataclasses_json-0.2.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dde514b78c92e99354fa5120bb691d83", "sha256": "c89742080c73717d3b7e6914b57410830edefee86515fe6f238f9d8083ddd213"}, "downloads": -1, "filename": "dataclasses-json-0.2.13.tar.gz", "has_sig": false, "md5_digest": "dde514b78c92e99354fa5120bb691d83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18249, "upload_time": "2019-07-27T15:53:01", "upload_time_iso_8601": "2019-07-27T15:53:01.711475Z", "url": "https://files.pythonhosted.org/packages/c1/c4/ce471322736dcf3f2920e6944d025622e79f6b6e4cf462b892a4ed2bff35/dataclasses-json-0.2.13.tar.gz", "yanked": false}], "0.2.14": [{"comment_text": "", "digests": {"md5": "e4fdede25f06f63f7c54140322c0e372", "sha256": "4fdbb0fa654e46dcad6555722d52f741b1414a4188a4d7fa89bc7abf15323a2d"}, "downloads": -1, "filename": "dataclasses_json-0.2.14-py3-none-any.whl", "has_sig": false, "md5_digest": "e4fdede25f06f63f7c54140322c0e372", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15433, "upload_time": "2019-08-12T00:07:56", "upload_time_iso_8601": "2019-08-12T00:07:56.056786Z", "url": "https://files.pythonhosted.org/packages/9d/33/b494342928a66ce5d03bd0569f865408439245c860349dd353ab4bbd85fd/dataclasses_json-0.2.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e0df7576ee05e938f91c64d4b5f8208", "sha256": "16fdc36ec471fb6cc2054ff5ce2be78876d16f78cee6be3e49137c7fcf31667f"}, "downloads": -1, "filename": "dataclasses-json-0.2.14.tar.gz", "has_sig": false, "md5_digest": "7e0df7576ee05e938f91c64d4b5f8208", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18307, "upload_time": "2019-08-12T00:08:00", "upload_time_iso_8601": "2019-08-12T00:08:00.771114Z", "url": "https://files.pythonhosted.org/packages/16/6a/dc8a9587c6297f715ab915bc8e84814cdcdb4463b841a6b767aa7113b26d/dataclasses-json-0.2.14.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "7076858d9f746025a4379c455b120a46", "sha256": "26b4202be638e7aa11008e83c18498e1ac167cab0107eb9ba762770eda95e001"}, "downloads": -1, "filename": "dataclasses_json-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7076858d9f746025a4379c455b120a46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11188, "upload_time": "2019-02-28T15:59:49", "upload_time_iso_8601": "2019-02-28T15:59:49.609309Z", "url": "https://files.pythonhosted.org/packages/c5/9b/4ddd96d46493076628278879ee37f42ac78a6cac3765ac917edca515b9e0/dataclasses_json-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a4a791f33a309fa0a728e99bf90e73e", "sha256": "8301171939a6b03582c0d7f6c1e3f296f4b4f3bdf06b0b5734accc18abb467a6"}, "downloads": -1, "filename": "dataclasses-json-0.2.2.tar.gz", "has_sig": false, "md5_digest": "0a4a791f33a309fa0a728e99bf90e73e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13997, "upload_time": "2019-02-28T15:59:50", "upload_time_iso_8601": "2019-02-28T15:59:50.872103Z", "url": "https://files.pythonhosted.org/packages/32/9c/404246a1b24d7ec2864e56312928e8c47f2b1dcb8e6ac8d877b9fe8a5c59/dataclasses-json-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "2bc987fef9c43f12d9405fe968302e04", "sha256": "f899b93bda9ba887b623966c5c9693a4dae531164171b2d36fd984b40fe93de6"}, "downloads": -1, "filename": "dataclasses_json-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2bc987fef9c43f12d9405fe968302e04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11220, "upload_time": "2019-05-06T14:22:48", "upload_time_iso_8601": "2019-05-06T14:22:48.530052Z", "url": "https://files.pythonhosted.org/packages/91/ba/8be98a96a59e3970c9494dd9e2d922427d1a4555dbaeca2d1aea899917e4/dataclasses_json-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d32e487d51c40282afc223497c308897", "sha256": "ab038962951ae3e2064fb46d4e349a74026edd3973b5c072b3f6f5113658db4e"}, "downloads": -1, "filename": "dataclasses-json-0.2.3.tar.gz", "has_sig": false, "md5_digest": "d32e487d51c40282afc223497c308897", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13995, "upload_time": "2019-05-06T14:22:51", "upload_time_iso_8601": "2019-05-06T14:22:51.271120Z", "url": "https://files.pythonhosted.org/packages/ed/a8/021b7db2abd9e51f8b7548fa5cbf06491540a7fb00ae2630c79270ef9ef5/dataclasses-json-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "d0a87a8d035aacc0b00852a319559869", "sha256": "cd9f5811e18a5b2ffdbca9641886c801be5453973a385bf0b380e58cc68c503d"}, "downloads": -1, "filename": "dataclasses_json-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d0a87a8d035aacc0b00852a319559869", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12417, "upload_time": "2019-06-03T16:25:40", "upload_time_iso_8601": "2019-06-03T16:25:40.822871Z", "url": "https://files.pythonhosted.org/packages/b6/57/a08d75e7c37536e7b11ad6701b8418f19b1a2b576738a6363f748d5214cc/dataclasses_json-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65e41caf4d89950ebf45243fb49b67fb", "sha256": "d1d1c4eb1830ebb5c91a3d1d349690c6139411d3d196c2d8ed000755c291c058"}, "downloads": -1, "filename": "dataclasses-json-0.2.4.tar.gz", "has_sig": false, "md5_digest": "65e41caf4d89950ebf45243fb49b67fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14302, "upload_time": "2019-06-03T16:25:45", "upload_time_iso_8601": "2019-06-03T16:25:45.269670Z", "url": "https://files.pythonhosted.org/packages/e2/f2/d70888506f074524cffe16ea13e9a4bbc198c3ae1a62b63ad9064e8e6bf8/dataclasses-json-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "462d4f35da9c56c1287fc5d7c74de2bf", "sha256": "c8e53f9ed65849751b27e60ac0048d1609a114b326de93ea3e2338f3853f2933"}, "downloads": -1, "filename": "dataclasses_json-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "462d4f35da9c56c1287fc5d7c74de2bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13451, "upload_time": "2019-06-15T03:55:28", "upload_time_iso_8601": "2019-06-15T03:55:28.436351Z", "url": "https://files.pythonhosted.org/packages/48/a7/18386cb46ba0f4b6b78793b9f8d5338069b9646a1f4fe5536b1bd830b205/dataclasses_json-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c37861b57f21a16d4d0bd773edae409", "sha256": "d4868863649be39d0fd223b18e1335c87b50d2ed1a4876f494c8603052ec889e"}, "downloads": -1, "filename": "dataclasses-json-0.2.5.tar.gz", "has_sig": false, "md5_digest": "7c37861b57f21a16d4d0bd773edae409", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15275, "upload_time": "2019-06-15T03:55:33", "upload_time_iso_8601": "2019-06-15T03:55:33.593843Z", "url": "https://files.pythonhosted.org/packages/49/61/0845db183672af4912bc47537f640d152565b1249127df6253cad508b794/dataclasses-json-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "71519626afcafab1e929a785fda0a303", "sha256": "9a34e3f7cfd77eb1fadf4e1a88fcd5785409c7aaae0c702186e95fbfb32adfde"}, "downloads": -1, "filename": "dataclasses_json-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "71519626afcafab1e929a785fda0a303", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13452, "upload_time": "2019-06-16T15:50:13", "upload_time_iso_8601": "2019-06-16T15:50:13.173941Z", "url": "https://files.pythonhosted.org/packages/cc/5e/1a1eed2e0446136fad2d052010d184849c9f4180938652fce8f6a4dae6c0/dataclasses_json-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3e64281d753c03b435eb6a1cb8c69eb", "sha256": "971408623a535623d62c3664613800af00ef88cb8c1b92a775624065a7fcbf8c"}, "downloads": -1, "filename": "dataclasses-json-0.2.6.tar.gz", "has_sig": false, "md5_digest": "c3e64281d753c03b435eb6a1cb8c69eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15268, "upload_time": "2019-06-16T15:50:19", "upload_time_iso_8601": "2019-06-16T15:50:19.619119Z", "url": "https://files.pythonhosted.org/packages/ba/2c/ec8c927bfafb05109ce765fea53166428820ac6fc3c61b1646dd35daa0c0/dataclasses-json-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "8609273e848016f23b76683f15e1cf42", "sha256": "da6a7d6be2bad3f7bb777e2d392505aa43393e965c07f46f497672dd8e55dbca"}, "downloads": -1, "filename": "dataclasses_json-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "8609273e848016f23b76683f15e1cf42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13570, "upload_time": "2019-06-16T15:51:04", "upload_time_iso_8601": "2019-06-16T15:51:04.677358Z", "url": "https://files.pythonhosted.org/packages/2d/f5/46ead7ae1a85fbc8b2c48aba9337fb53d2202be565cbcc3c0338bb998cd1/dataclasses_json-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39ffa0a4af6247ca72be798302115f9b", "sha256": "5e301bb673d19b3629465a1af27887df4f0bf04475cf8c3405e0d98fe6f80f15"}, "downloads": -1, "filename": "dataclasses-json-0.2.7.tar.gz", "has_sig": false, "md5_digest": "39ffa0a4af6247ca72be798302115f9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15354, "upload_time": "2019-06-16T15:51:06", "upload_time_iso_8601": "2019-06-16T15:51:06.616819Z", "url": "https://files.pythonhosted.org/packages/13/b7/e62ca81885d08cb89683cb800ffd7c6eaa76a56c0e7d68548c8623488531/dataclasses-json-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "92ebbabcf561eba3fcc6d9cbc6d21621", "sha256": "4c5631629b33bab292c2932594db11e79094dd73f5c9b21bca0a78cf77b3b98f"}, "downloads": -1, "filename": "dataclasses_json-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "92ebbabcf561eba3fcc6d9cbc6d21621", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14097, "upload_time": "2019-07-06T22:56:08", "upload_time_iso_8601": "2019-07-06T22:56:08.726885Z", "url": "https://files.pythonhosted.org/packages/ce/b8/f8db6bc2b5f25eed5dca56fb35ac853704d99daf1deef45e9e24a869d3b6/dataclasses_json-0.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bf8744c1145d15918ad896c0d7fbc75", "sha256": "a063888d3da6fffceb64d4b5456b730e4358ecc8a9911591d3bed997facdc3d8"}, "downloads": -1, "filename": "dataclasses-json-0.2.8.tar.gz", "has_sig": false, "md5_digest": "6bf8744c1145d15918ad896c0d7fbc75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16418, "upload_time": "2019-07-06T22:56:11", "upload_time_iso_8601": "2019-07-06T22:56:11.549375Z", "url": "https://files.pythonhosted.org/packages/88/af/27ca4ffdd1ec5a060d25319508fc763a512d302ce540bd3c58ced09f31a8/dataclasses-json-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "3c5bde2320b51ae6e98633e2bc93a071", "sha256": "431d5bca9cfa97bb89653058d57161f589b27c0bfde423b8e5010384586a1678"}, "downloads": -1, "filename": "dataclasses_json-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "3c5bde2320b51ae6e98633e2bc93a071", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13826, "upload_time": "2019-07-07T13:51:26", "upload_time_iso_8601": "2019-07-07T13:51:26.071936Z", "url": "https://files.pythonhosted.org/packages/25/77/2a89b212e83fcde0da1f39f715d81866308af33a9d8d59babc79fba6a731/dataclasses_json-0.2.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "004e9fe8615c83db0707990f06cfcffc", "sha256": "139ead82ace99719e1e635c2b6f9fde22119f2bb214d9f1bceb0223ca4709d6f"}, "downloads": -1, "filename": "dataclasses-json-0.2.9.tar.gz", "has_sig": false, "md5_digest": "004e9fe8615c83db0707990f06cfcffc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15938, "upload_time": "2019-07-07T13:51:29", "upload_time_iso_8601": "2019-07-07T13:51:29.983008Z", "url": "https://files.pythonhosted.org/packages/96/13/85488edce03c8c88e2ea6bef83eee7c8fa28e03e8934e4cfc2d3cfadcbd6/dataclasses-json-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "687a7781900c67d5ab5210801ed3ad5a", "sha256": "e16dec16c87d1b1a58c139aa7945f27987040be39b4262cd785050dc4eb8d4a2"}, "downloads": -1, "filename": "dataclasses_json-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "687a7781900c67d5ab5210801ed3ad5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15590, "upload_time": "2019-08-25T16:07:12", "upload_time_iso_8601": "2019-08-25T16:07:12.111333Z", "url": "https://files.pythonhosted.org/packages/7d/1c/dd460f136da753a8f4dbddd6bf6d5818b5137c546ea886e1a647089865ff/dataclasses_json-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e657a2fc1bacd1e9387632ceca128007", "sha256": "a439f95ed7c530f7709923ef72944c0e8fd3d5c7e9e9b76b8416e1a9edd6700b"}, "downloads": -1, "filename": "dataclasses-json-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e657a2fc1bacd1e9387632ceca128007", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18529, "upload_time": "2019-08-25T16:07:14", "upload_time_iso_8601": "2019-08-25T16:07:14.294674Z", "url": "https://files.pythonhosted.org/packages/c1/f4/010ceab04722c15d3c97e2084ca8111dc75bca1911a33a95b94b284e3ce9/dataclasses-json-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "972be87a58acd3c5b53e516a2a954054", "sha256": "3635b76f91648dcfc407a681171307081d8881541a82b28bea6785a752350b36"}, "downloads": -1, "filename": "dataclasses_json-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "972be87a58acd3c5b53e516a2a954054", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15619, "upload_time": "2019-08-31T01:08:49", "upload_time_iso_8601": "2019-08-31T01:08:49.277950Z", "url": "https://files.pythonhosted.org/packages/e7/9b/433cd60d2c10e79b26a4fbbab6bc84c360975d59d97acae98945eb4d096f/dataclasses_json-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1e3ae260d324df522b4f0694af5ff29", "sha256": "6b1a6acb1ecaa33f18ffaa6c191fe21b33361457e5b4e1190d6d1e6798a1e1e4"}, "downloads": -1, "filename": "dataclasses-json-0.3.1.tar.gz", "has_sig": false, "md5_digest": "e1e3ae260d324df522b4f0694af5ff29", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18595, "upload_time": "2019-08-31T01:08:51", "upload_time_iso_8601": "2019-08-31T01:08:51.638309Z", "url": "https://files.pythonhosted.org/packages/02/00/b07425a5f2874c2fc5b86c61da09d0fc3120c1e6ec8e2feb9194d9b23b33/dataclasses-json-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "ef0a2d52743cd0b15fd9615332fbbbe1", "sha256": "065a94e07599b28830b55ac17e3a26c49ef88e209513140f2ef1a1954dd303c6"}, "downloads": -1, "filename": "dataclasses_json-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ef0a2d52743cd0b15fd9615332fbbbe1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15648, "upload_time": "2019-09-03T19:04:44", "upload_time_iso_8601": "2019-09-03T19:04:44.344777Z", "url": "https://files.pythonhosted.org/packages/f9/df/2e5be711c407361fe8fa6635fc4baae5e2e0bd2c96df010fd451c646ad79/dataclasses_json-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae751ad052e0a43ff9b668a12d761b76", "sha256": "d5883036560707fb785bc705fd965a0c9b94b44d10acca8ddde9dcc40dc12d61"}, "downloads": -1, "filename": "dataclasses-json-0.3.2.tar.gz", "has_sig": false, "md5_digest": "ae751ad052e0a43ff9b668a12d761b76", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18652, "upload_time": "2019-09-03T19:04:49", "upload_time_iso_8601": "2019-09-03T19:04:49.514638Z", "url": "https://files.pythonhosted.org/packages/fb/c6/2ce6a76120450fef70e78976b37d740e8e95a37bf237fc9f53518558b510/dataclasses-json-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "243297dbee9dcecb871c2fc2c4b10f69", "sha256": "0b82f09bcb5150a838db49dd150414f6acc93a3721f71f40845c67a933410efd"}, "downloads": -1, "filename": "dataclasses_json-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "243297dbee9dcecb871c2fc2c4b10f69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15894, "upload_time": "2019-09-23T01:12:00", "upload_time_iso_8601": "2019-09-23T01:12:00.621057Z", "url": "https://files.pythonhosted.org/packages/0f/e4/53f0f4fd001e2a2ec85d6c3e1f5ac197131710ce01cb73be3a95a537cf4a/dataclasses_json-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d57f788d6b603c46b78eb42c812123e", "sha256": "e54ba4f123218e8aa0d9c018935f5e83044b773a4cd22ab1705b075fab2964aa"}, "downloads": -1, "filename": "dataclasses-json-0.3.3.tar.gz", "has_sig": false, "md5_digest": "1d57f788d6b603c46b78eb42c812123e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19182, "upload_time": "2019-09-23T01:12:08", "upload_time_iso_8601": "2019-09-23T01:12:08.127701Z", "url": "https://files.pythonhosted.org/packages/09/31/44e88f841994ecec2cba9b7a13a7dbf7a6ec4cee47eabc7913c62ca37bcb/dataclasses-json-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "114863028554b5d02e33eb08cdc47700", "sha256": "71eb3ba2f133d2380c12d79a4b622f6a95395e0aa0ab52ef2f8043d8bf2e3d4c"}, "downloads": -1, "filename": "dataclasses_json-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "114863028554b5d02e33eb08cdc47700", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15904, "upload_time": "2019-09-28T02:05:24", "upload_time_iso_8601": "2019-09-28T02:05:24.206238Z", "url": "https://files.pythonhosted.org/packages/4d/f0/de7af629649e543d6973e9ed752f3ee7789826c0a1bac0d1a7dd308a1c49/dataclasses_json-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c94b8c935e63e04fe7060bd4ba3faf5c", "sha256": "4040d1c84061929fc79a53b2d1816249d7468e8a84d1a776b33421f38e71a08c"}, "downloads": -1, "filename": "dataclasses-json-0.3.4.tar.gz", "has_sig": false, "md5_digest": "c94b8c935e63e04fe7060bd4ba3faf5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19194, "upload_time": "2019-09-28T02:05:31", "upload_time_iso_8601": "2019-09-28T02:05:31.374780Z", "url": "https://files.pythonhosted.org/packages/47/28/c4dd88ee3a768ce123f2cdecd3f9422d78f96c379b7dc982976e4345b851/dataclasses-json-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "d674220f9388b44a01df97e77f46bfa8", "sha256": "3f348a132c6c84772b99fca50c447ef3b8382d274fd9a539c958dd9b93ba4806"}, "downloads": -1, "filename": "dataclasses_json-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d674220f9388b44a01df97e77f46bfa8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16150, "upload_time": "2019-10-20T20:09:19", "upload_time_iso_8601": "2019-10-20T20:09:19.641827Z", "url": "https://files.pythonhosted.org/packages/0b/a4/cbe5beca2e1f845d0d5443f754d6cfc598708dd3427aff904cf506fb3dd1/dataclasses_json-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6fbb318e8bb0e8c787bac8f685715a7", "sha256": "8851be971187d22a898247ffff9b23de6d5d1db93b8e648997a71a2e4023d13c"}, "downloads": -1, "filename": "dataclasses-json-0.3.5.tar.gz", "has_sig": false, "md5_digest": "a6fbb318e8bb0e8c787bac8f685715a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19284, "upload_time": "2019-10-20T20:09:31", "upload_time_iso_8601": "2019-10-20T20:09:31.449138Z", "url": "https://files.pythonhosted.org/packages/93/00/b82734609bde5ce864cf791aab1b74e8a68508616e88b03877f6254be165/dataclasses-json-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "2d4d555e958cd2369b77b9ec4d7177b6", "sha256": "616876ac06ca3a8f2ae977a4e044850e81dbd3f86a404430b783e12f017b75b5"}, "downloads": -1, "filename": "dataclasses_json-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "2d4d555e958cd2369b77b9ec4d7177b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16692, "upload_time": "2019-11-03T13:29:05", "upload_time_iso_8601": "2019-11-03T13:29:05.671839Z", "url": "https://files.pythonhosted.org/packages/68/c8/55ae81d89c5d8816138731ac9c62f93d74a1b87375b962fee470e257b1fb/dataclasses_json-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7169a677b4163093b22ded8655b36f2f", "sha256": "ebdf7407681763d6125fd00d15ed037cc3aa6f9129fe7634e8f891410e89559f"}, "downloads": -1, "filename": "dataclasses-json-0.3.6.tar.gz", "has_sig": false, "md5_digest": "7169a677b4163093b22ded8655b36f2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19594, "upload_time": "2019-11-03T13:29:07", "upload_time_iso_8601": "2019-11-03T13:29:07.674990Z", "url": "https://files.pythonhosted.org/packages/45/36/8de7229fa75991b91cd4734f7f74b32e78b0244688ce8d1d02584cae874a/dataclasses-json-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "3cd508c72f386f9e10482fbc2882a73d", "sha256": "8e7b68ee574bd67e305cbe06acac74137e978529fd1ea85184baedbf47ff0d49"}, "downloads": -1, "filename": "dataclasses_json-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "3cd508c72f386f9e10482fbc2882a73d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21933, "upload_time": "2019-12-19T12:35:03", "upload_time_iso_8601": "2019-12-19T12:35:03.690883Z", "url": "https://files.pythonhosted.org/packages/96/ac/8e09d3bb9a94a6e4b31a11207950be98c2f38a2dc69184eb8ffd00e4b1d8/dataclasses_json-0.3.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e17e760c925295a3fce66f5dc27e775b", "sha256": "a11bda62235094cc8385357a125be28233a20d4296274c44bb766b2f9f1e5d98"}, "downloads": -1, "filename": "dataclasses-json-0.3.7.tar.gz", "has_sig": false, "md5_digest": "e17e760c925295a3fce66f5dc27e775b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25392, "upload_time": "2019-12-19T12:35:06", "upload_time_iso_8601": "2019-12-19T12:35:06.406786Z", "url": "https://files.pythonhosted.org/packages/0a/af/701b83601e675aefe63ba56d194330d9c9d0e7558c38037145b5cc2aa6c8/dataclasses-json-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "5325f170b711853be7852ac1d9d20aff", "sha256": "4f22d698e1326e02863e513dda52a4760a5ffedf1a2c22cd2a15840d1cae82ae"}, "downloads": -1, "filename": "dataclasses_json-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "5325f170b711853be7852ac1d9d20aff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22127, "upload_time": "2020-02-08T02:08:04", "upload_time_iso_8601": "2020-02-08T02:08:04.452714Z", "url": "https://files.pythonhosted.org/packages/aa/ba/8c96a877e074db93cde7ad76aa826face0f12e49a1cdb26c3ddc932726c7/dataclasses_json-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0b26120a831fe8eaadefdd13be9f492", "sha256": "6c0582aecce40c48bddb03d577ed20980eeae6d84bff1880a6cd730f6daf4294"}, "downloads": -1, "filename": "dataclasses-json-0.3.8.tar.gz", "has_sig": false, "md5_digest": "c0b26120a831fe8eaadefdd13be9f492", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26172, "upload_time": "2020-02-08T02:08:08", "upload_time_iso_8601": "2020-02-08T02:08:08.645122Z", "url": "https://files.pythonhosted.org/packages/2e/89/8d1f479522c7efea649f5ad8b4c4bababdc472776687fc4c5f968e1b7e12/dataclasses-json-0.3.8.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f3a1d7ae30dc04510409930fd2a6ef5c", "sha256": "01c1d82d802b7c2e0a9c3527a5fcec49e7a760a7a66c6a6556c2cb887b1b495e"}, "downloads": -1, "filename": "dataclasses_json-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f3a1d7ae30dc04510409930fd2a6ef5c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22935, "upload_time": "2020-02-23T03:32:21", "upload_time_iso_8601": "2020-02-23T03:32:21.822563Z", "url": "https://files.pythonhosted.org/packages/87/da/851b3bc5066acc456806f113cf2b19d027445e5147548340ab14a89040eb/dataclasses_json-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "991ce3309382a9505ad475300c4b5855", "sha256": "6098e6e860132d77c021d0590ad03412c6e032fdc6184b1ddd1561c3df3b66d9"}, "downloads": -1, "filename": "dataclasses-json-0.4.0.tar.gz", "has_sig": false, "md5_digest": "991ce3309382a9505ad475300c4b5855", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26711, "upload_time": "2020-02-23T03:32:26", "upload_time_iso_8601": "2020-02-23T03:32:26.275696Z", "url": "https://files.pythonhosted.org/packages/c2/ba/a821f200fde19d642eb9b9170da421114a25ddf09af382b6ba28e54f198c/dataclasses-json-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "043376838b1f38bf9a7586ecd0de95f8", "sha256": "62555a73d803d2ef8a6b891825e5d0cc2f77dff9c427375ec75f3b5a9608a349"}, "downloads": -1, "filename": "dataclasses_json-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "043376838b1f38bf9a7586ecd0de95f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23113, "upload_time": "2020-02-23T14:21:17", "upload_time_iso_8601": "2020-02-23T14:21:17.220438Z", "url": "https://files.pythonhosted.org/packages/db/9d/52033c729db0c76fa569e933b33d892efb6c16ee87eec97e6f9c59ef6442/dataclasses_json-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fd0bdf0c66df4af8910062d82fa9657", "sha256": "2d20a1deb0745b5976174d1a7c397771a84a081abda9deed9619fcdba82c332d"}, "downloads": -1, "filename": "dataclasses-json-0.4.1.tar.gz", "has_sig": false, "md5_digest": "7fd0bdf0c66df4af8910062d82fa9657", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26886, "upload_time": "2020-02-23T14:21:23", "upload_time_iso_8601": "2020-02-23T14:21:23.376239Z", "url": "https://files.pythonhosted.org/packages/82/8e/c103e8762775d2b4453119271c4e5629b445b9686a15069be548950e3ca4/dataclasses-json-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "2179054d692be32d135ec75cbf2b36f2", "sha256": "dbb53ebbac30ef45f44f5f436b21bd5726a80a14e1a193958864229100271372"}, "downloads": -1, "filename": "dataclasses_json-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2179054d692be32d135ec75cbf2b36f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22937, "upload_time": "2020-03-13T11:34:38", "upload_time_iso_8601": "2020-03-13T11:34:38.829795Z", "url": "https://files.pythonhosted.org/packages/84/a2/d33e29e37146f6a8a18a0975e13c6acb9439d6a8698d406ca8a5c736f302/dataclasses_json-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4458a33aebb16ceb41cbb212189956a7", "sha256": "65ac9ae2f7ec152ee01bf42c8c024736d4cd6f6fb761502dec92bd553931e3d9"}, "downloads": -1, "filename": "dataclasses-json-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4458a33aebb16ceb41cbb212189956a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26752, "upload_time": "2020-03-13T11:34:46", "upload_time_iso_8601": "2020-03-13T11:34:46.691044Z", "url": "https://files.pythonhosted.org/packages/70/d2/138b0425d51a103d44fdcd775fef830dc1a829da338cd59040401d6d411c/dataclasses-json-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2179054d692be32d135ec75cbf2b36f2", "sha256": "dbb53ebbac30ef45f44f5f436b21bd5726a80a14e1a193958864229100271372"}, "downloads": -1, "filename": "dataclasses_json-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2179054d692be32d135ec75cbf2b36f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22937, "upload_time": "2020-03-13T11:34:38", "upload_time_iso_8601": "2020-03-13T11:34:38.829795Z", "url": "https://files.pythonhosted.org/packages/84/a2/d33e29e37146f6a8a18a0975e13c6acb9439d6a8698d406ca8a5c736f302/dataclasses_json-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4458a33aebb16ceb41cbb212189956a7", "sha256": "65ac9ae2f7ec152ee01bf42c8c024736d4cd6f6fb761502dec92bd553931e3d9"}, "downloads": -1, "filename": "dataclasses-json-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4458a33aebb16ceb41cbb212189956a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26752, "upload_time": "2020-03-13T11:34:46", "upload_time_iso_8601": "2020-03-13T11:34:46.691044Z", "url": "https://files.pythonhosted.org/packages/70/d2/138b0425d51a103d44fdcd775fef830dc1a829da338cd59040401d6d411c/dataclasses-json-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:27 2020"}