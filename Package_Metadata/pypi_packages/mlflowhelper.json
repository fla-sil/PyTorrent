{"info": {"author": "Martin Becker", "author_email": "becker@informatik.uni-wuerzburg.de", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "# mlflowhelper\n\nA set of tools for working with *mlflow* (see https://mlflow.org)\n\n## Features\n\n* managed artifact logging and **loading**\n    * **automatic** artifact logging and cleanup\n    * **no overwriting files** when running scripts in parallel\n    * **loading** artifact\n    * **central configuration** of logging and loading behavior\n* log **all** function parameters and locals with a simple call to `mlflowhelper.log_vars()`\n\n\n## Documentation\n\n```\npip install mlflowhelper\n```\n\n### Managed artifact logging and loading\n\n#### General functionality\n\n```python\nfrom matplotlib import pyplot as plt\nimport mlflowhelper\n\nwith mlflowhelper.start_run():\n    with mlflowhelper.managed_artifact(\"plot.png\") as artifact:\n        fig = plt.figure()\n        plt.plot([1,2,3], [1,2,3])\n        fig.savefig(artifact.get_path())\n```\nThis code snippet automatically logs the created artifact (`plot.png`).\nAt the same time if will create the artifact in a temporary folder so that you don't have to worry about\noverwriting it when running your scripts in parallel.\nBy default, this also cleans up the artifact and the temporary folder after logging.\n\nYou can also manage artifacts on a directory level:\n```python\nfrom matplotlib import pyplot as plt\nimport mlflowhelper\n\nwith mlflowhelper.start_run():\n    with mlflowhelper.managed_artifact_dir(\"plots\") as artifact_dir:\n\n        # plot 1\n        fig = plt.figure()\n        plt.plot([1,2,3], [1,2,3])\n        fig.savefig(artifact_dir.get_path(\"plot1.png\"))\n\n        # plot 2\n        fig = plt.figure()\n        plt.plot([1,2,3], [1,2,3])\n        fig.savefig(artifact_dir.get_path(\"plot2.png\"))\n```\n\n#### Artifact loading\nYou may want to run experiments but reuse some precomputed artifact from a different run (such\nas preprocessed data, trained models, etc.). This can be done as follows:\n```python\nimport mlflowhelper\nimport pandas as pd\n\nwith mlflowhelper.start_run():\n    mlflowhelper.set_load(run_id=\"e1363f760b1e4ab3a9e93f856f2e9341\", stages=[\"load_data\"]) # activate loading from previous run\n    with mlflowhelper.managed_artifact_dir(\"data.csv\", stage=\"load_data\") as artifact:\n        if artifact.loaded:\n            # load artifact\n            data = pd.read_csv(artifact.get_path())\n        else:\n            # create and save artifact\n            data = pd.read_csv(\"/shared/dir/data.csv\").sample(frac=1)\n            data.to_csv(artifact.get_path())\n```\n\nSimilarly, this works for directories of course:\n```python\nimport mlflowhelper\nimport pandas as pd\n\nmlflowhelper.set_load(run_id=\"e1363f760b1e4ab3a9e93f856f2e9341\", stages=[\"load_data\"]) # activate loading from previous run\nwith mlflowhelper.start_run():\n    with mlflowhelper.managed_artifact_dir(\"data\", stage=\"load_data\") as artifact_dir:\n        train_path = artifact_dir.get_path(\"test.csv\")\n        test_path = artifact_dir.get_path(\"train.csv\")\n        if artifact_dir.loaded:\n            # load artifacts\n            train = pd.read_csv(train_path)\n            test = pd.read_csv(test_path)\n        else:\n            data = pd.read_csv(\"/shared/dir/data.csv\").sample(frac=1)\n            train = data.iloc[:100,:]\n            test = data.iloc[100:,:]\n            # save artifacts\n            train.to_csv(train_path)\n            test.to_csv(test_path)\n```\n\n**Note:** The `stage` parameter must be set in `mlflowhelper.managed_artifact(_dir)` to enable loading.\n\n#### Central logging and loading behavior management\n\nLogging and loading behavior can be managed in a central way:\n```python\nimport mlflowhelper\nimport pandas as pd\n\nwith mlflowhelper.start_run():\n\n    # activate loading the stage `load_data` from previous run `e1363f760b1e4ab3a9e93f856f2e9341`\n    mlflowhelper.set_load(run_id=\"e1363f760b1e4ab3a9e93f856f2e9341\", stages=[\"load_data\"])\n\n    # deactivate logging the stage `load_data`, in this case for example because it was loaded from a previous run\n    mlflowhelper.set_skip_log(stages=[\"load_data\"])\n\n    with mlflowhelper.managed_artifact_dir(\"data\", stage=\"load_data\") as artifact_dir:\n        train_path = artifact_dir.get_path(\"test.csv\")\n        test_path = artifact_dir.get_path(\"train.csv\")\n        if artifact_dir.loaded:\n            # load artifacts\n            train = pd.read_csv(train_path)\n            test = pd.read_csv(test_path)\n        else:\n            data = pd.read_csv(\"/shared/dir/data.csv\").sample(frac=1)\n            train = data.iloc[:100,:]\n            test = data.iloc[100:,:]\n            # save artifacts\n            train.to_csv(train_path)\n            test.to_csv(test_path)\n```\n\n**Note:** For central managing the `stage` parameter must be set in `mlflowhelper.managed_artifact(_dir)`.\n\n\n### Easy parameter logging\n\n*mlflowhelper* helps you to never forget logging parameters again by making it easy to log all existing variables\nusing `mlflowhelper.log_vars`.\n\n```python\nimport mlflowhelper\n\ndef main(param1, param2, param3=\"defaultvalue\", verbose=0, *args, **kwargs):\n    some_variable = \"x\"\n    with mlflowhelper.start_run(): # mlflow.start_run() is also OK here\n        mlflowhelper.log_vars(exclude=[\"verbose\"])\n\nif __name__ == '__main__':\n    main(\"a\", \"b\", something_else=6)\n```\nThis will log:\n```json\n{\n  \"param1\": \"a\",\n  \"param2\": \"b\",\n  \"param3\": \"defaultvalue\",\n  \"something_else\": 6\n}\n```\n\n### Persistent dictionary\n\n*mlflowhelper* provides dictionary-like implementation that persistens elements to MLFlow.\n\n```python\nfrom mlflowhelper.tracking.collections import MlflowDict\nd = MlflowDict() # you can also provide tracking URI or an MlflowClient\nd[\"a\"] = 5\ndel d\nd = MlflowDict() # you can also provide tracking URI or an MlflowClient\nprint(d[\"a\"]) # will give you 5\n```\n\n\n\n### Other\nThere are a few more convenience functions included in `mlflowhelper`:\n\n\n## TODOs / Ideas\n- [ ] check if loading works across experiments\n- [ ] purge local artifacts (check via API which runs are marked as deleted and delete their artifacts)\n- [ ] support nested runs by creating subdirectories based on experiment and run\n- [ ] support loading from central cache instead of from runs\n- [ ] automatically log from where and what has been loaded\n- [ ] set tags for logged stages (to check for artifacts before loading them)\n- [ ] consider loading extensions:\n  - [ ] does nested loading make sense (different loads for certain nested runs)?\n  - [ ] does mixed loading make sense (loading artifacts from different runs for different stages)?\n\n\n## Note\nThis project has been set up using PyScaffold 3.2.1. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mgbckr/mlflowhelper", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "mlflowhelper", "package_url": "https://pypi.org/project/mlflowhelper/", "platform": "any", "project_url": "https://pypi.org/project/mlflowhelper/", "project_urls": {"Documentation": "https://github.com/mgbckr/mlflowhelper", "Homepage": "https://github.com/mgbckr/mlflowhelper"}, "release_url": "https://pypi.org/project/mlflowhelper/1.1.0/", "requires_dist": null, "requires_python": ">=3.4", "summary": "A set of tools for working with mlflow (see https://mlflow.org)", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mlflowhelper</h1>\n<p>A set of tools for working with <em>mlflow</em> (see <a href=\"https://mlflow.org\" rel=\"nofollow\">https://mlflow.org</a>)</p>\n<h2>Features</h2>\n<ul>\n<li>managed artifact logging and <strong>loading</strong>\n<ul>\n<li><strong>automatic</strong> artifact logging and cleanup</li>\n<li><strong>no overwriting files</strong> when running scripts in parallel</li>\n<li><strong>loading</strong> artifact</li>\n<li><strong>central configuration</strong> of logging and loading behavior</li>\n</ul>\n</li>\n<li>log <strong>all</strong> function parameters and locals with a simple call to <code>mlflowhelper.log_vars()</code></li>\n</ul>\n<h2>Documentation</h2>\n<pre><code>pip install mlflowhelper\n</code></pre>\n<h3>Managed artifact logging and loading</h3>\n<h4>General functionality</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlflowhelper</span>\n\n<span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">start_run</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">managed_artifact</span><span class=\"p\">(</span><span class=\"s2\">\"plot.png\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">artifact</span><span class=\"p\">:</span>\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">artifact</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">())</span>\n</pre>\n<p>This code snippet automatically logs the created artifact (<code>plot.png</code>).\nAt the same time if will create the artifact in a temporary folder so that you don't have to worry about\noverwriting it when running your scripts in parallel.\nBy default, this also cleans up the artifact and the temporary folder after logging.</p>\n<p>You can also manage artifacts on a directory level:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlflowhelper</span>\n\n<span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">start_run</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">managed_artifact_dir</span><span class=\"p\">(</span><span class=\"s2\">\"plots\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">artifact_dir</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># plot 1</span>\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">artifact_dir</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">(</span><span class=\"s2\">\"plot1.png\"</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># plot 2</span>\n        <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n        <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">artifact_dir</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">(</span><span class=\"s2\">\"plot2.png\"</span><span class=\"p\">))</span>\n</pre>\n<h4>Artifact loading</h4>\n<p>You may want to run experiments but reuse some precomputed artifact from a different run (such\nas preprocessed data, trained models, etc.). This can be done as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mlflowhelper</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">start_run</span><span class=\"p\">():</span>\n    <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">set_load</span><span class=\"p\">(</span><span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"s2\">\"e1363f760b1e4ab3a9e93f856f2e9341\"</span><span class=\"p\">,</span> <span class=\"n\">stages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"load_data\"</span><span class=\"p\">])</span> <span class=\"c1\"># activate loading from previous run</span>\n    <span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">managed_artifact_dir</span><span class=\"p\">(</span><span class=\"s2\">\"data.csv\"</span><span class=\"p\">,</span> <span class=\"n\">stage</span><span class=\"o\">=</span><span class=\"s2\">\"load_data\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">artifact</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">artifact</span><span class=\"o\">.</span><span class=\"n\">loaded</span><span class=\"p\">:</span>\n            <span class=\"c1\"># load artifact</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">artifact</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">())</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># create and save artifact</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"/shared/dir/data.csv\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">frac</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">artifact</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">())</span>\n</pre>\n<p>Similarly, this works for directories of course:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mlflowhelper</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">set_load</span><span class=\"p\">(</span><span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"s2\">\"e1363f760b1e4ab3a9e93f856f2e9341\"</span><span class=\"p\">,</span> <span class=\"n\">stages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"load_data\"</span><span class=\"p\">])</span> <span class=\"c1\"># activate loading from previous run</span>\n<span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">start_run</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">managed_artifact_dir</span><span class=\"p\">(</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"n\">stage</span><span class=\"o\">=</span><span class=\"s2\">\"load_data\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">artifact_dir</span><span class=\"p\">:</span>\n        <span class=\"n\">train_path</span> <span class=\"o\">=</span> <span class=\"n\">artifact_dir</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">(</span><span class=\"s2\">\"test.csv\"</span><span class=\"p\">)</span>\n        <span class=\"n\">test_path</span> <span class=\"o\">=</span> <span class=\"n\">artifact_dir</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">(</span><span class=\"s2\">\"train.csv\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">artifact_dir</span><span class=\"o\">.</span><span class=\"n\">loaded</span><span class=\"p\">:</span>\n            <span class=\"c1\"># load artifacts</span>\n            <span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">train_path</span><span class=\"p\">)</span>\n            <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">test_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"/shared/dir/data.csv\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">frac</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:</span><span class=\"mi\">100</span><span class=\"p\">,:]</span>\n            <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">:,:]</span>\n            <span class=\"c1\"># save artifacts</span>\n            <span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">train_path</span><span class=\"p\">)</span>\n            <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">test_path</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note:</strong> The <code>stage</code> parameter must be set in <code>mlflowhelper.managed_artifact(_dir)</code> to enable loading.</p>\n<h4>Central logging and loading behavior management</h4>\n<p>Logging and loading behavior can be managed in a central way:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mlflowhelper</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">start_run</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># activate loading the stage `load_data` from previous run `e1363f760b1e4ab3a9e93f856f2e9341`</span>\n    <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">set_load</span><span class=\"p\">(</span><span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"s2\">\"e1363f760b1e4ab3a9e93f856f2e9341\"</span><span class=\"p\">,</span> <span class=\"n\">stages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"load_data\"</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># deactivate logging the stage `load_data`, in this case for example because it was loaded from a previous run</span>\n    <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">set_skip_log</span><span class=\"p\">(</span><span class=\"n\">stages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"load_data\"</span><span class=\"p\">])</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">managed_artifact_dir</span><span class=\"p\">(</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"n\">stage</span><span class=\"o\">=</span><span class=\"s2\">\"load_data\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">artifact_dir</span><span class=\"p\">:</span>\n        <span class=\"n\">train_path</span> <span class=\"o\">=</span> <span class=\"n\">artifact_dir</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">(</span><span class=\"s2\">\"test.csv\"</span><span class=\"p\">)</span>\n        <span class=\"n\">test_path</span> <span class=\"o\">=</span> <span class=\"n\">artifact_dir</span><span class=\"o\">.</span><span class=\"n\">get_path</span><span class=\"p\">(</span><span class=\"s2\">\"train.csv\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">artifact_dir</span><span class=\"o\">.</span><span class=\"n\">loaded</span><span class=\"p\">:</span>\n            <span class=\"c1\"># load artifacts</span>\n            <span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">train_path</span><span class=\"p\">)</span>\n            <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">test_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"/shared/dir/data.csv\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">frac</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:</span><span class=\"mi\">100</span><span class=\"p\">,:]</span>\n            <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">:,:]</span>\n            <span class=\"c1\"># save artifacts</span>\n            <span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">train_path</span><span class=\"p\">)</span>\n            <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">test_path</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note:</strong> For central managing the <code>stage</code> parameter must be set in <code>mlflowhelper.managed_artifact(_dir)</code>.</p>\n<h3>Easy parameter logging</h3>\n<p><em>mlflowhelper</em> helps you to never forget logging parameters again by making it easy to log all existing variables\nusing <code>mlflowhelper.log_vars</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mlflowhelper</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">param2</span><span class=\"p\">,</span> <span class=\"n\">param3</span><span class=\"o\">=</span><span class=\"s2\">\"defaultvalue\"</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">some_variable</span> <span class=\"o\">=</span> <span class=\"s2\">\"x\"</span>\n    <span class=\"k\">with</span> <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">start_run</span><span class=\"p\">():</span> <span class=\"c1\"># mlflow.start_run() is also OK here</span>\n        <span class=\"n\">mlflowhelper</span><span class=\"o\">.</span><span class=\"n\">log_vars</span><span class=\"p\">(</span><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"verbose\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"n\">something_else</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n</pre>\n<p>This will log:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"param1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"param2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"param3\"</span><span class=\"p\">:</span> <span class=\"s2\">\"defaultvalue\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"something_else\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Persistent dictionary</h3>\n<p><em>mlflowhelper</em> provides dictionary-like implementation that persistens elements to MLFlow.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mlflowhelper.tracking.collections</span> <span class=\"kn\">import</span> <span class=\"n\">MlflowDict</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">MlflowDict</span><span class=\"p\">()</span> <span class=\"c1\"># you can also provide tracking URI or an MlflowClient</span>\n<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">del</span> <span class=\"n\">d</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">MlflowDict</span><span class=\"p\">()</span> <span class=\"c1\"># you can also provide tracking URI or an MlflowClient</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">])</span> <span class=\"c1\"># will give you 5</span>\n</pre>\n<h3>Other</h3>\n<p>There are a few more convenience functions included in <code>mlflowhelper</code>:</p>\n<h2>TODOs / Ideas</h2>\n<ul>\n<li>[ ] check if loading works across experiments</li>\n<li>[ ] purge local artifacts (check via API which runs are marked as deleted and delete their artifacts)</li>\n<li>[ ] support nested runs by creating subdirectories based on experiment and run</li>\n<li>[ ] support loading from central cache instead of from runs</li>\n<li>[ ] automatically log from where and what has been loaded</li>\n<li>[ ] set tags for logged stages (to check for artifacts before loading them)</li>\n<li>[ ] consider loading extensions:\n<ul>\n<li>[ ] does nested loading make sense (different loads for certain nested runs)?</li>\n<li>[ ] does mixed loading make sense (loading artifacts from different runs for different stages)?</li>\n</ul>\n</li>\n</ul>\n<h2>Note</h2>\n<p>This project has been set up using PyScaffold 3.2.1. For details and usage\ninformation on PyScaffold see <a href=\"https://pyscaffold.org/\" rel=\"nofollow\">https://pyscaffold.org/</a>.</p>\n\n          </div>"}, "last_serial": 6780209, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6911f7e86b1e1fbc752e3e27f692847a", "sha256": "3a24bbc52dcfde813a64df03aa89fd75dd62abbe4009ebe006ccaa7a6ac797bd"}, "downloads": -1, "filename": "mlflowhelper-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6911f7e86b1e1fbc752e3e27f692847a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 21630, "upload_time": "2019-08-07T08:23:12", "upload_time_iso_8601": "2019-08-07T08:23:12.133753Z", "url": "https://files.pythonhosted.org/packages/ef/1d/912ae1e31924e86a564f856f0519f653d5296a2182b9c31fcda7b6bceb21/mlflowhelper-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c8308606106a4b363df83de1b4d93046", "sha256": "1dc91d3fa39020da725f5f7a65d81505ad59880ebf1c60aaa47335418a601b1f"}, "downloads": -1, "filename": "mlflowhelper-1.1.0.tar.gz", "has_sig": false, "md5_digest": "c8308606106a4b363df83de1b4d93046", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 27097, "upload_time": "2020-03-09T20:17:20", "upload_time_iso_8601": "2020-03-09T20:17:20.739937Z", "url": "https://files.pythonhosted.org/packages/15/de/416c5f2b058d1d871f3f65a908c16a20f59c3bd161b81abc6ccd60439f9b/mlflowhelper-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8308606106a4b363df83de1b4d93046", "sha256": "1dc91d3fa39020da725f5f7a65d81505ad59880ebf1c60aaa47335418a601b1f"}, "downloads": -1, "filename": "mlflowhelper-1.1.0.tar.gz", "has_sig": false, "md5_digest": "c8308606106a4b363df83de1b4d93046", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 27097, "upload_time": "2020-03-09T20:17:20", "upload_time_iso_8601": "2020-03-09T20:17:20.739937Z", "url": "https://files.pythonhosted.org/packages/15/de/416c5f2b058d1d871f3f65a908c16a20f59c3bd161b81abc6ccd60439f9b/mlflowhelper-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:32 2020"}