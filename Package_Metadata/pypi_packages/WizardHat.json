{"info": {"author": "Merlin Neurotech", "author_email": "mnc@clubs.queensu.ca", "bugtrack_url": null, "classifiers": ["Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Human Machine Interfaces", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Visualization"], "description": "\n# WizardHat\n![logo](https://github.com/merlin-neurotech/WizardHat/blob/master/WizardHatLogoSmall.jpg)\n\nWizardHat is a library for handling, transforming, and visualizing EEG data streamed from consumer-grade devices over the Lab Streaming Layer (LSL) protocol. WizardHat's purpose is to enable users to easily and flexibly build brain-computer interfaces (BCIs) using a high-level API, with technical details managed in the background. Paired with ble2lsl, WizardHat currently supports streaming from the Muse (2016) brain-sensing headband and the OpenBCI Ganglion. WizardHat is easy to use and only requires three lines of code to get started.\n\nWizardHat was built by Merlin Neurotech at Queen's University.\n\n## Note : Active Development\nOur dedicated team at Merlin Neurotech is continously working to improve WizardHat and add new functionality.\nCurrent on-going projects:\n- MNE Library Compatibility\n- Implementing simple filters\n\nCheck back soon if the feature you are looking for is under development!\n\n## Getting Started\n\nThe procedure for installing WizardHat depends on whether or not you will be contributing to its development. In either case, begin by creating and activating a new Python virtual environment.\n\n### Installing for use only\nSimply run\n\n\tpip install wizardhat\n\nThis will automatically install the most recent release of WizardHat along with the required dependencies, including ble2lsl.\n\n### Installing for development\nTo set up WizardHat for development, begin by forking the repository on GitHub, then clone your fork:\n\n\tgit clone https://github.com/<your-github-username>/WizardHat.git\n\nIf you are also developing for ble2lsl, fork and then clone the ble2lsl repository as well, and install its dependencies:\n\n\tgit clone https://github.com/<your-github-username>/ble2lsl.git\n\tcd ble2lsl\n\tpip install -e .\n\tcd ..\n\nWhether or not you cloned ble2lsl, install the remaining dependencies for WizardHat:\n\n        cd WizardHat\n\tpip install -e .\n\nThe last command creates an editable install of WizardHat; i.e. after installation into an active virtual environment, running `import wizardhat` in any Python terminal/script will import the current (i.e. working) version of the modules from your fork's folder. \n\n### Finally\nTo ensure a bug free experience, open [your virtual env name]/lib/python3.6/site packages/pygatt/backends/bgapi/bgapi.py in a text or code editor and add:\n\n\ttime.sleep(0.25)\n\nbetween line 200 and 201 and save the file. This ensures that the Bluetooth protocol will be given adequate time to connect to the Muse before timing out.\n\nNow you are ready to use WizardHat!\n\n## Working with WizardHat\n\nOur library provides two options when building, debugging, or testing your BCI code:\n\n1) Streaming data from Muse or other EEG device\n2) Streaming randomly generated data for testing and debugging\n\nTo begin streaming, you will need first to import `ble2lsl` and `wizardhat.acquire` into your Python workspace. The BLE device parameters for different devices are stored in respective modules in `ble2lsl.devices`.\n\n\timport ble2lsl\n\tfrom ble2lsl.devices import muse2016\n\tfrom wizardhat import acquire\n\nYou then need to create a streaming outlet which establishes a Bluetooth connection with the EEG device:\n\n\tstreamer = ble2lsl.Streamer(muse2016)\n\nTo stream dummy data through an outlet that mimics (number of channels, sample rate, and metadata) the Muse 2016:\n\n\tdummy_streamer = ble2lsl.Dummy(muse2016)\n\nNext, to store and record the data, add the following line to capture the outlet stream:\n\n\treceiver = acquire.Receiver()\n\nNotice how you do not need to pass the outlet streamer as an argument to this function. LSL can stream over a local network, and `ble2lsl` doesn't need to run in the same process as `wizardhat`. Instead, `Receiver` automatically finds and connects to the LSL outlet; if multiple outlets are available, it will prompt you to choose from a list.\n\nNow that your streamer is receiving data, you can visualize and manipulate it online. Data is streamed into structured arrays with timestamps in their first columns and channel data in their remaining columns. By default, these arrays contain the last 10 s (to the nearest sample) of streamed data, and are accessed through the `streamer.buffers` dictionary. For example, the structured array of most recent timestamps and samples for the Muse 2016's EEG stream (labeled \"EEG\") is accessed by:\n\n\tstreamer.buffers[\"EEG\"].data\n\nThe available streams depend on the device, and are specified in the device's module in `ble2lsl.devices`. For example, the Muse 2016 headband provides the following stream types: \"EEG\", \"accelerometer\", \"gyroscope\", \"telemetry\", and \"status\". After each time window, data is saved to a CSV file in your directory under a folder called 'data' and is constantly updated while your stream is running. Each data buffer has an associated CSV file, accompanied by a JSON file of the same name providing metadata.\n\nTo gain a deeper understanding into how our framework operates, take a look under the hood.\n\n## Acknowledgements\nThis project was inspired by Alexander Barachant's [muse-lsl](https://github.com/alexandrebarachant/muse-lsl) from which some of the modules were originally based. The device specification for the OpenBCI Ganglion is largely derived from [OpenBCI_Python](https://github.com/OpenBCI/OpenBCI_Python).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/merlin-neurotech/WizardHat", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "WizardHat", "package_url": "https://pypi.org/project/WizardHat/", "platform": "", "project_url": "https://pypi.org/project/WizardHat/", "project_urls": {"Homepage": "https://github.com/merlin-neurotech/WizardHat"}, "release_url": "https://pypi.org/project/WizardHat/0.2.1/", "requires_dist": ["ble2lsl (==0.1.3)", "matplotlib (>=2.2.0)", "mne (>=0.15.2)", "numpy (>=1.13.0)", "pylsl (>=1.10.5)", "scipy (>=1.0.0)", "bokeh (>=0.13.0)"], "requires_python": ">=3.6.0", "summary": "Real-time processing and plotting of data streamed over LSL, with a focus on student-led BCI projects.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WizardHat</h1>\n<p><img alt=\"logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/225096be2b500e3ac5acadf582c97e9f0a6fa28e/68747470733a2f2f6769746875622e636f6d2f6d65726c696e2d6e6575726f746563682f57697a6172644861742f626c6f622f6d61737465722f57697a6172644861744c6f676f536d616c6c2e6a7067\"></p>\n<p>WizardHat is a library for handling, transforming, and visualizing EEG data streamed from consumer-grade devices over the Lab Streaming Layer (LSL) protocol. WizardHat's purpose is to enable users to easily and flexibly build brain-computer interfaces (BCIs) using a high-level API, with technical details managed in the background. Paired with ble2lsl, WizardHat currently supports streaming from the Muse (2016) brain-sensing headband and the OpenBCI Ganglion. WizardHat is easy to use and only requires three lines of code to get started.</p>\n<p>WizardHat was built by Merlin Neurotech at Queen's University.</p>\n<h2>Note : Active Development</h2>\n<p>Our dedicated team at Merlin Neurotech is continously working to improve WizardHat and add new functionality.\nCurrent on-going projects:</p>\n<ul>\n<li>MNE Library Compatibility</li>\n<li>Implementing simple filters</li>\n</ul>\n<p>Check back soon if the feature you are looking for is under development!</p>\n<h2>Getting Started</h2>\n<p>The procedure for installing WizardHat depends on whether or not you will be contributing to its development. In either case, begin by creating and activating a new Python virtual environment.</p>\n<h3>Installing for use only</h3>\n<p>Simply run</p>\n<pre><code>pip install wizardhat\n</code></pre>\n<p>This will automatically install the most recent release of WizardHat along with the required dependencies, including ble2lsl.</p>\n<h3>Installing for development</h3>\n<p>To set up WizardHat for development, begin by forking the repository on GitHub, then clone your fork:</p>\n<pre><code>git clone https://github.com/&lt;your-github-username&gt;/WizardHat.git\n</code></pre>\n<p>If you are also developing for ble2lsl, fork and then clone the ble2lsl repository as well, and install its dependencies:</p>\n<pre><code>git clone https://github.com/&lt;your-github-username&gt;/ble2lsl.git\ncd ble2lsl\npip install -e .\ncd ..\n</code></pre>\n<p>Whether or not you cloned ble2lsl, install the remaining dependencies for WizardHat:</p>\n<pre><code>    cd WizardHat\npip install -e .\n</code></pre>\n<p>The last command creates an editable install of WizardHat; i.e. after installation into an active virtual environment, running <code>import wizardhat</code> in any Python terminal/script will import the current (i.e. working) version of the modules from your fork's folder.</p>\n<h3>Finally</h3>\n<p>To ensure a bug free experience, open [your virtual env name]/lib/python3.6/site packages/pygatt/backends/bgapi/bgapi.py in a text or code editor and add:</p>\n<pre><code>time.sleep(0.25)\n</code></pre>\n<p>between line 200 and 201 and save the file. This ensures that the Bluetooth protocol will be given adequate time to connect to the Muse before timing out.</p>\n<p>Now you are ready to use WizardHat!</p>\n<h2>Working with WizardHat</h2>\n<p>Our library provides two options when building, debugging, or testing your BCI code:</p>\n<ol>\n<li>Streaming data from Muse or other EEG device</li>\n<li>Streaming randomly generated data for testing and debugging</li>\n</ol>\n<p>To begin streaming, you will need first to import <code>ble2lsl</code> and <code>wizardhat.acquire</code> into your Python workspace. The BLE device parameters for different devices are stored in respective modules in <code>ble2lsl.devices</code>.</p>\n<pre><code>import ble2lsl\nfrom ble2lsl.devices import muse2016\nfrom wizardhat import acquire\n</code></pre>\n<p>You then need to create a streaming outlet which establishes a Bluetooth connection with the EEG device:</p>\n<pre><code>streamer = ble2lsl.Streamer(muse2016)\n</code></pre>\n<p>To stream dummy data through an outlet that mimics (number of channels, sample rate, and metadata) the Muse 2016:</p>\n<pre><code>dummy_streamer = ble2lsl.Dummy(muse2016)\n</code></pre>\n<p>Next, to store and record the data, add the following line to capture the outlet stream:</p>\n<pre><code>receiver = acquire.Receiver()\n</code></pre>\n<p>Notice how you do not need to pass the outlet streamer as an argument to this function. LSL can stream over a local network, and <code>ble2lsl</code> doesn't need to run in the same process as <code>wizardhat</code>. Instead, <code>Receiver</code> automatically finds and connects to the LSL outlet; if multiple outlets are available, it will prompt you to choose from a list.</p>\n<p>Now that your streamer is receiving data, you can visualize and manipulate it online. Data is streamed into structured arrays with timestamps in their first columns and channel data in their remaining columns. By default, these arrays contain the last 10 s (to the nearest sample) of streamed data, and are accessed through the <code>streamer.buffers</code> dictionary. For example, the structured array of most recent timestamps and samples for the Muse 2016's EEG stream (labeled \"EEG\") is accessed by:</p>\n<pre><code>streamer.buffers[\"EEG\"].data\n</code></pre>\n<p>The available streams depend on the device, and are specified in the device's module in <code>ble2lsl.devices</code>. For example, the Muse 2016 headband provides the following stream types: \"EEG\", \"accelerometer\", \"gyroscope\", \"telemetry\", and \"status\". After each time window, data is saved to a CSV file in your directory under a folder called 'data' and is constantly updated while your stream is running. Each data buffer has an associated CSV file, accompanied by a JSON file of the same name providing metadata.</p>\n<p>To gain a deeper understanding into how our framework operates, take a look under the hood.</p>\n<h2>Acknowledgements</h2>\n<p>This project was inspired by Alexander Barachant's <a href=\"https://github.com/alexandrebarachant/muse-lsl\" rel=\"nofollow\">muse-lsl</a> from which some of the modules were originally based. The device specification for the OpenBCI Ganglion is largely derived from <a href=\"https://github.com/OpenBCI/OpenBCI_Python\" rel=\"nofollow\">OpenBCI_Python</a>.</p>\n\n          </div>"}, "last_serial": 4504777, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "77faa6ee79d2ea04ff05a9634126f4f6", "sha256": "b08c157de65864a878158a66720b58b7277b3e0815c40eacd1ea6e9b58a879fb"}, "downloads": -1, "filename": "WizardHat-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "77faa6ee79d2ea04ff05a9634126f4f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 36287, "upload_time": "2018-10-09T18:53:08", "upload_time_iso_8601": "2018-10-09T18:53:08.421332Z", "url": "https://files.pythonhosted.org/packages/5c/77/dd78739a7dfba4f6f6b3ecf7359e16636ce75fd290cbb0aaab5fafbeaf51/WizardHat-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7dc23a67b99d370c1e095a978b8a0b1", "sha256": "1e671b53507a6aab60ea6100ac9a3427ae4217c37312e1293341cb807c4c5f39"}, "downloads": -1, "filename": "WizardHat-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e7dc23a67b99d370c1e095a978b8a0b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 30194, "upload_time": "2018-10-09T18:53:09", "upload_time_iso_8601": "2018-10-09T18:53:09.739361Z", "url": "https://files.pythonhosted.org/packages/55/81/549c9ec6450df0708c8fae4492c700c819ce380ff65db99975464aa7eec6/WizardHat-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "87db9e63288b35c30690e7934c96d2a2", "sha256": "0d266c1eb2e5ba6d59a6235cbfbc1c683fb0d013654adf1e41513453bc76f3d5"}, "downloads": -1, "filename": "WizardHat-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "87db9e63288b35c30690e7934c96d2a2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 25188, "upload_time": "2018-11-19T22:13:22", "upload_time_iso_8601": "2018-11-19T22:13:22.499221Z", "url": "https://files.pythonhosted.org/packages/5c/6f/c0f34bfc3b29fc2b5f2c2b8a26e4ee0562e586fa63f968de6db9fba1bacf/WizardHat-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "230067e9aa10e5536fdd2200c0ed22bb", "sha256": "508c7c8e8e171c3f09ea7b2451de2eeb847aea91bcec4a11d2a21b7c4a012bed"}, "downloads": -1, "filename": "WizardHat-0.2.1.tar.gz", "has_sig": false, "md5_digest": "230067e9aa10e5536fdd2200c0ed22bb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 24495, "upload_time": "2018-11-19T22:13:23", "upload_time_iso_8601": "2018-11-19T22:13:23.680370Z", "url": "https://files.pythonhosted.org/packages/b1/b5/0fdffa10d2fe7b054c2f41266479191b70be68cc8643badd4294353281f2/WizardHat-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87db9e63288b35c30690e7934c96d2a2", "sha256": "0d266c1eb2e5ba6d59a6235cbfbc1c683fb0d013654adf1e41513453bc76f3d5"}, "downloads": -1, "filename": "WizardHat-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "87db9e63288b35c30690e7934c96d2a2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 25188, "upload_time": "2018-11-19T22:13:22", "upload_time_iso_8601": "2018-11-19T22:13:22.499221Z", "url": "https://files.pythonhosted.org/packages/5c/6f/c0f34bfc3b29fc2b5f2c2b8a26e4ee0562e586fa63f968de6db9fba1bacf/WizardHat-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "230067e9aa10e5536fdd2200c0ed22bb", "sha256": "508c7c8e8e171c3f09ea7b2451de2eeb847aea91bcec4a11d2a21b7c4a012bed"}, "downloads": -1, "filename": "WizardHat-0.2.1.tar.gz", "has_sig": false, "md5_digest": "230067e9aa10e5536fdd2200c0ed22bb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 24495, "upload_time": "2018-11-19T22:13:23", "upload_time_iso_8601": "2018-11-19T22:13:23.680370Z", "url": "https://files.pythonhosted.org/packages/b1/b5/0fdffa10d2fe7b054c2f41266479191b70be68cc8643badd4294353281f2/WizardHat-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:29 2020"}