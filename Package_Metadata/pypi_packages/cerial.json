{"info": {"author": "Simon Gomizelj", "author_email": "simon@vodik.xyz", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "======\ncerial\n======\n\n.. image:: https://travis-ci.org/vodik/cerial.svg?branch=master\n    :target: https://travis-ci.org/vodik/cerial\n\nFast, simple, and more pythonic binary serializer library.\n\nCerial combines Python 3 features, Cython, and memory views to create\na fast and easy library for packing and unpacking binary structures.\n\nRemoves a lot of the boilerplate that sometimes ends up surrounding\nstruct when used for serialization.\n\n-------\nExample\n-------\n\nHere's a quick example of how to use cerial to handle a UDP packet.\nFirst we define the structure:\n\n.. code-block:: python\n\n    >>> UDP = Struct('UDP',\n    ...    ('sport', 'uint16'),\n    ...    ('dport', 'uint16'),\n    ...    ('len', 'uint16'),\n    ...    ('csum', 'uint16'),\n    ...    endianness='!'\n    ...)\n\nUnlike the builtin struct library, cerial needs the fields to be bound\nto a name. This is because we expose the binary structure with\ndictionary interface instead of as a tuple of values.\n\nNow that we have a structure defined, we can use to parse data:\n\n.. code-block:: python\n\n    >>> data = bytearray(b'\\x08R\\x02\\x02\\x00w\\xa9k')\n    >>> hdr = UDP.parse(data)\n    >>> hdr\n    <UDP b'\\x08R\\x02\\x02\\x00w\\xa9k'>\n\nWe can now inspect the binary structure:\n\n.. code-block:: python\n\n    >>> hdr['csum']\n    43371\n    >>> dict(hdr)\n    {'csum': 43371, 'len': 119, 'sport': 2130, 'dport': 514}\n    >>> bytes(hdr)\n    b'\\x08R\\x02\\x02\\x00w\\xa9k'\n\nAnd we can also update individual fields, which will directly write to\nthe underlying memory view, no rendering step needed.\n\n.. code-block:: python\n\n    >>> hdr['csum'] = 0xffff\n    >>> data\n    bytearray(b'\\x08R\\x02\\x02\\x00w\\xff\\xff')\n    >>> bytes(hdr)\n    b'\\x08R\\x02\\x02\\x00w\\xff\\xff'\n\n----\nTODO\n----\n\n- Feature parity with the various primitives the struct library\n  supports\n- First class support for bit fields\n- Improve performance\n- Support readonly memoryviews (e.g. support bytes). An upstream\n  Cython issue.\n\n-----------\nPerformance\n-----------\n\nCurrently slightly slower than the struct module, but as far as I can\ntell, significantly faster than other similar libraries like pypacker\nor scrapy at parsing packets.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vodik/cerial", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "cerial", "package_url": "https://pypi.org/project/cerial/", "platform": "", "project_url": "https://pypi.org/project/cerial/", "project_urls": {"Homepage": "https://github.com/vodik/cerial"}, "release_url": "https://pypi.org/project/cerial/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Python3 serializer with memoryview support", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/vodik/cerial\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/vodik/cerial.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d841bcc608fa3e162e9e2800b302dd97e433c91a/68747470733a2f2f7472617669732d63692e6f72672f766f64696b2f63657269616c2e7376673f6272616e63683d6d6173746572\"></a>\n<p>Fast, simple, and more pythonic binary serializer library.</p>\n<p>Cerial combines Python 3 features, Cython, and memory views to create\na fast and easy library for packing and unpacking binary structures.</p>\n<p>Removes a lot of the boilerplate that sometimes ends up surrounding\nstruct when used for serialization.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Here\u2019s a quick example of how to use cerial to handle a UDP packet.\nFirst we define the structure:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">UDP</span> <span class=\"o\">=</span> <span class=\"n\">Struct</span><span class=\"p\">(</span><span class=\"s1\">'UDP'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>    <span class=\"p\">(</span><span class=\"s1\">'sport'</span><span class=\"p\">,</span> <span class=\"s1\">'uint16'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>    <span class=\"p\">(</span><span class=\"s1\">'dport'</span><span class=\"p\">,</span> <span class=\"s1\">'uint16'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>    <span class=\"p\">(</span><span class=\"s1\">'len'</span><span class=\"p\">,</span> <span class=\"s1\">'uint16'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>    <span class=\"p\">(</span><span class=\"s1\">'csum'</span><span class=\"p\">,</span> <span class=\"s1\">'uint16'</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>    <span class=\"n\">endianness</span><span class=\"o\">=</span><span class=\"s1\">'!'</span>\n<span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Unlike the builtin struct library, cerial needs the fields to be bound\nto a name. This is because we expose the binary structure with\ndictionary interface instead of as a tuple of values.</p>\n<p>Now that we have a structure defined, we can use to parse data:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x08</span><span class=\"s1\">R</span><span class=\"se\">\\x02\\x02\\x00</span><span class=\"s1\">w</span><span class=\"se\">\\xa9</span><span class=\"s1\">k'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hdr</span> <span class=\"o\">=</span> <span class=\"n\">UDP</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hdr</span>\n<span class=\"o\">&lt;</span><span class=\"n\">UDP</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x08</span><span class=\"s1\">R</span><span class=\"se\">\\x02\\x02\\x00</span><span class=\"s1\">w</span><span class=\"se\">\\xa9</span><span class=\"s1\">k'</span><span class=\"o\">&gt;</span>\n</pre>\n<p>We can now inspect the binary structure:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hdr</span><span class=\"p\">[</span><span class=\"s1\">'csum'</span><span class=\"p\">]</span>\n<span class=\"mi\">43371</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">hdr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'csum'</span><span class=\"p\">:</span> <span class=\"mi\">43371</span><span class=\"p\">,</span> <span class=\"s1\">'len'</span><span class=\"p\">:</span> <span class=\"mi\">119</span><span class=\"p\">,</span> <span class=\"s1\">'sport'</span><span class=\"p\">:</span> <span class=\"mi\">2130</span><span class=\"p\">,</span> <span class=\"s1\">'dport'</span><span class=\"p\">:</span> <span class=\"mi\">514</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">hdr</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x08</span><span class=\"s1\">R</span><span class=\"se\">\\x02\\x02\\x00</span><span class=\"s1\">w</span><span class=\"se\">\\xa9</span><span class=\"s1\">k'</span>\n</pre>\n<p>And we can also update individual fields, which will directly write to\nthe underlying memory view, no rendering step needed.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hdr</span><span class=\"p\">[</span><span class=\"s1\">'csum'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mh\">0xffff</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span>\n<span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x08</span><span class=\"s1\">R</span><span class=\"se\">\\x02\\x02\\x00</span><span class=\"s1\">w</span><span class=\"se\">\\xff\\xff</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">hdr</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x08</span><span class=\"s1\">R</span><span class=\"se\">\\x02\\x02\\x00</span><span class=\"s1\">w</span><span class=\"se\">\\xff\\xff</span><span class=\"s1\">'</span>\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Feature parity with the various primitives the struct library\nsupports</li>\n<li>First class support for bit fields</li>\n<li>Improve performance</li>\n<li>Support readonly memoryviews (e.g. support bytes). An upstream\nCython issue.</li>\n</ul>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>Currently slightly slower than the struct module, but as far as I can\ntell, significantly faster than other similar libraries like pypacker\nor scrapy at parsing packets.</p>\n</div>\n\n          </div>"}, "last_serial": 3130151, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1721baea5265e2ebd9ac743df8dc9bbc", "sha256": "e1ebf09b520c8d56c7a3b6079720ea3ee7101cdfccdf0257f590b3ba0a1702a4"}, "downloads": -1, "filename": "cerial-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1721baea5265e2ebd9ac743df8dc9bbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 471856, "upload_time": "2017-08-28T20:48:27", "upload_time_iso_8601": "2017-08-28T20:48:27.084447Z", "url": "https://files.pythonhosted.org/packages/cb/05/80303e683fb34ab1161d46c32e2f446335c29d9abe7a5c1fe86072a510ab/cerial-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1721baea5265e2ebd9ac743df8dc9bbc", "sha256": "e1ebf09b520c8d56c7a3b6079720ea3ee7101cdfccdf0257f590b3ba0a1702a4"}, "downloads": -1, "filename": "cerial-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1721baea5265e2ebd9ac743df8dc9bbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 471856, "upload_time": "2017-08-28T20:48:27", "upload_time_iso_8601": "2017-08-28T20:48:27.084447Z", "url": "https://files.pythonhosted.org/packages/cb/05/80303e683fb34ab1161d46c32e2f446335c29d9abe7a5c1fe86072a510ab/cerial-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:46 2020"}