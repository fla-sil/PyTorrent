{"info": {"author": "Michael Elsd\u00f6rfer", "author_email": "michael@elsdoerfer.info", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# wasmbind\n\nWraps your WebAssembly exports to provide you are with a more usable interface in Python. \nCurrently works with [AssemblyScript](https://assemblyscript.org/) modules, and \n[python-ext-wasm](https://github.com/wasmerio/python-ext-wasm) as the loader.\n\nIn doing so, it tries to play a similar role as [wasm-bindgen](https://github.com/rustwasm/wasm-bindgen) \nor [as-bind](https://github.com/torch2424/as-bind) in JavaScript.\n\nInstall with `pip install wasmbind` or [`poetry add wasmbind`](https://github.com/python-poetry/poetry).\n\n**WARNING**: As of this writing, the latest published version 0.3 of `python-ext-wasm` is not supported;\nyou need to run on git master. The released version does not allow us to access the WASM memory. \n\n\n## Features\n\nFeatures: \n\n- \u2705 Strings, Arrays, Maps, Custom Classes.\n- \u2705 Work with AssemblyScript objects in Python.\n- \u2705 Instantiate new AssemblyScript objects in Python. \n\nFuture plans:\n\n- [ ] Allow wrapping arrays returned from WASM.\n- [ ] Improve array allocation by finding available types in RTTI.\n- [ ] Support imports (needs [#28](https://github.com/wasmerio/python-ext-wasm/issues/28))\n- [ ] Improve these docs.\n- [ ] See if we can use RTTI to remove the need for a manual `as_`. We might have to create a class registry\n      similar to [as-bind](https://github.com/torch2424/as-bind/blob/97353ef6f8e39a4277957079b5d6a9e7d85ee709/lib/assembly/as-bind.ts)\n- [ ] Investigate an alternative approach wherein you predefine classes (with types) in Python code.\n- [ ] Allow creation of types without a constructor.\n\n\n## Usage\n\nSetup your module like this:\n\n```python\nfrom wasmer import Instance\nwasm = Instance(open('yourscript.wasm', 'rb').read())\n\nfrom wasmbind import Module\nmodule = Module(wasm)\n```\n\nHere are some sample interactions.\n\n#### Strings\n\n```typescript\nexport function helloworld(name: string): string {\n    return \"hello, \" + name\n}\n```\n\n```python\n>>> module.helloworld(\"michael\", as_=str)\n\"hello, michael\"\n```\n\nYou'll note that you have to specificy the desired return type via `as_`. This is because WASM only\ngives us a pointer to a memory location, and we otherwise have no idea what the type is. See the section\n`Resolving Return Values` for other options.\n\nPassing values *into* AssemblyScript works, because we know it the type. In this case, we can allocate\na `string` on the AssemblyScript side and pass the pointer to it into `helloworld`.\n\nNote: You'll get a real Python `str` from AssemblyScript, and you are expected to pass real `str` \nobjects to AssemblyScript functions. Strings are immutable in AssemblyScript and Python. Those\nthings mean that for the boundary Python <-> AssemblyScript, they are passed by value and copied. No\nreference counting is involved.\n\n\n#### Objects & Properties\n\n```typescript\nexport class File {\n  constructor(\n    public size: i32,\n  ) {}\n}\n```\n\n```python\n>>> dir = module.Directory(3)\n>>> dir.size\n3\n>>> dir.size = 10\n>>> dir.size\n10\n```\n\n#### Objects\n\n```typescript\nexport class Line {\n  constructor(\n    public s: string\n  ) {}\n}\n\nexport class File {\n  public lines: Line[] = []\n\n  constructor() {}\n  \n  addLine(line: Line): number {\n    this.lines.push(line);\n    return this.lines.length; \n  }\n}\n```\n\n```python\n>>> file = module.File()\n>>> line = module.Line(\"line 1\")\n>>> file.addLine(line)\n1\n```\n\n#### Maps and other generic types\n \nLet's say you have a function that takes a map as an argument:\n\n```typescript\nexport function getMap(): Map<string, i32> {\n  return new Map();\n}\n```\n\nFirst, if you look into this module's exports, you will note that there is only `getMap()`. The \n`Map` class itself was not exported. \n\nNow, if you add `export {Map}`, depending on your code, you might see exports such as:\n\n```\n'Map<~lib/string/String,~lib/string/String>#get', 'Map<i32,i32>#constructor', 'Map<i32,i32>#clear'\n```\n\nEvery concrete version of the generic `Map` type is exported separately, the names aren't \nvery nice, and finally, the classes are incomplete: Only methods which were used at some\npoint in your code are exported, the rest, I assume, have been optimized away.\n\nCurrently, `wasmbind` does not do anything special with those exports, which means you can\nuse them, but they are not very accessible.\n\nThe best way to use a map, which I have found so far, is this:\n\n```typescript\nexport class StringMap extends Map<string, string> {};\n```\n\nThis will give you a complete and fully-functional `StringMap` class in Python.\n\n\n## Resolving Return Values\n\nIf you have a memory address, you can do:\n\n``module.resolve()`` or ``module.resolve(as_=T)``\n\nIf you have an opaque `AssemblyScriptObject`, you can do `obj.as_(T)`.\n\nPossible values for `as_`:\n\n- If not given, we'll try to auto-detect.\n- `str`\n- Any `AssemblyScriptClass` exported by the module.\n- `typing.List` or `typing.List[SomeOtherType]`, with `SomeOtherType` being any `as` value.\n\nOptions for the future:\n\n```python\n# Every return value is a a Opaque Type that you can either call .native() on or .as().\nmodule = Module(instance, value_handler=wrap_opaque)\n\n# Every return value is auto-instantiated via the object header \nmodule = Module(instance, value_handler=auto_resolve)\n\n# Using mypy to predefine the return types of each method and function call. \nmodule = Module(instance, class_registry={})\n```\n\n## Opaque Values\n\nSometimes it can be nice to pass data structures to AssemblyScript that you just want to keep as-is, without \nAssemblyScript touching them, and getting them back; in particular, when dealing with complex data structures.\n\nTo help support this case, `wasmbind` supports a mechanism by which:\n\n- You can put an arbitrary Python value into a local registry.\n- You'll be given an opaque object that you can pass to AssemblyScript functions.\n- AssemblyScript will see an integer (we start counting at 1, so it's up to you if you want to use u8, u32, ...)\n- When a value comes out of AssemblyScript, you need to instruct `wasmbind`, using the regular mechanisms, to\n  resolve this opaque pointer as a `wasmbind.OpaqueValue` instance.\n  \nHere is an example:\n\n```typescript\nexport function take(val: u8): u8 { return val; }\n```\n\n```python\nfrom wasmbind import OpaqueValue\nmy_map = {\"x\": 1}\nwrapped_map = module.register_opaque_value(my_map)\nassert module.take(wrapped_map, as_=OpaqueValue) == {\"x\": 1}\n```\n \n\n## Notes\n\nIn part, this is a port of the AssemblyScript loader. The following links were helpful in implementing this:\n\n- [AssemblyScript Loader code](https://github.com/AssemblyScript/assemblyscript/blob/master/lib/loader/index.js)\n- [AssemblyScript Loader docs](https://docs.assemblyscript.org/basics/loader#why-not-more-convenient)\n- [wasmer-as code](https://github.com/onsails/wasmer-as)\n- [as-bind code](https://github.com/torch2424/as-bind)\n- [python-ext-wasm docs](https://github.com/wasmerio/python-ext-wasm)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wasmbind", "package_url": "https://pypi.org/project/wasmbind/", "platform": "", "project_url": "https://pypi.org/project/wasmbind/", "project_urls": null, "release_url": "https://pypi.org/project/wasmbind/0.3/", "requires_dist": null, "requires_python": ">=3.7,<4.0", "summary": "", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>wasmbind</h1>\n<p>Wraps your WebAssembly exports to provide you are with a more usable interface in Python.\nCurrently works with <a href=\"https://assemblyscript.org/\" rel=\"nofollow\">AssemblyScript</a> modules, and\n<a href=\"https://github.com/wasmerio/python-ext-wasm\" rel=\"nofollow\">python-ext-wasm</a> as the loader.</p>\n<p>In doing so, it tries to play a similar role as <a href=\"https://github.com/rustwasm/wasm-bindgen\" rel=\"nofollow\">wasm-bindgen</a>\nor <a href=\"https://github.com/torch2424/as-bind\" rel=\"nofollow\">as-bind</a> in JavaScript.</p>\n<p>Install with <code>pip install wasmbind</code> or <a href=\"https://github.com/python-poetry/poetry\" rel=\"nofollow\"><code>poetry add wasmbind</code></a>.</p>\n<p><strong>WARNING</strong>: As of this writing, the latest published version 0.3 of <code>python-ext-wasm</code> is not supported;\nyou need to run on git master. The released version does not allow us to access the WASM memory.</p>\n<h2>Features</h2>\n<p>Features:</p>\n<ul>\n<li>\u2705 Strings, Arrays, Maps, Custom Classes.</li>\n<li>\u2705 Work with AssemblyScript objects in Python.</li>\n<li>\u2705 Instantiate new AssemblyScript objects in Python.</li>\n</ul>\n<p>Future plans:</p>\n<ul>\n<li>[ ] Allow wrapping arrays returned from WASM.</li>\n<li>[ ] Improve array allocation by finding available types in RTTI.</li>\n<li>[ ] Support imports (needs <a href=\"https://github.com/wasmerio/python-ext-wasm/issues/28\" rel=\"nofollow\">#28</a>)</li>\n<li>[ ] Improve these docs.</li>\n<li>[ ] See if we can use RTTI to remove the need for a manual <code>as_</code>. We might have to create a class registry\nsimilar to <a href=\"https://github.com/torch2424/as-bind/blob/97353ef6f8e39a4277957079b5d6a9e7d85ee709/lib/assembly/as-bind.ts\" rel=\"nofollow\">as-bind</a></li>\n<li>[ ] Investigate an alternative approach wherein you predefine classes (with types) in Python code.</li>\n<li>[ ] Allow creation of types without a constructor.</li>\n</ul>\n<h2>Usage</h2>\n<p>Setup your module like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Instance</span>\n<span class=\"n\">wasm</span> <span class=\"o\">=</span> <span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'yourscript.wasm'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wasmbind</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">)</span>\n</pre>\n<p>Here are some sample interactions.</p>\n<h4>Strings</h4>\n<pre><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">helloworld</span><span class=\"p\">(</span><span class=\"nx\">name</span>: <span class=\"kt\">string</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"hello, \"</span> <span class=\"o\">+</span> <span class=\"nx\">name</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">helloworld</span><span class=\"p\">(</span><span class=\"s2\">\"michael\"</span><span class=\"p\">,</span> <span class=\"n\">as_</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"s2\">\"hello, michael\"</span>\n</pre>\n<p>You'll note that you have to specificy the desired return type via <code>as_</code>. This is because WASM only\ngives us a pointer to a memory location, and we otherwise have no idea what the type is. See the section\n<code>Resolving Return Values</code> for other options.</p>\n<p>Passing values <em>into</em> AssemblyScript works, because we know it the type. In this case, we can allocate\na <code>string</code> on the AssemblyScript side and pass the pointer to it into <code>helloworld</code>.</p>\n<p>Note: You'll get a real Python <code>str</code> from AssemblyScript, and you are expected to pass real <code>str</code>\nobjects to AssemblyScript functions. Strings are immutable in AssemblyScript and Python. Those\nthings mean that for the boundary Python &lt;-&gt; AssemblyScript, they are passed by value and copied. No\nreference counting is involved.</p>\n<h4>Objects &amp; Properties</h4>\n<pre><span class=\"kr\">export</span> <span class=\"kr\">class</span> <span class=\"nx\">File</span> <span class=\"p\">{</span>\n  <span class=\"kr\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">size</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dir</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Directory</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dir</span><span class=\"o\">.</span><span class=\"n\">size</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dir</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dir</span><span class=\"o\">.</span><span class=\"n\">size</span>\n<span class=\"mi\">10</span>\n</pre>\n<h4>Objects</h4>\n<pre><span class=\"kr\">export</span> <span class=\"kr\">class</span> <span class=\"nx\">Line</span> <span class=\"p\">{</span>\n  <span class=\"kr\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">s</span>: <span class=\"kt\">string</span>\n  <span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">export</span> <span class=\"kr\">class</span> <span class=\"nx\">File</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">lines</span>: <span class=\"kt\">Line</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n  <span class=\"kr\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n  \n  <span class=\"nx\">addLine</span><span class=\"p\">(</span><span class=\"nx\">line</span>: <span class=\"kt\">Line</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"kt\">number</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lines</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">line</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lines</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> \n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Line</span><span class=\"p\">(</span><span class=\"s2\">\"line 1\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">addLine</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n</pre>\n<h4>Maps and other generic types</h4>\n<p>Let's say you have a function that takes a map as an argument:</p>\n<pre><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getMap</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">Map</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">i32</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">Map</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre>\n<p>First, if you look into this module's exports, you will note that there is only <code>getMap()</code>. The\n<code>Map</code> class itself was not exported.</p>\n<p>Now, if you add <code>export {Map}</code>, depending on your code, you might see exports such as:</p>\n<pre><code>'Map&lt;~lib/string/String,~lib/string/String&gt;#get', 'Map&lt;i32,i32&gt;#constructor', 'Map&lt;i32,i32&gt;#clear'\n</code></pre>\n<p>Every concrete version of the generic <code>Map</code> type is exported separately, the names aren't\nvery nice, and finally, the classes are incomplete: Only methods which were used at some\npoint in your code are exported, the rest, I assume, have been optimized away.</p>\n<p>Currently, <code>wasmbind</code> does not do anything special with those exports, which means you can\nuse them, but they are not very accessible.</p>\n<p>The best way to use a map, which I have found so far, is this:</p>\n<pre><span class=\"kr\">export</span> <span class=\"kr\">class</span> <span class=\"nx\">StringMap</span> <span class=\"kr\">extends</span> <span class=\"nx\">Map</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"o\">&gt;</span> <span class=\"p\">{};</span>\n</pre>\n<p>This will give you a complete and fully-functional <code>StringMap</code> class in Python.</p>\n<h2>Resolving Return Values</h2>\n<p>If you have a memory address, you can do:</p>\n<p><code>module.resolve()</code> or <code>module.resolve(as_=T)</code></p>\n<p>If you have an opaque <code>AssemblyScriptObject</code>, you can do <code>obj.as_(T)</code>.</p>\n<p>Possible values for <code>as_</code>:</p>\n<ul>\n<li>If not given, we'll try to auto-detect.</li>\n<li><code>str</code></li>\n<li>Any <code>AssemblyScriptClass</code> exported by the module.</li>\n<li><code>typing.List</code> or <code>typing.List[SomeOtherType]</code>, with <code>SomeOtherType</code> being any <code>as</code> value.</li>\n</ul>\n<p>Options for the future:</p>\n<pre><span class=\"c1\"># Every return value is a a Opaque Type that you can either call .native() on or .as().</span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">value_handler</span><span class=\"o\">=</span><span class=\"n\">wrap_opaque</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Every return value is auto-instantiated via the object header </span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">value_handler</span><span class=\"o\">=</span><span class=\"n\">auto_resolve</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using mypy to predefine the return types of each method and function call. </span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">class_registry</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n</pre>\n<h2>Opaque Values</h2>\n<p>Sometimes it can be nice to pass data structures to AssemblyScript that you just want to keep as-is, without\nAssemblyScript touching them, and getting them back; in particular, when dealing with complex data structures.</p>\n<p>To help support this case, <code>wasmbind</code> supports a mechanism by which:</p>\n<ul>\n<li>You can put an arbitrary Python value into a local registry.</li>\n<li>You'll be given an opaque object that you can pass to AssemblyScript functions.</li>\n<li>AssemblyScript will see an integer (we start counting at 1, so it's up to you if you want to use u8, u32, ...)</li>\n<li>When a value comes out of AssemblyScript, you need to instruct <code>wasmbind</code>, using the regular mechanisms, to\nresolve this opaque pointer as a <code>wasmbind.OpaqueValue</code> instance.</li>\n</ul>\n<p>Here is an example:</p>\n<pre><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">take</span><span class=\"p\">(</span><span class=\"nx\">val</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">u8</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmbind</span> <span class=\"kn\">import</span> <span class=\"n\">OpaqueValue</span>\n<span class=\"n\">my_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"n\">wrapped_map</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">register_opaque_value</span><span class=\"p\">(</span><span class=\"n\">my_map</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">wrapped_map</span><span class=\"p\">,</span> <span class=\"n\">as_</span><span class=\"o\">=</span><span class=\"n\">OpaqueValue</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre>\n<h2>Notes</h2>\n<p>In part, this is a port of the AssemblyScript loader. The following links were helpful in implementing this:</p>\n<ul>\n<li><a href=\"https://github.com/AssemblyScript/assemblyscript/blob/master/lib/loader/index.js\" rel=\"nofollow\">AssemblyScript Loader code</a></li>\n<li><a href=\"https://docs.assemblyscript.org/basics/loader#why-not-more-convenient\" rel=\"nofollow\">AssemblyScript Loader docs</a></li>\n<li><a href=\"https://github.com/onsails/wasmer-as\" rel=\"nofollow\">wasmer-as code</a></li>\n<li><a href=\"https://github.com/torch2424/as-bind\" rel=\"nofollow\">as-bind code</a></li>\n<li><a href=\"https://github.com/wasmerio/python-ext-wasm\" rel=\"nofollow\">python-ext-wasm docs</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6604718, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6e63e6cff1e578dc48f8f13619b21e21", "sha256": "0426f15933bb50c09f8d35f8fb368d87b3e66686c3eae5865af8ea9cd13b4120"}, "downloads": -1, "filename": "wasmbind-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6e63e6cff1e578dc48f8f13619b21e21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 2246, "upload_time": "2020-02-03T13:35:56", "upload_time_iso_8601": "2020-02-03T13:35:56.410041Z", "url": "https://files.pythonhosted.org/packages/6c/62/4a47422691c570276611c01a0f67c888b1aef2998282bd80c5bc079f6003/wasmbind-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd41be8b18155fd95b0ef8de47f66e9b", "sha256": "323fc65a4995795778da3d9979281cc6ba9409cbc1e1fab0d978826a10e3b1be"}, "downloads": -1, "filename": "wasmbind-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fd41be8b18155fd95b0ef8de47f66e9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 1959, "upload_time": "2020-02-03T13:35:58", "upload_time_iso_8601": "2020-02-03T13:35:58.616747Z", "url": "https://files.pythonhosted.org/packages/fc/6e/3b0fdb320a3143d172139ee848e0b22f984ed836dcd3b00e0b67514113ee/wasmbind-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "98999fdbf6f450876297209ede297b30", "sha256": "6672a1c2cb6d9baa0696ef5681b63cd14236e48f11e1195f80e23702b7bb68c5"}, "downloads": -1, "filename": "wasmbind-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "98999fdbf6f450876297209ede297b30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 2955, "upload_time": "2020-02-03T16:10:00", "upload_time_iso_8601": "2020-02-03T16:10:00.453702Z", "url": "https://files.pythonhosted.org/packages/8a/bc/e03003be43fbf102bacd02350ebabd955e3e68bddca25cd6fcba7c05e34e/wasmbind-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68d73a6f3445e7270dedf4ba0e0db719", "sha256": "0e4d97b660d73edaf2cd9dd1dec0cebce0c16edb7d9fbaab05e87450ff14141f"}, "downloads": -1, "filename": "wasmbind-0.2.0.tar.gz", "has_sig": false, "md5_digest": "68d73a6f3445e7270dedf4ba0e0db719", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 2660, "upload_time": "2020-02-03T16:10:01", "upload_time_iso_8601": "2020-02-03T16:10:01.528516Z", "url": "https://files.pythonhosted.org/packages/ea/21/ce7b4523e6b0e22c9f2928c73b28d19a4eb3fbb8116e81ffeb25fa98a975/wasmbind-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "89fb7240da4846cd5fb37bf6c03c4b81", "sha256": "1370d779b76a476aa981f5514945fb6cb6b90b5909c2c8dc6b19885d331fbe63"}, "downloads": -1, "filename": "wasmbind-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "89fb7240da4846cd5fb37bf6c03c4b81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 2945, "upload_time": "2020-02-03T16:31:59", "upload_time_iso_8601": "2020-02-03T16:31:59.435953Z", "url": "https://files.pythonhosted.org/packages/59/34/a448aee33f9ef98ef4a34eec056c9ec289439318ae069451cb123a312d95/wasmbind-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b90ffc3456971892d7365794c3a5e55", "sha256": "3c926a3492fa1bacaa4e3a6392a26eee3ca9aacdc6a0eb87f90ceb2dd871d819"}, "downloads": -1, "filename": "wasmbind-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6b90ffc3456971892d7365794c3a5e55", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 2643, "upload_time": "2020-02-03T16:32:00", "upload_time_iso_8601": "2020-02-03T16:32:00.902479Z", "url": "https://files.pythonhosted.org/packages/e7/37/187079a4da30759e4f076934c481d31560385e6c832d2e296e28952fafdc/wasmbind-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0412cabdb487294228c17f017040ec02", "sha256": "4e1f031dee4ee60e9203be5513f11cd0902d1ee3463d0196c2788448b25476fd"}, "downloads": -1, "filename": "wasmbind-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0412cabdb487294228c17f017040ec02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 10432, "upload_time": "2020-02-10T20:16:00", "upload_time_iso_8601": "2020-02-10T20:16:00.515202Z", "url": "https://files.pythonhosted.org/packages/6f/4e/c1d4eac48ac615d8c92874debdfd0cde6e175c03cf09a70cea194bdc5536/wasmbind-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ccf69ab1a5c590a6cf3c25fd88fd5109", "sha256": "2a780b6ed9958cecc10b85d40f82a61d14332a9baa0633f2a88936c8e4f122e9"}, "downloads": -1, "filename": "wasmbind-0.3.tar.gz", "has_sig": false, "md5_digest": "ccf69ab1a5c590a6cf3c25fd88fd5109", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 12757, "upload_time": "2020-02-10T20:16:02", "upload_time_iso_8601": "2020-02-10T20:16:02.353118Z", "url": "https://files.pythonhosted.org/packages/7a/9a/09136e77074580643bf584ee2e5086a178223dad887ed62cd8615a6476e3/wasmbind-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0412cabdb487294228c17f017040ec02", "sha256": "4e1f031dee4ee60e9203be5513f11cd0902d1ee3463d0196c2788448b25476fd"}, "downloads": -1, "filename": "wasmbind-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0412cabdb487294228c17f017040ec02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 10432, "upload_time": "2020-02-10T20:16:00", "upload_time_iso_8601": "2020-02-10T20:16:00.515202Z", "url": "https://files.pythonhosted.org/packages/6f/4e/c1d4eac48ac615d8c92874debdfd0cde6e175c03cf09a70cea194bdc5536/wasmbind-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ccf69ab1a5c590a6cf3c25fd88fd5109", "sha256": "2a780b6ed9958cecc10b85d40f82a61d14332a9baa0633f2a88936c8e4f122e9"}, "downloads": -1, "filename": "wasmbind-0.3.tar.gz", "has_sig": false, "md5_digest": "ccf69ab1a5c590a6cf3c25fd88fd5109", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 12757, "upload_time": "2020-02-10T20:16:02", "upload_time_iso_8601": "2020-02-10T20:16:02.353118Z", "url": "https://files.pythonhosted.org/packages/7a/9a/09136e77074580643bf584ee2e5086a178223dad887ed62cd8615a6476e3/wasmbind-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:18 2020"}