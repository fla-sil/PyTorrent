{"info": {"author": "Jeff Balogh (modified by Craig Kierstens)", "author_email": "jbalogh@mozilla.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Environment :: Web Environment :: Mozilla", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pylibmc-sasl cache backend for Django\n=====================================\n\nThis package provides a memcached cache backend for Django using\n`pylibmc <http://github.com/lericson/pylibmc>`_.  You want to use pylibmc\nbecause it's fast.\n\nThis is a fork of the `django-pylibmc <https://github.com/jbalogh/django-pylibmc>`_\npackage. These changes will eventually end up upstream.\n\nRequirements\n------------\n\ndjango-pylibmc-sasl requires Django 1.3.  It was written and tested on Python 2.7.x.\n\n\nInstallation\n------------\n\nGet it from `pypi <http://pypi.python.org/pypi/django-pylibmc-sasl>`_::\n\n    pip install django-pylibmc-sasl\n\nUsage\n-----\n\nYour cache backend should look something like this::\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_pylibmc.memcached.PyLibMCCache',\n            'LOCATION': 'localhost:11211',\n            'TIMEOUT': 500,\n            'BINARY': True,\n            'OPTIONS': {  # Maps to pylibmc \"behaviors\"\n                'tcp_nodelay': True,\n                'ketama': True\n            }\n        }\n    }\n\n\nIf you want to use the memcached binary protocol, set the `BINARY` key's\nvalue to `True` as shown above.  `BINARY` is `False` by default.\n\nIf you want to control `pylibmc behaviors\n<http://sendapatch.se/projects/pylibmc/behaviors.html>`_, use the\n`OPTIONS`.  `OPTIONS` is an empty dict by default.\n\nPylibmc supports `compression\n<http://sendapatch.se/projects/pylibmc/misc.html#compression>`_ and the\nminimum size (in bytes) of values to compress can be set via the Django\nsetting `PYLIBMC_MIN_COMPRESS_LEN`.  The default is 0, which is disabled.\n\n\nCaveats\n-------\n\nThis package breaks away from the current handling of ``timeout=0`` in Django.\nDjango converts 0 into the default timeout, while django-pylibmc leaves it as\n0.  memcached takes 0 to mean \"infinite timeout.\"  You can still pass ``None``\nto get the default timeout.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/kennethreitz/django-pylibmc-sasl", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-pylibmc-sasl", "package_url": "https://pypi.org/project/django-pylibmc-sasl/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-pylibmc-sasl/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/kennethreitz/django-pylibmc-sasl"}, "release_url": "https://pypi.org/project/django-pylibmc-sasl/0.2.4/", "requires_dist": null, "requires_python": null, "summary": "Django cache backend using pylibmc-sasl", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a memcached cache backend for Django using\n<a href=\"http://github.com/lericson/pylibmc\" rel=\"nofollow\">pylibmc</a>.  You want to use pylibmc\nbecause it\u2019s fast.</p>\n<p>This is a fork of the <a href=\"https://github.com/jbalogh/django-pylibmc\" rel=\"nofollow\">django-pylibmc</a>\npackage. These changes will eventually end up upstream.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>django-pylibmc-sasl requires Django 1.3.  It was written and tested on Python 2.7.x.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Get it from <a href=\"http://pypi.python.org/pypi/django-pylibmc-sasl\" rel=\"nofollow\">pypi</a>:</p>\n<pre>pip install django-pylibmc-sasl\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Your cache backend should look something like this:</p>\n<pre>CACHES = {\n    'default': {\n        'BACKEND': 'django_pylibmc.memcached.PyLibMCCache',\n        'LOCATION': 'localhost:11211',\n        'TIMEOUT': 500,\n        'BINARY': True,\n        'OPTIONS': {  # Maps to pylibmc \"behaviors\"\n            'tcp_nodelay': True,\n            'ketama': True\n        }\n    }\n}\n</pre>\n<p>If you want to use the memcached binary protocol, set the <cite>BINARY</cite> key\u2019s\nvalue to <cite>True</cite> as shown above.  <cite>BINARY</cite> is <cite>False</cite> by default.</p>\n<p>If you want to control <a href=\"http://sendapatch.se/projects/pylibmc/behaviors.html\" rel=\"nofollow\">pylibmc behaviors</a>, use the\n<cite>OPTIONS</cite>.  <cite>OPTIONS</cite> is an empty dict by default.</p>\n<p>Pylibmc supports <a href=\"http://sendapatch.se/projects/pylibmc/misc.html#compression\" rel=\"nofollow\">compression</a> and the\nminimum size (in bytes) of values to compress can be set via the Django\nsetting <cite>PYLIBMC_MIN_COMPRESS_LEN</cite>.  The default is 0, which is disabled.</p>\n</div>\n<div id=\"caveats\">\n<h2>Caveats</h2>\n<p>This package breaks away from the current handling of <tt>timeout=0</tt> in Django.\nDjango converts 0 into the default timeout, while django-pylibmc leaves it as\n0.  memcached takes 0 to mean \u201cinfinite timeout.\u201d  You can still pass <tt>None</tt>\nto get the default timeout.</p>\n</div>\n\n          </div>"}, "last_serial": 790378, "releases": {"0": [], "0.2.3": [{"comment_text": "", "digests": {"md5": "51c191baca0b25bbf199daa70b5c67d1", "sha256": "c7a4662ed50586557da24a621ab8d5da4fc0487adec958bf5f6a22c42548bb89"}, "downloads": -1, "filename": "django-pylibmc-sasl-0.2.3.tar.gz", "has_sig": false, "md5_digest": "51c191baca0b25bbf199daa70b5c67d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4438, "upload_time": "2011-12-06T20:21:25", "upload_time_iso_8601": "2011-12-06T20:21:25.888700Z", "url": "https://files.pythonhosted.org/packages/a2/93/639a1383dde18089ffaf978e41b726e0f84d9ed31fb12f2b3c29643ec012/django-pylibmc-sasl-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "e56bfc8ed4e574c2c0b5fdea3c8c2b2b", "sha256": "68515c7b8913ff1b73a80048f52f412df31674372d361ea4a7d17765933ba6d5"}, "downloads": -1, "filename": "django-pylibmc-sasl-0.2.4.tar.gz", "has_sig": false, "md5_digest": "e56bfc8ed4e574c2c0b5fdea3c8c2b2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4530, "upload_time": "2011-12-06T20:38:23", "upload_time_iso_8601": "2011-12-06T20:38:23.872160Z", "url": "https://files.pythonhosted.org/packages/2f/c5/63d26212d06c3601c034de77e28b8b8f92a45f2e0ac70149c460c8a62165/django-pylibmc-sasl-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e56bfc8ed4e574c2c0b5fdea3c8c2b2b", "sha256": "68515c7b8913ff1b73a80048f52f412df31674372d361ea4a7d17765933ba6d5"}, "downloads": -1, "filename": "django-pylibmc-sasl-0.2.4.tar.gz", "has_sig": false, "md5_digest": "e56bfc8ed4e574c2c0b5fdea3c8c2b2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4530, "upload_time": "2011-12-06T20:38:23", "upload_time_iso_8601": "2011-12-06T20:38:23.872160Z", "url": "https://files.pythonhosted.org/packages/2f/c5/63d26212d06c3601c034de77e28b8b8f92a45f2e0ac70149c460c8a62165/django-pylibmc-sasl-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:34 2020"}