{"info": {"author": "Robin Andeer", "author_email": "robin.andeer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "docopt-rc\n==========\n**docopt-rc** is a drop-in rc-file parser augmenter for `docopt <http://docopt.org/>`_.\n\nQuick User's Guide\n-------------------\nThese are the nessesary steps to use **docopt-rc**:\n\n1. Install the package\n\n.. code-block:: console\n\n  $ pip install docopt-rc\n\n2. Import into your project\n\n.. code-block:: python\n\n  from docopt import docopt\n  import rc\n  import myscript\n\n3. Run docopt to parse the command line arguments\n\n.. code-block:: python\n  \n  args = docopt(__doc__, version='MyScript {v}'.format(v=myscript.__version__))\n\n4. Set up your script level defaults (lowest priority)\n\n.. code-block:: python\n\n  defaults = {\n    'url': 'news.layervault.com',\n    'category': 'news',\n    'votes': 0\n  }\n\n5. Parse potential config-files, both in user home and in the current directory. Missing files are silently skipped.\n\n.. code-block:: python\n\n  # Merge the command line arguments with the defaults and any values\n  # found in either global (`$HOME`) or local (this folder) config files.\n  options = rc.extend_args(args, __file__, defaults, scopes=['global', 'local'])\n\nThat's it. We have now merged the defaults <= user configs <= command line arguments.\n\n\nDocumentation\n----------------\nFor the time being I will refer you to the somewhat complete inline documentation for each function in the package.\n\n\nBackground & Motivation\n-------------------------\nConfig files can unburden the command line and allow users to set user/project specific defaults. A common practice is to name such files `.<script_name>rc`, e.g. '.bashrc', '.bowerrc'. The values in such an rc-file should take precedence over script level defaults but be overwritten by command line arguments.\n\nI needed a very simple script that would parse both global (user), local (project), and custom config files and play nice with the excellent docopt package.\n\n\nFlaws & Limitations\n-------------------------\n*docopt*, as great as it is, does come with a few limitations when trying to integrate with a config file parser. My solution has three nagging flaws:\n\n1. Boolean options (flags) become a major issue. There isn't any built in way to flag `False` and `probably won't be <https://github.com/docopt/docopt/issues/51>`_ either. This means you can't override an options that defaults to `True` from a config file. The current solution is to **avoid flags in favor of `--option=<bool>`** where bool is ('yes', 'no', 'true', 'false').\n\n2. *docopt* provides a useful way to set defaults. Problem is that I couldn't find a way to parse those defaults to compare what user supplied and default values. I therefore **require all defaults to be set in a separate `dict`** outside of the docstring.\n\n3. The intuative syntax for `<position argument>`, `--option`, `command` works great *in-script* but would be awkward as a requirement for user authored config files. Q.E.D.: I require that **no two argument/option/command names be the same**.\n\n\nChecklist\n-----------\n\n1. DOES support YAML and JSON file formats (\"JSON is YAML\")\n2. DOES convert docopt args to simpler versions by removing '--' and '<>'\n3. DO NOT define your own defaults in the document string\n4. DO define defaults in a separate `dict`\n5. DO NOT use boolean arguments (flags) you want to overwrite.\n6. DO use `--option=<bool>` where 'bool' is 'yes'/'no' in favor of flags\n7. DO expect config files to be named \".<myapp>rc\"\n8. DO NOT use multiple types of arguments with the the same name\n\n\nLicense, Authors, Changelog\n-----------------------------\nRead LICENSE, AUTHORS, CHANGELOG.rst", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/robinandeer/pythonrc", "keywords": "", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "docopt-rc", "package_url": "https://pypi.org/project/docopt-rc/", "platform": "any", "project_url": "https://pypi.org/project/docopt-rc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/robinandeer/pythonrc"}, "release_url": "https://pypi.org/project/docopt-rc/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "docopt-rc is a drop-in rc-file parser augmenter for docopt", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>docopt-rc</strong> is a drop-in rc-file parser augmenter for <a href=\"http://docopt.org/\" rel=\"nofollow\">docopt</a>.</p>\n<div id=\"quick-user-s-guide\">\n<h2>Quick User\u2019s Guide</h2>\n<p>These are the nessesary steps to use <strong>docopt-rc</strong>:</p>\n<ol>\n<li>Install the package</li>\n</ol>\n<pre><span class=\"gp\">$</span> pip install docopt-rc\n</pre>\n<ol>\n<li>Import into your project</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">docopt</span> <span class=\"kn\">import</span> <span class=\"n\">docopt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rc</span>\n<span class=\"kn\">import</span> <span class=\"nn\">myscript</span>\n</pre>\n<ol>\n<li>Run docopt to parse the command line arguments</li>\n</ol>\n<pre><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">docopt</span><span class=\"p\">(</span><span class=\"vm\">__doc__</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'MyScript </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">myscript</span><span class=\"o\">.</span><span class=\"n\">__version__</span><span class=\"p\">))</span>\n</pre>\n<ol>\n<li>Set up your script level defaults (lowest priority)</li>\n</ol>\n<pre><span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'news.layervault.com'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'category'</span><span class=\"p\">:</span> <span class=\"s1\">'news'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'votes'</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</pre>\n<ol>\n<li>Parse potential config-files, both in user home and in the current directory. Missing files are silently skipped.</li>\n</ol>\n<pre><span class=\"c1\"># Merge the command line arguments with the defaults and any values</span>\n<span class=\"c1\"># found in either global (`$HOME`) or local (this folder) config files.</span>\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">rc</span><span class=\"o\">.</span><span class=\"n\">extend_args</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"vm\">__file__</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">,</span> <span class=\"n\">scopes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'global'</span><span class=\"p\">,</span> <span class=\"s1\">'local'</span><span class=\"p\">])</span>\n</pre>\n<p>That\u2019s it. We have now merged the defaults &lt;= user configs &lt;= command line arguments.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>For the time being I will refer you to the somewhat complete inline documentation for each function in the package.</p>\n</div>\n<div id=\"background-motivation\">\n<h2>Background &amp; Motivation</h2>\n<p>Config files can unburden the command line and allow users to set user/project specific defaults. A common practice is to name such files <cite>.&lt;script_name&gt;rc</cite>, e.g. \u2018.bashrc\u2019, \u2018.bowerrc\u2019. The values in such an rc-file should take precedence over script level defaults but be overwritten by command line arguments.</p>\n<p>I needed a very simple script that would parse both global (user), local (project), and custom config files and play nice with the excellent docopt package.</p>\n</div>\n<div id=\"flaws-limitations\">\n<h2>Flaws &amp; Limitations</h2>\n<p><em>docopt</em>, as great as it is, does come with a few limitations when trying to integrate with a config file parser. My solution has three nagging flaws:</p>\n<ol>\n<li>Boolean options (flags) become a major issue. There isn\u2019t any built in way to flag <cite>False</cite> and <a href=\"https://github.com/docopt/docopt/issues/51\" rel=\"nofollow\">probably won\u2019t be</a> either. This means you can\u2019t override an options that defaults to <cite>True</cite> from a config file. The current solution is to <strong>avoid flags in favor of `\u2013option=&lt;bool&gt;`</strong> where bool is (\u2018yes\u2019, \u2018no\u2019, \u2018true\u2019, \u2018false\u2019).</li>\n<li><em>docopt</em> provides a useful way to set defaults. Problem is that I couldn\u2019t find a way to parse those defaults to compare what user supplied and default values. I therefore <strong>require all defaults to be set in a separate `dict`</strong> outside of the docstring.</li>\n<li>The intuative syntax for <cite>&lt;position argument&gt;</cite>, <cite>\u2013option</cite>, <cite>command</cite> works great <em>in-script</em> but would be awkward as a requirement for user authored config files. Q.E.D.: I require that <strong>no two argument/option/command names be the same</strong>.</li>\n</ol>\n</div>\n<div id=\"checklist\">\n<h2>Checklist</h2>\n<ol>\n<li>DOES support YAML and JSON file formats (\u201cJSON is YAML\u201d)</li>\n<li>DOES convert docopt args to simpler versions by removing \u2018\u2013\u2019 and \u2018&lt;&gt;\u2019</li>\n<li>DO NOT define your own defaults in the document string</li>\n<li>DO define defaults in a separate <cite>dict</cite></li>\n<li>DO NOT use boolean arguments (flags) you want to overwrite.</li>\n<li>DO use <cite>\u2013option=&lt;bool&gt;</cite> where \u2018bool\u2019 is \u2018yes\u2019/\u2019no\u2019 in favor of flags</li>\n<li>DO expect config files to be named \u201c.&lt;myapp&gt;rc\u201d</li>\n<li>DO NOT use multiple types of arguments with the the same name</li>\n</ol>\n</div>\n<div id=\"license-authors-changelog\">\n<h2>License, Authors, Changelog</h2>\n<p>Read LICENSE, AUTHORS, CHANGELOG.rst</p>\n</div>\n\n          </div>"}, "last_serial": 996236, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 00:50:43 2020"}