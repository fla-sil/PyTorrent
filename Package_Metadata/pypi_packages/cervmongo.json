{"info": {"author": "Anthony Cervantes", "author_email": "anthony.cervantes@cerver.info", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![GitHub stars](https://img.shields.io/github/stars/antcer1213/cervmongo)](https://github.com/antcer1213/cervmongo/stargazers) [![GitHub forks](https://img.shields.io/github/forks/antcer1213/cervmongo)](https://github.com/antcer1213/cervmongo/network) [![GitHub issues](https://img.shields.io/github/issues/antcer1213/cervmongo)](https://github.com/antcer1213/cervmongo/issues) [![GitHub license](https://img.shields.io/github/license/antcer1213/cervmongo)](https://github.com/antcer1213/cervmongo)\n\n\n# cervmongo\n\nA convenience-based approach to MongoDB w/ Python that works as a drop-in replacement to the IO `pymongo` and AIO `motor` respective clients. Packaged due to excessive reuse in private projects, where it was used to facilitate agile, rapid development of multiple web applications. Database is intentionally loaded by default using URI (can be changed after instance is created), with an optional default collection param. Heads up, most commonly used methods of the client are in UPPERCASE, to ensure names are not taken by the parent classes and keep them nice and short.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install cervmongo.\n\n```bash\npip install cervmongo\n```\n\n## Documentation\n\nFull documentation available [here](http://cerver.info/packages/cervmongo/).\n\n## Usage\n\n```python\nimport cervmongo\n\ncol_client = cervmongo.quick_load_client(\n                                database=\"test_db\",\n                                collection=\"test_col\",\n                                replica_set=None,\n                                async=False\n                                ) # convenience function\n\ncol_recs = col_client.GET() # returns cursor as very cool MongoListResponse\ncol_recs.count() # returns number of total documents in cursor\ncol_recs.list() # returns list of documents in cursor\ncol_recs.distinct() # returns list of unique values, default field '_id'\ncol_recs.sort() # returns self, allows sorting\n# example of creating a document\nresult = col_client.POST({\"key\": \"value\"}) # returns pymongo Response document\n# example of fetching a document\ncol_client.GET(result.inserted_id) # returns the created document as dict\n# example of an update (patch)\ncol_client.PATCH(result.inserted_id, {\"$set\": {\"key\": \"newvalue\"}}) # update the document\n# example of a query\ncol_client.GET({\"key\": \"newvalue\"}) # returns the cursor resulting from query\n# will replace existing document if exists, else create new document with _id provided\ncol_client.PUT({\"_id\": result.inserted_id, \"key\": \"finalvalue\"})\n# will delete document\ncol_client.DELETE(result.inserted_id) # returns deleted document\n\n\n# OPTIONALLY\ncount = col_client.GET(count=True) # returns number of total documents in cursor\ncount_of_query = col_client.GET({\"key\": \"value\"}, count=True)\ndistinct_values_of_field_key = col_client.GET(distinct=\"key\")\ndistinct_ids = col_client.GET(distinct=True) # _id is default\ndistinct_ids_with_query = col_client.GET({\"key\": \"value\"}, distinct=True)\nsorted_query_one = col_client.GET(key=\"key\", sort=cervmongo.DESC) # sorts in descending order by field 'key'\nsorted_query_two = col_client.GET({\"key\": \"value\"}, key=\"key\", sort=cervmongo.DESC)\n\n\n# OPTIONALLY\ncervmongo.get_config().set_mongo_db(\"test_db\")\nclient_class = cervmongo.get_client() # gets client class\nclient = client_class() # SyncIOClient (subclass of pymongo.MongoClient\n# ~ motor.motor_asyncio.AsyncIOMotorClient, if async)\n# same functionality as col_client above,\n# but collection must be explicitly declared as first arg and\n# query or record _id, if any, has to be second arg\n# Example:\ncount = client.GET(\"test_col\", count=True)\nquery_results = client.GET(\"test_col\", {\"key\": \"value\"})\n\n\n# OTHER FUNCTIONALITY\ncursor_paged_results = client.PAGINATED_QUERY(after=None, before=None, limit=5) # returns cursor-based initial page\ntime_paged_results = client.PAGINATED_QUERY(sort=\"created_date\", after=None, before=None, limit=5) # returns time-based initial page\noffset_paged_results = client.PAGINATED_QUERY(page=1, limit=5) # returns offset-based initial page\ncount_of_multi_cols = client.GET([\"test_col1\", \"test_col2\"], count=True) # returns list of counts\nmulti_col_results = client.GET([\"test_col1\", \"test_col2\"], {\n                \"$or\": [\n                    {\"child\": \"value\"},\n                    {\"related_child\": \"value\"}\n                    ]}) # returns list of cursors matching query\n\n```\n\n### TODO:\n 1. full testing on AIO Client & Doc classes\n 2. finish type hints, function hints, and docstrings for readability\n 3. pydantic first-class treatment\n 4. restructuring/refactoring...\n 5. web api\n    - datatable mongodb plugin + web endpoint\n    - restful fastapi server - extra\n    - possible datatable html + javascript code generator\n\n### REQUIRES\n - python 3.6+\n - python packages:\n    - `pymongo`\n    - `dateutil`\n    - `jsonschema`\n    - `dataclasses`\n\n### RECOMMENDED\n - `motor` (for aio options)\n - `pydantic` (for obj/model validation, ORM)\n - `marshmallow` (json schema validation)\n - `python-dotenv` 0.12.0>= (for configuration of MongoDB client and cervmongo)\n    - cervmongo Settings\n        - __DEBUG_LEVEL__ (default 30, i.e. `logging.WARNING`)\n\n    - mongodb Settings\n        - Can optionally provide either:\n            - __MONGO_HOST__ (_default \"127.0.0.1\"_)\n            - __MONGO_PORT__ (_default 27017_)\n            - __MONGO_DB__ (_default None_)\n            - __MONGO_REPLICA_SET__ (_default None_)\n            - __MONGO_MAX_POOL_SIZE__ (_default 20_)\n            - __MONGO_MIN_POOL_SIZE__ (_default 10_)\n            - __MONGO_USER__ (_default None_)\n            - __MONGO_PASSWORD__ (_default None_)\n        - or:\n            - __MONGO_URI__ (_default None, ex. \"mongodb://localhost:27017/app?replicaSet=appSet\"_)\n            - For more information on a MongoDB URI, see here: [Connection String URI Format](https://docs.mongodb.com/manual/reference/connection-string/).\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/antcer1213/cervmongo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cervmongo", "package_url": "https://pypi.org/project/cervmongo/", "platform": "", "project_url": "https://pypi.org/project/cervmongo/", "project_urls": {"Homepage": "https://github.com/antcer1213/cervmongo"}, "release_url": "https://pypi.org/project/cervmongo/0.1.16/", "requires_dist": null, "requires_python": ">=3.6", "summary": "An (even) higher-level MongoDB client", "version": "0.1.16", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/antcer1213/cervmongo/stargazers\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d0fabd696db5bd1dd3c15be799bfc9e1cac6d0d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f616e74636572313231332f636572766d6f6e676f\"></a> <a href=\"https://github.com/antcer1213/cervmongo/network\" rel=\"nofollow\"><img alt=\"GitHub forks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/350d9ab84f970a71ae076e31bd1e91a0f5fa9ef5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f616e74636572313231332f636572766d6f6e676f\"></a> <a href=\"https://github.com/antcer1213/cervmongo/issues\" rel=\"nofollow\"><img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24438f2cd67c66a054b6ea57277945329d3f8b83/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f616e74636572313231332f636572766d6f6e676f\"></a> <a href=\"https://github.com/antcer1213/cervmongo\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1c050d290999e042e1a60749970dac0035f6a70/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f616e74636572313231332f636572766d6f6e676f\"></a></p>\n<h1>cervmongo</h1>\n<p>A convenience-based approach to MongoDB w/ Python that works as a drop-in replacement to the IO <code>pymongo</code> and AIO <code>motor</code> respective clients. Packaged due to excessive reuse in private projects, where it was used to facilitate agile, rapid development of multiple web applications. Database is intentionally loaded by default using URI (can be changed after instance is created), with an optional default collection param. Heads up, most commonly used methods of the client are in UPPERCASE, to ensure names are not taken by the parent classes and keep them nice and short.</p>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install cervmongo.</p>\n<pre>pip install cervmongo\n</pre>\n<h2>Documentation</h2>\n<p>Full documentation available <a href=\"http://cerver.info/packages/cervmongo/\" rel=\"nofollow\">here</a>.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cervmongo</span>\n\n<span class=\"n\">col_client</span> <span class=\"o\">=</span> <span class=\"n\">cervmongo</span><span class=\"o\">.</span><span class=\"n\">quick_load_client</span><span class=\"p\">(</span>\n                                <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s2\">\"test_db\"</span><span class=\"p\">,</span>\n                                <span class=\"n\">collection</span><span class=\"o\">=</span><span class=\"s2\">\"test_col\"</span><span class=\"p\">,</span>\n                                <span class=\"n\">replica_set</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                                <span class=\"k\">async</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n                                <span class=\"p\">)</span> <span class=\"c1\"># convenience function</span>\n\n<span class=\"n\">col_recs</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">()</span> <span class=\"c1\"># returns cursor as very cool MongoListResponse</span>\n<span class=\"n\">col_recs</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"c1\"># returns number of total documents in cursor</span>\n<span class=\"n\">col_recs</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span> <span class=\"c1\"># returns list of documents in cursor</span>\n<span class=\"n\">col_recs</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span> <span class=\"c1\"># returns list of unique values, default field '_id'</span>\n<span class=\"n\">col_recs</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span> <span class=\"c1\"># returns self, allows sorting</span>\n<span class=\"c1\"># example of creating a document</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">({</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">})</span> <span class=\"c1\"># returns pymongo Response document</span>\n<span class=\"c1\"># example of fetching a document</span>\n<span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">inserted_id</span><span class=\"p\">)</span> <span class=\"c1\"># returns the created document as dict</span>\n<span class=\"c1\"># example of an update (patch)</span>\n<span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">PATCH</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">inserted_id</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"$set\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"newvalue\"</span><span class=\"p\">}})</span> <span class=\"c1\"># update the document</span>\n<span class=\"c1\"># example of a query</span>\n<span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">({</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"newvalue\"</span><span class=\"p\">})</span> <span class=\"c1\"># returns the cursor resulting from query</span>\n<span class=\"c1\"># will replace existing document if exists, else create new document with _id provided</span>\n<span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">PUT</span><span class=\"p\">({</span><span class=\"s2\">\"_id\"</span><span class=\"p\">:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">inserted_id</span><span class=\"p\">,</span> <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"finalvalue\"</span><span class=\"p\">})</span>\n<span class=\"c1\"># will delete document</span>\n<span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">DELETE</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">inserted_id</span><span class=\"p\">)</span> <span class=\"c1\"># returns deleted document</span>\n\n\n<span class=\"c1\"># OPTIONALLY</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># returns number of total documents in cursor</span>\n<span class=\"n\">count_of_query</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">({</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">},</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">distinct_values_of_field_key</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"n\">distinct</span><span class=\"o\">=</span><span class=\"s2\">\"key\"</span><span class=\"p\">)</span>\n<span class=\"n\">distinct_ids</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"n\">distinct</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># _id is default</span>\n<span class=\"n\">distinct_ids_with_query</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">({</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">},</span> <span class=\"n\">distinct</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">sorted_query_one</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">cervmongo</span><span class=\"o\">.</span><span class=\"n\">DESC</span><span class=\"p\">)</span> <span class=\"c1\"># sorts in descending order by field 'key'</span>\n<span class=\"n\">sorted_query_two</span> <span class=\"o\">=</span> <span class=\"n\">col_client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">({</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">},</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">cervmongo</span><span class=\"o\">.</span><span class=\"n\">DESC</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># OPTIONALLY</span>\n<span class=\"n\">cervmongo</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_mongo_db</span><span class=\"p\">(</span><span class=\"s2\">\"test_db\"</span><span class=\"p\">)</span>\n<span class=\"n\">client_class</span> <span class=\"o\">=</span> <span class=\"n\">cervmongo</span><span class=\"o\">.</span><span class=\"n\">get_client</span><span class=\"p\">()</span> <span class=\"c1\"># gets client class</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">client_class</span><span class=\"p\">()</span> <span class=\"c1\"># SyncIOClient (subclass of pymongo.MongoClient</span>\n<span class=\"c1\"># ~ motor.motor_asyncio.AsyncIOMotorClient, if async)</span>\n<span class=\"c1\"># same functionality as col_client above,</span>\n<span class=\"c1\"># but collection must be explicitly declared as first arg and</span>\n<span class=\"c1\"># query or record _id, if any, has to be second arg</span>\n<span class=\"c1\"># Example:</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"s2\">\"test_col\"</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">query_results</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"s2\">\"test_col\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">})</span>\n\n\n<span class=\"c1\"># OTHER FUNCTIONALITY</span>\n<span class=\"n\">cursor_paged_results</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PAGINATED_QUERY</span><span class=\"p\">(</span><span class=\"n\">after</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># returns cursor-based initial page</span>\n<span class=\"n\">time_paged_results</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PAGINATED_QUERY</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"s2\">\"created_date\"</span><span class=\"p\">,</span> <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># returns time-based initial page</span>\n<span class=\"n\">offset_paged_results</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PAGINATED_QUERY</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># returns offset-based initial page</span>\n<span class=\"n\">count_of_multi_cols</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">([</span><span class=\"s2\">\"test_col1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test_col2\"</span><span class=\"p\">],</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># returns list of counts</span>\n<span class=\"n\">multi_col_results</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">([</span><span class=\"s2\">\"test_col1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"test_col2\"</span><span class=\"p\">],</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"$or\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span><span class=\"s2\">\"child\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">},</span>\n                    <span class=\"p\">{</span><span class=\"s2\">\"related_child\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">}</span>\n                    <span class=\"p\">]})</span> <span class=\"c1\"># returns list of cursors matching query</span>\n</pre>\n<h3>TODO:</h3>\n<ol>\n<li>full testing on AIO Client &amp; Doc classes</li>\n<li>finish type hints, function hints, and docstrings for readability</li>\n<li>pydantic first-class treatment</li>\n<li>restructuring/refactoring...</li>\n<li>web api\n<ul>\n<li>datatable mongodb plugin + web endpoint</li>\n<li>restful fastapi server - extra</li>\n<li>possible datatable html + javascript code generator</li>\n</ul>\n</li>\n</ol>\n<h3>REQUIRES</h3>\n<ul>\n<li>python 3.6+</li>\n<li>python packages:\n<ul>\n<li><code>pymongo</code></li>\n<li><code>dateutil</code></li>\n<li><code>jsonschema</code></li>\n<li><code>dataclasses</code></li>\n</ul>\n</li>\n</ul>\n<h3>RECOMMENDED</h3>\n<ul>\n<li><code>motor</code> (for aio options)</li>\n<li><code>pydantic</code> (for obj/model validation, ORM)</li>\n<li><code>marshmallow</code> (json schema validation)</li>\n<li><code>python-dotenv</code> 0.12.0&gt;= (for configuration of MongoDB client and cervmongo)\n<ul>\n<li>\n<p>cervmongo Settings</p>\n<ul>\n<li><strong>DEBUG_LEVEL</strong> (default 30, i.e. <code>logging.WARNING</code>)</li>\n</ul>\n</li>\n<li>\n<p>mongodb Settings</p>\n<ul>\n<li>Can optionally provide either:\n<ul>\n<li><strong>MONGO_HOST</strong> (<em>default \"127.0.0.1\"</em>)</li>\n<li><strong>MONGO_PORT</strong> (<em>default 27017</em>)</li>\n<li><strong>MONGO_DB</strong> (<em>default None</em>)</li>\n<li><strong>MONGO_REPLICA_SET</strong> (<em>default None</em>)</li>\n<li><strong>MONGO_MAX_POOL_SIZE</strong> (<em>default 20</em>)</li>\n<li><strong>MONGO_MIN_POOL_SIZE</strong> (<em>default 10</em>)</li>\n<li><strong>MONGO_USER</strong> (<em>default None</em>)</li>\n<li><strong>MONGO_PASSWORD</strong> (<em>default None</em>)</li>\n</ul>\n</li>\n<li>or:\n<ul>\n<li><strong>MONGO_URI</strong> (<em>default None, ex. \"mongodb://localhost:27017/app?replicaSet=appSet\"</em>)</li>\n<li>For more information on a MongoDB URI, see here: <a href=\"https://docs.mongodb.com/manual/reference/connection-string/\" rel=\"nofollow\">Connection String URI Format</a>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<p>Please make sure to update tests as appropriate.</p>\n<h2>License</h2>\n<p><a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 7192838, "releases": {"0.1.13": [{"comment_text": "", "digests": {"md5": "fa62655a2e6e101b968c74038e8e28df", "sha256": "adbbcd6b64993bb6cff543701b18fe7a28a4890187a2fa011d3e19af3f7066ec"}, "downloads": -1, "filename": "cervmongo-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "fa62655a2e6e101b968c74038e8e28df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38787, "upload_time": "2020-05-07T04:07:36", "upload_time_iso_8601": "2020-05-07T04:07:36.534766Z", "url": "https://files.pythonhosted.org/packages/93/e3/91db8edbc4736ef3210d5ec73b65771dde1360ffb038d4d48bf749692fe2/cervmongo-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e9f55c4ee7ccbe8018ddc28da51d979", "sha256": "a377d9404c8cdd501e61ed6f90f5a176b57c804ef568926bd62038daba042d92"}, "downloads": -1, "filename": "cervmongo-0.1.13.tar.gz", "has_sig": false, "md5_digest": "0e9f55c4ee7ccbe8018ddc28da51d979", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31952, "upload_time": "2020-05-07T04:07:38", "upload_time_iso_8601": "2020-05-07T04:07:38.290314Z", "url": "https://files.pythonhosted.org/packages/cc/b3/7a5c3556084c0900d6008d764418b4c66e5af1b9b9c76f8884bd7c6578fc/cervmongo-0.1.13.tar.gz", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "56283533ef023f732fa1d0036b303b66", "sha256": "16ed5e6acfa720d26bbfb067b8666b49b55eed3ec400f5551f8cfbc49329b9e9"}, "downloads": -1, "filename": "cervmongo-0.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "56283533ef023f732fa1d0036b303b66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38776, "upload_time": "2020-05-07T04:14:34", "upload_time_iso_8601": "2020-05-07T04:14:34.916412Z", "url": "https://files.pythonhosted.org/packages/25/58/b1034b943e76c0885817ec2b5d4553329b5ded83b4cc7de02117cc8f704b/cervmongo-0.1.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "827ba8f84e3965455c8c91f27f66d5cd", "sha256": "d0c6444378d41b4f28fb1910dad5ffe8808585f357acbfdcfce5ed2e0b9624b9"}, "downloads": -1, "filename": "cervmongo-0.1.14.tar.gz", "has_sig": false, "md5_digest": "827ba8f84e3965455c8c91f27f66d5cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31944, "upload_time": "2020-05-07T04:14:36", "upload_time_iso_8601": "2020-05-07T04:14:36.459849Z", "url": "https://files.pythonhosted.org/packages/38/55/20d4b32530b3c3702bc6285ea1647303b345e8254262e6dfbc1812dc53dd/cervmongo-0.1.14.tar.gz", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "f4efb41412ec9befd52b87705d4c1230", "sha256": "b05235c4932e0c3516451f1017c9aac4b1fec0129f33b497c060883576f109c2"}, "downloads": -1, "filename": "cervmongo-0.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "f4efb41412ec9befd52b87705d4c1230", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39070, "upload_time": "2020-05-07T22:23:42", "upload_time_iso_8601": "2020-05-07T22:23:42.762001Z", "url": "https://files.pythonhosted.org/packages/2f/f4/d55f41b20d32e27358c92cd2caa5c78bc45319b9fc7dd6468eabe25e3345/cervmongo-0.1.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46cca46e482908fec3369dcb41655f89", "sha256": "91bda7d148b01198a0d6a463cbefffd06e313c6dd365e9943c508ccece81f92f"}, "downloads": -1, "filename": "cervmongo-0.1.15.tar.gz", "has_sig": false, "md5_digest": "46cca46e482908fec3369dcb41655f89", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32228, "upload_time": "2020-05-07T22:23:44", "upload_time_iso_8601": "2020-05-07T22:23:44.120790Z", "url": "https://files.pythonhosted.org/packages/43/74/4f9bc0326628fd418994374f6d6a680286e8335b6cb77cdf7bcb110fafbb/cervmongo-0.1.15.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "b9513409c7759fefb0a6558184cacef5", "sha256": "7829a9ab3b751ccd203fa4432895c9f09bee65ec478baf42cae07aa448327a7e"}, "downloads": -1, "filename": "cervmongo-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "b9513409c7759fefb0a6558184cacef5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39150, "upload_time": "2020-05-07T23:02:07", "upload_time_iso_8601": "2020-05-07T23:02:07.711625Z", "url": "https://files.pythonhosted.org/packages/23/59/96b64b46eaf02af94ea7dadaeb2d62340ae2a62f3efb322fe4513b183034/cervmongo-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9bd7d4fd3fb0f6d46a2837370b36f7f3", "sha256": "21de42bea44eb79bb2e5de71d1159b1cb0c6d8a1aab2b037a975436f7bd4823f"}, "downloads": -1, "filename": "cervmongo-0.1.16.tar.gz", "has_sig": false, "md5_digest": "9bd7d4fd3fb0f6d46a2837370b36f7f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32290, "upload_time": "2020-05-07T23:02:09", "upload_time_iso_8601": "2020-05-07T23:02:09.043772Z", "url": "https://files.pythonhosted.org/packages/57/52/d37cac714b50e3351273c8ffde6663baf71f88f9990fbc33d7d8d91611fe/cervmongo-0.1.16.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b9513409c7759fefb0a6558184cacef5", "sha256": "7829a9ab3b751ccd203fa4432895c9f09bee65ec478baf42cae07aa448327a7e"}, "downloads": -1, "filename": "cervmongo-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "b9513409c7759fefb0a6558184cacef5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39150, "upload_time": "2020-05-07T23:02:07", "upload_time_iso_8601": "2020-05-07T23:02:07.711625Z", "url": "https://files.pythonhosted.org/packages/23/59/96b64b46eaf02af94ea7dadaeb2d62340ae2a62f3efb322fe4513b183034/cervmongo-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9bd7d4fd3fb0f6d46a2837370b36f7f3", "sha256": "21de42bea44eb79bb2e5de71d1159b1cb0c6d8a1aab2b037a975436f7bd4823f"}, "downloads": -1, "filename": "cervmongo-0.1.16.tar.gz", "has_sig": false, "md5_digest": "9bd7d4fd3fb0f6d46a2837370b36f7f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32290, "upload_time": "2020-05-07T23:02:09", "upload_time_iso_8601": "2020-05-07T23:02:09.043772Z", "url": "https://files.pythonhosted.org/packages/57/52/d37cac714b50e3351273c8ffde6663baf71f88f9990fbc33d7d8d91611fe/cervmongo-0.1.16.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:42 2020"}