{"info": {"author": "PeopleDoc", "author_email": "pdoc-team-ml@ultimatesoftware.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "# mlvtools\n\nThe Machine Learning Versioning Tools.\n\n## Installing\n\nTo install mlvtools with `pip` from PyPI:\n\n```shell\n$ pip install mlvtools\n```\n\nTo install it from sources for development:\n\n```shell\n$ git clone http://github.com/peopledoc/mlvtools.git\n$ cd mlvtools\n$ pip install -e .[dev]\n```\n\n## Tutorial\n\nA tutorial is available to showcase how to use the tools. See [mlvtools\ntutorial](https://github.com/peopledoc/mlvtools-tutorial).\n\n## Keywords\n\n`Step Metadata`: in this document it refers to the first code cell when it\nis used to declare metadata such as parameters, dvc inputs/outputs, etc.\n\n`Working Directory`: the project's working directory. Files specified in the\nuser configuration are relative to this directory. The `--working-directory`\n(or `-w`) flag is used to specify the Working Directory.\n\n## Tools\n\n`ipynb_to_python`: this command converts a Jupyter Notebook to a parameterized and\nexecutable Python script (see specific syntax in section below).\n\n```shell\n$ ipynb_to_python -n [notebook_path] -o [python_script_path]\n```\n\n`gen_dvc`: this command creates a DVC command which calls the Python script generated by\n`ipynb_to_python`.\n\n```shell\n$ gen_dvc -i [python_script] --out-py-cmd [python_command] --out-bash-cmd [dvc_command]\n```\n\n`export_pipeline`: this command exports the pipeline corresponding to the given DVC meta\nfile into a bash script.  Pipeline steps are called sequentially in dependency order.\nOnly for local steps.\n\n```shell\n$ export_pipeline --dvc [DVC target meta file] -o [pipeline script]\n```\n\n`ipynb_to_dvc`: this command converts a Jupyter Notebook to a parameterized and\nexecutable Python script and a DVC command. It is the combination of\n`ipynb_to_python` and `gen_dvc`. It only works with a configuration file.\n\n```shell\n$ ipynb_to_dvc -n [notebook_path]\n```\n\n`check_script_consistency` and `check_all_scripts_consistency`: those commands ensure\nconsitency between a Jupyter notebook and its generated python script. It is possible to\nuse them as git hook or in the project's Continuous Integration. The consistency check\nignores blank lines and comments.\n\n```shell\n$ check_script_consistency -n [notebook_path] -s [script_path]\n```\n\n```shell\n$ check_all_scripts_consistency -n [notebook_directory]\n# Works only with a configuration file (provided or auto-detected)\n```\n\n## Configuration\n\nA configuration file can be provided, but it is not mandatory.  Its default location is\n`[working_directory]/.mlvtools`. Use the flag `--conf-path` (or `-c`) on the command\nline to specify a specific configuration file path.\n\nThe configuration file format is JSON.\n\n```json\n{\n  \"path\":\n  {\n    \"python_script_root_dir\": \"[path_to_the_script_directory]\",\n    \"dvc_cmd_root_dir\": \"[path_to_the_dvc_cmd_directory]\",\n    \"dvc_metadata_root_dir\": \"[path_to_the_dvc_metadata_directory] (optional)\"\n  },\n  \"ignore_keys\": [\"keywords\", \"to\", \"ignore\"],\n  \"dvc_var_python_cmd_path\": \"MLV_PY_CMD_PATH_CUSTOM\",\n  \"dvc_var_python_cmd_name\": \"MLV_PY_CMD_NAME_CUSTOM\",\n  \"docstring_conf\": \"./docstring_conf.yml\"\n}\n```\n\nAll given paths must be relative to the Working Directory.\n\n* `path_to_the_script_directory`: the directory where Python scripts will be generated\n  using `ipynb_to_script` commands. The generated Python script names are based on the\n  notebook names.\n\n  ```shell\n  $ ipynb_to_script -n ./data/My\\ Notebook.ipynb\n  ```\n  Generated script: `[path_to_the_script_directory]/my_notebook.py`\n\n* `path_to_the_dvc_cmd_directory`: the directory where DVC commands will be generated\n  using `gen_dvc` command. The generated command names are based on the Python script\n  names.\n\n  ```shell\n  $ gen_dvc -i ./scripts/my_notebook.py\n  ```\n  Generated command: `[path_to_the_python_cmd_directory]/my_notebook_dvc`\n\n* `path_to_the_dvc_metadata_directory`: the directory where DVC metadata files will be\n  generated when executing `gen_dvc` commands. This value is optional, by default\n  DVC metadata files will be saved in the Working Directory.  The generated DVC\n  metadata file names are based on the Python 3 script names.\n\n  Generated file: `[path_to_the_dvc_metadata_directory]/my_notebook.dvc`\n\n* `ignore_keys`: list of keywords use to discard a cell. Default value is `['# No effect\n  ]`.  (See \"Discard cell\" section)\n\n* `dvc_var_python_cmd_path`, `dvc_var_python_cmd_name`, `dvc_var_meta_filename`: allow\n  to customize variable names which can be used in `dvc-cmd` Docstring parameters.\n\n  They respectively correspond to the variables holding the Python command file path,\n  the file name and the variable holding the DVC default meta file name.\n\n  Default values are `MLV_PY_CMD_PATH`, `MLV_PY_CMD_NAME` and `MLV_DVC_META_FILENAME`.\n  (See DVC Command/Complex cases section for usage.)\n\n* `docstring_conf`: the path to the docstring configuration used for Jinja templating\n  (see DVC templating section).  This parameter is optional.\n\n\n## Jupyter Notebook syntax\n\nThe Step Metadata cell is used to declare script parameters and DVC outputs and\ndependencies.  This can be done using basic Docstring syntax. This Docstring must be the\nfirst statement is this cell, only comments can be writen above.\n\n\n### Good practices\n\nAvoid using relative paths in your Jupyter Notebook because they are relative to\nthe notebook location which is not the same when it will be converted to a script.\n\n\n### Python Script Parameters\n\nParameters can be declared in the Jupyter Notebook using basic Docstring syntax.  This\nparameters description is used to generate configurable and executable Python scripts.\n\nParameters declaration in Jupyter Notebook:\n\nJupyter Notebook: `process_files.ipynb`\n\n\n```\n#:param [type]? [param_name]: [description]?\n\"\"\"\n:param str input_file: the input file\n:param output_file: the output_file\n:param rate: the learning rate\n:param int retry:\n\"\"\"\n```\n\nGenerated Python script:\n\n```py\n[...]\ndef process_file(input_file, output_file, rate, retry):\n    \"\"\"\n     ...\n    \"\"\"\n[...]\n```\n\nScript command line parameters:\n\n```\nmy_script.py -h\n\nusage: my_cmd [-h] --input-file INPUT_FILE --output-file OUTPUT_FILE --rate RATE --retry RETRY\n\nCommand for script [script_name]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --input-file INPUT_FILE\n                        the input file\n  --output-file OUTPUT_FILE\n                        the output_file\n  --rate RATE           the rate\n  --retry RETRY\n```\n\nAll declared arguments are required.\n\n### DVC command\n\nA DVC command is a wrapper over a `dvc run` command called on a Python script generated\nwith the `ipynb_to_python` command. It is a step of a pipeline.\n\nIt is based on data declared in the Notebook's Step Metadata.\n\nTwo modes are available:\n* describe only input/output for simple cases (recommended)\n* describe full command for complex cases\n\n#### Simple cases\n\nSyntax:\n\n```\n:param str input_csv_file: Path to input file\n:param str output_csv_file_1: Path to output file 1\n:param str output_csv_file_2: Path to output file 2\n[...]\n\n[:dvc-[in|out][\\s{related_param}]?:[\\s{file_path}]?]*\n[:dvc-extra: {python_other_param}]?\n\n:dvc-in: ./data/filter.csv\n:dvc-in input_csv_file: ./data/info.csv\n:dvc-out: ./data/train_set_1.csv\n:dvc-out output_csv_file_1: ./data/test_set_1.csv\n:dvc-out-persist: ./data/train_set_2.csv\n:dvc-out-persist output_csv_file_2: ./data/test_set_2.csv\n:dvc-extra: --mode train --rate 12\n```\n\n* `{file_path}` path can be absolute or relative to the Working Directory.\n* `{related_param}` is a parameter of the corresponding Python script, it is filled in\n  for the python script call\n* `dvc-extra` allows to declare parameters which are not dvc outputs or dependencies.\n  Those parameters are provided to the call of the Python command.\n\n```\npushd /working-directory\n\nINPUT_CSV_FILE=\"./data/info.csv\"\nOUTPUT_CSV_FILE_1=\"./data/test_set_1.csv\"\nOUTPUT_CSV_FILE_2=\"./data/test_set_2.csv\"\n\ndvc run \\\n-d ./data/filter.csv\\\n-d $INPUT_CSV_FILE\\\n-o ./data/train_set_1.csv\\\n-o $OUTPUT_CSV_FILE_1\\\n--outs-persist ./data/train_set_2.csv\\\n--outs-persist $OUTPUT_CSV_FILE_2\\\ngen_src/python_script.py --mode train --rate 12\n        --input-csv-file $INPUT_CSV_FILE\n        --output-csv-file-1 $OUTPUT_CSV_FILE_1\n        --output-csv-file-2 $OUTPUT_CSV_FILE_2\n```\n\n#### Complex cases\n\nSyntax:\n\n```\n:dvc-cmd: {dvc_command}\n\n:dvc-cmd: dvc run -o ./out_train.csv -o ./out_test.csv\n    \"$MLV_PY_CMD_PATH -m train --out ./out_train.csv &&\n     $MLV_PY_CMD_PATH -m test --out ./out_test.csv\"\n```\n\nThis syntax allows to provide the full dvc command to generate. All paths can be\nabsolute or relative to the Working Directory.  The variables `$MLV_PY_CMD_PATH` and\n`$MLV_PY_CMD_NAME` are available. They correspond to the path and the name of the\ncorresponding Python command, respectively. The variable `$MLV_DVC_META_FILENAME`\ncontains the default name of the DVC meta file.\n\n```\npushd /working-directory\nMLV_PY_CMD_PATH=\"gen_src/python_script.py\"\nMLV_PY_CMD_NAME=\"python_script.py\"\n\ndvc run -f $MLV_DVC_META_FILENAME -o ./out_train.csv \\\n    -o ./out_test.csv \\\n    \"$MLV_PY_CMD_PATH -m train --out ./out_train.csv && \\\n    $MLV_PY_CMD_PATH -m test --out ./out_test.csv\"\npopd\n```\n\n### DVC templating\n\nIt is possible to use Jinja2 templates in the DVC Docstring parts. For example, it can\nbe useful to declare all steps dependencies, outputs and extra parameters.\n\nExample:\n\n```\n# Docstring in Jupyter notebook\n\"\"\"\n[...]\n:dvc-in: {{ conf.train_data_file_path }}\n:dvc-out: {{ conf.model_file_path }}\n:dvc-extra: --rate {{ conf.rate }}\n\"\"\"\n```\n\n```\n# Docstring configuration file (Yaml format): ./dc_conf.yml\ntrain_data_file_path: ./data/trainset.csv\nmodel_file_path: ./data/model.pkl\nrate: 45\n```\n\n```\n# DVC command generation\ngen_dvc -i ./python_script.py --docstring-conf ./dc_conf.yml\n```\n\nThe Docstring configuration file can be provided through the main configuration or using\nthe `--docstring-conf` argument. This feature is only available for `gen_dvc` command.\n\n### Discard cell\n\nSome cells in Jupyter Notebook are executed only to watch intermediate results.  In\na Python script those are statements with no effect.  The comment `# No effect` allows\nto discard a whole cell content to avoid waste of time running those statements.  It is\npossible to customize the list of discard keywords, see the Configuration section.\n\n\n## Contributing\n\nWe happily welcome contributions to mlvtools. Please see our [contribution](./CONTRIBUTING.md) guide for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/peopledoc/ml-versionning-tools", "keywords": "peopledoc,machine learning,versioning,mlvtools", "license": "", "maintainer": "", "maintainer_email": "", "name": "mlvtools", "package_url": "https://pypi.org/project/mlvtools/", "platform": "", "project_url": "https://pypi.org/project/mlvtools/", "project_urls": {"Homepage": "http://github.com/peopledoc/ml-versionning-tools"}, "release_url": "https://pypi.org/project/mlvtools/2.1.0/", "requires_dist": ["docstring-parser (>=0.3)", "Jinja2 (>=2.10.1)", "nbconvert", "pydantic (>=1.0)", "PyYAML", "networkx", "yapf", "pytest ; extra == 'dev'", "flake8 ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "pytest-mock ; extra == 'dev'", "twine ; extra == 'dev'", "dvc ; extra == 'dev'"], "requires_python": "", "summary": "Set of Machine Learning versioning helpers", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mlvtools</h1>\n<p>The Machine Learning Versioning Tools.</p>\n<h2>Installing</h2>\n<p>To install mlvtools with <code>pip</code> from PyPI:</p>\n<pre>$ pip install mlvtools\n</pre>\n<p>To install it from sources for development:</p>\n<pre>$ git clone http://github.com/peopledoc/mlvtools.git\n$ <span class=\"nb\">cd</span> mlvtools\n$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<h2>Tutorial</h2>\n<p>A tutorial is available to showcase how to use the tools. See <a href=\"https://github.com/peopledoc/mlvtools-tutorial\" rel=\"nofollow\">mlvtools\ntutorial</a>.</p>\n<h2>Keywords</h2>\n<p><code>Step Metadata</code>: in this document it refers to the first code cell when it\nis used to declare metadata such as parameters, dvc inputs/outputs, etc.</p>\n<p><code>Working Directory</code>: the project's working directory. Files specified in the\nuser configuration are relative to this directory. The <code>--working-directory</code>\n(or <code>-w</code>) flag is used to specify the Working Directory.</p>\n<h2>Tools</h2>\n<p><code>ipynb_to_python</code>: this command converts a Jupyter Notebook to a parameterized and\nexecutable Python script (see specific syntax in section below).</p>\n<pre>$ ipynb_to_python -n <span class=\"o\">[</span>notebook_path<span class=\"o\">]</span> -o <span class=\"o\">[</span>python_script_path<span class=\"o\">]</span>\n</pre>\n<p><code>gen_dvc</code>: this command creates a DVC command which calls the Python script generated by\n<code>ipynb_to_python</code>.</p>\n<pre>$ gen_dvc -i <span class=\"o\">[</span>python_script<span class=\"o\">]</span> --out-py-cmd <span class=\"o\">[</span>python_command<span class=\"o\">]</span> --out-bash-cmd <span class=\"o\">[</span>dvc_command<span class=\"o\">]</span>\n</pre>\n<p><code>export_pipeline</code>: this command exports the pipeline corresponding to the given DVC meta\nfile into a bash script.  Pipeline steps are called sequentially in dependency order.\nOnly for local steps.</p>\n<pre>$ export_pipeline --dvc <span class=\"o\">[</span>DVC target meta file<span class=\"o\">]</span> -o <span class=\"o\">[</span>pipeline script<span class=\"o\">]</span>\n</pre>\n<p><code>ipynb_to_dvc</code>: this command converts a Jupyter Notebook to a parameterized and\nexecutable Python script and a DVC command. It is the combination of\n<code>ipynb_to_python</code> and <code>gen_dvc</code>. It only works with a configuration file.</p>\n<pre>$ ipynb_to_dvc -n <span class=\"o\">[</span>notebook_path<span class=\"o\">]</span>\n</pre>\n<p><code>check_script_consistency</code> and <code>check_all_scripts_consistency</code>: those commands ensure\nconsitency between a Jupyter notebook and its generated python script. It is possible to\nuse them as git hook or in the project's Continuous Integration. The consistency check\nignores blank lines and comments.</p>\n<pre>$ check_script_consistency -n <span class=\"o\">[</span>notebook_path<span class=\"o\">]</span> -s <span class=\"o\">[</span>script_path<span class=\"o\">]</span>\n</pre>\n<pre>$ check_all_scripts_consistency -n <span class=\"o\">[</span>notebook_directory<span class=\"o\">]</span>\n<span class=\"c1\"># Works only with a configuration file (provided or auto-detected)</span>\n</pre>\n<h2>Configuration</h2>\n<p>A configuration file can be provided, but it is not mandatory.  Its default location is\n<code>[working_directory]/.mlvtools</code>. Use the flag <code>--conf-path</code> (or <code>-c</code>) on the command\nline to specify a specific configuration file path.</p>\n<p>The configuration file format is JSON.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"path\"</span><span class=\"p\">:</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"python_script_root_dir\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[path_to_the_script_directory]\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"dvc_cmd_root_dir\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[path_to_the_dvc_cmd_directory]\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"dvc_metadata_root_dir\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[path_to_the_dvc_metadata_directory] (optional)\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"ignore_keys\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"keywords\"</span><span class=\"p\">,</span> <span class=\"s2\">\"to\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ignore\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"dvc_var_python_cmd_path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MLV_PY_CMD_PATH_CUSTOM\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"dvc_var_python_cmd_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MLV_PY_CMD_NAME_CUSTOM\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"docstring_conf\"</span><span class=\"p\">:</span> <span class=\"s2\">\"./docstring_conf.yml\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>All given paths must be relative to the Working Directory.</p>\n<ul>\n<li>\n<p><code>path_to_the_script_directory</code>: the directory where Python scripts will be generated\nusing <code>ipynb_to_script</code> commands. The generated Python script names are based on the\nnotebook names.</p>\n<pre>$ ipynb_to_script -n ./data/My<span class=\"se\">\\ </span>Notebook.ipynb\n</pre>\n<p>Generated script: <code>[path_to_the_script_directory]/my_notebook.py</code></p>\n</li>\n<li>\n<p><code>path_to_the_dvc_cmd_directory</code>: the directory where DVC commands will be generated\nusing <code>gen_dvc</code> command. The generated command names are based on the Python script\nnames.</p>\n<pre>$ gen_dvc -i ./scripts/my_notebook.py\n</pre>\n<p>Generated command: <code>[path_to_the_python_cmd_directory]/my_notebook_dvc</code></p>\n</li>\n<li>\n<p><code>path_to_the_dvc_metadata_directory</code>: the directory where DVC metadata files will be\ngenerated when executing <code>gen_dvc</code> commands. This value is optional, by default\nDVC metadata files will be saved in the Working Directory.  The generated DVC\nmetadata file names are based on the Python 3 script names.</p>\n<p>Generated file: <code>[path_to_the_dvc_metadata_directory]/my_notebook.dvc</code></p>\n</li>\n<li>\n<p><code>ignore_keys</code>: list of keywords use to discard a cell. Default value is <code>['# No effect ]</code>.  (See \"Discard cell\" section)</p>\n</li>\n<li>\n<p><code>dvc_var_python_cmd_path</code>, <code>dvc_var_python_cmd_name</code>, <code>dvc_var_meta_filename</code>: allow\nto customize variable names which can be used in <code>dvc-cmd</code> Docstring parameters.</p>\n<p>They respectively correspond to the variables holding the Python command file path,\nthe file name and the variable holding the DVC default meta file name.</p>\n<p>Default values are <code>MLV_PY_CMD_PATH</code>, <code>MLV_PY_CMD_NAME</code> and <code>MLV_DVC_META_FILENAME</code>.\n(See DVC Command/Complex cases section for usage.)</p>\n</li>\n<li>\n<p><code>docstring_conf</code>: the path to the docstring configuration used for Jinja templating\n(see DVC templating section).  This parameter is optional.</p>\n</li>\n</ul>\n<h2>Jupyter Notebook syntax</h2>\n<p>The Step Metadata cell is used to declare script parameters and DVC outputs and\ndependencies.  This can be done using basic Docstring syntax. This Docstring must be the\nfirst statement is this cell, only comments can be writen above.</p>\n<h3>Good practices</h3>\n<p>Avoid using relative paths in your Jupyter Notebook because they are relative to\nthe notebook location which is not the same when it will be converted to a script.</p>\n<h3>Python Script Parameters</h3>\n<p>Parameters can be declared in the Jupyter Notebook using basic Docstring syntax.  This\nparameters description is used to generate configurable and executable Python scripts.</p>\n<p>Parameters declaration in Jupyter Notebook:</p>\n<p>Jupyter Notebook: <code>process_files.ipynb</code></p>\n<pre><code>#:param [type]? [param_name]: [description]?\n\"\"\"\n:param str input_file: the input file\n:param output_file: the output_file\n:param rate: the learning rate\n:param int retry:\n\"\"\"\n</code></pre>\n<p>Generated Python script:</p>\n<pre><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_file</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">,</span> <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">retry</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">     ...</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<p>Script command line parameters:</p>\n<pre><code>my_script.py -h\n\nusage: my_cmd [-h] --input-file INPUT_FILE --output-file OUTPUT_FILE --rate RATE --retry RETRY\n\nCommand for script [script_name]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --input-file INPUT_FILE\n                        the input file\n  --output-file OUTPUT_FILE\n                        the output_file\n  --rate RATE           the rate\n  --retry RETRY\n</code></pre>\n<p>All declared arguments are required.</p>\n<h3>DVC command</h3>\n<p>A DVC command is a wrapper over a <code>dvc run</code> command called on a Python script generated\nwith the <code>ipynb_to_python</code> command. It is a step of a pipeline.</p>\n<p>It is based on data declared in the Notebook's Step Metadata.</p>\n<p>Two modes are available:</p>\n<ul>\n<li>describe only input/output for simple cases (recommended)</li>\n<li>describe full command for complex cases</li>\n</ul>\n<h4>Simple cases</h4>\n<p>Syntax:</p>\n<pre><code>:param str input_csv_file: Path to input file\n:param str output_csv_file_1: Path to output file 1\n:param str output_csv_file_2: Path to output file 2\n[...]\n\n[:dvc-[in|out][\\s{related_param}]?:[\\s{file_path}]?]*\n[:dvc-extra: {python_other_param}]?\n\n:dvc-in: ./data/filter.csv\n:dvc-in input_csv_file: ./data/info.csv\n:dvc-out: ./data/train_set_1.csv\n:dvc-out output_csv_file_1: ./data/test_set_1.csv\n:dvc-out-persist: ./data/train_set_2.csv\n:dvc-out-persist output_csv_file_2: ./data/test_set_2.csv\n:dvc-extra: --mode train --rate 12\n</code></pre>\n<ul>\n<li><code>{file_path}</code> path can be absolute or relative to the Working Directory.</li>\n<li><code>{related_param}</code> is a parameter of the corresponding Python script, it is filled in\nfor the python script call</li>\n<li><code>dvc-extra</code> allows to declare parameters which are not dvc outputs or dependencies.\nThose parameters are provided to the call of the Python command.</li>\n</ul>\n<pre><code>pushd /working-directory\n\nINPUT_CSV_FILE=\"./data/info.csv\"\nOUTPUT_CSV_FILE_1=\"./data/test_set_1.csv\"\nOUTPUT_CSV_FILE_2=\"./data/test_set_2.csv\"\n\ndvc run \\\n-d ./data/filter.csv\\\n-d $INPUT_CSV_FILE\\\n-o ./data/train_set_1.csv\\\n-o $OUTPUT_CSV_FILE_1\\\n--outs-persist ./data/train_set_2.csv\\\n--outs-persist $OUTPUT_CSV_FILE_2\\\ngen_src/python_script.py --mode train --rate 12\n        --input-csv-file $INPUT_CSV_FILE\n        --output-csv-file-1 $OUTPUT_CSV_FILE_1\n        --output-csv-file-2 $OUTPUT_CSV_FILE_2\n</code></pre>\n<h4>Complex cases</h4>\n<p>Syntax:</p>\n<pre><code>:dvc-cmd: {dvc_command}\n\n:dvc-cmd: dvc run -o ./out_train.csv -o ./out_test.csv\n    \"$MLV_PY_CMD_PATH -m train --out ./out_train.csv &amp;&amp;\n     $MLV_PY_CMD_PATH -m test --out ./out_test.csv\"\n</code></pre>\n<p>This syntax allows to provide the full dvc command to generate. All paths can be\nabsolute or relative to the Working Directory.  The variables <code>$MLV_PY_CMD_PATH</code> and\n<code>$MLV_PY_CMD_NAME</code> are available. They correspond to the path and the name of the\ncorresponding Python command, respectively. The variable <code>$MLV_DVC_META_FILENAME</code>\ncontains the default name of the DVC meta file.</p>\n<pre><code>pushd /working-directory\nMLV_PY_CMD_PATH=\"gen_src/python_script.py\"\nMLV_PY_CMD_NAME=\"python_script.py\"\n\ndvc run -f $MLV_DVC_META_FILENAME -o ./out_train.csv \\\n    -o ./out_test.csv \\\n    \"$MLV_PY_CMD_PATH -m train --out ./out_train.csv &amp;&amp; \\\n    $MLV_PY_CMD_PATH -m test --out ./out_test.csv\"\npopd\n</code></pre>\n<h3>DVC templating</h3>\n<p>It is possible to use Jinja2 templates in the DVC Docstring parts. For example, it can\nbe useful to declare all steps dependencies, outputs and extra parameters.</p>\n<p>Example:</p>\n<pre><code># Docstring in Jupyter notebook\n\"\"\"\n[...]\n:dvc-in: {{ conf.train_data_file_path }}\n:dvc-out: {{ conf.model_file_path }}\n:dvc-extra: --rate {{ conf.rate }}\n\"\"\"\n</code></pre>\n<pre><code># Docstring configuration file (Yaml format): ./dc_conf.yml\ntrain_data_file_path: ./data/trainset.csv\nmodel_file_path: ./data/model.pkl\nrate: 45\n</code></pre>\n<pre><code># DVC command generation\ngen_dvc -i ./python_script.py --docstring-conf ./dc_conf.yml\n</code></pre>\n<p>The Docstring configuration file can be provided through the main configuration or using\nthe <code>--docstring-conf</code> argument. This feature is only available for <code>gen_dvc</code> command.</p>\n<h3>Discard cell</h3>\n<p>Some cells in Jupyter Notebook are executed only to watch intermediate results.  In\na Python script those are statements with no effect.  The comment <code># No effect</code> allows\nto discard a whole cell content to avoid waste of time running those statements.  It is\npossible to customize the list of discard keywords, see the Configuration section.</p>\n<h2>Contributing</h2>\n<p>We happily welcome contributions to mlvtools. Please see our <a href=\"./CONTRIBUTING.md\" rel=\"nofollow\">contribution</a> guide for details.</p>\n\n          </div>"}, "last_serial": 7061737, "releases": {"2.0.2": [{"comment_text": "", "digests": {"md5": "579b448610ec90999cb14cdb13aab1db", "sha256": "5a3a0f14c3a56c9fe1358b1c80a36e7baa084932530157bfde72341e5f7da607"}, "downloads": -1, "filename": "mlvtools-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "579b448610ec90999cb14cdb13aab1db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27501, "upload_time": "2020-04-10T08:53:59", "upload_time_iso_8601": "2020-04-10T08:53:59.595108Z", "url": "https://files.pythonhosted.org/packages/07/6e/f5a55330cc4a55dda3d4333c290a8bb9acdcdbb9cc5c83adaff351cbf5e3/mlvtools-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21464ce516c7a09c7a1b55494956fbd0", "sha256": "502f18ce2e1703972eb7b9f23e593097b522d085002fa69fcdb2a3a7cb69a312"}, "downloads": -1, "filename": "mlvtools-2.0.2.tar.gz", "has_sig": false, "md5_digest": "21464ce516c7a09c7a1b55494956fbd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24699, "upload_time": "2020-04-10T08:54:01", "upload_time_iso_8601": "2020-04-10T08:54:01.123292Z", "url": "https://files.pythonhosted.org/packages/1f/f9/734c754775a05130effc207ac3c10b5fcfe17064f6ed117606939d24688a/mlvtools-2.0.2.tar.gz", "yanked": false}], "2.0.2.dev0": [{"comment_text": "", "digests": {"md5": "ae9df6eb01201f5df8d60884a58a519c", "sha256": "fd48b0297faf80043680fc61c0c96f48629c252bf3e0fb3338261df7088733c1"}, "downloads": -1, "filename": "mlvtools-2.0.2.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae9df6eb01201f5df8d60884a58a519c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27621, "upload_time": "2020-04-10T08:34:51", "upload_time_iso_8601": "2020-04-10T08:34:51.366439Z", "url": "https://files.pythonhosted.org/packages/95/9f/a620cbeb6d1648301575fc1a4a2c5f1abc066bba7a606f18e65e7d894219/mlvtools-2.0.2.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08233afa3abeb79b0b24f296bef5ac0f", "sha256": "2259a8ec1bc355e9b17d375d7d743cf73188ae7879dd0f2d74bf72e33cd375ea"}, "downloads": -1, "filename": "mlvtools-2.0.2.dev0.tar.gz", "has_sig": false, "md5_digest": "08233afa3abeb79b0b24f296bef5ac0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24746, "upload_time": "2020-04-10T08:34:53", "upload_time_iso_8601": "2020-04-10T08:34:53.582282Z", "url": "https://files.pythonhosted.org/packages/1c/26/11c5f0cb1b1cf507c61e5775a9bfe0f935c1d1847045ee7b85fd76d26b3b/mlvtools-2.0.2.dev0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "f7f0b22314acc8baaa05b0149e278b14", "sha256": "fdd7e10cfe949fb21e361da6fdf9cd1cd9337e8b6fd7695e3b26a33d984737d8"}, "downloads": -1, "filename": "mlvtools-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f7f0b22314acc8baaa05b0149e278b14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27621, "upload_time": "2020-04-20T17:57:51", "upload_time_iso_8601": "2020-04-20T17:57:51.236942Z", "url": "https://files.pythonhosted.org/packages/9d/3b/365def43e05bbad4ab91828c5d0e3f376405a30fb6f0434e1b86d44da2d4/mlvtools-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff840712acf6f52cf57d47565688df85", "sha256": "1078a7e11b50cd4166ec065d988a5a5d5bf696c57d6ab2ce4e8391008d9029ab"}, "downloads": -1, "filename": "mlvtools-2.1.0.tar.gz", "has_sig": false, "md5_digest": "ff840712acf6f52cf57d47565688df85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24992, "upload_time": "2020-04-20T17:57:53", "upload_time_iso_8601": "2020-04-20T17:57:53.623256Z", "url": "https://files.pythonhosted.org/packages/08/94/9fca4b57d211e9b4db761899f6501d31f9c99fdd86283210e692bf480d13/mlvtools-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f7f0b22314acc8baaa05b0149e278b14", "sha256": "fdd7e10cfe949fb21e361da6fdf9cd1cd9337e8b6fd7695e3b26a33d984737d8"}, "downloads": -1, "filename": "mlvtools-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f7f0b22314acc8baaa05b0149e278b14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27621, "upload_time": "2020-04-20T17:57:51", "upload_time_iso_8601": "2020-04-20T17:57:51.236942Z", "url": "https://files.pythonhosted.org/packages/9d/3b/365def43e05bbad4ab91828c5d0e3f376405a30fb6f0434e1b86d44da2d4/mlvtools-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff840712acf6f52cf57d47565688df85", "sha256": "1078a7e11b50cd4166ec065d988a5a5d5bf696c57d6ab2ce4e8391008d9029ab"}, "downloads": -1, "filename": "mlvtools-2.1.0.tar.gz", "has_sig": false, "md5_digest": "ff840712acf6f52cf57d47565688df85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24992, "upload_time": "2020-04-20T17:57:53", "upload_time_iso_8601": "2020-04-20T17:57:53.623256Z", "url": "https://files.pythonhosted.org/packages/08/94/9fca4b57d211e9b4db761899f6501d31f9c99fdd86283210e692bf480d13/mlvtools-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:20 2020"}