{"info": {"author": "ebarajas", "author_email": "ebarajas@talroo.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only"], "description": "# ps-environ\n\n## Description\nThis is a simple wrapper around AWS SSM Parameter Store. It is designed to cache and parse variables from Parameter Store for a specific service and stage.\nIt is heavily inspired by [django-environ](https://github.com/joke2k/django-environ) and shares a (simplified) interface.\n\nFor more on Parameter Store, read the [AWS documentation](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html).\n\n## Installation\n\nInstall with `pip`:\n\n``` bash\npip install parameter-store-environ \n```\n\n## Usage\nThe wrapper assumes that variables in parameter store are in the following format:\n`/<SERVICE>/<STAGE>/<VARIABLE_NAME>`\n\nSo, for example:\n```\n/api/dev/DEBUG\n/api/prod/DB_HOST\n```\n\nThe wrapper is agnostic to the variable name, but we recommend you follow the convention for environment variables and use all caps and underscores. \n\nIn your settings/configuration module, import the module and create a new instance of the wrapper\n\n``` python\nfrom ps_environ import Env\nconfig = Env(service='api', stage='dev')\n\n# When called directly, the string value is returned\nassert config('DEBUG') == 'True'\n\n# Use casting methods to return the type you need\nassert config.bool('DEBUG') == True\n```\n\n### Schemas\nYou can define a schema when you instantiate the wrapper to avoid having to call the casting methods\n``` python\nconfig = Env(service='api', stage='dev', schema={\n    'DEBUG': bool,\n    'MAX_RETRIES': int,\n})\n\nassert config('DEBUG') == True\nassert config('MAX_RETRIES') == 5\n```\n\nSupported casting types: bool, float, int, set, list, tuple, json\n\nAdditional Notes:\n\n* `list, tuple, set`: These types expect the values to be separated by commas. E.g. `1,2,3`\n* `json`: A regular JSON string is expected. E.g. `{'foo': 'bar'}`\n\n### Environment Variable Override\nIf the variable is also set in the environment, that value will take precedence. \n\n### Default Values\nYou can set a default value by setting the default keyword.\nIf no default is set and the value is neither in the environment variables or in parameter store, an `ImproperlyConfigured` exception will be raised.\n``` python\nassert config('DB_HOST', default='localhost') == 'localhost'\n```\n\n## AWS Credentials\n`ps-environ` uses `boto3` to interface with parameter store and therefore uses the same mechanism for authentication.\nSee the [configuring credentials](https://boto3.readthedocs.io/en/latest/guide/configuration.html#configuring-credentials) in the Boto 3 documentation for more information.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/talroo/parameter-store-environ", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "parameter-store-environ", "package_url": "https://pypi.org/project/parameter-store-environ/", "platform": "", "project_url": "https://pypi.org/project/parameter-store-environ/", "project_urls": {"Homepage": "https://github.com/talroo/parameter-store-environ"}, "release_url": "https://pypi.org/project/parameter-store-environ/0.1.2/", "requires_dist": ["boto3"], "requires_python": ">=3.6.0", "summary": "A simple configuration variable wrapper around AWS SSM Parameter Store", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ps-environ</h1>\n<h2>Description</h2>\n<p>This is a simple wrapper around AWS SSM Parameter Store. It is designed to cache and parse variables from Parameter Store for a specific service and stage.\nIt is heavily inspired by <a href=\"https://github.com/joke2k/django-environ\" rel=\"nofollow\">django-environ</a> and shares a (simplified) interface.</p>\n<p>For more on Parameter Store, read the <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html\" rel=\"nofollow\">AWS documentation</a>.</p>\n<h2>Installation</h2>\n<p>Install with <code>pip</code>:</p>\n<pre>pip install parameter-store-environ \n</pre>\n<h2>Usage</h2>\n<p>The wrapper assumes that variables in parameter store are in the following format:\n<code>/&lt;SERVICE&gt;/&lt;STAGE&gt;/&lt;VARIABLE_NAME&gt;</code></p>\n<p>So, for example:</p>\n<pre><code>/api/dev/DEBUG\n/api/prod/DB_HOST\n</code></pre>\n<p>The wrapper is agnostic to the variable name, but we recommend you follow the convention for environment variables and use all caps and underscores.</p>\n<p>In your settings/configuration module, import the module and create a new instance of the wrapper</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ps_environ</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">=</span><span class=\"s1\">'api'</span><span class=\"p\">,</span> <span class=\"n\">stage</span><span class=\"o\">=</span><span class=\"s1\">'dev'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># When called directly, the string value is returned</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'True'</span>\n\n<span class=\"c1\"># Use casting methods to return the type you need</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</pre>\n<h3>Schemas</h3>\n<p>You can define a schema when you instantiate the wrapper to avoid having to call the casting methods</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">=</span><span class=\"s1\">'api'</span><span class=\"p\">,</span> <span class=\"n\">stage</span><span class=\"o\">=</span><span class=\"s1\">'dev'</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'DEBUG'</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n    <span class=\"s1\">'MAX_RETRIES'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n<span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'MAX_RETRIES'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n</pre>\n<p>Supported casting types: bool, float, int, set, list, tuple, json</p>\n<p>Additional Notes:</p>\n<ul>\n<li><code>list, tuple, set</code>: These types expect the values to be separated by commas. E.g. <code>1,2,3</code></li>\n<li><code>json</code>: A regular JSON string is expected. E.g. <code>{'foo': 'bar'}</code></li>\n</ul>\n<h3>Environment Variable Override</h3>\n<p>If the variable is also set in the environment, that value will take precedence.</p>\n<h3>Default Values</h3>\n<p>You can set a default value by setting the default keyword.\nIf no default is set and the value is neither in the environment variables or in parameter store, an <code>ImproperlyConfigured</code> exception will be raised.</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'DB_HOST'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'localhost'</span>\n</pre>\n<h2>AWS Credentials</h2>\n<p><code>ps-environ</code> uses <code>boto3</code> to interface with parameter store and therefore uses the same mechanism for authentication.\nSee the <a href=\"https://boto3.readthedocs.io/en/latest/guide/configuration.html#configuring-credentials\" rel=\"nofollow\">configuring credentials</a> in the Boto 3 documentation for more information.</p>\n\n          </div>"}, "last_serial": 4927643, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "4dc886bdc2724d1965e70c3b22d30e73", "sha256": "6d50a9b54e759a4744ab082c49b6cd8f5db4ad6de094df547394ea3d195e1a10"}, "downloads": -1, "filename": "parameter_store_environ-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4dc886bdc2724d1965e70c3b22d30e73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 4679, "upload_time": "2019-03-12T00:09:14", "upload_time_iso_8601": "2019-03-12T00:09:14.069069Z", "url": "https://files.pythonhosted.org/packages/73/a6/32145eaccad310dd7603e2220c30fa8b49654d94002dc10e9d119759ecb9/parameter_store_environ-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3871ef2bd3fc885629040ece741c164", "sha256": "eae9d193303f0f9ffa2f534b1625061ec0266d426076c9557d4843b44aef04b3"}, "downloads": -1, "filename": "parameter-store-environ-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f3871ef2bd3fc885629040ece741c164", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4550, "upload_time": "2019-03-12T00:09:16", "upload_time_iso_8601": "2019-03-12T00:09:16.044429Z", "url": "https://files.pythonhosted.org/packages/a8/0d/117fc878b15be937ba54b09db5eca442c4d74e48bb19e2bc43ecfeb60ca5/parameter-store-environ-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4dc886bdc2724d1965e70c3b22d30e73", "sha256": "6d50a9b54e759a4744ab082c49b6cd8f5db4ad6de094df547394ea3d195e1a10"}, "downloads": -1, "filename": "parameter_store_environ-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4dc886bdc2724d1965e70c3b22d30e73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 4679, "upload_time": "2019-03-12T00:09:14", "upload_time_iso_8601": "2019-03-12T00:09:14.069069Z", "url": "https://files.pythonhosted.org/packages/73/a6/32145eaccad310dd7603e2220c30fa8b49654d94002dc10e9d119759ecb9/parameter_store_environ-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3871ef2bd3fc885629040ece741c164", "sha256": "eae9d193303f0f9ffa2f534b1625061ec0266d426076c9557d4843b44aef04b3"}, "downloads": -1, "filename": "parameter-store-environ-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f3871ef2bd3fc885629040ece741c164", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4550, "upload_time": "2019-03-12T00:09:16", "upload_time_iso_8601": "2019-03-12T00:09:16.044429Z", "url": "https://files.pythonhosted.org/packages/a8/0d/117fc878b15be937ba54b09db5eca442c4d74e48bb19e2bc43ecfeb60ca5/parameter-store-environ-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:34 2020"}