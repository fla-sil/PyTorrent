{"info": {"author": "Juan L Gamella", "author_email": "juangamella@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Sempler: Sampling from general structural causal models (SCMs)\n==============================================================\n\nVisit https://github.com/juangamella/sempler for the full DOCs.\n\nDisclaimer: This package is still at its infancy and the API could be\nsubject to change. Use at your own risk, but also know that feedback is\nvery welcome :)\n\nTwo main classes are provided:\n\n-  ``sempler.ANM``: to define and sample from general additive noise\n   SCMs. Any assignment function is possible, as are the noise\n   distributions.\n-  ``sempler.LGANM``: to define and sample from a linear model with\n   Gaussian additive noise (i.e. a Gaussian Bayesian network).\n\nBoth classes define a ``sample`` function which generates samples from\nthe SCM, in the observational setting or under interventions.\n\nAdditionally, ``sempler.LGANM`` allows sampling \"in the population\nsetting\", i.e. by returning a symbolic gaussian distribution,\n``sempler.NormalDistribution``, defined by its mean and covariance,\nwhich allows for manipulation such as conditioning, marginalization and\nregression in the population setting.\n\nANMs - General Additive Noise Models\n------------------------------------\n\nThe ANM class allows to define and sample from general additive noise\nmodels. Any assignment function is possible, as are the noise\ndistributions.\n\nANMs are defined by providing the following arguments:\n\n1. ``A`` (``np.array``): a connectivity matrix, representing the\n   underlying DAG, , where ``A[i,j]=1`` denotes a directed edge from i to j.\n\n2. ``assignments`` (``list``): the functional assignments, i.e. a list\n   with a function per variable in the SCM, which takes as many\n   arguments as parents (incoming edges) of the variable and returns a\n   single (numerical) value. For variables which are source nodes in the\n   graph, ``None`` is used.\n\n3. ``noise_distributions`` (``list``): the noise distributions of each\n   variable, i.e. a list with a function per variable which can be\n   called with a single (int) parameter n and returns n samples. Any\n   distribution is possible (even arbitrary deterministic ones); see\n   sempler.noise for common ones (uniform, gaussian, laplace, ...).\n\nThe parameters of the ANM follow this *functional* approach to give you\nmaximum flexibility. For more standard, linear SCMs with gaussian noise,\nit is easier to use the LGANM class.\n\nSampling\n~~~~~~~~\n\nSamples are generated by calling the ``sample`` function, with\nparameters:\n\n-  ``n`` (``int``): the number of samples\n-  ``do\\_interventions`` (``dict``, optional): a dictionary containing\n   the distribution functions (see ``sempler.noise``) from which to\n   generate samples for each intervened variable\n-  ``shift\\_interventions`` (``dict``, optional): a dictionary\n   containing the distribution functions (see ``sempler.noise``) from\n   which to generate the noise which is added to each intervened\n   variable\n-  ``random\\_state`` (``int``, optional): seed for the random state\n   generator\n\nAn example: creating an ANM with standard Gaussian noise and linear and\nnon-linear assignments, and sampling from it.\n\n.. code:: python\n\n    import sempler\n    import sempler.noise as noise\n    import numpy as np\n\n    # Connectivity matrix\n    A = np.array([[0, 0, 0, 1, 0],\n      [0, 0, 1, 0, 0],\n      [0, 0, 0, 1, 0],\n      [0, 0, 0, 0, 1],\n      [0, 0, 0, 0, 0]])\n\n    # Noise distributions (see sempler.noise)\n    noise_distributions = [noise.normal(0,1)] * 5\n\n    # Variable assignments\n    functions = [None, None, np.sin, lambda x: np.exp(x[:,0]) + 2*x[:,1], lambda x: 2*x]\n\n    # All together\n    anm = sempler.ANM(A, functions, noise_distributions)\n\n    # Sampling from the observational setting\n    samples = anm.sample(100)\n\n    # Sampling under a shift intervention on variable 1\n    samples = anm.sample(100, shift_interventions = {1: noise.normal(0,1)})\n\nLGANMs - Linear Gaussian Additive Noise Models\n----------------------------------------------\n\nThe ``sempler.LGANM`` class defines linear models with Gaussian additive\nnoise (i.e. a Gaussian Bayesian networks).\n\nLGANMs are defined by providing the following arguments:\n\n-  ``W`` (``np.array``): weighted connectivity matrix representing the\n   DAG, where ``W[i,j]=w`` denotes a directed edge from i to j with weight w.\n-  ``variances`` (``np.array`` or ``tuple``): the variances of the noise\n   terms. Can be either a vector of variances or a tuple indicating a\n   range for their uniform sampling.\n-  ``means`` (``np.array`` or ``tuple``, optional): the means of the\n   noise terms. Either a vector of means or a tuple indicating the range\n   for uniform sampling. If left unspecified all means are set to zero.\n\nSampling\n~~~~~~~~\n\nSampling is again done by calling the ``sample`` function, with\nparameters:\n\n-  ``n`` (``int``, optinal): the number of samples. Ignored if\n   ``population`` is True, defaults to 100.\n-  ``population`` (``bool``, optional): If set to True, parameter ``n``\n   is ignored and ``sample`` returns a ``sempler.NormalDistribution``\n   object, which is a symbolic gaussian distribution (see below).\n-  ``do\\_interventions`` (``dict``, optional): Dictionary with keys\n   being the targets of the interventions and values being either a\n   number (the variable is deterministically set to this value) or a\n   tuple with the mean and variance of the normal distribution from\n   which to sample the variable.\n-  ``shift\\_interventions`` (``dict``, optional): Dictionary with keys\n   being the targets of the interventions and values being either a\n   number (which is then added to the variable) or a tuple with the mean\n   and variance of the normal distribution from which to sample added\n   noise.\n\nAn example: creating a LGANM with noise means and variances sampled\nuniformly from [0,1], and sampling from it.\n\n.. code:: python\n\n    import sempler\n    import numpy as np\n\n    # Connectivity matrix\n    W = np.array([[0, 0, 0, 0.1, 0],\n                  [0, 0, 2.1, 0, 0],\n                  [0, 0, 0, 3.2, 0],\n                  [0, 0, 0, 0, 5.0],\n                  [0, 0, 0, 0, 0]])\n\n    # All together\n    lganm = sempler.LGANM(W, (0,1), (0,1))\n\n    # Sampling from the observational setting\n    samples = lganm.sample(100)\n\n    # Sampling under a shift intervention on variable 1 with standard gaussian noise\n    samples = lganm.sample(100, shift_interventions = {1: (0,1)})\n\n    # Sampling the observational environment in the \"population setting\"\n    distribution = lganm.sample(population = True)\n\nSymbolic Normal Distribution\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``sempler.NormalDistribution`` class allows for symbolic\nrepresentation of a multivariate normal distribution, and is returned\nwhen calling ``LGANM.sample`` with ``population=True``.\n\nAn example:\n\n.. code:: python\n\n    import numpy as np\n    import sempler\n\n    # Define by mean and covariance\n    mean = np.array([1,2,3])\n    covariance = np.array([[1, 2, 4], [2, 6, 5], [4, 5, 1]])\n    distribution = sempler.NormalDistribution(mean, covariance)\n\n    # Marginal distribution of X0 and X1 (also a NormalDistribution object)\n    marginal = distribution.marginal([0, 1])\n\n    # Conditional distribution of X2 on X1=1 (also a NormalDistribution object)\n    conditional = distribution.conditional(2,1,1)\n\n    # Regress X0 on X1 and X2 in the population setting (no estimation errors)\n    (coefs, intercept) = distribution.regress(0, [1,2])\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/sempler/", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "sempler", "package_url": "https://pypi.org/project/sempler/", "platform": "", "project_url": "https://pypi.org/project/sempler/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/sempler/"}, "release_url": "https://pypi.org/project/sempler/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Sample from general structural causal models (SCMs)", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Visit <a href=\"https://github.com/juangamella/sempler\" rel=\"nofollow\">https://github.com/juangamella/sempler</a> for the full DOCs.</p>\n<p>Disclaimer: This package is still at its infancy and the API could be\nsubject to change. Use at your own risk, but also know that feedback is\nvery welcome :)</p>\n<p>Two main classes are provided:</p>\n<ul>\n<li><tt>sempler.ANM</tt>: to define and sample from general additive noise\nSCMs. Any assignment function is possible, as are the noise\ndistributions.</li>\n<li><tt>sempler.LGANM</tt>: to define and sample from a linear model with\nGaussian additive noise (i.e. a Gaussian Bayesian network).</li>\n</ul>\n<p>Both classes define a <tt>sample</tt> function which generates samples from\nthe SCM, in the observational setting or under interventions.</p>\n<p>Additionally, <tt>sempler.LGANM</tt> allows sampling \u201cin the population\nsetting\u201d, i.e. by returning a symbolic gaussian distribution,\n<tt>sempler.NormalDistribution</tt>, defined by its mean and covariance,\nwhich allows for manipulation such as conditioning, marginalization and\nregression in the population setting.</p>\n<div id=\"anms-general-additive-noise-models\">\n<h2>ANMs - General Additive Noise Models</h2>\n<p>The ANM class allows to define and sample from general additive noise\nmodels. Any assignment function is possible, as are the noise\ndistributions.</p>\n<p>ANMs are defined by providing the following arguments:</p>\n<ol>\n<li><tt>A</tt> (<tt>np.array</tt>): a connectivity matrix, representing the\nunderlying DAG, , where <tt><span class=\"pre\">A[i,j]=1</span></tt> denotes a directed edge from i to j.</li>\n<li><tt>assignments</tt> (<tt>list</tt>): the functional assignments, i.e. a list\nwith a function per variable in the SCM, which takes as many\narguments as parents (incoming edges) of the variable and returns a\nsingle (numerical) value. For variables which are source nodes in the\ngraph, <tt>None</tt> is used.</li>\n<li><tt>noise_distributions</tt> (<tt>list</tt>): the noise distributions of each\nvariable, i.e. a list with a function per variable which can be\ncalled with a single (int) parameter n and returns n samples. Any\ndistribution is possible (even arbitrary deterministic ones); see\nsempler.noise for common ones (uniform, gaussian, laplace, \u2026).</li>\n</ol>\n<p>The parameters of the ANM follow this <em>functional</em> approach to give you\nmaximum flexibility. For more standard, linear SCMs with gaussian noise,\nit is easier to use the LGANM class.</p>\n<div id=\"sampling\">\n<h3>Sampling</h3>\n<p>Samples are generated by calling the <tt>sample</tt> function, with\nparameters:</p>\n<ul>\n<li><tt>n</tt> (<tt>int</tt>): the number of samples</li>\n<li><tt>do\\_interventions</tt> (<tt>dict</tt>, optional): a dictionary containing\nthe distribution functions (see <tt>sempler.noise</tt>) from which to\ngenerate samples for each intervened variable</li>\n<li><tt>shift\\_interventions</tt> (<tt>dict</tt>, optional): a dictionary\ncontaining the distribution functions (see <tt>sempler.noise</tt>) from\nwhich to generate the noise which is added to each intervened\nvariable</li>\n<li><tt>random\\_state</tt> (<tt>int</tt>, optional): seed for the random state\ngenerator</li>\n</ul>\n<p>An example: creating an ANM with standard Gaussian noise and linear and\nnon-linear assignments, and sampling from it.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sempler</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sempler.noise</span> <span class=\"k\">as</span> <span class=\"nn\">noise</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Connectivity matrix</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># Noise distributions (see sempler.noise)</span>\n<span class=\"n\">noise_distributions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">noise</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)]</span> <span class=\"o\">*</span> <span class=\"mi\">5</span>\n\n<span class=\"c1\"># Variable assignments</span>\n<span class=\"n\">functions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># All together</span>\n<span class=\"n\">anm</span> <span class=\"o\">=</span> <span class=\"n\">sempler</span><span class=\"o\">.</span><span class=\"n\">ANM</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">functions</span><span class=\"p\">,</span> <span class=\"n\">noise_distributions</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Sampling from the observational setting</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">anm</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Sampling under a shift intervention on variable 1</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">anm</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">shift_interventions</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">noise</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)})</span>\n</pre>\n</div>\n</div>\n<div id=\"lganms-linear-gaussian-additive-noise-models\">\n<h2>LGANMs - Linear Gaussian Additive Noise Models</h2>\n<p>The <tt>sempler.LGANM</tt> class defines linear models with Gaussian additive\nnoise (i.e. a Gaussian Bayesian networks).</p>\n<p>LGANMs are defined by providing the following arguments:</p>\n<ul>\n<li><tt>W</tt> (<tt>np.array</tt>): weighted connectivity matrix representing the\nDAG, where <tt><span class=\"pre\">W[i,j]=w</span></tt> denotes a directed edge from i to j with weight w.</li>\n<li><tt>variances</tt> (<tt>np.array</tt> or <tt>tuple</tt>): the variances of the noise\nterms. Can be either a vector of variances or a tuple indicating a\nrange for their uniform sampling.</li>\n<li><tt>means</tt> (<tt>np.array</tt> or <tt>tuple</tt>, optional): the means of the\nnoise terms. Either a vector of means or a tuple indicating the range\nfor uniform sampling. If left unspecified all means are set to zero.</li>\n</ul>\n<div id=\"id1\">\n<h3>Sampling</h3>\n<p>Sampling is again done by calling the <tt>sample</tt> function, with\nparameters:</p>\n<ul>\n<li><tt>n</tt> (<tt>int</tt>, optinal): the number of samples. Ignored if\n<tt>population</tt> is True, defaults to 100.</li>\n<li><tt>population</tt> (<tt>bool</tt>, optional): If set to True, parameter <tt>n</tt>\nis ignored and <tt>sample</tt> returns a <tt>sempler.NormalDistribution</tt>\nobject, which is a symbolic gaussian distribution (see below).</li>\n<li><tt>do\\_interventions</tt> (<tt>dict</tt>, optional): Dictionary with keys\nbeing the targets of the interventions and values being either a\nnumber (the variable is deterministically set to this value) or a\ntuple with the mean and variance of the normal distribution from\nwhich to sample the variable.</li>\n<li><tt>shift\\_interventions</tt> (<tt>dict</tt>, optional): Dictionary with keys\nbeing the targets of the interventions and values being either a\nnumber (which is then added to the variable) or a tuple with the mean\nand variance of the normal distribution from which to sample added\nnoise.</li>\n</ul>\n<p>An example: creating a LGANM with noise means and variances sampled\nuniformly from [0,1], and sampling from it.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sempler</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Connectivity matrix</span>\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">2.1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">3.2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">],</span>\n              <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># All together</span>\n<span class=\"n\">lganm</span> <span class=\"o\">=</span> <span class=\"n\">sempler</span><span class=\"o\">.</span><span class=\"n\">LGANM</span><span class=\"p\">(</span><span class=\"n\">W</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Sampling from the observational setting</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">lganm</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Sampling under a shift intervention on variable 1 with standard gaussian noise</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">lganm</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">shift_interventions</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)})</span>\n\n<span class=\"c1\"># Sampling the observational environment in the \"population setting\"</span>\n<span class=\"n\">distribution</span> <span class=\"o\">=</span> <span class=\"n\">lganm</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">population</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"symbolic-normal-distribution\">\n<h3>Symbolic Normal Distribution</h3>\n<p>The <tt>sempler.NormalDistribution</tt> class allows for symbolic\nrepresentation of a multivariate normal distribution, and is returned\nwhen calling <tt>LGANM.sample</tt> with <tt>population=True</tt>.</p>\n<p>An example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sempler</span>\n\n<span class=\"c1\"># Define by mean and covariance</span>\n<span class=\"n\">mean</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">covariance</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"n\">distribution</span> <span class=\"o\">=</span> <span class=\"n\">sempler</span><span class=\"o\">.</span><span class=\"n\">NormalDistribution</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">covariance</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Marginal distribution of X0 and X1 (also a NormalDistribution object)</span>\n<span class=\"n\">marginal</span> <span class=\"o\">=</span> <span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">marginal</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Conditional distribution of X2 on X1=1 (also a NormalDistribution object)</span>\n<span class=\"n\">conditional</span> <span class=\"o\">=</span> <span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">conditional</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Regress X0 on X1 and X2 in the population setting (no estimation errors)</span>\n<span class=\"p\">(</span><span class=\"n\">coefs</span><span class=\"p\">,</span> <span class=\"n\">intercept</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">regress</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7139455, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6768cc4aadbd180661f552794ebdd716", "sha256": "d55b5cbdad863b58f50217235a123cdee8d5682f52fd1ae2af5d314898447190"}, "downloads": -1, "filename": "sempler-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6768cc4aadbd180661f552794ebdd716", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15348, "upload_time": "2020-04-24T17:28:56", "upload_time_iso_8601": "2020-04-24T17:28:56.209456Z", "url": "https://files.pythonhosted.org/packages/f3/28/5f5309a647d875f25704d4968fab76d984f22bdc5aa5d9a3bf93db1bb9de/sempler-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "43ad85538d297e86ecfd726ec6eab5cf", "sha256": "edd4b4c49522c769e6732f11e02a0c16c461140f54ca0e74bad3ab6937b9d024"}, "downloads": -1, "filename": "sempler-0.1.1.tar.gz", "has_sig": false, "md5_digest": "43ad85538d297e86ecfd726ec6eab5cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15409, "upload_time": "2020-04-24T17:45:04", "upload_time_iso_8601": "2020-04-24T17:45:04.876968Z", "url": "https://files.pythonhosted.org/packages/81/fa/6ec5b37f0b4aad646d5851e2e9d27571af54054521aeb922f1c21d786dfd/sempler-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3fff491cc930b39de02b1d78019d6c2e", "sha256": "c2f8dc0837ce40e7a986cb4d15d652b2de50cf9a3a22452c742eb4e8155abac2"}, "downloads": -1, "filename": "sempler-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3fff491cc930b39de02b1d78019d6c2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15466, "upload_time": "2020-04-30T18:21:17", "upload_time_iso_8601": "2020-04-30T18:21:17.754514Z", "url": "https://files.pythonhosted.org/packages/c5/ef/ffa010f46d7ff17b5bffc415c4855cb1201698cd9f2397e22a67bcb97b85/sempler-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3fff491cc930b39de02b1d78019d6c2e", "sha256": "c2f8dc0837ce40e7a986cb4d15d652b2de50cf9a3a22452c742eb4e8155abac2"}, "downloads": -1, "filename": "sempler-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3fff491cc930b39de02b1d78019d6c2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15466, "upload_time": "2020-04-30T18:21:17", "upload_time_iso_8601": "2020-04-30T18:21:17.754514Z", "url": "https://files.pythonhosted.org/packages/c5/ef/ffa010f46d7ff17b5bffc415c4855cb1201698cd9f2397e22a67bcb97b85/sempler-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:22 2020"}