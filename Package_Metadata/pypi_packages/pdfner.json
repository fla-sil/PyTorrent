{"info": {"author": "Hung Luu", "author_email": "hung.luu@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# pdfner\nInformation extraction and named entity recognition for indexing PDFs\n\n## Install NLP tools\n1. Download language-specific model data in spaCy\n    ```\n        $ python -m spacy download en\n    ```\n2. Download Stanford CoreNLP from https://stanfordnlp.github.io/CoreNLP/download.html and extract to {project root}/pdfner/tests/tools\n\n\n## Install OCRmyPDF\nhttps://ocrmypdf.readthedocs.io/en/latest/installation.html\n\n## Installation\n```commandline\npip install pdfner\n```\n\n## Usage\n### Processing a PDF\n```python\nfrom typing import List\nfrom pdfner import *\n\n# Each page of the PDF is processed to an NerDocument.\nprocessed_pdf: List[NerDocument] = process_pdf('scanned.pdf', entities_detector=SpacyDetectEntities())\nprint(f\"Extracted text: {processed_pdf[0].text}\")\nprint(f\"Detected entities: {processed_pdf[0].entities}\") \n```\n\n### Indexing with Elasticsearch\n```python\nimport simplejson as json\nfrom elasticsearch import Elasticsearch\nes = Elasticsearch()\n\n# NerDocument implements for_json function for easy serialization with simplejson.\ndoc: NerDocument\nfor doc in processed_pdf:\n    res = es.index(index='pdfner', id=doc.id, body=json.dumps(doc, for_json=True))\n    print(res['result'])\n```\n\n### Indexing with Solr\n```python\nimport pysolr\n# Collection \"gettingstarted\" auto created by: solr -c -e schemaless\nsolr = pysolr.Solr('http://localhost:8983/solr/gettingstarted', always_commit=True)\n\n# encode returns NerDocument object as dict which is required by pysolr \nsolr.add([doc.encode() for doc in processed_pdf])\n```\n\n### API\n\n#### process_pdf\nA function that converts a scanned PDF to a text-based PDF and applies the NER detector object to the text to extract entities. Returns a list of NerDocument objects.\n\n- **filepath: str** - path to PDF file\n- **make_thumbnail: Optional[bool]=False** - whether to create a thumbnail PNG for the first page\n- **cache_entities: Optional[bool]=False** - whether to cache entities to the local filesystem\n- **parallelize_pages: Optional[bool]=True** - whether to process multiple pages in parallel\n- **out_filepath: Optional[str]=None** - optional location of resulting processed PDF\n- **entities_detector: AbstractDetectEntities** - named argument for NER detector object (SpacyDetectEntities, CoreNlpDetectEntities)\n- **\\*\\*kwargs** - additional named arguments to attach to the returned NerDocument objects\n\n#### AbstractDetectEntities\nRoll your own NER detector by subclassing AbstractDetectEntities and overriding detect_entities.\n\n- **detect_entities(text: str, \\*\\*kwargs)** - extract entities from input text and returns a list of NamedEntity objects\n\n#### NerDocument\nA class representing a single page of a processed PDF.\n\n##### Attributes\n- **id: str** - auto-generated random UUID \n- **text: str** - text extracted from PDF page\n- **page_number: int** - PDF page number\n- **entities: List[str]** - entities extracted from PDF text\n- **processed_location: str** - location of processed PDF\n- **original_location: str** - location of original PDF\n- **redacted_location: str** - location of redacted PDF\n- **thumbnail_location: str** - location of thumbnail PNG for first page of processed PDF\n- **\\*\\*kwargs** - additional named arguments to store with object\n\n##### Instance methods\n- **encode()** - returns dict representation of object\n- **for_json()** - for simplejson to serialize object to JSON\n\n##### Class methods\n- **decode(d: Dict)** - object_hook function for simplejson's loads function to deserialize JSON to a proper NerDocument object\n\n\n", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hnluu8/pdfner", "keywords": "pdf, ner", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pdfner", "package_url": "https://pypi.org/project/pdfner/", "platform": "", "project_url": "https://pypi.org/project/pdfner/", "project_urls": {"Homepage": "https://github.com/hnluu8/pdfner"}, "release_url": "https://pypi.org/project/pdfner/0.1.1/", "requires_dist": ["dask[delayed] (==2.9.0)", "simplejson (==3.17.0)", "pdf2image (==1.4.2)", "pymupdf (==1.16.8)", "pikepdf (==1.1.0)", "img2pdf (==0.3.3)", "textacy (==0.6.2)", "msgpack-python (==0.5.6)", "pynlp (==0.4.2)", "pytest (>=5.0.0) ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": "<3.8,>=3.6", "summary": "Information extraction and named-entity recognition for indexing PDFs", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pdfner</h1>\n<p>Information extraction and named entity recognition for indexing PDFs</p>\n<h2>Install NLP tools</h2>\n<ol>\n<li>Download language-specific model data in spaCy\n<pre><code>    $ python -m spacy download en\n</code></pre>\n</li>\n<li>Download Stanford CoreNLP from <a href=\"https://stanfordnlp.github.io/CoreNLP/download.html\" rel=\"nofollow\">https://stanfordnlp.github.io/CoreNLP/download.html</a> and extract to {project root}/pdfner/tests/tools</li>\n</ol>\n<h2>Install OCRmyPDF</h2>\n<p><a href=\"https://ocrmypdf.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">https://ocrmypdf.readthedocs.io/en/latest/installation.html</a></p>\n<h2>Installation</h2>\n<pre>pip install pdfner\n</pre>\n<h2>Usage</h2>\n<h3>Processing a PDF</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pdfner</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># Each page of the PDF is processed to an NerDocument.</span>\n<span class=\"n\">processed_pdf</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">NerDocument</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">process_pdf</span><span class=\"p\">(</span><span class=\"s1\">'scanned.pdf'</span><span class=\"p\">,</span> <span class=\"n\">entities_detector</span><span class=\"o\">=</span><span class=\"n\">SpacyDetectEntities</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Extracted text: </span><span class=\"si\">{</span><span class=\"n\">processed_pdf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Detected entities: </span><span class=\"si\">{</span><span class=\"n\">processed_pdf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">entities</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span> \n</pre>\n<h3>Indexing with Elasticsearch</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">simplejson</span> <span class=\"k\">as</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">elasticsearch</span> <span class=\"kn\">import</span> <span class=\"n\">Elasticsearch</span>\n<span class=\"n\">es</span> <span class=\"o\">=</span> <span class=\"n\">Elasticsearch</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># NerDocument implements for_json function for easy serialization with simplejson.</span>\n<span class=\"n\">doc</span><span class=\"p\">:</span> <span class=\"n\">NerDocument</span>\n<span class=\"k\">for</span> <span class=\"n\">doc</span> <span class=\"ow\">in</span> <span class=\"n\">processed_pdf</span><span class=\"p\">:</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">es</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s1\">'pdfner'</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">for_json</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"s1\">'result'</span><span class=\"p\">])</span>\n</pre>\n<h3>Indexing with Solr</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pysolr</span>\n<span class=\"c1\"># Collection \"gettingstarted\" auto created by: solr -c -e schemaless</span>\n<span class=\"n\">solr</span> <span class=\"o\">=</span> <span class=\"n\">pysolr</span><span class=\"o\">.</span><span class=\"n\">Solr</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8983/solr/gettingstarted'</span><span class=\"p\">,</span> <span class=\"n\">always_commit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># encode returns NerDocument object as dict which is required by pysolr </span>\n<span class=\"n\">solr</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">([</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">doc</span> <span class=\"ow\">in</span> <span class=\"n\">processed_pdf</span><span class=\"p\">])</span>\n</pre>\n<h3>API</h3>\n<h4>process_pdf</h4>\n<p>A function that converts a scanned PDF to a text-based PDF and applies the NER detector object to the text to extract entities. Returns a list of NerDocument objects.</p>\n<ul>\n<li><strong>filepath: str</strong> - path to PDF file</li>\n<li><strong>make_thumbnail: Optional[bool]=False</strong> - whether to create a thumbnail PNG for the first page</li>\n<li><strong>cache_entities: Optional[bool]=False</strong> - whether to cache entities to the local filesystem</li>\n<li><strong>parallelize_pages: Optional[bool]=True</strong> - whether to process multiple pages in parallel</li>\n<li><strong>out_filepath: Optional[str]=None</strong> - optional location of resulting processed PDF</li>\n<li><strong>entities_detector: AbstractDetectEntities</strong> - named argument for NER detector object (SpacyDetectEntities, CoreNlpDetectEntities)</li>\n<li><strong>**kwargs</strong> - additional named arguments to attach to the returned NerDocument objects</li>\n</ul>\n<h4>AbstractDetectEntities</h4>\n<p>Roll your own NER detector by subclassing AbstractDetectEntities and overriding detect_entities.</p>\n<ul>\n<li><strong>detect_entities(text: str, **kwargs)</strong> - extract entities from input text and returns a list of NamedEntity objects</li>\n</ul>\n<h4>NerDocument</h4>\n<p>A class representing a single page of a processed PDF.</p>\n<h5>Attributes</h5>\n<ul>\n<li><strong>id: str</strong> - auto-generated random UUID</li>\n<li><strong>text: str</strong> - text extracted from PDF page</li>\n<li><strong>page_number: int</strong> - PDF page number</li>\n<li><strong>entities: List[str]</strong> - entities extracted from PDF text</li>\n<li><strong>processed_location: str</strong> - location of processed PDF</li>\n<li><strong>original_location: str</strong> - location of original PDF</li>\n<li><strong>redacted_location: str</strong> - location of redacted PDF</li>\n<li><strong>thumbnail_location: str</strong> - location of thumbnail PNG for first page of processed PDF</li>\n<li><strong>**kwargs</strong> - additional named arguments to store with object</li>\n</ul>\n<h5>Instance methods</h5>\n<ul>\n<li><strong>encode()</strong> - returns dict representation of object</li>\n<li><strong>for_json()</strong> - for simplejson to serialize object to JSON</li>\n</ul>\n<h5>Class methods</h5>\n<ul>\n<li><strong>decode(d: Dict)</strong> - object_hook function for simplejson's loads function to deserialize JSON to a proper NerDocument object</li>\n</ul>\n\n          </div>"}, "last_serial": 6471045, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "31835b59dd815ebb9909cf51c25bd01a", "sha256": "877285f80aedaaa68da8793fd7ed0f46f308af8fe1757b9d4b2870f06313c152"}, "downloads": -1, "filename": "pdfner-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "31835b59dd815ebb9909cf51c25bd01a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "<3.8,>=3.6", "size": 10177, "upload_time": "2020-01-16T19:03:09", "upload_time_iso_8601": "2020-01-16T19:03:09.110788Z", "url": "https://files.pythonhosted.org/packages/88/3f/3cd1c20fba0382506a8f9777bbf3f951257885e756b361f96d6805a9e067/pdfner-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4fe123c5b3bb3495ccee7b0d26df269f", "sha256": "6726df18ba31486c9a8a40275610cf3d3abffb77ca50cd337032784eb625d73b"}, "downloads": -1, "filename": "pdfner-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4fe123c5b3bb3495ccee7b0d26df269f", "packagetype": "sdist", "python_version": "source", "requires_python": "<3.8,>=3.6", "size": 6631, "upload_time": "2020-01-16T19:03:11", "upload_time_iso_8601": "2020-01-16T19:03:11.620560Z", "url": "https://files.pythonhosted.org/packages/b1/02/aef45ce8d32df584bb921f656348f7405347c557b43260f02241d9796934/pdfner-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "37b84ab0995938b138361d80ab4296f5", "sha256": "bc367ec1cc742874000eb529c48e44351a27247dbfae18aba024cb3c8830df88"}, "downloads": -1, "filename": "pdfner-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37b84ab0995938b138361d80ab4296f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "<3.8,>=3.6", "size": 11349, "upload_time": "2020-01-17T06:22:34", "upload_time_iso_8601": "2020-01-17T06:22:34.177137Z", "url": "https://files.pythonhosted.org/packages/c9/21/4b371b85978ab1c781c34574758e4c37279257add8babd0565b42b6e0d3b/pdfner-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fa18cadf86a1d8c3888cad75148939c", "sha256": "f58450939f4ecfd124893ea399b241d3bb97afbee088a3d50c8345bd89964ddb"}, "downloads": -1, "filename": "pdfner-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0fa18cadf86a1d8c3888cad75148939c", "packagetype": "sdist", "python_version": "source", "requires_python": "<3.8,>=3.6", "size": 8812, "upload_time": "2020-01-17T06:22:35", "upload_time_iso_8601": "2020-01-17T06:22:35.895572Z", "url": "https://files.pythonhosted.org/packages/80/b7/4e90bd593fe0159662f89a73dd7d47303a66098ba5b6fbd23d6790fb321d/pdfner-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37b84ab0995938b138361d80ab4296f5", "sha256": "bc367ec1cc742874000eb529c48e44351a27247dbfae18aba024cb3c8830df88"}, "downloads": -1, "filename": "pdfner-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37b84ab0995938b138361d80ab4296f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "<3.8,>=3.6", "size": 11349, "upload_time": "2020-01-17T06:22:34", "upload_time_iso_8601": "2020-01-17T06:22:34.177137Z", "url": "https://files.pythonhosted.org/packages/c9/21/4b371b85978ab1c781c34574758e4c37279257add8babd0565b42b6e0d3b/pdfner-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fa18cadf86a1d8c3888cad75148939c", "sha256": "f58450939f4ecfd124893ea399b241d3bb97afbee088a3d50c8345bd89964ddb"}, "downloads": -1, "filename": "pdfner-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0fa18cadf86a1d8c3888cad75148939c", "packagetype": "sdist", "python_version": "source", "requires_python": "<3.8,>=3.6", "size": 8812, "upload_time": "2020-01-17T06:22:35", "upload_time_iso_8601": "2020-01-17T06:22:35.895572Z", "url": "https://files.pythonhosted.org/packages/80/b7/4e90bd593fe0159662f89a73dd7d47303a66098ba5b6fbd23d6790fb321d/pdfner-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:11 2020"}