{"info": {"author": "Anton Semjonov", "author_email": "anton@semjonov.de", "bugtrack_url": null, "classifiers": [], "description": "# randomart.py\n\n[![CodeFactor](https://www.codefactor.io/repository/github/ansemjo/randomart/badge)](https://www.codefactor.io/repository/github/ansemjo/randomart)\n\nA script to present BLAKE2b hashes as small ASCII-art pictures, similarly to OpenSSH's\n[randomart](https://superuser.com/q/22535).\n\nThis allows easier verification by humans but may not be as secure as a bytewise comparison of the\ndigest!\n\n<span style=\"display:block;text-align:center\">![](assets/randomart.png)</span>\n\nSee the paper [Hash Visualization: a New Technique to improve Real-World Security<sup>1</sup>][^1]\nfor more information on the concept of random art.\n\nThe paper [The drunken bishop: An analysis of the OpenSSH fingerprint visualization\nalgorithm<sup>2</sup>][^2] analyses the OpenSSH implementation in more detail.\n\nIt should be explicitly noted that my algorithm is _similar_ but not _identical_ to the \"drunken\nbishop\" walk of the OpenSSH implementation. The implementation at hand:\n\n- flips sides at the borders, which turns the field into a torus\n- moves in all possible directions with distance 1, not only diagonally\n- does not mark start (`S`) and end (`E`) and uses a different character palette\n\nI have not performed any similar analysis[<sup>2</sup>][^2] but would expect my implementation to\nperform no worse.\n\n## installation\n\nInstall with pip directly from GitHub:\n\n    pip install git+https://github.com/ansemjo/randomart\n\n## usage\n\nThe script expects a file in the first positional argument or otherwise simply reads from standard\ninput. It is thus best suitable for usage in a pipe:\n\n    echo 'Hello, World!' | randomart.py\n\nThere are two flags to control the output:\n\n- `--ascii` use only ASCII characters for the box frame\n- `--hash` - print the computed digest before the randomart picture\n\nOtherwise use `randomart.py --help` for usage help.\n\n### as a library\n\nIf you want to use your own hash you can import from `random_art.randomart`:\n\n```python\nfrom random_art.randomart import draw, drunkenwalk\n...\n\n# generate your hash digest\ndigest = ...\n\n# generate randomart, HASHNAME must be 10 characters\nart = draw(drunkenwalk(digest), HASHNAME)\nprint(art)\n```\n\n[^1]:\n\n  http://www.ece.cmu.edu/~adrian/projects/validation/validation.pdf \"Perrig A. and Song D., 1999,\n  International Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99)\"\n\n[^2]:\n\n  http://www.dirk-loss.de/sshvis/drunken_bishop.pdf \"Dirk Loss, Tobias Limmer, Alexander von\n  Gernler, 2009\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ansemjo/randomart", "keywords": "randomart drunken bishop openssh blake2b blake2 hash comparison", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "randomart", "package_url": "https://pypi.org/project/randomart/", "platform": "", "project_url": "https://pypi.org/project/randomart/", "project_urls": {"Homepage": "https://github.com/ansemjo/randomart"}, "release_url": "https://pypi.org/project/randomart/0.2.3/", "requires_dist": ["numpy"], "requires_python": ">3.5", "summary": "Generate ASCII randomart by hashing input with BLAKE2b and using an adapted drunken bishop alogirthm.", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>randomart.py</h1>\n<p><a href=\"https://www.codefactor.io/repository/github/ansemjo/randomart\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/978963b0b16234c49bef374c92fa1a14e3adcf0a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f616e73656d6a6f2f72616e646f6d6172742f6261646765\"></a></p>\n<p>A script to present BLAKE2b hashes as small ASCII-art pictures, similarly to OpenSSH's\n<a href=\"https://superuser.com/q/22535\" rel=\"nofollow\">randomart</a>.</p>\n<p>This allows easier verification by humans but may not be as secure as a bytewise comparison of the\ndigest!</p>\n<p><span><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/262c931271c8ae6c15b10d9a329d394e4c547044/6173736574732f72616e646f6d6172742e706e67\"></span></p>\n<p>See the paper [Hash Visualization: a New Technique to improve Real-World Security<sup>1</sup>][^1]\nfor more information on the concept of random art.</p>\n<p>The paper [The drunken bishop: An analysis of the OpenSSH fingerprint visualization\nalgorithm<sup>2</sup>][^2] analyses the OpenSSH implementation in more detail.</p>\n<p>It should be explicitly noted that my algorithm is <em>similar</em> but not <em>identical</em> to the \"drunken\nbishop\" walk of the OpenSSH implementation. The implementation at hand:</p>\n<ul>\n<li>flips sides at the borders, which turns the field into a torus</li>\n<li>moves in all possible directions with distance 1, not only diagonally</li>\n<li>does not mark start (<code>S</code>) and end (<code>E</code>) and uses a different character palette</li>\n</ul>\n<p>I have not performed any similar analysis[<sup>2</sup>][^2] but would expect my implementation to\nperform no worse.</p>\n<h2>installation</h2>\n<p>Install with pip directly from GitHub:</p>\n<pre><code>pip install git+https://github.com/ansemjo/randomart\n</code></pre>\n<h2>usage</h2>\n<p>The script expects a file in the first positional argument or otherwise simply reads from standard\ninput. It is thus best suitable for usage in a pipe:</p>\n<pre><code>echo 'Hello, World!' | randomart.py\n</code></pre>\n<p>There are two flags to control the output:</p>\n<ul>\n<li><code>--ascii</code> use only ASCII characters for the box frame</li>\n<li><code>--hash</code> - print the computed digest before the randomart picture</li>\n</ul>\n<p>Otherwise use <code>randomart.py --help</code> for usage help.</p>\n<h3>as a library</h3>\n<p>If you want to use your own hash you can import from <code>random_art.randomart</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random_art.randomart</span> <span class=\"kn\">import</span> <span class=\"n\">draw</span><span class=\"p\">,</span> <span class=\"n\">drunkenwalk</span>\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># generate your hash digest</span>\n<span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"c1\"># generate randomart, HASHNAME must be 10 characters</span>\n<span class=\"n\">art</span> <span class=\"o\">=</span> <span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">drunkenwalk</span><span class=\"p\">(</span><span class=\"n\">digest</span><span class=\"p\">),</span> <span class=\"n\">HASHNAME</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">art</span><span class=\"p\">)</span>\n</pre>\n<p>[^1]:</p>\n<p><a href=\"http://www.ece.cmu.edu/%7Eadrian/projects/validation/validation.pdf\" rel=\"nofollow\">http://www.ece.cmu.edu/~adrian/projects/validation/validation.pdf</a> \"Perrig A. and Song D., 1999,\nInternational Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99)\"</p>\n<p>[^2]:</p>\n<p><a href=\"http://www.dirk-loss.de/sshvis/drunken_bishop.pdf\" rel=\"nofollow\">http://www.dirk-loss.de/sshvis/drunken_bishop.pdf</a> \"Dirk Loss, Tobias Limmer, Alexander von\nGernler, 2009\"</p>\n\n          </div>"}, "last_serial": 5167797, "releases": {"0.2.3": [{"comment_text": "", "digests": {"md5": "140de3178287ece41567448422f3faba", "sha256": "cda445023d608b6e3b28f67bf860cb1b6d4e01a311b1c6862c6d53c392e1b000"}, "downloads": -1, "filename": "randomart-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "140de3178287ece41567448422f3faba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 6284, "upload_time": "2019-04-20T13:16:45", "upload_time_iso_8601": "2019-04-20T13:16:45.035435Z", "url": "https://files.pythonhosted.org/packages/78/a5/20471b07b035cd4cc66f13e1d428b471918b6dd50d281b8cdcd1bb352dba/randomart-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2664d59e107a326c0492dca5de74251c", "sha256": "ecc58aab305107615dfefde6fb23ed1f38bbc020ba1dee295d39e496861c8fb2"}, "downloads": -1, "filename": "randomart-0.2.3.tar.gz", "has_sig": false, "md5_digest": "2664d59e107a326c0492dca5de74251c", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 4600, "upload_time": "2019-04-20T13:16:47", "upload_time_iso_8601": "2019-04-20T13:16:47.088741Z", "url": "https://files.pythonhosted.org/packages/ad/e8/ff0d901ba33f6271263d996dc04b9d60ca0fffe2f833c2c70e779f2bb5ae/randomart-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "140de3178287ece41567448422f3faba", "sha256": "cda445023d608b6e3b28f67bf860cb1b6d4e01a311b1c6862c6d53c392e1b000"}, "downloads": -1, "filename": "randomart-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "140de3178287ece41567448422f3faba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5", "size": 6284, "upload_time": "2019-04-20T13:16:45", "upload_time_iso_8601": "2019-04-20T13:16:45.035435Z", "url": "https://files.pythonhosted.org/packages/78/a5/20471b07b035cd4cc66f13e1d428b471918b6dd50d281b8cdcd1bb352dba/randomart-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2664d59e107a326c0492dca5de74251c", "sha256": "ecc58aab305107615dfefde6fb23ed1f38bbc020ba1dee295d39e496861c8fb2"}, "downloads": -1, "filename": "randomart-0.2.3.tar.gz", "has_sig": false, "md5_digest": "2664d59e107a326c0492dca5de74251c", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 4600, "upload_time": "2019-04-20T13:16:47", "upload_time_iso_8601": "2019-04-20T13:16:47.088741Z", "url": "https://files.pythonhosted.org/packages/ad/e8/ff0d901ba33f6271263d996dc04b9d60ca0fffe2f833c2c70e779f2bb5ae/randomart-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:40 2020"}