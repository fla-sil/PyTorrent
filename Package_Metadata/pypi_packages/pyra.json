{"info": {"author": "Adam Fourney", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "pyra - Python Region Algebra\n============================\n\n\nPyra is a python implementation of the region algebra and query language described in [1]. \nRegion algebras are used to efficiently query semi-structured text documents. This particular\nregion algebra operates on Generalized Concordance Lists (GCLs). GCLs are lists of regions\n(a.k.a., extents), which obey the following constraint: *No region in the list may have another\nregion from the same lists nested within it*. For a quick online introduction to this region\nalgebra, and why it is useful, visit:\n\n[Wumpus Search](http://www.wumpus-search.org/docs/gcl.html) \n\nIn general, this region algebra is good for extracting data from documents that have lightweight\nstructure, and is an alternative to more heavyweight solutions like XPath queries.\n\n\n### Algebra and Query Language\n\nOur region algebra consists of the following elements:\n\n(Essentially identical to the conventions used in Wumpus [See above])\n\n    Elementary Types\n    \u2014---------------\n    \"token\"             Tokens are quoted strings. Use \\\" to escape quotes, and \\\\ to escape escapes\n    \"a\", \"b\", \"c\"       Phrases are comma separated tokens\n    INT                 Positions are indicated as bare integers (e.g., 4071)\n\n    Operators (here A and B are arbitrary region algebra expressions, N is an integer)\n    ----------------------------------------------------------------------------------\n    A ^ B               Returns all extents that match both A and B\n    A + B               Returns all extents that match either A or B (or both)\n    A .. B              Returns all extents that start with A and end with B\n    A > B               Returns all extents that match A and contain an extent matching B \n    A < B               Returns all extents that match A, contained in an extent matching B\n\n    _{A}                The 'start' projection. For each extent (u,v) in A, return (u,u)\n    {A}_                The 'end' projection. For each extent (u,v) in A, return (v,v)\n\n    [N]                 Returns all extents of length N, where N is an integer (basically a sliding window)\n\n    Not yet implemented:\n    A /> B              Returns all extents that match A but do not contain an extent matching B\n    A /< B              Returns all extents that match A, not contained in an extent matching B\n\n\n### Examples\n\nSuppose we an XML document containing the complete works of Shakespeare (see './pyra/examples').\nWe can then run the following queries using pyra:\n\n**Return the titles of all plays, acts, scenes, etc.**\n\n    \"<title>\"..\"</title>\"         \n\n    Results:\n    slice(15,23):               <title> the tragedy of antony and cleopatra </title>\n    slice(68,72):               <title> dramatis personae </title>\n    slice(279,283):             <title> act i </title>\n    slice(284,295):             <title> scene i alexandria a room in cleopatra s palace </title>\n    slice(1097,1105):           <title> scene ii the same another room </title>\n    slice(3526,3534):           <title> scene iii the same another room </title>\n    slice(4889,4898):           <title> scene iv rome octavius caesar s house </title>\n    slice(5885,5893):           <title> scene v alexandria cleopatra s palace </title>\n\n    ... And, many more ...\n\n \n**Return the titles of all plays**\n**(i.e., the first title found in the play)**\n\n    (\"<title>\"..\"</title>\") < (\"<play>\"..\"</title>\")         \n\n    Results:\n    slice(15,23):                <title> the tragedy of antony and cleopatra </title>\n    slice(40514,40522):          <title> all s well that ends well </title>\n    slice(75567,75573):          <title> as you like it </title>\n    slice(107909,107915):        <title> the comedy of errors </title>\n    slice(130779,130785):        <title> the tragedy of coriolanus </title>\n    slice(173424,173427):        <title> cymbeline </title>\n    slice(214962,214969):        <title> a midsummer night s dream </title>\n    slice(239304,239313):        <title> the tragedy of hamlet prince of denmark </title>\n\n    ... And, many more ...\n\n\n**Return the titles of all plays containing the word 'henry'**\n\n    ((\"<title>\"..\"</title>\") < (\"<play>\"..\"</title>\")) > \"henry\"  \n\n    Results:\n    slice(322005,322014):        <title> the second part of henry the fourth </title>\n    slice(361126,361134):        <title> the life of henry the fifth </title>\n    slice(399220,399229):        <title> the first part of henry the sixth </title>\n    slice(431541,431550):        <title> the second part of henry the sixth </title>\n    slice(469240,469249):        <title> the third part of henry the sixth </title>\n    slice(505920,505932):        <title> the famous history of the life of henry the ei...\n\n\n**Return short play titles (4 or few words)**\n**(Note: We have to include the tags in the token count)**\n\n    ((\"<title>\"..\"</title>\") < (\"<play>\"..\"</title>\")) < [6] \n\n    Results:\n    slice(75567,75573):          <title> as you like it </title>\n    slice(107909,107915):        <title> the comedy of errors </title>\n    slice(130779,130785):        <title> the tragedy of coriolanus </title>\n    slice(173424,173427):        <title> cymbeline </title>\n    slice(677133,677138):        <title> measure for measure </title>\n    slice(744759,744765):        <title> the tragedy of macbeth </title>\n    slice(771553,771559):        <title> the merchant of venice </title>\n    slice(802540,802546):        <title> much ado about nothing </title>\n    slice(875994,876000):        <title> pericles prince of tyre </title>\n    slice(1081750,1081754):      <title> the tempest </title>\n    slice(1233968,1233974):      <title> the winter s tale </title>\n\n\n**Return the title of all plays containing the phrase 'to be or not to be'**\n\n    ((\"<title>\"..\"</title>\") < (\"<play>\"..\"</title>\")) < ((\"<play>\"..\"</play>\") > (\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"))\n\n    Results:\n    slice(239304,239313):        <title> the tragedy of hamlet prince of denmark </title>\n\n### Code Examples\n\nSo how do you actually write code that uses or calls *pyra*?\n\nHere's an example implementation of the above queries:\n\n        from pyra import InvertedIndex, GCL\n\n        # See examples/gcl_shell.py for an example describing how to get\n        # a tokenized corpus for Shakespeare\n\n        iindex  = InvertedIndex(tokens)\n        gcl     = GCL(iidx)  \n\n        # Print titles of acts, plays, scenes, etc\n        for myslice in g.parse('\"<title>\"..\"</title>\"'):\n            print(\"%s \\t %s\", (str(myslice), \" \".join(corpus[myslice]))\n\n\n        # Print titles of plays\n        play_titles = g.parse('(\"<title>\"..\"</title>\") < (\"<play>\"..\"</title>\")')\n\n        for myslice in play_titles:\n            print(\"%s \\t %s\", (str(myslice), \" \".join(corpus[myslice]))\n\n        \n        # Return the titles of plays containing the word 'henry'\n        #\n        # Use parameterization to reuse the last expression\n        # (Makes for readable code, and may benefit from results caching\n        # if I ever get around to implementing it)\n\n        for myslice in g.parse('%1 > \"henry\"', play_titles):\n            print(\"%s \\t %s\", (str(myslice), \" \".join(corpus[myslice]))\n      \n\n        # Return the titles of plays, where the plays mention a\n        # 'witch' and 'duncan' \n\n        whole_plays = g.parse(\"<play>..</play>\")\n        for myslice in g.parse('%1 < (%2 > (\"witch\" ^ \"duncan\"))', play_titles, whole_plays):\n            print(\"%s \\t %s\", (str(myslice), \" \".join(corpus[myslice]))\n\n\n### Ply Grammar\n\nThis package uses ply python module to parse the GCL expressions.\nHere is a simplified sketch of the grammar pyra uses:\n\n    gcl_expr :  ( gcl_expr )            |\n                gcl_expr ... gcl_expr   |\n                gcl_expr > gcl_expr     |\n                gcl_expr < gcl_expr     |\n                [ INT ]                 |\n                INT                     |\n                phrase\n\n    phrase : STRING , phrase  |\n             STRING\n\n### References\n\n[1]  Clarke, C. L., Cormack, G. V., & Burkowski, F. J. (1995). An algebra for structured text search\n     and a framework for its implementation. The Computer Journal, 38(1), 43-56. Chicago", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/afourney/pyra", "keywords": null, "license": "Copyright (c) 2014, Adam Fourney\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "maintainer": null, "maintainer_email": null, "name": "pyra", "package_url": "https://pypi.org/project/pyra/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyra/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/afourney/pyra"}, "release_url": "https://pypi.org/project/pyra/0.2.6dev/", "requires_dist": null, "requires_python": null, "summary": "A python implementation of the GCL region algebra and query language described by Clarke et al.", "version": "0.2.6dev", "yanked": false, "html_description": "<div class=\"project-description\">\n            pyra - Python Region Algebra<br>============================<br><br><br>Pyra is a python implementation of the region algebra and query language described in [1]. <br>Region algebras are used to efficiently query semi-structured text documents. This particular<br>region algebra operates on Generalized Concordance Lists (GCLs). GCLs are lists of regions<br>(a.k.a., extents), which obey the following constraint: *No region in the list may have another<br>region from the same lists nested within it*. For a quick online introduction to this region<br>algebra, and why it is useful, visit:<br><br>[Wumpus Search](http://www.wumpus-search.org/docs/gcl.html) <br><br>In general, this region algebra is good for extracting data from documents that have lightweight<br>structure, and is an alternative to more heavyweight solutions like XPath queries.<br><br><br>### Algebra and Query Language<br><br>Our region algebra consists of the following elements:<br><br>(Essentially identical to the conventions used in Wumpus [See above])<br><br>    Elementary Types<br>    \u2014---------------<br>    \"token\"             Tokens are quoted strings. Use \\\" to escape quotes, and \\\\ to escape escapes<br>    \"a\", \"b\", \"c\"       Phrases are comma separated tokens<br>    INT                 Positions are indicated as bare integers (e.g., 4071)<br><br>    Operators (here A and B are arbitrary region algebra expressions, N is an integer)<br>    ----------------------------------------------------------------------------------<br>    A ^ B               Returns all extents that match both A and B<br>    A + B               Returns all extents that match either A or B (or both)<br>    A .. B              Returns all extents that start with A and end with B<br>    A &gt; B               Returns all extents that match A and contain an extent matching B <br>    A &lt; B               Returns all extents that match A, contained in an extent matching B<br><br>    _{A}                The 'start' projection. For each extent (u,v) in A, return (u,u)<br>    {A}_                The 'end' projection. For each extent (u,v) in A, return (v,v)<br><br>    [N]                 Returns all extents of length N, where N is an integer (basically a sliding window)<br><br>    Not yet implemented:<br>    A /&gt; B              Returns all extents that match A but do not contain an extent matching B<br>    A /&lt; B              Returns all extents that match A, not contained in an extent matching B<br><br><br>### Examples<br><br>Suppose we an XML document containing the complete works of Shakespeare (see './pyra/examples').<br>We can then run the following queries using pyra:<br><br>**Return the titles of all plays, acts, scenes, etc.**<br><br>    \"&lt;title&gt;\"..\"&lt;/title&gt;\"         <br><br>    Results:<br>    slice(15,23):               &lt;title&gt; the tragedy of antony and cleopatra &lt;/title&gt;<br>    slice(68,72):               &lt;title&gt; dramatis personae &lt;/title&gt;<br>    slice(279,283):             &lt;title&gt; act i &lt;/title&gt;<br>    slice(284,295):             &lt;title&gt; scene i alexandria a room in cleopatra s palace &lt;/title&gt;<br>    slice(1097,1105):           &lt;title&gt; scene ii the same another room &lt;/title&gt;<br>    slice(3526,3534):           &lt;title&gt; scene iii the same another room &lt;/title&gt;<br>    slice(4889,4898):           &lt;title&gt; scene iv rome octavius caesar s house &lt;/title&gt;<br>    slice(5885,5893):           &lt;title&gt; scene v alexandria cleopatra s palace &lt;/title&gt;<br><br>    ... And, many more ...<br><br> <br>**Return the titles of all plays**<br>**(i.e., the first title found in the play)**<br><br>    (\"&lt;title&gt;\"..\"&lt;/title&gt;\") &lt; (\"&lt;play&gt;\"..\"&lt;/title&gt;\")         <br><br>    Results:<br>    slice(15,23):                &lt;title&gt; the tragedy of antony and cleopatra &lt;/title&gt;<br>    slice(40514,40522):          &lt;title&gt; all s well that ends well &lt;/title&gt;<br>    slice(75567,75573):          &lt;title&gt; as you like it &lt;/title&gt;<br>    slice(107909,107915):        &lt;title&gt; the comedy of errors &lt;/title&gt;<br>    slice(130779,130785):        &lt;title&gt; the tragedy of coriolanus &lt;/title&gt;<br>    slice(173424,173427):        &lt;title&gt; cymbeline &lt;/title&gt;<br>    slice(214962,214969):        &lt;title&gt; a midsummer night s dream &lt;/title&gt;<br>    slice(239304,239313):        &lt;title&gt; the tragedy of hamlet prince of denmark &lt;/title&gt;<br><br>    ... And, many more ...<br><br><br>**Return the titles of all plays containing the word 'henry'**<br><br>    ((\"&lt;title&gt;\"..\"&lt;/title&gt;\") &lt; (\"&lt;play&gt;\"..\"&lt;/title&gt;\")) &gt; \"henry\"  <br><br>    Results:<br>    slice(322005,322014):        &lt;title&gt; the second part of henry the fourth &lt;/title&gt;<br>    slice(361126,361134):        &lt;title&gt; the life of henry the fifth &lt;/title&gt;<br>    slice(399220,399229):        &lt;title&gt; the first part of henry the sixth &lt;/title&gt;<br>    slice(431541,431550):        &lt;title&gt; the second part of henry the sixth &lt;/title&gt;<br>    slice(469240,469249):        &lt;title&gt; the third part of henry the sixth &lt;/title&gt;<br>    slice(505920,505932):        &lt;title&gt; the famous history of the life of henry the ei...<br><br><br>**Return short play titles (4 or few words)**<br>**(Note: We have to include the tags in the token count)**<br><br>    ((\"&lt;title&gt;\"..\"&lt;/title&gt;\") &lt; (\"&lt;play&gt;\"..\"&lt;/title&gt;\")) &lt; [6] <br><br>    Results:<br>    slice(75567,75573):          &lt;title&gt; as you like it &lt;/title&gt;<br>    slice(107909,107915):        &lt;title&gt; the comedy of errors &lt;/title&gt;<br>    slice(130779,130785):        &lt;title&gt; the tragedy of coriolanus &lt;/title&gt;<br>    slice(173424,173427):        &lt;title&gt; cymbeline &lt;/title&gt;<br>    slice(677133,677138):        &lt;title&gt; measure for measure &lt;/title&gt;<br>    slice(744759,744765):        &lt;title&gt; the tragedy of macbeth &lt;/title&gt;<br>    slice(771553,771559):        &lt;title&gt; the merchant of venice &lt;/title&gt;<br>    slice(802540,802546):        &lt;title&gt; much ado about nothing &lt;/title&gt;<br>    slice(875994,876000):        &lt;title&gt; pericles prince of tyre &lt;/title&gt;<br>    slice(1081750,1081754):      &lt;title&gt; the tempest &lt;/title&gt;<br>    slice(1233968,1233974):      &lt;title&gt; the winter s tale &lt;/title&gt;<br><br><br>**Return the title of all plays containing the phrase 'to be or not to be'**<br><br>    ((\"&lt;title&gt;\"..\"&lt;/title&gt;\") &lt; (\"&lt;play&gt;\"..\"&lt;/title&gt;\")) &lt; ((\"&lt;play&gt;\"..\"&lt;/play&gt;\") &gt; (\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"))<br><br>    Results:<br>    slice(239304,239313):        &lt;title&gt; the tragedy of hamlet prince of denmark &lt;/title&gt;<br><br>### Code Examples<br><br>So how do you actually write code that uses or calls *pyra*?<br><br>Here's an example implementation of the above queries:<br><br>        from pyra import InvertedIndex, GCL<br><br>        # See examples/gcl_shell.py for an example describing how to get<br>        # a tokenized corpus for Shakespeare<br><br>        iindex  = InvertedIndex(tokens)<br>        gcl     = GCL(iidx)  <br><br>        # Print titles of acts, plays, scenes, etc<br>        for myslice in g.parse('\"&lt;title&gt;\"..\"&lt;/title&gt;\"'):<br>            print(\"%s \\t %s\", (str(myslice), \" \".join(corpus[myslice]))<br><br><br>        # Print titles of plays<br>        play_titles = g.parse('(\"&lt;title&gt;\"..\"&lt;/title&gt;\") &lt; (\"&lt;play&gt;\"..\"&lt;/title&gt;\")')<br><br>        for myslice in play_titles:<br>            print(\"%s \\t %s\", (str(myslice), \" \".join(corpus[myslice]))<br><br>        <br>        # Return the titles of plays containing the word 'henry'<br>        #<br>        # Use parameterization to reuse the last expression<br>        # (Makes for readable code, and may benefit from results caching<br>        # if I ever get around to implementing it)<br><br>        for myslice in g.parse('%1 &gt; \"henry\"', play_titles):<br>            print(\"%s \\t %s\", (str(myslice), \" \".join(corpus[myslice]))<br>      <br><br>        # Return the titles of plays, where the plays mention a<br>        # 'witch' and 'duncan' <br><br>        whole_plays = g.parse(\"&lt;play&gt;..&lt;/play&gt;\")<br>        for myslice in g.parse('%1 &lt; (%2 &gt; (\"witch\" ^ \"duncan\"))', play_titles, whole_plays):<br>            print(\"%s \\t %s\", (str(myslice), \" \".join(corpus[myslice]))<br><br><br>### Ply Grammar<br><br>This package uses ply python module to parse the GCL expressions.<br>Here is a simplified sketch of the grammar pyra uses:<br><br>    gcl_expr :  ( gcl_expr )            |<br>                gcl_expr ... gcl_expr   |<br>                gcl_expr &gt; gcl_expr     |<br>                gcl_expr &lt; gcl_expr     |<br>                [ INT ]                 |<br>                INT                     |<br>                phrase<br><br>    phrase : STRING , phrase  |<br>             STRING<br><br>### References<br><br>[1]  Clarke, C. L., Cormack, G. V., &amp; Burkowski, F. J. (1995). An algebra for structured text search<br>     and a framework for its implementation. The Computer Journal, 38(1), 43-56. Chicago\n          </div>"}, "last_serial": 1000573, "releases": {"0.2.3dev": [{"comment_text": "", "digests": {"md5": "49667101c5c630bce0eafe0610f3d6a5", "sha256": "9ed0a910eb52354ef3d42e7c67253526701045531823b7aafde7012252315969"}, "downloads": -1, "filename": "pyra-0.2.3dev.tar.gz", "has_sig": false, "md5_digest": "49667101c5c630bce0eafe0610f3d6a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6729, "upload_time": "2014-02-10T04:44:42", "upload_time_iso_8601": "2014-02-10T04:44:42.775192Z", "url": "https://files.pythonhosted.org/packages/e0/57/d4b3248f2e346532c00edb7a95a6f7a7971edfcb6eb4c2525c1a34c520d9/pyra-0.2.3dev.tar.gz", "yanked": false}], "0.2.4dev": [{"comment_text": "", "digests": {"md5": "0dcc46a011ff4556119435360c4700ec", "sha256": "5f41552559d738a4969fbbf9adfe1d391b59fd57e1d0c2e73c4ad5528c288a48"}, "downloads": -1, "filename": "pyra-0.2.4dev.tar.gz", "has_sig": false, "md5_digest": "0dcc46a011ff4556119435360c4700ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9630, "upload_time": "2014-02-12T16:59:44", "upload_time_iso_8601": "2014-02-12T16:59:44.176476Z", "url": "https://files.pythonhosted.org/packages/8b/d7/086ec38f37a41766ea853f6755c6721c166e8081dc525a70454177f26342/pyra-0.2.4dev.tar.gz", "yanked": false}], "0.2.5dev": [{"comment_text": "", "digests": {"md5": "317d1192b10a2fd0768fd7c79bab78da", "sha256": "0635f2f3c3886368a3f81ebaf98e33069201897f6ecc85c1c77c4b8582727a58"}, "downloads": -1, "filename": "pyra-0.2.5dev.tar.gz", "has_sig": false, "md5_digest": "317d1192b10a2fd0768fd7c79bab78da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12010, "upload_time": "2014-02-12T18:31:16", "upload_time_iso_8601": "2014-02-12T18:31:16.317855Z", "url": "https://files.pythonhosted.org/packages/d1/3d/64e53bb10f726b125bfc6715463fe2e4bc2ffc171cef959d7f0c3f5fb8ce/pyra-0.2.5dev.tar.gz", "yanked": false}], "0.2.6dev": [{"comment_text": "", "digests": {"md5": "60928f6a3ae0c419c51a240793e0f2d2", "sha256": "d450ada2bbc85335dff743772c07827a720c083af5543cb584b6983872e0768b"}, "downloads": -1, "filename": "pyra-0.2.6dev.tar.gz", "has_sig": false, "md5_digest": "60928f6a3ae0c419c51a240793e0f2d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14109, "upload_time": "2014-02-15T13:28:32", "upload_time_iso_8601": "2014-02-15T13:28:32.728695Z", "url": "https://files.pythonhosted.org/packages/9b/9a/c2ece74e1c5faaa7f9c5b5a1dc4275e4694ec7554bf3ae07aadc0a53bc5a/pyra-0.2.6dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "60928f6a3ae0c419c51a240793e0f2d2", "sha256": "d450ada2bbc85335dff743772c07827a720c083af5543cb584b6983872e0768b"}, "downloads": -1, "filename": "pyra-0.2.6dev.tar.gz", "has_sig": false, "md5_digest": "60928f6a3ae0c419c51a240793e0f2d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14109, "upload_time": "2014-02-15T13:28:32", "upload_time_iso_8601": "2014-02-15T13:28:32.728695Z", "url": "https://files.pythonhosted.org/packages/9b/9a/c2ece74e1c5faaa7f9c5b5a1dc4275e4694ec7554bf3ae07aadc0a53bc5a/pyra-0.2.6dev.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:37 2020"}