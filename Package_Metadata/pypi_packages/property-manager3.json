{"info": {"author": "Peter Odding", "author_email": "peter@peterodding.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Documentation :: Sphinx", "Topic :: Software Development", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "property-manager3: Useful property variants for Python programming\n==================================================================\n\n.. image:: https://travis-ci.org/xolox/python-property-manager.svg?branch=master\n   :target: https://travis-ci.org/xolox/python-property-manager\n\n.. image:: https://coveralls.io/repos/xolox/python-property-manager/badge.png?branch=master\n   :target: https://coveralls.io/r/xolox/python-property-manager?branch=master\n\nThe `property-manager3` package defines several custom property_ variants for\nPython programming including required properties, writable properties, cached\nproperties, etc. It's currently tested on Python 2.6, 2.7, 3.4, 3.5, 3.6, 3.7, 3.8 and\nPyPy. For usage instructions please refer to the documentation_.\n\n.. contents::\n   :local:\n\nStatus\n------\n\nThe `property-manager3` package came into existence as a submodule of my\nexecutor_ package where I wanted to define classes with a lot of properties\nthat had a default value which was computed on demand but also needed to\nsupport assignment to easily override the default value.\n\nSince I created that module I'd wanted to re-use it in a couple of other\nprojects I was working on, but adding an `executor` dependency just for the\n`property_manager3` submodule felt kind of ugly.\n\nThis is when I decided that it was time for the `property-manager3` package to\nbe created. When I extracted the submodule from `executor` I significantly\nchanged its implementation (making the code more robust and flexible) and\nimproved the tests, documentation and coverage in the process.\n\nInstallation\n------------\n\nThe `property-manager3` package is available on PyPI_ which means installation\nshould be as simple as:\n\n.. code-block:: sh\n\n   $ pip install property-manager3\n\nThere's actually a multitude of ways to install Python packages (e.g. the `per\nuser site-packages directory`_, `virtual environments`_ or just installing\nsystem wide) and I have no intention of getting into that discussion here, so\nif this intimidates you then read up on your options before returning to these\ninstructions ;-).\n\nUsage\n-----\n\nThis section shows how to use the most useful property subclasses. Please refer\nto the documentation_ for more detailed information.\n\n.. contents::\n   :local:\n\nWritable properties\n~~~~~~~~~~~~~~~~~~~\n\nWritable properties with a computed default value are easy to create using the\nwritable_property_ decorator:\n\n.. code-block:: python\n\n   from random import random\n   from property_manager3 import writable_property\n\n   class WritablePropertyDemo(object):\n\n       @writable_property\n       def change_me(self):\n           return random()\n\nFirst let's see how the computed default value behaves:\n\n>>> instance = WritablePropertyDemo()\n>>> print(instance.change_me)\n0.13692489329941815\n>>> print(instance.change_me)\n0.8664002331885933\n\nAs you can see the value is recomputed each time. Now we'll assign it a value:\n\n>>> instance.change_me = 42\n>>> print(instance.change_me)\n42\n\nFrom this point onwards `change_me` will be the number 42_ and it's impossible\nto revert back to the computed value:\n\n>>> delattr(instance, 'change_me')\nTraceback (most recent call last):\n  File \"property_manager3/__init__.py\", line 584, in __delete__\n    raise AttributeError(msg % (obj.__class__.__name__, self.__name__))\nAttributeError: 'WritablePropertyDemo' object attribute 'change_me' is read-only\n\nIf you're looking for a property that supports both assignment and deletion\n(clearing the assigned value) you can use mutable_property_.\n\nRequired properties\n~~~~~~~~~~~~~~~~~~~\n\nThe required_property_ decorator can be used to create required properties:\n\n.. code-block:: python\n\n   from property_manager3 import PropertyManager, required_property\n\n   class RequiredPropertyDemo(PropertyManager):\n\n       @required_property\n       def important(self):\n           \"\"\"A very important attribute.\"\"\"\n\nWhat does it mean for a property to be required? Let's create an instance of\nthe class and find out:\n\n>>> instance = RequiredPropertyDemo()\nTraceback (most recent call last):\n  File \"property_manager3/__init__.py\", line 131, in __init__\n    raise TypeError(\"%s (%s)\" % (msg, concatenate(missing_properties)))\nTypeError: missing 1 required argument (important)\n\nSo the constructor of the class raises an exception when the property hasn't\nbeen given a value. We can give the property a value by providing keyword\narguments to the constructor:\n\n>>> instance = RequiredPropertyDemo(important=42)\n>>> print(instance)\nRequiredPropertyDemo(important=42)\n\nWe can also assign a new value to the property:\n\n>>> instance.important = 13\n>>> print(instance)\nRequiredPropertyDemo(important=13)\n\nCached properties\n~~~~~~~~~~~~~~~~~\n\nTwo kinds of cached properties are supported, we'll show both here:\n\n.. code-block:: python\n\n   from random import random\n   from property_manager3 import cached_property, lazy_property\n\n   class CachedPropertyDemo(object):\n\n       @cached_property\n       def expensive(self):\n           print(\"Calculating expensive property ..\")\n           return random()\n\n       @lazy_property\n       def non_idempotent(self):\n           print(\"Calculating non-idempotent property ..\")\n           return random()\n\nThe properties created by the cached_property_ decorator compute the\nproperty's value on demand and cache the result:\n\n>>> instance = CachedPropertyDemo()\n>>> print(instance.expensive)\nCalculating expensive property ..\n0.763863180683\n>>> print(instance.expensive)\n0.763863180683\n\nThe property's cached value can be invalidated in order to recompute its value:\n\n>>> del instance.expensive\n>>> print(instance.expensive)\nCalculating expensive property ..\n0.396322737214\n>>> print(instance.expensive)\n0.396322737214\n\nNow that you understand cached_property_, explaining lazy_property_ is very\nsimple: It simply doesn't support invalidation of cached values! Here's how\nthat works in practice:\n\n>>> instance.non_idempotent\nCalculating non-idempotent property ..\n0.27632566561900895\n>>> instance.non_idempotent\n0.27632566561900895\n>>> del instance.non_idempotent\nTraceback (most recent call last):\n  File \"property_manager3/__init__.py\", line 499, in __delete__\n    raise AttributeError(msg % (obj.__class__.__name__, self.__name__))\nAttributeError: 'CachedPropertyDemo' object attribute 'non_idempotent' is read-only\n>>> instance.non_idempotent\n0.27632566561900895\n\nProperties based on environment variables\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe constructor of the custom_property_ class (and its subclasses) accepts the\nkeyword argument `environment_variable` which can be provided to get the\nproperty's value from the environment:\n\n.. code-block:: python\n\n   from random import random\n   from property_manager3 import mutable_property\n\n   class EnvironmentPropertyDemo(object):\n\n       @mutable_property(environment_variable='WHATEVER_YOU_WANT')\n       def environment_based(self):\n           return 'some-default-value'\n\nBy default the property's value is computed as expected:\n\n>>> instance = EnvironmentPropertyDemo()\n>>> print(instance.environment_based)\nsome-default-value\n\nWhen the environment variable is set it overrides the computed value:\n\n>>> os.environ['WHATEVER_YOU_WANT'] = '42'\n>>> print(instance.environment_based)\n42\n\nAssigning a value to the property overrides the value from the environment:\n\n>>> instance.environment_based = '13'\n>>> print(instance.environment_based)\n13\n\nDeleting the property clears the assigned value so that the property falls back\nto the environment:\n\n>>> delattr(instance, 'environment_based')\n>>> print(instance.environment_based)\n42\n\nIf we now clear the environment variable as well then the property falls back\nto the computed value:\n\n>>> os.environ.pop('WHATEVER_YOU_WANT')\n'42'\n>>> print(instance.environment_based)\nsome-default-value\n\nSupport for setters and deleters\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAll of the custom property classes support setters and deleters just like\nPython's ``property`` decorator does.\n\nThe `PropertyManager` class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen you define a class that inherits from the PropertyManager_ class the\nfollowing behavior is made available to your class:\n\n- Required properties raise an exception if they're not set.\n\n- The values of writable properties can be set by passing\n  keyword arguments to the constructor of your class.\n\n- The `repr()` of your objects will render the name of the class and the names\n  and values of all properties. Individual properties can easily be excluded\n  from the `repr()` output.\n\n- The `clear_cached_properties()`_ method can be used to invalidate the cached\n  values of all cached properties at once.\n\nAdditionally you can use the property_manager3.sphinx_ module as a Sphinx\nextension to automatically generate boilerplate documentation that provides an\noverview of base classes, properties, public methods and special methods.\n\nSimilar projects\n----------------\n\nThe Python Package Index contains quite a few packages that provide custom\nproperties with similar semantics:\n\n`cached-property <https://pypi.python.org/pypi/cached-property>`_\n My personal favorite until I wrote my own :-). This package provides several\n cached property variants. It supports threading and time based cache\n invalidation which `property-manager3` doesn't support.\n\n`lazy-property <https://pypi.python.org/pypi/lazy-property>`_\n This package provides two cached property variants: a read only property and\n a writable property. Both variants cache computed values indefinitely.\n\n`memoized-property <https://pypi.python.org/pypi/memoized-property>`_\n This package provides a single property variant which simply caches computed\n values indefinitely.\n\n`property-caching <https://pypi.python.org/pypi/property-caching>`_\n This package provides several cached property variants supporting class\n properties, object properties and cache invalidation.\n\n`propertylib <https://pypi.python.org/pypi/propertylib>`_\n This package uses metaclasses to implement an alternative syntax for defining\n computed properties. It defines several property variants with semantics that\n are similar to those defined by the `property-manager3` package.\n\n`rwproperty <https://pypi.python.org/pypi/rwproperty>`_\n This package implements computed, writable properties using an alternative\n syntax to define the properties.\n\nDistinguishing features\n~~~~~~~~~~~~~~~~~~~~~~~\n\nDespite all of the existing Python packages discussed above I decided to create\nand publish the `property-manager3` package because it was fun to get to know\nPython's `descriptor protocol`_ and I had several features in mind I couldn't\nfind anywhere else:\n\n- A superclass that sets writable properties based on constructor arguments.\n\n- A superclass that understands required properties and raises a clear\n  exception if a required property is not properly initialized.\n\n- Clear disambiguation between lazy properties (whose computed value is cached\n  but cannot be invalidated because it would compromise internal state) and\n  cached properties (whose computed value is cached but can be invalidated to\n  compute a fresh value).\n\n- An easy way to quickly invalidate all cached properties of an object.\n\n- An easy way to change the semantics of custom properties, e.g. what if the\n  user wants a writable cached property? With `property-manager3` it is trivial\n  to define new property variants by combining existing semantics:\n\n  .. code-block:: python\n\n     from property_manager3 import cached_property\n\n     class WritableCachedPropertyDemo(object):\n\n         @cached_property(writable=True)\n         def expensive_overridable_attribute(self):\n             \"\"\"Expensive calculations go here.\"\"\"\n\n  The example above creates a new anonymous class and then immediately uses\n  that to decorate the method. We could have given the class a name though:\n\n  .. code-block:: python\n\n     from property_manager3 import cached_property\n\n     writable_cached_property = cached_property(writable=True)\n\n     class WritableCachedPropertyDemo(object):\n\n         @writable_cached_property\n         def expensive_overridable_attribute(self):\n             \"\"\"Expensive calculations go here.\"\"\"\n\n  By giving the new property variant a name it can be reused. We can go one\n  step further and properly document the new property variant:\n\n  .. code-block:: python\n\n     from property_manager3 import cached_property\n\n     class writable_cached_property(cached_property):\n\n         \"\"\"A cached property that supports assignment.\"\"\"\n\n         writable = True\n\n     class WritableCachedPropertyDemo(object):\n\n         @writable_cached_property\n         def expensive_overridable_attribute(self):\n             \"\"\"Expensive calculations go here.\"\"\"\n\n  I've used computed properties for years in Python and over those years I've\n  learned that different Python projects have different requirements from\n  custom property variants. Defining every possible permutation up front is\n  madness, but I think that the flexibility with which the `property-manager3`\n  package enables adaptation gets a long way. This was the one thing that\n  bothered me the most about all of the other Python packages that implement\n  property variants: They are not easily adapted to unanticipated use cases.\n\nContact\n-------\n\nThe latest version of `property-manager3` is available on PyPI_ and GitHub_. The\ndocumentation is hosted on `Read the Docs`_ and includes a changelog_. For bug\nreports please create an issue on GitHub_. If you have questions, suggestions,\netc. feel free to send me an e-mail at `peter@peterodding.com`_.\n\nLicense\n-------\n\nThis software is licensed under the `MIT license`_.\n\n\u00a9 2018 Peter Odding.\n\n\n.. External references:\n.. _42: https://en.wikipedia.org/wiki/42_(number)#The_Hitchhiker.27s_Guide_to_the_Galaxy\n.. _cached_property: https://property-manager.readthedocs.org/en/latest/api.html#property_manager.cached_property\n.. _changelog: https://property-manager.readthedocs.org/en/latest/changelog.html\n.. _clear_cached_properties(): https://property-manager.readthedocs.org/en/latest/api.html#property_manager.PropertyManager.clear_cached_properties\n.. _custom_property: https://property-manager.readthedocs.org/en/latest/api.html#property_manager.custom_property\n.. _descriptor protocol: https://docs.python.org/2/howto/descriptor.html\n.. _documentation: https://property-manager.readthedocs.org\n.. _executor: https://executor.readthedocs.org/en/latest/\n.. _GitHub: https://github.com/martin68/python-property-manager3\n.. _lazy_property: https://property-manager.readthedocs.org/en/latest/api.html#property_manager.lazy_property\n.. _MIT license: http://en.wikipedia.org/wiki/MIT_License\n.. _mutable_property: https://property-manager.readthedocs.org/en/latest/api.html#property_manager.mutable_property\n.. _per user site-packages directory: https://www.python.org/dev/peps/pep-0370/\n.. _peter@peterodding.com: peter@peterodding.com\n.. _property: https://docs.python.org/2/library/functions.html#property\n.. _property_manager3.sphinx: https://property-manager.readthedocs.org/en/latest/api.html#property_manager.sphinx\n.. _PropertyManager: https://property-manager.readthedocs.org/en/latest/api.html#property_manager.PropertyManager\n.. _PyPI: https://pypi.python.org/pypi/property-manager\n.. _Read the Docs: https://property-manager.readthedocs.org\n.. _required_property: https://property-manager.readthedocs.org/en/latest/api.html#property_manager.required_property\n.. _virtual environments: http://docs.python-guide.org/en/latest/dev/virtualenvs/\n.. _writable_property: https://property-manager.readthedocs.org/en/latest/api.html#property_manager.writable_property\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://property-manager.readthedocs.org", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "property-manager3", "package_url": "https://pypi.org/project/property-manager3/", "platform": "", "project_url": "https://pypi.org/project/property-manager3/", "project_urls": {"Homepage": "https://property-manager.readthedocs.org"}, "release_url": "https://pypi.org/project/property-manager3/2.3.1/", "requires_dist": ["humanfriendly (>=4.12)", "verboselogs (>=1.1)"], "requires_python": "", "summary": "Useful property variants for Python programming (required properties, writable properties, cached properties, etc)", "version": "2.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/xolox/python-property-manager\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/xolox/python-property-manager.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae6857cdbdd2e401a6bf7f110ff2663aa7acb6da/68747470733a2f2f7472617669732d63692e6f72672f786f6c6f782f707974686f6e2d70726f70657274792d6d616e616765722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/xolox/python-property-manager?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/xolox/python-property-manager/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c5b303a3717c309d426d5619b5a7493f93055a1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f786f6c6f782f707974686f6e2d70726f70657274792d6d616e616765722f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<p>The <cite>property-manager3</cite> package defines several custom <a href=\"https://docs.python.org/2/library/functions.html#property\" rel=\"nofollow\">property</a> variants for\nPython programming including required properties, writable properties, cached\nproperties, etc. It\u2019s currently tested on Python 2.6, 2.7, 3.4, 3.5, 3.6, 3.7, 3.8 and\nPyPy. For usage instructions please refer to the <a href=\"https://property-manager.readthedocs.org\" rel=\"nofollow\">documentation</a>.</p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#status\" id=\"id5\" rel=\"nofollow\">Status</a></li>\n<li><a href=\"#installation\" id=\"id6\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id7\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#writable-properties\" id=\"id8\" rel=\"nofollow\">Writable properties</a></li>\n<li><a href=\"#required-properties\" id=\"id9\" rel=\"nofollow\">Required properties</a></li>\n<li><a href=\"#cached-properties\" id=\"id10\" rel=\"nofollow\">Cached properties</a></li>\n<li><a href=\"#properties-based-on-environment-variables\" id=\"id11\" rel=\"nofollow\">Properties based on environment variables</a></li>\n<li><a href=\"#support-for-setters-and-deleters\" id=\"id12\" rel=\"nofollow\">Support for setters and deleters</a></li>\n<li><a href=\"#the-propertymanager-class\" id=\"id13\" rel=\"nofollow\">The <cite>PropertyManager</cite> class</a></li>\n</ul>\n</li>\n<li><a href=\"#similar-projects\" id=\"id14\" rel=\"nofollow\">Similar projects</a><ul>\n<li><a href=\"#distinguishing-features\" id=\"id15\" rel=\"nofollow\">Distinguishing features</a></li>\n</ul>\n</li>\n<li><a href=\"#contact\" id=\"id16\" rel=\"nofollow\">Contact</a></li>\n<li><a href=\"#license\" id=\"id17\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"status\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Status</a></h2>\n<p>The <cite>property-manager3</cite> package came into existence as a submodule of my\n<a href=\"https://executor.readthedocs.org/en/latest/\" rel=\"nofollow\">executor</a> package where I wanted to define classes with a lot of properties\nthat had a default value which was computed on demand but also needed to\nsupport assignment to easily override the default value.</p>\n<p>Since I created that module I\u2019d wanted to re-use it in a couple of other\nprojects I was working on, but adding an <cite>executor</cite> dependency just for the\n<cite>property_manager3</cite> submodule felt kind of ugly.</p>\n<p>This is when I decided that it was time for the <cite>property-manager3</cite> package to\nbe created. When I extracted the submodule from <cite>executor</cite> I significantly\nchanged its implementation (making the code more robust and flexible) and\nimproved the tests, documentation and coverage in the process.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Installation</a></h2>\n<p>The <cite>property-manager3</cite> package is available on <a href=\"https://pypi.python.org/pypi/property-manager\" rel=\"nofollow\">PyPI</a> which means installation\nshould be as simple as:</p>\n<pre>$ pip install property-manager3\n</pre>\n<p>There\u2019s actually a multitude of ways to install Python packages (e.g. the <a href=\"https://www.python.org/dev/peps/pep-0370/\" rel=\"nofollow\">per\nuser site-packages directory</a>, <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\" rel=\"nofollow\">virtual environments</a> or just installing\nsystem wide) and I have no intention of getting into that discussion here, so\nif this intimidates you then read up on your options before returning to these\ninstructions ;-).</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Usage</a></h2>\n<p>This section shows how to use the most useful property subclasses. Please refer\nto the <a href=\"https://property-manager.readthedocs.org\" rel=\"nofollow\">documentation</a> for more detailed information.</p>\n<div id=\"id1\">\n<ul>\n<li><a href=\"#writable-properties\" id=\"id18\" rel=\"nofollow\">Writable properties</a></li>\n<li><a href=\"#required-properties\" id=\"id19\" rel=\"nofollow\">Required properties</a></li>\n<li><a href=\"#cached-properties\" id=\"id20\" rel=\"nofollow\">Cached properties</a></li>\n<li><a href=\"#properties-based-on-environment-variables\" id=\"id21\" rel=\"nofollow\">Properties based on environment variables</a></li>\n<li><a href=\"#support-for-setters-and-deleters\" id=\"id22\" rel=\"nofollow\">Support for setters and deleters</a></li>\n<li><a href=\"#the-propertymanager-class\" id=\"id23\" rel=\"nofollow\">The <cite>PropertyManager</cite> class</a></li>\n</ul>\n</div>\n<div id=\"writable-properties\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Writable properties</a></h3>\n<p>Writable properties with a computed default value are easy to create using the\n<a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.writable_property\" rel=\"nofollow\">writable_property</a> decorator:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">property_manager3</span> <span class=\"kn\">import</span> <span class=\"n\">writable_property</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WritablePropertyDemo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@writable_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">change_me</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"p\">()</span>\n</pre>\n<p>First let\u2019s see how the computed default value behaves:</p>\n<pre>&gt;&gt;&gt; instance = WritablePropertyDemo()\n&gt;&gt;&gt; print(instance.change_me)\n0.13692489329941815\n&gt;&gt;&gt; print(instance.change_me)\n0.8664002331885933\n</pre>\n<p>As you can see the value is recomputed each time. Now we\u2019ll assign it a value:</p>\n<pre>&gt;&gt;&gt; instance.change_me = 42\n&gt;&gt;&gt; print(instance.change_me)\n42\n</pre>\n<p>From this point onwards <cite>change_me</cite> will be the number <a href=\"https://en.wikipedia.org/wiki/42_(number)#The_Hitchhiker.27s_Guide_to_the_Galaxy\" rel=\"nofollow\">42</a> and it\u2019s impossible\nto revert back to the computed value:</p>\n<pre>&gt;&gt;&gt; delattr(instance, 'change_me')\nTraceback (most recent call last):\n  File \"property_manager3/__init__.py\", line 584, in __delete__\n    raise AttributeError(msg % (obj.__class__.__name__, self.__name__))\nAttributeError: 'WritablePropertyDemo' object attribute 'change_me' is read-only\n</pre>\n<p>If you\u2019re looking for a property that supports both assignment and deletion\n(clearing the assigned value) you can use <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.mutable_property\" rel=\"nofollow\">mutable_property</a>.</p>\n</div>\n<div id=\"required-properties\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Required properties</a></h3>\n<p>The <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.required_property\" rel=\"nofollow\">required_property</a> decorator can be used to create required properties:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">property_manager3</span> <span class=\"kn\">import</span> <span class=\"n\">PropertyManager</span><span class=\"p\">,</span> <span class=\"n\">required_property</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RequiredPropertyDemo</span><span class=\"p\">(</span><span class=\"n\">PropertyManager</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@required_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">important</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"A very important attribute.\"\"\"</span>\n</pre>\n<p>What does it mean for a property to be required? Let\u2019s create an instance of\nthe class and find out:</p>\n<pre>&gt;&gt;&gt; instance = RequiredPropertyDemo()\nTraceback (most recent call last):\n  File \"property_manager3/__init__.py\", line 131, in __init__\n    raise TypeError(\"%s (%s)\" % (msg, concatenate(missing_properties)))\nTypeError: missing 1 required argument (important)\n</pre>\n<p>So the constructor of the class raises an exception when the property hasn\u2019t\nbeen given a value. We can give the property a value by providing keyword\narguments to the constructor:</p>\n<pre>&gt;&gt;&gt; instance = RequiredPropertyDemo(important=42)\n&gt;&gt;&gt; print(instance)\nRequiredPropertyDemo(important=42)\n</pre>\n<p>We can also assign a new value to the property:</p>\n<pre>&gt;&gt;&gt; instance.important = 13\n&gt;&gt;&gt; print(instance)\nRequiredPropertyDemo(important=13)\n</pre>\n</div>\n<div id=\"cached-properties\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Cached properties</a></h3>\n<p>Two kinds of cached properties are supported, we\u2019ll show both here:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">property_manager3</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span><span class=\"p\">,</span> <span class=\"n\">lazy_property</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CachedPropertyDemo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expensive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Calculating expensive property ..\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@lazy_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">non_idempotent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Calculating non-idempotent property ..\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"p\">()</span>\n</pre>\n<p>The properties created by the <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.cached_property\" rel=\"nofollow\">cached_property</a> decorator compute the\nproperty\u2019s value on demand and cache the result:</p>\n<pre>&gt;&gt;&gt; instance = CachedPropertyDemo()\n&gt;&gt;&gt; print(instance.expensive)\nCalculating expensive property ..\n0.763863180683\n&gt;&gt;&gt; print(instance.expensive)\n0.763863180683\n</pre>\n<p>The property\u2019s cached value can be invalidated in order to recompute its value:</p>\n<pre>&gt;&gt;&gt; del instance.expensive\n&gt;&gt;&gt; print(instance.expensive)\nCalculating expensive property ..\n0.396322737214\n&gt;&gt;&gt; print(instance.expensive)\n0.396322737214\n</pre>\n<p>Now that you understand <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.cached_property\" rel=\"nofollow\">cached_property</a>, explaining <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.lazy_property\" rel=\"nofollow\">lazy_property</a> is very\nsimple: It simply doesn\u2019t support invalidation of cached values! Here\u2019s how\nthat works in practice:</p>\n<pre>&gt;&gt;&gt; instance.non_idempotent\nCalculating non-idempotent property ..\n0.27632566561900895\n&gt;&gt;&gt; instance.non_idempotent\n0.27632566561900895\n&gt;&gt;&gt; del instance.non_idempotent\nTraceback (most recent call last):\n  File \"property_manager3/__init__.py\", line 499, in __delete__\n    raise AttributeError(msg % (obj.__class__.__name__, self.__name__))\nAttributeError: 'CachedPropertyDemo' object attribute 'non_idempotent' is read-only\n&gt;&gt;&gt; instance.non_idempotent\n0.27632566561900895\n</pre>\n</div>\n<div id=\"properties-based-on-environment-variables\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Properties based on environment variables</a></h3>\n<p>The constructor of the <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.custom_property\" rel=\"nofollow\">custom_property</a> class (and its subclasses) accepts the\nkeyword argument <cite>environment_variable</cite> which can be provided to get the\nproperty\u2019s value from the environment:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">property_manager3</span> <span class=\"kn\">import</span> <span class=\"n\">mutable_property</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EnvironmentPropertyDemo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@mutable_property</span><span class=\"p\">(</span><span class=\"n\">environment_variable</span><span class=\"o\">=</span><span class=\"s1\">'WHATEVER_YOU_WANT'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">environment_based</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'some-default-value'</span>\n</pre>\n<p>By default the property\u2019s value is computed as expected:</p>\n<pre>&gt;&gt;&gt; instance = EnvironmentPropertyDemo()\n&gt;&gt;&gt; print(instance.environment_based)\nsome-default-value\n</pre>\n<p>When the environment variable is set it overrides the computed value:</p>\n<pre>&gt;&gt;&gt; os.environ['WHATEVER_YOU_WANT'] = '42'\n&gt;&gt;&gt; print(instance.environment_based)\n42\n</pre>\n<p>Assigning a value to the property overrides the value from the environment:</p>\n<pre>&gt;&gt;&gt; instance.environment_based = '13'\n&gt;&gt;&gt; print(instance.environment_based)\n13\n</pre>\n<p>Deleting the property clears the assigned value so that the property falls back\nto the environment:</p>\n<pre>&gt;&gt;&gt; delattr(instance, 'environment_based')\n&gt;&gt;&gt; print(instance.environment_based)\n42\n</pre>\n<p>If we now clear the environment variable as well then the property falls back\nto the computed value:</p>\n<pre>&gt;&gt;&gt; os.environ.pop('WHATEVER_YOU_WANT')\n'42'\n&gt;&gt;&gt; print(instance.environment_based)\nsome-default-value\n</pre>\n</div>\n<div id=\"support-for-setters-and-deleters\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Support for setters and deleters</a></h3>\n<p>All of the custom property classes support setters and deleters just like\nPython\u2019s <tt>property</tt> decorator does.</p>\n</div>\n<div id=\"the-propertymanager-class\">\n<h3><a href=\"#id23\" rel=\"nofollow\">The <cite>PropertyManager</cite> class</a></h3>\n<p>When you define a class that inherits from the <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.PropertyManager\" rel=\"nofollow\">PropertyManager</a> class the\nfollowing behavior is made available to your class:</p>\n<ul>\n<li>Required properties raise an exception if they\u2019re not set.</li>\n<li>The values of writable properties can be set by passing\nkeyword arguments to the constructor of your class.</li>\n<li>The <cite>repr()</cite> of your objects will render the name of the class and the names\nand values of all properties. Individual properties can easily be excluded\nfrom the <cite>repr()</cite> output.</li>\n<li>The <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.PropertyManager.clear_cached_properties\" rel=\"nofollow\">clear_cached_properties()</a> method can be used to invalidate the cached\nvalues of all cached properties at once.</li>\n</ul>\n<p>Additionally you can use the <a href=\"https://property-manager.readthedocs.org/en/latest/api.html#property_manager.sphinx\" rel=\"nofollow\">property_manager3.sphinx</a> module as a Sphinx\nextension to automatically generate boilerplate documentation that provides an\noverview of base classes, properties, public methods and special methods.</p>\n</div>\n</div>\n<div id=\"similar-projects\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Similar projects</a></h2>\n<p>The Python Package Index contains quite a few packages that provide custom\nproperties with similar semantics:</p>\n<dl>\n<dt><a href=\"https://pypi.python.org/pypi/cached-property\" rel=\"nofollow\">cached-property</a></dt>\n<dd>My personal favorite until I wrote my own :-). This package provides several\ncached property variants. It supports threading and time based cache\ninvalidation which <cite>property-manager3</cite> doesn\u2019t support.</dd>\n<dt><a href=\"https://pypi.python.org/pypi/lazy-property\" rel=\"nofollow\">lazy-property</a></dt>\n<dd>This package provides two cached property variants: a read only property and\na writable property. Both variants cache computed values indefinitely.</dd>\n<dt><a href=\"https://pypi.python.org/pypi/memoized-property\" rel=\"nofollow\">memoized-property</a></dt>\n<dd>This package provides a single property variant which simply caches computed\nvalues indefinitely.</dd>\n<dt><a href=\"https://pypi.python.org/pypi/property-caching\" rel=\"nofollow\">property-caching</a></dt>\n<dd>This package provides several cached property variants supporting class\nproperties, object properties and cache invalidation.</dd>\n<dt><a href=\"https://pypi.python.org/pypi/propertylib\" rel=\"nofollow\">propertylib</a></dt>\n<dd>This package uses metaclasses to implement an alternative syntax for defining\ncomputed properties. It defines several property variants with semantics that\nare similar to those defined by the <cite>property-manager3</cite> package.</dd>\n<dt><a href=\"https://pypi.python.org/pypi/rwproperty\" rel=\"nofollow\">rwproperty</a></dt>\n<dd>This package implements computed, writable properties using an alternative\nsyntax to define the properties.</dd>\n</dl>\n<div id=\"distinguishing-features\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Distinguishing features</a></h3>\n<p>Despite all of the existing Python packages discussed above I decided to create\nand publish the <cite>property-manager3</cite> package because it was fun to get to know\nPython\u2019s <a href=\"https://docs.python.org/2/howto/descriptor.html\" rel=\"nofollow\">descriptor protocol</a> and I had several features in mind I couldn\u2019t\nfind anywhere else:</p>\n<ul>\n<li><p>A superclass that sets writable properties based on constructor arguments.</p>\n</li>\n<li><p>A superclass that understands required properties and raises a clear\nexception if a required property is not properly initialized.</p>\n</li>\n<li><p>Clear disambiguation between lazy properties (whose computed value is cached\nbut cannot be invalidated because it would compromise internal state) and\ncached properties (whose computed value is cached but can be invalidated to\ncompute a fresh value).</p>\n</li>\n<li><p>An easy way to quickly invalidate all cached properties of an object.</p>\n</li>\n<li><p>An easy way to change the semantics of custom properties, e.g. what if the\nuser wants a writable cached property? With <cite>property-manager3</cite> it is trivial\nto define new property variants by combining existing semantics:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">property_manager3</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WritableCachedPropertyDemo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@cached_property</span><span class=\"p\">(</span><span class=\"n\">writable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expensive_overridable_attribute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Expensive calculations go here.\"\"\"</span>\n</pre>\n<p>The example above creates a new anonymous class and then immediately uses\nthat to decorate the method. We could have given the class a name though:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">property_manager3</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n\n<span class=\"n\">writable_cached_property</span> <span class=\"o\">=</span> <span class=\"n\">cached_property</span><span class=\"p\">(</span><span class=\"n\">writable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WritableCachedPropertyDemo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@writable_cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expensive_overridable_attribute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Expensive calculations go here.\"\"\"</span>\n</pre>\n<p>By giving the new property variant a name it can be reused. We can go one\nstep further and properly document the new property variant:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">property_manager3</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">writable_cached_property</span><span class=\"p\">(</span><span class=\"n\">cached_property</span><span class=\"p\">):</span>\n\n    <span class=\"sd\">\"\"\"A cached property that supports assignment.\"\"\"</span>\n\n    <span class=\"n\">writable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WritableCachedPropertyDemo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@writable_cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expensive_overridable_attribute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Expensive calculations go here.\"\"\"</span>\n</pre>\n<p>I\u2019ve used computed properties for years in Python and over those years I\u2019ve\nlearned that different Python projects have different requirements from\ncustom property variants. Defining every possible permutation up front is\nmadness, but I think that the flexibility with which the <cite>property-manager3</cite>\npackage enables adaptation gets a long way. This was the one thing that\nbothered me the most about all of the other Python packages that implement\nproperty variants: They are not easily adapted to unanticipated use cases.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"contact\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Contact</a></h2>\n<p>The latest version of <cite>property-manager3</cite> is available on <a href=\"https://pypi.python.org/pypi/property-manager\" rel=\"nofollow\">PyPI</a> and <a href=\"https://github.com/martin68/python-property-manager3\" rel=\"nofollow\">GitHub</a>. The\ndocumentation is hosted on <a href=\"https://property-manager.readthedocs.org\" rel=\"nofollow\">Read the Docs</a> and includes a <a href=\"https://property-manager.readthedocs.org/en/latest/changelog.html\" rel=\"nofollow\">changelog</a>. For bug\nreports please create an issue on <a href=\"https://github.com/martin68/python-property-manager3\" rel=\"nofollow\">GitHub</a>. If you have questions, suggestions,\netc. feel free to send me an e-mail at <a href=\"mailto:peter%40peterodding.com\">peter<span>@</span>peterodding<span>.</span>com</a>.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id17\" rel=\"nofollow\">License</a></h2>\n<p>This software is licensed under the <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT license</a>.</p>\n<p>\u00a9 2018 Peter Odding.</p>\n</div>\n\n          </div>"}, "last_serial": 6208455, "releases": {"2.3.1": [{"comment_text": "", "digests": {"md5": "e6aa404a4969aaeaf6f89d0abe30689b", "sha256": "206b413003d544e0d0231b04a2f642931814a749fb1f743a92ba7f5367693511"}, "downloads": -1, "filename": "property_manager3-2.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6aa404a4969aaeaf6f89d0abe30689b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23894, "upload_time": "2019-11-27T15:04:15", "upload_time_iso_8601": "2019-11-27T15:04:15.315486Z", "url": "https://files.pythonhosted.org/packages/ad/85/3f7cd11cd102648e26c0531569a424e11bdc16ea633794071b7f91cfacf2/property_manager3-2.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "634d93b5023b29bb567704fbd8af1be2", "sha256": "53b98028a8050ec4b82f42301e573c1045f9f4242f4659ffa5540dbf470f0653"}, "downloads": -1, "filename": "property-manager3-2.3.1.tar.gz", "has_sig": false, "md5_digest": "634d93b5023b29bb567704fbd8af1be2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31587, "upload_time": "2019-11-27T15:04:18", "upload_time_iso_8601": "2019-11-27T15:04:18.320366Z", "url": "https://files.pythonhosted.org/packages/f9/2b/e6ff9b79728e1709fa077a8597f98b8bad179d0c6983faa7507c5bb3a8c0/property-manager3-2.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e6aa404a4969aaeaf6f89d0abe30689b", "sha256": "206b413003d544e0d0231b04a2f642931814a749fb1f743a92ba7f5367693511"}, "downloads": -1, "filename": "property_manager3-2.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6aa404a4969aaeaf6f89d0abe30689b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23894, "upload_time": "2019-11-27T15:04:15", "upload_time_iso_8601": "2019-11-27T15:04:15.315486Z", "url": "https://files.pythonhosted.org/packages/ad/85/3f7cd11cd102648e26c0531569a424e11bdc16ea633794071b7f91cfacf2/property_manager3-2.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "634d93b5023b29bb567704fbd8af1be2", "sha256": "53b98028a8050ec4b82f42301e573c1045f9f4242f4659ffa5540dbf470f0653"}, "downloads": -1, "filename": "property-manager3-2.3.1.tar.gz", "has_sig": false, "md5_digest": "634d93b5023b29bb567704fbd8af1be2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31587, "upload_time": "2019-11-27T15:04:18", "upload_time_iso_8601": "2019-11-27T15:04:18.320366Z", "url": "https://files.pythonhosted.org/packages/f9/2b/e6ff9b79728e1709fa077a8597f98b8bad179d0c6983faa7507c5bb3a8c0/property-manager3-2.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:55 2020"}