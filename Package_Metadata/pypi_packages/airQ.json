{"info": {"author": "Anjan Roy", "author_email": "anjanroy@yandex.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License"], "description": "# airQ v0.3.3\nA near real time Air Quality Indication Data Collection Service _( for India )_, made with :heart:\n\n**Consider putting :star: to show love & support**\n\n_Companion repo located at : [airQ-insight](https://github.com/itzmeanjan/airQ-insight), to power visualization_\n\n## what does it do ?\n- Air quality data collector, collected from **180+** ground monitoring stations _( spread across India )_\n- Unreliable _JSON_ dataset is fetched from [here](https://api.data.gov.in/resource/3b01bcb8-0b14-4abf-b6f2-c1bfd384ba69?api_key=your-api-key&format=json&offset=0&limit=10), which gives current hour's pollutant statistics, from all monitoring station(s), spread across _India_, which are then objectified, cleaned, processed & restructured into proper format and pushed into _*.json_ file\n- Air quality data, given by _minimum_, _maximum_ & _average_ presence of pollutants such as `PM2.5`, `PM10`, `CO`, `NH3`, `SO2`, `OZONE` & `NO2`, along with _timeStamp_, grouped under stations _( from where these were collected )_\n- Automated data collection done using systemd _( hourly )_\n\n## installation\n**airQ** can easily be installed from PyPI using pip.\n```shell script\n$ pip install airQ --user # or may be use pip3\n$ python3 -m pip install airQ --user # if previous one doesn't work\n```\n## usage\nAfter installing **airQ**, run it using following command\n```shell script\n$ cd # currently at $HOME\n$ airQ # improper invokation\nairQ - Air Quality Data Collector\n\n\t$ airQ `sink-file-path_( *.json )_`\n\n For making modifications on airQ-collected data\n ( collected prior to this run ),\n pass that JSON path, while invoking airQ ;)\n\nBad Input\n$ airQ ./data/data.json # proper invokation\n```\n\n## automation\n- Well my plan was to automate this data collection service, so that it'll keep running in hourly fashion, and keep refreshing dataset\n- And for that, I've used `systemd`, which will use a `systemd.timer` to trigger execution of **airQ** every hour i.e. after a delay of _1h_, counted from last execution of **airQ**, periodically\n- For that we'll require to add two files, `*.service` & `*.timer` _( placed in `./systemd/` )_\n\n### airQ.service\nWell our service isn't supposed to run always, only when timer trigger asks it to run, it'll run. So in `[Unit]` section, it's declared it _Wants_, `airQ.timer`\n```\n[Unit]\nDescription=Air Quality Data collection service\nWants=airQ.timer\n```\nYou need to set absolute path of current working directory in `WorkingDirectory` field of `[Service]` unit declaration\n\n`ExecStart` is the command, to be executed when this service unit is invoked by `airQ.timer`, so absolute installation path of **airQ** and absolute sink path _( *.json )_ is required\n\nMake sure you update `User` field, to reflect changes properly, as per your system.\n\nIf you just add a `Restart` field under `[Service]` unit & give it a value `always`, we can make this script running always, which is helpful for running Servers, but we'll trigger execution of script using `systemd.timer`, pretty much like `cron`, but much more used & supported in almost all linux based distros\n```\n[Service]\nUser=anjan\nWorkingDirectory=/absolute-path-to-current-working-directory/\nExecStart=/absolute-path-to-airQ /home/user/data/data.json\n```\nThis declaration, makes this service a required dependency for `multi-user.target`\n```\n[Install]\nWantedBy=multi-user.target\n```\n### airQ.timer\nPretty much same as `airQ.service`, only _Requires_, `airQ.service` as one strong dependency, because that's the service which is to be run when this timer expires\n```\n[Unit]\nDescription=Air Quality Data collection service\nRequires=airQ.service\n```\n_Unit_ field specifies which service file to execute when timer expires.\nYou can simply skip this field, if you have created a `./systemd/*.service` file of same name as `./systemd/*.timer`\n\nAs we're interested in running this service every **1h** _( relative to last execution of airQ.service )_, we've specified `OnUnitActiveSec` field to be `1h`\n```\n[Timer]\nUnit=airQ.service\nOnUnitActiveSec=1h\n```\nMakes it an dependency of `timers.target`, so that this timer can be installed\n```\n[Install]\nWantedBy=timers.target\n```\n### automation in ACTION\nNeed to place files present `./systemd/*` into `/etc/systemd/system/`, so that `systemd` can find these service & timer easily.\n```bash\n$ sudo cp ./systemd/* /etc/systemd/system/\n```\nWe need to reload `systemd` _daemon_, to let it explore newly added service & timer unit(s).\n```bash\n$ sudo systemctl daemon-reload\n```\nLets enable our timer, which will ensure our timer will keep running even after system reboot\n```bash\n$ sudo systemctl enable airQ.timer\n```\nTime to start this timer\n```bash\n$ sudo systemctl start airQ.timer\n```\nSo an immediate execution of our script to be done, and after completion of so, it'll again be executed _1h_ later, so that we get refreshed dataset.\n\nCheck status of this timer\n```bash\n$ sudo systemctl status airQ.timer\n```\nCheck status of this service\n```bash\n$ sudo systemctl status airQ.service\n```\nConsider running your instance of `airQ` on Cloud, mine running on `AWS LightSail`\n## visualization\nThis service is supposed to only collect data & properly structure it, but visualization part is done at _[airQ-insight](https://github.com/itzmeanjan/airQ-insight)_\n\n**Hoping it helps** :wink:\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/itzmeanjan/airQ", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "airQ", "package_url": "https://pypi.org/project/airQ/", "platform": "", "project_url": "https://pypi.org/project/airQ/", "project_urls": {"Homepage": "https://github.com/itzmeanjan/airQ"}, "release_url": "https://pypi.org/project/airQ/0.3.3/", "requires_dist": ["flit ; extra == \"dev\""], "requires_python": ">=3.7", "summary": "airQ - Air Quality monitoring data ( for India ) collection system, written in Python3.", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>airQ v0.3.3</h1>\n<p>A near real time Air Quality Indication Data Collection Service <em>( for India )</em>, made with :heart:</p>\n<p><strong>Consider putting :star: to show love &amp; support</strong></p>\n<p><em>Companion repo located at : <a href=\"https://github.com/itzmeanjan/airQ-insight\" rel=\"nofollow\">airQ-insight</a>, to power visualization</em></p>\n<h2>what does it do ?</h2>\n<ul>\n<li>Air quality data collector, collected from <strong>180+</strong> ground monitoring stations <em>( spread across India )</em></li>\n<li>Unreliable <em>JSON</em> dataset is fetched from <a href=\"https://api.data.gov.in/resource/3b01bcb8-0b14-4abf-b6f2-c1bfd384ba69?api_key=your-api-key&amp;format=json&amp;offset=0&amp;limit=10\" rel=\"nofollow\">here</a>, which gives current hour's pollutant statistics, from all monitoring station(s), spread across <em>India</em>, which are then objectified, cleaned, processed &amp; restructured into proper format and pushed into <em>*.json</em> file</li>\n<li>Air quality data, given by <em>minimum</em>, <em>maximum</em> &amp; <em>average</em> presence of pollutants such as <code>PM2.5</code>, <code>PM10</code>, <code>CO</code>, <code>NH3</code>, <code>SO2</code>, <code>OZONE</code> &amp; <code>NO2</code>, along with <em>timeStamp</em>, grouped under stations <em>( from where these were collected )</em></li>\n<li>Automated data collection done using systemd <em>( hourly )</em></li>\n</ul>\n<h2>installation</h2>\n<p><strong>airQ</strong> can easily be installed from PyPI using pip.</p>\n<pre>$ pip install airQ --user <span class=\"c1\"># or may be use pip3</span>\n$ python3 -m pip install airQ --user <span class=\"c1\"># if previous one doesn't work</span>\n</pre>\n<h2>usage</h2>\n<p>After installing <strong>airQ</strong>, run it using following command</p>\n<pre>$ <span class=\"nb\">cd</span> <span class=\"c1\"># currently at $HOME</span>\n$ airQ <span class=\"c1\"># improper invokation</span>\nairQ - Air Quality Data Collector\n\n\t$ airQ <span class=\"sb\">`</span>sink-file-path_<span class=\"o\">(</span> *.json <span class=\"o\">)</span>_<span class=\"sb\">`</span>\n\n For making modifications on airQ-collected data\n <span class=\"o\">(</span> collected prior to this run <span class=\"o\">)</span>,\n pass that JSON path, <span class=\"k\">while</span> invoking airQ <span class=\"p\">;</span><span class=\"o\">)</span>\n\nBad Input\n$ airQ ./data/data.json <span class=\"c1\"># proper invokation</span>\n</pre>\n<h2>automation</h2>\n<ul>\n<li>Well my plan was to automate this data collection service, so that it'll keep running in hourly fashion, and keep refreshing dataset</li>\n<li>And for that, I've used <code>systemd</code>, which will use a <code>systemd.timer</code> to trigger execution of <strong>airQ</strong> every hour i.e. after a delay of <em>1h</em>, counted from last execution of <strong>airQ</strong>, periodically</li>\n<li>For that we'll require to add two files, <code>*.service</code> &amp; <code>*.timer</code> <em>( placed in <code>./systemd/</code> )</em></li>\n</ul>\n<h3>airQ.service</h3>\n<p>Well our service isn't supposed to run always, only when timer trigger asks it to run, it'll run. So in <code>[Unit]</code> section, it's declared it <em>Wants</em>, <code>airQ.timer</code></p>\n<pre><code>[Unit]\nDescription=Air Quality Data collection service\nWants=airQ.timer\n</code></pre>\n<p>You need to set absolute path of current working directory in <code>WorkingDirectory</code> field of <code>[Service]</code> unit declaration</p>\n<p><code>ExecStart</code> is the command, to be executed when this service unit is invoked by <code>airQ.timer</code>, so absolute installation path of <strong>airQ</strong> and absolute sink path <em>( *.json )</em> is required</p>\n<p>Make sure you update <code>User</code> field, to reflect changes properly, as per your system.</p>\n<p>If you just add a <code>Restart</code> field under <code>[Service]</code> unit &amp; give it a value <code>always</code>, we can make this script running always, which is helpful for running Servers, but we'll trigger execution of script using <code>systemd.timer</code>, pretty much like <code>cron</code>, but much more used &amp; supported in almost all linux based distros</p>\n<pre><code>[Service]\nUser=anjan\nWorkingDirectory=/absolute-path-to-current-working-directory/\nExecStart=/absolute-path-to-airQ /home/user/data/data.json\n</code></pre>\n<p>This declaration, makes this service a required dependency for <code>multi-user.target</code></p>\n<pre><code>[Install]\nWantedBy=multi-user.target\n</code></pre>\n<h3>airQ.timer</h3>\n<p>Pretty much same as <code>airQ.service</code>, only <em>Requires</em>, <code>airQ.service</code> as one strong dependency, because that's the service which is to be run when this timer expires</p>\n<pre><code>[Unit]\nDescription=Air Quality Data collection service\nRequires=airQ.service\n</code></pre>\n<p><em>Unit</em> field specifies which service file to execute when timer expires.\nYou can simply skip this field, if you have created a <code>./systemd/*.service</code> file of same name as <code>./systemd/*.timer</code></p>\n<p>As we're interested in running this service every <strong>1h</strong> <em>( relative to last execution of airQ.service )</em>, we've specified <code>OnUnitActiveSec</code> field to be <code>1h</code></p>\n<pre><code>[Timer]\nUnit=airQ.service\nOnUnitActiveSec=1h\n</code></pre>\n<p>Makes it an dependency of <code>timers.target</code>, so that this timer can be installed</p>\n<pre><code>[Install]\nWantedBy=timers.target\n</code></pre>\n<h3>automation in ACTION</h3>\n<p>Need to place files present <code>./systemd/*</code> into <code>/etc/systemd/system/</code>, so that <code>systemd</code> can find these service &amp; timer easily.</p>\n<pre>$ sudo cp ./systemd/* /etc/systemd/system/\n</pre>\n<p>We need to reload <code>systemd</code> <em>daemon</em>, to let it explore newly added service &amp; timer unit(s).</p>\n<pre>$ sudo systemctl daemon-reload\n</pre>\n<p>Lets enable our timer, which will ensure our timer will keep running even after system reboot</p>\n<pre>$ sudo systemctl <span class=\"nb\">enable</span> airQ.timer\n</pre>\n<p>Time to start this timer</p>\n<pre>$ sudo systemctl start airQ.timer\n</pre>\n<p>So an immediate execution of our script to be done, and after completion of so, it'll again be executed <em>1h</em> later, so that we get refreshed dataset.</p>\n<p>Check status of this timer</p>\n<pre>$ sudo systemctl status airQ.timer\n</pre>\n<p>Check status of this service</p>\n<pre>$ sudo systemctl status airQ.service\n</pre>\n<p>Consider running your instance of <code>airQ</code> on Cloud, mine running on <code>AWS LightSail</code></p>\n<h2>visualization</h2>\n<p>This service is supposed to only collect data &amp; properly structure it, but visualization part is done at <em><a href=\"https://github.com/itzmeanjan/airQ-insight\" rel=\"nofollow\">airQ-insight</a></em></p>\n<p><strong>Hoping it helps</strong> :wink:</p>\n\n          </div>"}, "last_serial": 6282982, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "c2da734ac2979722dab0cdf2f274ba5b", "sha256": "f3291a8051d99424450bb4afdd495d71ebb1d0418b89359a939a06c1570f2c2e"}, "downloads": -1, "filename": "airQ-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c2da734ac2979722dab0cdf2f274ba5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 13781, "upload_time": "2019-12-06T06:34:55", "upload_time_iso_8601": "2019-12-06T06:34:55.673619Z", "url": "https://files.pythonhosted.org/packages/13/6b/26ae1f3d984dd354fe7e1d062a69fff13a5fe17e36209050a8b177d92449/airQ-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e18794a94aa26b6cf5515693b6254f3", "sha256": "f0202349277ea7c6a09e7938af30dd7959ce039a729a1d87715bb9c04c922854"}, "downloads": -1, "filename": "airQ-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5e18794a94aa26b6cf5515693b6254f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7029, "upload_time": "2019-12-06T06:35:00", "upload_time_iso_8601": "2019-12-06T06:35:00.179759Z", "url": "https://files.pythonhosted.org/packages/cb/f7/1a1b6fb41dce5efe8273e9203c8d7c4c96d371df4034eaeffebc59758ba5/airQ-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1cfdbd2ecadf5b9e21511da756e5c973", "sha256": "77c42638fb4da696fb1b8a12398bd1a4104d7849ef2234b40fc515b1e0358da1"}, "downloads": -1, "filename": "airQ-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1cfdbd2ecadf5b9e21511da756e5c973", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 16040, "upload_time": "2019-12-06T06:41:12", "upload_time_iso_8601": "2019-12-06T06:41:12.111126Z", "url": "https://files.pythonhosted.org/packages/07/dc/2d3818b536a084cfb21ff9d8f4edabaab0e796da1cb05203c2a4f8add695/airQ-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cf544ee38c36c2ba205bd1f06e8702a", "sha256": "f620c92a00d460b1071e45f0c0810335790b21b9a19c113a7a3cec9f75f01b93"}, "downloads": -1, "filename": "airQ-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4cf544ee38c36c2ba205bd1f06e8702a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7074, "upload_time": "2019-12-06T06:41:15", "upload_time_iso_8601": "2019-12-06T06:41:15.652889Z", "url": "https://files.pythonhosted.org/packages/d4/49/910b9b819265b26703d421b86ea8125b406085f7ecebd1b83fda2db702f8/airQ-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0e1d1b5cefa081b44b46f98eceac4772", "sha256": "b9c33d97366243193c70c56648a91c2e723bab464778ebf098fa9019b5077074"}, "downloads": -1, "filename": "airQ-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0e1d1b5cefa081b44b46f98eceac4772", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 21198, "upload_time": "2019-12-07T13:06:55", "upload_time_iso_8601": "2019-12-07T13:06:55.916123Z", "url": "https://files.pythonhosted.org/packages/72/14/550d7f4a45a9def0f50b92a03b701014d76ec52d6a952b145710b4dbcd00/airQ-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfccd68b29bff8a7262ccb53659ed613", "sha256": "040e3a4c9a2bbf88ae6ec5ad3833cbabc52dfb30093bf199b9f7737e1200948f"}, "downloads": -1, "filename": "airQ-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bfccd68b29bff8a7262ccb53659ed613", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8644, "upload_time": "2019-12-07T13:07:03", "upload_time_iso_8601": "2019-12-07T13:07:03.023629Z", "url": "https://files.pythonhosted.org/packages/5b/94/f2a8419fd3ef092db11c0888134044265e2716b76b5113b285bcfab7d446/airQ-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "27f9ff25d73320c3a5479515c90840af", "sha256": "22d90164ec040f8437090feed02047503dd5863c163b794e02752632305095b4"}, "downloads": -1, "filename": "airQ-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "27f9ff25d73320c3a5479515c90840af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12572, "upload_time": "2019-12-09T13:41:49", "upload_time_iso_8601": "2019-12-09T13:41:49.947767Z", "url": "https://files.pythonhosted.org/packages/45/9d/4e83a87065a08f09e3dcc721a7792acb4bc498a79278e823dff58fe907fb/airQ-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e71f574dac13479b7e039579b0c76643", "sha256": "bca7b999417d72cb781d00fa3a97f4113195fdc5c28574fc1171750ea391375c"}, "downloads": -1, "filename": "airQ-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e71f574dac13479b7e039579b0c76643", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9747, "upload_time": "2019-12-09T13:41:53", "upload_time_iso_8601": "2019-12-09T13:41:53.220873Z", "url": "https://files.pythonhosted.org/packages/23/e8/bb739f91f05ef14e6b2b474492fe64dc5e07f55ba4556d8c552f46d7ad1e/airQ-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2a85aef69991b7d945cf8de1d74ccc42", "sha256": "378503a49d2358c371a15f3cca867c0220cdc319bc63563eea0b20f775af73d8"}, "downloads": -1, "filename": "airQ-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2a85aef69991b7d945cf8de1d74ccc42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12650, "upload_time": "2019-12-11T03:40:31", "upload_time_iso_8601": "2019-12-11T03:40:31.007310Z", "url": "https://files.pythonhosted.org/packages/37/9b/24b9abf98e8106141f26eb60ae80a27c99a7cfd078cd0881e23c5500e8c0/airQ-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f91e4ae162bd7d91af25346275e9d589", "sha256": "0c645fe835fcf528b7c29f2a9c4a6ddc443a5676790ea8265f0e0726550ff7e1"}, "downloads": -1, "filename": "airQ-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f91e4ae162bd7d91af25346275e9d589", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9837, "upload_time": "2019-12-11T03:40:35", "upload_time_iso_8601": "2019-12-11T03:40:35.499386Z", "url": "https://files.pythonhosted.org/packages/40/24/40a9ab468ee9a2d06d9ed128ec7b0bfc2bf360eb60f9d05f7affe140548b/airQ-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "188bbf9ff91414c2583ea7c8bf9340eb", "sha256": "0cd01aa2426858cb1e3eb16142c76f61f5a372bb4544c2c2161a3e7df38efcd7"}, "downloads": -1, "filename": "airQ-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "188bbf9ff91414c2583ea7c8bf9340eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12725, "upload_time": "2019-12-12T03:57:40", "upload_time_iso_8601": "2019-12-12T03:57:40.864234Z", "url": "https://files.pythonhosted.org/packages/49/41/df4bb036f2f0b1ec1784d4c77d0503ad29fcc44942b507bb0a70282d33bb/airQ-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bebe7565896f49f268d1727061b90cec", "sha256": "9e501018e004ed1647254798cd374293872eeaf521a092b76376422ad79ef579"}, "downloads": -1, "filename": "airQ-0.3.2.tar.gz", "has_sig": false, "md5_digest": "bebe7565896f49f268d1727061b90cec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9892, "upload_time": "2019-12-12T03:57:45", "upload_time_iso_8601": "2019-12-12T03:57:45.058210Z", "url": "https://files.pythonhosted.org/packages/5f/27/35bd2a4aa7bee1004cd96f3428fec3a0538ab854978c64a8b5e969348956/airQ-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "6987c0a0fc58be5643bf949dbc0b5609", "sha256": "b1dadfcd8f37154132ffd49ad0fddb5eb4bbfc89041fe13ee7ca059c4f83b940"}, "downloads": -1, "filename": "airQ-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6987c0a0fc58be5643bf949dbc0b5609", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12726, "upload_time": "2019-12-12T07:42:33", "upload_time_iso_8601": "2019-12-12T07:42:33.011146Z", "url": "https://files.pythonhosted.org/packages/d2/fc/24e7a03c334ecb8821e3fd4b3c9c1eb7abb2a6ec3a0ebd7fbf9855559203/airQ-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e0dc42667029f336f84c7fb3ca1b4fd", "sha256": "86227a43ef81c19507123f22d2a3da91161a75552281437381bb5448ba9cc7e8"}, "downloads": -1, "filename": "airQ-0.3.3.tar.gz", "has_sig": false, "md5_digest": "1e0dc42667029f336f84c7fb3ca1b4fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9882, "upload_time": "2019-12-12T07:42:37", "upload_time_iso_8601": "2019-12-12T07:42:37.608873Z", "url": "https://files.pythonhosted.org/packages/5a/86/91d05531a212f458616adf1b35d50cba4040e8fda5a8ca1b68300f5ebc4f/airQ-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6987c0a0fc58be5643bf949dbc0b5609", "sha256": "b1dadfcd8f37154132ffd49ad0fddb5eb4bbfc89041fe13ee7ca059c4f83b940"}, "downloads": -1, "filename": "airQ-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6987c0a0fc58be5643bf949dbc0b5609", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12726, "upload_time": "2019-12-12T07:42:33", "upload_time_iso_8601": "2019-12-12T07:42:33.011146Z", "url": "https://files.pythonhosted.org/packages/d2/fc/24e7a03c334ecb8821e3fd4b3c9c1eb7abb2a6ec3a0ebd7fbf9855559203/airQ-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e0dc42667029f336f84c7fb3ca1b4fd", "sha256": "86227a43ef81c19507123f22d2a3da91161a75552281437381bb5448ba9cc7e8"}, "downloads": -1, "filename": "airQ-0.3.3.tar.gz", "has_sig": false, "md5_digest": "1e0dc42667029f336f84c7fb3ca1b4fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9882, "upload_time": "2019-12-12T07:42:37", "upload_time_iso_8601": "2019-12-12T07:42:37.608873Z", "url": "https://files.pythonhosted.org/packages/5a/86/91d05531a212f458616adf1b35d50cba4040e8fda5a8ca1b68300f5ebc4f/airQ-0.3.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:27 2020"}