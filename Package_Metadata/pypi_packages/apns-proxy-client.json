{"info": {"author": "Takashi Nishibayashi", "author_email": "takashi_nishibayashi@voyagegroup.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "APNs Proxy Python Client\n========================\n\nClient program of `APNs Proxy\nServer <https://github.com/voyagegroup/apns-proxy-server>`__\n\n|Build Status|\n\nInstallation\n------------\n\n::\n\n    pip install apns-proxy-client\n\nHow to Use\n----------\n\n.. code:: python\n\n    from apns_proxy_client import APNSProxyClient\n\n    client = APNSProxyClient(host=\"localhost\", port=5556, application_id=\"myapp\")\n    with client:\n        # send \"Hello\" alerts to many tokens\n        for token in many_tokens:\n            client.send(token, 'Hello', badge=1)\n\n        # get disabled device tokens from feedback service\n        feedback = client.get_feedback()\n\nOR use ``connect()`` and ``close()`` instead of ``with``\n\n.. code:: python\n\n    from apns_proxy_client import APNSProxyClient\n\n    client = APNSProxyClient(host=\"localhost\", port=5556, application_id=\"myapp\")\n    client.connect()\n    # send \"Hello\" alerts to many tokens\n    for token in many_tokens:\n        client.send(token, 'Hello')\n\n    # get disabled device tokens from feedback service\n    feedback = client.get_feedback()\n    client.close()\n\nSet host and port for your server running on. application\\_id is\nspecified in settings.py on apns-proxy-server.\n\nsend() method synopsis\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    token = \"YOUR_VALID_DEVICE_TOKEN\"\n\n    client = APNSProxyClient(host=\"localhost\", port=5556, application_id=\"myapp\")\n    with client:\n        # Simple\n        client.send(token, 'Hello')\n\n        # Custom sound (default = 'default')\n        client.send(token, 'Alert with custom sound', sound='custom')\n\n        # Message without sound\n        client.send(token, 'I am silent', sound=None)\n\n        # Badge\n        client.send(token, 'Alert with badge', badge=2)\n\n        # Change badge silently\n        client.send(token, None, sound=None, badge=9999)\n\n        # Set expiry (default = 1hour)\n        four_hours_later = int(time.time()) + (60 * 60 * 4)\n        client.send(token, 'I am long life', expiry=four_hours_later)\n\n        # Set priority (default = 10)\n        client.send(token, 'I am low priority', priority=5)\n\n        # For background fetch\n        client.send(token, None, sound=None, content_available=True)\n\n        # With custom field.\n        client.send(token, 'With custom field', custom={\n            'foo': True,\n            'bar': [200, 300],\n            'boo': \"Hello\"\n        })\n        # Finally following payload will send to APNs\n        # {\n        #     \"aps\": {\n        #         \"alert\": \"With custom field\",\n        #         \"sound\": \"default\",\n        #      },\n        #      \"foo\": True,\n        #      \"bar\": [200, 300],\n        #      \"boo\": \"Hello\"\n        #}\n\n        # Use JSON Payload\n        client.send(token, {\n            'body': 'This is JSON alert',\n            'action_loc_key': None,\n            'loc_key': 'loc key',\n            'loc_args': ['one', 'two'],\n            'launch_image': 'aa.png'\n        })\n\n        # All\n        client.send(token, 'Many opts', sound='foo', badge=2, content_available=True,\n                    custom={\"bar\": \"boo\"}, expiry=four_hour_later, priority=5)\n\n        # Test. APNsProxyServer don't send to APNs\n        client.send(token, 'This message never send to device', test=True)\n\nParameters of send method\n\n+----------------------+---------------------------+------------+---------------------------------+\n| Name                 | Type                      | Required   | Default Value (Set on server)   |\n+======================+===========================+============+=================================+\n| token                | string                    | yes        | -                               |\n+----------------------+---------------------------+------------+---------------------------------+\n| alert                | string, unicode or dict   | yes        | -                               |\n+----------------------+---------------------------+------------+---------------------------------+\n| sound                | string                    | no         | 'default'                       |\n+----------------------+---------------------------+------------+---------------------------------+\n| badge                | number                    | no         | None                            |\n+----------------------+---------------------------+------------+---------------------------------+\n| content\\_available   | bool                      | no         | False                           |\n+----------------------+---------------------------+------------+---------------------------------+\n| custom               | dict                      | no         | None                            |\n+----------------------+---------------------------+------------+---------------------------------+\n| expiry               | date                      | no         | 1 hour                          |\n+----------------------+---------------------------+------------+---------------------------------+\n| priority             | number                    | no         | 10                              |\n+----------------------+---------------------------+------------+---------------------------------+\n| test                 | bool                      | no         | False                           |\n+----------------------+---------------------------+------------+---------------------------------+\n\nget\\_feedback() method synopsis\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis client library provides a way to get disabled device tokens from\nAPNs feedback service; just call ``get_feedback()`` without any\nparameters.\n\n``get_feedback()`` returns the dict that is a pair of \"device\\_token\"\nand \"timestamp\".\n\n+-----------------+----------+---------------------------------------------------------------------------------------------------------------------------------------+\n| Name            | Type     | Description                                                                                                                           |\n+=================+==========+=======================================================================================================================================+\n| device\\_token   | string   | The device token string which cannot be received push notifications                                                                   |\n+-----------------+----------+---------------------------------------------------------------------------------------------------------------------------------------+\n| timestamp       | float    | The seconds since 00:00 on January 1, 1970 UTC. This value means a timestamp which APNs judged the device token should be disabled.   |\n+-----------------+----------+---------------------------------------------------------------------------------------------------------------------------------------+\n\n.. code:: python\n\n    client = APNSProxyClient(host=\"localhost\", port=5556, application_id=\"myapp\")\n    with client:\n        feedback = client.get_feedback()\n        # a value of feedback likes the following dict:\n        #   {\n        #       \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\": 1399442843.0,  # device_token : unix timestamp\n        #       \"abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789\": 1399442892.0,\n        #   }\n\nFor contributor\n---------------\n\nMakefile provides some useful commands.\n\n+--------------+---------------------------+\n| Command      | Description               |\n+==============+===========================+\n| make setup   | Setup work directory      |\n+--------------+---------------------------+\n| make lint    | Code check using flake8   |\n+--------------+---------------------------+\n| make test    | Run tests                 |\n+--------------+---------------------------+\n\nLicense\n-------\n\nBSD\n\n.. |Build Status| image:: https://travis-ci.org/voyagegroup/apns-proxy-client-py.png?branch=master\n   :target: https://travis-ci.org/voyagegroup/apns-proxy-client-py", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/voyagegroup/apns-proxy-client-py", "keywords": "apns", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "apns-proxy-client", "package_url": "https://pypi.org/project/apns-proxy-client/", "platform": "any", "project_url": "https://pypi.org/project/apns-proxy-client/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/voyagegroup/apns-proxy-client-py"}, "release_url": "https://pypi.org/project/apns-proxy-client/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Client library for APNs Proxy Server.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Client program of <a href=\"https://github.com/voyagegroup/apns-proxy-server\" rel=\"nofollow\">APNs Proxy\nServer</a></p>\n<p><a href=\"https://travis-ci.org/voyagegroup/apns-proxy-client-py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/03ac61e8240ce015a989651b36bbd6b2a6ea475a/68747470733a2f2f7472617669732d63692e6f72672f766f7961676567726f75702f61706e732d70726f78792d636c69656e742d70792e706e673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install apns-proxy-client\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">apns_proxy_client</span> <span class=\"kn\">import</span> <span class=\"n\">APNSProxyClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">APNSProxyClient</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5556</span><span class=\"p\">,</span> <span class=\"n\">application_id</span><span class=\"o\">=</span><span class=\"s2\">\"myapp\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"c1\"># send \"Hello\" alerts to many tokens</span>\n    <span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">many_tokens</span><span class=\"p\">:</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'Hello'</span><span class=\"p\">,</span> <span class=\"n\">badge</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get disabled device tokens from feedback service</span>\n    <span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_feedback</span><span class=\"p\">()</span>\n</pre>\n<p>OR use <tt>connect()</tt> and <tt>close()</tt> instead of <tt>with</tt></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">apns_proxy_client</span> <span class=\"kn\">import</span> <span class=\"n\">APNSProxyClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">APNSProxyClient</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5556</span><span class=\"p\">,</span> <span class=\"n\">application_id</span><span class=\"o\">=</span><span class=\"s2\">\"myapp\"</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"c1\"># send \"Hello\" alerts to many tokens</span>\n<span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">many_tokens</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'Hello'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get disabled device tokens from feedback service</span>\n<span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_feedback</span><span class=\"p\">()</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Set host and port for your server running on. application_id is\nspecified in settings.py on apns-proxy-server.</p>\n<div id=\"send-method-synopsis\">\n<h3>send() method synopsis</h3>\n<pre><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"s2\">\"YOUR_VALID_DEVICE_TOKEN\"</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">APNSProxyClient</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5556</span><span class=\"p\">,</span> <span class=\"n\">application_id</span><span class=\"o\">=</span><span class=\"s2\">\"myapp\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Simple</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'Hello'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Custom sound (default = 'default')</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'Alert with custom sound'</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"s1\">'custom'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Message without sound</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'I am silent'</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Badge</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'Alert with badge'</span><span class=\"p\">,</span> <span class=\"n\">badge</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Change badge silently</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">badge</span><span class=\"o\">=</span><span class=\"mi\">9999</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Set expiry (default = 1hour)</span>\n    <span class=\"n\">four_hours_later</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'I am long life'</span><span class=\"p\">,</span> <span class=\"n\">expiry</span><span class=\"o\">=</span><span class=\"n\">four_hours_later</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Set priority (default = 10)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'I am low priority'</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># For background fetch</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">content_available</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># With custom field.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'With custom field'</span><span class=\"p\">,</span> <span class=\"n\">custom</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span>\n        <span class=\"s1\">'boo'</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello\"</span>\n    <span class=\"p\">})</span>\n    <span class=\"c1\"># Finally following payload will send to APNs</span>\n    <span class=\"c1\"># {</span>\n    <span class=\"c1\">#     \"aps\": {</span>\n    <span class=\"c1\">#         \"alert\": \"With custom field\",</span>\n    <span class=\"c1\">#         \"sound\": \"default\",</span>\n    <span class=\"c1\">#      },</span>\n    <span class=\"c1\">#      \"foo\": True,</span>\n    <span class=\"c1\">#      \"bar\": [200, 300],</span>\n    <span class=\"c1\">#      \"boo\": \"Hello\"</span>\n    <span class=\"c1\">#}</span>\n\n    <span class=\"c1\"># Use JSON Payload</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"s1\">'This is JSON alert'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'action_loc_key'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">'loc_key'</span><span class=\"p\">:</span> <span class=\"s1\">'loc key'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'loc_args'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"s1\">'two'</span><span class=\"p\">],</span>\n        <span class=\"s1\">'launch_image'</span><span class=\"p\">:</span> <span class=\"s1\">'aa.png'</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># All</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'Many opts'</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">badge</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">content_available</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">custom</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"s2\">\"boo\"</span><span class=\"p\">},</span> <span class=\"n\">expiry</span><span class=\"o\">=</span><span class=\"n\">four_hour_later</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Test. APNsProxyServer don't send to APNs</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s1\">'This message never send to device'</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters of send method</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Name</th>\n<th>Type</th>\n<th>Required</th>\n<th>Default Value (Set on server)</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>token</td>\n<td>string</td>\n<td>yes</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n<tr><td>alert</td>\n<td>string, unicode or dict</td>\n<td>yes</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n<tr><td>sound</td>\n<td>string</td>\n<td>no</td>\n<td>\u2018default\u2019</td>\n</tr>\n<tr><td>badge</td>\n<td>number</td>\n<td>no</td>\n<td>None</td>\n</tr>\n<tr><td>content_available</td>\n<td>bool</td>\n<td>no</td>\n<td>False</td>\n</tr>\n<tr><td>custom</td>\n<td>dict</td>\n<td>no</td>\n<td>None</td>\n</tr>\n<tr><td>expiry</td>\n<td>date</td>\n<td>no</td>\n<td>1 hour</td>\n</tr>\n<tr><td>priority</td>\n<td>number</td>\n<td>no</td>\n<td>10</td>\n</tr>\n<tr><td>test</td>\n<td>bool</td>\n<td>no</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"get-feedback-method-synopsis\">\n<h3>get_feedback() method synopsis</h3>\n<p>This client library provides a way to get disabled device tokens from\nAPNs feedback service; just call <tt>get_feedback()</tt> without any\nparameters.</p>\n<p><tt>get_feedback()</tt> returns the dict that is a pair of \u201cdevice_token\u201d\nand \u201ctimestamp\u201d.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>device_token</td>\n<td>string</td>\n<td>The device token string which cannot be received push notifications</td>\n</tr>\n<tr><td>timestamp</td>\n<td>float</td>\n<td>The seconds since 00:00 on January 1, 1970 UTC. This value means a timestamp which APNs judged the device token should be disabled.</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">APNSProxyClient</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5556</span><span class=\"p\">,</span> <span class=\"n\">application_id</span><span class=\"o\">=</span><span class=\"s2\">\"myapp\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_feedback</span><span class=\"p\">()</span>\n    <span class=\"c1\"># a value of feedback likes the following dict:</span>\n    <span class=\"c1\">#   {</span>\n    <span class=\"c1\">#       \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\": 1399442843.0,  # device_token : unix timestamp</span>\n    <span class=\"c1\">#       \"abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789\": 1399442892.0,</span>\n    <span class=\"c1\">#   }</span>\n</pre>\n</div>\n</div>\n<div id=\"for-contributor\">\n<h2>For contributor</h2>\n<p>Makefile provides some useful commands.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>make setup</td>\n<td>Setup work directory</td>\n</tr>\n<tr><td>make lint</td>\n<td>Code check using flake8</td>\n</tr>\n<tr><td>make test</td>\n<td>Run tests</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>BSD</p>\n</div>\n\n          </div>"}, "last_serial": 1089542, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8c91241268a45702a8defa2266af24e9", "sha256": "d2056b7ae8789f8a95072960c41fa0d13d8c14c77c7bed3198ee09e2584b5309"}, "downloads": -1, "filename": "apns-proxy-client-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8c91241268a45702a8defa2266af24e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6360, "upload_time": "2014-05-12T14:13:39", "upload_time_iso_8601": "2014-05-12T14:13:39.831859Z", "url": "https://files.pythonhosted.org/packages/4e/39/c762362f082629bba9e50445c04e71cf38f76f49e61cc3b11067309b8a33/apns-proxy-client-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c91241268a45702a8defa2266af24e9", "sha256": "d2056b7ae8789f8a95072960c41fa0d13d8c14c77c7bed3198ee09e2584b5309"}, "downloads": -1, "filename": "apns-proxy-client-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8c91241268a45702a8defa2266af24e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6360, "upload_time": "2014-05-12T14:13:39", "upload_time_iso_8601": "2014-05-12T14:13:39.831859Z", "url": "https://files.pythonhosted.org/packages/4e/39/c762362f082629bba9e50445c04e71cf38f76f49e61cc3b11067309b8a33/apns-proxy-client-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:42 2020"}