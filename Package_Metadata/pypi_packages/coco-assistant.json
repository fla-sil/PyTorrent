{"info": {"author": "Ashwin Nair", "author_email": "ash1995@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# COCO-Assistant \n\n![CircleCI](https://circleci.com/gh/ashnair1/COCO-Assistant/tree/master.svg?style=shield&circle-token=553c83e37198fe02a71743d42ee427c292336743) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/5299d18c95da4991b4f3a6ae6e8a0b7a)](https://www.codacy.com/manual/ashnair1/COCO-Assistant?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ashnair1/COCO-Assistant&amp;utm_campaign=Badge_Grade) [![PyPI version](https://badge.fury.io/py/coco-assistant.svg)](https://badge.fury.io/py/coco-assistant) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nHelper for dealing with MS-COCO annotations.\n\n## Overview\nThe MS COCO annotation format along with the pycocotools library is quite popular among the computer vision community. Yet I for one found it difficult to play around with the annotations. Deleting a specific category, combining multiple mini datasets to generate a larger dataset, viewing distribution of classes in the annotation file are things I would like to do without writing a separate script for each. The COCO Assistant is designed (or being designed) to assist with this problem. **Please note that currently, the Assistant can only help out with object detection datasets**. Any contributions and/or suggestions are welcome.\n\n### Requirements\nYour data directory should look as follows:\n\n```markdown\nExample:\n.\n\u251c\u2500\u2500 images\n\u2502   \u251c\u2500\u2500 train\n\u2502   \u251c\u2500\u2500 val\n|   \u251c\u2500\u2500 test\n|   \n\u251c\u2500\u2500 annotations\n\u2502   \u251c\u2500\u2500 train.json\n\u2502   \u251c\u2500\u2500 val.json\n\u2502   \u251c\u2500\u2500 test.json\n\n``` \n\n## Installation\n\n### 1. Installation: pip </br>\n\n`pip install coco-assistant`\n\n### 2. Installation: From Source\n```markdown\n# Clone the repository\ngit clone https://github.com/ashnair1/COCO-Assistant.git\n# Build and install the library\nmake\n```\n\n## Usage\n\nUsage is similar to how you would use `pycocotools`\n\n```markdown\nfrom coco_assistant import COCO_Assistant\n\n# Specify image and annotation directories\nimg_dir = os.path.join(os.getcwd(), 'images')\nann_dir = os.path.join(os.getcwd(), 'annotations')\n\n# Create COCO_Assistant object\ncas = COCO_Assistant(img_dir, ann_dir)\n```\n## Package features\n\n### 1. Merge datasets\n\nThe `merge` function allows you to merge multiple datasets.\n\n```markdown\nIn[1]: cas = COCO_Assistant(img_dir, ann_dir)                                                                                                                                                              \nloading annotations into memory...\nDone (t=0.09s)\ncreating index...\nindex created!\nloading annotations into memory...\nDone (t=0.06s)\ncreating index...\nindex created!\n\nIn[2]: cas.merge(merge_images=True)                                                                                                                                                                                       \nMerging image dirs\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00<00:00, 18.33it/s]\nMerging annotations\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00<00:00, 14.72it/s]\n\n```\nThe merged dataset (images and annotation) can be found in `./results/combination`\n\n### 2. Remove categories\n\nRemoves a specific category from an annotation file.\n\n```markdown\nIn[1]: cas = COCO_Assistant(img_dir, ann_dir)                                                                                                                                                              \nloading annotations into memory...\nDone (t=0.09s)\ncreating index...\nindex created!\nloading annotations into memory...\nDone (t=0.06s)\ncreating index...\nindex created!\n\n# In interactive mode\nIn[2]: cas.remove_cat(interactive=True)\n['tiny.json', 'tiny2.json']\nWho needs a cat removal?\ntiny.json\n\nCategories present:\n['building', 'vehicles']\n\nEnter categories you wish to remove as a list:\n['building']\nRemoving specified categories...\n\n# In non-interactive mode\nIn[3]: cas.remove_cat(interactive=False, jc=\"tiny.json\", rcats=['building'])\nRemoving specified categories...\n```\nThe modified annotation can be found in `./results/removal`\n\n### 3. Generate annotation statistics\n\n1.  Generate countplot of instances per category that occur in the annotation files. \n `cas.ann_stats(stat=\"area\",arearng=[10,144,512,1e5],save=False)`\n\n2.  Generate pie-chart that shows distribution of objects according to their size (as specified in areaRng). \n `cas.ann_stats(stat=\"cat\", show_count=False, save=False)`\n\n### 4. Visualise annotations\n\nCouldn't `pycocotools` visualise annotations (via [showAnns](https://github.com/cocodataset/cocoapi/blob/636becdc73d54283b3aac6d4ec363cffbb6f9b20/PythonAPI/pycocotools/coco.py#L233)) as well? Sure it could, but I required a way to freely view all the annotations of a particular dataset so here we are.\n\n```markdown\nIn[1]: cas.visualise()\nChoose directory:\n['tiny', 'tiny2']\ntiny\n```\n\n![](./.github/visualiser.gif)\n\n### 5. Generate segmentation masks\nThe `cas.get_segmasks()` function allows you to create segmentation masks from your MS COCO object detection datasets. Similar to the Pascal VOC dataset, the mask values are their classes and a colour palette is applied to enable visualisation. The generated masks are stored in the `./results` folder. Samples are shown below.\n\n|                |                            Detection                                             |                                               Segmentation                                       |   \n|----------------|----------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|\n| **SpaceNet**   | <img src=\"./.github/SpaceNet.png\" alt=\"SpaceNet\" title=\"SpaceNet\" width=310 />   |   <img src=\"./.github/SpaceNet_mask.png\" alt=\"SpaceNet_mask\" title=\"SpaceNet_mask\" width=310 />  |\n| **iSAID**      | <img src=\"./.github/iSAID.png\" alt=\"iSAID\" title=\"iSAID\" width=310 />            |   <img src=\"./.github/iSAID_mask.png\" alt=\"iSAID_mask\" title=\"iSAID_mask\" width=310 />           |\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ashnair1/COCO-Assistant/archive/v0.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ashnair1/COCO-Assistant", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "coco-assistant", "package_url": "https://pypi.org/project/coco-assistant/", "platform": "", "project_url": "https://pypi.org/project/coco-assistant/", "project_urls": {"Download": "https://github.com/ashnair1/COCO-Assistant/archive/v0.1.0.tar.gz", "Homepage": "https://github.com/ashnair1/COCO-Assistant"}, "release_url": "https://pypi.org/project/coco-assistant/0.3.0/", "requires_dist": ["Cython", "matplotlib", "numpy", "pandas", "Pillow (>=6.2.2)", "pycocotools", "seaborn", "scikit-image", "tqdm", "setuptools (==40.6.3)", "wheel (==0.32.3)", "requests"], "requires_python": ">=3.6.0", "summary": "Helper for dealing with MS-COCO annotations", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>COCO-Assistant</h1>\n<p><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18eb55eeb8bec1900c9653e24b634de6ed501e41/68747470733a2f2f636972636c6563692e636f6d2f67682f6173686e616972312f434f434f2d417373697374616e742f747265652f6d61737465722e7376673f7374796c653d736869656c6426636972636c652d746f6b656e3d35353363383365333731393866653032613731373433643432656534323763323932333336373433\"> <a href=\"https://www.codacy.com/manual/ashnair1/COCO-Assistant?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ashnair1/COCO-Assistant&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac78b40c4eae6abd1c8afa3a807a93d17a8e366f/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3532393964313863393564613439393162346633613661653665386130623761\"></a> <a href=\"https://badge.fury.io/py/coco-assistant\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/302c21af1b33d7ce3842517fa456ec63770cc814/68747470733a2f2f62616467652e667572792e696f2f70792f636f636f2d617373697374616e742e737667\"></a> <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>Helper for dealing with MS-COCO annotations.</p>\n<h2>Overview</h2>\n<p>The MS COCO annotation format along with the pycocotools library is quite popular among the computer vision community. Yet I for one found it difficult to play around with the annotations. Deleting a specific category, combining multiple mini datasets to generate a larger dataset, viewing distribution of classes in the annotation file are things I would like to do without writing a separate script for each. The COCO Assistant is designed (or being designed) to assist with this problem. <strong>Please note that currently, the Assistant can only help out with object detection datasets</strong>. Any contributions and/or suggestions are welcome.</p>\n<h3>Requirements</h3>\n<p>Your data directory should look as follows:</p>\n<pre>Example:\n.\n\u251c\u2500\u2500 images\n\u2502   \u251c\u2500\u2500 train\n\u2502   \u251c\u2500\u2500 val\n|   \u251c\u2500\u2500 test\n|   \n\u251c\u2500\u2500 annotations\n\u2502   \u251c\u2500\u2500 train.json\n\u2502   \u251c\u2500\u2500 val.json\n\u2502   \u251c\u2500\u2500 test.json\n</pre>\n<h2>Installation</h2>\n<h3>1. Installation: pip <br></h3>\n<p><code>pip install coco-assistant</code></p>\n<h3>2. Installation: From Source</h3>\n<pre># Clone the repository\ngit clone https://github.com/ashnair1/COCO-Assistant.git\n# Build and install the library\nmake\n</pre>\n<h2>Usage</h2>\n<p>Usage is similar to how you would use <code>pycocotools</code></p>\n<pre>from coco_assistant import COCO_Assistant\n\n# Specify image and annotation directories\nimg_dir = os.path.join(os.getcwd(), 'images')\nann_dir = os.path.join(os.getcwd(), 'annotations')\n\n# Create COCO_Assistant object\ncas = COCO_Assistant(img_dir, ann_dir)\n</pre>\n<h2>Package features</h2>\n<h3>1. Merge datasets</h3>\n<p>The <code>merge</code> function allows you to merge multiple datasets.</p>\n<pre>In[1]: cas = COCO_Assistant(img_dir, ann_dir)                                                                                                                                                              \nloading annotations into memory...\nDone (t=0.09s)\ncreating index...\nindex created!\nloading annotations into memory...\nDone (t=0.06s)\ncreating index...\nindex created!\n\nIn[2]: cas.merge(merge_images=True)                                                                                                                                                                                       \nMerging image dirs\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00, 18.33it/s]\nMerging annotations\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00, 14.72it/s]\n</pre>\n<p>The merged dataset (images and annotation) can be found in <code>./results/combination</code></p>\n<h3>2. Remove categories</h3>\n<p>Removes a specific category from an annotation file.</p>\n<pre>In[1]: cas = COCO_Assistant(img_dir, ann_dir)                                                                                                                                                              \nloading annotations into memory...\nDone (t=0.09s)\ncreating index...\nindex created!\nloading annotations into memory...\nDone (t=0.06s)\ncreating index...\nindex created!\n\n# In interactive mode\nIn[2]: cas.remove_cat(interactive=True)\n['tiny.json', 'tiny2.json']\nWho needs a cat removal?\ntiny.json\n\nCategories present:\n['building', 'vehicles']\n\nEnter categories you wish to remove as a list:\n['building']\nRemoving specified categories...\n\n# In non-interactive mode\nIn[3]: cas.remove_cat(interactive=False, jc=\"tiny.json\", rcats=['building'])\nRemoving specified categories...\n</pre>\n<p>The modified annotation can be found in <code>./results/removal</code></p>\n<h3>3. Generate annotation statistics</h3>\n<ol>\n<li>\n<p>Generate countplot of instances per category that occur in the annotation files.\n<code>cas.ann_stats(stat=\"area\",arearng=[10,144,512,1e5],save=False)</code></p>\n</li>\n<li>\n<p>Generate pie-chart that shows distribution of objects according to their size (as specified in areaRng).\n<code>cas.ann_stats(stat=\"cat\", show_count=False, save=False)</code></p>\n</li>\n</ol>\n<h3>4. Visualise annotations</h3>\n<p>Couldn't <code>pycocotools</code> visualise annotations (via <a href=\"https://github.com/cocodataset/cocoapi/blob/636becdc73d54283b3aac6d4ec363cffbb6f9b20/PythonAPI/pycocotools/coco.py#L233\" rel=\"nofollow\">showAnns</a>) as well? Sure it could, but I required a way to freely view all the annotations of a particular dataset so here we are.</p>\n<pre>In[1]: cas.visualise()\nChoose directory:\n['tiny', 'tiny2']\ntiny\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f39670fd48a5ba591c625829f4bdefa0bda5172/2e2f2e6769746875622f76697375616c697365722e676966\"></p>\n<h3>5. Generate segmentation masks</h3>\n<p>The <code>cas.get_segmasks()</code> function allows you to create segmentation masks from your MS COCO object detection datasets. Similar to the Pascal VOC dataset, the mask values are their classes and a colour palette is applied to enable visualisation. The generated masks are stored in the <code>./results</code> folder. Samples are shown below.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Detection</th>\n<th>Segmentation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>SpaceNet</strong></td>\n<td><img alt=\"SpaceNet\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/823e0222fc779b57ca31e450dd74876b40473fcb/2e2f2e6769746875622f53706163654e65742e706e67\" width=\"310\"></td>\n<td><img alt=\"SpaceNet_mask\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddfb265c1af2991f306d86cff8df2aa45d868b78/2e2f2e6769746875622f53706163654e65745f6d61736b2e706e67\" width=\"310\"></td>\n</tr>\n<tr>\n<td><strong>iSAID</strong></td>\n<td><img alt=\"iSAID\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1350454dfe9ad8a60718310acf29f4d3af1de686/2e2f2e6769746875622f69534149442e706e67\" width=\"310\"></td>\n<td><img alt=\"iSAID_mask\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd36a47139b2207c876e52e52d29df61aab20990/2e2f2e6769746875622f69534149445f6d61736b2e706e67\" width=\"310\"></td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 7055516, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0cd85568d9f3393449f46a8637894e63", "sha256": "e8a12cfa7c4d7f9d98f4fe9b3916ced483d60556cc8644d29930fc5d7a59670a"}, "downloads": -1, "filename": "coco_assistant-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0cd85568d9f3393449f46a8637894e63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 30760, "upload_time": "2019-10-08T17:47:11", "upload_time_iso_8601": "2019-10-08T17:47:11.933467Z", "url": "https://files.pythonhosted.org/packages/3d/80/ae2465c686d117eeb85b03166cc6a4dcf13a05193f53a83c8cc54d9760f9/coco_assistant-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "562cefc5655b1f1eb88b9b85a718d3ed", "sha256": "0fcb6132f1f5b8cc63d775df87c4d34b0643cb36be3143b3aa4e459f2a12a8d9"}, "downloads": -1, "filename": "coco_assistant-0.1.0.tar.gz", "has_sig": false, "md5_digest": "562cefc5655b1f1eb88b9b85a718d3ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4003763, "upload_time": "2019-10-08T17:47:21", "upload_time_iso_8601": "2019-10-08T17:47:21.478780Z", "url": "https://files.pythonhosted.org/packages/a2/1d/7fcd84448a60af6c9561ec0a004d6344c5356bbdd52cf07b6dc3865c76c1/coco_assistant-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0425cacad8cb0c4e2ae778a92c5c45df", "sha256": "0df10d36d6fce9b1ea11feba2b10123ee1b4fd1ab4c14fe78947ad31b7784e25"}, "downloads": -1, "filename": "coco_assistant-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0425cacad8cb0c4e2ae778a92c5c45df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 47311, "upload_time": "2019-11-28T07:37:00", "upload_time_iso_8601": "2019-11-28T07:37:00.113823Z", "url": "https://files.pythonhosted.org/packages/ac/fa/af9cf203167f8396f28942e568453f78b27dd0f2f8ff6075f8c73c275a36/coco_assistant-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05e1904eacff35bcf125d963e338a275", "sha256": "396f7b76c022e4118f3ca63fe7b35dfc7e8fb15e4a082ebe423422e49e38613d"}, "downloads": -1, "filename": "coco_assistant-0.2.0.tar.gz", "has_sig": false, "md5_digest": "05e1904eacff35bcf125d963e338a275", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5683771, "upload_time": "2019-11-28T07:37:03", "upload_time_iso_8601": "2019-11-28T07:37:03.951720Z", "url": "https://files.pythonhosted.org/packages/6e/1e/d568c2f911bf184f50f34371ffbfbf9aff8ee10c2302532646c1e5931b6e/coco_assistant-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8158ead5c4d013446134f5e541f2db65", "sha256": "e930bf7598f24cdc1afda9105491f678725b651f5ac9e679a2d3df8090f30efc"}, "downloads": -1, "filename": "coco_assistant-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8158ead5c4d013446134f5e541f2db65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 54607, "upload_time": "2020-04-19T19:40:32", "upload_time_iso_8601": "2020-04-19T19:40:32.935253Z", "url": "https://files.pythonhosted.org/packages/69/ee/58f1169e6ed91ed968a50cd9e570d7c829a70a96bf2a2c2600c45778c620/coco_assistant-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d079fef1a748ca7bd2bc6757630e7fd0", "sha256": "20e681d3e0fd9af6e0a0e87ef8660c27786000af36560e3e094167afcfe66f5d"}, "downloads": -1, "filename": "coco_assistant-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d079fef1a748ca7bd2bc6757630e7fd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 40510, "upload_time": "2020-04-19T19:40:34", "upload_time_iso_8601": "2020-04-19T19:40:34.554521Z", "url": "https://files.pythonhosted.org/packages/7a/db/449e491fae8a24d24ec3197978b85fb5a9e5ca080b2c9882f18ca5d7707b/coco_assistant-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8158ead5c4d013446134f5e541f2db65", "sha256": "e930bf7598f24cdc1afda9105491f678725b651f5ac9e679a2d3df8090f30efc"}, "downloads": -1, "filename": "coco_assistant-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8158ead5c4d013446134f5e541f2db65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 54607, "upload_time": "2020-04-19T19:40:32", "upload_time_iso_8601": "2020-04-19T19:40:32.935253Z", "url": "https://files.pythonhosted.org/packages/69/ee/58f1169e6ed91ed968a50cd9e570d7c829a70a96bf2a2c2600c45778c620/coco_assistant-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d079fef1a748ca7bd2bc6757630e7fd0", "sha256": "20e681d3e0fd9af6e0a0e87ef8660c27786000af36560e3e094167afcfe66f5d"}, "downloads": -1, "filename": "coco_assistant-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d079fef1a748ca7bd2bc6757630e7fd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 40510, "upload_time": "2020-04-19T19:40:34", "upload_time_iso_8601": "2020-04-19T19:40:34.554521Z", "url": "https://files.pythonhosted.org/packages/7a/db/449e491fae8a24d24ec3197978b85fb5a9e5ca080b2c9882f18ca5d7707b/coco_assistant-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:20 2020"}