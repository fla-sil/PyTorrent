{"info": {"author": "_john", "author_email": "trungduc1992@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Purpose\n\n**Make it easy to create, to trace, to debug, and to recreate models/algorithms.**\n\nWhat does that means:\n- Incorporation of common components (res-block, seblock,...) that can easily be used and constructed (which is good for model creations and modifications).\n- Data processing in functional form, which allows clear knowledge of what happens to the data before it is fed to the algorithms/models.\n- A tool to view and debug:\n    + view model statistics\n    + tinkering with the data and see what happens at the result (top-k result)\n- Inference must be constructed inside the model, with the input is the most basic data point (thinking of a complete stranger who needs to use your model, that person will not know anything about the nit-picks of your models and your data, they only have a data point and want to see the result coming out of your model)\n\n# Requirements\n\nDawnet requires `pytorch` and `opencv` to work properly. Since many distributions exist for these libraries, we recommend user to install themselves to avoid messing up the environment. If you don't have `pytorch` or `opencv` installed, then you go to https://pytorch.org to install appropriate version, and `conda install -c conda-forge opencv` to install `opencv`.\n\n\n# Roadmap to usability\n\n- Session must work\n- Ability to get batch of data\n- Summarize session and model information\n- Implement mixup\n- Test all convs architecture\n\n\n# Model\n\n- A model should have the evaluate method ready (this part should be abstracted away from the progress / training procedure)\n- A model should have the load method ready (only for inference, because continual training requires knowledge about optimizer, training iteration)\n\n\n# Data\n\nModel is not the only part in creating intelligent system. Data plays a vital role in this process too. A lot of time, playing around with data, seeing how the model behaves when data is tweak a little bit can provide crucial insights for model improvement. Hence, data manipulation must be made easy to use.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johntd54/dawnet", "keywords": "dawnet deep learning inquire artificial intelligence", "license": "GNU General Public License (GPL)", "maintainer": "", "maintainer_email": "", "name": "Dawnet", "package_url": "https://pypi.org/project/Dawnet/", "platform": "", "project_url": "https://pypi.org/project/Dawnet/", "project_urls": {"Homepage": "https://github.com/johntd54/dawnet"}, "release_url": "https://pypi.org/project/Dawnet/0.0.2/", "requires_dist": ["numpy (>=1.14.0)", "Pillow (>=5.3.0)", "matplotlib (>=2.1.2)"], "requires_python": ">=3.5", "summary": "A deep learning package to inquire intelligence", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Purpose</h1>\n<p><strong>Make it easy to create, to trace, to debug, and to recreate models/algorithms.</strong></p>\n<p>What does that means:</p>\n<ul>\n<li>Incorporation of common components (res-block, seblock,...) that can easily be used and constructed (which is good for model creations and modifications).</li>\n<li>Data processing in functional form, which allows clear knowledge of what happens to the data before it is fed to the algorithms/models.</li>\n<li>A tool to view and debug:\n<ul>\n<li>view model statistics</li>\n<li>tinkering with the data and see what happens at the result (top-k result)</li>\n</ul>\n</li>\n<li>Inference must be constructed inside the model, with the input is the most basic data point (thinking of a complete stranger who needs to use your model, that person will not know anything about the nit-picks of your models and your data, they only have a data point and want to see the result coming out of your model)</li>\n</ul>\n<h1>Requirements</h1>\n<p>Dawnet requires <code>pytorch</code> and <code>opencv</code> to work properly. Since many distributions exist for these libraries, we recommend user to install themselves to avoid messing up the environment. If you don't have <code>pytorch</code> or <code>opencv</code> installed, then you go to <a href=\"https://pytorch.org\" rel=\"nofollow\">https://pytorch.org</a> to install appropriate version, and <code>conda install -c conda-forge opencv</code> to install <code>opencv</code>.</p>\n<h1>Roadmap to usability</h1>\n<ul>\n<li>Session must work</li>\n<li>Ability to get batch of data</li>\n<li>Summarize session and model information</li>\n<li>Implement mixup</li>\n<li>Test all convs architecture</li>\n</ul>\n<h1>Model</h1>\n<ul>\n<li>A model should have the evaluate method ready (this part should be abstracted away from the progress / training procedure)</li>\n<li>A model should have the load method ready (only for inference, because continual training requires knowledge about optimizer, training iteration)</li>\n</ul>\n<h1>Data</h1>\n<p>Model is not the only part in creating intelligent system. Data plays a vital role in this process too. A lot of time, playing around with data, seeing how the model behaves when data is tweak a little bit can provide crucial insights for model improvement. Hence, data manipulation must be made easy to use.</p>\n\n          </div>"}, "last_serial": 4498695, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d1df8a5e525625d6c3df56a2d2dd3f0d", "sha256": "6d3211c1cb5f3782dc0e4070a65451ad1584a916e772038ad8f1c8e9c92acd10"}, "downloads": -1, "filename": "Dawnet-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d1df8a5e525625d6c3df56a2d2dd3f0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12262, "upload_time": "2018-10-24T18:05:02", "upload_time_iso_8601": "2018-10-24T18:05:02.051935Z", "url": "https://files.pythonhosted.org/packages/21/fe/0104d535494e383f53172c6d93ba98165205bbeafda2f8a1e79df1f8fabf/Dawnet-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "959a11fd8d25335735b12cea0d697ee7", "sha256": "b23298c025f592d1718146b439212a0754a830fca8a2cf4f8c138c148bf62a6f"}, "downloads": -1, "filename": "Dawnet-0.0.1.tar.gz", "has_sig": false, "md5_digest": "959a11fd8d25335735b12cea0d697ee7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9945, "upload_time": "2018-10-24T18:05:03", "upload_time_iso_8601": "2018-10-24T18:05:03.497339Z", "url": "https://files.pythonhosted.org/packages/62/55/6e5819e5477c3e607bb8adaaef3fe7f662fd8ef92f4520e149b18ac25317/Dawnet-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b18190b83a0e27a8c8de475ac1fed934", "sha256": "36cba7c467694afad4a6988bb99c7fccc294a4619bcd994b2292f88581ad8bdc"}, "downloads": -1, "filename": "Dawnet-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b18190b83a0e27a8c8de475ac1fed934", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 22103, "upload_time": "2018-11-18T01:36:59", "upload_time_iso_8601": "2018-11-18T01:36:59.577862Z", "url": "https://files.pythonhosted.org/packages/21/e8/7e152555d595041d1759d7ee8a396092701aa82bc923fd2d08ad7fe1eb4a/Dawnet-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f11c40e98fc2dd4d59193b10e1bcb49", "sha256": "d1b1bf581d915b58b87d9a9ee30236064741fa31a91fa9a74ca428d10d70b24b"}, "downloads": -1, "filename": "Dawnet-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4f11c40e98fc2dd4d59193b10e1bcb49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19260, "upload_time": "2018-11-18T01:37:01", "upload_time_iso_8601": "2018-11-18T01:37:01.438609Z", "url": "https://files.pythonhosted.org/packages/4c/92/f862b1b94928b74212d04db70cc9cf7b084af09db44fb81b0cc65629c193/Dawnet-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b18190b83a0e27a8c8de475ac1fed934", "sha256": "36cba7c467694afad4a6988bb99c7fccc294a4619bcd994b2292f88581ad8bdc"}, "downloads": -1, "filename": "Dawnet-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b18190b83a0e27a8c8de475ac1fed934", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 22103, "upload_time": "2018-11-18T01:36:59", "upload_time_iso_8601": "2018-11-18T01:36:59.577862Z", "url": "https://files.pythonhosted.org/packages/21/e8/7e152555d595041d1759d7ee8a396092701aa82bc923fd2d08ad7fe1eb4a/Dawnet-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f11c40e98fc2dd4d59193b10e1bcb49", "sha256": "d1b1bf581d915b58b87d9a9ee30236064741fa31a91fa9a74ca428d10d70b24b"}, "downloads": -1, "filename": "Dawnet-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4f11c40e98fc2dd4d59193b10e1bcb49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19260, "upload_time": "2018-11-18T01:37:01", "upload_time_iso_8601": "2018-11-18T01:37:01.438609Z", "url": "https://files.pythonhosted.org/packages/4c/92/f862b1b94928b74212d04db70cc9cf7b084af09db44fb81b0cc65629c193/Dawnet-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:01 2020"}