{"info": {"author": "Leo Dirac", "author_email": "leo.dirac@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# timebudget\n### A stupidly-simple tool to see where your time is going in Python programs\n\nTrying to figure out where the time's going in your python code?  Tired of writing `elapsed = time.time() - start_time`?  You can find out with just a few lines of code after you\n\n```\npip install timebudget\n```\n\n## The simplest way\n\nWith just two lines of code (one is the import), you can see how long something takes...\n\n```python\nfrom timebudget import timebudget\n\nwith timebudget(\"Loading and processing the file\"):\n    raw = open(filename,'rt').readlines()\n    lines = [line.rstrip() for line in raw]\n```\n\nwill print\n\n```\nLoading and processing the file took 1.453sec\n```\n\n\n## Record times and print a report\n\nTo get a report on the total time from functions you care about, just annotate those functions:\n\n```python\nfrom timebudget import timebudget\ntimebudget.set_quiet()  # don't show measurements as they happen\ntimebudget.report_at_exit()  # Generate report when the program exits\n\n@timebudget  # Record how long this function takes\ndef possibly_slow():\n    ...\n\n@timebudget  # ... and this function too\ndef should_be_fast():\n    ...\n```\n\nAnd now when you run your program, you'll see how much time was spent in each annotated function:\n\n```\ntimebudget report...\n            possibly_slow:  901.12ms for      3 calls\n           should_be_fast:   61.35ms for      2 calls\n```\n\nOr instead of calling `report_at_exit()` you can manually call \n\n```python\ntimebudget.report(reset=True)  # print out the report now, and reset the statistics\n```\n\nIf you don't set `reset=True` then the statistics will accumulate into the next report.\n\nYou can also wrap specific blocks of code to be recorded in the report, and optionally override\nthe default `set_quiet` choice for any block:\n\n```python\nwith timebudget(\"load-file\", quiet=False):\n    text = open(filename,'rt').readlines()\n```\n\n\n## Percent of time in a loop\n\nIf you are doing something repeatedly, and want to know the percent of time doing different things, time the loop itself, and pass the name to report:\n\n```python\n@timebudget\ndef outer_loop():\n    if sometimes():\n        possibly_slow()\n    should_be_fast()\n    should_be_fast()\n\ntimebudget.report('outer_loop')\n```\n\nThen the report looks like:\n\n```\ntimebudget report per outer_loop cycle...\n               outer_loop: 100.0%   440.79ms/cyc @     1.0 calls/cyc\n            possibly_slow:  40.9%   180.31ms/cyc @     0.6 calls/cyc\n           should_be_fast:  13.7%    60.19ms/cyc @     2.0 calls/cyc\n```\n\nHere, the times in milliseconds are the totals (averages per cycle), not the average time per call.  So in the above example, `should_be_fast` is taking about 30ms per call, but being called twice per loop.  Similarly, `possibly_slow` is still about 300ms each time it's called, but it's only getting called on 60% of the cycles on average, so on average it's using 41% of the time in `outer_loop` or 180ms.\n\n\n## Requirements\n\nNeeds Python 3.6 or higher.  Because f-strings and type annotations are awesome, and it's 2019, and python 2.7 is on its deathbed.\n\nTests require `pytest`.\n\n## Inspiration\n\nThis tool is inspired by [TQDM](https://github.com/tqdm/tqdm), the awesome progress bar.  TQDM is stupidly simple to add to your code, and just makes it better.  I aspire to imitate that.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leopd/timebudget", "keywords": "profiling tuning", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "timebudget", "package_url": "https://pypi.org/project/timebudget/", "platform": "", "project_url": "https://pypi.org/project/timebudget/", "project_urls": {"Homepage": "https://github.com/leopd/timebudget"}, "release_url": "https://pypi.org/project/timebudget/0.7/", "requires_dist": null, "requires_python": "", "summary": "Stupidly-simple speed profiling tool for python", "version": "0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>timebudget</h1>\n<h3>A stupidly-simple tool to see where your time is going in Python programs</h3>\n<p>Trying to figure out where the time's going in your python code?  Tired of writing <code>elapsed = time.time() - start_time</code>?  You can find out with just a few lines of code after you</p>\n<pre><code>pip install timebudget\n</code></pre>\n<h2>The simplest way</h2>\n<p>With just two lines of code (one is the import), you can see how long something takes...</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">timebudget</span> <span class=\"kn\">import</span> <span class=\"n\">timebudget</span>\n\n<span class=\"k\">with</span> <span class=\"n\">timebudget</span><span class=\"p\">(</span><span class=\"s2\">\"Loading and processing the file\"</span><span class=\"p\">):</span>\n    <span class=\"n\">raw</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span><span class=\"s1\">'rt'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">raw</span><span class=\"p\">]</span>\n</pre>\n<p>will print</p>\n<pre><code>Loading and processing the file took 1.453sec\n</code></pre>\n<h2>Record times and print a report</h2>\n<p>To get a report on the total time from functions you care about, just annotate those functions:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">timebudget</span> <span class=\"kn\">import</span> <span class=\"n\">timebudget</span>\n<span class=\"n\">timebudget</span><span class=\"o\">.</span><span class=\"n\">set_quiet</span><span class=\"p\">()</span>  <span class=\"c1\"># don't show measurements as they happen</span>\n<span class=\"n\">timebudget</span><span class=\"o\">.</span><span class=\"n\">report_at_exit</span><span class=\"p\">()</span>  <span class=\"c1\"># Generate report when the program exits</span>\n\n<span class=\"nd\">@timebudget</span>  <span class=\"c1\"># Record how long this function takes</span>\n<span class=\"k\">def</span> <span class=\"nf\">possibly_slow</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@timebudget</span>  <span class=\"c1\"># ... and this function too</span>\n<span class=\"k\">def</span> <span class=\"nf\">should_be_fast</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>And now when you run your program, you'll see how much time was spent in each annotated function:</p>\n<pre><code>timebudget report...\n            possibly_slow:  901.12ms for      3 calls\n           should_be_fast:   61.35ms for      2 calls\n</code></pre>\n<p>Or instead of calling <code>report_at_exit()</code> you can manually call</p>\n<pre><span class=\"n\">timebudget</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">(</span><span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># print out the report now, and reset the statistics</span>\n</pre>\n<p>If you don't set <code>reset=True</code> then the statistics will accumulate into the next report.</p>\n<p>You can also wrap specific blocks of code to be recorded in the report, and optionally override\nthe default <code>set_quiet</code> choice for any block:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">timebudget</span><span class=\"p\">(</span><span class=\"s2\">\"load-file\"</span><span class=\"p\">,</span> <span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span><span class=\"s1\">'rt'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n</pre>\n<h2>Percent of time in a loop</h2>\n<p>If you are doing something repeatedly, and want to know the percent of time doing different things, time the loop itself, and pass the name to report:</p>\n<pre><span class=\"nd\">@timebudget</span>\n<span class=\"k\">def</span> <span class=\"nf\">outer_loop</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">sometimes</span><span class=\"p\">():</span>\n        <span class=\"n\">possibly_slow</span><span class=\"p\">()</span>\n    <span class=\"n\">should_be_fast</span><span class=\"p\">()</span>\n    <span class=\"n\">should_be_fast</span><span class=\"p\">()</span>\n\n<span class=\"n\">timebudget</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">(</span><span class=\"s1\">'outer_loop'</span><span class=\"p\">)</span>\n</pre>\n<p>Then the report looks like:</p>\n<pre><code>timebudget report per outer_loop cycle...\n               outer_loop: 100.0%   440.79ms/cyc @     1.0 calls/cyc\n            possibly_slow:  40.9%   180.31ms/cyc @     0.6 calls/cyc\n           should_be_fast:  13.7%    60.19ms/cyc @     2.0 calls/cyc\n</code></pre>\n<p>Here, the times in milliseconds are the totals (averages per cycle), not the average time per call.  So in the above example, <code>should_be_fast</code> is taking about 30ms per call, but being called twice per loop.  Similarly, <code>possibly_slow</code> is still about 300ms each time it's called, but it's only getting called on 60% of the cycles on average, so on average it's using 41% of the time in <code>outer_loop</code> or 180ms.</p>\n<h2>Requirements</h2>\n<p>Needs Python 3.6 or higher.  Because f-strings and type annotations are awesome, and it's 2019, and python 2.7 is on its deathbed.</p>\n<p>Tests require <code>pytest</code>.</p>\n<h2>Inspiration</h2>\n<p>This tool is inspired by <a href=\"https://github.com/tqdm/tqdm\" rel=\"nofollow\">TQDM</a>, the awesome progress bar.  TQDM is stupidly simple to add to your code, and just makes it better.  I aspire to imitate that.</p>\n\n          </div>"}, "last_serial": 6055461, "releases": {"0.6": [{"comment_text": "", "digests": {"md5": "1773178b7279b2784ed45144c57dd1fc", "sha256": "d52229131d181b05d912fdca57445737384add0a4278d3a3bea185598e48f791"}, "downloads": -1, "filename": "timebudget-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1773178b7279b2784ed45144c57dd1fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8294, "upload_time": "2019-10-22T19:00:08", "upload_time_iso_8601": "2019-10-22T19:00:08.971945Z", "url": "https://files.pythonhosted.org/packages/03/5f/ab621fdc544235500bdbef74acc7930dd9be232fb0c18eb0fb1eabb229a2/timebudget-0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6b09a91e22e7f7e3fa6802c7785822a", "sha256": "65875a2cf4e5eb99502458bb85f07129a4e31fdba88b5c243f9aa77a01c38cac"}, "downloads": -1, "filename": "timebudget-0.6.tar.gz", "has_sig": false, "md5_digest": "f6b09a91e22e7f7e3fa6802c7785822a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3724, "upload_time": "2019-10-22T19:00:11", "upload_time_iso_8601": "2019-10-22T19:00:11.390658Z", "url": "https://files.pythonhosted.org/packages/0d/de/58d35359d9dd012e18a60a4dcfbef1e9b2fa411ca299b4832732f93fbdc8/timebudget-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "b248a3317df479b1fccf28b99d698a40", "sha256": "30a032b76a3e336886172a3e2658b7161cee1aca75eeaaa67d3c145986b4ff22"}, "downloads": -1, "filename": "timebudget-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b248a3317df479b1fccf28b99d698a40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9225, "upload_time": "2019-10-31T00:27:36", "upload_time_iso_8601": "2019-10-31T00:27:36.255965Z", "url": "https://files.pythonhosted.org/packages/4b/f9/aafeac4a75564e780b3beebef269deccb5268c22fdfe3b3e1df91788ef2b/timebudget-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b9d9d1c17c2ceb3b08221c892a09e8a", "sha256": "5c8f0bbe90ba2665d4b637d65a83ad63c55a33343d36dcb0ad0721dc69a52d65"}, "downloads": -1, "filename": "timebudget-0.7.tar.gz", "has_sig": false, "md5_digest": "4b9d9d1c17c2ceb3b08221c892a09e8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4744, "upload_time": "2019-10-31T00:27:37", "upload_time_iso_8601": "2019-10-31T00:27:37.380924Z", "url": "https://files.pythonhosted.org/packages/b7/e3/01f4b36675643d6257e6e1bc6c4519c17176661b05a156e67b554fe0aae2/timebudget-0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b248a3317df479b1fccf28b99d698a40", "sha256": "30a032b76a3e336886172a3e2658b7161cee1aca75eeaaa67d3c145986b4ff22"}, "downloads": -1, "filename": "timebudget-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b248a3317df479b1fccf28b99d698a40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9225, "upload_time": "2019-10-31T00:27:36", "upload_time_iso_8601": "2019-10-31T00:27:36.255965Z", "url": "https://files.pythonhosted.org/packages/4b/f9/aafeac4a75564e780b3beebef269deccb5268c22fdfe3b3e1df91788ef2b/timebudget-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b9d9d1c17c2ceb3b08221c892a09e8a", "sha256": "5c8f0bbe90ba2665d4b637d65a83ad63c55a33343d36dcb0ad0721dc69a52d65"}, "downloads": -1, "filename": "timebudget-0.7.tar.gz", "has_sig": false, "md5_digest": "4b9d9d1c17c2ceb3b08221c892a09e8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4744, "upload_time": "2019-10-31T00:27:37", "upload_time_iso_8601": "2019-10-31T00:27:37.380924Z", "url": "https://files.pythonhosted.org/packages/b7/e3/01f4b36675643d6257e6e1bc6c4519c17176661b05a156e67b554fe0aae2/timebudget-0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:37 2020"}