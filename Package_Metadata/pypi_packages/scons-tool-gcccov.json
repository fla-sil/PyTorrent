{"info": {"author": "Pawe\u0142 Tomulik", "author_email": "ptomulik@meil.pw.edu.pl", "bugtrack_url": null, "classifiers": [], "description": "scons-tool-gcccov\n=================\n\n.. image:: https://badge.fury.io/py/scons-tool-gcccov.svg\n    :target: https://badge.fury.io/py/scons-tool-gcccov\n    :alt: PyPi package version\n\n.. image:: https://travis-ci.org/ptomulik/scons-tool-gcccov.svg?branch=master\n    :target: https://travis-ci.org/ptomulik/scons-tool-gcccov\n    :alt: Travis CI build status\n\n.. image:: https://ci.appveyor.com/api/projects/status/github/ptomulik/scons-tool-gcccov?svg=true\n    :target: https://ci.appveyor.com/project/ptomulik/scons-tool-gcccov\n\n\nSupport for gcc_ code coverage features. Note, this is not a tool for running\ngcov_ program.\n\nOverview\n--------\n\ngcc_ (and clang_) is able to generate coverage info for gcov_ tool. You can use\ngcov_ to test code coverage in your programs. It helps discover where your\noptimization efforts will best affect your code.\n\ngcov_ uses two files for profiling, see `gcov files`_.  The names of these\nfiles are derived from the original *object* file by substituting the file\nsuffix with either ``.gcno``, or ``.gcda``. The ``.gcno`` notes file is\ngenerated when the source file is compiled. The ``.gcda`` count data file is\ngenerated when a program containing object files is executed. A separate\n``.gcda`` file is created for each object file.\n\nThe purpose of **scons-tool-gcccov** is to help to incorporate the above gcov\nfiles into project's dependency tree. Thanks to this, builders that depend on\ncoverage data (for example gcov report builders or test runners) may be\nexecuted at right moments. This also helps to clean-up coverage data when the\nproject gets cleaned up.\n\nInstallation\n------------\n\nThere are few ways to install this tool for your project.\n\nFrom pypi_\n^^^^^^^^^^\n\nThis method may be preferable if you build your project under a virtualenv. To\nadd gcccov tool from pypi_, type (within your wirtualenv):\n\n.. code-block:: shell\n\n   pip install scons-tool-loader scons-tool-gcccov\n\nor, if your project uses pipenv_:\n\n.. code-block:: shell\n\n   pipenv install --dev scons-tool-loader scons-tool-gcccov\n\nAlternatively, you may add this to your ``Pipfile``\n\n.. code-block::\n\n   [dev-packages]\n   scons-tool-loader = \"*\"\n   scons-tool-gcccov = \"*\"\n\n\nThe tool will be installed as a namespaced package ``sconstool.gcccov``\nin project's virtual environment. You may further use scons-tool-loader_\nto load the tool.\n\nAs a git submodule\n^^^^^^^^^^^^^^^^^^\n\n#. Create new git repository:\n\n   .. code-block:: shell\n\n      mkdir /tmp/prj && cd /tmp/prj\n      touch README.rst\n      git init\n\n#. Add the `scons-tool-gcccov`_ as a submodule:\n\n   .. code-block:: shell\n\n      git submodule add git://github.com/ptomulik/scons-tool-gcccov.git site_scons/site_tools/gcccov\n\n#. For python 2.x create ``__init__.py`` in ``site_tools`` directory:\n\n   .. code-block:: shell\n\n      touch site_scons/site_tools/__init__.py\n\n   this will allow to directly import ``site_tools.gcccov`` (this may be required by other tools).\n\nOther projects\n^^^^^^^^^^^^^^\n\n#. Download and copy this source tree to ``site_scons/site_tools/gcccov/``\n   subdirectory of your project:\n\n   .. code-block:: shell\n\n      mkdir -p site_scons/site_tools/gcccov && \\\n        (cd site_scons/site_tools/gcccov && \\\n          curl -L https://github.com/ptomulik/scons-tool-gcccov/tarball/master | \\\n          tar --strip-components=1 -xz)\n\nUsage\n-----\n\nSimple project with variant build and one shared library\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#. Create some source files, for example ``src/main.c`` and ``src/bar.c``:\n\n   .. code-block:: cpp\n\n      // src/main.c\n      extern int bar();\n      int main(int argc, char *argv[])\n      {\n        return bar();\n      }\n\n   .. code-block:: cpp\n\n      // src/bar.c\n      int bar()\n      {\n        return 0;\n      }\n\n#. Write the top level ``SConstruct`` file:\n\n   .. code-block:: python\n\n      # SConstruct\n      env = Environment(tools = ['default', 'gcccov'])\n      # Generate correct dependencies of `*.gcno' and `*.gcda' files on object\n      # files being built from now on.\n      env.GCovInjectObjectEmitters()\n      env.Replace(CCFLAGS = ['-g', '-O0', '--coverage'], LINKFLAGS = ['--coverage'])\n      SConscript('src/SConscript', variant_dir = 'build', duplicate = 0, exports = [ 'env' ])\n\n#. Write ``src/SConscript``:\n\n   .. code-block:: python\n\n      # src/SConscript\n      Import(['env'])\n      bar = env.SharedLibrary(['bar'], ['bar.c'])\n      pro = env.Program('main.c', LIBS = ['bar'], LIBPATH = ['.'])\n      run = env.Action(\"LD_LIBRARY_PATH=%s %s\" % (env.Dir('.').path, pro[0].path))\n      env.Alias('check', pro, run)\n      env.AlwaysBuild('check')\n\n#. Try it out, first we run pure build:\n\n   .. code-block:: shell\n\n       ptomulik@barakus:$ scons -Q\n       gcc -o build/bar.os -c -g -O0 --coverage -fPIC src/bar.c\n       gcc -o build/libbar.so --coverage -shared build/bar.os\n       gcc -o build/main.o -c -g -O0 --coverage src/main.c\n       gcc -o build/main --coverage build/main.o -Lbuild -Lsrc -lbar\n\n   Note the ``*.gcno`` files generated under ``build/`` directory:\n\n   .. code-block:: shell\n\n      ptomulik@barakus:$ ls build/*.gc*\n      build/bar.gcno  build/main.gcno\n\n   Now, cleanup project:\n\n   .. code-block:: shell\n\n      ptomulik@barakus:$ scons -Q -c\n      Removed build/bar.os\n      Removed build/bar.gcno\n      Removed build/libbar.so\n      Removed build/main.o\n      Removed build/main.gcno\n      Removed build/main\n\n   Note the ``*.gcno`` files get cleaned as well. Now we'll build and run test\n   program:\n\n   .. code-block:: shell\n\n      ptomulik@barakus:$ scons -Q check\n      gcc -o build/main.o -c -g -O0 --coverage src/main.c\n      gcc -o build/bar.os -c -g -O0 --coverage -fPIC src/bar.c\n      gcc -o build/libbar.so --coverage -shared build/bar.os\n      gcc -o build/main --coverage build/main.o -Lbuild -Lsrc -lbar\n      LD_LIBRARY_PATH=build build/main\n\n   and list the coverage files again:\n\n   .. code-block:: shell\n\n      ptomulik@barakus:$ ls build/*.gc*\n      build/bar.gcda  build/bar.gcno  build/main.gcda  build/main.gcno\n\n   Cleanup the project again:\n\n   .. code-block:: shell\n\n      ptomulik@barakus:$ scons -Q -c\n      Removed build/bar.os\n      Removed build/bar.gcno\n      Removed build/bar.gcda\n      Removed build/libbar.so\n      Removed build/main.o\n      Removed build/main.gcno\n      Removed build/main.gcda\n      Removed build/main\n\n   as you see, the ``*.gcda`` files get cleaned as well.\n\nIntegrating with cxxtest_\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn this example we create a simple test runner using cxxtest_ suite. To drive\neverything from SCons_, we'll use a scons-tool-cxxtest_ tool derived from the\noriginal SCons tool available in cxxtest_ repository.\n\n#. Install cxxtest_ framework:\n\n   .. code-block:: shell\n\n      sudo apt-get install cxxtest\n\n#. Create new git repository:\n\n   .. code-block:: shell\n\n      mkdir /tmp/prj && cd /tmp/prj\n      touch README.rst\n      git init\n\n#. Add **scons-tool-gcccov** as submodule:\n\n   .. code-block:: shell\n\n      git submodule add git://github.com/ptomulik/scons-tool-gcccov.git site_scons/site_tools/gcccov\n\n#. Add scons-tool-cxxtest_ tool as submodule:\n\n   .. code-block:: shell\n\n      git submodule add git://github.com/ptomulik/scons-tool-cxxtest.git site_scons/site_tools/cxxtest\n\n#. Create source file ``src/bar.cpp``:\n\n   .. code-block:: cpp\n\n      // src/bar.cpp\n      int bar()\n      {\n        return 0;\n      }\n\n#. Create test file ``src/test.t.h``\n\n   .. code-block:: cpp\n\n      // src/test.t.h\n      #include <cxxtest/TestSuite.h>\n\n      extern int bar();\n      class BarTestSuite1 : public CxxTest::TestSuite\n      {\n      public:\n          void testBar(void)\n          {\n              TS_ASSERT_EQUALS(bar(), 0);\n          }\n      };\n\n#. Write the top level ``SConstruct`` file:\n\n   .. code-block:: python\n\n      # SConstruct\n      import os\n      env = Environment(ENV = os.environ, tools = ['default', 'cxxtest', 'gcccov'])\n      # Generate correct dependencies of `*.gcno' and `*.gcda' files on object\n      # files being built from now on.\n      env.GCovInjectObjectEmitters()\n      env.Replace(CCFLAGS = ['-g', '-O0', '--coverage'], LINKFLAGS = ['--coverage'])\n      SConscript('src/SConscript', variant_dir = 'build', duplicate = 0, exports = [ 'env' ])\n\n#. Write ``src/SConscript``:\n\n   .. code-block:: python\n\n      # src/SConscript\n      Import(['env'])\n      bar = env.SharedLibrary(['bar'], ['bar.cpp'])\n      env.CxxTest('test.t.h', LIBS = bar)\n\n#. Try it out:\n\n   .. code-block:: shell\n\n      ptomulik@barakus:$ LD_LIBRARY_PATH=build scons -Q check\n      Loading CxxTest tool...\n      /usr/bin/python /usr/bin/cxxtestgen --runner=ErrorPrinter -o build/test.cpp src/test.t.h\n      g++ -o build/test.o -c -g -O0 --coverage -I. build/test.cpp\n      g++ -o build/bar.os -c -g -O0 --coverage -fPIC src/bar.cpp\n      g++ -o build/libbar.so --coverage -shared build/bar.os\n      g++ -o build/test --coverage build/test.o -Lbuild -Lsrc -lbar\n      /tmp/prj/build/test\n      Running cxxtest tests (1 test).OK!\n\n#. Check the gcov_ files created:\n\n   .. code-block:: shell\n\n      ptomulik@barakus:$ ls build/*.gc*\n      build/bar.gcda  build/bar.gcno  build/test.gcda  build/test.gcno\n\n#. Cleanup project:\n\n   .. code-block:: shell\n\n      ptomulik@barakus:$ scons -Q -c\n      Loading CxxTest tool...\n      Removed build/bar.os\n      Removed build/bar.gcno\n      Removed build/bar.gcda\n      Removed build/libbar.so\n      Removed build/test.cpp\n      Removed build/test.o\n      Removed build/test.gcno\n      Removed build/test.gcda\n      Removed build/test\n\n   As you see, all the generated gcov_ side effects are cleaned up as expected.\n\nFinding out ``*.gcda`` files generated by a program run\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you need a list of ``*.gcda`` files generated when a program built with\nSCons is executed, you may use ``GCovFindGcdaNodes``:\n\n  .. code-block:: python\n\n      prog = env.Program('foo.c')\n      gcda = env.GCovFindGcdaNodes(prog[0])\n\nThis method is kinda dangerous and may break some builds. It internally scans\nfor dependencies, and this is done at the time the SConscript file is\nprocessed. This may cause a problem with .sconsing file being written to wrong\ndirectory. More details are given in `this thread\n<http://scons.tigris.org/ds/viewMessage.do?dsForumId=1272&dsMessageId=2411741>`_.\n\nAs a conclusion I would say, that you should not use it in normal workflow.\nHowever, it may be handy for development, code maintenance and such. For these\npurposes I would suggest to add special CLI options or targets to your SCons\nscript, to use it only when explicitly requested.\n\nModule description\n------------------\n\nThe scons-tool-gcccov tool provides three methods:\n\n- ``env.GCovInjectObjectEmitters(**overrides)``,\n- ``env.GCovFindGcdaNodes(root)``,\n- ``env.GCovGcdaGenerator(target, target_factory=_null, **overrides)``.\n\nThe first method, ``GCovInjectObjectEmitters`` is the only you'll need in most\nprojects. It injects special emitter to builders which create C/C++ object\nfiles such that their corresponding ``*.gcno`` and ``*.gcda`` files get added\nto dependency tree. The method should be invoked somewhere on the top of your\nSConstruct, before you specify first C/C++ file to be compiled. For example,\nthis is incorrect:\n\n  .. code-block:: python\n\n      # SConstruct\n      env.Program('foo')\n      env.GCovInjectObjectEmitters()\n\nand this is correct:\n\n  .. code-block:: python\n\n      # SConstruct\n      env.GCovInjectObjectEmitters()\n      env.Program('foo')\n\nThe remaining two methods should not be used in normal workflow. The\n``GCovFindGcdaNodes`` determines what ``*.gcda`` files would be generated when\nrunning certain program(s) built with SCons. The ``GCovGcdaGenerator(alias)``\ntells SCons that ``alias`` target generates these ``*.gcda`` files as a side\neffect (the alias should run a program/test runner and should have the program\nin its dependencies). The method should not be used currently, however, as it\nmay break some builds, see `this thread\n<http://scons.tigris.org/ds/viewMessage.do?dsForumId=1272&dsMessageId=2411741>`_.\nCurrently it's here only for experiments.\n\nConstruction variables\n^^^^^^^^^^^^^^^^^^^^^^\n\nThe tool uses construction variables listed in the table below:\n\n========================= ==================================================================================\n Option                    Description\n========================= ==================================================================================\n GCCCOV_DISABLE            Disable gcccov functionality.\n GCCCOV_EXCLUDE            Files (``*.gcno``, ``*.gcda``, objects, etc.) to be excluded from processing.\n GCCCOV_GCDA_SUFFIX        Suffix for ``*.gcda`` files used by gcov dependency machinery.\n GCCCOV_GCNO_SUFFIX        Suffix for ``*.gcno`` files used by gcov dependency machinery.\n GCCCOV_MAX_RECURSION      Maximum recursion depth allowed when searching for ``*.gcda`` nodes.\n GCCCOV_NOCLEAN            List of gcov files which shouldn't be Cleaned up.\n GCCCOV_NOIGNORE           List of gcov files which shouldn't be Ignored from main target.\n GCCCOV_RUNTEST_FACTORY    Factory used to build runtest target (defaults to env.ans.Alias)\n GCCCOV_RUNTEST_TARGETS    List of targets (usually aliases) that run test runners.\n GCCCOV_SOURCE_SUFFIXES    List of source file suffixes for which dependency injector should be enabled.\n========================= ==================================================================================\n\nGENERATING DOCUMENTATION\n------------------------\n\nAPI DOCUMENTATION\n^^^^^^^^^^^^^^^^^\n\nYou need few prerequisites to generate API documentation:\n\n- epydoc_,\n- python-docutils_,\n- python-pygments_.\n\nInstall them with\n\n.. code-block:: shell\n\n   sudo apt-get install python-epydoc python-docutils python-pygments\n\nThe API documentation may be generated with:\n\n.. code-block:: shell\n\n   scons api-doc\n\nThe resultant html files get written to ``build/doc/api`` directory.\n\n\n\nLICENSE\n-------\n\nCopyright (c) 2014-2020 by Pawe\u0142 Tomulik <ptomulik@meil.pw.edu.pl>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE\n\n.. <!-- Links -->\n.. _SCons: http://scons.org\n.. _gcov: http://gcc.gnu.org/onlinedocs/gcc/Gcov.html\n.. _gcc: http://gcc.gnu.org/\n.. _clang: http://clang.llvm.org/\n.. _gcov files: http://gcc.gnu.org/onlinedocs/gcc/Gcov-Data-Files.html#Gcov-Data-Files\n.. _cxxtest: http://cxxtest.com\n.. _scons-tool-gcccov: https://github.com/ptomulik/scons-tool-gcccov\n.. _scons-tool-cxxtest: https://github.com/ptomulik/scons-tool-cxxtest\n.. _scons-tool-loader: https://github.com/ptomulik/scons-tool-loader\n.. _epydoc: http://epydoc.sourceforge.net/\n.. _python-docutils: http://pypi.python.org/pypi/docutils\n.. _python-pygments: http://pygments.org/\n.. _pipenv: https://pipenv.readthedocs.io/\n.. _pypi: https://pypi.org/\n\n.. <!--- vim: set expandtab tabstop=2 shiftwidth=2 syntax=rst: -->\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ptomulik/scons-tool-gcccov", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "scons-tool-gcccov", "package_url": "https://pypi.org/project/scons-tool-gcccov/", "platform": "", "project_url": "https://pypi.org/project/scons-tool-gcccov/", "project_urls": {"Homepage": "https://github.com/ptomulik/scons-tool-gcccov"}, "release_url": "https://pypi.org/project/scons-tool-gcccov/0.2.0/", "requires_dist": null, "requires_python": ">=2.7", "summary": "SCons support for gcc code coverage features", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/scons-tool-gcccov\" rel=\"nofollow\"><img alt=\"PyPi package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9c79a5b661d82a5e1229b13a0fcc47f0567485d/68747470733a2f2f62616467652e667572792e696f2f70792f73636f6e732d746f6f6c2d676363636f762e737667\"></a>\n<a href=\"https://travis-ci.org/ptomulik/scons-tool-gcccov\" rel=\"nofollow\"><img alt=\"Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61170d363b612a7d0aa92364fb7f4fff1dd6160a/68747470733a2f2f7472617669732d63692e6f72672f70746f6d756c696b2f73636f6e732d746f6f6c2d676363636f762e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/ptomulik/scons-tool-gcccov\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/github/ptomulik/scons-tool-gcccov?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/133ad227ccb893d97779f21a4aa4f96b12fbf3b3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f70746f6d756c696b2f73636f6e732d746f6f6c2d676363636f763f7376673d74727565\"></a>\n<p>Support for <a href=\"http://gcc.gnu.org/\" rel=\"nofollow\">gcc</a> code coverage features. Note, this is not a tool for running\n<a href=\"http://gcc.gnu.org/onlinedocs/gcc/Gcov.html\" rel=\"nofollow\">gcov</a> program.</p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><a href=\"http://gcc.gnu.org/\" rel=\"nofollow\">gcc</a> (and <a href=\"http://clang.llvm.org/\" rel=\"nofollow\">clang</a>) is able to generate coverage info for <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Gcov.html\" rel=\"nofollow\">gcov</a> tool. You can use\n<a href=\"http://gcc.gnu.org/onlinedocs/gcc/Gcov.html\" rel=\"nofollow\">gcov</a> to test code coverage in your programs. It helps discover where your\noptimization efforts will best affect your code.</p>\n<p><a href=\"http://gcc.gnu.org/onlinedocs/gcc/Gcov.html\" rel=\"nofollow\">gcov</a> uses two files for profiling, see <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Gcov-Data-Files.html#Gcov-Data-Files\" rel=\"nofollow\">gcov files</a>.  The names of these\nfiles are derived from the original <em>object</em> file by substituting the file\nsuffix with either <tt>.gcno</tt>, or <tt>.gcda</tt>. The <tt>.gcno</tt> notes file is\ngenerated when the source file is compiled. The <tt>.gcda</tt> count data file is\ngenerated when a program containing object files is executed. A separate\n<tt>.gcda</tt> file is created for each object file.</p>\n<p>The purpose of <strong>scons-tool-gcccov</strong> is to help to incorporate the above gcov\nfiles into project\u2019s dependency tree. Thanks to this, builders that depend on\ncoverage data (for example gcov report builders or test runners) may be\nexecuted at right moments. This also helps to clean-up coverage data when the\nproject gets cleaned up.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>There are few ways to install this tool for your project.</p>\n<div id=\"from-pypi\">\n<h3>From <a href=\"https://pypi.org/\" rel=\"nofollow\">pypi</a></h3>\n<p>This method may be preferable if you build your project under a virtualenv. To\nadd gcccov tool from <a href=\"https://pypi.org/\" rel=\"nofollow\">pypi</a>, type (within your wirtualenv):</p>\n<pre>pip install scons-tool-loader scons-tool-gcccov\n</pre>\n<p>or, if your project uses <a href=\"https://pipenv.readthedocs.io/\" rel=\"nofollow\">pipenv</a>:</p>\n<pre>pipenv install --dev scons-tool-loader scons-tool-gcccov\n</pre>\n<p>Alternatively, you may add this to your <tt>Pipfile</tt></p>\n<pre>[dev-packages]\nscons-tool-loader = \"*\"\nscons-tool-gcccov = \"*\"\n</pre>\n<p>The tool will be installed as a namespaced package <tt>sconstool.gcccov</tt>\nin project\u2019s virtual environment. You may further use <a href=\"https://github.com/ptomulik/scons-tool-loader\" rel=\"nofollow\">scons-tool-loader</a>\nto load the tool.</p>\n</div>\n<div id=\"as-a-git-submodule\">\n<h3>As a git submodule</h3>\n<ol>\n<li><p>Create new git repository:</p>\n<pre>mkdir /tmp/prj <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> /tmp/prj\ntouch README.rst\ngit init\n</pre>\n</li>\n<li><p>Add the <a href=\"https://github.com/ptomulik/scons-tool-gcccov\" rel=\"nofollow\">scons-tool-gcccov</a> as a submodule:</p>\n<pre>git submodule add git://github.com/ptomulik/scons-tool-gcccov.git site_scons/site_tools/gcccov\n</pre>\n</li>\n<li><p>For python 2.x create <tt>__init__.py</tt> in <tt>site_tools</tt> directory:</p>\n<pre>touch site_scons/site_tools/__init__.py\n</pre>\n<p>this will allow to directly import <tt>site_tools.gcccov</tt> (this may be required by other tools).</p>\n</li>\n</ol>\n</div>\n<div id=\"other-projects\">\n<h3>Other projects</h3>\n<ol>\n<li><p>Download and copy this source tree to <tt>site_scons/site_tools/gcccov/</tt>\nsubdirectory of your project:</p>\n<pre>mkdir -p site_scons/site_tools/gcccov <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span>  <span class=\"o\">(</span><span class=\"nb\">cd</span> site_scons/site_tools/gcccov <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span>    curl -L https://github.com/ptomulik/scons-tool-gcccov/tarball/master <span class=\"p\">|</span> <span class=\"se\">\\\n</span>    tar --strip-components<span class=\"o\">=</span><span class=\"m\">1</span> -xz<span class=\"o\">)</span>\n</pre>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"simple-project-with-variant-build-and-one-shared-library\">\n<h3>Simple project with variant build and one shared library</h3>\n<ol>\n<li><p>Create some source files, for example <tt>src/main.c</tt> and <tt>src/bar.c</tt>:</p>\n<pre><span class=\"c1\">// src/main.c\n</span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">bar</span><span class=\"p\">();</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">bar</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"c1\">// src/bar.c\n</span><span class=\"kt\">int</span> <span class=\"nf\">bar</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li><p>Write the top level <tt>SConstruct</tt> file:</p>\n<pre><span class=\"c1\"># SConstruct</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Environment</span><span class=\"p\">(</span><span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"s1\">'gcccov'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Generate correct dependencies of `*.gcno' and `*.gcda' files on object</span>\n<span class=\"c1\"># files being built from now on.</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">GCovInjectObjectEmitters</span><span class=\"p\">()</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Replace</span><span class=\"p\">(</span><span class=\"n\">CCFLAGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'-g'</span><span class=\"p\">,</span> <span class=\"s1\">'-O0'</span><span class=\"p\">,</span> <span class=\"s1\">'--coverage'</span><span class=\"p\">],</span> <span class=\"n\">LINKFLAGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'--coverage'</span><span class=\"p\">])</span>\n<span class=\"n\">SConscript</span><span class=\"p\">(</span><span class=\"s1\">'src/SConscript'</span><span class=\"p\">,</span> <span class=\"n\">variant_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'build'</span><span class=\"p\">,</span> <span class=\"n\">duplicate</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">exports</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">'env'</span> <span class=\"p\">])</span>\n</pre>\n</li>\n<li><p>Write <tt>src/SConscript</tt>:</p>\n<pre><span class=\"c1\"># src/SConscript</span>\n<span class=\"n\">Import</span><span class=\"p\">([</span><span class=\"s1\">'env'</span><span class=\"p\">])</span>\n<span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">SharedLibrary</span><span class=\"p\">([</span><span class=\"s1\">'bar'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'bar.c'</span><span class=\"p\">])</span>\n<span class=\"n\">pro</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Program</span><span class=\"p\">(</span><span class=\"s1\">'main.c'</span><span class=\"p\">,</span> <span class=\"n\">LIBS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">],</span> <span class=\"n\">LIBPATH</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'.'</span><span class=\"p\">])</span>\n<span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">(</span><span class=\"s2\">\"LD_LIBRARY_PATH=</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Dir</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">pro</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">))</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Alias</span><span class=\"p\">(</span><span class=\"s1\">'check'</span><span class=\"p\">,</span> <span class=\"n\">pro</span><span class=\"p\">,</span> <span class=\"n\">run</span><span class=\"p\">)</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">AlwaysBuild</span><span class=\"p\">(</span><span class=\"s1\">'check'</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Try it out, first we run pure build:</p>\n<pre>ptomulik@barakus:$ scons -Q\ngcc -o build/bar.os -c -g -O0 --coverage -fPIC src/bar.c\ngcc -o build/libbar.so --coverage -shared build/bar.os\ngcc -o build/main.o -c -g -O0 --coverage src/main.c\ngcc -o build/main --coverage build/main.o -Lbuild -Lsrc -lbar\n</pre>\n<p>Note the <tt>*.gcno</tt> files generated under <tt>build/</tt> directory:</p>\n<pre>ptomulik@barakus:$ ls build/*.gc*\nbuild/bar.gcno  build/main.gcno\n</pre>\n<p>Now, cleanup project:</p>\n<pre>ptomulik@barakus:$ scons -Q -c\nRemoved build/bar.os\nRemoved build/bar.gcno\nRemoved build/libbar.so\nRemoved build/main.o\nRemoved build/main.gcno\nRemoved build/main\n</pre>\n<p>Note the <tt>*.gcno</tt> files get cleaned as well. Now we\u2019ll build and run test\nprogram:</p>\n<pre>ptomulik@barakus:$ scons -Q check\ngcc -o build/main.o -c -g -O0 --coverage src/main.c\ngcc -o build/bar.os -c -g -O0 --coverage -fPIC src/bar.c\ngcc -o build/libbar.so --coverage -shared build/bar.os\ngcc -o build/main --coverage build/main.o -Lbuild -Lsrc -lbar\n<span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>build build/main\n</pre>\n<p>and list the coverage files again:</p>\n<pre>ptomulik@barakus:$ ls build/*.gc*\nbuild/bar.gcda  build/bar.gcno  build/main.gcda  build/main.gcno\n</pre>\n<p>Cleanup the project again:</p>\n<pre>ptomulik@barakus:$ scons -Q -c\nRemoved build/bar.os\nRemoved build/bar.gcno\nRemoved build/bar.gcda\nRemoved build/libbar.so\nRemoved build/main.o\nRemoved build/main.gcno\nRemoved build/main.gcda\nRemoved build/main\n</pre>\n<p>as you see, the <tt>*.gcda</tt> files get cleaned as well.</p>\n</li>\n</ol>\n</div>\n<div id=\"integrating-with-cxxtest\">\n<h3>Integrating with <a href=\"http://cxxtest.com\" rel=\"nofollow\">cxxtest</a></h3>\n<p>In this example we create a simple test runner using <a href=\"http://cxxtest.com\" rel=\"nofollow\">cxxtest</a> suite. To drive\neverything from <a href=\"http://scons.org\" rel=\"nofollow\">SCons</a>, we\u2019ll use a <a href=\"https://github.com/ptomulik/scons-tool-cxxtest\" rel=\"nofollow\">scons-tool-cxxtest</a> tool derived from the\noriginal SCons tool available in <a href=\"http://cxxtest.com\" rel=\"nofollow\">cxxtest</a> repository.</p>\n<ol>\n<li><p>Install <a href=\"http://cxxtest.com\" rel=\"nofollow\">cxxtest</a> framework:</p>\n<pre>sudo apt-get install cxxtest\n</pre>\n</li>\n<li><p>Create new git repository:</p>\n<pre>mkdir /tmp/prj <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> /tmp/prj\ntouch README.rst\ngit init\n</pre>\n</li>\n<li><p>Add <strong>scons-tool-gcccov</strong> as submodule:</p>\n<pre>git submodule add git://github.com/ptomulik/scons-tool-gcccov.git site_scons/site_tools/gcccov\n</pre>\n</li>\n<li><p>Add <a href=\"https://github.com/ptomulik/scons-tool-cxxtest\" rel=\"nofollow\">scons-tool-cxxtest</a> tool as submodule:</p>\n<pre>git submodule add git://github.com/ptomulik/scons-tool-cxxtest.git site_scons/site_tools/cxxtest\n</pre>\n</li>\n<li><p>Create source file <tt>src/bar.cpp</tt>:</p>\n<pre><span class=\"c1\">// src/bar.cpp\n</span><span class=\"kt\">int</span> <span class=\"nf\">bar</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li><p>Create test file <tt>src/test.t.h</tt></p>\n<pre><span class=\"c1\">// src/test.t.h\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;cxxtest/TestSuite.h&gt;</span><span class=\"cp\">\n</span>\n<span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"nf\">bar</span><span class=\"p\">();</span>\n<span class=\"k\">class</span> <span class=\"nc\">BarTestSuite1</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">CxxTest</span><span class=\"o\">::</span><span class=\"n\">TestSuite</span>\n<span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"kt\">void</span> <span class=\"n\">testBar</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">TS_ASSERT_EQUALS</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre>\n</li>\n<li><p>Write the top level <tt>SConstruct</tt> file:</p>\n<pre><span class=\"c1\"># SConstruct</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Environment</span><span class=\"p\">(</span><span class=\"n\">ENV</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"s1\">'cxxtest'</span><span class=\"p\">,</span> <span class=\"s1\">'gcccov'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Generate correct dependencies of `*.gcno' and `*.gcda' files on object</span>\n<span class=\"c1\"># files being built from now on.</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">GCovInjectObjectEmitters</span><span class=\"p\">()</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Replace</span><span class=\"p\">(</span><span class=\"n\">CCFLAGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'-g'</span><span class=\"p\">,</span> <span class=\"s1\">'-O0'</span><span class=\"p\">,</span> <span class=\"s1\">'--coverage'</span><span class=\"p\">],</span> <span class=\"n\">LINKFLAGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'--coverage'</span><span class=\"p\">])</span>\n<span class=\"n\">SConscript</span><span class=\"p\">(</span><span class=\"s1\">'src/SConscript'</span><span class=\"p\">,</span> <span class=\"n\">variant_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'build'</span><span class=\"p\">,</span> <span class=\"n\">duplicate</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">exports</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">'env'</span> <span class=\"p\">])</span>\n</pre>\n</li>\n<li><p>Write <tt>src/SConscript</tt>:</p>\n<pre><span class=\"c1\"># src/SConscript</span>\n<span class=\"n\">Import</span><span class=\"p\">([</span><span class=\"s1\">'env'</span><span class=\"p\">])</span>\n<span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">SharedLibrary</span><span class=\"p\">([</span><span class=\"s1\">'bar'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'bar.cpp'</span><span class=\"p\">])</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">CxxTest</span><span class=\"p\">(</span><span class=\"s1\">'test.t.h'</span><span class=\"p\">,</span> <span class=\"n\">LIBS</span> <span class=\"o\">=</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Try it out:</p>\n<pre>ptomulik@barakus:$ <span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>build scons -Q check\nLoading CxxTest tool...\n/usr/bin/python /usr/bin/cxxtestgen --runner<span class=\"o\">=</span>ErrorPrinter -o build/test.cpp src/test.t.h\ng++ -o build/test.o -c -g -O0 --coverage -I. build/test.cpp\ng++ -o build/bar.os -c -g -O0 --coverage -fPIC src/bar.cpp\ng++ -o build/libbar.so --coverage -shared build/bar.os\ng++ -o build/test --coverage build/test.o -Lbuild -Lsrc -lbar\n/tmp/prj/build/test\nRunning cxxtest tests <span class=\"o\">(</span><span class=\"m\">1</span> <span class=\"nb\">test</span><span class=\"o\">)</span>.OK!\n</pre>\n</li>\n<li><p>Check the <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Gcov.html\" rel=\"nofollow\">gcov</a> files created:</p>\n<pre>ptomulik@barakus:$ ls build/*.gc*\nbuild/bar.gcda  build/bar.gcno  build/test.gcda  build/test.gcno\n</pre>\n</li>\n<li><p>Cleanup project:</p>\n<pre>ptomulik@barakus:$ scons -Q -c\nLoading CxxTest tool...\nRemoved build/bar.os\nRemoved build/bar.gcno\nRemoved build/bar.gcda\nRemoved build/libbar.so\nRemoved build/test.cpp\nRemoved build/test.o\nRemoved build/test.gcno\nRemoved build/test.gcda\nRemoved build/test\n</pre>\n<p>As you see, all the generated <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Gcov.html\" rel=\"nofollow\">gcov</a> side effects are cleaned up as expected.</p>\n</li>\n</ol>\n</div>\n<div id=\"finding-out-gcda-files-generated-by-a-program-run\">\n<h3>Finding out <tt>*.gcda</tt> files generated by a program run</h3>\n<p>If you need a list of <tt>*.gcda</tt> files generated when a program built with\nSCons is executed, you may use <tt>GCovFindGcdaNodes</tt>:</p>\n<blockquote>\n<pre><span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Program</span><span class=\"p\">(</span><span class=\"s1\">'foo.c'</span><span class=\"p\">)</span>\n<span class=\"n\">gcda</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">GCovFindGcdaNodes</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n</blockquote>\n<p>This method is kinda dangerous and may break some builds. It internally scans\nfor dependencies, and this is done at the time the SConscript file is\nprocessed. This may cause a problem with .sconsing file being written to wrong\ndirectory. More details are given in <a href=\"http://scons.tigris.org/ds/viewMessage.do?dsForumId=1272&amp;dsMessageId=2411741\" rel=\"nofollow\">this thread</a>.</p>\n<p>As a conclusion I would say, that you should not use it in normal workflow.\nHowever, it may be handy for development, code maintenance and such. For these\npurposes I would suggest to add special CLI options or targets to your SCons\nscript, to use it only when explicitly requested.</p>\n</div>\n</div>\n<div id=\"module-description\">\n<h2>Module description</h2>\n<p>The scons-tool-gcccov tool provides three methods:</p>\n<ul>\n<li><tt><span class=\"pre\">env.GCovInjectObjectEmitters(**overrides)</span></tt>,</li>\n<li><tt>env.GCovFindGcdaNodes(root)</tt>,</li>\n<li><tt>env.GCovGcdaGenerator(target, target_factory=_null, **overrides)</tt>.</li>\n</ul>\n<p>The first method, <tt>GCovInjectObjectEmitters</tt> is the only you\u2019ll need in most\nprojects. It injects special emitter to builders which create C/C++ object\nfiles such that their corresponding <tt>*.gcno</tt> and <tt>*.gcda</tt> files get added\nto dependency tree. The method should be invoked somewhere on the top of your\nSConstruct, before you specify first C/C++ file to be compiled. For example,\nthis is incorrect:</p>\n<blockquote>\n<pre><span class=\"c1\"># SConstruct</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Program</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">GCovInjectObjectEmitters</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n<p>and this is correct:</p>\n<blockquote>\n<pre><span class=\"c1\"># SConstruct</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">GCovInjectObjectEmitters</span><span class=\"p\">()</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">Program</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>The remaining two methods should not be used in normal workflow. The\n<tt>GCovFindGcdaNodes</tt> determines what <tt>*.gcda</tt> files would be generated when\nrunning certain program(s) built with SCons. The <tt>GCovGcdaGenerator(alias)</tt>\ntells SCons that <tt>alias</tt> target generates these <tt>*.gcda</tt> files as a side\neffect (the alias should run a program/test runner and should have the program\nin its dependencies). The method should not be used currently, however, as it\nmay break some builds, see <a href=\"http://scons.tigris.org/ds/viewMessage.do?dsForumId=1272&amp;dsMessageId=2411741\" rel=\"nofollow\">this thread</a>.\nCurrently it\u2019s here only for experiments.</p>\n<div id=\"construction-variables\">\n<h3>Construction variables</h3>\n<p>The tool uses construction variables listed in the table below:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>GCCCOV_DISABLE</td>\n<td>Disable gcccov functionality.</td>\n</tr>\n<tr><td>GCCCOV_EXCLUDE</td>\n<td>Files (<tt>*.gcno</tt>, <tt>*.gcda</tt>, objects, etc.) to be excluded from processing.</td>\n</tr>\n<tr><td>GCCCOV_GCDA_SUFFIX</td>\n<td>Suffix for <tt>*.gcda</tt> files used by gcov dependency machinery.</td>\n</tr>\n<tr><td>GCCCOV_GCNO_SUFFIX</td>\n<td>Suffix for <tt>*.gcno</tt> files used by gcov dependency machinery.</td>\n</tr>\n<tr><td>GCCCOV_MAX_RECURSION</td>\n<td>Maximum recursion depth allowed when searching for <tt>*.gcda</tt> nodes.</td>\n</tr>\n<tr><td>GCCCOV_NOCLEAN</td>\n<td>List of gcov files which shouldn\u2019t be Cleaned up.</td>\n</tr>\n<tr><td>GCCCOV_NOIGNORE</td>\n<td>List of gcov files which shouldn\u2019t be Ignored from main target.</td>\n</tr>\n<tr><td>GCCCOV_RUNTEST_FACTORY</td>\n<td>Factory used to build runtest target (defaults to env.ans.Alias)</td>\n</tr>\n<tr><td>GCCCOV_RUNTEST_TARGETS</td>\n<td>List of targets (usually aliases) that run test runners.</td>\n</tr>\n<tr><td>GCCCOV_SOURCE_SUFFIXES</td>\n<td>List of source file suffixes for which dependency injector should be enabled.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"generating-documentation\">\n<h2>GENERATING DOCUMENTATION</h2>\n<h2 id=\"api-documentation\"><span class=\"section-subtitle\">API DOCUMENTATION</span></h2>\n<p>You need few prerequisites to generate API documentation:</p>\n<ul>\n<li><a href=\"http://epydoc.sourceforge.net/\" rel=\"nofollow\">epydoc</a>,</li>\n<li><a href=\"http://pypi.python.org/pypi/docutils\" rel=\"nofollow\">python-docutils</a>,</li>\n<li><a href=\"http://pygments.org/\" rel=\"nofollow\">python-pygments</a>.</li>\n</ul>\n<p>Install them with</p>\n<pre>sudo apt-get install python-epydoc python-docutils python-pygments\n</pre>\n<p>The API documentation may be generated with:</p>\n<pre>scons api-doc\n</pre>\n<p>The resultant html files get written to <tt>build/doc/api</tt> directory.</p>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p>Copyright (c) 2014-2020 by Pawe\u0142 Tomulik &lt;<a href=\"mailto:ptomulik%40meil.pw.edu.pl\">ptomulik<span>@</span>meil<span>.</span>pw<span>.</span>edu<span>.</span>pl</a>&gt;</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201cSoftware\u201d), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE</p>\n</div>\n\n          </div>"}, "last_serial": 7036164, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "72f265d3131fc283df9fda86450f50be", "sha256": "fd4ab8a6da142eb78cf3d3207f04642c80bb6600823ed32824c226d5f46887b0"}, "downloads": -1, "filename": "scons_tool_gcccov-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "72f265d3131fc283df9fda86450f50be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 11443, "upload_time": "2018-11-07T15:52:15", "upload_time_iso_8601": "2018-11-07T15:52:15.416571Z", "url": "https://files.pythonhosted.org/packages/86/57/acd13ce045500d7b4f64e95e5cfda4d622808332db8c4ef538bfa7b65f68/scons_tool_gcccov-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c8e5faa7862e8ff6a9761aa3edbc99f", "sha256": "182dff201482200c61fe0d450a8cdc80371c7ce8f4ffe0ad13e7a1af6b44695c"}, "downloads": -1, "filename": "scons-tool-gcccov-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3c8e5faa7862e8ff6a9761aa3edbc99f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13191, "upload_time": "2018-11-07T15:52:17", "upload_time_iso_8601": "2018-11-07T15:52:17.579480Z", "url": "https://files.pythonhosted.org/packages/e1/cb/32d262f16cce50dcb41298a2f1afe874bdd58bd757ad719027a3fbb435cd/scons-tool-gcccov-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5f24ee95131cb85cefb00b5a52ca8bce", "sha256": "496d3260c88974f70c4b27634fdd5f297e69025357d64564a5278af935b272eb"}, "downloads": -1, "filename": "scons_tool_gcccov-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5f24ee95131cb85cefb00b5a52ca8bce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 11476, "upload_time": "2018-11-07T16:05:13", "upload_time_iso_8601": "2018-11-07T16:05:13.721111Z", "url": "https://files.pythonhosted.org/packages/a5/d9/f316dcb3ca0c3070ac1a0920060add228c3769c76d91c857347a0d7998d3/scons_tool_gcccov-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b8e2874e2d20d81454c28e553c10a5c", "sha256": "a813970b25c04a0d893a7fe7a8ffd522036c37e9ae05429b8ffabc7945668c81"}, "downloads": -1, "filename": "scons-tool-gcccov-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8b8e2874e2d20d81454c28e553c10a5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13250, "upload_time": "2018-11-07T16:05:15", "upload_time_iso_8601": "2018-11-07T16:05:15.115748Z", "url": "https://files.pythonhosted.org/packages/50/4e/fe43be6af4f24a3ebeab7416f59ff1a3418afd4a000a345df8583ea38a86/scons-tool-gcccov-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0b3ce262e3235d44718ea00129f406e6", "sha256": "3411f6106854df3e939c7e6fa5f524668395e746e3ae379ea07ed5a085d7d60d"}, "downloads": -1, "filename": "scons_tool_gcccov-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0b3ce262e3235d44718ea00129f406e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 11474, "upload_time": "2019-04-23T11:13:35", "upload_time_iso_8601": "2019-04-23T11:13:35.717581Z", "url": "https://files.pythonhosted.org/packages/52/d1/712e20428b4af66703d262f30aed074ef3cac8aa8650f333dd8eebbd2aa4/scons_tool_gcccov-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d6dbc2178c57b121faf9c53724358b3", "sha256": "60ac09da2f0c024b87e887e8514d86358c476a5f52281102a143e369a56579fe"}, "downloads": -1, "filename": "scons-tool-gcccov-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3d6dbc2178c57b121faf9c53724358b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 15581, "upload_time": "2019-04-23T11:13:36", "upload_time_iso_8601": "2019-04-23T11:13:36.899021Z", "url": "https://files.pythonhosted.org/packages/86/9a/a8db431c4ab7939dac4deb02f18ddf35fc2bc8ee6a64ed94b00d15ab6d3d/scons-tool-gcccov-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f20597838f9960ac24df0f902958af30", "sha256": "c016245910562db0b5d8309c4855444f96ff731fb6a71c09854292a1b999456b"}, "downloads": -1, "filename": "scons_tool_gcccov-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f20597838f9960ac24df0f902958af30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 11495, "upload_time": "2020-04-16T23:34:23", "upload_time_iso_8601": "2020-04-16T23:34:23.608632Z", "url": "https://files.pythonhosted.org/packages/51/05/3783c841f2db8d6c24eb24dd66eb6d051f68a166ff18ffe1caccc67fa399/scons_tool_gcccov-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6922973366e760960537b89853374846", "sha256": "c5b477af87624013185ed22b3f357d002e6adba12401fe097d7f42a0b1086e1a"}, "downloads": -1, "filename": "scons-tool-gcccov-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6922973366e760960537b89853374846", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16249, "upload_time": "2020-04-16T23:34:25", "upload_time_iso_8601": "2020-04-16T23:34:25.564338Z", "url": "https://files.pythonhosted.org/packages/c1/0e/d7c2c0dfa19542a1f823b3c35b18def8b399c38cbdccf581353a1201c282/scons-tool-gcccov-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f20597838f9960ac24df0f902958af30", "sha256": "c016245910562db0b5d8309c4855444f96ff731fb6a71c09854292a1b999456b"}, "downloads": -1, "filename": "scons_tool_gcccov-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f20597838f9960ac24df0f902958af30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 11495, "upload_time": "2020-04-16T23:34:23", "upload_time_iso_8601": "2020-04-16T23:34:23.608632Z", "url": "https://files.pythonhosted.org/packages/51/05/3783c841f2db8d6c24eb24dd66eb6d051f68a166ff18ffe1caccc67fa399/scons_tool_gcccov-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6922973366e760960537b89853374846", "sha256": "c5b477af87624013185ed22b3f357d002e6adba12401fe097d7f42a0b1086e1a"}, "downloads": -1, "filename": "scons-tool-gcccov-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6922973366e760960537b89853374846", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16249, "upload_time": "2020-04-16T23:34:25", "upload_time_iso_8601": "2020-04-16T23:34:25.564338Z", "url": "https://files.pythonhosted.org/packages/c1/0e/d7c2c0dfa19542a1f823b3c35b18def8b399c38cbdccf581353a1201c282/scons-tool-gcccov-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:08 2020"}