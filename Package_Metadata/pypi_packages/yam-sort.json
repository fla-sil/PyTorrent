{"info": {"author": "John Crawford", "author_email": "psp_dev@crawfishpress.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "## Purpose\n\nEver needed to compare two YAML files, when the keys were **out of order**?  \nMaybe you've tried cutting and pasting to move the keys around, wondering if there's\n*a better way*?   \nWell, now there is - **yam_sort!**\n\nOkay, I may have been watching too much late-night TV. But this library was\nborn out of frustration working with YAML files. \nI was using AWS API-Gateway YAML templates,\nwhich sometimes get exported in *random* order (especially when there are changes to it),\nmaking it hard to \ncompare with git-checked-in copies. After the *nth* time moving keys around, I\ndecided to automate it.\n\n - Do basic diff-ing of YAML files, while ignoring the order of keys/sub-keys.\n - Re-order a second dictionary/YAML file, to match the first file. Ignore missing keys,\n   move extra keys to end of list.\n\nThis is a very narrowly-focussed library - it sorts one YAML file to match the\nkey-order in another YAML file. But I don't know of any other automated way of\ndoing this, and got tired of doing it manually.\n\n## Pip Requirements\n\n- PyYAML==5.1.2\n- virtualenv (optional, but highly recommended)\n\n## Installation\n\n    # activate a virtual environment\n    pip install yam_sort\n\n## Usage\n\n    yam_sort -h  \n    yam_sort -s file_one file_two  # synchronizes second file with first, \n                                     writes to stdout\n    yam_sort -s file_one file_two -o  # synchronizes second file with first, \n                                        overwrites second file\n    yam_sort -k file_one file_two  # lists key-differences between files\n\n```\noptional arguments:\n  -h, --help                                   show this help message and exit\n  -s first second, --sync file_one file_two    sync two YAML files\n  -o, --overwrite                              saves output to second file\n  -k first second, --keys file_one file_two    diff two YAML files by keys only\n```\n\n#### Note\n\nSince the intent of this library is to compare YAML files that were exported from\nAWS API-Gateways, the resulting sorted-file has to be as similar as possible.\nThis includes formatting of the keys/values in the file. AWS exports keys as unquoted,\nand all string-values as quoted. Therefore, this library copies the formatting\nfrom the original file, in the output-file. If a string was double-quoted, it\nwill (should) be double-quoted in the output, and the same for single-quoting, etc.\n\n#### Known Bugs\n\nSome values can be multi-line, particularly in the section:\n - x-amazon-apigateway-gateway-responses:\n\nThese do not get properly copied over to the output-dict.\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Crawfishpress/yam_sort", "keywords": "yaml diff sort", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "yam-sort", "package_url": "https://pypi.org/project/yam-sort/", "platform": "", "project_url": "https://pypi.org/project/yam-sort/", "project_urls": {"Homepage": "https://github.com/Crawfishpress/yam_sort"}, "release_url": "https://pypi.org/project/yam-sort/1.0/", "requires_dist": ["PyYAML (==5.1.2)"], "requires_python": ">=3.6", "summary": "does basic diff-ing of YAML files while ignoring key-order", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Purpose</h2>\n<p>Ever needed to compare two YAML files, when the keys were <strong>out of order</strong>?<br>\nMaybe you've tried cutting and pasting to move the keys around, wondering if there's\n<em>a better way</em>?<br>\nWell, now there is - <strong>yam_sort!</strong></p>\n<p>Okay, I may have been watching too much late-night TV. But this library was\nborn out of frustration working with YAML files.\nI was using AWS API-Gateway YAML templates,\nwhich sometimes get exported in <em>random</em> order (especially when there are changes to it),\nmaking it hard to\ncompare with git-checked-in copies. After the <em>nth</em> time moving keys around, I\ndecided to automate it.</p>\n<ul>\n<li>Do basic diff-ing of YAML files, while ignoring the order of keys/sub-keys.</li>\n<li>Re-order a second dictionary/YAML file, to match the first file. Ignore missing keys,\nmove extra keys to end of list.</li>\n</ul>\n<p>This is a very narrowly-focussed library - it sorts one YAML file to match the\nkey-order in another YAML file. But I don't know of any other automated way of\ndoing this, and got tired of doing it manually.</p>\n<h2>Pip Requirements</h2>\n<ul>\n<li>PyYAML==5.1.2</li>\n<li>virtualenv (optional, but highly recommended)</li>\n</ul>\n<h2>Installation</h2>\n<pre><code># activate a virtual environment\npip install yam_sort\n</code></pre>\n<h2>Usage</h2>\n<pre><code>yam_sort -h  \nyam_sort -s file_one file_two  # synchronizes second file with first, \n                                 writes to stdout\nyam_sort -s file_one file_two -o  # synchronizes second file with first, \n                                    overwrites second file\nyam_sort -k file_one file_two  # lists key-differences between files\n</code></pre>\n<pre><code>optional arguments:\n  -h, --help                                   show this help message and exit\n  -s first second, --sync file_one file_two    sync two YAML files\n  -o, --overwrite                              saves output to second file\n  -k first second, --keys file_one file_two    diff two YAML files by keys only\n</code></pre>\n<h4>Note</h4>\n<p>Since the intent of this library is to compare YAML files that were exported from\nAWS API-Gateways, the resulting sorted-file has to be as similar as possible.\nThis includes formatting of the keys/values in the file. AWS exports keys as unquoted,\nand all string-values as quoted. Therefore, this library copies the formatting\nfrom the original file, in the output-file. If a string was double-quoted, it\nwill (should) be double-quoted in the output, and the same for single-quoting, etc.</p>\n<h4>Known Bugs</h4>\n<p>Some values can be multi-line, particularly in the section:</p>\n<ul>\n<li>x-amazon-apigateway-gateway-responses:</li>\n</ul>\n<p>These do not get properly copied over to the output-dict.</p>\n\n          </div>"}, "last_serial": 6225784, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "dd455ecfec41186eee22fff159940538", "sha256": "349c5b255b180481de04275aa14bbcc5795c8b0c5a1b97d9aca6f90e81c7d299"}, "downloads": -1, "filename": "yam_sort-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd455ecfec41186eee22fff159940538", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7972, "upload_time": "2019-12-01T22:36:36", "upload_time_iso_8601": "2019-12-01T22:36:36.281581Z", "url": "https://files.pythonhosted.org/packages/cc/19/0c2e35953f1fe28d8cfb4482751f8a62942ee3ac5238eede7426e8d54f54/yam_sort-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88a93abac89d9ae24b15f310b142f22a", "sha256": "765c986080b9d832871cb5c2c0a8efbe68353b0acd7577601b45420bcca99f71"}, "downloads": -1, "filename": "yam_sort-1.0.tar.gz", "has_sig": false, "md5_digest": "88a93abac89d9ae24b15f310b142f22a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6653, "upload_time": "2019-12-01T22:36:38", "upload_time_iso_8601": "2019-12-01T22:36:38.323063Z", "url": "https://files.pythonhosted.org/packages/eb/22/60af1afa48397ea7d4ceb38ae0add9a6d380158911ad9ecdf785688b826d/yam_sort-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd455ecfec41186eee22fff159940538", "sha256": "349c5b255b180481de04275aa14bbcc5795c8b0c5a1b97d9aca6f90e81c7d299"}, "downloads": -1, "filename": "yam_sort-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd455ecfec41186eee22fff159940538", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7972, "upload_time": "2019-12-01T22:36:36", "upload_time_iso_8601": "2019-12-01T22:36:36.281581Z", "url": "https://files.pythonhosted.org/packages/cc/19/0c2e35953f1fe28d8cfb4482751f8a62942ee3ac5238eede7426e8d54f54/yam_sort-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88a93abac89d9ae24b15f310b142f22a", "sha256": "765c986080b9d832871cb5c2c0a8efbe68353b0acd7577601b45420bcca99f71"}, "downloads": -1, "filename": "yam_sort-1.0.tar.gz", "has_sig": false, "md5_digest": "88a93abac89d9ae24b15f310b142f22a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6653, "upload_time": "2019-12-01T22:36:38", "upload_time_iso_8601": "2019-12-01T22:36:38.323063Z", "url": "https://files.pythonhosted.org/packages/eb/22/60af1afa48397ea7d4ceb38ae0add9a6d380158911ad9ecdf785688b826d/yam_sort-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:13 2020"}