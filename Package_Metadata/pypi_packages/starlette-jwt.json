{"info": {"author": "Amit Ripshtos", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# starlette-jwt\nJWT Middleware for the pythonic Starlette API framework\n\n# starlette-jwt\n\n[![pypi](https://img.shields.io/pypi/v/starlette_jwt.svg)](https://pypi.org/project/starlette-jwt) [![travis](https://img.shields.io/travis/amitripshtos/starlette-jwt.svg)](https://travis-ci.org/amitripshtos/starlette-jwt) [![codecov](https://codecov.io/gh/amitripshtos/starlette-jwt/branch/master/graph/badge.svg)](https://codecov.io/gh/amitripshtos/starlette-jwt)\n\n\nJSON Web Token Middleware for use with Starlette framework.\n\n## Installation\n\n```\n$ pip install starlette-jwt\n```\n\nAlternatively, install through [pipenv](https://pipenv.readthedocs.io/en/latest/).\n\n```\n$ pipenv install starlette-jwt\n```\n\n## Usage\n\n\nRegister the Middleware with your app.\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette_jwt import JWTAuthenticationBackend\nfrom starlette.middleware.authentication import AuthenticationMiddleware\n\napp = Starlette()\napp.add_middleware(AuthenticationMiddleware, backend=JWTAuthenticationBackend(secret_key='secret', prefix='JWT'))\n\n```\n\nAccess the JWT payload in a request,\nEnforce handlers to be with authentication.\n\nThe `@authentication_required` decorator will enforce the user to be logged in for that route. Meanwhile the `@anonymous_allowed` will allow anonymous users to hit the route. \n\nThe default behavior is `@anonymous_allowed` so your code be explicit.\n\n```python\nfrom starlette.authentication import requires\n\ndef my_handler(request):\n@app.route('/noauth')\n@requires('authenticated')\nasync def homepage(request):\n    return JSONResponse({'payload': request.session})\n```\n\nNot all handlers must be with authentication\n```python\n@app.route('/noauth')\nasync def homepage(request):\n    return JSONResponse({'payload': None})\n```\n\n## Settings\n\n*secret_key*\n\nStore your secret key in this setting while creating the middleware:\n```python\napp.add_middleware(AuthenticationMiddleware, backend=JWTAuthenticationBackend(secret_key='MY SECRET KEY'))\n```\n\n*algorithm*\n\nConfigures the jwt algorithm to use (defaults to \"HS256\", \"RSA256\" available):\n```python\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMHYwEAYHKoZIzj0CAQYFK4EEAC...'\napp.add_middleware(AuthenticationMiddleware, backend=JWTAuthenticationBackend(secret_key=public_key, algorithm='RS256'))\n```\n\n**NOTE:** In order to make starlette-jwt with the RSA256 Algorithm, you must have the package cryptography>=2.7\n\n*prefix*\n\nChange the Authorization header prefix string (defaults to \"JWT\"):\n```python\n# Example: changes the prefix to Bearer\napp.add_middleware(AuthenticationMiddleware, backend=JWTAuthenticationBackend(secret_key='secret', prefix='Bearer'))\n```\n\n*username_field*\n\nThe user name field in the JWT token payload:\n```python\n# Example: changes the username field to \"user\"\napp.add_middleware(AuthenticationMiddleware, backend=JWTAuthenticationBackend(secret_key='secret', username_field='user'))\n```\n\n## Todo\n\n*  Support JWT token standard payload\n*  Set JWT options (time expiration for example)\n\n\n## Developing\n\nThis project uses [`pipenv`](https://docs.pipenv.org) to manage its development environment, and [`pytest`](https://docs.pytest.org) as its tests runner.  To install development dependencies:\n\n```\npipenv install --dev\n```\n\nTo run tests:\n\n```\npipenv shell\npytest\n```\n\nThis project uses [Codecov](https://codecov.io/gh/amitripshtos/starlette-jwt) to enforce code coverage on all pull requests.  To run tests locally and output a code coverage report, run:\n\n```\npipenv shell\npytest --cov=starlette_test/\n```\n\n# Deploying new version to pypi (Maintainers)\n```bash\n\npython3.7 setup.py sdist\ntwine upload --repository-url https://pypi.org/legacy/ dist/*\n\n```\n## Thanks\n*  Starlette project - https://github.com/encode/starlette\n* apistar-jwt project - https://github.com/audiolion/apistar-jwt", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/amitripshtos/starlette-jwt", "keywords": "starlette_jwt", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "starlette-jwt", "package_url": "https://pypi.org/project/starlette-jwt/", "platform": "", "project_url": "https://pypi.org/project/starlette-jwt/", "project_urls": {"Homepage": "https://github.com/amitripshtos/starlette-jwt"}, "release_url": "https://pypi.org/project/starlette-jwt/0.1.7/", "requires_dist": null, "requires_python": "", "summary": "A JSON Web Token Middleware for Starlette", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>starlette-jwt</h1>\n<p>JWT Middleware for the pythonic Starlette API framework</p>\n<h1>starlette-jwt</h1>\n<p><a href=\"https://pypi.org/project/starlette-jwt\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e097d80472185e1842d5e37a84b971e8a6e3ddc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f737461726c657474655f6a77742e737667\"></a> <a href=\"https://travis-ci.org/amitripshtos/starlette-jwt\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34ebcfce55b0e853dfe61231f14fbedac4f7cc74/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f616d69747269707368746f732f737461726c657474652d6a77742e737667\"></a> <a href=\"https://codecov.io/gh/amitripshtos/starlette-jwt\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f94eb085551f0d30457686d9544aedaedd138a4/68747470733a2f2f636f6465636f762e696f2f67682f616d69747269707368746f732f737461726c657474652d6a77742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>JSON Web Token Middleware for use with Starlette framework.</p>\n<h2>Installation</h2>\n<pre><code>$ pip install starlette-jwt\n</code></pre>\n<p>Alternatively, install through <a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">pipenv</a>.</p>\n<pre><code>$ pipenv install starlette-jwt\n</code></pre>\n<h2>Usage</h2>\n<p>Register the Middleware with your app.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette_jwt</span> <span class=\"kn\">import</span> <span class=\"n\">JWTAuthenticationBackend</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware.authentication</span> <span class=\"kn\">import</span> <span class=\"n\">AuthenticationMiddleware</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_middleware</span><span class=\"p\">(</span><span class=\"n\">AuthenticationMiddleware</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">JWTAuthenticationBackend</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'JWT'</span><span class=\"p\">))</span>\n</pre>\n<p>Access the JWT payload in a request,\nEnforce handlers to be with authentication.</p>\n<p>The <code>@authentication_required</code> decorator will enforce the user to be logged in for that route. Meanwhile the <code>@anonymous_allowed</code> will allow anonymous users to hit the route.</p>\n<p>The default behavior is <code>@anonymous_allowed</code> so your code be explicit.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.authentication</span> <span class=\"kn\">import</span> <span class=\"n\">requires</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/noauth'</span><span class=\"p\">)</span>\n<span class=\"nd\">@requires</span><span class=\"p\">(</span><span class=\"s1\">'authenticated'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">homepage</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s1\">'payload'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">})</span>\n</pre>\n<p>Not all handlers must be with authentication</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/noauth'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">homepage</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s1\">'payload'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">})</span>\n</pre>\n<h2>Settings</h2>\n<p><em>secret_key</em></p>\n<p>Store your secret key in this setting while creating the middleware:</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_middleware</span><span class=\"p\">(</span><span class=\"n\">AuthenticationMiddleware</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">JWTAuthenticationBackend</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'MY SECRET KEY'</span><span class=\"p\">))</span>\n</pre>\n<p><em>algorithm</em></p>\n<p>Configures the jwt algorithm to use (defaults to \"HS256\", \"RSA256\" available):</p>\n<pre><span class=\"n\">public_key</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'-----BEGIN PUBLIC KEY-----</span><span class=\"se\">\\n</span><span class=\"s1\">MHYwEAYHKoZIzj0CAQYFK4EEAC...'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_middleware</span><span class=\"p\">(</span><span class=\"n\">AuthenticationMiddleware</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">JWTAuthenticationBackend</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"n\">public_key</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"s1\">'RS256'</span><span class=\"p\">))</span>\n</pre>\n<p><strong>NOTE:</strong> In order to make starlette-jwt with the RSA256 Algorithm, you must have the package cryptography&gt;=2.7</p>\n<p><em>prefix</em></p>\n<p>Change the Authorization header prefix string (defaults to \"JWT\"):</p>\n<pre><span class=\"c1\"># Example: changes the prefix to Bearer</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_middleware</span><span class=\"p\">(</span><span class=\"n\">AuthenticationMiddleware</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">JWTAuthenticationBackend</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'Bearer'</span><span class=\"p\">))</span>\n</pre>\n<p><em>username_field</em></p>\n<p>The user name field in the JWT token payload:</p>\n<pre><span class=\"c1\"># Example: changes the username field to \"user\"</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_middleware</span><span class=\"p\">(</span><span class=\"n\">AuthenticationMiddleware</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">JWTAuthenticationBackend</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">,</span> <span class=\"n\">username_field</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">))</span>\n</pre>\n<h2>Todo</h2>\n<ul>\n<li>Support JWT token standard payload</li>\n<li>Set JWT options (time expiration for example)</li>\n</ul>\n<h2>Developing</h2>\n<p>This project uses <a href=\"https://docs.pipenv.org\" rel=\"nofollow\"><code>pipenv</code></a> to manage its development environment, and <a href=\"https://docs.pytest.org\" rel=\"nofollow\"><code>pytest</code></a> as its tests runner.  To install development dependencies:</p>\n<pre><code>pipenv install --dev\n</code></pre>\n<p>To run tests:</p>\n<pre><code>pipenv shell\npytest\n</code></pre>\n<p>This project uses <a href=\"https://codecov.io/gh/amitripshtos/starlette-jwt\" rel=\"nofollow\">Codecov</a> to enforce code coverage on all pull requests.  To run tests locally and output a code coverage report, run:</p>\n<pre><code>pipenv shell\npytest --cov=starlette_test/\n</code></pre>\n<h1>Deploying new version to pypi (Maintainers)</h1>\n<pre>python3.7 setup.py sdist\ntwine upload --repository-url https://pypi.org/legacy/ dist/*\n</pre>\n<h2>Thanks</h2>\n<ul>\n<li>Starlette project - <a href=\"https://github.com/encode/starlette\" rel=\"nofollow\">https://github.com/encode/starlette</a></li>\n<li>apistar-jwt project - <a href=\"https://github.com/audiolion/apistar-jwt\" rel=\"nofollow\">https://github.com/audiolion/apistar-jwt</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6414861, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "407185a188679a6b2be168bf32180dd4", "sha256": "51686aeb721d8573d4e25779e6030108720bff08d7df447774944ffbe4d7dcef"}, "downloads": -1, "filename": "starlette_jwt-0.1.3.tar.gz", "has_sig": false, "md5_digest": "407185a188679a6b2be168bf32180dd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3876, "upload_time": "2018-12-01T14:36:13", "upload_time_iso_8601": "2018-12-01T14:36:13.583496Z", "url": "https://files.pythonhosted.org/packages/42/71/8e2439706bc1899c24e85ccc39b5da282a0591ae8a3d855882a0e773fcb6/starlette_jwt-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "1ba944a5f5ecb29c17bd88b5ae41fa5b", "sha256": "9eb31061e856d3bb2fb6e7c82ae8e97be0efb90a9a8fd6f3213217162927dd4f"}, "downloads": -1, "filename": "starlette_jwt-0.1.4.tar.gz", "has_sig": false, "md5_digest": "1ba944a5f5ecb29c17bd88b5ae41fa5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3495, "upload_time": "2018-12-08T09:51:08", "upload_time_iso_8601": "2018-12-08T09:51:08.177704Z", "url": "https://files.pythonhosted.org/packages/ff/3f/f9a0f6a0c33d417c0be15ec8496dce8c75acef8132a8ee505fb59f019133/starlette_jwt-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "c90b142dfd66e3846d103e795d07fc3c", "sha256": "b3152d377a32cdfb8ef8395b58369c0c672f3da68efa98ee1df1d717f02fd43d"}, "downloads": -1, "filename": "starlette_jwt-0.1.5.tar.gz", "has_sig": false, "md5_digest": "c90b142dfd66e3846d103e795d07fc3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3735, "upload_time": "2019-09-23T08:33:20", "upload_time_iso_8601": "2019-09-23T08:33:20.770874Z", "url": "https://files.pythonhosted.org/packages/e9/91/c0a97d2b609ca06ec39c95fef4c2f68ee8d7dda3df2659ca067e8619f0dd/starlette_jwt-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "1689d6fd7fe7181f1e901e5409038999", "sha256": "428744f8ac224ebbc710028f2730a56bcd8db594e0e7e5f2b2a987552712ec7b"}, "downloads": -1, "filename": "starlette_jwt-0.1.6.tar.gz", "has_sig": false, "md5_digest": "1689d6fd7fe7181f1e901e5409038999", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3821, "upload_time": "2019-10-22T07:50:46", "upload_time_iso_8601": "2019-10-22T07:50:46.081570Z", "url": "https://files.pythonhosted.org/packages/90/f7/0b2e7c97e338fcdf498da6a6a1dc8a8f6274db0027d450dd066387f6e788/starlette_jwt-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "1f039aaf79bc88fcee2dbebb1230bfa7", "sha256": "b3a1806e322dde7944afa42d2740cdf14fd9608a9856e146e09c1aed03a630f5"}, "downloads": -1, "filename": "starlette_jwt-0.1.7.tar.gz", "has_sig": false, "md5_digest": "1f039aaf79bc88fcee2dbebb1230bfa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3870, "upload_time": "2020-01-08T12:11:45", "upload_time_iso_8601": "2020-01-08T12:11:45.644063Z", "url": "https://files.pythonhosted.org/packages/59/0d/8850c6975522472a5e20d273a600064687789b43411acf2014686273758d/starlette_jwt-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f039aaf79bc88fcee2dbebb1230bfa7", "sha256": "b3a1806e322dde7944afa42d2740cdf14fd9608a9856e146e09c1aed03a630f5"}, "downloads": -1, "filename": "starlette_jwt-0.1.7.tar.gz", "has_sig": false, "md5_digest": "1f039aaf79bc88fcee2dbebb1230bfa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3870, "upload_time": "2020-01-08T12:11:45", "upload_time_iso_8601": "2020-01-08T12:11:45.644063Z", "url": "https://files.pythonhosted.org/packages/59/0d/8850c6975522472a5e20d273a600064687789b43411acf2014686273758d/starlette_jwt-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:36 2020"}