{"info": {"author": "Zachary A. Tanenbaum", "author_email": "ZachTanenbaum+service_framework@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# Service Framework\n\n## Installing\n### As a Library\n```\npip install service_framework\n```\n### For Debugging\nTo install locally for testing run the following command from the base directory.\n```\npip install -e .\n```\n\n\n\n## Running\n### From Command Line\nRun the following from the directory the Service Framework was locally built.\nAs this directory houses the packaged Service Framework as a python \"Egg\" file.\n```\npython -m service_framework\n\n# OR\n\nservice_framework\n```\n#### Useful Comamnd Line Arguments\nBelow are a few useful arguments...\n```\n# Used for Service Setup\n-a  Addresses Path (Relative)\n-c  Config Path\n-m  Main Mode Flag\n-s  Service Path (Relative)\n\n# Used for Logging\n-cl Console Log Level\n-f  File Log Level\n-bc Backup Count (Number of hourly log files to keep)\n-l  Log Path (Relative)\n```\n### As An Object\nTo allow multiple services to be run in sync and programmatically created or destroyed it has been neatly packaged into a class for use.\nThe [Service Class](src/service_framework/service) should mirror the same requirements as running the framework from the command line.\nQuite frankly, because running it from the command line just uses this class underneath.\nBelow are the commands on how to use this class:\n```\n# Useage Example\n\nfrom service_framework import Service\n\nservice_relative_path = './path_to_service_file/service_specification.py'\nconfig = {'some_config_key': 'some_config_value'}\naddresses = {'look below this can get complicated'}\n\nmy_service = Service(service_relative_path, config=config, addresses=addresses)\n\n\n# To run the service as a \"main service\" or in \"main mode\" in the background.\nmy_service.run_service_as_main()\n\n# To run the service regularly and in the background/non-blocking.\nmy_service.run_service()\n\n# To stop the service's execution.\nmy_service.stop_service()\n\n# To run the service in it's respective mode and block (stop execution past this line):\nmy_service.run_service_as_main_blocking()\nmy_service.run_service_blocking()\n``` \n\n#### Useful Optional Arguments\nHere are some other, optional parameters, that can be passed into the Service object:\n```\nconsole_loglevel='INFO'\nlog_path=None\nfile_loglevel='INFO'\nbackup_count=24\n```\nThese Parameters are the same as their command line compatriates.\n\n\n#### Logging\nTo log inside of your service file import the logger that's precreated.\n```\nfrom service_framework import get_logger\n\nLOG = get_logger()\n```\n\n\n#### Addresses Path\nIf the addresses path is provided, the addresses json file will be loaded into the service framework.\nThis allows the framework to setup each connection of the services connections.\nExample:\n```\n# Command\n-a \"./addresses.json\"\n\n# Addresses.json\n{\n  \"connections\": {\n    \"in\": {\n      \"connection_name\": {\n        \"socket_name\": \"127.0.0.1:8001\",\n        \"socket_name_2: \"127.0.0.1:8002\"\n      },\n      \"connection_name_2\": {\n        \"socket_name\": \"256.128.65.1:9000\"\n      },\n    },\n    \"out\": {}\n  },\n  \"states\": {\n    \"in\": {\n      \"state_name\": {\n        \"socket_name\": \"127.0.0.1:9001\",\n        \"socket_name_2\": \"127.0.0.1:9002\"\n      },\n      \"state_name_2\": {\n        \"socket_name\": \"111.111.11.1:2222\"\n      },\n    },\n    \"out\": {},\n  }\n}\n```\n\n#### Config Path\nThis is the relative path to the config json file that will be passed into the service. This file is not required but is useful if one wants to pass configuration information into a service.\nExample:\n```\n# Command:\n-c \"./config.json\"\n\n# Example Config.json:\n{\n  \"required\": {\n    \"config_property_1\": 12345,\n    \"config_property_2\": [\"list_item_1\", \"list_item_2\", \"list_item_3\"],\n    \"config_property_3\": {\n      \"key_1\": \"value_1\",\n      \"key_2\": \"value_2\"\n    }\n  },\n  \"optional\": {\n    \"config_property_4\": \"TestTestTest\"\n  }\n}\n```\n\n#### Main Mode Flag\nThis flag is used to start the service in \"main\\_mode\".\nThis mode __DOES NOT__ allow the use of inbound connections or states at all.\nIt simply runs the provided main function in the service and all the connections/statess corresponding with the provided models.\nThe main function must have a predefined signature seen below.\n\n```\n# Example main function\ndef main(to_send, config):\n```\n\n#### Service Path\nThis is the relative path to the service python file that will be used for starting and running the service.\n```\n# Command\n-s \"./service.json\"\n```\n\n### Custom Environmental Arguments\nAny additional arguments that are passed will automatically be added to the config. See below for an example...\n```\n# Calling the below\npython -m service_framework -s ./service.py --random_variable HELLO\n\n# Will cause a config similar to below\nconfig = {\n    'random_variable': 'HELLO',\n}\n```\n\n### Help Command\nUse the below command to get a helpful output for the service framework.\n```\npython -m service_framework -h\n```\n\n\n\n## Building Blocks\nAn abstract overview of the building blocks.\n\n### Connections\nConnections are the glue that holds services together.\nAny communication between services should be done via connections.\n\n### Leading Edge Services\nThese are services that use the \"main mode\".\nIf all services are plotted as a graph where they are connected by connections these services have no inbound connections from other services.\n\n### Services\nA service is a block of code that does one thing and one thing well.\nThe goal of this framework is to make spinning up and dealing with a large number of services easily.\n\n### States\nStates are where information is stored in the system.\nAny service is able to write to and get the most updated state.\n\n\n\n## Implementation\n### Leading Edge Services\n#### Required Methods\n- Main Method\n  - Only Method called in this service\n  - ex. `main(to_send, states, config)`\n#### Optional Methods\n- Setup Configs\n  - ex. `setup_configs(config)`\n  - This method is called before the main method.\n  - This method is used to update the config before it's used.\n  - This method merges the responses with the provided config. (Overwrites keys)\n  - ex.\n```\nreturn {\n    'required': {\n        'argument_1': 'first_argument',\n    },\n    'optional': {\n        'argument_2': 'the_second_argument',\n    },\n}\n```\n- Setup Connections\n  - ex. `setup_connections(config)`\n  - This method is called at the start of the service\n  - This method must return all arguments for the given connection name.\n  - ex. \n```\nreturn {\n  'connection_name_1': {\n    'argument_1': 'value',\n    'argument_2': 123, \n  },\n  'connection_name_2': {\n    'argument_1': 'test_test',\n  },\n}\n```\n- Setup States\n  - ex. `setup_states(config)`\n  - This method is only required if a state has required arguments\n  - This method is called at the start of the service\n  - This method must return all arguments for the given state name.\n  - ex.\n```\nreturn {\n  'state_name_1': {\n    'argument_1': 'value',\n    'argument_2': 123, \n  },\n  'state_name_2': {\n    'argument_1': 'test_test',\n  },\n}\n```\n- Sigint Handler\n  - ex. `sigint_handler(sigint, frame, to_send, states, config)`\n  - This method is called whenever a sigint is provided.\n#### Optional Models\nEach Model is only required if it's used in the leading edge service.\n  - `config_model`\n  - `connection_models`\n  - `state_models`\n\n\n### Services\n#### Required Methods\n- Method for each \"in\" Connection Model\n  - This method is called whenever a message from this connection is recieved\n  - The mapping between function and model is located in the model\n  - ex. `function_name_in_conn_model(args, to_send, states, config)`\n\n#### Optional Methods\n- Setup Connections Method\n  - ex. `setup_connections(config)`\n  - This method is only required if a connection has required arguments\n  - This method is called at the start of the service\n  - This method must return all arguments for the given connection name.\n  - ex. \n```\nreturn {\n  'connection_name_1': {\n    'argument_1': 'value',\n    'argument_2': 123, \n  },\n  'connection_name_2': {\n    'argument_1': 'test_test',\n  },\n}\n```\n- Setup States Model\n  - ex. `setup_states(config)`\n  - This method is only required if a state has required arguments\n  - This method is called at the start of the service\n  - This method must return all arguments for the given state name.\n  - ex.\n```\nreturn {\n  'state_name_1': {\n    'argument_1': 'value',\n    'argument_2': 123, \n  },\n  'state_name_2': {\n    'argument_1': 'test_test',\n  },\n}\n```\n- Sigint Handler\n  - ex. `sigint_handler(sigint, frame, to_send, states, config)`\n  - This method is called whenever a sigint is provided.\n\n- Init Function\n  - ex. `init_function(to_send, states, config)`\n  - This method is called before the main method or service framework.\n\n\n#### Optional Models\nModels are only needed if used in the service.\n  - `config_model`\n  - `connection_models`\n  - `state_models`\n\n### States\nStates are an abstract concept. They're used to hold information and are implemented entirely by the framework. All you, the developer, has to implement is the state models.\n\n### Parameters Passed\n#### \"args\"::dict\nWhen this function is called these are the \"arguments\" passed. These arguments are pulled from the in connector that is associated with this function.\n\n#### \"to\\_send\"::function\n```\ndef to_send(output_type, output_name, args):\n    \"\"\"\n    output_type::str Either 'state' or 'connection' depending on which to update.\n    output_name::str The name of the above output defined in the corresponding model.\n    args::{'str': value} This is a dict of the args to be passed to the connection.\n    \"\"\"\n```\nThis function takes the provided args and sends them to the desired output. If a connection is chosen, this method sends the arguments to the desired connection. If a state is chosen, this method sends the arguments to update that state.\n\n#### states::dict\nThis is a dictionary that holds all of the current up-to-date state information that's defined in the model. All input states will be in this state dictionary as the following example:\n```\nstates = {\n    \"state_name_1\": 'value!',\n    \"state_name_2\": {\n        'key_1': Decimal(123.321),\n    },\n    \"state_name_3\": ['value1', 1234, 'value3'],\n}\n```\n\n#### \"config\"::dict\nThis is a dictionary that is a culmination of config file data and environment variables.\n\n\n## Model Layout\n\n### Config Model\n#### Overview\nIt's a key value store of config information that is passed into the model.\n#### Example\n```\nconfig_model = {\n    'required': {       # Optional\n        'symbol': str,\n    },\n    'optional': {},     # Optional\n}\n\n```\n\n### Connection Models\n#### Overview\nTriggers work/functions between different services.\n#### Example\n```\nconnection_models = {\n    'in': {\n        'cancel_order': {\n            'connection_type': 'replyer',                  # Required\n            'required_creation_arguments': {               # Optional\n                'on_new_cancel_order: on_new_cancel_order, # Optional\n            },\n            'optional_creation_arguments': {},             # Optional\n            'required_connection_arguments': {},           # Depends on the Connection\n            'optional_connection_arguments': {},           # Depends on the Connection\n            'required_arguments': {                        # Optional\n                'order_id': str,\n            },\n            'optional_arguments': {},                      # Optional\n            'required_return_arguments': {                 # Optional\n                'order_id': str,\n            },\n            'optional_return_arguments': {},               # Optional\n        }\n    },\n    'out': {\n        'cancel_order_on_coinbase': {\n            'connection_type': 'external_target',     # Required\n            'required_creation_arguments': {          # Optional\n                'target': 'CbproClient.cancel_order', \n            },\n            'optional_creation_arguments': {}         # Optional\n            'required_connection_arguments': {},      # Depends on the Connection\n            'optional_connection_arguments': {},      # Depends on the Connection\n            'required_arguments': {                   # Optional\n                'order_id': str,\n            },\n            'optional_arguments': {},                 # Optional\n            'required_return_arguments': None,        # Optional\n            'optional_return_arguments': None,        # Optional\n        },\n    },\n}\n```\n\n### State Model\n#### Overview\nThe state holds information and can either be a database, local variable, global variable, etc.\n#### Example\n```\nstate_models = {\n    'in': {\n        'market_price': {\n            'state_type': 'local_variable_delta_update', # Required\n            'required_creation_arguments': {},           # Optional\n            'optional_creation_arguments': {},           # Optional\n            'required_state_arguments': {},              # Depends on the State\n            'optional_state_arguments': {},              # Depends on the State\n            'required_arguments': {                      # Optional\n                'min_ask': Decimal,\n                'max_bid': Decimal,\n                'time_ask': datetime,\n                'time_bid': datetime,\n            },\n            'optional_arguments': {},                    # Optional\n            'required_return_arguments': {},             # Optional\n            'optional_return_arguments': {},             # Optional\n        },\n        'order_book': {\n            'state_type': 'local_variable_delta_update', # Required\n            'required_creation_arguments': {},           # Optional\n            'optional_creation_arguments': {},           # Optional\n            'required_state_arguments': {},              # Depends on the State\n            'optional_state_arguments': {},              # Depends on the State\n            'required_arguments': {                      # Optional\n                'asks': {Decimal: Decimal},\n                'bids': {Decimal: Decimal},\n                'updated_time': datetime,\n            },\n            'optional_arguments': {},                    # Optional\n            'required_return_arguments': {},             # Optional\n            'optional_return_arguments': {},             # Optional\n        },\n    },\n}\n```\n\n\n\n## Connection Types\n### In\n#### Replyer\nUsed to wrap a ZMQ \"Replyer\" socket.\nTriggers a provided method on new requester message.\n[Link to Replyer File](src/service_framework/connections/in/replyer.py)\n\n#### Subscriber\nUsed to wrap a ZMQ \"Subscriber\" socket.\nTriggers a provided method on a new published message.\nAlso has XSUB support.\n[Link to Subscriber File](src/service_framework/connections/in/subscriber.py)\n\n### Out\n### External Target\nUsed to wrap an external call and make sure all of the arguments are properly formatted and returned.\nCan use ``to_send('connection', 'external_target_name', {'args': 'here'}`` to send a payload to the external service.\n\n#### Publisher\nUsed to wrap a ZMQ \"Publisher\" socket.\nCan use ``to_send('connection', 'publisher_conn_name', {'args': 'here'}`` to send a payload to the connected subscribers.\nAlso has XPUB support.\n[Link to Publisher File](src/service_framework/connections/out/publisher.py)\n\n#### Requester\nUsed to wrap a ZMQ \"Requester\" socket.\nCan use ``to_send('connection', 'requester_conn_name', {'args': 'here'}`` to send a payload to the connected replyer.\n[Link to Requester File](src/service_framework/connections/out/requester.py)\n\n\n## State Types\n### In\n#### Delta Update In\nThis state is used to perform delta updates.\nIf a new message is marked as a snapshot it will overwrite the local state.\nOtherwise it will make sure the local state is exact with the tied to Delta Update Out State via the current number and perform only a delta update to the local state.\n[Link to Delta Update In File](src/service_framework/states/in/delta_update_in.py)\n\n#### Full Update In\nThis state is used to perform full updates.\nIf a new message is sent by the corresponding Full Update Out state it will fully overwrite the local state.\n[Link to Full Update In File](src/service_framework/states/in/full_update_in.py)\n\n\n### Out\n#### Delta Update Out\nThis state is used to output delta updates.\nIf a payload is sent with the ``is_snapshat`` field set to True, then the dependant states will fully update their local state.\nOtherwise, the dependant states will only perform a delta update based on the provided information.\n[Link to Delta Update Out File](src/service_framework/states/out/delta_update_out.py)\n\n\n#### Full Update Out\nThis state is used to perform a full update.\nWhenever a new message is recived it fully updates the local state.\n[Link to Full Update Out File](src/service_framework/states/out/full_update_out.py)\n\n\n\n## Field and Argument Examples\n### Dictionary\n```\n# Abstract Model Representation\n'dictionary_argument': {Type: Type},\n\n# Actually Passed\n'dictionary_argument': {Decimal: Decimal},\n```\n\n\n## Service Framework Running Workflow\n- Load Service File to get models\n- Config:\n  - Get config file location\n  - Get additional environmental variables\n  - Run setup\\_config function\n  - Check config parameters\n- Addresses:\n  - Load addresses config\n  - Run setup\\_addresses if available\n- Connections:\n  - Load Connections Config\n  - Run setup\\_connections function\n  - Get connections (in and out)\n- States:\n  - Load States Config\n  - Run setup\\_states function\n  - Get states (in and out)\n- Sigint Handler:\n  - Sets up Sigint handling if needed \n  - Runs sigint\\_handler\n- Init Function:\n  - Run init\\_function before running main or service loop\n- Runs either main or service loop\n- [Honestly, check the ``entrance_point`` method](src/service_framework/utils/service_utils)\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ZacharyATanenbaum/service_framework", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "service-framework", "package_url": "https://pypi.org/project/service-framework/", "platform": "", "project_url": "https://pypi.org/project/service-framework/", "project_urls": {"Homepage": "https://github.com/ZacharyATanenbaum/service_framework"}, "release_url": "https://pypi.org/project/service-framework/0.0.8/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package for re-defining microservice architecture", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Service Framework</h1>\n<h2>Installing</h2>\n<h3>As a Library</h3>\n<pre><code>pip install service_framework\n</code></pre>\n<h3>For Debugging</h3>\n<p>To install locally for testing run the following command from the base directory.</p>\n<pre><code>pip install -e .\n</code></pre>\n<h2>Running</h2>\n<h3>From Command Line</h3>\n<p>Run the following from the directory the Service Framework was locally built.\nAs this directory houses the packaged Service Framework as a python \"Egg\" file.</p>\n<pre><code>python -m service_framework\n\n# OR\n\nservice_framework\n</code></pre>\n<h4>Useful Comamnd Line Arguments</h4>\n<p>Below are a few useful arguments...</p>\n<pre><code># Used for Service Setup\n-a  Addresses Path (Relative)\n-c  Config Path\n-m  Main Mode Flag\n-s  Service Path (Relative)\n\n# Used for Logging\n-cl Console Log Level\n-f  File Log Level\n-bc Backup Count (Number of hourly log files to keep)\n-l  Log Path (Relative)\n</code></pre>\n<h3>As An Object</h3>\n<p>To allow multiple services to be run in sync and programmatically created or destroyed it has been neatly packaged into a class for use.\nThe <a href=\"src/service_framework/service\" rel=\"nofollow\">Service Class</a> should mirror the same requirements as running the framework from the command line.\nQuite frankly, because running it from the command line just uses this class underneath.\nBelow are the commands on how to use this class:</p>\n<pre><code># Useage Example\n\nfrom service_framework import Service\n\nservice_relative_path = './path_to_service_file/service_specification.py'\nconfig = {'some_config_key': 'some_config_value'}\naddresses = {'look below this can get complicated'}\n\nmy_service = Service(service_relative_path, config=config, addresses=addresses)\n\n\n# To run the service as a \"main service\" or in \"main mode\" in the background.\nmy_service.run_service_as_main()\n\n# To run the service regularly and in the background/non-blocking.\nmy_service.run_service()\n\n# To stop the service's execution.\nmy_service.stop_service()\n\n# To run the service in it's respective mode and block (stop execution past this line):\nmy_service.run_service_as_main_blocking()\nmy_service.run_service_blocking()\n</code></pre>\n<h4>Useful Optional Arguments</h4>\n<p>Here are some other, optional parameters, that can be passed into the Service object:</p>\n<pre><code>console_loglevel='INFO'\nlog_path=None\nfile_loglevel='INFO'\nbackup_count=24\n</code></pre>\n<p>These Parameters are the same as their command line compatriates.</p>\n<h4>Logging</h4>\n<p>To log inside of your service file import the logger that's precreated.</p>\n<pre><code>from service_framework import get_logger\n\nLOG = get_logger()\n</code></pre>\n<h4>Addresses Path</h4>\n<p>If the addresses path is provided, the addresses json file will be loaded into the service framework.\nThis allows the framework to setup each connection of the services connections.\nExample:</p>\n<pre><code># Command\n-a \"./addresses.json\"\n\n# Addresses.json\n{\n  \"connections\": {\n    \"in\": {\n      \"connection_name\": {\n        \"socket_name\": \"127.0.0.1:8001\",\n        \"socket_name_2: \"127.0.0.1:8002\"\n      },\n      \"connection_name_2\": {\n        \"socket_name\": \"256.128.65.1:9000\"\n      },\n    },\n    \"out\": {}\n  },\n  \"states\": {\n    \"in\": {\n      \"state_name\": {\n        \"socket_name\": \"127.0.0.1:9001\",\n        \"socket_name_2\": \"127.0.0.1:9002\"\n      },\n      \"state_name_2\": {\n        \"socket_name\": \"111.111.11.1:2222\"\n      },\n    },\n    \"out\": {},\n  }\n}\n</code></pre>\n<h4>Config Path</h4>\n<p>This is the relative path to the config json file that will be passed into the service. This file is not required but is useful if one wants to pass configuration information into a service.\nExample:</p>\n<pre><code># Command:\n-c \"./config.json\"\n\n# Example Config.json:\n{\n  \"required\": {\n    \"config_property_1\": 12345,\n    \"config_property_2\": [\"list_item_1\", \"list_item_2\", \"list_item_3\"],\n    \"config_property_3\": {\n      \"key_1\": \"value_1\",\n      \"key_2\": \"value_2\"\n    }\n  },\n  \"optional\": {\n    \"config_property_4\": \"TestTestTest\"\n  }\n}\n</code></pre>\n<h4>Main Mode Flag</h4>\n<p>This flag is used to start the service in \"main_mode\".\nThis mode <strong>DOES NOT</strong> allow the use of inbound connections or states at all.\nIt simply runs the provided main function in the service and all the connections/statess corresponding with the provided models.\nThe main function must have a predefined signature seen below.</p>\n<pre><code># Example main function\ndef main(to_send, config):\n</code></pre>\n<h4>Service Path</h4>\n<p>This is the relative path to the service python file that will be used for starting and running the service.</p>\n<pre><code># Command\n-s \"./service.json\"\n</code></pre>\n<h3>Custom Environmental Arguments</h3>\n<p>Any additional arguments that are passed will automatically be added to the config. See below for an example...</p>\n<pre><code># Calling the below\npython -m service_framework -s ./service.py --random_variable HELLO\n\n# Will cause a config similar to below\nconfig = {\n    'random_variable': 'HELLO',\n}\n</code></pre>\n<h3>Help Command</h3>\n<p>Use the below command to get a helpful output for the service framework.</p>\n<pre><code>python -m service_framework -h\n</code></pre>\n<h2>Building Blocks</h2>\n<p>An abstract overview of the building blocks.</p>\n<h3>Connections</h3>\n<p>Connections are the glue that holds services together.\nAny communication between services should be done via connections.</p>\n<h3>Leading Edge Services</h3>\n<p>These are services that use the \"main mode\".\nIf all services are plotted as a graph where they are connected by connections these services have no inbound connections from other services.</p>\n<h3>Services</h3>\n<p>A service is a block of code that does one thing and one thing well.\nThe goal of this framework is to make spinning up and dealing with a large number of services easily.</p>\n<h3>States</h3>\n<p>States are where information is stored in the system.\nAny service is able to write to and get the most updated state.</p>\n<h2>Implementation</h2>\n<h3>Leading Edge Services</h3>\n<h4>Required Methods</h4>\n<ul>\n<li>Main Method\n<ul>\n<li>Only Method called in this service</li>\n<li>ex. <code>main(to_send, states, config)</code></li>\n</ul>\n</li>\n</ul>\n<h4>Optional Methods</h4>\n<ul>\n<li>Setup Configs\n<ul>\n<li>ex. <code>setup_configs(config)</code></li>\n<li>This method is called before the main method.</li>\n<li>This method is used to update the config before it's used.</li>\n<li>This method merges the responses with the provided config. (Overwrites keys)</li>\n<li>ex.</li>\n</ul>\n</li>\n</ul>\n<pre><code>return {\n    'required': {\n        'argument_1': 'first_argument',\n    },\n    'optional': {\n        'argument_2': 'the_second_argument',\n    },\n}\n</code></pre>\n<ul>\n<li>Setup Connections\n<ul>\n<li>ex. <code>setup_connections(config)</code></li>\n<li>This method is called at the start of the service</li>\n<li>This method must return all arguments for the given connection name.</li>\n<li>ex.</li>\n</ul>\n</li>\n</ul>\n<pre><code>return {\n  'connection_name_1': {\n    'argument_1': 'value',\n    'argument_2': 123, \n  },\n  'connection_name_2': {\n    'argument_1': 'test_test',\n  },\n}\n</code></pre>\n<ul>\n<li>Setup States\n<ul>\n<li>ex. <code>setup_states(config)</code></li>\n<li>This method is only required if a state has required arguments</li>\n<li>This method is called at the start of the service</li>\n<li>This method must return all arguments for the given state name.</li>\n<li>ex.</li>\n</ul>\n</li>\n</ul>\n<pre><code>return {\n  'state_name_1': {\n    'argument_1': 'value',\n    'argument_2': 123, \n  },\n  'state_name_2': {\n    'argument_1': 'test_test',\n  },\n}\n</code></pre>\n<ul>\n<li>Sigint Handler\n<ul>\n<li>ex. <code>sigint_handler(sigint, frame, to_send, states, config)</code></li>\n<li>This method is called whenever a sigint is provided.</li>\n</ul>\n</li>\n</ul>\n<h4>Optional Models</h4>\n<p>Each Model is only required if it's used in the leading edge service.</p>\n<ul>\n<li><code>config_model</code></li>\n<li><code>connection_models</code></li>\n<li><code>state_models</code></li>\n</ul>\n<h3>Services</h3>\n<h4>Required Methods</h4>\n<ul>\n<li>Method for each \"in\" Connection Model\n<ul>\n<li>This method is called whenever a message from this connection is recieved</li>\n<li>The mapping between function and model is located in the model</li>\n<li>ex. <code>function_name_in_conn_model(args, to_send, states, config)</code></li>\n</ul>\n</li>\n</ul>\n<h4>Optional Methods</h4>\n<ul>\n<li>Setup Connections Method\n<ul>\n<li>ex. <code>setup_connections(config)</code></li>\n<li>This method is only required if a connection has required arguments</li>\n<li>This method is called at the start of the service</li>\n<li>This method must return all arguments for the given connection name.</li>\n<li>ex.</li>\n</ul>\n</li>\n</ul>\n<pre><code>return {\n  'connection_name_1': {\n    'argument_1': 'value',\n    'argument_2': 123, \n  },\n  'connection_name_2': {\n    'argument_1': 'test_test',\n  },\n}\n</code></pre>\n<ul>\n<li>Setup States Model\n<ul>\n<li>ex. <code>setup_states(config)</code></li>\n<li>This method is only required if a state has required arguments</li>\n<li>This method is called at the start of the service</li>\n<li>This method must return all arguments for the given state name.</li>\n<li>ex.</li>\n</ul>\n</li>\n</ul>\n<pre><code>return {\n  'state_name_1': {\n    'argument_1': 'value',\n    'argument_2': 123, \n  },\n  'state_name_2': {\n    'argument_1': 'test_test',\n  },\n}\n</code></pre>\n<ul>\n<li>\n<p>Sigint Handler</p>\n<ul>\n<li>ex. <code>sigint_handler(sigint, frame, to_send, states, config)</code></li>\n<li>This method is called whenever a sigint is provided.</li>\n</ul>\n</li>\n<li>\n<p>Init Function</p>\n<ul>\n<li>ex. <code>init_function(to_send, states, config)</code></li>\n<li>This method is called before the main method or service framework.</li>\n</ul>\n</li>\n</ul>\n<h4>Optional Models</h4>\n<p>Models are only needed if used in the service.</p>\n<ul>\n<li><code>config_model</code></li>\n<li><code>connection_models</code></li>\n<li><code>state_models</code></li>\n</ul>\n<h3>States</h3>\n<p>States are an abstract concept. They're used to hold information and are implemented entirely by the framework. All you, the developer, has to implement is the state models.</p>\n<h3>Parameters Passed</h3>\n<h4>\"args\"::dict</h4>\n<p>When this function is called these are the \"arguments\" passed. These arguments are pulled from the in connector that is associated with this function.</p>\n<h4>\"to_send\"::function</h4>\n<pre><code>def to_send(output_type, output_name, args):\n    \"\"\"\n    output_type::str Either 'state' or 'connection' depending on which to update.\n    output_name::str The name of the above output defined in the corresponding model.\n    args::{'str': value} This is a dict of the args to be passed to the connection.\n    \"\"\"\n</code></pre>\n<p>This function takes the provided args and sends them to the desired output. If a connection is chosen, this method sends the arguments to the desired connection. If a state is chosen, this method sends the arguments to update that state.</p>\n<h4>states::dict</h4>\n<p>This is a dictionary that holds all of the current up-to-date state information that's defined in the model. All input states will be in this state dictionary as the following example:</p>\n<pre><code>states = {\n    \"state_name_1\": 'value!',\n    \"state_name_2\": {\n        'key_1': Decimal(123.321),\n    },\n    \"state_name_3\": ['value1', 1234, 'value3'],\n}\n</code></pre>\n<h4>\"config\"::dict</h4>\n<p>This is a dictionary that is a culmination of config file data and environment variables.</p>\n<h2>Model Layout</h2>\n<h3>Config Model</h3>\n<h4>Overview</h4>\n<p>It's a key value store of config information that is passed into the model.</p>\n<h4>Example</h4>\n<pre><code>config_model = {\n    'required': {       # Optional\n        'symbol': str,\n    },\n    'optional': {},     # Optional\n}\n\n</code></pre>\n<h3>Connection Models</h3>\n<h4>Overview</h4>\n<p>Triggers work/functions between different services.</p>\n<h4>Example</h4>\n<pre><code>connection_models = {\n    'in': {\n        'cancel_order': {\n            'connection_type': 'replyer',                  # Required\n            'required_creation_arguments': {               # Optional\n                'on_new_cancel_order: on_new_cancel_order, # Optional\n            },\n            'optional_creation_arguments': {},             # Optional\n            'required_connection_arguments': {},           # Depends on the Connection\n            'optional_connection_arguments': {},           # Depends on the Connection\n            'required_arguments': {                        # Optional\n                'order_id': str,\n            },\n            'optional_arguments': {},                      # Optional\n            'required_return_arguments': {                 # Optional\n                'order_id': str,\n            },\n            'optional_return_arguments': {},               # Optional\n        }\n    },\n    'out': {\n        'cancel_order_on_coinbase': {\n            'connection_type': 'external_target',     # Required\n            'required_creation_arguments': {          # Optional\n                'target': 'CbproClient.cancel_order', \n            },\n            'optional_creation_arguments': {}         # Optional\n            'required_connection_arguments': {},      # Depends on the Connection\n            'optional_connection_arguments': {},      # Depends on the Connection\n            'required_arguments': {                   # Optional\n                'order_id': str,\n            },\n            'optional_arguments': {},                 # Optional\n            'required_return_arguments': None,        # Optional\n            'optional_return_arguments': None,        # Optional\n        },\n    },\n}\n</code></pre>\n<h3>State Model</h3>\n<h4>Overview</h4>\n<p>The state holds information and can either be a database, local variable, global variable, etc.</p>\n<h4>Example</h4>\n<pre><code>state_models = {\n    'in': {\n        'market_price': {\n            'state_type': 'local_variable_delta_update', # Required\n            'required_creation_arguments': {},           # Optional\n            'optional_creation_arguments': {},           # Optional\n            'required_state_arguments': {},              # Depends on the State\n            'optional_state_arguments': {},              # Depends on the State\n            'required_arguments': {                      # Optional\n                'min_ask': Decimal,\n                'max_bid': Decimal,\n                'time_ask': datetime,\n                'time_bid': datetime,\n            },\n            'optional_arguments': {},                    # Optional\n            'required_return_arguments': {},             # Optional\n            'optional_return_arguments': {},             # Optional\n        },\n        'order_book': {\n            'state_type': 'local_variable_delta_update', # Required\n            'required_creation_arguments': {},           # Optional\n            'optional_creation_arguments': {},           # Optional\n            'required_state_arguments': {},              # Depends on the State\n            'optional_state_arguments': {},              # Depends on the State\n            'required_arguments': {                      # Optional\n                'asks': {Decimal: Decimal},\n                'bids': {Decimal: Decimal},\n                'updated_time': datetime,\n            },\n            'optional_arguments': {},                    # Optional\n            'required_return_arguments': {},             # Optional\n            'optional_return_arguments': {},             # Optional\n        },\n    },\n}\n</code></pre>\n<h2>Connection Types</h2>\n<h3>In</h3>\n<h4>Replyer</h4>\n<p>Used to wrap a ZMQ \"Replyer\" socket.\nTriggers a provided method on new requester message.\n<a href=\"src/service_framework/connections/in/replyer.py\" rel=\"nofollow\">Link to Replyer File</a></p>\n<h4>Subscriber</h4>\n<p>Used to wrap a ZMQ \"Subscriber\" socket.\nTriggers a provided method on a new published message.\nAlso has XSUB support.\n<a href=\"src/service_framework/connections/in/subscriber.py\" rel=\"nofollow\">Link to Subscriber File</a></p>\n<h3>Out</h3>\n<h3>External Target</h3>\n<p>Used to wrap an external call and make sure all of the arguments are properly formatted and returned.\nCan use <code>to_send('connection', 'external_target_name', {'args': 'here'}</code> to send a payload to the external service.</p>\n<h4>Publisher</h4>\n<p>Used to wrap a ZMQ \"Publisher\" socket.\nCan use <code>to_send('connection', 'publisher_conn_name', {'args': 'here'}</code> to send a payload to the connected subscribers.\nAlso has XPUB support.\n<a href=\"src/service_framework/connections/out/publisher.py\" rel=\"nofollow\">Link to Publisher File</a></p>\n<h4>Requester</h4>\n<p>Used to wrap a ZMQ \"Requester\" socket.\nCan use <code>to_send('connection', 'requester_conn_name', {'args': 'here'}</code> to send a payload to the connected replyer.\n<a href=\"src/service_framework/connections/out/requester.py\" rel=\"nofollow\">Link to Requester File</a></p>\n<h2>State Types</h2>\n<h3>In</h3>\n<h4>Delta Update In</h4>\n<p>This state is used to perform delta updates.\nIf a new message is marked as a snapshot it will overwrite the local state.\nOtherwise it will make sure the local state is exact with the tied to Delta Update Out State via the current number and perform only a delta update to the local state.\n<a href=\"src/service_framework/states/in/delta_update_in.py\" rel=\"nofollow\">Link to Delta Update In File</a></p>\n<h4>Full Update In</h4>\n<p>This state is used to perform full updates.\nIf a new message is sent by the corresponding Full Update Out state it will fully overwrite the local state.\n<a href=\"src/service_framework/states/in/full_update_in.py\" rel=\"nofollow\">Link to Full Update In File</a></p>\n<h3>Out</h3>\n<h4>Delta Update Out</h4>\n<p>This state is used to output delta updates.\nIf a payload is sent with the <code>is_snapshat</code> field set to True, then the dependant states will fully update their local state.\nOtherwise, the dependant states will only perform a delta update based on the provided information.\n<a href=\"src/service_framework/states/out/delta_update_out.py\" rel=\"nofollow\">Link to Delta Update Out File</a></p>\n<h4>Full Update Out</h4>\n<p>This state is used to perform a full update.\nWhenever a new message is recived it fully updates the local state.\n<a href=\"src/service_framework/states/out/full_update_out.py\" rel=\"nofollow\">Link to Full Update Out File</a></p>\n<h2>Field and Argument Examples</h2>\n<h3>Dictionary</h3>\n<pre><code># Abstract Model Representation\n'dictionary_argument': {Type: Type},\n\n# Actually Passed\n'dictionary_argument': {Decimal: Decimal},\n</code></pre>\n<h2>Service Framework Running Workflow</h2>\n<ul>\n<li>Load Service File to get models</li>\n<li>Config:\n<ul>\n<li>Get config file location</li>\n<li>Get additional environmental variables</li>\n<li>Run setup_config function</li>\n<li>Check config parameters</li>\n</ul>\n</li>\n<li>Addresses:\n<ul>\n<li>Load addresses config</li>\n<li>Run setup_addresses if available</li>\n</ul>\n</li>\n<li>Connections:\n<ul>\n<li>Load Connections Config</li>\n<li>Run setup_connections function</li>\n<li>Get connections (in and out)</li>\n</ul>\n</li>\n<li>States:\n<ul>\n<li>Load States Config</li>\n<li>Run setup_states function</li>\n<li>Get states (in and out)</li>\n</ul>\n</li>\n<li>Sigint Handler:\n<ul>\n<li>Sets up Sigint handling if needed</li>\n<li>Runs sigint_handler</li>\n</ul>\n</li>\n<li>Init Function:\n<ul>\n<li>Run init_function before running main or service loop</li>\n</ul>\n</li>\n<li>Runs either main or service loop</li>\n<li><a href=\"src/service_framework/utils/service_utils\" rel=\"nofollow\">Honestly, check the <code>entrance_point</code> method</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7141475, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6ed57f2789f0187b464d82b5a35f1884", "sha256": "3a3429bf3e6e418fc883977682a88a4e63692777e48b3258edf3a37766172fcd"}, "downloads": -1, "filename": "service_framework-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6ed57f2789f0187b464d82b5a35f1884", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6253, "upload_time": "2020-03-20T21:48:45", "upload_time_iso_8601": "2020-03-20T21:48:45.971982Z", "url": "https://files.pythonhosted.org/packages/ac/d8/de3f28eee0730a9f22249e23fc35125d39e5c056addadf244181722572a6/service_framework-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38aebb11c8808703987b230f09ff6086", "sha256": "a9637ccf717d458069184eaaf710345be8736b7e3e4e0245cbb6bcc56b03d505"}, "downloads": -1, "filename": "service_framework-0.0.1.tar.gz", "has_sig": false, "md5_digest": "38aebb11c8808703987b230f09ff6086", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8088, "upload_time": "2020-03-20T21:48:47", "upload_time_iso_8601": "2020-03-20T21:48:47.774095Z", "url": "https://files.pythonhosted.org/packages/6d/1a/4eb253b2e44b67c3dcb9f18d7d614dc4252917dfb9759a122e17da76d738/service_framework-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5a7e744ad6934d678a057f12ecfc1e45", "sha256": "3b37a866f157b07f1941252ec9c5f010188b386295605a14d00857d08566add9"}, "downloads": -1, "filename": "service_framework-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5a7e744ad6934d678a057f12ecfc1e45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40769, "upload_time": "2020-03-29T00:59:42", "upload_time_iso_8601": "2020-03-29T00:59:42.750905Z", "url": "https://files.pythonhosted.org/packages/9d/7e/793ace02b7f455d86821210ed4bf2451d3f00a2ab271088383e598a47833/service_framework-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7129c0c101bf895b9170701aaac4d4f2", "sha256": "081e18d4868508389c3a7dc5d3dde38368adefe5c010a2210af9ad33415d097e"}, "downloads": -1, "filename": "service_framework-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7129c0c101bf895b9170701aaac4d4f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28483, "upload_time": "2020-03-29T00:59:43", "upload_time_iso_8601": "2020-03-29T00:59:43.963349Z", "url": "https://files.pythonhosted.org/packages/ea/ec/511c09dea02ba258114ea67995142a90fa15b15f61ea7eaaa74cf1d90c9d/service_framework-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "257cf2de3c9365e560b15a56b4bc2d3f", "sha256": "62d1451d94fcb2f071ec02ebb1bc3bb755e2af974fb66204c7f82633b74060b1"}, "downloads": -1, "filename": "service_framework-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "257cf2de3c9365e560b15a56b4bc2d3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41250, "upload_time": "2020-03-31T00:39:01", "upload_time_iso_8601": "2020-03-31T00:39:01.760499Z", "url": "https://files.pythonhosted.org/packages/c1/b2/9f54f49d78c3bef5c4b7d85c8a9fe70389e9b5a8380e1475baecd1bde839/service_framework-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6548fa36b470fe5c97838b7944b18494", "sha256": "9be5000a4647e0ddf252c84a36f9bd74abb110621def48421d7bb593f7a645ad"}, "downloads": -1, "filename": "service_framework-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6548fa36b470fe5c97838b7944b18494", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28970, "upload_time": "2020-03-31T00:39:02", "upload_time_iso_8601": "2020-03-31T00:39:02.697435Z", "url": "https://files.pythonhosted.org/packages/07/dc/3c99b8a91dcc14db04ae331bb76814f2e1875dfaaa4d8000b3e6bec1ddb3/service_framework-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a7ab367054db782c948af4c022e5168c", "sha256": "18c073fa08a4b02ff1e4b2e002528ade8c06f21e76dc56899c42033eb6529ee3"}, "downloads": -1, "filename": "service_framework-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a7ab367054db782c948af4c022e5168c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 44358, "upload_time": "2020-04-08T01:54:26", "upload_time_iso_8601": "2020-04-08T01:54:26.148706Z", "url": "https://files.pythonhosted.org/packages/67/1c/fd27537c306d4f7ae5beee2470334b81c437bb777877e788360a346bf7a6/service_framework-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dcac124a57a49b2fbb56e281fd676e5", "sha256": "799aa1d868c69f800dd6ed64c275a7272aa3d89a7d414cb5516fdc53b77d8ed5"}, "downloads": -1, "filename": "service_framework-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4dcac124a57a49b2fbb56e281fd676e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32122, "upload_time": "2020-04-08T01:54:27", "upload_time_iso_8601": "2020-04-08T01:54:27.135529Z", "url": "https://files.pythonhosted.org/packages/6b/74/f5eb116f29134a57b1427c4b398e6d007fe7da44bc521b091c032eab2eeb/service_framework-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "c6808c88c879dfacd02581da874770ca", "sha256": "60436c333ed2be0db663cddc20861303a83a9d45223c644b9db09ddc03dd9c34"}, "downloads": -1, "filename": "service_framework-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c6808c88c879dfacd02581da874770ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 44359, "upload_time": "2020-04-18T04:53:05", "upload_time_iso_8601": "2020-04-18T04:53:05.907029Z", "url": "https://files.pythonhosted.org/packages/06/37/30530a45932a66606a9b7c73aab788dcd39399ef054b59ffe40fd5887bcd/service_framework-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c9528484650dd034ab6893603d8bf16", "sha256": "4f3f614e3275a361b1923a875a9e1052c639aa338cb6224b5f16124cb23891e7"}, "downloads": -1, "filename": "service_framework-0.0.5.tar.gz", "has_sig": false, "md5_digest": "4c9528484650dd034ab6893603d8bf16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32146, "upload_time": "2020-04-18T04:53:07", "upload_time_iso_8601": "2020-04-18T04:53:07.010761Z", "url": "https://files.pythonhosted.org/packages/62/53/1d2b07589357cd35b9d009c7622732aef0981bbd852e9f1ac853d03a9ada/service_framework-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "5c7aaa83f819fb0220a11d0d469200c4", "sha256": "31a665b89c81c6456a0c03b16516107fe19323e65dc86a447a7123f250dcc893"}, "downloads": -1, "filename": "service_framework-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "5c7aaa83f819fb0220a11d0d469200c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 44536, "upload_time": "2020-04-19T06:35:41", "upload_time_iso_8601": "2020-04-19T06:35:41.198388Z", "url": "https://files.pythonhosted.org/packages/d6/18/7a48453fa6d00ea09b56936613e73e341f4f6518c34370bb18a33c8d49ea/service_framework-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dc4f730961b76c78524695e00df3194", "sha256": "82f8c0454ebdb29bf476d7dcca9aedc0785639698f8cb3544d30634fe1e9c347"}, "downloads": -1, "filename": "service_framework-0.0.6.tar.gz", "has_sig": false, "md5_digest": "7dc4f730961b76c78524695e00df3194", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32486, "upload_time": "2020-04-19T06:35:42", "upload_time_iso_8601": "2020-04-19T06:35:42.059761Z", "url": "https://files.pythonhosted.org/packages/11/04/524ec2c3e52f20c81c4b60731effce76c2f857c4c40279142b70a3b353e1/service_framework-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "dc893c3d6b5e5c554143539ed5177416", "sha256": "0e9cb3c87f1a73fbebb91f7d376c6870ab1c4c0bf8895ede70c4da8b73eff2a6"}, "downloads": -1, "filename": "service_framework-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dc893c3d6b5e5c554143539ed5177416", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 44568, "upload_time": "2020-04-25T01:46:05", "upload_time_iso_8601": "2020-04-25T01:46:05.449422Z", "url": "https://files.pythonhosted.org/packages/27/28/cc4c926561e1aacc2e460a68a72cb7665e5bd4cc99d6c36fe9839177f0fd/service_framework-0.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0280ac0f9936b6ab0f93eca88963c1d", "sha256": "0f84bd1f875e3a1eb2d698bb1f8b33f2343c52e47745e045db3133580e8db3fc"}, "downloads": -1, "filename": "service_framework-0.0.7.tar.gz", "has_sig": false, "md5_digest": "c0280ac0f9936b6ab0f93eca88963c1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32547, "upload_time": "2020-04-25T01:46:06", "upload_time_iso_8601": "2020-04-25T01:46:06.458743Z", "url": "https://files.pythonhosted.org/packages/de/4f/fe9dae91020e589319fe5c12b77fd029c0c3bdc9d384613dee5fa17ed844/service_framework-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "d8291e237f4d78602fb9e5a12cad342b", "sha256": "6b3713e9d1541a7be63d8d41d579d762bce119e299f047d4780134eaf0405da5"}, "downloads": -1, "filename": "service_framework-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "d8291e237f4d78602fb9e5a12cad342b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 44613, "upload_time": "2020-04-30T23:07:02", "upload_time_iso_8601": "2020-04-30T23:07:02.355048Z", "url": "https://files.pythonhosted.org/packages/5e/d5/d2adbce41fa25b279a55274f0c969cc109be02497e4f924957ab5866d304/service_framework-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a833c8bd09124102d1ba58cf2c9daf73", "sha256": "aa25c4b43eb5e2102970f152da6b2e2896f4e069d179e4986dfbeccda673e106"}, "downloads": -1, "filename": "service_framework-0.0.8.tar.gz", "has_sig": false, "md5_digest": "a833c8bd09124102d1ba58cf2c9daf73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32606, "upload_time": "2020-04-30T23:07:03", "upload_time_iso_8601": "2020-04-30T23:07:03.496993Z", "url": "https://files.pythonhosted.org/packages/75/dd/35b37a468deea4effe88f3da99cfde2f43171bfce2ad74457c3f40c79ba0/service_framework-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d8291e237f4d78602fb9e5a12cad342b", "sha256": "6b3713e9d1541a7be63d8d41d579d762bce119e299f047d4780134eaf0405da5"}, "downloads": -1, "filename": "service_framework-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "d8291e237f4d78602fb9e5a12cad342b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 44613, "upload_time": "2020-04-30T23:07:02", "upload_time_iso_8601": "2020-04-30T23:07:02.355048Z", "url": "https://files.pythonhosted.org/packages/5e/d5/d2adbce41fa25b279a55274f0c969cc109be02497e4f924957ab5866d304/service_framework-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a833c8bd09124102d1ba58cf2c9daf73", "sha256": "aa25c4b43eb5e2102970f152da6b2e2896f4e069d179e4986dfbeccda673e106"}, "downloads": -1, "filename": "service_framework-0.0.8.tar.gz", "has_sig": false, "md5_digest": "a833c8bd09124102d1ba58cf2c9daf73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32606, "upload_time": "2020-04-30T23:07:03", "upload_time_iso_8601": "2020-04-30T23:07:03.496993Z", "url": "https://files.pythonhosted.org/packages/75/dd/35b37a468deea4effe88f3da99cfde2f43171bfce2ad74457c3f40c79ba0/service_framework-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:57 2020"}