{"info": {"author": "Taurus Olson", "author_email": "taurusolson@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "incisive\n========\n\n**incisive** is a tiny library for handling CSV in Python. It's a wrapper for the csv module.\n\n\nUsage\n-----\n\n* You can read a csv file like this::\n\n    >>> iris = read_csv(\"data/iris.csv\")\n    >>> iris.next()\n    {'petal_length': 1.4,\n     'petal_width': 0.2,\n     'sepal_length': 5.1,\n     'sepal_width': 3.5,\n     'species': 'setosa'}\n\n`read_csv` returns a generator. Note that `incisive`, by default, tries to guess the type of the columns.\n\n\n* Writing a CSV file can be done in two ways:\n  \n1. with a list of dictionaries::\n\n    >>> data = [{'name': 'Lancelot', 'actor': 'John Cleese', 'color': 'blue'},\n               {'name': 'Galahad', 'actor': 'Michael Palin', 'color': 'yellow'}]\n\n    >>> write_csv('bridge.csv', ('name', 'actor', 'color'), data=data)\n\n(the keys are the field names of the CSV file.)\n\n2. or with just a list of rows::\n\n    >>> rows = [('Lancelot', 'John Cleese', 'blue'),\n            ('Galahad', 'Michael Palin', 'yellow')]\n\n    >>> write_csv('bridge.csv', ('name', 'actor', 'color'), rows=rows)\n\nNote that this second method requires that your field names correspond exactly\nto the elements of your rows.\n\n\nFeatures\n--------\n\n* Simple API\n* Guess the types when it's possible \n* Accept functions to specify the types", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TaurusOlson/incisive", "keywords": "csv tools", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "incisive", "package_url": "https://pypi.org/project/incisive/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/incisive/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/TaurusOlson/incisive"}, "release_url": "https://pypi.org/project/incisive/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A tiny library for handling CSV files.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>incisive</strong> is a tiny library for handling CSV in Python. It\u2019s a wrapper for the csv module.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li><p>You can read a csv file like this:</p>\n<pre>&gt;&gt;&gt; iris = read_csv(\"data/iris.csv\")\n&gt;&gt;&gt; iris.next()\n{'petal_length': 1.4,\n 'petal_width': 0.2,\n 'sepal_length': 5.1,\n 'sepal_width': 3.5,\n 'species': 'setosa'}\n</pre>\n</li>\n</ul>\n<p><cite>read_csv</cite> returns a generator. Note that <cite>incisive</cite>, by default, tries to guess the type of the columns.</p>\n<ul>\n<li>Writing a CSV file can be done in two ways:</li>\n</ul>\n<ol>\n<li><p>with a list of dictionaries:</p>\n<pre>&gt;&gt;&gt; data = [{'name': 'Lancelot', 'actor': 'John Cleese', 'color': 'blue'},\n           {'name': 'Galahad', 'actor': 'Michael Palin', 'color': 'yellow'}]\n\n&gt;&gt;&gt; write_csv('bridge.csv', ('name', 'actor', 'color'), data=data)\n</pre>\n</li>\n</ol>\n<p>(the keys are the field names of the CSV file.)</p>\n<ol>\n<li><p>or with just a list of rows:</p>\n<pre>&gt;&gt;&gt; rows = [('Lancelot', 'John Cleese', 'blue'),\n        ('Galahad', 'Michael Palin', 'yellow')]\n\n&gt;&gt;&gt; write_csv('bridge.csv', ('name', 'actor', 'color'), rows=rows)\n</pre>\n</li>\n</ol>\n<p>Note that this second method requires that your field names correspond exactly\nto the elements of your rows.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Simple API</li>\n<li>Guess the types when it\u2019s possible</li>\n<li>Accept functions to specify the types</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1340531, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bfbe47fc84cb1e6c447e1064c771b44b", "sha256": "07606757ecc757bb714eddb9f349f9d030e3e7e0191b3168fea9a153778ccfb9"}, "downloads": -1, "filename": "incisive-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bfbe47fc84cb1e6c447e1064c771b44b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3371, "upload_time": "2014-12-11T20:09:25", "upload_time_iso_8601": "2014-12-11T20:09:25.345083Z", "url": "https://files.pythonhosted.org/packages/82/7c/9d9d6c85e3d1989b55c443f1a9c9c59bca8ef0a2d63a60d217c93d32f472/incisive-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bfbe47fc84cb1e6c447e1064c771b44b", "sha256": "07606757ecc757bb714eddb9f349f9d030e3e7e0191b3168fea9a153778ccfb9"}, "downloads": -1, "filename": "incisive-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bfbe47fc84cb1e6c447e1064c771b44b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3371, "upload_time": "2014-12-11T20:09:25", "upload_time_iso_8601": "2014-12-11T20:09:25.345083Z", "url": "https://files.pythonhosted.org/packages/82/7c/9d9d6c85e3d1989b55c443f1a9c9c59bca8ef0a2d63a60d217c93d32f472/incisive-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:24 2020"}