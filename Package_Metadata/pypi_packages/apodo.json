{"info": {"author": "Elliott Maguire", "author_email": "me@elliott-m.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Apodo\nThe async Python web framework that acts fast and lands on its feet.\n\nApodo is an asynchronous Python web framework that derives from the Vibora framework, implementing Cython and other performance-enhancing technologies to significantly increase processing speed and efficiency.\n\n## Framework Goals\n- Go quick\n- Run clean\n- Stay simple\n\n## Project Goals\n- Work together\n- Generate and support cool ideas\n- Learn and grow as a team\n\n\"Your team's strength is not a function of the talent of individual members. It's a function of their collaboration, tenacity, and mutual respect.\"\n\n## Development Plan\nApodo, while derived from the Vibora framework, will be built with a new design philosophy in mind. We will reference the old source of Vibora as we build, but only for some lower-level concepts.\n\nA major pitfall of Vibora was its lack of strict system design guidelines, as well of its lack of documentation. Solid design is to be held in high regard along with functional speed, and design should not and will not be compromised for functional speed. Building a spaghetti dinner that runs very quickly is fine, but building a well-designed, fast, and scalable web framework is what we're more interested in.\n\nThe plan for Apodo is to start with base functionality, and iteratively add features, with Vibora as a functional reference.\n\n## Development Pipeline\n\nAs one of our goals is to work together, the development pipeline is structured knowing that all may not be comfortable/confident enough with Cython and lower-level concepts to be able to contribute to the core system.\n\n### Vibora Analysis\nThis project is for those mentioned above. As the core team works, it is necessary that we are able to reference Vibora. Vibora is woefully lacking in its inline and online documentation, and a way for newcomers to contribute is by digging through the source in the `legacy` package, figuring out what it does, and writing in docstrings/refactoring illegible code. This process will not only support and speed up the development of Apodo, but also equip newcomers with tons of knowledge about how this type of web framework operates under the hood.\n\nTo contribute in this way, all you have to do is fork with the branch schema of `v-rewrite-<module or package name>` and submit a PR once you're done adding docstrings and refactoring illegible code. Your PR must pass one review before it is merged to `dev`.\n\n### Core Development\nThis project is for those experienced in Python, with knowledge of how it works as a language, as well as C concepts like Cython and other C-optimised practices and libraries, as well as sufficient understanding of web technologies and practices.\n\nIn order to contribute this way, you must be in the Apodo Slack group and approved as a contributor on the core repository.\n\nContribution to the core system will be heavily discussion-based until we release a first iteration, after which the iterative feature adds will begin. Until then, contact Elliott about joining the core team, and we'll go from there.\n\n## Development Guidelines\n\nBe aware that we utilize git hooks to automate and standardize some of the development process. We will conform to our written configurations of the `black` formatter, and of the `flake8` linter.\n\n### Comments/docstrings\n\nAs it stands, commenting and style consistency is woefully lacking in the Vibora library, and those are two things being addressed in this port before we begin work on features/fixes. We will use `black` for formatting, and comment styling will be as follows.\n\nFor module docstrings, comments should look like this:\n\n    \"\"\"\n    apodo.utils.module (modular path)\n    ~~~~~~~~~~~~~~~~~\n\n    This module implements the `Class` class, and other stuff. (module description)\n    \"\"\"\n\nFor class docstrings, comments should look like this:\n\n    \"\"\" Implements the `Class` class. (short description)\n\n    This class does things that it does. We've written it to do\n    actions and carry out tasks. (long description)\n\n    :param `*args`: These are some arguments.\n    :param `**kwargs`: These are some keyword arguments. (parameters)\n    \"\"\"\n\nFor method docstrings, comments should look like this:\n\n    \"\"\" Does an action. (short description)\n\n    This method does things and stuff. Note that it does things\n    in a certain way as of version 0.1.0. (long description)\n\n    :param `thing`: A thing (`str`) with which to do stuff.\n    :param `stuff`: (optional) Some stuff (`dict`) with which to do things. (parameters w/ type intentions)\n\n    :return `product`: A `Product` object. (return w/ type intention)\n    \"\"\"\n\nOther one-line commenting should be kept to a mininum but used effectively and concisely when necessary.\n\n#### Soft Rules:\n- Put backticks (``) around object and variable names.\n- Wrap comments to 88 characters.\n- Capitalize the first letters of parameter and return descriptions.\n\n### Typing\n\nWe will *not* use type hints. While helpful to an extent, type hints in Python dirty code significantly, and typing can be notated in docstrings. So, the parameter and return lines in all method docstrings MUST denote the intended type of the given variables.\n\n## Let's build together.\nThe Vibora framework, while intelligently conceptualized and designed, lacked the community and structure that an open-source project needs to thrive. While a lot of brilliant engineers have created great open-source software mostly on their own, it's more meaningful and enriching for all involved when it becomes a community effort.\n\nA major goal of this project is to cultivate an efficient and involved development/contribution pipeline, rather than an isolated and centralized dependent workflow for few.\n\nThis project needs developers! Join us on the [slack channel](https://join.slack.com/t/apodoproject/shared_invite/enQtNzA1NjcwMDU4MDA2LWIyZWFmNDY2YzEyM2RmYWQ2OWM3MzQyN2QwYzllYzg3OGRhMzJkOWIwMjA2OTEyOGVkYTliZTA4OWQwMDI1Y2U)\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "Elliott Maguire", "maintainer_email": "me@elliott-m.com", "name": "apodo", "package_url": "https://pypi.org/project/apodo/", "platform": "", "project_url": "https://pypi.org/project/apodo/", "project_urls": null, "release_url": "https://pypi.org/project/apodo/0.1.0.dev0/", "requires_dist": ["cython (>=0.29.12,<0.30.0)"], "requires_python": ">=3.7,<4.0", "summary": "A remarkably fast asynchronous web framework for Python.", "version": "0.1.0.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Apodo</h1>\n<p>The async Python web framework that acts fast and lands on its feet.</p>\n<p>Apodo is an asynchronous Python web framework that derives from the Vibora framework, implementing Cython and other performance-enhancing technologies to significantly increase processing speed and efficiency.</p>\n<h2>Framework Goals</h2>\n<ul>\n<li>Go quick</li>\n<li>Run clean</li>\n<li>Stay simple</li>\n</ul>\n<h2>Project Goals</h2>\n<ul>\n<li>Work together</li>\n<li>Generate and support cool ideas</li>\n<li>Learn and grow as a team</li>\n</ul>\n<p>\"Your team's strength is not a function of the talent of individual members. It's a function of their collaboration, tenacity, and mutual respect.\"</p>\n<h2>Development Plan</h2>\n<p>Apodo, while derived from the Vibora framework, will be built with a new design philosophy in mind. We will reference the old source of Vibora as we build, but only for some lower-level concepts.</p>\n<p>A major pitfall of Vibora was its lack of strict system design guidelines, as well of its lack of documentation. Solid design is to be held in high regard along with functional speed, and design should not and will not be compromised for functional speed. Building a spaghetti dinner that runs very quickly is fine, but building a well-designed, fast, and scalable web framework is what we're more interested in.</p>\n<p>The plan for Apodo is to start with base functionality, and iteratively add features, with Vibora as a functional reference.</p>\n<h2>Development Pipeline</h2>\n<p>As one of our goals is to work together, the development pipeline is structured knowing that all may not be comfortable/confident enough with Cython and lower-level concepts to be able to contribute to the core system.</p>\n<h3>Vibora Analysis</h3>\n<p>This project is for those mentioned above. As the core team works, it is necessary that we are able to reference Vibora. Vibora is woefully lacking in its inline and online documentation, and a way for newcomers to contribute is by digging through the source in the <code>legacy</code> package, figuring out what it does, and writing in docstrings/refactoring illegible code. This process will not only support and speed up the development of Apodo, but also equip newcomers with tons of knowledge about how this type of web framework operates under the hood.</p>\n<p>To contribute in this way, all you have to do is fork with the branch schema of <code>v-rewrite-&lt;module or package name&gt;</code> and submit a PR once you're done adding docstrings and refactoring illegible code. Your PR must pass one review before it is merged to <code>dev</code>.</p>\n<h3>Core Development</h3>\n<p>This project is for those experienced in Python, with knowledge of how it works as a language, as well as C concepts like Cython and other C-optimised practices and libraries, as well as sufficient understanding of web technologies and practices.</p>\n<p>In order to contribute this way, you must be in the Apodo Slack group and approved as a contributor on the core repository.</p>\n<p>Contribution to the core system will be heavily discussion-based until we release a first iteration, after which the iterative feature adds will begin. Until then, contact Elliott about joining the core team, and we'll go from there.</p>\n<h2>Development Guidelines</h2>\n<p>Be aware that we utilize git hooks to automate and standardize some of the development process. We will conform to our written configurations of the <code>black</code> formatter, and of the <code>flake8</code> linter.</p>\n<h3>Comments/docstrings</h3>\n<p>As it stands, commenting and style consistency is woefully lacking in the Vibora library, and those are two things being addressed in this port before we begin work on features/fixes. We will use <code>black</code> for formatting, and comment styling will be as follows.</p>\n<p>For module docstrings, comments should look like this:</p>\n<pre><code>\"\"\"\napodo.utils.module (modular path)\n~~~~~~~~~~~~~~~~~\n\nThis module implements the `Class` class, and other stuff. (module description)\n\"\"\"\n</code></pre>\n<p>For class docstrings, comments should look like this:</p>\n<pre><code>\"\"\" Implements the `Class` class. (short description)\n\nThis class does things that it does. We've written it to do\nactions and carry out tasks. (long description)\n\n:param `*args`: These are some arguments.\n:param `**kwargs`: These are some keyword arguments. (parameters)\n\"\"\"\n</code></pre>\n<p>For method docstrings, comments should look like this:</p>\n<pre><code>\"\"\" Does an action. (short description)\n\nThis method does things and stuff. Note that it does things\nin a certain way as of version 0.1.0. (long description)\n\n:param `thing`: A thing (`str`) with which to do stuff.\n:param `stuff`: (optional) Some stuff (`dict`) with which to do things. (parameters w/ type intentions)\n\n:return `product`: A `Product` object. (return w/ type intention)\n\"\"\"\n</code></pre>\n<p>Other one-line commenting should be kept to a mininum but used effectively and concisely when necessary.</p>\n<h4>Soft Rules:</h4>\n<ul>\n<li>Put backticks (``) around object and variable names.</li>\n<li>Wrap comments to 88 characters.</li>\n<li>Capitalize the first letters of parameter and return descriptions.</li>\n</ul>\n<h3>Typing</h3>\n<p>We will <em>not</em> use type hints. While helpful to an extent, type hints in Python dirty code significantly, and typing can be notated in docstrings. So, the parameter and return lines in all method docstrings MUST denote the intended type of the given variables.</p>\n<h2>Let's build together.</h2>\n<p>The Vibora framework, while intelligently conceptualized and designed, lacked the community and structure that an open-source project needs to thrive. While a lot of brilliant engineers have created great open-source software mostly on their own, it's more meaningful and enriching for all involved when it becomes a community effort.</p>\n<p>A major goal of this project is to cultivate an efficient and involved development/contribution pipeline, rather than an isolated and centralized dependent workflow for few.</p>\n<p>This project needs developers! Join us on the <a href=\"https://join.slack.com/t/apodoproject/shared_invite/enQtNzA1NjcwMDU4MDA2LWIyZWFmNDY2YzEyM2RmYWQ2OWM3MzQyN2QwYzllYzg3OGRhMzJkOWIwMjA2OTEyOGVkYTliZTA4OWQwMDI1Y2U\" rel=\"nofollow\">slack channel</a></p>\n\n          </div>"}, "last_serial": 5723003, "releases": {"0.1.0.dev0": [{"comment_text": "", "digests": {"md5": "ac8967f8b6e540d5e02b73905b507eef", "sha256": "344b758111f126467774a576722297745726a84581aa9f0e5988f24370a8c560"}, "downloads": -1, "filename": "apodo-0.1.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "ac8967f8b6e540d5e02b73905b507eef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6462, "upload_time": "2019-08-23T22:16:08", "upload_time_iso_8601": "2019-08-23T22:16:08.035282Z", "url": "https://files.pythonhosted.org/packages/f7/05/f4d918c83b7cf4395b8d2f42776f620c250fbad33f806baea797fa3c65b0/apodo-0.1.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3b62b375f522abd546041ceb9c07bc7", "sha256": "dee9f22296d6bedae8363a2359b4a65c74d708d8864942c34a84061a74aad6e1"}, "downloads": -1, "filename": "apodo-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "d3b62b375f522abd546041ceb9c07bc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6207, "upload_time": "2019-08-23T22:16:10", "upload_time_iso_8601": "2019-08-23T22:16:10.384259Z", "url": "https://files.pythonhosted.org/packages/a6/28/ca47dceb5e0cc227955b30657ab4dcc11cd54d14ccf1982edaa32c89da4f/apodo-0.1.0.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac8967f8b6e540d5e02b73905b507eef", "sha256": "344b758111f126467774a576722297745726a84581aa9f0e5988f24370a8c560"}, "downloads": -1, "filename": "apodo-0.1.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "ac8967f8b6e540d5e02b73905b507eef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6462, "upload_time": "2019-08-23T22:16:08", "upload_time_iso_8601": "2019-08-23T22:16:08.035282Z", "url": "https://files.pythonhosted.org/packages/f7/05/f4d918c83b7cf4395b8d2f42776f620c250fbad33f806baea797fa3c65b0/apodo-0.1.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3b62b375f522abd546041ceb9c07bc7", "sha256": "dee9f22296d6bedae8363a2359b4a65c74d708d8864942c34a84061a74aad6e1"}, "downloads": -1, "filename": "apodo-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "d3b62b375f522abd546041ceb9c07bc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6207, "upload_time": "2019-08-23T22:16:10", "upload_time_iso_8601": "2019-08-23T22:16:10.384259Z", "url": "https://files.pythonhosted.org/packages/a6/28/ca47dceb5e0cc227955b30657ab4dcc11cd54d14ccf1982edaa32c89da4f/apodo-0.1.0.dev0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:42 2020"}