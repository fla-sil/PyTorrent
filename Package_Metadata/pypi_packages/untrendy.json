{"info": {"author": "Dan Foreman-Mackey", "author_email": "danfm@nyu.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics"], "description": "Untrendy\n========\n\nIn an age where studying exoplanets is just the hippest thing ever, sometimes\nit's good to step out of line and be a little untrendy! This library is a set\nof hacks that can robustly remove the out-of-transit trends in light curve\ndata.\n\nInstallation\n------------\n\n**Untrendy** depends on ``numpy`` and ``scipy`` so make sure that you install\nthose first. Then, you can install using ``pip``:\n\n::\n\n    pip install untrendy\n\nUsage\n-----\n\n**Untrendy** is really complicated. It has approximately *one* function and\nabout *200 lines of code (including documentation)*. It mostly runs on love\nand magic (more complete details are given below if you want).\n\nLet's say that you have a light curve with time samples ``t``, flux\nmeasurements ``f`` and uncertainties ``sigma``. You can simply run:\n\n.. code-block:: python\n\n    import untrendy\n    f_detrend, sigma_detrend = untrendy.untrend(t, f, sigma)\n\nto find a robust estimate of the global trends of the time series and remove\nit. The default settings are tuned to work well for finding the\n\"out-of-transit\" trends in Kepler data but a detailed description of the\noptions is listed below. You can also just fit for the trends and get a\ncallable representation of the trend:\n\n.. code-block:: python\n\n    trend = untrendy.fit_trend(t, f, ferr)\n\nIn this case, you can find the background level at some time ``t0`` by calling\nthe function:\n\n.. code-block:: python\n\n    bkg = trend(t0)\n\nNotes\n-----\n\n1. The spline sometimes goes to hell in regions where you don't have any\n   samples so be careful with that.\n2. This whole procedure introduces correlated errors. You've been warned.\n\nCommand Line Untrending\n-----------------------\n\nThere is also the option of using **Untrendy** from the command line if you\ndon't want to bother with all the Python stuff. If you have a whitespace\nseparated ASCII file containing your light curve, you can de-trend it by\nrunning:\n\n::\n\n    untrend /path/to/data.txt\n\nThe code will assume that your file has 2 or 3 columns with time, flux and\n(optionally) uncertainties for each observation. Then, the de-trended light\ncurve will be written to standard out in the same format. Alternatively, the\nsame program can read the data right from standard in:\n\n::\n\n    cat /path/to/data.txt | untrend\n\nThis gives you the option of doing something crazy and then piping it all\nUNIX-like. Personally, I would just use Python.\n\nAPI\n---\n\nFit the trend\n+++++++++++++\n\n*untrendy.*\\ **fit_trend** (``x``, ``y``, ``yerr=None``, ``Q=12``, ``dt=3.0``,\n``tol=0.00125``, ``maxiter=15``, ``fill_times=None``, ``maxditer=4``,\n``nfill=4``)\n\nUse iteratively re-weighted least squares to fit a spline to the\nout-of-transit trends in a time series. The input data should be \"clean\".\nIn other words, bad data should be masked and it often helps to normalize\nthe fluxes (by the median or something).\n\n**Parameters**\n\n:``x``:          The sampled times.\n:``y``:          The fluxes corresponding to the times in ``x``.\n:``yerr``:       (optional) The 1-sigma error bars on ``y``.\n:``Q``:          (optional) The parameter controlling the severity of the\n                 re-weighting.\n:``dt``:         (optional) The initial spacing between time control\n                 points.\n:``tol``:        (optional) The convergence criterion.\n:``maxiter``:    (optional) The maximum number of re-weighting iterations\n                 to run.\n:``fill_times``: (optional) If provided, this number sets the minimum time\n                 spacing between adjacent samples that is acceptable. If\n                 the spacing is larger, knots will be added to fill in\n                 the gap.\n:``maxditer``:   (optional) The maximum number of discontinuity search\n                 iterations to run.\n:``nfill``:      (optional) The number of knots to use to fill in the\n                 gaps.\n\n**Returns**\n\n:``trend``:      A callable representation of the trend.\n\nRemove the trend\n++++++++++++++++\n\n*untrendy.*\\ **untrend** (``x``, ``y``, ``yerr=None``, ``**kwargs``)\n\nUse iteratively re-weighted least squares to remove the out-of-transit\ntrends in a light curve. Unlike ``fit_trend``, this function masks bad\ndata (``NaN``) and normalizes the data before fitting.\n\n**Parameters**\n\n:``x``:          The sampled times.\n:``y``:          The fluxes corresponding to the times in ``x``.\n:``yerr``:       (optional) The 1-sigma error bars on ``y``.\n:``**kwargs``:   (optional) Other arguments passed to the ``fit_trend``\n                 function.\n\n**Returns**\n\n:``flux``:       The de-trended relative fluxes.\n:``ferr``:       The de-trended uncertainties on ``flux``.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dfm/untrendy", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "untrendy", "package_url": "https://pypi.org/project/untrendy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/untrendy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/dfm/untrendy"}, "release_url": "https://pypi.org/project/untrendy/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "De-trending Kepler light curves in style", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>In an age where studying exoplanets is just the hippest thing ever, sometimes\nit\u2019s good to step out of line and be a little untrendy! This library is a set\nof hacks that can robustly remove the out-of-transit trends in light curve\ndata.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><strong>Untrendy</strong> depends on <tt>numpy</tt> and <tt>scipy</tt> so make sure that you install\nthose first. Then, you can install using <tt>pip</tt>:</p>\n<pre>pip install untrendy\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><strong>Untrendy</strong> is really complicated. It has approximately <em>one</em> function and\nabout <em>200 lines of code (including documentation)</em>. It mostly runs on love\nand magic (more complete details are given below if you want).</p>\n<p>Let\u2019s say that you have a light curve with time samples <tt>t</tt>, flux\nmeasurements <tt>f</tt> and uncertainties <tt>sigma</tt>. You can simply run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">untrendy</span>\n<span class=\"n\">f_detrend</span><span class=\"p\">,</span> <span class=\"n\">sigma_detrend</span> <span class=\"o\">=</span> <span class=\"n\">untrendy</span><span class=\"o\">.</span><span class=\"n\">untrend</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">)</span>\n</pre>\n<p>to find a robust estimate of the global trends of the time series and remove\nit. The default settings are tuned to work well for finding the\n\u201cout-of-transit\u201d trends in Kepler data but a detailed description of the\noptions is listed below. You can also just fit for the trends and get a\ncallable representation of the trend:</p>\n<pre><span class=\"n\">trend</span> <span class=\"o\">=</span> <span class=\"n\">untrendy</span><span class=\"o\">.</span><span class=\"n\">fit_trend</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">ferr</span><span class=\"p\">)</span>\n</pre>\n<p>In this case, you can find the background level at some time <tt>t0</tt> by calling\nthe function:</p>\n<pre><span class=\"n\">bkg</span> <span class=\"o\">=</span> <span class=\"n\">trend</span><span class=\"p\">(</span><span class=\"n\">t0</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ol>\n<li>The spline sometimes goes to hell in regions where you don\u2019t have any\nsamples so be careful with that.</li>\n<li>This whole procedure introduces correlated errors. You\u2019ve been warned.</li>\n</ol>\n</div>\n<div id=\"command-line-untrending\">\n<h2>Command Line Untrending</h2>\n<p>There is also the option of using <strong>Untrendy</strong> from the command line if you\ndon\u2019t want to bother with all the Python stuff. If you have a whitespace\nseparated ASCII file containing your light curve, you can de-trend it by\nrunning:</p>\n<pre>untrend /path/to/data.txt\n</pre>\n<p>The code will assume that your file has 2 or 3 columns with time, flux and\n(optionally) uncertainties for each observation. Then, the de-trended light\ncurve will be written to standard out in the same format. Alternatively, the\nsame program can read the data right from standard in:</p>\n<pre>cat /path/to/data.txt | untrend\n</pre>\n<p>This gives you the option of doing something crazy and then piping it all\nUNIX-like. Personally, I would just use Python.</p>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<div id=\"fit-the-trend\">\n<h3>Fit the trend</h3>\n<p><em>untrendy.</em><strong>fit_trend</strong> (<tt>x</tt>, <tt>y</tt>, <tt>yerr=None</tt>, <tt>Q=12</tt>, <tt>dt=3.0</tt>,\n<tt>tol=0.00125</tt>, <tt>maxiter=15</tt>, <tt>fill_times=None</tt>, <tt>maxditer=4</tt>,\n<tt>nfill=4</tt>)</p>\n<p>Use iteratively re-weighted least squares to fit a spline to the\nout-of-transit trends in a time series. The input data should be \u201cclean\u201d.\nIn other words, bad data should be masked and it often helps to normalize\nthe fluxes (by the median or something).</p>\n<p><strong>Parameters</strong></p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>x</tt>:</th><td>The sampled times.</td>\n</tr>\n<tr><th><tt>y</tt>:</th><td>The fluxes corresponding to the times in <tt>x</tt>.</td>\n</tr>\n<tr><th><tt>yerr</tt>:</th><td>(optional) The 1-sigma error bars on <tt>y</tt>.</td>\n</tr>\n<tr><th><tt>Q</tt>:</th><td>(optional) The parameter controlling the severity of the\nre-weighting.</td>\n</tr>\n<tr><th><tt>dt</tt>:</th><td>(optional) The initial spacing between time control\npoints.</td>\n</tr>\n<tr><th><tt>tol</tt>:</th><td>(optional) The convergence criterion.</td>\n</tr>\n<tr><th><tt>maxiter</tt>:</th><td>(optional) The maximum number of re-weighting iterations\nto run.</td>\n</tr>\n<tr><th><tt>fill_times</tt>:</th><td>(optional) If provided, this number sets the minimum time\nspacing between adjacent samples that is acceptable. If\nthe spacing is larger, knots will be added to fill in\nthe gap.</td>\n</tr>\n<tr><th><tt>maxditer</tt>:</th><td>(optional) The maximum number of discontinuity search\niterations to run.</td>\n</tr>\n<tr><th><tt>nfill</tt>:</th><td>(optional) The number of knots to use to fill in the\ngaps.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Returns</strong></p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>trend</tt>:</th><td>A callable representation of the trend.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"remove-the-trend\">\n<h3>Remove the trend</h3>\n<p><em>untrendy.</em><strong>untrend</strong> (<tt>x</tt>, <tt>y</tt>, <tt>yerr=None</tt>, <tt>**kwargs</tt>)</p>\n<p>Use iteratively re-weighted least squares to remove the out-of-transit\ntrends in a light curve. Unlike <tt>fit_trend</tt>, this function masks bad\ndata (<tt>NaN</tt>) and normalizes the data before fitting.</p>\n<p><strong>Parameters</strong></p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>x</tt>:</th><td>The sampled times.</td>\n</tr>\n<tr><th><tt>y</tt>:</th><td>The fluxes corresponding to the times in <tt>x</tt>.</td>\n</tr>\n<tr><th><tt>yerr</tt>:</th><td>(optional) The 1-sigma error bars on <tt>y</tt>.</td>\n</tr>\n<tr><th><tt>**kwargs</tt>:</th><td>(optional) Other arguments passed to the <tt>fit_trend</tt>\nfunction.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Returns</strong></p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>flux</tt>:</th><td>The de-trended relative fluxes.</td>\n</tr>\n<tr><th><tt>ferr</tt>:</th><td>The de-trended uncertainties on <tt>flux</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n          </div>"}, "last_serial": 801249, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e62ce7f45faa5433c21c23f6b95ad8b6", "sha256": "575e84df1206db7dae224838f31064eb610d480cf2f86841bdcae46196dc97a8"}, "downloads": -1, "filename": "untrendy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e62ce7f45faa5433c21c23f6b95ad8b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6669, "upload_time": "2013-04-10T14:50:12", "upload_time_iso_8601": "2013-04-10T14:50:12.542732Z", "url": "https://files.pythonhosted.org/packages/fd/2e/32b8cac09bed88007ca7f207e28274908802556f13871106c68ca432246c/untrendy-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "919b3a3a50bb42a6b64ef4f49c3c7350", "sha256": "ee115048be4d4b5848f550cd2bc72c214d551ef20bb16d814be6349c7bf63071"}, "downloads": -1, "filename": "untrendy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "919b3a3a50bb42a6b64ef4f49c3c7350", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47169, "upload_time": "2013-04-25T21:04:53", "upload_time_iso_8601": "2013-04-25T21:04:53.535606Z", "url": "https://files.pythonhosted.org/packages/03/50/0e72b215a681219f3e40139807312dc9df4200a33abf0f4d19947aba46ae/untrendy-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "919b3a3a50bb42a6b64ef4f49c3c7350", "sha256": "ee115048be4d4b5848f550cd2bc72c214d551ef20bb16d814be6349c7bf63071"}, "downloads": -1, "filename": "untrendy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "919b3a3a50bb42a6b64ef4f49c3c7350", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47169, "upload_time": "2013-04-25T21:04:53", "upload_time_iso_8601": "2013-04-25T21:04:53.535606Z", "url": "https://files.pythonhosted.org/packages/03/50/0e72b215a681219f3e40139807312dc9df4200a33abf0f4d19947aba46ae/untrendy-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:02 2020"}