{"info": {"author": "Hong Minhee", "author_email": "hongminhee@member.fsf.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: Jython", "Programming Language :: Python :: Implementation :: PyPy", "Programming Language :: Python :: Implementation :: Stackless"], "description": "TypeQuery\n=========\n\n.. note::\n\n   Since Python 3.3 there's ``functools.singledispatch()`` function\n   which does the similar work in the standard library.  We recommend\n   you to use it instead of this.\n\n   See also `PEP 443`_.\n\n.. image:: https://drone.io/bitbucket.org/dahlia/typequery/status.png\n   :alt: Build Status\n   :target: https://drone.io/bitbucket.org/dahlia/typequery/latest\n\nIt provides a simple and dirty way to define generic methods to existing\ntypes.  You can make overloaded methods using this.\n\n.. _PEP 443: http://www.python.org/dev/peps/pep-0443/\n\n\nCompatibility\n-------------\n\nTypeQuery does not depend on any non-standard libraries.  It works on\nthese environments:\n\n- Python 2.5--2.7, 3.2--3.5\n- CPython, Stackless, PyPy, Jython\n\n\nInstall\n-------\n\nInstall using ``pip``::\n\n    $ pip install TypeQuery\n\n\nExample: JSON encoder\n---------------------\n\n::\n\n    from typequery import GenericMethod\n    from sys import version_info\n    from re import sub\n    from numbers import Real\n    from collections import Mapping, Iterable\n\n    if version_info.major > 2:\n        basestring = string = str\n    else:\n        string = unicode\n\n    json = GenericMethod('json')\n\n    @json.of(type(None))\n    def json(value):\n        return 'null'\n\n    @json.of(bool)\n    def json(value):\n        return 'true' if value else 'false'\n\n    @json.of(Real)\n    def json(value):\n        return str(value)\n\n    @json.of(string)\n    def json(value):\n        def escape(match):\n            s = match.group(0)\n            if s in ('\\\\', '\"', '\\b', '\\f', '\\n', '\\r', '\\t'):\n                return '\\\\' + s\n            n = ord(s)\n            if n < 0x10000:\n                return r'\\u%04x' % n\n            n -= 0x10000\n            s1 = 0xd800 | ((n >> 10) & 0x3ff)\n            s2 = 0xdc00 | (n & 0x3ff)\n            return r'\\u%04x\\u%04x' % (s1, s2)\n        return '\"%s\"' % sub(r'([\\\\\"]|[^\\ -~])', escape, value)\n\n    @json.of(Iterable)\n    def json(value):\n        return '[%s]' % ', '.join(json(element) for element in value)\n\n    @json.of(Mapping)\n    def json(value):\n        return '{%s}' % ', '.join('%s: %s' % (json(string(key)), json(value))\n                                  for key, value in value.items())\n\nAnd defined ``json`` function works like:\n\n>>> json(123)\n'123'\n>>> json(True)\n'true'\n>>> json({'apple': 3, 'banana': 5, 'carrot': 1})\n'{\"apple\": 3, \"banana\": 5, \"carrot\": 1}'\n\nAs the above shows, you can define type-aware instance methods to existing\ntypes even including ABCs like ``collections.Iterable``.\n\n\nAuthor and license\n------------------\n\nWritten by `Hong Minhee <http://dahlia.kr/>`_.  Distributed under `MIT license\n<http://minhee.mit-license.org/>`_.  You can find the source code from the\n`Bitbucket repository <https://bitbucket.org/dahlia/typequery>`_::\n\n    $ hg clone https://bitbucket.org/dahlia/typequery\n\n\nChangelog\n---------\n\nVersion 0.1.5\n'''''''''''''\n\nReleased on June 23, 2016.\n\n- Compatibility with recent Python versions: Python 3.3 to 3.5, and PyPy3.\n\n\nVersion 0.1.4\n'''''''''''''\n\nReleased on October 18, 2012.\n\n- Don't use bitbucket-distutils_ anymore to prevent several headaches\n  related packaging and distribution.\n\n.. _bitbucket-distutils: https://bitbucket.org/dahlia/bitbucket-distutils\n\n\nVersion 0.1.3\n'''''''''''''\n\nReleased on August 29, 2012.\n\n- Fixed a bug of handling multiple types by one function.\n  [`#2 <https://bitbucket.org/dahlia/typequery/issue/2/>`_]\n\n\nVersion 0.1.2\n'''''''''''''\n\nReleased on August 15, 2012.\n\n- You can inherit existing generic methods using ``GenericMethod.inherit()``\n  method.\n- Added ``with_receiver`` option for ``GenericMethod.of()`` decorator and\n  ``Decorator`` constructor.\n\n\nVersion 0.1.1\n'''''''''''''\n\nReleased on May 22, 2012.\n\n- Now it works well with abstract base classes other than ``abc.ABCMeta``.\n- Fixed a bug of ``GenericMethod.clone()`` method.  It does not reflect\n  cloned one's changes to the original anymore.\n  [`#1 <https://bitbucket.org/dahlia/typequery/issue/1/>`_]\n\n\nVersion 0.1.0\n'''''''''''''\n\nReleased on May 21, 2012.\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/dahlia/typequery", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "TypeQuery", "package_url": "https://pypi.org/project/TypeQuery/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/TypeQuery/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/dahlia/typequery"}, "release_url": "https://pypi.org/project/TypeQuery/0.1.5/", "requires_dist": null, "requires_python": null, "summary": "A simple and dirty way to define generic methods to existing types.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<p>Note</p>\n<p>Since Python 3.3 there\u2019s <tt>functools.singledispatch()</tt> function\nwhich does the similar work in the standard library.  We recommend\nyou to use it instead of this.</p>\n<p>See also <a href=\"http://www.python.org/dev/peps/pep-0443/\" rel=\"nofollow\">PEP 443</a>.</p>\n</div>\n<a href=\"https://drone.io/bitbucket.org/dahlia/typequery/latest\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ad3cfaef19d92fd15f80ce31fe389105229c9f9/68747470733a2f2f64726f6e652e696f2f6269746275636b65742e6f72672f6461686c69612f7479706571756572792f7374617475732e706e67\"></a>\n<p>It provides a simple and dirty way to define generic methods to existing\ntypes.  You can make overloaded methods using this.</p>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p>TypeQuery does not depend on any non-standard libraries.  It works on\nthese environments:</p>\n<ul>\n<li>Python 2.5\u20132.7, 3.2\u20133.5</li>\n<li>CPython, Stackless, PyPy, Jython</li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Install using <tt>pip</tt>:</p>\n<pre>$ pip install TypeQuery\n</pre>\n</div>\n<div id=\"example-json-encoder\">\n<h2>Example: JSON encoder</h2>\n<pre>from typequery import GenericMethod\nfrom sys import version_info\nfrom re import sub\nfrom numbers import Real\nfrom collections import Mapping, Iterable\n\nif version_info.major &gt; 2:\n    basestring = string = str\nelse:\n    string = unicode\n\njson = GenericMethod('json')\n\n@json.of(type(None))\ndef json(value):\n    return 'null'\n\n@json.of(bool)\ndef json(value):\n    return 'true' if value else 'false'\n\n@json.of(Real)\ndef json(value):\n    return str(value)\n\n@json.of(string)\ndef json(value):\n    def escape(match):\n        s = match.group(0)\n        if s in ('\\\\', '\"', '\\b', '\\f', '\\n', '\\r', '\\t'):\n            return '\\\\' + s\n        n = ord(s)\n        if n &lt; 0x10000:\n            return r'\\u%04x' % n\n        n -= 0x10000\n        s1 = 0xd800 | ((n &gt;&gt; 10) &amp; 0x3ff)\n        s2 = 0xdc00 | (n &amp; 0x3ff)\n        return r'\\u%04x\\u%04x' % (s1, s2)\n    return '\"%s\"' % sub(r'([\\\\\"]|[^\\ -~])', escape, value)\n\n@json.of(Iterable)\ndef json(value):\n    return '[%s]' % ', '.join(json(element) for element in value)\n\n@json.of(Mapping)\ndef json(value):\n    return '{%s}' % ', '.join('%s: %s' % (json(string(key)), json(value))\n                              for key, value in value.items())\n</pre>\n<p>And defined <tt>json</tt> function works like:</p>\n<pre>&gt;&gt;&gt; json(123)\n'123'\n&gt;&gt;&gt; json(True)\n'true'\n&gt;&gt;&gt; json({'apple': 3, 'banana': 5, 'carrot': 1})\n'{\"apple\": 3, \"banana\": 5, \"carrot\": 1}'\n</pre>\n<p>As the above shows, you can define type-aware instance methods to existing\ntypes even including ABCs like <tt>collections.Iterable</tt>.</p>\n</div>\n<div id=\"author-and-license\">\n<h2>Author and license</h2>\n<p>Written by <a href=\"http://dahlia.kr/\" rel=\"nofollow\">Hong Minhee</a>.  Distributed under <a href=\"http://minhee.mit-license.org/\" rel=\"nofollow\">MIT license</a>.  You can find the source code from the\n<a href=\"https://bitbucket.org/dahlia/typequery\" rel=\"nofollow\">Bitbucket repository</a>:</p>\n<pre>$ hg clone https://bitbucket.org/dahlia/typequery\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"version-0-1-5\">\n<h3>Version 0.1.5</h3>\n<p>Released on June 23, 2016.</p>\n<ul>\n<li>Compatibility with recent Python versions: Python 3.3 to 3.5, and PyPy3.</li>\n</ul>\n</div>\n<div id=\"version-0-1-4\">\n<h3>Version 0.1.4</h3>\n<p>Released on October 18, 2012.</p>\n<ul>\n<li>Don\u2019t use <a href=\"https://bitbucket.org/dahlia/bitbucket-distutils\" rel=\"nofollow\">bitbucket-distutils</a> anymore to prevent several headaches\nrelated packaging and distribution.</li>\n</ul>\n</div>\n<div id=\"version-0-1-3\">\n<h3>Version 0.1.3</h3>\n<p>Released on August 29, 2012.</p>\n<ul>\n<li>Fixed a bug of handling multiple types by one function.\n[<a href=\"https://bitbucket.org/dahlia/typequery/issue/2/\" rel=\"nofollow\">#2</a>]</li>\n</ul>\n</div>\n<div id=\"version-0-1-2\">\n<h3>Version 0.1.2</h3>\n<p>Released on August 15, 2012.</p>\n<ul>\n<li>You can inherit existing generic methods using <tt>GenericMethod.inherit()</tt>\nmethod.</li>\n<li>Added <tt>with_receiver</tt> option for <tt>GenericMethod.of()</tt> decorator and\n<tt>Decorator</tt> constructor.</li>\n</ul>\n</div>\n<div id=\"version-0-1-1\">\n<h3>Version 0.1.1</h3>\n<p>Released on May 22, 2012.</p>\n<ul>\n<li>Now it works well with abstract base classes other than <tt>abc.ABCMeta</tt>.</li>\n<li>Fixed a bug of <tt>GenericMethod.clone()</tt> method.  It does not reflect\ncloned one\u2019s changes to the original anymore.\n[<a href=\"https://bitbucket.org/dahlia/typequery/issue/1/\" rel=\"nofollow\">#1</a>]</li>\n</ul>\n</div>\n<div id=\"version-0-1-0\">\n<h3>Version 0.1.0</h3>\n<p>Released on May 21, 2012.</p>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2181760, "releases": {"0.1.0": [], "0.1.1": [], "0.1.2": [], "0.1.3": [], "0.1.4": [{"comment_text": "", "digests": {"md5": "457d54c37a83e4b89164b9f2cdc89612", "sha256": "4dd59fdd91794efdd6c36b8473de5bfc1f6cbca4317576000eba7947c5891a66"}, "downloads": -1, "filename": "TypeQuery-0.1.4.tar.gz", "has_sig": false, "md5_digest": "457d54c37a83e4b89164b9f2cdc89612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6778, "upload_time": "2012-10-18T13:21:44", "upload_time_iso_8601": "2012-10-18T13:21:44.138538Z", "url": "https://files.pythonhosted.org/packages/88/45/54f01328552669f7c8df96234c394c0b14a7b933f31866fd10c078f07343/TypeQuery-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "287f1f57069cd1b81f28c4f6cacd3991", "sha256": "a8fc9642eff2e04eb705897c3361ccc6530cffc71ec222a54135e6dba28517d6"}, "downloads": -1, "filename": "TypeQuery-0.1.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "287f1f57069cd1b81f28c4f6cacd3991", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9836, "upload_time": "2016-06-22T18:19:31", "upload_time_iso_8601": "2016-06-22T18:19:31.622693Z", "url": "https://files.pythonhosted.org/packages/4a/89/c30bd30a30cc65c71dad3c54d85453173141856017c21f03dfa4ab0eeb25/TypeQuery-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8e1dbdc023c8fe4c01229f564a81ac0", "sha256": "00f60785053723bca1edb519264fb05c3becbe462ba157da47a90e7ae34fb9bd"}, "downloads": -1, "filename": "TypeQuery-0.1.5.tar.gz", "has_sig": true, "md5_digest": "a8e1dbdc023c8fe4c01229f564a81ac0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7098, "upload_time": "2016-06-22T18:19:26", "upload_time_iso_8601": "2016-06-22T18:19:26.624768Z", "url": "https://files.pythonhosted.org/packages/ac/f9/7015735ceac509438f54a944fb0e17f7f429e39712ee6c7e01273dbd3a37/TypeQuery-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "287f1f57069cd1b81f28c4f6cacd3991", "sha256": "a8fc9642eff2e04eb705897c3361ccc6530cffc71ec222a54135e6dba28517d6"}, "downloads": -1, "filename": "TypeQuery-0.1.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "287f1f57069cd1b81f28c4f6cacd3991", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9836, "upload_time": "2016-06-22T18:19:31", "upload_time_iso_8601": "2016-06-22T18:19:31.622693Z", "url": "https://files.pythonhosted.org/packages/4a/89/c30bd30a30cc65c71dad3c54d85453173141856017c21f03dfa4ab0eeb25/TypeQuery-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8e1dbdc023c8fe4c01229f564a81ac0", "sha256": "00f60785053723bca1edb519264fb05c3becbe462ba157da47a90e7ae34fb9bd"}, "downloads": -1, "filename": "TypeQuery-0.1.5.tar.gz", "has_sig": true, "md5_digest": "a8e1dbdc023c8fe4c01229f564a81ac0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7098, "upload_time": "2016-06-22T18:19:26", "upload_time_iso_8601": "2016-06-22T18:19:26.624768Z", "url": "https://files.pythonhosted.org/packages/ac/f9/7015735ceac509438f54a944fb0e17f7f429e39712ee6c7e01273dbd3a37/TypeQuery-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:45 2020"}