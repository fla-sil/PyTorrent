{"info": {"author": "Andrew Spittlemeister", "author_email": "andrew.spittlemeister@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# borca\n\n[![pipeline](https://gitlab.com/AndrewSpittlemeister/borca/badges/master/pipeline.svg)](https://gitlab.com/AndrewSpittlemeister/borca/pipelines/latest)\n[![coverage](https://gitlab.com/AndrewSpittlemeister/borca/badges/master/coverage.svg)](https://gitlab.com/AndrewSpittlemeister/borca/pipelines/latest)\n[![PyPI Version](https://img.shields.io/pypi/v/borca.svg)](https://pypi.org/project/borca/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/borca.svg)](https://pypi.org/project/borca/)\n\nA PEP 518 compatible, explicit build orchestration (*\"borca\"*, it's a stretch; I know) tool for Python. It is a simple tool that allows for the creation of an acyclic-task graph made up of custom operations that are typically using tools commonly found in a Python development stack (i.e. linting, testing, etc.). It makes no assumptions about its environment and does not attempt to modify it. Borca focuses on creating a model of a slim and extensible edition to the stock Python toolchain capabilities.\n\n## Current Condition\n- [x] Acyclic task graph generation\n- [x] Define default task\n- [x] Optionally define custom `.toml` file path\n- [x] Incremental builds with optional task state caching\n\n## Installation\nRecommended installation is with `pip`:\n```\npip install borca\n```\n\nOr even better, add it to the developer dependencies in your `pyproject.toml` file.\n\n## Example Usage\nBorca actually uses borca itself, so take a look at its own [pyproject.toml](https://github.com/AndrewSpittlemeister/borca/blob/master/pyproject.toml) file and take a look at how it is structured. I generally use borca in the context of a virtual environment management tool such as `poetry` or `flit`.\n\n```\n$ poetry run borca test\n```\nThis can get a little weird when defining a build task where you want to use something like the `poetry` build command (as borca does on itself) because it will create a nested virtual environment when invoking the `poetry` command again. While weird, this doesn't generally create any problems.\n\nAlthough, this is not necessary if you wish to install borca manually.\n```\n$ borca test\n```\n\nGeneral usage of the borca cli is as follows:\n```\nusage: borca [-h] [--no-hash] [--toml-path TOML_PATH] [--verbosity {0,1,2}] task-name\n\nPython build orchestration tool.\n\npositional arguments:\n  task-name             name of the task to execute\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --no-hash             does not use or generate task I/O hash\n  --toml-path TOML_PATH\n                        specify alternate path to pyproject.toml file\n  --verbosity {0,1,2}   specify verbosity 0, 1, or 2 (default 1)\n```\n\n### Configuration\nBorca uses the `[tool.borca]` heading in the `pyproject.toml` file to define configuration and the `[[tool.borca.tasks]]` list-like heading to define each task. The following are required and optional values for borca as well as their intended types.\n\n**`[tool.borca]`**\n- Required:\n  - `default_task`: `str` (where this is the name of some defined task)\n\n**`[[tool.borca.tasks]]`**\n- Required:\n  - `name`: `str` (where this is a unique name for a task in the project scope)\n  - `commands`: `List[str]` (where this is a list of commands to be executed in the default shell)\n- Optional:\n  - `depends_on`: `List[str]` (where this is a list of other task names that this task depends on)\n  - `input_paths`: `List[str]` (where this is a list of glob patterns defining the tasks input files for task caching purposes)\n  - `output_paths`: `List[str]` (where this is a list of glob patterns defining the tasks output files for task caching purposes)\n\n## Note on Development Process\nThis is a tool I made primarily for myself; and as you can probably see from the commit history, I don't work on it very often. I work as a full-time software engineer and am getting my Master's in CS at the same time as well, so I don't find myself devoting a lot of time to side projects. That being said, feel free post issues or merge requests on GitLab. On that note, if you are seeing this on GitHub, be aware that development for this is actually [done on GitLab](https://gitlab.com/AndrewSpittlemeister/borca) due to its dope CI/CD features.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AndrewSpittlemeister/borca", "keywords": "build tool,task,tasks,make", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "borca", "package_url": "https://pypi.org/project/borca/", "platform": "", "project_url": "https://pypi.org/project/borca/", "project_urls": {"Homepage": "https://github.com/AndrewSpittlemeister/borca", "Repository": "https://github.com/AndrewSpittlemeister/borca"}, "release_url": "https://pypi.org/project/borca/2020.2/", "requires_dist": ["pydantic (>=1.1.1,<2.0.0)", "toml (>=0.10.0,<0.11.0)"], "requires_python": ">=3.7,<4.0", "summary": "Lightweight task graph execution defined with pyproject.toml files.", "version": "2020.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>borca</h1>\n<p><a href=\"https://gitlab.com/AndrewSpittlemeister/borca/pipelines/latest\" rel=\"nofollow\"><img alt=\"pipeline\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eebec8b05b7d0961302403d265aef9f0f3f081c8/68747470733a2f2f6769746c61622e636f6d2f416e6472657753706974746c656d6569737465722f626f7263612f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://gitlab.com/AndrewSpittlemeister/borca/pipelines/latest\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dbbdd4ebe29ad2b71a154b1323d5108fae500cd2/68747470733a2f2f6769746c61622e636f6d2f416e6472657753706974746c656d6569737465722f626f7263612f6261646765732f6d61737465722f636f7665726167652e737667\"></a>\n<a href=\"https://pypi.org/project/borca/\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c02d2264f68c0dfa6b952901f84a1439dd3168b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f626f7263612e737667\"></a>\n<a href=\"https://pypi.org/project/borca/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/289b235fd45f9d4c0bcb7fed560a96e84a4ec64f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f626f7263612e737667\"></a></p>\n<p>A PEP 518 compatible, explicit build orchestration (<em>\"borca\"</em>, it's a stretch; I know) tool for Python. It is a simple tool that allows for the creation of an acyclic-task graph made up of custom operations that are typically using tools commonly found in a Python development stack (i.e. linting, testing, etc.). It makes no assumptions about its environment and does not attempt to modify it. Borca focuses on creating a model of a slim and extensible edition to the stock Python toolchain capabilities.</p>\n<h2>Current Condition</h2>\n<ul>\n<li>[x] Acyclic task graph generation</li>\n<li>[x] Define default task</li>\n<li>[x] Optionally define custom <code>.toml</code> file path</li>\n<li>[x] Incremental builds with optional task state caching</li>\n</ul>\n<h2>Installation</h2>\n<p>Recommended installation is with <code>pip</code>:</p>\n<pre><code>pip install borca\n</code></pre>\n<p>Or even better, add it to the developer dependencies in your <code>pyproject.toml</code> file.</p>\n<h2>Example Usage</h2>\n<p>Borca actually uses borca itself, so take a look at its own <a href=\"https://github.com/AndrewSpittlemeister/borca/blob/master/pyproject.toml\" rel=\"nofollow\">pyproject.toml</a> file and take a look at how it is structured. I generally use borca in the context of a virtual environment management tool such as <code>poetry</code> or <code>flit</code>.</p>\n<pre><code>$ poetry run borca test\n</code></pre>\n<p>This can get a little weird when defining a build task where you want to use something like the <code>poetry</code> build command (as borca does on itself) because it will create a nested virtual environment when invoking the <code>poetry</code> command again. While weird, this doesn't generally create any problems.</p>\n<p>Although, this is not necessary if you wish to install borca manually.</p>\n<pre><code>$ borca test\n</code></pre>\n<p>General usage of the borca cli is as follows:</p>\n<pre><code>usage: borca [-h] [--no-hash] [--toml-path TOML_PATH] [--verbosity {0,1,2}] task-name\n\nPython build orchestration tool.\n\npositional arguments:\n  task-name             name of the task to execute\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --no-hash             does not use or generate task I/O hash\n  --toml-path TOML_PATH\n                        specify alternate path to pyproject.toml file\n  --verbosity {0,1,2}   specify verbosity 0, 1, or 2 (default 1)\n</code></pre>\n<h3>Configuration</h3>\n<p>Borca uses the <code>[tool.borca]</code> heading in the <code>pyproject.toml</code> file to define configuration and the <code>[[tool.borca.tasks]]</code> list-like heading to define each task. The following are required and optional values for borca as well as their intended types.</p>\n<p><strong><code>[tool.borca]</code></strong></p>\n<ul>\n<li>Required:\n<ul>\n<li><code>default_task</code>: <code>str</code> (where this is the name of some defined task)</li>\n</ul>\n</li>\n</ul>\n<p><strong><code>[[tool.borca.tasks]]</code></strong></p>\n<ul>\n<li>Required:\n<ul>\n<li><code>name</code>: <code>str</code> (where this is a unique name for a task in the project scope)</li>\n<li><code>commands</code>: <code>List[str]</code> (where this is a list of commands to be executed in the default shell)</li>\n</ul>\n</li>\n<li>Optional:\n<ul>\n<li><code>depends_on</code>: <code>List[str]</code> (where this is a list of other task names that this task depends on)</li>\n<li><code>input_paths</code>: <code>List[str]</code> (where this is a list of glob patterns defining the tasks input files for task caching purposes)</li>\n<li><code>output_paths</code>: <code>List[str]</code> (where this is a list of glob patterns defining the tasks output files for task caching purposes)</li>\n</ul>\n</li>\n</ul>\n<h2>Note on Development Process</h2>\n<p>This is a tool I made primarily for myself; and as you can probably see from the commit history, I don't work on it very often. I work as a full-time software engineer and am getting my Master's in CS at the same time as well, so I don't find myself devoting a lot of time to side projects. That being said, feel free post issues or merge requests on GitLab. On that note, if you are seeing this on GitHub, be aware that development for this is actually <a href=\"https://gitlab.com/AndrewSpittlemeister/borca\" rel=\"nofollow\">done on GitLab</a> due to its dope CI/CD features.</p>\n\n          </div>"}, "last_serial": 6565421, "releases": {"2020.1": [{"comment_text": "", "digests": {"md5": "e2e89ba93036f70bcec21966718e7b27", "sha256": "d5e0710e74400e86c2882e3119cb9a036c3cdedfb7fbb9b0ba7dddfe51ae9360"}, "downloads": -1, "filename": "borca-2020.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e2e89ba93036f70bcec21966718e7b27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9764, "upload_time": "2020-01-23T22:50:06", "upload_time_iso_8601": "2020-01-23T22:50:06.706248Z", "url": "https://files.pythonhosted.org/packages/3e/30/e3df14cba469aeb1cfb6eef01c21aa9e2fc88b4ffb4b046c83007cfb89ee/borca-2020.1-py3-none-any.whl", "yanked": false}], "2020.1rc0": [{"comment_text": "", "digests": {"md5": "2c7e69defb15063c6786e58f5e8de849", "sha256": "03e5d513276c29ecdfd631556453d7cf5636e07e969ace410ff90c73e7644321"}, "downloads": -1, "filename": "borca-2020.1rc0-py3-none-any.whl", "has_sig": false, "md5_digest": "2c7e69defb15063c6786e58f5e8de849", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9732, "upload_time": "2020-01-23T22:03:45", "upload_time_iso_8601": "2020-01-23T22:03:45.949777Z", "url": "https://files.pythonhosted.org/packages/49/ad/c8d3c15f6bb560ae3f1fbbc62ad61204226df9f1d04875bdb1bd2e8de120/borca-2020.1rc0-py3-none-any.whl", "yanked": false}], "2020.2": [{"comment_text": "", "digests": {"md5": "d08b1d7da49ba8a0583cccf7a72df19b", "sha256": "9e2e577967cae593ff83ed44b7ba9826269036241322fb1cdf0a72ee8537a079"}, "downloads": -1, "filename": "borca-2020.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d08b1d7da49ba8a0583cccf7a72df19b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 11556, "upload_time": "2020-02-03T23:05:44", "upload_time_iso_8601": "2020-02-03T23:05:44.807721Z", "url": "https://files.pythonhosted.org/packages/72/34/6e662962711064231d3c047ee636e3c334640e3eb7080988e733349ad43d/borca-2020.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d08b1d7da49ba8a0583cccf7a72df19b", "sha256": "9e2e577967cae593ff83ed44b7ba9826269036241322fb1cdf0a72ee8537a079"}, "downloads": -1, "filename": "borca-2020.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d08b1d7da49ba8a0583cccf7a72df19b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 11556, "upload_time": "2020-02-03T23:05:44", "upload_time_iso_8601": "2020-02-03T23:05:44.807721Z", "url": "https://files.pythonhosted.org/packages/72/34/6e662962711064231d3c047ee636e3c334640e3eb7080988e733349ad43d/borca-2020.2-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:36:41 2020"}