{"info": {"author": "Jan Vlcinsky", "author_email": "jan.vlcinsky@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Text Processing :: Markup :: XML"], "description": "====================\nttr.xml.csv2xml\n====================\n:Author: Jan Vlcinsky\n:e-mail: jan.vlcinsky@gmail.com\n:license: BSD\n\nttr.xml.csv2xml module contains:\n\n\tclass Csv2Xml\n\t\tConverter of CSV lines into xml elements or string\n\tfunction string2xml\n\t\tutility function to convert string into xml string in one shot.\n\nFeatures:\n\n- read CSV into XML document\n- get headers from CSV and use them as element names\n- managing CSV format\n\n\t- define CSV format as would csv module\n\t\t- using Dialect (subclass, registered one)\n\t\t- using fmtparams\n\t\t- combination (fmtparam override Dialect)\n\n- on resulting xml define:\n\n\t- name of root tag\n\t- name of row element\n\t- optional use and name of attribute in row element, showing line number\n\n- iterator over csv / xml rows\n\n- simple function string2xml including encoding\n\nInstallation\n============\nPython must be installed, version 2.6 is expected.\nYou shall have access to Internet to installa additional packages automatically from PyPi_ (lxml at this moment)\nThis package is not on PyPi_ yet (planned).\nUse of distribution package itself is needed at the moment and andy of following tools shall work\n\nUsing setup.py: unpack the package and run::\n  python setup.py install\n  \nUsing easy_install::\n  easy_install <package_file>\n  \nUsing pip::\n  pip install <package_file>\n\nOn windows, using binary setup.exe::\n  simply run the installation program.\n\n\nCSV string into XML string\n==========================\n\nSimple case could be:\n\t>>> from ttr.xml.csv2xml import string2xml\n\t>>> csv_str = \"\"\"a;b;c\n\t... 1;2;3\n\t... 11;22;33\n\t... 111;222;333\"\"\"\n\t>>> print string2xml(csv_str, delimiter = \";\")\n\t<root><row><a>1</a><b>2</b><c>3</c></row><row><a>11</a><b>22</b><c>33</c></row><row><a>111</a><b>222</b><c>333</c></row></root>\n\nIf you like to specify output encoding (default is UTF-8), tell it by encoding parameter\n\t>>> print string2xml(csv_str, delimiter = \";\", encoding = \"windows-1250\")\n\t<?xml version='1.0' encoding='windows-1250'?>\n\t<root><row><a>1</a><b>2</b><c>3</c></row><row><a>11</a><b>22</b><c>33</c></row><row><a>111</a><b>222</b><c>333</c></row></root>\n\nThe CSV format can be set also by registered dialects, adding also line numbering attribute\n\t>>> excel_str = \"\"\"a,b,c\n\t... 1,2,3\n\t... 11,22,33\n\t... 111,222,333\"\"\"\n\t>>> print string2xml(excel_str, dialect = \"excel\", row_num_att = \"rownum\")\n\t<root><row rownum=\"1\"><a>1</a><b>2</b><c>3</c></row><row rownum=\"2\"><a>11</a><b>22</b><c>33</c></row><row rownum=\"3\"><a>111</a><b>222</b><c>333</c></row></root>\n\nOr you can define your own dialect using csv.Dialect subclass\n\t>>> import csv\n\t>>> class DialectSemicolon(csv.Dialect):\n\t...  delimiter = ';'\n\t...  quotechar = '\"'\n\t...  doublequote = True\n\t...  skipinitialspace = False\n\t...  lineterminator = '\\r\\n'\n\t...  quoting = csv.QUOTE_NONE\n\t...\t\n\t>>> print string2xml(csv_str, dialect = DialectSemicolon)\n\t<root><row><a>1</a><b>2</b><c>3</c></row><row><a>11</a><b>22</b><c>33</c></row><row><a>111</a><b>222</b><c>333</c></row></root>\n\nFile object into XML string\n===========================\nCsv2Xml provides only one type of source - file like object.\nIt can be created by opening a file in style: f = open(\"my.csv\", \"b\")\nor by using string buffers:\n\n\t>>> from StringIO import StringIO\n\t>>> buff = StringIO(csv_str)\n\t>>> print buff # doctest:+ELLIPSIS\n\t<StringIO.StringIO ...>\n\t>>> from ttr.xml.csv2xml import Csv2Xml\n\t>>> csv_convertor = Csv2Xml(buff, delimiter = \";\") # doctest:+ELLIPSIS\n\t>>> print csv_convertor.as_string()\n\t<root><row><a>1</a><b>2</b><c>3</c></row><row><a>11</a><b>22</b><c>33</c></row><row><a>111</a><b>222</b><c>333</c></row></root>\n\nThis way you can easily manage conversion of files without any need to read them in advance into a string.\nYou can specify CSV file format using the same methods as with string2xml function.\n\n\t>>> buff2 = StringIO(excel_str) \n\t>>> csv_convertor = Csv2Xml(buff2, dialect = \"excel\")\n\t>>> print  csv_convertor.as_string()\n\t<root><row><a>1</a><b>2</b><c>3</c></row><row><a>11</a><b>22</b><c>33</c></row><row><a>111</a><b>222</b><c>333</c></row></root>\n\nReading CSV into XML elements\n=============================\nInstead of using string for storing resulting XML, more nataral is to get is as XML element\nYou then get root element with all the row - related elements being nested inside\nThe only difference is you call as_element method now:\n\n\t>>> buff2 = StringIO(excel_str) # doctest: +ELLIPSIS\n\t>>> csv_convertor = Csv2Xml(buff2, dialect = \"excel\")\n\t>>> xml_elm = csv_convertor.as_element()\n\t>>> print xml_elm # doctest: +ELLIPSIS\n\t<Element root ...>\n\t>>> from lxml import etree\n\t>>> etree.tostring(xml_elm)\n\t'<root><row><a>1</a><b>2</b><c>3</c></row><row><a>11</a><b>22</b><c>33</c></row><row><a>111</a><b>222</b><c>333</c></row></root>'\n\nIterating over CSV file lines\n=============================\nCsv2Xml converter can function also as an iterator - in such a case it will not return root element, but only the row elements.\n\n\t>>> buff = StringIO(excel_str)\n\t>>> csv_converter = Csv2Xml(buff, dialect = \"excel\")\n\t>>> for xml_row in csv_converter:\n\t...    print etree.tostring(xml_row)\n\t<row><a>1</a><b>2</b><c>3</c></row>\n\t<row><a>11</a><b>22</b><c>33</c></row>\n\t<row><a>111</a><b>222</b><c>333</c></row>\n  \n.. _PyPi: http://pypi.python.org/pypi\n\n\n.. This is your project NEWS file which will contain the release notes.\n.. Example: http://www.python.org/download/releases/2.6/NEWS.txt\n.. The content of this file, along with README.rst, will appear in your\n.. project's PyPI page.\n\nNews\n====\n\n0.1.2dev\n---\n\n*Release date: 2011-08-12*\n\n* Initial version\n* removed dependency on lxml, using Python ElementTree", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/vlcinsky/ttr.xml.csv2xml", "keywords": "xml csv module", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "ttr.xml.csv2xml", "package_url": "https://pypi.org/project/ttr.xml.csv2xml/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ttr.xml.csv2xml/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/vlcinsky/ttr.xml.csv2xml"}, "release_url": "https://pypi.org/project/ttr.xml.csv2xml/0.1.2dev002/", "requires_dist": null, "requires_python": null, "summary": "module, providing conversion of csv file into xml", "version": "0.1.2dev002", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td>Jan Vlcinsky</td></tr>\n<tr><th>e-mail:</th><td><a href=\"mailto:jan.vlcinsky%40gmail.com\">jan<span>.</span>vlcinsky<span>@</span>gmail<span>.</span>com</a></td>\n</tr>\n<tr><th>license:</th><td>BSD</td>\n</tr>\n</tbody>\n</table>\n<p>ttr.xml.csv2xml module contains:</p>\n<blockquote>\n<dl>\n<dt>class Csv2Xml</dt>\n<dd>Converter of CSV lines into xml elements or string</dd>\n<dt>function string2xml</dt>\n<dd>utility function to convert string into xml string in one shot.</dd>\n</dl>\n</blockquote>\n<p>Features:</p>\n<ul>\n<li><p>read CSV into XML document</p>\n</li>\n<li><p>get headers from CSV and use them as element names</p>\n</li>\n<li><p>managing CSV format</p>\n<blockquote>\n<ul>\n<li><dl>\n<dt>define CSV format as would csv module</dt>\n<dd><ul>\n<li>using Dialect (subclass, registered one)</li>\n<li>using fmtparams</li>\n<li>combination (fmtparam override Dialect)</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>on resulting xml define:</p>\n<blockquote>\n<ul>\n<li>name of root tag</li>\n<li>name of row element</li>\n<li>optional use and name of attribute in row element, showing line number</li>\n</ul>\n</blockquote>\n</li>\n<li><p>iterator over csv / xml rows</p>\n</li>\n<li><p>simple function string2xml including encoding</p>\n</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Python must be installed, version 2.6 is expected.\nYou shall have access to Internet to installa additional packages automatically from <a href=\"http://pypi.python.org/pypi\" rel=\"nofollow\">PyPi</a> (lxml at this moment)\nThis package is not on <a href=\"http://pypi.python.org/pypi\" rel=\"nofollow\">PyPi</a> yet (planned).\nUse of distribution package itself is needed at the moment and andy of following tools shall work</p>\n<dl>\n<dt>Using setup.py: unpack the package and run::</dt>\n<dd>python setup.py install</dd>\n<dt>Using easy_install::</dt>\n<dd>easy_install &lt;package_file&gt;</dd>\n<dt>Using pip::</dt>\n<dd>pip install &lt;package_file&gt;</dd>\n<dt>On windows, using binary setup.exe::</dt>\n<dd>simply run the installation program.</dd>\n</dl>\n</div>\n<div id=\"csv-string-into-xml-string\">\n<h2>CSV string into XML string</h2>\n<dl>\n<dt>Simple case could be:</dt>\n<dd><pre>&gt;&gt;&gt; from ttr.xml.csv2xml import string2xml\n&gt;&gt;&gt; csv_str = \"\"\"a;b;c\n... 1;2;3\n... 11;22;33\n... 111;222;333\"\"\"\n&gt;&gt;&gt; print string2xml(csv_str, delimiter = \";\")\n&lt;root&gt;&lt;row&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/row&gt;&lt;/root&gt;\n</pre>\n</dd>\n<dt>If you like to specify output encoding (default is UTF-8), tell it by encoding parameter</dt>\n<dd><pre>&gt;&gt;&gt; print string2xml(csv_str, delimiter = \";\", encoding = \"windows-1250\")\n&lt;?xml version='1.0' encoding='windows-1250'?&gt;\n&lt;root&gt;&lt;row&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/row&gt;&lt;/root&gt;\n</pre>\n</dd>\n<dt>The CSV format can be set also by registered dialects, adding also line numbering attribute</dt>\n<dd><pre>&gt;&gt;&gt; excel_str = \"\"\"a,b,c\n... 1,2,3\n... 11,22,33\n... 111,222,333\"\"\"\n&gt;&gt;&gt; print string2xml(excel_str, dialect = \"excel\", row_num_att = \"rownum\")\n&lt;root&gt;&lt;row rownum=\"1\"&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/row&gt;&lt;row rownum=\"2\"&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/row&gt;&lt;row rownum=\"3\"&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/row&gt;&lt;/root&gt;\n</pre>\n</dd>\n<dt>Or you can define your own dialect using csv.Dialect subclass</dt>\n<dd><pre>&gt;&gt;&gt; import csv\n&gt;&gt;&gt; class DialectSemicolon(csv.Dialect):\n...  delimiter = ';'\n...  quotechar = '\"'\n...  doublequote = True\n...  skipinitialspace = False\n...  lineterminator = '\\r\\n'\n...  quoting = csv.QUOTE_NONE\n...\n&gt;&gt;&gt; print string2xml(csv_str, dialect = DialectSemicolon)\n&lt;root&gt;&lt;row&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/row&gt;&lt;/root&gt;\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"file-object-into-xml-string\">\n<h2>File object into XML string</h2>\n<p>Csv2Xml provides only one type of source - file like object.\nIt can be created by opening a file in style: f = open(\u201cmy.csv\u201d, \u201cb\u201d)\nor by using string buffers:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from StringIO import StringIO\n&gt;&gt;&gt; buff = StringIO(csv_str)\n&gt;&gt;&gt; print buff # doctest:+ELLIPSIS\n&lt;StringIO.StringIO ...&gt;\n&gt;&gt;&gt; from ttr.xml.csv2xml import Csv2Xml\n&gt;&gt;&gt; csv_convertor = Csv2Xml(buff, delimiter = \";\") # doctest:+ELLIPSIS\n&gt;&gt;&gt; print csv_convertor.as_string()\n&lt;root&gt;&lt;row&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/row&gt;&lt;/root&gt;\n</pre>\n</blockquote>\n<p>This way you can easily manage conversion of files without any need to read them in advance into a string.\nYou can specify CSV file format using the same methods as with string2xml function.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; buff2 = StringIO(excel_str)\n&gt;&gt;&gt; csv_convertor = Csv2Xml(buff2, dialect = \"excel\")\n&gt;&gt;&gt; print  csv_convertor.as_string()\n&lt;root&gt;&lt;row&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/row&gt;&lt;/root&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"reading-csv-into-xml-elements\">\n<h2>Reading CSV into XML elements</h2>\n<p>Instead of using string for storing resulting XML, more nataral is to get is as XML element\nYou then get root element with all the row - related elements being nested inside\nThe only difference is you call as_element method now:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; buff2 = StringIO(excel_str) # doctest: +ELLIPSIS\n&gt;&gt;&gt; csv_convertor = Csv2Xml(buff2, dialect = \"excel\")\n&gt;&gt;&gt; xml_elm = csv_convertor.as_element()\n&gt;&gt;&gt; print xml_elm # doctest: +ELLIPSIS\n&lt;Element root ...&gt;\n&gt;&gt;&gt; from lxml import etree\n&gt;&gt;&gt; etree.tostring(xml_elm)\n'&lt;root&gt;&lt;row&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/row&gt;&lt;row&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/row&gt;&lt;/root&gt;'\n</pre>\n</blockquote>\n</div>\n<div id=\"iterating-over-csv-file-lines\">\n<h2>Iterating over CSV file lines</h2>\n<p>Csv2Xml converter can function also as an iterator - in such a case it will not return root element, but only the row elements.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; buff = StringIO(excel_str)\n&gt;&gt;&gt; csv_converter = Csv2Xml(buff, dialect = \"excel\")\n&gt;&gt;&gt; for xml_row in csv_converter:\n...    print etree.tostring(xml_row)\n&lt;row&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/row&gt;\n&lt;row&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/row&gt;\n&lt;row&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/row&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"news\">\n<h2>News</h2>\n<p>0.1.2dev\n\u2014</p>\n<p><em>Release date: 2011-08-12</em></p>\n<ul>\n<li>Initial version</li>\n<li>removed dependency on lxml, using Python ElementTree</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 800993, "releases": {"0.1.2dev002": [{"comment_text": "", "digests": {"md5": "606d4bcd4780b7a79ac9f0b92d6180bc", "sha256": "24cde0d416a73127f7932eb3fa26c37d6f005997b67b8c6cc7bd8fcced4b3493"}, "downloads": -1, "filename": "ttr.xml.csv2xml-0.1.2dev002-py2.6.egg", "has_sig": false, "md5_digest": "606d4bcd4780b7a79ac9f0b92d6180bc", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 14655, "upload_time": "2011-08-12T20:25:46", "upload_time_iso_8601": "2011-08-12T20:25:46.435156Z", "url": "https://files.pythonhosted.org/packages/2f/d6/df579ba78326405fae39708ca179661c5bde0f2dddd633d0fbddf54b8a87/ttr.xml.csv2xml-0.1.2dev002-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "320f585655b899ed415b878f65ec5f3a", "sha256": "bca9f2902cf6c2f4ca85fda6fafe4a0d3d636deff20017e69fcf5f5ece94c88a"}, "downloads": -1, "filename": "ttr.xml.csv2xml-0.1.2dev002.win32.exe", "has_sig": false, "md5_digest": "320f585655b899ed415b878f65ec5f3a", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 211404, "upload_time": "2011-08-12T20:25:36", "upload_time_iso_8601": "2011-08-12T20:25:36.013423Z", "url": "https://files.pythonhosted.org/packages/bd/a8/3cce53f8353da3191a3ad7b3dc75bcf9c895f40a797d94fe518c91719f3e/ttr.xml.csv2xml-0.1.2dev002.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "901c51c56fbe2c089a5244b24052cfda", "sha256": "b11a93166cff39d371d54aeb748c0f4962caa5dda7b44f12a19de21d109254d3"}, "downloads": -1, "filename": "ttr.xml.csv2xml-0.1.2dev002.zip", "has_sig": false, "md5_digest": "901c51c56fbe2c089a5244b24052cfda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12226, "upload_time": "2011-08-12T20:25:30", "upload_time_iso_8601": "2011-08-12T20:25:30.133704Z", "url": "https://files.pythonhosted.org/packages/d8/f4/7642eefeda1ad8dec41ccff5559eea82921868015aeae0cdba6240384e03/ttr.xml.csv2xml-0.1.2dev002.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "606d4bcd4780b7a79ac9f0b92d6180bc", "sha256": "24cde0d416a73127f7932eb3fa26c37d6f005997b67b8c6cc7bd8fcced4b3493"}, "downloads": -1, "filename": "ttr.xml.csv2xml-0.1.2dev002-py2.6.egg", "has_sig": false, "md5_digest": "606d4bcd4780b7a79ac9f0b92d6180bc", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 14655, "upload_time": "2011-08-12T20:25:46", "upload_time_iso_8601": "2011-08-12T20:25:46.435156Z", "url": "https://files.pythonhosted.org/packages/2f/d6/df579ba78326405fae39708ca179661c5bde0f2dddd633d0fbddf54b8a87/ttr.xml.csv2xml-0.1.2dev002-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "320f585655b899ed415b878f65ec5f3a", "sha256": "bca9f2902cf6c2f4ca85fda6fafe4a0d3d636deff20017e69fcf5f5ece94c88a"}, "downloads": -1, "filename": "ttr.xml.csv2xml-0.1.2dev002.win32.exe", "has_sig": false, "md5_digest": "320f585655b899ed415b878f65ec5f3a", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 211404, "upload_time": "2011-08-12T20:25:36", "upload_time_iso_8601": "2011-08-12T20:25:36.013423Z", "url": "https://files.pythonhosted.org/packages/bd/a8/3cce53f8353da3191a3ad7b3dc75bcf9c895f40a797d94fe518c91719f3e/ttr.xml.csv2xml-0.1.2dev002.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "901c51c56fbe2c089a5244b24052cfda", "sha256": "b11a93166cff39d371d54aeb748c0f4962caa5dda7b44f12a19de21d109254d3"}, "downloads": -1, "filename": "ttr.xml.csv2xml-0.1.2dev002.zip", "has_sig": false, "md5_digest": "901c51c56fbe2c089a5244b24052cfda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12226, "upload_time": "2011-08-12T20:25:30", "upload_time_iso_8601": "2011-08-12T20:25:30.133704Z", "url": "https://files.pythonhosted.org/packages/d8/f4/7642eefeda1ad8dec41ccff5559eea82921868015aeae0cdba6240384e03/ttr.xml.csv2xml-0.1.2dev002.zip", "yanked": false}], "timestamp": "Fri May  8 03:44:57 2020"}