{"info": {"author": "Remme", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "![Remme icon](https://habrastorage.org/webt/l8/37/ql/l837ql83zzeeoxikv58v5av5jsi.png)\n\n# Remme Python Client\n\n[![Release](https://img.shields.io/github/release/Remmeauth/remme-client-python.svg)](https://github.com/Remmeauth/remme-client-python/releases)\n[![PyPI version shields.io](https://img.shields.io/pypi/v/remme.svg)](https://pypi.python.org/pypi/remme/)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/remme.svg)](https://pypi.python.org/pypi/remme)\n[![Documentation status](https://readthedocs.org/projects/remme/badge/?version=latest)](http://remme.readthedocs.io/?badge=latest)\n[![PyPI license](https://img.shields.io/pypi/l/remme.svg)](https://pypi.python.org/pypi/remme/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/remme.svg)](https://pypi.python.org/pypi/remme/)\n\nAn open source Python integration library for REMChain, simplifying the access\nand interaction with Remme nodes both public or permissioned.\n\n* [How to use](#how-to-use)\n    * [1. Install Remme protocol](#1-install-remme-protocol)\n    * [2. Install dependencies](#2-install-dependencies)\n    * [3. Install library](#3-install-library)\n* [Examples](#examples)\n    * [Remme client](#remme-client)\n    * [Tokens](#tokens)\n    * [Certificates](#certificates)\n    * [Subscribing to Events](#subscribing-to-events)\n* [Contributing](#contributing)\n* [License](#license)\n\n## How to use\n\n### 1. Install Remme protocol\n\nInstall and run Remme protocol with required RPC API methods enabled.\n\nYou can check out how to do that at [Remme core repo](<https://github.com/Remmeauth/remme-core/>).\n\n### 2. Install dependencies:\n\nBefore installing the library, make sure that all the dependencies listed are installed.\n\n**Required by one of the requirements [system packages list](https://github.com/ludbb/secp256k1-py#installation-with-compilation)**\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install python3-dev python3-setuptools -y\n$ sudo apt-get install build-essential automake libtool pkg-config libffi-dev -y\n```\n\n### 3. Install library\n\nInstall the latest version of library to your Python project from terminal using `pip`:\n\n```bash\n$ pip3 install remme\n```\n\n## Examples\n\n#### Remme client\n\n```python\nfrom remme import Remme\nfrom remme.models.account.account_type import AccountType\n\naccount_config = {\n    'private_key_hex': 'f4f551c178104595ff184f1786ddb2bfdc74b24562611edcab90d4729fb4bab8', \n    'account_type': AccountType.USER,\n}\nnetwork_config = {\n    'node_address': 'localhost:8080', \n    'ssl_mode': False,\n}\n\nremme = Remme(account_config=account_config, network_config=network_config)\n```\n\n#### Tokens\n\n```python\nremme_address = '1120077f88b0b798347b3f52751bb99fa8cabaf926c5a1dad2d975d7b966a85b3a9c21'\n\nbalance = await remme.token.get_balance(address=remme_address)\nprint(f'Account \u2014 {remme_address}, balance \u2014 {balance} REM.')\n\ntransaction_result = await remme.token.transfer(address_to=remme_address, amount=10)\nprint(f'Transaction batch id: {transaction_result.batch_id}')\n\n```\n\n#### Certificates\n\n```python\ncertificate_transaction_result = await remme.certificate.create_and_store(\n        common_name='user_name',\n        email='user@email.com',\n        name='John',\n        surname='Smith',\n        country_name='US',\n        validity=360,\n        serial=str(datetime.now())\n    )\ncertificate = certificate_transaction_result.certificate\n\nwhile True:\n\n    try:\n        info = await remme.certificate.get_info(certificate)\n        print(f'Info: {info.data}')\n\n        certificate_status = await remme.certificate.check(certificate)\n        print(f'Certificate is valid: {certificate_status}')\n        break\n\n    except RpcGenericServerDefinedError:\n        continue\n```\n\n#### Subscribing to Events\n\nRemmeEvents is enums which describe all available events.\n\n```python\nfrom remme.models.websocket.events import RemmeEvents\n\nevents = await remme.events.subscribe(events=RemmeEvents.AtomicSwap.value)\n\nasync for response in events:\n\n    print(\"connected\")\n    \n    if isinstance(response, dict):\n        print(response)\n    \n    else:\n        print(f'State: {response.state}')\n        print(f'Sender address: {response.sender_address}')\n        print(f'Receiver address: {response.receiver_address}')\n        print(f'Amount: {response.amount}')\n\n```\n\nAlso we give a possibility to start listen events from previous block by providing last known block id.\n\n```python\nfrom remme.models.websocket.events import RemmeEvents\n\nevents = await remme.events.subscribe(\n    events=RemmeEvents.AtomicSwap.value, \n    last_known_block_id='db19f0e3b3f001670bebc814e238df48cef059f3f0668f57702ba9ff0c4b8ec45c7298f08b4c2fa67602da27a84b3df5dc78ce0f7774b3d3ae094caeeb9cbc82',\n)\n\nasync for response in events:\n\n    print(\"connected\")\n    \n    if isinstance(response, dict):\n        print(response)\n    \n    else:\n        print(f'State: {response.state}')\n        print(f'Sender address: {response.sender_address}')\n        print(f'Receiver address: {response.receiver_address}')\n        print(f'Amount: {response.amount}')\n```\n\nUnsubscribe from listening events.\n\n```python\nawait remme.events.unsubscribe(events=RemmeEvents.AtomicSwap.value)\n```\n\n## Contributing\n\nClone the project and install requirements:\n\n```bash\n$ git clone git@github.com:Remmeauth/remme-client-python.git && cd remme-client-python\n$ pip3 install -r requirements.txt\n$ pip3 install -r requirements-dev.txt\n```\n\nIf you prefer working with the [Docker](https://www.docker.com), follow:\n\n```bash\n$ git clone git@github.com:Remmeauth/remme-client-python.git && cd remme-client-python\n$ docker build -t remme-client-python . -f Dockerfile\n$ docker run -v $PWD:/remme-client-python --name remme-client-python remme-client-python\n```\n\nEnter the container bash, check `Python` version and run tests:\n\n```bash\n$ docker exec -it remme-client-python bash\n$ root@98247c92404d:/remme-client-python# python --version\n$ root@98247c92404d:/remme-client-python# pytest -vv tests\n```\n\nClean container and images with the following command:\n\n```bash\n$ docker rm $(docker ps -a -q) -f\n$ docker rmi $(docker images -q) -f\n```\n\n## License\n\nRemme software and documentation are licensed under `Apache License Version 2.0 <LICENSE>`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Remmeauth/remme-client-python", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "remme", "package_url": "https://pypi.org/project/remme/", "platform": "", "project_url": "https://pypi.org/project/remme/", "project_urls": {"Homepage": "https://github.com/Remmeauth/remme-client-python"}, "release_url": "https://pypi.org/project/remme/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Python integration library for REMChain.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Remme icon\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d004ececcf0d156fb83fc2760ba639eb6528c23a/68747470733a2f2f686162726173746f726167652e6f72672f776562742f6c382f33372f716c2f6c383337716c38337a7a65656f78696b76353876356176356a73692e706e67\"></p>\n<h1>Remme Python Client</h1>\n<p><a href=\"https://github.com/Remmeauth/remme-client-python/releases\" rel=\"nofollow\"><img alt=\"Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/14a6951af6fd244a6939288962f85d2a896d3828/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f52656d6d65617574682f72656d6d652d636c69656e742d707974686f6e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/remme/\" rel=\"nofollow\"><img alt=\"PyPI version shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dce38c45c4b60ac4cc21698b9a8cb0e69bcb6118/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72656d6d652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/remme\" rel=\"nofollow\"><img alt=\"PyPI Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89187fe6abc409607cc0d2272dc3ed8f8f1269f9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f72656d6d652e737667\"></a>\n<a href=\"http://remme.readthedocs.io/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c0d9355e06b2758117153b176eafc529b52e2a5/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f72656d6d652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.python.org/pypi/remme/\" rel=\"nofollow\"><img alt=\"PyPI license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e12c0239a3f01abb45fa4ce21d7d9f1aa4026aa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f72656d6d652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/remme/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61d1005656d68073997ac5af5972f7db76d5a4b5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72656d6d652e737667\"></a></p>\n<p>An open source Python integration library for REMChain, simplifying the access\nand interaction with Remme nodes both public or permissioned.</p>\n<ul>\n<li><a href=\"#how-to-use\" rel=\"nofollow\">How to use</a>\n<ul>\n<li><a href=\"#1-install-remme-protocol\" rel=\"nofollow\">1. Install Remme protocol</a></li>\n<li><a href=\"#2-install-dependencies\" rel=\"nofollow\">2. Install dependencies</a></li>\n<li><a href=\"#3-install-library\" rel=\"nofollow\">3. Install library</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a>\n<ul>\n<li><a href=\"#remme-client\" rel=\"nofollow\">Remme client</a></li>\n<li><a href=\"#tokens\" rel=\"nofollow\">Tokens</a></li>\n<li><a href=\"#certificates\" rel=\"nofollow\">Certificates</a></li>\n<li><a href=\"#subscribing-to-events\" rel=\"nofollow\">Subscribing to Events</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>How to use</h2>\n<h3>1. Install Remme protocol</h3>\n<p>Install and run Remme protocol with required RPC API methods enabled.</p>\n<p>You can check out how to do that at <a href=\"https://github.com/Remmeauth/remme-core/\" rel=\"nofollow\">Remme core repo</a>.</p>\n<h3>2. Install dependencies:</h3>\n<p>Before installing the library, make sure that all the dependencies listed are installed.</p>\n<p><strong>Required by one of the requirements <a href=\"https://github.com/ludbb/secp256k1-py#installation-with-compilation\" rel=\"nofollow\">system packages list</a></strong></p>\n<pre>$ sudo apt-get update\n$ sudo apt-get install python3-dev python3-setuptools -y\n$ sudo apt-get install build-essential automake libtool pkg-config libffi-dev -y\n</pre>\n<h3>3. Install library</h3>\n<p>Install the latest version of library to your Python project from terminal using <code>pip</code>:</p>\n<pre>$ pip3 install remme\n</pre>\n<h2>Examples</h2>\n<h4>Remme client</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">remme</span> <span class=\"kn\">import</span> <span class=\"n\">Remme</span>\n<span class=\"kn\">from</span> <span class=\"nn\">remme.models.account.account_type</span> <span class=\"kn\">import</span> <span class=\"n\">AccountType</span>\n\n<span class=\"n\">account_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'private_key_hex'</span><span class=\"p\">:</span> <span class=\"s1\">'f4f551c178104595ff184f1786ddb2bfdc74b24562611edcab90d4729fb4bab8'</span><span class=\"p\">,</span> \n    <span class=\"s1\">'account_type'</span><span class=\"p\">:</span> <span class=\"n\">AccountType</span><span class=\"o\">.</span><span class=\"n\">USER</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">network_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'node_address'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost:8080'</span><span class=\"p\">,</span> \n    <span class=\"s1\">'ssl_mode'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">remme</span> <span class=\"o\">=</span> <span class=\"n\">Remme</span><span class=\"p\">(</span><span class=\"n\">account_config</span><span class=\"o\">=</span><span class=\"n\">account_config</span><span class=\"p\">,</span> <span class=\"n\">network_config</span><span class=\"o\">=</span><span class=\"n\">network_config</span><span class=\"p\">)</span>\n</pre>\n<h4>Tokens</h4>\n<pre><span class=\"n\">remme_address</span> <span class=\"o\">=</span> <span class=\"s1\">'1120077f88b0b798347b3f52751bb99fa8cabaf926c5a1dad2d975d7b966a85b3a9c21'</span>\n\n<span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">remme</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">get_balance</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"n\">remme_address</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Account \u2014 </span><span class=\"si\">{</span><span class=\"n\">remme_address</span><span class=\"si\">}</span><span class=\"s1\">, balance \u2014 </span><span class=\"si\">{</span><span class=\"n\">balance</span><span class=\"si\">}</span><span class=\"s1\"> REM.'</span><span class=\"p\">)</span>\n\n<span class=\"n\">transaction_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">remme</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"n\">address_to</span><span class=\"o\">=</span><span class=\"n\">remme_address</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Transaction batch id: </span><span class=\"si\">{</span><span class=\"n\">transaction_result</span><span class=\"o\">.</span><span class=\"n\">batch_id</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h4>Certificates</h4>\n<pre><span class=\"n\">certificate_transaction_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">remme</span><span class=\"o\">.</span><span class=\"n\">certificate</span><span class=\"o\">.</span><span class=\"n\">create_and_store</span><span class=\"p\">(</span>\n        <span class=\"n\">common_name</span><span class=\"o\">=</span><span class=\"s1\">'user_name'</span><span class=\"p\">,</span>\n        <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'user@email.com'</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span>\n        <span class=\"n\">surname</span><span class=\"o\">=</span><span class=\"s1\">'Smith'</span><span class=\"p\">,</span>\n        <span class=\"n\">country_name</span><span class=\"o\">=</span><span class=\"s1\">'US'</span><span class=\"p\">,</span>\n        <span class=\"n\">validity</span><span class=\"o\">=</span><span class=\"mi\">360</span><span class=\"p\">,</span>\n        <span class=\"n\">serial</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n    <span class=\"p\">)</span>\n<span class=\"n\">certificate</span> <span class=\"o\">=</span> <span class=\"n\">certificate_transaction_result</span><span class=\"o\">.</span><span class=\"n\">certificate</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">remme</span><span class=\"o\">.</span><span class=\"n\">certificate</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">(</span><span class=\"n\">certificate</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Info: </span><span class=\"si\">{</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">certificate_status</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">remme</span><span class=\"o\">.</span><span class=\"n\">certificate</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">certificate</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Certificate is valid: </span><span class=\"si\">{</span><span class=\"n\">certificate_status</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n\n    <span class=\"k\">except</span> <span class=\"n\">RpcGenericServerDefinedError</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>\n</pre>\n<h4>Subscribing to Events</h4>\n<p>RemmeEvents is enums which describe all available events.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">remme.models.websocket.events</span> <span class=\"kn\">import</span> <span class=\"n\">RemmeEvents</span>\n\n<span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">remme</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"n\">RemmeEvents</span><span class=\"o\">.</span><span class=\"n\">AtomicSwap</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">response</span> <span class=\"ow\">in</span> <span class=\"n\">events</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"connected\"</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'State: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Sender address: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">sender_address</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Receiver address: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">receiver_address</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Amount: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Also we give a possibility to start listen events from previous block by providing last known block id.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">remme.models.websocket.events</span> <span class=\"kn\">import</span> <span class=\"n\">RemmeEvents</span>\n\n<span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">remme</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span>\n    <span class=\"n\">events</span><span class=\"o\">=</span><span class=\"n\">RemmeEvents</span><span class=\"o\">.</span><span class=\"n\">AtomicSwap</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> \n    <span class=\"n\">last_known_block_id</span><span class=\"o\">=</span><span class=\"s1\">'db19f0e3b3f001670bebc814e238df48cef059f3f0668f57702ba9ff0c4b8ec45c7298f08b4c2fa67602da27a84b3df5dc78ce0f7774b3d3ae094caeeb9cbc82'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">response</span> <span class=\"ow\">in</span> <span class=\"n\">events</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"connected\"</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'State: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Sender address: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">sender_address</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Receiver address: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">receiver_address</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Amount: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Unsubscribe from listening events.</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">remme</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">unsubscribe</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"n\">RemmeEvents</span><span class=\"o\">.</span><span class=\"n\">AtomicSwap</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<h2>Contributing</h2>\n<p>Clone the project and install requirements:</p>\n<pre>$ git clone git@github.com:Remmeauth/remme-client-python.git <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> remme-client-python\n$ pip3 install -r requirements.txt\n$ pip3 install -r requirements-dev.txt\n</pre>\n<p>If you prefer working with the <a href=\"https://www.docker.com\" rel=\"nofollow\">Docker</a>, follow:</p>\n<pre>$ git clone git@github.com:Remmeauth/remme-client-python.git <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> remme-client-python\n$ docker build -t remme-client-python . -f Dockerfile\n$ docker run -v <span class=\"nv\">$PWD</span>:/remme-client-python --name remme-client-python remme-client-python\n</pre>\n<p>Enter the container bash, check <code>Python</code> version and run tests:</p>\n<pre>$ docker <span class=\"nb\">exec</span> -it remme-client-python bash\n$ root@98247c92404d:/remme-client-python# python --version\n$ root@98247c92404d:/remme-client-python# pytest -vv tests\n</pre>\n<p>Clean container and images with the following command:</p>\n<pre>$ docker rm <span class=\"k\">$(</span>docker ps -a -q<span class=\"k\">)</span> -f\n$ docker rmi <span class=\"k\">$(</span>docker images -q<span class=\"k\">)</span> -f\n</pre>\n<h2>License</h2>\n<p>Remme software and documentation are licensed under <code>Apache License Version 2.0 &lt;LICENSE&gt;</code>.</p>\n\n          </div>"}, "last_serial": 5292268, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "368114b8098e26371e07d399ff08c8ee", "sha256": "edc0ed5db4c63cfe75bbd86f8bb292f80c0786c1c1f7abea082bbac8b1559d2c"}, "downloads": -1, "filename": "remme-1.0.0.tar.gz", "has_sig": false, "md5_digest": "368114b8098e26371e07d399ff08c8ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54518, "upload_time": "2019-03-21T12:07:18", "upload_time_iso_8601": "2019-03-21T12:07:18.627498Z", "url": "https://files.pythonhosted.org/packages/ba/f7/7d847bcdc114237ffeb43d751869c50b618d2b5139219d9c5e2a458d9048/remme-1.0.0.tar.gz", "yanked": false}], "1.1.0a1": [{"comment_text": "", "digests": {"md5": "7b06c648fab1c17935bcdea0d850acf7", "sha256": "cc382a437a6617cb28632963ede6bf89f715339b1770c87593480553da635d36"}, "downloads": -1, "filename": "remme-1.1.0a1.tar.gz", "has_sig": false, "md5_digest": "7b06c648fab1c17935bcdea0d850acf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60534, "upload_time": "2019-04-23T15:38:29", "upload_time_iso_8601": "2019-04-23T15:38:29.682214Z", "url": "https://files.pythonhosted.org/packages/54/0c/9a9893ac87f68a2de7b66f182bb7422a5d0efc5de4eb8b0e58135b31b186/remme-1.1.0a1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "daba1f35803608f7d289b1b8c874b610", "sha256": "cabccaeac154f8904589dd56ac34aa44125a678c679fcae2c38dd494fb63a1fb"}, "downloads": -1, "filename": "remme-1.1.1.tar.gz", "has_sig": false, "md5_digest": "daba1f35803608f7d289b1b8c874b610", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60276, "upload_time": "2019-05-20T13:13:16", "upload_time_iso_8601": "2019-05-20T13:13:16.625334Z", "url": "https://files.pythonhosted.org/packages/b8/e1/5871831a2979943b8fa130000a9c59a5a2635dc4401e2064662f3a249c8c/remme-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "daba1f35803608f7d289b1b8c874b610", "sha256": "cabccaeac154f8904589dd56ac34aa44125a678c679fcae2c38dd494fb63a1fb"}, "downloads": -1, "filename": "remme-1.1.1.tar.gz", "has_sig": false, "md5_digest": "daba1f35803608f7d289b1b8c874b610", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60276, "upload_time": "2019-05-20T13:13:16", "upload_time_iso_8601": "2019-05-20T13:13:16.625334Z", "url": "https://files.pythonhosted.org/packages/b8/e1/5871831a2979943b8fa130000a9c59a5a2635dc4401e2064662f3a249c8c/remme-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:54 2020"}