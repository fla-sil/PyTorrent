{"info": {"author": "HacKan", "author_email": "hackan@rlab.be", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: System :: Monitoring", "Topic :: Utilities", "Typing :: Typed"], "description": "# HealthChecker\n\nA very simple python script to check the *health* of a service: make a GET request to it and if it answers it on time, then it's alive.  \nAdditionally, it can write the result of the operation in a git repo hosted on Github or in a local file. Or notify dead services through a POST to some JSON API.\n\nActions are logged using Python's standard logger and displayed according to the log level set.\n\nThis app was thought mainly for our [status page](https://github.com/rlyehlab/status). It's currently being maintained in our [repository](https://git.rlab.be/sysadmins/healthchecker).\n\n## Requirements\n\n* Python 3.7+\n* PyGithub 1.43+\n* requests 2.21+\n\n## Usage\n\n```\nusage: healthchecker [-h] [--gh-repo GH_REPO] [--gh-filename GH_FILENAME]\n                     [--gh-branch GH_BRANCH] [--gh-token GH_TOKEN]\n                     [--gh-email GH_EMAIL] [--notify-url NOTIFY_URL]\n                     [--notify-payload NOTIFY_PAYLOAD]\n                     [--notify-header NOTIFY_HEADER] [--notify-json]\n                     [--version] [--validation VALIDATION] [--output OUTPUT]\n                     [url [url ...]]\n\nHealthChecker v1.1.0 by HacKan (https://hackan.net) FOSS under GNU GPL v3.0 or\nnewer. Checks URLs through HTTP GET requests to verify their availability.\nOptionally writes the status result to a file in Github. Using Github requires\nthe repository name, the filename and an API token. Besides the ones listed\nbelow, the following env vars exist: HEALTHCHECKER_LOG_LEVEL sets the minimal\nlogging level and defaults to info (can be: debug, info, warning, error,\ncritical); HEALTHCHECKER_REQUESTS_TIMEOUT sets the amount of time in seconds\nto wait for services to respond and defaults to 10 seconds (setting a very low\nvalue might cause several false positives). Note: command-line parameters will\nalways supersede env vars.\n\npositional arguments:\n  url                   (HEALTHCHECKER_URLS (comma-separated)) URL to check\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show version and exit\n  --validation VALIDATION\n                        (HEALTHCHECKER_URLS_VALIDATION (comma-separated))\n                        string to find in the body of a request to an URL as a\n                        validation, one per URL (or the last one is used for\n                        the remaining URLs) (this parameter can be repeated as\n                        needed)\n  --output OUTPUT, -o OUTPUT\n                        (HEALTHCHECKER_OUTPUT) store result in a file,\n                        overwriting if exists (use `-` for standard output)\n\ngithub options:\n  --gh-repo GH_REPO     (HEALTHCHECKER_GITHUB_REPO) repository in the form of\n                        <user|org>/<repo> (case insensitive), i.e.:\n                        HacKanCuBa/b2rsum\n  --gh-filename GH_FILENAME\n                        (HEALTHCHECKER_GITHUB_FILENAME) filename to modify\n                        (include path if it is in a subdir such as\n                        path/to/file.ext)\n  --gh-branch GH_BRANCH\n                        (HEALTHCHECKER_GITHUB_BRANCH) branch where commits are\n                        done (defaults to master)\n  --gh-token GH_TOKEN   (HEALTHCHECKER_GITHUB_API_TOKEN) API token or\n                        client_id,client_secret (bypasses the one supplied\n                        through the environment)\n  --gh-email GH_EMAIL   (HEALTHCHECKER_GITHUB_COMMITTER_EMAIL) git committer\n                        email (the committer name is hardcoded to\n                        HealthChecker)\n\nnotify options:\n  --notify-url NOTIFY_URL\n                        (HEALTHCHECKER_NOTIFY_URL) URL to POST the status\n                        notification\n  --notify-payload NOTIFY_PAYLOAD\n                        (HEALTHCHECKER_NOTIFY_PAYLOAD) payload to send to the\n                        notify URL: it is prepended to the comma-separated\n                        list of URLs that failed validation, unless that it\n                        contains the string HEALTHCHECKER_FAILED_URLS (case\n                        sensitive), where it will replace that string by the\n                        comma-separated list of URLs, and send the entire\n                        payload\n  --notify-header NOTIFY_HEADER\n                        (HEALTHCHECKER_NOTIFY_HEADERS (comma-separated))\n                        header to send to the notify URL, which must be\n                        specified as name and value separated by a semicolon:\n                        <header name>:<header value> (this parameter can be\n                        repeated as needed)\n  --notify-json         (HEALTHCHECKER_NOTIFY_JSON (true/false)) send the\n                        payload JSON encoded (it also adds the proper Content-\n                        Type header)\n```\n\n### Environment variables\n\n* `HEALTHCHECKER_GITHUB_REPO`: repository in the form of <user|org>/<repo> (case insensitive), i.e.: HacKanCuBa/b2rsum.\n* `HEALTHCHECKER_GITHUB_FILENAME`: filename to modify (include path if it is in a subdir such as path/to/file.ext).\n* `HEALTHCHECKER_GITHUB_BRANCH`: branch where commits are done (defaults to master).\n* `HEALTHCHECKER_GITHUB_API_TOKEN`: API token or client_id,client_secret (bypasses the one supplied through the environment).\n* `HEALTHCHECKER_GITHUB_COMMITTER_EMAIL`: git committer email (the committer name is hardcoded to HealthChecker).\n* `HEALTHCHECKER_URLS`: URLs to check, comma-separated.\n* `HEALTHCHECKER_LOG_LEVEL`: minimal logging level, defaults to info (can be: debug, info, warning, error, critical).\n* `HEALTHCHECKER_REQUESTS_TIMEOUT`: amount of time in decimal seconds to wait for services to respond and defaults to 10 seconds (setting a very low value might cause several false positives).\n* `HEALTHCHECKER_NOTIFY_URL`: URL to send failed checks via POST as notification, comma-separated.\n* `HEALTHCHECKER_URLS_VALIDATION`: comma-separated list of validations to run on given URLs.\n* `HEALTHCHECKER_NOTIFY_PAYLOAD`: payload to send to the notify URL: it is prepended to the comma-separated list of URLs that failed validation, unless that it contains the string `HEALTHCHECKER_FAILED_URLS` (case sensitive), where it will replace that string by the comma-separated list of URLs, and send the entire payload.\n  * Example 1: `HEALTHCHECKER_NOTIFY_PAYLOAD=here comes the failed urls...`\n  * Example 2: `HEALTHCHECKER_NOTIFY_PAYLOAD={\"data\": \"HEALTHCHECKER_FAILED_URLS\"}`\n* `HEALTHCHECKER_NOTIFY_HEADERS`: headers to send to the notify URL, which must be specified as name and value separated by a semicolon: `header name`:`header value`, and successive headers separated by comma.\n  * Example 1: `HEALTHCHECKER_NOTIFY_HEADERS=X-Auth:4c18a291d7d8e7946cb9db9cbb3e1f49`\n  * Example 2: `HEALTHCHECKER_NOTIFY_HEADERS=Content-Type:application/json,X-MyVal:1`\n* `HEALTHCHECKER_NOTIFY_JSON`: (true/false) send the payload JSON encoded (it also adds the proper Content-Type header).\n* `HEALTHCHECKER_OUTPUT`: store result in a file (use `-` for standard output).\n\n### Responses\n\nHealthChecker reports two values for each service checked: \n\n* *alive*: means that the service has responded (no timeout and status code lower than 500).\n* *ok*: means that the service has responded and has a status code of 2xx; additionally, if checks are given for the service this means that checks passed.\n\nThe app will follow any 3xx response accordingly.\n\n### Examples\n\nSimply print checks result:\n\n```\n:~$ healthchecker https://rlab.be adm.rlab.be\nINFO 2019-04-09 01:06:37 Begin checking URL https://rlab.be...\nINFO 2019-04-09 01:06:37 Begin checking URL http://adm.rlab.be...\nINFO 2019-04-09 01:06:37 Finish checking URL https://rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Finish checking URL http://adm.rlab.be: alive and OK\n```\n\nOr show output through `stdout`, hiding logs:\n\n```\n:~$ HEALTHCHECKER_LOG_LEVEL=critical healthchecker -o - https://rlab.be adm.rlab.be 2> /dev/null\n[\n  {\n    \"uid\": \"416ff55a\",\n    \"url\": \"https://rlab.be\",\n    \"alive\": true,\n    \"ok\": true\n  },\n  {\n    \"uid\": \"5d961608\",\n    \"url\": \"http://adm.rlab.be\",\n    \"alive\": true,\n    \"ok\": true\n  }\n]\n```\n\nThat output can be parsed by `jq` or any other JSON tool! Additionally, it can be saved to a file for later reference:\n\n```\n:~$ healthchecker -o checks.json https://rlab.be adm.rlab.be\nINFO 2019-04-09 01:06:37 Begin checking URL https://rlab.be...\nINFO 2019-04-09 01:06:37 Begin checking URL http://adm.rlab.be...\nINFO 2019-04-09 01:06:37 Finish checking URL https://rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Finish checking URL http://adm.rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Result stored as \"/home/hackan/Workspace/healthchecker/checks.json\"\n\n:~$ cat checks.json\n[\n  {\n    \"uid\": \"416ff55a\",\n    \"url\": \"https://rlab.be\",\n    \"alive\": true,\n    \"ok\": true\n  },\n  {\n    \"uid\": \"5d961608\",\n    \"url\": \"http://adm.rlab.be\",\n    \"alive\": true,\n    \"ok\": true\n  }\n]\n```\n\nNotify failed services to an endpoint: `healthchecker --notify-url https://eoc.rlab.be/api/v1/status/ https://rlab.be http://wiki.rlab.be`\n\nWrite to a file in Github and be very verbose:\n\n```\n:~$ HEALTHCHECKER_LOG_LEVEL=debug healthchecker --gh-repo rlyehlab/sysadmins --gh-filename data/healthcheck.json --gh-token ab410...2cc https://git.rlab.be\nINFO 2019-04-09 01:07:32 Begin checking URL https://git.rlab.be...\nERROR 2019-04-09 01:07:32 Error GETing data from/to https://git.rlab.be: ConnectionError(MaxRetryError(\"HTTPConnectionPool(host='git.rlab.be', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x6ac59ffbd001>: Failed to establish a new connection: [Errno -2] Name or service not known'))\"))\nDEBUG 2019-04-09 01:07:32 Request to https://git.rlab.be took 0.18 seconds\nINFO 2019-04-09 01:07:32 Finish checking URL http://git.rlab.be: dead\nINFO 2019-04-09 01:07:33 Getting repository information...\nINFO 2019-04-09 01:07:38 File data/healthcheck.json updated: 0335a8088f5aff42f078a9396916c8adbcc1a6c3\n```\n\nParameters can be passed through env vars and/or through command-line indistinctly (command-line parameters will always supersede env vars):\n\n```\n:~$ HEALTHCHECKER_URLS_VALIDATION=\"Services | Administration,Adventurous writings by R'lyeh Sysadmins\" healthchecker --notify-url 127.0.0.1:8000 https://adm.rlab.be https://blog.adm.rlab.be\nINFO 2019-04-09 00:59:44 Begin checking URL https://adm.rlab.be...\nINFO 2019-04-09 00:59:44 Begin checking URL https://blog.adm.rlab.be...\nINFO 2019-04-09 00:59:44 Finish checking URL https://blog.adm.rlab.be: alive and OK\nINFO 2019-04-09 00:59:44 Finish checking URL https://adm.rlab.be: alive and OK\n```\n\nAll checks were OK, but should one fail...:\n\n```\nHEALTHCHECKER_LOG_LEVEL=debug HEALTHCHECKER_URLS_VALIDATION=\"Services | Administration,Adventurous writings by R'lyeh Sysadmins\" python -m healthchecker --validation \"non-existent string\" --notify-url 127.0.0.1:8000 https://adm.rlab.be https://blog.adm.rlab.be\nINFO 2019-04-09 01:03:39 Begin checking URL https://adm.rlab.be...\nINFO 2019-04-09 01:03:39 Begin checking URL https://blog.adm.rlab.be...\nDEBUG 2019-04-09 01:03:40 Request to https://blog.adm.rlab.be took 0.18 seconds\nINFO 2019-04-09 01:03:40 Finish checking URL https://blog.adm.rlab.be: alive but not OK\nDEBUG 2019-04-09 01:03:40 Request to https://adm.rlab.be took 0.30 seconds\nINFO 2019-04-09 01:03:40 Finish checking URL https://adm.rlab.be: alive but not OK\nDEBUG 2019-04-09 01:03:40 Notifying http://127.0.0.1:8000 with headers: {} and payload: https://adm.rlab.be,https://blog.adm.rlab.be\nERROR 2019-04-09 01:03:40 Error POSTing data from/to http://127.0.0.1:8000: ConnectionError(MaxRetryError(\"HTTPConnectionPool(host='127.0.0.1', port=8000): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f49d9767f28>: Failed to establish a new connection: [Errno 111] Connection refused'))\"))\nDEBUG 2019-04-09 01:03:40 Request to http://127.0.0.1:8000 took 0.00 seconds\nERROR 2019-04-09 01:03:40 Could not notify http://127.0.0.1:8000\n```\n\nNote that nobody was listening at `127.0.0.1:8000` so the notification failed as well.\n\n## Run\n\nCan be run as a python module `python -m healthchecker ...` or directly as a CLI tool `healthchecker ...`. Read below on how to run the *docker* image.\n\n### PyPi\n\nHealthChecker is in PyPi and can be installed with any standard tool such as *pip* (`pip install healthchecker`) or *poetry* (`poetry add healthchecker`). To add it as a dependency in your project it's recommended to use the [hash parameter for pip](https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode). Hashes (and more) are listed in every [release](https://git.rlab.be/sysadmins/healthchecker/releases).\n\n### Repo\n\nClone [the repo](https://git.rlab.be/sysadmins/healthchecker) and install requirements:\n\n* installing requirements with *poetry* (recommended): `poetry install`. Then start virtualenv with `poetry shell`.\n\n### Docker\n\n#### Build\n\nBuild locally with `docker build --compress --pull --rm --tag registry.rlab.be/sysadmins/healthchecker:latest .` or `invoke build`\n\n#### Pull\n\nYou can pull from our registry with `docker pull registry.rlab.be/sysadmins/healthchecker:latest`\n\n#### Run\n\nRun with `docker run --rm registry.rlab.be/sysadmins/healthchecker:latest ...`\n\nAlternatively, use env vars by creating an env file and passing it to docker:\n\n```\ncp sample.env .env\nvim .env  # edit and populate vars\ndocker run --rm --env-file .env registry.rlab.be/sysadmins/healthchecker:latest\n```\n\n## Deploy\n\nThis can be deployed in a server creating a SystemD service and timer (the image will be pulled by Docker on first run):\n\n1. Service\n\nCreate an env file where ever you want, as in `/srv/healthchecker/.env` (protect access to it with linux permissions). It can be anywhere with any name, just point it in the parameter `--env-file` in the service file. Then create the service file `/etc/systemd/system/healthchecker.service`:\n\n```\n[Unit]\nDescription=HealthChecker Service\nRequires=docker.service\nAfter=network.target docker.service\n\n[Service]\nType=simple\nExecStart=/usr/bin/docker run --rm --env-file /srv/healthchecker/.env registry.rlab.be/sysadmins/healthchecker:latest\nUser=root\nGroup=docker\n```\n\nAlternatively, you can skip env file usage and write every parameter in the `ExecStart` line, but writing the API token there means it will be visible in the process list which is usually not a good idea.\n\n2. Timer:\n\nCreate the timer file `/etc/systemd/system/healthchecker.timer` (use the same name as the service but with the `.timer` extension):\n\n```\n[Unit]\nDescription=HealthChecker Service Timer\n\n[Timer]\nOnBootSec=600\nOnUnitActiveSec=5m\n\n[Install]\nWantedBy=multi-user.target\n```\n\nThis sample is set to run the service 5 minutes after boot and then every 5 minutes. Read the [documentation](https://wiki.archlinux.org/index.php/Systemd/Timers) if you need to set different parameters.\n\n3. Reload SystemD services: `systemctl daemon-reload`\n4. Enable the timer: `systemctl enable healthchecker.timer`\n5. Start it: `systemctl start healthchecker.timer`\n\nTip: you can see the execution log with `journalctl -u healthchecker` (or the service name used). Check journalctl help for additional filtering options.\n\n*Thanks @snkisuke for your help with this section*.\n\n## Developing and PRing\n\nFor more information and use cases, refer to [DEVELOPERS.md](DEVELOPERS.md).\n\n## Collaborators\n\nMany thanks to those that collaborate with this project (in alphabetical order): @erus, @seykron, @snkisuke.\n\n## License\n\n**HealthChecker** is made by [HacKan](https://hackan.net) under GNU GPL v3.0+. You are free to use, share, modify and share modifications under the terms of that [license](LICENSE).\n\n    Copyright (C) 2019 HacKan (https://hackan.net)\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.rlab.be/sysadmins/healthchecker", "keywords": "", "license": "GPL-3.0+", "maintainer": "", "maintainer_email": "", "name": "healthchecker", "package_url": "https://pypi.org/project/healthchecker/", "platform": "", "project_url": "https://pypi.org/project/healthchecker/", "project_urls": {"Homepage": "https://git.rlab.be/sysadmins/healthchecker", "Repository": "https://git.rlab.be/sysadmins/healthchecker"}, "release_url": "https://pypi.org/project/healthchecker/1.1.0/", "requires_dist": ["PyGithub (>=1.44.1,<2.0.0)", "requests (>=2.22.0,<3.0.0)"], "requires_python": ">=3.7,<4.0", "summary": "Check sites health and publish results in a file in Github, filesystem or an API", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>HealthChecker</h1>\n<p>A very simple python script to check the <em>health</em> of a service: make a GET request to it and if it answers it on time, then it's alive.<br>\nAdditionally, it can write the result of the operation in a git repo hosted on Github or in a local file. Or notify dead services through a POST to some JSON API.</p>\n<p>Actions are logged using Python's standard logger and displayed according to the log level set.</p>\n<p>This app was thought mainly for our <a href=\"https://github.com/rlyehlab/status\" rel=\"nofollow\">status page</a>. It's currently being maintained in our <a href=\"https://git.rlab.be/sysadmins/healthchecker\" rel=\"nofollow\">repository</a>.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.7+</li>\n<li>PyGithub 1.43+</li>\n<li>requests 2.21+</li>\n</ul>\n<h2>Usage</h2>\n<pre><code>usage: healthchecker [-h] [--gh-repo GH_REPO] [--gh-filename GH_FILENAME]\n                     [--gh-branch GH_BRANCH] [--gh-token GH_TOKEN]\n                     [--gh-email GH_EMAIL] [--notify-url NOTIFY_URL]\n                     [--notify-payload NOTIFY_PAYLOAD]\n                     [--notify-header NOTIFY_HEADER] [--notify-json]\n                     [--version] [--validation VALIDATION] [--output OUTPUT]\n                     [url [url ...]]\n\nHealthChecker v1.1.0 by HacKan (https://hackan.net) FOSS under GNU GPL v3.0 or\nnewer. Checks URLs through HTTP GET requests to verify their availability.\nOptionally writes the status result to a file in Github. Using Github requires\nthe repository name, the filename and an API token. Besides the ones listed\nbelow, the following env vars exist: HEALTHCHECKER_LOG_LEVEL sets the minimal\nlogging level and defaults to info (can be: debug, info, warning, error,\ncritical); HEALTHCHECKER_REQUESTS_TIMEOUT sets the amount of time in seconds\nto wait for services to respond and defaults to 10 seconds (setting a very low\nvalue might cause several false positives). Note: command-line parameters will\nalways supersede env vars.\n\npositional arguments:\n  url                   (HEALTHCHECKER_URLS (comma-separated)) URL to check\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show version and exit\n  --validation VALIDATION\n                        (HEALTHCHECKER_URLS_VALIDATION (comma-separated))\n                        string to find in the body of a request to an URL as a\n                        validation, one per URL (or the last one is used for\n                        the remaining URLs) (this parameter can be repeated as\n                        needed)\n  --output OUTPUT, -o OUTPUT\n                        (HEALTHCHECKER_OUTPUT) store result in a file,\n                        overwriting if exists (use `-` for standard output)\n\ngithub options:\n  --gh-repo GH_REPO     (HEALTHCHECKER_GITHUB_REPO) repository in the form of\n                        &lt;user|org&gt;/&lt;repo&gt; (case insensitive), i.e.:\n                        HacKanCuBa/b2rsum\n  --gh-filename GH_FILENAME\n                        (HEALTHCHECKER_GITHUB_FILENAME) filename to modify\n                        (include path if it is in a subdir such as\n                        path/to/file.ext)\n  --gh-branch GH_BRANCH\n                        (HEALTHCHECKER_GITHUB_BRANCH) branch where commits are\n                        done (defaults to master)\n  --gh-token GH_TOKEN   (HEALTHCHECKER_GITHUB_API_TOKEN) API token or\n                        client_id,client_secret (bypasses the one supplied\n                        through the environment)\n  --gh-email GH_EMAIL   (HEALTHCHECKER_GITHUB_COMMITTER_EMAIL) git committer\n                        email (the committer name is hardcoded to\n                        HealthChecker)\n\nnotify options:\n  --notify-url NOTIFY_URL\n                        (HEALTHCHECKER_NOTIFY_URL) URL to POST the status\n                        notification\n  --notify-payload NOTIFY_PAYLOAD\n                        (HEALTHCHECKER_NOTIFY_PAYLOAD) payload to send to the\n                        notify URL: it is prepended to the comma-separated\n                        list of URLs that failed validation, unless that it\n                        contains the string HEALTHCHECKER_FAILED_URLS (case\n                        sensitive), where it will replace that string by the\n                        comma-separated list of URLs, and send the entire\n                        payload\n  --notify-header NOTIFY_HEADER\n                        (HEALTHCHECKER_NOTIFY_HEADERS (comma-separated))\n                        header to send to the notify URL, which must be\n                        specified as name and value separated by a semicolon:\n                        &lt;header name&gt;:&lt;header value&gt; (this parameter can be\n                        repeated as needed)\n  --notify-json         (HEALTHCHECKER_NOTIFY_JSON (true/false)) send the\n                        payload JSON encoded (it also adds the proper Content-\n                        Type header)\n</code></pre>\n<h3>Environment variables</h3>\n<ul>\n<li><code>HEALTHCHECKER_GITHUB_REPO</code>: repository in the form of &lt;user|org&gt;/&lt;repo&gt; (case insensitive), i.e.: HacKanCuBa/b2rsum.</li>\n<li><code>HEALTHCHECKER_GITHUB_FILENAME</code>: filename to modify (include path if it is in a subdir such as path/to/file.ext).</li>\n<li><code>HEALTHCHECKER_GITHUB_BRANCH</code>: branch where commits are done (defaults to master).</li>\n<li><code>HEALTHCHECKER_GITHUB_API_TOKEN</code>: API token or client_id,client_secret (bypasses the one supplied through the environment).</li>\n<li><code>HEALTHCHECKER_GITHUB_COMMITTER_EMAIL</code>: git committer email (the committer name is hardcoded to HealthChecker).</li>\n<li><code>HEALTHCHECKER_URLS</code>: URLs to check, comma-separated.</li>\n<li><code>HEALTHCHECKER_LOG_LEVEL</code>: minimal logging level, defaults to info (can be: debug, info, warning, error, critical).</li>\n<li><code>HEALTHCHECKER_REQUESTS_TIMEOUT</code>: amount of time in decimal seconds to wait for services to respond and defaults to 10 seconds (setting a very low value might cause several false positives).</li>\n<li><code>HEALTHCHECKER_NOTIFY_URL</code>: URL to send failed checks via POST as notification, comma-separated.</li>\n<li><code>HEALTHCHECKER_URLS_VALIDATION</code>: comma-separated list of validations to run on given URLs.</li>\n<li><code>HEALTHCHECKER_NOTIFY_PAYLOAD</code>: payload to send to the notify URL: it is prepended to the comma-separated list of URLs that failed validation, unless that it contains the string <code>HEALTHCHECKER_FAILED_URLS</code> (case sensitive), where it will replace that string by the comma-separated list of URLs, and send the entire payload.\n<ul>\n<li>Example 1: <code>HEALTHCHECKER_NOTIFY_PAYLOAD=here comes the failed urls...</code></li>\n<li>Example 2: <code>HEALTHCHECKER_NOTIFY_PAYLOAD={\"data\": \"HEALTHCHECKER_FAILED_URLS\"}</code></li>\n</ul>\n</li>\n<li><code>HEALTHCHECKER_NOTIFY_HEADERS</code>: headers to send to the notify URL, which must be specified as name and value separated by a semicolon: <code>header name</code>:<code>header value</code>, and successive headers separated by comma.\n<ul>\n<li>Example 1: <code>HEALTHCHECKER_NOTIFY_HEADERS=X-Auth:4c18a291d7d8e7946cb9db9cbb3e1f49</code></li>\n<li>Example 2: <code>HEALTHCHECKER_NOTIFY_HEADERS=Content-Type:application/json,X-MyVal:1</code></li>\n</ul>\n</li>\n<li><code>HEALTHCHECKER_NOTIFY_JSON</code>: (true/false) send the payload JSON encoded (it also adds the proper Content-Type header).</li>\n<li><code>HEALTHCHECKER_OUTPUT</code>: store result in a file (use <code>-</code> for standard output).</li>\n</ul>\n<h3>Responses</h3>\n<p>HealthChecker reports two values for each service checked:</p>\n<ul>\n<li><em>alive</em>: means that the service has responded (no timeout and status code lower than 500).</li>\n<li><em>ok</em>: means that the service has responded and has a status code of 2xx; additionally, if checks are given for the service this means that checks passed.</li>\n</ul>\n<p>The app will follow any 3xx response accordingly.</p>\n<h3>Examples</h3>\n<p>Simply print checks result:</p>\n<pre><code>:~$ healthchecker https://rlab.be adm.rlab.be\nINFO 2019-04-09 01:06:37 Begin checking URL https://rlab.be...\nINFO 2019-04-09 01:06:37 Begin checking URL http://adm.rlab.be...\nINFO 2019-04-09 01:06:37 Finish checking URL https://rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Finish checking URL http://adm.rlab.be: alive and OK\n</code></pre>\n<p>Or show output through <code>stdout</code>, hiding logs:</p>\n<pre><code>:~$ HEALTHCHECKER_LOG_LEVEL=critical healthchecker -o - https://rlab.be adm.rlab.be 2&gt; /dev/null\n[\n  {\n    \"uid\": \"416ff55a\",\n    \"url\": \"https://rlab.be\",\n    \"alive\": true,\n    \"ok\": true\n  },\n  {\n    \"uid\": \"5d961608\",\n    \"url\": \"http://adm.rlab.be\",\n    \"alive\": true,\n    \"ok\": true\n  }\n]\n</code></pre>\n<p>That output can be parsed by <code>jq</code> or any other JSON tool! Additionally, it can be saved to a file for later reference:</p>\n<pre><code>:~$ healthchecker -o checks.json https://rlab.be adm.rlab.be\nINFO 2019-04-09 01:06:37 Begin checking URL https://rlab.be...\nINFO 2019-04-09 01:06:37 Begin checking URL http://adm.rlab.be...\nINFO 2019-04-09 01:06:37 Finish checking URL https://rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Finish checking URL http://adm.rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Result stored as \"/home/hackan/Workspace/healthchecker/checks.json\"\n\n:~$ cat checks.json\n[\n  {\n    \"uid\": \"416ff55a\",\n    \"url\": \"https://rlab.be\",\n    \"alive\": true,\n    \"ok\": true\n  },\n  {\n    \"uid\": \"5d961608\",\n    \"url\": \"http://adm.rlab.be\",\n    \"alive\": true,\n    \"ok\": true\n  }\n]\n</code></pre>\n<p>Notify failed services to an endpoint: <code>healthchecker --notify-url https://eoc.rlab.be/api/v1/status/ https://rlab.be http://wiki.rlab.be</code></p>\n<p>Write to a file in Github and be very verbose:</p>\n<pre><code>:~$ HEALTHCHECKER_LOG_LEVEL=debug healthchecker --gh-repo rlyehlab/sysadmins --gh-filename data/healthcheck.json --gh-token ab410...2cc https://git.rlab.be\nINFO 2019-04-09 01:07:32 Begin checking URL https://git.rlab.be...\nERROR 2019-04-09 01:07:32 Error GETing data from/to https://git.rlab.be: ConnectionError(MaxRetryError(\"HTTPConnectionPool(host='git.rlab.be', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x6ac59ffbd001&gt;: Failed to establish a new connection: [Errno -2] Name or service not known'))\"))\nDEBUG 2019-04-09 01:07:32 Request to https://git.rlab.be took 0.18 seconds\nINFO 2019-04-09 01:07:32 Finish checking URL http://git.rlab.be: dead\nINFO 2019-04-09 01:07:33 Getting repository information...\nINFO 2019-04-09 01:07:38 File data/healthcheck.json updated: 0335a8088f5aff42f078a9396916c8adbcc1a6c3\n</code></pre>\n<p>Parameters can be passed through env vars and/or through command-line indistinctly (command-line parameters will always supersede env vars):</p>\n<pre><code>:~$ HEALTHCHECKER_URLS_VALIDATION=\"Services | Administration,Adventurous writings by R'lyeh Sysadmins\" healthchecker --notify-url 127.0.0.1:8000 https://adm.rlab.be https://blog.adm.rlab.be\nINFO 2019-04-09 00:59:44 Begin checking URL https://adm.rlab.be...\nINFO 2019-04-09 00:59:44 Begin checking URL https://blog.adm.rlab.be...\nINFO 2019-04-09 00:59:44 Finish checking URL https://blog.adm.rlab.be: alive and OK\nINFO 2019-04-09 00:59:44 Finish checking URL https://adm.rlab.be: alive and OK\n</code></pre>\n<p>All checks were OK, but should one fail...:</p>\n<pre><code>HEALTHCHECKER_LOG_LEVEL=debug HEALTHCHECKER_URLS_VALIDATION=\"Services | Administration,Adventurous writings by R'lyeh Sysadmins\" python -m healthchecker --validation \"non-existent string\" --notify-url 127.0.0.1:8000 https://adm.rlab.be https://blog.adm.rlab.be\nINFO 2019-04-09 01:03:39 Begin checking URL https://adm.rlab.be...\nINFO 2019-04-09 01:03:39 Begin checking URL https://blog.adm.rlab.be...\nDEBUG 2019-04-09 01:03:40 Request to https://blog.adm.rlab.be took 0.18 seconds\nINFO 2019-04-09 01:03:40 Finish checking URL https://blog.adm.rlab.be: alive but not OK\nDEBUG 2019-04-09 01:03:40 Request to https://adm.rlab.be took 0.30 seconds\nINFO 2019-04-09 01:03:40 Finish checking URL https://adm.rlab.be: alive but not OK\nDEBUG 2019-04-09 01:03:40 Notifying http://127.0.0.1:8000 with headers: {} and payload: https://adm.rlab.be,https://blog.adm.rlab.be\nERROR 2019-04-09 01:03:40 Error POSTing data from/to http://127.0.0.1:8000: ConnectionError(MaxRetryError(\"HTTPConnectionPool(host='127.0.0.1', port=8000): Max retries exceeded with url: / (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7f49d9767f28&gt;: Failed to establish a new connection: [Errno 111] Connection refused'))\"))\nDEBUG 2019-04-09 01:03:40 Request to http://127.0.0.1:8000 took 0.00 seconds\nERROR 2019-04-09 01:03:40 Could not notify http://127.0.0.1:8000\n</code></pre>\n<p>Note that nobody was listening at <code>127.0.0.1:8000</code> so the notification failed as well.</p>\n<h2>Run</h2>\n<p>Can be run as a python module <code>python -m healthchecker ...</code> or directly as a CLI tool <code>healthchecker ...</code>. Read below on how to run the <em>docker</em> image.</p>\n<h3>PyPi</h3>\n<p>HealthChecker is in PyPi and can be installed with any standard tool such as <em>pip</em> (<code>pip install healthchecker</code>) or <em>poetry</em> (<code>poetry add healthchecker</code>). To add it as a dependency in your project it's recommended to use the <a href=\"https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode\" rel=\"nofollow\">hash parameter for pip</a>. Hashes (and more) are listed in every <a href=\"https://git.rlab.be/sysadmins/healthchecker/releases\" rel=\"nofollow\">release</a>.</p>\n<h3>Repo</h3>\n<p>Clone <a href=\"https://git.rlab.be/sysadmins/healthchecker\" rel=\"nofollow\">the repo</a> and install requirements:</p>\n<ul>\n<li>installing requirements with <em>poetry</em> (recommended): <code>poetry install</code>. Then start virtualenv with <code>poetry shell</code>.</li>\n</ul>\n<h3>Docker</h3>\n<h4>Build</h4>\n<p>Build locally with <code>docker build --compress --pull --rm --tag registry.rlab.be/sysadmins/healthchecker:latest .</code> or <code>invoke build</code></p>\n<h4>Pull</h4>\n<p>You can pull from our registry with <code>docker pull registry.rlab.be/sysadmins/healthchecker:latest</code></p>\n<h4>Run</h4>\n<p>Run with <code>docker run --rm registry.rlab.be/sysadmins/healthchecker:latest ...</code></p>\n<p>Alternatively, use env vars by creating an env file and passing it to docker:</p>\n<pre><code>cp sample.env .env\nvim .env  # edit and populate vars\ndocker run --rm --env-file .env registry.rlab.be/sysadmins/healthchecker:latest\n</code></pre>\n<h2>Deploy</h2>\n<p>This can be deployed in a server creating a SystemD service and timer (the image will be pulled by Docker on first run):</p>\n<ol>\n<li>Service</li>\n</ol>\n<p>Create an env file where ever you want, as in <code>/srv/healthchecker/.env</code> (protect access to it with linux permissions). It can be anywhere with any name, just point it in the parameter <code>--env-file</code> in the service file. Then create the service file <code>/etc/systemd/system/healthchecker.service</code>:</p>\n<pre><code>[Unit]\nDescription=HealthChecker Service\nRequires=docker.service\nAfter=network.target docker.service\n\n[Service]\nType=simple\nExecStart=/usr/bin/docker run --rm --env-file /srv/healthchecker/.env registry.rlab.be/sysadmins/healthchecker:latest\nUser=root\nGroup=docker\n</code></pre>\n<p>Alternatively, you can skip env file usage and write every parameter in the <code>ExecStart</code> line, but writing the API token there means it will be visible in the process list which is usually not a good idea.</p>\n<ol>\n<li>Timer:</li>\n</ol>\n<p>Create the timer file <code>/etc/systemd/system/healthchecker.timer</code> (use the same name as the service but with the <code>.timer</code> extension):</p>\n<pre><code>[Unit]\nDescription=HealthChecker Service Timer\n\n[Timer]\nOnBootSec=600\nOnUnitActiveSec=5m\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>This sample is set to run the service 5 minutes after boot and then every 5 minutes. Read the <a href=\"https://wiki.archlinux.org/index.php/Systemd/Timers\" rel=\"nofollow\">documentation</a> if you need to set different parameters.</p>\n<ol>\n<li>Reload SystemD services: <code>systemctl daemon-reload</code></li>\n<li>Enable the timer: <code>systemctl enable healthchecker.timer</code></li>\n<li>Start it: <code>systemctl start healthchecker.timer</code></li>\n</ol>\n<p>Tip: you can see the execution log with <code>journalctl -u healthchecker</code> (or the service name used). Check journalctl help for additional filtering options.</p>\n<p><em>Thanks @snkisuke for your help with this section</em>.</p>\n<h2>Developing and PRing</h2>\n<p>For more information and use cases, refer to <a href=\"DEVELOPERS.md\" rel=\"nofollow\">DEVELOPERS.md</a>.</p>\n<h2>Collaborators</h2>\n<p>Many thanks to those that collaborate with this project (in alphabetical order): @erus, @seykron, @snkisuke.</p>\n<h2>License</h2>\n<p><strong>HealthChecker</strong> is made by <a href=\"https://hackan.net\" rel=\"nofollow\">HacKan</a> under GNU GPL v3.0+. You are free to use, share, modify and share modifications under the terms of that <a href=\"LICENSE\" rel=\"nofollow\">license</a>.</p>\n<pre><code>Copyright (C) 2019 HacKan (https://hackan.net)\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre>\n\n          </div>"}, "last_serial": 6244893, "releases": {"0.6.1": [{"comment_text": "", "digests": {"md5": "98567a5da4c94e6afdd579bde085acee", "sha256": "b08b3fc3a424b426ab7356d19780c061652f2376906f539fe344d7b20a9e2dea"}, "downloads": -1, "filename": "healthchecker-0.6.1-py3.7.egg", "has_sig": false, "md5_digest": "98567a5da4c94e6afdd579bde085acee", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.7", "size": 16119, "upload_time": "2019-04-09T04:25:01", "upload_time_iso_8601": "2019-04-09T04:25:01.833177Z", "url": "https://files.pythonhosted.org/packages/c4/eb/9730ab15788f57217b3746194106056840210c7597df36d8edcd853a30f5/healthchecker-0.6.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ebd0c187e7abbc38e0bb08a67d516b4", "sha256": "66d07fdeb221cf0ce44a0f6f2135dfa9c2a860ab70ea015a03ad40e1bc6e1695"}, "downloads": -1, "filename": "healthchecker-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebd0c187e7abbc38e0bb08a67d516b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 28936, "upload_time": "2019-04-09T04:24:59", "upload_time_iso_8601": "2019-04-09T04:24:59.289216Z", "url": "https://files.pythonhosted.org/packages/a3/21/7167bf1d24128662daa44475c6b969802010b88a5b5a52e9b5cdf18f08e2/healthchecker-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90f52217dcdc4fbf9f5455ab6b653029", "sha256": "b75318c6fda5a9f45596f479bd9420a5f85ea2b1640f81d692b47b9df56ac90f"}, "downloads": -1, "filename": "healthchecker-0.6.1.tar.gz", "has_sig": false, "md5_digest": "90f52217dcdc4fbf9f5455ab6b653029", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16398, "upload_time": "2019-04-09T04:25:03", "upload_time_iso_8601": "2019-04-09T04:25:03.557765Z", "url": "https://files.pythonhosted.org/packages/06/6a/4898225f5dac24d9c88720e8ec2e691fade3822a256cbfb96238d3e4abc3/healthchecker-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "84f8067c7cec87eed0bcd253f9da7fc6", "sha256": "3c3ab5dc313eac0d91656c9f089ac5650994b41537c8fa975fa59aede8aaf30b"}, "downloads": -1, "filename": "healthchecker-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "84f8067c7cec87eed0bcd253f9da7fc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 28952, "upload_time": "2019-04-10T01:34:13", "upload_time_iso_8601": "2019-04-10T01:34:13.151824Z", "url": "https://files.pythonhosted.org/packages/3f/6a/adc5ffd635e35243a3480064449649c4f5c6c33fbb2db8ed1dce6d9a66e3/healthchecker-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5616ad481aa611315b0a61fe7119ddd", "sha256": "e716b28d492770badf4da9cc57de2b1480c40c5dfc00ed27646b1631b92b205d"}, "downloads": -1, "filename": "healthchecker-0.7.0.tar.gz", "has_sig": false, "md5_digest": "b5616ad481aa611315b0a61fe7119ddd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16413, "upload_time": "2019-04-10T01:34:14", "upload_time_iso_8601": "2019-04-10T01:34:14.898858Z", "url": "https://files.pythonhosted.org/packages/e6/96/ea3da76290c626330edcbdf326df64beb1a1b5c21df8e3e07b52ad399d7f/healthchecker-0.7.0.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "a5b9f025c80e6ee342153afea66e7537", "sha256": "d72898b3006a7447541701726c0eb3fe2bee7f3f1af56a42420f2259b71e7013"}, "downloads": -1, "filename": "healthchecker-0.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a5b9f025c80e6ee342153afea66e7537", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 30698, "upload_time": "2019-04-18T03:00:22", "upload_time_iso_8601": "2019-04-18T03:00:22.439700Z", "url": "https://files.pythonhosted.org/packages/94/15/94f409cb9f29f1ff6a6ba54cda80a1b9c65ab14e39a27d392252b2eab479/healthchecker-0.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b83e0d19bcd2e8807b42fb0c75a9888", "sha256": "1a5e3e2cbcf79679eaabdf0099101cf3e2a9af5b05c7970e527d834660bb38fe"}, "downloads": -1, "filename": "healthchecker-0.8.2.tar.gz", "has_sig": false, "md5_digest": "0b83e0d19bcd2e8807b42fb0c75a9888", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17591, "upload_time": "2019-04-18T03:00:24", "upload_time_iso_8601": "2019-04-18T03:00:24.369195Z", "url": "https://files.pythonhosted.org/packages/6f/78/5d8a8a77106d499ccbc7a88581c85a1d783438dda3aed2becce602a2538a/healthchecker-0.8.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e1861341922f35b94d2c0471cf4b2cc1", "sha256": "858b47b014ca2efebf31668551202bbf35e73c303c36c42d646b5b415fff9c78"}, "downloads": -1, "filename": "healthchecker-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e1861341922f35b94d2c0471cf4b2cc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 31234, "upload_time": "2019-06-22T01:25:57", "upload_time_iso_8601": "2019-06-22T01:25:57.149622Z", "url": "https://files.pythonhosted.org/packages/5f/98/20a1f485a27bf82781a51ee5d5a71f8e0c02329b0f608a09f6762a255559/healthchecker-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e31a0e3327b85c903fb5c3f757d4c1a8", "sha256": "e4a3b102de2f805e5a89bd7f881d0d9c6e53582b7e5b1d0ac098afbc69511503"}, "downloads": -1, "filename": "healthchecker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e31a0e3327b85c903fb5c3f757d4c1a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17722, "upload_time": "2019-06-22T01:25:59", "upload_time_iso_8601": "2019-06-22T01:25:59.055357Z", "url": "https://files.pythonhosted.org/packages/5c/3b/ea058816b9b98dfba4ecdee9f0ae4b890dda48598b2de66d00ec899b7b13/healthchecker-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7942bb9e2cf910732166dda1b25bf6b1", "sha256": "245f0e1c300250f2f340c6cb1cee3239eef9d48462d1d681cf71507ff6f77b4f"}, "downloads": -1, "filename": "healthchecker-1.0.1-py3-none-any.whl", "has_sig": true, "md5_digest": "7942bb9e2cf910732166dda1b25bf6b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 31507, "upload_time": "2019-06-22T22:33:13", "upload_time_iso_8601": "2019-06-22T22:33:13.827758Z", "url": "https://files.pythonhosted.org/packages/15/04/f78855c63b845bfc8c622c462aee5359f93d3595996dbe1090aff862e2b9/healthchecker-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ea6d9254cfac36c30cd7e19294c29b4", "sha256": "d56fec1a26957350103a55288d585e0eca1bfc70357ed02622daf059dad33684"}, "downloads": -1, "filename": "healthchecker-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7ea6d9254cfac36c30cd7e19294c29b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18388, "upload_time": "2019-06-22T22:33:15", "upload_time_iso_8601": "2019-06-22T22:33:15.832448Z", "url": "https://files.pythonhosted.org/packages/8a/71/8542c69ceb60cc7f5451760567ca6144a176735d2c10c1145e610e78d8b0/healthchecker-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "266ce2c2edde8f875adc7537a6798c7b", "sha256": "79960f30225698936177452182378ace63cc628dca0c3e37f22c2977cc4ce0e8"}, "downloads": -1, "filename": "healthchecker-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "266ce2c2edde8f875adc7537a6798c7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 42237, "upload_time": "2019-12-05T02:18:58", "upload_time_iso_8601": "2019-12-05T02:18:58.431469Z", "url": "https://files.pythonhosted.org/packages/3a/93/f81d36b6c766214d9ce5a21ddb7192334d35179448f97b7be82403898224/healthchecker-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbc8a774302c96c5ed6bcc08460192b5", "sha256": "eed695555e80333190b9a4a01c77fcbf1037d1f1ec9297abf1126bcb4c9cebd8"}, "downloads": -1, "filename": "healthchecker-1.1.0.tar.gz", "has_sig": false, "md5_digest": "fbc8a774302c96c5ed6bcc08460192b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 38054, "upload_time": "2019-12-05T02:19:25", "upload_time_iso_8601": "2019-12-05T02:19:25.546834Z", "url": "https://files.pythonhosted.org/packages/de/9b/8f4cd554e714a859d65bf4d6dfeb1ab26846f2e669c17ef191f045819c7c/healthchecker-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "266ce2c2edde8f875adc7537a6798c7b", "sha256": "79960f30225698936177452182378ace63cc628dca0c3e37f22c2977cc4ce0e8"}, "downloads": -1, "filename": "healthchecker-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "266ce2c2edde8f875adc7537a6798c7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 42237, "upload_time": "2019-12-05T02:18:58", "upload_time_iso_8601": "2019-12-05T02:18:58.431469Z", "url": "https://files.pythonhosted.org/packages/3a/93/f81d36b6c766214d9ce5a21ddb7192334d35179448f97b7be82403898224/healthchecker-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbc8a774302c96c5ed6bcc08460192b5", "sha256": "eed695555e80333190b9a4a01c77fcbf1037d1f1ec9297abf1126bcb4c9cebd8"}, "downloads": -1, "filename": "healthchecker-1.1.0.tar.gz", "has_sig": false, "md5_digest": "fbc8a774302c96c5ed6bcc08460192b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 38054, "upload_time": "2019-12-05T02:19:25", "upload_time_iso_8601": "2019-12-05T02:19:25.546834Z", "url": "https://files.pythonhosted.org/packages/de/9b/8f4cd554e714a859d65bf4d6dfeb1ab26846f2e669c17ef191f045819c7c/healthchecker-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:57 2020"}