{"info": {"author": "Ilter Canberk, Naman Seth", "author_email": "iltercanberk@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "#django-interactive\n\nDjango library for creating view hierarchies and auto-generating corresponding client-side methods in your project.\n\n## Overview\n\nIn its current state, it is immensly difficult to create and maintain the connection between the server-side and the client-side functionality in a Django app. Once the django action calls 'render' with some context, it is clueless about the rest of the process.\n\nDjango-interactive aims to solve this problem by letting the application developer define `subview`s and auto-generating client-side JavaScript stubs that are capable of dynamically rendering these partial views.\n\n## Design Goals\n\nThis library should make simple things easy, and complex things still possible. As with any abstraction, it will involve some biased decisions but the application developer should be able to choose not to use some of these decisions and customize parts.\n\n* The application programmer should not be forced to switch all the django.\n* The JS stubs can play well with application's usual JavaScript.\n\n\n## Use\n\nThere are currently two types of views. These views are just like usual django action methods, but defined with decorators.\n\n* `page_view`\n* `sub_view`\n\nFor each subview, there are three JS methods generated. If the sub_view method is called `render_list`, the library generates:\n\n* `reload_render_list`: Rerenders the up-to-date html dynamically and replaced the view on the page.\n* `html_render_list`: Returns the up-to-date html as a parameter to the callback function. (async function)\n* `json_render_list`: Returns the up-to-date json from the view as a parameter to the callback function(async function)\n\n\n## Examples\n\nWe have provided a sample Todo application implemented using this library in the `example/` directory. \n\nPlease especially look at `todo.js` for implementations.\n\nWe were able to implement lots of AJAX capability with couple lines.\n\n## Installing for Development\n\nCreate a virtual environment and activate it by doing \n\n```\n  virtualenv venv\n  source venv/bin/activate\n```\n\nInstall requirements.txt in `/example` directory or install the package using pip if you are working on a different project.\n\n```\n  pip install git+ssh://git@github.com/CMU-Web-Application-Development/Team71.git\n```\n\n## Installing\n\n\n```\n\tpip install django-interactive\n```\n\n\nIn `settings.py`, add `django-interactive` to your installed apps.\n\n```\nINSTALLED_APPS = (\n    ...\n    'django-interactive',\n    ...\n)\n```\n\n## Building for Distribution\n\nThe distribution information is in `setup.py`. Running \n\n```\n  python setup.py sdist\n```\n\nwill generate the necessary files in `dist` directory.\n\n## Product Backlog\n\n* **Making an empty module that is installable by Django**\n\n   This feature will enable easy installation of the feature into the django framework so  users can use our library from inside the Django applications. Once the user installs library, they can easily import the modules and start using the features of our in the application they are working. Because the installation is easy it decreases the effort required from the users end in setup and precious time and energy can be used to actually developing applications.\n   \n   After creating this, we should also find an easy way to use this module in \"Development mode\" so that we don't need to re-install the package everytime we change something. It would drop the productivity a lot.\n   \n   \t\tExpected time: 2 hours\n\n* **Creating the `@page_view` decorator**\n\n   This decorator identifies the method that is subsequently written as the one that renders an entire page. With this decorator in place, our framework can insert the necessary JavaScript stubs and necessary libraries. This also makes sure that similar stubs or same libraries are only injected in the page once.\n   \n   \t\tExpected time: 2 hours\n\n\n* **Creating the `@sub_view` decorator**\n\n   This decorator should take the name of the template and the context, and return the representation for sub_view so that the page views can render it, or helper methods(eg.json generator) can use it.For each subview, there are three JS methods generated.\n   \n   \t\tExpected time: 3 hours\n\n* **Creating the ability to render subviews inside other templates**\n\n   This will allow developers to render subviews in different templates. It will give developers the flexibility to render swift views in different templates. We will be using \"template_tags\" to enable this feature. We really would like to refrain from forcing user to write `{% load ... %}` on top of every template, but it might not be technically possible.\n   \n   \t\tExpected time: 1 hour\n\n* **Creating a URL and action for `html_...` method**\n\n   `html_..` is supposed to return the up-to-date html string. Since our goal is to prevent user from manually doing this, we will need to dynamically create a url, and action methods that are mapped to these urls.\n   \n\t\tExpected time: 1 hour\n\n* **Creating a URL and action for `json_...` method**\n\n   `json_render_list` is supposed to return JSON representation of the context values. This will be hard because we have no idea about the type of the variables. They might be plain dictionaries or query sets. We need to write a robust checker that recursively goes through the variables and decide how to serialize them. \n   \n   \t\tExpected time: 2 hours\n\n* **Creating a JS Stub generator**\n\n   This is so that the framework auto generates the stubs for the necessary javascript functions as and when required. The stub generator will be in Python and it will generate JavaScript code. We need to come up with a good architecture for generating methods in general and then move on to implementing individual methods.\n\n\t\tExpected time: 2 hours\n\n* **Implementing the stub generator for `html_...` method**\n\n   `html_..` method will send an AJAX request to the Django application and get back the HTML string. It is not supposed to do anything other than passing the string as a callback.\n\t\n\t\tExpected time: 2 hours\n\n* **Implementing the stub generator for `reload_...` method**\n\n   `reload_...` method is similar to `html_...` but instead of only passing the string, it will actually find the parent view of the element and replace the html string inside it.\n   \n   \t\tExpected time: 3 hours\n\n* **Implementing the stub generator `json_...` method**\n\n   `json_...` method is again similar to `html_...` but instead of a string it will get the JSON representation and pass it as a callback.\n    \n    \tExpected time: 1 hour\n\n\n* **Debugging and creating a sample application**\n\n   The sample application will help the users to understand how to use the various features of the framework within Django. The application will exercise all features of the framework to help the users understand the power behind the framework.\n      \n    \tExpected time: 1 hour writing the application (because the whole thing is about speed) + 5 hours of debugging\n\n* **Registering the package with PIP registry**\n\n\tWe would like other developers to use it, so we will register the library to PIP registery. This way people can do `pip install django-interactive` and start using it in their applications.\n\t\n\t\tExpected time: 1.5 hour\n\t\n* **(Optional) Integrating the JS stubs with a BackboneJS framework**\n\n\tBackbone views already have methods called \"render:\" that is supposed to render that view. We can try extending the backbone library to use our `html...` method by default.\n\t \t\t\n\t \tExpected time: 4 hours\n\n\n## Roadmap\n\n### Sprint 1 - 10 November (Product owner: Naman Seth)\n\n* **Making an empty module that is installable by Django** (Ilter)\n\n* **Creating the `@page_view` decorator** (Naman)\n\n* **Creating the `@sub_view` decorator** (Ilter)\n\n* **Creating the ability to render subviews inside other templates**(Naman)\n\n### Sprint 2 - 17 November (Product owner: Ilter Canberk)\n\n* **Creating a URL and action for html_... method (Ilter)\n\n* **Creating a URL and action for json_... method (Ilter)\n\n* **Creating a JS Stub generator (Naman)\n\n* **Implementing the stub generator for html_... method (Naman)\n\n## Contributors\n\n* Ilter Canberk\n* Naman Seth\n\n## License\n\nThe project is released under the [MIT License](http://opensource.org/licenses/mit-license.php).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CMU-Web-Application-Development/Team71", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-interactive", "package_url": "https://pypi.org/project/django-interactive/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-interactive/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/CMU-Web-Application-Development/Team71"}, "release_url": "https://pypi.org/project/django-interactive/1.0.6/", "requires_dist": null, "requires_python": null, "summary": "Building easier client-side connections", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            #django-interactive<br><br>Django library for creating view hierarchies and auto-generating corresponding client-side methods in your project.<br><br>## Overview<br><br>In its current state, it is immensly difficult to create and maintain the connection between the server-side and the client-side functionality in a Django app. Once the django action calls 'render' with some context, it is clueless about the rest of the process.<br><br>Django-interactive aims to solve this problem by letting the application developer define `subview`s and auto-generating client-side JavaScript stubs that are capable of dynamically rendering these partial views.<br><br>## Design Goals<br><br>This library should make simple things easy, and complex things still possible. As with any abstraction, it will involve some biased decisions but the application developer should be able to choose not to use some of these decisions and customize parts.<br><br>* The application programmer should not be forced to switch all the django.<br>* The JS stubs can play well with application's usual JavaScript.<br><br><br>## Use<br><br>There are currently two types of views. These views are just like usual django action methods, but defined with decorators.<br><br>* `page_view`<br>* `sub_view`<br><br>For each subview, there are three JS methods generated. If the sub_view method is called `render_list`, the library generates:<br><br>* `reload_render_list`: Rerenders the up-to-date html dynamically and replaced the view on the page.<br>* `html_render_list`: Returns the up-to-date html as a parameter to the callback function. (async function)<br>* `json_render_list`: Returns the up-to-date json from the view as a parameter to the callback function(async function)<br><br><br>## Examples<br><br>We have provided a sample Todo application implemented using this library in the `example/` directory. <br><br>Please especially look at `todo.js` for implementations.<br><br>We were able to implement lots of AJAX capability with couple lines.<br><br>## Installing for Development<br><br>Create a virtual environment and activate it by doing <br><br>```<br>  virtualenv venv<br>  source venv/bin/activate<br>```<br><br>Install requirements.txt in `/example` directory or install the package using pip if you are working on a different project.<br><br>```<br>  pip install git+ssh://git@github.com/CMU-Web-Application-Development/Team71.git<br>```<br><br>## Installing<br><br><br>```<br>\tpip install django-interactive<br>```<br><br><br>In `settings.py`, add `django-interactive` to your installed apps.<br><br>```<br>INSTALLED_APPS = (<br>    ...<br>    'django-interactive',<br>    ...<br>)<br>```<br><br>## Building for Distribution<br><br>The distribution information is in `setup.py`. Running <br><br>```<br>  python setup.py sdist<br>```<br><br>will generate the necessary files in `dist` directory.<br><br>## Product Backlog<br><br>* **Making an empty module that is installable by Django**<br><br>   This feature will enable easy installation of the feature into the django framework so  users can use our library from inside the Django applications. Once the user installs library, they can easily import the modules and start using the features of our in the application they are working. Because the installation is easy it decreases the effort required from the users end in setup and precious time and energy can be used to actually developing applications.<br>   <br>   After creating this, we should also find an easy way to use this module in \"Development mode\" so that we don't need to re-install the package everytime we change something. It would drop the productivity a lot.<br>   <br>   \t\tExpected time: 2 hours<br><br>* **Creating the `@page_view` decorator**<br><br>   This decorator identifies the method that is subsequently written as the one that renders an entire page. With this decorator in place, our framework can insert the necessary JavaScript stubs and necessary libraries. This also makes sure that similar stubs or same libraries are only injected in the page once.<br>   <br>   \t\tExpected time: 2 hours<br><br><br>* **Creating the `@sub_view` decorator**<br><br>   This decorator should take the name of the template and the context, and return the representation for sub_view so that the page views can render it, or helper methods(eg.json generator) can use it.For each subview, there are three JS methods generated.<br>   <br>   \t\tExpected time: 3 hours<br><br>* **Creating the ability to render subviews inside other templates**<br><br>   This will allow developers to render subviews in different templates. It will give developers the flexibility to render swift views in different templates. We will be using \"template_tags\" to enable this feature. We really would like to refrain from forcing user to write `{% load ... %}` on top of every template, but it might not be technically possible.<br>   <br>   \t\tExpected time: 1 hour<br><br>* **Creating a URL and action for `html_...` method**<br><br>   `html_..` is supposed to return the up-to-date html string. Since our goal is to prevent user from manually doing this, we will need to dynamically create a url, and action methods that are mapped to these urls.<br>   <br>\t\tExpected time: 1 hour<br><br>* **Creating a URL and action for `json_...` method**<br><br>   `json_render_list` is supposed to return JSON representation of the context values. This will be hard because we have no idea about the type of the variables. They might be plain dictionaries or query sets. We need to write a robust checker that recursively goes through the variables and decide how to serialize them. <br>   <br>   \t\tExpected time: 2 hours<br><br>* **Creating a JS Stub generator**<br><br>   This is so that the framework auto generates the stubs for the necessary javascript functions as and when required. The stub generator will be in Python and it will generate JavaScript code. We need to come up with a good architecture for generating methods in general and then move on to implementing individual methods.<br><br>\t\tExpected time: 2 hours<br><br>* **Implementing the stub generator for `html_...` method**<br><br>   `html_..` method will send an AJAX request to the Django application and get back the HTML string. It is not supposed to do anything other than passing the string as a callback.<br>\t<br>\t\tExpected time: 2 hours<br><br>* **Implementing the stub generator for `reload_...` method**<br><br>   `reload_...` method is similar to `html_...` but instead of only passing the string, it will actually find the parent view of the element and replace the html string inside it.<br>   <br>   \t\tExpected time: 3 hours<br><br>* **Implementing the stub generator `json_...` method**<br><br>   `json_...` method is again similar to `html_...` but instead of a string it will get the JSON representation and pass it as a callback.<br>    <br>    \tExpected time: 1 hour<br><br><br>* **Debugging and creating a sample application**<br><br>   The sample application will help the users to understand how to use the various features of the framework within Django. The application will exercise all features of the framework to help the users understand the power behind the framework.<br>      <br>    \tExpected time: 1 hour writing the application (because the whole thing is about speed) + 5 hours of debugging<br><br>* **Registering the package with PIP registry**<br><br>\tWe would like other developers to use it, so we will register the library to PIP registery. This way people can do `pip install django-interactive` and start using it in their applications.<br>\t<br>\t\tExpected time: 1.5 hour<br>\t<br>* **(Optional) Integrating the JS stubs with a BackboneJS framework**<br><br>\tBackbone views already have methods called \"render:\" that is supposed to render that view. We can try extending the backbone library to use our `html...` method by default.<br>\t \t\t<br>\t \tExpected time: 4 hours<br><br><br>## Roadmap<br><br>### Sprint 1 - 10 November (Product owner: Naman Seth)<br><br>* **Making an empty module that is installable by Django** (Ilter)<br><br>* **Creating the `@page_view` decorator** (Naman)<br><br>* **Creating the `@sub_view` decorator** (Ilter)<br><br>* **Creating the ability to render subviews inside other templates**(Naman)<br><br>### Sprint 2 - 17 November (Product owner: Ilter Canberk)<br><br>* **Creating a URL and action for html_... method (Ilter)<br><br>* **Creating a URL and action for json_... method (Ilter)<br><br>* **Creating a JS Stub generator (Naman)<br><br>* **Implementing the stub generator for html_... method (Naman)<br><br>## Contributors<br><br>* Ilter Canberk<br>* Naman Seth<br><br>## License<br><br>The project is released under the [MIT License](http://opensource.org/licenses/mit-license.php).\n          </div>"}, "last_serial": 1328454, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2aa0caca163a6635bca320d4a367b9c8", "sha256": "e86fea330e895149ae0341f644994f37db00c3ff799a28f16ff94accd34b2ed8"}, "downloads": -1, "filename": "django-interactive-1.0.tar.gz", "has_sig": false, "md5_digest": "2aa0caca163a6635bca320d4a367b9c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10875, "upload_time": "2014-11-29T22:35:44", "upload_time_iso_8601": "2014-11-29T22:35:44.167427Z", "url": "https://files.pythonhosted.org/packages/ba/12/c5b3a842fa693f45ff0fc5d8e38abb991af9d2599f0813021acce2efcff4/django-interactive-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6626434bbda4b4d7e5c5c7969358fb97", "sha256": "5dc39a23cd9b2a37afc6e471e85c7f9bef7dbae101a84d031d27f0114e7bc83c"}, "downloads": -1, "filename": "django-interactive-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6626434bbda4b4d7e5c5c7969358fb97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11151, "upload_time": "2014-12-02T15:31:28", "upload_time_iso_8601": "2014-12-02T15:31:28.026473Z", "url": "https://files.pythonhosted.org/packages/da/b1/49d2466493d719878c742a06cc3f7eb64ba2f4c2a6ada6b04c8f779dc8bf/django-interactive-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2544df49e6c217ae8edf0e7f66ba305e", "sha256": "d2d048bcc5392c516b250523996148cb0e7972c520a09c6a20d49de62bf91115"}, "downloads": -1, "filename": "django-interactive-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2544df49e6c217ae8edf0e7f66ba305e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11163, "upload_time": "2014-12-02T15:47:08", "upload_time_iso_8601": "2014-12-02T15:47:08.841994Z", "url": "https://files.pythonhosted.org/packages/d0/fb/7dd4b71510e7e8688c1d058403e1419c3d90f2b370fea0698c3fbfec71a3/django-interactive-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "0e5f2e00cdc133e390aa6753b63108f1", "sha256": "cb705fc91ed518e9538113d68a52eca0466573ecd9236e494ac9e31de72add0a"}, "downloads": -1, "filename": "django-interactive-1.0.3.tar.gz", "has_sig": false, "md5_digest": "0e5f2e00cdc133e390aa6753b63108f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11178, "upload_time": "2014-12-02T16:28:49", "upload_time_iso_8601": "2014-12-02T16:28:49.379759Z", "url": "https://files.pythonhosted.org/packages/66/19/2f400eaf29a6e53c7b1c06496eb9fb41bc3350160e5e96436e435a5a72b0/django-interactive-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "fd33c51f2cd79782f018c59e5f891fe9", "sha256": "259598ed6e2a197705100392f935c335dfe7f2ebe810a4f58484b226666db7c2"}, "downloads": -1, "filename": "django-interactive-1.0.4.tar.gz", "has_sig": false, "md5_digest": "fd33c51f2cd79782f018c59e5f891fe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11176, "upload_time": "2014-12-02T16:30:49", "upload_time_iso_8601": "2014-12-02T16:30:49.755919Z", "url": "https://files.pythonhosted.org/packages/61/38/b0f65768df16c6bd0dc391017171896dc24addacf9663c946df06ea63c94/django-interactive-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "af18167d76e050daf8e8a7e83eb4a8aa", "sha256": "d12c03073d75315df287096e097653498d08a2c95b1d0bcd27588fa7321ebb15"}, "downloads": -1, "filename": "django-interactive-1.0.5.tar.gz", "has_sig": false, "md5_digest": "af18167d76e050daf8e8a7e83eb4a8aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11158, "upload_time": "2014-12-02T16:32:00", "upload_time_iso_8601": "2014-12-02T16:32:00.476555Z", "url": "https://files.pythonhosted.org/packages/55/03/6731daf2ad7f6f4edacf43ae0f0f1684591467f265c329124f3119453a5b/django-interactive-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "40959a61b45dc8689617fa13348c4d0e", "sha256": "0a2b8ac0f1205366bc65a31a61390d9b9c16cb6017a777cc7b857ae3a5c4e4d1"}, "downloads": -1, "filename": "django-interactive-1.0.6.tar.gz", "has_sig": false, "md5_digest": "40959a61b45dc8689617fa13348c4d0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11158, "upload_time": "2014-12-02T16:34:29", "upload_time_iso_8601": "2014-12-02T16:34:29.685816Z", "url": "https://files.pythonhosted.org/packages/5e/78/2547c1af036f9e7d7c672edfcc0d02390ba9fb046f0888e98d7aa9e641f2/django-interactive-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "40959a61b45dc8689617fa13348c4d0e", "sha256": "0a2b8ac0f1205366bc65a31a61390d9b9c16cb6017a777cc7b857ae3a5c4e4d1"}, "downloads": -1, "filename": "django-interactive-1.0.6.tar.gz", "has_sig": false, "md5_digest": "40959a61b45dc8689617fa13348c4d0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11158, "upload_time": "2014-12-02T16:34:29", "upload_time_iso_8601": "2014-12-02T16:34:29.685816Z", "url": "https://files.pythonhosted.org/packages/5e/78/2547c1af036f9e7d7c672edfcc0d02390ba9fb046f0888e98d7aa9e641f2/django-interactive-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:34 2020"}