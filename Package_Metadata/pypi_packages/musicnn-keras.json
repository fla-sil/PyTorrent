{"info": {"author": "Elio Quinton", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: ISC License (ISCL)", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Multimedia :: Sound/Audio :: Analysis"], "description": "# musicnn_keras\n`Musicnn_keras` is a tf.keras implementation of [musicnn](https://github.com/jordipons/musicnn), originally written in \"pure\" TensorFlow. \n`Musicnn_keras` is aimed at making musicnn accessible via the popular tf.keras interface. \n\n\nPronounced as \"musician\", `musicnn` is a set of pre-trained musically motivated convolutional neural networks for music audio tagging. This repository also includes some pre-trained [vgg-like](https://github.com/Quint-e/musicnn_keras/blob/master/vgg_example.ipynb) baselines.\n\nCheck the [documentation](https://github.com/Quint-e/musicnn_keras/blob/master/DOCUMENTATION.md) and our [basic](https://github.com/Quint-e/musicnn_keras/blob/master/tagging_example.ipynb) / [advanced](https://github.com/Quint-e/musicnn_keras/blob/master/musicnn_example.ipynb) examples to understand how to use `musicnn`.\n\nDo you have questions? Check the [FAQs](https://github.com/Quint-e/musicnn_keras/blob/master/FAQs.md).\n\n\n## Installation\n\n`pip install musicnn_keras`\n\n\nOr clone the repository and install from source: \n\n``` git clone https://github.com/Quint-e/musicnn_keras/musicnn_keras.git```\n\n``` python setup.py install```\n\nDependencies:  `Tensorflow>=2.0`, `librosa>=0.7.0` and `numpy<1.17,>=1.14.5`. \n\n## Load pre-trained models\nLoading pre-trained model is simply achieved by using the dedicated tf.keras API: \n\n~~~~python\nimport tensorflow as tf\nmusicnn = tf.keras.models.load_model('./musicnn_keras/keras_checkpoints/MSD_musicnn.h5')\n~~~~\n\n`musicnn` can then be used like any other keras model. \n\nNote that if you are only interested in loading the pre-trained models in your code, you do not need to install the `musicnn_keras` package. `tf.keras.models.load_model` is sufficient. \n\n## Predict tags\n\nFrom within **python**, you can estimate the topN tags:\n~~~~python\nfrom musicnn_keras.tagger import top_tags\ntop_tags('./audio/joram-moments_of_clarity-08-solipsism-59-88.mp3', model='MTT_musicnn', topN=10)\n~~~~\n>['techno', 'electronic', 'synth', 'fast', 'beat', 'drums', 'no vocals', 'no vocal', 'dance', 'beats']\n\nLet's try another song!\n\n~~~~python\ntop_tags('./audio/TRWJAZW128F42760DD_test.mp3')\n~~~~\n>['guitar', 'piano', 'fast']\n\nFrom the **command-line**, you can also print the topN tags on the screen:\n\n~~~~\npython -m musicnn_keras.tagger file_name.ogg --print\npython -m musicnn_keras.tagger file_name.au --model 'MSD_musicnn' --topN 3 --length 3 --overlap 1.5 --print\n~~~~~\n\nor save to a file:\n\n~~~~\npython -m musicnn_keras.tagger file_name.wav --save out.tags\npython -m musicnn_keras.tagger file_name.mp3 --model 'MTT_musicnn' --topN 10 --length 3 --overlap 1 --print --save out.tags\n~~~~\n\n## Extract the Taggram\n\nYou can also compute the taggram using **python** (see our [basic](https://github.com/Quint-e/musicnn_keras/blob/master/tagging_example.ipynb) example for more details on how to depict it):\n\n~~~~python\nfrom musicnn_keras.extractor import extractor\ntaggram, tags = extractor('./audio/joram-moments_of_clarity-08-solipsism-59-88.mp3', model='MTT_musicnn')\n~~~~\n![Taggram](./images/taggram.png \"Taggram\")\n\nThe above analyzed music clips are included in the `./audio/` folder of this repository. \n\n\n\n## musicnn_keras and musicnn\nThis repo mirrors the contents of the original musicnn repository, adapted to tf.keras. As a result, some of the code and examples used in this repository came from the [original musicnn repo](https://github.com/jordipons/musicnn). \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Quint-e/musicnn_keras", "keywords": "audio music deep learning tagging tensorflow keras machine listening", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "musicnn-keras", "package_url": "https://pypi.org/project/musicnn-keras/", "platform": "", "project_url": "https://pypi.org/project/musicnn-keras/", "project_urls": {"Homepage": "https://github.com/Quint-e/musicnn_keras"}, "release_url": "https://pypi.org/project/musicnn-keras/0.1.0/", "requires_dist": ["librosa (>=0.7.0)", "tensorflow (>=2.0)", "numpy (<1.17,>=1.14.5)"], "requires_python": "", "summary": "Pronounced as \"musician\", musicnn is a set of pre-trained deep convolutional neural networks for music audio tagging. Musicnn_keras is a tf.keras implementation of musicnn", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>musicnn_keras</h1>\n<p><code>Musicnn_keras</code> is a tf.keras implementation of <a href=\"https://github.com/jordipons/musicnn\" rel=\"nofollow\">musicnn</a>, originally written in \"pure\" TensorFlow.\n<code>Musicnn_keras</code> is aimed at making musicnn accessible via the popular tf.keras interface.</p>\n<p>Pronounced as \"musician\", <code>musicnn</code> is a set of pre-trained musically motivated convolutional neural networks for music audio tagging. This repository also includes some pre-trained <a href=\"https://github.com/Quint-e/musicnn_keras/blob/master/vgg_example.ipynb\" rel=\"nofollow\">vgg-like</a> baselines.</p>\n<p>Check the <a href=\"https://github.com/Quint-e/musicnn_keras/blob/master/DOCUMENTATION.md\" rel=\"nofollow\">documentation</a> and our <a href=\"https://github.com/Quint-e/musicnn_keras/blob/master/tagging_example.ipynb\" rel=\"nofollow\">basic</a> / <a href=\"https://github.com/Quint-e/musicnn_keras/blob/master/musicnn_example.ipynb\" rel=\"nofollow\">advanced</a> examples to understand how to use <code>musicnn</code>.</p>\n<p>Do you have questions? Check the <a href=\"https://github.com/Quint-e/musicnn_keras/blob/master/FAQs.md\" rel=\"nofollow\">FAQs</a>.</p>\n<h2>Installation</h2>\n<p><code>pip install musicnn_keras</code></p>\n<p>Or clone the repository and install from source:</p>\n<p><code>git clone https://github.com/Quint-e/musicnn_keras/musicnn_keras.git</code></p>\n<p><code>python setup.py install</code></p>\n<p>Dependencies:  <code>Tensorflow&gt;=2.0</code>, <code>librosa&gt;=0.7.0</code> and <code>numpy&lt;1.17,&gt;=1.14.5</code>.</p>\n<h2>Load pre-trained models</h2>\n<p>Loading pre-trained model is simply achieved by using the dedicated tf.keras API:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"n\">musicnn</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">load_model</span><span class=\"p\">(</span><span class=\"s1\">'./musicnn_keras/keras_checkpoints/MSD_musicnn.h5'</span><span class=\"p\">)</span>\n</pre>\n<p><code>musicnn</code> can then be used like any other keras model.</p>\n<p>Note that if you are only interested in loading the pre-trained models in your code, you do not need to install the <code>musicnn_keras</code> package. <code>tf.keras.models.load_model</code> is sufficient.</p>\n<h2>Predict tags</h2>\n<p>From within <strong>python</strong>, you can estimate the topN tags:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">musicnn_keras.tagger</span> <span class=\"kn\">import</span> <span class=\"n\">top_tags</span>\n<span class=\"n\">top_tags</span><span class=\"p\">(</span><span class=\"s1\">'./audio/joram-moments_of_clarity-08-solipsism-59-88.mp3'</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">'MTT_musicnn'</span><span class=\"p\">,</span> <span class=\"n\">topN</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>['techno', 'electronic', 'synth', 'fast', 'beat', 'drums', 'no vocals', 'no vocal', 'dance', 'beats']</p>\n</blockquote>\n<p>Let's try another song!</p>\n<pre><span class=\"n\">top_tags</span><span class=\"p\">(</span><span class=\"s1\">'./audio/TRWJAZW128F42760DD_test.mp3'</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>['guitar', 'piano', 'fast']</p>\n</blockquote>\n<p>From the <strong>command-line</strong>, you can also print the topN tags on the screen:</p>\n<pre><code>python -m musicnn_keras.tagger file_name.ogg --print\npython -m musicnn_keras.tagger file_name.au --model 'MSD_musicnn' --topN 3 --length 3 --overlap 1.5 --print\n</code></pre>\n<p>or save to a file:</p>\n<pre><code>python -m musicnn_keras.tagger file_name.wav --save out.tags\npython -m musicnn_keras.tagger file_name.mp3 --model 'MTT_musicnn' --topN 10 --length 3 --overlap 1 --print --save out.tags\n</code></pre>\n<h2>Extract the Taggram</h2>\n<p>You can also compute the taggram using <strong>python</strong> (see our <a href=\"https://github.com/Quint-e/musicnn_keras/blob/master/tagging_example.ipynb\" rel=\"nofollow\">basic</a> example for more details on how to depict it):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">musicnn_keras.extractor</span> <span class=\"kn\">import</span> <span class=\"n\">extractor</span>\n<span class=\"n\">taggram</span><span class=\"p\">,</span> <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">extractor</span><span class=\"p\">(</span><span class=\"s1\">'./audio/joram-moments_of_clarity-08-solipsism-59-88.mp3'</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">'MTT_musicnn'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Taggram\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eda432d454ee50a62a32b58de302668fa83202cd/2e2f696d616765732f7461676772616d2e706e67\"></p>\n<p>The above analyzed music clips are included in the <code>./audio/</code> folder of this repository.</p>\n<h2>musicnn_keras and musicnn</h2>\n<p>This repo mirrors the contents of the original musicnn repository, adapted to tf.keras. As a result, some of the code and examples used in this repository came from the <a href=\"https://github.com/jordipons/musicnn\" rel=\"nofollow\">original musicnn repo</a>.</p>\n\n          </div>"}, "last_serial": 7165121, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3f647c5ece4ed50539a70ef54ded0cdf", "sha256": "b8d179971ad25e6c77030ba4b259783a992af2d640e6ac51d2072cd41ee2618f"}, "downloads": -1, "filename": "musicnn_keras-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f647c5ece4ed50539a70ef54ded0cdf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9106, "upload_time": "2020-05-04T15:19:13", "upload_time_iso_8601": "2020-05-04T15:19:13.494334Z", "url": "https://files.pythonhosted.org/packages/87/16/5fbedeb767829a3be2477bcd095d63b166db1adb7953acc51ecdfe8727bd/musicnn_keras-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed8de59b2e6e9adc5659733b3db199ab", "sha256": "12ab378c82fdaae942b7e256c1403c553f67d03a31abb92a535b004315f04bef"}, "downloads": -1, "filename": "musicnn_keras-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ed8de59b2e6e9adc5659733b3db199ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7250, "upload_time": "2020-05-04T15:19:15", "upload_time_iso_8601": "2020-05-04T15:19:15.403712Z", "url": "https://files.pythonhosted.org/packages/0d/c1/dea8ea38d34ac65a7242f41b48f8f7c6e1c62c646b45f92566565b95ba2d/musicnn_keras-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f647c5ece4ed50539a70ef54ded0cdf", "sha256": "b8d179971ad25e6c77030ba4b259783a992af2d640e6ac51d2072cd41ee2618f"}, "downloads": -1, "filename": "musicnn_keras-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f647c5ece4ed50539a70ef54ded0cdf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9106, "upload_time": "2020-05-04T15:19:13", "upload_time_iso_8601": "2020-05-04T15:19:13.494334Z", "url": "https://files.pythonhosted.org/packages/87/16/5fbedeb767829a3be2477bcd095d63b166db1adb7953acc51ecdfe8727bd/musicnn_keras-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed8de59b2e6e9adc5659733b3db199ab", "sha256": "12ab378c82fdaae942b7e256c1403c553f67d03a31abb92a535b004315f04bef"}, "downloads": -1, "filename": "musicnn_keras-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ed8de59b2e6e9adc5659733b3db199ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7250, "upload_time": "2020-05-04T15:19:15", "upload_time_iso_8601": "2020-05-04T15:19:15.403712Z", "url": "https://files.pythonhosted.org/packages/0d/c1/dea8ea38d34ac65a7242f41b48f8f7c6e1c62c646b45f92566565b95ba2d/musicnn_keras-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:08 2020"}