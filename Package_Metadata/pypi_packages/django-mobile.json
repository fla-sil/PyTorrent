{"info": {"author": "Gregor M\u00fcllegger", "author_email": "gregor@muellegger.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=============\ndjango-mobile\n=============\n\n.. image:: https://travis-ci.org/gregmuellegger/django-mobile.png\n   :alt: Build Status\n   :target: https://travis-ci.org/gregmuellegger/django-mobile\n\n.. _introduction:\n\n**django-mobile** provides a simple way to detect mobile browsers and gives\nyou tools at your hand to render some different templates to deliver a mobile\nversion of your site to the user.\n\nThe idea is to keep your views exactly the same but to transparently\ninterchange the templates used to render a response. This is done in two\nsteps:\n\n1. A middleware determines the client's preference to view your site. E.g. if\n   he wants to use the mobile flavour or the full desktop flavour.\n2. The template loader takes then care of choosing the correct templates based\n   on the flavour detected in the middleware.\n\n\nInstallation\n============\n\n.. _installation:\n\n*Pre-Requirements:* ``django_mobile`` depends on django's session framework. So\nbefore you try to use ``django_mobile`` make sure that the sessions framework\nis enabled and working.\n\n1. Install ``django_mobile`` with your favourite python tool, e.g. with\n   ``easy_install django_mobile`` or ``pip install django_mobile``.\n2. Add ``django_mobile`` to your ``INSTALLED_APPS`` setting in the\n   ``settings.py``.\n3. Add ``django_mobile.middleware.MobileDetectionMiddleware`` to your\n   ``MIDDLEWARE_CLASSES`` setting.\n4. Add ``django_mobile.middleware.SetFlavourMiddleware`` to your\n   ``MIDDLEWARE_CLASSES`` setting. Make sure it's listed *after*\n   ``MobileDetectionMiddleware`` and also after ``SessionMiddleware``.\n5. Add ``django_mobile.loader.Loader`` as first item to your\n   ``TEMPLATE_LOADERS`` list in ``settings.py``.\n6. Add ``django_mobile.context_processors.flavour`` to your\n   ``TEMPLATE_CONTEXT_PROCESSORS`` setting.\n\nNow you should be able to use **django-mobile** in its glory. Read below of how\nthings work and which settings can be tweaked to modify **django-mobile**'s\nbehaviour.\n\n\nUsage\n=====\n\n.. _flavours:\n\nThe concept of **django-mobile** is build around the ideas of different\n*flavours* for your site. For example the *mobile* version is described as\none possible *flavour*, the desktop version as another.\n\nThis makes it possible to provide many possible designs instead of just\ndifferentiating between a full desktop experience and one mobile version.  You\ncan make multiple mobile flavours available e.g. one for mobile safari on the\niPhone and Android as well as one for Opera and an extra one for the internet\ntablets like the iPad.\n\n*Note:* By default **django-mobile** only distinguishes between *full* and\n*mobile* flavour.\n\nAfter the correct flavour is somehow chosen by the middlewares, it's\nassigned to the ``request.flavour`` attribute. You can use this in your views\nto provide separate logic.\n\nThis flavour is then use to transparently choose custom templates for this\nspecial flavour. The selected template will have the current flavour prefixed\nto the template name you actually want to render. This means when\n``render_to_response('index.html', ...)`` is called with the *mobile* flavour\nbeing active will actually return a response rendered with the\n``mobile/index.html`` template. However if this flavoured template is not\navailable it will gracefully fallback to the default ``index.html`` template.\n\nIn some cases its not the desired way to have a completely separate templates\nfor each flavour. You can also use the ``{{ flavour }}`` template variable to\nonly change small aspects of a single template. A short example:\n\n.. code-block:: html+django\n\n    <html>\n    <head>\n        <title>My site {% if flavour == \"mobile\" %}(mobile version){% endif %}</title>\n    </head>\n    <body>\n        ...\n    </body>\n    </html>\n\nThis will add ``(mobile version)`` to the title of your site if viewed with\nthe mobile flavour enabled.\n\n*Note:* The ``flavour`` template variable is only available if you have set up the\n``django_mobile.context_processors.flavour`` context processor and used\ndjango's ``RequestContext`` as context instance to render the template.\n\nChanging the current flavour\n----------------------------\n\nThe basic use case of **django-mobile** is obviously to serve a mobile version\nof your site to users. The selection of the correct flavour is usually already\ndone in the middlewares when your own views are called. In some cases you want\nto change the currently used flavour in your view or somewhere else. You can\ndo this by simply calling ``django_mobile.set_flavour(flavour[,\npermanent=True])``. The first argument is self explaining. But keep in mind\nthat you only can pass in a flavour that you is also in your ``FLAVOURS``\nsetting. Otherwise ``set_flavour`` will raise a ``ValueError``. The optional\n``permanent`` parameters defines if the change of the flavour is remember for\nfuture requests of the same client.\n\nYour users can set their desired flavour them self. They just need to specify\nthe ``flavour`` GET parameter on a request to your site. This will permanently\nchoose this flavour as their preference to view the site.\n\nYou can use this GET parameter to let the user select from your available\nflavours:\n\n.. code-block:: html+django\n\n    <ul>\n        <li><a href=\"?flavour=full\">Get the full experience</a>\n        <li><a href=\"?flavour=mobile\">View our mobile version</a>\n        <li><a href=\"?flavour=ipad\">View our iPad version</a>\n    </ul>\n\nNotes on caching\n----------------\n\n.. _caching:\n\nDjango is shipping with some convenience methods to easily cache your views.\nOne of them is ``django.views.decorators.cache.cache_page``. The problem with\ncaching a whole page in conjunction with **django-mobile** is, that django's\ncaching system is not aware of flavours. This means that if the first request\nto a page is served with a mobile flavour, the second request might also\nget a page rendered with the mobile flavour from the cache -- even if the\nsecond one was requested by a desktop browser.\n\n**django-mobile** is shipping with it's own implementation of ``cache_page``\nto resolve this issue. Please use ``django_mobile.cache.cache_page`` instead\nof django's own ``cache_page`` decorator.\n\nYou can also use django's caching middlewares\n``django.middleware.cache.UpdateCacheMiddleware`` and\n``FetchFromCacheMiddleware`` like you already do. But to make them aware of\nflavours, you need to add\n``django_mobile.cache.middleware.FetchFromCacheFlavourMiddleware`` item before standard Django ``FetchFromCacheMiddleware``\nin the ``MIDDLEWARE_CLASSES`` settings and ``django_mobile.cache.middleware.UpdateCacheFlavourMiddleware`` before \n``django_mobile.cache.middleware.UpdateCacheMiddleware`` correspondingly.\n\nIt is necessary to split the usage of ``CacheMiddleware`` because some additional work should be done on request and response *before* standard caching behavior and that is not possible while using two complete middlewares in either order\n\nReference\n=========\n\n``django_mobile.get_flavour([request,] [default])``\n    Get the currently active flavour. If no flavour can be determined it will\n    return *default*. This can happen if ``set_flavour`` was not called before\n    in the current request-response cycle. *default* defaults to the first\n    item in the ``FLAVOURS`` setting.\n\n``django_mobile.set_flavour(flavour, [request,] [permanent])``\n    Set the *flavour* to be used for *request*. This will raise ``ValueError``\n    if *flavour* is not in the ``FLAVOURS`` setting. You can try to set the\n    flavour permanently for *request* by passing ``permanent=True``. This may\n    fail if you are out of a request-response cycle. *request* defaults to the\n    currently active request.\n\n``django_mobile.context_processors.flavour``\n    Context processor that adds the current flavour as *flavour* to the\n    context.\n\n``django_mobile.context_processors.is_mobile``\n    This context processor will add a *is_mobile* variable to the context\n    which is ``True`` if the current flavour equals the\n    ``DEFAULT_MOBILE_FLAVOUR`` setting.\n\n``django_mobile.middleware.SetFlavourMiddleware``\n    Takes care of loading the stored flavour from the user's session or\n    cookies (depending on ``FLAVOURS_STORAGE_BACKEND``) if set. Also sets the\n    current request to a thread-local variable. This is needed to provide\n    ``get_flavour()`` functionality without having access to the request\n    object.\n\n``django_mobile.middleware.MobileDetectionMiddleware``\n    Detects if a mobile browser tries to access the site and sets the flavour\n    to ``DEFAULT_MOBILE_FLAVOUR`` settings value in case.\n\n``django_mobile.cache.cache_page``\n    Same as django's ``cache_page`` decorator, but wraps the view into\n    additional decorators before and after that. Makes it possible to serve multiple\n    flavours without getting into trouble with django's caching that doesn't\n    know about flavours.\n\n``django_mobile.cache.vary_on_flavour_fetch`` ``django_mobile.cache.vary_on_flavour_update``\n    Decorators created from the ``FetchFromCacheFlavourMiddleware`` and ``UpdateCacheFlavourMiddleware`` middleware.\n\n``django_mobile.cache.middleware.FetchFromCacheFlavourMiddleware``\n    Adds ``X-Flavour`` header to ``request.META`` in ``process_request``\n\n``django_mobile.cache.middleware.UpdateCacheFlavourMiddleware``\n    Adds ``X-Flavour`` header to ``response['Vary']`` in ``process_response`` so that Django's ``CacheMiddleware`` know that it should take into account the content of this header when looking up the cached content on next request to this URL.\n\n\nCustomization\n=============\n\n.. _customization:\n\nThere are some points available that let you customize the behaviour of\n**django-mobile**. Here are some possibilities listed:\n\n``MobileDetectionMiddleware``\n-----------------------------\n\nThe built-in middleware to detect if the user is using a mobile browser served\nwell in production but is far from perfect and also implemented in a very\nsimplistic way. You can safely remove this middleware from your settings and\nadd your own version instead. Just make sure that it calls\n``django_mobile.set_flavour`` at some point to set the correct flavour for\nyou.\n\nSettings\n--------\n\n.. _settings:\n\nHere is a list of settings that are used by **django-mobile** and can be\nchanged in your own ``settings.py``:\n\n``FLAVOURS``\n    A list of available flavours for your site.\n    \n    **Default:** ``('full', 'mobile')``\n\n``DEFAULT_MOBILE_FLAVOUR``\n    The flavour which is chosen if the built-in ``MobileDetectionMiddleware``\n    detects a mobile browser.\n    \n    **Default:** ``'mobile'``\n\n``FLAVOURS_COOKIE_HTTPONLY``\n    The value that get passed into ``HttpResponse.set_cookie``'s ``httponly``\n    argument. Set this to ``True`` if you don't want the Javascript code to be\n    able to read the flavour cookie.\n    \n    **Default:** ``False``\n\n``FLAVOURS_COOKIE_KEY``\n    The cookie name that is used for storing the selected flavour in the\n    browser.  This is only used if ``FLAVOURS_STORAGE_BACKEND`` is set to\n    ``'cookie'``.\n    \n    **Default:** ``'flavour'``\n\n``FLAVOURS_TEMPLATE_PREFIX``\n    This string will be prefixed to the template names when searching for\n    flavoured templates. This is useful if you have many flavours and want to\n    store them in a common subdirectory. Example:\n    \n    .. code-block:: python\n    \n        from django.template.loader import render_to_string\n        from django_mobile import set_flavour\n\n        set_flavour('mobile')\n        render_to_string('index.html') # will render 'mobile/index.html'\n\n        # now add this to settings.py\n        FLAVOURS_TEMPLATE_PREFIX = 'flavours/'\n\n        # and try again\n\n        set_flavour('mobile')\n        render_to_string('index.html') # will render 'flavours/mobile/index.html'\n    \n    **Default:** ``''`` (empty string)\n\n``FLAVOURS_TEMPLATE_LOADERS``\n    **django-mobile**'s template loader can load templates prefixed with the\n    current flavour. Specify with this setting which loaders are used to load\n    flavoured templates.\n    \n    **Default:** same as ``TEMPLATE_LOADERS`` setting but without\n    ``'django_mobile.loader.Loader'``.\n\n``FLAVOURS_GET_PARAMETER``\n    Users can change the flavour they want to look at with a HTTP GET\n    parameter.  This determines the name of this parameter.  Set it to\n    ``None`` to disable.\n    \n    **Default:** ``'flavour'``\n\n``FLAVOURS_SESSION_KEY``\n    The user's preference set with the GET parameter is stored in the user's\n    session. This setting determines which session key is used to hold this\n    information.\n    \n    **Default:** ``'flavour'``\n\n``FLAVOURS_STORAGE_BACKEND``\n    Determines how the selected flavour is stored persistently. Available\n    values: ``'session'`` and ``'cookie'``.\n    \n    **Default:** ``'cookie'``\n\nCache Settings\n--------------\n\nDjango ships with the `cached template loader`_\n``django.template.loaders.cached.Loader`` that doesn't require to fetch the\ntemplate from disk every time you want to render it. However it isn't aware of\ndjango-mobile's flavours. For this purpose you can use\n``'django_mobile.loader.CachedLoader'`` as a drop-in replacement that does\nexactly the same django's version but takes the different flavours into\naccount. To use it, put the following bit into your ``settings.py`` file:\n\n.. code-block:: python\n\n    TEMPLATE_LOADERS = (\n        ('django_mobile.loader.CachedLoader', (\n              'django_mobile.loader.Loader',\n              'django.template.loaders.filesystem.Loader',\n              'django.template.loaders.app_directories.Loader',\n        )),\n    )\n\n.. _cached template loader:\n   https://docs.djangoproject.com/en/dev/ref/templates/api/#django.template.loaders.cached.Loader\n\n\nChangelog\n=========\n\n0.7.0\n-----\n\n* `#64`_: Fixing ``cache_page`` decorator and splitting the\n  ``CacheFlavourMiddleware`` into two middlewares. This follows the same\n  strategy as Django did since quite a while. Please see `#64`_ for more\n  details about why this is necessary.\n\n  If you are using ``CacheFlavourMiddleware``, you need to replace it now with\n  ``FetchFromCacheFlavourMiddleware`` and ``UpdateCacheMiddleware``.  Please\n  consolidate the README for more information.\n\n  Thanks to Yury Paykov for the patch.\n\n.. _#64: https://github.com/gregmuellegger/django-mobile/pull/64\n\n0.6.0\n-----\n\n* `#63`_: Django 1.9 support. Thanks to Alexandre Vicenzi for the patch.\n\n.. _#63: https://github.com/gregmuellegger/django-mobile/pull/63\n\n0.5.1\n-----\n\n* `#58`_: Fix Python 3 install issues related to unicode strings. Thanks to\n  Zowie for inspiring the patch.\n\n.. _#58: https://github.com/gregmuellegger/django-mobile/pull/58\n\n0.5.0\n-----\n\n* Support for Django 1.7 and Django 1.8. Thanks to Jose Ignacio Galarza and to\n  Anton Shurashov for the patches.\n\n0.4.0\n-----\n\n* Python 3.3 compatibility, thanks Mirko Rossini for the patch.\n* Dropping Django 1.3 and 1.4 support.\n\n0.3.0\n-----\n\n* Dropping support for python 2.5 (it might still work but we won't test\n  against it anymore).\n* Fixing threading problems because of wrong usage of ``threading.local``.\n  Thanks to Mike Shultz for the patch.\n* Adding a cached template loader. Thanks to Saverio for the patch.\n\n0.2.4\n-----\n\n* FIX: Cookie backend actually never really worked. Thanks to demidov91 for\n  the report. \n\n0.2.3\n-----\n\n* FIX: set *flavour* in all cases, not only if a mobile browser is detected.\n  Thanks to John P. Kiffmeyer for the report.\n\n0.2.2\n-----\n\n* FIX: Opera Mobile on Android was categorized as mobile browser. Thanks to\n  dgerzo for the report.\n* Sniffing for iPad so that it doesn't get recognized as small mobile device.\n  Thanks to Ryan Showalter for the patch.\n\n0.2.1\n-----\n\n* Fixed packing issues that didn't include the django_mobile.cache package.\n  Thanks to *Scott Turnbull* for the report.\n\n0.2.0\n-----\n\n* Restructured project layout to remove settings.py and manage.py from\n  top-level directory. This resolves module-name conflicts when installing\n  with pip's -e option. Thanks to *bendavis78* for the report.\n\n* Added a ``cache_page`` decorator that emulates django's ``cache_page`` but\n  takes flavours into account. The caching system would otherwise cache the\n  flavour that is currently active when a cache miss occurs. Thanks to\n  *itmustbejj* for the report.\n\n* Added a ``CacheFlavourMiddleware`` that makes django's caching middlewares\n  aware of flavours. We use interally the ``Vary`` response header and the\n  ``X-Flavour`` request header.\n\n0.1.4\n-----\n\n* Fixed issue in template loader that only implemented\n  ``load_template_source`` but no ``load_template``. Thanks to tylanpince,\n  rwilcox and Fr\u00e9d\u00e9ric Roland for the report.\n\n0.1.3\n-----\n\n* Fixed issue with ``runserver`` command that didn't handled all request\n  independed from each other. Thanks to bclermont and Fr\u00e9d\u00e9ric Roland for the\n  report.\n\n0.1.2\n-----\n\n* Fixed unreferenced variable error in ``SetFlavourMiddleware``.\n\n0.1.1\n-----\n\n* Fixed ``is_usable`` attribute for ``django_mobile.loader.Loader``. Thanks Michela Ledwidge for the report.\n\n0.1.0\n-----\n\n* Initial release.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gregmuellegger/django-mobile", "keywords": "django,mobile", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-mobile", "package_url": "https://pypi.org/project/django-mobile/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-mobile/", "project_urls": {"Homepage": "https://github.com/gregmuellegger/django-mobile"}, "release_url": "https://pypi.org/project/django-mobile/0.7.0/", "requires_dist": null, "requires_python": "", "summary": "Detect mobile browsers and serve different template flavours to them.", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/gregmuellegger/django-mobile\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7bfbd216eb38c47eda3326eeaccad907b558aeb/68747470733a2f2f7472617669732d63692e6f72672f677265676d75656c6c65676765722f646a616e676f2d6d6f62696c652e706e67\"></a>\n<p id=\"introduction\"><strong>django-mobile</strong> provides a simple way to detect mobile browsers and gives\nyou tools at your hand to render some different templates to deliver a mobile\nversion of your site to the user.</p>\n<p>The idea is to keep your views exactly the same but to transparently\ninterchange the templates used to render a response. This is done in two\nsteps:</p>\n<ol>\n<li>A middleware determines the client\u2019s preference to view your site. E.g. if\nhe wants to use the mobile flavour or the full desktop flavour.</li>\n<li>The template loader takes then care of choosing the correct templates based\non the flavour detected in the middleware.</li>\n</ol>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p id=\"id1\"><em>Pre-Requirements:</em> <tt>django_mobile</tt> depends on django\u2019s session framework. So\nbefore you try to use <tt>django_mobile</tt> make sure that the sessions framework\nis enabled and working.</p>\n<ol>\n<li>Install <tt>django_mobile</tt> with your favourite python tool, e.g. with\n<tt>easy_install django_mobile</tt> or <tt>pip install django_mobile</tt>.</li>\n<li>Add <tt>django_mobile</tt> to your <tt>INSTALLED_APPS</tt> setting in the\n<tt>settings.py</tt>.</li>\n<li>Add <tt>django_mobile.middleware.MobileDetectionMiddleware</tt> to your\n<tt>MIDDLEWARE_CLASSES</tt> setting.</li>\n<li>Add <tt>django_mobile.middleware.SetFlavourMiddleware</tt> to your\n<tt>MIDDLEWARE_CLASSES</tt> setting. Make sure it\u2019s listed <em>after</em>\n<tt>MobileDetectionMiddleware</tt> and also after <tt>SessionMiddleware</tt>.</li>\n<li>Add <tt>django_mobile.loader.Loader</tt> as first item to your\n<tt>TEMPLATE_LOADERS</tt> list in <tt>settings.py</tt>.</li>\n<li>Add <tt>django_mobile.context_processors.flavour</tt> to your\n<tt>TEMPLATE_CONTEXT_PROCESSORS</tt> setting.</li>\n</ol>\n<p>Now you should be able to use <strong>django-mobile</strong> in its glory. Read below of how\nthings work and which settings can be tweaked to modify <strong>django-mobile</strong>\u2019s\nbehaviour.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p id=\"flavours\">The concept of <strong>django-mobile</strong> is build around the ideas of different\n<em>flavours</em> for your site. For example the <em>mobile</em> version is described as\none possible <em>flavour</em>, the desktop version as another.</p>\n<p>This makes it possible to provide many possible designs instead of just\ndifferentiating between a full desktop experience and one mobile version.  You\ncan make multiple mobile flavours available e.g. one for mobile safari on the\niPhone and Android as well as one for Opera and an extra one for the internet\ntablets like the iPad.</p>\n<p><em>Note:</em> By default <strong>django-mobile</strong> only distinguishes between <em>full</em> and\n<em>mobile</em> flavour.</p>\n<p>After the correct flavour is somehow chosen by the middlewares, it\u2019s\nassigned to the <tt>request.flavour</tt> attribute. You can use this in your views\nto provide separate logic.</p>\n<p>This flavour is then use to transparently choose custom templates for this\nspecial flavour. The selected template will have the current flavour prefixed\nto the template name you actually want to render. This means when\n<tt><span class=\"pre\">render_to_response('index.html',</span> <span class=\"pre\">...)</span></tt> is called with the <em>mobile</em> flavour\nbeing active will actually return a response rendered with the\n<tt>mobile/index.html</tt> template. However if this flavoured template is not\navailable it will gracefully fallback to the default <tt>index.html</tt> template.</p>\n<p>In some cases its not the desired way to have a completely separate templates\nfor each flavour. You can also use the <tt>{{ flavour }}</tt> template variable to\nonly change small aspects of a single template. A short example:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>My site <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">flavour</span> <span class=\"o\">==</span> <span class=\"s2\">\"mobile\"</span> <span class=\"cp\">%}</span>(mobile version)<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    ...\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n<p>This will add <tt>(mobile version)</tt> to the title of your site if viewed with\nthe mobile flavour enabled.</p>\n<p><em>Note:</em> The <tt>flavour</tt> template variable is only available if you have set up the\n<tt>django_mobile.context_processors.flavour</tt> context processor and used\ndjango\u2019s <tt>RequestContext</tt> as context instance to render the template.</p>\n<div id=\"changing-the-current-flavour\">\n<h3>Changing the current flavour</h3>\n<p>The basic use case of <strong>django-mobile</strong> is obviously to serve a mobile version\nof your site to users. The selection of the correct flavour is usually already\ndone in the middlewares when your own views are called. In some cases you want\nto change the currently used flavour in your view or somewhere else. You can\ndo this by simply calling <tt>django_mobile.set_flavour(flavour[,\npermanent=True])</tt>. The first argument is self explaining. But keep in mind\nthat you only can pass in a flavour that you is also in your <tt>FLAVOURS</tt>\nsetting. Otherwise <tt>set_flavour</tt> will raise a <tt>ValueError</tt>. The optional\n<tt>permanent</tt> parameters defines if the change of the flavour is remember for\nfuture requests of the same client.</p>\n<p>Your users can set their desired flavour them self. They just need to specify\nthe <tt>flavour</tt> GET parameter on a request to your site. This will permanently\nchoose this flavour as their preference to view the site.</p>\n<p>You can use this GET parameter to let the user select from your available\nflavours:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"?flavour=full\"</span><span class=\"p\">&gt;</span>Get the full experience<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"?flavour=mobile\"</span><span class=\"p\">&gt;</span>View our mobile version<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"?flavour=ipad\"</span><span class=\"p\">&gt;</span>View our iPad version<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre>\n</div>\n<div id=\"notes-on-caching\">\n<h3>Notes on caching</h3>\n<p id=\"caching\">Django is shipping with some convenience methods to easily cache your views.\nOne of them is <tt>django.views.decorators.cache.cache_page</tt>. The problem with\ncaching a whole page in conjunction with <strong>django-mobile</strong> is, that django\u2019s\ncaching system is not aware of flavours. This means that if the first request\nto a page is served with a mobile flavour, the second request might also\nget a page rendered with the mobile flavour from the cache \u2013 even if the\nsecond one was requested by a desktop browser.</p>\n<p><strong>django-mobile</strong> is shipping with it\u2019s own implementation of <tt>cache_page</tt>\nto resolve this issue. Please use <tt>django_mobile.cache.cache_page</tt> instead\nof django\u2019s own <tt>cache_page</tt> decorator.</p>\n<p>You can also use django\u2019s caching middlewares\n<tt>django.middleware.cache.UpdateCacheMiddleware</tt> and\n<tt>FetchFromCacheMiddleware</tt> like you already do. But to make them aware of\nflavours, you need to add\n<tt>django_mobile.cache.middleware.FetchFromCacheFlavourMiddleware</tt> item before standard Django <tt>FetchFromCacheMiddleware</tt>\nin the <tt>MIDDLEWARE_CLASSES</tt> settings and <tt>django_mobile.cache.middleware.UpdateCacheFlavourMiddleware</tt> before\n<tt>django_mobile.cache.middleware.UpdateCacheMiddleware</tt> correspondingly.</p>\n<p>It is necessary to split the usage of <tt>CacheMiddleware</tt> because some additional work should be done on request and response <em>before</em> standard caching behavior and that is not possible while using two complete middlewares in either order</p>\n</div>\n</div>\n<div id=\"reference\">\n<h2>Reference</h2>\n<dl>\n<dt><tt><span class=\"pre\">django_mobile.get_flavour([request,]</span> [default])</tt></dt>\n<dd>Get the currently active flavour. If no flavour can be determined it will\nreturn <em>default</em>. This can happen if <tt>set_flavour</tt> was not called before\nin the current request-response cycle. <em>default</em> defaults to the first\nitem in the <tt>FLAVOURS</tt> setting.</dd>\n<dt><tt>django_mobile.set_flavour(flavour, [request,] [permanent])</tt></dt>\n<dd>Set the <em>flavour</em> to be used for <em>request</em>. This will raise <tt>ValueError</tt>\nif <em>flavour</em> is not in the <tt>FLAVOURS</tt> setting. You can try to set the\nflavour permanently for <em>request</em> by passing <tt>permanent=True</tt>. This may\nfail if you are out of a request-response cycle. <em>request</em> defaults to the\ncurrently active request.</dd>\n<dt><tt>django_mobile.context_processors.flavour</tt></dt>\n<dd>Context processor that adds the current flavour as <em>flavour</em> to the\ncontext.</dd>\n<dt><tt>django_mobile.context_processors.is_mobile</tt></dt>\n<dd>This context processor will add a <em>is_mobile</em> variable to the context\nwhich is <tt>True</tt> if the current flavour equals the\n<tt>DEFAULT_MOBILE_FLAVOUR</tt> setting.</dd>\n<dt><tt>django_mobile.middleware.SetFlavourMiddleware</tt></dt>\n<dd>Takes care of loading the stored flavour from the user\u2019s session or\ncookies (depending on <tt>FLAVOURS_STORAGE_BACKEND</tt>) if set. Also sets the\ncurrent request to a thread-local variable. This is needed to provide\n<tt>get_flavour()</tt> functionality without having access to the request\nobject.</dd>\n<dt><tt>django_mobile.middleware.MobileDetectionMiddleware</tt></dt>\n<dd>Detects if a mobile browser tries to access the site and sets the flavour\nto <tt>DEFAULT_MOBILE_FLAVOUR</tt> settings value in case.</dd>\n<dt><tt>django_mobile.cache.cache_page</tt></dt>\n<dd>Same as django\u2019s <tt>cache_page</tt> decorator, but wraps the view into\nadditional decorators before and after that. Makes it possible to serve multiple\nflavours without getting into trouble with django\u2019s caching that doesn\u2019t\nknow about flavours.</dd>\n<dt><tt>django_mobile.cache.vary_on_flavour_fetch</tt> <tt>django_mobile.cache.vary_on_flavour_update</tt></dt>\n<dd>Decorators created from the <tt>FetchFromCacheFlavourMiddleware</tt> and <tt>UpdateCacheFlavourMiddleware</tt> middleware.</dd>\n<dt><tt>django_mobile.cache.middleware.FetchFromCacheFlavourMiddleware</tt></dt>\n<dd>Adds <tt><span class=\"pre\">X-Flavour</span></tt> header to <tt>request.META</tt> in <tt>process_request</tt></dd>\n<dt><tt>django_mobile.cache.middleware.UpdateCacheFlavourMiddleware</tt></dt>\n<dd>Adds <tt><span class=\"pre\">X-Flavour</span></tt> header to <tt><span class=\"pre\">response['Vary']</span></tt> in <tt>process_response</tt> so that Django\u2019s <tt>CacheMiddleware</tt> know that it should take into account the content of this header when looking up the cached content on next request to this URL.</dd>\n</dl>\n</div>\n<div id=\"customization\">\n<h2>Customization</h2>\n<p id=\"id2\">There are some points available that let you customize the behaviour of\n<strong>django-mobile</strong>. Here are some possibilities listed:</p>\n<div id=\"mobiledetectionmiddleware\">\n<h3><tt>MobileDetectionMiddleware</tt></h3>\n<p>The built-in middleware to detect if the user is using a mobile browser served\nwell in production but is far from perfect and also implemented in a very\nsimplistic way. You can safely remove this middleware from your settings and\nadd your own version instead. Just make sure that it calls\n<tt>django_mobile.set_flavour</tt> at some point to set the correct flavour for\nyou.</p>\n</div>\n<div id=\"settings\">\n<h3>Settings</h3>\n<p id=\"id3\">Here is a list of settings that are used by <strong>django-mobile</strong> and can be\nchanged in your own <tt>settings.py</tt>:</p>\n<dl>\n<dt><tt>FLAVOURS</tt></dt>\n<dd><p>A list of available flavours for your site.</p>\n<p><strong>Default:</strong> <tt>('full', 'mobile')</tt></p>\n</dd>\n<dt><tt>DEFAULT_MOBILE_FLAVOUR</tt></dt>\n<dd><p>The flavour which is chosen if the built-in <tt>MobileDetectionMiddleware</tt>\ndetects a mobile browser.</p>\n<p><strong>Default:</strong> <tt>'mobile'</tt></p>\n</dd>\n<dt><tt>FLAVOURS_COOKIE_HTTPONLY</tt></dt>\n<dd><p>The value that get passed into <tt>HttpResponse.set_cookie</tt>\u2019s <tt>httponly</tt>\nargument. Set this to <tt>True</tt> if you don\u2019t want the Javascript code to be\nable to read the flavour cookie.</p>\n<p><strong>Default:</strong> <tt>False</tt></p>\n</dd>\n<dt><tt>FLAVOURS_COOKIE_KEY</tt></dt>\n<dd><p>The cookie name that is used for storing the selected flavour in the\nbrowser.  This is only used if <tt>FLAVOURS_STORAGE_BACKEND</tt> is set to\n<tt>'cookie'</tt>.</p>\n<p><strong>Default:</strong> <tt>'flavour'</tt></p>\n</dd>\n<dt><tt>FLAVOURS_TEMPLATE_PREFIX</tt></dt>\n<dd><p>This string will be prefixed to the template names when searching for\nflavoured templates. This is useful if you have many flavours and want to\nstore them in a common subdirectory. Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.template.loader</span> <span class=\"kn\">import</span> <span class=\"n\">render_to_string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_mobile</span> <span class=\"kn\">import</span> <span class=\"n\">set_flavour</span>\n\n<span class=\"n\">set_flavour</span><span class=\"p\">(</span><span class=\"s1\">'mobile'</span><span class=\"p\">)</span>\n<span class=\"n\">render_to_string</span><span class=\"p\">(</span><span class=\"s1\">'index.html'</span><span class=\"p\">)</span> <span class=\"c1\"># will render 'mobile/index.html'</span>\n\n<span class=\"c1\"># now add this to settings.py</span>\n<span class=\"n\">FLAVOURS_TEMPLATE_PREFIX</span> <span class=\"o\">=</span> <span class=\"s1\">'flavours/'</span>\n\n<span class=\"c1\"># and try again</span>\n\n<span class=\"n\">set_flavour</span><span class=\"p\">(</span><span class=\"s1\">'mobile'</span><span class=\"p\">)</span>\n<span class=\"n\">render_to_string</span><span class=\"p\">(</span><span class=\"s1\">'index.html'</span><span class=\"p\">)</span> <span class=\"c1\"># will render 'flavours/mobile/index.html'</span>\n</pre>\n<p><strong>Default:</strong> <tt>''</tt> (empty string)</p>\n</dd>\n<dt><tt>FLAVOURS_TEMPLATE_LOADERS</tt></dt>\n<dd><p><strong>django-mobile</strong>\u2019s template loader can load templates prefixed with the\ncurrent flavour. Specify with this setting which loaders are used to load\nflavoured templates.</p>\n<p><strong>Default:</strong> same as <tt>TEMPLATE_LOADERS</tt> setting but without\n<tt>'django_mobile.loader.Loader'</tt>.</p>\n</dd>\n<dt><tt>FLAVOURS_GET_PARAMETER</tt></dt>\n<dd><p>Users can change the flavour they want to look at with a HTTP GET\nparameter.  This determines the name of this parameter.  Set it to\n<tt>None</tt> to disable.</p>\n<p><strong>Default:</strong> <tt>'flavour'</tt></p>\n</dd>\n<dt><tt>FLAVOURS_SESSION_KEY</tt></dt>\n<dd><p>The user\u2019s preference set with the GET parameter is stored in the user\u2019s\nsession. This setting determines which session key is used to hold this\ninformation.</p>\n<p><strong>Default:</strong> <tt>'flavour'</tt></p>\n</dd>\n<dt><tt>FLAVOURS_STORAGE_BACKEND</tt></dt>\n<dd><p>Determines how the selected flavour is stored persistently. Available\nvalues: <tt>'session'</tt> and <tt>'cookie'</tt>.</p>\n<p><strong>Default:</strong> <tt>'cookie'</tt></p>\n</dd>\n</dl>\n</div>\n<div id=\"cache-settings\">\n<h3>Cache Settings</h3>\n<p>Django ships with the <a href=\"https://docs.djangoproject.com/en/dev/ref/templates/api/#django.template.loaders.cached.Loader\" rel=\"nofollow\">cached template loader</a>\n<tt>django.template.loaders.cached.Loader</tt> that doesn\u2019t require to fetch the\ntemplate from disk every time you want to render it. However it isn\u2019t aware of\ndjango-mobile\u2019s flavours. For this purpose you can use\n<tt>'django_mobile.loader.CachedLoader'</tt> as a drop-in replacement that does\nexactly the same django\u2019s version but takes the different flavours into\naccount. To use it, put the following bit into your <tt>settings.py</tt> file:</p>\n<pre><span class=\"n\">TEMPLATE_LOADERS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"s1\">'django_mobile.loader.CachedLoader'</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n          <span class=\"s1\">'django_mobile.loader.Loader'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'django.template.loaders.filesystem.Loader'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'django.template.loaders.app_directories.Loader'</span><span class=\"p\">,</span>\n    <span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id4\">\n<h3>0.7.0</h3>\n<ul>\n<li><p><a href=\"https://github.com/gregmuellegger/django-mobile/pull/64\" rel=\"nofollow\">#64</a>: Fixing <tt>cache_page</tt> decorator and splitting the\n<tt>CacheFlavourMiddleware</tt> into two middlewares. This follows the same\nstrategy as Django did since quite a while. Please see <a href=\"https://github.com/gregmuellegger/django-mobile/pull/64\" rel=\"nofollow\">#64</a> for more\ndetails about why this is necessary.</p>\n<p>If you are using <tt>CacheFlavourMiddleware</tt>, you need to replace it now with\n<tt>FetchFromCacheFlavourMiddleware</tt> and <tt>UpdateCacheMiddleware</tt>.  Please\nconsolidate the README for more information.</p>\n<p>Thanks to Yury Paykov for the patch.</p>\n</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.6.0</h3>\n<ul>\n<li><a href=\"https://github.com/gregmuellegger/django-mobile/pull/63\" rel=\"nofollow\">#63</a>: Django 1.9 support. Thanks to Alexandre Vicenzi for the patch.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.5.1</h3>\n<ul>\n<li><a href=\"https://github.com/gregmuellegger/django-mobile/pull/58\" rel=\"nofollow\">#58</a>: Fix Python 3 install issues related to unicode strings. Thanks to\nZowie for inspiring the patch.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.5.0</h3>\n<ul>\n<li>Support for Django 1.7 and Django 1.8. Thanks to Jose Ignacio Galarza and to\nAnton Shurashov for the patches.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.4.0</h3>\n<ul>\n<li>Python 3.3 compatibility, thanks Mirko Rossini for the patch.</li>\n<li>Dropping Django 1.3 and 1.4 support.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.3.0</h3>\n<ul>\n<li>Dropping support for python 2.5 (it might still work but we won\u2019t test\nagainst it anymore).</li>\n<li>Fixing threading problems because of wrong usage of <tt>threading.local</tt>.\nThanks to Mike Shultz for the patch.</li>\n<li>Adding a cached template loader. Thanks to Saverio for the patch.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.2.4</h3>\n<ul>\n<li>FIX: Cookie backend actually never really worked. Thanks to demidov91 for\nthe report.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.2.3</h3>\n<ul>\n<li>FIX: set <em>flavour</em> in all cases, not only if a mobile browser is detected.\nThanks to John P. Kiffmeyer for the report.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>0.2.2</h3>\n<ul>\n<li>FIX: Opera Mobile on Android was categorized as mobile browser. Thanks to\ndgerzo for the report.</li>\n<li>Sniffing for iPad so that it doesn\u2019t get recognized as small mobile device.\nThanks to Ryan Showalter for the patch.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>0.2.1</h3>\n<ul>\n<li>Fixed packing issues that didn\u2019t include the django_mobile.cache package.\nThanks to <em>Scott Turnbull</em> for the report.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>0.2.0</h3>\n<ul>\n<li>Restructured project layout to remove settings.py and manage.py from\ntop-level directory. This resolves module-name conflicts when installing\nwith pip\u2019s -e option. Thanks to <em>bendavis78</em> for the report.</li>\n<li>Added a <tt>cache_page</tt> decorator that emulates django\u2019s <tt>cache_page</tt> but\ntakes flavours into account. The caching system would otherwise cache the\nflavour that is currently active when a cache miss occurs. Thanks to\n<em>itmustbejj</em> for the report.</li>\n<li>Added a <tt>CacheFlavourMiddleware</tt> that makes django\u2019s caching middlewares\naware of flavours. We use interally the <tt>Vary</tt> response header and the\n<tt><span class=\"pre\">X-Flavour</span></tt> request header.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>0.1.4</h3>\n<ul>\n<li>Fixed issue in template loader that only implemented\n<tt>load_template_source</tt> but no <tt>load_template</tt>. Thanks to tylanpince,\nrwilcox and Fr\u00e9d\u00e9ric Roland for the report.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>0.1.3</h3>\n<ul>\n<li>Fixed issue with <tt>runserver</tt> command that didn\u2019t handled all request\nindepended from each other. Thanks to bclermont and Fr\u00e9d\u00e9ric Roland for the\nreport.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>0.1.2</h3>\n<ul>\n<li>Fixed unreferenced variable error in <tt>SetFlavourMiddleware</tt>.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3>0.1.1</h3>\n<ul>\n<li>Fixed <tt>is_usable</tt> attribute for <tt>django_mobile.loader.Loader</tt>. Thanks Michela Ledwidge for the report.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>0.1.0</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2019344, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "03bd27975acf5b4922cdcf0cccebf902", "sha256": "b5556f7d5c633089cdb5199c7e393c698a062ae3a925eae90f7ac354ed3dda23"}, "downloads": -1, "filename": "django-mobile-0.1.0.tar.gz", "has_sig": false, "md5_digest": "03bd27975acf5b4922cdcf0cccebf902", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9905, "upload_time": "2010-10-17T22:14:35", "upload_time_iso_8601": "2010-10-17T22:14:35.076158Z", "url": "https://files.pythonhosted.org/packages/e2/30/ecb93323f6a988ff834caf09b71b4f7d3b5c198c21a4c61f898ea75d33fa/django-mobile-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dbd117b5faa62e0cdea4523e3b57d958", "sha256": "8804cf44c259f5c27b3a5fd1d67d0a80d049205698bf181302451412b5cd4c28"}, "downloads": -1, "filename": "django-mobile-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dbd117b5faa62e0cdea4523e3b57d958", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10059, "upload_time": "2010-10-18T22:03:41", "upload_time_iso_8601": "2010-10-18T22:03:41.551260Z", "url": "https://files.pythonhosted.org/packages/7d/e2/78128a0f089ddf024d8ed50dbba0dc597c0cfd9ec286e9bdb36041ea222b/django-mobile-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ca4656c5d61cf6fbd3d60e0094ffde89", "sha256": "19b2c7d6770095cdfa3a060fa87719d2a67314758818d330da6467211a19dd6e"}, "downloads": -1, "filename": "django-mobile-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ca4656c5d61cf6fbd3d60e0094ffde89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10123, "upload_time": "2010-10-21T14:09:59", "upload_time_iso_8601": "2010-10-21T14:09:59.250263Z", "url": "https://files.pythonhosted.org/packages/83/40/74fdc88ed1a5ceb02a5838907f6761e7a1a74cca2a436bae1e5f70114c55/django-mobile-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "2d936a2fd9e002e6539b33b6785a2cc1", "sha256": "d8372120761e8774726e9a98ce98716d912669884aa08d42e04524051252d896"}, "downloads": -1, "filename": "django-mobile-0.1.3.tar.gz", "has_sig": false, "md5_digest": "2d936a2fd9e002e6539b33b6785a2cc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9346, "upload_time": "2011-01-17T21:52:06", "upload_time_iso_8601": "2011-01-17T21:52:06.734913Z", "url": "https://files.pythonhosted.org/packages/dd/9c/e9abfec8ea61c1cc1777a43a006fa05c5018d5818bd8bcf817177624b0e6/django-mobile-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "8157ba3d2174d385dc276ff8a2635ec4", "sha256": "35ee6a9e6d18c12590e9d327560092bd594a5ae5a3cc6a3e36394109a1b1d76c"}, "downloads": -1, "filename": "django-mobile-0.1.4.tar.gz", "has_sig": false, "md5_digest": "8157ba3d2174d385dc276ff8a2635ec4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9465, "upload_time": "2011-01-19T01:08:42", "upload_time_iso_8601": "2011-01-19T01:08:42.212169Z", "url": "https://files.pythonhosted.org/packages/e9/18/2d22558dd3ded7daeb10f1018d3faad6ba10bea445d4c36a958a71917514/django-mobile-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c858505c61d28b89ea653a010eef4ee0", "sha256": "57e44b006e5ec8d26f45f2bc89e0c7e2c87ed093f487b76fd07a50b959a4fdfd"}, "downloads": -1, "filename": "django-mobile-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c858505c61d28b89ea653a010eef4ee0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10509, "upload_time": "2011-03-21T00:02:37", "upload_time_iso_8601": "2011-03-21T00:02:37.898468Z", "url": "https://files.pythonhosted.org/packages/28/da/50a1d2aaa4925815a61be343f88f342789e0d60e9cb023f6023b386bbd6b/django-mobile-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e0b08be314f3b4d8674c98ce0f1a58af", "sha256": "1ebb44e501174eff51fc9a2dca9ef416598ae4f50759056317a16602c693f046"}, "downloads": -1, "filename": "django-mobile-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e0b08be314f3b4d8674c98ce0f1a58af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13550, "upload_time": "2011-06-22T13:09:36", "upload_time_iso_8601": "2011-06-22T13:09:36.964696Z", "url": "https://files.pythonhosted.org/packages/6b/4f/6e03d190f81c45f26d4208289a890985b971970243f7e84fe615ffdbc6b4/django-mobile-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "6fc56244cca0af3cdcd846524a64151d", "sha256": "1eead95e2fa0c17bc4ba535ac0028136c85b65b3497c18259fdc3142a1c07496"}, "downloads": -1, "filename": "django-mobile-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6fc56244cca0af3cdcd846524a64151d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13738, "upload_time": "2011-12-10T18:54:51", "upload_time_iso_8601": "2011-12-10T18:54:51.586443Z", "url": "https://files.pythonhosted.org/packages/cc/05/b7e82093f9bdb0c33beba55fc270cf815ba8912ddb38667b090db1611117/django-mobile-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "1de9b055000b71784fe551e2d948acd6", "sha256": "e6248d88cd797673fd96005159ed686c6cb63aec5992047f41d671dd442600f8"}, "downloads": -1, "filename": "django-mobile-0.2.3.tar.gz", "has_sig": false, "md5_digest": "1de9b055000b71784fe551e2d948acd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13827, "upload_time": "2012-04-14T15:23:59", "upload_time_iso_8601": "2012-04-14T15:23:59.765821Z", "url": "https://files.pythonhosted.org/packages/f8/6d/9438fc540f09770200904fccad72490765bb3fe3bfe2b5983738738b48dd/django-mobile-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "6ceaaba53a725a30e143f77f54e39a13", "sha256": "db9d12efe31179f7f8135ea5983fe08035f929f01067f6cf28c19fb263bc929c"}, "downloads": -1, "filename": "django-mobile-0.2.4.tar.gz", "has_sig": false, "md5_digest": "6ceaaba53a725a30e143f77f54e39a13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16463, "upload_time": "2012-09-19T20:58:58", "upload_time_iso_8601": "2012-09-19T20:58:58.221612Z", "url": "https://files.pythonhosted.org/packages/68/aa/faaf5dbe0e737b53da366f0c621cf85ac1357740c8397eacc5c60ed91f60/django-mobile-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "fea418bcd2f366c7d34e967c2d4a6ba1", "sha256": "19286af03960fd83afa0b6e0032bc507dd080956bfbc9e81a1b38064987b4c6f"}, "downloads": -1, "filename": "django-mobile-0.3.0.tar.gz", "has_sig": false, "md5_digest": "fea418bcd2f366c7d34e967c2d4a6ba1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18288, "upload_time": "2013-05-27T22:30:47", "upload_time_iso_8601": "2013-05-27T22:30:47.420300Z", "url": "https://files.pythonhosted.org/packages/eb/9a/0a5a07708ef10ae5c0cbf1118f26fa9c704bb7034359e637ff87d245cf17/django-mobile-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "32a6c2923fd74c3a2fdec72925706aa9", "sha256": "f0af769844e62b28ce6b50bbf5b5010b5fe939d2885f5c9a1a2566aa15cf6c29"}, "downloads": -1, "filename": "django-mobile-0.4.0.tar.gz", "has_sig": false, "md5_digest": "32a6c2923fd74c3a2fdec72925706aa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18239, "upload_time": "2014-08-19T20:34:55", "upload_time_iso_8601": "2014-08-19T20:34:55.810668Z", "url": "https://files.pythonhosted.org/packages/34/4c/0929981ad7c64ca943a811f57b7119f7ef507718399c1b7d2daa5e8c6cbb/django-mobile-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "c58f6f4ff964d4f656ecc619003e1799", "sha256": "37b46723e6845a2e2d580a5b33f7e75ec0fd5817bf6f7634e1bac9e2befdb147"}, "downloads": -1, "filename": "django-mobile-0.5.0.tar.gz", "has_sig": false, "md5_digest": "c58f6f4ff964d4f656ecc619003e1799", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14533, "upload_time": "2015-05-04T06:36:55", "upload_time_iso_8601": "2015-05-04T06:36:55.269923Z", "url": "https://files.pythonhosted.org/packages/46/a7/c22fb336d8dbb7daabb4f4a21b1700cb4e494eca0a25c91431e001ff7ba0/django-mobile-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "096e643ef7618ab42aa6660d7a0191d1", "sha256": "0a4d0efff88e0e6ce5ae32d582a1496171469482a784ac41b5de6e946c69353f"}, "downloads": -1, "filename": "django-mobile-0.5.1.tar.gz", "has_sig": false, "md5_digest": "096e643ef7618ab42aa6660d7a0191d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14629, "upload_time": "2015-09-04T07:11:04", "upload_time_iso_8601": "2015-09-04T07:11:04.233741Z", "url": "https://files.pythonhosted.org/packages/3d/96/999e3425464b088f1621465e38a911e7b371063d59e4aa59bc4ab85bc473/django-mobile-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "7f83804f20fe0b399c1ab3251b17cf84", "sha256": "2811ae9d233e506c65702e888bc1c762a9e30ecaf473f42bd51ba629072c650a"}, "downloads": -1, "filename": "django-mobile-0.6.0.tar.gz", "has_sig": false, "md5_digest": "7f83804f20fe0b399c1ab3251b17cf84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16979, "upload_time": "2015-12-24T11:19:34", "upload_time_iso_8601": "2015-12-24T11:19:34.966897Z", "url": "https://files.pythonhosted.org/packages/5f/53/92a385ee849d039289016d7f900c74874fc6be3277223b4cda9ed48fdce8/django-mobile-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "63aa8ee2d0613227866492f32963a4fe", "sha256": "3420dc10a199a9f65acadb1243fb539e3045ee51fa6f5031ee57831b19713b86"}, "downloads": -1, "filename": "django-mobile-0.7.0.tar.gz", "has_sig": false, "md5_digest": "63aa8ee2d0613227866492f32963a4fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19229, "upload_time": "2016-03-21T20:12:12", "upload_time_iso_8601": "2016-03-21T20:12:12.911991Z", "url": "https://files.pythonhosted.org/packages/db/0e/956f3070bbfa00ba66839710dbefcea81193a6710a759ea5c3e0947f8c21/django-mobile-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63aa8ee2d0613227866492f32963a4fe", "sha256": "3420dc10a199a9f65acadb1243fb539e3045ee51fa6f5031ee57831b19713b86"}, "downloads": -1, "filename": "django-mobile-0.7.0.tar.gz", "has_sig": false, "md5_digest": "63aa8ee2d0613227866492f32963a4fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19229, "upload_time": "2016-03-21T20:12:12", "upload_time_iso_8601": "2016-03-21T20:12:12.911991Z", "url": "https://files.pythonhosted.org/packages/db/0e/956f3070bbfa00ba66839710dbefcea81193a6710a759ea5c3e0947f8c21/django-mobile-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:03 2020"}