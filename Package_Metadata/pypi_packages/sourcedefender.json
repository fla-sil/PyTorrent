{"info": {"author": "SOURCEdefender", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Information Technology", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: Other/Proprietary License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Security", "Topic :: Security :: Cryptography", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Software Distribution", "Topic :: Utilities"], "description": "![SOURCEdefender - advanced encryption protecting your Python codebase](https://images.sourcedefender.co.uk/logo.png \"SOURCEdefender - advanced encryption protecting your python codebase\")\n\n---\n\n[![python](https://img.shields.io/pypi/pyversions/sourcedefender.svg?logo=python&logoColor=fed749&colorB=3770a0&label=)][python-url]\n[![downloads](https://pepy.tech/badge/sourcedefender)][pepy-url]\n[![downloads](https://pepy.tech/badge/sourcedefender/week)][pepy-url]\n\nSOURCEdefender can protect your plaintext Python source code with AES 256-bit Encryption. There is no impact on the performance of your running application as the decryption process takes place during the import of your module or when loading your script on the command-line. Encrypted code won't run any slower once loaded from a _.pye_ file compared to loading from a _.py_ or _.pyc_ file. \n\nAs we hook directly into the import process there are no cross platform or Python version compatibility issues. Encrypted code will run on the _ANY_ target environment we support. Obviously your code needs to be written with the target platform in mind, we can't automagically make __sys.getwindowsversion()__ work on Linux.\n\n# Features\n  - Code encrypted with AES 256-bit encryption.\n  - Encrypted code will run on __ANY__ supported environment.\n  - Enforced expire time on encrypted code (optional).\n\n# Supported Environments\n| Architecture | Operating System | Python 3.6 | Python 3.7 | Python 3.8 | Python 3.9-dev |\n|--            |--                |--          |--          |--          |--              |\n|x86_64        |Windows 10        |Y           |Y           |Y           |N               |\n|x86_64        |Linux             |Y           |Y           |Y           |N               |\n|x86_64        |macOS             |Y           |Y           |N           |N               |\n|ARMv7         |Linux             |Y           |Y           |Y           |N               |\n\n* Note: We have had to drop support for 3.9-dev in this release as upstream are having issues with the latest Cython pip package.\n\n\n# Usage\n\n## How do I protect my Python source code?\n\nLet's have a look at an example of the encryption process:\n\n    $ cat /home/ubuntu/helloworld.py\n    print(\"Hello World!\")\n\nThis is a very basic example and produces the following output:\n\n    $ python3 /home/ubuntu/helloworld.py\n    Hello World!\n\nWe do not want anyone to get at our source code and we also don't want anyone to run this code after 1 day. When we encrypt the file we can enforce an expire time of 1 day from now with the __--ttl__ option as follows:\n\n    $ sourcedefender encrypt --ttl=1d /home/ubuntu/helloworld.py\n    SOURCEdefender v5.0.12\n    \n    Processing:\n    \n    /home/ubuntu/helloworld.py\n\nNow the file is encrypted, its contents are as follows:\n\n    $ cat /home/ubuntu/helloworld.pye\n    -----BEGIN SOURCEDEFENDER FILE-----\n    Version : 5.0.12\n    \n    KkVjZjNWRV4rZvmUFhXBQhPwlR6wUWASZO/Gnh8sJKzpW7c3D8TRbLfNXn01Q182QigxeW1tagq1\n    c8A0WiWh5wa2k7YCd4oNugSqv/FABal7Wh1vDsVh7rPXFcamQhfqU1kv5CtmN/2G1EqRUy2PGu+p\n    camVzPjFXmFkQ21+fj80MUg0Z1oG3PniOXCJ0V/Qu3/Bw0Fic0BZTGxjTm4=\n\n    ------END SOURCEDEFENDER FILE------\n\nOnce a file has been encrypted, its extension is changed __.py__  to __.pye__, this is so the module knows its encrypted and can process it accordingly during import. All you need to remember is to inlcude __sourcedefender__ as a dependency while packaging your project and import the sourcedefender module before you attempt to use your encrypted code.\n\n## Can I still run Python from the command-line?\n\nYes, you can still run scripts from the command-line, but you need to run the sourcedefender library module, and include your encrypted file name as the first argument:\n\n    $ python3 -m sourcedefender /home/ubuntu/helloworld.pye\n    Hello World!\n    $\n\nOr access the module via the usual import system:\n\n    $ cd /home/ubuntu\n    $ ls\n    helloworld.pye\n    $ python3\n    >>>\n    >>> import sourcedefender\n    >>> import helloworld\n    Hello World!\n    >>> exit()\n    $\n\n\n## Legal\n\nCopyright (c) 2018-2019 SOURCEdefender. All rights reserved.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. REVERSE ENGINEERING IS STRICTLY PROHIBITED.\n\n<!-- URLs -->\n\n[python-url]: https://www.python.org\n[pepy-url]: https://pepy.tech/project/sourcedefender\n[pypi-url]: https://pypi.org/project/sourcedefender", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "encryption source aes", "license": "", "maintainer": "", "maintainer_email": "", "name": "sourcedefender", "package_url": "https://pypi.org/project/sourcedefender/", "platform": "", "project_url": "https://pypi.org/project/sourcedefender/", "project_urls": null, "release_url": "https://pypi.org/project/sourcedefender/5.0.12/", "requires_dist": null, "requires_python": "!=2.*,>=3.6", "summary": "Advanced encryption protecting your python codebase.", "version": "5.0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"SOURCEdefender - advanced encryption protecting your Python codebase\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90af1141e5a0af9c337a8dc409c899cbd739d6b1/68747470733a2f2f696d616765732e736f75726365646566656e6465722e636f2e756b2f6c6f676f2e706e67\"></p>\n<hr>\n<p><a href=\"https://www.python.org\" rel=\"nofollow\"><img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3e9be5e9a15b719fd9cfa9632abcafa54898b9c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f736f75726365646566656e6465722e7376673f6c6f676f3d707974686f6e266c6f676f436f6c6f723d66656437343926636f6c6f72423d333737306130266c6162656c3d\"></a>\n<a href=\"https://pepy.tech/project/sourcedefender\" rel=\"nofollow\"><img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3e5186c5af3971637f92b6f1b1183c7e2277370/68747470733a2f2f706570792e746563682f62616467652f736f75726365646566656e646572\"></a>\n<a href=\"https://pepy.tech/project/sourcedefender\" rel=\"nofollow\"><img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cdd03c39bfe4f7baf2c2b3f51002b61bb6066b00/68747470733a2f2f706570792e746563682f62616467652f736f75726365646566656e6465722f7765656b\"></a></p>\n<p>SOURCEdefender can protect your plaintext Python source code with AES 256-bit Encryption. There is no impact on the performance of your running application as the decryption process takes place during the import of your module or when loading your script on the command-line. Encrypted code won't run any slower once loaded from a <em>.pye</em> file compared to loading from a <em>.py</em> or <em>.pyc</em> file.</p>\n<p>As we hook directly into the import process there are no cross platform or Python version compatibility issues. Encrypted code will run on the <em>ANY</em> target environment we support. Obviously your code needs to be written with the target platform in mind, we can't automagically make <strong>sys.getwindowsversion()</strong> work on Linux.</p>\n<h1>Features</h1>\n<ul>\n<li>Code encrypted with AES 256-bit encryption.</li>\n<li>Encrypted code will run on <strong>ANY</strong> supported environment.</li>\n<li>Enforced expire time on encrypted code (optional).</li>\n</ul>\n<h1>Supported Environments</h1>\n<table>\n<thead>\n<tr>\n<th>Architecture</th>\n<th>Operating System</th>\n<th>Python 3.6</th>\n<th>Python 3.7</th>\n<th>Python 3.8</th>\n<th>Python 3.9-dev</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x86_64</td>\n<td>Windows 10</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>x86_64</td>\n<td>Linux</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>x86_64</td>\n<td>macOS</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ARMv7</td>\n<td>Linux</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr></tbody></table>\n<ul>\n<li>Note: We have had to drop support for 3.9-dev in this release as upstream are having issues with the latest Cython pip package.</li>\n</ul>\n<h1>Usage</h1>\n<h2>How do I protect my Python source code?</h2>\n<p>Let's have a look at an example of the encryption process:</p>\n<pre><code>$ cat /home/ubuntu/helloworld.py\nprint(\"Hello World!\")\n</code></pre>\n<p>This is a very basic example and produces the following output:</p>\n<pre><code>$ python3 /home/ubuntu/helloworld.py\nHello World!\n</code></pre>\n<p>We do not want anyone to get at our source code and we also don't want anyone to run this code after 1 day. When we encrypt the file we can enforce an expire time of 1 day from now with the <strong>--ttl</strong> option as follows:</p>\n<pre><code>$ sourcedefender encrypt --ttl=1d /home/ubuntu/helloworld.py\nSOURCEdefender v5.0.12\n\nProcessing:\n\n/home/ubuntu/helloworld.py\n</code></pre>\n<p>Now the file is encrypted, its contents are as follows:</p>\n<pre><code>$ cat /home/ubuntu/helloworld.pye\n-----BEGIN SOURCEDEFENDER FILE-----\nVersion : 5.0.12\n\nKkVjZjNWRV4rZvmUFhXBQhPwlR6wUWASZO/Gnh8sJKzpW7c3D8TRbLfNXn01Q182QigxeW1tagq1\nc8A0WiWh5wa2k7YCd4oNugSqv/FABal7Wh1vDsVh7rPXFcamQhfqU1kv5CtmN/2G1EqRUy2PGu+p\ncamVzPjFXmFkQ21+fj80MUg0Z1oG3PniOXCJ0V/Qu3/Bw0Fic0BZTGxjTm4=\n\n------END SOURCEDEFENDER FILE------\n</code></pre>\n<p>Once a file has been encrypted, its extension is changed <strong>.py</strong>  to <strong>.pye</strong>, this is so the module knows its encrypted and can process it accordingly during import. All you need to remember is to inlcude <strong>sourcedefender</strong> as a dependency while packaging your project and import the sourcedefender module before you attempt to use your encrypted code.</p>\n<h2>Can I still run Python from the command-line?</h2>\n<p>Yes, you can still run scripts from the command-line, but you need to run the sourcedefender library module, and include your encrypted file name as the first argument:</p>\n<pre><code>$ python3 -m sourcedefender /home/ubuntu/helloworld.pye\nHello World!\n$\n</code></pre>\n<p>Or access the module via the usual import system:</p>\n<pre><code>$ cd /home/ubuntu\n$ ls\nhelloworld.pye\n$ python3\n&gt;&gt;&gt;\n&gt;&gt;&gt; import sourcedefender\n&gt;&gt;&gt; import helloworld\nHello World!\n&gt;&gt;&gt; exit()\n$\n</code></pre>\n<h2>Legal</h2>\n<p>Copyright (c) 2018-2019 SOURCEdefender. All rights reserved.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. REVERSE ENGINEERING IS STRICTLY PROHIBITED.</p>\n\n\n          </div>"}, "last_serial": 6659608, "releases": {"5.0.12": [{"comment_text": "", "digests": {"md5": "1a4c8d2ec92d679430d6f47584245b11", "sha256": "b687e63fe7fee737f29b793f63b84103763d01f128a3b60fc8c34c36207cb48b"}, "downloads": -1, "filename": "sourcedefender-5.0.12.tar.gz", "has_sig": false, "md5_digest": "1a4c8d2ec92d679430d6f47584245b11", "packagetype": "sdist", "python_version": "source", "requires_python": "!=2.*,>=3.6", "size": 2545075, "upload_time": "2020-02-19T09:40:22", "upload_time_iso_8601": "2020-02-19T09:40:22.343076Z", "url": "https://files.pythonhosted.org/packages/0c/9d/a60871726e0c674d0fd4edf0f1cde613483981ca406532cc0fd4e5f5ec0f/sourcedefender-5.0.12.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a4c8d2ec92d679430d6f47584245b11", "sha256": "b687e63fe7fee737f29b793f63b84103763d01f128a3b60fc8c34c36207cb48b"}, "downloads": -1, "filename": "sourcedefender-5.0.12.tar.gz", "has_sig": false, "md5_digest": "1a4c8d2ec92d679430d6f47584245b11", "packagetype": "sdist", "python_version": "source", "requires_python": "!=2.*,>=3.6", "size": 2545075, "upload_time": "2020-02-19T09:40:22", "upload_time_iso_8601": "2020-02-19T09:40:22.343076Z", "url": "https://files.pythonhosted.org/packages/0c/9d/a60871726e0c674d0fd4edf0f1cde613483981ca406532cc0fd4e5f5ec0f/sourcedefender-5.0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:18 2020"}