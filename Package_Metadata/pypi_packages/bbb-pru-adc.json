{"info": {"author": "Mike Kroutikov", "author_email": "pgmmpk@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Streaming ADC capture on BeagleBone (Black) with PRU\n[![PyPI version](https://badge.fury.io/py/bbb-pru-adc.svg)](https://badge.fury.io/py/bbb-pru-adc)\n\nProvides PRU firmware that captures up to 8 ADC channels, and userspace driver\nto receive this as a stream of buffers containing voltage readings from ADC.\n\nPython is the most convenient way of using it. Lower-level API can be also accessed via\ndynamic library, if needed.\n\nFeatures:\n- configurable capture speed. Highest speed is around 15KHz.\n- configurable number of samples to average over (important to get less noise)\n- configurable set of AIN pins to capture. From just one AIN channel and up to 8 AIN channels\n- reports dropped readings (when userspace client is not fast enough to process incoming\n  buffers data is dropped to avoid buffer overflow)\n- uses just 15-20% CPU, leaving plenty of cycles to actually deal with the data\n- no dependencies\n\n## Requirements\n\n1. Hardware: BeagleBone (Black), With remoteproc (not UIO) enabled in `/boot/uEnv.txt`\n2. OS: Debian GNU/Linux 10 (buster), see https://rcn-ee.com/rootfs/bb.org/testing/2019-12-10/buster-iot/ Or Debian GNU/Linux 9.8 (the latter may need to be re-configured to use remoteproc)\n3. Python 3.5 or better\n4. Root access rights (needed to install firmware into `/lib/firmware` folder and access sysfs)\n\nPlease note that (depending on your environment) you may need root priviledges to run this code.\n\n## Installation\n\nWe recommend installing into virtual environment\n```bash\npython3 -m venv .venv\n. .venv/bin/activate\npip install bbb_pru_adc\n```\n\n## Running sample code\n```bash\npython3 -m bbb_pru_adc.main\n```\n\nHere is the the code of the `main.py` - an example how to use this driver in Python:\n```python\nimport time\nimport itertools\nfrom bbb_pru_adc.capture import capture\n\nbad = 0\ngood = 0\nwith capture([0, 1, 2, 3, 4 ,5 ,6 ,7], auto_install=True, clk_div=1) as cap:\n    start = time.time()\n    for num_dropped, timestamps, values in itertools.islice(cap, 0, 1000):\n        bad += num_dropped\n        good += len(timestamps)\n\nelapsed = time.time() - start\nprint('Elapsed:', elapsed, bad, good)\nprint('KHz:', round((bad + good) / elapsed / 1000, 3))\n```\n\n## More samples\n\nMore code examples can be found in [examples](examples/) folder.\n\n## Building from sources\nThis step is **not needed** if you installed wheel from PyPI as described above. You need this only\nif you plan to make changes in firmware or driver.\n\n```bash\ngit clone https://github.com/pgmmpk/bbb_pru_adc.git\ncd bbb_pru_adc/\nmake clean\nmake\npython3 -m bbb_pru_adc.main\n```\n\n## Building Python wheel from sources (for PyPi)\n```\npython3 -m venv .venv\n. .venv/bin/activate\npip install wheel twine\npython3 setup.py bdist_wheel --plat linux_armv7l\n```\n\n## Stream structure\nEach incoming buffer contains three pieces of information:\n1. `num_dropped` - the number of dropped readings before this buffer was filled (i.e. between \n    readings from previous buffer and this buffer there was a gap). Under normal conditions\n    this value is zero. It can not grow beyond `0xffff`. Thus, if you are unlucky enough to\n    receive `0xffff`, it basically means that at least that many readings were dropped (and\n    probably more).\n2. `values` - array of readings, packed in the channel-first order. It is an `array.array` object\n    with elements of `float` type. Length is `num_readings * num_channels`. Values vary between\n    0.0 and 1.8 (volts).\n3. `timestamps` - array of relative timestamps, corresponding to the readings. It is an `array.array`\n    object with elements of `unsigned int` type.\n    Length of this array is `num_readings`. Value is the number of PRU clock ticks\n    since the last reading. These values allow one to know exact timing between two readings. Time\n    distance between readings is fairly stable, small deviations are due to varying codepaths to\n    process outgoing and incoming messages. PRU clock runs at 200MHz (5ns per tick). Thus, the \n    timestamp value of 1000 corresponds to 5 millisecons, value of 200000 corresponds to 1kHz, etc.\n\n\nHow many readings do we have per buffer? This depends on the number of channels we capture.\nExact answer is:\n\n```python\nnum_readings = (512 - 16 - 4) // (4 + 2 * num_readings)\n```\n\nThis formula is mandated by remoteproc IO buffer size limit (defined as 512 at kernel compile time).\n\nFor a given capture session number of readings per buffer stays the same.\n\nNote that driver has `max_num` parameter that allows one to make `num_readings` smaller than the\nmaximum allowed by the IO buffer size. This is an advanced functionality that may be used to\nachieve specific goals (e.g. lower latency or get exact number of readings per buffer). In most\napplications, this parameter should not be used.\n\n## Capture API\n```python\nfrom bbb_pru_adc.capture import capture\n\nwith capture(clk_div=0, step_avg=3, channels=[3, 5, 7], auto_install=False) as cap:\n    for num_dropped, timestamps, values in cap:\n        # do something with this information\n```\nThis example starts capturing ADC inputs AIN3, AIN5, and AIN7 (`channels=[3, 5, 7]`) \nat full speed (`speed=0`). It will not attempt to\ninstall PRU firmware (`auto_install=False`).\nIf driver detects that system firmware is missing or obsolete, an error will be thrown.\n\nCapture has to be used as a context manager. The context is a generator spitting out\nthe pieces of our buffer.\n\nCapture parameters:\n\n`clk_div` - ADC clock divider value. Fastest is `clk_div=0`, capturing at about 15KHz. In many applications 15KHz is just too much data (hard to process), and `clk_div` can be set to other\nvalues. For example, setting `clk_div=9` will capture 10 times slower (at about 1.5KHz).\n\n`step_avg` - How many capture steps to avegare for one sample. Default value is `4`, meaning\naveraging over 16 steps. It produces the least amount of noise. Setting to values less than 2\nis not recommended, because of the increasing noise in the values. Note that this value affects\ncapture speed. Higest capture speed of 15kHz is only possible without averaging. Highest\ncapture frequency with the recommended `step_avg` setting of 4 is about 7kHz.\n\n`channels` - which AIN pins (aka channels) to capture. This is a list of 1 to 8 unique values, \nrepresenting the AIN pins to read. Note that values in the output buffer are layed out in the\nsame order as `channels`.\n\n`max_num` - limits the number of readings per buffer. This is advanced functionality, see the section\nbelow. Deafult is 0 that disables this limit.\n\n`target_delay` - target number of PRU cycles (5ns per cycle) per capture. This allows one to fine-tune\nthe capture speed. This is an advanced functionality, see the section below. Default is 0 which\ndisables this functionality.\n\n`auto_install` - if we detect that firmware is not installed, or is different, attempt to re-install by copying firmware file from python package resources to `/lib/firmware`. This action requires root priveleges. Once installed, you can use the driver as a non-root user.\n\nImportant! `timestamps` and `values` returned by the generator are re-used and content will be\noverwritten on next iteration. Do not store these buffers. If you are not processing data immediately,\ncopy them out.\n\n### Advanced use: `target_delay`\nNormally, the time between two ADC captures is determined by the following factors:\n1. ADC capture speed (see `speed` parameter)\n2. Time needed to process and send out the data\nThis time can slightly vary, because number of operations depends on buffering state and other\nfactors pertaining to PRU/CPU communication.\n\nActual number of cycles is reported in the `timestamps` array.\n\nThe `target_delay` parameter sets the minimal number of PRU cycles. PRU will idle until the specified\nnumber of PRU timesteps is reached. This allows one to:\na. Remove timestamp jitters\nb. Fine-tune the capture speed to any desirable number (limited by the overall capture speed - around 16kHz)\n\nTo target a specific capture frequence, do the following:\n* choose `speed` parameter to find the largest value that produces capture frequence just above\n  the desired one, then\n* compute the target number of PRU cycles for the desired frequency and set `target_delay` to that\n  value. Remember that PRU runs at 200MHz clock and one cycle takes 5ns.\n* measure the actual capture frequency\n* if it deviates from the desired one, change `target_delay` a bit to adjust. If actual frequency\n  is lower than desired, lower `target_dealy` value. If actual frequency is higher than desired,\n  increase the `target_delay` value.\n\nThis should allow one to get very precise capture frequency.\n\n### Advanced use: `max_num`\nNormally, driver will use all available space in the communication buffer (512-16 bytes). Buffer\nsize is determined by the `remoteproc` kernel module. Using all available buffer space\nminimizes bandwidth loss due to the control information (attached to each buffer sent), and thus\nminimizes the chance of data loss. In short, if you want the most efficient data transfer, do not\nchange this value.\n\nSomethimes, you may want to use smaller buffers. For example, to ensure lower latency (at the cost\nof getting less efficient comunication). You can do this by setting `max_num`.\n\nThe `max_num` parameter ensures that no more than that many ADC readings will be packed per buffer.\nIf you set it to a high value, the real limit will be the communication buffer size and parameter\nwill be effectively ignored.\n\n## Internals\n\nThere are three pieces of software:\n1. firmware running on PRU side `bbb_pru_adc/resources/am335x-pru0.fw`, built from \n   `src/firmware.c`, `src/firmware.h`, and `src/common.h`.\n2. CPU-side userspace driver that handles low-level details of communication with PRU\n   `bbb_pru_adc/resources/libdriver.so`, built from `src/driver.c`, `src/driver.h`, and `src/common.h`\n3. Python code that is responsible for installing the firmware and starting and terminating\n   the PRU processor.\n\n### Firmware\nOverall logic is this:\n1. Initialize `remoteproc` communication subsystem (this creates character device `/dev/rpmsg-pru30`)\n2. Initialize array of 8 ring buffers that we will use for data exchange with CPU\n3. Enter main loop, where we:\n    a. wait for incoming `START` command with parameters `speed`, `channels`, `max-num`, and\n       `target_delay`. When received,\n       we initialize ADC for the given channels and capture speed and start capturing.\n    b. if `STOP` command arrives from CPU side while we are capturing, we stop the ADC capture\n    c. if `ACK` command arrives from CPU, we release one ring buffer (CPU sends this command\n       to acknowledge data receipt)\n    d. when one ADC capture completes, we push the readings to the ring buffer. If ring buffer is\n       full, we send it out to the CPU side and try to get a new ring buffer. When CPU side\n       is slow, we may run out of buffers. Then we will drop the reading. After pushing\n       the readings to the ring buffer we schedule another ADC capture.\n\n### Driver\nOn the CPU side we do this:\n1. `driver_start` method opens `/dev/rpmsg-pru30` device and writes a message there\n   with `command=START`, and `speed`, `channels`, `max_num`, and `target_delay` values\n   to ask PRU to start ADC capture\n2. `driver_read` method reads device file, blocking until a message arrives. It then sends\n   out the `ACK` command, and unpacks the data from received buffer into the caller's buffers.\n3. `driver_stop` sends `STOP` command to the PRU\n\n### Python side\nPython code in `bbb_pru_adc/capture.py` does this:\n1. loads the driver library\n2. loads (installing if needed) the firmware into PRU, starts PRU\n3. waits till `/dev/rpmgs-pru30` device is created\n4. calls `driver_start` to initiate capture\n5. in a loop receives captured data by calling `driver_read`\n6. when finished, calls `driver_stop` and stops PRU\n\n## Links\n1. https://github.com/MarkAYoder/PRUCookbook.git\n2. https://markayoder.github.io/PRUCookbook/\n3. https://github.com/derekmolloy/exploringBB\n4. http://exploringbeaglebone.com/\n5. http://theduchy.ualr.edu/?p=289\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pgmmpk/bbb_pru_adc", "keywords": "beaglebone black adc pru", "license": "", "maintainer": "", "maintainer_email": "", "name": "bbb-pru-adc", "package_url": "https://pypi.org/project/bbb-pru-adc/", "platform": "", "project_url": "https://pypi.org/project/bbb-pru-adc/", "project_urls": {"Homepage": "https://github.com/pgmmpk/bbb_pru_adc"}, "release_url": "https://pypi.org/project/bbb-pru-adc/1.3.1/", "requires_dist": null, "requires_python": ">=3.5, <4", "summary": "Streaming capture of ADC on BeagleBone (Black)", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Streaming ADC capture on BeagleBone (Black) with PRU</h1>\n<p><a href=\"https://badge.fury.io/py/bbb-pru-adc\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ea74e0ede56a0e82efef384a1b14c9c23bdf415/68747470733a2f2f62616467652e667572792e696f2f70792f6262622d7072752d6164632e737667\"></a></p>\n<p>Provides PRU firmware that captures up to 8 ADC channels, and userspace driver\nto receive this as a stream of buffers containing voltage readings from ADC.</p>\n<p>Python is the most convenient way of using it. Lower-level API can be also accessed via\ndynamic library, if needed.</p>\n<p>Features:</p>\n<ul>\n<li>configurable capture speed. Highest speed is around 15KHz.</li>\n<li>configurable number of samples to average over (important to get less noise)</li>\n<li>configurable set of AIN pins to capture. From just one AIN channel and up to 8 AIN channels</li>\n<li>reports dropped readings (when userspace client is not fast enough to process incoming\nbuffers data is dropped to avoid buffer overflow)</li>\n<li>uses just 15-20% CPU, leaving plenty of cycles to actually deal with the data</li>\n<li>no dependencies</li>\n</ul>\n<h2>Requirements</h2>\n<ol>\n<li>Hardware: BeagleBone (Black), With remoteproc (not UIO) enabled in <code>/boot/uEnv.txt</code></li>\n<li>OS: Debian GNU/Linux 10 (buster), see <a href=\"https://rcn-ee.com/rootfs/bb.org/testing/2019-12-10/buster-iot/\" rel=\"nofollow\">https://rcn-ee.com/rootfs/bb.org/testing/2019-12-10/buster-iot/</a> Or Debian GNU/Linux 9.8 (the latter may need to be re-configured to use remoteproc)</li>\n<li>Python 3.5 or better</li>\n<li>Root access rights (needed to install firmware into <code>/lib/firmware</code> folder and access sysfs)</li>\n</ol>\n<p>Please note that (depending on your environment) you may need root priviledges to run this code.</p>\n<h2>Installation</h2>\n<p>We recommend installing into virtual environment</p>\n<pre>python3 -m venv .venv\n. .venv/bin/activate\npip install bbb_pru_adc\n</pre>\n<h2>Running sample code</h2>\n<pre>python3 -m bbb_pru_adc.main\n</pre>\n<p>Here is the the code of the <code>main.py</code> - an example how to use this driver in Python:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bbb_pru_adc.capture</span> <span class=\"kn\">import</span> <span class=\"n\">capture</span>\n\n<span class=\"n\">bad</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">good</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">capture</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"p\">,</span><span class=\"mi\">5</span> <span class=\"p\">,</span><span class=\"mi\">6</span> <span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">auto_install</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">clk_div</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cap</span><span class=\"p\">:</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">num_dropped</span><span class=\"p\">,</span> <span class=\"n\">timestamps</span><span class=\"p\">,</span> <span class=\"n\">values</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">cap</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">):</span>\n        <span class=\"n\">bad</span> <span class=\"o\">+=</span> <span class=\"n\">num_dropped</span>\n        <span class=\"n\">good</span> <span class=\"o\">+=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">timestamps</span><span class=\"p\">)</span>\n\n<span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Elapsed:'</span><span class=\"p\">,</span> <span class=\"n\">elapsed</span><span class=\"p\">,</span> <span class=\"n\">bad</span><span class=\"p\">,</span> <span class=\"n\">good</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'KHz:'</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">((</span><span class=\"n\">bad</span> <span class=\"o\">+</span> <span class=\"n\">good</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">elapsed</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</pre>\n<h2>More samples</h2>\n<p>More code examples can be found in <a href=\"examples/\" rel=\"nofollow\">examples</a> folder.</p>\n<h2>Building from sources</h2>\n<p>This step is <strong>not needed</strong> if you installed wheel from PyPI as described above. You need this only\nif you plan to make changes in firmware or driver.</p>\n<pre>git clone https://github.com/pgmmpk/bbb_pru_adc.git\n<span class=\"nb\">cd</span> bbb_pru_adc/\nmake clean\nmake\npython3 -m bbb_pru_adc.main\n</pre>\n<h2>Building Python wheel from sources (for PyPi)</h2>\n<pre><code>python3 -m venv .venv\n. .venv/bin/activate\npip install wheel twine\npython3 setup.py bdist_wheel --plat linux_armv7l\n</code></pre>\n<h2>Stream structure</h2>\n<p>Each incoming buffer contains three pieces of information:</p>\n<ol>\n<li><code>num_dropped</code> - the number of dropped readings before this buffer was filled (i.e. between\nreadings from previous buffer and this buffer there was a gap). Under normal conditions\nthis value is zero. It can not grow beyond <code>0xffff</code>. Thus, if you are unlucky enough to\nreceive <code>0xffff</code>, it basically means that at least that many readings were dropped (and\nprobably more).</li>\n<li><code>values</code> - array of readings, packed in the channel-first order. It is an <code>array.array</code> object\nwith elements of <code>float</code> type. Length is <code>num_readings * num_channels</code>. Values vary between\n0.0 and 1.8 (volts).</li>\n<li><code>timestamps</code> - array of relative timestamps, corresponding to the readings. It is an <code>array.array</code>\nobject with elements of <code>unsigned int</code> type.\nLength of this array is <code>num_readings</code>. Value is the number of PRU clock ticks\nsince the last reading. These values allow one to know exact timing between two readings. Time\ndistance between readings is fairly stable, small deviations are due to varying codepaths to\nprocess outgoing and incoming messages. PRU clock runs at 200MHz (5ns per tick). Thus, the\ntimestamp value of 1000 corresponds to 5 millisecons, value of 200000 corresponds to 1kHz, etc.</li>\n</ol>\n<p>How many readings do we have per buffer? This depends on the number of channels we capture.\nExact answer is:</p>\n<pre><span class=\"n\">num_readings</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">512</span> <span class=\"o\">-</span> <span class=\"mi\">16</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">num_readings</span><span class=\"p\">)</span>\n</pre>\n<p>This formula is mandated by remoteproc IO buffer size limit (defined as 512 at kernel compile time).</p>\n<p>For a given capture session number of readings per buffer stays the same.</p>\n<p>Note that driver has <code>max_num</code> parameter that allows one to make <code>num_readings</code> smaller than the\nmaximum allowed by the IO buffer size. This is an advanced functionality that may be used to\nachieve specific goals (e.g. lower latency or get exact number of readings per buffer). In most\napplications, this parameter should not be used.</p>\n<h2>Capture API</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bbb_pru_adc.capture</span> <span class=\"kn\">import</span> <span class=\"n\">capture</span>\n\n<span class=\"k\">with</span> <span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"n\">clk_div</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">step_avg</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">auto_install</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cap</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">num_dropped</span><span class=\"p\">,</span> <span class=\"n\">timestamps</span><span class=\"p\">,</span> <span class=\"n\">values</span> <span class=\"ow\">in</span> <span class=\"n\">cap</span><span class=\"p\">:</span>\n        <span class=\"c1\"># do something with this information</span>\n</pre>\n<p>This example starts capturing ADC inputs AIN3, AIN5, and AIN7 (<code>channels=[3, 5, 7]</code>)\nat full speed (<code>speed=0</code>). It will not attempt to\ninstall PRU firmware (<code>auto_install=False</code>).\nIf driver detects that system firmware is missing or obsolete, an error will be thrown.</p>\n<p>Capture has to be used as a context manager. The context is a generator spitting out\nthe pieces of our buffer.</p>\n<p>Capture parameters:</p>\n<p><code>clk_div</code> - ADC clock divider value. Fastest is <code>clk_div=0</code>, capturing at about 15KHz. In many applications 15KHz is just too much data (hard to process), and <code>clk_div</code> can be set to other\nvalues. For example, setting <code>clk_div=9</code> will capture 10 times slower (at about 1.5KHz).</p>\n<p><code>step_avg</code> - How many capture steps to avegare for one sample. Default value is <code>4</code>, meaning\naveraging over 16 steps. It produces the least amount of noise. Setting to values less than 2\nis not recommended, because of the increasing noise in the values. Note that this value affects\ncapture speed. Higest capture speed of 15kHz is only possible without averaging. Highest\ncapture frequency with the recommended <code>step_avg</code> setting of 4 is about 7kHz.</p>\n<p><code>channels</code> - which AIN pins (aka channels) to capture. This is a list of 1 to 8 unique values,\nrepresenting the AIN pins to read. Note that values in the output buffer are layed out in the\nsame order as <code>channels</code>.</p>\n<p><code>max_num</code> - limits the number of readings per buffer. This is advanced functionality, see the section\nbelow. Deafult is 0 that disables this limit.</p>\n<p><code>target_delay</code> - target number of PRU cycles (5ns per cycle) per capture. This allows one to fine-tune\nthe capture speed. This is an advanced functionality, see the section below. Default is 0 which\ndisables this functionality.</p>\n<p><code>auto_install</code> - if we detect that firmware is not installed, or is different, attempt to re-install by copying firmware file from python package resources to <code>/lib/firmware</code>. This action requires root priveleges. Once installed, you can use the driver as a non-root user.</p>\n<p>Important! <code>timestamps</code> and <code>values</code> returned by the generator are re-used and content will be\noverwritten on next iteration. Do not store these buffers. If you are not processing data immediately,\ncopy them out.</p>\n<h3>Advanced use: <code>target_delay</code></h3>\n<p>Normally, the time between two ADC captures is determined by the following factors:</p>\n<ol>\n<li>ADC capture speed (see <code>speed</code> parameter)</li>\n<li>Time needed to process and send out the data\nThis time can slightly vary, because number of operations depends on buffering state and other\nfactors pertaining to PRU/CPU communication.</li>\n</ol>\n<p>Actual number of cycles is reported in the <code>timestamps</code> array.</p>\n<p>The <code>target_delay</code> parameter sets the minimal number of PRU cycles. PRU will idle until the specified\nnumber of PRU timesteps is reached. This allows one to:\na. Remove timestamp jitters\nb. Fine-tune the capture speed to any desirable number (limited by the overall capture speed - around 16kHz)</p>\n<p>To target a specific capture frequence, do the following:</p>\n<ul>\n<li>choose <code>speed</code> parameter to find the largest value that produces capture frequence just above\nthe desired one, then</li>\n<li>compute the target number of PRU cycles for the desired frequency and set <code>target_delay</code> to that\nvalue. Remember that PRU runs at 200MHz clock and one cycle takes 5ns.</li>\n<li>measure the actual capture frequency</li>\n<li>if it deviates from the desired one, change <code>target_delay</code> a bit to adjust. If actual frequency\nis lower than desired, lower <code>target_dealy</code> value. If actual frequency is higher than desired,\nincrease the <code>target_delay</code> value.</li>\n</ul>\n<p>This should allow one to get very precise capture frequency.</p>\n<h3>Advanced use: <code>max_num</code></h3>\n<p>Normally, driver will use all available space in the communication buffer (512-16 bytes). Buffer\nsize is determined by the <code>remoteproc</code> kernel module. Using all available buffer space\nminimizes bandwidth loss due to the control information (attached to each buffer sent), and thus\nminimizes the chance of data loss. In short, if you want the most efficient data transfer, do not\nchange this value.</p>\n<p>Somethimes, you may want to use smaller buffers. For example, to ensure lower latency (at the cost\nof getting less efficient comunication). You can do this by setting <code>max_num</code>.</p>\n<p>The <code>max_num</code> parameter ensures that no more than that many ADC readings will be packed per buffer.\nIf you set it to a high value, the real limit will be the communication buffer size and parameter\nwill be effectively ignored.</p>\n<h2>Internals</h2>\n<p>There are three pieces of software:</p>\n<ol>\n<li>firmware running on PRU side <code>bbb_pru_adc/resources/am335x-pru0.fw</code>, built from\n<code>src/firmware.c</code>, <code>src/firmware.h</code>, and <code>src/common.h</code>.</li>\n<li>CPU-side userspace driver that handles low-level details of communication with PRU\n<code>bbb_pru_adc/resources/libdriver.so</code>, built from <code>src/driver.c</code>, <code>src/driver.h</code>, and <code>src/common.h</code></li>\n<li>Python code that is responsible for installing the firmware and starting and terminating\nthe PRU processor.</li>\n</ol>\n<h3>Firmware</h3>\n<p>Overall logic is this:</p>\n<ol>\n<li>Initialize <code>remoteproc</code> communication subsystem (this creates character device <code>/dev/rpmsg-pru30</code>)</li>\n<li>Initialize array of 8 ring buffers that we will use for data exchange with CPU</li>\n<li>Enter main loop, where we:\na. wait for incoming <code>START</code> command with parameters <code>speed</code>, <code>channels</code>, <code>max-num</code>, and\n<code>target_delay</code>. When received,\nwe initialize ADC for the given channels and capture speed and start capturing.\nb. if <code>STOP</code> command arrives from CPU side while we are capturing, we stop the ADC capture\nc. if <code>ACK</code> command arrives from CPU, we release one ring buffer (CPU sends this command\nto acknowledge data receipt)\nd. when one ADC capture completes, we push the readings to the ring buffer. If ring buffer is\nfull, we send it out to the CPU side and try to get a new ring buffer. When CPU side\nis slow, we may run out of buffers. Then we will drop the reading. After pushing\nthe readings to the ring buffer we schedule another ADC capture.</li>\n</ol>\n<h3>Driver</h3>\n<p>On the CPU side we do this:</p>\n<ol>\n<li><code>driver_start</code> method opens <code>/dev/rpmsg-pru30</code> device and writes a message there\nwith <code>command=START</code>, and <code>speed</code>, <code>channels</code>, <code>max_num</code>, and <code>target_delay</code> values\nto ask PRU to start ADC capture</li>\n<li><code>driver_read</code> method reads device file, blocking until a message arrives. It then sends\nout the <code>ACK</code> command, and unpacks the data from received buffer into the caller's buffers.</li>\n<li><code>driver_stop</code> sends <code>STOP</code> command to the PRU</li>\n</ol>\n<h3>Python side</h3>\n<p>Python code in <code>bbb_pru_adc/capture.py</code> does this:</p>\n<ol>\n<li>loads the driver library</li>\n<li>loads (installing if needed) the firmware into PRU, starts PRU</li>\n<li>waits till <code>/dev/rpmgs-pru30</code> device is created</li>\n<li>calls <code>driver_start</code> to initiate capture</li>\n<li>in a loop receives captured data by calling <code>driver_read</code></li>\n<li>when finished, calls <code>driver_stop</code> and stops PRU</li>\n</ol>\n<h2>Links</h2>\n<ol>\n<li><a href=\"https://github.com/MarkAYoder/PRUCookbook.git\" rel=\"nofollow\">https://github.com/MarkAYoder/PRUCookbook.git</a></li>\n<li><a href=\"https://markayoder.github.io/PRUCookbook/\" rel=\"nofollow\">https://markayoder.github.io/PRUCookbook/</a></li>\n<li><a href=\"https://github.com/derekmolloy/exploringBB\" rel=\"nofollow\">https://github.com/derekmolloy/exploringBB</a></li>\n<li><a href=\"http://exploringbeaglebone.com/\" rel=\"nofollow\">http://exploringbeaglebone.com/</a></li>\n<li><a href=\"http://theduchy.ualr.edu/?p=289\" rel=\"nofollow\">http://theduchy.ualr.edu/?p=289</a></li>\n</ol>\n\n          </div>"}, "last_serial": 6460265, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b803055fc1d0fce62ac1ab0ca5cd8ab8", "sha256": "7bbacb6d29d6d3d492c8794a70506560e487025006889db093fae4bbc5a4b9bd"}, "downloads": -1, "filename": "bbb_pru_adc-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b803055fc1d0fce62ac1ab0ca5cd8ab8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7, <4", "size": 55029, "upload_time": "2019-12-25T13:29:10", "upload_time_iso_8601": "2019-12-25T13:29:10.528716Z", "url": "https://files.pythonhosted.org/packages/c1/86/9d71b4d28064c3448e36bdb59143f5f523943a61cda65853f16cc4cf5323/bbb_pru_adc-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "374ae5c6b7d89a7f6ad2ac4c20887587", "sha256": "70d5e89011eff4a801e2acab05cd1b928c537b5429827b7d831259f7fbc97890"}, "downloads": -1, "filename": "bbb_pru_adc-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "374ae5c6b7d89a7f6ad2ac4c20887587", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7, <4", "size": 56468, "upload_time": "2019-12-25T14:16:16", "upload_time_iso_8601": "2019-12-25T14:16:16.889436Z", "url": "https://files.pythonhosted.org/packages/d3/58/67afb02ef98e28d193bf1dad81c10911ecd65731672017b236412d3f4bdc/bbb_pru_adc-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "504e46bd1e778cd0ee3dd429006c3885", "sha256": "a80a44fb3ee6ce80a16187854022364b4a79eef30febdab3bd739e5a37ad7fa6"}, "downloads": -1, "filename": "bbb_pru_adc-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "504e46bd1e778cd0ee3dd429006c3885", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 56864, "upload_time": "2019-12-28T14:14:28", "upload_time_iso_8601": "2019-12-28T14:14:28.813651Z", "url": "https://files.pythonhosted.org/packages/86/3c/5e186b2c6b4c3e4ce50c75ba2e1be738b3cb9f5bf0224850c6b0ab93d923/bbb_pru_adc-1.0.2-py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bc9fa8e889f229ef642fbad92c878116", "sha256": "1e42fde01151edf551b20e1e770bf8d4295a2f9b9e809b520d6dc0b79d43a6fa"}, "downloads": -1, "filename": "bbb_pru_adc-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bc9fa8e889f229ef642fbad92c878116", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 56976, "upload_time": "2019-12-28T16:40:52", "upload_time_iso_8601": "2019-12-28T16:40:52.631703Z", "url": "https://files.pythonhosted.org/packages/bf/bd/4ec9e3ca27337f80f90152e189f8a08beffc448c1cd39228825d71403acf/bbb_pru_adc-1.0.3-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "9635bf61442303844f750647082159c4", "sha256": "66962a7dce9c0c0a8e324412de7cf73bafd8ae9c1a556c6c0430e34b8a30bd8c"}, "downloads": -1, "filename": "bbb_pru_adc-1.2.0-py3-none-linux_armv7l.whl", "has_sig": false, "md5_digest": "9635bf61442303844f750647082159c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 58537, "upload_time": "2020-01-12T13:01:04", "upload_time_iso_8601": "2020-01-12T13:01:04.072710Z", "url": "https://files.pythonhosted.org/packages/2d/3a/496123b530c298a0e34aaf531dbd8abe6188790e01683a5355f4a2b9cb2c/bbb_pru_adc-1.2.0-py3-none-linux_armv7l.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "fe324b4529076903ce5cf56c6aa690f8", "sha256": "7745a41a07ab016a5bc078ce821b6e24b06662180f9466b55bfb224561575d88"}, "downloads": -1, "filename": "bbb_pru_adc-1.3.0-py3-none-linux_armv7l.whl", "has_sig": false, "md5_digest": "fe324b4529076903ce5cf56c6aa690f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 59456, "upload_time": "2020-01-14T20:10:58", "upload_time_iso_8601": "2020-01-14T20:10:58.735761Z", "url": "https://files.pythonhosted.org/packages/39/3c/8efc078332109354e45e5768cf0097a6bb07dfb40825aacee0342bb1f5e7/bbb_pru_adc-1.3.0-py3-none-linux_armv7l.whl", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "0e324022991879c232e654a03ef6053f", "sha256": "b7305d942f03e45e42427c0e114285976866bc5e57e869e68c4853724399201e"}, "downloads": -1, "filename": "bbb_pru_adc-1.3.1-py3-none-linux_armv7l.whl", "has_sig": false, "md5_digest": "0e324022991879c232e654a03ef6053f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 59175, "upload_time": "2020-01-15T17:15:32", "upload_time_iso_8601": "2020-01-15T17:15:32.473060Z", "url": "https://files.pythonhosted.org/packages/75/6e/8573df1c2c93f6e8dca4345f3533f9cda367c5d188a7286ae0eeff2add10/bbb_pru_adc-1.3.1-py3-none-linux_armv7l.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e324022991879c232e654a03ef6053f", "sha256": "b7305d942f03e45e42427c0e114285976866bc5e57e869e68c4853724399201e"}, "downloads": -1, "filename": "bbb_pru_adc-1.3.1-py3-none-linux_armv7l.whl", "has_sig": false, "md5_digest": "0e324022991879c232e654a03ef6053f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 59175, "upload_time": "2020-01-15T17:15:32", "upload_time_iso_8601": "2020-01-15T17:15:32.473060Z", "url": "https://files.pythonhosted.org/packages/75/6e/8573df1c2c93f6e8dca4345f3533f9cda367c5d188a7286ae0eeff2add10/bbb_pru_adc-1.3.1-py3-none-linux_armv7l.whl", "yanked": false}], "timestamp": "Thu May  7 18:14:40 2020"}