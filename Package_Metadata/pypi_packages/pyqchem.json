{"info": {"author": "Abel Carreras", "author_email": "abelcarreras83@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python"], "description": "[![Build Status](https://travis-ci.com/abelcarreras/PyQchem.svg?branch=master)](https://travis-ci.com/abelcarreras/PyQchem)\n[![Coverage Status](https://coveralls.io/repos/github/abelcarreras/PyQchem/badge.svg?branch=development)](https://coveralls.io/github/abelcarreras/PyQchem?branch=development)\n[![PyPI version](https://badge.fury.io/py/pyqchem.svg)](https://badge.fury.io/py/pyqchem)\n\nPyQchem\n=======\nPython wrapper for Q-Chem (https://www.q-chem.com)\n\nMain features\n-------------\n- Easy to use clean python interface for Q-Chem\n- No special q-chem compilation needed (reads Q-Chem environment)\n- Output parser support\n\nInstallation instructions\n-------------------------\n1. Requirements\n\n- Python 2.7.x/3.5+\n- numpy\n- scipy\n- matplolib\n- wfnsympy\n- requests\n- lxml\n- wfnsympy (optional)\n\n2a. Manual installation \n\n```shell\npython setup.py install --user\n```\n\n2b. From pypi repository \n```shell\npip install pyqchem --user\n```\n\nExamples \n--------\n**Simple pythonic API to define your input**\n\n```python\nfrom pyqchem import Structure, QchemInput, get_output_from_qchem\nfrom pyqchem.parsers.basic import basic_parser_qchem\n\nmolecule = Structure(coordinates=[[0.0, 0.0, 0.0],\n                                  [0.0, 0.0, 0.9]],\n                     atomic_elements=['H', 'H'],\n                     charge=0,\n                     multiplicity=1)\n\nqc_input = QchemInput(molecule,\n                      jobtype='sp',\n                      exchange='hf',\n                      basis='6-31G')\n\ndata = get_output_from_qchem(qc_input,\n                             processors=4,\n                             parser=basic_parser_qchem)\n\n# obtain a python dictionary\nprint('Energy: ', data['scf energy'])\n```\n\n**Link calculations in powerful workflows**\n\n```python\nfrom pyqchem import QchemInput, get_output_from_qchem\nfrom pyqchem.parsers.parser_optimization import basic_optimization\nfrom pyqchem.parsers.parser_frequencies import basic_frequencies\n\nqc_input = QchemInput(molecule,\n                      jobtype='opt',\n                      exchange='hf',\n                      basis='sto-3g',\n                      geom_opt_tol_gradient=300,\n                      geom_opt_tol_energy=100,\n                      geom_opt_tol_displacement=1200)\n\nparsed_data, electronic_structure = get_output_from_qchem(qc_input,\n                                                          processors=4,\n                                                          parser=basic_optimization,\n                                                          read_fchk=True)\n\nqc_input = QchemInput(parsed_data['optimized_molecule'],\n                      jobtype='freq',\n                      exchange='hf',\n                      basis='sto-3g',\n                      scf_guess=electronic_structure['coefficients'])\n\nparsed_data = get_output_from_qchem(qc_input,\n                                    processors=4,\n                                    parser=basic_frequencies)\n\n\nfor mode, freq in enumerate(parsed_data['frequencies']):\n\n    force_constants = parsed_data['force_constants'][mode]\n\n    print('mode:                      {}'.format(mode+1))\n    print('frequency (cm-1):          {:10.2f}'.format(freq))\n    print('force constant (mdyne/A):  {:10.5f}\\n'.format(force_constants))\n\n```\n**Custom basis without pain**\n\n```python\nfrom pyqchem import QchemInput, Structure\nfrom pyqchem.basis import get_basis_from_ccRepo\n\n\nmolecule = Structure(coordinates=[[0.0, 0.0, 0.0000],\n                                  [0.0, 0.0, 1.5811]],\n                     atomic_elements=['Se', 'H'],\n                     charge=-1,\n                     multiplicity=1)\n\nbasis_custom = get_basis_from_ccRepo(molecule, 'cc-pVTZ')\n\nqc_input = QchemInput(molecule,\n                      jobtype='sp',\n                      exchange='hf',\n                      basis=basis_custom)\n\n```\n\n**Handle qchem errors like a pro!**\n\n\n```python\nfrom pyqchem import get_output_from_qchem\nfrom pyqchem.errors import OutputError, ParserError\nfrom pyqchem.parsers.parser_rasci import rasci as parser_rasci\n\ntry:\n    parsed_data = get_output_from_qchem(qc_input,\n                                        processors=4,\n                                        parser=parser_rasci,\n                                        )\n\nexcept OutputError as e:\n    print('Calculation ended with errors. Error lines:')\n    print(e.error_lines)\n    \n    # Try to parse your output anyway\n    try: \n        parsed_data = parser_rasci(e.full_output)\n    except ParserError:\n        print('Failed parsing')\n        exit()\n\n\nprint('Energy: ', parsed_data['scf energy'])\n```\n\nContact info\n------------\nAbel Carreras  \nabelcarreras83@gmail.com\n\nDonostia International Physics Center (DIPC)  \nDonostia-San Sebastian (Spain)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abelcarreras/PyQchem", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyqchem", "package_url": "https://pypi.org/project/pyqchem/", "platform": "", "project_url": "https://pypi.org/project/pyqchem/", "project_urls": {"Homepage": "https://github.com/abelcarreras/PyQchem"}, "release_url": "https://pypi.org/project/pyqchem/0.2.4/", "requires_dist": null, "requires_python": "", "summary": "Python wrapper for Q-Chem", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/abelcarreras/PyQchem\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/475eed1c2363c062d340c1a856bab8c629d5dcc4/68747470733a2f2f7472617669732d63692e636f6d2f6162656c63617272657261732f5079516368656d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/abelcarreras/PyQchem?branch=development\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f22e02cce4e1d2fb5c7dcfa95e689d4fa245f43/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6162656c63617272657261732f5079516368656d2f62616467652e7376673f6272616e63683d646576656c6f706d656e74\"></a>\n<a href=\"https://badge.fury.io/py/pyqchem\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c07b92cac73a05dd6a4320dc4ec651d64c92504f/68747470733a2f2f62616467652e667572792e696f2f70792f7079716368656d2e737667\"></a></p>\n<h1>PyQchem</h1>\n<p>Python wrapper for Q-Chem (<a href=\"https://www.q-chem.com\" rel=\"nofollow\">https://www.q-chem.com</a>)</p>\n<h2>Main features</h2>\n<ul>\n<li>Easy to use clean python interface for Q-Chem</li>\n<li>No special q-chem compilation needed (reads Q-Chem environment)</li>\n<li>Output parser support</li>\n</ul>\n<h2>Installation instructions</h2>\n<ol>\n<li>Requirements</li>\n</ol>\n<ul>\n<li>Python 2.7.x/3.5+</li>\n<li>numpy</li>\n<li>scipy</li>\n<li>matplolib</li>\n<li>wfnsympy</li>\n<li>requests</li>\n<li>lxml</li>\n<li>wfnsympy (optional)</li>\n</ul>\n<p>2a. Manual installation</p>\n<pre>python setup.py install --user\n</pre>\n<p>2b. From pypi repository</p>\n<pre>pip install pyqchem --user\n</pre>\n<h2>Examples</h2>\n<p><strong>Simple pythonic API to define your input</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyqchem</span> <span class=\"kn\">import</span> <span class=\"n\">Structure</span><span class=\"p\">,</span> <span class=\"n\">QchemInput</span><span class=\"p\">,</span> <span class=\"n\">get_output_from_qchem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyqchem.parsers.basic</span> <span class=\"kn\">import</span> <span class=\"n\">basic_parser_qchem</span>\n\n<span class=\"n\">molecule</span> <span class=\"o\">=</span> <span class=\"n\">Structure</span><span class=\"p\">(</span><span class=\"n\">coordinates</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n                                  <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]],</span>\n                     <span class=\"n\">atomic_elements</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'H'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">],</span>\n                     <span class=\"n\">charge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"n\">multiplicity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">qc_input</span> <span class=\"o\">=</span> <span class=\"n\">QchemInput</span><span class=\"p\">(</span><span class=\"n\">molecule</span><span class=\"p\">,</span>\n                      <span class=\"n\">jobtype</span><span class=\"o\">=</span><span class=\"s1\">'sp'</span><span class=\"p\">,</span>\n                      <span class=\"n\">exchange</span><span class=\"o\">=</span><span class=\"s1\">'hf'</span><span class=\"p\">,</span>\n                      <span class=\"n\">basis</span><span class=\"o\">=</span><span class=\"s1\">'6-31G'</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">get_output_from_qchem</span><span class=\"p\">(</span><span class=\"n\">qc_input</span><span class=\"p\">,</span>\n                             <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n                             <span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"n\">basic_parser_qchem</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># obtain a python dictionary</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Energy: '</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'scf energy'</span><span class=\"p\">])</span>\n</pre>\n<p><strong>Link calculations in powerful workflows</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyqchem</span> <span class=\"kn\">import</span> <span class=\"n\">QchemInput</span><span class=\"p\">,</span> <span class=\"n\">get_output_from_qchem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyqchem.parsers.parser_optimization</span> <span class=\"kn\">import</span> <span class=\"n\">basic_optimization</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyqchem.parsers.parser_frequencies</span> <span class=\"kn\">import</span> <span class=\"n\">basic_frequencies</span>\n\n<span class=\"n\">qc_input</span> <span class=\"o\">=</span> <span class=\"n\">QchemInput</span><span class=\"p\">(</span><span class=\"n\">molecule</span><span class=\"p\">,</span>\n                      <span class=\"n\">jobtype</span><span class=\"o\">=</span><span class=\"s1\">'opt'</span><span class=\"p\">,</span>\n                      <span class=\"n\">exchange</span><span class=\"o\">=</span><span class=\"s1\">'hf'</span><span class=\"p\">,</span>\n                      <span class=\"n\">basis</span><span class=\"o\">=</span><span class=\"s1\">'sto-3g'</span><span class=\"p\">,</span>\n                      <span class=\"n\">geom_opt_tol_gradient</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span>\n                      <span class=\"n\">geom_opt_tol_energy</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n                      <span class=\"n\">geom_opt_tol_displacement</span><span class=\"o\">=</span><span class=\"mi\">1200</span><span class=\"p\">)</span>\n\n<span class=\"n\">parsed_data</span><span class=\"p\">,</span> <span class=\"n\">electronic_structure</span> <span class=\"o\">=</span> <span class=\"n\">get_output_from_qchem</span><span class=\"p\">(</span><span class=\"n\">qc_input</span><span class=\"p\">,</span>\n                                                          <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n                                                          <span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"n\">basic_optimization</span><span class=\"p\">,</span>\n                                                          <span class=\"n\">read_fchk</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">qc_input</span> <span class=\"o\">=</span> <span class=\"n\">QchemInput</span><span class=\"p\">(</span><span class=\"n\">parsed_data</span><span class=\"p\">[</span><span class=\"s1\">'optimized_molecule'</span><span class=\"p\">],</span>\n                      <span class=\"n\">jobtype</span><span class=\"o\">=</span><span class=\"s1\">'freq'</span><span class=\"p\">,</span>\n                      <span class=\"n\">exchange</span><span class=\"o\">=</span><span class=\"s1\">'hf'</span><span class=\"p\">,</span>\n                      <span class=\"n\">basis</span><span class=\"o\">=</span><span class=\"s1\">'sto-3g'</span><span class=\"p\">,</span>\n                      <span class=\"n\">scf_guess</span><span class=\"o\">=</span><span class=\"n\">electronic_structure</span><span class=\"p\">[</span><span class=\"s1\">'coefficients'</span><span class=\"p\">])</span>\n\n<span class=\"n\">parsed_data</span> <span class=\"o\">=</span> <span class=\"n\">get_output_from_qchem</span><span class=\"p\">(</span><span class=\"n\">qc_input</span><span class=\"p\">,</span>\n                                    <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n                                    <span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"n\">basic_frequencies</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">for</span> <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">freq</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">parsed_data</span><span class=\"p\">[</span><span class=\"s1\">'frequencies'</span><span class=\"p\">]):</span>\n\n    <span class=\"n\">force_constants</span> <span class=\"o\">=</span> <span class=\"n\">parsed_data</span><span class=\"p\">[</span><span class=\"s1\">'force_constants'</span><span class=\"p\">][</span><span class=\"n\">mode</span><span class=\"p\">]</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'mode:                      </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'frequency (cm-1):          </span><span class=\"si\">{:10.2f}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'force constant (mdyne/A):  </span><span class=\"si\">{:10.5f}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">force_constants</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Custom basis without pain</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyqchem</span> <span class=\"kn\">import</span> <span class=\"n\">QchemInput</span><span class=\"p\">,</span> <span class=\"n\">Structure</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyqchem.basis</span> <span class=\"kn\">import</span> <span class=\"n\">get_basis_from_ccRepo</span>\n\n\n<span class=\"n\">molecule</span> <span class=\"o\">=</span> <span class=\"n\">Structure</span><span class=\"p\">(</span><span class=\"n\">coordinates</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0000</span><span class=\"p\">],</span>\n                                  <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.5811</span><span class=\"p\">]],</span>\n                     <span class=\"n\">atomic_elements</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Se'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">],</span>\n                     <span class=\"n\">charge</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"n\">multiplicity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">basis_custom</span> <span class=\"o\">=</span> <span class=\"n\">get_basis_from_ccRepo</span><span class=\"p\">(</span><span class=\"n\">molecule</span><span class=\"p\">,</span> <span class=\"s1\">'cc-pVTZ'</span><span class=\"p\">)</span>\n\n<span class=\"n\">qc_input</span> <span class=\"o\">=</span> <span class=\"n\">QchemInput</span><span class=\"p\">(</span><span class=\"n\">molecule</span><span class=\"p\">,</span>\n                      <span class=\"n\">jobtype</span><span class=\"o\">=</span><span class=\"s1\">'sp'</span><span class=\"p\">,</span>\n                      <span class=\"n\">exchange</span><span class=\"o\">=</span><span class=\"s1\">'hf'</span><span class=\"p\">,</span>\n                      <span class=\"n\">basis</span><span class=\"o\">=</span><span class=\"n\">basis_custom</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Handle qchem errors like a pro!</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyqchem</span> <span class=\"kn\">import</span> <span class=\"n\">get_output_from_qchem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyqchem.errors</span> <span class=\"kn\">import</span> <span class=\"n\">OutputError</span><span class=\"p\">,</span> <span class=\"n\">ParserError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyqchem.parsers.parser_rasci</span> <span class=\"kn\">import</span> <span class=\"n\">rasci</span> <span class=\"k\">as</span> <span class=\"n\">parser_rasci</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">parsed_data</span> <span class=\"o\">=</span> <span class=\"n\">get_output_from_qchem</span><span class=\"p\">(</span><span class=\"n\">qc_input</span><span class=\"p\">,</span>\n                                        <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n                                        <span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"n\">parser_rasci</span><span class=\"p\">,</span>\n                                        <span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">OutputError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Calculation ended with errors. Error lines:'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">error_lines</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># Try to parse your output anyway</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span> \n        <span class=\"n\">parsed_data</span> <span class=\"o\">=</span> <span class=\"n\">parser_rasci</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">full_output</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">ParserError</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Failed parsing'</span><span class=\"p\">)</span>\n        <span class=\"n\">exit</span><span class=\"p\">()</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Energy: '</span><span class=\"p\">,</span> <span class=\"n\">parsed_data</span><span class=\"p\">[</span><span class=\"s1\">'scf energy'</span><span class=\"p\">])</span>\n</pre>\n<h2>Contact info</h2>\n<p>Abel Carreras<br>\n<a href=\"mailto:abelcarreras83@gmail.com\">abelcarreras83@gmail.com</a></p>\n<p>Donostia International Physics Center (DIPC)<br>\nDonostia-San Sebastian (Spain)</p>\n\n          </div>"}, "last_serial": 6762323, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2b7da90a9a1173d8b2dd142fb8f140e5", "sha256": "94d77232a05b8eed5eb9a13835f847400a472e40a9ff61876e4eeb8d0e86586b"}, "downloads": -1, "filename": "pyqchem-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2b7da90a9a1173d8b2dd142fb8f140e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44716, "upload_time": "2020-01-21T10:00:34", "upload_time_iso_8601": "2020-01-21T10:00:34.817903Z", "url": "https://files.pythonhosted.org/packages/d0/94/bfe1bbf54290b8060b26d34c0a2ee8ff352d82a24c9291ebf5c116844533/pyqchem-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e89b9a2266ec5595c1cc1a70308d5a6", "sha256": "dc13e4fb9d40821c29561b02ac218cc4458bd4044fffc2b0def5e47c7df1f4b5"}, "downloads": -1, "filename": "pyqchem-0.1.tar.gz", "has_sig": false, "md5_digest": "4e89b9a2266ec5595c1cc1a70308d5a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33064, "upload_time": "2020-01-21T10:00:37", "upload_time_iso_8601": "2020-01-21T10:00:37.645216Z", "url": "https://files.pythonhosted.org/packages/88/5c/deb481e7ca3ef8eedc76b54c49bb07fda00bdf7a66cc73443a6f70e84633/pyqchem-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "9efb93a07bd887e6cd96ff514768c97b", "sha256": "5c49aeef1cb540b669e95f5febe661a0632f5bca3678f2b2b51141d9c08b1024"}, "downloads": -1, "filename": "pyqchem-0.2.tar.gz", "has_sig": false, "md5_digest": "9efb93a07bd887e6cd96ff514768c97b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32420, "upload_time": "2020-03-04T17:21:09", "upload_time_iso_8601": "2020-03-04T17:21:09.293808Z", "url": "https://files.pythonhosted.org/packages/e5/be/5f6fcb15260965253aa63b1c1a5813e0d834016ccc242a300ed5e6102eed/pyqchem-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e1995f267fc62c323356e26e490bc1ca", "sha256": "c0aeb98253a447c7b983452516d04089560127b3e789f737e9940653c301a3a3"}, "downloads": -1, "filename": "pyqchem-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e1995f267fc62c323356e26e490bc1ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32871, "upload_time": "2020-03-04T17:56:46", "upload_time_iso_8601": "2020-03-04T17:56:46.582818Z", "url": "https://files.pythonhosted.org/packages/58/4d/36ac550f30b13a31e4b11f12913719ed05c5af89709f92aa54c534d7439d/pyqchem-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "6c05eb4e559a911425242082f97a03c4", "sha256": "5ffd804b07aea0d2f3585d676513725e0be55b1273417da1b75f928b1bbf8f96"}, "downloads": -1, "filename": "pyqchem-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6c05eb4e559a911425242082f97a03c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33037, "upload_time": "2020-03-05T23:59:50", "upload_time_iso_8601": "2020-03-05T23:59:50.647410Z", "url": "https://files.pythonhosted.org/packages/c5/7b/14da1e2d01eab29986fefab451b6495f7d52a1f1618369c17d33aa7bfe72/pyqchem-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "47a93dc9660f71a7f0e6cb932bfad1e3", "sha256": "fa56dc64dfea5f8f5e1caf92abfe262e6e29b9b1e89176657ba7c60fbe0d2cdd"}, "downloads": -1, "filename": "pyqchem-0.2.3.tar.gz", "has_sig": false, "md5_digest": "47a93dc9660f71a7f0e6cb932bfad1e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33039, "upload_time": "2020-03-06T01:17:20", "upload_time_iso_8601": "2020-03-06T01:17:20.723594Z", "url": "https://files.pythonhosted.org/packages/d3/52/88383d106a7de1fc5b361f25106f10baed0d6010ad4c9629c3683837e195/pyqchem-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "91c2e46cf127826a5f953a7e63025137", "sha256": "ec2c0b94be40d323291f44930d14c175c3ea944d0fa134b1e1d72dba686924ac"}, "downloads": -1, "filename": "pyqchem-0.2.4.tar.gz", "has_sig": false, "md5_digest": "91c2e46cf127826a5f953a7e63025137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33502, "upload_time": "2020-03-06T14:37:41", "upload_time_iso_8601": "2020-03-06T14:37:41.962353Z", "url": "https://files.pythonhosted.org/packages/8c/68/866671633987ca8b6083a631683e46378ce69eb7d87c4567e18683ce1b20/pyqchem-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91c2e46cf127826a5f953a7e63025137", "sha256": "ec2c0b94be40d323291f44930d14c175c3ea944d0fa134b1e1d72dba686924ac"}, "downloads": -1, "filename": "pyqchem-0.2.4.tar.gz", "has_sig": false, "md5_digest": "91c2e46cf127826a5f953a7e63025137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33502, "upload_time": "2020-03-06T14:37:41", "upload_time_iso_8601": "2020-03-06T14:37:41.962353Z", "url": "https://files.pythonhosted.org/packages/8c/68/866671633987ca8b6083a631683e46378ce69eb7d87c4567e18683ce1b20/pyqchem-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:53 2020"}