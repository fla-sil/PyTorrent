{"info": {"author": "Brian Sutherland", "author_email": "brian@vanguardistas.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"], "description": "`wesgi` implements an ESI Processor as a WSGI middeware. It is primarily aimed\nat development environments to simulate the production ESI Processor.  Under\ncertain conditions it may be used in production as well.\n\nCompleteness\n============\n\nThis implementation currently only implements ``<esi:include>`` and\n``<!--esi -->`` comments. The relevant specifications and documents are:\n\n- http://www.w3.org/TR/esi-lang\n- http://www.akamai.com/dl/technical_publications/esi_faq.pdf\n\nPerformance\n===========\n\nAn ESI processor generally makes a lot of network calls to other services in\nthe process of putting together a page. So, in general, to reach very high\nlevels of performance it should be asynchronous. Standard Python and WSGI is\nsynchronous, placing an upper limit on performance which depends on the\nfollowing:\n\n- How many threads are used\n- How many ESI includes used per page\n- The speed of the servers serving the ESI Includes\n- Whether `wesgi` uses a cache and if the ESI includes come with Cache-Control\n  headers\n\nDepending on the situation, `wesgi` may be performant enough for you.\n\nThere are also a number of ways to run WSGI applications asynchronously, with\nvarying definitions of \"asynchronous\".\n\nUsage\n=====\n\nConfiguration via Python\n------------------------\n\n    >>> from wesgi import MiddleWare\n    >>> from wsgiref.simple_server import demo_app\n\nTo use it in it's default configuration for a development server:\n\n    >>> app = MiddleWare(demo_app)\n\nTo simulate an Akamai Production environment:\n    \n    >>> from wesgi import AkamaiPolicy\n    >>> policy = AkamaiPolicy()\n    >>> app = MiddleWare(demo_app, policy=policy)\n\nTo simulate an Akamai Production environment with \"chase redirect\" turned on:\n    \n    >>> policy.chase_redirect = True\n    >>> app = MiddleWare(demo_app, policy=policy)\n\nIf you wish to use it for a production server, it's advisable to turn debug\nmode off and enable some kind of cache:\n    \n    >>> from wesgi import LRUCache\n    >>> from wesgi import Policy\n    >>> policy.cache = LRUCache()\n    >>> app = MiddleWare(demo_app, debug=False, policy=policy)\n\nThe ``LRUCache`` is a memory based cache using an approximation of the LRU\nalgorithm. The good parts of it were inspired by Raymond Hettinger's\n``lru_cache`` recipe.\n\nOther available caches that can be easily integrated are ``httplib2``'s\n``FileCache`` or ``memcache``. See the ``httplib2`` documentation for details.\n\nConfiguration via paste.ini\n---------------------------\n\nThe ``wesgi.filter_app_factory`` function lets you configure ``wesgi`` in your\npaste.ini file. For example::\n\n    [filter-app:wesgi]\n    paste.filter_app_factory = wesgi:filter_app_factory\n    cache=lru_memory\n    cache_maxsize=10\n    policy=akamai\n    policy_chase_redirect=True\n    next = myapp\n\nDevelopment\n===========\n\nDevelopment on `wesgi` is centered around this github branch:\n\n    https://github.com/jinty/wesgi\n\nCHANGES\n=======\n\n0.12 (2016-10-06)\n----------------\n\nFixes\n+++++\n\n- fix dictionary changed size during iteration errors on Python 3\n\n0.11 (2016-05-25)\n----------------\n\nFeatures\n++++++++\n\n- Configuration via paste, rescued from missing 0.9 release.\n\n0.10 (2016-05-25)\n----------------\n\nFeatures\n++++++++\n\n- Python 3 support, drop Python 2.5 support.\n- Request header forwarding by default.\n- Turn relative links in <esi:include into absolute links before\n  including.\n\n0.8 (2011-07-07)\n----------------\n\nFeatures\n++++++++\n\n- A ``max_object_size`` option for ``wesgi.LRUCache`` to limit the maximum size\n  of objects stored.\n\n0.7 (2011-07-06)\n----------------\n\nFeatures\n++++++++\n\n- Major refactoring to use ``httplib2`` as the backend to get ESI includes. This\n  brings along HTTP Caching.\n- A memory based implementation of the LRU caching algoritm at ``wesgi.LRUCache``.\n- Handle ESI comments.\n\nBugfixes\n++++++++\n\n- Fix bug where regular expression to find ``src:includes`` could take a long time.\n\n0.5 (2011-07-04)\n----------------\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/wesgi", "keywords": "web middleware wsgi esi", "license": "", "maintainer": "", "maintainer_email": "", "name": "wesgi", "package_url": "https://pypi.org/project/wesgi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/wesgi/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/wesgi"}, "release_url": "https://pypi.org/project/wesgi/0.12/", "requires_dist": null, "requires_python": "", "summary": "A WSGI middleware which processes ESI directives", "version": "0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            `wesgi` implements an ESI Processor as a WSGI middeware. It is primarily aimed<br>at development environments to simulate the production ESI Processor.  Under<br>certain conditions it may be used in production as well.<br><br>Completeness<br>============<br><br>This implementation currently only implements ``&lt;esi:include&gt;`` and<br>``&lt;!--esi --&gt;`` comments. The relevant specifications and documents are:<br><br>- http://www.w3.org/TR/esi-lang<br>- http://www.akamai.com/dl/technical_publications/esi_faq.pdf<br><br>Performance<br>===========<br><br>An ESI processor generally makes a lot of network calls to other services in<br>the process of putting together a page. So, in general, to reach very high<br>levels of performance it should be asynchronous. Standard Python and WSGI is<br>synchronous, placing an upper limit on performance which depends on the<br>following:<br><br>- How many threads are used<br>- How many ESI includes used per page<br>- The speed of the servers serving the ESI Includes<br>- Whether `wesgi` uses a cache and if the ESI includes come with Cache-Control<br>  headers<br><br>Depending on the situation, `wesgi` may be performant enough for you.<br><br>There are also a number of ways to run WSGI applications asynchronously, with<br>varying definitions of \"asynchronous\".<br><br>Usage<br>=====<br><br>Configuration via Python<br>------------------------<br><br>    &gt;&gt;&gt; from wesgi import MiddleWare<br>    &gt;&gt;&gt; from wsgiref.simple_server import demo_app<br><br>To use it in it's default configuration for a development server:<br><br>    &gt;&gt;&gt; app = MiddleWare(demo_app)<br><br>To simulate an Akamai Production environment:<br>    <br>    &gt;&gt;&gt; from wesgi import AkamaiPolicy<br>    &gt;&gt;&gt; policy = AkamaiPolicy()<br>    &gt;&gt;&gt; app = MiddleWare(demo_app, policy=policy)<br><br>To simulate an Akamai Production environment with \"chase redirect\" turned on:<br>    <br>    &gt;&gt;&gt; policy.chase_redirect = True<br>    &gt;&gt;&gt; app = MiddleWare(demo_app, policy=policy)<br><br>If you wish to use it for a production server, it's advisable to turn debug<br>mode off and enable some kind of cache:<br>    <br>    &gt;&gt;&gt; from wesgi import LRUCache<br>    &gt;&gt;&gt; from wesgi import Policy<br>    &gt;&gt;&gt; policy.cache = LRUCache()<br>    &gt;&gt;&gt; app = MiddleWare(demo_app, debug=False, policy=policy)<br><br>The ``LRUCache`` is a memory based cache using an approximation of the LRU<br>algorithm. The good parts of it were inspired by Raymond Hettinger's<br>``lru_cache`` recipe.<br><br>Other available caches that can be easily integrated are ``httplib2``'s<br>``FileCache`` or ``memcache``. See the ``httplib2`` documentation for details.<br><br>Configuration via paste.ini<br>---------------------------<br><br>The ``wesgi.filter_app_factory`` function lets you configure ``wesgi`` in your<br>paste.ini file. For example::<br><br>    [filter-app:wesgi]<br>    paste.filter_app_factory = wesgi:filter_app_factory<br>    cache=lru_memory<br>    cache_maxsize=10<br>    policy=akamai<br>    policy_chase_redirect=True<br>    next = myapp<br><br>Development<br>===========<br><br>Development on `wesgi` is centered around this github branch:<br><br>    https://github.com/jinty/wesgi<br><br>CHANGES<br>=======<br><br>0.12 (2016-10-06)<br>----------------<br><br>Fixes<br>+++++<br><br>- fix dictionary changed size during iteration errors on Python 3<br><br>0.11 (2016-05-25)<br>----------------<br><br>Features<br>++++++++<br><br>- Configuration via paste, rescued from missing 0.9 release.<br><br>0.10 (2016-05-25)<br>----------------<br><br>Features<br>++++++++<br><br>- Python 3 support, drop Python 2.5 support.<br>- Request header forwarding by default.<br>- Turn relative links in &lt;esi:include into absolute links before<br>  including.<br><br>0.8 (2011-07-07)<br>----------------<br><br>Features<br>++++++++<br><br>- A ``max_object_size`` option for ``wesgi.LRUCache`` to limit the maximum size<br>  of objects stored.<br><br>0.7 (2011-07-06)<br>----------------<br><br>Features<br>++++++++<br><br>- Major refactoring to use ``httplib2`` as the backend to get ESI includes. This<br>  brings along HTTP Caching.<br>- A memory based implementation of the LRU caching algoritm at ``wesgi.LRUCache``.<br>- Handle ESI comments.<br><br>Bugfixes<br>++++++++<br><br>- Fix bug where regular expression to find ``src:includes`` could take a long time.<br><br>0.5 (2011-07-04)<br>----------------<br><br>- Initial release.\n          </div>"}, "last_serial": 2384250, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "aedb85d0b01c56ec42026e8cf961a947", "sha256": "3c8202eaffad9ee2ad69f3288039cf21e34a07c1be9cfcb75053d303764f519a"}, "downloads": -1, "filename": "wesgi-0.10.tar.gz", "has_sig": false, "md5_digest": "aedb85d0b01c56ec42026e8cf961a947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13582, "upload_time": "2016-05-25T15:02:00", "upload_time_iso_8601": "2016-05-25T15:02:00.098171Z", "url": "https://files.pythonhosted.org/packages/11/4a/4a8d3136746feff39b4e9be0453640a427446bc9069144b7d430699b12ea/wesgi-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "44ccef013ac991dd476857e37a591cc2", "sha256": "42de44d63fedeaef5b6983fa8d84120ec7826d011b5a1abca0cebdd9ddbfdcda"}, "downloads": -1, "filename": "wesgi-0.11.tar.gz", "has_sig": false, "md5_digest": "44ccef013ac991dd476857e37a591cc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14355, "upload_time": "2016-05-25T15:17:16", "upload_time_iso_8601": "2016-05-25T15:17:16.012586Z", "url": "https://files.pythonhosted.org/packages/ab/0a/07ac7bdf888b3fb43a73eed2b0c6b012f76da71837e545e20b9219bb553c/wesgi-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "fb07aa30935dc78098913559fd855eff", "sha256": "7e5fa0d92060c73db0476db11b74d289431751757402b3956ffe2ca2f857135f"}, "downloads": -1, "filename": "wesgi-0.12.tar.gz", "has_sig": false, "md5_digest": "fb07aa30935dc78098913559fd855eff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14492, "upload_time": "2016-10-06T13:29:25", "upload_time_iso_8601": "2016-10-06T13:29:25.672684Z", "url": "https://files.pythonhosted.org/packages/8d/c7/c46935451f9f75dcf23945acd36e7c8f0ee7748c201512c71a19b3383d0a/wesgi-0.12.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "fb40e6fcad55c6aeea79bc70ea2d8855", "sha256": "c249fc31938ea6a9278bb5d48926484d0150b5fa0031ebc2140ee44bd6392f1a"}, "downloads": -1, "filename": "wesgi-0.5.tar.gz", "has_sig": false, "md5_digest": "fb40e6fcad55c6aeea79bc70ea2d8855", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5776, "upload_time": "2011-07-05T02:22:19", "upload_time_iso_8601": "2011-07-05T02:22:19.969678Z", "url": "https://files.pythonhosted.org/packages/00/8c/56985898ece2a5b65b8997227b16f6c15e6c0e99cb670bfe56e1ba04cb27/wesgi-0.5.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "faea922241550da97b76ee7a7ed34bc1", "sha256": "5a06c4e766efbff7f9184ea26c6462e452601a8bf600579037f588a5c3fc560d"}, "downloads": -1, "filename": "wesgi-0.7.tar.gz", "has_sig": false, "md5_digest": "faea922241550da97b76ee7a7ed34bc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9036, "upload_time": "2011-07-06T17:40:56", "upload_time_iso_8601": "2011-07-06T17:40:56.470906Z", "url": "https://files.pythonhosted.org/packages/d2/7a/bbe1b936e61f9c3e5a71d1e1424cc7e57c1da8153ea6f9b790fcd4e07106/wesgi-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "35ba0e355c19e7abfd07a00de5872b33", "sha256": "64e19d069225590a1fa1836e10cba56796ea0ca048038ed26e53621b5070e855"}, "downloads": -1, "filename": "wesgi-0.8.tar.gz", "has_sig": false, "md5_digest": "35ba0e355c19e7abfd07a00de5872b33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9447, "upload_time": "2011-07-07T12:10:54", "upload_time_iso_8601": "2011-07-07T12:10:54.814308Z", "url": "https://files.pythonhosted.org/packages/aa/87/7f8b04f42c9ca5a0a42d00d348744820c9622ca46729ca8280595797f87e/wesgi-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "614530c30536a82d06263bf21c65688a", "sha256": "dad6b40cbd5681c9c563cb667c405a5ab8fa8149ef22f00f47b41b5aef9b4734"}, "downloads": -1, "filename": "wesgi-0.9.tar.gz", "has_sig": false, "md5_digest": "614530c30536a82d06263bf21c65688a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11205, "upload_time": "2011-07-07T15:01:06", "upload_time_iso_8601": "2011-07-07T15:01:06.212954Z", "url": "https://files.pythonhosted.org/packages/81/02/bb62768e862808321737a3135d87ffa54a1b7033aed0f15dc07c282fad62/wesgi-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb07aa30935dc78098913559fd855eff", "sha256": "7e5fa0d92060c73db0476db11b74d289431751757402b3956ffe2ca2f857135f"}, "downloads": -1, "filename": "wesgi-0.12.tar.gz", "has_sig": false, "md5_digest": "fb07aa30935dc78098913559fd855eff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14492, "upload_time": "2016-10-06T13:29:25", "upload_time_iso_8601": "2016-10-06T13:29:25.672684Z", "url": "https://files.pythonhosted.org/packages/8d/c7/c46935451f9f75dcf23945acd36e7c8f0ee7748c201512c71a19b3383d0a/wesgi-0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:13 2020"}