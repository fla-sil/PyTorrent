{"info": {"author": "Nico Coetzee", "author_email": "nicc777@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: MacOS X", "Environment :: Win32 (MS Windows)", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: System :: Archiving", "Topic :: System :: Filesystems", "Topic :: Utilities"], "description": "# py_workdocs_prep\n\nA bulk directory and file renaming utility to prepare files for migration to [AWS WorkDocs](https://aws.amazon.com/workdocs/)\n\nIf you run the script, it will start to traverse the current directory and will do one of the following with each file and directory:\n\n* Keep as is\n* Rename\n* Delete\n\nAll actions taken will be written out to STDOUT after all operations is completed\n\n**WARNING** The actions will make changes to your directories and/or files. It is *HIGHLY RECOMMENDED* you first do a full backup of your data.\n\nThis project was a result of me migrating from Dropbox to AWS Workdocs and finding a lot issues due to the names of files and/or directories that were invalid in AWS Workdocs.\n\nFor details of this potential problem, refer to the [AWS Workdocs Administration Guide](https://docs.aws.amazon.com/workdocs/latest/adminguide/prepare.html)\n\nHere is the most important limitations as of 2019-10-26:\n\n* Amazon WorkDocs Drive displays only files with a full directory path of 260 characters or fewer\n* Invalid characters in names:\n  * Trailing spaces\n  * Periods at the beginning or end\u2013For example: `.file`, `.file.ppt`, `.`, `..`, or `file.`\n  * Tildes at the beginning or end\u2013For example: `file.doc~`, `~file.doc`, or `~$file.doc`\n  * File names ending in .tmp\u2013For example: `file.tmp`\n  * File names exactly matching these case-sensitive terms: `Microsoft User Data`, `Outlook files`, `Thumbs.db`, or `Thumbnails`\n  * File names containing any of these characters \u2013 `*` (asterisk), `/` (forward slash), `\\` (back slash), `:` (colon), `<` (less than), `>` (greater than), `?` (question mark), `|` (vertical bar/pipe), `\"` (double quotes), or \\202E (character code 202E)\n\n## Quick Start\n\nThe following examples assume a MS Windows system, as the intend is to prepare a directory for AWS WorkDocs, which typically only has clients for Windows (unless you are on mobile).\n\n### From PyPi\n\nPrerequisites:\n\n* Python 3.7+\n\nThe example below will show how to get started very quickly using the most current version. The example will demonstrate a dry-run operation that will allow you to inspect the log file and review changes before committing.\n\nAssuming you are on the Windows command line:\n\n```shell\n> pip install py-workdocs-prep\n> cd <the directory you whish to prepare for migration>\n> wdp --dry-run\n```\n\nA log file called `py_workdocs_prep.log` will be generated. If it already exist, new entries will be appended.\n\n**NOTE** It is highly recommended that you inspect the log file and understand how the application will change your files - and delete certain directories and files. Also take special note of any warnings, especially those about the total path length that may be too long (search for the string `TOTAL LENGTH EXCEEDED THRESHOLD`). [Read here](https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file?redirectedfrom=MSDN#maximum-path-length-limitation) why this is important.\n\nTo commit all changes, but first backup all files and directories, you can run the following (assuming the application is already installed):\n\n```shell\n> wdp -b\n```\n\n#### Command Line Arguments\n\n| Option             | Description                                                                                                                           | Example           |\n|--------------------|---------------------------------------------------------------------------------------------------------------------------------------|-------------------|\n| `-b` or `--backup` | Create a backup of all current files and directories. A `tar.gz` file will be created.                                                | `> wdp -b`        |\n| `--dry-run`        | The application will not perform any file or directory modifications, but only log what would be done.                                | `> wdp --dry-run` |\n| `--delete-dirs`    | Define a comma separated list of directories to be deleted. Don't include any spaces, but rather use proper Python regex expressions. | `> wdp --delete-dirs=\"test1,ven*,node_mod*\"`\n\n### From Source\n\nPrerequisites:\n\n* Python 3.7+\n* git\n\nAssuming your target directory is something like `D:\\Dropbox`, and you want to backup first, you can run the following commands:\n\n```bash\n> git clone https://github.com/nicc777/py_workdocs_prep.git\n> cd py_workdocs_prep\n> python setup.py sdist\n> pip install dist\\*\n> d:\n> cd Dropbox\n> wdp -b\n```\n\n## Strategy\n\nI had a very large number of files (600,000+) and it turned out a lot of them violated the mentioned restrictions. I had to make a plan...\n\nHere is how the script works:\n\n### Long path names\n\nThe Default Windows starting folder is `W:\\My Documents\\` and it contains 16 characters. \n\nTherefore, any other directory and/or file name combined in my Dropbox root folder had to come in under 244 characters.\n\nI decided that after the transformation, I would just print WARNINGS for each item with the number of characters over. I would then make a decision later on to either rename some part of the directory and/or file name or sometimes completely reorganize the directory structure. This would remain a manual operation.\n\n### Getting rid of redundant files\n\nAs I used Dropbox as a \"working\" documents directory I ended up with a large number `.git`, `venv` and `node_modules` directories (to name a view examples). So the obvious first step for me was to delete all these directories. (`DONE`)\n\nFiles that will also be deleted include files starting or ending with the tilde (`~`) character. (`PENDING`)\n\nFiles ending in `.tmp` will also be deleted. (`PENDING`)\n\n### Directory and file renaming strategy\n\nAny directory names and files containing any of the listed invalid characters (including any whitespace) will be renamed, replacing the violating characters with an underscore (`_`) character. Repeating underscore characters will be replaced with just a single underscore character.\n\n## Processing Methodology\n\nIn terms of processing, the following order of processing will be followed:\n\n1. First, all directories will be traversed and file names will be checked:\n   1. If it is identified as a file to be deleted, write out a delete command\n   2. Process illegal characters and issue a rename command if required\n2. Now traverse all directories and identify all directories to be renamed\n   1. After the list is determined: order the list in terms of length (from longest to least)\n   2. Loop through the list and commit rename commands\n3. Now, assuming we have a list of final directory and file names, determine which items are over the total length limit and print warnings for these\n\n## Acknowledgements\n\nThanks to [NanoDano](https://www.devdungeon.com/users/nanodano) for the [examples](https://www.devdungeon.com/content/walk-directory-python) I used to walk through the directories.\n\n## Geek Food\n\n### Manual Testing\n\nTo inspect the project and prepare for migrating to AWS Workdocs...\n\nClone the project and `cd` into the project directory\n\n```python\n>>> from py_workdocs_prep.py_workdocs_prep import start\n>>> start()\n```\n### Memory Profiling\n\nYou can try the following:\n\n```bash\n> pip install -U memory_profiler\n```\n\nThen:\n\n```python\n>>> from py_workdocs_prep.py_workdocs_prep import start\n>>> from memory_profiler import memory_usage\n>>> memory_usage((start, ('D:\\\\Dropbox',))) \nStarting in \"D:\\Dropbox\"\n[15.54296875, 15.54296875, 15.54296875,..., 178.421875]\n```\n\nThis means the script started scanning the directory `D:\\Dropbox` and the application grew from a starting 15.5 MiB to 178.4 MiB (early testing).\n\nMy machine has plenty of RAM, so this was acceptable for me.\n\nReferences:\n\n* [memory_profiler](https://pypi.org/project/memory-profiler/)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/nicc777/py_workdocs_prep/releases/download/release-0.5.1/py_workdocs_prep-0.5.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nicc777/py_workdocs_prep", "keywords": "aws workdocs", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-workdocs-prep", "package_url": "https://pypi.org/project/py-workdocs-prep/", "platform": "", "project_url": "https://pypi.org/project/py-workdocs-prep/", "project_urls": {"Bug Reports": "https://github.com/nicc777/py_workdocs_prep/issues", "Download": "https://github.com/nicc777/py_workdocs_prep/releases/download/release-0.5.1/py_workdocs_prep-0.5.1.tar.gz", "Homepage": "https://github.com/nicc777/py_workdocs_prep", "Source": "https://github.com/nicc777/py_workdocs_prep"}, "release_url": "https://pypi.org/project/py-workdocs-prep/0.5.1/", "requires_dist": null, "requires_python": ">=3.6, <4", "summary": "AWS Workdocs Preparation Utility", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py_workdocs_prep</h1>\n<p>A bulk directory and file renaming utility to prepare files for migration to <a href=\"https://aws.amazon.com/workdocs/\" rel=\"nofollow\">AWS WorkDocs</a></p>\n<p>If you run the script, it will start to traverse the current directory and will do one of the following with each file and directory:</p>\n<ul>\n<li>Keep as is</li>\n<li>Rename</li>\n<li>Delete</li>\n</ul>\n<p>All actions taken will be written out to STDOUT after all operations is completed</p>\n<p><strong>WARNING</strong> The actions will make changes to your directories and/or files. It is <em>HIGHLY RECOMMENDED</em> you first do a full backup of your data.</p>\n<p>This project was a result of me migrating from Dropbox to AWS Workdocs and finding a lot issues due to the names of files and/or directories that were invalid in AWS Workdocs.</p>\n<p>For details of this potential problem, refer to the <a href=\"https://docs.aws.amazon.com/workdocs/latest/adminguide/prepare.html\" rel=\"nofollow\">AWS Workdocs Administration Guide</a></p>\n<p>Here is the most important limitations as of 2019-10-26:</p>\n<ul>\n<li>Amazon WorkDocs Drive displays only files with a full directory path of 260 characters or fewer</li>\n<li>Invalid characters in names:\n<ul>\n<li>Trailing spaces</li>\n<li>Periods at the beginning or end\u2013For example: <code>.file</code>, <code>.file.ppt</code>, <code>.</code>, <code>..</code>, or <code>file.</code></li>\n<li>Tildes at the beginning or end\u2013For example: <code>file.doc~</code>, <code>~file.doc</code>, or <code>~$file.doc</code></li>\n<li>File names ending in .tmp\u2013For example: <code>file.tmp</code></li>\n<li>File names exactly matching these case-sensitive terms: <code>Microsoft User Data</code>, <code>Outlook files</code>, <code>Thumbs.db</code>, or <code>Thumbnails</code></li>\n<li>File names containing any of these characters \u2013 <code>*</code> (asterisk), <code>/</code> (forward slash), <code>\\</code> (back slash), <code>:</code> (colon), <code>&lt;</code> (less than), <code>&gt;</code> (greater than), <code>?</code> (question mark), <code>|</code> (vertical bar/pipe), <code>\"</code> (double quotes), or \\202E (character code 202E)</li>\n</ul>\n</li>\n</ul>\n<h2>Quick Start</h2>\n<p>The following examples assume a MS Windows system, as the intend is to prepare a directory for AWS WorkDocs, which typically only has clients for Windows (unless you are on mobile).</p>\n<h3>From PyPi</h3>\n<p>Prerequisites:</p>\n<ul>\n<li>Python 3.7+</li>\n</ul>\n<p>The example below will show how to get started very quickly using the most current version. The example will demonstrate a dry-run operation that will allow you to inspect the log file and review changes before committing.</p>\n<p>Assuming you are on the Windows command line:</p>\n<pre>&gt; pip install py-workdocs-prep\n&gt; <span class=\"nb\">cd</span> &lt;the directory you whish to prepare <span class=\"k\">for</span> migration&gt;\n&gt; wdp --dry-run\n</pre>\n<p>A log file called <code>py_workdocs_prep.log</code> will be generated. If it already exist, new entries will be appended.</p>\n<p><strong>NOTE</strong> It is highly recommended that you inspect the log file and understand how the application will change your files - and delete certain directories and files. Also take special note of any warnings, especially those about the total path length that may be too long (search for the string <code>TOTAL LENGTH EXCEEDED THRESHOLD</code>). <a href=\"https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file?redirectedfrom=MSDN#maximum-path-length-limitation\" rel=\"nofollow\">Read here</a> why this is important.</p>\n<p>To commit all changes, but first backup all files and directories, you can run the following (assuming the application is already installed):</p>\n<pre>&gt; wdp -b\n</pre>\n<h4>Command Line Arguments</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-b</code> or <code>--backup</code></td>\n<td>Create a backup of all current files and directories. A <code>tar.gz</code> file will be created.</td>\n<td><code>&gt; wdp -b</code></td>\n</tr>\n<tr>\n<td><code>--dry-run</code></td>\n<td>The application will not perform any file or directory modifications, but only log what would be done.</td>\n<td><code>&gt; wdp --dry-run</code></td>\n</tr>\n<tr>\n<td><code>--delete-dirs</code></td>\n<td>Define a comma separated list of directories to be deleted. Don't include any spaces, but rather use proper Python regex expressions.</td>\n<td><code>&gt; wdp --delete-dirs=\"test1,ven*,node_mod*\"</code></td>\n</tr></tbody></table>\n<h3>From Source</h3>\n<p>Prerequisites:</p>\n<ul>\n<li>Python 3.7+</li>\n<li>git</li>\n</ul>\n<p>Assuming your target directory is something like <code>D:\\Dropbox</code>, and you want to backup first, you can run the following commands:</p>\n<pre>&gt; git clone https://github.com/nicc777/py_workdocs_prep.git\n&gt; <span class=\"nb\">cd</span> py_workdocs_prep\n&gt; python setup.py sdist\n&gt; pip install dist<span class=\"se\">\\*</span>\n&gt; d:\n&gt; <span class=\"nb\">cd</span> Dropbox\n&gt; wdp -b\n</pre>\n<h2>Strategy</h2>\n<p>I had a very large number of files (600,000+) and it turned out a lot of them violated the mentioned restrictions. I had to make a plan...</p>\n<p>Here is how the script works:</p>\n<h3>Long path names</h3>\n<p>The Default Windows starting folder is <code>W:\\My Documents\\</code> and it contains 16 characters.</p>\n<p>Therefore, any other directory and/or file name combined in my Dropbox root folder had to come in under 244 characters.</p>\n<p>I decided that after the transformation, I would just print WARNINGS for each item with the number of characters over. I would then make a decision later on to either rename some part of the directory and/or file name or sometimes completely reorganize the directory structure. This would remain a manual operation.</p>\n<h3>Getting rid of redundant files</h3>\n<p>As I used Dropbox as a \"working\" documents directory I ended up with a large number <code>.git</code>, <code>venv</code> and <code>node_modules</code> directories (to name a view examples). So the obvious first step for me was to delete all these directories. (<code>DONE</code>)</p>\n<p>Files that will also be deleted include files starting or ending with the tilde (<code>~</code>) character. (<code>PENDING</code>)</p>\n<p>Files ending in <code>.tmp</code> will also be deleted. (<code>PENDING</code>)</p>\n<h3>Directory and file renaming strategy</h3>\n<p>Any directory names and files containing any of the listed invalid characters (including any whitespace) will be renamed, replacing the violating characters with an underscore (<code>_</code>) character. Repeating underscore characters will be replaced with just a single underscore character.</p>\n<h2>Processing Methodology</h2>\n<p>In terms of processing, the following order of processing will be followed:</p>\n<ol>\n<li>First, all directories will be traversed and file names will be checked:\n<ol>\n<li>If it is identified as a file to be deleted, write out a delete command</li>\n<li>Process illegal characters and issue a rename command if required</li>\n</ol>\n</li>\n<li>Now traverse all directories and identify all directories to be renamed\n<ol>\n<li>After the list is determined: order the list in terms of length (from longest to least)</li>\n<li>Loop through the list and commit rename commands</li>\n</ol>\n</li>\n<li>Now, assuming we have a list of final directory and file names, determine which items are over the total length limit and print warnings for these</li>\n</ol>\n<h2>Acknowledgements</h2>\n<p>Thanks to <a href=\"https://www.devdungeon.com/users/nanodano\" rel=\"nofollow\">NanoDano</a> for the <a href=\"https://www.devdungeon.com/content/walk-directory-python\" rel=\"nofollow\">examples</a> I used to walk through the directories.</p>\n<h2>Geek Food</h2>\n<h3>Manual Testing</h3>\n<p>To inspect the project and prepare for migrating to AWS Workdocs...</p>\n<p>Clone the project and <code>cd</code> into the project directory</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">py_workdocs_prep.py_workdocs_prep</span> <span class=\"kn\">import</span> <span class=\"n\">start</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<h3>Memory Profiling</h3>\n<p>You can try the following:</p>\n<pre>&gt; pip install -U memory_profiler\n</pre>\n<p>Then:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">py_workdocs_prep.py_workdocs_prep</span> <span class=\"kn\">import</span> <span class=\"n\">start</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">memory_profiler</span> <span class=\"kn\">import</span> <span class=\"n\">memory_usage</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">memory_usage</span><span class=\"p\">((</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'D:</span><span class=\"se\">\\\\</span><span class=\"s1\">Dropbox'</span><span class=\"p\">,)))</span> \n<span class=\"n\">Starting</span> <span class=\"ow\">in</span> <span class=\"s2\">\"D:\\Dropbox\"</span>\n<span class=\"p\">[</span><span class=\"mf\">15.54296875</span><span class=\"p\">,</span> <span class=\"mf\">15.54296875</span><span class=\"p\">,</span> <span class=\"mf\">15.54296875</span><span class=\"p\">,</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mf\">178.421875</span><span class=\"p\">]</span>\n</pre>\n<p>This means the script started scanning the directory <code>D:\\Dropbox</code> and the application grew from a starting 15.5 MiB to 178.4 MiB (early testing).</p>\n<p>My machine has plenty of RAM, so this was acceptable for me.</p>\n<p>References:</p>\n<ul>\n<li><a href=\"https://pypi.org/project/memory-profiler/\" rel=\"nofollow\">memory_profiler</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6111674, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "424b5ee26e43cf0c2a274e8ec17c4e00", "sha256": "20da3d96fc3892815aaf18c5609c7c20231f920400dc108e8cf213e87ed1470c"}, "downloads": -1, "filename": "py_workdocs_prep-0.3.1.tar.gz", "has_sig": false, "md5_digest": "424b5ee26e43cf0c2a274e8ec17c4e00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 7689, "upload_time": "2019-10-29T07:46:31", "upload_time_iso_8601": "2019-10-29T07:46:31.095403Z", "url": "https://files.pythonhosted.org/packages/86/9e/118a2098cbeda96a4c2ec18e62c63bd97b725a2198c362d8791d15e3f6aa/py_workdocs_prep-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "5dc02c86d846de8610bd1c6b9e878eff", "sha256": "7587cace657f74ceb7939f3927192fd5a046fcb83a843b63fd5c26c48edfda12"}, "downloads": -1, "filename": "py_workdocs_prep-0.4.0.tar.gz", "has_sig": false, "md5_digest": "5dc02c86d846de8610bd1c6b9e878eff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 8436, "upload_time": "2019-11-01T04:44:25", "upload_time_iso_8601": "2019-11-01T04:44:25.911933Z", "url": "https://files.pythonhosted.org/packages/2e/cb/d1c832606a10a1c62ba006a15dad29205104444a5281ad5243f42cf0437d/py_workdocs_prep-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "6e117de5752a6e8b191e0028eab48631", "sha256": "b74a450c43ffd48b58fd25669c06cd9d28f10a7212ed2b643593fdb1fddad195"}, "downloads": -1, "filename": "py_workdocs_prep-0.5.0.tar.gz", "has_sig": false, "md5_digest": "6e117de5752a6e8b191e0028eab48631", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 9886, "upload_time": "2019-11-10T13:14:21", "upload_time_iso_8601": "2019-11-10T13:14:21.466844Z", "url": "https://files.pythonhosted.org/packages/93/7c/be61d8ecd3fa7d83154a05535d74e41084e35f1c0adf8e61e55b66f745c4/py_workdocs_prep-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "51f1501f5ff8ffa0cd7ec861974e03b5", "sha256": "2db4beafced5f795c4a3bc7bbf183ffba908877d0b5754afb9665d5ca0c9e365"}, "downloads": -1, "filename": "py_workdocs_prep-0.5.1.tar.gz", "has_sig": false, "md5_digest": "51f1501f5ff8ffa0cd7ec861974e03b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 10784, "upload_time": "2019-11-10T13:42:09", "upload_time_iso_8601": "2019-11-10T13:42:09.275472Z", "url": "https://files.pythonhosted.org/packages/75/91/bf424211c832b9ebe72757398630612fbee1026f7d3ed39cd3f6e13c125a/py_workdocs_prep-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51f1501f5ff8ffa0cd7ec861974e03b5", "sha256": "2db4beafced5f795c4a3bc7bbf183ffba908877d0b5754afb9665d5ca0c9e365"}, "downloads": -1, "filename": "py_workdocs_prep-0.5.1.tar.gz", "has_sig": false, "md5_digest": "51f1501f5ff8ffa0cd7ec861974e03b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 10784, "upload_time": "2019-11-10T13:42:09", "upload_time_iso_8601": "2019-11-10T13:42:09.275472Z", "url": "https://files.pythonhosted.org/packages/75/91/bf424211c832b9ebe72757398630612fbee1026f7d3ed39cd3f6e13c125a/py_workdocs_prep-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:11 2020"}