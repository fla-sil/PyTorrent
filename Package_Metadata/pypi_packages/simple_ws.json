{"info": {"author": "Ole Kristian Aune, Even Dalen, Audun Wigum Arbo", "author_email": "even.dalen@live.no", "bugtrack_url": null, "classifiers": [], "description": "simple\\_ws\n==========\n\nSimple websocket implementation in python\n\n|PyPI version| |Python version|\n\nInstall\n-------\n\n::\n\n    $ pip install simple_ws\n\nUsage\n-----\n\nTo test the library, clone repo, open two command windows and cd into\nthe python-WS directory\n\n-  Run ``python -m http.server 8000``\n-  Run ``python ws_example.py`` in the other window\n-  Open http://localhost:8000 in a browser\n\nExample\n~~~~~~~\n\n.. code:: python\n\n    from simple_ws import WebSocket\n\n    class WSHandler(WebSocket):\n        def on_message(self, msg, target_client):\n            for client in self.clients:\n                if client.is_open():\n                    client.write_message(msg)\n\n        def on_open(self, client):\n            print(\"Client connected!\")\n\n        def on_close(self, client):\n            print(\"Client left...\")\n\n        def on_ping(self, client):\n            print(\"Recieved ping!\")\n\n        def on_pong(self, client):\n            print(\"Recieved pong!\")\n\n    host = ''\n    port = 8080\n\n    ws = WSHandler(host, port)\n\nWebSocket parameters\n--------------------\n\n+------------+------------+------------+------------+\n| parameter  | type       | default    | descriptio |\n|            |            |            | n          |\n+============+============+============+============+\n| ``host``   | String     |            | Host       |\n|            |            |            | domain     |\n+------------+------------+------------+------------+\n| ``port``   | Integer    |            | Port       |\n|            |            |            | number for |\n|            |            |            | websocket  |\n+------------+------------+------------+------------+\n| ``ping``   | Boolean    | True       | Whether    |\n|            |            |            | server     |\n|            |            |            | should     |\n|            |            |            | ping       |\n|            |            |            | client in  |\n|            |            |            | a given    |\n|            |            |            | intervall, |\n|            |            |            | will close |\n|            |            |            | connection |\n|            |            |            | if pong is |\n|            |            |            | not        |\n|            |            |            | received   |\n+------------+------------+------------+------------+\n| ``ping_int | Integer    | 5          | How often  |\n| ervall``   |            |            | should     |\n|            |            |            | server     |\n|            |            |            | ping       |\n|            |            |            | client in  |\n|            |            |            | seconds,   |\n|            |            |            | has no     |\n|            |            |            | effect if  |\n|            |            |            | ping is    |\n|            |            |            | set to     |\n|            |            |            | false      |\n+------------+------------+------------+------------+\n| ``compress | Boolean    | True       | Whether    |\n| ion``      |            |            | messages   |\n|            |            |            | should be  |\n|            |            |            | compressed |\n+------------+------------+------------+------------+\n| ``max_fram | Integer    | 8192       | Max size   |\n| e_size``   |            |            | for a      |\n|            |            |            | single     |\n|            |            |            | websocket  |\n|            |            |            | frame. If  |\n|            |            |            | payload    |\n|            |            |            | exceeds    |\n|            |            |            | limit, the |\n|            |            |            | message    |\n|            |            |            | will be    |\n|            |            |            | split in   |\n|            |            |            | several    |\n|            |            |            | parts      |\n+------------+------------+------------+------------+\n| ``buffer_s | Integer    | 4096       | Max        |\n| ize``      |            |            | network    |\n|            |            |            | buffer     |\n|            |            |            | size       |\n+------------+------------+------------+------------+\n\nFunctions\n---------\n\nWebSocket\n~~~~~~~~~\n\non\\_open(self, client)\n^^^^^^^^^^^^^^^^^^^^^^\n\nCalled when the server opens a connection to a new client (client).\n\n.. code:: python\n\n    def on_open(self, client):\n        # Executes when opening a connection\n\non\\_close(self, client)\n^^^^^^^^^^^^^^^^^^^^^^^\n\nCalled when the server closes a connection to a client (client).\n\n.. code:: python\n\n    def on_close(self, client):\n        # Executes when closing a connection\n\non\\_message(self, msg, client)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCalled when the server has received a message (msg) from a client\n(client). The message can be in either binary or text format.\n\n.. code:: python\n\n    def on_message(self, msg, client):\n        # Executes when server recieves a messages from client\n\non\\_ping(self, client)\n^^^^^^^^^^^^^^^^^^^^^^\n\nCalled when the server sends a ping to a client (client).\n\n.. code:: python\n\n    def on_ping(self, client):\n        # Executes when ping is sent to a client\n\non\\_pong(self, client)\n^^^^^^^^^^^^^^^^^^^^^^\n\nCalled when the server receives a pong from a client (client).\n\n.. code:: python\n\n    def on_pong(self, client):\n        # Executes when pong is received from a client\n\nClient\n~~~~~~\n\nwrite\\_message(self, msg, binary=False)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSends a message payload (msg) to the client. If binary=True, the message\ngets sent as binary data.\n\n.. code:: python\n\n    # Text message\n    client.write_message(\"Hello world\")\n\n    # Binary message\n    client.write_message(b\"0x00\", binary=True)\n\nis\\_open(self)\n^^^^^^^^^^^^^^\n\nReturns True if the connection has gone through handshake, and is\ncurrently open.\n\nclose(self, status, reason)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSends a close frame to the client, and closes the connection after\neither a response, or after 1 second. Status and reason are not\ncurrently implemented. Will ultimately result in **WebSocket.on\\_close**\nbeing fired.\n\n.. code:: python\n\n    client.close(1002, \"Pong not recieved\")\n\nTODO\n----\n\n1. Write more tests\n2. Add support for payload in ping and pong frames\n3. Error handling\n4. Clean up classes\n5. Implement close status and reason\n6. Implement all compression configurations\n7. Add more configurability/remove hardcoded constants\n8. Implement connection limit\n\nExternal sources\n----------------\n\n-  https://tools.ietf.org/html/rfc6455\n-  https://tools.ietf.org/html/rfc7692\n-  https://developer.mozilla.org/en-US/docs/Web/API/WebSockets\\_API/Writing\\_WebSocket\\_servers\n-  https://www.igvita.com/2013/11/27/configuring-and-optimizing-websocket-compression/\n-  https://github.com/tornadoweb/tornado\n-  https://docs.python.org/3/library/asyncio.html\n\nLicense\n-------\n\n`MIT License <LICENSE>`__\n\nAuthors\n-------\n\n`Even Dalen <https://github.com/evedal>`__, `Audun Wigum\nArbo <https://github.com/AudunWA>`__ and `Ole Kristian\nAune <https://github.com/okaune>`__\n\n.. |PyPI version| image:: https://badge.fury.io/py/simple_ws.svg\n   :target: https://badge.fury.io/py/simple_ws\n.. |Python version| image:: https://img.shields.io/badge/python-3.6.1-blue.svg\n   :target: https://www.python.org/downloads/release/python-361/\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/WSnettverksprog/simple_ws/archive/0.3.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/WSnettverksprog/simple_ws", "keywords": "websocket", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "simple_ws", "package_url": "https://pypi.org/project/simple_ws/", "platform": "", "project_url": "https://pypi.org/project/simple_ws/", "project_urls": {"Download": "https://github.com/WSnettverksprog/simple_ws/archive/0.3.0.tar.gz", "Homepage": "https://github.com/WSnettverksprog/simple_ws"}, "release_url": "https://pypi.org/project/simple_ws/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Simple websocket implementation in python using asyncio", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple websocket implementation in python</p>\n<p><a href=\"https://badge.fury.io/py/simple_ws\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c80ebd3d9df871857709b9e424c001bb6920fef6/68747470733a2f2f62616467652e667572792e696f2f70792f73696d706c655f77732e737667\"></a> <a href=\"https://www.python.org/downloads/release/python-361/\" rel=\"nofollow\"><img alt=\"Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/220b77e67189005a5f2a1f96c4f1a22938640291/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362e312d626c75652e737667\"></a></p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>$ pip install simple_ws\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To test the library, clone repo, open two command windows and cd into\nthe python-WS directory</p>\n<ul>\n<li>Run <tt>python <span class=\"pre\">-m</span> http.server 8000</tt></li>\n<li>Run <tt>python ws_example.py</tt> in the other window</li>\n<li>Open <a href=\"http://localhost:8000\" rel=\"nofollow\">http://localhost:8000</a> in a browser</li>\n</ul>\n<div id=\"example\">\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_ws</span> <span class=\"kn\">import</span> <span class=\"n\">WebSocket</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WSHandler</span><span class=\"p\">(</span><span class=\"n\">WebSocket</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">target_client</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">client</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clients</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">is_open</span><span class=\"p\">():</span>\n                <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">write_message</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Client connected!\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Client left...\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_ping</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Recieved ping!\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_pong</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Recieved pong!\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span>\n\n<span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">WSHandler</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"websocket-parameters\">\n<h2>WebSocket parameters</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>parameter</th>\n<th>type</th>\n<th>default</th>\n<th>descriptio\nn</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>host</tt></td>\n<td>String</td>\n<td>\u00a0</td>\n<td>Host\ndomain</td>\n</tr>\n<tr><td><tt>port</tt></td>\n<td>Integer</td>\n<td>\u00a0</td>\n<td>Port\nnumber for\nwebsocket</td>\n</tr>\n<tr><td><tt>ping</tt></td>\n<td>Boolean</td>\n<td>True</td>\n<td>Whether\nserver\nshould\nping\nclient in\na given\nintervall,\nwill close\nconnection\nif pong is\nnot\nreceived</td>\n</tr>\n<tr><td><tt>ping_int\nervall</tt></td>\n<td>Integer</td>\n<td>5</td>\n<td>How often\nshould\nserver\nping\nclient in\nseconds,\nhas no\neffect if\nping is\nset to\nfalse</td>\n</tr>\n<tr><td><tt>compress\nion</tt></td>\n<td>Boolean</td>\n<td>True</td>\n<td>Whether\nmessages\nshould be\ncompressed</td>\n</tr>\n<tr><td><tt>max_fram\ne_size</tt></td>\n<td>Integer</td>\n<td>8192</td>\n<td>Max size\nfor a\nsingle\nwebsocket\nframe. If\npayload\nexceeds\nlimit, the\nmessage\nwill be\nsplit in\nseveral\nparts</td>\n</tr>\n<tr><td><tt>buffer_s\nize</tt></td>\n<td>Integer</td>\n<td>4096</td>\n<td>Max\nnetwork\nbuffer\nsize</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"functions\">\n<h2>Functions</h2>\n<div id=\"websocket\">\n<h3>WebSocket</h3>\n<div id=\"on-open-self-client\">\n<h4>on_open(self, client)</h4>\n<p>Called when the server opens a connection to a new client (client).</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">on_open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Executes when opening a connection</span>\n</pre>\n</div>\n<div id=\"on-close-self-client\">\n<h4>on_close(self, client)</h4>\n<p>Called when the server closes a connection to a client (client).</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">on_close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Executes when closing a connection</span>\n</pre>\n</div>\n<div id=\"on-message-self-msg-client\">\n<h4>on_message(self, msg, client)</h4>\n<p>Called when the server has received a message (msg) from a client\n(client). The message can be in either binary or text format.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Executes when server recieves a messages from client</span>\n</pre>\n</div>\n<div id=\"on-ping-self-client\">\n<h4>on_ping(self, client)</h4>\n<p>Called when the server sends a ping to a client (client).</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">on_ping</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Executes when ping is sent to a client</span>\n</pre>\n</div>\n<div id=\"on-pong-self-client\">\n<h4>on_pong(self, client)</h4>\n<p>Called when the server receives a pong from a client (client).</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">on_pong</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Executes when pong is received from a client</span>\n</pre>\n</div>\n</div>\n<div id=\"client\">\n<h3>Client</h3>\n<div id=\"write-message-self-msg-binary-false\">\n<h4>write_message(self, msg, binary=False)</h4>\n<p>Sends a message payload (msg) to the client. If binary=True, the message\ngets sent as binary data.</p>\n<pre><span class=\"c1\"># Text message</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">write_message</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Binary message</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">write_message</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"0x00\"</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"is-open-self\">\n<h4>is_open(self)</h4>\n<p>Returns True if the connection has gone through handshake, and is\ncurrently open.</p>\n</div>\n<div id=\"close-self-status-reason\">\n<h4>close(self, status, reason)</h4>\n<p>Sends a close frame to the client, and closes the connection after\neither a response, or after 1 second. Status and reason are not\ncurrently implemented. Will ultimately result in <strong>WebSocket.on_close</strong>\nbeing fired.</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"mi\">1002</span><span class=\"p\">,</span> <span class=\"s2\">\"Pong not recieved\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ol>\n<li>Write more tests</li>\n<li>Add support for payload in ping and pong frames</li>\n<li>Error handling</li>\n<li>Clean up classes</li>\n<li>Implement close status and reason</li>\n<li>Implement all compression configurations</li>\n<li>Add more configurability/remove hardcoded constants</li>\n<li>Implement connection limit</li>\n</ol>\n</div>\n<div id=\"external-sources\">\n<h2>External sources</h2>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc6455\" rel=\"nofollow\">https://tools.ietf.org/html/rfc6455</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc7692\" rel=\"nofollow\">https://tools.ietf.org/html/rfc7692</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers</a></li>\n<li><a href=\"https://www.igvita.com/2013/11/27/configuring-and-optimizing-websocket-compression/\" rel=\"nofollow\">https://www.igvita.com/2013/11/27/configuring-and-optimizing-websocket-compression/</a></li>\n<li><a href=\"https://github.com/tornadoweb/tornado\" rel=\"nofollow\">https://github.com/tornadoweb/tornado</a></li>\n<li><a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">https://docs.python.org/3/library/asyncio.html</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">MIT License</a></p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p><a href=\"https://github.com/evedal\" rel=\"nofollow\">Even Dalen</a>, <a href=\"https://github.com/AudunWA\" rel=\"nofollow\">Audun Wigum\nArbo</a> and <a href=\"https://github.com/okaune\" rel=\"nofollow\">Ole Kristian\nAune</a></p>\n</div>\n\n          </div>"}, "last_serial": 2866616, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "84873eb161b5693c000dd5cef4464b06", "sha256": "2628ed1758925045581c041aeabb025090a404599833fe6959eaab77d649f9bc"}, "downloads": -1, "filename": "simple_ws-0.1.zip", "has_sig": false, "md5_digest": "84873eb161b5693c000dd5cef4464b06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6869, "upload_time": "2017-05-02T19:30:58", "upload_time_iso_8601": "2017-05-02T19:30:58.781709Z", "url": "https://files.pythonhosted.org/packages/df/7f/45ac4bf1887084ac6b88020d9f9ba8138d30cc23048af6e93b024e9c0bed/simple_ws-0.1.zip", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "8c7e5f7c30df38855ff646ebef4600b6", "sha256": "cf335e8811f5474889a2b56d2417d74c14e7d59b3bff00490f028c78963608af"}, "downloads": -1, "filename": "simple_ws-0.2.2.zip", "has_sig": false, "md5_digest": "8c7e5f7c30df38855ff646ebef4600b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8427, "upload_time": "2017-05-03T14:42:06", "upload_time_iso_8601": "2017-05-03T14:42:06.405282Z", "url": "https://files.pythonhosted.org/packages/19/14/e43aa55f7f660e0eeeb93518c40e3b458d3af228bb1ba63b2c4d8c4bf47d/simple_ws-0.2.2.zip", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "bef486fb92077234a1dfae0fa83ae6a5", "sha256": "9ddd1afe70c4c0859f60c805241fc6993ee72fa7efb3d1d3cc52168b64a1b213"}, "downloads": -1, "filename": "simple_ws-0.3.1.tar.gz", "has_sig": false, "md5_digest": "bef486fb92077234a1dfae0fa83ae6a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7431, "upload_time": "2017-05-10T09:44:42", "upload_time_iso_8601": "2017-05-10T09:44:42.252814Z", "url": "https://files.pythonhosted.org/packages/d9/f2/4aa9c27788ab90e24a44576f66afe9f8168efbaa6d28fc3a3ffc2074fc0b/simple_ws-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bef486fb92077234a1dfae0fa83ae6a5", "sha256": "9ddd1afe70c4c0859f60c805241fc6993ee72fa7efb3d1d3cc52168b64a1b213"}, "downloads": -1, "filename": "simple_ws-0.3.1.tar.gz", "has_sig": false, "md5_digest": "bef486fb92077234a1dfae0fa83ae6a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7431, "upload_time": "2017-05-10T09:44:42", "upload_time_iso_8601": "2017-05-10T09:44:42.252814Z", "url": "https://files.pythonhosted.org/packages/d9/f2/4aa9c27788ab90e24a44576f66afe9f8168efbaa6d28fc3a3ffc2074fc0b/simple_ws-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:49 2020"}