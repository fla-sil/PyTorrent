{"info": {"author": "Giulio Bottari", "author_email": "giuliobottari@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "# dub-script\n\nEasily dub audio files using a simple command script.\n\n## Usage\n\nThe example below mixes a voice file from a remote source with a background song.\n\n```python\nimport dubscript as ds\n\nsegment = ds.process({\n  \"version\": \"3\",\n  \"audio\": [{\n      \"type\": \"overlay\",\n      \"audio\": [\n        {\n            \"name\": \"voice\",\n            \"start\": 500,\n            \"audio\": [\n                {\"type\": \"file\", \"src\": \"https://mysite.com/1.wav\"},\n                {\"type\": \"silence\", \"duration\": 1000},\n                {\"type\": \"file\", \"src\": \"https://mysite.com/2.wav\"},\n            ]\n        },\n        {\n            \"name\": \"song\",\n            \"audio\": [\n                {\"type\": \"file\", \"src\": \"local/dir/bg.mp3\", \"gain\": -10}\n            ]\n        }\n      ]\n  }]\n})\n\nsegment.export('podcast.mp3')\n```\n\n## Dependencies\n\n`dub-script` is powered by [Pydub](https://github.com/jiaaro/pydub) and inherits its dependencies. Install [ffmpeg](http://www.ffmpeg.org/) or [libav](https://libav.org/) if you need to manipulate non-wave files, like `mp3`.\n\n## Installation\n\n```sh\npython setup.py install\n```\n\n## Why?\n\nThis lib was originally intended to generate a podcast from a few audio files. You can use Pydub for this, but the idea of having a JSON recipe for it has several advantages. Having a recipe means you can version it and keep track of changes. Also, you can easily create a REST API that generates audios using `dub-script`. Finally, I find it easier to understand the audio processing when only looking at the JSON.\n\n## Commands\n\nWith `dub-script`, everything is done through commands that follow this basic structure:\n\n```jsonc\n{\n  \"type\": \"<command_type>\"\n}\n```\n\nThe only exception is the `concat` command, which doesn't have a `type`:\n\n```jsonc\n{\n  \"audio\": [\n    // audios to concatenate here\n  ]\n}\n```\n\n### Load local or remote files\n\nUse `file` to load audio data.\n\n```jsonc\n{\n  \"type\": \"file\",\n\n  // you can have either an url or a path\n  \"src\": \"<local or remote source>\"\n}\n```\n\n### Add silence\n\nUse `silence` to add a silent bit in milliseconds.\n\n```jsonc\n{\n  \"type\": \"silence\",\n  \"duration\": 1000\n}\n```\n\n### Concatenate\n\nJoin audio together with concatenate:\n\n```jsonc\n{\n  \"audio\": [\n    { \"type\": \"file1.wav\" },\n    { \"type\": \"file2.wav\" }\n    // ...\n  ]\n}\n```\n\n### Overlay\n\nMix audio tracks that plays at the same time with `overlay`.\n\n**Note: the length of the overlaid audio will always be equal to the first audio in the series.**\n\n```jsonc\n{\n  \"type\": \"overlay\",\n  \"audio\": [\n    // holds the tracks\n    {\n      \"name\": \"track1\", // track names are not required and are only here for organization purposes (yet)\n      \"start\": 3000, // this track will be delayed by 3 seconds\n      \"audio\": [{ \"type\": \"file1.wav\" }, { \"type\": \"file2.wav\" }]\n    },\n    {\n      \"audio\": [{ \"type\": \"file3.wav\" }],\n      \"gain\": 5 // the previous track will be boosted by +5 db while they overlap\n    }\n  ]\n}\n```\n\n## Filters\n\nFilters can be applied to any other command.\n\n### Change volume\n\nYou can change the volume with `gain`. For instance:\n\n```jsonc\n{\n  \"type\": \"file\",\n  \"src\": \"quiet.wav\",\n  \"gain\": 3\n}\n```\n\n### Fade In/Out\n\nFade audio with either `fade_in` or `fade_out`:\n\n```jsonc\n{\n  \"audio\": [\n    {\n      \"type\": \"file\",\n      \"src\": \"intro.mp3\",\n      \"fade_in\": 3000 // fade the first 3 seconds\n    },\n    {\n      \"type\": \"file\",\n      \"src\": \"main.mp3\",\n      \"fade_out\": 10000 // fade the last 10 seconds\n    }\n  ]\n}\n```\n\n## License\n\nLicensed under the [MIT License](./LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/giuliobottari/dub-script", "keywords": "audio dub pydub", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dubscript", "package_url": "https://pypi.org/project/dubscript/", "platform": "", "project_url": "https://pypi.org/project/dubscript/", "project_urls": {"Homepage": "https://gitlab.com/giuliobottari/dub-script"}, "release_url": "https://pypi.org/project/dubscript/0.1/", "requires_dist": ["requests", "pydub"], "requires_python": "", "summary": "Easily dub audio files using a simple command script.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dub-script</h1>\n<p>Easily dub audio files using a simple command script.</p>\n<h2>Usage</h2>\n<p>The example below mixes a voice file from a remote source with a background song.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dubscript</span> <span class=\"k\">as</span> <span class=\"nn\">ds</span>\n\n<span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">({</span>\n  <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"audio\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"overlay\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"audio\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"voice\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"start\"</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"audio\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"file\"</span><span class=\"p\">,</span> <span class=\"s2\">\"src\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://mysite.com/1.wav\"</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"silence\"</span><span class=\"p\">,</span> <span class=\"s2\">\"duration\"</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"file\"</span><span class=\"p\">,</span> <span class=\"s2\">\"src\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://mysite.com/2.wav\"</span><span class=\"p\">},</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"song\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"audio\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"file\"</span><span class=\"p\">,</span> <span class=\"s2\">\"src\"</span><span class=\"p\">:</span> <span class=\"s2\">\"local/dir/bg.mp3\"</span><span class=\"p\">,</span> <span class=\"s2\">\"gain\"</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n  <span class=\"p\">}]</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s1\">'podcast.mp3'</span><span class=\"p\">)</span>\n</pre>\n<h2>Dependencies</h2>\n<p><code>dub-script</code> is powered by <a href=\"https://github.com/jiaaro/pydub\" rel=\"nofollow\">Pydub</a> and inherits its dependencies. Install <a href=\"http://www.ffmpeg.org/\" rel=\"nofollow\">ffmpeg</a> or <a href=\"https://libav.org/\" rel=\"nofollow\">libav</a> if you need to manipulate non-wave files, like <code>mp3</code>.</p>\n<h2>Installation</h2>\n<pre>python setup.py install\n</pre>\n<h2>Why?</h2>\n<p>This lib was originally intended to generate a podcast from a few audio files. You can use Pydub for this, but the idea of having a JSON recipe for it has several advantages. Having a recipe means you can version it and keep track of changes. Also, you can easily create a REST API that generates audios using <code>dub-script</code>. Finally, I find it easier to understand the audio processing when only looking at the JSON.</p>\n<h2>Commands</h2>\n<p>With <code>dub-script</code>, everything is done through commands that follow this basic structure:</p>\n<pre>{\n  \"type\": \"&lt;command_type&gt;\"\n}\n</pre>\n<p>The only exception is the <code>concat</code> command, which doesn't have a <code>type</code>:</p>\n<pre>{\n  \"audio\": [\n    // audios to concatenate here\n  ]\n}\n</pre>\n<h3>Load local or remote files</h3>\n<p>Use <code>file</code> to load audio data.</p>\n<pre>{\n  \"type\": \"file\",\n\n  // you can have either an url or a path\n  \"src\": \"&lt;local or remote source&gt;\"\n}\n</pre>\n<h3>Add silence</h3>\n<p>Use <code>silence</code> to add a silent bit in milliseconds.</p>\n<pre>{\n  \"type\": \"silence\",\n  \"duration\": 1000\n}\n</pre>\n<h3>Concatenate</h3>\n<p>Join audio together with concatenate:</p>\n<pre>{\n  \"audio\": [\n    { \"type\": \"file1.wav\" },\n    { \"type\": \"file2.wav\" }\n    // ...\n  ]\n}\n</pre>\n<h3>Overlay</h3>\n<p>Mix audio tracks that plays at the same time with <code>overlay</code>.</p>\n<p><strong>Note: the length of the overlaid audio will always be equal to the first audio in the series.</strong></p>\n<pre>{\n  \"type\": \"overlay\",\n  \"audio\": [\n    // holds the tracks\n    {\n      \"name\": \"track1\", // track names are not required and are only here for organization purposes (yet)\n      \"start\": 3000, // this track will be delayed by 3 seconds\n      \"audio\": [{ \"type\": \"file1.wav\" }, { \"type\": \"file2.wav\" }]\n    },\n    {\n      \"audio\": [{ \"type\": \"file3.wav\" }],\n      \"gain\": 5 // the previous track will be boosted by +5 db while they overlap\n    }\n  ]\n}\n</pre>\n<h2>Filters</h2>\n<p>Filters can be applied to any other command.</p>\n<h3>Change volume</h3>\n<p>You can change the volume with <code>gain</code>. For instance:</p>\n<pre>{\n  \"type\": \"file\",\n  \"src\": \"quiet.wav\",\n  \"gain\": 3\n}\n</pre>\n<h3>Fade In/Out</h3>\n<p>Fade audio with either <code>fade_in</code> or <code>fade_out</code>:</p>\n<pre>{\n  \"audio\": [\n    {\n      \"type\": \"file\",\n      \"src\": \"intro.mp3\",\n      \"fade_in\": 3000 // fade the first 3 seconds\n    },\n    {\n      \"type\": \"file\",\n      \"src\": \"main.mp3\",\n      \"fade_out\": 10000 // fade the last 10 seconds\n    }\n  ]\n}\n</pre>\n<h2>License</h2>\n<p>Licensed under the <a href=\"./LICENSE\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 7173951, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8d7b71a500fbe54c70a89ca8c3233ebf", "sha256": "9cbb4b2ac3c6f620295bf284e40f79e09082fa37aae01d11b6bb4626dfa50d23"}, "downloads": -1, "filename": "dubscript-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8d7b71a500fbe54c70a89ca8c3233ebf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4946, "upload_time": "2020-05-05T17:04:11", "upload_time_iso_8601": "2020-05-05T17:04:11.354504Z", "url": "https://files.pythonhosted.org/packages/e4/6c/e6ad03f0fad911debd24bdc70fdfa34136c771f2dcfe3b0fae6b07280cbf/dubscript-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8d7b71a500fbe54c70a89ca8c3233ebf", "sha256": "9cbb4b2ac3c6f620295bf284e40f79e09082fa37aae01d11b6bb4626dfa50d23"}, "downloads": -1, "filename": "dubscript-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8d7b71a500fbe54c70a89ca8c3233ebf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4946, "upload_time": "2020-05-05T17:04:11", "upload_time_iso_8601": "2020-05-05T17:04:11.354504Z", "url": "https://files.pythonhosted.org/packages/e4/6c/e6ad03f0fad911debd24bdc70fdfa34136c771f2dcfe3b0fae6b07280cbf/dubscript-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:49:09 2020"}