{"info": {"author": "Stephen Balaban", "author_email": "stephen@stephenbalaban.com", "bugtrack_url": null, "classifiers": [], "description": "bigimg\n======\n\nEasily create big images. With just a lambda expression.\n\nAn image can be seen as a function that maps a real-valued (x, y)\ncoordinate onto a color. With this in mind, I made bigimg.\n\n``bigimg.py`` allows you to define a canvas width and height, a vector\nfunction which will conduct an element wise map over each element in the\ncanvas, and an output file. If your function returns a single floating\npoint value, the resulting image will be gray scale, if it returns a\n3-tuple, it will be color.\n\nInstallation\n------------\n\n::\n\n    $ git clone https://github.com/stephenbalaban/bigimg.git\n    $ cd bigimg\n    $ sudo pip install -e .\n\nYou can also create pseudorandom images with:\n\n.. code:: bash\n\n    ./bigimg 128 128 pseudorandom.png --lambda random\n\nThis is useful in a variety of contexts.\n\nExamples\n--------\n\nCheck out the example images included. You can pull request a new\nexample image if you find an especially cool formula. Simply add the\ncode to the example set below, and place the image in the examples/\nfolder.\n\nOnly the best images, as determined by me, will be accepted.\n\nGrayscale\n~~~~~~~~~\n\n::\n\n    bigimg 512 512 examples/1.png --lambda \"lambda x, y: 2048. * np.sin(x/32.) + 2048. * np.sin(y/32.)\"\n\n.. figure:: examples/1.png\n   :alt: lambda x, y: 2048. * np.sin(x/32.) + 2048. * np.sin(y/32.)\n\n   Example 1\n::\n\n    bigimg 512 512 examples/2.png --lambda \"lambda x, y: y * np.cos(x/128.)\"\n\n.. figure:: examples/2.png\n   :alt: lambda x, y: y * np.cos(x/128.)\n\n   Example 2\n::\n\n    bigimg 512 512 --lambda random examples/0.png\n\n.. figure:: examples/0.png\n   :alt: random\n\n   Example 0\nColor\n~~~~~\n\n::\n\n    bigimg 512 512 examples/3.png --lambda \"lambda x, y: (x, x, y)\"\n\n.. figure:: examples/3.png\n   :alt: lambda x, y: (x, x, y)\n\n   Example 3\n::\n\n    bigimg 512 512 examples/4.png --lambda \"lambda x, y: (x, np.sin(x), np.sin(y))\"\n\n.. figure:: examples/4.png\n   :alt: lambda x, y: (x, np.sin(x), np.sin(y))\n\n   Example 4\n::\n\n    bigimg 1024 1024 examples/5.png --lambda \"lambda x, y: (512 * np.cos(y/32.), 512 * np.sin(x/32.), 512 * np.sin(y/32.))\"\n\n.. figure:: examples/5.png\n   :alt: lambda x, y: (512 * np.cos(y/32.), 512 * np.sin(x/32.), 512 * np.sin(y/32.))\n\n   Example 5", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/stephenbalaban/bigimg", "keywords": null, "license": "LICENSE", "maintainer": null, "maintainer_email": null, "name": "bigimg", "package_url": "https://pypi.org/project/bigimg/", "platform": "any", "project_url": "https://pypi.org/project/bigimg/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/stephenbalaban/bigimg"}, "release_url": "https://pypi.org/project/bigimg/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "bigimg lets you generate big images with just a lambda expression.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            bigimg<br>======<br><br>Easily create big images. With just a lambda expression.<br><br>An image can be seen as a function that maps a real-valued (x, y)<br>coordinate onto a color. With this in mind, I made bigimg.<br><br>``bigimg.py`` allows you to define a canvas width and height, a vector<br>function which will conduct an element wise map over each element in the<br>canvas, and an output file. If your function returns a single floating<br>point value, the resulting image will be gray scale, if it returns a<br>3-tuple, it will be color.<br><br>Installation<br>------------<br><br>::<br><br>    $ git clone https://github.com/stephenbalaban/bigimg.git<br>    $ cd bigimg<br>    $ sudo pip install -e .<br><br>You can also create pseudorandom images with:<br><br>.. code:: bash<br><br>    ./bigimg 128 128 pseudorandom.png --lambda random<br><br>This is useful in a variety of contexts.<br><br>Examples<br>--------<br><br>Check out the example images included. You can pull request a new<br>example image if you find an especially cool formula. Simply add the<br>code to the example set below, and place the image in the examples/<br>folder.<br><br>Only the best images, as determined by me, will be accepted.<br><br>Grayscale<br>~~~~~~~~~<br><br>::<br><br>    bigimg 512 512 examples/1.png --lambda \"lambda x, y: 2048. * np.sin(x/32.) + 2048. * np.sin(y/32.)\"<br><br>.. figure:: examples/1.png<br>   :alt: lambda x, y: 2048. * np.sin(x/32.) + 2048. * np.sin(y/32.)<br><br>   Example 1<br>::<br><br>    bigimg 512 512 examples/2.png --lambda \"lambda x, y: y * np.cos(x/128.)\"<br><br>.. figure:: examples/2.png<br>   :alt: lambda x, y: y * np.cos(x/128.)<br><br>   Example 2<br>::<br><br>    bigimg 512 512 --lambda random examples/0.png<br><br>.. figure:: examples/0.png<br>   :alt: random<br><br>   Example 0<br>Color<br>~~~~~<br><br>::<br><br>    bigimg 512 512 examples/3.png --lambda \"lambda x, y: (x, x, y)\"<br><br>.. figure:: examples/3.png<br>   :alt: lambda x, y: (x, x, y)<br><br>   Example 3<br>::<br><br>    bigimg 512 512 examples/4.png --lambda \"lambda x, y: (x, np.sin(x), np.sin(y))\"<br><br>.. figure:: examples/4.png<br>   :alt: lambda x, y: (x, np.sin(x), np.sin(y))<br><br>   Example 4<br>::<br><br>    bigimg 1024 1024 examples/5.png --lambda \"lambda x, y: (512 * np.cos(y/32.), 512 * np.sin(x/32.), 512 * np.sin(y/32.))\"<br><br>.. figure:: examples/5.png<br>   :alt: lambda x, y: (512 * np.cos(y/32.), 512 * np.sin(x/32.), 512 * np.sin(y/32.))<br><br>   Example 5\n          </div>"}, "last_serial": 786848, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "222593979b4900a6dc4215fc2d1993ac", "sha256": "f6db4568b7758dc69f1a8a294b975776f6c2e3edb94d60fefafc5059bcd42301"}, "downloads": -1, "filename": "bigimg-0.0.2.tar.gz", "has_sig": false, "md5_digest": "222593979b4900a6dc4215fc2d1993ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2852, "upload_time": "2013-02-19T07:03:44", "upload_time_iso_8601": "2013-02-19T07:03:44.918654Z", "url": "https://files.pythonhosted.org/packages/f4/34/52e7fe323567e33d1df8bb529c5f43c4b07b5a8a2ef2ea04b5dd960dd303/bigimg-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "367af85cbf554551d79d49bf5306f0ff", "sha256": "8ec45ac6efc2ed535ee3264434909a3bf6099601fe6aade69d18c56cb75ed87f"}, "downloads": -1, "filename": "bigimg-0.0.3.tar.gz", "has_sig": false, "md5_digest": "367af85cbf554551d79d49bf5306f0ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2940, "upload_time": "2013-02-19T07:14:18", "upload_time_iso_8601": "2013-02-19T07:14:18.811232Z", "url": "https://files.pythonhosted.org/packages/4a/eb/087371ed35fa71c0fc1833abc2afd24b1038c73c653efe601e24f56109e4/bigimg-0.0.3.tar.gz", "yanked": false}], "0.0.3b": [{"comment_text": "", "digests": {"md5": "fa78905e765e4a23562c899ca23b12a6", "sha256": "b96bd5f113f51c3d7f75f9a03f29c7ffb53b0b6eef47b1c68b0ee16ddfd3019e"}, "downloads": -1, "filename": "bigimg-0.0.3b.tar.gz", "has_sig": false, "md5_digest": "fa78905e765e4a23562c899ca23b12a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3101, "upload_time": "2013-02-19T07:19:13", "upload_time_iso_8601": "2013-02-19T07:19:13.150859Z", "url": "https://files.pythonhosted.org/packages/fc/b5/c5ec11ad97cb3591e393f1de3a25abc4ae5bc0a82bee1d27882667398424/bigimg-0.0.3b.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "367af85cbf554551d79d49bf5306f0ff", "sha256": "8ec45ac6efc2ed535ee3264434909a3bf6099601fe6aade69d18c56cb75ed87f"}, "downloads": -1, "filename": "bigimg-0.0.3.tar.gz", "has_sig": false, "md5_digest": "367af85cbf554551d79d49bf5306f0ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2940, "upload_time": "2013-02-19T07:14:18", "upload_time_iso_8601": "2013-02-19T07:14:18.811232Z", "url": "https://files.pythonhosted.org/packages/4a/eb/087371ed35fa71c0fc1833abc2afd24b1038c73c653efe601e24f56109e4/bigimg-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:34 2020"}