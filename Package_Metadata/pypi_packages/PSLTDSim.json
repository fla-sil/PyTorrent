{"info": {"author": "Thad Haines", "author_email": "jhaines@mtech.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PSLTDSim = Power System Long-Term Dynamic Simulator\nPurpose:  Use Python and PSLF to simulate long-term power system dynamics.\n\nExamples of long-term dynamics:  \n1. A 20 minute wind ramp that forces a governor action response that in turn affects the area control error (ACE) which is later corrected by automatic generator control (AGC [a.k.a. load frequency control or LFC]). \n2. A Generator is tripped in an area that is importing power. Governor action from other areas will respond before AGC works to restore tie-line balance.\n3. A multi-hour simulation of a daily load cycle and forcast used to assure AGC algorithm operates within NERC mandates.\n\nWarning: Work in progress - everything may be broken. Nothing guaranteed.\n\nTo install package from git repository: \"pip install -e .\" from this directory with administrative privleges.\nIf python 3 32 bit is not default python: \"py -3-32 -m pip install -e .\"\nRequires IronPython (32 bit) to be on system path.\n\n## What this code does:\n  -Uses an agent-based approach to power system modeling.\n\n  -Creates a time sequence of power flows while accounting for combined system frequency, all generator mechanical powers and associated staes along with balancing authority states.\n\n  -Uses the PSLF system model format and power flow solver.\n\n  -Communicates with PSLF via Ironpython.\n\n  -Python 3 communicates with Ironpython via AMQP.\n\n  -Reads PSLF dyd files and creates python equivalents of one governor (tgov1).\n\n  -Implements a generic governor for models that are not fully created in Python (i.e. anything besides tgov1).\n\n  -Allows for noise, step, and ramp type perturbances\n\n## What this code doesn't do:\n\n  -Use definite time controllers to change the status of agents in the system according to user programmable logic.\n\n  -Handle tripping of any generator (power-flow solution mysteriously diverges).\n\n## Notes:\n* Requires GE PSLF Python API and valid PSLF licencse. (sorry)\n* To workaround GE API issues: Erlang, RabbitMQ, and Ironpython are required.\n* Additional Python packages include:\n    * Python 3: Scipy ( for Numpy and Matplotlib) and Pika (for AMQP)\n    * Ironpython 2.7 32 bit: Pika (Note: Ironpython must be 32 bit to work with GE PSLF middleware)\n\n### Recent Progress:\n* Code refactored to:\n    * Utilize Py3<->AMQP<->IPY<-> PSLF workarounds\n    * Allow for generic automation using agent current value dictionaries\n    * Enable easier code packaging\n    * Clarify code structure\n* Code creates python mirror of PSLF areas, buses, generators, loads, branch sections, and shunts.\n* Code has been written to:\n  * Check accuracy of mirror\n  * Ignore islanded objects\n  * Allow for optional Vsched or Vinit of bus Voltage setting\n  * Parse .dyd files (more than one)\n  * Parse .ltd files\n  * Handle H (inertia)\n  * Add noise, step, and ramp perturbances to most any agent value\n  * Set area wide governor deadbands\n  * Incorporate balancing authority actions into simulation\n  * Parse EIA data for multi-hour demand/forcast simulation\n  * Distribute changes in Pacc according to inertia\n  * Exectute Combined Swing equation\n  * Step dynamic modles (tgov1 and genericGov)\n  * Log values of interest\n  * Generate data dictionary\n  * Import/Export Mirror or data data dictionary via shelve\n  * Export Model or data data dictionary from Python 3.x to MATLAB .mat file\n  * Generate terminal output\n  * Generate plots via matplotlib\n  * Run multiple simulations in a batch style and handle errors in a non-show stopping way\n* MATLAB scripts created to verify and validate simulation outputs\n  * Frequency, Pe, Pm, Q, and Voltage Magnitude and Angle compared to PSDS.\n  * Branch power flow of P, Q, and I.\n  * Accounts for loss of system inertia and change in system losses.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thadhaines/PSLTDSim", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "PSLTDSim", "package_url": "https://pypi.org/project/PSLTDSim/", "platform": "", "project_url": "https://pypi.org/project/PSLTDSim/", "project_urls": {"Homepage": "https://github.com/thadhaines/PSLTDSim"}, "release_url": "https://pypi.org/project/PSLTDSim/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Power System Long-Term Dynamic Simulator", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PSLTDSim = Power System Long-Term Dynamic Simulator</h1>\n<p>Purpose:  Use Python and PSLF to simulate long-term power system dynamics.</p>\n<p>Examples of long-term dynamics:</p>\n<ol>\n<li>A 20 minute wind ramp that forces a governor action response that in turn affects the area control error (ACE) which is later corrected by automatic generator control (AGC [a.k.a. load frequency control or LFC]).</li>\n<li>A Generator is tripped in an area that is importing power. Governor action from other areas will respond before AGC works to restore tie-line balance.</li>\n<li>A multi-hour simulation of a daily load cycle and forcast used to assure AGC algorithm operates within NERC mandates.</li>\n</ol>\n<p>Warning: Work in progress - everything may be broken. Nothing guaranteed.</p>\n<p>To install package from git repository: \"pip install -e .\" from this directory with administrative privleges.\nIf python 3 32 bit is not default python: \"py -3-32 -m pip install -e .\"\nRequires IronPython (32 bit) to be on system path.</p>\n<h2>What this code does:</h2>\n<p>-Uses an agent-based approach to power system modeling.</p>\n<p>-Creates a time sequence of power flows while accounting for combined system frequency, all generator mechanical powers and associated staes along with balancing authority states.</p>\n<p>-Uses the PSLF system model format and power flow solver.</p>\n<p>-Communicates with PSLF via Ironpython.</p>\n<p>-Python 3 communicates with Ironpython via AMQP.</p>\n<p>-Reads PSLF dyd files and creates python equivalents of one governor (tgov1).</p>\n<p>-Implements a generic governor for models that are not fully created in Python (i.e. anything besides tgov1).</p>\n<p>-Allows for noise, step, and ramp type perturbances</p>\n<h2>What this code doesn't do:</h2>\n<p>-Use definite time controllers to change the status of agents in the system according to user programmable logic.</p>\n<p>-Handle tripping of any generator (power-flow solution mysteriously diverges).</p>\n<h2>Notes:</h2>\n<ul>\n<li>Requires GE PSLF Python API and valid PSLF licencse. (sorry)</li>\n<li>To workaround GE API issues: Erlang, RabbitMQ, and Ironpython are required.</li>\n<li>Additional Python packages include:\n<ul>\n<li>Python 3: Scipy ( for Numpy and Matplotlib) and Pika (for AMQP)</li>\n<li>Ironpython 2.7 32 bit: Pika (Note: Ironpython must be 32 bit to work with GE PSLF middleware)</li>\n</ul>\n</li>\n</ul>\n<h3>Recent Progress:</h3>\n<ul>\n<li>Code refactored to:\n<ul>\n<li>Utilize Py3&lt;-&gt;AMQP&lt;-&gt;IPY&lt;-&gt; PSLF workarounds</li>\n<li>Allow for generic automation using agent current value dictionaries</li>\n<li>Enable easier code packaging</li>\n<li>Clarify code structure</li>\n</ul>\n</li>\n<li>Code creates python mirror of PSLF areas, buses, generators, loads, branch sections, and shunts.</li>\n<li>Code has been written to:\n<ul>\n<li>Check accuracy of mirror</li>\n<li>Ignore islanded objects</li>\n<li>Allow for optional Vsched or Vinit of bus Voltage setting</li>\n<li>Parse .dyd files (more than one)</li>\n<li>Parse .ltd files</li>\n<li>Handle H (inertia)</li>\n<li>Add noise, step, and ramp perturbances to most any agent value</li>\n<li>Set area wide governor deadbands</li>\n<li>Incorporate balancing authority actions into simulation</li>\n<li>Parse EIA data for multi-hour demand/forcast simulation</li>\n<li>Distribute changes in Pacc according to inertia</li>\n<li>Exectute Combined Swing equation</li>\n<li>Step dynamic modles (tgov1 and genericGov)</li>\n<li>Log values of interest</li>\n<li>Generate data dictionary</li>\n<li>Import/Export Mirror or data data dictionary via shelve</li>\n<li>Export Model or data data dictionary from Python 3.x to MATLAB .mat file</li>\n<li>Generate terminal output</li>\n<li>Generate plots via matplotlib</li>\n<li>Run multiple simulations in a batch style and handle errors in a non-show stopping way</li>\n</ul>\n</li>\n<li>MATLAB scripts created to verify and validate simulation outputs\n<ul>\n<li>Frequency, Pe, Pm, Q, and Voltage Magnitude and Angle compared to PSDS.</li>\n<li>Branch power flow of P, Q, and I.</li>\n<li>Accounts for loss of system inertia and change in system losses.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6327232, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "72cfba27e5b883c0fd2d84f667c35114", "sha256": "deb4f6596b0ef19ef53fbfb3563eda1c0e391a3829772405af912fba868a2ad7"}, "downloads": -1, "filename": "PSLTDSim-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "72cfba27e5b883c0fd2d84f667c35114", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 128352, "upload_time": "2019-12-18T18:40:54", "upload_time_iso_8601": "2019-12-18T18:40:54.383107Z", "url": "https://files.pythonhosted.org/packages/49/1e/7b6b93893f368ab6d651764e050ed56c6209c305ad7de1087ab84e1ff623/PSLTDSim-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcd320c1a55b03bfde22cbb37512dd23", "sha256": "32ba05d6ccaa31e1b557932765dbe224f15a0025eb805c026d55d1c987eb5a5c"}, "downloads": -1, "filename": "PSLTDSim-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fcd320c1a55b03bfde22cbb37512dd23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 65716, "upload_time": "2019-12-18T18:40:57", "upload_time_iso_8601": "2019-12-18T18:40:57.935563Z", "url": "https://files.pythonhosted.org/packages/fd/8f/426791fa69fa1772df5d8e09b45d5aed7acf9aed086c5814dc0151ab8232/PSLTDSim-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "72cfba27e5b883c0fd2d84f667c35114", "sha256": "deb4f6596b0ef19ef53fbfb3563eda1c0e391a3829772405af912fba868a2ad7"}, "downloads": -1, "filename": "PSLTDSim-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "72cfba27e5b883c0fd2d84f667c35114", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 128352, "upload_time": "2019-12-18T18:40:54", "upload_time_iso_8601": "2019-12-18T18:40:54.383107Z", "url": "https://files.pythonhosted.org/packages/49/1e/7b6b93893f368ab6d651764e050ed56c6209c305ad7de1087ab84e1ff623/PSLTDSim-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcd320c1a55b03bfde22cbb37512dd23", "sha256": "32ba05d6ccaa31e1b557932765dbe224f15a0025eb805c026d55d1c987eb5a5c"}, "downloads": -1, "filename": "PSLTDSim-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fcd320c1a55b03bfde22cbb37512dd23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 65716, "upload_time": "2019-12-18T18:40:57", "upload_time_iso_8601": "2019-12-18T18:40:57.935563Z", "url": "https://files.pythonhosted.org/packages/fd/8f/426791fa69fa1772df5d8e09b45d5aed7acf9aed086c5814dc0151ab8232/PSLTDSim-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:52 2020"}