{"info": {"author": "Gregory Taylor", "author_email": "gtaylor@gc-taylor.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-mcauth\n=============\n\ndjango-mcauth is a pluggable authentication back-end that lets your users\nlogin with their Minecraft.net user/pass.\n\n.. warning:: Authentication against Minecraft.net auth servers is not\n    officially endorsed, and may cease to work at any time. Using a fallback\n    authentication backend (like Django's default) will prevent complete\n    failure if Notch ever decides to lock things down. Also keep in mind that\n    if you run a high traffic site, you may be asked to stop hitting the\n    Minecraft.net auth server.\n\nRequirements\n------------\n\n* Django 1.2+\n* Python 2.6 or 2.7 (I don't care to officially support 2.5)\n\nInstallation\n------------\n\nAdd ``'mcauth.backend.MinecraftAuthServerBackend'`` to your settings.py like\nso::\n\n    AUTHENTICATION_BACKENDS = (\n        'mcauth.backend.MinecraftAuthServerBackend',\n        'django.contrib.auth.backends.ModelBackend',\n    )\n\nIf you don't want to create new local Django users when someone logs in with\na valid user/pass, but doesn't already exist in the DB, you can do this in\nsettings.py::\n\n    # Only existing User objects can be authenticated against.\n    MCAUTH_CREATE_UNKNOWN_USERS = False\n\nSupport\n-------\n\nIf you have questions or ideas, or encounter bugs, add an entry to our\n`issue tracker`_.\n\n.. _issue tracker: https://github.com/gtaylor/django-mcauth/issues\n  \nLicense\n-------\n\ndjango-mcauth is licensed under the `BSD License`_.\n\n.. _BSD License: https://github.com/gtaylor/django-mcauth/blob/master/LICENSE", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gtaylor/django-mcauth/", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "mcauth", "package_url": "https://pypi.org/project/mcauth/", "platform": "any", "project_url": "https://pypi.org/project/mcauth/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gtaylor/django-mcauth/"}, "release_url": "https://pypi.org/project/mcauth/1.0/", "requires_dist": null, "requires_python": null, "summary": "Django backend for Minecraft.net authentication.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>django-mcauth is a pluggable authentication back-end that lets your users\nlogin with their Minecraft.net user/pass.</p>\n<div>\n<p>Warning</p>\n<p>Authentication against Minecraft.net auth servers is not\nofficially endorsed, and may cease to work at any time. Using a fallback\nauthentication backend (like Django\u2019s default) will prevent complete\nfailure if Notch ever decides to lock things down. Also keep in mind that\nif you run a high traffic site, you may be asked to stop hitting the\nMinecraft.net auth server.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Django 1.2+</li>\n<li>Python 2.6 or 2.7 (I don\u2019t care to officially support 2.5)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Add <tt>'mcauth.backend.MinecraftAuthServerBackend'</tt> to your settings.py like\nso:</p>\n<pre>AUTHENTICATION_BACKENDS = (\n    'mcauth.backend.MinecraftAuthServerBackend',\n    'django.contrib.auth.backends.ModelBackend',\n)\n</pre>\n<p>If you don\u2019t want to create new local Django users when someone logs in with\na valid user/pass, but doesn\u2019t already exist in the DB, you can do this in\nsettings.py:</p>\n<pre># Only existing User objects can be authenticated against.\nMCAUTH_CREATE_UNKNOWN_USERS = False\n</pre>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>If you have questions or ideas, or encounter bugs, add an entry to our\n<a href=\"https://github.com/gtaylor/django-mcauth/issues\" rel=\"nofollow\">issue tracker</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>django-mcauth is licensed under the <a href=\"https://github.com/gtaylor/django-mcauth/blob/master/LICENSE\" rel=\"nofollow\">BSD License</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 794578, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "97900b7b0b63a2b0f00ca545ec52556a", "sha256": "458e5677185d2e2b3bb5eb5586e10e9dd683e14860c855b9032e9b5f88ccb9e8"}, "downloads": -1, "filename": "mcauth-1.0.tar.gz", "has_sig": false, "md5_digest": "97900b7b0b63a2b0f00ca545ec52556a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3720, "upload_time": "2011-05-31T00:23:13", "upload_time_iso_8601": "2011-05-31T00:23:13.919297Z", "url": "https://files.pythonhosted.org/packages/df/ac/74e423ef7157c9df2b05e05e9db56cc44e3dee758b238a8fa3669c71bd9e/mcauth-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97900b7b0b63a2b0f00ca545ec52556a", "sha256": "458e5677185d2e2b3bb5eb5586e10e9dd683e14860c855b9032e9b5f88ccb9e8"}, "downloads": -1, "filename": "mcauth-1.0.tar.gz", "has_sig": false, "md5_digest": "97900b7b0b63a2b0f00ca545ec52556a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3720, "upload_time": "2011-05-31T00:23:13", "upload_time_iso_8601": "2011-05-31T00:23:13.919297Z", "url": "https://files.pythonhosted.org/packages/df/ac/74e423ef7157c9df2b05e05e9db56cc44e3dee758b238a8fa3669c71bd9e/mcauth-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:00 2020"}