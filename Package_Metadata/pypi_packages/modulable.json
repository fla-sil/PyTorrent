{"info": {"author": "baxbaxwalanuksiwe", "author_email": "baxbaxwalanuksiwe@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "modulable.py\r\n============\r\n\r\n|PyPI version| |License| |Supported Python| |Format| |Downloads|\r\n\r\n``modular.py`` is a small library that helps you write a modular and\r\nmaintainable codebase.\r\n\r\nThe library works with class: the loaded plug-ins are \"injected\" in\r\nthe given class. You can specify the way of injection, either by stacking\r\nfunctions, with the ``modulable`` decorator, by overloading the base method, with\r\nthe ``overridable`` decorator, and finally with the ``alternative`` decorator,\r\nwhich runs every function until it finds one that doesn't raise an exception.\r\n\r\nThose decorators conserve the original method's informations, such as name,\r\nmodule, docstring, and annotations.\r\n\r\n\r\nExample\r\n-------\r\n\r\nLet's say you want to build a modular shell, where the users can implement their\r\nown commands and prompt for example.\r\n\r\n.. code:: python3\r\n\r\n    from modular import *\r\n\r\n    class Shell(Modular, plugin_directory='plugins'):\r\n\r\nThis declares a modular class, whose plug-ins are in the ``plugins`` directory\r\nrelative to the current working directory.\r\n\r\nThe library will load every plug-in (must be a .py file) in that directory when\r\nthe class is instantiated.\r\n\r\nIt is convenient to declare a ``init`` method, called within the real\r\n``__init__`` constructor, to allow users to initialize their plug-in specific\r\nattributes:\r\n\r\n.. code:: python3\r\n\r\n    def __init__(self, *args, **kwds):\r\n        self.init(*args, **kwds)\r\n\r\n    @modulable\r\n    def init(self, *args, **kwds):\r\n        self.running = False\r\n\r\nHere, we decorate the ``init`` method with ``modulable``. That means every\r\nplug-ins' implementations of the ``init`` method will be executed with the given\r\narguments.\r\n\r\nNext, we want a function that is executed between every command, and, say, a\r\nmethod that returns the shell prompt:\r\n\r\n.. code:: python3\r\n\r\n    @modulable\r\n    def update(self):\r\n        pass\r\n\r\n    @overridable\r\n    def prompt(self):\r\n        return '> '\r\n\r\nThis time, we use the ``overridable`` decorator. This decorator uses the last\r\nimplementation of ``prompt`` loaded.\r\n\r\nLastly, we want a function that reacts on user input. What we want here is to\r\nrun every implementation until one works (i.e. doesn't raise an error). To do\r\nthat, you can use the ``alternative`` decorator which takes an exception type\r\nand calls every implementation one-by-one until one doesn't raise an error of\r\nthis type:\r\n\r\n.. code:: python3\r\n\r\n    @alternative(ValueError)\r\n    def react(self, i):\r\n        if i:\r\n            print('Unrecognized command:', repr(i))\r\n\r\nWe provide a default case here, if there isn't any implementation working.\r\n\r\nFinally, we define some non-modulable methods to make the whole thing works:\r\n\r\n.. code:: python3\r\n\r\n    def run(self):\r\n        self.running = True\r\n\r\n        while self.running:\r\n            i = input(self.prompt())\r\n            self.react(i)\r\n            self.update()\r\n\r\nFor instance, our shell doesn't implement any plug-in. Just for the example,\r\nwe'll implement a ``quit`` plug-in, which stops the shell when the user types in\r\n``quit``, a ``greet`` plug-in, and finally we'll customize our prompt.\r\n\r\nThe implementation of the ``quit`` command is pretty straight-forward:\r\n\r\n.. code:: python3\r\n\r\n    def react(self, i):\r\n        if i == 'quit':\r\n            self.running = False\r\n        else:\r\n            raise ValueError\r\n\r\nBy raising ``ValueError``, we delegate the input processing to the next\r\nimplementation of ``react``.\r\n\r\nThe ``greet`` plug-in does the same, with a bit more complex parsing:\r\n\r\n.. code:: python3\r\n\r\n    def react(self, i):\r\n        lexemes = i.split()\r\n\r\n        try:\r\n            if lexemes[0] == 'greet':\r\n                print('Hey', lexemes[1], '!')\r\n            else:\r\n                raise ValueError\r\n        except IndexError:\r\n            raise ValueError\r\n\r\nFinally, lets define a prompt that displays the command count:\r\n\r\n.. code:: python3\r\n\r\n    def init(self, *args, **kwds):\r\n        self.command_count = 0\r\n\r\n    def update(self):\r\n        self.command_count += 1\r\n\r\n    def prompt(self):\r\n        return '[{}]: '.format(self.command_count)\r\n\r\nThe plug-ins must be contained in the specified plug-in directory in the class\r\ndeclaration, here, ``plugins``. You should have a similar directory tree:\r\n\r\n::\r\n\r\n    .\r\n    \u251c\u2500\u2500 plugins\r\n    \u2502   \u251c\u2500\u2500 command_count_prompt.py\r\n    \u2502   \u251c\u2500\u2500 greet.py\r\n    \u2502   \u2514\u2500\u2500 quit.py\r\n    \u2514\u2500\u2500 shell.py\r\n\r\nTo use this class, simply instantiate a ``Shell`` object and call its ``run``\r\nmethod:\r\n\r\n.. code:: python3\r\n\r\n    sh = Shell()\r\n    sh.run()\r\n\r\nHere's what it does:\r\n\r\n::\r\n\r\n    [0]:\r\n    [1]:\r\n    [2]: greet Jonathan\r\n    Hey Jonathan !\r\n    [3]:\r\n    [4]:\r\n    [5]: unknown command\r\n    Unrecognized command: 'unknown command'\r\n    [6]:\r\n    [7]: quit\r\n\r\nYou can see the complete code in the `example directory`_.\r\n\r\n\r\nAdvanced use\r\n------------\r\n\r\nYou can temporarily load a plug-in with the ``plugin`` context manager:\r\n\r\n.. code:: python3\r\n\r\n    with Shell.plugin('greet'):\r\n        sh.run()\r\n\r\nYou can also check the loaded plug-ins by typing ``Shell.loaded_plugins``.\r\n\r\nFinally, there is an optional ``virtual`` keyword argument at class definition.\r\n``virtual`` is set to ``False`` by default, but if set to ``True``, the class\r\nwill not load the plug-ins automatically:\r\n\r\n.. code:: python3\r\n\r\n    class AbstractShell(Modular, plugins='plugins', virtual=True):\r\n        ...\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n* Via `pip`_:\r\n\r\n.. code:: bash\r\n\r\n    $ pip install modulable\r\n\r\n\r\nAnd, if you're on Linux, and face a permission error, make sure to\r\nrun ``sudo`` with the ``-H`` option:\r\n\r\n.. code:: bash\r\n\r\n    $ sudo -H pip install modulable\r\n\r\n* Via `git`_:\r\n\r\n.. code:: bash\r\n\r\n    $ git clone http://github.com/felko/modulable.git\r\n    $ cd modulable\r\n    $ sudo -H python3.4 setup.py install\r\n\r\nOr, if you're on Windows:\r\n\r\n.. code:: bash\r\n\r\n    $ git clone http://github.com/felko/modulable.git\r\n    $ cd modulable\r\n    $ py -3.4 setup.py install\r\n\r\nIf you don't have `git`_, you can download the zip file `here <https://github.com/felko/modulable/archive/master.zip>`_.\r\n\r\n\r\nLinks\r\n-----\r\n\r\n- GitHub: http://github.com/felko/modulable\r\n- Issue Tracker: http://github.com/feko/modulable/issues\r\n- PyPI: http://pypi.python.org/pypi/modulable\r\n- Download: http://pypi.python.org/pypi/modulable#downloads\r\n\r\n\r\nLicense\r\n-------\r\n\r\n``modulable`` is distributed under the `MIT license`_.\r\n\r\n\r\n.. _pip: http://pip.readthedocs.io/\r\n.. _example directory: https://github.com/felko/modulable/tree/master/examples\r\n.. _MIT license: http://opensource.org/licenses/MIT\r\n.. _git: https://git-scm.com/\r\n\r\n\r\n.. |PyPI version| image:: https://img.shields.io/pypi/v/modulable.svg\r\n    :target: https://pypi.python.org/pypi/modulable\r\n    :alt: Latest PyPI Version\r\n.. |License| image:: https://img.shields.io/pypi/l/modulable.svg\r\n    :target: https://pypi.python.org/pypi/modulable\r\n    :alt: License\r\n.. |Supported Python| image:: https://img.shields.io/pypi/pyversions/modulable.svg\r\n    :target: https://pypi.python.org/pypi/modulable\r\n    :alt: Supported Python Versions\r\n.. |Format| image:: https://img.shields.io/pypi/format/modulable.svg\r\n    :target: https://pypi.python.org/pypi/modulable\r\n    :alt: Format\r\n.. |Downloads| image:: https://img.shields.io/pypi/dm/modulable.svg\r\n    :target: https://pypi.python.org/pypi/modulable\r\n    :alt: Downloads", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/felko/modulable", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/felko/modulable", "keywords": "plugin module framework extensible", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "modulable", "package_url": "https://pypi.org/project/modulable/", "platform": "any", "project_url": "https://pypi.org/project/modulable/", "project_urls": {"Download": "https://github.com/felko/modulable", "Homepage": "https://github.com/felko/modulable"}, "release_url": "https://pypi.org/project/modulable/1.0/", "requires_dist": null, "requires_python": null, "summary": "A lightweight library for writing modular code", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/modulable\" rel=\"nofollow\"><img alt=\"Latest PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be25c2d47a4427bafc44b67013dbecf6178c4c78/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6f64756c61626c652e737667\"></a> <a href=\"https://pypi.python.org/pypi/modulable\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06b2fee1d1987bec5440c6375ca597d977d28f0f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d6f64756c61626c652e737667\"></a> <a href=\"https://pypi.python.org/pypi/modulable\" rel=\"nofollow\"><img alt=\"Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7a3b8870cabc596e3f56cc21aa31daa5a639a7a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d6f64756c61626c652e737667\"></a> <a href=\"https://pypi.python.org/pypi/modulable\" rel=\"nofollow\"><img alt=\"Format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cebbe5a8500e7a96d5f5f598e2aa4058d6c382a5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f6d6f64756c61626c652e737667\"></a> <a href=\"https://pypi.python.org/pypi/modulable\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f5bdf61997ecd642f51a43c38e39062913e833d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d6f64756c61626c652e737667\"></a></p>\n<p><tt>modular.py</tt> is a small library that helps you write a modular and\nmaintainable codebase.</p>\n<p>The library works with class: the loaded plug-ins are \u201cinjected\u201d in\nthe given class. You can specify the way of injection, either by stacking\nfunctions, with the <tt>modulable</tt> decorator, by overloading the base method, with\nthe <tt>overridable</tt> decorator, and finally with the <tt>alternative</tt> decorator,\nwhich runs every function until it finds one that doesn\u2019t raise an exception.</p>\n<p>Those decorators conserve the original method\u2019s informations, such as name,\nmodule, docstring, and annotations.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Let\u2019s say you want to build a modular shell, where the users can implement their\nown commands and prompt for example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">modular</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Shell</span><span class=\"p\">(</span><span class=\"n\">Modular</span><span class=\"p\">,</span> <span class=\"n\">plugin_directory</span><span class=\"o\">=</span><span class=\"s1\">'plugins'</span><span class=\"p\">):</span>\n</pre>\n<p>This declares a modular class, whose plug-ins are in the <tt>plugins</tt> directory\nrelative to the current working directory.</p>\n<p>The library will load every plug-in (must be a .py file) in that directory when\nthe class is instantiated.</p>\n<p>It is convenient to declare a <tt>init</tt> method, called within the real\n<tt>__init__</tt> constructor, to allow users to initialize their plug-in specific\nattributes:</p>\n<pre><span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@modulable</span>\n<span class=\"k\">def</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">running</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p>Here, we decorate the <tt>init</tt> method with <tt>modulable</tt>. That means every\nplug-ins\u2019 implementations of the <tt>init</tt> method will be executed with the given\narguments.</p>\n<p>Next, we want a function that is executed between every command, and, say, a\nmethod that returns the shell prompt:</p>\n<pre><span class=\"nd\">@modulable</span>\n<span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@overridable</span>\n<span class=\"k\">def</span> <span class=\"nf\">prompt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'&gt; '</span>\n</pre>\n<p>This time, we use the <tt>overridable</tt> decorator. This decorator uses the last\nimplementation of <tt>prompt</tt> loaded.</p>\n<p>Lastly, we want a function that reacts on user input. What we want here is to\nrun every implementation until one works (i.e. doesn\u2019t raise an error). To do\nthat, you can use the <tt>alternative</tt> decorator which takes an exception type\nand calls every implementation one-by-one until one doesn\u2019t raise an error of\nthis type:</p>\n<pre><span class=\"nd\">@alternative</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">react</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Unrecognized command:'</span><span class=\"p\">,</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n</pre>\n<p>We provide a default case here, if there isn\u2019t any implementation working.</p>\n<p>Finally, we define some non-modulable methods to make the whole thing works:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">running</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">while</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">running</span><span class=\"p\">:</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prompt</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">react</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n</pre>\n<p>For instance, our shell doesn\u2019t implement any plug-in. Just for the example,\nwe\u2019ll implement a <tt>quit</tt> plug-in, which stops the shell when the user types in\n<tt>quit</tt>, a <tt>greet</tt> plug-in, and finally we\u2019ll customize our prompt.</p>\n<p>The implementation of the <tt>quit</tt> command is pretty straight-forward:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">react</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s1\">'quit'</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">running</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n</pre>\n<p>By raising <tt>ValueError</tt>, we delegate the input processing to the next\nimplementation of <tt>react</tt>.</p>\n<p>The <tt>greet</tt> plug-in does the same, with a bit more complex parsing:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">react</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"n\">lexemes</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">lexemes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'greet'</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hey'</span><span class=\"p\">,</span> <span class=\"n\">lexemes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s1\">'!'</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n    <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n</pre>\n<p>Finally, lets define a prompt that displays the command count:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prompt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'[</span><span class=\"si\">{}</span><span class=\"s1\">]: '</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command_count</span><span class=\"p\">)</span>\n</pre>\n<p>The plug-ins must be contained in the specified plug-in directory in the class\ndeclaration, here, <tt>plugins</tt>. You should have a similar directory tree:</p>\n<pre>.\n\u251c\u2500\u2500 plugins\n\u2502   \u251c\u2500\u2500 command_count_prompt.py\n\u2502   \u251c\u2500\u2500 greet.py\n\u2502   \u2514\u2500\u2500 quit.py\n\u2514\u2500\u2500 shell.py\n</pre>\n<p>To use this class, simply instantiate a <tt>Shell</tt> object and call its <tt>run</tt>\nmethod:</p>\n<pre><span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">Shell</span><span class=\"p\">()</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Here\u2019s what it does:</p>\n<pre>[0]:\n[1]:\n[2]: greet Jonathan\nHey Jonathan !\n[3]:\n[4]:\n[5]: unknown command\nUnrecognized command: 'unknown command'\n[6]:\n[7]: quit\n</pre>\n<p>You can see the complete code in the <a href=\"https://github.com/felko/modulable/tree/master/examples\" rel=\"nofollow\">example directory</a>.</p>\n</div>\n<div id=\"advanced-use\">\n<h2>Advanced use</h2>\n<p>You can temporarily load a plug-in with the <tt>plugin</tt> context manager:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Shell</span><span class=\"o\">.</span><span class=\"n\">plugin</span><span class=\"p\">(</span><span class=\"s1\">'greet'</span><span class=\"p\">):</span>\n    <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>You can also check the loaded plug-ins by typing <tt>Shell.loaded_plugins</tt>.</p>\n<p>Finally, there is an optional <tt>virtual</tt> keyword argument at class definition.\n<tt>virtual</tt> is set to <tt>False</tt> by default, but if set to <tt>True</tt>, the class\nwill not load the plug-ins automatically:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AbstractShell</span><span class=\"p\">(</span><span class=\"n\">Modular</span><span class=\"p\">,</span> <span class=\"n\">plugins</span><span class=\"o\">=</span><span class=\"s1\">'plugins'</span><span class=\"p\">,</span> <span class=\"n\">virtual</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Via <a href=\"http://pip.readthedocs.io/\" rel=\"nofollow\">pip</a>:</li>\n</ul>\n<pre>$ pip install modulable\n</pre>\n<p>And, if you\u2019re on Linux, and face a permission error, make sure to\nrun <tt>sudo</tt> with the <tt><span class=\"pre\">-H</span></tt> option:</p>\n<pre>$ sudo -H pip install modulable\n</pre>\n<ul>\n<li>Via <a href=\"https://git-scm.com/\" rel=\"nofollow\">git</a>:</li>\n</ul>\n<pre>$ git clone http://github.com/felko/modulable.git\n$ <span class=\"nb\">cd</span> modulable\n$ sudo -H python3.4 setup.py install\n</pre>\n<p>Or, if you\u2019re on Windows:</p>\n<pre>$ git clone http://github.com/felko/modulable.git\n$ <span class=\"nb\">cd</span> modulable\n$ py -3.4 setup.py install\n</pre>\n<p>If you don\u2019t have <a href=\"https://git-scm.com/\" rel=\"nofollow\">git</a>, you can download the zip file <a href=\"https://github.com/felko/modulable/archive/master.zip\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>GitHub: <a href=\"http://github.com/felko/modulable\" rel=\"nofollow\">http://github.com/felko/modulable</a></li>\n<li>Issue Tracker: <a href=\"http://github.com/feko/modulable/issues\" rel=\"nofollow\">http://github.com/feko/modulable/issues</a></li>\n<li>PyPI: <a href=\"http://pypi.python.org/pypi/modulable\" rel=\"nofollow\">http://pypi.python.org/pypi/modulable</a></li>\n<li>Download: <a href=\"http://pypi.python.org/pypi/modulable#downloads\" rel=\"nofollow\">http://pypi.python.org/pypi/modulable#downloads</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><tt>modulable</tt> is distributed under the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT license</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2402294, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "ec656db02210f8e14f678e0c15d775dd", "sha256": "3ba8e49194a7545313494451587b678b87ebce7cb7dab26d23c9dca74c68c7c2"}, "downloads": -1, "filename": "modulable-1.0.zip", "has_sig": false, "md5_digest": "ec656db02210f8e14f678e0c15d775dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10958, "upload_time": "2016-10-16T12:28:59", "upload_time_iso_8601": "2016-10-16T12:28:59.088534Z", "url": "https://files.pythonhosted.org/packages/d9/82/57992c779a18f962f10f633259f09bbd281c947fe9cac877a2f56f22386a/modulable-1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ec656db02210f8e14f678e0c15d775dd", "sha256": "3ba8e49194a7545313494451587b678b87ebce7cb7dab26d23c9dca74c68c7c2"}, "downloads": -1, "filename": "modulable-1.0.zip", "has_sig": false, "md5_digest": "ec656db02210f8e14f678e0c15d775dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10958, "upload_time": "2016-10-16T12:28:59", "upload_time_iso_8601": "2016-10-16T12:28:59.088534Z", "url": "https://files.pythonhosted.org/packages/d9/82/57992c779a18f962f10f633259f09bbd281c947fe9cac877a2f56f22386a/modulable-1.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:52:44 2020"}