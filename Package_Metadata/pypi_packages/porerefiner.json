{"info": {"author": "Justin Payne", "author_email": "justin.payne@fda.hhs.gov", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.7"], "description": "===========\nPoreRefiner\n===========\n\n\n.. image:: https://img.shields.io/pypi/v/porerefiner.svg\n        :target: https://pypi.python.org/pypi/porerefiner\n\n.. image:: https://img.shields.io/travis/crashfrog/porerefiner.svg\n        :target: https://travis-ci.org/crashfrog/porerefiner\n\n.. image:: https://readthedocs.org/projects/porerefiner/badge/?version=latest\n        :target: https://porerefiner.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nTo help you manage your pores\n\n\n* Free software: MIT license\n* Documentation: https://porerefiner.readthedocs.io.\n\n\nIntroduction\n------------\n\nPoreRefiner is a software tool to watch Nanopore runs in progress and attach sample information to them, as well as provide an interface for integration with LIMS services and other online systems. It supports both push and pull modalities for data exchange with those systems - push, via a series of configurable notifiers, and pull, via a simple Flask webservice and a Protobuf RPC service. It also includes a command-line interface for working with the run database.\n\nWhat is it?\n-----------\n\nYou install it on your GridION. It watches the data output directory and notes the creation and modification of sequencing output files. You can attach sample sheets to runs, for instance when you're multiplexing samples - the MinKnow software is agnostic to sample membership in libraries, so maybe you want something to keep track of that. Then when the run completes (is idle for a period of time) a series of configurable events are triggered. That's often pretty useful for, let's say, sending data to your LIMS or through some kind of biosurveillance pipeline.\n\nInstallation\n------------\n\nPoreRefiner is available as a Python package:\n\n::\n\n    pip install porerefiner\n\nPorerefiner can be started as a simple UNIX daemon:\n\n::\n\n    porerefinerd start --daemonize\n\nbut also includes service unit files for administration via ``systemctl``.\n\nCopy the files ``porerefiner.service`` and ``porerefiner.app.service`` from the package to systemd:\n\n::\n\n    cp /usr/local/lib/python3.7/dist-packages/porerefiner/porerefiner.service /lib/systemd/system\n    cp /usr/local/lib/python3.7/dist-packages/porerefiner/porerefiner.app.service /lib/systemd/system\n    systemctl enable porerefiner.service\n    systemctl enable porerefiner.app.service\n\nOnce the package is installed, ``porerefinerd`` and ``prfr`` should be on your path. You can use ``porerefinerd init`` to set up the config file for the porerefiner service, it will prompt you for the save locations of the database, the local socket, nanopore's output directory, and where the config file should be saved:\n\n::\n\n    $ porerefinerd init\n    create PoreRefiner config at /etc/porerefiner/config.yaml? [y/N]: y\n    location of porerefiner RPC socket? [/etc/porerefiner/porerefiner.sock]:\n    location of database? [/etc/porerefiner/database.db]:\n    nanopore data output location?: /data\n    export POREREFINER_CONFIG=\"/etc/porerefiner/config.yaml\"\n\nThen you can start the porerefiner services:\n\n::\n\n    systemctl start porerefiner.service\n    systemctl start porerefiner.app.service\n\nIf you wish to enable the PoreRefiner web interface, you should ensure that port 8844 is reachable from remote hosts.\n\nWriting Plugins\n---------------\n\nPoreRefiner has a plugin architecture; pip-installable Python packages can make themselves known to PoreRefiner using entry_points in ``setup.py``. The easiest way to write your own plugin notifiers, jobs, and submitters for PoreRefiner is to use the cookiecutter template:\n\n::\n\n    $ cookiecutter https://github.com/CFSAN-Biostatistics/new-porerefiner-plugin\n    project_name [My Porerefiner Plugin]:\n    project_slug [my_porerefiner_plugin]:\n    project_short_description [This is a plugin for Porerefiner, a tool for managining Nanopore sequencing.]:\n\nSee the Cookiecutter docs: https://cookiecutter.readthedocs.io/en/1.7.0/\n\nCookiecutter will create a full project repo and stub classes for your plugin. Open ``<project_slug>/<project_slug>/<project_slug>.py`` and you can fill in the method code blocks to implement the various functions of the necessary interfaces.\n\nNotifiers\n=========\n\nNotifiers are \"fire and forget\" handlers for \"end-of-run\" events; when an hour has elapsed since the last modification of a file in a run (or whatever idle time is configured in ``config.yaml``, the configured notifiers will be fired off with the run event. Out of the box, PoreRefiner comes with three notifiers - a notifier to send OS-based popup \"toast\" notifications (if ``pynotifier`` is installed), a notifier to make an HTTP request to a defined endpoint, and a notifier to send a message into an Amazon Web Services Simple Queue Service (SQS) queue. Notifiers differ from jobs in that they're assumed to run quickly/instantly and therefore they're executed synchronously. As a result a long-running notifier can hang the software. For tasks that can't execute quickly (copying files, etc), use a job.\n\nJobs\n====\n\nJobs are processes that are assumed to take longer to execute and thus should execute asynchronously. As a result the job handler interface is more complex, and jobs require submitters to execute to (described below.) Jobs can be triggered either on the idle timeout of an individual file, or of the entire run, simply by extending the appropriate superclass - `FileJob` and `RunJob`. The PoreRefiner software will dispatch the correct configured job type, collect any type of process or job ID that is returned, and periodically poll the job's submitter for completion status. A run's in-progress jobs can be viewed through the ``prfr`` tool.\n\nSubmitters\n==========\n\nSubmitters are the interface between jobs and the execution system. For instance, the ``HpcSubmitter`` knows how to use SSH to execute commands on a typical HPC using ``qsub``. PoreRefiner has an additional ``LocalSubmitter`` which simply runs commands locally, in a subprocess.\n\nHere's an example of a simple post-run workflow configuration using the generic file job and the local submitter:\n\n::\n\n    submitters:\n    - class: LocalSubmitter\n      jobs:\n      - class: GenericFileJob\n        config:\n          command: cp {file.path} /network/output/{run.name}/{file.name}\n\nMore examples to come in the Porerefiner Config Cookbook:\n\nhttps://github.com/crashfrog/porerefiner-config-cookbook\n\nIf you develop a useful or interesting config, please consider contributing it to the cookbook using a pull request.\n\n\n\n\nUsing this software\n-------------------\n\n``prfr`` is the end-user client; Minion users should use this tool to monitor runs in progress, load sample sheets, and tag runs and samples.\n\n::\n\n    $ prfr --help\n    Usage: prfr [OPTIONS] COMMAND [ARGS]...\n\n      Command line interface for PoreRefiner, a Nanopore run manager.\n\n    Options:\n    --help  Show this message and exit.\n\n    Commands:\n    info      Return information about a run, historical or in progress.\n    load      Load a sample sheet to be attached to a run, or to the next run...\n    ps        Show runs in progress, or every tracked run (--all), or with a...\n    tag       Add one or more tags to a run.\n    template  Write a sample sheet template to STDOUT.\n    untag     Remove one or more tags from a run.\n\nIf the web service is enabled, users can also upload and attach sample sheets using the web interface.\n\n\nAdministration\n--------------\n\nWhen the PoreRefiner service ``porerefinerd`` is stopped, it has a number of administrative functions:\n\n::\n\n    $ porerefinerd --help\n    Usage: porerefiner.py [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n    --help  Show this message and exit.\n\n    Commands:\n    init    Find the Nanopore output directory and create the config file.\n    list    List job system stuff.\n    reset   Utility function to reset various state.\n    start   Start the PoreRefiner service.\n    verify  Run various checks.\n\n::\n\n    $ porerefinerd init --help\n    Usage: porerefiner.py init [OPTIONS]\n\n    Find the Nanopore output directory and create the config file.\n\n    Options:\n    --config TEXT\n    --nanopore_dir TEXT\n    --help               Show this message and exit.\n\n::\n\n    $ porerefinerd list --help\n    Usage: porerefiner.py list [OPTIONS] COMMAND [ARGS]...\n\n    List job system stuff.\n\n    Options:\n    --help  Show this message and exit.\n\n    Commands:\n    jobs        List the configurable and configured jobs.\n    notifiers   List the configurable and configured notifiers.\n    submitters  List the configureable and configured submitters.\n\n::\n\n    $ porerefinerd reset --help\n    Usage: porerefiner.py reset [OPTIONS] COMMAND [ARGS]...\n\n    Utility function to reset various state.\n\n    Options:\n    --help  Show this message and exit.\n\n    Commands:\n    config        Reset config to defaults.\n    database      Reset database to empty state.\n    jobs          Reset all jobs to a particular status.\n    runs          Reset all runs to in-progress status.\n    samplesheets  Clear samplesheets that aren't attached to any run.\n\n::\n\n    $ porerefinerd verify --help\n    Usage: porerefiner.py verify [OPTIONS] COMMAND [ARGS]...\n\n    Run various checks.\n\n    Options:\n    --help  Show this message and exit.\n\n    Commands:\n    notifiers   Verify notifiers by sending notifications.\n    submitters  Verify configuration of job submitters by running their tests.\n\n\nFeatures\n--------\n\nAutomatic detection of runs in progress\n\nSample sheet and sample tracking through the flowcell/run context, and beyond\n\nSchedule automatic analysis of runs and files in AWS or your HPC\n\nHow it works\n------------\n\nPoreRefiner uses fsevents to detect filesystem events during a Nanopore run, including the creating of new directories in the Nanopore output folder. Flowcells, runs, and run files can be detected this way. PoreRefiner will update a SQLite database with run information, including what it's able to pull out of Minknow.\n\nIf all of the files of a run have not been modified in an hour, PoreRefiner will mark a completion time for that run. If any of the files in a run have not been modified in an hour, they may be picked up by the Job runner for some subsequent processing.\n\nPoreRefiner presents many interfaces to address integration challenges:\n\nA CLI interface for both human use and simple scripting\n\nA simple HTTP service for communication with LIMS and other services\n\nA Protobuf-RPC service for inter-process communication (Protobuf bindings are available in Python, C, JavaScript, Java, and many other languages)\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.8.4 (2020-03-23)\n------------------\n\n* New plugin architecture, combined with a cookiecutter definition for creating new ones\n* Removed several in-progress job/submitter types to plugins\n\n0.8.3 (2020-03-13)\n------------------\n\n* ``prfr`` now recognizes site config if user config doesn't exist\n\n0.8.2 (2020-03-12)\n------------------\n\n* Fixed tests, general bugfixes\n\n0.8.1 (2020-03-11)\n------------------\n\n* Improved service files.\n\n0.8.0 (2020-03-09)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CFSAN-Biostatistics/porerefiner", "keywords": "porerefiner", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "porerefiner", "package_url": "https://pypi.org/project/porerefiner/", "platform": "", "project_url": "https://pypi.org/project/porerefiner/", "project_urls": {"Homepage": "https://github.com/CFSAN-Biostatistics/porerefiner"}, "release_url": "https://pypi.org/project/porerefiner/0.8.5/", "requires_dist": ["Click (>=7.0)", "flask (>=1.1.1)", "peewee (>=3.11.2)", "gunicorn (>=19.9.0)", "watchdog (>=0.9.0)", "hachiko (>=0.2.0)", "aiohttp (>=3.6.1)", "namesgenerator (>=0.3)", "python-daemon (>=2.2.3)", "protobuf (>=3.10.0)", "grpclib (>=0.3.0)", "tabulate (>=0.8.5)", "asyncssh (>=2.0.1)", "setproctitle (>=1.1.10)", "pyyaml (>=5.3)"], "requires_python": ">=3.7", "summary": "To help you manage your pores", "version": "0.8.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"porerefiner\">\n<h2>PoreRefiner</h2>\n<a href=\"https://pypi.python.org/pypi/porerefiner\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/porerefiner.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ad3d1c95bf75df20049f31d0ca0d5fb126987b4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706f7265726566696e65722e737667\"></a>\n<a href=\"https://travis-ci.org/crashfrog/porerefiner\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/crashfrog/porerefiner.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a998abd127980887258f59715e1d4a98f0f6653a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f637261736866726f672f706f7265726566696e65722e737667\"></a>\n<a href=\"https://porerefiner.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/493f7c1b9cdc03f7b94cb07e409ebf6073980c19/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f706f7265726566696e65722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>To help you manage your pores</p>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://porerefiner.readthedocs.io\" rel=\"nofollow\">https://porerefiner.readthedocs.io</a>.</li>\n</ul>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>PoreRefiner is a software tool to watch Nanopore runs in progress and attach sample information to them, as well as provide an interface for integration with LIMS services and other online systems. It supports both push and pull modalities for data exchange with those systems - push, via a series of configurable notifiers, and pull, via a simple Flask webservice and a Protobuf RPC service. It also includes a command-line interface for working with the run database.</p>\n</div>\n<div id=\"what-is-it\">\n<h3>What is it?</h3>\n<p>You install it on your GridION. It watches the data output directory and notes the creation and modification of sequencing output files. You can attach sample sheets to runs, for instance when you\u2019re multiplexing samples - the MinKnow software is agnostic to sample membership in libraries, so maybe you want something to keep track of that. Then when the run completes (is idle for a period of time) a series of configurable events are triggered. That\u2019s often pretty useful for, let\u2019s say, sending data to your LIMS or through some kind of biosurveillance pipeline.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>PoreRefiner is available as a Python package:</p>\n<pre>pip install porerefiner\n</pre>\n<p>Porerefiner can be started as a simple UNIX daemon:</p>\n<pre>porerefinerd start --daemonize\n</pre>\n<p>but also includes service unit files for administration via <tt>systemctl</tt>.</p>\n<p>Copy the files <tt>porerefiner.service</tt> and <tt>porerefiner.app.service</tt> from the package to systemd:</p>\n<pre>cp /usr/local/lib/python3.7/dist-packages/porerefiner/porerefiner.service /lib/systemd/system\ncp /usr/local/lib/python3.7/dist-packages/porerefiner/porerefiner.app.service /lib/systemd/system\nsystemctl enable porerefiner.service\nsystemctl enable porerefiner.app.service\n</pre>\n<p>Once the package is installed, <tt>porerefinerd</tt> and <tt>prfr</tt> should be on your path. You can use <tt>porerefinerd init</tt> to set up the config file for the porerefiner service, it will prompt you for the save locations of the database, the local socket, nanopore\u2019s output directory, and where the config file should be saved:</p>\n<pre>$ porerefinerd init\ncreate PoreRefiner config at /etc/porerefiner/config.yaml? [y/N]: y\nlocation of porerefiner RPC socket? [/etc/porerefiner/porerefiner.sock]:\nlocation of database? [/etc/porerefiner/database.db]:\nnanopore data output location?: /data\nexport POREREFINER_CONFIG=\"/etc/porerefiner/config.yaml\"\n</pre>\n<p>Then you can start the porerefiner services:</p>\n<pre>systemctl start porerefiner.service\nsystemctl start porerefiner.app.service\n</pre>\n<p>If you wish to enable the PoreRefiner web interface, you should ensure that port 8844 is reachable from remote hosts.</p>\n</div>\n<div id=\"writing-plugins\">\n<h3>Writing Plugins</h3>\n<p>PoreRefiner has a plugin architecture; pip-installable Python packages can make themselves known to PoreRefiner using entry_points in <tt>setup.py</tt>. The easiest way to write your own plugin notifiers, jobs, and submitters for PoreRefiner is to use the cookiecutter template:</p>\n<pre>$ cookiecutter https://github.com/CFSAN-Biostatistics/new-porerefiner-plugin\nproject_name [My Porerefiner Plugin]:\nproject_slug [my_porerefiner_plugin]:\nproject_short_description [This is a plugin for Porerefiner, a tool for managining Nanopore sequencing.]:\n</pre>\n<p>See the Cookiecutter docs: <a href=\"https://cookiecutter.readthedocs.io/en/1.7.0/\" rel=\"nofollow\">https://cookiecutter.readthedocs.io/en/1.7.0/</a></p>\n<p>Cookiecutter will create a full project repo and stub classes for your plugin. Open <tt><span class=\"pre\">&lt;project_slug&gt;/&lt;project_slug&gt;/&lt;project_slug&gt;.py</span></tt> and you can fill in the method code blocks to implement the various functions of the necessary interfaces.</p>\n<div id=\"notifiers\">\n<h4>Notifiers</h4>\n<p>Notifiers are \u201cfire and forget\u201d handlers for \u201cend-of-run\u201d events; when an hour has elapsed since the last modification of a file in a run (or whatever idle time is configured in <tt>config.yaml</tt>, the configured notifiers will be fired off with the run event. Out of the box, PoreRefiner comes with three notifiers - a notifier to send OS-based popup \u201ctoast\u201d notifications (if <tt>pynotifier</tt> is installed), a notifier to make an HTTP request to a defined endpoint, and a notifier to send a message into an Amazon Web Services Simple Queue Service (SQS) queue. Notifiers differ from jobs in that they\u2019re assumed to run quickly/instantly and therefore they\u2019re executed synchronously. As a result a long-running notifier can hang the software. For tasks that can\u2019t execute quickly (copying files, etc), use a job.</p>\n</div>\n<div id=\"jobs\">\n<h4>Jobs</h4>\n<p>Jobs are processes that are assumed to take longer to execute and thus should execute asynchronously. As a result the job handler interface is more complex, and jobs require submitters to execute to (described below.) Jobs can be triggered either on the idle timeout of an individual file, or of the entire run, simply by extending the appropriate superclass - <cite>FileJob</cite> and <cite>RunJob</cite>. The PoreRefiner software will dispatch the correct configured job type, collect any type of process or job ID that is returned, and periodically poll the job\u2019s submitter for completion status. A run\u2019s in-progress jobs can be viewed through the <tt>prfr</tt> tool.</p>\n</div>\n<div id=\"submitters\">\n<h4>Submitters</h4>\n<p>Submitters are the interface between jobs and the execution system. For instance, the <tt>HpcSubmitter</tt> knows how to use SSH to execute commands on a typical HPC using <tt>qsub</tt>. PoreRefiner has an additional <tt>LocalSubmitter</tt> which simply runs commands locally, in a subprocess.</p>\n<p>Here\u2019s an example of a simple post-run workflow configuration using the generic file job and the local submitter:</p>\n<pre>submitters:\n- class: LocalSubmitter\n  jobs:\n  - class: GenericFileJob\n    config:\n      command: cp {file.path} /network/output/{run.name}/{file.name}\n</pre>\n<p>More examples to come in the Porerefiner Config Cookbook:</p>\n<p><a href=\"https://github.com/crashfrog/porerefiner-config-cookbook\" rel=\"nofollow\">https://github.com/crashfrog/porerefiner-config-cookbook</a></p>\n<p>If you develop a useful or interesting config, please consider contributing it to the cookbook using a pull request.</p>\n</div>\n</div>\n<div id=\"using-this-software\">\n<h3>Using this software</h3>\n<p><tt>prfr</tt> is the end-user client; Minion users should use this tool to monitor runs in progress, load sample sheets, and tag runs and samples.</p>\n<pre>$ prfr --help\nUsage: prfr [OPTIONS] COMMAND [ARGS]...\n\n  Command line interface for PoreRefiner, a Nanopore run manager.\n\nOptions:\n--help  Show this message and exit.\n\nCommands:\ninfo      Return information about a run, historical or in progress.\nload      Load a sample sheet to be attached to a run, or to the next run...\nps        Show runs in progress, or every tracked run (--all), or with a...\ntag       Add one or more tags to a run.\ntemplate  Write a sample sheet template to STDOUT.\nuntag     Remove one or more tags from a run.\n</pre>\n<p>If the web service is enabled, users can also upload and attach sample sheets using the web interface.</p>\n</div>\n<div id=\"administration\">\n<h3>Administration</h3>\n<p>When the PoreRefiner service <tt>porerefinerd</tt> is stopped, it has a number of administrative functions:</p>\n<pre>$ porerefinerd --help\nUsage: porerefiner.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n--help  Show this message and exit.\n\nCommands:\ninit    Find the Nanopore output directory and create the config file.\nlist    List job system stuff.\nreset   Utility function to reset various state.\nstart   Start the PoreRefiner service.\nverify  Run various checks.\n</pre>\n<pre>$ porerefinerd init --help\nUsage: porerefiner.py init [OPTIONS]\n\nFind the Nanopore output directory and create the config file.\n\nOptions:\n--config TEXT\n--nanopore_dir TEXT\n--help               Show this message and exit.\n</pre>\n<pre>$ porerefinerd list --help\nUsage: porerefiner.py list [OPTIONS] COMMAND [ARGS]...\n\nList job system stuff.\n\nOptions:\n--help  Show this message and exit.\n\nCommands:\njobs        List the configurable and configured jobs.\nnotifiers   List the configurable and configured notifiers.\nsubmitters  List the configureable and configured submitters.\n</pre>\n<pre>$ porerefinerd reset --help\nUsage: porerefiner.py reset [OPTIONS] COMMAND [ARGS]...\n\nUtility function to reset various state.\n\nOptions:\n--help  Show this message and exit.\n\nCommands:\nconfig        Reset config to defaults.\ndatabase      Reset database to empty state.\njobs          Reset all jobs to a particular status.\nruns          Reset all runs to in-progress status.\nsamplesheets  Clear samplesheets that aren't attached to any run.\n</pre>\n<pre>$ porerefinerd verify --help\nUsage: porerefiner.py verify [OPTIONS] COMMAND [ARGS]...\n\nRun various checks.\n\nOptions:\n--help  Show this message and exit.\n\nCommands:\nnotifiers   Verify notifiers by sending notifications.\nsubmitters  Verify configuration of job submitters by running their tests.\n</pre>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<p>Automatic detection of runs in progress</p>\n<p>Sample sheet and sample tracking through the flowcell/run context, and beyond</p>\n<p>Schedule automatic analysis of runs and files in AWS or your HPC</p>\n</div>\n<div id=\"how-it-works\">\n<h3>How it works</h3>\n<p>PoreRefiner uses fsevents to detect filesystem events during a Nanopore run, including the creating of new directories in the Nanopore output folder. Flowcells, runs, and run files can be detected this way. PoreRefiner will update a SQLite database with run information, including what it\u2019s able to pull out of Minknow.</p>\n<p>If all of the files of a run have not been modified in an hour, PoreRefiner will mark a completion time for that run. If any of the files in a run have not been modified in an hour, they may be picked up by the Job runner for some subsequent processing.</p>\n<p>PoreRefiner presents many interfaces to address integration challenges:</p>\n<p>A CLI interface for both human use and simple scripting</p>\n<p>A simple HTTP service for communication with LIMS and other services</p>\n<p>A Protobuf-RPC service for inter-process communication (Protobuf bindings are available in Python, C, JavaScript, Java, and many other languages)</p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.8.4 (2020-03-23)</h3>\n<ul>\n<li>New plugin architecture, combined with a cookiecutter definition for creating new ones</li>\n<li>Removed several in-progress job/submitter types to plugins</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.8.3 (2020-03-13)</h3>\n<ul>\n<li><tt>prfr</tt> now recognizes site config if user config doesn\u2019t exist</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.8.2 (2020-03-12)</h3>\n<ul>\n<li>Fixed tests, general bugfixes</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.8.1 (2020-03-11)</h3>\n<ul>\n<li>Improved service files.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.8.0 (2020-03-09)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7167934, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "248813f1aad3bbed8d2ad24840f4f506", "sha256": "b2178b31f6d007439e68395801332eed401c820c9d2362a7ac4888021f8e772c"}, "downloads": -1, "filename": "porerefiner-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "248813f1aad3bbed8d2ad24840f4f506", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 106430, "upload_time": "2020-03-06T17:55:46", "upload_time_iso_8601": "2020-03-06T17:55:46.410634Z", "url": "https://files.pythonhosted.org/packages/9d/60/6bdab7a33802c9ed706f898590e0fa493eb9460b2d2392ec3d32b3e68602/porerefiner-0.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c117f29bae0ba5c6f781e85e031be9f", "sha256": "cc52211a814391285b142fb122dacc62cf36329dff4d8dc1e24e902c9d3705a0"}, "downloads": -1, "filename": "porerefiner-0.8.0.tar.gz", "has_sig": false, "md5_digest": "5c117f29bae0ba5c6f781e85e031be9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 101257, "upload_time": "2020-03-06T17:55:48", "upload_time_iso_8601": "2020-03-06T17:55:48.731394Z", "url": "https://files.pythonhosted.org/packages/bb/6c/e9f15a242d1141e1db9d4c753f4e0dfca5a038df6a36f18f518a134b52c5/porerefiner-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "639778649bab3398a5c6e04a212adba6", "sha256": "68dd24f64560f721ea7ab70f706596763e94d143df035fe7440062ff1f4218eb"}, "downloads": -1, "filename": "porerefiner-0.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "639778649bab3398a5c6e04a212adba6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 107209, "upload_time": "2020-03-11T14:09:11", "upload_time_iso_8601": "2020-03-11T14:09:11.308063Z", "url": "https://files.pythonhosted.org/packages/56/09/dcacde05948cc4c03bc1d39a0882ce4395d0240d8f00363c582df1eac1e8/porerefiner-0.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84c463c444ff81ab12e5044559330094", "sha256": "a1e4132f77d60b0a43c068c09deec80f1ff315775e3365cde8105221a4beeee6"}, "downloads": -1, "filename": "porerefiner-0.8.1.tar.gz", "has_sig": false, "md5_digest": "84c463c444ff81ab12e5044559330094", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 101220, "upload_time": "2020-03-11T14:09:12", "upload_time_iso_8601": "2020-03-11T14:09:12.501931Z", "url": "https://files.pythonhosted.org/packages/c3/c0/2e6affc5789b705622700b1891db15d0e52848b080fae5d5ff74a4aac061/porerefiner-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "ac014f2276775325b97be462ae605ab7", "sha256": "a65f9a2f105e0501b7eeebaf29c189b24466481b8bbd2e5ea0712baafedccc83"}, "downloads": -1, "filename": "porerefiner-0.8.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac014f2276775325b97be462ae605ab7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 107433, "upload_time": "2020-03-12T22:51:13", "upload_time_iso_8601": "2020-03-12T22:51:13.466013Z", "url": "https://files.pythonhosted.org/packages/f9/cd/5f4ea3207e8f3fa8f5975fa97a4302a0a6968f23acedf2c97cd40bd24539/porerefiner-0.8.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ec5694944b0a9ef249183807fa38a37", "sha256": "43da2a54a81f91d45bf9b7a366b544afb5510a05e952599a2709d72fcce0183b"}, "downloads": -1, "filename": "porerefiner-0.8.2.tar.gz", "has_sig": false, "md5_digest": "5ec5694944b0a9ef249183807fa38a37", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 103362, "upload_time": "2020-03-12T22:51:16", "upload_time_iso_8601": "2020-03-12T22:51:16.989784Z", "url": "https://files.pythonhosted.org/packages/33/ec/dfdddd92cfe7c6272297c54d1208636660bf072613fff599728d32b241e2/porerefiner-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "01a7a64b28f53ea34a10eff14297f72e", "sha256": "7f1978c2d1bc4fcd7b96b1d072da4fd9e171632dec85e3c5ab1a92212ce52e79"}, "downloads": -1, "filename": "porerefiner-0.8.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "01a7a64b28f53ea34a10eff14297f72e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 107488, "upload_time": "2020-03-13T14:32:24", "upload_time_iso_8601": "2020-03-13T14:32:24.654517Z", "url": "https://files.pythonhosted.org/packages/08/87/c96d20f886049a2233d4c6b93aa9c09a76ee962e9630f81ec98ea638ef2c/porerefiner-0.8.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3782a482f405b0459575748e685313b", "sha256": "b9ec66f3d71075cd98445082f2e7a6e3eaffa5f591d6edff055f4be9a90cb2a8"}, "downloads": -1, "filename": "porerefiner-0.8.3.tar.gz", "has_sig": false, "md5_digest": "c3782a482f405b0459575748e685313b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 103478, "upload_time": "2020-03-13T14:32:26", "upload_time_iso_8601": "2020-03-13T14:32:26.000998Z", "url": "https://files.pythonhosted.org/packages/c9/68/86a8f4263f5fa3aa2383f80a57b8618c89c265f05b51b68d186ffe2d3a4f/porerefiner-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "65b158b7ac781234c0a174fbee94cb4f", "sha256": "e610571a0224e0fc3436166a273f55054f721c53f8e6ca62577b8cd405da660c"}, "downloads": -1, "filename": "porerefiner-0.8.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "65b158b7ac781234c0a174fbee94cb4f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 106028, "upload_time": "2020-03-23T23:27:19", "upload_time_iso_8601": "2020-03-23T23:27:19.629547Z", "url": "https://files.pythonhosted.org/packages/2a/6b/e64d926af7179057e39f2979cb6b28b7b7a2a7ef60c0487514a9aaadcf0e/porerefiner-0.8.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84ed25d8a06dfb8fd7001f3e9673c107", "sha256": "cb412fa435f1a781f30c55f282a1a3657294b5d1663431fbc7b877a6d53a25b4"}, "downloads": -1, "filename": "porerefiner-0.8.4.tar.gz", "has_sig": false, "md5_digest": "84ed25d8a06dfb8fd7001f3e9673c107", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 103344, "upload_time": "2020-03-23T23:27:21", "upload_time_iso_8601": "2020-03-23T23:27:21.363654Z", "url": "https://files.pythonhosted.org/packages/46/f1/3c073cb9db7de68f69a84cb0c51a4c588c50654cf6b8f1d7ecff02257fbe/porerefiner-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "dddc75807581f87cf46aa35b5fcd8672", "sha256": "897e952bcae6cd7037574e43f12beb83cc2c590d04cae0fbc6315ca5c38287d6"}, "downloads": -1, "filename": "porerefiner-0.8.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dddc75807581f87cf46aa35b5fcd8672", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 109205, "upload_time": "2020-05-04T21:40:42", "upload_time_iso_8601": "2020-05-04T21:40:42.149283Z", "url": "https://files.pythonhosted.org/packages/9d/19/4794b654ec40c23c8294c3cac508c2b2e0b5e3acc06a52c639157ce18ed2/porerefiner-0.8.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bafd31105bbfc39fc6ae8390fbc3682a", "sha256": "24f51c8ef96da95975148727c1ac0c719160807297c11546db1fd46ce3db2a32"}, "downloads": -1, "filename": "porerefiner-0.8.5.tar.gz", "has_sig": false, "md5_digest": "bafd31105bbfc39fc6ae8390fbc3682a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 108289, "upload_time": "2020-05-04T21:40:43", "upload_time_iso_8601": "2020-05-04T21:40:43.569603Z", "url": "https://files.pythonhosted.org/packages/54/89/a6b9fae7c69a9c5aac3ddd1383c99046f6ca74979a2712c85a405565725e/porerefiner-0.8.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dddc75807581f87cf46aa35b5fcd8672", "sha256": "897e952bcae6cd7037574e43f12beb83cc2c590d04cae0fbc6315ca5c38287d6"}, "downloads": -1, "filename": "porerefiner-0.8.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dddc75807581f87cf46aa35b5fcd8672", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 109205, "upload_time": "2020-05-04T21:40:42", "upload_time_iso_8601": "2020-05-04T21:40:42.149283Z", "url": "https://files.pythonhosted.org/packages/9d/19/4794b654ec40c23c8294c3cac508c2b2e0b5e3acc06a52c639157ce18ed2/porerefiner-0.8.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bafd31105bbfc39fc6ae8390fbc3682a", "sha256": "24f51c8ef96da95975148727c1ac0c719160807297c11546db1fd46ce3db2a32"}, "downloads": -1, "filename": "porerefiner-0.8.5.tar.gz", "has_sig": false, "md5_digest": "bafd31105bbfc39fc6ae8390fbc3682a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 108289, "upload_time": "2020-05-04T21:40:43", "upload_time_iso_8601": "2020-05-04T21:40:43.569603Z", "url": "https://files.pythonhosted.org/packages/54/89/a6b9fae7c69a9c5aac3ddd1383c99046f6ca74979a2712c85a405565725e/porerefiner-0.8.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:51:30 2020"}