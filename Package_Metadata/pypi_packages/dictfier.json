{"info": {"author": "Yezy Ilomo", "author_email": "yezileliilomo@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# dictfier\n\n[![Build Status](https://api.travis-ci.com/yezyilomo/dictfier.svg?branch=master)](https://api.travis-ci.com/yezyilomo/dictfier)\n[![Latest Version](https://img.shields.io/pypi/v/dictfier.svg)](https://pypi.org/project/dictfier/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/dictfier.svg)](https://pypi.org/project/dictfier/)\n[![License](https://img.shields.io/pypi/l/dictfier.svg)](https://pypi.org/project/dictfier/)\n\n**dictfier** is a library to convert/serialize Python class instances(Objects) both **flat** and **nested** into a dictionary data structure. It's very useful in converting Python Objects into JSON format especially for nested objects, because they can't be handled well by json library\n\n### Prerequisites\n\npython version >= 2.7\n\n### Installing\n\n```python\npip install dictfier\n```\n\n## Getting Started\n\n#### Converting a flat object into a dict\n\n```python\nimport dictfier\n\nclass Student(object):\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nstudent = Student(\"Danish\", 24)\n\nquery = [\n    \"name\",\n    \"age\"\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{'name': 'Danish', 'age': 24}\n```\n\n#### Converting nested object into a dict\n\n```python\nimport dictfier\n\nclass Course(object):\n    def __init__(self, code, name):\n        self.code = code\n        self.name = name\n\nclass Student(object):\n    def __init__(self, name, age, course):\n        self.name = name\n        self.age = age\n        self.course = course\n\ncourse = Course(\"CS201\", \"Data Structures\")\nstudent = Student(\"Danish\", 24, course)\n\nquery = [\n    \"name\",\n    \"age\",\n    {\n        \"course\": [\n            \"code\",\n            \"name\",\n        ]\n    }\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{\n    'name': 'Danish',\n    'age': 24,\n    'course': {'code': 'CS201', 'name': 'Data Structures'}\n}\n```\n\n#### Converting object nested with iterable object into a dict\n\n```python\nimport dictfier\n\nclass Course(object):\n    def __init__(self, code, name):\n        self.code = code\n        self.name = name\n\nclass Student(object):\n    def __init__(self, name, age, courses):\n        self.name = name\n        self.age = age\n        self.courses = courses\n\ncourse1 = Course(\"CS201\", \"Data Structures\")\ncourse2 = Course(\"CS205\", \"Computer Networks\")\n\nstudent = Student(\"Danish\", 24, [course1, course2])\n\nquery = [\n    \"name\",\n    \"age\",\n    {\n        \"courses\": [\n            [\n                \"code\",\n                \"name\",\n            ]\n        ]\n    }\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{\n    'name': 'Danish',\n    'age': 24,\n    'courses': [\n        {'code': 'CS201', 'name': 'Data Structures'},\n        {'code': 'CS205', 'name': 'Computer Networks'}\n    ]\n}\n```\n\n\n#### What about instance methods or callable object fields?\n\nWell we've got good news for that, **dictfier** can use callables which return values as fields, It's very simple, you just have to pass \"call=True\" as a keyword argument to objfield API and add your callable field to a query. E.g.\n\n```python\nimport dictfier\n\nclass Student(object):\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def age_in_days(self):\n        return self.age * 365\n\nstudent = Student(\"Danish\", 24)\n\nquery = [\n    \"name\",\n    {\n        \"age_in_days\": dictfier.objfield(\"age_in_days\", call=True)\n    }\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{'name': 'Danish', 'age_in_days': 8760}\n```\n\n\nYou can also add your custom field by using **newfield** API. E.g.\n\n```python\nimport dictfier\n\nclass Student(object):\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nstudent = Student(\"Danish\", 24)\n\nquery = [\n    \"name\",\n    \"age\",\n    {\n        \"school\": dictfier.newfield(\"St Patrick\")\n    }\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{'name': 'Danish', 'age': 24, 'school': 'St Patrick'}\n```\n\n\n#### What if we want to use object field on a custom field to do some computations?.\n\nWell there is a way to do that too, **dictfier** API provides **useobj** hook which is used to hook or pull the object on a current query node. To use the current object, just define a fuction which accept single argument(which is an object) and perform your computations on such function and then return a result, call **useobj** and pass that defined fuction to it.\n\nLet's say we want to calculate age of a student in terms of months from a student object with age field in terms of years. Here is how we would do this by using **useobj** hook.\n\n```python\nimport dictfier\n\nclass Student(object):\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nstudent = Student(\"Danish\", 24)\n\ndef age_in_months(obj):\n    # Do the computation here then return the result\n    return obj.age * 12\n\nquery = [\n    \"name\",\n\n    # This is a custom field which is computed by using age field from a student object\n    # Note how age_in_months function is passed to useobj hook(This is very important for API to work)\n    {\"age_in_months\": dictfier.useobj(age_in_months)}\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{'name': 'Danish', 'age_in_months': 288}\n```\n\n\n#### What if we want to use object field on a custom field(Rename obj field)?\n\nThis can be accomplished in two ways, As you might have guessed, one way to do it is to use **useobj** hook by passing a function which return the value of a field which you want to use, another simple way is to use **objfield** hook. Just like **useobj** hook, **objfield** hook is used to hook or pull object field on a current query node. To use the current object field, just call **objfield** and pass a field name which you want to use or replace.\n\nLet's say we want to rename **age** field to **age_in_years** in our results. Here is how we would do this by using **objfield** hook.\n\n```python\nimport dictfier\n\nclass Student(object):\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nstudent = Student(\"Danish\", 24)\n\nquery = [\n    \"name\",\n    {\"age_in_years\": dictfier.objfield(\"age\")}\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{'name': 'Danish', 'age_in_years': 24}\n```\n\n\nAnd if you want to use **useobj** hook then this is how you would do it.\n\n```python\nimport dictfier\n\nclass Student(object):\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nstudent = Student(\"Danish\", 24)\n\nquery = [\n    \"name\",\n    {\"age_in_years\": dictfier.useobj(lambda obj: obj.age)}\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{'name': 'Danish', 'age_in_years': 24}\n```\n\n\nInfact **objfield** hook is implemented by using **useobj**, so both methods are the same interms of performance, but I think you would agree with me that in this case **objfield** is more readable than **useobj**.\n\nYou can also query an object returned by **useobj** hook, This can be done by passing a query as a second argument to **useobj** or use 'query=your_query' as a kwarg. E.g.\n\n```python\nimport json\nimport dictfier\n\nclass Course(object):\n    def __init__(self, code, name):\n        self.code = code\n        self.name = name\nclass Student(object):\n    def __init__(self, name, age, course):\n        self.name = name\n        self.age = age\n        self.course = course\n\ncourse = Course(\"CS201\", \"Data Structures\")\nstudent = Student(\"Danish\", 24, course)\nquery = [\n    \"name\",\n    \"age\",\n    {\n        \"course\": dictfier.useobj(\n            lambda obj: obj.course,\n            [\"name\", \"code\"]  # This is a query\n        )\n    }\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{\n    'name': 'Danish',\n    'age': 24,\n    'course': {\n        'name': 'Data Structures',\n        'code': 'CS201'\n    }\n}\n```\n\n\n#### For iterable objects, here is how you would do it.\n\n```python\nimport json\nimport dictfier\n\nclass Course(object):\n    def __init__(self, code, name):\n        self.code = code\n        self.name = name\nclass Student(object):\n    def __init__(self, name, age, courses):\n        self.name = name\n        self.age = age\n        self.courses = courses\n\ncourse1 = Course(\"CS201\", \"Data Structures\")\ncourse2 = Course(\"CS205\", \"Computer Networks\")\nstudent = Student(\"Danish\", 24, [course1, course2])\nquery = [\n    \"name\",\n    \"age\",\n    {\n        \"courses\": dictfier.useobj(\n            lambda obj: obj.courses,\n            [[\"name\", \"code\"]]  # This is a query\n        )\n    }\n]\n\nstd_info = dictfier.dictfy(student, query)\nprint(std_info)\n```\n\n```python\n# Output\n{\n    'name': 'Danish',\n    'age': 24,\n    'courses': [\n        {'name': 'Data Structures', 'code': 'CS201'},\n        {'name': 'Computer Networks', 'code': 'CS205'}\n    ]\n}\n```\n\n\n## How dictfier works?\n\n**dictfier** works by converting given Object into a corresponding dict **recursively(Hence works on nested objects)** by using a **Query**. So what's important here is to know how to structure right queries to extract right data from the object.\n\n#### What's a Query anyway?\n\nA Query is basically a template which tells dictfier what to extract from an object. It is defined as a list or tuple of Object's fields to be extracted.\n\n#### Sample conversions.\n\nWhen a flat student object is queried using a query below\n```python\nquery = [\n    \"name\",\n    \"age\",\n]\n```\n\n**dictfier** will convert it into\n\n```python\n{\n    \"name\": student.name,\n    \"age\": student.age,\n}   \n```\n\n**For nested queries it goes like**\n\n```python\nquery = [\n    \"name\",\n    \"age\",\n    {\n        \"course\": [\n            \"code\",\n            \"name\",\n        ]\n    }\n]\n```\n\n**Corresponding dict**\n\n```python\n{\n    \"name\": student.name,\n    \"age\": student.age,\n    \"course\": {\n        \"code\": student.course.code,\n        \"name\": student.course.name,\n    }\n}\n```\n\n**For iterable objects it goes like**\n\n```python\nquery = [\n    \"name\",\n    \"age\",\n    {\n        \"course\": [\n            [\n                \"code\",\n                \"name\",\n            ]\n        ]\n    }\n]\n```\nPutting a list or tuple inside a list or tuple of object fields is a way to declare that the Object is iterable. In this case\n```python\n[\n    [\n        \"code\",\n        \"name\",\n    ]\n]\n```\n\n**Corresponding dict**\n\n```python\n{\n    \"name\": student.name,\n    \"age\": student.age,\n    \"courses\": [\n        {\n            \"code\": course.code,\n            \"name\": course.name,\n        }\n        for course in student.courses\n    ]\n}\n```\nNotice the list or tuple on \"courses\" unlike in other fields like \"name\" and \"age\", it makes \"courses\" iterable, This is the reason for having nested list or tuple on \"courses\" query.\n\n**It's pretty simple right?**\n\n\n## What if I want to customize how dictfier works?\n\nYou might encounter a case where you have to change how dictfier works to get the result which you want, don't worry we have got your back. **dictfier** is highly configurable, it allows you to configure how each type of object is converted into a dictionary data structure. **dictfier** configuration is divided into three parts which are\n\n* Flat objects config(pass flat_obj=function kwarg to dictfy)\n\n* Nested flat objects config(pass nested_flat_obj=function kwarg to dictfy)\n\n* Nested iterable objects config(pass nested_iter_obj=function kwarg to dictfy)\n\nIn all cases above, function assigned to flat_obj, nested_flat_obj or nested_iter_obj accepts three positional arguments which are field value(object) and parent object and field name. Now consider an example of a simple ORM with two relations **Many** and **One** which are used to show how objects are related.\n\n```python\n# Customize how dictfier obtains flat obj,\n# nested flat obj and nested iterable obj\nimport dictfier\n\nclass Many(object):\n    def __init__(self, data):\n        self.data = data\n\nclass One(object):\n    def __init__(self, data):\n        self.data = data\n\nclass Book(object):\n    def __init__(self, pk, title, publish_date):\n        self.pk = pk\n        self.title = title\n        self.publish_date = publish_date\n\nclass Mentor(object):\n    def __init__(self, pk, name, profession):\n        self.pk = pk\n        self.name = name\n        self.profession = profession\n\nclass Course(object):\n    def __init__(self, pk, code, name, books):\n        self.pk = pk\n        self.code = code\n        self.name = name\n        self.books = Many(books)\n\nclass Student(object):\n    def __init__(self, pk, name, age, mentor, courses):\n        self.pk = pk\n        self.name = name\n        self.age = age\n        self.mentor = One(mentor)\n        self.courses = Many(courses)\n\nbook1 = Book(1, \"Advanced Data Structures\", \"2018\")\nbook2 = Book(2, \"Basic Data Structures\", \"2010\")\nbook3 = Book(1, \"Computer Networks\", \"2011\")\n\ncourse1 = Course(1, \"CS201\", \"Data Structures\", [book1, book2])\ncourse2 = Course(2, \"CS220\", \"Computer Networks\", [book3])\n\nmentor = Mentor(1, \"Van Donald\", \"Software Eng\")\nstudent = Student(1, \"Danish\", 24, mentor, [course1, course2])\nquery = [\n    \"name\",\n    \"age\",\n    {   \"mentor\": [\n            \"name\",\n            \"profession\"\n        ],\n        \"courses\": [[\n            \"name\",\n            \"code\",\n            {\n                \"books\": [[\n                    \"title\",\n                    \"publish_date\"\n                ]]\n            }\n        ]]\n    }\n]\n\nresult = dictfier.dictfy(\n    student,\n    query,\n    flat_obj=lambda obj, parent: obj,\n    nested_iter_obj=lambda obj, parent: obj.data,\n    nested_flat_obj=lambda obj, parent: obj.data\n)\nprint(result)\n```\n\n```python\n# Output\n{\n    'name': 'Danish',\n    'age': 24,\n    'mentor': {'name': 'Van Donald', 'profession': 'Software Eng'},\n    'courses': [\n        {\n            'name': 'Data Structures',\n            'code': 'CS201',\n            'books': [\n                {'title': 'Advanced Data Structures', 'publish_date': '2018'},\n                {'title': 'Basic Data Structures', 'publish_date': '2010'}\n            ]\n        },\n        {\n            'name': 'Computer Networks',\n            'code': 'CS220',\n            'books': [\n                {'title': 'Computer Networks', 'publish_date': '2011'}\n            ]\n        }\n    ]\n}\n````\n\n\nFrom an example above, if you want to return primary key(pk) for nested flat or nested iterable object(which is very common in API design and serializing models) you can do it as follows.\n\n```python\nquery = [\n    \"name\",\n    \"age\",\n    \"mentor\",\n    \"courses\"\n]\n\ndef get_pk(obj, parent, field_name):\n    if isinstance(obj, One):\n        return obj.data.pk\n    elif isinstance(obj, Many):\n        return [rec.pk for rec in obj.data]\n    else:\n        return obj\n\nresult = dictfier.dictfy(\n    student,\n    query,\n    flat_obj=get_pk,\n    nested_iter_obj=lambda obj, parent: obj.data,\n    nested_flat_obj=lambda obj, parent: obj.data\n)\nprint(result)\n```\n\n\n```python\n# Output\n{'name': 'Danish', 'age': 24, 'mentor': 1, 'courses': [1, 2]}\n```\n\n## Contributing [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\nI welcome all contributions. Please read [CONTRIBUTING.md](https://github.com/yezyilomo/dictfier/blob/master/CONTRIBUTING.md) first. You can submit any ideas as [pull requests](https://github.com/yezyilomo/dictfier/pulls) or as [GitHub issues](https://github.com/yezyilomo/dictfier/issues). If you'd like to improve code, check out the [Code Style Guide](https://github.com/yezyilomo/dictfier/blob/master/CONTRIBUTING.md#styleguides) and have a good time!.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yezyilomo/dictfier", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dictfier", "package_url": "https://pypi.org/project/dictfier/", "platform": "", "project_url": "https://pypi.org/project/dictfier/", "project_urls": {"Homepage": "https://github.com/yezyilomo/dictfier"}, "release_url": "https://pypi.org/project/dictfier/1.5.1/", "requires_dist": null, "requires_python": ">=2.7", "summary": " Python library to convert Python class instances(Objects) both flat and nested into a dictionary data structure. It's very useful in converting Python Objects into JSON format especially for nested objects, because they can't be handled well by json library", "version": "1.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dictfier</h1>\n<p><a href=\"https://api.travis-ci.com/yezyilomo/dictfier\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa40fbba2157073d52ed029ceae6219106eddd8f/68747470733a2f2f6170692e7472617669732d63692e636f6d2f79657a79696c6f6d6f2f64696374666965722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/dictfier/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc41443fd464c0ffd3e71ef142fd3f9a034dced1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f64696374666965722e737667\"></a>\n<a href=\"https://pypi.org/project/dictfier/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cef12d66646ab866e7665724a9e3cff9f23956c5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f64696374666965722e737667\"></a>\n<a href=\"https://pypi.org/project/dictfier/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9de7fb9fd2d44b996fb033f3d5fb6450eeac6068/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f64696374666965722e737667\"></a></p>\n<p><strong>dictfier</strong> is a library to convert/serialize Python class instances(Objects) both <strong>flat</strong> and <strong>nested</strong> into a dictionary data structure. It's very useful in converting Python Objects into JSON format especially for nested objects, because they can't be handled well by json library</p>\n<h3>Prerequisites</h3>\n<p>python version &gt;= 2.7</p>\n<h3>Installing</h3>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">dictfier</span>\n</pre>\n<h2>Getting Started</h2>\n<h4>Converting a flat object into a dict</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">}</span>\n</pre>\n<h4>Converting nested object into a dict</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Course</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">code</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">course</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">course</span> <span class=\"o\">=</span> <span class=\"n\">course</span>\n\n<span class=\"n\">course</span> <span class=\"o\">=</span> <span class=\"n\">Course</span><span class=\"p\">(</span><span class=\"s2\">\"CS201\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Data Structures\"</span><span class=\"p\">)</span>\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"n\">course</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"course\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"code\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n    <span class=\"s1\">'course'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'CS201'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Data Structures'</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Converting object nested with iterable object into a dict</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Course</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">code</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">courses</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">courses</span> <span class=\"o\">=</span> <span class=\"n\">courses</span>\n\n<span class=\"n\">course1</span> <span class=\"o\">=</span> <span class=\"n\">Course</span><span class=\"p\">(</span><span class=\"s2\">\"CS201\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Data Structures\"</span><span class=\"p\">)</span>\n<span class=\"n\">course2</span> <span class=\"o\">=</span> <span class=\"n\">Course</span><span class=\"p\">(</span><span class=\"s2\">\"CS205\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Computer Networks\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">course1</span><span class=\"p\">,</span> <span class=\"n\">course2</span><span class=\"p\">])</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"courses\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">\"code\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n    <span class=\"s1\">'courses'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'CS201'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Data Structures'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'CS205'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Computer Networks'</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>What about instance methods or callable object fields?</h4>\n<p>Well we've got good news for that, <strong>dictfier</strong> can use callables which return values as fields, It's very simple, you just have to pass \"call=True\" as a keyword argument to objfield API and add your callable field to a query. E.g.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">age_in_days</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">*</span> <span class=\"mi\">365</span>\n\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"age_in_days\"</span><span class=\"p\">:</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">objfield</span><span class=\"p\">(</span><span class=\"s2\">\"age_in_days\"</span><span class=\"p\">,</span> <span class=\"n\">call</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span> <span class=\"s1\">'age_in_days'</span><span class=\"p\">:</span> <span class=\"mi\">8760</span><span class=\"p\">}</span>\n</pre>\n<p>You can also add your custom field by using <strong>newfield</strong> API. E.g.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"school\"</span><span class=\"p\">:</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">newfield</span><span class=\"p\">(</span><span class=\"s2\">\"St Patrick\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"s1\">'school'</span><span class=\"p\">:</span> <span class=\"s1\">'St Patrick'</span><span class=\"p\">}</span>\n</pre>\n<h4>What if we want to use object field on a custom field to do some computations?.</h4>\n<p>Well there is a way to do that too, <strong>dictfier</strong> API provides <strong>useobj</strong> hook which is used to hook or pull the object on a current query node. To use the current object, just define a fuction which accept single argument(which is an object) and perform your computations on such function and then return a result, call <strong>useobj</strong> and pass that defined fuction to it.</p>\n<p>Let's say we want to calculate age of a student in terms of months from a student object with age field in terms of years. Here is how we would do this by using <strong>useobj</strong> hook.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">age_in_months</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Do the computation here then return the result</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">*</span> <span class=\"mi\">12</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># This is a custom field which is computed by using age field from a student object</span>\n    <span class=\"c1\"># Note how age_in_months function is passed to useobj hook(This is very important for API to work)</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"age_in_months\"</span><span class=\"p\">:</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">useobj</span><span class=\"p\">(</span><span class=\"n\">age_in_months</span><span class=\"p\">)}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span> <span class=\"s1\">'age_in_months'</span><span class=\"p\">:</span> <span class=\"mi\">288</span><span class=\"p\">}</span>\n</pre>\n<h4>What if we want to use object field on a custom field(Rename obj field)?</h4>\n<p>This can be accomplished in two ways, As you might have guessed, one way to do it is to use <strong>useobj</strong> hook by passing a function which return the value of a field which you want to use, another simple way is to use <strong>objfield</strong> hook. Just like <strong>useobj</strong> hook, <strong>objfield</strong> hook is used to hook or pull object field on a current query node. To use the current object field, just call <strong>objfield</strong> and pass a field name which you want to use or replace.</p>\n<p>Let's say we want to rename <strong>age</strong> field to <strong>age_in_years</strong> in our results. Here is how we would do this by using <strong>objfield</strong> hook.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"age_in_years\"</span><span class=\"p\">:</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">objfield</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">)}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span> <span class=\"s1\">'age_in_years'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">}</span>\n</pre>\n<p>And if you want to use <strong>useobj</strong> hook then this is how you would do it.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"age_in_years\"</span><span class=\"p\">:</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">useobj</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">)}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span> <span class=\"s1\">'age_in_years'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">}</span>\n</pre>\n<p>Infact <strong>objfield</strong> hook is implemented by using <strong>useobj</strong>, so both methods are the same interms of performance, but I think you would agree with me that in this case <strong>objfield</strong> is more readable than <strong>useobj</strong>.</p>\n<p>You can also query an object returned by <strong>useobj</strong> hook, This can be done by passing a query as a second argument to <strong>useobj</strong> or use 'query=your_query' as a kwarg. E.g.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Course</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">code</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">course</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">course</span> <span class=\"o\">=</span> <span class=\"n\">course</span>\n\n<span class=\"n\">course</span> <span class=\"o\">=</span> <span class=\"n\">Course</span><span class=\"p\">(</span><span class=\"s2\">\"CS201\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Data Structures\"</span><span class=\"p\">)</span>\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"n\">course</span><span class=\"p\">)</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"course\"</span><span class=\"p\">:</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">useobj</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">course</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"code\"</span><span class=\"p\">]</span>  <span class=\"c1\"># This is a query</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n    <span class=\"s1\">'course'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Data Structures'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'CS201'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>For iterable objects, here is how you would do it.</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Course</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">code</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">courses</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">courses</span> <span class=\"o\">=</span> <span class=\"n\">courses</span>\n\n<span class=\"n\">course1</span> <span class=\"o\">=</span> <span class=\"n\">Course</span><span class=\"p\">(</span><span class=\"s2\">\"CS201\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Data Structures\"</span><span class=\"p\">)</span>\n<span class=\"n\">course2</span> <span class=\"o\">=</span> <span class=\"n\">Course</span><span class=\"p\">(</span><span class=\"s2\">\"CS205\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Computer Networks\"</span><span class=\"p\">)</span>\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">course1</span><span class=\"p\">,</span> <span class=\"n\">course2</span><span class=\"p\">])</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"courses\"</span><span class=\"p\">:</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">useobj</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">courses</span><span class=\"p\">,</span>\n            <span class=\"p\">[[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"code\"</span><span class=\"p\">]]</span>  <span class=\"c1\"># This is a query</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">std_info</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">std_info</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n    <span class=\"s1\">'courses'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Data Structures'</span><span class=\"p\">,</span> <span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'CS201'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Computer Networks'</span><span class=\"p\">,</span> <span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'CS205'</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>How dictfier works?</h2>\n<p><strong>dictfier</strong> works by converting given Object into a corresponding dict <strong>recursively(Hence works on nested objects)</strong> by using a <strong>Query</strong>. So what's important here is to know how to structure right queries to extract right data from the object.</p>\n<h4>What's a Query anyway?</h4>\n<p>A Query is basically a template which tells dictfier what to extract from an object. It is defined as a list or tuple of Object's fields to be extracted.</p>\n<h4>Sample conversions.</h4>\n<p>When a flat student object is queried using a query below</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>dictfier</strong> will convert it into</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>   \n</pre>\n<p><strong>For nested queries it goes like</strong></p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"course\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"code\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Corresponding dict</strong></p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"course\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"code\"</span><span class=\"p\">:</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">course</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">course</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>For iterable objects it goes like</strong></p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"course\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">\"code\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Putting a list or tuple inside a list or tuple of object fields is a way to declare that the Object is iterable. In this case</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"code\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Corresponding dict</strong></p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"courses\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"code\"</span><span class=\"p\">:</span> <span class=\"n\">course</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">course</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">course</span> <span class=\"ow\">in</span> <span class=\"n\">student</span><span class=\"o\">.</span><span class=\"n\">courses</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Notice the list or tuple on \"courses\" unlike in other fields like \"name\" and \"age\", it makes \"courses\" iterable, This is the reason for having nested list or tuple on \"courses\" query.</p>\n<p><strong>It's pretty simple right?</strong></p>\n<h2>What if I want to customize how dictfier works?</h2>\n<p>You might encounter a case where you have to change how dictfier works to get the result which you want, don't worry we have got your back. <strong>dictfier</strong> is highly configurable, it allows you to configure how each type of object is converted into a dictionary data structure. <strong>dictfier</strong> configuration is divided into three parts which are</p>\n<ul>\n<li>\n<p>Flat objects config(pass flat_obj=function kwarg to dictfy)</p>\n</li>\n<li>\n<p>Nested flat objects config(pass nested_flat_obj=function kwarg to dictfy)</p>\n</li>\n<li>\n<p>Nested iterable objects config(pass nested_iter_obj=function kwarg to dictfy)</p>\n</li>\n</ul>\n<p>In all cases above, function assigned to flat_obj, nested_flat_obj or nested_iter_obj accepts three positional arguments which are field value(object) and parent object and field name. Now consider an example of a simple ORM with two relations <strong>Many</strong> and <strong>One</strong> which are used to show how objects are related.</p>\n<pre><span class=\"c1\"># Customize how dictfier obtains flat obj,</span>\n<span class=\"c1\"># nested flat obj and nested iterable obj</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dictfier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Many</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">One</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">publish_date</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">pk</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">publish_date</span> <span class=\"o\">=</span> <span class=\"n\">publish_date</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Mentor</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">profession</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">pk</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">profession</span> <span class=\"o\">=</span> <span class=\"n\">profession</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Course</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">books</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">pk</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">code</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">Many</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">mentor</span><span class=\"p\">,</span> <span class=\"n\">courses</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">pk</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mentor</span> <span class=\"o\">=</span> <span class=\"n\">One</span><span class=\"p\">(</span><span class=\"n\">mentor</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">courses</span> <span class=\"o\">=</span> <span class=\"n\">Many</span><span class=\"p\">(</span><span class=\"n\">courses</span><span class=\"p\">)</span>\n\n<span class=\"n\">book1</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"Advanced Data Structures\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2018\"</span><span class=\"p\">)</span>\n<span class=\"n\">book2</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"Basic Data Structures\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2010\"</span><span class=\"p\">)</span>\n<span class=\"n\">book3</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"Computer Networks\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2011\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">course1</span> <span class=\"o\">=</span> <span class=\"n\">Course</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"CS201\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Data Structures\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">book1</span><span class=\"p\">,</span> <span class=\"n\">book2</span><span class=\"p\">])</span>\n<span class=\"n\">course2</span> <span class=\"o\">=</span> <span class=\"n\">Course</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"CS220\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Computer Networks\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">book3</span><span class=\"p\">])</span>\n\n<span class=\"n\">mentor</span> <span class=\"o\">=</span> <span class=\"n\">Mentor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"Van Donald\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Software Eng\"</span><span class=\"p\">)</span>\n<span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"Danish\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"n\">mentor</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">course1</span><span class=\"p\">,</span> <span class=\"n\">course2</span><span class=\"p\">])</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>   <span class=\"s2\">\"mentor\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"profession\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"s2\">\"courses\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"code\"</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"books\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span>\n                    <span class=\"s2\">\"title\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"publish_date\"</span>\n                <span class=\"p\">]]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span>\n    <span class=\"n\">student</span><span class=\"p\">,</span>\n    <span class=\"n\">query</span><span class=\"p\">,</span>\n    <span class=\"n\">flat_obj</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"p\">,</span>\n    <span class=\"n\">nested_iter_obj</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n    <span class=\"n\">nested_flat_obj</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n    <span class=\"s1\">'mentor'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Van Donald'</span><span class=\"p\">,</span> <span class=\"s1\">'profession'</span><span class=\"p\">:</span> <span class=\"s1\">'Software Eng'</span><span class=\"p\">},</span>\n    <span class=\"s1\">'courses'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Data Structures'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'CS201'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'books'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Advanced Data Structures'</span><span class=\"p\">,</span> <span class=\"s1\">'publish_date'</span><span class=\"p\">:</span> <span class=\"s1\">'2018'</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Basic Data Structures'</span><span class=\"p\">,</span> <span class=\"s1\">'publish_date'</span><span class=\"p\">:</span> <span class=\"s1\">'2010'</span><span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Computer Networks'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'CS220'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'books'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Computer Networks'</span><span class=\"p\">,</span> <span class=\"s1\">'publish_date'</span><span class=\"p\">:</span> <span class=\"s1\">'2011'</span><span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>From an example above, if you want to return primary key(pk) for nested flat or nested iterable object(which is very common in API design and serializing models) you can do it as follows.</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"age\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"mentor\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"courses\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_pk</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">One</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">pk</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">Many</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">rec</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"k\">for</span> <span class=\"n\">rec</span> <span class=\"ow\">in</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dictfier</span><span class=\"o\">.</span><span class=\"n\">dictfy</span><span class=\"p\">(</span>\n    <span class=\"n\">student</span><span class=\"p\">,</span>\n    <span class=\"n\">query</span><span class=\"p\">,</span>\n    <span class=\"n\">flat_obj</span><span class=\"o\">=</span><span class=\"n\">get_pk</span><span class=\"p\">,</span>\n    <span class=\"n\">nested_iter_obj</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n    <span class=\"n\">nested_flat_obj</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Danish'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"s1\">'mentor'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'courses'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]}</span>\n</pre>\n<h2>Contributing <a href=\"http://makeapullrequest.com\" rel=\"nofollow\"><img alt=\"PRs Welcome\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8897c5f5e8a5eacb8ddf983bb640b73cc10464c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265\"></a></h2>\n<p>I welcome all contributions. Please read <a href=\"https://github.com/yezyilomo/dictfier/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a> first. You can submit any ideas as <a href=\"https://github.com/yezyilomo/dictfier/pulls\" rel=\"nofollow\">pull requests</a> or as <a href=\"https://github.com/yezyilomo/dictfier/issues\" rel=\"nofollow\">GitHub issues</a>. If you'd like to improve code, check out the <a href=\"https://github.com/yezyilomo/dictfier/blob/master/CONTRIBUTING.md#styleguides\" rel=\"nofollow\">Code Style Guide</a> and have a good time!.</p>\n\n          </div>"}, "last_serial": 5322239, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "19a3cc4e6d2db87e333c2ca060d4e659", "sha256": "a5b25814f624555bff37542ce2930589d77081019e19bfff5ed5c7e564135ee4"}, "downloads": -1, "filename": "dictfier-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "19a3cc4e6d2db87e333c2ca060d4e659", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 4155, "upload_time": "2019-03-18T23:52:55", "upload_time_iso_8601": "2019-03-18T23:52:55.359440Z", "url": "https://files.pythonhosted.org/packages/42/4b/058203f5d4dc037206bb8ed2619a0c598c60dfcc3356374d5648fd5674c4/dictfier-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "cf208cd01883221fad6018b21dc0319c", "sha256": "16bdd45b8ec97b62e2e2fb2e3e7e34e3aad86350d8ec58f78207e64e56d72580"}, "downloads": -1, "filename": "dictfier-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "cf208cd01883221fad6018b21dc0319c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 7458, "upload_time": "2019-03-19T00:31:20", "upload_time_iso_8601": "2019-03-19T00:31:20.968480Z", "url": "https://files.pythonhosted.org/packages/b4/db/596c0cbe815c874468f8c9aa6766bf1c072f196a2a9f6c9c74704fbdbc9a/dictfier-1.0.5-py3-none-any.whl", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "3dba467134f1afc32db97908c46d0ecf", "sha256": "4aa6c0e593d5e43034af91ce2ed9e1c0e98a7dcca2ee9fbc2e80346354c1c619"}, "downloads": -1, "filename": "dictfier-1.0.6-py2-none-any.whl", "has_sig": false, "md5_digest": "3dba467134f1afc32db97908c46d0ecf", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 4146, "upload_time": "2019-03-21T12:26:28", "upload_time_iso_8601": "2019-03-21T12:26:28.238718Z", "url": "https://files.pythonhosted.org/packages/39/da/cbba13762aa651d42ea6149fd5d5f137ce835c81ff93c38380e9ce2511d4/dictfier-1.0.6-py2-none-any.whl", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "b9247279dde80f4b964d3e2dc450f6a3", "sha256": "01de53fdbf9f32f652b001407cf14ac436a7ad359dc63309b2f1be379ef051cb"}, "downloads": -1, "filename": "dictfier-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b9247279dde80f4b964d3e2dc450f6a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 7468, "upload_time": "2019-03-21T12:53:57", "upload_time_iso_8601": "2019-03-21T12:53:57.783190Z", "url": "https://files.pythonhosted.org/packages/b9/ad/bcb8c5006adc5c326b40cb1d6a3e2be571b577834d9b396805a7ee461096/dictfier-1.0.7-py3-none-any.whl", "yanked": false}], "1.1.10": [{"comment_text": "", "digests": {"md5": "109c388f3b1d735a6908e7a2a6e41daa", "sha256": "691b4e82ea0d659d24d6f4e3127cfc52f2f30f26f3f353991e5cad4c44870366"}, "downloads": -1, "filename": "dictfier-1.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "109c388f3b1d735a6908e7a2a6e41daa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10436, "upload_time": "2019-03-23T19:37:17", "upload_time_iso_8601": "2019-03-23T19:37:17.410833Z", "url": "https://files.pythonhosted.org/packages/c1/c4/04bc846aa13b109f59edf28b91c941c1c8c969ec03b6d6de0d5bf89dc541/dictfier-1.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8ce8f56e61bdf81771682a1ba071f12", "sha256": "9a382e8b75772f78bebb83ef3d81549474e7f8af572864e9fbb26906f71f7318"}, "downloads": -1, "filename": "dictfier-1.1.10.tar.gz", "has_sig": false, "md5_digest": "c8ce8f56e61bdf81771682a1ba071f12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6542, "upload_time": "2019-03-23T19:37:20", "upload_time_iso_8601": "2019-03-23T19:37:20.502252Z", "url": "https://files.pythonhosted.org/packages/37/03/2045677db150c7caf4f867a3ec9e8d06ea9056c7dc6ff5e8a0f768026290/dictfier-1.1.10.tar.gz", "yanked": false}], "1.1.11": [{"comment_text": "", "digests": {"md5": "a659eaa4cf0cb4f5fceb33c97e733d75", "sha256": "561acf09fb51c3e0615b5086e05c6927a4179251ee88ef91b5071dff59afbdfe"}, "downloads": -1, "filename": "dictfier-1.1.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a659eaa4cf0cb4f5fceb33c97e733d75", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 6243, "upload_time": "2019-03-23T23:32:58", "upload_time_iso_8601": "2019-03-23T23:32:58.316226Z", "url": "https://files.pythonhosted.org/packages/f7/ee/f9fe3ab44e700e6fe1e76b45704fd0660c4698db7f2a9b3bb9864420674b/dictfier-1.1.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39dc5b6210673943beaacc1b5945f52d", "sha256": "945696a21ce0f403c7887577c1155e6bbc2b4cff71d129ad2cefe785ec2ec2ea"}, "downloads": -1, "filename": "dictfier-1.1.11.tar.gz", "has_sig": false, "md5_digest": "39dc5b6210673943beaacc1b5945f52d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6103, "upload_time": "2019-03-23T23:33:01", "upload_time_iso_8601": "2019-03-23T23:33:01.764412Z", "url": "https://files.pythonhosted.org/packages/9b/56/214afcd3372dc30893c0c5334a8bbe9391459164d5c9bec6f532115df0df/dictfier-1.1.11.tar.gz", "yanked": false}], "1.1.12": [{"comment_text": "", "digests": {"md5": "19bdd5f38987d6f4400f34b756f172a4", "sha256": "5e288e092b6253a855c8c60ee124b4279a20c60604f8074116b91a7b774f8569"}, "downloads": -1, "filename": "dictfier-1.1.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "19bdd5f38987d6f4400f34b756f172a4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 6964, "upload_time": "2019-03-25T13:36:00", "upload_time_iso_8601": "2019-03-25T13:36:00.535022Z", "url": "https://files.pythonhosted.org/packages/c2/a5/0a84924eb5e669839e23aaf1fe0d304ccf62ce1cefcf0ad17ad7e7318453/dictfier-1.1.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "596ba5a3ad3159000e661268c67f0466", "sha256": "e4415c5ac3ff0683d0208bcd949013de73f1cf3e360206b8b653c5939297d614"}, "downloads": -1, "filename": "dictfier-1.1.12.tar.gz", "has_sig": false, "md5_digest": "596ba5a3ad3159000e661268c67f0466", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6972, "upload_time": "2019-03-25T13:36:04", "upload_time_iso_8601": "2019-03-25T13:36:04.560236Z", "url": "https://files.pythonhosted.org/packages/8d/29/7ce8a3b405ae36fb7d3dcfbe435c92ea8b3681dce4ee538a40d169b820e1/dictfier-1.1.12.tar.gz", "yanked": false}], "1.1.8": [{"comment_text": "", "digests": {"md5": "6ce3db70d4b9d4f58992fb602bee887c", "sha256": "d3edff6a2e708ae0c75b193bb07e1a060265c4d6c49e45be87d84803b82c7bb1"}, "downloads": -1, "filename": "dictfier-1.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "6ce3db70d4b9d4f58992fb602bee887c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8266, "upload_time": "2019-03-22T09:54:47", "upload_time_iso_8601": "2019-03-22T09:54:47.983187Z", "url": "https://files.pythonhosted.org/packages/4e/cd/175ba1b65192cee973eb8d6741102ed36556eb1406984cd526b4a51ff418/dictfier-1.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ec6339a8ade63053a0d247de3d6ad03", "sha256": "f8c770e7a38075a54a92f094f271577c73db5cec4ea377355e33d430088727cc"}, "downloads": -1, "filename": "dictfier-1.1.8.tar.gz", "has_sig": false, "md5_digest": "0ec6339a8ade63053a0d247de3d6ad03", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5455, "upload_time": "2019-03-22T09:54:49", "upload_time_iso_8601": "2019-03-22T09:54:49.452882Z", "url": "https://files.pythonhosted.org/packages/3e/55/ad03ae7bbbcf45f948dc1ace76573b5da6d99031edf2d2c89b827a842e25/dictfier-1.1.8.tar.gz", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "d453eb18f11e5d67e2edbdc50cce7134", "sha256": "9bf81760589626dcb12804c8124af0c434cbdcee5ee9b0d8fa01eaa150bdd8dd"}, "downloads": -1, "filename": "dictfier-1.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "d453eb18f11e5d67e2edbdc50cce7134", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8865, "upload_time": "2019-03-23T19:01:39", "upload_time_iso_8601": "2019-03-23T19:01:39.582875Z", "url": "https://files.pythonhosted.org/packages/ac/9a/d6d23bce8333ac549d3a6a51524018c9be4a88cf1040ca2c1aa1ae667fec/dictfier-1.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b4f6a38094ed9e5c8ab89cbed459e3a", "sha256": "445840abeb55b9cf8eff9c1430b2925675186c29377498d725608ef447635323"}, "downloads": -1, "filename": "dictfier-1.1.9.tar.gz", "has_sig": false, "md5_digest": "8b4f6a38094ed9e5c8ab89cbed459e3a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5865, "upload_time": "2019-03-23T19:01:42", "upload_time_iso_8601": "2019-03-23T19:01:42.265303Z", "url": "https://files.pythonhosted.org/packages/97/26/4c45ca6f367baeb1462b00a69aefdd48579c241335140aee44124cbe2072/dictfier-1.1.9.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "72575a7c9577fb08abb557afed4f3384", "sha256": "0aeb722c33bc95a3f42e18ea3d48da6064a594a5436de576f1f8f5cbc09080fd"}, "downloads": -1, "filename": "dictfier-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "72575a7c9577fb08abb557afed4f3384", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 6671, "upload_time": "2019-04-05T13:30:30", "upload_time_iso_8601": "2019-04-05T13:30:30.819795Z", "url": "https://files.pythonhosted.org/packages/16/57/4aed5e301931656cf3975a342ba91ceb06feee02cb46ec10358f7823c82c/dictfier-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99bee437cce58da2b10bc77dc7798843", "sha256": "96e77b46e76c6a1aa9bf4a5ab94fb7fa8a7cbbd830a52faf18defad5a7bc490f"}, "downloads": -1, "filename": "dictfier-1.2.0.tar.gz", "has_sig": false, "md5_digest": "99bee437cce58da2b10bc77dc7798843", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6658, "upload_time": "2019-04-05T13:30:32", "upload_time_iso_8601": "2019-04-05T13:30:32.800414Z", "url": "https://files.pythonhosted.org/packages/fc/08/918b4a72aead3437c2eea8330d19d54c8c439e40ed281bf994fd49b62f6d/dictfier-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "aab9aca289738e58fcf776688d5a2093", "sha256": "26a41e8bbc42550d5d924eb4443ca94149f68d702aa2e2843d2ede5a2e90b8ac"}, "downloads": -1, "filename": "dictfier-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aab9aca289738e58fcf776688d5a2093", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 7844, "upload_time": "2019-04-14T12:23:06", "upload_time_iso_8601": "2019-04-14T12:23:06.843797Z", "url": "https://files.pythonhosted.org/packages/aa/fd/dfd5477bffbdeae048a206fd01dfddc3482ca280137e01523d5479077422/dictfier-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06b4c00524e1a4ee93995eafdcfe1678", "sha256": "aeaafa6c98dd4c472168b8430751a07486d7df60286fb37210bbfd3ac6104b91"}, "downloads": -1, "filename": "dictfier-1.3.0.tar.gz", "has_sig": false, "md5_digest": "06b4c00524e1a4ee93995eafdcfe1678", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 8151, "upload_time": "2019-04-14T12:23:09", "upload_time_iso_8601": "2019-04-14T12:23:09.045473Z", "url": "https://files.pythonhosted.org/packages/9f/82/07a04effe60e2c6229ca3cde4788e4e258e560452074f5ab17fe13b5ee39/dictfier-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "0ae1d707473854ce56aca5b545221bf7", "sha256": "59901f18c5fc55d82b259f74cf7257cbbb7fc3763fb31daaf89902a22c6c731d"}, "downloads": -1, "filename": "dictfier-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ae1d707473854ce56aca5b545221bf7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 8327, "upload_time": "2019-04-28T03:06:14", "upload_time_iso_8601": "2019-04-28T03:06:14.606782Z", "url": "https://files.pythonhosted.org/packages/6e/dc/6c521fa7544ebee09441dabfb1660128a7d5df4e7a0d7219185673d8252f/dictfier-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc0a7d0f763890f9cac3c62bb41df8f4", "sha256": "aa0b6a368a7400725867533256969732663bb32962c6ec702e74e38e3b69e027"}, "downloads": -1, "filename": "dictfier-1.4.0.tar.gz", "has_sig": false, "md5_digest": "dc0a7d0f763890f9cac3c62bb41df8f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 8733, "upload_time": "2019-04-28T03:06:17", "upload_time_iso_8601": "2019-04-28T03:06:17.898781Z", "url": "https://files.pythonhosted.org/packages/10/25/4528374709ec88b0c9dae70c70a6dab09bd27fe4704587b9d60e367a03b8/dictfier-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "20e1f9d57f598b0a7e9f4b808bf66ea0", "sha256": "dcb1fa9239c0bb3feaec9d18a3bfd34065de9a86469c6eed19a2344cfa8a7ee6"}, "downloads": -1, "filename": "dictfier-1.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "20e1f9d57f598b0a7e9f4b808bf66ea0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 8596, "upload_time": "2019-05-11T12:13:37", "upload_time_iso_8601": "2019-05-11T12:13:37.108079Z", "url": "https://files.pythonhosted.org/packages/c2/81/f2838c45828e6a51ac2f664823f688dfb9b4d5f21fe036672a4400591f95/dictfier-1.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa188fd2145ae62d4d06527db9e00248", "sha256": "020ff5f76c7b750eb6d2fed558b2ad7c22a1ac517c2322da59bc310dcc37a28c"}, "downloads": -1, "filename": "dictfier-1.4.1.tar.gz", "has_sig": false, "md5_digest": "aa188fd2145ae62d4d06527db9e00248", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 9249, "upload_time": "2019-05-11T12:13:39", "upload_time_iso_8601": "2019-05-11T12:13:39.764368Z", "url": "https://files.pythonhosted.org/packages/24/8a/00f07ff545e2e3e3d078a084c5274fef16f3295770380811c6f9169eec3e/dictfier-1.4.1.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "40f6312d98ab037fdc8c231a799ad1ef", "sha256": "713fed4cc95ccad47859461dfab22e00b8fd028602765453fac2d1e7869db3d9"}, "downloads": -1, "filename": "dictfier-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "40f6312d98ab037fdc8c231a799ad1ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 9572, "upload_time": "2019-05-16T21:35:44", "upload_time_iso_8601": "2019-05-16T21:35:44.941284Z", "url": "https://files.pythonhosted.org/packages/ba/fa/5c49d6461a055ce95adcfc09f4c4b7b0fe2916234cf5754f62b73a800182/dictfier-1.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8b52ecbded589a7040146bdab1daa6a", "sha256": "b1ae3043623142f5fda14b7acfb4841f9cdbb26a19a5caa77cd8c6f2367fcecd"}, "downloads": -1, "filename": "dictfier-1.5.0.tar.gz", "has_sig": false, "md5_digest": "a8b52ecbded589a7040146bdab1daa6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 9357, "upload_time": "2019-05-16T21:35:48", "upload_time_iso_8601": "2019-05-16T21:35:48.395665Z", "url": "https://files.pythonhosted.org/packages/6b/39/f892ecca4723e1b41ec1c7342280425ea00345091cdc3d31d3e50a9a3254/dictfier-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "abc60a4384bc74df706f97bb9104b753", "sha256": "91e5d92bec4f118568e1b7b57691f742df0494216c1ab70092dab5da38cfbe72"}, "downloads": -1, "filename": "dictfier-1.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "abc60a4384bc74df706f97bb9104b753", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 9960, "upload_time": "2019-05-27T13:00:49", "upload_time_iso_8601": "2019-05-27T13:00:49.462379Z", "url": "https://files.pythonhosted.org/packages/9c/ed/39b33e3690e95ecd786cfa8eb6bc71012c1be3e09fe27b3d7d3589f0125e/dictfier-1.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "663e09f044feb32de8a42da3f6a78e5a", "sha256": "1019a66331c5fccf64d03d508525486448af91f24eff660ae9d11fd724de3ed3"}, "downloads": -1, "filename": "dictfier-1.5.1.tar.gz", "has_sig": false, "md5_digest": "663e09f044feb32de8a42da3f6a78e5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 9386, "upload_time": "2019-05-27T13:00:51", "upload_time_iso_8601": "2019-05-27T13:00:51.918611Z", "url": "https://files.pythonhosted.org/packages/86/d1/5b717b7714ae765f149a209655560bb5f782493f6ca000e5dc7c78f97ce8/dictfier-1.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "abc60a4384bc74df706f97bb9104b753", "sha256": "91e5d92bec4f118568e1b7b57691f742df0494216c1ab70092dab5da38cfbe72"}, "downloads": -1, "filename": "dictfier-1.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "abc60a4384bc74df706f97bb9104b753", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 9960, "upload_time": "2019-05-27T13:00:49", "upload_time_iso_8601": "2019-05-27T13:00:49.462379Z", "url": "https://files.pythonhosted.org/packages/9c/ed/39b33e3690e95ecd786cfa8eb6bc71012c1be3e09fe27b3d7d3589f0125e/dictfier-1.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "663e09f044feb32de8a42da3f6a78e5a", "sha256": "1019a66331c5fccf64d03d508525486448af91f24eff660ae9d11fd724de3ed3"}, "downloads": -1, "filename": "dictfier-1.5.1.tar.gz", "has_sig": false, "md5_digest": "663e09f044feb32de8a42da3f6a78e5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 9386, "upload_time": "2019-05-27T13:00:51", "upload_time_iso_8601": "2019-05-27T13:00:51.918611Z", "url": "https://files.pythonhosted.org/packages/86/d1/5b717b7714ae765f149a209655560bb5f782493f6ca000e5dc7c78f97ce8/dictfier-1.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:33 2020"}