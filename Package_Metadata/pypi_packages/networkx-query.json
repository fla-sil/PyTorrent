{"info": {"author": "Jerome Guibert", "author_email": "jguibert@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Typing :: Typed"], "description": "# networkx-query\n\n\n[![Unix Build Status](https://img.shields.io/travis/geronimo-iia/networkx-query/master.svg?label=unix)](https://travis-ci.com/geronimo-iia/networkx-query)[![Coverage Status](https://img.shields.io/coveralls/geronimo-iia/networkx-query/master.svg)](https://coveralls.io/r/geronimo-iia/networkx-query)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/fe669a02b4aa46b5b1faf619ba2bf382)](https://www.codacy.com/app/geronimo-iia/networkx-query?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=geronimo-iia/networkx-query&amp;utm_campaign=Badge_Grade)[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/geronimo-iia/networkx-query.svg)](https://scrutinizer-ci.com/g/geronimo-iia/networkx-query/?branch=master)\n[![PyPI Version](https://img.shields.io/pypi/v/networkx-query.svg)](https://pypi.org/project/networkx-query)\n[![PyPI License](https://img.shields.io/pypi/l/networkx-query.svg)](https://pypi.org/project/networkx-query)\n\nVersions following [Semantic Versioning](https://semver.org/)\n\n## Overview\n\nNetworkX Query Tool (preview)\n\nSee [documentation](https://geronimo-iia.github.io/networkx-query).\n\n\n## Installation\n\nInstall this library directly into an activated virtual environment:\n\n```text\n$ pip install networkx-query\n```\n\nor add it to your [Poetry](https://poetry.eustace.io/) project:\n\n```text\n$ poetry add networkx-query\n```\n\n## Usage\n\n### Searching nodes\n\n```python\nimport networkx as nx\nfrom networkx_query import search_nodes, search_edges\n\ng = nx.DiGraph()\ng.add_node(1, product=\"chocolate\")\ng.add_node(2, product=\"milk\")\ng.add_node(3, product=\"coat\")\ng.add_edge(1, 2, action=\"shake\")\ng.add_edge(3, 2, action=\"produce\")\n\n\nfor node_id in search_nodes(g, {\"==\": [(\"product\",), \"chocolate\"]}):\n    print(node_id)\n\n>> 1\n```\n\n### Searching edges\n\n```python\nfor edge_id in search_edges(g, {\"eq\": [(\"action\",), \"produce\"]}):\n    print(edge_id)\n\n>> (3, 2)\n```\n\n### Searching relation ship\n\nWith ```search_direct_relationships``` you can made a query which filter edges on their :\n - source node attributes\n - edge attributes\n - target node attributes\n\nWith this graph:\n\n```python\nimport networkx as nx\nfrom networkx_query import search_direct_relationships\n\ng = nx.DiGraph()\nfor i in range(30):\n    g.add_node(i, data=i)\n\nfor i in range(10, 30):\n    g.add_edge(i - 10, i, data=i)\n```\n\nWe can filtering all edges with source node with data < 3:\n\n```python\nlist(search_direct_relationships(graph=g, source={\"lt\": [\"data\", 3]}))\n\n[(0, 10), (1, 11), (2, 12)]\n```\n\n\nWe can filtering all edges with:\n - source node with data < 8\n - edge with data > 15\n\n```python\nlist(search_direct_relationships(graph=g, source={\"lt\": [\"data\", 8]}, edge={\"gt\": [\"data\", 15]}))\n\n>> [(6, 16), (7, 17)]\n```\n\nWe can filtering all edges with:\n - source node with data > 9\n - edge with data > 15\n - target node with data < 22\n\n```python\nsearch_direct_relationships(\n            graph=g, source={\"gt\": [\"data\", 9]}, edge={\"gt\": [\"data\", 15]}, target={'lt': [\"data\", 22]}\n        )\n    )\n\n>> [(10, 20), (11, 21)]\n```\n\n## API\n\nActually, we have:\n\n- [search_edges](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_edges)\n- [search_nodes](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_nodes) \n- [search_direct_relationships](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_direct_relationships) \n\n\nAll this function are based on [prepare_query](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.prepare_query) which return an Evaluator.\n\nQuickly, ```Evaluator``` are function with this signature: (context) -> bool, and ```Context``` is a dictionary like structure (with in and [] methods, and support __contains__ or  (__iter__ and __getitem__))\nWith networkX, node and edge attributes are dictionary like, so implementation of this three methods are very simple.\n\n\n\n## Query language\n\nWe define a little json query language like [json-query-language](https://github.com/clue/json-query-language/blob/master/SYNTAX.md) \nagainst nodes or edges attributes.\n\n\n### Expressions\n\nMain expression syntax turn around this:\n\n```\n{\n    operator_name : parameters\n}\n```\n\n### Basic matching expression\n\nTest if a node/edge has an attribute named \"my_property\":\n```\n{\n    \"has\" : \"my_property\"\n}\n```\n\n\nTest if a node/edge has an attribute product : { \"definition\": { \"name\": xxx }} with xxx equals to \"chocolate\".\n```\n{\n    \"eq\" : [ (\"product\", \"definition\", \"name\"), \"chocolate\"]\n}\n```\n\nThe tuple ```(\"product\", \"definition\", \"name\")``` is a path in attribut dictionnary.\nA Path is a single string or a tuple of string which represente a path in a tree (here a dictionary).\n\nWe support this operators:\n\n| Name     | Alias | Parameters      | Description                                                                   |\n| -------- | :---: | --------------- | ----------------------------------------------------------------------------- |\n| has      |       | Path            | Check if path exists in context.                                              |\n| contains |       | Path, str       | Check if an attribut path exists and contains specified value.                |\n| eq       | `==`  | Path, Any       | Check if an attribut path exists and equals specified value.                  |\n| neq      | `!=`  | Path, Any       | Check if an attribut path did not exists or not equals specified value.       |\n| gt       |  `>`  | Path, Any       | Check if an attribut path exists and greather that specified value.           |\n| lt       |  `<`  | Path, Any       | Check if an attribut path exists and lower that specified value.              |\n| gte      | `>=`  | Path, Any       | Check if an attribut path exists and greather or equals that specified value. |\n| lte      | `<=`  | Path, Any       | Check if an attribut path exists and lower or equals that specified value.    |\n| in       | `:=`  | Path, List[Any] | Check if an attribut path exists and attribut value in specified values.      |\n\n\n### Boolean composition of matching expression\n\nWe support this operators:\n\n| Name | Alias | Parameters    | Description    |\n| ---- | :---: | ------------- | -------------- |\n| and  | `&&`  | list of query | And operator.  |\n| or   | \\|\\|  | list of query | Or operator.   |\n| xor  |       | list of query | xor operator.  |\n| nxor |       | list of query | nxor operator. |\n| not  |  `!`  | query         | Not operator.  |\n\n\nBy default, a list of expressions is equivalent of an \"AND\" of this expressions.\n\nExample:\n```\n{\n    'not': {\n        'has': ['group']\n    },\n    'has': 'application',\n    'eq': [('_link', 'other', 'weight'), 2]\n}\n```\nis equivalent to:\n\n```\n{\n    'and': [\n        {\n            'not': [\n                {\n                    'has': ['group']\n                }\n            ]\n        },\n        {\n            'has': ['application']\n        },\n        {\n            'eq': [('_link', 'other', 'weight'), 2]\n        }\n    ]\n}\n```\n\n\n## Wished Features\n\n- add projection expression (a return like statement)\n- add join relation ship \n- add path condition between node\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/networkx_query", "keywords": "networkx,graph,query", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "networkx-query", "package_url": "https://pypi.org/project/networkx-query/", "platform": "", "project_url": "https://pypi.org/project/networkx-query/", "project_urls": {"Documentation": "https://geronimo-iia.github.io/networkx-query/", "Homepage": "https://pypi.org/project/networkx_query", "Repository": "https://github.com/geronimo-iia/networkx-query"}, "release_url": "https://pypi.org/project/networkx-query/1.0.1/", "requires_dist": ["networkx (>=2.4,<3.0)"], "requires_python": ">=3.7,<4.0", "summary": "NetworkX Query Tool", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>networkx-query</h1>\n<p><a href=\"https://travis-ci.com/geronimo-iia/networkx-query\" rel=\"nofollow\"><img alt=\"Unix Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a8ce73b09afab437472ada48e184dd2c4e4e24d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6765726f6e696d6f2d6969612f6e6574776f726b782d71756572792f6d61737465722e7376673f6c6162656c3d756e6978\"></a><a href=\"https://coveralls.io/r/geronimo-iia/networkx-query\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65391261dcf2333f3a6d946d349dc33431ac884a/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6765726f6e696d6f2d6969612f6e6574776f726b782d71756572792f6d61737465722e737667\"></a>\n<a href=\"https://www.codacy.com/app/geronimo-iia/networkx-query?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=geronimo-iia/networkx-query&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c6f19950b07e2b6fc2211956f7448d9b84629cb/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6665363639613032623461613436623562316661663631396261326266333832\"></a><a href=\"https://scrutinizer-ci.com/g/geronimo-iia/networkx-query/?branch=master\" rel=\"nofollow\"><img alt=\"Scrutinizer Code Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8d310fd0d0a71c04af9b16de2ad83f27d49947f/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f672f6765726f6e696d6f2d6969612f6e6574776f726b782d71756572792e737667\"></a>\n<a href=\"https://pypi.org/project/networkx-query\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e40d041fccc0c7519323047ea88ca101a1b49cc0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e6574776f726b782d71756572792e737667\"></a>\n<a href=\"https://pypi.org/project/networkx-query\" rel=\"nofollow\"><img alt=\"PyPI License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbbc1ae9c36089a3e7f53d41a00aeb4bc5b3cc7e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6e6574776f726b782d71756572792e737667\"></a></p>\n<p>Versions following <a href=\"https://semver.org/\" rel=\"nofollow\">Semantic Versioning</a></p>\n<h2>Overview</h2>\n<p>NetworkX Query Tool (preview)</p>\n<p>See <a href=\"https://geronimo-iia.github.io/networkx-query\" rel=\"nofollow\">documentation</a>.</p>\n<h2>Installation</h2>\n<p>Install this library directly into an activated virtual environment:</p>\n<pre>$ pip install networkx-query\n</pre>\n<p>or add it to your <a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">Poetry</a> project:</p>\n<pre>$ poetry add networkx-query\n</pre>\n<h2>Usage</h2>\n<h3>Searching nodes</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">networkx_query</span> <span class=\"kn\">import</span> <span class=\"n\">search_nodes</span><span class=\"p\">,</span> <span class=\"n\">search_edges</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">()</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">product</span><span class=\"o\">=</span><span class=\"s2\">\"chocolate\"</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">product</span><span class=\"o\">=</span><span class=\"s2\">\"milk\"</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">product</span><span class=\"o\">=</span><span class=\"s2\">\"coat\"</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"shake\"</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"produce\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">for</span> <span class=\"n\">node_id</span> <span class=\"ow\">in</span> <span class=\"n\">search_nodes</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"==\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s2\">\"product\"</span><span class=\"p\">,),</span> <span class=\"s2\">\"chocolate\"</span><span class=\"p\">]}):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">node_id</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span>\n</pre>\n<h3>Searching edges</h3>\n<pre><span class=\"k\">for</span> <span class=\"n\">edge_id</span> <span class=\"ow\">in</span> <span class=\"n\">search_edges</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"eq\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s2\">\"action\"</span><span class=\"p\">,),</span> <span class=\"s2\">\"produce\"</span><span class=\"p\">]}):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">edge_id</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<h3>Searching relation ship</h3>\n<p>With <code>search_direct_relationships</code> you can made a query which filter edges on their :</p>\n<ul>\n<li>source node attributes</li>\n<li>edge attributes</li>\n<li>target node attributes</li>\n</ul>\n<p>With this graph:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">networkx_query</span> <span class=\"kn\">import</span> <span class=\"n\">search_direct_relationships</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">):</span>\n    <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">):</span>\n    <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n<p>We can filtering all edges with source node with data &lt; 3:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">search_direct_relationships</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"lt\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]}))</span>\n\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)]</span>\n</pre>\n<p>We can filtering all edges with:</p>\n<ul>\n<li>source node with data &lt; 8</li>\n<li>edge with data &gt; 15</li>\n</ul>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">search_direct_relationships</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"lt\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]},</span> <span class=\"n\">edge</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"gt\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]}))</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"p\">[(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">)]</span>\n</pre>\n<p>We can filtering all edges with:</p>\n<ul>\n<li>source node with data &gt; 9</li>\n<li>edge with data &gt; 15</li>\n<li>target node with data &lt; 22</li>\n</ul>\n<pre><span class=\"n\">search_direct_relationships</span><span class=\"p\">(</span>\n            <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"gt\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]},</span> <span class=\"n\">edge</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"gt\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]},</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'lt'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">]}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"p\">[(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)]</span>\n</pre>\n<h2>API</h2>\n<p>Actually, we have:</p>\n<ul>\n<li><a href=\"https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_edges\" rel=\"nofollow\">search_edges</a></li>\n<li><a href=\"https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_nodes\" rel=\"nofollow\">search_nodes</a></li>\n<li><a href=\"https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_direct_relationships\" rel=\"nofollow\">search_direct_relationships</a></li>\n</ul>\n<p>All this function are based on <a href=\"https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.prepare_query\" rel=\"nofollow\">prepare_query</a> which return an Evaluator.</p>\n<p>Quickly, <code>Evaluator</code> are function with this signature: (context) -&gt; bool, and <code>Context</code> is a dictionary like structure (with in and [] methods, and support <strong>contains</strong> or  (<strong>iter</strong> and <strong>getitem</strong>))\nWith networkX, node and edge attributes are dictionary like, so implementation of this three methods are very simple.</p>\n<h2>Query language</h2>\n<p>We define a little json query language like <a href=\"https://github.com/clue/json-query-language/blob/master/SYNTAX.md\" rel=\"nofollow\">json-query-language</a>\nagainst nodes or edges attributes.</p>\n<h3>Expressions</h3>\n<p>Main expression syntax turn around this:</p>\n<pre><code>{\n    operator_name : parameters\n}\n</code></pre>\n<h3>Basic matching expression</h3>\n<p>Test if a node/edge has an attribute named \"my_property\":</p>\n<pre><code>{\n    \"has\" : \"my_property\"\n}\n</code></pre>\n<p>Test if a node/edge has an attribute product : { \"definition\": { \"name\": xxx }} with xxx equals to \"chocolate\".</p>\n<pre><code>{\n    \"eq\" : [ (\"product\", \"definition\", \"name\"), \"chocolate\"]\n}\n</code></pre>\n<p>The tuple <code>(\"product\", \"definition\", \"name\")</code> is a path in attribut dictionnary.\nA Path is a single string or a tuple of string which represente a path in a tree (here a dictionary).</p>\n<p>We support this operators:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Alias</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>has</td>\n<td align=\"center\"></td>\n<td>Path</td>\n<td>Check if path exists in context.</td>\n</tr>\n<tr>\n<td>contains</td>\n<td align=\"center\"></td>\n<td>Path, str</td>\n<td>Check if an attribut path exists and contains specified value.</td>\n</tr>\n<tr>\n<td>eq</td>\n<td align=\"center\"><code>==</code></td>\n<td>Path, Any</td>\n<td>Check if an attribut path exists and equals specified value.</td>\n</tr>\n<tr>\n<td>neq</td>\n<td align=\"center\"><code>!=</code></td>\n<td>Path, Any</td>\n<td>Check if an attribut path did not exists or not equals specified value.</td>\n</tr>\n<tr>\n<td>gt</td>\n<td align=\"center\"><code>&gt;</code></td>\n<td>Path, Any</td>\n<td>Check if an attribut path exists and greather that specified value.</td>\n</tr>\n<tr>\n<td>lt</td>\n<td align=\"center\"><code>&lt;</code></td>\n<td>Path, Any</td>\n<td>Check if an attribut path exists and lower that specified value.</td>\n</tr>\n<tr>\n<td>gte</td>\n<td align=\"center\"><code>&gt;=</code></td>\n<td>Path, Any</td>\n<td>Check if an attribut path exists and greather or equals that specified value.</td>\n</tr>\n<tr>\n<td>lte</td>\n<td align=\"center\"><code>&lt;=</code></td>\n<td>Path, Any</td>\n<td>Check if an attribut path exists and lower or equals that specified value.</td>\n</tr>\n<tr>\n<td>in</td>\n<td align=\"center\"><code>:=</code></td>\n<td>Path, List[Any]</td>\n<td>Check if an attribut path exists and attribut value in specified values.</td>\n</tr></tbody></table>\n<h3>Boolean composition of matching expression</h3>\n<p>We support this operators:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Alias</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td align=\"center\"><code>&amp;&amp;</code></td>\n<td>list of query</td>\n<td>And operator.</td>\n</tr>\n<tr>\n<td>or</td>\n<td align=\"center\">||</td>\n<td>list of query</td>\n<td>Or operator.</td>\n</tr>\n<tr>\n<td>xor</td>\n<td align=\"center\"></td>\n<td>list of query</td>\n<td>xor operator.</td>\n</tr>\n<tr>\n<td>nxor</td>\n<td align=\"center\"></td>\n<td>list of query</td>\n<td>nxor operator.</td>\n</tr>\n<tr>\n<td>not</td>\n<td align=\"center\"><code>!</code></td>\n<td>query</td>\n<td>Not operator.</td>\n</tr></tbody></table>\n<p>By default, a list of expressions is equivalent of an \"AND\" of this expressions.</p>\n<p>Example:</p>\n<pre><code>{\n    'not': {\n        'has': ['group']\n    },\n    'has': 'application',\n    'eq': [('_link', 'other', 'weight'), 2]\n}\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>{\n    'and': [\n        {\n            'not': [\n                {\n                    'has': ['group']\n                }\n            ]\n        },\n        {\n            'has': ['application']\n        },\n        {\n            'eq': [('_link', 'other', 'weight'), 2]\n        }\n    ]\n}\n</code></pre>\n<h2>Wished Features</h2>\n<ul>\n<li>add projection expression (a return like statement)</li>\n<li>add join relation ship</li>\n<li>add path condition between node</li>\n</ul>\n\n          </div>"}, "last_serial": 7162989, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "be600f7cb22a83956056a3ea279871d1", "sha256": "2cf4573ebe208ecb57eb73703ba2fe6e0df27e7ee366800e292bf15ce4f3532c"}, "downloads": -1, "filename": "networkx_query-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "be600f7cb22a83956056a3ea279871d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7462, "upload_time": "2020-05-01T18:42:25", "upload_time_iso_8601": "2020-05-01T18:42:25.136362Z", "url": "https://files.pythonhosted.org/packages/d8/1b/463ad63e3ed19f98723e73d6eca21d1aac70d395fdeb7484adb021c59e49/networkx_query-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "303ae7986235829991b49934c47377b9", "sha256": "d58c06832503e4d7beccfa182505cc4c3ee978baff895242eef33c0be099acfe"}, "downloads": -1, "filename": "networkx_query-0.1.0.tar.gz", "has_sig": false, "md5_digest": "303ae7986235829991b49934c47377b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 7803, "upload_time": "2020-05-01T18:42:27", "upload_time_iso_8601": "2020-05-01T18:42:27.738559Z", "url": "https://files.pythonhosted.org/packages/4f/ad/befd3263b0adbea19ea29ff2b83b76306585a6ae4f225942cd6023c04874/networkx_query-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "dd53a56d23aed16d7b7d335dc3443557", "sha256": "dfaea3ea9311ed84f8c0301baead84f8e5459bb75148e9859a545b8e4b5db815"}, "downloads": -1, "filename": "networkx_query-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd53a56d23aed16d7b7d335dc3443557", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9228, "upload_time": "2020-05-02T00:02:07", "upload_time_iso_8601": "2020-05-02T00:02:07.840424Z", "url": "https://files.pythonhosted.org/packages/20/d4/e439f63404cf3916e487a4198ec67f4a9e1abd89c11a4308e7d26118e503/networkx_query-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4db47dd6c3ae84948b5aa09a5191ed2d", "sha256": "597533155c73532493e4842fac1ba06f618ea5d70d181f888210c06b8ba57fc7"}, "downloads": -1, "filename": "networkx_query-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4db47dd6c3ae84948b5aa09a5191ed2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11191, "upload_time": "2020-05-02T00:02:09", "upload_time_iso_8601": "2020-05-02T00:02:09.520070Z", "url": "https://files.pythonhosted.org/packages/f4/e9/28805b6a48e3609c397449be4e1d5f5d073db07fdbc1860f0a2c55e533cb/networkx_query-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a96994e27dca1ed3dfeaae2330479f25", "sha256": "ea6b744840e152902db5a5b51c0ee9f6d273959fb2c8c4a338fdee42abd54ffe"}, "downloads": -1, "filename": "networkx_query-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a96994e27dca1ed3dfeaae2330479f25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 11303, "upload_time": "2020-05-04T10:20:49", "upload_time_iso_8601": "2020-05-04T10:20:49.402573Z", "url": "https://files.pythonhosted.org/packages/50/4c/0ff3b3191efcbd29ec8cb40a840c6c3d5fec8a052c362f597c3a73747e1a/networkx_query-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dd9411eb61c36bdf7dc92e014441c8a", "sha256": "e1d0e2adcae393955e779fea6934d89b157a3abb0a529e8c47d8d9741df34fc4"}, "downloads": -1, "filename": "networkx_query-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9dd9411eb61c36bdf7dc92e014441c8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 13150, "upload_time": "2020-05-04T10:20:50", "upload_time_iso_8601": "2020-05-04T10:20:50.835469Z", "url": "https://files.pythonhosted.org/packages/38/37/1869daa4e0c5ff21e7305441f316e58962de3cc1cb015b2b29e49facd09f/networkx_query-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a96994e27dca1ed3dfeaae2330479f25", "sha256": "ea6b744840e152902db5a5b51c0ee9f6d273959fb2c8c4a338fdee42abd54ffe"}, "downloads": -1, "filename": "networkx_query-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a96994e27dca1ed3dfeaae2330479f25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 11303, "upload_time": "2020-05-04T10:20:49", "upload_time_iso_8601": "2020-05-04T10:20:49.402573Z", "url": "https://files.pythonhosted.org/packages/50/4c/0ff3b3191efcbd29ec8cb40a840c6c3d5fec8a052c362f597c3a73747e1a/networkx_query-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dd9411eb61c36bdf7dc92e014441c8a", "sha256": "e1d0e2adcae393955e779fea6934d89b157a3abb0a529e8c47d8d9741df34fc4"}, "downloads": -1, "filename": "networkx_query-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9dd9411eb61c36bdf7dc92e014441c8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 13150, "upload_time": "2020-05-04T10:20:50", "upload_time_iso_8601": "2020-05-04T10:20:50.835469Z", "url": "https://files.pythonhosted.org/packages/38/37/1869daa4e0c5ff21e7305441f316e58962de3cc1cb015b2b29e49facd09f/networkx_query-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:50 2020"}