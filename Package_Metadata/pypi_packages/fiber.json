{"info": {"author": "Jiale Zhi", "author_email": "jiale@uber.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Topic :: System :: Distributed Computing"], "description": "<p align=\"right\">\n  <a href=\"https://travis-ci.com/uber/fiber\">\n      <img src=\"https://travis-ci.com/uber/fiber.svg?token=BxMzxQEDDtTBPG9151kk&branch=master\" alt=\"build\" />\n  </a>\n</p>\n\n<img src=\"docs/img/fiber_logo.png\" alt=\"drawing\" width=\"550\"/>\n\n# Fiber\n\n### Distributed Computing for AI Made Simple\n\n*This project is experimental and the APIs are not considered stable.*\n\nFiber is a Python distributed computing library for modern computer clusters.\n\n* It is easy to use. Fiber allows you to write programs that run on a computer cluster level without the need to dive into the details of computer cluster.\n* It is easy to learn. Fiber provides the same API as Python's standard [multiprocessing](https://docs.python.org/3.6/library/multiprocessing.html) library that you are familiar with. If you know how to use multiprocessing, you can program a computer cluster with Fiber.\n* It is fast. Fiber's communication backbone is built on top of [Nanomsg](https://nanomsg.org/) which is a high-performance asynchronous messaging library to allow fast and reliable communication.\n* It doesn't need deployment. You run it as the same way as running a normal application on a computer cluster and Fiber handles the rest for you.\n* It it reliable. Fiber has built-in error handling when you are running a pool of workers. Users can focus on writing the actual application code instead of dealing with crashed workers.\n\nOriginally, it was developed to power large scale parallel scientific computation projects like [POET](https://eng.uber.com/poet-open-ended-deep-learning/) and it has been used to power similar projects within Uber.\n\n## Installation\n\n```\npip install fiber\n```\n\nCheck [here](/installation) for details.\n\n## Quick Start\n\n\n### Hello Fiber\nTo use Fiber, simply import it in your code and it works very similar to multiprocessing.\n\n```python\nimport fiber\n\nif __name__ == '__main__':\n    fiber.Process(target=print, args=('Hello, Fiber!',)).start()\n```\n\nNote that `if __name__ == '__main__':` is necessary because Fiber uses *spawn* method to start new processes. Check [here](https://stackoverflow.com/questions/50781216/in-python-multiprocessing-process-do-we-have-to-use-name-main) for details.\n\nLet's take look at another more complex example:\n\n### Estimating Pi\n\n\n```python\nimport fiber\nimport random\n\n@fiber.meta(cpu=1)\ndef inside(p):\n    x, y = random.random(), random.random()\n    return x * x + y * y < 1\n\ndef main():\n    NUM_SAMPLES = int(1e6)\n    pool = fiber.Pool(processes=4)\n    count = sum(pool.map(inside, range(0, NUM_SAMPLES)))\n    print(\"Pi is roughly {}\".format(4.0 * count / NUM_SAMPLES))\n\nif __name__ == '__main__':\n    main()\n```\n\n\nFiber implements most of multiprocessing's API including `Process`, `SimpleQueue`, `Pool`, `Pipe`, `Manager` and it has its own extension to the multiprocessing's API to make it easy to compose large scale distributed applications. For the detailed API guild, check out [here](docs/api).\n\n### Running on a Kubernetes cluster\n\nFiber also has native support for computer clusters. To run the above example on Kubernetes, fiber provided a convenient command line tool to manage the workflow.\n\nAssume you have a working docker environment locally and have finished configuring [Google Cloud SDK](https://cloud.google.com/sdk/docs/quickstarts). Both `gcloud` and `kubectl` are available locally. Then you can start by writing a Dockerfile which describes the running environment.  An example Dockerfile looks like this:\n\n```dockerfile\n# example.docker\nFROM python:3.6-buster\nADD examples/pi_estimation.py /root/pi_estimation.py\nRUN pip install fiber\n```\n**Build an image and launch your job**\n\n```\nfiber run -a python3 /root/pi_estimation.py\n```\n\nThis command will look for local Dockerfile and build a docker image and push it to your Google Container Registry . It then launches the main job which contains your code and runs the command `python3 /root/pi_estimation.py` inside your job. Once the main job is running, it will start 4 subsequent jobs on the cluster and each of them is a Pool worker.\n\n\n## Supported platforms\n\n* Operating system: Linux\n* Python: 3.6+\n* Supported cluster management systems:\n\t* Kubernetes (Tested with Google Kubernetes Engine on Google cloud)\n\nWe are interested in supporting other luster management systems like [Slurm](https://slurm.schedmd.com/), if you want to contribute to it please let us know.\n\n\nCheck [here](/platforms) for details.\n\n## Documentation\nThe documentation, including method/API references, can be found [here](docs/README.md).\n\n\n## Testing\n\nInstall test dependencies. You'll also need to make sure [docker](https://docs.docker.com/install/) is available on the testing machine.\n\n```bash\n$ pip install -e .[test]\n```\n\nRun tests\n\n```bash\n$ make test\n```\n\n## Contributing\nPlease read our [code of conduct](CODE_OF_CONDUCT.md) before you contribute! You can find details for submitting pull requests in the [CONTRIBUTING.md](CONTRIBUTING.md) file. Issue [template](https://help.github.com/articles/about-issue-and-pull-request-templates/).\n\n## Versioning\nWe document versions and changes in our changelog - see the [CHANGELOG.md](CHANGELOG.md) file for details.\n\n## License\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n* Special thanks to Piero Molino for designing the logo for Fiber", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uber/fiber", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "fiber", "package_url": "https://pypi.org/project/fiber/", "platform": "", "project_url": "https://pypi.org/project/fiber/", "project_urls": {"Homepage": "https://github.com/uber/fiber"}, "release_url": "https://pypi.org/project/fiber/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "A distributed computing library for modern computer clusters", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"right\">\n  <a href=\"https://travis-ci.com/uber/fiber\" rel=\"nofollow\">\n      <img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75628998860a99ca25f50ddf3e4a67e62688bf88/68747470733a2f2f7472617669732d63692e636f6d2f756265722f66696265722e7376673f746f6b656e3d42784d7a78514544447454425047393135316b6b266272616e63683d6d6173746572\">\n  </a>\n</p>\n<img alt=\"drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f71089ffca8d372be6352f859b659e7900b4a2f9/646f63732f696d672f66696265725f6c6f676f2e706e67\" width=\"550\">\n<h1>Fiber</h1>\n<h3>Distributed Computing for AI Made Simple</h3>\n<p><em>This project is experimental and the APIs are not considered stable.</em></p>\n<p>Fiber is a Python distributed computing library for modern computer clusters.</p>\n<ul>\n<li>It is easy to use. Fiber allows you to write programs that run on a computer cluster level without the need to dive into the details of computer cluster.</li>\n<li>It is easy to learn. Fiber provides the same API as Python's standard <a href=\"https://docs.python.org/3.6/library/multiprocessing.html\" rel=\"nofollow\">multiprocessing</a> library that you are familiar with. If you know how to use multiprocessing, you can program a computer cluster with Fiber.</li>\n<li>It is fast. Fiber's communication backbone is built on top of <a href=\"https://nanomsg.org/\" rel=\"nofollow\">Nanomsg</a> which is a high-performance asynchronous messaging library to allow fast and reliable communication.</li>\n<li>It doesn't need deployment. You run it as the same way as running a normal application on a computer cluster and Fiber handles the rest for you.</li>\n<li>It it reliable. Fiber has built-in error handling when you are running a pool of workers. Users can focus on writing the actual application code instead of dealing with crashed workers.</li>\n</ul>\n<p>Originally, it was developed to power large scale parallel scientific computation projects like <a href=\"https://eng.uber.com/poet-open-ended-deep-learning/\" rel=\"nofollow\">POET</a> and it has been used to power similar projects within Uber.</p>\n<h2>Installation</h2>\n<pre><code>pip install fiber\n</code></pre>\n<p>Check <a href=\"/installation\" rel=\"nofollow\">here</a> for details.</p>\n<h2>Quick Start</h2>\n<h3>Hello Fiber</h3>\n<p>To use Fiber, simply import it in your code and it works very similar to multiprocessing.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fiber</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">fiber</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'Hello, Fiber!'</span><span class=\"p\">,))</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>Note that <code>if __name__ == '__main__':</code> is necessary because Fiber uses <em>spawn</em> method to start new processes. Check <a href=\"https://stackoverflow.com/questions/50781216/in-python-multiprocessing-process-do-we-have-to-use-name-main\" rel=\"nofollow\">here</a> for details.</p>\n<p>Let's take look at another more complex example:</p>\n<h3>Estimating Pi</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fiber</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"nd\">@fiber</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"p\">(</span><span class=\"n\">cpu</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">inside</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(),</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">NUM_SAMPLES</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1e6</span><span class=\"p\">)</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">fiber</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"n\">processes</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">inside</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">NUM_SAMPLES</span><span class=\"p\">)))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Pi is roughly </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"mf\">4.0</span> <span class=\"o\">*</span> <span class=\"n\">count</span> <span class=\"o\">/</span> <span class=\"n\">NUM_SAMPLES</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Fiber implements most of multiprocessing's API including <code>Process</code>, <code>SimpleQueue</code>, <code>Pool</code>, <code>Pipe</code>, <code>Manager</code> and it has its own extension to the multiprocessing's API to make it easy to compose large scale distributed applications. For the detailed API guild, check out <a href=\"docs/api\" rel=\"nofollow\">here</a>.</p>\n<h3>Running on a Kubernetes cluster</h3>\n<p>Fiber also has native support for computer clusters. To run the above example on Kubernetes, fiber provided a convenient command line tool to manage the workflow.</p>\n<p>Assume you have a working docker environment locally and have finished configuring <a href=\"https://cloud.google.com/sdk/docs/quickstarts\" rel=\"nofollow\">Google Cloud SDK</a>. Both <code>gcloud</code> and <code>kubectl</code> are available locally. Then you can start by writing a Dockerfile which describes the running environment.  An example Dockerfile looks like this:</p>\n<pre><span class=\"c\"># example.docker</span>\n<span class=\"k\">FROM</span> <span class=\"s\">python:3.6-buster</span>\n<span class=\"k\">ADD</span> examples/pi_estimation.py /root/pi_estimation.py\n<span class=\"k\">RUN</span> pip install fiber\n</pre>\n<p><strong>Build an image and launch your job</strong></p>\n<pre><code>fiber run -a python3 /root/pi_estimation.py\n</code></pre>\n<p>This command will look for local Dockerfile and build a docker image and push it to your Google Container Registry . It then launches the main job which contains your code and runs the command <code>python3 /root/pi_estimation.py</code> inside your job. Once the main job is running, it will start 4 subsequent jobs on the cluster and each of them is a Pool worker.</p>\n<h2>Supported platforms</h2>\n<ul>\n<li>Operating system: Linux</li>\n<li>Python: 3.6+</li>\n<li>Supported cluster management systems:\n<ul>\n<li>Kubernetes (Tested with Google Kubernetes Engine on Google cloud)</li>\n</ul>\n</li>\n</ul>\n<p>We are interested in supporting other luster management systems like <a href=\"https://slurm.schedmd.com/\" rel=\"nofollow\">Slurm</a>, if you want to contribute to it please let us know.</p>\n<p>Check <a href=\"/platforms\" rel=\"nofollow\">here</a> for details.</p>\n<h2>Documentation</h2>\n<p>The documentation, including method/API references, can be found <a href=\"docs/README.md\" rel=\"nofollow\">here</a>.</p>\n<h2>Testing</h2>\n<p>Install test dependencies. You'll also need to make sure <a href=\"https://docs.docker.com/install/\" rel=\"nofollow\">docker</a> is available on the testing machine.</p>\n<pre>$ pip install -e .<span class=\"o\">[</span>test<span class=\"o\">]</span>\n</pre>\n<p>Run tests</p>\n<pre>$ make <span class=\"nb\">test</span>\n</pre>\n<h2>Contributing</h2>\n<p>Please read our <a href=\"CODE_OF_CONDUCT.md\" rel=\"nofollow\">code of conduct</a> before you contribute! You can find details for submitting pull requests in the <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a> file. Issue <a href=\"https://help.github.com/articles/about-issue-and-pull-request-templates/\" rel=\"nofollow\">template</a>.</p>\n<h2>Versioning</h2>\n<p>We document versions and changes in our changelog - see the <a href=\"CHANGELOG.md\" rel=\"nofollow\">CHANGELOG.md</a> file for details.</p>\n<h2>License</h2>\n<p>This project is licensed under the Apache 2.0 License - see the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Special thanks to Piero Molino for designing the logo for Fiber</li>\n</ul>\n\n          </div>"}, "last_serial": 6886130, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "67f6c12ca15c38bfe3f38429120a60c0", "sha256": "dccaf2fcb9ffd7daeb45feadcd3dc6399b84d6a9a51763f06c846e04bf8bbeb5"}, "downloads": -1, "filename": "fiber-0.0.1.tar.gz", "has_sig": false, "md5_digest": "67f6c12ca15c38bfe3f38429120a60c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 544, "upload_time": "2019-01-07T19:28:26", "upload_time_iso_8601": "2019-01-07T19:28:26.753945Z", "url": "https://files.pythonhosted.org/packages/bf/84/dc071c857bc1bb979c3346f4e513c94e84ac581060c59244d66d5b067bb3/fiber-0.0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7722d25ab07b6d623dc20c8eca1a1890", "sha256": "ff9ed84367c33c31fd79e935a0db687170f3b0090815eb0459b45f8d01d23451"}, "downloads": -1, "filename": "fiber-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7722d25ab07b6d623dc20c8eca1a1890", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58569, "upload_time": "2020-03-26T01:29:36", "upload_time_iso_8601": "2020-03-26T01:29:36.651245Z", "url": "https://files.pythonhosted.org/packages/85/a8/66c255fb55d261f7955cb0f7e3609990aba1774d4fce161772d6b949ab46/fiber-0.2.0.tar.gz", "yanked": false}], "0.2.0rc1": [{"comment_text": "", "digests": {"md5": "f917ddc2fa1403389fa808bc85162313", "sha256": "67b32e075e5e853f2d288b60431bb5e4f5f8ef2f86929e176f8bd73da5ba3671"}, "downloads": -1, "filename": "fiber-0.2.0rc1.tar.gz", "has_sig": false, "md5_digest": "f917ddc2fa1403389fa808bc85162313", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58577, "upload_time": "2020-03-26T00:58:42", "upload_time_iso_8601": "2020-03-26T00:58:42.360949Z", "url": "https://files.pythonhosted.org/packages/b8/52/b8d07811b278e468041c72a436481f3cb75469bcdc9bf0fad28f82bdd038/fiber-0.2.0rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7722d25ab07b6d623dc20c8eca1a1890", "sha256": "ff9ed84367c33c31fd79e935a0db687170f3b0090815eb0459b45f8d01d23451"}, "downloads": -1, "filename": "fiber-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7722d25ab07b6d623dc20c8eca1a1890", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58569, "upload_time": "2020-03-26T01:29:36", "upload_time_iso_8601": "2020-03-26T01:29:36.651245Z", "url": "https://files.pythonhosted.org/packages/85/a8/66c255fb55d261f7955cb0f7e3609990aba1774d4fce161772d6b949ab46/fiber-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:43 2020"}