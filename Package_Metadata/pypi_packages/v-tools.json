{"info": {"author": "Sander Bollen, Redmar van den Berg", "author_email": "KG_bioinf@lumc.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/vtools/README.html)\n\nvtools\n======\n\nLittle toolset operating over VCF files. Uses cyvcf2 and cython under\nthe hood for speed.\n\n## Installation\n\n### PyPI\nvtools is now on pip! Since the 'vtools' name is already taken by another\npackage, installing _this_ vtools requires installing the following:\n\n```bash\npip install v-tools\n```\n\nAfter installation, tools will still be called `vtools-<tool>`. Programmatic\naccess also simply works with\n\n```python\nimport vtools\n```\n\n### Conda\n\n```bash\nconda install -c bioconda vtools\n```\n\n\nTools\n-----\n\n### vtools-filter\n\nFilter VCF files based on a few criteria. Will output both a filtered VCF\nfile, and a VCF file containing all the filtered-out variants.\n\n####  Filter criteria\n\n| name | meaning | optional |\n| ---- | ------- | -------- |\n| NON_CANONICAL | Non-canonical chromosome | Yes |\n| INDEX_UNCALLED | Index uncalled or homozygous reference | Yes |\n| TOO_HIGH_GONL_AF | Too high GonL allele frequency | Yes |\n| TOO_HIGH_GNOMAD_AF | Too high GnomAD allele frequency | Yes |\n| LOW_GQ | Too low GQ on index sample | Yes |\n| DELETED_ALLELE | The only ALT allele is a deleted allele | No |\n\n#### Configuration \n\nConfiguration of filters goes by a little JSON file. \nSee [here](cfg/example-filter.json) for an example.\n\n\n#### Usage\n\n```bash\nUsage: vtools-filter [OPTIONS]\n\nOptions:\n  -i, --input PATH                Path to input VCF file  [required]\n  -o, --output PATH               Path to output (filtered) VCF file\n                                  [required]\n  -t, --trash PATH                Path to trash VCF file  [required]\n  -p, --params-file PATH          Path to filter params json  [required]\n  --index-sample TEXT             Name of index sample  [required]\n  --immediate-return / --no-immediate-return\n                                  Immediately write filters to file upon\n                                  hitting one filter criterium. Default = True\n  --help                          Show this message and exit.\n\n```\n\n### vtools-stats\n\nCollects some general statistics about a VCF file, and writes a json to\nstdout.\n\n#### Usage\n\n```bash\nUsage: vtools-stats [OPTIONS]\n\nOptions:\n  -i, --input FILE  Input VCF file  [required]\n  --help            Show this message and exit.\n```\n\n### vtools-gcoverage\n\nCollect coverage metrics over a gVCF file for every exon or every transcript\nin a refFlat file. This assumes the input VCF file is at least similar to\nGATK's gVCF files. gVCF files are only expected to have one sample; if\nyour input file contains multiple samples, we simply take the first only.\n\nOutput is a simple TSV file with the following columns\n\n| column | meaning |\n| ------ | ------- |\n| exon | exon number |\n| gene | gene name / symbol / id |\n| mean_dp | mean DP value over the exon |\n| mean_gq | mean GQ value over the exon* |\n| median_dp | median DP value over the exon |\n| median_gq | median GQ value over the exon |\n| perc_at_least_{10, 20, 30, 50, 100}_dp | Percentage of exon with DP value over value |\n| perc_at_least_{10, 29, 30, 50, 90}_gq | Percentage of exon with GQ value over exon | \n| transcript | transcript name / symbol / id |\n\n*: mean GQ value is computed by first calculating the P-value of all GQ \nvalues, then calculating the mean over these P-values, and lastly \nconverting this number back to a phred score.\n\n#### Usage\n\n```bash\nUsage: vtools-gcoverage [OPTIONS]\n\nOptions:\n  -I, --input-gvcf PATH          Path to input VCF file  [required]\n  -R, --refflat-file PATH        Path to refFlat file  [required]\n  --per-exon / --per-transcript  Collect metrics per exon or per transcript\n  --help                         Show this message and exit.\n```\n\n### vtools-evaluate\n\nEvaluate a VCF file to a baseline VCF file containing true positives. \nWe only consider variants that are present in both VCF files. This makes\nit useful when the two VCF files have been produced by wildly different\ntechnologies. E.g, when comparing a WES VCF file vs a SNP array, this\ntool can be quite useful.\n\nOutput is a simple JSON file listing counts of concordant and discordant\nalleles and some other metrics. It is also possible to output the discordant\nVCF records.\n\nMultisample VCF files are allowed; the samples to be evaluated have to be set \nthrough a CLI argument.\n\nVariants from the `--call-vcf` are filtered to have a Genotype Quality (GQ) of\nat least 30 by default. This can be overruled by specifying `--min-qual 0`.\nThe optional flag `--min-depth` can be used to set the minimum read coverage.\n\n#### Usage\n\n```bash\nUsage: vtools-evaluate [OPTIONS]\n\nOptions:\n  -c, --call-vcf PATH           Path to VCF with calls to be evaluated\n                                [required]\n  -p, --positive-vcf PATH       Path to VCF with known calls  [required]\n  -cs, --call-samples TEXT      Sample(s) in call-vcf to consider. May be\n                                called multiple times  [required]\n  -ps, --positive-samples TEXT  Sample(s) in positive-vcf to consider. May be\n                                called multiple times  [required]\n  -s, --stats PATH              Path to output stats json file\n  -dc, --discordant PATH        Path to output gzipped discordant vcf file\n  -mq, --min-qual FLOAT         Minimum quality of variants to consider\n  -md, --min-depth INTEGER      Minimum depth of variants to consider\n  --help                        Show this message and exit.\n```\n\n## License\n\nMIT", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.lumc.nl/klinische-genetica/capture-lumc/vtools", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "v-tools", "package_url": "https://pypi.org/project/v-tools/", "platform": "", "project_url": "https://pypi.org/project/v-tools/", "project_urls": {"Homepage": "https://git.lumc.nl/klinische-genetica/capture-lumc/vtools"}, "release_url": "https://pypi.org/project/v-tools/1.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Various tools operating over VCF files", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://bioconda.github.io/recipes/vtools/README.html\" rel=\"nofollow\"><img alt=\"install with bioconda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2a44da80a9758d4c89782dd239134b2611cce03/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696e7374616c6c253230776974682d62696f636f6e64612d627269676874677265656e2e7376673f7374796c653d666c6174\"></a></p>\n<h1>vtools</h1>\n<p>Little toolset operating over VCF files. Uses cyvcf2 and cython under\nthe hood for speed.</p>\n<h2>Installation</h2>\n<h3>PyPI</h3>\n<p>vtools is now on pip! Since the 'vtools' name is already taken by another\npackage, installing <em>this</em> vtools requires installing the following:</p>\n<pre>pip install v-tools\n</pre>\n<p>After installation, tools will still be called <code>vtools-&lt;tool&gt;</code>. Programmatic\naccess also simply works with</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">vtools</span>\n</pre>\n<h3>Conda</h3>\n<pre>conda install -c bioconda vtools\n</pre>\n<h2>Tools</h2>\n<h3>vtools-filter</h3>\n<p>Filter VCF files based on a few criteria. Will output both a filtered VCF\nfile, and a VCF file containing all the filtered-out variants.</p>\n<h4>Filter criteria</h4>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>meaning</th>\n<th>optional</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NON_CANONICAL</td>\n<td>Non-canonical chromosome</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>INDEX_UNCALLED</td>\n<td>Index uncalled or homozygous reference</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>TOO_HIGH_GONL_AF</td>\n<td>Too high GonL allele frequency</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>TOO_HIGH_GNOMAD_AF</td>\n<td>Too high GnomAD allele frequency</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>LOW_GQ</td>\n<td>Too low GQ on index sample</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>DELETED_ALLELE</td>\n<td>The only ALT allele is a deleted allele</td>\n<td>No</td>\n</tr></tbody></table>\n<h4>Configuration</h4>\n<p>Configuration of filters goes by a little JSON file.\nSee <a href=\"cfg/example-filter.json\" rel=\"nofollow\">here</a> for an example.</p>\n<h4>Usage</h4>\n<pre>Usage: vtools-filter <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n\nOptions:\n  -i, --input PATH                Path to input VCF file  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -o, --output PATH               Path to output <span class=\"o\">(</span>filtered<span class=\"o\">)</span> VCF file\n                                  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -t, --trash PATH                Path to trash VCF file  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -p, --params-file PATH          Path to filter params json  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  --index-sample TEXT             Name of index sample  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  --immediate-return / --no-immediate-return\n                                  Immediately write filters to file upon\n                                  hitting one filter criterium. <span class=\"nv\">Default</span> <span class=\"o\">=</span> True\n  --help                          Show this message and exit.\n</pre>\n<h3>vtools-stats</h3>\n<p>Collects some general statistics about a VCF file, and writes a json to\nstdout.</p>\n<h4>Usage</h4>\n<pre>Usage: vtools-stats <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n\nOptions:\n  -i, --input FILE  Input VCF file  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  --help            Show this message and exit.\n</pre>\n<h3>vtools-gcoverage</h3>\n<p>Collect coverage metrics over a gVCF file for every exon or every transcript\nin a refFlat file. This assumes the input VCF file is at least similar to\nGATK's gVCF files. gVCF files are only expected to have one sample; if\nyour input file contains multiple samples, we simply take the first only.</p>\n<p>Output is a simple TSV file with the following columns</p>\n<table>\n<thead>\n<tr>\n<th>column</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>exon</td>\n<td>exon number</td>\n</tr>\n<tr>\n<td>gene</td>\n<td>gene name / symbol / id</td>\n</tr>\n<tr>\n<td>mean_dp</td>\n<td>mean DP value over the exon</td>\n</tr>\n<tr>\n<td>mean_gq</td>\n<td>mean GQ value over the exon*</td>\n</tr>\n<tr>\n<td>median_dp</td>\n<td>median DP value over the exon</td>\n</tr>\n<tr>\n<td>median_gq</td>\n<td>median GQ value over the exon</td>\n</tr>\n<tr>\n<td>perc_at_least_{10, 20, 30, 50, 100}_dp</td>\n<td>Percentage of exon with DP value over value</td>\n</tr>\n<tr>\n<td>perc_at_least_{10, 29, 30, 50, 90}_gq</td>\n<td>Percentage of exon with GQ value over exon</td>\n</tr>\n<tr>\n<td>transcript</td>\n<td>transcript name / symbol / id</td>\n</tr></tbody></table>\n<p>*: mean GQ value is computed by first calculating the P-value of all GQ\nvalues, then calculating the mean over these P-values, and lastly\nconverting this number back to a phred score.</p>\n<h4>Usage</h4>\n<pre>Usage: vtools-gcoverage <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n\nOptions:\n  -I, --input-gvcf PATH          Path to input VCF file  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -R, --refflat-file PATH        Path to refFlat file  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  --per-exon / --per-transcript  Collect metrics per exon or per transcript\n  --help                         Show this message and exit.\n</pre>\n<h3>vtools-evaluate</h3>\n<p>Evaluate a VCF file to a baseline VCF file containing true positives.\nWe only consider variants that are present in both VCF files. This makes\nit useful when the two VCF files have been produced by wildly different\ntechnologies. E.g, when comparing a WES VCF file vs a SNP array, this\ntool can be quite useful.</p>\n<p>Output is a simple JSON file listing counts of concordant and discordant\nalleles and some other metrics. It is also possible to output the discordant\nVCF records.</p>\n<p>Multisample VCF files are allowed; the samples to be evaluated have to be set\nthrough a CLI argument.</p>\n<p>Variants from the <code>--call-vcf</code> are filtered to have a Genotype Quality (GQ) of\nat least 30 by default. This can be overruled by specifying <code>--min-qual 0</code>.\nThe optional flag <code>--min-depth</code> can be used to set the minimum read coverage.</p>\n<h4>Usage</h4>\n<pre>Usage: vtools-evaluate <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n\nOptions:\n  -c, --call-vcf PATH           Path to VCF with calls to be evaluated\n                                <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -p, --positive-vcf PATH       Path to VCF with known calls  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -cs, --call-samples TEXT      Sample<span class=\"o\">(</span>s<span class=\"o\">)</span> in call-vcf to consider. May be\n                                called multiple <span class=\"nb\">times</span>  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -ps, --positive-samples TEXT  Sample<span class=\"o\">(</span>s<span class=\"o\">)</span> in positive-vcf to consider. May be\n                                called multiple <span class=\"nb\">times</span>  <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -s, --stats PATH              Path to output stats json file\n  -dc, --discordant PATH        Path to output gzipped discordant vcf file\n  -mq, --min-qual FLOAT         Minimum quality of variants to consider\n  -md, --min-depth INTEGER      Minimum depth of variants to consider\n  --help                        Show this message and exit.\n</pre>\n<h2>License</h2>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6309892, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ae235fa1254fd94a0584814c294f86a9", "sha256": "93db5295b6395034b92958b32d9398798489fb5dc7cef909e547a381b57a6458"}, "downloads": -1, "filename": "v-tools-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ae235fa1254fd94a0584814c294f86a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 142882, "upload_time": "2019-05-07T14:41:30", "upload_time_iso_8601": "2019-05-07T14:41:30.024649Z", "url": "https://files.pythonhosted.org/packages/fd/40/61b0b5304947e3df2e409fc42a11cd03774953b1e0ebec356c8ccf49f81f/v-tools-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6c14a4376e9d9e9022c9f9c9b8f2bf53", "sha256": "f5298aa8f220e4e124dde84de8af183983888a6ae1d7c2c3a8e74940c86c2a3f"}, "downloads": -1, "filename": "v-tools-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6c14a4376e9d9e9022c9f9c9b8f2bf53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13018, "upload_time": "2019-12-16T10:14:02", "upload_time_iso_8601": "2019-12-16T10:14:02.702054Z", "url": "https://files.pythonhosted.org/packages/6b/29/90ba7514937e8131fe5e3f4acaf0647745f5ba46976e42a7240b88bd0fe4/v-tools-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c14a4376e9d9e9022c9f9c9b8f2bf53", "sha256": "f5298aa8f220e4e124dde84de8af183983888a6ae1d7c2c3a8e74940c86c2a3f"}, "downloads": -1, "filename": "v-tools-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6c14a4376e9d9e9022c9f9c9b8f2bf53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13018, "upload_time": "2019-12-16T10:14:02", "upload_time_iso_8601": "2019-12-16T10:14:02.702054Z", "url": "https://files.pythonhosted.org/packages/6b/29/90ba7514937e8131fe5e3f4acaf0647745f5ba46976e42a7240b88bd0fe4/v-tools-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:43 2020"}