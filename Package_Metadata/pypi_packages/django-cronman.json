{"info": {"author": "Unhaggle Inc.", "author_email": "", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "License :: OSI Approved :: BSD License", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "# django-cronman\n\n## Overview\n\nDjango app to define and manage periodic tasks at Python level.\n\n## Installation\n\n`django-cronman` can be installed directly from PyPI using `pip`:\n\n```bash\npip install django-cronman\n```\n\nYou can also install it with additional dependencies to be able to use Cron Remote Manager.\n\n```bash\npip install django-cronman[redis]\n```\n\n## Define a new cron job\n\nCron job definition is inspired by Django Admin configuration. To add a new job, you have to create `cron_job.py`\nfile inside an app, create `BaseCronJob` subclass inside and register it:\n\n```python\nfrom cronman.job import BaseCronJob, cron_job_registry\n\nclass HelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n\n    def run(self):\n        \"\"\"Main logic\"\"\"\n        pass\n\ncron_job_registry.register(HelloWorld)\n```\n\nCron job classes are registered (and referred to) by name, which may be customized on registration:\n```python\ncron_job_registry.register(HelloWorld, name='Hello')\n```\nIt's also possible to retrieve or unregister a class (e.g. while testing):\n```python\ncron_job_registry.get('HelloWorld')\ncron_job_registry.unregister('HelloWorld')\n```\nIf there is more than 1 cron job in given app, it's recommended to create a package instead of single `cron_jobs` module, create one submodule per class and do the imports and registration in package's  `__init__.py`.\n\n## Configure cron jobs\n\nTo ensure that a cron job is executed periodically, you have add an entry to `CRON_JOBS`:\n\n```python\nCRON_JOBS = (\n    ...\n    # (<time spec>, <job spec>)\n    # 'HelloWorld' will be executed a 5:15AM every day:\n    ('   15   5   *   *   *', 'HelloWorld'),\n)\n```\n\nSet ```CRONMAN_JOBS_MODULE``` to the dotted path name of the module where cron jobs are specified. Remember, this module MUST have a ```CRON_JOBS``` attribute. ```CRONMAN_JOBS_MODULE``` is ```None``` by default. For example:\n\n```python\n# settings_local.py\n\nCRONMAN_JOBS_MODULE = 'app.cron_jobs.name'\n```\n\n## Run the scheduler\n\nCron jobs defined in ```settings.CRONMAN_JOBS_MODULE``` are started by `cron_scheduler` command from `cron` app.\nThis command constructs a list of jobs that should be executed in current period (now +/- 1 minute)\nand creates **a new subprocess** for each job.\n```\npython manage.py cron_scheduler run\n```\nThis command should be added to system's crontab on server responsible for running periodic tasks\nand executed every 2 minutes.\n\n## Run single cron job\n\nCommand `cron_worker run <job spec>` is responsible for executing cron jobs:\n```\npython manage.py cron_worker run HelloWorld\n```\n\n## Cron job parameters\n\nCron job classes can accept parameters which are passed to `run` method as positional or named arguments:\n```python\nclass HelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n\n    def run(self, what, sleep=None):\n        \"\"\"Main logic\"\"\"\n        print \"Hello {}\".format(what)\n        if sleep:\n            time.sleep(int(sleep))\n    ...\n```\n```\npython manage.py cron_worker run HelloWorld:world,sleep=5\n```\nParameters are passed as string values, any type casts should be made in `run` method.\nQuoted string with spaces are supported, but comma can be used only as argument separator:\n```\npython manage.py cron_worker run HelloWorld:\"big world\",sleep=5\n```\nThere are utility functions for extracting lists and boolean values in `cronman.utils` module.\n\n## Configure Cronitor support\n\n`cron_worker` command can notify Cronitor when a job is started, finished or it has failed.\nTo enable this you have to:\n1. Enable Cronitor support in settings `CRONMAN_CRONITOR_ENABLED = True`\n2. Configure you cron job class:\n```python\nclass HelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n    cronitor_id = 'ab12z'  # ID is assigned in Cronitor's dashboard\n```\n\nWe may disable sending optional \"RUN\" and \"FAIL\" pings to Cronitor when cron job starts by setting `cronitor_ping_run = False` or `cronitor_ping_fail = False` but this doesn't seem to be necessary.\n\n**Important note:**\nWhen adding a new monitor in Cronitor dashboard, please use type **heartbeat**. Avoid using **cron job** monitors, as they're sending false-positive alerts \"Has not run on schedule\".\n\n\n## Configure lock\n\nTasks can acquire locks to prevent concurrent calls. Locks have form of PIDfiles located in `settings.CRONMAN_DATA_DIR`. To modify lock behavior for given cron job class you can set `lock_type` attribute:\n\n```python\nfrom cronman.taxonomies import LockType\n\nclass HelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n    lock_type = LockType.PARAMS\n```\nThe following values are supported:\n* `None` - no lock, concurrency is allowed\n* `LockType.CLASS` (default) - only one instance of given cron job class can be run at the same time (e.g. `Foo:p=1` and `Foo:p=2` can't work concurrently)\n* `LockType.PARAMS` - only one combination of class and params can be run at the same time (e.g. `Foo:p=1` and `Foo:p=2` can work concurrently, but another call to `Foo:p=1` will be prohibited)\nLocks acquired/released by `cron_worker` command.\n\nWe can configure a shared lock for several cron job classes to make sure only one of them is running:\n\n```python\nfrom cronman.taxonomies import LockType\n\nclass HelloWorld1(BaseCronJob):\n    \"\"\"Demo Cron Job class (1)\"\"\"\n    lock_type = LockType.CLASS\n    lock_name = 'HelloWorld'\n\nclass HelloWorld2(BaseCronJob):\n    \"\"\"Demo Cron Job class (2)\"\"\"\n    lock_type = LockType.CLASS\n    lock_name = 'HelloWorld'\n```\n\n## Configure CPU and IO priority\n\nWe can assign CPU priority (`nice`) to a cron job class by using `worker_cpu_priority` attribute:\n```python\nfrom cronman.taxonomies import CPUPriority\n\nclass NiceHellowWorld(BaseCronJob):\n    \"\"\"Hello World running through `nice -n 19`\"\"\"\n    worker_cpu_priority = CPUPriority.LOWEST\n```\nWe can also customize IO priority (`ionice`) by assigning one of values from `cronman.taxonomies.IOPriority` to `worker_io_priority` attribute, but this is not necessary in most cases, as `nice` changes IO priority as well.\n\nCommands `cron_scheduler run`, `cron_worker resume`, and cron job `RunCronTasks` will spawn worker processes with respect to CPU and IO priorities assigned to cron job classes. These settings **are not** enforced when running `cron_worker run` so you have to prepend `nice`/`ionice` to such calls manually.\n\n## List and kill running cron jobs\n\nCommand `cron_worker status` shows currently running cron jobs - PIDfile name, PID and status (`ALIVE`, `DEAD`).\nSearch results can be limited by `job spec` (cron job name, parameters):\n```\npython manage.py cron_worker status\npython manage.py cron_worker status Foo\npython manage.py cron_worker status Foo:bar=1\n```\n\nCommand `cron_worker kill` kills active cron jobs, gracefully (`SIGTERM`) or by force when process refuses to die (`SIGKILL`). List of tasks can be limited by `job spec`:\n```\npython manage.py cron_worker kill\npython manage.py cron_worker kill Foo\npython manage.py cron_worker kill Foo:bar=1\n```\nSingle process can be killed also using PID:\n```\npython manage.py cron_worker kill 39078\n```\n\n## Resuming cron jobs\n\nSubset of cron jobs can be resumed after being killed:\n\n```python\n\nclass ResumableHelloWorld(BaseCronJob):\n    \"\"\"Demo Cron Job class\"\"\"\n    can_resume = True\n```\n\nCommand `cron_worker resume` starts all killed cron jobs with `can_resume` capability:\n```\npython manage.py cron_worker resume\n```\n\nTo remove all entries about dead cron jobs and make sure they won't be resumed we can run `cron_worker clean` command:\n```\npython manage.py cron_worker clean\n```\n\nCommand `cron_worker suspend` cleans all previous entries about dead cron jobs and then kills all running ones to make sure that next `resume` will raise only recently killed jobs:\n```\npython manage.py cron_worker suspend\n```\n\n\n## List available cron jobs\n\nCommand `cron_worker info` shows list of all available cron jobs:\n```\npython manage.py cron_worker info\n```\nWhen cron job name is passed to this command, system displays docstring and parameters of given cron job:\n```\npython manage.py cron_worker info Foo\n```\n\n## Disable the scheduler\n\nScheduler command can be disabled temporarily:\n```\npython manage.py cron_scheduler disable\n```\nand re-enabled later:\n```\npython manage.py cron_scheduler enable\n```\nCalls to `cron_scheduler run` will not spawn worker processes while scheduler is disabled.\n\n## Send errors to sentry\n\nErrors in cron job classes are intercepted by `cron_worker` and sent to Sentry using the same config as other Django commands (`settings.RAVEN_MANAGEMENT_COMMAND_CONFIG`).\nIf `settings.CRONMAN_RAVEN_CMD` is defined, the scheduler will use it as execution script for worker processes, e.g.\n`python manage.py cron_worker run Foo:bar=1` will be converted to `{CRONMAN_RAVEN_CMD} -c \"python manage.py cron_worker run Foo:bar=1\"`\n\n## Cron Tasks - running cron jobs from Admin area\n\nSome cron jobs can be requested to start from Admin area: **Admin > Cron > Cron Tasks**\nTo add a cron job class to the list in Admin we need to set `ALLOWED_CRON_TASKS` setting:\n\n```python\n\nALLOWED_CRON_TASKS = (\n    'HelloWorld',\n)\n```\nTo request another run of given cron job we can just create a new `CronTask` record in Admin.\nCron job `RunCronTasks` started every 4 minutes by the scheduler will spawn a separate worker process for each pending Cron Task.\n\n## Changelog\n\n2020-04-30 - 2.0.1 Fix for sentry-sdk.\n2020-04-23 - 2.0.0 Replace raven with sentry-sdk.\n2020-01-09 - 1.2.0 Django 2 compatibility.\n2019-04-30 - 1.1.1 Pre-commit.com hooks support. Docs update\n2019-03-13 - 1.1.0 Add support for cronitor ping for cron_scheduler\n2019-02-25 - 1.0.0 Initial version released", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/unhaggle/django-cronman", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-cronman", "package_url": "https://pypi.org/project/django-cronman/", "platform": "", "project_url": "https://pypi.org/project/django-cronman/", "project_urls": {"Homepage": "https://github.com/unhaggle/django-cronman"}, "release_url": "https://pypi.org/project/django-cronman/2.0.1/", "requires_dist": null, "requires_python": "", "summary": "Cron management app for Django", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-cronman</h1>\n<h2>Overview</h2>\n<p>Django app to define and manage periodic tasks at Python level.</p>\n<h2>Installation</h2>\n<p><code>django-cronman</code> can be installed directly from PyPI using <code>pip</code>:</p>\n<pre>pip install django-cronman\n</pre>\n<p>You can also install it with additional dependencies to be able to use Cron Remote Manager.</p>\n<pre>pip install django-cronman<span class=\"o\">[</span>redis<span class=\"o\">]</span>\n</pre>\n<h2>Define a new cron job</h2>\n<p>Cron job definition is inspired by Django Admin configuration. To add a new job, you have to create <code>cron_job.py</code>\nfile inside an app, create <code>BaseCronJob</code> subclass inside and register it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cronman.job</span> <span class=\"kn\">import</span> <span class=\"n\">BaseCronJob</span><span class=\"p\">,</span> <span class=\"n\">cron_job_registry</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HelloWorld</span><span class=\"p\">(</span><span class=\"n\">BaseCronJob</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Demo Cron Job class\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Main logic\"\"\"</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">cron_job_registry</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">HelloWorld</span><span class=\"p\">)</span>\n</pre>\n<p>Cron job classes are registered (and referred to) by name, which may be customized on registration:</p>\n<pre><span class=\"n\">cron_job_registry</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">HelloWorld</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Hello'</span><span class=\"p\">)</span>\n</pre>\n<p>It's also possible to retrieve or unregister a class (e.g. while testing):</p>\n<pre><span class=\"n\">cron_job_registry</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'HelloWorld'</span><span class=\"p\">)</span>\n<span class=\"n\">cron_job_registry</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">(</span><span class=\"s1\">'HelloWorld'</span><span class=\"p\">)</span>\n</pre>\n<p>If there is more than 1 cron job in given app, it's recommended to create a package instead of single <code>cron_jobs</code> module, create one submodule per class and do the imports and registration in package's  <code>__init__.py</code>.</p>\n<h2>Configure cron jobs</h2>\n<p>To ensure that a cron job is executed periodically, you have add an entry to <code>CRON_JOBS</code>:</p>\n<pre><span class=\"n\">CRON_JOBS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"c1\"># (&lt;time spec&gt;, &lt;job spec&gt;)</span>\n    <span class=\"c1\"># 'HelloWorld' will be executed a 5:15AM every day:</span>\n    <span class=\"p\">(</span><span class=\"s1\">'   15   5   *   *   *'</span><span class=\"p\">,</span> <span class=\"s1\">'HelloWorld'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Set <code>CRONMAN_JOBS_MODULE</code> to the dotted path name of the module where cron jobs are specified. Remember, this module MUST have a <code>CRON_JOBS</code> attribute. <code>CRONMAN_JOBS_MODULE</code> is <code>None</code> by default. For example:</p>\n<pre><span class=\"c1\"># settings_local.py</span>\n\n<span class=\"n\">CRONMAN_JOBS_MODULE</span> <span class=\"o\">=</span> <span class=\"s1\">'app.cron_jobs.name'</span>\n</pre>\n<h2>Run the scheduler</h2>\n<p>Cron jobs defined in <code>settings.CRONMAN_JOBS_MODULE</code> are started by <code>cron_scheduler</code> command from <code>cron</code> app.\nThis command constructs a list of jobs that should be executed in current period (now +/- 1 minute)\nand creates <strong>a new subprocess</strong> for each job.</p>\n<pre><code>python manage.py cron_scheduler run\n</code></pre>\n<p>This command should be added to system's crontab on server responsible for running periodic tasks\nand executed every 2 minutes.</p>\n<h2>Run single cron job</h2>\n<p>Command <code>cron_worker run &lt;job spec&gt;</code> is responsible for executing cron jobs:</p>\n<pre><code>python manage.py cron_worker run HelloWorld\n</code></pre>\n<h2>Cron job parameters</h2>\n<p>Cron job classes can accept parameters which are passed to <code>run</code> method as positional or named arguments:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">HelloWorld</span><span class=\"p\">(</span><span class=\"n\">BaseCronJob</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Demo Cron Job class\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">what</span><span class=\"p\">,</span> <span class=\"n\">sleep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Main logic\"\"\"</span>\n        <span class=\"nb\">print</span> <span class=\"s2\">\"Hello </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sleep</span><span class=\"p\">:</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sleep</span><span class=\"p\">))</span>\n    <span class=\"o\">...</span>\n</pre>\n<pre><code>python manage.py cron_worker run HelloWorld:world,sleep=5\n</code></pre>\n<p>Parameters are passed as string values, any type casts should be made in <code>run</code> method.\nQuoted string with spaces are supported, but comma can be used only as argument separator:</p>\n<pre><code>python manage.py cron_worker run HelloWorld:\"big world\",sleep=5\n</code></pre>\n<p>There are utility functions for extracting lists and boolean values in <code>cronman.utils</code> module.</p>\n<h2>Configure Cronitor support</h2>\n<p><code>cron_worker</code> command can notify Cronitor when a job is started, finished or it has failed.\nTo enable this you have to:</p>\n<ol>\n<li>Enable Cronitor support in settings <code>CRONMAN_CRONITOR_ENABLED = True</code></li>\n<li>Configure you cron job class:</li>\n</ol>\n<pre><span class=\"k\">class</span> <span class=\"nc\">HelloWorld</span><span class=\"p\">(</span><span class=\"n\">BaseCronJob</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Demo Cron Job class\"\"\"</span>\n    <span class=\"n\">cronitor_id</span> <span class=\"o\">=</span> <span class=\"s1\">'ab12z'</span>  <span class=\"c1\"># ID is assigned in Cronitor's dashboard</span>\n</pre>\n<p>We may disable sending optional \"RUN\" and \"FAIL\" pings to Cronitor when cron job starts by setting <code>cronitor_ping_run = False</code> or <code>cronitor_ping_fail = False</code> but this doesn't seem to be necessary.</p>\n<p><strong>Important note:</strong>\nWhen adding a new monitor in Cronitor dashboard, please use type <strong>heartbeat</strong>. Avoid using <strong>cron job</strong> monitors, as they're sending false-positive alerts \"Has not run on schedule\".</p>\n<h2>Configure lock</h2>\n<p>Tasks can acquire locks to prevent concurrent calls. Locks have form of PIDfiles located in <code>settings.CRONMAN_DATA_DIR</code>. To modify lock behavior for given cron job class you can set <code>lock_type</code> attribute:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cronman.taxonomies</span> <span class=\"kn\">import</span> <span class=\"n\">LockType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HelloWorld</span><span class=\"p\">(</span><span class=\"n\">BaseCronJob</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Demo Cron Job class\"\"\"</span>\n    <span class=\"n\">lock_type</span> <span class=\"o\">=</span> <span class=\"n\">LockType</span><span class=\"o\">.</span><span class=\"n\">PARAMS</span>\n</pre>\n<p>The following values are supported:</p>\n<ul>\n<li><code>None</code> - no lock, concurrency is allowed</li>\n<li><code>LockType.CLASS</code> (default) - only one instance of given cron job class can be run at the same time (e.g. <code>Foo:p=1</code> and <code>Foo:p=2</code> can't work concurrently)</li>\n<li><code>LockType.PARAMS</code> - only one combination of class and params can be run at the same time (e.g. <code>Foo:p=1</code> and <code>Foo:p=2</code> can work concurrently, but another call to <code>Foo:p=1</code> will be prohibited)\nLocks acquired/released by <code>cron_worker</code> command.</li>\n</ul>\n<p>We can configure a shared lock for several cron job classes to make sure only one of them is running:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cronman.taxonomies</span> <span class=\"kn\">import</span> <span class=\"n\">LockType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HelloWorld1</span><span class=\"p\">(</span><span class=\"n\">BaseCronJob</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Demo Cron Job class (1)\"\"\"</span>\n    <span class=\"n\">lock_type</span> <span class=\"o\">=</span> <span class=\"n\">LockType</span><span class=\"o\">.</span><span class=\"n\">CLASS</span>\n    <span class=\"n\">lock_name</span> <span class=\"o\">=</span> <span class=\"s1\">'HelloWorld'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HelloWorld2</span><span class=\"p\">(</span><span class=\"n\">BaseCronJob</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Demo Cron Job class (2)\"\"\"</span>\n    <span class=\"n\">lock_type</span> <span class=\"o\">=</span> <span class=\"n\">LockType</span><span class=\"o\">.</span><span class=\"n\">CLASS</span>\n    <span class=\"n\">lock_name</span> <span class=\"o\">=</span> <span class=\"s1\">'HelloWorld'</span>\n</pre>\n<h2>Configure CPU and IO priority</h2>\n<p>We can assign CPU priority (<code>nice</code>) to a cron job class by using <code>worker_cpu_priority</code> attribute:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cronman.taxonomies</span> <span class=\"kn\">import</span> <span class=\"n\">CPUPriority</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NiceHellowWorld</span><span class=\"p\">(</span><span class=\"n\">BaseCronJob</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Hello World running through `nice -n 19`\"\"\"</span>\n    <span class=\"n\">worker_cpu_priority</span> <span class=\"o\">=</span> <span class=\"n\">CPUPriority</span><span class=\"o\">.</span><span class=\"n\">LOWEST</span>\n</pre>\n<p>We can also customize IO priority (<code>ionice</code>) by assigning one of values from <code>cronman.taxonomies.IOPriority</code> to <code>worker_io_priority</code> attribute, but this is not necessary in most cases, as <code>nice</code> changes IO priority as well.</p>\n<p>Commands <code>cron_scheduler run</code>, <code>cron_worker resume</code>, and cron job <code>RunCronTasks</code> will spawn worker processes with respect to CPU and IO priorities assigned to cron job classes. These settings <strong>are not</strong> enforced when running <code>cron_worker run</code> so you have to prepend <code>nice</code>/<code>ionice</code> to such calls manually.</p>\n<h2>List and kill running cron jobs</h2>\n<p>Command <code>cron_worker status</code> shows currently running cron jobs - PIDfile name, PID and status (<code>ALIVE</code>, <code>DEAD</code>).\nSearch results can be limited by <code>job spec</code> (cron job name, parameters):</p>\n<pre><code>python manage.py cron_worker status\npython manage.py cron_worker status Foo\npython manage.py cron_worker status Foo:bar=1\n</code></pre>\n<p>Command <code>cron_worker kill</code> kills active cron jobs, gracefully (<code>SIGTERM</code>) or by force when process refuses to die (<code>SIGKILL</code>). List of tasks can be limited by <code>job spec</code>:</p>\n<pre><code>python manage.py cron_worker kill\npython manage.py cron_worker kill Foo\npython manage.py cron_worker kill Foo:bar=1\n</code></pre>\n<p>Single process can be killed also using PID:</p>\n<pre><code>python manage.py cron_worker kill 39078\n</code></pre>\n<h2>Resuming cron jobs</h2>\n<p>Subset of cron jobs can be resumed after being killed:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ResumableHelloWorld</span><span class=\"p\">(</span><span class=\"n\">BaseCronJob</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Demo Cron Job class\"\"\"</span>\n    <span class=\"n\">can_resume</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>Command <code>cron_worker resume</code> starts all killed cron jobs with <code>can_resume</code> capability:</p>\n<pre><code>python manage.py cron_worker resume\n</code></pre>\n<p>To remove all entries about dead cron jobs and make sure they won't be resumed we can run <code>cron_worker clean</code> command:</p>\n<pre><code>python manage.py cron_worker clean\n</code></pre>\n<p>Command <code>cron_worker suspend</code> cleans all previous entries about dead cron jobs and then kills all running ones to make sure that next <code>resume</code> will raise only recently killed jobs:</p>\n<pre><code>python manage.py cron_worker suspend\n</code></pre>\n<h2>List available cron jobs</h2>\n<p>Command <code>cron_worker info</code> shows list of all available cron jobs:</p>\n<pre><code>python manage.py cron_worker info\n</code></pre>\n<p>When cron job name is passed to this command, system displays docstring and parameters of given cron job:</p>\n<pre><code>python manage.py cron_worker info Foo\n</code></pre>\n<h2>Disable the scheduler</h2>\n<p>Scheduler command can be disabled temporarily:</p>\n<pre><code>python manage.py cron_scheduler disable\n</code></pre>\n<p>and re-enabled later:</p>\n<pre><code>python manage.py cron_scheduler enable\n</code></pre>\n<p>Calls to <code>cron_scheduler run</code> will not spawn worker processes while scheduler is disabled.</p>\n<h2>Send errors to sentry</h2>\n<p>Errors in cron job classes are intercepted by <code>cron_worker</code> and sent to Sentry using the same config as other Django commands (<code>settings.RAVEN_MANAGEMENT_COMMAND_CONFIG</code>).\nIf <code>settings.CRONMAN_RAVEN_CMD</code> is defined, the scheduler will use it as execution script for worker processes, e.g.\n<code>python manage.py cron_worker run Foo:bar=1</code> will be converted to <code>{CRONMAN_RAVEN_CMD} -c \"python manage.py cron_worker run Foo:bar=1\"</code></p>\n<h2>Cron Tasks - running cron jobs from Admin area</h2>\n<p>Some cron jobs can be requested to start from Admin area: <strong>Admin &gt; Cron &gt; Cron Tasks</strong>\nTo add a cron job class to the list in Admin we need to set <code>ALLOWED_CRON_TASKS</code> setting:</p>\n<pre><span class=\"n\">ALLOWED_CRON_TASKS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'HelloWorld'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To request another run of given cron job we can just create a new <code>CronTask</code> record in Admin.\nCron job <code>RunCronTasks</code> started every 4 minutes by the scheduler will spawn a separate worker process for each pending Cron Task.</p>\n<h2>Changelog</h2>\n<p>2020-04-30 - 2.0.1 Fix for sentry-sdk.\n2020-04-23 - 2.0.0 Replace raven with sentry-sdk.\n2020-01-09 - 1.2.0 Django 2 compatibility.\n2019-04-30 - 1.1.1 Pre-commit.com hooks support. Docs update\n2019-03-13 - 1.1.0 Add support for cronitor ping for cron_scheduler\n2019-02-25 - 1.0.0 Initial version released</p>\n\n          </div>"}, "last_serial": 7136393, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6c219282e94b3b9e11ece1723be5e381", "sha256": "904c8b8258ebe80a4708643c931620ef9784cd72deb64eb1feb6be6c14d5710d"}, "downloads": -1, "filename": "django-cronman-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6c219282e94b3b9e11ece1723be5e381", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50179, "upload_time": "2019-02-25T15:05:56", "upload_time_iso_8601": "2019-02-25T15:05:56.733258Z", "url": "https://files.pythonhosted.org/packages/61/a1/9028d06105cadaf236b6cb56275280b2027172ca64eb5610fc1fc80eddfa/django-cronman-1.0.0.tar.gz", "yanked": false}], "1.0.0b1": [{"comment_text": "", "digests": {"md5": "9481cba09353ad7fec65a85646b147ee", "sha256": "15a2bb7115b437ce1f3c9e9ed507bb47fa4a9636e3da399b6d70ac4d28d54ff2"}, "downloads": -1, "filename": "django-cronman-1.0.0b1.tar.gz", "has_sig": false, "md5_digest": "9481cba09353ad7fec65a85646b147ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50145, "upload_time": "2018-09-25T16:22:07", "upload_time_iso_8601": "2018-09-25T16:22:07.507665Z", "url": "https://files.pythonhosted.org/packages/72/76/b8b5ce87712a405214b7a6a3465db3189f2fb8153d4b7089a641ed6c30bc/django-cronman-1.0.0b1.tar.gz", "yanked": false}], "1.0.0b2": [{"comment_text": "", "digests": {"md5": "68345f22b4468e59e5b556fa3089ce51", "sha256": "d1d14e0ba4f93193cdd523ef080c25749a928ff66e2206b4bc2242ab877b4d00"}, "downloads": -1, "filename": "django-cronman-1.0.0b2.tar.gz", "has_sig": false, "md5_digest": "68345f22b4468e59e5b556fa3089ce51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53549, "upload_time": "2018-11-05T00:20:53", "upload_time_iso_8601": "2018-11-05T00:20:53.578598Z", "url": "https://files.pythonhosted.org/packages/8e/49/a1f73b9a5dba35b2c00053156e64e1a706ba9f23f338106ed78678b10277/django-cronman-1.0.0b2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2ff0d03a6acca0dad78b009715b59a57", "sha256": "423de7b791fdc4e123ffe820ec191e03346493c0e5044825b895abf5bf8df64e"}, "downloads": -1, "filename": "django-cronman-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2ff0d03a6acca0dad78b009715b59a57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50945, "upload_time": "2019-03-13T06:49:13", "upload_time_iso_8601": "2019-03-13T06:49:13.263073Z", "url": "https://files.pythonhosted.org/packages/0b/0d/edefa86a9ca0fb18c7447492be647d146caf1229e155701b217bd4453e77/django-cronman-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "ce587cbcfa3f08de4653f8a155124766", "sha256": "dab5672bd81ec343250f2fb66ab9a1f71cfeef84b213ae78d22427e9a006a386"}, "downloads": -1, "filename": "django-cronman-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ce587cbcfa3f08de4653f8a155124766", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51014, "upload_time": "2019-04-30T08:56:22", "upload_time_iso_8601": "2019-04-30T08:56:22.966782Z", "url": "https://files.pythonhosted.org/packages/ca/3b/b1cfd7925afb71eaa22559763ec966fe90d20c78b2cc6d5f2fa841adb1e8/django-cronman-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "ef4c053e9cba8054386ecb1420ee7826", "sha256": "4c94d7ef0ef0b4b62253736da0af85f2b548e67d370fdb2c2d5de0a8128e0d98"}, "downloads": -1, "filename": "django_cronman-1.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "ef4c053e9cba8054386ecb1420ee7826", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 70682, "upload_time": "2020-01-09T08:24:03", "upload_time_iso_8601": "2020-01-09T08:24:03.726237Z", "url": "https://files.pythonhosted.org/packages/c2/42/96cf3574b928e03745b59157c6b830d5913da4dc8bf9772f0a58a549119f/django_cronman-1.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "759eab0254e2081ed4a2b1f123e9cb24", "sha256": "4e584b25ff80ce580aa34989bcdc0dfa0201f5073465e66790075b7f68a287f6"}, "downloads": -1, "filename": "django-cronman-1.2.0.tar.gz", "has_sig": false, "md5_digest": "759eab0254e2081ed4a2b1f123e9cb24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51177, "upload_time": "2020-01-09T08:24:05", "upload_time_iso_8601": "2020-01-09T08:24:05.274516Z", "url": "https://files.pythonhosted.org/packages/57/0d/b79d7bc6f55605d880d8206543ef3489f37bf96fb32fb0458f4f887354f0/django-cronman-1.2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "cc6fda4c7dd566a2c555e566cbb01b42", "sha256": "dd60c4d18a245e925be2871d6b73c199a16e372ad35c2ad22aedb4f20e3aed63"}, "downloads": -1, "filename": "django-cronman-2.0.1.tar.gz", "has_sig": false, "md5_digest": "cc6fda4c7dd566a2c555e566cbb01b42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54457, "upload_time": "2020-04-30T10:18:43", "upload_time_iso_8601": "2020-04-30T10:18:43.675581Z", "url": "https://files.pythonhosted.org/packages/cf/e5/9d9280cfc057112157f57f02fd515315ac66c42e07386375df1fa37c69b4/django-cronman-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cc6fda4c7dd566a2c555e566cbb01b42", "sha256": "dd60c4d18a245e925be2871d6b73c199a16e372ad35c2ad22aedb4f20e3aed63"}, "downloads": -1, "filename": "django-cronman-2.0.1.tar.gz", "has_sig": false, "md5_digest": "cc6fda4c7dd566a2c555e566cbb01b42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54457, "upload_time": "2020-04-30T10:18:43", "upload_time_iso_8601": "2020-04-30T10:18:43.675581Z", "url": "https://files.pythonhosted.org/packages/cf/e5/9d9280cfc057112157f57f02fd515315ac66c42e07386375df1fa37c69b4/django-cronman-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:47 2020"}