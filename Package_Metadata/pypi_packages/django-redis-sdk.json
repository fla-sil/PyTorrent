{"info": {"author": "Midhun C Nair", "author_email": "midhunch@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Django Redis SDK\n================\n\n\n1.0.0.0\n-------\n\n* General Bug Fixes\n\n0.1.1.0\n-------\n\n* General Bug Fixes\n\n0.1.0.0\n-------\n\nDjango Redis SDK: A SDK for connecting to Redis server from Django.\n\n* Supports both TCP socket connection and Unix socket connection\n* Plug and play architecture.\n* Everything is configurable.\n* Supports base client connection in master/slave configuration (Out of box with ``DjangoRedisSDKCache`` backend class).\n* Supports sharded client connection configuration (Out of box with ``DjangoRedisSDKShrededCache`` backend class).\n* You have Dummy Cache backend for just testing or monkey patching (Achieved using ``DjangoRedisSDKDummyCache`` backend class).\n* A wrapper around redis package.\n* Pluggable CLIENT, REDIS_CLIENT, PARSER, COMPRESSOR, SERIALIZER,\n* Out of the box support for Master-Slave and Shard client.\n* supports all default apis.\n* supports redis cluster; **requires** redis-py-cluster\n\n\n\nDependancies\n============\n\n* `redis`_>=3.0.1\n* `django`_>= 2.2\n* `hiredis`_>=1.0.1 (if configured to use)\n* `python`_>=3.5.9\n* `redis-py-cluster`_>=2.0.0 (if configured to use)\n\n\n\nQuickStart\n==========\n\nInstallation and Basic Configuration\n------------------------------------\n\n1. Install Django Redis SDK by running ``pip install django-redis-sdk``.\n2. Make changes in you settings file to accommodate the cache settings.\n\n.. code:: python\n\n    # DjangoRedisSDKCache -> Master - slave connection\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis_sdk.DjangoRedisSDKCache',\n            'KEY_PREFIX': 'production',\n            'LOCATION': [\n                '[<scheme>://][:password@]<host>:<port>',  # Master\n                '[<scheme>://][:password@]<host>:<port>',  # slave 1\n                '[<scheme>://][:password@]<host>:<port>',  # slave 2\n                # ...\n            ],\n            'OPTIONS': {\n                'DB': 0,\n                'PASSWORD': 'passwd',\n                'CLIENT_CLASS': 'django_redis_sdk.clients.BaseClient',\n                'PARSER_CLASS': 'redis.connection.DefaultParser',\n                'CONNECTION_POOL_CLASS': 'redis.connection.ConnectionPool',\n                'CONNECTION_POOL_CLASS_KWARGS': {\n                    'max_connections': 14,\n                },\n                'SERIALIZER_CLASS': 'django_redis_sdk.serializers.PickleSerializer',\n                'PICKLE_VERSION': -1,\n                'SERIALIZER_CLASS_KWARGS': {\n                    'PICKLE_VERSION': -1,\n                },\n                'COMPRESSOR_CLASS': 'django_redis_sdk.compressors.DummyCompressor',\n                'COMPRESS_LEVEL': 5,\n                'COMPRESSOR_CLASS_KWARGS': {\n                    'COMPRESS_LEVEL': 5,\n                },\n                'REDIS_CLIENT_CLASS': 'redis.client.StrictRedis',\n                'REDIS_CLIENT_KWARGS': {},\n                'SOCKET_CONNECT_TIMEOUT': 5,  # in seconds; 5000 milliseconds,\n                'SOCKET_TIMEOUT': 1,  # in seconds; 1000 milliseconds,\n                'HANDLE_EXCEPTIONS': True,\n                'LOG_EXCEPTIONS': True,\n                'LOGGER_NAME': 'django_redis_sdk',\n            }\n        }\n    }\n\n    # DjangoRedisSDKShrededCache -> Shard\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis_sdk.DjangoRedisSDKShrededCache',\n            'KEY_PREFIX': 'production',\n            'LOCATION': [\n                '[<scheme>://][:password@]<host>:<port>[/db]',  # read-write 1\n                '[<scheme>://][:password@]<host>:<port>[/db]',  # read-write 2\n                '[<scheme>://][:password@]<host>:<port>[/db]',  # read-write 3\n                # ...\n            ],\n            'OPTIONS': {\n                'DB': 0,\n                'PASSWORD': 'passwd',\n                'CLIENT_CLASS': 'django_redis_sdk.clients.BaseClient',\n                'PARSER_CLASS': 'redis.connection.DefaultParser',\n                'CONNECTION_POOL_CLASS': 'redis.connection.ConnectionPool',\n                'CONNECTION_POOL_CLASS_KWARGS': {\n                    'max_connections': 14,\n                },\n                'SERIALIZER_CLASS': 'django_redis_sdk.serializers.PickleSerializer',\n                'PICKLE_VERSION': -1,\n                'SERIALIZER_CLASS_KWARGS': {\n                    'PICKLE_VERSION': -1,\n                },\n                'COMPRESSOR_CLASS': 'django_redis_sdk.compressors.DummyCompressor',\n                'COMPRESS_LEVEL': 5,\n                'COMPRESSOR_CLASS_KWARGS': {\n                    'COMPRESS_LEVEL': 5,\n                },\n                'REDIS_CLIENT_CLASS': 'redis.client.StrictRedis',\n                'REDIS_CLIENT_KWARGS': {},\n                'SOCKET_CONNECT_TIMEOUT': 5,  # in seconds; 5000 milliseconds,\n                'SOCKET_TIMEOUT': 1,  # in seconds; 1000 milliseconds,\n                'HANDLE_EXCEPTIONS': True,\n                'LOG_EXCEPTIONS': True,\n                'LOGGER_NAME': 'django_redis_sdk',\n            }\n        }\n    }\n\n    # Cluster -> cluster\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis_sdk.DjangoRedisSDKCache',\n            'KEY_PREFIX': 'production',\n            'LOCATION': [\n                '[<scheme>://]<host>:<port>[/db]',  # cluster 1\n                '[<scheme>://]<host>:<port>[/db]',  # cluster 2\n                '[<scheme>://]<host>:<port>[/db]',  # cluster 3\n                # ...\n            ],\n            'OPTIONS': {\n                'PARSER_CLASS': 'redis.connection.DefaultParser',\n                'CONNECTION_POOL_CLASS': 'rediscluster.connection.ClusterConnectionPool',\n                'CONNECTION_POOL_CLASS_KWARGS': {\n                    'max_connections': 14,\n                    'skip_full_coverage_check': True,  # some redis implementation has disabled the CONFIG\n                },\n                'SERIALIZER_CLASS': 'django_redis_sdk.serializers.PickleSerializer',\n                'PICKLE_VERSION': -1,\n                'SERIALIZER_CLASS_KWARGS': {\n                    'PICKLE_VERSION': -1,\n                },\n                'COMPRESSOR_CLASS': 'django_redis_sdk.compressors.DummyCompressor',\n                'COMPRESS_LEVEL': 5,\n                'COMPRESSOR_CLASS_KWARGS': {\n                    'COMPRESS_LEVEL': 5,\n                },\n                'REDIS_CLIENT_CLASS': 'rediscluster.RedisCluster',\n                'REDIS_CLIENT_KWARGS': {},\n                'SOCKET_CONNECT_TIMEOUT': 5,  # in seconds; 5000 milliseconds,\n                'SOCKET_TIMEOUT': 1,  # in seconds; 1000 milliseconds,\n                'HANDLE_EXCEPTIONS': True,\n                'LOG_EXCEPTIONS': True,\n                'LOGGER_NAME': 'django_redis_sdk',\n            }\n        }\n    }\n\n\n\nBasic Usage\n===========\n\nDjango Redis SDK has same backend apis as Django with some additions\n\nexample::\n\n    >>>from django.core.cache import cache\n    >>>cache.set('foo', 'bar', timeout=5)  # key = foo, value = 'bar' and valid for 5 seconds\n    >>>cache.ttl('foo')\n    5\n    >>>cache.get('foo')\n    bar\n    >>>cache.set_many({'foo':'boo', 'bar': 'baz'})\n    >>>cache.get_many(['foo', 'baz'])\n    OrderedDict([('foo', 'boo'), ('bar', 'baz')])\n    >>>cache.get_or_set('faz', 'baz', timeout=5)  # key = 'faz', dafault='baz' and valid for 5 seconds\n    baz  # since a key is not the value will be first set and then returned.\n    >>>import random\n    >>>cache.get_or_set('fazo', random.random, timeout=5)  # the default can take a callable also as input.\n    0.32685093104745067  # since the key is not set the random.random is called and the value is set and returned.\n\n\nBACKEND values\n--------------\n\n*  ``django_redis_sdk.DjangoRedisSDKCache``  # for single namespace\n*  ``django_redis_sdk.DjangoRedisSDKShrededCache``  # for sharded namespace\n\nLOCATION values\n---------------\n\n* String: comma seperated string for multiple server, single string value for single server.\n* List: single server in list for single server, multiple list value for multiple servers.\n* scheme:\n        ``host:port``  -> ``127.0.0.1:6379``  -> db defaults to DB option value or '0'.\n        ``host:port/db``  -> ``127.0.0.1:6379/1``  -> db is taken from url.\n        ``:password@host:port``  -> ``:myPasswd@127.0.0.1:6379/1``  -> password taken from url as opposed to None or value in options.\n        ``/path/to/the/unix/socket``  -> ``/etc/redis/connection.sock``  -> uses unix socket for communication\n        ``url_scheme://<combinations of above values>``\n\n        *  ``redis://:passwd@127.0.0.0:6379/1``\n        *  ``rediss://localhost:6379/1`` --> ssl connection\n        * ``unix://path/to/the/unix/socket`` --> unix socket connection\n\n        NOTE: if url_scheme is not specified, we try to best assume the url_scheme; however it is best to provide the scheme.\n\n\nOPTIONS\n-------\n\nDB\n---\n\n**Default**: ``0``\n\nThe URL specified db has precedence over this one.\nIf you with to see the cached values through redis-cli please select the db you assigned before querying by ``SELECT <db>``\n\n\nPASSWORD\n--------\n\n**Default**: ``None``\n\nThe URL specified password has precedence over this one.\nIdeally the REDIS server will be deployed inside a secure network with no access from outside; So, there wouldn't be a password set in that case.\nBut if you have password set, Please configure it here.\n\n\nCLIENT_CLASS\n------------\n\n**Default**: According to the BACKEND.\n\n*  ``django_redis_sdk.clients.BaseClient``  # used as default in ``DjangoRedisSDKCache`` backend\n*  ``django_redis_sdk.clients.ShardedClient``  # used as default in ``DjangoRedisSDKShrededCache`` backend\n\n\nPARSER_CLASS\n------------\n\n**Default**: ``redis.connection.DefaultParser``\n\n* ``redis.connection.PythonParser``\n* ``redis.connection.HiredisParser``  # requires hiredis ``pip install hiredis``\n* ``redis.connection.DefaultParser``  # automatically chooses between python or hiredis (if hiredis available then hiredis else python)\n\n\nCONNECTION_POOL_CLASS\n---------------------\n\n**Default**: ``redis.connection.ConnectionPool``\n\nApply kwargs if any through ``CONNECTION_POOL_CLASS_KWARGS`` options for this class.\n\n* ``redis.connection.ConnectionPool``  # takes additional kwargs ``max_connections``\n* ``redis.connection.BlockingConnectionPool``  # takes additional kwargs ``max_connections``, ``timeout``\n* ``rediscluster.connection.ClusterConnectionPool``  # requires redis-py-cluster ``pip install redis-py-cluster``\n\nSERIALIZER_CLASS\n----------------\n\n**Default**: ``django_redis_sdk.serializers.PickleSerializer``\n\nApply kwargs if any through ``SERIALIZER_CLASS_KWARGS`` options for this class.\n\n*  ``django_redis_sdk.serializers.PickleSerializer``  # python pickle, takes ``PICKLE_VERSION`` options; defaults to -1\n*  ``django_redis_sdk.serializers.DummySerializer``  # no serialization\n*  ``django_redis_sdk.serializers.JsonSerializer``  # json.loads and json.dumbs\n\n\nPICKLE_VERSION\n--------------\n\n**Default**: ``-1``  # for custom SERIALIZER_CLASS you should configure the default value.\n\nUsed along with ``SERIALIZER_CLASS=django_redis_sdk.serializers.PickleSerializer``; Otherwise no effect.\n\n\nCOMPRESSOR_CLASS\n----------------\n\n**Default**: ``django_redis_sdk.compressors.DummyCompressor``\n\nApply kwargs if any through ``COMPRESSOR_CLASS_KWARGS`` options for this class.\n\n*  ``django_redis_sdk.compressors.DummyCompressor``  # no compression\n*  ``django_redis_sdk.compressors.ZlibCompressor``  # requires zlib to compress and decompress, takes ``COMPRESS_LEVEL``\n\nCOMPRESS_LEVEL\n--------------\n\n**Default**: ``5``  # for custom COMPRESSOR_CLASS you should configure the default value.\n\n* Allowed values ``0`` to ``9``\n* ``0`` no compression.\n* ``9`` full compression.\n\n\nREDIS_CLIENT_CLASS\n------------------\n\n**Default**: ``redis.client.Redis``\n\nApply kwargs if any through ``REDIS_CLIENT_KWARGS`` option for this class.\n\n*  ``redis.client.Redis``\n*  ``redis.client.StrictRedis``  # in redis>=3.4.1 this is same as ``redis.client.Redis``\n*  ``rediscluster.RedisCluster``  # requires `redis-py-cluster`_ ; install using ``pip install redis-py-cluster``. For cluster support.\n\n\nSOCKET_CONNECT_TIMEOUT\n----------------------\n\n**Default**: ``None``  # means wait infinitely\n\nThe maximum allowed time to wait to make a connection.\n\n\nSOCKET_TIMEOUT\n--------------\n\n**Default**: ``None``  # means wait infinitely\n\nThe maximum allowed time to wait for an operation to wait (wait for response once after the connection is made).\n\n\nHANDLE_EXCEPTIONS\n-----------------\n\n**Default**: ``False``\n\nWhether to handle exceptions gracefully or propagate it?\nThe exceptions defined in ``django_redis_sdk.utils.EXCEPTIONS_TO_HANDLE`` are caught and handled gracefully\n\n\nLOG_EXCEPTIONS\n--------------\n\n**Default**: ``False``\n\nWhether to log the exceptions While handling the exceptions.\nUsed along with ``HANDLE_EXCEPTIONS``.\n\n\nLOGGER_NAME\n-----------\n\n**Default**: ``__name__``\n\nDefines which python logger to send the logs to while logging the exceptions.\nUsed along with LOG_EXCEPTIONS and HANDLE_EXCEPTIONS.\n\n.. _redis: http://github.com/antirez/redis/\n.. _hiredis: http://github.com/antirez/hiredis/\n.. _python: http://python.org\n.. _django: https://www.djangoproject.com/\n.. _redis-py-cluster: https://github.com/Grokzen/redis-py-cluster\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/midhuncnair/django_redis_sdk", "keywords": "django,redis,django-redis-sdk,redis-cache,cache,django-cache,django-redis-cache", "license": "MIT LICENSE", "maintainer": "", "maintainer_email": "", "name": "django-redis-sdk", "package_url": "https://pypi.org/project/django-redis-sdk/", "platform": "", "project_url": "https://pypi.org/project/django-redis-sdk/", "project_urls": {"Homepage": "https://github.com/midhuncnair/django_redis_sdk"}, "release_url": "https://pypi.org/project/django-redis-sdk/1.0.0.0/", "requires_dist": ["docutils (>=0.3)", "redis (>=3.0.1)", "django (>=2.2)"], "requires_python": ">=3.5.9", "summary": "Django Redis sdk", "version": "1.0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-redis-sdk\">\n<h2>Django Redis SDK</h2>\n<div id=\"id1\">\n<h3>1.0.0.0</h3>\n<ul>\n<li>General Bug Fixes</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.1.0</h3>\n<ul>\n<li>General Bug Fixes</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0.0</h3>\n<p>Django Redis SDK: A SDK for connecting to Redis server from Django.</p>\n<ul>\n<li>Supports both TCP socket connection and Unix socket connection</li>\n<li>Plug and play architecture.</li>\n<li>Everything is configurable.</li>\n<li>Supports base client connection in master/slave configuration (Out of box with <tt>DjangoRedisSDKCache</tt> backend class).</li>\n<li>Supports sharded client connection configuration (Out of box with <tt>DjangoRedisSDKShrededCache</tt> backend class).</li>\n<li>You have Dummy Cache backend for just testing or monkey patching (Achieved using <tt>DjangoRedisSDKDummyCache</tt> backend class).</li>\n<li>A wrapper around redis package.</li>\n<li>Pluggable CLIENT, REDIS_CLIENT, PARSER, COMPRESSOR, SERIALIZER,</li>\n<li>Out of the box support for Master-Slave and Shard client.</li>\n<li>supports all default apis.</li>\n<li>supports redis cluster; <strong>requires</strong> redis-py-cluster</li>\n</ul>\n</div>\n</div>\n<div id=\"dependancies\">\n<h2>Dependancies</h2>\n<ul>\n<li><a href=\"http://github.com/antirez/redis/\" rel=\"nofollow\">redis</a>&gt;=3.0.1</li>\n<li><a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">django</a>&gt;= 2.2</li>\n<li><a href=\"http://github.com/antirez/hiredis/\" rel=\"nofollow\">hiredis</a>&gt;=1.0.1 (if configured to use)</li>\n<li><a href=\"http://python.org\" rel=\"nofollow\">python</a>&gt;=3.5.9</li>\n<li><a href=\"https://github.com/Grokzen/redis-py-cluster\" rel=\"nofollow\">redis-py-cluster</a>&gt;=2.0.0 (if configured to use)</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>QuickStart</h2>\n<h2 id=\"installation-and-basic-configuration\"><span class=\"section-subtitle\">Installation and Basic Configuration</span></h2>\n<ol>\n<li>Install Django Redis SDK by running <tt>pip install <span class=\"pre\">django-redis-sdk</span></tt>.</li>\n<li>Make changes in you settings file to accommodate the cache settings.</li>\n</ol>\n<pre><span class=\"c1\"># DjangoRedisSDKCache -&gt; Master - slave connection</span>\n<span class=\"n\">CACHES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.DjangoRedisSDKCache'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'KEY_PREFIX'</span><span class=\"p\">:</span> <span class=\"s1\">'production'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'LOCATION'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://][:password@]&lt;host&gt;:&lt;port&gt;'</span><span class=\"p\">,</span>  <span class=\"c1\"># Master</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://][:password@]&lt;host&gt;:&lt;port&gt;'</span><span class=\"p\">,</span>  <span class=\"c1\"># slave 1</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://][:password@]&lt;host&gt;:&lt;port&gt;'</span><span class=\"p\">,</span>  <span class=\"c1\"># slave 2</span>\n            <span class=\"c1\"># ...</span>\n        <span class=\"p\">],</span>\n        <span class=\"s1\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'DB'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'passwd'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'CLIENT_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.clients.BaseClient'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'PARSER_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'redis.connection.DefaultParser'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'CONNECTION_POOL_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'redis.connection.ConnectionPool'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'CONNECTION_POOL_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'max_connections'</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'SERIALIZER_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.serializers.PickleSerializer'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'PICKLE_VERSION'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s1\">'SERIALIZER_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'PICKLE_VERSION'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'COMPRESSOR_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.compressors.DummyCompressor'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'COMPRESS_LEVEL'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"s1\">'COMPRESSOR_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'COMPRESS_LEVEL'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'REDIS_CLIENT_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'redis.client.StrictRedis'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'REDIS_CLIENT_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n            <span class=\"s1\">'SOCKET_CONNECT_TIMEOUT'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"c1\"># in seconds; 5000 milliseconds,</span>\n            <span class=\"s1\">'SOCKET_TIMEOUT'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"c1\"># in seconds; 1000 milliseconds,</span>\n            <span class=\"s1\">'HANDLE_EXCEPTIONS'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">'LOG_EXCEPTIONS'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">'LOGGER_NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># DjangoRedisSDKShrededCache -&gt; Shard</span>\n<span class=\"n\">CACHES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.DjangoRedisSDKShrededCache'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'KEY_PREFIX'</span><span class=\"p\">:</span> <span class=\"s1\">'production'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'LOCATION'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://][:password@]&lt;host&gt;:&lt;port&gt;[/db]'</span><span class=\"p\">,</span>  <span class=\"c1\"># read-write 1</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://][:password@]&lt;host&gt;:&lt;port&gt;[/db]'</span><span class=\"p\">,</span>  <span class=\"c1\"># read-write 2</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://][:password@]&lt;host&gt;:&lt;port&gt;[/db]'</span><span class=\"p\">,</span>  <span class=\"c1\"># read-write 3</span>\n            <span class=\"c1\"># ...</span>\n        <span class=\"p\">],</span>\n        <span class=\"s1\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'DB'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s1\">'PASSWORD'</span><span class=\"p\">:</span> <span class=\"s1\">'passwd'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'CLIENT_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.clients.BaseClient'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'PARSER_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'redis.connection.DefaultParser'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'CONNECTION_POOL_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'redis.connection.ConnectionPool'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'CONNECTION_POOL_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'max_connections'</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'SERIALIZER_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.serializers.PickleSerializer'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'PICKLE_VERSION'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s1\">'SERIALIZER_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'PICKLE_VERSION'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'COMPRESSOR_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.compressors.DummyCompressor'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'COMPRESS_LEVEL'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"s1\">'COMPRESSOR_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'COMPRESS_LEVEL'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'REDIS_CLIENT_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'redis.client.StrictRedis'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'REDIS_CLIENT_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n            <span class=\"s1\">'SOCKET_CONNECT_TIMEOUT'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"c1\"># in seconds; 5000 milliseconds,</span>\n            <span class=\"s1\">'SOCKET_TIMEOUT'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"c1\"># in seconds; 1000 milliseconds,</span>\n            <span class=\"s1\">'HANDLE_EXCEPTIONS'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">'LOG_EXCEPTIONS'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">'LOGGER_NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Cluster -&gt; cluster</span>\n<span class=\"n\">CACHES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.DjangoRedisSDKCache'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'KEY_PREFIX'</span><span class=\"p\">:</span> <span class=\"s1\">'production'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'LOCATION'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://]&lt;host&gt;:&lt;port&gt;[/db]'</span><span class=\"p\">,</span>  <span class=\"c1\"># cluster 1</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://]&lt;host&gt;:&lt;port&gt;[/db]'</span><span class=\"p\">,</span>  <span class=\"c1\"># cluster 2</span>\n            <span class=\"s1\">'[&lt;scheme&gt;://]&lt;host&gt;:&lt;port&gt;[/db]'</span><span class=\"p\">,</span>  <span class=\"c1\"># cluster 3</span>\n            <span class=\"c1\"># ...</span>\n        <span class=\"p\">],</span>\n        <span class=\"s1\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'PARSER_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'redis.connection.DefaultParser'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'CONNECTION_POOL_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'rediscluster.connection.ClusterConnectionPool'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'CONNECTION_POOL_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'max_connections'</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span>\n                <span class=\"s1\">'skip_full_coverage_check'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># some redis implementation has disabled the CONFIG</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'SERIALIZER_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.serializers.PickleSerializer'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'PICKLE_VERSION'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s1\">'SERIALIZER_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'PICKLE_VERSION'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'COMPRESSOR_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk.compressors.DummyCompressor'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'COMPRESS_LEVEL'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"s1\">'COMPRESSOR_CLASS_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'COMPRESS_LEVEL'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s1\">'REDIS_CLIENT_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'rediscluster.RedisCluster'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'REDIS_CLIENT_KWARGS'</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n            <span class=\"s1\">'SOCKET_CONNECT_TIMEOUT'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"c1\"># in seconds; 5000 milliseconds,</span>\n            <span class=\"s1\">'SOCKET_TIMEOUT'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"c1\"># in seconds; 1000 milliseconds,</span>\n            <span class=\"s1\">'HANDLE_EXCEPTIONS'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">'LOG_EXCEPTIONS'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s1\">'LOGGER_NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'django_redis_sdk'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p>Django Redis SDK has same backend apis as Django with some additions</p>\n<p>example:</p>\n<pre>&gt;&gt;&gt;from django.core.cache import cache\n&gt;&gt;&gt;cache.set('foo', 'bar', timeout=5)  # key = foo, value = 'bar' and valid for 5 seconds\n&gt;&gt;&gt;cache.ttl('foo')\n5\n&gt;&gt;&gt;cache.get('foo')\nbar\n&gt;&gt;&gt;cache.set_many({'foo':'boo', 'bar': 'baz'})\n&gt;&gt;&gt;cache.get_many(['foo', 'baz'])\nOrderedDict([('foo', 'boo'), ('bar', 'baz')])\n&gt;&gt;&gt;cache.get_or_set('faz', 'baz', timeout=5)  # key = 'faz', dafault='baz' and valid for 5 seconds\nbaz  # since a key is not the value will be first set and then returned.\n&gt;&gt;&gt;import random\n&gt;&gt;&gt;cache.get_or_set('fazo', random.random, timeout=5)  # the default can take a callable also as input.\n0.32685093104745067  # since the key is not set the random.random is called and the value is set and returned.\n</pre>\n<div id=\"backend-values\">\n<h3>BACKEND values</h3>\n<ul>\n<li><tt>django_redis_sdk.DjangoRedisSDKCache</tt>  # for single namespace</li>\n<li><tt>django_redis_sdk.DjangoRedisSDKShrededCache</tt>  # for sharded namespace</li>\n</ul>\n</div>\n<div id=\"location-values\">\n<h3>LOCATION values</h3>\n<ul>\n<li><p>String: comma seperated string for multiple server, single string value for single server.</p>\n</li>\n<li><p>List: single server in list for single server, multiple list value for multiple servers.</p>\n</li>\n<li><dl>\n<dt>scheme:</dt>\n<dd><p><tt>host:port</tt>  -&gt; <tt>127.0.0.1:6379</tt>  -&gt; db defaults to DB option value or \u20180\u2019.\n<tt>host:port/db</tt>  -&gt; <tt>127.0.0.1:6379/1</tt>  -&gt; db is taken from url.\n<tt>:password@host:port</tt>  -&gt; <tt>:myPasswd@127.0.0.1:6379/1</tt>  -&gt; password taken from url as opposed to None or value in options.\n<tt>/path/to/the/unix/socket</tt>  -&gt; <tt>/etc/redis/connection.sock</tt>  -&gt; uses unix socket for communication\n<tt><span class=\"pre\">url_scheme://&lt;combinations</span> of above values&gt;</tt></p>\n<ul>\n<li><tt><span class=\"pre\">redis://:passwd@127.0.0.0:6379/1</span></tt></li>\n<li><tt><span class=\"pre\">rediss://localhost:6379/1</span></tt> \u2013&gt; ssl connection</li>\n<li><tt><span class=\"pre\">unix://path/to/the/unix/socket</span></tt> \u2013&gt; unix socket connection</li>\n</ul>\n<p>NOTE: if url_scheme is not specified, we try to best assume the url_scheme; however it is best to provide the scheme.</p>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"options\">\n<h3>OPTIONS</h3>\n</div>\n<div id=\"db\">\n<h3>DB</h3>\n<p><strong>Default</strong>: <tt>0</tt></p>\n<p>The URL specified db has precedence over this one.\nIf you with to see the cached values through redis-cli please select the db you assigned before querying by <tt>SELECT &lt;db&gt;</tt></p>\n</div>\n<div id=\"password\">\n<h3>PASSWORD</h3>\n<p><strong>Default</strong>: <tt>None</tt></p>\n<p>The URL specified password has precedence over this one.\nIdeally the REDIS server will be deployed inside a secure network with no access from outside; So, there wouldn\u2019t be a password set in that case.\nBut if you have password set, Please configure it here.</p>\n</div>\n<div id=\"client-class\">\n<h3>CLIENT_CLASS</h3>\n<p><strong>Default</strong>: According to the BACKEND.</p>\n<ul>\n<li><tt>django_redis_sdk.clients.BaseClient</tt>  # used as default in <tt>DjangoRedisSDKCache</tt> backend</li>\n<li><tt>django_redis_sdk.clients.ShardedClient</tt>  # used as default in <tt>DjangoRedisSDKShrededCache</tt> backend</li>\n</ul>\n</div>\n<div id=\"parser-class\">\n<h3>PARSER_CLASS</h3>\n<p><strong>Default</strong>: <tt>redis.connection.DefaultParser</tt></p>\n<ul>\n<li><tt>redis.connection.PythonParser</tt></li>\n<li><tt>redis.connection.HiredisParser</tt>  # requires hiredis <tt>pip install hiredis</tt></li>\n<li><tt>redis.connection.DefaultParser</tt>  # automatically chooses between python or hiredis (if hiredis available then hiredis else python)</li>\n</ul>\n</div>\n<div id=\"connection-pool-class\">\n<h3>CONNECTION_POOL_CLASS</h3>\n<p><strong>Default</strong>: <tt>redis.connection.ConnectionPool</tt></p>\n<p>Apply kwargs if any through <tt>CONNECTION_POOL_CLASS_KWARGS</tt> options for this class.</p>\n<ul>\n<li><tt>redis.connection.ConnectionPool</tt>  # takes additional kwargs <tt>max_connections</tt></li>\n<li><tt>redis.connection.BlockingConnectionPool</tt>  # takes additional kwargs <tt>max_connections</tt>, <tt>timeout</tt></li>\n<li><tt>rediscluster.connection.ClusterConnectionPool</tt>  # requires redis-py-cluster <tt>pip install <span class=\"pre\">redis-py-cluster</span></tt></li>\n</ul>\n</div>\n<div id=\"serializer-class\">\n<h3>SERIALIZER_CLASS</h3>\n<p><strong>Default</strong>: <tt>django_redis_sdk.serializers.PickleSerializer</tt></p>\n<p>Apply kwargs if any through <tt>SERIALIZER_CLASS_KWARGS</tt> options for this class.</p>\n<ul>\n<li><tt>django_redis_sdk.serializers.PickleSerializer</tt>  # python pickle, takes <tt>PICKLE_VERSION</tt> options; defaults to -1</li>\n<li><tt>django_redis_sdk.serializers.DummySerializer</tt>  # no serialization</li>\n<li><tt>django_redis_sdk.serializers.JsonSerializer</tt>  # json.loads and json.dumbs</li>\n</ul>\n</div>\n<div id=\"pickle-version\">\n<h3>PICKLE_VERSION</h3>\n<p><strong>Default</strong>: <tt><span class=\"pre\">-1</span></tt>  # for custom SERIALIZER_CLASS you should configure the default value.</p>\n<p>Used along with <tt>SERIALIZER_CLASS=django_redis_sdk.serializers.PickleSerializer</tt>; Otherwise no effect.</p>\n</div>\n<div id=\"compressor-class\">\n<h3>COMPRESSOR_CLASS</h3>\n<p><strong>Default</strong>: <tt>django_redis_sdk.compressors.DummyCompressor</tt></p>\n<p>Apply kwargs if any through <tt>COMPRESSOR_CLASS_KWARGS</tt> options for this class.</p>\n<ul>\n<li><tt>django_redis_sdk.compressors.DummyCompressor</tt>  # no compression</li>\n<li><tt>django_redis_sdk.compressors.ZlibCompressor</tt>  # requires zlib to compress and decompress, takes <tt>COMPRESS_LEVEL</tt></li>\n</ul>\n</div>\n<div id=\"compress-level\">\n<h3>COMPRESS_LEVEL</h3>\n<p><strong>Default</strong>: <tt>5</tt>  # for custom COMPRESSOR_CLASS you should configure the default value.</p>\n<ul>\n<li>Allowed values <tt>0</tt> to <tt>9</tt></li>\n<li><tt>0</tt> no compression.</li>\n<li><tt>9</tt> full compression.</li>\n</ul>\n</div>\n<div id=\"redis-client-class\">\n<h3>REDIS_CLIENT_CLASS</h3>\n<p><strong>Default</strong>: <tt>redis.client.Redis</tt></p>\n<p>Apply kwargs if any through <tt>REDIS_CLIENT_KWARGS</tt> option for this class.</p>\n<ul>\n<li><tt>redis.client.Redis</tt></li>\n<li><tt>redis.client.StrictRedis</tt>  # in redis&gt;=3.4.1 this is same as <tt>redis.client.Redis</tt></li>\n<li><tt>rediscluster.RedisCluster</tt>  # requires <a href=\"https://github.com/Grokzen/redis-py-cluster\" rel=\"nofollow\">redis-py-cluster</a> ; install using <tt>pip install <span class=\"pre\">redis-py-cluster</span></tt>. For cluster support.</li>\n</ul>\n</div>\n<div id=\"socket-connect-timeout\">\n<h3>SOCKET_CONNECT_TIMEOUT</h3>\n<p><strong>Default</strong>: <tt>None</tt>  # means wait infinitely</p>\n<p>The maximum allowed time to wait to make a connection.</p>\n</div>\n<div id=\"socket-timeout\">\n<h3>SOCKET_TIMEOUT</h3>\n<p><strong>Default</strong>: <tt>None</tt>  # means wait infinitely</p>\n<p>The maximum allowed time to wait for an operation to wait (wait for response once after the connection is made).</p>\n</div>\n<div id=\"handle-exceptions\">\n<h3>HANDLE_EXCEPTIONS</h3>\n<p><strong>Default</strong>: <tt>False</tt></p>\n<p>Whether to handle exceptions gracefully or propagate it?\nThe exceptions defined in <tt>django_redis_sdk.utils.EXCEPTIONS_TO_HANDLE</tt> are caught and handled gracefully</p>\n</div>\n<div id=\"log-exceptions\">\n<h3>LOG_EXCEPTIONS</h3>\n<p><strong>Default</strong>: <tt>False</tt></p>\n<p>Whether to log the exceptions While handling the exceptions.\nUsed along with <tt>HANDLE_EXCEPTIONS</tt>.</p>\n</div>\n<div id=\"logger-name\">\n<h3>LOGGER_NAME</h3>\n<p><strong>Default</strong>: <tt>__name__</tt></p>\n<p>Defines which python logger to send the logs to while logging the exceptions.\nUsed along with LOG_EXCEPTIONS and HANDLE_EXCEPTIONS.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6991909, "releases": {"0.1.0.0": [{"comment_text": "", "digests": {"md5": "6ab09f49fb45e2e7bdd4a4844746acf5", "sha256": "a6bdbd4b0ffb5877cc6cc0edca3f28afa17e630bd3e6ea1e15e97a683c3fcf26"}, "downloads": -1, "filename": "django_redis_sdk-0.1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6ab09f49fb45e2e7bdd4a4844746acf5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.9", "size": 25690, "upload_time": "2020-03-13T15:28:58", "upload_time_iso_8601": "2020-03-13T15:28:58.138031Z", "url": "https://files.pythonhosted.org/packages/7f/4c/01501b02c9a812af57bd45759abff866c964ab1c63315cbd0b94722a9435/django_redis_sdk-0.1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91c21cd4260d50212f9bc6e85340e544", "sha256": "9541f0875751d6f6bf8eef3371dd1b1e393de07b7d926c491c82902b0b1e005d"}, "downloads": -1, "filename": "django-redis-sdk-0.1.0.0.tar.gz", "has_sig": false, "md5_digest": "91c21cd4260d50212f9bc6e85340e544", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.9", "size": 15999, "upload_time": "2020-03-13T15:29:00", "upload_time_iso_8601": "2020-03-13T15:29:00.588741Z", "url": "https://files.pythonhosted.org/packages/60/ae/e73d64240a06a7221a6c80b8ab58c9815e01e8325b8f148740c492679d1f/django-redis-sdk-0.1.0.0.tar.gz", "yanked": false}], "0.1.1.0": [{"comment_text": "", "digests": {"md5": "bcaf39149a9a03c026d0bac877ade349", "sha256": "4779dab093afaddb8f33e5041405d23f67ad1cfafcf484b1871ab2281d9eb65f"}, "downloads": -1, "filename": "django_redis_sdk-0.1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bcaf39149a9a03c026d0bac877ade349", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.9", "size": 25710, "upload_time": "2020-03-13T17:11:04", "upload_time_iso_8601": "2020-03-13T17:11:04.655718Z", "url": "https://files.pythonhosted.org/packages/3a/ac/aa8971a3dc289199beb918c32102ac1a0dde46d374dd429e30968b11993b/django_redis_sdk-0.1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ab4fd307ca855551c034e4bdbe363ea", "sha256": "35cd309e0d1b98e4a0a67b0a3336e298a723e633e75fd71f8849d69cb094f7ec"}, "downloads": -1, "filename": "django-redis-sdk-0.1.1.0.tar.gz", "has_sig": false, "md5_digest": "8ab4fd307ca855551c034e4bdbe363ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.9", "size": 16038, "upload_time": "2020-03-13T17:11:08", "upload_time_iso_8601": "2020-03-13T17:11:08.387231Z", "url": "https://files.pythonhosted.org/packages/10/b5/d5ec059367bc255149934704432cb2f14a26f4011ba381549c155aa5d5b5/django-redis-sdk-0.1.1.0.tar.gz", "yanked": false}], "1.0.0.0": [{"comment_text": "", "digests": {"md5": "bd8f2fdeb7db4cb101d939580a93861f", "sha256": "ade6acf39bc29048d796bca3517907a569359a2d5cf26a3b3e23b10b310d8cc9"}, "downloads": -1, "filename": "django_redis_sdk-1.0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bd8f2fdeb7db4cb101d939580a93861f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.9", "size": 25688, "upload_time": "2020-04-10T09:05:29", "upload_time_iso_8601": "2020-04-10T09:05:29.273921Z", "url": "https://files.pythonhosted.org/packages/2b/31/a72e9ec278464b45052a8d305c1b7717e6e02c6015b862ccba33f50b8e17/django_redis_sdk-1.0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4526cd04a3c36a3070ee331af4a5ff96", "sha256": "710bf1cbad54d8329189e9b58ac55b5e1e301cbea64f917b48f86428092e66b5"}, "downloads": -1, "filename": "django-redis-sdk-1.0.0.0.tar.gz", "has_sig": false, "md5_digest": "4526cd04a3c36a3070ee331af4a5ff96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.9", "size": 15934, "upload_time": "2020-04-10T09:05:30", "upload_time_iso_8601": "2020-04-10T09:05:30.525665Z", "url": "https://files.pythonhosted.org/packages/f9/e6/d0e40ae83ae0252d775806a2a630033432b5d8d96f0c6a531f366bb97e52/django-redis-sdk-1.0.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bd8f2fdeb7db4cb101d939580a93861f", "sha256": "ade6acf39bc29048d796bca3517907a569359a2d5cf26a3b3e23b10b310d8cc9"}, "downloads": -1, "filename": "django_redis_sdk-1.0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bd8f2fdeb7db4cb101d939580a93861f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.9", "size": 25688, "upload_time": "2020-04-10T09:05:29", "upload_time_iso_8601": "2020-04-10T09:05:29.273921Z", "url": "https://files.pythonhosted.org/packages/2b/31/a72e9ec278464b45052a8d305c1b7717e6e02c6015b862ccba33f50b8e17/django_redis_sdk-1.0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4526cd04a3c36a3070ee331af4a5ff96", "sha256": "710bf1cbad54d8329189e9b58ac55b5e1e301cbea64f917b48f86428092e66b5"}, "downloads": -1, "filename": "django-redis-sdk-1.0.0.0.tar.gz", "has_sig": false, "md5_digest": "4526cd04a3c36a3070ee331af4a5ff96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.9", "size": 15934, "upload_time": "2020-04-10T09:05:30", "upload_time_iso_8601": "2020-04-10T09:05:30.525665Z", "url": "https://files.pythonhosted.org/packages/f9/e6/d0e40ae83ae0252d775806a2a630033432b5d8d96f0c6a531f366bb97e52/django-redis-sdk-1.0.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:21 2020"}