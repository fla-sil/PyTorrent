{"info": {"author": "Rocky Burt", "author_email": "rocky@serverzen.com", "bugtrack_url": null, "classifiers": [], "description": "Introduction\n============\n\n*khufu_javascript* provides various ways for including Javascript into\nyour Khufu/Pyramid app.\n\nDojo Support\n============\n\n``khufu_javascript.dojo`` provides support for working with Dojo.\n\nUsage\n-----\n\nSetting up khufu_javascript.dojo is easy.\n::\n\n    # config must be an instance of pyramid.config.Configurator\n    config.include('khufu_javascript.dojo')\n    config.register_script_dir('myproject:javascripts')\n\nThe previous example will iterate over all *.js files in the ``javascripts``\ndirectory relative to the ``myproject`` package (``register_script_dir`` takes\nan asset spec).  For each .js file found it scans for a \"dojo.provides('foo')\"\nentry and registers that module with khufu_javascript.\n\nAfter having registered scripts, they can be accessed via the ``dojo`` view\nat the root of the site.  If one of the javascripts found has\n\"dojo.provides('foo.bar')\" then the dojo view will provide::\n\n    http://127.0.0.1:8080/dojo/foo/bar.js\n\nAnyone working with Dojo modules knows that there still needs to a way\nto tell Dojo to look at */dojo/whatever* when looking up non-core modules.\nDojo handles this with *djConfig* which can be used to setup module load\npaths.\n\nAfter having registered scripts, inside of your views you can simply call\n``khufu_javascript.dojo.render_header``.\n::\n\n    # views.py\n    from khufu_javascript.dojo import render_header\n\n    @view_config('myview', renderer='templates/foo.jinja2',\n                 context=Root)\n    def myview(request):\n        dojo_header = render_header(request)\n        return {'dojo_header': dojo_header}\n\n    <!-- templates/foo.jinja2 -->\n    <html>\n      <head>\n        {{ dojo_header|safe }}\n      </head>\n      <body>\n        yes sir!\n      </body>\n    </html>\n\nThe ``render_header`` method will generate the appropriate *<link>*, *<style>*,\nand *<script>* elements for loading Dojo.  It will also generate\nthe appropriate *djConfig* object that configures the module loading path\nto work with our /dojo view.\n\n\nChanges\n=======\n\n0.1 (Jul-10-2011)\n-----------------\n\n  * first release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "khufu pyramid pylons", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "khufu_javascript", "package_url": "https://pypi.org/project/khufu_javascript/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/khufu_javascript/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/khufu_javascript/0.1/", "requires_dist": null, "requires_python": null, "summary": "Khufu/Pyramid component for managing javascript resources", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Introduction<br>============<br><br>*khufu_javascript* provides various ways for including Javascript into<br>your Khufu/Pyramid app.<br><br>Dojo Support<br>============<br><br>``khufu_javascript.dojo`` provides support for working with Dojo.<br><br>Usage<br>-----<br><br>Setting up khufu_javascript.dojo is easy.<br>::<br><br>    # config must be an instance of pyramid.config.Configurator<br>    config.include('khufu_javascript.dojo')<br>    config.register_script_dir('myproject:javascripts')<br><br>The previous example will iterate over all *.js files in the ``javascripts``<br>directory relative to the ``myproject`` package (``register_script_dir`` takes<br>an asset spec).  For each .js file found it scans for a \"dojo.provides('foo')\"<br>entry and registers that module with khufu_javascript.<br><br>After having registered scripts, they can be accessed via the ``dojo`` view<br>at the root of the site.  If one of the javascripts found has<br>\"dojo.provides('foo.bar')\" then the dojo view will provide::<br><br>    http://127.0.0.1:8080/dojo/foo/bar.js<br><br>Anyone working with Dojo modules knows that there still needs to a way<br>to tell Dojo to look at */dojo/whatever* when looking up non-core modules.<br>Dojo handles this with *djConfig* which can be used to setup module load<br>paths.<br><br>After having registered scripts, inside of your views you can simply call<br>``khufu_javascript.dojo.render_header``.<br>::<br><br>    # views.py<br>    from khufu_javascript.dojo import render_header<br><br>    @view_config('myview', renderer='templates/foo.jinja2',<br>                 context=Root)<br>    def myview(request):<br>        dojo_header = render_header(request)<br>        return {'dojo_header': dojo_header}<br><br>    &lt;!-- templates/foo.jinja2 --&gt;<br>    &lt;html&gt;<br>      &lt;head&gt;<br>        {{ dojo_header|safe }}<br>      &lt;/head&gt;<br>      &lt;body&gt;<br>        yes sir!<br>      &lt;/body&gt;<br>    &lt;/html&gt;<br><br>The ``render_header`` method will generate the appropriate *&lt;link&gt;*, *&lt;style&gt;*,<br>and *&lt;script&gt;* elements for loading Dojo.  It will also generate<br>the appropriate *djConfig* object that configures the module loading path<br>to work with our /dojo view.<br><br><br>Changes<br>=======<br><br>0.1 (Jul-10-2011)<br>-----------------<br><br>  * first release\n          </div>"}, "last_serial": 793935, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c85b328bddca3c38fe13440b4969e5fb", "sha256": "1bc7956c6f269ef7e1f37708d46f38fccf564319cf234ca1e8687345841b74e1"}, "downloads": -1, "filename": "khufu_javascript-0.1.tar.gz", "has_sig": false, "md5_digest": "c85b328bddca3c38fe13440b4969e5fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6240, "upload_time": "2011-07-10T18:33:40", "upload_time_iso_8601": "2011-07-10T18:33:40.630162Z", "url": "https://files.pythonhosted.org/packages/30/30/5efe607f9877ac90495d2f9966c9ae226fff9f3a98b8c588f16cfe9b7874/khufu_javascript-0.1.tar.gz", "yanked": false}], "1.0a1": [{"comment_text": "", "digests": {"md5": "8f441784c9efe3467c3ff6b702e1eb64", "sha256": "c2f6ef4c0f9e643362b67616096ee2f17929d94c77702f720f28cdcbc8297a89"}, "downloads": -1, "filename": "khufu_javascript-1.0a1.tar.gz", "has_sig": false, "md5_digest": "8f441784c9efe3467c3ff6b702e1eb64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8902, "upload_time": "2011-11-17T14:56:24", "upload_time_iso_8601": "2011-11-17T14:56:24.038329Z", "url": "https://files.pythonhosted.org/packages/37/42/a8aececac472d6504ddb02b2f9ea9196f71ea1ed2cb0202dcd3c0065ea7b/khufu_javascript-1.0a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c85b328bddca3c38fe13440b4969e5fb", "sha256": "1bc7956c6f269ef7e1f37708d46f38fccf564319cf234ca1e8687345841b74e1"}, "downloads": -1, "filename": "khufu_javascript-0.1.tar.gz", "has_sig": false, "md5_digest": "c85b328bddca3c38fe13440b4969e5fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6240, "upload_time": "2011-07-10T18:33:40", "upload_time_iso_8601": "2011-07-10T18:33:40.630162Z", "url": "https://files.pythonhosted.org/packages/30/30/5efe607f9877ac90495d2f9966c9ae226fff9f3a98b8c588f16cfe9b7874/khufu_javascript-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:50 2020"}