{"info": {"author": "Mihai Bivol", "author_email": "mm.bivol@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Graphite-Anomaly-Detector\n=========================\n\nCommand line application that determines spikes in Graphite metrics for a given host and generates a CSV report\n\nUsage\n-----\n<pre>\nusage: generate_report.py [-h] -s SERVERS [SERVERS ...] -o OUTPUT [-l LIMIT]\n                          [-p PATTERN] [-t TIMEOUT]\n\nGenerates CSV report with spikes found on Graphite hosts\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SERVERS [SERVERS ...], --servers SERVERS [SERVERS ...]\n                        Servers queried by program (default: None)\n  -o OUTPUT, --output OUTPUT\n                        Output CSV file (default: [None])\n  -l LIMIT, --limit LIMIT\n                        Limit request count per host (default: [500])\n  -p PATTERN, --pattern PATTERN\n                        Glob pattern for metrics (default: ['*'])\n  -t TIMEOUT, --timeout TIMEOUT\n                        Timeout bethween requests for host (default: [1])\n</pre>\n\nFor example\n<pre>\n./generate_report.py -s dumdum:81 -o report.csv -l 2 -p *.cpu.* -t 42\n</pre>\n\nWill gather the first two metrics that match \\*.cpu.\\* with 42 seconds timeout bethween the requests.\nThe command will ouptut the results in report.csv\n\nResult\n------\n\nThe program creates a csv file ginven as argument for the --output option having 5 columns:\n\n| HOST    | METRIC     | TIME        | RELEVANCE | GRAPH_URL                               |\n|---------|------------|-------------|-----------|-----------------------------------------|\n| host:81 | cpu.0.wait | 4 Jul 2013  | .42       | http://host:81/render/?target=cpu.0.wait|\n\nDeveloping Detectors\n--------------------\nAll detectors should extend the Detector class and implement the detect_anomalies method.\n\nTo change the detector in the program, just change the DETECTOR=SpikeDetector() line with an instance\nof your detector.\n\nTesting Detectors\n-----------------\n\nFor testing you can use test_local.py.\n\nIt requires matplotlib for plotting the results.\n\ntest_local.py receives a Graphite json response for a given target and plots the following:\n * Original timeseries\n * Timeseries after running the detector\n * Detector results\n * A treshold line (you can remove it while testing)\n\nYou just have to replace SpikeDetector with your detector.\n\nFor testing large data, you can use the util.logger ```create_logfile``` function.\nIt creates a json file that can be viewed using view_log.py script that plots a graph\nsimmilar to the one yielded by test_local.py.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/mihaibivol/Graphite-Anomaly-Detector/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mihaibivol/Graphite-Anomaly-Detector/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "graphite_anomaly_detector", "package_url": "https://pypi.org/project/graphite_anomaly_detector/", "platform": "any", "project_url": "https://pypi.org/project/graphite_anomaly_detector/", "project_urls": {"Download": "https://github.com/mihaibivol/Graphite-Anomaly-Detector/", "Homepage": "https://github.com/mihaibivol/Graphite-Anomaly-Detector/"}, "release_url": "https://pypi.org/project/graphite_anomaly_detector/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Tool for detecting spikes in Graphite timeseries", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Graphite-Anomaly-Detector<br>=========================<br><br>Command line application that determines spikes in Graphite metrics for a given host and generates a CSV report<br><br>Usage<br>-----<br>&lt;pre&gt;<br>usage: generate_report.py [-h] -s SERVERS [SERVERS ...] -o OUTPUT [-l LIMIT]<br>                          [-p PATTERN] [-t TIMEOUT]<br><br>Generates CSV report with spikes found on Graphite hosts<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  -s SERVERS [SERVERS ...], --servers SERVERS [SERVERS ...]<br>                        Servers queried by program (default: None)<br>  -o OUTPUT, --output OUTPUT<br>                        Output CSV file (default: [None])<br>  -l LIMIT, --limit LIMIT<br>                        Limit request count per host (default: [500])<br>  -p PATTERN, --pattern PATTERN<br>                        Glob pattern for metrics (default: ['*'])<br>  -t TIMEOUT, --timeout TIMEOUT<br>                        Timeout bethween requests for host (default: [1])<br>&lt;/pre&gt;<br><br>For example<br>&lt;pre&gt;<br>./generate_report.py -s dumdum:81 -o report.csv -l 2 -p *.cpu.* -t 42<br>&lt;/pre&gt;<br><br>Will gather the first two metrics that match \\*.cpu.\\* with 42 seconds timeout bethween the requests.<br>The command will ouptut the results in report.csv<br><br>Result<br>------<br><br>The program creates a csv file ginven as argument for the --output option having 5 columns:<br><br>| HOST    | METRIC     | TIME        | RELEVANCE | GRAPH_URL                               |<br>|---------|------------|-------------|-----------|-----------------------------------------|<br>| host:81 | cpu.0.wait | 4 Jul 2013  | .42       | http://host:81/render/?target=cpu.0.wait|<br><br>Developing Detectors<br>--------------------<br>All detectors should extend the Detector class and implement the detect_anomalies method.<br><br>To change the detector in the program, just change the DETECTOR=SpikeDetector() line with an instance<br>of your detector.<br><br>Testing Detectors<br>-----------------<br><br>For testing you can use test_local.py.<br><br>It requires matplotlib for plotting the results.<br><br>test_local.py receives a Graphite json response for a given target and plots the following:<br> * Original timeseries<br> * Timeseries after running the detector<br> * Detector results<br> * A treshold line (you can remove it while testing)<br><br>You just have to replace SpikeDetector with your detector.<br><br>For testing large data, you can use the util.logger ```create_logfile``` function.<br>It creates a json file that can be viewed using view_log.py script that plots a graph<br>simmilar to the one yielded by test_local.py.\n          </div>"}, "last_serial": 778193, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "3443d5e9469fd7adbeaa05f100f9609d", "sha256": "a07412b74159493e6a98012c44a954c9867ddd4fc03c4342b80c89493ea48b1a"}, "downloads": -1, "filename": "graphite_anomaly_detector-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3443d5e9469fd7adbeaa05f100f9609d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8064, "upload_time": "2013-06-24T12:05:39", "upload_time_iso_8601": "2013-06-24T12:05:39.547686Z", "url": "https://files.pythonhosted.org/packages/a2/61/9aaf588058ccd0085de4d2d39b2042260d340e9618e73d05c1d7c0dadfa5/graphite_anomaly_detector-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3443d5e9469fd7adbeaa05f100f9609d", "sha256": "a07412b74159493e6a98012c44a954c9867ddd4fc03c4342b80c89493ea48b1a"}, "downloads": -1, "filename": "graphite_anomaly_detector-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3443d5e9469fd7adbeaa05f100f9609d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8064, "upload_time": "2013-06-24T12:05:39", "upload_time_iso_8601": "2013-06-24T12:05:39.547686Z", "url": "https://files.pythonhosted.org/packages/a2/61/9aaf588058ccd0085de4d2d39b2042260d340e9618e73d05c1d7c0dadfa5/graphite_anomaly_detector-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:39 2020"}