{"info": {"author": "hobs", "author_email": "hobs+github@totalgood.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Filters", "Topic :: Text Processing :: General", "Topic :: Text Processing :: Indexing", "Topic :: Text Processing :: Linguistic"], "description": "|Build Status| |Coverage| |GitHub release| |PyPI version| |License|\n\nqary\n====\n\nUse `NLP in\nAction <https://www.manning.com/books/natural-language-processing-in-action>`__\nto build a virtual assistant that actually assists! Most bots manipulate\nyou to make money for their corporate masters. Your bot can help protect\nyou and amplify your abilities and prosocial instincts.\n\nThis hybrid chatbot combines 4 techniques explained in `NLP in\nAction <https://www.manning.com/books/natural-language-processing-in-action>`__:\n\n::\n\n   1. search: [chatterbot](https://github.com/gunthercox/ChatterBot), [will](https://github.com/skoczen/will)\n   2. pattern matching and response templates: Alexa, [AIML](https://github.com/keiffster/program-y)\n   3. generative deep learning: [robot-bernie](https://github.com/nlpia/robot-bernie), [movie-bot](https://github.com/totalgood/nlpia/blob/master/src/nlpia/book/examples/ch10_movie_dialog_chatbot.py)\n   4. grounding: [snips](https://github.com/snipsco/snips-nlu)\n\nThe presentations for San Diego Python User Group are in\n`docs/ </docs/2019-08-22--San%20Diego%20Python%20User%20Group%20--%20How%20to%20Build%20a%20Chatbot.odp>`__\n\nInstall\n-------\n\nYou\u2019ll want to install and use the conda package manager within\nAnaconda3, especially if your development environment is not a open\nstandard operating system like Linux.\n\n.. code:: bash\n\n   git clone git@github.com:nlpia/qary\n   cd qary\n   conda env create -n nlpia -f environment.yml  # or environment-windoze.yml\n   conda activate nlpia\n   pip install --editable .\n\nUsage\n-----\n\n.. code:: bash\n\n   $ bot --help\n   usage: bot [-h] [--version] [--name STR] [-p] [-b STR] [-v] [-vv]\n              [words [words ...]]\n\n   Command line bot application, e.g. bot how do you work?\n\n   positional arguments:\n     words                Words to pass to bot as an utterance or conversational\n                          statement requiring a bot reply or action.\n\n   optional arguments:\n     -h, --help           show this help message and exit\n     --version            show program's version number and exit\n     --name STR           IRC nick or CLI command name for the bot\n     -p, --persist        Don't exit. Retain language model in memory and\n                          maintain dialog until user says 'exit', 'quit' or 'bye'\n                          (this is the default behavior if you do not provide a statement)\n     -b STR, --bots STR   comma-separated list of bot personalities to load\n                          default: pattern,parul,search_fuzzy,time,eliza\n     -v, --verbose        set loglevel to INFO\n     -vv, --very-verbose  set loglevel to DEBUG\n\nExamples\n--------\n\nYou can run bot just like any other command line app, giving it your\nstatement/query as an argument.\n\n.. code:: bash\n\n   $ bot hello\n   # 2019-11-21 12:42:13,620 WARNING:nlpia.constants:107:            <module> Starting logger in nlpia.constants...\n   # 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 64350/64350 [00:00<00:00, 540679.58it/s]\n   BOT: Hello\n\nAnd if you want quicker turnaround on your bot you can just run it in\nperistent mode (without any positional arguments for your statement or\nwords).\n\nTravis\u2019s probabilistic reply selector is working nicely to chose a reply\nfrom multiple sources (default settings):\n\n-  ``pattern_bots.py``: regex patterns and greeting templates\n-  ``fuzzy_search_bots.py``: movie dialog fuzzy matching\n-  ``parul_bots.py``: Wikipedia searches using conventional TFIDF like a\n   search engine\n-  ``eliza_bots.py``: A python port of the ELIZA therapist bot\n-  ``time_bots.py``: A time and productivity tracker that parses your\n   git logs and bash history\n\n.. code:: bash\n\n   $ bot\n   (nlpia) hobs@Hobsons-MacBook-Air:~/code/chatbot/qary$ bot\n   # 2019-11-21 12:59:05,854 WARNING:nlpia.constants:107:            <module> Starting logger in nlpia.constants...\n   # 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 64350/64350 [00:00<00:00, 495935.48it/s]\n   YOU: Hi\n   BOT: hey there. tired of breathing?\n   YOU: Hello\n   BOT: How do you do. Please state your problem.\n   YOU: What is an ELIZA chatbot?\n   BOT: joey never told you we went out, did he?\n   YOU: ^[[A\n   BOT: I am sorry! I dont understand you\n   YOU: What is an ELIZA chatbot?\n   BOT: Does that question interest you ?\n   YOU: What is a chatbot?\n   BOT: hello barbie is an internet-connected version of the doll that uses a chatbot provided by the company toytalk, which previously used the chatbot for a range of smartphone-based characters for children.\n   YOU: Hello\n   BOT: hello.\n   YOU: Hello\n   BOT: How do you do. Please state your problem.\n   YOU: bye\n   $\n\nWork in Progress\n----------------\n\n-  Travis (@travis-harper): model management, context filtering, and\n   the addition of more conversational agents\n-  Nima (@hulkgeek): question answering bot based on his state of the\n   art question classifier\n-  Xavier (@spirovanni): employment counselor for workforce.org and the\n   city of San Diego\n-  Hobson (@hobson): infrastructure (CI, webapp) and framework features\n   (nltk->spacy, USE vectors)\n-  Erturgrul: Turkish wikipedia QA bot (parul bot)\n-  You: What big chatbot idea would you like to make a reality?\n\nIdeas\n-----\n\nPlease submit your feature ideas `github\nissues <https://github.com/nlpia/qary/issues/>`__. Here are a few\nideas to get you started.\n\n1.  movie dialog in django database to hold the statement->response\n    pairs\n\n    1. graph schema compatible with MxGraph (draw.io) and other js\n       libraries for editing graphs/flow charts.\n    2. ubuntu dialog corpus in db\n    3. mindfulness faq corpus in db\n    4. famous quotes as responses to the statement \u201ctell me something\n       inspiring\u201d\n    5. jokes for \u201ctell me a joke\u201d\n    6. data science faq\n    7. nlpia faq\n    8. psychology/self-help faq\n\n2.  html django template so there is a web interface to the app rather\n    than just the command line command ``bot``\n3.  use Django Rest Framework to create a basic API that returns json\n    containing a reply to any request sent to the local host url, like\n    ``http://localhost:8000/api?statement='Hello world'`` might return\n    {\u2018reply\u2019: \u2018Hello human!\u2019}\n4.  have the command line app use the REST API from #3 rather than the\n    slow reloading of the csv file every time you talk to the bot\n5.  use database full text search to find appropriate statements in the\n    database that we have a response for\n6.  use semantic search instead of text similarity (full text search or\n    fuzzywyzzy text matches)\n\n    1. add embedding vectors (300D document vectors from spacy) to each\n       statement and response in the db\n    2. create a semantic index of the document vectors using ``annoy``\n       so \u201capproximate nearest neighbors\u201d (semantic matches) can be\n       found quickly\n    3. load the annoy index of the document vectors every time the\n       server is started and use it to find the best reply in the\n       database.\n    4. use universal sentence encodings instead of docvecs from spacy.\n\n7.  create a UX for dialog graph creation/design:\n\n    1. install `mxgraph <https://github.com/totalgood/mxgraph>`__ in the\n       django app\n    2. create a basic page based on this mxgraph example so the user can\n       build and save dialog to the db as a graph:\n       `tutorial <https://jgraph.github.io/mxgraph/docs/tutorial.html#1>`__,\n       `example\n       app <https://jgraph.github.io/mxgraph/javascript/examples/grapheditor/www/index.html>`__\n    3. convert the dialog graph into a set of records/rows in the\n       qary db so it acts\n\n8.  tag different dialog graphs in the db so the user can turn them\n    on/off for their bot\n\n    1. allow the user to prioritize some dialogs/models over others\n    2. allow the user to create their own weighting function to\n       prioritize individual statements produced by the api\n\n9.  train a character-based generative model\n\n    1. decoder half of autoencoder to generate text based on docvecs\n       from spacy\n    2. decoder part of autoencoder to generate text based on universal\n       sentence encodings\n    3. train model to generate reply embeddings (doc vecs and/or use\n       vecs) using statement embeddings (dialog engine encoder-decoder\n       using docvecs or use vecs for the encoder half\n\n10. add a therapy/mindfulness-coach feature to respond with mindfulness\n    ideas to some queries/statements\n11. add the \u201ctranslate \u2018this text\u2019 to spanish\u201d feature\n\n    1. train character-based LSTM models on english-spanish,\n       english-french, english-german, english<->whatever\n    2. add module for this to the django app/api\n\n12. AIML engine fallback\n\nInspiration\n-----------\n\nA lot of the patterns and ideas were gleaned from other awesome\nprosocial chatbots and modular open source frameworks.\n\nMental Health Coaches\n~~~~~~~~~~~~~~~~~~~~~\n\n-  `WYSA <wysa.io>`__ from London is free\n\n   -  https://www.techinasia.com/ai-chatbot-wysa-touchkin-penguin\n   -  open source (touchkin)?\n   -  ionic?\n   -  passive sensing of sleep patterns (accelerometers?)\n   -  guided meditation\n   -  exercise suggestions\n   -  free text dialog with buttons to suggest replies\n   -  based on open source touchkin/mindlogger ?\n   -  `list of alternative\n      apps <https://github.com/akeshavan/mHealthLandscape/blob/0ea138267f13af1c8a0733296ebcfb9683485528/mHealth_iOS.csv>`__\n\n-  `Replika <replika.ai>`__ from US is paywalled\n\n   -  personality profile test\n   -  pay to unlock \u201cskills\u201d training\n\n-  `Youper <youper.ai>`__ (thank you Maria and\n   `tangibleai.com <tangibleai.com>`__)\n\nOpen Source Frameworks\n~~~~~~~~~~~~~~~~~~~~~~\n\n-  `will <https://github.com/skoczen/will>`__\n\n   -  lang: python\n   -  web: zeromq\n   -  db: redis, couchbase, flat file, user-defined\n   -  integrations: hipchat, rocketchat, shell, slack\n\n-  `ai-chatbot-framework <https://github.com/alfredfrancis/ai-chatbot-framework/blob/master/app/intents/models.py>`__\n\n   -  lang: python\n   -  web: flask\n   -  orm: flask?\n   -  db: mongodb\n   -  nice general json syntax for specifying intent/goals for\n      conversation manager (agent)\n\n-  `rasa <https://github.com/RasaHQ/rasa>`__\n\n   -  lang: python\n   -  web: sanic (async)\n   -  orm: sqlalchemy\n   -  db: sqlite\n   -  rich, complex, mature framework\n\n-  `botpress <https://github.com/botpress/botpress>`__\n\n   -  javascript (typescript)\n   -  meta-framework allowing your to write your own modules in\n      javascript\n\n-  `Program-Y <https://github.com/keiffster/program-y/wiki>`__\n\n   -  python\n   -  web: flask (rest), sanic (async)\n   -  db: aiml flat files (XML)\n   -  integrations: facebook messenger, google search, kik, line, alexa,\n      webchat, viber\n\n.. |Build Status| image:: https://api.travis-ci.com/nlpia/qary.svg?branch=master\n   :target: https://travis-ci.com/nlpia/qary\n.. |Coverage| image:: https://codecov.io/gh/nlpia/qary/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/nlpia/qary\n.. |GitHub release| image:: https://img.shields.io/github/release/nlpia/qary.svg\n   :target: https://github.com/nlpia/qary/releases/latest\n.. |PyPI version| image:: https://img.shields.io/pypi/pyversions/qary.svg\n   :target: https://pypi.org/project/qary/\n.. |License| image:: https://img.shields.io/pypi/l/qary.svg\n   :target: https://pypi.python.org/pypi/qary/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://nlpia.org", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "qary", "package_url": "https://pypi.org/project/qary/", "platform": "any", "project_url": "https://pypi.org/project/qary/", "project_urls": {"Homepage": "https://nlpia.org"}, "release_url": "https://pypi.org/project/qary/0.4.4/", "requires_dist": null, "requires_python": "", "summary": "\"An open framework and dataset for building a distributed-agent chatbot based on _Natural Language Processing in Action_.\"", "version": "0.4.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/nlpia/qary\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0df0126f2d0dc87cfa0ac2b8cf30186a27f7e33e/68747470733a2f2f6170692e7472617669732d63692e636f6d2f6e6c7069612f716172792e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/nlpia/qary\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3dce576051eddae21c955025be33d97b8de187b5/68747470733a2f2f636f6465636f762e696f2f67682f6e6c7069612f716172792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://github.com/nlpia/qary/releases/latest\" rel=\"nofollow\"><img alt=\"GitHub release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9234a2f4117b1f4b7d3ba5b0ba1ea4577134f0bd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6e6c7069612f716172792e737667\"></a> <a href=\"https://pypi.org/project/qary/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/daeebca55765288bcd09d10abb45af4ad32c5c8f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f716172792e737667\"></a> <a href=\"https://pypi.python.org/pypi/qary/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c74449c8ffd1b8dc70d219cbd18b9ac0168a25db/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f716172792e737667\"></a></p>\n<div id=\"qary\">\n<h2>qary</h2>\n<p>Use <a href=\"https://www.manning.com/books/natural-language-processing-in-action\" rel=\"nofollow\">NLP in\nAction</a>\nto build a virtual assistant that actually assists! Most bots manipulate\nyou to make money for their corporate masters. Your bot can help protect\nyou and amplify your abilities and prosocial instincts.</p>\n<p>This hybrid chatbot combines 4 techniques explained in <a href=\"https://www.manning.com/books/natural-language-processing-in-action\" rel=\"nofollow\">NLP in\nAction</a>:</p>\n<pre>1. search: [chatterbot](https://github.com/gunthercox/ChatterBot), [will](https://github.com/skoczen/will)\n2. pattern matching and response templates: Alexa, [AIML](https://github.com/keiffster/program-y)\n3. generative deep learning: [robot-bernie](https://github.com/nlpia/robot-bernie), [movie-bot](https://github.com/totalgood/nlpia/blob/master/src/nlpia/book/examples/ch10_movie_dialog_chatbot.py)\n4. grounding: [snips](https://github.com/snipsco/snips-nlu)\n</pre>\n<p>The presentations for San Diego Python User Group are in\n<a href=\"/docs/2019-08-22--San%20Diego%20Python%20User%20Group%20--%20How%20to%20Build%20a%20Chatbot.odp\" rel=\"nofollow\">docs/</a></p>\n<div id=\"install\">\n<h3>Install</h3>\n<p>You\u2019ll want to install and use the conda package manager within\nAnaconda3, especially if your development environment is not a open\nstandard operating system like Linux.</p>\n<pre>git clone git@github.com:nlpia/qary\n<span class=\"nb\">cd</span> qary\nconda env create -n nlpia -f environment.yml  <span class=\"c1\"># or environment-windoze.yml\n</span>conda activate nlpia\npip install --editable .\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<pre>$ bot --help\nusage: bot <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--version<span class=\"o\">]</span> <span class=\"o\">[</span>--name STR<span class=\"o\">]</span> <span class=\"o\">[</span>-p<span class=\"o\">]</span> <span class=\"o\">[</span>-b STR<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span> <span class=\"o\">[</span>-vv<span class=\"o\">]</span>\n           <span class=\"o\">[</span>words <span class=\"o\">[</span>words ...<span class=\"o\">]]</span>\n\nCommand line bot application, e.g. bot how <span class=\"k\">do</span> you work?\n\npositional arguments:\n  words                Words to pass to bot as an utterance or conversational\n                       statement requiring a bot reply or action.\n\noptional arguments:\n  -h, --help           show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --version            show program<span class=\"s1\">'s version number and exit\n  --name STR           IRC nick or CLI command name for the bot\n  -p, --persist        Don'</span>t exit. Retain language model in memory and\n                       maintain dialog <span class=\"k\">until</span> user says <span class=\"s1\">'exit'</span>, <span class=\"s1\">'quit'</span> or <span class=\"s1\">'bye'</span>\n                       <span class=\"o\">(</span>this is the default behavior <span class=\"k\">if</span> you <span class=\"k\">do</span> not provide a statement<span class=\"o\">)</span>\n  -b STR, --bots STR   comma-separated list of bot personalities to load\n                       default: pattern,parul,search_fuzzy,time,eliza\n  -v, --verbose        <span class=\"nb\">set</span> loglevel to INFO\n  -vv, --very-verbose  <span class=\"nb\">set</span> loglevel to DEBUG\n</pre>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>You can run bot just like any other command line app, giving it your\nstatement/query as an argument.</p>\n<pre>$ bot hello\n<span class=\"c1\"># 2019-11-21 12:42:13,620 WARNING:nlpia.constants:107:            &lt;module&gt; Starting logger in nlpia.constants...\n# 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 64350/64350 [00:00&lt;00:00, 540679.58it/s]\n</span>BOT: Hello\n</pre>\n<p>And if you want quicker turnaround on your bot you can just run it in\nperistent mode (without any positional arguments for your statement or\nwords).</p>\n<p>Travis\u2019s probabilistic reply selector is working nicely to chose a reply\nfrom multiple sources (default settings):</p>\n<ul>\n<li><tt>pattern_bots.py</tt>: regex patterns and greeting templates</li>\n<li><tt>fuzzy_search_bots.py</tt>: movie dialog fuzzy matching</li>\n<li><tt>parul_bots.py</tt>: Wikipedia searches using conventional TFIDF like a\nsearch engine</li>\n<li><tt>eliza_bots.py</tt>: A python port of the ELIZA therapist bot</li>\n<li><tt>time_bots.py</tt>: A time and productivity tracker that parses your\ngit logs and bash history</li>\n</ul>\n<pre>$ bot\n<span class=\"o\">(</span>nlpia<span class=\"o\">)</span> hobs@Hobsons-MacBook-Air:~/code/chatbot/qary$ bot\n<span class=\"c1\"># 2019-11-21 12:59:05,854 WARNING:nlpia.constants:107:            &lt;module&gt; Starting logger in nlpia.constants...\n# 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 64350/64350 [00:00&lt;00:00, 495935.48it/s]\n</span>YOU: Hi\nBOT: hey there. tired of breathing?\nYOU: Hello\nBOT: How <span class=\"k\">do</span> you <span class=\"k\">do</span>. Please state your problem.\nYOU: What is an ELIZA chatbot?\nBOT: joey never told you we went out, did he?\nYOU: ^<span class=\"o\">[[</span>A\nBOT: I am sorry! I dont understand you\nYOU: What is an ELIZA chatbot?\nBOT: Does that question interest you ?\nYOU: What is a chatbot?\nBOT: hello barbie is an internet-connected version of the doll that uses a chatbot provided by the company toytalk, which previously used the chatbot <span class=\"k\">for</span> a range of smartphone-based characters <span class=\"k\">for</span> children.\nYOU: Hello\nBOT: hello.\nYOU: Hello\nBOT: How <span class=\"k\">do</span> you <span class=\"k\">do</span>. Please state your problem.\nYOU: bye\n$\n</pre>\n</div>\n<div id=\"work-in-progress\">\n<h3>Work in Progress</h3>\n<ul>\n<li>Travis (@travis-harper): model management, context filtering, and\nthe addition of more conversational agents</li>\n<li>Nima (@hulkgeek): question answering bot based on his state of the\nart question classifier</li>\n<li>Xavier (@spirovanni): employment counselor for workforce.org and the\ncity of San Diego</li>\n<li>Hobson (@hobson): infrastructure (CI, webapp) and framework features\n(nltk-&gt;spacy, USE vectors)</li>\n<li>Erturgrul: Turkish wikipedia QA bot (parul bot)</li>\n<li>You: What big chatbot idea would you like to make a reality?</li>\n</ul>\n</div>\n<div id=\"ideas\">\n<h3>Ideas</h3>\n<p>Please submit your feature ideas <a href=\"https://github.com/nlpia/qary/issues/\" rel=\"nofollow\">github\nissues</a>. Here are a few\nideas to get you started.</p>\n<ol>\n<li>movie dialog in django database to hold the statement-&gt;response\npairs<ol>\n<li>graph schema compatible with MxGraph (draw.io) and other js\nlibraries for editing graphs/flow charts.</li>\n<li>ubuntu dialog corpus in db</li>\n<li>mindfulness faq corpus in db</li>\n<li>famous quotes as responses to the statement \u201ctell me something\ninspiring\u201d</li>\n<li>jokes for \u201ctell me a joke\u201d</li>\n<li>data science faq</li>\n<li>nlpia faq</li>\n<li>psychology/self-help faq</li>\n</ol>\n</li>\n<li>html django template so there is a web interface to the app rather\nthan just the command line command <tt>bot</tt></li>\n<li>use Django Rest Framework to create a basic API that returns json\ncontaining a reply to any request sent to the local host url, like\n<tt><span class=\"pre\">http://localhost:8000/api?statement='Hello</span> world'</tt> might return\n{\u2018reply\u2019: \u2018Hello human!\u2019}</li>\n<li>have the command line app use the REST API from #3 rather than the\nslow reloading of the csv file every time you talk to the bot</li>\n<li>use database full text search to find appropriate statements in the\ndatabase that we have a response for</li>\n<li>use semantic search instead of text similarity (full text search or\nfuzzywyzzy text matches)<ol>\n<li>add embedding vectors (300D document vectors from spacy) to each\nstatement and response in the db</li>\n<li>create a semantic index of the document vectors using <tt>annoy</tt>\nso \u201capproximate nearest neighbors\u201d (semantic matches) can be\nfound quickly</li>\n<li>load the annoy index of the document vectors every time the\nserver is started and use it to find the best reply in the\ndatabase.</li>\n<li>use universal sentence encodings instead of docvecs from spacy.</li>\n</ol>\n</li>\n<li>create a UX for dialog graph creation/design:<ol>\n<li>install <a href=\"https://github.com/totalgood/mxgraph\" rel=\"nofollow\">mxgraph</a> in the\ndjango app</li>\n<li>create a basic page based on this mxgraph example so the user can\nbuild and save dialog to the db as a graph:\n<a href=\"https://jgraph.github.io/mxgraph/docs/tutorial.html#1\" rel=\"nofollow\">tutorial</a>,\n<a href=\"https://jgraph.github.io/mxgraph/javascript/examples/grapheditor/www/index.html\" rel=\"nofollow\">example\napp</a></li>\n<li>convert the dialog graph into a set of records/rows in the\nqary db so it acts</li>\n</ol>\n</li>\n<li>tag different dialog graphs in the db so the user can turn them\non/off for their bot<ol>\n<li>allow the user to prioritize some dialogs/models over others</li>\n<li>allow the user to create their own weighting function to\nprioritize individual statements produced by the api</li>\n</ol>\n</li>\n<li>train a character-based generative model<ol>\n<li>decoder half of autoencoder to generate text based on docvecs\nfrom spacy</li>\n<li>decoder part of autoencoder to generate text based on universal\nsentence encodings</li>\n<li>train model to generate reply embeddings (doc vecs and/or use\nvecs) using statement embeddings (dialog engine encoder-decoder\nusing docvecs or use vecs for the encoder half</li>\n</ol>\n</li>\n<li>add a therapy/mindfulness-coach feature to respond with mindfulness\nideas to some queries/statements</li>\n<li>add the \u201ctranslate \u2018this text\u2019 to spanish\u201d feature<ol>\n<li>train character-based LSTM models on english-spanish,\nenglish-french, english-german, english&lt;-&gt;whatever</li>\n<li>add module for this to the django app/api</li>\n</ol>\n</li>\n<li>AIML engine fallback</li>\n</ol>\n</div>\n<div id=\"inspiration\">\n<h3>Inspiration</h3>\n<p>A lot of the patterns and ideas were gleaned from other awesome\nprosocial chatbots and modular open source frameworks.</p>\n<div id=\"mental-health-coaches\">\n<h4>Mental Health Coaches</h4>\n<ul>\n<li><a href=\"wysa.io\" rel=\"nofollow\">WYSA</a> from London is free<ul>\n<li><a href=\"https://www.techinasia.com/ai-chatbot-wysa-touchkin-penguin\" rel=\"nofollow\">https://www.techinasia.com/ai-chatbot-wysa-touchkin-penguin</a></li>\n<li>open source (touchkin)?</li>\n<li>ionic?</li>\n<li>passive sensing of sleep patterns (accelerometers?)</li>\n<li>guided meditation</li>\n<li>exercise suggestions</li>\n<li>free text dialog with buttons to suggest replies</li>\n<li>based on open source touchkin/mindlogger ?</li>\n<li><a href=\"https://github.com/akeshavan/mHealthLandscape/blob/0ea138267f13af1c8a0733296ebcfb9683485528/mHealth_iOS.csv\" rel=\"nofollow\">list of alternative\napps</a></li>\n</ul>\n</li>\n<li><a href=\"replika.ai\" rel=\"nofollow\">Replika</a> from US is paywalled<ul>\n<li>personality profile test</li>\n<li>pay to unlock \u201cskills\u201d training</li>\n</ul>\n</li>\n<li><a href=\"youper.ai\" rel=\"nofollow\">Youper</a> (thank you Maria and\n<a href=\"tangibleai.com\" rel=\"nofollow\">tangibleai.com</a>)</li>\n</ul>\n</div>\n<div id=\"open-source-frameworks\">\n<h4>Open Source Frameworks</h4>\n<ul>\n<li><a href=\"https://github.com/skoczen/will\" rel=\"nofollow\">will</a><ul>\n<li>lang: python</li>\n<li>web: zeromq</li>\n<li>db: redis, couchbase, flat file, user-defined</li>\n<li>integrations: hipchat, rocketchat, shell, slack</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/alfredfrancis/ai-chatbot-framework/blob/master/app/intents/models.py\" rel=\"nofollow\">ai-chatbot-framework</a><ul>\n<li>lang: python</li>\n<li>web: flask</li>\n<li>orm: flask?</li>\n<li>db: mongodb</li>\n<li>nice general json syntax for specifying intent/goals for\nconversation manager (agent)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/RasaHQ/rasa\" rel=\"nofollow\">rasa</a><ul>\n<li>lang: python</li>\n<li>web: sanic (async)</li>\n<li>orm: sqlalchemy</li>\n<li>db: sqlite</li>\n<li>rich, complex, mature framework</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/botpress/botpress\" rel=\"nofollow\">botpress</a><ul>\n<li>javascript (typescript)</li>\n<li>meta-framework allowing your to write your own modules in\njavascript</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/keiffster/program-y/wiki\" rel=\"nofollow\">Program-Y</a><ul>\n<li>python</li>\n<li>web: flask (rest), sanic (async)</li>\n<li>db: aiml flat files (XML)</li>\n<li>integrations: facebook messenger, google search, kik, line, alexa,\nwebchat, viber</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7098420, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "03554d792d6975a03df956d5e2179c23", "sha256": "eb0e15eaeedbf551b3868efe87b07ea372ea780d86a12c8cec8c20b58e79ec0a"}, "downloads": -1, "filename": "qary-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03554d792d6975a03df956d5e2179c23", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 21169, "upload_time": "2020-03-19T01:55:11", "upload_time_iso_8601": "2020-03-19T01:55:11.143214Z", "url": "https://files.pythonhosted.org/packages/bb/c6/cc31ca113837ee5f676ce84433d8f4233a199923618d3c951033f138a310/qary-0.3.0-py2.py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "118b73fac2e8c6de6a430fd55a716213", "sha256": "c14f0175c095cd03c252b02634ebd4314f4c8f183eabb0cb35862c142f52402a"}, "downloads": -1, "filename": "qary-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "118b73fac2e8c6de6a430fd55a716213", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 84018, "upload_time": "2020-03-19T02:12:43", "upload_time_iso_8601": "2020-03-19T02:12:43.661331Z", "url": "https://files.pythonhosted.org/packages/04/64/24b41ec63ecddfc481ccd86308479fff185a06cc0f485223bcb268407784/qary-0.3.1-py2.py3-none-any.whl", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "53b0b183b79bf250a4c64031f45f1c0c", "sha256": "27626228159cd0b6a23c0bda15823eee1636ea2c388e4005588deb9d46819509"}, "downloads": -1, "filename": "qary-0.3.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53b0b183b79bf250a4c64031f45f1c0c", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2185714, "upload_time": "2020-04-16T21:59:48", "upload_time_iso_8601": "2020-04-16T21:59:48.166078Z", "url": "https://files.pythonhosted.org/packages/54/34/9406672d3a41e6880deab51371f468789d3e8de6e2744b88324128452898/qary-0.3.10-py2.py3-none-any.whl", "yanked": false}], "0.3.11": [{"comment_text": "", "digests": {"md5": "13d48f4cd498af11e8e6d89c24f8b9f5", "sha256": "99d970c3ca546a74a51ac094af4254780c86605f76b9ce070067b3280df8c388"}, "downloads": -1, "filename": "qary-0.3.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "13d48f4cd498af11e8e6d89c24f8b9f5", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2186148, "upload_time": "2020-04-21T06:41:47", "upload_time_iso_8601": "2020-04-21T06:41:47.729055Z", "url": "https://files.pythonhosted.org/packages/67/47/229ec911d4bdb4a60c966de098ad9f0122b5748cff11e24aed9c5650120d/qary-0.3.11-py2.py3-none-any.whl", "yanked": false}], "0.3.12": [{"comment_text": "", "digests": {"md5": "f01c470ab1877b4c9861f6ab0410a850", "sha256": "8620528eee0563fa403cba9e71d1d4aecc161e55f980b5e247499f54fd645479"}, "downloads": -1, "filename": "qary-0.3.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f01c470ab1877b4c9861f6ab0410a850", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2186138, "upload_time": "2020-04-21T07:01:54", "upload_time_iso_8601": "2020-04-21T07:01:54.706421Z", "url": "https://files.pythonhosted.org/packages/8c/79/5a92029fb70da994e839badcbbc7a0d4e3196aec77e650ba805f9f15d812/qary-0.3.12-py2.py3-none-any.whl", "yanked": false}], "0.3.13": [{"comment_text": "", "digests": {"md5": "4a671d2cbf184f768cb685497a02891b", "sha256": "6b74a70113f456b8246e1ddf7064d263001b6e9a143e14f249293a9ffb28e6f1"}, "downloads": -1, "filename": "qary-0.3.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4a671d2cbf184f768cb685497a02891b", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2186146, "upload_time": "2020-04-21T07:14:49", "upload_time_iso_8601": "2020-04-21T07:14:49.465573Z", "url": "https://files.pythonhosted.org/packages/24/a2/f242550aed4a691ad4054a8cc41a9208b293b8e1d28a0bbf61bf414be6a6/qary-0.3.13-py2.py3-none-any.whl", "yanked": false}], "0.3.14": [{"comment_text": "", "digests": {"md5": "831ab65f18b1a6f85a74f47ddb3730bf", "sha256": "8c409404443f8d3309a3e6c3925022c5fdbd899051d0c40aa5870b7cac175089"}, "downloads": -1, "filename": "qary-0.3.14-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "831ab65f18b1a6f85a74f47ddb3730bf", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2186746, "upload_time": "2020-04-21T23:29:59", "upload_time_iso_8601": "2020-04-21T23:29:59.175271Z", "url": "https://files.pythonhosted.org/packages/08/82/4d913526f7b9be9ce2c42ba6b29507c0a557b709f4d57d81e17bf8141c44/qary-0.3.14-py2.py3-none-any.whl", "yanked": false}], "0.3.15": [{"comment_text": "", "digests": {"md5": "bc4a345d49e36a0a903a0cfd1ec6e766", "sha256": "2ac7387924b45ad2973c00a84b184f4350e1732154f844192296eb78914b7fc7"}, "downloads": -1, "filename": "qary-0.3.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc4a345d49e36a0a903a0cfd1ec6e766", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2187193, "upload_time": "2020-04-22T12:54:42", "upload_time_iso_8601": "2020-04-22T12:54:42.054658Z", "url": "https://files.pythonhosted.org/packages/83/75/bba75f7d6af8b2cd4aafbc468d1d3aeec316bfe1e2c0c37e7d809a51e646/qary-0.3.15-py2.py3-none-any.whl", "yanked": false}], "0.3.16": [{"comment_text": "", "digests": {"md5": "f308846a5bc3f68b2370b5b817c35044", "sha256": "6e00d7f3ad6f28c9b20b0754b511590867ad1c568965338b241ec803e8541082"}, "downloads": -1, "filename": "qary-0.3.16-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f308846a5bc3f68b2370b5b817c35044", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2187353, "upload_time": "2020-04-22T13:00:32", "upload_time_iso_8601": "2020-04-22T13:00:32.293821Z", "url": "https://files.pythonhosted.org/packages/6b/e0/70adfe926c30b1a1a26b715f40b8d5a9693ca9575b6ffc3def1a21cb34cd/qary-0.3.16-py2.py3-none-any.whl", "yanked": false}], "0.3.18": [{"comment_text": "", "digests": {"md5": "42085e825bc279e4314d1e4d255d0f07", "sha256": "f7b71b5c44cc2b92efe949fa90823643cb6cd1d6541cd4d6a7d76033fcd8ca6f"}, "downloads": -1, "filename": "qary-0.3.18-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42085e825bc279e4314d1e4d255d0f07", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2187739, "upload_time": "2020-04-23T06:28:19", "upload_time_iso_8601": "2020-04-23T06:28:19.442786Z", "url": "https://files.pythonhosted.org/packages/bd/6d/748bf50b469279423895c7dc1f55297f008286cd9ad619a752d1b6647a5b/qary-0.3.18-py2.py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "1a7cabd840a02b2626d684aa3705e6bd", "sha256": "7b98e72c0ffad0710f22f2cdc0642f59409aff81ae54265d6ba61d4eecbc503c"}, "downloads": -1, "filename": "qary-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1a7cabd840a02b2626d684aa3705e6bd", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2006189, "upload_time": "2020-03-26T01:37:45", "upload_time_iso_8601": "2020-03-26T01:37:45.942686Z", "url": "https://files.pythonhosted.org/packages/e9/52/dd0f43e16572034051f49ba5aa279c530bf30cce87e91291359663707c80/qary-0.3.2-py2.py3-none-any.whl", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "6f19b65bb3bc1ad431e52af7c82cb419", "sha256": "c5999d384f1875bb39d33082fde28a2eceb56706e06beb2c8f512fb2d02a805c"}, "downloads": -1, "filename": "qary-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f19b65bb3bc1ad431e52af7c82cb419", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2006515, "upload_time": "2020-03-26T02:47:15", "upload_time_iso_8601": "2020-03-26T02:47:15.082778Z", "url": "https://files.pythonhosted.org/packages/8a/2d/baa0a26f8f4e59a75a62dddc6d79871f2759554a2411e20c57705190075e/qary-0.3.4-py2.py3-none-any.whl", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "877615a5dbc22536500ed1de37654020", "sha256": "d57293ea57b8b9fb61c2ed1ec613bda2f00eaba112a7a295d8666ffc26c1cbd4"}, "downloads": -1, "filename": "qary-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "877615a5dbc22536500ed1de37654020", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2008166, "upload_time": "2020-03-30T22:06:10", "upload_time_iso_8601": "2020-03-30T22:06:10.644310Z", "url": "https://files.pythonhosted.org/packages/96/cf/4c3e782b15f0a403903177e77503d75e3efd1af920d5019881723fe6dad9/qary-0.3.5-py2.py3-none-any.whl", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "4377182ffa578e1b6df92b80922d3dc9", "sha256": "6a0a41e20e201a4332b17bd4edb0084b0863ec4382d304c6cd759c0702400be8"}, "downloads": -1, "filename": "qary-0.3.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4377182ffa578e1b6df92b80922d3dc9", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2008817, "upload_time": "2020-04-01T05:54:11", "upload_time_iso_8601": "2020-04-01T05:54:11.730010Z", "url": "https://files.pythonhosted.org/packages/64/e4/1e767573b91cbb365de4dd0f0f4c44029d06f033e8c59ec2c4f522dbf9c1/qary-0.3.6-py2.py3-none-any.whl", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "b4451a37851c1560b1b2743382749b64", "sha256": "49ba5594408ede3f698a51f1671bb6616f477f4a1c7426708ee701d37fb8a32b"}, "downloads": -1, "filename": "qary-0.3.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b4451a37851c1560b1b2743382749b64", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2012353, "upload_time": "2020-04-02T05:50:04", "upload_time_iso_8601": "2020-04-02T05:50:04.950064Z", "url": "https://files.pythonhosted.org/packages/df/ba/87d9f2a093a22ca0d61190a82f6b22d6e8dd88c51aa3e56d310cd84a7621/qary-0.3.7-py2.py3-none-any.whl", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "58b858d7f1c0d260ffb3d86b9f7b1ece", "sha256": "cd55621c785757f2bcefa027a551145d84e222b6bd91a0f8270a4293d6f236b2"}, "downloads": -1, "filename": "qary-0.3.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "58b858d7f1c0d260ffb3d86b9f7b1ece", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2088025, "upload_time": "2020-04-15T19:26:56", "upload_time_iso_8601": "2020-04-15T19:26:56.978661Z", "url": "https://files.pythonhosted.org/packages/ad/ca/1c32e33bea7ec525a0d3f1d379cf134f3cae7e8680e80a1955895ff60b45/qary-0.3.8-py2.py3-none-any.whl", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "a2746440ba210100df0a157a0f5f7c42", "sha256": "22fdf74838ca831432e6ed3751870e5c8ad5dea6b606afbe2ff7815842679eb2"}, "downloads": -1, "filename": "qary-0.3.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a2746440ba210100df0a157a0f5f7c42", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2088550, "upload_time": "2020-04-16T05:20:10", "upload_time_iso_8601": "2020-04-16T05:20:10.195778Z", "url": "https://files.pythonhosted.org/packages/8c/7e/2461e45a82ec1fbc15adee0290e5bca4d982f188f8aed81c5706b3bb378b/qary-0.3.9-py2.py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "5ca7dcacef39329cea178ffc01a2c6db", "sha256": "321b081a281d368a2f31b31b810b9bfe2d60dd893202f76f96d997cd35480199"}, "downloads": -1, "filename": "qary-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5ca7dcacef39329cea178ffc01a2c6db", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2187741, "upload_time": "2020-04-23T07:04:43", "upload_time_iso_8601": "2020-04-23T07:04:43.778244Z", "url": "https://files.pythonhosted.org/packages/33/e8/dfb80654ae8153201e1b821c953acf6d5cd9224aabd3a37059e6a41f007b/qary-0.4.0-py2.py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "15ba4d8c9e57bf78b904421d80bcfbba", "sha256": "2dd3e493a8e4a8905700a8eda398c81854337f990a7495affccec82feb017cf0"}, "downloads": -1, "filename": "qary-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15ba4d8c9e57bf78b904421d80bcfbba", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2187735, "upload_time": "2020-04-23T07:43:08", "upload_time_iso_8601": "2020-04-23T07:43:08.134906Z", "url": "https://files.pythonhosted.org/packages/5b/ab/ac29598cdecfad0f2d164a27223f6610c26893d368850531a802e04ed623/qary-0.4.1-py2.py3-none-any.whl", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "650f6ee390dd1185c8206cc96ccf00ee", "sha256": "283e34d9c505f1e05d397a49e4821afc596004fbd137463e1a7668039d80a043"}, "downloads": -1, "filename": "qary-0.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "650f6ee390dd1185c8206cc96ccf00ee", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2187776, "upload_time": "2020-04-23T14:56:20", "upload_time_iso_8601": "2020-04-23T14:56:20.751029Z", "url": "https://files.pythonhosted.org/packages/e9/8a/d176233dc01bab031b119278fa2e3102abd27a277d716155bb6eb1f99fc0/qary-0.4.2-py2.py3-none-any.whl", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "87275c3e424e2dcc4712c25b079f707b", "sha256": "15d6067d9716c647f676a4ed2bd3cbc491eb40cf011209ff563c36b20a7923ae"}, "downloads": -1, "filename": "qary-0.4.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "87275c3e424e2dcc4712c25b079f707b", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2192959, "upload_time": "2020-04-23T21:56:36", "upload_time_iso_8601": "2020-04-23T21:56:36.175591Z", "url": "https://files.pythonhosted.org/packages/5f/22/b6b6425f06eff784fb2f216974a9aa85f22837ee76dbcab7d53c115a78ad/qary-0.4.3-py2.py3-none-any.whl", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "e70183401f73b9362e21a299728ac91d", "sha256": "d4a16088e8e7ef87aa4972736544eaf427c484029e0d7dfcceee489a7435be79"}, "downloads": -1, "filename": "qary-0.4.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e70183401f73b9362e21a299728ac91d", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2193266, "upload_time": "2020-04-25T08:18:44", "upload_time_iso_8601": "2020-04-25T08:18:44.622065Z", "url": "https://files.pythonhosted.org/packages/11/e0/0ef330fc7a9e9c92076c427b289898d17e47a49a83b6fc8fdb510e8fb607/qary-0.4.4-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e70183401f73b9362e21a299728ac91d", "sha256": "d4a16088e8e7ef87aa4972736544eaf427c484029e0d7dfcceee489a7435be79"}, "downloads": -1, "filename": "qary-0.4.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e70183401f73b9362e21a299728ac91d", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 2193266, "upload_time": "2020-04-25T08:18:44", "upload_time_iso_8601": "2020-04-25T08:18:44.622065Z", "url": "https://files.pythonhosted.org/packages/11/e0/0ef330fc7a9e9c92076c427b289898d17e47a49a83b6fc8fdb510e8fb607/qary-0.4.4-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:10:16 2020"}