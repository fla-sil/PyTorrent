{"info": {"author": "Andrea Barbaresi", "author_email": "barban.mobile@google.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Library for EVA II PRO WiFi Smart Dehumidifier appliance\n[![PyPI](https://img.shields.io/pypi/v/midea-inventor-lib.svg)](https://pypi.org/project/midea-inventor-lib/)\n[![](https://img.shields.io/pypi/pyversions/midea-inventor-lib.svg)](https://pypi.org/project/midea-inventor-lib/)\n[![](https://img.shields.io/pypi/l/midea-inventor-lib.svg)](https://pypi.org/project/midea-inventor-lib/)\n[![](https://img.shields.io/pypi/wheel/midea-inventor-lib.svg)](https://pypi.org/pypi/midea-inventor-lib/)\n[![](https://img.shields.io/pypi/status/midea-inventor-lib.svg)](https://pypi.org/pypi/midea-inventor-lib/)\n[![](https://img.shields.io/pypi/implementation/midea-inventor-lib.svg)](https://pypi.org/pypi/midea-inventor-lib/)\n[![<100kB](https://img.shields.io/github/languages/code-size/barban-dev/midea_inventor_dehumidifier.svg)](https://github.com/barban-dev/midea_inventor_dehumidifier)\n[![<100kB](https://img.shields.io/github/repo-size/barban-dev/midea_inventor_dehumidifier.svg)](https://github.com/barban-dev/midea_inventor_dehumidifier)\n[![Build status](https://travis-ci.com/barban-dev/midea_inventor_dehumidifier.svg?branch=master)](https://travis-ci.com/barban-dev/midea_inventor_dehumidifier)\n[![Known Vulnerabilities](https://snyk.io/test/github/barban-dev/midea_inventor_dehumidifier/badge.svg?targetFile=requirements.txt)](https://snyk.io/test/github/barban-dev/midea_inventor_dehumidifier?targetFile=requirements.txt)\n[![HitCount](http://hits.dwyl.io/barban-dev/midea_inventor_dehumidifier.svg)](http://hits.dwyl.io/barban-dev/midea_inventor_dehumidifier)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5E7ULVFGCGKU2&source=url)\n\n\nAuthor: Andrea Barbaresi =2018, 2019=\n\nLicence: GPLv3\n\nThis repo contains the python package ***midea_inventor_lib*** that implements a client-side library to connect to the Web API provided by Midea/Inventor, in order to remotely control an **EVA II PRO WiFi Smart Dehumidifier device**.\n\nInfo about the dehumidifier appliance can be found [here.](https://www.inventorappliances.com/dehumidifiers/eva-ii-pro-wi-fi-20l)\n\nYou can buy the smart dehumidifier appliance (WiFi version) on Amazon (the two links below contain my referral code):\n* [Amazon.co.uk](https://www.amazon.co.uk/gp/product/B07665CCSM/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=barban0d-21&creative=6738&linkCode=as2&creativeASIN=B07665CCSM&linkId=a7408b12a09679586e1816acc3c9d74b)\n* [Amazon.it](https://www.amazon.it/gp/product/B075486X31/ref=as_li_tl?ie=UTF8&camp=3414&creative=21718&creativeASIN=B075486X31&linkCode=as2&tag=barban03-21&linkId=33e8ff818aaa4b45f0c320e6661773b2)\n\n\nTarget devices\n--------------\nEven though the library has been designed to generically address any kind of existing MIDEA devices, ***please note that at the moment the implemented functionalities work on the dehumidifier appliance only (0xA1 type devices).***\n\nIf you are interested in developing code that is able to control Midea/Inventor Air Condition systems (0xAC type devices), you can have a look at ***midea-air-condition*** Ruby&Rails library by **Balazs Nadasdi** available [here.](https://github.com/yitsushi/midea-air-condition)\n\n\nPrerequisites\n-------------\nIn order to control the EVA II PRO WiFi Smart Dehumidifier appliance using the provided Python library, first of all it is necessary to download and install the official App, in order to register a valid user to the cloud platform (a valid email address is required). \nThe official companion Apps are available on Google's and Apple's App Stores:\n* [Google Play](https://play.google.com/store/apps/details?id=com.inventor)\n* [Apple Store](https://itunes.apple.com/gr/app/invmate-ii/id1109243423)\n\nOnce connected with valid credentials (i.e. email address and password), your home device has to be added to the list of configured devices using the App (please refer to the manual of the official App to accomplish this task).\n\nOnce having a valid registered user and the home device configured, you can start to use the python library instead of the offical App to control the device via Internet (both the client when the library is installed and the home device should be connected to the Internet).\n\n\nInstallation\n------------\nInstall from PyPi using [pip](http://www.pip-installer.org/en/latest), a package manager for\nPython.\n```\npip install midea-inventor-lib\n```\nDon't have pip installed? Try installing it, by running this from the\ncommand line:\n```\n$ curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python\n```\nOr, you can [download the source code (ZIP)](https://github.com/barban-dev/midea_inventor_dehumidifier/zipball/master) and then run:\n```\npython setup.py install\n```\nYou may need to run the above commands with ``sudo``.\n\n\nGetting started\n---------------\nMinimal steps to use the library in your python code are reported below:\n\n**Step 1: Include the python package**\n```python\nfrom midea_inventor_lib import MideaClient\n```\n**Step 2: Instantiate the MideaClient object**\n\nUsing clear-text password:\n```python\nclient = MideaClient(\"user.example@gmail.com\", \"myPassword\", \"\")\n```\nUsing password's sha-256 hash:\n```python\nclient = MideaClient(\"user.example@gmail.com\", \"\", \"76549b827ec46e705fd03831813fa52172338f0dfcbd711ed44b81a96dac51c6\")\n```\n**Enable logging (optional):**\n\nYou can enable logging by setting the 'verbose' parameter to True (default is False) in the MideaClient constructor. \nSet 'debug' parameter to True in order to log debugging messages too (default is False).\nSet 'logfile' string parameter to a full-path filename in order to make the library log messages into a file instead of using the console (default).\nE.g.:\n```python\n_email = \"user@example.com\"\n_password = \"passwordExample\"\n_sha256password = \"\"\n_verbose = True\t\t#Enable logging\n_debug = False\t\t#Disable debug messages\n_logfile = \"\"\t\t#Log to console (default)\nclient = MideaClient(_email, _password, _sha256password, _debug, _verbose, _logfile)\n```\n**Step 3: Activate a new session by logging in**\n```python\nres = client.login()\nif res == -1:\n  print \"Login error: please check log messages.\"\nelse:\n  sessionId = client.current[\"sessionId\"]\n```\n**Step 4: Get the target deviceId by retrieving the list of configured appliances**\n```python\nappliances = {}\nappliances = client.listAppliances()\nfor a in appliances:\n  print \"[id=\"+a[\"id\"]+\" type=\"+a[\"type\"]+\" name=\"+a[\"name\"]+\"]\"\n```\n**Step 5: Send commands to control the target device**\nGet the device state:\n```python\nres = client.get_device_status(deviceId)\nif res == 1:\n  print client.deviceStatus.toString()\n```\nPower-on:\n```python\nres = client.send_poweron_command(deviceId)\nif res:\n  print client.deviceStatus.toString();\n```\nPower-off:\n```python\nres = client.send_poweroff_command(deviceId)\nif res:\n  print client.deviceStatus.toString();\n```\nSet Ion on:\n```python\nres = client.send_ion_on_command(deviceId)\nif res:\n  print client.deviceStatus.toString();\n```\nSet Ion off:\n```python\nres = client.send_ion_off_command(deviceId)\nif res:\n  print client.deviceStatus.toString();\n```\nSet fan speed:\n```python\nif speed > 0 and speed < 100:\n  res = client.send_fan_speed_command(deviceId, speed)\n  if res:\n    print client.deviceStatus.toString();\n```\nSet target humidity:\n```python\nif hum >= 30 and hum <= 70:\n  res = client.send_target_humidity_command(deviceId, hum)\n  if res:\n    print client.deviceStatus.toString();\n```\nSet operation mode:\n```python\nif mode > 0 and mode < 5:\n  res = client.send_mode_command(deviceId, mode)  #set Mode (1:TARGET_MODE, 2:CONTINOUS_MODE, 3:SMART_MODE, 4:DRYER_MODE)\n  if res:\n    print client.deviceStatus.toString();\n```\nSet updated status (usefull to update multiple attributes at one):\n```python\nstatus =client.get_device_status(deviceId)  #get current status\n#Update status\nstatus.ionSetSwitch = 1   #Ion on\nstatus.setMode = 1        #target-mode\nres = self._client.send_update_status_command(self._device[\"id\"], status)\nif res:\n  print client.deviceStatus.toString();\n```\n\nClient example\n--------------\nThis repo also contains a fully working client (***dehumi_control.py***) that demonstrates how to use the ***midea_inventor_lib*** library in order to control the EVA II PRO WiFi Smart Dehumidifier appliance via a Command Line Interface.\n\nTo use the client, the email address of a registered user and the associated password have to be provided via command line parameters (either clear-text password or password's sha-256 hash has to be provided using the '-p' or '-s' options):\n```\n# python dehumi_control.py  -h\nUsage:dehumi_control.py -e <email_address> -p <cleartext password> -s <sha256_password> -l <logfile> [-h] [-v] [-d]\n```\n\nHome Assistant custom-component\n-------------------------------\n***[NEW]*** Custom-component for the Home Assistant platform can be found on ``/homeassistant`` folder.\nIn order to activate the component, follow these steps:\n\n**Step 1: Copy necessary files to your HA's configuration shared folder** \n\nCopy ***the content of*** ``/homeassistant`` folder (***not the folder itself***), ***including subfolders***, on your HA's configuration shared folder.\n\nCopy ``/midea_inventor_lib`` folder on ``\\deps\\lib\\python3.6\\site-packages\\`` of your HA's configuration shared folder.\n\nFinal result should look similar to this:\n```\n\\\\<ha_ip_address>\n    \u2514\u2500\u2500 config\n        \u251c\u2500\u2500 custom_components\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 climate\n        \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 midea_dehumi.py\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 midea_dehumi.py\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 sensor\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 midea_dehumi.py\n        \u2514\u2500\u2500 deps\n            \u2514\u2500\u2500 lib\n                \u2514\u2500\u2500 python3.6\n                    \u2514\u2500\u2500 site-packages\n                        \u2514\u2500\u2500 midea_inventor_lib\n                            \u2514\u2500\u2500 libfiles...\n```\n\n**Step 2: Activate midea_dehumi platform on your HA's configuration file**\n\nAdd the following section in your ``configuration.yaml``\n```\nmidea_dehumi:\n  username: user@example.com\n  password: passwordExample\n```\nAs usual, you can hide your secret password by means of ``!secret`` notation by specifing it in ``secrets.yaml``\n\nAlternatively, if you prefer, ``sha256password`` parameter can be used instead of the ``password`` one to specify password's sha-256 hash\n```\nmidea_dehumi:\n  username: user@example.com\n  sha256password: cf76d55503cdee3....\n```\n**Step 3: Activate DEBUG-level logging (optional)**\n\nIt is highly suggested to activate DEBUG-level logging for the three components the midea_dehumi platform consists of. This let you perform troubleshooting analysis if the component doesn't work as expected.\n```\nlogger:\n  default: info\n  logs:\n    custom_components.midea_dehumi: debug\n    custom_components.climate.midea_dehumi: debug\n    custom_components.sensor.midea_dehumi: debug\n```\n** Step 4: Restart HA**\n\nYou can restart HA by using one of your preferred method (e.g. using reboot button on Settings>General>Server Management og HA's Web dashboard).\n\nIf everything is ok, you will find the following two new entities in your HA dashboard:\n\n* **climate.midea_dehumi_*[Device_ID]***\n* **sensor.midea_dehumi_*[Device_ID]*_humidity**\n\nBy means of the climate entity, you can control your appliance whereas the sensor reports the detected current humidity of your environment.\n\nIf you cannot find the entities reported above, check the logs generated by HA to track the issue.\n\nInternals \n---------\n***You can skip this part if you are not interested in technical details concerning the format of the API messages used by the library.***\n\nOfficial companion Apps for Android and IOS platforms are based on the midea-SDKs made available by Midea Smart Technology Co., Ltd.:\n* [ios-sdk](https://github.com/midea-sdk-org/ios-sdk)\n* [android-sdk](https://github.com/midea-sdk-org/android-sdk)\n\nAccording to the SDK's documentation, \"MideaSDK is a software develop kit maintained by MSmart. You can develop your own APP, Smart Hardware or Smart TV based on this SDK to control the smart appliances produced by Midea.\"\n\nOfficial documentation for the open API can be found here (chinese language only):\nhttps://github.com/midea-sdk/midea-sdk.github.io/tree/master/api\n\nApart Androd and IOS platforms, no other environment is currently officially supported. In order to develop the client-side library for all the platform supporting Python, I used a Man-In-The-Middle Web Proxy as a packet sniffer to understand the basics on the API messages exchanged between the offical Android client and the Midea cloud Server.\n\nWeb API server can be reached via ```https://mapp-appsmb.com/<endpoint>``` (POST web requests shoud be used).\n\nA brief description of the most relevant endpoints follows:\n\n```/v1/user/login/id/get``` endpoint with 'loginAccount' parameter is used to get 'loginId' parameter (different for each session).\n\n```/v1/user/login``` endpoint with 'password' parameter is used to perform the login ('accessToken' and 'sessionId' parameters are returned). The password parameter sent by the client is SHA-256 hash of a string derived from 'loginId', 'password' and 'appKey' parameters.\n\n```/v1/appliance/user/list/get``` endpoint is used to retrieve the list of configured devices together withh all the associated parameters ('name', 'modelNumber', 'activeStaus', 'onlineStatus', etc.)\n\n```/v1/appliance/transparent/send``` endpoint with the 'order' parameter is used to control the home device (the 'reply' parameter is returned). Both the 'order' and 'reply' parameters are AES encryted; the encryption/decryption key used by AES is derived from the 'APP_key' parameter (constant string) and the 'accessToken' parameter returned when logging in. The revelant part of code used for the encription and decryption tasks can be found in the **MideaSecurity** class in **midea_security.py** file.\n\nFor Further Studies (FFS)\n-------------------------\nAt the moment, the client-side Python library can control a dehumidifier appliance by sending API messages to the cloud Server that talks to the home device. Both the client and the home device need Internet access in this cloud-to-cloud scenario. \nThe possibility to control the home device locally (i.e. the possibility to let the client to send API messagges directly to the home device) when both the client and the home device are associated to the same WiFi network is FFS.\n\nHow to contribute\n-----------------\nIf you can code in Python and you are interested in improving and expanding this work, feel free to clone this repo. Drop me a line if you wish to merge your modifications in my repo too.\n\nDisclaimer\n----------\nBesides owning an EVA II PRO WiFi device, I have no connection with Midea/Inventor company. This library was developed for my own personal use and shared to other people interested on Internet of Things systems and domotic platforms. This software is provided as is, without any warranty, according to the GNU Public Licence version 3.\n\nDonations\n---------\nIf this project helps you to reduce time to develop your code, you can make me a donation.\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5E7ULVFGCGKU2&source=url)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/barban-dev/midea_inventor_dehumidifier", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "midea-inventor-lib", "package_url": "https://pypi.org/project/midea-inventor-lib/", "platform": "", "project_url": "https://pypi.org/project/midea-inventor-lib/", "project_urls": {"Homepage": "https://github.com/barban-dev/midea_inventor_dehumidifier"}, "release_url": "https://pypi.org/project/midea-inventor-lib/1.0.4/", "requires_dist": ["requests (>=2.16.0)", "pycryptodome (>=3.6.6)"], "requires_python": "", "summary": "Client-side Python library for EVA II PRO WiFi Smart Dehumidifier appliance by Midea/Inventor.", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Library for EVA II PRO WiFi Smart Dehumidifier appliance</h1>\n<p><a href=\"https://pypi.org/project/midea-inventor-lib/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e92a8634a9301bad2734ff1262916ce88ee56cd3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d696465612d696e76656e746f722d6c69622e737667\"></a>\n<a href=\"https://pypi.org/project/midea-inventor-lib/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a780ed27502529e6191eea1c8fdd620299dc874/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d696465612d696e76656e746f722d6c69622e737667\"></a>\n<a href=\"https://pypi.org/project/midea-inventor-lib/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de8e364e992a421de139f53db6887aa2b139beb0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d696465612d696e76656e746f722d6c69622e737667\"></a>\n<a href=\"https://pypi.org/pypi/midea-inventor-lib/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95b6260aef1d088a8fbc11be269f43893282b680/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f6d696465612d696e76656e746f722d6c69622e737667\"></a>\n<a href=\"https://pypi.org/pypi/midea-inventor-lib/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46be989c0642905ec39737f8c965a5658047bcf4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6d696465612d696e76656e746f722d6c69622e737667\"></a>\n<a href=\"https://pypi.org/pypi/midea-inventor-lib/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39d5cbe7ed780218d66c1666cdf37e6fd9bee442/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f6d696465612d696e76656e746f722d6c69622e737667\"></a>\n<a href=\"https://github.com/barban-dev/midea_inventor_dehumidifier\" rel=\"nofollow\"><img alt=\"&lt;100kB\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/139b25071e01308eff1ac6f8acac4ffb968349a0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f636f64652d73697a652f62617262616e2d6465762f6d696465615f696e76656e746f725f646568756d696469666965722e737667\"></a>\n<a href=\"https://github.com/barban-dev/midea_inventor_dehumidifier\" rel=\"nofollow\"><img alt=\"&lt;100kB\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd1d65eef111956eaa976ad7e71c6c4744b728a5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f62617262616e2d6465762f6d696465615f696e76656e746f725f646568756d696469666965722e737667\"></a>\n<a href=\"https://travis-ci.com/barban-dev/midea_inventor_dehumidifier\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c75f3ada0bc32acf7295936aae7be10eeb07b65/68747470733a2f2f7472617669732d63692e636f6d2f62617262616e2d6465762f6d696465615f696e76656e746f725f646568756d696469666965722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://snyk.io/test/github/barban-dev/midea_inventor_dehumidifier?targetFile=requirements.txt\" rel=\"nofollow\"><img alt=\"Known Vulnerabilities\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bed888fabeb1b858f56aa209fbb620ff7abad9c3/68747470733a2f2f736e796b2e696f2f746573742f6769746875622f62617262616e2d6465762f6d696465615f696e76656e746f725f646568756d696469666965722f62616467652e7376673f74617267657446696c653d726571756972656d656e74732e747874\"></a>\n<a href=\"http://hits.dwyl.io/barban-dev/midea_inventor_dehumidifier\" rel=\"nofollow\"><img alt=\"HitCount\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9679f65c8c2dfec4f835ccbb1dedf9488476830b/687474703a2f2f686974732e6477796c2e696f2f62617262616e2d6465762f6d696465615f696e76656e746f725f646568756d696469666965722e737667\"></a>\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=5E7ULVFGCGKU2&amp;source=url\" rel=\"nofollow\"><img alt=\"Donate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c6b48d4ac9b582dbc400aa2bd53b809f2f2b394/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d677265656e2e737667\"></a></p>\n<p>Author: Andrea Barbaresi =2018, 2019=</p>\n<p>Licence: GPLv3</p>\n<p>This repo contains the python package <em><strong>midea_inventor_lib</strong></em> that implements a client-side library to connect to the Web API provided by Midea/Inventor, in order to remotely control an <strong>EVA II PRO WiFi Smart Dehumidifier device</strong>.</p>\n<p>Info about the dehumidifier appliance can be found <a href=\"https://www.inventorappliances.com/dehumidifiers/eva-ii-pro-wi-fi-20l\" rel=\"nofollow\">here.</a></p>\n<p>You can buy the smart dehumidifier appliance (WiFi version) on Amazon (the two links below contain my referral code):</p>\n<ul>\n<li><a href=\"https://www.amazon.co.uk/gp/product/B07665CCSM/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=barban0d-21&amp;creative=6738&amp;linkCode=as2&amp;creativeASIN=B07665CCSM&amp;linkId=a7408b12a09679586e1816acc3c9d74b\" rel=\"nofollow\">Amazon.co.uk</a></li>\n<li><a href=\"https://www.amazon.it/gp/product/B075486X31/ref=as_li_tl?ie=UTF8&amp;camp=3414&amp;creative=21718&amp;creativeASIN=B075486X31&amp;linkCode=as2&amp;tag=barban03-21&amp;linkId=33e8ff818aaa4b45f0c320e6661773b2\" rel=\"nofollow\">Amazon.it</a></li>\n</ul>\n<h2>Target devices</h2>\n<p>Even though the library has been designed to generically address any kind of existing MIDEA devices, <em><strong>please note that at the moment the implemented functionalities work on the dehumidifier appliance only (0xA1 type devices).</strong></em></p>\n<p>If you are interested in developing code that is able to control Midea/Inventor Air Condition systems (0xAC type devices), you can have a look at <em><strong>midea-air-condition</strong></em> Ruby&amp;Rails library by <strong>Balazs Nadasdi</strong> available <a href=\"https://github.com/yitsushi/midea-air-condition\" rel=\"nofollow\">here.</a></p>\n<h2>Prerequisites</h2>\n<p>In order to control the EVA II PRO WiFi Smart Dehumidifier appliance using the provided Python library, first of all it is necessary to download and install the official App, in order to register a valid user to the cloud platform (a valid email address is required).\nThe official companion Apps are available on Google's and Apple's App Stores:</p>\n<ul>\n<li><a href=\"https://play.google.com/store/apps/details?id=com.inventor\" rel=\"nofollow\">Google Play</a></li>\n<li><a href=\"https://itunes.apple.com/gr/app/invmate-ii/id1109243423\" rel=\"nofollow\">Apple Store</a></li>\n</ul>\n<p>Once connected with valid credentials (i.e. email address and password), your home device has to be added to the list of configured devices using the App (please refer to the manual of the official App to accomplish this task).</p>\n<p>Once having a valid registered user and the home device configured, you can start to use the python library instead of the offical App to control the device via Internet (both the client when the library is installed and the home device should be connected to the Internet).</p>\n<h2>Installation</h2>\n<p>Install from PyPi using <a href=\"http://www.pip-installer.org/en/latest\" rel=\"nofollow\">pip</a>, a package manager for\nPython.</p>\n<pre><code>pip install midea-inventor-lib\n</code></pre>\n<p>Don't have pip installed? Try installing it, by running this from the\ncommand line:</p>\n<pre><code>$ curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python\n</code></pre>\n<p>Or, you can <a href=\"https://github.com/barban-dev/midea_inventor_dehumidifier/zipball/master\" rel=\"nofollow\">download the source code (ZIP)</a> and then run:</p>\n<pre><code>python setup.py install\n</code></pre>\n<p>You may need to run the above commands with <code>sudo</code>.</p>\n<h2>Getting started</h2>\n<p>Minimal steps to use the library in your python code are reported below:</p>\n<p><strong>Step 1: Include the python package</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">midea_inventor_lib</span> <span class=\"kn\">import</span> <span class=\"n\">MideaClient</span>\n</pre>\n<p><strong>Step 2: Instantiate the MideaClient object</strong></p>\n<p>Using clear-text password:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MideaClient</span><span class=\"p\">(</span><span class=\"s2\">\"user.example@gmail.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myPassword\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n</pre>\n<p>Using password's sha-256 hash:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MideaClient</span><span class=\"p\">(</span><span class=\"s2\">\"user.example@gmail.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"s2\">\"76549b827ec46e705fd03831813fa52172338f0dfcbd711ed44b81a96dac51c6\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Enable logging (optional):</strong></p>\n<p>You can enable logging by setting the 'verbose' parameter to True (default is False) in the MideaClient constructor.\nSet 'debug' parameter to True in order to log debugging messages too (default is False).\nSet 'logfile' string parameter to a full-path filename in order to make the library log messages into a file instead of using the console (default).\nE.g.:</p>\n<pre><span class=\"n\">_email</span> <span class=\"o\">=</span> <span class=\"s2\">\"user@example.com\"</span>\n<span class=\"n\">_password</span> <span class=\"o\">=</span> <span class=\"s2\">\"passwordExample\"</span>\n<span class=\"n\">_sha256password</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n<span class=\"n\">_verbose</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\t\t<span class=\"c1\">#Enable logging</span>\n<span class=\"n\">_debug</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\t\t<span class=\"c1\">#Disable debug messages</span>\n<span class=\"n\">_logfile</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\t\t<span class=\"c1\">#Log to console (default)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MideaClient</span><span class=\"p\">(</span><span class=\"n\">_email</span><span class=\"p\">,</span> <span class=\"n\">_password</span><span class=\"p\">,</span> <span class=\"n\">_sha256password</span><span class=\"p\">,</span> <span class=\"n\">_debug</span><span class=\"p\">,</span> <span class=\"n\">_verbose</span><span class=\"p\">,</span> <span class=\"n\">_logfile</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Step 3: Activate a new session by logging in</strong></p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span> <span class=\"s2\">\"Login error: please check log messages.\"</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n  <span class=\"n\">sessionId</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"s2\">\"sessionId\"</span><span class=\"p\">]</span>\n</pre>\n<p><strong>Step 4: Get the target deviceId by retrieving the list of configured appliances</strong></p>\n<pre><span class=\"n\">appliances</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">appliances</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">listAppliances</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">appliances</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span> <span class=\"s2\">\"[id=\"</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"s2\">\" type=\"</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"s2\">\" name=\"</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"s2\">\"]\"</span>\n</pre>\n<p><strong>Step 5: Send commands to control the target device</strong>\nGet the device state:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_device_status</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">()</span>\n</pre>\n<p>Power-on:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_poweron_command</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">();</span>\n</pre>\n<p>Power-off:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_poweroff_command</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">();</span>\n</pre>\n<p>Set Ion on:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_ion_on_command</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">();</span>\n</pre>\n<p>Set Ion off:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_ion_off_command</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">();</span>\n</pre>\n<p>Set fan speed:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">speed</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">speed</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_fan_speed_command</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">,</span> <span class=\"n\">speed</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">();</span>\n</pre>\n<p>Set target humidity:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">hum</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">30</span> <span class=\"ow\">and</span> <span class=\"n\">hum</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">70</span><span class=\"p\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_target_humidity_command</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">,</span> <span class=\"n\">hum</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">();</span>\n</pre>\n<p>Set operation mode:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">mode</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_mode_command</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>  <span class=\"c1\">#set Mode (1:TARGET_MODE, 2:CONTINOUS_MODE, 3:SMART_MODE, 4:DRYER_MODE)</span>\n  <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">();</span>\n</pre>\n<p>Set updated status (usefull to update multiple attributes at one):</p>\n<pre><span class=\"n\">status</span> <span class=\"o\">=</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_device_status</span><span class=\"p\">(</span><span class=\"n\">deviceId</span><span class=\"p\">)</span>  <span class=\"c1\">#get current status</span>\n<span class=\"c1\">#Update status</span>\n<span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">ionSetSwitch</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>   <span class=\"c1\">#Ion on</span>\n<span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">setMode</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>        <span class=\"c1\">#target-mode</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">send_update_status_command</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">deviceStatus</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"p\">();</span>\n</pre>\n<h2>Client example</h2>\n<p>This repo also contains a fully working client (<em><strong>dehumi_control.py</strong></em>) that demonstrates how to use the <em><strong>midea_inventor_lib</strong></em> library in order to control the EVA II PRO WiFi Smart Dehumidifier appliance via a Command Line Interface.</p>\n<p>To use the client, the email address of a registered user and the associated password have to be provided via command line parameters (either clear-text password or password's sha-256 hash has to be provided using the '-p' or '-s' options):</p>\n<pre><code># python dehumi_control.py  -h\nUsage:dehumi_control.py -e &lt;email_address&gt; -p &lt;cleartext password&gt; -s &lt;sha256_password&gt; -l &lt;logfile&gt; [-h] [-v] [-d]\n</code></pre>\n<h2>Home Assistant custom-component</h2>\n<p><em><strong>[NEW]</strong></em> Custom-component for the Home Assistant platform can be found on <code>/homeassistant</code> folder.\nIn order to activate the component, follow these steps:</p>\n<p><strong>Step 1: Copy necessary files to your HA's configuration shared folder</strong></p>\n<p>Copy <em><strong>the content of</strong></em> <code>/homeassistant</code> folder (<em><strong>not the folder itself</strong></em>), <em><strong>including subfolders</strong></em>, on your HA's configuration shared folder.</p>\n<p>Copy <code>/midea_inventor_lib</code> folder on <code>\\deps\\lib\\python3.6\\site-packages\\</code> of your HA's configuration shared folder.</p>\n<p>Final result should look similar to this:</p>\n<pre><code>\\\\&lt;ha_ip_address&gt;\n    \u2514\u2500\u2500 config\n        \u251c\u2500\u2500 custom_components\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 climate\n        \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 midea_dehumi.py\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 midea_dehumi.py\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 sensor\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 midea_dehumi.py\n        \u2514\u2500\u2500 deps\n            \u2514\u2500\u2500 lib\n                \u2514\u2500\u2500 python3.6\n                    \u2514\u2500\u2500 site-packages\n                        \u2514\u2500\u2500 midea_inventor_lib\n                            \u2514\u2500\u2500 libfiles...\n</code></pre>\n<p><strong>Step 2: Activate midea_dehumi platform on your HA's configuration file</strong></p>\n<p>Add the following section in your <code>configuration.yaml</code></p>\n<pre><code>midea_dehumi:\n  username: user@example.com\n  password: passwordExample\n</code></pre>\n<p>As usual, you can hide your secret password by means of <code>!secret</code> notation by specifing it in <code>secrets.yaml</code></p>\n<p>Alternatively, if you prefer, <code>sha256password</code> parameter can be used instead of the <code>password</code> one to specify password's sha-256 hash</p>\n<pre><code>midea_dehumi:\n  username: user@example.com\n  sha256password: cf76d55503cdee3....\n</code></pre>\n<p><strong>Step 3: Activate DEBUG-level logging (optional)</strong></p>\n<p>It is highly suggested to activate DEBUG-level logging for the three components the midea_dehumi platform consists of. This let you perform troubleshooting analysis if the component doesn't work as expected.</p>\n<pre><code>logger:\n  default: info\n  logs:\n    custom_components.midea_dehumi: debug\n    custom_components.climate.midea_dehumi: debug\n    custom_components.sensor.midea_dehumi: debug\n</code></pre>\n<p>** Step 4: Restart HA**</p>\n<p>You can restart HA by using one of your preferred method (e.g. using reboot button on Settings&gt;General&gt;Server Management og HA's Web dashboard).</p>\n<p>If everything is ok, you will find the following two new entities in your HA dashboard:</p>\n<ul>\n<li><strong>climate.midea_dehumi_<em>[Device_ID]</em></strong></li>\n<li><strong>sensor.midea_dehumi_<em>[Device_ID]</em>_humidity</strong></li>\n</ul>\n<p>By means of the climate entity, you can control your appliance whereas the sensor reports the detected current humidity of your environment.</p>\n<p>If you cannot find the entities reported above, check the logs generated by HA to track the issue.</p>\n<h2>Internals</h2>\n<p><em><strong>You can skip this part if you are not interested in technical details concerning the format of the API messages used by the library.</strong></em></p>\n<p>Official companion Apps for Android and IOS platforms are based on the midea-SDKs made available by Midea Smart Technology Co., Ltd.:</p>\n<ul>\n<li><a href=\"https://github.com/midea-sdk-org/ios-sdk\" rel=\"nofollow\">ios-sdk</a></li>\n<li><a href=\"https://github.com/midea-sdk-org/android-sdk\" rel=\"nofollow\">android-sdk</a></li>\n</ul>\n<p>According to the SDK's documentation, \"MideaSDK is a software develop kit maintained by MSmart. You can develop your own APP, Smart Hardware or Smart TV based on this SDK to control the smart appliances produced by Midea.\"</p>\n<p>Official documentation for the open API can be found here (chinese language only):\n<a href=\"https://github.com/midea-sdk/midea-sdk.github.io/tree/master/api\" rel=\"nofollow\">https://github.com/midea-sdk/midea-sdk.github.io/tree/master/api</a></p>\n<p>Apart Androd and IOS platforms, no other environment is currently officially supported. In order to develop the client-side library for all the platform supporting Python, I used a Man-In-The-Middle Web Proxy as a packet sniffer to understand the basics on the API messages exchanged between the offical Android client and the Midea cloud Server.</p>\n<p>Web API server can be reached via <code>https://mapp-appsmb.com/&lt;endpoint&gt;</code> (POST web requests shoud be used).</p>\n<p>A brief description of the most relevant endpoints follows:</p>\n<p><code>/v1/user/login/id/get</code> endpoint with 'loginAccount' parameter is used to get 'loginId' parameter (different for each session).</p>\n<p><code>/v1/user/login</code> endpoint with 'password' parameter is used to perform the login ('accessToken' and 'sessionId' parameters are returned). The password parameter sent by the client is SHA-256 hash of a string derived from 'loginId', 'password' and 'appKey' parameters.</p>\n<p><code>/v1/appliance/user/list/get</code> endpoint is used to retrieve the list of configured devices together withh all the associated parameters ('name', 'modelNumber', 'activeStaus', 'onlineStatus', etc.)</p>\n<p><code>/v1/appliance/transparent/send</code> endpoint with the 'order' parameter is used to control the home device (the 'reply' parameter is returned). Both the 'order' and 'reply' parameters are AES encryted; the encryption/decryption key used by AES is derived from the 'APP_key' parameter (constant string) and the 'accessToken' parameter returned when logging in. The revelant part of code used for the encription and decryption tasks can be found in the <strong>MideaSecurity</strong> class in <strong>midea_security.py</strong> file.</p>\n<h2>For Further Studies (FFS)</h2>\n<p>At the moment, the client-side Python library can control a dehumidifier appliance by sending API messages to the cloud Server that talks to the home device. Both the client and the home device need Internet access in this cloud-to-cloud scenario.\nThe possibility to control the home device locally (i.e. the possibility to let the client to send API messagges directly to the home device) when both the client and the home device are associated to the same WiFi network is FFS.</p>\n<h2>How to contribute</h2>\n<p>If you can code in Python and you are interested in improving and expanding this work, feel free to clone this repo. Drop me a line if you wish to merge your modifications in my repo too.</p>\n<h2>Disclaimer</h2>\n<p>Besides owning an EVA II PRO WiFi device, I have no connection with Midea/Inventor company. This library was developed for my own personal use and shared to other people interested on Internet of Things systems and domotic platforms. This software is provided as is, without any warranty, according to the GNU Public Licence version 3.</p>\n<h2>Donations</h2>\n<p>If this project helps you to reduce time to develop your code, you can make me a donation.</p>\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=5E7ULVFGCGKU2&amp;source=url\" rel=\"nofollow\"><img alt=\"paypal\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac49730821d272ac3a4d4e7608ed886a10858e1b/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e61746543435f4c472e676966\"></a></p>\n\n          </div>"}, "last_serial": 4665869, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "007d8207e021663918b097e7306b66c4", "sha256": "642d35abd81e75b02c5f0c245a9021f9d9db53cae7dca6d70684f3ef0c1c45e1"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "007d8207e021663918b097e7306b66c4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30240, "upload_time": "2018-12-28T00:12:39", "upload_time_iso_8601": "2018-12-28T00:12:39.999982Z", "url": "https://files.pythonhosted.org/packages/11/68/3cb4ce7255ef96f12071d611ce437e11f82b2c1e532aa0f2b90b20c252d1/midea_inventor_lib-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c7724997aadffcc2a2b65b12c51ab0f", "sha256": "d0ab03daf7647faf6e838619c52deb369c9557d1062acdf5e6527486d686edfd"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8c7724997aadffcc2a2b65b12c51ab0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14521, "upload_time": "2018-12-28T00:12:42", "upload_time_iso_8601": "2018-12-28T00:12:42.125480Z", "url": "https://files.pythonhosted.org/packages/22/b8/9d2567245137da68ac835930fefd96d7181c90cd52532946ef80b0c57b4c/midea_inventor_lib-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "1931102d3422000900bbc22f17966090", "sha256": "2683bf53fc7e3587f1e0dd343871f30677325e9be56402d2ef2f45d86e71c1be"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "1931102d3422000900bbc22f17966090", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30245, "upload_time": "2018-12-28T00:34:09", "upload_time_iso_8601": "2018-12-28T00:34:09.099215Z", "url": "https://files.pythonhosted.org/packages/06/0a/de660fd9bc04a975515a8d3fff5851e6613faea5f2b586e7a2a97610d178/midea_inventor_lib-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "734f47dbecfc7ae24961fdba0797ac9c", "sha256": "913ad2dabba1164bca7f97e0338e88702562958ae2156736d57844954f2590da"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.1.tar.gz", "has_sig": false, "md5_digest": "734f47dbecfc7ae24961fdba0797ac9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14555, "upload_time": "2018-12-28T00:34:10", "upload_time_iso_8601": "2018-12-28T00:34:10.656652Z", "url": "https://files.pythonhosted.org/packages/49/85/3981d59ad4b1e082b4cecb1ddc43247fbf4b072a981ae418b6d58b5a12e1/midea_inventor_lib-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "7b946c6c5f14db59da75213f07fe245f", "sha256": "031932d2e35b35b99a415a2a47b561c038ad50f69cbd830a4a42cc7c4dd9f3c2"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "7b946c6c5f14db59da75213f07fe245f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30959, "upload_time": "2018-12-29T16:07:59", "upload_time_iso_8601": "2018-12-29T16:07:59.617760Z", "url": "https://files.pythonhosted.org/packages/4e/64/d88b9b5f429d4dab44d7d6a7545051de418fb8348e87d5ed8c053883ad82/midea_inventor_lib-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff657b1bba5276c62b96e9f7484023d2", "sha256": "abf924de3bf4c96575cb8fee63e7cf5de630d2efa8eda2be2e92a1f156c6694b"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ff657b1bba5276c62b96e9f7484023d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15489, "upload_time": "2018-12-29T16:08:01", "upload_time_iso_8601": "2018-12-29T16:08:01.641606Z", "url": "https://files.pythonhosted.org/packages/72/e4/de9c604231da94cbc413a1c002f7a51129ca92de1fe5e111fd7703031e3e/midea_inventor_lib-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "efb6c7cf6afbb901d4008a13c640c3fa", "sha256": "45db24d3d3f6b9f252bf5389ec81753f47c1e84929f449fdec9a845d8d1f6135"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "efb6c7cf6afbb901d4008a13c640c3fa", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 31648, "upload_time": "2018-12-30T21:34:11", "upload_time_iso_8601": "2018-12-30T21:34:11.143558Z", "url": "https://files.pythonhosted.org/packages/ba/cb/db7275b8bef559dcad0a8a8d84c923851058365c70fbfd5c613448078d47/midea_inventor_lib-1.0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50978db48b3e390f1394c2ebaef0b1be", "sha256": "a1e46c0a8cdd1b2d584a9416a35c62ccbed986d7a13c89f26403920391ea168a"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.3.tar.gz", "has_sig": false, "md5_digest": "50978db48b3e390f1394c2ebaef0b1be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16214, "upload_time": "2018-12-30T21:34:12", "upload_time_iso_8601": "2018-12-30T21:34:12.901138Z", "url": "https://files.pythonhosted.org/packages/be/7a/4bb3c8703607fd60894b7d5930589fccbc600b9c8fd76f88eb56225c4c4a/midea_inventor_lib-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "f77e804e0a043ecc656d98143ec07264", "sha256": "075edf980469a501608fa6ec69160945c7630a26485354f7e5e12ac2795105bd"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "f77e804e0a043ecc656d98143ec07264", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 32919, "upload_time": "2019-01-06T15:26:55", "upload_time_iso_8601": "2019-01-06T15:26:55.923024Z", "url": "https://files.pythonhosted.org/packages/d9/96/c03956a3a55450bdf870e5da1cbd7d5e232dd6fb7100fb065b981f0a46fa/midea_inventor_lib-1.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "713d36ef200b8bb23f0dd54f15c0cab3", "sha256": "9369d3946aa7c98f5dd74709bd756256e142f0d11f0751a781919bb206b0b755"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.4.tar.gz", "has_sig": false, "md5_digest": "713d36ef200b8bb23f0dd54f15c0cab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17784, "upload_time": "2019-01-06T15:26:57", "upload_time_iso_8601": "2019-01-06T15:26:57.789481Z", "url": "https://files.pythonhosted.org/packages/94/aa/ce419514c4e768fb96e63f45ae773b99f7fa4f631649f1d76be300e45ca3/midea_inventor_lib-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f77e804e0a043ecc656d98143ec07264", "sha256": "075edf980469a501608fa6ec69160945c7630a26485354f7e5e12ac2795105bd"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "f77e804e0a043ecc656d98143ec07264", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 32919, "upload_time": "2019-01-06T15:26:55", "upload_time_iso_8601": "2019-01-06T15:26:55.923024Z", "url": "https://files.pythonhosted.org/packages/d9/96/c03956a3a55450bdf870e5da1cbd7d5e232dd6fb7100fb065b981f0a46fa/midea_inventor_lib-1.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "713d36ef200b8bb23f0dd54f15c0cab3", "sha256": "9369d3946aa7c98f5dd74709bd756256e142f0d11f0751a781919bb206b0b755"}, "downloads": -1, "filename": "midea_inventor_lib-1.0.4.tar.gz", "has_sig": false, "md5_digest": "713d36ef200b8bb23f0dd54f15c0cab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17784, "upload_time": "2019-01-06T15:26:57", "upload_time_iso_8601": "2019-01-06T15:26:57.789481Z", "url": "https://files.pythonhosted.org/packages/94/aa/ce419514c4e768fb96e63f45ae773b99f7fa4f631649f1d76be300e45ca3/midea_inventor_lib-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:51 2020"}