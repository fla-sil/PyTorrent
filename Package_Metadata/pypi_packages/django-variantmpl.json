{"info": {"author": "tell-k", "author_email": "ffk2005@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "We often want to render different HTML templates for phones, tablets, and desktop browsers. Or for AB testing. ``django-variatmpl``  make it easy. By setting ``request.variant``, you can render the template according to that ``request.variant``. This library is heavily inspired by `Action Pack Variants <http://guides.rubyonrails.org/4_1_release_notes.html#action-pack-variants>`_.\n\n\n|travis| |coveralls| |version| |license|\n\nQuick start\n=============\n\n1. Install ``django-variantmpl``\n\n.. code-block:: bash\n\n $ pip install django-variantmpl\n\n2. Change ``django.shortcuts.render`` to ``variantmpl.shortcuts.render`` in your views.\n\n* And set ``request.variant`` property.\n\n.. code-block:: python\n\n # views.py --\n\n # from django.shortcuts import render\n from variantmpl.shortcuts import render # <- add\n\n def sample(request):\n\n     # Set variant value\n     request.variant = 'v2'\n\n     return render(request, 'index.html')\n\n3. Prepare variant templates.\n\n.. code-block:: bash\n\n $ echo 'sample v1' > templates/index.html\n $ echo 'sample v2' > templates/index+v2.html\n\n4. Confirm ``views.sample`` display in  your browser.\n\n* You can see **sample v2**. \n* It is the result of loading the template(``index+v2.html``) based on ``request.variant``.\n\nFeatures\n=========\n\nrender\n--------\n\nUse instead of ``django.shortcuts.render``.\n\n.. code-block:: python\n\n # views.py --\n\n from variantmpl.shortcuts import render\n\n def sample(request):\n     request.variant = 'v2'\n\n     # Actually \"index+v2.html\" is rendered\n     return render(request, 'index.html')\n\n\nrender_to_response\n--------------------\n\nUse instead of ``django.shortcuts.render_to_response``.\n\n.. code-block:: python\n\n # views.py --\n\n from variantmpl.shortcuts import render_to_response\n\n def sample(request):\n\n     # Actually \"index+v2.html\" is rendered\n     return render_to_response(request, 'index.html', variant='v2')\n\nYou can set ``variant`` as a keyword argument.\n\nrender_to_string\n--------------------\n\nUse instead of ``django.template.loader.render_to_string``.\n\n.. code-block:: python\n\n # views.py --\n\n from django.http import HttpResponse\n\n from variantmpl.template.loader import render_to_string\n\n def sample(request):\n     request.variant = 'v2'\n\n     # Actually \"index+v2.html\" is rendered\n     content = render_to_string('index.html', request=request)\n     return HttpResponse(content)\n\n\nTemplateResponse\n--------------------\n\nUse instead of ``django.template.response.TemplateResponse``.\n\n.. code-block:: python\n\n # views.py --\n\n from django.views.generic import TemplateView\n from variantmpl.template.response import TemplateResponse\n\n class SampleView(TemplateView):\n     template_name = 'sample/index.html'\n     response_class = TemplateResponse # Replace response class\n\n     def get(self, request, **kwargs):\n         request.variant = 'v2'\n\n         # Actually \"index+v2.html\" is rendered\n         return super().get(request, **kwargs)\n\n sample = SampleView.as_view()\n\nMonkey patching Django's functions/classes\n-----------------------------------------------\n\nIt is difficult to rewrite all code with large codes already to ``variantmpl`` code. In such a case, you can apply Monkey patch to Django's functions/classes.\n\n**Caution** : This feature is experimental. This may be deleted in the future if unexpected bad effects occur.\n\n.. code-block:: python\n\n # settings.py --\n\n SECRET_KEY = 'xxxxxx'\n\n # You must write this code below SECRET_KEY.\n from variantmpl import monkey\n monkey.patch_all()\n\n.. code-block:: python\n\n # views.py --\n\n # You don't need to replace to 'variantmpl'.\n from django.shortcuts import render\n\n def sample(request):\n     request.variant = 'v2'\n\n     # Actually \"index+v2.html\" is rendered\n     return render(request, 'index.html')\n\nAll targets for monkey patching.\n\n.. code-block::\n\n django.shortcuts.render\n django.shortcuts.render_to_response\n django.template.loader.render_to_string\n django.template.response.TemplateResponse.resolve_template\n\n They are replaced by the functions/methods of the same name in `variantmpl`.\n\n\nConfiguration\n===============\n\nVARIANTMPL_VARIANT_FORMAT\n-----------------------------------\n\nYou can change ``variant`` format. default: ``+variant``.\n\n.. code-block:: python\n\n # settings.py --\n VARIANTMPL_VARIANT_FORMAT = '@{variant}'\n\n::\n\n # The lookup target template name changes as follows.\n\n \"index+variant.html\" -> \"index@variant.html\"\n\n\nVARIANTMPL_PROPERTY_NAME\n-----------------------------------\n\nYou can rename ``request.variant`` property.\n\n.. code-block:: python\n\n # settings.py --\n VARIANTMPL_PROPERTY_NAME = 'mutation'\n\n.. code-block:: python\n\n # You can set 'mutation' instead of 'varaiant'\n request.mutation = 'v2'\n\n\nVARIANTMPL_TEMPLATE_FORMAT\n-----------------------------------\n\nYou can change the position of the variant inserted into template path.\n\n.. code-block:: python\n\n # For example, you have this path.\n render('sample1/sample2/index.html')\n\n # variantmpl inserts the variant(v2) as follows.\n 'sample1/sample2/index+v2.html'\n\n # At this time, VARIANTMPL_TEMPLATE_FORMAT is like this. (default)\n VARIANTMPL_TEMPLATE_FORMAT = '{dirpath}{filename}{variant}.{ext}'\n dirpath  # => 'sample1/sample2/'\n filename # => 'index'\n variant  # => '+v2'\n ext      # => 'html'\n\nChange this format like this.\n\n.. code-block:: python\n\n VARIANTMPL_TEMPLATE_FORMAT = '{variant}/{dirpath}{filename}.{ext}'\n\n # variantmpl inserts the variant(v2) as follows.\n '+v2/sample1/sample2/index.html'\n\nIn this case templates layout will change as follows\n\n::\n\n templates\n   \u251c\u2500\u2500 +v2\n   \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample1\n   \u2502\u00a0\u00a0     \u2514\u2500\u2500 sample2\n   \u2502\u00a0\u00a0         \u2514\u2500\u2500 index.html\n   \u2514\u2500\u2500 sample1\n       \u2514\u2500\u2500 sample2\n           \u2514\u2500\u2500 index.html\n\n\nPython and Django Support\n=========================\n\n* Python 3.4 later\n* Django 1.10 later\n* Support only the latest 3 versions.\n\nLicense\n=======\n\nMIT Licence. See the LICENSE file for specific terms.\n\nHistory\n=======\n\n0.1.0(12 26, 2017)\n---------------------\n* First release\n\n.. |travis| image:: https://travis-ci.org/tell-k/django-variantmpl.svg?branch=master\n    :target: https://travis-ci.org/tell-k/django-variantmpl\n\n.. |coveralls| image:: https://coveralls.io/repos/tell-k/django-variantmpl/badge.png\n    :target: https://coveralls.io/r/tell-k/django-variantmpl\n    :alt: coveralls.io\n\n.. |version| image:: https://img.shields.io/pypi/v/django-variantmpl.svg\n    :target: http://pypi.python.org/pypi/django-variantmpl/\n    :alt: latest version\n\n.. |license| image:: https://img.shields.io/pypi/l/django-variantmpl.svg\n    :target: http://pypi.python.org/pypi/django-variantmpl/\n    :alt: license\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tell-k/django-variantmpl", "keywords": "django templates switch useragent", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-variantmpl", "package_url": "https://pypi.org/project/django-variantmpl/", "platform": "", "project_url": "https://pypi.org/project/django-variantmpl/", "project_urls": {"Homepage": "https://github.com/tell-k/django-variantmpl"}, "release_url": "https://pypi.org/project/django-variantmpl/0.1.0/", "requires_dist": ["Django"], "requires_python": "", "summary": "Provide a mechanism for Django that switching template based on request context.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>We often want to render different HTML templates for phones, tablets, and desktop browsers. Or for AB testing. <tt><span class=\"pre\">django-variatmpl</span></tt>  make it easy. By setting <tt>request.variant</tt>, you can render the template according to that <tt>request.variant</tt>. This library is heavily inspired by <a href=\"http://guides.rubyonrails.org/4_1_release_notes.html#action-pack-variants\" rel=\"nofollow\">Action Pack Variants</a>.</p>\n<p><a href=\"https://travis-ci.org/tell-k/django-variantmpl\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fb962af684bf1994399cc2bca75a201b61889ff/68747470733a2f2f7472617669732d63692e6f72672f74656c6c2d6b2f646a616e676f2d76617269616e746d706c2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/tell-k/django-variantmpl\" rel=\"nofollow\"><img alt=\"coveralls.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5248609426bb2017b05d25a0ba69f64c2b7e3b47/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f74656c6c2d6b2f646a616e676f2d76617269616e746d706c2f62616467652e706e67\"></a> <a href=\"http://pypi.python.org/pypi/django-variantmpl/\" rel=\"nofollow\"><img alt=\"latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/170b2d1ea6215d9bcc6d9be4fc31708dcaf48573/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d76617269616e746d706c2e737667\"></a> <a href=\"http://pypi.python.org/pypi/django-variantmpl/\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9b8ab4053789faca4550de548012231036c3501/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f2d76617269616e746d706c2e737667\"></a></p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li>Install <tt><span class=\"pre\">django-variantmpl</span></tt></li>\n</ol>\n<pre>$ pip install django-variantmpl\n</pre>\n<ol>\n<li>Change <tt>django.shortcuts.render</tt> to <tt>variantmpl.shortcuts.render</tt> in your views.</li>\n</ol>\n<ul>\n<li>And set <tt>request.variant</tt> property.</li>\n</ul>\n<pre><span class=\"c1\"># views.py --</span>\n\n<span class=\"c1\"># from django.shortcuts import render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">variantmpl.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span> <span class=\"c1\"># &lt;- add</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Set variant value</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">variant</span> <span class=\"o\">=</span> <span class=\"s1\">'v2'</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s1\">'index.html'</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Prepare variant templates.</li>\n</ol>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s1\">'sample v1'</span> &gt; templates/index.html\n$ <span class=\"nb\">echo</span> <span class=\"s1\">'sample v2'</span> &gt; templates/index+v2.html\n</pre>\n<ol>\n<li>Confirm <tt>views.sample</tt> display in  your browser.</li>\n</ol>\n<ul>\n<li>You can see <strong>sample v2</strong>.</li>\n<li>It is the result of loading the template(<tt>index+v2.html</tt>) based on <tt>request.variant</tt>.</li>\n</ul>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<div id=\"render\">\n<h3>render</h3>\n<p>Use instead of <tt>django.shortcuts.render</tt>.</p>\n<pre><span class=\"c1\"># views.py --</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">variantmpl.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">variant</span> <span class=\"o\">=</span> <span class=\"s1\">'v2'</span>\n\n    <span class=\"c1\"># Actually \"index+v2.html\" is rendered</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s1\">'index.html'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"render-to-response\">\n<h3>render_to_response</h3>\n<p>Use instead of <tt>django.shortcuts.render_to_response</tt>.</p>\n<pre><span class=\"c1\"># views.py --</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">variantmpl.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render_to_response</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Actually \"index+v2.html\" is rendered</span>\n    <span class=\"k\">return</span> <span class=\"n\">render_to_response</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s1\">'index.html'</span><span class=\"p\">,</span> <span class=\"n\">variant</span><span class=\"o\">=</span><span class=\"s1\">'v2'</span><span class=\"p\">)</span>\n</pre>\n<p>You can set <tt>variant</tt> as a keyword argument.</p>\n</div>\n<div id=\"render-to-string\">\n<h3>render_to_string</h3>\n<p>Use instead of <tt>django.template.loader.render_to_string</tt>.</p>\n<pre><span class=\"c1\"># views.py --</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">variantmpl.template.loader</span> <span class=\"kn\">import</span> <span class=\"n\">render_to_string</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">variant</span> <span class=\"o\">=</span> <span class=\"s1\">'v2'</span>\n\n    <span class=\"c1\"># Actually \"index+v2.html\" is rendered</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">render_to_string</span><span class=\"p\">(</span><span class=\"s1\">'index.html'</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"templateresponse\">\n<h3>TemplateResponse</h3>\n<p>Use instead of <tt>django.template.response.TemplateResponse</tt>.</p>\n<pre><span class=\"c1\"># views.py --</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">variantmpl.template.response</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateResponse</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'sample/index.html'</span>\n    <span class=\"n\">response_class</span> <span class=\"o\">=</span> <span class=\"n\">TemplateResponse</span> <span class=\"c1\"># Replace response class</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">variant</span> <span class=\"o\">=</span> <span class=\"s1\">'v2'</span>\n\n        <span class=\"c1\"># Actually \"index+v2.html\" is rendered</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">SampleView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"monkey-patching-django-s-functions-classes\">\n<h3>Monkey patching Django\u2019s functions/classes</h3>\n<p>It is difficult to rewrite all code with large codes already to <tt>variantmpl</tt> code. In such a case, you can apply Monkey patch to Django\u2019s functions/classes.</p>\n<p><strong>Caution</strong> : This feature is experimental. This may be deleted in the future if unexpected bad effects occur.</p>\n<pre><span class=\"c1\"># settings.py --</span>\n\n<span class=\"n\">SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'xxxxxx'</span>\n\n<span class=\"c1\"># You must write this code below SECRET_KEY.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">variantmpl</span> <span class=\"kn\">import</span> <span class=\"n\">monkey</span>\n<span class=\"n\">monkey</span><span class=\"o\">.</span><span class=\"n\">patch_all</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\"># views.py --</span>\n\n<span class=\"c1\"># You don't need to replace to 'variantmpl'.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">variant</span> <span class=\"o\">=</span> <span class=\"s1\">'v2'</span>\n\n    <span class=\"c1\"># Actually \"index+v2.html\" is rendered</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s1\">'index.html'</span><span class=\"p\">)</span>\n</pre>\n<p>All targets for monkey patching.</p>\n<pre>django.shortcuts.render\ndjango.shortcuts.render_to_response\ndjango.template.loader.render_to_string\ndjango.template.response.TemplateResponse.resolve_template\n\nThey are replaced by the functions/methods of the same name in `variantmpl`.\n</pre>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"variantmpl-variant-format\">\n<h3>VARIANTMPL_VARIANT_FORMAT</h3>\n<p>You can change <tt>variant</tt> format. default: <tt>+variant</tt>.</p>\n<pre><span class=\"c1\"># settings.py --</span>\n<span class=\"n\">VARIANTMPL_VARIANT_FORMAT</span> <span class=\"o\">=</span> <span class=\"s1\">'@</span><span class=\"si\">{variant}</span><span class=\"s1\">'</span>\n</pre>\n<pre># The lookup target template name changes as follows.\n\n\"index+variant.html\" -&gt; \"index@variant.html\"\n</pre>\n</div>\n<div id=\"variantmpl-property-name\">\n<h3>VARIANTMPL_PROPERTY_NAME</h3>\n<p>You can rename <tt>request.variant</tt> property.</p>\n<pre><span class=\"c1\"># settings.py --</span>\n<span class=\"n\">VARIANTMPL_PROPERTY_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'mutation'</span>\n</pre>\n<pre><span class=\"c1\"># You can set 'mutation' instead of 'varaiant'</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">mutation</span> <span class=\"o\">=</span> <span class=\"s1\">'v2'</span>\n</pre>\n</div>\n<div id=\"variantmpl-template-format\">\n<h3>VARIANTMPL_TEMPLATE_FORMAT</h3>\n<p>You can change the position of the variant inserted into template path.</p>\n<pre><span class=\"c1\"># For example, you have this path.</span>\n<span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s1\">'sample1/sample2/index.html'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># variantmpl inserts the variant(v2) as follows.</span>\n<span class=\"s1\">'sample1/sample2/index+v2.html'</span>\n\n<span class=\"c1\"># At this time, VARIANTMPL_TEMPLATE_FORMAT is like this. (default)</span>\n<span class=\"n\">VARIANTMPL_TEMPLATE_FORMAT</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{dirpath}{filename}{variant}</span><span class=\"s1\">.</span><span class=\"si\">{ext}</span><span class=\"s1\">'</span>\n<span class=\"n\">dirpath</span>  <span class=\"c1\"># =&gt; 'sample1/sample2/'</span>\n<span class=\"n\">filename</span> <span class=\"c1\"># =&gt; 'index'</span>\n<span class=\"n\">variant</span>  <span class=\"c1\"># =&gt; '+v2'</span>\n<span class=\"n\">ext</span>      <span class=\"c1\"># =&gt; 'html'</span>\n</pre>\n<p>Change this format like this.</p>\n<pre><span class=\"n\">VARIANTMPL_TEMPLATE_FORMAT</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{variant}</span><span class=\"s1\">/</span><span class=\"si\">{dirpath}{filename}</span><span class=\"s1\">.</span><span class=\"si\">{ext}</span><span class=\"s1\">'</span>\n\n<span class=\"c1\"># variantmpl inserts the variant(v2) as follows.</span>\n<span class=\"s1\">'+v2/sample1/sample2/index.html'</span>\n</pre>\n<p>In this case templates layout will change as follows</p>\n<pre>templates\n  \u251c\u2500\u2500 +v2\n  \u2502\u00a0\u00a0 \u2514\u2500\u2500 sample1\n  \u2502\u00a0\u00a0     \u2514\u2500\u2500 sample2\n  \u2502\u00a0\u00a0         \u2514\u2500\u2500 index.html\n  \u2514\u2500\u2500 sample1\n      \u2514\u2500\u2500 sample2\n          \u2514\u2500\u2500 index.html\n</pre>\n</div>\n</div>\n<div id=\"python-and-django-support\">\n<h2>Python and Django Support</h2>\n<ul>\n<li>Python 3.4 later</li>\n<li>Django 1.10 later</li>\n<li>Support only the latest 3 versions.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT Licence. See the LICENSE file for specific terms.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0(12 26, 2017)</span></h2>\n<ul>\n<li>First release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3442855, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e5af78534e32ec0e2de743db082b70cc", "sha256": "28cbb33ef9d7db1ec3b1e7ac342d1ef5ec4340c79b07198df296136b32836d12"}, "downloads": -1, "filename": "django_variantmpl-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e5af78534e32ec0e2de743db082b70cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9472, "upload_time": "2017-12-26T07:53:31", "upload_time_iso_8601": "2017-12-26T07:53:31.053514Z", "url": "https://files.pythonhosted.org/packages/4d/58/02ea6c085df5993b573c505636a72e8589b8d02b9245f1085583e21aa229/django_variantmpl-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f1e03b2ceffaf1560996298dc5cc85a", "sha256": "18474b9d5a0770835e335cd651bce7b6f4ae8799be4a019a40680b03fc7825d4"}, "downloads": -1, "filename": "django-variantmpl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1f1e03b2ceffaf1560996298dc5cc85a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9000, "upload_time": "2017-12-26T07:53:32", "upload_time_iso_8601": "2017-12-26T07:53:32.469915Z", "url": "https://files.pythonhosted.org/packages/f6/4a/e6b0654bc6b13b8ee4d96c91d6d10025b7eb594e4ad8d9cc3bc30168b211/django-variantmpl-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5af78534e32ec0e2de743db082b70cc", "sha256": "28cbb33ef9d7db1ec3b1e7ac342d1ef5ec4340c79b07198df296136b32836d12"}, "downloads": -1, "filename": "django_variantmpl-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e5af78534e32ec0e2de743db082b70cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9472, "upload_time": "2017-12-26T07:53:31", "upload_time_iso_8601": "2017-12-26T07:53:31.053514Z", "url": "https://files.pythonhosted.org/packages/4d/58/02ea6c085df5993b573c505636a72e8589b8d02b9245f1085583e21aa229/django_variantmpl-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f1e03b2ceffaf1560996298dc5cc85a", "sha256": "18474b9d5a0770835e335cd651bce7b6f4ae8799be4a019a40680b03fc7825d4"}, "downloads": -1, "filename": "django-variantmpl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1f1e03b2ceffaf1560996298dc5cc85a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9000, "upload_time": "2017-12-26T07:53:32", "upload_time_iso_8601": "2017-12-26T07:53:32.469915Z", "url": "https://files.pythonhosted.org/packages/f6/4a/e6b0654bc6b13b8ee4d96c91d6d10025b7eb594e4ad8d9cc3bc30168b211/django-variantmpl-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:04 2020"}