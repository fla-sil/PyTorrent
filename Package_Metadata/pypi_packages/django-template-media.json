{"info": {"author": "Tim Heap", "author_email": "tim@timheap.me", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "django-template-media\n=======================\n\nThis module allows template writers to manipulate form media in templates.\nThis allows multiple forms on a page to share scripts with out including them twice.\n\nAll of the media included in the page using these tools\nare collected into a single 'global'[1]_ ``Media`` instance for that page.\nAll operations are performed on this 'global'[1]_ ``Media`` instance.\n\nInstalling\n==========\n\nInstall this package, using pip::\n\n    $ pip install django-template-media\n\nAdd it to your ``INSTALLED_APPS`` and ``TEMPLATE_CONTEXT_PROCESSORS``::\n\n    INSTALLED_APPS += (\n        'django_template_media',\n    )\n\n    TEMPLATE_CONTEXT_PROCESSORS += (\n        'django_template_media.context_processors.template_media',\n    )\n\nLoad the template tags in your templates by loading the ``media_tags`` library::\n\n    {% load media_tags %}\n\nUsing\n=====\n\nThe tools are designed to work with the template heirarchy in a sane manner.\nThe examples will assume a ``site.html`` base template that defines a block named ``media``,\nand two ``{% print_media %}`` tags to print the accumulated media files::\n\n    <!doctype html>\n    <html>\n        <head>\n            <title>Example site</title>\n\n            {# Define the media for the page. This block is not printed #}\n            {% load media_tags %}\n            {% block media %}{% media %}\n                {% add_css \"screen\" \"css/bootstrap.css\" %}\n                {% add_css \"screen\" \"css/site.css\" %}\n                {% add_css \"print\" \"css/print.css\" %}\n\n                {% add_js \"js/jquery.js\" %}\n            {% media %}{% endblock %}\n\n            {# print out CSS media in the <head> #}\n            {% print_media \"css\" %}\n\n        </head>\n        <body>\n\n            {% block body %}\n\n            {# print out JS media at the end of the <body> #}\n            {% print_media \"js\" %}\n\n        </body>\n    </html>\n\nThe ``media`` block is used by child templates to add media to the site media.\nThe block does not have to be named ``media``,\nit just has to be named the same thing on all templates.\nThe block must appear *before* any calls to ``{% print_media %}``\n\nPrinting the media\n------------------\n\nThe ``{% print_media %}`` tag prints all of the media accumulated on the page so far.\nA sensible place to put this is in your base template.\n\nCalling this tag with no arguments will print out all of the accumulated media.\n\nYou can print out just the ``css`` or ``js`` by supplying a second argument::\n\n    {% print_media \"css\" %}\n\n    {% print_media \"js\" %}\n\nBuilding media in the template\n------------------------------\n\nIf you want to construct an ad-hoc media instance,\nfor site-wide media or fancy pages,\nyou can use the ``{% media %}`` block.\nThe ``Media()`` instance generated will be added to the current page media.\nJust as in ``Media`` classes on forms, the same file can be named multiple times \u2014\nonly the first instance will be used.\nYou can safely name all dependencies of the current page,\nwithout worrying about including the dependency multiple times::\n\n    {% extends \"site.html\" %}\n\n    {% load media_tags %}\n    {% block media %}\n        {% media %}\n\n            {% add_js \"js/jquery.js\" %}\n            {% add_js \"js/jquery.lib.js\" %}\n            {% add_js \"js/bootstrap.js\" %}\n            {% add_js \"js/bootstrap.lib.js\" %}\n\n            {% add_css \"screen\" \"css/bootstrap.css\" %}\n            {% add_css \"screen\" \"css/widget.css\" %}\n\n            {% if user.is_anonymous %}\n                {% add_media login_form.media %}\n            {% endif %}\n\n        {% endmedia %}\n\n        {# This is called **after** adding all the media #}\n        {{ block.super }}\n    {% endblock %}\n\nThe three possible tags in the ``{% media %}`` block are as follows:\n\n``{% add_js path %}``\n    Add the JavaScript file ``path`` to the media.\n    Multiple files can be specified in the one tag,\n    or just place them one after another as a series of tags.\n\n``{% add_css media_type path %}``\n    Add the CSS file ``path`` to the media, with ``media_type``.\n    Multiple files can be specified in the one tag,\n    or just place them one after another as a series of tags.\n\n``{% add_media media %}``\n    Adds the named form media to the current media.\n    Multiple media instances can be added at once by naming them all.\n    or just place them one after another as a series of tags.\n\nAdding media from forms\n-----------------------\n\nIf you just want to add a single JavaScript file or CSS file,\nor a single form media instance,\nyou do not need to wrap everything in a ``{% media %}`` block::\n\n    {% extends 'site.html' %}\n\n    {% load media_tags %}\n\n    {% block body %}\n        <form action='.' method='post'>\n            {% csrf_token %}\n            {{ form }}\n            <input type=\"submit\">\n        </form>\n    {% endblock %}\n\n    {% block media %}\n        {% add_media form.media %}\n        {{ block.super }}\n    {% endblock %}\n\nThe ``{% add_media %}`` tag accepts multiple media instances,\nso if you have multiple forms, you can add the media for all of them at once::\n\n    {% add_media form_1.media form_2.media %}\n\nWorking with template hierarchies\n---------------------------------\n\nIn sub-templates, the call to ``{{ block.super }}``\n*must* be placed *after* all calls that modify the media.\nAs the media is printed out in an ancestor's ``{% block media %}``,\nthe sub-template must add all of the media it needs\nbefore calling ``{{ block.super }}``.\n\n``{% add_js %}``, ``{% add_css %}`` and ``{% add_media %}`` tags outside of\n``{% media %}`` blocks always *prepend* new media to the current page media.\nThis is because templates are rendered from the child to the parent,\nand parent media should precede child media.\nThus, if you have multiple ``{% add_media %}`` or ``{% media %}`` tags in once page,\nthe media will be printed out in reverse order to its appearance on the page.\nAs such, you are encouraged to have only one\n``{% add_media %}`` or ``{% media %}`` block per template,\nto prevent confusion.\n\nIn a ``{% media %}`` block, calls to ``{% add_media %}``, ``{% add_js %}`` and\n``{% add_css %}`` append media to the current ad-hoc media instance.\n\n------------------------\n\n.. [1]\n   The 'global' ``Media`` instance is stored in the currently rendering template context.\n   It is only global to the whole page that is currently being constructed,\n   not across all templates.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/tim_heap/django-template-media", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-template-media", "package_url": "https://pypi.org/project/django-template-media/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-template-media/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/tim_heap/django-template-media"}, "release_url": "https://pypi.org/project/django-template-media/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Simple tools to extend the django admin site", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-template-media\">\n<h2>django-template-media</h2>\n<p>This module allows template writers to manipulate form media in templates.\nThis allows multiple forms on a page to share scripts with out including them twice.</p>\n<p>All of the media included in the page using these tools\nare collected into a single \u2018global\u2019<a href=\"#id3\" id=\"id1\" rel=\"nofollow\">[1]</a> <tt>Media</tt> instance for that page.\nAll operations are performed on this \u2018global\u2019<a href=\"#id3\" id=\"id2\" rel=\"nofollow\">[1]</a> <tt>Media</tt> instance.</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install this package, using pip:</p>\n<pre>$ pip install django-template-media\n</pre>\n<p>Add it to your <tt>INSTALLED_APPS</tt> and <tt>TEMPLATE_CONTEXT_PROCESSORS</tt>:</p>\n<pre>INSTALLED_APPS += (\n    'django_template_media',\n)\n\nTEMPLATE_CONTEXT_PROCESSORS += (\n    'django_template_media.context_processors.template_media',\n)\n</pre>\n<p>Load the template tags in your templates by loading the <tt>media_tags</tt> library:</p>\n<pre>{% load media_tags %}\n</pre>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>The tools are designed to work with the template heirarchy in a sane manner.\nThe examples will assume a <tt>site.html</tt> base template that defines a block named <tt>media</tt>,\nand two <tt>{% print_media %}</tt> tags to print the accumulated media files:</p>\n<pre>&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Example site&lt;/title&gt;\n\n        {# Define the media for the page. This block is not printed #}\n        {% load media_tags %}\n        {% block media %}{% media %}\n            {% add_css \"screen\" \"css/bootstrap.css\" %}\n            {% add_css \"screen\" \"css/site.css\" %}\n            {% add_css \"print\" \"css/print.css\" %}\n\n            {% add_js \"js/jquery.js\" %}\n        {% media %}{% endblock %}\n\n        {# print out CSS media in the &lt;head&gt; #}\n        {% print_media \"css\" %}\n\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        {% block body %}\n\n        {# print out JS media at the end of the &lt;body&gt; #}\n        {% print_media \"js\" %}\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The <tt>media</tt> block is used by child templates to add media to the site media.\nThe block does not have to be named <tt>media</tt>,\nit just has to be named the same thing on all templates.\nThe block must appear <em>before</em> any calls to <tt>{% print_media %}</tt></p>\n<div id=\"printing-the-media\">\n<h3>Printing the media</h3>\n<p>The <tt>{% print_media %}</tt> tag prints all of the media accumulated on the page so far.\nA sensible place to put this is in your base template.</p>\n<p>Calling this tag with no arguments will print out all of the accumulated media.</p>\n<p>You can print out just the <tt>css</tt> or <tt>js</tt> by supplying a second argument:</p>\n<pre>{% print_media \"css\" %}\n\n{% print_media \"js\" %}\n</pre>\n</div>\n<div id=\"building-media-in-the-template\">\n<h3>Building media in the template</h3>\n<p>If you want to construct an ad-hoc media instance,\nfor site-wide media or fancy pages,\nyou can use the <tt>{% media %}</tt> block.\nThe <tt>Media()</tt> instance generated will be added to the current page media.\nJust as in <tt>Media</tt> classes on forms, the same file can be named multiple times \u2014\nonly the first instance will be used.\nYou can safely name all dependencies of the current page,\nwithout worrying about including the dependency multiple times:</p>\n<pre>{% extends \"site.html\" %}\n\n{% load media_tags %}\n{% block media %}\n    {% media %}\n\n        {% add_js \"js/jquery.js\" %}\n        {% add_js \"js/jquery.lib.js\" %}\n        {% add_js \"js/bootstrap.js\" %}\n        {% add_js \"js/bootstrap.lib.js\" %}\n\n        {% add_css \"screen\" \"css/bootstrap.css\" %}\n        {% add_css \"screen\" \"css/widget.css\" %}\n\n        {% if user.is_anonymous %}\n            {% add_media login_form.media %}\n        {% endif %}\n\n    {% endmedia %}\n\n    {# This is called **after** adding all the media #}\n    {{ block.super }}\n{% endblock %}\n</pre>\n<p>The three possible tags in the <tt>{% media %}</tt> block are as follows:</p>\n<dl>\n<dt><tt>{% add_js path %}</tt></dt>\n<dd>Add the JavaScript file <tt>path</tt> to the media.\nMultiple files can be specified in the one tag,\nor just place them one after another as a series of tags.</dd>\n<dt><tt>{% add_css media_type path %}</tt></dt>\n<dd>Add the CSS file <tt>path</tt> to the media, with <tt>media_type</tt>.\nMultiple files can be specified in the one tag,\nor just place them one after another as a series of tags.</dd>\n<dt><tt>{% add_media media %}</tt></dt>\n<dd>Adds the named form media to the current media.\nMultiple media instances can be added at once by naming them all.\nor just place them one after another as a series of tags.</dd>\n</dl>\n</div>\n<div id=\"adding-media-from-forms\">\n<h3>Adding media from forms</h3>\n<p>If you just want to add a single JavaScript file or CSS file,\nor a single form media instance,\nyou do not need to wrap everything in a <tt>{% media %}</tt> block:</p>\n<pre>{% extends 'site.html' %}\n\n{% load media_tags %}\n\n{% block body %}\n    &lt;form action='.' method='post'&gt;\n        {% csrf_token %}\n        {{ form }}\n        &lt;input type=\"submit\"&gt;\n    &lt;/form&gt;\n{% endblock %}\n\n{% block media %}\n    {% add_media form.media %}\n    {{ block.super }}\n{% endblock %}\n</pre>\n<p>The <tt>{% add_media %}</tt> tag accepts multiple media instances,\nso if you have multiple forms, you can add the media for all of them at once:</p>\n<pre>{% add_media form_1.media form_2.media %}\n</pre>\n</div>\n<div id=\"working-with-template-hierarchies\">\n<h3>Working with template hierarchies</h3>\n<p>In sub-templates, the call to <tt>{{ block.super }}</tt>\n<em>must</em> be placed <em>after</em> all calls that modify the media.\nAs the media is printed out in an ancestor\u2019s <tt>{% block media %}</tt>,\nthe sub-template must add all of the media it needs\nbefore calling <tt>{{ block.super }}</tt>.</p>\n<p><tt>{% add_js %}</tt>, <tt>{% add_css %}</tt> and <tt>{% add_media %}</tt> tags outside of\n<tt>{% media %}</tt> blocks always <em>prepend</em> new media to the current page media.\nThis is because templates are rendered from the child to the parent,\nand parent media should precede child media.\nThus, if you have multiple <tt>{% add_media %}</tt> or <tt>{% media %}</tt> tags in once page,\nthe media will be printed out in reverse order to its appearance on the page.\nAs such, you are encouraged to have only one\n<tt>{% add_media %}</tt> or <tt>{% media %}</tt> block per template,\nto prevent confusion.</p>\n<p>In a <tt>{% media %}</tt> block, calls to <tt>{% add_media %}</tt>, <tt>{% add_js %}</tt> and\n<tt>{% add_css %}</tt> append media to the current ad-hoc media instance.</p>\n<hr class=\"docutils\">\n<table id=\"id3\">\n<col><col>\n<tbody>\n<tr><td>[1]</td><td><em>(<a href=\"#id1\" rel=\"nofollow\">1</a>, <a href=\"#id2\" rel=\"nofollow\">2</a>)</em> The \u2018global\u2019 <tt>Media</tt> instance is stored in the currently rendering template context.\nIt is only global to the whole page that is currently being constructed,\nnot across all templates.</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1240417, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e5adbd20446be741d91b1ebd76fa2360", "sha256": "c100217dd1ba66954411ec0be70bb26322f67d9833c1e7c276ace19bd8cef40d"}, "downloads": -1, "filename": "django-template-media-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e5adbd20446be741d91b1ebd76fa2360", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4481, "upload_time": "2013-07-24T00:32:56", "upload_time_iso_8601": "2013-07-24T00:32:56.761802Z", "url": "https://files.pythonhosted.org/packages/ab/45/32c5a52725299f11a746f0ab2a6d55b034e6b6240af4a6dae01434aeb86d/django-template-media-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "998a12a236da8999b42a52b155f49609", "sha256": "bc87c8605067022f4ee68a614eb791ec8b6ebca04bdcc2290f1b0f3ecab53fb0"}, "downloads": -1, "filename": "django-template-media-0.2.0.tar.gz", "has_sig": false, "md5_digest": "998a12a236da8999b42a52b155f49609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5156, "upload_time": "2013-09-30T02:37:28", "upload_time_iso_8601": "2013-09-30T02:37:28.536013Z", "url": "https://files.pythonhosted.org/packages/e0/a4/d8b57e4f562f38035bc704d5f5f504e83598cd6e6ea6067ed6d343d68666/django-template-media-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "97b2669e3fd1ec4fc5ba1366e695873f", "sha256": "d15359e031787fb7cfb82060756d6f0b39960699427d573dbd25c1bfd21eb5f1"}, "downloads": -1, "filename": "django-template-media-0.3.0.tar.gz", "has_sig": false, "md5_digest": "97b2669e3fd1ec4fc5ba1366e695873f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5053, "upload_time": "2014-09-28T01:25:54", "upload_time_iso_8601": "2014-09-28T01:25:54.120675Z", "url": "https://files.pythonhosted.org/packages/9d/a9/d40874a8fadaef2aa9e9e8887f5102acc656b54f2d59e3d11e270a301fc8/django-template-media-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97b2669e3fd1ec4fc5ba1366e695873f", "sha256": "d15359e031787fb7cfb82060756d6f0b39960699427d573dbd25c1bfd21eb5f1"}, "downloads": -1, "filename": "django-template-media-0.3.0.tar.gz", "has_sig": false, "md5_digest": "97b2669e3fd1ec4fc5ba1366e695873f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5053, "upload_time": "2014-09-28T01:25:54", "upload_time_iso_8601": "2014-09-28T01:25:54.120675Z", "url": "https://files.pythonhosted.org/packages/9d/a9/d40874a8fadaef2aa9e9e8887f5102acc656b54f2d59e3d11e270a301fc8/django-template-media-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:37 2020"}