{"info": {"author": "Vahid Vaezian", "author_email": "vahid.vaezian@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![PyPI version](https://badge.fury.io/py/metabase-api.svg?)](https://badge.fury.io/py/metabase-api)\n[![HitCount](http://hits.dwyl.com/vvaezian/metabase_api_python.svg)](http://hits.dwyl.com/vvaezian/metabase_api_python)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg)](https://github.com/vvaezian/metabase_api_python/issues)\n\n## Installation\n```python\npip install metabase-api\n```\n\n## Initializing\n```python\nfrom metabase_api import Metabase_API\n\nmb = Metabase_API('https://...', 'username', 'password')  # if password is not given, it will prompt for password\n```\n## Functions\n### REST functions (get, post, put, delete)\nCalling Metabase API endpoints (documented [here](https://github.com/metabase/metabase/blob/master/docs/api-documentation.md)) can be done using the corresponding REST function in the wrapper.  \nE.g. to call the [endpoint](https://github.com/metabase/metabase/blob/master/docs/api-documentation.md#get-apidatabase) `GET /api/database/`, use `mb.get('/api/database/')`.\n\n### Auxilliary Functions\nYou usually don't need to deal with these functions directly (e.g. [get_item_id](https://github.com/vvaezian/metabase_api_python/blob/master/metabase_api/metabase_api.py#L76))\n\n### Custom Functions\n\n- [create_card](https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L202)\n- [copy_card](https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L356)\n- [copy_pulse](https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L411)\n- [copy_dashboard](https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L461)\n- [copy_collection](https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L545)\n- [make_json](https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L645)\n- [move_to_archive](https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L657)\n\n*For a complete list of functions parameters see the functions definitions using the above links. Here we provide a short description:*\n\n#### `create_card`\nSpecify the name to be used for the card, which table (name/id) to use as the source of data and where (i.e. which collection (name/id)) to save the card (default is the root collection).  \n```python\nmb.create_card(card_name='test_card', table_name='mySourceTable')  # Setting `verbose=True` will print extra information while creating the card.\n```\nUsing the `column_order` parameter we can specify how the order of columns should be in the created card. Accepted values are *'alphabetical', 'db_table_order'* (default), or a list of column names.\n```python\nmb.create_card(card_name='test_card', table_name='mySourceTable', column_order=['myCol5', 'myCol3', 'myCol8'])\n```\nAll or part of the function parameters and many more information (e.g. visualisation settings) can be provided to the function in a dictionary, using the *custom_json* parameter. (also see the `make_json` function below)\n```python\nmb.create_card(custom_json=myCustomJson)\n```\n\n#### `copy_card`\nAt the minimum you need to provide the name/id of the card to copy and the name/id of the collection to copy the card to.\n```python\nmb.copy_card(source_card_name='test_card', destination_collection_id=123)\n```\n\n#### `copy_pulse`\nSimilar to `copy_card` but for pulses.\n```python\nmb.copy_pulse(source_pulse_name='test_pulse', destination_collection_id=123)\n```\n\n#### `copy_dashboard`\nYou can determine whether you want to *deepcopy* the dashboard or not (default False).  \nIf you don't deepcopy, the duplicated dashboard will use the same cards as the original dashboard. Therefore making a change in one dashboard changes the other dashboard as well.  \nWhen you deepcopy a dashboard the cards of the original dashboard are duplicated and these cards are used in the duplicate dashboard. Therefore if you make changes in one dashboard, the other one is not affected.  \nIf the `destination_dashboard_name` parameter is not provided, the destination dashboard name will be the same as the source dashboard name (plus any `postfix` if provided).  \nThe duplicated cards (in case of deepcopying) are saved in a collection called `[destination_dashboard_name]'s cards` and placed in the same collection as the duplicated dashboard.\n```python\nmb.copy_dashboard(source_dashboard_id=123, destination_collection_id=456, deepcopy=True)\n```\n\n#### `copy_collection`\nCopies all the items in the given collection (name/id) into the given `destination_parent_collection` (name/id). You can determine whether to deepcopy the dashboards.\n```python\nmb.copy_collection(source_collection_id=123, destination_parent_collection_id=456, deepcopy_dashboards=True, verbose=True)\n```\nYou can also specify a postfix for the names of copied child items.\n\n#### `make_json`\nIt's very helpful to use the Inspect tool of the browser (network tab) to see what Metabase is doing. You can then use the generated json code to build your automation. To turn the generated json in the browser into a Python dictionary, you can copy the code, paste it into triple quotes (`'''  '''`) and apply the function `make_json`:\n```python\nraw_json = ''' {\"name\":\"test\",\"dataset_query\":{\"database\":165,\"query\":{\"fields\":[[\"field-id\",35839],[\"field-id\",35813],[\"field-id\",35829],[\"field-id\",35858],[\"field-id\",35835],[\"field-id\",35803],[\"field-id\",35843],[\"field-id\",35810],[\"field-id\",35826],[\"field-id\",35815],[\"field-id\",35831],[\"field-id\",35827],[\"field-id\",35852],[\"field-id\",35832],[\"field-id\",35863],[\"field-id\",35851],[\"field-id\",35850],[\"field-id\",35864],[\"field-id\",35854],[\"field-id\",35846],[\"field-id\",35811],[\"field-id\",35933],[\"field-id\",35862],[\"field-id\",35833],[\"field-id\",35816]],\"source-table\":2154},\"type\":\"query\"},\"display\":\"table\",\"description\":null,\"visualization_settings\":{\"table.column_formatting\":[{\"columns\":[\"Diff\"],\"type\":\"range\",\"colors\":[\"#ED6E6E\",\"white\",\"#84BB4C\"],\"min_type\":\"custom\",\"max_type\":\"custom\",\"min_value\":-30,\"max_value\":30,\"operator\":\"=\",\"value\":\"\",\"color\":\"#509EE3\",\"highlight_row\":false}],\"table.pivot_column\":\"Sale_Date\",\"table.cell_column\":\"SKUID\"},\"archived\":false,\"enable_embedding\":false,\"embedding_params\":null,\"collection_id\":183,\"collection_position\":null,\"result_metadata\":[{\"name\":\"Sale_Date\",\"display_name\":\"Sale_Date\",\"base_type\":\"type/DateTime\",\"fingerprint\":{\"global\":{\"distinct-count\":1,\"nil%\":0},\"type\":{\"type/DateTime\":{\"earliest\":\"2019-12-28T00:00:00\",\"latest\":\"2019-12-28T00:00:00\"}}},\"special_type\":null},{\"name\":\"Account_ID\",\"display_name\":\"Account_ID\",\"base_type\":\"type/Text\",\"fingerprint\":{\"global\":{\"distinct-count\":411,\"nil%\":0},\"type\":{\"type/Text\":{\"percent-json\":0,\"percent-url\":0,\"percent-email\":0,\"average-length\":9}}},\"special_type\":null},{\"name\":\"Account_Name\",\"display_name\":\"Account_Name\",\"base_type\":\"type/Text\",\"fingerprint\":{\"global\":{\"distinct-count\":410,\"nil%\":0.0015},\"type\":{\"type/Text\":{\"percent-json\":0,\"percent-url\":0,\"percent-email\":0,\"average-length\":21.2916}}},\"special_type\":null},{\"name\":\"Account_Type\",\"display_name\":\"Account_Type\",\"base_type\":\"type/Text\",\"special_type\":\"type/Category\",\"fingerprint\":{\"global\":{\"distinct-count\":5,\"nil%\":0.0015},\"type\":{\"type/Text\":{\"percent-json\":0,\"percent-url\":0,\"percent-email\":0,\"average-length\":3.7594}}}}],\"metadata_checksum\":\"7XP8bmR1h5f662CFE87tjQ==\"} '''\nmyJson = mb.make_json(raw_json)  # setting 'prettyprint=True' will print the output in a structured format.\nmb.create_card('test_card2', table_name='mySourceTable', custom_json={'visualization_settings':myJson['visualization_settings']})\n```\n\n## Notes\nThere are also two other Python wrappers for Metabase API [here](https://github.com/mertsalik/metabasepy) and [here](https://github.com/STUnitas/metabase-py).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vvaezian/metabase_api_python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "metabase-api", "package_url": "https://pypi.org/project/metabase-api/", "platform": "", "project_url": "https://pypi.org/project/metabase-api/", "project_urls": {"Homepage": "https://github.com/vvaezian/metabase_api_python"}, "release_url": "https://pypi.org/project/metabase-api/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "A Python Wrapper for Metabase API", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/metabase-api\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/196e48499d70b879a14a2e191a5dd7547a302a38/68747470733a2f2f62616467652e667572792e696f2f70792f6d657461626173652d6170692e7376673f\"></a>\n<a href=\"http://hits.dwyl.com/vvaezian/metabase_api_python\" rel=\"nofollow\"><img alt=\"HitCount\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f1cbc4b726c933f2b9d12004cd9a22e2eafdf40/687474703a2f2f686974732e6477796c2e636f6d2f767661657a69616e2f6d657461626173655f6170695f707974686f6e2e737667\"></a>\n<a href=\"https://github.com/vvaezian/metabase_api_python/issues\" rel=\"nofollow\"><img alt=\"contributions welcome\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/220aa3f89f789ec18b3b3c9096a2a11ab994fd90/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e737667\"></a></p>\n<h2>Installation</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">metabase</span><span class=\"o\">-</span><span class=\"n\">api</span>\n</pre>\n<h2>Initializing</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">metabase_api</span> <span class=\"kn\">import</span> <span class=\"n\">Metabase_API</span>\n\n<span class=\"n\">mb</span> <span class=\"o\">=</span> <span class=\"n\">Metabase_API</span><span class=\"p\">(</span><span class=\"s1\">'https://...'</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>  <span class=\"c1\"># if password is not given, it will prompt for password</span>\n</pre>\n<h2>Functions</h2>\n<h3>REST functions (get, post, put, delete)</h3>\n<p>Calling Metabase API endpoints (documented <a href=\"https://github.com/metabase/metabase/blob/master/docs/api-documentation.md\" rel=\"nofollow\">here</a>) can be done using the corresponding REST function in the wrapper.<br>\nE.g. to call the <a href=\"https://github.com/metabase/metabase/blob/master/docs/api-documentation.md#get-apidatabase\" rel=\"nofollow\">endpoint</a> <code>GET /api/database/</code>, use <code>mb.get('/api/database/')</code>.</p>\n<h3>Auxilliary Functions</h3>\n<p>You usually don't need to deal with these functions directly (e.g. <a href=\"https://github.com/vvaezian/metabase_api_python/blob/master/metabase_api/metabase_api.py#L76\" rel=\"nofollow\">get_item_id</a>)</p>\n<h3>Custom Functions</h3>\n<ul>\n<li><a href=\"https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L202\" rel=\"nofollow\">create_card</a></li>\n<li><a href=\"https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L356\" rel=\"nofollow\">copy_card</a></li>\n<li><a href=\"https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L411\" rel=\"nofollow\">copy_pulse</a></li>\n<li><a href=\"https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L461\" rel=\"nofollow\">copy_dashboard</a></li>\n<li><a href=\"https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L545\" rel=\"nofollow\">copy_collection</a></li>\n<li><a href=\"https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L645\" rel=\"nofollow\">make_json</a></li>\n<li><a href=\"https://github.com/vvaezian/metabase_api_python/blob/9f1d9cad6c0193a8301fa523701931d24b9ebbea/metabase_api/metabase_api.py#L657\" rel=\"nofollow\">move_to_archive</a></li>\n</ul>\n<p><em>For a complete list of functions parameters see the functions definitions using the above links. Here we provide a short description:</em></p>\n<h4><code>create_card</code></h4>\n<p>Specify the name to be used for the card, which table (name/id) to use as the source of data and where (i.e. which collection (name/id)) to save the card (default is the root collection).</p>\n<pre><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">create_card</span><span class=\"p\">(</span><span class=\"n\">card_name</span><span class=\"o\">=</span><span class=\"s1\">'test_card'</span><span class=\"p\">,</span> <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'mySourceTable'</span><span class=\"p\">)</span>  <span class=\"c1\"># Setting `verbose=True` will print extra information while creating the card.</span>\n</pre>\n<p>Using the <code>column_order</code> parameter we can specify how the order of columns should be in the created card. Accepted values are <em>'alphabetical', 'db_table_order'</em> (default), or a list of column names.</p>\n<pre><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">create_card</span><span class=\"p\">(</span><span class=\"n\">card_name</span><span class=\"o\">=</span><span class=\"s1\">'test_card'</span><span class=\"p\">,</span> <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'mySourceTable'</span><span class=\"p\">,</span> <span class=\"n\">column_order</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'myCol5'</span><span class=\"p\">,</span> <span class=\"s1\">'myCol3'</span><span class=\"p\">,</span> <span class=\"s1\">'myCol8'</span><span class=\"p\">])</span>\n</pre>\n<p>All or part of the function parameters and many more information (e.g. visualisation settings) can be provided to the function in a dictionary, using the <em>custom_json</em> parameter. (also see the <code>make_json</code> function below)</p>\n<pre><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">create_card</span><span class=\"p\">(</span><span class=\"n\">custom_json</span><span class=\"o\">=</span><span class=\"n\">myCustomJson</span><span class=\"p\">)</span>\n</pre>\n<h4><code>copy_card</code></h4>\n<p>At the minimum you need to provide the name/id of the card to copy and the name/id of the collection to copy the card to.</p>\n<pre><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">copy_card</span><span class=\"p\">(</span><span class=\"n\">source_card_name</span><span class=\"o\">=</span><span class=\"s1\">'test_card'</span><span class=\"p\">,</span> <span class=\"n\">destination_collection_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n</pre>\n<h4><code>copy_pulse</code></h4>\n<p>Similar to <code>copy_card</code> but for pulses.</p>\n<pre><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">copy_pulse</span><span class=\"p\">(</span><span class=\"n\">source_pulse_name</span><span class=\"o\">=</span><span class=\"s1\">'test_pulse'</span><span class=\"p\">,</span> <span class=\"n\">destination_collection_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n</pre>\n<h4><code>copy_dashboard</code></h4>\n<p>You can determine whether you want to <em>deepcopy</em> the dashboard or not (default False).<br>\nIf you don't deepcopy, the duplicated dashboard will use the same cards as the original dashboard. Therefore making a change in one dashboard changes the other dashboard as well.<br>\nWhen you deepcopy a dashboard the cards of the original dashboard are duplicated and these cards are used in the duplicate dashboard. Therefore if you make changes in one dashboard, the other one is not affected.<br>\nIf the <code>destination_dashboard_name</code> parameter is not provided, the destination dashboard name will be the same as the source dashboard name (plus any <code>postfix</code> if provided).<br>\nThe duplicated cards (in case of deepcopying) are saved in a collection called <code>[destination_dashboard_name]'s cards</code> and placed in the same collection as the duplicated dashboard.</p>\n<pre><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">copy_dashboard</span><span class=\"p\">(</span><span class=\"n\">source_dashboard_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">destination_collection_id</span><span class=\"o\">=</span><span class=\"mi\">456</span><span class=\"p\">,</span> <span class=\"n\">deepcopy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h4><code>copy_collection</code></h4>\n<p>Copies all the items in the given collection (name/id) into the given <code>destination_parent_collection</code> (name/id). You can determine whether to deepcopy the dashboards.</p>\n<pre><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">copy_collection</span><span class=\"p\">(</span><span class=\"n\">source_collection_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">destination_parent_collection_id</span><span class=\"o\">=</span><span class=\"mi\">456</span><span class=\"p\">,</span> <span class=\"n\">deepcopy_dashboards</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can also specify a postfix for the names of copied child items.</p>\n<h4><code>make_json</code></h4>\n<p>It's very helpful to use the Inspect tool of the browser (network tab) to see what Metabase is doing. You can then use the generated json code to build your automation. To turn the generated json in the browser into a Python dictionary, you can copy the code, paste it into triple quotes (<code>''' '''</code>) and apply the function <code>make_json</code>:</p>\n<pre><span class=\"n\">raw_json</span> <span class=\"o\">=</span> <span class=\"s1\">''' {\"name\":\"test\",\"dataset_query\":{\"database\":165,\"query\":{\"fields\":[[\"field-id\",35839],[\"field-id\",35813],[\"field-id\",35829],[\"field-id\",35858],[\"field-id\",35835],[\"field-id\",35803],[\"field-id\",35843],[\"field-id\",35810],[\"field-id\",35826],[\"field-id\",35815],[\"field-id\",35831],[\"field-id\",35827],[\"field-id\",35852],[\"field-id\",35832],[\"field-id\",35863],[\"field-id\",35851],[\"field-id\",35850],[\"field-id\",35864],[\"field-id\",35854],[\"field-id\",35846],[\"field-id\",35811],[\"field-id\",35933],[\"field-id\",35862],[\"field-id\",35833],[\"field-id\",35816]],\"source-table\":2154},\"type\":\"query\"},\"display\":\"table\",\"description\":null,\"visualization_settings\":{\"table.column_formatting\":[{\"columns\":[\"Diff\"],\"type\":\"range\",\"colors\":[\"#ED6E6E\",\"white\",\"#84BB4C\"],\"min_type\":\"custom\",\"max_type\":\"custom\",\"min_value\":-30,\"max_value\":30,\"operator\":\"=\",\"value\":\"\",\"color\":\"#509EE3\",\"highlight_row\":false}],\"table.pivot_column\":\"Sale_Date\",\"table.cell_column\":\"SKUID\"},\"archived\":false,\"enable_embedding\":false,\"embedding_params\":null,\"collection_id\":183,\"collection_position\":null,\"result_metadata\":[{\"name\":\"Sale_Date\",\"display_name\":\"Sale_Date\",\"base_type\":\"type/DateTime\",\"fingerprint\":{\"global\":{\"distinct-count\":1,\"nil%\":0},\"type\":{\"type/DateTime\":{\"earliest\":\"2019-12-28T00:00:00\",\"latest\":\"2019-12-28T00:00:00\"}}},\"special_type\":null},{\"name\":\"Account_ID\",\"display_name\":\"Account_ID\",\"base_type\":\"type/Text\",\"fingerprint\":{\"global\":{\"distinct-count\":411,\"nil%\":0},\"type\":{\"type/Text\":{\"percent-json\":0,\"percent-url\":0,\"percent-email\":0,\"average-length\":9}}},\"special_type\":null},{\"name\":\"Account_Name\",\"display_name\":\"Account_Name\",\"base_type\":\"type/Text\",\"fingerprint\":{\"global\":{\"distinct-count\":410,\"nil%\":0.0015},\"type\":{\"type/Text\":{\"percent-json\":0,\"percent-url\":0,\"percent-email\":0,\"average-length\":21.2916}}},\"special_type\":null},{\"name\":\"Account_Type\",\"display_name\":\"Account_Type\",\"base_type\":\"type/Text\",\"special_type\":\"type/Category\",\"fingerprint\":{\"global\":{\"distinct-count\":5,\"nil%\":0.0015},\"type\":{\"type/Text\":{\"percent-json\":0,\"percent-url\":0,\"percent-email\":0,\"average-length\":3.7594}}}}],\"metadata_checksum\":\"7XP8bmR1h5f662CFE87tjQ==\"} '''</span>\n<span class=\"n\">myJson</span> <span class=\"o\">=</span> <span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">make_json</span><span class=\"p\">(</span><span class=\"n\">raw_json</span><span class=\"p\">)</span>  <span class=\"c1\"># setting 'prettyprint=True' will print the output in a structured format.</span>\n<span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">create_card</span><span class=\"p\">(</span><span class=\"s1\">'test_card2'</span><span class=\"p\">,</span> <span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">'mySourceTable'</span><span class=\"p\">,</span> <span class=\"n\">custom_json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'visualization_settings'</span><span class=\"p\">:</span><span class=\"n\">myJson</span><span class=\"p\">[</span><span class=\"s1\">'visualization_settings'</span><span class=\"p\">]})</span>\n</pre>\n<h2>Notes</h2>\n<p>There are also two other Python wrappers for Metabase API <a href=\"https://github.com/mertsalik/metabasepy\" rel=\"nofollow\">here</a> and <a href=\"https://github.com/STUnitas/metabase-py\" rel=\"nofollow\">here</a>.</p>\n\n          </div>"}, "last_serial": 7135155, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "35d5effded9e70c3a0aca27ed7a3f705", "sha256": "2c37ab6059ded5d812301a9d7ad5d3dc73106dbc1d4fd5aa5b5c6b7f3d01c27b"}, "downloads": -1, "filename": "metabase_api-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "35d5effded9e70c3a0aca27ed7a3f705", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5809, "upload_time": "2020-01-21T01:44:02", "upload_time_iso_8601": "2020-01-21T01:44:02.657685Z", "url": "https://files.pythonhosted.org/packages/b8/fd/7eeda48972da4a1856e5311b8f83676ae65c75dadf9b35d30aca14f900f8/metabase_api-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb832499d0cad42a92efebb172edf2e9", "sha256": "3110e52cc1bfe6a7390c527c5333a29eb68b68cd25fb31ba34f1584c15177874"}, "downloads": -1, "filename": "metabase-api-0.1.tar.gz", "has_sig": false, "md5_digest": "cb832499d0cad42a92efebb172edf2e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4458, "upload_time": "2020-01-21T01:44:04", "upload_time_iso_8601": "2020-01-21T01:44:04.958565Z", "url": "https://files.pythonhosted.org/packages/33/82/75d8afeab0b23b6ebaedffebc3ac650932ee1d854c075927c9ea591872bb/metabase-api-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dd8c7e87270cb1427ec959df73a39d73", "sha256": "d1aa222164247c51209fb77515250502e2ecd7636418a0bf6f6fe2423cb585f1"}, "downloads": -1, "filename": "metabase_api-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dd8c7e87270cb1427ec959df73a39d73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5835, "upload_time": "2020-01-22T19:31:28", "upload_time_iso_8601": "2020-01-22T19:31:28.537640Z", "url": "https://files.pythonhosted.org/packages/d7/29/d365be353dfa8028377b7237de589ce0a7784af535359e52bb7c9f71469f/metabase_api-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ecf6c279e18f6a5638585a3c2aaf2dd", "sha256": "8ecbbcc3e9af247e7c0d1d4fa8b9e79291da9dfa63fca6f4ecac7ffcd7960359"}, "downloads": -1, "filename": "metabase-api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5ecf6c279e18f6a5638585a3c2aaf2dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4442, "upload_time": "2020-01-22T19:31:30", "upload_time_iso_8601": "2020-01-22T19:31:30.078619Z", "url": "https://files.pythonhosted.org/packages/7c/c4/18d9f381c85cce0744a0414d615736f7089dc1542f74bd40502169497e0f/metabase-api-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6e9b4e4cc9c4864f9110ad92aa93a311", "sha256": "f42f6a65d1f59b07e6179270a6e61d58d1f2f5731963ef5905318ce87a969df9"}, "downloads": -1, "filename": "metabase_api-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6e9b4e4cc9c4864f9110ad92aa93a311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7945, "upload_time": "2020-02-07T04:56:04", "upload_time_iso_8601": "2020-02-07T04:56:04.214394Z", "url": "https://files.pythonhosted.org/packages/f2/17/08a95cef70016465cd5c094bc4c02c2ec1a7adb0d862f6cbf05b05a18547/metabase_api-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "835e2cd3487b845bef1e967939850fbd", "sha256": "a5395d13941a967cc5030fbaf4900b7ee760c10849a14a39fec54e0e036ae232"}, "downloads": -1, "filename": "metabase-api-0.1.2.tar.gz", "has_sig": false, "md5_digest": "835e2cd3487b845bef1e967939850fbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6544, "upload_time": "2020-02-07T04:56:05", "upload_time_iso_8601": "2020-02-07T04:56:05.697606Z", "url": "https://files.pythonhosted.org/packages/a7/94/2a5880f74db90ec278032b43bc24a940f37213fa736015856caa950b0398/metabase-api-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fb01318bd8185f33cbd0896a04e5702c", "sha256": "e617bd06b66d9819850a8c884d87c75c4938a99cd9513acc8485de630f390e84"}, "downloads": -1, "filename": "metabase_api-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fb01318bd8185f33cbd0896a04e5702c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8018, "upload_time": "2020-02-08T01:38:34", "upload_time_iso_8601": "2020-02-08T01:38:34.217398Z", "url": "https://files.pythonhosted.org/packages/54/23/407e9aa7cffc4e6bb335671f9a3da84636e54bd78bdfecd5e426c1ccd539/metabase_api-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44a44639bdb3f9db395268180981d10a", "sha256": "23bcb2ded6155dbb4d2a458d4cc63955d5f8f1adfa124bd1ed715c377d0406fe"}, "downloads": -1, "filename": "metabase-api-0.1.3.tar.gz", "has_sig": false, "md5_digest": "44a44639bdb3f9db395268180981d10a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6594, "upload_time": "2020-02-08T01:38:35", "upload_time_iso_8601": "2020-02-08T01:38:35.180662Z", "url": "https://files.pythonhosted.org/packages/1a/21/f5db175e8701b1e23ea64e31006c7aa7bd8599ff68c4aa70a5740483fea3/metabase-api-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "84b52f07db5df74b0ea65ab2e71f39b2", "sha256": "7f82ffec3c05b0575c564ab9eff4502d208d43c87e54005899019ce8fdf548a7"}, "downloads": -1, "filename": "metabase_api-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "84b52f07db5df74b0ea65ab2e71f39b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8051, "upload_time": "2020-02-21T23:30:48", "upload_time_iso_8601": "2020-02-21T23:30:48.970093Z", "url": "https://files.pythonhosted.org/packages/55/2f/58287b76b61c9ace3ad4eba2a466f4969b385db308f4d0e8e0c929e54da8/metabase_api-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8983ac2a36491955db551cf4e864d137", "sha256": "b1b70ab53a7d0d50bc813e1fff565f2fb73e06b4e56bc7e3eec9538803bc5636"}, "downloads": -1, "filename": "metabase-api-0.1.4.tar.gz", "has_sig": false, "md5_digest": "8983ac2a36491955db551cf4e864d137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6624, "upload_time": "2020-02-21T23:30:50", "upload_time_iso_8601": "2020-02-21T23:30:50.438865Z", "url": "https://files.pythonhosted.org/packages/d2/3b/ddab75142a8a7cfcb6477e0faee846a18af67a7a0b592078450935834e1f/metabase-api-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "543415b930b9cbe9c0228e68ecc53f79", "sha256": "6561fc9147538b4e22fe44c9f589f91b215c5883828019552d9e40da148c4169"}, "downloads": -1, "filename": "metabase_api-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "543415b930b9cbe9c0228e68ecc53f79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10877, "upload_time": "2020-04-30T05:08:20", "upload_time_iso_8601": "2020-04-30T05:08:20.555171Z", "url": "https://files.pythonhosted.org/packages/39/c7/50a1412c13a831ee01e9c0abf06441c6d572a4990b4da53da2f2e0bb741c/metabase_api-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c00fb433ab6fc326f9ee140e49d89964", "sha256": "e9b436517f8295cc3e9b8817ad5b77dd2dd76395a905082b8e35b385166e847d"}, "downloads": -1, "filename": "metabase-api-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c00fb433ab6fc326f9ee140e49d89964", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11999, "upload_time": "2020-04-30T05:08:21", "upload_time_iso_8601": "2020-04-30T05:08:21.798133Z", "url": "https://files.pythonhosted.org/packages/81/39/b7acdae4ed767ed209f19a7a222c8468d0dbcabd62c7fa957ffc96c5ea85/metabase-api-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9b72b74e6ae1ae95ebe07a3f34ca89eb", "sha256": "20637512329d382febbd6f42abf99c02e48d9f37ea5b2baa51c4746eadb3b285"}, "downloads": -1, "filename": "metabase_api-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9b72b74e6ae1ae95ebe07a3f34ca89eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10932, "upload_time": "2020-04-30T06:02:07", "upload_time_iso_8601": "2020-04-30T06:02:07.336010Z", "url": "https://files.pythonhosted.org/packages/40/9f/2def841071166fee8b62566b6792e71fbede81dbf330bafa6f333850daee/metabase_api-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f673cb1e248ad05083ec809f42fc106f", "sha256": "c56141431da273d382b7d04663ce4e0f3607adb9a4faaa5324eedc11e760d85d"}, "downloads": -1, "filename": "metabase-api-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f673cb1e248ad05083ec809f42fc106f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12121, "upload_time": "2020-04-30T06:02:08", "upload_time_iso_8601": "2020-04-30T06:02:08.275440Z", "url": "https://files.pythonhosted.org/packages/82/f2/7745eb85ac41c436d58df1fb2d08154c60d9571d5a83c819c7d330e02f2d/metabase-api-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b72b74e6ae1ae95ebe07a3f34ca89eb", "sha256": "20637512329d382febbd6f42abf99c02e48d9f37ea5b2baa51c4746eadb3b285"}, "downloads": -1, "filename": "metabase_api-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9b72b74e6ae1ae95ebe07a3f34ca89eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10932, "upload_time": "2020-04-30T06:02:07", "upload_time_iso_8601": "2020-04-30T06:02:07.336010Z", "url": "https://files.pythonhosted.org/packages/40/9f/2def841071166fee8b62566b6792e71fbede81dbf330bafa6f333850daee/metabase_api-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f673cb1e248ad05083ec809f42fc106f", "sha256": "c56141431da273d382b7d04663ce4e0f3607adb9a4faaa5324eedc11e760d85d"}, "downloads": -1, "filename": "metabase-api-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f673cb1e248ad05083ec809f42fc106f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12121, "upload_time": "2020-04-30T06:02:08", "upload_time_iso_8601": "2020-04-30T06:02:08.275440Z", "url": "https://files.pythonhosted.org/packages/82/f2/7745eb85ac41c436d58df1fb2d08154c60d9571d5a83c819c7d330e02f2d/metabase-api-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:59 2020"}