{"info": {"author": "Tom\u00e1\u0161 Opletal", "author_email": "t.opletal@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# Django Model Mutations\n\nThis package adds Mutation classes that make creating graphene mutations with django models easier using Django Rest Framework serializers. It extends graphene Mutation class in a similar way to Django Rest Framework views or original Django views.\n\nIt also provides easy way to add permissions checks or ensure logged-in user, as well as easy way to override or add funcionality similar to django forms or rest framework views - such as ```get_queryset()``` or ```save()``` functions.\n\nThere is also advanced error reporting from rest framework, that returns non-valid fields and error messages.\n\nInspired by [Saleor](https://github.com/mirumee/saleor), [graphene-django-extras](https://github.com/eamigo86/graphene-django-extras/tree/master/graphene_django_extras) and [django-rest-framework](https://github.com/encode/django-rest-framework)\n\n## Installation\n```\npip install django-model-mutations\n```\n\n\n## Basic Usage\nMain classes that this package provides:\n\n| mutations | mixins |\n| ------ | ------ |\n|CreateModelMutation|LoginRequiredMutationMixin|\n|CreateBulkModelMutation|\n|UpdateModelMutation|\n|UpdateBulkModelMutation|\n|DeleteModelMutation|\n|DeleteBulkModelMutation|\n\n\n#### Django usage\nInput type (Arguments) is generated from serializer fields  \nReturn type is retrieved by model from global graphene registry, you just have to import it as in example\n```python\nfrom django_model_mutations import mutations, mixins\nfrom your_app.types import UserType  # important to import types to register in global registry\nfrom your_app.serializers import UserSerializer\n\n\n# Create Mutations\n# use mixins.LoginRequiredMutationMixin to ensure only logged-in user can perform this mutation\n# MAKE SURE this mixin is FIRST in inheritance order\nclass UserCreateMutation(mixins.LoginRequiredMutationMixin, mutations.CreateModelMutation):\n    class Meta:\n        serializer_class = UserSerializer\n        # OPTIONAL META FIELDS:\n        permissions = ('your_app.user_permission',) # OPTIONAL: specify user permissions\n        lookup_field = 'publicId'  # OPTIONAL: specify database lookup column, default is 'id' or 'ids'\n        return_field_name = 'myUser' # OPTIONAL: specify return field name, default is model name\n        input_field_name = 'myUser' # OPTIONAL: specify input field name, defauls is 'input'\n        \n\nclass UserBulkCreateMutation(mutations.CreateBulkModelMutation):\n    class Meta:\n        serializer_class = UserSerializer\n\n\n# Update Mutations\nclass UserUpdateMutation(mutations.UpdateModelMutation):\n    class Meta:\n        serializer_class = UserSerializer\n\n# WARNING: Bulk update DOES NOT USE serializer, due to limitations of rest framework serializer. \n# Instead specify model and argument fields by yourself.\nclass UserBulkUpdateMutation(mutations.UpdateBulkModelMutation):\n    class Arguments:\n        is_active = graphene.Boolean()\n\n    class Meta:\n        model = User\n\n# Delete Mutations\n# delete mutations doesn't use serializers, as there is no need\nclass UserDeleteMutation(mutations.DeleteModelMutation):\n    class Meta:\n        model = User\n\nclass UserBulkDeleteMutation(mutations.DeleteBulkModelMutation):\n    class Meta:\n        model = User\n\n\n# Add to graphene schema as usual\nclass Mutation(graphene.ObjectType):\n    user_create = UserCreateMutation.Field()\n    ....\n\nschema = graphene.Schema(mutation=Mutation)\n```\n\n\n#### GraphQl usage\nThe generated GraphQl schema can be modified with ```Meta``` fields as described above in ```UserCreateMutation```.\n\nBy default all mutations have ```errors``` field with ```field``` and ```messages``` that contain validation errors from rest-framework serializer or lookup errors. For now permission denied and other exceptions will not use this error reporting, but a default one, for usage see tests.\n```graphql\n# default argument name is input\n# default return field name is model name\nmutation userCreate (input: {username: \"myUsername\"}) {\n    user {\n        id\n        username\n    }\n    errors {\n        field\n        messages\n    }\n}\n\n\n# Bulk operations return 'count' and errors\nmutation userCreate (input: {username: \"myUsername\"}) {\n    count\n    errors {\n        field\n        messages\n    }\n}\n\n# update mutations\n# update and delete mutations by default specify lookup field 'id' or 'ids' for bulk mutations\nmutation {\n    userUpdate (id: 2, input: {username:\"newUsername\"} ) {\n        user {\n            id\n            username\n        }  \n        errors {\n            field\n            messages\n        }\n    } \n}   \n\n\nmutation {\n    userBulkUpdate (ids: [2, 3], isActive: false ) {\n        count\n        errors {\n           field\n           messages\n        }\n    }\n}  \n\n\n# delete mutations\nmutation {\n    userDelete (id: 1) {\n        user {\n            id\n        }\n        errors {\n           field\n           messages\n        }\n    }\n}  \n\n\nmutation {\n    userBulkDelete (ids: [1, 2, 3]) {\n        count\n        errors {\n           field\n           messages\n        }\n    }\n}  \n```\n\n### Adding funcionality\nAll classes are derived from ```graphene.Mutation```. When you want to override some major functionality, the best place probabably is ```perform_mutate```, which is called after permission checks from graphene ```mutate```.  \n\nIn general probably the main functions that you want to override are: ```save()``` and ```get_object()``` for single object mutations or ```get_queryset()``` for bulk mutations.  \n```get_object``` or ```get_queryset``` you should override to add more filters for fetching the object.   \n```save``` performs final save/update/delete to database and you can add additional fields there.\n\nExamples:\n```python\n# lets only update users that are inactive and add some random field\nclass UserUpdateInactiveMutation(mutations.UpdateModelMutation):\n    class Meta:\n        model = User\n\n    @classmethod\n    def get_object(cls, object_id, info, **input):\n    # can get the object first and then check\n        obj = super(UserUpdateInactiveMutation, cls).get_object(object_id, info, **input)\n        if obj.is_active:\n            return None\n        return obj\n\n    @classmethod\n    def save(cls, serializer, root, info, **input):\n        saved_object = serializer.save(updated_by=info.context.user)\n        return cls.return_success(saved_object)\n\n\n# same but for bulk mutation we have to override get_queryset\nclass UserBulkUpdateInactiveMutation(mutations.UpdateBulkModelMutation):\n    class Meta:\n        model = User\n\n    @classmethod\n    def get_queryset(cls, object_ids, info, **input):\n        qs = super(UserBulkUpdateInactiveMutation, cls).get_queryset(object_ids, info, **input)\n        qs.filter(is_active=False)\n        return qs\n```\n\nFor the whole function flow, please check the Base models in ```django_model_mutations\\mutations.py```.\nIt was inspired by rest framework, so you can find functions like ```get_serializer_kwargs```, ```get_serializer```, ```validate_instance``` (for example here you can override default ```ValidationError``` exception and return None if you don't want exception of non existing id lookup etc.)\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/topletal/django-model-mutations", "keywords": "GRAPHENE,GRAPHENE-DJANGO,GRAPHQL,DJANGO,MODELS,API", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-model-mutations", "package_url": "https://pypi.org/project/django-model-mutations/", "platform": "", "project_url": "https://pypi.org/project/django-model-mutations/", "project_urls": {"Homepage": "https://github.com/topletal/django-model-mutations"}, "release_url": "https://pypi.org/project/django-model-mutations/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Graphene Django mutations for Django models made easier", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Model Mutations</h1>\n<p>This package adds Mutation classes that make creating graphene mutations with django models easier using Django Rest Framework serializers. It extends graphene Mutation class in a similar way to Django Rest Framework views or original Django views.</p>\n<p>It also provides easy way to add permissions checks or ensure logged-in user, as well as easy way to override or add funcionality similar to django forms or rest framework views - such as <code>get_queryset()</code> or <code>save()</code> functions.</p>\n<p>There is also advanced error reporting from rest framework, that returns non-valid fields and error messages.</p>\n<p>Inspired by <a href=\"https://github.com/mirumee/saleor\" rel=\"nofollow\">Saleor</a>, <a href=\"https://github.com/eamigo86/graphene-django-extras/tree/master/graphene_django_extras\" rel=\"nofollow\">graphene-django-extras</a> and <a href=\"https://github.com/encode/django-rest-framework\" rel=\"nofollow\">django-rest-framework</a></p>\n<h2>Installation</h2>\n<pre><code>pip install django-model-mutations\n</code></pre>\n<h2>Basic Usage</h2>\n<p>Main classes that this package provides:</p>\n<table>\n<thead>\n<tr>\n<th>mutations</th>\n<th>mixins</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CreateModelMutation</td>\n<td>LoginRequiredMutationMixin</td>\n</tr>\n<tr>\n<td>CreateBulkModelMutation</td>\n<td></td>\n</tr>\n<tr>\n<td>UpdateModelMutation</td>\n<td></td>\n</tr>\n<tr>\n<td>UpdateBulkModelMutation</td>\n<td></td>\n</tr>\n<tr>\n<td>DeleteModelMutation</td>\n<td></td>\n</tr>\n<tr>\n<td>DeleteBulkModelMutation</td>\n<td></td>\n</tr></tbody></table>\n<h4>Django usage</h4>\n<p>Input type (Arguments) is generated from serializer fields<br>\nReturn type is retrieved by model from global graphene registry, you just have to import it as in example</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_model_mutations</span> <span class=\"kn\">import</span> <span class=\"n\">mutations</span><span class=\"p\">,</span> <span class=\"n\">mixins</span>\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.types</span> <span class=\"kn\">import</span> <span class=\"n\">UserType</span>  <span class=\"c1\"># important to import types to register in global registry</span>\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">UserSerializer</span>\n\n\n<span class=\"c1\"># Create Mutations</span>\n<span class=\"c1\"># use mixins.LoginRequiredMutationMixin to ensure only logged-in user can perform this mutation</span>\n<span class=\"c1\"># MAKE SURE this mixin is FIRST in inheritance order</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserCreateMutation</span><span class=\"p\">(</span><span class=\"n\">mixins</span><span class=\"o\">.</span><span class=\"n\">LoginRequiredMutationMixin</span><span class=\"p\">,</span> <span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">CreateModelMutation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n        <span class=\"c1\"># OPTIONAL META FIELDS:</span>\n        <span class=\"n\">permissions</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'your_app.user_permission'</span><span class=\"p\">,)</span> <span class=\"c1\"># OPTIONAL: specify user permissions</span>\n        <span class=\"n\">lookup_field</span> <span class=\"o\">=</span> <span class=\"s1\">'publicId'</span>  <span class=\"c1\"># OPTIONAL: specify database lookup column, default is 'id' or 'ids'</span>\n        <span class=\"n\">return_field_name</span> <span class=\"o\">=</span> <span class=\"s1\">'myUser'</span> <span class=\"c1\"># OPTIONAL: specify return field name, default is model name</span>\n        <span class=\"n\">input_field_name</span> <span class=\"o\">=</span> <span class=\"s1\">'myUser'</span> <span class=\"c1\"># OPTIONAL: specify input field name, defauls is 'input'</span>\n        \n\n<span class=\"k\">class</span> <span class=\"nc\">UserBulkCreateMutation</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">CreateBulkModelMutation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n\n\n<span class=\"c1\"># Update Mutations</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserUpdateMutation</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">UpdateModelMutation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n\n<span class=\"c1\"># WARNING: Bulk update DOES NOT USE serializer, due to limitations of rest framework serializer. </span>\n<span class=\"c1\"># Instead specify model and argument fields by yourself.</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserBulkUpdateMutation</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">UpdateBulkModelMutation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Arguments</span><span class=\"p\">:</span>\n        <span class=\"n\">is_active</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n<span class=\"c1\"># Delete Mutations</span>\n<span class=\"c1\"># delete mutations doesn't use serializers, as there is no need</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserDeleteMutation</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">DeleteModelMutation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserBulkDeleteMutation</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">DeleteBulkModelMutation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n\n<span class=\"c1\"># Add to graphene schema as usual</span>\n<span class=\"k\">class</span> <span class=\"nc\">Mutation</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">user_create</span> <span class=\"o\">=</span> <span class=\"n\">UserCreateMutation</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n    <span class=\"o\">....</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">mutation</span><span class=\"o\">=</span><span class=\"n\">Mutation</span><span class=\"p\">)</span>\n</pre>\n<h4>GraphQl usage</h4>\n<p>The generated GraphQl schema can be modified with <code>Meta</code> fields as described above in <code>UserCreateMutation</code>.</p>\n<p>By default all mutations have <code>errors</code> field with <code>field</code> and <code>messages</code> that contain validation errors from rest-framework serializer or lookup errors. For now permission denied and other exceptions will not use this error reporting, but a default one, for usage see tests.</p>\n<pre># default argument name is input\n# default return field name is model name\nmutation userCreate (input: {username: \"myUsername\"}) {\n    user {\n        id\n        username\n    }\n    errors {\n        field\n        messages\n    }\n}\n\n\n# Bulk operations return 'count' and errors\nmutation userCreate (input: {username: \"myUsername\"}) {\n    count\n    errors {\n        field\n        messages\n    }\n}\n\n# update mutations\n# update and delete mutations by default specify lookup field 'id' or 'ids' for bulk mutations\nmutation {\n    userUpdate (id: 2, input: {username:\"newUsername\"} ) {\n        user {\n            id\n            username\n        }  \n        errors {\n            field\n            messages\n        }\n    } \n}   \n\n\nmutation {\n    userBulkUpdate (ids: [2, 3], isActive: false ) {\n        count\n        errors {\n           field\n           messages\n        }\n    }\n}  \n\n\n# delete mutations\nmutation {\n    userDelete (id: 1) {\n        user {\n            id\n        }\n        errors {\n           field\n           messages\n        }\n    }\n}  \n\n\nmutation {\n    userBulkDelete (ids: [1, 2, 3]) {\n        count\n        errors {\n           field\n           messages\n        }\n    }\n}  \n</pre>\n<h3>Adding funcionality</h3>\n<p>All classes are derived from <code>graphene.Mutation</code>. When you want to override some major functionality, the best place probabably is <code>perform_mutate</code>, which is called after permission checks from graphene <code>mutate</code>.</p>\n<p>In general probably the main functions that you want to override are: <code>save()</code> and <code>get_object()</code> for single object mutations or <code>get_queryset()</code> for bulk mutations.<br>\n<code>get_object</code> or <code>get_queryset</code> you should override to add more filters for fetching the object.<br>\n<code>save</code> performs final save/update/delete to database and you can add additional fields there.</p>\n<p>Examples:</p>\n<pre><span class=\"c1\"># lets only update users that are inactive and add some random field</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserUpdateInactiveMutation</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">UpdateModelMutation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">object_id</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"nb\">input</span><span class=\"p\">):</span>\n    <span class=\"c1\"># can get the object first and then check</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">UserUpdateInactiveMutation</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">(</span><span class=\"n\">object_id</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">serializer</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"nb\">input</span><span class=\"p\">):</span>\n        <span class=\"n\">saved_object</span> <span class=\"o\">=</span> <span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">updated_by</span><span class=\"o\">=</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">return_success</span><span class=\"p\">(</span><span class=\"n\">saved_object</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># same but for bulk mutation we have to override get_queryset</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserBulkUpdateInactiveMutation</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">UpdateBulkModelMutation</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">object_ids</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"nb\">input</span><span class=\"p\">):</span>\n        <span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">UserBulkUpdateInactiveMutation</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_queryset</span><span class=\"p\">(</span><span class=\"n\">object_ids</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n        <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_active</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">qs</span>\n</pre>\n<p>For the whole function flow, please check the Base models in <code>django_model_mutations\\mutations.py</code>.\nIt was inspired by rest framework, so you can find functions like <code>get_serializer_kwargs</code>, <code>get_serializer</code>, <code>validate_instance</code> (for example here you can override default <code>ValidationError</code> exception and return None if you don't want exception of non existing id lookup etc.)</p>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<p>Please make sure to update tests as appropriate.</p>\n<h2>License</h2>\n<p><a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6155163, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2cae452b9b88dae40470f8fe64d1ecd9", "sha256": "61a04969a4203211fc1be55aec0d0a3c59b9b220375d2d5db6eccd214632d6db"}, "downloads": -1, "filename": "django-model-mutations-0.1.tar.gz", "has_sig": false, "md5_digest": "2cae452b9b88dae40470f8fe64d1ecd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3901, "upload_time": "2019-11-18T10:33:37", "upload_time_iso_8601": "2019-11-18T10:33:37.360410Z", "url": "https://files.pythonhosted.org/packages/7b/4c/d5e8eca4626945ab8d1cad56170eace3ff3df2a6e50d33010386478c3a23/django-model-mutations-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bae177aad93d8c1689b997ada77779b4", "sha256": "6d19ab7045750374140e547f77b157e6c62d1310d59e5f1fd041ac7705982e2d"}, "downloads": -1, "filename": "django-model-mutations-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bae177aad93d8c1689b997ada77779b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7807, "upload_time": "2019-11-18T10:55:31", "upload_time_iso_8601": "2019-11-18T10:55:31.772967Z", "url": "https://files.pythonhosted.org/packages/c5/62/cd946821035aa4f72a613ac30655d4c864048bb268d8cf1c91fce61a7f89/django-model-mutations-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bae177aad93d8c1689b997ada77779b4", "sha256": "6d19ab7045750374140e547f77b157e6c62d1310d59e5f1fd041ac7705982e2d"}, "downloads": -1, "filename": "django-model-mutations-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bae177aad93d8c1689b997ada77779b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7807, "upload_time": "2019-11-18T10:55:31", "upload_time_iso_8601": "2019-11-18T10:55:31.772967Z", "url": "https://files.pythonhosted.org/packages/c5/62/cd946821035aa4f72a613ac30655d4c864048bb268d8cf1c91fce61a7f89/django-model-mutations-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:01 2020"}