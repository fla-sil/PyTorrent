{"info": {"author": "Giovanni Barillari", "author_email": "gi0baro@d4net.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Emmett-REST\n\nEmmett-REST is a REST extension for [Emmett framework](https://emmett.sh).\n\n[![pip version](https://img.shields.io/pypi/v/emmett-rest.svg?style=flat)](https://pypi.python.org/pypi/Emmett-REST)\n![Tests Status](https://github.com/emmett-framework/rest/workflows/Tests/badge.svg)\n\n## In a nutshell\n\n```python\nfrom emmett.orm import Model, Field\nfrom emmett_rest import REST\n\nclass Task(Model):\n    title = Field.string()\n    is_completed = Field.bool()\n\napp.use_extension(REST)\n\ntasks = app.rest_module(__name__, 'api_task', Task, url_prefix='tasks')\ntasks.query_allowed_fields = ['is_completed']\n```\n\nOutput of `http://{host}/tasks?where={\"is_completed\": false}`:\n\n```json\n{\n    \"meta\": {\n        \"object\": \"list\",\n        \"total_objects\": 1,\n        \"has_more\": false\n    },\n    \"data\": [\n        {\n            \"title\": \"Some task\",\n            \"is_completed\": false\n        }\n    ]\n}\n```\n\n## Installation\n\nYou can install Emmett-REST using pip:\n\n    pip install Emmett-REST\n\nAnd add it to your Emmett application:\n\n```python\nfrom emmett_rest import REST\n\napp.use_extension(REST)\n```\n\n## Usage\n\nThe Emmett-REST extension is intended to be used with Emmett models, and it uses application modules to build APIs over them. \n\nLet's say, for example, that you have a task manager app with a `Task` model:\n\n```python\nfrom emmett.orm import Model, Field\n\nclass Task(Model):\n    title = Field.string()\n    is_completed = Field.bool()\n    spent_time = Field.int()\n    created_at = Field.datetime()\n```\n\nThen, in order to expose REST apis for your `Task` model, you can use the `rest_module` method on your application or on any application module:\n\n```python\nfrom myapp import app, Task\n\ntasks = app.rest_module(__name__, 'api_task', Task, url_prefix='tasks')\n```\n\nAs you can see, the usage is very similar to the Emmett application modules, but we also passed the involved model to the module initialization.\n\nThis single line is enough to have a really simple REST api over the `Task` model, since under the default behaviour rest modules will expose 5 different routes:\n\n- an *index* route that will respond to `GET` requests on `/tasks` path listing all the tasks in the database\n- a *read* route that will respond to `GET` requests on `/tasks/<int:rid>` path returning a single task corresponding to the record id of the *rid* variable\n- a *create* route that will respond to `POST` requests on `/tasks` that will create a new task in the database\n- an *update* route that will respond to `PUT` or `PATCH` requests on `/tasks/<int:rid>` that will update the task corresponding to the record id of the *rid* variable\n- a *delete* route that will respond to `DELETE` requests on `/tasks/<int:rid>` that will delete the task corresponding to the record id of the *rid* variable.\n\nListing endpoints accepts some query parameters by default, and specifically:\n\n| parameter | default | description |\n| --- | --- | --- |\n| page | 1 | page to return |\n| page\\_size | 20 | number of records per page to return|\n| sort\\_by | id | field to sort records by (-field for desc) |\n| where | {} | json dumped string for querying |\n\n### Additional routes\n\nEmmett-REST also provides some additional not CRUD endpoints. Let's see them specifically. \n\n#### Sample route\n\nIt behaves like the *index* route, but gets records randomly. As a consequence, the `sort_by` parameter gets ignored.\n\nResponds to `GET` requests on `{base_path}/sample` endpoint, and can be activated adding `'sample'` to the enabled methods on module definition or in the extension settings.\n\n#### Grouping route\n\nResponds to `GET` requests on `{base_path}/group/<str:field>` endpoint, and can be activated adding `'group'` to the enabled methods on module definition or in the extension settings.\n\nIt groups by value and count records for the given field. Results of calling `http://{host}/tasks/group/is_completed` looks like:\n\n```json\n{\n    \"meta\": {\n        \"object\": \"list\",\n        \"total_objects\": 11,\n        \"has_more\": false\n    },\n    \"data\": [\n        {\n            \"value\": true,\n            \"count\": 1\n        },\n        {\n            \"value\": false,\n            \"count\": 10\n        }\n    ]\n}\n```\n\n#### Stats route\n\nResponds to `GET` requests on `{base_path}/stats` endpoint, and can be activated adding `'stats'` to the enabled methods on module definition or in the extension settings. Parse a list of fields from the comma separated `fields` query parameter.\n\nIt return minimum, maximum and average values of the records for the specified fields. Results of calling `http://{host}/tasks/stats?fields=spent_time` looks like:\n\n```json\n{\n    \"spent_time\": {\n        \"min\": 0,\n        \"max\": 3600,\n        \"avg\": 27\n    }\n}\n```\n\n### REST module parameters\n\nThe `rest_module` method accepts several parameters (*bold ones are required*) for its configuration:\n\n| parameter | default | description |\n| --- | --- | --- |\n| **import_name** | | as for standard modules |\n| **name** | | as for standard modules |\n| **model** | | the model to use |\n| serializer | `None` | a class to be used for serialization |\n| parser | `None` | a class to be used for parsing |\n| enabled\\_methods | `str` list: index, create, read, update, delete | the routes that should be enabled on the module |\n| disabled\\_methods | `[]` | the routes that should be disabled on the module |\n| list\\_envelope | data | the envelope to use on the index route |\n| single\\_envelope | `False` | the envelope to use on all the routes except for lists endpoints |\n| meta\\_envelope | meta | the envelope to use for meta data |\n| groups\\_envelope | data | the envelope to use for the grouping endpoint |\n| use\\_envelope\\_on\\_parse | `False` | if set to `True` will use the envelope specified in *single_envelope* option also on parsing |\n| serialize\\_meta | `True` | whether to serialize meta data on lists endpoint |\n| url\\_prefix | `None` | as for standard modules |\n| hostname | `None` | as for standard modules |\n| module\\_class | `RestModule` | the module class to use |\n\n### REST module properties\n\nSome of the REST module parameters needs to be configured using attributes, specifically:\n\n| attribute | description |\n| --- | --- |\n| allowed\\_sorts | list of fields that can be used with `sort_by` parameter |\n| query\\_allowed\\_fields | list of fields that can be used with `where` parameter |\n| grouping\\_allowed\\_fields | list of fields that can be used in `group` route |\n| stats\\_allowed\\_fields | list of fields that can be used in `stats` route |\n\nAn example would be:\n\n```python\ntasks.allowed_sorts = ['id', 'created_at']\ntasks.query_allowed_fields = ['is_completed']\ntasks.grouping_allowed_fields = ['is_completed']\ntasks.stats_allowed_fields ['time_spent']\n```\n\n### Customizing the database set\n\nUnder default behavior, any REST module will use `Model.all()` as the database set on every operation.\n\nWhen you need to customize it, you can use the `get_dbset` decorator. \nFor example, you may gonna use the Emmett auth module:\n\n```python\nfrom myapp import auth\n\n@tasks.get_dbset\ndef fetch_tasks():\n    return auth.user.tasks\n```\n\nor you may have some soft-deletions strategies and want to expose just the records which are not deleted:\n\n```python\n@tasks.get_dbset\ndef fetch_tasks():\n    return Task.where(lambda t: t.is_deleted == False)\n```\n\n### Customizing single row fetching\n\nUnder default behaviour, any REST module will use standard select to fetch the record on the `read` endpoint.\n\nWhen you need to customize it, you can use the `get_row` decorator.\n\nFor example, you may want to add a left join to the selection:\n\n```python\n@tasks.get_row\ndef fetch_row(dbset):\n    return dbset.select(\n        including=['many_relation'], limitby=(0, 1)\n    ).first()\n```\n\n### Customizing routed methods\n\nYou can customize every route of the REST module using its `index`, `create`, `read`, `update` and `delete` decorators. In the next examples we'll override the routes with the default ones, in order to show the original code behind the default routes.\n\n```python\nfrom emmett import request\n\n@tasks.index()\nasync def task_list(dbset):\n    pagination = tasks.get_pagination()\n    sort = tasks.get_sort()\n    rows = dbset.select(paginate=pagination, orderby=sort)\n    return tasks.serialize_many(rows, dbset, pagination)\n```\n\nAs you can see, an *index* method should accept the `dbset` parameter, that is injected by the module. This is the default one or the one you defined with the `get_dbset` decorator.\n\n```python\n@tasks.read()\nasync def task_single(row):\n    return tasks.serialize_one(row)\n```\n\nThe *read* method should accept the `row` parameter that is injected by the module. Under default behaviour the module won't call your method if it doesn't find the requested record, but instead will return a 404 HTTP response.\n\n```python\n@tasks.create()\nasync def task_new():\n    response.status = 201\n    attrs = await tasks.parse_params()\n    r = Task.create(**attrs)\n    if r.errors:\n        response.status = 422\n        return tasks.error_422(r.errors)\n    return tasks.serialize_one(r.id)\n```\n\nThe *create* method won't need any parameters, and is responsible of creating new records in the database.\n\n```python\n@tasks.update()\nasync def task_edit(dbset, rid):\n    attrs = await tasks.parse_params()\n    r = dbset.where(Task.id == rid).validate_and_update(**attrs)\n    if r.errors:\n        response.status = 422\n        return tasks.error_422(r.errors)\n    elif not r.updated:\n        response.status = 404\n        return tasks.error_404()\n    row = Task.get(rid)\n    return tasks.serialize_one(row)\n```\n\n```python\n@tasks.delete()\ndef task_del(dbset, rid):\n    r = dbset.where(Task.id == rid).delete()\n    if not r:\n        response.status = 404\n        return self.error_404()\n    return {}\n```\n\nThe *update* and *delete* methods are quite similar, since they should accept the `dbset` parameter and the `rid` one, which will be the record id requested by the client.\n\nAll the decorators accept an additional `pipeline` parameter that you can use to add custom pipes to the routed function:\n\n```python\n@tasks.index(pipeline=[MyCustomPipe()])\ndef task_index:\n    # code\n```\n\n### Customizing errors\n\nYou can define custom methods for the HTTP 400, 404 and 422 errors that will generate the JSON output using the `on_400`, `on_404` and `on_422` decorators:\n\n```python\n@tasks.on_400\ndef task_400err():\n    return {'error': 'this is my 400 error'}\n\n@tasks.on_404\ndef task_404err():\n    return {'error': 'this is my 404 error'}\n    \n@tasks.on_422\ndef task_422err(errors):\n    return {'error': 422, 'validation': errors.as_dict()}\n```\n\n### Customizing meta generation\n\nYou can define custom method for the `meta` generation using the appropriate `meta_builder` decorator:\n\n```python\n@tasks.meta_builder\ndef _tasks_meta(self, dbset, pagination):\n    count = dbset.count()\n    page, page_size = pagination\n    total_pages = math.ceil(count / page_size)\n    return {\n        'page': page,\n        'page_prev': page - 1 if page > 1 else None,\n        'page_next': page + 1 if page < total_pages else None,\n        'total_pages': total_pages,\n        'total_objects': count\n    }\n```\n\n### Serialization\n\nUnder the default behaviour, the REST extension will use the `form_rw` attribute of the involved model, and overwrite the results with the contents of the `rest_rw` attribute if present.\n\nFor example, with this model:\n\n```python\nfrom emmett.orm import Model, Field\n\nclass Task(Model):\n    title = Field.string()\n    is_completed = Field.bool()\n    created_at = Field.datetime()\n    \n    form_rw = {\n        'id': False,\n        'created_at': False\n    }\n```\n\nthe REST extension will serialize just the *title* and the *is_completed* fields, while with this:\n\n```python\nfrom emmett.orm import Model, Field\n\nclass Task(Model):\n    title = Field.string()\n    is_completed = Field.bool()\n    created_at = Field.datetime()\n    \n    form_rw = {\n        'id': False,\n        'created_at': False\n    }\n    \n    rest_rw = {\n        'id': True\n    }\n```\n\nthe REST extension will serialize also the *id* field.\n\n#### Serializers\n\nWhenever you need more control over the serialization, you can use the `Serializer` class of the REST extension:\n\n```python\nfrom emmett_rest import Serializer\n\nclass TaskSerializer(Serializer):\n    attributes = ['id', 'title']\n    \ntasks = app.rest_module(\n    __name__, 'api_task', Task, serializer=TaskSerializer, url_prefix='tasks')\n```\n\nSerializers are handy when you want to add custom function to serialize something present in your rows. For instance, let's say you have a very simple tagging system:\n\n```python\nfrom emmett.orm import belongs_to, has_many\n\nclass Task(Model):\n    has_many({'tags': 'TaskTag'})\n\nclass TaskTag(Model):\n    belongs_to('task')\n    name = Field.string()\n```\n\nand you want to serialize the tags as an embedded list in your task. Then you just have to add a `tags` method to your serializer:\n\n```python\nclass TaskSerializer(Serializer):\n    attributes = ['id', 'title']\n    \n    def tags(self, row):\n        return row.tags().column('name')\n```\n\nThis is the complete list of rules that the extension will take over serializers:\n\n- `attributes` is read as first step\n- the `form_rw` and `rest_rw` attributes of the model are used to fill `attributes` list when this is empty\n- the fields in the `include` list will be added to `attributes`\n- the fields in the `exclude` list will be removed from `attributes`\n- every method defined in the serializer not starting with `_` will be called over serialization and its return value will be added to the JSON object in a key named as the method\n\nYou can also use different serialization for the list route and the other ones:\n\n```python\nfrom emmett_rest import Serializer, serialize\n\nclass TaskSerializer(Serializer):\n    attributes = ['id', 'title']\n    \nclass TaskDetailSerializer(TaskSerializer):\n    include = ['is_completed']\n    \ntasks = app.module(\n    __name__, 'api_task', Task, \n    serializer=TaskDetailSerializer, url_prefix='tasks')\n\n@tasks.index()\ndef task_list(dbset):\n    rows = dbset.select(paginate=tasks.get_pagination())\n    return serialize(rows, TaskSerializer)\n```\n\n> **Note:** under default behaviour the `serialize` method will use the serializer passed to the module.\n\n### Parsing input\n\nOpposite to the serialization, you will have input parsing to parse JSON requests and perform operations on the records.\n\nUnder the default behaviour, the REST extension will use the `form_rw` attribute of the involved model, and overwrite the results with the contents of the `rest_rw` attribute if present.\n\nFor example, with this model:\n\n```python\nfrom emmett.orm import Model, Field\n\nclass Task(Model):\n    title = Field.string()\n    is_completed = Field.bool()\n    created_at = Field.datetime()\n    \n    form_rw = {\n        'id': False,\n        'created_at': False\n    }\n```\n\nthe REST extension will parse the input to allow just the *title* and the *is_completed* fields, while with this:\n\n```python\nfrom emmett.orm import Model, Field\n\nclass Task(Model):\n    title = Field.string()\n    is_completed = Field.bool()\n    created_at = Field.datetime()\n    \n    form_rw = {\n        'id': False,\n        'created_at': False\n    }\n    \n    rest_rw = {\n        'id': (True, False)\n        'created_at': True\n    }\n```\n\nthe REST extension will allow also the *created_at* field.\n\n#### Parsers\n\nVery similarly to the `Serializer` class, the extension provides also a `Parser` one:\n\n```python\nfrom emmett_rest import Parser\n\nclass TaskParser(Parser):\n    attributes = ['title']\n    \ntasks = app.rest_module(\n    __name__, app, 'api_task', Task, parser=TaskParser, url_prefix='tasks')\n```\n\nAs for serializers, you can define `attributes`, `include` and `exclude` lists in a parser, and add custom methods that will parse the params:\n\n```python\nclass TaskParser(Parser):\n    attributes = ['title']\n    \n    def created_at(self, params):\n        # some code\n```\n\nThere's also an additional attribute that you can set over a `Parser` which is the `envelope` one, if you expect to have enveloped bodies over `POST`, `PUT` and `PATCH` requests.\n\n### Pagination\n\nREST modules perform pagination over the listing routes under the default behaviour. This is performed with the `paginate` option during the select and the call to the `get_pagination` method.\n\nYou can customize the name of the query params or the default page sizes with the extension configuration, or you can override the method completely with subclassing.\n\n### Callbacks\n\nUnless overridden, the default `create`, `update` and `delete` methods invoke callbacks you can attach to the module using the approriate decorator. Here is the complete list:\n\n| callback | arguments| description |\n| --- | --- | --- |\n| before\\_create | `[sdict]` | called before the record insertion |\n| before\\_update | `[int, sdict]` | called before the record gets update |\n| after\\_parse\\_params | `[sdict]` | called after params are loaded from the request body |\n| after\\_create | `[Row]` | called after the record insertion |\n| after\\_update | `[Row]` | called after the record gets updated |\n| after\\_delete | `[int]` | called after the record gets deleted |\n\nFor example, you might need to notify some changes:\n\n```python\n@tasks.after_create\ndef _notify_task_creation(row):\n    my_publishing_system.notify(\n        f\"Task {row['title']} was added\"\n    )\n```\n\n### Query language\n\nThe `where` query parameter allow, within the fields specified in `query_allowed_fields`, to query records in the listing routes using a JSON object.\n\nThe query language is inspired to the MongoDB query language, and provides the following operators:\n\n| operator | argument type | description |\n| --- | --- | --- |\n| $and | `List[Dict[str, Any]]` | logical AND |\n| $or | `List[Dict[str, Any]]` | logical OR |\n| $not | `Dict[str, Any]` | logical NOT |\n| $eq | `Any` | matches specified value |\n| $ne | `Any` | inverse of $eq |\n| $in | `List[Any]` | matches any of the values in list |\n| $nin | `List[Any]` | inverse of $in |\n| $lt | `Union[int, float, str]` | matches values less than specified value |\n| $gt | `Union[int, float, str]` | matches values greater than specified value |\n| $lte | `Union[int, float, str]` | matches values less than or equal to specified value |\n| $gte | `Union[int, float, str]` | matches values greater than or equal to specified value |\n| $exists | `bool` | matches not null or null values |\n| $regex | `str` | matches specified regex expression |\n| $iregex | `str` | case insensitive $regex |\n\nThe JSON condition always have fields' names as keys (except for `$and`, `$or`, `$not`) and operators as values, where `$eq` is the default one:\n\n```json\n{\n    \"is_completed\": false,\n    \"priority\": {\"$gte\": 5}\n}\n```\n\n### Customizing REST modules\n\n#### Extension options\n\nThis is the list of all the configuration variables available on the extension for customization \u2013 the default values are set:\n\n```python\napp.config.REST.default_module_class = RESTModule\napp.config.REST.default_serializer = Serializer\napp.config.REST.default_parser = Parser\napp.config.REST.page_param = 'page'\napp.config.REST.pagesize_param = 'page_size'\napp.config.REST.sort_param = 'sort_by'\napp.config.REST.query_param = 'where'\napp.config.REST.min_pagesize = 10\napp.config.REST.max_pagesize = 25\napp.config.REST.default_pagesize = 20\napp.config.REST.default_sort = 'id'\napp.config.REST.base_path = '/'\napp.config.REST.base_id_path = '/<int:rid>'\napp.config.REST.list_envelope = 'data'\napp.config.REST.single_envelope = False\napp.config.REST.groups_envelope = 'data'\napp.config.REST.use_envelope_on_parse = False\napp.config.REST.serialize_meta = True\napp.config.REST.meta_envelope = 'meta'\napp.config.REST.default_enabled_methods = [\n    'index',\n    'create',\n    'read',\n    'update',\n    'delete'\n]\napp.config.REST.default_disabled_methods = []\n```\n\nThis configuration will be used by all the REST modules you create, unless overridden.\n\n#### Subclassing\n\nUnder the default behavior, every REST module will use the `RESTModule` class. You can create as many subclasses from this one when you need to apply the same behaviour to several modules:\n\n```python\nfrom emmett_rest import RESTModule\n\nclass MyRESTModule(RESTModule):\n    def init(self):\n        self.disabled_methods = ['delete']\n        self.index_pipeline.append(MyCustomPipe())\n        self.list_envelope = 'objects'\n        self.single_envelope = self.model.__name__.lower()\n        \n    def _get_dbset(self):\n        return self.model.where(lambda m: m.user == session.user.id)\n        \n    def _index(self, dbset):\n        rows = dbset.select(paginate=self.get_pagination())\n        rv = self.serialize_many(rows)\n        rv['meta'] = {'total': dbset.count()}\n        return rv\n        \ntasks = app.rest_module(\n    __name__, app, 'api_task', Task, url_prefix='tasks', \n    module_class=MyRESTModule)\ntags = app.rest_module(\n    __name__, app, 'api_tag', Tag, url_prefix='tags',\n    module_class=MyRESTModule)\n```\n\nAs you can see, we defined a subclass of the `RESTModule` one and used the `init` method to customize the class initialization for our needs. We **strongly** recommend to use this method and avoid overriding the `__init__` of the class unless you really know what you're doing.\n\nUsing the `init` method, we disabled the *delete* route over the module, added a custom pipe over the *index* route and configured the envelope rules.\n\nHere is a list of variables you may want to change inside the `init` method:\n\n- model\n- serializer\n- parser\n- enabled\\_methods\n- disabled\\_methods\n- list\\_envelope\n- single\\_envelope\n- meta\\_envelope\n- groups\\_envelope\n- use\\_envelope\\_on\\_parsing\n\nAlso, this is the complete list of the pipeline variables and their default values:\n\n```python\ndef init(self):\n    self.index_pipeline = [SetFetcher(self), self._json_query_pipe]\n    self.create_pipeline = []\n    self.read_pipeline = [SetFetcher(self), RecordFetcher(self)]\n    self.update_pipeline = [SetFetcher(self)]\n    self.delete_pipeline = [SetFetcher(self)]\n    self.group_pipeline = [\n        self._group_field_pipe,\n        SetFetcher(self),\n        self._json_query_pipe\n    ]\n    self.stats_pipeline = [\n        self._stats_field_pipe,\n        SetFetcher(self),\n        self._json_query_pipe\n    ]\n    self.sample_pipeline = [SetFetcher(self), self._json_query_pipe]\n```\n\nWe've also overridden the methods for the database set retrieval and the *index* route. As you can see, these methods are starting with the `_` since are the default ones and you can still override them with decorators. This is the complete list of methods you may want to override instead of using decorators:\n\n- `_get_dbset`\n- `_get_row` \n- `_index`\n- `_create`\n- `_read`\n- `_update`\n- `_delete`\n- `_group`\n- `_stats`\n- `_sample`\n- `_build_meta`\n- `build_error_400`\n- `build_error_404`\n- `build_error_422`\n\nThere are some other methods you may need to override, like the `get_pagination` one or the serialization ones. Please, check the source code of the `RESTModule` class for further needs.\n\n## License\n\nEmmett-REST is released under BSD license. Check the LICENSE file for more details.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emmett-framework/rest", "keywords": "rest,web,emmett", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "emmett-rest", "package_url": "https://pypi.org/project/emmett-rest/", "platform": "", "project_url": "https://pypi.org/project/emmett-rest/", "project_urls": {"Homepage": "https://github.com/emmett-framework/rest", "Issue Tracker": "https://github.com/emmett-framework/rest/issues", "Repository": "https://github.com/emmett-framework/rest"}, "release_url": "https://pypi.org/project/emmett-rest/1.0.0/", "requires_dist": ["emmett (>=2.0,<3.0)"], "requires_python": ">=3.7,<4.0", "summary": "REST extension for Emmett framework", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Emmett-REST</h1>\n<p>Emmett-REST is a REST extension for <a href=\"https://emmett.sh\" rel=\"nofollow\">Emmett framework</a>.</p>\n<p><a href=\"https://pypi.python.org/pypi/Emmett-REST\" rel=\"nofollow\"><img alt=\"pip version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c963116197e61a270d5c03447d28f7dc68521ee0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f656d6d6574742d726573742e7376673f7374796c653d666c6174\"></a>\n<img alt=\"Tests Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/431949319daa81af478af845005f1b4a5b4b86c1/68747470733a2f2f6769746875622e636f6d2f656d6d6574742d6672616d65776f726b2f726573742f776f726b666c6f77732f54657374732f62616467652e737667\"></p>\n<h2>In a nutshell</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"kn\">from</span> <span class=\"nn\">emmett_rest</span> <span class=\"kn\">import</span> <span class=\"n\">REST</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">()</span>\n    <span class=\"n\">is_completed</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">use_extension</span><span class=\"p\">(</span><span class=\"n\">REST</span><span class=\"p\">)</span>\n\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">rest_module</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">'api_task'</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'tasks'</span><span class=\"p\">)</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">query_allowed_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'is_completed'</span><span class=\"p\">]</span>\n</pre>\n<p>Output of <code>http://{host}/tasks?where={\"is_completed\": false}</code>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"meta\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"object\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"total_objects\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"has_more\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Some task\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"is_completed\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Installation</h2>\n<p>You can install Emmett-REST using pip:</p>\n<pre><code>pip install Emmett-REST\n</code></pre>\n<p>And add it to your Emmett application:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett_rest</span> <span class=\"kn\">import</span> <span class=\"n\">REST</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">use_extension</span><span class=\"p\">(</span><span class=\"n\">REST</span><span class=\"p\">)</span>\n</pre>\n<h2>Usage</h2>\n<p>The Emmett-REST extension is intended to be used with Emmett models, and it uses application modules to build APIs over them.</p>\n<p>Let's say, for example, that you have a task manager app with a <code>Task</code> model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">()</span>\n    <span class=\"n\">is_completed</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">()</span>\n    <span class=\"n\">spent_time</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">()</span>\n</pre>\n<p>Then, in order to expose REST apis for your <code>Task</code> model, you can use the <code>rest_module</code> method on your application or on any application module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">myapp</span> <span class=\"kn\">import</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">Task</span>\n\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">rest_module</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">'api_task'</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'tasks'</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, the usage is very similar to the Emmett application modules, but we also passed the involved model to the module initialization.</p>\n<p>This single line is enough to have a really simple REST api over the <code>Task</code> model, since under the default behaviour rest modules will expose 5 different routes:</p>\n<ul>\n<li>an <em>index</em> route that will respond to <code>GET</code> requests on <code>/tasks</code> path listing all the tasks in the database</li>\n<li>a <em>read</em> route that will respond to <code>GET</code> requests on <code>/tasks/&lt;int:rid&gt;</code> path returning a single task corresponding to the record id of the <em>rid</em> variable</li>\n<li>a <em>create</em> route that will respond to <code>POST</code> requests on <code>/tasks</code> that will create a new task in the database</li>\n<li>an <em>update</em> route that will respond to <code>PUT</code> or <code>PATCH</code> requests on <code>/tasks/&lt;int:rid&gt;</code> that will update the task corresponding to the record id of the <em>rid</em> variable</li>\n<li>a <em>delete</em> route that will respond to <code>DELETE</code> requests on <code>/tasks/&lt;int:rid&gt;</code> that will delete the task corresponding to the record id of the <em>rid</em> variable.</li>\n</ul>\n<p>Listing endpoints accepts some query parameters by default, and specifically:</p>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>page</td>\n<td>1</td>\n<td>page to return</td>\n</tr>\n<tr>\n<td>page_size</td>\n<td>20</td>\n<td>number of records per page to return</td>\n</tr>\n<tr>\n<td>sort_by</td>\n<td>id</td>\n<td>field to sort records by (-field for desc)</td>\n</tr>\n<tr>\n<td>where</td>\n<td>{}</td>\n<td>json dumped string for querying</td>\n</tr></tbody></table>\n<h3>Additional routes</h3>\n<p>Emmett-REST also provides some additional not CRUD endpoints. Let's see them specifically.</p>\n<h4>Sample route</h4>\n<p>It behaves like the <em>index</em> route, but gets records randomly. As a consequence, the <code>sort_by</code> parameter gets ignored.</p>\n<p>Responds to <code>GET</code> requests on <code>{base_path}/sample</code> endpoint, and can be activated adding <code>'sample'</code> to the enabled methods on module definition or in the extension settings.</p>\n<h4>Grouping route</h4>\n<p>Responds to <code>GET</code> requests on <code>{base_path}/group/&lt;str:field&gt;</code> endpoint, and can be activated adding <code>'group'</code> to the enabled methods on module definition or in the extension settings.</p>\n<p>It groups by value and count records for the given field. Results of calling <code>http://{host}/tasks/group/is_completed</code> looks like:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"meta\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"object\"</span><span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"total_objects\"</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"has_more\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"count\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"count\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Stats route</h4>\n<p>Responds to <code>GET</code> requests on <code>{base_path}/stats</code> endpoint, and can be activated adding <code>'stats'</code> to the enabled methods on module definition or in the extension settings. Parse a list of fields from the comma separated <code>fields</code> query parameter.</p>\n<p>It return minimum, maximum and average values of the records for the specified fields. Results of calling <code>http://{host}/tasks/stats?fields=spent_time</code> looks like:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"spent_time\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"max\"</span><span class=\"p\">:</span> <span class=\"mi\">3600</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"avg\"</span><span class=\"p\">:</span> <span class=\"mi\">27</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>REST module parameters</h3>\n<p>The <code>rest_module</code> method accepts several parameters (<em>bold ones are required</em>) for its configuration:</p>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>import_name</strong></td>\n<td></td>\n<td>as for standard modules</td>\n</tr>\n<tr>\n<td><strong>name</strong></td>\n<td></td>\n<td>as for standard modules</td>\n</tr>\n<tr>\n<td><strong>model</strong></td>\n<td></td>\n<td>the model to use</td>\n</tr>\n<tr>\n<td>serializer</td>\n<td><code>None</code></td>\n<td>a class to be used for serialization</td>\n</tr>\n<tr>\n<td>parser</td>\n<td><code>None</code></td>\n<td>a class to be used for parsing</td>\n</tr>\n<tr>\n<td>enabled_methods</td>\n<td><code>str</code> list: index, create, read, update, delete</td>\n<td>the routes that should be enabled on the module</td>\n</tr>\n<tr>\n<td>disabled_methods</td>\n<td><code>[]</code></td>\n<td>the routes that should be disabled on the module</td>\n</tr>\n<tr>\n<td>list_envelope</td>\n<td>data</td>\n<td>the envelope to use on the index route</td>\n</tr>\n<tr>\n<td>single_envelope</td>\n<td><code>False</code></td>\n<td>the envelope to use on all the routes except for lists endpoints</td>\n</tr>\n<tr>\n<td>meta_envelope</td>\n<td>meta</td>\n<td>the envelope to use for meta data</td>\n</tr>\n<tr>\n<td>groups_envelope</td>\n<td>data</td>\n<td>the envelope to use for the grouping endpoint</td>\n</tr>\n<tr>\n<td>use_envelope_on_parse</td>\n<td><code>False</code></td>\n<td>if set to <code>True</code> will use the envelope specified in <em>single_envelope</em> option also on parsing</td>\n</tr>\n<tr>\n<td>serialize_meta</td>\n<td><code>True</code></td>\n<td>whether to serialize meta data on lists endpoint</td>\n</tr>\n<tr>\n<td>url_prefix</td>\n<td><code>None</code></td>\n<td>as for standard modules</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td><code>None</code></td>\n<td>as for standard modules</td>\n</tr>\n<tr>\n<td>module_class</td>\n<td><code>RestModule</code></td>\n<td>the module class to use</td>\n</tr></tbody></table>\n<h3>REST module properties</h3>\n<p>Some of the REST module parameters needs to be configured using attributes, specifically:</p>\n<table>\n<thead>\n<tr>\n<th>attribute</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowed_sorts</td>\n<td>list of fields that can be used with <code>sort_by</code> parameter</td>\n</tr>\n<tr>\n<td>query_allowed_fields</td>\n<td>list of fields that can be used with <code>where</code> parameter</td>\n</tr>\n<tr>\n<td>grouping_allowed_fields</td>\n<td>list of fields that can be used in <code>group</code> route</td>\n</tr>\n<tr>\n<td>stats_allowed_fields</td>\n<td>list of fields that can be used in <code>stats</code> route</td>\n</tr></tbody></table>\n<p>An example would be:</p>\n<pre><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">allowed_sorts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'created_at'</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">query_allowed_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'is_completed'</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">grouping_allowed_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'is_completed'</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">stats_allowed_fields</span> <span class=\"p\">[</span><span class=\"s1\">'time_spent'</span><span class=\"p\">]</span>\n</pre>\n<h3>Customizing the database set</h3>\n<p>Under default behavior, any REST module will use <code>Model.all()</code> as the database set on every operation.</p>\n<p>When you need to customize it, you can use the <code>get_dbset</code> decorator.\nFor example, you may gonna use the Emmett auth module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">myapp</span> <span class=\"kn\">import</span> <span class=\"n\">auth</span>\n\n<span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">get_dbset</span>\n<span class=\"k\">def</span> <span class=\"nf\">fetch_tasks</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">tasks</span>\n</pre>\n<p>or you may have some soft-deletions strategies and want to expose just the records which are not deleted:</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">get_dbset</span>\n<span class=\"k\">def</span> <span class=\"nf\">fetch_tasks</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">is_deleted</span> <span class=\"o\">==</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h3>Customizing single row fetching</h3>\n<p>Under default behaviour, any REST module will use standard select to fetch the record on the <code>read</code> endpoint.</p>\n<p>When you need to customize it, you can use the <code>get_row</code> decorator.</p>\n<p>For example, you may want to add a left join to the selection:</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">get_row</span>\n<span class=\"k\">def</span> <span class=\"nf\">fetch_row</span><span class=\"p\">(</span><span class=\"n\">dbset</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">dbset</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span>\n        <span class=\"n\">including</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'many_relation'</span><span class=\"p\">],</span> <span class=\"n\">limitby</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n</pre>\n<h3>Customizing routed methods</h3>\n<p>You can customize every route of the REST module using its <code>index</code>, <code>create</code>, <code>read</code>, <code>update</code> and <code>delete</code> decorators. In the next examples we'll override the routes with the default ones, in order to show the original code behind the default routes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett</span> <span class=\"kn\">import</span> <span class=\"n\">request</span>\n\n<span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">task_list</span><span class=\"p\">(</span><span class=\"n\">dbset</span><span class=\"p\">):</span>\n    <span class=\"n\">pagination</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">get_pagination</span><span class=\"p\">()</span>\n    <span class=\"n\">sort</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">get_sort</span><span class=\"p\">()</span>\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">dbset</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">paginate</span><span class=\"o\">=</span><span class=\"n\">pagination</span><span class=\"p\">,</span> <span class=\"n\">orderby</span><span class=\"o\">=</span><span class=\"n\">sort</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">serialize_many</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">dbset</span><span class=\"p\">,</span> <span class=\"n\">pagination</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, an <em>index</em> method should accept the <code>dbset</code> parameter, that is injected by the module. This is the default one or the one you defined with the <code>get_dbset</code> decorator.</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">task_single</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">serialize_one</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</pre>\n<p>The <em>read</em> method should accept the <code>row</code> parameter that is injected by the module. Under default behaviour the module won't call your method if it doesn't find the requested record, but instead will return a 404 HTTP response.</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">task_new</span><span class=\"p\">():</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">201</span>\n    <span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">parse_params</span><span class=\"p\">()</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">attrs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">422</span>\n        <span class=\"k\">return</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">error_422</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">serialize_one</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n<p>The <em>create</em> method won't need any parameters, and is responsible of creating new records in the database.</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">task_edit</span><span class=\"p\">(</span><span class=\"n\">dbset</span><span class=\"p\">,</span> <span class=\"n\">rid</span><span class=\"p\">):</span>\n    <span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">parse_params</span><span class=\"p\">()</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dbset</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">rid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">validate_and_update</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">attrs</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">422</span>\n        <span class=\"k\">return</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">error_422</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">updated</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">404</span>\n        <span class=\"k\">return</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">error_404</span><span class=\"p\">()</span>\n    <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">rid</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">serialize_one</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">task_del</span><span class=\"p\">(</span><span class=\"n\">dbset</span><span class=\"p\">,</span> <span class=\"n\">rid</span><span class=\"p\">):</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">dbset</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">rid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">404</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_404</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>The <em>update</em> and <em>delete</em> methods are quite similar, since they should accept the <code>dbset</code> parameter and the <code>rid</code> one, which will be the record id requested by the client.</p>\n<p>All the decorators accept an additional <code>pipeline</code> parameter that you can use to add custom pipes to the routed function:</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">pipeline</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">MyCustomPipe</span><span class=\"p\">()])</span>\n<span class=\"k\">def</span> <span class=\"nf\">task_index</span><span class=\"p\">:</span>\n    <span class=\"c1\"># code</span>\n</pre>\n<h3>Customizing errors</h3>\n<p>You can define custom methods for the HTTP 400, 404 and 422 errors that will generate the JSON output using the <code>on_400</code>, <code>on_404</code> and <code>on_422</code> decorators:</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">on_400</span>\n<span class=\"k\">def</span> <span class=\"nf\">task_400err</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"s1\">'this is my 400 error'</span><span class=\"p\">}</span>\n\n<span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">on_404</span>\n<span class=\"k\">def</span> <span class=\"nf\">task_404err</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"s1\">'this is my 404 error'</span><span class=\"p\">}</span>\n    \n<span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">on_422</span>\n<span class=\"k\">def</span> <span class=\"nf\">task_422err</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"mi\">422</span><span class=\"p\">,</span> <span class=\"s1\">'validation'</span><span class=\"p\">:</span> <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()}</span>\n</pre>\n<h3>Customizing meta generation</h3>\n<p>You can define custom method for the <code>meta</code> generation using the appropriate <code>meta_builder</code> decorator:</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">meta_builder</span>\n<span class=\"k\">def</span> <span class=\"nf\">_tasks_meta</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dbset</span><span class=\"p\">,</span> <span class=\"n\">pagination</span><span class=\"p\">):</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">dbset</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n    <span class=\"n\">page</span><span class=\"p\">,</span> <span class=\"n\">page_size</span> <span class=\"o\">=</span> <span class=\"n\">pagination</span>\n    <span class=\"n\">total_pages</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">/</span> <span class=\"n\">page_size</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"n\">page</span><span class=\"p\">,</span>\n        <span class=\"s1\">'page_prev'</span><span class=\"p\">:</span> <span class=\"n\">page</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">page</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">'page_next'</span><span class=\"p\">:</span> <span class=\"n\">page</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">page</span> <span class=\"o\">&lt;</span> <span class=\"n\">total_pages</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">'total_pages'</span><span class=\"p\">:</span> <span class=\"n\">total_pages</span><span class=\"p\">,</span>\n        <span class=\"s1\">'total_objects'</span><span class=\"p\">:</span> <span class=\"n\">count</span>\n    <span class=\"p\">}</span>\n</pre>\n<h3>Serialization</h3>\n<p>Under the default behaviour, the REST extension will use the <code>form_rw</code> attribute of the involved model, and overwrite the results with the contents of the <code>rest_rw</code> attribute if present.</p>\n<p>For example, with this model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">()</span>\n    <span class=\"n\">is_completed</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">()</span>\n    \n    <span class=\"n\">form_rw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">'created_at'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>the REST extension will serialize just the <em>title</em> and the <em>is_completed</em> fields, while with this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">()</span>\n    <span class=\"n\">is_completed</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">()</span>\n    \n    <span class=\"n\">form_rw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">'created_at'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"n\">rest_rw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>the REST extension will serialize also the <em>id</em> field.</p>\n<h4>Serializers</h4>\n<p>Whenever you need more control over the serialization, you can use the <code>Serializer</code> class of the REST extension:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett_rest</span> <span class=\"kn\">import</span> <span class=\"n\">Serializer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TaskSerializer</span><span class=\"p\">(</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">]</span>\n    \n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">rest_module</span><span class=\"p\">(</span>\n    <span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">'api_task'</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">TaskSerializer</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'tasks'</span><span class=\"p\">)</span>\n</pre>\n<p>Serializers are handy when you want to add custom function to serialize something present in your rows. For instance, let's say you have a very simple tagging system:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett.orm</span> <span class=\"kn\">import</span> <span class=\"n\">belongs_to</span><span class=\"p\">,</span> <span class=\"n\">has_many</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">has_many</span><span class=\"p\">({</span><span class=\"s1\">'tags'</span><span class=\"p\">:</span> <span class=\"s1\">'TaskTag'</span><span class=\"p\">})</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TaskTag</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">belongs_to</span><span class=\"p\">(</span><span class=\"s1\">'task'</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">()</span>\n</pre>\n<p>and you want to serialize the tags as an embedded list in your task. Then you just have to add a <code>tags</code> method to your serializer:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TaskSerializer</span><span class=\"p\">(</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">]</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">tags</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n</pre>\n<p>This is the complete list of rules that the extension will take over serializers:</p>\n<ul>\n<li><code>attributes</code> is read as first step</li>\n<li>the <code>form_rw</code> and <code>rest_rw</code> attributes of the model are used to fill <code>attributes</code> list when this is empty</li>\n<li>the fields in the <code>include</code> list will be added to <code>attributes</code></li>\n<li>the fields in the <code>exclude</code> list will be removed from <code>attributes</code></li>\n<li>every method defined in the serializer not starting with <code>_</code> will be called over serialization and its return value will be added to the JSON object in a key named as the method</li>\n</ul>\n<p>You can also use different serialization for the list route and the other ones:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett_rest</span> <span class=\"kn\">import</span> <span class=\"n\">Serializer</span><span class=\"p\">,</span> <span class=\"n\">serialize</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TaskSerializer</span><span class=\"p\">(</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">]</span>\n    \n<span class=\"k\">class</span> <span class=\"nc\">TaskDetailSerializer</span><span class=\"p\">(</span><span class=\"n\">TaskSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'is_completed'</span><span class=\"p\">]</span>\n    \n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"p\">(</span>\n    <span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s1\">'api_task'</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">,</span> \n    <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">TaskDetailSerializer</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'tasks'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">task_list</span><span class=\"p\">(</span><span class=\"n\">dbset</span><span class=\"p\">):</span>\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">dbset</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">paginate</span><span class=\"o\">=</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">get_pagination</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">TaskSerializer</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p><strong>Note:</strong> under default behaviour the <code>serialize</code> method will use the serializer passed to the module.</p>\n</blockquote>\n<h3>Parsing input</h3>\n<p>Opposite to the serialization, you will have input parsing to parse JSON requests and perform operations on the records.</p>\n<p>Under the default behaviour, the REST extension will use the <code>form_rw</code> attribute of the involved model, and overwrite the results with the contents of the <code>rest_rw</code> attribute if present.</p>\n<p>For example, with this model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">()</span>\n    <span class=\"n\">is_completed</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">()</span>\n    \n    <span class=\"n\">form_rw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">'created_at'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>the REST extension will parse the input to allow just the <em>title</em> and the <em>is_completed</em> fields, while with this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">()</span>\n    <span class=\"n\">is_completed</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">()</span>\n    \n    <span class=\"n\">form_rw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">'created_at'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"n\">rest_rw</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"s1\">'created_at'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>the REST extension will allow also the <em>created_at</em> field.</p>\n<h4>Parsers</h4>\n<p>Very similarly to the <code>Serializer</code> class, the extension provides also a <code>Parser</code> one:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett_rest</span> <span class=\"kn\">import</span> <span class=\"n\">Parser</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TaskParser</span><span class=\"p\">(</span><span class=\"n\">Parser</span><span class=\"p\">):</span>\n    <span class=\"n\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span>\n    \n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">rest_module</span><span class=\"p\">(</span>\n    <span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'api_task'</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"n\">TaskParser</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'tasks'</span><span class=\"p\">)</span>\n</pre>\n<p>As for serializers, you can define <code>attributes</code>, <code>include</code> and <code>exclude</code> lists in a parser, and add custom methods that will parse the params:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TaskParser</span><span class=\"p\">(</span><span class=\"n\">Parser</span><span class=\"p\">):</span>\n    <span class=\"n\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">created_at</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"c1\"># some code</span>\n</pre>\n<p>There's also an additional attribute that you can set over a <code>Parser</code> which is the <code>envelope</code> one, if you expect to have enveloped bodies over <code>POST</code>, <code>PUT</code> and <code>PATCH</code> requests.</p>\n<h3>Pagination</h3>\n<p>REST modules perform pagination over the listing routes under the default behaviour. This is performed with the <code>paginate</code> option during the select and the call to the <code>get_pagination</code> method.</p>\n<p>You can customize the name of the query params or the default page sizes with the extension configuration, or you can override the method completely with subclassing.</p>\n<h3>Callbacks</h3>\n<p>Unless overridden, the default <code>create</code>, <code>update</code> and <code>delete</code> methods invoke callbacks you can attach to the module using the approriate decorator. Here is the complete list:</p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>arguments</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>before_create</td>\n<td><code>[sdict]</code></td>\n<td>called before the record insertion</td>\n</tr>\n<tr>\n<td>before_update</td>\n<td><code>[int, sdict]</code></td>\n<td>called before the record gets update</td>\n</tr>\n<tr>\n<td>after_parse_params</td>\n<td><code>[sdict]</code></td>\n<td>called after params are loaded from the request body</td>\n</tr>\n<tr>\n<td>after_create</td>\n<td><code>[Row]</code></td>\n<td>called after the record insertion</td>\n</tr>\n<tr>\n<td>after_update</td>\n<td><code>[Row]</code></td>\n<td>called after the record gets updated</td>\n</tr>\n<tr>\n<td>after_delete</td>\n<td><code>[int]</code></td>\n<td>called after the record gets deleted</td>\n</tr></tbody></table>\n<p>For example, you might need to notify some changes:</p>\n<pre><span class=\"nd\">@tasks</span><span class=\"o\">.</span><span class=\"n\">after_create</span>\n<span class=\"k\">def</span> <span class=\"nf\">_notify_task_creation</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"n\">my_publishing_system</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">\"Task </span><span class=\"si\">{</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> was added\"</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>Query language</h3>\n<p>The <code>where</code> query parameter allow, within the fields specified in <code>query_allowed_fields</code>, to query records in the listing routes using a JSON object.</p>\n<p>The query language is inspired to the MongoDB query language, and provides the following operators:</p>\n<table>\n<thead>\n<tr>\n<th>operator</th>\n<th>argument type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$and</td>\n<td><code>List[Dict[str, Any]]</code></td>\n<td>logical AND</td>\n</tr>\n<tr>\n<td>$or</td>\n<td><code>List[Dict[str, Any]]</code></td>\n<td>logical OR</td>\n</tr>\n<tr>\n<td>$not</td>\n<td><code>Dict[str, Any]</code></td>\n<td>logical NOT</td>\n</tr>\n<tr>\n<td>$eq</td>\n<td><code>Any</code></td>\n<td>matches specified value</td>\n</tr>\n<tr>\n<td>$ne</td>\n<td><code>Any</code></td>\n<td>inverse of $eq</td>\n</tr>\n<tr>\n<td>$in</td>\n<td><code>List[Any]</code></td>\n<td>matches any of the values in list</td>\n</tr>\n<tr>\n<td>$nin</td>\n<td><code>List[Any]</code></td>\n<td>inverse of $in</td>\n</tr>\n<tr>\n<td>$lt</td>\n<td><code>Union[int, float, str]</code></td>\n<td>matches values less than specified value</td>\n</tr>\n<tr>\n<td>$gt</td>\n<td><code>Union[int, float, str]</code></td>\n<td>matches values greater than specified value</td>\n</tr>\n<tr>\n<td>$lte</td>\n<td><code>Union[int, float, str]</code></td>\n<td>matches values less than or equal to specified value</td>\n</tr>\n<tr>\n<td>$gte</td>\n<td><code>Union[int, float, str]</code></td>\n<td>matches values greater than or equal to specified value</td>\n</tr>\n<tr>\n<td>$exists</td>\n<td><code>bool</code></td>\n<td>matches not null or null values</td>\n</tr>\n<tr>\n<td>$regex</td>\n<td><code>str</code></td>\n<td>matches specified regex expression</td>\n</tr>\n<tr>\n<td>$iregex</td>\n<td><code>str</code></td>\n<td>case insensitive $regex</td>\n</tr></tbody></table>\n<p>The JSON condition always have fields' names as keys (except for <code>$and</code>, <code>$or</code>, <code>$not</code>) and operators as values, where <code>$eq</code> is the default one:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"is_completed\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"priority\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"$gte\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Customizing REST modules</h3>\n<h4>Extension options</h4>\n<p>This is the list of all the configuration variables available on the extension for customization \u2013 the default values are set:</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">default_module_class</span> <span class=\"o\">=</span> <span class=\"n\">RESTModule</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">default_serializer</span> <span class=\"o\">=</span> <span class=\"n\">Serializer</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">default_parser</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">page_param</span> <span class=\"o\">=</span> <span class=\"s1\">'page'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">pagesize_param</span> <span class=\"o\">=</span> <span class=\"s1\">'page_size'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">sort_param</span> <span class=\"o\">=</span> <span class=\"s1\">'sort_by'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">query_param</span> <span class=\"o\">=</span> <span class=\"s1\">'where'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">min_pagesize</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">max_pagesize</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">default_pagesize</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">default_sort</span> <span class=\"o\">=</span> <span class=\"s1\">'id'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">base_path</span> <span class=\"o\">=</span> <span class=\"s1\">'/'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">base_id_path</span> <span class=\"o\">=</span> <span class=\"s1\">'/&lt;int:rid&gt;'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">list_envelope</span> <span class=\"o\">=</span> <span class=\"s1\">'data'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">single_envelope</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">groups_envelope</span> <span class=\"o\">=</span> <span class=\"s1\">'data'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">use_envelope_on_parse</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">serialize_meta</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">meta_envelope</span> <span class=\"o\">=</span> <span class=\"s1\">'meta'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">default_enabled_methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'index'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'create'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'read'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'update'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'delete'</span>\n<span class=\"p\">]</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"o\">.</span><span class=\"n\">default_disabled_methods</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre>\n<p>This configuration will be used by all the REST modules you create, unless overridden.</p>\n<h4>Subclassing</h4>\n<p>Under the default behavior, every REST module will use the <code>RESTModule</code> class. You can create as many subclasses from this one when you need to apply the same behaviour to several modules:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emmett_rest</span> <span class=\"kn\">import</span> <span class=\"n\">RESTModule</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyRESTModule</span><span class=\"p\">(</span><span class=\"n\">RESTModule</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">disabled_methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'delete'</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index_pipeline</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">MyCustomPipe</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">list_envelope</span> <span class=\"o\">=</span> <span class=\"s1\">'objects'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">single_envelope</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">_get_dbset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">==</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dbset</span><span class=\"p\">):</span>\n        <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">dbset</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">paginate</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_pagination</span><span class=\"p\">())</span>\n        <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">serialize_many</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">)</span>\n        <span class=\"n\">rv</span><span class=\"p\">[</span><span class=\"s1\">'meta'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"n\">dbset</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()}</span>\n        <span class=\"k\">return</span> <span class=\"n\">rv</span>\n        \n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">rest_module</span><span class=\"p\">(</span>\n    <span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'api_task'</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'tasks'</span><span class=\"p\">,</span> \n    <span class=\"n\">module_class</span><span class=\"o\">=</span><span class=\"n\">MyRESTModule</span><span class=\"p\">)</span>\n<span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">rest_module</span><span class=\"p\">(</span>\n    <span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'api_tag'</span><span class=\"p\">,</span> <span class=\"n\">Tag</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'tags'</span><span class=\"p\">,</span>\n    <span class=\"n\">module_class</span><span class=\"o\">=</span><span class=\"n\">MyRESTModule</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, we defined a subclass of the <code>RESTModule</code> one and used the <code>init</code> method to customize the class initialization for our needs. We <strong>strongly</strong> recommend to use this method and avoid overriding the <code>__init__</code> of the class unless you really know what you're doing.</p>\n<p>Using the <code>init</code> method, we disabled the <em>delete</em> route over the module, added a custom pipe over the <em>index</em> route and configured the envelope rules.</p>\n<p>Here is a list of variables you may want to change inside the <code>init</code> method:</p>\n<ul>\n<li>model</li>\n<li>serializer</li>\n<li>parser</li>\n<li>enabled_methods</li>\n<li>disabled_methods</li>\n<li>list_envelope</li>\n<li>single_envelope</li>\n<li>meta_envelope</li>\n<li>groups_envelope</li>\n<li>use_envelope_on_parsing</li>\n</ul>\n<p>Also, this is the complete list of the pipeline variables and their default values:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index_pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">SetFetcher</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_json_query_pipe</span><span class=\"p\">]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read_pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">SetFetcher</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"n\">RecordFetcher</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">SetFetcher</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete_pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">SetFetcher</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">group_pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_group_field_pipe</span><span class=\"p\">,</span>\n        <span class=\"n\">SetFetcher</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_json_query_pipe</span>\n    <span class=\"p\">]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats_pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stats_field_pipe</span><span class=\"p\">,</span>\n        <span class=\"n\">SetFetcher</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_json_query_pipe</span>\n    <span class=\"p\">]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sample_pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">SetFetcher</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_json_query_pipe</span><span class=\"p\">]</span>\n</pre>\n<p>We've also overridden the methods for the database set retrieval and the <em>index</em> route. As you can see, these methods are starting with the <code>_</code> since are the default ones and you can still override them with decorators. This is the complete list of methods you may want to override instead of using decorators:</p>\n<ul>\n<li><code>_get_dbset</code></li>\n<li><code>_get_row</code></li>\n<li><code>_index</code></li>\n<li><code>_create</code></li>\n<li><code>_read</code></li>\n<li><code>_update</code></li>\n<li><code>_delete</code></li>\n<li><code>_group</code></li>\n<li><code>_stats</code></li>\n<li><code>_sample</code></li>\n<li><code>_build_meta</code></li>\n<li><code>build_error_400</code></li>\n<li><code>build_error_404</code></li>\n<li><code>build_error_422</code></li>\n</ul>\n<p>There are some other methods you may need to override, like the <code>get_pagination</code> one or the serialization ones. Please, check the source code of the <code>RESTModule</code> class for further needs.</p>\n<h2>License</h2>\n<p>Emmett-REST is released under BSD license. Check the LICENSE file for more details.</p>\n\n          </div>"}, "last_serial": 7157595, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4a149fda901ab0e312474883cb07af05", "sha256": "9cbfea695a86cd2257b8f9db0f8106e8f29fa91cb949d16f4f5109f08fc45f18"}, "downloads": -1, "filename": "Emmett_REST-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a149fda901ab0e312474883cb07af05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 24202, "upload_time": "2020-05-03T15:34:24", "upload_time_iso_8601": "2020-05-03T15:34:24.461117Z", "url": "https://files.pythonhosted.org/packages/74/48/ee6a4c2a87d1e50fb6c3727612d8b682c865c945c307a6b8908eb77153cf/Emmett_REST-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3490b3acffb7ab09e562367c4dbeda6f", "sha256": "f3a1529d3fe5b4f03310d894c76756be5eb9c79f2f7c7b5cef83db120c5d0af9"}, "downloads": -1, "filename": "Emmett-REST-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3490b3acffb7ab09e562367c4dbeda6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 30018, "upload_time": "2020-05-03T15:34:23", "upload_time_iso_8601": "2020-05-03T15:34:23.282791Z", "url": "https://files.pythonhosted.org/packages/fe/c5/aaf08865d9efe7da6d1552f54ae4e63a203f4b590d3510ab352c6879b0b8/Emmett-REST-1.0.0.tar.gz", "yanked": false}], "1.0.0a1": [{"comment_text": "", "digests": {"md5": "8da1287e0baa68bd928bf8d22ae8085b", "sha256": "81bf95fe89974b7483d793d8748d5ea9a2a00a4f78f929267cac26f0796447d4"}, "downloads": -1, "filename": "Emmett_REST-1.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "8da1287e0baa68bd928bf8d22ae8085b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 23897, "upload_time": "2020-02-25T22:19:30", "upload_time_iso_8601": "2020-02-25T22:19:30.580698Z", "url": "https://files.pythonhosted.org/packages/c2/8c/6889cba9ebe17c3cbfb9ab14cb9278acdbc57fff00acaf4f6b31114ded00/Emmett_REST-1.0.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99ef94f2cf1e32183f225f46d2b84f87", "sha256": "ea922a008885ba10813ef1b861cbae1d549a45990d7be50e9d4c2fe50340927c"}, "downloads": -1, "filename": "Emmett-REST-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "99ef94f2cf1e32183f225f46d2b84f87", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 30023, "upload_time": "2020-02-25T22:19:27", "upload_time_iso_8601": "2020-02-25T22:19:27.463726Z", "url": "https://files.pythonhosted.org/packages/96/fd/1993e57710b2d5a22e1041444578acd8d667ef8cfcac02d9a9fab6f7208a/Emmett-REST-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "6d82d082f1dff7ce0bec26b8e702755c", "sha256": "8e01dbf39c56c56ec77f3036ce3de16a41442db82fc1375754ecedaf3b85a022"}, "downloads": -1, "filename": "Emmett_REST-1.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "6d82d082f1dff7ce0bec26b8e702755c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 23898, "upload_time": "2020-03-16T21:07:51", "upload_time_iso_8601": "2020-03-16T21:07:51.114234Z", "url": "https://files.pythonhosted.org/packages/b7/79/aa8d974632c6a1327ff03a7151044d2d6ebc614a20b0d340d256b3336453/Emmett_REST-1.0.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8610fcf77a5bad3ee1f9855554a1e0c6", "sha256": "8985929293c6d60e1e221cadf5f3f21dfb363f5fe662193e2e52930c6b7a5a1b"}, "downloads": -1, "filename": "Emmett-REST-1.0.0a2.tar.gz", "has_sig": false, "md5_digest": "8610fcf77a5bad3ee1f9855554a1e0c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 30045, "upload_time": "2020-03-16T21:07:48", "upload_time_iso_8601": "2020-03-16T21:07:48.726687Z", "url": "https://files.pythonhosted.org/packages/f1/0c/033246c8cbb1e9a47b56f5e8c0f395e0fd344959184f28d69b7f91ce9d84/Emmett-REST-1.0.0a2.tar.gz", "yanked": false}], "1.0.0b1": [{"comment_text": "", "digests": {"md5": "ee67c6fae10153cf2030e6d4dba34484", "sha256": "59ece28a7e4cb15354a4b59ac379537be397dec6e71bcb6826f384c5856f33e1"}, "downloads": -1, "filename": "Emmett_REST-1.0.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "ee67c6fae10153cf2030e6d4dba34484", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 23913, "upload_time": "2020-04-04T13:39:44", "upload_time_iso_8601": "2020-04-04T13:39:44.095680Z", "url": "https://files.pythonhosted.org/packages/32/97/cd0cb955adf6f0585d1d1d57899d7da22f591616270dc86661aaf3d1fd9d/Emmett_REST-1.0.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bec96b4d55d3e89cd31b051db095267", "sha256": "7beef5012d29e9ffd8fd3e2c3ec3cb2de981fa3a527fd47d9312db95acda57f3"}, "downloads": -1, "filename": "Emmett-REST-1.0.0b1.tar.gz", "has_sig": false, "md5_digest": "4bec96b4d55d3e89cd31b051db095267", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 30114, "upload_time": "2020-04-04T13:39:41", "upload_time_iso_8601": "2020-04-04T13:39:41.813885Z", "url": "https://files.pythonhosted.org/packages/ca/68/dc618fad76a1ecb88736989feded14af4f03f24f9d07fea50590791325bb/Emmett-REST-1.0.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a149fda901ab0e312474883cb07af05", "sha256": "9cbfea695a86cd2257b8f9db0f8106e8f29fa91cb949d16f4f5109f08fc45f18"}, "downloads": -1, "filename": "Emmett_REST-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a149fda901ab0e312474883cb07af05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 24202, "upload_time": "2020-05-03T15:34:24", "upload_time_iso_8601": "2020-05-03T15:34:24.461117Z", "url": "https://files.pythonhosted.org/packages/74/48/ee6a4c2a87d1e50fb6c3727612d8b682c865c945c307a6b8908eb77153cf/Emmett_REST-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3490b3acffb7ab09e562367c4dbeda6f", "sha256": "f3a1529d3fe5b4f03310d894c76756be5eb9c79f2f7c7b5cef83db120c5d0af9"}, "downloads": -1, "filename": "Emmett-REST-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3490b3acffb7ab09e562367c4dbeda6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 30018, "upload_time": "2020-05-03T15:34:23", "upload_time_iso_8601": "2020-05-03T15:34:23.282791Z", "url": "https://files.pythonhosted.org/packages/fe/c5/aaf08865d9efe7da6d1552f54ae4e63a203f4b590d3510ab352c6879b0b8/Emmett-REST-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:35 2020"}