{"info": {"author": "Joe Hillenbrand", "author_email": "joehillen@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "*********************************************\nJSONRPCake: a CLI JSON-RPC client for humans.\n*********************************************\n\n\nJSONRPCake is a **command line JSON-RPC client**\nthat wraps the jsonrpc-ns library.\nIt is a fork of `HTTPie`_ written by `Jakub Roztocil`_.\nIts goal is to make CLI interaction\nwith `JSON-RPC`_ 2.0 services as **human-friendly** as possible. It provides a\nsimple ``jsonrpc`` command that allows for sending arbitrary `JSON-RPC`_ requests using a\nsimple and natural syntax, and displays colorized responses. JSONRPCake can be used\nfor **testing, debugging**, and generally **interacting** with `JSON-RPC`_ servers.\n\nJSONRPCake is written in Python, and under the hood it uses the\n`jsonrpc-ns`_ and `Pygments`_ libraries.\n\n\n**Table of Contents**\n\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n\n=============\nMain Features\n=============\n\n* Expressive and intuitive syntax\n* Formatted and colorized terminal output\n* Built-in JSON support\n* Arbitrary request data\n\n\n============\nInstallation\n============\n\nThe latest **stable version** of JSONRPCake can always be installed or updated\nto via `pip`_:\n\n.. code-block:: bash\n\n    $ pip install --upgrade jsonrpcake\n\n\n=====\nUsage\n=====\n\n\nHello World:\n\n\n.. code-block:: bash\n\n    $ jsonrpc example.org:3000 hello\n\n\nSynopsis:\n\n.. code-block:: bash\n\n    $ jsonrpc ADDRESS:PORT METHOD [PARAMETER [PARAMETER [...]]]\n\nSee also ``jsonrpc --help``.\n\n\n--------\nExamples\n--------\n\n`JSON`_ params:\n\n.. code-block:: bash\n\n    $ jsonrpc example.org:3000 update name=John uid:=1234\n\n\n=========================\nJSON-RPC Address and Port\n=========================\n\nThe address and port are separated by a ':'.\nThe TCP port is **required**. When the address **omitted**,\nthe default address is ``localhost``.\n\n.. code-block:: bash\n\n    $ jsonrpc :3000 users\n\nIs equivalent to:\n\n.. code-block:: bash\n\n    $ jsonrpc localhost:3000 users\n\n\n===============\nJSON-RPC Method\n===============\n\nThe name of the JSON-RPC method comes right after the address and port:\n\n.. code-block:: bash\n\n    $ jsonrpc example.org:3000 users\n\n\nThe ``METHOD`` argument is **required**.\n\n\n=============\nParameters\n=============\n\nJSON parameters are key/value pairs specified after the ```METHOD```.\nThe parameter type is distinguished only by the separator used:\n``:``, ``=``, ``:=``, ``==``, ``@``, ``=@``, and ``:=@``. The ones with an\n``@`` expect a file path as value.\n\n+-----------------------+-----------------------------------------------------+\n| Item Type             | Description                                         |\n+=======================+=====================================================+\n| Data Fields           | Request data fields to be serialized as a JSON      |\n| ``field=value``,      | object (default).                                   |\n+-----------------------+-----------------------------------------------------+\n| Raw JSON fields       | Useful when sending JSON and one or                 |\n| ``field:=json``,      | more fields need to be a ``Boolean``, ``Number``,   |\n| ``field:=@file.json`` | nested ``Object``, or an ``Array``,  e.g.,          |\n|                       | ``meals:='[\"ham\",\"spam\"]'`` or ``pies:=[1,2,3]``    |\n|                       | (note the quotes).                                  |\n+-----------------------+-----------------------------------------------------+\n\n\n================\nRedirected Input\n================\n\n**A universal method for passing request parameters is through redirected** ``stdin``\n(standard input). Such data is buffered and then with no further processing\nused as the request body. There are multiple useful ways to use piping:\n\nRedirect from a file:\n\n.. code-block:: bash\n\n    $ jsonrpc example.com:7080 add.user < person.json\n\n\nYou can use ``echo`` for simple data:\n\n.. code-block:: bash\n\n    $ echo '{\"uid\": 1234, \"name\": \"John\"}' | jsonrpc example.com:3000 update.userinfo\n\n\nYou can use ``cat`` to enter multiline data on the terminal:\n\n.. code-block:: bash\n\n    $ cat | jsonrpc example.com:3000 update\n    <paste>\n    ^D\n\n\nTo prevent JSONRPCake from reading ``stdin`` data you can use the\n``--ignore-stdin`` option.\n\n\n=================\nTerminal Output\n=================\n\nJSONRPCake does several things by default in order to make its terminal output\neasy to read.\n\n\n---------------------\nColors and Formatting\n---------------------\n\nSyntax highlighting is applied to the response (where it makes\nsense). You can choose your prefered color scheme via the ``--style`` option\nif you don't like the default one (see ``$ jsonrpc --help`` for the possible\nvalues).\n\nAlso, the following formatting is applied:\n\n* JSON data is indented, sorted by keys, and unicode escapes are converted\n  to the characters they represent.\n\nOne of these options can be used to control output processing:\n\n====================   ========================================================\n``--pretty=all``       Apply both colors and formatting.\n                       Default for terminal output.\n``--pretty=colors``    Apply colors.\n``--pretty=format``    Apply formatting.\n``--pretty=none``      Disables output processing.\n                       Default for redirected output.\n====================   ========================================================\n\n\n=================\nRedirected Output\n=================\n\nJSONRPCake uses **different defaults** for redirected output than for\n`terminal output`_:\n\n* Formatting and colors aren't applied (unless ``--pretty`` is specified).\n* Only the response message is printed.\n\nForce colorizing and formatting, and show both the request and the response in\n``less`` pager:\n\n.. code-block:: bash\n\n    $ jsonrpc --pretty=all --verbose example.org:7080 info | less -R\n\n\nThe ``-R`` flag tells ``less`` to interpret color escape sequences included\nJSONRPCake`s output.\n\n\n=======\nAuthors\n=======\n\nForked by `Joe Hillenbrand`_\n\n`Jakub Roztocil`_  created `HTTPie`_ and `these fine people`_\nhave contributed.\n\n=======\nLicence\n=======\n\nPlease see `LICENSE`_.\n\n\n------------\n\n\n.. _JSON-RPC: http://www.jsonrpc.org/specification\n.. _JSON: http://www.json.org/\n.. _HTTPie: https://github.com/jkbr/httpie\n.. _these fine people: https://github.com/jkbr/httpie/contributors\n.. _jsonrpc-ns: https://github.com/flowroute/jsonrpc-ns\n.. _Pygments: http://pygments.org/\n.. _pip: http://www.pip-installer.org/en/latest/index.html\n.. _Jakub Roztocil: http://subtleapps.com\n.. _Joe Hillenbrand: http://joehillen.org\n.. _LICENSE: https://github.com/joehillen/jsonrpcake/blob/master/LICENSE", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/joehillen/jsonrpcake", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "jsonrpcake", "package_url": "https://pypi.org/project/jsonrpcake/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jsonrpcake/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/joehillen/jsonrpcake"}, "release_url": "https://pypi.org/project/jsonrpcake/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "JSONRPCake - a CLI JSON-RPC client for humans.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>JSONRPCake is a <strong>command line JSON-RPC client</strong>\nthat wraps the jsonrpc-ns library.\nIt is a fork of <a href=\"https://github.com/jkbr/httpie\" rel=\"nofollow\">HTTPie</a> written by <a href=\"http://subtleapps.com\" rel=\"nofollow\">Jakub Roztocil</a>.\nIts goal is to make CLI interaction\nwith <a href=\"http://www.jsonrpc.org/specification\" rel=\"nofollow\">JSON-RPC</a> 2.0 services as <strong>human-friendly</strong> as possible. It provides a\nsimple <tt>jsonrpc</tt> command that allows for sending arbitrary <a href=\"http://www.jsonrpc.org/specification\" rel=\"nofollow\">JSON-RPC</a> requests using a\nsimple and natural syntax, and displays colorized responses. JSONRPCake can be used\nfor <strong>testing, debugging</strong>, and generally <strong>interacting</strong> with <a href=\"http://www.jsonrpc.org/specification\" rel=\"nofollow\">JSON-RPC</a> servers.</p>\n<p>JSONRPCake is written in Python, and under the hood it uses the\n<a href=\"https://github.com/flowroute/jsonrpc-ns\" rel=\"nofollow\">jsonrpc-ns</a> and <a href=\"http://pygments.org/\" rel=\"nofollow\">Pygments</a> libraries.</p>\n<p><strong>Table of Contents</strong></p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#main-features\" id=\"id1\" rel=\"nofollow\">Main Features</a></li>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id3\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#json-rpc-address-and-port\" id=\"id4\" rel=\"nofollow\">JSON-RPC Address and Port</a></li>\n<li><a href=\"#json-rpc-method\" id=\"id5\" rel=\"nofollow\">JSON-RPC Method</a></li>\n<li><a href=\"#parameters\" id=\"id6\" rel=\"nofollow\">Parameters</a></li>\n<li><a href=\"#redirected-input\" id=\"id7\" rel=\"nofollow\">Redirected Input</a></li>\n<li><a href=\"#terminal-output\" id=\"id8\" rel=\"nofollow\">Terminal Output</a></li>\n<li><a href=\"#redirected-output\" id=\"id9\" rel=\"nofollow\">Redirected Output</a></li>\n<li><a href=\"#authors\" id=\"id10\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#licence\" id=\"id11\" rel=\"nofollow\">Licence</a></li>\n</ul>\n</div>\n<div id=\"main-features\">\n<h2>Main Features</h2>\n<ul>\n<li>Expressive and intuitive syntax</li>\n<li>Formatted and colorized terminal output</li>\n<li>Built-in JSON support</li>\n<li>Arbitrary request data</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The latest <strong>stable version</strong> of JSONRPCake can always be installed or updated\nto via <a href=\"http://www.pip-installer.org/en/latest/index.html\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ pip install --upgrade jsonrpcake\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Hello World:</p>\n<pre>$ jsonrpc example.org:3000 hello\n</pre>\n<p>Synopsis:</p>\n<pre>$ jsonrpc ADDRESS:PORT METHOD <span class=\"o\">[</span>PARAMETER <span class=\"o\">[</span>PARAMETER <span class=\"o\">[</span>...<span class=\"o\">]]]</span>\n</pre>\n<p>See also <tt>jsonrpc <span class=\"pre\">--help</span></tt>.</p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p><a href=\"http://www.json.org/\" rel=\"nofollow\">JSON</a> params:</p>\n<pre>$ jsonrpc example.org:3000 update <span class=\"nv\">name</span><span class=\"o\">=</span>John uid:<span class=\"o\">=</span><span class=\"m\">1234</span>\n</pre>\n</div>\n</div>\n<div id=\"json-rpc-address-and-port\">\n<h2>JSON-RPC Address and Port</h2>\n<p>The address and port are separated by a \u2018:\u2019.\nThe TCP port is <strong>required</strong>. When the address <strong>omitted</strong>,\nthe default address is <tt>localhost</tt>.</p>\n<pre>$ jsonrpc :3000 users\n</pre>\n<p>Is equivalent to:</p>\n<pre>$ jsonrpc localhost:3000 users\n</pre>\n</div>\n<div id=\"json-rpc-method\">\n<h2>JSON-RPC Method</h2>\n<p>The name of the JSON-RPC method comes right after the address and port:</p>\n<pre>$ jsonrpc example.org:3000 users\n</pre>\n<p>The <tt>METHOD</tt> argument is <strong>required</strong>.</p>\n</div>\n<div id=\"parameters\">\n<h2>Parameters</h2>\n<p>JSON parameters are key/value pairs specified after the <tt>`METHOD`</tt>.\nThe parameter type is distinguished only by the separator used:\n<tt>:</tt>, <tt>=</tt>, <tt>:=</tt>, <tt>==</tt>, <tt>@</tt>, <tt>=@</tt>, and <tt>:=@</tt>. The ones with an\n<tt>@</tt> expect a file path as value.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Item Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Data Fields\n<tt>field=value</tt>,</td>\n<td>Request data fields to be serialized as a JSON\nobject (default).</td>\n</tr>\n<tr><td>Raw JSON fields\n<tt><span class=\"pre\">field:=json</span></tt>,\n<tt><span class=\"pre\">field:=@file.json</span></tt></td>\n<td>Useful when sending JSON and one or\nmore fields need to be a <tt>Boolean</tt>, <tt>Number</tt>,\nnested <tt>Object</tt>, or an <tt>Array</tt>,  e.g.,\n<tt><span class=\"pre\">meals:='[\"ham\",\"spam\"]'</span></tt> or <tt><span class=\"pre\">pies:=[1,2,3]</span></tt>\n(note the quotes).</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"redirected-input\">\n<h2>Redirected Input</h2>\n<p><strong>A universal method for passing request parameters is through redirected</strong> <tt>stdin</tt>\n(standard input). Such data is buffered and then with no further processing\nused as the request body. There are multiple useful ways to use piping:</p>\n<p>Redirect from a file:</p>\n<pre>$ jsonrpc example.com:7080 add.user &lt; person.json\n</pre>\n<p>You can use <tt>echo</tt> for simple data:</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s1\">'{\"uid\": 1234, \"name\": \"John\"}'</span> <span class=\"p\">|</span> jsonrpc example.com:3000 update.userinfo\n</pre>\n<p>You can use <tt>cat</tt> to enter multiline data on the terminal:</p>\n<pre>$ cat <span class=\"p\">|</span> jsonrpc example.com:3000 update\n&lt;paste&gt;\n^D\n</pre>\n<p>To prevent JSONRPCake from reading <tt>stdin</tt> data you can use the\n<tt><span class=\"pre\">--ignore-stdin</span></tt> option.</p>\n</div>\n<div id=\"terminal-output\">\n<h2>Terminal Output</h2>\n<p>JSONRPCake does several things by default in order to make its terminal output\neasy to read.</p>\n<div id=\"colors-and-formatting\">\n<h3>Colors and Formatting</h3>\n<p>Syntax highlighting is applied to the response (where it makes\nsense). You can choose your prefered color scheme via the <tt><span class=\"pre\">--style</span></tt> option\nif you don\u2019t like the default one (see <tt>$ jsonrpc <span class=\"pre\">--help</span></tt> for the possible\nvalues).</p>\n<p>Also, the following formatting is applied:</p>\n<ul>\n<li>JSON data is indented, sorted by keys, and unicode escapes are converted\nto the characters they represent.</li>\n</ul>\n<p>One of these options can be used to control output processing:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><tt><span class=\"pre\">--pretty=all</span></tt></td>\n<td>Apply both colors and formatting.\nDefault for terminal output.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--pretty=colors</span></tt></td>\n<td>Apply colors.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--pretty=format</span></tt></td>\n<td>Apply formatting.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--pretty=none</span></tt></td>\n<td>Disables output processing.\nDefault for redirected output.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"redirected-output\">\n<h2>Redirected Output</h2>\n<p>JSONRPCake uses <strong>different defaults</strong> for redirected output than for\n<a href=\"#terminal-output\" rel=\"nofollow\">terminal output</a>:</p>\n<ul>\n<li>Formatting and colors aren\u2019t applied (unless <tt><span class=\"pre\">--pretty</span></tt> is specified).</li>\n<li>Only the response message is printed.</li>\n</ul>\n<p>Force colorizing and formatting, and show both the request and the response in\n<tt>less</tt> pager:</p>\n<pre>$ jsonrpc --pretty<span class=\"o\">=</span>all --verbose example.org:7080 info <span class=\"p\">|</span> less -R\n</pre>\n<p>The <tt><span class=\"pre\">-R</span></tt> flag tells <tt>less</tt> to interpret color escape sequences included\nJSONRPCake`s output.</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Forked by <a href=\"http://joehillen.org\" rel=\"nofollow\">Joe Hillenbrand</a></p>\n<p><a href=\"http://subtleapps.com\" rel=\"nofollow\">Jakub Roztocil</a>  created <a href=\"https://github.com/jkbr/httpie\" rel=\"nofollow\">HTTPie</a> and <a href=\"https://github.com/jkbr/httpie/contributors\" rel=\"nofollow\">these fine people</a>\nhave contributed.</p>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>Please see <a href=\"https://github.com/joehillen/jsonrpcake/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n<hr class=\"docutils\">\n</div>\n\n          </div>"}, "last_serial": 1091224, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f300146ff994e8e4520200cddfa4e23e", "sha256": "7129fd37c8cc3c9d603dd328e6498a84ee3c9fd361894be78978548f331be1a5"}, "downloads": -1, "filename": "jsonrpcake-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f300146ff994e8e4520200cddfa4e23e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15025, "upload_time": "2014-02-11T08:45:41", "upload_time_iso_8601": "2014-02-11T08:45:41.774795Z", "url": "https://files.pythonhosted.org/packages/76/af/0da1b478660979d1811f15c3ab8e5f3ca9e052f8257da0da368eb2cf6117/jsonrpcake-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "3afc1e3d788f3606ba07e5fb75ab16eb", "sha256": "3f400c8ef1041b14fab1ec74ff4c9ac6562abcd2fb9be3b85b809d6bd8e46d94"}, "downloads": -1, "filename": "jsonrpcake-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3afc1e3d788f3606ba07e5fb75ab16eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14813, "upload_time": "2014-05-13T19:27:51", "upload_time_iso_8601": "2014-05-13T19:27:51.332140Z", "url": "https://files.pythonhosted.org/packages/ab/7f/0d335f988756ac65762324807d543f18215035b845484e09fadd6cab5edb/jsonrpcake-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3afc1e3d788f3606ba07e5fb75ab16eb", "sha256": "3f400c8ef1041b14fab1ec74ff4c9ac6562abcd2fb9be3b85b809d6bd8e46d94"}, "downloads": -1, "filename": "jsonrpcake-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3afc1e3d788f3606ba07e5fb75ab16eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14813, "upload_time": "2014-05-13T19:27:51", "upload_time_iso_8601": "2014-05-13T19:27:51.332140Z", "url": "https://files.pythonhosted.org/packages/ab/7f/0d335f988756ac65762324807d543f18215035b845484e09fadd6cab5edb/jsonrpcake-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:40 2020"}