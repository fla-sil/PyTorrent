{"info": {"author": "Resulto Dev Team", "author_email": "dev@resulto.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Communications", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing"], "description": "django-celery-fulldbresult - Collects information about a task and its result\n=============================================================================\n\n:Authors:\n  Resulto Developpement Web Inc.\n:Version: 0.5.3\n\nThis project adds many small features about the regular Django DB result\nbackend. django-celery-fulldbresult provides three main features:\n\n1. A result backend that can store enough information about a task to retry it\n   if necessary;\n2. A memory-efficient alternative to a task's ETA or countdown;\n3. Django commands to identify tasks that are never completed or that are\n   scheduled but never sent (e.g., if the worker crashes before it can report\n   the result or while a scheduled task is being sent to a worker).\n\nRequirements\n------------\n\ndjango-celery-fulldbresult works with Python 2.7 and 3.4+. It requires Celery\n3.1+, django-celery 3.1.16+, and Django 1.7+\n\nInstallation\n------------\n\nInstall the library\n~~~~~~~~~~~~~~~~~~~\n\n::\n\n    pip install django-celery-fulldbresult\n\n\nAdd the library to your INSTALLED_APPS in your Django Settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'djcelery',\n        'django_celery_fulldbresult',\n    )\n\n\nSet the following minimal settings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    # Required, won't work if set to True\n    CELERY_ALWAYS_EAGER = False\n\n    CELERY_IGNORE_RESULT = False\n\n    CELERY_RESULT_BACKEND =\\\n        'django_celery_fulldbresult.result_backends:DatabaseResultBackend'\n\n    DJANGO_CELERY_FULLDBRESULT_TRACK_PUBLISH = True\n\n    DJANGO_CELERY_FULLDBRESULT_OVERRIDE_DJCELERY_ADMIN = True\n\n\nIf you use a custom AdminSite\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    from djcelery.models import PeriodicTask\n    from django_celery_fulldbresult.admin import (\n        TaskResultMetaAdmin, CustomPeriodicTaskAdmin)\n    from django_celery_fulldbresult.models import TaskResultMeta\n\n\n    class MySite(AdminSite):\n        pass\n\n\n    site = MySite()\n    site.register(TaskResultMeta, TaskResultMetaAdmin)\n    site.register(PeriodicTask, CustomPeriodicTaskAdmin)\n\nNote: if you do not use a custom admin site, the admin sections will be\nautomatically registered and you have nothing to do.\n\n\nUsage\n-----\n\nAs a result backend\n~~~~~~~~~~~~~~~~~~~\n\nJust set these variables in your settings.py file:\n\n::\n\n    CELERY_RESULT_BACKEND = 'django_celery_fulldbresult.result_backends:DatabaseResultBackend'\n    CELERY_IGNORE_RESULT = False\n\n\nTasks can be retrieved with the ``TaskResultMeta`` model:\n\n::\n\n    from testcelery.celery import app as celery_app\n\n    from django_celery_fulldbresult.models import TaskResultMeta\n    from django_celery_fulldbresult import serialization\n\n    task = TaskResultMeta.objects.all()[0]\n    task_name = task.task\n    task_args = serialization.loads(task.args)\n    task_kwargs = serialization.loads(task.kwargs)\n    celery_app.send_task(task_name, args=task_args, kwargs=task_kwargs)\n\n\nAs a way to detect tasks that never complete\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirst, set this variable in your settings.py file:\n\n::\n\n    DJANGO_CELERY_FULLDBRESULT_TRACK_PUBLISH = True\n\nThis will save the task in the database with a status of PENDING.\n\n\nIf you want to get all tasks that are more than one-hour old and are still\npending:\n\n::\n\n    from datetime import timedelta\n    from django_celery_fulldbresult.models import TaskResultMeta\n\n    # Returns a QuerySet\n    stale_tasks = TaskResultMeta.objects.get_stale_tasks(timedelta(hours=1))\n\n\nYou can also use the ``find_stale_tasks`` Django command:\n\n::\n\n    $ python manage.py find_stale_tasks --hours 1\n    Stale tasks:\n      2015-05-27 14:17:37.096366+00:00 - cf738350-afe8-44f8-9eac-34721581eb61: email_workers.tasks.send_email\n\nFinally, the task results are automatically added to the Django Admin site. You\ncan select task results and retry them: this action will send a copy of each\ntask to the worker using the routes you have defined.\n\n.. image:: https://raw.githubusercontent.com/resulto-admin/django-celery-fulldbresult/master/admin_screenshot.png\n\n\nWith JSON storage\n~~~~~~~~~~~~~~~~~\n\nSet this variable in your settings.py file:\n\n::\n\n    DJANGO_CELERY_FULLDBRESULT_USE_JSON = True\n\nThis will make sure that results are saved in JSON-compatible string in the\ndatabase. With a database such as PostgreSQL, you can apply JSON operators on\nthe result column. You can also apply any text-based operators in the extra\nclause of a Django queryset.\n\nIf you use this setting, make sure that the result returned by your task is\nJSON-serializable.\n\nIf some results are not JSON-serializable, you can store their string\nrepresentation by setting this variable in your settings.py file:\n\n::\n\n    DJANGO_CELERY_FULLDBRESULT_FORCE_JSON = True\n\nThis will save the following structure:\n\n::\n\n    {\n        \"value\": str(task_result),\n        \"forced_json\": True\n    }\n\n\n\nManual trigger of PeriodicTask items\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSet this variable in your settings.py file:\n\n::\n\n    DJANGO_CELERY_FULLDBRESULT_OVERRIDE_DJCELERY_ADMIN = True\n\nThis will override small parts of the django-celery Admin to enable the\nmanual launch of PeriodicTask items.\n\n\nAlternative Celery Scheduling (ETA and Countdown)\n-------------------------------------------------\n\nAlthough Celery allows users to schedule the execution of a task by specifying\nan ETA or a countdown, the implementation has at least one main limitation with\nrespect to memory consumption: `all workers try to load all tasks with an ETA,\npotentially leading to a large memory consumption\n<https://github.com/celery/celery/issues/2218>`_.\n\ndjango-celery-fulldbresult proposes an alternative to regular celery ETA with slightly different\nsemantics:\n\n1. When a task is sent with an ETA or a countdown, django-celery-fulldbresult\n   intercepts the task and saves it with a status of `SCHEDULED`.\n\n2. A periodic task checks at a configured interval whether the ETA of a task\n   has expired.\n\n3. Once a task is due, a new task with the same parameters but without an ETA\n   is submitted.\n\n4. The task id of the new task is saved in the result of the original scheduled\n   task and the state of the original scheduled task is set to\n   `SCHEDULED_SENT`.\n\nConfiguration\n~~~~~~~~~~~~~\n\nSet this variable in your settings.py file:\n\n::\n\n    DJANGO_CELERY_FULLDBRESULT_SCHEDULE_ETA = True\n\n    # If you do not want to change your code, set this variable too:\n    DJANGO_CELERY_FULLDBRESULT_MONKEY_PATCH_ASYNC = True\n\nThen create a periodic task in the Django admin or within your code. For\nexample:\n\n- Set the cron to ``*/1`` minute, ``*`` for everything else.\n- The task is \"django_celery_fulldbresult.tasks.send_scheduled_task\"\n- No other parameters\n\nThat's it. When you call a task with an ETA, django-celery-fulldbresult will\nautomatically intercept the task. For example:\n\n\n::\n\n    my_task.apply_async(args=[...], kwargs={...}, eta=some_date)\n\n\nUsing a Base Task\n~~~~~~~~~~~~~~~~~\n\nWhen ``DJANGO_CELERY_FULLDBRESULT_MONKEY_PATCH_ASYNC`` is set to True, the\nTask.apply_async is monkey patched to correctly handle scheduled tasks.\n\nThis will usually work if you correctly use the ``@shared_task`` or\n``@app.task`` decorators. It will probably fail if you use the legacy ``@task``\ndecorator though.\n\nIf you encounter any problem with the monkey patching, simply set\n``DJANGO_CELERY_FULLDBRESULT_MONKEY_PATCH_ASYNC`` to False and instead, use a\nbase task:\n\n\n::\n\n    from celery import shared_task\n    from django_celery_fulldbresult.tasks import ScheduledTask\n\n    @shared_task(base=ScheduledTask)\n    def do_something(param):\n        print(\"DOING SOMETHING\")\n        return (param, \"test\")\n\n\nSemantics\n~~~~~~~~~\n\nThe task is guaranteed to:\n\n1. Be sent at most once.\n2. Be sent after the ETA has expired (i.e., not before)\n\nIf a crash occurs before a task is fully sent, the state of the scheduled task\nwill be `SCHEDULED` and the task will have a non-null UUID `scheduled id`. We\ncall these \"stale scheduled tasks\". It is the user responsibility to manually\nresubmit stale scheduled tasks once the application recovers from the crash.\n\n\nIdentifying stale scheduled tasks\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the get_stale_scheduled_tasks manager to find stale scheduled\ntasks.\n\n::\n\n    from datetime import timedelta\n    from django_celery_fulldbresult.models import TaskResultMeta\n\n    # Returns a QuerySet\n    stale_tasks = TaskResultMeta.objects.get_stale_scheduled_tasks(timedelta(hours=1))\n\n\nYou can also use the ``find_stale_scheduled_tasks`` Django command:\n\n::\n\n    $ python manage.py find_stale_tasks --hours 1\n    Stale scheduled tasks:\n      2015-05-27 14:17:37.096366+00:00 - cf738350-afe8-44f8-9eac-34721581eb61: email_workers.tasks.send_email\n\n\nLicense\n-------\n\nThis software is licensed under the `New BSD License`. See the `LICENSE` file\nin the repository for the full license text.\n\n\nSigning GPG Key\n---------------\n\nThe following GPG keys can be used to sign tags and release files:\n\n- Resulto Development Team: AEC378AB578FF0FC\n- Barthelemy Dagenais: 76320A1B901510C4", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/resulto-admin/django-celery-fulldbresult", "keywords": "celery django queue", "license": "New BSD", "maintainer": "", "maintainer_email": "", "name": "django-celery-fulldbresult", "package_url": "https://pypi.org/project/django-celery-fulldbresult/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-celery-fulldbresult/", "project_urls": {"Homepage": "https://github.com/resulto-admin/django-celery-fulldbresult"}, "release_url": "https://pypi.org/project/django-celery-fulldbresult/0.5.3/", "requires_dist": ["Django (>=1.7)", "celery (>=3.1)", "django-celery (>=3.1.16)", "tox (>=2.0.1); extra == 'test'"], "requires_python": "", "summary": "Celery result backend that stores everything.", "version": "0.5.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Authors:</th>\n<td>Resulto Developpement Web Inc.</td></tr>\n<tr><th>Version:</th>\n<td>0.5.3</td></tr>\n</tbody>\n</table>\n<p>This project adds many small features about the regular Django DB result\nbackend. django-celery-fulldbresult provides three main features:</p>\n<ol>\n<li>A result backend that can store enough information about a task to retry it\nif necessary;</li>\n<li>A memory-efficient alternative to a task\u2019s ETA or countdown;</li>\n<li>Django commands to identify tasks that are never completed or that are\nscheduled but never sent (e.g., if the worker crashes before it can report\nthe result or while a scheduled task is being sent to a worker).</li>\n</ol>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>django-celery-fulldbresult works with Python 2.7 and 3.4+. It requires Celery\n3.1+, django-celery 3.1.16+, and Django 1.7+</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"install-the-library\">\n<h3>Install the library</h3>\n<pre>pip install django-celery-fulldbresult\n</pre>\n</div>\n<div id=\"add-the-library-to-your-installed-apps-in-your-django-settings\">\n<h3>Add the library to your INSTALLED_APPS in your Django Settings</h3>\n<pre>INSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'djcelery',\n    'django_celery_fulldbresult',\n)\n</pre>\n</div>\n<div id=\"set-the-following-minimal-settings\">\n<h3>Set the following minimal settings</h3>\n<pre># Required, won't work if set to True\nCELERY_ALWAYS_EAGER = False\n\nCELERY_IGNORE_RESULT = False\n\nCELERY_RESULT_BACKEND =\\\n    'django_celery_fulldbresult.result_backends:DatabaseResultBackend'\n\nDJANGO_CELERY_FULLDBRESULT_TRACK_PUBLISH = True\n\nDJANGO_CELERY_FULLDBRESULT_OVERRIDE_DJCELERY_ADMIN = True\n</pre>\n</div>\n<div id=\"if-you-use-a-custom-adminsite\">\n<h3>If you use a custom AdminSite</h3>\n<pre>from djcelery.models import PeriodicTask\nfrom django_celery_fulldbresult.admin import (\n    TaskResultMetaAdmin, CustomPeriodicTaskAdmin)\nfrom django_celery_fulldbresult.models import TaskResultMeta\n\n\nclass MySite(AdminSite):\n    pass\n\n\nsite = MySite()\nsite.register(TaskResultMeta, TaskResultMetaAdmin)\nsite.register(PeriodicTask, CustomPeriodicTaskAdmin)\n</pre>\n<p>Note: if you do not use a custom admin site, the admin sections will be\nautomatically registered and you have nothing to do.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"as-a-result-backend\">\n<h3>As a result backend</h3>\n<p>Just set these variables in your settings.py file:</p>\n<pre>CELERY_RESULT_BACKEND = 'django_celery_fulldbresult.result_backends:DatabaseResultBackend'\nCELERY_IGNORE_RESULT = False\n</pre>\n<p>Tasks can be retrieved with the <tt>TaskResultMeta</tt> model:</p>\n<pre>from testcelery.celery import app as celery_app\n\nfrom django_celery_fulldbresult.models import TaskResultMeta\nfrom django_celery_fulldbresult import serialization\n\ntask = TaskResultMeta.objects.all()[0]\ntask_name = task.task\ntask_args = serialization.loads(task.args)\ntask_kwargs = serialization.loads(task.kwargs)\ncelery_app.send_task(task_name, args=task_args, kwargs=task_kwargs)\n</pre>\n</div>\n<div id=\"as-a-way-to-detect-tasks-that-never-complete\">\n<h3>As a way to detect tasks that never complete</h3>\n<p>First, set this variable in your settings.py file:</p>\n<pre>DJANGO_CELERY_FULLDBRESULT_TRACK_PUBLISH = True\n</pre>\n<p>This will save the task in the database with a status of PENDING.</p>\n<p>If you want to get all tasks that are more than one-hour old and are still\npending:</p>\n<pre>from datetime import timedelta\nfrom django_celery_fulldbresult.models import TaskResultMeta\n\n# Returns a QuerySet\nstale_tasks = TaskResultMeta.objects.get_stale_tasks(timedelta(hours=1))\n</pre>\n<p>You can also use the <tt>find_stale_tasks</tt> Django command:</p>\n<pre>$ python manage.py find_stale_tasks --hours 1\nStale tasks:\n  2015-05-27 14:17:37.096366+00:00 - cf738350-afe8-44f8-9eac-34721581eb61: email_workers.tasks.send_email\n</pre>\n<p>Finally, the task results are automatically added to the Django Admin site. You\ncan select task results and retry them: this action will send a copy of each\ntask to the worker using the routes you have defined.</p>\n<img alt=\"https://raw.githubusercontent.com/resulto-admin/django-celery-fulldbresult/master/admin_screenshot.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd936c5b19f95d4911581ce40eb9901bba8cff0a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f726573756c746f2d61646d696e2f646a616e676f2d63656c6572792d66756c6c6462726573756c742f6d61737465722f61646d696e5f73637265656e73686f742e706e67\">\n</div>\n<div id=\"with-json-storage\">\n<h3>With JSON storage</h3>\n<p>Set this variable in your settings.py file:</p>\n<pre>DJANGO_CELERY_FULLDBRESULT_USE_JSON = True\n</pre>\n<p>This will make sure that results are saved in JSON-compatible string in the\ndatabase. With a database such as PostgreSQL, you can apply JSON operators on\nthe result column. You can also apply any text-based operators in the extra\nclause of a Django queryset.</p>\n<p>If you use this setting, make sure that the result returned by your task is\nJSON-serializable.</p>\n<p>If some results are not JSON-serializable, you can store their string\nrepresentation by setting this variable in your settings.py file:</p>\n<pre>DJANGO_CELERY_FULLDBRESULT_FORCE_JSON = True\n</pre>\n<p>This will save the following structure:</p>\n<pre>{\n    \"value\": str(task_result),\n    \"forced_json\": True\n}\n</pre>\n</div>\n<div id=\"manual-trigger-of-periodictask-items\">\n<h3>Manual trigger of PeriodicTask items</h3>\n<p>Set this variable in your settings.py file:</p>\n<pre>DJANGO_CELERY_FULLDBRESULT_OVERRIDE_DJCELERY_ADMIN = True\n</pre>\n<p>This will override small parts of the django-celery Admin to enable the\nmanual launch of PeriodicTask items.</p>\n</div>\n</div>\n<div id=\"alternative-celery-scheduling-eta-and-countdown\">\n<h2>Alternative Celery Scheduling (ETA and Countdown)</h2>\n<p>Although Celery allows users to schedule the execution of a task by specifying\nan ETA or a countdown, the implementation has at least one main limitation with\nrespect to memory consumption: <a href=\"https://github.com/celery/celery/issues/2218\" rel=\"nofollow\">all workers try to load all tasks with an ETA,\npotentially leading to a large memory consumption</a>.</p>\n<p>django-celery-fulldbresult proposes an alternative to regular celery ETA with slightly different\nsemantics:</p>\n<ol>\n<li>When a task is sent with an ETA or a countdown, django-celery-fulldbresult\nintercepts the task and saves it with a status of <cite>SCHEDULED</cite>.</li>\n<li>A periodic task checks at a configured interval whether the ETA of a task\nhas expired.</li>\n<li>Once a task is due, a new task with the same parameters but without an ETA\nis submitted.</li>\n<li>The task id of the new task is saved in the result of the original scheduled\ntask and the state of the original scheduled task is set to\n<cite>SCHEDULED_SENT</cite>.</li>\n</ol>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Set this variable in your settings.py file:</p>\n<pre>DJANGO_CELERY_FULLDBRESULT_SCHEDULE_ETA = True\n\n# If you do not want to change your code, set this variable too:\nDJANGO_CELERY_FULLDBRESULT_MONKEY_PATCH_ASYNC = True\n</pre>\n<p>Then create a periodic task in the Django admin or within your code. For\nexample:</p>\n<ul>\n<li>Set the cron to <tt>*/1</tt> minute, <tt>*</tt> for everything else.</li>\n<li>The task is \u201cdjango_celery_fulldbresult.tasks.send_scheduled_task\u201d</li>\n<li>No other parameters</li>\n</ul>\n<p>That\u2019s it. When you call a task with an ETA, django-celery-fulldbresult will\nautomatically intercept the task. For example:</p>\n<pre>my_task.apply_async(args=[...], kwargs={...}, eta=some_date)\n</pre>\n</div>\n<div id=\"using-a-base-task\">\n<h3>Using a Base Task</h3>\n<p>When <tt>DJANGO_CELERY_FULLDBRESULT_MONKEY_PATCH_ASYNC</tt> is set to True, the\nTask.apply_async is monkey patched to correctly handle scheduled tasks.</p>\n<p>This will usually work if you correctly use the <tt>@shared_task</tt> or\n<tt>@app.task</tt> decorators. It will probably fail if you use the legacy <tt>@task</tt>\ndecorator though.</p>\n<p>If you encounter any problem with the monkey patching, simply set\n<tt>DJANGO_CELERY_FULLDBRESULT_MONKEY_PATCH_ASYNC</tt> to False and instead, use a\nbase task:</p>\n<pre>from celery import shared_task\nfrom django_celery_fulldbresult.tasks import ScheduledTask\n\n@shared_task(base=ScheduledTask)\ndef do_something(param):\n    print(\"DOING SOMETHING\")\n    return (param, \"test\")\n</pre>\n</div>\n<div id=\"semantics\">\n<h3>Semantics</h3>\n<p>The task is guaranteed to:</p>\n<ol>\n<li>Be sent at most once.</li>\n<li>Be sent after the ETA has expired (i.e., not before)</li>\n</ol>\n<p>If a crash occurs before a task is fully sent, the state of the scheduled task\nwill be <cite>SCHEDULED</cite> and the task will have a non-null UUID <cite>scheduled id</cite>. We\ncall these \u201cstale scheduled tasks\u201d. It is the user responsibility to manually\nresubmit stale scheduled tasks once the application recovers from the crash.</p>\n</div>\n<div id=\"identifying-stale-scheduled-tasks\">\n<h3>Identifying stale scheduled tasks</h3>\n<p>You can use the get_stale_scheduled_tasks manager to find stale scheduled\ntasks.</p>\n<pre>from datetime import timedelta\nfrom django_celery_fulldbresult.models import TaskResultMeta\n\n# Returns a QuerySet\nstale_tasks = TaskResultMeta.objects.get_stale_scheduled_tasks(timedelta(hours=1))\n</pre>\n<p>You can also use the <tt>find_stale_scheduled_tasks</tt> Django command:</p>\n<pre>$ python manage.py find_stale_tasks --hours 1\nStale scheduled tasks:\n  2015-05-27 14:17:37.096366+00:00 - cf738350-afe8-44f8-9eac-34721581eb61: email_workers.tasks.send_email\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under the <cite>New BSD License</cite>. See the <cite>LICENSE</cite> file\nin the repository for the full license text.</p>\n</div>\n<div id=\"signing-gpg-key\">\n<h2>Signing GPG Key</h2>\n<p>The following GPG keys can be used to sign tags and release files:</p>\n<ul>\n<li>Resulto Development Team: AEC378AB578FF0FC</li>\n<li>Barthelemy Dagenais: 76320A1B901510C4</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2535188, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "17b625bfc82cf4ed36d801cfd5c4ba46", "sha256": "8703cc8213df5d0e3f2253bc1d450ca6771879bbb6776e23ac8a20a2e938b02c"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "17b625bfc82cf4ed36d801cfd5c4ba46", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12557, "upload_time": "2015-06-01T11:56:23", "upload_time_iso_8601": "2015-06-01T11:56:23.326706Z", "url": "https://files.pythonhosted.org/packages/07/71/ef299c42dd4e5823c8d0466bd8791fc0987a8586fcd5569aa96eb78651a2/django_celery_fulldbresult-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba1150dfd443398f4afaa4a81aced4e7", "sha256": "32e25f95db6105579e8c248f06b2141297423c543c910204976bd2354ea1742f"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.1.0.tar.gz", "has_sig": true, "md5_digest": "ba1150dfd443398f4afaa4a81aced4e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8104, "upload_time": "2015-06-01T11:56:20", "upload_time_iso_8601": "2015-06-01T11:56:20.125182Z", "url": "https://files.pythonhosted.org/packages/bd/2d/3b45ae3de32d93d6494352c477a3306299ecf835f42b7ad78205145c490c/django-celery-fulldbresult-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a659210064a7f6596ae0440ff844220a", "sha256": "f8767fb46dce9a6f0f8808076a929400870a353da43b26d4436cc696db201195"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.1.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a659210064a7f6596ae0440ff844220a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13299, "upload_time": "2015-07-21T14:22:29", "upload_time_iso_8601": "2015-07-21T14:22:29.360992Z", "url": "https://files.pythonhosted.org/packages/79/03/54041a7a1350d16c91ff2ec5583b6e2b8c12f8516cbe47667312eb5d77e1/django_celery_fulldbresult-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d19b692376e19ac118458139325b813", "sha256": "f508465cf2667651013958d7ef00f2f884a2d712353af9b4a92220f8504c3dda"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.1.1.tar.gz", "has_sig": true, "md5_digest": "7d19b692376e19ac118458139325b813", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8324, "upload_time": "2015-07-21T14:22:26", "upload_time_iso_8601": "2015-07-21T14:22:26.148296Z", "url": "https://files.pythonhosted.org/packages/38/eb/daa12897134eee9e29c8da13950364452891488fa23285659745367cbb10/django-celery-fulldbresult-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5ecda1355da9fd4d6f7ad541bb8273a4", "sha256": "2cf1712a659b079823e84a53e5620f16e449ca79d130c3f24ac290e07025f6ff"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "5ecda1355da9fd4d6f7ad541bb8273a4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13860, "upload_time": "2015-07-30T15:00:52", "upload_time_iso_8601": "2015-07-30T15:00:52.513374Z", "url": "https://files.pythonhosted.org/packages/af/23/0296301323405349e814976217de6ebf735c6ad68639a2046cbc8d70f1a3/django_celery_fulldbresult-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bb2617088631cbc8fa4bf17d6149046", "sha256": "688f8bec54a3212f6215868ef364e0414bff8f5540cb6d53e3a235fa77a4cb80"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.2.0.tar.gz", "has_sig": true, "md5_digest": "0bb2617088631cbc8fa4bf17d6149046", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8434, "upload_time": "2015-07-30T15:00:48", "upload_time_iso_8601": "2015-07-30T15:00:48.037676Z", "url": "https://files.pythonhosted.org/packages/20/a8/987444c37c57d543def0d8f09136ec21d5398dba0300bb837affcad14f01/django-celery-fulldbresult-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "94b7ea1462f47e3b6ca50e3d3bb483e6", "sha256": "1a19668e4b9e283d5b6cc398d7c9e8005a1a5a1286ec42eb7cadd27850856f50"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "94b7ea1462f47e3b6ca50e3d3bb483e6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15684, "upload_time": "2015-09-22T14:12:14", "upload_time_iso_8601": "2015-09-22T14:12:14.647963Z", "url": "https://files.pythonhosted.org/packages/0e/ed/59378a166eb467b955b5db8427b3ff742db2e2086485d411c4e676c73b52/django_celery_fulldbresult-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b856aaa98c4ad5608b47091e703386ec", "sha256": "07564abda8287e17776a33a6ef62b9436883f45e746544a0ce906b4b8ccbdc47"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.3.0.tar.gz", "has_sig": true, "md5_digest": "b856aaa98c4ad5608b47091e703386ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9544, "upload_time": "2015-09-22T14:12:08", "upload_time_iso_8601": "2015-09-22T14:12:08.606108Z", "url": "https://files.pythonhosted.org/packages/a4/f5/d87221f6f34725a589456f7d9c3de503c4ed45b5c5519d1842455f83f0f0/django-celery-fulldbresult-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "bce9a44a7726c3ac4d9552036cab00aa", "sha256": "effda04dcb8772549d59a39ce814a42826742557d57294b58d78d946016c634c"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.3.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "bce9a44a7726c3ac4d9552036cab00aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15985, "upload_time": "2015-09-22T16:39:59", "upload_time_iso_8601": "2015-09-22T16:39:59.990037Z", "url": "https://files.pythonhosted.org/packages/f3/68/bc1216fd65d4bb6ec549933b747a0365186de4f4d5a60719f10409a9dcf2/django_celery_fulldbresult-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64fc63c0e9402f8f0b5f156ee4a64428", "sha256": "13a1a1784e4ac0752dad9a2033c38b543182a420ad5b579712cfb6b7bc773006"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.3.1.tar.gz", "has_sig": true, "md5_digest": "64fc63c0e9402f8f0b5f156ee4a64428", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9745, "upload_time": "2015-09-22T16:39:54", "upload_time_iso_8601": "2015-09-22T16:39:54.819025Z", "url": "https://files.pythonhosted.org/packages/cb/88/58a499591d66d01993b1874d9b0cd7e953947f7cd8052e2f612a7d84d84c/django-celery-fulldbresult-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e29cc8330ea68248d9ae47c2de5d354c", "sha256": "258161cec6f86c0b78a826bcda9f147407179c0236d67393533b54c1c676c0c9"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.4.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "e29cc8330ea68248d9ae47c2de5d354c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16686, "upload_time": "2015-11-26T15:55:30", "upload_time_iso_8601": "2015-11-26T15:55:30.998299Z", "url": "https://files.pythonhosted.org/packages/ef/20/c6a742082cd2cdffeca103aef71562e7082ecd5063b6d9a468e21991c42e/django_celery_fulldbresult-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e659240af98d3febdab5919fab9145d5", "sha256": "bd2e1d52372697e830aa8ba8c5ef15ef66257b91b3dac33cfd68dfdd743dab0a"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.4.0.tar.gz", "has_sig": true, "md5_digest": "e659240af98d3febdab5919fab9145d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10186, "upload_time": "2015-11-26T15:55:36", "upload_time_iso_8601": "2015-11-26T15:55:36.909652Z", "url": "https://files.pythonhosted.org/packages/4a/e1/56921174decfdb6bd68dc040df6f32ffe55cc3b030705942f450a887a56d/django-celery-fulldbresult-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "af6f8fa2c4b997ea67921f22da0029d2", "sha256": "69b21bfbd3577b17691e8787435692d2a41627e4970c63a8d346a1521b0c4b6a"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.4.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "af6f8fa2c4b997ea67921f22da0029d2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16695, "upload_time": "2015-11-26T19:52:57", "upload_time_iso_8601": "2015-11-26T19:52:57.820094Z", "url": "https://files.pythonhosted.org/packages/30/2d/faeb01207756d130b52fd24f677406c5d6ff3bd3c05e290bb403d9d41e56/django_celery_fulldbresult-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2562ce1f35d623233294ee426d44444", "sha256": "6f561a99a3064d34faf57d49d65400c69fa182d42fb36da76a7c0dc345162ad5"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.4.1.tar.gz", "has_sig": true, "md5_digest": "c2562ce1f35d623233294ee426d44444", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10190, "upload_time": "2015-11-26T19:53:02", "upload_time_iso_8601": "2015-11-26T19:53:02.065555Z", "url": "https://files.pythonhosted.org/packages/e4/53/9374bf2f9b70049ea4beb7af25ea1239dbb19ddc34c77b7deca2a2d2b539/django-celery-fulldbresult-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "1678ad71a545f87af12198435de2828c", "sha256": "e09fe1cf06fa371f8cca2958273c04bc609665c3820403d1873c1e3200007654"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.5.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1678ad71a545f87af12198435de2828c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22184, "upload_time": "2016-07-28T14:35:06", "upload_time_iso_8601": "2016-07-28T14:35:06.848164Z", "url": "https://files.pythonhosted.org/packages/9e/da/75966e24ea5769bd8e991d6d6ce626a6ee64163c56bf99e6d8e8acb96088/django_celery_fulldbresult-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85c65e5a945ffa5c9cd398965933f90e", "sha256": "bde45401d3d2a946a5db809e622f33c1f64d2ca371f34ca664b29c6b0da723ff"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.5.0.tar.gz", "has_sig": true, "md5_digest": "85c65e5a945ffa5c9cd398965933f90e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13726, "upload_time": "2016-07-28T14:35:09", "upload_time_iso_8601": "2016-07-28T14:35:09.323588Z", "url": "https://files.pythonhosted.org/packages/7b/52/8a5d2c0634911563a3b77fc9e6dd7bf7b5b0b4d9b55e167a2eac7361e727/django-celery-fulldbresult-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "c441cd7aa56717bfde8a51be05947770", "sha256": "ab1e49372353886bdc1f59ed0e2b7e7c6c5f68fea37c0dd4135aa077108afd91"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.5.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "c441cd7aa56717bfde8a51be05947770", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23711, "upload_time": "2016-10-17T15:47:39", "upload_time_iso_8601": "2016-10-17T15:47:39.234044Z", "url": "https://files.pythonhosted.org/packages/55/5e/6758d14fdd5a0cc7b831a3cc0eedf84e232d4e54bb5a3dd0b4fb4271472e/django_celery_fulldbresult-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ec44b2274b47238dcd79633f0dfe375", "sha256": "b1c7df82c7e0f368c2002463b8a0e526838f3dc25877e3a09da575331bb4dbfa"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.5.1.tar.gz", "has_sig": true, "md5_digest": "8ec44b2274b47238dcd79633f0dfe375", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14667, "upload_time": "2016-10-17T15:47:41", "upload_time_iso_8601": "2016-10-17T15:47:41.797189Z", "url": "https://files.pythonhosted.org/packages/22/84/280aae2b7d5a0933cc1823f5e1b01651c89be32fc0d35581d402ba073fd0/django-celery-fulldbresult-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "da60609807043777d81ecbd1518e5175", "sha256": "b4279571db6367920ce323654fc135f309edab60316b829771d2c420bcc9f71f"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.5.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "da60609807043777d81ecbd1518e5175", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23943, "upload_time": "2016-11-07T18:39:05", "upload_time_iso_8601": "2016-11-07T18:39:05.913179Z", "url": "https://files.pythonhosted.org/packages/43/bc/ff21decf829ba5074c83a56482b5ebadbdcfa973875a8a37f5291db59263/django_celery_fulldbresult-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "034d726bca13f2c38eb3f6f1ce738b3b", "sha256": "cf7df20e0ee2d0498bc64b3fc67640afbd7ed2285ad8cf537874b2678bcfec4e"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.5.2.tar.gz", "has_sig": true, "md5_digest": "034d726bca13f2c38eb3f6f1ce738b3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14878, "upload_time": "2016-11-07T18:39:09", "upload_time_iso_8601": "2016-11-07T18:39:09.881906Z", "url": "https://files.pythonhosted.org/packages/03/af/58483c0032ad8bf278836c66d6acdef7958942e5b8ce4c7f6374f84d84dd/django-celery-fulldbresult-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "569044fa25f2912bf10ac4feb28f4d32", "sha256": "c011b4d0623a5cc88ec672073295b2babb8cd90df312d596f530d5e41440aad8"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.5.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "569044fa25f2912bf10ac4feb28f4d32", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24922, "upload_time": "2016-12-22T16:37:35", "upload_time_iso_8601": "2016-12-22T16:37:35.695190Z", "url": "https://files.pythonhosted.org/packages/9d/ed/265132a84bf257fc0570a88d13cfa9d38e62d7a66311d1f35feb585ba81d/django_celery_fulldbresult-0.5.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cb6c0673a37a1ff83bb760a3a1d1bd2", "sha256": "22985fcfbcb5e3d4ca5efe491fdac33f98d56a25478c924f28de69e674118a5b"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.5.3.tar.gz", "has_sig": true, "md5_digest": "7cb6c0673a37a1ff83bb760a3a1d1bd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15402, "upload_time": "2016-12-22T16:37:37", "upload_time_iso_8601": "2016-12-22T16:37:37.827598Z", "url": "https://files.pythonhosted.org/packages/41/74/017472e07fa2e96912577b987f186a6b8a95d794bfe8d24f7b6d0c920d7c/django-celery-fulldbresult-0.5.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "569044fa25f2912bf10ac4feb28f4d32", "sha256": "c011b4d0623a5cc88ec672073295b2babb8cd90df312d596f530d5e41440aad8"}, "downloads": -1, "filename": "django_celery_fulldbresult-0.5.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "569044fa25f2912bf10ac4feb28f4d32", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24922, "upload_time": "2016-12-22T16:37:35", "upload_time_iso_8601": "2016-12-22T16:37:35.695190Z", "url": "https://files.pythonhosted.org/packages/9d/ed/265132a84bf257fc0570a88d13cfa9d38e62d7a66311d1f35feb585ba81d/django_celery_fulldbresult-0.5.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cb6c0673a37a1ff83bb760a3a1d1bd2", "sha256": "22985fcfbcb5e3d4ca5efe491fdac33f98d56a25478c924f28de69e674118a5b"}, "downloads": -1, "filename": "django-celery-fulldbresult-0.5.3.tar.gz", "has_sig": true, "md5_digest": "7cb6c0673a37a1ff83bb760a3a1d1bd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15402, "upload_time": "2016-12-22T16:37:37", "upload_time_iso_8601": "2016-12-22T16:37:37.827598Z", "url": "https://files.pythonhosted.org/packages/41/74/017472e07fa2e96912577b987f186a6b8a95d794bfe8d24f7b6d0c920d7c/django-celery-fulldbresult-0.5.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:13 2020"}