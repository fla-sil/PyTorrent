{"info": {"author": "Benjamin Maier", "author_email": "bfmaier@physik.hu-berlin.de", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "General Topological Overlap Measure\n===================================\n\nThis package takes an undirected unweighted scipy.sparse adjacency\nmatrix as an input and computes the GTOM(m) method, using m+1-step\nneighbors (1). It's highly efficient and can be used for parallel\ncomputation by calling the function for only few nodes at a time.\n\n(1) `*Gene network interconnectedness and the generalized topological\noverlap\nmeasure* <http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.93.329&rep=rep1&type=pdf>`__,\nA. M. Yip and S. Horvath, BMC Bioinformatics 2007 8:22\n\nInstall\n-------\n\n.. code:: bash\n\n    $ pip install gtom\n\nExample\n-------\n\nRecreating Panels a and c of Figure 3 of the technical report [1]:\n\n.. code:: python\n\n    #!python\n\n    import matplotlib.pyplot as pl\n    import networkx as nx\n    from gtom import gtom\n    import scipy.sparse as sprs\n    import numpy as np\n\n    edges = [(0,1),(1,2),(0,3),(0,4),(0,5),(0,7),\n             (1,3),(1,4),(1,6),(1,8),(1,9),(1,10),\n             (5,6),(7,8)]\n    G = nx.Graph()\n    G.add_edges_from(edges)\n\n    pos = nx.spring_layout(G)\n    labels = { n:str(n+1) for n in G.nodes()}\n    nx.draw(G,pos=pos)\n    nx.draw_networkx_labels(G,pos=pos,labels=labels)\n\n    N = G.number_of_nodes()\n    edges = np.array(edges,dtype=int)\n    A = sprs.csc_matrix((np.ones((edges.shape[0],)),(edges[:,0],edges[:,1])),dtype=float,shape=(N,N))\n    A += A.T\n\n    print(\"recreate results from figure 3 in [1]\")\n    print(\"       |\\t(i,j)=(1,2)\\t(i,j)=(1,3)\\t(i,j)=(2,3)\")\n    print(\"---------------------------------------------------------\")\n    for m in range(3):\n        T = gtom(A,m)\n        print(\" m = %d |\\t%f\\t%f\\t%f\" %(m,T[0,1],T[0,2],T[1,2]))\n\n    pl.show()", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/benmaier/gtom", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gtom", "package_url": "https://pypi.org/project/gtom/", "platform": "", "project_url": "https://pypi.org/project/gtom/", "project_urls": {"Homepage": "https://github.com/benmaier/gtom"}, "release_url": "https://pypi.org/project/gtom/0.5/", "requires_dist": null, "requires_python": "", "summary": "computes the general topological overlap matrix of an undirected network", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package takes an undirected unweighted scipy.sparse adjacency\nmatrix as an input and computes the GTOM(m) method, using m+1-step\nneighbors (1). It\u2019s highly efficient and can be used for parallel\ncomputation by calling the function for only few nodes at a time.</p>\n<p>(1) <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.93.329&amp;rep=rep1&amp;type=pdf\" rel=\"nofollow\">*Gene network interconnectedness and the generalized topological\noverlap\nmeasure*</a>,\nA. M. Yip and S. Horvath, BMC Bioinformatics 2007 8:22</p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>$ pip install gtom\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Recreating Panels a and c of Figure 3 of the technical report [1]:</p>\n<pre><span class=\"ch\">#!python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">pl</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gtom</span> <span class=\"kn\">import</span> <span class=\"n\">gtom</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scipy.sparse</span> <span class=\"k\">as</span> <span class=\"nn\">sprs</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">),(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">),(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">),</span>\n         <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">),(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">),(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">),(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">),(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n         <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">),(</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">)]</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edges_from</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n\n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">spring_layout</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">n</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()}</span>\n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"n\">pos</span><span class=\"p\">)</span>\n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_labels</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"n\">pos</span><span class=\"p\">,</span><span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">number_of_nodes</span><span class=\"p\">()</span>\n<span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">sprs</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],)),(</span><span class=\"n\">edges</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">edges</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">])),</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">))</span>\n<span class=\"n\">A</span> <span class=\"o\">+=</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"recreate results from figure 3 in [1]\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"       |</span><span class=\"se\">\\t</span><span class=\"s2\">(i,j)=(1,2)</span><span class=\"se\">\\t</span><span class=\"s2\">(i,j)=(1,3)</span><span class=\"se\">\\t</span><span class=\"s2\">(i,j)=(2,3)\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"---------------------------------------------------------\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">gtom</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\" m = </span><span class=\"si\">%d</span><span class=\"s2\"> |</span><span class=\"se\">\\t</span><span class=\"si\">%f</span><span class=\"se\">\\t</span><span class=\"si\">%f</span><span class=\"se\">\\t</span><span class=\"si\">%f</span><span class=\"s2\">\"</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n\n<span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5126991, "releases": {"0.1": [], "0.2": [{"comment_text": "", "digests": {"md5": "6c7fbac0d735601e6af26062b3a937fb", "sha256": "eb3f8d7a4cbb5353a12a6c11f08bd8a3a2148f663feda92e4c45839fd5ac3136"}, "downloads": -1, "filename": "gtom-0.2.tar.gz", "has_sig": false, "md5_digest": "6c7fbac0d735601e6af26062b3a937fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3237, "upload_time": "2017-01-10T19:58:58", "upload_time_iso_8601": "2017-01-10T19:58:58.003460Z", "url": "https://files.pythonhosted.org/packages/83/14/f8dcfe0a14a7e4494333f27e922a90894f95a664575c1d4d401591191592/gtom-0.2.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "c8b8b555fcae7278ea5f4eb07ceaeddd", "sha256": "006f5d7eacfc2a42ac554b43f3399e07990531c2ab3eeaaa36389895e6cca81a"}, "downloads": -1, "filename": "gtom-0.4.tar.gz", "has_sig": false, "md5_digest": "c8b8b555fcae7278ea5f4eb07ceaeddd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5077, "upload_time": "2019-04-11T03:06:18", "upload_time_iso_8601": "2019-04-11T03:06:18.260446Z", "url": "https://files.pythonhosted.org/packages/32/0b/a44f59c72dd5391f29cefd8db2e8bccb2ef3d82ba37d314c045076ee0ce8/gtom-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "477d0f9510b7f19b16a32f52b2010ce8", "sha256": "9f2a5608963cc3e8966b39be3fae69b466059e54fcf702f6acca618be01e7b03"}, "downloads": -1, "filename": "gtom-0.5.tar.gz", "has_sig": false, "md5_digest": "477d0f9510b7f19b16a32f52b2010ce8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4408, "upload_time": "2019-04-11T03:48:43", "upload_time_iso_8601": "2019-04-11T03:48:43.716459Z", "url": "https://files.pythonhosted.org/packages/ad/64/127b36e7a40d45ee854defa74becf3da2bf6a1acd9b55e691a08044b0a1c/gtom-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "477d0f9510b7f19b16a32f52b2010ce8", "sha256": "9f2a5608963cc3e8966b39be3fae69b466059e54fcf702f6acca618be01e7b03"}, "downloads": -1, "filename": "gtom-0.5.tar.gz", "has_sig": false, "md5_digest": "477d0f9510b7f19b16a32f52b2010ce8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4408, "upload_time": "2019-04-11T03:48:43", "upload_time_iso_8601": "2019-04-11T03:48:43.716459Z", "url": "https://files.pythonhosted.org/packages/ad/64/127b36e7a40d45ee854defa74becf3da2bf6a1acd9b55e691a08044b0a1c/gtom-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:30 2020"}