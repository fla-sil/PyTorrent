{"info": {"author": "Ziad Sawalha <ziad@sawalha.com>", "author_email": "ziad@sawalha.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database :: Database Engines/Servers", "Topic :: Software Development :: Testing"], "description": "Redis Box\n---------\n\nRedis Box helps starting and stopping a sandboxed Redis instance\nfrom within a Python process. The Redis instance is run with a\ntemporary directory to store any files and is configured to\nbe as lightweight as possible. It will choose a free port on localhost,\nso it will not interfere with default Redis processes.\nIt is primarily expected to be used in unit tests and for prototyping concepts.\n\nA typical use of a Redis Box:\n\n```python\nfrom redisbox import RedisBox\n\nbox = RedisBox()\nbox.start()\n\nclient = box.client() # redis client\nassert client.ping()\n\n# do stuff with Redis\n\nbox.stop()\nclient.ping()  # Raises error\n```\n\nNose\n----\n\nRedis Box comes with a Nose plugin which is automatically installed.\nIf used as a plugin, port of the running instance will be exported\nin environment variable `REDISBOX_PORT`. This name can be overridden\nin settings.\n\nThe plugin exposes several configuration options. To see them, run:\n\n    nosetests --help\n\nThe options you are interested in start with `--redisbox-`.\n\nUnit tests\n----------\n\nFor an easy unit tests integration there is a `RedisTestCase` class\ninherited from `unittest.TestCase`. It assumes tests are run from `nosetests`\nwith `--with-redisbox` flag. `RedisTestCases` provides a `redis` client\nconnected to the sandboxed redis instance and a `purge_database` helper\nto clean up the database after every test:\n\n```python\nfrom redisbox.unittest import RedisTestCase\n\nclass MyTest(RedisTestCase):\n    def setUp(self):\n        deploy_fixtures(self.redis_client)\n\n    def tearDown(self):\n        self.purge_database()\n```\n\nInstallation\n------------\n\nGet it from PyPi:\n\n    pip install redisbox\n\nGet it from GitHub:\n\n    pip install https://github.com/ziadsawalha/redisbox.git\n\n\n\nAuthors\n=======\n\n Ziad Sawalha\n\n\nThanks\n------\n\nRedisBox is based on mongobox by Roman Kalyakin.\n\nFor a list of contributors see `AUTHORS.md`.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ziadsawalha/redisbox", "keywords": null, "license": "Copyright 2014 Ziad Sawalha\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.''", "maintainer": null, "maintainer_email": null, "name": "redisbox", "package_url": "https://pypi.org/project/redisbox/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/redisbox/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/ziadsawalha/redisbox"}, "release_url": "https://pypi.org/project/redisbox/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Run sandboxed Redis instance from a python application.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Redis Box<br>---------<br><br>Redis Box helps starting and stopping a sandboxed Redis instance<br>from within a Python process. The Redis instance is run with a<br>temporary directory to store any files and is configured to<br>be as lightweight as possible. It will choose a free port on localhost,<br>so it will not interfere with default Redis processes.<br>It is primarily expected to be used in unit tests and for prototyping concepts.<br><br>A typical use of a Redis Box:<br><br>```python<br>from redisbox import RedisBox<br><br>box = RedisBox()<br>box.start()<br><br>client = box.client() # redis client<br>assert client.ping()<br><br># do stuff with Redis<br><br>box.stop()<br>client.ping()  # Raises error<br>```<br><br>Nose<br>----<br><br>Redis Box comes with a Nose plugin which is automatically installed.<br>If used as a plugin, port of the running instance will be exported<br>in environment variable `REDISBOX_PORT`. This name can be overridden<br>in settings.<br><br>The plugin exposes several configuration options. To see them, run:<br><br>    nosetests --help<br><br>The options you are interested in start with `--redisbox-`.<br><br>Unit tests<br>----------<br><br>For an easy unit tests integration there is a `RedisTestCase` class<br>inherited from `unittest.TestCase`. It assumes tests are run from `nosetests`<br>with `--with-redisbox` flag. `RedisTestCases` provides a `redis` client<br>connected to the sandboxed redis instance and a `purge_database` helper<br>to clean up the database after every test:<br><br>```python<br>from redisbox.unittest import RedisTestCase<br><br>class MyTest(RedisTestCase):<br>    def setUp(self):<br>        deploy_fixtures(self.redis_client)<br><br>    def tearDown(self):<br>        self.purge_database()<br>```<br><br>Installation<br>------------<br><br>Get it from PyPi:<br><br>    pip install redisbox<br><br>Get it from GitHub:<br><br>    pip install https://github.com/ziadsawalha/redisbox.git<br><br><br><br>Authors<br>=======<br><br> Ziad Sawalha<br><br><br>Thanks<br>------<br><br>RedisBox is based on mongobox by Roman Kalyakin.<br><br>For a list of contributors see `AUTHORS.md`.\n          </div>"}, "last_serial": 1198338, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4e247bd1c91640693e6b15d0c2d9ea0c", "sha256": "67513ccc87287d3ba7906719e8527b3f2d0dbc851e2f597eb7520d401bd2308f"}, "downloads": -1, "filename": "redisbox-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4e247bd1c91640693e6b15d0c2d9ea0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5662, "upload_time": "2014-08-22T02:20:51", "upload_time_iso_8601": "2014-08-22T02:20:51.601697Z", "url": "https://files.pythonhosted.org/packages/73/3e/a81d84b86874bd0d0c03909b552bc7d62a5aa9fef1e50a6868bc18b1657e/redisbox-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e247bd1c91640693e6b15d0c2d9ea0c", "sha256": "67513ccc87287d3ba7906719e8527b3f2d0dbc851e2f597eb7520d401bd2308f"}, "downloads": -1, "filename": "redisbox-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4e247bd1c91640693e6b15d0c2d9ea0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5662, "upload_time": "2014-08-22T02:20:51", "upload_time_iso_8601": "2014-08-22T02:20:51.601697Z", "url": "https://files.pythonhosted.org/packages/73/3e/a81d84b86874bd0d0c03909b552bc7d62a5aa9fef1e50a6868bc18b1657e/redisbox-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:54 2020"}