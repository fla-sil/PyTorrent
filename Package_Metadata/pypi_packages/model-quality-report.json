{"info": {"author": "Sebastian Angst", "author_email": "sebastian.angst@dbschenker.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Model Quality Report\n=====================\n\nThis packages enables a quick creation of a model quality report, which is returned \nas a `dict`. \n\nMain ingredients are a data splitter creating test and \ntraining data according various rules and the quality report itself. \nThe quality report takes care of the splitting, fitting, predicting and \nfinally deriving quality metrics.  \n\n\n\nInstalling the package\n----------------------\n\nLatest available code:\n\n```bash\npip install git+https://gitlab.com/francesco-calcavecchia/model_quality_report.git\n```\n\nWith pipenv:\n\n```bash\npipenv install git+https://gitlab.com/francesco-calcavecchia/model_quality_report.git#egg=model_quality_report\n```\n\nSpecific version:\n\n```bash\npip install git+https://gitlab.com/francesco-calcavecchia/model_quality_report.git@vX.Y.Z\n```\n\n\n\nQuickstart\n----------\n\n* The RandomDataSplitter splits data randomly using \nsklearn.model_selection.train_test_split:\n```python\nX = pd.DataFrame({'a': [1, 2, 3, 4, 5], 'b': ['a', 'b', 'c', 'd', 'e']})\ny = pd.Series(data=range(5))\n\nsplitter = RandomDataSplitter(test_size=0.33, random_state=2)\nX_train, X_test, y_train, y_test = splitter.split(X, y)\n```\n\n* The TimeDeltaDataSplitter divides such that data from last \nperiod of length time_delta is used as test data. Here a \npd.Timedelta and the date column name is provided:\n```python\nsplitter = TimeDeltaDataSplitter(date_column_name='shipping_date', time_delta=pd.Timedelta(3, unit='h')) \nX_train, X_test, y_train, y_test = splitter.split(X, y)\n```\n\n* The SplitDateDataSplitter splits such that data after a provided date are \n used as test data. Additionally the name of the date column has to be provided:\n```python\nsplitter = SplitDateDataSplitter(date_column_name='shipping_date', split_date=pd.Timstamp('2016-01-01'))\nX_train, X_test, y_train, y_test = splitter.split(X, y)\n```\n\n\n* The SortedDataSplitter requires a column with sortable values. Data are divided such that the test\ndata set encompasses last fraction `test_size`. Sorting can be in ascending and descending order. \n```python\nsplitter = SortedDataSplitter(sortable_column_name='shipping_date', test_size=0.2, ascending=True)\nX_train, X_test, y_train, y_test = splitter.split(X, y)\n```\n\n* Using RegressionQualityReport class a quality report for a regression model can be created as\nfollowing: \n```python\nsplitter = SplitDateDataSplitter(date_column_name='shipping_date', split_date=pd.Timstamp('2016-01-01'))\nmodel = sklearn.linear_model.LinearRegression()\nquality_reporter = RegressionQualityReport(model, splitter)\nreport = quality_reporter.create_quality_report_and_return_dict(X, y)\n```\nAn exemplary report looks as follows:\n```python\n{'metrics': \n    {'explained_variance_score': -6.018595041322246, \n     'mape': 0.3863636363636345, \n     'mean_absolute_error': 4.242424242424224, \n     'mean_squared_error': 29.426997245178825, \n     'median_absolute_error': 2.272727272727268, \n     'r2_score': -10.03512396694206}, \n 'data': \n    {'true': {3: 10, 4: 12, 2: 8}, \n     'predicted': {3: 12.272727272727268, 4: 20.999999999999964, 2: 6.545454545454561}}}  \n```\n\nNote that the `model` must have a `model.fit` and a `model.predict` function.\n\n\n\nAvailable Features\n------------------\n\n**Data Splitter**\n\n`RandomDataSplitter`: splits randomly\n\n`TimeDeltaDataSplitter`: uses data in last period of length as test data\n\n`SplitDateDataSplitter`: uses data with timestamp newer than split date as test data\n\n`SortedDataSplitter`: sorts data along given column and takes last fraction of size x_test as\ntest data\n\n`TimeSeriesCrossValidationDataSplitter`: produces a list of splits of temporal data such that each consecutive train set has one more observation and test set one less\n\n**Quality Report**\n\n`RegressionQualityReport`: creates a quality report for a regression model\n\n\n**Quality Metrics**\n\n`RegressionQualityMetrics`: holds following functions: \n   * explained_variance_score\n   * mean_absolute_error\n   * mean_squared_error\n   * median_absolute_error\n   * r2_score\n   * mape\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/machine-learning-helpers/model_quality_report", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "model-quality-report", "package_url": "https://pypi.org/project/model-quality-report/", "platform": "any", "project_url": "https://pypi.org/project/model-quality-report/", "project_urls": {"Homepage": "https://gitlab.com/machine-learning-helpers/model_quality_report"}, "release_url": "https://pypi.org/project/model-quality-report/0.2.0/", "requires_dist": ["pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": "", "summary": "Produces quality reports for Machine Learning (ML) models", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Model Quality Report</h1>\n<p>This packages enables a quick creation of a model quality report, which is returned\nas a <code>dict</code>.</p>\n<p>Main ingredients are a data splitter creating test and\ntraining data according various rules and the quality report itself.\nThe quality report takes care of the splitting, fitting, predicting and\nfinally deriving quality metrics.</p>\n<h2>Installing the package</h2>\n<p>Latest available code:</p>\n<pre>pip install git+https://gitlab.com/francesco-calcavecchia/model_quality_report.git\n</pre>\n<p>With pipenv:</p>\n<pre>pipenv install git+https://gitlab.com/francesco-calcavecchia/model_quality_report.git#egg<span class=\"o\">=</span>model_quality_report\n</pre>\n<p>Specific version:</p>\n<pre>pip install git+https://gitlab.com/francesco-calcavecchia/model_quality_report.git@vX.Y.Z\n</pre>\n<h2>Quickstart</h2>\n<ul>\n<li>The RandomDataSplitter splits data randomly using\nsklearn.model_selection.train_test_split:</li>\n</ul>\n<pre><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">]})</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">RandomDataSplitter</span><span class=\"p\">(</span><span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.33</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>The TimeDeltaDataSplitter divides such that data from last\nperiod of length time_delta is used as test data. Here a\npd.Timedelta and the date column name is provided:</li>\n</ul>\n<pre><span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">TimeDeltaDataSplitter</span><span class=\"p\">(</span><span class=\"n\">date_column_name</span><span class=\"o\">=</span><span class=\"s1\">'shipping_date'</span><span class=\"p\">,</span> <span class=\"n\">time_delta</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timedelta</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">))</span> \n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>The SplitDateDataSplitter splits such that data after a provided date are\nused as test data. Additionally the name of the date column has to be provided:</li>\n</ul>\n<pre><span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">SplitDateDataSplitter</span><span class=\"p\">(</span><span class=\"n\">date_column_name</span><span class=\"o\">=</span><span class=\"s1\">'shipping_date'</span><span class=\"p\">,</span> <span class=\"n\">split_date</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timstamp</span><span class=\"p\">(</span><span class=\"s1\">'2016-01-01'</span><span class=\"p\">))</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>The SortedDataSplitter requires a column with sortable values. Data are divided such that the test\ndata set encompasses last fraction <code>test_size</code>. Sorting can be in ascending and descending order.</li>\n</ul>\n<pre><span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">SortedDataSplitter</span><span class=\"p\">(</span><span class=\"n\">sortable_column_name</span><span class=\"o\">=</span><span class=\"s1\">'shipping_date'</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Using RegressionQualityReport class a quality report for a regression model can be created as\nfollowing:</li>\n</ul>\n<pre><span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">SplitDateDataSplitter</span><span class=\"p\">(</span><span class=\"n\">date_column_name</span><span class=\"o\">=</span><span class=\"s1\">'shipping_date'</span><span class=\"p\">,</span> <span class=\"n\">split_date</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timstamp</span><span class=\"p\">(</span><span class=\"s1\">'2016-01-01'</span><span class=\"p\">))</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">quality_reporter</span> <span class=\"o\">=</span> <span class=\"n\">RegressionQualityReport</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">splitter</span><span class=\"p\">)</span>\n<span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">quality_reporter</span><span class=\"o\">.</span><span class=\"n\">create_quality_report_and_return_dict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>An exemplary report looks as follows:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'metrics'</span><span class=\"p\">:</span> \n    <span class=\"p\">{</span><span class=\"s1\">'explained_variance_score'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">6.018595041322246</span><span class=\"p\">,</span> \n     <span class=\"s1\">'mape'</span><span class=\"p\">:</span> <span class=\"mf\">0.3863636363636345</span><span class=\"p\">,</span> \n     <span class=\"s1\">'mean_absolute_error'</span><span class=\"p\">:</span> <span class=\"mf\">4.242424242424224</span><span class=\"p\">,</span> \n     <span class=\"s1\">'mean_squared_error'</span><span class=\"p\">:</span> <span class=\"mf\">29.426997245178825</span><span class=\"p\">,</span> \n     <span class=\"s1\">'median_absolute_error'</span><span class=\"p\">:</span> <span class=\"mf\">2.272727272727268</span><span class=\"p\">,</span> \n     <span class=\"s1\">'r2_score'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">10.03512396694206</span><span class=\"p\">},</span> \n <span class=\"s1\">'data'</span><span class=\"p\">:</span> \n    <span class=\"p\">{</span><span class=\"s1\">'true'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">},</span> \n     <span class=\"s1\">'predicted'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">12.272727272727268</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mf\">20.999999999999964</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mf\">6.545454545454561</span><span class=\"p\">}}}</span>  \n</pre>\n<p>Note that the <code>model</code> must have a <code>model.fit</code> and a <code>model.predict</code> function.</p>\n<h2>Available Features</h2>\n<p><strong>Data Splitter</strong></p>\n<p><code>RandomDataSplitter</code>: splits randomly</p>\n<p><code>TimeDeltaDataSplitter</code>: uses data in last period of length as test data</p>\n<p><code>SplitDateDataSplitter</code>: uses data with timestamp newer than split date as test data</p>\n<p><code>SortedDataSplitter</code>: sorts data along given column and takes last fraction of size x_test as\ntest data</p>\n<p><code>TimeSeriesCrossValidationDataSplitter</code>: produces a list of splits of temporal data such that each consecutive train set has one more observation and test set one less</p>\n<p><strong>Quality Report</strong></p>\n<p><code>RegressionQualityReport</code>: creates a quality report for a regression model</p>\n<p><strong>Quality Metrics</strong></p>\n<p><code>RegressionQualityMetrics</code>: holds following functions:</p>\n<ul>\n<li>explained_variance_score</li>\n<li>mean_absolute_error</li>\n<li>mean_squared_error</li>\n<li>median_absolute_error</li>\n<li>r2_score</li>\n<li>mape</li>\n</ul>\n\n          </div>"}, "last_serial": 6175994, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "b982972e14f2883a91ff7ec4a8bb9657", "sha256": "36d51beb76af06f1489f6f69bfb9b5db4b7f9725d1b6abc7a3b6fc719776cd52"}, "downloads": -1, "filename": "model_quality_report-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b982972e14f2883a91ff7ec4a8bb9657", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16017, "upload_time": "2019-11-21T15:06:28", "upload_time_iso_8601": "2019-11-21T15:06:28.343390Z", "url": "https://files.pythonhosted.org/packages/b9/5b/bfeb5fbb3a14c1e455e951ea65ce143a1e2d402784a3f1de198267d47e2a/model_quality_report-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f92ed488ecd32de388a50c767bba352f", "sha256": "85b2a3fb0e82c3b0072e8c87dc94b1d6ca19d3213fd1aaed7f82632767e385f8"}, "downloads": -1, "filename": "model_quality_report-0.2.0-py3.7.egg", "has_sig": false, "md5_digest": "f92ed488ecd32de388a50c767bba352f", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 14423, "upload_time": "2019-11-21T15:06:30", "upload_time_iso_8601": "2019-11-21T15:06:30.734784Z", "url": "https://files.pythonhosted.org/packages/89/55/a8102b4d8e2dbdd884526a3e70d1b61a5c65541a5cc1487ebe4c5d1ddffb/model_quality_report-0.2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a98841e3db8179cd75f0d21d5428b235", "sha256": "f76be33d70688e6a6c362ed1cdbc4d9e01510eac331ac406d66763d57c524299"}, "downloads": -1, "filename": "model_quality_report-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a98841e3db8179cd75f0d21d5428b235", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34713, "upload_time": "2019-11-21T15:22:44", "upload_time_iso_8601": "2019-11-21T15:22:44.447680Z", "url": "https://files.pythonhosted.org/packages/37/a3/36808304ede58a0688793378167378edff998df1331fc7a6674c2292afe3/model_quality_report-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b982972e14f2883a91ff7ec4a8bb9657", "sha256": "36d51beb76af06f1489f6f69bfb9b5db4b7f9725d1b6abc7a3b6fc719776cd52"}, "downloads": -1, "filename": "model_quality_report-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b982972e14f2883a91ff7ec4a8bb9657", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16017, "upload_time": "2019-11-21T15:06:28", "upload_time_iso_8601": "2019-11-21T15:06:28.343390Z", "url": "https://files.pythonhosted.org/packages/b9/5b/bfeb5fbb3a14c1e455e951ea65ce143a1e2d402784a3f1de198267d47e2a/model_quality_report-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f92ed488ecd32de388a50c767bba352f", "sha256": "85b2a3fb0e82c3b0072e8c87dc94b1d6ca19d3213fd1aaed7f82632767e385f8"}, "downloads": -1, "filename": "model_quality_report-0.2.0-py3.7.egg", "has_sig": false, "md5_digest": "f92ed488ecd32de388a50c767bba352f", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 14423, "upload_time": "2019-11-21T15:06:30", "upload_time_iso_8601": "2019-11-21T15:06:30.734784Z", "url": "https://files.pythonhosted.org/packages/89/55/a8102b4d8e2dbdd884526a3e70d1b61a5c65541a5cc1487ebe4c5d1ddffb/model_quality_report-0.2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a98841e3db8179cd75f0d21d5428b235", "sha256": "f76be33d70688e6a6c362ed1cdbc4d9e01510eac331ac406d66763d57c524299"}, "downloads": -1, "filename": "model_quality_report-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a98841e3db8179cd75f0d21d5428b235", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34713, "upload_time": "2019-11-21T15:22:44", "upload_time_iso_8601": "2019-11-21T15:22:44.447680Z", "url": "https://files.pythonhosted.org/packages/37/a3/36808304ede58a0688793378167378edff998df1331fc7a6674c2292afe3/model_quality_report-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:53 2020"}