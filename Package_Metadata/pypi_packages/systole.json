{"info": {"author": "Nicolas Legrand", "author_email": "nicolas.legrand@cfin.au.dk", "bugtrack_url": null, "classifiers": [], "description": "\n.. image:: https://img.shields.io/badge/License-GPL%20v3-blue.svg\n  :target: https://github.com/embodied-computation-group/systole/blob/master/LICENSE\n\n.. image:: https://badge.fury.io/py/systole.svg\n    :target: https://badge.fury.io/py/systole\n\n.. image:: https://zenodo.org/badge/219720901.svg\n   :target: https://zenodo.org/badge/latestdoi/219720901\n\n.. image:: https://travis-ci.org/embodied-computation-group/systole.svg?branch=master\n   :target: https://travis-ci.org/embodied-computation-group/systole\n\n.. image:: https://codecov.io/gh/embodied-computation-group/systole/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/embodied-computation-group/systole\n\n================\n\n.. figure::  https://github.com/embodied-computation-group/systole/raw/master/source/images/banner.png\n   :align:   center\n\n================\n\n**Systole** is an open-source Python package providing simple tools to record and analyze, cardiac signals for psychophysiology.\nIn particular, the package provides tools to pre-process, analyze, and synchronize cardiac data from psychophysiology research.\nThis includes tools for data epoching, heart-rate variability, and synchronizing stimulus presentation with different cardiac phases via psychopy.\n\nThe documentation can be found under the following `link <https://embodied-computation-group.github.io/>`_.\n\nInstallation\n============\n\nSystole can be installed using pip:\n\n.. code-block:: shell\n\n  pip install systole\n\nThe following packages are required to use Systole:\n\n* Numpy (>=1.15)\n* SciPy (>=1.3.0)\n* Pandas (>=0.24)\n* Matplotlib (>=3.0.2)\n* Seaborn (>=0.9.0)\n\nRecording\n=========\n\nSystole natively supports the recording of PPG signals through the `Nonin 3012LP Xpod USB pulse oximeter <https://www.nonin.com/products/xpod/>`_ together with the `Nonin 8000SM 'soft-clip' fingertip sensors <https://www.nonin.com/products/8000s/>`_.\nIt can easily interface with `PsychoPy <https://www.psychopy.org/>`_ to record PPG signal during psychological experiments, and to synchronize stimulus deliver to e.g., systole or diastole.\n\nFor example, you can record and plot data in less than 6 lines of code:\n\n.. code-block:: python\n\n  import serial\n  from systole.recording import Oximeter\n  ser = serial.Serial('COM4')  # Add your USB port here\n\n  # Open serial port, initialize and plot recording for Oximeter\n  oxi = Oximeter(serial=ser).setup().read(duration=10)\n\n\nInterfacing with PsychoPy\n-------------------------\n\nThe ``Oximeter`` class can be used together with a stimulus presentation software to record cardiac activity during psychological experiments.\n\n* The ``read()`` method\n\nwill record for a predefined amount of time (specified by the ``duration`` parameter, in seconds). This 'serial mode' is the easiest and most robust method, but it does not allow the execution of other instructions in the meantime.\n\n.. code-block:: python\n\n  # Code 1 {}\n  oximeter.read(duration=10)\n  # Code 2 {}\n\n* The ``readInWaiting()`` method\n\nwill only read the bytes temporally stored in the USB buffer. For the Nonin device, this represents up to 10 seconds of recording (this procedure should be executed at least one time every 10 seconds for a continuous recording). When inserted into a while loop, it can record PPG signal in parallel with other commands.\n\n.. code-block:: python\n\n  import time\n  tstart = time.time()\n  while time.time() - tstart < 10:\n      oximeter.readInWaiting()\n      # Insert code here {...}\n\nOnline detection\n----------------\n\nOnline heart beat detection, for cardiac-stimulus synchrony:\n\n.. code-block:: python\n\n  import serial\n  import time\n  from systole.recording import Oximeter\n\n  # Open serial port\n  ser = serial.Serial('COM4')  # Change this value according to your setup\n\n  # Create an Oxymeter instance and initialize recording\n  oxi = Oximeter(serial=ser, sfreq=75, add_channels=4).setup()\n\n  # Online peak detection for 10 seconds\n  tstart = time.time()\n  while time.time() - tstart < 10:\n      while oxi.serial.inWaiting() >= 5:\n          paquet = list(oxi.serial.read(5))\n          oxi.add_paquet(paquet[2])  # Add new data point\n          if oxi.peaks[-1] == 1:\n            print('Heartbeat detected')\n\nPeaks detection\n===============\n\nHeartbeats can be detected in the PPG signal either online or offline.\n\nMethods from clipping correction and peak detection algorithm is adapted from [#]_.\n\n.. code-block:: python\n\n  # Plot data\n  oxi.plot_oximeter()\n\n.. figure::  https://github.com/embodied-computation-group/systole/raw/master/Images/recording.png\n   :align:   center\n\nArtefact removal\n================\n\nSystole implements the artefact rejection method recently proposed by Lipponen & Tarvainen (2019) [#]_.\n\n.. code-block:: python\n\n  from systole import import_rr()\n  from systole.plotting import plot_subspaces\n\n  rr = import_rr().rr[:100]\n  rr[20] = 1600  # Add missed beat\n\n  plot_subspaces(rr)\n\n.. figure::  https://github.com/embodied-computation-group/systole/raw/master/Images/subspaces.png\n   :align:   center\n\nHeartrate variability\n======================\n\nSystole supports basic time-domain, frequency-domain and non-linear extraction indices.\n\nAll time-domain and non-linear indices have been tested against Kubios HVR 2.2 (<https://www.kubios.com>). The frequency-domain indices can slightly differ. We recommend to always check your results against another software.\n\n.. code-block:: python\n\n  from systole.hrv import plot_psd\n\n  plot_psd(rr)\n\n.. figure::  https://github.com/embodied-computation-group/systole/raw/master/Images/psd.png\n   :align:   center\n\nDevelopment\n===========\n\nThis module was created and is maintained by Nicolas Legrand and Micah Allen (ECG group, https://the-ecg.org/). If you want to contribute, feel free to contact one of the contributors, open an issue or submit a pull request.\n\nThis program is provided with NO WARRANTY OF ANY KIND.\n\nAcknowledgements\n================\n\nThis software and the ECG are supported by a Lundbeckfonden Fellowship (R272-2017-4345), and the AIAS-COFUND II fellowship programme that is supported by the Marie Sk\u00c5\u201aodowska-Curie actions under the European Union\u00e2\u20ac\u2122s Horizon 2020 (Grant agreement no 754513), and the Aarhus University Research Foundation.\n\nSystole was largely inspired by pre-existing toolboxes dedicated to heartrate variability and signal analysis.\n\n* HeartPy: https://python-heart-rate-analysis-toolkit.readthedocs.io/en/latest/\n\n* hrv: https://github.com/rhenanbartels/hrv\n\n* ECG-detector: https://github.com/berndporr/py-ecg-detectors\n\n* Pingouin: https://pingouin-stats.org/\n\nReferences\n==========\n\n**Peak detection (PPG signal)**\n\n.. [#] van Gent, P., Farah, H., van Nes, N., & van Arem, B. (2019). HeartPy: A novel heart rate algorithm for the analysis of noisy signals. Transportation Research Part F: Traffic Psychology and Behaviour, 66, 368\u00e2\u20ac\u201c378. https://doi.org/10.1016/j.trf.2019.09.015\n\n**Artefact detection and correction:**\n\n.. [#] Lipponen, J. A., & Tarvainen, M. P. (2019). A robust algorithm for heart rate variability time series artefact correction using novel beat classification. *Journal of Medical Engineering & Technology, 43(3), 173\u00e2\u20ac\u201c181*. https://doi.org/10.1080/03091902.2019.1640306\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "GPL-3.0", "maintainer": "Nicolas Legrand", "maintainer_email": "nicolas.legrand@cfin.au.dk", "name": "systole", "package_url": "https://pypi.org/project/systole/", "platform": "", "project_url": "https://pypi.org/project/systole/", "project_urls": null, "release_url": "https://pypi.org/project/systole/0.1.0/", "requires_dist": ["numpy (>=1.15)", "scipy (>=1.3)", "pandas (>=0.24)", "matplotlib (>=3.0.2)", "seaborn (>=0.9.0)"], "requires_python": "", "summary": "Psychophysiology with Python", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/embodied-computation-group/systole/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/License-GPL%20v3-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b8e7bd0619920735e058483fd428ecbeb267eb7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332d626c75652e737667\"></a>\n<a href=\"https://badge.fury.io/py/systole\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/systole.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76f3af129a2eaed6ab7eed3c99a7c4ce6ae64f38/68747470733a2f2f62616467652e667572792e696f2f70792f737973746f6c652e737667\"></a>\n<a href=\"https://zenodo.org/badge/latestdoi/219720901\" rel=\"nofollow\"><img alt=\"https://zenodo.org/badge/219720901.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e1e0fc0dad0fd06b07829f50f0dac768acc6497/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3231393732303930312e737667\"></a>\n<a href=\"https://travis-ci.org/embodied-computation-group/systole\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/embodied-computation-group/systole.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79072f7ebbcad55e588d2454f5478ec08a07ecae/68747470733a2f2f7472617669732d63692e6f72672f656d626f646965642d636f6d7075746174696f6e2d67726f75702f737973746f6c652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/embodied-computation-group/systole\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/embodied-computation-group/systole/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e6127605ff7d4af055be9ecbf701d79955c6910/68747470733a2f2f636f6465636f762e696f2f67682f656d626f646965642d636f6d7075746174696f6e2d67726f75702f737973746f6c652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<hr class=\"docutils\">\n<div>\n<img alt=\"https://github.com/embodied-computation-group/systole/raw/master/source/images/banner.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f10babcf23b985c66a844b8226da4f06e89f9636/68747470733a2f2f6769746875622e636f6d2f656d626f646965642d636f6d7075746174696f6e2d67726f75702f737973746f6c652f7261772f6d61737465722f736f757263652f696d616765732f62616e6e65722e706e67\">\n</div>\n<hr class=\"docutils\">\n<p><strong>Systole</strong> is an open-source Python package providing simple tools to record and analyze, cardiac signals for psychophysiology.\nIn particular, the package provides tools to pre-process, analyze, and synchronize cardiac data from psychophysiology research.\nThis includes tools for data epoching, heart-rate variability, and synchronizing stimulus presentation with different cardiac phases via psychopy.</p>\n<p>The documentation can be found under the following <a href=\"https://embodied-computation-group.github.io/\" rel=\"nofollow\">link</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Systole can be installed using pip:</p>\n<pre>pip install systole\n</pre>\n<p>The following packages are required to use Systole:</p>\n<ul>\n<li>Numpy (&gt;=1.15)</li>\n<li>SciPy (&gt;=1.3.0)</li>\n<li>Pandas (&gt;=0.24)</li>\n<li>Matplotlib (&gt;=3.0.2)</li>\n<li>Seaborn (&gt;=0.9.0)</li>\n</ul>\n</div>\n<div id=\"recording\">\n<h2>Recording</h2>\n<p>Systole natively supports the recording of PPG signals through the <a href=\"https://www.nonin.com/products/xpod/\" rel=\"nofollow\">Nonin 3012LP Xpod USB pulse oximeter</a> together with the <a href=\"https://www.nonin.com/products/8000s/\" rel=\"nofollow\">Nonin 8000SM \u2018soft-clip\u2019 fingertip sensors</a>.\nIt can easily interface with <a href=\"https://www.psychopy.org/\" rel=\"nofollow\">PsychoPy</a> to record PPG signal during psychological experiments, and to synchronize stimulus deliver to e.g., systole or diastole.</p>\n<p>For example, you can record and plot data in less than 6 lines of code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">serial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">systole.recording</span> <span class=\"kn\">import</span> <span class=\"n\">Oximeter</span>\n<span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'COM4'</span><span class=\"p\">)</span>  <span class=\"c1\"># Add your USB port here</span>\n\n<span class=\"c1\"># Open serial port, initialize and plot recording for Oximeter</span>\n<span class=\"n\">oxi</span> <span class=\"o\">=</span> <span class=\"n\">Oximeter</span><span class=\"p\">(</span><span class=\"n\">serial</span><span class=\"o\">=</span><span class=\"n\">ser</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<div id=\"interfacing-with-psychopy\">\n<h3>Interfacing with PsychoPy</h3>\n<p>The <tt>Oximeter</tt> class can be used together with a stimulus presentation software to record cardiac activity during psychological experiments.</p>\n<ul>\n<li>The <tt>read()</tt> method</li>\n</ul>\n<p>will record for a predefined amount of time (specified by the <tt>duration</tt> parameter, in seconds). This \u2018serial mode\u2019 is the easiest and most robust method, but it does not allow the execution of other instructions in the meantime.</p>\n<pre><span class=\"c1\"># Code 1 {}</span>\n<span class=\"n\">oximeter</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># Code 2 {}</span>\n</pre>\n<ul>\n<li>The <tt>readInWaiting()</tt> method</li>\n</ul>\n<p>will only read the bytes temporally stored in the USB buffer. For the Nonin device, this represents up to 10 seconds of recording (this procedure should be executed at least one time every 10 seconds for a continuous recording). When inserted into a while loop, it can record PPG signal in parallel with other commands.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"n\">tstart</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"k\">while</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">tstart</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n    <span class=\"n\">oximeter</span><span class=\"o\">.</span><span class=\"n\">readInWaiting</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Insert code here {...}</span>\n</pre>\n</div>\n<div id=\"online-detection\">\n<h3>Online detection</h3>\n<p>Online heart beat detection, for cardiac-stimulus synchrony:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">serial</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">systole.recording</span> <span class=\"kn\">import</span> <span class=\"n\">Oximeter</span>\n\n<span class=\"c1\"># Open serial port</span>\n<span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">Serial</span><span class=\"p\">(</span><span class=\"s1\">'COM4'</span><span class=\"p\">)</span>  <span class=\"c1\"># Change this value according to your setup</span>\n\n<span class=\"c1\"># Create an Oxymeter instance and initialize recording</span>\n<span class=\"n\">oxi</span> <span class=\"o\">=</span> <span class=\"n\">Oximeter</span><span class=\"p\">(</span><span class=\"n\">serial</span><span class=\"o\">=</span><span class=\"n\">ser</span><span class=\"p\">,</span> <span class=\"n\">sfreq</span><span class=\"o\">=</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">add_channels</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Online peak detection for 10 seconds</span>\n<span class=\"n\">tstart</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"k\">while</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">tstart</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"n\">oxi</span><span class=\"o\">.</span><span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">inWaiting</span><span class=\"p\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n        <span class=\"n\">paquet</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">oxi</span><span class=\"o\">.</span><span class=\"n\">serial</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n        <span class=\"n\">oxi</span><span class=\"o\">.</span><span class=\"n\">add_paquet</span><span class=\"p\">(</span><span class=\"n\">paquet</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\"># Add new data point</span>\n        <span class=\"k\">if</span> <span class=\"n\">oxi</span><span class=\"o\">.</span><span class=\"n\">peaks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Heartbeat detected'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"peaks-detection\">\n<h2>Peaks detection</h2>\n<p>Heartbeats can be detected in the PPG signal either online or offline.</p>\n<p>Methods from clipping correction and peak detection algorithm is adapted from <a href=\"#id3\" id=\"id1\" rel=\"nofollow\">[1]</a>.</p>\n<pre><span class=\"c1\"># Plot data</span>\n<span class=\"n\">oxi</span><span class=\"o\">.</span><span class=\"n\">plot_oximeter</span><span class=\"p\">()</span>\n</pre>\n<div>\n<img alt=\"https://github.com/embodied-computation-group/systole/raw/master/Images/recording.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/376b9f720cbf366ec1d7030010075e559390a915/68747470733a2f2f6769746875622e636f6d2f656d626f646965642d636f6d7075746174696f6e2d67726f75702f737973746f6c652f7261772f6d61737465722f496d616765732f7265636f7264696e672e706e67\">\n</div>\n</div>\n<div id=\"artefact-removal\">\n<h2>Artefact removal</h2>\n<p>Systole implements the artefact rejection method recently proposed by Lipponen &amp; Tarvainen (2019) <a href=\"#id4\" id=\"id2\" rel=\"nofollow\">[2]</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">systole</span> <span class=\"kn\">import</span> <span class=\"n\">import_rr</span><span class=\"p\">()</span>\n<span class=\"kn\">from</span> <span class=\"nn\">systole.plotting</span> <span class=\"kn\">import</span> <span class=\"n\">plot_subspaces</span>\n\n<span class=\"n\">rr</span> <span class=\"o\">=</span> <span class=\"n\">import_rr</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">rr</span><span class=\"p\">[:</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"n\">rr</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1600</span>  <span class=\"c1\"># Add missed beat</span>\n\n<span class=\"n\">plot_subspaces</span><span class=\"p\">(</span><span class=\"n\">rr</span><span class=\"p\">)</span>\n</pre>\n<div>\n<img alt=\"https://github.com/embodied-computation-group/systole/raw/master/Images/subspaces.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce661a88782efb304ad88ea0eceeaab410cd61d0/68747470733a2f2f6769746875622e636f6d2f656d626f646965642d636f6d7075746174696f6e2d67726f75702f737973746f6c652f7261772f6d61737465722f496d616765732f7375627370616365732e706e67\">\n</div>\n</div>\n<div id=\"heartrate-variability\">\n<h2>Heartrate variability</h2>\n<p>Systole supports basic time-domain, frequency-domain and non-linear extraction indices.</p>\n<p>All time-domain and non-linear indices have been tested against Kubios HVR 2.2 (&lt;<a href=\"https://www.kubios.com\" rel=\"nofollow\">https://www.kubios.com</a>&gt;). The frequency-domain indices can slightly differ. We recommend to always check your results against another software.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">systole.hrv</span> <span class=\"kn\">import</span> <span class=\"n\">plot_psd</span>\n\n<span class=\"n\">plot_psd</span><span class=\"p\">(</span><span class=\"n\">rr</span><span class=\"p\">)</span>\n</pre>\n<div>\n<img alt=\"https://github.com/embodied-computation-group/systole/raw/master/Images/psd.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ebc6fb38b3adb062b8a2020106c251a5f3d1b1d/68747470733a2f2f6769746875622e636f6d2f656d626f646965642d636f6d7075746174696f6e2d67726f75702f737973746f6c652f7261772f6d61737465722f496d616765732f7073642e706e67\">\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>This module was created and is maintained by Nicolas Legrand and Micah Allen (ECG group, <a href=\"https://the-ecg.org/\" rel=\"nofollow\">https://the-ecg.org/</a>). If you want to contribute, feel free to contact one of the contributors, open an issue or submit a pull request.</p>\n<p>This program is provided with NO WARRANTY OF ANY KIND.</p>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>This software and the ECG are supported by a Lundbeckfonden Fellowship (R272-2017-4345), and the AIAS-COFUND II fellowship programme that is supported by the Marie Sk\u00c5\u201aodowska-Curie actions under the European Union\u00e2\u20ac\u2122s Horizon 2020 (Grant agreement no 754513), and the Aarhus University Research Foundation.</p>\n<p>Systole was largely inspired by pre-existing toolboxes dedicated to heartrate variability and signal analysis.</p>\n<ul>\n<li>HeartPy: <a href=\"https://python-heart-rate-analysis-toolkit.readthedocs.io/en/latest/\" rel=\"nofollow\">https://python-heart-rate-analysis-toolkit.readthedocs.io/en/latest/</a></li>\n<li>hrv: <a href=\"https://github.com/rhenanbartels/hrv\" rel=\"nofollow\">https://github.com/rhenanbartels/hrv</a></li>\n<li>ECG-detector: <a href=\"https://github.com/berndporr/py-ecg-detectors\" rel=\"nofollow\">https://github.com/berndporr/py-ecg-detectors</a></li>\n<li>Pingouin: <a href=\"https://pingouin-stats.org/\" rel=\"nofollow\">https://pingouin-stats.org/</a></li>\n</ul>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<p><strong>Peak detection (PPG signal)</strong></p>\n<table id=\"id3\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>van Gent, P., Farah, H., van Nes, N., &amp; van Arem, B. (2019). HeartPy: A novel heart rate algorithm for the analysis of noisy signals. Transportation Research Part F: Traffic Psychology and Behaviour, 66, 368\u00e2\u20ac\u201c378. <a href=\"https://doi.org/10.1016/j.trf.2019.09.015\" rel=\"nofollow\">https://doi.org/10.1016/j.trf.2019.09.015</a></td></tr>\n</tbody>\n</table>\n<p><strong>Artefact detection and correction:</strong></p>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>Lipponen, J. A., &amp; Tarvainen, M. P. (2019). A robust algorithm for heart rate variability time series artefact correction using novel beat classification. <em>Journal of Medical Engineering &amp; Technology, 43(3), 173\u00e2\u20ac\u201c181</em>. <a href=\"https://doi.org/10.1080/03091902.2019.1640306\" rel=\"nofollow\">https://doi.org/10.1080/03091902.2019.1640306</a></td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 6466274, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "46159796bd6d2d7b7fad6510ddb24bca", "sha256": "da1cdc811ed1735e5865cdb4011ca8650cf04f4d2ca932473d3409c10c33aee8"}, "downloads": -1, "filename": "systole-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "46159796bd6d2d7b7fad6510ddb24bca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 105347, "upload_time": "2020-01-14T21:33:41", "upload_time_iso_8601": "2020-01-14T21:33:41.430641Z", "url": "https://files.pythonhosted.org/packages/0e/62/a78724a8b0ddcd0e99d4e548754e77192be4c815960bc8ff4274d0cafabf/systole-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58e3362e0fdf7cdbf43c68cb2c55cf1e", "sha256": "526f3a168365703529a94c38b7ec1a54b1bd2ef51b3ba6c724b5428a877496ac"}, "downloads": -1, "filename": "systole-0.0.1.tar.gz", "has_sig": false, "md5_digest": "58e3362e0fdf7cdbf43c68cb2c55cf1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99753, "upload_time": "2020-01-14T21:33:44", "upload_time_iso_8601": "2020-01-14T21:33:44.388261Z", "url": "https://files.pythonhosted.org/packages/ca/6a/5f6ca3b742852831cdeee1c6c91a749d50d630c85edbd3731b4d800f2824/systole-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "823e19972b23cae279ba49f0528e27f4", "sha256": "0197811bfaa18a95c184af3bc7dc4cbb979cfe7a33aa14806c0bc2c1a39dff9e"}, "downloads": -1, "filename": "systole-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "823e19972b23cae279ba49f0528e27f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 104762, "upload_time": "2020-01-16T14:37:09", "upload_time_iso_8601": "2020-01-16T14:37:09.662673Z", "url": "https://files.pythonhosted.org/packages/8a/64/f50a8b72ec95c015504ad6455baab682f9a3f7f17f53e116b046b91fd269/systole-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "823e19972b23cae279ba49f0528e27f4", "sha256": "0197811bfaa18a95c184af3bc7dc4cbb979cfe7a33aa14806c0bc2c1a39dff9e"}, "downloads": -1, "filename": "systole-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "823e19972b23cae279ba49f0528e27f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 104762, "upload_time": "2020-01-16T14:37:09", "upload_time_iso_8601": "2020-01-16T14:37:09.662673Z", "url": "https://files.pythonhosted.org/packages/8a/64/f50a8b72ec95c015504ad6455baab682f9a3f7f17f53e116b046b91fd269/systole-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:49 2020"}