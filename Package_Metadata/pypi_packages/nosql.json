{"info": {"author": "Yixi Zhang", "author_email": "yixi.zhang.max@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Overview\n=========\n`nosql` is a schemaless ORM for relational db backed by SQLAlchemy.\n\nIt's ultermately an implementation of the schemaless ORM introduced by Bret Taylor.\n\nhttp://backchannel.org/blog/friendfeed-schemaless-mysql\n\n\nUsage\n=========\nNo instruction is better than real code! Say you are building a `Flask` app.\n\n```python\nimport nosql\nfrom app import db\n\n\nclass User(nosql.SchemalessModel):\n\tengine = db.engine\n\tindexes = (\n\t\t('email',),\n\t\t('facebook_id',),\n\t\t('city',)\n\t)\n\n\t\nUser.create_all()\n\nuser = User()\nuser.email = 'yixi.zhang.max@gmail.com'\nuser.name = 'Yixi Zhang'\nuser.save()\n\n\n# find returns a generator\n>>> [user.name for user in User.find()]\n['Yixi Zhang']\n\n\n# find_one returns an instance, support any attribute\n>>> User.find_one(email='yixi.zhang.max@gmail.com').name\nYixi Zhang\n\n\n# added_id & id is auto-generated\n>>> user.id\ne597bb954cf74d51937d5a5e9fd2f2b8\n\n>>> user.added_id\n1\n\n\n# retrieve non-exist attr returns None\n>>> user.idol\n\n\n>>> user.delete()\n\n>>> list(User.find())\n[]\n```\n\n\nIndex\n=========\nBecause `nosql` creates index tables, querying random attribute is fast.\n\nSome todo's for index\n\n* `index_updater` allows indexes to be added later on and schedule data pushing in the background.\n* `sharding` on index.\n\n\nDatabase Support\n=========\nSo far only tested `SQLite` and `PostgreSQL`\n\n\nLicense\n=========\nDo whatever you want. Hope you enjoy using it.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yixizhang/nosql", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "nosql", "package_url": "https://pypi.org/project/nosql/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/nosql/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/yixizhang/nosql"}, "release_url": "https://pypi.org/project/nosql/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "NoSQL ORM for relational db backed by SQLAlchemy", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Overview<br>=========<br>`nosql` is a schemaless ORM for relational db backed by SQLAlchemy.<br><br>It's ultermately an implementation of the schemaless ORM introduced by Bret Taylor.<br><br>http://backchannel.org/blog/friendfeed-schemaless-mysql<br><br><br>Usage<br>=========<br>No instruction is better than real code! Say you are building a `Flask` app.<br><br>```python<br>import nosql<br>from app import db<br><br><br>class User(nosql.SchemalessModel):<br>\tengine = db.engine<br>\tindexes = (<br>\t\t('email',),<br>\t\t('facebook_id',),<br>\t\t('city',)<br>\t)<br><br>\t<br>User.create_all()<br><br>user = User()<br>user.email = 'yixi.zhang.max@gmail.com'<br>user.name = 'Yixi Zhang'<br>user.save()<br><br><br># find returns a generator<br>&gt;&gt;&gt; [user.name for user in User.find()]<br>['Yixi Zhang']<br><br><br># find_one returns an instance, support any attribute<br>&gt;&gt;&gt; User.find_one(email='yixi.zhang.max@gmail.com').name<br>Yixi Zhang<br><br><br># added_id &amp; id is auto-generated<br>&gt;&gt;&gt; user.id<br>e597bb954cf74d51937d5a5e9fd2f2b8<br><br>&gt;&gt;&gt; user.added_id<br>1<br><br><br># retrieve non-exist attr returns None<br>&gt;&gt;&gt; user.idol<br><br><br>&gt;&gt;&gt; user.delete()<br><br>&gt;&gt;&gt; list(User.find())<br>[]<br>```<br><br><br>Index<br>=========<br>Because `nosql` creates index tables, querying random attribute is fast.<br><br>Some todo's for index<br><br>* `index_updater` allows indexes to be added later on and schedule data pushing in the background.<br>* `sharding` on index.<br><br><br>Database Support<br>=========<br>So far only tested `SQLite` and `PostgreSQL`<br><br><br>License<br>=========<br>Do whatever you want. Hope you enjoy using it.\n          </div>"}, "last_serial": 941247, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 00:44:43 2020"}