{"info": {"author": "SLAC National Accelerator Laboratory - Bennet Meyers", "author_email": "bennetm@stanford.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# StatisticalClearSky\n\n[![PyPI release](https://img.shields.io/pypi/v/statistical-clear-sky.svg)](https://pypi.org/project/statistical-clear-sky/)\n[![Anaconda Cloud release](https://anaconda.org/slacgismo/statistical-clear-sky/badges/version.svg)](https://anaconda.org/slacgismo/statistical-clear-sky)\n[![Build Status](https://travis-ci.com/tadatoshi/StatisticalClearSky.svg?branch=development)](https://travis-ci.com/tadatoshi/StatisticalClearSky)\n[![codecov](https://codecov.io/gh/tadatoshi/StatisticalClearSky/branch/development/graph/badge.svg)](https://codecov.io/gh/tadatoshi/StatisticalClearSky)\n\nStatistical estimation of a clear sky signal from PV system power data\n\n## Getting Started\n\nYou can install pip package or Anaconda package for this project.\n\n### Installation\n\nIf you are using pip:\n\n```sh\n$ pip install statistical-clear-sky\n```\n\nAs of February 11, 2019, it fails because scs package installed as a dependency of cxvpy expects numpy to be already installed.\n[scs issue 85](https://github.com/cvxgrp/scs/issues/85) says, it is fixed.\nHowever, it doesn't seem to be reflected in its pip package.\nAlso, cvxpy doesn't work with numpy version less than 1.16.\nAs a work around, install numpy separatly first and then install this package.\ni.e.\n```sh\n$ pip install 'numpy>=1.16'\n$ pip install statistical-clear-sky\n```\n\nIf you are using Anaconda, the problem described above doesn't occur since numpy is already installed. And during statistical-clear-sky installation, numpy is upgraded above 1.16:\n\n```sh\n$ conda install -c slacgismo statistical-clear-sky\n```\n\n#### Solvers\n\nThe default convex solver included with cvxpy is ECOS, which is open source. However this solver tends to fail on problems with >1000 variables, as it does not work for this algorithm.\n\nSo, the default behavior of the code is to use the commercial Mosek solver. Thus, we encourage you to install it separately as below and obtain the license on your own.\n\n* [mosek](https://www.mosek.com/resources/getting-started/) - For using MOSEK solver.\n\n    If you are using pip:\n    ```sh\n    $ pip install -f https://download.mosek.com/stable/wheel/index.html Mosek\n    ```\n\n    If you are using Anaconda:\n    ```sh\n    $ conda install -c mosek mosek==8.1.43\n    ```\n\nAcademic licenses are available for free here: [https://www.mosek.com/products/academic-licenses/](https://www.mosek.com/products/academic-licenses/)\n\n## Usage\n\n### As a part of Python code or inside Jupyter notebook\n\n#### Example 1: Simplest example with the fewest number of input parameters.\n\nUsing default solver (Open Source solver: ECOS)\n\n```python\nimport numpy as np\nfrom statistical_clear_sky.algorithm.iterative_fitting import IterativeFitting\n\n# Usually read from a CSV file or a database with more data,\n# covering 1 day (column) and a few years (row):\npower_signals_d = np.array([[0.0, 0.0, 0.0, 0.0],\n                            [1.33389997, 1.40310001, 0.67150003, 0.77249998],\n                            [1.42349994, 1.51800001, 1.43809998, 1.20449996],\n                            [1.52020001, 1.45150006, 1.84809995, 0.99949998]])\n\niterative_fitting = IterativeFitting(power_signals_d)\n\niterative_fitting.execute()\n\nclear_sky_signals = iterative_fitting.clear_sky_signals()\ndegradation_rate = iterative_fitting.degradation_rate()\n```\n\n#### Example 2: Estimating clear sky signals without degradation.\n\nYou can estimate clear sky signals based on the assumption that there is no year-to-year degradation.\nIn this case, you can set is_degradation_calculated keyword argument to False in execute method.\nBy default, it's set to True.\n\n```python\nimport numpy as np\nfrom statistical_clear_sky.algorithm.iterative_fitting import IterativeFitting\n\n# Usually read from a CSV file or a database with more data,\n# covering 1 day (column) and a few years (row):\npower_signals_d = np.array([[0.0, 0.0, 0.0, 0.0],\n                            [1.33389997, 1.40310001, 0.67150003, 0.77249998],\n                            [1.42349994, 1.51800001, 1.43809998, 1.20449996],\n                            [1.52020001, 1.45150006, 1.84809995, 0.99949998]])\n\niterative_fitting = IterativeFitting(power_signals_d)\n\niterative_fitting.execute(is_degradation_calculated=False)\n\nclear_sky_signals = iterative_fitting.clear_sky_signals()\n```\n\n#### Example 3: Using a different solver.\n\nThe default solver ECOS is not stable with large set of input data.\nThe following example shows how to specify to use Mosek solver by passing solver_type keyword argument (to the constructor).\n\n```python\nimport numpy as np\nfrom statistical_clear_sky.algorithm.iterative_fitting import IterativeFitting\n\n# Usually read from a CSV file or a database with more data,\n# covering 1 day (column) and a few years (row):\npower_signals_d = np.array([[0.0, 0.0, 0.0, 0.0],\n                            [1.33389997, 1.40310001, 0.67150003, 0.77249998],\n                            [1.42349994, 1.51800001, 1.43809998, 1.20449996],\n                            [1.52020001, 1.45150006, 1.84809995, 0.99949998]])\n\niterative_fitting = IterativeFitting(power_signals_d,\n                                     solver_type='MOSEK')\n\niterative_fitting.execute()\n\nclear_sky_signals = iterative_fitting.clear_sky_signals()\ndegradation_rate = iterative_fitting.degradation_rate()\n```\n\n#### Example 4: Setting rank for Generalized Low Rank Modeling.\n\nBy default, rank of low rank matrices is specified to be 6.\nYou can change it by specifying rank_k keyword argument (in the constructor).\n\n```python\nimport numpy as np\nfrom statistical_clear_sky.algorithm.iterative_fitting import IterativeFitting\n\n# Usually read from a CSV file or a database with more data,\n# covering 1 day (column) and a few years (row):\npower_signals_d = np.array([[0.0, 0.0, 0.0, 0.0],\n                            [1.33389997, 1.40310001, 0.67150003, 0.77249998],\n                            [1.42349994, 1.51800001, 1.43809998, 1.20449996],\n                            [1.52020001, 1.45150006, 1.84809995, 0.99949998]])\n\niterative_fitting = IterativeFitting(power_signals_d, rank_k=6)\n\niterative_fitting.execute()\n\n# Get the resulting left low rank matrix and right low rank matrix for evaluation.\nleft_low_rank_matrix = iterative_fitting.left_low_rank_matrix()\n# The above can be also obtained as l_cs_value:\nl_cs_value = iterative_fitting.l_cs_value\n\n# Get the resulting right low rank matrix for evaluation.\nright_low_rank_matrix = iterative_fitting.right_low_rank_matrix()\n# The above can be also obtained as r_cs_value:\nr_cs_value = iterative_fitting.r_cs_value\n\nclear_sky_signals = iterative_fitting.clear_sky_signals()\n\ndegradation_rate = iterative_fitting.degradation_rate()\n# The above can be also obtained as beta_value:\nbeta_value = iterative_fitting.beta_value\n```\n\n#### Example 5: Setting different hyper-parameters for minimization of objective function of Generalized Low Rank Modeling.\n\nThere are three hyper-parameters in the objective function of Generalized Low Rank Modeling, i.e. mu_l, mu_r, and tau.\nBy default, mu_l is set to 1.0, mu_r is set to 20.0, and tau is set to 0.8.\nYou can change it by specifying mu_l, mu_r, and tau keyword arguments in execute method.\n\n```python\nimport numpy as np\nfrom statistical_clear_sky.algorithm.iterative_fitting import IterativeFitting\n\n# Usually read from a CSV file or a database with more data,\n# covering 1 day (column) and a few years (row):\npower_signals_d = np.array([[0.0, 0.0, 0.0, 0.0],\n                            [1.33389997, 1.40310001, 0.67150003, 0.77249998],\n                            [1.42349994, 1.51800001, 1.43809998, 1.20449996],\n                            [1.52020001, 1.45150006, 1.84809995, 0.99949998]])\n\niterative_fitting = IterativeFitting(power_signals_d)\n\niterative_fitting.execute(mu_l=5e2, mu_r=1e3, tau=0.9)\n\nclear_sky_signals = iterative_fitting.clear_sky_signals()\ndegradation_rate = iterative_fitting.degradation_rate()\n```\n\n#### Example 6: Setting different control parameters for minimization of objective function of Generalized Low Rank Modeling.\n\nThere are three control parameters in the objective function of Generalized Low Rank Modeling, i.e. exit criteria - exit_criterion_epsilon, and maximum number of iteration - max_iteration.\nBy default, exit_criterion_epsilon is set to 1e-3, max_iteration is set to 100.\nYou can change it by specifying eps and max_iteration keyword arguments in execute method.\n\n```python\nimport numpy as np\nfrom statistical_clear_sky.algorithm.iterative_fitting import IterativeFitting\n\n# Usually read from a CSV file or a database with more data,\n# covering 1 day (column) and a few years (row):\npower_signals_d = np.array([[0.0, 0.0, 0.0, 0.0],\n                            [1.33389997, 1.40310001, 0.67150003, 0.77249998],\n                            [1.42349994, 1.51800001, 1.43809998, 1.20449996],\n                            [1.52020001, 1.45150006, 1.84809995, 0.99949998]])\n\niterative_fitting = IterativeFitting(power_signals_d)\n\niterative_fitting.execute(exit_criterion_epsilon=1e-6, max_iteration=10)\n\nclear_sky_signals = iterative_fitting.clear_sky_signals()\ndegradation_rate = iterative_fitting.degradation_rate()\n```\n\n#### Example 7: Setting limit on degradation rate.\n\nYou can specify the maximum degradation and minimum degradation by setting max_degradation and min_degradation keyword arguments in execute method.\nBy default, they are set not to be used.\n\n```python\nimport numpy as np\nfrom statistical_clear_sky.algorithm.iterative_fitting import IterativeFitting\n\n# Usually read from a CSV file or a database with more data,\n# covering 1 day (column) and a few years (row):\npower_signals_d = np.array([[0.0, 0.0, 0.0, 0.0],\n                            [1.33389997, 1.40310001, 0.67150003, 0.77249998],\n                            [1.42349994, 1.51800001, 1.43809998, 1.20449996],\n                            [1.52020001, 1.45150006, 1.84809995, 0.99949998]])\n\niterative_fitting = IterativeFitting(power_signals_d)\n\niterative_fitting.execute(max_degradation=0.0, min_degradation=-0.5)\n\nclear_sky_signals = iterative_fitting.clear_sky_signals()\ndegradation_rate = iterative_fitting.degradation_rate()\n```\n\n## Jupyter notebook examples\n\nAlternatively, you can clone this repository (GIT) and execute the example codes under notebooks folder.\n\nSimplest way to install dependencies if you are using pip is by\n\n```sh\n$ pip install -r requirements.txt\n```\n\nAs mentioned in the section, \"Getting Started\" above,\nas of February 11, 2019, it fails because scs package installed as a dependency of cxvpy expects numpy to be already installed.\n[scs issue 85](https://github.com/cvxgrp/scs/issues/85) says, it is fixed.\nHowever, it doesn't seem to be reflected in its pip package.\nAlso, cvxpy doesn't work with numpy version less than 1.16.\nAs a work around, install numpy separatly first and install the other packages using requirements.txt. i.e.\n```sh\n$ pip install 'numpy>=1.16'\n$ pip install -r requirements.txt\n```\n\n## Running the tests\n\n### Unit tests (developer tests)\n\n1. GIT clone this project.\n\n2. In the project directory in terminal,\n\n    ```\n    $ python -m unittest\n    ```\n\n    This runs all the tests under tests folder.\n\nAll the tests are placed under \"tests\" directory directly under the project directory.\nIt is using \"unittest\" that is a part of Python Standard Library by default.\nThere may be a better unit testing framework.\nBut the reason is to invite as many contributors as possible with variety of background.\n\n### Coding style tests\n\n[pylint](https://www.pylint.org/) is used to check if coding style is conforming to \"PEP 8 -- Style Guide for Python Code\"\n\nNote: We are open to use [LGTM](https://lgtm.com/).\nHowever, since we decided to use another code coverage tool [codecov](https://codecov.io/) based on a comment by project's Technical Advisory Council, we decided not to use another tool that does code coverage.\nWe are also open to use other coding style tools.\n\nExample of using pylint:\n\nIn the project directory in terminal,\n```\n$ pylint statistical_clear_sky\n```\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](https://github.com/bmeyers/StatisticalClearSky/contributing) for details on our code of conduct, and the process for submitting pull requests to us.\n\n## Versioning\n\nWe use [Semantic Versioning](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/bmeyers/StatisticalClearSky/tags).\n\n## Authors\n\n* **Bennet Meyers** - *Initial work and Main research work* - [Bennet Meyers GitHub](https://github.com/bmeyers)\n\n* **Tadatoshi Takahashi** - *Refactoring and Packaging work and Research support work* - [Tadatoshi Takahashi GitHub](https://github.com/tadatoshi)\n\nSee also the list of [contributors](https://github.com/bmeyers/StatisticalClearSky/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the BSD 2-Clause License - see the [LICENSE](LICENSE) file for details\n\n## References\n\n[1] B. Meyers, M. Tabone, and E. C. Kara, \"Statistical Clear Sky Fitting Algorithm,\" IEEE Photovoltaic Specialists Conference, 2018.\n\n## Acknowledgments\n\n* The authors would like to thank Professor Stephen Boyd from Stanford University for his input and guidance and Chris Deline, Mike Deceglie, and Dirk Jordan from NREL for collaboration.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bmeyers/StatisticalClearSky", "keywords": "solar pv photovoltaic", "license": "", "maintainer": "", "maintainer_email": "", "name": "statistical-clear-sky", "package_url": "https://pypi.org/project/statistical-clear-sky/", "platform": "", "project_url": "https://pypi.org/project/statistical-clear-sky/", "project_urls": {"Bug Reports": "https://github.com/bmeyers/StatisticalClearSky/issues", "Homepage": "https://github.com/bmeyers/StatisticalClearSky"}, "release_url": "https://pypi.org/project/statistical-clear-sky/0.3.1/", "requires_dist": ["check-manifest ; extra == 'dev'", "coverage ; extra == 'test'", "numpy (>=1.16)", "pandas", "seaborn", "cvxpy (>=1.0)", "solar-data-tools"], "requires_python": ">=3.6, <4", "summary": "Statistical estimation of a clear sky signal from PV system power data", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>StatisticalClearSky</h1>\n<p><a href=\"https://pypi.org/project/statistical-clear-sky/\" rel=\"nofollow\"><img alt=\"PyPI release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8923c9fcfc8490ea6574f242c5527cbf999025c1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f737461746973746963616c2d636c6561722d736b792e737667\"></a>\n<a href=\"https://anaconda.org/slacgismo/statistical-clear-sky\" rel=\"nofollow\"><img alt=\"Anaconda Cloud release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9450db824dea947f408048d0453bb1ad9161a5d2/68747470733a2f2f616e61636f6e64612e6f72672f736c61636769736d6f2f737461746973746963616c2d636c6561722d736b792f6261646765732f76657273696f6e2e737667\"></a>\n<a href=\"https://travis-ci.com/tadatoshi/StatisticalClearSky\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1361ca7464b24b47bf32d8d6ffea86e9dfdd5ffd/68747470733a2f2f7472617669732d63692e636f6d2f74616461746f7368692f537461746973746963616c436c656172536b792e7376673f6272616e63683d646576656c6f706d656e74\"></a>\n<a href=\"https://codecov.io/gh/tadatoshi/StatisticalClearSky\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a679c0f1f1929f6fa05a17ad29aaf2d328b0df3/68747470733a2f2f636f6465636f762e696f2f67682f74616461746f7368692f537461746973746963616c436c656172536b792f6272616e63682f646576656c6f706d656e742f67726170682f62616467652e737667\"></a></p>\n<p>Statistical estimation of a clear sky signal from PV system power data</p>\n<h2>Getting Started</h2>\n<p>You can install pip package or Anaconda package for this project.</p>\n<h3>Installation</h3>\n<p>If you are using pip:</p>\n<pre>$ pip install statistical-clear-sky\n</pre>\n<p>As of February 11, 2019, it fails because scs package installed as a dependency of cxvpy expects numpy to be already installed.\n<a href=\"https://github.com/cvxgrp/scs/issues/85\" rel=\"nofollow\">scs issue 85</a> says, it is fixed.\nHowever, it doesn't seem to be reflected in its pip package.\nAlso, cvxpy doesn't work with numpy version less than 1.16.\nAs a work around, install numpy separatly first and then install this package.\ni.e.</p>\n<pre>$ pip install <span class=\"s1\">'numpy&gt;=1.16'</span>\n$ pip install statistical-clear-sky\n</pre>\n<p>If you are using Anaconda, the problem described above doesn't occur since numpy is already installed. And during statistical-clear-sky installation, numpy is upgraded above 1.16:</p>\n<pre>$ conda install -c slacgismo statistical-clear-sky\n</pre>\n<h4>Solvers</h4>\n<p>The default convex solver included with cvxpy is ECOS, which is open source. However this solver tends to fail on problems with &gt;1000 variables, as it does not work for this algorithm.</p>\n<p>So, the default behavior of the code is to use the commercial Mosek solver. Thus, we encourage you to install it separately as below and obtain the license on your own.</p>\n<ul>\n<li>\n<p><a href=\"https://www.mosek.com/resources/getting-started/\" rel=\"nofollow\">mosek</a> - For using MOSEK solver.</p>\n<p>If you are using pip:</p>\n<pre>$ pip install -f https://download.mosek.com/stable/wheel/index.html Mosek\n</pre>\n<p>If you are using Anaconda:</p>\n<pre>$ conda install -c mosek <span class=\"nv\">mosek</span><span class=\"o\">==</span><span class=\"m\">8</span>.1.43\n</pre>\n</li>\n</ul>\n<p>Academic licenses are available for free here: <a href=\"https://www.mosek.com/products/academic-licenses/\" rel=\"nofollow\">https://www.mosek.com/products/academic-licenses/</a></p>\n<h2>Usage</h2>\n<h3>As a part of Python code or inside Jupyter notebook</h3>\n<h4>Example 1: Simplest example with the fewest number of input parameters.</h4>\n<p>Using default solver (Open Source solver: ECOS)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistical_clear_sky.algorithm.iterative_fitting</span> <span class=\"kn\">import</span> <span class=\"n\">IterativeFitting</span>\n\n<span class=\"c1\"># Usually read from a CSV file or a database with more data,</span>\n<span class=\"c1\"># covering 1 day (column) and a few years (row):</span>\n<span class=\"n\">power_signals_d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.33389997</span><span class=\"p\">,</span> <span class=\"mf\">1.40310001</span><span class=\"p\">,</span> <span class=\"mf\">0.67150003</span><span class=\"p\">,</span> <span class=\"mf\">0.77249998</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.42349994</span><span class=\"p\">,</span> <span class=\"mf\">1.51800001</span><span class=\"p\">,</span> <span class=\"mf\">1.43809998</span><span class=\"p\">,</span> <span class=\"mf\">1.20449996</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.52020001</span><span class=\"p\">,</span> <span class=\"mf\">1.45150006</span><span class=\"p\">,</span> <span class=\"mf\">1.84809995</span><span class=\"p\">,</span> <span class=\"mf\">0.99949998</span><span class=\"p\">]])</span>\n\n<span class=\"n\">iterative_fitting</span> <span class=\"o\">=</span> <span class=\"n\">IterativeFitting</span><span class=\"p\">(</span><span class=\"n\">power_signals_d</span><span class=\"p\">)</span>\n\n<span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n<span class=\"n\">clear_sky_signals</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">clear_sky_signals</span><span class=\"p\">()</span>\n<span class=\"n\">degradation_rate</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">degradation_rate</span><span class=\"p\">()</span>\n</pre>\n<h4>Example 2: Estimating clear sky signals without degradation.</h4>\n<p>You can estimate clear sky signals based on the assumption that there is no year-to-year degradation.\nIn this case, you can set is_degradation_calculated keyword argument to False in execute method.\nBy default, it's set to True.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistical_clear_sky.algorithm.iterative_fitting</span> <span class=\"kn\">import</span> <span class=\"n\">IterativeFitting</span>\n\n<span class=\"c1\"># Usually read from a CSV file or a database with more data,</span>\n<span class=\"c1\"># covering 1 day (column) and a few years (row):</span>\n<span class=\"n\">power_signals_d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.33389997</span><span class=\"p\">,</span> <span class=\"mf\">1.40310001</span><span class=\"p\">,</span> <span class=\"mf\">0.67150003</span><span class=\"p\">,</span> <span class=\"mf\">0.77249998</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.42349994</span><span class=\"p\">,</span> <span class=\"mf\">1.51800001</span><span class=\"p\">,</span> <span class=\"mf\">1.43809998</span><span class=\"p\">,</span> <span class=\"mf\">1.20449996</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.52020001</span><span class=\"p\">,</span> <span class=\"mf\">1.45150006</span><span class=\"p\">,</span> <span class=\"mf\">1.84809995</span><span class=\"p\">,</span> <span class=\"mf\">0.99949998</span><span class=\"p\">]])</span>\n\n<span class=\"n\">iterative_fitting</span> <span class=\"o\">=</span> <span class=\"n\">IterativeFitting</span><span class=\"p\">(</span><span class=\"n\">power_signals_d</span><span class=\"p\">)</span>\n\n<span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">is_degradation_calculated</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">clear_sky_signals</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">clear_sky_signals</span><span class=\"p\">()</span>\n</pre>\n<h4>Example 3: Using a different solver.</h4>\n<p>The default solver ECOS is not stable with large set of input data.\nThe following example shows how to specify to use Mosek solver by passing solver_type keyword argument (to the constructor).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistical_clear_sky.algorithm.iterative_fitting</span> <span class=\"kn\">import</span> <span class=\"n\">IterativeFitting</span>\n\n<span class=\"c1\"># Usually read from a CSV file or a database with more data,</span>\n<span class=\"c1\"># covering 1 day (column) and a few years (row):</span>\n<span class=\"n\">power_signals_d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.33389997</span><span class=\"p\">,</span> <span class=\"mf\">1.40310001</span><span class=\"p\">,</span> <span class=\"mf\">0.67150003</span><span class=\"p\">,</span> <span class=\"mf\">0.77249998</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.42349994</span><span class=\"p\">,</span> <span class=\"mf\">1.51800001</span><span class=\"p\">,</span> <span class=\"mf\">1.43809998</span><span class=\"p\">,</span> <span class=\"mf\">1.20449996</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.52020001</span><span class=\"p\">,</span> <span class=\"mf\">1.45150006</span><span class=\"p\">,</span> <span class=\"mf\">1.84809995</span><span class=\"p\">,</span> <span class=\"mf\">0.99949998</span><span class=\"p\">]])</span>\n\n<span class=\"n\">iterative_fitting</span> <span class=\"o\">=</span> <span class=\"n\">IterativeFitting</span><span class=\"p\">(</span><span class=\"n\">power_signals_d</span><span class=\"p\">,</span>\n                                     <span class=\"n\">solver_type</span><span class=\"o\">=</span><span class=\"s1\">'MOSEK'</span><span class=\"p\">)</span>\n\n<span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n<span class=\"n\">clear_sky_signals</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">clear_sky_signals</span><span class=\"p\">()</span>\n<span class=\"n\">degradation_rate</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">degradation_rate</span><span class=\"p\">()</span>\n</pre>\n<h4>Example 4: Setting rank for Generalized Low Rank Modeling.</h4>\n<p>By default, rank of low rank matrices is specified to be 6.\nYou can change it by specifying rank_k keyword argument (in the constructor).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistical_clear_sky.algorithm.iterative_fitting</span> <span class=\"kn\">import</span> <span class=\"n\">IterativeFitting</span>\n\n<span class=\"c1\"># Usually read from a CSV file or a database with more data,</span>\n<span class=\"c1\"># covering 1 day (column) and a few years (row):</span>\n<span class=\"n\">power_signals_d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.33389997</span><span class=\"p\">,</span> <span class=\"mf\">1.40310001</span><span class=\"p\">,</span> <span class=\"mf\">0.67150003</span><span class=\"p\">,</span> <span class=\"mf\">0.77249998</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.42349994</span><span class=\"p\">,</span> <span class=\"mf\">1.51800001</span><span class=\"p\">,</span> <span class=\"mf\">1.43809998</span><span class=\"p\">,</span> <span class=\"mf\">1.20449996</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.52020001</span><span class=\"p\">,</span> <span class=\"mf\">1.45150006</span><span class=\"p\">,</span> <span class=\"mf\">1.84809995</span><span class=\"p\">,</span> <span class=\"mf\">0.99949998</span><span class=\"p\">]])</span>\n\n<span class=\"n\">iterative_fitting</span> <span class=\"o\">=</span> <span class=\"n\">IterativeFitting</span><span class=\"p\">(</span><span class=\"n\">power_signals_d</span><span class=\"p\">,</span> <span class=\"n\">rank_k</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n<span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the resulting left low rank matrix and right low rank matrix for evaluation.</span>\n<span class=\"n\">left_low_rank_matrix</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">left_low_rank_matrix</span><span class=\"p\">()</span>\n<span class=\"c1\"># The above can be also obtained as l_cs_value:</span>\n<span class=\"n\">l_cs_value</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">l_cs_value</span>\n\n<span class=\"c1\"># Get the resulting right low rank matrix for evaluation.</span>\n<span class=\"n\">right_low_rank_matrix</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">right_low_rank_matrix</span><span class=\"p\">()</span>\n<span class=\"c1\"># The above can be also obtained as r_cs_value:</span>\n<span class=\"n\">r_cs_value</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">r_cs_value</span>\n\n<span class=\"n\">clear_sky_signals</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">clear_sky_signals</span><span class=\"p\">()</span>\n\n<span class=\"n\">degradation_rate</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">degradation_rate</span><span class=\"p\">()</span>\n<span class=\"c1\"># The above can be also obtained as beta_value:</span>\n<span class=\"n\">beta_value</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">beta_value</span>\n</pre>\n<h4>Example 5: Setting different hyper-parameters for minimization of objective function of Generalized Low Rank Modeling.</h4>\n<p>There are three hyper-parameters in the objective function of Generalized Low Rank Modeling, i.e. mu_l, mu_r, and tau.\nBy default, mu_l is set to 1.0, mu_r is set to 20.0, and tau is set to 0.8.\nYou can change it by specifying mu_l, mu_r, and tau keyword arguments in execute method.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistical_clear_sky.algorithm.iterative_fitting</span> <span class=\"kn\">import</span> <span class=\"n\">IterativeFitting</span>\n\n<span class=\"c1\"># Usually read from a CSV file or a database with more data,</span>\n<span class=\"c1\"># covering 1 day (column) and a few years (row):</span>\n<span class=\"n\">power_signals_d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.33389997</span><span class=\"p\">,</span> <span class=\"mf\">1.40310001</span><span class=\"p\">,</span> <span class=\"mf\">0.67150003</span><span class=\"p\">,</span> <span class=\"mf\">0.77249998</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.42349994</span><span class=\"p\">,</span> <span class=\"mf\">1.51800001</span><span class=\"p\">,</span> <span class=\"mf\">1.43809998</span><span class=\"p\">,</span> <span class=\"mf\">1.20449996</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.52020001</span><span class=\"p\">,</span> <span class=\"mf\">1.45150006</span><span class=\"p\">,</span> <span class=\"mf\">1.84809995</span><span class=\"p\">,</span> <span class=\"mf\">0.99949998</span><span class=\"p\">]])</span>\n\n<span class=\"n\">iterative_fitting</span> <span class=\"o\">=</span> <span class=\"n\">IterativeFitting</span><span class=\"p\">(</span><span class=\"n\">power_signals_d</span><span class=\"p\">)</span>\n\n<span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">mu_l</span><span class=\"o\">=</span><span class=\"mf\">5e2</span><span class=\"p\">,</span> <span class=\"n\">mu_r</span><span class=\"o\">=</span><span class=\"mf\">1e3</span><span class=\"p\">,</span> <span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">)</span>\n\n<span class=\"n\">clear_sky_signals</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">clear_sky_signals</span><span class=\"p\">()</span>\n<span class=\"n\">degradation_rate</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">degradation_rate</span><span class=\"p\">()</span>\n</pre>\n<h4>Example 6: Setting different control parameters for minimization of objective function of Generalized Low Rank Modeling.</h4>\n<p>There are three control parameters in the objective function of Generalized Low Rank Modeling, i.e. exit criteria - exit_criterion_epsilon, and maximum number of iteration - max_iteration.\nBy default, exit_criterion_epsilon is set to 1e-3, max_iteration is set to 100.\nYou can change it by specifying eps and max_iteration keyword arguments in execute method.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistical_clear_sky.algorithm.iterative_fitting</span> <span class=\"kn\">import</span> <span class=\"n\">IterativeFitting</span>\n\n<span class=\"c1\"># Usually read from a CSV file or a database with more data,</span>\n<span class=\"c1\"># covering 1 day (column) and a few years (row):</span>\n<span class=\"n\">power_signals_d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.33389997</span><span class=\"p\">,</span> <span class=\"mf\">1.40310001</span><span class=\"p\">,</span> <span class=\"mf\">0.67150003</span><span class=\"p\">,</span> <span class=\"mf\">0.77249998</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.42349994</span><span class=\"p\">,</span> <span class=\"mf\">1.51800001</span><span class=\"p\">,</span> <span class=\"mf\">1.43809998</span><span class=\"p\">,</span> <span class=\"mf\">1.20449996</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.52020001</span><span class=\"p\">,</span> <span class=\"mf\">1.45150006</span><span class=\"p\">,</span> <span class=\"mf\">1.84809995</span><span class=\"p\">,</span> <span class=\"mf\">0.99949998</span><span class=\"p\">]])</span>\n\n<span class=\"n\">iterative_fitting</span> <span class=\"o\">=</span> <span class=\"n\">IterativeFitting</span><span class=\"p\">(</span><span class=\"n\">power_signals_d</span><span class=\"p\">)</span>\n\n<span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">exit_criterion_epsilon</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">,</span> <span class=\"n\">max_iteration</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">clear_sky_signals</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">clear_sky_signals</span><span class=\"p\">()</span>\n<span class=\"n\">degradation_rate</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">degradation_rate</span><span class=\"p\">()</span>\n</pre>\n<h4>Example 7: Setting limit on degradation rate.</h4>\n<p>You can specify the maximum degradation and minimum degradation by setting max_degradation and min_degradation keyword arguments in execute method.\nBy default, they are set not to be used.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistical_clear_sky.algorithm.iterative_fitting</span> <span class=\"kn\">import</span> <span class=\"n\">IterativeFitting</span>\n\n<span class=\"c1\"># Usually read from a CSV file or a database with more data,</span>\n<span class=\"c1\"># covering 1 day (column) and a few years (row):</span>\n<span class=\"n\">power_signals_d</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.33389997</span><span class=\"p\">,</span> <span class=\"mf\">1.40310001</span><span class=\"p\">,</span> <span class=\"mf\">0.67150003</span><span class=\"p\">,</span> <span class=\"mf\">0.77249998</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.42349994</span><span class=\"p\">,</span> <span class=\"mf\">1.51800001</span><span class=\"p\">,</span> <span class=\"mf\">1.43809998</span><span class=\"p\">,</span> <span class=\"mf\">1.20449996</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"mf\">1.52020001</span><span class=\"p\">,</span> <span class=\"mf\">1.45150006</span><span class=\"p\">,</span> <span class=\"mf\">1.84809995</span><span class=\"p\">,</span> <span class=\"mf\">0.99949998</span><span class=\"p\">]])</span>\n\n<span class=\"n\">iterative_fitting</span> <span class=\"o\">=</span> <span class=\"n\">IterativeFitting</span><span class=\"p\">(</span><span class=\"n\">power_signals_d</span><span class=\"p\">)</span>\n\n<span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">max_degradation</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">min_degradation</span><span class=\"o\">=-</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">clear_sky_signals</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">clear_sky_signals</span><span class=\"p\">()</span>\n<span class=\"n\">degradation_rate</span> <span class=\"o\">=</span> <span class=\"n\">iterative_fitting</span><span class=\"o\">.</span><span class=\"n\">degradation_rate</span><span class=\"p\">()</span>\n</pre>\n<h2>Jupyter notebook examples</h2>\n<p>Alternatively, you can clone this repository (GIT) and execute the example codes under notebooks folder.</p>\n<p>Simplest way to install dependencies if you are using pip is by</p>\n<pre>$ pip install -r requirements.txt\n</pre>\n<p>As mentioned in the section, \"Getting Started\" above,\nas of February 11, 2019, it fails because scs package installed as a dependency of cxvpy expects numpy to be already installed.\n<a href=\"https://github.com/cvxgrp/scs/issues/85\" rel=\"nofollow\">scs issue 85</a> says, it is fixed.\nHowever, it doesn't seem to be reflected in its pip package.\nAlso, cvxpy doesn't work with numpy version less than 1.16.\nAs a work around, install numpy separatly first and install the other packages using requirements.txt. i.e.</p>\n<pre>$ pip install <span class=\"s1\">'numpy&gt;=1.16'</span>\n$ pip install -r requirements.txt\n</pre>\n<h2>Running the tests</h2>\n<h3>Unit tests (developer tests)</h3>\n<ol>\n<li>\n<p>GIT clone this project.</p>\n</li>\n<li>\n<p>In the project directory in terminal,</p>\n<pre><code>$ python -m unittest\n</code></pre>\n<p>This runs all the tests under tests folder.</p>\n</li>\n</ol>\n<p>All the tests are placed under \"tests\" directory directly under the project directory.\nIt is using \"unittest\" that is a part of Python Standard Library by default.\nThere may be a better unit testing framework.\nBut the reason is to invite as many contributors as possible with variety of background.</p>\n<h3>Coding style tests</h3>\n<p><a href=\"https://www.pylint.org/\" rel=\"nofollow\">pylint</a> is used to check if coding style is conforming to \"PEP 8 -- Style Guide for Python Code\"</p>\n<p>Note: We are open to use <a href=\"https://lgtm.com/\" rel=\"nofollow\">LGTM</a>.\nHowever, since we decided to use another code coverage tool <a href=\"https://codecov.io/\" rel=\"nofollow\">codecov</a> based on a comment by project's Technical Advisory Council, we decided not to use another tool that does code coverage.\nWe are also open to use other coding style tools.</p>\n<p>Example of using pylint:</p>\n<p>In the project directory in terminal,</p>\n<pre><code>$ pylint statistical_clear_sky\n</code></pre>\n<h2>Contributing</h2>\n<p>Please read <a href=\"https://github.com/bmeyers/StatisticalClearSky/contributing\" rel=\"nofollow\">CONTRIBUTING.md</a> for details on our code of conduct, and the process for submitting pull requests to us.</p>\n<h2>Versioning</h2>\n<p>We use <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a> for versioning. For the versions available, see the <a href=\"https://github.com/bmeyers/StatisticalClearSky/tags\" rel=\"nofollow\">tags on this repository</a>.</p>\n<h2>Authors</h2>\n<ul>\n<li>\n<p><strong>Bennet Meyers</strong> - <em>Initial work and Main research work</em> - <a href=\"https://github.com/bmeyers\" rel=\"nofollow\">Bennet Meyers GitHub</a></p>\n</li>\n<li>\n<p><strong>Tadatoshi Takahashi</strong> - <em>Refactoring and Packaging work and Research support work</em> - <a href=\"https://github.com/tadatoshi\" rel=\"nofollow\">Tadatoshi Takahashi GitHub</a></p>\n</li>\n</ul>\n<p>See also the list of <a href=\"https://github.com/bmeyers/StatisticalClearSky/contributors\" rel=\"nofollow\">contributors</a> who participated in this project.</p>\n<h2>License</h2>\n<p>This project is licensed under the BSD 2-Clause License - see the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file for details</p>\n<h2>References</h2>\n<p>[1] B. Meyers, M. Tabone, and E. C. Kara, \"Statistical Clear Sky Fitting Algorithm,\" IEEE Photovoltaic Specialists Conference, 2018.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>The authors would like to thank Professor Stephen Boyd from Stanford University for his input and guidance and Chris Deline, Mike Deceglie, and Dirk Jordan from NREL for collaboration.</li>\n</ul>\n\n          </div>"}, "last_serial": 6974325, "releases": {"0.1.19": [{"comment_text": "", "digests": {"md5": "dae931f84f88f99d51e4261f435358e6", "sha256": "79926a6650fa63dfcb833ffe545bb2afcbd6ab0ec5eee2a0819593703244cd4f"}, "downloads": -1, "filename": "statistical_clear_sky-0.1.19-py3-none-any.whl", "has_sig": false, "md5_digest": "dae931f84f88f99d51e4261f435358e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 44092, "upload_time": "2019-08-14T16:38:20", "upload_time_iso_8601": "2019-08-14T16:38:20.853110Z", "url": "https://files.pythonhosted.org/packages/3c/1e/2fc5f95782a99882a095bfb38e21750b2492c27ee6335551b529c774ce97/statistical_clear_sky-0.1.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8ed6fca8714b83e166d3f69b0c29e96", "sha256": "a6efae593d2aedcb8b2712d0e0d7788b7a4c90ab052964adc5ce7b275464c2ee"}, "downloads": -1, "filename": "statistical-clear-sky-0.1.19.tar.gz", "has_sig": false, "md5_digest": "d8ed6fca8714b83e166d3f69b0c29e96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 34405, "upload_time": "2019-03-27T03:32:18", "upload_time_iso_8601": "2019-03-27T03:32:18.732991Z", "url": "https://files.pythonhosted.org/packages/94/41/b282e1699a29a346a1fbfbe1a1b5e1924c2757b26c96f9b27927a9462f34/statistical-clear-sky-0.1.19.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8cfb0d1a6de6fbec2dc4e2fa8ab06855", "sha256": "c33f95282322dc74cef72d1583a440819077d1fecffbe274bad6cdc4ead7486e"}, "downloads": -1, "filename": "statistical_clear_sky-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8cfb0d1a6de6fbec2dc4e2fa8ab06855", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 44078, "upload_time": "2019-08-14T16:53:29", "upload_time_iso_8601": "2019-08-14T16:53:29.397493Z", "url": "https://files.pythonhosted.org/packages/83/9b/07fcb156a80ab215b6ddda51df061d1c63ff9c5266c2cab75ec2f3276ec8/statistical_clear_sky-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b581746dd68ecb661bc4fcfb4c509960", "sha256": "d0e27de10159b124bbd170f603c5ebd19f0de3bff716cd78670f38bbdbeb807b"}, "downloads": -1, "filename": "statistical-clear-sky-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b581746dd68ecb661bc4fcfb4c509960", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 33675, "upload_time": "2019-08-14T16:53:31", "upload_time_iso_8601": "2019-08-14T16:53:31.125406Z", "url": "https://files.pythonhosted.org/packages/a0/80/dbebc007e5f593da32100fd0e9141c1afa854225f6dfa6a944ffbee4bc00/statistical-clear-sky-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d0004660b53b3179f037a6d698233366", "sha256": "4bfa5c33e86164b2fc19290bd2c8617877a0f88972b84e9330e7296845a1ce69"}, "downloads": -1, "filename": "statistical_clear_sky-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d0004660b53b3179f037a6d698233366", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 44077, "upload_time": "2019-08-14T20:36:45", "upload_time_iso_8601": "2019-08-14T20:36:45.197756Z", "url": "https://files.pythonhosted.org/packages/58/db/a2880bb63e44cdb88212f323f605b355739b04ef97a7a76f77317dfba9e0/statistical_clear_sky-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e6953a3d44604b3be686292799072ea", "sha256": "ca9ad405f285f7a02a0e5144c9cbb549f4a4187a75e5c290819ca7740ff64df1"}, "downloads": -1, "filename": "statistical-clear-sky-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9e6953a3d44604b3be686292799072ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 34133, "upload_time": "2019-08-14T20:36:46", "upload_time_iso_8601": "2019-08-14T20:36:46.440314Z", "url": "https://files.pythonhosted.org/packages/99/16/1aa852a6890870ef9b60ed744a87de231d4243822af46fcbdbb9e467c2a3/statistical-clear-sky-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7ac187271a6f13b7d998a9a715bb039a", "sha256": "ebd1db19f53597789467ea56ea8170ef188b63f301d9394fc6828ca78619a2b8"}, "downloads": -1, "filename": "statistical_clear_sky-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7ac187271a6f13b7d998a9a715bb039a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 45819, "upload_time": "2020-02-14T20:58:34", "upload_time_iso_8601": "2020-02-14T20:58:34.839160Z", "url": "https://files.pythonhosted.org/packages/47/9e/3def570d2b97d398739efa47d056f695f3323da3455e343e0006deb026be/statistical_clear_sky-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c2c790ac819291be6819f1ec2b155a6", "sha256": "c6a1837bcb76d98896ad9bb9e3e090778d7deb1e62b2b78e379d71d844e01490"}, "downloads": -1, "filename": "statistical-clear-sky-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8c2c790ac819291be6819f1ec2b155a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 35329, "upload_time": "2020-02-14T20:58:36", "upload_time_iso_8601": "2020-02-14T20:58:36.458192Z", "url": "https://files.pythonhosted.org/packages/e3/d9/3d9f38c26b849e3555e0e63be626e1bb23237164819fd826b998b86ff66c/statistical-clear-sky-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "9e0f06bc9fe6d5db94c29c5c727fbb6e", "sha256": "cf22faab07d25c713876d4fb3846f0a3e8dd4e15d4c8b780a7ac34e0e046208b"}, "downloads": -1, "filename": "statistical_clear_sky-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9e0f06bc9fe6d5db94c29c5c727fbb6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 45893, "upload_time": "2020-04-08T01:05:17", "upload_time_iso_8601": "2020-04-08T01:05:17.272928Z", "url": "https://files.pythonhosted.org/packages/35/9a/04dfee35cb7e1b92fe2ad98147ccb9ec78e8955c89fe030d50e3d14e904d/statistical_clear_sky-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51cfebcf0ebcd746b28068def9eb3f3c", "sha256": "77ec1ea07a9dcf24aadebb2fed3c8b14c60f06254b36889faf54a7ee30fc2be0"}, "downloads": -1, "filename": "statistical-clear-sky-0.3.1.tar.gz", "has_sig": false, "md5_digest": "51cfebcf0ebcd746b28068def9eb3f3c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 33267, "upload_time": "2020-04-08T01:05:18", "upload_time_iso_8601": "2020-04-08T01:05:18.742783Z", "url": "https://files.pythonhosted.org/packages/ab/bb/eaa869475b8e9376531a6cb5fc22b9202e757f8f9be8cb6bf544984489a6/statistical-clear-sky-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e0f06bc9fe6d5db94c29c5c727fbb6e", "sha256": "cf22faab07d25c713876d4fb3846f0a3e8dd4e15d4c8b780a7ac34e0e046208b"}, "downloads": -1, "filename": "statistical_clear_sky-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9e0f06bc9fe6d5db94c29c5c727fbb6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 45893, "upload_time": "2020-04-08T01:05:17", "upload_time_iso_8601": "2020-04-08T01:05:17.272928Z", "url": "https://files.pythonhosted.org/packages/35/9a/04dfee35cb7e1b92fe2ad98147ccb9ec78e8955c89fe030d50e3d14e904d/statistical_clear_sky-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51cfebcf0ebcd746b28068def9eb3f3c", "sha256": "77ec1ea07a9dcf24aadebb2fed3c8b14c60f06254b36889faf54a7ee30fc2be0"}, "downloads": -1, "filename": "statistical-clear-sky-0.3.1.tar.gz", "has_sig": false, "md5_digest": "51cfebcf0ebcd746b28068def9eb3f3c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 33267, "upload_time": "2020-04-08T01:05:18", "upload_time_iso_8601": "2020-04-08T01:05:18.742783Z", "url": "https://files.pythonhosted.org/packages/ab/bb/eaa869475b8e9376531a6cb5fc22b9202e757f8f9be8cb6bf544984489a6/statistical-clear-sky-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:24 2020"}