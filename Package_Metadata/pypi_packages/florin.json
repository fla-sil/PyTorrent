{"info": {"author": "Jeff Kinnison, Elia Shahbazi", "author_email": "jkinniso@nd.edu, ashahbaz@nd.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Medical Science Apps.", "Topic :: System :: Distributed Computing"], "description": "# florin: Flexible Learning-Free Reconstruction of Neural Circuits\n\nFLoRIN is a framework for carrying out computer vision pipelines locally or at\nscale.\n\n# Why FLoRIN?\n\n- Designed from the ground up for large-scale image processing (think images\n  with 10^4, 10^5, 10^6+ pixels).\n- Provides the custom N-Dimensional Neighborhood Thresholding method, which has\n  been shown to outperform other thresholding methods at segmenting neural\n  microsopy data.\n- Out of the box serial, parallel, and distributed processing.\n- Utilizes CPU (numpy) vectorized operations and methods from scientific python\n  libraries.\n- Enables pipeline reuse. Create one image processing pipeline, serialize it,\n  and move it to another machine running FLoRIN.\n\n# Target Audience\n\nFLoRIN was originally designed as a pipeline for segmenting and reconstructing\nvolumes of neural microscopy data, allowing neuroscientists to quickly process\nlarge volumes of data without needing to use any machine learning.\nbut has since been applied to iris biometrics as well. In its\ncurrent form, FLoRIN is appropriate for any computer vision application that\nseeks to scale or be reproduced in multiple locations.\n\n# Installation\n\nFLoRIN is compatible with Python 3.4+. To install FLoRIN, run\n\n```bash\n# pip\npip install florin\n```\n\n\n# Documentation\n\nFull documentation of the FLoRIN pipeline may be found at <https://florin.readthedocs.io>\n\n# Getting Started\n\nA simple segmentation pipeline for microCT X-Ray data that uses multiprocessing\nfor subsets of operations looks like:\n\n```python\nimport florin\nimport florin.classify\nimport florin.conncomp as conncomp\nimport florin.morphology as morphology\nimport florin.thresholding as thresholding\n\npipeline = florin.Serial(\n    # Load in the data to process\n    florin.load('/path/to/my/volume'),\n\n    # Subdivide the data into sub-arrays\n    florin.tile(shape=(10, 64, 64), stride=(5, 32, 32)),\n\n    # Segment multiple tiles independently in parallel.\n    florin.Multiprocess(\n        # Threshold with NDNT\n        thresholding.ndnt(shape=(10, 64, 64), threshold=0.3),\n\n        # Clean up the binarized image\n        morphology.binary_opening()\n    ),\n\n    # Find connected components ad get their properties\n    conncomp.label(),\n    morphology.binary_fill_holes(min_size=50),\n    conncomp.regionprops(),\n\n    # Classify the connected components concurrently.\n    florin.Multithread(\n        # Bin connected components based on their properties\n        florin.classify(\n            # If 100 <= obj.area <= 500 and 25 <= obj.width <= 55 and\n            # 25 <= obj <= 55 and 5 <= obj.depth <= 10, consider the connected\n            # component a cell. Otherwise, consider it vasculature.\n            florin.bounds_classifier(\n                'cells',\n                area=(100, 500),\n                width=(25, 55),\n                height=(25, 55),\n                depth=(5, 10)),\n            florin.bounds_classifier('vasculature')\n        )\n    ),\n\n    # Save the output with class labels\n    florin.save('segmented.tiff')\n)\n\nout = pipeline()\n```\n\n# Maintainers\n\n- [Jeff Kinnison](https://github.com/jeffkinnison \"Jeff Kinnison on GitHub\")\n\n# Contributing\n\nTo contribute, fork the main repo, add your code, and submit a pull request! FLoRIN follows PEP-8 guidelines and uses `numpydoc` style for documentation.\n\n# Issues\n\nIf you run across a bug, open an issue with a description, system information, and a code snippet that reprodices the error.\n\n# License\n\n[MIT License](https://github.com/jeffkinnison/florin/blob/master/LICENSE \"MIT License\")\n\n# Cite FLoRIN\n\nThe original FLoRIN paper\n\n```\n@article{shahbazi2018flexible,\n  title={Flexible Learning-Free Segmentation and Reconstruction of Neural Volumes},\n  author={Shahbazi, Ali and Kinnison, Jeffery and Vescovi, Rafael and Du, Ming and Hill, Robert and J{\\\"o}sch, Maximilian and Takeno, Marc and Zeng, Hongkui and Da Costa, Nuno Ma{\\c{c}}arico and Grutzendler, Jaime and Kasthuri, Narayanan and Scheirer, Walter},\n  journal={Scientific reports},\n  volume={8},\n  number={1},\n  pages={14247},\n  year={2018},\n  publisher={Nature Publishing Group}\n}\n```\n\n# Special Thanks\n\nA number of people contributed to FLoRIN's development who deserve a shout out:\n\n## Original Concept\n\n- [Elia Shahbazi](https://github.com/elia-shahbazi)\n- [Jeff Kinnison](https://github.com/jeffkinnison)\n- [Walter Scheirer](https://www.wjscheirer.com/)\n\n## Early Development (Pre-Alpha)\n\n- [Antonio Minondo](https://github.com/aminondo)\n- [Cami Carballo](https://github.com/camicarballo)\n- [Kevin Choy](https://github.com/kevinchoy)\n- [Tom Marshall](https://github.com/ThomasWMarshall)\n\n# FLoRIN Experimental Code\n\nThe code for the original FLoRIN paper can be found [here](https://github.com/CVRL/florin-scirep \"FLoRIN Scientific Reports code\").\n\nThe code for \"Learning-Free Iris Segmentation Revisited: A First Step Toward Fast Volumetric Operation Over Video Samples\" can be found [here](https://github.com/jeffkinnison/florin-iris \"FLoRIN ICB 2019 Code\").\n\nWe are in the process of reimplementing these code bases using the official FLoRIN package here and will provide that code as a separate branch in each repository on completion.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jeffkinnison/florin", "keywords": "machine_learning hyperparameters distributed_computing", "license": "", "maintainer": "", "maintainer_email": "", "name": "florin", "package_url": "https://pypi.org/project/florin/", "platform": "", "project_url": "https://pypi.org/project/florin/", "project_urls": {"Homepage": "https://github.com/jeffkinnison/florin"}, "release_url": "https://pypi.org/project/florin/0.0.2.post1/", "requires_dist": ["cloud-volume", "h5py", "mpi4py (>=3.0.0)", "networkx", "numpy", "pathos", "scikit-image", "scipy"], "requires_python": "", "summary": "Fast image segmentation without needing to learn a thing.", "version": "0.0.2.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>florin: Flexible Learning-Free Reconstruction of Neural Circuits</h1>\n<p>FLoRIN is a framework for carrying out computer vision pipelines locally or at\nscale.</p>\n<h1>Why FLoRIN?</h1>\n<ul>\n<li>Designed from the ground up for large-scale image processing (think images\nwith 10^4, 10^5, 10^6+ pixels).</li>\n<li>Provides the custom N-Dimensional Neighborhood Thresholding method, which has\nbeen shown to outperform other thresholding methods at segmenting neural\nmicrosopy data.</li>\n<li>Out of the box serial, parallel, and distributed processing.</li>\n<li>Utilizes CPU (numpy) vectorized operations and methods from scientific python\nlibraries.</li>\n<li>Enables pipeline reuse. Create one image processing pipeline, serialize it,\nand move it to another machine running FLoRIN.</li>\n</ul>\n<h1>Target Audience</h1>\n<p>FLoRIN was originally designed as a pipeline for segmenting and reconstructing\nvolumes of neural microscopy data, allowing neuroscientists to quickly process\nlarge volumes of data without needing to use any machine learning.\nbut has since been applied to iris biometrics as well. In its\ncurrent form, FLoRIN is appropriate for any computer vision application that\nseeks to scale or be reproduced in multiple locations.</p>\n<h1>Installation</h1>\n<p>FLoRIN is compatible with Python 3.4+. To install FLoRIN, run</p>\n<pre><span class=\"c1\"># pip</span>\npip install florin\n</pre>\n<h1>Documentation</h1>\n<p>Full documentation of the FLoRIN pipeline may be found at <a href=\"https://florin.readthedocs.io\" rel=\"nofollow\">https://florin.readthedocs.io</a></p>\n<h1>Getting Started</h1>\n<p>A simple segmentation pipeline for microCT X-Ray data that uses multiprocessing\nfor subsets of operations looks like:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">florin</span>\n<span class=\"kn\">import</span> <span class=\"nn\">florin.classify</span>\n<span class=\"kn\">import</span> <span class=\"nn\">florin.conncomp</span> <span class=\"k\">as</span> <span class=\"nn\">conncomp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">florin.morphology</span> <span class=\"k\">as</span> <span class=\"nn\">morphology</span>\n<span class=\"kn\">import</span> <span class=\"nn\">florin.thresholding</span> <span class=\"k\">as</span> <span class=\"nn\">thresholding</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">Serial</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Load in the data to process</span>\n    <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/my/volume'</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># Subdivide the data into sub-arrays</span>\n    <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">)),</span>\n\n    <span class=\"c1\"># Segment multiple tiles independently in parallel.</span>\n    <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">Multiprocess</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Threshold with NDNT</span>\n        <span class=\"n\">thresholding</span><span class=\"o\">.</span><span class=\"n\">ndnt</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">),</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">),</span>\n\n        <span class=\"c1\"># Clean up the binarized image</span>\n        <span class=\"n\">morphology</span><span class=\"o\">.</span><span class=\"n\">binary_opening</span><span class=\"p\">()</span>\n    <span class=\"p\">),</span>\n\n    <span class=\"c1\"># Find connected components ad get their properties</span>\n    <span class=\"n\">conncomp</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(),</span>\n    <span class=\"n\">morphology</span><span class=\"o\">.</span><span class=\"n\">binary_fill_holes</span><span class=\"p\">(</span><span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">),</span>\n    <span class=\"n\">conncomp</span><span class=\"o\">.</span><span class=\"n\">regionprops</span><span class=\"p\">(),</span>\n\n    <span class=\"c1\"># Classify the connected components concurrently.</span>\n    <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">Multithread</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Bin connected components based on their properties</span>\n        <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span>\n            <span class=\"c1\"># If 100 &lt;= obj.area &lt;= 500 and 25 &lt;= obj.width &lt;= 55 and</span>\n            <span class=\"c1\"># 25 &lt;= obj &lt;= 55 and 5 &lt;= obj.depth &lt;= 10, consider the connected</span>\n            <span class=\"c1\"># component a cell. Otherwise, consider it vasculature.</span>\n            <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">bounds_classifier</span><span class=\"p\">(</span>\n                <span class=\"s1\">'cells'</span><span class=\"p\">,</span>\n                <span class=\"n\">area</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">),</span>\n                <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">),</span>\n                <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">),</span>\n                <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)),</span>\n            <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">bounds_classifier</span><span class=\"p\">(</span><span class=\"s1\">'vasculature'</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n\n    <span class=\"c1\"># Save the output with class labels</span>\n    <span class=\"n\">florin</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'segmented.tiff'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"p\">()</span>\n</pre>\n<h1>Maintainers</h1>\n<ul>\n<li><a href=\"https://github.com/jeffkinnison\" rel=\"nofollow\" title=\"Jeff Kinnison on GitHub\">Jeff Kinnison</a></li>\n</ul>\n<h1>Contributing</h1>\n<p>To contribute, fork the main repo, add your code, and submit a pull request! FLoRIN follows PEP-8 guidelines and uses <code>numpydoc</code> style for documentation.</p>\n<h1>Issues</h1>\n<p>If you run across a bug, open an issue with a description, system information, and a code snippet that reprodices the error.</p>\n<h1>License</h1>\n<p><a href=\"https://github.com/jeffkinnison/florin/blob/master/LICENSE\" rel=\"nofollow\" title=\"MIT License\">MIT License</a></p>\n<h1>Cite FLoRIN</h1>\n<p>The original FLoRIN paper</p>\n<pre><code>@article{shahbazi2018flexible,\n  title={Flexible Learning-Free Segmentation and Reconstruction of Neural Volumes},\n  author={Shahbazi, Ali and Kinnison, Jeffery and Vescovi, Rafael and Du, Ming and Hill, Robert and J{\\\"o}sch, Maximilian and Takeno, Marc and Zeng, Hongkui and Da Costa, Nuno Ma{\\c{c}}arico and Grutzendler, Jaime and Kasthuri, Narayanan and Scheirer, Walter},\n  journal={Scientific reports},\n  volume={8},\n  number={1},\n  pages={14247},\n  year={2018},\n  publisher={Nature Publishing Group}\n}\n</code></pre>\n<h1>Special Thanks</h1>\n<p>A number of people contributed to FLoRIN's development who deserve a shout out:</p>\n<h2>Original Concept</h2>\n<ul>\n<li><a href=\"https://github.com/elia-shahbazi\" rel=\"nofollow\">Elia Shahbazi</a></li>\n<li><a href=\"https://github.com/jeffkinnison\" rel=\"nofollow\">Jeff Kinnison</a></li>\n<li><a href=\"https://www.wjscheirer.com/\" rel=\"nofollow\">Walter Scheirer</a></li>\n</ul>\n<h2>Early Development (Pre-Alpha)</h2>\n<ul>\n<li><a href=\"https://github.com/aminondo\" rel=\"nofollow\">Antonio Minondo</a></li>\n<li><a href=\"https://github.com/camicarballo\" rel=\"nofollow\">Cami Carballo</a></li>\n<li><a href=\"https://github.com/kevinchoy\" rel=\"nofollow\">Kevin Choy</a></li>\n<li><a href=\"https://github.com/ThomasWMarshall\" rel=\"nofollow\">Tom Marshall</a></li>\n</ul>\n<h1>FLoRIN Experimental Code</h1>\n<p>The code for the original FLoRIN paper can be found <a href=\"https://github.com/CVRL/florin-scirep\" rel=\"nofollow\" title=\"FLoRIN Scientific Reports code\">here</a>.</p>\n<p>The code for \"Learning-Free Iris Segmentation Revisited: A First Step Toward Fast Volumetric Operation Over Video Samples\" can be found <a href=\"https://github.com/jeffkinnison/florin-iris\" rel=\"nofollow\" title=\"FLoRIN ICB 2019 Code\">here</a>.</p>\n<p>We are in the process of reimplementing these code bases using the official FLoRIN package here and will provide that code as a separate branch in each repository on completion.</p>\n\n          </div>"}, "last_serial": 5913755, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "99a17bf05010de51679c1f1725499eb9", "sha256": "ac688f6e1977aef45a11887c8b73faeb8732f9c19c56f2f486d01ce9a4d7eecb"}, "downloads": -1, "filename": "florin-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "99a17bf05010de51679c1f1725499eb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22359, "upload_time": "2019-06-03T11:18:25", "upload_time_iso_8601": "2019-06-03T11:18:25.368314Z", "url": "https://files.pythonhosted.org/packages/22/f4/0c8ff5e610edffcc6a658d70d3725e2cc9bf644b477e2cac6fed271a4bf3/florin-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f50cd290bec5d4b31de3d5e3e0bbb7c", "sha256": "a312ce590896295af5693856d1e7d3f6988abef9f0cc4794d0ca15bcc9ec854b"}, "downloads": -1, "filename": "florin-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5f50cd290bec5d4b31de3d5e3e0bbb7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15469, "upload_time": "2019-06-03T11:18:28", "upload_time_iso_8601": "2019-06-03T11:18:28.470468Z", "url": "https://files.pythonhosted.org/packages/15/37/b9e9d2051c86a355288b3ef436ae577db7816710c0a9ef6f9049f2f555ea/florin-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ef57b8b79418d7ed60986647f7199174", "sha256": "492fac7d577584b29dea3cadc80b428c9da06cfcb37a80cb41085a17ba1ddebe"}, "downloads": -1, "filename": "florin-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ef57b8b79418d7ed60986647f7199174", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34250, "upload_time": "2019-10-01T16:53:01", "upload_time_iso_8601": "2019-10-01T16:53:01.440829Z", "url": "https://files.pythonhosted.org/packages/70/ad/d8f083c8fd07de63707c09f43c4e9a86f25a3b2943cdc4ff8ad292c32503/florin-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d4d47455c301a4f9df407933774ab72", "sha256": "43e893acb9aa24ea652493f89e996e6508400bdb294e7f3c8e8786cb7821b94d"}, "downloads": -1, "filename": "florin-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8d4d47455c301a4f9df407933774ab72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24231, "upload_time": "2019-10-01T16:53:03", "upload_time_iso_8601": "2019-10-01T16:53:03.119777Z", "url": "https://files.pythonhosted.org/packages/94/05/bfcb71e58b4d5e244a0219c00c1b58071b7453215fb2f4b40904da3211fd/florin-0.0.2.tar.gz", "yanked": false}], "0.0.2.post1": [{"comment_text": "", "digests": {"md5": "e6191a4f178452cc46a40c026f67e427", "sha256": "4c3c8c51442ecb7c945f3cc7f2dc90dc0cc2f3ccaaea93482f9a4f9268a6947a"}, "downloads": -1, "filename": "florin-0.0.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "e6191a4f178452cc46a40c026f67e427", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34332, "upload_time": "2019-10-01T17:01:32", "upload_time_iso_8601": "2019-10-01T17:01:32.952829Z", "url": "https://files.pythonhosted.org/packages/d2/9a/bf2c9ea7800f3d4aeb783a4180ad006986ed3e41f931718a5f4d82feaa62/florin-0.0.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "861259216def94ddb1be4a902776d25c", "sha256": "cac2fbf1ab4a6f268283fbb5ece94d893cde96560f0c07ac51916da25e2ce8d1"}, "downloads": -1, "filename": "florin-0.0.2.post1.tar.gz", "has_sig": false, "md5_digest": "861259216def94ddb1be4a902776d25c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24257, "upload_time": "2019-10-01T17:01:35", "upload_time_iso_8601": "2019-10-01T17:01:35.872262Z", "url": "https://files.pythonhosted.org/packages/fc/e8/8f254550c8fbd81291556bc5bca6a8256ac1fc1ec17734923b84aabb02eb/florin-0.0.2.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e6191a4f178452cc46a40c026f67e427", "sha256": "4c3c8c51442ecb7c945f3cc7f2dc90dc0cc2f3ccaaea93482f9a4f9268a6947a"}, "downloads": -1, "filename": "florin-0.0.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "e6191a4f178452cc46a40c026f67e427", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34332, "upload_time": "2019-10-01T17:01:32", "upload_time_iso_8601": "2019-10-01T17:01:32.952829Z", "url": "https://files.pythonhosted.org/packages/d2/9a/bf2c9ea7800f3d4aeb783a4180ad006986ed3e41f931718a5f4d82feaa62/florin-0.0.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "861259216def94ddb1be4a902776d25c", "sha256": "cac2fbf1ab4a6f268283fbb5ece94d893cde96560f0c07ac51916da25e2ce8d1"}, "downloads": -1, "filename": "florin-0.0.2.post1.tar.gz", "has_sig": false, "md5_digest": "861259216def94ddb1be4a902776d25c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24257, "upload_time": "2019-10-01T17:01:35", "upload_time_iso_8601": "2019-10-01T17:01:35.872262Z", "url": "https://files.pythonhosted.org/packages/fc/e8/8f254550c8fbd81291556bc5bca6a8256ac1fc1ec17734923b84aabb02eb/florin-0.0.2.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:45 2020"}