{"info": {"author": "Germey", "author_email": "cqc@cuiqingcai.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# ModelZoo\n\nA Scaffold to help you build Deep-learning Model much more easily, implemented with TensorFlow 2.0.\n\n## Installation\n\nYou can install this package easily with pip:\n\n```\npip3 install model-zoo\n```\n\n## Usage\n\nLet's implement a linear-regression model quickly.\n\nHere we use boston_housing dataset as example.\n\nDefine a linear model in models folder, named `model.py` and import its Class from `__init__.py`:\n\n```python\nfrom model_zoo import Model\nimport tensorflow as tf\n\nclass HousePricePredictionModel(Model):\n\n    def inputs(self):\n        return tf.keras.Input(shape=(13))\n\n    def outputs(self, inputs):\n        return tf.keras.layers.Dense(1)(inputs)\n```\n\nThen define a trainer like this, named `train.py`:\n\n```python\nfrom model_zoo import flags, datasets, preprocess\nfrom model_zoo.trainer import BaseTrainer\n\nflags.define('epochs', 100)\nflags.define('model_class_name', 'HousePricePredictionModel')\nflags.define('checkpoint_name', 'model.ckpt')\n\nclass Trainer(BaseTrainer):\n    def data(self):\n        (x_train, y_train), (x_eval, y_eval) = datasets.boston_housing.load_data()\n        x_train, x_eval = preprocess.standardize(x_train, x_eval)\n        train_data, eval_data = (x_train, y_train), (x_eval, y_eval)\n        return train_data, eval_data\n\nif __name__ == '__main__':\n    Trainer().run()\n```\n\nNow, we've finished this model!\n\nNext we can run this model using this cmd:\n\n```\npython3 train.py\n```\n\nOutputs like this:\n\n```\nEpoch 1/100\n 1/13 [=>............................] - ETA: 0s - loss: 816.1798\n13/13 [==============================] - 0s 4ms/step - loss: 457.9925 - val_loss: 343.2489\n\nEpoch 2/100\n 1/13 [=>............................] - ETA: 0s - loss: 361.5632\n13/13 [==============================] - 0s 3ms/step - loss: 274.7090 - val_loss: 206.7015\nEpoch 00002: saving model to checkpoints/model-2.ckpt\n\nEpoch 3/100\n 1/13 [=>............................] - ETA: 0s - loss: 163.5308\n13/13 [==============================] - 0s 3ms/step - loss: 172.4033 - val_loss: 128.0830\n\nEpoch 4/100\n 1/13 [=>............................] - ETA: 0s - loss: 115.4743\n13/13 [==============================] - 0s 3ms/step - loss: 112.6434 - val_loss: 85.0848\nEpoch 00004: saving model to checkpoints/model-4.ckpt\n\nEpoch 5/100\n 1/13 [=>............................] - ETA: 0s - loss: 149.8252\n13/13 [==============================] - 0s 3ms/step - loss: 77.0281 - val_loss: 57.9716\n....\n\nEpoch 42/100\n 7/13 [===============>..............] - ETA: 0s - loss: 20.5911\n13/13 [==============================] - 0s 8ms/step - loss: 22.4666 - val_loss: 23.7161\nEpoch 00042: saving model to checkpoints/model-42.ckpt\n```\n\nIt runs only 42 epochs and stopped early, because the framework auto enabled early stop mechanism and there are no more good evaluation results for 20 epochs.\n\nWhen finished, we can find two folders generated named `checkpoints` and `events`.\n\nGo to `events` and run TensorBoard:\n\n```\ncd events\ntensorboard --logdir=.\n```\n\nTensorBoard like this:\n\n![](https://qiniu.cuiqingcai.com/2019-11-12-190237.png)\n\nThere are training and validation loss in the graph.\n\nAnd also we can find checkpoints in `checkpoints` dir.\n\nIt saved the best model named `model.ckpt` according to eval score, and it also saved checkpoints every 2 epochs.\n\nNext we can predict using existing checkpoints, define `infer.py` like this:\n\n```python\nfrom model_zoo import flags, datasets, preprocess\nfrom model_zoo.inferer import BaseInferer\n\nflags.define('checkpoint_name', 'model-best.ckpt')\n\nclass Inferer(BaseInferer):\n    def data(self):\n        (x_train, y_train), (x_test, y_test) = datasets.boston_housing.load_data()\n        _, x_test = preprocess.standardize(x_train, x_test)\n        return x_test\n\nif __name__ == '__main__':\n    result = Inferer().run()\n    print(result)\n```\n\nNow we've restored the specified model `model-best.ckpt` and prepared test data, outputs like this:\n\n```python\n[[ 9.637125 ]\n [21.368305 ]\n [20.898445 ]\n [33.832504 ]\n [25.756516 ]\n [21.264557 ]\n [29.069794 ]\n [24.968184 ]\n ...\n [36.027283 ]\n [39.06852  ]\n [25.728745 ]\n [41.62165  ]\n [34.340042 ]\n [24.821484 ]]\n```\n\nOK, we've finished restoring and predicting. Just so convenient. [Here](https://github.com/ModelZoo/PricePrediction) is the code.\n\n# More\n\nIf you want to find more models, just see [ModelZoo](https://github.com/ModelZoo).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ModelZoo/ModelZoo", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "modelai", "package_url": "https://pypi.org/project/modelai/", "platform": "", "project_url": "https://pypi.org/project/modelai/", "project_urls": {"Homepage": "https://github.com/ModelZoo/ModelZoo"}, "release_url": "https://pypi.org/project/modelai/0.0.1/", "requires_dist": ["absl-py (>=0.5.0)", "astor (>=0.7.1)", "cycler (>=0.10.0)", "h5py (>=2.8.0)", "kiwisolver (>=1.0.1)", "matplotlib (>=3.0.0)", "numpy (>=1.15.2)", "pandas (>=0.23.4)", "protobuf (>=3.6.1)", "pyparsing (>=2.2.2)", "scipy (>=1.1.0)", "six (>=1.11.0)", "sklearn", "tensorflow (>=2.0.0)", "termcolor (>=1.1.0)", "werkzeug (>=0.15.3)", "loguru (>=0.3.2)", "pyyaml (>=5.1.2)"], "requires_python": ">=3.5.0", "summary": "A framework to help you build model much more easily.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ModelZoo</h1>\n<p>A Scaffold to help you build Deep-learning Model much more easily, implemented with TensorFlow 2.0.</p>\n<h2>Installation</h2>\n<p>You can install this package easily with pip:</p>\n<pre><code>pip3 install model-zoo\n</code></pre>\n<h2>Usage</h2>\n<p>Let's implement a linear-regression model quickly.</p>\n<p>Here we use boston_housing dataset as example.</p>\n<p>Define a linear model in models folder, named <code>model.py</code> and import its Class from <code>__init__.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">model_zoo</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HousePricePredictionModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">inputs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">outputs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n</pre>\n<p>Then define a trainer like this, named <code>train.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">model_zoo</span> <span class=\"kn\">import</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">datasets</span><span class=\"p\">,</span> <span class=\"n\">preprocess</span>\n<span class=\"kn\">from</span> <span class=\"nn\">model_zoo.trainer</span> <span class=\"kn\">import</span> <span class=\"n\">BaseTrainer</span>\n\n<span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s1\">'epochs'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s1\">'model_class_name'</span><span class=\"p\">,</span> <span class=\"s1\">'HousePricePredictionModel'</span><span class=\"p\">)</span>\n<span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s1\">'checkpoint_name'</span><span class=\"p\">,</span> <span class=\"s1\">'model.ckpt'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Trainer</span><span class=\"p\">(</span><span class=\"n\">BaseTrainer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x_eval</span><span class=\"p\">,</span> <span class=\"n\">y_eval</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">boston_housing</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">()</span>\n        <span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">x_eval</span> <span class=\"o\">=</span> <span class=\"n\">preprocess</span><span class=\"o\">.</span><span class=\"n\">standardize</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">x_eval</span><span class=\"p\">)</span>\n        <span class=\"n\">train_data</span><span class=\"p\">,</span> <span class=\"n\">eval_data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x_eval</span><span class=\"p\">,</span> <span class=\"n\">y_eval</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">train_data</span><span class=\"p\">,</span> <span class=\"n\">eval_data</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">Trainer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Now, we've finished this model!</p>\n<p>Next we can run this model using this cmd:</p>\n<pre><code>python3 train.py\n</code></pre>\n<p>Outputs like this:</p>\n<pre><code>Epoch 1/100\n 1/13 [=&gt;............................] - ETA: 0s - loss: 816.1798\n13/13 [==============================] - 0s 4ms/step - loss: 457.9925 - val_loss: 343.2489\n\nEpoch 2/100\n 1/13 [=&gt;............................] - ETA: 0s - loss: 361.5632\n13/13 [==============================] - 0s 3ms/step - loss: 274.7090 - val_loss: 206.7015\nEpoch 00002: saving model to checkpoints/model-2.ckpt\n\nEpoch 3/100\n 1/13 [=&gt;............................] - ETA: 0s - loss: 163.5308\n13/13 [==============================] - 0s 3ms/step - loss: 172.4033 - val_loss: 128.0830\n\nEpoch 4/100\n 1/13 [=&gt;............................] - ETA: 0s - loss: 115.4743\n13/13 [==============================] - 0s 3ms/step - loss: 112.6434 - val_loss: 85.0848\nEpoch 00004: saving model to checkpoints/model-4.ckpt\n\nEpoch 5/100\n 1/13 [=&gt;............................] - ETA: 0s - loss: 149.8252\n13/13 [==============================] - 0s 3ms/step - loss: 77.0281 - val_loss: 57.9716\n....\n\nEpoch 42/100\n 7/13 [===============&gt;..............] - ETA: 0s - loss: 20.5911\n13/13 [==============================] - 0s 8ms/step - loss: 22.4666 - val_loss: 23.7161\nEpoch 00042: saving model to checkpoints/model-42.ckpt\n</code></pre>\n<p>It runs only 42 epochs and stopped early, because the framework auto enabled early stop mechanism and there are no more good evaluation results for 20 epochs.</p>\n<p>When finished, we can find two folders generated named <code>checkpoints</code> and <code>events</code>.</p>\n<p>Go to <code>events</code> and run TensorBoard:</p>\n<pre><code>cd events\ntensorboard --logdir=.\n</code></pre>\n<p>TensorBoard like this:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59cb8c3736a79bdef86d96ed947e8b74722ea8f8/68747470733a2f2f71696e69752e63756971696e676361692e636f6d2f323031392d31312d31322d3139303233372e706e67\"></p>\n<p>There are training and validation loss in the graph.</p>\n<p>And also we can find checkpoints in <code>checkpoints</code> dir.</p>\n<p>It saved the best model named <code>model.ckpt</code> according to eval score, and it also saved checkpoints every 2 epochs.</p>\n<p>Next we can predict using existing checkpoints, define <code>infer.py</code> like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">model_zoo</span> <span class=\"kn\">import</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">datasets</span><span class=\"p\">,</span> <span class=\"n\">preprocess</span>\n<span class=\"kn\">from</span> <span class=\"nn\">model_zoo.inferer</span> <span class=\"kn\">import</span> <span class=\"n\">BaseInferer</span>\n\n<span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s1\">'checkpoint_name'</span><span class=\"p\">,</span> <span class=\"s1\">'model-best.ckpt'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Inferer</span><span class=\"p\">(</span><span class=\"n\">BaseInferer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">boston_housing</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">()</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x_test</span> <span class=\"o\">=</span> <span class=\"n\">preprocess</span><span class=\"o\">.</span><span class=\"n\">standardize</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">x_test</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x_test</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Inferer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>Now we've restored the specified model <code>model-best.ckpt</code> and prepared test data, outputs like this:</p>\n<pre><span class=\"p\">[[</span> <span class=\"mf\">9.637125</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">21.368305</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">20.898445</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">33.832504</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">25.756516</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">21.264557</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">29.069794</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">24.968184</span> <span class=\"p\">]</span>\n <span class=\"o\">...</span>\n <span class=\"p\">[</span><span class=\"mf\">36.027283</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">39.06852</span>  <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">25.728745</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">41.62165</span>  <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">34.340042</span> <span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">24.821484</span> <span class=\"p\">]]</span>\n</pre>\n<p>OK, we've finished restoring and predicting. Just so convenient. <a href=\"https://github.com/ModelZoo/PricePrediction\" rel=\"nofollow\">Here</a> is the code.</p>\n<h1>More</h1>\n<p>If you want to find more models, just see <a href=\"https://github.com/ModelZoo\" rel=\"nofollow\">ModelZoo</a>.</p>\n\n          </div>"}, "last_serial": 6567509, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f347c5bd6b91926257af7a376f39e5b1", "sha256": "a363ea9ba2ffc2c9cf38c403fcd5e6c1bf1c2ce33d91aa02157a7610b9e6a55c"}, "downloads": -1, "filename": "modelai-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f347c5bd6b91926257af7a376f39e5b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 20453, "upload_time": "2020-02-04T09:18:08", "upload_time_iso_8601": "2020-02-04T09:18:08.439158Z", "url": "https://files.pythonhosted.org/packages/9b/0a/7495e8db61e1b925e155f337d103bd5f9ed83c82275b746a63b6ae64b9c2/modelai-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "053edd47d3c56f9b0121d9c97ed0dcd1", "sha256": "093ebe2f09303f1c4142295c739797671fa760053c9310b0567127cef742e85d"}, "downloads": -1, "filename": "modelai-0.0.1.tar.gz", "has_sig": false, "md5_digest": "053edd47d3c56f9b0121d9c97ed0dcd1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 17541, "upload_time": "2020-02-04T09:18:11", "upload_time_iso_8601": "2020-02-04T09:18:11.723767Z", "url": "https://files.pythonhosted.org/packages/e3/15/4821a774b9cd9ee418d6ee07b7c33db45f5cc5e25ef9a0f6782a6daaa15a/modelai-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f347c5bd6b91926257af7a376f39e5b1", "sha256": "a363ea9ba2ffc2c9cf38c403fcd5e6c1bf1c2ce33d91aa02157a7610b9e6a55c"}, "downloads": -1, "filename": "modelai-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f347c5bd6b91926257af7a376f39e5b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 20453, "upload_time": "2020-02-04T09:18:08", "upload_time_iso_8601": "2020-02-04T09:18:08.439158Z", "url": "https://files.pythonhosted.org/packages/9b/0a/7495e8db61e1b925e155f337d103bd5f9ed83c82275b746a63b6ae64b9c2/modelai-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "053edd47d3c56f9b0121d9c97ed0dcd1", "sha256": "093ebe2f09303f1c4142295c739797671fa760053c9310b0567127cef742e85d"}, "downloads": -1, "filename": "modelai-0.0.1.tar.gz", "has_sig": false, "md5_digest": "053edd47d3c56f9b0121d9c97ed0dcd1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 17541, "upload_time": "2020-02-04T09:18:11", "upload_time_iso_8601": "2020-02-04T09:18:11.723767Z", "url": "https://files.pythonhosted.org/packages/e3/15/4821a774b9cd9ee418d6ee07b7c33db45f5cc5e25ef9a0f6782a6daaa15a/modelai-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:56 2020"}