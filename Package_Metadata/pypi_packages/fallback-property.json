{"info": {"author": "Jonas und der Wolf GmbH", "author_email": "opensource@jonasundderwolf.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===================\nfallback-property\n===================\n\n.. image:: https://img.shields.io/pypi/v/fallback-property.svg\n    :target: https://pypi.python.org/pypi/fallback-property\n\n.. image:: https://travis-ci.org/jonasundderwolf/fallback-property.png?branch=master\n    :target: http://travis-ci.org/jonasundderwolf/fallback-property\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/jonasundderwolf/fallback-property/badge.svg?branch=master\n   :target: https://coveralls.io/github/jonasundderwolf/fallback-property?branch=master\n\n.. image:: https://img.shields.io/pypi/pyversions/fallback-property.svg\n    :target: https://pypi.python.org/pypi/fallback-property\n\n\nRequirements\n============\n\n- Python 3.6+\n\n\nWhat is it?\n===========\n\n``fallback_property`` transforms a function into a property and uses the\ndecorated function as fallback if no value was assigned to the property itself.\nA special descriptor (``fallback_property.FallbackDescriptor``)\nis used internally.\n\n\nDjango (or similar frameworks)\n------------------------------\n\n``fallback_property`` is useful if you have a function that aggregates\nvalues from related objects, which could already be fetched using an annotated\nqueryset.\nThe decorator will favor the precalculated value over calling the actual method.\n\nIt is especially helpful, if you optimize your application and want to\nreplace legacy or performance critical properties with precalulated values\nusing ``.annotate()``.\n\n\nHow to use it?\n==============\n\nSimply define a function and use the decorator ``fallback_property`` ::\n\n    from fallback_property import fallback_property\n\n    class Foo:\n\n        @fallback_property()\n        def fallback_func(self):\n            return 7\n\n\nArguments\n---------\n\nThe ``fallback_property()`` has two optional arguments.\n\n``cached: bool = True``\n    If the property is accessed multiple times, call the fallback function only once.\n\n``logging: bool = False``\n    Log a warning if there was a fallback to the decorated, original method.\n\n\nUsage Example (Django)\n======================\n\nSuppose we have the following models ::\n\n    from django.db import models\n\n\n    class Pipeline(model.Model):\n        @property\n        def total_length(self):\n            return sum(self.parts.values_list('length', flat=True))\n\n\n    class Parts(models.Model):\n        length = models.PositiveIntegerField()\n        pipeline = models.ForeignKey(Pipeline, related_name='parts')\n\n\nCalling ``pipline.total_length`` will always trigger another query and is\neven more expensive when dealing with multiple objects. This can be\noptimized by using ``.annotate()`` and ``fallback_property()`` ::\n\n    from django.db import models, QuerySet\n    from django.db.functions import Coalesce\n    from django.db.models import Sum\n    from fallback_property import fallback_property\n\n\n    class PipelineQuerySet(QuerySet):\n\n        def with_total_length(self):\n            return self.annotate(\n                total_length=Coalesce(\n                    Sum('parts__length', output_field=models.IntegerField()),\n                    0,\n                )\n            )\n\n\n    class Pipeline(model.Model):\n\n        @fallback_property(logging=True)\n        def total_length(self):\n            return sum(self.parts.values_list('length', flat=True))\n\n\nYou can now access the ``total_length`` without triggering another query or\nget a warning, when the fallback function is used ::\n\n    pipeline = Pipeline.objects.with_total_length().first()\n    print(pipeline.total_length)\n\n\n**Important: The annotated value and the property must have the same name.**\n\n\nRelated objects\n---------------\n\nWhen dealing with related objects in Django be aware that the ORM imposes certain limitations:\n\nIn the following example one might expect to get an instance of ``User``, but instead the\nvalue of the primary key is returned::\n\n    from django.db import models, QuerySet\n    from django.db.functions import Coalesce\n    from django.db.models import F\n    from fallback_property import fallback_property\n\n\n    class PartQuerySet(QuerySet):\n\n        def with_owner(self):\n            return self.annotate(\n                owner=Coalesce(\n                    F('_owner'),\n                    F('pipeline__owner'),\n                    None,\n                )\n            )\n\n\n    class Pipeline(model.Model):\n        owner = models.ForeignKey(User)\n\n\n    class Parts(models.Model):\n        _owner = models.ForeignKey(User, blank=True, null=True, on_delete=models.SET_NULL)\n        length = models.PositiveIntegerField()\n        pipeline = models.ForeignKey(Pipeline, related_name='parts')\n\n        objects = PartQuerySet()\n\n        @fallback_property()\n        def owner(self):\n            return self._owner or self.pipline.owner\n\n\n    >>> print(Part.objects.with_owner().first().owner)\n    >>> 1\n\n\nDevelopment\n===========\n\nThis project is using `poetry <https://poetry.eustace.io/>`_ to manage all\ndev dependencies.\n\nClone this repository and run ::\n\n   poetry install\n   poetry run pip install django\n\nto create a virtual environment with all dependencies.\n\nYou can now run the test suite using ::\n\n  poetry run pytest\n\n\nThis repository follows the `angular commit conventions <https://github.com/marionebl/commitlint/tree/master/@commitlint/config-angular>`_.\nYou can register a pre-commit hook to validate your commit messages by using\n`husky <https://github.com/typicode/husky>`_. The configurations are already in place if\nyou have nodejs installed. Just run ::\n\n   npm install\n\n\nand the pre-commit hook will be registered.\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jonasunnderwolf/fallback-property", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "fallback-property", "package_url": "https://pypi.org/project/fallback-property/", "platform": "", "project_url": "https://pypi.org/project/fallback-property/", "project_urls": {"Documentation": "https://github.com/jonasundderwolf/fallback-property/blob/master/README.rst", "Homepage": "https://github.com/jonasunnderwolf/fallback-property", "Repository": "https://github.com/jonasundderwolf/fallback-property"}, "release_url": "https://pypi.org/project/fallback-property/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A decorator which prefers a precalculated attribute over calling the decorated method.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/fallback-property\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/fallback-property.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe2d769addc45938c098e90b9b41b565161f8532/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66616c6c6261636b2d70726f70657274792e737667\"></a>\n<a href=\"http://travis-ci.org/jonasundderwolf/fallback-property\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f338dd8e52ffd1e7f260a9065712ca4d35782baf/68747470733a2f2f7472617669732d63692e6f72672f6a6f6e6173756e64646572776f6c662f66616c6c6261636b2d70726f70657274792e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/jonasundderwolf/fallback-property?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/jonasundderwolf/fallback-property/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fba51b4aac18625e540fa754448e11948594cada/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6f6e6173756e64646572776f6c662f66616c6c6261636b2d70726f70657274792f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/fallback-property\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/fallback-property.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fad3a262bfc99d23dd8d8660d3c4a2509a9d023/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f66616c6c6261636b2d70726f70657274792e737667\"></a>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6+</li>\n</ul>\n</div>\n<div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p><tt>fallback_property</tt> transforms a function into a property and uses the\ndecorated function as fallback if no value was assigned to the property itself.\nA special descriptor (<tt>fallback_property.FallbackDescriptor</tt>)\nis used internally.</p>\n<div id=\"django-or-similar-frameworks\">\n<h3>Django (or similar frameworks)</h3>\n<p><tt>fallback_property</tt> is useful if you have a function that aggregates\nvalues from related objects, which could already be fetched using an annotated\nqueryset.\nThe decorator will favor the precalculated value over calling the actual method.</p>\n<p>It is especially helpful, if you optimize your application and want to\nreplace legacy or performance critical properties with precalulated values\nusing <tt>.annotate()</tt>.</p>\n</div>\n</div>\n<div id=\"how-to-use-it\">\n<h2>How to use it?</h2>\n<p>Simply define a function and use the decorator <tt>fallback_property</tt></p>\n<pre>from fallback_property import fallback_property\n\nclass Foo:\n\n    @fallback_property()\n    def fallback_func(self):\n        return 7\n</pre>\n<div id=\"arguments\">\n<h3>Arguments</h3>\n<p>The <tt>fallback_property()</tt> has two optional arguments.</p>\n<dl>\n<dt><tt>cached: bool = True</tt></dt>\n<dd>If the property is accessed multiple times, call the fallback function only once.</dd>\n<dt><tt>logging: bool = False</tt></dt>\n<dd>Log a warning if there was a fallback to the decorated, original method.</dd>\n</dl>\n</div>\n</div>\n<div id=\"usage-example-django\">\n<h2>Usage Example (Django)</h2>\n<p>Suppose we have the following models</p>\n<pre>from django.db import models\n\n\nclass Pipeline(model.Model):\n    @property\n    def total_length(self):\n        return sum(self.parts.values_list('length', flat=True))\n\n\nclass Parts(models.Model):\n    length = models.PositiveIntegerField()\n    pipeline = models.ForeignKey(Pipeline, related_name='parts')\n</pre>\n<p>Calling <tt>pipline.total_length</tt> will always trigger another query and is\neven more expensive when dealing with multiple objects. This can be\noptimized by using <tt>.annotate()</tt> and <tt>fallback_property()</tt></p>\n<pre>from django.db import models, QuerySet\nfrom django.db.functions import Coalesce\nfrom django.db.models import Sum\nfrom fallback_property import fallback_property\n\n\nclass PipelineQuerySet(QuerySet):\n\n    def with_total_length(self):\n        return self.annotate(\n            total_length=Coalesce(\n                Sum('parts__length', output_field=models.IntegerField()),\n                0,\n            )\n        )\n\n\nclass Pipeline(model.Model):\n\n    @fallback_property(logging=True)\n    def total_length(self):\n        return sum(self.parts.values_list('length', flat=True))\n</pre>\n<p>You can now access the <tt>total_length</tt> without triggering another query or\nget a warning, when the fallback function is used</p>\n<pre>pipeline = Pipeline.objects.with_total_length().first()\nprint(pipeline.total_length)\n</pre>\n<p><strong>Important: The annotated value and the property must have the same name.</strong></p>\n<div id=\"related-objects\">\n<h3>Related objects</h3>\n<p>When dealing with related objects in Django be aware that the ORM imposes certain limitations:</p>\n<p>In the following example one might expect to get an instance of <tt>User</tt>, but instead the\nvalue of the primary key is returned:</p>\n<pre>from django.db import models, QuerySet\nfrom django.db.functions import Coalesce\nfrom django.db.models import F\nfrom fallback_property import fallback_property\n\n\nclass PartQuerySet(QuerySet):\n\n    def with_owner(self):\n        return self.annotate(\n            owner=Coalesce(\n                F('_owner'),\n                F('pipeline__owner'),\n                None,\n            )\n        )\n\n\nclass Pipeline(model.Model):\n    owner = models.ForeignKey(User)\n\n\nclass Parts(models.Model):\n    _owner = models.ForeignKey(User, blank=True, null=True, on_delete=models.SET_NULL)\n    length = models.PositiveIntegerField()\n    pipeline = models.ForeignKey(Pipeline, related_name='parts')\n\n    objects = PartQuerySet()\n\n    @fallback_property()\n    def owner(self):\n        return self._owner or self.pipline.owner\n\n\n&gt;&gt;&gt; print(Part.objects.with_owner().first().owner)\n&gt;&gt;&gt; 1\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>This project is using <a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">poetry</a> to manage all\ndev dependencies.</p>\n<p>Clone this repository and run</p>\n<pre>poetry install\npoetry run pip install django\n</pre>\n<p>to create a virtual environment with all dependencies.</p>\n<p>You can now run the test suite using</p>\n<pre>poetry run pytest\n</pre>\n<p>This repository follows the <a href=\"https://github.com/marionebl/commitlint/tree/master/@commitlint/config-angular\" rel=\"nofollow\">angular commit conventions</a>.\nYou can register a pre-commit hook to validate your commit messages by using\n<a href=\"https://github.com/typicode/husky\" rel=\"nofollow\">husky</a>. The configurations are already in place if\nyou have nodejs installed. Just run</p>\n<pre>npm install\n</pre>\n<p>and the pre-commit hook will be registered.</p>\n</div>\n\n          </div>"}, "last_serial": 6977788, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d3943ee2c40e479024bba029817f46b8", "sha256": "28e7c589ac747fbf9a119040064142ee482260b13b058db9b4aae37504bd319a"}, "downloads": -1, "filename": "fallback_property-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d3943ee2c40e479024bba029817f46b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7411, "upload_time": "2019-02-17T16:21:51", "upload_time_iso_8601": "2019-02-17T16:21:51.719589Z", "url": "https://files.pythonhosted.org/packages/26/f0/bdf42f6b358769d0a3f2650645ddff751e3be1e97d81a71e74cdfcafe956/fallback_property-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2dd9e571b4c97a5b1252dbc926900d50", "sha256": "9ffb4adaf381675fff6d27e405ec32dd20a5b87e596600d168361f5ce9149170"}, "downloads": -1, "filename": "fallback-property-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2dd9e571b4c97a5b1252dbc926900d50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5365, "upload_time": "2019-02-17T16:21:49", "upload_time_iso_8601": "2019-02-17T16:21:49.493018Z", "url": "https://files.pythonhosted.org/packages/51/42/4005452ed897a00607d889099d7dc79bbe0bf26f1cae0481615756d1638b/fallback-property-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0bfbd3214d4fe3b644b4cf7ed877ce0a", "sha256": "81df40929c17b1d5520e1a168cf28c926240a17f51455a7144d78d4689bfe786"}, "downloads": -1, "filename": "fallback_property-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0bfbd3214d4fe3b644b4cf7ed877ce0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5526, "upload_time": "2020-04-08T13:29:04", "upload_time_iso_8601": "2020-04-08T13:29:04.029892Z", "url": "https://files.pythonhosted.org/packages/bb/86/2df9de9c7c44472c1afa9d47638e1da14cdbd1e018c7f9c27f614bd8c72d/fallback_property-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7720246d53735c7d191e90c47cf7045", "sha256": "d38ade19054561af1ff1a75d31039f5433dc69a6f0dab575f4325f6cf3309a9e"}, "downloads": -1, "filename": "fallback-property-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c7720246d53735c7d191e90c47cf7045", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6037, "upload_time": "2020-04-08T13:29:04", "upload_time_iso_8601": "2020-04-08T13:29:04.891053Z", "url": "https://files.pythonhosted.org/packages/ac/68/69bf9263c237af25f1c9a72a6f81e5faee98190820d96f5d3149b724f328/fallback-property-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0bfbd3214d4fe3b644b4cf7ed877ce0a", "sha256": "81df40929c17b1d5520e1a168cf28c926240a17f51455a7144d78d4689bfe786"}, "downloads": -1, "filename": "fallback_property-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0bfbd3214d4fe3b644b4cf7ed877ce0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5526, "upload_time": "2020-04-08T13:29:04", "upload_time_iso_8601": "2020-04-08T13:29:04.029892Z", "url": "https://files.pythonhosted.org/packages/bb/86/2df9de9c7c44472c1afa9d47638e1da14cdbd1e018c7f9c27f614bd8c72d/fallback_property-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7720246d53735c7d191e90c47cf7045", "sha256": "d38ade19054561af1ff1a75d31039f5433dc69a6f0dab575f4325f6cf3309a9e"}, "downloads": -1, "filename": "fallback-property-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c7720246d53735c7d191e90c47cf7045", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6037, "upload_time": "2020-04-08T13:29:04", "upload_time_iso_8601": "2020-04-08T13:29:04.891053Z", "url": "https://files.pythonhosted.org/packages/ac/68/69bf9263c237af25f1c9a72a6f81e5faee98190820d96f5d3149b724f328/fallback-property-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:49 2020"}