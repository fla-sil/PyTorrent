{"info": {"author": "Dingyuan Wang", "author_email": "gumblex@aosc.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Version Control"], "description": "fossilpy\n========\nSimple pure-python library for reading Fossil repositories.\n\n.. code-block:: pycon\n\n   >>> r = Repo('project.fossil')\n   >>> f = r.file(123)\n   >>> f.blob\n   b'File content...'\n   >>> filelist = r.manifest(124).F\n   >>> filelist\n   [('file', '1234567890aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')]\n\nThis is a thin wrapper, and Fossil is an SQLite-based version control system.\nSo using raw SQL (``Repo.execute``) may be necessary to get more information.\n\nWriting, committing, or executing Fossil commands is not supported. (Although you can do SQL, writing is not recommended.) Reading the config database (~/.fossil), the checkout database (_FOSSIL_), or the checkout directory is also not supported.\n\nInstall `python-fossil-delta` for better performance.\n\nAPI\n---\n\nClasses\n~~~~~~~\n\n- **Repo(repository, check=False, cachesize=64)**: Represents a Fossil repo. ``repository`` is the file name. ``check`` specifies whether to calculate checksum. If numpy is not installed, calculation will be much slower. ``cachesize`` specifies how much blobs should be cached, set to 0 to disable.\n\n  - Repo.\\ **file(self, key)**: Returns a ``File`` according to the ``key``, which is either the blob's rid or uuid (SHA1/SHA3-256).\n\n  - Repo.\\ **manifest(self, key)**: Returns a ``StructuralArtifact`` according to the ``key``.\n\n  - Repo.\\ **artifact(self, key, type_=None)**: Returns an ``Artifact`` according to the ``key``. ``type_`` can be ``'structural'`` or ``'file'``.\n\n  - Repo.\\ **__getitem__(self, key)**: Returns an ``Artifact`` according to the ``key``.\n\n  - Repo.\\ **find_artifact(self, prefix)**: Given the uuid (SHA1/SHA3-256) prefix, returns a tuple ``(rid, uuid)``. If not found, raises a ``KeyError``.\n\n  - Repo.\\ **to_uuid(self, rid)**: Given the rid, returns the uuid of a blob. If not found, raises an ``IndexError``.\n\n  - Repo.\\ **to_rid(self, uuid)**: Given the uuid, returns the rid of a blob. If not found, raises an ``IndexError``.\n\n  - Repo.\\ **execute(self, sql, parameters=None)**: Execute raw SQL statements on the Fossil repo (SQLite database). See also `src/schema.c <https://www.fossil-scm.org/index.html/artifact/f72846e4a8e2929f>`_.\n\n- **Artifact(blob=None, rid=None, uuid=None)**: Represents a Fossil artifact, which is anything inside the ``blob`` table. Has attributes ``blob``, ``rid`` and ``uuid``. ``blob`` is the artifact(file) content.\n\n- **File(blob=None, rid=None, uuid=None)**: Represents a file, same as ``Artifact``.\n\n- **StructuralArtifact(blob=None, rid=None, uuid=None)**: Represent a structural artifact, aka. manifest, can be such as check-in, wiki and tickets.\n\n  - StructuralArtifact.\\ **keys()**: List cards.\n  - StructuralArtifact.\\ **cards**: Dictionary of cards. If a card type can occur multiple times, cards of the same type are stored in a list.\n  - Cards can be accessed like ``art.F``, ``art['F']`` or ``art.file``. See also `Fossil documentation <https://www.fossil-scm.org/index.html/doc/trunk/www/fileformat.wiki#structural>`_. Some useful cards: F(file), C(comment), P(parent_artifact), U(user_login), D(datetime), W(wiki_text)\n\n\nMisc.\n~~~~~\n\n- **LRUCache(maxlen)**: A simple implementation of least recently used (LRU) cache.\n\nFossil uses Julian date in most tables.\n\n- **julian_to_unix(t)**: Convert Julian date ``t`` to unix timestamp.\n- **unix_to_julian(t)**: Convert unix timestamp ``t`` to Julian date.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gumblex/fossilpy", "keywords": "fossil", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "fossilpy", "package_url": "https://pypi.org/project/fossilpy/", "platform": "any", "project_url": "https://pypi.org/project/fossilpy/", "project_urls": {"Homepage": "https://github.com/gumblex/fossilpy"}, "release_url": "https://pypi.org/project/fossilpy/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Simple pure-python library for reading Fossil repositories.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple pure-python library for reading Fossil repositories.</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Repo</span><span class=\"p\">(</span><span class=\"s1\">'project.fossil'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">blob</span>\n<span class=\"go\">b'File content...'\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filelist</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">manifest</span><span class=\"p\">(</span><span class=\"mi\">124</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">F</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filelist</span>\n<span class=\"go\">[('file', '1234567890aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')]</span>\n</pre>\n<p>This is a thin wrapper, and Fossil is an SQLite-based version control system.\nSo using raw SQL (<tt>Repo.execute</tt>) may be necessary to get more information.</p>\n<p>Writing, committing, or executing Fossil commands is not supported. (Although you can do SQL, writing is not recommended.) Reading the config database (~/.fossil), the checkout database (_FOSSIL_), or the checkout directory is also not supported.</p>\n<p>Install <cite>python-fossil-delta</cite> for better performance.</p>\n<div id=\"api\">\n<h2>API</h2>\n<div id=\"classes\">\n<h3>Classes</h3>\n<ul>\n<li><strong>Repo(repository, check=False, cachesize=64)</strong>: Represents a Fossil repo. <tt>repository</tt> is the file name. <tt>check</tt> specifies whether to calculate checksum. If numpy is not installed, calculation will be much slower. <tt>cachesize</tt> specifies how much blobs should be cached, set to 0 to disable.<ul>\n<li>Repo.<strong>file(self, key)</strong>: Returns a <tt>File</tt> according to the <tt>key</tt>, which is either the blob\u2019s rid or uuid (SHA1/SHA3-256).</li>\n<li>Repo.<strong>manifest(self, key)</strong>: Returns a <tt>StructuralArtifact</tt> according to the <tt>key</tt>.</li>\n<li>Repo.<strong>artifact(self, key, type_=None)</strong>: Returns an <tt>Artifact</tt> according to the <tt>key</tt>. <tt>type_</tt> can be <tt>'structural'</tt> or <tt>'file'</tt>.</li>\n<li>Repo.<strong>__getitem__(self, key)</strong>: Returns an <tt>Artifact</tt> according to the <tt>key</tt>.</li>\n<li>Repo.<strong>find_artifact(self, prefix)</strong>: Given the uuid (SHA1/SHA3-256) prefix, returns a tuple <tt>(rid, uuid)</tt>. If not found, raises a <tt>KeyError</tt>.</li>\n<li>Repo.<strong>to_uuid(self, rid)</strong>: Given the rid, returns the uuid of a blob. If not found, raises an <tt>IndexError</tt>.</li>\n<li>Repo.<strong>to_rid(self, uuid)</strong>: Given the uuid, returns the rid of a blob. If not found, raises an <tt>IndexError</tt>.</li>\n<li>Repo.<strong>execute(self, sql, parameters=None)</strong>: Execute raw SQL statements on the Fossil repo (SQLite database). See also <a href=\"https://www.fossil-scm.org/index.html/artifact/f72846e4a8e2929f\" rel=\"nofollow\">src/schema.c</a>.</li>\n</ul>\n</li>\n<li><strong>Artifact(blob=None, rid=None, uuid=None)</strong>: Represents a Fossil artifact, which is anything inside the <tt>blob</tt> table. Has attributes <tt>blob</tt>, <tt>rid</tt> and <tt>uuid</tt>. <tt>blob</tt> is the artifact(file) content.</li>\n<li><strong>File(blob=None, rid=None, uuid=None)</strong>: Represents a file, same as <tt>Artifact</tt>.</li>\n<li><strong>StructuralArtifact(blob=None, rid=None, uuid=None)</strong>: Represent a structural artifact, aka. manifest, can be such as check-in, wiki and tickets.<ul>\n<li>StructuralArtifact.<strong>keys()</strong>: List cards.</li>\n<li>StructuralArtifact.<strong>cards</strong>: Dictionary of cards. If a card type can occur multiple times, cards of the same type are stored in a list.</li>\n<li>Cards can be accessed like <tt>art.F</tt>, <tt><span class=\"pre\">art['F']</span></tt> or <tt>art.file</tt>. See also <a href=\"https://www.fossil-scm.org/index.html/doc/trunk/www/fileformat.wiki#structural\" rel=\"nofollow\">Fossil documentation</a>. Some useful cards: F(file), C(comment), P(parent_artifact), U(user_login), D(datetime), W(wiki_text)</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"misc\">\n<h3>Misc.</h3>\n<ul>\n<li><strong>LRUCache(maxlen)</strong>: A simple implementation of least recently used (LRU) cache.</li>\n</ul>\n<p>Fossil uses Julian date in most tables.</p>\n<ul>\n<li><strong>julian_to_unix(t)</strong>: Convert Julian date <tt>t</tt> to unix timestamp.</li>\n<li><strong>unix_to_julian(t)</strong>: Convert unix timestamp <tt>t</tt> to Julian date.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6368270, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "044329d3455d0359a1994f559355e93d", "sha256": "e3c560e428faffb66169508af6ec92da0260f6de0b266bec1e5b5ab12c5b41fc"}, "downloads": -1, "filename": "fossilpy-0.2.tar.gz", "has_sig": false, "md5_digest": "044329d3455d0359a1994f559355e93d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6120, "upload_time": "2017-08-29T06:26:10", "upload_time_iso_8601": "2017-08-29T06:26:10.395375Z", "url": "https://files.pythonhosted.org/packages/9d/37/d51b6ecdf4becb013b9bb3a1dd3c814d51dca0ddd716561257c724f307aa/fossilpy-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "e27f127bac4c6a1a7b543491e1bfc476", "sha256": "f6a2eb8f14766bb4d6991281489c4c56e34ac837eabda8f54c910ed44ff8eadd"}, "downloads": -1, "filename": "fossilpy-0.3.tar.gz", "has_sig": true, "md5_digest": "e27f127bac4c6a1a7b543491e1bfc476", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6200, "upload_time": "2019-02-26T16:50:53", "upload_time_iso_8601": "2019-02-26T16:50:53.150988Z", "url": "https://files.pythonhosted.org/packages/a9/ce/3b7f86ed840ce37d88cd932d2d9269737f5b43093a8e247006bec3dd5902/fossilpy-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "311ff9e8048a7c8e6b08878d0df5c357", "sha256": "fb88d85062c8d9fbc5d1d1ec005c76266a59671d1b648b6e510a6f06335a75c1"}, "downloads": -1, "filename": "fossilpy-0.3.1.tar.gz", "has_sig": true, "md5_digest": "311ff9e8048a7c8e6b08878d0df5c357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6285, "upload_time": "2019-12-28T12:29:28", "upload_time_iso_8601": "2019-12-28T12:29:28.698788Z", "url": "https://files.pythonhosted.org/packages/5a/22/c91cac9d28a45c0f01ac6e34521c13076c373ff184c793bdf66824243686/fossilpy-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "311ff9e8048a7c8e6b08878d0df5c357", "sha256": "fb88d85062c8d9fbc5d1d1ec005c76266a59671d1b648b6e510a6f06335a75c1"}, "downloads": -1, "filename": "fossilpy-0.3.1.tar.gz", "has_sig": true, "md5_digest": "311ff9e8048a7c8e6b08878d0df5c357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6285, "upload_time": "2019-12-28T12:29:28", "upload_time_iso_8601": "2019-12-28T12:29:28.698788Z", "url": "https://files.pythonhosted.org/packages/5a/22/c91cac9d28a45c0f01ac6e34521c13076c373ff184c793bdf66824243686/fossilpy-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:42 2020"}