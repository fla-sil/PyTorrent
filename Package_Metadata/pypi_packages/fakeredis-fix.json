{"info": {"author": "James Saryerwinnie", "author_email": "js@jamesls.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "**This is a fork of ``fakeredis`` that supports Python 3.3 and doesn't break with ``rq``. When the fixes are merged to the main repository, this package will be removed.**\r\n\r\nfakeredis: A fake version of a redis-py\r\n=======================================\r\n\r\n.. image:: https://secure.travis-ci.org/jamesls/fakeredis.png?branch=master\r\n   :target: http://travis-ci.org/jamesls/fakeredis\r\n\r\n.. image:: https://coveralls.io/repos/jamesls/fakeredis/badge.png?branch=master\r\n   :target: https://coveralls.io/r/jamesls/fakeredis\r\n\r\n\r\nfakeredis is a pure python implementation of the redis-py python client\r\nthat simulates talking to a redis server.  This was created for a single\r\npurpose: **to write unittests**.  Setting up redis is not hard, but\r\nmany times you want to write unittests that do not talk to an external server\r\n(such as redis).  This module now allows tests to simply use this\r\nmodule as a reasonable substitute for redis.\r\n\r\n\r\nHow to Use\r\n==========\r\n\r\nThe intent is for fakeredis to act as though you're talking to a real\r\nredis server.  It does this by storing state in the fakeredis module.\r\nFor example::\r\n\r\n  >>> import fakeredis\r\n  >>> r = fakeredis.FakeStrictRedis()\r\n  >>> r.set('foo', 'bar')\r\n  True\r\n  >>> r.get('foo')\r\n  'bar'\r\n  >>> r.lpush('bar', 1)\r\n  1\r\n  >>> r.lpush('bar', 2)\r\n  2\r\n  >>> r.lrange('bar', 0, -1)\r\n  [2, 1]\r\n\r\nBy storing state in the fakeredis module, instances can share\r\ndata::\r\n\r\n  >>> import fakeredis\r\n  >>> r1 = fakeredis.FakeStrictRedis()\r\n  >>> r1.set('foo', 'bar')\r\n  True\r\n  >>> r2 = fakeredis.FakeStrictRedis()\r\n  >>> r2.get('foo')\r\n  'bar'\r\n  >>> r2.set('bar', 'baz')\r\n  True\r\n  >>> r1.get('bar')\r\n  'baz'\r\n  >>> r2.get('bar')\r\n  'baz'\r\n\r\n\r\nFakeredis implements the same interface as `redis-py`_, the\r\npopular redis client for python, and models the responses\r\nof redis 2.6.\r\n\r\n\r\nUnimplemented Commands\r\n======================\r\n\r\nAll of the redis commands are implemented in fakeredis with\r\nthese exceptions:\r\n\r\n\r\nhash\r\n----\r\n\r\n * hincrbyfloat\r\n\r\n\r\nstring\r\n------\r\n\r\n * incrbyfloat\r\n * bitop\r\n * psetex\r\n\r\n\r\ngeneric\r\n-------\r\n\r\n * restore\r\n * dump\r\n * pexpireat\r\n * pttl\r\n * pexpire\r\n * migrate\r\n * object\r\n\r\n\r\nserver\r\n------\r\n\r\n * debug object\r\n * client list\r\n * lastsave\r\n * slowlog\r\n * sync\r\n * shutdown\r\n * monitor\r\n * client kill\r\n * config resetstat\r\n * time\r\n * config get\r\n * save\r\n * debug segfault\r\n * bgsave\r\n * bgrewriteaof\r\n * slaveof\r\n * info\r\n * config set\r\n * dbsize\r\n\r\n\r\nconnection\r\n----------\r\n\r\n * echo\r\n * select\r\n * quit\r\n * auth\r\n\r\n\r\nscripting\r\n---------\r\n\r\n * script flush\r\n * script kill\r\n * script load\r\n * evalsha\r\n * eval\r\n * script exists\r\n\r\n\r\npubsub\r\n------\r\n\r\n * punsubscribe\r\n * subscribe\r\n * publish\r\n * psubscribe\r\n * unsubscribe\r\n\r\n\r\nContributing\r\n============\r\n\r\nContributions are welcome.  Please see the `contributing guide`_ for\r\nmore details.\r\n\r\n\r\nRunning the Tests\r\n=================\r\n\r\nTo ensure parity with the real redis, there are a set of integration tests\r\nthat mirror the unittests.  For every unittest that is written, the same\r\ntest is run against a real redis instance using a real redis-py client\r\ninstance.  In order to run these tests you must have a redis server running\r\non localhost, port 6379 (the default settings).  The integration tests use\r\ndb=10 in order to minimize collisions with an existing redis instance.\r\n\r\n\r\nTo run all the tests, install the requirements file::\r\n\r\n    pip install -r requirements.txt\r\n\r\nIf you just want to run the unittests::\r\n\r\n    nosetests test_fakeredis.py:TestFakeStrictRedis test_fakeredis.py:TestFakeRedis\r\n\r\nBecause this module is attempting to provide the same interface as `redis-py`_,\r\nthe python bindings to redis, a reasonable way to test this to to take each\r\nunittest and run it against a real redis server.  fakeredis and the real redis\r\nserver should give the same result.  This ensures parity between the two.  You\r\ncan run these \"integration\" tests like this::\r\n\r\n    nosetests test_fakeredis.py:TestRealStrictRedis test_fakeredis.py:TestRealRedis\r\n\r\nIn terms of implementation, ``TestRealRedis`` is a subclass of\r\n``TestFakeRedis`` that overrides a factory method to create\r\nan instance of ``redis.Redis`` (an actual python client for redis)\r\ninstead of ``fakeredis.FakeStrictRedis``.\r\n\r\nTo run both the unittests and the \"integration\" tests, run::\r\n\r\n    nosetests\r\n\r\nIf redis is not running and you try to run tests against a real redis server,\r\nthese tests will have a result of 'S' for skipped.\r\n\r\nThere are some tests that test redis blocking operations that are somewhat\r\nslow.  If you want to skip these tests during day to day development,\r\nthey have all been tagged as 'slow' so you can skip them by running::\r\n\r\n    nosetests -a '!slow'\r\n\r\n\r\n.. _redis-py: http://redis-py.readthedocs.org/en/latest/index.html\r\n.. _contributing guide: https://github.com/jamesls/fakeredis/blob/master/CONTRIBUTING.rst", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/clee704/fakeredis/tree/abc7160c5bbf5673c8831c61ae1afcc700737784", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "fakeredis-fix", "package_url": "https://pypi.org/project/fakeredis-fix/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fakeredis-fix/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/clee704/fakeredis/tree/abc7160c5bbf5673c8831c61ae1afcc700737784"}, "release_url": "https://pypi.org/project/fakeredis-fix/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "Fake implementation of redis API for testing purposes.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>This is a fork of ``fakeredis`` that supports Python 3.3 and doesn\u2019t break with ``rq``. When the fixes are merged to the main repository, this package will be removed.</strong></p>\n<div id=\"fakeredis-a-fake-version-of-a-redis-py\">\n<h2>fakeredis: A fake version of a redis-py</h2>\n<a href=\"http://travis-ci.org/jamesls/fakeredis\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/jamesls/fakeredis.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22161efe45504d4884e3305703cf73ca4ce48683/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6a616d65736c732f66616b6572656469732e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/jamesls/fakeredis\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/jamesls/fakeredis/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0258b89690a3bc850a2a1569c27496c6fe0aae53/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6a616d65736c732f66616b6572656469732f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<p>fakeredis is a pure python implementation of the redis-py python client\nthat simulates talking to a redis server.  This was created for a single\npurpose: <strong>to write unittests</strong>.  Setting up redis is not hard, but\nmany times you want to write unittests that do not talk to an external server\n(such as redis).  This module now allows tests to simply use this\nmodule as a reasonable substitute for redis.</p>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<p>The intent is for fakeredis to act as though you\u2019re talking to a real\nredis server.  It does this by storing state in the fakeredis module.\nFor example:</p>\n<pre>&gt;&gt;&gt; import fakeredis\n&gt;&gt;&gt; r = fakeredis.FakeStrictRedis()\n&gt;&gt;&gt; r.set('foo', 'bar')\nTrue\n&gt;&gt;&gt; r.get('foo')\n'bar'\n&gt;&gt;&gt; r.lpush('bar', 1)\n1\n&gt;&gt;&gt; r.lpush('bar', 2)\n2\n&gt;&gt;&gt; r.lrange('bar', 0, -1)\n[2, 1]\n</pre>\n<p>By storing state in the fakeredis module, instances can share\ndata:</p>\n<pre>&gt;&gt;&gt; import fakeredis\n&gt;&gt;&gt; r1 = fakeredis.FakeStrictRedis()\n&gt;&gt;&gt; r1.set('foo', 'bar')\nTrue\n&gt;&gt;&gt; r2 = fakeredis.FakeStrictRedis()\n&gt;&gt;&gt; r2.get('foo')\n'bar'\n&gt;&gt;&gt; r2.set('bar', 'baz')\nTrue\n&gt;&gt;&gt; r1.get('bar')\n'baz'\n&gt;&gt;&gt; r2.get('bar')\n'baz'\n</pre>\n<p>Fakeredis implements the same interface as <a href=\"http://redis-py.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">redis-py</a>, the\npopular redis client for python, and models the responses\nof redis 2.6.</p>\n</div>\n<div id=\"unimplemented-commands\">\n<h2>Unimplemented Commands</h2>\n<p>All of the redis commands are implemented in fakeredis with\nthese exceptions:</p>\n<div id=\"hash\">\n<h3>hash</h3>\n<blockquote>\n<ul>\n<li>hincrbyfloat</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"string\">\n<h3>string</h3>\n<blockquote>\n<ul>\n<li>incrbyfloat</li>\n<li>bitop</li>\n<li>psetex</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"generic\">\n<h3>generic</h3>\n<blockquote>\n<ul>\n<li>restore</li>\n<li>dump</li>\n<li>pexpireat</li>\n<li>pttl</li>\n<li>pexpire</li>\n<li>migrate</li>\n<li>object</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"server\">\n<h3>server</h3>\n<blockquote>\n<ul>\n<li>debug object</li>\n<li>client list</li>\n<li>lastsave</li>\n<li>slowlog</li>\n<li>sync</li>\n<li>shutdown</li>\n<li>monitor</li>\n<li>client kill</li>\n<li>config resetstat</li>\n<li>time</li>\n<li>config get</li>\n<li>save</li>\n<li>debug segfault</li>\n<li>bgsave</li>\n<li>bgrewriteaof</li>\n<li>slaveof</li>\n<li>info</li>\n<li>config set</li>\n<li>dbsize</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"connection\">\n<h3>connection</h3>\n<blockquote>\n<ul>\n<li>echo</li>\n<li>select</li>\n<li>quit</li>\n<li>auth</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"scripting\">\n<h3>scripting</h3>\n<blockquote>\n<ul>\n<li>script flush</li>\n<li>script kill</li>\n<li>script load</li>\n<li>evalsha</li>\n<li>eval</li>\n<li>script exists</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"pubsub\">\n<h3>pubsub</h3>\n<blockquote>\n<ul>\n<li>punsubscribe</li>\n<li>subscribe</li>\n<li>publish</li>\n<li>psubscribe</li>\n<li>unsubscribe</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are welcome.  Please see the <a href=\"https://github.com/jamesls/fakeredis/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">contributing guide</a> for\nmore details.</p>\n</div>\n<div id=\"running-the-tests\">\n<h2>Running the Tests</h2>\n<p>To ensure parity with the real redis, there are a set of integration tests\nthat mirror the unittests.  For every unittest that is written, the same\ntest is run against a real redis instance using a real redis-py client\ninstance.  In order to run these tests you must have a redis server running\non localhost, port 6379 (the default settings).  The integration tests use\ndb=10 in order to minimize collisions with an existing redis instance.</p>\n<p>To run all the tests, install the requirements file:</p>\n<pre>pip install -r requirements.txt\n</pre>\n<p>If you just want to run the unittests:</p>\n<pre>nosetests test_fakeredis.py:TestFakeStrictRedis test_fakeredis.py:TestFakeRedis\n</pre>\n<p>Because this module is attempting to provide the same interface as <a href=\"http://redis-py.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">redis-py</a>,\nthe python bindings to redis, a reasonable way to test this to to take each\nunittest and run it against a real redis server.  fakeredis and the real redis\nserver should give the same result.  This ensures parity between the two.  You\ncan run these \u201cintegration\u201d tests like this:</p>\n<pre>nosetests test_fakeredis.py:TestRealStrictRedis test_fakeredis.py:TestRealRedis\n</pre>\n<p>In terms of implementation, <tt>TestRealRedis</tt> is a subclass of\n<tt>TestFakeRedis</tt> that overrides a factory method to create\nan instance of <tt>redis.Redis</tt> (an actual python client for redis)\ninstead of <tt>fakeredis.FakeStrictRedis</tt>.</p>\n<p>To run both the unittests and the \u201cintegration\u201d tests, run:</p>\n<pre>nosetests\n</pre>\n<p>If redis is not running and you try to run tests against a real redis server,\nthese tests will have a result of \u2018S\u2019 for skipped.</p>\n<p>There are some tests that test redis blocking operations that are somewhat\nslow.  If you want to skip these tests during day to day development,\nthey have all been tagged as \u2018slow\u2019 so you can skip them by running:</p>\n<pre>nosetests -a '!slow'\n</pre>\n</div>\n\n          </div>"}, "last_serial": 989494, "releases": {"0.4.1": [{"comment_text": "", "digests": {"md5": "a1ebfd0921f26b55ae7cbd9018ca7be4", "sha256": "fa155f96017772abf093a6bd930fc9be06f2b1a836a639313feaf637f74686d1"}, "downloads": -1, "filename": "fakeredis-fix-0.4.1.tar.gz", "has_sig": false, "md5_digest": "a1ebfd0921f26b55ae7cbd9018ca7be4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13328, "upload_time": "2014-02-03T15:42:59", "upload_time_iso_8601": "2014-02-03T15:42:59.251421Z", "url": "https://files.pythonhosted.org/packages/16/a9/9b9552aebb90d2f3a890c6cf5be017385c3cd354e8331d9f4de3c0c6f4ca/fakeredis-fix-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a1ebfd0921f26b55ae7cbd9018ca7be4", "sha256": "fa155f96017772abf093a6bd930fc9be06f2b1a836a639313feaf637f74686d1"}, "downloads": -1, "filename": "fakeredis-fix-0.4.1.tar.gz", "has_sig": false, "md5_digest": "a1ebfd0921f26b55ae7cbd9018ca7be4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13328, "upload_time": "2014-02-03T15:42:59", "upload_time_iso_8601": "2014-02-03T15:42:59.251421Z", "url": "https://files.pythonhosted.org/packages/16/a9/9b9552aebb90d2f3a890c6cf5be017385c3cd354e8331d9f4de3c0c6f4ca/fakeredis-fix-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:55 2020"}