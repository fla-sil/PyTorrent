{"info": {"author": "Samuel Li", "author_email": "sam@projreality.com", "bugtrack_url": null, "classifiers": [], "description": "HDFQS\n        =====\n        \n        HDFQS is a file format for Quantified Self data storage, which is:\n        \n         - Flexible\n         - Fast\n         - Easy to back up\n         - Based on an open and standard format\n        \n        Motivation\n        ----------\n        \n        Many health monitors (e.g. FitBit) currently support exporting data in CSV or XML format. While these are open standard formats, they are generally much slower, and take up more space, when compared with binary file formats. They are also harder to search for data by time. Using Excel or OpenOffice allows for more ease of plotting data, however, they also suffer from problems with speed when the volume of data grows large.\n        \n        Data Structure\n        --------------\n        \n        Each type of data (e.g. Heart Rate, Accelerometer) is stored in a separate table. All tables have a time column, a timezone column, and any number of additional columns for the data values. Many data types will likely have just one additional column (e.g. a column for heart rate, weight, etc). Data types marking events (e.g. step times) will have no additional columns. Other data types (e.g. 3-axis accelerometer) will have multiple additional columns (e.g. x, y, z).\n        \n        Time\n        ----\n        \n        Time is stored as ns since the epoch, in UTC.\n        \n        The timezone column specifies the timezone in which the data is collected. This allows calculation of the local time the data was collected, if required. Timezone is specified as the number of 15 minute blocks from UTC. This enables handling of certain timezones which are 15 minutes from a standard timezone, and minimizes the space required to store the value.\n        \n        Hierarchical Layout\n        -------------------\n        \n        An HDFQS file can contain multiple tables. They are located in a hierarchical tree, similar to a filesystem.\n        \n        The first level of hierarchy above the root is the location. All data from wearable devices are in the location \"self\". Other data from fixed locations, such as temperature loggers in a particular room or building, would be in its respective location (e.g.  \"livingroom\" or \"office\").\n        \n        The second level of hierarchy is the category. While any categories may be created, the basic categories which should cover most data sources are:\n        \n         - Activity - anything related to movement, such as accelerometer, gyroscope.\n         - Environment - measurements of the environment such as temperature, humidity.\n         - Health - health-related data such as heart rate, ECG.\n         - Location - location data such as GPS, Wi-Fi networks in range.\n         - Social - data related to interactions with other people, such as dialed/received calls, bluetooth networks in range.\n        \n        The data tables are located within the categories. They are named for what they measure (e.g. \"temperature\" or \"ecg\"), with common abbreviations used (e.g. \"hr\" for heart rate). As multiple devices can measure the same variable, the device name can optionally be appended with an underscore (e.g. \"calories_gwf\" or \"calories_fitbit\").\n        \n        Backups\n        -------\n        \n        Data in HDFQS can be spread over multiple HDF5 files. New data can either be appended to the most recent file, or a new file can be created. This allows for incremental backups, instead of dealing with a single huge file. Any backup tool may be used, but git annex is recommended, as it maintains checksums to protect the integrity of the individual files.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.projreality.com/hdfqs", "keywords": null, "license": "https://www.gnu.org/licenses/lgpl.html", "maintainer": null, "maintainer_email": null, "name": "hdfqs", "package_url": "https://pypi.org/project/hdfqs/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hdfqs/", "project_urls": {"Homepage": "http://www.projreality.com/hdfqs"}, "release_url": "https://pypi.org/project/hdfqs/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "HDFQS Python Library", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            HDFQS<br>        =====<br>        <br>        HDFQS is a file format for Quantified Self data storage, which is:<br>        <br>         - Flexible<br>         - Fast<br>         - Easy to back up<br>         - Based on an open and standard format<br>        <br>        Motivation<br>        ----------<br>        <br>        Many health monitors (e.g. FitBit) currently support exporting data in CSV or XML format. While these are open standard formats, they are generally much slower, and take up more space, when compared with binary file formats. They are also harder to search for data by time. Using Excel or OpenOffice allows for more ease of plotting data, however, they also suffer from problems with speed when the volume of data grows large.<br>        <br>        Data Structure<br>        --------------<br>        <br>        Each type of data (e.g. Heart Rate, Accelerometer) is stored in a separate table. All tables have a time column, a timezone column, and any number of additional columns for the data values. Many data types will likely have just one additional column (e.g. a column for heart rate, weight, etc). Data types marking events (e.g. step times) will have no additional columns. Other data types (e.g. 3-axis accelerometer) will have multiple additional columns (e.g. x, y, z).<br>        <br>        Time<br>        ----<br>        <br>        Time is stored as ns since the epoch, in UTC.<br>        <br>        The timezone column specifies the timezone in which the data is collected. This allows calculation of the local time the data was collected, if required. Timezone is specified as the number of 15 minute blocks from UTC. This enables handling of certain timezones which are 15 minutes from a standard timezone, and minimizes the space required to store the value.<br>        <br>        Hierarchical Layout<br>        -------------------<br>        <br>        An HDFQS file can contain multiple tables. They are located in a hierarchical tree, similar to a filesystem.<br>        <br>        The first level of hierarchy above the root is the location. All data from wearable devices are in the location \"self\". Other data from fixed locations, such as temperature loggers in a particular room or building, would be in its respective location (e.g.  \"livingroom\" or \"office\").<br>        <br>        The second level of hierarchy is the category. While any categories may be created, the basic categories which should cover most data sources are:<br>        <br>         - Activity - anything related to movement, such as accelerometer, gyroscope.<br>         - Environment - measurements of the environment such as temperature, humidity.<br>         - Health - health-related data such as heart rate, ECG.<br>         - Location - location data such as GPS, Wi-Fi networks in range.<br>         - Social - data related to interactions with other people, such as dialed/received calls, bluetooth networks in range.<br>        <br>        The data tables are located within the categories. They are named for what they measure (e.g. \"temperature\" or \"ecg\"), with common abbreviations used (e.g. \"hr\" for heart rate). As multiple devices can measure the same variable, the device name can optionally be appended with an underscore (e.g. \"calories_gwf\" or \"calories_fitbit\").<br>        <br>        Backups<br>        -------<br>        <br>        Data in HDFQS can be spread over multiple HDF5 files. New data can either be appended to the most recent file, or a new file can be created. This allows for incremental backups, instead of dealing with a single huge file. Any backup tool may be used, but git annex is recommended, as it maintains checksums to protect the integrity of the individual files.\n          </div>"}, "last_serial": 1375051, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "908ad89a1c30ee27b13527776c89a9f2", "sha256": "eaa06418652f588726d472f12375741287e93827cddbb775fbdd9ca312f1b8f4"}, "downloads": -1, "filename": "hdfqs-1.0.0.tar.gz", "has_sig": false, "md5_digest": "908ad89a1c30ee27b13527776c89a9f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21144, "upload_time": "2015-01-07T06:27:01", "upload_time_iso_8601": "2015-01-07T06:27:01.575961Z", "url": "https://files.pythonhosted.org/packages/66/95/89c7ddc023d3b775506a570933e2a36b7d25d6d3b166477320e3c6bdd520/hdfqs-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "538e5d146a5c480899b58ef8d9461a90", "sha256": "721b3722cf1bc40617d94c4bf4780ea8f8de06130403e896eaac31b9288217b3"}, "downloads": -1, "filename": "hdfqs-1.1.0.tar.gz", "has_sig": false, "md5_digest": "538e5d146a5c480899b58ef8d9461a90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24974, "upload_time": "2015-01-08T06:40:59", "upload_time_iso_8601": "2015-01-08T06:40:59.125694Z", "url": "https://files.pythonhosted.org/packages/09/a9/64e626819c61d08d2483bb52a18df81dded750aabb78644200369323e5c3/hdfqs-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "538e5d146a5c480899b58ef8d9461a90", "sha256": "721b3722cf1bc40617d94c4bf4780ea8f8de06130403e896eaac31b9288217b3"}, "downloads": -1, "filename": "hdfqs-1.1.0.tar.gz", "has_sig": false, "md5_digest": "538e5d146a5c480899b58ef8d9461a90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24974, "upload_time": "2015-01-08T06:40:59", "upload_time_iso_8601": "2015-01-08T06:40:59.125694Z", "url": "https://files.pythonhosted.org/packages/09/a9/64e626819c61d08d2483bb52a18df81dded750aabb78644200369323e5c3/hdfqs-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:04 2020"}