{"info": {"author": "Ariane Mora", "author_email": "ariane.n.mora@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# Sci-dat: Download Annotate TCGA\n\nA package developed to enable the download an annotation of TCGA data from `https://portal.gdc.cancer.gov/`\n\n## Install\n\n```\npip install scidat\n```\n\n## Use\n### API\nThe API combines the functions in Download and Annotation. It removes some of the ability to set specific directories etc but makes it easier to perform the functions.\n\nSee example notebook for how we get the following from the TCGA site:\n```\n    1. manifest_file\n    2. gdc_client\n    3. clinical_file\n    4. sample_file\n```\n\n```\napi = API(manifest_file, gdc_client, clinical_file, sample_file, requires_lst=None, clin_cols=None,\n                 max_cnt=100, sciutil=None, split_manifest_dir='.', download_dir='.', meta_dir='.', sep='_')\n\n```\nStep 1. Download manifest data\n```\n# Downloads every file using default parameters in the manifest file\napi.download_data_from_manifest()\n# This will also unzip and copy the files all into one directory\n```\nStep 2. Annotation \n```\n# Builds the annotation information\napi.build_annotation()\n```\nStep 3. Download mutation data\n```\n# Downloads all the mutation data for all the cases in the clinical_file\napi.download_mutation_data()\n```\nStep 4. Generate RNAseq dataframe\n```\n# Generates the RNA dataframe from the downloaded folder\napi.build_rna_df()\n```\nStep 5. Get cases that have any mutations or specific mutations\n```\n# Returns a list of cases that have mutations (either in any gene if gene_list = None or in specific genes)\nlist_of_cases = api.get_cases_with_mutations(gene_list=None, id_type='symbol')\n\n# Get genes with a small deletion\nfilter_col = 'ssm.consequence.0.transcript.gene.symbol'\ngenes = api.get_mutation_values_on_filter(filter_col, ['Small deletion'], 'ssm.mutation_subtype')\n\n# Get genes with a specifc genomic change: ssm.genomic_dna_change\nfilter_col = 'case_id'\ncases =  api.get_mutation_values_on_filter(filter_col, ['chr13:g.45340134A>G'], 'ssm.genomic_dna_change')\n\n```\nStep 6. Get cases with specific metadata information\n\nMetadata list:\n```\nsubmitter_id\nproject_id\nage_at_index\ngender\nrace\nvital_status\ntumor_stage\nnormal_samples\ntumor_samples\ncase_files\ntumor_stage_num\nexample: {'gender': ['female'], 'tumor_stage_num': [1, 2]}\n```\nMethod can be `any` i.e. it satisfies any of the conditions, or `all`, a case has to satisfy all the conditions in the meta_dict\n\n```\n# Returns cases that have the chosen metadata information e.g. gender, race, tumour_stage_num\ncases_list = api.get_cases_with_meta(meta: dict, method=\"all\")\n```\nStep 7. Get genes with mutations\n```\n# Returns a list of genes with mutations for specific cases\nlist_of_genes = api.get_genes_with_mutations(case_ids=None, id_type='symbol')\n```\nStep 8. Get values from the dataframe\n```\n# Returns the values, columns, dataframe of a subset of the RNAseq dataframe\nvalues, columns, dataframe = get_values_from_df(df: pd.DataFrame, gene_id_column: str, case_ids=None, gene_ids=None,\n                           column_name_includes=None, column_name_method=\"all\")\n\n```\n\n### Download\n\n```\n# Downloads data using a manifest file\ndownload = Download(manifest_file, split_manifest_dir, download_dir, gdc_client, max_cnt=100)\ndownload.download()\n```\n\n```\n# Downloads data from API to complement data from manifest file\n# example datatype = mutation (this is the only one implemented for now)\ndownload.download_data_using_api(case_ids: list, data_type: str)\n```\n\n### Annotate\n\n** Generate annotation using clinical information from TCGA **\n```\nannotator = Annotate(output_dir: str, clinical_file: str, sample_file: str, manifest_file: str, file_types: list,\n                 sep='_', clin_cols=None)\n# Generate the annotate dataframe\nannotator.build_annotation()\n\n# Save the dataframe to a csv file\nannotator.save_annotation(output_directory: str, filename: str)\n\n# Save the clinical information to a csv file\nannotator.save_annotated_clinical_df(output_directory: str, filename: str)\n\n```\n\n** Download mutation data for the cases of interest **\nNote we first need to download the data using the `download_data_using_api` from above.\n```\nannotator.build_mutation_df(mutation_dir)\n\n# Get that dataframe\nmutation_df = annotator.get_mutation_df()\n\n# Save the mutation dataframe to a csv\nannotator.save_mutation_df(output_directory: str, filename: str)\n\n```\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ArianeMora/scidat", "keywords": "annotation", "license": "GPL3", "maintainer": "", "maintainer_email": "", "name": "scidat", "package_url": "https://pypi.org/project/scidat/", "platform": "", "project_url": "https://pypi.org/project/scidat/", "project_urls": {"Bug Tracker": "https://github.com/ArianeMora/scidat/issues", "Documentation": "https://github.com/ArianeMora/scidat", "Homepage": "https://github.com/ArianeMora/scidat", "Source Code": "https://github.com/ArianeMora/scidat"}, "release_url": "https://pypi.org/project/scidat/1.0.0/", "requires_dist": ["sciutil", "pandas", "numpy", "pybiomart", "sciviso"], "requires_python": ">=3.6", "summary": "Download-Annotate-TCGA: Facilitates the download of data and annotation with metadata from TCGA", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sci-dat: Download Annotate TCGA</h1>\n<p>A package developed to enable the download an annotation of TCGA data from <code>https://portal.gdc.cancer.gov/</code></p>\n<h2>Install</h2>\n<pre><code>pip install scidat\n</code></pre>\n<h2>Use</h2>\n<h3>API</h3>\n<p>The API combines the functions in Download and Annotation. It removes some of the ability to set specific directories etc but makes it easier to perform the functions.</p>\n<p>See example notebook for how we get the following from the TCGA site:</p>\n<pre><code>    1. manifest_file\n    2. gdc_client\n    3. clinical_file\n    4. sample_file\n</code></pre>\n<pre><code>api = API(manifest_file, gdc_client, clinical_file, sample_file, requires_lst=None, clin_cols=None,\n                 max_cnt=100, sciutil=None, split_manifest_dir='.', download_dir='.', meta_dir='.', sep='_')\n\n</code></pre>\n<p>Step 1. Download manifest data</p>\n<pre><code># Downloads every file using default parameters in the manifest file\napi.download_data_from_manifest()\n# This will also unzip and copy the files all into one directory\n</code></pre>\n<p>Step 2. Annotation</p>\n<pre><code># Builds the annotation information\napi.build_annotation()\n</code></pre>\n<p>Step 3. Download mutation data</p>\n<pre><code># Downloads all the mutation data for all the cases in the clinical_file\napi.download_mutation_data()\n</code></pre>\n<p>Step 4. Generate RNAseq dataframe</p>\n<pre><code># Generates the RNA dataframe from the downloaded folder\napi.build_rna_df()\n</code></pre>\n<p>Step 5. Get cases that have any mutations or specific mutations</p>\n<pre><code># Returns a list of cases that have mutations (either in any gene if gene_list = None or in specific genes)\nlist_of_cases = api.get_cases_with_mutations(gene_list=None, id_type='symbol')\n\n# Get genes with a small deletion\nfilter_col = 'ssm.consequence.0.transcript.gene.symbol'\ngenes = api.get_mutation_values_on_filter(filter_col, ['Small deletion'], 'ssm.mutation_subtype')\n\n# Get genes with a specifc genomic change: ssm.genomic_dna_change\nfilter_col = 'case_id'\ncases =  api.get_mutation_values_on_filter(filter_col, ['chr13:g.45340134A&gt;G'], 'ssm.genomic_dna_change')\n\n</code></pre>\n<p>Step 6. Get cases with specific metadata information</p>\n<p>Metadata list:</p>\n<pre><code>submitter_id\nproject_id\nage_at_index\ngender\nrace\nvital_status\ntumor_stage\nnormal_samples\ntumor_samples\ncase_files\ntumor_stage_num\nexample: {'gender': ['female'], 'tumor_stage_num': [1, 2]}\n</code></pre>\n<p>Method can be <code>any</code> i.e. it satisfies any of the conditions, or <code>all</code>, a case has to satisfy all the conditions in the meta_dict</p>\n<pre><code># Returns cases that have the chosen metadata information e.g. gender, race, tumour_stage_num\ncases_list = api.get_cases_with_meta(meta: dict, method=\"all\")\n</code></pre>\n<p>Step 7. Get genes with mutations</p>\n<pre><code># Returns a list of genes with mutations for specific cases\nlist_of_genes = api.get_genes_with_mutations(case_ids=None, id_type='symbol')\n</code></pre>\n<p>Step 8. Get values from the dataframe</p>\n<pre><code># Returns the values, columns, dataframe of a subset of the RNAseq dataframe\nvalues, columns, dataframe = get_values_from_df(df: pd.DataFrame, gene_id_column: str, case_ids=None, gene_ids=None,\n                           column_name_includes=None, column_name_method=\"all\")\n\n</code></pre>\n<h3>Download</h3>\n<pre><code># Downloads data using a manifest file\ndownload = Download(manifest_file, split_manifest_dir, download_dir, gdc_client, max_cnt=100)\ndownload.download()\n</code></pre>\n<pre><code># Downloads data from API to complement data from manifest file\n# example datatype = mutation (this is the only one implemented for now)\ndownload.download_data_using_api(case_ids: list, data_type: str)\n</code></pre>\n<h3>Annotate</h3>\n<p>** Generate annotation using clinical information from TCGA **</p>\n<pre><code>annotator = Annotate(output_dir: str, clinical_file: str, sample_file: str, manifest_file: str, file_types: list,\n                 sep='_', clin_cols=None)\n# Generate the annotate dataframe\nannotator.build_annotation()\n\n# Save the dataframe to a csv file\nannotator.save_annotation(output_directory: str, filename: str)\n\n# Save the clinical information to a csv file\nannotator.save_annotated_clinical_df(output_directory: str, filename: str)\n\n</code></pre>\n<p>** Download mutation data for the cases of interest **\nNote we first need to download the data using the <code>download_data_using_api</code> from above.</p>\n<pre><code>annotator.build_mutation_df(mutation_dir)\n\n# Get that dataframe\nmutation_df = annotator.get_mutation_df()\n\n# Save the mutation dataframe to a csv\nannotator.save_mutation_df(output_directory: str, filename: str)\n\n</code></pre>\n\n          </div>"}, "last_serial": 7037417, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e4df27cd6b3c19135a9228093ee55354", "sha256": "4e04f97c87a865de9844300c83997a3864290ec6472d37fac86f46ab14866201"}, "downloads": -1, "filename": "scidat-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e4df27cd6b3c19135a9228093ee55354", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41049, "upload_time": "2020-04-17T04:44:05", "upload_time_iso_8601": "2020-04-17T04:44:05.566356Z", "url": "https://files.pythonhosted.org/packages/88/a2/6673071adf1204853d0ff89ae77c09a70aca3e639638ca43c0dac8e835e6/scidat-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e8aa4671b728bfa74dcdc322cdd21e7", "sha256": "b559e32c757b1c3c074243b966c33dce767e8115f3cec7d3e199f4997e202350"}, "downloads": -1, "filename": "scidat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2e8aa4671b728bfa74dcdc322cdd21e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27021, "upload_time": "2020-04-17T04:44:08", "upload_time_iso_8601": "2020-04-17T04:44:08.414684Z", "url": "https://files.pythonhosted.org/packages/b0/8f/d9ae0b8645d73be8c1aac28bd29acbbfd427e7e5eeeb9d8949429c163c50/scidat-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e4df27cd6b3c19135a9228093ee55354", "sha256": "4e04f97c87a865de9844300c83997a3864290ec6472d37fac86f46ab14866201"}, "downloads": -1, "filename": "scidat-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e4df27cd6b3c19135a9228093ee55354", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41049, "upload_time": "2020-04-17T04:44:05", "upload_time_iso_8601": "2020-04-17T04:44:05.566356Z", "url": "https://files.pythonhosted.org/packages/88/a2/6673071adf1204853d0ff89ae77c09a70aca3e639638ca43c0dac8e835e6/scidat-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e8aa4671b728bfa74dcdc322cdd21e7", "sha256": "b559e32c757b1c3c074243b966c33dce767e8115f3cec7d3e199f4997e202350"}, "downloads": -1, "filename": "scidat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2e8aa4671b728bfa74dcdc322cdd21e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27021, "upload_time": "2020-04-17T04:44:08", "upload_time_iso_8601": "2020-04-17T04:44:08.414684Z", "url": "https://files.pythonhosted.org/packages/b0/8f/d9ae0b8645d73be8c1aac28bd29acbbfd427e7e5eeeb9d8949429c163c50/scidat-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:40 2020"}