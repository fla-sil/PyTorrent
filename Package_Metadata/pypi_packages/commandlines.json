{"info": {"author": "Christopher Simpkins", "author_email": "chris@sourcefoundry.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Commandlines Library Documentation\n==================================\n\ncommandlines |Build Status| |Build status| |codecov.io| |Code Health|\n---------------------------------------------------------------------\n\nSource Repository: `chrissimpkins/commandlines <https://github.com/chrissimpkins/commandlines>`__\n\nDocumentation: `commandlines.github.io <https://commandlines.github.io>`__\n\nWhat is Commandlines?\n---------------------\n\n`Commandlines <https://github.com/chrissimpkins/commandlines>`__ is a Python library for command line application\ndevelopment that supports command line argument parsing, command string\nvalidation testing, & application logic. It has no external dependencies\nand provides broad Python interpreter support for Python 2.6+, Python\n3.3+, pypy, and pypy3 across OS X, Linux, and Windows platforms.\n\nThe library supports application development with `POSIX guideline compliant <https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html#Argument-Syntax>`__ [*]_ command argument styles, the `GNU argument style extensions\nto the POSIX guidelines <https://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces>`__\n(including long option syntax and variable position of options among arguments), and command suite style application arguments that include one or more sub-commands to the executable.\n\n.. [*] with the exception of the short single option-argument definition syntax that does not include an intervening space character (e.g. ``-ofile``)\n\nHow Do I Use It?\n----------------\n\nThe command line string to your executable script is parsed to multiple\nobjects that are derived from builtin Python types.\n\nThe Command Object\n~~~~~~~~~~~~~~~~~~\n\nInstantiate a ``commandlines`` Command object:\n\n.. code:: python\n\n    from commandlines import Command\n\n    c = Command()\n\nand use the following instance attributes and methods to develop your application:\n\nArguments\n^^^^^^^^^\n\n+-----------------+-----------------------------------+-------------------------------------+\n| Command Line    | Command Example                   | Accessed/Tested                     |\n| Arguments       |                                   | With                                |\n+=================+===================================+=====================================+\n| Length of arg   | ``$ spam eggs -t --out file``     | ``c.argc == 4``                     |\n| list            |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Command suite   | ``$ spam eggs``                   | ``c.subcmd == \"eggs\"``              |\n| sub-commands    |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Command suite   | ``$ spam eggs overeasy``          | ``c.subsubcmd == \"overeasy\"``       |\n| sub-sub-commands|                                   |                                     |\n|                 |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Short switch    | ``$ spam -e``                     | ``c.contains_switches('e')``        |\n| syntax          |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Long switch     | ``$ spam --eggs``                 | ``c.contains_switches('eggs')``     |\n| syntax          |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Multiple        | ``$ spam -e --eggs``              | ``c.contains_switches('e', 'eggs')``|\n| switches        |                                   |                                     |\n|                 |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Short opt-arg   | ``$ spam -o eggs``                | ``c.get_definition('o')``           |\n| definition      |                                   |                                     |\n| syntax          |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Long opt-arg    | ``$ spam --out eggs``             | ``c.get_definition('out')``         |\n| definition      |                                   |                                     |\n| syntax          |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Alt long        | ``$ spam --out=eggs``             | ``c.get_definition('out')``         |\n| opt-arg         |                                   |                                     |\n| definition      |                                   |                                     |\n| syntax          |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Multiple same   | ``$ spam -o eggs -o omelets``     | ``c.get_multiple_definitions('o')`` |\n| option          |                                   |                                     |\n| definitions     |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Multi-option    | ``$ spam -mpns eggs``             | ``c.contains_mops('m')``            |\n| short syntax    |                                   |                                     |\n| switches        |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n| Next positional | ``$ spam eggs test/path``         | ``c.get_arg_after('eggs')``         |\n| argument        |                                   |                                     |\n+-----------------+-----------------------------------+-------------------------------------+\n\nPositional Arguments\n^^^^^^^^^^^^^^^^^^^^\n\nPositional arguments use a 0 based index starting at the first argument\nto the executable (i.e. ``sys.argv[1:]``) and are maintained as\nattributes in the Command object. Individual attribute support is\nprovided for the first five positional arguments and the last positional\nargument. An ordered list of all positional arguments is available in\nthe ``arguments`` attribute.\n\n+-----------------+----------------------------------------+--------------------+\n| Positional      | Command Example                        | Accessed/Tested    |\n| Argument        |                                        | With               |\n+=================+========================================+====================+\n| Positional      | ``$ spam eggs``                        | ``c.arg0``         |\n| argument at     |                                        |                    |\n| index 0         |                                        |                    |\n+-----------------+----------------------------------------+--------------------+\n| Positional      | ``$ spam eggs bacon``                  | ``c.arg1``         |\n| argument at     |                                        |                    |\n| index 1         |                                        |                    |\n+-----------------+----------------------------------------+--------------------+\n| Positional      | ``$ spam eggs bacon toast``            | ``c.arg2``         |\n| argument at     |                                        |                    |\n| index 2         |                                        |                    |\n+-----------------+----------------------------------------+--------------------+\n| Positional      | ``$ spam eggs bacon toast cereal``     | ``c.arg3``         |\n| argument at     |                                        |                    |\n| index 3         |                                        |                    |\n+-----------------+----------------------------------------+--------------------+\n| Positional      | ``$ spam eggs bacon toast cereal milk``| ``c.arg4``         |\n| argument at     |                                        |                    |\n| index 4         |                                        |                    |\n+-----------------+----------------------------------------+--------------------+\n| Last positional | ``$ spam eggs -b --toast filepath``    | ``c.arglp``        |\n| argument        |                                        |                    |\n+-----------------+----------------------------------------+--------------------+\n| All positional  | ``$ spam eggs -b - -toast filepath``   | ``c.arguments``    |\n| arguments       |                                        |                    |\n+-----------------+----------------------------------------+--------------------+\n\n\nDefault Option-Argument Definitions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDefine option-argument defaults in a ``defaults`` Command instance\nattribute. This attribute is defined as an empty Python dictionary upon\ninstantiation of the Command object. Use standard key index-based Python\ndictionary assignments or the ``set_defaults`` assignment method in the\nCommand class to define default values. Default values can take any type\nthat is permissible as a Python dictionary value.\n\nHere are examples of each approach that define defaults for ``output``\nand ``level`` options:\n\nKey Index-Based Default Assignments\n'''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    from commandlines import Command\n\n    c = Command()\n\n    c.defaults['output'] = \"test.txt\"\n    c.defaults['level'] = 10\n\nMethod-Based Default Assignments\n''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    from commandlines import Command\n\n    c = Command()\n\n    default_options = {\n        'output' : 'test.txt',\n        'level'  : 10\n    }\n    c.set_defaults(default_options)\n\nTo test for the presence of a default option definition and obtain its\nvalue, use the ``contains_defaults`` and ``get_default`` methods,\nrespectively:\n\n.. code:: python\n\n    # continued from code examples above\n\n    if c.contains_definitions('output'):\n        dosomething(c.get_definition('output'))\n    elif c.contains_defaults('output'):\n        dosomething(c.get_default('output'))\n    else:\n        dosomethingelse()\n\n\nHelp, Usage, and Version Request Testing Methods\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHelp, usage, and version command line requests are tested with methods:\n\n+--------------------------+------------------------+------------------------------+\n| Test Type                | Command Example        | Tested With                  |\n+==========================+========================+==============================+\n| Help request, short      | ``$ spam -h``          | ``c.is_help_request()``      |\n+--------------------------+------------------------+------------------------------+\n| Help request, long       | ``$ spam --help``      | ``c.is_help_request()``      |\n+--------------------------+------------------------+------------------------------+\n| Usage request            | ``$ spam --usage``     | ``c.is_usage_request()``     |\n+--------------------------+------------------------+------------------------------+\n| Version request, short   | ``$ spam -v``          | ``c.is_version_request()``   |\n+--------------------------+------------------------+------------------------------+\n| Version request, long    | ``$ spam --version``   | ``c.is_version_request()``   |\n+--------------------------+------------------------+------------------------------+\n\nTesting Methods for Other Commonly Used Switches\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+---------------------------+-----------------------------+------------------------------+\n| Test Type                 | Command Example             | Tested With                  |\n+===========================+=============================+==============================+\n| Verbose standard output   | ``$ spam eggs --verbose``   | ``c.is_verbose_request()``   |\n+---------------------------+-----------------------------+------------------------------+\n| Quiet standard output     | ``$ spam eggs --quiet``     | ``c.is_quiet_request()``     |\n+---------------------------+-----------------------------+------------------------------+\n\nSpecial Command Line Idioms\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe double dash idiom escapes all subsequent tokens from option/argument\nparsing. Methods are available to determine whether a double dash token\nis present in a command and obtain an ordered list of all command line\narguments that follow this idiom:\n\n+-----------------+----------------------------------------+----------------------------------------+\n| Command Line    | Command Example                        | Accessed/Tested                        |\n| Idioms          |                                        | With                                   |\n+=================+========================================+========================================+\n| Double dash     | ``$ spam eggs -- -badfile``            | ``c.has_double_dash()``                |\n| idiom           |                                        |                                        |\n+-----------------+----------------------------------------+----------------------------------------+\n| Double dash     | ``$ spam eggs -- -badfile -badfile2``  | ``c.get_double_dash_args()``           |\n| arguments       |                                        |                                        |\n|                 |                                        |                                        |\n+-----------------+----------------------------------------+----------------------------------------+\n\nApplication Logic Testing Methods\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+-----------------+----------------------------------------+--------------------------------------------------------+\n| Test Type       | Command Example                        | Tested With                                            |\n+=================+========================================+========================================================+\n| Positional      | ``$ spam eggs doit``                   | ``c.has_command_sequence('eggs', 'doit')``             |\n| command         |                                        |                                                        |\n| sequence        |                                        |                                                        |\n+-----------------+----------------------------------------+--------------------------------------------------------+\n| Single switch   | ``$ spam -s``                          | ``c.contains_switches('s')``                           |\n|                 |                                        |                                                        |\n+-----------------+----------------------------------------+--------------------------------------------------------+\n| Multiple switch | ``$ spam -s --eggs``                   | ``c.contains_switches('s', 'eggs')``                   |\n|                 |                                        |                                                        |\n+-----------------+----------------------------------------+--------------------------------------------------------+\n| Single          | ``$ spam -o eggs``                     | ``c.contains_definitions('o')``                        |\n| definition      |                                        |                                                        |\n+-----------------+----------------------------------------+--------------------------------------------------------+\n| Multiple        | ``$ spam -o eggs --with bacon``        | ``c.contains_definitions('o', 'with')``                |\n| different       |                                        |                                                        |\n| definitions     |                                        |                                                        |\n+-----------------+----------------------------------------+--------------------------------------------------------+\n| Multiple same   | ``$ spam -o eggs -o bacon``            | ``c.contains_multi_definitions('o')``                  |\n| definitions     |                                        |                                                        |\n|                 |                                        |                                                        |\n+-----------------+----------------------------------------+--------------------------------------------------------+\n| Positional      | ``$ spam eggs --coffee``               | ``c.has_args_after('eggs')``                           |\n| argument        |                                        |                                                        |\n+-----------------+----------------------------------------+--------------------------------------------------------+\n| Acceptable      | ``$ spam eggs toaster``                | ``c.next_arg_is_in('eggs', ['toaster', 'coffeepot'])`` |\n| positional arg  |                                        |                                                        |\n|                 |                                        |                                                        |\n+-----------------+----------------------------------------+--------------------------------------------------------+\n\nCommand String Validation Methods\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+-----------------+-------------------------+----------------------------------------------+\n| Test Type       | Failure Example         | Tested With                                  |\n+=================+=========================+==============================================+\n| Missing         | ``$ spam``              | ``c.does_not_validate_missing_args()``       |\n| arguments       |                         |                                              |\n|                 |                         |                                              |\n+-----------------+-------------------------+----------------------------------------------+\n| Expected        | ``$ spam eggs``         | ``c.does_not_validate_n_args(2)``            |\n| argument number |                         |                                              |\n+-----------------+-------------------------+----------------------------------------------+\n| Missing opt-arg | ``$ spam -o --eggs``    | ``c.does_not_validate_missing_defs()``       |\n| definitions     |                         |                                              |\n|                 |                         |                                              |\n+-----------------+-------------------------+----------------------------------------------+\n| Missing         | ``$ spam eggs``         | ``c.does_not_validate_missing_switches()``   |\n| switches        |                         |                                              |\n|                 |                         |                                              |\n+-----------------+-------------------------+----------------------------------------------+\n| Missing         | ``$ spam -o eggs``      | ``c.does_not_validate_missing_mops()``       |\n| multi-option    |                         |                                              |\n| short syntax    |                         |                                              |\n| switches        |                         |                                              |\n+-----------------+-------------------------+----------------------------------------------+\n\n\nDevelopment with Commandlines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo facilitate development with Commandlines, you can print the string\nreturned by the Command ``obj_string()`` method to view a list of the\nparsed arguments from example commands:\n\n.. code:: python\n\n    from commandlines import Command\n\n    c = Command()\n\n    print(c.obj_string())\n    sys.exit(0)\n\nFor example, if you execute your script with the command\n``spam eggs --toast -b --drink=milk filepath`` and include the above\nprint statement in your source, you will see the following in your\nterminal emulator:\n\n.. code:: shell\n\n    $ spam eggs --toast -b --drink=milk filepath\n    obj.argc = 5\n    obj.arguments = ['eggs', '--toast', '-b', '--drink=milk', 'filepath']\n    obj.defaults = {}\n    obj.switches = {'toast', 'b'}\n    obj.defs = {'drink': 'milk'}\n    obj.mdefs = {}\n    obj.mops = {}\n    obj.arg0 = 'eggs'\n    obj.arg1 = '--toast'\n    obj.arg2 = '-b'\n    obj.arg3 = '--drink=milk'\n    obj.arg4 = 'filepath'\n    obj.arglp = 'filepath'\n    obj.subcmd = 'eggs'\n    obj.subsubcmd = '--toast'\n\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nYou can view full documentation of the Command class `here <https://commandlines.github.io/commandlines.library.html#commandlines.library.Command>`__.\n\nIf you would like to dig into lower level objects in the commandlines\npackage, you can view the `library API\ndocumentation <https://commandlines.github.io/commandlines.library.html>`__.\n\nExceptions that are used in the commandlines package are documented\n`here <https://commandlines.github.io/commandlines.exceptions.html>`__.\n\nHow to Include Commandlines in Your Project\n-------------------------------------------\n\nFor Projects That Will Be Distributed to Others\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd the ``commandlines`` package dependency to your project ``setup.py``\nfile in the ``install_requires`` field like so:\n\n.. code:: python\n\n    setup(\n        ...\n        install_requires=[\"commandlines\"],\n        ...\n    )\n\n\nThen, enter the following command to test your project locally:\n\n::\n\n    $ python setup.py develop\n\nImport the ``commandlines`` package in your project and instantiate a\nCommand object by adding the following lines to your Python script:\n\n.. code:: python\n\n    from commandlines import Command\n\n    c = Command()\n\nAnd away you go...\n\nThe Commandlines package will be installed automatically for users who\ninstall your releases via ``pip`` or your project ``setup.py`` file\n(i.e. with the command ``$ python setup.py install``).\n\nFor Local Projects That Are Not Intended for Redistribution\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall the Commandlines package with the command:\n\n::\n\n    $ pip install commandlines\n\nImport the ``commandlines`` package in your project and instantiate a\nCommand object by adding the following lines to your Python script:\n\n.. code:: python\n\n    from commandlines import Command\n\n    c = Command()\n\nLicense\n-------\n\nCommandlines is licensed under the `MIT license <https://github.com/chrissimpkins/commandlines/blob/master/docs/LICENSE>`__.\n\n\n\n\n.. |Build Status| image:: https://travis-ci.org/chrissimpkins/commandlines.svg?branch=master\n   :target: https://travis-ci.org/chrissimpkins/commandlines\n.. |Build status| image:: https://ci.appveyor.com/api/projects/status/nabadxorf9s8n0h5/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/chrissimpkins/commandlines/branch/master\n.. |codecov.io| image:: https://codecov.io/github/chrissimpkins/commandlines/coverage.svg?branch=master\n   :target: https://codecov.io/github/chrissimpkins/commandlines?branch=master\n.. |Code Health| image:: https://landscape.io/github/chrissimpkins/commandlines/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/chrissimpkins/commandlines/master", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrissimpkins/commandlines", "keywords": "CLI,command line,parser,shell,application,command line application,argument,argument parser", "license": "MIT license", "maintainer": null, "maintainer_email": null, "name": "commandlines", "package_url": "https://pypi.org/project/commandlines/", "platform": "any", "project_url": "https://pypi.org/project/commandlines/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/chrissimpkins/commandlines"}, "release_url": "https://pypi.org/project/commandlines/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "Command line argument to object parsing library for command line application development", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"commandlines-build-status-build-status-codecov-io-code-health\">\n<h2>commandlines <a href=\"https://travis-ci.org/chrissimpkins/commandlines\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29d466b38c3b59b4d0b45001bebb107df0ead6ef/68747470733a2f2f7472617669732d63692e6f72672f636872697373696d706b696e732f636f6d6d616e646c696e65732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://ci.appveyor.com/project/chrissimpkins/commandlines/branch/master\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/246dc52875935142d2b6c9238377f0c3e7191c54/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6e61626164786f72663973386e3068352f6272616e63682f6d61737465723f7376673d74727565\"></a> <a href=\"https://codecov.io/github/chrissimpkins/commandlines?branch=master\" rel=\"nofollow\"><img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5687cf4bfaa0e952ddfbdf924fbf8443d733981/68747470733a2f2f636f6465636f762e696f2f6769746875622f636872697373696d706b696e732f636f6d6d616e646c696e65732f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://landscape.io/github/chrissimpkins/commandlines/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df7449032e896cb6122c61b4bf8bc4865901aa3c/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f636872697373696d706b696e732f636f6d6d616e646c696e65732f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a></h2>\n<p>Source Repository: <a href=\"https://github.com/chrissimpkins/commandlines\" rel=\"nofollow\">chrissimpkins/commandlines</a></p>\n<p>Documentation: <a href=\"https://commandlines.github.io\" rel=\"nofollow\">commandlines.github.io</a></p>\n</div>\n<div id=\"what-is-commandlines\">\n<h2>What is Commandlines?</h2>\n<p><a href=\"https://github.com/chrissimpkins/commandlines\" rel=\"nofollow\">Commandlines</a> is a Python library for command line application\ndevelopment that supports command line argument parsing, command string\nvalidation testing, &amp; application logic. It has no external dependencies\nand provides broad Python interpreter support for Python 2.6+, Python\n3.3+, pypy, and pypy3 across OS X, Linux, and Windows platforms.</p>\n<p>The library supports application development with <a href=\"https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html#Argument-Syntax\" rel=\"nofollow\">POSIX guideline compliant</a> <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[*]</a> command argument styles, the <a href=\"https://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\" rel=\"nofollow\">GNU argument style extensions\nto the POSIX guidelines</a>\n(including long option syntax and variable position of options among arguments), and command suite style application arguments that include one or more sub-commands to the executable.</p>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[*]</a></td><td>with the exception of the short single option-argument definition syntax that does not include an intervening space character (e.g. <tt><span class=\"pre\">-ofile</span></tt>)</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"how-do-i-use-it\">\n<h2>How Do I Use It?</h2>\n<p>The command line string to your executable script is parsed to multiple\nobjects that are derived from builtin Python types.</p>\n<div id=\"the-command-object\">\n<h3>The Command Object</h3>\n<p>Instantiate a <tt>commandlines</tt> Command object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">commandlines</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\n</pre>\n<p>and use the following instance attributes and methods to develop your application:</p>\n<div id=\"arguments\">\n<h4>Arguments</h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Command Line\nArguments</th>\n<th>Command Example</th>\n<th>Accessed/Tested\nWith</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Length of arg\nlist</td>\n<td><tt>$ spam eggs <span class=\"pre\">-t</span> <span class=\"pre\">--out</span> file</tt></td>\n<td><tt>c.argc == 4</tt></td>\n</tr>\n<tr><td>Command suite\nsub-commands</td>\n<td><tt>$ spam eggs</tt></td>\n<td><tt>c.subcmd == \"eggs\"</tt></td>\n</tr>\n<tr><td>Command suite\nsub-sub-commands</td>\n<td><tt>$ spam eggs overeasy</tt></td>\n<td><tt>c.subsubcmd == \"overeasy\"</tt></td>\n</tr>\n<tr><td>Short switch\nsyntax</td>\n<td><tt>$ spam <span class=\"pre\">-e</span></tt></td>\n<td><tt><span class=\"pre\">c.contains_switches('e')</span></tt></td>\n</tr>\n<tr><td>Long switch\nsyntax</td>\n<td><tt>$ spam <span class=\"pre\">--eggs</span></tt></td>\n<td><tt><span class=\"pre\">c.contains_switches('eggs')</span></tt></td>\n</tr>\n<tr><td>Multiple\nswitches</td>\n<td><tt>$ spam <span class=\"pre\">-e</span> <span class=\"pre\">--eggs</span></tt></td>\n<td><tt><span class=\"pre\">c.contains_switches('e',</span> 'eggs')</tt></td>\n</tr>\n<tr><td>Short opt-arg\ndefinition\nsyntax</td>\n<td><tt>$ spam <span class=\"pre\">-o</span> eggs</tt></td>\n<td><tt><span class=\"pre\">c.get_definition('o')</span></tt></td>\n</tr>\n<tr><td>Long opt-arg\ndefinition\nsyntax</td>\n<td><tt>$ spam <span class=\"pre\">--out</span> eggs</tt></td>\n<td><tt><span class=\"pre\">c.get_definition('out')</span></tt></td>\n</tr>\n<tr><td>Alt long\nopt-arg\ndefinition\nsyntax</td>\n<td><tt>$ spam <span class=\"pre\">--out=eggs</span></tt></td>\n<td><tt><span class=\"pre\">c.get_definition('out')</span></tt></td>\n</tr>\n<tr><td>Multiple same\noption\ndefinitions</td>\n<td><tt>$ spam <span class=\"pre\">-o</span> eggs <span class=\"pre\">-o</span> omelets</tt></td>\n<td><tt><span class=\"pre\">c.get_multiple_definitions('o')</span></tt></td>\n</tr>\n<tr><td>Multi-option\nshort syntax\nswitches</td>\n<td><tt>$ spam <span class=\"pre\">-mpns</span> eggs</tt></td>\n<td><tt><span class=\"pre\">c.contains_mops('m')</span></tt></td>\n</tr>\n<tr><td>Next positional\nargument</td>\n<td><tt>$ spam eggs test/path</tt></td>\n<td><tt><span class=\"pre\">c.get_arg_after('eggs')</span></tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"positional-arguments\">\n<h4>Positional Arguments</h4>\n<p>Positional arguments use a 0 based index starting at the first argument\nto the executable (i.e. <tt>sys.argv[1:]</tt>) and are maintained as\nattributes in the Command object. Individual attribute support is\nprovided for the first five positional arguments and the last positional\nargument. An ordered list of all positional arguments is available in\nthe <tt>arguments</tt> attribute.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Positional\nArgument</th>\n<th>Command Example</th>\n<th>Accessed/Tested\nWith</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Positional\nargument at\nindex 0</td>\n<td><tt>$ spam eggs</tt></td>\n<td><tt>c.arg0</tt></td>\n</tr>\n<tr><td>Positional\nargument at\nindex 1</td>\n<td><tt>$ spam eggs bacon</tt></td>\n<td><tt>c.arg1</tt></td>\n</tr>\n<tr><td>Positional\nargument at\nindex 2</td>\n<td><tt>$ spam eggs bacon toast</tt></td>\n<td><tt>c.arg2</tt></td>\n</tr>\n<tr><td>Positional\nargument at\nindex 3</td>\n<td><tt>$ spam eggs bacon toast cereal</tt></td>\n<td><tt>c.arg3</tt></td>\n</tr>\n<tr><td>Positional\nargument at\nindex 4</td>\n<td><tt>$ spam eggs bacon toast cereal milk</tt></td>\n<td><tt>c.arg4</tt></td>\n</tr>\n<tr><td>Last positional\nargument</td>\n<td><tt>$ spam eggs <span class=\"pre\">-b</span> <span class=\"pre\">--toast</span> filepath</tt></td>\n<td><tt>c.arglp</tt></td>\n</tr>\n<tr><td>All positional\narguments</td>\n<td><tt>$ spam eggs <span class=\"pre\">-b</span> - <span class=\"pre\">-toast</span> filepath</tt></td>\n<td><tt>c.arguments</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"default-option-argument-definitions\">\n<h4>Default Option-Argument Definitions</h4>\n<p>Define option-argument defaults in a <tt>defaults</tt> Command instance\nattribute. This attribute is defined as an empty Python dictionary upon\ninstantiation of the Command object. Use standard key index-based Python\ndictionary assignments or the <tt>set_defaults</tt> assignment method in the\nCommand class to define default values. Default values can take any type\nthat is permissible as a Python dictionary value.</p>\n<p>Here are examples of each approach that define defaults for <tt>output</tt>\nand <tt>level</tt> options:</p>\n<div id=\"key-index-based-default-assignments\">\n<h5>Key Index-Based Default Assignments</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">commandlines</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">defaults</span><span class=\"p\">[</span><span class=\"s1\">'output'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"test.txt\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">defaults</span><span class=\"p\">[</span><span class=\"s1\">'level'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n</pre>\n</div>\n<div id=\"method-based-default-assignments\">\n<h5>Method-Based Default Assignments</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">commandlines</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\n\n<span class=\"n\">default_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'output'</span> <span class=\"p\">:</span> <span class=\"s1\">'test.txt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'level'</span>  <span class=\"p\">:</span> <span class=\"mi\">10</span>\n<span class=\"p\">}</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">set_defaults</span><span class=\"p\">(</span><span class=\"n\">default_options</span><span class=\"p\">)</span>\n</pre>\n<p>To test for the presence of a default option definition and obtain its\nvalue, use the <tt>contains_defaults</tt> and <tt>get_default</tt> methods,\nrespectively:</p>\n<pre><span class=\"c1\"># continued from code examples above</span>\n\n<span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">contains_definitions</span><span class=\"p\">(</span><span class=\"s1\">'output'</span><span class=\"p\">):</span>\n    <span class=\"n\">dosomething</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get_definition</span><span class=\"p\">(</span><span class=\"s1\">'output'</span><span class=\"p\">))</span>\n<span class=\"k\">elif</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">contains_defaults</span><span class=\"p\">(</span><span class=\"s1\">'output'</span><span class=\"p\">):</span>\n    <span class=\"n\">dosomething</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get_default</span><span class=\"p\">(</span><span class=\"s1\">'output'</span><span class=\"p\">))</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">dosomethingelse</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"help-usage-and-version-request-testing-methods\">\n<h4>Help, Usage, and Version Request Testing Methods</h4>\n<p>Help, usage, and version command line requests are tested with methods:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Test Type</th>\n<th>Command Example</th>\n<th>Tested With</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Help request, short</td>\n<td><tt>$ spam <span class=\"pre\">-h</span></tt></td>\n<td><tt>c.is_help_request()</tt></td>\n</tr>\n<tr><td>Help request, long</td>\n<td><tt>$ spam <span class=\"pre\">--help</span></tt></td>\n<td><tt>c.is_help_request()</tt></td>\n</tr>\n<tr><td>Usage request</td>\n<td><tt>$ spam <span class=\"pre\">--usage</span></tt></td>\n<td><tt>c.is_usage_request()</tt></td>\n</tr>\n<tr><td>Version request, short</td>\n<td><tt>$ spam <span class=\"pre\">-v</span></tt></td>\n<td><tt>c.is_version_request()</tt></td>\n</tr>\n<tr><td>Version request, long</td>\n<td><tt>$ spam <span class=\"pre\">--version</span></tt></td>\n<td><tt>c.is_version_request()</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"testing-methods-for-other-commonly-used-switches\">\n<h4>Testing Methods for Other Commonly Used Switches</h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Test Type</th>\n<th>Command Example</th>\n<th>Tested With</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Verbose standard output</td>\n<td><tt>$ spam eggs <span class=\"pre\">--verbose</span></tt></td>\n<td><tt>c.is_verbose_request()</tt></td>\n</tr>\n<tr><td>Quiet standard output</td>\n<td><tt>$ spam eggs <span class=\"pre\">--quiet</span></tt></td>\n<td><tt>c.is_quiet_request()</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"special-command-line-idioms\">\n<h4>Special Command Line Idioms</h4>\n<p>The double dash idiom escapes all subsequent tokens from option/argument\nparsing. Methods are available to determine whether a double dash token\nis present in a command and obtain an ordered list of all command line\narguments that follow this idiom:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Command Line\nIdioms</th>\n<th>Command Example</th>\n<th>Accessed/Tested\nWith</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Double dash\nidiom</td>\n<td><tt>$ spam eggs <span class=\"pre\">--</span> <span class=\"pre\">-badfile</span></tt></td>\n<td><tt>c.has_double_dash()</tt></td>\n</tr>\n<tr><td>Double dash\narguments</td>\n<td><tt>$ spam eggs <span class=\"pre\">--</span> <span class=\"pre\">-badfile</span> <span class=\"pre\">-badfile2</span></tt></td>\n<td><tt>c.get_double_dash_args()</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"application-logic-testing-methods\">\n<h4>Application Logic Testing Methods</h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Test Type</th>\n<th>Command Example</th>\n<th>Tested With</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Positional\ncommand\nsequence</td>\n<td><tt>$ spam eggs doit</tt></td>\n<td><tt><span class=\"pre\">c.has_command_sequence('eggs',</span> 'doit')</tt></td>\n</tr>\n<tr><td>Single switch</td>\n<td><tt>$ spam <span class=\"pre\">-s</span></tt></td>\n<td><tt><span class=\"pre\">c.contains_switches('s')</span></tt></td>\n</tr>\n<tr><td>Multiple switch</td>\n<td><tt>$ spam <span class=\"pre\">-s</span> <span class=\"pre\">--eggs</span></tt></td>\n<td><tt><span class=\"pre\">c.contains_switches('s',</span> 'eggs')</tt></td>\n</tr>\n<tr><td>Single\ndefinition</td>\n<td><tt>$ spam <span class=\"pre\">-o</span> eggs</tt></td>\n<td><tt><span class=\"pre\">c.contains_definitions('o')</span></tt></td>\n</tr>\n<tr><td>Multiple\ndifferent\ndefinitions</td>\n<td><tt>$ spam <span class=\"pre\">-o</span> eggs <span class=\"pre\">--with</span> bacon</tt></td>\n<td><tt><span class=\"pre\">c.contains_definitions('o',</span> 'with')</tt></td>\n</tr>\n<tr><td>Multiple same\ndefinitions</td>\n<td><tt>$ spam <span class=\"pre\">-o</span> eggs <span class=\"pre\">-o</span> bacon</tt></td>\n<td><tt><span class=\"pre\">c.contains_multi_definitions('o')</span></tt></td>\n</tr>\n<tr><td>Positional\nargument</td>\n<td><tt>$ spam eggs <span class=\"pre\">--coffee</span></tt></td>\n<td><tt><span class=\"pre\">c.has_args_after('eggs')</span></tt></td>\n</tr>\n<tr><td>Acceptable\npositional arg</td>\n<td><tt>$ spam eggs toaster</tt></td>\n<td><tt><span class=\"pre\">c.next_arg_is_in('eggs',</span> ['toaster', <span class=\"pre\">'coffeepot'])</span></tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"command-string-validation-methods\">\n<h4>Command String Validation Methods</h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Test Type</th>\n<th>Failure Example</th>\n<th>Tested With</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Missing\narguments</td>\n<td><tt>$ spam</tt></td>\n<td><tt>c.does_not_validate_missing_args()</tt></td>\n</tr>\n<tr><td>Expected\nargument number</td>\n<td><tt>$ spam eggs</tt></td>\n<td><tt>c.does_not_validate_n_args(2)</tt></td>\n</tr>\n<tr><td>Missing opt-arg\ndefinitions</td>\n<td><tt>$ spam <span class=\"pre\">-o</span> <span class=\"pre\">--eggs</span></tt></td>\n<td><tt>c.does_not_validate_missing_defs()</tt></td>\n</tr>\n<tr><td>Missing\nswitches</td>\n<td><tt>$ spam eggs</tt></td>\n<td><tt>c.does_not_validate_missing_switches()</tt></td>\n</tr>\n<tr><td>Missing\nmulti-option\nshort syntax\nswitches</td>\n<td><tt>$ spam <span class=\"pre\">-o</span> eggs</tt></td>\n<td><tt>c.does_not_validate_missing_mops()</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"development-with-commandlines\">\n<h3>Development with Commandlines</h3>\n<p>To facilitate development with Commandlines, you can print the string\nreturned by the Command <tt>obj_string()</tt> method to view a list of the\nparsed arguments from example commands:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">commandlines</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">obj_string</span><span class=\"p\">())</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>For example, if you execute your script with the command\n<tt>spam eggs <span class=\"pre\">--toast</span> <span class=\"pre\">-b</span> <span class=\"pre\">--drink=milk</span> filepath</tt> and include the above\nprint statement in your source, you will see the following in your\nterminal emulator:</p>\n<pre>$ spam eggs --toast -b --drink<span class=\"o\">=</span>milk filepath\nobj.argc <span class=\"o\">=</span> <span class=\"m\">5</span>\nobj.arguments <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"s1\">'eggs'</span>, <span class=\"s1\">'--toast'</span>, <span class=\"s1\">'-b'</span>, <span class=\"s1\">'--drink=milk'</span>, <span class=\"s1\">'filepath'</span><span class=\"o\">]</span>\nobj.defaults <span class=\"o\">=</span> <span class=\"o\">{}</span>\nobj.switches <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s1\">'toast'</span>, <span class=\"s1\">'b'</span><span class=\"o\">}</span>\nobj.defs <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s1\">'drink'</span>: <span class=\"s1\">'milk'</span><span class=\"o\">}</span>\nobj.mdefs <span class=\"o\">=</span> <span class=\"o\">{}</span>\nobj.mops <span class=\"o\">=</span> <span class=\"o\">{}</span>\nobj.arg0 <span class=\"o\">=</span> <span class=\"s1\">'eggs'</span>\nobj.arg1 <span class=\"o\">=</span> <span class=\"s1\">'--toast'</span>\nobj.arg2 <span class=\"o\">=</span> <span class=\"s1\">'-b'</span>\nobj.arg3 <span class=\"o\">=</span> <span class=\"s1\">'--drink=milk'</span>\nobj.arg4 <span class=\"o\">=</span> <span class=\"s1\">'filepath'</span>\nobj.arglp <span class=\"o\">=</span> <span class=\"s1\">'filepath'</span>\nobj.subcmd <span class=\"o\">=</span> <span class=\"s1\">'eggs'</span>\nobj.subsubcmd <span class=\"o\">=</span> <span class=\"s1\">'--toast'</span>\n</pre>\n</div>\n<div id=\"api-documentation\">\n<h3>API Documentation</h3>\n<p>You can view full documentation of the Command class <a href=\"https://commandlines.github.io/commandlines.library.html#commandlines.library.Command\" rel=\"nofollow\">here</a>.</p>\n<p>If you would like to dig into lower level objects in the commandlines\npackage, you can view the <a href=\"https://commandlines.github.io/commandlines.library.html\" rel=\"nofollow\">library API\ndocumentation</a>.</p>\n<p>Exceptions that are used in the commandlines package are documented\n<a href=\"https://commandlines.github.io/commandlines.exceptions.html\" rel=\"nofollow\">here</a>.</p>\n</div>\n</div>\n<div id=\"how-to-include-commandlines-in-your-project\">\n<h2>How to Include Commandlines in Your Project</h2>\n<div id=\"for-projects-that-will-be-distributed-to-others\">\n<h3>For Projects That Will Be Distributed to Others</h3>\n<p>Add the <tt>commandlines</tt> package dependency to your project <tt>setup.py</tt>\nfile in the <tt>install_requires</tt> field like so:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"commandlines\"</span><span class=\"p\">],</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Then, enter the following command to test your project locally:</p>\n<pre>$ python setup.py develop\n</pre>\n<p>Import the <tt>commandlines</tt> package in your project and instantiate a\nCommand object by adding the following lines to your Python script:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">commandlines</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\n</pre>\n<p>And away you go\u2026</p>\n<p>The Commandlines package will be installed automatically for users who\ninstall your releases via <tt>pip</tt> or your project <tt>setup.py</tt> file\n(i.e. with the command <tt>$ python setup.py install</tt>).</p>\n</div>\n<div id=\"for-local-projects-that-are-not-intended-for-redistribution\">\n<h3>For Local Projects That Are Not Intended for Redistribution</h3>\n<p>Install the Commandlines package with the command:</p>\n<pre>$ pip install commandlines\n</pre>\n<p>Import the <tt>commandlines</tt> package in your project and instantiate a\nCommand object by adding the following lines to your Python script:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">commandlines</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Commandlines is licensed under the <a href=\"https://github.com/chrissimpkins/commandlines/blob/master/docs/LICENSE\" rel=\"nofollow\">MIT license</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1978992, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "de815e54a55e893a7d231503d2e4fc9c", "sha256": "917d1e4bdee1171e361bc8cef416921ec48d80381eba71563ade57860720a4e4"}, "downloads": -1, "filename": "commandlines-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "de815e54a55e893a7d231503d2e4fc9c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5332, "upload_time": "2016-02-03T04:05:56", "upload_time_iso_8601": "2016-02-03T04:05:56.986314Z", "url": "https://files.pythonhosted.org/packages/97/ca/ddd85e3f961365e42660bea724fa0560657695dbb23772a7ce56ebcf7ba2/commandlines-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c9c19c194cb8974f5792983787583af", "sha256": "16dc4137c44d3c7ca8fcfbe8d040a89998714944049115f0867e4359149ed440"}, "downloads": -1, "filename": "commandlines-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9c9c19c194cb8974f5792983787583af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4780, "upload_time": "2016-02-03T04:05:50", "upload_time_iso_8601": "2016-02-03T04:05:50.230980Z", "url": "https://files.pythonhosted.org/packages/8d/be/3c155eb60391a9cd92bef6a40271b92a99fe7e19872adaa7961654124be3/commandlines-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9483182cf45573f3231f49f2794aba5e", "sha256": "7a8b24191ec886ab64d345cc4b7edfa1ac9108c063db901a7c9a6fdd1cf1d585"}, "downloads": -1, "filename": "commandlines-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9483182cf45573f3231f49f2794aba5e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 6232, "upload_time": "2016-02-07T14:07:59", "upload_time_iso_8601": "2016-02-07T14:07:59.023909Z", "url": "https://files.pythonhosted.org/packages/4c/c4/72d111c4947cebebd22836901d68257d6381dd2fe3ec75d887f32e610199/commandlines-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f5b5823dec8fe90269a3e42b6ce12fd", "sha256": "87e1c7cfda74bfb32f47f764bef483baa2c7bef2a5523060cf7ebedd5bfab20a"}, "downloads": -1, "filename": "commandlines-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9f5b5823dec8fe90269a3e42b6ce12fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5697, "upload_time": "2016-02-07T14:07:51", "upload_time_iso_8601": "2016-02-07T14:07:51.410675Z", "url": "https://files.pythonhosted.org/packages/5e/70/9d8d5f9b4d9c0323eb1b220a4e5ec0890c12ca53667611709e0570551ecf/commandlines-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "17df05987d2b1f1b973112499162bfd8", "sha256": "563a6fa7d5582e0ffef7a2df2246e824e6abc9cba668132a2bd8a5f497fe59e9"}, "downloads": -1, "filename": "commandlines-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "17df05987d2b1f1b973112499162bfd8", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7097, "upload_time": "2016-02-08T05:11:00", "upload_time_iso_8601": "2016-02-08T05:11:00.427005Z", "url": "https://files.pythonhosted.org/packages/0b/75/70e300007715f0f4585cb93ab9bb1397cbb56f761d3846bc99e0b3c62ea7/commandlines-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00d2b9be3241b9e73f09ae38da99bfc1", "sha256": "29539acb03987da541fd98b0ede539e8355981ae5e1ae3efb36557345ff7fd0b"}, "downloads": -1, "filename": "commandlines-0.2.1.tar.gz", "has_sig": false, "md5_digest": "00d2b9be3241b9e73f09ae38da99bfc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6226, "upload_time": "2016-02-08T05:10:55", "upload_time_iso_8601": "2016-02-08T05:10:55.007930Z", "url": "https://files.pythonhosted.org/packages/20/66/d007155e30d909b4eb804ac39c9fbf1322ffc0ac63be6a11866bd0267ece/commandlines-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0ef8bddca5749f88e5e074a6a1184e9a", "sha256": "fb5d6ebb4abb72bc9e7987a9ba3f5d3b77b08c005bf9806761bbfc45f0c340ee"}, "downloads": -1, "filename": "commandlines-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ef8bddca5749f88e5e074a6a1184e9a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7267, "upload_time": "2016-02-08T19:37:50", "upload_time_iso_8601": "2016-02-08T19:37:50.389795Z", "url": "https://files.pythonhosted.org/packages/79/0b/45c8277ae502f0cb84347c15badcbd4ba1c135c189f4e65bf302dd5a206e/commandlines-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66deb0c45858b37820191e5848122022", "sha256": "cd610befa586f9acbbcc17c467429a721ac75974402d6b70d68265f36460f578"}, "downloads": -1, "filename": "commandlines-0.2.2.tar.gz", "has_sig": false, "md5_digest": "66deb0c45858b37820191e5848122022", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6449, "upload_time": "2016-02-08T19:37:45", "upload_time_iso_8601": "2016-02-08T19:37:45.201486Z", "url": "https://files.pythonhosted.org/packages/d4/14/2aba977b33904b665b212232954e7ef7e2d7e0a7274720bd56646e2ec4ab/commandlines-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "71325fef27c694127de6f05de74b9dd5", "sha256": "1dd95f36659f0f536cebad2e60b0a2794269137fa110d08696eb6417c89030a9"}, "downloads": -1, "filename": "commandlines-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "71325fef27c694127de6f05de74b9dd5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7549, "upload_time": "2016-02-09T01:09:00", "upload_time_iso_8601": "2016-02-09T01:09:00.181934Z", "url": "https://files.pythonhosted.org/packages/51/d4/0dfe7ce8bc2c4aa42245b4a56304d4fccf32cd32ea3579424f6022cad397/commandlines-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1574c626e8d066f9926d9367d41a2844", "sha256": "fc738a2dcc3be70e2b59ddcf76ab160365bc7d9ee97a54825650638300dca510"}, "downloads": -1, "filename": "commandlines-0.2.3.tar.gz", "has_sig": false, "md5_digest": "1574c626e8d066f9926d9367d41a2844", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6720, "upload_time": "2016-02-09T01:08:50", "upload_time_iso_8601": "2016-02-09T01:08:50.909164Z", "url": "https://files.pythonhosted.org/packages/37/03/438f42c7624eb8f24a949e8ae9f905b07170f38cfcfd1f704b034150f3c6/commandlines-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "eae1a3ac4b06e0b063ab9164836120f7", "sha256": "3c7cbc04477610ea08fcbec01beb0bde1d87bffb1e32a1d83631e40d7af51430"}, "downloads": -1, "filename": "commandlines-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eae1a3ac4b06e0b063ab9164836120f7", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 16245, "upload_time": "2016-02-14T23:02:55", "upload_time_iso_8601": "2016-02-14T23:02:55.051439Z", "url": "https://files.pythonhosted.org/packages/a0/93/321c8be58fc11aa0f38bd9f3efec8000a0e8768f77450401a77f46e8e6ae/commandlines-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7713ee1f1ee072d43c049ea0f96085d", "sha256": "a3116a88584b8c9a39ac5b3292e78e0d8b0ab9e58228d984969e6ab3e1616c3c"}, "downloads": -1, "filename": "commandlines-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e7713ee1f1ee072d43c049ea0f96085d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15194, "upload_time": "2016-02-14T23:02:47", "upload_time_iso_8601": "2016-02-14T23:02:47.076899Z", "url": "https://files.pythonhosted.org/packages/5b/3d/9c4bc3f15df8a153cb236876b8507e08db2056bbd508039dec3366141c23/commandlines-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "437826e2fffe40e90c2e0853ce74f26e", "sha256": "fdff153ee1db060f2a94e3c15971ad74ba3178a8f04f4148809620c1f921c248"}, "downloads": -1, "filename": "commandlines-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "437826e2fffe40e90c2e0853ce74f26e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 16037, "upload_time": "2016-02-16T19:20:22", "upload_time_iso_8601": "2016-02-16T19:20:22.519834Z", "url": "https://files.pythonhosted.org/packages/44/7c/4358463ff6de7c3951c209e62bc62aab809385f0334036be3cda7017e54b/commandlines-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0cc77685478739ceda8504eee12af8b", "sha256": "da413ac5c76540a7b7e40d9b3ee9ea1ad2503883df854c74531b43b0b951344f"}, "downloads": -1, "filename": "commandlines-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a0cc77685478739ceda8504eee12af8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15002, "upload_time": "2016-02-16T19:20:06", "upload_time_iso_8601": "2016-02-16T19:20:06.955646Z", "url": "https://files.pythonhosted.org/packages/50/c7/e6b5b5a8f881f988d92fe608f47e7c04ba08625753a738ccb9cbf12a2bec/commandlines-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "30ed0147e2f1cf6aeeee5c4f14fb2396", "sha256": "47b55ec062fe659ea3825e42aa8519693bc71d2dda15a174a03d2c64ba6f8aae"}, "downloads": -1, "filename": "commandlines-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "30ed0147e2f1cf6aeeee5c4f14fb2396", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 16170, "upload_time": "2016-02-19T14:42:35", "upload_time_iso_8601": "2016-02-19T14:42:35.314163Z", "url": "https://files.pythonhosted.org/packages/bc/76/f2a0b684a6c2d46fc3ee9e660b2fb38099b67b2f94119280a1cd89cea5f2/commandlines-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64a61c9264f3f214d98ac62e85864e0b", "sha256": "987ba8fc7ce050591f4ed22c08b67ef1d02f05661e8fdfd6f5380afd6f29016d"}, "downloads": -1, "filename": "commandlines-0.3.2.tar.gz", "has_sig": false, "md5_digest": "64a61c9264f3f214d98ac62e85864e0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15128, "upload_time": "2016-02-19T14:42:17", "upload_time_iso_8601": "2016-02-19T14:42:17.770457Z", "url": "https://files.pythonhosted.org/packages/76/99/4de96b19a7370d740e6704f46e20d75b5fa334588ea2418c46e12c7eb81c/commandlines-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "a844b87c6ec230d7218fd1c991c0cc0c", "sha256": "ed3ff40408f6b3034ba4f1bc6c44806f69f5b35c430dc51cdc2f0de34dfcc6d4"}, "downloads": -1, "filename": "commandlines-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a844b87c6ec230d7218fd1c991c0cc0c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 16431, "upload_time": "2016-02-22T01:46:48", "upload_time_iso_8601": "2016-02-22T01:46:48.663143Z", "url": "https://files.pythonhosted.org/packages/11/24/ac192480a9105628e83ae749a72af814a63fb498d9f5ee8e3885f0b5f5ea/commandlines-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c862477067f6c47c91d728f9b1a1cd17", "sha256": "831a4648b0e2dd53d7e2d1fe9e3b8ec60ec00dedf125e2c6d0a7393236b93d7e"}, "downloads": -1, "filename": "commandlines-0.3.3.tar.gz", "has_sig": false, "md5_digest": "c862477067f6c47c91d728f9b1a1cd17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15415, "upload_time": "2016-02-22T01:46:37", "upload_time_iso_8601": "2016-02-22T01:46:37.710408Z", "url": "https://files.pythonhosted.org/packages/89/42/8f637e14f5ec1bd4c984ab195a9c8ed27c75999ae4a95f57998e2e935f03/commandlines-0.3.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e8544af773e22518e4b4b65dc1855c7b", "sha256": "5b0155a6d9ae5d75fbc31ec9a8bc98664683322ed2e5109ab62e5ae2ede97a89"}, "downloads": -1, "filename": "commandlines-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e8544af773e22518e4b4b65dc1855c7b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 18489, "upload_time": "2016-02-26T02:19:27", "upload_time_iso_8601": "2016-02-26T02:19:27.590387Z", "url": "https://files.pythonhosted.org/packages/9a/b1/027b1f3865055c9437542d188c005a3207decbc2cf97ac6848d5c72a1181/commandlines-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3781801aac6b506aa59ab0c89825fabf", "sha256": "005df53a205a85c4f9a51c8f31dc1d2d50cb9376e93601bdcc8bb9f4a650e77d"}, "downloads": -1, "filename": "commandlines-0.4.0.tar.gz", "has_sig": false, "md5_digest": "3781801aac6b506aa59ab0c89825fabf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17391, "upload_time": "2016-02-26T02:19:21", "upload_time_iso_8601": "2016-02-26T02:19:21.782641Z", "url": "https://files.pythonhosted.org/packages/5f/2a/950f7e95c6a1e344c53a7ebe18178f77b3e5f35cec39e04c8bb19296fc30/commandlines-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "150b5f3f836614729f2e73f77f6d9342", "sha256": "b7dbf71b8dec42c16e9694b87e0e121d288e5a40d5d4f0dd1c0651ab7af06837"}, "downloads": -1, "filename": "commandlines-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "150b5f3f836614729f2e73f77f6d9342", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 18515, "upload_time": "2016-02-27T00:17:17", "upload_time_iso_8601": "2016-02-27T00:17:17.886612Z", "url": "https://files.pythonhosted.org/packages/92/20/9fdf2c639119447ac03246ed3a04beb3c24aaf88d38f348e8c24375ec4aa/commandlines-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01dbe2cdceadb62ec11bb2f12e9e5ab3", "sha256": "86b650b78470ac95966d7b1a9d215c16591bccb34b28ae2bb9026c3b4166fd64"}, "downloads": -1, "filename": "commandlines-0.4.1.tar.gz", "has_sig": false, "md5_digest": "01dbe2cdceadb62ec11bb2f12e9e5ab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17434, "upload_time": "2016-02-27T00:17:11", "upload_time_iso_8601": "2016-02-27T00:17:11.352556Z", "url": "https://files.pythonhosted.org/packages/b9/4c/d380f7f9aaa12175b189cfe087e823cd9aa2a99afc95a8d6e028142311c9/commandlines-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "150b5f3f836614729f2e73f77f6d9342", "sha256": "b7dbf71b8dec42c16e9694b87e0e121d288e5a40d5d4f0dd1c0651ab7af06837"}, "downloads": -1, "filename": "commandlines-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "150b5f3f836614729f2e73f77f6d9342", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 18515, "upload_time": "2016-02-27T00:17:17", "upload_time_iso_8601": "2016-02-27T00:17:17.886612Z", "url": "https://files.pythonhosted.org/packages/92/20/9fdf2c639119447ac03246ed3a04beb3c24aaf88d38f348e8c24375ec4aa/commandlines-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01dbe2cdceadb62ec11bb2f12e9e5ab3", "sha256": "86b650b78470ac95966d7b1a9d215c16591bccb34b28ae2bb9026c3b4166fd64"}, "downloads": -1, "filename": "commandlines-0.4.1.tar.gz", "has_sig": false, "md5_digest": "01dbe2cdceadb62ec11bb2f12e9e5ab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17434, "upload_time": "2016-02-27T00:17:11", "upload_time_iso_8601": "2016-02-27T00:17:11.352556Z", "url": "https://files.pythonhosted.org/packages/b9/4c/d380f7f9aaa12175b189cfe087e823cd9aa2a99afc95a8d6e028142311c9/commandlines-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:24 2020"}