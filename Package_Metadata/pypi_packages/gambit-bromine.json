{"info": {"author": "Daniele Varrazzo", "author_email": "piro@gambitresearch.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP :: Browsers", "Topic :: Software Development :: Testing"], "description": "# Bromine: pythonic web testing\n\nBromine is a wrapper around [selenium] to allow writing testing in a terse and\n*pythonic* rather that *java-esque* way.\n\n[selenium]: https://www.seleniumhq.org/\n\nSelenium is cool: you register browser to a hub, you ask browsers from a hub,\nyou use the browser, and you put it back. It works like magic.\n\nExcept if you want to use https. But who needs https these days?\n\nAnyway, enough dissing well intentioned web testing systems. Let's talk bad\nabout bad testing system. You know what you have to do to wait for a page to\nload after a get, and then check if an element is visible? The selenium docs\n[will tell you](https://selenium-python.readthedocs.io/waits.html#explicit-waits):\n\n```python\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# ...\ndriver.get(\"http://example.com\")\nelement = WebDriverWait(driver, 10).until(\n\tEC.presence_of_element_located((By.ID, \"myDynamicElement\"))\n)\n```\n\nI've been kind and I've stripped some boilerplate. If you are happy about\nimporting three objects from 4 levels of namespaces and create a wait object\nand pass a 2-element tuple to the \"convenience method\"\n`selenium.webdriver.support.expected_conditions.visibility_of_element_located`\nfor a thing you have to do pretty much every time you click on a link, please\nstop reading here: type `pip install selenium` and off you go. The following\nparagraph is only for people who think the above is unsatisfactory in Python.\n\nStill reading? Sure?\n\nWell, I'll be honest: what I prefer to do is:\n\n```python\nimport bromine\nbrowser = bromine.Browser(driver)\nelement = browser.get(\"http://example.com/\").wait(id='myDynamicElement')\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GambitResearch/bromine", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gambit-bromine", "package_url": "https://pypi.org/project/gambit-bromine/", "platform": "", "project_url": "https://pypi.org/project/gambit-bromine/", "project_urls": {"Homepage": "https://github.com/GambitResearch/bromine"}, "release_url": "https://pypi.org/project/gambit-bromine/0.3.1/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "summary": "Pythonic web testing", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Bromine: pythonic web testing</h1>\n<p>Bromine is a wrapper around <a href=\"https://www.seleniumhq.org/\" rel=\"nofollow\">selenium</a> to allow writing testing in a terse and\n<em>pythonic</em> rather that <em>java-esque</em> way.</p>\n<p>Selenium is cool: you register browser to a hub, you ask browsers from a hub,\nyou use the browser, and you put it back. It works like magic.</p>\n<p>Except if you want to use https. But who needs https these days?</p>\n<p>Anyway, enough dissing well intentioned web testing systems. Let's talk bad\nabout bad testing system. You know what you have to do to wait for a page to\nload after a get, and then check if an element is visible? The selenium docs\n<a href=\"https://selenium-python.readthedocs.io/waits.html#explicit-waits\" rel=\"nofollow\">will tell you</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.common.by</span> <span class=\"kn\">import</span> <span class=\"n\">By</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.support.ui</span> <span class=\"kn\">import</span> <span class=\"n\">WebDriverWait</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.support</span> <span class=\"kn\">import</span> <span class=\"n\">expected_conditions</span> <span class=\"k\">as</span> <span class=\"n\">EC</span>\n\n<span class=\"c1\"># ...</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://example.com\"</span><span class=\"p\">)</span>\n<span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">WebDriverWait</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">until</span><span class=\"p\">(</span>\n\t<span class=\"n\">EC</span><span class=\"o\">.</span><span class=\"n\">presence_of_element_located</span><span class=\"p\">((</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"s2\">\"myDynamicElement\"</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</pre>\n<p>I've been kind and I've stripped some boilerplate. If you are happy about\nimporting three objects from 4 levels of namespaces and create a wait object\nand pass a 2-element tuple to the \"convenience method\"\n<code>selenium.webdriver.support.expected_conditions.visibility_of_element_located</code>\nfor a thing you have to do pretty much every time you click on a link, please\nstop reading here: type <code>pip install selenium</code> and off you go. The following\nparagraph is only for people who think the above is unsatisfactory in Python.</p>\n<p>Still reading? Sure?</p>\n<p>Well, I'll be honest: what I prefer to do is:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bromine</span>\n<span class=\"n\">browser</span> <span class=\"o\">=</span> <span class=\"n\">bromine</span><span class=\"o\">.</span><span class=\"n\">Browser</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">)</span>\n<span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://example.com/\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'myDynamicElement'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5362307, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f7b136cf6f39ba9e5c9bff091c32c0f7", "sha256": "5ef583b3a855b1d0c378c020943709824798e9e4ae40f0d9d94ec5004f25229a"}, "downloads": -1, "filename": "gambit-bromine-0.1.tar.gz", "has_sig": false, "md5_digest": "f7b136cf6f39ba9e5c9bff091c32c0f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 5593, "upload_time": "2019-02-22T11:40:19", "upload_time_iso_8601": "2019-02-22T11:40:19.251892Z", "url": "https://files.pythonhosted.org/packages/26/80/8844cb79ee6e4a0b99dc4d8a4bc2ccfee14b23ed469b777ad766edcb9981/gambit-bromine-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f8e25096720ba0e71509c92b305bf941", "sha256": "74caf838d58058e57235e6fb0c4eb11655dd2ec69601f3a0ad4e9a0b971e2a68"}, "downloads": -1, "filename": "gambit-bromine-0.2.tar.gz", "has_sig": false, "md5_digest": "f8e25096720ba0e71509c92b305bf941", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 6110, "upload_time": "2019-03-04T13:40:26", "upload_time_iso_8601": "2019-03-04T13:40:26.554502Z", "url": "https://files.pythonhosted.org/packages/7d/61/509856debdcef7e64e9ca2a21faafdd63f6abcf820b7b6031997b8804a8a/gambit-bromine-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "bba26d732f96ffbec118849e631053f6", "sha256": "93c00e9485ec5ea46bd07b77a96c58b87c51108339d2477dfda9a55f0d592e50"}, "downloads": -1, "filename": "gambit-bromine-0.2.1.tar.gz", "has_sig": false, "md5_digest": "bba26d732f96ffbec118849e631053f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 6116, "upload_time": "2019-03-06T17:09:47", "upload_time_iso_8601": "2019-03-06T17:09:47.254528Z", "url": "https://files.pythonhosted.org/packages/a3/c5/0a8123cd7d46b9561c9a8c1f884de291b06b0ffb9fab7dbd58441abdddee/gambit-bromine-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "871cb923a46da6ab93e0ee17756553c4", "sha256": "c920b43b84d8e79cf1b7d07058b9181fcabb5c06f7419860a5f7fb4bd38b9807"}, "downloads": -1, "filename": "gambit-bromine-0.3.tar.gz", "has_sig": false, "md5_digest": "871cb923a46da6ab93e0ee17756553c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7008, "upload_time": "2019-03-11T19:58:34", "upload_time_iso_8601": "2019-03-11T19:58:34.921719Z", "url": "https://files.pythonhosted.org/packages/c2/9e/bf86558a807bb419105462660301439485c3482aaab67d26c5cac56cb7a9/gambit-bromine-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "3123e1c3b6078df44f3585e2ac292ca1", "sha256": "c213c361ea9bd28892da449eb940ab418c16865ef5923bbbd29ae964c82e7e98"}, "downloads": -1, "filename": "gambit-bromine-0.3.1.tar.gz", "has_sig": false, "md5_digest": "3123e1c3b6078df44f3585e2ac292ca1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7017, "upload_time": "2019-06-05T12:37:25", "upload_time_iso_8601": "2019-06-05T12:37:25.560588Z", "url": "https://files.pythonhosted.org/packages/9e/6a/12dd3f6c48dac20fbc538e02162276bf68ae27d28fcc18195ee70f6e4771/gambit-bromine-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3123e1c3b6078df44f3585e2ac292ca1", "sha256": "c213c361ea9bd28892da449eb940ab418c16865ef5923bbbd29ae964c82e7e98"}, "downloads": -1, "filename": "gambit-bromine-0.3.1.tar.gz", "has_sig": false, "md5_digest": "3123e1c3b6078df44f3585e2ac292ca1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7017, "upload_time": "2019-06-05T12:37:25", "upload_time_iso_8601": "2019-06-05T12:37:25.560588Z", "url": "https://files.pythonhosted.org/packages/9e/6a/12dd3f6c48dac20fbc538e02162276bf68ae27d28fcc18195ee70f6e4771/gambit-bromine-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:15 2020"}