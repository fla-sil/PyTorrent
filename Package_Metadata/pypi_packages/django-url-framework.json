{"info": {"author": "Dimo Fedortchenko", "author_email": "d@angelhill.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "The django-url-framework will help you get your django applications done faster.\n\n![build](https://github.com/zeraien/django-url-framework/workflows/build/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/django-url-framework/badge/?version=latest)](https://django-url-framework.readthedocs.io/en/latest/?badge=latest)\n[![Join the chat at https://gitter.im/zeraien/django-url-framework](https://badges.gitter.im/zeraien/django-url-framework.svg)](https://gitter.im/zeraien/django-url-framework?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nIt automatically detects urls in a django application, similar to the way Ruby on Rails does it with the Controller-Action-View implementation.\n\nControllers are created in each django application with a predefined file naming scheme (`foo_controller.py`) and extending `ActionController`. The `ActionController` contains methods often used in a web context, and does common request-related processing.\n\nEach application can have multiple controllers thus allowing for smaller classes in a larger application.\n\nEach function not starting with an underscore becomes it's own action. By simply returning a dictionary from the action, it will be rendered with the template named using the `controller/action.html` naming scheme.\n\nEach action and controller can override certain global settings such as using a custom template name or giving the action (or controller) a custom name.\n\n## Install\n\nFrom pypi:\n\n```\npip install django-url-framework\n```\n\nAlternatively just check out the source here and run `python setup.py install`\n\n## Add to your project\n\n### settings.py\n\n```python\nINSTALLED_APPS = (\n  ...,\n  'django_url_framework',\n  ...\n)\n```\n### urls.py\n```python\nimport django_url_framework\nfrom django.conf import settings\nfrom django.conf.urls import patterns, include\n\ndjango_url_framework.site.autodiscover(new_inflection_library=True)\n\nurlpatterns = patterns('',\n    (r'^', include(django_url_framework.site.urls) ),\n)\n```\n\n## Example\n\n### Folder structure\n\n```\nproject/\n  app/\n      cart_controller.py\n      id_controller.py\n      templates/\n           cart/\n              add.html\n              index.html\n              remove.html\n           id_manager/\n              bar.html\n```\n\n### cart_controller.py \n\n```python\nfrom django_url_framework.controller import ActionController\n\nclass CartController(ActionController):\n    def edit(self, request, id = None):\n        return {}\n    def remove(self, request, id):\n        return {}\n    def index(self, request):\n      return {}\n```\n\n### id_controller.py\n\n```python\nfrom django_url_framework.controller import ActionController\n\nclass IDManagerController(ActionController):\n    def index(self, request, object_id = None):\n        return {}\n    def bar(self, request):\n        return {}\n    def bar__delete(self, request):\n        return {}\n```\n\n### Result\n\nThe following URLs will be created:\n\n```\n/cart/ <- will go to *index action*\n/cart/(\\w+)/\n/cart/edit/\n/cart/edit/(\\w+)/\n/cart/remove/(\\w+)/\n/foo/\n/foo/(\\w+)/\n/foo/bar/\n/foo/bar/delete/\n```\n\nYou can easily access your URLs using django's built-in `{% url ... %}` tag. Simply call `{% url cart_index %}` or `{% url cart_delete id %}` and it will work as you would expect.\n\nThere is also a helper tag for faster linking within the same controller.\n`{% go_action remove %}` will take you to `/cart/remove/`. To use it, `{% load url_framework %}` in your templates.\n\nThe names of the controller files do not affect your URLs, however, the files must have `_controller.py` suffix. The URL name of the controller is derived from the class name, minus the Controller part. You can also manually specify controller names using the `controller_name` attribute on the controller class.\n\n### Controller names\n\nThe controller name is derived from it's class name, by converting camelcase into underscores.\nFor instance `FooController` is simple `foo`, while `FooBarController` becomes `foo_bar`.\n\nThe latest version uses the `inflection` library, however to avoid breaking old code, this is still optional until 2021.\n\nThe biggest difference is that with `inflection`, `HTTPResponse` becomes `http_response`, while the old name would be `httpresponse`. I suggest enabling the `inflection` library for all new and existing projects. You can manually specify names for controllers whose name change would break your code, or disable the inflection library for those controllers using a flag.\n\nYou can give the controller a custom name with the `controller_name` parameter:\n```python\nclass Controller(ActionController):\n  controller_name = \"foo\"\n```\n\nEnable or disable the use of the new `inflection` library using a flag\n```python\nclass Controller(ActionController):\n  use_inflection_library = True\n```\n\n### Other useful controller settings\n\n```python\nclass BarController(ActionController):\n    \n    # default filename extension for all templates\n    template_extension = \"pug\" \n    \n    # will require every template file to start with this string\n    template_prefix = \"foo_\" \n    \n    # will not look for templates in subdirectories, but in the root templates/ folder\n    no_subdirectories = False \n    \n    # do not prefix templates with `_` (underscore) when they are called using an AJAX request\n    no_ajax_prefix = False \n\n    # Set a prefix for the controller's name, applies even if\n    # you set controller_name (template name is based on controller_name, sans prefix)\n    # NOTE: The urlconf name will not include the prefix, only the actual URL itself\n    # Thus: FooController.list will have the URL /prefixed_foo/list/, but the url name will be\n    # `foo_list`.\n    controller_prefix = \"prefixed_\" \n    \n    # completely override the name of the controller\n    controller_name = \"shopping_cart\" \n\n    # When used with custom urlconf in actions, these arguments will not be passed to the action\n    # example: \"/<id:int>/<skip:bool>/\" Only `id` will be passed to the `action`, while `skip` will not be.\n    consume_urlconf_keyword_arguments = ['skip']\n\n    # set a prefix for all the URLs in this controller\n    # So, what normally would be `/controller/action/`, becomes `^prefix/controller/action/`\n    urlconf_prefix:list = [\"^prefix\"]\n\n    # A custom json encoder, subclassing JSONEncoder \n    json_default_encoder:JSONEncoder = None\n\n    # use the yaml default flow style\n    yaml_default_flow_style:bool = True\n\n    # use the new inflection library to generate controller url\n    # if this is None, will use the global setting, otherwise override this on a per controller basis\n    use_inflection_library:Union[bool,None] = None\n\n```\n\n### Template filenames\n\nBy default templates are stored in the subdirectory with the controller's name, and the templates are given the same filename as the action name.\nIf a request is determinned to be AJAX in nature, the template filename is prefixed with an underscore.\nExample:\n```python\nclass FooController(ActionController):\n    def foo_action(self, request):\n      return {}\n```\n\nFile structure:\n```python\n/foo/foo_action.html\n/foo/_foo_action.html <--- for AJAX requests.\n```\n\nYou can disable this prefixing on a per action or per controller level.\n\nFor all actions in a controller:\n```python\nclass FooController(ActionController):\n    no_ajax_prefix = True\n```\n\nFor a single action:\n```python\nfrom django_url_framework.decorators.action_options\nclass FooController(ActionController):\n    @no_ajax_prefix\n    def foo_action(self, request):\n      return {}\n```\n\n\n## Action names\n\n```python\nclass FooController(ActionController):\n    def action(self, request):\n      return {}\n```\nCreates the following URL:\n```\n/controller/action/\n```\n\nDouble underscores `__` in action names are converted to slashes in the urlconf, so: `action__name` becomes `/action/name/`.\n\n```python\nclass Controller(ActionController):\n    def action__foo(self, request):\n      return {}\n```\nCreates the following URL:\n```\n/controller/action/foo/\n```\n\n\n### Decorate to name\n\nYou can also decorate functions to give them different names and prefixes and urls. See decorator package for more details, here is an example:\n```python\n@action_options.name(\"foo\")\n@action_options.prefix(\"prefix_\")\ndef bar(self, request):\n  return {}\n```\nwill result in:\n```\n/controller/prefix_foo/\n```\n\nThe action will now have the template `/controller/foo.html`. Prefixes do not affect template naming.\n\n## Action parameters\n\nProviding a third parameter to an action will create a URLconf for that parameter, like so:\n```python\ndef action(self, request, object_id):\n    return {}\n```\nWill allow you to call that action with:\n```\n/controller/action/(\\w+)/ <--- parameter consisting of A-Za-z0-9_\n```\nIf you make the argument optional, an additional URLconf entry is created allowing you to call the action without the third argument.\n```python\ndef action(self, request, object_id = None):\n    return {}\n```\nResults in:\n\n```\n/controller/action/\n/controller/action/(\\w+)/  <--- optional argument consisting of A-Za-z0-9_\n```\n\n### Decorate for JSON, YAML or Automatic\n\nYou can decorate any action to have a default renderer.\nInstead of using `self._as_json` as before, you can just put a decorator like so:\n\n```python\nfrom django_url_framework.decorators import json_action\n    @json_action(json_encoder=None)\n    def action(self, request, year, month):\n        ...\n        return {}\n```\nOther decorators include `@yaml_action(default_flow_style:bool)` and `@auto()`.\nYaML is self-explanatory, however `@auto` is a bit interesting, it will automatically determine the renderer based on the `HTTP_ACCEPT` header. \n\n*Warning* - if you expose raw data in your actions, that normally would be massaged inside a Server-Side template, DO NOT USE the `@auto` decorator as this allows an attacker to download raw data from your server.\nHowever, if your responses are designed for an API, the `@auto` decorator will enable the API client to request data as it sees fit, for example, it can request a Server-Side rendered HTML, or the same data as JSON or YaML.\n\nHere is a list of supported renderers:\n- text/html - `TemplateRenderer` - renders using the appropriate Django template\n- text/plain - `TextRenderer` - prints text data as is, or prints object types using `pprint.pformat`\n- application/json - `JSONRenderer` - renders data as JSON\n- application/yaml - `YamlRenderer` - renders data as YaML\n\n`@auto()` accepts the following parameters:\n- json_encoder\n- yaml_default_flow_style\nThe work the same as if passed to `@json_action()` or `@yaml_action()`\n\n### Set HTTP Status Codes easily\n\nAny action can return a tuple of two items, the second item should be an `int` and will become the HTTP status code for your response.\n\n```python\n    @json_action()\n    def update(self, request, year, month):\n        ...\n        return False, 304 #not modified\n\n    @json_action()\n    def create(self, request, year, month):\n        ...\n        return True, 201 #created\n```\n\n### Decorate for custom parameters\n\nYou can also create your own custom parameters by using the `@url_parameters` decorator to the function.\n```python\nfrom django_url_framework.decorators.action_options import url_paramters\nclass Controller(ActionController):\n    @url_parameters(r'(?P<year>\\d{4})/(?P<month>\\d\\d)')\n    def action(self, request, year, month):\n        ...\n        return {}\n```\nThe above will create the following url patterns:\n```\n/controller/action/(?P<year>\\d{4})/(?P<month>\\d\\d)\n```\n*Note the lack of trailing slash - you must provide this yourself.*\n\n### Custom url for any action\n\nYou can write your own urlconf for each action, by decorating it with `@urlconf`.\n```python\nfrom django_url_framework.decorators.action_options import urlconf\nclass Controller(ActionController):\n    @action_options.urlconf([\n            r'^bar/(?P<year>\\d{4})/$',\n            r'^bar/(?P<year>\\d{4})/(?P<month>\\d\\d)/$',\n            r'^foo/(?P<year>\\d{4})/(?P<month>\\d\\d)/(?P<day>\\d\\d)/$'\n        ],\n        do_not_autogenerate=True)\n    def action(self, request, year, month=None, day=None):\n        ...\n        return {}\n```\nThe above will create the following url patterns:\n```\n/controller/bar/(?P<year>\\d{4})/\n/controller/bar/(?P<year>\\d{4})/(?P<month>\\d\\d)/$\n/controller/foo/(?P<year>\\d{4})/(?P<month>\\d\\d)/(?P<day>\\d\\d)/$\n```\n\nThe `do_not_autogenerate` argument is **true** by default and will prevent any urls for this action\nfrom being autogenerated. If `do_not_autogenerate` were to be set to false in the example below,\nthe following url would also be created:\n```\n/controller/action/\n```\nThis URL would not actually work since the `year` argument is required the `action` function.\n\n## Flash messages\n\nThe ActionController also has a `_flash` instance variable that allows you to send messages to the user that can survive a redirect. Simply use \n\n```python\nself._flash.append(\"Message\")\n\nself._flash.error(\"Error message\")\n```\n\nThe flash messages can be either messages or error messages. The flash object is automatically exported into the context and you can use it as such:\n\n```HTML+Django\n{% if flash.has_messages %}\n  {% for message in flash.get_and_clear %}\n\n      {% if message.is_error %}<span class='icon-error'></span>{% endif %}\n\n      <p class=\"{{message.type}}\">{{message}}</p>\n      \n  {% endfor %}\n{% endif }\n```\n\n## Before and After each action\n\nYou can override `_before_filter` and/or `_after_filter` to perform certain actions and checks before or after an action. Read more in `ActionController` docs.\n\nThese methods accept the \"request\" parameter which is an HTTP request object for this request.\n\n```python\nclass AccountController(ActionController):\n\n    def _before_filter(self, request):\n        campaign_id = request.GET.get(\"campaign_id\")\n        try:\n          self._campaign = Campaign.objects.get(pk=campaign_id)\n        except Campaign.DoesNotExist:\n          self._campaign = None\n```\n\nYou can disable the before and after filters by decorating any action with the `@disable_filters` decorator.\n\nExample:\n```python\nfrom django_url_framework.decorators.action_options import disable_filters\n@disable_filters\ndef action(self, request):\n  return {}\n```\n\nOne of the great features of django url framework is that you can require login for all actions in a controller by simply decorating the before_filter with a decorator to require logging in, see next section!\n\n## Authentication\n\nTo require login on an action use the `@login_required` decorator provided by django-url-framework. The decorator also works on `_before_filter`.\n\n```python\nfrom django_url_framework.decorators import login_required\nclass AccountController(ActionController):\n\n    @login_required\n    def action(self, request):\n        return {}\n```\n\nIf the user isn\u2019t logged in, redirect to `settings.LOGIN_URL`, passing the current absolute path in the query string. Example: `/accounts/login/?next=/polls/3/`.\n`login_required()` also takes an optional `login_url` parameter. Example:\n\n```python\nfrom django_url_framework.decorators import login_required\nclass AccountController(ActionController):\n\n    @login_required(login_url=\"/login/\")\n    def action(self, request):\n        return {}\n```\n\nBy default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called \"next\". If you would prefer to use a different name for this parameter, `login_required()` takes an optional `redirect_field_name` parameter.\n\nAdditionally you can use `@superuser_required`, `@permission_required(permission_instance)` and `@must_be_member_of_group(group_name=\"some_group\")`.\n\nAnother example makes it easy to limiting access to a subset of data based on the logged in user for the whole controller.\n\n```python\nfrom django_url_framework.decorators import login_required\nclass ItemController(ActionController):\n    @login_required()\n    def _before_filter(self):\n        self.my_items = Item.objects.filter(user=request.user)\n        self.my_products = Product.objects.filter(item__in=self.my_items)\n        return {\n            \"page_title\": \"Item Page\"\n        }\n    def item(self, request, pk):\n        item = get_object_or_404(self.my_items, pk=pk)\n        return {\"item\":item}\n    def product(self, request, pk):\n        item = get_object_or_404(self.my_products, pk=pk)\n        return {\"product\":product}\n\n\n```\n\n## Only POST? (or GET or anything...)\nYou can limit what http methods a function can be called with.\n\nThe example below limits the `update` action to only **POST** and **DELETE** http methods.\n\n```python\nfrom django_url_framework.decorators import http_methods\nclass Controller(ActionController):\n    @http_methods.POST\n    @http_methods.DELETE\n    def update(self, request):\n        return {}\n```\n\nBy default all actions can be called with all http methods.\n\n## Custom template extensions\nWhen using jade or something similar you can specify a custom extension for all templates in the controller.\n\n```python\nclass FooController(ActionController):\n    #custom extension for all templates in this controller\n    template_extension = \"jade\"\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zeraien/django-url-framework/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-url-framework", "package_url": "https://pypi.org/project/django-url-framework/", "platform": "", "project_url": "https://pypi.org/project/django-url-framework/", "project_urls": {"Homepage": "https://github.com/zeraien/django-url-framework/"}, "release_url": "https://pypi.org/project/django-url-framework/0.5.2/", "requires_dist": null, "requires_python": "", "summary": "Automagically discover urls in a django application, similar to the Ruby on Rails Controller/Action/View implementation.", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The django-url-framework will help you get your django applications done faster.</p>\n<p><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfc6717fdf9abbef03572629ca35a433f753138a/68747470733a2f2f6769746875622e636f6d2f7a65726169656e2f646a616e676f2d75726c2d6672616d65776f726b2f776f726b666c6f77732f6275696c642f62616467652e737667\">\n<a href=\"https://django-url-framework.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0db262a29b30121759afcd3efff0677094a3c07c/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646a616e676f2d75726c2d6672616d65776f726b2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://gitter.im/zeraien/django-url-framework?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/zeraien/django-url-framework\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dece1e6d6d2f158fcf75ff2258da45fd5e563b26/68747470733a2f2f6261646765732e6769747465722e696d2f7a65726169656e2f646a616e676f2d75726c2d6672616d65776f726b2e737667\"></a></p>\n<p>It automatically detects urls in a django application, similar to the way Ruby on Rails does it with the Controller-Action-View implementation.</p>\n<p>Controllers are created in each django application with a predefined file naming scheme (<code>foo_controller.py</code>) and extending <code>ActionController</code>. The <code>ActionController</code> contains methods often used in a web context, and does common request-related processing.</p>\n<p>Each application can have multiple controllers thus allowing for smaller classes in a larger application.</p>\n<p>Each function not starting with an underscore becomes it's own action. By simply returning a dictionary from the action, it will be rendered with the template named using the <code>controller/action.html</code> naming scheme.</p>\n<p>Each action and controller can override certain global settings such as using a custom template name or giving the action (or controller) a custom name.</p>\n<h2>Install</h2>\n<p>From pypi:</p>\n<pre><code>pip install django-url-framework\n</code></pre>\n<p>Alternatively just check out the source here and run <code>python setup.py install</code></p>\n<h2>Add to your project</h2>\n<h3>settings.py</h3>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"o\">...</span><span class=\"p\">,</span>\n  <span class=\"s1\">'django_url_framework'</span><span class=\"p\">,</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>urls.py</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">django_url_framework</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">patterns</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n\n<span class=\"n\">django_url_framework</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">autodiscover</span><span class=\"p\">(</span><span class=\"n\">new_inflection_library</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">django_url_framework</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)</span> <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Example</h2>\n<h3>Folder structure</h3>\n<pre><code>project/\n  app/\n      cart_controller.py\n      id_controller.py\n      templates/\n           cart/\n              add.html\n              index.html\n              remove.html\n           id_manager/\n              bar.html\n</code></pre>\n<h3>cart_controller.py</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.controller</span> <span class=\"kn\">import</span> <span class=\"n\">ActionController</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CartController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n    <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<h3>id_controller.py</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.controller</span> <span class=\"kn\">import</span> <span class=\"n\">ActionController</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">IDManagerController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">object_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar__delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<h3>Result</h3>\n<p>The following URLs will be created:</p>\n<pre><code>/cart/ &lt;- will go to *index action*\n/cart/(\\w+)/\n/cart/edit/\n/cart/edit/(\\w+)/\n/cart/remove/(\\w+)/\n/foo/\n/foo/(\\w+)/\n/foo/bar/\n/foo/bar/delete/\n</code></pre>\n<p>You can easily access your URLs using django's built-in <code>{% url ... %}</code> tag. Simply call <code>{% url cart_index %}</code> or <code>{% url cart_delete id %}</code> and it will work as you would expect.</p>\n<p>There is also a helper tag for faster linking within the same controller.\n<code>{% go_action remove %}</code> will take you to <code>/cart/remove/</code>. To use it, <code>{% load url_framework %}</code> in your templates.</p>\n<p>The names of the controller files do not affect your URLs, however, the files must have <code>_controller.py</code> suffix. The URL name of the controller is derived from the class name, minus the Controller part. You can also manually specify controller names using the <code>controller_name</code> attribute on the controller class.</p>\n<h3>Controller names</h3>\n<p>The controller name is derived from it's class name, by converting camelcase into underscores.\nFor instance <code>FooController</code> is simple <code>foo</code>, while <code>FooBarController</code> becomes <code>foo_bar</code>.</p>\n<p>The latest version uses the <code>inflection</code> library, however to avoid breaking old code, this is still optional until 2021.</p>\n<p>The biggest difference is that with <code>inflection</code>, <code>HTTPResponse</code> becomes <code>http_response</code>, while the old name would be <code>httpresponse</code>. I suggest enabling the <code>inflection</code> library for all new and existing projects. You can manually specify names for controllers whose name change would break your code, or disable the inflection library for those controllers using a flag.</p>\n<p>You can give the controller a custom name with the <code>controller_name</code> parameter:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Controller</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n  <span class=\"n\">controller_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"foo\"</span>\n</pre>\n<p>Enable or disable the use of the new <code>inflection</code> library using a flag</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Controller</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n  <span class=\"n\">use_inflection_library</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<h3>Other useful controller settings</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BarController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    \n    <span class=\"c1\"># default filename extension for all templates</span>\n    <span class=\"n\">template_extension</span> <span class=\"o\">=</span> <span class=\"s2\">\"pug\"</span> \n    \n    <span class=\"c1\"># will require every template file to start with this string</span>\n    <span class=\"n\">template_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"foo_\"</span> \n    \n    <span class=\"c1\"># will not look for templates in subdirectories, but in the root templates/ folder</span>\n    <span class=\"n\">no_subdirectories</span> <span class=\"o\">=</span> <span class=\"kc\">False</span> \n    \n    <span class=\"c1\"># do not prefix templates with `_` (underscore) when they are called using an AJAX request</span>\n    <span class=\"n\">no_ajax_prefix</span> <span class=\"o\">=</span> <span class=\"kc\">False</span> \n\n    <span class=\"c1\"># Set a prefix for the controller's name, applies even if</span>\n    <span class=\"c1\"># you set controller_name (template name is based on controller_name, sans prefix)</span>\n    <span class=\"c1\"># NOTE: The urlconf name will not include the prefix, only the actual URL itself</span>\n    <span class=\"c1\"># Thus: FooController.list will have the URL /prefixed_foo/list/, but the url name will be</span>\n    <span class=\"c1\"># `foo_list`.</span>\n    <span class=\"n\">controller_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"prefixed_\"</span> \n    \n    <span class=\"c1\"># completely override the name of the controller</span>\n    <span class=\"n\">controller_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"shopping_cart\"</span> \n\n    <span class=\"c1\"># When used with custom urlconf in actions, these arguments will not be passed to the action</span>\n    <span class=\"c1\"># example: \"/&lt;id:int&gt;/&lt;skip:bool&gt;/\" Only `id` will be passed to the `action`, while `skip` will not be.</span>\n    <span class=\"n\">consume_urlconf_keyword_arguments</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'skip'</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># set a prefix for all the URLs in this controller</span>\n    <span class=\"c1\"># So, what normally would be `/controller/action/`, becomes `^prefix/controller/action/`</span>\n    <span class=\"n\">urlconf_prefix</span><span class=\"p\">:</span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"^prefix\"</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># A custom json encoder, subclassing JSONEncoder </span>\n    <span class=\"n\">json_default_encoder</span><span class=\"p\">:</span><span class=\"n\">JSONEncoder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># use the yaml default flow style</span>\n    <span class=\"n\">yaml_default_flow_style</span><span class=\"p\">:</span><span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"c1\"># use the new inflection library to generate controller url</span>\n    <span class=\"c1\"># if this is None, will use the global setting, otherwise override this on a per controller basis</span>\n    <span class=\"n\">use_inflection_library</span><span class=\"p\">:</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<h3>Template filenames</h3>\n<p>By default templates are stored in the subdirectory with the controller's name, and the templates are given the same filename as the action name.\nIf a request is determinned to be AJAX in nature, the template filename is prefixed with an underscore.\nExample:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FooController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo_action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>File structure:</p>\n<pre><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"o\">/</span><span class=\"n\">foo_action</span><span class=\"o\">.</span><span class=\"n\">html</span>\n<span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"o\">/</span><span class=\"n\">_foo_action</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">&lt;---</span> <span class=\"k\">for</span> <span class=\"n\">AJAX</span> <span class=\"n\">requests</span><span class=\"o\">.</span>\n</pre>\n<p>You can disable this prefixing on a per action or per controller level.</p>\n<p>For all actions in a controller:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FooController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"n\">no_ajax_prefix</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>For a single action:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators.action_options</span>\n<span class=\"k\">class</span> <span class=\"nc\">FooController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"nd\">@no_ajax_prefix</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo_action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<h2>Action names</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FooController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>Creates the following URL:</p>\n<pre><code>/controller/action/\n</code></pre>\n<p>Double underscores <code>__</code> in action names are converted to slashes in the urlconf, so: <code>action__name</code> becomes <code>/action/name/</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Controller</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">action__foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>Creates the following URL:</p>\n<pre><code>/controller/action/foo/\n</code></pre>\n<h3>Decorate to name</h3>\n<p>You can also decorate functions to give them different names and prefixes and urls. See decorator package for more details, here is an example:</p>\n<pre><span class=\"nd\">@action_options</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@action_options</span><span class=\"o\">.</span><span class=\"n\">prefix</span><span class=\"p\">(</span><span class=\"s2\">\"prefix_\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>will result in:</p>\n<pre><code>/controller/prefix_foo/\n</code></pre>\n<p>The action will now have the template <code>/controller/foo.html</code>. Prefixes do not affect template naming.</p>\n<h2>Action parameters</h2>\n<p>Providing a third parameter to an action will create a URLconf for that parameter, like so:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">object_id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>Will allow you to call that action with:</p>\n<pre><code>/controller/action/(\\w+)/ &lt;--- parameter consisting of A-Za-z0-9_\n</code></pre>\n<p>If you make the argument optional, an additional URLconf entry is created allowing you to call the action without the third argument.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">object_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>Results in:</p>\n<pre><code>/controller/action/\n/controller/action/(\\w+)/  &lt;--- optional argument consisting of A-Za-z0-9_\n</code></pre>\n<h3>Decorate for JSON, YAML or Automatic</h3>\n<p>You can decorate any action to have a default renderer.\nInstead of using <code>self._as_json</code> as before, you can just put a decorator like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">json_action</span>\n    <span class=\"nd\">@json_action</span><span class=\"p\">(</span><span class=\"n\">json_encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>Other decorators include <code>@yaml_action(default_flow_style:bool)</code> and <code>@auto()</code>.\nYaML is self-explanatory, however <code>@auto</code> is a bit interesting, it will automatically determine the renderer based on the <code>HTTP_ACCEPT</code> header.</p>\n<p><em>Warning</em> - if you expose raw data in your actions, that normally would be massaged inside a Server-Side template, DO NOT USE the <code>@auto</code> decorator as this allows an attacker to download raw data from your server.\nHowever, if your responses are designed for an API, the <code>@auto</code> decorator will enable the API client to request data as it sees fit, for example, it can request a Server-Side rendered HTML, or the same data as JSON or YaML.</p>\n<p>Here is a list of supported renderers:</p>\n<ul>\n<li>text/html - <code>TemplateRenderer</code> - renders using the appropriate Django template</li>\n<li>text/plain - <code>TextRenderer</code> - prints text data as is, or prints object types using <code>pprint.pformat</code></li>\n<li>application/json - <code>JSONRenderer</code> - renders data as JSON</li>\n<li>application/yaml - <code>YamlRenderer</code> - renders data as YaML</li>\n</ul>\n<p><code>@auto()</code> accepts the following parameters:</p>\n<ul>\n<li>json_encoder</li>\n<li>yaml_default_flow_style\nThe work the same as if passed to <code>@json_action()</code> or <code>@yaml_action()</code></li>\n</ul>\n<h3>Set HTTP Status Codes easily</h3>\n<p>Any action can return a tuple of two items, the second item should be an <code>int</code> and will become the HTTP status code for your response.</p>\n<pre>    <span class=\"nd\">@json_action</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"mi\">304</span> <span class=\"c1\">#not modified</span>\n\n    <span class=\"nd\">@json_action</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">201</span> <span class=\"c1\">#created</span>\n</pre>\n<h3>Decorate for custom parameters</h3>\n<p>You can also create your own custom parameters by using the <code>@url_parameters</code> decorator to the function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators.action_options</span> <span class=\"kn\">import</span> <span class=\"n\">url_paramters</span>\n<span class=\"k\">class</span> <span class=\"nc\">Controller</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"nd\">@url_parameters</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'(?P&lt;year&gt;\\d</span><span class=\"si\">{4}</span><span class=\"s1\">)/(?P&lt;month&gt;\\d\\d)'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>The above will create the following url patterns:</p>\n<pre><code>/controller/action/(?P&lt;year&gt;\\d{4})/(?P&lt;month&gt;\\d\\d)\n</code></pre>\n<p><em>Note the lack of trailing slash - you must provide this yourself.</em></p>\n<h3>Custom url for any action</h3>\n<p>You can write your own urlconf for each action, by decorating it with <code>@urlconf</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators.action_options</span> <span class=\"kn\">import</span> <span class=\"n\">urlconf</span>\n<span class=\"k\">class</span> <span class=\"nc\">Controller</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"nd\">@action_options</span><span class=\"o\">.</span><span class=\"n\">urlconf</span><span class=\"p\">([</span>\n            <span class=\"sa\">r</span><span class=\"s1\">'^bar/(?P&lt;year&gt;\\d</span><span class=\"si\">{4}</span><span class=\"s1\">)/$'</span><span class=\"p\">,</span>\n            <span class=\"sa\">r</span><span class=\"s1\">'^bar/(?P&lt;year&gt;\\d</span><span class=\"si\">{4}</span><span class=\"s1\">)/(?P&lt;month&gt;\\d\\d)/$'</span><span class=\"p\">,</span>\n            <span class=\"sa\">r</span><span class=\"s1\">'^foo/(?P&lt;year&gt;\\d</span><span class=\"si\">{4}</span><span class=\"s1\">)/(?P&lt;month&gt;\\d\\d)/(?P&lt;day&gt;\\d\\d)/$'</span>\n        <span class=\"p\">],</span>\n        <span class=\"n\">do_not_autogenerate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>The above will create the following url patterns:</p>\n<pre><code>/controller/bar/(?P&lt;year&gt;\\d{4})/\n/controller/bar/(?P&lt;year&gt;\\d{4})/(?P&lt;month&gt;\\d\\d)/$\n/controller/foo/(?P&lt;year&gt;\\d{4})/(?P&lt;month&gt;\\d\\d)/(?P&lt;day&gt;\\d\\d)/$\n</code></pre>\n<p>The <code>do_not_autogenerate</code> argument is <strong>true</strong> by default and will prevent any urls for this action\nfrom being autogenerated. If <code>do_not_autogenerate</code> were to be set to false in the example below,\nthe following url would also be created:</p>\n<pre><code>/controller/action/\n</code></pre>\n<p>This URL would not actually work since the <code>year</code> argument is required the <code>action</code> function.</p>\n<h2>Flash messages</h2>\n<p>The ActionController also has a <code>_flash</code> instance variable that allows you to send messages to the user that can survive a redirect. Simply use</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flash</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"Message\"</span><span class=\"p\">)</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_flash</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Error message\"</span><span class=\"p\">)</span>\n</pre>\n<p>The flash messages can be either messages or error messages. The flash object is automatically exported into the context and you can use it as such:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">flash.has_messages</span> <span class=\"cp\">%}</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">message</span> <span class=\"k\">in</span> <span class=\"nv\">flash.get_and_clear</span> <span class=\"cp\">%}</span>\n\n      <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">message.is_error</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">'icon-error'</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"</span><span class=\"cp\">{{</span><span class=\"nv\">message.type</span><span class=\"cp\">}}</span><span class=\"s\">\"</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span><span class=\"nv\">message</span><span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n      \n  <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"o\">}</span>\n</pre>\n<h2>Before and After each action</h2>\n<p>You can override <code>_before_filter</code> and/or <code>_after_filter</code> to perform certain actions and checks before or after an action. Read more in <code>ActionController</code> docs.</p>\n<p>These methods accept the \"request\" parameter which is an HTTP request object for this request.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AccountController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_before_filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">campaign_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"campaign_id\"</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_campaign</span> <span class=\"o\">=</span> <span class=\"n\">Campaign</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">campaign_id</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">Campaign</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_campaign</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<p>You can disable the before and after filters by decorating any action with the <code>@disable_filters</code> decorator.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators.action_options</span> <span class=\"kn\">import</span> <span class=\"n\">disable_filters</span>\n<span class=\"nd\">@disable_filters</span>\n<span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>One of the great features of django url framework is that you can require login for all actions in a controller by simply decorating the before_filter with a decorator to require logging in, see next section!</p>\n<h2>Authentication</h2>\n<p>To require login on an action use the <code>@login_required</code> decorator provided by django-url-framework. The decorator also works on <code>_before_filter</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n<span class=\"k\">class</span> <span class=\"nc\">AccountController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@login_required</span>\n    <span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>If the user isn\u2019t logged in, redirect to <code>settings.LOGIN_URL</code>, passing the current absolute path in the query string. Example: <code>/accounts/login/?next=/polls/3/</code>.\n<code>login_required()</code> also takes an optional <code>login_url</code> parameter. Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n<span class=\"k\">class</span> <span class=\"nc\">AccountController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@login_required</span><span class=\"p\">(</span><span class=\"n\">login_url</span><span class=\"o\">=</span><span class=\"s2\">\"/login/\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>By default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called \"next\". If you would prefer to use a different name for this parameter, <code>login_required()</code> takes an optional <code>redirect_field_name</code> parameter.</p>\n<p>Additionally you can use <code>@superuser_required</code>, <code>@permission_required(permission_instance)</code> and <code>@must_be_member_of_group(group_name=\"some_group\")</code>.</p>\n<p>Another example makes it easy to limiting access to a subset of data based on the logged in user for the whole controller.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n<span class=\"k\">class</span> <span class=\"nc\">ItemController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"nd\">@login_required</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_before_filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_items</span> <span class=\"o\">=</span> <span class=\"n\">Item</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_products</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">item__in</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_items</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"page_title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Item Page\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">def</span> <span class=\"nf\">item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_items</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"item\"</span><span class=\"p\">:</span><span class=\"n\">item</span><span class=\"p\">}</span>\n    <span class=\"k\">def</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_products</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"product\"</span><span class=\"p\">:</span><span class=\"n\">product</span><span class=\"p\">}</span>\n</pre>\n<h2>Only POST? (or GET or anything...)</h2>\n<p>You can limit what http methods a function can be called with.</p>\n<p>The example below limits the <code>update</code> action to only <strong>POST</strong> and <strong>DELETE</strong> http methods.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_url_framework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">http_methods</span>\n<span class=\"k\">class</span> <span class=\"nc\">Controller</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"nd\">@http_methods</span><span class=\"o\">.</span><span class=\"n\">POST</span>\n    <span class=\"nd\">@http_methods</span><span class=\"o\">.</span><span class=\"n\">DELETE</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p>By default all actions can be called with all http methods.</p>\n<h2>Custom template extensions</h2>\n<p>When using jade or something similar you can specify a custom extension for all templates in the controller.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FooController</span><span class=\"p\">(</span><span class=\"n\">ActionController</span><span class=\"p\">):</span>\n    <span class=\"c1\">#custom extension for all templates in this controller</span>\n    <span class=\"n\">template_extension</span> <span class=\"o\">=</span> <span class=\"s2\">\"jade\"</span>\n</pre>\n\n          </div>"}, "last_serial": 7129191, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "b7488718eed3979c79cb084d1ace8584", "sha256": "b0723c38403be82f9e446d017614e0a039c0a40be91a22b7580dfff1fdd2dda4"}, "downloads": -1, "filename": "django-url-framework-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b7488718eed3979c79cb084d1ace8584", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11034, "upload_time": "2013-12-13T19:08:12", "upload_time_iso_8601": "2013-12-13T19:08:12.477547Z", "url": "https://files.pythonhosted.org/packages/aa/c2/1f42aab0a353815c8eda02a99f1a3235dd6cb811fe921ca93b3aa9af2f80/django-url-framework-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "6440c9e8d9bc52e7ca429310152d7188", "sha256": "50715ae39aab27530511513d36db2da7aa57a5ac84c176c0962b23ec6aa3310c"}, "downloads": -1, "filename": "django-url-framework-0.2.3.tar.gz", "has_sig": false, "md5_digest": "6440c9e8d9bc52e7ca429310152d7188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11045, "upload_time": "2013-12-14T00:46:42", "upload_time_iso_8601": "2013-12-14T00:46:42.238658Z", "url": "https://files.pythonhosted.org/packages/10/8d/3bf2ab196a196ce925b149b081dd81ea94d11cc4160cba29fe0dc191627e/django-url-framework-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "1224eacf26b5c53af109430aa5ece1c6", "sha256": "b8db36130229f2fee2ef4849830fdf34e8b35863dd24f1bc06bed1a50db9b674"}, "downloads": -1, "filename": "django-url-framework-0.2.4.tar.gz", "has_sig": false, "md5_digest": "1224eacf26b5c53af109430aa5ece1c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11076, "upload_time": "2013-12-14T01:15:37", "upload_time_iso_8601": "2013-12-14T01:15:37.907867Z", "url": "https://files.pythonhosted.org/packages/44/40/3951c8979c568569a8a8164102bb4e74b8a444152a132eb8640cd57a4ee0/django-url-framework-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "6f152f9f31dba8af23188ea1ccc10ca6", "sha256": "b4a1f1c1d2f3c1c2cd1afdd7b4df4e580a768ca941b4f9562e44f293b6f76f3e"}, "downloads": -1, "filename": "django-url-framework-0.2.5.tar.gz", "has_sig": false, "md5_digest": "6f152f9f31dba8af23188ea1ccc10ca6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11074, "upload_time": "2013-12-14T05:30:46", "upload_time_iso_8601": "2013-12-14T05:30:46.913037Z", "url": "https://files.pythonhosted.org/packages/c6/26/7d4ab9dacdca9802033f8827d568c0d785dba54464406ec356295bdff398/django-url-framework-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "5905536aa8eb1d5f219413bf57803e27", "sha256": "d688498a2d03ba40bf73fed112e911018fe34ed0aad6faa3c65647103e543ac5"}, "downloads": -1, "filename": "django-url-framework-0.2.6.tar.gz", "has_sig": false, "md5_digest": "5905536aa8eb1d5f219413bf57803e27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11091, "upload_time": "2013-12-14T05:36:06", "upload_time_iso_8601": "2013-12-14T05:36:06.035810Z", "url": "https://files.pythonhosted.org/packages/93/fb/28e4c5d4c0da6e9bc3aae7111abc01244823e240c4d5c621cf2daeabbd8d/django-url-framework-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "0fafa73867d8ac05f58bfa4add27c766", "sha256": "0286534fd40316f02dd73b35c6587dc387877743dc47f9643220c3cd752d46a9"}, "downloads": -1, "filename": "django-url-framework-0.2.7.tar.gz", "has_sig": false, "md5_digest": "0fafa73867d8ac05f58bfa4add27c766", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11144, "upload_time": "2014-03-12T03:24:54", "upload_time_iso_8601": "2014-03-12T03:24:54.175515Z", "url": "https://files.pythonhosted.org/packages/b9/2c/e02f9a3ace1921c534361be37ede69685d3774cc7c636d92c84f96a3dfdb/django-url-framework-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "ca5e5411f82d85d546f682c45ed8d2e1", "sha256": "9b9bbaf1a68c5d44700a0afc473853f6a4f37195f67d74ccaf737ba1bc2e04b0"}, "downloads": -1, "filename": "django-url-framework-0.2.8.tar.gz", "has_sig": false, "md5_digest": "ca5e5411f82d85d546f682c45ed8d2e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11206, "upload_time": "2014-03-13T03:10:01", "upload_time_iso_8601": "2014-03-13T03:10:01.247218Z", "url": "https://files.pythonhosted.org/packages/8a/de/e5bfbdd0ce35d0932bf84b801e6bd9d98a00d3cfe33d22eb3c43e11ead3d/django-url-framework-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "bfd235c488d0185c6a23f8747abca689", "sha256": "53e4c300f7ff9ec0dd74578912caa54d49a9e79fb8e6e02865fb38735a51d1eb"}, "downloads": -1, "filename": "django-url-framework-0.2.9.tar.gz", "has_sig": false, "md5_digest": "bfd235c488d0185c6a23f8747abca689", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10310, "upload_time": "2015-03-30T14:22:53", "upload_time_iso_8601": "2015-03-30T14:22:53.318431Z", "url": "https://files.pythonhosted.org/packages/de/6a/036d92fb104c85b1bde80bdc6a9446a08d7ab5165aaaa690474d0c308a04/django-url-framework-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5798dbb79a088800fb59276bb962650f", "sha256": "216c0b4942bc1b50a25f6461c6503dced19de7daac1394ccba4c4ad229861007"}, "downloads": -1, "filename": "django-url-framework-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5798dbb79a088800fb59276bb962650f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9380, "upload_time": "2015-04-10T01:30:39", "upload_time_iso_8601": "2015-04-10T01:30:39.854879Z", "url": "https://files.pythonhosted.org/packages/f5/6f/5f12283b93e714b0eee37f47ba8111e7d8070ac8d076227dc9b32dbfbd2a/django-url-framework-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "bdb0217676b4badd870a7e5d0910a74b", "sha256": "99de1caa588e293a0fd32b46fa7b38b96e1253ab00741805e6321a08932bf0b3"}, "downloads": -1, "filename": "django-url-framework-0.3.1.tar.gz", "has_sig": false, "md5_digest": "bdb0217676b4badd870a7e5d0910a74b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12469, "upload_time": "2015-04-12T20:21:44", "upload_time_iso_8601": "2015-04-12T20:21:44.954087Z", "url": "https://files.pythonhosted.org/packages/ad/d9/da3b1677586aecb88a3d35d984c4a4bbc56af733065c3901c374ab7c2ac2/django-url-framework-0.3.1.tar.gz", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "069ac119ee631c5c1bcd8dd7d5469132", "sha256": "bfed383c1c56e354c1ec804b7b474408a79f4c0be481ac1807425038dd0094cb"}, "downloads": -1, "filename": "django-url-framework-0.3.10.tar.gz", "has_sig": false, "md5_digest": "069ac119ee631c5c1bcd8dd7d5469132", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16527, "upload_time": "2016-03-02T14:51:51", "upload_time_iso_8601": "2016-03-02T14:51:51.495039Z", "url": "https://files.pythonhosted.org/packages/af/5d/83db6c6bf1a266fe7471955ffb1cad6240635acfdc16e252c55e8b4e00a1/django-url-framework-0.3.10.tar.gz", "yanked": false}], "0.3.11": [{"comment_text": "", "digests": {"md5": "5082c66151ce6214c1453f125bd85873", "sha256": "e9dbb46bc0bb478767ba6fd7b47f4ffcbf11e064b2b002d8288d10fce3786d45"}, "downloads": -1, "filename": "django-url-framework-0.3.11.tar.gz", "has_sig": false, "md5_digest": "5082c66151ce6214c1453f125bd85873", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16651, "upload_time": "2017-02-23T02:33:34", "upload_time_iso_8601": "2017-02-23T02:33:34.047093Z", "url": "https://files.pythonhosted.org/packages/b9/d7/2405b964b44484758fdba1d33a87817b186e82a30f97605d85e9999e2216/django-url-framework-0.3.11.tar.gz", "yanked": false}], "0.3.12": [{"comment_text": "", "digests": {"md5": "a39f3c400d8755248bce60662e75865d", "sha256": "a9b04d99c2e3bd3e0ed6a5c191a6aa29f229b7816c1bc00b3a608f10059b7ba1"}, "downloads": -1, "filename": "django-url-framework-0.3.12.tar.gz", "has_sig": false, "md5_digest": "a39f3c400d8755248bce60662e75865d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17067, "upload_time": "2018-03-04T16:58:31", "upload_time_iso_8601": "2018-03-04T16:58:31.584266Z", "url": "https://files.pythonhosted.org/packages/86/77/054bd72553b47e9b7775e68de2a0ba4999d9b9613073119aefe807e178b7/django-url-framework-0.3.12.tar.gz", "yanked": false}], "0.3.13": [{"comment_text": "", "digests": {"md5": "15d2e0fa012c4c6dc161502226c99833", "sha256": "ee87fa5857efb1e1e0773f392762a90ad1c922eff6d621fd0b728334d59af0c5"}, "downloads": -1, "filename": "django-url-framework-0.3.13.tar.gz", "has_sig": false, "md5_digest": "15d2e0fa012c4c6dc161502226c99833", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17055, "upload_time": "2018-03-30T13:28:22", "upload_time_iso_8601": "2018-03-30T13:28:22.311105Z", "url": "https://files.pythonhosted.org/packages/d2/bd/5f6ec85cddbe362fa85d2016b75515862e955d551aff2705d24fcae2f7bc/django-url-framework-0.3.13.tar.gz", "yanked": false}], "0.3.14": [{"comment_text": "", "digests": {"md5": "3c84d1a6f0ea2702c5b3dfe50ac670fc", "sha256": "ad46e36149df1e4b47b63e0192023589bbc182f231104e7f2e74468f176b968a"}, "downloads": -1, "filename": "django-url-framework-0.3.14.tar.gz", "has_sig": false, "md5_digest": "3c84d1a6f0ea2702c5b3dfe50ac670fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17159, "upload_time": "2018-09-17T04:05:09", "upload_time_iso_8601": "2018-09-17T04:05:09.098101Z", "url": "https://files.pythonhosted.org/packages/6b/2b/312ce963b275a72b078ccc9ecc1f3fe84ac097919fefa58dc8cfe265a733/django-url-framework-0.3.14.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "be6453d112cf96cfc4a7d702b3bdd58e", "sha256": "d2b747bcff6a9619ef409847904dd23811b4962d22c7aeafc24ffe1ef7c09d8f"}, "downloads": -1, "filename": "django-url-framework-0.3.2.tar.gz", "has_sig": false, "md5_digest": "be6453d112cf96cfc4a7d702b3bdd58e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11987, "upload_time": "2015-04-12T20:30:37", "upload_time_iso_8601": "2015-04-12T20:30:37.823252Z", "url": "https://files.pythonhosted.org/packages/1a/88/10464d43024774a4fc55838fa36b0bc0f303f6566c1b786997dd117a9c2a/django-url-framework-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "c52de683f1904f2bdb641e67e3e869f2", "sha256": "fd36e024adb0a2a4ce297411913e8e14983b53a0ace76aa241e5d63d768de577"}, "downloads": -1, "filename": "django-url-framework-0.3.3.tar.gz", "has_sig": false, "md5_digest": "c52de683f1904f2bdb641e67e3e869f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12106, "upload_time": "2015-06-06T18:52:58", "upload_time_iso_8601": "2015-06-06T18:52:58.357692Z", "url": "https://files.pythonhosted.org/packages/02/22/6fbbab0abf9badab03cb3612f2444c3d2d30aa5d1f1f5d07dee7d3d00c61/django-url-framework-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "4202151026529350e030be0d7488811f", "sha256": "1593713ee15d4b064249ef0f47ea30f97d9341eed182f0c0dd3f2a0694756589"}, "downloads": -1, "filename": "django-url-framework-0.3.4.tar.gz", "has_sig": false, "md5_digest": "4202151026529350e030be0d7488811f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12113, "upload_time": "2015-08-10T09:32:15", "upload_time_iso_8601": "2015-08-10T09:32:15.053895Z", "url": "https://files.pythonhosted.org/packages/d2/17/d86c317de4c19ffd4008c0bb12ffc88a788031b156c7501a440de9eac81a/django-url-framework-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "1e200d410057ee7cf8154cd76e5fd5bd", "sha256": "4380ed1be6afc4ad9413e8d205d69d827dfa6210ecb1ea1539f311dec593b8b8"}, "downloads": -1, "filename": "django-url-framework-0.3.5.tar.gz", "has_sig": false, "md5_digest": "1e200d410057ee7cf8154cd76e5fd5bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12110, "upload_time": "2015-08-19T17:35:45", "upload_time_iso_8601": "2015-08-19T17:35:45.892269Z", "url": "https://files.pythonhosted.org/packages/85/62/c53b773bf722cf68b7ef3b2596f5cacc2ec2e6fd9711668bfb3c615b6217/django-url-framework-0.3.5.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "87c1971944cdc1dd1f5d418a4b14f966", "sha256": "f47dcf8520bab9efcc0eaf2db501f04d5ad5792a8765ba410113f2997dd1f6ad"}, "downloads": -1, "filename": "django-url-framework-0.3.7.tar.gz", "has_sig": false, "md5_digest": "87c1971944cdc1dd1f5d418a4b14f966", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12160, "upload_time": "2015-12-30T12:41:46", "upload_time_iso_8601": "2015-12-30T12:41:46.440382Z", "url": "https://files.pythonhosted.org/packages/03/38/9a1f4ddcd7be55143a991d0e2de80e1c4abdf409c87ab426ab4e1eb98312/django-url-framework-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "3d43b40632ed078c1e1361586e001e6f", "sha256": "c025362cc2a7a45acdaade040b4905ca1f539e5118c66f67a1cb748c28ae166b"}, "downloads": -1, "filename": "django-url-framework-0.3.8.tar.gz", "has_sig": false, "md5_digest": "3d43b40632ed078c1e1361586e001e6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16498, "upload_time": "2016-01-28T02:52:16", "upload_time_iso_8601": "2016-01-28T02:52:16.309865Z", "url": "https://files.pythonhosted.org/packages/f7/9d/febb601c2d6c3ac468ecd8e06c761ed6c2cba51309bf31e7c408d3dfa7f0/django-url-framework-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "ef49dff3e2ff1f001d86ab0fb05e54bd", "sha256": "eaa6aacffce361a48bd0dfbaebf65d8ece2ea9e20240db3e5666e778ee80ea18"}, "downloads": -1, "filename": "django-url-framework-0.3.9.tar.gz", "has_sig": false, "md5_digest": "ef49dff3e2ff1f001d86ab0fb05e54bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16491, "upload_time": "2016-01-28T02:55:15", "upload_time_iso_8601": "2016-01-28T02:55:15.155987Z", "url": "https://files.pythonhosted.org/packages/f8/bf/4d6af8754d81ff2836e5db20adaee53d95e6bc36450853ddbda832e1949d/django-url-framework-0.3.9.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "86611d393cf638dd5676fc478e26ff12", "sha256": "a5ed8a2b7fa424adb83d8203636042a60d226530e6e8367b6843a153bb34c66a"}, "downloads": -1, "filename": "django-url-framework-0.4.0.tar.gz", "has_sig": false, "md5_digest": "86611d393cf638dd5676fc478e26ff12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17585, "upload_time": "2019-07-22T19:11:25", "upload_time_iso_8601": "2019-07-22T19:11:25.873829Z", "url": "https://files.pythonhosted.org/packages/6c/bb/695d3496bbc57b45461b3bb5cb8eac6933d8cb51b30db404db0b80703c54/django-url-framework-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "5b87875fae94ea151ef65c372acab5c2", "sha256": "3db5849d93c81e8623e5f70641c885dacd85e6165c8ba3b956bcfe0f0213b5fd"}, "downloads": -1, "filename": "django-url-framework-0.4.1.tar.gz", "has_sig": false, "md5_digest": "5b87875fae94ea151ef65c372acab5c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17562, "upload_time": "2020-01-12T10:35:53", "upload_time_iso_8601": "2020-01-12T10:35:53.509988Z", "url": "https://files.pythonhosted.org/packages/30/4f/1a20328fe0b1eea8ced7c9ab0f8e2fdab402c83be5e667f2fdcfca691000/django-url-framework-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "2ac4a8feeedec7610fd1efb7033c7f4a", "sha256": "ffbf92d8f0853c0ef084a3370eb2971ddfd2a1f43cde43538d5dc47f0a662a58"}, "downloads": -1, "filename": "django-url-framework-0.4.2.tar.gz", "has_sig": true, "md5_digest": "2ac4a8feeedec7610fd1efb7033c7f4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22011, "upload_time": "2020-01-12T10:47:50", "upload_time_iso_8601": "2020-01-12T10:47:50.498569Z", "url": "https://files.pythonhosted.org/packages/2e/c9/4c41d31b2e97c6519958e2ca1f2885a87263dcacd799677c4f70f7853824/django-url-framework-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "5cb95ddf5eadce2262a9db4bc364b01a", "sha256": "8a381297baf1c28d9da490f90e5ca4c6696dfa8d07dc7078517a5f7d1a3869de"}, "downloads": -1, "filename": "django-url-framework-0.4.3.tar.gz", "has_sig": true, "md5_digest": "5cb95ddf5eadce2262a9db4bc364b01a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21971, "upload_time": "2020-01-12T10:52:11", "upload_time_iso_8601": "2020-01-12T10:52:11.997652Z", "url": "https://files.pythonhosted.org/packages/9e/cc/6d2fff812bb13ce8caf266d5ce543e79de144ea3383b900d33b4f16415f0/django-url-framework-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "38fe64236f1c0fa6c2f1e487a3688eee", "sha256": "ce0153d1dbce25263df9297445945073bfe2dc7b9892e3dc2bdd6c439d0ab77f"}, "downloads": -1, "filename": "django-url-framework-0.4.4.tar.gz", "has_sig": true, "md5_digest": "38fe64236f1c0fa6c2f1e487a3688eee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21970, "upload_time": "2020-02-18T10:34:18", "upload_time_iso_8601": "2020-02-18T10:34:18.903498Z", "url": "https://files.pythonhosted.org/packages/5f/6e/a77159e02c0c5063c1ba5ee1583f18a8d60ca9b5b29bdb048c0544711127/django-url-framework-0.4.4.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "a0f29b80e4a62cc81fc4f2610d4b159b", "sha256": "8115d8771828b69d85d5deeb0c2f6006a4a4578c7a5e69da97528b95687ce8e2"}, "downloads": -1, "filename": "django-url-framework-0.5.2.tar.gz", "has_sig": true, "md5_digest": "a0f29b80e4a62cc81fc4f2610d4b159b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34684, "upload_time": "2020-04-29T14:07:47", "upload_time_iso_8601": "2020-04-29T14:07:47.950344Z", "url": "https://files.pythonhosted.org/packages/93/93/58781a271d8a3353ab8af9309f2041d6be26ec0e2deece7603876ee4f1ce/django-url-framework-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0f29b80e4a62cc81fc4f2610d4b159b", "sha256": "8115d8771828b69d85d5deeb0c2f6006a4a4578c7a5e69da97528b95687ce8e2"}, "downloads": -1, "filename": "django-url-framework-0.5.2.tar.gz", "has_sig": true, "md5_digest": "a0f29b80e4a62cc81fc4f2610d4b159b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34684, "upload_time": "2020-04-29T14:07:47", "upload_time_iso_8601": "2020-04-29T14:07:47.950344Z", "url": "https://files.pythonhosted.org/packages/93/93/58781a271d8a3353ab8af9309f2041d6be26ec0e2deece7603876ee4f1ce/django-url-framework-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:12 2020"}