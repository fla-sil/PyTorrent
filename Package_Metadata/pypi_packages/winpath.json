{"info": {"author": "Alberto J. Marin", "author_email": "alberto@ajmar.in", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System", "Topic :: System :: Filesystems", "Typing :: Typed"], "description": "# WinPath\n[![PyPi](https://img.shields.io/pypi/v/winpath.svg)](https://pypi.python.org/pypi/winpath)\n[![Build status](https://codecov.io/gh/git-albertomarin/winpath/branch/master/graph/badge.svg)](https://codecov.io/gh/git-albertomarin/winpath)\n[![Coverage](https://ci.appveyor.com/api/projects/status/foncpfby5exty5e9?svg=true)](https://ci.appveyor.com/project/git-albertomarin/winpath)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](https://en.wikipedia.org/wiki/MIT_License)\n\nWinPath is a python module for retrieving common Windows system paths as Unicode strings.\nIt is especially useful in cases where the default path to a system file has been changed by the user.\ni.e When a user has changed the default path to their Documents folder.\n\nWinPath is a fork of the original [`WinPaths`](http://ginstrom.com/code/winpaths.html)\nmodule by Ryan Ginstrom. It includes bug fixes for issues present in the\n[`WinPaths`](http://ginstrom.com/code/winpaths.html)\nmodule and allows its inclusion in platform agnostic projects.\n\n# Installing\n\nInstall and update using pip:\n\n```bash\npip install -U winpath\n```\n\n# A Simple Example\n\nWinPath can be imported and used within your own project like so.\n\nThe following example assumes that the user has chosen to sync their Documents directory with Onedrive.\n\n```python\nimport sys\nimport winpath\n\nif sys.platform == \"win32\": # WinPath will only work on Windows\n    my_documents = winpath.get_my_documents()\n    print(my_documents) # C:\\\\Users\\\\username\\\\Onedrive\\\\Documents\n```\n\n# Available Functions\n\n   * `get_local_appdata`: Path to `%LOCALAPPDATA%`\n\n   * `get_appdata`: Path to `%APPDATA%`\n\n   * `get_desktop`: Path to the logged in user's desktop folder\n\n   * `get_programs`: current user -> Start menu -> Programs\n\n   * `get_admin_tools`: current user -> Start menu -> Programs -> Admin tools\n\n   * `get_common_admin_tools`: all users -> Start menu -> Programs -> Admin tools\n\n   * `get_common_appdata`: Path to program data folder\n\n   * `get_common_documents`: Path to public documents folder\n\n   * `get_cookies`: Path to internet explorer cookies folder\n\n   * `get_history`: Path to internet explorer history folder\n\n   * `get_internet_cache`: Path to internet explorer cache folder\n\n   * `get_my_pictures`: Path to the logged in user's pictures folder\n\n   * `get_my_documents`: Path to the logged in user's documents folder\n\n   * `get_program_files`: Path to Windows program files folder\n\n   * `get_program_files_common`: Path to Windows' program files -> common files folder\n\n   * `get_system`: Path to Windows' System32 folder\n\n   * `get_windows`: Path to Windows folder\n\n   * `get_favorites`: Path to the logged in user's favorites folder\n\n   * `get_startup`: current user -> start menu -> programs -> startup\n\n   * `get_recent`: Path to the logged in user's recently used files folder\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/git-albertomarin/winpath", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "winpath", "package_url": "https://pypi.org/project/winpath/", "platform": "", "project_url": "https://pypi.org/project/winpath/", "project_urls": {"Documentation": "https://github.com/git-albertomarin/winpath", "Homepage": "https://github.com/git-albertomarin/winpath"}, "release_url": "https://pypi.org/project/winpath/202002.2/", "requires_dist": ["tox ; extra == \"dev\"", "pycalver ; extra == \"dev\"", "flake8 ; extra == \"dev\"", "black ; extra == \"dev\"", "twine ; extra == \"dev\"", "wheel ; extra == \"dev\"", "pre-commit ; extra == \"dev\"", "mkdocs ; extra == \"doc\"", "mkdocs-material ; extra == \"doc\"", "markdown-include ; extra == \"doc\"", "pytest >=4.0.0 ; extra == \"test\"", "pytest-cov ; extra == \"test\"", "mypy ; extra == \"test\"", "codecov ; extra == \"test\"", "black ; extra == \"test\""], "requires_python": ">=3.0", "summary": "Retrieves common Windows folders as Unicode strings", "version": "202002.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WinPath</h1>\n<p><a href=\"https://pypi.python.org/pypi/winpath\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ff7cc4a5472a36557a5f3e7625514e25a9a9984/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f77696e706174682e737667\"></a>\n<a href=\"https://codecov.io/gh/git-albertomarin/winpath\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db8840687981170785ae9b2da90af9869fd601de/68747470733a2f2f636f6465636f762e696f2f67682f6769742d616c626572746f6d6172696e2f77696e706174682f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://ci.appveyor.com/project/git-albertomarin/winpath\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9fb3e9e628c20b317873d1aa870301b9de31a40d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f666f6e637066627935657874793565393f7376673d74727565\"></a>\n<a href=\"https://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d01dca179e5892f8f0e2e136225f10faa1ca41f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>WinPath is a python module for retrieving common Windows system paths as Unicode strings.\nIt is especially useful in cases where the default path to a system file has been changed by the user.\ni.e When a user has changed the default path to their Documents folder.</p>\n<p>WinPath is a fork of the original <a href=\"http://ginstrom.com/code/winpaths.html\" rel=\"nofollow\"><code>WinPaths</code></a>\nmodule by Ryan Ginstrom. It includes bug fixes for issues present in the\n<a href=\"http://ginstrom.com/code/winpaths.html\" rel=\"nofollow\"><code>WinPaths</code></a>\nmodule and allows its inclusion in platform agnostic projects.</p>\n<h1>Installing</h1>\n<p>Install and update using pip:</p>\n<pre>pip install -U winpath\n</pre>\n<h1>A Simple Example</h1>\n<p>WinPath can be imported and used within your own project like so.</p>\n<p>The following example assumes that the user has chosen to sync their Documents directory with Onedrive.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">winpath</span>\n\n<span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">platform</span> <span class=\"o\">==</span> <span class=\"s2\">\"win32\"</span><span class=\"p\">:</span> <span class=\"c1\"># WinPath will only work on Windows</span>\n    <span class=\"n\">my_documents</span> <span class=\"o\">=</span> <span class=\"n\">winpath</span><span class=\"o\">.</span><span class=\"n\">get_my_documents</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_documents</span><span class=\"p\">)</span> <span class=\"c1\"># C:\\\\Users\\\\username\\\\Onedrive\\\\Documents</span>\n</pre>\n<h1>Available Functions</h1>\n<ul>\n<li>\n<p><code>get_local_appdata</code>: Path to <code>%LOCALAPPDATA%</code></p>\n</li>\n<li>\n<p><code>get_appdata</code>: Path to <code>%APPDATA%</code></p>\n</li>\n<li>\n<p><code>get_desktop</code>: Path to the logged in user's desktop folder</p>\n</li>\n<li>\n<p><code>get_programs</code>: current user -&gt; Start menu -&gt; Programs</p>\n</li>\n<li>\n<p><code>get_admin_tools</code>: current user -&gt; Start menu -&gt; Programs -&gt; Admin tools</p>\n</li>\n<li>\n<p><code>get_common_admin_tools</code>: all users -&gt; Start menu -&gt; Programs -&gt; Admin tools</p>\n</li>\n<li>\n<p><code>get_common_appdata</code>: Path to program data folder</p>\n</li>\n<li>\n<p><code>get_common_documents</code>: Path to public documents folder</p>\n</li>\n<li>\n<p><code>get_cookies</code>: Path to internet explorer cookies folder</p>\n</li>\n<li>\n<p><code>get_history</code>: Path to internet explorer history folder</p>\n</li>\n<li>\n<p><code>get_internet_cache</code>: Path to internet explorer cache folder</p>\n</li>\n<li>\n<p><code>get_my_pictures</code>: Path to the logged in user's pictures folder</p>\n</li>\n<li>\n<p><code>get_my_documents</code>: Path to the logged in user's documents folder</p>\n</li>\n<li>\n<p><code>get_program_files</code>: Path to Windows program files folder</p>\n</li>\n<li>\n<p><code>get_program_files_common</code>: Path to Windows' program files -&gt; common files folder</p>\n</li>\n<li>\n<p><code>get_system</code>: Path to Windows' System32 folder</p>\n</li>\n<li>\n<p><code>get_windows</code>: Path to Windows folder</p>\n</li>\n<li>\n<p><code>get_favorites</code>: Path to the logged in user's favorites folder</p>\n</li>\n<li>\n<p><code>get_startup</code>: current user -&gt; start menu -&gt; programs -&gt; startup</p>\n</li>\n<li>\n<p><code>get_recent</code>: Path to the logged in user's recently used files folder</p>\n</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the terms of the MIT license.</p>\n\n          </div>"}, "last_serial": 6560286, "releases": {"202002.1b0": [{"comment_text": "", "digests": {"md5": "aed2a8044ffa979231f42820356380f7", "sha256": "ffa0045aa88e5135daf56db04e405c53721a56696903376307e1e4d5dd49d406"}, "downloads": -1, "filename": "winpath-202002.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "aed2a8044ffa979231f42820356380f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 4152, "upload_time": "2020-02-02T08:30:34", "upload_time_iso_8601": "2020-02-02T08:30:34.886254Z", "url": "https://files.pythonhosted.org/packages/ad/ab/2b393b436490edf83ea2909be2b154dbd7799369b380ce531500c31d1090/winpath-202002.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f705222cd47c3f2d459cb1b62918be08", "sha256": "c99b700331c44bd9328e13ef922526d26d2e62f18973fa5ae322f834e2440d55"}, "downloads": -1, "filename": "winpath-202002.1b0.tar.gz", "has_sig": false, "md5_digest": "f705222cd47c3f2d459cb1b62918be08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 7579, "upload_time": "2020-02-02T08:30:43", "upload_time_iso_8601": "2020-02-02T08:30:43.746269Z", "url": "https://files.pythonhosted.org/packages/d5/9a/e7c7231d036c1a3d27ed047d538817ab2c72e8c86208f5d1454e665df9fa/winpath-202002.1b0.tar.gz", "yanked": false}], "202002.2": [{"comment_text": "", "digests": {"md5": "9568b63999026665aaf22222f2bb963d", "sha256": "4caded0a0c3304e54cf44b8a6a8e3d912c44e714634cda49a9432effe1608619"}, "downloads": -1, "filename": "winpath-202002.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9568b63999026665aaf22222f2bb963d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 5138, "upload_time": "2020-02-02T23:51:31", "upload_time_iso_8601": "2020-02-02T23:51:31.029234Z", "url": "https://files.pythonhosted.org/packages/e0/bb/58a5a1f2451bb204bc888d98868001882aede49c45e0fed8dc03f56fb163/winpath-202002.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79253ed9d9bcea33016b196d8201604d", "sha256": "49e588c47b0278083d42b8e50c8cec47810d26388fc6ea1ae1808d3589ce7c65"}, "downloads": -1, "filename": "winpath-202002.2.tar.gz", "has_sig": false, "md5_digest": "79253ed9d9bcea33016b196d8201604d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 8453, "upload_time": "2020-02-02T23:51:36", "upload_time_iso_8601": "2020-02-02T23:51:36.004660Z", "url": "https://files.pythonhosted.org/packages/1d/82/31716790b08e1ad201efb7a6a7dcd6d9f840a2dcc6e631a77afcd090d520/winpath-202002.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9568b63999026665aaf22222f2bb963d", "sha256": "4caded0a0c3304e54cf44b8a6a8e3d912c44e714634cda49a9432effe1608619"}, "downloads": -1, "filename": "winpath-202002.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9568b63999026665aaf22222f2bb963d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 5138, "upload_time": "2020-02-02T23:51:31", "upload_time_iso_8601": "2020-02-02T23:51:31.029234Z", "url": "https://files.pythonhosted.org/packages/e0/bb/58a5a1f2451bb204bc888d98868001882aede49c45e0fed8dc03f56fb163/winpath-202002.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79253ed9d9bcea33016b196d8201604d", "sha256": "49e588c47b0278083d42b8e50c8cec47810d26388fc6ea1ae1808d3589ce7c65"}, "downloads": -1, "filename": "winpath-202002.2.tar.gz", "has_sig": false, "md5_digest": "79253ed9d9bcea33016b196d8201604d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 8453, "upload_time": "2020-02-02T23:51:36", "upload_time_iso_8601": "2020-02-02T23:51:36.004660Z", "url": "https://files.pythonhosted.org/packages/1d/82/31716790b08e1ad201efb7a6a7dcd6d9f840a2dcc6e631a77afcd090d520/winpath-202002.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:53 2020"}