{"info": {"author": "Evgeny Drobotun", "author_email": "drobotun@xakep.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.7"], "description": "GOST cryptographic functions\n============================\n\n.. image:: https://img.shields.io/github/license/drobotun/virustotalapi3?style=flat\n    :target: http://doge.mit-license.org\n.. image:: https://img.shields.io/travis/drobotun/gostcrypto\n    :target: https://travis-ci.org/drobotun/gostcrypto\n.. image:: https://ci.appveyor.com/api/projects/status/3inl1huy5unq1q60?svg=true\n    :target: https://ci.appveyor.com/project/drobotun/gostcrypto\n.. image:: https://img.shields.io/coveralls/github/drobotun/gostcrypto\n    :target: https://coveralls.io/github/drobotun/gostcrypto\n.. image:: https://api.codacy.com/project/badge/Grade/774f6fd50f224286ac1e566d752bd9c6\n    :target: https://app.codacy.com/manual/drobotun/gostcrypto/dashboard\n.. image:: https://readthedocs.org/projects/gostcrypto/badge/?version=latest\n    :target: https://gostcrypto.readthedocs.io/en/latest/?badge=latest\n.. image:: https://img.shields.io/pypi/pyversions/gostcrypto.svg?logo=python&logoColor=FBE072\n    :target: https://pypi.org/project/gostcrypto/\n.. image:: https://img.shields.io/pypi/v/gostcrypto\n    :target: https://pypi.org/project/gostcrypto/\n.. image:: https://img.shields.io/pypi/format/gostcrypto\n    :target: https://pypi.org/project/gostcrypto/\n.. image:: https://zenodo.org/badge/253648045.svg\n    :target: https://zenodo.org/badge/latestdoi/253648045\n\nThe package implements various cryptographic functions defined in the State standards of the Russian Federation. It includes the following modules:\n\n- **gosthash**: The module implements functions for calculating hash amounts in accordance with GOST R 34.11-2012.\n- **gostcipher**: The module implements block encryption functions in accordance with GOST R 34.12-2015 and their use modes in accordance with GOST R 34.13-2015.\n- **gostsignature**: The module implements the functions of forming and verifying an electronic digital signature in accordance with GOST R 34.10-2012.\n- **gostrandom**: The module implements functions for generating pseudo-random sequences in accordance with R 1323565.1.006-2017.\n- **gosthmac**: The module implements the functions of calculating the HMAC message authentication code in accordance with R 50.1.113-2016.\n- **gostpbkdf**: The module implements the password-based key derivation function in accordance with R 50.1.111-2016.\n- **gostoid**: The module implements generating identifiers for cryptographic objects.\n\nInstallation\n\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: bash\n\n    $ pip install gostcrypto\n\nUsage gosthash module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nGetting a hash for a string\n---------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    hash_string = u'\u0421\u0435 \u0432\u0435\u0442\u0440\u0438, \u0421\u0442\u0440\u0438\u0431\u043e\u0436\u0438 \u0432\u043d\u0443\u0446\u0438, \u0432\u0435\u044e\u0442\u044a \u0441 \u043c\u043e\u0440\u044f \u0441\u0442\u0440\u0435\u043b\u0430\u043c\u0438 \u043d\u0430 \u0445\u0440\u0430\u0431\u0440\u044b\u044f \u043f\u043b\u044a\u043a\u044b \u0418\u0433\u043e\u0440\u0435\u0432\u044b'.encode('cp1251')\n    hash_obj = gostcrypto.gosthash.new('streebog256', data=hash_string))\n    hash_result = hash_obj.hexdigest()\n\nGetting a hash for a file\n-------------------------\n\nIn this case the 'buffer_size' value must be a multiple of the 'block_size' value.\n\n.. code-block:: python\n\n    import gostcrypto\n\n    file_path = 'hash_file.txt'\n    buffer_size = 128\n    hash_obj = gostcrypto.gosthash.new('streebog512')\n    with open(file_path, 'rb') as file:\n        buffer = file.read(buffer_size)\n        while len(buffer) > 0:\n            hash_obj.update(buffer)\n            buffer = file.read(buffer_size)\n    hash_result = hash_obj.hexdigest()\n\nGetting the name identifier of the hashing algorithm object\n-----------------------------------------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    hash_obj = gostcrypto.gosthash.new('streebog512')\n    oid_name = hash_obj.oid.name\n\nUsage gostcipher module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nString encryption in ECB mode\n-----------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray([\n        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n    ])\n\n    plain_text = bytearray([\n        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,\n        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a,\n        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00,\n        0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00, 0x11,\n    ])\n\n    cipher_obj = gostcrypto.gostcipher.new('kuznechik',\n                                            key,\n                                            gostcrypto.gostcipher.MODE_ECB,\n                                            pad_mode=gostcrypto.gostcipher.PAD_MODE_1)\n\n    cipher_text = cipher_obj.encrypt(plain_text)\n\nFile encryption in CTR mode\n---------------------------\n\nIn this case the 'buffer_size' value must be a multiple of the 'block_size' value.\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray([\n        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n    ])\n\n    init_vect = bytearray([\n        0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xce, 0xf0,\n    ])\n\n    plain_file_path = 'plain_file.txt'\n    cipher_file_path = 'cipher_file.txt'\n    cipher_obj = gostcrypto.gostcipher.new('kuznechik',\n                                            key,\n                                            gostcrypto.gostcipher.MODE_CTR,\n                                            init_vect=init_vect)\n\n    buffer_size = 128\n\n    plain_file = open(plain_file_path, 'rb')\n    cipher_file = open(cipher_file_path, 'wb')\n    buffer = plain_file.read(buffer_size)\n    while len(buffer) > 0:\n        cipher_data = cipher_obj.encrypt(buffer)\n        cipher_file.write(cipher_data)\n        buffer = plain_file.read(buffer_size))\n\nCalculating MAC of the file\n---------------------------\n\nIn this case the 'buffer_size' value must be a multiple of the 'block_size' value.\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray([\n        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n    ])\n\n    plain_file_path = 'plain_file.txt'\n    cipher_obj = gostcrypto.gostcipher.new('kuznechik',\n                                            key,\n                                            gostcrypto.gostcipher.MODE_MAC)\n\n    buffer_size = 128\n\n    plain_file = open(plain_file_path, 'rb')\n    buffer = plain_file.read(buffer_size)\n    while len(buffer) > 0:\n        cipher_obj.update(buffer)\n        buffer = plain_file.read(buffer_size)\n    mac_result = cipher_obj.digest(8)\n\nUsage gostsignature module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nSigning\n-------\n\n.. code-block :: python\n\n    import gostcrypto\n\n    private_key = bytearray.fromhex('7a929ade789bb9be10ed359dd39a72c11b60961f49397eee1d19ce9891ec3b28')\n    digest = bytearray.fromhex('2dfbc1b372d89a1188c09c52e0eec61fce52032ab1022e8e67ece6672b043ee5')\n\n    sign_obj = gostcrypto.gostsignature.new(gostcrypto.gostsignature.MODE_256,\n                                            gostcrypto.gostsignature.CURVES_R_1323565_1_024_2019['id-tc26-gost-3410-2012-256-paramSetB'])\n    \n    signature = sign_obj.sign(private_key, digest)\n\nVerify\n------\n\n.. code-block:: python\n\n    public_key = bytearray.fromhex('fd21c21ab0dc84c154f3d218e9040bee64fff48bdff814b232295b09d0df72e45026dec9ac4f07061a2a01d7a2307e0659239a82a95862df86041d1458e45049')\n    digest = bytearray.fromhex('2dfbc1b372d89a1188c09c52e0eec61fce52032ab1022e8e67ece6672b043ee5')\n    signature = bytearray.fromhex('4b6dd64fa33820e90b14f8f4e49ee92eb2660f9eeb4e1b313517b6ba173979656df13cd4bceaf606ed32d410f48f2a5c2596c146e8c2fa4455d08cf68fc2b2a7')\n\n    sign_obj = gostcrypto.gostsignature.new(gostcrypto.gostsignature.MODE_256,\n                                            gostcrypto.gostsignature.CURVES_R_1323565_1_024_2019['id-tc26-gost-3410-2012-256-paramSetB'])\n\n    if sign_obj.verify(public_key, digest, signature):\n        print('Signature is correct')\n    else:\n        print('Signature is not correct')\n\nGenerating a public key\n-----------------------\n\n.. code-block:: python\n\n    private_key = bytearray.fromhex('7a929ade789bb9be10ed359dd39a72c11b60961f49397eee1d19ce9891ec3b28')\n\n    sign_obj = gostcrypto.gostsignature.new(gostcrypto.gostsignature.MODE_256,\n                                            gostcrypto.gostsignature.CURVES_R_1323565_1_024_2019['id-tc26-gost-3410-2012-256-paramSetB'])\n\n    public_key = sign_obj.public_key_generate(private_key)\n\nGetting the identifier of the signature mode object name\n--------------------------------------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    sign_obj = gostcrypto.gostsignature.new(gostcrypto.gostsignature.MODE_256,\n        gostcrypto.gostsignature.CURVES_R_1323565_1_024_2019['id-tc26-gost-3410-2012-256-paramSetB'])\n    oid_name = sign_obj.oid.name\n\nUsage gostrandom module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n    import gostcrypto\n\n    rand_k = bytearray([\n        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,\n        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,\n        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n    ])\n\n    random_obj = gostcrypto.gostrandom.new(32,\n                                       rand_k=rand_k,\n                                       size_s=gostcrypto.gostrandom.SIZE_S_256)\n    random_result = random_obj.random()\n    random_obj.clear()\n\nUsage gosthmac module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nGetting a HMAC for a string\n---------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray.fromhex('000102030405060708090a0b0c0d0e0f1011121315161718191a1b1c1d1e1f')\n    data = bytearray.fromhex('0126bdb87800af214341456563780100')\n\n    hmac_obj = gostcrypto.gosthmac.new('HMAC_GOSTR3411_2012_256', key, data=data)\n    hmac_result = hmac_obj.digest()\n\nGetting a HMAC for a file\n-------------------------\n\nIn this case the 'buffer_size' value must be a multiple of the 'block_size' value.\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray.fromhex('000102030405060708090a0b0c0d0e0f1011121315161718191a1b1c1d1e1f')\n    data = bytearray.fromhex('0126bdb87800af214341456563780100')\n\n    hmac_obj = gostcrypto.gosthmac.new('HMAC_GOSTR3411_2012_256', key, data=data)\n    hmac_result = hmac_obj.digest()\n\nGetting the name identifier of the HMAC algorithm object\n--------------------------------------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray.fromhex('000102030405060708090a0b0c0d0e0f1011121315161718191a1b1c1d1e1f')\n    hmac_obj = gostcrypto.gosthmac.new('HMAC_GOSTR3411_2012_256', key)\n    oid_name = hmac_obj.oid.name\n\nUsage gostpbkdf module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n    import gostcrypto\n\n    password = b'password'\n    salt = b'salt'\n\n    pbkdf_obj = gostcrypto.gostpbkdf.new(password, salt=salt, counter=4096)\n    pbkdf_result = pbkdf_obj.derive(32)\n\nLicense\n\"\"\"\"\"\"\"\n\nMIT Copyright (c) 2020 Evgeny Drobotun\n\nDocumentation\n\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDocumentation for using this package: https://gostcrypto.readthedocs.io/\n\n\nRelease History\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. rubric:: 1.2.0 (07.05.2020)\n\n- Refactoring and code modification in module **gostcipher** to increase the performance of encryption algorithm 'kuznechik' (uses precomputation  values of the 'gf' function;  the performance of the encryption function has increased by an average of 5..10 times)\n- Refactoring and code modification in module **gosthash** to increase the performance of hasing (uses precomputation  values of the 'l, s and p-transformation',  function;  the performance of the encryption function has increased by an average of 2..7 times)\n- Added the **gostoid** module that implements generating cryptographic object IDs for the **gostcipher**, **gosthash**, **gosthmac** and **gostsignature** modules\n\n.. rubric:: 1.1.2 (02.05.2020)\n\n- Refactoring **gostcipher** module (changed the class hierarchy to remove code duplication)\n- Refactoring **gosthash** module (remove code duplication)\n- Fixed some minor bugs\n- Updated docstring in accordance with the Google Python Style Guide\n\n\n.. rubric:: 1.1.1 (20.04.2020)\n\n- Use ``**kvargs`` in the ``new`` function with default parameters (**gostrandom**, **gosthash**, **gosthmac**, **gostpbkdf**)\n- Add the ability to pass data to the ``new`` function from **gosthmac**\n- Fixed some minor bugs in the **gostrandom** module\n\n.. rubric:: 1.1.0 (15.04.2020)\n\n- Refactoring code **gostcipher** module (changed the class structure)\n- Each module has its own exception class added\n- In the ``new`` function of the **gostcipher** module for MAC mode, it is now possible to pass data for MAC calculation, followed by calling the ``digest`` method without first calling the ``update`` method\n- In the ``new`` function of the **gosthash** module, it is now possible to pass data for hash calculation, followed by calling the ``digest`` method without first calling the ``update`` method\n- Added new exceptions for various conflict situations\n- Fixed some minor bugs\n\n.. rubric:: 1.0.0 (08.04.2020)\n\n- First release of **'gostcrypto'**", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/drobotun/gostcrypto", "keywords": "cryptography", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gostcrypto", "package_url": "https://pypi.org/project/gostcrypto/", "platform": "", "project_url": "https://pypi.org/project/gostcrypto/", "project_urls": {"Homepage": "https://github.com/drobotun/gostcrypto"}, "release_url": "https://pypi.org/project/gostcrypto/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "GOST cryptographic functions", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://doge.mit-license.org\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/license/drobotun/virustotalapi3?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0f5d1266c82cd4f67f267633d1c4973fb7a3e26/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f64726f626f74756e2f7669727573746f74616c617069333f7374796c653d666c6174\"></a>\n<a href=\"https://travis-ci.org/drobotun/gostcrypto\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/drobotun/gostcrypto\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/25c8c77f89e9a1c2e77e9c59f458a63f6b86a0e5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f64726f626f74756e2f676f737463727970746f\"></a>\n<a href=\"https://ci.appveyor.com/project/drobotun/gostcrypto\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/3inl1huy5unq1q60?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66a5748bf8a82b00d2a1a80b355c0167d6a9d2b5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f33696e6c3168757935756e71317136303f7376673d74727565\"></a>\n<a href=\"https://coveralls.io/github/drobotun/gostcrypto\" rel=\"nofollow\"><img alt=\"https://img.shields.io/coveralls/github/drobotun/gostcrypto\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6bf7661a3a265670f4e371a890f72a394f6900f/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f64726f626f74756e2f676f737463727970746f\"></a>\n<a href=\"https://app.codacy.com/manual/drobotun/gostcrypto/dashboard\" rel=\"nofollow\"><img alt=\"https://api.codacy.com/project/badge/Grade/774f6fd50f224286ac1e566d752bd9c6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/647569d7e27f7b71468a69682ce61baf82968e91/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3737346636666435306632323432383661633165353636643735326264396336\"></a>\n<a href=\"https://gostcrypto.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/gostcrypto/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c1a31849ea583cc34b6a4de285898b9ee2894d7/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f676f737463727970746f2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/project/gostcrypto/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/gostcrypto.svg?logo=python&amp;logoColor=FBE072\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c702df00445a4f5edeef39d22cf29a8bd0979f9d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f676f737463727970746f2e7376673f6c6f676f3d707974686f6e266c6f676f436f6c6f723d464245303732\"></a>\n<a href=\"https://pypi.org/project/gostcrypto/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/gostcrypto\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8f21e2cfce2a0204fb44372af4a31c7f00d366d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f676f737463727970746f\"></a>\n<a href=\"https://pypi.org/project/gostcrypto/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/format/gostcrypto\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b9283c6ff3c066749b8aab57cd504c5de151514/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f676f737463727970746f\"></a>\n<a href=\"https://zenodo.org/badge/latestdoi/253648045\" rel=\"nofollow\"><img alt=\"https://zenodo.org/badge/253648045.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6053b1986a4f891dee78393fdf60fbc0f4cd66ec/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3235333634383034352e737667\"></a>\n<p>The package implements various cryptographic functions defined in the State standards of the Russian Federation. It includes the following modules:</p>\n<ul>\n<li><strong>gosthash</strong>: The module implements functions for calculating hash amounts in accordance with GOST R 34.11-2012.</li>\n<li><strong>gostcipher</strong>: The module implements block encryption functions in accordance with GOST R 34.12-2015 and their use modes in accordance with GOST R 34.13-2015.</li>\n<li><strong>gostsignature</strong>: The module implements the functions of forming and verifying an electronic digital signature in accordance with GOST R 34.10-2012.</li>\n<li><strong>gostrandom</strong>: The module implements functions for generating pseudo-random sequences in accordance with R 1323565.1.006-2017.</li>\n<li><strong>gosthmac</strong>: The module implements the functions of calculating the HMAC message authentication code in accordance with R 50.1.113-2016.</li>\n<li><strong>gostpbkdf</strong>: The module implements the password-based key derivation function in accordance with R 50.1.111-2016.</li>\n<li><strong>gostoid</strong>: The module implements generating identifiers for cryptographic objects.</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install gostcrypto\n</pre>\n</div>\n<div id=\"usage-gosthash-module\">\n<h2>Usage gosthash module</h2>\n<div id=\"getting-a-hash-for-a-string\">\n<h3>Getting a hash for a string</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">hash_string</span> <span class=\"o\">=</span> <span class=\"sa\">u</span><span class=\"s1\">'\u0421\u0435 \u0432\u0435\u0442\u0440\u0438, \u0421\u0442\u0440\u0438\u0431\u043e\u0436\u0438 \u0432\u043d\u0443\u0446\u0438, \u0432\u0435\u044e\u0442\u044a \u0441 \u043c\u043e\u0440\u044f \u0441\u0442\u0440\u0435\u043b\u0430\u043c\u0438 \u043d\u0430 \u0445\u0440\u0430\u0431\u0440\u044b\u044f \u043f\u043b\u044a\u043a\u044b \u0418\u0433\u043e\u0440\u0435\u0432\u044b'</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'cp1251'</span><span class=\"p\">)</span>\n<span class=\"n\">hash_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gosthash</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'streebog256'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">hash_string</span><span class=\"p\">))</span>\n<span class=\"n\">hash_result</span> <span class=\"o\">=</span> <span class=\"n\">hash_obj</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"getting-a-hash-for-a-file\">\n<h3>Getting a hash for a file</h3>\n<p>In this case the \u2018buffer_size\u2019 value must be a multiple of the \u2018block_size\u2019 value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"s1\">'hash_file.txt'</span>\n<span class=\"n\">buffer_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n<span class=\"n\">hash_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gosthash</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'streebog512'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">hash_obj</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n        <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"p\">)</span>\n<span class=\"n\">hash_result</span> <span class=\"o\">=</span> <span class=\"n\">hash_obj</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"getting-the-name-identifier-of-the-hashing-algorithm-object\">\n<h3>Getting the name identifier of the hashing algorithm object</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">hash_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gosthash</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'streebog512'</span><span class=\"p\">)</span>\n<span class=\"n\">oid_name</span> <span class=\"o\">=</span> <span class=\"n\">hash_obj</span><span class=\"o\">.</span><span class=\"n\">oid</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre>\n</div>\n</div>\n<div id=\"usage-gostcipher-module\">\n<h2>Usage gostcipher module</h2>\n<div id=\"string-encryption-in-ecb-mode\">\n<h3>String encryption in ECB mode</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span>\n    <span class=\"mh\">0x88</span><span class=\"p\">,</span> <span class=\"mh\">0x99</span><span class=\"p\">,</span> <span class=\"mh\">0xaa</span><span class=\"p\">,</span> <span class=\"mh\">0xbb</span><span class=\"p\">,</span> <span class=\"mh\">0xcc</span><span class=\"p\">,</span> <span class=\"mh\">0xdd</span><span class=\"p\">,</span> <span class=\"mh\">0xee</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"mh\">0x11</span><span class=\"p\">,</span> <span class=\"mh\">0x22</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x44</span><span class=\"p\">,</span> <span class=\"mh\">0x55</span><span class=\"p\">,</span> <span class=\"mh\">0x66</span><span class=\"p\">,</span> <span class=\"mh\">0x77</span><span class=\"p\">,</span>\n    <span class=\"mh\">0xfe</span><span class=\"p\">,</span> <span class=\"mh\">0xdc</span><span class=\"p\">,</span> <span class=\"mh\">0xba</span><span class=\"p\">,</span> <span class=\"mh\">0x98</span><span class=\"p\">,</span> <span class=\"mh\">0x76</span><span class=\"p\">,</span> <span class=\"mh\">0x54</span><span class=\"p\">,</span> <span class=\"mh\">0x32</span><span class=\"p\">,</span> <span class=\"mh\">0x10</span><span class=\"p\">,</span> <span class=\"mh\">0x01</span><span class=\"p\">,</span> <span class=\"mh\">0x23</span><span class=\"p\">,</span> <span class=\"mh\">0x45</span><span class=\"p\">,</span> <span class=\"mh\">0x67</span><span class=\"p\">,</span> <span class=\"mh\">0x89</span><span class=\"p\">,</span> <span class=\"mh\">0xab</span><span class=\"p\">,</span> <span class=\"mh\">0xcd</span><span class=\"p\">,</span> <span class=\"mh\">0xef</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">plain_text</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span>\n    <span class=\"mh\">0x11</span><span class=\"p\">,</span> <span class=\"mh\">0x22</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x44</span><span class=\"p\">,</span> <span class=\"mh\">0x55</span><span class=\"p\">,</span> <span class=\"mh\">0x66</span><span class=\"p\">,</span> <span class=\"mh\">0x77</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">,</span> <span class=\"mh\">0xee</span><span class=\"p\">,</span> <span class=\"mh\">0xdd</span><span class=\"p\">,</span> <span class=\"mh\">0xcc</span><span class=\"p\">,</span> <span class=\"mh\">0xbb</span><span class=\"p\">,</span> <span class=\"mh\">0xaa</span><span class=\"p\">,</span> <span class=\"mh\">0x99</span><span class=\"p\">,</span> <span class=\"mh\">0x88</span><span class=\"p\">,</span>\n    <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"mh\">0x11</span><span class=\"p\">,</span> <span class=\"mh\">0x22</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x44</span><span class=\"p\">,</span> <span class=\"mh\">0x55</span><span class=\"p\">,</span> <span class=\"mh\">0x66</span><span class=\"p\">,</span> <span class=\"mh\">0x77</span><span class=\"p\">,</span> <span class=\"mh\">0x88</span><span class=\"p\">,</span> <span class=\"mh\">0x99</span><span class=\"p\">,</span> <span class=\"mh\">0xaa</span><span class=\"p\">,</span> <span class=\"mh\">0xbb</span><span class=\"p\">,</span> <span class=\"mh\">0xcc</span><span class=\"p\">,</span> <span class=\"mh\">0xee</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">,</span> <span class=\"mh\">0x0a</span><span class=\"p\">,</span>\n    <span class=\"mh\">0x11</span><span class=\"p\">,</span> <span class=\"mh\">0x22</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x44</span><span class=\"p\">,</span> <span class=\"mh\">0x55</span><span class=\"p\">,</span> <span class=\"mh\">0x66</span><span class=\"p\">,</span> <span class=\"mh\">0x77</span><span class=\"p\">,</span> <span class=\"mh\">0x88</span><span class=\"p\">,</span> <span class=\"mh\">0x99</span><span class=\"p\">,</span> <span class=\"mh\">0xaa</span><span class=\"p\">,</span> <span class=\"mh\">0xbb</span><span class=\"p\">,</span> <span class=\"mh\">0xcc</span><span class=\"p\">,</span> <span class=\"mh\">0xee</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">,</span> <span class=\"mh\">0x0a</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span>\n    <span class=\"mh\">0x22</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x44</span><span class=\"p\">,</span> <span class=\"mh\">0x55</span><span class=\"p\">,</span> <span class=\"mh\">0x66</span><span class=\"p\">,</span> <span class=\"mh\">0x77</span><span class=\"p\">,</span> <span class=\"mh\">0x88</span><span class=\"p\">,</span> <span class=\"mh\">0x99</span><span class=\"p\">,</span> <span class=\"mh\">0xaa</span><span class=\"p\">,</span> <span class=\"mh\">0xbb</span><span class=\"p\">,</span> <span class=\"mh\">0xcc</span><span class=\"p\">,</span> <span class=\"mh\">0xee</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">,</span> <span class=\"mh\">0x0a</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"mh\">0x11</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">cipher_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostcipher</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'kuznechik'</span><span class=\"p\">,</span>\n                                        <span class=\"n\">key</span><span class=\"p\">,</span>\n                                        <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostcipher</span><span class=\"o\">.</span><span class=\"n\">MODE_ECB</span><span class=\"p\">,</span>\n                                        <span class=\"n\">pad_mode</span><span class=\"o\">=</span><span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostcipher</span><span class=\"o\">.</span><span class=\"n\">PAD_MODE_1</span><span class=\"p\">)</span>\n\n<span class=\"n\">cipher_text</span> <span class=\"o\">=</span> <span class=\"n\">cipher_obj</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">plain_text</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"file-encryption-in-ctr-mode\">\n<h3>File encryption in CTR mode</h3>\n<p>In this case the \u2018buffer_size\u2019 value must be a multiple of the \u2018block_size\u2019 value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span>\n    <span class=\"mh\">0x88</span><span class=\"p\">,</span> <span class=\"mh\">0x99</span><span class=\"p\">,</span> <span class=\"mh\">0xaa</span><span class=\"p\">,</span> <span class=\"mh\">0xbb</span><span class=\"p\">,</span> <span class=\"mh\">0xcc</span><span class=\"p\">,</span> <span class=\"mh\">0xdd</span><span class=\"p\">,</span> <span class=\"mh\">0xee</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"mh\">0x11</span><span class=\"p\">,</span> <span class=\"mh\">0x22</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x44</span><span class=\"p\">,</span> <span class=\"mh\">0x55</span><span class=\"p\">,</span> <span class=\"mh\">0x66</span><span class=\"p\">,</span> <span class=\"mh\">0x77</span><span class=\"p\">,</span>\n    <span class=\"mh\">0xfe</span><span class=\"p\">,</span> <span class=\"mh\">0xdc</span><span class=\"p\">,</span> <span class=\"mh\">0xba</span><span class=\"p\">,</span> <span class=\"mh\">0x98</span><span class=\"p\">,</span> <span class=\"mh\">0x76</span><span class=\"p\">,</span> <span class=\"mh\">0x54</span><span class=\"p\">,</span> <span class=\"mh\">0x32</span><span class=\"p\">,</span> <span class=\"mh\">0x10</span><span class=\"p\">,</span> <span class=\"mh\">0x01</span><span class=\"p\">,</span> <span class=\"mh\">0x23</span><span class=\"p\">,</span> <span class=\"mh\">0x45</span><span class=\"p\">,</span> <span class=\"mh\">0x67</span><span class=\"p\">,</span> <span class=\"mh\">0x89</span><span class=\"p\">,</span> <span class=\"mh\">0xab</span><span class=\"p\">,</span> <span class=\"mh\">0xcd</span><span class=\"p\">,</span> <span class=\"mh\">0xef</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">init_vect</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span>\n    <span class=\"mh\">0x12</span><span class=\"p\">,</span> <span class=\"mh\">0x34</span><span class=\"p\">,</span> <span class=\"mh\">0x56</span><span class=\"p\">,</span> <span class=\"mh\">0x78</span><span class=\"p\">,</span> <span class=\"mh\">0x90</span><span class=\"p\">,</span> <span class=\"mh\">0xab</span><span class=\"p\">,</span> <span class=\"mh\">0xce</span><span class=\"p\">,</span> <span class=\"mh\">0xf0</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">plain_file_path</span> <span class=\"o\">=</span> <span class=\"s1\">'plain_file.txt'</span>\n<span class=\"n\">cipher_file_path</span> <span class=\"o\">=</span> <span class=\"s1\">'cipher_file.txt'</span>\n<span class=\"n\">cipher_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostcipher</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'kuznechik'</span><span class=\"p\">,</span>\n                                        <span class=\"n\">key</span><span class=\"p\">,</span>\n                                        <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostcipher</span><span class=\"o\">.</span><span class=\"n\">MODE_CTR</span><span class=\"p\">,</span>\n                                        <span class=\"n\">init_vect</span><span class=\"o\">=</span><span class=\"n\">init_vect</span><span class=\"p\">)</span>\n\n<span class=\"n\">buffer_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n\n<span class=\"n\">plain_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">plain_file_path</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">cipher_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">cipher_file_path</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">plain_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">cipher_data</span> <span class=\"o\">=</span> <span class=\"n\">cipher_obj</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n    <span class=\"n\">cipher_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">cipher_data</span><span class=\"p\">)</span>\n    <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">plain_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"calculating-mac-of-the-file\">\n<h3>Calculating MAC of the file</h3>\n<p>In this case the \u2018buffer_size\u2019 value must be a multiple of the \u2018block_size\u2019 value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span>\n    <span class=\"mh\">0x88</span><span class=\"p\">,</span> <span class=\"mh\">0x99</span><span class=\"p\">,</span> <span class=\"mh\">0xaa</span><span class=\"p\">,</span> <span class=\"mh\">0xbb</span><span class=\"p\">,</span> <span class=\"mh\">0xcc</span><span class=\"p\">,</span> <span class=\"mh\">0xdd</span><span class=\"p\">,</span> <span class=\"mh\">0xee</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"mh\">0x11</span><span class=\"p\">,</span> <span class=\"mh\">0x22</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x44</span><span class=\"p\">,</span> <span class=\"mh\">0x55</span><span class=\"p\">,</span> <span class=\"mh\">0x66</span><span class=\"p\">,</span> <span class=\"mh\">0x77</span><span class=\"p\">,</span>\n    <span class=\"mh\">0xfe</span><span class=\"p\">,</span> <span class=\"mh\">0xdc</span><span class=\"p\">,</span> <span class=\"mh\">0xba</span><span class=\"p\">,</span> <span class=\"mh\">0x98</span><span class=\"p\">,</span> <span class=\"mh\">0x76</span><span class=\"p\">,</span> <span class=\"mh\">0x54</span><span class=\"p\">,</span> <span class=\"mh\">0x32</span><span class=\"p\">,</span> <span class=\"mh\">0x10</span><span class=\"p\">,</span> <span class=\"mh\">0x01</span><span class=\"p\">,</span> <span class=\"mh\">0x23</span><span class=\"p\">,</span> <span class=\"mh\">0x45</span><span class=\"p\">,</span> <span class=\"mh\">0x67</span><span class=\"p\">,</span> <span class=\"mh\">0x89</span><span class=\"p\">,</span> <span class=\"mh\">0xab</span><span class=\"p\">,</span> <span class=\"mh\">0xcd</span><span class=\"p\">,</span> <span class=\"mh\">0xef</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">plain_file_path</span> <span class=\"o\">=</span> <span class=\"s1\">'plain_file.txt'</span>\n<span class=\"n\">cipher_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostcipher</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'kuznechik'</span><span class=\"p\">,</span>\n                                        <span class=\"n\">key</span><span class=\"p\">,</span>\n                                        <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostcipher</span><span class=\"o\">.</span><span class=\"n\">MODE_MAC</span><span class=\"p\">)</span>\n\n<span class=\"n\">buffer_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n\n<span class=\"n\">plain_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">plain_file_path</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">plain_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">cipher_obj</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n    <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">plain_file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"p\">)</span>\n<span class=\"n\">mac_result</span> <span class=\"o\">=</span> <span class=\"n\">cipher_obj</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"usage-gostsignature-module\">\n<h2>Usage gostsignature module</h2>\n<div id=\"signing\">\n<h3>Signing</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'7a929ade789bb9be10ed359dd39a72c11b60961f49397eee1d19ce9891ec3b28'</span><span class=\"p\">)</span>\n<span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'2dfbc1b372d89a1188c09c52e0eec61fce52032ab1022e8e67ece6672b043ee5'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sign_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">MODE_256</span><span class=\"p\">,</span>\n                                        <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">CURVES_R_1323565_1_024_2019</span><span class=\"p\">[</span><span class=\"s1\">'id-tc26-gost-3410-2012-256-paramSetB'</span><span class=\"p\">])</span>\n\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">sign_obj</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"p\">,</span> <span class=\"n\">digest</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"verify\">\n<h3>Verify</h3>\n<pre><span class=\"n\">public_key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'fd21c21ab0dc84c154f3d218e9040bee64fff48bdff814b232295b09d0df72e45026dec9ac4f07061a2a01d7a2307e0659239a82a95862df86041d1458e45049'</span><span class=\"p\">)</span>\n<span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'2dfbc1b372d89a1188c09c52e0eec61fce52032ab1022e8e67ece6672b043ee5'</span><span class=\"p\">)</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'4b6dd64fa33820e90b14f8f4e49ee92eb2660f9eeb4e1b313517b6ba173979656df13cd4bceaf606ed32d410f48f2a5c2596c146e8c2fa4455d08cf68fc2b2a7'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sign_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">MODE_256</span><span class=\"p\">,</span>\n                                        <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">CURVES_R_1323565_1_024_2019</span><span class=\"p\">[</span><span class=\"s1\">'id-tc26-gost-3410-2012-256-paramSetB'</span><span class=\"p\">])</span>\n\n<span class=\"k\">if</span> <span class=\"n\">sign_obj</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">,</span> <span class=\"n\">digest</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Signature is correct'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Signature is not correct'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"generating-a-public-key\">\n<h3>Generating a public key</h3>\n<pre><span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'7a929ade789bb9be10ed359dd39a72c11b60961f49397eee1d19ce9891ec3b28'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sign_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">MODE_256</span><span class=\"p\">,</span>\n                                        <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">CURVES_R_1323565_1_024_2019</span><span class=\"p\">[</span><span class=\"s1\">'id-tc26-gost-3410-2012-256-paramSetB'</span><span class=\"p\">])</span>\n\n<span class=\"n\">public_key</span> <span class=\"o\">=</span> <span class=\"n\">sign_obj</span><span class=\"o\">.</span><span class=\"n\">public_key_generate</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"getting-the-identifier-of-the-signature-mode-object-name\">\n<h3>Getting the identifier of the signature mode object name</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">sign_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">MODE_256</span><span class=\"p\">,</span>\n    <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostsignature</span><span class=\"o\">.</span><span class=\"n\">CURVES_R_1323565_1_024_2019</span><span class=\"p\">[</span><span class=\"s1\">'id-tc26-gost-3410-2012-256-paramSetB'</span><span class=\"p\">])</span>\n<span class=\"n\">oid_name</span> <span class=\"o\">=</span> <span class=\"n\">sign_obj</span><span class=\"o\">.</span><span class=\"n\">oid</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre>\n</div>\n</div>\n<div id=\"usage-gostrandom-module\">\n<h2>Usage gostrandom module</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">rand_k</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span>\n    <span class=\"mh\">0x88</span><span class=\"p\">,</span> <span class=\"mh\">0x99</span><span class=\"p\">,</span> <span class=\"mh\">0xaa</span><span class=\"p\">,</span> <span class=\"mh\">0xbb</span><span class=\"p\">,</span> <span class=\"mh\">0xcc</span><span class=\"p\">,</span> <span class=\"mh\">0xdd</span><span class=\"p\">,</span> <span class=\"mh\">0xee</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">,</span>\n    <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"mh\">0x11</span><span class=\"p\">,</span> <span class=\"mh\">0x22</span><span class=\"p\">,</span> <span class=\"mh\">0x33</span><span class=\"p\">,</span> <span class=\"mh\">0x44</span><span class=\"p\">,</span> <span class=\"mh\">0x55</span><span class=\"p\">,</span> <span class=\"mh\">0x66</span><span class=\"p\">,</span> <span class=\"mh\">0x77</span><span class=\"p\">,</span>\n    <span class=\"mh\">0xfe</span><span class=\"p\">,</span> <span class=\"mh\">0xdc</span><span class=\"p\">,</span> <span class=\"mh\">0xba</span><span class=\"p\">,</span> <span class=\"mh\">0x98</span><span class=\"p\">,</span> <span class=\"mh\">0x76</span><span class=\"p\">,</span> <span class=\"mh\">0x54</span><span class=\"p\">,</span> <span class=\"mh\">0x32</span><span class=\"p\">,</span> <span class=\"mh\">0x10</span><span class=\"p\">,</span>\n    <span class=\"mh\">0x01</span><span class=\"p\">,</span> <span class=\"mh\">0x23</span><span class=\"p\">,</span> <span class=\"mh\">0x45</span><span class=\"p\">,</span> <span class=\"mh\">0x67</span><span class=\"p\">,</span> <span class=\"mh\">0x89</span><span class=\"p\">,</span> <span class=\"mh\">0xab</span><span class=\"p\">,</span> <span class=\"mh\">0xcd</span><span class=\"p\">,</span> <span class=\"mh\">0xef</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">random_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostrandom</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n                                   <span class=\"n\">rand_k</span><span class=\"o\">=</span><span class=\"n\">rand_k</span><span class=\"p\">,</span>\n                                   <span class=\"n\">size_s</span><span class=\"o\">=</span><span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostrandom</span><span class=\"o\">.</span><span class=\"n\">SIZE_S_256</span><span class=\"p\">)</span>\n<span class=\"n\">random_result</span> <span class=\"o\">=</span> <span class=\"n\">random_obj</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n<span class=\"n\">random_obj</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"usage-gosthmac-module\">\n<h2>Usage gosthmac module</h2>\n<div id=\"getting-a-hmac-for-a-string\">\n<h3>Getting a HMAC for a string</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'000102030405060708090a0b0c0d0e0f1011121315161718191a1b1c1d1e1f'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'0126bdb87800af214341456563780100'</span><span class=\"p\">)</span>\n\n<span class=\"n\">hmac_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gosthmac</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'HMAC_GOSTR3411_2012_256'</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">hmac_result</span> <span class=\"o\">=</span> <span class=\"n\">hmac_obj</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"getting-a-hmac-for-a-file\">\n<h3>Getting a HMAC for a file</h3>\n<p>In this case the \u2018buffer_size\u2019 value must be a multiple of the \u2018block_size\u2019 value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'000102030405060708090a0b0c0d0e0f1011121315161718191a1b1c1d1e1f'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'0126bdb87800af214341456563780100'</span><span class=\"p\">)</span>\n\n<span class=\"n\">hmac_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gosthmac</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'HMAC_GOSTR3411_2012_256'</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">hmac_result</span> <span class=\"o\">=</span> <span class=\"n\">hmac_obj</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"getting-the-name-identifier-of-the-hmac-algorithm-object\">\n<h3>Getting the name identifier of the HMAC algorithm object</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'000102030405060708090a0b0c0d0e0f1011121315161718191a1b1c1d1e1f'</span><span class=\"p\">)</span>\n<span class=\"n\">hmac_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gosthmac</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'HMAC_GOSTR3411_2012_256'</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">oid_name</span> <span class=\"o\">=</span> <span class=\"n\">hmac_obj</span><span class=\"o\">.</span><span class=\"n\">oid</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre>\n</div>\n</div>\n<div id=\"usage-gostpbkdf-module\">\n<h2>Usage gostpbkdf module</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gostcrypto</span>\n\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'password'</span>\n<span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'salt'</span>\n\n<span class=\"n\">pbkdf_obj</span> <span class=\"o\">=</span> <span class=\"n\">gostcrypto</span><span class=\"o\">.</span><span class=\"n\">gostpbkdf</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">counter</span><span class=\"o\">=</span><span class=\"mi\">4096</span><span class=\"p\">)</span>\n<span class=\"n\">pbkdf_result</span> <span class=\"o\">=</span> <span class=\"n\">pbkdf_obj</span><span class=\"o\">.</span><span class=\"n\">derive</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT Copyright (c) 2020 Evgeny Drobotun</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation for using this package: <a href=\"https://gostcrypto.readthedocs.io/\" rel=\"nofollow\">https://gostcrypto.readthedocs.io/</a></p>\n</div>\n<div id=\"release-history\">\n<h2>Release History</h2>\n<p>1.2.0 (07.05.2020)</p>\n<ul>\n<li>Refactoring and code modification in module <strong>gostcipher</strong> to increase the performance of encryption algorithm \u2018kuznechik\u2019 (uses precomputation  values of the \u2018gf\u2019 function;  the performance of the encryption function has increased by an average of 5..10 times)</li>\n<li>Refactoring and code modification in module <strong>gosthash</strong> to increase the performance of hasing (uses precomputation  values of the \u2018l, s and p-transformation\u2019,  function;  the performance of the encryption function has increased by an average of 2..7 times)</li>\n<li>Added the <strong>gostoid</strong> module that implements generating cryptographic object IDs for the <strong>gostcipher</strong>, <strong>gosthash</strong>, <strong>gosthmac</strong> and <strong>gostsignature</strong> modules</li>\n</ul>\n<p>1.1.2 (02.05.2020)</p>\n<ul>\n<li>Refactoring <strong>gostcipher</strong> module (changed the class hierarchy to remove code duplication)</li>\n<li>Refactoring <strong>gosthash</strong> module (remove code duplication)</li>\n<li>Fixed some minor bugs</li>\n<li>Updated docstring in accordance with the Google Python Style Guide</li>\n</ul>\n<p>1.1.1 (20.04.2020)</p>\n<ul>\n<li>Use <tt>**kvargs</tt> in the <tt>new</tt> function with default parameters (<strong>gostrandom</strong>, <strong>gosthash</strong>, <strong>gosthmac</strong>, <strong>gostpbkdf</strong>)</li>\n<li>Add the ability to pass data to the <tt>new</tt> function from <strong>gosthmac</strong></li>\n<li>Fixed some minor bugs in the <strong>gostrandom</strong> module</li>\n</ul>\n<p>1.1.0 (15.04.2020)</p>\n<ul>\n<li>Refactoring code <strong>gostcipher</strong> module (changed the class structure)</li>\n<li>Each module has its own exception class added</li>\n<li>In the <tt>new</tt> function of the <strong>gostcipher</strong> module for MAC mode, it is now possible to pass data for MAC calculation, followed by calling the <tt>digest</tt> method without first calling the <tt>update</tt> method</li>\n<li>In the <tt>new</tt> function of the <strong>gosthash</strong> module, it is now possible to pass data for hash calculation, followed by calling the <tt>digest</tt> method without first calling the <tt>update</tt> method</li>\n<li>Added new exceptions for various conflict situations</li>\n<li>Fixed some minor bugs</li>\n</ul>\n<p>1.0.0 (08.04.2020)</p>\n<ul>\n<li>First release of <strong>\u2018gostcrypto\u2019</strong></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7191352, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c7741e7e9aabc569bf77e39db895d1da", "sha256": "632b6fcd17c0378be24199a9af47f7a28036beda106adaf152528b5ef73927a5"}, "downloads": -1, "filename": "gostcrypto-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c7741e7e9aabc569bf77e39db895d1da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41311, "upload_time": "2020-04-08T23:47:00", "upload_time_iso_8601": "2020-04-08T23:47:00.687183Z", "url": "https://files.pythonhosted.org/packages/26/5d/b144251e458fbfc44617d7fad25ece7c4b2098946e70c56e3550458b6e47/gostcrypto-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6e5af7b5960f9ab4bdca447f9d219fc4", "sha256": "a0ec8e44c97a578540681721ff379b08855c21f2a642dbbb4f51be2a6fa8cb29"}, "downloads": -1, "filename": "gostcrypto-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6e5af7b5960f9ab4bdca447f9d219fc4", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 49511, "upload_time": "2020-04-14T23:27:46", "upload_time_iso_8601": "2020-04-14T23:27:46.323495Z", "url": "https://files.pythonhosted.org/packages/c3/29/4fe636877d00cd28ffa3cd675c078cef973cf2aaa5098cf21b02c0169275/gostcrypto-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "a953806e4813ff55a6e9f37b6e50dc2b", "sha256": "27d98b400d368758aa9488a340b6d5bc45c1ec22ba54f167bfd432e27d814643"}, "downloads": -1, "filename": "gostcrypto-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a953806e4813ff55a6e9f37b6e50dc2b", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 49668, "upload_time": "2020-04-19T23:36:39", "upload_time_iso_8601": "2020-04-19T23:36:39.461090Z", "url": "https://files.pythonhosted.org/packages/05/c7/af56a69ab800eb53fe5a6157967903a7c84e6456977c18329efbd8e706e1/gostcrypto-1.1.1-py3-none-any.whl", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "d92789893ba8b077e11d3e02f8cac266", "sha256": "a5d02afc571d7089e87a0d6bbb7523a886880d558bd26b2aa037048b903cca38"}, "downloads": -1, "filename": "gostcrypto-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d92789893ba8b077e11d3e02f8cac266", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 49808, "upload_time": "2020-05-02T10:16:34", "upload_time_iso_8601": "2020-05-02T10:16:34.506683Z", "url": "https://files.pythonhosted.org/packages/63/79/9922eecf21300aaf6b20435fd9c9149f1f65c332178962cf4aa8bd172357/gostcrypto-1.1.2-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "7b7c05a906cc3bf57b83a7be4c8b3c12", "sha256": "32184d214c114b9711cbdc2cd88d06d9791ca17dacae3b91b34e783caeb784ef"}, "downloads": -1, "filename": "gostcrypto-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7b7c05a906cc3bf57b83a7be4c8b3c12", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 83400, "upload_time": "2020-05-07T19:55:45", "upload_time_iso_8601": "2020-05-07T19:55:45.455991Z", "url": "https://files.pythonhosted.org/packages/40/ae/76159430e256f453fe7e26711b632f553b93dae3ec95480f17ae21a4a102/gostcrypto-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0d5e9f9cf5d50cbfb9346d7b8656be6", "sha256": "989eff08d2ca6b2508112be61ade819a805827b6b4c64230b1b33ce391d0ed3f"}, "downloads": -1, "filename": "gostcrypto-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d0d5e9f9cf5d50cbfb9346d7b8656be6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75651, "upload_time": "2020-05-07T19:56:02", "upload_time_iso_8601": "2020-05-07T19:56:02.607652Z", "url": "https://files.pythonhosted.org/packages/61/a6/e26b2c23b6c1ae83819d5f7f64711b9bb972cfdf9dffd8ed18f15ea47489/gostcrypto-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b7c05a906cc3bf57b83a7be4c8b3c12", "sha256": "32184d214c114b9711cbdc2cd88d06d9791ca17dacae3b91b34e783caeb784ef"}, "downloads": -1, "filename": "gostcrypto-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7b7c05a906cc3bf57b83a7be4c8b3c12", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 83400, "upload_time": "2020-05-07T19:55:45", "upload_time_iso_8601": "2020-05-07T19:55:45.455991Z", "url": "https://files.pythonhosted.org/packages/40/ae/76159430e256f453fe7e26711b632f553b93dae3ec95480f17ae21a4a102/gostcrypto-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0d5e9f9cf5d50cbfb9346d7b8656be6", "sha256": "989eff08d2ca6b2508112be61ade819a805827b6b4c64230b1b33ce391d0ed3f"}, "downloads": -1, "filename": "gostcrypto-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d0d5e9f9cf5d50cbfb9346d7b8656be6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75651, "upload_time": "2020-05-07T19:56:02", "upload_time_iso_8601": "2020-05-07T19:56:02.607652Z", "url": "https://files.pythonhosted.org/packages/61/a6/e26b2c23b6c1ae83819d5f7f64711b9bb972cfdf9dffd8ed18f15ea47489/gostcrypto-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:25 2020"}