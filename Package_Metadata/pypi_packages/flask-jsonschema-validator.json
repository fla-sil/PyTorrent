{"info": {"author": "Daniel 'Vector' Kerr", "author_email": "vector@vector.id.au", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2"], "description": "# Flask JSON Schema Validator\n\nValidate Flask JSON request data with schema files and route decorators.\n\n\n# Author\n\nDaniel 'Vector' Kerr (<vector@vector.id.au>)\n\n\n# License\n\nRefer to [LICENSE.txt](LICENSE.txt).\n\n\n# Installation\n\npip install flask-jsonschema-validator\n\n\n# Sample Usage\n\n## Python Code\n\n`main.py`\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_jsonschema_validator import JSONSchemaValidator\n\napp = Flask()\nJSONSchemaValidator( app = app, root = \"schemas\" )\n\n# Define a normal flask route, and then apply the `validate` decorator.\n# Look for the `users.json` file, and use the `register` key as the schema source.\n@app.route( '/register', methods = [ 'POST' ] )\n@app.validate( 'users', 'register' )\ndef routeRegister():\n  user = request.json\n  return jsonify( user )\n\nif __name__ == '__main__':\n  app.run( port = 8080 )\n```\n\n\n## Schema File\n\n`schemas/users.json`\n```json\n{\n  \"register\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\", \"minLength\": 2, \"maxLength\": 100 },\n      \"email\": { \"type\": \"string\", \"format\": \"email\" },\n      \"password\": { \"type\": \"string\", \"minLength\": 8, \"maxLength\": 32 }\n    },\n    \"required\": [ \"name\", \"email\", \"password\" ]\n  }\n}\n```\n\n\n## Run Server\n\n```sh\npython main.py\n```\n\n\n## POST Data to Server\n```http\nPOST /register HTTP/1.0\nContent-Type: application/json\nContent-Length: 76\n\n{\n\t\"name\": \"fred\",\n\t\"email\": \"fred@foo.com\",\n\t\"password\": \"frediscool\"\n}\n```\n\n\n## Handling Validation Errors\n\nIf the data validates correctly then the server will respond with the POST data as a JSON object.\n\nIf the data fails to validate, a `jsonschema.ValidationError` exception will be raised.\n\nTo handle the exception, you could register a Flask errorhandler. For example:\n\n```python\nimport jsonschema\nfrom flask import Response\n\n@app.errorhandler( jsonschema.ValidationError )\ndef onValidationError( e ):\n  return Response( \"There was a validation error: \" + str( e ), 400 )\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/vector.kerr/flask-jsonschema-validator", "keywords": "flask jsonschema validator validation json schema", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flask-jsonschema-validator", "package_url": "https://pypi.org/project/flask-jsonschema-validator/", "platform": "", "project_url": "https://pypi.org/project/flask-jsonschema-validator/", "project_urls": {"Homepage": "https://gitlab.com/vector.kerr/flask-jsonschema-validator"}, "release_url": "https://pypi.org/project/flask-jsonschema-validator/0.0.4/", "requires_dist": ["flask", "jsonschema"], "requires_python": "", "summary": "Validate Flask JSON request data with schema files and route decorators", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flask JSON Schema Validator</h1>\n<p>Validate Flask JSON request data with schema files and route decorators.</p>\n<h1>Author</h1>\n<p>Daniel 'Vector' Kerr (<a href=\"mailto:vector@vector.id.au\">vector@vector.id.au</a>)</p>\n<h1>License</h1>\n<p>Refer to <a href=\"LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a>.</p>\n<h1>Installation</h1>\n<p>pip install flask-jsonschema-validator</p>\n<h1>Sample Usage</h1>\n<h2>Python Code</h2>\n<p><code>main.py</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_jsonschema_validator</span> <span class=\"kn\">import</span> <span class=\"n\">JSONSchemaValidator</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">()</span>\n<span class=\"n\">JSONSchemaValidator</span><span class=\"p\">(</span> <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"s2\">\"schemas\"</span> <span class=\"p\">)</span>\n\n<span class=\"c1\"># Define a normal flask route, and then apply the `validate` decorator.</span>\n<span class=\"c1\"># Look for the `users.json` file, and use the `register` key as the schema source.</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span> <span class=\"s1\">'/register'</span><span class=\"p\">,</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">'POST'</span> <span class=\"p\">]</span> <span class=\"p\">)</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span> <span class=\"s1\">'users'</span><span class=\"p\">,</span> <span class=\"s1\">'register'</span> <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">routeRegister</span><span class=\"p\">():</span>\n  <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span>\n  <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span> <span class=\"n\">user</span> <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span> <span class=\"p\">)</span>\n</pre>\n<h2>Schema File</h2>\n<p><code>schemas/users.json</code></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"register\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span> <span class=\"nt\">\"minLength\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nt\">\"maxLength\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span>\n      <span class=\"nt\">\"email\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span> <span class=\"nt\">\"format\"</span><span class=\"p\">:</span> <span class=\"s2\">\"email\"</span> <span class=\"p\">},</span>\n      <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span> <span class=\"nt\">\"minLength\"</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"nt\">\"maxLength\"</span><span class=\"p\">:</span> <span class=\"mi\">32</span> <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"email\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span> <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Run Server</h2>\n<pre>python main.py\n</pre>\n<h2>POST Data to Server</h2>\n<pre><span class=\"nf\">POST</span> <span class=\"nn\">/register</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.0</span>\n<span class=\"na\">Content-Type</span><span class=\"o\">:</span> <span class=\"l\">application/json</span>\n<span class=\"na\">Content-Length</span><span class=\"o\">:</span> <span class=\"l\">76</span>\n\n<span class=\"p\">{</span>\n\t<span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fred\"</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fred@foo.com\"</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"frediscool\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Handling Validation Errors</h2>\n<p>If the data validates correctly then the server will respond with the POST data as a JSON object.</p>\n<p>If the data fails to validate, a <code>jsonschema.ValidationError</code> exception will be raised.</p>\n<p>To handle the exception, you could register a Flask errorhandler. For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jsonschema</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">errorhandler</span><span class=\"p\">(</span> <span class=\"n\">jsonschema</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span> <span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">onValidationError</span><span class=\"p\">(</span> <span class=\"n\">e</span> <span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span> <span class=\"s2\">\"There was a validation error: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span> <span class=\"n\">e</span> <span class=\"p\">),</span> <span class=\"mi\">400</span> <span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 4734640, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "67b7a4421046b6c51e8ef7a153fb3bee", "sha256": "65195b1929b02e214f735478bae89551d76bf67b65222ab7c0ad1dab027075bc"}, "downloads": -1, "filename": "flask_jsonschema_validator-0.0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "67b7a4421046b6c51e8ef7a153fb3bee", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 3373, "upload_time": "2018-06-16T08:38:04", "upload_time_iso_8601": "2018-06-16T08:38:04.368117Z", "url": "https://files.pythonhosted.org/packages/54/27/7d0dd61b23f246d24c97c0a4fb68fd98c3fcf934f751aa261e44f2a26d35/flask_jsonschema_validator-0.0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "869ec825faa895a16f23a2386a67a1f8", "sha256": "b58ad771f406b672ded6468628243387f4e6fbe824791a55cdd7ed49e548d870"}, "downloads": -1, "filename": "flask-jsonschema-validator-0.0.3.tar.gz", "has_sig": false, "md5_digest": "869ec825faa895a16f23a2386a67a1f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2850, "upload_time": "2018-06-16T08:38:05", "upload_time_iso_8601": "2018-06-16T08:38:05.789492Z", "url": "https://files.pythonhosted.org/packages/e3/c2/959343c4b4af7fd958f28c1d1d3aba4c9eb830778db8cc2101ea62c4d730/flask-jsonschema-validator-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "1021bff7ed880ce04b5cdd2f5f702b97", "sha256": "767439d796b36000283be84318dd25fca79dc6562f4acd4c6221ff09d19bc776"}, "downloads": -1, "filename": "flask_jsonschema_validator-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1021bff7ed880ce04b5cdd2f5f702b97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5186, "upload_time": "2019-01-24T08:10:45", "upload_time_iso_8601": "2019-01-24T08:10:45.775977Z", "url": "https://files.pythonhosted.org/packages/03/04/0dc5605ba099d5984791c5a7faf046285bd27eca0f13b2de20be42869800/flask_jsonschema_validator-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dee6d099045025a84bf2b2e05934d165", "sha256": "fe1ee91fa16c6bc3eccf53ec6aa60f19dc0c65501210910adb562179ce66c0d5"}, "downloads": -1, "filename": "flask-jsonschema-validator-0.0.4.tar.gz", "has_sig": false, "md5_digest": "dee6d099045025a84bf2b2e05934d165", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3265, "upload_time": "2019-01-24T08:10:47", "upload_time_iso_8601": "2019-01-24T08:10:47.200871Z", "url": "https://files.pythonhosted.org/packages/bd/b0/35f9f26d6efb6171da6236c07e5cbf73b66467c8954e983389d4656cbffa/flask-jsonschema-validator-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1021bff7ed880ce04b5cdd2f5f702b97", "sha256": "767439d796b36000283be84318dd25fca79dc6562f4acd4c6221ff09d19bc776"}, "downloads": -1, "filename": "flask_jsonschema_validator-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1021bff7ed880ce04b5cdd2f5f702b97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5186, "upload_time": "2019-01-24T08:10:45", "upload_time_iso_8601": "2019-01-24T08:10:45.775977Z", "url": "https://files.pythonhosted.org/packages/03/04/0dc5605ba099d5984791c5a7faf046285bd27eca0f13b2de20be42869800/flask_jsonschema_validator-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dee6d099045025a84bf2b2e05934d165", "sha256": "fe1ee91fa16c6bc3eccf53ec6aa60f19dc0c65501210910adb562179ce66c0d5"}, "downloads": -1, "filename": "flask-jsonschema-validator-0.0.4.tar.gz", "has_sig": false, "md5_digest": "dee6d099045025a84bf2b2e05934d165", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3265, "upload_time": "2019-01-24T08:10:47", "upload_time_iso_8601": "2019-01-24T08:10:47.200871Z", "url": "https://files.pythonhosted.org/packages/bd/b0/35f9f26d6efb6171da6236c07e5cbf73b66467c8954e983389d4656cbffa/flask-jsonschema-validator-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:43 2020"}