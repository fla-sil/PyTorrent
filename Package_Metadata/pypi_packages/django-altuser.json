{"info": {"author": "Davide Riccardo Caliendo", "author_email": "davide.licheni.net", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "INSTALL\n=======\n\nPut altuser in INSTALLED_APPS\n\n::\n\n    INSTALLED_APPS += (\n        'altuser',\n        )\n\nand configure your preferred user model from available altuser/models.py,\nfor example\n\n::\n\n    AUTH_USER_MODEL = 'altuser.MailSocialUser'\n\nAvailable models\n----------------\n\n - MailUser\n - MailSocialUser\n\n - MailConfirmedUser\n - MailConfirmedSocialUser\n\n - MailSocialConfirmfollowUser\n - MailConfirmedSocialConfirmfollowUser\n\nUSAGE\n=====\n\nOneToOne\n--------\n\nIf you use this User model with another Profile model you \nshould put this field on you Profile model\n\n::\n\n    user = models.OneToOneField(settings.AUTH_USER_MODEL,   \n                               related_name='profile')\n\nIf you have multiple profile types, you should use User.get_profile() to get\nthe right profile associated with this user, but you also must set\n  \n::\n\n    ALTUSER_PROFILES_BREL = ['profile']\n\nto a list of backward relation names (relate_name), of various profiles you have.\nFor example if you have two models, client and managers, associated with a OneToOneField to \nour user model, and they have different related_name, one client_profile and the other \nmanager_profile, then ALTUSER_PROFILES_BREL must be ['client_profile', 'manager_profile']\n\n\nGenericRelation\n---------------\n\nActually you can also use the internal profile_type generic relation\non the provided AbstractMailUser, that will permit you to coerce one \nprofile type per user, it is up to you if using that or not.\n\n::\n\n    # used in this way: self.user.get().usermodelfield\n    user = generic.GenericRelation(settings.AUTH_USER_MODEL,\n    content_type_field='profile_type',\n    object_id_field='profile_id')\n\nGeneric relations in this way permits to have your user and profile\nin the same inline and for example in the admin:\n\n::\n\n    from django.contrib import admin\n    from .models import MannequineProfile\n    from django.contrib.auth import get_user_model\n    from django.contrib.contenttypes import generic\n\n    class UserInline(generic.GenericTabularInline):\n\tmodel=get_user_model()\n\textra=1\n\tmax_num=1\n    ct_field = 'profile_type'\n    ct_fk_field = 'profile_id'\n    exclude = ('last_login', 'is_staff', 'is_superuser',\n            'groups', 'user_permissions' ,'likes',\n            'follows')\n\n\n    class ProfileAdmin(admin.ModelAdmin):\n\tinlines = [\n        UserInline,\n\t]\n\n\n    admin.site.register(Profile, ProfileAdmin)\n\n\nNote also, that if you delete an object that has a GenericRelation, any objects which have a GenericForeignKey pointing at it will be deleted as well. \nIn the example above, this means that if a Profile object were deleted, any user objects pointing at it would be deleted at the same time.\n\n\nConfirmed Models\n================\n\nfor using the mail confirmed models you must use [django-mail_confirmation](http://v.licheni.net/drc/django-mail_confirmation.git)\n\nto filter out users that has confirmed social relations you do something like this:\n    \n    get_user_model().objects.filter(id=user.id, follows=otheruser, relations__confirmed__confirmed=True)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://v.licheni.net/drc/django-altuser.git", "keywords": null, "license": "GPLv3 License", "maintainer": null, "maintainer_email": null, "name": "django-altuser", "package_url": "https://pypi.org/project/django-altuser/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-altuser/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://v.licheni.net/drc/django-altuser.git"}, "release_url": "https://pypi.org/project/django-altuser/0.9.5/", "requires_dist": null, "requires_python": null, "summary": "Alternative user models for django >= 1.5, with email field and other features", "version": "0.9.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"install\">\n<h2>INSTALL</h2>\n<p>Put altuser in INSTALLED_APPS</p>\n<pre>INSTALLED_APPS += (\n    'altuser',\n    )\n</pre>\n<p>and configure your preferred user model from available altuser/models.py,\nfor example</p>\n<pre>AUTH_USER_MODEL = 'altuser.MailSocialUser'\n</pre>\n<div id=\"available-models\">\n<h3>Available models</h3>\n<blockquote>\n<ul>\n<li>MailUser</li>\n<li>MailSocialUser</li>\n<li>MailConfirmedUser</li>\n<li>MailConfirmedSocialUser</li>\n<li>MailSocialConfirmfollowUser</li>\n<li>MailConfirmedSocialConfirmfollowUser</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"usage\">\n<h2>USAGE</h2>\n<div id=\"onetoone\">\n<h3>OneToOne</h3>\n<p>If you use this User model with another Profile model you\nshould put this field on you Profile model</p>\n<pre>user = models.OneToOneField(settings.AUTH_USER_MODEL,\n                           related_name='profile')\n</pre>\n<p>If you have multiple profile types, you should use User.get_profile() to get\nthe right profile associated with this user, but you also must set</p>\n<pre>ALTUSER_PROFILES_BREL = ['profile']\n</pre>\n<p>to a list of backward relation names (relate_name), of various profiles you have.\nFor example if you have two models, client and managers, associated with a OneToOneField to\nour user model, and they have different related_name, one client_profile and the other\nmanager_profile, then ALTUSER_PROFILES_BREL must be [\u2018client_profile\u2019, \u2018manager_profile\u2019]</p>\n</div>\n<div id=\"genericrelation\">\n<h3>GenericRelation</h3>\n<p>Actually you can also use the internal profile_type generic relation\non the provided AbstractMailUser, that will permit you to coerce one\nprofile type per user, it is up to you if using that or not.</p>\n<pre># used in this way: self.user.get().usermodelfield\nuser = generic.GenericRelation(settings.AUTH_USER_MODEL,\ncontent_type_field='profile_type',\nobject_id_field='profile_id')\n</pre>\n<p>Generic relations in this way permits to have your user and profile\nin the same inline and for example in the admin:</p>\n<pre>from django.contrib import admin\nfrom .models import MannequineProfile\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.contenttypes import generic\n\nclass UserInline(generic.GenericTabularInline):\n    model=get_user_model()\n    extra=1\n    max_num=1\nct_field = 'profile_type'\nct_fk_field = 'profile_id'\nexclude = ('last_login', 'is_staff', 'is_superuser',\n        'groups', 'user_permissions' ,'likes',\n        'follows')\n\n\nclass ProfileAdmin(admin.ModelAdmin):\n    inlines = [\n    UserInline,\n    ]\n\n\nadmin.site.register(Profile, ProfileAdmin)\n</pre>\n<p>Note also, that if you delete an object that has a GenericRelation, any objects which have a GenericForeignKey pointing at it will be deleted as well.\nIn the example above, this means that if a Profile object were deleted, any user objects pointing at it would be deleted at the same time.</p>\n</div>\n</div>\n<div id=\"confirmed-models\">\n<h2>Confirmed Models</h2>\n<p>for using the mail confirmed models you must use [django-mail_confirmation](<a href=\"http://v.licheni.net/drc/django-mail_confirmation.git\" rel=\"nofollow\">http://v.licheni.net/drc/django-mail_confirmation.git</a>)</p>\n<p>to filter out users that has confirmed social relations you do something like this:</p>\n<blockquote>\nget_user_model().objects.filter(id=user.id, follows=otheruser, relations__confirmed__confirmed=True)</blockquote>\n</div>\n\n          </div>"}, "last_serial": 1452584, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "6d9f9a47827952ec8934f0b0c83c1dcf", "sha256": "e7f7da40e1fbc23f57864b83160ffc6eba557ba581b6860b92e445901611a5be"}, "downloads": -1, "filename": "django-altuser-0.4.tar.gz", "has_sig": false, "md5_digest": "6d9f9a47827952ec8934f0b0c83c1dcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18038, "upload_time": "2013-08-13T12:22:28", "upload_time_iso_8601": "2013-08-13T12:22:28.813806Z", "url": "https://files.pythonhosted.org/packages/fb/44/7686858d252b0290093e3b4e282640a92ec090aca768331ff8944a568a2b/django-altuser-0.4.tar.gz", "yanked": false}], "0.6.9": [{"comment_text": "", "digests": {"md5": "e7791bcc84b86f9acafe4386e501168f", "sha256": "c922da711beda83c77e7f9a63ba79cd165a1ac93b793baa4d919b3aa695b6217"}, "downloads": -1, "filename": "django-altuser-0.6.9.tar.gz", "has_sig": false, "md5_digest": "e7791bcc84b86f9acafe4386e501168f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24065, "upload_time": "2014-03-06T17:15:59", "upload_time_iso_8601": "2014-03-06T17:15:59.194617Z", "url": "https://files.pythonhosted.org/packages/c5/2f/7327e7b5daf46ba31352a8053191535def08728dda3e94ca40584d9b4d4c/django-altuser-0.6.9.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "2421bd9c9fd9ffa4223ecb36b88268cd", "sha256": "3966b2120ce4d9ba03a52fd2996d1d038b56812844ac6ca02bdf5b468000ea52"}, "downloads": -1, "filename": "django-altuser-0.8.1.tar.gz", "has_sig": false, "md5_digest": "2421bd9c9fd9ffa4223ecb36b88268cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24721, "upload_time": "2014-09-11T14:11:42", "upload_time_iso_8601": "2014-09-11T14:11:42.050274Z", "url": "https://files.pythonhosted.org/packages/c1/c4/4afd53a4809bc54cd304644e768922f95723afa18a8fa68b663eba9823cb/django-altuser-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "ea03f46ced8932c20dd352b1cb0694a5", "sha256": "6f8966f95dab3dd0c2116f4630ac9242797c9d2ca778ca8c30aeb6d9aac102f2"}, "downloads": -1, "filename": "django-altuser-0.8.2.tar.gz", "has_sig": false, "md5_digest": "ea03f46ced8932c20dd352b1cb0694a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24773, "upload_time": "2014-09-11T15:47:05", "upload_time_iso_8601": "2014-09-11T15:47:05.053544Z", "url": "https://files.pythonhosted.org/packages/72/ed/3bc41983ec49a581cd4af880884c44f1851f521823171fdd8beeccc7bb6a/django-altuser-0.8.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "bd0b6e396f6287c8fe1c2125a0bc3753", "sha256": "752dde0351e2d74304964186e7ec177de8e3b5c4f040e0a7a04143bf66f7117c"}, "downloads": -1, "filename": "django-altuser-0.9.0.tar.gz", "has_sig": false, "md5_digest": "bd0b6e396f6287c8fe1c2125a0bc3753", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24779, "upload_time": "2014-12-27T17:15:23", "upload_time_iso_8601": "2014-12-27T17:15:23.284206Z", "url": "https://files.pythonhosted.org/packages/12/99/cdf9d404a8e10ee4f42df5f5d8a919f5122af560806fa9ebd4e0e5977c89/django-altuser-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "6c4c8cd3596795986ddacaa5f5463cab", "sha256": "3276744805b68c90e06ca0b2cdde03f181e483697e06274d81945109f8631ea4"}, "downloads": -1, "filename": "django-altuser-0.9.1.tar.gz", "has_sig": false, "md5_digest": "6c4c8cd3596795986ddacaa5f5463cab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24766, "upload_time": "2014-12-27T17:20:03", "upload_time_iso_8601": "2014-12-27T17:20:03.053977Z", "url": "https://files.pythonhosted.org/packages/bd/e9/bb9ad780c236585931f05aff361e4f20f63567973c7f54cdd0654876c9fa/django-altuser-0.9.1.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "5638ce6cf69afe26442b9c4a7c74b8dd", "sha256": "b5ceeb1ace0477f3fa40c0f1b322a4d161546153bf7a22fdb23ae6b67ef6a3cb"}, "downloads": -1, "filename": "django-altuser-0.9.3.tar.gz", "has_sig": false, "md5_digest": "5638ce6cf69afe26442b9c4a7c74b8dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24837, "upload_time": "2015-01-20T22:57:37", "upload_time_iso_8601": "2015-01-20T22:57:37.874036Z", "url": "https://files.pythonhosted.org/packages/2a/5f/a27c9b9a878192a748888368ca7fcc10acca5b675e98e881ed9e21ac7688/django-altuser-0.9.3.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "537527040d7952ad8813625487faa5c4", "sha256": "4cb290fdbbd2bbe4f0d7570f7f0c7caef684e900530c931993e3a003784b4ef0"}, "downloads": -1, "filename": "django-altuser-0.9.5.tar.gz", "has_sig": false, "md5_digest": "537527040d7952ad8813625487faa5c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24857, "upload_time": "2015-03-08T01:58:40", "upload_time_iso_8601": "2015-03-08T01:58:40.344562Z", "url": "https://files.pythonhosted.org/packages/47/37/4e3b7dca4bc5db5acb04fdd8419b9727f4a8fc895ffcd4b99c36479e4eda/django-altuser-0.9.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "537527040d7952ad8813625487faa5c4", "sha256": "4cb290fdbbd2bbe4f0d7570f7f0c7caef684e900530c931993e3a003784b4ef0"}, "downloads": -1, "filename": "django-altuser-0.9.5.tar.gz", "has_sig": false, "md5_digest": "537527040d7952ad8813625487faa5c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24857, "upload_time": "2015-03-08T01:58:40", "upload_time_iso_8601": "2015-03-08T01:58:40.344562Z", "url": "https://files.pythonhosted.org/packages/47/37/4e3b7dca4bc5db5acb04fdd8419b9727f4a8fc895ffcd4b99c36479e4eda/django-altuser-0.9.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:42 2020"}