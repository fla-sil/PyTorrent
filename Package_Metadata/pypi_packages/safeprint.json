{"info": {"author": "eight", "author_email": "eight04@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: Chinese (Traditional)", "Operating System :: Microsoft :: Windows :: Windows 7", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Terminals"], "description": "safeprint\n=========\n\nA printer suppressing UnicodeEncodeError.\n\nInstallation\n------------\n\n::\n\n\tpip install safeprint\n\n\nUsage\n-----\n\nBasic:\n\n::\n\n\tfrom safeprint import print\n\n\tprint(\"\u4f60\u597d\u4e16\u754c\uff01\" \"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\" \"\uc548\ub155\ud558\uc138\uc694\uc138\uacc4\")\n\nHook callback:\n\n::\n\n\timport safeprint\n\n\t# create a printer\n\tprinter = safeprint.Printer()\n\n\tdef callback(text):\n\t\t# do something with the text\n\n\tprinter.add_listener(callback)\n\n\tprinter.print(1, 2, 3, sep=\", \")\n\n\tprinter.remove_listener(callback)\n\nNote for python 2\n-----------------\n\nIf you send a str object to the print function, safeprint will encode it into unicode object with utf-8 encoding.\n\nHow it works\n------------\n\nPython 3\n~~~~~~~~\n\n* Printing to the console\n\n  Before printing, python encodes your text `based on the encoding of your console <https://docs.python.org/3/library/sys.html#sys.stdout>`__, which is usally \"utf-8\" in Linux. Under Windows, you can check your default code page with cmd command ``chcp``.\n\n  As the result, if python can't encode your text with the encoding, \"UnicodeEncodeError\" is raised. You can solve this by switching console encoding - run command ``chcp 65001`` to switch to utf-8 before running python.\n\n  What safeprint does, is to use `win-unicode-console <https://github.com/Drekin/win-unicode-console>`__, which uses WinAPI to write unicode string to the console.\n\n  Also, after python 3.6, `python has builtin support for that <https://docs.python.org/3/whatsnew/3.6.html#pep-528-change-windows-console-encoding-to-utf-8>`__, so you don't need win-unicode-console anymore.\n\n* Printing to a file (redirected output)\n\n  This cause \"UnicodeEncodeError\" because python uses your system code page as default encoding for stdios. To solve it, you should set environment variable `\"PYTHONIOENCODING\" <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING>`__ to \"utf-8\", which makes python use utf-8 as the encoding.\n\n  What safeprint does is just always encode your text in utf-8, and write the bytes to stdout directly.\n\nPython 2\n~~~~~~~~\n\nIn python 2, there is no difference between bytes and str. An str is just a series of bytes, which is what python actually read from your source code. If you write the same string but save in different source file with different encoding, python will get different series of bytes too.\n\n* Printing to the console\n\n  Since there is no difference between bytes and str, writing str to console is just writing bytes to console and will never raise an UnicodeEncodeError. However, you might get garbled if the encoding of the console doesn't match the encoding of the source code (and python 2 just doesn't work well with cp65001, switching code page doesn't work).\n\n  When printing unicode object, python will try to encode it into bytes with the encoding of the console like python 3, which might result in UnicodeEncodeError.\n\n  The solution is same as in python 3. safeprint uses win-unicode-console to print unicode text.\n\n* Printing to a file (redirected output)\n\n  As we said, there is no difference between bytes and str. When printing a str to a file, is actually just writing a series of bytes to the file, which will never raise an UnicodeEncodeError.\n\n  But, when printing an unicode object, python has to encode the unicode into bytes, based on the default encoding of python (you can check the default encoding by running this python script ``import sys; print(sys.getdefaultencoding())``, it defaults to \"ascii\" in python 2). As the result, the printing will fail with UnicodeEncodeError if python can't encode your unicode object.\n\n  To solve this, you can set the environment variable \"PYTHONIOENCODING\", or encode your unicode object with utf-8 before sending it to the print function, which is what safeprint does.\n\nChangelog\n---------\n\n* 0.2.0 (Mar 1, 2017)\n\n  - Support Python 2.\n  - Add printer for redirected output.\n  - Drop EchoPrinter.\n\n* 0.1.4 (Dec 31, 2016)\n\n  - Make win-unicode-console optional with Python 3.6.\n\n* 0.1.2 (Jul 21, 2016)\n\n  - Compatible with win-unicode-console 0.5\n\n* 0.1.1 (Apr 15, 2016)\n\n  - Fix builtins bug.\n\n* 0.1.0 (Apr 15, 2016)\n\n  - Initial release.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eight04/safeprint", "keywords": "windows cmd unicode print", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "safeprint", "package_url": "https://pypi.org/project/safeprint/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/safeprint/", "project_urls": {"Homepage": "https://github.com/eight04/safeprint"}, "release_url": "https://pypi.org/project/safeprint/0.2.0/", "requires_dist": ["win-unicode-console (>=0.4)"], "requires_python": "", "summary": "A printer suppressing UnicodeEncodeError", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A printer suppressing UnicodeEncodeError.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install safeprint\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Basic:</p>\n<pre>from safeprint import print\n\nprint(\"\u4f60\u597d\u4e16\u754c\uff01\" \"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\" \"\uc548\ub155\ud558\uc138\uc694\uc138\uacc4\")\n</pre>\n<p>Hook callback:</p>\n<pre>import safeprint\n\n# create a printer\nprinter = safeprint.Printer()\n\ndef callback(text):\n        # do something with the text\n\nprinter.add_listener(callback)\n\nprinter.print(1, 2, 3, sep=\", \")\n\nprinter.remove_listener(callback)\n</pre>\n</div>\n<div id=\"note-for-python-2\">\n<h2>Note for python 2</h2>\n<p>If you send a str object to the print function, safeprint will encode it into unicode object with utf-8 encoding.</p>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<div id=\"python-3\">\n<h3>Python 3</h3>\n<ul>\n<li><p>Printing to the console</p>\n<p>Before printing, python encodes your text <a href=\"https://docs.python.org/3/library/sys.html#sys.stdout\" rel=\"nofollow\">based on the encoding of your console</a>, which is usally \u201cutf-8\u201d in Linux. Under Windows, you can check your default code page with cmd command <tt>chcp</tt>.</p>\n<p>As the result, if python can\u2019t encode your text with the encoding, \u201cUnicodeEncodeError\u201d is raised. You can solve this by switching console encoding - run command <tt>chcp 65001</tt> to switch to utf-8 before running python.</p>\n<p>What safeprint does, is to use <a href=\"https://github.com/Drekin/win-unicode-console\" rel=\"nofollow\">win-unicode-console</a>, which uses WinAPI to write unicode string to the console.</p>\n<p>Also, after python 3.6, <a href=\"https://docs.python.org/3/whatsnew/3.6.html#pep-528-change-windows-console-encoding-to-utf-8\" rel=\"nofollow\">python has builtin support for that</a>, so you don\u2019t need win-unicode-console anymore.</p>\n</li>\n<li><p>Printing to a file (redirected output)</p>\n<p>This cause \u201cUnicodeEncodeError\u201d because python uses your system code page as default encoding for stdios. To solve it, you should set environment variable <a href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING\" rel=\"nofollow\">\u201cPYTHONIOENCODING\u201d</a> to \u201cutf-8\u201d, which makes python use utf-8 as the encoding.</p>\n<p>What safeprint does is just always encode your text in utf-8, and write the bytes to stdout directly.</p>\n</li>\n</ul>\n</div>\n<div id=\"python-2\">\n<h3>Python 2</h3>\n<p>In python 2, there is no difference between bytes and str. An str is just a series of bytes, which is what python actually read from your source code. If you write the same string but save in different source file with different encoding, python will get different series of bytes too.</p>\n<ul>\n<li><p>Printing to the console</p>\n<p>Since there is no difference between bytes and str, writing str to console is just writing bytes to console and will never raise an UnicodeEncodeError. However, you might get garbled if the encoding of the console doesn\u2019t match the encoding of the source code (and python 2 just doesn\u2019t work well with cp65001, switching code page doesn\u2019t work).</p>\n<p>When printing unicode object, python will try to encode it into bytes with the encoding of the console like python 3, which might result in UnicodeEncodeError.</p>\n<p>The solution is same as in python 3. safeprint uses win-unicode-console to print unicode text.</p>\n</li>\n<li><p>Printing to a file (redirected output)</p>\n<p>As we said, there is no difference between bytes and str. When printing a str to a file, is actually just writing a series of bytes to the file, which will never raise an UnicodeEncodeError.</p>\n<p>But, when printing an unicode object, python has to encode the unicode into bytes, based on the default encoding of python (you can check the default encoding by running this python script <tt>import sys; <span class=\"pre\">print(sys.getdefaultencoding())</span></tt>, it defaults to \u201cascii\u201d in python 2). As the result, the printing will fail with UnicodeEncodeError if python can\u2019t encode your unicode object.</p>\n<p>To solve this, you can set the environment variable \u201cPYTHONIOENCODING\u201d, or encode your unicode object with utf-8 before sending it to the print function, which is what safeprint does.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<ul>\n<li>0.2.0 (Mar 1, 2017)<ul>\n<li>Support Python 2.</li>\n<li>Add printer for redirected output.</li>\n<li>Drop EchoPrinter.</li>\n</ul>\n</li>\n<li>0.1.4 (Dec 31, 2016)<ul>\n<li>Make win-unicode-console optional with Python 3.6.</li>\n</ul>\n</li>\n<li>0.1.2 (Jul 21, 2016)<ul>\n<li>Compatible with win-unicode-console 0.5</li>\n</ul>\n</li>\n<li>0.1.1 (Apr 15, 2016)<ul>\n<li>Fix builtins bug.</li>\n</ul>\n</li>\n<li>0.1.0 (Apr 15, 2016)<ul>\n<li>Initial release.</li>\n</ul>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2674416, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "900909154d282782305ac34c876b1788", "sha256": "c043ee0bbcf3f5656c3e101d32d322898716cf0babd8ca3f24864b336991deff"}, "downloads": -1, "filename": "safeprint-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "900909154d282782305ac34c876b1788", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4569, "upload_time": "2016-04-15T06:48:15", "upload_time_iso_8601": "2016-04-15T06:48:15.961374Z", "url": "https://files.pythonhosted.org/packages/f4/fc/1b040acb90b15510254be0d7be24cd35509baef5729fbb8cf2b75cbcbc04/safeprint-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcb1ac9c81d82eab7b3bf43a3d56d3f1", "sha256": "2c37e0a851391dd50201cd89b77ecfa9bd845ee759a145a496d8391098f89532"}, "downloads": -1, "filename": "safeprint-0.1.0.zip", "has_sig": false, "md5_digest": "bcb1ac9c81d82eab7b3bf43a3d56d3f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5873, "upload_time": "2016-04-15T06:48:26", "upload_time_iso_8601": "2016-04-15T06:48:26.706988Z", "url": "https://files.pythonhosted.org/packages/05/5a/a10d0a196d6007e1099f3ec15851166956f48c6502c1572240d9513860aa/safeprint-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "aef5b54f8f677c8da8f7011ec3bf9529", "sha256": "e7405bd092d5ecedfb79dd5251ef4b58c5824f5e07a70d91dbece49f62bf5d6d"}, "downloads": -1, "filename": "safeprint-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aef5b54f8f677c8da8f7011ec3bf9529", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4329, "upload_time": "2016-04-15T07:01:07", "upload_time_iso_8601": "2016-04-15T07:01:07.610168Z", "url": "https://files.pythonhosted.org/packages/e5/09/03dc0b115fc0b397854a38644e5e563cc0d662d247d15313110544615094/safeprint-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d954b57a4b4ea26c6b375200af9981c", "sha256": "bb4c7ac53a65d872bd1b129a6aa4c773edbe528bd871eeb1df60b466f8dd81da"}, "downloads": -1, "filename": "safeprint-0.1.1.zip", "has_sig": false, "md5_digest": "1d954b57a4b4ea26c6b375200af9981c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5648, "upload_time": "2016-04-15T07:01:29", "upload_time_iso_8601": "2016-04-15T07:01:29.176857Z", "url": "https://files.pythonhosted.org/packages/77/7a/a719cec94528e2262b9f68022d211fbd7ce4535dc795c9fe1fc86c961eb5/safeprint-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ccef15404f815f87a82a673b6e8972ec", "sha256": "bbb8aff664f780b5a03b9c8af71f80541690d25f09a70967e5f08b6cfefb255a"}, "downloads": -1, "filename": "safeprint-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ccef15404f815f87a82a673b6e8972ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4452, "upload_time": "2016-07-21T07:47:52", "upload_time_iso_8601": "2016-07-21T07:47:52.995199Z", "url": "https://files.pythonhosted.org/packages/b9/1b/72da1f71f7652e97e21a90425ecca5618abb6a278938368d7cd937c29e2a/safeprint-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da023235166f36825a6ffeb6aa63c7d9", "sha256": "3330fdb9eb7e8e06735faa5d50060c0c4e384dcbefe0d5ae0b4c17fcbec44776"}, "downloads": -1, "filename": "safeprint-0.1.2.zip", "has_sig": false, "md5_digest": "da023235166f36825a6ffeb6aa63c7d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5619, "upload_time": "2016-07-21T07:47:55", "upload_time_iso_8601": "2016-07-21T07:47:55.983189Z", "url": "https://files.pythonhosted.org/packages/82/db/9eba7c0245345ca5ed3c981f0c95e582158575aae8828068aed709d69d6e/safeprint-0.1.2.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "275c935e9c0f0f40ff6afb2dfea145ab", "sha256": "7bd363806f19dc8a99247a7fb062ec986561284d6933c6354c78b3c9d10cea18"}, "downloads": -1, "filename": "safeprint-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "275c935e9c0f0f40ff6afb2dfea145ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4937, "upload_time": "2016-12-31T08:13:37", "upload_time_iso_8601": "2016-12-31T08:13:37.164260Z", "url": "https://files.pythonhosted.org/packages/1c/38/c879a3972378a5f0827d9d75133b224a5ac3bf73c8c5893026c280861c23/safeprint-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "821858cac2b9d3707c5c1a91ae3be478", "sha256": "f7b1d32a5acb2c975f1005cba7d3bf6a3750e887c35704a3846ff4614ebd46e9"}, "downloads": -1, "filename": "safeprint-0.1.4.tar.gz", "has_sig": false, "md5_digest": "821858cac2b9d3707c5c1a91ae3be478", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3162, "upload_time": "2016-12-31T08:13:39", "upload_time_iso_8601": "2016-12-31T08:13:39.557834Z", "url": "https://files.pythonhosted.org/packages/cc/8a/cd1f693e5300a47ef5ea69856421205196be976ee7afe2f650535d0036e8/safeprint-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "101b147556a16f990e22566c0a3166b5", "sha256": "381fd4fb8808cc13df085c10c2b8b64dc549b784164aa6818d67f81e830b8e7b"}, "downloads": -1, "filename": "safeprint-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "101b147556a16f990e22566c0a3166b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7106, "upload_time": "2017-03-01T01:13:44", "upload_time_iso_8601": "2017-03-01T01:13:44.869042Z", "url": "https://files.pythonhosted.org/packages/e9/5b/215fcaa420191ea5582fcfee0d7c8ab5a55be224fcd594829fcb04fd2cbb/safeprint-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b82185d3ed74637a47bb395ff20d50b1", "sha256": "39f00f7761086efbc65474f8ccaad1bdcfdcf13245ce1a13a636118d9ae9b44e"}, "downloads": -1, "filename": "safeprint-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b82185d3ed74637a47bb395ff20d50b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4406, "upload_time": "2017-03-01T01:13:47", "upload_time_iso_8601": "2017-03-01T01:13:47.522467Z", "url": "https://files.pythonhosted.org/packages/3e/63/13065477880ec7097c05332d370f11c4822fc035af578cee7dc374c02fc0/safeprint-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "101b147556a16f990e22566c0a3166b5", "sha256": "381fd4fb8808cc13df085c10c2b8b64dc549b784164aa6818d67f81e830b8e7b"}, "downloads": -1, "filename": "safeprint-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "101b147556a16f990e22566c0a3166b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7106, "upload_time": "2017-03-01T01:13:44", "upload_time_iso_8601": "2017-03-01T01:13:44.869042Z", "url": "https://files.pythonhosted.org/packages/e9/5b/215fcaa420191ea5582fcfee0d7c8ab5a55be224fcd594829fcb04fd2cbb/safeprint-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b82185d3ed74637a47bb395ff20d50b1", "sha256": "39f00f7761086efbc65474f8ccaad1bdcfdcf13245ce1a13a636118d9ae9b44e"}, "downloads": -1, "filename": "safeprint-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b82185d3ed74637a47bb395ff20d50b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4406, "upload_time": "2017-03-01T01:13:47", "upload_time_iso_8601": "2017-03-01T01:13:47.522467Z", "url": "https://files.pythonhosted.org/packages/3e/63/13065477880ec7097c05332d370f11c4822fc035af578cee7dc374c02fc0/safeprint-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:24 2020"}