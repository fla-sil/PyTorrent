{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "# Poliwhirl\n\n\n\nAre you working with an unfamiliar database and feeling confused?\n\nDo you find yourself running `SELECT * FROM TABLE LIMIT 100` queries to remind yourself possible values of key fields?\n\nDo these values slowly change over the course of years, with no clear documentation from upstream data producers?\n\nIf you answered \"yes\" to any of the above questions, this package may be for you. \n\n\n\n![Image of Poliwhirl pokemon](https://raw.githubusercontent.com/asdfgeoff/polywhirl/master/poliwhirl.png)\n\n\n\n\n\n## What it does\n\nPoliwhirl helps you orient yourself in an unfamiliar database by generating useful HTML reports (via [pandas-profiling](https://github.com/pandas-profiling/pandas-profiling)) for key tables you specify. It saves all these outputs to a single directory, which you can index locally with Spotlight or [Alfred](https://www.alfredapp.com/), or even deploy to some internal static website for your team.\n\n\n\n\n## Installing\n\nYou can install this package via pip:\n\n```\npip install polywhirl\n```\n\n\n\n## Features and usage\n\nPolywhirl takes a single argument of a yaml file containing the structure of the database you'd like to profile. The format of this yaml file approximately follows that of dbt's [schema.yml](https://docs.getdbt.com/docs/schemayml-files). A template file `tables.yml` is provided for you, but you'll need to input the lists of schemas and tables specific to your own database.\n\n```sh\npolywhirl tables.yml\n```\n\n\n\nPolywhirl currently supports these connections:\n\n1. BigQuery (use `name: bigquery` in `tables.yml`)\n2. Redshift (use `name: redshift` in `tables.yml`)\n\n\n\nFor the sake of performance, polywhirl will pull a random sample of 10k rows from each table.\nFor Redshift, it supports defining a [sortkey](https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html) for each table, which is used to limit data to the most recent 90 days. This improves performance on large tables.\n\n\n\nBigQuery credentials are handled by `pandas.read_gbq()` which relies on the [`pandas-gbq`](https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html) package. \n\nRedshift credentials are requested on first run, then stored locally in your system keychain using the [keyring](https://github.com/jaraco/keyring#what-is-python-keyring-lib) package.\n\n\n\n## FAQ\n\n#### Do you realize you misspelled [Poliwhirl](https://bulbapedia.bulbagarden.net/wiki/Poliwhirl_(Pok%C3%A9mon))?\n\nYes I noticed this as I was writing this README\u2014but it's too late\u2014the name has grown on me. \n\n\n\n## Todo\n\nWould like to get to the following in the future, so feel free to send PRs my way on any of these:\n\n- Add equivalent of Redshift sortkey to BigQuery logic, to prevent unnecessary full table scans\n- Compile .html outputs into a searchable static website\n- Automated tests (w/ pytest)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/asdfgeoff/polywhirl", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "polywhirl", "package_url": "https://pypi.org/project/polywhirl/", "platform": "", "project_url": "https://pypi.org/project/polywhirl/", "project_urls": {"Homepage": "https://github.com/asdfgeoff/polywhirl"}, "release_url": "https://pypi.org/project/polywhirl/0.1.0/", "requires_dist": ["pandas", "pandas-profiling", "pandas-gbq", "PyYAML", "tqdm", "jinja2", "click"], "requires_python": ">=3.6.0", "summary": "Run pandas-profiling HTML reports for a given list of database tables.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Poliwhirl</h1>\n<p>Are you working with an unfamiliar database and feeling confused?</p>\n<p>Do you find yourself running <code>SELECT * FROM TABLE LIMIT 100</code> queries to remind yourself possible values of key fields?</p>\n<p>Do these values slowly change over the course of years, with no clear documentation from upstream data producers?</p>\n<p>If you answered \"yes\" to any of the above questions, this package may be for you.</p>\n<p><img alt=\"Image of Poliwhirl pokemon\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0baa830966441d23ffbe4bc6c275f788d951416c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6173646667656f66662f706f6c79776869726c2f6d61737465722f706f6c69776869726c2e706e67\"></p>\n<h2>What it does</h2>\n<p>Poliwhirl helps you orient yourself in an unfamiliar database by generating useful HTML reports (via <a href=\"https://github.com/pandas-profiling/pandas-profiling\" rel=\"nofollow\">pandas-profiling</a>) for key tables you specify. It saves all these outputs to a single directory, which you can index locally with Spotlight or <a href=\"https://www.alfredapp.com/\" rel=\"nofollow\">Alfred</a>, or even deploy to some internal static website for your team.</p>\n<h2>Installing</h2>\n<p>You can install this package via pip:</p>\n<pre><code>pip install polywhirl\n</code></pre>\n<h2>Features and usage</h2>\n<p>Polywhirl takes a single argument of a yaml file containing the structure of the database you'd like to profile. The format of this yaml file approximately follows that of dbt's <a href=\"https://docs.getdbt.com/docs/schemayml-files\" rel=\"nofollow\">schema.yml</a>. A template file <code>tables.yml</code> is provided for you, but you'll need to input the lists of schemas and tables specific to your own database.</p>\n<pre>polywhirl tables.yml\n</pre>\n<p>Polywhirl currently supports these connections:</p>\n<ol>\n<li>BigQuery (use <code>name: bigquery</code> in <code>tables.yml</code>)</li>\n<li>Redshift (use <code>name: redshift</code> in <code>tables.yml</code>)</li>\n</ol>\n<p>For the sake of performance, polywhirl will pull a random sample of 10k rows from each table.\nFor Redshift, it supports defining a <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html\" rel=\"nofollow\">sortkey</a> for each table, which is used to limit data to the most recent 90 days. This improves performance on large tables.</p>\n<p>BigQuery credentials are handled by <code>pandas.read_gbq()</code> which relies on the <a href=\"https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html\" rel=\"nofollow\"><code>pandas-gbq</code></a> package.</p>\n<p>Redshift credentials are requested on first run, then stored locally in your system keychain using the <a href=\"https://github.com/jaraco/keyring#what-is-python-keyring-lib\" rel=\"nofollow\">keyring</a> package.</p>\n<h2>FAQ</h2>\n<h4>Do you realize you misspelled <a href=\"https://bulbapedia.bulbagarden.net/wiki/Poliwhirl_(Pok%C3%A9mon)\" rel=\"nofollow\">Poliwhirl</a>?</h4>\n<p>Yes I noticed this as I was writing this README\u2014but it's too late\u2014the name has grown on me.</p>\n<h2>Todo</h2>\n<p>Would like to get to the following in the future, so feel free to send PRs my way on any of these:</p>\n<ul>\n<li>Add equivalent of Redshift sortkey to BigQuery logic, to prevent unnecessary full table scans</li>\n<li>Compile .html outputs into a searchable static website</li>\n<li>Automated tests (w/ pytest)</li>\n</ul>\n\n          </div>"}, "last_serial": 6302458, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "341a04b82e61bc24d0084f8d6104c038", "sha256": "20a5f110de15a803f428e5e19b087984aeeb5eab92a022d32bf555582ac31e9b"}, "downloads": -1, "filename": "polywhirl-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "341a04b82e61bc24d0084f8d6104c038", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6152, "upload_time": "2019-12-14T09:31:45", "upload_time_iso_8601": "2019-12-14T09:31:45.036074Z", "url": "https://files.pythonhosted.org/packages/2a/c7/03bc01c7a21e9913bdcec065b51134dbf47fbabeea3aa29dcb1c15f28702/polywhirl-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7e03d06ea1cec63f55b8a912832e66e", "sha256": "c80d4d710d222d2f665a15365339338fd3a146a38ef2092e9b39c584bf4bf85d"}, "downloads": -1, "filename": "polywhirl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d7e03d06ea1cec63f55b8a912832e66e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4850, "upload_time": "2019-12-14T09:31:47", "upload_time_iso_8601": "2019-12-14T09:31:47.193673Z", "url": "https://files.pythonhosted.org/packages/2f/2b/6c47a92924f7c2eca4667cf707395adcd3b5434c568b3edc3533ca530d82/polywhirl-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "341a04b82e61bc24d0084f8d6104c038", "sha256": "20a5f110de15a803f428e5e19b087984aeeb5eab92a022d32bf555582ac31e9b"}, "downloads": -1, "filename": "polywhirl-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "341a04b82e61bc24d0084f8d6104c038", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6152, "upload_time": "2019-12-14T09:31:45", "upload_time_iso_8601": "2019-12-14T09:31:45.036074Z", "url": "https://files.pythonhosted.org/packages/2a/c7/03bc01c7a21e9913bdcec065b51134dbf47fbabeea3aa29dcb1c15f28702/polywhirl-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7e03d06ea1cec63f55b8a912832e66e", "sha256": "c80d4d710d222d2f665a15365339338fd3a146a38ef2092e9b39c584bf4bf85d"}, "downloads": -1, "filename": "polywhirl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d7e03d06ea1cec63f55b8a912832e66e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4850, "upload_time": "2019-12-14T09:31:47", "upload_time_iso_8601": "2019-12-14T09:31:47.193673Z", "url": "https://files.pythonhosted.org/packages/2f/2b/6c47a92924f7c2eca4667cf707395adcd3b5434c568b3edc3533ca530d82/polywhirl-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:51:40 2020"}