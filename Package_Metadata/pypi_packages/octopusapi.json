{"info": {"author": "Marcelo Cure", "author_email": "marcelocure@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Documentation", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Installation/Setup", "Topic :: System :: Software Distribution"], "description": "=========================\n Python Project Template\n=========================\n\n.. image:: https://travis-ci.org/seanfisk/python-project-template.png\n   :target: https://travis-ci.org/seanfisk/python-project-template\n\nThis project provides a best-practices template Python project which integrates several different tools. It saves you work by setting up a number of things, including documentation, code checking, and unit test runners.\n\nAs it is an all-in-one solution, the tools used are rather opinionated. They include:\n\n* Paver_ for running miscellaneous tasks\n* Setuptools_ for distribution (Setuptools and Distribute_ have merged_)\n* Sphinx_ for documentation\n* flake8_ for source code checking\n* pytest_ for unit testing\n* mock_ for mocking (not required by the template, but included anyway)\n* tox_ for testing on multiple Python versions\n\nIf you are new to Python or new to creating Python projects, see Kenneth Reitz's `Hitchhiker's Guide to Python`_ for an explanation of some of the tools used here.\n\n.. _Paver: http://paver.github.io/paver/\n.. _Setuptools: http://pythonhosted.org/setuptools/merge.html\n.. _Distribute: http://pythonhosted.org/distribute/\n.. _merged: http://pythonhosted.org/setuptools/merge.html\n.. _Sphinx: http://sphinx-doc.org/\n.. _flake8: https://pypi.python.org/pypi/flake8\n.. _pytest: http://pytest.org/latest/\n.. _mock: http://www.voidspace.org.uk/python/mock/\n.. _tox: http://testrun.org/tox/latest/\n.. _Hitchhiker's Guide to Python: http://docs.python-guide.org/en/latest/\n\nProject Setup\n=============\n\nThis will be the README for your project. For now, follow these instructions to get this project template set up correctly. Then, come back and replace the contents of this README with contents specific to your project.\n\nInstructions\n------------\n\n#. Clone the template project, replacing ``my-project`` with the name of the project you are creating::\n\n        git clone https://github.com/seanfisk/python-project-template.git my-project\n        cd my-project\n\n#. Edit the metadata file ``my_module/metadata.py`` to correctly describe your project.\n\n#. Generate files based upon the project metadata you just entered::\n\n        python internal/generate.py\n\n   The generation script will remove all the template files and generate real files, then self-destruct upon completion.\n\n#. Delete the old git history and optionally re-initialize the repository::\n\n        rm -rf .git # or `ri -recurse -force .git' for PowerShell\n        git init\n\n#. Change the license in ``setup.py`` and replace the generated ``LICENSE`` file with the one of your choice. If you would like to use the MIT license, no change is necessary.\n\n#. Change the ``classifiers`` keyword in ``setup.py``. This *will* require modification.\n\n#. Replace this README with your own text.\n\n#. *(Optional, but good practice)* Create a new virtual environment for your project:\n\n   With pyenv_ and pyenv-virtualenv_::\n\n       pyenv virtualenv my-project\n       pyenv local my-project\n\n   With virtualenvwrapper_::\n\n       mkvirtualenv my-project\n\n   With plain virtualenv_::\n\n       virtualenv /path/to/my-project-venv\n       source /path/to/my-project-venv/bin/activate\n\n   If you are new to virtual environments, please see the `Virtual Environment section`_ of Kenneth Reitz's Python Guide.\n\n#. Install the project's development and runtime requirements::\n\n        pip install -r requirements-dev.txt\n\n#. Install ``argparse`` package when developing on Python 2.6::\n\n        pip install argparse\n\n#. Run the tests::\n\n        paver test_all\n\n   You should see output similar to this::\n\n       $ paver test_all\n       ---> pavement.test_all\n       No style errors\n       ========================================= test session starts =========================================\n       platform darwin -- Python 2.7.3 -- pytest-2.3.4\n       collected 5 items\n\n       tests/test_main.py .....\n\n       ====================================== 5 passed in 0.05 seconds =======================================\n         ___  _   ___ ___ ___ ___\n        | _ \\/_\\ / __/ __| __|   \\\n        |  _/ _ \\\\__ \\__ \\ _|| |) |\n        |_|/_/ \\_\\___/___/___|___/\n\n   The substitution performed is rather naive, so some style errors may be reported if the description or name cause lines to be too long. Correct these manually before moving to the next step. If any unit tests fail to pass, please report an issue.\n\nProject setup is now complete!\n\n.. _pyenv: https://github.com/yyuu/pyenv\n.. _pyenv-virtualenv: https://github.com/yyuu/pyenv-virtualenv\n.. _virtualenvwrapper: http://virtualenvwrapper.readthedocs.org/en/latest/index.html\n.. _virtualenv: http://www.virtualenv.org/en/latest/\n.. _Virtual Environment section: http://docs.python-guide.org/en/latest/dev/virtualenvs/\n\nUsing Paver\n-----------\n\nThe ``pavement.py`` file comes with a number of tasks already set up for you. You can see a full list by typing ``paver help`` in the project root directory. The following are included::\n\n    Tasks from pavement:\n    lint             - Perform PEP8 style check, run PyFlakes, and run McCabe complexity metrics on the code.\n    doc_open         - Build the HTML docs and open them in a web browser.\n    coverage         - Run tests and show test coverage report.\n    doc_watch        - Watch for changes in the Sphinx documentation and rebuild when changed.\n    test             - Run the unit tests.\n    get_tasks        - Get all paver-defined tasks.\n    commit           - Commit only if all the tests pass.\n    test_all         - Perform a style check and run all unit tests.\n\nFor example, to run the both the unit tests and lint, run the following in the project root directory::\n\n    paver test_all\n\nTo build the HTML documentation, then open it in a web browser::\n\n    paver doc_open\n\nUsing Tox\n---------\n\nTox is a tool for running your tests on all supported Python versions.\nRunning it via ``tox`` from the project root directory calls ``paver test_all`` behind the scenes for each Python version,\nand does an additional test run to ensure documentation generation works flawlessly.\nYou can customize the list of supported and thus tested Python versions in the ``tox.ini`` file.\n\nPip Requirements Files vs. Setuptools ``install_requires`` Keyword\n------------------------------------------------------------------\n\nThe difference in use case between these two mechanisms can be very confusing. The `pip requirements files`_ is the conventionally-named ``requirements.txt`` that sits in the root directory of many repositories, including this one. The `Setuptools install_requires keyword`_ is the list of dependencies declared in ``setup.py`` that is automatically installed by ``pip`` or ``easy_install`` when a package is installed. They have similar but distinct purposes:\n\n``install_requires`` keyword\n    Install runtime dependencies for the package. This list is meant to *exclude* versions of dependent packages that do not work with this Python package. This is intended to be run automatically by ``pip`` or ``easy_install``.\n\npip requirements file\n    Install runtime and/or development dependencies for the package. Replicate an environment by specifying exact versions of packages that are confirmed to work together. The goal is to `ensure repeatability`_ and provide developers with an identical development environment. This is intended to be run manually by the developer using ``pip install -r requirements-dev.txt``.\n\nFor more information, see the answer provided by Ian Bicking (author of pip) to `this StackOverflow question`_.\n\n.. _Pip requirements files: http://www.pip-installer.org/en/latest/requirements.html\n.. _Setuptools install_requires keyword: http://pythonhosted.org/setuptools/setuptools.html?highlight=install_requires#declaring-dependencies\n.. _ensure repeatability: http://www.pip-installer.org/en/latest/cookbook.html#ensuring-repeatability\n.. _this StackOverflow question: http://stackoverflow.com/questions/6947988/when-to-use-pip-requirements-file-versus-install-requires-in-setup-py\n\nSupported Python Versions\n=========================\n\nPython Project Template supports the following versions out of the box:\n\n* CPython 2.6, 2.7, 3.3\n* PyPy 1.9\n\nCPython 3.0-3.2 may also work but are at this point unsupported. PyPy 2.0.2 is known to work but is not run on Travis-CI.\n\nJython_ and IronPython_ may also work, but have not been tested. If there is interest in support for these alternative implementations, please open a feature request!\n\n.. _Jython: http://jython.org/\n.. _IronPython: http://ironpython.net/\n\nLicenses\n========\n\nThe code which makes up this Python project template is licensed under the MIT/X11 license. Feel free to use it in your free software/open-source or proprietary projects.\n\nThe template also uses a number of other pieces of software, whose licenses are listed here for convenience. It is your responsibility to ensure that these licenses are up-to-date for the version of each tool you are using.\n\n+------------------------+----------------------------------+\n|Project                 |License                           |\n+========================+==================================+\n|Python itself           |Python Software Foundation License|\n+------------------------+----------------------------------+\n|argparse (now in stdlib)|Python Software Foundation License|\n+------------------------+----------------------------------+\n|Sphinx                  |Simplified BSD License            |\n+------------------------+----------------------------------+\n|Paver                   |Modified BSD License              |\n+------------------------+----------------------------------+\n|colorama                |Modified BSD License              |\n+------------------------+----------------------------------+\n|flake8                  |MIT/X11 License                   |\n+------------------------+----------------------------------+\n|mock                    |Modified BSD License              |\n+------------------------+----------------------------------+\n|pytest                  |MIT/X11 License                   |\n+------------------------+----------------------------------+\n|tox                     |MIT/X11 License                   |\n+------------------------+----------------------------------+\n\nIssues\n======\n\nPlease report any bugs or requests that you have using the Github issue tracker!\n\nDevelopment\n===========\n\nIf you wish to contribute, first make your changes. Then run the following from the project root directory::\n\n    source internal/test.sh\n\nThis will copy the template directory to a temporary directory, run the generation, then run tox. Any arguments passed will go directly to the tox command line, e.g.::\n\n    source internal/test.sh -e py27\n\nThis command line would just test Python 2.7.\n\nAuthors\n=======\n\n* Sean Fisk\n* Benjamin Schwarze", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/marcelocure/octopusapi", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "octopusapi", "package_url": "https://pypi.org/project/octopusapi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/octopusapi/", "project_urls": {"Homepage": "http://github.com/marcelocure/octopusapi"}, "release_url": "https://pypi.org/project/octopusapi/0.1/", "requires_dist": null, "requires_python": null, "summary": "octopusapi", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/seanfisk/python-project-template\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/seanfisk/python-project-template.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44ff3f956948092cc196ac0b23506988d2265474/68747470733a2f2f7472617669732d63692e6f72672f7365616e6669736b2f707974686f6e2d70726f6a6563742d74656d706c6174652e706e67\"></a>\n<p>This project provides a best-practices template Python project which integrates several different tools. It saves you work by setting up a number of things, including documentation, code checking, and unit test runners.</p>\n<p>As it is an all-in-one solution, the tools used are rather opinionated. They include:</p>\n<ul>\n<li><a href=\"http://paver.github.io/paver/\" rel=\"nofollow\">Paver</a> for running miscellaneous tasks</li>\n<li><a href=\"http://pythonhosted.org/setuptools/merge.html\" rel=\"nofollow\">Setuptools</a> for distribution (Setuptools and <a href=\"http://pythonhosted.org/distribute/\" rel=\"nofollow\">Distribute</a> have <a href=\"http://pythonhosted.org/setuptools/merge.html\" rel=\"nofollow\">merged</a>)</li>\n<li><a href=\"http://sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a> for documentation</li>\n<li><a href=\"https://pypi.python.org/pypi/flake8\" rel=\"nofollow\">flake8</a> for source code checking</li>\n<li><a href=\"http://pytest.org/latest/\" rel=\"nofollow\">pytest</a> for unit testing</li>\n<li><a href=\"http://www.voidspace.org.uk/python/mock/\" rel=\"nofollow\">mock</a> for mocking (not required by the template, but included anyway)</li>\n<li><a href=\"http://testrun.org/tox/latest/\" rel=\"nofollow\">tox</a> for testing on multiple Python versions</li>\n</ul>\n<p>If you are new to Python or new to creating Python projects, see Kenneth Reitz\u2019s <a href=\"http://docs.python-guide.org/en/latest/\" rel=\"nofollow\">Hitchhiker\u2019s Guide to Python</a> for an explanation of some of the tools used here.</p>\n<div id=\"project-setup\">\n<h2>Project Setup</h2>\n<p>This will be the README for your project. For now, follow these instructions to get this project template set up correctly. Then, come back and replace the contents of this README with contents specific to your project.</p>\n<div id=\"instructions\">\n<h3>Instructions</h3>\n<ol>\n<li><p>Clone the template project, replacing <tt><span class=\"pre\">my-project</span></tt> with the name of the project you are creating:</p>\n<pre>git clone https://github.com/seanfisk/python-project-template.git my-project\ncd my-project\n</pre>\n</li>\n<li><p>Edit the metadata file <tt>my_module/metadata.py</tt> to correctly describe your project.</p>\n</li>\n<li><p>Generate files based upon the project metadata you just entered:</p>\n<pre>python internal/generate.py\n</pre>\n<p>The generation script will remove all the template files and generate real files, then self-destruct upon completion.</p>\n</li>\n<li><p>Delete the old git history and optionally re-initialize the repository:</p>\n<pre>rm -rf .git # or `ri -recurse -force .git' for PowerShell\ngit init\n</pre>\n</li>\n<li><p>Change the license in <tt>setup.py</tt> and replace the generated <tt>LICENSE</tt> file with the one of your choice. If you would like to use the MIT license, no change is necessary.</p>\n</li>\n<li><p>Change the <tt>classifiers</tt> keyword in <tt>setup.py</tt>. This <em>will</em> require modification.</p>\n</li>\n<li><p>Replace this README with your own text.</p>\n</li>\n<li><p><em>(Optional, but good practice)</em> Create a new virtual environment for your project:</p>\n<p>With <a href=\"https://github.com/yyuu/pyenv\" rel=\"nofollow\">pyenv</a> and <a href=\"https://github.com/yyuu/pyenv-virtualenv\" rel=\"nofollow\">pyenv-virtualenv</a>:</p>\n<pre>pyenv virtualenv my-project\npyenv local my-project\n</pre>\n<p>With <a href=\"http://virtualenvwrapper.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">virtualenvwrapper</a>:</p>\n<pre>mkvirtualenv my-project\n</pre>\n<p>With plain <a href=\"http://www.virtualenv.org/en/latest/\" rel=\"nofollow\">virtualenv</a>:</p>\n<pre>virtualenv /path/to/my-project-venv\nsource /path/to/my-project-venv/bin/activate\n</pre>\n<p>If you are new to virtual environments, please see the <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\" rel=\"nofollow\">Virtual Environment section</a> of Kenneth Reitz\u2019s Python Guide.</p>\n</li>\n<li><p>Install the project\u2019s development and runtime requirements:</p>\n<pre>pip install -r requirements-dev.txt\n</pre>\n</li>\n<li><p>Install <tt>argparse</tt> package when developing on Python 2.6:</p>\n<pre>pip install argparse\n</pre>\n</li>\n<li><p>Run the tests:</p>\n<pre>paver test_all\n</pre>\n<p>You should see output similar to this:</p>\n<pre>$ paver test_all\n---&gt; pavement.test_all\nNo style errors\n========================================= test session starts =========================================\nplatform darwin -- Python 2.7.3 -- pytest-2.3.4\ncollected 5 items\n\ntests/test_main.py .....\n\n====================================== 5 passed in 0.05 seconds =======================================\n  ___  _   ___ ___ ___ ___\n | _ \\/_\\ / __/ __| __|   \\\n |  _/ _ \\\\__ \\__ \\ _|| |) |\n |_|/_/ \\_\\___/___/___|___/\n</pre>\n<p>The substitution performed is rather naive, so some style errors may be reported if the description or name cause lines to be too long. Correct these manually before moving to the next step. If any unit tests fail to pass, please report an issue.</p>\n</li>\n</ol>\n<p>Project setup is now complete!</p>\n</div>\n<div id=\"using-paver\">\n<h3>Using Paver</h3>\n<p>The <tt>pavement.py</tt> file comes with a number of tasks already set up for you. You can see a full list by typing <tt>paver help</tt> in the project root directory. The following are included:</p>\n<pre>Tasks from pavement:\nlint             - Perform PEP8 style check, run PyFlakes, and run McCabe complexity metrics on the code.\ndoc_open         - Build the HTML docs and open them in a web browser.\ncoverage         - Run tests and show test coverage report.\ndoc_watch        - Watch for changes in the Sphinx documentation and rebuild when changed.\ntest             - Run the unit tests.\nget_tasks        - Get all paver-defined tasks.\ncommit           - Commit only if all the tests pass.\ntest_all         - Perform a style check and run all unit tests.\n</pre>\n<p>For example, to run the both the unit tests and lint, run the following in the project root directory:</p>\n<pre>paver test_all\n</pre>\n<p>To build the HTML documentation, then open it in a web browser:</p>\n<pre>paver doc_open\n</pre>\n</div>\n<div id=\"using-tox\">\n<h3>Using Tox</h3>\n<p>Tox is a tool for running your tests on all supported Python versions.\nRunning it via <tt>tox</tt> from the project root directory calls <tt>paver test_all</tt> behind the scenes for each Python version,\nand does an additional test run to ensure documentation generation works flawlessly.\nYou can customize the list of supported and thus tested Python versions in the <tt>tox.ini</tt> file.</p>\n</div>\n<div id=\"pip-requirements-files-vs-setuptools-install-requires-keyword\">\n<h3>Pip Requirements Files vs. Setuptools <tt>install_requires</tt> Keyword</h3>\n<p>The difference in use case between these two mechanisms can be very confusing. The <a href=\"http://www.pip-installer.org/en/latest/requirements.html\" rel=\"nofollow\">pip requirements files</a> is the conventionally-named <tt>requirements.txt</tt> that sits in the root directory of many repositories, including this one. The <a href=\"http://pythonhosted.org/setuptools/setuptools.html?highlight=install_requires#declaring-dependencies\" rel=\"nofollow\">Setuptools install_requires keyword</a> is the list of dependencies declared in <tt>setup.py</tt> that is automatically installed by <tt>pip</tt> or <tt>easy_install</tt> when a package is installed. They have similar but distinct purposes:</p>\n<dl>\n<dt><tt>install_requires</tt> keyword</dt>\n<dd>Install runtime dependencies for the package. This list is meant to <em>exclude</em> versions of dependent packages that do not work with this Python package. This is intended to be run automatically by <tt>pip</tt> or <tt>easy_install</tt>.</dd>\n<dt>pip requirements file</dt>\n<dd>Install runtime and/or development dependencies for the package. Replicate an environment by specifying exact versions of packages that are confirmed to work together. The goal is to <a href=\"http://www.pip-installer.org/en/latest/cookbook.html#ensuring-repeatability\" rel=\"nofollow\">ensure repeatability</a> and provide developers with an identical development environment. This is intended to be run manually by the developer using <tt>pip install <span class=\"pre\">-r</span> <span class=\"pre\">requirements-dev.txt</span></tt>.</dd>\n</dl>\n<p>For more information, see the answer provided by Ian Bicking (author of pip) to <a href=\"http://stackoverflow.com/questions/6947988/when-to-use-pip-requirements-file-versus-install-requires-in-setup-py\" rel=\"nofollow\">this StackOverflow question</a>.</p>\n</div>\n</div>\n<div id=\"supported-python-versions\">\n<h2>Supported Python Versions</h2>\n<p>Python Project Template supports the following versions out of the box:</p>\n<ul>\n<li>CPython 2.6, 2.7, 3.3</li>\n<li>PyPy 1.9</li>\n</ul>\n<p>CPython 3.0-3.2 may also work but are at this point unsupported. PyPy 2.0.2 is known to work but is not run on Travis-CI.</p>\n<p><a href=\"http://jython.org/\" rel=\"nofollow\">Jython</a> and <a href=\"http://ironpython.net/\" rel=\"nofollow\">IronPython</a> may also work, but have not been tested. If there is interest in support for these alternative implementations, please open a feature request!</p>\n</div>\n<div id=\"licenses\">\n<h2>Licenses</h2>\n<p>The code which makes up this Python project template is licensed under the MIT/X11 license. Feel free to use it in your free software/open-source or proprietary projects.</p>\n<p>The template also uses a number of other pieces of software, whose licenses are listed here for convenience. It is your responsibility to ensure that these licenses are up-to-date for the version of each tool you are using.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Project</th>\n<th>License</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Python itself</td>\n<td>Python Software Foundation License</td>\n</tr>\n<tr><td>argparse (now in stdlib)</td>\n<td>Python Software Foundation License</td>\n</tr>\n<tr><td>Sphinx</td>\n<td>Simplified BSD License</td>\n</tr>\n<tr><td>Paver</td>\n<td>Modified BSD License</td>\n</tr>\n<tr><td>colorama</td>\n<td>Modified BSD License</td>\n</tr>\n<tr><td>flake8</td>\n<td>MIT/X11 License</td>\n</tr>\n<tr><td>mock</td>\n<td>Modified BSD License</td>\n</tr>\n<tr><td>pytest</td>\n<td>MIT/X11 License</td>\n</tr>\n<tr><td>tox</td>\n<td>MIT/X11 License</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>Please report any bugs or requests that you have using the Github issue tracker!</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>If you wish to contribute, first make your changes. Then run the following from the project root directory:</p>\n<pre>source internal/test.sh\n</pre>\n<p>This will copy the template directory to a temporary directory, run the generation, then run tox. Any arguments passed will go directly to the tox command line, e.g.:</p>\n<pre>source internal/test.sh -e py27\n</pre>\n<p>This command line would just test Python 2.7.</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<ul>\n<li>Sean Fisk</li>\n<li>Benjamin Schwarze</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1823651, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 00:43:34 2020"}