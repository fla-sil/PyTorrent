{"info": {"author": "Paul Cohn", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.4", "Topic :: Database :: Front-Ends"], "description": "orm.py\n========\n\nA small ORM for Python.\n\nFeatures\n--------\n\n- Basic queries (select, insert, update, order by, limit, offset)\n- Simple model interace with foreign keys\n\n\nNot Features\n------------\n\n- Database or table creation, modification, or migration\n- Joins, full text search, most other database features\n\n\nRequirements\n------------\n\n- python3\n- postgresql\n- psycopg2\n\n\nTo do\n-----\n\n- python2 support\n- better comparison support\n- only update fields that have changed\n- order by with `get`\n- query unique entries\n- tests\n- improve query interface\n- expand sql functionality\n\n\nExample\n===\n\nTables are not created for you, so you must create them yourself.\nTable names should match the class name when converted to underscore-\nseparated words, so a class UserRelationship will map to the table\n\"user\\_relationship\".\n\nTables must have a serial primary key called \"id\", and foreign key\nfields must be appended with \"\\_id\".\n\n    import orm\n\n    ''' You should first set up tables named \"user\" and \"message\" '''\n    class User(orm.Model):\n        username = orm.Field()\n        password = orm.Field()\n\n        def get_all_received_messages(self):\n            ''' You could also pass in a limit and offset, or yield results\n                one at a time.\n            '''\n            return list(Message.all(user_to=self, order_by='-date_sent'))\n\n        def get_all_sent_messages(self):\n            return list(Message.all(user_from=user, order_by='-date_sent'))\n\n    class Message(orm.Model):\n        user_from = orm.ForeignKey(User) # field should be named \"user_from_id\"\n        user_to = orm.ForeignKey(User) # field should be named \"user_to_id\"\n        date_sent = orm.Field()\n        body = orm.Field()\n        read = orm.Field(default=False)        \n\nNow you can make queries in a script or interpreter:\n\n    u = User.get(id=1)\n    m = list(Message.all(user_from=u))\n\nAPI\n---\n\n    user.save()\n\nSaves or updates a Model object.\n\n    user.delete()\n\nDeletes the Model object. Any cascades must be done in table definitions.    \n\n\n    Model.get(id=None, **kwargs)\n\nPass in the ID or kwargs matching your model fields.\n\n    Model.all(separator='AND', order_by=None, limit='ALL', offset=None, **kwargs):\n\n`all` yields the results, so you must catch them in a loop or list.\n\n- separator: pass in 'OR' and a kwarg with a list of possible arguments. For example:\n\n\n    Message.all(separator='OR', user_from=[user_1, user_2])\n\nThis will match all messages from either user\\_1 or user\\_2.\n\n- order\\_by: pass in a string with a field name. Prepend '-' to reverse the order.\n\n- limit: Limit results to first n results.\n\n- offset: Integer to offset your search result\n\n- kwargs: each kwarg value can be a single object or a list.\n\n\n    Model.count(**kwargs)\n\nReturns an integer.\n\n    Model.is_unique(**kwargs)\n\nReturns True or False.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pscohn/orm.py", "keywords": "orm object relational mapper postgres postgresql", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "orm.py", "package_url": "https://pypi.org/project/orm.py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/orm.py/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/pscohn/orm.py"}, "release_url": "https://pypi.org/project/orm.py/0.1/", "requires_dist": null, "requires_python": null, "summary": "A minimal ORM for postgres", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            orm.py<br>========<br><br>A small ORM for Python.<br><br>Features<br>--------<br><br>- Basic queries (select, insert, update, order by, limit, offset)<br>- Simple model interace with foreign keys<br><br><br>Not Features<br>------------<br><br>- Database or table creation, modification, or migration<br>- Joins, full text search, most other database features<br><br><br>Requirements<br>------------<br><br>- python3<br>- postgresql<br>- psycopg2<br><br><br>To do<br>-----<br><br>- python2 support<br>- better comparison support<br>- only update fields that have changed<br>- order by with `get`<br>- query unique entries<br>- tests<br>- improve query interface<br>- expand sql functionality<br><br><br>Example<br>===<br><br>Tables are not created for you, so you must create them yourself.<br>Table names should match the class name when converted to underscore-<br>separated words, so a class UserRelationship will map to the table<br>\"user\\_relationship\".<br><br>Tables must have a serial primary key called \"id\", and foreign key<br>fields must be appended with \"\\_id\".<br><br>    import orm<br><br>    ''' You should first set up tables named \"user\" and \"message\" '''<br>    class User(orm.Model):<br>        username = orm.Field()<br>        password = orm.Field()<br><br>        def get_all_received_messages(self):<br>            ''' You could also pass in a limit and offset, or yield results<br>                one at a time.<br>            '''<br>            return list(Message.all(user_to=self, order_by='-date_sent'))<br><br>        def get_all_sent_messages(self):<br>            return list(Message.all(user_from=user, order_by='-date_sent'))<br><br>    class Message(orm.Model):<br>        user_from = orm.ForeignKey(User) # field should be named \"user_from_id\"<br>        user_to = orm.ForeignKey(User) # field should be named \"user_to_id\"<br>        date_sent = orm.Field()<br>        body = orm.Field()<br>        read = orm.Field(default=False)        <br><br>Now you can make queries in a script or interpreter:<br><br>    u = User.get(id=1)<br>    m = list(Message.all(user_from=u))<br><br>API<br>---<br><br>    user.save()<br><br>Saves or updates a Model object.<br><br>    user.delete()<br><br>Deletes the Model object. Any cascades must be done in table definitions.    <br><br><br>    Model.get(id=None, **kwargs)<br><br>Pass in the ID or kwargs matching your model fields.<br><br>    Model.all(separator='AND', order_by=None, limit='ALL', offset=None, **kwargs):<br><br>`all` yields the results, so you must catch them in a loop or list.<br><br>- separator: pass in 'OR' and a kwarg with a list of possible arguments. For example:<br><br><br>    Message.all(separator='OR', user_from=[user_1, user_2])<br><br>This will match all messages from either user\\_1 or user\\_2.<br><br>- order\\_by: pass in a string with a field name. Prepend '-' to reverse the order.<br><br>- limit: Limit results to first n results.<br><br>- offset: Integer to offset your search result<br><br>- kwargs: each kwarg value can be a single object or a list.<br><br><br>    Model.count(**kwargs)<br><br>Returns an integer.<br><br>    Model.is_unique(**kwargs)<br><br>Returns True or False.\n          </div>"}, "last_serial": 1417215, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f235ee0e328df6ebd71e0965c875f78b", "sha256": "4377945428c9e3c2a7690b44646745ef7556967b1b1cc38e04142c7c73cff9bf"}, "downloads": -1, "filename": "orm.py-0.1-cp34-cp34m-macosx_10_6_x86_64.whl", "has_sig": false, "md5_digest": "f235ee0e328df6ebd71e0965c875f78b", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 4440, "upload_time": "2015-02-10T04:38:57", "upload_time_iso_8601": "2015-02-10T04:38:57.134118Z", "url": "https://files.pythonhosted.org/packages/9a/f0/5568b49dcdecab47a475569c210dfa854e733be7ad668b4567191f5737a8/orm.py-0.1-cp34-cp34m-macosx_10_6_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "206bb5b2efa95aebae1563a3d8f9dfb2", "sha256": "fe479cd24aca7edf65c233170998ff03ff3cbc908e22a402e450a886336432c2"}, "downloads": -1, "filename": "orm.py-0.1.tar.gz", "has_sig": false, "md5_digest": "206bb5b2efa95aebae1563a3d8f9dfb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2280, "upload_time": "2015-02-10T04:39:03", "upload_time_iso_8601": "2015-02-10T04:39:03.926689Z", "url": "https://files.pythonhosted.org/packages/4b/f2/68ad02a6e7ae31e7885e43e908c0cba7829d0fb82e6a69fcc9f1ae0dcd42/orm.py-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f235ee0e328df6ebd71e0965c875f78b", "sha256": "4377945428c9e3c2a7690b44646745ef7556967b1b1cc38e04142c7c73cff9bf"}, "downloads": -1, "filename": "orm.py-0.1-cp34-cp34m-macosx_10_6_x86_64.whl", "has_sig": false, "md5_digest": "f235ee0e328df6ebd71e0965c875f78b", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 4440, "upload_time": "2015-02-10T04:38:57", "upload_time_iso_8601": "2015-02-10T04:38:57.134118Z", "url": "https://files.pythonhosted.org/packages/9a/f0/5568b49dcdecab47a475569c210dfa854e733be7ad668b4567191f5737a8/orm.py-0.1-cp34-cp34m-macosx_10_6_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "206bb5b2efa95aebae1563a3d8f9dfb2", "sha256": "fe479cd24aca7edf65c233170998ff03ff3cbc908e22a402e450a886336432c2"}, "downloads": -1, "filename": "orm.py-0.1.tar.gz", "has_sig": false, "md5_digest": "206bb5b2efa95aebae1563a3d8f9dfb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2280, "upload_time": "2015-02-10T04:39:03", "upload_time_iso_8601": "2015-02-10T04:39:03.926689Z", "url": "https://files.pythonhosted.org/packages/4b/f2/68ad02a6e7ae31e7885e43e908c0cba7829d0fb82e6a69fcc9f1ae0dcd42/orm.py-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:32 2020"}