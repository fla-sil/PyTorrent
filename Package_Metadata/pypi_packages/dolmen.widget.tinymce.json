{"info": {"author": "Souheil Chelfouh", "author_email": "trollfot@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Other Audience", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "=====================\ndolmen.widget.tinymce\n=====================\n\n`dolmen.widget.tinymce` is a package that provides a useable and\npluggable way to render a text field as a WYSIWG editor in a\n`zeam.form` Form.\n\nExample\n=======\n\nWe are going to develop here a small example, to demonstrate the use\nof `dolmen.widget.tinymce`. First, we need to create a model content with\na text field::\n\n  >>> import grokcore.component as grok\n  >>> from zope.interface import Interface\n  >>> from zope.schema import Text\n  >>> from zope.schema.fieldproperty import FieldProperty\n\n  >>> class ICave(Interface):\n  ...   paintings = Text(title=u'Description of the cave paintings')\n\n  >>> class Grotto(grok.Context):\n  ...   paintings = FieldProperty(ICave['paintings'])\n\nWe have now a model that defines a text field. We want to edit/view\nthis content, using a rich editor, allowing to input rich text and to\ndisplay it as valid HTML. To do so, we define a form:\n\n  >>> from zeam.form.ztk import Form, Fields\n\n  >>> class EditCave(Form):\n  ...    grok.name('edit')\n  ...    grok.context(ICave)\n  ...    ignoreContent = False\n  ...    fields = Fields(ICave)\n\n  >>> grok.testing.grok_component('edit', EditCave)\n  True\n\nAt this point, if we instanciate the form, we have a normal\nrendering::\n\n  >>> from zope.publisher.browser import TestRequest\n\n  >>> homecave = Grotto()\n  >>> request = TestRequest()\n\n  >>> form = EditCave(homecave, request)\n  >>> form.updateWidgets()\n \n  >>> print form.fieldWidgets.get('form.field.paintings').render() \n  <textarea id=\"form-field-paintings\" name=\"form.field.paintings\" class=\"field field-text field-required\" cols=\"80\" rows=\"5\"></textarea>\n\nTo get the tinyMCE widget, you simply need to use the \"mode\" of the\nfield, to indicate what you want to render::\n\n  >>> from dolmen.widget.tinymce import TINYMCE_INPUT\n\n  >>> form = EditCave(homecave, request)\n  >>> form.fields['paintings'].mode = TINYMCE_INPUT\n  >>> form.updateWidgets()\n\n  >>> print form.fieldWidgets.get('form.field.paintings').render()\n  <script type=\"text/javascript\">\n     $(document).ready(function(){\n        $('textarea[name=\"form.field.paintings\"]').tinymce();\n     });\n  </script>\n  <textarea id=\"form-field-paintings\"\n            name=\"form.field.paintings\"\n            class=\"field field-text field-required\"\n            cols=\"80\" rows=\"5\"></textarea>\n\nThe modes can be 'tinymce.input' for an input widget and\n'tinymce.display' to display the value as valid html::\n\n  >>> from dolmen.widget.tinymce import TINYMCE_DISPLAY\n  >>> homecave.paintings = u\"<h1>Very nice paintings</h1><p>Mammoth</p>\"\n  \n  >>> form = EditCave(homecave, request)\n  >>> form.fields['paintings'].mode = TINYMCE_DISPLAY\n  >>> form.updateWidgets()\n\n  >>> print form.fieldWidgets.get('form.field.paintings').render()\n  <div id=\"form-field-paintings\" name=\"form.field.paintings\"\n       class=\"field\"><h1>Very nice paintings</h1><p>Mammoth</p></div>\n\n\nChangelog\n=========\n\n1.0b3 (2011-01-18)\n------------------\n\n* Corrected entry points and inclusion path.\n\n\n1.0b2 (2011-01-13)\n------------------\n\n* Now we're using ``fanstatic``.\n\n\n1.0b1 (2010-07-06)\n------------------\n\n* Tuned the menus of the TinyMCE widget, in order to removed useless\n  options.\n\n* The package is now using the latest changes in the ``zeam.form``\n  core, such as the ModeMarker, in order to get sane mode definitions.\n\n\n1.0a1 (2010-06-06)\n------------------\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://gitweb.dolmen-project.org/", "keywords": "Grok Zope3 CMS Dolmen", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "dolmen.widget.tinymce", "package_url": "https://pypi.org/project/dolmen.widget.tinymce/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dolmen.widget.tinymce/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://gitweb.dolmen-project.org/"}, "release_url": "https://pypi.org/project/dolmen.widget.tinymce/1.0b3/", "requires_dist": null, "requires_python": null, "summary": "A rich text widget using TinyMCE for Dolmen", "version": "1.0b3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>dolmen.widget.tinymce</cite> is a package that provides a useable and\npluggable way to render a text field as a WYSIWG editor in a\n<cite>zeam.form</cite> Form.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>We are going to develop here a small example, to demonstrate the use\nof <cite>dolmen.widget.tinymce</cite>. First, we need to create a model content with\na text field:</p>\n<pre>&gt;&gt;&gt; import grokcore.component as grok\n&gt;&gt;&gt; from zope.interface import Interface\n&gt;&gt;&gt; from zope.schema import Text\n&gt;&gt;&gt; from zope.schema.fieldproperty import FieldProperty\n\n&gt;&gt;&gt; class ICave(Interface):\n...   paintings = Text(title=u'Description of the cave paintings')\n\n&gt;&gt;&gt; class Grotto(grok.Context):\n...   paintings = FieldProperty(ICave['paintings'])\n</pre>\n<p>We have now a model that defines a text field. We want to edit/view\nthis content, using a rich editor, allowing to input rich text and to\ndisplay it as valid HTML. To do so, we define a form:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zeam.form.ztk import Form, Fields\n</pre>\n<pre>&gt;&gt;&gt; class EditCave(Form):\n...    grok.name('edit')\n...    grok.context(ICave)\n...    ignoreContent = False\n...    fields = Fields(ICave)\n</pre>\n<pre>&gt;&gt;&gt; grok.testing.grok_component('edit', EditCave)\nTrue\n</pre>\n</blockquote>\n<p>At this point, if we instanciate the form, we have a normal\nrendering:</p>\n<pre>&gt;&gt;&gt; from zope.publisher.browser import TestRequest\n\n&gt;&gt;&gt; homecave = Grotto()\n&gt;&gt;&gt; request = TestRequest()\n\n&gt;&gt;&gt; form = EditCave(homecave, request)\n&gt;&gt;&gt; form.updateWidgets()\n\n&gt;&gt;&gt; print form.fieldWidgets.get('form.field.paintings').render()\n&lt;textarea id=\"form-field-paintings\" name=\"form.field.paintings\" class=\"field field-text field-required\" cols=\"80\" rows=\"5\"&gt;&lt;/textarea&gt;\n</pre>\n<p>To get the tinyMCE widget, you simply need to use the \u201cmode\u201d of the\nfield, to indicate what you want to render:</p>\n<pre>&gt;&gt;&gt; from dolmen.widget.tinymce import TINYMCE_INPUT\n\n&gt;&gt;&gt; form = EditCave(homecave, request)\n&gt;&gt;&gt; form.fields['paintings'].mode = TINYMCE_INPUT\n&gt;&gt;&gt; form.updateWidgets()\n\n&gt;&gt;&gt; print form.fieldWidgets.get('form.field.paintings').render()\n&lt;script type=\"text/javascript\"&gt;\n   $(document).ready(function(){\n      $('textarea[name=\"form.field.paintings\"]').tinymce();\n   });\n&lt;/script&gt;\n&lt;textarea id=\"form-field-paintings\"\n          name=\"form.field.paintings\"\n          class=\"field field-text field-required\"\n          cols=\"80\" rows=\"5\"&gt;&lt;/textarea&gt;\n</pre>\n<p>The modes can be \u2018tinymce.input\u2019 for an input widget and\n\u2018tinymce.display\u2019 to display the value as valid html:</p>\n<pre>&gt;&gt;&gt; from dolmen.widget.tinymce import TINYMCE_DISPLAY\n&gt;&gt;&gt; homecave.paintings = u\"&lt;h1&gt;Very nice paintings&lt;/h1&gt;&lt;p&gt;Mammoth&lt;/p&gt;\"\n\n&gt;&gt;&gt; form = EditCave(homecave, request)\n&gt;&gt;&gt; form.fields['paintings'].mode = TINYMCE_DISPLAY\n&gt;&gt;&gt; form.updateWidgets()\n\n&gt;&gt;&gt; print form.fieldWidgets.get('form.field.paintings').render()\n&lt;div id=\"form-field-paintings\" name=\"form.field.paintings\"\n     class=\"field\"&gt;&lt;h1&gt;Very nice paintings&lt;/h1&gt;&lt;p&gt;Mammoth&lt;/p&gt;&lt;/div&gt;\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"b3-2011-01-18\">\n<h3>1.0b3 (2011-01-18)</h3>\n<ul>\n<li>Corrected entry points and inclusion path.</li>\n</ul>\n</div>\n<div id=\"b2-2011-01-13\">\n<h3>1.0b2 (2011-01-13)</h3>\n<ul>\n<li>Now we\u2019re using <tt>fanstatic</tt>.</li>\n</ul>\n</div>\n<div id=\"b1-2010-07-06\">\n<h3>1.0b1 (2010-07-06)</h3>\n<ul>\n<li>Tuned the menus of the TinyMCE widget, in order to removed useless\noptions.</li>\n<li>The package is now using the latest changes in the <tt>zeam.form</tt>\ncore, such as the ModeMarker, in order to get sane mode definitions.</li>\n</ul>\n</div>\n<div id=\"a1-2010-06-06\">\n<h3>1.0a1 (2010-06-06)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 791343, "releases": {"1.0a1": [{"comment_text": "", "digests": {"md5": "1c515e03789e9befe850fac3288f81d2", "sha256": "38d66d8e189970c31b80d3bd215fef31fc3b26d1ffdfdec6cdfe50c63ed3afad"}, "downloads": -1, "filename": "dolmen.widget.tinymce-1.0a1.tar.gz", "has_sig": false, "md5_digest": "1c515e03789e9befe850fac3288f81d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5115, "upload_time": "2010-06-06T19:11:39", "upload_time_iso_8601": "2010-06-06T19:11:39.802838Z", "url": "https://files.pythonhosted.org/packages/b7/8b/0cda47272753a3fe5e422d7ff011c1e18ee01c2b03742d0bccc64c37a739/dolmen.widget.tinymce-1.0a1.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "784611214523eaeed41fa1f01db1d3fb", "sha256": "15be3dd79f0a36e05aa18e78375910e4604bbb48931119b17560f78f7f2b156d"}, "downloads": -1, "filename": "dolmen.widget.tinymce-1.0b1.tar.gz", "has_sig": false, "md5_digest": "784611214523eaeed41fa1f01db1d3fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5219, "upload_time": "2010-07-06T15:55:49", "upload_time_iso_8601": "2010-07-06T15:55:49.777857Z", "url": "https://files.pythonhosted.org/packages/a2/5d/973fef1c523dd6a4a3600ea5fece8dbaaef7a814f7a6824cefba00e9ad78/dolmen.widget.tinymce-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "dd7d8bb6a3d3b9beda6f20b9a1ef96e1", "sha256": "02fb7f1a592e5967c28de38aab94728c6f1c949d25cec12ab88d01d13ed2d6d9"}, "downloads": -1, "filename": "dolmen.widget.tinymce-1.0b2.tar.gz", "has_sig": false, "md5_digest": "dd7d8bb6a3d3b9beda6f20b9a1ef96e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5442, "upload_time": "2011-01-13T16:59:26", "upload_time_iso_8601": "2011-01-13T16:59:26.992103Z", "url": "https://files.pythonhosted.org/packages/14/b6/f5fb9a7bfa7a6d60f055981552e4e3165f96e7146514ce37f54c68793937/dolmen.widget.tinymce-1.0b2.tar.gz", "yanked": false}], "1.0b3": [{"comment_text": "", "digests": {"md5": "80ee3648977d80959bf391826eb1e98c", "sha256": "207d112bf7a645378fa6401db9e81120ab08306aaebb906bada44edf865247d1"}, "downloads": -1, "filename": "dolmen.widget.tinymce-1.0b3.tar.gz", "has_sig": false, "md5_digest": "80ee3648977d80959bf391826eb1e98c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5494, "upload_time": "2011-01-18T19:35:05", "upload_time_iso_8601": "2011-01-18T19:35:05.242315Z", "url": "https://files.pythonhosted.org/packages/5f/98/c0db516318c5213145357d0fb13a27cd372480a71bcb0ee2842f64ed83c8/dolmen.widget.tinymce-1.0b3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "80ee3648977d80959bf391826eb1e98c", "sha256": "207d112bf7a645378fa6401db9e81120ab08306aaebb906bada44edf865247d1"}, "downloads": -1, "filename": "dolmen.widget.tinymce-1.0b3.tar.gz", "has_sig": false, "md5_digest": "80ee3648977d80959bf391826eb1e98c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5494, "upload_time": "2011-01-18T19:35:05", "upload_time_iso_8601": "2011-01-18T19:35:05.242315Z", "url": "https://files.pythonhosted.org/packages/5f/98/c0db516318c5213145357d0fb13a27cd372480a71bcb0ee2842f64ed83c8/dolmen.widget.tinymce-1.0b3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:28 2020"}