{"info": {"author": "Yo Studios AB", "author_email": "opensource@yostudios.se", "bugtrack_url": null, "classifiers": [], "description": "==============\n Spritemapper \n==============\n\n:Homepage: http://yostudios.github.com/Spritemapper/\n:Authors: Yo Studios <opensource@yostudios.se>\n\nSpritemapper is an application that merges multiple images into one and\ngenerates CSS positioning for the corresponding slices.\n\nThe package consists of a simple command-line tool that \"does the job\" and a\nPython library including its own PNG and CSS parser. The choice of\nwriting/bundling this was to stay off 3rd-party requirements. Anybody who has\never had the pleasant job of installing PIL__ on various platforms should have\na pretty good idea about what we're trying to avoid.\n\n__ http://www.pythonware.com/products/pil/\n\nThere are multiple alternatives to Spritemapper, but they all require a bit too\nmuch manual labour, whereas Spritemapper reads your current CSS, replacing\nbackground images and position with the generated result. \n\nThis technique drastically improves your website's loading speed, effectively\nreducing bandwidth by downloading fewer images.\n\nSpritemapper in action\n----------------------\n\nHere's a simple example illustrating what Spritemapper will do with your CSS::\n\n   .emote.smile {\n     background: red url(../img/emoticons/smile.png) no-repeat;\n   }\n   .emote.grin {\n     background: white url(../img/emoticons/grin.png) no-repeat;\n   }\n\nturns into::\n\n   .emote.smile {\n     background: red url(../img/emoticons.png) no-repeat 0 0;\n   }\n   .emote.grin {\n     background: white url(../img/emoticons.png) no-repeat 0 -16px;\n   }\n\nCheck our homepage__ for real life examples.\n\n__ http://yostudios.github.com/Spritemapper/\n\nUsage\n-----\n\n``-h``, ``--help``\n    show a help message and exit\n\n``-c INI``, ``--conf=INI``\n    read base configuration from INI (see `Configuration options`_)\n\n``--padding=N``\n    keep N pixels of padding between sprites\n\nConfiguration options\n---------------------\n\nConfiguration options can be specified in one of two ways: inline in the CSS,\n*or* using passing an INI file with defaults. For CSS it looks something like::\n\n   /* spritemapper.output_css = foofile.css\n\nYou can do the exact equivalent using an INI file, like this::\n\n   [spritemapper]\n   output_css = foofile.css\n\nIt's important to note that all paths are relative to the CSS file being\nprocessed.\n\n.. _opt_ref:\n\n``base_url``\n    a url at which the resulting css and image files can be reached.  \n    by default uses file-relative paths (recommended).\n\n``sprite_dirs``\n    a list of directories within which to allow spritemaps to be generated.  \n    by default all directories are eligible.\n\n``recursive``\n    set if sub-spritemaps should be generated when sub-directories are found.\n    set by default.\n\n``output_image``\n    the name of output spritemap image.\n    ``sprite_dirs`` is incompatible with this because both tell the\n    spritemapper how to sort sprites into spritemaps.\n    by default *<dir>* + ``.png``.\n\n``output_css``\n    the name for the rewritten CSS file.\n    by default ``sm_{basename}{extension}``.\n\n``padding``\n    amount of padding space between two images. this is mostly useful to\n    counteract subpixel rendering artifacts on iOS devices.\n    by default 1.\n\n``anneal_steps``\n    a larger number here makes the box packer algorithm try more combinations.\n    by default 9200.\n\nRunning tests\n-------------\n\nThe test suite requires Nose__. You can run them through setup.py, ``python\nsetup.py test`` or plain ``nosetests``.\n\n__ http://somethingaboutorange.com/mrl/projects/nose/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://yostudios.github.com/Spritemapper/", "keywords": null, "license": "MIT/X11", "maintainer": null, "maintainer_email": null, "name": "spritemapper", "package_url": "https://pypi.org/project/spritemapper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/spritemapper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://yostudios.github.com/Spritemapper/"}, "release_url": "https://pypi.org/project/spritemapper/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A suite for merging multiple images and generate corresponding CSS in one go", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Homepage:</th><td><a href=\"http://yostudios.github.com/Spritemapper/\" rel=\"nofollow\">http://yostudios.github.com/Spritemapper/</a></td>\n</tr>\n<tr><th>Authors:</th>\n<td>Yo Studios &lt;opensource@yostudios.se&gt;</td></tr>\n</tbody>\n</table>\n<p>Spritemapper is an application that merges multiple images into one and\ngenerates CSS positioning for the corresponding slices.</p>\n<p>The package consists of a simple command-line tool that \u201cdoes the job\u201d and a\nPython library including its own PNG and CSS parser. The choice of\nwriting/bundling this was to stay off 3rd-party requirements. Anybody who has\never had the pleasant job of installing <a href=\"http://www.pythonware.com/products/pil/\" rel=\"nofollow\">PIL</a> on various platforms should have\na pretty good idea about what we\u2019re trying to avoid.</p>\n<p>There are multiple alternatives to Spritemapper, but they all require a bit too\nmuch manual labour, whereas Spritemapper reads your current CSS, replacing\nbackground images and position with the generated result.</p>\n<p>This technique drastically improves your website\u2019s loading speed, effectively\nreducing bandwidth by downloading fewer images.</p>\n<div id=\"spritemapper-in-action\">\n<h2>Spritemapper in action</h2>\n<p>Here\u2019s a simple example illustrating what Spritemapper will do with your CSS:</p>\n<pre>.emote.smile {\n  background: red url(../img/emoticons/smile.png) no-repeat;\n}\n.emote.grin {\n  background: white url(../img/emoticons/grin.png) no-repeat;\n}\n</pre>\n<p>turns into:</p>\n<pre>.emote.smile {\n  background: red url(../img/emoticons.png) no-repeat 0 0;\n}\n.emote.grin {\n  background: white url(../img/emoticons.png) no-repeat 0 -16px;\n}\n</pre>\n<p>Check our <a href=\"http://yostudios.github.com/Spritemapper/\" rel=\"nofollow\">homepage</a> for real life examples.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<dl>\n<dt><tt><span class=\"pre\">-h</span></tt>, <tt><span class=\"pre\">--help</span></tt></dt>\n<dd>show a help message and exit</dd>\n<dt><tt><span class=\"pre\">-c</span> INI</tt>, <tt><span class=\"pre\">--conf=INI</span></tt></dt>\n<dd>read base configuration from INI (see <a href=\"#configuration-options\" rel=\"nofollow\">Configuration options</a>)</dd>\n<dt><tt><span class=\"pre\">--padding=N</span></tt></dt>\n<dd>keep N pixels of padding between sprites</dd>\n</dl>\n</div>\n<div id=\"configuration-options\">\n<h2>Configuration options</h2>\n<p>Configuration options can be specified in one of two ways: inline in the CSS,\n<em>or</em> using passing an INI file with defaults. For CSS it looks something like:</p>\n<pre>/* spritemapper.output_css = foofile.css\n</pre>\n<p>You can do the exact equivalent using an INI file, like this:</p>\n<pre>[spritemapper]\noutput_css = foofile.css\n</pre>\n<p>It\u2019s important to note that all paths are relative to the CSS file being\nprocessed.</p>\n<dl id=\"opt-ref\">\n<dt><tt>base_url</tt></dt>\n<dd>a url at which the resulting css and image files can be reached.\nby default uses file-relative paths (recommended).</dd>\n<dt><tt>sprite_dirs</tt></dt>\n<dd>a list of directories within which to allow spritemaps to be generated.\nby default all directories are eligible.</dd>\n<dt><tt>recursive</tt></dt>\n<dd>set if sub-spritemaps should be generated when sub-directories are found.\nset by default.</dd>\n<dt><tt>output_image</tt></dt>\n<dd>the name of output spritemap image.\n<tt>sprite_dirs</tt> is incompatible with this because both tell the\nspritemapper how to sort sprites into spritemaps.\nby default <em>&lt;dir&gt;</em> + <tt>.png</tt>.</dd>\n<dt><tt>output_css</tt></dt>\n<dd>the name for the rewritten CSS file.\nby default <tt><span class=\"pre\">sm_{basename}{extension}</span></tt>.</dd>\n<dt><tt>padding</tt></dt>\n<dd>amount of padding space between two images. this is mostly useful to\ncounteract subpixel rendering artifacts on iOS devices.\nby default 1.</dd>\n<dt><tt>anneal_steps</tt></dt>\n<dd>a larger number here makes the box packer algorithm try more combinations.\nby default 9200.</dd>\n</dl>\n</div>\n<div id=\"running-tests\">\n<h2>Running tests</h2>\n<p>The test suite requires <a href=\"http://somethingaboutorange.com/mrl/projects/nose/\" rel=\"nofollow\">Nose</a>. You can run them through setup.py, <tt>python\nsetup.py test</tt> or plain <tt>nosetests</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 799979, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "a98f44ea3db6279ab6b142c7a5f6d4b8", "sha256": "ba49b5884800d5f3adaacfeb9898a5f67304563f0fc6f1dbf025b85435984ebe"}, "downloads": -1, "filename": "spritemapper-0.5.tar.gz", "has_sig": false, "md5_digest": "a98f44ea3db6279ab6b142c7a5f6d4b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166799, "upload_time": "2011-04-13T19:04:17", "upload_time_iso_8601": "2011-04-13T19:04:17.503629Z", "url": "https://files.pythonhosted.org/packages/44/a2/d15eca2edcce5bf6f7917976e168ae3fab1136d04571a04a9a731fc70fc8/spritemapper-0.5.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "5195a2e37489bc16295b77e02338c2d2", "sha256": "16e0104ac8439492fa7e0f951f9a01f073b4d62d1e9cac837867f5e083904055"}, "downloads": -1, "filename": "spritemapper-0.6.0.tar.gz", "has_sig": false, "md5_digest": "5195a2e37489bc16295b77e02338c2d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191182, "upload_time": "2011-04-14T12:56:34", "upload_time_iso_8601": "2011-04-14T12:56:34.904511Z", "url": "https://files.pythonhosted.org/packages/8a/e6/0cdec43292514c764e566d43e2abdc4f06203b95143e4de60a43753c1692/spritemapper-0.6.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f95b317180e4c3adb8d20b4d83ef582f", "sha256": "a8abaf841de0c5b1647bfcd5c32b4accd2f4843b2a55e64f883dda973bd8c94d"}, "downloads": -1, "filename": "spritemapper-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f95b317180e4c3adb8d20b4d83ef582f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 394447, "upload_time": "2011-04-27T18:12:45", "upload_time_iso_8601": "2011-04-27T18:12:45.696266Z", "url": "https://files.pythonhosted.org/packages/80/1c/ef073fd281e35c3c0d98ca461908ff196e87ca3453118a7ddbfb708966af/spritemapper-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f95b317180e4c3adb8d20b4d83ef582f", "sha256": "a8abaf841de0c5b1647bfcd5c32b4accd2f4843b2a55e64f883dda973bd8c94d"}, "downloads": -1, "filename": "spritemapper-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f95b317180e4c3adb8d20b4d83ef582f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 394447, "upload_time": "2011-04-27T18:12:45", "upload_time_iso_8601": "2011-04-27T18:12:45.696266Z", "url": "https://files.pythonhosted.org/packages/80/1c/ef073fd281e35c3c0d98ca461908ff196e87ca3453118a7ddbfb708966af/spritemapper-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:22 2020"}