{"info": {"author": "limodou", "author_email": "limodou@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP :: WSGI"], "description": "\n=====================\nUliweb Introduction\n=====================\n\nAbout Uliweb\n----------------\n\nUliweb is a full-stacked Python based web framework. It has three main design \ngoals, they are: reusability, configurability, and replaceability. All the \nfunctionalities revolve around these goals. \n\nThis project was created and lead by Limodou <mailto:limodou@gmail.com>. \n\nLicense\n------------\n\nUliweb is released under BSD license.\n\nFeatures\n-----------\n\n* Organization\n\n  * MVT(Model View Template) development model.\n  * Distributed development but unified management. Uliweb organizes a project with\n    small apps. Each app can have its own configuration file(settings.ini), template\n    directory, and static directory. Existing apps can be easily reused, but are treated as a compound.\n    web application project if configured as such. Developers can also\n    reference static files and templates between apps, thus easing inter-application data exchange.\n    All apps in a project are loaded by default if INSTALLED_APPS is not configured in\n    the configuration file. All separate app configuration files are automatically processed at\n    project startup.\n\n* URL Mapping\n\n  * Flexiable and powerful URL mapping. Uliweb uses werkzeug's routing module.\n    User can easily define a URL, which in turn can be easily bound with a view function.\n    URLs can also be created reversely according to the view function name. It supports\n    argument definitions in URLs and default URL mapping to a\n    view function.\n\n* View and Template\n\n  * View templates can be automatically applied. If you return a dict variable from\n    view function, Uliweb will automatically try to match and apply a template according\n    to the view function name.\n  * Environment execution mode. Each view function will be run in an environment,\n    which eliminates the need to write many import statements. Plus there are already many\n    objects that can be used directly, for example: request, response, etc. This is DRY and saves a lot of coding\n  * Developers can directly use Python code in a template, the Python code does not need to be indented\n    as long as a pass statement is added at the end of each code block.\n    Uliweb also supports child template inclusion and inheritance.\n\n* ORM\n\n  * Uliorm is based on SQLAlchemy package, so you can use Model layer and SQL\n    expression layer both.\n  * Uliorm integrates with alembic package, you can use it to migrate database\n    automatically.\n\n* I18n\n\n  * Can be used in python and template files.\n  * Browser language and cookie settings are supported including automatic language switching.\n  * Provides a command line tool that developers can use to extract .po files.\n    This can happen either at the app level or project level process. It can automatically merge .pot files to existing\n    .po files.\n\n* Extension\n\n  * Dispatch extension. This is a dispatch processing mechanism that utilizes different\n    types of dispatch points. So you can write procedures to carry out\n    special processes and bind them to these dispatch points. For example, database\n    initialization, I18n process initialization, etc.\n  * middleware extension. It's similar to Django. You can configure it in configuration\n    files. Each middleware can process the request and response objects.\n  * Special function calls in the views module initial process. If you write a special\n    function named __begin__, it'll be processed before any view function can be processed,\n    this allows developers to do some module level processing at that point, for example:\n    check the user authentication, etc.\n\n* Command Line Tools\n\n  * Creates project, creates apps, and include the basic essential directory \n    structure, files and code.\n  * Export static files, you can export all available apps' static files to a\n    special directory. Also supports css and js combination and compress process.\n  * Startup a development web server that's supports debugging and auto reload.\n  * Apps can also have its own command line tools. For example: orm, auth, etc.\n\n* Deployment\n\n  * Supports uwsgi.\n\n* Development\n\n  * Provide a development server, and can be automatically reload when some\n    module files are modified.\n  * Enhanced debugging, you can check the error traceback, template debugging is also supported.\n\nCommuity\n--------\n\n* Mailing List: https://groups.google.com/forum/#!forum/uliweb\n\nLinks\n--------\n\n* **Uliweb** Project Homepage https://github.com/limodou/uliweb3\n* **Uliweb-doc** Documentation Project http://github.com/limodou/uliweb-doc\n* **Uliweb-doc Online** Document http://limodou.github.com/uliweb-doc/zh_CN/uliweb3\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/limodou/uliweb3", "keywords": "wsgi web framework", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "Uliweb3", "package_url": "https://pypi.org/project/Uliweb3/", "platform": "any", "project_url": "https://pypi.org/project/Uliweb3/", "project_urls": {"Homepage": "https://github.com/limodou/uliweb3"}, "release_url": "https://pypi.org/project/Uliweb3/0.1/", "requires_dist": null, "requires_python": "", "summary": "Easy python web framework", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about-uliweb\">\n<h2>About Uliweb</h2>\n<p>Uliweb is a full-stacked Python based web framework. It has three main design\ngoals, they are: reusability, configurability, and replaceability. All the\nfunctionalities revolve around these goals.</p>\n<p>This project was created and lead by Limodou &lt;<a href=\"mailto:limodou%40gmail.com\">mailto:limodou<span>@</span>gmail<span>.</span>com</a>&gt;.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Uliweb is released under BSD license.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Organization<ul>\n<li>MVT(Model View Template) development model.</li>\n<li>Distributed development but unified management. Uliweb organizes a project with\nsmall apps. Each app can have its own configuration file(settings.ini), template\ndirectory, and static directory. Existing apps can be easily reused, but are treated as a compound.\nweb application project if configured as such. Developers can also\nreference static files and templates between apps, thus easing inter-application data exchange.\nAll apps in a project are loaded by default if INSTALLED_APPS is not configured in\nthe configuration file. All separate app configuration files are automatically processed at\nproject startup.</li>\n</ul>\n</li>\n<li>URL Mapping<ul>\n<li>Flexiable and powerful URL mapping. Uliweb uses werkzeug\u2019s routing module.\nUser can easily define a URL, which in turn can be easily bound with a view function.\nURLs can also be created reversely according to the view function name. It supports\nargument definitions in URLs and default URL mapping to a\nview function.</li>\n</ul>\n</li>\n<li>View and Template<ul>\n<li>View templates can be automatically applied. If you return a dict variable from\nview function, Uliweb will automatically try to match and apply a template according\nto the view function name.</li>\n<li>Environment execution mode. Each view function will be run in an environment,\nwhich eliminates the need to write many import statements. Plus there are already many\nobjects that can be used directly, for example: request, response, etc. This is DRY and saves a lot of coding</li>\n<li>Developers can directly use Python code in a template, the Python code does not need to be indented\nas long as a pass statement is added at the end of each code block.\nUliweb also supports child template inclusion and inheritance.</li>\n</ul>\n</li>\n<li>ORM<ul>\n<li>Uliorm is based on SQLAlchemy package, so you can use Model layer and SQL\nexpression layer both.</li>\n<li>Uliorm integrates with alembic package, you can use it to migrate database\nautomatically.</li>\n</ul>\n</li>\n<li>I18n<ul>\n<li>Can be used in python and template files.</li>\n<li>Browser language and cookie settings are supported including automatic language switching.</li>\n<li>Provides a command line tool that developers can use to extract .po files.\nThis can happen either at the app level or project level process. It can automatically merge .pot files to existing\n.po files.</li>\n</ul>\n</li>\n<li>Extension<ul>\n<li>Dispatch extension. This is a dispatch processing mechanism that utilizes different\ntypes of dispatch points. So you can write procedures to carry out\nspecial processes and bind them to these dispatch points. For example, database\ninitialization, I18n process initialization, etc.</li>\n<li>middleware extension. It\u2019s similar to Django. You can configure it in configuration\nfiles. Each middleware can process the request and response objects.</li>\n<li>Special function calls in the views module initial process. If you write a special\nfunction named __begin__, it\u2019ll be processed before any view function can be processed,\nthis allows developers to do some module level processing at that point, for example:\ncheck the user authentication, etc.</li>\n</ul>\n</li>\n<li>Command Line Tools<ul>\n<li>Creates project, creates apps, and include the basic essential directory\nstructure, files and code.</li>\n<li>Export static files, you can export all available apps\u2019 static files to a\nspecial directory. Also supports css and js combination and compress process.</li>\n<li>Startup a development web server that\u2019s supports debugging and auto reload.</li>\n<li>Apps can also have its own command line tools. For example: orm, auth, etc.</li>\n</ul>\n</li>\n<li>Deployment<ul>\n<li>Supports uwsgi.</li>\n</ul>\n</li>\n<li>Development<ul>\n<li>Provide a development server, and can be automatically reload when some\nmodule files are modified.</li>\n<li>Enhanced debugging, you can check the error traceback, template debugging is also supported.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"commuity\">\n<h2>Commuity</h2>\n<ul>\n<li>Mailing List: <a href=\"https://groups.google.com/forum/#!forum/uliweb\" rel=\"nofollow\">https://groups.google.com/forum/#!forum/uliweb</a></li>\n</ul>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><strong>Uliweb</strong> Project Homepage <a href=\"https://github.com/limodou/uliweb3\" rel=\"nofollow\">https://github.com/limodou/uliweb3</a></li>\n<li><strong>Uliweb-doc</strong> Documentation Project <a href=\"http://github.com/limodou/uliweb-doc\" rel=\"nofollow\">http://github.com/limodou/uliweb-doc</a></li>\n<li><strong>Uliweb-doc Online</strong> Document <a href=\"http://limodou.github.com/uliweb-doc/zh_CN/uliweb3\" rel=\"nofollow\">http://limodou.github.com/uliweb-doc/zh_CN/uliweb3</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4722012, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "804599455afc00c666c7c7430dd5db1a", "sha256": "f108810d9473ba4fa4f923392ebb8623bdfd6f06d24a8a6f1966e7d0332c58aa"}, "downloads": -1, "filename": "Uliweb3-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "804599455afc00c666c7c7430dd5db1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 650787, "upload_time": "2019-01-21T15:29:45", "upload_time_iso_8601": "2019-01-21T15:29:45.599333Z", "url": "https://files.pythonhosted.org/packages/18/c9/0d576d0c4ca58d7dc8766d9e05e9755be00b63cddcfb20aa938d29a75d92/Uliweb3-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a073105f9987bd06075bbad74ed6daca", "sha256": "097028ae23aa82444fb6d27622830466e1f225d9b6a024abe0fb576e2d3b3c3a"}, "downloads": -1, "filename": "Uliweb3-0.1.tar.gz", "has_sig": false, "md5_digest": "a073105f9987bd06075bbad74ed6daca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 586668, "upload_time": "2019-01-21T15:29:50", "upload_time_iso_8601": "2019-01-21T15:29:50.418599Z", "url": "https://files.pythonhosted.org/packages/38/86/e8e14ea1f6869d1de6d65e5ba2a08f5274b78f491204dee9af2463dfc0d6/Uliweb3-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "804599455afc00c666c7c7430dd5db1a", "sha256": "f108810d9473ba4fa4f923392ebb8623bdfd6f06d24a8a6f1966e7d0332c58aa"}, "downloads": -1, "filename": "Uliweb3-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "804599455afc00c666c7c7430dd5db1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 650787, "upload_time": "2019-01-21T15:29:45", "upload_time_iso_8601": "2019-01-21T15:29:45.599333Z", "url": "https://files.pythonhosted.org/packages/18/c9/0d576d0c4ca58d7dc8766d9e05e9755be00b63cddcfb20aa938d29a75d92/Uliweb3-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a073105f9987bd06075bbad74ed6daca", "sha256": "097028ae23aa82444fb6d27622830466e1f225d9b6a024abe0fb576e2d3b3c3a"}, "downloads": -1, "filename": "Uliweb3-0.1.tar.gz", "has_sig": false, "md5_digest": "a073105f9987bd06075bbad74ed6daca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 586668, "upload_time": "2019-01-21T15:29:50", "upload_time_iso_8601": "2019-01-21T15:29:50.418599Z", "url": "https://files.pythonhosted.org/packages/38/86/e8e14ea1f6869d1de6d65e5ba2a08f5274b78f491204dee9af2463dfc0d6/Uliweb3-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:11 2020"}