{"info": {"author": "Virginia Ng", "author_email": "virginia@mapbox.com", "bugtrack_url": null, "classifiers": [], "description": "==============\nrio-pansharpen\n==============\n.. image:: https://img.shields.io/pypi/v/rio-pansharpen.svg\n   :target: https://img.shields.io/pypi/v/rio-pansharpen.svg\n\n.. image:: https://circleci.com/gh/mapbox/rio-pansharpen.svg?style=shield&circle\n   :target: https://circleci.com/gh/mapbox/rio-pansharpen\n\npansharpens Landsat 8 scenes.\n\nWhat is pansharpening?\n======================\nPansharpening is a process of using the spatial information in the high-resolution grayscale band (panchromatic, or pan-band) and color information in the multispectral bands to create a single high-resolution color image.\n\n::\n \n    P pan-pixel cluster + M single multispectral pixel = M pan-sharpened pixel\n\nFind more examples and information in the `Mapbox pansharpening blog post <https://www.mapbox.com/blog/l8-pansharpening/>`_.\n\nInstall\n=======\n\nWe highly recommend installing in a virtualenv. Once activated,\n::\n\n    pip install -U pip\n    pip install rio-pansharpen\n\nOr install from source\n::\n\n    git checkout https://github.com/mapbox/rio-pansharpen.git\n    cd rio-pansharpen\n    pip install -U pip\n    pip install -r requirements.txt\n    pip install -e .\n\n\n\nPython API\n==========\n\npansharpen.worker\n-----------------\nThe ``worker`` module pansharpens Landsat 8. Visit the `USGS Landsat page <http://landsat.usgs.gov/band_designations_landsat_satellites.php>`_ page for more information on Landsat 8 band designations.\n\n1. ``worker.pansharpen``\n------------------------\nThe ``worker.pansharpen`` function accepts the following as inputs:\n\n- numpy 3D array with shape == (3, vis_height, vis_width)\n- affine transform defining the georeferencing of the vis array \n- numpy 2D array with shape == (pan_height, pan_width)\n- affine transform defining the georeferencing of the pan array \n- pansharpening method\n\nand outputs:\n\n- numpy 3D array with shape == (3, pan_height, pan_width)\n\n::\n\n    >>> from pansharpen import worker\n    >>> from pansharpen.methods import Brovey\n    ...\n    >>> pansharpened = worker.pansharpen(vis, vis_transform, pan, pan_transform,\n                           pan_dtype, r_crs, dst_crs, weight,\n                           method=\"Brovey\", src_nodata=0)\n\n\n\n2. ``worker.calculate_landsat_pansharpen``\n------------------------------------------\n::\n\n    >>> from pansharpen import worker\n    >>> from pansharpen.utils import _calc_windows\n    >>> import riomucho\n    ...\n    >>> worker.calculate_landsat_pansharpen(src_paths, dst_path, dst_dtype,\n            weight, verbosity, jobs, half_window,\n            customwindow)\n\n\n\nCLI\n===\n\n\npansharpen\n----------\n\n\n::\n\n    Usage: rio pansharpen [OPTIONS] [SRC_PATHS]... DST_PATH\n\n      Pansharpens a landsat scene. Input is a panchromatic band (B8), plus 3 color\n      bands (B4, B3, B2)\n\n         rio pansharpen B8.tif B4.tif B3.tif B2.tif out.tif\n\n      Or with shell expansion\n\n         rio pansharpen LC80410332015283LGN00_B{8,4,3,2}.tif out.tif\n\n    Options:\n      --dst-dtype [uint16|uint8]\n      -w, --weight FLOAT          Weight of blue band [default = 0.2]\n      -v, --verbosity\n      -j, --jobs INTEGER          Number of processes [default = 1]\n      --half-window               Use a half window assuming pan in aligned with\n                                  rgb bands, default: False\n      -c, --customwindow INTEGER  Specify blocksize for custom windows >\n                                  150[default=src_blockswindows]\n      --help                      Show this message and exit.\n      --help                 Show this message and exit.\n\n\n\n\nComparison of Different Pansharpening Methods\n---------------------------------------------\nWe've implemented the Weighted Brovey Transform for pansharpening, which is appropriate for data like Landsat where the panchromatic band is relatively similar in resolution to the color bands.\n\nFor more information on other pansharpening methods such as IHS, PCA, P+XS, Wavelet, VWP, Wavelet with Canny Edge Detector etc, please read our notes `here <https://github.com/mapbox/pansharpening/blob/master/docs/pansharpening_methods.rst>`_.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mapbox/rio-pansharpen", "keywords": "", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "rio-pansharpen", "package_url": "https://pypi.org/project/rio-pansharpen/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rio-pansharpen/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mapbox/rio-pansharpen"}, "release_url": "https://pypi.org/project/rio-pansharpen/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "rio-pansharpen", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://img.shields.io/pypi/v/rio-pansharpen.svg\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/rio-pansharpen.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/123d8d55d41ef760bb3caf866c49a20b38b1fa91/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72696f2d70616e7368617270656e2e737667\"></a>\n<a href=\"https://circleci.com/gh/mapbox/rio-pansharpen\" rel=\"nofollow\"><img alt=\"https://circleci.com/gh/mapbox/rio-pansharpen.svg?style=shield&amp;circle\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9154a3ceb6c085d4b4bc952f94f72fb654de6d5/68747470733a2f2f636972636c6563692e636f6d2f67682f6d6170626f782f72696f2d70616e7368617270656e2e7376673f7374796c653d736869656c6426636972636c65\"></a>\n<p>pansharpens Landsat 8 scenes.</p>\n<div id=\"what-is-pansharpening\">\n<h2>What is pansharpening?</h2>\n<p>Pansharpening is a process of using the spatial information in the high-resolution grayscale band (panchromatic, or pan-band) and color information in the multispectral bands to create a single high-resolution color image.</p>\n<pre>P pan-pixel cluster + M single multispectral pixel = M pan-sharpened pixel\n</pre>\n<p>Find more examples and information in the <a href=\"https://www.mapbox.com/blog/l8-pansharpening/\" rel=\"nofollow\">Mapbox pansharpening blog post</a>.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>We highly recommend installing in a virtualenv. Once activated,</p>\n<pre>pip install -U pip\npip install rio-pansharpen\n</pre>\n<p>Or install from source</p>\n<pre>git checkout https://github.com/mapbox/rio-pansharpen.git\ncd rio-pansharpen\npip install -U pip\npip install -r requirements.txt\npip install -e .\n</pre>\n</div>\n<div id=\"python-api\">\n<h2>Python API</h2>\n<div id=\"pansharpen-worker\">\n<h3>pansharpen.worker</h3>\n<p>The <tt>worker</tt> module pansharpens Landsat 8. Visit the <a href=\"http://landsat.usgs.gov/band_designations_landsat_satellites.php\" rel=\"nofollow\">USGS Landsat page</a> page for more information on Landsat 8 band designations.</p>\n</div>\n<div id=\"worker-pansharpen\">\n<h3>1. <tt>worker.pansharpen</tt></h3>\n<p>The <tt>worker.pansharpen</tt> function accepts the following as inputs:</p>\n<ul>\n<li>numpy 3D array with shape == (3, vis_height, vis_width)</li>\n<li>affine transform defining the georeferencing of the vis array</li>\n<li>numpy 2D array with shape == (pan_height, pan_width)</li>\n<li>affine transform defining the georeferencing of the pan array</li>\n<li>pansharpening method</li>\n</ul>\n<p>and outputs:</p>\n<ul>\n<li>numpy 3D array with shape == (3, pan_height, pan_width)</li>\n</ul>\n<pre>&gt;&gt;&gt; from pansharpen import worker\n&gt;&gt;&gt; from pansharpen.methods import Brovey\n...\n&gt;&gt;&gt; pansharpened = worker.pansharpen(vis, vis_transform, pan, pan_transform,\n                       pan_dtype, r_crs, dst_crs, weight,\n                       method=\"Brovey\", src_nodata=0)\n</pre>\n</div>\n<div id=\"worker-calculate-landsat-pansharpen\">\n<h3>2. <tt>worker.calculate_landsat_pansharpen</tt></h3>\n<pre>&gt;&gt;&gt; from pansharpen import worker\n&gt;&gt;&gt; from pansharpen.utils import _calc_windows\n&gt;&gt;&gt; import riomucho\n...\n&gt;&gt;&gt; worker.calculate_landsat_pansharpen(src_paths, dst_path, dst_dtype,\n        weight, verbosity, jobs, half_window,\n        customwindow)\n</pre>\n</div>\n</div>\n<div id=\"cli\">\n<h2>CLI</h2>\n<div id=\"pansharpen\">\n<h3>pansharpen</h3>\n<pre>Usage: rio pansharpen [OPTIONS] [SRC_PATHS]... DST_PATH\n\n  Pansharpens a landsat scene. Input is a panchromatic band (B8), plus 3 color\n  bands (B4, B3, B2)\n\n     rio pansharpen B8.tif B4.tif B3.tif B2.tif out.tif\n\n  Or with shell expansion\n\n     rio pansharpen LC80410332015283LGN00_B{8,4,3,2}.tif out.tif\n\nOptions:\n  --dst-dtype [uint16|uint8]\n  -w, --weight FLOAT          Weight of blue band [default = 0.2]\n  -v, --verbosity\n  -j, --jobs INTEGER          Number of processes [default = 1]\n  --half-window               Use a half window assuming pan in aligned with\n                              rgb bands, default: False\n  -c, --customwindow INTEGER  Specify blocksize for custom windows &gt;\n                              150[default=src_blockswindows]\n  --help                      Show this message and exit.\n  --help                 Show this message and exit.\n</pre>\n</div>\n<div id=\"comparison-of-different-pansharpening-methods\">\n<h3>Comparison of Different Pansharpening Methods</h3>\n<p>We\u2019ve implemented the Weighted Brovey Transform for pansharpening, which is appropriate for data like Landsat where the panchromatic band is relatively similar in resolution to the color bands.</p>\n<p>For more information on other pansharpening methods such as IHS, PCA, P+XS, Wavelet, VWP, Wavelet with Canny Edge Detector etc, please read our notes <a href=\"https://github.com/mapbox/pansharpening/blob/master/docs/pansharpening_methods.rst\" rel=\"nofollow\">here</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2331941, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "28098baa8b20cd37d2f7da55d8cadcfc", "sha256": "76db161face5b52c379ae92d0a73e017c237572adddd950e02921c849adf951d"}, "downloads": -1, "filename": "rio-pansharpen-0.1.0.tar.gz", "has_sig": false, "md5_digest": "28098baa8b20cd37d2f7da55d8cadcfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6376, "upload_time": "2016-08-05T22:09:29", "upload_time_iso_8601": "2016-08-05T22:09:29.304602Z", "url": "https://files.pythonhosted.org/packages/68/f5/52c3a898627801971c08ed532d83d2366407c70016d27bca88d0abaefcd9/rio-pansharpen-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "52500751f05402551cd3e1128bd5416e", "sha256": "229d57ed3983698a6943851fe8943f5d7a7de6aebdeed7c7f0094f971757f37d"}, "downloads": -1, "filename": "rio-pansharpen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "52500751f05402551cd3e1128bd5416e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5348, "upload_time": "2016-08-05T22:42:01", "upload_time_iso_8601": "2016-08-05T22:42:01.056709Z", "url": "https://files.pythonhosted.org/packages/0c/6d/2bb888fad64f43e6b9f9dcfeff61e674c49e402c3bbc14a54bb13553659a/rio-pansharpen-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "530d6b53eab95720bb9df3a73b7e6a27", "sha256": "e9e9cf3515e0302e0842a30888c0ed9b026cb97a616df6e463286a937372f25a"}, "downloads": -1, "filename": "rio-pansharpen-0.2.0.tar.gz", "has_sig": false, "md5_digest": "530d6b53eab95720bb9df3a73b7e6a27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6552, "upload_time": "2016-09-08T17:36:58", "upload_time_iso_8601": "2016-09-08T17:36:58.326247Z", "url": "https://files.pythonhosted.org/packages/ac/2c/403daf21023a61a8a2a4993f04377707074c4492dc5ee893698b594dfad2/rio-pansharpen-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "530d6b53eab95720bb9df3a73b7e6a27", "sha256": "e9e9cf3515e0302e0842a30888c0ed9b026cb97a616df6e463286a937372f25a"}, "downloads": -1, "filename": "rio-pansharpen-0.2.0.tar.gz", "has_sig": false, "md5_digest": "530d6b53eab95720bb9df3a73b7e6a27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6552, "upload_time": "2016-09-08T17:36:58", "upload_time_iso_8601": "2016-09-08T17:36:58.326247Z", "url": "https://files.pythonhosted.org/packages/ac/2c/403daf21023a61a8a2a4993f04377707074c4492dc5ee893698b594dfad2/rio-pansharpen-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:32 2020"}