{"info": {"author": "Zhenglong Cai", "author_email": "caizl2002@hotmail.com", "bugtrack_url": null, "classifiers": [], "description": "        ===========\r\r\n        \r\r\n        Tools for testing moac based applications.\r\r\n        \r\r\n        Installation\r\r\n        ------------\r\r\n        \r\r\n        .. code:: sh\r\r\n        \r\r\n            pip install moac-tester\r\r\n        \r\r\n        Quick Start\r\r\n        -----------\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> from moac_tester import MoacTester\r\r\n            >>> t = MoacTester()\r\r\n            >>> t.get_accounts()\r\r\n            ('0xaBbACadABa000000000000000000000000000000',\r\r\n             '0xaBbACaDaBA000000000000000000000000000001',\r\r\n             '0xAbbAcaDaBA000000000000000000000000000002',\r\r\n             '0xabBACadaBA000000000000000000000000000003', \r\r\n             '0xabbAcADABa000000000000000000000000000004', \r\r\n             '0xaBBACADABA000000000000000000000000000005', \r\r\n             '0xaBbaCadaBA000000000000000000000000000006',\r\r\n             '0xAbbAcAdaBA000000000000000000000000000007',\r\r\n             '0xaBBAcadabA000000000000000000000000000008', \r\r\n             '0xABbacaDabA000000000000000000000000000009')\r\r\n        \r\r\n            >>> t.get_balance('0xaBbACadABa000000000000000000000000000000')\r\r\n            1000000000000000000000000\r\r\n            >>> t.send_transaction({'from': '0xaBbACadABa000000000000000000000000000000', 'to': '0xaBbACaDaBA000000000000000000000000000001', 'gas': 21000, 'value': 1})\r\r\n            '0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a'\r\r\n            >>> t.get_transaction_by_hash('0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a')\r\r\n            {'block_hash': '0x96e041452b6fcbe75ab7126c490293e2823b4814a4d8efa7c49267cfb10d8ddf', \r\r\n            'v': 27, \r\r\n            'data': '0x', \r\r\n            'from': '0xaBbACadABa000000000000000000000000000000', \r\r\n            'gas_price': 1, \r\r\n            'r': 12345, \r\r\n            'hash': '0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a', \r\r\n            'to': '0xaBbACaDaBA000000000000000000000000000001', \r\r\n            'gas': 21000, \r\r\n            'nonce': 0, \r\r\n            'value': 1, \r\r\n            's': 67890, \r\r\n            'block_number': 1, \r\r\n            'transaction_index': 0}\r\r\n        \r\r\n        \r\r\n            >>> t.get_transaction_receipt('0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a')\r\r\n            {'block_hash': '0x96e041452b6fcbe75ab7126c490293e2823b4814a4d8efa7c49267cfb10d8ddf', \r\r\n            'cumulative_gas_used': 21000, \r\r\n            'status': 0, \r\r\n            'transaction_hash': '0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a', \r\r\n            'contract_address': '0xa0Beb7081fDaF3ed157370836A85eeC20CEc9e04', \r\r\n            'logs': (), \r\r\n            'gas_used': 21000, \r\r\n            'block_number': 1, \r\r\n            'transaction_index': 0}\r\r\n        \r\r\n        Running the tests\r\r\n        ~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        You can run the tests with:\r\r\n        \r\r\n        .. code:: sh\r\r\n        \r\r\n            py.test tests\r\r\n        \r\r\n        Or you can install ``tox`` to run the full test suite.\r\r\n        \r\r\n        Releasing\r\r\n        ~~~~~~~~~\r\r\n        \r\r\n        Pandoc is required for transforming the markdown README to the proper\r\r\n        format to render correctly on pypi.\r\r\n        \r\r\n        For Debian-like systems:\r\r\n        \r\r\n        ::\r\r\n        \r\r\n            apt install pandoc\r\r\n        \r\r\n        Or on OSX:\r\r\n        \r\r\n        .. code:: sh\r\r\n        \r\r\n            brew install pandoc\r\r\n        \r\r\n        To release a new version:\r\r\n        \r\r\n        .. code:: sh\r\r\n        \r\r\n            bumpversion $$VERSION_PART_TO_BUMP$$\r\r\n            git push && git push --tags\r\r\n            make release\r\r\n        \r\r\n        How to bumpversion\r\r\n        ^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        The version format for this repo is ``{major}.{minor}.{patch}`` for\r\r\n        stable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\r\r\n        (``stage`` can be alpha or beta).\r\r\n        \r\r\n        To issue the next version in line, use bumpversion and specify which\r\r\n        part to bump, like ``bumpversion minor`` or ``bumpversion devnum``.\r\r\n        \r\r\n        If you are in a beta version, ``bumpversion stage`` will switch to a\r\r\n        stable.\r\r\n        \r\r\n        To issue an unstable version when the current version is stable, specify\r\r\n        the new version explicitly, like\r\r\n        ``bumpversion --new-version 4.0.0-alpha.1 devnum``\r\r\n        \r\r\n        Documentation\r\r\n        =============\r\r\n        \r\r\n        Input and output data formats\r\r\n        -----------------------------\r\r\n        \r\r\n        The moac tester library strictly enforces the following input formats\r\r\n        and types.\r\r\n        \r\r\n        -  Hexidecimal values **must** be text (not byte) strings. The ``0x``\r\r\n           prefix is optional.\r\r\n        -  Any address which contains mixed-case alpha characters will be\r\r\n           validated as a checksummed address as specified by\r\r\n           `EIP-55 <https://github.com/Moac/EIPs/blob/master/EIPS/eip-55.md>`__\r\r\n        -  32-byte hashes **must** be hexidecimal encoded.\r\r\n        -  Numeric values **must** be in their integer representation.\r\r\n        \r\r\n        Similarly, Moac tester ensures that return values conform to similar\r\r\n        rules.\r\r\n        \r\r\n        -  32-byte hashes will be returned in their hexidecimal encoded\r\r\n           representation.\r\r\n        -  Addresses will be returned in their hexidecimal representation and\r\r\n           EIP55 checksummed.\r\r\n        -  Numeric values will be returned as integers.\r\r\n        \r\r\n        Block Numbers\r\r\n        -------------\r\r\n        \r\r\n        Any ``block_number`` parameter will accept the following string values.\r\r\n        \r\r\n        -  ``'latest'``: for the latest mined block.\r\r\n        -  ``'pending'``: for the current un-mined block.\r\r\n        -  ``'earliest'``: for the genesis block.\r\r\n        \r\r\n            Note: These **must** be text strings (not byte strings)\r\r\n        \r\r\n        ``moac_tester.MoacTester``\r\r\n        --------------------------\r\r\n        \r\r\n        API\r\r\n        ~~~\r\r\n        \r\r\n        Instantiation\r\r\n        ~~~~~~~~~~~~~\r\r\n        \r\r\n        -  ``moac_tester.MoacTester(backend=None, validator=None, normalizer=None, auto_mine_transactions=True, fork_blocks=None)``\r\r\n        \r\r\n        The ``MoacTester`` object is the sole API entrypoint. Instantiation of\r\r\n        this object accepts the following parameters.\r\r\n        \r\r\n        -  ``backend``: The chain backend being used. See the `chain\r\r\n           backends <#backends>`__\r\r\n        -  ``validator``: The validator to used. See the\r\r\n           `validators <#validation>`__\r\r\n        -  ``normalizer``: The normalizer to used. See the\r\r\n           `normalizers <#normalization>`__\r\r\n        -  ``auto_mine_transactions``: If *truthy* transactions will be\r\r\n           automatically mined at the time they are submitted. See\r\r\n           ```enable_auto_mine_transactions`` <#api-enable_auto_mine_transactions>`__\r\r\n           and\r\r\n           ```disable_auto_mine_transactions`` <#api-disable_auto_mine_transactions>`__.\r\r\n        -  ``fork_blocks``: configures which block numbers the various network\r\r\n           hard fork rules will be activated. See `fork-rules <#fork-rules>`__\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> from moac_tester import MoacTester\r\r\n            >>> t = MoacTester()\r\r\n            >>> t\r\r\n            <moac_tester.main.MoacTester at 0x102255710>\r\r\n        \r\r\n        Fork Rules\r\r\n        ~~~~~~~~~~\r\r\n        \r\r\n        Moac tester uses the Byzantium rules, starting at block 0.\r\r\n        \r\r\n        Time Travel\r\r\n        ~~~~~~~~~~~\r\r\n        \r\r\n        The chain can only time travel forward in time.\r\r\n        \r\r\n        ``MoacTester.time_travel(timestamp)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        The ``timestamp`` must be an integer, strictly greater than the current\r\r\n        timestamp of the latest block.\r\r\n        \r\r\n            Note: Time traveling will result in a new block being mined.\r\r\n        \r\r\n        Mining\r\r\n        ~~~~~~\r\r\n        \r\r\n        Manually mining blocks can be done with the following API. The\r\r\n        ``coinbase`` parameter of these methods **must** be a hexidecimal\r\r\n        encoded address.\r\r\n        \r\r\n        ``MoacTester.mine_blocks(num_blocks=1, coinbase=None)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Mines ``num_blocks`` new blocks, returning an iterable of the newly\r\r\n        mined block hashes.\r\r\n        \r\r\n        ``MoacTester.mine_block(coinbase=None)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Mines a single new block, returning the mined block's hash.\r\r\n        \r\r\n        Auto-mining transactions\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        By default all transactions are mined immediately. This means that each\r\r\n        transaction you send will result in a new block being mined, and that\r\r\n        all blocks will only ever have at most a single transaction. This\r\r\n        behavior can be controlled with the following methods.\r\r\n        \r\r\n        ``MoacTester.enable_auto_mine_transactions()``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Turns on auto-mining of transactions.\r\r\n        \r\r\n        ``MoacTester.disable_auto_mine_transactions()``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Turns **off** auto-mining of transactions.\r\r\n        \r\r\n        Accounts\r\r\n        ~~~~~~~~\r\r\n        \r\r\n        The following API can be used to interact with account data. The\r\r\n        ``account`` parameter in these methods **must** be a hexidecimal encode\r\r\n        address.\r\r\n        \r\r\n         ``MoacTester.get_accounts()``\r\r\n        \r\r\n        Returns an iterable of the accounts that the tester knows about. All\r\r\n        accounts in this list will be EIP55 checksummed.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.get_accounts()\r\r\n            ('0xaBbACadABa000000000000000000000000000000',\r\r\n             '0xaBbACaDaBA000000000000000000000000000001',\r\r\n            ...\r\r\n             '0xABbacaDabA000000000000000000000000000009')\r\r\n        \r\r\n        ``MoacTester.add_account(private_key, password=None)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Adds a new account for the given private key. Returns the hex encoded\r\r\n        address of the added account.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d')\r\r\n            '0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\r\r\n        \r\r\n        By default, added accounts are unlocked and do not have a password. If\r\r\n        you would like to add an account which has a password, you can supply\r\r\n        the password as the second parameter.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d', 'my-secret')\r\r\n            '0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\r\r\n        \r\r\n        ``MoacTester.unlock_account(account, password, unlock_seconds=None)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Unlocks the given account if the provided password matches.\r\r\n        \r\r\n        Raises a ``ValidationError`` if:\r\r\n        \r\r\n        -  The account is not known.\r\r\n        -  The password does not match.\r\r\n        -  The account was created without a password.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret')\r\r\n        \r\r\n        By default, accounts will be unlocked indefinitely. You can however\r\r\n        unlock an account for a specified amount of time by providing the\r\r\n        desired duration in seconds.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            # unlock for 1 hour.\r\r\n            >>> t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret', 60 * 60)\r\r\n        \r\r\n        ``MoacTester.lock_account(account)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Locks the provide account.\r\r\n        \r\r\n        Raises a ``ValidationError`` if:\r\r\n        \r\r\n        -  The account is not known\r\r\n        -  The account does not have a password.\r\r\n        \r\r\n        ``MoacTester.get_balance(account) -> integer``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns the balance, in sha, for the provided account.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.get_balance('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\r\r\n            1000004999999999999999999\r\r\n        \r\r\n        ``MoacTester.get_nonce(account) -> integer``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns the nonce for the provided account.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.get_nonce('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\r\r\n            1\r\r\n        \r\r\n        ``MoacTester.get_code(account) -> hex string``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns the code for the given account.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.get_code('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\r\r\n            \"0x\"\r\r\n        \r\r\n        Blocks, Transactions, and Receipts\r\r\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        ``MoacTester.get_transaction_by_hash(transaction_hash) -> transaction-object``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns the transaction for the given hash, raising a\r\r\n        ```TransactionNotFound`` <#errors-TransactionNotFound>`__ exception if\r\r\n        the transaction cannot be found.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.get_transaction_by_hash('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\r\r\n            {'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\r\r\n             'block_number': 0,\r\r\n             'hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\r\r\n             'transaction_index': 0,\r\r\n             'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\r\r\n             'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\r\r\n             'value': 1,\r\r\n             'gas': 21000,\r\r\n             'gas_price': 1,\r\r\n             'nonce': 0,\r\r\n             'data': '0x',\r\r\n             'v': 27,\r\r\n             'r': 114833774457827084417823702749930473879683934597320921824765632039428214735160,\r\r\n             's': 52192522150044217242428968890330558187037131043598164958282684822175843828481}\r\r\n        \r\r\n            Note: For unmined transaction, ``transaction_index``,\r\r\n            ``block_number`` and ``block_hash`` will all be ``None``.\r\r\n        \r\r\n        ``MoacTester.get_block_by_number(block_number, full_transactions=False) -> block-object``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns the block for the given ``block_number``. See `block\r\r\n        numbers <#block-numbers>`__ for named block numbers you can use. If\r\r\n        ``full_transactions`` is truthy, then the transactions array will be\r\r\n        populated with full transaction objects as opposed to their hashes.\r\r\n        \r\r\n        Raises ```BlockNotFound`` <#errors-BlockNotFound>`__ if a block for the\r\r\n        given number cannot be found.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.get_block_by_number(1)\r\r\n            {'difficulty': 131072,\r\r\n             'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\r\r\n             'gas_limit': 999023468,\r\r\n             'gas_used': 0,\r\r\n             'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\r\r\n             'logs_bloom': 0,\r\r\n             'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\r\r\n             'nonce': '0x0000000000000000',\r\r\n             'number': 1,\r\r\n             'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\r\r\n             'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\r\n             'size': 472,\r\r\n             'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\r\r\n             'timestamp': 1410973360,\r\r\n             'total_difficulty': 262144,\r\r\n             'transactions': (),\r\r\n             'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\r\n             'uncles': ()}\r\r\n        \r\r\n        ``MoacTester.get_block_by_hash(block_hash, full_transactions=True) -> block-object``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns the block for the given ``block_hash``. The\r\r\n        ``full_transactions`` parameter behaves the same as in\r\r\n        ```get_block_by_number`` <#api-get_block_by_number>`__.\r\r\n        \r\r\n        Raises ```BlockNotFound`` <#errors-BlockNotFound>`__ if a block for the\r\r\n        given hash cannot be found.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.get_block_by_hash('0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd')\r\r\n            {'difficulty': 131072,\r\r\n             'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\r\r\n             'gas_limit': 999023468,\r\r\n             'gas_used': 0,\r\r\n             'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\r\r\n             'logs_bloom': 0,\r\r\n             'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\r\r\n             'nonce': '0x0000000000000000',\r\r\n             'number': 1,\r\r\n             'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\r\r\n             'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\r\n             'size': 472,\r\r\n             'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\r\r\n             'timestamp': 1410973360,\r\r\n             'total_difficulty': 262144,\r\r\n             'transactions': (),\r\r\n             'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\r\n             'uncles': ()}\r\r\n        \r\r\n        ``MoacTester.get_transaction_receipt(transaction_hash)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns the receipt for the given ``transaction_hash``, raising\r\r\n        ```TransactionNotFound`` <#errors-TransactionNotFound>`__ if no\r\r\n        transaction can be found for the given hash.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> t.get_transaction_receipt('0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b')\r\r\n             {'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\r\r\n             'block_number': 2,\r\r\n             'contract_address': None,\r\r\n             'cumulative_gas_used': 23154,\r\r\n             'gas_used': 23154,\r\r\n             'logs': ({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\r\r\n               'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\r\r\n               'block_number': 2,\r\r\n               'data': '0x',\r\r\n               'log_index': 0,\r\r\n               'topics': (\r\r\n                '0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\r\r\n                '0x0000000000000000000000000000000000000000000000000000000000003039'),\r\r\n               'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\r\r\n               'transaction_index': 0,\r\r\n               'type': 'mined'},),\r\r\n             'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\r\r\n             'transaction_index': 0}\r\r\n        \r\r\n        -  Receipts for unmined transactions will have all of ``block_hash``,\r\r\n           ``block_number`` and ``transaction_index`` set to ``None``.\r\r\n        -  Receipts for transactions which create a contract will have the\r\r\n           created contract address in the ``contract_address`` field.\r\r\n        \r\r\n        Transaction Sending\r\r\n        ~~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        A transaction is a formatted as a dictionary with the following keys and\r\r\n        values.\r\r\n        \r\r\n        -  ``from``: The address of the account sending the transaction\r\r\n           (hexidecimal string).\r\r\n        -  ``to``: The address of the account the transaction is being sent to.\r\r\n           Empty string should be used to trigger contract creation (hexidecimal\r\r\n           string).\r\r\n        -  ``gas``: Sets the gas limit for transaction execution (integer).\r\r\n        -  ``gas_price``: Sets the price per unit of gas in wei that will be\r\r\n           paid for transaction execution (integer).\r\r\n        -  ``value``: The amount of ether in wei that should be sent with the\r\r\n           transaction (integer).\r\r\n        -  ``data``: The data for the transaction (hexidecimal string).\r\r\n        \r\r\n        Methods\r\r\n        ^^^^^^^\r\r\n        \r\r\n        ``MoacTester.send_transaction(transaction) -> transaction_hash``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Sends the provided ``transaction`` object, returning the\r\r\n        ``transaction_hash`` for the sent transaction.\r\r\n        \r\r\n        Logs and Filters\r\r\n        ~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        ``MoacTester.create_block_filter() -> integer``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Creates a new filter for newly mined blocks. Returns the ``filter_id``\r\r\n        which can be used to retrieve the block hashes for the mined blocks.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> filter_id = t.create_block_filter()\r\r\n            >>> t.mine_blocks(3)\r\r\n            >>> t.get_only_filter_changes(filter_id)\r\r\n            ('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\r\r\n             '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\r\r\n             '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea')\r\r\n            >>> t.mine_blocks(2)\r\r\n            >>> t.get_only_filter_changes(filter_id)\r\r\n            ('0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\r\r\n             '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\r\r\n            >>> t.get_all_filter_logs(filter_id)\r\r\n            ('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\r\r\n             '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\r\r\n             '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea',\r\r\n             '0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\r\r\n             '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\r\r\n        \r\r\n        ``MoacTester.create_pending_transaction_filter() -> integer``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Creates a new filter for pending transactions. Returns the ``filter_id``\r\r\n        which can be used to retrieve the transaction hashes for the pending\r\r\n        transactions.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> filter_id = t.create_pending_transaction_filter()\r\r\n            >>> t.send_transaction({...})\r\r\n            '0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566'\r\r\n            >>> t.send_transaction({...})\r\r\n            '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505'\r\r\n            >>> t.get_only_filter_changes(filter_id)\r\r\n            ('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\r\r\n             '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505')\r\r\n            >>> t.send_transaction({...})\r\r\n            '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a'\r\r\n            >>> t.get_only_filter_changes(filter_id)\r\r\n            ('0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a',)\r\r\n            >>> t.get_all_filter_logs(filter_id)\r\r\n            ('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\r\r\n             '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505',\r\r\n             '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a')\r\r\n        \r\r\n        ``MoacTester.create_log_filter(from_block=None, to_block=None, address=None, topics=None) -> integer``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Creates a new filter for logs produced by transactions. The parameters\r\r\n        for this function can be used to filter the log entries.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> filter_id = t.create_log_filter()\r\r\n            >>> t.send_transaction({...})  # something that produces a log entry\r\r\n            '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c'\r\r\n            >>> t.send_transaction({...})  # something that produces a log entry\r\r\n            '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a'\r\r\n            >>> t.get_only_filter_changes(filter_id)\r\r\n            ({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\r\r\n              'block_hash': '0x68c0f318388003b652eae334efbed8bd345c469bd0ca77469183fc9693c23e13',\r\r\n              'block_number': 11,\r\r\n              'data': '0x',\r\r\n              'log_index': 0,\r\r\n              'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\r\r\n               '0x0000000000000000000000000000000000000000000000000000000000003039'),\r\r\n              'transaction_hash': '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c',\r\r\n              'transaction_index': 0,\r\r\n              'type': 'mined'},\r\r\n             {'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\r\r\n              'block_hash': '0x07d7e46be6f9ba53ecd4323fb99ec656e652c4b14f4b8e8a244ee7f997464725',\r\r\n              'block_number': 12,\r\r\n              'data': '0x',\r\r\n              'log_index': 0,\r\r\n              'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\r\r\n               '0x0000000000000000000000000000000000000000000000000000000000010932'),\r\r\n              'transaction_hash': '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a',\r\r\n              'transaction_index': 0,\r\r\n              'type': 'mined'})\r\r\n        \r\r\n        See `the filtering guide <#guide-filtering>`__ for detailed information\r\r\n        on how to use filters.\r\r\n        \r\r\n        ``MoacTester.delete_filter(filter_id)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Removes the filter for the provide ``filter_id``. If no filter is found\r\r\n        for the given ``filter_id``, raises\r\r\n        ```FilterNotFound`` <#errors-FilterNotFound>`__.\r\r\n        \r\r\n        ``MoacTester.get_only_filter_changes(filter_id) -> transaction_hash or block_hash or log_entry``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns all new values for the provided ``filter_id`` that have not\r\r\n        previously been returned through this API. Raises\r\r\n        ```FilterNotFound`` <#errors-FilterNotFound>`__ if no filter is found\r\r\n        for the given ``filter_id``.\r\r\n        \r\r\n        ``MoacTester.get_all_filter_logs(filter_id) -> transaction_hash or block_hash or log_entry``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Returns all values for the provided ``filter_id``. Raises\r\r\n        ```FilterNotFound`` <#errors-FilterNotFound>`__ if no filter is found\r\r\n        for the given ``filter_id``.\r\r\n        \r\r\n        Snapshots and Resetting\r\r\n        ~~~~~~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        ``MoacTester.take_snapshot() -> snapshot_id``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Takes a snapshot of the current chain state and returns the snapshot id.\r\r\n        \r\r\n        ``MoacTester.revert_to_snapshot(snapshot_id)``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Reverts the chain to the chain state associated with the given\r\r\n        ``snapshot_id``. Raises\r\r\n        ```SnapshotNotFound`` <#errors-SnapshotNotFound>`__ if no snapshot is\r\r\n        know for the given id.\r\r\n        \r\r\n        Errors and Exceptions\r\r\n        ~~~~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        ``moac_tester.exceptions.TransactionNotFound``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Raised in cases where a transaction cannot be found for the provided\r\r\n        transaction hash.\r\r\n        \r\r\n        ``moac_tester.exceptions.BlockNotFound``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Raised in cases where a block cannot be found for either a provided\r\r\n        number or hash.\r\r\n        \r\r\n        ``moac_tester.exceptions.FilterNotFound``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Raised in cases where a filter cannot be found for the provided filter\r\r\n        id.\r\r\n        \r\r\n        ``moac_tester.exceptions.SnapshotNotFound``\r\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\r\n        \r\r\n        Raised in cases where a snapshot cannot be found for the provided\r\r\n        snapshot id.\r\r\n        \r\r\n        Backends\r\r\n        --------\r\r\n        \r\r\n        Moac tester is written using a pluggable backend system.\r\r\n        \r\r\n        Backend Dependencies\r\r\n        ~~~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        Moac tester does not install any of the dependencies needed to use the\r\r\n        various backends by default. You can however install Moac tester with\r\r\n        the necessary dependencies using the following method.\r\r\n        \r\r\n        .. code:: bash\r\r\n        \r\r\n            $ pip install moac-tester[<backend-name>]\r\r\n        \r\r\n        You should replace ``<backend-name>`` with the name of the desired\r\r\n        testing backend.\r\r\n        \r\r\n        Selecting a Backend\r\r\n        ~~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        You can select which backend in a few different ways.\r\r\n        \r\r\n        The most direct way is to manually pass in the backend instance you wish\r\r\n        to use.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> from moac_tester import MoacTester\r\r\n            >>> t = MoacTester(backend=MockBackend())\r\r\n        \r\r\n        Moac tester also supports configuration using the environment variable\r\r\n        ``Moac_TESTER_CHAIN_BACKEND``. This should be set to the import path for\r\r\n        the backend class you wish to use.\r\r\n        \r\r\n        Available Backends\r\r\n        ~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        Moac tester can be used with the following backend.\r\r\n        \r\r\n        -  MockBackend\r\r\n        \r\r\n        MockBackend\r\r\n        ^^^^^^^^^^^\r\r\n        \r\r\n        This backend has limited functionality. It cannot perform any VM\r\r\n        computations. It mocks out all of the objects and interactions.\r\r\n        \r\r\n        .. code:: python\r\r\n        \r\r\n            >>> from moac_tester import MockBackend\r\r\n            >>> t = MoacTester(MockBackend())\r\r\n        \r\r\n        Implementing Custom Backends\r\r\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        The base class ``moac_tester.backends.base.BaseChainBackend`` is the\r\r\n        recommended base class to begin with if you wish to write your own\r\r\n        backend.\r\r\n        \r\r\n        Details on implementation are beyond the scope of this document.\r\r\n        \r\r\n        Data Formats\r\r\n        ------------\r\r\n        \r\r\n        Moac tester uses two formats for data.\r\r\n        \r\r\n        -  The *normal* format is the data format the is expected as input\r\r\n           arguments to all ``MoacTester`` methods as well as the return types\r\r\n           from all method calls.\r\r\n        -  The *canonical* format is the data format that is used internally by\r\r\n           the backend class.\r\r\n        \r\r\n        Moac tester enforces strict validation rules on these formats.\r\r\n        \r\r\n        Canonical Formats\r\r\n        ~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        The canonical format is intended for low level handling by backends.\r\r\n        \r\r\n        -  32 byte hashes: ``bytes`` of length 32\r\r\n        -  Arbitrary length strings: ``bytes``\r\r\n        -  Addresses: ``bytes`` of length 20\r\r\n        -  Integers: ``int``\r\r\n        -  Array Types: ``tuple``\r\r\n        \r\r\n        Normal Formats\r\r\n        ~~~~~~~~~~~~~~\r\r\n        \r\r\n        The normal format is intended for use by end users.\r\r\n        \r\r\n        -  32 byte hashes: ``0x`` prefixed hexidecimal encoded text strings (not\r\r\n           byte strings)\r\r\n        -  Arbitrary length strings: ``0x`` prefixed hexidecimal encoded text\r\r\n           strings (not byte strings)\r\r\n        -  Addresses: ``0x`` prefixed and EIP55 checksummed hexidecimal encoded\r\r\n           text strings (not byte strings)\r\r\n        -  Integers: ``int``\r\r\n        -  Array Types: ``tuple``\r\r\n        \r\r\n        Normalization and Validation\r\r\n        ----------------------------\r\r\n        \r\r\n            Beware! Here there be dragons... This section of the documentation\r\r\n            is only relevant if you intend to build tooling on top of this\r\r\n            library.\r\r\n        \r\r\n        The Moac tester provides strong guarantees that backends can be swapped\r\r\n        out seamlessly without effecting the data formats of both the input\r\r\n        arguments and return values. This is accomplished using a two step\r\r\n        process of strict *normalization* and *validation*.\r\r\n        \r\r\n        All inputs to the methods of the ``MoacTester`` are first validated then\r\r\n        normalized to a *canonical* format. Return values are put through this\r\r\n        process as well, first validating the data returned by the backend, and\r\r\n        then normalizing it from the *canonical* format to the *normal* form\r\r\n        before being returned.\r\r\n        \r\r\n         ### Normalization\r\r\n        \r\r\n        The ``MoacTester`` delegates normalization to whatever ``normalizer``\r\r\n        was passed in during instantiation. If no value was provided, the\r\r\n        default normalizer will be used from\r\r\n        ``moac_tester.normalization.default.DefaultNormalizer``.\r\r\n        \r\r\n        The specifics of this object are beyong the scope of this document.\r\r\n        \r\r\n         ### Validation\r\r\n        \r\r\n        The ``MoacTester`` delegates validation to whatever ``validator`` was\r\r\n        passed in during instantiation. If no value was provided, the default\r\r\n        validator will be used from\r\r\n        ``moac_tester.validation.default.DefaultValidator``.\r\r\n        \r\r\n        The specifics of this object are beyond the scope of this document.\r\r\n        \r\r\n        Running the tests\r\r\n        -----------------\r\r\n        \r\r\n        You can run the tests with:\r\r\n        \r\r\n        .. code:: sh\r\r\n        \r\r\n            py.test tests\r\r\n        \r\r\n        Or you can install ``tox`` to run the full test suite.\r\r\n        \r\r\n        Releasing\r\r\n        ---------\r\r\n        \r\r\n        Pandoc is required for transforming the markdown README to the proper\r\r\n        format to render correctly on pypi.\r\r\n        \r\r\n        For Debian-like systems:\r\r\n        \r\r\n        ::\r\r\n        \r\r\n            apt install pandoc\r\r\n        \r\r\n        Or on OSX:\r\r\n        \r\r\n        .. code:: sh\r\r\n        \r\r\n            brew install pandoc\r\r\n        \r\r\n        To release a new version:\r\r\n        \r\r\n        .. code:: sh\r\r\n        \r\r\n            bumpversion $$VERSION_PART_TO_BUMP$$\r\r\n            git push && git push --tags\r\r\n            make release\r\r\n        \r\r\n        How to bumpversion\r\r\n        ~~~~~~~~~~~~~~~~~~\r\r\n        \r\r\n        The version format for this repo is ``{major}.{minor}.{patch}`` for\r\r\n        stable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\r\r\n        (``stage`` can be alpha or beta).\r\r\n        \r\r\n        To issue the next version in line, use bumpversion and specify which\r\r\n        part to bump, like ``bumpversion minor`` or ``bumpversion devnum``.\r\r\n        \r\r\n        If you are in a beta version, ``bumpversion stage`` will switch to a\r\r\n        stable.\r\r\n        \r\r\n        To issue an unstable version when the current version is stable, specify\r\r\n        the new version explicitly, like\r\r\n        ``bumpversion --new-version 4.0.0-alpha.1 devnum``\r\r\n        \r\nKeywords: moac\r\nPlatform: UNKNOWN\r\nClassifier: Development Status :: 2 - Pre-Alpha\r\nClassifier: Intended Audience :: Developers\r\nClassifier: License :: OSI Approved :: MIT License\r\nClassifier: Natural Language :: English\r\nClassifier: Programming Language :: Python :: 3\r\nClassifier: Programming Language :: Python :: 3.5\r\nClassifier: Programming Language :: Python :: 3.6\r\nClassifier: Programming Language :: Python :: 3.7\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wanpixiaozi/moac-tester", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "moac-tester", "package_url": "https://pypi.org/project/moac-tester/", "platform": "", "project_url": "https://pypi.org/project/moac-tester/", "project_urls": {"Homepage": "https://github.com/wanpixiaozi/moac-tester"}, "release_url": "https://pypi.org/project/moac-tester/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Tools for testing Moac applications.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===========\n\n<br>        \n\n<br>        Tools for testing moac based applications.\n\n<br>        \n\n<br>        Installation\n\n<br>        ------------\n\n<br>        \n\n<br>        .. code:: sh\n\n<br>        \n\n<br>            pip install moac-tester\n\n<br>        \n\n<br>        Quick Start\n\n<br>        -----------\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; from moac_tester import MoacTester\n\n<br>            &gt;&gt;&gt; t = MoacTester()\n\n<br>            &gt;&gt;&gt; t.get_accounts()\n\n<br>            ('0xaBbACadABa000000000000000000000000000000',\n\n<br>             '0xaBbACaDaBA000000000000000000000000000001',\n\n<br>             '0xAbbAcaDaBA000000000000000000000000000002',\n\n<br>             '0xabBACadaBA000000000000000000000000000003', \n\n<br>             '0xabbAcADABa000000000000000000000000000004', \n\n<br>             '0xaBBACADABA000000000000000000000000000005', \n\n<br>             '0xaBbaCadaBA000000000000000000000000000006',\n\n<br>             '0xAbbAcAdaBA000000000000000000000000000007',\n\n<br>             '0xaBBAcadabA000000000000000000000000000008', \n\n<br>             '0xABbacaDabA000000000000000000000000000009')\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_balance('0xaBbACadABa000000000000000000000000000000')\n\n<br>            1000000000000000000000000\n\n<br>            &gt;&gt;&gt; t.send_transaction({'from': '0xaBbACadABa000000000000000000000000000000', 'to': '0xaBbACaDaBA000000000000000000000000000001', 'gas': 21000, 'value': 1})\n\n<br>            '0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a'\n\n<br>            &gt;&gt;&gt; t.get_transaction_by_hash('0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a')\n\n<br>            {'block_hash': '0x96e041452b6fcbe75ab7126c490293e2823b4814a4d8efa7c49267cfb10d8ddf', \n\n<br>            'v': 27, \n\n<br>            'data': '0x', \n\n<br>            'from': '0xaBbACadABa000000000000000000000000000000', \n\n<br>            'gas_price': 1, \n\n<br>            'r': 12345, \n\n<br>            'hash': '0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a', \n\n<br>            'to': '0xaBbACaDaBA000000000000000000000000000001', \n\n<br>            'gas': 21000, \n\n<br>            'nonce': 0, \n\n<br>            'value': 1, \n\n<br>            's': 67890, \n\n<br>            'block_number': 1, \n\n<br>            'transaction_index': 0}\n\n<br>        \n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_transaction_receipt('0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a')\n\n<br>            {'block_hash': '0x96e041452b6fcbe75ab7126c490293e2823b4814a4d8efa7c49267cfb10d8ddf', \n\n<br>            'cumulative_gas_used': 21000, \n\n<br>            'status': 0, \n\n<br>            'transaction_hash': '0x11c5118d2e3f77a63c02c4d94d89f8c4965aeb5e5fe55ce2db794048c113780a', \n\n<br>            'contract_address': '0xa0Beb7081fDaF3ed157370836A85eeC20CEc9e04', \n\n<br>            'logs': (), \n\n<br>            'gas_used': 21000, \n\n<br>            'block_number': 1, \n\n<br>            'transaction_index': 0}\n\n<br>        \n\n<br>        Running the tests\n\n<br>        ~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        You can run the tests with:\n\n<br>        \n\n<br>        .. code:: sh\n\n<br>        \n\n<br>            py.test tests\n\n<br>        \n\n<br>        Or you can install ``tox`` to run the full test suite.\n\n<br>        \n\n<br>        Releasing\n\n<br>        ~~~~~~~~~\n\n<br>        \n\n<br>        Pandoc is required for transforming the markdown README to the proper\n\n<br>        format to render correctly on pypi.\n\n<br>        \n\n<br>        For Debian-like systems:\n\n<br>        \n\n<br>        ::\n\n<br>        \n\n<br>            apt install pandoc\n\n<br>        \n\n<br>        Or on OSX:\n\n<br>        \n\n<br>        .. code:: sh\n\n<br>        \n\n<br>            brew install pandoc\n\n<br>        \n\n<br>        To release a new version:\n\n<br>        \n\n<br>        .. code:: sh\n\n<br>        \n\n<br>            bumpversion $$VERSION_PART_TO_BUMP$$\n\n<br>            git push &amp;&amp; git push --tags\n\n<br>            make release\n\n<br>        \n\n<br>        How to bumpversion\n\n<br>        ^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        The version format for this repo is ``{major}.{minor}.{patch}`` for\n\n<br>        stable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n\n<br>        (``stage`` can be alpha or beta).\n\n<br>        \n\n<br>        To issue the next version in line, use bumpversion and specify which\n\n<br>        part to bump, like ``bumpversion minor`` or ``bumpversion devnum``.\n\n<br>        \n\n<br>        If you are in a beta version, ``bumpversion stage`` will switch to a\n\n<br>        stable.\n\n<br>        \n\n<br>        To issue an unstable version when the current version is stable, specify\n\n<br>        the new version explicitly, like\n\n<br>        ``bumpversion --new-version 4.0.0-alpha.1 devnum``\n\n<br>        \n\n<br>        Documentation\n\n<br>        =============\n\n<br>        \n\n<br>        Input and output data formats\n\n<br>        -----------------------------\n\n<br>        \n\n<br>        The moac tester library strictly enforces the following input formats\n\n<br>        and types.\n\n<br>        \n\n<br>        -  Hexidecimal values **must** be text (not byte) strings. The ``0x``\n\n<br>           prefix is optional.\n\n<br>        -  Any address which contains mixed-case alpha characters will be\n\n<br>           validated as a checksummed address as specified by\n\n<br>           `EIP-55 &lt;https://github.com/Moac/EIPs/blob/master/EIPS/eip-55.md&gt;`__\n\n<br>        -  32-byte hashes **must** be hexidecimal encoded.\n\n<br>        -  Numeric values **must** be in their integer representation.\n\n<br>        \n\n<br>        Similarly, Moac tester ensures that return values conform to similar\n\n<br>        rules.\n\n<br>        \n\n<br>        -  32-byte hashes will be returned in their hexidecimal encoded\n\n<br>           representation.\n\n<br>        -  Addresses will be returned in their hexidecimal representation and\n\n<br>           EIP55 checksummed.\n\n<br>        -  Numeric values will be returned as integers.\n\n<br>        \n\n<br>        Block Numbers\n\n<br>        -------------\n\n<br>        \n\n<br>        Any ``block_number`` parameter will accept the following string values.\n\n<br>        \n\n<br>        -  ``'latest'``: for the latest mined block.\n\n<br>        -  ``'pending'``: for the current un-mined block.\n\n<br>        -  ``'earliest'``: for the genesis block.\n\n<br>        \n\n<br>            Note: These **must** be text strings (not byte strings)\n\n<br>        \n\n<br>        ``moac_tester.MoacTester``\n\n<br>        --------------------------\n\n<br>        \n\n<br>        API\n\n<br>        ~~~\n\n<br>        \n\n<br>        Instantiation\n\n<br>        ~~~~~~~~~~~~~\n\n<br>        \n\n<br>        -  ``moac_tester.MoacTester(backend=None, validator=None, normalizer=None, auto_mine_transactions=True, fork_blocks=None)``\n\n<br>        \n\n<br>        The ``MoacTester`` object is the sole API entrypoint. Instantiation of\n\n<br>        this object accepts the following parameters.\n\n<br>        \n\n<br>        -  ``backend``: The chain backend being used. See the `chain\n\n<br>           backends &lt;#backends&gt;`__\n\n<br>        -  ``validator``: The validator to used. See the\n\n<br>           `validators &lt;#validation&gt;`__\n\n<br>        -  ``normalizer``: The normalizer to used. See the\n\n<br>           `normalizers &lt;#normalization&gt;`__\n\n<br>        -  ``auto_mine_transactions``: If *truthy* transactions will be\n\n<br>           automatically mined at the time they are submitted. See\n\n<br>           ```enable_auto_mine_transactions`` &lt;#api-enable_auto_mine_transactions&gt;`__\n\n<br>           and\n\n<br>           ```disable_auto_mine_transactions`` &lt;#api-disable_auto_mine_transactions&gt;`__.\n\n<br>        -  ``fork_blocks``: configures which block numbers the various network\n\n<br>           hard fork rules will be activated. See `fork-rules &lt;#fork-rules&gt;`__\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; from moac_tester import MoacTester\n\n<br>            &gt;&gt;&gt; t = MoacTester()\n\n<br>            &gt;&gt;&gt; t\n\n<br>            &lt;moac_tester.main.MoacTester at 0x102255710&gt;\n\n<br>        \n\n<br>        Fork Rules\n\n<br>        ~~~~~~~~~~\n\n<br>        \n\n<br>        Moac tester uses the Byzantium rules, starting at block 0.\n\n<br>        \n\n<br>        Time Travel\n\n<br>        ~~~~~~~~~~~\n\n<br>        \n\n<br>        The chain can only time travel forward in time.\n\n<br>        \n\n<br>        ``MoacTester.time_travel(timestamp)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        The ``timestamp`` must be an integer, strictly greater than the current\n\n<br>        timestamp of the latest block.\n\n<br>        \n\n<br>            Note: Time traveling will result in a new block being mined.\n\n<br>        \n\n<br>        Mining\n\n<br>        ~~~~~~\n\n<br>        \n\n<br>        Manually mining blocks can be done with the following API. The\n\n<br>        ``coinbase`` parameter of these methods **must** be a hexidecimal\n\n<br>        encoded address.\n\n<br>        \n\n<br>        ``MoacTester.mine_blocks(num_blocks=1, coinbase=None)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Mines ``num_blocks`` new blocks, returning an iterable of the newly\n\n<br>        mined block hashes.\n\n<br>        \n\n<br>        ``MoacTester.mine_block(coinbase=None)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Mines a single new block, returning the mined block's hash.\n\n<br>        \n\n<br>        Auto-mining transactions\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        By default all transactions are mined immediately. This means that each\n\n<br>        transaction you send will result in a new block being mined, and that\n\n<br>        all blocks will only ever have at most a single transaction. This\n\n<br>        behavior can be controlled with the following methods.\n\n<br>        \n\n<br>        ``MoacTester.enable_auto_mine_transactions()``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Turns on auto-mining of transactions.\n\n<br>        \n\n<br>        ``MoacTester.disable_auto_mine_transactions()``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Turns **off** auto-mining of transactions.\n\n<br>        \n\n<br>        Accounts\n\n<br>        ~~~~~~~~\n\n<br>        \n\n<br>        The following API can be used to interact with account data. The\n\n<br>        ``account`` parameter in these methods **must** be a hexidecimal encode\n\n<br>        address.\n\n<br>        \n\n<br>         ``MoacTester.get_accounts()``\n\n<br>        \n\n<br>        Returns an iterable of the accounts that the tester knows about. All\n\n<br>        accounts in this list will be EIP55 checksummed.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_accounts()\n\n<br>            ('0xaBbACadABa000000000000000000000000000000',\n\n<br>             '0xaBbACaDaBA000000000000000000000000000001',\n\n<br>            ...\n\n<br>             '0xABbacaDabA000000000000000000000000000009')\n\n<br>        \n\n<br>        ``MoacTester.add_account(private_key, password=None)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Adds a new account for the given private key. Returns the hex encoded\n\n<br>        address of the added account.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d')\n\n<br>            '0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\n\n<br>        \n\n<br>        By default, added accounts are unlocked and do not have a password. If\n\n<br>        you would like to add an account which has a password, you can supply\n\n<br>        the password as the second parameter.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d', 'my-secret')\n\n<br>            '0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\n\n<br>        \n\n<br>        ``MoacTester.unlock_account(account, password, unlock_seconds=None)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Unlocks the given account if the provided password matches.\n\n<br>        \n\n<br>        Raises a ``ValidationError`` if:\n\n<br>        \n\n<br>        -  The account is not known.\n\n<br>        -  The password does not match.\n\n<br>        -  The account was created without a password.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret')\n\n<br>        \n\n<br>        By default, accounts will be unlocked indefinitely. You can however\n\n<br>        unlock an account for a specified amount of time by providing the\n\n<br>        desired duration in seconds.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            # unlock for 1 hour.\n\n<br>            &gt;&gt;&gt; t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret', 60 * 60)\n\n<br>        \n\n<br>        ``MoacTester.lock_account(account)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Locks the provide account.\n\n<br>        \n\n<br>        Raises a ``ValidationError`` if:\n\n<br>        \n\n<br>        -  The account is not known\n\n<br>        -  The account does not have a password.\n\n<br>        \n\n<br>        ``MoacTester.get_balance(account) -&gt; integer``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns the balance, in sha, for the provided account.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_balance('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n\n<br>            1000004999999999999999999\n\n<br>        \n\n<br>        ``MoacTester.get_nonce(account) -&gt; integer``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns the nonce for the provided account.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_nonce('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n\n<br>            1\n\n<br>        \n\n<br>        ``MoacTester.get_code(account) -&gt; hex string``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns the code for the given account.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_code('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n\n<br>            \"0x\"\n\n<br>        \n\n<br>        Blocks, Transactions, and Receipts\n\n<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        ``MoacTester.get_transaction_by_hash(transaction_hash) -&gt; transaction-object``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns the transaction for the given hash, raising a\n\n<br>        ```TransactionNotFound`` &lt;#errors-TransactionNotFound&gt;`__ exception if\n\n<br>        the transaction cannot be found.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_transaction_by_hash('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n\n<br>            {'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n\n<br>             'block_number': 0,\n\n<br>             'hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n\n<br>             'transaction_index': 0,\n\n<br>             'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n\n<br>             'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n\n<br>             'value': 1,\n\n<br>             'gas': 21000,\n\n<br>             'gas_price': 1,\n\n<br>             'nonce': 0,\n\n<br>             'data': '0x',\n\n<br>             'v': 27,\n\n<br>             'r': 114833774457827084417823702749930473879683934597320921824765632039428214735160,\n\n<br>             's': 52192522150044217242428968890330558187037131043598164958282684822175843828481}\n\n<br>        \n\n<br>            Note: For unmined transaction, ``transaction_index``,\n\n<br>            ``block_number`` and ``block_hash`` will all be ``None``.\n\n<br>        \n\n<br>        ``MoacTester.get_block_by_number(block_number, full_transactions=False) -&gt; block-object``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns the block for the given ``block_number``. See `block\n\n<br>        numbers &lt;#block-numbers&gt;`__ for named block numbers you can use. If\n\n<br>        ``full_transactions`` is truthy, then the transactions array will be\n\n<br>        populated with full transaction objects as opposed to their hashes.\n\n<br>        \n\n<br>        Raises ```BlockNotFound`` &lt;#errors-BlockNotFound&gt;`__ if a block for the\n\n<br>        given number cannot be found.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_block_by_number(1)\n\n<br>            {'difficulty': 131072,\n\n<br>             'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n\n<br>             'gas_limit': 999023468,\n\n<br>             'gas_used': 0,\n\n<br>             'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\n\n<br>             'logs_bloom': 0,\n\n<br>             'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n\n<br>             'nonce': '0x0000000000000000',\n\n<br>             'number': 1,\n\n<br>             'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n\n<br>             'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\n<br>             'size': 472,\n\n<br>             'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\n\n<br>             'timestamp': 1410973360,\n\n<br>             'total_difficulty': 262144,\n\n<br>             'transactions': (),\n\n<br>             'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\n<br>             'uncles': ()}\n\n<br>        \n\n<br>        ``MoacTester.get_block_by_hash(block_hash, full_transactions=True) -&gt; block-object``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns the block for the given ``block_hash``. The\n\n<br>        ``full_transactions`` parameter behaves the same as in\n\n<br>        ```get_block_by_number`` &lt;#api-get_block_by_number&gt;`__.\n\n<br>        \n\n<br>        Raises ```BlockNotFound`` &lt;#errors-BlockNotFound&gt;`__ if a block for the\n\n<br>        given hash cannot be found.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_block_by_hash('0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd')\n\n<br>            {'difficulty': 131072,\n\n<br>             'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n\n<br>             'gas_limit': 999023468,\n\n<br>             'gas_used': 0,\n\n<br>             'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\n\n<br>             'logs_bloom': 0,\n\n<br>             'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n\n<br>             'nonce': '0x0000000000000000',\n\n<br>             'number': 1,\n\n<br>             'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n\n<br>             'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\n<br>             'size': 472,\n\n<br>             'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\n\n<br>             'timestamp': 1410973360,\n\n<br>             'total_difficulty': 262144,\n\n<br>             'transactions': (),\n\n<br>             'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\n<br>             'uncles': ()}\n\n<br>        \n\n<br>        ``MoacTester.get_transaction_receipt(transaction_hash)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns the receipt for the given ``transaction_hash``, raising\n\n<br>        ```TransactionNotFound`` &lt;#errors-TransactionNotFound&gt;`__ if no\n\n<br>        transaction can be found for the given hash.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; t.get_transaction_receipt('0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b')\n\n<br>             {'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n\n<br>             'block_number': 2,\n\n<br>             'contract_address': None,\n\n<br>             'cumulative_gas_used': 23154,\n\n<br>             'gas_used': 23154,\n\n<br>             'logs': ({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n\n<br>               'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n\n<br>               'block_number': 2,\n\n<br>               'data': '0x',\n\n<br>               'log_index': 0,\n\n<br>               'topics': (\n\n<br>                '0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n\n<br>                '0x0000000000000000000000000000000000000000000000000000000000003039'),\n\n<br>               'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n\n<br>               'transaction_index': 0,\n\n<br>               'type': 'mined'},),\n\n<br>             'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n\n<br>             'transaction_index': 0}\n\n<br>        \n\n<br>        -  Receipts for unmined transactions will have all of ``block_hash``,\n\n<br>           ``block_number`` and ``transaction_index`` set to ``None``.\n\n<br>        -  Receipts for transactions which create a contract will have the\n\n<br>           created contract address in the ``contract_address`` field.\n\n<br>        \n\n<br>        Transaction Sending\n\n<br>        ~~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        A transaction is a formatted as a dictionary with the following keys and\n\n<br>        values.\n\n<br>        \n\n<br>        -  ``from``: The address of the account sending the transaction\n\n<br>           (hexidecimal string).\n\n<br>        -  ``to``: The address of the account the transaction is being sent to.\n\n<br>           Empty string should be used to trigger contract creation (hexidecimal\n\n<br>           string).\n\n<br>        -  ``gas``: Sets the gas limit for transaction execution (integer).\n\n<br>        -  ``gas_price``: Sets the price per unit of gas in wei that will be\n\n<br>           paid for transaction execution (integer).\n\n<br>        -  ``value``: The amount of ether in wei that should be sent with the\n\n<br>           transaction (integer).\n\n<br>        -  ``data``: The data for the transaction (hexidecimal string).\n\n<br>        \n\n<br>        Methods\n\n<br>        ^^^^^^^\n\n<br>        \n\n<br>        ``MoacTester.send_transaction(transaction) -&gt; transaction_hash``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Sends the provided ``transaction`` object, returning the\n\n<br>        ``transaction_hash`` for the sent transaction.\n\n<br>        \n\n<br>        Logs and Filters\n\n<br>        ~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        ``MoacTester.create_block_filter() -&gt; integer``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Creates a new filter for newly mined blocks. Returns the ``filter_id``\n\n<br>        which can be used to retrieve the block hashes for the mined blocks.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; filter_id = t.create_block_filter()\n\n<br>            &gt;&gt;&gt; t.mine_blocks(3)\n\n<br>            &gt;&gt;&gt; t.get_only_filter_changes(filter_id)\n\n<br>            ('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n\n<br>             '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n\n<br>             '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea')\n\n<br>            &gt;&gt;&gt; t.mine_blocks(2)\n\n<br>            &gt;&gt;&gt; t.get_only_filter_changes(filter_id)\n\n<br>            ('0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n\n<br>             '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n\n<br>            &gt;&gt;&gt; t.get_all_filter_logs(filter_id)\n\n<br>            ('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n\n<br>             '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n\n<br>             '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea',\n\n<br>             '0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n\n<br>             '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n\n<br>        \n\n<br>        ``MoacTester.create_pending_transaction_filter() -&gt; integer``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Creates a new filter for pending transactions. Returns the ``filter_id``\n\n<br>        which can be used to retrieve the transaction hashes for the pending\n\n<br>        transactions.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; filter_id = t.create_pending_transaction_filter()\n\n<br>            &gt;&gt;&gt; t.send_transaction({...})\n\n<br>            '0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566'\n\n<br>            &gt;&gt;&gt; t.send_transaction({...})\n\n<br>            '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505'\n\n<br>            &gt;&gt;&gt; t.get_only_filter_changes(filter_id)\n\n<br>            ('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n\n<br>             '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505')\n\n<br>            &gt;&gt;&gt; t.send_transaction({...})\n\n<br>            '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a'\n\n<br>            &gt;&gt;&gt; t.get_only_filter_changes(filter_id)\n\n<br>            ('0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a',)\n\n<br>            &gt;&gt;&gt; t.get_all_filter_logs(filter_id)\n\n<br>            ('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n\n<br>             '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505',\n\n<br>             '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a')\n\n<br>        \n\n<br>        ``MoacTester.create_log_filter(from_block=None, to_block=None, address=None, topics=None) -&gt; integer``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Creates a new filter for logs produced by transactions. The parameters\n\n<br>        for this function can be used to filter the log entries.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; filter_id = t.create_log_filter()\n\n<br>            &gt;&gt;&gt; t.send_transaction({...})  # something that produces a log entry\n\n<br>            '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c'\n\n<br>            &gt;&gt;&gt; t.send_transaction({...})  # something that produces a log entry\n\n<br>            '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a'\n\n<br>            &gt;&gt;&gt; t.get_only_filter_changes(filter_id)\n\n<br>            ({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n\n<br>              'block_hash': '0x68c0f318388003b652eae334efbed8bd345c469bd0ca77469183fc9693c23e13',\n\n<br>              'block_number': 11,\n\n<br>              'data': '0x',\n\n<br>              'log_index': 0,\n\n<br>              'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n\n<br>               '0x0000000000000000000000000000000000000000000000000000000000003039'),\n\n<br>              'transaction_hash': '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c',\n\n<br>              'transaction_index': 0,\n\n<br>              'type': 'mined'},\n\n<br>             {'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n\n<br>              'block_hash': '0x07d7e46be6f9ba53ecd4323fb99ec656e652c4b14f4b8e8a244ee7f997464725',\n\n<br>              'block_number': 12,\n\n<br>              'data': '0x',\n\n<br>              'log_index': 0,\n\n<br>              'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n\n<br>               '0x0000000000000000000000000000000000000000000000000000000000010932'),\n\n<br>              'transaction_hash': '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a',\n\n<br>              'transaction_index': 0,\n\n<br>              'type': 'mined'})\n\n<br>        \n\n<br>        See `the filtering guide &lt;#guide-filtering&gt;`__ for detailed information\n\n<br>        on how to use filters.\n\n<br>        \n\n<br>        ``MoacTester.delete_filter(filter_id)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Removes the filter for the provide ``filter_id``. If no filter is found\n\n<br>        for the given ``filter_id``, raises\n\n<br>        ```FilterNotFound`` &lt;#errors-FilterNotFound&gt;`__.\n\n<br>        \n\n<br>        ``MoacTester.get_only_filter_changes(filter_id) -&gt; transaction_hash or block_hash or log_entry``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns all new values for the provided ``filter_id`` that have not\n\n<br>        previously been returned through this API. Raises\n\n<br>        ```FilterNotFound`` &lt;#errors-FilterNotFound&gt;`__ if no filter is found\n\n<br>        for the given ``filter_id``.\n\n<br>        \n\n<br>        ``MoacTester.get_all_filter_logs(filter_id) -&gt; transaction_hash or block_hash or log_entry``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Returns all values for the provided ``filter_id``. Raises\n\n<br>        ```FilterNotFound`` &lt;#errors-FilterNotFound&gt;`__ if no filter is found\n\n<br>        for the given ``filter_id``.\n\n<br>        \n\n<br>        Snapshots and Resetting\n\n<br>        ~~~~~~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        ``MoacTester.take_snapshot() -&gt; snapshot_id``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Takes a snapshot of the current chain state and returns the snapshot id.\n\n<br>        \n\n<br>        ``MoacTester.revert_to_snapshot(snapshot_id)``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Reverts the chain to the chain state associated with the given\n\n<br>        ``snapshot_id``. Raises\n\n<br>        ```SnapshotNotFound`` &lt;#errors-SnapshotNotFound&gt;`__ if no snapshot is\n\n<br>        know for the given id.\n\n<br>        \n\n<br>        Errors and Exceptions\n\n<br>        ~~~~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        ``moac_tester.exceptions.TransactionNotFound``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Raised in cases where a transaction cannot be found for the provided\n\n<br>        transaction hash.\n\n<br>        \n\n<br>        ``moac_tester.exceptions.BlockNotFound``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Raised in cases where a block cannot be found for either a provided\n\n<br>        number or hash.\n\n<br>        \n\n<br>        ``moac_tester.exceptions.FilterNotFound``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Raised in cases where a filter cannot be found for the provided filter\n\n<br>        id.\n\n<br>        \n\n<br>        ``moac_tester.exceptions.SnapshotNotFound``\n\n<br>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n<br>        \n\n<br>        Raised in cases where a snapshot cannot be found for the provided\n\n<br>        snapshot id.\n\n<br>        \n\n<br>        Backends\n\n<br>        --------\n\n<br>        \n\n<br>        Moac tester is written using a pluggable backend system.\n\n<br>        \n\n<br>        Backend Dependencies\n\n<br>        ~~~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        Moac tester does not install any of the dependencies needed to use the\n\n<br>        various backends by default. You can however install Moac tester with\n\n<br>        the necessary dependencies using the following method.\n\n<br>        \n\n<br>        .. code:: bash\n\n<br>        \n\n<br>            $ pip install moac-tester[&lt;backend-name&gt;]\n\n<br>        \n\n<br>        You should replace ``&lt;backend-name&gt;`` with the name of the desired\n\n<br>        testing backend.\n\n<br>        \n\n<br>        Selecting a Backend\n\n<br>        ~~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        You can select which backend in a few different ways.\n\n<br>        \n\n<br>        The most direct way is to manually pass in the backend instance you wish\n\n<br>        to use.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; from moac_tester import MoacTester\n\n<br>            &gt;&gt;&gt; t = MoacTester(backend=MockBackend())\n\n<br>        \n\n<br>        Moac tester also supports configuration using the environment variable\n\n<br>        ``Moac_TESTER_CHAIN_BACKEND``. This should be set to the import path for\n\n<br>        the backend class you wish to use.\n\n<br>        \n\n<br>        Available Backends\n\n<br>        ~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        Moac tester can be used with the following backend.\n\n<br>        \n\n<br>        -  MockBackend\n\n<br>        \n\n<br>        MockBackend\n\n<br>        ^^^^^^^^^^^\n\n<br>        \n\n<br>        This backend has limited functionality. It cannot perform any VM\n\n<br>        computations. It mocks out all of the objects and interactions.\n\n<br>        \n\n<br>        .. code:: python\n\n<br>        \n\n<br>            &gt;&gt;&gt; from moac_tester import MockBackend\n\n<br>            &gt;&gt;&gt; t = MoacTester(MockBackend())\n\n<br>        \n\n<br>        Implementing Custom Backends\n\n<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        The base class ``moac_tester.backends.base.BaseChainBackend`` is the\n\n<br>        recommended base class to begin with if you wish to write your own\n\n<br>        backend.\n\n<br>        \n\n<br>        Details on implementation are beyond the scope of this document.\n\n<br>        \n\n<br>        Data Formats\n\n<br>        ------------\n\n<br>        \n\n<br>        Moac tester uses two formats for data.\n\n<br>        \n\n<br>        -  The *normal* format is the data format the is expected as input\n\n<br>           arguments to all ``MoacTester`` methods as well as the return types\n\n<br>           from all method calls.\n\n<br>        -  The *canonical* format is the data format that is used internally by\n\n<br>           the backend class.\n\n<br>        \n\n<br>        Moac tester enforces strict validation rules on these formats.\n\n<br>        \n\n<br>        Canonical Formats\n\n<br>        ~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        The canonical format is intended for low level handling by backends.\n\n<br>        \n\n<br>        -  32 byte hashes: ``bytes`` of length 32\n\n<br>        -  Arbitrary length strings: ``bytes``\n\n<br>        -  Addresses: ``bytes`` of length 20\n\n<br>        -  Integers: ``int``\n\n<br>        -  Array Types: ``tuple``\n\n<br>        \n\n<br>        Normal Formats\n\n<br>        ~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        The normal format is intended for use by end users.\n\n<br>        \n\n<br>        -  32 byte hashes: ``0x`` prefixed hexidecimal encoded text strings (not\n\n<br>           byte strings)\n\n<br>        -  Arbitrary length strings: ``0x`` prefixed hexidecimal encoded text\n\n<br>           strings (not byte strings)\n\n<br>        -  Addresses: ``0x`` prefixed and EIP55 checksummed hexidecimal encoded\n\n<br>           text strings (not byte strings)\n\n<br>        -  Integers: ``int``\n\n<br>        -  Array Types: ``tuple``\n\n<br>        \n\n<br>        Normalization and Validation\n\n<br>        ----------------------------\n\n<br>        \n\n<br>            Beware! Here there be dragons... This section of the documentation\n\n<br>            is only relevant if you intend to build tooling on top of this\n\n<br>            library.\n\n<br>        \n\n<br>        The Moac tester provides strong guarantees that backends can be swapped\n\n<br>        out seamlessly without effecting the data formats of both the input\n\n<br>        arguments and return values. This is accomplished using a two step\n\n<br>        process of strict *normalization* and *validation*.\n\n<br>        \n\n<br>        All inputs to the methods of the ``MoacTester`` are first validated then\n\n<br>        normalized to a *canonical* format. Return values are put through this\n\n<br>        process as well, first validating the data returned by the backend, and\n\n<br>        then normalizing it from the *canonical* format to the *normal* form\n\n<br>        before being returned.\n\n<br>        \n\n<br>         ### Normalization\n\n<br>        \n\n<br>        The ``MoacTester`` delegates normalization to whatever ``normalizer``\n\n<br>        was passed in during instantiation. If no value was provided, the\n\n<br>        default normalizer will be used from\n\n<br>        ``moac_tester.normalization.default.DefaultNormalizer``.\n\n<br>        \n\n<br>        The specifics of this object are beyong the scope of this document.\n\n<br>        \n\n<br>         ### Validation\n\n<br>        \n\n<br>        The ``MoacTester`` delegates validation to whatever ``validator`` was\n\n<br>        passed in during instantiation. If no value was provided, the default\n\n<br>        validator will be used from\n\n<br>        ``moac_tester.validation.default.DefaultValidator``.\n\n<br>        \n\n<br>        The specifics of this object are beyond the scope of this document.\n\n<br>        \n\n<br>        Running the tests\n\n<br>        -----------------\n\n<br>        \n\n<br>        You can run the tests with:\n\n<br>        \n\n<br>        .. code:: sh\n\n<br>        \n\n<br>            py.test tests\n\n<br>        \n\n<br>        Or you can install ``tox`` to run the full test suite.\n\n<br>        \n\n<br>        Releasing\n\n<br>        ---------\n\n<br>        \n\n<br>        Pandoc is required for transforming the markdown README to the proper\n\n<br>        format to render correctly on pypi.\n\n<br>        \n\n<br>        For Debian-like systems:\n\n<br>        \n\n<br>        ::\n\n<br>        \n\n<br>            apt install pandoc\n\n<br>        \n\n<br>        Or on OSX:\n\n<br>        \n\n<br>        .. code:: sh\n\n<br>        \n\n<br>            brew install pandoc\n\n<br>        \n\n<br>        To release a new version:\n\n<br>        \n\n<br>        .. code:: sh\n\n<br>        \n\n<br>            bumpversion $$VERSION_PART_TO_BUMP$$\n\n<br>            git push &amp;&amp; git push --tags\n\n<br>            make release\n\n<br>        \n\n<br>        How to bumpversion\n\n<br>        ~~~~~~~~~~~~~~~~~~\n\n<br>        \n\n<br>        The version format for this repo is ``{major}.{minor}.{patch}`` for\n\n<br>        stable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n\n<br>        (``stage`` can be alpha or beta).\n\n<br>        \n\n<br>        To issue the next version in line, use bumpversion and specify which\n\n<br>        part to bump, like ``bumpversion minor`` or ``bumpversion devnum``.\n\n<br>        \n\n<br>        If you are in a beta version, ``bumpversion stage`` will switch to a\n\n<br>        stable.\n\n<br>        \n\n<br>        To issue an unstable version when the current version is stable, specify\n\n<br>        the new version explicitly, like\n\n<br>        ``bumpversion --new-version 4.0.0-alpha.1 devnum``\n\n<br>        \n<br>Keywords: moac\n<br>Platform: UNKNOWN\n<br>Classifier: Development Status :: 2 - Pre-Alpha\n<br>Classifier: Intended Audience :: Developers\n<br>Classifier: License :: OSI Approved :: MIT License\n<br>Classifier: Natural Language :: English\n<br>Classifier: Programming Language :: Python :: 3\n<br>Classifier: Programming Language :: Python :: 3.5\n<br>Classifier: Programming Language :: Python :: 3.6\n<br>Classifier: Programming Language :: Python :: 3.7\n<br>\n          </div>"}, "last_serial": 4380352, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "1b1fa00409e2f258b9ed3de99b9fc1e4", "sha256": "28e2b81ce30f7440f9bb596f28fda7e26044a7b1961f3a38fa9fda6042528f21"}, "downloads": -1, "filename": "moac-tester-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1b1fa00409e2f258b9ed3de99b9fc1e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56026, "upload_time": "2018-09-28T12:39:46", "upload_time_iso_8601": "2018-09-28T12:39:46.026793Z", "url": "https://files.pythonhosted.org/packages/9e/7b/8355b9fbee8876acabe80fef6500d6913407d4c65702c796da44ea7e79d8/moac-tester-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9122ed47a25d38cc11f025cccee964d0", "sha256": "e536101bbc28028bb23014c105498f232d98dfbfbee40ade4d4b5954fbaefabb"}, "downloads": -1, "filename": "moac-tester-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9122ed47a25d38cc11f025cccee964d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55610, "upload_time": "2018-10-16T07:03:12", "upload_time_iso_8601": "2018-10-16T07:03:12.361005Z", "url": "https://files.pythonhosted.org/packages/5e/d7/01ef1ee71ccc62c7b09544ac4edcc4c3dfc479282fbb1bd0d50295737faa/moac-tester-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9122ed47a25d38cc11f025cccee964d0", "sha256": "e536101bbc28028bb23014c105498f232d98dfbfbee40ade4d4b5954fbaefabb"}, "downloads": -1, "filename": "moac-tester-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9122ed47a25d38cc11f025cccee964d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55610, "upload_time": "2018-10-16T07:03:12", "upload_time_iso_8601": "2018-10-16T07:03:12.361005Z", "url": "https://files.pythonhosted.org/packages/5e/d7/01ef1ee71ccc62c7b09544ac4edcc4c3dfc479282fbb1bd0d50295737faa/moac-tester-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:09 2020"}