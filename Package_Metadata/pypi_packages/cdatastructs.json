{"info": {"author": "Jan Seifert", "author_email": "jan.seifert@fotkyzcest.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "cdatastructs\n============\n\nSimple data structures accessible from both Python and C. Data in structures\nare stored as a primitive C types, so in C you can compute data without Python\noverhead.\n\nPython code:\n\n::\n\n    >>> import array\n    >>> import itertools\n    >>> import math\n    >>> import random\n\n    >>> from cdatastructs.hashmap import Int2Int\n\n    >>> from my_c_extension import calculate_data\n\n\t# Create instance of the Int2Int, it will be mapping from ID\n\t# to position in array\n    >>> id2index = Int2Int()\n\n    # Instance of the id2index is mapping, so you can use it same as dict\n    >>> id2index[72351277] = 0\n    >>> id2index[98092127498] = 1\n    >>> id2index[126987499] = 2\n    >>> id2index[36] = 3\n    >>> id2index[980980] = 4\n    >>> len(id2index)\n    5\n    >>> id2index[980980]\n    4\n    >>> id2index.buffer_ptr\n    94691713534960\n\n    # Prepare two arrays with numbers for calculate and one array for results\n    >>> a = array.array('d', (random.random() for _ in id2index))\n    >>> b = array.array('d', (random.random() for _ in id2index))\n    >>> results = array.array('d', (math.nan for _ in id2index))\n\n    # Calculate data for IDs 98092127498, 126987499 and 36\n    >>> ids = array.array('Q', [98092127498, 126987499, 36])\n    >>> calculate_data(id2index, ids, a, b, results)\n\n\t# Obtaint results\n    >>> results[id2index[72351277]]\n    nan\n    >>> results[id2index[98092127498]]\n    0.8163673050897404\n\nC code:\n\n::\n\n    #include <hashmap.h>\n\n    static PyObject * my_c_extension_compute_data(\n            PyObject *id2index, PyObject *args) {\n\n        Int2IntHashTable_t *id2position;\n        unsigned long long *ids;\n        size_t *ids_count;\n        double *a;\n        double *b;\n        double *res;\n\n        // Parse args, obtain pointers to buffers and cast them to C types\n        ...\n\n        // Calculate data, there are only pure C types, no Python overhead\n        for (size_t i=0; i<ids_count; ++i) {\n            unsigned long long id = ids[i];\n            size_t *position;\n            if (int2int_get(id2position, id, position) != 0) {\n                goto error;\n            }\n            res[*position] = a[*position] + b[*position];\n        }\n\n        ...\n        Py_RETURN_NONE;\n    error:\n        ...\n        return NULL;\n    }\n\nSee ``demos/`` for more examples and details.\n\nLicense\n-------\n\n3-clause BSD", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "cdatastructs", "package_url": "https://pypi.org/project/cdatastructs/", "platform": "", "project_url": "https://pypi.org/project/cdatastructs/", "project_urls": null, "release_url": "https://pypi.org/project/cdatastructs/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Simple data structures accessible from both Python and C. Data in structures are stored as a primitive C types, so in C you can compute data without Python overhead.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple data structures accessible from both Python and C. Data in structures\nare stored as a primitive C types, so in C you can compute data without Python\noverhead.</p>\n<p>Python code:</p>\n<pre>&gt;&gt;&gt; import array\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; import math\n&gt;&gt;&gt; import random\n\n&gt;&gt;&gt; from cdatastructs.hashmap import Int2Int\n\n&gt;&gt;&gt; from my_c_extension import calculate_data\n\n    # Create instance of the Int2Int, it will be mapping from ID\n    # to position in array\n&gt;&gt;&gt; id2index = Int2Int()\n\n# Instance of the id2index is mapping, so you can use it same as dict\n&gt;&gt;&gt; id2index[72351277] = 0\n&gt;&gt;&gt; id2index[98092127498] = 1\n&gt;&gt;&gt; id2index[126987499] = 2\n&gt;&gt;&gt; id2index[36] = 3\n&gt;&gt;&gt; id2index[980980] = 4\n&gt;&gt;&gt; len(id2index)\n5\n&gt;&gt;&gt; id2index[980980]\n4\n&gt;&gt;&gt; id2index.buffer_ptr\n94691713534960\n\n# Prepare two arrays with numbers for calculate and one array for results\n&gt;&gt;&gt; a = array.array('d', (random.random() for _ in id2index))\n&gt;&gt;&gt; b = array.array('d', (random.random() for _ in id2index))\n&gt;&gt;&gt; results = array.array('d', (math.nan for _ in id2index))\n\n# Calculate data for IDs 98092127498, 126987499 and 36\n&gt;&gt;&gt; ids = array.array('Q', [98092127498, 126987499, 36])\n&gt;&gt;&gt; calculate_data(id2index, ids, a, b, results)\n\n    # Obtaint results\n&gt;&gt;&gt; results[id2index[72351277]]\nnan\n&gt;&gt;&gt; results[id2index[98092127498]]\n0.8163673050897404\n</pre>\n<p>C code:</p>\n<pre>#include &lt;hashmap.h&gt;\n\nstatic PyObject * my_c_extension_compute_data(\n        PyObject *id2index, PyObject *args) {\n\n    Int2IntHashTable_t *id2position;\n    unsigned long long *ids;\n    size_t *ids_count;\n    double *a;\n    double *b;\n    double *res;\n\n    // Parse args, obtain pointers to buffers and cast them to C types\n    ...\n\n    // Calculate data, there are only pure C types, no Python overhead\n    for (size_t i=0; i&lt;ids_count; ++i) {\n        unsigned long long id = ids[i];\n        size_t *position;\n        if (int2int_get(id2position, id, position) != 0) {\n            goto error;\n        }\n        res[*position] = a[*position] + b[*position];\n    }\n\n    ...\n    Py_RETURN_NONE;\nerror:\n    ...\n    return NULL;\n}\n</pre>\n<p>See <tt>demos/</tt> for more examples and details.</p>\n<div id=\"license\">\n<h2>License</h2>\n<p>3-clause BSD</p>\n</div>\n\n          </div>"}, "last_serial": 6443043, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "342aec88684d31a9e1f820a204fcc2a4", "sha256": "fa9467c17d9b4d7d7ec7fb1d49ca6e518c95431824d8d8c15ef30bc07d1f8b8e"}, "downloads": -1, "filename": "cdatastructs-0.1.0.tar.gz", "has_sig": false, "md5_digest": "342aec88684d31a9e1f820a204fcc2a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8884, "upload_time": "2019-05-04T16:27:47", "upload_time_iso_8601": "2019-05-04T16:27:47.230411Z", "url": "https://files.pythonhosted.org/packages/3e/f9/15866e75c7a079e1e159c629fc75237eb1218c8f690c3249cee9061bb70a/cdatastructs-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "29eabce49b3599860bad5ed84728ba8c", "sha256": "bf5adea34ac448dde838ea2a5258910ad3e869c83687af7e4444ce3f1ecc003f"}, "downloads": -1, "filename": "cdatastructs-0.2.0.tar.gz", "has_sig": false, "md5_digest": "29eabce49b3599860bad5ed84728ba8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9009, "upload_time": "2019-05-31T18:06:09", "upload_time_iso_8601": "2019-05-31T18:06:09.946866Z", "url": "https://files.pythonhosted.org/packages/23/64/95605b98b9efaa7226fe09d31eaf700a7f4563dfcb3dfff7fed78623514b/cdatastructs-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "182debc83ca931326c1a3e247eece227", "sha256": "f7143177dabd7bfd4ba2b3518747aab2d4e4a4c07c70b733e5b8079d6966202f"}, "downloads": -1, "filename": "cdatastructs-0.3.0.tar.gz", "has_sig": false, "md5_digest": "182debc83ca931326c1a3e247eece227", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16988, "upload_time": "2019-11-25T10:55:09", "upload_time_iso_8601": "2019-11-25T10:55:09.224784Z", "url": "https://files.pythonhosted.org/packages/48/7b/86590fe000a4da3f3b690d353820865d8dc88fc5293fc6a3700310e27c22/cdatastructs-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "22716bbafc0aa9c241f68862ebac2e22", "sha256": "0c6b0ba70da94c12a03a5017d9e4a463076abfe854cc0e64c843215f28022525"}, "downloads": -1, "filename": "cdatastructs-0.4.0.tar.gz", "has_sig": false, "md5_digest": "22716bbafc0aa9c241f68862ebac2e22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16942, "upload_time": "2020-01-13T08:13:22", "upload_time_iso_8601": "2020-01-13T08:13:22.409836Z", "url": "https://files.pythonhosted.org/packages/22/38/c267de6e9330193967230a625a3f0715b91205e92d9b99887717034ea423/cdatastructs-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22716bbafc0aa9c241f68862ebac2e22", "sha256": "0c6b0ba70da94c12a03a5017d9e4a463076abfe854cc0e64c843215f28022525"}, "downloads": -1, "filename": "cdatastructs-0.4.0.tar.gz", "has_sig": false, "md5_digest": "22716bbafc0aa9c241f68862ebac2e22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16942, "upload_time": "2020-01-13T08:13:22", "upload_time_iso_8601": "2020-01-13T08:13:22.409836Z", "url": "https://files.pythonhosted.org/packages/22/38/c267de6e9330193967230a625a3f0715b91205e92d9b99887717034ea423/cdatastructs-0.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:58 2020"}