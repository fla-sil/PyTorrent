{"info": {"author": "Sebastian Achim Mueller", "author_email": "sebastian-achim.mueller@mpi-hd.mpg.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: C", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Medical Science Apps.", "Topic :: Scientific/Engineering :: Physics"], "description": "# Overlap of a ray and a volume cell (voxel) [![Build Status](https://travis-ci.org/cherenkov-plenoscope/ray_voxel_overlap.svg?branch=master)](https://travis-ci.org/cherenkov-plenoscope/ray_voxel_overlap)\n\nEstimate the euclidean overlap passed by a ray within a rectangular volume cell (voxel).\n\n![img](readme/ray_and_voxel.svg)\n\nFor a given, rectangular space partitioning in 3D, and a given ray the overlap of all voxels with the ray is estimated.\nThe figure shows a ray and its overlap with voxels.\nA brown overlap with voxel ```3```, a red overlap with voxel ```0```, a purple overlap with voxel ```4```, and a green overlap with voxel ```5```. The ray is defined by its support and direction vectors. The space-partitioning is defined by its bin-edges.\n# Interface\nThere is one core function:\n\n```python\nimport ray_voxel_overlap\nray_voxel_overlap.estimate_overlap_of_ray_with_voxels?\n\"\"\"\nReturns the voxel indices and overlap distances for one single ray\n(defined by support and direction) with voxels defined by the bin_edges\nin x,y and z.\n\nsupport         3D support vector of ray.\n\ndirection       3D direction vector of ray.\n\nx_bin_edges     voxel bin edge positions in x.\n\ny_bin_edges     voxel bin edge positions in y.\n\nz_bin_edges     voxel bin edge positions in z.\n\"\"\"\n```\n\nThere are two more functions:\n\n- 2nd ```ray_voxel_overlap.estimate_system_matrix()```\n\nCreate a system-matrix using scipy.sparse matrix which can be used for iterative tomographic reconstructions.\n\n- 3rd ```ray_voxel_overlap.estimate_overlap_of_ray_bundle_with_voxels()```\n\nAverage the overlap of multiple rays representing a single read-out-channel. This is useful when a single ray is not representative enough for the geometry sensed by a read-out-channel in your tomographic setup, e.g. when there is a narrow depth-of-field.\n\n## Tomographic system-matrix\n\n```python\nimport numpy as np\nimport ray_voxel_overlap as rvo\n\nnp.random.seed(0)\n\nN_RAYS = 100\nsupports = np.array([\n    np.random.uniform(-2.5, 2.5, N_RAYS),\n    np.random.uniform(-2.5, 2.5, N_RAYS),\n    np.zeros(N_RAYS)\n]).T\n\ndirections = np.array([\n    np.random.uniform(-0.3, 0.3, N_RAYS),\n    np.random.uniform(-0.3, 0.3, N_RAYS),\n    np.ones(N_RAYS)\n]).T\n\nnorm_directions = np.linalg.norm(directions, axis=1)\ndirections[:, 0] /= norm_directions\ndirections[:, 1] /= norm_directions\ndirections[:, 2] /= norm_directions\n\nN_X_BINS = 8\nN_Y_BINS = 13\nN_Z_BINS = 7\nsystem_matrix = rvo.estimate_system_matrix(\n    supports=supports,\n    directions=directions,\n    x_bin_edges=np.linspace(-100., 100., N_X_BINS+1),\n    y_bin_edges=np.linspace(-100., 100., N_Y_BINS+1),\n    z_bin_edges=np.linspace(0., 200., N_Z_BINS+1),\n)\n```\n## How it is done\nTo be fast, the production-code is written in ```C``` and wrapped in ```cython```. But for development, there is a ```python``` implementation.\n\n## Authors\nSebastian A. Mueller,\n\nETH-Zurich, Switzerland (2014-2019),\n\nMPI-Heidelberg, Germany (2019-)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cherenkov-plenoscope/ray_voxel_overlap", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ray-voxel-overlap", "package_url": "https://pypi.org/project/ray-voxel-overlap/", "platform": "", "project_url": "https://pypi.org/project/ray-voxel-overlap/", "project_urls": {"Homepage": "https://github.com/cherenkov-plenoscope/ray_voxel_overlap"}, "release_url": "https://pypi.org/project/ray-voxel-overlap/0.0.4/", "requires_dist": null, "requires_python": ">=3", "summary": "Estimate the tomographic system-matrix for rays in voxels.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overlap of a ray and a volume cell (voxel) <a href=\"https://travis-ci.org/cherenkov-plenoscope/ray_voxel_overlap\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1df0e04d9b7b09526f5b21b447bf8333aedf877/68747470733a2f2f7472617669732d63692e6f72672f63686572656e6b6f762d706c656e6f73636f70652f7261795f766f78656c5f6f7665726c61702e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>Estimate the euclidean overlap passed by a ray within a rectangular volume cell (voxel).</p>\n<p><img alt=\"img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/25998fe707f282dbf62d3f1729b6ac2e0be298fe/726561646d652f7261795f616e645f766f78656c2e737667\"></p>\n<p>For a given, rectangular space partitioning in 3D, and a given ray the overlap of all voxels with the ray is estimated.\nThe figure shows a ray and its overlap with voxels.\nA brown overlap with voxel <code>3</code>, a red overlap with voxel <code>0</code>, a purple overlap with voxel <code>4</code>, and a green overlap with voxel <code>5</code>. The ray is defined by its support and direction vectors. The space-partitioning is defined by its bin-edges.</p>\n<h1>Interface</h1>\n<p>There is one core function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ray_voxel_overlap</span>\n<span class=\"n\">ray_voxel_overlap</span><span class=\"o\">.</span><span class=\"n\">estimate_overlap_of_ray_with_voxels</span><span class=\"err\">?</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Returns the voxel indices and overlap distances for one single ray</span>\n<span class=\"sd\">(defined by support and direction) with voxels defined by the bin_edges</span>\n<span class=\"sd\">in x,y and z.</span>\n\n<span class=\"sd\">support         3D support vector of ray.</span>\n\n<span class=\"sd\">direction       3D direction vector of ray.</span>\n\n<span class=\"sd\">x_bin_edges     voxel bin edge positions in x.</span>\n\n<span class=\"sd\">y_bin_edges     voxel bin edge positions in y.</span>\n\n<span class=\"sd\">z_bin_edges     voxel bin edge positions in z.</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p>There are two more functions:</p>\n<ul>\n<li>2nd <code>ray_voxel_overlap.estimate_system_matrix()</code></li>\n</ul>\n<p>Create a system-matrix using scipy.sparse matrix which can be used for iterative tomographic reconstructions.</p>\n<ul>\n<li>3rd <code>ray_voxel_overlap.estimate_overlap_of_ray_bundle_with_voxels()</code></li>\n</ul>\n<p>Average the overlap of multiple rays representing a single read-out-channel. This is useful when a single ray is not representative enough for the geometry sensed by a read-out-channel in your tomographic setup, e.g. when there is a narrow depth-of-field.</p>\n<h2>Tomographic system-matrix</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ray_voxel_overlap</span> <span class=\"k\">as</span> <span class=\"nn\">rvo</span>\n\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">N_RAYS</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">supports</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">N_RAYS</span><span class=\"p\">),</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">N_RAYS</span><span class=\"p\">),</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">N_RAYS</span><span class=\"p\">)</span>\n<span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<span class=\"n\">directions</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">N_RAYS</span><span class=\"p\">),</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">N_RAYS</span><span class=\"p\">),</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">N_RAYS</span><span class=\"p\">)</span>\n<span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<span class=\"n\">norm_directions</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">directions</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">directions</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">/=</span> <span class=\"n\">norm_directions</span>\n<span class=\"n\">directions</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">/=</span> <span class=\"n\">norm_directions</span>\n<span class=\"n\">directions</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">/=</span> <span class=\"n\">norm_directions</span>\n\n<span class=\"n\">N_X_BINS</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n<span class=\"n\">N_Y_BINS</span> <span class=\"o\">=</span> <span class=\"mi\">13</span>\n<span class=\"n\">N_Z_BINS</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"n\">system_matrix</span> <span class=\"o\">=</span> <span class=\"n\">rvo</span><span class=\"o\">.</span><span class=\"n\">estimate_system_matrix</span><span class=\"p\">(</span>\n    <span class=\"n\">supports</span><span class=\"o\">=</span><span class=\"n\">supports</span><span class=\"p\">,</span>\n    <span class=\"n\">directions</span><span class=\"o\">=</span><span class=\"n\">directions</span><span class=\"p\">,</span>\n    <span class=\"n\">x_bin_edges</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">100.</span><span class=\"p\">,</span> <span class=\"mf\">100.</span><span class=\"p\">,</span> <span class=\"n\">N_X_BINS</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">y_bin_edges</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">100.</span><span class=\"p\">,</span> <span class=\"mf\">100.</span><span class=\"p\">,</span> <span class=\"n\">N_Y_BINS</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">z_bin_edges</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">200.</span><span class=\"p\">,</span> <span class=\"n\">N_Z_BINS</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>How it is done</h2>\n<p>To be fast, the production-code is written in <code>C</code> and wrapped in <code>cython</code>. But for development, there is a <code>python</code> implementation.</p>\n<h2>Authors</h2>\n<p>Sebastian A. Mueller,</p>\n<p>ETH-Zurich, Switzerland (2014-2019),</p>\n<p>MPI-Heidelberg, Germany (2019-)</p>\n\n          </div>"}, "last_serial": 5949099, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "272565667edc067b5ab82d0a1160eb1b", "sha256": "a1da736a4770754ee86cade96ef0fdcb07fbcc32bf9125b7eece2f347e15d583"}, "downloads": -1, "filename": "ray_voxel_overlap-0.0.2.tar.gz", "has_sig": false, "md5_digest": "272565667edc067b5ab82d0a1160eb1b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8644, "upload_time": "2019-10-08T10:54:58", "upload_time_iso_8601": "2019-10-08T10:54:58.439285Z", "url": "https://files.pythonhosted.org/packages/2d/4f/c4bf5ea6d8b87fcd1187e276379f68eb346c8369003d86af2d1e6623dc99/ray_voxel_overlap-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "b0c117351615564451abace2fe834d0a", "sha256": "54853ecf6d8c8f0ccdb2acceedb2ad5b088fff6ad57587dacad5ac8d76c6b356"}, "downloads": -1, "filename": "ray_voxel_overlap-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b0c117351615564451abace2fe834d0a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8505, "upload_time": "2019-10-09T10:23:33", "upload_time_iso_8601": "2019-10-09T10:23:33.544562Z", "url": "https://files.pythonhosted.org/packages/ff/97/037a1f02ab1b0c5e184bd15bf16a63c1a5b2dedd00e04ec0f56144c8b25d/ray_voxel_overlap-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b05c04de0c456153c358f17856070d0c", "sha256": "eafffa8be432b988b3131b3a3f7260ed4e35e9eee4de9476c311ece732589534"}, "downloads": -1, "filename": "ray_voxel_overlap-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b05c04de0c456153c358f17856070d0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8509, "upload_time": "2019-10-09T10:51:57", "upload_time_iso_8601": "2019-10-09T10:51:57.844415Z", "url": "https://files.pythonhosted.org/packages/2b/ec/b444f66c7b52fb041f0b1b4210483ec3c08c3be8195398aca77723749618/ray_voxel_overlap-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b05c04de0c456153c358f17856070d0c", "sha256": "eafffa8be432b988b3131b3a3f7260ed4e35e9eee4de9476c311ece732589534"}, "downloads": -1, "filename": "ray_voxel_overlap-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b05c04de0c456153c358f17856070d0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8509, "upload_time": "2019-10-09T10:51:57", "upload_time_iso_8601": "2019-10-09T10:51:57.844415Z", "url": "https://files.pythonhosted.org/packages/2b/ec/b444f66c7b52fb041f0b1b4210483ec3c08c3be8195398aca77723749618/ray_voxel_overlap-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:53 2020"}