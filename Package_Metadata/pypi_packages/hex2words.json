{"info": {"author": "Pablo Figue", "author_email": "pfigue posteo de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Artistic Software", "Topic :: Security"], "description": "hex2words\n=========\n\n`hex2words <https://pypi.python.org/pypi/hex2words>`__ is a command-line python program to convert hexadecimal\nnumbers (e.g. file hashes, GPG keys fingerprints, etc.) into a list of\nPGP words.\n\nThese PGP words can be used then to check if fingerprints or hashes\nmatch via a phone line or just reading them aloud to your workmates.\n\nPGP words\n=========\n\n`PGP words <https://en.wikipedia.org/wiki/PGP_word_list>`__ are words\nchosen in a way that they sound very different to each other. Each\nnumber between 0 and 255 has two equivalent words, for example 0x12 has\n*atlas* and *backwater*.\n\nIf the byte 0x12 is in even order (2nd position, 4th, etc.) will be\ntranslated to *atlas*, if it is in odd order, it will be translated to\n*backwater*. In this way, if you have a number like 0x1212 you will get\ntwo different words: *atlas backwater*, instead of twice the same word,\nwhich prevents some mistakes of being done via a phone conversation.\n\nhex2words for nodejs\n====================\nThis `hex2words <https://www.npmjs.com/package/hex2words>`__ is a library for *npm*, in case you are interested in NodeJS. Not mine.\n\nUsing hex2words\n===============\n\nInstalling hex2words\n--------------------\n::\n\n  $ pip install hex2words\n\nSimplest usage\n--------------\n\nThe words will be always all in lower-case. It seems, the lower or upper case changes the intonation when using programs like `festival` or `say`.\n\nWith 3 identifiers, a MAC, an IP6 address and some custom-format hexa id. The three as command-line arguments::\n\n  $ hex2words dc:0e:e5:62:94:ac fe80::df0e:e5ff:fe62:94ac 920d6b30-0fa4-11e5-9cde-442a60f31a14\n  dc:0e:e5:62:94:ac\n          sweatband atlantic topmost gadgetry pluto penetrate\n  \n  fe80::df0e:e5ff:fe62:94ac\n          woodlark intention talon atlantic topmost yucat\u00e1n woodlark gadgetry pluto penetrate\n  \n  920d6b30-0fa4-11e5-9cde-442a60f31a14\n          physique asteroid glitter commando artist pandora athens travesty python telephone crumpled chambermaid facial vertigo beehive belowground\n  $\n\nPiping file contents\n--------------------\n\nThe same three identifiers as before, stored in a file::\n\n  $ cat > test\n  dc:0e:e5:62:94:ac\n  fe80::df0e:e5ff:fe62:94ac\n  920d6b30-0fa4-11e5-9cde-442a60f31a14\n  ^D\n  $\n\nAnd then, piping the file::\n\n  $ cat test | hex2words\n  dc:0e:e5:62:94:ac\n          sweatband Atlantic topmost gadgetry Pluto penetrate\n  \n  fe80::df0e:e5ff:fe62:94ac\n          woodlark intention talon Atlantic topmost Yucat\u00e1n woodlark gadgetry Pluto penetrate\n  \n  920d6b30-0fa4-11e5-9cde-442a60f31a14\n          physique asteroid glitter commando artist Pandora Athens travesty python telephone crumpled chambermaid facial vertigo beehive belowground\n  $\n\n\nPiping file hashes\n------------------\nSHA1 hashes of all python source files in the hex2words/ directory::\n\n  $ sha1sum hex2words/*.py  | hex2words\n  hex2words/__init__.py:\n          2a8c85a1f694f79bda523b1423a3f7a473824fc5\n          brickyard megaton music outfielder village molecule virus Norwegian surmount enrollment clockwork belowground blowtorch pandemic virus Pandora hockey Istanbul dropper resistor\n  \n  hex2words/hex2words.py:\n          6d859a1b70ee1f8274555031df14522cbb2137a0\n          goggles leprosy pupil bravado guidance universe billiard Istanbul indoors equipment drumbeat company talon belowground Dupont Chicago shamrock Camelot clamshell Orlando\n  \n  hex2words/input.py:\n          769fb587669dfc506ad5b951ac05bd6379f2386a\n          inverse opulent scorecard liberty framework Ohio wayside embezzle Geiger specialist sentence enchanting ribcage almighty skullcap Galveston jawbone vagabond classic hamburger\n  \n  hex2words/program.py:\n          d1bd5a1445be18880a842eb62bd15ab28cc39d35\n          stairway quantity enlist belowground crusade racketeer beaming maritime allow Jupiter buzzard potato briefcase scavenger enlist pioneer offload replica quadrant conformist\n  \n  hex2words/version.py:\n          b6ba6a706b082a8b440150f1ee2f229bcaa1d658\n          Scotland puberty Geiger hesitate glitter antenna brickyard Medusa crumpled adviser drumbeat vacancy tycoon combustion blockade Norwegian spellbind outfielder stockman everyday\n  $\n\nPiping GPG fingerprints\n-----------------------\nYou can use both, the last 4 bytes of the fingerprint (*34EC9CBA*), or the complete fingerprint::\n\n  $ hex2words 34EC9CBA \"EF45 5106 80FB 0232 6B04 5AFB 3247 4CF8 34EC 9CBA\"\n  34EC9CBA\n          choking unicorn python puberty\n  \n  EF45 5106 80FB 0232 6B04 5AFB 3247 4CF8 34EC 9CBA\n          uncut detector drunken amulet merit Wichita accrue component glitter alkali enlist Wichita checkup determine drainage warranty choking unicorn python puberty\n\nOr piping from *gpg*::\n\n  $ gpg --list-keys --fingerprint 34EC9CBA | hex2words\n  EF45510680FB02326B045AFB32474CF834EC9CBA: uncut detector drunken amulet merit Wichita accrue component glitter alkali enlist Wichita checkup determine drainage warranty choking unicorn python puberty\n\nDevelopment\n===========\n\nInstalling for development\n--------------------------\n::\n\n  $ git clone git@bitbucket.org:pfigue/hex2words.git\n  $ cd hex2words/\n\nthen you can run ``setup.py install``, for example.\n\nRunning the tests\n-----------------\n\n``setup.py test`` should work. Tests are written for py.test framework. They live in hex2words/tests/.\n\nContributing\n------------\n\nJust fork the project and send pull requests with your magic. Try to\nindent your code with ``flake8`` or similar, and try to write tests and\nnice code.\n\nAll feedback is welcomed!\n-------------------------", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/pfigue/hex2words", "keywords": "hexadecimal,fingerprint,gpg,pgp,pgp words", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "hex2words", "package_url": "https://pypi.org/project/hex2words/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hex2words/", "project_urls": {"Homepage": "https://bitbucket.org/pfigue/hex2words"}, "release_url": "https://pypi.org/project/hex2words/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Hexadecimal ID/Fingerprint to PGP-words list converter", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"hex2words\">\n<h2>hex2words</h2>\n<p><a href=\"https://pypi.python.org/pypi/hex2words\" rel=\"nofollow\">hex2words</a> is a command-line python program to convert hexadecimal\nnumbers (e.g. file hashes, GPG keys fingerprints, etc.) into a list of\nPGP words.</p>\n<p>These PGP words can be used then to check if fingerprints or hashes\nmatch via a phone line or just reading them aloud to your workmates.</p>\n</div>\n<div id=\"pgp-words\">\n<h2>PGP words</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/PGP_word_list\" rel=\"nofollow\">PGP words</a> are words\nchosen in a way that they sound very different to each other. Each\nnumber between 0 and 255 has two equivalent words, for example 0x12 has\n<em>atlas</em> and <em>backwater</em>.</p>\n<p>If the byte 0x12 is in even order (2nd position, 4th, etc.) will be\ntranslated to <em>atlas</em>, if it is in odd order, it will be translated to\n<em>backwater</em>. In this way, if you have a number like 0x1212 you will get\ntwo different words: <em>atlas backwater</em>, instead of twice the same word,\nwhich prevents some mistakes of being done via a phone conversation.</p>\n</div>\n<div id=\"hex2words-for-nodejs\">\n<h2>hex2words for nodejs</h2>\n<p>This <a href=\"https://www.npmjs.com/package/hex2words\" rel=\"nofollow\">hex2words</a> is a library for <em>npm</em>, in case you are interested in NodeJS. Not mine.</p>\n</div>\n<div id=\"using-hex2words\">\n<h2>Using hex2words</h2>\n<div id=\"installing-hex2words\">\n<h3>Installing hex2words</h3>\n<pre>$ pip install hex2words\n</pre>\n</div>\n<div id=\"simplest-usage\">\n<h3>Simplest usage</h3>\n<p>The words will be always all in lower-case. It seems, the lower or upper case changes the intonation when using programs like <cite>festival</cite> or <cite>say</cite>.</p>\n<p>With 3 identifiers, a MAC, an IP6 address and some custom-format hexa id. The three as command-line arguments:</p>\n<pre>$ hex2words dc:0e:e5:62:94:ac fe80::df0e:e5ff:fe62:94ac 920d6b30-0fa4-11e5-9cde-442a60f31a14\ndc:0e:e5:62:94:ac\n        sweatband atlantic topmost gadgetry pluto penetrate\n\nfe80::df0e:e5ff:fe62:94ac\n        woodlark intention talon atlantic topmost yucat\u00e1n woodlark gadgetry pluto penetrate\n\n920d6b30-0fa4-11e5-9cde-442a60f31a14\n        physique asteroid glitter commando artist pandora athens travesty python telephone crumpled chambermaid facial vertigo beehive belowground\n$\n</pre>\n</div>\n<div id=\"piping-file-contents\">\n<h3>Piping file contents</h3>\n<p>The same three identifiers as before, stored in a file:</p>\n<pre>$ cat &gt; test\ndc:0e:e5:62:94:ac\nfe80::df0e:e5ff:fe62:94ac\n920d6b30-0fa4-11e5-9cde-442a60f31a14\n^D\n$\n</pre>\n<p>And then, piping the file:</p>\n<pre>$ cat test | hex2words\ndc:0e:e5:62:94:ac\n        sweatband Atlantic topmost gadgetry Pluto penetrate\n\nfe80::df0e:e5ff:fe62:94ac\n        woodlark intention talon Atlantic topmost Yucat\u00e1n woodlark gadgetry Pluto penetrate\n\n920d6b30-0fa4-11e5-9cde-442a60f31a14\n        physique asteroid glitter commando artist Pandora Athens travesty python telephone crumpled chambermaid facial vertigo beehive belowground\n$\n</pre>\n</div>\n<div id=\"piping-file-hashes\">\n<h3>Piping file hashes</h3>\n<p>SHA1 hashes of all python source files in the hex2words/ directory:</p>\n<pre>$ sha1sum hex2words/*.py  | hex2words\nhex2words/__init__.py:\n        2a8c85a1f694f79bda523b1423a3f7a473824fc5\n        brickyard megaton music outfielder village molecule virus Norwegian surmount enrollment clockwork belowground blowtorch pandemic virus Pandora hockey Istanbul dropper resistor\n\nhex2words/hex2words.py:\n        6d859a1b70ee1f8274555031df14522cbb2137a0\n        goggles leprosy pupil bravado guidance universe billiard Istanbul indoors equipment drumbeat company talon belowground Dupont Chicago shamrock Camelot clamshell Orlando\n\nhex2words/input.py:\n        769fb587669dfc506ad5b951ac05bd6379f2386a\n        inverse opulent scorecard liberty framework Ohio wayside embezzle Geiger specialist sentence enchanting ribcage almighty skullcap Galveston jawbone vagabond classic hamburger\n\nhex2words/program.py:\n        d1bd5a1445be18880a842eb62bd15ab28cc39d35\n        stairway quantity enlist belowground crusade racketeer beaming maritime allow Jupiter buzzard potato briefcase scavenger enlist pioneer offload replica quadrant conformist\n\nhex2words/version.py:\n        b6ba6a706b082a8b440150f1ee2f229bcaa1d658\n        Scotland puberty Geiger hesitate glitter antenna brickyard Medusa crumpled adviser drumbeat vacancy tycoon combustion blockade Norwegian spellbind outfielder stockman everyday\n$\n</pre>\n</div>\n<div id=\"piping-gpg-fingerprints\">\n<h3>Piping GPG fingerprints</h3>\n<p>You can use both, the last 4 bytes of the fingerprint (<em>34EC9CBA</em>), or the complete fingerprint:</p>\n<pre>$ hex2words 34EC9CBA \"EF45 5106 80FB 0232 6B04 5AFB 3247 4CF8 34EC 9CBA\"\n34EC9CBA\n        choking unicorn python puberty\n\nEF45 5106 80FB 0232 6B04 5AFB 3247 4CF8 34EC 9CBA\n        uncut detector drunken amulet merit Wichita accrue component glitter alkali enlist Wichita checkup determine drainage warranty choking unicorn python puberty\n</pre>\n<p>Or piping from <em>gpg</em>:</p>\n<pre>$ gpg --list-keys --fingerprint 34EC9CBA | hex2words\nEF45510680FB02326B045AFB32474CF834EC9CBA: uncut detector drunken amulet merit Wichita accrue component glitter alkali enlist Wichita checkup determine drainage warranty choking unicorn python puberty\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<div id=\"installing-for-development\">\n<h3>Installing for development</h3>\n<pre>$ git clone git@bitbucket.org:pfigue/hex2words.git\n$ cd hex2words/\n</pre>\n<p>then you can run <tt>setup.py install</tt>, for example.</p>\n</div>\n<div id=\"running-the-tests\">\n<h3>Running the tests</h3>\n<p><tt>setup.py test</tt> should work. Tests are written for py.test framework. They live in hex2words/tests/.</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Just fork the project and send pull requests with your magic. Try to\nindent your code with <tt>flake8</tt> or similar, and try to write tests and\nnice code.</p>\n</div>\n<div id=\"all-feedback-is-welcomed\">\n<h3>All feedback is welcomed!</h3>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1680749, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "933459e24a63b1b26c1f0b94d4f6149b", "sha256": "8df3b8038bc2bd92780f6f4014b729312ec0147d1655c551dbf19d6325fc1c71"}, "downloads": -1, "filename": "hex2words-0.0.1.tar.gz", "has_sig": false, "md5_digest": "933459e24a63b1b26c1f0b94d4f6149b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11742, "upload_time": "2015-06-14T11:05:01", "upload_time_iso_8601": "2015-06-14T11:05:01.844267Z", "url": "https://files.pythonhosted.org/packages/7c/36/f2fc0f81bef113e23b253451a2ec2494b67653140dc13bbea6e48ee0e1db/hex2words-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "291fb159febd5d9628c68cd8c0214f01", "sha256": "bc7ced51a08cee07505c48c5857647fc68f64442bb564657c9a3fce33dafd302"}, "downloads": -1, "filename": "hex2words-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "291fb159febd5d9628c68cd8c0214f01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15844, "upload_time": "2015-08-17T15:49:04", "upload_time_iso_8601": "2015-08-17T15:49:04.354348Z", "url": "https://files.pythonhosted.org/packages/f5/6f/a15782e4b0464f0644c5f9d23648242d01f772a7b3f438505c21ea38292e/hex2words-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0486de36cd1ea85bbd8c7819b7ac280", "sha256": "0e8cfdf8918983d426d213fa9b76f12b81cd5a5229c42266aea2fa682f7d3f13"}, "downloads": -1, "filename": "hex2words-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e0486de36cd1ea85bbd8c7819b7ac280", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13709, "upload_time": "2015-08-17T15:49:09", "upload_time_iso_8601": "2015-08-17T15:49:09.115578Z", "url": "https://files.pythonhosted.org/packages/4e/dc/81c3c530d5b5ab48b584126b2476eb3d97517aebc1eb949afc321c5bd58f/hex2words-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "291fb159febd5d9628c68cd8c0214f01", "sha256": "bc7ced51a08cee07505c48c5857647fc68f64442bb564657c9a3fce33dafd302"}, "downloads": -1, "filename": "hex2words-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "291fb159febd5d9628c68cd8c0214f01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15844, "upload_time": "2015-08-17T15:49:04", "upload_time_iso_8601": "2015-08-17T15:49:04.354348Z", "url": "https://files.pythonhosted.org/packages/f5/6f/a15782e4b0464f0644c5f9d23648242d01f772a7b3f438505c21ea38292e/hex2words-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0486de36cd1ea85bbd8c7819b7ac280", "sha256": "0e8cfdf8918983d426d213fa9b76f12b81cd5a5229c42266aea2fa682f7d3f13"}, "downloads": -1, "filename": "hex2words-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e0486de36cd1ea85bbd8c7819b7ac280", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13709, "upload_time": "2015-08-17T15:49:09", "upload_time_iso_8601": "2015-08-17T15:49:09.115578Z", "url": "https://files.pythonhosted.org/packages/4e/dc/81c3c530d5b5ab48b584126b2476eb3d97517aebc1eb949afc321c5bd58f/hex2words-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:29 2020"}