{"info": {"author": "Karl Bedrich", "author_email": "karl@bedrich.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Visualization", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "**dataArtist** - *\u2026scientific data processing made easy.*\n\n.. image:: https://img.shields.io/badge/License-GPLv3-red.svg\n.. image:: https://img.shields.io/badge/python-2.6%7C2.7-yellow.svg\n\n`Download for Windows 7-10`_\n\n|screenshot|\n\nAbout\n-----\n\n| *dataArtist* is a graphical program for interactive data analysis and\n  processing. It is currently specialized image processing tasks in\n  combination with electroluminescence imaging of photovoltaic devices.\n| It is written in Python (2.7) and is released under open source.\n| *dataArtist* is written to be platform independent. It is known to run\n  under Windows 7-10 and Ubuntu Linux 14.10 (soon).\n\n**Please cite *dataArtist* as follows:**\n\n    K.G. Bedrich et al., \u201cElectroluminescence Imaging of PV Devices:\n    Camera Calibration and Image Correction\u201d, Proc. 43rd IEEE Photovoltaic Specialists Conference, Portland, 2016.\n\n\nManuals\n-------\n\n`USER manual`_\n\n`DEVELOPERS manual`_\n\nOnline Tutorials\n----------------\n\n| General usage, camera calibration and image correction are explained\n  in youtube screencast sessions, see\n| |youtube|\n\nSupported file types\n--------------------\n\nData is imported through drag n\u2019drop.\n\n#. Images\n\n-  Common used (TIF, BMP, PNG, JPG, CSV, TXT, MAT)\n-  RAW, if data type and image shape are known\n-  Numpy arrays\n\n#. Plots\n\n-  CSV, TXT, numpy arrays\n\nInstallation\n------------\n\na) Portable version\n~~~~~~~~~~~~~~~~~~~\n\n-  *dataArtist* runs out of the box. No installation needed (currently\n   Windows only). See section `Releases`_.\n\n\nb) Installation into existing Python installation using pip\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- After installing Python2.7 and ensuring that 'pip' is a recognised command in the command shell (Windows: CMD.exe).\n  you need to install the following packages BEFORE installing dataArtist:\n  \n    - PyQt4 \n    - OpenCV2.4\n    - OPTIONAL: RabbitMQ (for inter-program communication)\n  \n   Please refer to the `USER manual`_ for more information.\n-  Once these packages are installed, open a command shell and type:\n\n``pip install dataArtist``\n\n- Now start dataArtist from the command shell:\n\n``dataArtist``\n\n- To launch dataArtist into the system tray type:\n\n``dataArtist -s``\n\n- To open a dataArtist session directly type:\n\n``dataArtist -o /path/to/my/session.da``\n\n\nScripting, Automation, Modding\n------------------------------\n\n| *dataArtist* comes with a built-in python shell. Data can be examplary\n  accessed though ``d1.l3`` (display 1, data layer 3) and tools\n  e.g. through ``d.tools['Axes'].click()`` (in current display execute\n  tool \u2018Axes\u2019).\n| *dataArtist* allows adding own tools, displays and importers, for\n  examples, see dataArtist/modding.\n\nMain dependencies\n-----------------\n\n+----------------------+----------------------------------------------------------+\n| Package              | Description                                              |\n+======================+==========================================================+\n| `pyqtgraph\\_karl`_   | Scientific Graphics and GUI Library based on Qt (Fork)   |\n+----------------------+----------------------------------------------------------+\n| `imgProcessor`_      | General propose image processing libary                  |\n+----------------------+----------------------------------------------------------+\n| `appBase`_           | Base packages for apps, based on Qt                      |\n+----------------------+----------------------------------------------------------+\n| `fancyWidgets`_      | A collection of fancy widgets, based on Qt               |\n+----------------------+----------------------------------------------------------+\n| `fancyTools`_        | A collection of useful not-GUI tools                     |\n+----------------------+----------------------------------------------------------+\n\nExample: Electroluminescence imaging\n------------------------------------\n\nCamera calibration\n~~~~~~~~~~~~~~~~~~\n\nFor camera calibration all needed images are dropped into *dataArtist*\nand the matching tool is executed. The calibration results are\nhereinafter saved to a calibration file. The determination of the\npoint spread function is exemplary shown in the following figure:\n\n|screenshotpsf|\n\n    dataArtist screenshot - toolbar \u2018calibration\u2019. **a**: Best focus\n    determination; **b**: noise-level-function measurement; **c**: Dark\n    current mapping; **d**: Flat field mapping; **e**: PSF estimation\n    (selected): **f**: lens distortion measurement\n\nImage correction\n~~~~~~~~~~~~~~~~\n\nThe correction of EL image is shown in the following figure.\nPerspective correction (red box) can be done either using the outline\nof the PV device (automatically detected or manually defined) or using\na reference image.\n\n|screenshotcorrection|\n\n    | dataArtist screenshot - **a**: tool \u2018CalibrationFile\u2019; **b**: tool\n      \u2018CorrectCamera\u2019; **c**: tool \u2018PerspectiveCorrection\u2019\n    | **green line**: Camera correction; **red line**: Perspective\n      correction\n\n\n\n\n\n.. |screenshot| image:: https://cloud.githubusercontent.com/assets/350050/15406631/806a7a8a-1dc4-11e6-9e76-709cd482857f.png\n.. |screenshotpsf| image:: https://cloud.githubusercontent.com/assets/350050/15404653/bd2e51b6-1dbb-11e6-8282-2ea539f0286d.png\n.. |screenshotcorrection| image:: https://cloud.githubusercontent.com/assets/350050/15404785/53d4c992-1dbc-11e6-93b7-c6108ab9a2b0.png\n.. _Download for Windows 7-10: https://github.com/radjkarl/dataArtist/releases/tag/v0.1-alpha\n.. _USER manual: https://github.com/radjkarl/dataArtist/raw/master/dataArtist/media/USER_MANUAL.pdf\n.. _DEVELOPERS manual: http://radjkarl.github.io/dataArtist/\n.. _Releases: https://github.com/radjkarl/dataArtist/releases\n.. _pyqtgraph\\_karl: https://github.com/radjkarl/pyqtgraph_karl\n.. _imgProcessor: https://github.com/radjkarl/imgProcessor\n.. _appBase: https://github.com/radjkarl/appBase\n.. _fancyWidgets: https://github.com/radjkarl/fancyWidgets\n.. _fancyTools: https://github.com/radjkarl/fancyTools\n\n.. |youtube| image:: https://cloud.githubusercontent.com/assets/350050/15802145/a8eaac4c-2a66-11e6-865d-4c77c306acc9.png\n   :target: https://www.youtube.com/playlist?list=PLKyzYL-Q8Rcl6tHN1PjB3FiIfI24pdLLb", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/radjkarl/dataArtist", "keywords": null, "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "dataArtist", "package_url": "https://pypi.org/project/dataArtist/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dataArtist/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/radjkarl/dataArtist"}, "release_url": "https://pypi.org/project/dataArtist/0.1.15/", "requires_dist": null, "requires_python": null, "summary": "Interactive scientific data and image processing", "version": "0.1.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>dataArtist</strong> - <em>\u2026scientific data processing made easy.</em></p>\n<img alt=\"https://img.shields.io/badge/License-GPLv3-red.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d483bf4dd9449e4a7682acfc2246277cc1e4ba4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d7265642e737667\">\n<img alt=\"https://img.shields.io/badge/python-2.6%7C2.7-yellow.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2260e16dd005f40483b85acf6a03ead08694615/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d322e36253743322e372d79656c6c6f772e737667\">\n<p><a href=\"https://github.com/radjkarl/dataArtist/releases/tag/v0.1-alpha\" rel=\"nofollow\">Download for Windows 7-10</a></p>\n<p><img alt=\"screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3683df53524651740cd8504d908dcb749023e2b1/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3335303035302f31353430363633312f38303661376138612d316463342d313165362d396537362d3730396364343832383537662e706e67\"></p>\n<div id=\"about\">\n<h2>About</h2>\n<div>\n<div><em>dataArtist</em> is a graphical program for interactive data analysis and\nprocessing. It is currently specialized image processing tasks in\ncombination with electroluminescence imaging of photovoltaic devices.</div>\n<div>It is written in Python (2.7) and is released under open source.</div>\n<div><em>dataArtist</em> is written to be platform independent. It is known to run\nunder Windows 7-10 and Ubuntu Linux 14.10 (soon).</div>\n</div>\n<p><strong>Please cite *dataArtist* as follows:</strong></p>\n<blockquote>\nK.G. Bedrich et al., \u201cElectroluminescence Imaging of PV Devices:\nCamera Calibration and Image Correction\u201d, Proc. 43rd IEEE Photovoltaic Specialists Conference, Portland, 2016.</blockquote>\n</div>\n<div id=\"manuals\">\n<h2>Manuals</h2>\n<p><a href=\"https://github.com/radjkarl/dataArtist/raw/master/dataArtist/media/USER_MANUAL.pdf\" rel=\"nofollow\">USER manual</a></p>\n<p><a href=\"http://radjkarl.github.io/dataArtist/\" rel=\"nofollow\">DEVELOPERS manual</a></p>\n</div>\n<div id=\"online-tutorials\">\n<h2>Online Tutorials</h2>\n<div>\n<div>General usage, camera calibration and image correction are explained\nin youtube screencast sessions, see</div>\n<div><a href=\"https://www.youtube.com/playlist?list=PLKyzYL-Q8Rcl6tHN1PjB3FiIfI24pdLLb\" rel=\"nofollow\"><img alt=\"youtube\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/392827ce83260000cb46414df5984c41f0c945af/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3335303035302f31353830323134352f61386561616334632d326136362d313165362d383635642d3463373763333036616363392e706e67\"></a></div>\n</div>\n</div>\n<div id=\"supported-file-types\">\n<h2>Supported file types</h2>\n<p>Data is imported through drag n\u2019drop.</p>\n<ol>\n<li>Images</li>\n</ol>\n<ul>\n<li>Common used (TIF, BMP, PNG, JPG, CSV, TXT, MAT)</li>\n<li>RAW, if data type and image shape are known</li>\n<li>Numpy arrays</li>\n</ul>\n<ol>\n<li>Plots</li>\n</ol>\n<ul>\n<li>CSV, TXT, numpy arrays</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"a-portable-version\">\n<h3>a) Portable version</h3>\n<ul>\n<li><em>dataArtist</em> runs out of the box. No installation needed (currently\nWindows only). See section <a href=\"https://github.com/radjkarl/dataArtist/releases\" rel=\"nofollow\">Releases</a>.</li>\n</ul>\n</div>\n<div id=\"b-installation-into-existing-python-installation-using-pip\">\n<h3>b) Installation into existing Python installation using pip</h3>\n<ul>\n<li><p>After installing Python2.7 and ensuring that \u2018pip\u2019 is a recognised command in the command shell (Windows: CMD.exe).\nyou need to install the following packages BEFORE installing dataArtist:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>PyQt4</li>\n<li>OpenCV2.4</li>\n<li>OPTIONAL: RabbitMQ (for inter-program communication)</li>\n</ul>\n</blockquote>\n<p>Please refer to the <a href=\"https://github.com/radjkarl/dataArtist/raw/master/dataArtist/media/USER_MANUAL.pdf\" rel=\"nofollow\">USER manual</a> for more information.</p>\n</blockquote>\n</li>\n<li><p>Once these packages are installed, open a command shell and type:</p>\n</li>\n</ul>\n<p><tt>pip install dataArtist</tt></p>\n<ul>\n<li>Now start dataArtist from the command shell:</li>\n</ul>\n<p><tt>dataArtist</tt></p>\n<ul>\n<li>To launch dataArtist into the system tray type:</li>\n</ul>\n<p><tt>dataArtist <span class=\"pre\">-s</span></tt></p>\n<ul>\n<li>To open a dataArtist session directly type:</li>\n</ul>\n<p><tt>dataArtist <span class=\"pre\">-o</span> /path/to/my/session.da</tt></p>\n</div>\n</div>\n<div id=\"scripting-automation-modding\">\n<h2>Scripting, Automation, Modding</h2>\n<div>\n<div><em>dataArtist</em> comes with a built-in python shell. Data can be examplary\naccessed though <tt>d1.l3</tt> (display 1, data layer 3) and tools\ne.g. through <tt><span class=\"pre\">d.tools['Axes'].click()</span></tt> (in current display execute\ntool \u2018Axes\u2019).</div>\n<div><em>dataArtist</em> allows adding own tools, displays and importers, for\nexamples, see dataArtist/modding.</div>\n</div>\n</div>\n<div id=\"main-dependencies\">\n<h2>Main dependencies</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Package</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><a href=\"https://github.com/radjkarl/pyqtgraph_karl\" rel=\"nofollow\">pyqtgraph_karl</a></td>\n<td>Scientific Graphics and GUI Library based on Qt (Fork)</td>\n</tr>\n<tr><td><a href=\"https://github.com/radjkarl/imgProcessor\" rel=\"nofollow\">imgProcessor</a></td>\n<td>General propose image processing libary</td>\n</tr>\n<tr><td><a href=\"https://github.com/radjkarl/appBase\" rel=\"nofollow\">appBase</a></td>\n<td>Base packages for apps, based on Qt</td>\n</tr>\n<tr><td><a href=\"https://github.com/radjkarl/fancyWidgets\" rel=\"nofollow\">fancyWidgets</a></td>\n<td>A collection of fancy widgets, based on Qt</td>\n</tr>\n<tr><td><a href=\"https://github.com/radjkarl/fancyTools\" rel=\"nofollow\">fancyTools</a></td>\n<td>A collection of useful not-GUI tools</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"example-electroluminescence-imaging\">\n<h2>Example: Electroluminescence imaging</h2>\n<div id=\"camera-calibration\">\n<h3>Camera calibration</h3>\n<p>For camera calibration all needed images are dropped into <em>dataArtist</em>\nand the matching tool is executed. The calibration results are\nhereinafter saved to a calibration file. The determination of the\npoint spread function is exemplary shown in the following figure:</p>\n<p><img alt=\"screenshotpsf\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/218b255cb1d2c942b66d3b59334e86baf27bdf60/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3335303035302f31353430343635332f62643265353162362d316462622d313165362d383238322d3265613533396630323836642e706e67\"></p>\n<blockquote>\ndataArtist screenshot - toolbar \u2018calibration\u2019. <strong>a</strong>: Best focus\ndetermination; <strong>b</strong>: noise-level-function measurement; <strong>c</strong>: Dark\ncurrent mapping; <strong>d</strong>: Flat field mapping; <strong>e</strong>: PSF estimation\n(selected): <strong>f</strong>: lens distortion measurement</blockquote>\n</div>\n<div id=\"image-correction\">\n<h3>Image correction</h3>\n<p>The correction of EL image is shown in the following figure.\nPerspective correction (red box) can be done either using the outline\nof the PV device (automatically detected or manually defined) or using\na reference image.</p>\n<p><img alt=\"screenshotcorrection\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f21c46da011a8c0d6bcbe3b9397ba2ff4bca817f/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3335303035302f31353430343738352f35336434633939322d316462632d313165362d393362372d6336313038616239613262302e706e67\"></p>\n<blockquote>\n<div>\n<div>dataArtist screenshot - <strong>a</strong>: tool \u2018CalibrationFile\u2019; <strong>b</strong>: tool\n\u2018CorrectCamera\u2019; <strong>c</strong>: tool \u2018PerspectiveCorrection\u2019</div>\n<div><strong>green line</strong>: Camera correction; <strong>red line</strong>: Perspective\ncorrection</div>\n</div>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2264561, "releases": {"0.1.14": [{"comment_text": "", "digests": {"md5": "ad184a1af22edb24bf459486428443b4", "sha256": "92c227225a96c37fcc0db47cf6512e13af1f83570e6134f0517d322a6aa1b418"}, "downloads": -1, "filename": "dataArtist-0.1.14-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad184a1af22edb24bf459486428443b4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 2125981, "upload_time": "2016-06-04T03:29:24", "upload_time_iso_8601": "2016-06-04T03:29:24.538033Z", "url": "https://files.pythonhosted.org/packages/dd/d5/d32a1c4cb8117cac70d39f4dec69bfc543d244b8833d4e89d7f74859597f/dataArtist-0.1.14-py2.py3-none-any.whl", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "8a39f81a333c98e5d2c0e922d60a66bc", "sha256": "506f92770034324e42fb3977f60589a433307c5867fb79f4d3f6ce98f1b28d93"}, "downloads": -1, "filename": "dataArtist-0.1.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8a39f81a333c98e5d2c0e922d60a66bc", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 2163437, "upload_time": "2016-08-05T17:16:01", "upload_time_iso_8601": "2016-08-05T17:16:01.700835Z", "url": "https://files.pythonhosted.org/packages/03/55/7067ed32ca154b19df2ab8b862cfa18014bb925776ee43423bc0aa36266f/dataArtist-0.1.15-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a39f81a333c98e5d2c0e922d60a66bc", "sha256": "506f92770034324e42fb3977f60589a433307c5867fb79f4d3f6ce98f1b28d93"}, "downloads": -1, "filename": "dataArtist-0.1.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8a39f81a333c98e5d2c0e922d60a66bc", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 2163437, "upload_time": "2016-08-05T17:16:01", "upload_time_iso_8601": "2016-08-05T17:16:01.700835Z", "url": "https://files.pythonhosted.org/packages/03/55/7067ed32ca154b19df2ab8b862cfa18014bb925776ee43423bc0aa36266f/dataArtist-0.1.15-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:40:31 2020"}