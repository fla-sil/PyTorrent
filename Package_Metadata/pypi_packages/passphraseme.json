{"info": {"author": "Micah Lee", "author_email": "micah@micahflee.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Security :: Cryptography", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# passphraseme\n\nA quick and simple cryptographically secure script to generate high entropy passphrases using [the Electronic Frontier Foundation's wordlists](https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases), including their [fandom-inspired wordlists](https://www.eff.org/deeplinks/2018/08/dragon-con-diceware).\n\n## Installation\n\n```sh\npip3 install passphraseme\n```\n\n## Usage\n\nRun `passphraseme` with a number to generate secure passphrases using EFF's\nlarge wordlist, like this:\n\n```\n$ passphraseme 7\nbanana stopwatch appealing germinate survival retired comma\n$ passphraseme 5\nborrower harvest stature entity blimp\n```\n\nYou can also optionally choose a different wordlist. Here are all of the command\nline arguments:\n\n| Short             | Long                        | Description                                                           |\n|-------------------|-----------------------------|-----------------------------------------------------------------------|\n| `-h`              | `--help`                    | show help message                                                     |\n|                   | `--sep`                     | Separator (default \" \")                                               |\n| `-s1`             | `--short1`                  | Use EFF's general short wordlist                                      |\n| `-s2`             | `--short2`                  | Use EFF's short wordlist with unique prefixes                         |\n| `-got`            | `--game-of-thrones`         | Use EFF's Game of Thrones wordlist (Passwords of Westeros)            |\n| `-hp`             | `--harry-potter`            | Use EFF's Harry Potter wordlist (Accio Passphrase!)                   |\n| `-st`             | `--star-trek`               | Use EFF's Star Trek wordlist (Live Long and Passphrase)               |\n| `-sw`             | `--star-wars`               | Use EFF's Star Wars wordlist (The Passphrase Is Strong With This One) |\n| `-d [dictionary]` | `--dictionary [dictionary]` | Custom wordlist filename                                              |\n\nFor example, you can choose to use one of EFF's short wordlists, like this:\n\n```\n$ passphraseme -s1 5\nglide canal flag sage those\n$ passphraseme -s2 5\noptical anonymous nirvana agitate feudalist\n```\n\nOr you can embrace your inner nerd and use a fandom wordlist:\n\n```\n$ passphraseme --game-of-thrones 5\ncrow betrayed severely gloating asked\n$ passphraseme --harry-potter 5\nmirror relief date future mysterious\n$ passphraseme --star-trek 5\nchildren refused captain cornwell vulcan\n$ passphraseme --star-wars 5\nunkar struggle names ally cantina\n```\n\nYou can also choose to use a custom wordlist, like this:\n\n```\n$ passphraseme -d /usr/share/dict/words 7\nleading's Oz's caesareans lactate eloped interposed wowed\n```\n\nAnd if you prefer, you can use a custom separator, like `-` instead of ` `:\n\n```\n$ passphraseme --sep - 5\nungreased-tried-broadcast-deduce-yield\n$ passphraseme --sep . 5\nparmesan.unkempt.budget.premiere.puritan\n```\n\n## Strength of passphrases\n\nThis table shows the strength (bits of entropy) of `passphraseme`-generated passphrases of different lengths (1-10 words).\n\n|                                | Bits of entropy/word | 1          | 2          | 3          | 4          | 5           | 6              | 7               | 8               | 9                 | 10                |\n|--------------------------------|----------------------|------------|------------|------------|------------|-------------|----------------|-----------------|-----------------|-------------------|-------------------|\n| EFF large wordlist (*default*) | 12.925               | 12.9 (0 s) | 25.8 (0 s) | 38.8 (0 s) | 51.7 (1 h) | 64.6 (1 y)  | 77.5 (10.6k y) | 90.5 (82M y)    | 103.4 (642B y)  | 116.3 (4.99e15 y) | 129.2 (3.88e19 y) |\n| EFF short wordlists            | 10.339               | 10.3 (0 s) | 20.7 (0 s) | 31.0 (0 s) | 41.4 (4 s) | 51.7 (1 h)  | 62.0 (83 d)    | 72.4 (295 y)    | 82.7 (382.3k y) | 93.1 (495M y)     | 103.4 (642B y)    |\n| EFF fandom wordlists           | 11.965               | 12.0 (0 s) | 23.9 (0 s) | 35.9 (0 s) | 47.9 (6 m) | 59.8 (17 d) | 71.8 (196 y)   | 83.8 (787.1k y) | 95.7 (3B y)     | 107.7 (1.26e13 y) | 119.7 (5.04e16 y) |\n\nThe brute force time is calculated like this:\n\nI'm assuming you're using a passphrase for macOS 10.8+ (PBKDF2-SHA512) to\nencrypt your disk with FileVault. According to [this post](https://medium.com/@iraklis/running-hashcat-v4-0-0-in-amazons-aws-new-p3-16xlarge-instance-e8fab4541e9b),\nthe password cracking tool [hashcat](https://hashcat.net/hashcat/) can guess\n193,900 passphrases per second on an Amazon AWS p3.16xlarge instance, which\ncosts $24.48 per hour.\n\nIf an attacker is willing to spend up to $1 billion per day to guess your\npassphrase, they can afford to run 1.7 million of these AWS instances at once,\nmeaning they can guess ~330 billion passphrases per second. On average, a brute\nforce attack will find the passphrase after searching half the keyspace, so the\ntimes above are how long it takes to search half the keyspace.\n\nNote that the time \"3.88e19 y\" means \"3.88 x 10<sup>19</sup> years\". Also note\nthat the brute force times will vary wildly, both much quicker or much slower,\ndepending on the hash function or [KDF](https://en.wikipedia.org/wiki/Key_derivation_function)\nused -- basically, depending on what software you're using this passphrase with.\n\nCheck out [calc_passphrase_strength.py](/scripts/calc_passphrase_strength.py) to\nsee the maths.\n\n## Licenses\n\nThe wordlists included were created by Electronic Frontier Foundation, and are\ndistributed under the Creative Commons Attribution 3.0. For the fandom wordlists\n(Game of Thrones, Harry Potter, Star Trek, and Star Wars), EFF notes that \"Any\ntrademarks within the word list are the property of their respective trademark\nholders, who are not affiliated with the Electronic Frontier Foundation and do\nnot sponsor or endorse these passwords.\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/micahflee/passphraseme", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "passphraseme", "package_url": "https://pypi.org/project/passphraseme/", "platform": "", "project_url": "https://pypi.org/project/passphraseme/", "project_urls": {"Homepage": "https://github.com/micahflee/passphraseme"}, "release_url": "https://pypi.org/project/passphraseme/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "A quick and simple cryptographically secure script to generate high entropy passphrases using the Electronic Frontier Foundation's wordlists", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>passphraseme</h1>\n<p>A quick and simple cryptographically secure script to generate high entropy passphrases using <a href=\"https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases\" rel=\"nofollow\">the Electronic Frontier Foundation's wordlists</a>, including their <a href=\"https://www.eff.org/deeplinks/2018/08/dragon-con-diceware\" rel=\"nofollow\">fandom-inspired wordlists</a>.</p>\n<h2>Installation</h2>\n<pre>pip3 install passphraseme\n</pre>\n<h2>Usage</h2>\n<p>Run <code>passphraseme</code> with a number to generate secure passphrases using EFF's\nlarge wordlist, like this:</p>\n<pre><code>$ passphraseme 7\nbanana stopwatch appealing germinate survival retired comma\n$ passphraseme 5\nborrower harvest stature entity blimp\n</code></pre>\n<p>You can also optionally choose a different wordlist. Here are all of the command\nline arguments:</p>\n<table>\n<thead>\n<tr>\n<th>Short</th>\n<th>Long</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-h</code></td>\n<td><code>--help</code></td>\n<td>show help message</td>\n</tr>\n<tr>\n<td></td>\n<td><code>--sep</code></td>\n<td>Separator (default \" \")</td>\n</tr>\n<tr>\n<td><code>-s1</code></td>\n<td><code>--short1</code></td>\n<td>Use EFF's general short wordlist</td>\n</tr>\n<tr>\n<td><code>-s2</code></td>\n<td><code>--short2</code></td>\n<td>Use EFF's short wordlist with unique prefixes</td>\n</tr>\n<tr>\n<td><code>-got</code></td>\n<td><code>--game-of-thrones</code></td>\n<td>Use EFF's Game of Thrones wordlist (Passwords of Westeros)</td>\n</tr>\n<tr>\n<td><code>-hp</code></td>\n<td><code>--harry-potter</code></td>\n<td>Use EFF's Harry Potter wordlist (Accio Passphrase!)</td>\n</tr>\n<tr>\n<td><code>-st</code></td>\n<td><code>--star-trek</code></td>\n<td>Use EFF's Star Trek wordlist (Live Long and Passphrase)</td>\n</tr>\n<tr>\n<td><code>-sw</code></td>\n<td><code>--star-wars</code></td>\n<td>Use EFF's Star Wars wordlist (The Passphrase Is Strong With This One)</td>\n</tr>\n<tr>\n<td><code>-d [dictionary]</code></td>\n<td><code>--dictionary [dictionary]</code></td>\n<td>Custom wordlist filename</td>\n</tr></tbody></table>\n<p>For example, you can choose to use one of EFF's short wordlists, like this:</p>\n<pre><code>$ passphraseme -s1 5\nglide canal flag sage those\n$ passphraseme -s2 5\noptical anonymous nirvana agitate feudalist\n</code></pre>\n<p>Or you can embrace your inner nerd and use a fandom wordlist:</p>\n<pre><code>$ passphraseme --game-of-thrones 5\ncrow betrayed severely gloating asked\n$ passphraseme --harry-potter 5\nmirror relief date future mysterious\n$ passphraseme --star-trek 5\nchildren refused captain cornwell vulcan\n$ passphraseme --star-wars 5\nunkar struggle names ally cantina\n</code></pre>\n<p>You can also choose to use a custom wordlist, like this:</p>\n<pre><code>$ passphraseme -d /usr/share/dict/words 7\nleading's Oz's caesareans lactate eloped interposed wowed\n</code></pre>\n<p>And if you prefer, you can use a custom separator, like <code>-</code> instead of <code></code>:</p>\n<pre><code>$ passphraseme --sep - 5\nungreased-tried-broadcast-deduce-yield\n$ passphraseme --sep . 5\nparmesan.unkempt.budget.premiere.puritan\n</code></pre>\n<h2>Strength of passphrases</h2>\n<p>This table shows the strength (bits of entropy) of <code>passphraseme</code>-generated passphrases of different lengths (1-10 words).</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Bits of entropy/word</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EFF large wordlist (<em>default</em>)</td>\n<td>12.925</td>\n<td>12.9 (0 s)</td>\n<td>25.8 (0 s)</td>\n<td>38.8 (0 s)</td>\n<td>51.7 (1 h)</td>\n<td>64.6 (1 y)</td>\n<td>77.5 (10.6k y)</td>\n<td>90.5 (82M y)</td>\n<td>103.4 (642B y)</td>\n<td>116.3 (4.99e15 y)</td>\n<td>129.2 (3.88e19 y)</td>\n</tr>\n<tr>\n<td>EFF short wordlists</td>\n<td>10.339</td>\n<td>10.3 (0 s)</td>\n<td>20.7 (0 s)</td>\n<td>31.0 (0 s)</td>\n<td>41.4 (4 s)</td>\n<td>51.7 (1 h)</td>\n<td>62.0 (83 d)</td>\n<td>72.4 (295 y)</td>\n<td>82.7 (382.3k y)</td>\n<td>93.1 (495M y)</td>\n<td>103.4 (642B y)</td>\n</tr>\n<tr>\n<td>EFF fandom wordlists</td>\n<td>11.965</td>\n<td>12.0 (0 s)</td>\n<td>23.9 (0 s)</td>\n<td>35.9 (0 s)</td>\n<td>47.9 (6 m)</td>\n<td>59.8 (17 d)</td>\n<td>71.8 (196 y)</td>\n<td>83.8 (787.1k y)</td>\n<td>95.7 (3B y)</td>\n<td>107.7 (1.26e13 y)</td>\n<td>119.7 (5.04e16 y)</td>\n</tr></tbody></table>\n<p>The brute force time is calculated like this:</p>\n<p>I'm assuming you're using a passphrase for macOS 10.8+ (PBKDF2-SHA512) to\nencrypt your disk with FileVault. According to <a href=\"https://medium.com/@iraklis/running-hashcat-v4-0-0-in-amazons-aws-new-p3-16xlarge-instance-e8fab4541e9b\" rel=\"nofollow\">this post</a>,\nthe password cracking tool <a href=\"https://hashcat.net/hashcat/\" rel=\"nofollow\">hashcat</a> can guess\n193,900 passphrases per second on an Amazon AWS p3.16xlarge instance, which\ncosts $24.48 per hour.</p>\n<p>If an attacker is willing to spend up to $1 billion per day to guess your\npassphrase, they can afford to run 1.7 million of these AWS instances at once,\nmeaning they can guess ~330 billion passphrases per second. On average, a brute\nforce attack will find the passphrase after searching half the keyspace, so the\ntimes above are how long it takes to search half the keyspace.</p>\n<p>Note that the time \"3.88e19 y\" means \"3.88 x 10<sup>19</sup> years\". Also note\nthat the brute force times will vary wildly, both much quicker or much slower,\ndepending on the hash function or <a href=\"https://en.wikipedia.org/wiki/Key_derivation_function\" rel=\"nofollow\">KDF</a>\nused -- basically, depending on what software you're using this passphrase with.</p>\n<p>Check out <a href=\"/scripts/calc_passphrase_strength.py\" rel=\"nofollow\">calc_passphrase_strength.py</a> to\nsee the maths.</p>\n<h2>Licenses</h2>\n<p>The wordlists included were created by Electronic Frontier Foundation, and are\ndistributed under the Creative Commons Attribution 3.0. For the fandom wordlists\n(Game of Thrones, Harry Potter, Star Trek, and Star Wars), EFF notes that \"Any\ntrademarks within the word list are the property of their respective trademark\nholders, who are not affiliated with the Electronic Frontier Foundation and do\nnot sponsor or endorse these passwords.\"</p>\n\n          </div>"}, "last_serial": 6054437, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "dabcbccc952f96ad406c4119900d0bb7", "sha256": "85648db28a177ceee5190df5ee9269b70506456f1e14331249786197146b252e"}, "downloads": -1, "filename": "passphraseme-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dabcbccc952f96ad406c4119900d0bb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 37953, "upload_time": "2018-09-27T16:49:30", "upload_time_iso_8601": "2018-09-27T16:49:30.324592Z", "url": "https://files.pythonhosted.org/packages/2c/64/258927cdbf28545510acf2ed30ef92c6f8920294df40be9f51d6a81cdee7/passphraseme-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fc8a70f936432e5b5d4077afa3b238f", "sha256": "84c049a09e33014c8eafa48fa28bf38cf798b3600c40220b23623b03b7eae8bf"}, "downloads": -1, "filename": "passphraseme-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1fc8a70f936432e5b5d4077afa3b238f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 37626, "upload_time": "2018-09-27T16:49:31", "upload_time_iso_8601": "2018-09-27T16:49:31.876698Z", "url": "https://files.pythonhosted.org/packages/4f/d9/ee6555bc985e6a009bdfc7fb6bd130632ab74cf8c32e1c0844c5de8e9672/passphraseme-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3e5dfc57d57199aceab3b78325376325", "sha256": "1258c5e79d5ba8e90946189d9476e0bbce73e9c706aead344f7a6d56dcaa78f9"}, "downloads": -1, "filename": "passphraseme-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3e5dfc57d57199aceab3b78325376325", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 102297, "upload_time": "2018-10-10T22:58:54", "upload_time_iso_8601": "2018-10-10T22:58:54.895115Z", "url": "https://files.pythonhosted.org/packages/3c/26/7a7f8070a81bf7b450655e8ff5e7868c03304505c976bb1fcf046738459e/passphraseme-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "221c47af104389ad08201bafed707a07", "sha256": "22a6a9eee72b51399309cb5a7aa214009ab94f75737cb86fefece13844c9ea55"}, "downloads": -1, "filename": "passphraseme-0.1.2.tar.gz", "has_sig": false, "md5_digest": "221c47af104389ad08201bafed707a07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 90204, "upload_time": "2018-10-10T22:58:56", "upload_time_iso_8601": "2018-10-10T22:58:56.708959Z", "url": "https://files.pythonhosted.org/packages/f2/b2/76d7223f57f9565d771fc4eb88090886ae49a365e5e00a90d97f586bebaa/passphraseme-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d8014682c427bdfad9b58526098c8584", "sha256": "f2c22ef5a0ec9b6c66e7d5bb0a00d4717d3994cd8cee510d008d5dd1213f2441"}, "downloads": -1, "filename": "passphraseme-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d8014682c427bdfad9b58526098c8584", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 93417, "upload_time": "2019-02-03T20:30:19", "upload_time_iso_8601": "2019-02-03T20:30:19.967029Z", "url": "https://files.pythonhosted.org/packages/24/50/dfb0ca9ab6b7abed913552a8aa372c971e18344f288da38b61ccedd70e25/passphraseme-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e09dac5bafeaa22a3adfa09b28f771ff", "sha256": "ac44740a91d5769618b21ec8374344391f9780f637322f5fd15666cfc021e34d"}, "downloads": -1, "filename": "passphraseme-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e09dac5bafeaa22a3adfa09b28f771ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88950, "upload_time": "2019-02-03T20:30:21", "upload_time_iso_8601": "2019-02-03T20:30:21.690920Z", "url": "https://files.pythonhosted.org/packages/d4/a4/4c68089a0a0a2700e63b3aaccdc1c4fa58ccdf2f69b784d4e80140f0ad45/passphraseme-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "54f4b1ab3600f1cbcaace20d63f87e5a", "sha256": "2e9d3060597039a6933f19c6f9ee91e408ab452db553b4547f1dcb2b91deb2c5"}, "downloads": -1, "filename": "passphraseme-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "54f4b1ab3600f1cbcaace20d63f87e5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 102529, "upload_time": "2019-10-30T19:25:42", "upload_time_iso_8601": "2019-10-30T19:25:42.132217Z", "url": "https://files.pythonhosted.org/packages/9a/ac/e911ce4c403dcd6a75450d8ce4ee96c4dbb483d8310b1b336bf7aad03d20/passphraseme-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d931eb987da2bbe92a90ea1b28eb3361", "sha256": "a4288911b19a8694ce29566560ada30a66060089317803ad91e17de2ad86a351"}, "downloads": -1, "filename": "passphraseme-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d931eb987da2bbe92a90ea1b28eb3361", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89356, "upload_time": "2019-10-30T19:25:43", "upload_time_iso_8601": "2019-10-30T19:25:43.468038Z", "url": "https://files.pythonhosted.org/packages/69/a1/4549e2ff437e50f126d3310959b5ecf37910691a73563f29cb9854411a96/passphraseme-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54f4b1ab3600f1cbcaace20d63f87e5a", "sha256": "2e9d3060597039a6933f19c6f9ee91e408ab452db553b4547f1dcb2b91deb2c5"}, "downloads": -1, "filename": "passphraseme-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "54f4b1ab3600f1cbcaace20d63f87e5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 102529, "upload_time": "2019-10-30T19:25:42", "upload_time_iso_8601": "2019-10-30T19:25:42.132217Z", "url": "https://files.pythonhosted.org/packages/9a/ac/e911ce4c403dcd6a75450d8ce4ee96c4dbb483d8310b1b336bf7aad03d20/passphraseme-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d931eb987da2bbe92a90ea1b28eb3361", "sha256": "a4288911b19a8694ce29566560ada30a66060089317803ad91e17de2ad86a351"}, "downloads": -1, "filename": "passphraseme-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d931eb987da2bbe92a90ea1b28eb3361", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89356, "upload_time": "2019-10-30T19:25:43", "upload_time_iso_8601": "2019-10-30T19:25:43.468038Z", "url": "https://files.pythonhosted.org/packages/69/a1/4549e2ff437e50f126d3310959b5ecf37910691a73563f29cb9854411a96/passphraseme-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:04 2020"}