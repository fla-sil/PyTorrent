{"info": {"author": "Jim Fulton", "author_email": "jim@zope.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development"], "description": "=====================================================\r\nzc.customdoctests -- Use doctest with other languages\r\n=====================================================\r\n\r\ndoctest (and recently manuel) provide hooks for using custom doctest\r\nparsers.  `zc.customdoctests` helps to leverage this to support other\r\nlanguages, such as JavaScript::\r\n\r\n    js> function double (x) {\r\n    ...     return x*2;\r\n    ... }\r\n    js> double(2)\r\n    4\r\n\r\nAnd with `manuel <http://pypi.python.org/pypi/manuel>`_, it\r\nfacilitates doctests that mix multiple languages, such as Python,\r\nJavaScript, and sh.\r\n\r\n.. contents::\r\n\r\n\r\nDetailed documentation\r\n======================\r\n\r\nCustom doctest parsers\r\n----------------------\r\n\r\nzc.customdoctests provides a little bit of help with creating custom\r\ndoctest parsers that work pretty muct like regular doctests, but that\r\nuse an alternate means of evaluating examples.  To use it, you call\r\nzc.customdoctests.DocTestParser and pass any of the following options:\r\n\r\nps1\r\n   The first-line prompt, which defaultd to ``'>>>'``.\r\n\r\n   This must be a regular expression that matches exactly 3 characters.\r\n\r\n   (Note that you can't override the second-line prompt.)\r\n\r\ncomment_prefix\r\n   The comment prefix regular expression, which defaults to '#'.\r\n\r\ntransform\r\n   A function used to transform example source, which defaults to a\r\n   no-operation function.\r\n\r\nThe js module provides support for using JavaScript in doctests using\r\n`python-spidermonkey\r\n<http://pypi.python.org/pypi/python-spidermonkey>`_. It provides some\r\nexamples of defining custom doctest parsers.\r\n\r\n\r\nJavascript and Python-Spidermonkey support\r\n------------------------------------------\r\n\r\n.. This file shows some examples of using spidermonkey APIs in doctests.\r\n\r\nTo wire this up, you'd use something like::\r\n\r\n   import doctest, zc.customdoctests.js\r\n\r\n   test_suite = doctest.DocTestSuite(\r\n       parser=zc.customdoctests.js.parser,\r\n       setUp=zc.customdoctests.js.spidermonkeySetUp)\r\n\r\nOr, with manuel::\r\n\r\n    test_suite = manuel.testing.TestSuite(\r\n        manuel.doctest.Manuel(parser=zc.customdoctests.js.parser) +\r\n        manuel.doctest.Manuel(parser=zc.customdoctests.js.eq_parser) +\r\n        manuel.doctest.Manuel() +\r\n        manuel.capture.Manuel(),\r\n        'spidermonkey.txt',\r\n        setUp=zc.customdoctests.js.spidermonkeySetUp)\r\n\r\nNote that zc.customdoctests doesn't require spidermonkey, so you need\r\nto install spidermonkey seperately if you want to use it.\r\n\r\nAn advantage of using manuel is that you can use multiple parsers in\r\nthe same document.  In the example, above, 2 javascript example\r\nsyntaxes (described below) as well as the standard doctest syntax are\r\nsupported.  This document is run with manuel to allow all 3 syntaxes.\r\n\r\nFor the rest of this document, we'll show examples of JavaScript\r\ndoctests as well as helper APIs used to support JavaScript and to\r\nintegrate JavaScript and Python.\r\n\r\nJavascript doctests use a \"js>\" prompt (as used in rhino and the\r\nspidermonkey interpreter)::\r\n\r\n    js> 2 +\r\n    ... 'Hi world' // doctest: +ELLIPSIS\r\n    u'2Hi...\r\n\r\nAssignments return values.  This can generate annoying output\r\nin doctests::\r\n\r\n    js> ob = {a: 1, b: 2}\r\n    [object Object]\r\n\r\nIf you're using manuel, you can avoid this by using js!::\r\n\r\n    js! x = 3\r\n\r\nwhich suppresses expression values.\r\n\r\nload and print functions (similar to those found in rhino) are\r\nprovided.  For example, given a javascript file, double.js::\r\n\r\n   function double (x) {\r\n       return x*2;\r\n   }\r\n\r\n.. -> src\r\n\r\n   >>> with open('double.js', 'w') as f:\r\n   ...     f.write(src)\r\n\r\nWe can load the file::\r\n\r\n    js> load('double.js')\r\n    js> double(10)\r\n    20\r\n\r\nWe can print values::\r\n\r\n    js> print('Hi')\r\n    Hi\r\n\r\nA python object provides access to the open function and the os\r\nmodule::\r\n\r\n    js> python.os.path.exists('double.js')\r\n    True\r\n\r\n    js! f = python.open('double.js')\r\n    js> print(f.read())\r\n    function double (x) {\r\n        return x*2;\r\n    }\r\n    <BLANKLINE>\r\n\r\n    js> f.close()\r\n\r\n\r\nIf you're using manuel, you can intermix Python and and JavaScript\r\nexamples and there are a number of APIs to facilitate using Python and\r\nJavaScript together.\r\n\r\nThere's an add_js_global function to copy data from Python::\r\n\r\n    >>> add_js_global('y', 1)\r\n\r\n    js> y\r\n    1\r\n\r\nThere's also a js object that provides attribute access to js globals::\r\n\r\n    >>> js.x\r\n    3\r\n\r\n    >>> js.z = 4\r\n\r\n    js> z\r\n    4\r\n\r\nYou can also call this to run JS code without returning the resulting value::\r\n\r\n    >>> js('a = x + y')\r\n\r\n    js> a\r\n    4\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n1.0.1 (2013-02-14)\r\n------------------\r\n\r\n- Fixed ReStructuredText errors on the PyPI page.\r\n\r\n\r\n1.0.0 (2013-02-13)\r\n------------------\r\n\r\n- Added Python 3.3 support.\r\n\r\n- Cleanup `setup.py`, add `tox.ini` and manifest.\r\n\r\n\r\n0.1.0 (2011-05-19)\r\n------------------\r\n\r\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/zc.customdoctests", "keywords": "", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "zc.customdoctests", "package_url": "https://pypi.org/project/zc.customdoctests/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zc.customdoctests/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/zc.customdoctests"}, "release_url": "https://pypi.org/project/zc.customdoctests/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "=====================================================", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>doctest (and recently manuel) provide hooks for using custom doctest\nparsers.  <cite>zc.customdoctests</cite> helps to leverage this to support other\nlanguages, such as JavaScript:</p>\n<pre>js&gt; function double (x) {\n...     return x*2;\n... }\njs&gt; double(2)\n4\n</pre>\n<p>And with <a href=\"http://pypi.python.org/pypi/manuel\" rel=\"nofollow\">manuel</a>, it\nfacilitates doctests that mix multiple languages, such as Python,\nJavaScript, and sh.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#detailed-documentation\" id=\"id4\" rel=\"nofollow\">Detailed documentation</a><ul>\n<li><a href=\"#custom-doctest-parsers\" id=\"id5\" rel=\"nofollow\">Custom doctest parsers</a></li>\n<li><a href=\"#javascript-and-python-spidermonkey-support\" id=\"id6\" rel=\"nofollow\">Javascript and Python-Spidermonkey support</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id7\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id8\" rel=\"nofollow\">1.0.1 (2013-02-14)</a></li>\n<li><a href=\"#id2\" id=\"id9\" rel=\"nofollow\">1.0.0 (2013-02-13)</a></li>\n<li><a href=\"#id3\" id=\"id10\" rel=\"nofollow\">0.1.0 (2011-05-19)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"detailed-documentation\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Detailed documentation</a></h2>\n<div id=\"custom-doctest-parsers\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Custom doctest parsers</a></h3>\n<p>zc.customdoctests provides a little bit of help with creating custom\ndoctest parsers that work pretty muct like regular doctests, but that\nuse an alternate means of evaluating examples.  To use it, you call\nzc.customdoctests.DocTestParser and pass any of the following options:</p>\n<dl>\n<dt>ps1</dt>\n<dd><p>The first-line prompt, which defaultd to <tt><span class=\"pre\">'&gt;&gt;&gt;'</span></tt>.</p>\n<p>This must be a regular expression that matches exactly 3 characters.</p>\n<p>(Note that you can\u2019t override the second-line prompt.)</p>\n</dd>\n<dt>comment_prefix</dt>\n<dd>The comment prefix regular expression, which defaults to \u2018#\u2019.</dd>\n<dt>transform</dt>\n<dd>A function used to transform example source, which defaults to a\nno-operation function.</dd>\n</dl>\n<p>The js module provides support for using JavaScript in doctests using\n<a href=\"http://pypi.python.org/pypi/python-spidermonkey\" rel=\"nofollow\">python-spidermonkey</a>. It provides some\nexamples of defining custom doctest parsers.</p>\n</div>\n<div id=\"javascript-and-python-spidermonkey-support\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Javascript and Python-Spidermonkey support</a></h3>\n<p>To wire this up, you\u2019d use something like:</p>\n<pre>import doctest, zc.customdoctests.js\n\ntest_suite = doctest.DocTestSuite(\n    parser=zc.customdoctests.js.parser,\n    setUp=zc.customdoctests.js.spidermonkeySetUp)\n</pre>\n<p>Or, with manuel:</p>\n<pre>test_suite = manuel.testing.TestSuite(\n    manuel.doctest.Manuel(parser=zc.customdoctests.js.parser) +\n    manuel.doctest.Manuel(parser=zc.customdoctests.js.eq_parser) +\n    manuel.doctest.Manuel() +\n    manuel.capture.Manuel(),\n    'spidermonkey.txt',\n    setUp=zc.customdoctests.js.spidermonkeySetUp)\n</pre>\n<p>Note that zc.customdoctests doesn\u2019t require spidermonkey, so you need\nto install spidermonkey seperately if you want to use it.</p>\n<p>An advantage of using manuel is that you can use multiple parsers in\nthe same document.  In the example, above, 2 javascript example\nsyntaxes (described below) as well as the standard doctest syntax are\nsupported.  This document is run with manuel to allow all 3 syntaxes.</p>\n<p>For the rest of this document, we\u2019ll show examples of JavaScript\ndoctests as well as helper APIs used to support JavaScript and to\nintegrate JavaScript and Python.</p>\n<p>Javascript doctests use a \u201cjs&gt;\u201d prompt (as used in rhino and the\nspidermonkey interpreter):</p>\n<pre>js&gt; 2 +\n... 'Hi world' // doctest: +ELLIPSIS\nu'2Hi...\n</pre>\n<p>Assignments return values.  This can generate annoying output\nin doctests:</p>\n<pre>js&gt; ob = {a: 1, b: 2}\n[object Object]\n</pre>\n<p>If you\u2019re using manuel, you can avoid this by using js!:</p>\n<pre>js! x = 3\n</pre>\n<p>which suppresses expression values.</p>\n<p>load and print functions (similar to those found in rhino) are\nprovided.  For example, given a javascript file, double.js:</p>\n<pre>function double (x) {\n    return x*2;\n}\n</pre>\n<p>We can load the file:</p>\n<pre>js&gt; load('double.js')\njs&gt; double(10)\n20\n</pre>\n<p>We can print values:</p>\n<pre>js&gt; print('Hi')\nHi\n</pre>\n<p>A python object provides access to the open function and the os\nmodule:</p>\n<pre>js&gt; python.os.path.exists('double.js')\nTrue\n\njs! f = python.open('double.js')\njs&gt; print(f.read())\nfunction double (x) {\n    return x*2;\n}\n&lt;BLANKLINE&gt;\n\njs&gt; f.close()\n</pre>\n<p>If you\u2019re using manuel, you can intermix Python and and JavaScript\nexamples and there are a number of APIs to facilitate using Python and\nJavaScript together.</p>\n<p>There\u2019s an add_js_global function to copy data from Python:</p>\n<pre>&gt;&gt;&gt; add_js_global('y', 1)\n\njs&gt; y\n1\n</pre>\n<p>There\u2019s also a js object that provides attribute access to js globals:</p>\n<pre>&gt;&gt;&gt; js.x\n3\n\n&gt;&gt;&gt; js.z = 4\n\njs&gt; z\n4\n</pre>\n<p>You can also call this to run JS code without returning the resulting value:</p>\n<pre>&gt;&gt;&gt; js('a = x + y')\n\njs&gt; a\n4\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id8\" rel=\"nofollow\">1.0.1 (2013-02-14)</a></h3>\n<ul>\n<li>Fixed ReStructuredText errors on the PyPI page.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id9\" rel=\"nofollow\">1.0.0 (2013-02-13)</a></h3>\n<ul>\n<li>Added Python 3.3 support.</li>\n<li>Cleanup <cite>setup.py</cite>, add <cite>tox.ini</cite> and manifest.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id10\" rel=\"nofollow\">0.1.0 (2011-05-19)</a></h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 802169, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "78d76baa63121d4dad6d92851f9edd89", "sha256": "d2c48ec1237d8d9422f78f65c405f7e9e7722e021143c962e0e6ce675ba4c5ad"}, "downloads": -1, "filename": "zc.customdoctests-0.1.0.tar.gz", "has_sig": false, "md5_digest": "78d76baa63121d4dad6d92851f9edd89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6005, "upload_time": "2011-05-19T19:20:19", "upload_time_iso_8601": "2011-05-19T19:20:19.718697Z", "url": "https://files.pythonhosted.org/packages/d9/eb/c3fac45533a18dd4840a52e850ccbce80dada9606b2ab9ce7f0d6b595844/zc.customdoctests-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "ab5d6f4c06edc770064c78c9aca6e1c1", "sha256": "7b84e29d4638d437f612e12748de5e2a58fec64107ab1653f3563883dacbddfc"}, "downloads": -1, "filename": "zc.customdoctests-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ab5d6f4c06edc770064c78c9aca6e1c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7843, "upload_time": "2013-02-13T19:58:26", "upload_time_iso_8601": "2013-02-13T19:58:26.965021Z", "url": "https://files.pythonhosted.org/packages/f3/30/8004b2e22fce91c45c9ed82040bec514ee2aac13a6ebaf6fdac20d3f1c67/zc.customdoctests-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "d7a0ea4310efa4eac5d08402ac10896e", "sha256": "ca803c76697242c8637744416b7ec4438a20941e4364411f69b85a15024444a6"}, "downloads": -1, "filename": "zc.customdoctests-1.0.1.zip", "has_sig": false, "md5_digest": "d7a0ea4310efa4eac5d08402ac10896e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15775, "upload_time": "2013-02-14T14:05:15", "upload_time_iso_8601": "2013-02-14T14:05:15.927454Z", "url": "https://files.pythonhosted.org/packages/6a/c1/8a8476b1dd2f9ebf665c27cb2f8e00bb0c54f353c52169ffa46e9824945f/zc.customdoctests-1.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7a0ea4310efa4eac5d08402ac10896e", "sha256": "ca803c76697242c8637744416b7ec4438a20941e4364411f69b85a15024444a6"}, "downloads": -1, "filename": "zc.customdoctests-1.0.1.zip", "has_sig": false, "md5_digest": "d7a0ea4310efa4eac5d08402ac10896e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15775, "upload_time": "2013-02-14T14:05:15", "upload_time_iso_8601": "2013-02-14T14:05:15.927454Z", "url": "https://files.pythonhosted.org/packages/6a/c1/8a8476b1dd2f9ebf665c27cb2f8e00bb0c54f353c52169ffa46e9824945f/zc.customdoctests-1.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:19:23 2020"}