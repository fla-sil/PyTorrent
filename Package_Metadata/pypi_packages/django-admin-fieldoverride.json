{"info": {"author": "Bob Donahue", "author_email": "bob_donahue@wgbh.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# django-admin-fieldoverride\nA system for allowing a local model to override readonly fields from other source, e.g., from an API (PBSMM, FMP)\n\n## Background\n\nFor project that use external APIs (e.g, PBSMM or FMP), the content that is pulled is meant to be read-only.\nHowever sometimes, producers want to override specific fields for specific instances: e.g., for a PBSMMEpisode record, they\nmight want to use a different description than the one that comes from the API.\n\nTypically, things are set up so that there's a \"local\" model instance that has a 1:1 relationship to the record obtained from the API, \ne.g., for PBSMM there's a PBSMMEpisode model that has a description_long field.   One COULD just create all of the fields in the local\nmodel, and then set up methods to peruse them when generating content in a view.   However that will quickly get messy because a) for most cases, an override won't be needed; and b) you end up coding all those extra fields \"just in case\" without absolutely knowing that they'll \never be used.\n\nThis makes the Admin full of cruft which gets in the way of content management.\n\n### Enter Field Overrides\n\nWhat if - instead - you had a single \"override\" field that has a FK to the \"local\" model instance, so that you only have to use it WHEN\nyou need to.\n\nIn this siutation, the Admin is simplified: you just have an Inline admin for ALL of the overrides for that record.\n\n## How it works\n\nYou can get the list of fields for any model class through ._meta.fields.   Most of them probably will NOT want to be overridden \n(e.g., the id, and other things like creation dates, etc.).   So we'll have to come up with a way to filter those fields out.   \nFor the remaining set, it would be a dropdown field in the Admin along with a field for the override content.   Everything gets stored in \na table that also keeps track of which model is involved (so some kind of generic foreign key).\n\nWhen processing the record, i.e., a view to generate a detail page, or a REST API endpoint, you'd go through the list of override-able \nfields, check to see if there is an override, and use it, or fall back to the original field from the API data.\n\n(Note that for a project like Roadshow that would involve TWO sources, FMP and PBSMM, but we can use this setup to handle the order of\nprecedence, AND we can also set it up that for any given overriden field that order can be different).\n\n# Installation\n\n# Creating the model map_override_fields method\n\nEach model needs a map_override_fields method that returns a list of fields that can be overriden.  Each item in the list is a dict that\nhas the parameters of the override:\n\n* field:  the name of the field when overridden, e.g., 'description'\n* overrides: this is a list of the fields that would be overridden, e.g., [\"fmp__description\", \"pbsmm__description_long\"]\n\nThey're used to populate the choices for the fields in the Override model which also has the field for the overriding content.\n\nSO FAR, the only way I can think to handle the fact that these fields can have different types (e.g., Text versus Integer), is to \nstore everything as a TextField, and then on processing re-cast the content as needed.\n\n# In the view\n\nWe'll probably want a mixin for this that sets things appropriately in the context.  \n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/wgbh/django-admin-fieldoverride/", "keywords": "", "license": "MIT License, see LICENSE", "maintainer": "", "maintainer_email": "", "name": "django-admin-fieldoverride", "package_url": "https://pypi.org/project/django-admin-fieldoverride/", "platform": "", "project_url": "https://pypi.org/project/django-admin-fieldoverride/", "project_urls": {"Homepage": "http://github.com/wgbh/django-admin-fieldoverride/"}, "release_url": "https://pypi.org/project/django-admin-fieldoverride/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Create custom fields in the Django Admin that can override model field content.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-admin-fieldoverride</h1>\n<p>A system for allowing a local model to override readonly fields from other source, e.g., from an API (PBSMM, FMP)</p>\n<h2>Background</h2>\n<p>For project that use external APIs (e.g, PBSMM or FMP), the content that is pulled is meant to be read-only.\nHowever sometimes, producers want to override specific fields for specific instances: e.g., for a PBSMMEpisode record, they\nmight want to use a different description than the one that comes from the API.</p>\n<p>Typically, things are set up so that there's a \"local\" model instance that has a 1:1 relationship to the record obtained from the API,\ne.g., for PBSMM there's a PBSMMEpisode model that has a description_long field.   One COULD just create all of the fields in the local\nmodel, and then set up methods to peruse them when generating content in a view.   However that will quickly get messy because a) for most cases, an override won't be needed; and b) you end up coding all those extra fields \"just in case\" without absolutely knowing that they'll\never be used.</p>\n<p>This makes the Admin full of cruft which gets in the way of content management.</p>\n<h3>Enter Field Overrides</h3>\n<p>What if - instead - you had a single \"override\" field that has a FK to the \"local\" model instance, so that you only have to use it WHEN\nyou need to.</p>\n<p>In this siutation, the Admin is simplified: you just have an Inline admin for ALL of the overrides for that record.</p>\n<h2>How it works</h2>\n<p>You can get the list of fields for any model class through ._meta.fields.   Most of them probably will NOT want to be overridden\n(e.g., the id, and other things like creation dates, etc.).   So we'll have to come up with a way to filter those fields out.<br>\nFor the remaining set, it would be a dropdown field in the Admin along with a field for the override content.   Everything gets stored in\na table that also keeps track of which model is involved (so some kind of generic foreign key).</p>\n<p>When processing the record, i.e., a view to generate a detail page, or a REST API endpoint, you'd go through the list of override-able\nfields, check to see if there is an override, and use it, or fall back to the original field from the API data.</p>\n<p>(Note that for a project like Roadshow that would involve TWO sources, FMP and PBSMM, but we can use this setup to handle the order of\nprecedence, AND we can also set it up that for any given overriden field that order can be different).</p>\n<h1>Installation</h1>\n<h1>Creating the model map_override_fields method</h1>\n<p>Each model needs a map_override_fields method that returns a list of fields that can be overriden.  Each item in the list is a dict that\nhas the parameters of the override:</p>\n<ul>\n<li>field:  the name of the field when overridden, e.g., 'description'</li>\n<li>overrides: this is a list of the fields that would be overridden, e.g., [\"fmp__description\", \"pbsmm__description_long\"]</li>\n</ul>\n<p>They're used to populate the choices for the fields in the Override model which also has the field for the overriding content.</p>\n<p>SO FAR, the only way I can think to handle the fact that these fields can have different types (e.g., Text versus Integer), is to\nstore everything as a TextField, and then on processing re-cast the content as needed.</p>\n<h1>In the view</h1>\n<p>We'll probably want a mixin for this that sets things appropriately in the context.</p>\n\n          </div>"}, "last_serial": 6459123, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "c8f966bb88189698134348be289a1e14", "sha256": "88f070b816f32c621653caf456afd0552fba4b05eba13b5dba26dda714489549"}, "downloads": -1, "filename": "django_admin_fieldoverride-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c8f966bb88189698134348be289a1e14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8457, "upload_time": "2020-01-15T14:56:31", "upload_time_iso_8601": "2020-01-15T14:56:31.331112Z", "url": "https://files.pythonhosted.org/packages/a6/f3/25384112964bfd17cb4d01018a0db0c115fc6298c97fc37b7ebd67ecbe6d/django_admin_fieldoverride-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5b7115670084368348160db66989987", "sha256": "95ad8b03356250793ab41e46598efd0516b1d0e65785cd41cb13cf822770e5a8"}, "downloads": -1, "filename": "django-admin-fieldoverride-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a5b7115670084368348160db66989987", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6268, "upload_time": "2020-01-15T14:56:34", "upload_time_iso_8601": "2020-01-15T14:56:34.410775Z", "url": "https://files.pythonhosted.org/packages/10/b0/131fe04c92ab0777ef49fe959e5d2f01f7604ad61c678d4ff1301905bb6c/django-admin-fieldoverride-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8f966bb88189698134348be289a1e14", "sha256": "88f070b816f32c621653caf456afd0552fba4b05eba13b5dba26dda714489549"}, "downloads": -1, "filename": "django_admin_fieldoverride-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c8f966bb88189698134348be289a1e14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8457, "upload_time": "2020-01-15T14:56:31", "upload_time_iso_8601": "2020-01-15T14:56:31.331112Z", "url": "https://files.pythonhosted.org/packages/a6/f3/25384112964bfd17cb4d01018a0db0c115fc6298c97fc37b7ebd67ecbe6d/django_admin_fieldoverride-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5b7115670084368348160db66989987", "sha256": "95ad8b03356250793ab41e46598efd0516b1d0e65785cd41cb13cf822770e5a8"}, "downloads": -1, "filename": "django-admin-fieldoverride-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a5b7115670084368348160db66989987", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6268, "upload_time": "2020-01-15T14:56:34", "upload_time_iso_8601": "2020-01-15T14:56:34.410775Z", "url": "https://files.pythonhosted.org/packages/10/b0/131fe04c92ab0777ef49fe959e5d2f01f7604ad61c678d4ff1301905bb6c/django-admin-fieldoverride-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:49 2020"}