{"info": {"author": "Shea G. Craig", "author_email": "sheagcraig@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: MacOS X", "Environment :: MacOS X :: Cocoa", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python :: 3 :: Only"], "description": "# MacSesh\nThis package allows requests to verify certs with the macOS keychain,\nrather than using certifi. It also includes some tools for easily\nhooking up a `SecureTransport` adapter (a la Pip) and then later\nundoing all of the sneaky infiltrations required to set this up.\n\n## Which certs?\nIt uses any of the trusted certs from keychains included in the current\nuser's keychain search list, as well as the system roots. Typically,\nthis is the user's default at `~/Library/Keychains/login.keychain`,\nthe system keychain at `/Library/Keychains/System.keychain`, and the\nSystem Roots keychain at\n`/System/Library/Keychains/SystemRootCertificates.keychain`.\n\nTo achieve this, one of three different strategies can be employed:\n1. KeychainSession uses a custom SSLContext, requests Adapter, and\n   requests Session, and injects the SSLContext into urllib3. This\n   approach is the recommendation.\n2. SecureTransportSession uses the urllib3 contrib module for injecting\n   SecureTransport equivalents into stock urllib3. While this approach\n   uses more of the native networking framework, it also seems to be\n   written primarily with the goal of solving the issues with macOS and\n   aging OpenSSL versions to ensure that Macs could still use pip.\n   Therefore, it's not entirely feature-complete in providing a full\n   requests Adapter. It's definitely worth experimenting with.\n3. SimpleKeychainSession circumvents the normal flow of session\n   startup, and tells the SSLContext to load its trust information\n   early; in this case from certs dumped from the keychain.\n\n## Example Usage:\n```\n>>> import macsesh\n>>> sesh = macsesh.KeychainSession()\n>>> response = sesh.get('https://nethack.org')\n```\nIf you want to use the \"basic\" requests API without creating a session:\n```\n>>> macsesh.inject_into_requests()\n>>> requests.get('https://en.wikipedia.org/wiki/Taco')  # Uses keychain\n```\n\n## Advanced\nIf for some reason you want to revert to \"normal\" requests (probably \nusing certifi), in the same python process, you'll need to remove this\nmodule's injected stuff from urllib3 or requests.\n\nRemove the SSLContext if you used any of the Sessions:\n```macsesh.extract_from_urllib3()```\nClean up after using the \"basic\" API:\n```macsesh.extract_from_requests()```\n\nAny certs added to the keychains after starting a session will\nnot be available. Digging down in and updating the SSLContext is rough;\njust make a new session if you have this need!\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sheagcraig/MacSesh", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "MacSesh", "package_url": "https://pypi.org/project/MacSesh/", "platform": "", "project_url": "https://pypi.org/project/MacSesh/", "project_urls": {"Homepage": "https://github.com/sheagcraig/MacSesh"}, "release_url": "https://pypi.org/project/MacSesh/0.2.1/", "requires_dist": ["requests", "pyobjc"], "requires_python": ">=3.6", "summary": "Tools for letting the macOS Keychain verify certs for python requests", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MacSesh</h1>\n<p>This package allows requests to verify certs with the macOS keychain,\nrather than using certifi. It also includes some tools for easily\nhooking up a <code>SecureTransport</code> adapter (a la Pip) and then later\nundoing all of the sneaky infiltrations required to set this up.</p>\n<h2>Which certs?</h2>\n<p>It uses any of the trusted certs from keychains included in the current\nuser's keychain search list, as well as the system roots. Typically,\nthis is the user's default at <code>~/Library/Keychains/login.keychain</code>,\nthe system keychain at <code>/Library/Keychains/System.keychain</code>, and the\nSystem Roots keychain at\n<code>/System/Library/Keychains/SystemRootCertificates.keychain</code>.</p>\n<p>To achieve this, one of three different strategies can be employed:</p>\n<ol>\n<li>KeychainSession uses a custom SSLContext, requests Adapter, and\nrequests Session, and injects the SSLContext into urllib3. This\napproach is the recommendation.</li>\n<li>SecureTransportSession uses the urllib3 contrib module for injecting\nSecureTransport equivalents into stock urllib3. While this approach\nuses more of the native networking framework, it also seems to be\nwritten primarily with the goal of solving the issues with macOS and\naging OpenSSL versions to ensure that Macs could still use pip.\nTherefore, it's not entirely feature-complete in providing a full\nrequests Adapter. It's definitely worth experimenting with.</li>\n<li>SimpleKeychainSession circumvents the normal flow of session\nstartup, and tells the SSLContext to load its trust information\nearly; in this case from certs dumped from the keychain.</li>\n</ol>\n<h2>Example Usage:</h2>\n<pre><code>&gt;&gt;&gt; import macsesh\n&gt;&gt;&gt; sesh = macsesh.KeychainSession()\n&gt;&gt;&gt; response = sesh.get('https://nethack.org')\n</code></pre>\n<p>If you want to use the \"basic\" requests API without creating a session:</p>\n<pre><code>&gt;&gt;&gt; macsesh.inject_into_requests()\n&gt;&gt;&gt; requests.get('https://en.wikipedia.org/wiki/Taco')  # Uses keychain\n</code></pre>\n<h2>Advanced</h2>\n<p>If for some reason you want to revert to \"normal\" requests (probably\nusing certifi), in the same python process, you'll need to remove this\nmodule's injected stuff from urllib3 or requests.</p>\n<p>Remove the SSLContext if you used any of the Sessions:\n<code>macsesh.extract_from_urllib3()</code>\nClean up after using the \"basic\" API:\n<code>macsesh.extract_from_requests()</code></p>\n<p>Any certs added to the keychains after starting a session will\nnot be available. Digging down in and updating the SSLContext is rough;\njust make a new session if you have this need!</p>\n\n          </div>"}, "last_serial": 7124516, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "a3de2227039150be87b42a4df4c31ecd", "sha256": "514336d9a08882d5f2d9d52fc863bedee3c463dbb2eafdb85d9737dd02faa5b8"}, "downloads": -1, "filename": "MacSesh-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a3de2227039150be87b42a4df4c31ecd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11282, "upload_time": "2020-04-28T23:14:23", "upload_time_iso_8601": "2020-04-28T23:14:23.806972Z", "url": "https://files.pythonhosted.org/packages/69/ef/2de64b5b2e423a83da2789fb33eaa3c519dbf64b6c5ba131fd091202b53e/MacSesh-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93cccc28d974c74e339e63ec43a229ff", "sha256": "de6fc82cd3bf324cb9a36a0d1d4b75431d7e32e36aae3f39b9ce78a540dca8f0"}, "downloads": -1, "filename": "MacSesh-0.2.0.tar.gz", "has_sig": false, "md5_digest": "93cccc28d974c74e339e63ec43a229ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5923, "upload_time": "2020-04-28T23:14:25", "upload_time_iso_8601": "2020-04-28T23:14:25.530328Z", "url": "https://files.pythonhosted.org/packages/87/a4/fd8fba55ec6b40c82a15589902963449dc08934c7944b84d83d20ab584fd/MacSesh-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "59b1cbdec9e209f5b8412d2a7ce00870", "sha256": "370b7b282d04e628460bb44646d0493389a634e8b9834a81183615f7d4da73cd"}, "downloads": -1, "filename": "MacSesh-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "59b1cbdec9e209f5b8412d2a7ce00870", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11214, "upload_time": "2020-04-29T00:13:56", "upload_time_iso_8601": "2020-04-29T00:13:56.709374Z", "url": "https://files.pythonhosted.org/packages/76/40/7940fc0f59d32ffab06c324de4991d695fe4d220fdaf6a4b3487dca9848c/MacSesh-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63a8830482a93c2f6303ff10489beb4c", "sha256": "261b7957427cd4d456c466c1ba168f342a2ed168b5e002cdaedc1e678f4517b4"}, "downloads": -1, "filename": "MacSesh-0.2.1.tar.gz", "has_sig": false, "md5_digest": "63a8830482a93c2f6303ff10489beb4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5879, "upload_time": "2020-04-29T00:13:57", "upload_time_iso_8601": "2020-04-29T00:13:57.943549Z", "url": "https://files.pythonhosted.org/packages/35/1b/6fb784640499b9e7c301831a5a14d5cf843ca33cea6d5ae0705048d1c99f/MacSesh-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "59b1cbdec9e209f5b8412d2a7ce00870", "sha256": "370b7b282d04e628460bb44646d0493389a634e8b9834a81183615f7d4da73cd"}, "downloads": -1, "filename": "MacSesh-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "59b1cbdec9e209f5b8412d2a7ce00870", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11214, "upload_time": "2020-04-29T00:13:56", "upload_time_iso_8601": "2020-04-29T00:13:56.709374Z", "url": "https://files.pythonhosted.org/packages/76/40/7940fc0f59d32ffab06c324de4991d695fe4d220fdaf6a4b3487dca9848c/MacSesh-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63a8830482a93c2f6303ff10489beb4c", "sha256": "261b7957427cd4d456c466c1ba168f342a2ed168b5e002cdaedc1e678f4517b4"}, "downloads": -1, "filename": "MacSesh-0.2.1.tar.gz", "has_sig": false, "md5_digest": "63a8830482a93c2f6303ff10489beb4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5879, "upload_time": "2020-04-29T00:13:57", "upload_time_iso_8601": "2020-04-29T00:13:57.943549Z", "url": "https://files.pythonhosted.org/packages/35/1b/6fb784640499b9e7c301831a5a14d5cf843ca33cea6d5ae0705048d1c99f/MacSesh-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:16 2020"}