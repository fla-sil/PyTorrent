{"info": {"author": "Ahmed I.Elsayed", "author_email": "ahmeddark369@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n## WeAcceptPayments  \nMake payments using weaccept.co API and Python.  \n\n### import \n<code> from weacceptpayments.weaccept import WeAcceptAuth, WeAcceptOrder, WeAcceptPayment </code>  \n\n###  - specify auth data  \n``` auth = WeAcceptAuth.as_instance(api_key='YOUR_API_KEY') ```\n\n__PLEASE NOTE:__ \n- NEVER STORE YOUR API_KEY IN YOUR .py FILES, STORE IT IN AN ENVIRONMENT VARIABLE OR .env FILE AND USE python-dotenv  \n### - create your order \n``` \norder = WeAcceptOrder.as_instance(auth=auth,\n                                  merchant_id=auth.merchant_id,\n                                  amount_cents=20000,\n                                  merchant_order_id='gv12c4ttr',\n                                   items=[  \n                                           {  \n                                             'name': 'taz1',  \n                                             'amount_cents': 20000  \n                                           }])\n```\n\nWhat kwargs are allowed? ``\n```\n_allowed_kwargs = [  \n    'delivery_needed', 'merchant_id', 'amount_cents', 'currency', 'merchant_order_id',  \n    'items', 'shipping_data', 'auth', 'auth_token', 'merchant_id'  \n]\n```\n__PLEASE NOTE:__ \n- Specifying `auth` (takes in a `WeAcceptAuth` object) is an alternative way of specifying `auth_token` and `merchant_id`, Don't specify both at the same time.\n\nNow you've access to `order.order_id`  \n-  DONT TRY TO CREATE THE SAME ORDER TWICE.  \n--  In case you did, `order.id` won't be created and you have to specify it manually. This is not a bug, When you create the order twice, The server returns 'duplicate' in the second time, And `order.id` is not in the `.response` so you need to specify it manually.  \n\n### specify payment data  \n```\npayment = WeAcceptPayment.as_instance(auth_token=auth.auth_token,\n                                                 order_id=order.order_id,\n                                                 amount_cents=200,\n                                                 integration_id=16639,\n                                                 billing_data={  \n                                                               \"apartment\": \"803\",  \n                                                               \"email\": \"test@example.com\",  \n                                                               \"floor\": \"42\",  \n                                                               \"first_name\": \"LeOndaz\",  \n                                                               \"street\": \"Python community\",  \n                                                               \"building\": \"8028\",  \n                                                               \"phone_number\": \"+0123456789\",  \n                                                               \"shipping_method\": \"PKG\",  \n                                                               \"postal_code\": \"01898\",  \n                                                               \"city\": \"Jaskolskiburgh\",  \n                                                               \"country\": \"CR\",  \n                                                               \"last_name\": \"whatever\",  \n                                                               \"state\": \"RANDOM\"  \n                                                               ))\n  ```\nNow we have access to `.token` \nAgain, What kwargs are allowed? \n\n```\n_allowed_kwargs = [  \n    'amount_cents', 'expiration', 'billing_data', 'currency', 'integration_id',  \n    'lock_order_when_paid', 'auth', 'auth_token', 'order', 'order_id'  \n]\n```\n- What kwargs are a mandatory? \n```\n_MANDATORY_KWARGS = [  \n    # amount cents must be specified and the server says duplicate order if it's not.  \n    'merchant_order_id', 'merchant_id', 'amount_cents'  \n]\n```\n\n  __PLEASE NOTE:__ \n  - Specifying `auth` (takes in a `WeAcceptAuth` object) is an alternative way of specifying `auth_token`, Don't specify both at the same time.\n  - Specifying `order` (takes in a `WeAcceptOrder` object) is an alternative way of specifying `order_id`. Don't specify both at the same time.\n\n  <hr>\nNow, add an iFrame with the integration_id of the card in your payment integrations section and the payment_token you got from here.  \n\nTada! This is magic btw.  \n\n\n\n- __In each of those objects, You have access to .request, .response, .headers, other things too (Explore or use IntelliCode)__  \n- <br>\n- __In each of those objects, You can access the response as obj[key] BUT after you call .start() otherwise, Exceptions are raised.__  \n\n ### @TODO\n- Verification of `merchant_order_id` which is an alpha-numeric value.\n- Verification of `shipping data` if `delivery_needed` is specified as True.\n\nFeel free to explore.  \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LeOndaz/WeAcceptPayments", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "weacceptpayments", "package_url": "https://pypi.org/project/weacceptpayments/", "platform": "", "project_url": "https://pypi.org/project/weacceptpayments/", "project_urls": {"Homepage": "https://github.com/LeOndaz/WeAcceptPayments"}, "release_url": "https://pypi.org/project/weacceptpayments/2.4/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Make payments using weaccept.co API and Python.", "version": "2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>WeAcceptPayments</h2>\n<p>Make payments using weaccept.co API and Python.</p>\n<h3>import</h3>\n<p><code> from weacceptpayments.weaccept import WeAcceptAuth, WeAcceptOrder, WeAcceptPayment </code></p>\n<h3>- specify auth data</h3>\n<p><code>auth = WeAcceptAuth.as_instance(api_key='YOUR_API_KEY')</code></p>\n<p><strong>PLEASE NOTE:</strong></p>\n<ul>\n<li>NEVER STORE YOUR API_KEY IN YOUR .py FILES, STORE IT IN AN ENVIRONMENT VARIABLE OR .env FILE AND USE python-dotenv</li>\n</ul>\n<h3>- create your order</h3>\n<pre><code>order = WeAcceptOrder.as_instance(auth=auth,\n                                  merchant_id=auth.merchant_id,\n                                  amount_cents=20000,\n                                  merchant_order_id='gv12c4ttr',\n                                   items=[  \n                                           {  \n                                             'name': 'taz1',  \n                                             'amount_cents': 20000  \n                                           }])\n</code></pre>\n<p>What kwargs are allowed? ``</p>\n<pre><code>_allowed_kwargs = [  \n    'delivery_needed', 'merchant_id', 'amount_cents', 'currency', 'merchant_order_id',  \n    'items', 'shipping_data', 'auth', 'auth_token', 'merchant_id'  \n]\n</code></pre>\n<p><strong>PLEASE NOTE:</strong></p>\n<ul>\n<li>Specifying <code>auth</code> (takes in a <code>WeAcceptAuth</code> object) is an alternative way of specifying <code>auth_token</code> and <code>merchant_id</code>, Don't specify both at the same time.</li>\n</ul>\n<p>Now you've access to <code>order.order_id</code></p>\n<ul>\n<li>DONT TRY TO CREATE THE SAME ORDER TWICE.<br>\n--  In case you did, <code>order.id</code> won't be created and you have to specify it manually. This is not a bug, When you create the order twice, The server returns 'duplicate' in the second time, And <code>order.id</code> is not in the <code>.response</code> so you need to specify it manually.</li>\n</ul>\n<h3>specify payment data</h3>\n<pre><code>payment = WeAcceptPayment.as_instance(auth_token=auth.auth_token,\n                                                 order_id=order.order_id,\n                                                 amount_cents=200,\n                                                 integration_id=16639,\n                                                 billing_data={  \n                                                               \"apartment\": \"803\",  \n                                                               \"email\": \"test@example.com\",  \n                                                               \"floor\": \"42\",  \n                                                               \"first_name\": \"LeOndaz\",  \n                                                               \"street\": \"Python community\",  \n                                                               \"building\": \"8028\",  \n                                                               \"phone_number\": \"+0123456789\",  \n                                                               \"shipping_method\": \"PKG\",  \n                                                               \"postal_code\": \"01898\",  \n                                                               \"city\": \"Jaskolskiburgh\",  \n                                                               \"country\": \"CR\",  \n                                                               \"last_name\": \"whatever\",  \n                                                               \"state\": \"RANDOM\"  \n                                                               ))\n</code></pre>\n<p>Now we have access to <code>.token</code>\nAgain, What kwargs are allowed?</p>\n<pre><code>_allowed_kwargs = [  \n    'amount_cents', 'expiration', 'billing_data', 'currency', 'integration_id',  \n    'lock_order_when_paid', 'auth', 'auth_token', 'order', 'order_id'  \n]\n</code></pre>\n<ul>\n<li>What kwargs are a mandatory?</li>\n</ul>\n<pre><code>_MANDATORY_KWARGS = [  \n    # amount cents must be specified and the server says duplicate order if it's not.  \n    'merchant_order_id', 'merchant_id', 'amount_cents'  \n]\n</code></pre>\n<p><strong>PLEASE NOTE:</strong></p>\n<ul>\n<li>Specifying <code>auth</code> (takes in a <code>WeAcceptAuth</code> object) is an alternative way of specifying <code>auth_token</code>, Don't specify both at the same time.</li>\n<li>Specifying <code>order</code> (takes in a <code>WeAcceptOrder</code> object) is an alternative way of specifying <code>order_id</code>. Don't specify both at the same time.</li>\n</ul>\n  <hr>\nNow, add an iFrame with the integration_id of the card in your payment integrations section and the payment_token you got from here.  \n<p>Tada! This is magic btw.</p>\n<ul>\n<li><strong>In each of those objects, You have access to .request, .response, .headers, other things too (Explore or use IntelliCode)</strong></li>\n<li>\n<br>\n</li>\n<li><strong>In each of those objects, You can access the response as obj[key] BUT after you call .start() otherwise, Exceptions are raised.</strong></li>\n</ul>\n<h3>@TODO</h3>\n<ul>\n<li>Verification of <code>merchant_order_id</code> which is an alpha-numeric value.</li>\n<li>Verification of <code>shipping data</code> if <code>delivery_needed</code> is specified as True.</li>\n</ul>\n<p>Feel free to explore.</p>\n\n          </div>"}, "last_serial": 7175597, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "b95228f47f9999ade8c2af10a53507fd", "sha256": "98a326785a04ffd79ddf2ad80938f2862dac0b635ddcd687cdb383ca6df99a7e"}, "downloads": -1, "filename": "weacceptpayments-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b95228f47f9999ade8c2af10a53507fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 6086, "upload_time": "2020-03-06T17:57:19", "upload_time_iso_8601": "2020-03-06T17:57:19.741449Z", "url": "https://files.pythonhosted.org/packages/5b/3c/531ce2be08c9ebf2aa649a5905659666404fe060ad3a04a9036f90ee4762/weacceptpayments-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4f7aedcb40c40555bf309b2d9818bc8", "sha256": "aaa917a6970eb56713d8d1141a09dde358eb319958f8219c9bb62e37341ee61c"}, "downloads": -1, "filename": "weacceptpayments-2.0.tar.gz", "has_sig": false, "md5_digest": "c4f7aedcb40c40555bf309b2d9818bc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4792, "upload_time": "2020-03-06T17:57:21", "upload_time_iso_8601": "2020-03-06T17:57:21.070636Z", "url": "https://files.pythonhosted.org/packages/b8/e0/c3c4fd7f5fbe295e19b28a9cbd8a6a672e7cf62bfa36e2dc420fb18bc2c5/weacceptpayments-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "5a6240e2b22e2acf3b088de9e225a7a4", "sha256": "a010808f4650868d4e45e4b8fb16bb9d601d9cb4752ed25dfafce2e7a651d206"}, "downloads": -1, "filename": "weacceptpayments-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5a6240e2b22e2acf3b088de9e225a7a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 20308, "upload_time": "2020-04-30T18:55:50", "upload_time_iso_8601": "2020-04-30T18:55:50.514801Z", "url": "https://files.pythonhosted.org/packages/43/cc/13aa4baa54468641ba7f3ad7bccce5f7e891bf0e07ab6eaa76fbe6e3bb29/weacceptpayments-2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75b1090b432d000816d3ac1c8474c2a4", "sha256": "97a61c33de8c1a0297816855e454ebb8db75fc95caacdcae1c5c2a62333853d8"}, "downloads": -1, "filename": "weacceptpayments-2.1.tar.gz", "has_sig": false, "md5_digest": "75b1090b432d000816d3ac1c8474c2a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7662, "upload_time": "2020-04-30T18:55:51", "upload_time_iso_8601": "2020-04-30T18:55:51.563983Z", "url": "https://files.pythonhosted.org/packages/7e/a5/57cacef8afce9ca32e54260654cd3c6ecac86e44f3b3cc0d0b0b7561ba33/weacceptpayments-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "8c6910361114aaaea5b78a4e13a6badf", "sha256": "c9b4235e01b306d2e4925a2b045db7fd553449b3af3d7ce75599ea5d88d013af"}, "downloads": -1, "filename": "weacceptpayments-2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8c6910361114aaaea5b78a4e13a6badf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 19996, "upload_time": "2020-04-30T19:31:39", "upload_time_iso_8601": "2020-04-30T19:31:39.049644Z", "url": "https://files.pythonhosted.org/packages/12/5c/868cf80135b53691c771215130b1e2b1f28bd3901be3fc660d3684fc55a0/weacceptpayments-2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4f36643a079500a7b635fadb3f41f4e", "sha256": "1e0d06d90ee370a3670978d46ff303c23db2328b0d91a2ed367e1f779f7bd8c5"}, "downloads": -1, "filename": "weacceptpayments-2.2.tar.gz", "has_sig": false, "md5_digest": "c4f36643a079500a7b635fadb3f41f4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7375, "upload_time": "2020-04-30T19:31:40", "upload_time_iso_8601": "2020-04-30T19:31:40.365233Z", "url": "https://files.pythonhosted.org/packages/79/a9/7981e3820fc6bb11366150085c5961644c260c8f6d93c418c8fdeafc8ccd/weacceptpayments-2.2.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "8f827df448cfb1fffbf45c5514f98412", "sha256": "2c297c8a5fa1485d9f33bf9a3c0f969deace051e7a003936fc1f271da55a4607"}, "downloads": -1, "filename": "weacceptpayments-2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8f827df448cfb1fffbf45c5514f98412", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 19975, "upload_time": "2020-04-30T19:55:34", "upload_time_iso_8601": "2020-04-30T19:55:34.177298Z", "url": "https://files.pythonhosted.org/packages/72/3f/225145b4de0204ee8ed86f21e781f7574b99d3768c8911fa32ab5e6b7075/weacceptpayments-2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94b36065775d263da84ea275a0bc2b49", "sha256": "c6a63722603ba40b348424563f1977025eb277383148c5f14b5eef3f6679aef2"}, "downloads": -1, "filename": "weacceptpayments-2.3.tar.gz", "has_sig": false, "md5_digest": "94b36065775d263da84ea275a0bc2b49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7364, "upload_time": "2020-04-30T19:55:35", "upload_time_iso_8601": "2020-04-30T19:55:35.365761Z", "url": "https://files.pythonhosted.org/packages/e0/19/170a0afca2d10632e88bf06c3a91e24dbefe6056e412f6849b847e2d5900/weacceptpayments-2.3.tar.gz", "yanked": false}], "2.4": [{"comment_text": "", "digests": {"md5": "9b97560cdf7424d6c2008786a2326d87", "sha256": "9998117ec53dcf40528efe02f7aef3be4906cc97da86abcb6a0042c2c45aec84"}, "downloads": -1, "filename": "weacceptpayments-2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9b97560cdf7424d6c2008786a2326d87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 20253, "upload_time": "2020-05-05T20:19:22", "upload_time_iso_8601": "2020-05-05T20:19:22.309708Z", "url": "https://files.pythonhosted.org/packages/ee/e9/e2a60495452dfab644ccdcb7769136343dadffe5e4638020558b610d3751/weacceptpayments-2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6ab8987e19d40a85309854b063bdfe3", "sha256": "dd6cdda45002df932834563464cb6bff4338fe59ab34e3c13fc9c79cd1ef9e55"}, "downloads": -1, "filename": "weacceptpayments-2.4.tar.gz", "has_sig": false, "md5_digest": "f6ab8987e19d40a85309854b063bdfe3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7681, "upload_time": "2020-05-05T20:19:23", "upload_time_iso_8601": "2020-05-05T20:19:23.681744Z", "url": "https://files.pythonhosted.org/packages/70/67/6d498b2ad1379d133f98c7264d28aee894e6ca849c90527f538385caae7f/weacceptpayments-2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b97560cdf7424d6c2008786a2326d87", "sha256": "9998117ec53dcf40528efe02f7aef3be4906cc97da86abcb6a0042c2c45aec84"}, "downloads": -1, "filename": "weacceptpayments-2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9b97560cdf7424d6c2008786a2326d87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 20253, "upload_time": "2020-05-05T20:19:22", "upload_time_iso_8601": "2020-05-05T20:19:22.309708Z", "url": "https://files.pythonhosted.org/packages/ee/e9/e2a60495452dfab644ccdcb7769136343dadffe5e4638020558b610d3751/weacceptpayments-2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6ab8987e19d40a85309854b063bdfe3", "sha256": "dd6cdda45002df932834563464cb6bff4338fe59ab34e3c13fc9c79cd1ef9e55"}, "downloads": -1, "filename": "weacceptpayments-2.4.tar.gz", "has_sig": false, "md5_digest": "f6ab8987e19d40a85309854b063bdfe3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7681, "upload_time": "2020-05-05T20:19:23", "upload_time_iso_8601": "2020-05-05T20:19:23.681744Z", "url": "https://files.pythonhosted.org/packages/70/67/6d498b2ad1379d133f98c7264d28aee894e6ca849c90527f538385caae7f/weacceptpayments-2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:38 2020"}