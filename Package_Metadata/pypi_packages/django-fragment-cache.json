{"info": {"author": "hongweipeng", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Django Fragment Cache\n===============\n\nDjango provides template fragment caching, such as :\n```\n{% load cache %}\n{% cache 500 sidebar %}\n    .. sidebar ..\n{% endcache %}\n```\nBut the variable `sidebar` still to be passed to the template every time, otherwise the fragment is blank when the cache expires.\n\nIf the data acquisition process is time consuming, then the fragment cache is to exist in name only.\n\nSo, this module provides another way to use the template cache.\n\n## How to use?\n\n### Install\n```\npip install django-fragment-cache\n```\nInstall Requires:\n- django >= 2\n\nedit your settings.py to add `fragment_cache` to your `NSTALLED_APPS`.\n```\nINSTALLED_APPS = (\n    ...\n    'fragment_cache',\n    ...\n)\n```\n\n### Use\nyou need provide a callable object to tell module how to get data, and the function return a dict.\n\n**only call function when cache expires.**\n\n```\nimport time\ndef get_data(num=10):\n    time.sleep(3)\n    return {'nums': list(range(num))}\n\ndef test(request):\n    return render(request, 'test.html', {'get_data': get_data})\n```\n\nThe `{% fragment_cache %}` template tag is similar to `{% cache %}` , for example:\n```\n{% load fragment_cache %}\n{% fragment_cache 500 get_data %}\n    <ul>\n        {% for i in nums %}\n            <li> {{ i }}</li>\n        {% endfor %}\n    </ul>\n{% endfragment_cache %}\n```\nSometimes, you might want to cache multiple copies of a fragment depending on some dynamic data that appears inside the fragment.\n\nThis allows different parameters to be cached to cache different results, for example:\n```\n{% load fragment_cache %}\n{% fragment_cache 500 get_data 6 %}\n    <ul>\n        {% for i in nums %}\n            <li> {{ i }}</li>\n        {% endfor %}\n    </ul>\n{% endfragment_cache %}\n```\n\nEnjoy yourself.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hongweipeng/django-fragment-cache", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-fragment-cache", "package_url": "https://pypi.org/project/django-fragment-cache/", "platform": "", "project_url": "https://pypi.org/project/django-fragment-cache/", "project_urls": {"Homepage": "https://github.com/hongweipeng/django-fragment-cache"}, "release_url": "https://pypi.org/project/django-fragment-cache/0.5.1/", "requires_dist": ["setuptools", "django (>=2)"], "requires_python": "", "summary": "a tag for improving django template fragment cache", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Fragment Cache</h1>\n<p>Django provides template fragment caching, such as :</p>\n<pre><code>{% load cache %}\n{% cache 500 sidebar %}\n    .. sidebar ..\n{% endcache %}\n</code></pre>\n<p>But the variable <code>sidebar</code> still to be passed to the template every time, otherwise the fragment is blank when the cache expires.</p>\n<p>If the data acquisition process is time consuming, then the fragment cache is to exist in name only.</p>\n<p>So, this module provides another way to use the template cache.</p>\n<h2>How to use?</h2>\n<h3>Install</h3>\n<pre><code>pip install django-fragment-cache\n</code></pre>\n<p>Install Requires:</p>\n<ul>\n<li>django &gt;= 2</li>\n</ul>\n<p>edit your settings.py to add <code>fragment_cache</code> to your <code>NSTALLED_APPS</code>.</p>\n<pre><code>INSTALLED_APPS = (\n    ...\n    'fragment_cache',\n    ...\n)\n</code></pre>\n<h3>Use</h3>\n<p>you need provide a callable object to tell module how to get data, and the function return a dict.</p>\n<p><strong>only call function when cache expires.</strong></p>\n<pre><code>import time\ndef get_data(num=10):\n    time.sleep(3)\n    return {'nums': list(range(num))}\n\ndef test(request):\n    return render(request, 'test.html', {'get_data': get_data})\n</code></pre>\n<p>The <code>{% fragment_cache %}</code> template tag is similar to <code>{% cache %}</code> , for example:</p>\n<pre><code>{% load fragment_cache %}\n{% fragment_cache 500 get_data %}\n    &lt;ul&gt;\n        {% for i in nums %}\n            &lt;li&gt; {{ i }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endfragment_cache %}\n</code></pre>\n<p>Sometimes, you might want to cache multiple copies of a fragment depending on some dynamic data that appears inside the fragment.</p>\n<p>This allows different parameters to be cached to cache different results, for example:</p>\n<pre><code>{% load fragment_cache %}\n{% fragment_cache 500 get_data 6 %}\n    &lt;ul&gt;\n        {% for i in nums %}\n            &lt;li&gt; {{ i }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endfragment_cache %}\n</code></pre>\n<p>Enjoy yourself.</p>\n\n          </div>"}, "last_serial": 4053444, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "a88d16f71e3310d0ece8b629e2731480", "sha256": "fdde2cc51c1f1a4851dd88385567296de0e5e64a4debc107e41aebef5004d4a8"}, "downloads": -1, "filename": "django_fragment_cache-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a88d16f71e3310d0ece8b629e2731480", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3676, "upload_time": "2018-07-12T06:44:42", "upload_time_iso_8601": "2018-07-12T06:44:42.678529Z", "url": "https://files.pythonhosted.org/packages/6c/a7/34d7d45cfd82ed719524ee5051a16c41cff63a86e6eb71204408872d7761/django_fragment_cache-0.5-py3-none-any.whl", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "ae022aee328dbb9a50e4358e61d1ab2d", "sha256": "83dd438d617900929c65bfcfbe9fd436e8437129dc15ed23c0b9b7c31e3966bf"}, "downloads": -1, "filename": "django_fragment_cache-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ae022aee328dbb9a50e4358e61d1ab2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3713, "upload_time": "2018-07-12T08:20:46", "upload_time_iso_8601": "2018-07-12T08:20:46.655144Z", "url": "https://files.pythonhosted.org/packages/d0/e4/da1fa1bd0c378f7afdce473e58b1a66d7380d6a40c5342077c50dc328671/django_fragment_cache-0.5.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae022aee328dbb9a50e4358e61d1ab2d", "sha256": "83dd438d617900929c65bfcfbe9fd436e8437129dc15ed23c0b9b7c31e3966bf"}, "downloads": -1, "filename": "django_fragment_cache-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ae022aee328dbb9a50e4358e61d1ab2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3713, "upload_time": "2018-07-12T08:20:46", "upload_time_iso_8601": "2018-07-12T08:20:46.655144Z", "url": "https://files.pythonhosted.org/packages/d0/e4/da1fa1bd0c378f7afdce473e58b1a66d7380d6a40c5342077c50dc328671/django_fragment_cache-0.5.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:36:00 2020"}