{"info": {"author": "Murad Byashimov", "author_email": "byashimov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-pkgconf\n==============\n\nYet another application settings helper.\n\nRationale\n---------\n\nIt's a common practice to put a settings file in a distribution package with some predefined stuff which can be overridden later in global project's settings.\nBut there is also a good reason to separate all your settings within your apps just like you do so with common python code: models, views, etc.\nThat's not a big thing if your project doesn't come with dozen apps, but if it does, flushing out non-project stuff is a good way to not mess things around and keep them way simple.\n\n.. _quickstart:\n\nQuickstart\n----------\n\nLets say you have an email service application in your project dir and it stores some configuration in ``settings.py``:\n\n.. code-block:: python\n\n    MYEMAILSERVICE_USERNAME = 'username'\n    MYEMAILSERVICE_PASSWORD = 'password'\n    ...\n\nIt's a big temptation to write short ``USERNAME``, but you have to use prefixes to prevent conflicts with other application settings and tell collaborators *this is for the email app*. And then:\n\n.. code-block:: python\n\n    # emails/foo.py\n    from django.conf import settings.\n\n    service = Service(username=settings.MYEMAILSERVICE_USERNAME,\n                      password=settings.MYEMAILSERVICE_PASSWORD,\n                      ...)\n\nPrefixes are everywhere. You always have to say ``MYEMAILSERVICE_`` in every single place you need to access the settings. How about this one:\n\n.. code-block:: python\n\n    # Package settings in emails/conf.py\n    from pkgconf import Conf\n\n    class MyEmailService(Conf):\n        USERNAME = 'username'\n        PASSWORD = 'password'\n\n        @property\n        def DEBUG(self):\n            return self.USERNAME.startswith('test_')\n\nThere is nothing more to say:\n\n.. code-block:: python\n\n    # emails/foo.py\n    # Note: your MyEmailService class becomes a module,\n    # you import it directly\n    from . import conf\n\n    service = Service(username=conf.USERNAME, password=conf.PASSWORD, ...)\n\n**django-pkgconf** wraps your application settings and provides a handy shortcut.\n\nBut what about test or dev settings? Just define them like you always do (configuration class name becomes a prefix).\n\nOld style:\n\n.. code-block:: python\n\n    # local_settings.py\n    MYEMAILSERVICE_USERNAME = 'test_username'\n\nCool style (django-configurations_ way):\n\n.. code-block:: python\n\n    # settings.py\n    class Prod(Configuration):\n        # No email service settings at all\n        pass\n\n    class Test(Prod):\n        MYEMAILSERVICE_USERNAME = 'test_username'\n\nIt looks for the required setting in django's configuration file first and returns original value if it's not overridden:\n\n.. code-block:: python\n\n    # emails/foo.py\n    from . import conf\n\n    conf.USERNAME  # 'test_username'\n    conf.PASSWORD  # 'password' - returns original value\n    conf.DEBUG  # True\n\n\nSince ``0.3.0`` mixins are supported:\n\n.. code-block:: python\n\n    from pkgconf import Conf\n\n    class FacebookMixin:\n        FACEBOOK_APP_ID = 'foo'\n        FACEBOOK_SECRET = 'bar'\n\n\n    class TwitterMixin:\n        TWITTER_APP_ID = 'foo'\n        TWITTER_SECRET = 'bar'\n\n\n    class InstagramMixin:\n        INSTAGRAM_APP_ID = 'foo'\n        INSTAGRAM_SECRET = 'bar'\n\n\n    class SocialAppConf(FacebookMixin, TwitterMixin, InstagramMixin, Conf):\n        DEBUG = True\n\n\nInstallation\n------------\n\nInstall the package:\n\n.. code-block:: console\n\n    pip install -U django-pkgconf\n\nRead the quickstart_.\n\n\nCompatability\n-------------\n\n.. image:: https://travis-ci.org/byashimov/django-pkgconf.svg?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/byashimov/django-pkgconf\n\n.. image:: https://codecov.io/gh/byashimov/django-pkgconf/branch/master/graph/badge.svg\n    :alt: Codecov\n    :target: https://codecov.io/gh/byashimov/django-pkgconf\n\nTested on py 3.5, 3.6, 3.7, 3.8 with django 1.11, 2.2, 3.0.\n\n\nPowered siblings\n----------------\n\nThere are more advanced apps with (probably) some extra (better?) options: django-appsettings_, django-appconf_, etc. The reason I've published this one is those apps are too big and tricky to do this little work, so you might prefer them instead.\n\n\nLimitations\n-----------\n\n- Due to the code simplicity, ``property`` descriptor is used to *get* data from the settings. That means you can not *set* (or *change*) configuration values *in action*. I don't know why you would do that, but I have to warn you.\n- Since your app's settings are defined in separate file, they are not accessible via ``django.conf.settings`` (until you override them in your project settings). This application doesn't create backward compatibility links. You should always use package configuration module.\n\n\nChangelog\n---------\n\nv0.4.0\n~~~~~~\n- Python 3 only\n\nv0.3.0\n~~~~~~\n- Added mixins support.\n\nv0.2.1 - 0.2.2\n~~~~~~~~~~~~~~\n- Added ``import *`` support.\n- ``__prefix__`` is generated automatically if not presented in class.\n  That may help to build graceful exceptions like ``'foo_value' was not found in MYAPP_FOO_SETTING``.\n\nv0.2.0\n~~~~~~\n- Added ``__prefix__`` attribute to support prefix-names with underscores.\n- Added instance method and property support.\n- **Backward incompatible change:** functions must have ``self`` as the first argument now.\n\nv0.1.0\n~~~~~~\n- First public release\n\n.. _django-appsettings: https://github.com/jaredly/django-appsettings\n.. _django-appconf: https://github.com/django-compressor/django-appconf\n.. _django-configurations: https://github.com/jezdez/django-configurations", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/byashimov/django-pkgconf", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-pkgconf", "package_url": "https://pypi.org/project/django-pkgconf/", "platform": "", "project_url": "https://pypi.org/project/django-pkgconf/", "project_urls": {"Homepage": "https://github.com/byashimov/django-pkgconf"}, "release_url": "https://pypi.org/project/django-pkgconf/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Yet another application settings helper.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Yet another application settings helper.</p>\n<div id=\"rationale\">\n<h2>Rationale</h2>\n<p>It\u2019s a common practice to put a settings file in a distribution package with some predefined stuff which can be overridden later in global project\u2019s settings.\nBut there is also a good reason to separate all your settings within your apps just like you do so with common python code: models, views, etc.\nThat\u2019s not a big thing if your project doesn\u2019t come with dozen apps, but if it does, flushing out non-project stuff is a good way to not mess things around and keep them way simple.</p>\n</div>\n<div id=\"id1\">\n<span id=\"quickstart\"></span><h2>Quickstart</h2>\n<p>Lets say you have an email service application in your project dir and it stores some configuration in <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">MYEMAILSERVICE_USERNAME</span> <span class=\"o\">=</span> <span class=\"s1\">'username'</span>\n<span class=\"n\">MYEMAILSERVICE_PASSWORD</span> <span class=\"o\">=</span> <span class=\"s1\">'password'</span>\n<span class=\"o\">...</span>\n</pre>\n<p>It\u2019s a big temptation to write short <tt>USERNAME</tt>, but you have to use prefixes to prevent conflicts with other application settings and tell collaborators <em>this is for the email app</em>. And then:</p>\n<pre><span class=\"c1\"># emails/foo.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span><span class=\"o\">.</span>\n\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">Service</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MYEMAILSERVICE_USERNAME</span><span class=\"p\">,</span>\n                  <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MYEMAILSERVICE_PASSWORD</span><span class=\"p\">,</span>\n                  <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Prefixes are everywhere. You always have to say <tt>MYEMAILSERVICE_</tt> in every single place you need to access the settings. How about this one:</p>\n<pre><span class=\"c1\"># Package settings in emails/conf.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pkgconf</span> <span class=\"kn\">import</span> <span class=\"n\">Conf</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyEmailService</span><span class=\"p\">(</span><span class=\"n\">Conf</span><span class=\"p\">):</span>\n    <span class=\"n\">USERNAME</span> <span class=\"o\">=</span> <span class=\"s1\">'username'</span>\n    <span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"s1\">'password'</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">DEBUG</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">USERNAME</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'test_'</span><span class=\"p\">)</span>\n</pre>\n<p>There is nothing more to say:</p>\n<pre><span class=\"c1\"># emails/foo.py</span>\n<span class=\"c1\"># Note: your MyEmailService class becomes a module,</span>\n<span class=\"c1\"># you import it directly</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">conf</span>\n\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">Service</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">USERNAME</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">PASSWORD</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><strong>django-pkgconf</strong> wraps your application settings and provides a handy shortcut.</p>\n<p>But what about test or dev settings? Just define them like you always do (configuration class name becomes a prefix).</p>\n<p>Old style:</p>\n<pre><span class=\"c1\"># local_settings.py</span>\n<span class=\"n\">MYEMAILSERVICE_USERNAME</span> <span class=\"o\">=</span> <span class=\"s1\">'test_username'</span>\n</pre>\n<p>Cool style (<a href=\"https://github.com/jezdez/django-configurations\" rel=\"nofollow\">django-configurations</a> way):</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">Prod</span><span class=\"p\">(</span><span class=\"n\">Configuration</span><span class=\"p\">):</span>\n    <span class=\"c1\"># No email service settings at all</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Test</span><span class=\"p\">(</span><span class=\"n\">Prod</span><span class=\"p\">):</span>\n    <span class=\"n\">MYEMAILSERVICE_USERNAME</span> <span class=\"o\">=</span> <span class=\"s1\">'test_username'</span>\n</pre>\n<p>It looks for the required setting in django\u2019s configuration file first and returns original value if it\u2019s not overridden:</p>\n<pre><span class=\"c1\"># emails/foo.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">conf</span>\n\n<span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">USERNAME</span>  <span class=\"c1\"># 'test_username'</span>\n<span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">PASSWORD</span>  <span class=\"c1\"># 'password' - returns original value</span>\n<span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span>  <span class=\"c1\"># True</span>\n</pre>\n<p>Since <tt>0.3.0</tt> mixins are supported:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pkgconf</span> <span class=\"kn\">import</span> <span class=\"n\">Conf</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FacebookMixin</span><span class=\"p\">:</span>\n    <span class=\"n\">FACEBOOK_APP_ID</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span>\n    <span class=\"n\">FACEBOOK_SECRET</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TwitterMixin</span><span class=\"p\">:</span>\n    <span class=\"n\">TWITTER_APP_ID</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span>\n    <span class=\"n\">TWITTER_SECRET</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">InstagramMixin</span><span class=\"p\">:</span>\n    <span class=\"n\">INSTAGRAM_APP_ID</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span>\n    <span class=\"n\">INSTAGRAM_SECRET</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SocialAppConf</span><span class=\"p\">(</span><span class=\"n\">FacebookMixin</span><span class=\"p\">,</span> <span class=\"n\">TwitterMixin</span><span class=\"p\">,</span> <span class=\"n\">InstagramMixin</span><span class=\"p\">,</span> <span class=\"n\">Conf</span><span class=\"p\">):</span>\n    <span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the package:</p>\n<pre><span class=\"go\">pip install -U django-pkgconf</span>\n</pre>\n<p>Read the <a href=\"#quickstart\" rel=\"nofollow\">quickstart</a>.</p>\n</div>\n<div id=\"compatability\">\n<h2>Compatability</h2>\n<a href=\"https://travis-ci.org/byashimov/django-pkgconf\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0b02f03d54e63f763f4d686bd7f33668c82f777/68747470733a2f2f7472617669732d63692e6f72672f6279617368696d6f762f646a616e676f2d706b67636f6e662e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/byashimov/django-pkgconf\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3885d9e9b1d096f969b1330764ec4a6bdf7cbca2/68747470733a2f2f636f6465636f762e696f2f67682f6279617368696d6f762f646a616e676f2d706b67636f6e662f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<p>Tested on py 3.5, 3.6, 3.7, 3.8 with django 1.11, 2.2, 3.0.</p>\n</div>\n<div id=\"powered-siblings\">\n<h2>Powered siblings</h2>\n<p>There are more advanced apps with (probably) some extra (better?) options: <a href=\"https://github.com/jaredly/django-appsettings\" rel=\"nofollow\">django-appsettings</a>, <a href=\"https://github.com/django-compressor/django-appconf\" rel=\"nofollow\">django-appconf</a>, etc. The reason I\u2019ve published this one is those apps are too big and tricky to do this little work, so you might prefer them instead.</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<ul>\n<li>Due to the code simplicity, <tt>property</tt> descriptor is used to <em>get</em> data from the settings. That means you can not <em>set</em> (or <em>change</em>) configuration values <em>in action</em>. I don\u2019t know why you would do that, but I have to warn you.</li>\n<li>Since your app\u2019s settings are defined in separate file, they are not accessible via <tt>django.conf.settings</tt> (until you override them in your project settings). This application doesn\u2019t create backward compatibility links. You should always use package configuration module.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"v0-4-0\">\n<h3>v0.4.0</h3>\n<ul>\n<li>Python 3 only</li>\n</ul>\n</div>\n<div id=\"v0-3-0\">\n<h3>v0.3.0</h3>\n<ul>\n<li>Added mixins support.</li>\n</ul>\n</div>\n<div id=\"v0-2-1-0-2-2\">\n<h3>v0.2.1 - 0.2.2</h3>\n<ul>\n<li>Added <tt>import *</tt> support.</li>\n<li><tt>__prefix__</tt> is generated automatically if not presented in class.\nThat may help to build graceful exceptions like <tt>'foo_value' was not found in MYAPP_FOO_SETTING</tt>.</li>\n</ul>\n</div>\n<div id=\"v0-2-0\">\n<h3>v0.2.0</h3>\n<ul>\n<li>Added <tt>__prefix__</tt> attribute to support prefix-names with underscores.</li>\n<li>Added instance method and property support.</li>\n<li><strong>Backward incompatible change:</strong> functions must have <tt>self</tt> as the first argument now.</li>\n</ul>\n</div>\n<div id=\"v0-1-0\">\n<h3>v0.1.0</h3>\n<ul>\n<li>First public release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6840284, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4655ac8851a6f233641999987e031bc3", "sha256": "bb3c7a243f9a3bff1b9c14e0b7499a98e64b3830bd4afda0bbec650e3628e5c6"}, "downloads": -1, "filename": "django_pkgconf-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4655ac8851a6f233641999987e031bc3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 2861, "upload_time": "2016-05-11T12:13:35", "upload_time_iso_8601": "2016-05-11T12:13:35.933885Z", "url": "https://files.pythonhosted.org/packages/77/f0/f4b4f22f47fc0270c064cb4f1308bf83d26b909b7a242ac6fecb14764bec/django_pkgconf-0.1-py2.py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "2c05bdf469a413a5fe4ff4a137305955", "sha256": "73f570de49c8bd8aaccd6b259794196f695eeeea8d025ef0ccf0e605a9cb0649"}, "downloads": -1, "filename": "django_pkgconf-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2c05bdf469a413a5fe4ff4a137305955", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 2889, "upload_time": "2016-05-12T21:51:48", "upload_time_iso_8601": "2016-05-12T21:51:48.480215Z", "url": "https://files.pythonhosted.org/packages/a4/f7/6043ee040a018568bab1f8526ed51ca9602f2ec39483ef25a1c216831708/django_pkgconf-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6ef6fe496564c3d415a96e63788ac795", "sha256": "c1b69e44413e398bef604ab5506b5f9d66c73768522a3cae58a3adf7a3e3dede"}, "downloads": -1, "filename": "django_pkgconf-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6ef6fe496564c3d415a96e63788ac795", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3013, "upload_time": "2016-05-15T13:48:50", "upload_time_iso_8601": "2016-05-15T13:48:50.786641Z", "url": "https://files.pythonhosted.org/packages/0c/ed/4489e8eea8863a98564371e4f4873331efd3e961f9cc5efd1503f665990d/django_pkgconf-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c279d16222154d5f99002ca4a0c82137", "sha256": "b78bff5656927bb4b782b044aa9acb9dca4d703ac405f0b2ee41fae5c4bd632f"}, "downloads": -1, "filename": "django_pkgconf-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c279d16222154d5f99002ca4a0c82137", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3042, "upload_time": "2017-03-25T22:01:31", "upload_time_iso_8601": "2017-03-25T22:01:31.071074Z", "url": "https://files.pythonhosted.org/packages/2f/13/1f147c432af8d23dc10492c0497fb90a9d563c84f0706a2111ba835a7fbe/django_pkgconf-0.2.1-py2.py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "cc9b06544734ccbc7484490b8acd337a", "sha256": "87c6b42d59faf602cf540a343e38c9501085f973299fad6a8d60535439339698"}, "downloads": -1, "filename": "django_pkgconf-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cc9b06544734ccbc7484490b8acd337a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3050, "upload_time": "2017-08-12T14:03:36", "upload_time_iso_8601": "2017-08-12T14:03:36.020429Z", "url": "https://files.pythonhosted.org/packages/9a/4f/6a3606562463f261f09fb4718542732b2626afac8c1c96055d8145eb8ce6/django_pkgconf-0.3.0-py2.py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "92bfc08e9c16e2bd58416c7b8239f7cf", "sha256": "117afcc934dd6fdf4204155901182649bed27e9c3acc71f8b92728f009d4f53b"}, "downloads": -1, "filename": "django-pkgconf-0.4.0.tar.gz", "has_sig": false, "md5_digest": "92bfc08e9c16e2bd58416c7b8239f7cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6835, "upload_time": "2020-03-18T23:34:32", "upload_time_iso_8601": "2020-03-18T23:34:32.376195Z", "url": "https://files.pythonhosted.org/packages/54/9d/c9527722de1f04f5cf3f814a57ccc7d7603374e2b5f8072201b16c181d5e/django-pkgconf-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92bfc08e9c16e2bd58416c7b8239f7cf", "sha256": "117afcc934dd6fdf4204155901182649bed27e9c3acc71f8b92728f009d4f53b"}, "downloads": -1, "filename": "django-pkgconf-0.4.0.tar.gz", "has_sig": false, "md5_digest": "92bfc08e9c16e2bd58416c7b8239f7cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6835, "upload_time": "2020-03-18T23:34:32", "upload_time_iso_8601": "2020-03-18T23:34:32.376195Z", "url": "https://files.pythonhosted.org/packages/54/9d/c9527722de1f04f5cf3f814a57ccc7d7603374e2b5f8072201b16c181d5e/django-pkgconf-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:58 2020"}