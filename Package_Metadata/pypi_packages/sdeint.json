{"info": {"author": "Matthew J. Aburn", "author_email": "mattja6@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering"], "description": "sdeint\n======\n| Numerical integration of Ito or Stratonovich SDEs.\n\nOverview\n--------\nsdeint is a collection of numerical algorithms for integrating Ito and Stratonovich stochastic ordinary differential equations (SODEs). It has simple functions that can be used in a similar way to ``scipy.integrate.odeint()`` or MATLAB's ``ode45``.\n\nThere already exist some python and MATLAB packages providing Euler-Maruyama and Milstein algorithms, and a couple of others. So why am I bothering to make another package?\n\nIt is because there has been 25 years of further research with better methods but for some reason I can't find any open source reference implementations. Not even for those methods published by Kloeden and Platen way back in 1992. So I will aim to gradually add some improved methods here.\n\nThis is prototype code in python, so not aiming for speed. Later can always rewrite these with loops in C when speed is needed.\n\nWarning: this is an early pre-release. Wait for version 1.0. Bug reports are very welcome!\n\nfunctions\n---------\n| ``itoint(f, G, y0, tspan)`` for Ito equation dy = f(y,t)dt + G(y,t)dW\n| ``stratint(f, G, y0, tspan)`` for Stratonovich equation dy = f(y,t)dt + G(y,t)\u2218dW\n\nThese work with scalar or vector equations. They will choose an algorithm for you. Or you can use a specific algorithm directly:\n\nspecific algorithms:\n--------------------\n| ``itoEuler(f, G, y0, tspan)``: the Euler-Maruyama algorithm for Ito equations.\n| ``stratHeun(f, G, y0, tspan)``: the Stratonovich Heun algorithm for Stratonovich equations.\n| ``itoSRI2(f, G, y0, tspan)``: the R\u00f6\u00dfler2010 order 1.0 strong Stochastic Runge-Kutta algorithm SRI2 for Ito equations.\n| ``itoSRI2(f, [g1,...,gm], y0, tspan)``: as above, with G matrix given as a separate function for each column (gives speedup for large m or complicated G).\n| ``stratSRS2(f, G, y0, tspan)``: the R\u00f6\u00dfler2010 order 1.0 strong Stochastic Runge-Kutta algorithm SRS2 for Stratonovich equations.\n| ``stratSRS2(f, [g1,...,gm], y0, tspan)``: as above, with G matrix given as a separate function for each column (gives speedup for large m or complicated G).\n| ``stratKP2iS(f, G, y0, tspan)``: the Kloeden and Platen two-step implicit order 1.0 strong algorithm for Stratonovich equations.\n| For more information and advanced options see the documentation for each function.\n\nutility functions:\n~~~~~~~~~~~~~~~~~~\n| ``deltaW(N, m, h)``: Generate increments of m independent Wiener processes for each of N time intervals of length h.\n\n| Repeated integrals by the method of Kloeden, Platen and Wright (1992):\n| ``Ikpw(dW, h, n=5)``: Approximate repeated Ito integrals.\n| ``Jkpw(dW, h, n=5)``: Approximate repeated Stratonovich integrals.\n\n| Repeated integrals by the method of Wiktorsson (2001):\n| ``Iwik(dW, h, n=5)``: Approximate repeated Ito integrals.\n| ``Jwik(dW, h, n=5)``: Approximate repeated Stratonovich integrals.\n\nExamples:\n---------\n| Integrate the one-dimensional Ito equation |_| |eqn1|\n| with initial condition ``x0 = 0.1``\n\n.. |eqn1| image:: https://cloud.githubusercontent.com/assets/7663625/12638687/f984ae7c-c5ea-11e5-9b99-ac173d7dfe4c.png\n   :alt: dx = -(a + x*b**2)*(1 - x**2)dt + b*(1 - x**2)dW\n.. code-block::\n\n    import numpy as np\n    import sdeint\n\n    a = 1.0\n    b = 0.8\n    tspan = np.linspace(0.0, 5.0, 5001)\n    x0 = 0.1\n\n    def f(x, t):\n        return -(a + x*b**2)*(1 - x**2)\n\n    def g(x, t):\n        return b*(1 - x**2)\n\n    result = sdeint.itoint(f, g, x0, tspan)\n\n| Integrate the two-dimensional vector Ito equation |_| |eqn2|\n| where ``x = (x1, x2)``, |_| ``dW = (dW1, dW2)`` and with initial condition ``x0 = (3.0, 3.0)``\n\n.. |eqn2| image:: https://cloud.githubusercontent.com/assets/7663625/12638691/012a861a-c5eb-11e5-805d-d704eaff00dd.png\n   :alt: dx = A.x dt + B.dW\n.. code-block::\n\n    import numpy as np\n    import sdeint\n\n    A = np.array([[-0.5, -2.0],\n                  [ 2.0, -1.0]])\n\n    B = np.diag([0.5, 0.5]) # diagonal, so independent driving Wiener processes\n\n    tspan = np.linspace(0.0, 10.0, 10001)\n    x0 = np.array([3.0, 3.0])\n\n    def f(x, t):\n        return A.dot(x)\n\n    def G(x, t):\n        return B\n\n    result = sdeint.itoint(f, G, x0, tspan)\n\nReferences for these algorithms:\n--------------------------------\n\n| ``itoEuler``:\n| G. Maruyama (1955) Continuous Markov processes and stochastic equations\n| ``stratHeun``:\n| W. Rumelin (1982) Numerical Treatment of Stochastic Differential Equations\n| R. Mannella (2002) Integration of Stochastic Differential Equations on a Computer\n| K. Burrage, P. M. Burrage and T. Tian (2004) Numerical methods for strong solutions of stochastic differential equations: an overview\n| ``itoSRI2, stratSRS2``:\n| A. R\u00f6\u00dfler (2010) Runge-Kutta Methods for the Strong Approximation of Solutions of Stochastic Differential Equations\n| ``stratKP2iS``:\n| P. Kloeden and E. Platen (1999) Numerical Solution of Stochastic Differential Equations, revised and updated 3rd printing\n| ``Ikpw, Jkpw``:\n| P. Kloeden, E. Platen and I. Wright (1992) The approximation of multiple stochastic integrals\n| ``Iwik, Jwik``:\n| M. Wiktorsson (2001) Joint Characteristic Function and Simultaneous Simulation of Iterated Ito Integrals for Multiple Independent Brownian Motions\n\nTODO\n----\n- Rewrite ``Iwik()`` and ``Jwik()`` so they don't waste so much memory.\n\n- Fix ``stratKP2iS()``. In the unit tests it is currently less accurate than ``itoEuler()`` and this is likely due to a bug.\n\n- Implement the Ito version of the Kloeden and Platen two-step implicit alogrithm.\n\n- Add more strong stochastic Runge-Kutta algorithms. Perhaps starting with\n  Burrage and Burrage (1996)\n\n- Currently prioritizing those algorithms that work for very general d-dimensional systems with arbitrary noise coefficient matrix, and which are derivative free. Eventually will add special case algorithms that give a speed increase for systems with certain symmetries. That is, 1-dimensional systems, systems with scalar noise, diagonal noise or commutative noise, etc. The idea is that ``itoint()`` and ``stratint()`` will detect these situations and dispatch to the most suitable algorithm.\n\n- Eventually implement the main loops in C for speed.\n\n- Some time in the dim future, implement support for stochastic delay differential equations (SDDEs).\n\nSee also:\n---------\n\n``nsim``: Framework that uses this ``sdeint`` library to enable massive parallel simulations of SDE systems (using multiple CPUs or a cluster) and provides some tools to analyze the resulting timeseries. https://github.com/mattja/nsim\n\n.. |_| unicode:: 0xa0", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mattja/sdeint/", "keywords": "stochastic,differential equations,SDE,SODE", "license": "GPLv3+", "maintainer": null, "maintainer_email": null, "name": "sdeint", "package_url": "https://pypi.org/project/sdeint/", "platform": "any", "project_url": "https://pypi.org/project/sdeint/", "project_urls": {"Homepage": "http://github.com/mattja/sdeint/"}, "release_url": "https://pypi.org/project/sdeint/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Numerical integration of stochastic differential equations (SDE)", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<div>Numerical integration of Ito or Stratonovich SDEs.</div>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>sdeint is a collection of numerical algorithms for integrating Ito and Stratonovich stochastic ordinary differential equations (SODEs). It has simple functions that can be used in a similar way to <tt>scipy.integrate.odeint()</tt> or MATLAB\u2019s <tt>ode45</tt>.</p>\n<p>There already exist some python and MATLAB packages providing Euler-Maruyama and Milstein algorithms, and a couple of others. So why am I bothering to make another package?</p>\n<p>It is because there has been 25 years of further research with better methods but for some reason I can\u2019t find any open source reference implementations. Not even for those methods published by Kloeden and Platen way back in 1992. So I will aim to gradually add some improved methods here.</p>\n<p>This is prototype code in python, so not aiming for speed. Later can always rewrite these with loops in C when speed is needed.</p>\n<p>Warning: this is an early pre-release. Wait for version 1.0. Bug reports are very welcome!</p>\n</div>\n<div id=\"functions\">\n<h2>functions</h2>\n<div>\n<div><tt>itoint(f, G, y0, tspan)</tt> for Ito equation dy = f(y,t)dt + G(y,t)dW</div>\n<div><tt>stratint(f, G, y0, tspan)</tt> for Stratonovich equation dy = f(y,t)dt + G(y,t)\u2218dW</div>\n</div>\n<p>These work with scalar or vector equations. They will choose an algorithm for you. Or you can use a specific algorithm directly:</p>\n</div>\n<div id=\"specific-algorithms\">\n<h2>specific algorithms:</h2>\n<div>\n<div><tt>itoEuler(f, G, y0, tspan)</tt>: the Euler-Maruyama algorithm for Ito equations.</div>\n<div><tt>stratHeun(f, G, y0, tspan)</tt>: the Stratonovich Heun algorithm for Stratonovich equations.</div>\n<div><tt>itoSRI2(f, G, y0, tspan)</tt>: the R\u00f6\u00dfler2010 order 1.0 strong Stochastic Runge-Kutta algorithm SRI2 for Ito equations.</div>\n<div><tt>itoSRI2(f, <span class=\"pre\">[g1,...,gm],</span> y0, tspan)</tt>: as above, with G matrix given as a separate function for each column (gives speedup for large m or complicated G).</div>\n<div><tt>stratSRS2(f, G, y0, tspan)</tt>: the R\u00f6\u00dfler2010 order 1.0 strong Stochastic Runge-Kutta algorithm SRS2 for Stratonovich equations.</div>\n<div><tt>stratSRS2(f, <span class=\"pre\">[g1,...,gm],</span> y0, tspan)</tt>: as above, with G matrix given as a separate function for each column (gives speedup for large m or complicated G).</div>\n<div><tt>stratKP2iS(f, G, y0, tspan)</tt>: the Kloeden and Platen two-step implicit order 1.0 strong algorithm for Stratonovich equations.</div>\n<div>For more information and advanced options see the documentation for each function.</div>\n</div>\n<div id=\"utility-functions\">\n<h3>utility functions:</h3>\n<div>\n<div><tt>deltaW(N, m, h)</tt>: Generate increments of m independent Wiener processes for each of N time intervals of length h.</div>\n</div>\n<div>\n<div>Repeated integrals by the method of Kloeden, Platen and Wright (1992):</div>\n<div><tt>Ikpw(dW, h, n=5)</tt>: Approximate repeated Ito integrals.</div>\n<div><tt>Jkpw(dW, h, n=5)</tt>: Approximate repeated Stratonovich integrals.</div>\n</div>\n<div>\n<div>Repeated integrals by the method of Wiktorsson (2001):</div>\n<div><tt>Iwik(dW, h, n=5)</tt>: Approximate repeated Ito integrals.</div>\n<div><tt>Jwik(dW, h, n=5)</tt>: Approximate repeated Stratonovich integrals.</div>\n</div>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples:</h2>\n<div>\n<div>Integrate the one-dimensional Ito equation \u00a0 <img alt=\"dx = -(a + x*b**2)*(1 - x**2)dt + b*(1 - x**2)dW\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b7de426a386956965278b413b154fc59af131606/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f373636333632352f31323633383638372f66393834616537632d633565612d313165352d396239392d6163313733643764666534632e706e67\"></div>\n<div>with initial condition <tt>x0 = 0.1</tt></div>\n</div>\n<pre>import numpy as np\nimport sdeint\n\na = 1.0\nb = 0.8\ntspan = np.linspace(0.0, 5.0, 5001)\nx0 = 0.1\n\ndef f(x, t):\n    return -(a + x*b**2)*(1 - x**2)\n\ndef g(x, t):\n    return b*(1 - x**2)\n\nresult = sdeint.itoint(f, g, x0, tspan)\n</pre>\n<div>\n<div>Integrate the two-dimensional vector Ito equation \u00a0 <img alt=\"dx = A.x dt + B.dW\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75e190107af7d0ee301bb8ae23fe186d60292b0f/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f373636333632352f31323633383639312f30313261383631612d633565622d313165352d383035642d6437303465616666303064642e706e67\"></div>\n<div>where <tt>x = (x1, x2)</tt>, \u00a0 <tt>dW = (dW1, dW2)</tt> and with initial condition <tt>x0 = (3.0, 3.0)</tt></div>\n</div>\n<pre>import numpy as np\nimport sdeint\n\nA = np.array([[-0.5, -2.0],\n              [ 2.0, -1.0]])\n\nB = np.diag([0.5, 0.5]) # diagonal, so independent driving Wiener processes\n\ntspan = np.linspace(0.0, 10.0, 10001)\nx0 = np.array([3.0, 3.0])\n\ndef f(x, t):\n    return A.dot(x)\n\ndef G(x, t):\n    return B\n\nresult = sdeint.itoint(f, G, x0, tspan)\n</pre>\n</div>\n<div id=\"references-for-these-algorithms\">\n<h2>References for these algorithms:</h2>\n<div>\n<div><tt>itoEuler</tt>:</div>\n<div>G. Maruyama (1955) Continuous Markov processes and stochastic equations</div>\n<div><tt>stratHeun</tt>:</div>\n<div>W. Rumelin (1982) Numerical Treatment of Stochastic Differential Equations</div>\n<div>R. Mannella (2002) Integration of Stochastic Differential Equations on a Computer</div>\n<div>K. Burrage, P. M. Burrage and T. Tian (2004) Numerical methods for strong solutions of stochastic differential equations: an overview</div>\n<div><tt>itoSRI2, stratSRS2</tt>:</div>\n<div>A. R\u00f6\u00dfler (2010) Runge-Kutta Methods for the Strong Approximation of Solutions of Stochastic Differential Equations</div>\n<div><tt>stratKP2iS</tt>:</div>\n<div>P. Kloeden and E. Platen (1999) Numerical Solution of Stochastic Differential Equations, revised and updated 3rd printing</div>\n<div><tt>Ikpw, Jkpw</tt>:</div>\n<div>P. Kloeden, E. Platen and I. Wright (1992) The approximation of multiple stochastic integrals</div>\n<div><tt>Iwik, Jwik</tt>:</div>\n<div>M. Wiktorsson (2001) Joint Characteristic Function and Simultaneous Simulation of Iterated Ito Integrals for Multiple Independent Brownian Motions</div>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Rewrite <tt>Iwik()</tt> and <tt>Jwik()</tt> so they don\u2019t waste so much memory.</li>\n<li>Fix <tt>stratKP2iS()</tt>. In the unit tests it is currently less accurate than <tt>itoEuler()</tt> and this is likely due to a bug.</li>\n<li>Implement the Ito version of the Kloeden and Platen two-step implicit alogrithm.</li>\n<li>Add more strong stochastic Runge-Kutta algorithms. Perhaps starting with\nBurrage and Burrage (1996)</li>\n<li>Currently prioritizing those algorithms that work for very general d-dimensional systems with arbitrary noise coefficient matrix, and which are derivative free. Eventually will add special case algorithms that give a speed increase for systems with certain symmetries. That is, 1-dimensional systems, systems with scalar noise, diagonal noise or commutative noise, etc. The idea is that <tt>itoint()</tt> and <tt>stratint()</tt> will detect these situations and dispatch to the most suitable algorithm.</li>\n<li>Eventually implement the main loops in C for speed.</li>\n<li>Some time in the dim future, implement support for stochastic delay differential equations (SDDEs).</li>\n</ul>\n</div>\n<div id=\"see-also\">\n<h2>See also:</h2>\n<p><tt>nsim</tt>: Framework that uses this <tt>sdeint</tt> library to enable massive parallel simulations of SDE systems (using multiple CPUs or a cluster) and provides some tools to analyze the resulting timeseries. <a href=\"https://github.com/mattja/nsim\" rel=\"nofollow\">https://github.com/mattja/nsim</a></p>\n</div>\n\n          </div>"}, "last_serial": 2734989, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "edae5fb2b589173ef54c196112241596", "sha256": "29b700b54c0c7b0833f9d2dc6188c56039a5f8dec00894240810dd689f51ccd1"}, "downloads": -1, "filename": "sdeint-0.2.0.tar.gz", "has_sig": false, "md5_digest": "edae5fb2b589173ef54c196112241596", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38930, "upload_time": "2015-10-30T01:34:57", "upload_time_iso_8601": "2015-10-30T01:34:57.621597Z", "url": "https://files.pythonhosted.org/packages/cf/f0/bea37bb0c162763a2bb51556d3229a8dc161e75e7e8c0f01de32e9044038/sdeint-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7f6792af3b92662cf398e9210e586f13", "sha256": "eb34d28ca2d9cd48ac1b5dcfc80c49536f045aaa93e07146bace059fa8c1c546"}, "downloads": -1, "filename": "sdeint-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7f6792af3b92662cf398e9210e586f13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40098, "upload_time": "2017-03-28T01:59:12", "upload_time_iso_8601": "2017-03-28T01:59:12.533748Z", "url": "https://files.pythonhosted.org/packages/3d/26/69946549a57a04ff033780129f3121530565998c017f4f4f06530c2a5b88/sdeint-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f6792af3b92662cf398e9210e586f13", "sha256": "eb34d28ca2d9cd48ac1b5dcfc80c49536f045aaa93e07146bace059fa8c1c546"}, "downloads": -1, "filename": "sdeint-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7f6792af3b92662cf398e9210e586f13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40098, "upload_time": "2017-03-28T01:59:12", "upload_time_iso_8601": "2017-03-28T01:59:12.533748Z", "url": "https://files.pythonhosted.org/packages/3d/26/69946549a57a04ff033780129f3121530565998c017f4f4f06530c2a5b88/sdeint-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:19 2020"}