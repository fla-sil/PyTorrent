{"info": {"author": "Micha\u0142 Kruszewski", "author_email": "mkru@protonmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "# fsva - FuseSoc Verification Automation\n\n## Introduction\n\nFuseSoc Verification Automation (fsva) is a tool that aims to automate the verification process of libraries and HDL design projects managed with [FuseSoc](https://github.com/olofk/fusesoc) build tool/system.\n\nfsva in no way duplicates or replaces functionalities provided by the FuseSoc.\nColloquially speaking, fsva is a wrapper for FuseSoc, automating the verification process.\n\n### Why?\nThe major goal is to easy integrate project/libraries described in FuseSoc into Continuous Integration workflow.\nFuseSoc is more than good for building and running single targets, however if you want to run multiple verificaiton targets it keeps rebuilding verification frameworks.\nThis particular operation is redundant and time consuming.\nfsva assumes that verification frameworks (such as [UVVM](https://github.com/UVVM/UVVM) or [OSVVM](https://github.com/OSVVM/OSVVM)) are already pre-compiled (pre-analyzed) for simulation engines.\nWhat is more, fsva extends FuseSoc by parsing verification results.\n\n## How it works\nfsva scans recursively for `.core` files and fetches all targets starting with `tb_` or ending with `_tb`.\nThen it runs these targets calling FuseSoc run command and captures stdout and stderr.\nAll verification results, as well as verification summary, are saved as separate files in a directory, which name reflects the UTC time of a verification process startup.\n\nIf any extra parsing of the verification results is needed (for example in case of metric driven verification) in the future, it will be based on prefix or suffix indicating verification framework/infrastructure.\nFor instance, for UVVM it will be `tb_uvvm_` / `_uvvm_tb`, respectively for OSVVM it will be `tb_osvvm_` / `_osvvm_tb`.\n\nIf FuseSoc supports formal verification targets in the future, they will be fetched based on `fv_` prefix or `_fv` suffix.\n\n## Installation\nLatest stable version of fsva can be installed from [PyPI](https://pypi.org/project/fsva/):\n`pip install --user fsva`.\n\n## Usage\n\n### Example\n<p align=\"center\"><img src=\"/img/demo.gif?raw=true\"/></p>\n\nYou can also run all testbench targets for single core:\n`fsva core_name`\nor run specific verification target for specific core\n`fsva core_name target_name`.\nWhen verifying single core or target, the output is printed on the console.\n\n## Note!\nIf you use it with UVVM you need to fix status that is returned when UVVM test bench fails: [Integrating UVVM with Continuous Integration - problem with simulators exit status](https://github.com/UVVM/UVVM/issues/82).\n\nMIT License\n\nCopyright (c) 2019 Micha\u0142 Kruszewski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/m-kru/fsva", "keywords": "verification", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fsva", "package_url": "https://pypi.org/project/fsva/", "platform": "", "project_url": "https://pypi.org/project/fsva/", "project_urls": {"Homepage": "https://github.com/m-kru/fsva"}, "release_url": "https://pypi.org/project/fsva/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "fsva (FuseSoc Verification Automation)", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># fsva - FuseSoc Verification Automation</p>\n<p>## Introduction</p>\n<p>FuseSoc Verification Automation (fsva) is a tool that aims to automate the verification process of libraries and HDL design projects managed with [FuseSoc](<a href=\"https://github.com/olofk/fusesoc\" rel=\"nofollow\">https://github.com/olofk/fusesoc</a>) build tool/system.</p>\n<p>fsva in no way duplicates or replaces functionalities provided by the FuseSoc.\nColloquially speaking, fsva is a wrapper for FuseSoc, automating the verification process.</p>\n<p>### Why?\nThe major goal is to easy integrate project/libraries described in FuseSoc into Continuous Integration workflow.\nFuseSoc is more than good for building and running single targets, however if you want to run multiple verificaiton targets it keeps rebuilding verification frameworks.\nThis particular operation is redundant and time consuming.\nfsva assumes that verification frameworks (such as [UVVM](<a href=\"https://github.com/UVVM/UVVM\" rel=\"nofollow\">https://github.com/UVVM/UVVM</a>) or [OSVVM](<a href=\"https://github.com/OSVVM/OSVVM\" rel=\"nofollow\">https://github.com/OSVVM/OSVVM</a>)) are already pre-compiled (pre-analyzed) for simulation engines.\nWhat is more, fsva extends FuseSoc by parsing verification results.</p>\n<p>## How it works\nfsva scans recursively for <cite>.core</cite> files and fetches all targets starting with <cite>tb_</cite> or ending with <cite>_tb</cite>.\nThen it runs these targets calling FuseSoc run command and captures stdout and stderr.\nAll verification results, as well as verification summary, are saved as separate files in a directory, which name reflects the UTC time of a verification process startup.</p>\n<p>If any extra parsing of the verification results is needed (for example in case of metric driven verification) in the future, it will be based on prefix or suffix indicating verification framework/infrastructure.\nFor instance, for UVVM it will be <cite>tb_uvvm_</cite> / <cite>_uvvm_tb</cite>, respectively for OSVVM it will be <cite>tb_osvvm_</cite> / <cite>_osvvm_tb</cite>.</p>\n<p>If FuseSoc supports formal verification targets in the future, they will be fetched based on <cite>fv_</cite> prefix or <cite>_fv</cite> suffix.</p>\n<p>## Installation\nLatest stable version of fsva can be installed from [PyPI](<a href=\"https://pypi.org/project/fsva/\" rel=\"nofollow\">https://pypi.org/project/fsva/</a>):\n<cite>pip install \u2013user fsva</cite>.</p>\n<p>## Usage</p>\n<p>### Example\n&lt;p align=\u201dcenter\u201d&gt;&lt;img src=\u201d/img/demo.gif?raw=true\u201d/&gt;&lt;/p&gt;</p>\n<p>You can also run all testbench targets for single core:\n<cite>fsva core_name</cite>\nor run specific verification target for specific core\n<cite>fsva core_name target_name</cite>.\nWhen verifying single core or target, the output is printed on the console.</p>\n<p>## Note!\nIf you use it with UVVM you need to fix status that is returned when UVVM test bench fails: [Integrating UVVM with Continuous Integration - problem with simulators exit status](<a href=\"https://github.com/UVVM/UVVM/issues/82\" rel=\"nofollow\">https://github.com/UVVM/UVVM/issues/82</a>).</p>\n<p>MIT License</p>\n<p>Copyright (c) 2019 Micha\u0142 Kruszewski</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201cSoftware\u201d), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 6338752, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "6024fa4626a50c8de14882be6bb5a4c1", "sha256": "d2b160c1266902ba0d9bde0260352a2801e8447dadcb2125dfe0b972eeca671c"}, "downloads": -1, "filename": "fsva-0.0.0-py3.7.egg", "has_sig": false, "md5_digest": "6024fa4626a50c8de14882be6bb5a4c1", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 12607, "upload_time": "2019-10-29T12:48:24", "upload_time_iso_8601": "2019-10-29T12:48:24.637263Z", "url": "https://files.pythonhosted.org/packages/ff/da/889bebe7651b25f1f3fdf1beec66a2330944552fbcc6b1efc8107510b26b/fsva-0.0.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f54d1271309b49573739e0345e0597e2", "sha256": "3efd1e1f9e9f06c654a72e582c661b3389427623b20ffccdaab75f3fd381ac75"}, "downloads": -1, "filename": "fsva-0.0.0.tar.gz", "has_sig": false, "md5_digest": "f54d1271309b49573739e0345e0597e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6144, "upload_time": "2019-10-29T11:54:15", "upload_time_iso_8601": "2019-10-29T11:54:15.356769Z", "url": "https://files.pythonhosted.org/packages/e2/b8/b865ab7283a0d67180c958c10cc3bd0170c1b9ce0dcec31f65c3b1b82dcb/fsva-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "5bf280634c3a55dae57f197023e8dcdc", "sha256": "3a967e589f96e452602ae4695ac6defaae7bf165e1282a755dcdb69dddf46edf"}, "downloads": -1, "filename": "fsva-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5bf280634c3a55dae57f197023e8dcdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7962, "upload_time": "2019-10-29T12:48:23", "upload_time_iso_8601": "2019-10-29T12:48:23.047474Z", "url": "https://files.pythonhosted.org/packages/e4/24/5e606e6143afbcf4fd9a0b16a064155411cc615241a4b3c5d140a4846abc/fsva-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f5d02d139cb8d25b8d77a89600e2c47", "sha256": "6853dd6f48cd468fff44cb2a1f09158fb670f698432041556421d8e811655a31"}, "downloads": -1, "filename": "fsva-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8f5d02d139cb8d25b8d77a89600e2c47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6260, "upload_time": "2019-10-29T12:45:01", "upload_time_iso_8601": "2019-10-29T12:45:01.646572Z", "url": "https://files.pythonhosted.org/packages/ce/d5/1174ae4b9e186da9cab3437a8b6ee3cda0617483e79cd6d5d03fea3b93b3/fsva-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9ee84cbe3f84bf0274d650f857a41aa0", "sha256": "706a404797001e775396c0078c127214121306e0bea4187330b40cf782ee8664"}, "downloads": -1, "filename": "fsva-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9ee84cbe3f84bf0274d650f857a41aa0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7965, "upload_time": "2019-10-29T12:49:06", "upload_time_iso_8601": "2019-10-29T12:49:06.194283Z", "url": "https://files.pythonhosted.org/packages/78/38/fe64573e6a107a60a883703220928ec8a3a58994f6270ba34a2817a0976b/fsva-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1156c01cb4b2ca760bddad6ef72c8b40", "sha256": "3fc1be262d9d7a7a0bb6d8b9aa870eef1c10dc74f0e6e95c2582d05a31eab228"}, "downloads": -1, "filename": "fsva-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1156c01cb4b2ca760bddad6ef72c8b40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6578, "upload_time": "2019-12-20T12:36:47", "upload_time_iso_8601": "2019-12-20T12:36:47.629225Z", "url": "https://files.pythonhosted.org/packages/92/65/24d955291a4f42987a5a11bf9414ca916383df343721833754d386aff4d2/fsva-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1156c01cb4b2ca760bddad6ef72c8b40", "sha256": "3fc1be262d9d7a7a0bb6d8b9aa870eef1c10dc74f0e6e95c2582d05a31eab228"}, "downloads": -1, "filename": "fsva-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1156c01cb4b2ca760bddad6ef72c8b40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6578, "upload_time": "2019-12-20T12:36:47", "upload_time_iso_8601": "2019-12-20T12:36:47.629225Z", "url": "https://files.pythonhosted.org/packages/92/65/24d955291a4f42987a5a11bf9414ca916383df343721833754d386aff4d2/fsva-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:00 2020"}