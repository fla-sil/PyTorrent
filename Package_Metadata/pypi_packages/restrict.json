{"info": {"author": "BTaskaya", "author_email": "batuhanosmantaskaya@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Restrict\nRestrict python methods \n\n# Example 1\n```py\nfrom restrict import *\nimport builtins\nr = Restrictor()\nrestriction = Restriction(\n    builtins, ['__import__', '__build_class__'], Access.BY_CASE\n)\nr.restrict(restriction)\n\nwith case(hash(id(restriction))) as ensured_call:\n    collections = ensured_call(builtins.__import__, 'collections')\n    Y = ensured_call(builtins.__build_class__, lambda: ..., 'Y')\n    assert isinstance(Y, type)\n    \nprint(collections.defaultdict(list))\ntry:\n    import math\nexcept CaseError:\n    print('Case error on import')\n    \ntry:\n    class X:\n        pass\nexcept CaseError:\n    print('Case error on build class')\n\n```\nOutput\n```\ndefaultdict(<class 'list'>, {})\nCase error on import\nCase error on build class\n```\n# Example 2\n```py\nfrom restrict import *\n\n\nclass TaskManager:\n    def __init__(self):\n        self.tasks = {}\n\n    def add_task(self, task: str, *items):\n        self.tasks[task] = items\n\n    def pop_task(self):\n        return self.tasks.popitem()\n\n    def get_tasks(self, task: str):\n        return self.tasks[task]\n\n    def add(self, x1, x2):\n        return x1 + x2\n\n\nrestrictor = Restrictor()\n\n```\n### By Case\n```py\nrestriction = Restriction(\n    TaskManager, [\"add_task\", \"pop_task\", TaskManager.get_tasks, \"add\"], Access.BY_CASE\n)\nrestrictor.restrict(restriction)\nt = TaskManager()\ntry:\n    t.add(3, 2)\nexcept CaseError:\n    print(\"A case error just occured\")\n\nwith case(hash(id(restriction))) as ensured_call:\n    z = ensured_call(t.add, 3, 2)\n    assert z == 5\n```\nOutput\n```\nA case error just occured\n```\n### By Owner\n```\nrestrictor = Restrictor()\nrestriction = Restriction(\n    TaskManager, [\"add_task\", \"pop_task\", TaskManager.get_tasks, \"add\"], Access.BY_OWNER\n)\nrestrictor.restrict(restriction)\nt = TaskManager()\nt.add_task(\"a\", \"b\")\ny = t.add(3, 2)\nassert y == 5\ntry:\n    z = TaskManager.add(object(), 3, 2)\n    assert z == 5\nexcept OwnerError as exc:\n    print(\"An owner error just occured\")\n```\nOutput\n```\nAn owner error just occured\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/btaskaya/restrict", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "restrict", "package_url": "https://pypi.org/project/restrict/", "platform": "", "project_url": "https://pypi.org/project/restrict/", "project_urls": {"Homepage": "https://github.com/btaskaya/restrict"}, "release_url": "https://pypi.org/project/restrict/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Restrict python methods", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Restrict</h1>\n<p>Restrict python methods</p>\n<h1>Example 1</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">restrict</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">builtins</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Restrictor</span><span class=\"p\">()</span>\n<span class=\"n\">restriction</span> <span class=\"o\">=</span> <span class=\"n\">Restriction</span><span class=\"p\">(</span>\n    <span class=\"n\">builtins</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'__import__'</span><span class=\"p\">,</span> <span class=\"s1\">'__build_class__'</span><span class=\"p\">],</span> <span class=\"n\">Access</span><span class=\"o\">.</span><span class=\"n\">BY_CASE</span>\n<span class=\"p\">)</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">restrict</span><span class=\"p\">(</span><span class=\"n\">restriction</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">case</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">restriction</span><span class=\"p\">)))</span> <span class=\"k\">as</span> <span class=\"n\">ensured_call</span><span class=\"p\">:</span>\n    <span class=\"n\">collections</span> <span class=\"o\">=</span> <span class=\"n\">ensured_call</span><span class=\"p\">(</span><span class=\"n\">builtins</span><span class=\"o\">.</span><span class=\"n\">__import__</span><span class=\"p\">,</span> <span class=\"s1\">'collections'</span><span class=\"p\">)</span>\n    <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">ensured_call</span><span class=\"p\">(</span><span class=\"n\">builtins</span><span class=\"o\">.</span><span class=\"n\">__build_class__</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"s1\">'Y'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">)</span>\n    \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"k\">except</span> <span class=\"n\">CaseError</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Case error on import'</span><span class=\"p\">)</span>\n    \n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">class</span> <span class=\"nc\">X</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n<span class=\"k\">except</span> <span class=\"n\">CaseError</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Case error on build class'</span><span class=\"p\">)</span>\n</pre>\n<p>Output</p>\n<pre><code>defaultdict(&lt;class 'list'&gt;, {})\nCase error on import\nCase error on build class\n</code></pre>\n<h1>Example 2</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">restrict</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TaskManager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">items</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">task</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">items</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">pop_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">popitem</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_tasks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">task</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x1</span> <span class=\"o\">+</span> <span class=\"n\">x2</span>\n\n\n<span class=\"n\">restrictor</span> <span class=\"o\">=</span> <span class=\"n\">Restrictor</span><span class=\"p\">()</span>\n</pre>\n<h3>By Case</h3>\n<pre><span class=\"n\">restriction</span> <span class=\"o\">=</span> <span class=\"n\">Restriction</span><span class=\"p\">(</span>\n    <span class=\"n\">TaskManager</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"add_task\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pop_task\"</span><span class=\"p\">,</span> <span class=\"n\">TaskManager</span><span class=\"o\">.</span><span class=\"n\">get_tasks</span><span class=\"p\">,</span> <span class=\"s2\">\"add\"</span><span class=\"p\">],</span> <span class=\"n\">Access</span><span class=\"o\">.</span><span class=\"n\">BY_CASE</span>\n<span class=\"p\">)</span>\n<span class=\"n\">restrictor</span><span class=\"o\">.</span><span class=\"n\">restrict</span><span class=\"p\">(</span><span class=\"n\">restriction</span><span class=\"p\">)</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">TaskManager</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">CaseError</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"A case error just occured\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">case</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">restriction</span><span class=\"p\">)))</span> <span class=\"k\">as</span> <span class=\"n\">ensured_call</span><span class=\"p\">:</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">ensured_call</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">z</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n</pre>\n<p>Output</p>\n<pre><code>A case error just occured\n</code></pre>\n<h3>By Owner</h3>\n<pre><code>restrictor = Restrictor()\nrestriction = Restriction(\n    TaskManager, [\"add_task\", \"pop_task\", TaskManager.get_tasks, \"add\"], Access.BY_OWNER\n)\nrestrictor.restrict(restriction)\nt = TaskManager()\nt.add_task(\"a\", \"b\")\ny = t.add(3, 2)\nassert y == 5\ntry:\n    z = TaskManager.add(object(), 3, 2)\n    assert z == 5\nexcept OwnerError as exc:\n    print(\"An owner error just occured\")\n</code></pre>\n<p>Output</p>\n<pre><code>An owner error just occured\n</code></pre>\n\n          </div>"}, "last_serial": 4936146, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ece292572828b30c8f830ea5484cf77f", "sha256": "ebae59d486f1abd286e6eeaad03b4c0e6424ecebd6c40ec22fc99315676d46e6"}, "downloads": -1, "filename": "restrict-0.1.tar.gz", "has_sig": false, "md5_digest": "ece292572828b30c8f830ea5484cf77f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 651, "upload_time": "2019-03-12T14:32:05", "upload_time_iso_8601": "2019-03-12T14:32:05.275246Z", "url": "https://files.pythonhosted.org/packages/91/3e/d43c136b9f2caca9de2b503b2822791ef2e48d44dbe0e1704bc964807370/restrict-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ea30cb032c00cc8a6a80f0eef4b719f3", "sha256": "6dfb3ea963635ac12a7544438a9e8dead19628049d19a3b33abbd227b277bb5f"}, "downloads": -1, "filename": "restrict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ea30cb032c00cc8a6a80f0eef4b719f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2827, "upload_time": "2019-03-13T19:30:08", "upload_time_iso_8601": "2019-03-13T19:30:08.289837Z", "url": "https://files.pythonhosted.org/packages/3f/31/9917ea4d9086b450b04fa8e9916f4a87fc6cf18e0566a37b2c4b60f6cff1/restrict-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a944d5e8222e88b5990d3b5a5005796e", "sha256": "2434b82b013490bdff9e2486da3135311c486717b28445daf1ad9cb7bf68a22b"}, "downloads": -1, "filename": "restrict-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a944d5e8222e88b5990d3b5a5005796e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3865, "upload_time": "2019-03-13T19:30:39", "upload_time_iso_8601": "2019-03-13T19:30:39.418868Z", "url": "https://files.pythonhosted.org/packages/7e/df/3ff37cbaa50246a62043eceabff718925f8b11888337e71ec3668f29b5d2/restrict-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b5936182c3ce48bd13ee7b9e647976b1", "sha256": "ab826d306e9051dab4b229af0eda4ab6f2279d778cc1271450ce1a468e44feb0"}, "downloads": -1, "filename": "restrict-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b5936182c3ce48bd13ee7b9e647976b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3814, "upload_time": "2019-03-13T19:33:14", "upload_time_iso_8601": "2019-03-13T19:33:14.117458Z", "url": "https://files.pythonhosted.org/packages/e5/98/66c625b5cb127e42969f7a0f5196dd2d56ed27644aaaa839a5b1638cb828/restrict-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b5936182c3ce48bd13ee7b9e647976b1", "sha256": "ab826d306e9051dab4b229af0eda4ab6f2279d778cc1271450ce1a468e44feb0"}, "downloads": -1, "filename": "restrict-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b5936182c3ce48bd13ee7b9e647976b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3814, "upload_time": "2019-03-13T19:33:14", "upload_time_iso_8601": "2019-03-13T19:33:14.117458Z", "url": "https://files.pythonhosted.org/packages/e5/98/66c625b5cb127e42969f7a0f5196dd2d56ed27644aaaa839a5b1638cb828/restrict-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:32 2020"}