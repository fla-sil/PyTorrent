{"info": {"author": "Bridge", "author_email": "info@bridgecorp.com", "bugtrack_url": null, "classifiers": [], "description": "# workfront-bridge\n\nWorkfront Bridge is a library that make the creation of bridge projects in\nworkfront easily.\n\n## Design\n\nProjects and tasks in workfront have custom forms. Those custom forms have\nseveral parameters which are fullfill when the project is created(some other\nparameters are being fullfilled while the project is developed and task are\nbeing excetuted).\n\nThe library tries to divide and group logical blocks of tasks that can be\nconvined to build a workfront project.\nSo, in order to achieve this, two main abstractions are provided:\n\n* Project Containers\n* Blocks\n\n### Workfront Blocks\n\nA Block is a group of one or more task that live inside a workfront template\nproject.\nEach particular block must knows its tasks, the parameters of them and the\ndependencies among them so it can instantiate and configure them without\ndifficulties.\nThe fact that the tasks live inside a workfront template project is just a\nconvinient way of storing them(workfront does not allow to define a group of\ntemplate task out of a template project).\n\n### Workfront Project Containers\n\nProject Containers represents empty workfront project templates associated with\none or more custom forms that can allocate different blocks.\nThe idea of these project containers is to build different project types by\nadding different type of blocks to it.\nSo, basically a workfront project will be constructed by creating a project\ncontainer, setting the corresponding parameters to it and appending blocks to\nthe project container according to the behaviour that is needed for that\nproject. In this process, the parameters for the different blocks will be also\nset.\n\n## Creating Blocks\n\nInherit from **WFBlock** class to create a new specific block. A Workfront\nservice and a template id needs to be provided to the WFBlock constructor. The\ntemplate id must have only the tasks that belongs to this block.\nAlso fields can be marked as optional and required to be automatically validated\nwhen a new project is being constructed with this block.\n\nFor example, supose you want to add a block with 1 task:\n* My task : which has 2 parameters; name (required) and age (optional)\n\nHere it is an example of how you would make the block representing that task:\n\n```python\nclass MyWFBlock(WFBlock):\n    def __init__(self, wf):\n        template_id = template_id_from_name(wf, \"My block template\")\n        super(WFEmailTestSeedBlock, self).__init__(wf, template_id)\n        self._set_required_fields([\"name\"])\n        self._set_optional_fields([\"age\"])\n```\n\nIn order to set the concrete values for those parameters the\n**set_task_param_value** method must be used.\nThe **set_task_param_value** receives a **task identifier** (that can be an\ninteger, indicating the number of the task in the template project, or a string\nfor the name of the task).\nProperties can be utilize for a clean design:\n\n```python\n@property\ndef name(self):\n    return self._name\n\n@name.setter\ndef name(self, value):\n    self.name = value\n    self.set_task_param_value(\"My task\", \"name\", value)\n```\n\nThe purpose of using the **set_task_param_value** is that when the block is used\ninside a project container and a workfront project is build, the block knows\nhow to configure the value in the group of task represented by this block.\n\n### Starter task\n\nEach block has as default starter task the first task. However this can be\nchanged by using the **_set_starter_task(task_identifier)** method when\ninheriting from WFBlock.\nThis can be handy when having indentation task that only organize task. So, for\nexample if you have the following tasks in the block:\n\n* Grouping Task\n  * Task 1\n  * Task 2\n\nYou should set the Task 1 as a starter task skipping the Grouping Task that only\ngives some visual clarity indenting Task 1 and 2.\nWhy ? This is required when for example Task 1 is Automatic. The workfront proxy\nonly starts Automatic tasks when they are a direct predecessor of a completed\ntask.\nSo, in this case, when the predecessor of Grouping task is complete (and\nstarter task is the Grouping Task), Task 1 will not start (because Grouping Task\npredecessor is an indirect predecessor of Task 1). So to avoid that, Task 1\nmust be set as starter task.\nThis can be achieved in the constructor of the block like this :\n\n```python\n    def __init(...)\n        # Other blcok stuff...\n        self._set_starter_task(2) # Task 1 is the second task\n        # or you can set it by name\n        self._set_starter_task(\"Task 1\")\n```\n\n## Creating Project Containers\n\nTo create a project container the new block should inherit from\n**WFProjectContainer**.\nAfter that, the template id of the workfront template project and the required\nand optional parameters should be provided. This can be done calling the parent\nconstructor and the methods **_set_required_fields** and\n**_set_optional_fields** (you can make use of the **template_id_from_name**\nfunction to get the template id):\n\n```python\nclass MyWFProjectContainer(WFProjectContainer)\n    def __init__(self, wf, prj_name):\n        tid = template_id_from_name(wf, \"My WF Template\")\n        super(MyWFProjectContainer, self).__init__(wf, tid, prj_name)\n        self._set_required_fields([\"workfront_param_value_req\"])\n        self._set_optional_fields([\"workfront_param_value_optional\"])\n```\n\nThen you can set the variables that will fullfill the parameter values of the\nproject calling the **set_param_value** method. For example:\n\n```python\n@property\ndef my_param_value(self):\n    return self._my_param_value\n\n@email_subject.setter\ndef my_param_value(self, v):\n    self._my_param_value = v\n    self.set_param_value(\"workfront_param_value_req\", v)\n```\n\nYou can check the **WFProjectEmailContainer** in workfront_bridge.projects.email\nfor a complete example.\n\n### Using Blocks inside a Project Container\n\nBlocks are made to be appended to a project container. A project container can\nhave one or more blocks of the same type.\nWhen adding a block to a project container, the block is appended to the project\nmaking this new block, dependent of the last added block. So for example, if\nblock1, block2, block3 are appended to the same project block in that order,\nthe workfront project will be created so that the starter task in block2 will\nonly be excetuted when the last task in block1 is completed. The same happens to\nblock3; the starter task created that belongs to block3 will only start after\nthe last task from block2 finishes.\n\nThe project container does not have any restriction in the order that the blocks\nare added to the project block, it is the user responsability to add the blocks\nin an order that has some logic.\n\nWe recommend using project builders in order to make life easier for those who\nwant to create workfront projects using this library. This allows user to\nre-use the code logic used to create particular workfront projects.\n\n## Using Project Builders\n\nTo easily create projects you can use project builders. Project builders provide\na simple interface with setters to create different projects structures.\n\nSo for example, to create a simple email project with 2 test list and 1 seed\nlist you will do something similar to this:\n\n```python\nfrom workfront.workfront import Workfront\nfrom workfront_bridge.projects.email_builder import EmailProjectBuilder\n\n# Create a Workfront Service object (using the workfront-sdk)\nwf = Workfront(\"email@wf.bridgemarketing.com\", \"pass***\")\nwf.login()\n\n# A project builder needs a Workfront service and a name to be constructed\nbuilder = EmailProjectBuilder(wf, \"Project Test Name\")\n\n# Then, the subject and a html is needed to be validated:\nbuilder.set_html(\"s3://some/s3/path/creative.html\")\n       .set_subject(\"This is the subject!\")\n# In the case of email builder you can use a zip to construct the html. In that\n# case you will use this:\n# b.set_html_zip(\"s3://some/s3/path/creative.zip\")\n\n# Then, add two test list and a live seed list\nbuilder.add_test_list(\"s3://some/s3/test_list1.csv\")\n       .add_test_list(\"s3://some/s3/test_list2.csv\")\n       .set_seed_list(\"s3://some/s3/live_seed_list.csv)\n\n# Finally, build and obtain the Workfront project\nwf_project = b.build()\n# When calling build a WFBrigeException can arise telling you if some\n# parameters are missing, or something is wrong.\n```\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BridgeMarketing/workfront-bridge", "keywords": "", "license": "bridgecorp", "maintainer": "", "maintainer_email": "", "name": "workfront-bridge", "package_url": "https://pypi.org/project/workfront-bridge/", "platform": "", "project_url": "https://pypi.org/project/workfront-bridge/", "project_urls": {"Homepage": "https://github.com/BridgeMarketing/workfront-bridge"}, "release_url": "https://pypi.org/project/workfront-bridge/0.1/", "requires_dist": null, "requires_python": "", "summary": "Workfront Bridge Project Library for Python", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # workfront-bridge<br><br>Workfront Bridge is a library that make the creation of bridge projects in<br>workfront easily.<br><br>## Design<br><br>Projects and tasks in workfront have custom forms. Those custom forms have<br>several parameters which are fullfill when the project is created(some other<br>parameters are being fullfilled while the project is developed and task are<br>being excetuted).<br><br>The library tries to divide and group logical blocks of tasks that can be<br>convined to build a workfront project.<br>So, in order to achieve this, two main abstractions are provided:<br><br>* Project Containers<br>* Blocks<br><br>### Workfront Blocks<br><br>A Block is a group of one or more task that live inside a workfront template<br>project.<br>Each particular block must knows its tasks, the parameters of them and the<br>dependencies among them so it can instantiate and configure them without<br>difficulties.<br>The fact that the tasks live inside a workfront template project is just a<br>convinient way of storing them(workfront does not allow to define a group of<br>template task out of a template project).<br><br>### Workfront Project Containers<br><br>Project Containers represents empty workfront project templates associated with<br>one or more custom forms that can allocate different blocks.<br>The idea of these project containers is to build different project types by<br>adding different type of blocks to it.<br>So, basically a workfront project will be constructed by creating a project<br>container, setting the corresponding parameters to it and appending blocks to<br>the project container according to the behaviour that is needed for that<br>project. In this process, the parameters for the different blocks will be also<br>set.<br><br>## Creating Blocks<br><br>Inherit from **WFBlock** class to create a new specific block. A Workfront<br>service and a template id needs to be provided to the WFBlock constructor. The<br>template id must have only the tasks that belongs to this block.<br>Also fields can be marked as optional and required to be automatically validated<br>when a new project is being constructed with this block.<br><br>For example, supose you want to add a block with 1 task:<br>* My task : which has 2 parameters; name (required) and age (optional)<br><br>Here it is an example of how you would make the block representing that task:<br><br>```python<br>class MyWFBlock(WFBlock):<br>    def __init__(self, wf):<br>        template_id = template_id_from_name(wf, \"My block template\")<br>        super(WFEmailTestSeedBlock, self).__init__(wf, template_id)<br>        self._set_required_fields([\"name\"])<br>        self._set_optional_fields([\"age\"])<br>```<br><br>In order to set the concrete values for those parameters the<br>**set_task_param_value** method must be used.<br>The **set_task_param_value** receives a **task identifier** (that can be an<br>integer, indicating the number of the task in the template project, or a string<br>for the name of the task).<br>Properties can be utilize for a clean design:<br><br>```python<br>@property<br>def name(self):<br>    return self._name<br><br>@name.setter<br>def name(self, value):<br>    self.name = value<br>    self.set_task_param_value(\"My task\", \"name\", value)<br>```<br><br>The purpose of using the **set_task_param_value** is that when the block is used<br>inside a project container and a workfront project is build, the block knows<br>how to configure the value in the group of task represented by this block.<br><br>### Starter task<br><br>Each block has as default starter task the first task. However this can be<br>changed by using the **_set_starter_task(task_identifier)** method when<br>inheriting from WFBlock.<br>This can be handy when having indentation task that only organize task. So, for<br>example if you have the following tasks in the block:<br><br>* Grouping Task<br>  * Task 1<br>  * Task 2<br><br>You should set the Task 1 as a starter task skipping the Grouping Task that only<br>gives some visual clarity indenting Task 1 and 2.<br>Why ? This is required when for example Task 1 is Automatic. The workfront proxy<br>only starts Automatic tasks when they are a direct predecessor of a completed<br>task.<br>So, in this case, when the predecessor of Grouping task is complete (and<br>starter task is the Grouping Task), Task 1 will not start (because Grouping Task<br>predecessor is an indirect predecessor of Task 1). So to avoid that, Task 1<br>must be set as starter task.<br>This can be achieved in the constructor of the block like this :<br><br>```python<br>    def __init(...)<br>        # Other blcok stuff...<br>        self._set_starter_task(2) # Task 1 is the second task<br>        # or you can set it by name<br>        self._set_starter_task(\"Task 1\")<br>```<br><br>## Creating Project Containers<br><br>To create a project container the new block should inherit from<br>**WFProjectContainer**.<br>After that, the template id of the workfront template project and the required<br>and optional parameters should be provided. This can be done calling the parent<br>constructor and the methods **_set_required_fields** and<br>**_set_optional_fields** (you can make use of the **template_id_from_name**<br>function to get the template id):<br><br>```python<br>class MyWFProjectContainer(WFProjectContainer)<br>    def __init__(self, wf, prj_name):<br>        tid = template_id_from_name(wf, \"My WF Template\")<br>        super(MyWFProjectContainer, self).__init__(wf, tid, prj_name)<br>        self._set_required_fields([\"workfront_param_value_req\"])<br>        self._set_optional_fields([\"workfront_param_value_optional\"])<br>```<br><br>Then you can set the variables that will fullfill the parameter values of the<br>project calling the **set_param_value** method. For example:<br><br>```python<br>@property<br>def my_param_value(self):<br>    return self._my_param_value<br><br>@email_subject.setter<br>def my_param_value(self, v):<br>    self._my_param_value = v<br>    self.set_param_value(\"workfront_param_value_req\", v)<br>```<br><br>You can check the **WFProjectEmailContainer** in workfront_bridge.projects.email<br>for a complete example.<br><br>### Using Blocks inside a Project Container<br><br>Blocks are made to be appended to a project container. A project container can<br>have one or more blocks of the same type.<br>When adding a block to a project container, the block is appended to the project<br>making this new block, dependent of the last added block. So for example, if<br>block1, block2, block3 are appended to the same project block in that order,<br>the workfront project will be created so that the starter task in block2 will<br>only be excetuted when the last task in block1 is completed. The same happens to<br>block3; the starter task created that belongs to block3 will only start after<br>the last task from block2 finishes.<br><br>The project container does not have any restriction in the order that the blocks<br>are added to the project block, it is the user responsability to add the blocks<br>in an order that has some logic.<br><br>We recommend using project builders in order to make life easier for those who<br>want to create workfront projects using this library. This allows user to<br>re-use the code logic used to create particular workfront projects.<br><br>## Using Project Builders<br><br>To easily create projects you can use project builders. Project builders provide<br>a simple interface with setters to create different projects structures.<br><br>So for example, to create a simple email project with 2 test list and 1 seed<br>list you will do something similar to this:<br><br>```python<br>from workfront.workfront import Workfront<br>from workfront_bridge.projects.email_builder import EmailProjectBuilder<br><br># Create a Workfront Service object (using the workfront-sdk)<br>wf = Workfront(\"email@wf.bridgemarketing.com\", \"pass***\")<br>wf.login()<br><br># A project builder needs a Workfront service and a name to be constructed<br>builder = EmailProjectBuilder(wf, \"Project Test Name\")<br><br># Then, the subject and a html is needed to be validated:<br>builder.set_html(\"s3://some/s3/path/creative.html\")<br>       .set_subject(\"This is the subject!\")<br># In the case of email builder you can use a zip to construct the html. In that<br># case you will use this:<br># b.set_html_zip(\"s3://some/s3/path/creative.zip\")<br><br># Then, add two test list and a live seed list<br>builder.add_test_list(\"s3://some/s3/test_list1.csv\")<br>       .add_test_list(\"s3://some/s3/test_list2.csv\")<br>       .set_seed_list(\"s3://some/s3/live_seed_list.csv)<br><br># Finally, build and obtain the Workfront project<br>wf_project = b.build()<br># When calling build a WFBrigeException can arise telling you if some<br># parameters are missing, or something is wrong.<br>```<br>\n          </div>"}, "last_serial": 4223706, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7a4179f2716c27641fc6da9bb2c5096b", "sha256": "153e0ca19a528bae3fcd65f8fe81d80e87fdfb3f90fb136a8fa73e0c1e6efd60"}, "downloads": -1, "filename": "workfront-bridge-0.1.tar.gz", "has_sig": false, "md5_digest": "7a4179f2716c27641fc6da9bb2c5096b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11543, "upload_time": "2018-08-30T19:17:47", "upload_time_iso_8601": "2018-08-30T19:17:47.575383Z", "url": "https://files.pythonhosted.org/packages/9d/82/b2d23403caa87404522a5c402ebcf5b7c081b450aff52f3368965d420b35/workfront-bridge-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a4179f2716c27641fc6da9bb2c5096b", "sha256": "153e0ca19a528bae3fcd65f8fe81d80e87fdfb3f90fb136a8fa73e0c1e6efd60"}, "downloads": -1, "filename": "workfront-bridge-0.1.tar.gz", "has_sig": false, "md5_digest": "7a4179f2716c27641fc6da9bb2c5096b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11543, "upload_time": "2018-08-30T19:17:47", "upload_time_iso_8601": "2018-08-30T19:17:47.575383Z", "url": "https://files.pythonhosted.org/packages/9d/82/b2d23403caa87404522a5c402ebcf5b7c081b450aff52f3368965d420b35/workfront-bridge-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:51 2020"}