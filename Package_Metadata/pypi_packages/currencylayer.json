{"info": {"author": "Said Ali", "author_email": "said.ali@msn.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "currencylayer\n=============\n.. image:: https://img.shields.io/pypi/v/currencylayer.svg\n:target: https://pypi.python.org/pypi/currencylayer\n    :alt: Latest PyPI version\n\n        Python API client for currencylayer. This library supports all API access provide by currencylayer. Check https://currencylayer.com/documentation for more info.\n        This package is compatible with Python 2.7, 3.0 to 3.5\n\nBasic Use\n---------\nTo use currencylayer, you must first create a `Client` instance,\npassing the access key id you obtained when you registered\nwith currencylayer:\n\n.. code:: python\n\n    import currencylayer\n    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)\n    exchange_rate.currencies()\n    e.g response\n        {\n            \"terms\": \"https://currencylayer.com/terms\",\n            \"privacy\": \"https://currencylayer.com/privacy\",\n            \"timestamp\": 1430401802,\n            \"source\": \"USD\",\n            \"quotes\": {\n            \"USDAED\": 3.672982,\n            \"USDAFN\": 57.8936,\n             [...]\n             }\n        }\n\nLive Rates\n---------\nTo get live rates, Call live_rates method and pass optional currency\n\n.. code:: python\n\n    import currencylayer\n    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)\n    exchange_rate.live_rates(base_currency='GBP')\n    e.g response\n        {\n            \"success\": true,\n            \"terms\": \"https://currencylayer.com/terms\",\n            \"privacy\": \"https://currencylayer.com/privacy\",\n            \"timestamp\": 1430068515,\n            \"source\": \"GBP\",\n            \"quotes\": {\n            \"GBPAED\": 5.578448,\n            \"GBPAFN\": 87.869413,\n            \"GBPALL\": 196.414724,\n            \"GBPAMD\": 719.087298,\n            \"GBPANG\": 2.717836,\n            \"GBPAOA\": 165.601846,\n            \"GBPARS\": 13.514458,\n            \"GBPAUD\": 1.941526,\n            [...]\n            }\n        }\n\nLive Rates for Specific Currencies\n---------\nTo get live rates, for specific currencies Call live_rates_for method and pass optional array of currencies e.g ['EUR', 'GBP', 'AED'] and and optional base currency\n\n.. code:: python\n\n    import currencylayer\n    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)\n    exchange_rate.live_rates_for(currencies=['AUD','CHF','EUR','GBP','PLN'], base_currency='USD')\n    e.g response\n        {\n            \"success\": true,\n            \"terms\": \"https://currencylayer.com/terms\",\n            \"privacy\": \"https://currencylayer.com/privacy\",\n            \"timestamp\": 1430068515,\n            \"source\": \"USD\",\n            \"quotes\": {\n            \"USDAUD\": 1.278384,\n            \"USDCHF\": 0.953975,\n            \"USDEUR\": 0.919677,\n            \"USDGBP\": 0.658443,\n            \"USDPLN\": 3.713873\n            }\n        }\n\nHistorical Rates\n---------\nTo get historical rates, Call historical method and pass date and currency. If no date or currency is provided current date and USD is used. Date format required is YEAR-MONTH-DAY\n\n.. code:: python\n\n    import currencylayer\n    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)\n    exchange_rate.historical(date='2005-02-01', base_currency='USD')\n    e.g response\n        {\n          \"success\": true,\n          \"terms\": \"https://currencylayer.com/terms\",\n          \"privacy\": \"https://currencylayer.com/privacy\",\n          \"historical\": true,\n          \"date\": \"2005-02-01\",\n          \"timestamp\": 1107302399,\n          \"source\": \"USD\",\n          \"quotes\": {\n            \"USDAED\": 3.67266,\n            \"USDALL\": 96.848753,\n            \"USDAMD\": 475.798297,\n            \"USDANG\": 1.790403,\n            \"USDARS\": 2.918969,\n            \"USDAUD\": 1.293878,\n            [...]\n          }\n        }\n\n\nCurrency Conversion\n---------\nTo convert rate from one currency to another, Call convert method and pass three required parameters. from_currency, to_currency, amount and optional date.\n\n.. code:: python\n\n    import currencylayer\n    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)\n    exchange_rate.convert(from_currency='USD', to_currency='GBP', amount=10)\n    e.g response\n        {\n          \"success\": true,\n          \"terms\": \"https://currencylayer.com/terms\",\n          \"privacy\": \"https://currencylayer.com/privacy\",\n          \"query\": {\n            \"from\": \"USD\",\n            \"to\": \"GBP\",\n            \"amount\": 10\n          },\n          \"info\": {\n            \"timestamp\": 1430068515,\n            \"quote\": 0.658443\n          },\n          \"result\": 6.58443\n        }\n\nTime-Frame Queries\n---------\nTo request historical exchange rates for a time-period of your choice call timeframe function pass three required parameters. start_date, end_date, currencies which must be a list  and optional date.\n\n.. code:: python\n\n    import currencylayer\n    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)\n    exchange_rate.timeframe(start_date='2010-03-01', end_date='2010-04-01', currencies=['USD', 'GBP', 'EUR'])\n    e.g response\n        {\n          \"success\": true,\n          \"terms\": \"https://currencylayer.com/terms\",\n          \"privacy\": \"https://currencylayer.com/privacy\",\n          \"timeframe\": true,\n          \"start_date\": \"2010-03-01\",\n          \"end_date\": \"2010-04-01\",\n          \"source\": \"USD\",\n          \"quotes\": {\n            \"2010-03-01\": {\n              \"USDUSD\": 1,\n              \"USDGBP\": 0.668525,\n              \"USDEUR\": 0.738541\n            },\n            \"2010-03-02\": {\n              \"USDUSD\": 1,\n              \"USDGBP\": 0.668827,\n              \"USDEUR\": 0.736145\n            },\n            [...]\n          }\n        }\n\nCurrency-Change Queries\n---------\nTo request the change (both margin and percentage) of one or more currencies, relative to a Source Currency, within a specific time-frame (optional).\nCall change_queries and pass three required parameters. start_date, end_date, currencies which must be a list and optional base_currency\n\n.. code:: python\n\n    import currencylayer\n    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)\n    exchange_rate.change_queries(start_date='2010-03-01', end_date='2010-04-01', currencies=['AUD','EUR','MXN'])\n    e.g response\n        {\n          \"success\":true,\n          \"terms\":\"https:\\/\\/currencylayer.com\\/terms\",\n          \"privacy\":\"https:\\/\\/currencylayer.com\\/privacy\",\n          \"change\":true,\n          \"start_date\":\"2005-01-01\",\n          \"end_date\":\"2010-01-01\",\n          \"source\":\"USD\",\n          \"quotes\":{\n            \"USDAUD\":{\n              \"start_rate\":1.28124,\n              \"end_rate\":1.108613,\n              \"change\":-0.1726,\n              \"change_pct\":-13.4734\n            },\n            \"USDEUR\":{\n              \"start_rate\":0.73618,\n              \"end_rate\":0.697257,\n              \"change\":-0.0389,\n              \"change_pct\":-5.2872\n            },\n            \"USDMXN\":{\n              \"start_rate\":11.149366,\n              \"end_rate\":13.108761,\n              \"change\":1.9594,\n              \"change_pct\":17.574\n            }\n          }\n        }\n\nUnit Test\n---------\nTo run unit test:\n\n.. code:: python\n\n    python test.py\n\n\n\nInstallation\n============\n\nInstall the latest release with:\n\n::\n\n    pip install currencylayer\n\n\nCompatibility\n-------------\nPython 2.7, 3.0 to 3.5\n\n\nAuthors\n-------\n\n`currencylayer` was written by `Said Ali <said.ali@msn.com>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Said007/currencylayer", "keywords": "currency,currencylayer,exchangerate,rates", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "currencylayer", "package_url": "https://pypi.org/project/currencylayer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/currencylayer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Said007/currencylayer"}, "release_url": "https://pypi.org/project/currencylayer/1.0/", "requires_dist": null, "requires_python": null, "summary": "currencylayer python API client", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            currencylayer<br>=============<br>.. image:: https://img.shields.io/pypi/v/currencylayer.svg<br>:target: https://pypi.python.org/pypi/currencylayer<br>    :alt: Latest PyPI version<br><br>        Python API client for currencylayer. This library supports all API access provide by currencylayer. Check https://currencylayer.com/documentation for more info.<br>        This package is compatible with Python 2.7, 3.0 to 3.5<br><br>Basic Use<br>---------<br>To use currencylayer, you must first create a `Client` instance,<br>passing the access key id you obtained when you registered<br>with currencylayer:<br><br>.. code:: python<br><br>    import currencylayer<br>    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)<br>    exchange_rate.currencies()<br>    e.g response<br>        {<br>            \"terms\": \"https://currencylayer.com/terms\",<br>            \"privacy\": \"https://currencylayer.com/privacy\",<br>            \"timestamp\": 1430401802,<br>            \"source\": \"USD\",<br>            \"quotes\": {<br>            \"USDAED\": 3.672982,<br>            \"USDAFN\": 57.8936,<br>             [...]<br>             }<br>        }<br><br>Live Rates<br>---------<br>To get live rates, Call live_rates method and pass optional currency<br><br>.. code:: python<br><br>    import currencylayer<br>    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)<br>    exchange_rate.live_rates(base_currency='GBP')<br>    e.g response<br>        {<br>            \"success\": true,<br>            \"terms\": \"https://currencylayer.com/terms\",<br>            \"privacy\": \"https://currencylayer.com/privacy\",<br>            \"timestamp\": 1430068515,<br>            \"source\": \"GBP\",<br>            \"quotes\": {<br>            \"GBPAED\": 5.578448,<br>            \"GBPAFN\": 87.869413,<br>            \"GBPALL\": 196.414724,<br>            \"GBPAMD\": 719.087298,<br>            \"GBPANG\": 2.717836,<br>            \"GBPAOA\": 165.601846,<br>            \"GBPARS\": 13.514458,<br>            \"GBPAUD\": 1.941526,<br>            [...]<br>            }<br>        }<br><br>Live Rates for Specific Currencies<br>---------<br>To get live rates, for specific currencies Call live_rates_for method and pass optional array of currencies e.g ['EUR', 'GBP', 'AED'] and and optional base currency<br><br>.. code:: python<br><br>    import currencylayer<br>    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)<br>    exchange_rate.live_rates_for(currencies=['AUD','CHF','EUR','GBP','PLN'], base_currency='USD')<br>    e.g response<br>        {<br>            \"success\": true,<br>            \"terms\": \"https://currencylayer.com/terms\",<br>            \"privacy\": \"https://currencylayer.com/privacy\",<br>            \"timestamp\": 1430068515,<br>            \"source\": \"USD\",<br>            \"quotes\": {<br>            \"USDAUD\": 1.278384,<br>            \"USDCHF\": 0.953975,<br>            \"USDEUR\": 0.919677,<br>            \"USDGBP\": 0.658443,<br>            \"USDPLN\": 3.713873<br>            }<br>        }<br><br>Historical Rates<br>---------<br>To get historical rates, Call historical method and pass date and currency. If no date or currency is provided current date and USD is used. Date format required is YEAR-MONTH-DAY<br><br>.. code:: python<br><br>    import currencylayer<br>    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)<br>    exchange_rate.historical(date='2005-02-01', base_currency='USD')<br>    e.g response<br>        {<br>          \"success\": true,<br>          \"terms\": \"https://currencylayer.com/terms\",<br>          \"privacy\": \"https://currencylayer.com/privacy\",<br>          \"historical\": true,<br>          \"date\": \"2005-02-01\",<br>          \"timestamp\": 1107302399,<br>          \"source\": \"USD\",<br>          \"quotes\": {<br>            \"USDAED\": 3.67266,<br>            \"USDALL\": 96.848753,<br>            \"USDAMD\": 475.798297,<br>            \"USDANG\": 1.790403,<br>            \"USDARS\": 2.918969,<br>            \"USDAUD\": 1.293878,<br>            [...]<br>          }<br>        }<br><br><br>Currency Conversion<br>---------<br>To convert rate from one currency to another, Call convert method and pass three required parameters. from_currency, to_currency, amount and optional date.<br><br>.. code:: python<br><br>    import currencylayer<br>    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)<br>    exchange_rate.convert(from_currency='USD', to_currency='GBP', amount=10)<br>    e.g response<br>        {<br>          \"success\": true,<br>          \"terms\": \"https://currencylayer.com/terms\",<br>          \"privacy\": \"https://currencylayer.com/privacy\",<br>          \"query\": {<br>            \"from\": \"USD\",<br>            \"to\": \"GBP\",<br>            \"amount\": 10<br>          },<br>          \"info\": {<br>            \"timestamp\": 1430068515,<br>            \"quote\": 0.658443<br>          },<br>          \"result\": 6.58443<br>        }<br><br>Time-Frame Queries<br>---------<br>To request historical exchange rates for a time-period of your choice call timeframe function pass three required parameters. start_date, end_date, currencies which must be a list  and optional date.<br><br>.. code:: python<br><br>    import currencylayer<br>    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)<br>    exchange_rate.timeframe(start_date='2010-03-01', end_date='2010-04-01', currencies=['USD', 'GBP', 'EUR'])<br>    e.g response<br>        {<br>          \"success\": true,<br>          \"terms\": \"https://currencylayer.com/terms\",<br>          \"privacy\": \"https://currencylayer.com/privacy\",<br>          \"timeframe\": true,<br>          \"start_date\": \"2010-03-01\",<br>          \"end_date\": \"2010-04-01\",<br>          \"source\": \"USD\",<br>          \"quotes\": {<br>            \"2010-03-01\": {<br>              \"USDUSD\": 1,<br>              \"USDGBP\": 0.668525,<br>              \"USDEUR\": 0.738541<br>            },<br>            \"2010-03-02\": {<br>              \"USDUSD\": 1,<br>              \"USDGBP\": 0.668827,<br>              \"USDEUR\": 0.736145<br>            },<br>            [...]<br>          }<br>        }<br><br>Currency-Change Queries<br>---------<br>To request the change (both margin and percentage) of one or more currencies, relative to a Source Currency, within a specific time-frame (optional).<br>Call change_queries and pass three required parameters. start_date, end_date, currencies which must be a list and optional base_currency<br><br>.. code:: python<br><br>    import currencylayer<br>    exchange_rate = currencylayer.Client(access_key=YOUR_ACCESS_KEY)<br>    exchange_rate.change_queries(start_date='2010-03-01', end_date='2010-04-01', currencies=['AUD','EUR','MXN'])<br>    e.g response<br>        {<br>          \"success\":true,<br>          \"terms\":\"https:\\/\\/currencylayer.com\\/terms\",<br>          \"privacy\":\"https:\\/\\/currencylayer.com\\/privacy\",<br>          \"change\":true,<br>          \"start_date\":\"2005-01-01\",<br>          \"end_date\":\"2010-01-01\",<br>          \"source\":\"USD\",<br>          \"quotes\":{<br>            \"USDAUD\":{<br>              \"start_rate\":1.28124,<br>              \"end_rate\":1.108613,<br>              \"change\":-0.1726,<br>              \"change_pct\":-13.4734<br>            },<br>            \"USDEUR\":{<br>              \"start_rate\":0.73618,<br>              \"end_rate\":0.697257,<br>              \"change\":-0.0389,<br>              \"change_pct\":-5.2872<br>            },<br>            \"USDMXN\":{<br>              \"start_rate\":11.149366,<br>              \"end_rate\":13.108761,<br>              \"change\":1.9594,<br>              \"change_pct\":17.574<br>            }<br>          }<br>        }<br><br>Unit Test<br>---------<br>To run unit test:<br><br>.. code:: python<br><br>    python test.py<br><br><br><br>Installation<br>============<br><br>Install the latest release with:<br><br>::<br><br>    pip install currencylayer<br><br><br>Compatibility<br>-------------<br>Python 2.7, 3.0 to 3.5<br><br><br>Authors<br>-------<br><br>`currencylayer` was written by `Said Ali &lt;said.ali@msn.com&gt;`_.\n          </div>"}, "last_serial": 2059804, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "38e4b0bb4f68925e3e97edd3a4f7d320", "sha256": "7f94614b7caa4ca05d857b851f544eab4ec0ff954f5f59e6a6a126c298fd730a"}, "downloads": -1, "filename": "currencylayer-0.1.tar.gz", "has_sig": false, "md5_digest": "38e4b0bb4f68925e3e97edd3a4f7d320", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4323, "upload_time": "2016-04-09T23:00:50", "upload_time_iso_8601": "2016-04-09T23:00:50.443861Z", "url": "https://files.pythonhosted.org/packages/1c/00/92e31640c00bdfa72b268bf5f32dcdc9ce7e6a0a4736ae378340621cdfac/currencylayer-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "2d2daef3a456c2a2215ddf82a5d1b487", "sha256": "68007d8d3cf50682a09d5350c23d0cebfd478d5e64f04818b8f09eb4c136bc4e"}, "downloads": -1, "filename": "currencylayer-0.2.tar.gz", "has_sig": false, "md5_digest": "2d2daef3a456c2a2215ddf82a5d1b487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4749, "upload_time": "2016-04-10T10:33:09", "upload_time_iso_8601": "2016-04-10T10:33:09.449837Z", "url": "https://files.pythonhosted.org/packages/3a/9c/f847df6981280187c8b26bac52e4fa609953f22e0cfddc5f1aff2ccfe4cb/currencylayer-0.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "7e703d54f3a58e5eb47597da0fb5f345", "sha256": "a2c173b2b5e134123bf9c1dbde7e85a8383a2b930ee59a75c53bd5d9f33117e1"}, "downloads": -1, "filename": "currencylayer-1.0.tar.gz", "has_sig": false, "md5_digest": "7e703d54f3a58e5eb47597da0fb5f345", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4941, "upload_time": "2016-04-12T11:09:53", "upload_time_iso_8601": "2016-04-12T11:09:53.992382Z", "url": "https://files.pythonhosted.org/packages/0c/7c/9a41c8c3811a9d1446c977c761df647c531093516e463ed18f8d7a1bb2a1/currencylayer-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7e703d54f3a58e5eb47597da0fb5f345", "sha256": "a2c173b2b5e134123bf9c1dbde7e85a8383a2b930ee59a75c53bd5d9f33117e1"}, "downloads": -1, "filename": "currencylayer-1.0.tar.gz", "has_sig": false, "md5_digest": "7e703d54f3a58e5eb47597da0fb5f345", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4941, "upload_time": "2016-04-12T11:09:53", "upload_time_iso_8601": "2016-04-12T11:09:53.992382Z", "url": "https://files.pythonhosted.org/packages/0c/7c/9a41c8c3811a9d1446c977c761df647c531093516e463ed18f8d7a1bb2a1/currencylayer-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:20 2020"}