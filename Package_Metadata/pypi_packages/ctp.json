{"info": {"author": "Patrick M. Jensen", "author_email": "patrick.opp@hotmail.com", "bugtrack_url": null, "classifiers": [], "description": "ctp\n==============================================================================\nScript for compiling a protocol file to a binary file which can be uploaded to\nthe component tester's SD card. This was made since hand compiling every\nprotocol quickly gets tedious, and especially for longer protocols it is very\neasy to make errors. Therefore I made a python script to automate the process.\n\n    usage: \n        ctp2.py [-h | --help] [-o FILE] [-v | --verify] [INFILE | -c | --code]\n\n    -h --help       show this\n    -o FILE         specify output file [default: ./out.tst]\n    -v --verify     show if compilation was successful but make no output file\n    -c --code       read code from stdin, instead of a file\n\nPROTOCOL SYNTAX\n==============================================================================\nA protocol should be described as a series of commands with arguments.\nEach command must be on a seperate line. Lines beginning with a `#` and lines \nonly consisting of whitespace are skipped. Case (even mixed case liKe tHiS) \ndoes not matter.\n\nProtocols will be run until a `CHECK` command finds that the pin state does \nnot match what was specified. If this happens the component has failed the test.\nIf the protocol is run through without an error then the component has passed\nthe test.\n\nCOMMANDS\n------------------------------------------------------------------------------\n#### VIN\n    VIN <PINS...>\nSpecifies that `PINS...` should be used as positive voltage supply.\nValid pin values are: 5, 14, 15, 16. \n\n#### GND\n    GND <PINS...>\nSpecifies that `PINS..` should be used as ground.\nValid pin values are: 8, 12.\n\n#### DELAY\n    DELAY <TIME>\nDelays further execution by `TIME` milliseconds (ms).\n*NOTE*: If a delay is larger than 65535 ms is needed, it must be split into\nmultiple `DELAY` calls.\n\n#### SET\n    SET (<VALUE> <PINS...>)...\nSets the `PINS...` to the value specified by ``VALUE``. \n`VALUE` is either `ON` or `OFF` (without the qoutation marks). \n`PINS...` is a list of pin numbers (between 1 and 16) seperated by a space. \nAny pins which have not been given a value will remain in their current state \n(either `ON` or `OFF`). Furthermore the `REST` keyword may be used to specify\nany pins which have not yet been given a value. Note however that no pins may\nbe specified after the `REST` keyword, but it is *not* necessary to have pins \n*before* `REST`.\n\n##### Some examples:\n\n    SET ON 1 2\nThis will set pins 1 and 2 to `ON`. The rest of the pins will stay in their\ncurrent state (`ON` or `OFF`).\n\n    SET ON 1 2 OFF 3\nThis will set pins 1 and 2 to ON and pin 3 to `OFF`. The rest of the pins will \nstay in their current state (`ON` or `OFF`).\n\n    SET ON 1 2 OFF REST\nThis will set pins 1 and 2 to `ON` and every other pin to `OFF`.\n\n    SET ON REST\nThis will set every pin to `ON` since no pin was specified before `REST`.\n\n#### CHECK\n    CHECK (<VALUE> <PINS...>)...\nChecks whether `PINS...` have the value specified by `VALUE`.\n`VALUE` is either `ON` or `OFF` (without the qoutation marks).\n`PINS...` is a list of pin numbers (between 1 and 16) seperated by a space.\nThe way `CHECK` is called is similar to `SET` except that a value must be \nspecified for all pins. However, it is still possible to use the `REST` keyword \nto represent every pin which have not been given a value.\n\n*NOTE*: If a pin has previously been set to `ON` with a call to `VIN` or `SET`,\nthen `CHECK` will assume it should be `ON`, regardless of what is specified by\nthe arguments.\n\n##### Some examples:\n\n    CHECK ON 1 OFF REST\nThis will check whether pin 1 is `ON` and the rest of the pins are `OFF`.\n\n    CHECK ON 1 2 3 OFF REST\nThis will check whether pin 1, 2 and 3 are `ON` and the rest of the pins are \n`OFF`.\n\n    CHECK OFF 1 2 OFF REST\nThis will check whether pin 1 and 2 are `ON` and the rest of the pins are `OFF`.\n\nEXAMPLES\n------------------------------------------------------------------------------\nThe following program will use pin 16 as vin and pin 8 as ground. It will\nthen set pins 1 and 2 to `ON` and check if pin 3 is `ON` and everything else\n(except for pin 16 since that is vin and pins 1 and 2 since we set these \nto `ON` previously) is `OFF`.\n\n    GND 8\n    VIN 16\n    SET ON 1 2\n    CHECK ON 3 OFF REST\n\n\nThe following program will use pin 16 as vin and pins 8 and 12 as ground.\nIt will then set pin 2 to `ON`, wait 2 seconds, then set it to `OFF` again. It\nthen checks if all pins (except for pin 16 since that is vin) are `OFF`:\n\n    GND 8 12\n    VIN 16\n    SET ON 2\n    DELAY 2000\n    SET OFF 2\n    CHECK OFF REST", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/opp11/ctp", "keywords": null, "license": "The MIT License (MIT)\n\nCopyright (c) 2014 Patrick M. Jensen, patrick.opp@hotmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", "maintainer": null, "maintainer_email": null, "name": "ctp", "package_url": "https://pypi.org/project/ctp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ctp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/opp11/ctp"}, "release_url": "https://pypi.org/project/ctp/0.9.0/", "requires_dist": null, "requires_python": null, "summary": "Python script for compiling test protocols", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ctp<br>==============================================================================<br>Script for compiling a protocol file to a binary file which can be uploaded to<br>the component tester's SD card. This was made since hand compiling every<br>protocol quickly gets tedious, and especially for longer protocols it is very<br>easy to make errors. Therefore I made a python script to automate the process.<br><br>    usage: <br>        ctp2.py [-h | --help] [-o FILE] [-v | --verify] [INFILE | -c | --code]<br><br>    -h --help       show this<br>    -o FILE         specify output file [default: ./out.tst]<br>    -v --verify     show if compilation was successful but make no output file<br>    -c --code       read code from stdin, instead of a file<br><br>PROTOCOL SYNTAX<br>==============================================================================<br>A protocol should be described as a series of commands with arguments.<br>Each command must be on a seperate line. Lines beginning with a `#` and lines <br>only consisting of whitespace are skipped. Case (even mixed case liKe tHiS) <br>does not matter.<br><br>Protocols will be run until a `CHECK` command finds that the pin state does <br>not match what was specified. If this happens the component has failed the test.<br>If the protocol is run through without an error then the component has passed<br>the test.<br><br>COMMANDS<br>------------------------------------------------------------------------------<br>#### VIN<br>    VIN &lt;PINS...&gt;<br>Specifies that `PINS...` should be used as positive voltage supply.<br>Valid pin values are: 5, 14, 15, 16. <br><br>#### GND<br>    GND &lt;PINS...&gt;<br>Specifies that `PINS..` should be used as ground.<br>Valid pin values are: 8, 12.<br><br>#### DELAY<br>    DELAY &lt;TIME&gt;<br>Delays further execution by `TIME` milliseconds (ms).<br>*NOTE*: If a delay is larger than 65535 ms is needed, it must be split into<br>multiple `DELAY` calls.<br><br>#### SET<br>    SET (&lt;VALUE&gt; &lt;PINS...&gt;)...<br>Sets the `PINS...` to the value specified by ``VALUE``. <br>`VALUE` is either `ON` or `OFF` (without the qoutation marks). <br>`PINS...` is a list of pin numbers (between 1 and 16) seperated by a space. <br>Any pins which have not been given a value will remain in their current state <br>(either `ON` or `OFF`). Furthermore the `REST` keyword may be used to specify<br>any pins which have not yet been given a value. Note however that no pins may<br>be specified after the `REST` keyword, but it is *not* necessary to have pins <br>*before* `REST`.<br><br>##### Some examples:<br><br>    SET ON 1 2<br>This will set pins 1 and 2 to `ON`. The rest of the pins will stay in their<br>current state (`ON` or `OFF`).<br><br>    SET ON 1 2 OFF 3<br>This will set pins 1 and 2 to ON and pin 3 to `OFF`. The rest of the pins will <br>stay in their current state (`ON` or `OFF`).<br><br>    SET ON 1 2 OFF REST<br>This will set pins 1 and 2 to `ON` and every other pin to `OFF`.<br><br>    SET ON REST<br>This will set every pin to `ON` since no pin was specified before `REST`.<br><br>#### CHECK<br>    CHECK (&lt;VALUE&gt; &lt;PINS...&gt;)...<br>Checks whether `PINS...` have the value specified by `VALUE`.<br>`VALUE` is either `ON` or `OFF` (without the qoutation marks).<br>`PINS...` is a list of pin numbers (between 1 and 16) seperated by a space.<br>The way `CHECK` is called is similar to `SET` except that a value must be <br>specified for all pins. However, it is still possible to use the `REST` keyword <br>to represent every pin which have not been given a value.<br><br>*NOTE*: If a pin has previously been set to `ON` with a call to `VIN` or `SET`,<br>then `CHECK` will assume it should be `ON`, regardless of what is specified by<br>the arguments.<br><br>##### Some examples:<br><br>    CHECK ON 1 OFF REST<br>This will check whether pin 1 is `ON` and the rest of the pins are `OFF`.<br><br>    CHECK ON 1 2 3 OFF REST<br>This will check whether pin 1, 2 and 3 are `ON` and the rest of the pins are <br>`OFF`.<br><br>    CHECK OFF 1 2 OFF REST<br>This will check whether pin 1 and 2 are `ON` and the rest of the pins are `OFF`.<br><br>EXAMPLES<br>------------------------------------------------------------------------------<br>The following program will use pin 16 as vin and pin 8 as ground. It will<br>then set pins 1 and 2 to `ON` and check if pin 3 is `ON` and everything else<br>(except for pin 16 since that is vin and pins 1 and 2 since we set these <br>to `ON` previously) is `OFF`.<br><br>    GND 8<br>    VIN 16<br>    SET ON 1 2<br>    CHECK ON 3 OFF REST<br><br><br>The following program will use pin 16 as vin and pins 8 and 12 as ground.<br>It will then set pin 2 to `ON`, wait 2 seconds, then set it to `OFF` again. It<br>then checks if all pins (except for pin 16 since that is vin) are `OFF`:<br><br>    GND 8 12<br>    VIN 16<br>    SET ON 2<br>    DELAY 2000<br>    SET OFF 2<br>    CHECK OFF REST\n          </div>"}, "last_serial": 1159692, "releases": {"0.9.0": []}, "urls": [], "timestamp": "Fri May  8 00:41:35 2020"}