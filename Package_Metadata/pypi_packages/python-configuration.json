{"info": {"author": "Tiago Requeijo", "author_email": "tiago.requeijo.dev@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# python-configuration\n> A library to load configuration parameters hierarchically from multiple sources and formats\n\n[![version](https://img.shields.io/pypi/v/python-configuration)](https://pypi.org/project/python-configuration/)\n![python](https://img.shields.io/pypi/pyversions/python-configuration)\n![wheel](https://img.shields.io/pypi/wheel/python-configuration)\n![license](https://img.shields.io/pypi/l/python-configuration)\n[![build](https://img.shields.io/travis/tr11/python-configuration)](https://travis-ci.org/tr11/python-configuration)\n[![codecov](https://codecov.io/gh/tr11/python-configuration/branch/master/graph/badge.svg)](https://codecov.io/gh/tr11/python-configuration)\n[![Documentation Status](https://readthedocs.org/projects/python-configuration/badge/?version=latest)](https://python-configuration.readthedocs.io/en/latest/?badge=latest)\n\nThis library is intended as a helper mechanism to load configuration files\nhierarchically.  Current format types are:\n* Python files\n* Dictionaries\n* Environment variables\n* Filesystem paths\n* JSON files\n* INI files\n\nand optionally\n* YAML files\n* TOML files\n* Azure Key Vault credentials\n* AWS Secrets Manager credentials\n\n## Installing\n\nTo install the library:\n```shell\npip install python-configuration\n```\n\nTo include the optional TOML and/or YAML loaders, install the optional\ndependencies `toml` and ` yaml`. For example,\n```shell\npip install python-configuration[toml, yaml]\n```\n\n## Getting started\n\nThis library converts the config types above into dictionaries with \ndotted-based keys. That is, given a config `cfg` from the structure\n```python\n{\n    'a': {\n        'b': 'value'\n    }\n}\n```\nwe are able to refer to the parameter above as any of \n```python\ncfg['a.b']\ncfg['a']['b']\ncfg['a'].b\ncfg.a.b\n```\nand extract specific data types such as dictionaries:\n```python\ncfg['a'].as_dict == {'b': 'value'}\n```\nThis is particularly useful in order to isolate group parameters.\nFor example, with the JSON configuration\n```json\n{\n  \"database.host\": \"something\",\n  \"database.port\": 12345,\n  \"database.driver\": \"name\",\n  \"app.debug\": true,\n  \"app.environment\": \"development\",\n  \"app.secrets\": \"super secret\",\n  \"logging\": {\n    \"service\": \"service\",\n    \"token\": \"token\",\n    \"tags\": \"tags\"\n  }\n}\n```\none can retrieve the dictionaries as \n```python\ncfg.database.as_dict()\ncfg.app.as_dict()\ncfg.logging.as_dict()\n```\nor simply as \n```python\ndict(cfg.database)\ndict(cfg.app)\ndict(cfg.logging)\n```\n## Configuration\nThere are two general types of objects in this library. The first one is the `Configuration`,\nwhich represents a single config source.  The second is a `ConfigurationSet` that allows for\nmultiple `Configuration` objects to be specified.\n\n### Single Config\n\n#### Python Files\nTo load a configuration from a Python module, the `config_from_python` can be used.\nThe first parameter must be a Python module and can be specified as an absolute path to the Python file or as an importable module.\n\nOptional parameters are the `prefix` and `separator`.  The following call \n```python\nconfig_from_python('foo.bar', prefix='CONFIG', separator='__')\n```\nwill read every variable in the `foo.bar` module that starts with `CONFIG__` and replace\nevery occurrence of `__` with a `.`. For example,\n```python\n# foo.bar\nCONFIG__AA__BB_C = 1\nCONFIG__AA__BB__D = 2\nCONF__AA__BB__D = 3\n```\nwould result in the configuration\n```python\n{\n    'aa.bb_c': 1,\n    'aa.bb.d': 2,\n}\n```\nNote that the single underscore in `BB_C` is not replaced and the last line is not\nprefixed by `CONFIG`. \n\n#### Dictionaries\nDictionaries are loaded with `config_from_dict` and are converted internally to a \nflattened `dict`. \n```python\n{\n    'a': {\n        'b': 'value'\n    }\n}\n```\nbecomes\n```python\n{\n    'a.b': 'value'\n}\n```\n\n#### Environment Variables\nEnvironment variables starting with `prefix` can be read with `config_from_env`:\n```python\nconfig_from_env(prefix, separator='_')\n```\n\n#### Filesystem Paths\nFolders with files named as `xxx.yyy.zzz` can be loaded with the `config_from_path` function.  This format is useful to load mounted\nKubernetes [ConfigMaps](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#populate-a-volume-with-data-stored-in-a-configmap)\nor [Secrets](https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#create-a-pod-that-has-access-to-the-secret-data-through-a-volume).\n\n#### JSON, INI, YAML, TOML\nJSON, INI, YAML, TOML files are loaded respectively with\n`config_from_json`,\n`config_from_ini`,\n`config_from_yaml`, and\n`config_from_toml`.\nThe parameter `read_from_file` controls\nwhether a string should be interpreted as a filename.\n\n###### Caveats\nIn order for `Configuration` objects to act as `dict` and allow the syntax\n`dict(cfg)`, the `keys()` method is implemented as the typical `dict` keys.\nIf `keys` is an element in the configuration `cfg` then the `dict(cfg)` call will fail.\nIn that case, it's necessary to use the `cfg.as_dict()` method to retrieve the\n`dict` representation for the `Configuration` object.\n\nThe same applies to the methods `values()` and `items()`.\n \n\n### Configuration Sets\nConfiguration sets are used to hierarchically load configurations and merge\nsettings. Sets can be loaded by constructing a `ConfigurationSet` object directly or\nusing the simplified `config` function.\n\nTo construct a `ConfigurationSet`, pass in as many of the simple `Configuration` objects as needed:\n```python\ncfg = ConfigurationSet(\n    config_from_env(prefix=PREFIX),\n    config_from_json(path, read_from_file=True),\n    config_from_dict(DICT),\n)\n```\nThe example above will read first from Environment variables prefixed with `PREFIX`, \nand fallback first to the JSON file at `path`, and finally use the dictionary `DICT`.\n\nThe `config` function simplifies loading sets by assuming some defaults.\nThe example above can also be obtained by\n```python\ncfg = config(\n    ('env', PREFIX),\n    ('json', path, True),\n    ('dict', DICT),\n)\n```\nor, even simpler if `path` points to a file with a `.json` suffix:\n```python\ncfg = config('env', path, DICT, prefix=PREFIX)\n```\nThe `config` function automatically detects the following:\n* extension `.py` for python modules\n* dot-separated python identifiers as a python module (e.g. `foo.bar`)\n* extension `.json` for JSON files\n* extension `.yaml` for YAML files\n* extension `.toml` for TOML files\n* extension `.ini` for INI files\n* filesystem folders as Filesystem Paths\n* the strings `env` or `environment` for Environment Variables\n\n#### Merging Values\n`ConfigurationSet` instances are constructed by inspecting each configuration source, taking into account nested dictionaries, and merging at the most granular level.\nFor example, the instance obtained from `cfg = config(d1, d2)` for the dictionaries below\n\n```python\nd1 = {'sub': {'a': 1, 'b': 4}}\nd2 = {'sub': {'b': 2, 'c': 3}}\n```\n\nis such that `cfg['sub']` equals\n\n```python\n{'a': 1, 'b': 4, 'c': 3}\n```\n\nNote that the nested dictionaries of `'sub'` in each of `d1` and `d2` do not overwrite each other, but are merged into a single\ndictionary with keys from both `d1` and `d2`, giving priority to the values of `d1` over those from `d2`.\n\n\n###### Caveats\nAs long as the data types are consistent across all the configurations that are\npart of a `ConfigurationSet`, the behavior should be straightforward.  When different\nconfiguration objects are specified with competing data types, the first configuration to\ndefine the elements sets its datatype. For example, if in the example above \n`element` is interpreted as a `dict` from environment variables, but the \nJSON file specifies it as anything else besides a mapping, then the JSON value will be\ndropped automatically. \n\n## Other Features\n\n###### String Interpolation\nWhen setting the `interpolate` parameter in any `Configuration` instance, the library will\nperform a string interpolation step using the [str.format](https://docs.python.org/3/library/string.html#formatstrings)\nsyntax.  In particular, this allows to format configuration values automatically:\n```python\ncfg = config_from_dict({\n    \"percentage\": \"{val:.3%}\",\n    \"with_sign\": \"{val:+f}\",\n    \"val\": 1.23456}, interpolate=True)\n\nassert cfg.val == 1.23456\nassert cfg.with_sign == \"+1.234560\"\nassert cfg.percentage == \"123.456%\"\n```\n\n## Extras\nThe `config.contrib` package contains extra implementations of the `Configuration` class\nused for special cases. Currently the following are implemented:\n* `AzureKeyVaultConfiguration` in `config.contrib.azure`, which takes Azure Key Vault\n  credentials into a `Configuration`-compatible instance. To install the needed dependencies\n  execute\n  ```shell\n  pip install python-configuration[azure]\n  ```\n* `AWSSecretsManagerConfiguration` in `config.contrib.aws`, which takes AWS Secrets Manager\n  credentials into a `Configuration`-compatible instance. To install the needed dependencies\n  execute\n  ```shell\n  pip install python-configuration[aws]\n  ```\n\n## Developing\n\nTo develop this library, download the source code and install a local version.\n\n\n## Features\n\n* Load multiple configuration types\n* Hierarchical configuration\n* Ability to override with environment variables\n* Merge parameters from different configuration types\n\n## Contributing\n\nIf you'd like to contribute, please fork the repository and use a feature\nbranch. Pull requests are welcome.\n\n## Links\n\n- Repository: https://github.com/tr11/python-configuration\n- Issue tracker: https://github.com/tr11/python-configuration/issues\n- Documentation: https://python-configuration.readthedocs.io\n\n## Licensing\n\nThe code in this project is licensed under MIT license.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tr11/python-configuration", "keywords": "configuration,settings,json,yaml,toml,ini", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-configuration", "package_url": "https://pypi.org/project/python-configuration/", "platform": "", "project_url": "https://pypi.org/project/python-configuration/", "project_urls": {"Homepage": "https://github.com/tr11/python-configuration", "Repository": "https://github.com/tr11/python-configuration"}, "release_url": "https://pypi.org/project/python-configuration/0.7.0/", "requires_dist": ["pyyaml (>=5.1,<6.0); extra == \"yaml\"", "toml (>=0.10.0,<0.11.0); extra == \"toml\"", "azure-keyvault (>=4.0.0,<5.0.0); extra == \"azure\"", "azure-identity (>=1.1.0,<2.0.0); extra == \"azure\"", "boto3 (>=1.10.48,<2.0.0); extra == \"aws\""], "requires_python": ">=3.6,<4.0", "summary": "A library to load configuration parameters from multiple sources and formats", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-configuration</h1>\n<blockquote>\n<p>A library to load configuration parameters hierarchically from multiple sources and formats</p>\n</blockquote>\n<p><a href=\"https://pypi.org/project/python-configuration/\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a13e082500d726a36d5c84422f8a9a4f4dab373e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707974686f6e2d636f6e66696775726174696f6e\"></a>\n<img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e709de00ecd1d5d7723d526ae4a231116bdf18c8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707974686f6e2d636f6e66696775726174696f6e\">\n<img alt=\"wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e559f1f3887a041cf8b499c8f49f8ba2ecb43ac7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f707974686f6e2d636f6e66696775726174696f6e\">\n<img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74de08c7814163268926caa3da438cd9d3bea0cf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f707974686f6e2d636f6e66696775726174696f6e\">\n<a href=\"https://travis-ci.org/tr11/python-configuration\" rel=\"nofollow\"><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e059356e28b22507570c39df3ff160a4d7995e2/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f747231312f707974686f6e2d636f6e66696775726174696f6e\"></a>\n<a href=\"https://codecov.io/gh/tr11/python-configuration\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b65acccabda6c697ff7ef27dc34ad7e50a0e14f3/68747470733a2f2f636f6465636f762e696f2f67682f747231312f707974686f6e2d636f6e66696775726174696f6e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://python-configuration.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9a3f0fe6b4a6b69ecdf2baeeb65c1ebd21f3f0e/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707974686f6e2d636f6e66696775726174696f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>This library is intended as a helper mechanism to load configuration files\nhierarchically.  Current format types are:</p>\n<ul>\n<li>Python files</li>\n<li>Dictionaries</li>\n<li>Environment variables</li>\n<li>Filesystem paths</li>\n<li>JSON files</li>\n<li>INI files</li>\n</ul>\n<p>and optionally</p>\n<ul>\n<li>YAML files</li>\n<li>TOML files</li>\n<li>Azure Key Vault credentials</li>\n<li>AWS Secrets Manager credentials</li>\n</ul>\n<h2>Installing</h2>\n<p>To install the library:</p>\n<pre>pip install python-configuration\n</pre>\n<p>To include the optional TOML and/or YAML loaders, install the optional\ndependencies <code>toml</code> and <code>yaml</code>. For example,</p>\n<pre>pip install python-configuration<span class=\"o\">[</span>toml, yaml<span class=\"o\">]</span>\n</pre>\n<h2>Getting started</h2>\n<p>This library converts the config types above into dictionaries with\ndotted-based keys. That is, given a config <code>cfg</code> from the structure</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>we are able to refer to the parameter above as any of</p>\n<pre><span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'a.b'</span><span class=\"p\">]</span>\n<span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">][</span><span class=\"s1\">'b'</span><span class=\"p\">]</span>\n<span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span>\n</pre>\n<p>and extract specific data types such as dictionaries:</p>\n<pre><span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_dict</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">}</span>\n</pre>\n<p>This is particularly useful in order to isolate group parameters.\nFor example, with the JSON configuration</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"database.host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"something\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"database.port\"</span><span class=\"p\">:</span> <span class=\"mi\">12345</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"database.driver\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"app.debug\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"app.environment\"</span><span class=\"p\">:</span> <span class=\"s2\">\"development\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"app.secrets\"</span><span class=\"p\">:</span> <span class=\"s2\">\"super secret\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"logging\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"service\"</span><span class=\"p\">:</span> <span class=\"s2\">\"service\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"token\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"tags\"</span><span class=\"p\">:</span> <span class=\"s2\">\"tags\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>one can retrieve the dictionaries as</p>\n<pre><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()</span>\n</pre>\n<p>or simply as</p>\n<pre><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"p\">)</span>\n<span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"p\">)</span>\n<span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">logging</span><span class=\"p\">)</span>\n</pre>\n<h2>Configuration</h2>\n<p>There are two general types of objects in this library. The first one is the <code>Configuration</code>,\nwhich represents a single config source.  The second is a <code>ConfigurationSet</code> that allows for\nmultiple <code>Configuration</code> objects to be specified.</p>\n<h3>Single Config</h3>\n<h4>Python Files</h4>\n<p>To load a configuration from a Python module, the <code>config_from_python</code> can be used.\nThe first parameter must be a Python module and can be specified as an absolute path to the Python file or as an importable module.</p>\n<p>Optional parameters are the <code>prefix</code> and <code>separator</code>.  The following call</p>\n<pre><span class=\"n\">config_from_python</span><span class=\"p\">(</span><span class=\"s1\">'foo.bar'</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'CONFIG'</span><span class=\"p\">,</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">'__'</span><span class=\"p\">)</span>\n</pre>\n<p>will read every variable in the <code>foo.bar</code> module that starts with <code>CONFIG__</code> and replace\nevery occurrence of <code>__</code> with a <code>.</code>. For example,</p>\n<pre><span class=\"c1\"># foo.bar</span>\n<span class=\"n\">CONFIG__AA__BB_C</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">CONFIG__AA__BB__D</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">CONF__AA__BB__D</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</pre>\n<p>would result in the configuration</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'aa.bb_c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aa.bb.d'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Note that the single underscore in <code>BB_C</code> is not replaced and the last line is not\nprefixed by <code>CONFIG</code>.</p>\n<h4>Dictionaries</h4>\n<p>Dictionaries are loaded with <code>config_from_dict</code> and are converted internally to a\nflattened <code>dict</code>.</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>becomes</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'a.b'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Environment Variables</h4>\n<p>Environment variables starting with <code>prefix</code> can be read with <code>config_from_env</code>:</p>\n<pre><span class=\"n\">config_from_env</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">'_'</span><span class=\"p\">)</span>\n</pre>\n<h4>Filesystem Paths</h4>\n<p>Folders with files named as <code>xxx.yyy.zzz</code> can be loaded with the <code>config_from_path</code> function.  This format is useful to load mounted\nKubernetes <a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#populate-a-volume-with-data-stored-in-a-configmap\" rel=\"nofollow\">ConfigMaps</a>\nor <a href=\"https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#create-a-pod-that-has-access-to-the-secret-data-through-a-volume\" rel=\"nofollow\">Secrets</a>.</p>\n<h4>JSON, INI, YAML, TOML</h4>\n<p>JSON, INI, YAML, TOML files are loaded respectively with\n<code>config_from_json</code>,\n<code>config_from_ini</code>,\n<code>config_from_yaml</code>, and\n<code>config_from_toml</code>.\nThe parameter <code>read_from_file</code> controls\nwhether a string should be interpreted as a filename.</p>\n<h6>Caveats</h6>\n<p>In order for <code>Configuration</code> objects to act as <code>dict</code> and allow the syntax\n<code>dict(cfg)</code>, the <code>keys()</code> method is implemented as the typical <code>dict</code> keys.\nIf <code>keys</code> is an element in the configuration <code>cfg</code> then the <code>dict(cfg)</code> call will fail.\nIn that case, it's necessary to use the <code>cfg.as_dict()</code> method to retrieve the\n<code>dict</code> representation for the <code>Configuration</code> object.</p>\n<p>The same applies to the methods <code>values()</code> and <code>items()</code>.</p>\n<h3>Configuration Sets</h3>\n<p>Configuration sets are used to hierarchically load configurations and merge\nsettings. Sets can be loaded by constructing a <code>ConfigurationSet</code> object directly or\nusing the simplified <code>config</code> function.</p>\n<p>To construct a <code>ConfigurationSet</code>, pass in as many of the simple <code>Configuration</code> objects as needed:</p>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">ConfigurationSet</span><span class=\"p\">(</span>\n    <span class=\"n\">config_from_env</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">PREFIX</span><span class=\"p\">),</span>\n    <span class=\"n\">config_from_json</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">read_from_file</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"n\">config_from_dict</span><span class=\"p\">(</span><span class=\"n\">DICT</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The example above will read first from Environment variables prefixed with <code>PREFIX</code>,\nand fallback first to the JSON file at <code>path</code>, and finally use the dictionary <code>DICT</code>.</p>\n<p>The <code>config</code> function simplifies loading sets by assuming some defaults.\nThe example above can also be obtained by</p>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"s1\">'env'</span><span class=\"p\">,</span> <span class=\"n\">PREFIX</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'json'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'dict'</span><span class=\"p\">,</span> <span class=\"n\">DICT</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>or, even simpler if <code>path</code> points to a file with a <code>.json</code> suffix:</p>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'env'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">DICT</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">PREFIX</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>config</code> function automatically detects the following:</p>\n<ul>\n<li>extension <code>.py</code> for python modules</li>\n<li>dot-separated python identifiers as a python module (e.g. <code>foo.bar</code>)</li>\n<li>extension <code>.json</code> for JSON files</li>\n<li>extension <code>.yaml</code> for YAML files</li>\n<li>extension <code>.toml</code> for TOML files</li>\n<li>extension <code>.ini</code> for INI files</li>\n<li>filesystem folders as Filesystem Paths</li>\n<li>the strings <code>env</code> or <code>environment</code> for Environment Variables</li>\n</ul>\n<h4>Merging Values</h4>\n<p><code>ConfigurationSet</code> instances are constructed by inspecting each configuration source, taking into account nested dictionaries, and merging at the most granular level.\nFor example, the instance obtained from <code>cfg = config(d1, d2)</code> for the dictionaries below</p>\n<pre><span class=\"n\">d1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'sub'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}}</span>\n<span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'sub'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}}</span>\n</pre>\n<p>is such that <code>cfg['sub']</code> equals</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</pre>\n<p>Note that the nested dictionaries of <code>'sub'</code> in each of <code>d1</code> and <code>d2</code> do not overwrite each other, but are merged into a single\ndictionary with keys from both <code>d1</code> and <code>d2</code>, giving priority to the values of <code>d1</code> over those from <code>d2</code>.</p>\n<h6>Caveats</h6>\n<p>As long as the data types are consistent across all the configurations that are\npart of a <code>ConfigurationSet</code>, the behavior should be straightforward.  When different\nconfiguration objects are specified with competing data types, the first configuration to\ndefine the elements sets its datatype. For example, if in the example above\n<code>element</code> is interpreted as a <code>dict</code> from environment variables, but the\nJSON file specifies it as anything else besides a mapping, then the JSON value will be\ndropped automatically.</p>\n<h2>Other Features</h2>\n<h6>String Interpolation</h6>\n<p>When setting the <code>interpolate</code> parameter in any <code>Configuration</code> instance, the library will\nperform a string interpolation step using the <a href=\"https://docs.python.org/3/library/string.html#formatstrings\" rel=\"nofollow\">str.format</a>\nsyntax.  In particular, this allows to format configuration values automatically:</p>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">config_from_dict</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"percentage\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{val:.3%}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"with_sign\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{val:+f}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"val\"</span><span class=\"p\">:</span> <span class=\"mf\">1.23456</span><span class=\"p\">},</span> <span class=\"n\">interpolate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"mf\">1.23456</span>\n<span class=\"k\">assert</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">with_sign</span> <span class=\"o\">==</span> <span class=\"s2\">\"+1.234560\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">percentage</span> <span class=\"o\">==</span> <span class=\"s2\">\"123.456%\"</span>\n</pre>\n<h2>Extras</h2>\n<p>The <code>config.contrib</code> package contains extra implementations of the <code>Configuration</code> class\nused for special cases. Currently the following are implemented:</p>\n<ul>\n<li><code>AzureKeyVaultConfiguration</code> in <code>config.contrib.azure</code>, which takes Azure Key Vault\ncredentials into a <code>Configuration</code>-compatible instance. To install the needed dependencies\nexecute\n<pre>pip install python-configuration<span class=\"o\">[</span>azure<span class=\"o\">]</span>\n</pre>\n</li>\n<li><code>AWSSecretsManagerConfiguration</code> in <code>config.contrib.aws</code>, which takes AWS Secrets Manager\ncredentials into a <code>Configuration</code>-compatible instance. To install the needed dependencies\nexecute\n<pre>pip install python-configuration<span class=\"o\">[</span>aws<span class=\"o\">]</span>\n</pre>\n</li>\n</ul>\n<h2>Developing</h2>\n<p>To develop this library, download the source code and install a local version.</p>\n<h2>Features</h2>\n<ul>\n<li>Load multiple configuration types</li>\n<li>Hierarchical configuration</li>\n<li>Ability to override with environment variables</li>\n<li>Merge parameters from different configuration types</li>\n</ul>\n<h2>Contributing</h2>\n<p>If you'd like to contribute, please fork the repository and use a feature\nbranch. Pull requests are welcome.</p>\n<h2>Links</h2>\n<ul>\n<li>Repository: <a href=\"https://github.com/tr11/python-configuration\" rel=\"nofollow\">https://github.com/tr11/python-configuration</a></li>\n<li>Issue tracker: <a href=\"https://github.com/tr11/python-configuration/issues\" rel=\"nofollow\">https://github.com/tr11/python-configuration/issues</a></li>\n<li>Documentation: <a href=\"https://python-configuration.readthedocs.io\" rel=\"nofollow\">https://python-configuration.readthedocs.io</a></li>\n</ul>\n<h2>Licensing</h2>\n<p>The code in this project is licensed under MIT license.</p>\n\n          </div>"}, "last_serial": 7182123, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "310fb165aff66ade99ddca28c2a2e955", "sha256": "27a764fbb2409a941e4a827c6c93c2e741409c1cb11e719358a26d7f12abf478"}, "downloads": -1, "filename": "python_configuration-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "310fb165aff66ade99ddca28c2a2e955", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 18834, "upload_time": "2019-01-16T09:20:45", "upload_time_iso_8601": "2019-01-16T09:20:45.264348Z", "url": "https://files.pythonhosted.org/packages/dd/3f/10f0365054f20e97b2a6c999b3a3ba6dd13b0e51780b3c87dcdc88eb96f9/python_configuration-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f97f54098c4ca93fd6b7191770a5ca0b", "sha256": "a28fefe67c0319c703e0fc9fef249d613fd9a46797af8867de50def267ea85b7"}, "downloads": -1, "filename": "python-configuration-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f97f54098c4ca93fd6b7191770a5ca0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 8623, "upload_time": "2019-01-16T09:20:43", "upload_time_iso_8601": "2019-01-16T09:20:43.328305Z", "url": "https://files.pythonhosted.org/packages/2a/55/aed9a9f680138d7196afce4b1a8bb8d7fd0309d3614f66babda6df69067e/python-configuration-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3710debfff8e4d55990af2584862f66a", "sha256": "68c537c028668382b2fafde9efee6423695a797d953f2d14971de2735aa41306"}, "downloads": -1, "filename": "python_configuration-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3710debfff8e4d55990af2584862f66a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 24432, "upload_time": "2019-07-16T16:54:46", "upload_time_iso_8601": "2019-07-16T16:54:46.639184Z", "url": "https://files.pythonhosted.org/packages/48/91/0ae1882d030f12f0d7b94b28541fe1c8d36f12a11d87a127503564fbfdba/python_configuration-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "995e4ca32334e444ebd55f470dcfbf6b", "sha256": "c0fa006436623d0a0d1dfd082707f2ed69ef0aa6479ea6cfe58922ae166bdcf5"}, "downloads": -1, "filename": "python-configuration-0.2.0.tar.gz", "has_sig": false, "md5_digest": "995e4ca32334e444ebd55f470dcfbf6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 9663, "upload_time": "2019-07-16T16:54:45", "upload_time_iso_8601": "2019-07-16T16:54:45.006211Z", "url": "https://files.pythonhosted.org/packages/43/d7/5dd9234841a2ce71baa6f8deb29eeefe9052431d501526632b78f62a6329/python-configuration-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7648a9a55afe80d3641080f5c09cc4bb", "sha256": "8c2e112943be64dd12b54216991f048b58f65105e2cd6c42a718397628d77cd3"}, "downloads": -1, "filename": "python_configuration-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7648a9a55afe80d3641080f5c09cc4bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 26636, "upload_time": "2019-08-16T15:36:19", "upload_time_iso_8601": "2019-08-16T15:36:19.468383Z", "url": "https://files.pythonhosted.org/packages/2b/b7/b554158d7b33c82a7b5996cafd9857a2526648163a3fbabc4fe8ad44df2f/python_configuration-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da2ff2c64d5017439a86f8a6e763bb2d", "sha256": "ce8b2b9a957134ec0b049638360be086ea4d6e98e627832fb5accfade250de0f"}, "downloads": -1, "filename": "python-configuration-0.3.0.tar.gz", "has_sig": false, "md5_digest": "da2ff2c64d5017439a86f8a6e763bb2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11357, "upload_time": "2019-08-16T15:36:17", "upload_time_iso_8601": "2019-08-16T15:36:17.744591Z", "url": "https://files.pythonhosted.org/packages/ad/4c/2293717188f6b0438591f02bea8ffdb441356b2e4243b6d31f6b144a3f45/python-configuration-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "fd0b07d55859fb6bd27f2b71c0eb1a66", "sha256": "93f3683e2756cd4a0122dc49289e2a85925aae1b9b242ebd6a5fa0bc8dcc3bfe"}, "downloads": -1, "filename": "python_configuration-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fd0b07d55859fb6bd27f2b71c0eb1a66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 28626, "upload_time": "2019-10-12T02:31:53", "upload_time_iso_8601": "2019-10-12T02:31:53.854781Z", "url": "https://files.pythonhosted.org/packages/f9/c1/ee3c46729fa3196316ceab209fd9dd152397997bd594b5d2b6facb426d9a/python_configuration-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b1a7011302e78d5934f0bcffa3a3221", "sha256": "40010aecddc84b028836c976452f1802f71af00f0cca4b9986cb9e8fe0b0002b"}, "downloads": -1, "filename": "python-configuration-0.4.0.tar.gz", "has_sig": false, "md5_digest": "5b1a7011302e78d5934f0bcffa3a3221", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12221, "upload_time": "2019-10-12T02:31:51", "upload_time_iso_8601": "2019-10-12T02:31:51.983098Z", "url": "https://files.pythonhosted.org/packages/76/a1/4e51cd60a919f524f43e15313a9d42b79c56af934a7d1f963850475587bf/python-configuration-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "d6af3ba8f8771e66ffc200c08972f4bc", "sha256": "bacffaf12f75752b3a91d3f2cd1cda6e90539d9425925967c8f9b4e28075452a"}, "downloads": -1, "filename": "python_configuration-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d6af3ba8f8771e66ffc200c08972f4bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 9811, "upload_time": "2019-11-22T19:37:47", "upload_time_iso_8601": "2019-11-22T19:37:47.608480Z", "url": "https://files.pythonhosted.org/packages/3a/7e/51bc2f2d989f77cdf516fdfc67585bcf0613c8782343507c37cd821e6eed/python_configuration-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a94c6cbee8cfd9ac1a167ec6fbb9b3ec", "sha256": "8ab0a9a9d6bc00db165996e42915a894413ca55815f86e6b21ba15d27fb97dbd"}, "downloads": -1, "filename": "python-configuration-0.4.1.tar.gz", "has_sig": false, "md5_digest": "a94c6cbee8cfd9ac1a167ec6fbb9b3ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13047, "upload_time": "2019-11-22T19:37:46", "upload_time_iso_8601": "2019-11-22T19:37:46.080164Z", "url": "https://files.pythonhosted.org/packages/a1/fc/759936df8c0bbeffdee3dc152618eaef80af8136a59e26303aa28b0b2c15/python-configuration-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "8e596d305bf68bf1ddb4627eb38d2502", "sha256": "42ff2b1171ca86cc837ad1001095093e401b23cccfc9145d45c7c256b8d3e0c4"}, "downloads": -1, "filename": "python_configuration-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8e596d305bf68bf1ddb4627eb38d2502", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13701, "upload_time": "2020-01-08T18:20:02", "upload_time_iso_8601": "2020-01-08T18:20:02.645384Z", "url": "https://files.pythonhosted.org/packages/16/9a/45347834600e2a435fcc67ab98a2de1d24ff314bb23394d38ac28c0c4cc8/python_configuration-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fda5e90c46ac8881dc82b52b43bef02e", "sha256": "63564900eb147a304e3b8f2c9d0ebfe0438276c23282441ab7e63fee2896a0fc"}, "downloads": -1, "filename": "python-configuration-0.5.0.tar.gz", "has_sig": false, "md5_digest": "fda5e90c46ac8881dc82b52b43bef02e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 16156, "upload_time": "2020-01-08T18:20:00", "upload_time_iso_8601": "2020-01-08T18:20:00.937010Z", "url": "https://files.pythonhosted.org/packages/d7/0a/8b3d4a78d0017ccfdf81211f357f792e5f54e436c2e086534e1d4686305b/python-configuration-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "0c3e59451e4b44d324dc28fa370e3464", "sha256": "13cd2a32ea0c64fd62ef5c26acd7e885239c93206cb0c7656426276d9ffc6394"}, "downloads": -1, "filename": "python_configuration-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c3e59451e4b44d324dc28fa370e3464", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 17067, "upload_time": "2020-01-22T21:30:10", "upload_time_iso_8601": "2020-01-22T21:30:10.244614Z", "url": "https://files.pythonhosted.org/packages/2b/41/57ebd04183a964e438181bc40b9ed2734f6525ce7b298285a17517c6a73b/python_configuration-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76030cbd0c8dc89d4c8b56de1e1de175", "sha256": "a33324a361228f078485df8a059778b89eb353bdb52654df669439be21e74b25"}, "downloads": -1, "filename": "python-configuration-0.6.0.tar.gz", "has_sig": false, "md5_digest": "76030cbd0c8dc89d4c8b56de1e1de175", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 17954, "upload_time": "2020-01-22T21:30:08", "upload_time_iso_8601": "2020-01-22T21:30:08.896318Z", "url": "https://files.pythonhosted.org/packages/58/7a/cce2982d2eeccc0016e26aeda2fa3299ae31c3fd5f48c876cd78a5d61f0c/python-configuration-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "2ee7de9d9be0a7b9dfda50037fb9a40a", "sha256": "aec075b6ad3ff7ae4c81430ad630eed97bcf45bf3a890a7571b71c6708e3d667"}, "downloads": -1, "filename": "python_configuration-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ee7de9d9be0a7b9dfda50037fb9a40a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 18398, "upload_time": "2020-05-06T18:14:39", "upload_time_iso_8601": "2020-05-06T18:14:39.391646Z", "url": "https://files.pythonhosted.org/packages/c5/e2/7095e4cd47e32370bdcc7f7fba4b810024c166fb6b7b14d840ed08a8b7d2/python_configuration-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "929cc53c94ac0bf2820ee7e84d9a4ce5", "sha256": "1dcbb1acb2325a9571863a99dd09a8304f81b1907232ca071b0cb09f3e094779"}, "downloads": -1, "filename": "python-configuration-0.7.0.tar.gz", "has_sig": false, "md5_digest": "929cc53c94ac0bf2820ee7e84d9a4ce5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 19671, "upload_time": "2020-05-06T18:14:38", "upload_time_iso_8601": "2020-05-06T18:14:38.405244Z", "url": "https://files.pythonhosted.org/packages/7e/6b/da8888cbc87bf4f6992e4caf32847d2b2c8696c7d052da72adfa47ae0f77/python-configuration-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ee7de9d9be0a7b9dfda50037fb9a40a", "sha256": "aec075b6ad3ff7ae4c81430ad630eed97bcf45bf3a890a7571b71c6708e3d667"}, "downloads": -1, "filename": "python_configuration-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ee7de9d9be0a7b9dfda50037fb9a40a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 18398, "upload_time": "2020-05-06T18:14:39", "upload_time_iso_8601": "2020-05-06T18:14:39.391646Z", "url": "https://files.pythonhosted.org/packages/c5/e2/7095e4cd47e32370bdcc7f7fba4b810024c166fb6b7b14d840ed08a8b7d2/python_configuration-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "929cc53c94ac0bf2820ee7e84d9a4ce5", "sha256": "1dcbb1acb2325a9571863a99dd09a8304f81b1907232ca071b0cb09f3e094779"}, "downloads": -1, "filename": "python-configuration-0.7.0.tar.gz", "has_sig": false, "md5_digest": "929cc53c94ac0bf2820ee7e84d9a4ce5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 19671, "upload_time": "2020-05-06T18:14:38", "upload_time_iso_8601": "2020-05-06T18:14:38.405244Z", "url": "https://files.pythonhosted.org/packages/7e/6b/da8888cbc87bf4f6992e4caf32847d2b2c8696c7d052da72adfa47ae0f77/python-configuration-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:18 2020"}