{"info": {"author": "thautwarm", "author_email": "twshere@outlook.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "\n.. image:: https://travis-ci.org/thautwarm/graphviz-artist.svg?branch=master\n    :target: https://travis-ci.org/thautwarm/graphviz-artist\n\n.. image:: https://img.shields.io/pypi/v/graphviz-artist.svg\n    :target: https://pypi.python.org/pypi/graphviz-artist\n\n.. image:: https://codecov.io/gh/thautwarm/graphviz-artist/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/thautwarm/graphviz-artist\n\n.. image:: https://img.shields.io/pypi/pyversions/graphviz-artist.svg\n    :target: https://pypi.org/project/graphviz-artist/\n\n.. image:: https://img.shields.io/badge/license-mit-teal.svg\n    :target: https://pypi.org/project/graphviz-artist/\n\nGraphviz-Artist\n===============\n\n\nYou just become an artist in graph drawing once you start using\n``Graphviz-Artist``.\n\nIf you don't have the demand of fine-grained controling upon generated\ngraphs, the learning curve of graphviz-artist is actually horizontal.\n\nThis package provides a higher-level encapsulation for the python\npackage `graphviz <https://github.com/xflr6/graphviz>`__, and you\nmight want to have a try at the latter.\n\nInstallation\n------------\n\n-  Install `Graphviz <https://www.graphviz.org/download/>`__.\n-  ``pip install graphviz-artist``\n\nQuickstart\n----------\n\n\nUndirected Graph\n~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import graphviz_artist as ga\n\n    # make a graph\n    g = ga.Graph()\n\n    # make nodes\n    n1 = g.new()\n    n2 = g.new()\n    n3 = g.new()\n\n    # (>), (==) and (<) could create edges for graphs.\n    # n2 > n3 / n3 < n2 : there is an edge n2 -> n3\n    # (==) will be introduced later, as it's only meaningful to directed edges.\n    _ = n1 > n2 > n3 > n1\n\n    g.view()\n\n.. image::  https://raw.githubusercontent.com/thautwarm/graphviz-artist/master/imgs/test_1.png\n    :width: 500px\n    :align: center\n\nDirected Graph\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import graphviz_artist as ga\n\n    # use attr module to see which Graphviz Attributes\n    # could be auto-completed.\n    import graphviz_artist.attr as attr\n\n    # use HorizontalGraph\n    g = ga.Graph(attr.HorizontalGraph)\n\n    # `attr.Shape(\"<name>\")` to specify the shape of nodes.\n    n1 = g.new(attr.Label('hey'), attr.Shape.diamond)\n    n2 = g.new(attr.Label('hey'), attr.Shape.hexagon)\n    n3 = g.new(attr.Label('you'), attr.Shape.star)\n\n    # `attr.Directed()` makes a directed edge.\n    directed = attr.Directed()\n\n    # `attr.Label` to specify the text that edges display\n    edge_label = attr.Label(\"passed_here\")\n\n    # `attr.Penwidth` to decide the width of edge glyph.\n    edge_size = attr.Penwidth(2.)\n\n    # in `a < b[b_to_c_attrs...] > c`, the edge `b -> c` will have attribute `b_to_c_attrs`.\n    _ = n3[directed, edge_label, edge_size] > n1[directed] == n2 > n3\n\n    g.view()\n\n.. image::  https://raw.githubusercontent.com/thautwarm/graphviz-artist/master/imgs/test_2.png\n    :width: 500px\n    :align: center\n\n\n\nExpression Tree\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import graphviz_artist as ga\n    import graphviz_artist.attr as attr\n\n    # make a graph\n    g = ga.Graph(directed=True)\n\n    new = g.new\n\n    # decl nodes\n    false = new(attr.Label(\"False\"))\n    true = new(attr.Label(\"True\"))\n    not_ = new(attr.Label(\"not\"))\n    and_ = new(attr.Label(\"and\"))\n\n    unary1 = new(attr.Label(\"unary\"))\n    unary2 = new(attr.Label(\"unary\"))\n    binary = new(attr.Label(\"binary\"), attr.Width(2), attr.Shape.box)\n    expr = new(attr.Label(\"expr\"))\n\n    # build graph\n    _ = false > unary1 < not_\n    _ = true > unary2\n\n    _ = and_[attr.Label('Op')] > binary\n\n    # XLabel: For edges, the label will be placed near the center of the edge.\n    _ = unary1[attr.XLabel(\"Left operand\")] > binary\n    _ = unary2[attr.XLabel('Right operand')] > binary\n    _ = binary > expr\n\n    g.view()\n\n\n.. image::  https://raw.githubusercontent.com/thautwarm/graphviz-artist/master/imgs/test_3.png\n    :width: 500px\n    :align: center\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thautwarm/graphviz-artist", "keywords": "graphviz,graph-drawing,dsl", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "graphviz-artist", "package_url": "https://pypi.org/project/graphviz-artist/", "platform": "any", "project_url": "https://pypi.org/project/graphviz-artist/", "project_urls": {"Homepage": "https://github.com/thautwarm/graphviz-artist"}, "release_url": "https://pypi.org/project/graphviz-artist/0.2.0/", "requires_dist": ["graphviz", "typing"], "requires_python": "", "summary": "A chance to focus on graph drawing itself, forget APIs and other stuffs.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/thautwarm/graphviz-artist\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/thautwarm/graphviz-artist.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6850fb17005c0747cd6f10913420841bfdca49da/68747470733a2f2f7472617669732d63692e6f72672f74686175747761726d2f677261706876697a2d6172746973742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/graphviz-artist\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/graphviz-artist.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/745afef6b6ec177ce50de0df70b48f36cb65d90c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f677261706876697a2d6172746973742e737667\"></a>\n<a href=\"https://codecov.io/gh/thautwarm/graphviz-artist\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/thautwarm/graphviz-artist/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16564b0e28760b3d682e06736358c11a27ab84ea/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f677261706876697a2d6172746973742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/graphviz-artist/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/graphviz-artist.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b64d6b28e4d4041cefe2d801447e1d7389e9094e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f677261706876697a2d6172746973742e737667\"></a>\n<a href=\"https://pypi.org/project/graphviz-artist/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/license-mit-teal.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0faaae5a6e7144eaf2c12aa1a9331577e50d117/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d6d69742d7465616c2e737667\"></a>\n<div id=\"graphviz-artist\">\n<h2>Graphviz-Artist</h2>\n<p>You just become an artist in graph drawing once you start using\n<tt><span class=\"pre\">Graphviz-Artist</span></tt>.</p>\n<p>If you don\u2019t have the demand of fine-grained controling upon generated\ngraphs, the learning curve of graphviz-artist is actually horizontal.</p>\n<p>This package provides a higher-level encapsulation for the python\npackage <a href=\"https://github.com/xflr6/graphviz\" rel=\"nofollow\">graphviz</a>, and you\nmight want to have a try at the latter.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<ul>\n<li>Install <a href=\"https://www.graphviz.org/download/\" rel=\"nofollow\">Graphviz</a>.</li>\n<li><tt>pip install <span class=\"pre\">graphviz-artist</span></tt></li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<div id=\"undirected-graph\">\n<h4>Undirected Graph</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphviz_artist</span> <span class=\"k\">as</span> <span class=\"nn\">ga</span>\n\n<span class=\"c1\"># make a graph</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># make nodes</span>\n<span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># (&gt;), (==) and (&lt;) could create edges for graphs.</span>\n<span class=\"c1\"># n2 &gt; n3 / n3 &lt; n2 : there is an edge n2 -&gt; n3</span>\n<span class=\"c1\"># (==) will be introduced later, as it's only meaningful to directed edges.</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">&gt;</span> <span class=\"n\">n2</span> <span class=\"o\">&gt;</span> <span class=\"n\">n3</span> <span class=\"o\">&gt;</span> <span class=\"n\">n1</span>\n\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/thautwarm/graphviz-artist/master/imgs/test_1.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e477660c59584947c5a0943db98e8de442f8416c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686175747761726d2f677261706876697a2d6172746973742f6d61737465722f696d67732f746573745f312e706e67\" width=\"500px\">\n</div>\n<div id=\"directed-graph\">\n<h4>Directed Graph</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphviz_artist</span> <span class=\"k\">as</span> <span class=\"nn\">ga</span>\n\n<span class=\"c1\"># use attr module to see which Graphviz Attributes</span>\n<span class=\"c1\"># could be auto-completed.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphviz_artist.attr</span> <span class=\"k\">as</span> <span class=\"nn\">attr</span>\n\n<span class=\"c1\"># use HorizontalGraph</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">HorizontalGraph</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># `attr.Shape(\"&lt;name&gt;\")` to specify the shape of nodes.</span>\n<span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s1\">'hey'</span><span class=\"p\">),</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Shape</span><span class=\"o\">.</span><span class=\"n\">diamond</span><span class=\"p\">)</span>\n<span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s1\">'hey'</span><span class=\"p\">),</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Shape</span><span class=\"o\">.</span><span class=\"n\">hexagon</span><span class=\"p\">)</span>\n<span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s1\">'you'</span><span class=\"p\">),</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Shape</span><span class=\"o\">.</span><span class=\"n\">star</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># `attr.Directed()` makes a directed edge.</span>\n<span class=\"n\">directed</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Directed</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># `attr.Label` to specify the text that edges display</span>\n<span class=\"n\">edge_label</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"passed_here\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># `attr.Penwidth` to decide the width of edge glyph.</span>\n<span class=\"n\">edge_size</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Penwidth</span><span class=\"p\">(</span><span class=\"mf\">2.</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># in `a &lt; b[b_to_c_attrs...] &gt; c`, the edge `b -&gt; c` will have attribute `b_to_c_attrs`.</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">n3</span><span class=\"p\">[</span><span class=\"n\">directed</span><span class=\"p\">,</span> <span class=\"n\">edge_label</span><span class=\"p\">,</span> <span class=\"n\">edge_size</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">n1</span><span class=\"p\">[</span><span class=\"n\">directed</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">n2</span> <span class=\"o\">&gt;</span> <span class=\"n\">n3</span>\n\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/thautwarm/graphviz-artist/master/imgs/test_2.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c63143f9281f000853de5c5c97e2fd2a6907c53/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686175747761726d2f677261706876697a2d6172746973742f6d61737465722f696d67732f746573745f322e706e67\" width=\"500px\">\n</div>\n<div id=\"expression-tree\">\n<h4>Expression Tree</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphviz_artist</span> <span class=\"k\">as</span> <span class=\"nn\">ga</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphviz_artist.attr</span> <span class=\"k\">as</span> <span class=\"nn\">attr</span>\n\n<span class=\"c1\"># make a graph</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">directed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">new</span>\n\n<span class=\"c1\"># decl nodes</span>\n<span class=\"n\">false</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"False\"</span><span class=\"p\">))</span>\n<span class=\"n\">true</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"True\"</span><span class=\"p\">))</span>\n<span class=\"n\">not_</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"not\"</span><span class=\"p\">))</span>\n<span class=\"n\">and_</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"and\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">unary1</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"unary\"</span><span class=\"p\">))</span>\n<span class=\"n\">unary2</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"unary\"</span><span class=\"p\">))</span>\n<span class=\"n\">binary</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"binary\"</span><span class=\"p\">),</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Width</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Shape</span><span class=\"o\">.</span><span class=\"n\">box</span><span class=\"p\">)</span>\n<span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># build graph</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">false</span> <span class=\"o\">&gt;</span> <span class=\"n\">unary1</span> <span class=\"o\">&lt;</span> <span class=\"n\">not_</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">true</span> <span class=\"o\">&gt;</span> <span class=\"n\">unary2</span>\n\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">and_</span><span class=\"p\">[</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"s1\">'Op'</span><span class=\"p\">)]</span> <span class=\"o\">&gt;</span> <span class=\"n\">binary</span>\n\n<span class=\"c1\"># XLabel: For edges, the label will be placed near the center of the edge.</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">unary1</span><span class=\"p\">[</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">XLabel</span><span class=\"p\">(</span><span class=\"s2\">\"Left operand\"</span><span class=\"p\">)]</span> <span class=\"o\">&gt;</span> <span class=\"n\">binary</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">unary2</span><span class=\"p\">[</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">XLabel</span><span class=\"p\">(</span><span class=\"s1\">'Right operand'</span><span class=\"p\">)]</span> <span class=\"o\">&gt;</span> <span class=\"n\">binary</span>\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">binary</span> <span class=\"o\">&gt;</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/thautwarm/graphviz-artist/master/imgs/test_3.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/557cec90fb3aec9f7bda0f3705c90d518c919582/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686175747761726d2f677261706876697a2d6172746973742f6d61737465722f696d67732f746573745f332e706e67\" width=\"500px\">\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5110014, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "a187b53846ee363287c3382d3848c8dc", "sha256": "c84cb03156263f2414d2f1edb6129927c3534eae6cde3db8de7ebfb42275bbae"}, "downloads": -1, "filename": "graphviz_artist-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a187b53846ee363287c3382d3848c8dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5279, "upload_time": "2019-03-29T18:47:32", "upload_time_iso_8601": "2019-03-29T18:47:32.949621Z", "url": "https://files.pythonhosted.org/packages/1b/66/184f33754062ff3cb7e90070ea1f56438e9f1387e50fc880907991bc83bf/graphviz_artist-0.1.3-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7249cb5d7fb183fad1b7f877e229f011", "sha256": "72cc55052286d253db40b8d7dabc0a4c0e1136cedec8e258d53f220607db511d"}, "downloads": -1, "filename": "graphviz_artist-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7249cb5d7fb183fad1b7f877e229f011", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5247, "upload_time": "2019-04-07T13:52:32", "upload_time_iso_8601": "2019-04-07T13:52:32.704139Z", "url": "https://files.pythonhosted.org/packages/1e/6f/4eaa2d7ad08f1f80fd507e907728ad9d4467663e1ad3236e76daea2fac4f/graphviz_artist-0.2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7249cb5d7fb183fad1b7f877e229f011", "sha256": "72cc55052286d253db40b8d7dabc0a4c0e1136cedec8e258d53f220607db511d"}, "downloads": -1, "filename": "graphviz_artist-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7249cb5d7fb183fad1b7f877e229f011", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5247, "upload_time": "2019-04-07T13:52:32", "upload_time_iso_8601": "2019-04-07T13:52:32.704139Z", "url": "https://files.pythonhosted.org/packages/1e/6f/4eaa2d7ad08f1f80fd507e907728ad9d4467663e1ad3236e76daea2fac4f/graphviz_artist-0.2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:54:29 2020"}