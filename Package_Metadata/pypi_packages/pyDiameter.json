{"info": {"author": "George Zhao", "author_email": "georgezhao_1980@163.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "===================\nIntroduction\n===================\npyDiameter is a library which is used to decoding and encoding Diameter protocol message.\n\nDiameter protocol is an AAA protocol and defined in RFC6733 (RFC3588 is obsoleted by RFC6733).\n\nDecoding a diameter protocol message means, the library will help application decode protolcol bytes to the library object, which is more simple to handle.\n\nEncoding a diameter protocol message means, the library will help application encode the library object(usually a DiaMessage object in pyDiameter library) into a bytes variable.\n\npyDiameter is written by python purely.\n\npyDiameter is written on python 3.6.5, python 2 is not supported.\n\n===================\nAuthor\n===================\nGeorge Zhao who is working for Nokia in 2010-2012, 2014-2018.\n\nmaito: georgezhao_1980@163.com\n\n===================\nHow to get it\n===================\n\n::\n\n\tpip install pyDiameter\n\n===================\nGetting start\n===================\nTo get a start for decoding or encoding a diameter message with pyDiameter, you can read the example after pip installing.\n\nThe example folder is located in pyDiameter folder in your site-packages of your Python.\n\nPlease refer to example-dictTest.py to get start for the Diameter protocol AVP dictionary.\n\nDictionary\n===============\nThis dictionary contains more than 2000 AVP definitions, as well as including several popular vendors definitions (Base, 3GPP, Nokia, Ericsson, Cisco etc.)\n\nPlease note that, decoding is depending on the dictionary defined in pyDiameter.pyDiaAVPDict, if you have some special AVP definition which is not contained in this dictionary, example-dictTest.py could help you to know how to add new AVP definition in the dictionary, and how to update it.\n\nPlease make sure that there are all definitions you need defined in the dictionary before decoding the diameter message.\n\nAVP and Message\n===============\nPlease refer to example-avp.py to get start for the Diameter protolcol AVP handling.\n\nAnd refer to example-msg1.py to get start for the Diameter protocol message handling.\n\nIf you want an example just like a 'Hello, world', please refer to code below.\n\n::\n\n\tfrom pyDiameter.pyDiaMessage import DiaMessage\n\tfrom pyDiameter.pyDiaAVPTypes import DiaAVPStr\n\tfrom pyDiameter.pyDiaAVPPath import DiaAVPPath\n\n\tmsg = DiaMessage()\n\tmsg.setRequestFlag()\n\tavp = DiaAVPStr()\n\tavp.setAVPCode(263)\n\tavp.setAVPVSFlag()\n\tavp.setAVPVendor(10415)\n\tavp.setAVPValue(b'Hello, world.')\n\tdap = DiaAVPPath()\n\tdap.setPath('')\n\tmsg.addAVPByPath(dap, avp)\n\npyDiameter supports only basic types defined in RFC6733.\n\nPlease refer to following table for supported types list. (import them from pyDiameter.pyDiaAVPTypes)\n\n=============== ===============\npyDiameter \t\tRFC6733\n=============== ===============\nDiaAVPStr \t\tOctectString\nDiaAVPInt32 \tInteger32\nDiaAVPUInt32 \tUnsigned32\nDiaAVPInt64 \tInteger64\nDiaAVPUInt64 \tUnsigned64\nDiaAVPFloat32 \tFloat32\nDiaAVPFloat64 \tFloat64\nDiaAVPGroup \tGrouped\n===============\t===============\n\nAll DiaAVPxxx classes are derived from DiaAVP which is defined in pyDiameter.pyDiaAVPBase. And users could not initialize a DiaAVP object since it is an abstract class.\n\nAll Sub-classes of DiaAVP have method called getAVPType().\n\nIt return a Python string which describes the type of the object.\n\nThe returned value could be one of values of following. (import them from pyDiameter.pyDiaAVPConst)\n\n================== ===============\nConst \t\t\t\tValue\n================== ===============\nAVP_TYPE_UNKNOWN \tunknown\nAVP_TYPE_STR \t\tstr\nAVP_TYPE_INT32 \t\tint32\nAVP_TYPE_UINT32 \tuint32\nAVP_TYPE_INT64 \t\tint64\nAVP_TYPE_UINT64 \tuint64\nAVP_TYPE_FLOAT32 \tfloat32\nAVP_TYPE_FLOAT64 \tfloat64\nAVP_TYPE_GROUP\t\tgrp\n================== ===============\n\nAVP Path\n===============\nWhen you operate DiaMessage object in pyDiameter.pyDiaMessage, sometimes, you need visit, add or remove some AVPs from the message.\n\nYou can use DiaAVPPath object to locate the AVP in the message.\n\nDiaAVPPath could be imported from pyDiameter.pyDiaAVPPath.\n\nAnd DiaAVPPath object uses a diameter avp path language to describe the AVP path. (Defined by George Zhao, not a well-known language.)\n\nThe AVP path is described as:\n\n::\n\n'vendor/avpCode[sameCodeIndex]->vendor/avpCode[sameCodeIndex]->vendor/avpCode[sameCodeIndex]...'\n\ne.g. 10415/628[1]->10415/630[0] means I want to visit the AVP, the location is: the first AVP 630(vendor 10415) under the second AVP 628(vendor 10415).\n\nsameCodeIndex means if there are several same AVPs with same AVP code and vendor, which index is target to be visited.\n\n**Note that, sameCodeIndex is counted from zero.**\n\nTools\n===============\n\nIn pyDiameter.pyDiaAVPTools, we provide four functions to help you treat some special AVP types.\n\nThe address type, and the time type are both derived from OctectString basic type according to RFC6733.\n\n================== ================================================================================================================================\nFunctions\t\t\tExamples\n================== ================================================================================================================================\naddress_to_bytes\taddress_to_bytes(('ipv4','172.18.0.1')); address_to_bytes(('ipv6','2000:1234:ac12:abcd:abcd:abcd:abcd:abc1'))\nbytes_to_address\tbytes_to_address(diameter_address_avp_bytes_buff)\ntime_to_bytes\t\ttime_to_bytes(year=1980, month=7 , day=8, hour=20, minute=0, second=0)\nbytes_to_time\t\tbytes_to_time(bytes_buff)\n================== ================================================================================================================================\n\n**Note that, time is counted from Year 1968 Jan 20, 03:14:08 to Year 2104, Feb 26, 09:42:23, according to RFC6733 and an even obsoleted RFC4330.**\n\n**Only ipv4 and ipv6 are supported by tools, other protocols should be handled by user as an ordinary OctectString.**\n\n**When you set ipv6 value, the compress ipv6 value could be supported by tools, like 2000::1 or ::1.**\n\nAny other problem, please refer to 'Any problem' section below.\n\n===================\nAny problem\n===================\nPlease contact georgezhao_1980@163.com\n\nAuthor will check mail irregularly, support is not guaranteed.\n\nAuthor will answer question as immediately as author can.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://not-available.now", "keywords": "", "license": "BSD License", "maintainer": "George Zhao", "maintainer_email": "georgezhao_1980@163.com", "name": "pyDiameter", "package_url": "https://pypi.org/project/pyDiameter/", "platform": "all", "project_url": "https://pypi.org/project/pyDiameter/", "project_urls": {"Homepage": "http://not-available.now"}, "release_url": "https://pypi.org/project/pyDiameter/0.18.7.15/", "requires_dist": null, "requires_python": "", "summary": "pyDiameter is created by George Zhao, who is working for NOKIA, 2010-2012, 2014-2018. This lib is used for encoding and decoding Diameter protocol message(an AAA protocol replace the RADIUS).", "version": "0.18.7.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>pyDiameter is a library which is used to decoding and encoding Diameter protocol message.</p>\n<p>Diameter protocol is an AAA protocol and defined in RFC6733 (RFC3588 is obsoleted by RFC6733).</p>\n<p>Decoding a diameter protocol message means, the library will help application decode protolcol bytes to the library object, which is more simple to handle.</p>\n<p>Encoding a diameter protocol message means, the library will help application encode the library object(usually a DiaMessage object in pyDiameter library) into a bytes variable.</p>\n<p>pyDiameter is written by python purely.</p>\n<p>pyDiameter is written on python 3.6.5, python 2 is not supported.</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>George Zhao who is working for Nokia in 2010-2012, 2014-2018.</p>\n<p>maito: <a href=\"mailto:georgezhao_1980%40163.com\">georgezhao_1980<span>@</span>163<span>.</span>com</a></p>\n</div>\n<div id=\"how-to-get-it\">\n<h2>How to get it</h2>\n<pre>pip install pyDiameter\n</pre>\n</div>\n<div id=\"getting-start\">\n<h2>Getting start</h2>\n<p>To get a start for decoding or encoding a diameter message with pyDiameter, you can read the example after pip installing.</p>\n<p>The example folder is located in pyDiameter folder in your site-packages of your Python.</p>\n<p>Please refer to example-dictTest.py to get start for the Diameter protocol AVP dictionary.</p>\n<div id=\"dictionary\">\n<h3>Dictionary</h3>\n<p>This dictionary contains more than 2000 AVP definitions, as well as including several popular vendors definitions (Base, 3GPP, Nokia, Ericsson, Cisco etc.)</p>\n<p>Please note that, decoding is depending on the dictionary defined in pyDiameter.pyDiaAVPDict, if you have some special AVP definition which is not contained in this dictionary, example-dictTest.py could help you to know how to add new AVP definition in the dictionary, and how to update it.</p>\n<p>Please make sure that there are all definitions you need defined in the dictionary before decoding the diameter message.</p>\n</div>\n<div id=\"avp-and-message\">\n<h3>AVP and Message</h3>\n<p>Please refer to example-avp.py to get start for the Diameter protolcol AVP handling.</p>\n<p>And refer to example-msg1.py to get start for the Diameter protocol message handling.</p>\n<p>If you want an example just like a \u2018Hello, world\u2019, please refer to code below.</p>\n<pre>from pyDiameter.pyDiaMessage import DiaMessage\nfrom pyDiameter.pyDiaAVPTypes import DiaAVPStr\nfrom pyDiameter.pyDiaAVPPath import DiaAVPPath\n\nmsg = DiaMessage()\nmsg.setRequestFlag()\navp = DiaAVPStr()\navp.setAVPCode(263)\navp.setAVPVSFlag()\navp.setAVPVendor(10415)\navp.setAVPValue(b'Hello, world.')\ndap = DiaAVPPath()\ndap.setPath('')\nmsg.addAVPByPath(dap, avp)\n</pre>\n<p>pyDiameter supports only basic types defined in RFC6733.</p>\n<p>Please refer to following table for supported types list. (import them from pyDiameter.pyDiaAVPTypes)</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>pyDiameter</th>\n<th>RFC6733</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>DiaAVPStr</td>\n<td>OctectString</td>\n</tr>\n<tr><td>DiaAVPInt32</td>\n<td>Integer32</td>\n</tr>\n<tr><td>DiaAVPUInt32</td>\n<td>Unsigned32</td>\n</tr>\n<tr><td>DiaAVPInt64</td>\n<td>Integer64</td>\n</tr>\n<tr><td>DiaAVPUInt64</td>\n<td>Unsigned64</td>\n</tr>\n<tr><td>DiaAVPFloat32</td>\n<td>Float32</td>\n</tr>\n<tr><td>DiaAVPFloat64</td>\n<td>Float64</td>\n</tr>\n<tr><td>DiaAVPGroup</td>\n<td>Grouped</td>\n</tr>\n</tbody>\n</table>\n<p>All DiaAVPxxx classes are derived from DiaAVP which is defined in pyDiameter.pyDiaAVPBase. And users could not initialize a DiaAVP object since it is an abstract class.</p>\n<p>All Sub-classes of DiaAVP have method called getAVPType().</p>\n<p>It return a Python string which describes the type of the object.</p>\n<p>The returned value could be one of values of following. (import them from pyDiameter.pyDiaAVPConst)</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Const</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>AVP_TYPE_UNKNOWN</td>\n<td>unknown</td>\n</tr>\n<tr><td>AVP_TYPE_STR</td>\n<td>str</td>\n</tr>\n<tr><td>AVP_TYPE_INT32</td>\n<td>int32</td>\n</tr>\n<tr><td>AVP_TYPE_UINT32</td>\n<td>uint32</td>\n</tr>\n<tr><td>AVP_TYPE_INT64</td>\n<td>int64</td>\n</tr>\n<tr><td>AVP_TYPE_UINT64</td>\n<td>uint64</td>\n</tr>\n<tr><td>AVP_TYPE_FLOAT32</td>\n<td>float32</td>\n</tr>\n<tr><td>AVP_TYPE_FLOAT64</td>\n<td>float64</td>\n</tr>\n<tr><td>AVP_TYPE_GROUP</td>\n<td>grp</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"avp-path\">\n<h3>AVP Path</h3>\n<p>When you operate DiaMessage object in pyDiameter.pyDiaMessage, sometimes, you need visit, add or remove some AVPs from the message.</p>\n<p>You can use DiaAVPPath object to locate the AVP in the message.</p>\n<p>DiaAVPPath could be imported from pyDiameter.pyDiaAVPPath.</p>\n<p>And DiaAVPPath object uses a diameter avp path language to describe the AVP path. (Defined by George Zhao, not a well-known language.)</p>\n<p>The AVP path is described as:</p>\n<pre>'vendor/avpCode[sameCodeIndex]-&gt;vendor/avpCode[sameCodeIndex]-&gt;vendor/avpCode[sameCodeIndex]...'\n</pre>\n<p>e.g. 10415/628[1]-&gt;10415/630[0] means I want to visit the AVP, the location is: the first AVP 630(vendor 10415) under the second AVP 628(vendor 10415).</p>\n<p>sameCodeIndex means if there are several same AVPs with same AVP code and vendor, which index is target to be visited.</p>\n<p><strong>Note that, sameCodeIndex is counted from zero.</strong></p>\n</div>\n<div id=\"tools\">\n<h3>Tools</h3>\n<p>In pyDiameter.pyDiaAVPTools, we provide four functions to help you treat some special AVP types.</p>\n<p>The address type, and the time type are both derived from OctectString basic type according to RFC6733.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Functions</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>address_to_bytes</td>\n<td>address_to_bytes((\u2018ipv4\u2019,\u2019172.18.0.1\u2019)); address_to_bytes((\u2018ipv6\u2019,\u20192000:1234:ac12:abcd:abcd:abcd:abcd:abc1\u2019))</td>\n</tr>\n<tr><td>bytes_to_address</td>\n<td>bytes_to_address(diameter_address_avp_bytes_buff)</td>\n</tr>\n<tr><td>time_to_bytes</td>\n<td>time_to_bytes(year=1980, month=7 , day=8, hour=20, minute=0, second=0)</td>\n</tr>\n<tr><td>bytes_to_time</td>\n<td>bytes_to_time(bytes_buff)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note that, time is counted from Year 1968 Jan 20, 03:14:08 to Year 2104, Feb 26, 09:42:23, according to RFC6733 and an even obsoleted RFC4330.</strong></p>\n<p><strong>Only ipv4 and ipv6 are supported by tools, other protocols should be handled by user as an ordinary OctectString.</strong></p>\n<p><strong>When you set ipv6 value, the compress ipv6 value could be supported by tools, like 2000::1 or ::1.</strong></p>\n<p>Any other problem, please refer to \u2018Any problem\u2019 section below.</p>\n</div>\n</div>\n<div id=\"any-problem\">\n<h2>Any problem</h2>\n<p>Please contact <a href=\"mailto:georgezhao_1980%40163.com\">georgezhao_1980<span>@</span>163<span>.</span>com</a></p>\n<p>Author will check mail irregularly, support is not guaranteed.</p>\n<p>Author will answer question as immediately as author can.</p>\n</div>\n\n          </div>"}, "last_serial": 4701823, "releases": {"0.18.7.13": [{"comment_text": "", "digests": {"md5": "98ee980cb348e5e74d8927f48811faf0", "sha256": "6f9977fa70b2cb46d6e740306e941f77a3c66df2b890ac8e426a3197df6ace08"}, "downloads": -1, "filename": "pyDiameter-0.18.7.13.tar.gz", "has_sig": false, "md5_digest": "98ee980cb348e5e74d8927f48811faf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39655, "upload_time": "2018-07-10T01:28:06", "upload_time_iso_8601": "2018-07-10T01:28:06.405289Z", "url": "https://files.pythonhosted.org/packages/28/ff/fabb8af881b6acb7eefc05116f60a2e1ef29be3a7aec1d824dc54a29d8da/pyDiameter-0.18.7.13.tar.gz", "yanked": false}], "0.18.7.14": [{"comment_text": "", "digests": {"md5": "1af73bb836ad259e314bf82f85e1f791", "sha256": "7159ad232884eff01f8d256eb8b3df9eac404ac838585ef0fcaf0da3449fc99a"}, "downloads": -1, "filename": "pyDiameter-0.18.7.14.tar.gz", "has_sig": false, "md5_digest": "1af73bb836ad259e314bf82f85e1f791", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39632, "upload_time": "2018-10-12T09:42:38", "upload_time_iso_8601": "2018-10-12T09:42:38.055060Z", "url": "https://files.pythonhosted.org/packages/5b/4c/01c2094a643f1627f396fb8bb97ac2bf9b34d8683c1b24c8005e512fa54c/pyDiameter-0.18.7.14.tar.gz", "yanked": false}], "0.18.7.15": [{"comment_text": "", "digests": {"md5": "3eebef9cebfd5b8f1748e19ab0d65cb2", "sha256": "3e9f211bc6807a25c9aab32ec273b540479044203ef91301ca15e0ef93396691"}, "downloads": -1, "filename": "pyDiameter-0.18.7.15.tar.gz", "has_sig": false, "md5_digest": "3eebef9cebfd5b8f1748e19ab0d65cb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39650, "upload_time": "2019-01-16T06:31:52", "upload_time_iso_8601": "2019-01-16T06:31:52.858798Z", "url": "https://files.pythonhosted.org/packages/c1/e6/6091aa72ab52a1de3afa6a9e79ccdd8edab8e73c42e27ae1b4aa789099e2/pyDiameter-0.18.7.15.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3eebef9cebfd5b8f1748e19ab0d65cb2", "sha256": "3e9f211bc6807a25c9aab32ec273b540479044203ef91301ca15e0ef93396691"}, "downloads": -1, "filename": "pyDiameter-0.18.7.15.tar.gz", "has_sig": false, "md5_digest": "3eebef9cebfd5b8f1748e19ab0d65cb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39650, "upload_time": "2019-01-16T06:31:52", "upload_time_iso_8601": "2019-01-16T06:31:52.858798Z", "url": "https://files.pythonhosted.org/packages/c1/e6/6091aa72ab52a1de3afa6a9e79ccdd8edab8e73c42e27ae1b4aa789099e2/pyDiameter-0.18.7.15.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:03 2020"}