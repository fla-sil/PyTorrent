{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "Introduction\n============\n\nThis package provides an extension to the test runner to the one that ships\nwith `zope.testrunner`_.\n\nIt is based on (and can be used as a wholesale replacement for),\n``collective.xmltestreport``.\n\nThe test runner is identical to the one in ``zope.testrunner``, except:\n\n* it is capable of writing test reports in the XML format output by JUnit/Ant.\n  This allows the test results to be analysed by tools such as the\n  Hudson/Jenkins continuous integration server.\n* it can output reports in the CoreJet XML format - see `corejet.core`_\n\nUsage\n=====\n\nIn your buildout, add a part like this::\n\n    [buildout]\n    parts =\n        ...\n        test\n\n    ...\n\n    [test]\n    recipe = corejet.recipe.testrunner\n    eggs =\n        my.package\n    defaults = ['--auto-color', '--auto-progress']\n\nThe recipe (`corejet.recipe.testrunner`_) accepts the same options as\n`zc.recipe.testrunner`_, so look at its documentation for details.\n\nWhen buildout is run, you should have a script in ``bin/test`` and a directory\n``parts/test``.\n\nTo run the tests, use the ``bin/test`` script. If you pass the ``--xml``\noption, test reports will be written to ``parts/test/testreports`` directory::\n\n    $ bin/test --xml -s my.package\n\nIf you are using Hudson, you can now configure the build to publish JUnit\ntest reports for ``<buildoutdir>/parts/test/testreports/*.xml``.\n\nTo output a CoreJet report, do::\n\n    $ bin/test --corejet=\"file,path/to/corejet/file.xml\" -s my.package\n\nThe CoreJet report and output XML file will be placed in\n``parts/test/corejet``. You can combine ``--xml`` and ``--corejet``.\n\nThe example above uses the ``file`` CoreJet repository source, which expects\nto find a CoreJet XML file at the path specified after the comma.\n\nRepository sources\n==================\n\nOther repository sources can be registered via entry points: Packages must\nregister an entry point under ``corejet.repositorysource`` identifying a\ncallable that is passed the string *after* the comma with a unique name and\nwhich should return a ``corejet.core.model.RequirementsCatalogue`` object.\n\nHence, the ``file`` source is defined as::\n\n    def fileSource(path):\n        catalogue = RequirementsCatalogue()\n        with open(path) as stream:\n            catalogue.populate(stream)\n        return catalogue\n\nand registered with::\n\n    [corejet.repositorysource]\n    file = corejet.testrunner.filesource:fileSource\n\nUse ``bin/test --help`` for a full list of options.\n\n.. _corejet.recipe.testrunner: http://pypi.python.org/pypi/corejet.recipe.testrunner\n.. _zope.testrunner: http://pypi.python.org/pypi/zope.testrunner\n.. _zc.recipe.testrunner: http://pypi.python.org/pypi/zc.recipe.testrunner\n.. _corejet.core: http://pypi.python.org/pypi/corejet.core\n\nChangelog\n=========\n\n\n1.0.1 (2012-05-30)\n------------------\n\n- Fixed the check for non-corejet tests to rely on adaptation instead of magic.\n  [datakurre]\n\n\n1.0.0 (2012-05-26)\n------------------\n\n- Fixed to allow requirements-sources with no options\n  [datakurre]\n- Fixed to work with test-suites containing non-corejet-tests\n  [datakurre]\n- Added support for story-level steps\n  [datakurre]\n\n\n1.0a4\n-----\n\n- Python 2.5 compatibility\n  [jodok]\n\n- MANIFEST.in to include CHANGES.txt in sdist\n  [jodok]\n\n\n1.0a3\n-----\n\n- Fix broken package\n\n\n1.0a1\n-----\n\n- First release\n  [optilude]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://corejet.org", "keywords": "hudson jenkins junit xml corejet zope.testing", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "corejet.testrunner", "package_url": "https://pypi.org/project/corejet.testrunner/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/corejet.testrunner/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://corejet.org"}, "release_url": "https://pypi.org/project/corejet.testrunner/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "A test runner which can output an XML report compatible with JUnit and Hudson/Jenkins as well as XML and HTML reports compatible with the CoreJet BDD standard", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package provides an extension to the test runner to the one that ships\nwith <a href=\"http://pypi.python.org/pypi/zope.testrunner\" rel=\"nofollow\">zope.testrunner</a>.</p>\n<p>It is based on (and can be used as a wholesale replacement for),\n<tt>collective.xmltestreport</tt>.</p>\n<p>The test runner is identical to the one in <tt>zope.testrunner</tt>, except:</p>\n<ul>\n<li>it is capable of writing test reports in the XML format output by JUnit/Ant.\nThis allows the test results to be analysed by tools such as the\nHudson/Jenkins continuous integration server.</li>\n<li>it can output reports in the CoreJet XML format - see <a href=\"http://pypi.python.org/pypi/corejet.core\" rel=\"nofollow\">corejet.core</a></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In your buildout, add a part like this:</p>\n<pre>[buildout]\nparts =\n    ...\n    test\n\n...\n\n[test]\nrecipe = corejet.recipe.testrunner\neggs =\n    my.package\ndefaults = ['--auto-color', '--auto-progress']\n</pre>\n<p>The recipe (<a href=\"http://pypi.python.org/pypi/corejet.recipe.testrunner\" rel=\"nofollow\">corejet.recipe.testrunner</a>) accepts the same options as\n<a href=\"http://pypi.python.org/pypi/zc.recipe.testrunner\" rel=\"nofollow\">zc.recipe.testrunner</a>, so look at its documentation for details.</p>\n<p>When buildout is run, you should have a script in <tt>bin/test</tt> and a directory\n<tt>parts/test</tt>.</p>\n<p>To run the tests, use the <tt>bin/test</tt> script. If you pass the <tt><span class=\"pre\">--xml</span></tt>\noption, test reports will be written to <tt>parts/test/testreports</tt> directory:</p>\n<pre>$ bin/test --xml -s my.package\n</pre>\n<p>If you are using Hudson, you can now configure the build to publish JUnit\ntest reports for <tt><span class=\"pre\">&lt;buildoutdir&gt;/parts/test/testreports/*.xml</span></tt>.</p>\n<p>To output a CoreJet report, do:</p>\n<pre>$ bin/test --corejet=\"file,path/to/corejet/file.xml\" -s my.package\n</pre>\n<p>The CoreJet report and output XML file will be placed in\n<tt>parts/test/corejet</tt>. You can combine <tt><span class=\"pre\">--xml</span></tt> and <tt><span class=\"pre\">--corejet</span></tt>.</p>\n<p>The example above uses the <tt>file</tt> CoreJet repository source, which expects\nto find a CoreJet XML file at the path specified after the comma.</p>\n</div>\n<div id=\"repository-sources\">\n<h2>Repository sources</h2>\n<p>Other repository sources can be registered via entry points: Packages must\nregister an entry point under <tt>corejet.repositorysource</tt> identifying a\ncallable that is passed the string <em>after</em> the comma with a unique name and\nwhich should return a <tt>corejet.core.model.RequirementsCatalogue</tt> object.</p>\n<p>Hence, the <tt>file</tt> source is defined as:</p>\n<pre>def fileSource(path):\n    catalogue = RequirementsCatalogue()\n    with open(path) as stream:\n        catalogue.populate(stream)\n    return catalogue\n</pre>\n<p>and registered with:</p>\n<pre>[corejet.repositorysource]\nfile = corejet.testrunner.filesource:fileSource\n</pre>\n<p>Use <tt>bin/test <span class=\"pre\">--help</span></tt> for a full list of options.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.0.1 (2012-05-30)</h3>\n<ul>\n<li>Fixed the check for non-corejet tests to rely on adaptation instead of magic.\n[datakurre]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.0 (2012-05-26)</h3>\n<ul>\n<li>Fixed to allow requirements-sources with no options\n[datakurre]</li>\n<li>Fixed to work with test-suites containing non-corejet-tests\n[datakurre]</li>\n<li>Added support for story-level steps\n[datakurre]</li>\n</ul>\n</div>\n<div id=\"a4\">\n<h3>1.0a4</h3>\n<ul>\n<li>Python 2.5 compatibility\n[jodok]</li>\n<li>MANIFEST.in to include CHANGES.txt in sdist\n[jodok]</li>\n</ul>\n</div>\n<div id=\"a3\">\n<h3>1.0a3</h3>\n<ul>\n<li>Fix broken package</li>\n</ul>\n</div>\n<div id=\"a1\">\n<h3>1.0a1</h3>\n<ul>\n<li>First release\n[optilude]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 642638, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "249a275e38afeb3d10518c2acbb9faec", "sha256": "cdec0f7ac092302574cc2d8a464c9558a705803d048a992c7d01d9192c26bac4"}, "downloads": -1, "filename": "corejet.testrunner-1.0.0.zip", "has_sig": false, "md5_digest": "249a275e38afeb3d10518c2acbb9faec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15970, "upload_time": "2012-05-26T15:02:02", "upload_time_iso_8601": "2012-05-26T15:02:02.512833Z", "url": "https://files.pythonhosted.org/packages/7c/72/a1151a4177a2805cbc0443e435e4f5cfa95c25950a0cac5e75132018f15e/corejet.testrunner-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "588c5393fe7329580c3f9e06555948e8", "sha256": "990fd5def9e2f4c4aa5be89dabca051e3a0df9a229a3a654638dd978c030deba"}, "downloads": -1, "filename": "corejet.testrunner-1.0.1.zip", "has_sig": false, "md5_digest": "588c5393fe7329580c3f9e06555948e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16313, "upload_time": "2012-05-30T06:32:52", "upload_time_iso_8601": "2012-05-30T06:32:52.197113Z", "url": "https://files.pythonhosted.org/packages/94/c9/b7be176a86d37800ce177abae7263ffa7343b71c158c3d4e5c9a22a37f89/corejet.testrunner-1.0.1.zip", "yanked": false}], "1.0a1": [{"comment_text": "", "digests": {"md5": "28b261b17626f9720f9fac73604ae1e9", "sha256": "9dc70f0e36ee3f6a5915712a33210fc4465cd570ed2957b9db1cb0883e3e43f0"}, "downloads": -1, "filename": "corejet.testrunner-1.0a1.tar.gz", "has_sig": false, "md5_digest": "28b261b17626f9720f9fac73604ae1e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8884, "upload_time": "2011-05-16T02:05:22", "upload_time_iso_8601": "2011-05-16T02:05:22.410378Z", "url": "https://files.pythonhosted.org/packages/06/ff/7de598721f5689203d9a8c28a491173e71aa824d599442d7865b79d77027/corejet.testrunner-1.0a1.tar.gz", "yanked": false}], "1.0a3": [{"comment_text": "", "digests": {"md5": "dd5900076f0e8d10ab6640f763f08f8e", "sha256": "5e4a44cdc3b72489a53f4678925b66e9a9900481cbf8ed14824b266e9cb9013e"}, "downloads": -1, "filename": "corejet.testrunner-1.0a3.zip", "has_sig": false, "md5_digest": "dd5900076f0e8d10ab6640f763f08f8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15085, "upload_time": "2011-05-20T00:40:30", "upload_time_iso_8601": "2011-05-20T00:40:30.988557Z", "url": "https://files.pythonhosted.org/packages/b8/58/fa70a756274d59e9cfb3af1100f639b6c2757ecf5a33cd734bf526f60b97/corejet.testrunner-1.0a3.zip", "yanked": false}], "1.0a4": []}, "urls": [{"comment_text": "", "digests": {"md5": "588c5393fe7329580c3f9e06555948e8", "sha256": "990fd5def9e2f4c4aa5be89dabca051e3a0df9a229a3a654638dd978c030deba"}, "downloads": -1, "filename": "corejet.testrunner-1.0.1.zip", "has_sig": false, "md5_digest": "588c5393fe7329580c3f9e06555948e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16313, "upload_time": "2012-05-30T06:32:52", "upload_time_iso_8601": "2012-05-30T06:32:52.197113Z", "url": "https://files.pythonhosted.org/packages/94/c9/b7be176a86d37800ce177abae7263ffa7343b71c158c3d4e5c9a22a37f89/corejet.testrunner-1.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:43:13 2020"}