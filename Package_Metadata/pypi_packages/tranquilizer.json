{"info": {"author": "Albert DeFusco", "author_email": "albert.defusco@me.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Tranquilizer\n\nDeploy a REST API with one line by decorating your functions.\n\n## Install\n\nThe package is available for all Mac, Linux, and Windows on my conda channel. Python 2 is not supported.\n\n```\n> conda install -c conda-forge tranquilizer\n```\n\n## Quick start\n\nIn a script file called `cheese_shop.py` the decorated function\nwill be served as an end point called `cheese` with the GET method. The\nfunction must return a JSON serializable object. Dictionaries are preferable.\n\nSee the [complete description of `@tranquilize()`](#tranquilize-decorator) below.\n\n```python\nfrom tranquilizer import tranquilize\n\n@tranquilize()\ndef order(cheese):\n    '''I'd like to buy some cheese!'''\n    return {'response':\"I'm afraid we're fresh out of {}, Sir.\".format(cheese)}\n```\n\nThe REST API is served by [Flask](http://flask.pocoo.org/) and [Flask-RESTPlus](http://flask-restplus.readthedocs.io/en/stable/index.html)\nusing the `tranquilizer` command.\n\n\n```\n> tranquilizer cheese_shop.py\n * Serving Flask app \"tranquilizer.application\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://0.0.0.0:8086/ (Press CTRL+C to quit)\n\n```\n\nLet's see if there is any Red Leicester.\n\n```\n> curl -G http://localhost:8086/order --data-urlencode \"cheese=Red Leicester\"\n{\"response\":\"I'm afraid we're fresh out of Red Leicester, Sir.\"}\n```\n\nHow about in Python?\n\n```python\nIn [1]: import requests\n\nIn [2]: response = requests.get('http://localhost:8086/order', params={'cheese':'Red Leicester'})\n\nIn [3]: response.json()\nOut[3]: {'response': \"I'm afraid we're fresh out of Red Leicester, Sir.\"}\n```\n\nThe *tranquilized* API is documented with [Swagger](https://swagger.io/tools/open-source/) and is accessible\nin your web browser at [http://localhost:8086](http://localhost:8086).\n\n![](img/swagger.png)\n\n## Tranquilize Decorator\n\nThe `@tranqulize` decorator will assign the GET method by default. POST is also supported with `method='post'`.\nOther methods are under consideration.\n\nBy default a *tranquilized* function will receive all inputs as strings. This behavior can be modified by using [type hints](https://docs.python.org/3/library/typing.html). When data is received by the Flask server it will use the provided\ntype function to transform the string to the requested data type. This avoids having to perform the conversion in your *tranquilized* function.\n\n## Supported source formats\n\nTranquilizer can serve functions written in Python source (`.py`) files or Jupyter Notebooks (`.ipynb`).\n\nWhen working interactively in Jupyter Notebooks the decorated functions will continue to operate as normal.\nNote that all calls to [Jupyter Magic](https://ipython.readthedocs.io/en/stable/interactive/magics.html)\nand Shell (`!`) commands will be ignored when the REST API is served.\nOnly those lines will be ignored, the rest of the cell will continue to run.\n\n## Data Types\n\nIn addition to [*builtin* types](https://docs.python.org/3/library/stdtypes.html) Tranquilizer \nprovides specialized support for Lists, date/datetime, and files. \n\n\n|Type|Description|\n|----|-----------|\n|`datetime.date` or `datetime.datetime`| Converts string with `dateutil.parser.parse` and returns specified type.|\n|`list`| Converts *repeated* arguments to a list of strings.|\n|`typing.List[<type>]`| Converts *repeated* arguments to a list; each value is converted to `<type>`.|\n\n`List` arguments are constructed using the `action='append'` argument described in\nthe [Flask RESTPlus documentation](http://flask-restplus.readthedocs.io/en/stable/parsing.html#multiple-values-lists).\nAny valid type can be used in `List[]`.\n\nThe following file-like types are handled by [werkzeug `FileStorage`](http://werkzeug.pocoo.org/docs/0.14/datastructures/#werkzeug.datastructures.FileStorage).\n`FileStorage` is a file-like object that supports methods like `.read()` and `.readlines()`.\nThese types support sending files with cURL using `-F`.\n\n|Type|Description|\n|----|-----------|\n|`typing.BinaryIO`| File-like object to read binary data.|\n|`typing.TextIO`| Converts `FileStorage` type to `io.StringIO()`.|\n\nFurther, specific support for Image and NumPy files are provided. The binary contents of the file are automatically converted.\n\n|Type|Description|\n|----|-----------|\n|`PIL.Image.Image`| Converts `FileStorage` type to PIL Image.|\n|`numpy.ndarray`| Converts `FileStorage` type to NumPy array using `np.load()`. |\n\n### Custom types\n\nCustom type classes can be built...\n\n## Type hints example\n\nThe example below uses `int`, `datetime.datetime`, and `typing.List`. `datetime.datetime` support\nhas been built with `datetutil` and will convert any compatible datetime string to a `datetime.datetime` object. `typing.List`\nsupports specialization with `[]` and will transform all *repeated* arguments passed to the REST API into a list and convert\nthe type of each element.\n\nFinally, tranquilizer supports default arguments.\n\n```python\nfrom tranquilizer import tranquilize\nfrom datetime import date\nfrom typing import List\n\n@tranquilize(method='post')\ndef convert(string: str, date: date, items: List[float], factor: int = 10):\n    '''Let's convert strings to something useful'''\n\n    new_items = [i * factor for i in items]\n\n    response = {\n            'string': string.upper(),\n            'date'  : date.strftime('%c'),\n            'items' : new_items\n    }\n\n    return response\n```\n\nLet's see what happens when I POST to this REST API.\n\n```python\nIn [1]: data = {'string':'hello, world!', 'date':'4th July 1776', 'items':range(5)}\n\nIn [2]: import requests\n\nIn [3]: response = requests.post('http://localhost:8086/convert', data=data)\n\nIn [4]: response.json()\nOut[4]:\n{'date': 'Thu Jul  4 00:00:00 1776',\n 'items': [0.0, 10.0, 20.0, 30.0, 40.0],\n 'string': 'HELLO, WORLD!'}\n\nIn [5]:\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AlbertDeFusco/tranquilizer", "keywords": "", "license": "BSD 3-clause", "maintainer": "", "maintainer_email": "", "name": "tranquilizer", "package_url": "https://pypi.org/project/tranquilizer/", "platform": "Windows", "project_url": "https://pypi.org/project/tranquilizer/", "project_urls": {"Homepage": "https://github.com/AlbertDeFusco/tranquilizer"}, "release_url": "https://pypi.org/project/tranquilizer/0.4.1/", "requires_dist": null, "requires_python": ">=3.5, <3.8", "summary": "Put your functions to REST", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tranquilizer</h1>\n<p>Deploy a REST API with one line by decorating your functions.</p>\n<h2>Install</h2>\n<p>The package is available for all Mac, Linux, and Windows on my conda channel. Python 2 is not supported.</p>\n<pre><code>&gt; conda install -c conda-forge tranquilizer\n</code></pre>\n<h2>Quick start</h2>\n<p>In a script file called <code>cheese_shop.py</code> the decorated function\nwill be served as an end point called <code>cheese</code> with the GET method. The\nfunction must return a JSON serializable object. Dictionaries are preferable.</p>\n<p>See the <a href=\"#tranquilize-decorator\" rel=\"nofollow\">complete description of <code>@tranquilize()</code></a> below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tranquilizer</span> <span class=\"kn\">import</span> <span class=\"n\">tranquilize</span>\n\n<span class=\"nd\">@tranquilize</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"n\">cheese</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''I'd like to buy some cheese!'''</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'response'</span><span class=\"p\">:</span><span class=\"s2\">\"I'm afraid we're fresh out of </span><span class=\"si\">{}</span><span class=\"s2\">, Sir.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cheese</span><span class=\"p\">)}</span>\n</pre>\n<p>The REST API is served by <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a> and <a href=\"http://flask-restplus.readthedocs.io/en/stable/index.html\" rel=\"nofollow\">Flask-RESTPlus</a>\nusing the <code>tranquilizer</code> command.</p>\n<pre><code>&gt; tranquilizer cheese_shop.py\n * Serving Flask app \"tranquilizer.application\" (lazy loading)\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://0.0.0.0:8086/ (Press CTRL+C to quit)\n\n</code></pre>\n<p>Let's see if there is any Red Leicester.</p>\n<pre><code>&gt; curl -G http://localhost:8086/order --data-urlencode \"cheese=Red Leicester\"\n{\"response\":\"I'm afraid we're fresh out of Red Leicester, Sir.\"}\n</code></pre>\n<p>How about in Python?</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8086/order'</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'cheese'</span><span class=\"p\">:</span><span class=\"s1\">'Red Leicester'</span><span class=\"p\">})</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"p\">{</span><span class=\"s1\">'response'</span><span class=\"p\">:</span> <span class=\"s2\">\"I'm afraid we're fresh out of Red Leicester, Sir.\"</span><span class=\"p\">}</span>\n</pre>\n<p>The <em>tranquilized</em> API is documented with <a href=\"https://swagger.io/tools/open-source/\" rel=\"nofollow\">Swagger</a> and is accessible\nin your web browser at <a href=\"http://localhost:8086\" rel=\"nofollow\">http://localhost:8086</a>.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6c8e5f132f20dc2861e8404fd60255d8d702830/696d672f737761676765722e706e67\"></p>\n<h2>Tranquilize Decorator</h2>\n<p>The <code>@tranqulize</code> decorator will assign the GET method by default. POST is also supported with <code>method='post'</code>.\nOther methods are under consideration.</p>\n<p>By default a <em>tranquilized</em> function will receive all inputs as strings. This behavior can be modified by using <a href=\"https://docs.python.org/3/library/typing.html\" rel=\"nofollow\">type hints</a>. When data is received by the Flask server it will use the provided\ntype function to transform the string to the requested data type. This avoids having to perform the conversion in your <em>tranquilized</em> function.</p>\n<h2>Supported source formats</h2>\n<p>Tranquilizer can serve functions written in Python source (<code>.py</code>) files or Jupyter Notebooks (<code>.ipynb</code>).</p>\n<p>When working interactively in Jupyter Notebooks the decorated functions will continue to operate as normal.\nNote that all calls to <a href=\"https://ipython.readthedocs.io/en/stable/interactive/magics.html\" rel=\"nofollow\">Jupyter Magic</a>\nand Shell (<code>!</code>) commands will be ignored when the REST API is served.\nOnly those lines will be ignored, the rest of the cell will continue to run.</p>\n<h2>Data Types</h2>\n<p>In addition to <a href=\"https://docs.python.org/3/library/stdtypes.html\" rel=\"nofollow\"><em>builtin</em> types</a> Tranquilizer\nprovides specialized support for Lists, date/datetime, and files.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>datetime.date</code> or <code>datetime.datetime</code></td>\n<td>Converts string with <code>dateutil.parser.parse</code> and returns specified type.</td>\n</tr>\n<tr>\n<td><code>list</code></td>\n<td>Converts <em>repeated</em> arguments to a list of strings.</td>\n</tr>\n<tr>\n<td><code>typing.List[&lt;type&gt;]</code></td>\n<td>Converts <em>repeated</em> arguments to a list; each value is converted to <code>&lt;type&gt;</code>.</td>\n</tr></tbody></table>\n<p><code>List</code> arguments are constructed using the <code>action='append'</code> argument described in\nthe <a href=\"http://flask-restplus.readthedocs.io/en/stable/parsing.html#multiple-values-lists\" rel=\"nofollow\">Flask RESTPlus documentation</a>.\nAny valid type can be used in <code>List[]</code>.</p>\n<p>The following file-like types are handled by <a href=\"http://werkzeug.pocoo.org/docs/0.14/datastructures/#werkzeug.datastructures.FileStorage\" rel=\"nofollow\">werkzeug <code>FileStorage</code></a>.\n<code>FileStorage</code> is a file-like object that supports methods like <code>.read()</code> and <code>.readlines()</code>.\nThese types support sending files with cURL using <code>-F</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>typing.BinaryIO</code></td>\n<td>File-like object to read binary data.</td>\n</tr>\n<tr>\n<td><code>typing.TextIO</code></td>\n<td>Converts <code>FileStorage</code> type to <code>io.StringIO()</code>.</td>\n</tr></tbody></table>\n<p>Further, specific support for Image and NumPy files are provided. The binary contents of the file are automatically converted.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PIL.Image.Image</code></td>\n<td>Converts <code>FileStorage</code> type to PIL Image.</td>\n</tr>\n<tr>\n<td><code>numpy.ndarray</code></td>\n<td>Converts <code>FileStorage</code> type to NumPy array using <code>np.load()</code>.</td>\n</tr></tbody></table>\n<h3>Custom types</h3>\n<p>Custom type classes can be built...</p>\n<h2>Type hints example</h2>\n<p>The example below uses <code>int</code>, <code>datetime.datetime</code>, and <code>typing.List</code>. <code>datetime.datetime</code> support\nhas been built with <code>datetutil</code> and will convert any compatible datetime string to a <code>datetime.datetime</code> object. <code>typing.List</code>\nsupports specialization with <code>[]</code> and will transform all <em>repeated</em> arguments passed to the REST API into a list and convert\nthe type of each element.</p>\n<p>Finally, tranquilizer supports default arguments.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tranquilizer</span> <span class=\"kn\">import</span> <span class=\"n\">tranquilize</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"nd\">@tranquilize</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'post'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">factor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Let's convert strings to something useful'''</span>\n\n    <span class=\"n\">new_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">factor</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">]</span>\n\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'string'</span><span class=\"p\">:</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">(),</span>\n            <span class=\"s1\">'date'</span>  <span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%c</span><span class=\"s1\">'</span><span class=\"p\">),</span>\n            <span class=\"s1\">'items'</span> <span class=\"p\">:</span> <span class=\"n\">new_items</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>Let's see what happens when I POST to this REST API.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'string'</span><span class=\"p\">:</span><span class=\"s1\">'hello, world!'</span><span class=\"p\">,</span> <span class=\"s1\">'date'</span><span class=\"p\">:</span><span class=\"s1\">'4th July 1776'</span><span class=\"p\">,</span> <span class=\"s1\">'items'</span><span class=\"p\">:</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)}</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8086/convert'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span>\n<span class=\"p\">{</span><span class=\"s1\">'date'</span><span class=\"p\">:</span> <span class=\"s1\">'Thu Jul  4 00:00:00 1776'</span><span class=\"p\">,</span>\n <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">20.0</span><span class=\"p\">,</span> <span class=\"mf\">30.0</span><span class=\"p\">,</span> <span class=\"mf\">40.0</span><span class=\"p\">],</span>\n <span class=\"s1\">'string'</span><span class=\"p\">:</span> <span class=\"s1\">'HELLO, WORLD!'</span><span class=\"p\">}</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n</pre>\n\n          </div>"}, "last_serial": 6348656, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "6f682eb7d68b29a2d3f5ff9047a804f2", "sha256": "7d46a6cb949839fc56dd2f275a5650a11a8e6f454eb7005dfe9379f8106b08d5"}, "downloads": -1, "filename": "tranquilizer-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6f682eb7d68b29a2d3f5ff9047a804f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6844, "upload_time": "2018-08-05T13:49:45", "upload_time_iso_8601": "2018-08-05T13:49:45.613305Z", "url": "https://files.pythonhosted.org/packages/4a/78/aa0b049e180eec83ce7f97d6eec8e275cfa1c0575651222320cb3b1fcb49/tranquilizer-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab68f6a0ff4bfa46bedb1fb4bbb59d3c", "sha256": "fd3cddc6ef481c169916df31ab8412a186690aa223bd6eae86cbbfc66e49d357"}, "downloads": -1, "filename": "tranquilizer-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ab68f6a0ff4bfa46bedb1fb4bbb59d3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6649, "upload_time": "2018-08-05T13:49:46", "upload_time_iso_8601": "2018-08-05T13:49:46.675046Z", "url": "https://files.pythonhosted.org/packages/5d/80/4353ef4661644624e352acc41b1a69aa4065c75f1771ab6787105b5f547f/tranquilizer-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "23a61c8dcbe83f0190e976b80c362920", "sha256": "253a96ff1be964e82c73e1d2a45b10b8895601102119a3239f2c43801214ceea"}, "downloads": -1, "filename": "tranquilizer-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "23a61c8dcbe83f0190e976b80c362920", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8977, "upload_time": "2018-08-05T13:54:22", "upload_time_iso_8601": "2018-08-05T13:54:22.874411Z", "url": "https://files.pythonhosted.org/packages/07/a7/70577daa9513a7dfbd07481145c61b89480fc2505f3631f216b37e4969a4/tranquilizer-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35190ddd2788ab6195712e9f32780515", "sha256": "7307cf5af783ff0fa4bcf41eef2cd9e6cc4a712c34e642eb541b53581e102e76"}, "downloads": -1, "filename": "tranquilizer-0.0.5.tar.gz", "has_sig": false, "md5_digest": "35190ddd2788ab6195712e9f32780515", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7172, "upload_time": "2018-08-05T13:54:24", "upload_time_iso_8601": "2018-08-05T13:54:24.296932Z", "url": "https://files.pythonhosted.org/packages/de/48/991427222b9a574746e1a210631b14caa6de660b6f25d9e8635b8b8165a0/tranquilizer-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "a6ac22bee19bb4024539aea8c3a3020a", "sha256": "bd741a0c7e975bed9124860f0c9dd869272b69fbd00b061bea4b795e229c375b"}, "downloads": -1, "filename": "tranquilizer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a6ac22bee19bb4024539aea8c3a3020a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8183, "upload_time": "2018-09-27T16:47:24", "upload_time_iso_8601": "2018-09-27T16:47:24.060243Z", "url": "https://files.pythonhosted.org/packages/55/52/f10894f02b74a6f9133234e179955847dd2b38e272c28fad1751786e061c/tranquilizer-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "78066a5495485b2b43f81f9ae80af7eb", "sha256": "8a818732e4b45ab66149ea55b05563f2f98e3ba0f95e346e07c39423f422133e"}, "downloads": -1, "filename": "tranquilizer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "78066a5495485b2b43f81f9ae80af7eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8399, "upload_time": "2018-12-29T22:55:01", "upload_time_iso_8601": "2018-12-29T22:55:01.358477Z", "url": "https://files.pythonhosted.org/packages/2c/a1/b93d16c2f8d50d501ed07f0ea78b3da48ca63b1e7dde667aca001b9d72b2/tranquilizer-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c366c64fe63b68b79f7d1ca91a6e217d", "sha256": "3b4351513012843177b34b669070f2063d80e6c51411e869b318b721fc24ffbf"}, "downloads": -1, "filename": "tranquilizer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c366c64fe63b68b79f7d1ca91a6e217d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8975, "upload_time": "2019-01-30T17:41:36", "upload_time_iso_8601": "2019-01-30T17:41:36.161253Z", "url": "https://files.pythonhosted.org/packages/c8/85/8307763bd923efc8038b8fb39e7fbac47fdeb686bf56aada81cc9b814c0d/tranquilizer-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f4f8827eff04e4afc8fe329aa8a8cfb5", "sha256": "c27b6bb28b25445efb2839b747a69be91a13a3f0ff3e8178fd48f22fe6f6cc7d"}, "downloads": -1, "filename": "tranquilizer-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f4f8827eff04e4afc8fe329aa8a8cfb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9103, "upload_time": "2019-03-06T20:58:46", "upload_time_iso_8601": "2019-03-06T20:58:46.419632Z", "url": "https://files.pythonhosted.org/packages/9c/f3/13f6c6781f956efc6da3c902a72d68c983049f1273ed4a6157797351015a/tranquilizer-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bbe49e44a81b49ff21dca24917dfb15c", "sha256": "6dbd5459d01012136fa75905592ba2725031034dbf916c54948cb524fcf16a18"}, "downloads": -1, "filename": "tranquilizer-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bbe49e44a81b49ff21dca24917dfb15c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9285, "upload_time": "2019-03-06T21:52:38", "upload_time_iso_8601": "2019-03-06T21:52:38.827015Z", "url": "https://files.pythonhosted.org/packages/6b/3c/beb27cb6093ecbe3ac66f737b4f814140c873405f3209217fa65bb7f53cb/tranquilizer-0.3.0.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "d7816df99bb20fed84ed34edecf759f4", "sha256": "2d3f3f86ebf60e32842a33c8e3302f7cbf17d7311a8e0c44b021826cc3636dc1"}, "downloads": -1, "filename": "tranquilizer-0.3.2.tar.gz", "has_sig": false, "md5_digest": "d7816df99bb20fed84ed34edecf759f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.7", "size": 9729, "upload_time": "2019-05-30T17:59:47", "upload_time_iso_8601": "2019-05-30T17:59:47.478124Z", "url": "https://files.pythonhosted.org/packages/f7/4a/fa5a7a4dd8f545d35576ad2608dc4559d037f24d2e45f7c06782273b2d0c/tranquilizer-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "6c51ef25adfebc3bdc38134b4a19c684", "sha256": "8152844ecae6172c82853db85300da1e5fed261a913ebb734915aa0b96f2907f"}, "downloads": -1, "filename": "tranquilizer-0.4.0.tar.gz", "has_sig": false, "md5_digest": "6c51ef25adfebc3bdc38134b4a19c684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.8", "size": 16597, "upload_time": "2019-11-12T15:42:16", "upload_time_iso_8601": "2019-11-12T15:42:16.432804Z", "url": "https://files.pythonhosted.org/packages/6e/b6/7f5f5be0e453ab92c093d79b7d376874aff5c6db09852d090517848a3edb/tranquilizer-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "25f98efe223843638c5c338fa2640050", "sha256": "0d91858f2b6d1c70724347fa417c72547c07493ff674f9daef79cdebf202031b"}, "downloads": -1, "filename": "tranquilizer-0.4.1.tar.gz", "has_sig": false, "md5_digest": "25f98efe223843638c5c338fa2640050", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.8", "size": 32989, "upload_time": "2019-12-22T22:16:31", "upload_time_iso_8601": "2019-12-22T22:16:31.146012Z", "url": "https://files.pythonhosted.org/packages/8b/ca/49e401276adfffd16b3f9e3a60bd7fefa3893323ad6e95dbf94b655818e4/tranquilizer-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25f98efe223843638c5c338fa2640050", "sha256": "0d91858f2b6d1c70724347fa417c72547c07493ff674f9daef79cdebf202031b"}, "downloads": -1, "filename": "tranquilizer-0.4.1.tar.gz", "has_sig": false, "md5_digest": "25f98efe223843638c5c338fa2640050", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.8", "size": 32989, "upload_time": "2019-12-22T22:16:31", "upload_time_iso_8601": "2019-12-22T22:16:31.146012Z", "url": "https://files.pythonhosted.org/packages/8b/ca/49e401276adfffd16b3f9e3a60bd7fefa3893323ad6e95dbf94b655818e4/tranquilizer-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:48:24 2020"}