{"info": {"author": "Toby Fleming", "author_email": "tobywf@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: MacOS X :: Cocoa", "Intended Audience :: Developers", "License :: OSI Approved", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Programming Language :: Objective C", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Desktop Environment", "Topic :: Software Development :: Libraries"], "description": "# Pasteboard\n\n[![License: MPL 2.0](https://img.shields.io/badge/License-MPL%202.0-brightgreen.svg)](https://opensource.org/licenses/MPL-2.0) [![Build](https://github.com/tobywf/pasteboard/workflows/Build/badge.svg?branch=master&event=push)](https://github.com/tobywf/pasteboard/actions)\n\n[Pasteboard](https://pypi.org/project/pasteboard/) exposes Python bindings for reading and writing macOS' AppKit [NSPasteboard](https://developer.apple.com/documentation/appkit/nspasteboard). This allows retrieving different formats (HTML/RTF fragments, PDF/PNG/TIFF) and efficient polling of the pasteboard.\n\nNow with type hints!\n\n## Installation\n\nObviously, this module will only compile on **macOS**:\n\n```bash\npip install pasteboard\n```\n\n## Usage\n\n### Getting the contents\n\n```pycon\n>>> import pasteboard\n>>> pb = pasteboard.Pasteboard()\n>>> pb.get_contents()\n'pasteboard'\n>>> pb.get_contents(diff=True)\n>>>\n```\n\nUnsurprisingly, `get_contents` gets the contents of the pasteboard. This method\ntakes two optional arguments:\n\n**type** - The format to get. Defaults to `pasteboard.String`, which corresponds\nto [NSPasteboardTypeString](https://developer.apple.com/documentation/appkit/nspasteboardtypestring?language=objc). See the `pasteboard` module members for other\noptions such as HTML fragment, RTF, PDF, PNG, and TIFF. Not all formats of [NSPasteboardType](https://developer.apple.com/documentation/appkit/nspasteboardtype?language=objc) are implemented.\n\n**diff** - Defaults to `False`. When `True`, only get and return the contents if it has changed since the last call. Otherwise, `None` is returned. This can be used to efficiently monitor the pasteboard for changes, which must be done by polling (there is no option to subscribe to changes).\n\n`get_contents` will return the appropriate type, so [str](https://docs.python.org/3/library/stdtypes.html#str) for string types,\nand [bytes](https://docs.python.org/3/library/stdtypes.html#bytes) for binary types. `None` is returned when:\n\n* There is no data of the requested type (e.g. an image was copied but a string was requested)\n* **diff** is `True`, and the contents has not changed since the last call\n* An error occurred\n\n### Setting the contents\n\n```pycon\n>>> import pasteboard\n>>> pb = pasteboard.Pasteboard()\n>>> pb.set_contents('pasteboard')\nTrue\n>>>\n```\n\nAnalogously, `set_contents` sets the contents of the pasteboard. This method\ntakes two arguments:\n\n**data** - [str](https://docs.python.org/3/library/stdtypes.html#str) or [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object), required. There is no type checking. So if `type` indicates a string type and `data` is bytes-like but not UTF-8 encoded, the behaviour is undefined.\n\n**type** - The format to set. Defaults to `pasteboard.String`, which corresponds to [NSPasteboardTypeString](https://developer.apple.com/documentation/appkit/nspasteboardtypestring?language=objc). See the `pasteboard` module members for other options such as HTML fragment, RTF, PDF, PNG, and TIFF. Not all formats of [NSPasteboardType](https://developer.apple.com/documentation/appkit/nspasteboardtype?language=objc) are implemented.\n\n`set_contents` will return `True` if the pasteboard was successfully set; otherwise, `False`. It may also throw [RuntimeError](https://docs.python.org/3/library/exceptions.html#RuntimeError) if `data` can't be converted to an AppKit type.\n\n## Development\n\nYou don't need to know this if you're not changing `pasteboard.m` code. There are some integration tests in `tests.py` to check the module works as designed (using [pytest](https://docs.pytest.org/en/latest/) and [hypothesis](https://hypothesis.readthedocs.io/en/latest/)).\n\nThis project uses [pre-commit](https://pre-commit.com/) to run some linting hooks when committing. When you first clone the repo, please run:\n\n```\npre-commit install\n```\n\nYou may also run the hooks at any time:\n\n```\npre-commit run --all-files\n```\n\nDependencies are managed via [poetry](https://python-poetry.org/). To install all dependencies, use:\n\n```\npoetry install\n```\n\nThis will also install development dependencies (`pytest`). To run the tests:\n\n```\npoetry run pytest tests.py --verbose\n```\n\n## License\n\nFrom version 0.3.0 and forwards, this library is licensed under the Mozilla Public License Version 2.0. For more information, see `LICENSE`.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tobywf/pasteboard", "keywords": "macOS,clipboard,pasteboard", "license": "MPL-2.0", "maintainer": "", "maintainer_email": "", "name": "pasteboard", "package_url": "https://pypi.org/project/pasteboard/", "platform": "", "project_url": "https://pypi.org/project/pasteboard/", "project_urls": {"Homepage": "https://github.com/tobywf/pasteboard"}, "release_url": "https://pypi.org/project/pasteboard/0.3.1/", "requires_dist": null, "requires_python": ">=3.6,<4.0", "summary": "Pasteboard - Python interface for reading from NSPasteboard (macOS clipboard)", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pasteboard</h1>\n<p><a href=\"https://opensource.org/licenses/MPL-2.0\" rel=\"nofollow\"><img alt=\"License: MPL 2.0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bbe6de0748c59801050ab2478726d82fd71c06c2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d504c253230322e302d627269676874677265656e2e737667\"></a> <a href=\"https://github.com/tobywf/pasteboard/actions\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c21e8365faec45caef4499f73fccf71f4451241/68747470733a2f2f6769746875622e636f6d2f746f627977662f7061737465626f6172642f776f726b666c6f77732f4275696c642f62616467652e7376673f6272616e63683d6d6173746572266576656e743d70757368\"></a></p>\n<p><a href=\"https://pypi.org/project/pasteboard/\" rel=\"nofollow\">Pasteboard</a> exposes Python bindings for reading and writing macOS' AppKit <a href=\"https://developer.apple.com/documentation/appkit/nspasteboard\" rel=\"nofollow\">NSPasteboard</a>. This allows retrieving different formats (HTML/RTF fragments, PDF/PNG/TIFF) and efficient polling of the pasteboard.</p>\n<p>Now with type hints!</p>\n<h2>Installation</h2>\n<p>Obviously, this module will only compile on <strong>macOS</strong>:</p>\n<pre>pip install pasteboard\n</pre>\n<h2>Usage</h2>\n<h3>Getting the contents</h3>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pasteboard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pb</span> <span class=\"o\">=</span> <span class=\"n\">pasteboard</span><span class=\"o\">.</span><span class=\"n\">Pasteboard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pb</span><span class=\"o\">.</span><span class=\"n\">get_contents</span><span class=\"p\">()</span>\n<span class=\"go\">'pasteboard'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pb</span><span class=\"o\">.</span><span class=\"n\">get_contents</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n</pre>\n<p>Unsurprisingly, <code>get_contents</code> gets the contents of the pasteboard. This method\ntakes two optional arguments:</p>\n<p><strong>type</strong> - The format to get. Defaults to <code>pasteboard.String</code>, which corresponds\nto <a href=\"https://developer.apple.com/documentation/appkit/nspasteboardtypestring?language=objc\" rel=\"nofollow\">NSPasteboardTypeString</a>. See the <code>pasteboard</code> module members for other\noptions such as HTML fragment, RTF, PDF, PNG, and TIFF. Not all formats of <a href=\"https://developer.apple.com/documentation/appkit/nspasteboardtype?language=objc\" rel=\"nofollow\">NSPasteboardType</a> are implemented.</p>\n<p><strong>diff</strong> - Defaults to <code>False</code>. When <code>True</code>, only get and return the contents if it has changed since the last call. Otherwise, <code>None</code> is returned. This can be used to efficiently monitor the pasteboard for changes, which must be done by polling (there is no option to subscribe to changes).</p>\n<p><code>get_contents</code> will return the appropriate type, so <a href=\"https://docs.python.org/3/library/stdtypes.html#str\" rel=\"nofollow\">str</a> for string types,\nand <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes\" rel=\"nofollow\">bytes</a> for binary types. <code>None</code> is returned when:</p>\n<ul>\n<li>There is no data of the requested type (e.g. an image was copied but a string was requested)</li>\n<li><strong>diff</strong> is <code>True</code>, and the contents has not changed since the last call</li>\n<li>An error occurred</li>\n</ul>\n<h3>Setting the contents</h3>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pasteboard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pb</span> <span class=\"o\">=</span> <span class=\"n\">pasteboard</span><span class=\"o\">.</span><span class=\"n\">Pasteboard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pb</span><span class=\"o\">.</span><span class=\"n\">set_contents</span><span class=\"p\">(</span><span class=\"s1\">'pasteboard'</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n</pre>\n<p>Analogously, <code>set_contents</code> sets the contents of the pasteboard. This method\ntakes two arguments:</p>\n<p><strong>data</strong> - <a href=\"https://docs.python.org/3/library/stdtypes.html#str\" rel=\"nofollow\">str</a> or <a href=\"https://docs.python.org/3/glossary.html#term-bytes-like-object\" rel=\"nofollow\">bytes-like object</a>, required. There is no type checking. So if <code>type</code> indicates a string type and <code>data</code> is bytes-like but not UTF-8 encoded, the behaviour is undefined.</p>\n<p><strong>type</strong> - The format to set. Defaults to <code>pasteboard.String</code>, which corresponds to <a href=\"https://developer.apple.com/documentation/appkit/nspasteboardtypestring?language=objc\" rel=\"nofollow\">NSPasteboardTypeString</a>. See the <code>pasteboard</code> module members for other options such as HTML fragment, RTF, PDF, PNG, and TIFF. Not all formats of <a href=\"https://developer.apple.com/documentation/appkit/nspasteboardtype?language=objc\" rel=\"nofollow\">NSPasteboardType</a> are implemented.</p>\n<p><code>set_contents</code> will return <code>True</code> if the pasteboard was successfully set; otherwise, <code>False</code>. It may also throw <a href=\"https://docs.python.org/3/library/exceptions.html#RuntimeError\" rel=\"nofollow\">RuntimeError</a> if <code>data</code> can't be converted to an AppKit type.</p>\n<h2>Development</h2>\n<p>You don't need to know this if you're not changing <code>pasteboard.m</code> code. There are some integration tests in <code>tests.py</code> to check the module works as designed (using <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> and <a href=\"https://hypothesis.readthedocs.io/en/latest/\" rel=\"nofollow\">hypothesis</a>).</p>\n<p>This project uses <a href=\"https://pre-commit.com/\" rel=\"nofollow\">pre-commit</a> to run some linting hooks when committing. When you first clone the repo, please run:</p>\n<pre><code>pre-commit install\n</code></pre>\n<p>You may also run the hooks at any time:</p>\n<pre><code>pre-commit run --all-files\n</code></pre>\n<p>Dependencies are managed via <a href=\"https://python-poetry.org/\" rel=\"nofollow\">poetry</a>. To install all dependencies, use:</p>\n<pre><code>poetry install\n</code></pre>\n<p>This will also install development dependencies (<code>pytest</code>). To run the tests:</p>\n<pre><code>poetry run pytest tests.py --verbose\n</code></pre>\n<h2>License</h2>\n<p>From version 0.3.0 and forwards, this library is licensed under the Mozilla Public License Version 2.0. For more information, see <code>LICENSE</code>.</p>\n\n          </div>"}, "last_serial": 6673153, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9539058af76ce3476efc87f601f27f8f", "sha256": "dd1cb085e1d5ec83f10fbc14084aef816509bc6bfa715ca0c126afd878ba629d"}, "downloads": -1, "filename": "pasteboard-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9539058af76ce3476efc87f601f27f8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4906, "upload_time": "2017-12-10T19:26:41", "upload_time_iso_8601": "2017-12-10T19:26:41.576429Z", "url": "https://files.pythonhosted.org/packages/1c/b7/997699586d2ea0547f133990a4dcd7083890263411fb40c5f64d18b0103e/pasteboard-0.1.0.tar.gz", "yanked": false}], "0.1.0.dev1": [{"comment_text": "", "digests": {"md5": "18985932c6a4ffc3a69640b454877077", "sha256": "c33d3a1c9ade14ab769f53d8873ec1b866db79ee6e052b27f52443571a592721"}, "downloads": -1, "filename": "pasteboard-0.1.0.dev1-cp36-cp36m-macosx_10_12_x86_64.whl", "has_sig": false, "md5_digest": "18985932c6a4ffc3a69640b454877077", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 19795, "upload_time": "2017-12-10T19:56:31", "upload_time_iso_8601": "2017-12-10T19:56:31.976660Z", "url": "https://files.pythonhosted.org/packages/09/68/bc470b6bd0d5e165bbbf6730925458d0a8f57268e0beb6b9b53ee93e8fa5/pasteboard-0.1.0.dev1-cp36-cp36m-macosx_10_12_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e7272d4e0cbb0d7c776bbc08d3f62bd", "sha256": "9d3e5b83557c31fbdbb18b2afa3bd14f82693103b2e34991e09c7380b439a18d"}, "downloads": -1, "filename": "pasteboard-0.1.0.dev1.tar.gz", "has_sig": false, "md5_digest": "5e7272d4e0cbb0d7c776bbc08d3f62bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16871, "upload_time": "2017-12-10T19:56:34", "upload_time_iso_8601": "2017-12-10T19:56:34.029289Z", "url": "https://files.pythonhosted.org/packages/0b/b6/981829580d68f71878d19f85e78c2435386b6198b2bc6064dc1684e1814f/pasteboard-0.1.0.dev1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "eb5f18deeea43baced0ca59a6732ef5b", "sha256": "2ffbcd7f89a5dc9a8b4f8fde387ae1176a8ad379cca1ae1627381fc08b3074a9"}, "downloads": -1, "filename": "pasteboard-0.2.0-cp36-cp36m-macosx_10_12_x86_64.whl", "has_sig": false, "md5_digest": "eb5f18deeea43baced0ca59a6732ef5b", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 19361, "upload_time": "2018-05-23T03:49:30", "upload_time_iso_8601": "2018-05-23T03:49:30.884767Z", "url": "https://files.pythonhosted.org/packages/a8/6f/57783ecbeae3aa65d88585875d97a048371927f78d28833283cea91b4f78/pasteboard-0.2.0-cp36-cp36m-macosx_10_12_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2655b42ca27ed72d67223b6add43e9e6", "sha256": "17859c01e247d23edb83cd3caf51abd6abc89f3795402b069529b2a7dd80b57d"}, "downloads": -1, "filename": "pasteboard-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2655b42ca27ed72d67223b6add43e9e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18097, "upload_time": "2018-05-23T03:49:32", "upload_time_iso_8601": "2018-05-23T03:49:32.445570Z", "url": "https://files.pythonhosted.org/packages/a5/ff/52cc670a1cc4d86987c727a545036972ab0441d965aa9dd5becc1ecbb3d7/pasteboard-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bcd21d0a6cd69cdc21f7eb6b21e8e602", "sha256": "a3fb33cc132c296b49b1d02d2110cd3f67e76881e18352dc9014f673d9f9ad32"}, "downloads": -1, "filename": "pasteboard-0.3.0-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "bcd21d0a6cd69cdc21f7eb6b21e8e602", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<4.0", "size": 15605, "upload_time": "2020-02-19T08:24:20", "upload_time_iso_8601": "2020-02-19T08:24:20.964086Z", "url": "https://files.pythonhosted.org/packages/fc/c8/9220cf6f91230e88e53d4b8f160d13ffc3aeb5960d2135711437eb087f1e/pasteboard-0.3.0-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "763c639b3f4d8157cead34072bb3d94b", "sha256": "7e3f78b08007cecae4f259fb882615c4cfc7523581c222c2d487b2cff769768a"}, "downloads": -1, "filename": "pasteboard-0.3.0.tar.gz", "has_sig": false, "md5_digest": "763c639b3f4d8157cead34072bb3d94b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11013, "upload_time": "2020-02-19T08:24:22", "upload_time_iso_8601": "2020-02-19T08:24:22.214921Z", "url": "https://files.pythonhosted.org/packages/79/f8/d066ced2b399af55c4a9d49f55a28dc50c1875d5bc2d01dac675bcb2b94e/pasteboard-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "150a88454c44aa48a450893e55e64744", "sha256": "7754f4c489bf4fe44a6e4ead5645a0e4250e5f45d313c645b5a9048fd2ae248f"}, "downloads": -1, "filename": "pasteboard-0.3.1-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "150a88454c44aa48a450893e55e64744", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<4.0", "size": 16455, "upload_time": "2020-02-21T05:07:33", "upload_time_iso_8601": "2020-02-21T05:07:33.557469Z", "url": "https://files.pythonhosted.org/packages/f8/73/ec03fb21e3ff01a7080e46c48294ee8e611fbf422e601c19c625c8b4f07e/pasteboard-0.3.1-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bf360e3fbbf8887cb9bb274712a4356", "sha256": "c4ff2d3621ded88a8743830f6e9661cc350cf4299d891cd3c7d122f161576f7a"}, "downloads": -1, "filename": "pasteboard-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7bf360e3fbbf8887cb9bb274712a4356", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11784, "upload_time": "2020-02-21T05:07:34", "upload_time_iso_8601": "2020-02-21T05:07:34.479489Z", "url": "https://files.pythonhosted.org/packages/82/dd/65b97b01a6f9df769fe765e5a4638a94fdb6f4cb4b3a0f0f850b25b49769/pasteboard-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "150a88454c44aa48a450893e55e64744", "sha256": "7754f4c489bf4fe44a6e4ead5645a0e4250e5f45d313c645b5a9048fd2ae248f"}, "downloads": -1, "filename": "pasteboard-0.3.1-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "150a88454c44aa48a450893e55e64744", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<4.0", "size": 16455, "upload_time": "2020-02-21T05:07:33", "upload_time_iso_8601": "2020-02-21T05:07:33.557469Z", "url": "https://files.pythonhosted.org/packages/f8/73/ec03fb21e3ff01a7080e46c48294ee8e611fbf422e601c19c625c8b4f07e/pasteboard-0.3.1-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bf360e3fbbf8887cb9bb274712a4356", "sha256": "c4ff2d3621ded88a8743830f6e9661cc350cf4299d891cd3c7d122f161576f7a"}, "downloads": -1, "filename": "pasteboard-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7bf360e3fbbf8887cb9bb274712a4356", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11784, "upload_time": "2020-02-21T05:07:34", "upload_time_iso_8601": "2020-02-21T05:07:34.479489Z", "url": "https://files.pythonhosted.org/packages/82/dd/65b97b01a6f9df769fe765e5a4638a94fdb6f4cb4b3a0f0f850b25b49769/pasteboard-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:01 2020"}