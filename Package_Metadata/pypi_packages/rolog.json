{"info": {"author": "RobertoPrevato", "author_email": "roberto.prevato@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build status](https://robertoprevato.visualstudio.com/rolog/_apis/build/status/rolog-CI)](https://robertoprevato.visualstudio.com/rolog/_build/latest?definitionId=12) [![pypi](https://robertoprevato.vsrm.visualstudio.com/_apis/public/Release/badge/82014349-4c33-499c-b834-a13d016341b9/1/2)](https://pypi.org/project/rolog/) [![Test coverage](https://img.shields.io/azure-devops/coverage/robertoprevato/rolog/12.svg)](https://robertoprevato.visualstudio.com/rolog/_build?definitionId=12)\n\n# Async friendly logging classes for Python 3\n\n**Features:**\n* logging classes using `async/await` for logs\n* handling of six logging levels, like in built-in logging module\n* built-in support for flushing of log records (e.g. making a web request, or writing to a database, every __n__ records)\n* flushing supports max retries, configurable delays, number of attempts, and fallback target in case of failure\n* support for several targets per logger\n* can be used to asynchronously log to different destinations (for example, web api integration, DBMS, etc.)\n* logged records support any kind of desired arguments and data structures\n* completely abstracted from __destination__ of log entries\n* can be used with built-in `logging` module, for sync logging and to [use built-in logging classes](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers)\n* integrated with [rodi dependency injection library](https://pypi.org/project/rodi/), to support injection of loggers by activated class name\n\n## Installation\n\n```bash\npip install rolog\n```\n\n## Classes and log levels\n\n![Classes](https://raw.githubusercontent.com/RobertoPrevato/rolog/master/documentation/classes.png \"Classes\")\n\n|         Class          |                                               Description                                                |\n| ---------------------- | -------------------------------------------------------------------------------------------------------- |\n| **LogLevel**           | Int enum: _NONE, DEBUG, INFORMATION, WARNING, ERROR, CRITICAL_                                               |\n| **LogTarget**          | base for classes that are able to send log records to a certain destination                              |\n| **Logger**             | class responsible for creating log records and sending them to appropriate targets, by level             |\n| **LoggerFactory**      | configuration class, responsible for holding configuration of targets and providing instances of loggers |\n| **LogRecord**          | log record created by loggers, sent to configured targets by a logger                                    |\n| **ExceptionLogRecord** | log record created by loggers, including exception information                                           |\n| **FlushLogTarget**     | abstract class, derived of `LogTarget`, handling records in groups, storing them in memory               |\n\n### Basic use\nAs with the built-in `logging` module, `Logger` class is not meant to be instantiated directly, but rather obtained using a configured `LoggerFactory`.\n\nExample:\n\n```python\nimport asyncio\nfrom rolog import LoggerFactory, Logger, LogTarget\n\n\nclass PrintTarget(LogTarget):\n\n    async def log(self, record):\n        await asyncio.sleep(.1)\n        print(record.message, record.args, record.data)\n\n\nfactory = LoggerFactory()\n\nfactory.add_target(PrintTarget())\n\nlogger = factory.get_logger(__name__)\n\nloop = asyncio.get_event_loop()\n\nasync def example():\n\n    await logger.info('Lorem ipsum')\n\n    # log methods support any argument and keyword argument:\n    # these are stored in the instances of LogRecord, it is responsibility of LogTarget(s)\n    # to handle these extra parameters as desired\n    await logger.info('Hello, World!', 1, 2, 3, cool=True)\n\nloop.run_until_complete(example())\n```\n\n## Flushing targets\n`rolog` has built-in support for log targets that flush messages in groups, this is necessary to optimize for example\nreducing the number of web requests when sending log records to a web api, or enabling bulk-insert inside a database.\nBelow is an example of flush target class that sends log records to some web api, in groups of `500`:\n\n```python\nfrom typing import List\nfrom rolog import FlushLogTarget, LogRecord\n\n\nclass SomeLogApiFlushLogTarget(FlushLogTarget):\n\n    def __init__(self, http_client):\n        super().__init__()\n        self.http_client = http_client\n\n    async def log_records(self, records: List[LogRecord]):\n        # NB: implement here your own logic to make web requests to send log records\n        # to a web api, such as Azure Application Insights \n        # (see for example https://pypi.org/project/asynapplicationinsights/)\n        pass\n```\n\nFlush targets handle retries with configurable and progressive delays, when logging a group of records fails.\nBy default, in case of failure a flush target tries to log records __3 times__, using a progressive delay of __0.6 seconds * attempt number__,\nfinally falling back to a configurable fallback target if logging always failed. Warning messages are issued, using built-in\n[`Warnings`](https://docs.python.org/3.1/library/warnings.html) module to notify of these failures.\n\nThese parameters are configurable using constructor parameters `fallback_target`, `max_size`, `retry_delay`, `progressive_delay`.\n\n```python\nclass FlushLogTarget(LogTarget, ABC):\n    \"\"\"Base class for flushing log targets: targets that send the log records\n    (created by loggers) to the appropriate destination in groups.\"\"\"\n\n    def __init__(self,\n                 queue: Optional[Queue]=None,\n                 max_length: int=500,\n                 fallback_target: Optional[LogTarget]=None,\n                 max_retries: int=3,\n                 retry_delay: float=0.6,\n                 progressive_delay: bool=True):\n```\n\n### Flushing when application stops\nSince flushing targets hold log records in memory before flushing them, it's necessary to flush when an application stops.\nAssuming that a single `LoggerFactory` is configured in the configuration root of an application, this \ncan be done conveniently, by calling the `dispose` method of the logger factory.\n\n```python\n# on application shutdown:\nawait logger_factory.dispose()\n```\n\n## Dependency injection\n`rolog` is integrated with [rodi dependency injection library](https://pypi.org/project/rodi/), to support injection of loggers per activated class name.\nWhen a class that expects a parameter of `rolog.Logger` type is activated, it receives a logger for the category of the class name itself. \nFor more information, please refer to the [dedicated page in project wiki](https://github.com/RobertoPrevato/rolog/wiki/Dependency-injection-with-rodi).\n\n## Documentation\nPlease refer to documentation in the project wiki: [https://github.com/RobertoPrevato/rolog/wiki](https://github.com/RobertoPrevato/rolog/wiki).\n\n## Develop and run tests locally\n```bash\npip install -r dev_requirements.txt\n\n# run tests using automatic discovery:\npytest\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RobertoPrevato/rolog", "keywords": "logging async await", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rolog", "package_url": "https://pypi.org/project/rolog/", "platform": "", "project_url": "https://pypi.org/project/rolog/", "project_urls": {"Homepage": "https://github.com/RobertoPrevato/rolog"}, "release_url": "https://pypi.org/project/rolog/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Async friendly logging classes for Python 3", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://robertoprevato.visualstudio.com/rolog/_build/latest?definitionId=12\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84fac71650b189e5f7f178a41b2f29015cf8ea92/68747470733a2f2f726f626572746f7072657661746f2e76697375616c73747564696f2e636f6d2f726f6c6f672f5f617069732f6275696c642f7374617475732f726f6c6f672d4349\"></a> <a href=\"https://pypi.org/project/rolog/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17b84d4ca0baa45ed759f2db9a14b4deee068619/68747470733a2f2f726f626572746f7072657661746f2e7673726d2e76697375616c73747564696f2e636f6d2f5f617069732f7075626c69632f52656c656173652f62616467652f38323031343334392d346333332d343939632d623833342d6131336430313633343162392f312f32\"></a> <a href=\"https://robertoprevato.visualstudio.com/rolog/_build?definitionId=12\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e85a99d7b25d9230c6ee47509f8212f4902ae2c6/68747470733a2f2f696d672e736869656c64732e696f2f617a7572652d6465766f70732f636f7665726167652f726f626572746f7072657661746f2f726f6c6f672f31322e737667\"></a></p>\n<h1>Async friendly logging classes for Python 3</h1>\n<p><strong>Features:</strong></p>\n<ul>\n<li>logging classes using <code>async/await</code> for logs</li>\n<li>handling of six logging levels, like in built-in logging module</li>\n<li>built-in support for flushing of log records (e.g. making a web request, or writing to a database, every <strong>n</strong> records)</li>\n<li>flushing supports max retries, configurable delays, number of attempts, and fallback target in case of failure</li>\n<li>support for several targets per logger</li>\n<li>can be used to asynchronously log to different destinations (for example, web api integration, DBMS, etc.)</li>\n<li>logged records support any kind of desired arguments and data structures</li>\n<li>completely abstracted from <strong>destination</strong> of log entries</li>\n<li>can be used with built-in <code>logging</code> module, for sync logging and to <a href=\"https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers\" rel=\"nofollow\">use built-in logging classes</a></li>\n<li>integrated with <a href=\"https://pypi.org/project/rodi/\" rel=\"nofollow\">rodi dependency injection library</a>, to support injection of loggers by activated class name</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install rolog\n</pre>\n<h2>Classes and log levels</h2>\n<p><img alt=\"Classes\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c90b1c871427e369395dd0341464870e29fd86a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f526f626572746f5072657661746f2f726f6c6f672f6d61737465722f646f63756d656e746174696f6e2f636c61737365732e706e67\"></p>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>LogLevel</strong></td>\n<td>Int enum: <em>NONE, DEBUG, INFORMATION, WARNING, ERROR, CRITICAL</em></td>\n</tr>\n<tr>\n<td><strong>LogTarget</strong></td>\n<td>base for classes that are able to send log records to a certain destination</td>\n</tr>\n<tr>\n<td><strong>Logger</strong></td>\n<td>class responsible for creating log records and sending them to appropriate targets, by level</td>\n</tr>\n<tr>\n<td><strong>LoggerFactory</strong></td>\n<td>configuration class, responsible for holding configuration of targets and providing instances of loggers</td>\n</tr>\n<tr>\n<td><strong>LogRecord</strong></td>\n<td>log record created by loggers, sent to configured targets by a logger</td>\n</tr>\n<tr>\n<td><strong>ExceptionLogRecord</strong></td>\n<td>log record created by loggers, including exception information</td>\n</tr>\n<tr>\n<td><strong>FlushLogTarget</strong></td>\n<td>abstract class, derived of <code>LogTarget</code>, handling records in groups, storing them in memory</td>\n</tr></tbody></table>\n<h3>Basic use</h3>\n<p>As with the built-in <code>logging</code> module, <code>Logger</code> class is not meant to be instantiated directly, but rather obtained using a configured <code>LoggerFactory</code>.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rolog</span> <span class=\"kn\">import</span> <span class=\"n\">LoggerFactory</span><span class=\"p\">,</span> <span class=\"n\">Logger</span><span class=\"p\">,</span> <span class=\"n\">LogTarget</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PrintTarget</span><span class=\"p\">(</span><span class=\"n\">LogTarget</span><span class=\"p\">):</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">LoggerFactory</span><span class=\"p\">()</span>\n\n<span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">add_target</span><span class=\"p\">(</span><span class=\"n\">PrintTarget</span><span class=\"p\">())</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Lorem ipsum'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># log methods support any argument and keyword argument:</span>\n    <span class=\"c1\"># these are stored in the instances of LogRecord, it is responsibility of LogTarget(s)</span>\n    <span class=\"c1\"># to handle these extra parameters as desired</span>\n    <span class=\"k\">await</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Hello, World!'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">cool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">())</span>\n</pre>\n<h2>Flushing targets</h2>\n<p><code>rolog</code> has built-in support for log targets that flush messages in groups, this is necessary to optimize for example\nreducing the number of web requests when sending log records to a web api, or enabling bulk-insert inside a database.\nBelow is an example of flush target class that sends log records to some web api, in groups of <code>500</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rolog</span> <span class=\"kn\">import</span> <span class=\"n\">FlushLogTarget</span><span class=\"p\">,</span> <span class=\"n\">LogRecord</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeLogApiFlushLogTarget</span><span class=\"p\">(</span><span class=\"n\">FlushLogTarget</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">http_client</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http_client</span> <span class=\"o\">=</span> <span class=\"n\">http_client</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">log_records</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">records</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">LogRecord</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># NB: implement here your own logic to make web requests to send log records</span>\n        <span class=\"c1\"># to a web api, such as Azure Application Insights </span>\n        <span class=\"c1\"># (see for example https://pypi.org/project/asynapplicationinsights/)</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>Flush targets handle retries with configurable and progressive delays, when logging a group of records fails.\nBy default, in case of failure a flush target tries to log records <strong>3 times</strong>, using a progressive delay of <strong>0.6 seconds * attempt number</strong>,\nfinally falling back to a configurable fallback target if logging always failed. Warning messages are issued, using built-in\n<a href=\"https://docs.python.org/3.1/library/warnings.html\" rel=\"nofollow\"><code>Warnings</code></a> module to notify of these failures.</p>\n<p>These parameters are configurable using constructor parameters <code>fallback_target</code>, <code>max_size</code>, <code>retry_delay</code>, <code>progressive_delay</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FlushLogTarget</span><span class=\"p\">(</span><span class=\"n\">LogTarget</span><span class=\"p\">,</span> <span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Base class for flushing log targets: targets that send the log records</span>\n<span class=\"sd\">    (created by loggers) to the appropriate destination in groups.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n                 <span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Queue</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                 <span class=\"n\">max_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span>\n                 <span class=\"n\">fallback_target</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LogTarget</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                 <span class=\"n\">max_retries</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                 <span class=\"n\">retry_delay</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mf\">0.6</span><span class=\"p\">,</span>\n                 <span class=\"n\">progressive_delay</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n</pre>\n<h3>Flushing when application stops</h3>\n<p>Since flushing targets hold log records in memory before flushing them, it's necessary to flush when an application stops.\nAssuming that a single <code>LoggerFactory</code> is configured in the configuration root of an application, this\ncan be done conveniently, by calling the <code>dispose</code> method of the logger factory.</p>\n<pre><span class=\"c1\"># on application shutdown:</span>\n<span class=\"k\">await</span> <span class=\"n\">logger_factory</span><span class=\"o\">.</span><span class=\"n\">dispose</span><span class=\"p\">()</span>\n</pre>\n<h2>Dependency injection</h2>\n<p><code>rolog</code> is integrated with <a href=\"https://pypi.org/project/rodi/\" rel=\"nofollow\">rodi dependency injection library</a>, to support injection of loggers per activated class name.\nWhen a class that expects a parameter of <code>rolog.Logger</code> type is activated, it receives a logger for the category of the class name itself.\nFor more information, please refer to the <a href=\"https://github.com/RobertoPrevato/rolog/wiki/Dependency-injection-with-rodi\" rel=\"nofollow\">dedicated page in project wiki</a>.</p>\n<h2>Documentation</h2>\n<p>Please refer to documentation in the project wiki: <a href=\"https://github.com/RobertoPrevato/rolog/wiki\" rel=\"nofollow\">https://github.com/RobertoPrevato/rolog/wiki</a>.</p>\n<h2>Develop and run tests locally</h2>\n<pre>pip install -r dev_requirements.txt\n\n<span class=\"c1\"># run tests using automatic discovery:</span>\npytest\n</pre>\n\n          </div>"}, "last_serial": 5304120, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "eb9cdd7ad707dcf2b26729bfa9a0b224", "sha256": "a5782c89351df2e45bc065532190940aa5422078ae4dc111678b2366cc5f47b2"}, "downloads": -1, "filename": "rolog-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb9cdd7ad707dcf2b26729bfa9a0b224", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7865, "upload_time": "2018-10-20T22:01:53", "upload_time_iso_8601": "2018-10-20T22:01:53.266129Z", "url": "https://files.pythonhosted.org/packages/7d/66/169540886dda839f30aec68ad789a0921a3bbd83f6fd26fde232a55c6e07/rolog-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2392774635e373867a7a316b13e5935f", "sha256": "f10e0722b9eafbe507449aea6d83ac05ba1a1df422f30047c77eed5300b4e9b3"}, "downloads": -1, "filename": "rolog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2392774635e373867a7a316b13e5935f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7228, "upload_time": "2018-10-20T22:01:54", "upload_time_iso_8601": "2018-10-20T22:01:54.607151Z", "url": "https://files.pythonhosted.org/packages/2c/ed/6c6465dee80e47b1ebd7dee9061b9ba07041984f06baf83f3873071d074a/rolog-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5784f19cc467cb75a0a15cbfe6e71352", "sha256": "bf5c32b1cadc5d05250c5cb989b6ac55ee122edf055dc28213c47abe411bc571"}, "downloads": -1, "filename": "rolog-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5784f19cc467cb75a0a15cbfe6e71352", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8066, "upload_time": "2019-05-18T10:39:31", "upload_time_iso_8601": "2019-05-18T10:39:31.249277Z", "url": "https://files.pythonhosted.org/packages/6f/1d/04d5b02959f56594eda5c6c07516c0e9c3aa062a9258ab90230a4fe02a59/rolog-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cef4b5d9bf3be639fde2b025f27263e9", "sha256": "eaa87c15d069e048dfffec067a83767ec21c6893a5ec14215c8676701e20fbff"}, "downloads": -1, "filename": "rolog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "cef4b5d9bf3be639fde2b025f27263e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8115, "upload_time": "2019-05-18T10:39:32", "upload_time_iso_8601": "2019-05-18T10:39:32.554199Z", "url": "https://files.pythonhosted.org/packages/33/84/612a3c0aaad0220c71970ce8b1295b2b4632604e80a0f7769f44e8d06a43/rolog-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4f7457e3bab63edf405aa254caa36080", "sha256": "2aea11141cd89e9405b704df6a5e834a51bee4d1029fb6824173a25db3f505fc"}, "downloads": -1, "filename": "rolog-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4f7457e3bab63edf405aa254caa36080", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8061, "upload_time": "2019-05-22T19:03:16", "upload_time_iso_8601": "2019-05-22T19:03:16.534818Z", "url": "https://files.pythonhosted.org/packages/64/86/37f365c603b4adea6789b4c030e809625408a134ee5f994cb9838ef26fc8/rolog-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d79651581107f3ea18acad70c573953", "sha256": "9a20de4a5f14e43a2a65dbe9fde7a3a3c4e82d03eed2b18eac4ad594aebe4cc1"}, "downloads": -1, "filename": "rolog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5d79651581107f3ea18acad70c573953", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7463, "upload_time": "2019-05-22T19:03:24", "upload_time_iso_8601": "2019-05-22T19:03:24.560457Z", "url": "https://files.pythonhosted.org/packages/59/b8/f1552b868fb922a2ddfb039c0352f7ea5330c7784543d5e210617f815219/rolog-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f7457e3bab63edf405aa254caa36080", "sha256": "2aea11141cd89e9405b704df6a5e834a51bee4d1029fb6824173a25db3f505fc"}, "downloads": -1, "filename": "rolog-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4f7457e3bab63edf405aa254caa36080", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8061, "upload_time": "2019-05-22T19:03:16", "upload_time_iso_8601": "2019-05-22T19:03:16.534818Z", "url": "https://files.pythonhosted.org/packages/64/86/37f365c603b4adea6789b4c030e809625408a134ee5f994cb9838ef26fc8/rolog-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d79651581107f3ea18acad70c573953", "sha256": "9a20de4a5f14e43a2a65dbe9fde7a3a3c4e82d03eed2b18eac4ad594aebe4cc1"}, "downloads": -1, "filename": "rolog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5d79651581107f3ea18acad70c573953", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7463, "upload_time": "2019-05-22T19:03:24", "upload_time_iso_8601": "2019-05-22T19:03:24.560457Z", "url": "https://files.pythonhosted.org/packages/59/b8/f1552b868fb922a2ddfb039c0352f7ea5330c7784543d5e210617f815219/rolog-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:25 2020"}