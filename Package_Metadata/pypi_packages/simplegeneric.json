{"info": {"author": "Phillip J. Eby", "author_email": "peak@eby-sarna.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Development Status :: 7 - Inactive", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "* New in 0.8: Source and tests are compatible with Python 3 (w/o ``setup.py``)\r\n\r\n  * 0.8.1: setup.py is now compatible with Python 3 as well\r\n\r\n* New in 0.7: `Multiple Types or Objects`_\r\n\r\n* New in 0.6: `Inspection and Extension`_, and thread-safe method registration\r\n\r\nThe ``simplegeneric`` module lets you define simple single-dispatch\r\ngeneric functions, akin to Python's built-in generic functions like\r\n``len()``, ``iter()`` and so on.  However, instead of using\r\nspecially-named methods, these generic functions use simple lookup\r\ntables, akin to those used by e.g. ``pickle.dump()`` and other\r\ngeneric functions found in the Python standard library.\r\n\r\nAs you can see from the above examples, generic functions are actually\r\nquite common in Python already, but there is no standard way to create\r\nsimple ones.  This library attempts to fill that gap, as generic\r\nfunctions are an `excellent alternative to the Visitor pattern`_, as\r\nwell as being a great substitute for most common uses of adaptation.\r\n\r\nThis library tries to be the simplest possible implementation of generic\r\nfunctions, and it therefore eschews the use of multiple or predicate\r\ndispatch, as well as avoiding speedup techniques such as C dispatching\r\nor code generation.  But it has absolutely no dependencies, other than\r\nPython 2.4, and the implementation is just a single Python module of\r\nless than 100 lines.\r\n\r\n\r\nUsage\r\n-----\r\n\r\nDefining and using a generic function is straightforward::\r\n\r\n    >>> from simplegeneric import generic\r\n    >>> @generic\r\n    ... def move(item, target):\r\n    ...     \"\"\"Default implementation goes here\"\"\"\r\n    ...     print(\"what you say?!\")\r\n\r\n    >>> @move.when_type(int)\r\n    ... def move_int(item, target):\r\n    ...     print(\"In AD %d, %s was beginning.\" % (item, target))\r\n\r\n    >>> @move.when_type(str)\r\n    ... def move_str(item, target):\r\n    ...     print(\"How are you %s!!\" % item)\r\n    ...     print(\"All your %s are belong to us.\" % (target,))\r\n\r\n    >>> zig = object()\r\n    >>> @move.when_object(zig)\r\n    ... def move_zig(item, target):\r\n    ...     print(\"You know what you %s.\" % (target,))\r\n    ...     print(\"For great justice!\")\r\n\r\n    >>> move(2101, \"war\")\r\n    In AD 2101, war was beginning.\r\n\r\n    >>> move(\"gentlemen\", \"base\")\r\n    How are you gentlemen!!\r\n    All your base are belong to us.\r\n\r\n    >>> move(zig, \"doing\")\r\n    You know what you doing.\r\n    For great justice!\r\n\r\n    >>> move(27.0, 56.2)\r\n    what you say?!\r\n\r\n\r\nInheritance and Allowed Types\r\n-----------------------------\r\n\r\nDefining multiple methods for the same type or object is an error::\r\n\r\n    >>> @move.when_type(str)\r\n    ... def this_is_wrong(item, target):\r\n    ...     pass\r\n    Traceback (most recent call last):\r\n    ...\r\n    TypeError: <function move...> already has method for type <...'str'>\r\n\r\n    >>> @move.when_object(zig)\r\n    ... def this_is_wrong(item, target): pass\r\n    Traceback (most recent call last):\r\n      ...\r\n    TypeError: <function move...> already has method for object <object ...>\r\n\r\nAnd the ``when_type()`` decorator only accepts classes or types::\r\n\r\n    >>> @move.when_type(23)\r\n    ... def move_23(item, target):\r\n    ...     print(\"You have no chance to survive!\")\r\n    Traceback (most recent call last):\r\n      ...\r\n    TypeError: 23 is not a type or class\r\n\r\nMethods defined for supertypes are inherited following MRO order::\r\n\r\n    >>> class MyString(str):\r\n    ...     \"\"\"String subclass\"\"\"\r\n\r\n    >>> move(MyString(\"ladies\"), \"drinks\")\r\n    How are you ladies!!\r\n    All your drinks are belong to us.\r\n\r\nClassic class instances are also supported (although the lookup process\r\nis slower than for new-style instances)::\r\n\r\n    >>> class X: pass\r\n    >>> class Y(X): pass\r\n\r\n    >>> @move.when_type(X)\r\n    ... def move_x(item, target):\r\n    ...     print(\"Someone set us up the %s!!!\" % (target,))\r\n\r\n    >>> move(X(), \"bomb\")\r\n    Someone set us up the bomb!!!\r\n\r\n    >>> move(Y(), \"dance\")\r\n    Someone set us up the dance!!!\r\n\r\n\r\nMultiple Types or Objects\r\n-------------------------\r\n\r\nAs a convenience, you can now pass more than one type or object to the\r\nregistration methods::\r\n\r\n    >>> @generic\r\n    ... def isbuiltin(ob):\r\n    ...     return False\r\n    >>> @isbuiltin.when_type(int, str, float, complex, type)\r\n    ... @isbuiltin.when_object(None, Ellipsis)\r\n    ... def yes(ob):\r\n    ...     return True\r\n    \r\n    >>> isbuiltin(1)\r\n    True\r\n    >>> isbuiltin(object)\r\n    True\r\n    >>> isbuiltin(object())\r\n    False\r\n    >>> isbuiltin(X())\r\n    False\r\n    >>> isbuiltin(None)\r\n    True\r\n    >>> isbuiltin(Ellipsis)\r\n    True\r\n\r\n\r\nDefaults and Docs\r\n-----------------\r\n\r\nYou can obtain a function's default implementation using its ``default``\r\nattribute::\r\n\r\n    >>> @move.when_type(Y)\r\n    ... def move_y(item, target):\r\n    ...     print(\"Someone set us up the %s!!!\" % (target,))\r\n    ...     move.default(item, target)\r\n\r\n    >>> move(Y(), \"dance\")\r\n    Someone set us up the dance!!!\r\n    what you say?!\r\n\r\n\r\n``help()`` and other documentation tools see generic functions as normal\r\nfunction objects, with the same name, attributes, docstring, and module as\r\nthe prototype/default function::\r\n\r\n    >>> help(move)\r\n    Help on function move:\r\n    ...\r\n    move(*args, **kw)\r\n        Default implementation goes here\r\n    ...\r\n\r\n\r\nInspection and Extension\r\n------------------------\r\n\r\nYou can find out if a generic function has a method for a type or object using\r\nthe ``has_object()`` and ``has_type()`` methods::\r\n\r\n    >>> move.has_object(zig)\r\n    True\r\n    >>> move.has_object(42)\r\n    False\r\n\r\n    >>> move.has_type(X)\r\n    True\r\n    >>> move.has_type(float)\r\n    False\r\n\r\nNote that ``has_type()`` only queries whether there is a method registered for\r\nthe *exact* type, not subtypes or supertypes::\r\n\r\n    >>> class Z(X): pass\r\n    >>> move.has_type(Z)\r\n    False\r\n\r\nYou can create a generic function that \"inherits\" from an existing generic\r\nfunction by calling ``generic()`` on the existing function::\r\n\r\n    >>> move2 = generic(move)\r\n    >>> move(2101, \"war\")\r\n    In AD 2101, war was beginning.\r\n\r\nAny methods added to the new generic function override *all* methods in the\r\n\"base\" function::\r\n\r\n    >>> @move2.when_type(X)\r\n    ... def move2_X(item, target):\r\n    ...     print(\"You have no chance to survive make your %s!\" % (target,))\r\n\r\n    >>> move2(X(), \"time\")\r\n    You have no chance to survive make your time!\r\n\r\n    >>> move2(Y(), \"time\")\r\n    You have no chance to survive make your time!\r\n\r\nNotice that even though ``move()`` has a method for type ``Y``, the method\r\ndefined for ``X`` in ``move2()`` takes precedence.  This is because the\r\n``move`` function is used as the ``default`` method of ``move2``, and ``move2``\r\nhas no method for type ``Y``::\r\n\r\n    >>> move2.default is move\r\n    True\r\n    >>> move.has_type(Y)\r\n    True\r\n    >>> move2.has_type(Y)\r\n    False\r\n\r\n\r\nLimitations\r\n-----------\r\n\r\n* The first argument is always used for dispatching, and it must always be\r\n  passed *positionally* when the function is called.\r\n\r\n* Documentation tools don't see the function's original argument signature, so\r\n  you have to describe it in the docstring.\r\n\r\n* If you have optional arguments, you must duplicate them on every method in\r\n  order for them to work correctly.  (On the plus side, it means you can have\r\n  different defaults or required arguments for each method, although relying on\r\n  that quirk probably isn't a good idea.)\r\n\r\nThese restrictions may be lifted in later releases, if I feel the need.  They\r\nwould require runtime code generation the way I do it in ``RuleDispatch``,\r\nhowever, which is somewhat of a pain.  (Alternately I could use the\r\n``BytecodeAssembler`` package to do the code generation, as that's a lot easier\r\nto use than string-based code generation, but that would introduce more\r\ndependencies, and I'm trying to keep this simple so I can just\r\ntoss it into Chandler without a big footprint increase.)\r\n\r\n.. _excellent alternative to the Visitor pattern: http://peak.telecommunity.com/DevCenter/VisitorRevisited", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://cheeseshop.python.org/pypi/simplegeneric", "keywords": "", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "simplegeneric", "package_url": "https://pypi.org/project/simplegeneric/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/simplegeneric/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://cheeseshop.python.org/pypi/simplegeneric"}, "release_url": "https://pypi.org/project/simplegeneric/0.8.1/", "requires_dist": null, "requires_python": null, "summary": "Simple generic functions (similar to Python's own len(), pickle.dump(), etc.)", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li>New in 0.8: Source and tests are compatible with Python 3 (w/o <tt>setup.py</tt>)<ul>\n<li>0.8.1: setup.py is now compatible with Python 3 as well</li>\n</ul>\n</li>\n<li>New in 0.7: <a href=\"#multiple-types-or-objects\" rel=\"nofollow\">Multiple Types or Objects</a></li>\n<li>New in 0.6: <a href=\"#inspection-and-extension\" rel=\"nofollow\">Inspection and Extension</a>, and thread-safe method registration</li>\n</ul>\n<p>The <tt>simplegeneric</tt> module lets you define simple single-dispatch\ngeneric functions, akin to Python\u2019s built-in generic functions like\n<tt>len()</tt>, <tt>iter()</tt> and so on.  However, instead of using\nspecially-named methods, these generic functions use simple lookup\ntables, akin to those used by e.g. <tt>pickle.dump()</tt> and other\ngeneric functions found in the Python standard library.</p>\n<p>As you can see from the above examples, generic functions are actually\nquite common in Python already, but there is no standard way to create\nsimple ones.  This library attempts to fill that gap, as generic\nfunctions are an <a href=\"http://peak.telecommunity.com/DevCenter/VisitorRevisited\" rel=\"nofollow\">excellent alternative to the Visitor pattern</a>, as\nwell as being a great substitute for most common uses of adaptation.</p>\n<p>This library tries to be the simplest possible implementation of generic\nfunctions, and it therefore eschews the use of multiple or predicate\ndispatch, as well as avoiding speedup techniques such as C dispatching\nor code generation.  But it has absolutely no dependencies, other than\nPython 2.4, and the implementation is just a single Python module of\nless than 100 lines.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Defining and using a generic function is straightforward:</p>\n<pre>&gt;&gt;&gt; from simplegeneric import generic\n&gt;&gt;&gt; @generic\n... def move(item, target):\n...     \"\"\"Default implementation goes here\"\"\"\n...     print(\"what you say?!\")\n\n&gt;&gt;&gt; @move.when_type(int)\n... def move_int(item, target):\n...     print(\"In AD %d, %s was beginning.\" % (item, target))\n\n&gt;&gt;&gt; @move.when_type(str)\n... def move_str(item, target):\n...     print(\"How are you %s!!\" % item)\n...     print(\"All your %s are belong to us.\" % (target,))\n\n&gt;&gt;&gt; zig = object()\n&gt;&gt;&gt; @move.when_object(zig)\n... def move_zig(item, target):\n...     print(\"You know what you %s.\" % (target,))\n...     print(\"For great justice!\")\n\n&gt;&gt;&gt; move(2101, \"war\")\nIn AD 2101, war was beginning.\n\n&gt;&gt;&gt; move(\"gentlemen\", \"base\")\nHow are you gentlemen!!\nAll your base are belong to us.\n\n&gt;&gt;&gt; move(zig, \"doing\")\nYou know what you doing.\nFor great justice!\n\n&gt;&gt;&gt; move(27.0, 56.2)\nwhat you say?!\n</pre>\n</div>\n<div id=\"inheritance-and-allowed-types\">\n<h2>Inheritance and Allowed Types</h2>\n<p>Defining multiple methods for the same type or object is an error:</p>\n<pre>&gt;&gt;&gt; @move.when_type(str)\n... def this_is_wrong(item, target):\n...     pass\nTraceback (most recent call last):\n...\nTypeError: &lt;function move...&gt; already has method for type &lt;...'str'&gt;\n\n&gt;&gt;&gt; @move.when_object(zig)\n... def this_is_wrong(item, target): pass\nTraceback (most recent call last):\n  ...\nTypeError: &lt;function move...&gt; already has method for object &lt;object ...&gt;\n</pre>\n<p>And the <tt>when_type()</tt> decorator only accepts classes or types:</p>\n<pre>&gt;&gt;&gt; @move.when_type(23)\n... def move_23(item, target):\n...     print(\"You have no chance to survive!\")\nTraceback (most recent call last):\n  ...\nTypeError: 23 is not a type or class\n</pre>\n<p>Methods defined for supertypes are inherited following MRO order:</p>\n<pre>&gt;&gt;&gt; class MyString(str):\n...     \"\"\"String subclass\"\"\"\n\n&gt;&gt;&gt; move(MyString(\"ladies\"), \"drinks\")\nHow are you ladies!!\nAll your drinks are belong to us.\n</pre>\n<p>Classic class instances are also supported (although the lookup process\nis slower than for new-style instances):</p>\n<pre>&gt;&gt;&gt; class X: pass\n&gt;&gt;&gt; class Y(X): pass\n\n&gt;&gt;&gt; @move.when_type(X)\n... def move_x(item, target):\n...     print(\"Someone set us up the %s!!!\" % (target,))\n\n&gt;&gt;&gt; move(X(), \"bomb\")\nSomeone set us up the bomb!!!\n\n&gt;&gt;&gt; move(Y(), \"dance\")\nSomeone set us up the dance!!!\n</pre>\n</div>\n<div id=\"multiple-types-or-objects\">\n<h2>Multiple Types or Objects</h2>\n<p>As a convenience, you can now pass more than one type or object to the\nregistration methods:</p>\n<pre>&gt;&gt;&gt; @generic\n... def isbuiltin(ob):\n...     return False\n&gt;&gt;&gt; @isbuiltin.when_type(int, str, float, complex, type)\n... @isbuiltin.when_object(None, Ellipsis)\n... def yes(ob):\n...     return True\n\n&gt;&gt;&gt; isbuiltin(1)\nTrue\n&gt;&gt;&gt; isbuiltin(object)\nTrue\n&gt;&gt;&gt; isbuiltin(object())\nFalse\n&gt;&gt;&gt; isbuiltin(X())\nFalse\n&gt;&gt;&gt; isbuiltin(None)\nTrue\n&gt;&gt;&gt; isbuiltin(Ellipsis)\nTrue\n</pre>\n</div>\n<div id=\"defaults-and-docs\">\n<h2>Defaults and Docs</h2>\n<p>You can obtain a function\u2019s default implementation using its <tt>default</tt>\nattribute:</p>\n<pre>&gt;&gt;&gt; @move.when_type(Y)\n... def move_y(item, target):\n...     print(\"Someone set us up the %s!!!\" % (target,))\n...     move.default(item, target)\n\n&gt;&gt;&gt; move(Y(), \"dance\")\nSomeone set us up the dance!!!\nwhat you say?!\n</pre>\n<p><tt>help()</tt> and other documentation tools see generic functions as normal\nfunction objects, with the same name, attributes, docstring, and module as\nthe prototype/default function:</p>\n<pre>&gt;&gt;&gt; help(move)\nHelp on function move:\n...\nmove(*args, **kw)\n    Default implementation goes here\n...\n</pre>\n</div>\n<div id=\"inspection-and-extension\">\n<h2>Inspection and Extension</h2>\n<p>You can find out if a generic function has a method for a type or object using\nthe <tt>has_object()</tt> and <tt>has_type()</tt> methods:</p>\n<pre>&gt;&gt;&gt; move.has_object(zig)\nTrue\n&gt;&gt;&gt; move.has_object(42)\nFalse\n\n&gt;&gt;&gt; move.has_type(X)\nTrue\n&gt;&gt;&gt; move.has_type(float)\nFalse\n</pre>\n<p>Note that <tt>has_type()</tt> only queries whether there is a method registered for\nthe <em>exact</em> type, not subtypes or supertypes:</p>\n<pre>&gt;&gt;&gt; class Z(X): pass\n&gt;&gt;&gt; move.has_type(Z)\nFalse\n</pre>\n<p>You can create a generic function that \u201cinherits\u201d from an existing generic\nfunction by calling <tt>generic()</tt> on the existing function:</p>\n<pre>&gt;&gt;&gt; move2 = generic(move)\n&gt;&gt;&gt; move(2101, \"war\")\nIn AD 2101, war was beginning.\n</pre>\n<p>Any methods added to the new generic function override <em>all</em> methods in the\n\u201cbase\u201d function:</p>\n<pre>&gt;&gt;&gt; @move2.when_type(X)\n... def move2_X(item, target):\n...     print(\"You have no chance to survive make your %s!\" % (target,))\n\n&gt;&gt;&gt; move2(X(), \"time\")\nYou have no chance to survive make your time!\n\n&gt;&gt;&gt; move2(Y(), \"time\")\nYou have no chance to survive make your time!\n</pre>\n<p>Notice that even though <tt>move()</tt> has a method for type <tt>Y</tt>, the method\ndefined for <tt>X</tt> in <tt>move2()</tt> takes precedence.  This is because the\n<tt>move</tt> function is used as the <tt>default</tt> method of <tt>move2</tt>, and <tt>move2</tt>\nhas no method for type <tt>Y</tt>:</p>\n<pre>&gt;&gt;&gt; move2.default is move\nTrue\n&gt;&gt;&gt; move.has_type(Y)\nTrue\n&gt;&gt;&gt; move2.has_type(Y)\nFalse\n</pre>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<ul>\n<li>The first argument is always used for dispatching, and it must always be\npassed <em>positionally</em> when the function is called.</li>\n<li>Documentation tools don\u2019t see the function\u2019s original argument signature, so\nyou have to describe it in the docstring.</li>\n<li>If you have optional arguments, you must duplicate them on every method in\norder for them to work correctly.  (On the plus side, it means you can have\ndifferent defaults or required arguments for each method, although relying on\nthat quirk probably isn\u2019t a good idea.)</li>\n</ul>\n<p>These restrictions may be lifted in later releases, if I feel the need.  They\nwould require runtime code generation the way I do it in <tt>RuleDispatch</tt>,\nhowever, which is somewhat of a pain.  (Alternately I could use the\n<tt>BytecodeAssembler</tt> package to do the code generation, as that\u2019s a lot easier\nto use than string-based code generation, but that would introduce more\ndependencies, and I\u2019m trying to keep this simple so I can just\ntoss it into Chandler without a big footprint increase.)</p>\n</div>\n\n          </div>"}, "last_serial": 799576, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "1911d4b62d2f1718c71a28851a379499", "sha256": "7429d7bd0e172766a6ec26b697f7f3003b5e2dae5cd2f5a74fbcc70d5cc63a6d"}, "downloads": -1, "filename": "simplegeneric-0.5-py2.4.egg", "has_sig": false, "md5_digest": "1911d4b62d2f1718c71a28851a379499", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 6602, "upload_time": "2006-10-06T01:09:29", "upload_time_iso_8601": "2006-10-06T01:09:29Z", "url": "https://files.pythonhosted.org/packages/2e/cc/6eb64b885a85d2675f981c2e2294c14b61791781d1c990bfe3d16345cb28/simplegeneric-0.5-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf186041539b84ac6da8d7b84529a765", "sha256": "ce1514944f17706a9700c6e1f2f24db1b4027c27ddd9cdaaacc41dd4378f78cb"}, "downloads": -1, "filename": "simplegeneric-0.5.zip", "has_sig": false, "md5_digest": "cf186041539b84ac6da8d7b84529a765", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12951, "upload_time": "2006-10-06T01:09:28", "upload_time_iso_8601": "2006-10-06T01:09:28Z", "url": "https://files.pythonhosted.org/packages/89/15/41e21eaa84f5916af0832e0ae5d43107269d2417bdc5051058117f976abe/simplegeneric-0.5.zip", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "a90b2e5129607160172b15f3d49045f2", "sha256": "2cbd6a561962bb505868093248c39ef18b77bc54e174c0ecb2b6bc19c73bce5c"}, "downloads": -1, "filename": "simplegeneric-0.6-py2.4.egg", "has_sig": false, "md5_digest": "a90b2e5129607160172b15f3d49045f2", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 7566, "upload_time": "2006-10-11T17:15:44", "upload_time_iso_8601": "2006-10-11T17:15:44Z", "url": "https://files.pythonhosted.org/packages/c1/e4/7edc11dc09e7114dc44d5a400efa2068b21b8d1a20cd0cc9862764f5b68d/simplegeneric-0.6-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e8f5a8e623a0ae8ae203f19652d06b7", "sha256": "260bef9dc6e5f7fbedbc51f173b06f3dc5c16e277105e886b908b1d7a058b048"}, "downloads": -1, "filename": "simplegeneric-0.6.zip", "has_sig": false, "md5_digest": "0e8f5a8e623a0ae8ae203f19652d06b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14669, "upload_time": "2006-10-11T17:15:41", "upload_time_iso_8601": "2006-10-11T17:15:41Z", "url": "https://files.pythonhosted.org/packages/f6/50/9d44752c67e582a17fb445440248f2a810ec142269d2be581fd47d3b43cc/simplegeneric-0.6.zip", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "0543168a0f482c3f5a92d71482e5f99a", "sha256": "f3267c6c6bd46be0328ff3fcad450b7fa538dad03cd841765b2c3076ba244b71"}, "downloads": -1, "filename": "simplegeneric-0.7.zip", "has_sig": false, "md5_digest": "0543168a0f482c3f5a92d71482e5f99a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15972, "upload_time": "2010-07-30T03:49:43", "upload_time_iso_8601": "2010-07-30T03:49:43.967792Z", "url": "https://files.pythonhosted.org/packages/a0/c9/d2467fed6ddb29f1ae571759acdfce8666eece3b590af8fcb0e380a8b3a0/simplegeneric-0.7.zip", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "eaa358a5f9517a8b475d03fbee3ec90f", "sha256": "8c0c4963da2695ba7c0f953f2cdac31d2c41d619fe9419e9d75432f8a231f966"}, "downloads": -1, "filename": "simplegeneric-0.8.zip", "has_sig": false, "md5_digest": "eaa358a5f9517a8b475d03fbee3ec90f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16114, "upload_time": "2011-09-01T04:52:40", "upload_time_iso_8601": "2011-09-01T04:52:40.277162Z", "url": "https://files.pythonhosted.org/packages/9f/32/8282e43fe8e017479880d36a5b7ce5146fd1614cec9590cb67be0a70ad51/simplegeneric-0.8.zip", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "f9c1fab00fd981be588fc32759f474e3", "sha256": "dc972e06094b9af5b855b3df4a646395e43d1c9d0d39ed345b7393560d0b9173"}, "downloads": -1, "filename": "simplegeneric-0.8.1.zip", "has_sig": false, "md5_digest": "f9c1fab00fd981be588fc32759f474e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12663, "upload_time": "2012-04-01T23:39:06", "upload_time_iso_8601": "2012-04-01T23:39:06.146671Z", "url": "https://files.pythonhosted.org/packages/3d/57/4d9c9e3ae9a255cd4e1106bb57e24056d3d0709fc01b2e3e345898e49d5b/simplegeneric-0.8.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9c1fab00fd981be588fc32759f474e3", "sha256": "dc972e06094b9af5b855b3df4a646395e43d1c9d0d39ed345b7393560d0b9173"}, "downloads": -1, "filename": "simplegeneric-0.8.1.zip", "has_sig": false, "md5_digest": "f9c1fab00fd981be588fc32759f474e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12663, "upload_time": "2012-04-01T23:39:06", "upload_time_iso_8601": "2012-04-01T23:39:06.146671Z", "url": "https://files.pythonhosted.org/packages/3d/57/4d9c9e3ae9a255cd4e1106bb57e24056d3d0709fc01b2e3e345898e49d5b/simplegeneric-0.8.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:10:46 2020"}