{"info": {"author": "Adrian Sampson", "author_email": "adrian@radbox.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: System :: Logging"], "description": "Loglet\n======\n\nLoglet_ is a tiny tool for keeping tabs on long-running processes.\nSend log messages to Loglet using a simple ``POST`` request and then view\nthem in your browser or subscribe to an Atom feed.\n\nThis Python package provides a small client library of Loglet.  You can\ncreates a new loglet simply by this and send messages by using standard\n``logging`` interface.  For example::\n\n    import logging\n    from loglet import LogletHandler\n\n    logger = logging.getLogger(__name__)\n    loglet = LogletHandler(mode='threading')\n    logger.addHandler(loglet)\n    logger.setLevel(logging.DEBUG)\n\n    logger.info('hello')\n    logger.error('something horrible has happened')\n\nIf you have a loglet already, you can specify logid explicitly::\n\n    loglet = LogletHandler('2LNbYgNEAaezJduj')\n\nThere are 4 types of sync/async modes:\n\n``'sync'`` (default)\n   Simply sends all logs synchronously.  It can affect serious inefficiency\n   to your application.\n\n``'threading'``\n   Sends all logs asynchronously by using standard ``threading`` module.\n   Threads are rich and heavy to use for just input/output.\n\n``'multiprocessing'``\n   Sends all logs asynchronously by using standard ``multiprocessing`` module.\n   It requires to use Python 2.6 or higher.  It forks for every message\n   internally.\n\n``'gevent'``\n   Sends all logs asynchronously by greenlet (coroutine).  It requires\n   to install gevent_.  Most efficient way though additional dependency is\n   required.\n\n.. _Loglet: http://loglet.radbox.org/\n.. _gevent: http://gevent.org/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://loglet.radbox.org/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "loglet", "package_url": "https://pypi.org/project/loglet/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/loglet/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://loglet.radbox.org/"}, "release_url": "https://pypi.org/project/loglet/1.0/", "requires_dist": null, "requires_python": null, "summary": "client library Loglet, the Web-based logging system", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://loglet.radbox.org/\" rel=\"nofollow\">Loglet</a> is a tiny tool for keeping tabs on long-running processes.\nSend log messages to Loglet using a simple <tt>POST</tt> request and then view\nthem in your browser or subscribe to an Atom feed.</p>\n<p>This Python package provides a small client library of Loglet.  You can\ncreates a new loglet simply by this and send messages by using standard\n<tt>logging</tt> interface.  For example:</p>\n<pre>import logging\nfrom loglet import LogletHandler\n\nlogger = logging.getLogger(__name__)\nloglet = LogletHandler(mode='threading')\nlogger.addHandler(loglet)\nlogger.setLevel(logging.DEBUG)\n\nlogger.info('hello')\nlogger.error('something horrible has happened')\n</pre>\n<p>If you have a loglet already, you can specify logid explicitly:</p>\n<pre>loglet = LogletHandler('2LNbYgNEAaezJduj')\n</pre>\n<p>There are 4 types of sync/async modes:</p>\n<dl>\n<dt><tt>'sync'</tt> (default)</dt>\n<dd>Simply sends all logs synchronously.  It can affect serious inefficiency\nto your application.</dd>\n<dt><tt>'threading'</tt></dt>\n<dd>Sends all logs asynchronously by using standard <tt>threading</tt> module.\nThreads are rich and heavy to use for just input/output.</dd>\n<dt><tt>'multiprocessing'</tt></dt>\n<dd>Sends all logs asynchronously by using standard <tt>multiprocessing</tt> module.\nIt requires to use Python 2.6 or higher.  It forks for every message\ninternally.</dd>\n<dt><tt>'gevent'</tt></dt>\n<dd>Sends all logs asynchronously by greenlet (coroutine).  It requires\nto install <a href=\"http://gevent.org/\" rel=\"nofollow\">gevent</a>.  Most efficient way though additional dependency is\nrequired.</dd>\n</dl>\n\n          </div>"}, "last_serial": 660118, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "e26c9596a2c8169d3d44dfdf5e0f4dc0", "sha256": "616958549f1b334366fc65c02132bec800d62b10d43678152f97eb2c7fdad15f"}, "downloads": -1, "filename": "loglet-1.0.tar.gz", "has_sig": false, "md5_digest": "e26c9596a2c8169d3d44dfdf5e0f4dc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3358, "upload_time": "2011-12-17T02:09:30", "upload_time_iso_8601": "2011-12-17T02:09:30.359169Z", "url": "https://files.pythonhosted.org/packages/31/82/354c0f472b5cb291cceda67259e585feb350756d5296f049a1494a867b3b/loglet-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e26c9596a2c8169d3d44dfdf5e0f4dc0", "sha256": "616958549f1b334366fc65c02132bec800d62b10d43678152f97eb2c7fdad15f"}, "downloads": -1, "filename": "loglet-1.0.tar.gz", "has_sig": false, "md5_digest": "e26c9596a2c8169d3d44dfdf5e0f4dc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3358, "upload_time": "2011-12-17T02:09:30", "upload_time_iso_8601": "2011-12-17T02:09:30.359169Z", "url": "https://files.pythonhosted.org/packages/31/82/354c0f472b5cb291cceda67259e585feb350756d5296f049a1494a867b3b/loglet-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:11 2020"}