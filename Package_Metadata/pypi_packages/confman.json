{"info": {"author": "Laurent Bachelier", "author_email": "laurent@bachelier.name", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "=======\nconfman\n=======\n\nDescription\n-----------\n\nSynchronize configuration files between machines, lazily, without root permissions,\nand still be able to create powerful rules when needed.\n\nWhile it is mainly targeted at managing personal configuration files (dotfiles),\nit can be used to deploy files to pretty much anything.\n\nIt is designed to have almost no dependencies, and is contained in one small file.\n\nBy default, it will create symbolic links in the destination directory to the files\nin the source directory.\nHowever, some filenames can indicate special actions instead (see below).\n\n\nRequirements\n------------\n\nPython 2.7 or 3.5 or later.\nNo installation needed, though you can install it.\n\n\nUsage\n-----\nThe project is usable, but has no CLI interface for now.\nExamples are available in ``example.py`` and in the public-dotfiles repository.\n\nA simple example:\n\n::\n\n    from confman import ConfigSource\n    c = ConfigSource(\"~/dotfiles\", \"~\")\n    c.sync()\n\n\nSpecial actions\n---------------\n\n* Files with names starting with ``_`` will be ignored.\n  This is useful to provide data for programmable actions.\n* File with names ending with ``.copy`` will be a copy.\n  It will update the destination file every time.\n* File with names ending with ``.copyonce`` will be a copy.\n  It will not update the destination file if either file is modified.\n* Files with names ending with ``.empty`` will be an empty file.\n  It will not update the destination file if either file is modified.\n* Files with names ending with ``.p.py`` are programmable actions.\n  They contain Python code, and are provided with some special methods.\n* Files with names ending with ``.F`` are normal files.\n  It means ``blah.p.py.F`` will end up as ``blah.p.py``,\n  and ``f.F.F`` as ``f.F``. It is really useful to make a symbolic link of\n  a directory instead of all its children (effectively treating\n  the directory as a file).\n\nAll the matching parts of the special actions are removed; ``myfile.empty`` will create\nan empty file named ``myfile``.\n\nProgrammable actions\n--------------------\n\nProgrammable actions can do everything special actions can do, and more.\nThey have to raise a \"Forwarder\", however for most uses helpers are provided to\nkeep the code short.\n\n* ``empty()`` raises an empty action.\n* ``ignore()`` raises an ignore action.\n* ``redirect(filename)`` will create a symbolic link to the provided filename with a ``_`` added.\n  ``redirect('myfile')`` will create a symbolic link to ``_myfile``.\n\n\nText / Templates\n~~~~~~~~~~~~~~~~\n\nBoth ``text()`` and ``template()`` use ``string.Template`` templates.\n\n* ``text(data)`` will put the text from the data variable in the destination file.\n* ``template(filename)`` acts like ``text()`` but takes the data from a file.\n\nThey have to be used in two steps:\n\n::\n\n    text('hello $name').render(hello='laurentb')\n\nA ``warning`` variable is provided, to help prevent users from modifying\nautomatically generated files.\n\n::\n\n    text('''# $warning\n    aaa=$var''').render(var='123')\n\nWill output:\n\n::\n\n    # WARNING: Do not edit this file, edit the template instead.\n    aaa=123\n\nSince it is Python, you can use external libraries if you want,\nincluding advanced template libraries like ``mako``.\n\n\nOptions variable\n~~~~~~~~~~~~~~~~\n\nYou can provide an ``options`` variable to ``confman``, which will be provided\nto the programmable actions.\n\n::\n\n    from confman import ConfigSource\n    c = ConfigSource(\"~/dotfiles\", \"~\", options={'hostname': 'myhostname'})\n    c.sync()\n\nA programmable action could use it like this:\n\n::\n\n    if options['hostname'] == 'myhostname':\n        redirect('myfile')\n    else:\n        ignore()\n\n\nThe ``options`` variable does not have to be a ``dict``, it can be anything you want.\n\n\nAdvanced use\n------------\n\nTo debug what is happening (and why), you can do:\n\n::\n\n    from confman import ConfigSource\n    c.sync()\n    print repr(c)\n\n\nChanging the default behavior\n-----------------------------\n\nAll special actions are optional, and can be configured or subclassed.\nFor example, you could change the matching of \"copy\" actions:\n\n::\n\n    import confman, re\n    # use .COPY instead of .copy\n    confman.CopyAction.MATCHED = re.compile(r\"\\.COPY$\")\n    # use hg instead of git\n    confman.IgnoreAction.MATCHED = re.compile(r\"_|\\.hg|\\.hgignore\")\n\nYou can also change what classes are used.\nBy default, it is ``confman.ConfigSource.DEFAULT_CLASSES``.\n\n::\n\n    import confman\n    confman.ConfigSource(\"~/dotfiles\", \"~\", classes=[MyClass, confman.SymlinkAction])\n\n\nDevelopment\n-----------\n\nContributions can be sent in the form of git patches, to laurent@bachelier.name.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://git.p.engu.in/laurentb/confman/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "confman", "package_url": "https://pypi.org/project/confman/", "platform": "", "project_url": "https://pypi.org/project/confman/", "project_urls": {"Homepage": "http://git.p.engu.in/laurentb/confman/"}, "release_url": "https://pypi.org/project/confman/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Lazy, rootless, yet powerful config file management mostly using symlinks", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p>Synchronize configuration files between machines, lazily, without root permissions,\nand still be able to create powerful rules when needed.</p>\n<p>While it is mainly targeted at managing personal configuration files (dotfiles),\nit can be used to deploy files to pretty much anything.</p>\n<p>It is designed to have almost no dependencies, and is contained in one small file.</p>\n<p>By default, it will create symbolic links in the destination directory to the files\nin the source directory.\nHowever, some filenames can indicate special actions instead (see below).</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Python 2.7 or 3.5 or later.\nNo installation needed, though you can install it.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The project is usable, but has no CLI interface for now.\nExamples are available in <tt>example.py</tt> and in the public-dotfiles repository.</p>\n<p>A simple example:</p>\n<pre>from confman import ConfigSource\nc = ConfigSource(\"~/dotfiles\", \"~\")\nc.sync()\n</pre>\n</div>\n<div id=\"special-actions\">\n<h2>Special actions</h2>\n<ul>\n<li>Files with names starting with <tt>_</tt> will be ignored.\nThis is useful to provide data for programmable actions.</li>\n<li>File with names ending with <tt>.copy</tt> will be a copy.\nIt will update the destination file every time.</li>\n<li>File with names ending with <tt>.copyonce</tt> will be a copy.\nIt will not update the destination file if either file is modified.</li>\n<li>Files with names ending with <tt>.empty</tt> will be an empty file.\nIt will not update the destination file if either file is modified.</li>\n<li>Files with names ending with <tt>.p.py</tt> are programmable actions.\nThey contain Python code, and are provided with some special methods.</li>\n<li>Files with names ending with <tt>.F</tt> are normal files.\nIt means <tt>blah.p.py.F</tt> will end up as <tt>blah.p.py</tt>,\nand <tt>f.F.F</tt> as <tt>f.F</tt>. It is really useful to make a symbolic link of\na directory instead of all its children (effectively treating\nthe directory as a file).</li>\n</ul>\n<p>All the matching parts of the special actions are removed; <tt>myfile.empty</tt> will create\nan empty file named <tt>myfile</tt>.</p>\n</div>\n<div id=\"programmable-actions\">\n<h2>Programmable actions</h2>\n<p>Programmable actions can do everything special actions can do, and more.\nThey have to raise a \u201cForwarder\u201d, however for most uses helpers are provided to\nkeep the code short.</p>\n<ul>\n<li><tt>empty()</tt> raises an empty action.</li>\n<li><tt>ignore()</tt> raises an ignore action.</li>\n<li><tt>redirect(filename)</tt> will create a symbolic link to the provided filename with a <tt>_</tt> added.\n<tt><span class=\"pre\">redirect('myfile')</span></tt> will create a symbolic link to <tt>_myfile</tt>.</li>\n</ul>\n<div id=\"text-templates\">\n<h3>Text / Templates</h3>\n<p>Both <tt>text()</tt> and <tt>template()</tt> use <tt>string.Template</tt> templates.</p>\n<ul>\n<li><tt>text(data)</tt> will put the text from the data variable in the destination file.</li>\n<li><tt>template(filename)</tt> acts like <tt>text()</tt> but takes the data from a file.</li>\n</ul>\n<p>They have to be used in two steps:</p>\n<pre>text('hello $name').render(hello='laurentb')\n</pre>\n<p>A <tt>warning</tt> variable is provided, to help prevent users from modifying\nautomatically generated files.</p>\n<pre>text('''# $warning\naaa=$var''').render(var='123')\n</pre>\n<p>Will output:</p>\n<pre># WARNING: Do not edit this file, edit the template instead.\naaa=123\n</pre>\n<p>Since it is Python, you can use external libraries if you want,\nincluding advanced template libraries like <tt>mako</tt>.</p>\n</div>\n<div id=\"options-variable\">\n<h3>Options variable</h3>\n<p>You can provide an <tt>options</tt> variable to <tt>confman</tt>, which will be provided\nto the programmable actions.</p>\n<pre>from confman import ConfigSource\nc = ConfigSource(\"~/dotfiles\", \"~\", options={'hostname': 'myhostname'})\nc.sync()\n</pre>\n<p>A programmable action could use it like this:</p>\n<pre>if options['hostname'] == 'myhostname':\n    redirect('myfile')\nelse:\n    ignore()\n</pre>\n<p>The <tt>options</tt> variable does not have to be a <tt>dict</tt>, it can be anything you want.</p>\n</div>\n</div>\n<div id=\"advanced-use\">\n<h2>Advanced use</h2>\n<p>To debug what is happening (and why), you can do:</p>\n<pre>from confman import ConfigSource\nc.sync()\nprint repr(c)\n</pre>\n</div>\n<div id=\"changing-the-default-behavior\">\n<h2>Changing the default behavior</h2>\n<p>All special actions are optional, and can be configured or subclassed.\nFor example, you could change the matching of \u201ccopy\u201d actions:</p>\n<pre>import confman, re\n# use .COPY instead of .copy\nconfman.CopyAction.MATCHED = re.compile(r\"\\.COPY$\")\n# use hg instead of git\nconfman.IgnoreAction.MATCHED = re.compile(r\"_|\\.hg|\\.hgignore\")\n</pre>\n<p>You can also change what classes are used.\nBy default, it is <tt>confman.ConfigSource.DEFAULT_CLASSES</tt>.</p>\n<pre>import confman\nconfman.ConfigSource(\"~/dotfiles\", \"~\", classes=[MyClass, confman.SymlinkAction])\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Contributions can be sent in the form of git patches, to <a href=\"mailto:laurent%40bachelier.name\">laurent<span>@</span>bachelier<span>.</span>name</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6502965, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "98059399b72d80007f28d80dd68e1e80", "sha256": "9a7e062f5d49fe7fa358168c5bc4c7772094d4d931ac36fb260fa58bbca80408"}, "downloads": -1, "filename": "confman-0.1.tar.gz", "has_sig": false, "md5_digest": "98059399b72d80007f28d80dd68e1e80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8462, "upload_time": "2013-03-04T00:23:54", "upload_time_iso_8601": "2013-03-04T00:23:54.438734Z", "url": "https://files.pythonhosted.org/packages/4d/c0/57e7af36d0431db6224d374849a206835133a0fcd3165f180fd2a0be063a/confman-0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f074628dcb3c4f299ba9e4d2c4260851", "sha256": "945581e20826c0e34733bc372edb29deecce44cb8026e874e722d20d0c9c7b01"}, "downloads": -1, "filename": "confman-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f074628dcb3c4f299ba9e4d2c4260851", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8611, "upload_time": "2014-08-22T18:33:41", "upload_time_iso_8601": "2014-08-22T18:33:41.076342Z", "url": "https://files.pythonhosted.org/packages/45/4b/6c8fcafc60ecd42fb477ebd55977a0996f7d69d671aee563b73da1992022/confman-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "cd93885d920d8247c29e698746a6e5cd", "sha256": "800c8b258d45b858d8785c56e3e9acc0c9e193619837b0641db880539ac33564"}, "downloads": -1, "filename": "confman-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cd93885d920d8247c29e698746a6e5cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8671, "upload_time": "2020-01-22T22:29:25", "upload_time_iso_8601": "2020-01-22T22:29:25.230430Z", "url": "https://files.pythonhosted.org/packages/26/54/64b1f73238fa45c8708bd495c601609897ac388572d5a036725a96069da2/confman-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "441728dd93d6336e97403a0c19d203bc", "sha256": "9ad0f1cfae0c51ff9bf3ba5d50e22dc62dc589dbb7615ae66714b986a7552892"}, "downloads": -1, "filename": "confman-0.3.1.tar.gz", "has_sig": false, "md5_digest": "441728dd93d6336e97403a0c19d203bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8680, "upload_time": "2020-01-22T22:47:14", "upload_time_iso_8601": "2020-01-22T22:47:14.496742Z", "url": "https://files.pythonhosted.org/packages/85/a1/75faeb9dad0db8fcd86bfc93263a9f1d11fbe2b0e2085d9e1d5032edaff8/confman-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "441728dd93d6336e97403a0c19d203bc", "sha256": "9ad0f1cfae0c51ff9bf3ba5d50e22dc62dc589dbb7615ae66714b986a7552892"}, "downloads": -1, "filename": "confman-0.3.1.tar.gz", "has_sig": false, "md5_digest": "441728dd93d6336e97403a0c19d203bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8680, "upload_time": "2020-01-22T22:47:14", "upload_time_iso_8601": "2020-01-22T22:47:14.496742Z", "url": "https://files.pythonhosted.org/packages/85/a1/75faeb9dad0db8fcd86bfc93263a9f1d11fbe2b0e2085d9e1d5032edaff8/confman-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:48 2020"}