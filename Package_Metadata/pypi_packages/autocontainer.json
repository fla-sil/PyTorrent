{"info": {"author": "Omran Jamal", "author_email": "o.jamal97@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Object Brokering"], "description": "# AutoContainer\n\nPython really needed a modern reflection based dependency injection container\nthat \"just works\". Alas, welcome to **AutoContainer** for python. The dependency injection service contaienr that just works.\n\n## Features\n\n- Direct class as service\n- Separate provider functions\n- Service Behaviors:\n    - Singleton\n    - Factory\n    - Assembler\n    - Instance\n- Naming Services\n- Container Bound Functions\n- Dependency Graph\n- Automatic Injection\n- Service registration checking\n- Inject typehint by name\n- Primitive types by name\n\n## Installation\n\n```bash\npip3 install autocontainer\n```\n\nRequirements:\n- Python >= 3.5\n\n## Usage\n\nIt's all about types and hints, but first create the container\n\n```python\nfrom autocontianer import Container\n\ncontainer = Container()\n\n# Party Time\n```\n\n\n### Classes & Injection\n\nWe'll use singleton as an example.\n\n```python\nclass A:\n    pass\n\nclass B:\n    def __init__(self, obj_a: A):\n        assert isinstance(obj_a, A)\n\n# Order does not matter.\ncontainer.singleton(B)\ncontainer.singleton(A)\n\nobj_b = container.get(B)\nassert isinstance(obj_b, B)\n```\n\n### Naming Services\n\n```python\nclass A:\n    pass\n\ncontainer.singleton(A, 'ayy')\n\nobj_a = container.get(A)\nobj_b = container.get('ayy')\n\n\nassert obj_a is obj_b\n```\n\n### Other ways to `get`\n\n```python\nobj_a = container.get(A)      # <--- Best IDE Support due to type hints.\nobj_b = container.get('ayy')\nobj_c = container.ayy         # <--- the most concise way.\nobj_d = container('ayy')\n```\n\n### Builder Functions\n\nYou won't always put raw classes into the service container\nsometimes, it's necessary to write a function that custom\ninitializes a class or object.\n\n```python\nclass A:\n    pass\n\nclass B:\n    def __init__(self):\n        self.fruit = 'tomato'\n\ndef makeB(obj_a: A) -> B: # Return type MUST be annotated\n    b = B()\n    b.fruit = 'mango'\n\n    return b\n\ncontainer.singleton(makeB)\n\nobj_b = container(B)\n\nassert obj_b.fruit == 'mango'\n```\n\n### Factory\n\nFactories can also take builder function as well as classes.\nThe container returns a new instance every time.\n\n```python\nclass A:\n    pass\n\ncontainer.factory(A)\n\naa = container.get(A)\nab = container.get(A)\n\nassert aa is not ab\nassert isinstance(aa, A)\nassert isinstance(ab, A)\n```\n\n### Binding\n\nThis is the coolest feature, trust me. Imagine you have a function\nthat needs both classes out of a container and vanilla arguments\nlike int and str, this would be a pain to do manually. Unless...\n\n```python\nclass A:\n    pass\n\nclass B:\n    pass\n\ncontainer.singleton(A)\ncontainer.singleton(B)\n\ndef crazy_function(a: A, repeating: str, b: B, times: int):\n    assert isinstance(a, A)\n    assert isinstance(b, B)\n\n    return repeating * time\n\nless_crazy_function = container.bind(crazy_function)\n\nresult = less_crazy_function(\"pew\", 3)\nassert result == 'pewpewpew'\n```\n\n### Injecting\n\nSame as binding but for simpler times.\n\n```python\nclass A:\n    pass\n\nclass B:\n    pass\n\ncontainer.singleton(A)\ncontainer.singleton(B)\n\ndef crazy_function(a: A, b: B):\n    assert isinstance(a, A)\n    assert isinstance(b, B)\n\n    return 'potato'\n\nassert contianer.inject(crazy_function) == 'potato'\n```\n\n\n### Specificity Injector\n\nThe container maintains an internal graph of dependencies that allows\nit to efficiently push instances of ancestor classes.\n\n```python\nclass A:\n    pass\n\nclass B:\n    pass\n\nclass C(A):\n    pass\n\nclass D(C, B):\n    pass\n\ncontainer.factory(A)\ncontainer.singleton(B)\ncontainer.factory(C)\ncontainer.singleton(D)\n\nobj = container.get(A)\nassert isinstance(obj, D)\nassert isinstance(obj, A)\n```\n\n### Hinting by Name\n\nThis is completely valid with the container\n\n```python\nclass A:\n    pass\n\ncontainer.singleton(A, 'apple')\n\ndef magic(ap: 'apple'):\n    assert isinstance(ap, A)\n\ncontainer.inject(magic)\n```\n\n## Available Methods\n\n- `get(service: Union[Type, str])`\n\tRetreives a service\n\n- `has(service: Union[Type, str])`  \n\tReturns if a service exists\n\n- `singleton(service: Union[Type, Callable[..., Instance]], name?: str)`  \n\tAdds a service as a singleton into container.\n\t(Returns the same object on every `get`)\n\n- `factory(service: Union[Type, Callable[..., Instance]], name?: str)`  \n\tAdds a service as a factory into container.\n\t(Returns a fresh object on every `get`)\n\n- `instance(service: object, name?: str)`  \n\tAdds a service as an instance into container.\n\t(Returns the same object on every `get`, but does not try to instantiate)\n\n- `assembler(service: Union[Type, Callable[..., Instance]], name?: str)`  \n\tAdds a service such that on every get, the container returns a _bound_ callable\n\tthat produces a fresh object everytime.\n\n- `bind(func: Callable)`  \n\tReturns a new callable but in which the arguments recognized by the container\n\tare automatically pushed when calling. (see examples below)\n\n- `inject(func: Callable)`  \n\tTakes a callable and calls it by injecting all the services it requires\n\tand then returns the return value.\n\n## Running Tests\n```bash\npython -m unittest discover -s ./\n```\n\n## License\nMIT. Go crazy.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Hedronium/autocontainer/archive/v1.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Hedronium/autocontainer", "keywords": "container,dependency,injection,inversion,control,service", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "autocontainer", "package_url": "https://pypi.org/project/autocontainer/", "platform": "", "project_url": "https://pypi.org/project/autocontainer/", "project_urls": {"Download": "https://github.com/Hedronium/autocontainer/archive/v1.1.0.tar.gz", "Homepage": "https://github.com/Hedronium/autocontainer"}, "release_url": "https://pypi.org/project/autocontainer/1.1.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A modern typing based service container and dependency injector.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AutoContainer</h1>\n<p>Python really needed a modern reflection based dependency injection container\nthat \"just works\". Alas, welcome to <strong>AutoContainer</strong> for python. The dependency injection service contaienr that just works.</p>\n<h2>Features</h2>\n<ul>\n<li>Direct class as service</li>\n<li>Separate provider functions</li>\n<li>Service Behaviors:\n<ul>\n<li>Singleton</li>\n<li>Factory</li>\n<li>Assembler</li>\n<li>Instance</li>\n</ul>\n</li>\n<li>Naming Services</li>\n<li>Container Bound Functions</li>\n<li>Dependency Graph</li>\n<li>Automatic Injection</li>\n<li>Service registration checking</li>\n<li>Inject typehint by name</li>\n<li>Primitive types by name</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip3 install autocontainer\n</pre>\n<p>Requirements:</p>\n<ul>\n<li>Python &gt;= 3.5</li>\n</ul>\n<h2>Usage</h2>\n<p>It's all about types and hints, but first create the container</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autocontianer</span> <span class=\"kn\">import</span> <span class=\"n\">Container</span>\n\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">Container</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Party Time</span>\n</pre>\n<h3>Classes &amp; Injection</h3>\n<p>We'll use singleton as an example.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj_a</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj_a</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Order does not matter.</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj_b</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj_b</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n</pre>\n<h3>Naming Services</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"s1\">'ayy'</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj_a</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"n\">obj_b</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'ayy'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">assert</span> <span class=\"n\">obj_a</span> <span class=\"ow\">is</span> <span class=\"n\">obj_b</span>\n</pre>\n<h3>Other ways to <code>get</code></h3>\n<pre><span class=\"n\">obj_a</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>      <span class=\"c1\"># &lt;--- Best IDE Support due to type hints.</span>\n<span class=\"n\">obj_b</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'ayy'</span><span class=\"p\">)</span>\n<span class=\"n\">obj_c</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">ayy</span>         <span class=\"c1\"># &lt;--- the most concise way.</span>\n<span class=\"n\">obj_d</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"p\">(</span><span class=\"s1\">'ayy'</span><span class=\"p\">)</span>\n</pre>\n<h3>Builder Functions</h3>\n<p>You won't always put raw classes into the service container\nsometimes, it's necessary to write a function that custom\ninitializes a class or object.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fruit</span> <span class=\"o\">=</span> <span class=\"s1\">'tomato'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">makeB</span><span class=\"p\">(</span><span class=\"n\">obj_a</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"c1\"># Return type MUST be annotated</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n    <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">fruit</span> <span class=\"o\">=</span> <span class=\"s1\">'mango'</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">b</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">makeB</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj_b</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">obj_b</span><span class=\"o\">.</span><span class=\"n\">fruit</span> <span class=\"o\">==</span> <span class=\"s1\">'mango'</span>\n</pre>\n<h3>Factory</h3>\n<p>Factories can also take builder function as well as classes.\nThe container returns a new instance every time.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"n\">aa</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"n\">ab</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">aa</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">ab</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">aa</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ab</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n</pre>\n<h3>Binding</h3>\n<p>This is the coolest feature, trust me. Imagine you have a function\nthat needs both classes out of a container and vanilla arguments\nlike int and str, this would be a pain to do manually. Unless...</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">crazy_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">repeating</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">repeating</span> <span class=\"o\">*</span> <span class=\"n\">time</span>\n\n<span class=\"n\">less_crazy_function</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">crazy_function</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">less_crazy_function</span><span class=\"p\">(</span><span class=\"s2\">\"pew\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"s1\">'pewpewpew'</span>\n</pre>\n<h3>Injecting</h3>\n<p>Same as binding but for simpler times.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">crazy_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"s1\">'potato'</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">contianer</span><span class=\"o\">.</span><span class=\"n\">inject</span><span class=\"p\">(</span><span class=\"n\">crazy_function</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'potato'</span>\n</pre>\n<h3>Specificity Injector</h3>\n<p>The container maintains an internal graph of dependencies that allows\nit to efficiently push instances of ancestor classes.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">D</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">D</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n</pre>\n<h3>Hinting by Name</h3>\n<p>This is completely valid with the container</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"s1\">'apple'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">magic</span><span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">inject</span><span class=\"p\">(</span><span class=\"n\">magic</span><span class=\"p\">)</span>\n</pre>\n<h2>Available Methods</h2>\n<ul>\n<li>\n<p><code>get(service: Union[Type, str])</code>\nRetreives a service</p>\n</li>\n<li>\n<p><code>has(service: Union[Type, str])</code><br>\nReturns if a service exists</p>\n</li>\n<li>\n<p><code>singleton(service: Union[Type, Callable[..., Instance]], name?: str)</code><br>\nAdds a service as a singleton into container.\n(Returns the same object on every <code>get</code>)</p>\n</li>\n<li>\n<p><code>factory(service: Union[Type, Callable[..., Instance]], name?: str)</code><br>\nAdds a service as a factory into container.\n(Returns a fresh object on every <code>get</code>)</p>\n</li>\n<li>\n<p><code>instance(service: object, name?: str)</code><br>\nAdds a service as an instance into container.\n(Returns the same object on every <code>get</code>, but does not try to instantiate)</p>\n</li>\n<li>\n<p><code>assembler(service: Union[Type, Callable[..., Instance]], name?: str)</code><br>\nAdds a service such that on every get, the container returns a <em>bound</em> callable\nthat produces a fresh object everytime.</p>\n</li>\n<li>\n<p><code>bind(func: Callable)</code><br>\nReturns a new callable but in which the arguments recognized by the container\nare automatically pushed when calling. (see examples below)</p>\n</li>\n<li>\n<p><code>inject(func: Callable)</code><br>\nTakes a callable and calls it by injecting all the services it requires\nand then returns the return value.</p>\n</li>\n</ul>\n<h2>Running Tests</h2>\n<pre>python -m unittest discover -s ./\n</pre>\n<h2>License</h2>\n<p>MIT. Go crazy.</p>\n\n          </div>"}, "last_serial": 6904998, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "9c4f99df53b9822201c6ad108c3847f3", "sha256": "d2c97c49c15bb269b6cf5cfdb176a5a8b8d4be7e7ad3e1bb414b5a1f5c46e54f"}, "downloads": -1, "filename": "autocontainer-1.0.2.tar.gz", "has_sig": false, "md5_digest": "9c4f99df53b9822201c6ad108c3847f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5319, "upload_time": "2020-03-28T08:35:26", "upload_time_iso_8601": "2020-03-28T08:35:26.126761Z", "url": "https://files.pythonhosted.org/packages/c7/cc/03a59b3f8b48639a519e1f27121851e00e4097713a84abe8d69985b3722a/autocontainer-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5ea34f3d5a7379d85b7aaa9d7f481f67", "sha256": "7f976c51d6692a9f1e28c146352238be8b5387ef18334c6631f93bfe3306b459"}, "downloads": -1, "filename": "autocontainer-1.0.3.tar.gz", "has_sig": false, "md5_digest": "5ea34f3d5a7379d85b7aaa9d7f481f67", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5317, "upload_time": "2020-03-28T08:41:15", "upload_time_iso_8601": "2020-03-28T08:41:15.926781Z", "url": "https://files.pythonhosted.org/packages/2f/60/ecbcd16e4d4aec62c4714f805fcdeaeb33a5f520ccf668b3129921f744fa/autocontainer-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ad3de18262429ffa09b3ec204dbca70a", "sha256": "29f515e2becdca45e29a0151e5fb68795ba6767ec79dcad7a6e70ed0fee646f2"}, "downloads": -1, "filename": "autocontainer-1.0.4.tar.gz", "has_sig": false, "md5_digest": "ad3de18262429ffa09b3ec204dbca70a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5305, "upload_time": "2020-03-28T08:50:07", "upload_time_iso_8601": "2020-03-28T08:50:07.501707Z", "url": "https://files.pythonhosted.org/packages/69/17/33be4dcac23fb8691cf026e9c11d0ad522f3e82e2d988be029e944a64e63/autocontainer-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1f861f5c5bd757370bd729e596916586", "sha256": "1766d5de3ac670fb560cdbd4d52249f608081f93d6d88cf9bc65c134f7915c26"}, "downloads": -1, "filename": "autocontainer-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1f861f5c5bd757370bd729e596916586", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5580, "upload_time": "2020-03-29T04:54:25", "upload_time_iso_8601": "2020-03-29T04:54:25.091223Z", "url": "https://files.pythonhosted.org/packages/d1/fa/5b6afb32547db34c2844832f36006acc164cd8e7cc7c594a712af0cb0005/autocontainer-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f861f5c5bd757370bd729e596916586", "sha256": "1766d5de3ac670fb560cdbd4d52249f608081f93d6d88cf9bc65c134f7915c26"}, "downloads": -1, "filename": "autocontainer-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1f861f5c5bd757370bd729e596916586", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5580, "upload_time": "2020-03-29T04:54:25", "upload_time_iso_8601": "2020-03-29T04:54:25.091223Z", "url": "https://files.pythonhosted.org/packages/d1/fa/5b6afb32547db34c2844832f36006acc164cd8e7cc7c594a712af0cb0005/autocontainer-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:19 2020"}