{"info": {"author": "Zawar Qureshi", "author_email": "qureshizawar@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development"], "description": "# CUDA-quartic-solver\n\n![GitHub](https://img.shields.io/github/license/qureshizawar/CUDA-quartic-solver)\n[![Build Status](https://travis-ci.org/qureshizawar/CUDA-quartic-solver.svg?branch=master)](https://travis-ci.org/qureshizawar/CUDA-quartic-solver)\n![PyPI](https://img.shields.io/pypi/v/QuarticSolver)\n\nA general cubic equation solver and quartic equation minimisation solver written for CPU and Nvidia GPUs, for more details and results, see: https://arxiv.org/abs/1903.10041. The library is available for C++/CUDA as well as Python using Pybind11.\n\n## Running the solver\n\n### Requirements\n\n1) CUDA 9.0+ capable GPU required to run the GPU solvers\n2) CMake 3.8+ \n3) Python 3.6, numpy (if using Python)\n\n### CMake\n\nCMake can be used to build the project, for example:\n```\nmkdir build && cd build\ncmake -D CMAKE_BUILD_TYPE=Release ../ -D CPP_exe=true -D GPU_build=false\nmake\n```\n\nWhen the `CPP_exe` flag is set to `true`, CMake will build a c++ executable, then ```quartic_solver_main``` can be executed to run the example code.\nWhen the `GPU_build` flag is set to `true`, CMake will build the CUDA capable version of the library\n\n### Python\n\nBy default, CMake will also build the Python version of the library which can be directly imported from the `build` folder\n\nThe Python package can also be installed by building its `.whl` file, for example:\n```\npython setup.py bdist_wheel --GPU_build True\n```\nWhen the `GPU_build` flag is set to `True`, the CUDA capable version of the library will be built\nThe built `.whl` can then be used to install the package, for example:\n```\npip install ./dist/QuarticSolver-0.1.1-cp36-cp36m-linux_x86_64.whl\n```\n\n### Usage\nPlease see `src/main.cu`, `src/cpu_main.cpp`, and the examples in the `/tests` folder for detailed usage examples\n##### C++\nGiven quartic functions of the form `Ax^4 + Bx^3 + Cx^2 + Dx + E` the minimiser for the quartic functions can calculated on the CPU by calling the following function from `cpu_solver.cpp`:\n```\nQuarticMinimumCPU(N, A, B, C, D, E, min);\n```\nWhere:\n- `N` is the number of functions\n- `A` is an array containing the coefficient A for each of the quartic functions\n- `B` is an array containing the coefficient B for each of the quartic functions\n- `C` is an array containing the coefficient C for each of the quartic functions\n- `D` is an array containing the coefficient D for each of the quartic functions\n- `E` is an array containing the coefficient E for each of the quartic functions\n- `min` is an array which will contain the corresponding minimums for each of the quartic functions\n\nThe calculations can be carried out on a GPU by using `QuarticMinimumGPU` or `QuarticMinimumGPUStreams`. Please note signifcant performance improvement is observed when `N>10000` for `QuarticMinimumGPU` vs `QuarticMinimumGPUStreams`\n\n##### Python\nThe Python version of the library can be used as follows:\n```\nimport numpy as np\nimport QuarticSolver\n\nminimum = QuarticSolver.QuarticMinimum(A,B,C,D,E,True)\n```\nWhere `A`,`B`,`C`,`D`,`E` are numpy arrays containing the quartic function coefficients and the final arg is a boolean flag which if set to `True` will use the GPU if possible. `minimum` is the returned numpy array containing the corresponding minimisers.\n## TODO\n\n1) Add multi-gpu support", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/qureshizawar/CUDA-quartic-solver", "keywords": "CUDA,QUARTIC,OPTIMISATION", "license": "", "maintainer": "", "maintainer_email": "", "name": "QuarticSolver", "package_url": "https://pypi.org/project/QuarticSolver/", "platform": "", "project_url": "https://pypi.org/project/QuarticSolver/", "project_urls": {"Homepage": "https://github.com/qureshizawar/CUDA-quartic-solver"}, "release_url": "https://pypi.org/project/QuarticSolver/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "A CPU/GPU library for finding the minimum of a quartic function", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CUDA-quartic-solver</h1>\n<p><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d281676cab2d71c46055b3edc8e89711ba0d62a6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f717572657368697a617761722f435544412d717561727469632d736f6c766572\">\n<a href=\"https://travis-ci.org/qureshizawar/CUDA-quartic-solver\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4cb8eee606054c44860393cd8eb42d539da30397/68747470733a2f2f7472617669732d63692e6f72672f717572657368697a617761722f435544412d717561727469632d736f6c7665722e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65681be3f50caeaf9e818a305fe9c06474373993/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f51756172746963536f6c766572\"></p>\n<p>A general cubic equation solver and quartic equation minimisation solver written for CPU and Nvidia GPUs, for more details and results, see: <a href=\"https://arxiv.org/abs/1903.10041\" rel=\"nofollow\">https://arxiv.org/abs/1903.10041</a>. The library is available for C++/CUDA as well as Python using Pybind11.</p>\n<h2>Running the solver</h2>\n<h3>Requirements</h3>\n<ol>\n<li>CUDA 9.0+ capable GPU required to run the GPU solvers</li>\n<li>CMake 3.8+</li>\n<li>Python 3.6, numpy (if using Python)</li>\n</ol>\n<h3>CMake</h3>\n<p>CMake can be used to build the project, for example:</p>\n<pre><code>mkdir build &amp;&amp; cd build\ncmake -D CMAKE_BUILD_TYPE=Release ../ -D CPP_exe=true -D GPU_build=false\nmake\n</code></pre>\n<p>When the <code>CPP_exe</code> flag is set to <code>true</code>, CMake will build a c++ executable, then <code>quartic_solver_main</code> can be executed to run the example code.\nWhen the <code>GPU_build</code> flag is set to <code>true</code>, CMake will build the CUDA capable version of the library</p>\n<h3>Python</h3>\n<p>By default, CMake will also build the Python version of the library which can be directly imported from the <code>build</code> folder</p>\n<p>The Python package can also be installed by building its <code>.whl</code> file, for example:</p>\n<pre><code>python setup.py bdist_wheel --GPU_build True\n</code></pre>\n<p>When the <code>GPU_build</code> flag is set to <code>True</code>, the CUDA capable version of the library will be built\nThe built <code>.whl</code> can then be used to install the package, for example:</p>\n<pre><code>pip install ./dist/QuarticSolver-0.1.1-cp36-cp36m-linux_x86_64.whl\n</code></pre>\n<h3>Usage</h3>\n<p>Please see <code>src/main.cu</code>, <code>src/cpu_main.cpp</code>, and the examples in the <code>/tests</code> folder for detailed usage examples</p>\n<h5>C++</h5>\n<p>Given quartic functions of the form <code>Ax^4 + Bx^3 + Cx^2 + Dx + E</code> the minimiser for the quartic functions can calculated on the CPU by calling the following function from <code>cpu_solver.cpp</code>:</p>\n<pre><code>QuarticMinimumCPU(N, A, B, C, D, E, min);\n</code></pre>\n<p>Where:</p>\n<ul>\n<li><code>N</code> is the number of functions</li>\n<li><code>A</code> is an array containing the coefficient A for each of the quartic functions</li>\n<li><code>B</code> is an array containing the coefficient B for each of the quartic functions</li>\n<li><code>C</code> is an array containing the coefficient C for each of the quartic functions</li>\n<li><code>D</code> is an array containing the coefficient D for each of the quartic functions</li>\n<li><code>E</code> is an array containing the coefficient E for each of the quartic functions</li>\n<li><code>min</code> is an array which will contain the corresponding minimums for each of the quartic functions</li>\n</ul>\n<p>The calculations can be carried out on a GPU by using <code>QuarticMinimumGPU</code> or <code>QuarticMinimumGPUStreams</code>. Please note signifcant performance improvement is observed when <code>N&gt;10000</code> for <code>QuarticMinimumGPU</code> vs <code>QuarticMinimumGPUStreams</code></p>\n<h5>Python</h5>\n<p>The Python version of the library can be used as follows:</p>\n<pre><code>import numpy as np\nimport QuarticSolver\n\nminimum = QuarticSolver.QuarticMinimum(A,B,C,D,E,True)\n</code></pre>\n<p>Where <code>A</code>,<code>B</code>,<code>C</code>,<code>D</code>,<code>E</code> are numpy arrays containing the quartic function coefficients and the final arg is a boolean flag which if set to <code>True</code> will use the GPU if possible. <code>minimum</code> is the returned numpy array containing the corresponding minimisers.</p>\n<h2>TODO</h2>\n<ol>\n<li>Add multi-gpu support</li>\n</ol>\n\n          </div>"}, "last_serial": 7177607, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "b054065336b620c9a75697dc09e86889", "sha256": "7fb8790f396a7f9cc565a2c30bd91b5eb5a5c255798d39ccd86171b6cd85d044"}, "downloads": -1, "filename": "QuarticSolver-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b054065336b620c9a75697dc09e86889", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3443, "upload_time": "2020-05-01T08:29:08", "upload_time_iso_8601": "2020-05-01T08:29:08.896270Z", "url": "https://files.pythonhosted.org/packages/1b/e2/b60ab9958ce617fa5816cd48fd5e17743a7f92af3b299ec5f4e74910ffb3/QuarticSolver-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2cb5ebabf6231a6bce58dcddf1633e01", "sha256": "e9b22313421f688e324e6f7b0ae85b6540f881e56e6358e6c253e2154422fd2f"}, "downloads": -1, "filename": "QuarticSolver-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2cb5ebabf6231a6bce58dcddf1633e01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3449, "upload_time": "2020-05-01T08:34:28", "upload_time_iso_8601": "2020-05-01T08:34:28.505215Z", "url": "https://files.pythonhosted.org/packages/84/9c/5b53efb4663253a579c5667d86293b39469fcac54fb8b84070beb189993c/QuarticSolver-0.1.2.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "5f8819cf97bb102f55a27d30c37d0c0a", "sha256": "1fcad0e883cdbd8c9dbf1d0c20e0cc11970df41550d71b93be55aabac9d458b9"}, "downloads": -1, "filename": "QuarticSolver-0.1.4-cp36-cp36m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "5f8819cf97bb102f55a27d30c37d0c0a", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 47998, "upload_time": "2020-05-06T05:02:50", "upload_time_iso_8601": "2020-05-06T05:02:50.265487Z", "url": "https://files.pythonhosted.org/packages/fa/55/cc3356e74b2e59b0f5908c35aef1d0fd391466b7e777c247bdaf988c3705/QuarticSolver-0.1.4-cp36-cp36m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1793091e3da12c214d9173ee65641598", "sha256": "bf068374a9efbe25471957d21cfb00aa044c52247c6dc814117872746db3dfbf"}, "downloads": -1, "filename": "QuarticSolver-0.1.4-cp36-cp36m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "1793091e3da12c214d9173ee65641598", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 80044, "upload_time": "2020-05-06T05:03:20", "upload_time_iso_8601": "2020-05-06T05:03:20.175304Z", "url": "https://files.pythonhosted.org/packages/f5/f7/72960c058d35853bf186cb42f670641ef4adfe763000212d53dc5fd0e6ce/QuarticSolver-0.1.4-cp36-cp36m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2be23b4d7e584ddad6828a949eb9197", "sha256": "6e35d02b0fc76b6a2f13da9168d1366cef8e2fb2f6ae7dab6f59f63dadb93b8b"}, "downloads": -1, "filename": "QuarticSolver-0.1.4-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "a2be23b4d7e584ddad6828a949eb9197", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 69856, "upload_time": "2020-05-06T05:03:20", "upload_time_iso_8601": "2020-05-06T05:03:20.950846Z", "url": "https://files.pythonhosted.org/packages/86/7b/954f33cabb025076d46550eabea13713f4fc2d60da75146f7654b3db3d84/QuarticSolver-0.1.4-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f9be8694b64238ad3d923c63fa7f3e0", "sha256": "500a83370869dda46787ccfadc7dcfdcf91659d995c354393bddf6371dae45e9"}, "downloads": -1, "filename": "QuarticSolver-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5f9be8694b64238ad3d923c63fa7f3e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 615736, "upload_time": "2020-05-06T05:01:54", "upload_time_iso_8601": "2020-05-06T05:01:54.935963Z", "url": "https://files.pythonhosted.org/packages/36/5c/01169cb41869dd3a76b16b55afbfe14540002763a0524f675eb206953525/QuarticSolver-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f8819cf97bb102f55a27d30c37d0c0a", "sha256": "1fcad0e883cdbd8c9dbf1d0c20e0cc11970df41550d71b93be55aabac9d458b9"}, "downloads": -1, "filename": "QuarticSolver-0.1.4-cp36-cp36m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "5f8819cf97bb102f55a27d30c37d0c0a", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 47998, "upload_time": "2020-05-06T05:02:50", "upload_time_iso_8601": "2020-05-06T05:02:50.265487Z", "url": "https://files.pythonhosted.org/packages/fa/55/cc3356e74b2e59b0f5908c35aef1d0fd391466b7e777c247bdaf988c3705/QuarticSolver-0.1.4-cp36-cp36m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1793091e3da12c214d9173ee65641598", "sha256": "bf068374a9efbe25471957d21cfb00aa044c52247c6dc814117872746db3dfbf"}, "downloads": -1, "filename": "QuarticSolver-0.1.4-cp36-cp36m-manylinux2010_i686.whl", "has_sig": false, "md5_digest": "1793091e3da12c214d9173ee65641598", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 80044, "upload_time": "2020-05-06T05:03:20", "upload_time_iso_8601": "2020-05-06T05:03:20.175304Z", "url": "https://files.pythonhosted.org/packages/f5/f7/72960c058d35853bf186cb42f670641ef4adfe763000212d53dc5fd0e6ce/QuarticSolver-0.1.4-cp36-cp36m-manylinux2010_i686.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2be23b4d7e584ddad6828a949eb9197", "sha256": "6e35d02b0fc76b6a2f13da9168d1366cef8e2fb2f6ae7dab6f59f63dadb93b8b"}, "downloads": -1, "filename": "QuarticSolver-0.1.4-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "a2be23b4d7e584ddad6828a949eb9197", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 69856, "upload_time": "2020-05-06T05:03:20", "upload_time_iso_8601": "2020-05-06T05:03:20.950846Z", "url": "https://files.pythonhosted.org/packages/86/7b/954f33cabb025076d46550eabea13713f4fc2d60da75146f7654b3db3d84/QuarticSolver-0.1.4-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f9be8694b64238ad3d923c63fa7f3e0", "sha256": "500a83370869dda46787ccfadc7dcfdcf91659d995c354393bddf6371dae45e9"}, "downloads": -1, "filename": "QuarticSolver-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5f9be8694b64238ad3d923c63fa7f3e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 615736, "upload_time": "2020-05-06T05:01:54", "upload_time_iso_8601": "2020-05-06T05:01:54.935963Z", "url": "https://files.pythonhosted.org/packages/36/5c/01169cb41869dd3a76b16b55afbfe14540002763a0524f675eb206953525/QuarticSolver-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:45 2020"}