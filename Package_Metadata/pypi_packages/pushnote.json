{"info": {"author": "Dadaso Zanzane", "author_email": "dada.z888@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License"], "description": "pushnote\r\n========\r\n\r\n`pushnote`_ is a simple django plugin for sending push messages from\r\ndjango server to sockjs clients. It internally uses `zeromq`_ and\r\n`sockjs-tornado`_. pushnote can send push notifications to all sockjs\r\nclients and to subset of this clients.\r\n\r\nRequirements:\r\n-------------\r\n\r\n1. `pyzmq`_>=2.0\r\n2. `sockjs-tornado`_>=0.0.5\r\n3. `django`_>=1.4\r\n\r\nInstallation:\r\n-------------\r\n\r\nInstall ``pushnote`` with your favorite Python package manager:\r\n\r\n::\r\n\r\n   pip install pushnote\r\n\r\nAdd ``pushnote`` to your ``INSTALLED_APPS`` in ``settings.py``\r\n\r\n::\r\n\r\n   INSTALLED_APPS = (\r\n       'django.contrib.auth',\r\n       'pushnote',\r\n       ...\r\n   )\r\n\r\nDefine ``PUSHNOTE_MQ_SOCKET`` in ``settings.py``\r\n\r\n::\r\n\r\n   PUSHNOTE_MQ_SOCKET = 'tcp://127.0.0.1:8002'\r\n\r\nUsage:\r\n------\r\n\r\nRun pushnote forwarder device\r\n\r\n::\r\n\r\n   pushnote-mq --sub=tcp://127.0.0.1:8002 --pub=tcp://127.0.0.1:8001\r\n\r\nRun sockjs-tornado server\r\n\r\n::\r\n\r\n   pushnote-server --port=8080 --mq_socket=tcp://127.0.0.1:8001 --route=/sockjs --address=''\r\n\r\n\r\nAlternatively, if you don't need multiple tornado instances support, you can entirely omit pushnote-mq and should pass -S/--single argument to pushnote-server\r\n\r\n::\r\n\r\n   pushnote-server --single --port=8080 --mq_socket=tcp://127.0.0.1:8002 --route=/sockjs --address=''\r\n\r\nAppend sockjs client library to your page\r\n\r\n::\r\n\r\n   <head>\r\n       <script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\">\r\n       ...\r\n\r\nOpen page in browser and connect to sockjs-tornado server\r\n\r\n::\r\n\r\n   conn = new SockJS('http://localhost:8080/sockjs')\r\n\r\nDefine a callback for incoming messages\r\n\r\n::\r\n\r\n   conn.onmessage = function (e){ console.log(e.data); };\r\n\r\nSend a message from django\r\n\r\n::\r\n\r\n   from pushnote.pub import notify_all\r\n   notify_all({'msg': u'Hi all!'})\r\n\r\nand you will see it in js console\r\n\r\n::\r\n\r\n       Object {msg: \"Hi all!\"}\r\n\r\nAdvanced notifications:\r\n-----------------------\r\n\r\nYou can send notifications to subset of users.\r\n\r\n::\r\n\r\n    from pushnote.pub import notify\r\n    from pushnote.utils import tokenize\r\n    from django.contrib.auth.models import User\r\n    user = User.objects.get(email='pushnote@mail.com')\r\n    notify({'msg': u'Hi, %s!' % user.username}, users=[user])\r\n    token = tokenize(user)\r\n    notify({'msg': u'Hi user with token %s !' % token}, users=[user])\r\n\r\nTo get this messages you need to subscribe by token\r\n\r\n::\r\n\r\n    var token = {% pushnote_token %};\r\n    SockJS.prototype.emit = function (name, data) { // wrapper around SockJS.send for pushnote's protocol support\r\n        var meta_dict = {\r\n            name:name,\r\n            data:data\r\n        };\r\n        this.send(JSON.stringify(meta_dict))\r\n    };\r\n    conn = new SockJS('http://localhost:8080/sockjs')\r\n    conn.emit('subscribe', {'token': token});\r\n    conn.onmessage = function (e){ console.log(e.data); };\r\n\r\n``{% pushnote_token %}`` is nothing more than a wrapper around\r\n``pushnote.utils.tokenize`` that returns user.id signed with\r\nstandart django singing mechanism. You can configure you own salt by setting\r\n``PUSHNOTE_SALT`` in ``settings.py``. If you need more security,\r\nyou can provide your own tokenization function. It should accept django User\r\n object and return token. Add path to this function in settings.py .\r\n\r\n::\r\n\r\n    PUSHNOTE_TOKENIZER = 'pushnote.utils.tokenize'\r\n\r\nConclusions:\r\n------------\r\n\r\n1. pushnote serializes datetime objects with ISO 8601 format. You can parse it on client with `moment.js`_ .\r\n2. pushnote server can handle client's messages constructed only in some specific way and can't be used for client to client communications.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "django,zeromq,tornado,sockjs,push-notifications,pushnote,notifications,notify,notifier", "license": "MIT", "maintainer": "Dadaso Zanzane", "maintainer_email": "dada.z888@gmail.com", "name": "pushnote", "package_url": "https://pypi.org/project/pushnote/", "platform": "", "project_url": "https://pypi.org/project/pushnote/", "project_urls": null, "release_url": "https://pypi.org/project/pushnote/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "A simple django plugin for sending push notifications from django server to sockjs clients", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            pushnote\n<br>========\n<br>\n<br>`pushnote`_ is a simple django plugin for sending push messages from\n<br>django server to sockjs clients. It internally uses `zeromq`_ and\n<br>`sockjs-tornado`_. pushnote can send push notifications to all sockjs\n<br>clients and to subset of this clients.\n<br>\n<br>Requirements:\n<br>-------------\n<br>\n<br>1. `pyzmq`_&gt;=2.0\n<br>2. `sockjs-tornado`_&gt;=0.0.5\n<br>3. `django`_&gt;=1.4\n<br>\n<br>Installation:\n<br>-------------\n<br>\n<br>Install ``pushnote`` with your favorite Python package manager:\n<br>\n<br>::\n<br>\n<br>   pip install pushnote\n<br>\n<br>Add ``pushnote`` to your ``INSTALLED_APPS`` in ``settings.py``\n<br>\n<br>::\n<br>\n<br>   INSTALLED_APPS = (\n<br>       'django.contrib.auth',\n<br>       'pushnote',\n<br>       ...\n<br>   )\n<br>\n<br>Define ``PUSHNOTE_MQ_SOCKET`` in ``settings.py``\n<br>\n<br>::\n<br>\n<br>   PUSHNOTE_MQ_SOCKET = 'tcp://127.0.0.1:8002'\n<br>\n<br>Usage:\n<br>------\n<br>\n<br>Run pushnote forwarder device\n<br>\n<br>::\n<br>\n<br>   pushnote-mq --sub=tcp://127.0.0.1:8002 --pub=tcp://127.0.0.1:8001\n<br>\n<br>Run sockjs-tornado server\n<br>\n<br>::\n<br>\n<br>   pushnote-server --port=8080 --mq_socket=tcp://127.0.0.1:8001 --route=/sockjs --address=''\n<br>\n<br>\n<br>Alternatively, if you don't need multiple tornado instances support, you can entirely omit pushnote-mq and should pass -S/--single argument to pushnote-server\n<br>\n<br>::\n<br>\n<br>   pushnote-server --single --port=8080 --mq_socket=tcp://127.0.0.1:8002 --route=/sockjs --address=''\n<br>\n<br>Append sockjs client library to your page\n<br>\n<br>::\n<br>\n<br>   &lt;head&gt;\n<br>       &lt;script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\"&gt;\n<br>       ...\n<br>\n<br>Open page in browser and connect to sockjs-tornado server\n<br>\n<br>::\n<br>\n<br>   conn = new SockJS('http://localhost:8080/sockjs')\n<br>\n<br>Define a callback for incoming messages\n<br>\n<br>::\n<br>\n<br>   conn.onmessage = function (e){ console.log(e.data); };\n<br>\n<br>Send a message from django\n<br>\n<br>::\n<br>\n<br>   from pushnote.pub import notify_all\n<br>   notify_all({'msg': u'Hi all!'})\n<br>\n<br>and you will see it in js console\n<br>\n<br>::\n<br>\n<br>       Object {msg: \"Hi all!\"}\n<br>\n<br>Advanced notifications:\n<br>-----------------------\n<br>\n<br>You can send notifications to subset of users.\n<br>\n<br>::\n<br>\n<br>    from pushnote.pub import notify\n<br>    from pushnote.utils import tokenize\n<br>    from django.contrib.auth.models import User\n<br>    user = User.objects.get(email='pushnote@mail.com')\n<br>    notify({'msg': u'Hi, %s!' % user.username}, users=[user])\n<br>    token = tokenize(user)\n<br>    notify({'msg': u'Hi user with token %s !' % token}, users=[user])\n<br>\n<br>To get this messages you need to subscribe by token\n<br>\n<br>::\n<br>\n<br>    var token = {% pushnote_token %};\n<br>    SockJS.prototype.emit = function (name, data) { // wrapper around SockJS.send for pushnote's protocol support\n<br>        var meta_dict = {\n<br>            name:name,\n<br>            data:data\n<br>        };\n<br>        this.send(JSON.stringify(meta_dict))\n<br>    };\n<br>    conn = new SockJS('http://localhost:8080/sockjs')\n<br>    conn.emit('subscribe', {'token': token});\n<br>    conn.onmessage = function (e){ console.log(e.data); };\n<br>\n<br>``{% pushnote_token %}`` is nothing more than a wrapper around\n<br>``pushnote.utils.tokenize`` that returns user.id signed with\n<br>standart django singing mechanism. You can configure you own salt by setting\n<br>``PUSHNOTE_SALT`` in ``settings.py``. If you need more security,\n<br>you can provide your own tokenization function. It should accept django User\n<br> object and return token. Add path to this function in settings.py .\n<br>\n<br>::\n<br>\n<br>    PUSHNOTE_TOKENIZER = 'pushnote.utils.tokenize'\n<br>\n<br>Conclusions:\n<br>------------\n<br>\n<br>1. pushnote serializes datetime objects with ISO 8601 format. You can parse it on client with `moment.js`_ .\n<br>2. pushnote server can handle client's messages constructed only in some specific way and can't be used for client to client communications.\n          </div>"}, "last_serial": 2049221, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "e8a7545e3487ac56ac365d56c1feb969", "sha256": "81d3edb6e8bc0f44322f9088b26d6e16d11f64dd10b432d10c2fc8034eda897f"}, "downloads": -1, "filename": "pushnote-0.0.2.0.tar.gz", "has_sig": false, "md5_digest": "e8a7545e3487ac56ac365d56c1feb969", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27135, "upload_time": "2016-03-30T07:34:54", "upload_time_iso_8601": "2016-03-30T07:34:54.108966Z", "url": "https://files.pythonhosted.org/packages/a1/c4/24ffb57872101b402c87fa312d980de7b360202a6cda4e5d68b007bc8ea5/pushnote-0.0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e8a7545e3487ac56ac365d56c1feb969", "sha256": "81d3edb6e8bc0f44322f9088b26d6e16d11f64dd10b432d10c2fc8034eda897f"}, "downloads": -1, "filename": "pushnote-0.0.2.0.tar.gz", "has_sig": false, "md5_digest": "e8a7545e3487ac56ac365d56c1feb969", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27135, "upload_time": "2016-03-30T07:34:54", "upload_time_iso_8601": "2016-03-30T07:34:54.108966Z", "url": "https://files.pythonhosted.org/packages/a1/c4/24ffb57872101b402c87fa312d980de7b360202a6cda4e5d68b007bc8ea5/pushnote-0.0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:09 2020"}