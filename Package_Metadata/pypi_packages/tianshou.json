{"info": {"author": "TSAIL", "author_email": "trinkle23897@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "<div align=\"center\">\n  <a href=\"http://tianshou.readthedocs.io\"><img width=\"300px\" height=\"auto\" src=\"docs/_static/images/tianshou-logo.png\"></a>\n</div>\n\n---\n\n[![PyPI](https://img.shields.io/pypi/v/tianshou)](https://pypi.org/project/tianshou/)\n[![Unittest](https://github.com/thu-ml/tianshou/workflows/Unittest/badge.svg?branch=master)](https://github.com/thu-ml/tianshou/actions)\n[![codecov](https://img.shields.io/codecov/c/gh/thu-ml/tianshou)](https://codecov.io/gh/thu-ml/tianshou)\n[![Documentation Status](https://readthedocs.org/projects/tianshou/badge/?version=latest)](https://tianshou.readthedocs.io)\n[![GitHub issues](https://img.shields.io/github/issues/thu-ml/tianshou)](https://github.com/thu-ml/tianshou/issues)\n[![GitHub stars](https://img.shields.io/github/stars/thu-ml/tianshou)](https://github.com/thu-ml/tianshou/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/thu-ml/tianshou)](https://github.com/thu-ml/tianshou/network)\n[![GitHub license](https://img.shields.io/github/license/thu-ml/tianshou)](https://github.com/thu-ml/tianshou/blob/master/LICENSE)\n[![Join the chat at https://gitter.im/thu-ml/tianshou](https://badges.gitter.im/thu-ml/tianshou.svg)](https://gitter.im/thu-ml/tianshou?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n**Tianshou** ([\u5929\u6388](https://baike.baidu.com/item/%E5%A4%A9%E6%8E%88)) is a reinforcement learning platform based on pure PyTorch. Unlike existing reinforcement learning libraries, which are mainly based on TensorFlow, have many nested classes, unfriendly API, or slow-speed, Tianshou provides a fast-speed framework and pythonic API for building the deep reinforcement learning agent with the least number of lines of code. The supported interface algorithms currently include:\n\n\n- [Policy Gradient (PG)](https://papers.nips.cc/paper/1713-policy-gradient-methods-for-reinforcement-learning-with-function-approximation.pdf)\n- [Deep Q-Network (DQN)](https://storage.googleapis.com/deepmind-media/dqn/DQNNaturePaper.pdf)\n- [Double DQN (DDQN)](https://arxiv.org/pdf/1509.06461.pdf) with n-step returns\n- [Prioritized DQN (PDQN)](https://arxiv.org/pdf/1511.05952.pdf)\n- [Advantage Actor-Critic (A2C)](https://openai.com/blog/baselines-acktr-a2c/)\n- [Deep Deterministic Policy Gradient (DDPG)](https://arxiv.org/pdf/1509.02971.pdf)\n- [Proximal Policy Optimization (PPO)](https://arxiv.org/pdf/1707.06347.pdf)\n- [Twin Delayed DDPG (TD3)](https://arxiv.org/pdf/1802.09477.pdf)\n- [Soft Actor-Critic (SAC)](https://arxiv.org/pdf/1812.05905.pdf)\n- Vanilla Imitation Learning\n- [Generalized Advantage Estimation (GAE)](https://arxiv.org/pdf/1506.02438.pdf)\n\nTianshou supports parallel workers for all algorithms as well. All of these algorithms are reformatted as replay-buffer based algorithms. Our team is working on supporting more algorithms and more scenarios on Tianshou in this period of development.\n\nIn Chinese, Tianshou means the innate talent, not taught by others. Tianshou is a reinforcement learning platform. As we know, an RL agent does not learn from humans, so taking \"Tianshou\" means that there is no teacher to study with, but to learn by interacting with an environment.\n\n\u201c\u5929\u6388\u201d\u610f\u6307\u4e0a\u5929\u6240\u6388\uff0c\u5f15\u7533\u4e3a\u4e0e\u751f\u5177\u6709\u7684\u5929\u8d4b\u3002\u5929\u6388\u662f\u5f3a\u5316\u5b66\u4e60\u5e73\u53f0\uff0c\u800c\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u5e76\u4e0d\u662f\u5411\u4eba\u7c7b\u5b66\u4e60\u7684\uff0c\u6240\u4ee5\u53d6\u201c\u5929\u6388\u201d\u610f\u601d\u662f\u6ca1\u6709\u8001\u5e08\u6765\u6559\uff0c\u800c\u662f\u81ea\u5df1\u901a\u8fc7\u8ddf\u73af\u5883\u4e0d\u65ad\u4ea4\u4e92\u6765\u8fdb\u884c\u5b66\u4e60\u3002\n\n## Installation\n\nTianshou is currently hosted on [PyPI](https://pypi.org/project/tianshou/). It requires Python >= 3.6. You can simply install Tianshou with the following command:\n\n```bash\npip3 install tianshou -U\n```\n\nYou can also install with the newest version through GitHub:\n\n```bash\npip3 install git+https://github.com/thu-ml/tianshou.git@master\n```\n\nAfter installation, open your python console and type\n\n```python\nimport tianshou as ts\nprint(ts.__version__)\n```\n\nIf no error occurs, you have successfully installed Tianshou.\n\n## Documentation\n\nThe tutorials and API documentation are hosted on [tianshou.readthedocs.io](https://tianshou.readthedocs.io/).\n\nThe example scripts are under [test/](https://github.com/thu-ml/tianshou/blob/master/test) folder and [examples/](https://github.com/thu-ml/tianshou/blob/master/examples) folder. It may fail to run with PyPI installation, so please re-install the github version through `pip3 install git+https://github.com/thu-ml/tianshou.git@master`.\n\n<!-- \u8fd9\u91cc\u6709\u4e00\u4efd\u5929\u6388\u5e73\u53f0\u7b80\u77ed\u7684\u4e2d\u6587\u7b80\u4ecb\uff1ahttps://www.zhihu.com/question/377263715 -->\n\n## Why Tianshou?\n\n### Fast-speed\n\nTianshou is a lightweight but high-speed reinforcement learning platform. For example, here is a test on a laptop (i7-8750H + GTX1060). It only uses 3 seconds for training an agent based on vanilla policy gradient on the CartPole-v0 task: (seed may be different across different platform and device)\n\n```bash\npython3 test/discrete/test_pg.py --seed 0 --render 0.03\n```\n\n<div align=\"center\">\n  <img src=\"docs/_static/images/testpg.gif\"></a>\n</div>\n\nWe select some of famous reinforcement learning platforms: 2 GitHub repos with most stars in all RL platforms (OpenAI Baseline and RLlib) and 2 GitHub repos with most stars in PyTorch RL platforms (PyTorch DRL and rlpyt). Here is the benchmark result for other algorithms and platforms on toy scenarios: (tested on the same laptop as mentioned above)\n\n| RL Platform     | [Tianshou](https://github.com/thu-ml/tianshou)               | [Baselines](https://github.com/openai/baselines)             | [Ray/RLlib](https://github.com/ray-project/ray/tree/master/rllib/) | [PyTorch DRL](https://github.com/p-christ/Deep-Reinforcement-Learning-Algorithms-with-PyTorch) | [rlpyt](https://github.com/astooke/rlpyt)                    |\n| --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| GitHub Stars    | [![GitHub stars](https://img.shields.io/github/stars/thu-ml/tianshou)](https://github.com/thu-ml/tianshou/stargazers) | [![GitHub stars](https://img.shields.io/github/stars/openai/baselines)](https://github.com/openai/baselines/stargazers) | [![GitHub stars](https://img.shields.io/github/stars/ray-project/ray)](https://github.com/ray-project/ray/stargazers) | [![GitHub stars](https://img.shields.io/github/stars/p-christ/Deep-Reinforcement-Learning-Algorithms-with-PyTorch)](https://github.com/p-christ/Deep-Reinforcement-Learning-Algorithms-with-PyTorch/stargazers) | [![GitHub stars](https://img.shields.io/github/stars/astooke/rlpyt)](https://github.com/astooke/rlpyt/stargazers) |\n| Algo - Task     | PyTorch                                                      | TensorFlow                                                   | TF/PyTorch                                                   | PyTorch                                                      | PyTorch                                                      |\n| PG - CartPole   | 9.03\u00b14.18s                                                   | None                                                         | 15.77\u00b16.28s                                                  | None                                                         | ?                                                            |\n| DQN - CartPole  | 10.61\u00b15.51s                                                  | 1046.34\u00b1291.27s                                              | 40.16\u00b112.79s                                                 | 175.55\u00b153.81s                                                | ?                                                            |\n| A2C - CartPole  | 11.72\u00b13.85s                                                  | *(~1612s)                                                    | 46.15\u00b16.64s                                                  | Runtime Error                                                | ?                                                            |\n| PPO - CartPole  | 32.55\u00b110.09s                                                 | *(~1179s)                                                    | 62.21\u00b113.31s (APPO)                                          | 29.16\u00b115.46s                                                 | ?                                                            |\n| DDPG - Pendulum | 46.95\u00b124.31s                                                 | *(>1h)                                                       | 377.99\u00b113.79s                                                | 652.83\u00b1471.28s                                               | 172.18\u00b162.48s                                                |\n| TD3 - Pendulum  | 48.39\u00b17.22s                                                  | None                                                         | 620.83\u00b1248.43s                                               | 619.33\u00b1324.97s                                               | 210.31\u00b176.30s                                                |\n| SAC - Pendulum  | 38.92\u00b12.09s                                                  | None                                                         | 92.68\u00b14.48s                                                  | 808.21\u00b1405.70s                                               | 295.92\u00b1140.85s                                               |\n\n*\\*: Could not reach the target reward threshold in 1e6 steps in any of 10 runs. The total runtime is in the brackets.*\n\n*?: We have tried but it is nontrivial for running non-Atari game on rlpyt. See [here](https://github.com/astooke/rlpyt/issues/135).*\n\nAll of the platforms use 10 different seeds for testing. We erase those trials which failed for training. The reward threshold is 195.0 in CartPole and -250.0 in Pendulum over consecutive 100 episodes' mean returns. \n\nTianshou and RLlib's configures are very similar. They both use multiple workers for sampling. Indeed, both RLlib and rlpyt are excellent reinforcement learning platform.\n\nWe will add results of Atari Pong / Mujoco these days.\n\n### Reproducible\n\nTianshou has its unit tests. Different from other platforms, **the unit tests include the full agent training procedure for all of the implemented algorithms**. It would be failed once if it could not train an agent to perform well enough on limited epochs on toy scenarios. The unit tests secure the reproducibility of our platform. \n\nCheck out the [GitHub Actions](https://github.com/thu-ml/tianshou/actions) page for more detail.\n\n### Modularized Policy\n\nWe decouple all of the algorithms into 4 parts:\n\n- `__init__`: initialize the policy;\n- `forward`: to compute actions over given observations;\n- `process_fn`: to preprocess data from replay buffer (since we have reformulated all algorithms to replay-buffer based algorithms);\n- `learn`: to learn from a given batch data.\n\nWithin these API, we can interact with different policies conveniently.\n\n### Elegant and Flexible\n\nCurrently, the overall code of Tianshou platform is less than 1500 lines without environment wrappers for Atari and Mujoco. Most of the implemented algorithms are less than 100 lines of python code. It is quite easy to go through the framework and understand how it works. We provide many flexible API as you wish, for instance, if you want to use your policy to interact with the environment with (at least) `n` steps:\n\n```python\nresult = collector.collect(n_step=n)\n```\n\nIf you have 3 environments in total and want to collect 1 episode in the first environment, 3 for the third environment:\n\n```python\nresult = collector.collect(n_episode=[1, 0, 3])\n```\n\nIf you want to train the given policy with a sampled batch:\n\n```python\nresult = policy.learn(collector.sample(batch_size))\n```\n\nYou can check out the [documentation](https://tianshou.readthedocs.io) for further usage.\n\n## Quick Start\n\nThis is an example of Deep Q Network. You can also run the full script at [test/discrete/test_dqn.py](https://github.com/thu-ml/tianshou/blob/master/test/discrete/test_dqn.py).\n\nFirst, import some relevant packages:\n\n```python\nimport gym, torch, numpy as np, torch.nn as nn\nfrom torch.utils.tensorboard import SummaryWriter\nimport tianshou as ts\n```\n\nDefine some hyper-parameters:\n\n```python\ntask = 'CartPole-v0'\nlr = 1e-3\ngamma = 0.9\nn_step = 3\neps_train, eps_test = 0.1, 0.05\nepoch = 10\nstep_per_epoch = 1000\ncollect_per_step = 10\ntarget_freq = 320\nbatch_size = 64\ntrain_num, test_num = 8, 100\nbuffer_size = 20000\nwriter = SummaryWriter('log/dqn')  # tensorboard is also supported!\n```\n\nMake environments:\n\n```python\n# you can also try with SubprocVectorEnv\ntrain_envs = ts.env.VectorEnv([lambda: gym.make(task) for _ in range(train_num)])\ntest_envs = ts.env.VectorEnv([lambda: gym.make(task) for _ in range(test_num)])\n```\n\nDefine the network:\n\n```python\nclass Net(nn.Module):\n    def __init__(self, state_shape, action_shape):\n        super().__init__()\n        self.model = nn.Sequential(*[\n            nn.Linear(np.prod(state_shape), 128), nn.ReLU(inplace=True),\n            nn.Linear(128, 128), nn.ReLU(inplace=True),\n            nn.Linear(128, 128), nn.ReLU(inplace=True),\n            nn.Linear(128, np.prod(action_shape))\n        ])\n    def forward(self, s, state=None, info={}):\n        if not isinstance(s, torch.Tensor):\n            s = torch.tensor(s, dtype=torch.float)\n        batch = s.shape[0]\n        logits = self.model(s.view(batch, -1))\n        return logits, state\n\nenv = gym.make(task)\nstate_shape = env.observation_space.shape or env.observation_space.n\naction_shape = env.action_space.shape or env.action_space.n\nnet = Net(state_shape, action_shape)\noptim = torch.optim.Adam(net.parameters(), lr=lr)\n```\n\nSetup policy and collectors:\n\n```python\npolicy = ts.policy.DQNPolicy(net, optim, gamma, n_step,\n    use_target_network=True, target_update_freq=target_freq)\ntrain_collector = ts.data.Collector(policy, train_envs, ts.data.ReplayBuffer(buffer_size))\ntest_collector = ts.data.Collector(policy, test_envs)\n```\n\nLet's train it:\n\n```python\nresult = ts.trainer.offpolicy_trainer(\n    policy, train_collector, test_collector, epoch, step_per_epoch, collect_per_step,\n    test_num, batch_size, train_fn=lambda e: policy.set_eps(eps_train),\n    test_fn=lambda e: policy.set_eps(eps_test),\n    stop_fn=lambda x: x >= env.spec.reward_threshold, writer=writer, task=task)\nprint(f'Finished training! Use {result[\"duration\"]}')\n```\n\nSave / load the trained policy (it's exactly the same as PyTorch nn.module):\n\n```python\ntorch.save(policy.state_dict(), 'dqn.pth')\npolicy.load_state_dict(torch.load('dqn.pth'))\n```\n\nWatch the performance with 35 FPS:\n\n```python\ncollector = ts.data.Collector(policy, env)\ncollector.collect(n_episode=1, render=1 / 35)\ncollector.close()\n```\n\nLook at the result saved in tensorboard: (on bash script)\n\n```bash\ntensorboard --logdir log/dqn\n```\n\nYou can check out the [documentation](https://tianshou.readthedocs.io) for advanced usage.\n\n## Contributing\n\nTianshou is still under development. More algorithms and features are going to be added and we always welcome contributions to help make Tianshou better. If you would like to contribute, please check out [docs/contributing.rst](https://github.com/thu-ml/tianshou/blob/master/docs/contributing.rst).\n\n## TODO\n\nCheck out the [Issue/PR Categories](https://github.com/thu-ml/tianshou/projects/2) and [Support Status](https://github.com/thu-ml/tianshou/projects/3) page for more detail.\n\n## Citing Tianshou\n\nIf you find Tianshou useful, please cite it in your publications.\n\n```latex\n@misc{tianshou,\n  author = {Jiayi Weng, Minghao Zhang, Dong Yan, Hang Su, Jun Zhu},\n  title = {Tianshou},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/thu-ml/tianshou}},\n}\n```\n\n## Acknowledgment\n\nTianshou was previously a reinforcement learning platform based on TensorFlow. You can check out the branch [`priv`](https://github.com/thu-ml/tianshou/tree/priv) for more detail. Many thanks to [Haosheng Zou](https://github.com/HaoshengZou)'s pioneering work for Tianshou before version 0.1.1.\n\nWe would like to thank [TSAIL](http://ml.cs.tsinghua.edu.cn/) and [Institute for Artificial Intelligence, Tsinghua University](http://ai.tsinghua.edu.cn/) for providing such an excellent AI research platform.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thu-ml/tianshou", "keywords": "reinforcement learning platform pytorch", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tianshou", "package_url": "https://pypi.org/project/tianshou/", "platform": "", "project_url": "https://pypi.org/project/tianshou/", "project_urls": {"Homepage": "https://github.com/thu-ml/tianshou"}, "release_url": "https://pypi.org/project/tianshou/0.2.2/", "requires_dist": ["gym (>=0.15.0)", "tqdm", "numpy", "cloudpickle", "tensorboard", "torch (>=1.4.0)", "atari-py ; extra == 'atari'", "cv2 ; extra == 'atari'", "Sphinx ; extra == 'dev'", "sphinx-rtd-theme ; extra == 'dev'", "sphinxcontrib-bibtex ; extra == 'dev'", "flake8 ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "mujoco-py ; extra == 'mujoco'", "pybullet ; extra == 'pybullet'"], "requires_python": ">=3.6", "summary": "A Library for Deep Reinforcement Learning", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n  <a href=\"http://tianshou.readthedocs.io\" rel=\"nofollow\"><img height=\"auto\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d85b890582f6421dbb24741acfc876c7235f3f2/646f63732f5f7374617469632f696d616765732f7469616e73686f752d6c6f676f2e706e67\" width=\"300px\"></a>\n</div>\n<hr>\n<p><a href=\"https://pypi.org/project/tianshou/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e029e0a250c6030e9120366930f6d1ab385bf85/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7469616e73686f75\"></a>\n<a href=\"https://github.com/thu-ml/tianshou/actions\" rel=\"nofollow\"><img alt=\"Unittest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54c06598a91d32bcae7c006dd6d9da5a9c266033/68747470733a2f2f6769746875622e636f6d2f7468752d6d6c2f7469616e73686f752f776f726b666c6f77732f556e6974746573742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/thu-ml/tianshou\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c58fa81bc0be3f5f39ce01b02501ce54cf71aff/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f7468752d6d6c2f7469616e73686f75\"></a>\n<a href=\"https://tianshou.readthedocs.io\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8635eb6a74af587947ab5cacefb7372fedf74d86/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7469616e73686f752f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/thu-ml/tianshou/issues\" rel=\"nofollow\"><img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e60a22a969afbf5875f69a4bdc12a50021d79366/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7468752d6d6c2f7469616e73686f75\"></a>\n<a href=\"https://github.com/thu-ml/tianshou/stargazers\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a571a2da87588f39b9b4361e34a4a935b15b1164/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f7468752d6d6c2f7469616e73686f75\"></a>\n<a href=\"https://github.com/thu-ml/tianshou/network\" rel=\"nofollow\"><img alt=\"GitHub forks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e83b7350d9ae24f8f15af733786fd8be7377cf9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f7468752d6d6c2f7469616e73686f75\"></a>\n<a href=\"https://github.com/thu-ml/tianshou/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae796b2aa22f1200ce09f101459f516ffe698f10/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7468752d6d6c2f7469616e73686f75\"></a>\n<a href=\"https://gitter.im/thu-ml/tianshou?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/thu-ml/tianshou\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1133572b273c770959d1f4e08bf195cd8e495a7c/68747470733a2f2f6261646765732e6769747465722e696d2f7468752d6d6c2f7469616e73686f752e737667\"></a></p>\n<p><strong>Tianshou</strong> (<a href=\"https://baike.baidu.com/item/%E5%A4%A9%E6%8E%88\" rel=\"nofollow\">\u5929\u6388</a>) is a reinforcement learning platform based on pure PyTorch. Unlike existing reinforcement learning libraries, which are mainly based on TensorFlow, have many nested classes, unfriendly API, or slow-speed, Tianshou provides a fast-speed framework and pythonic API for building the deep reinforcement learning agent with the least number of lines of code. The supported interface algorithms currently include:</p>\n<ul>\n<li><a href=\"https://papers.nips.cc/paper/1713-policy-gradient-methods-for-reinforcement-learning-with-function-approximation.pdf\" rel=\"nofollow\">Policy Gradient (PG)</a></li>\n<li><a href=\"https://storage.googleapis.com/deepmind-media/dqn/DQNNaturePaper.pdf\" rel=\"nofollow\">Deep Q-Network (DQN)</a></li>\n<li><a href=\"https://arxiv.org/pdf/1509.06461.pdf\" rel=\"nofollow\">Double DQN (DDQN)</a> with n-step returns</li>\n<li><a href=\"https://arxiv.org/pdf/1511.05952.pdf\" rel=\"nofollow\">Prioritized DQN (PDQN)</a></li>\n<li><a href=\"https://openai.com/blog/baselines-acktr-a2c/\" rel=\"nofollow\">Advantage Actor-Critic (A2C)</a></li>\n<li><a href=\"https://arxiv.org/pdf/1509.02971.pdf\" rel=\"nofollow\">Deep Deterministic Policy Gradient (DDPG)</a></li>\n<li><a href=\"https://arxiv.org/pdf/1707.06347.pdf\" rel=\"nofollow\">Proximal Policy Optimization (PPO)</a></li>\n<li><a href=\"https://arxiv.org/pdf/1802.09477.pdf\" rel=\"nofollow\">Twin Delayed DDPG (TD3)</a></li>\n<li><a href=\"https://arxiv.org/pdf/1812.05905.pdf\" rel=\"nofollow\">Soft Actor-Critic (SAC)</a></li>\n<li>Vanilla Imitation Learning</li>\n<li><a href=\"https://arxiv.org/pdf/1506.02438.pdf\" rel=\"nofollow\">Generalized Advantage Estimation (GAE)</a></li>\n</ul>\n<p>Tianshou supports parallel workers for all algorithms as well. All of these algorithms are reformatted as replay-buffer based algorithms. Our team is working on supporting more algorithms and more scenarios on Tianshou in this period of development.</p>\n<p>In Chinese, Tianshou means the innate talent, not taught by others. Tianshou is a reinforcement learning platform. As we know, an RL agent does not learn from humans, so taking \"Tianshou\" means that there is no teacher to study with, but to learn by interacting with an environment.</p>\n<p>\u201c\u5929\u6388\u201d\u610f\u6307\u4e0a\u5929\u6240\u6388\uff0c\u5f15\u7533\u4e3a\u4e0e\u751f\u5177\u6709\u7684\u5929\u8d4b\u3002\u5929\u6388\u662f\u5f3a\u5316\u5b66\u4e60\u5e73\u53f0\uff0c\u800c\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u5e76\u4e0d\u662f\u5411\u4eba\u7c7b\u5b66\u4e60\u7684\uff0c\u6240\u4ee5\u53d6\u201c\u5929\u6388\u201d\u610f\u601d\u662f\u6ca1\u6709\u8001\u5e08\u6765\u6559\uff0c\u800c\u662f\u81ea\u5df1\u901a\u8fc7\u8ddf\u73af\u5883\u4e0d\u65ad\u4ea4\u4e92\u6765\u8fdb\u884c\u5b66\u4e60\u3002</p>\n<h2>Installation</h2>\n<p>Tianshou is currently hosted on <a href=\"https://pypi.org/project/tianshou/\" rel=\"nofollow\">PyPI</a>. It requires Python &gt;= 3.6. You can simply install Tianshou with the following command:</p>\n<pre>pip3 install tianshou -U\n</pre>\n<p>You can also install with the newest version through GitHub:</p>\n<pre>pip3 install git+https://github.com/thu-ml/tianshou.git@master\n</pre>\n<p>After installation, open your python console and type</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tianshou</span> <span class=\"k\">as</span> <span class=\"nn\">ts</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">__version__</span><span class=\"p\">)</span>\n</pre>\n<p>If no error occurs, you have successfully installed Tianshou.</p>\n<h2>Documentation</h2>\n<p>The tutorials and API documentation are hosted on <a href=\"https://tianshou.readthedocs.io/\" rel=\"nofollow\">tianshou.readthedocs.io</a>.</p>\n<p>The example scripts are under <a href=\"https://github.com/thu-ml/tianshou/blob/master/test\" rel=\"nofollow\">test/</a> folder and <a href=\"https://github.com/thu-ml/tianshou/blob/master/examples\" rel=\"nofollow\">examples/</a> folder. It may fail to run with PyPI installation, so please re-install the github version through <code>pip3 install git+https://github.com/thu-ml/tianshou.git@master</code>.</p>\n\n<h2>Why Tianshou?</h2>\n<h3>Fast-speed</h3>\n<p>Tianshou is a lightweight but high-speed reinforcement learning platform. For example, here is a test on a laptop (i7-8750H + GTX1060). It only uses 3 seconds for training an agent based on vanilla policy gradient on the CartPole-v0 task: (seed may be different across different platform and device)</p>\n<pre>python3 test/discrete/test_pg.py --seed <span class=\"m\">0</span> --render <span class=\"m\">0</span>.03\n</pre>\n<div>\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6c4d8da6a78aef67b9d3dfcfa554dd6b26b3590/646f63732f5f7374617469632f696d616765732f7465737470672e676966\">\n</div>\n<p>We select some of famous reinforcement learning platforms: 2 GitHub repos with most stars in all RL platforms (OpenAI Baseline and RLlib) and 2 GitHub repos with most stars in PyTorch RL platforms (PyTorch DRL and rlpyt). Here is the benchmark result for other algorithms and platforms on toy scenarios: (tested on the same laptop as mentioned above)</p>\n<table>\n<thead>\n<tr>\n<th>RL Platform</th>\n<th><a href=\"https://github.com/thu-ml/tianshou\" rel=\"nofollow\">Tianshou</a></th>\n<th><a href=\"https://github.com/openai/baselines\" rel=\"nofollow\">Baselines</a></th>\n<th><a href=\"https://github.com/ray-project/ray/tree/master/rllib/\" rel=\"nofollow\">Ray/RLlib</a></th>\n<th><a href=\"https://github.com/p-christ/Deep-Reinforcement-Learning-Algorithms-with-PyTorch\" rel=\"nofollow\">PyTorch DRL</a></th>\n<th><a href=\"https://github.com/astooke/rlpyt\" rel=\"nofollow\">rlpyt</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GitHub Stars</td>\n<td><a href=\"https://github.com/thu-ml/tianshou/stargazers\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a571a2da87588f39b9b4361e34a4a935b15b1164/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f7468752d6d6c2f7469616e73686f75\"></a></td>\n<td><a href=\"https://github.com/openai/baselines/stargazers\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c7f00a6d5a559a16dcf99eb4c5555a674f13cc9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6f70656e61692f626173656c696e6573\"></a></td>\n<td><a href=\"https://github.com/ray-project/ray/stargazers\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95ee61aa3226f531967c7af041251f46615f4802/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f7261792d70726f6a6563742f726179\"></a></td>\n<td><a href=\"https://github.com/p-christ/Deep-Reinforcement-Learning-Algorithms-with-PyTorch/stargazers\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79a0034dbe198dd94a7cefe0fd600976ab04fa2c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f702d6368726973742f446565702d5265696e666f7263656d656e742d4c6561726e696e672d416c676f726974686d732d776974682d5079546f726368\"></a></td>\n<td><a href=\"https://github.com/astooke/rlpyt/stargazers\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22d3ca5ca2b4db7b5c03483bd8bbd9963c9946d7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6173746f6f6b652f726c707974\"></a></td>\n</tr>\n<tr>\n<td>Algo - Task</td>\n<td>PyTorch</td>\n<td>TensorFlow</td>\n<td>TF/PyTorch</td>\n<td>PyTorch</td>\n<td>PyTorch</td>\n</tr>\n<tr>\n<td>PG - CartPole</td>\n<td>9.03\u00b14.18s</td>\n<td>None</td>\n<td>15.77\u00b16.28s</td>\n<td>None</td>\n<td>?</td>\n</tr>\n<tr>\n<td>DQN - CartPole</td>\n<td>10.61\u00b15.51s</td>\n<td>1046.34\u00b1291.27s</td>\n<td>40.16\u00b112.79s</td>\n<td>175.55\u00b153.81s</td>\n<td>?</td>\n</tr>\n<tr>\n<td>A2C - CartPole</td>\n<td>11.72\u00b13.85s</td>\n<td>*(~1612s)</td>\n<td>46.15\u00b16.64s</td>\n<td>Runtime Error</td>\n<td>?</td>\n</tr>\n<tr>\n<td>PPO - CartPole</td>\n<td>32.55\u00b110.09s</td>\n<td>*(~1179s)</td>\n<td>62.21\u00b113.31s (APPO)</td>\n<td>29.16\u00b115.46s</td>\n<td>?</td>\n</tr>\n<tr>\n<td>DDPG - Pendulum</td>\n<td>46.95\u00b124.31s</td>\n<td>*(&gt;1h)</td>\n<td>377.99\u00b113.79s</td>\n<td>652.83\u00b1471.28s</td>\n<td>172.18\u00b162.48s</td>\n</tr>\n<tr>\n<td>TD3 - Pendulum</td>\n<td>48.39\u00b17.22s</td>\n<td>None</td>\n<td>620.83\u00b1248.43s</td>\n<td>619.33\u00b1324.97s</td>\n<td>210.31\u00b176.30s</td>\n</tr>\n<tr>\n<td>SAC - Pendulum</td>\n<td>38.92\u00b12.09s</td>\n<td>None</td>\n<td>92.68\u00b14.48s</td>\n<td>808.21\u00b1405.70s</td>\n<td>295.92\u00b1140.85s</td>\n</tr></tbody></table>\n<p><em>*: Could not reach the target reward threshold in 1e6 steps in any of 10 runs. The total runtime is in the brackets.</em></p>\n<p><em>?: We have tried but it is nontrivial for running non-Atari game on rlpyt. See <a href=\"https://github.com/astooke/rlpyt/issues/135\" rel=\"nofollow\">here</a>.</em></p>\n<p>All of the platforms use 10 different seeds for testing. We erase those trials which failed for training. The reward threshold is 195.0 in CartPole and -250.0 in Pendulum over consecutive 100 episodes' mean returns.</p>\n<p>Tianshou and RLlib's configures are very similar. They both use multiple workers for sampling. Indeed, both RLlib and rlpyt are excellent reinforcement learning platform.</p>\n<p>We will add results of Atari Pong / Mujoco these days.</p>\n<h3>Reproducible</h3>\n<p>Tianshou has its unit tests. Different from other platforms, <strong>the unit tests include the full agent training procedure for all of the implemented algorithms</strong>. It would be failed once if it could not train an agent to perform well enough on limited epochs on toy scenarios. The unit tests secure the reproducibility of our platform.</p>\n<p>Check out the <a href=\"https://github.com/thu-ml/tianshou/actions\" rel=\"nofollow\">GitHub Actions</a> page for more detail.</p>\n<h3>Modularized Policy</h3>\n<p>We decouple all of the algorithms into 4 parts:</p>\n<ul>\n<li><code>__init__</code>: initialize the policy;</li>\n<li><code>forward</code>: to compute actions over given observations;</li>\n<li><code>process_fn</code>: to preprocess data from replay buffer (since we have reformulated all algorithms to replay-buffer based algorithms);</li>\n<li><code>learn</code>: to learn from a given batch data.</li>\n</ul>\n<p>Within these API, we can interact with different policies conveniently.</p>\n<h3>Elegant and Flexible</h3>\n<p>Currently, the overall code of Tianshou platform is less than 1500 lines without environment wrappers for Atari and Mujoco. Most of the implemented algorithms are less than 100 lines of python code. It is quite easy to go through the framework and understand how it works. We provide many flexible API as you wish, for instance, if you want to use your policy to interact with the environment with (at least) <code>n</code> steps:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">collector</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">n_step</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</pre>\n<p>If you have 3 environments in total and want to collect 1 episode in the first environment, 3 for the third environment:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">collector</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">n_episode</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n</pre>\n<p>If you want to train the given policy with a sampled batch:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">learn</span><span class=\"p\">(</span><span class=\"n\">collector</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">))</span>\n</pre>\n<p>You can check out the <a href=\"https://tianshou.readthedocs.io\" rel=\"nofollow\">documentation</a> for further usage.</p>\n<h2>Quick Start</h2>\n<p>This is an example of Deep Q Network. You can also run the full script at <a href=\"https://github.com/thu-ml/tianshou/blob/master/test/discrete/test_dqn.py\" rel=\"nofollow\">test/discrete/test_dqn.py</a>.</p>\n<p>First, import some relevant packages:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gym</span><span class=\"o\">,</span> <span class=\"nn\">torch</span><span class=\"o\">,</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span><span class=\"o\">,</span> <span class=\"nn\">torch.nn</span> <span class=\"k\">as</span> <span class=\"nn\">nn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch.utils.tensorboard</span> <span class=\"kn\">import</span> <span class=\"n\">SummaryWriter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tianshou</span> <span class=\"k\">as</span> <span class=\"nn\">ts</span>\n</pre>\n<p>Define some hyper-parameters:</p>\n<pre><span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"s1\">'CartPole-v0'</span>\n<span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"mf\">1e-3</span>\n<span class=\"n\">gamma</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>\n<span class=\"n\">n_step</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">eps_train</span><span class=\"p\">,</span> <span class=\"n\">eps_test</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.05</span>\n<span class=\"n\">epoch</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">step_per_epoch</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">collect_per_step</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">target_freq</span> <span class=\"o\">=</span> <span class=\"mi\">320</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n<span class=\"n\">train_num</span><span class=\"p\">,</span> <span class=\"n\">test_num</span> <span class=\"o\">=</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">100</span>\n<span class=\"n\">buffer_size</span> <span class=\"o\">=</span> <span class=\"mi\">20000</span>\n<span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">SummaryWriter</span><span class=\"p\">(</span><span class=\"s1\">'log/dqn'</span><span class=\"p\">)</span>  <span class=\"c1\"># tensorboard is also supported!</span>\n</pre>\n<p>Make environments:</p>\n<pre><span class=\"c1\"># you can also try with SubprocVectorEnv</span>\n<span class=\"n\">train_envs</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">VectorEnv</span><span class=\"p\">([</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">train_num</span><span class=\"p\">)])</span>\n<span class=\"n\">test_envs</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">VectorEnv</span><span class=\"p\">([</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">test_num</span><span class=\"p\">)])</span>\n</pre>\n<p>Define the network:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Net</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state_shape</span><span class=\"p\">,</span> <span class=\"n\">action_shape</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span>\n            <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"p\">(</span><span class=\"n\">state_shape</span><span class=\"p\">),</span> <span class=\"mi\">128</span><span class=\"p\">),</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n            <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">),</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n            <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">),</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n            <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"p\">(</span><span class=\"n\">action_shape</span><span class=\"p\">))</span>\n        <span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">):</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">)</span>\n        <span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">logits</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">logits</span><span class=\"p\">,</span> <span class=\"n\">state</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n<span class=\"n\">state_shape</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">observation_space</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"ow\">or</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">observation_space</span><span class=\"o\">.</span><span class=\"n\">n</span>\n<span class=\"n\">action_shape</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">action_space</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"ow\">or</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">action_space</span><span class=\"o\">.</span><span class=\"n\">n</span>\n<span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">Net</span><span class=\"p\">(</span><span class=\"n\">state_shape</span><span class=\"p\">,</span> <span class=\"n\">action_shape</span><span class=\"p\">)</span>\n<span class=\"n\">optim</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"n\">lr</span><span class=\"p\">)</span>\n</pre>\n<p>Setup policy and collectors:</p>\n<pre><span class=\"n\">policy</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">DQNPolicy</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">optim</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">,</span> <span class=\"n\">n_step</span><span class=\"p\">,</span>\n    <span class=\"n\">use_target_network</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">target_update_freq</span><span class=\"o\">=</span><span class=\"n\">target_freq</span><span class=\"p\">)</span>\n<span class=\"n\">train_collector</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Collector</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"p\">,</span> <span class=\"n\">train_envs</span><span class=\"p\">,</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ReplayBuffer</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"p\">))</span>\n<span class=\"n\">test_collector</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Collector</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"p\">,</span> <span class=\"n\">test_envs</span><span class=\"p\">)</span>\n</pre>\n<p>Let's train it:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">trainer</span><span class=\"o\">.</span><span class=\"n\">offpolicy_trainer</span><span class=\"p\">(</span>\n    <span class=\"n\">policy</span><span class=\"p\">,</span> <span class=\"n\">train_collector</span><span class=\"p\">,</span> <span class=\"n\">test_collector</span><span class=\"p\">,</span> <span class=\"n\">epoch</span><span class=\"p\">,</span> <span class=\"n\">step_per_epoch</span><span class=\"p\">,</span> <span class=\"n\">collect_per_step</span><span class=\"p\">,</span>\n    <span class=\"n\">test_num</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">train_fn</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">set_eps</span><span class=\"p\">(</span><span class=\"n\">eps_train</span><span class=\"p\">),</span>\n    <span class=\"n\">test_fn</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">set_eps</span><span class=\"p\">(</span><span class=\"n\">eps_test</span><span class=\"p\">),</span>\n    <span class=\"n\">stop_fn</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">reward_threshold</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"o\">=</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"o\">=</span><span class=\"n\">task</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Finished training! Use </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">\"duration\"</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Save / load the trained policy (it's exactly the same as PyTorch nn.module):</p>\n<pre><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">state_dict</span><span class=\"p\">(),</span> <span class=\"s1\">'dqn.pth'</span><span class=\"p\">)</span>\n<span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">load_state_dict</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'dqn.pth'</span><span class=\"p\">))</span>\n</pre>\n<p>Watch the performance with 35 FPS:</p>\n<pre><span class=\"n\">collector</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Collector</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"n\">collector</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">n_episode</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">render</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">35</span><span class=\"p\">)</span>\n<span class=\"n\">collector</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Look at the result saved in tensorboard: (on bash script)</p>\n<pre>tensorboard --logdir log/dqn\n</pre>\n<p>You can check out the <a href=\"https://tianshou.readthedocs.io\" rel=\"nofollow\">documentation</a> for advanced usage.</p>\n<h2>Contributing</h2>\n<p>Tianshou is still under development. More algorithms and features are going to be added and we always welcome contributions to help make Tianshou better. If you would like to contribute, please check out <a href=\"https://github.com/thu-ml/tianshou/blob/master/docs/contributing.rst\" rel=\"nofollow\">docs/contributing.rst</a>.</p>\n<h2>TODO</h2>\n<p>Check out the <a href=\"https://github.com/thu-ml/tianshou/projects/2\" rel=\"nofollow\">Issue/PR Categories</a> and <a href=\"https://github.com/thu-ml/tianshou/projects/3\" rel=\"nofollow\">Support Status</a> page for more detail.</p>\n<h2>Citing Tianshou</h2>\n<p>If you find Tianshou useful, please cite it in your publications.</p>\n<pre>@misc<span class=\"nb\">{</span>tianshou,\n  author = <span class=\"nb\">{</span>Jiayi Weng, Minghao Zhang, Dong Yan, Hang Su, Jun Zhu<span class=\"nb\">}</span>,\n  title = <span class=\"nb\">{</span>Tianshou<span class=\"nb\">}</span>,\n  year = <span class=\"nb\">{</span>2020<span class=\"nb\">}</span>,\n  publisher = <span class=\"nb\">{</span>GitHub<span class=\"nb\">}</span>,\n  journal = <span class=\"nb\">{</span>GitHub repository<span class=\"nb\">}</span>,\n  howpublished = <span class=\"nb\">{</span><span class=\"k\">\\url</span><span class=\"nb\">{</span>https://github.com/thu-ml/tianshou<span class=\"nb\">}}</span>,\n<span class=\"nb\">}</span>\n</pre>\n<h2>Acknowledgment</h2>\n<p>Tianshou was previously a reinforcement learning platform based on TensorFlow. You can check out the branch <a href=\"https://github.com/thu-ml/tianshou/tree/priv\" rel=\"nofollow\"><code>priv</code></a> for more detail. Many thanks to <a href=\"https://github.com/HaoshengZou\" rel=\"nofollow\">Haosheng Zou</a>'s pioneering work for Tianshou before version 0.1.1.</p>\n<p>We would like to thank <a href=\"http://ml.cs.tsinghua.edu.cn/\" rel=\"nofollow\">TSAIL</a> and <a href=\"http://ai.tsinghua.edu.cn/\" rel=\"nofollow\">Institute for Artificial Intelligence, Tsinghua University</a> for providing such an excellent AI research platform.</p>\n\n          </div>"}, "last_serial": 7103439, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "b387592e85ef361a9188a5832161d950", "sha256": "bd9b994513160fd8156a9ef5b54f1248f711be745fde1d7543252fd338ffba58"}, "downloads": -1, "filename": "tianshou-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b387592e85ef361a9188a5832161d950", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24426, "upload_time": "2020-03-25T10:17:06", "upload_time_iso_8601": "2020-03-25T10:17:06.899096Z", "url": "https://files.pythonhosted.org/packages/d6/8d/b0ef1641de3f51cd61b0d1e67da9c52be9a419b3cb0649115b6fa3e1d2cc/tianshou-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.0.post1": [{"comment_text": "", "digests": {"md5": "b3863acee74634cd1bda20d3a555c45d", "sha256": "e3cd3b8ab27f3394a4541933e0ecbe28bad9f70d890b52bc29b11d46f6f03b18"}, "downloads": -1, "filename": "tianshou-0.2.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3863acee74634cd1bda20d3a555c45d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27926, "upload_time": "2020-03-27T01:24:03", "upload_time_iso_8601": "2020-03-27T01:24:03.019096Z", "url": "https://files.pythonhosted.org/packages/93/27/93f1165946ed530d16b401bcb9bd5b60bb60356a08610903acbb6ee9dc5f/tianshou-0.2.0.post1-py3-none-any.whl", "yanked": false}], "0.2.0.post2": [{"comment_text": "", "digests": {"md5": "65accb2c585b206b5f4c414f5d2c203e", "sha256": "ab6e3a1dcaa30d0383be162f959eddfb71e06c5784d9c7aff3e20deedfa16b43"}, "downloads": -1, "filename": "tianshou-0.2.0.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "65accb2c585b206b5f4c414f5d2c203e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38150, "upload_time": "2020-03-29T00:54:04", "upload_time_iso_8601": "2020-03-29T00:54:04.921954Z", "url": "https://files.pythonhosted.org/packages/11/53/a9d3173a6b6276b17688e83fa6599962e24e9215eff9ef58fbe86dfc0fac/tianshou-0.2.0.post2-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "31b2a164326a49cfebfa61f826a69bc1", "sha256": "b10d28ba6ee7c84c5ae7b0d56e401c8f50a738388b203254a12b63a85d5f8e32"}, "downloads": -1, "filename": "tianshou-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "31b2a164326a49cfebfa61f826a69bc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40998, "upload_time": "2020-04-07T03:43:05", "upload_time_iso_8601": "2020-04-07T03:43:05.402978Z", "url": "https://files.pythonhosted.org/packages/61/5e/5c876450a6838c5e8ec64b8d207fb6b4e62f7b2fb87b1aa0a802822e815b/tianshou-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "8ea25062902d283f8161c1171f23fa79", "sha256": "b42d876b1f44694095a39fa42c010e9af8c02b766b4f70acf1ff83c342578cfd"}, "downloads": -1, "filename": "tianshou-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8ea25062902d283f8161c1171f23fa79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 46533, "upload_time": "2020-04-26T07:42:01", "upload_time_iso_8601": "2020-04-26T07:42:01.216830Z", "url": "https://files.pythonhosted.org/packages/3b/c0/7c5093bcf15911c7bb4b309d4537538a416c81084e62b72d2a547973ad2d/tianshou-0.2.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ea25062902d283f8161c1171f23fa79", "sha256": "b42d876b1f44694095a39fa42c010e9af8c02b766b4f70acf1ff83c342578cfd"}, "downloads": -1, "filename": "tianshou-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8ea25062902d283f8161c1171f23fa79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 46533, "upload_time": "2020-04-26T07:42:01", "upload_time_iso_8601": "2020-04-26T07:42:01.216830Z", "url": "https://files.pythonhosted.org/packages/3b/c0/7c5093bcf15911c7bb4b309d4537538a416c81084e62b72d2a547973ad2d/tianshou-0.2.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:53:33 2020"}