{"info": {"author": "Will McCutchen", "author_email": "will@mccutch.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Documentation", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=====\nDycco\n=====\n\nDycco is a(nother) Python port of `Docco`_, the original quick-and-dirty,\nhundred-line-long, literate-programming-style documentation generator. For an\nexample and more information, see `its self-generated docs`_.\n\nThis port of Docco has fewer features than the pimary Python port, `Pycco`_.\nFor instance, Dycco can generate documentation for Python files and nothing\nelse. It was written mostly as a reason to play with Python's AST.\n\nYou should probably use `Pycco`_ instead.\n\n\nInstallation\n============\n\nUse `pip`_ to install::\n\n    pip install dycco\n\n\nUsage\n=====\n\nCommand Line Usage\n------------------\n\nJust pass ``dycco`` a list of files and it will generate documentation for each\nof them. By default, the generated documentation is put in a ``docs/``\nsubdirectory::\n\n    $ dycco my_python_file.py\n\nDycco can generate docs for multiple files at once::\n\n    $ dycco my_package/*.py\n\nAnd you can control the output location::\n\n    $ dycco --output-dir=/path/to/docs my_package/*.py\n\nAll command line options are given below::\n\n    $ dycco --help\n\nOutputs::\n\n    usage: dycco [-h] [-o OUTPUT_DIR] source_file [source_file ...]\n\n    Literate-style documentation generator.\n\n    positional arguments:\n      source_file           Source files to document\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                            Output directory (will be created if necessary)\n\nLibrary Usage\n-------------\n\nDycco can also be used as a plain old Python library::\n\n    >>> import dycco\n    >>> dycco.document('my_python_file.py', 'my_output_dir')\n\n\nCredits\n=======\n\nDycco is just a simple re-implementation of `Docco`_, with some inspiration and\ntemplate code from its primary Python port `Pycco`_.\n\n.. _Docco: http://jashkenas.github.com/docco/\n.. _Pycco: http://fitzgen.github.com/pycco/\n.. _pip: http://www.pip-installer.org/\n.. _its self-generated docs: https://mccutchen.github.io/dycco/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mccutchen/dycco", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "dycco", "package_url": "https://pypi.org/project/dycco/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dycco/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mccutchen/dycco"}, "release_url": "https://pypi.org/project/dycco/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Literate-programming-style documentation generator.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Dycco is a(nother) Python port of <a href=\"http://jashkenas.github.com/docco/\" rel=\"nofollow\">Docco</a>, the original quick-and-dirty,\nhundred-line-long, literate-programming-style documentation generator. For an\nexample and more information, see <a href=\"https://mccutchen.github.io/dycco/\" rel=\"nofollow\">its self-generated docs</a>.</p>\n<p>This port of Docco has fewer features than the pimary Python port, <a href=\"http://fitzgen.github.com/pycco/\" rel=\"nofollow\">Pycco</a>.\nFor instance, Dycco can generate documentation for Python files and nothing\nelse. It was written mostly as a reason to play with Python\u2019s AST.</p>\n<p>You should probably use <a href=\"http://fitzgen.github.com/pycco/\" rel=\"nofollow\">Pycco</a> instead.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use <a href=\"http://www.pip-installer.org/\" rel=\"nofollow\">pip</a> to install:</p>\n<pre>pip install dycco\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"command-line-usage\">\n<h3>Command Line Usage</h3>\n<p>Just pass <tt>dycco</tt> a list of files and it will generate documentation for each\nof them. By default, the generated documentation is put in a <tt>docs/</tt>\nsubdirectory:</p>\n<pre>$ dycco my_python_file.py\n</pre>\n<p>Dycco can generate docs for multiple files at once:</p>\n<pre>$ dycco my_package/*.py\n</pre>\n<p>And you can control the output location:</p>\n<pre>$ dycco --output-dir=/path/to/docs my_package/*.py\n</pre>\n<p>All command line options are given below:</p>\n<pre>$ dycco --help\n</pre>\n<p>Outputs:</p>\n<pre>usage: dycco [-h] [-o OUTPUT_DIR] source_file [source_file ...]\n\nLiterate-style documentation generator.\n\npositional arguments:\n  source_file           Source files to document\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        Output directory (will be created if necessary)\n</pre>\n</div>\n<div id=\"library-usage\">\n<h3>Library Usage</h3>\n<p>Dycco can also be used as a plain old Python library:</p>\n<pre>&gt;&gt;&gt; import dycco\n&gt;&gt;&gt; dycco.document('my_python_file.py', 'my_output_dir')\n</pre>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Dycco is just a simple re-implementation of <a href=\"http://jashkenas.github.com/docco/\" rel=\"nofollow\">Docco</a>, with some inspiration and\ntemplate code from its primary Python port <a href=\"http://fitzgen.github.com/pycco/\" rel=\"nofollow\">Pycco</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1079780, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7dd6fd9017860bdd425a1d1a870d4a53", "sha256": "433a9d132b4205a5fac3da1190f990c7e13a6b0ae88fbb3144003e8fe1571543"}, "downloads": -1, "filename": "dycco-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7dd6fd9017860bdd425a1d1a870d4a53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10738, "upload_time": "2014-05-02T19:02:51", "upload_time_iso_8601": "2014-05-02T19:02:51.436315Z", "url": "https://files.pythonhosted.org/packages/a1/91/a024033b16a279fe86284ed55aabd43e7a0d45c4074b1469e62355adea19/dycco-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "20438480ae7e1c18a2ff1bd6c023e93b", "sha256": "78f4aa081d8d3245e0f3a1c2e8bd58e94de60f301d3fe1cbd65bae74a1753e53"}, "downloads": -1, "filename": "dycco-1.0.1.tar.gz", "has_sig": false, "md5_digest": "20438480ae7e1c18a2ff1bd6c023e93b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10656, "upload_time": "2014-05-03T17:15:18", "upload_time_iso_8601": "2014-05-03T17:15:18.462517Z", "url": "https://files.pythonhosted.org/packages/9a/00/cb7f86c0ec86e5b4c74872cfc6044310a6ba706329d239b9e8740908753d/dycco-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "20438480ae7e1c18a2ff1bd6c023e93b", "sha256": "78f4aa081d8d3245e0f3a1c2e8bd58e94de60f301d3fe1cbd65bae74a1753e53"}, "downloads": -1, "filename": "dycco-1.0.1.tar.gz", "has_sig": false, "md5_digest": "20438480ae7e1c18a2ff1bd6c023e93b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10656, "upload_time": "2014-05-03T17:15:18", "upload_time_iso_8601": "2014-05-03T17:15:18.462517Z", "url": "https://files.pythonhosted.org/packages/9a/00/cb7f86c0ec86e5b4c74872cfc6044310a6ba706329d239b9e8740908753d/dycco-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:46 2020"}