{"info": {"author": "Anne-Laure Ehresmann", "author_email": "alehresmann@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "========\nHelixPC\n========\n\nA series of scripts for gene database automation. Developed for the\nPhilippe Campeau Laboratory.\n\n\n.. image:: https://i.imgur.com/ScVxp3j.png\n  :width: 800px\n  :align: center\n  :alt: example scatter graph\n\nInstallation\n------------\n\nhelixPC is available on `PyPI\n<https://pypi.python.org/pypi/helixpc>`_, and is easily installable\nthrough `pip <https://pypi.python.org/pypi/pip>`_. \n\nFor stability, it is recommended that you install this package in a\n`virtual environment <https://pypi.python.org/pypi/virtualenv>`_, but\nyou may skip this step if you do not know how to set these up.\n\n::\n\n   $ pip install helixpc\n\n\nThat's it! You may now call the script with:\n\n::\n\n   $ helixpc\n    \nUsage\n-----\n\nGenerating a file for the graphing utility\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n \n$ helixpc group <group_input> [--nonan] [--round=[int]]\n\nIf you do not yet have a valid input file for graph generation, the\ncommand ``group`` can help you generate one automatically. Simply stick\nall your batches in a single csv file, call the utility and a file\nnamed ``output.csv`` will be generated. You can then feed to the\ngraphing utility.\n\nPlease note that: \n\n- If certain genes are included multiple times, their\n  mean will be calculated, and only a single entry will appear in \n  the output.\n \n- You may pass ``[--nonan]`` or ``[-n]`` to omit any gene that\n  are missing entries in a batch.\n\n- You may round each values by passing an integer to ``[--round]`` or\n  ``[-r]``. The integer passed is equivalent to the number of decimal\n  places. For example, passing ``-r=2`` will round all values to the\n  nearest hundredth.\n\n- You may pass the name of the output file with ``[--output]``. If not\n  used, the output file name will default to ``output.csv``\n\ninput file format: \n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n- Check the example ``group_input.csv``\n- The first row should specify the column titles.  \n- You *must* call the columns containing gene names ``gene_symbol``, \n  they are used as columns of reference by the scripts.\n\n\nUsing the graphing utility\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n::\n\n$ helixpc graph <graph_input> [--heat] [--scatter] [--alpha] [--pvalues] <control> <sample> [<sample> ...]\n\nOnce you have a csv file that you want to use for generating graph,\nyou may feed it to the graphing utility.  You must give the csv file a\nseries of arguments for it to function properly:\n\n``-s | --scatter``\n\nSpecifies that you want scatter graph(s).  Scatter graphs are\ngenerated with a control (always the same) in the x axis, and a sample\nin the y axis. Giving more than one sample will return to you multiple\ngraphs, one for each sample. You can hover over each point to see the\nname of the gene it is representing.\n\n``-he | --heat``\n\nSpecifies that you want a heat graph. It will graph both control and\nsamples. It accepts ``--no-log`` to prevent taking log_2() of all\nvalues. All other passed functions are ignored (for now).\n\n.. image:: https://i.imgur.com/bVimCkn.png\n  :width: 500px\n  :align: center\n  :alt: heat graph example\n\n``<control>``\n\nSpecifies the control. You may give the index or the name of a\ncolumn. You may also give a series of indexes/column-names separated\nby a comma, and the values used will be the mean of each row for the\nseries of columns given.\n\n``<sample>``\n\nSpecifies the sample. You may give the index or the name of a\ncolumn. You may also give a series of indexes/column-names separated\nby a comma, and the values used will be the mean of each row for the\nseries of columns given. You may specify many samples, simply put\na space in between each.\n\n``-a | --alpha``\n\nSpecifies the alpha value. If used, you must also specify a column\nthat will serve as the colour value for each gene. See ``--pvalues``.\n\n``-p | --pvalues``\n\nOnce you have specified an alpha, you must specify column(s) whose\nvalue for each gene will be compared to the alpha value. Everything\nbelow (including) the alpha value will be colored red. Everything strictly above\nthe alpha will be colored black.\n\ne.g. : ``helixpc graph output.csv -s -p=X9760.raw -a=5000 2,3 4``\n\n.. image:: https://i.imgur.com/LKUqoP8.png\n  :width: 500px\n  :align: center\n  :alt: scatter graph with alpha and pvalues\n\n\n``-l | --label``\n\nSpecifies the column to be used for making labels. The ten lowest and\nten highest values will be labelled on the graph.\n\ne.g. : ``helixpc graph output.csv -s -l=X9760.raw X9753 X9763``\n\n.. image:: https://i.imgur.com/N1tNhiK.png\n  :width: 500px\n  :align: center\n  :alt: scatter graph with labelled points with the max/min values\n\n``-nl | --no-legend``\n\nBy default, a legend is provided on the right hand side. Since this is\nnot very useful for standard, unicolour graphs, you may turn this off\nby passing --no-legend.\n\n``-nlg | --no-log``\n\nBy default, the x and y coordinates will use the log_2 of the values\ngiven. This tends to give clearer graphs, as it reduces their tendency\nto elongate in a very thin shape, whilst still representing an\naccurate distribution. You can turn this off by simply passing\n--no-log.\n\n``-nd | --no-diagonal``\n\nBy default, a diagonal x=x line will be drawn on the graph. You may\nturn this off by passing --no-diagonal.\n\ninput file format:\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n- Check the example ``graph_input.csv`` The first row should specify\n  the column titles.\n- The first col should contain ``gene_symbol``", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Gathaspa/HelixPC", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "helixpc", "package_url": "https://pypi.org/project/helixpc/", "platform": "", "project_url": "https://pypi.org/project/helixpc/", "project_urls": {"Homepage": "https://github.com/Gathaspa/HelixPC"}, "release_url": "https://pypi.org/project/helixpc/1.2.1/", "requires_dist": null, "requires_python": "", "summary": "Automisation of graph generation for gene FC databases.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A series of scripts for gene database automation. Developed for the\nPhilippe Campeau Laboratory.</p>\n<img alt=\"example scatter graph\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2e68347f3dcd37977b6d92acf67668f675993cd/68747470733a2f2f692e696d6775722e636f6d2f5363567870336a2e706e67\" width=\"800px\">\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>helixPC is available on <a href=\"https://pypi.python.org/pypi/helixpc\" rel=\"nofollow\">PyPI</a>, and is easily installable\nthrough <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a>.</p>\n<p>For stability, it is recommended that you install this package in a\n<a href=\"https://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">virtual environment</a>, but\nyou may skip this step if you do not know how to set these up.</p>\n<pre>$ pip install helixpc\n</pre>\n<p>That\u2019s it! You may now call the script with:</p>\n<pre>$ helixpc\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"generating-a-file-for-the-graphing-utility\">\n<h3>Generating a file for the graphing utility</h3>\n<pre>$ helixpc group &lt;group_input&gt; [--nonan] [--round=[int]]\n</pre>\n<p>If you do not yet have a valid input file for graph generation, the\ncommand <tt>group</tt> can help you generate one automatically. Simply stick\nall your batches in a single csv file, call the utility and a file\nnamed <tt>output.csv</tt> will be generated. You can then feed to the\ngraphing utility.</p>\n<p>Please note that:</p>\n<ul>\n<li>If certain genes are included multiple times, their\nmean will be calculated, and only a single entry will appear in\nthe output.</li>\n<li>You may pass <tt><span class=\"pre\">[--nonan]</span></tt> or <tt><span class=\"pre\">[-n]</span></tt> to omit any gene that\nare missing entries in a batch.</li>\n<li>You may round each values by passing an integer to <tt><span class=\"pre\">[--round]</span></tt> or\n<tt><span class=\"pre\">[-r]</span></tt>. The integer passed is equivalent to the number of decimal\nplaces. For example, passing <tt><span class=\"pre\">-r=2</span></tt> will round all values to the\nnearest hundredth.</li>\n<li>You may pass the name of the output file with <tt><span class=\"pre\">[--output]</span></tt>. If not\nused, the output file name will default to <tt>output.csv</tt></li>\n</ul>\n<div id=\"input-file-format\">\n<h4>input file format:</h4>\n<ul>\n<li>Check the example <tt>group_input.csv</tt></li>\n<li>The first row should specify the column titles.</li>\n<li>You <em>must</em> call the columns containing gene names <tt>gene_symbol</tt>,\nthey are used as columns of reference by the scripts.</li>\n</ul>\n</div>\n</div>\n<div id=\"using-the-graphing-utility\">\n<h3>Using the graphing utility</h3>\n<pre>$ helixpc graph &lt;graph_input&gt; [--heat] [--scatter] [--alpha] [--pvalues] &lt;control&gt; &lt;sample&gt; [&lt;sample&gt; ...]\n</pre>\n<p>Once you have a csv file that you want to use for generating graph,\nyou may feed it to the graphing utility.  You must give the csv file a\nseries of arguments for it to function properly:</p>\n<p><tt><span class=\"pre\">-s</span> | <span class=\"pre\">--scatter</span></tt></p>\n<p>Specifies that you want scatter graph(s).  Scatter graphs are\ngenerated with a control (always the same) in the x axis, and a sample\nin the y axis. Giving more than one sample will return to you multiple\ngraphs, one for each sample. You can hover over each point to see the\nname of the gene it is representing.</p>\n<p><tt><span class=\"pre\">-he</span> | <span class=\"pre\">--heat</span></tt></p>\n<p>Specifies that you want a heat graph. It will graph both control and\nsamples. It accepts <tt><span class=\"pre\">--no-log</span></tt> to prevent taking log_2() of all\nvalues. All other passed functions are ignored (for now).</p>\n<img alt=\"heat graph example\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9cc8150eaead526b58683ebffde949c805b6443f/68747470733a2f2f692e696d6775722e636f6d2f6256696d436b6e2e706e67\" width=\"500px\">\n<p><tt>&lt;control&gt;</tt></p>\n<p>Specifies the control. You may give the index or the name of a\ncolumn. You may also give a series of indexes/column-names separated\nby a comma, and the values used will be the mean of each row for the\nseries of columns given.</p>\n<p><tt>&lt;sample&gt;</tt></p>\n<p>Specifies the sample. You may give the index or the name of a\ncolumn. You may also give a series of indexes/column-names separated\nby a comma, and the values used will be the mean of each row for the\nseries of columns given. You may specify many samples, simply put\na space in between each.</p>\n<p><tt><span class=\"pre\">-a</span> | <span class=\"pre\">--alpha</span></tt></p>\n<p>Specifies the alpha value. If used, you must also specify a column\nthat will serve as the colour value for each gene. See <tt><span class=\"pre\">--pvalues</span></tt>.</p>\n<p><tt><span class=\"pre\">-p</span> | <span class=\"pre\">--pvalues</span></tt></p>\n<p>Once you have specified an alpha, you must specify column(s) whose\nvalue for each gene will be compared to the alpha value. Everything\nbelow (including) the alpha value will be colored red. Everything strictly above\nthe alpha will be colored black.</p>\n<p>e.g. : <tt>helixpc graph output.csv <span class=\"pre\">-s</span> <span class=\"pre\">-p=X9760.raw</span> <span class=\"pre\">-a=5000</span> 2,3 4</tt></p>\n<img alt=\"scatter graph with alpha and pvalues\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28da464901f1ad73223a52aece4fadd27e6c2cb0/68747470733a2f2f692e696d6775722e636f6d2f4c4b55716f50382e706e67\" width=\"500px\">\n<p><tt><span class=\"pre\">-l</span> | <span class=\"pre\">--label</span></tt></p>\n<p>Specifies the column to be used for making labels. The ten lowest and\nten highest values will be labelled on the graph.</p>\n<p>e.g. : <tt>helixpc graph output.csv <span class=\"pre\">-s</span> <span class=\"pre\">-l=X9760.raw</span> X9753 X9763</tt></p>\n<img alt=\"scatter graph with labelled points with the max/min values\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e41342047a6299cd249cca790b491ed0f50c62e0/68747470733a2f2f692e696d6775722e636f6d2f4e31744e68694b2e706e67\" width=\"500px\">\n<p><tt><span class=\"pre\">-nl</span> | <span class=\"pre\">--no-legend</span></tt></p>\n<p>By default, a legend is provided on the right hand side. Since this is\nnot very useful for standard, unicolour graphs, you may turn this off\nby passing \u2013no-legend.</p>\n<p><tt><span class=\"pre\">-nlg</span> | <span class=\"pre\">--no-log</span></tt></p>\n<p>By default, the x and y coordinates will use the log_2 of the values\ngiven. This tends to give clearer graphs, as it reduces their tendency\nto elongate in a very thin shape, whilst still representing an\naccurate distribution. You can turn this off by simply passing\n\u2013no-log.</p>\n<p><tt><span class=\"pre\">-nd</span> | <span class=\"pre\">--no-diagonal</span></tt></p>\n<p>By default, a diagonal x=x line will be drawn on the graph. You may\nturn this off by passing \u2013no-diagonal.</p>\n<div id=\"id1\">\n<h4>input file format:</h4>\n<ul>\n<li>Check the example <tt>graph_input.csv</tt> The first row should specify\nthe column titles.</li>\n<li>The first col should contain <tt>gene_symbol</tt></li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4134403, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c440ba2caa29ee57db34219088b477ba", "sha256": "eef2cfd6e3d713175a53ed0d18d0bcc3c3880ee3c062fdfd38546a33dddc854a"}, "downloads": -1, "filename": "helixpc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c440ba2caa29ee57db34219088b477ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4962, "upload_time": "2017-07-18T19:42:11", "upload_time_iso_8601": "2017-07-18T19:42:11.370913Z", "url": "https://files.pythonhosted.org/packages/d7/55/256affbf9824a8f897f6eeabe7bdaea20481f518bab20342b9eebb02f981/helixpc-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "dc532a34f5d562e4c8c612247c7a5fea", "sha256": "0df860692a3d53b77546c6d64a6a9cfe1af614041a2bccb4a4b03b860de79e8d"}, "downloads": -1, "filename": "helixpc-1.0.1.tar.gz", "has_sig": false, "md5_digest": "dc532a34f5d562e4c8c612247c7a5fea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5071, "upload_time": "2017-07-18T20:35:59", "upload_time_iso_8601": "2017-07-18T20:35:59.708039Z", "url": "https://files.pythonhosted.org/packages/23/1c/97c5f5ed1856e5976213192153f222ebc7af455e6065461d4e04b44c4a75/helixpc-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d63f7afdb7f664ee5f7681d147d1c53f", "sha256": "191f4e126660e197228b7b0ddf900c6617960dc65d7d77fdc38c9210ee1d0041"}, "downloads": -1, "filename": "helixpc-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d63f7afdb7f664ee5f7681d147d1c53f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5234, "upload_time": "2017-07-19T16:07:13", "upload_time_iso_8601": "2017-07-19T16:07:13.434011Z", "url": "https://files.pythonhosted.org/packages/fb/08/5c88269cf6b846e5bdbbcaa981ef87c958a37dd31d41e14614b7aef3f692/helixpc-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "55d652c79ea1f4debf3aa5bdc5659811", "sha256": "8b369e25ce637a5e8e6404b2937adead0ad3246676f7a61c71d117bcfc29a447"}, "downloads": -1, "filename": "helixpc-1.1.0.tar.gz", "has_sig": false, "md5_digest": "55d652c79ea1f4debf3aa5bdc5659811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6761, "upload_time": "2017-07-24T23:12:02", "upload_time_iso_8601": "2017-07-24T23:12:02.177511Z", "url": "https://files.pythonhosted.org/packages/6e/d1/074f66c46edc87e3002ef46509e74ebd0125d2d38760e6d9de310ef388f5/helixpc-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "64da989cf47d185e9421d20be85d9930", "sha256": "15fe766d8fb252f424168fc63341594b65d2ffdd91654e2c0f3c367f2a99579c"}, "downloads": -1, "filename": "helixpc-1.1.1.tar.gz", "has_sig": false, "md5_digest": "64da989cf47d185e9421d20be85d9930", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7328, "upload_time": "2017-07-26T04:50:53", "upload_time_iso_8601": "2017-07-26T04:50:53.679009Z", "url": "https://files.pythonhosted.org/packages/70/1a/fbe2f87fa2b09fe129af0cc6bec4a0655a810039762c246a40a86c47bc09/helixpc-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "4271028181f72df89740f5ede9cb36fb", "sha256": "dd0581742cf8bfba7bc7e172b231d64cc14ab180ae2f79d2996007f58e02e7b2"}, "downloads": -1, "filename": "helixpc-1.2.0.tar.gz", "has_sig": false, "md5_digest": "4271028181f72df89740f5ede9cb36fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7872, "upload_time": "2017-07-31T21:19:01", "upload_time_iso_8601": "2017-07-31T21:19:01.755649Z", "url": "https://files.pythonhosted.org/packages/b6/1b/d1303cdd350ef2a689b5466acd453ac08cd6a3d85b753e2e6cb8b59fc4eb/helixpc-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "3b7d6ed2701fe82aab0f4994f9e0122e", "sha256": "d2c6604ac71982ce0d114da1fc5e7c5d251597cfc86e62bb1be03127e06207ad"}, "downloads": -1, "filename": "helixpc-1.2.1.tar.gz", "has_sig": false, "md5_digest": "3b7d6ed2701fe82aab0f4994f9e0122e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9263, "upload_time": "2018-03-10T00:54:57", "upload_time_iso_8601": "2018-03-10T00:54:57.375357Z", "url": "https://files.pythonhosted.org/packages/23/18/d21f660c4455f1819d845ee336737d925af8319d7d5afdf049ec89f0378b/helixpc-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b7d6ed2701fe82aab0f4994f9e0122e", "sha256": "d2c6604ac71982ce0d114da1fc5e7c5d251597cfc86e62bb1be03127e06207ad"}, "downloads": -1, "filename": "helixpc-1.2.1.tar.gz", "has_sig": false, "md5_digest": "3b7d6ed2701fe82aab0f4994f9e0122e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9263, "upload_time": "2018-03-10T00:54:57", "upload_time_iso_8601": "2018-03-10T00:54:57.375357Z", "url": "https://files.pythonhosted.org/packages/23/18/d21f660c4455f1819d845ee336737d925af8319d7d5afdf049ec89f0378b/helixpc-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:46 2020"}