{"info": {"author": "Charles Jekel", "author_email": "cjekel@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# About\n\n### toleranceinterval\n\nA small Python library for one-sided tolerance bounds and two-sided tolerance intervals.\n\n[![Build Status](https://travis-ci.com/cjekel/tolerance_interval_py.svg?branch=master)](https://travis-ci.com/cjekel/tolerance_interval_py) [![Coverage Status](https://coveralls.io/repos/github/cjekel/tolerance_interval_py/badge.svg?branch=master)](https://coveralls.io/github/cjekel/tolerance_interval_py?branch=master)\n\n# Methods\n\nCheckout the [documentation](https://jekel.me/tolerance_interval_py/index.html). This is what has been implemented so far:\n\n## twoside\n\n- normal\n- lognormal\n\n## oneside\n\n- normal\n- lognormal\n- non_parametric\n- hanson_koopmans\n- hanson_koopmans_cmh\n\n# Requirements\n\n```Python\n\"numpy >= 1.14.0\"\n\"scipy >= 0.19.0\"\n\"sympy >= 1.4\"\n```\n# Installation\n\n```\npython -m pip install toleranceinterval\n```\n\nor clone  and install from source\n\n```\ngit clone https://github.com/cjekel/tolerance_interval_py\npython -m pip install ./tolerance_interval_py\n```\n\n# Examples\n\nThe syntax follows ```(x, p, g)```, where ```x``` is the random sample, ```p``` is the percentile, and ```g``` is the confidence level. Here ```x``` can be a single set of random samples, or sets of random samples of the same size.\n\nEstimate the 10th percentile to 95% confidence, of a random sample ```x``` using the Hanson and Koopmans 1964 method.\n\n```python\nimport numpy as np\nimport toleranceinterval as ti\nx = np.random.random(100)\nbound = ti.oneside.hanson_koopmans(x, 0.1, 0.95)\nprint(bound)\n```\n\nEstimate the central 90th percentile to 95% confidence, of a random sample ```x``` assuming ```x``` follows a Normal distribution.\n\n```python\nimport numpy as np\nimport toleranceinterval as ti\nx = np.random.random(100)\nbound = ti.twoside.normal(x, 0.1, 0.95)\nprint('Lower bound:', bound[:, 0])\nprint('Upper bound:', bound[:, 1])\n```\n\nAll methods will allow you to specify sets of samples as 2-D numpy arrays. The caveat here is that each set must be the same size. This example estimates the 95th percentile to 90% confidence using the non-parametric method. Here ```x``` will be 7 random sample sets, where each set is of 500 random samples.\n\n```python\nimport numpy as np\nimport toleranceinterval as ti\nx = np.random.random((7, 500))\nbound = ti.oneside.non_parametric(x, 0.95, 0.9)\n# here bound will print for each set of n=500 samples \nprint('Bounds:', bound)\n```\n\n# Changelog\n\nChanges will be stored in [CHANGELOG.md](https://github.com/cjekel/tolerance_interval_py/blob/master/CHANGELOG.md).\n\n# Contributing\n\nAll contributions are welcome! Please let me know if you have any questions, or run into any issues.\n\n# License\n\nMIT License", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cjekel/tolerance_interval_py", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "toleranceinterval", "package_url": "https://pypi.org/project/toleranceinterval/", "platform": "any", "project_url": "https://pypi.org/project/toleranceinterval/", "project_urls": {"Homepage": "https://github.com/cjekel/tolerance_interval_py"}, "release_url": "https://pypi.org/project/toleranceinterval/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "A small Python library for one-sided tolerance bounds and two-sided tolerance intervals.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>About</h1>\n<h3>toleranceinterval</h3>\n<p>A small Python library for one-sided tolerance bounds and two-sided tolerance intervals.</p>\n<p><a href=\"https://travis-ci.com/cjekel/tolerance_interval_py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3efc7629802df15ea58f0b183c10d043f11ba061/68747470733a2f2f7472617669732d63692e636f6d2f636a656b656c2f746f6c6572616e63655f696e74657276616c5f70792e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/cjekel/tolerance_interval_py?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdd89c66953a44ab5b85bc85e6723e48178f1ac9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f636a656b656c2f746f6c6572616e63655f696e74657276616c5f70792f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>Methods</h1>\n<p>Checkout the <a href=\"https://jekel.me/tolerance_interval_py/index.html\" rel=\"nofollow\">documentation</a>. This is what has been implemented so far:</p>\n<h2>twoside</h2>\n<ul>\n<li>normal</li>\n<li>lognormal</li>\n</ul>\n<h2>oneside</h2>\n<ul>\n<li>normal</li>\n<li>lognormal</li>\n<li>non_parametric</li>\n<li>hanson_koopmans</li>\n<li>hanson_koopmans_cmh</li>\n</ul>\n<h1>Requirements</h1>\n<pre><span class=\"s2\">\"numpy &gt;= 1.14.0\"</span>\n<span class=\"s2\">\"scipy &gt;= 0.19.0\"</span>\n<span class=\"s2\">\"sympy &gt;= 1.4\"</span>\n</pre>\n<h1>Installation</h1>\n<pre><code>python -m pip install toleranceinterval\n</code></pre>\n<p>or clone  and install from source</p>\n<pre><code>git clone https://github.com/cjekel/tolerance_interval_py\npython -m pip install ./tolerance_interval_py\n</code></pre>\n<h1>Examples</h1>\n<p>The syntax follows <code>(x, p, g)</code>, where <code>x</code> is the random sample, <code>p</code> is the percentile, and <code>g</code> is the confidence level. Here <code>x</code> can be a single set of random samples, or sets of random samples of the same size.</p>\n<p>Estimate the 10th percentile to 95% confidence, of a random sample <code>x</code> using the Hanson and Koopmans 1964 method.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">toleranceinterval</span> <span class=\"k\">as</span> <span class=\"nn\">ti</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">oneside</span><span class=\"o\">.</span><span class=\"n\">hanson_koopmans</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n</pre>\n<p>Estimate the central 90th percentile to 95% confidence, of a random sample <code>x</code> assuming <code>x</code> follows a Normal distribution.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">toleranceinterval</span> <span class=\"k\">as</span> <span class=\"nn\">ti</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">twoside</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Lower bound:'</span><span class=\"p\">,</span> <span class=\"n\">bound</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Upper bound:'</span><span class=\"p\">,</span> <span class=\"n\">bound</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n<p>All methods will allow you to specify sets of samples as 2-D numpy arrays. The caveat here is that each set must be the same size. This example estimates the 95th percentile to 90% confidence using the non-parametric method. Here <code>x</code> will be 7 random sample sets, where each set is of 500 random samples.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">toleranceinterval</span> <span class=\"k\">as</span> <span class=\"nn\">ti</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">))</span>\n<span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">ti</span><span class=\"o\">.</span><span class=\"n\">oneside</span><span class=\"o\">.</span><span class=\"n\">non_parametric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">)</span>\n<span class=\"c1\"># here bound will print for each set of n=500 samples </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Bounds:'</span><span class=\"p\">,</span> <span class=\"n\">bound</span><span class=\"p\">)</span>\n</pre>\n<h1>Changelog</h1>\n<p>Changes will be stored in <a href=\"https://github.com/cjekel/tolerance_interval_py/blob/master/CHANGELOG.md\" rel=\"nofollow\">CHANGELOG.md</a>.</p>\n<h1>Contributing</h1>\n<p>All contributions are welcome! Please let me know if you have any questions, or run into any issues.</p>\n<h1>License</h1>\n<p>MIT License</p>\n\n          </div>"}, "last_serial": 6134007, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "354c5bfba43688f2dcd7d9ae6cda8dcd", "sha256": "e31d6637076ff4945be209aba6710644434adfed2ccc172ba869eaa1baec9804"}, "downloads": -1, "filename": "toleranceinterval-0.0.1.tar.gz", "has_sig": false, "md5_digest": "354c5bfba43688f2dcd7d9ae6cda8dcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17605, "upload_time": "2019-11-03T23:08:33", "upload_time_iso_8601": "2019-11-03T23:08:33.514393Z", "url": "https://files.pythonhosted.org/packages/da/10/6428b456a66807af9263aa0ffe1e180a183561ff5e29e9c9f5aec8885bed/toleranceinterval-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bae869a1091a0cac74843067a480a7c1", "sha256": "65765063de86c2e600158fa34f52456e00c662c2944e41d3bd0d23076cb773bb"}, "downloads": -1, "filename": "toleranceinterval-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bae869a1091a0cac74843067a480a7c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17255, "upload_time": "2019-11-14T02:01:41", "upload_time_iso_8601": "2019-11-14T02:01:41.969810Z", "url": "https://files.pythonhosted.org/packages/66/d7/a44e0105a6420bf49a037c17cddd64e6e407fe86f209ddbb710fca2cd557/toleranceinterval-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bae869a1091a0cac74843067a480a7c1", "sha256": "65765063de86c2e600158fa34f52456e00c662c2944e41d3bd0d23076cb773bb"}, "downloads": -1, "filename": "toleranceinterval-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bae869a1091a0cac74843067a480a7c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17255, "upload_time": "2019-11-14T02:01:41", "upload_time_iso_8601": "2019-11-14T02:01:41.969810Z", "url": "https://files.pythonhosted.org/packages/66/d7/a44e0105a6420bf49a037c17cddd64e6e407fe86f209ddbb710fca2cd557/toleranceinterval-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:51:21 2020"}