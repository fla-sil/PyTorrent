{"info": {"author": "Digamma.ai", "author_email": "info@digamma.ai", "bugtrack_url": null, "classifiers": [], "description": "The project was developed by `Digamma.ai`_. The goal of the project is\nto develop a library to find and extract time/date information from\ntextual documents.\n\nWhy Should I Use This?\n----------------------\n\nThe main goal is to identify texts fragments that are related to\ntime/date/period (exact date, time of day, day of the week, months,\nseasons, time intervals, etc.) and make structural forms from them. We\ntried to detect a variety of textual representations and handle things\nlike recurring times (e.g. \u201cevery Wednesday\u201d).\n\nInstallation\n------------\n\n::\n\n    $ pip install pytimeextractor\n\nYou can also download or checkout the latest code and install from the source:\n\n::\n\n    $ python setup.py install\n\nUsage\n-----\n\nTo use it, simply do:\n\n::\n\n    >>> from pytimeextractor import ExtractionService\n    >>> text = \"from winter to summer\"\n    >>> ExtractionService.extract(text)\n\nA ``PySettings`` can be applied to specify some additional extraction\noptions, like setting local user date/time, time-zone offset, filtering\nextraction rules and finding latest dates.\n\n``PySettingsBuilder`` is used for constructing ``PySettings`` instance\nwhen you need to set configuration options other than the default.\n``PySettingsBuilder`` is best used by creating it, and then invoking its\nvarious configuration methods, and finally calling build method.\n\n::\n\n    >>> from pytimeextractor import PySettingsBuilder\n    >>> settings = (PySettingsBuilder()\n    ...          .addRulesGroup('DateGroup')\n    ...          .excludeRules(\"relativeDateRule\")\n    ...          .addUserDate(\"2017-10-23T18:40:40.931Z\")\n    ...          .addTimeZoneOffset(\"2\")\n    ...          .includeOnlyLatestDates(True)\n    ...          .build()\n    ...         )\n    >>> ExtractionService.extract(text, settings)\n\n.. _Digamma.ai: http://digamma.ai/", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/digamma-ai/timeextractor", "keywords": "NLP text extraction time date", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytimeextractor", "package_url": "https://pypi.org/project/pytimeextractor/", "platform": "", "project_url": "https://pypi.org/project/pytimeextractor/", "project_urls": {"Homepage": "https://github.com/digamma-ai/timeextractor"}, "release_url": "https://pypi.org/project/pytimeextractor/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Time Extractor NLP project - locate dates and times in text documents", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The project was developed by <a href=\"http://digamma.ai/\" rel=\"nofollow\">Digamma.ai</a>. The goal of the project is\nto develop a library to find and extract time/date information from\ntextual documents.</p>\n<div id=\"why-should-i-use-this\">\n<h2>Why Should I Use This?</h2>\n<p>The main goal is to identify texts fragments that are related to\ntime/date/period (exact date, time of day, day of the week, months,\nseasons, time intervals, etc.) and make structural forms from them. We\ntried to detect a variety of textual representations and handle things\nlike recurring times (e.g. \u201cevery Wednesday\u201d).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install pytimeextractor\n</pre>\n<p>You can also download or checkout the latest code and install from the source:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use it, simply do:</p>\n<pre>&gt;&gt;&gt; from pytimeextractor import ExtractionService\n&gt;&gt;&gt; text = \"from winter to summer\"\n&gt;&gt;&gt; ExtractionService.extract(text)\n</pre>\n<p>A <tt>PySettings</tt> can be applied to specify some additional extraction\noptions, like setting local user date/time, time-zone offset, filtering\nextraction rules and finding latest dates.</p>\n<p><tt>PySettingsBuilder</tt> is used for constructing <tt>PySettings</tt> instance\nwhen you need to set configuration options other than the default.\n<tt>PySettingsBuilder</tt> is best used by creating it, and then invoking its\nvarious configuration methods, and finally calling build method.</p>\n<pre>&gt;&gt;&gt; from pytimeextractor import PySettingsBuilder\n&gt;&gt;&gt; settings = (PySettingsBuilder()\n...          .addRulesGroup('DateGroup')\n...          .excludeRules(\"relativeDateRule\")\n...          .addUserDate(\"2017-10-23T18:40:40.931Z\")\n...          .addTimeZoneOffset(\"2\")\n...          .includeOnlyLatestDates(True)\n...          .build()\n...         )\n&gt;&gt;&gt; ExtractionService.extract(text, settings)\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3294437, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "8800213a99bd045821743a5d5e8915c0", "sha256": "f327bdc5cd4ec55e542beb2e39b81b1129ed3842170208f5cacf8d8d6ed384b7"}, "downloads": -1, "filename": "pytimeextractor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8800213a99bd045821743a5d5e8915c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3040243, "upload_time": "2017-10-26T15:38:29", "upload_time_iso_8601": "2017-10-26T15:38:29.472261Z", "url": "https://files.pythonhosted.org/packages/9c/ee/5e861e739e396e5c80718d411b155fd86711b6293bed2cbfe11b21d042b9/pytimeextractor-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c04f606b0bbe7248c34ae4bb8a3674ec", "sha256": "0af4249610230dc0c10a6df9eaf78284fdb9659ad529717f1c09dfb55c6acadf"}, "downloads": -1, "filename": "pytimeextractor-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c04f606b0bbe7248c34ae4bb8a3674ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3042112, "upload_time": "2017-10-27T13:12:34", "upload_time_iso_8601": "2017-10-27T13:12:34.968036Z", "url": "https://files.pythonhosted.org/packages/7d/ef/a9bb6443ca785bbf16f80755a2997e4f2fb7b19de8895ab35bedc3fc0179/pytimeextractor-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c8307e0bf3f561481941bb13cbe572d3", "sha256": "1948c329647807deb2a5e378c9a454f64485f02dbc95737a035279acc56b5be2"}, "downloads": -1, "filename": "pytimeextractor-0.1.3.tar.gz", "has_sig": false, "md5_digest": "c8307e0bf3f561481941bb13cbe572d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3042163, "upload_time": "2017-10-30T10:52:40", "upload_time_iso_8601": "2017-10-30T10:52:40.866981Z", "url": "https://files.pythonhosted.org/packages/0b/78/e33cfd892f73954ad79ee9c5dc32bbf59d7da337ed08d56911036253e091/pytimeextractor-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "43fc91861a08204727de364e145a43cc", "sha256": "d6d40ff9ceed7ebc14f3f7cc7eff4da91cbc57b29ebc917fdaedd7e477f99312"}, "downloads": -1, "filename": "pytimeextractor-0.1.4.tar.gz", "has_sig": false, "md5_digest": "43fc91861a08204727de364e145a43cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3042616, "upload_time": "2017-10-31T14:36:34", "upload_time_iso_8601": "2017-10-31T14:36:34.107397Z", "url": "https://files.pythonhosted.org/packages/ab/c5/1e38e843855ba686e3070611e601bb3638357ff8c51e12c3e6228d91cb29/pytimeextractor-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "43fc91861a08204727de364e145a43cc", "sha256": "d6d40ff9ceed7ebc14f3f7cc7eff4da91cbc57b29ebc917fdaedd7e477f99312"}, "downloads": -1, "filename": "pytimeextractor-0.1.4.tar.gz", "has_sig": false, "md5_digest": "43fc91861a08204727de364e145a43cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3042616, "upload_time": "2017-10-31T14:36:34", "upload_time_iso_8601": "2017-10-31T14:36:34.107397Z", "url": "https://files.pythonhosted.org/packages/ab/c5/1e38e843855ba686e3070611e601bb3638357ff8c51e12c3e6228d91cb29/pytimeextractor-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:16 2020"}