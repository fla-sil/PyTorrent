{"info": {"author": "Erkan Demiralay", "author_email": "erkan.dem@pm.me", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "[![Build Status](https://travis-ci.com/erkandem/swagccg-py2py.svg?token=EM8YQfR9wuLvQFQzBZ5o&branch=master)](https://travis-ci.com/erkandem/swagccg-py2py)\n![](https://img.shields.io/badge/License-BSD-blue.svg)\n![](https://img.shields.io/badge/Python-3.6%20%7C%203.7%20%7C%203.8%20-blue.svg)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/0181315639494eda8504e5b5092dee73)](https://www.codacy.com?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=erkandem/swagccg-py2py&amp;utm_campaign=Badge_Grade)\n\n# swagccg-py2py\n*Swagger Client Code Generator. Using Python. For Python*\n\n------------------------------------------\n\n## Summary\n\nImmediately testing new resources is important if resources are going to be \nco-dependent. While the tools at SwaggerHub are mind blowing \nthey may represent an overkill for *not yet production* code.\nTyping a single query can be done in any browser or with tools like curl.\nThis tool aims to place itself between those two categories.\n\nOn top of that, I would expect a programming language to be able to create its own tools. \nWhile Java is a mature and well established language, it might not be within \nthe proficiency portfolio of each and everyone - not to mention the author.\n\n\n## Get the Code\n\ud83d\udea8 **not yet**\n```bash\npip install swagccg-py2py\n```\n\nor clone it into your development environment\n\n```bash\ngit clone https://github.com/erkandem/swagccg-py2py.git\n```\n\nor download the zip\n```\nhttps://github.com/erkandem/swagccg-py2py/archive/master.zip\n```\n\n## Getting started\n\nThe assumption here ist that you already have a ``swagger.json`` file.\n\nThe creation of a client comes down to:\n\n```bash\npython swagccg\n```\n\nIf the ``config.json`` is not in your working directory\nyou would have to add its location to the call:\n```bash\npython -m swagccg -c /location/of/your/config.json\n```\n\n#### the configuration file\n\n``config.json `` consists of two distinct parts. \nFirst, we would like to tell the script:\n - where we keep a swagger definition \n - where we would like the client module to be created\n - what name we would like the client class to have\n\nSince this is rather a development tool we would like \nto switch between target hosts with little afford (i.e. environment variable).\nTherefore, we will offer it two targets which are later used to assamble\nresource URLs.\n\nWe'll set a local (i.e. development) and remote (i.e. deployed) set of:\n - port\n - base url (i.e IPv4, host, domain_name.tld, subdomain.domain_name.tld)\n - scheme (http or https)\n\n```json\n{\n  \"swagger_path\": \"/home/abuser/apiclient/swagger.json\",\n  \"target_path\": \"/home/abuser/apiclient/auto_client.py\",\n  \"class_name\": \"Myclient\",\n\n\n  \"api_port_local\": \"5000\",\n  \"api_url_base_local\": \"127.0.0.1\",\n  \"api_protocol_local\": \"http\",\n\n  \"api_port_remote\": \"80\",\n  \"api_url_base_remote\": \"deployed.com\",\n  \"api_protocol_remote\": \"https\"\n}\n```\n## Client Creation \n\n```bash\npython -m swagccg --c location/of/your/config.json\n```\n\n\n## Client Usage\n\nUltimately, the usage of the client depends on your requirements.\nNonetheless, the README would be incomplete without some usage examples:\n\n```python\nfrom auto_client import MyApiClient # default names - set them in confi.json\nfrom settings import credential_dict # if needed\n\nclient_instance = MyApiClient('remote')  # or 'local' \nclient_instance.login_with_api(credential_dict) \ndata = client_instance.get_something_r() \n```\n\nor\n\n```python\nimport os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nfrom auto_client import MyApiClient\n#%%\nenv_path = Path('.') / '.env'\nload_dotenv(dotenv_path=env_path)\nclient_instance = MyApiClient('remote')\n\n#%% login of course depends on the server\nclient_instance.login_with_api({\n    'username': os.getenv('API_USERNAME'),\n    'password': os.getenv('API_PASSWORD')\n})\nparam_dict = dict(name='value')\ndata = client_instance.get_something_r(fields_data=param_dict)\n```\n\n## gotchas\n - authorization is highly custom\n - most of the swagger details are not parsed\n - models and mapping is omitted (``marshmallow``)\n - little to none ``HTTP status codes`` parsing\n - assumes knowledge on HTTP HEADER, BODY, METHOD\n - pass ``pass_through=True``  as parameter to receive the response object untouched\n\n## recommended  reading\nMark Masse, REST API Design Rulebook - Designing Consistent RESTful Web Service Interfaces\n\n[Petstore - API](http://petstore.swagger.io)\n\n[OpenAPI Specififcation](https://github.com/OAI/OpenAPI-Specification)\n\n## Contact\n\n``Email`` [erkan.dem@pm.me](mailto:erkan.dem@pm.me)\n\n``Issues``: [github.com/erkandem/swagccg-py2py/issues](https://github.com/erkandem/swagccg-py2py/issues)\n\n``Source``: [github.com/erkandem/swagccg-py2py](https://github.com/erkandem/swagccg-py2py)\n\n``Documentation``: [github.com/erkandem/swagccg-py2py/README.md](https://erkandem.github.io/swagccg-py2py)\n\n## License\nMy project is licensed under terms of MIT.\nFor details please see the [``LICENSE``](LICENSE)\n\nThe examples and tests depend on the [petstore](http://petstore.swagger.io).\nThe attached petstore swagger by smartbear /  OpenAPI Initiative is licensed with MIT and is part of  the [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0.html) licensed repo.\n\n## Click Bait\nVisitors who were interested in this repo also took a look at:\n\n[swagccg-m2m - MatLab to MatLab Client Code Generation](https://github.com/erkandem/swagccg-m2m)\n\nBecause every programming language should be able to create its own tools.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/erkandem/swagccg-py2py", "keywords": "REST api-client client-code code-generator swagger openapi", "license": "", "maintainer": "", "maintainer_email": "", "name": "swagccg", "package_url": "https://pypi.org/project/swagccg/", "platform": "", "project_url": "https://pypi.org/project/swagccg/", "project_urls": {"Bug Reports": "https://github.com/erkandem/swagccg-py2py/issues", "Documentation": "https://erkandem.github.io/swagccg-py2py/", "Homepage": "https://github.com/erkandem/swagccg-py2py", "Source": "https://github.com/erkandem/swagccg-py2py/"}, "release_url": "https://pypi.org/project/swagccg/0.3.4/", "requires_dist": null, "requires_python": "", "summary": "Swagger Client Code Generator. Using Python. For Python.", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/erkandem/swagccg-py2py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fefc438cacd7f1340cddfa916db7a6003b74039d/68747470733a2f2f7472617669732d63692e636f6d2f65726b616e64656d2f737761676363672d70793270792e7376673f746f6b656e3d454d38595166523977754c765146517a425a356f266272616e63683d6d6173746572\"></a>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f5d9e49a7f58754e3f0009fadb34c3c7016e17d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4253442d626c75652e737667\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bbc27ca9b293f4f8b280704dbb2db84f1698ab44/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e36253230253743253230332e37253230253743253230332e382532302d626c75652e737667\">\n<a href=\"https://www.codacy.com?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=erkandem/swagccg-py2py&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b97720cc5dcad13239b3ec122264fb38abfa64d/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3031383133313536333934393465646138353034653562353039326465653733\"></a></p>\n<h1>swagccg-py2py</h1>\n<p><em>Swagger Client Code Generator. Using Python. For Python</em></p>\n<hr>\n<h2>Summary</h2>\n<p>Immediately testing new resources is important if resources are going to be\nco-dependent. While the tools at SwaggerHub are mind blowing\nthey may represent an overkill for <em>not yet production</em> code.\nTyping a single query can be done in any browser or with tools like curl.\nThis tool aims to place itself between those two categories.</p>\n<p>On top of that, I would expect a programming language to be able to create its own tools.\nWhile Java is a mature and well established language, it might not be within\nthe proficiency portfolio of each and everyone - not to mention the author.</p>\n<h2>Get the Code</h2>\n<p>\ud83d\udea8 <strong>not yet</strong></p>\n<pre>pip install swagccg-py2py\n</pre>\n<p>or clone it into your development environment</p>\n<pre>git clone https://github.com/erkandem/swagccg-py2py.git\n</pre>\n<p>or download the zip</p>\n<pre><code>https://github.com/erkandem/swagccg-py2py/archive/master.zip\n</code></pre>\n<h2>Getting started</h2>\n<p>The assumption here ist that you already have a <code>swagger.json</code> file.</p>\n<p>The creation of a client comes down to:</p>\n<pre>python swagccg\n</pre>\n<p>If the <code>config.json</code> is not in your working directory\nyou would have to add its location to the call:</p>\n<pre>python -m swagccg -c /location/of/your/config.json\n</pre>\n<h4>the configuration file</h4>\n<p><code>config.json</code> consists of two distinct parts.\nFirst, we would like to tell the script:</p>\n<ul>\n<li>where we keep a swagger definition</li>\n<li>where we would like the client module to be created</li>\n<li>what name we would like the client class to have</li>\n</ul>\n<p>Since this is rather a development tool we would like\nto switch between target hosts with little afford (i.e. environment variable).\nTherefore, we will offer it two targets which are later used to assamble\nresource URLs.</p>\n<p>We'll set a local (i.e. development) and remote (i.e. deployed) set of:</p>\n<ul>\n<li>port</li>\n<li>base url (i.e IPv4, host, domain_name.tld, subdomain.domain_name.tld)</li>\n<li>scheme (http or https)</li>\n</ul>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"swagger_path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/home/abuser/apiclient/swagger.json\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"target_path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/home/abuser/apiclient/auto_client.py\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"class_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Myclient\"</span><span class=\"p\">,</span>\n\n\n  <span class=\"nt\">\"api_port_local\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5000\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"api_url_base_local\"</span><span class=\"p\">:</span> <span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"api_protocol_local\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http\"</span><span class=\"p\">,</span>\n\n  <span class=\"nt\">\"api_port_remote\"</span><span class=\"p\">:</span> <span class=\"s2\">\"80\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"api_url_base_remote\"</span><span class=\"p\">:</span> <span class=\"s2\">\"deployed.com\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"api_protocol_remote\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Client Creation</h2>\n<pre>python -m swagccg --c location/of/your/config.json\n</pre>\n<h2>Client Usage</h2>\n<p>Ultimately, the usage of the client depends on your requirements.\nNonetheless, the README would be incomplete without some usage examples:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auto_client</span> <span class=\"kn\">import</span> <span class=\"n\">MyApiClient</span> <span class=\"c1\"># default names - set them in confi.json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">settings</span> <span class=\"kn\">import</span> <span class=\"n\">credential_dict</span> <span class=\"c1\"># if needed</span>\n\n<span class=\"n\">client_instance</span> <span class=\"o\">=</span> <span class=\"n\">MyApiClient</span><span class=\"p\">(</span><span class=\"s1\">'remote'</span><span class=\"p\">)</span>  <span class=\"c1\"># or 'local' </span>\n<span class=\"n\">client_instance</span><span class=\"o\">.</span><span class=\"n\">login_with_api</span><span class=\"p\">(</span><span class=\"n\">credential_dict</span><span class=\"p\">)</span> \n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">client_instance</span><span class=\"o\">.</span><span class=\"n\">get_something_r</span><span class=\"p\">()</span> \n</pre>\n<p>or</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auto_client</span> <span class=\"kn\">import</span> <span class=\"n\">MyApiClient</span>\n<span class=\"c1\">#%%</span>\n<span class=\"n\">env_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s1\">'.env'</span>\n<span class=\"n\">load_dotenv</span><span class=\"p\">(</span><span class=\"n\">dotenv_path</span><span class=\"o\">=</span><span class=\"n\">env_path</span><span class=\"p\">)</span>\n<span class=\"n\">client_instance</span> <span class=\"o\">=</span> <span class=\"n\">MyApiClient</span><span class=\"p\">(</span><span class=\"s1\">'remote'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#%% login of course depends on the server</span>\n<span class=\"n\">client_instance</span><span class=\"o\">.</span><span class=\"n\">login_with_api</span><span class=\"p\">({</span>\n    <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'API_USERNAME'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'API_PASSWORD'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n<span class=\"n\">param_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">client_instance</span><span class=\"o\">.</span><span class=\"n\">get_something_r</span><span class=\"p\">(</span><span class=\"n\">fields_data</span><span class=\"o\">=</span><span class=\"n\">param_dict</span><span class=\"p\">)</span>\n</pre>\n<h2>gotchas</h2>\n<ul>\n<li>authorization is highly custom</li>\n<li>most of the swagger details are not parsed</li>\n<li>models and mapping is omitted (<code>marshmallow</code>)</li>\n<li>little to none <code>HTTP status codes</code> parsing</li>\n<li>assumes knowledge on HTTP HEADER, BODY, METHOD</li>\n<li>pass <code>pass_through=True</code>  as parameter to receive the response object untouched</li>\n</ul>\n<h2>recommended  reading</h2>\n<p>Mark Masse, REST API Design Rulebook - Designing Consistent RESTful Web Service Interfaces</p>\n<p><a href=\"http://petstore.swagger.io\" rel=\"nofollow\">Petstore - API</a></p>\n<p><a href=\"https://github.com/OAI/OpenAPI-Specification\" rel=\"nofollow\">OpenAPI Specififcation</a></p>\n<h2>Contact</h2>\n<p><code>Email</code> <a href=\"mailto:erkan.dem@pm.me\">erkan.dem@pm.me</a></p>\n<p><code>Issues</code>: <a href=\"https://github.com/erkandem/swagccg-py2py/issues\" rel=\"nofollow\">github.com/erkandem/swagccg-py2py/issues</a></p>\n<p><code>Source</code>: <a href=\"https://github.com/erkandem/swagccg-py2py\" rel=\"nofollow\">github.com/erkandem/swagccg-py2py</a></p>\n<p><code>Documentation</code>: <a href=\"https://erkandem.github.io/swagccg-py2py\" rel=\"nofollow\">github.com/erkandem/swagccg-py2py/README.md</a></p>\n<h2>License</h2>\n<p>My project is licensed under terms of MIT.\nFor details please see the <a href=\"LICENSE\" rel=\"nofollow\"><code>LICENSE</code></a></p>\n<p>The examples and tests depend on the <a href=\"http://petstore.swagger.io\" rel=\"nofollow\">petstore</a>.\nThe attached petstore swagger by smartbear /  OpenAPI Initiative is licensed with MIT and is part of  the <a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\">Apache 2.0</a> licensed repo.</p>\n<h2>Click Bait</h2>\n<p>Visitors who were interested in this repo also took a look at:</p>\n<p><a href=\"https://github.com/erkandem/swagccg-m2m\" rel=\"nofollow\">swagccg-m2m - MatLab to MatLab Client Code Generation</a></p>\n<p>Because every programming language should be able to create its own tools.</p>\n\n          </div>"}, "last_serial": 6994707, "releases": {"0.3.4": [{"comment_text": "", "digests": {"md5": "24693941f2103956a26b7162b9b98fc5", "sha256": "6c05d7b1576fdaf0bf3234db7afaa8250a1c629a99de59f65f804a10b801caa2"}, "downloads": -1, "filename": "swagccg-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "24693941f2103956a26b7162b9b98fc5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15218, "upload_time": "2020-04-10T16:32:52", "upload_time_iso_8601": "2020-04-10T16:32:52.461116Z", "url": "https://files.pythonhosted.org/packages/4b/8f/91fc902a9c66fd9397a39dcb9ed95712ff76d402b50c7692c924ce06b4ed/swagccg-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "737f382b676ac1c1e1a658091044063f", "sha256": "4d9c6bd238675e219d6117c1a231531d59eed921fd0f7fde3827785ee3322219"}, "downloads": -1, "filename": "swagccg-0.3.4.tar.gz", "has_sig": false, "md5_digest": "737f382b676ac1c1e1a658091044063f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13394, "upload_time": "2020-04-10T16:32:54", "upload_time_iso_8601": "2020-04-10T16:32:54.819255Z", "url": "https://files.pythonhosted.org/packages/74/30/3120a1ce56f4eb869ede337b1b42d6a7d8f22217dc884d0f99cb13b69fda/swagccg-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "24693941f2103956a26b7162b9b98fc5", "sha256": "6c05d7b1576fdaf0bf3234db7afaa8250a1c629a99de59f65f804a10b801caa2"}, "downloads": -1, "filename": "swagccg-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "24693941f2103956a26b7162b9b98fc5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15218, "upload_time": "2020-04-10T16:32:52", "upload_time_iso_8601": "2020-04-10T16:32:52.461116Z", "url": "https://files.pythonhosted.org/packages/4b/8f/91fc902a9c66fd9397a39dcb9ed95712ff76d402b50c7692c924ce06b4ed/swagccg-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "737f382b676ac1c1e1a658091044063f", "sha256": "4d9c6bd238675e219d6117c1a231531d59eed921fd0f7fde3827785ee3322219"}, "downloads": -1, "filename": "swagccg-0.3.4.tar.gz", "has_sig": false, "md5_digest": "737f382b676ac1c1e1a658091044063f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13394, "upload_time": "2020-04-10T16:32:54", "upload_time_iso_8601": "2020-04-10T16:32:54.819255Z", "url": "https://files.pythonhosted.org/packages/74/30/3120a1ce56f4eb869ede337b1b42d6a7d8f22217dc884d0f99cb13b69fda/swagccg-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:46 2020"}