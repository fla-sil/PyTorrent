{"info": {"author": "OpenERP SA", "author_email": "TODO", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3", "Natural Language :: English", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "This module supplements the Warehouse application by effectively implementing Push and Pull inventory flows.\n============================================================================================================\n\nTypically this could be used to:\n--------------------------------\n    * Manage product manufacturing chains\n    * Manage default locations per product\n    * Define routes within your warehouse according to business needs, such as:\n        - Quality Control\n        - After Sales Services\n        - Supplier Returns\n\n    * Help rental management, by generating automated return moves for rented products\n\nOnce this module is installed, an additional tab appear on the product form,\nwhere you can add Push and Pull flow specifications. The demo data of CPU1\nproduct for that push/pull :\n\nPush flows:\n-----------\nPush flows are useful when the arrival of certain products in a given location\nshould always be followed by a corresponding move to another location, optionally\nafter a certain delay. The original Warehouse application already supports such\nPush flow specifications on the Locations themselves, but these cannot be\nrefined per-product.\n\nA push flow specification indicates which location is chained with which location,\nand with what parameters. As soon as a given quantity of products is moved in the\nsource location, a chained move is automatically foreseen according to the\nparameters set on the flow specification (destination location, delay, type of\nmove, journal). The new move can be automatically processed, or require a manual\nconfirmation, depending on the parameters.\n\nPull flows:\n-----------\nPull flows are a bit different from Push flows, in the sense that they are not\nrelated to the processing of product moves, but rather to the processing of\nprocurement orders. What is being pulled is a need, not directly products. A\nclassical example of Pull flow is when you have an Outlet company, with a parent\nCompany that is responsible for the supplies of the Outlet.\n\n  [ Customer ] <- A - [ Outlet ]  <- B -  [ Holding ] <~ C ~ [ Supplier ]\n\nWhen a new procurement order (A, coming from the confirmation of a Sale Order\nfor example) arrives in the Outlet, it is converted into another procurement\n(B, via a Pull flow of type 'move') requested from the Holding. When procurement\norder B is processed by the Holding company, and if the product is out of stock,\nit can be converted into a Purchase Order (C) from the Supplier (Pull flow of\ntype Purchase). The result is that the procurement order, the need, is pushed\nall the way between the Customer and Supplier.\n\nTechnically, Pull flows allow to process procurement orders differently, not\nonly depending on the product being considered, but also depending on which\nlocation holds the 'need' for that product (i.e. the destination location of\nthat procurement order).\n\nUse-Case:\n---------\n\nYou can use the demo data as follow:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  **CPU1:** Sell some CPU1 from Chicago Shop and run the scheduler\n     - Warehouse: delivery order, Chicago Shop: reception\n  **CPU3:**\n     - When receiving the product, it goes to Quality Control location then\n       stored to shelf 2.\n     - When delivering the customer: Pick List -> Packing -> Delivery Order from Gate A", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "AGPL-3", "maintainer": null, "maintainer_email": null, "name": "openerp-stock-location", "package_url": "https://pypi.org/project/openerp-stock-location/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/openerp-stock-location/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/openerp-stock-location/7.0.406/", "requires_dist": null, "requires_python": null, "summary": "Advanced Routes", "version": "7.0.406", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"typically-this-could-be-used-to\">\n<h2>Typically this could be used to:</h2>\n<blockquote>\n<ul>\n<li>Manage product manufacturing chains</li>\n<li>Manage default locations per product</li>\n<li><dl>\n<dt>Define routes within your warehouse according to business needs, such as:</dt>\n<dd><ul>\n<li>Quality Control</li>\n<li>After Sales Services</li>\n<li>Supplier Returns</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Help rental management, by generating automated return moves for rented products</li>\n</ul>\n</blockquote>\n<p>Once this module is installed, an additional tab appear on the product form,\nwhere you can add Push and Pull flow specifications. The demo data of CPU1\nproduct for that push/pull :</p>\n</div>\n<div id=\"push-flows\">\n<h2>Push flows:</h2>\n<p>Push flows are useful when the arrival of certain products in a given location\nshould always be followed by a corresponding move to another location, optionally\nafter a certain delay. The original Warehouse application already supports such\nPush flow specifications on the Locations themselves, but these cannot be\nrefined per-product.</p>\n<p>A push flow specification indicates which location is chained with which location,\nand with what parameters. As soon as a given quantity of products is moved in the\nsource location, a chained move is automatically foreseen according to the\nparameters set on the flow specification (destination location, delay, type of\nmove, journal). The new move can be automatically processed, or require a manual\nconfirmation, depending on the parameters.</p>\n</div>\n<div id=\"pull-flows\">\n<h2>Pull flows:</h2>\n<p>Pull flows are a bit different from Push flows, in the sense that they are not\nrelated to the processing of product moves, but rather to the processing of\nprocurement orders. What is being pulled is a need, not directly products. A\nclassical example of Pull flow is when you have an Outlet company, with a parent\nCompany that is responsible for the supplies of the Outlet.</p>\n<blockquote>\n[ Customer ] &lt;- A - [ Outlet ]  &lt;- B -  [ Holding ] &lt;~ C ~ [ Supplier ]</blockquote>\n<p>When a new procurement order (A, coming from the confirmation of a Sale Order\nfor example) arrives in the Outlet, it is converted into another procurement\n(B, via a Pull flow of type \u2018move\u2019) requested from the Holding. When procurement\norder B is processed by the Holding company, and if the product is out of stock,\nit can be converted into a Purchase Order (C) from the Supplier (Pull flow of\ntype Purchase). The result is that the procurement order, the need, is pushed\nall the way between the Customer and Supplier.</p>\n<p>Technically, Pull flows allow to process procurement orders differently, not\nonly depending on the product being considered, but also depending on which\nlocation holds the \u2018need\u2019 for that product (i.e. the destination location of\nthat procurement order).</p>\n</div>\n<div id=\"use-case\">\n<h2>Use-Case:</h2>\n<h2 id=\"you-can-use-the-demo-data-as-follow\"><span class=\"section-subtitle\">You can use the demo data as follow:</span></h2>\n<blockquote>\n<dl>\n<dt><strong>CPU1:</strong> Sell some CPU1 from Chicago Shop and run the scheduler</dt>\n<dd><ul>\n<li>Warehouse: delivery order, Chicago Shop: reception</li>\n</ul>\n</dd>\n<dt><strong>CPU3:</strong></dt>\n<dd><ul>\n<li>When receiving the product, it goes to Quality Control location then\nstored to shelf 2.</li>\n<li>When delivering the customer: Pick List -&gt; Packing -&gt; Delivery Order from Gate A</li>\n</ul>\n</dd>\n</dl>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 995215, "releases": {"7.0.355": [{"comment_text": "", "digests": {"md5": "ef67f9050d0ccb8ef628b8a602a43b17", "sha256": "5d8df2772c1631d437a6b3bc06b77e60a04e887997642a458a6349af445ace58"}, "downloads": -1, "filename": "openerp-stock-location-7.0.355.tar.gz", "has_sig": false, "md5_digest": "ef67f9050d0ccb8ef628b8a602a43b17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 161851, "upload_time": "2013-12-21T22:55:08", "upload_time_iso_8601": "2013-12-21T22:55:08.817301Z", "url": "https://files.pythonhosted.org/packages/d9/a9/b100c4be778ec84519dfa8b2283a95802e778e224188785fb2ab6f280fe4/openerp-stock-location-7.0.355.tar.gz", "yanked": false}], "7.0.406": [{"comment_text": "", "digests": {"md5": "cad386fd79a8c5df10d8d6bf2c4bd002", "sha256": "e01592f3c60e1b2e9de61249c12fffaf06a2b89539c8ad6aea12f88a7545317e"}, "downloads": -1, "filename": "openerp-stock-location-7.0.406.tar.gz", "has_sig": false, "md5_digest": "cad386fd79a8c5df10d8d6bf2c4bd002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 162251, "upload_time": "2014-02-09T15:08:21", "upload_time_iso_8601": "2014-02-09T15:08:21.209088Z", "url": "https://files.pythonhosted.org/packages/a2/67/b2c89d34cef183714a4cebbbdca60492a77dc8ffdcc4ec45f6be46ac4cf6/openerp-stock-location-7.0.406.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cad386fd79a8c5df10d8d6bf2c4bd002", "sha256": "e01592f3c60e1b2e9de61249c12fffaf06a2b89539c8ad6aea12f88a7545317e"}, "downloads": -1, "filename": "openerp-stock-location-7.0.406.tar.gz", "has_sig": false, "md5_digest": "cad386fd79a8c5df10d8d6bf2c4bd002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 162251, "upload_time": "2014-02-09T15:08:21", "upload_time_iso_8601": "2014-02-09T15:08:21.209088Z", "url": "https://files.pythonhosted.org/packages/a2/67/b2c89d34cef183714a4cebbbdca60492a77dc8ffdcc4ec45f6be46ac4cf6/openerp-stock-location-7.0.406.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:02 2020"}