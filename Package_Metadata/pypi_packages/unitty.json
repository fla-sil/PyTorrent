{"info": {"author": "Reuben Rusk", "author_email": "pythoro@mindquip.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# unitty\n\nUnitty (pronounced 'unity') provides units when you need them, not when you\ndon't. It's based on a phiolosophy that:\n\n* Units are useful for inputs\n* Units are useful for outputs (e.g. reports, plots)\n* Calculations are done in SI units, so units are not needed unless checking.\n* Unittests are used to encompass dimensional checks. Dimensional checks\nthemselves are insufficient.\n* Quantities are named adequately in the code (e.g. 'area', 'length', 'mass').\nThe kind of quantity they represent is clear from their names, and so \nrepresenting it elsewhere is typically redundant. \n\nUnitty provides a flexible, lightweight package to:\n\n* Automatically switch outputs to a different unit system using a single \ncommand, while keeping meaningful units (e.g. for force, pressure, etc.).\nThis capability was a core reason to write unitty.\n* Apply units intuitively.\n* Convert numbers to and from different units.\n* Fully customise units and unit systems. The user needs full flexibility\nof the systems and units used.\n* Bundle values with units into quantities for downstream use (e.g. reports,\nplots).\n* Not lock the user into objects with units attached. By default, units\nare not attached to calculation objects - the results are simply floats or\narrays. This behaviour can be changed automatically to do dimensional\nchecks during unittesting. \n* Use meaningful units (e.g. for force, pressure, etc.) while also allowing\ndimensionality reduction and checking. Automatic dimensionality reduction \nin some other packages can be frustrating.\n\nIt is built on the idea that units provide scale factors to convert numbers\nto and from values in SI base units. Since SI base units all have magnitudes of\n1.0, unit information need not be in the calculations themselves.\n\n## Quick start\n\nLoad the default units and unit systems:\n\n```python\n\nimport unitty\nu = unitty.get_units()\n\n```\n\n### Getting units\n\n`unitty` supports attribute and string methods to get units.\n\n```python\n\nu.kg\n# 1 kg\n\nu['kg']\n```\n\nStrings can be complex, like this:\n\n```python\n\nu['kg/(s2.m)']\n\n```\n\nThere are a few rules to formatting the strings:\n* Use only one divide symbol ('/')\n* Use only one pair of brackets in the dividend, if needed\n* Use a period ('.') to signify multiplication\n* Do not include an exponent symbol ('^'). For example, for square meters,\nwrite 'm2'.\n\n\n### Basic calculations\n\nUse the units to get an input into a base unit system:\n\n```python\n\nv = 5 * u.ft\nv\n# 1.524\n```\n\nWe get 1.524, which is in the defalut base unit for length, which is meters.\nWe can multiply and divide units in sensible ways:\n\n```python\nv2 = q = 5 * u.lbs / u.ft2\nv2\n# 24.4121\n```\n\nThis gives 24.4121, which is in kg/m^2 (we'll omit power symbol and write this\nas 'kg/m2').\n\n### Making quantities\n\nNow we'll create quantities like this:\n\n```python\n\nq = 5 << u.lbs / u.ft2\nq\n# 24.4121 kg/m2\n\nval, s = q.in_sys()\nval\n# 24.4121\ns\n# 'kg/m2'\n\nq.str_in_sys()\n# 24.4121 kg/m2\n\n```\n\n### Switching unit systems\n\nThe Quantity `q` displays as '24.4121 kg/m2', since it's a `Quantity` that\nincludes unit information. Now, let's change our unit system to another\npreloaded one and look at it again:\n\n```python\n\nunitty.set_system('US')\nq\n# 5 lbs/ft2\n\nval, s = q.in_sys()\nval\n# 4.999999999999999\ns\n# 'lbs/ft2'\n\nq.str_in_sys()\n# 5 lbs/ft2\n\n```\n\nNow, `q` shows as '5 lbs/ft2'. \n\nWe can use the `in_sys` method to get the \nvalue and units in this new unit system. But it's still the same underlying\nvalue, which we can see via:\n\n```python\n\nval, s = q.in_base()\nval\n# 24.4121\ns\n# 'kg/m2'\n\nq.str_in_base()\n# 24.4121 kg/m2\n\n```\n\nWe can make a new Quantity while in this unit system:\n\n```python\n\nq2 = 7 << u.lbs / u.ft2\nq2\n# 7 lbs/ft2\n\n```\n\nImportantly, the value of q2 is still in base units:\n\n```python\n\nq2.str_in_base()\n# 34.177 kg/m2\nq2.value\n34.177\n\n```\n\nWe can switch back to metric (the default unit system), and take a look at\nout quantities again:\n\n```python\n\nunitty.set_system('metric')\nq\n# 24.4121 kg/m2\nq2\n0.34177 kg/cm2\n\n```\n\n### Named quantity types\n\nNotice that in the above, q2 displays in different units. That's because by\ndefault, it guesses the best available combination of units in the unit system\nto display in a friendly way. Often, though, there are particular units\nwe want to display in, which depend on the unit system we want to us. \nFor one-off cases, we can do this:\n\n```python\n\nval, s = q2.in_units(u['kg/m2'])\nval\n# 34.17699345\ns\n# 'kg/m2'\n\n```\n\nIf we have many such quantities, we can do this automatically. We can define\nsome named quantity types in a csv file, like this one that we'll\ncall `example.csv':\n\n| qid           | metric      | US         |\n| ------------- | ----------- | ---------- |\n| widget_length | mm          | in         |\n| complex.value | kg.s2/m     | lbs.s2/ft  |\n\nThen we apply it like this:\n\n```python\n\ns = unitty.get_systems() # The object that looks after different unit systems\ns.set_qids('example.csv')\n\n```\n\nNow we can name the quantity types like this:\n\n```python\n\nq2.set_qid('complex.value')\n\n```\n\nA shorthand way is to add the 'qid' (quantity type id) when getting the unit:\n\n```python\n\nq2 = 7 << u['lbs/ft2', 'complex.value']\n\n```\n\nNow, the display of the unit automaticallymatches the units we've specified.\n\n\n```python\n\nunitty.set_system('US')\nq2\n# 7 lbs/ft2\n\nunitty.set_system('metric')\nq2\n# 34.17699345 kg/(m2)\n\nval, s = q.in_sys()\nval\n# 34.17699345\ns\n# kg/(m2)\n\n```\n\n\n\n## Alternatives\n\nSeveral other packages might be better suited to your particular needs. Here\nare some to consider, along with some notes. It is believed that none of\nthese other packages allow to automatically switch outputs between unit\nsystems with a single command.\n\n* numericalunits: Units are values. Simple.\n* astropy.units: Great, but locks units into calculation values - can't get\nback to simple floats or arrays.\n* sympy.physics.units: Solid.\n* pint: A very powerful units package.\n* unyt: An excellent and capable package.\n* quantiphy: Seems a bit awkward to use.\n* Buckingham: A bit awkward to use.\n* DimPy: Very old.\n* Magnitude: Clunky to use.\n* Python-quantities: A good package.\n* physipy: Another good package\n* SciMath Units: Large range of units.\n* cf_units: Suggested replacement of old udunitspy package. Clunky.\n* Units\n* Unum\n* quantities\n* physical-quantities\n* parampy\n* pynbody\n* misu\n* pysics", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/pythoro/unitty/archive/v0.0.2.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pythoro/unitty.git", "keywords": "UNIT,UNITS,UTILITY", "license": "", "maintainer": "", "maintainer_email": "", "name": "unitty", "package_url": "https://pypi.org/project/unitty/", "platform": "", "project_url": "https://pypi.org/project/unitty/", "project_urls": {"Download": "https://github.com/pythoro/unitty/archive/v0.0.2.zip", "Homepage": "https://github.com/pythoro/unitty.git"}, "release_url": "https://pypi.org/project/unitty/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Change unit systems without changing code", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>unitty</h1>\n<p>Unitty (pronounced 'unity') provides units when you need them, not when you\ndon't. It's based on a phiolosophy that:</p>\n<ul>\n<li>Units are useful for inputs</li>\n<li>Units are useful for outputs (e.g. reports, plots)</li>\n<li>Calculations are done in SI units, so units are not needed unless checking.</li>\n<li>Unittests are used to encompass dimensional checks. Dimensional checks\nthemselves are insufficient.</li>\n<li>Quantities are named adequately in the code (e.g. 'area', 'length', 'mass').\nThe kind of quantity they represent is clear from their names, and so\nrepresenting it elsewhere is typically redundant.</li>\n</ul>\n<p>Unitty provides a flexible, lightweight package to:</p>\n<ul>\n<li>Automatically switch outputs to a different unit system using a single\ncommand, while keeping meaningful units (e.g. for force, pressure, etc.).\nThis capability was a core reason to write unitty.</li>\n<li>Apply units intuitively.</li>\n<li>Convert numbers to and from different units.</li>\n<li>Fully customise units and unit systems. The user needs full flexibility\nof the systems and units used.</li>\n<li>Bundle values with units into quantities for downstream use (e.g. reports,\nplots).</li>\n<li>Not lock the user into objects with units attached. By default, units\nare not attached to calculation objects - the results are simply floats or\narrays. This behaviour can be changed automatically to do dimensional\nchecks during unittesting.</li>\n<li>Use meaningful units (e.g. for force, pressure, etc.) while also allowing\ndimensionality reduction and checking. Automatic dimensionality reduction\nin some other packages can be frustrating.</li>\n</ul>\n<p>It is built on the idea that units provide scale factors to convert numbers\nto and from values in SI base units. Since SI base units all have magnitudes of\n1.0, unit information need not be in the calculations themselves.</p>\n<h2>Quick start</h2>\n<p>Load the default units and unit systems:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unitty</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">unitty</span><span class=\"o\">.</span><span class=\"n\">get_units</span><span class=\"p\">()</span>\n</pre>\n<h3>Getting units</h3>\n<p><code>unitty</code> supports attribute and string methods to get units.</p>\n<pre><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">kg</span>\n<span class=\"c1\"># 1 kg</span>\n\n<span class=\"n\">u</span><span class=\"p\">[</span><span class=\"s1\">'kg'</span><span class=\"p\">]</span>\n</pre>\n<p>Strings can be complex, like this:</p>\n<pre><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"s1\">'kg/(s2.m)'</span><span class=\"p\">]</span>\n</pre>\n<p>There are a few rules to formatting the strings:</p>\n<ul>\n<li>Use only one divide symbol ('/')</li>\n<li>Use only one pair of brackets in the dividend, if needed</li>\n<li>Use a period ('.') to signify multiplication</li>\n<li>Do not include an exponent symbol ('^'). For example, for square meters,\nwrite 'm2'.</li>\n</ul>\n<h3>Basic calculations</h3>\n<p>Use the units to get an input into a base unit system:</p>\n<pre><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">ft</span>\n<span class=\"n\">v</span>\n<span class=\"c1\"># 1.524</span>\n</pre>\n<p>We get 1.524, which is in the defalut base unit for length, which is meters.\nWe can multiply and divide units in sensible ways:</p>\n<pre><span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">lbs</span> <span class=\"o\">/</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">ft2</span>\n<span class=\"n\">v2</span>\n<span class=\"c1\"># 24.4121</span>\n</pre>\n<p>This gives 24.4121, which is in kg/m^2 (we'll omit power symbol and write this\nas 'kg/m2').</p>\n<h3>Making quantities</h3>\n<p>Now we'll create quantities like this:</p>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">lbs</span> <span class=\"o\">/</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">ft2</span>\n<span class=\"n\">q</span>\n<span class=\"c1\"># 24.4121 kg/m2</span>\n\n<span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">in_sys</span><span class=\"p\">()</span>\n<span class=\"n\">val</span>\n<span class=\"c1\"># 24.4121</span>\n<span class=\"n\">s</span>\n<span class=\"c1\"># 'kg/m2'</span>\n\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">str_in_sys</span><span class=\"p\">()</span>\n<span class=\"c1\"># 24.4121 kg/m2</span>\n</pre>\n<h3>Switching unit systems</h3>\n<p>The Quantity <code>q</code> displays as '24.4121 kg/m2', since it's a <code>Quantity</code> that\nincludes unit information. Now, let's change our unit system to another\npreloaded one and look at it again:</p>\n<pre><span class=\"n\">unitty</span><span class=\"o\">.</span><span class=\"n\">set_system</span><span class=\"p\">(</span><span class=\"s1\">'US'</span><span class=\"p\">)</span>\n<span class=\"n\">q</span>\n<span class=\"c1\"># 5 lbs/ft2</span>\n\n<span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">in_sys</span><span class=\"p\">()</span>\n<span class=\"n\">val</span>\n<span class=\"c1\"># 4.999999999999999</span>\n<span class=\"n\">s</span>\n<span class=\"c1\"># 'lbs/ft2'</span>\n\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">str_in_sys</span><span class=\"p\">()</span>\n<span class=\"c1\"># 5 lbs/ft2</span>\n</pre>\n<p>Now, <code>q</code> shows as '5 lbs/ft2'.</p>\n<p>We can use the <code>in_sys</code> method to get the\nvalue and units in this new unit system. But it's still the same underlying\nvalue, which we can see via:</p>\n<pre><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">in_base</span><span class=\"p\">()</span>\n<span class=\"n\">val</span>\n<span class=\"c1\"># 24.4121</span>\n<span class=\"n\">s</span>\n<span class=\"c1\"># 'kg/m2'</span>\n\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">str_in_base</span><span class=\"p\">()</span>\n<span class=\"c1\"># 24.4121 kg/m2</span>\n</pre>\n<p>We can make a new Quantity while in this unit system:</p>\n<pre><span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"mi\">7</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">lbs</span> <span class=\"o\">/</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">ft2</span>\n<span class=\"n\">q2</span>\n<span class=\"c1\"># 7 lbs/ft2</span>\n</pre>\n<p>Importantly, the value of q2 is still in base units:</p>\n<pre><span class=\"n\">q2</span><span class=\"o\">.</span><span class=\"n\">str_in_base</span><span class=\"p\">()</span>\n<span class=\"c1\"># 34.177 kg/m2</span>\n<span class=\"n\">q2</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"mf\">34.177</span>\n</pre>\n<p>We can switch back to metric (the default unit system), and take a look at\nout quantities again:</p>\n<pre><span class=\"n\">unitty</span><span class=\"o\">.</span><span class=\"n\">set_system</span><span class=\"p\">(</span><span class=\"s1\">'metric'</span><span class=\"p\">)</span>\n<span class=\"n\">q</span>\n<span class=\"c1\"># 24.4121 kg/m2</span>\n<span class=\"n\">q2</span>\n<span class=\"mf\">0.34177</span> <span class=\"n\">kg</span><span class=\"o\">/</span><span class=\"n\">cm2</span>\n</pre>\n<h3>Named quantity types</h3>\n<p>Notice that in the above, q2 displays in different units. That's because by\ndefault, it guesses the best available combination of units in the unit system\nto display in a friendly way. Often, though, there are particular units\nwe want to display in, which depend on the unit system we want to us.\nFor one-off cases, we can do this:</p>\n<pre><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">q2</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"s1\">'kg/m2'</span><span class=\"p\">])</span>\n<span class=\"n\">val</span>\n<span class=\"c1\"># 34.17699345</span>\n<span class=\"n\">s</span>\n<span class=\"c1\"># 'kg/m2'</span>\n</pre>\n<p>If we have many such quantities, we can do this automatically. We can define\nsome named quantity types in a csv file, like this one that we'll\ncall `example.csv':</p>\n<table>\n<thead>\n<tr>\n<th>qid</th>\n<th>metric</th>\n<th>US</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>widget_length</td>\n<td>mm</td>\n<td>in</td>\n</tr>\n<tr>\n<td>complex.value</td>\n<td>kg.s2/m</td>\n<td>lbs.s2/ft</td>\n</tr></tbody></table>\n<p>Then we apply it like this:</p>\n<pre><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">unitty</span><span class=\"o\">.</span><span class=\"n\">get_systems</span><span class=\"p\">()</span> <span class=\"c1\"># The object that looks after different unit systems</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">set_qids</span><span class=\"p\">(</span><span class=\"s1\">'example.csv'</span><span class=\"p\">)</span>\n</pre>\n<p>Now we can name the quantity types like this:</p>\n<pre><span class=\"n\">q2</span><span class=\"o\">.</span><span class=\"n\">set_qid</span><span class=\"p\">(</span><span class=\"s1\">'complex.value'</span><span class=\"p\">)</span>\n</pre>\n<p>A shorthand way is to add the 'qid' (quantity type id) when getting the unit:</p>\n<pre><span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"mi\">7</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"s1\">'lbs/ft2'</span><span class=\"p\">,</span> <span class=\"s1\">'complex.value'</span><span class=\"p\">]</span>\n</pre>\n<p>Now, the display of the unit automaticallymatches the units we've specified.</p>\n<pre><span class=\"n\">unitty</span><span class=\"o\">.</span><span class=\"n\">set_system</span><span class=\"p\">(</span><span class=\"s1\">'US'</span><span class=\"p\">)</span>\n<span class=\"n\">q2</span>\n<span class=\"c1\"># 7 lbs/ft2</span>\n\n<span class=\"n\">unitty</span><span class=\"o\">.</span><span class=\"n\">set_system</span><span class=\"p\">(</span><span class=\"s1\">'metric'</span><span class=\"p\">)</span>\n<span class=\"n\">q2</span>\n<span class=\"c1\"># 34.17699345 kg/(m2)</span>\n\n<span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">in_sys</span><span class=\"p\">()</span>\n<span class=\"n\">val</span>\n<span class=\"c1\"># 34.17699345</span>\n<span class=\"n\">s</span>\n<span class=\"c1\"># kg/(m2)</span>\n</pre>\n<h2>Alternatives</h2>\n<p>Several other packages might be better suited to your particular needs. Here\nare some to consider, along with some notes. It is believed that none of\nthese other packages allow to automatically switch outputs between unit\nsystems with a single command.</p>\n<ul>\n<li>numericalunits: Units are values. Simple.</li>\n<li>astropy.units: Great, but locks units into calculation values - can't get\nback to simple floats or arrays.</li>\n<li>sympy.physics.units: Solid.</li>\n<li>pint: A very powerful units package.</li>\n<li>unyt: An excellent and capable package.</li>\n<li>quantiphy: Seems a bit awkward to use.</li>\n<li>Buckingham: A bit awkward to use.</li>\n<li>DimPy: Very old.</li>\n<li>Magnitude: Clunky to use.</li>\n<li>Python-quantities: A good package.</li>\n<li>physipy: Another good package</li>\n<li>SciMath Units: Large range of units.</li>\n<li>cf_units: Suggested replacement of old udunitspy package. Clunky.</li>\n<li>Units</li>\n<li>Unum</li>\n<li>quantities</li>\n<li>physical-quantities</li>\n<li>parampy</li>\n<li>pynbody</li>\n<li>misu</li>\n<li>pysics</li>\n</ul>\n\n          </div>"}, "last_serial": 7184046, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b441b86aa7dab96ae2ca2fb718207877", "sha256": "82a0bcf41a6fce9e229787a80c62a6a004456934304d6a82df21d1bf77e89d52"}, "downloads": -1, "filename": "unitty-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b441b86aa7dab96ae2ca2fb718207877", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5502, "upload_time": "2020-05-04T03:48:18", "upload_time_iso_8601": "2020-05-04T03:48:18.357471Z", "url": "https://files.pythonhosted.org/packages/5b/d2/e5f41bb2eada07a78bd4bdd8a15d23a4dbd2b8fe5be961e4b21559e3756e/unitty-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "2e0e52cb3d33d1a93cbb1667b6346786", "sha256": "93d177735f60128cbe145b78a3bf661d9870411eecb1376fb6652796f257ab5c"}, "downloads": -1, "filename": "unitty-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2e0e52cb3d33d1a93cbb1667b6346786", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15719, "upload_time": "2020-05-06T22:48:45", "upload_time_iso_8601": "2020-05-06T22:48:45.451666Z", "url": "https://files.pythonhosted.org/packages/b5/df/f99f57abf211f86dd1575b20051a7a4b8054f289aab3ce3af337fb5ca3a6/unitty-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e0e52cb3d33d1a93cbb1667b6346786", "sha256": "93d177735f60128cbe145b78a3bf661d9870411eecb1376fb6652796f257ab5c"}, "downloads": -1, "filename": "unitty-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2e0e52cb3d33d1a93cbb1667b6346786", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15719, "upload_time": "2020-05-06T22:48:45", "upload_time_iso_8601": "2020-05-06T22:48:45.451666Z", "url": "https://files.pythonhosted.org/packages/b5/df/f99f57abf211f86dd1575b20051a7a4b8054f289aab3ce3af337fb5ca3a6/unitty-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:18 2020"}