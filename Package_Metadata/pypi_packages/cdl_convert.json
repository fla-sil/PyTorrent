{"info": {"author": "Sean Wallitsch", "author_email": "shidarin@alphamatte.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Multimedia :: Graphics", "Topic :: Multimedia :: Video", "Topic :: Multimedia :: Video :: Display", "Topic :: Multimedia :: Video :: Non-Linear Editor", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "CDL Convert\n===========\n\n|PyPI Version|\\ |Build Status|\\ |Coverage Status|\\ |Code Health|\n\n- **Author/Maintainer:** Sean Wallitsch\n- **Email:** shidarin@alphamatte.com\n- **License:** MIT\n- **Status:** Development\n- **Docs:** http://cdl-convert.readthedocs.org/\n- **GitHub:** https://github.com/shidarin/cdl_convert\n- **PyPI:** https://pypi.python.org/pypi/cdl_convert\n- **Python Versions:** 2.6-3.5, PyPy & PyPy3\n\nIntroduction\n------------\n\n``cdl_convert`` converts between common `ASC CDL`_ formats. The `American Society of\nCinematographers`_ Color Decision List (ASC CDL, or CDL for short) is a\nschema to simplify the process of interchanging color data between\nvarious programs and facilities.\n\nThe ASC has defined schemas for including the 10 basic numbers in 5\ndifferent formats:\n\n-  Avid Log Exchange (ALE)\n-  Film Log EDL Exchange (FLEx)\n-  CMX EDL\n-  XML Color Correction (cc)\n-  XML Color Correction Collection (ccc)\n-  XML Color Decision List (cdl)\n\nUnofficial Formats:\n\n-  OCIOCDLTransform, a `Foundry Nuke`_ node\n-  Space separated CDL, a Rhythm & Hues internal cdl format\n\nIt is the purpose of ``cdl_convert`` to convert ASC CDL information between\nthese basic formats to further facilitate the ease of exchange of color\ndata within the Film and TV industries.\n\n``cdl_convert`` supports parsing ALE, FLEx, CC, CCC, CDL CMX EDL and RCDL.\nWe can write out CC, CCC, CDL and RCDL.\n\n**cdl_convert is not associated with the American Society of\nCinematographers**\n\nUsage\n-----\n\nMost likely you'll use ``cdl_convert`` as a script, instead of a python package\nitself (indeed, even the name is formatted more like a script (with an\nunderscore) than the more common all lowercase of python modules.\n\nFor usage as a python module, see the module documentation.\n\nScript Usage\n^^^^^^^^^^^^\n\nIf you just want to convert to a ``.cc`` XML file, the only required argument\nis an input file, like so:::\n\n    $ cdl_convert ./di_v001.flex\n\nYou can override the default ``.cc`` output, or provide multiple outputs with\nthe ``-o`` flag.::\n\n    $ cdl_convert ./di_v001.flex -o cc,cdl\n\nChangelog\n---------\n\n*New in version 0.9.2:*\n\n- Fixed a bug where ALE's with blank lines would not convert correctly.\n- Fixed a bug that was preventing ``cdl_convert`` from being correctly installed in Python 2.6\n- Fixed continuous integration testing.\n- No longer officially supporting Python 3.2, as I've had to remove it from our CI builds. It should still work just fine though, but we won't be running CI against it.\n\n*New in version 0.9:*\n\n- Added ability to parse CMX EDLs\n- Fixed a script bug where a collection format containing color decisions will not have those color decisions exported as individual color corrections.\n- Fixed a bug where we weren't reading line endings correctly in certain situations.\n- Added a cdl_convert.py stub file to the package root level, which will allow running of the cdl_convert script without installation. Due to relative imports in the python code, it was no longer possible to call cdl_convert/cdl_convert.py directly.\n- The script, when run directly from cdl_convert.py, will now write errors to stderror correctly, and exit with a status of 1.\n\n*New in version 0.8:*\n\n- Added ``--single`` flag. When provided with an output collection format, each color correction in the input will be exported to it's own collection.\n- Giving a ColorCorrection a non-duplicate ID now works unless the ``--halt`` flag is given. This means that incoming collections that contain duplicate IDs will not fail out.\n\n*New in version 0.7.1:*\n\n- Fixed bug where ALE's without 'Scan Filename' fields could not parse correctly.\n\n*New in version 0.7:*\n\nThe biggest change in 0.7 is the addition of collection format support.\n``.ccc``, Color Correction Collections, can now be parsed and written. ``.cdl``,\nColor Decision Lists, can now be parsed and written. ``.ale``\nand ``.flex`` files now return a collection.\n\n- New script flags:\n    - Adds ``--check`` flag to script, which checks all parsed `ColorCorrects` for sane values, and prints warnings to shell\n    - Adds ``-d``, ``--destination`` flag to the script, which allows user to specify the output directory converted files will be written to.\n    - Adds ``--no-ouput`` flag to the script, which goes through the entire conversion process but doesn't actually write anything to disk. Useful for troubleshooting, especially when combined with ``--check``\n    - Adds ``--halt`` flag to the script, which halts on errors that can be resolved safely (such as negative slope or power values)\n- Renames `ColorCollectionBase` to `ColorCollection` , since it will be used directly by both ``ccc`` and ``cdl``.\n- Adds ``parse_ccc`` which returns a `ColorCollection` .\n- Adds ``write_ccc`` which writes a `ColorCollection` as a ``ccc`` file.\n- Adds ``parse_cdl`` which returns a `ColorCollection` .\n- Adds ``write_cdl`` which returns a `ColorCollection` as a ``cdl`` file.\n- `ColorCollection` is now a fully functional container class, with many attributes and methods.\n- Added `ColorDecision` , which stores either a `ColorCorrection` or `ColorCorrectionRef` , and an optional `MediaRef`\n- Added `ColorCorrectionRef` , which stores a reference to a `ColorCorrection`\n- Added ``parent`` attribute to `ColorCorrection` .\n- Calling ``sop_node`` or ``sat_node`` on a `ColorCorrection` before attempting to set a SOP or Sat power now works.\n- `ColorCorrection` ``cdl_file`` init argument renamed to ``input_file``, which is now optional and able to be set after init.\n- ``parse_cc`` and ``parse_rnh_cdl`` now only yield a single `ColorCorrection` , not a single member list.\n- Added dev-requirements.txt (contains ``mock``)\n- All ``determine_dest`` methods now take a second ``directory`` argument, which determines the output directory.\n- Adds ``sanity_check`` function which prints values which might be unusual to stdout.\n- ``parse_cdl`` and ``write_cdl`` renamed to ``parse_rnh_cdl`` and ``write_rnh_cdl`` respectively.\n- ``member_reset`` methods:\n    - `ColorCorrection` now has a ``reset_members`` method, which resets the class level member's dictionary.\n    - `MediaRef` also has a ``reset_members`` method, as does `ColorCollection`\n    - ``reset_all`` function calls all of the above ``reset_members`` methods at once.\n- Renamed ``cdl_file`` argument:\n    - ``parse_cc`` ``cdl_file`` arg renamed to ``input_file`` and now accepts a either a raw string or an ``ElementTree`` ``Element`` as ``input_file``.\n    - ``parse_rnh_cdl`` ``cdl_file`` arg renamed to ``input_file``.\n    - ``parse_ale`` ``edl_file`` arg renamed to ``input_file``.\n    - ``parse_flex`` ``edl_file`` arg renamed to ``input_file``.\n- Python Structure Refactoring\n    - Moved ``HALT_ON_ERROR`` into the ``config`` module, which should now be referenced and set by importing the entire ``config`` module, and referencing or setting ``config.HALT_ON_ERROR``\n    - Script functionality remains in ``cdl_convert.cdl_convert``, but everything else has been moved out.\n    - `AscColorSpaceBase` , `AscDescBase` , `AscXMLBase` and `ColorNodeBase` now live under ``cdl_convert.base``\n    - `ColorCollection` now lives in ``cdl_convert.collection``\n    - `ColorCorrection` , `SatNode` and `SopNode` now live under ``cdl_convert.correction``\n    - `ColorDecision` , `ColorCorrectionRef` and `MediaRef` now live under ``cdl_convert.decision``\n    - All parse functions now live under ``cdl_convert.parse``\n    - All write functions now live under ``cdl_convert.write``\n    - ``sanity_check`` now live under ``cdl_convert.utils``\n    - ``reset_all`` now lives under the main module\n\nInstallation\n------------\n\nInstalling is as simple as using pip:::\n\n    $ pip install cdl_convert\n\nIf you don't want to bother with a pip style install, you can alternatively\ngrab the entire `cdl_convert`_ directory, then set up a shortcut to call\n``cdl_convert/cdl_convert.py``\n\nGitHub, Bug Reporting and Support\n---------------------------------\n\nAt ``cdl_convert``'s `GitHub`_ page you can browse the code and the history of\nthe project.\n\nBuilds can be downloaded from the GitHub page or the `PyPI`_ repository entry.\n\nThe `issues`_ page on GitHub is the best place to report bugs or request support,\nand while ``cdl_convert`` is distributed with no warranty of any kind, issues\nwill be read and helped if able.\n\nFrequently Asked Questions\n--------------------------\n\n- What versions of Python does ``cdl_convert`` support?\n    ``cdl_convert`` works in Python 2.6 through 3.4 and PyPy. A full test suite\n    runs continuous integration through `Travis-ci.org`_, coverage through\n    `coveralls.io`_, and code quality checked with `landscape.io`_. **Code is**\n    pep 8 **compliant**, with docstrings following `google code`_ docstring\n    standards.\n\n- Why don't you support format *X*?\n    I either haven't had time to build a parser for the format yet, or I might\n    even be unaware it exists. Perhaps you should drop by the `issues`_ page\n    and create a request for the format? If creating a request for a format it\n    helps immensely to have a sample of that format.\n\n- Why the underscore?\n    ``cdl_convert`` started as a simple script to convert from one format to\n    another. As such, it wasn't named with the standards that one would usually\n    use for a python module. By the time the project became big enough, was on\n    PyPI, etc, it was too spread out on the web, in too many places to make\n    changing easy. In the end, I opted to keep it. At some point,\n    ``cdl_convert`` might migrate into a larger, more generic film & tv\n    python module, which will be named properly.\n\nContributing\n------------\n\nSamples\n^^^^^^^\n\nPlease, *please*, **please** submit samples of the following formats:\n\n- FLEx\n- ALE\n- CMX\n- CCC\n\nThese are complex formats, and seeing real world samples helps write tests\nthat ensure correct parsing of real world EDLs and CDLs. If you don't even see\na format of CDL listed that you know exists, open an issue at the github\n`issues`_ page asking for parse/write support for the format, and include a\nsample.\n\nSquashing Bugs\n^^^^^^^^^^^^^^\n\nTake a look at the `issues`_ page and if you see something that you think you\ncan bang out, leave a comment saying you're going to take it on. While many\nissues are already assigned to the principal authors, just because it's assigned\ndoesn't mean any work has begun.\n\nSubmitting Code\n^^^^^^^^^^^^^^^\n\nBefore generating a pull request, make sure to run the test suite:::\n\n    $ python setup.py test\n\nIf the tests fail, note which tests are failing, how they would have been\naffected by your code. Always assume you broke something rather than that the\ntests are 'wrong.' If you know you didn't break something, and the tests are\nsimply reporting out of date results based on your changes, *change the tests.*\n\nIf your code fails the tests (`Travis-ci.org`_ checks all pull requests when\nyou create them) it will be **rejected**. If the code style doesn't follow\nPEP-8, it's not going to be a high priority for integration.\n\nWhen submitting, you'll be asked to waive copyright to your submitted code to\nthe listed authors. This is so we can keep a tight handle on the code and change\nthe license for future releases if needed.\n\nLicense\n-------\n\n    The MIT License (MIT)\n\n    | cdl_convert\n    | Copyright (c) 2015 Sean Wallitsch\n    | http://github.com/shidarin/cdl_convert/\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n\n.. _ASC CDL: http://en.wikipedia.org/wiki/ASC_CDL\n.. _American Society of Cinematographers: http://www.theasc.com/\n.. _Foundry Nuke: http://www.thefoundry.co.uk/nuke/\n.. _cdl_convert: http://github.com/shidarin/cdl_convert/blob/master/cdl_convert/cdl_convert.py\n.. _GitHub: http://github.com/shidarin/cdl_convert\n.. _PyPI: http://pypi.python.org/pypi/cdl_convert\n.. _issues: http://github.com/shidarin/cdl_convert/issues\n.. _Travis-ci.org: http://travis-ci.org/shidarin/cdl_convert\n.. _coveralls.io: http://coveralls.io/r/shidarin/cdl_convert\n.. _PEP-8: http://legacy.python.org/dev/peps/pep-0008/\n.. _google code: http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Comments\n.. _landscape.io: http://landscape.io/\n\n.. |PyPI Version| image:: https://badge.fury.io/py/cdl_convert.png\n   :target: http://badge.fury.io/py/cdl_convert\n.. |Build Status| image:: https://travis-ci.org/shidarin/cdl_convert.svg?branch=master\n   :target: https://travis-ci.org/shidarin/cdl_convert\n.. |Coverage Status| image:: https://coveralls.io/repos/shidarin/cdl_convert/badge.png?branch=master\n   :target: https://coveralls.io/r/shidarin/cdl_convert?branch=master\n.. |Code Health| image:: https://landscape.io/github/shidarin/cdl_convert/master/landscape.png\n   :target: https://landscape.io/github/shidarin/cdl_convert/master", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/shidarin/cdl_convert", "keywords": "film tv color conversion converter cdl editing", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "cdl_convert", "package_url": "https://pypi.org/project/cdl_convert/", "platform": "any", "project_url": "https://pypi.org/project/cdl_convert/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/shidarin/cdl_convert"}, "release_url": "https://pypi.org/project/cdl_convert/0.9.2/", "requires_dist": null, "requires_python": null, "summary": "Converts between common ASC Color Decision List (CDL) formats", "version": "0.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://badge.fury.io/py/cdl_convert\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/928239a22de5fd89bb7ba8702ec807d3c193e181/68747470733a2f2f62616467652e667572792e696f2f70792f63646c5f636f6e766572742e706e67\"></a><a href=\"https://travis-ci.org/shidarin/cdl_convert\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab282cce32651405550d8e7a242f126e9e0e91e7/68747470733a2f2f7472617669732d63692e6f72672f736869646172696e2f63646c5f636f6e766572742e7376673f6272616e63683d6d6173746572\"></a><a href=\"https://coveralls.io/r/shidarin/cdl_convert?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b007d379c8ca641cf072fb31eed0b5ca811e0b91/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f736869646172696e2f63646c5f636f6e766572742f62616467652e706e673f6272616e63683d6d6173746572\"></a><a href=\"https://landscape.io/github/shidarin/cdl_convert/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c9e3db5e2e603a889ef4ffa4bc858e7ff641024/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f736869646172696e2f63646c5f636f6e766572742f6d61737465722f6c616e6473636170652e706e67\"></a></p>\n<ul>\n<li><strong>Author/Maintainer:</strong> Sean Wallitsch</li>\n<li><strong>Email:</strong> <a href=\"mailto:shidarin%40alphamatte.com\">shidarin<span>@</span>alphamatte<span>.</span>com</a></li>\n<li><strong>License:</strong> MIT</li>\n<li><strong>Status:</strong> Development</li>\n<li><strong>Docs:</strong> <a href=\"http://cdl-convert.readthedocs.org/\" rel=\"nofollow\">http://cdl-convert.readthedocs.org/</a></li>\n<li><strong>GitHub:</strong> <a href=\"https://github.com/shidarin/cdl_convert\" rel=\"nofollow\">https://github.com/shidarin/cdl_convert</a></li>\n<li><strong>PyPI:</strong> <a href=\"https://pypi.python.org/pypi/cdl_convert\" rel=\"nofollow\">https://pypi.python.org/pypi/cdl_convert</a></li>\n<li><strong>Python Versions:</strong> 2.6-3.5, PyPy &amp; PyPy3</li>\n</ul>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p><tt>cdl_convert</tt> converts between common <a href=\"http://en.wikipedia.org/wiki/ASC_CDL\" rel=\"nofollow\">ASC CDL</a> formats. The <a href=\"http://www.theasc.com/\" rel=\"nofollow\">American Society of\nCinematographers</a> Color Decision List (ASC CDL, or CDL for short) is a\nschema to simplify the process of interchanging color data between\nvarious programs and facilities.</p>\n<p>The ASC has defined schemas for including the 10 basic numbers in 5\ndifferent formats:</p>\n<ul>\n<li>Avid Log Exchange (ALE)</li>\n<li>Film Log EDL Exchange (FLEx)</li>\n<li>CMX EDL</li>\n<li>XML Color Correction (cc)</li>\n<li>XML Color Correction Collection (ccc)</li>\n<li>XML Color Decision List (cdl)</li>\n</ul>\n<p>Unofficial Formats:</p>\n<ul>\n<li>OCIOCDLTransform, a <a href=\"http://www.thefoundry.co.uk/nuke/\" rel=\"nofollow\">Foundry Nuke</a> node</li>\n<li>Space separated CDL, a Rhythm &amp; Hues internal cdl format</li>\n</ul>\n<p>It is the purpose of <tt>cdl_convert</tt> to convert ASC CDL information between\nthese basic formats to further facilitate the ease of exchange of color\ndata within the Film and TV industries.</p>\n<p><tt>cdl_convert</tt> supports parsing ALE, FLEx, CC, CCC, CDL CMX EDL and RCDL.\nWe can write out CC, CCC, CDL and RCDL.</p>\n<p><strong>cdl_convert is not associated with the American Society of\nCinematographers</strong></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Most likely you\u2019ll use <tt>cdl_convert</tt> as a script, instead of a python package\nitself (indeed, even the name is formatted more like a script (with an\nunderscore) than the more common all lowercase of python modules.</p>\n<p>For usage as a python module, see the module documentation.</p>\n<div id=\"script-usage\">\n<h3>Script Usage</h3>\n<p>If you just want to convert to a <tt>.cc</tt> XML file, the only required argument\nis an input file, like so::</p>\n<pre>$ cdl_convert ./di_v001.flex\n</pre>\n<p>You can override the default <tt>.cc</tt> output, or provide multiple outputs with\nthe <tt><span class=\"pre\">-o</span></tt> flag.:</p>\n<pre>$ cdl_convert ./di_v001.flex -o cc,cdl\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p><em>New in version 0.9.2:</em></p>\n<ul>\n<li>Fixed a bug where ALE\u2019s with blank lines would not convert correctly.</li>\n<li>Fixed a bug that was preventing <tt>cdl_convert</tt> from being correctly installed in Python 2.6</li>\n<li>Fixed continuous integration testing.</li>\n<li>No longer officially supporting Python 3.2, as I\u2019ve had to remove it from our CI builds. It should still work just fine though, but we won\u2019t be running CI against it.</li>\n</ul>\n<p><em>New in version 0.9:</em></p>\n<ul>\n<li>Added ability to parse CMX EDLs</li>\n<li>Fixed a script bug where a collection format containing color decisions will not have those color decisions exported as individual color corrections.</li>\n<li>Fixed a bug where we weren\u2019t reading line endings correctly in certain situations.</li>\n<li>Added a cdl_convert.py stub file to the package root level, which will allow running of the cdl_convert script without installation. Due to relative imports in the python code, it was no longer possible to call cdl_convert/cdl_convert.py directly.</li>\n<li>The script, when run directly from cdl_convert.py, will now write errors to stderror correctly, and exit with a status of 1.</li>\n</ul>\n<p><em>New in version 0.8:</em></p>\n<ul>\n<li>Added <tt><span class=\"pre\">--single</span></tt> flag. When provided with an output collection format, each color correction in the input will be exported to it\u2019s own collection.</li>\n<li>Giving a ColorCorrection a non-duplicate ID now works unless the <tt><span class=\"pre\">--halt</span></tt> flag is given. This means that incoming collections that contain duplicate IDs will not fail out.</li>\n</ul>\n<p><em>New in version 0.7.1:</em></p>\n<ul>\n<li>Fixed bug where ALE\u2019s without \u2018Scan Filename\u2019 fields could not parse correctly.</li>\n</ul>\n<p><em>New in version 0.7:</em></p>\n<p>The biggest change in 0.7 is the addition of collection format support.\n<tt>.ccc</tt>, Color Correction Collections, can now be parsed and written. <tt>.cdl</tt>,\nColor Decision Lists, can now be parsed and written. <tt>.ale</tt>\nand <tt>.flex</tt> files now return a collection.</p>\n<ul>\n<li><dl>\n<dt>New script flags:</dt>\n<dd><ul>\n<li>Adds <tt><span class=\"pre\">--check</span></tt> flag to script, which checks all parsed <cite>ColorCorrects</cite> for sane values, and prints warnings to shell</li>\n<li>Adds <tt><span class=\"pre\">-d</span></tt>, <tt><span class=\"pre\">--destination</span></tt> flag to the script, which allows user to specify the output directory converted files will be written to.</li>\n<li>Adds <tt><span class=\"pre\">--no-ouput</span></tt> flag to the script, which goes through the entire conversion process but doesn\u2019t actually write anything to disk. Useful for troubleshooting, especially when combined with <tt><span class=\"pre\">--check</span></tt></li>\n<li>Adds <tt><span class=\"pre\">--halt</span></tt> flag to the script, which halts on errors that can be resolved safely (such as negative slope or power values)</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Renames <cite>ColorCollectionBase</cite> to <cite>ColorCollection</cite> , since it will be used directly by both <tt>ccc</tt> and <tt>cdl</tt>.</li>\n<li>Adds <tt>parse_ccc</tt> which returns a <cite>ColorCollection</cite> .</li>\n<li>Adds <tt>write_ccc</tt> which writes a <cite>ColorCollection</cite> as a <tt>ccc</tt> file.</li>\n<li>Adds <tt>parse_cdl</tt> which returns a <cite>ColorCollection</cite> .</li>\n<li>Adds <tt>write_cdl</tt> which returns a <cite>ColorCollection</cite> as a <tt>cdl</tt> file.</li>\n<li><cite>ColorCollection</cite> is now a fully functional container class, with many attributes and methods.</li>\n<li>Added <cite>ColorDecision</cite> , which stores either a <cite>ColorCorrection</cite> or <cite>ColorCorrectionRef</cite> , and an optional <cite>MediaRef</cite></li>\n<li>Added <cite>ColorCorrectionRef</cite> , which stores a reference to a <cite>ColorCorrection</cite></li>\n<li>Added <tt>parent</tt> attribute to <cite>ColorCorrection</cite> .</li>\n<li>Calling <tt>sop_node</tt> or <tt>sat_node</tt> on a <cite>ColorCorrection</cite> before attempting to set a SOP or Sat power now works.</li>\n<li><cite>ColorCorrection</cite> <tt>cdl_file</tt> init argument renamed to <tt>input_file</tt>, which is now optional and able to be set after init.</li>\n<li><tt>parse_cc</tt> and <tt>parse_rnh_cdl</tt> now only yield a single <cite>ColorCorrection</cite> , not a single member list.</li>\n<li>Added dev-requirements.txt (contains <tt>mock</tt>)</li>\n<li>All <tt>determine_dest</tt> methods now take a second <tt>directory</tt> argument, which determines the output directory.</li>\n<li>Adds <tt>sanity_check</tt> function which prints values which might be unusual to stdout.</li>\n<li><tt>parse_cdl</tt> and <tt>write_cdl</tt> renamed to <tt>parse_rnh_cdl</tt> and <tt>write_rnh_cdl</tt> respectively.</li>\n<li><dl>\n<dt><tt>member_reset</tt> methods:</dt>\n<dd><ul>\n<li><cite>ColorCorrection</cite> now has a <tt>reset_members</tt> method, which resets the class level member\u2019s dictionary.</li>\n<li><cite>MediaRef</cite> also has a <tt>reset_members</tt> method, as does <cite>ColorCollection</cite></li>\n<li><tt>reset_all</tt> function calls all of the above <tt>reset_members</tt> methods at once.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Renamed <tt>cdl_file</tt> argument:</dt>\n<dd><ul>\n<li><tt>parse_cc</tt> <tt>cdl_file</tt> arg renamed to <tt>input_file</tt> and now accepts a either a raw string or an <tt>ElementTree</tt> <tt>Element</tt> as <tt>input_file</tt>.</li>\n<li><tt>parse_rnh_cdl</tt> <tt>cdl_file</tt> arg renamed to <tt>input_file</tt>.</li>\n<li><tt>parse_ale</tt> <tt>edl_file</tt> arg renamed to <tt>input_file</tt>.</li>\n<li><tt>parse_flex</tt> <tt>edl_file</tt> arg renamed to <tt>input_file</tt>.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Python Structure Refactoring</dt>\n<dd><ul>\n<li>Moved <tt>HALT_ON_ERROR</tt> into the <tt>config</tt> module, which should now be referenced and set by importing the entire <tt>config</tt> module, and referencing or setting <tt>config.HALT_ON_ERROR</tt></li>\n<li>Script functionality remains in <tt>cdl_convert.cdl_convert</tt>, but everything else has been moved out.</li>\n<li><cite>AscColorSpaceBase</cite> , <cite>AscDescBase</cite> , <cite>AscXMLBase</cite> and <cite>ColorNodeBase</cite> now live under <tt>cdl_convert.base</tt></li>\n<li><cite>ColorCollection</cite> now lives in <tt>cdl_convert.collection</tt></li>\n<li><cite>ColorCorrection</cite> , <cite>SatNode</cite> and <cite>SopNode</cite> now live under <tt>cdl_convert.correction</tt></li>\n<li><cite>ColorDecision</cite> , <cite>ColorCorrectionRef</cite> and <cite>MediaRef</cite> now live under <tt>cdl_convert.decision</tt></li>\n<li>All parse functions now live under <tt>cdl_convert.parse</tt></li>\n<li>All write functions now live under <tt>cdl_convert.write</tt></li>\n<li><tt>sanity_check</tt> now live under <tt>cdl_convert.utils</tt></li>\n<li><tt>reset_all</tt> now lives under the main module</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installing is as simple as using pip::</p>\n<pre>$ pip install cdl_convert\n</pre>\n<p>If you don\u2019t want to bother with a pip style install, you can alternatively\ngrab the entire <a href=\"http://github.com/shidarin/cdl_convert/blob/master/cdl_convert/cdl_convert.py\" rel=\"nofollow\">cdl_convert</a> directory, then set up a shortcut to call\n<tt>cdl_convert/cdl_convert.py</tt></p>\n</div>\n<div id=\"github-bug-reporting-and-support\">\n<h2>GitHub, Bug Reporting and Support</h2>\n<p>At <tt>cdl_convert</tt>\u2019s <a href=\"http://github.com/shidarin/cdl_convert\" rel=\"nofollow\">GitHub</a> page you can browse the code and the history of\nthe project.</p>\n<p>Builds can be downloaded from the GitHub page or the <a href=\"http://pypi.python.org/pypi/cdl_convert\" rel=\"nofollow\">PyPI</a> repository entry.</p>\n<p>The <a href=\"http://github.com/shidarin/cdl_convert/issues\" rel=\"nofollow\">issues</a> page on GitHub is the best place to report bugs or request support,\nand while <tt>cdl_convert</tt> is distributed with no warranty of any kind, issues\nwill be read and helped if able.</p>\n</div>\n<div id=\"frequently-asked-questions\">\n<h2>Frequently Asked Questions</h2>\n<ul>\n<li><dl>\n<dt>What versions of Python does <tt>cdl_convert</tt> support?</dt>\n<dd><tt>cdl_convert</tt> works in Python 2.6 through 3.4 and PyPy. A full test suite\nruns continuous integration through <a href=\"http://travis-ci.org/shidarin/cdl_convert\" rel=\"nofollow\">Travis-ci.org</a>, coverage through\n<a href=\"http://coveralls.io/r/shidarin/cdl_convert\" rel=\"nofollow\">coveralls.io</a>, and code quality checked with <a href=\"http://landscape.io/\" rel=\"nofollow\">landscape.io</a>. <strong>Code is</strong>\npep 8 <strong>compliant</strong>, with docstrings following <a href=\"http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Comments\" rel=\"nofollow\">google code</a> docstring\nstandards.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Why don\u2019t you support format <em>X</em>?</dt>\n<dd>I either haven\u2019t had time to build a parser for the format yet, or I might\neven be unaware it exists. Perhaps you should drop by the <a href=\"http://github.com/shidarin/cdl_convert/issues\" rel=\"nofollow\">issues</a> page\nand create a request for the format? If creating a request for a format it\nhelps immensely to have a sample of that format.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Why the underscore?</dt>\n<dd><tt>cdl_convert</tt> started as a simple script to convert from one format to\nanother. As such, it wasn\u2019t named with the standards that one would usually\nuse for a python module. By the time the project became big enough, was on\nPyPI, etc, it was too spread out on the web, in too many places to make\nchanging easy. In the end, I opted to keep it. At some point,\n<tt>cdl_convert</tt> might migrate into a larger, more generic film &amp; tv\npython module, which will be named properly.</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<div id=\"samples\">\n<h3>Samples</h3>\n<p>Please, <em>please</em>, <strong>please</strong> submit samples of the following formats:</p>\n<ul>\n<li>FLEx</li>\n<li>ALE</li>\n<li>CMX</li>\n<li>CCC</li>\n</ul>\n<p>These are complex formats, and seeing real world samples helps write tests\nthat ensure correct parsing of real world EDLs and CDLs. If you don\u2019t even see\na format of CDL listed that you know exists, open an issue at the github\n<a href=\"http://github.com/shidarin/cdl_convert/issues\" rel=\"nofollow\">issues</a> page asking for parse/write support for the format, and include a\nsample.</p>\n</div>\n<div id=\"squashing-bugs\">\n<h3>Squashing Bugs</h3>\n<p>Take a look at the <a href=\"http://github.com/shidarin/cdl_convert/issues\" rel=\"nofollow\">issues</a> page and if you see something that you think you\ncan bang out, leave a comment saying you\u2019re going to take it on. While many\nissues are already assigned to the principal authors, just because it\u2019s assigned\ndoesn\u2019t mean any work has begun.</p>\n</div>\n<div id=\"submitting-code\">\n<h3>Submitting Code</h3>\n<p>Before generating a pull request, make sure to run the test suite::</p>\n<pre>$ python setup.py test\n</pre>\n<p>If the tests fail, note which tests are failing, how they would have been\naffected by your code. Always assume you broke something rather than that the\ntests are \u2018wrong.\u2019 If you know you didn\u2019t break something, and the tests are\nsimply reporting out of date results based on your changes, <em>change the tests.</em></p>\n<p>If your code fails the tests (<a href=\"http://travis-ci.org/shidarin/cdl_convert\" rel=\"nofollow\">Travis-ci.org</a> checks all pull requests when\nyou create them) it will be <strong>rejected</strong>. If the code style doesn\u2019t follow\nPEP-8, it\u2019s not going to be a high priority for integration.</p>\n<p>When submitting, you\u2019ll be asked to waive copyright to your submitted code to\nthe listed authors. This is so we can keep a tight handle on the code and change\nthe license for future releases if needed.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<blockquote>\n<p>The MIT License (MIT)</p>\n<div>\n<div>cdl_convert</div>\n<div>Copyright (c) 2015 Sean Wallitsch</div>\n<div><a href=\"http://github.com/shidarin/cdl_convert/\" rel=\"nofollow\">http://github.com/shidarin/cdl_convert/</a></div>\n</div>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201cSoftware\u201d), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2055864, "releases": {"0.4.2": [{"comment_text": "", "digests": {"md5": "15c638b11a40b045aba2c000aba0d422", "sha256": "527d26ab65759df0ebf097896958e6158ee6ff17b196039ee71dd8c5dba40b97"}, "downloads": -1, "filename": "cdl_convert-0.4.2.tar.gz", "has_sig": false, "md5_digest": "15c638b11a40b045aba2c000aba0d422", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13613, "upload_time": "2014-04-25T06:46:55", "upload_time_iso_8601": "2014-04-25T06:46:55.370967Z", "url": "https://files.pythonhosted.org/packages/4e/22/4dd4fb46ff1eaa6321a167a416887127180f9e375c3b9e8af7d3dc6fb903/cdl_convert-0.4.2.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "634c7c5a7012bdaf94071031b2e38384", "sha256": "d8a7a0aa32f4ca6ccd4acea37858bdebe31bab9dbbd03813e7b7f964d3ee2e70"}, "downloads": -1, "filename": "cdl_convert-0.5.tar.gz", "has_sig": false, "md5_digest": "634c7c5a7012bdaf94071031b2e38384", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13953, "upload_time": "2014-04-25T07:20:42", "upload_time_iso_8601": "2014-04-25T07:20:42.950893Z", "url": "https://files.pythonhosted.org/packages/b0/17/2cb680fdbb4598b3177f4f3752bb49a89632de9cf69c8d53911fd3c5125b/cdl_convert-0.5.tar.gz", "yanked": false}], "0.5.post1": [{"comment_text": "", "digests": {"md5": "e88f9f1461870c35f5cf53739e9e597f", "sha256": "2d2d6c79f3a447e3380483b79b8f986fbc9aaa2a5d9cf42f7e0ea2e57b7a5572"}, "downloads": -1, "filename": "cdl_convert-0.5.post1.tar.gz", "has_sig": false, "md5_digest": "e88f9f1461870c35f5cf53739e9e597f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13978, "upload_time": "2014-04-25T07:30:06", "upload_time_iso_8601": "2014-04-25T07:30:06.057483Z", "url": "https://files.pythonhosted.org/packages/9c/ee/37e438bf25977a128f4d812055640520d192404582c602d5567b6da9dc01/cdl_convert-0.5.post1.tar.gz", "yanked": false}], "0.5.post2": [{"comment_text": "", "digests": {"md5": "7bb0016d9fe06ca3d17d0868b0c30cdd", "sha256": "3f873282c9df0ff5544ecc158d3f3259834677b616bb1ab743e9537011c56654"}, "downloads": -1, "filename": "cdl_convert-0.5.post2.tar.gz", "has_sig": false, "md5_digest": "7bb0016d9fe06ca3d17d0868b0c30cdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13983, "upload_time": "2014-04-25T07:44:38", "upload_time_iso_8601": "2014-04-25T07:44:38.181479Z", "url": "https://files.pythonhosted.org/packages/c3/55/5c61619bc0f999be8dcb096399c6327d33a6e66e92bc098e10247043e0a3/cdl_convert-0.5.post2.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "a6d492b89ee701d575723c02ad232409", "sha256": "7812568b41df0c34e0d542fdc910c7f68a32318af3ac0538140e0ec81bb98fd6"}, "downloads": -1, "filename": "cdl_convert-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a6d492b89ee701d575723c02ad232409", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 27970, "upload_time": "2014-05-04T06:57:18", "upload_time_iso_8601": "2014-05-04T06:57:18.919750Z", "url": "https://files.pythonhosted.org/packages/c2/3a/60143ff6d569242beb4edd0217549b1cd2f706bda534e8120d9b54862232/cdl_convert-0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7aa9f577a62ad7663b9576c4bcc0519d", "sha256": "1253e514c73b9028a08aec09b180f0ae0a2d60be22a8b54179e52e985741cae4"}, "downloads": -1, "filename": "cdl_convert-0.6.tar.gz", "has_sig": false, "md5_digest": "7aa9f577a62ad7663b9576c4bcc0519d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137454, "upload_time": "2014-05-04T06:57:15", "upload_time_iso_8601": "2014-05-04T06:57:15.776568Z", "url": "https://files.pythonhosted.org/packages/68/0d/69e8dcc706d3707dd89e143123ef3f85cd63ffff4a9226c01909bdee4828/cdl_convert-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "1d6e99a2a597c8df1c0f25b85150c13c", "sha256": "a337177244ba13799866b3bfb4cc4a86a7112fb5ad901017fb014c89d79a1827"}, "downloads": -1, "filename": "cdl_convert-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1d6e99a2a597c8df1c0f25b85150c13c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 30031, "upload_time": "2014-05-05T06:56:55", "upload_time_iso_8601": "2014-05-05T06:56:55.837802Z", "url": "https://files.pythonhosted.org/packages/0b/57/75e443c173b4ab91180f20d06504b9626b8e74e8b6722a02e4862b0cb2fa/cdl_convert-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8d35727c65e0823d4b1cb88a0f34dee", "sha256": "918786cd0a2a2ed4539224a8ea4d82dcae0d972139bbe27739cf1ef3dea50d23"}, "downloads": -1, "filename": "cdl_convert-0.6.1.tar.gz", "has_sig": false, "md5_digest": "e8d35727c65e0823d4b1cb88a0f34dee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 141432, "upload_time": "2014-05-05T06:56:52", "upload_time_iso_8601": "2014-05-05T06:56:52.281267Z", "url": "https://files.pythonhosted.org/packages/99/e5/8cb12c889cd1898f49d9f8a6e0178010ffd9f9d284e952e25ef41ea6855f/cdl_convert-0.6.1.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "7a72665dc1077ef81b2d5eeca1e30c79", "sha256": "713fe1caf7838cfcc5baa402a07edaf92d6cd915a42fdec48b06ab764d0f7c94"}, "downloads": -1, "filename": "cdl_convert-0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7a72665dc1077ef81b2d5eeca1e30c79", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 57625, "upload_time": "2014-06-17T03:57:51", "upload_time_iso_8601": "2014-06-17T03:57:51.337977Z", "url": "https://files.pythonhosted.org/packages/eb/f1/edc14335ad1ab4614f7654f6364c5db913979fc552c2e16fad328b0bf1bf/cdl_convert-0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb706edfab503095483771158bb9dc94", "sha256": "e81ff96d6f59314e14b9b955fe3d7b5fe3fa3051d0067f37f123f9370db73246"}, "downloads": -1, "filename": "cdl_convert-0.7.tar.gz", "has_sig": false, "md5_digest": "bb706edfab503095483771158bb9dc94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 178110, "upload_time": "2014-06-17T03:57:47", "upload_time_iso_8601": "2014-06-17T03:57:47.556036Z", "url": "https://files.pythonhosted.org/packages/86/ed/339df2b4813329aad30c7e2f80099661df28ba3eb6f0d8424a2dc8c45f99/cdl_convert-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "32183c4edc4f943b9db9cb43f94ad513", "sha256": "a4dfe2d446541acb4a9e5baf60764255ed9785cf1d5961f5ec00e0bb497d60d6"}, "downloads": -1, "filename": "cdl_convert-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32183c4edc4f943b9db9cb43f94ad513", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 57783, "upload_time": "2015-01-29T03:57:54", "upload_time_iso_8601": "2015-01-29T03:57:54.828357Z", "url": "https://files.pythonhosted.org/packages/7d/1e/01282d71acc429a234ab6c6748763cd1351a79e17c5aa2c0c835427f6b9e/cdl_convert-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64d9099d0ae8f55ab51103e964639bea", "sha256": "d948f982ed3473410b369a4d7a4ae20f5227360ce4b8c10f25b6b4975597ff0a"}, "downloads": -1, "filename": "cdl_convert-0.7.1.tar.gz", "has_sig": false, "md5_digest": "64d9099d0ae8f55ab51103e964639bea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 178682, "upload_time": "2015-01-29T03:57:51", "upload_time_iso_8601": "2015-01-29T03:57:51.438238Z", "url": "https://files.pythonhosted.org/packages/c8/fe/9b494312b42f9de6587bc46854d7736682a84c20fb3150e81708594351ea/cdl_convert-0.7.1.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "b80d3021d732c8761ee30a02e45e0dcc", "sha256": "cbedb1a919b5287bd5c70093e0673ca2a10edb379bbf5c54ed0748d70910b46f"}, "downloads": -1, "filename": "cdl_convert-0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b80d3021d732c8761ee30a02e45e0dcc", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 58369, "upload_time": "2015-02-17T05:59:43", "upload_time_iso_8601": "2015-02-17T05:59:43.831883Z", "url": "https://files.pythonhosted.org/packages/af/dc/3a18ebd0e8338fe89ee9780503ce788ad10bb5276016ee7361c9dd25d9aa/cdl_convert-0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9155107df8219454203ace8f08f23710", "sha256": "bb15ceee44d7d1ba7974ec416cdc7b40463e2e58ebfbae2ce5d5ecf484782385"}, "downloads": -1, "filename": "cdl_convert-0.8.tar.gz", "has_sig": false, "md5_digest": "9155107df8219454203ace8f08f23710", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1097525, "upload_time": "2015-02-17T05:59:41", "upload_time_iso_8601": "2015-02-17T05:59:41.766070Z", "url": "https://files.pythonhosted.org/packages/b0/ad/1f861b317d1d854c4b720234c63fdc74dd42f14a97029717bb515e5db340/cdl_convert-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "983d2a80c73a20186783dd7c8073e1af", "sha256": "b0ccf0e3f894793ed072a44439f86705dccfd2247db9ecfa6dda5abee6e539fc"}, "downloads": -1, "filename": "cdl_convert-0.9.tar.gz", "has_sig": false, "md5_digest": "983d2a80c73a20186783dd7c8073e1af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42767, "upload_time": "2016-02-11T04:57:35", "upload_time_iso_8601": "2016-02-11T04:57:35.373934Z", "url": "https://files.pythonhosted.org/packages/35/2e/ba1338fbf68fabf3317257ed83ea39f53f409881a14028e72b1df8dfaca0/cdl_convert-0.9.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "54bb40d6efbd0b9f880fa6c19ce42373", "sha256": "9100df6347f85d34ee2b5d99c65a1373b94c0bbfec80c0abaeab2510524b88fe"}, "downloads": -1, "filename": "cdl_convert-0.9.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "54bb40d6efbd0b9f880fa6c19ce42373", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 59572, "upload_time": "2016-04-10T06:29:30", "upload_time_iso_8601": "2016-04-10T06:29:30.960826Z", "url": "https://files.pythonhosted.org/packages/ec/05/44f34327748d05bb25946dd0146804e9060ad26a2ad805a3e7f33bd205aa/cdl_convert-0.9.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42e4de55bd95782da5ff2ce137d0724f", "sha256": "374f545cdf5f880066656be02e1f2d2ef195375facf0098f61356885d3ff57e8"}, "downloads": -1, "filename": "cdl_convert-0.9.2.tar.gz", "has_sig": false, "md5_digest": "42e4de55bd95782da5ff2ce137d0724f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 183947, "upload_time": "2016-04-10T06:29:23", "upload_time_iso_8601": "2016-04-10T06:29:23.193244Z", "url": "https://files.pythonhosted.org/packages/72/57/7a0d5f7684b12250cb9d8ea9d0934d9049aa93e98bf13d419d2a95906623/cdl_convert-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54bb40d6efbd0b9f880fa6c19ce42373", "sha256": "9100df6347f85d34ee2b5d99c65a1373b94c0bbfec80c0abaeab2510524b88fe"}, "downloads": -1, "filename": "cdl_convert-0.9.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "54bb40d6efbd0b9f880fa6c19ce42373", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 59572, "upload_time": "2016-04-10T06:29:30", "upload_time_iso_8601": "2016-04-10T06:29:30.960826Z", "url": "https://files.pythonhosted.org/packages/ec/05/44f34327748d05bb25946dd0146804e9060ad26a2ad805a3e7f33bd205aa/cdl_convert-0.9.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42e4de55bd95782da5ff2ce137d0724f", "sha256": "374f545cdf5f880066656be02e1f2d2ef195375facf0098f61356885d3ff57e8"}, "downloads": -1, "filename": "cdl_convert-0.9.2.tar.gz", "has_sig": false, "md5_digest": "42e4de55bd95782da5ff2ce137d0724f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 183947, "upload_time": "2016-04-10T06:29:23", "upload_time_iso_8601": "2016-04-10T06:29:23.193244Z", "url": "https://files.pythonhosted.org/packages/72/57/7a0d5f7684b12250cb9d8ea9d0934d9049aa93e98bf13d419d2a95906623/cdl_convert-0.9.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:56 2020"}