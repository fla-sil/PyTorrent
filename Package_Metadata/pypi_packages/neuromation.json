{"info": {"author": "Neuromation Team", "author_email": "pypi@neuromation.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "License :: Other/Proprietary License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development", "Topic :: Utilities"], "description": "[![codecov](https://codecov.io/gh/neuromation/platform-api-clients/branch/master/graph/badge.svg?token=FwM6ZV3gDj)](https://codecov.io/gh/neuromation/platform-api-clients)\n\n# Table of Contents\n* [Preface](#Preface)\n* [neuro](#neuro)\n\t* [neuro admin](#neuro-admin)\n\t\t* [neuro admin get-clusters](#neuro-admin-get-clusters)\n\t\t* [neuro admin generate-cluster-config](#neuro-admin-generate-cluster-config)\n\t\t* [neuro admin add-cluster](#neuro-admin-add-cluster)\n\t\t* [neuro admin get-cluster-users](#neuro-admin-get-cluster-users)\n\t\t* [neuro admin add-cluster-user](#neuro-admin-add-cluster-user)\n\t\t* [neuro admin remove-cluster-user](#neuro-admin-remove-cluster-user)\n\t\t* [neuro admin set-user-quota](#neuro-admin-set-user-quota)\n\t\t* [neuro admin add-user-quota](#neuro-admin-add-user-quota)\n\t* [neuro job](#neuro-job)\n\t\t* [neuro job run](#neuro-job-run)\n\t\t* [neuro job submit](#neuro-job-submit)\n\t\t* [neuro job ls](#neuro-job-ls)\n\t\t* [neuro job status](#neuro-job-status)\n\t\t* [neuro job tags](#neuro-job-tags)\n\t\t* [neuro job exec](#neuro-job-exec)\n\t\t* [neuro job port-forward](#neuro-job-port-forward)\n\t\t* [neuro job logs](#neuro-job-logs)\n\t\t* [neuro job kill](#neuro-job-kill)\n\t\t* [neuro job top](#neuro-job-top)\n\t\t* [neuro job save](#neuro-job-save)\n\t\t* [neuro job browse](#neuro-job-browse)\n\t* [neuro project](#neuro-project)\n\t\t* [neuro project init](#neuro-project-init)\n\t* [neuro storage](#neuro-storage)\n\t\t* [neuro storage cp](#neuro-storage-cp)\n\t\t* [neuro storage ls](#neuro-storage-ls)\n\t\t* [neuro storage glob](#neuro-storage-glob)\n\t\t* [neuro storage rm](#neuro-storage-rm)\n\t\t* [neuro storage mkdir](#neuro-storage-mkdir)\n\t\t* [neuro storage mv](#neuro-storage-mv)\n\t\t* [neuro storage tree](#neuro-storage-tree)\n\t\t* [neuro storage load](#neuro-storage-load)\n\t* [neuro image](#neuro-image)\n\t\t* [neuro image ls](#neuro-image-ls)\n\t\t* [neuro image push](#neuro-image-push)\n\t\t* [neuro image pull](#neuro-image-pull)\n\t\t* [neuro image tags](#neuro-image-tags)\n\t* [neuro config](#neuro-config)\n\t\t* [neuro config login](#neuro-config-login)\n\t\t* [neuro config login-with-token](#neuro-config-login-with-token)\n\t\t* [neuro config login-headless](#neuro-config-login-headless)\n\t\t* [neuro config show](#neuro-config-show)\n\t\t* [neuro config show-token](#neuro-config-show-token)\n\t\t* [neuro config show-quota](#neuro-config-show-quota)\n\t\t* [neuro config aliases](#neuro-config-aliases)\n\t\t* [neuro config get-clusters](#neuro-config-get-clusters)\n\t\t* [neuro config switch-cluster](#neuro-config-switch-cluster)\n\t\t* [neuro config docker](#neuro-config-docker)\n\t\t* [neuro config logout](#neuro-config-logout)\n\t* [neuro completion](#neuro-completion)\n\t\t* [neuro completion generate](#neuro-completion-generate)\n\t\t* [neuro completion patch](#neuro-completion-patch)\n\t* [neuro acl](#neuro-acl)\n\t\t* [neuro acl grant](#neuro-acl-grant)\n\t\t* [neuro acl revoke](#neuro-acl-revoke)\n\t\t* [neuro acl list](#neuro-acl-list)\n\t* [neuro blob](#neuro-blob)\n\t\t* [neuro blob cp](#neuro-blob-cp)\n\t\t* [neuro blob ls](#neuro-blob-ls)\n\t\t* [neuro blob glob](#neuro-blob-glob)\n\t* [neuro help](#neuro-help)\n\t* [neuro run](#neuro-run)\n\t* [neuro submit](#neuro-submit)\n\t* [neuro ps](#neuro-ps)\n\t* [neuro status](#neuro-status)\n\t* [neuro exec](#neuro-exec)\n\t* [neuro port-forward](#neuro-port-forward)\n\t* [neuro logs](#neuro-logs)\n\t* [neuro kill](#neuro-kill)\n\t* [neuro top](#neuro-top)\n\t* [neuro save](#neuro-save)\n\t* [neuro login](#neuro-login)\n\t* [neuro logout](#neuro-logout)\n\t* [neuro cp](#neuro-cp)\n\t* [neuro ls](#neuro-ls)\n\t* [neuro rm](#neuro-rm)\n\t* [neuro mkdir](#neuro-mkdir)\n\t* [neuro mv](#neuro-mv)\n\t* [neuro images](#neuro-images)\n\t* [neuro push](#neuro-push)\n\t* [neuro pull](#neuro-pull)\n\t* [neuro share](#neuro-share)\n* [Api](#Api)\n* [Contributing](#Contributing)\n\n\n# Preface\n\nWelcome to Neuromation API Python client.\nPackage ship command line tool called [_neuro_](#neuro). With [_neuro_](#neuro) you can:\n* [Execute and debug jobs](#neuro-job)\n* [Manipulate Data](#neuro-storage)\n* Make some fun\n\n# neuro\n\n**Usage:**\n\n```bash\nneuro [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-v, --verbose_|Give more output. Option is additive, and can be used up to 2 times.|\n|_\\-q, --quiet_|Give less output. Option is additive, and can be used up to 2 times.|\n|_\\--neuromation-config PATH_|Path to config directory.|\n|_\\--show-traceback_|Show python traceback on error, useful for debugging the tool.|\n|_--color \\[yes &#124; no &#124; auto]_|Color mode.|\n|_\\--disable-pypi-version-check_|Don't periodically check PyPI to determine whether a new version of Neuro Platform CLI is available for download.|\n|_\\--network-timeout FLOAT_|Network read timeout, seconds.|\n|_--version_|Show the version and exit.|\n|_--trace_|Trace sent HTTP requests and received replies to stderr.|\n|_\\--hide-token / --no-hide-token_|Prevent user's token sent in HTTP headers from being printed out to stderr during HTTP tracing. Can be used only together with option '--trace'. On by default.|\n|_\\--skip-stats / --no-skip-stats_|Skip sending usage statistics to Neuro servers. Note: the statistics has no sensitive data, e.g. file, job, image, or user names, executed command lines, environment variables, etc.|\n|_--help_|Show this message and exit.|\n\n\n**Command Groups:**\n\n|Usage|Description|\n|---|---|\n| _[neuro admin](#neuro-admin)_| Cluster administration commands |\n| _[neuro job](#neuro-job)_| Job operations |\n| _[neuro project](#neuro-project)_| Project operations |\n| _[neuro storage](#neuro-storage)_| Storage operations |\n| _[neuro image](#neuro-image)_| Container image operations |\n| _[neuro config](#neuro-config)_| Client configuration |\n| _[neuro completion](#neuro-completion)_| Output shell completion code |\n| _[neuro acl](#neuro-acl)_| Access Control List management |\n| _[neuro blob](#neuro-blob)_| Blob storage operations |\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro help](#neuro-help)_| Get help on a command |\n| _[neuro run](#neuro-run)_| Run a job with predefined resources configuration |\n| _[neuro submit](#neuro-submit)_| Submit an image to run on the cluster |\n| _[neuro ps](#neuro-ps)_| List all jobs |\n| _[neuro status](#neuro-status)_| Display status of a job |\n| _[neuro exec](#neuro-exec)_| Execute command in a running job |\n| _[neuro port-forward](#neuro-port-forward)_| Forward port\\(s) of a running job to local port\\(s) |\n| _[neuro logs](#neuro-logs)_| Print the logs for a container |\n| _[neuro kill](#neuro-kill)_| Kill job\\(s) |\n| _[neuro top](#neuro-top)_| Display GPU/CPU/Memory usage |\n| _[neuro save](#neuro-save)_| Save job's state to an image |\n| _[neuro login](#neuro-login)_| Log into Neuro Platform |\n| _[neuro logout](#neuro-logout)_| Log out |\n| _[neuro cp](#neuro-cp)_| Copy files and directories |\n| _[neuro ls](#neuro-ls)_| List directory contents |\n| _[neuro rm](#neuro-rm)_| Remove files or directories |\n| _[neuro mkdir](#neuro-mkdir)_| Make directories |\n| _[neuro mv](#neuro-mv)_| Move or rename files and directories |\n| _[neuro images](#neuro-images)_| List images |\n| _[neuro push](#neuro-push)_| Push an image to platform registry |\n| _[neuro pull](#neuro-pull)_| Pull an image from platform registry |\n| _[neuro share](#neuro-share)_| Shares resource with another user |\n\n\n\n\n## neuro admin\n\nCluster administration commands.\n\n**Usage:**\n\n```bash\nneuro admin [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro admin get-clusters](#neuro-admin-get-clusters)_| Print the list of available clusters |\n| _[neuro admin generate\\-cluster-config](#neuro-admin-generate-cluster-config)_| Create a cluster configuration file |\n| _[neuro admin add-cluster](#neuro-admin-add-cluster)_| Create a new cluster and start its provisioning |\n| _[neuro admin get\\-cluster-users](#neuro-admin-get-cluster-users)_| Print the list of all users in the cluster with their assigned role |\n| _[neuro admin add\\-cluster-user](#neuro-admin-add-cluster-user)_| Add user access to specified cluster |\n| _[neuro admin remove\\-cluster-user](#neuro-admin-remove-cluster-user)_| Remove user access from the cluster |\n| _[neuro admin set\\-user-quota](#neuro-admin-set-user-quota)_| Set user quota to given values |\n| _[neuro admin add\\-user-quota](#neuro-admin-add-user-quota)_| Add given values to user quota |\n\n\n\n\n### neuro admin get-clusters\n\nPrint the list of available clusters.\n\n**Usage:**\n\n```bash\nneuro admin get-clusters [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro admin generate-cluster-config\n\nCreate a cluster configuration file.\n\n**Usage:**\n\n```bash\nneuro admin generate-cluster-config [OPTIONS] [CONFIG]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--type \\[aws &#124; gcp]_||\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro admin add-cluster\n\nCreate a new cluster and start its provisioning.\n\n**Usage:**\n\n```bash\nneuro admin add-cluster [OPTIONS] CLUSTER_NAME CONFIG\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro admin get-cluster-users\n\nPrint the list of all users in the cluster with their assigned role.\n\n**Usage:**\n\n```bash\nneuro admin get-cluster-users [OPTIONS] [CLUSTER_NAME]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro admin add-cluster-user\n\nAdd user access to specified cluster.<br/><br/>The command supports one of 3 user roles: admin, manager or user.\n\n**Usage:**\n\n```bash\nneuro admin add-cluster-user [OPTIONS] CLUSTER_NAME USER_NAME [ROLE]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro admin remove-cluster-user\n\nRemove user access from the cluster.\n\n**Usage:**\n\n```bash\nneuro admin remove-cluster-user [OPTIONS] CLUSTER_NAME USER_NAME\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro admin set-user-quota\n\nSet user quota to given values\n\n**Usage:**\n\n```bash\nneuro admin set-user-quota [OPTIONS] CLUSTER_NAME USER_NAME\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-g, --gpu AMOUNT_|GPU quota value in hours \\(h) or minutes \\(m).|\n|_\\-n, --non-gpu AMOUNT_|Non-GPU quota value in hours \\(h) or minutes \\(m).|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro admin add-user-quota\n\nAdd given values to user quota\n\n**Usage:**\n\n```bash\nneuro admin add-user-quota [OPTIONS] CLUSTER_NAME USER_NAME\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-g, --gpu AMOUNT_|Additional GPU quota value in hours \\(h) or minutes \\(m).|\n|_\\-n, --non-gpu AMOUNT_|Additional non-GPU quota value in hours \\(h) or minutes \\(m).|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro job\n\nJob operations.\n\n**Usage:**\n\n```bash\nneuro job [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro job run](#neuro-job-run)_| Run a job with predefined resources configuration |\n| _[neuro job submit](#neuro-job-submit)_| Submit an image to run on the cluster |\n| _[neuro job ls](#neuro-job-ls)_| List all jobs |\n| _[neuro job status](#neuro-job-status)_| Display status of a job |\n| _[neuro job tags](#neuro-job-tags)_| List all tags submitted by the user |\n| _[neuro job exec](#neuro-job-exec)_| Execute command in a running job |\n| _[neuro job port-forward](#neuro-job-port-forward)_| Forward port\\(s) of a running job to local port\\(s) |\n| _[neuro job logs](#neuro-job-logs)_| Print the logs for a container |\n| _[neuro job kill](#neuro-job-kill)_| Kill job\\(s) |\n| _[neuro job top](#neuro-job-top)_| Display GPU/CPU/Memory usage |\n| _[neuro job save](#neuro-job-save)_| Save job's state to an image |\n| _[neuro job browse](#neuro-job-browse)_| Opens a job's URL in a web browser |\n\n\n\n\n### neuro job run\n\nRun a job with predefined resources configuration.<br/><br/>IMAGE container image name.<br/><br/>CMD list will be passed as commands to model container.<br/>\n\n**Usage:**\n\n```bash\nneuro job run [OPTIONS] IMAGE [CMD]...\n```\n\n**Examples:**\n\n```bash\n\n# Starts a container pytorch:latest on a machine with smaller GPU resources\n# (see exact values in `neuro config show`) and with two volumes mounted:\n#   storage://<home-directory>   --> /var/storage/home (in read-write mode),\n#   storage://neuromation/public --> /var/storage/neuromation (in read-only mode).\nneuro run --preset=gpu-small --volume=HOME pytorch:latest\n\n# Starts a container using the custom image my-ubuntu:latest stored in neuromation\n# registry, run /script.sh and pass arg1 and arg2 as its arguments:\nneuro run -s cpu-small image:my-ubuntu:latest --entrypoint=/script.sh arg1 arg2\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-s, --preset PRESET_|Predefined resource configuration \\(to see available values, run `neuro config show`)|\n|_\\-x, --extshm / -X, --no-extshm_|Request extended '/dev/shm' space  \\[default: True]|\n|_--http PORT_|Enable HTTP port forwarding to container  \\[default: 80]|\n|_\\--http-auth / --no-http-auth_|Enable HTTP authentication for forwarded HTTP port  \\[default: True]|\n|_\\-n, --name NAME_|Optional job name|\n|_--tag TAG_|Optional job tag, multiple values allowed|\n|_\\-d, --description DESC_|Optional job description in free format|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_\\-v, --volume MOUNT_|Mounts directory from vault into container. Use multiple options to mount more than one volume. --volume=HOME is an alias for storage::/var/storage/home:rw and storage://neuromation/public:/var/storage/neuromation:ro|\n|_--entrypoint TEXT_|Executable entrypoint in the container \\(note that it overwrites `ENTRYPOINT` and `CMD` instructions of the docker image)|\n|_\\-e, --env VAR=VAL_|Set environment variable in container Use multiple options to define more than one variable|\n|_\\--env-file PATH_|File with environment variables to pass|\n|_\\--life-span TIMEDELTA_|Optional job run-time limit in the format '1d2h3m4s' \\(some parts may be missing). Set '0' to disable. Default value '1d' can be changed in the user config.|\n|_\\--wait-start / --no-wait-start_|Wait for a job start or failure  \\[default: True]|\n|_\\--pass-config / --no-pass-config_|Upload neuro config to the job  \\[default: False]|\n|_--browse_|Open a job's URL in a web browser|\n|_--detach_|Don't attach to job logs and don't wait for exit code|\n|_\\-t, --tty_|Allocate a TTY|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job submit\n\nSubmit an image to run on the cluster.<br/><br/>IMAGE container image name.<br/><br/>CMD list will be passed as commands to model container.<br/>\n\n**Usage:**\n\n```bash\nneuro job submit [OPTIONS] IMAGE [CMD]...\n```\n\n**Examples:**\n\n```bash\n\n# Starts a container pytorch:latest with two paths mounted. Directory /q1/\n# is mounted in read only mode to /qm directory within container.\n# Directory /mod mounted to /mod directory in read-write mode.\nneuro submit --volume storage:/q1:/qm:ro --volume storage:/mod:/mod:rw pytorch:latest\n\n# Starts a container using the custom image my-ubuntu:latest stored in neuromation\n# registry, run /script.sh and pass arg1 arg2 arg3 as its arguments:\nneuro submit image:my-ubuntu:latest --entrypoint=/script.sh arg1 arg2 arg3\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-g, --gpu NUMBER_|Number of GPUs to request  \\[default: 0]|\n|_\\--gpu-model MODEL_|GPU to use  \\[default: nvidia\\-tesla-k80]|\n|_\\--tpu-type TYPE_|TPU type to use|\n|_\\--tpu-sw-version VERSION_|Requested TPU software version|\n|_\\-c, --cpu NUMBER_|Number of CPUs to request  \\[default: 0.1]|\n|_\\-m, --memory AMOUNT_|Memory amount to request  \\[default: 1G]|\n|_\\-x, --extshm / -X, --no-extshm_|Request extended '/dev/shm' space  \\[default: True]|\n|_--http PORT_|Enable HTTP port forwarding to container|\n|_\\--http-auth / --no-http-auth_|Enable HTTP authentication for forwarded HTTP port  \\[default: True]|\n|_\\-p, --preemptible / -P, --non-preemptible_|Run job on a lower-cost preemptible instance  \\[default: False]|\n|_\\-n, --name NAME_|Optional job name|\n|_--tag TAG_|Optional job tag, multiple values allowed|\n|_\\-d, --description DESC_|Optional job description in free format|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_\\-v, --volume MOUNT_|Mounts directory from vault into container. Use multiple options to mount more than one volume. --volume=HOME is an alias for storage::/var/storage/home:rw and storage://neuromation/public:/var/storage/neuromation:ro|\n|_--entrypoint TEXT_|Executable entrypoint in the container \\(note that it overwrites `ENTRYPOINT` and `CMD` instructions of the docker image)|\n|_\\-e, --env VAR=VAL_|Set environment variable in container Use multiple options to define more than one variable|\n|_\\--env-file PATH_|File with environment variables to pass|\n|_\\--life-span TIMEDELTA_|Optional job run-time limit in the format '1d2h3m4s' \\(some parts may be missing). Set '0' to disable. Default value '1d' can be changed in the user config.|\n|_\\--wait-start / --no-wait-start_|Wait for a job start or failure  \\[default: True]|\n|_\\--pass-config / --no-pass-config_|Upload neuro config to the job  \\[default: False]|\n|_--browse_|Open a job's URL in a web browser|\n|_--detach_|Don't attach to job logs and don't wait for exit code|\n|_\\-t, --tty_|Allocate a TTY|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job ls\n\nList all jobs.<br/>\n\n**Usage:**\n\n```bash\nneuro job ls [OPTIONS]\n```\n\n**Examples:**\n\n```bash\n\nneuro ps -a\nneuro ps -a --owner=user-1 --owner=user-2\nneuro ps --name my-experiments-v1 -s failed -s succeeded\nneuro ps --description=my favourite job\nneuro ps -s failed -s succeeded -q\nneuro ps -t tag1 -t tag2\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-s, --status \\[pending &#124; running &#124; succeeded &#124; failed &#124; all]_|Filter out jobs by status \\(multiple option). Note: option `all` is deprecated, use `neuro ps -a` instead.|\n|_\\-o, --owner TEXT_|Filter out jobs by owner \\(multiple option).|\n|_\\-n, --name NAME_|Filter out jobs by name.|\n|_\\-t, --tag TAG_|Filter out jobs by tag \\(multiple option)|\n|_\\-d, --description DESCRIPTION_|Filter out jobs by description \\(exact match).|\n|_--since DATE_|Show jobs created after a specific date \\(including).|\n|_--until DATE_|Show jobs created before a specific date \\(including).|\n|_\\-a, --all_|Show all jobs regardless the status \\(equivalent to `\\-s pending -s running -s succeeded -s failed`).|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_\\-w, --wide_|Do not cut long lines for terminal width.|\n|_--format COLUMNS_|Output table format, see \"neuro help ps\\-format\" for more info about the format specification. The default can be changed using the job.ps-format configuration variable documented in \"neuro help user-config\"|\n|_\\--full-uri_|Output full image URI.|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job status\n\nDisplay status of a job.\n\n**Usage:**\n\n```bash\nneuro job status [OPTIONS] JOB\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\--full-uri_|Output full URI.|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job tags\n\nList all tags submitted by the user.\n\n**Usage:**\n\n```bash\nneuro job tags [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job exec\n\nExecute command in a running job.<br/>\n\n**Usage:**\n\n```bash\nneuro job exec [OPTIONS] JOB CMD...\n```\n\n**Examples:**\n\n```bash\n\n# Provides a shell to the container:\nneuro exec my-job /bin/bash\n\n# Executes a single command in the container and returns the control:\nneuro exec --no-tty my-job ls -l\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-t, --tty / -T, --no-tty_|Allocate virtual tty. Useful for interactive jobs.|\n|_\\--no-key-check_|Disable host key checks. Should be used with caution.|\n|_--timeout FLOAT_|Maximum allowed time for executing the command, 0 for no timeout  \\[default: 0]|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job port-forward\n\nForward port\\(s) of a running job to local port\\(s).<br/>\n\n**Usage:**\n\n```bash\nneuro job port-forward [OPTIONS] JOB LOCAL_REMOTE_PORT...\n```\n\n**Examples:**\n\n```bash\n\n# Forward local port 2080 to port 80 of job's container.\n# You can use http://localhost:2080 in browser to access job's served http\nneuro job port-forward my-fastai-job 2080:80\n\n# Forward local port 2222 to job's port 22\n# Then copy all data from container's folder '/data' to current folder\n# (please run second command in other terminal)\nneuro job port-forward my-job-with-ssh-server 2222:22\nrsync -avxzhe ssh -p 2222 root@localhost:/data .\n\n# Forward few ports at once\nneuro job port-forward my-job- 2080:80 2222:22 2000:100\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\--no-key-check_|Disable host key checks. Should be used with caution.|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job logs\n\nPrint the logs for a container.\n\n**Usage:**\n\n```bash\nneuro job logs [OPTIONS] JOB\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job kill\n\nKill job\\(s).\n\n**Usage:**\n\n```bash\nneuro job kill [OPTIONS] JOBS...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job top\n\nDisplay GPU/CPU/Memory usage.\n\n**Usage:**\n\n```bash\nneuro job top [OPTIONS] JOB\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--timeout FLOAT_|Maximum allowed time for executing the command, 0 for no timeout  \\[default: 0]|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job save\n\nSave job's state to an image.<br/>\n\n**Usage:**\n\n```bash\nneuro job save [OPTIONS] JOB IMAGE\n```\n\n**Examples:**\n\n```bash\n\nneuro job save job-id image:ubuntu-patched\nneuro job save my-favourite-job image:ubuntu-patched:v1\nneuro job save my-favourite-job image://bob/ubuntu-patched\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro job browse\n\nOpens a job's URL in a web browser.\n\n**Usage:**\n\n```bash\nneuro job browse [OPTIONS] JOB\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro project\n\nProject operations.\n\n**Usage:**\n\n```bash\nneuro project [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro project init](#neuro-project-init)_| Initialize an empty project |\n\n\n\n\n### neuro project init\n\nInitialize an empty project.<br/>\n\n**Usage:**\n\n```bash\nneuro project init [OPTIONS] [SLUG]\n```\n\n**Examples:**\n\n```bash\n\n# Initializes a scaffolding for the new project with the recommended project\n# structure (see http://github.com/neuromation/cookiecutter-neuro-project)\nneuro project init\n\n# Initializes a scaffolding for the new project with the recommended project\n# structure and sets default project folder name to \"example\"\nneuro project init my-project-id\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro storage\n\nStorage operations.\n\n**Usage:**\n\n```bash\nneuro storage [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro storage cp](#neuro-storage-cp)_| Copy files and directories |\n| _[neuro storage ls](#neuro-storage-ls)_| List directory contents |\n| _[neuro storage glob](#neuro-storage-glob)_| List resources that match PATTERNS |\n| _[neuro storage rm](#neuro-storage-rm)_| Remove files or directories |\n| _[neuro storage mkdir](#neuro-storage-mkdir)_| Make directories |\n| _[neuro storage mv](#neuro-storage-mv)_| Move or rename files and directories |\n| _[neuro storage tree](#neuro-storage-tree)_| List contents of directories in a tree-like format |\n| _[neuro storage load](#neuro-storage-load)_| Copy files and directories using MinIO \\(EXPERIMENTAL) |\n\n\n\n\n### neuro storage cp\n\nCopy files and directories.<br/><br/>Either SOURCES or DESTINATION should have storage:// scheme. If scheme is<br/>omitted, file:// scheme is assumed.<br/><br/>Use /dev/stdin and /dev/stdout file names to copy a file from terminal and<br/>print the content of file on the storage to console.<br/>\n\n**Usage:**\n\n```bash\nneuro storage cp [OPTIONS] [SOURCES]... [DESTINATION]\n```\n\n**Examples:**\n\n```bash\n\n# copy local files into remote storage root\nneuro cp foo.txt bar/baz.dat storage:\nneuro cp foo.txt bar/baz.dat -t storage:\n\n# copy local directory `foo` into existing remote directory `bar`\nneuro cp -r foo -t storage:bar\n\n# copy the content of local directory `foo` into existing remote\n# directory `bar`\nneuro cp -r -T storage:foo storage:bar\n\n# download remote file `foo.txt` into local file `/tmp/foo.txt` with\n# explicit file:// scheme set\nneuro cp storage:foo.txt file:///tmp/foo.txt\nneuro cp -T storage:foo.txt file:///tmp/foo.txt\nneuro cp storage:foo.txt file:///tmp\nneuro cp storage:foo.txt -t file:///tmp\n\n# download other user's remote file into the current directory\nneuro cp storage://{username}/foo.txt .\n\n# download only files with extension `.out` into the current directory\nneuro cp storage:results/*.out .\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-r, --recursive_|Recursive copy, off by default|\n|_\\--glob / --no-glob_|Expand glob patterns in SOURCES with explicit scheme.  \\[default: True]|\n|_\\-t, --target-directory DIRECTORY_|Copy all SOURCES into DIRECTORY.|\n|_\\-T, --no-target-directory_|Treat DESTINATION as a normal file.|\n|_\\-u, --update_|Copy only when the SOURCE file is newer than the destination file or when the destination file is missing.|\n|_--exclude_|Exclude files and directories that match the specified pattern. The default can be changed using the storage.cp\\-exclude configuration variable documented in \"neuro help user-config\"|\n|_--include_|Don't exclude files and directories that match the specified pattern. The default can be changed using the storage.cp\\-exclude configuration variable documented in \"neuro help user-config\"|\n|_\\-p, --progress / -P, --no-progress_|Show progress, on by default.|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro storage ls\n\nList directory contents.<br/><br/>By default PATH is equal user's home dir \\(storage:)\n\n**Usage:**\n\n```bash\nneuro storage ls [OPTIONS] [PATHS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-a, --all_|do not ignore entries starting with .|\n|_\\-d, --directory_|list directories themselves, not their contents.|\n|_\\-h, --human-readable_|with -l print human readable sizes \\(e.g., 2K, 540M).|\n|_-l_|use a long listing format.|\n|_--sort \\[name &#124; size &#124; time]_|sort by given field, default is name.|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro storage glob\n\nList resources that match PATTERNS.\n\n**Usage:**\n\n```bash\nneuro storage glob [OPTIONS] [PATTERNS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro storage rm\n\nRemove files or directories.<br/>\n\n**Usage:**\n\n```bash\nneuro storage rm [OPTIONS] PATHS...\n```\n\n**Examples:**\n\n```bash\n\nneuro rm storage:foo/bar\nneuro rm storage://{username}/foo/bar\nneuro rm --recursive storage://{username}/foo/\nneuro rm storage:foo/**/*.tmp\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-r, --recursive_|remove directories and their contents recursively|\n|_\\--glob / --no-glob_|Expand glob patterns in PATHS  \\[default: True]|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro storage mkdir\n\nMake directories.\n\n**Usage:**\n\n```bash\nneuro storage mkdir [OPTIONS] PATHS...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-p, --parents_|No error if existing, make parent directories as needed|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro storage mv\n\nMove or rename files and directories.<br/><br/>SOURCE must contain path to the file or directory existing on the storage,<br/>and DESTINATION must contain the full path to the target file or directory.<br/>\n\n**Usage:**\n\n```bash\nneuro storage mv [OPTIONS] [SOURCES]... [DESTINATION]\n```\n\n**Examples:**\n\n```bash\n\n# move and rename remote file\nneuro mv storage:foo.txt storage:bar/baz.dat\nneuro mv -T storage:foo.txt storage:bar/baz.dat\n\n# move remote files into existing remote directory\nneuro mv storage:foo.txt storage:bar/baz.dat storage:dst\nneuro mv storage:foo.txt storage:bar/baz.dat -t storage:dst\n\n# move the content of remote directory into other existing\n# remote directory\nneuro mv -T storage:foo storage:bar\n\n# move remote file into other user's directory\nneuro mv storage:foo.txt storage://{username}/bar.dat\n\n# move remote file from other user's directory\nneuro mv storage://{username}/foo.txt storage:bar.dat\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\--glob / --no-glob_|Expand glob patterns in SOURCES  \\[default: True]|\n|_\\-t, --target-directory DIRECTORY_|Copy all SOURCES into DIRECTORY|\n|_\\-T, --no-target-directory_|Treat DESTINATION as a normal file|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro storage tree\n\nList contents of directories in a tree-like format.<br/><br/>Tree is a recursive directory listing program that produces a depth indented<br/>listing of files, which is colorized ala dircolors if the LS_COLORS<br/>environment variable is set and output is to tty.  With no arguments, tree<br/>lists the files in the storage: directory.  When directory arguments are<br/>given, tree lists all the files and/or directories found in the given<br/>directories each in turn.  Upon completion of listing all files/directories<br/>found, tree returns the total number of files and/or directories listed.<br/><br/>By default PATH is equal user's home dir \\(storage:)\n\n**Usage:**\n\n```bash\nneuro storage tree [OPTIONS] [PATH]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-a, --all_|do not ignore entries starting with .|\n|_\\-h, --human-readable_|Print the size in a more human readable way.|\n|_\\-s, --size_|Print the size in bytes of each file.|\n|_--sort \\[name &#124; size &#124; time]_|sort by given field, default is name|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro storage load\n\nCopy files and directories using MinIO \\(EXPERIMENTAL).<br/><br/>Same as \"cp\", but uses MinIO and the Amazon S3 protocol.<br/>\\(DEPRECATED)\n\n**Usage:**\n\n```bash\nneuro storage load [OPTIONS] [SOURCES]... [DESTINATION]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-r, --recursive_|Recursive copy, off by default|\n|_\\--glob / --no-glob_|Expand glob patterns in SOURCES with explicit scheme  \\[default: True]|\n|_\\-t, --target-directory DIRECTORY_|Copy all SOURCES into DIRECTORY|\n|_\\-T, --no-target-directory_|Treat DESTINATION as a normal file|\n|_\\-u, --update_|Copy only when the SOURCE file is newer than the destination file or when the destination file is missing|\n|_\\-p, --progress_|Show progress, off by default|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro image\n\nContainer image operations.\n\n**Usage:**\n\n```bash\nneuro image [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro image ls](#neuro-image-ls)_| List images |\n| _[neuro image push](#neuro-image-push)_| Push an image to platform registry |\n| _[neuro image pull](#neuro-image-pull)_| Pull an image from platform registry |\n| _[neuro image tags](#neuro-image-tags)_| List tags for image in platform registry |\n\n\n\n\n### neuro image ls\n\nList images.\n\n**Usage:**\n\n```bash\nneuro image ls [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_-l_|List in long format.|\n|_\\--full-uri_|Output full image URI.|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro image push\n\nPush an image to platform registry.<br/><br/>Remote image must be URL with image:// scheme. Image names can contain tag.<br/>If tags not specified 'latest' will be used as value.<br/>\n\n**Usage:**\n\n```bash\nneuro image push [OPTIONS] LOCAL_IMAGE [REMOTE_IMAGE]\n```\n\n**Examples:**\n\n```bash\n\nneuro push myimage\nneuro push alpine:latest image:my-alpine:production\nneuro push alpine image://myfriend/alpine:shared\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro image pull\n\nPull an image from platform registry.<br/><br/>Remote image name must be URL with image:// scheme. Image names can contain<br/>tag.<br/>\n\n**Usage:**\n\n```bash\nneuro image pull [OPTIONS] REMOTE_IMAGE [LOCAL_IMAGE]\n```\n\n**Examples:**\n\n```bash\n\nneuro pull image:myimage\nneuro pull image://myfriend/alpine:shared\nneuro pull image://username/my-alpine:production alpine:from-registry\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro image tags\n\nList tags for image in platform registry.<br/><br/>Image name must be URL with image:// scheme.<br/>\n\n**Usage:**\n\n```bash\nneuro image tags [OPTIONS] IMAGE\n```\n\n**Examples:**\n\n```bash\n\nneuro image tags image://myfriend/alpine\nneuro image tags image:myimage\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro config\n\nClient configuration.\n\n**Usage:**\n\n```bash\nneuro config [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro config login](#neuro-config-login)_| Log into Neuro Platform |\n| _[neuro config login\\-with-token](#neuro-config-login-with-token)_| Log into Neuro Platform with token |\n| _[neuro config login-headless](#neuro-config-login-headless)_| Log into Neuro Platform from non-GUI server environment |\n| _[neuro config show](#neuro-config-show)_| Print current settings |\n| _[neuro config show-token](#neuro-config-show-token)_| Print current authorization token |\n| _[neuro config show-quota](#neuro-config-show-quota)_| Print quota and remaining computation time for active cluster |\n| _[neuro config aliases](#neuro-config-aliases)_| List available command aliases |\n| _[neuro config get-clusters](#neuro-config-get-clusters)_| Fetch and display the list of available clusters |\n| _[neuro config switch-cluster](#neuro-config-switch-cluster)_| Switch the active cluster |\n| _[neuro config docker](#neuro-config-docker)_| Configure docker client to fit the Neuro Platform |\n| _[neuro config logout](#neuro-config-logout)_| Log out |\n\n\n\n\n### neuro config login\n\nLog into Neuro Platform.<br/><br/>URL is a platform entrypoint URL.\n\n**Usage:**\n\n```bash\nneuro config login [OPTIONS] [URL]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config login-with-token\n\nLog into Neuro Platform with token.<br/><br/>TOKEN is authentication token provided by administration team. URL is a<br/>platform entrypoint URL.\n\n**Usage:**\n\n```bash\nneuro config login-with-token [OPTIONS] TOKEN [URL]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config login-headless\n\nLog into Neuro Platform from non-GUI server environment.<br/><br/>URL is a platform entrypoint URL.<br/><br/>The command works similar to \"neuro login\" but instead of opening a browser<br/>for performing OAuth registration prints an URL that should be open on guest<br/>host.<br/><br/>Then user inputs a code displayed in a browser after successful login back<br/>in neuro command to finish the login process.\n\n**Usage:**\n\n```bash\nneuro config login-headless [OPTIONS] [URL]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config show\n\nPrint current settings.\n\n**Usage:**\n\n```bash\nneuro config show [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config show-token\n\nPrint current authorization token.\n\n**Usage:**\n\n```bash\nneuro config show-token [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config show-quota\n\nPrint quota and remaining computation time for active cluster.\n\n**Usage:**\n\n```bash\nneuro config show-quota [OPTIONS] [USER]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config aliases\n\nList available command aliases.\n\n**Usage:**\n\n```bash\nneuro config aliases [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config get-clusters\n\nFetch and display the list of available clusters.\n\n**Usage:**\n\n```bash\nneuro config get-clusters [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config switch-cluster\n\nSwitch the active cluster.<br/><br/>CLUSTER_NAME is the cluster name to select.  The interactive prompt is used<br/>if the name is omitted \\(default).\n\n**Usage:**\n\n```bash\nneuro config switch-cluster [OPTIONS] [CLUSTER_NAME]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config docker\n\nConfigure docker client to fit the Neuro Platform.\n\n**Usage:**\n\n```bash\nneuro config docker [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\--docker-config PATH_|Specifies the location of the Docker client configuration files|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro config logout\n\nLog out.\n\n**Usage:**\n\n```bash\nneuro config logout [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro completion\n\nOutput shell completion code.\n\n**Usage:**\n\n```bash\nneuro completion [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro completion generate](#neuro-completion-generate)_| Provide an instruction for shell completion generation |\n| _[neuro completion patch](#neuro-completion-patch)_| Automatically patch shell configuration profile to enable completion |\n\n\n\n\n### neuro completion generate\n\nProvide an instruction for shell completion generation.\n\n**Usage:**\n\n```bash\nneuro completion generate [OPTIONS] [bash|zsh]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro completion patch\n\nAutomatically patch shell configuration profile to enable completion\n\n**Usage:**\n\n```bash\nneuro completion patch [OPTIONS] [bash|zsh]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro acl\n\nAccess Control List management.\n\n**Usage:**\n\n```bash\nneuro acl [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro acl grant](#neuro-acl-grant)_| Shares resource with another user |\n| _[neuro acl revoke](#neuro-acl-revoke)_| Revoke user access from another user |\n| _[neuro acl list](#neuro-acl-list)_| List shared resources |\n\n\n\n\n### neuro acl grant\n\nShares resource with another user.<br/><br/>URI shared resource.<br/><br/>USER username to share resource with.<br/><br/>PERMISSION sharing access right: read, write, or manage.<br/>\n\n**Usage:**\n\n```bash\nneuro acl grant [OPTIONS] URI USER [read|write|manage]\n```\n\n**Examples:**\n\n```bash\n\nneuro acl grant storage:///sample_data/ alice manage\nneuro acl grant image:resnet50 bob read\nneuro acl grant job:///my_job_id alice write\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro acl revoke\n\nRevoke user access from another user.<br/><br/>URI previously shared resource to revoke.<br/><br/>USER to revoke URI resource from.<br/>\n\n**Usage:**\n\n```bash\nneuro acl revoke [OPTIONS] URI USER\n```\n\n**Examples:**\n\n```bash\n\nneuro acl revoke storage:///sample_data/ alice\nneuro acl revoke image:resnet50 bob\nneuro acl revoke job:///my_job_id alice\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro acl list\n\nList shared resources.<br/><br/>The command displays a list of resources shared BY current user \\(default).<br/><br/>To display a list of resources shared WITH current user apply --shared<br/>option.<br/>\n\n**Usage:**\n\n```bash\nneuro acl list [OPTIONS]\n```\n\n**Examples:**\n\n```bash\n\nneuro acl list\nneuro acl list --scheme storage\nneuro acl list --shared\nneuro acl list --shared --scheme image\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_-u TEXT_|Use specified user or role.|\n|_\\-s, --scheme TEXT_|Filter resources by scheme, e.g. job, storage, image or user.|\n|_--shared_|Output the resources shared by the user.|\n|_\\--full-uri_|Output full URI.|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro blob\n\nBlob storage operations.\n\n**Usage:**\n\n```bash\nneuro blob [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n**Commands:**\n\n|Usage|Description|\n|---|---|\n| _[neuro blob cp](#neuro-blob-cp)_| Simple utility to copy files and directories into and from Blob Storage |\n| _[neuro blob ls](#neuro-blob-ls)_| List buckets or bucket contents |\n| _[neuro blob glob](#neuro-blob-glob)_| List resources that match PATTERNS |\n\n\n\n\n### neuro blob cp\n\nSimple utility to copy files and directories into and from Blob Storage.<br/>Either SOURCES or DESTINATION should have `blob://` scheme. If scheme is<br/>omitted, file:// scheme is assumed. It is currently not possible to copy<br/>files between Blob Storage \\(`blob://`) destination, nor with `storage://`<br/>scheme paths. Use `/dev/stdin` and `/dev/stdout` file names to upload a file<br/>from standard input or output to stdout. File permissions, modification<br/>times and other attributes will not be passed to Blob Storage metadata<br/>during upload.\n\n**Usage:**\n\n```bash\nneuro blob cp [OPTIONS] [SOURCES]... [DESTINATION]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-r, --recursive_|Recursive copy, off by default|\n|_\\--glob / --no-glob_|Expand glob patterns in SOURCES with explicit scheme.  \\[default: True]|\n|_\\-t, --target-directory DIRECTORY_|Copy all SOURCES into DIRECTORY.|\n|_\\-T, --no-target-directory_|Treat DESTINATION as a normal file.|\n|_--exclude_|Exclude files and directories that match the specified pattern. The default can be changed using the storage.cp\\-exclude configuration variable documented in \"neuro help user-config\"|\n|_--include_|Don't exclude files and directories that match the specified pattern. The default can be changed using the storage.cp\\-exclude configuration variable documented in \"neuro help user-config\"|\n|_\\-p, --progress / -P, --no-progress_|Show progress, on by default.|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro blob ls\n\nList buckets or bucket contents.\n\n**Usage:**\n\n```bash\nneuro blob ls [OPTIONS] [PATHS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-h, --human-readable_|with -l print human readable sizes \\(e.g., 2K, 540M).|\n|_-l_|use a long listing format.|\n|_--sort \\[name &#124; size &#124; time]_|sort by given field, default is name.|\n|_\\-r, --recursive_|List all keys under the URL path provided, not just 1 level depths.|\n|_--help_|Show this message and exit.|\n\n\n\n\n### neuro blob glob\n\nList resources that match PATTERNS.\n\n**Usage:**\n\n```bash\nneuro blob glob [OPTIONS] [PATTERNS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro help\n\nGet help on a command.\n\n**Usage:**\n\n```bash\nneuro help [OPTIONS] [COMMAND]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro run\n\nRun a job with predefined resources configuration.<br/><br/>IMAGE container image name.<br/><br/>CMD list will be passed as commands to model container.<br/>\n\n**Usage:**\n\n```bash\nneuro run [OPTIONS] IMAGE [CMD]...\n```\n\n**Examples:**\n\n```bash\n\n# Starts a container pytorch:latest on a machine with smaller GPU resources\n# (see exact values in `neuro config show`) and with two volumes mounted:\n#   storage://<home-directory>   --> /var/storage/home (in read-write mode),\n#   storage://neuromation/public --> /var/storage/neuromation (in read-only mode).\nneuro run --preset=gpu-small --volume=HOME pytorch:latest\n\n# Starts a container using the custom image my-ubuntu:latest stored in neuromation\n# registry, run /script.sh and pass arg1 and arg2 as its arguments:\nneuro run -s cpu-small image:my-ubuntu:latest --entrypoint=/script.sh arg1 arg2\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-s, --preset PRESET_|Predefined resource configuration \\(to see available values, run `neuro config show`)|\n|_\\-x, --extshm / -X, --no-extshm_|Request extended '/dev/shm' space  \\[default: True]|\n|_--http PORT_|Enable HTTP port forwarding to container  \\[default: 80]|\n|_\\--http-auth / --no-http-auth_|Enable HTTP authentication for forwarded HTTP port  \\[default: True]|\n|_\\-n, --name NAME_|Optional job name|\n|_--tag TAG_|Optional job tag, multiple values allowed|\n|_\\-d, --description DESC_|Optional job description in free format|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_\\-v, --volume MOUNT_|Mounts directory from vault into container. Use multiple options to mount more than one volume. --volume=HOME is an alias for storage::/var/storage/home:rw and storage://neuromation/public:/var/storage/neuromation:ro|\n|_--entrypoint TEXT_|Executable entrypoint in the container \\(note that it overwrites `ENTRYPOINT` and `CMD` instructions of the docker image)|\n|_\\-e, --env VAR=VAL_|Set environment variable in container Use multiple options to define more than one variable|\n|_\\--env-file PATH_|File with environment variables to pass|\n|_\\--life-span TIMEDELTA_|Optional job run-time limit in the format '1d2h3m4s' \\(some parts may be missing). Set '0' to disable. Default value '1d' can be changed in the user config.|\n|_\\--wait-start / --no-wait-start_|Wait for a job start or failure  \\[default: True]|\n|_\\--pass-config / --no-pass-config_|Upload neuro config to the job  \\[default: False]|\n|_--browse_|Open a job's URL in a web browser|\n|_--detach_|Don't attach to job logs and don't wait for exit code|\n|_\\-t, --tty_|Allocate a TTY|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro submit\n\nSubmit an image to run on the cluster.<br/><br/>IMAGE container image name.<br/><br/>CMD list will be passed as commands to model container.<br/>\n\n**Usage:**\n\n```bash\nneuro submit [OPTIONS] IMAGE [CMD]...\n```\n\n**Examples:**\n\n```bash\n\n# Starts a container pytorch:latest with two paths mounted. Directory /q1/\n# is mounted in read only mode to /qm directory within container.\n# Directory /mod mounted to /mod directory in read-write mode.\nneuro submit --volume storage:/q1:/qm:ro --volume storage:/mod:/mod:rw pytorch:latest\n\n# Starts a container using the custom image my-ubuntu:latest stored in neuromation\n# registry, run /script.sh and pass arg1 arg2 arg3 as its arguments:\nneuro submit image:my-ubuntu:latest --entrypoint=/script.sh arg1 arg2 arg3\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-g, --gpu NUMBER_|Number of GPUs to request  \\[default: 0]|\n|_\\--gpu-model MODEL_|GPU to use  \\[default: nvidia\\-tesla-k80]|\n|_\\--tpu-type TYPE_|TPU type to use|\n|_\\--tpu-sw-version VERSION_|Requested TPU software version|\n|_\\-c, --cpu NUMBER_|Number of CPUs to request  \\[default: 0.1]|\n|_\\-m, --memory AMOUNT_|Memory amount to request  \\[default: 1G]|\n|_\\-x, --extshm / -X, --no-extshm_|Request extended '/dev/shm' space  \\[default: True]|\n|_--http PORT_|Enable HTTP port forwarding to container|\n|_\\--http-auth / --no-http-auth_|Enable HTTP authentication for forwarded HTTP port  \\[default: True]|\n|_\\-p, --preemptible / -P, --non-preemptible_|Run job on a lower-cost preemptible instance  \\[default: False]|\n|_\\-n, --name NAME_|Optional job name|\n|_--tag TAG_|Optional job tag, multiple values allowed|\n|_\\-d, --description DESC_|Optional job description in free format|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_\\-v, --volume MOUNT_|Mounts directory from vault into container. Use multiple options to mount more than one volume. --volume=HOME is an alias for storage::/var/storage/home:rw and storage://neuromation/public:/var/storage/neuromation:ro|\n|_--entrypoint TEXT_|Executable entrypoint in the container \\(note that it overwrites `ENTRYPOINT` and `CMD` instructions of the docker image)|\n|_\\-e, --env VAR=VAL_|Set environment variable in container Use multiple options to define more than one variable|\n|_\\--env-file PATH_|File with environment variables to pass|\n|_\\--life-span TIMEDELTA_|Optional job run-time limit in the format '1d2h3m4s' \\(some parts may be missing). Set '0' to disable. Default value '1d' can be changed in the user config.|\n|_\\--wait-start / --no-wait-start_|Wait for a job start or failure  \\[default: True]|\n|_\\--pass-config / --no-pass-config_|Upload neuro config to the job  \\[default: False]|\n|_--browse_|Open a job's URL in a web browser|\n|_--detach_|Don't attach to job logs and don't wait for exit code|\n|_\\-t, --tty_|Allocate a TTY|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro ps\n\nList all jobs.<br/>\n\n**Usage:**\n\n```bash\nneuro ps [OPTIONS]\n```\n\n**Examples:**\n\n```bash\n\nneuro ps -a\nneuro ps -a --owner=user-1 --owner=user-2\nneuro ps --name my-experiments-v1 -s failed -s succeeded\nneuro ps --description=my favourite job\nneuro ps -s failed -s succeeded -q\nneuro ps -t tag1 -t tag2\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-s, --status \\[pending &#124; running &#124; succeeded &#124; failed &#124; all]_|Filter out jobs by status \\(multiple option). Note: option `all` is deprecated, use `neuro ps -a` instead.|\n|_\\-o, --owner TEXT_|Filter out jobs by owner \\(multiple option).|\n|_\\-n, --name NAME_|Filter out jobs by name.|\n|_\\-t, --tag TAG_|Filter out jobs by tag \\(multiple option)|\n|_\\-d, --description DESCRIPTION_|Filter out jobs by description \\(exact match).|\n|_--since DATE_|Show jobs created after a specific date \\(including).|\n|_--until DATE_|Show jobs created before a specific date \\(including).|\n|_\\-a, --all_|Show all jobs regardless the status \\(equivalent to `\\-s pending -s running -s succeeded -s failed`).|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_\\-w, --wide_|Do not cut long lines for terminal width.|\n|_--format COLUMNS_|Output table format, see \"neuro help ps\\-format\" for more info about the format specification. The default can be changed using the job.ps-format configuration variable documented in \"neuro help user-config\"|\n|_\\--full-uri_|Output full image URI.|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro status\n\nDisplay status of a job.\n\n**Usage:**\n\n```bash\nneuro status [OPTIONS] JOB\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\--full-uri_|Output full URI.|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro exec\n\nExecute command in a running job.<br/>\n\n**Usage:**\n\n```bash\nneuro exec [OPTIONS] JOB CMD...\n```\n\n**Examples:**\n\n```bash\n\n# Provides a shell to the container:\nneuro exec my-job /bin/bash\n\n# Executes a single command in the container and returns the control:\nneuro exec --no-tty my-job ls -l\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-t, --tty / -T, --no-tty_|Allocate virtual tty. Useful for interactive jobs.|\n|_\\--no-key-check_|Disable host key checks. Should be used with caution.|\n|_--timeout FLOAT_|Maximum allowed time for executing the command, 0 for no timeout  \\[default: 0]|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro port-forward\n\nForward port\\(s) of a running job to local port\\(s).<br/>\n\n**Usage:**\n\n```bash\nneuro port-forward [OPTIONS] JOB LOCAL_REMOTE_PORT...\n```\n\n**Examples:**\n\n```bash\n\n# Forward local port 2080 to port 80 of job's container.\n# You can use http://localhost:2080 in browser to access job's served http\nneuro job port-forward my-fastai-job 2080:80\n\n# Forward local port 2222 to job's port 22\n# Then copy all data from container's folder '/data' to current folder\n# (please run second command in other terminal)\nneuro job port-forward my-job-with-ssh-server 2222:22\nrsync -avxzhe ssh -p 2222 root@localhost:/data .\n\n# Forward few ports at once\nneuro job port-forward my-job- 2080:80 2222:22 2000:100\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\--no-key-check_|Disable host key checks. Should be used with caution.|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro logs\n\nPrint the logs for a container.\n\n**Usage:**\n\n```bash\nneuro logs [OPTIONS] JOB\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro kill\n\nKill job\\(s).\n\n**Usage:**\n\n```bash\nneuro kill [OPTIONS] JOBS...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro top\n\nDisplay GPU/CPU/Memory usage.\n\n**Usage:**\n\n```bash\nneuro top [OPTIONS] JOB\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--timeout FLOAT_|Maximum allowed time for executing the command, 0 for no timeout  \\[default: 0]|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro save\n\nSave job's state to an image.<br/>\n\n**Usage:**\n\n```bash\nneuro save [OPTIONS] JOB IMAGE\n```\n\n**Examples:**\n\n```bash\n\nneuro job save job-id image:ubuntu-patched\nneuro job save my-favourite-job image:ubuntu-patched:v1\nneuro job save my-favourite-job image://bob/ubuntu-patched\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro login\n\nLog into Neuro Platform.<br/><br/>URL is a platform entrypoint URL.\n\n**Usage:**\n\n```bash\nneuro login [OPTIONS] [URL]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro logout\n\nLog out.\n\n**Usage:**\n\n```bash\nneuro logout [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro cp\n\nCopy files and directories.<br/><br/>Either SOURCES or DESTINATION should have storage:// scheme. If scheme is<br/>omitted, file:// scheme is assumed.<br/><br/>Use /dev/stdin and /dev/stdout file names to copy a file from terminal and<br/>print the content of file on the storage to console.<br/>\n\n**Usage:**\n\n```bash\nneuro cp [OPTIONS] [SOURCES]... [DESTINATION]\n```\n\n**Examples:**\n\n```bash\n\n# copy local files into remote storage root\nneuro cp foo.txt bar/baz.dat storage:\nneuro cp foo.txt bar/baz.dat -t storage:\n\n# copy local directory `foo` into existing remote directory `bar`\nneuro cp -r foo -t storage:bar\n\n# copy the content of local directory `foo` into existing remote\n# directory `bar`\nneuro cp -r -T storage:foo storage:bar\n\n# download remote file `foo.txt` into local file `/tmp/foo.txt` with\n# explicit file:// scheme set\nneuro cp storage:foo.txt file:///tmp/foo.txt\nneuro cp -T storage:foo.txt file:///tmp/foo.txt\nneuro cp storage:foo.txt file:///tmp\nneuro cp storage:foo.txt -t file:///tmp\n\n# download other user's remote file into the current directory\nneuro cp storage://{username}/foo.txt .\n\n# download only files with extension `.out` into the current directory\nneuro cp storage:results/*.out .\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-r, --recursive_|Recursive copy, off by default|\n|_\\--glob / --no-glob_|Expand glob patterns in SOURCES with explicit scheme.  \\[default: True]|\n|_\\-t, --target-directory DIRECTORY_|Copy all SOURCES into DIRECTORY.|\n|_\\-T, --no-target-directory_|Treat DESTINATION as a normal file.|\n|_\\-u, --update_|Copy only when the SOURCE file is newer than the destination file or when the destination file is missing.|\n|_--exclude_|Exclude files and directories that match the specified pattern. The default can be changed using the storage.cp\\-exclude configuration variable documented in \"neuro help user-config\"|\n|_--include_|Don't exclude files and directories that match the specified pattern. The default can be changed using the storage.cp\\-exclude configuration variable documented in \"neuro help user-config\"|\n|_\\-p, --progress / -P, --no-progress_|Show progress, on by default.|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro ls\n\nList directory contents.<br/><br/>By default PATH is equal user's home dir \\(storage:)\n\n**Usage:**\n\n```bash\nneuro ls [OPTIONS] [PATHS]...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-a, --all_|do not ignore entries starting with .|\n|_\\-d, --directory_|list directories themselves, not their contents.|\n|_\\-h, --human-readable_|with -l print human readable sizes \\(e.g., 2K, 540M).|\n|_-l_|use a long listing format.|\n|_--sort \\[name &#124; size &#124; time]_|sort by given field, default is name.|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro rm\n\nRemove files or directories.<br/>\n\n**Usage:**\n\n```bash\nneuro rm [OPTIONS] PATHS...\n```\n\n**Examples:**\n\n```bash\n\nneuro rm storage:foo/bar\nneuro rm storage://{username}/foo/bar\nneuro rm --recursive storage://{username}/foo/\nneuro rm storage:foo/**/*.tmp\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-r, --recursive_|remove directories and their contents recursively|\n|_\\--glob / --no-glob_|Expand glob patterns in PATHS  \\[default: True]|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro mkdir\n\nMake directories.\n\n**Usage:**\n\n```bash\nneuro mkdir [OPTIONS] PATHS...\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-p, --parents_|No error if existing, make parent directories as needed|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro mv\n\nMove or rename files and directories.<br/><br/>SOURCE must contain path to the file or directory existing on the storage,<br/>and DESTINATION must contain the full path to the target file or directory.<br/>\n\n**Usage:**\n\n```bash\nneuro mv [OPTIONS] [SOURCES]... [DESTINATION]\n```\n\n**Examples:**\n\n```bash\n\n# move and rename remote file\nneuro mv storage:foo.txt storage:bar/baz.dat\nneuro mv -T storage:foo.txt storage:bar/baz.dat\n\n# move remote files into existing remote directory\nneuro mv storage:foo.txt storage:bar/baz.dat storage:dst\nneuro mv storage:foo.txt storage:bar/baz.dat -t storage:dst\n\n# move the content of remote directory into other existing\n# remote directory\nneuro mv -T storage:foo storage:bar\n\n# move remote file into other user's directory\nneuro mv storage:foo.txt storage://{username}/bar.dat\n\n# move remote file from other user's directory\nneuro mv storage://{username}/foo.txt storage:bar.dat\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\--glob / --no-glob_|Expand glob patterns in SOURCES  \\[default: True]|\n|_\\-t, --target-directory DIRECTORY_|Copy all SOURCES into DIRECTORY|\n|_\\-T, --no-target-directory_|Treat DESTINATION as a normal file|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro images\n\nList images.\n\n**Usage:**\n\n```bash\nneuro images [OPTIONS]\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_-l_|List in long format.|\n|_\\--full-uri_|Output full image URI.|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro push\n\nPush an image to platform registry.<br/><br/>Remote image must be URL with image:// scheme. Image names can contain tag.<br/>If tags not specified 'latest' will be used as value.<br/>\n\n**Usage:**\n\n```bash\nneuro push [OPTIONS] LOCAL_IMAGE [REMOTE_IMAGE]\n```\n\n**Examples:**\n\n```bash\n\nneuro push myimage\nneuro push alpine:latest image:my-alpine:production\nneuro push alpine image://myfriend/alpine:shared\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro pull\n\nPull an image from platform registry.<br/><br/>Remote image name must be URL with image:// scheme. Image names can contain<br/>tag.<br/>\n\n**Usage:**\n\n```bash\nneuro pull [OPTIONS] REMOTE_IMAGE [LOCAL_IMAGE]\n```\n\n**Examples:**\n\n```bash\n\nneuro pull image:myimage\nneuro pull image://myfriend/alpine:shared\nneuro pull image://username/my-alpine:production alpine:from-registry\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_\\-q, --quiet_|Run command in quiet mode \\(DEPRECATED)|\n|_--help_|Show this message and exit.|\n\n\n\n\n## neuro share\n\nShares resource with another user.<br/><br/>URI shared resource.<br/><br/>USER username to share resource with.<br/><br/>PERMISSION sharing access right: read, write, or manage.<br/>\n\n**Usage:**\n\n```bash\nneuro share [OPTIONS] URI USER [read|write|manage]\n```\n\n**Examples:**\n\n```bash\n\nneuro acl grant storage:///sample_data/ alice manage\nneuro acl grant image:resnet50 bob read\nneuro acl grant job:///my_job_id alice write\n\n```\n\n**Options:**\n\nName | Description|\n|----|------------|\n|_--help_|Show this message and exit.|\n\n\n\n\n# Api\n\n*TODO*\n\n# Contributing\n\n```shell\ngit clone https://github.com/neuromation/platform-api-clients.git\ncd platform-api-clients/python\n```\n\nFor OSX users install coreutils to properly interpret shell commands:\n\n```\nbrew install coreutils\n```\n\nBefore you begin, it is recommended to have clean virtual environment installed:\n\n```shell\npython -m venv .env\nsource .env/bin/activate\n```\n\nDevelopment flow:\n\n* Install dependencies: `make init`\n* Run tests: `make test`\n* Lint: `make lint`\n* Publish to [pypi](https://pypi.org/project/neuromation/): `make publish`\n\n", "description_content_type": "text/markdown; charset=UTF-8; variant=GFM", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://neuromation.io/", "keywords": "", "license": "Apache License, version 2.0", "maintainer": "", "maintainer_email": "", "name": "neuromation", "package_url": "https://pypi.org/project/neuromation/", "platform": "", "project_url": "https://pypi.org/project/neuromation/", "project_urls": {"Homepage": "https://neuromation.io/"}, "release_url": "https://pypi.org/project/neuromation/20.4.15/", "requires_dist": ["aiohttp (>=3.6.2)", "pyyaml (>=3.0)", "python-jose (>=3.0.0)", "python-dateutil (>=2.7.0)", "yarl (>=1.3.0)", "multidict (>=4.0)", "aiodocker (>=0.16.0)", "click (>=7.0)", "humanize (>=0.5)", "psutil (>=5.5.0)", "typing-extensions (>=3.7.4)", "certifi", "cookiecutter (==1.7.0)", "atomicwrites (>=1.0)", "wcwidth (>=0.1.7)", "toml (>=0.10.0)", "prompt-toolkit (>=3.0)", "colorama (>=0.4) ; platform_system == \"Windows\"", "dataclasses (>=0.5) ; python_version < \"3.7\"", "async-generator (>=1.5) ; python_version < \"3.7\"", "async-exit-stack (>=1.0.1) ; python_version < \"3.7\""], "requires_python": ">=3.6.0", "summary": "Neuro Platform API client", "version": "20.4.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://codecov.io/gh/neuromation/platform-api-clients\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f4caf75f2ccae8f70baa8ddce1a9f70511d55dc/68747470733a2f2f636f6465636f762e696f2f67682f6e6575726f6d6174696f6e2f706c6174666f726d2d6170692d636c69656e74732f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d46774d365a563367446a\"></a></p>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#Preface\" rel=\"nofollow\">Preface</a></li>\n<li><a href=\"#neuro\" rel=\"nofollow\">neuro</a>\n<ul>\n<li><a href=\"#neuro-admin\" rel=\"nofollow\">neuro admin</a>\n<ul>\n<li><a href=\"#neuro-admin-get-clusters\" rel=\"nofollow\">neuro admin get-clusters</a></li>\n<li><a href=\"#neuro-admin-generate-cluster-config\" rel=\"nofollow\">neuro admin generate-cluster-config</a></li>\n<li><a href=\"#neuro-admin-add-cluster\" rel=\"nofollow\">neuro admin add-cluster</a></li>\n<li><a href=\"#neuro-admin-get-cluster-users\" rel=\"nofollow\">neuro admin get-cluster-users</a></li>\n<li><a href=\"#neuro-admin-add-cluster-user\" rel=\"nofollow\">neuro admin add-cluster-user</a></li>\n<li><a href=\"#neuro-admin-remove-cluster-user\" rel=\"nofollow\">neuro admin remove-cluster-user</a></li>\n<li><a href=\"#neuro-admin-set-user-quota\" rel=\"nofollow\">neuro admin set-user-quota</a></li>\n<li><a href=\"#neuro-admin-add-user-quota\" rel=\"nofollow\">neuro admin add-user-quota</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-job\" rel=\"nofollow\">neuro job</a>\n<ul>\n<li><a href=\"#neuro-job-run\" rel=\"nofollow\">neuro job run</a></li>\n<li><a href=\"#neuro-job-submit\" rel=\"nofollow\">neuro job submit</a></li>\n<li><a href=\"#neuro-job-ls\" rel=\"nofollow\">neuro job ls</a></li>\n<li><a href=\"#neuro-job-status\" rel=\"nofollow\">neuro job status</a></li>\n<li><a href=\"#neuro-job-tags\" rel=\"nofollow\">neuro job tags</a></li>\n<li><a href=\"#neuro-job-exec\" rel=\"nofollow\">neuro job exec</a></li>\n<li><a href=\"#neuro-job-port-forward\" rel=\"nofollow\">neuro job port-forward</a></li>\n<li><a href=\"#neuro-job-logs\" rel=\"nofollow\">neuro job logs</a></li>\n<li><a href=\"#neuro-job-kill\" rel=\"nofollow\">neuro job kill</a></li>\n<li><a href=\"#neuro-job-top\" rel=\"nofollow\">neuro job top</a></li>\n<li><a href=\"#neuro-job-save\" rel=\"nofollow\">neuro job save</a></li>\n<li><a href=\"#neuro-job-browse\" rel=\"nofollow\">neuro job browse</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-project\" rel=\"nofollow\">neuro project</a>\n<ul>\n<li><a href=\"#neuro-project-init\" rel=\"nofollow\">neuro project init</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-storage\" rel=\"nofollow\">neuro storage</a>\n<ul>\n<li><a href=\"#neuro-storage-cp\" rel=\"nofollow\">neuro storage cp</a></li>\n<li><a href=\"#neuro-storage-ls\" rel=\"nofollow\">neuro storage ls</a></li>\n<li><a href=\"#neuro-storage-glob\" rel=\"nofollow\">neuro storage glob</a></li>\n<li><a href=\"#neuro-storage-rm\" rel=\"nofollow\">neuro storage rm</a></li>\n<li><a href=\"#neuro-storage-mkdir\" rel=\"nofollow\">neuro storage mkdir</a></li>\n<li><a href=\"#neuro-storage-mv\" rel=\"nofollow\">neuro storage mv</a></li>\n<li><a href=\"#neuro-storage-tree\" rel=\"nofollow\">neuro storage tree</a></li>\n<li><a href=\"#neuro-storage-load\" rel=\"nofollow\">neuro storage load</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-image\" rel=\"nofollow\">neuro image</a>\n<ul>\n<li><a href=\"#neuro-image-ls\" rel=\"nofollow\">neuro image ls</a></li>\n<li><a href=\"#neuro-image-push\" rel=\"nofollow\">neuro image push</a></li>\n<li><a href=\"#neuro-image-pull\" rel=\"nofollow\">neuro image pull</a></li>\n<li><a href=\"#neuro-image-tags\" rel=\"nofollow\">neuro image tags</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-config\" rel=\"nofollow\">neuro config</a>\n<ul>\n<li><a href=\"#neuro-config-login\" rel=\"nofollow\">neuro config login</a></li>\n<li><a href=\"#neuro-config-login-with-token\" rel=\"nofollow\">neuro config login-with-token</a></li>\n<li><a href=\"#neuro-config-login-headless\" rel=\"nofollow\">neuro config login-headless</a></li>\n<li><a href=\"#neuro-config-show\" rel=\"nofollow\">neuro config show</a></li>\n<li><a href=\"#neuro-config-show-token\" rel=\"nofollow\">neuro config show-token</a></li>\n<li><a href=\"#neuro-config-show-quota\" rel=\"nofollow\">neuro config show-quota</a></li>\n<li><a href=\"#neuro-config-aliases\" rel=\"nofollow\">neuro config aliases</a></li>\n<li><a href=\"#neuro-config-get-clusters\" rel=\"nofollow\">neuro config get-clusters</a></li>\n<li><a href=\"#neuro-config-switch-cluster\" rel=\"nofollow\">neuro config switch-cluster</a></li>\n<li><a href=\"#neuro-config-docker\" rel=\"nofollow\">neuro config docker</a></li>\n<li><a href=\"#neuro-config-logout\" rel=\"nofollow\">neuro config logout</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-completion\" rel=\"nofollow\">neuro completion</a>\n<ul>\n<li><a href=\"#neuro-completion-generate\" rel=\"nofollow\">neuro completion generate</a></li>\n<li><a href=\"#neuro-completion-patch\" rel=\"nofollow\">neuro completion patch</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-acl\" rel=\"nofollow\">neuro acl</a>\n<ul>\n<li><a href=\"#neuro-acl-grant\" rel=\"nofollow\">neuro acl grant</a></li>\n<li><a href=\"#neuro-acl-revoke\" rel=\"nofollow\">neuro acl revoke</a></li>\n<li><a href=\"#neuro-acl-list\" rel=\"nofollow\">neuro acl list</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-blob\" rel=\"nofollow\">neuro blob</a>\n<ul>\n<li><a href=\"#neuro-blob-cp\" rel=\"nofollow\">neuro blob cp</a></li>\n<li><a href=\"#neuro-blob-ls\" rel=\"nofollow\">neuro blob ls</a></li>\n<li><a href=\"#neuro-blob-glob\" rel=\"nofollow\">neuro blob glob</a></li>\n</ul>\n</li>\n<li><a href=\"#neuro-help\" rel=\"nofollow\">neuro help</a></li>\n<li><a href=\"#neuro-run\" rel=\"nofollow\">neuro run</a></li>\n<li><a href=\"#neuro-submit\" rel=\"nofollow\">neuro submit</a></li>\n<li><a href=\"#neuro-ps\" rel=\"nofollow\">neuro ps</a></li>\n<li><a href=\"#neuro-status\" rel=\"nofollow\">neuro status</a></li>\n<li><a href=\"#neuro-exec\" rel=\"nofollow\">neuro exec</a></li>\n<li><a href=\"#neuro-port-forward\" rel=\"nofollow\">neuro port-forward</a></li>\n<li><a href=\"#neuro-logs\" rel=\"nofollow\">neuro logs</a></li>\n<li><a href=\"#neuro-kill\" rel=\"nofollow\">neuro kill</a></li>\n<li><a href=\"#neuro-top\" rel=\"nofollow\">neuro top</a></li>\n<li><a href=\"#neuro-save\" rel=\"nofollow\">neuro save</a></li>\n<li><a href=\"#neuro-login\" rel=\"nofollow\">neuro login</a></li>\n<li><a href=\"#neuro-logout\" rel=\"nofollow\">neuro logout</a></li>\n<li><a href=\"#neuro-cp\" rel=\"nofollow\">neuro cp</a></li>\n<li><a href=\"#neuro-ls\" rel=\"nofollow\">neuro ls</a></li>\n<li><a href=\"#neuro-rm\" rel=\"nofollow\">neuro rm</a></li>\n<li><a href=\"#neuro-mkdir\" rel=\"nofollow\">neuro mkdir</a></li>\n<li><a href=\"#neuro-mv\" rel=\"nofollow\">neuro mv</a></li>\n<li><a href=\"#neuro-images\" rel=\"nofollow\">neuro images</a></li>\n<li><a href=\"#neuro-push\" rel=\"nofollow\">neuro push</a></li>\n<li><a href=\"#neuro-pull\" rel=\"nofollow\">neuro pull</a></li>\n<li><a href=\"#neuro-share\" rel=\"nofollow\">neuro share</a></li>\n</ul>\n</li>\n<li><a href=\"#Api\" rel=\"nofollow\">Api</a></li>\n<li><a href=\"#Contributing\" rel=\"nofollow\">Contributing</a></li>\n</ul>\n<h1>Preface</h1>\n<p>Welcome to Neuromation API Python client.\nPackage ship command line tool called <a href=\"#neuro\" rel=\"nofollow\"><em>neuro</em></a>. With <a href=\"#neuro\" rel=\"nofollow\"><em>neuro</em></a> you can:</p>\n<ul>\n<li><a href=\"#neuro-job\" rel=\"nofollow\">Execute and debug jobs</a></li>\n<li><a href=\"#neuro-storage\" rel=\"nofollow\">Manipulate Data</a></li>\n<li>Make some fun</li>\n</ul>\n<h1>neuro</h1>\n<p><strong>Usage:</strong></p>\n<pre>neuro <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-v, --verbose</em></td>\n<td>Give more output. Option is additive, and can be used up to 2 times.</td>\n</tr>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Give less output. Option is additive, and can be used up to 2 times.</td>\n</tr>\n<tr>\n<td><em>--neuromation-config PATH</em></td>\n<td>Path to config directory.</td>\n</tr>\n<tr>\n<td><em>--show-traceback</em></td>\n<td>Show python traceback on error, useful for debugging the tool.</td>\n</tr>\n<tr>\n<td><em>--color [yes | no | auto]</em></td>\n<td>Color mode.</td>\n</tr>\n<tr>\n<td><em>--disable-pypi-version-check</em></td>\n<td>Don't periodically check PyPI to determine whether a new version of Neuro Platform CLI is available for download.</td>\n</tr>\n<tr>\n<td><em>--network-timeout FLOAT</em></td>\n<td>Network read timeout, seconds.</td>\n</tr>\n<tr>\n<td><em>--version</em></td>\n<td>Show the version and exit.</td>\n</tr>\n<tr>\n<td><em>--trace</em></td>\n<td>Trace sent HTTP requests and received replies to stderr.</td>\n</tr>\n<tr>\n<td><em>--hide-token / --no-hide-token</em></td>\n<td>Prevent user's token sent in HTTP headers from being printed out to stderr during HTTP tracing. Can be used only together with option '--trace'. On by default.</td>\n</tr>\n<tr>\n<td><em>--skip-stats / --no-skip-stats</em></td>\n<td>Skip sending usage statistics to Neuro servers. Note: the statistics has no sensitive data, e.g. file, job, image, or user names, executed command lines, environment variables, etc.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Command Groups:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-admin\" rel=\"nofollow\">neuro admin</a></em></td>\n<td>Cluster administration commands</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job\" rel=\"nofollow\">neuro job</a></em></td>\n<td>Job operations</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-project\" rel=\"nofollow\">neuro project</a></em></td>\n<td>Project operations</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-storage\" rel=\"nofollow\">neuro storage</a></em></td>\n<td>Storage operations</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-image\" rel=\"nofollow\">neuro image</a></em></td>\n<td>Container image operations</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config\" rel=\"nofollow\">neuro config</a></em></td>\n<td>Client configuration</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-completion\" rel=\"nofollow\">neuro completion</a></em></td>\n<td>Output shell completion code</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-acl\" rel=\"nofollow\">neuro acl</a></em></td>\n<td>Access Control List management</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-blob\" rel=\"nofollow\">neuro blob</a></em></td>\n<td>Blob storage operations</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-help\" rel=\"nofollow\">neuro help</a></em></td>\n<td>Get help on a command</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-run\" rel=\"nofollow\">neuro run</a></em></td>\n<td>Run a job with predefined resources configuration</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-submit\" rel=\"nofollow\">neuro submit</a></em></td>\n<td>Submit an image to run on the cluster</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-ps\" rel=\"nofollow\">neuro ps</a></em></td>\n<td>List all jobs</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-status\" rel=\"nofollow\">neuro status</a></em></td>\n<td>Display status of a job</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-exec\" rel=\"nofollow\">neuro exec</a></em></td>\n<td>Execute command in a running job</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-port-forward\" rel=\"nofollow\">neuro port-forward</a></em></td>\n<td>Forward port(s) of a running job to local port(s)</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-logs\" rel=\"nofollow\">neuro logs</a></em></td>\n<td>Print the logs for a container</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-kill\" rel=\"nofollow\">neuro kill</a></em></td>\n<td>Kill job(s)</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-top\" rel=\"nofollow\">neuro top</a></em></td>\n<td>Display GPU/CPU/Memory usage</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-save\" rel=\"nofollow\">neuro save</a></em></td>\n<td>Save job's state to an image</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-login\" rel=\"nofollow\">neuro login</a></em></td>\n<td>Log into Neuro Platform</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-logout\" rel=\"nofollow\">neuro logout</a></em></td>\n<td>Log out</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-cp\" rel=\"nofollow\">neuro cp</a></em></td>\n<td>Copy files and directories</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-ls\" rel=\"nofollow\">neuro ls</a></em></td>\n<td>List directory contents</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-rm\" rel=\"nofollow\">neuro rm</a></em></td>\n<td>Remove files or directories</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-mkdir\" rel=\"nofollow\">neuro mkdir</a></em></td>\n<td>Make directories</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-mv\" rel=\"nofollow\">neuro mv</a></em></td>\n<td>Move or rename files and directories</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-images\" rel=\"nofollow\">neuro images</a></em></td>\n<td>List images</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-push\" rel=\"nofollow\">neuro push</a></em></td>\n<td>Push an image to platform registry</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-pull\" rel=\"nofollow\">neuro pull</a></em></td>\n<td>Pull an image from platform registry</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-share\" rel=\"nofollow\">neuro share</a></em></td>\n<td>Shares resource with another user</td>\n</tr></tbody></table>\n<h2>neuro admin</h2>\n<p>Cluster administration commands.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-admin-get-clusters\" rel=\"nofollow\">neuro admin get-clusters</a></em></td>\n<td>Print the list of available clusters</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-admin-generate-cluster-config\" rel=\"nofollow\">neuro admin generate-cluster-config</a></em></td>\n<td>Create a cluster configuration file</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-admin-add-cluster\" rel=\"nofollow\">neuro admin add-cluster</a></em></td>\n<td>Create a new cluster and start its provisioning</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-admin-get-cluster-users\" rel=\"nofollow\">neuro admin get-cluster-users</a></em></td>\n<td>Print the list of all users in the cluster with their assigned role</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-admin-add-cluster-user\" rel=\"nofollow\">neuro admin add-cluster-user</a></em></td>\n<td>Add user access to specified cluster</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-admin-remove-cluster-user\" rel=\"nofollow\">neuro admin remove-cluster-user</a></em></td>\n<td>Remove user access from the cluster</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-admin-set-user-quota\" rel=\"nofollow\">neuro admin set-user-quota</a></em></td>\n<td>Set user quota to given values</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-admin-add-user-quota\" rel=\"nofollow\">neuro admin add-user-quota</a></em></td>\n<td>Add given values to user quota</td>\n</tr></tbody></table>\n<h3>neuro admin get-clusters</h3>\n<p>Print the list of available clusters.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin get-clusters <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro admin generate-cluster-config</h3>\n<p>Create a cluster configuration file.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin generate-cluster-config <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>CONFIG<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--type [aws | gcp]</em></td>\n<td></td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro admin add-cluster</h3>\n<p>Create a new cluster and start its provisioning.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin add-cluster <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> CLUSTER_NAME CONFIG\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro admin get-cluster-users</h3>\n<p>Print the list of all users in the cluster with their assigned role.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin get-cluster-users <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>CLUSTER_NAME<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro admin add-cluster-user</h3>\n<p>Add user access to specified cluster.<br><br>The command supports one of 3 user roles: admin, manager or user.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin add-cluster-user <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> CLUSTER_NAME USER_NAME <span class=\"o\">[</span>ROLE<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro admin remove-cluster-user</h3>\n<p>Remove user access from the cluster.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin remove-cluster-user <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> CLUSTER_NAME USER_NAME\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro admin set-user-quota</h3>\n<p>Set user quota to given values</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin set-user-quota <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> CLUSTER_NAME USER_NAME\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-g, --gpu AMOUNT</em></td>\n<td>GPU quota value in hours (h) or minutes (m).</td>\n</tr>\n<tr>\n<td><em>-n, --non-gpu AMOUNT</em></td>\n<td>Non-GPU quota value in hours (h) or minutes (m).</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro admin add-user-quota</h3>\n<p>Add given values to user quota</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro admin add-user-quota <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> CLUSTER_NAME USER_NAME\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-g, --gpu AMOUNT</em></td>\n<td>Additional GPU quota value in hours (h) or minutes (m).</td>\n</tr>\n<tr>\n<td><em>-n, --non-gpu AMOUNT</em></td>\n<td>Additional non-GPU quota value in hours (h) or minutes (m).</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro job</h2>\n<p>Job operations.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-job-run\" rel=\"nofollow\">neuro job run</a></em></td>\n<td>Run a job with predefined resources configuration</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-submit\" rel=\"nofollow\">neuro job submit</a></em></td>\n<td>Submit an image to run on the cluster</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-ls\" rel=\"nofollow\">neuro job ls</a></em></td>\n<td>List all jobs</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-status\" rel=\"nofollow\">neuro job status</a></em></td>\n<td>Display status of a job</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-tags\" rel=\"nofollow\">neuro job tags</a></em></td>\n<td>List all tags submitted by the user</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-exec\" rel=\"nofollow\">neuro job exec</a></em></td>\n<td>Execute command in a running job</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-port-forward\" rel=\"nofollow\">neuro job port-forward</a></em></td>\n<td>Forward port(s) of a running job to local port(s)</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-logs\" rel=\"nofollow\">neuro job logs</a></em></td>\n<td>Print the logs for a container</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-kill\" rel=\"nofollow\">neuro job kill</a></em></td>\n<td>Kill job(s)</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-top\" rel=\"nofollow\">neuro job top</a></em></td>\n<td>Display GPU/CPU/Memory usage</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-save\" rel=\"nofollow\">neuro job save</a></em></td>\n<td>Save job's state to an image</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-job-browse\" rel=\"nofollow\">neuro job browse</a></em></td>\n<td>Opens a job's URL in a web browser</td>\n</tr></tbody></table>\n<h3>neuro job run</h3>\n<p>Run a job with predefined resources configuration.<br><br>IMAGE container image name.<br><br>CMD list will be passed as commands to model container.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job run <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> IMAGE <span class=\"o\">[</span>CMD<span class=\"o\">]</span>...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Starts a container pytorch:latest on a machine with smaller GPU resources</span>\n<span class=\"c1\"># (see exact values in `neuro config show`) and with two volumes mounted:</span>\n<span class=\"c1\">#   storage://&lt;home-directory&gt;   --&gt; /var/storage/home (in read-write mode),</span>\n<span class=\"c1\">#   storage://neuromation/public --&gt; /var/storage/neuromation (in read-only mode).</span>\nneuro run --preset<span class=\"o\">=</span>gpu-small --volume<span class=\"o\">=</span>HOME pytorch:latest\n\n<span class=\"c1\"># Starts a container using the custom image my-ubuntu:latest stored in neuromation</span>\n<span class=\"c1\"># registry, run /script.sh and pass arg1 and arg2 as its arguments:</span>\nneuro run -s cpu-small image:my-ubuntu:latest --entrypoint<span class=\"o\">=</span>/script.sh arg1 arg2\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-s, --preset PRESET</em></td>\n<td>Predefined resource configuration (to see available values, run <code>neuro config show</code>)</td>\n</tr>\n<tr>\n<td><em>-x, --extshm / -X, --no-extshm</em></td>\n<td>Request extended '/dev/shm' space  [default: True]</td>\n</tr>\n<tr>\n<td><em>--http PORT</em></td>\n<td>Enable HTTP port forwarding to container  [default: 80]</td>\n</tr>\n<tr>\n<td><em>--http-auth / --no-http-auth</em></td>\n<td>Enable HTTP authentication for forwarded HTTP port  [default: True]</td>\n</tr>\n<tr>\n<td><em>-n, --name NAME</em></td>\n<td>Optional job name</td>\n</tr>\n<tr>\n<td><em>--tag TAG</em></td>\n<td>Optional job tag, multiple values allowed</td>\n</tr>\n<tr>\n<td><em>-d, --description DESC</em></td>\n<td>Optional job description in free format</td>\n</tr>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>-v, --volume MOUNT</em></td>\n<td>Mounts directory from vault into container. Use multiple options to mount more than one volume. --volume=HOME is an alias for storage::/var/storage/home:rw and storage://neuromation/public:/var/storage/neuromation:ro</td>\n</tr>\n<tr>\n<td><em>--entrypoint TEXT</em></td>\n<td>Executable entrypoint in the container (note that it overwrites <code>ENTRYPOINT</code> and <code>CMD</code> instructions of the docker image)</td>\n</tr>\n<tr>\n<td><em>-e, --env VAR=VAL</em></td>\n<td>Set environment variable in container Use multiple options to define more than one variable</td>\n</tr>\n<tr>\n<td><em>--env-file PATH</em></td>\n<td>File with environment variables to pass</td>\n</tr>\n<tr>\n<td><em>--life-span TIMEDELTA</em></td>\n<td>Optional job run-time limit in the format '1d2h3m4s' (some parts may be missing). Set '0' to disable. Default value '1d' can be changed in the user config.</td>\n</tr>\n<tr>\n<td><em>--wait-start / --no-wait-start</em></td>\n<td>Wait for a job start or failure  [default: True]</td>\n</tr>\n<tr>\n<td><em>--pass-config / --no-pass-config</em></td>\n<td>Upload neuro config to the job  [default: False]</td>\n</tr>\n<tr>\n<td><em>--browse</em></td>\n<td>Open a job's URL in a web browser</td>\n</tr>\n<tr>\n<td><em>--detach</em></td>\n<td>Don't attach to job logs and don't wait for exit code</td>\n</tr>\n<tr>\n<td><em>-t, --tty</em></td>\n<td>Allocate a TTY</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job submit</h3>\n<p>Submit an image to run on the cluster.<br><br>IMAGE container image name.<br><br>CMD list will be passed as commands to model container.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job submit <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> IMAGE <span class=\"o\">[</span>CMD<span class=\"o\">]</span>...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Starts a container pytorch:latest with two paths mounted. Directory /q1/</span>\n<span class=\"c1\"># is mounted in read only mode to /qm directory within container.</span>\n<span class=\"c1\"># Directory /mod mounted to /mod directory in read-write mode.</span>\nneuro submit --volume storage:/q1:/qm:ro --volume storage:/mod:/mod:rw pytorch:latest\n\n<span class=\"c1\"># Starts a container using the custom image my-ubuntu:latest stored in neuromation</span>\n<span class=\"c1\"># registry, run /script.sh and pass arg1 arg2 arg3 as its arguments:</span>\nneuro submit image:my-ubuntu:latest --entrypoint<span class=\"o\">=</span>/script.sh arg1 arg2 arg3\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-g, --gpu NUMBER</em></td>\n<td>Number of GPUs to request  [default: 0]</td>\n</tr>\n<tr>\n<td><em>--gpu-model MODEL</em></td>\n<td>GPU to use  [default: nvidia-tesla-k80]</td>\n</tr>\n<tr>\n<td><em>--tpu-type TYPE</em></td>\n<td>TPU type to use</td>\n</tr>\n<tr>\n<td><em>--tpu-sw-version VERSION</em></td>\n<td>Requested TPU software version</td>\n</tr>\n<tr>\n<td><em>-c, --cpu NUMBER</em></td>\n<td>Number of CPUs to request  [default: 0.1]</td>\n</tr>\n<tr>\n<td><em>-m, --memory AMOUNT</em></td>\n<td>Memory amount to request  [default: 1G]</td>\n</tr>\n<tr>\n<td><em>-x, --extshm / -X, --no-extshm</em></td>\n<td>Request extended '/dev/shm' space  [default: True]</td>\n</tr>\n<tr>\n<td><em>--http PORT</em></td>\n<td>Enable HTTP port forwarding to container</td>\n</tr>\n<tr>\n<td><em>--http-auth / --no-http-auth</em></td>\n<td>Enable HTTP authentication for forwarded HTTP port  [default: True]</td>\n</tr>\n<tr>\n<td><em>-p, --preemptible / -P, --non-preemptible</em></td>\n<td>Run job on a lower-cost preemptible instance  [default: False]</td>\n</tr>\n<tr>\n<td><em>-n, --name NAME</em></td>\n<td>Optional job name</td>\n</tr>\n<tr>\n<td><em>--tag TAG</em></td>\n<td>Optional job tag, multiple values allowed</td>\n</tr>\n<tr>\n<td><em>-d, --description DESC</em></td>\n<td>Optional job description in free format</td>\n</tr>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>-v, --volume MOUNT</em></td>\n<td>Mounts directory from vault into container. Use multiple options to mount more than one volume. --volume=HOME is an alias for storage::/var/storage/home:rw and storage://neuromation/public:/var/storage/neuromation:ro</td>\n</tr>\n<tr>\n<td><em>--entrypoint TEXT</em></td>\n<td>Executable entrypoint in the container (note that it overwrites <code>ENTRYPOINT</code> and <code>CMD</code> instructions of the docker image)</td>\n</tr>\n<tr>\n<td><em>-e, --env VAR=VAL</em></td>\n<td>Set environment variable in container Use multiple options to define more than one variable</td>\n</tr>\n<tr>\n<td><em>--env-file PATH</em></td>\n<td>File with environment variables to pass</td>\n</tr>\n<tr>\n<td><em>--life-span TIMEDELTA</em></td>\n<td>Optional job run-time limit in the format '1d2h3m4s' (some parts may be missing). Set '0' to disable. Default value '1d' can be changed in the user config.</td>\n</tr>\n<tr>\n<td><em>--wait-start / --no-wait-start</em></td>\n<td>Wait for a job start or failure  [default: True]</td>\n</tr>\n<tr>\n<td><em>--pass-config / --no-pass-config</em></td>\n<td>Upload neuro config to the job  [default: False]</td>\n</tr>\n<tr>\n<td><em>--browse</em></td>\n<td>Open a job's URL in a web browser</td>\n</tr>\n<tr>\n<td><em>--detach</em></td>\n<td>Don't attach to job logs and don't wait for exit code</td>\n</tr>\n<tr>\n<td><em>-t, --tty</em></td>\n<td>Allocate a TTY</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job ls</h3>\n<p>List all jobs.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job ls <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro ps -a\nneuro ps -a --owner<span class=\"o\">=</span>user-1 --owner<span class=\"o\">=</span>user-2\nneuro ps --name my-experiments-v1 -s failed -s succeeded\nneuro ps --description<span class=\"o\">=</span>my favourite job\nneuro ps -s failed -s succeeded -q\nneuro ps -t tag1 -t tag2\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-s, --status [pending | running | succeeded | failed | all]</em></td>\n<td>Filter out jobs by status (multiple option). Note: option <code>all</code> is deprecated, use <code>neuro ps -a</code> instead.</td>\n</tr>\n<tr>\n<td><em>-o, --owner TEXT</em></td>\n<td>Filter out jobs by owner (multiple option).</td>\n</tr>\n<tr>\n<td><em>-n, --name NAME</em></td>\n<td>Filter out jobs by name.</td>\n</tr>\n<tr>\n<td><em>-t, --tag TAG</em></td>\n<td>Filter out jobs by tag (multiple option)</td>\n</tr>\n<tr>\n<td><em>-d, --description DESCRIPTION</em></td>\n<td>Filter out jobs by description (exact match).</td>\n</tr>\n<tr>\n<td><em>--since DATE</em></td>\n<td>Show jobs created after a specific date (including).</td>\n</tr>\n<tr>\n<td><em>--until DATE</em></td>\n<td>Show jobs created before a specific date (including).</td>\n</tr>\n<tr>\n<td><em>-a, --all</em></td>\n<td>Show all jobs regardless the status (equivalent to <code>\\-s pending -s running -s succeeded -s failed</code>).</td>\n</tr>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>-w, --wide</em></td>\n<td>Do not cut long lines for terminal width.</td>\n</tr>\n<tr>\n<td><em>--format COLUMNS</em></td>\n<td>Output table format, see \"neuro help ps-format\" for more info about the format specification. The default can be changed using the job.ps-format configuration variable documented in \"neuro help user-config\"</td>\n</tr>\n<tr>\n<td><em>--full-uri</em></td>\n<td>Output full image URI.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job status</h3>\n<p>Display status of a job.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job status <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--full-uri</em></td>\n<td>Output full URI.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job tags</h3>\n<p>List all tags submitted by the user.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job tags <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job exec</h3>\n<p>Execute command in a running job.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job <span class=\"nb\">exec</span> <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB CMD...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Provides a shell to the container:</span>\nneuro <span class=\"nb\">exec</span> my-job /bin/bash\n\n<span class=\"c1\"># Executes a single command in the container and returns the control:</span>\nneuro <span class=\"nb\">exec</span> --no-tty my-job ls -l\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-t, --tty / -T, --no-tty</em></td>\n<td>Allocate virtual tty. Useful for interactive jobs.</td>\n</tr>\n<tr>\n<td><em>--no-key-check</em></td>\n<td>Disable host key checks. Should be used with caution.</td>\n</tr>\n<tr>\n<td><em>--timeout FLOAT</em></td>\n<td>Maximum allowed time for executing the command, 0 for no timeout  [default: 0]</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job port-forward</h3>\n<p>Forward port(s) of a running job to local port(s).<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job port-forward <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB LOCAL_REMOTE_PORT...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Forward local port 2080 to port 80 of job's container.</span>\n<span class=\"c1\"># You can use http://localhost:2080 in browser to access job's served http</span>\nneuro job port-forward my-fastai-job <span class=\"m\">2080</span>:80\n\n<span class=\"c1\"># Forward local port 2222 to job's port 22</span>\n<span class=\"c1\"># Then copy all data from container's folder '/data' to current folder</span>\n<span class=\"c1\"># (please run second command in other terminal)</span>\nneuro job port-forward my-job-with-ssh-server <span class=\"m\">2222</span>:22\nrsync -avxzhe ssh -p <span class=\"m\">2222</span> root@localhost:/data .\n\n<span class=\"c1\"># Forward few ports at once</span>\nneuro job port-forward my-job- <span class=\"m\">2080</span>:80 <span class=\"m\">2222</span>:22 <span class=\"m\">2000</span>:100\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--no-key-check</em></td>\n<td>Disable host key checks. Should be used with caution.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job logs</h3>\n<p>Print the logs for a container.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job logs <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job kill</h3>\n<p>Kill job(s).</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job <span class=\"nb\">kill</span> <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOBS...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job top</h3>\n<p>Display GPU/CPU/Memory usage.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job top <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--timeout FLOAT</em></td>\n<td>Maximum allowed time for executing the command, 0 for no timeout  [default: 0]</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job save</h3>\n<p>Save job's state to an image.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job save <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB IMAGE\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro job save job-id image:ubuntu-patched\nneuro job save my-favourite-job image:ubuntu-patched:v1\nneuro job save my-favourite-job image://bob/ubuntu-patched\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro job browse</h3>\n<p>Opens a job's URL in a web browser.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro job browse <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro project</h2>\n<p>Project operations.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro project <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-project-init\" rel=\"nofollow\">neuro project init</a></em></td>\n<td>Initialize an empty project</td>\n</tr></tbody></table>\n<h3>neuro project init</h3>\n<p>Initialize an empty project.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro project init <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>SLUG<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Initializes a scaffolding for the new project with the recommended project</span>\n<span class=\"c1\"># structure (see http://github.com/neuromation/cookiecutter-neuro-project)</span>\nneuro project init\n\n<span class=\"c1\"># Initializes a scaffolding for the new project with the recommended project</span>\n<span class=\"c1\"># structure and sets default project folder name to \"example\"</span>\nneuro project init my-project-id\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro storage</h2>\n<p>Storage operations.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-storage-cp\" rel=\"nofollow\">neuro storage cp</a></em></td>\n<td>Copy files and directories</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-storage-ls\" rel=\"nofollow\">neuro storage ls</a></em></td>\n<td>List directory contents</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-storage-glob\" rel=\"nofollow\">neuro storage glob</a></em></td>\n<td>List resources that match PATTERNS</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-storage-rm\" rel=\"nofollow\">neuro storage rm</a></em></td>\n<td>Remove files or directories</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-storage-mkdir\" rel=\"nofollow\">neuro storage mkdir</a></em></td>\n<td>Make directories</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-storage-mv\" rel=\"nofollow\">neuro storage mv</a></em></td>\n<td>Move or rename files and directories</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-storage-tree\" rel=\"nofollow\">neuro storage tree</a></em></td>\n<td>List contents of directories in a tree-like format</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-storage-load\" rel=\"nofollow\">neuro storage load</a></em></td>\n<td>Copy files and directories using MinIO (EXPERIMENTAL)</td>\n</tr></tbody></table>\n<h3>neuro storage cp</h3>\n<p>Copy files and directories.<br><br>Either SOURCES or DESTINATION should have storage:// scheme. If scheme is<br>omitted, file:// scheme is assumed.<br><br>Use /dev/stdin and /dev/stdout file names to copy a file from terminal and<br>print the content of file on the storage to console.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage cp <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>SOURCES<span class=\"o\">]</span>... <span class=\"o\">[</span>DESTINATION<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># copy local files into remote storage root</span>\nneuro cp foo.txt bar/baz.dat storage:\nneuro cp foo.txt bar/baz.dat -t storage:\n\n<span class=\"c1\"># copy local directory `foo` into existing remote directory `bar`</span>\nneuro cp -r foo -t storage:bar\n\n<span class=\"c1\"># copy the content of local directory `foo` into existing remote</span>\n<span class=\"c1\"># directory `bar`</span>\nneuro cp -r -T storage:foo storage:bar\n\n<span class=\"c1\"># download remote file `foo.txt` into local file `/tmp/foo.txt` with</span>\n<span class=\"c1\"># explicit file:// scheme set</span>\nneuro cp storage:foo.txt file:///tmp/foo.txt\nneuro cp -T storage:foo.txt file:///tmp/foo.txt\nneuro cp storage:foo.txt file:///tmp\nneuro cp storage:foo.txt -t file:///tmp\n\n<span class=\"c1\"># download other user's remote file into the current directory</span>\nneuro cp storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/foo.txt .\n\n<span class=\"c1\"># download only files with extension `.out` into the current directory</span>\nneuro cp storage:results/*.out .\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-r, --recursive</em></td>\n<td>Recursive copy, off by default</td>\n</tr>\n<tr>\n<td><em>--glob / --no-glob</em></td>\n<td>Expand glob patterns in SOURCES with explicit scheme.  [default: True]</td>\n</tr>\n<tr>\n<td><em>-t, --target-directory DIRECTORY</em></td>\n<td>Copy all SOURCES into DIRECTORY.</td>\n</tr>\n<tr>\n<td><em>-T, --no-target-directory</em></td>\n<td>Treat DESTINATION as a normal file.</td>\n</tr>\n<tr>\n<td><em>-u, --update</em></td>\n<td>Copy only when the SOURCE file is newer than the destination file or when the destination file is missing.</td>\n</tr>\n<tr>\n<td><em>--exclude</em></td>\n<td>Exclude files and directories that match the specified pattern. The default can be changed using the storage.cp-exclude configuration variable documented in \"neuro help user-config\"</td>\n</tr>\n<tr>\n<td><em>--include</em></td>\n<td>Don't exclude files and directories that match the specified pattern. The default can be changed using the storage.cp-exclude configuration variable documented in \"neuro help user-config\"</td>\n</tr>\n<tr>\n<td><em>-p, --progress / -P, --no-progress</em></td>\n<td>Show progress, on by default.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro storage ls</h3>\n<p>List directory contents.<br><br>By default PATH is equal user's home dir (storage:)</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage ls <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>PATHS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-a, --all</em></td>\n<td>do not ignore entries starting with .</td>\n</tr>\n<tr>\n<td><em>-d, --directory</em></td>\n<td>list directories themselves, not their contents.</td>\n</tr>\n<tr>\n<td><em>-h, --human-readable</em></td>\n<td>with -l print human readable sizes (e.g., 2K, 540M).</td>\n</tr>\n<tr>\n<td><em>-l</em></td>\n<td>use a long listing format.</td>\n</tr>\n<tr>\n<td><em>--sort [name | size | time]</em></td>\n<td>sort by given field, default is name.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro storage glob</h3>\n<p>List resources that match PATTERNS.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage glob <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>PATTERNS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro storage rm</h3>\n<p>Remove files or directories.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage rm <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> PATHS...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro rm storage:foo/bar\nneuro rm storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/foo/bar\nneuro rm --recursive storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/foo/\nneuro rm storage:foo/**/*.tmp\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-r, --recursive</em></td>\n<td>remove directories and their contents recursively</td>\n</tr>\n<tr>\n<td><em>--glob / --no-glob</em></td>\n<td>Expand glob patterns in PATHS  [default: True]</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro storage mkdir</h3>\n<p>Make directories.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage mkdir <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> PATHS...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-p, --parents</em></td>\n<td>No error if existing, make parent directories as needed</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro storage mv</h3>\n<p>Move or rename files and directories.<br><br>SOURCE must contain path to the file or directory existing on the storage,<br>and DESTINATION must contain the full path to the target file or directory.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage mv <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>SOURCES<span class=\"o\">]</span>... <span class=\"o\">[</span>DESTINATION<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># move and rename remote file</span>\nneuro mv storage:foo.txt storage:bar/baz.dat\nneuro mv -T storage:foo.txt storage:bar/baz.dat\n\n<span class=\"c1\"># move remote files into existing remote directory</span>\nneuro mv storage:foo.txt storage:bar/baz.dat storage:dst\nneuro mv storage:foo.txt storage:bar/baz.dat -t storage:dst\n\n<span class=\"c1\"># move the content of remote directory into other existing</span>\n<span class=\"c1\"># remote directory</span>\nneuro mv -T storage:foo storage:bar\n\n<span class=\"c1\"># move remote file into other user's directory</span>\nneuro mv storage:foo.txt storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/bar.dat\n\n<span class=\"c1\"># move remote file from other user's directory</span>\nneuro mv storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/foo.txt storage:bar.dat\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--glob / --no-glob</em></td>\n<td>Expand glob patterns in SOURCES  [default: True]</td>\n</tr>\n<tr>\n<td><em>-t, --target-directory DIRECTORY</em></td>\n<td>Copy all SOURCES into DIRECTORY</td>\n</tr>\n<tr>\n<td><em>-T, --no-target-directory</em></td>\n<td>Treat DESTINATION as a normal file</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro storage tree</h3>\n<p>List contents of directories in a tree-like format.<br><br>Tree is a recursive directory listing program that produces a depth indented<br>listing of files, which is colorized ala dircolors if the LS_COLORS<br>environment variable is set and output is to tty.  With no arguments, tree<br>lists the files in the storage: directory.  When directory arguments are<br>given, tree lists all the files and/or directories found in the given<br>directories each in turn.  Upon completion of listing all files/directories<br>found, tree returns the total number of files and/or directories listed.<br><br>By default PATH is equal user's home dir (storage:)</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage tree <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>PATH<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-a, --all</em></td>\n<td>do not ignore entries starting with .</td>\n</tr>\n<tr>\n<td><em>-h, --human-readable</em></td>\n<td>Print the size in a more human readable way.</td>\n</tr>\n<tr>\n<td><em>-s, --size</em></td>\n<td>Print the size in bytes of each file.</td>\n</tr>\n<tr>\n<td><em>--sort [name | size | time]</em></td>\n<td>sort by given field, default is name</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro storage load</h3>\n<p>Copy files and directories using MinIO (EXPERIMENTAL).<br><br>Same as \"cp\", but uses MinIO and the Amazon S3 protocol.<br>(DEPRECATED)</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro storage load <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>SOURCES<span class=\"o\">]</span>... <span class=\"o\">[</span>DESTINATION<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-r, --recursive</em></td>\n<td>Recursive copy, off by default</td>\n</tr>\n<tr>\n<td><em>--glob / --no-glob</em></td>\n<td>Expand glob patterns in SOURCES with explicit scheme  [default: True]</td>\n</tr>\n<tr>\n<td><em>-t, --target-directory DIRECTORY</em></td>\n<td>Copy all SOURCES into DIRECTORY</td>\n</tr>\n<tr>\n<td><em>-T, --no-target-directory</em></td>\n<td>Treat DESTINATION as a normal file</td>\n</tr>\n<tr>\n<td><em>-u, --update</em></td>\n<td>Copy only when the SOURCE file is newer than the destination file or when the destination file is missing</td>\n</tr>\n<tr>\n<td><em>-p, --progress</em></td>\n<td>Show progress, off by default</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro image</h2>\n<p>Container image operations.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro image <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-image-ls\" rel=\"nofollow\">neuro image ls</a></em></td>\n<td>List images</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-image-push\" rel=\"nofollow\">neuro image push</a></em></td>\n<td>Push an image to platform registry</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-image-pull\" rel=\"nofollow\">neuro image pull</a></em></td>\n<td>Pull an image from platform registry</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-image-tags\" rel=\"nofollow\">neuro image tags</a></em></td>\n<td>List tags for image in platform registry</td>\n</tr></tbody></table>\n<h3>neuro image ls</h3>\n<p>List images.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro image ls <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-l</em></td>\n<td>List in long format.</td>\n</tr>\n<tr>\n<td><em>--full-uri</em></td>\n<td>Output full image URI.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro image push</h3>\n<p>Push an image to platform registry.<br><br>Remote image must be URL with image:// scheme. Image names can contain tag.<br>If tags not specified 'latest' will be used as value.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro image push <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> LOCAL_IMAGE <span class=\"o\">[</span>REMOTE_IMAGE<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro push myimage\nneuro push alpine:latest image:my-alpine:production\nneuro push alpine image://myfriend/alpine:shared\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro image pull</h3>\n<p>Pull an image from platform registry.<br><br>Remote image name must be URL with image:// scheme. Image names can contain<br>tag.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro image pull <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> REMOTE_IMAGE <span class=\"o\">[</span>LOCAL_IMAGE<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro pull image:myimage\nneuro pull image://myfriend/alpine:shared\nneuro pull image://username/my-alpine:production alpine:from-registry\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro image tags</h3>\n<p>List tags for image in platform registry.<br><br>Image name must be URL with image:// scheme.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro image tags <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> IMAGE\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro image tags image://myfriend/alpine\nneuro image tags image:myimage\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro config</h2>\n<p>Client configuration.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-config-login\" rel=\"nofollow\">neuro config login</a></em></td>\n<td>Log into Neuro Platform</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-login-with-token\" rel=\"nofollow\">neuro config login-with-token</a></em></td>\n<td>Log into Neuro Platform with token</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-login-headless\" rel=\"nofollow\">neuro config login-headless</a></em></td>\n<td>Log into Neuro Platform from non-GUI server environment</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-show\" rel=\"nofollow\">neuro config show</a></em></td>\n<td>Print current settings</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-show-token\" rel=\"nofollow\">neuro config show-token</a></em></td>\n<td>Print current authorization token</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-show-quota\" rel=\"nofollow\">neuro config show-quota</a></em></td>\n<td>Print quota and remaining computation time for active cluster</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-aliases\" rel=\"nofollow\">neuro config aliases</a></em></td>\n<td>List available command aliases</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-get-clusters\" rel=\"nofollow\">neuro config get-clusters</a></em></td>\n<td>Fetch and display the list of available clusters</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-switch-cluster\" rel=\"nofollow\">neuro config switch-cluster</a></em></td>\n<td>Switch the active cluster</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-docker\" rel=\"nofollow\">neuro config docker</a></em></td>\n<td>Configure docker client to fit the Neuro Platform</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-config-logout\" rel=\"nofollow\">neuro config logout</a></em></td>\n<td>Log out</td>\n</tr></tbody></table>\n<h3>neuro config login</h3>\n<p>Log into Neuro Platform.<br><br>URL is a platform entrypoint URL.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config login <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>URL<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config login-with-token</h3>\n<p>Log into Neuro Platform with token.<br><br>TOKEN is authentication token provided by administration team. URL is a<br>platform entrypoint URL.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config login-with-token <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> TOKEN <span class=\"o\">[</span>URL<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config login-headless</h3>\n<p>Log into Neuro Platform from non-GUI server environment.<br><br>URL is a platform entrypoint URL.<br><br>The command works similar to \"neuro login\" but instead of opening a browser<br>for performing OAuth registration prints an URL that should be open on guest<br>host.<br><br>Then user inputs a code displayed in a browser after successful login back<br>in neuro command to finish the login process.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config login-headless <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>URL<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config show</h3>\n<p>Print current settings.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config show <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config show-token</h3>\n<p>Print current authorization token.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config show-token <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config show-quota</h3>\n<p>Print quota and remaining computation time for active cluster.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config show-quota <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>USER<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config aliases</h3>\n<p>List available command aliases.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config aliases <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config get-clusters</h3>\n<p>Fetch and display the list of available clusters.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config get-clusters <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config switch-cluster</h3>\n<p>Switch the active cluster.<br><br>CLUSTER_NAME is the cluster name to select.  The interactive prompt is used<br>if the name is omitted (default).</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config switch-cluster <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>CLUSTER_NAME<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config docker</h3>\n<p>Configure docker client to fit the Neuro Platform.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config docker <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--docker-config PATH</em></td>\n<td>Specifies the location of the Docker client configuration files</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro config logout</h3>\n<p>Log out.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro config <span class=\"nb\">logout</span> <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro completion</h2>\n<p>Output shell completion code.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro completion <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-completion-generate\" rel=\"nofollow\">neuro completion generate</a></em></td>\n<td>Provide an instruction for shell completion generation</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-completion-patch\" rel=\"nofollow\">neuro completion patch</a></em></td>\n<td>Automatically patch shell configuration profile to enable completion</td>\n</tr></tbody></table>\n<h3>neuro completion generate</h3>\n<p>Provide an instruction for shell completion generation.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro completion generate <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>bash<span class=\"p\">|</span>zsh<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro completion patch</h3>\n<p>Automatically patch shell configuration profile to enable completion</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro completion patch <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>bash<span class=\"p\">|</span>zsh<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro acl</h2>\n<p>Access Control List management.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro acl <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-acl-grant\" rel=\"nofollow\">neuro acl grant</a></em></td>\n<td>Shares resource with another user</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-acl-revoke\" rel=\"nofollow\">neuro acl revoke</a></em></td>\n<td>Revoke user access from another user</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-acl-list\" rel=\"nofollow\">neuro acl list</a></em></td>\n<td>List shared resources</td>\n</tr></tbody></table>\n<h3>neuro acl grant</h3>\n<p>Shares resource with another user.<br><br>URI shared resource.<br><br>USER username to share resource with.<br><br>PERMISSION sharing access right: read, write, or manage.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro acl grant <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> URI USER <span class=\"o\">[</span>read<span class=\"p\">|</span>write<span class=\"p\">|</span>manage<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro acl grant storage:///sample_data/ alice manage\nneuro acl grant image:resnet50 bob <span class=\"nb\">read</span>\nneuro acl grant job:///my_job_id alice write\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro acl revoke</h3>\n<p>Revoke user access from another user.<br><br>URI previously shared resource to revoke.<br><br>USER to revoke URI resource from.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro acl revoke <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> URI USER\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro acl revoke storage:///sample_data/ alice\nneuro acl revoke image:resnet50 bob\nneuro acl revoke job:///my_job_id alice\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro acl list</h3>\n<p>List shared resources.<br><br>The command displays a list of resources shared BY current user (default).<br><br>To display a list of resources shared WITH current user apply --shared<br>option.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro acl list <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro acl list\nneuro acl list --scheme storage\nneuro acl list --shared\nneuro acl list --shared --scheme image\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-u TEXT</em></td>\n<td>Use specified user or role.</td>\n</tr>\n<tr>\n<td><em>-s, --scheme TEXT</em></td>\n<td>Filter resources by scheme, e.g. job, storage, image or user.</td>\n</tr>\n<tr>\n<td><em>--shared</em></td>\n<td>Output the resources shared by the user.</td>\n</tr>\n<tr>\n<td><em>--full-uri</em></td>\n<td>Output full URI.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro blob</h2>\n<p>Blob storage operations.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro blob <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<p><strong>Commands:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><a href=\"#neuro-blob-cp\" rel=\"nofollow\">neuro blob cp</a></em></td>\n<td>Simple utility to copy files and directories into and from Blob Storage</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-blob-ls\" rel=\"nofollow\">neuro blob ls</a></em></td>\n<td>List buckets or bucket contents</td>\n</tr>\n<tr>\n<td><em><a href=\"#neuro-blob-glob\" rel=\"nofollow\">neuro blob glob</a></em></td>\n<td>List resources that match PATTERNS</td>\n</tr></tbody></table>\n<h3>neuro blob cp</h3>\n<p>Simple utility to copy files and directories into and from Blob Storage.<br>Either SOURCES or DESTINATION should have <code>blob://</code> scheme. If scheme is<br>omitted, file:// scheme is assumed. It is currently not possible to copy<br>files between Blob Storage (<code>blob://</code>) destination, nor with <code>storage://</code><br>scheme paths. Use <code>/dev/stdin</code> and <code>/dev/stdout</code> file names to upload a file<br>from standard input or output to stdout. File permissions, modification<br>times and other attributes will not be passed to Blob Storage metadata<br>during upload.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro blob cp <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>SOURCES<span class=\"o\">]</span>... <span class=\"o\">[</span>DESTINATION<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-r, --recursive</em></td>\n<td>Recursive copy, off by default</td>\n</tr>\n<tr>\n<td><em>--glob / --no-glob</em></td>\n<td>Expand glob patterns in SOURCES with explicit scheme.  [default: True]</td>\n</tr>\n<tr>\n<td><em>-t, --target-directory DIRECTORY</em></td>\n<td>Copy all SOURCES into DIRECTORY.</td>\n</tr>\n<tr>\n<td><em>-T, --no-target-directory</em></td>\n<td>Treat DESTINATION as a normal file.</td>\n</tr>\n<tr>\n<td><em>--exclude</em></td>\n<td>Exclude files and directories that match the specified pattern. The default can be changed using the storage.cp-exclude configuration variable documented in \"neuro help user-config\"</td>\n</tr>\n<tr>\n<td><em>--include</em></td>\n<td>Don't exclude files and directories that match the specified pattern. The default can be changed using the storage.cp-exclude configuration variable documented in \"neuro help user-config\"</td>\n</tr>\n<tr>\n<td><em>-p, --progress / -P, --no-progress</em></td>\n<td>Show progress, on by default.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro blob ls</h3>\n<p>List buckets or bucket contents.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro blob ls <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>PATHS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-h, --human-readable</em></td>\n<td>with -l print human readable sizes (e.g., 2K, 540M).</td>\n</tr>\n<tr>\n<td><em>-l</em></td>\n<td>use a long listing format.</td>\n</tr>\n<tr>\n<td><em>--sort [name | size | time]</em></td>\n<td>sort by given field, default is name.</td>\n</tr>\n<tr>\n<td><em>-r, --recursive</em></td>\n<td>List all keys under the URL path provided, not just 1 level depths.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h3>neuro blob glob</h3>\n<p>List resources that match PATTERNS.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro blob glob <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>PATTERNS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro help</h2>\n<p>Get help on a command.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro <span class=\"nb\">help</span> <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>COMMAND<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro run</h2>\n<p>Run a job with predefined resources configuration.<br><br>IMAGE container image name.<br><br>CMD list will be passed as commands to model container.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro run <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> IMAGE <span class=\"o\">[</span>CMD<span class=\"o\">]</span>...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Starts a container pytorch:latest on a machine with smaller GPU resources</span>\n<span class=\"c1\"># (see exact values in `neuro config show`) and with two volumes mounted:</span>\n<span class=\"c1\">#   storage://&lt;home-directory&gt;   --&gt; /var/storage/home (in read-write mode),</span>\n<span class=\"c1\">#   storage://neuromation/public --&gt; /var/storage/neuromation (in read-only mode).</span>\nneuro run --preset<span class=\"o\">=</span>gpu-small --volume<span class=\"o\">=</span>HOME pytorch:latest\n\n<span class=\"c1\"># Starts a container using the custom image my-ubuntu:latest stored in neuromation</span>\n<span class=\"c1\"># registry, run /script.sh and pass arg1 and arg2 as its arguments:</span>\nneuro run -s cpu-small image:my-ubuntu:latest --entrypoint<span class=\"o\">=</span>/script.sh arg1 arg2\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-s, --preset PRESET</em></td>\n<td>Predefined resource configuration (to see available values, run <code>neuro config show</code>)</td>\n</tr>\n<tr>\n<td><em>-x, --extshm / -X, --no-extshm</em></td>\n<td>Request extended '/dev/shm' space  [default: True]</td>\n</tr>\n<tr>\n<td><em>--http PORT</em></td>\n<td>Enable HTTP port forwarding to container  [default: 80]</td>\n</tr>\n<tr>\n<td><em>--http-auth / --no-http-auth</em></td>\n<td>Enable HTTP authentication for forwarded HTTP port  [default: True]</td>\n</tr>\n<tr>\n<td><em>-n, --name NAME</em></td>\n<td>Optional job name</td>\n</tr>\n<tr>\n<td><em>--tag TAG</em></td>\n<td>Optional job tag, multiple values allowed</td>\n</tr>\n<tr>\n<td><em>-d, --description DESC</em></td>\n<td>Optional job description in free format</td>\n</tr>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>-v, --volume MOUNT</em></td>\n<td>Mounts directory from vault into container. Use multiple options to mount more than one volume. --volume=HOME is an alias for storage::/var/storage/home:rw and storage://neuromation/public:/var/storage/neuromation:ro</td>\n</tr>\n<tr>\n<td><em>--entrypoint TEXT</em></td>\n<td>Executable entrypoint in the container (note that it overwrites <code>ENTRYPOINT</code> and <code>CMD</code> instructions of the docker image)</td>\n</tr>\n<tr>\n<td><em>-e, --env VAR=VAL</em></td>\n<td>Set environment variable in container Use multiple options to define more than one variable</td>\n</tr>\n<tr>\n<td><em>--env-file PATH</em></td>\n<td>File with environment variables to pass</td>\n</tr>\n<tr>\n<td><em>--life-span TIMEDELTA</em></td>\n<td>Optional job run-time limit in the format '1d2h3m4s' (some parts may be missing). Set '0' to disable. Default value '1d' can be changed in the user config.</td>\n</tr>\n<tr>\n<td><em>--wait-start / --no-wait-start</em></td>\n<td>Wait for a job start or failure  [default: True]</td>\n</tr>\n<tr>\n<td><em>--pass-config / --no-pass-config</em></td>\n<td>Upload neuro config to the job  [default: False]</td>\n</tr>\n<tr>\n<td><em>--browse</em></td>\n<td>Open a job's URL in a web browser</td>\n</tr>\n<tr>\n<td><em>--detach</em></td>\n<td>Don't attach to job logs and don't wait for exit code</td>\n</tr>\n<tr>\n<td><em>-t, --tty</em></td>\n<td>Allocate a TTY</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro submit</h2>\n<p>Submit an image to run on the cluster.<br><br>IMAGE container image name.<br><br>CMD list will be passed as commands to model container.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro submit <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> IMAGE <span class=\"o\">[</span>CMD<span class=\"o\">]</span>...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Starts a container pytorch:latest with two paths mounted. Directory /q1/</span>\n<span class=\"c1\"># is mounted in read only mode to /qm directory within container.</span>\n<span class=\"c1\"># Directory /mod mounted to /mod directory in read-write mode.</span>\nneuro submit --volume storage:/q1:/qm:ro --volume storage:/mod:/mod:rw pytorch:latest\n\n<span class=\"c1\"># Starts a container using the custom image my-ubuntu:latest stored in neuromation</span>\n<span class=\"c1\"># registry, run /script.sh and pass arg1 arg2 arg3 as its arguments:</span>\nneuro submit image:my-ubuntu:latest --entrypoint<span class=\"o\">=</span>/script.sh arg1 arg2 arg3\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-g, --gpu NUMBER</em></td>\n<td>Number of GPUs to request  [default: 0]</td>\n</tr>\n<tr>\n<td><em>--gpu-model MODEL</em></td>\n<td>GPU to use  [default: nvidia-tesla-k80]</td>\n</tr>\n<tr>\n<td><em>--tpu-type TYPE</em></td>\n<td>TPU type to use</td>\n</tr>\n<tr>\n<td><em>--tpu-sw-version VERSION</em></td>\n<td>Requested TPU software version</td>\n</tr>\n<tr>\n<td><em>-c, --cpu NUMBER</em></td>\n<td>Number of CPUs to request  [default: 0.1]</td>\n</tr>\n<tr>\n<td><em>-m, --memory AMOUNT</em></td>\n<td>Memory amount to request  [default: 1G]</td>\n</tr>\n<tr>\n<td><em>-x, --extshm / -X, --no-extshm</em></td>\n<td>Request extended '/dev/shm' space  [default: True]</td>\n</tr>\n<tr>\n<td><em>--http PORT</em></td>\n<td>Enable HTTP port forwarding to container</td>\n</tr>\n<tr>\n<td><em>--http-auth / --no-http-auth</em></td>\n<td>Enable HTTP authentication for forwarded HTTP port  [default: True]</td>\n</tr>\n<tr>\n<td><em>-p, --preemptible / -P, --non-preemptible</em></td>\n<td>Run job on a lower-cost preemptible instance  [default: False]</td>\n</tr>\n<tr>\n<td><em>-n, --name NAME</em></td>\n<td>Optional job name</td>\n</tr>\n<tr>\n<td><em>--tag TAG</em></td>\n<td>Optional job tag, multiple values allowed</td>\n</tr>\n<tr>\n<td><em>-d, --description DESC</em></td>\n<td>Optional job description in free format</td>\n</tr>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>-v, --volume MOUNT</em></td>\n<td>Mounts directory from vault into container. Use multiple options to mount more than one volume. --volume=HOME is an alias for storage::/var/storage/home:rw and storage://neuromation/public:/var/storage/neuromation:ro</td>\n</tr>\n<tr>\n<td><em>--entrypoint TEXT</em></td>\n<td>Executable entrypoint in the container (note that it overwrites <code>ENTRYPOINT</code> and <code>CMD</code> instructions of the docker image)</td>\n</tr>\n<tr>\n<td><em>-e, --env VAR=VAL</em></td>\n<td>Set environment variable in container Use multiple options to define more than one variable</td>\n</tr>\n<tr>\n<td><em>--env-file PATH</em></td>\n<td>File with environment variables to pass</td>\n</tr>\n<tr>\n<td><em>--life-span TIMEDELTA</em></td>\n<td>Optional job run-time limit in the format '1d2h3m4s' (some parts may be missing). Set '0' to disable. Default value '1d' can be changed in the user config.</td>\n</tr>\n<tr>\n<td><em>--wait-start / --no-wait-start</em></td>\n<td>Wait for a job start or failure  [default: True]</td>\n</tr>\n<tr>\n<td><em>--pass-config / --no-pass-config</em></td>\n<td>Upload neuro config to the job  [default: False]</td>\n</tr>\n<tr>\n<td><em>--browse</em></td>\n<td>Open a job's URL in a web browser</td>\n</tr>\n<tr>\n<td><em>--detach</em></td>\n<td>Don't attach to job logs and don't wait for exit code</td>\n</tr>\n<tr>\n<td><em>-t, --tty</em></td>\n<td>Allocate a TTY</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro ps</h2>\n<p>List all jobs.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro ps <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro ps -a\nneuro ps -a --owner<span class=\"o\">=</span>user-1 --owner<span class=\"o\">=</span>user-2\nneuro ps --name my-experiments-v1 -s failed -s succeeded\nneuro ps --description<span class=\"o\">=</span>my favourite job\nneuro ps -s failed -s succeeded -q\nneuro ps -t tag1 -t tag2\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-s, --status [pending | running | succeeded | failed | all]</em></td>\n<td>Filter out jobs by status (multiple option). Note: option <code>all</code> is deprecated, use <code>neuro ps -a</code> instead.</td>\n</tr>\n<tr>\n<td><em>-o, --owner TEXT</em></td>\n<td>Filter out jobs by owner (multiple option).</td>\n</tr>\n<tr>\n<td><em>-n, --name NAME</em></td>\n<td>Filter out jobs by name.</td>\n</tr>\n<tr>\n<td><em>-t, --tag TAG</em></td>\n<td>Filter out jobs by tag (multiple option)</td>\n</tr>\n<tr>\n<td><em>-d, --description DESCRIPTION</em></td>\n<td>Filter out jobs by description (exact match).</td>\n</tr>\n<tr>\n<td><em>--since DATE</em></td>\n<td>Show jobs created after a specific date (including).</td>\n</tr>\n<tr>\n<td><em>--until DATE</em></td>\n<td>Show jobs created before a specific date (including).</td>\n</tr>\n<tr>\n<td><em>-a, --all</em></td>\n<td>Show all jobs regardless the status (equivalent to <code>\\-s pending -s running -s succeeded -s failed</code>).</td>\n</tr>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>-w, --wide</em></td>\n<td>Do not cut long lines for terminal width.</td>\n</tr>\n<tr>\n<td><em>--format COLUMNS</em></td>\n<td>Output table format, see \"neuro help ps-format\" for more info about the format specification. The default can be changed using the job.ps-format configuration variable documented in \"neuro help user-config\"</td>\n</tr>\n<tr>\n<td><em>--full-uri</em></td>\n<td>Output full image URI.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro status</h2>\n<p>Display status of a job.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro status <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--full-uri</em></td>\n<td>Output full URI.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro exec</h2>\n<p>Execute command in a running job.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro <span class=\"nb\">exec</span> <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB CMD...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Provides a shell to the container:</span>\nneuro <span class=\"nb\">exec</span> my-job /bin/bash\n\n<span class=\"c1\"># Executes a single command in the container and returns the control:</span>\nneuro <span class=\"nb\">exec</span> --no-tty my-job ls -l\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-t, --tty / -T, --no-tty</em></td>\n<td>Allocate virtual tty. Useful for interactive jobs.</td>\n</tr>\n<tr>\n<td><em>--no-key-check</em></td>\n<td>Disable host key checks. Should be used with caution.</td>\n</tr>\n<tr>\n<td><em>--timeout FLOAT</em></td>\n<td>Maximum allowed time for executing the command, 0 for no timeout  [default: 0]</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro port-forward</h2>\n<p>Forward port(s) of a running job to local port(s).<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro port-forward <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB LOCAL_REMOTE_PORT...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># Forward local port 2080 to port 80 of job's container.</span>\n<span class=\"c1\"># You can use http://localhost:2080 in browser to access job's served http</span>\nneuro job port-forward my-fastai-job <span class=\"m\">2080</span>:80\n\n<span class=\"c1\"># Forward local port 2222 to job's port 22</span>\n<span class=\"c1\"># Then copy all data from container's folder '/data' to current folder</span>\n<span class=\"c1\"># (please run second command in other terminal)</span>\nneuro job port-forward my-job-with-ssh-server <span class=\"m\">2222</span>:22\nrsync -avxzhe ssh -p <span class=\"m\">2222</span> root@localhost:/data .\n\n<span class=\"c1\"># Forward few ports at once</span>\nneuro job port-forward my-job- <span class=\"m\">2080</span>:80 <span class=\"m\">2222</span>:22 <span class=\"m\">2000</span>:100\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--no-key-check</em></td>\n<td>Disable host key checks. Should be used with caution.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro logs</h2>\n<p>Print the logs for a container.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro logs <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro kill</h2>\n<p>Kill job(s).</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro <span class=\"nb\">kill</span> <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOBS...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro top</h2>\n<p>Display GPU/CPU/Memory usage.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro top <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--timeout FLOAT</em></td>\n<td>Maximum allowed time for executing the command, 0 for no timeout  [default: 0]</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro save</h2>\n<p>Save job's state to an image.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro save <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> JOB IMAGE\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro job save job-id image:ubuntu-patched\nneuro job save my-favourite-job image:ubuntu-patched:v1\nneuro job save my-favourite-job image://bob/ubuntu-patched\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro login</h2>\n<p>Log into Neuro Platform.<br><br>URL is a platform entrypoint URL.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro login <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>URL<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro logout</h2>\n<p>Log out.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro <span class=\"nb\">logout</span> <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro cp</h2>\n<p>Copy files and directories.<br><br>Either SOURCES or DESTINATION should have storage:// scheme. If scheme is<br>omitted, file:// scheme is assumed.<br><br>Use /dev/stdin and /dev/stdout file names to copy a file from terminal and<br>print the content of file on the storage to console.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro cp <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>SOURCES<span class=\"o\">]</span>... <span class=\"o\">[</span>DESTINATION<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># copy local files into remote storage root</span>\nneuro cp foo.txt bar/baz.dat storage:\nneuro cp foo.txt bar/baz.dat -t storage:\n\n<span class=\"c1\"># copy local directory `foo` into existing remote directory `bar`</span>\nneuro cp -r foo -t storage:bar\n\n<span class=\"c1\"># copy the content of local directory `foo` into existing remote</span>\n<span class=\"c1\"># directory `bar`</span>\nneuro cp -r -T storage:foo storage:bar\n\n<span class=\"c1\"># download remote file `foo.txt` into local file `/tmp/foo.txt` with</span>\n<span class=\"c1\"># explicit file:// scheme set</span>\nneuro cp storage:foo.txt file:///tmp/foo.txt\nneuro cp -T storage:foo.txt file:///tmp/foo.txt\nneuro cp storage:foo.txt file:///tmp\nneuro cp storage:foo.txt -t file:///tmp\n\n<span class=\"c1\"># download other user's remote file into the current directory</span>\nneuro cp storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/foo.txt .\n\n<span class=\"c1\"># download only files with extension `.out` into the current directory</span>\nneuro cp storage:results/*.out .\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-r, --recursive</em></td>\n<td>Recursive copy, off by default</td>\n</tr>\n<tr>\n<td><em>--glob / --no-glob</em></td>\n<td>Expand glob patterns in SOURCES with explicit scheme.  [default: True]</td>\n</tr>\n<tr>\n<td><em>-t, --target-directory DIRECTORY</em></td>\n<td>Copy all SOURCES into DIRECTORY.</td>\n</tr>\n<tr>\n<td><em>-T, --no-target-directory</em></td>\n<td>Treat DESTINATION as a normal file.</td>\n</tr>\n<tr>\n<td><em>-u, --update</em></td>\n<td>Copy only when the SOURCE file is newer than the destination file or when the destination file is missing.</td>\n</tr>\n<tr>\n<td><em>--exclude</em></td>\n<td>Exclude files and directories that match the specified pattern. The default can be changed using the storage.cp-exclude configuration variable documented in \"neuro help user-config\"</td>\n</tr>\n<tr>\n<td><em>--include</em></td>\n<td>Don't exclude files and directories that match the specified pattern. The default can be changed using the storage.cp-exclude configuration variable documented in \"neuro help user-config\"</td>\n</tr>\n<tr>\n<td><em>-p, --progress / -P, --no-progress</em></td>\n<td>Show progress, on by default.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro ls</h2>\n<p>List directory contents.<br><br>By default PATH is equal user's home dir (storage:)</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro ls <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>PATHS<span class=\"o\">]</span>...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-a, --all</em></td>\n<td>do not ignore entries starting with .</td>\n</tr>\n<tr>\n<td><em>-d, --directory</em></td>\n<td>list directories themselves, not their contents.</td>\n</tr>\n<tr>\n<td><em>-h, --human-readable</em></td>\n<td>with -l print human readable sizes (e.g., 2K, 540M).</td>\n</tr>\n<tr>\n<td><em>-l</em></td>\n<td>use a long listing format.</td>\n</tr>\n<tr>\n<td><em>--sort [name | size | time]</em></td>\n<td>sort by given field, default is name.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro rm</h2>\n<p>Remove files or directories.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro rm <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> PATHS...\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro rm storage:foo/bar\nneuro rm storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/foo/bar\nneuro rm --recursive storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/foo/\nneuro rm storage:foo/**/*.tmp\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-r, --recursive</em></td>\n<td>remove directories and their contents recursively</td>\n</tr>\n<tr>\n<td><em>--glob / --no-glob</em></td>\n<td>Expand glob patterns in PATHS  [default: True]</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro mkdir</h2>\n<p>Make directories.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro mkdir <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> PATHS...\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-p, --parents</em></td>\n<td>No error if existing, make parent directories as needed</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro mv</h2>\n<p>Move or rename files and directories.<br><br>SOURCE must contain path to the file or directory existing on the storage,<br>and DESTINATION must contain the full path to the target file or directory.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro mv <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>SOURCES<span class=\"o\">]</span>... <span class=\"o\">[</span>DESTINATION<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre><span class=\"c1\"># move and rename remote file</span>\nneuro mv storage:foo.txt storage:bar/baz.dat\nneuro mv -T storage:foo.txt storage:bar/baz.dat\n\n<span class=\"c1\"># move remote files into existing remote directory</span>\nneuro mv storage:foo.txt storage:bar/baz.dat storage:dst\nneuro mv storage:foo.txt storage:bar/baz.dat -t storage:dst\n\n<span class=\"c1\"># move the content of remote directory into other existing</span>\n<span class=\"c1\"># remote directory</span>\nneuro mv -T storage:foo storage:bar\n\n<span class=\"c1\"># move remote file into other user's directory</span>\nneuro mv storage:foo.txt storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/bar.dat\n\n<span class=\"c1\"># move remote file from other user's directory</span>\nneuro mv storage://<span class=\"o\">{</span>username<span class=\"o\">}</span>/foo.txt storage:bar.dat\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--glob / --no-glob</em></td>\n<td>Expand glob patterns in SOURCES  [default: True]</td>\n</tr>\n<tr>\n<td><em>-t, --target-directory DIRECTORY</em></td>\n<td>Copy all SOURCES into DIRECTORY</td>\n</tr>\n<tr>\n<td><em>-T, --no-target-directory</em></td>\n<td>Treat DESTINATION as a normal file</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro images</h2>\n<p>List images.</p>\n<p><strong>Usage:</strong></p>\n<pre>neuro images <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-l</em></td>\n<td>List in long format.</td>\n</tr>\n<tr>\n<td><em>--full-uri</em></td>\n<td>Output full image URI.</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro push</h2>\n<p>Push an image to platform registry.<br><br>Remote image must be URL with image:// scheme. Image names can contain tag.<br>If tags not specified 'latest' will be used as value.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro push <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> LOCAL_IMAGE <span class=\"o\">[</span>REMOTE_IMAGE<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro push myimage\nneuro push alpine:latest image:my-alpine:production\nneuro push alpine image://myfriend/alpine:shared\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro pull</h2>\n<p>Pull an image from platform registry.<br><br>Remote image name must be URL with image:// scheme. Image names can contain<br>tag.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro pull <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> REMOTE_IMAGE <span class=\"o\">[</span>LOCAL_IMAGE<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro pull image:myimage\nneuro pull image://myfriend/alpine:shared\nneuro pull image://username/my-alpine:production alpine:from-registry\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>-q, --quiet</em></td>\n<td>Run command in quiet mode (DEPRECATED)</td>\n</tr>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h2>neuro share</h2>\n<p>Shares resource with another user.<br><br>URI shared resource.<br><br>USER username to share resource with.<br><br>PERMISSION sharing access right: read, write, or manage.<br></p>\n<p><strong>Usage:</strong></p>\n<pre>neuro share <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> URI USER <span class=\"o\">[</span>read<span class=\"p\">|</span>write<span class=\"p\">|</span>manage<span class=\"o\">]</span>\n</pre>\n<p><strong>Examples:</strong></p>\n<pre>neuro acl grant storage:///sample_data/ alice manage\nneuro acl grant image:resnet50 bob <span class=\"nb\">read</span>\nneuro acl grant job:///my_job_id alice write\n</pre>\n<p><strong>Options:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>--help</em></td>\n<td>Show this message and exit.</td>\n</tr></tbody></table>\n<h1>Api</h1>\n<p><em>TODO</em></p>\n<h1>Contributing</h1>\n<pre>git clone https://github.com/neuromation/platform-api-clients.git\n<span class=\"nb\">cd</span> platform-api-clients/python\n</pre>\n<p>For OSX users install coreutils to properly interpret shell commands:</p>\n<pre><code>brew install coreutils\n</code></pre>\n<p>Before you begin, it is recommended to have clean virtual environment installed:</p>\n<pre>python -m venv .env\n<span class=\"nb\">source</span> .env/bin/activate\n</pre>\n<p>Development flow:</p>\n<ul>\n<li>Install dependencies: <code>make init</code></li>\n<li>Run tests: <code>make test</code></li>\n<li>Lint: <code>make lint</code></li>\n<li>Publish to <a href=\"https://pypi.org/project/neuromation/\" rel=\"nofollow\">pypi</a>: <code>make publish</code></li>\n</ul>\n\n          </div>"}, "last_serial": 7090513, "releases": {"0.1.5b0": [{"comment_text": "", "digests": {"md5": "d6e9e0c4c23272994a1097db7444593c", "sha256": "0b27523875646558a3dd9f432e4c9f41a15b89ef29eee73f95fd10b23fdd8c9a"}, "downloads": -1, "filename": "neuromation-0.1.5b0-py3-none-any.whl", "has_sig": false, "md5_digest": "d6e9e0c4c23272994a1097db7444593c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 36184, "upload_time": "2018-11-30T17:53:30", "upload_time_iso_8601": "2018-11-30T17:53:30.177965Z", "url": "https://files.pythonhosted.org/packages/28/bf/df5161065ffc64ae944276b0a5a83ac69175eb3bed5435fe16920fd59f4e/neuromation-0.1.5b0-py3-none-any.whl", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "ea0f7096dedec1e68ab2df1aeec77fba", "sha256": "6faad9f9f6301bb011fa70d8631d0b38759b6ce21e2278971074ee02c7d52cde"}, "downloads": -1, "filename": "neuromation-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ea0f7096dedec1e68ab2df1aeec77fba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 42060, "upload_time": "2018-12-20T13:44:47", "upload_time_iso_8601": "2018-12-20T13:44:47.616849Z", "url": "https://files.pythonhosted.org/packages/45/1b/53c0f734df23d25fb44c2e7cdb56bd5b33ed38c888f5de46f42f9741c435/neuromation-0.1.6-py3-none-any.whl", "yanked": false}], "0.2.0b0": [{"comment_text": "", "digests": {"md5": "bc66247d61fcedb18e6dcc87f4f2bbbe", "sha256": "6747274972648f09e7e3eccdc922ae64f01d8034bf0abe9d8ba44f59635bac6e"}, "downloads": -1, "filename": "neuromation-0.2.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "bc66247d61fcedb18e6dcc87f4f2bbbe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 47043, "upload_time": "2019-01-28T20:01:21", "upload_time_iso_8601": "2019-01-28T20:01:21.008186Z", "url": "https://files.pythonhosted.org/packages/bb/c2/4606fc25939490e332c13b8b918331ff78e4e653870bfb8583a3a41b19b2/neuromation-0.2.0b0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "8dd303ee04215ff7f5c2e7f03a6409da", "sha256": "fd50b1f90ceb2dd724c4bd108008394f74f30af6213c363ec5a83f3168aae1b8"}, "downloads": -1, "filename": "neuromation-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8dd303ee04215ff7f5c2e7f03a6409da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 48633, "upload_time": "2019-01-29T23:45:22", "upload_time_iso_8601": "2019-01-29T23:45:22.988252Z", "url": "https://files.pythonhosted.org/packages/de/15/ca2e8c4ede747a6042761fff3158e126716010c5ec52cb96ac695be8dbbe/neuromation-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "99372b58c92246be262f85123d6910c7", "sha256": "a6a991c4023159f8a972b3ce81d9be552b0e4b03b6aa3b04b95321c2ee21a3a7"}, "downloads": -1, "filename": "neuromation-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "99372b58c92246be262f85123d6910c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 51229, "upload_time": "2019-01-31T21:04:51", "upload_time_iso_8601": "2019-01-31T21:04:51.193184Z", "url": "https://files.pythonhosted.org/packages/4a/92/3ca9fb7a0f61cbe2ee95d07fc679d9f403e84551d443c51dac75c0edb535/neuromation-0.2.2-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "67db8371649d80c11fc9d12647962ee9", "sha256": "e74c53c8c1b979ac6a3e86ee534f3e240d78d9635a385b224e20db57acb2d7b3"}, "downloads": -1, "filename": "neuromation-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "67db8371649d80c11fc9d12647962ee9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 54084, "upload_time": "2019-02-02T12:47:12", "upload_time_iso_8601": "2019-02-02T12:47:12.859145Z", "url": "https://files.pythonhosted.org/packages/77/21/0a44a70a000bbd6ef0a3744862bd66b60ca5abc599edcec84080906feceb/neuromation-0.3.0-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "af2928848cdba1329c303990b69ec488", "sha256": "797d190ebf44180c19d4cf5a550b556e053718f5a76dc58a8ed6af4d8fd26b97"}, "downloads": -1, "filename": "neuromation-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "af2928848cdba1329c303990b69ec488", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 58523, "upload_time": "2019-02-12T13:52:43", "upload_time_iso_8601": "2019-02-12T13:52:43.766777Z", "url": "https://files.pythonhosted.org/packages/d8/5c/1f3538bf8042636b759957df006eab4233fc462045ede84a9a966287a2ef/neuromation-0.4.0-py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "732798a794dd5bb412c316fe63d51dda", "sha256": "861c6983b23657fb0a9f4cfe20c55ef95563eb95d3506cd3a4b4e1e2d1b1fb68"}, "downloads": -1, "filename": "neuromation-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "732798a794dd5bb412c316fe63d51dda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 58653, "upload_time": "2019-02-15T17:09:05", "upload_time_iso_8601": "2019-02-15T17:09:05.869319Z", "url": "https://files.pythonhosted.org/packages/56/25/1224eaf5e2355456f6d7918d64f0bbe142158cf7d6519ef6e758496c8fc7/neuromation-0.5.0-py3-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "4088c916c4dbf03e2013314af79f4523", "sha256": "47501a68ff90e67e7540d72a73885a4724b9a63c472f2d3b3ee207230033cd90"}, "downloads": -1, "filename": "neuromation-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4088c916c4dbf03e2013314af79f4523", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 63922, "upload_time": "2019-03-01T14:10:17", "upload_time_iso_8601": "2019-03-01T14:10:17.646112Z", "url": "https://files.pythonhosted.org/packages/0c/31/9a75e4f819fd63efb270fb32600e4014cc1bd6c3c4b0236f6968cbc160a4/neuromation-0.6.0-py3-none-any.whl", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "526cf7193f7438cfd913ea1915bc42b5", "sha256": "e20feaafc6cc8f38cea12db45ff07d080ba6264a30df014684d456f0d2dc5877"}, "downloads": -1, "filename": "neuromation-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "526cf7193f7438cfd913ea1915bc42b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 63927, "upload_time": "2019-03-04T16:23:43", "upload_time_iso_8601": "2019-03-04T16:23:43.330195Z", "url": "https://files.pythonhosted.org/packages/cb/6d/c3f21e8cb9f74cc33fb1d524b700e06bdaf3fc1ae030e774eb93f6acc989/neuromation-0.6.1-py3-none-any.whl", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "240feb4a0e5482c4ec2dfe38a1dd55e4", "sha256": "c12d872187db2a8eb5d1084fc29ff1ae426e0da09bd5958024bb6c3998af286e"}, "downloads": -1, "filename": "neuromation-0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "240feb4a0e5482c4ec2dfe38a1dd55e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 63949, "upload_time": "2019-03-07T16:00:19", "upload_time_iso_8601": "2019-03-07T16:00:19.650508Z", "url": "https://files.pythonhosted.org/packages/ef/5e/7372af36ef6ab9af21a1b51b2f5f38c4bc3a3b7101f1f5598a10d362fbd4/neuromation-0.6.2-py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "c37442832975aa53860238e9342d02f9", "sha256": "9e77e3667ba4622eb2c43a4ad2813590b4aa73ce6cc991a7a6ed18801b357c15"}, "downloads": -1, "filename": "neuromation-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c37442832975aa53860238e9342d02f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 64241, "upload_time": "2019-03-14T17:30:24", "upload_time_iso_8601": "2019-03-14T17:30:24.361642Z", "url": "https://files.pythonhosted.org/packages/e7/e7/4f352a5bb602d67bc3c51c2fd0d485273fda842c5b49f141ff949b063b71/neuromation-0.7.0-py3-none-any.whl", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "4ab24b19f93e973994c49e51b2ce3b48", "sha256": "67103f17d7ce95d8c175b9ef8a76c7b4c046a6a4955acf1c9a7212290fd2d83e"}, "downloads": -1, "filename": "neuromation-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4ab24b19f93e973994c49e51b2ce3b48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 63250, "upload_time": "2019-03-15T13:26:04", "upload_time_iso_8601": "2019-03-15T13:26:04.516469Z", "url": "https://files.pythonhosted.org/packages/26/2a/0a65c80e2cef3e4754408cfe9cef1585bdfe4ff7a61a34a3e6b75c453b95/neuromation-0.7.1-py3-none-any.whl", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "49fd6b13da587d3e43743ab073dbc407", "sha256": "a8f291ed5ec533fafbff63db115c0b74468df647bfc0ed8ddaad2d2a32f93599"}, "downloads": -1, "filename": "neuromation-0.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "49fd6b13da587d3e43743ab073dbc407", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 63384, "upload_time": "2019-03-25T21:42:54", "upload_time_iso_8601": "2019-03-25T21:42:54.513215Z", "url": "https://files.pythonhosted.org/packages/5d/7e/17c5c2e2aaf71646a7a43e78df3f92e898684413e3d8759ed92d5962bc33/neuromation-0.7.2-py3-none-any.whl", "yanked": false}], "19.10.11a0": [{"comment_text": "", "digests": {"md5": "b0e9342059ed17148209266008eaadb0", "sha256": "d71eba8de0b49ebc11a3b4d9dcebf575be5f2a604cb933e5b0bbe0fc783356b7"}, "downloads": -1, "filename": "neuromation-19.10.11a0-py3-none-any.whl", "has_sig": false, "md5_digest": "b0e9342059ed17148209266008eaadb0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 95627, "upload_time": "2019-10-11T09:46:00", "upload_time_iso_8601": "2019-10-11T09:46:00.030783Z", "url": "https://files.pythonhosted.org/packages/0e/2d/4e14ab4ffafd451a172300ed67fe577f226a6f8aa6cac7fb823f889ed826/neuromation-19.10.11a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "114262b9959d2afc76de4d5112e3b6cd", "sha256": "5b1373be90243a4f0a07a2e9882d7a247a16d0f3aa9f5daa705abaa3a6f1a571"}, "downloads": -1, "filename": "neuromation-19.10.11a0.tar.gz", "has_sig": false, "md5_digest": "114262b9959d2afc76de4d5112e3b6cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 89705, "upload_time": "2019-10-11T09:46:03", "upload_time_iso_8601": "2019-10-11T09:46:03.828481Z", "url": "https://files.pythonhosted.org/packages/8e/7e/5b70b0984af5a6a4eba934c47910952639f31de657df5962bb0a9f5558a3/neuromation-19.10.11a0.tar.gz", "yanked": false}], "19.10.11a1": [{"comment_text": "", "digests": {"md5": "ebad743e52e9b0ecaf2cbf66fc999c71", "sha256": "683872ed477e4a0f3b561c5dbc2fcb900f52aef1131c6049b35e1cda41b66994"}, "downloads": -1, "filename": "neuromation-19.10.11a1-py3-none-any.whl", "has_sig": false, "md5_digest": "ebad743e52e9b0ecaf2cbf66fc999c71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 95799, "upload_time": "2019-10-11T10:17:25", "upload_time_iso_8601": "2019-10-11T10:17:25.620706Z", "url": "https://files.pythonhosted.org/packages/12/d3/051f0495238cdde67820d598f673c9ad8b322a05fcac31d3e9e7b57e4b38/neuromation-19.10.11a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdd4274828f699c7693c003eb4e1fb27", "sha256": "e72ddb5a2173506d41f2e805eeb35d8064493f47df1117a49d723c89b81be513"}, "downloads": -1, "filename": "neuromation-19.10.11a1.tar.gz", "has_sig": false, "md5_digest": "cdd4274828f699c7693c003eb4e1fb27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 179116, "upload_time": "2019-10-11T10:17:27", "upload_time_iso_8601": "2019-10-11T10:17:27.728449Z", "url": "https://files.pythonhosted.org/packages/c2/8c/c8d806f9f651f24c82c7ac0fb03e1ba407b8f987c8c1322eaa1b77101c0c/neuromation-19.10.11a1.tar.gz", "yanked": false}], "19.11.20": [{"comment_text": "", "digests": {"md5": "3afbbc592311785bf4636da6a0a6ea14", "sha256": "64133049769f3e9c1be13ae7ca0ac4c8dc623669279ad547dda6986ef40e6b84"}, "downloads": -1, "filename": "neuromation-19.11.20-py3-none-any.whl", "has_sig": false, "md5_digest": "3afbbc592311785bf4636da6a0a6ea14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 101522, "upload_time": "2019-11-20T14:26:19", "upload_time_iso_8601": "2019-11-20T14:26:19.437682Z", "url": "https://files.pythonhosted.org/packages/28/3c/607b13d501f1e8e8a9b29ca22c6433a612ba4ecf902d390a94b75340558c/neuromation-19.11.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "190195ddf9708fac83588a1a946f0e96", "sha256": "f417ab9fc8c87a24bf891c56f945ee9f71c0c518e3241fdf209bcda707620266"}, "downloads": -1, "filename": "neuromation-19.11.20.tar.gz", "has_sig": false, "md5_digest": "190195ddf9708fac83588a1a946f0e96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 187939, "upload_time": "2019-11-20T14:26:21", "upload_time_iso_8601": "2019-11-20T14:26:21.618044Z", "url": "https://files.pythonhosted.org/packages/ef/da/0d30d78e15829d2e9199598d9443227b37fc1f1f8c568991106e71e8ff3d/neuromation-19.11.20.tar.gz", "yanked": false}], "19.12.19": [{"comment_text": "", "digests": {"md5": "399550221c50b44e8c9dd83b1ef24266", "sha256": "addb1b22343e13e0383a13c652b9e16255ade030a46772b96499034f46d440ce"}, "downloads": -1, "filename": "neuromation-19.12.19-py3-none-any.whl", "has_sig": false, "md5_digest": "399550221c50b44e8c9dd83b1ef24266", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 108770, "upload_time": "2019-12-19T14:35:38", "upload_time_iso_8601": "2019-12-19T14:35:38.490901Z", "url": "https://files.pythonhosted.org/packages/51/a6/613a7b2b2618f9955cf4956a66c283ef007d26088c292881c56c17cef403/neuromation-19.12.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5a43a7344eeac3f3dfa67289d112288", "sha256": "efc72ce1f0c4ee449b0d620bcfbda8695da5aab0a9102b163be5a6d0df3a6eef"}, "downloads": -1, "filename": "neuromation-19.12.19.tar.gz", "has_sig": false, "md5_digest": "d5a43a7344eeac3f3dfa67289d112288", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 201332, "upload_time": "2019-12-19T14:35:40", "upload_time_iso_8601": "2019-12-19T14:35:40.728968Z", "url": "https://files.pythonhosted.org/packages/ec/db/a47a41985dc76464346457a32b937105141c90e438b5438e689813455a1f/neuromation-19.12.19.tar.gz", "yanked": false}], "19.4.16": [{"comment_text": "", "digests": {"md5": "ac70489ba919215a1725364d4c372ad7", "sha256": "53c37af961a500f0f497510e70b2b7d5fbb04594df2f38ac318612af6c1c4ffd"}, "downloads": -1, "filename": "neuromation-19.4.16-py3-none-any.whl", "has_sig": false, "md5_digest": "ac70489ba919215a1725364d4c372ad7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 70148, "upload_time": "2019-04-16T11:30:41", "upload_time_iso_8601": "2019-04-16T11:30:41.017360Z", "url": "https://files.pythonhosted.org/packages/48/41/a29804f7cd30cb259215ba3c892d924c42f53a742a1c2d59766f6b39c36f/neuromation-19.4.16-py3-none-any.whl", "yanked": false}], "19.4.23": [{"comment_text": "", "digests": {"md5": "c24154c83002609ed38ef57dfe966afb", "sha256": "0c8c721d841ae46195b0270e3564ce1211455b5fbbcc8c68a7ad0719423c3c89"}, "downloads": -1, "filename": "neuromation-19.4.23-py3-none-any.whl", "has_sig": false, "md5_digest": "c24154c83002609ed38ef57dfe966afb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 70184, "upload_time": "2019-04-23T13:53:16", "upload_time_iso_8601": "2019-04-23T13:53:16.448543Z", "url": "https://files.pythonhosted.org/packages/07/4a/bc0c19cbbbf23593de12d03a46da3d6a786b59675ae2b074b5bc997ddab2/neuromation-19.4.23-py3-none-any.whl", "yanked": false}], "19.5.13": [{"comment_text": "", "digests": {"md5": "2228f58e4d603649dec9edd775a13156", "sha256": "e15c13ba121376006838d2e2255257db9461b1bc9e1fe7b70caba19cfefd7cf7"}, "downloads": -1, "filename": "neuromation-19.5.13-py3-none-any.whl", "has_sig": false, "md5_digest": "2228f58e4d603649dec9edd775a13156", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 72517, "upload_time": "2019-05-14T16:27:05", "upload_time_iso_8601": "2019-05-14T16:27:05.476757Z", "url": "https://files.pythonhosted.org/packages/e9/36/8e16de3fe4b2040bc902a08bd04066777f417b49dd2de09381792d2dbbe9/neuromation-19.5.13-py3-none-any.whl", "yanked": false}], "19.6.10": [{"comment_text": "", "digests": {"md5": "a5bd5ef733a082517b6255c06963693a", "sha256": "5695593fd32bb90076de5301f35331691ec1a1042e0e63e92d92e07750b54254"}, "downloads": -1, "filename": "neuromation-19.6.10-py3-none-any.whl", "has_sig": false, "md5_digest": "a5bd5ef733a082517b6255c06963693a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 76701, "upload_time": "2019-06-10T14:13:59", "upload_time_iso_8601": "2019-06-10T14:13:59.998312Z", "url": "https://files.pythonhosted.org/packages/de/7b/b834121aeb7dae85d00da22394584dd4fcc9594bdb3eaaf1c5e533f70f02/neuromation-19.6.10-py3-none-any.whl", "yanked": false}], "19.6.12": [{"comment_text": "", "digests": {"md5": "31db08101ccd8a361e9e6da3c5b0309e", "sha256": "32e33c3e0d9e97b08ade8a858959b66da5e949170879e9bad0e30d2d858255d2"}, "downloads": -1, "filename": "neuromation-19.6.12-py3-none-any.whl", "has_sig": false, "md5_digest": "31db08101ccd8a361e9e6da3c5b0309e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 76712, "upload_time": "2019-06-12T10:49:26", "upload_time_iso_8601": "2019-06-12T10:49:26.740741Z", "url": "https://files.pythonhosted.org/packages/2b/cb/839c0c94034aac40594498340b22be92112d8ea7f4e8a5aecbc533d4c22b/neuromation-19.6.12-py3-none-any.whl", "yanked": false}], "19.6.3": [{"comment_text": "", "digests": {"md5": "b4b5803b2cbdc83b63ca18db182a4632", "sha256": "46cd5a63e3cf347fadf8bc868f5f2430dfe2749543d1843df84506cf947f1355"}, "downloads": -1, "filename": "neuromation-19.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b4b5803b2cbdc83b63ca18db182a4632", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 75943, "upload_time": "2019-06-03T14:31:35", "upload_time_iso_8601": "2019-06-03T14:31:35.066003Z", "url": "https://files.pythonhosted.org/packages/c5/0f/d6a3a1d9ce96e0959b9573f378e8b82ae7746b0d0d058ce9d8393298f0f4/neuromation-19.6.3-py3-none-any.whl", "yanked": false}], "19.6.4": [{"comment_text": "", "digests": {"md5": "86192b9bb28a90dd2ab3aee23d38d813", "sha256": "9129b7d6bc98675aa13c05ffc5603f7b45c7543768b680b45bfe3063be1c9c75"}, "downloads": -1, "filename": "neuromation-19.6.4-py3-none-any.whl", "has_sig": false, "md5_digest": "86192b9bb28a90dd2ab3aee23d38d813", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 75975, "upload_time": "2019-06-04T10:32:23", "upload_time_iso_8601": "2019-06-04T10:32:23.802472Z", "url": "https://files.pythonhosted.org/packages/2f/d3/85e25b4bf7efb94b585f31a9a8b89a64d136a358ddb94c9f220865ab8c65/neuromation-19.6.4-py3-none-any.whl", "yanked": false}], "19.6.5": [{"comment_text": "", "digests": {"md5": "e6c047ddb66b51884bc43cc7c6c96745", "sha256": "7fc70ffccad77a9869f601604bf9f251a567a241f763520f59bdfe0bf35ec0c5"}, "downloads": -1, "filename": "neuromation-19.6.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e6c047ddb66b51884bc43cc7c6c96745", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 75994, "upload_time": "2019-06-05T13:53:28", "upload_time_iso_8601": "2019-06-05T13:53:28.055929Z", "url": "https://files.pythonhosted.org/packages/62/52/deb63eba28d98ec4c29f867d51d5dadb3d9e9436eaaa770ce07d5e415ad4/neuromation-19.6.5-py3-none-any.whl", "yanked": false}], "19.7.17": [{"comment_text": "", "digests": {"md5": "908bd1aa54c4c0bc321c6d4fa974f2b7", "sha256": "ee533348d9dcdafd8146a3d86cae45f242d163f703d7132b665310a9cdcb2e40"}, "downloads": -1, "filename": "neuromation-19.7.17-py3-none-any.whl", "has_sig": false, "md5_digest": "908bd1aa54c4c0bc321c6d4fa974f2b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 81478, "upload_time": "2019-07-17T14:09:12", "upload_time_iso_8601": "2019-07-17T14:09:12.616504Z", "url": "https://files.pythonhosted.org/packages/5f/82/311304e437821db78695caade9a265070eb4054a4edae44a808053275bb8/neuromation-19.7.17-py3-none-any.whl", "yanked": false}], "19.7.26": [{"comment_text": "", "digests": {"md5": "dc024fb5e5df1bd846b3cc6f5ed09353", "sha256": "d03bc3dd7fc9eaa5c3c1c419f9c66a1eb45f8608591cc2eda0e6033565a6c23b"}, "downloads": -1, "filename": "neuromation-19.7.26-py3-none-any.whl", "has_sig": false, "md5_digest": "dc024fb5e5df1bd846b3cc6f5ed09353", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 84500, "upload_time": "2019-07-26T14:16:16", "upload_time_iso_8601": "2019-07-26T14:16:16.476546Z", "url": "https://files.pythonhosted.org/packages/10/6e/ec0765dc1003d9281e7e0f631635b732799accc79c6b85a09726fe1ccf6a/neuromation-19.7.26-py3-none-any.whl", "yanked": false}], "19.7.4": [{"comment_text": "", "digests": {"md5": "888da1b9dab36f5e836ae9e43d5a1cec", "sha256": "1082814473c4dbca93b64b489e592a7102c47f9ad106d4d7f83b1b9219536592"}, "downloads": -1, "filename": "neuromation-19.7.4-py3-none-any.whl", "has_sig": false, "md5_digest": "888da1b9dab36f5e836ae9e43d5a1cec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 77876, "upload_time": "2019-07-04T13:13:18", "upload_time_iso_8601": "2019-07-04T13:13:18.246593Z", "url": "https://files.pythonhosted.org/packages/24/f1/66719bd267789420872b96a3127f7bfec3d22586198acc4310164edfdb3d/neuromation-19.7.4-py3-none-any.whl", "yanked": false}], "19.8.1": [{"comment_text": "", "digests": {"md5": "820cebd7eafa7667620fd9c1eee4cbbb", "sha256": "99940e9d2d085675ca388bbc3874e10a3bcf74bb72e173621b3fae4d9a81a228"}, "downloads": -1, "filename": "neuromation-19.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "820cebd7eafa7667620fd9c1eee4cbbb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 86126, "upload_time": "2019-08-01T10:49:29", "upload_time_iso_8601": "2019-08-01T10:49:29.539365Z", "url": "https://files.pythonhosted.org/packages/8e/e5/1c9c3db3ba1b383c36547621e058cb12db59ddce936f30f7a947a17b5a83/neuromation-19.8.1-py3-none-any.whl", "yanked": false}], "19.8.19": [{"comment_text": "", "digests": {"md5": "edac9d7b28beb63c8b3e74b1fd51fa55", "sha256": "48535b7e551d2a815dd70a0d83a9232451339c9c620656634a7f3afba5bf31ff"}, "downloads": -1, "filename": "neuromation-19.8.19-py3-none-any.whl", "has_sig": false, "md5_digest": "edac9d7b28beb63c8b3e74b1fd51fa55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 86926, "upload_time": "2019-08-19T09:08:56", "upload_time_iso_8601": "2019-08-19T09:08:56.430530Z", "url": "https://files.pythonhosted.org/packages/24/41/ca8d10e141c9784a4f43a13c1e5b3468c6234187752ae652a179fae7849f/neuromation-19.8.19-py3-none-any.whl", "yanked": false}], "19.8.23": [{"comment_text": "", "digests": {"md5": "09f08857bfb8f370f6d0388660b74e45", "sha256": "319c3a4f5cbafd7cfa65702ef65f9668e3880406e7c85c7ad2052fda6641adbd"}, "downloads": -1, "filename": "neuromation-19.8.23-py3-none-any.whl", "has_sig": false, "md5_digest": "09f08857bfb8f370f6d0388660b74e45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 87207, "upload_time": "2019-08-23T14:47:47", "upload_time_iso_8601": "2019-08-23T14:47:47.149988Z", "url": "https://files.pythonhosted.org/packages/9b/1f/7e02ca6699bdb9635b8a6a5a0b57dc1cf97f8a4d28d0acc8f2a67611ccf0/neuromation-19.8.23-py3-none-any.whl", "yanked": false}], "19.9.10": [{"comment_text": "", "digests": {"md5": "b1849d1aa7cb429e8f5c37aff7bfe199", "sha256": "771f9dc6a1f9f385eaec9e54bc61af98e1781f19323d755bf4e6101c4f2b3f4a"}, "downloads": -1, "filename": "neuromation-19.9.10-py3-none-any.whl", "has_sig": false, "md5_digest": "b1849d1aa7cb429e8f5c37aff7bfe199", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 93560, "upload_time": "2019-09-10T16:02:01", "upload_time_iso_8601": "2019-09-10T16:02:01.597240Z", "url": "https://files.pythonhosted.org/packages/36/b1/05cf8abeefd63d94db24c8293dd808c0b1c01c3d88192f663785c6b3b214/neuromation-19.9.10-py3-none-any.whl", "yanked": false}], "19.9.2": [{"comment_text": "", "digests": {"md5": "b9c734afc5823be7a626912e7b5ba233", "sha256": "be17b5b6cc828de724cf14d360769d06158af9089c420d1881e50e53a3d5616a"}, "downloads": -1, "filename": "neuromation-19.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b9c734afc5823be7a626912e7b5ba233", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 92058, "upload_time": "2019-09-02T10:23:32", "upload_time_iso_8601": "2019-09-02T10:23:32.466857Z", "url": "https://files.pythonhosted.org/packages/6e/39/aa2a871d9cdbb249ae9436df8b4ac2320d206faaa77ed70a20bc62c2682e/neuromation-19.9.2-py3-none-any.whl", "yanked": false}], "19.9.23": [{"comment_text": "", "digests": {"md5": "62ab16ed6d0fdd25aef6c07a34c31ae9", "sha256": "1b57b1dc56efc7cfcf97d14b51155873e64634df3f8cc820f5a8052e6bdc2a9c"}, "downloads": -1, "filename": "neuromation-19.9.23-py3-none-any.whl", "has_sig": false, "md5_digest": "62ab16ed6d0fdd25aef6c07a34c31ae9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 94766, "upload_time": "2019-09-23T21:36:35", "upload_time_iso_8601": "2019-09-23T21:36:35.339639Z", "url": "https://files.pythonhosted.org/packages/1d/eb/42e85f8e529dda5f4a2c56b7169f71ff3c44c14d79167aa3ca708fab2074/neuromation-19.9.23-py3-none-any.whl", "yanked": false}], "20.1.15": [{"comment_text": "", "digests": {"md5": "d9843fc06e7295ed88e5cbb14dc87b89", "sha256": "95cb950cb47eae7d5710975a7db5971ff7126c65126211b1a2a4ff53119ddb38"}, "downloads": -1, "filename": "neuromation-20.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "d9843fc06e7295ed88e5cbb14dc87b89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 120103, "upload_time": "2020-01-15T15:42:28", "upload_time_iso_8601": "2020-01-15T15:42:28.332538Z", "url": "https://files.pythonhosted.org/packages/47/ee/a2d336ed24fc69688f12608496e9eecd768759b1617f95e33b15c49f31af/neuromation-20.1.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa08cd64e8f1e890cdb249a92db46bd2", "sha256": "37a6a423cc896b714ee056de36545301acf4ccaaff6a13f3ab755c21a726a253"}, "downloads": -1, "filename": "neuromation-20.1.15.tar.gz", "has_sig": false, "md5_digest": "aa08cd64e8f1e890cdb249a92db46bd2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 217728, "upload_time": "2020-01-15T15:42:30", "upload_time_iso_8601": "2020-01-15T15:42:30.579641Z", "url": "https://files.pythonhosted.org/packages/a2/b6/3770e0adf6bf4d64e6ffcd404495a0ae91b4dba493278df30a0d42fd2f0a/neuromation-20.1.15.tar.gz", "yanked": false}], "20.1.22": [{"comment_text": "", "digests": {"md5": "8400070532734b75be73988c9ad67e43", "sha256": "71eac682dd33501fd9910c1a170503e3c306d01fa3dd9997b765ab2fc1d6ad0e"}, "downloads": -1, "filename": "neuromation-20.1.22-py3-none-any.whl", "has_sig": false, "md5_digest": "8400070532734b75be73988c9ad67e43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 123791, "upload_time": "2020-01-22T17:40:33", "upload_time_iso_8601": "2020-01-22T17:40:33.997237Z", "url": "https://files.pythonhosted.org/packages/3d/4f/d0c7648a98719abd03378762772a1d0c9f9162783473b1fcb9a9572e1ee4/neuromation-20.1.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02dd3f7b8b5be0d1454114a717c3c840", "sha256": "6f3c861977bce94d75499fe586aa739fdef8d7b6b2ba97621655a286a50958e6"}, "downloads": -1, "filename": "neuromation-20.1.22.tar.gz", "has_sig": false, "md5_digest": "02dd3f7b8b5be0d1454114a717c3c840", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 222408, "upload_time": "2020-01-22T17:40:36", "upload_time_iso_8601": "2020-01-22T17:40:36.066479Z", "url": "https://files.pythonhosted.org/packages/d4/25/0cdac5f937645453bde61b3983cf8c167c308edd361603e7261e78939257/neuromation-20.1.22.tar.gz", "yanked": false}], "20.2.24": [{"comment_text": "", "digests": {"md5": "7759840c267d7580a82e03190dd9ae61", "sha256": "0e5b4cfcb39211ea72a54cd9f51b179593131c57b6e4ef9cad2e54282bac0090"}, "downloads": -1, "filename": "neuromation-20.2.24-py3-none-any.whl", "has_sig": false, "md5_digest": "7759840c267d7580a82e03190dd9ae61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 131350, "upload_time": "2020-02-24T11:11:34", "upload_time_iso_8601": "2020-02-24T11:11:34.711415Z", "url": "https://files.pythonhosted.org/packages/1e/f4/805983880e2b0c6b4521e5d6cf9f4104d21bd51f24aa0697bf7a24fda784/neuromation-20.2.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f64f1c4b922e76ce567d61dfd6cdbf5", "sha256": "03e03082dd007a0356c1d2f67e9f19ea7a80da6b40a0cb326f56e20c849595fa"}, "downloads": -1, "filename": "neuromation-20.2.24.tar.gz", "has_sig": false, "md5_digest": "9f64f1c4b922e76ce567d61dfd6cdbf5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 232671, "upload_time": "2020-02-24T11:11:37", "upload_time_iso_8601": "2020-02-24T11:11:37.074252Z", "url": "https://files.pythonhosted.org/packages/dd/5a/e2e1c2801dbf9a27bdd5f903dc8854f85ea52d9cf990ecb984d0e51aed3b/neuromation-20.2.24.tar.gz", "yanked": false}], "20.3.18": [{"comment_text": "", "digests": {"md5": "29093001b49d5e6fd329fce3455a112a", "sha256": "90b3c24fb0d815e003b02b46b31cae412fc2f77d57b7ec00d6117b74a72e2503"}, "downloads": -1, "filename": "neuromation-20.3.18-py3-none-any.whl", "has_sig": false, "md5_digest": "29093001b49d5e6fd329fce3455a112a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 134544, "upload_time": "2020-03-18T21:26:45", "upload_time_iso_8601": "2020-03-18T21:26:45.547884Z", "url": "https://files.pythonhosted.org/packages/7b/1b/8cf3adf6607e55de249d05f928959a082a1569d551ba099927dcabc008e2/neuromation-20.3.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32407710e334c41e94961b74e552d057", "sha256": "e90d1a74850e6ebff889aac028d8f336440b10478428a6e5f2f4e897733a2ba9"}, "downloads": -1, "filename": "neuromation-20.3.18.tar.gz", "has_sig": false, "md5_digest": "32407710e334c41e94961b74e552d057", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 239760, "upload_time": "2020-03-18T21:26:47", "upload_time_iso_8601": "2020-03-18T21:26:47.620056Z", "url": "https://files.pythonhosted.org/packages/7e/0c/fbaea957a8a21f19dafe51b5c0ccad71dd842171581a4e5525dd50a66609/neuromation-20.3.18.tar.gz", "yanked": false}], "20.3.20": [{"comment_text": "", "digests": {"md5": "aac54239c6558d539aca9b8a06629198", "sha256": "914ef4e81aea7fde76bb1fea0d2583ded3813a4f538a3cf843f80c9267decce9"}, "downloads": -1, "filename": "neuromation-20.3.20-py3-none-any.whl", "has_sig": false, "md5_digest": "aac54239c6558d539aca9b8a06629198", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 135055, "upload_time": "2020-03-20T09:51:48", "upload_time_iso_8601": "2020-03-20T09:51:48.758402Z", "url": "https://files.pythonhosted.org/packages/a9/ea/cde2884a908ec58d3d2095e6bd04251b8f2d0fcb25294dc703f2fc98b5ca/neuromation-20.3.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d0e8ab19d4abbc20db2f323898a0aa2", "sha256": "039f4f46d85e96a8545b6799a75427f7587d6a0d41b434ee8eb37ce8e7cb7046"}, "downloads": -1, "filename": "neuromation-20.3.20.tar.gz", "has_sig": false, "md5_digest": "3d0e8ab19d4abbc20db2f323898a0aa2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 240193, "upload_time": "2020-03-20T09:51:50", "upload_time_iso_8601": "2020-03-20T09:51:50.718466Z", "url": "https://files.pythonhosted.org/packages/55/70/39b6d1b726217ee68a1a55815249f8b0e593cec0298aaca6a4f808ef3588/neuromation-20.3.20.tar.gz", "yanked": false}], "20.3.23": [{"comment_text": "", "digests": {"md5": "9f37869838226e9e5cc39d40bedd7c29", "sha256": "e842abb1468b44079a589146eea71cee0c1ccba22a4ee22a8b0790831180fc3e"}, "downloads": -1, "filename": "neuromation-20.3.23-py3-none-any.whl", "has_sig": false, "md5_digest": "9f37869838226e9e5cc39d40bedd7c29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 138014, "upload_time": "2020-03-23T15:31:16", "upload_time_iso_8601": "2020-03-23T15:31:16.425004Z", "url": "https://files.pythonhosted.org/packages/4b/15/752156b2aaea396bfbc871d374136d5e93935b7d7f15b9629c9969ea80ad/neuromation-20.3.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "704f96f71a79043130845f64de57fc48", "sha256": "736f2c682a1c3974982dc886da8798893e207e6ef4e88854843a6aa374455bb2"}, "downloads": -1, "filename": "neuromation-20.3.23.tar.gz", "has_sig": false, "md5_digest": "704f96f71a79043130845f64de57fc48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 244285, "upload_time": "2020-03-23T15:31:18", "upload_time_iso_8601": "2020-03-23T15:31:18.705370Z", "url": "https://files.pythonhosted.org/packages/be/8d/18431ea07dab739e71412757a747137a9edeb8f0a38a0fd5e4f48cdb32c4/neuromation-20.3.23.tar.gz", "yanked": false}], "20.4.15": [{"comment_text": "", "digests": {"md5": "dfe2a023b45db6c6f27c5d4b4ccd3079", "sha256": "e22871ffa933e018c102fcc8f851448b4773eb3ca0714d0afd8e49b07f9f464d"}, "downloads": -1, "filename": "neuromation-20.4.15-py3-none-any.whl", "has_sig": false, "md5_digest": "dfe2a023b45db6c6f27c5d4b4ccd3079", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 152250, "upload_time": "2020-04-24T07:28:27", "upload_time_iso_8601": "2020-04-24T07:28:27.351309Z", "url": "https://files.pythonhosted.org/packages/e1/2b/5f7419d648856d0d330f31a6ac536f7eb7cc2ed0e912b2f777f911406913/neuromation-20.4.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4f561747eaa14a3794b6adf698cbd3f", "sha256": "4b9ee22bf88e1369e63ddd80940a2470112bde128641fe6e14ec7e323f72da6c"}, "downloads": -1, "filename": "neuromation-20.4.15.tar.gz", "has_sig": false, "md5_digest": "b4f561747eaa14a3794b6adf698cbd3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 271043, "upload_time": "2020-04-24T07:28:28", "upload_time_iso_8601": "2020-04-24T07:28:28.902222Z", "url": "https://files.pythonhosted.org/packages/f8/cc/6906c33eade15636c8b1b535f64ebe9840ab8cb6d06214fd3a5cb77e2849/neuromation-20.4.15.tar.gz", "yanked": false}], "20.4.6": [{"comment_text": "", "digests": {"md5": "7f8b6d3bc6054f9d1cfc6d1b2c60c384", "sha256": "87a201b1a8c5a4849d43bbc6ea261c378aaaede706a8aead0463346c76cf9701"}, "downloads": -1, "filename": "neuromation-20.4.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7f8b6d3bc6054f9d1cfc6d1b2c60c384", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 146167, "upload_time": "2020-04-06T11:09:01", "upload_time_iso_8601": "2020-04-06T11:09:01.756612Z", "url": "https://files.pythonhosted.org/packages/82/32/8c5fced16e26691fdeb253764514c7e33e10cc0170394b5f27404ce8ca02/neuromation-20.4.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee805497a9bc50285d12dce8c02977a4", "sha256": "ddd06ff37766f9cb11136dbc816771848b36419601f74cd032f044501137c70d"}, "downloads": -1, "filename": "neuromation-20.4.6.tar.gz", "has_sig": false, "md5_digest": "ee805497a9bc50285d12dce8c02977a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 260975, "upload_time": "2020-04-06T11:09:03", "upload_time_iso_8601": "2020-04-06T11:09:03.822028Z", "url": "https://files.pythonhosted.org/packages/33/50/dd5c7f14e0a6f8b847cf91e4298aa32f3abb0ed8edfd02bc7fb2d7d4e4dc/neuromation-20.4.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dfe2a023b45db6c6f27c5d4b4ccd3079", "sha256": "e22871ffa933e018c102fcc8f851448b4773eb3ca0714d0afd8e49b07f9f464d"}, "downloads": -1, "filename": "neuromation-20.4.15-py3-none-any.whl", "has_sig": false, "md5_digest": "dfe2a023b45db6c6f27c5d4b4ccd3079", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 152250, "upload_time": "2020-04-24T07:28:27", "upload_time_iso_8601": "2020-04-24T07:28:27.351309Z", "url": "https://files.pythonhosted.org/packages/e1/2b/5f7419d648856d0d330f31a6ac536f7eb7cc2ed0e912b2f777f911406913/neuromation-20.4.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4f561747eaa14a3794b6adf698cbd3f", "sha256": "4b9ee22bf88e1369e63ddd80940a2470112bde128641fe6e14ec7e323f72da6c"}, "downloads": -1, "filename": "neuromation-20.4.15.tar.gz", "has_sig": false, "md5_digest": "b4f561747eaa14a3794b6adf698cbd3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 271043, "upload_time": "2020-04-24T07:28:28", "upload_time_iso_8601": "2020-04-24T07:28:28.902222Z", "url": "https://files.pythonhosted.org/packages/f8/cc/6906c33eade15636c8b1b535f64ebe9840ab8cb6d06214fd3a5cb77e2849/neuromation-20.4.15.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:46 2020"}