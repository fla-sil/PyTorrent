{"info": {"author": "Jos Boumans", "author_email": "jos@krux.com", "bugtrack_url": null, "classifiers": [], "description": "python-krux-scheduler\n=====================\n\nKrux Python class built on top of [Krux Stdlib](https://staticfiles.krxd.net/foss/docs/pypi/krux-stdlib/) for interacting with [APScheduler](http://pythonhosted.org//APScheduler/)\n\nApplication quick start\n-----------------------\n\nThe most common use case for this library is to run a job periodically from a script.\nTo do that, do the following:\n\n```python\n\nimport time\nfrom krux_scheduler import Application\n\ndef main():\n    ### The name must be unique to the organization. The object  \n    ### returned inherits from krux.cli.Application, so it provides\n    ### all that functionality as well.\n    app = Application( name = 'krux-my-periodic-job' )\n    \n    ### This is the scheduler object, which behaves exactly \n    ### like an APScheduler object, but with logging, stats \n    ### and CLI support added.\n    scheduler = app.scheduler\n\n    ### define the job you want to run periodically\n    def periodic_job():\n        print 'Called %s at %s' % (app.name, time.asctime())\n\n    ### add the periodic job to the scheduler. This follows \n    ### APSchedulers arguments & functionality exactly.\n    scheduler.add_cron_job(\n        func   = periodic_job,\n        hour   = '0,8,16'\n        minute = '0',\n    )\n\n    ### start the scheduler\n    scheduler.start()\n\n    ### always call app.exit(), so any clean up that needs to\n    ### happen can be done at the end of your program. It also\n    ### sets the exit code for you appropriately.\n    app.exit()\n\n### Run the application stand alone\nif __name__ == '__main__':\n    main()\n\n```\n\nSeeing it in action\n-------------------\n\nThis library comes with a CLI tool bundled that shows you how the code works.\nIf you run this, it'll alternate between throwing an exception (which is caught)\nand a simple printed message. \n\nThese are the options and how you can invoke it:\n\n```\n$ krux-scheduler-test  -h\nusage: krux-scheduler-test [-h]\n                           [--log-level {info,debug,critical,warning,error}]\n                           [--stats] [--stats-host STATS_HOST]\n                           [--stats-port STATS_PORT]\n                           [--stats-environment STATS_ENVIRONMENT]\n                           [--scheduler-minute SCHEDULER_MINUTE]\n                           [--scheduler-hour SCHEDULER_HOUR]\n                           [--scheduler-daemonize]\n                           [--scheduler-exit-after-job]\n\nkrux-scheduler-test\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nlogging:\n  --log-level {info,debug,critical,warning,error}\n                        Verbosity of logging. (default: warning)\n\nstats:\n  --stats               Enable sending statistics to statsd. (default: False)\n  --stats-host STATS_HOST\n                        Statsd host to send statistics to. (default:\n                        localhost)\n  --stats-port STATS_PORT\n                        Statsd port to send statistics to. (default: 8125)\n  --stats-environment STATS_ENVIRONMENT\n                        Statsd environment. (default: dev)\n\nscheduler:\n  --scheduler-minute SCHEDULER_MINUTE\n                        Comma separated list of minute mark(s) to run on. This\n                        overrides any hardcoded arguments (default: None)\n  --scheduler-hour SCHEDULER_HOUR\n                        Comma separated list of hour mark(s) to run on. This\n                        overrides any hardcoded arguments (default: None)\n  --scheduler-daemonize\n                        Run scheduled jobs in separate threads (default:\n                        False)\n  --scheduler-exit-after-job\n                        Exit the application after a job has completed. Very\n                        useful for RAM hungry applications whose only purpose\n                        is to run a single job but not otherwise. Requires a\n                        process monitor to restart if it exits (default:\n                        False)\n```\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/krux/python-krux-scheduler/tarball/release/0.0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/krux/python-krux-scheduler", "keywords": null, "license": "All Rights Reserved.", "maintainer": null, "maintainer_email": null, "name": "krux-scheduler", "package_url": "https://pypi.org/project/krux-scheduler/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/krux-scheduler/", "project_urls": {"Download": "https://github.com/krux/python-krux-scheduler/tarball/release/0.0.2", "Homepage": "https://github.com/krux/python-krux-scheduler"}, "release_url": "https://pypi.org/project/krux-scheduler/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Library for interacting with APScheduler built on krux-stdlib", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            python-krux-scheduler<br>=====================<br><br>Krux Python class built on top of [Krux Stdlib](https://staticfiles.krxd.net/foss/docs/pypi/krux-stdlib/) for interacting with [APScheduler](http://pythonhosted.org//APScheduler/)<br><br>Application quick start<br>-----------------------<br><br>The most common use case for this library is to run a job periodically from a script.<br>To do that, do the following:<br><br>```python<br><br>import time<br>from krux_scheduler import Application<br><br>def main():<br>    ### The name must be unique to the organization. The object  <br>    ### returned inherits from krux.cli.Application, so it provides<br>    ### all that functionality as well.<br>    app = Application( name = 'krux-my-periodic-job' )<br>    <br>    ### This is the scheduler object, which behaves exactly <br>    ### like an APScheduler object, but with logging, stats <br>    ### and CLI support added.<br>    scheduler = app.scheduler<br><br>    ### define the job you want to run periodically<br>    def periodic_job():<br>        print 'Called %s at %s' % (app.name, time.asctime())<br><br>    ### add the periodic job to the scheduler. This follows <br>    ### APSchedulers arguments &amp; functionality exactly.<br>    scheduler.add_cron_job(<br>        func   = periodic_job,<br>        hour   = '0,8,16'<br>        minute = '0',<br>    )<br><br>    ### start the scheduler<br>    scheduler.start()<br><br>    ### always call app.exit(), so any clean up that needs to<br>    ### happen can be done at the end of your program. It also<br>    ### sets the exit code for you appropriately.<br>    app.exit()<br><br>### Run the application stand alone<br>if __name__ == '__main__':<br>    main()<br><br>```<br><br>Seeing it in action<br>-------------------<br><br>This library comes with a CLI tool bundled that shows you how the code works.<br>If you run this, it'll alternate between throwing an exception (which is caught)<br>and a simple printed message. <br><br>These are the options and how you can invoke it:<br><br>```<br>$ krux-scheduler-test  -h<br>usage: krux-scheduler-test [-h]<br>                           [--log-level {info,debug,critical,warning,error}]<br>                           [--stats] [--stats-host STATS_HOST]<br>                           [--stats-port STATS_PORT]<br>                           [--stats-environment STATS_ENVIRONMENT]<br>                           [--scheduler-minute SCHEDULER_MINUTE]<br>                           [--scheduler-hour SCHEDULER_HOUR]<br>                           [--scheduler-daemonize]<br>                           [--scheduler-exit-after-job]<br><br>krux-scheduler-test<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br><br>logging:<br>  --log-level {info,debug,critical,warning,error}<br>                        Verbosity of logging. (default: warning)<br><br>stats:<br>  --stats               Enable sending statistics to statsd. (default: False)<br>  --stats-host STATS_HOST<br>                        Statsd host to send statistics to. (default:<br>                        localhost)<br>  --stats-port STATS_PORT<br>                        Statsd port to send statistics to. (default: 8125)<br>  --stats-environment STATS_ENVIRONMENT<br>                        Statsd environment. (default: dev)<br><br>scheduler:<br>  --scheduler-minute SCHEDULER_MINUTE<br>                        Comma separated list of minute mark(s) to run on. This<br>                        overrides any hardcoded arguments (default: None)<br>  --scheduler-hour SCHEDULER_HOUR<br>                        Comma separated list of hour mark(s) to run on. This<br>                        overrides any hardcoded arguments (default: None)<br>  --scheduler-daemonize<br>                        Run scheduled jobs in separate threads (default:<br>                        False)<br>  --scheduler-exit-after-job<br>                        Exit the application after a job has completed. Very<br>                        useful for RAM hungry applications whose only purpose<br>                        is to run a single job but not otherwise. Requires a<br>                        process monitor to restart if it exits (default:<br>                        False)<br>```<br>\n          </div>"}, "last_serial": 1227011, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "9fbaf42fb94b3fab0cf8a7f7a2568436", "sha256": "d8dc58e7d5bfce66324862e3918f2aea10c8700b130f9d970e3400388bc503c8"}, "downloads": -1, "filename": "krux-scheduler-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9fbaf42fb94b3fab0cf8a7f7a2568436", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7919, "upload_time": "2014-09-16T00:47:52", "upload_time_iso_8601": "2014-09-16T00:47:52.297479Z", "url": "https://files.pythonhosted.org/packages/42/6d/6ce22e087749ab5004dad7c7bf70ac2d0d07c3ad9848ebaa3c6e2e5fe729/krux-scheduler-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9fbaf42fb94b3fab0cf8a7f7a2568436", "sha256": "d8dc58e7d5bfce66324862e3918f2aea10c8700b130f9d970e3400388bc503c8"}, "downloads": -1, "filename": "krux-scheduler-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9fbaf42fb94b3fab0cf8a7f7a2568436", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7919, "upload_time": "2014-09-16T00:47:52", "upload_time_iso_8601": "2014-09-16T00:47:52.297479Z", "url": "https://files.pythonhosted.org/packages/42/6d/6ce22e087749ab5004dad7c7bf70ac2d0d07c3ad9848ebaa3c6e2e5fe729/krux-scheduler-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:45 2020"}