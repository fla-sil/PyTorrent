{"info": {"author": "Holger Frey", "author_email": "frey@imtek.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: Freely Distributable", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering"], "description": "# SartoriUSB\n\n[![Build Status](https://travis-ci.com/holgi/sartoriusb.svg?branch=master)](https://travis-ci.com/holgi/sartoriusb)\n\nUSB serial connection to Sartorius Quintix Scales\n\n## Example:\n\n```python\n\n    import sartoriusb as sub\n\n    with sub.SartoriusUsb('COM4') as conn:\n        result = conn.measure()\n\n    assert result.mode == \"G\"\n    assert result.value == \"+3.4\"\n    assert result.unit == \"mg\"\n    assert result.stable == True\n    assert result.message == None\n```\n\n## Required settings on the scale\n\nThe USB protocol on the scale must be set to SBI.\n\n## Connection to the scale\n\nThe prefered way to establish an connection is the use of a context manager:\n`with sartoriusb.SartoriusUsb('COM4') as conn:`\n\nFor manually handling the connection, the methods `connect()` and\n`close()` can be used. For convenience there is also and `open()`\nmethod that just behaves like `connect()`\n\n\n## Sending commands and receiving output\n\nSending commands to the scale can be done with the `send(cmd)`, the\navailable commands according to the manual are listed below, but you could\nbut propably shouldn't send any arbitrary commands to the scale.\n\nFor reading the results from the scale, there are two methods available:\n- `read(bytes)`: reads a number of bytes from the scale\n- `readlines()`: returns a list of text lines, already decoded from bytes\n\nSince sending a command and recieving an output are often used side by side,\nthere is a convenience method: `get(cmd)` will first send the command and\nreturns the output from the scale as a list of strings.\n\n## Measuring\n\nTo measure a weight (or whatever the scale is set to), you could use\n`get(CMD_PRINT)` and parse the output yourselve or use the `measure()`\nmethod and get an already parsed output:\n\nThe function returns a `sartoriusb.Measurement` named tuple:\n\n- `Measurement.mode`:\n   The measurement mode, might be `unknown` if reporting on the scale is set\n   to 16 byte output\n- `Measurement.value`:\n    The value as string as reported by the scale; whitespace an nonnumeric\n    characters are removed, so `int()` or `float()` could be used directly\n- `Measurement.unit`:\n    The unit of the Measurement reported by the scale. Might be `None` if it\n    was an unstable read\n- `Measurement.stable`:\n    Boolean value indicating if the measured value was stable or unstable\n- `Measurement.message`:\n    If a non-measurement message was sent from the scale, it is reported here\n    and all other fields are set to `None`. For a regular measurement result\n    this field is `None`.\n\n## Available Commands\n\n- `CMD_PRINT`: \"Print\" the current measurement result\n- `CMD_TARA`: performa a tara or set the display to zero\n\n- `CMD_EXPCLICIT_TARA`: explicit tara only\n- `CMD_EXPCLICIT_NULL`: explicit set display to zero\n\n- `CMD_INFO_TYPE`:  show scale type\n- `CMD_INFO_SNR`: show serial number of scale\n- `CMD_INFO_VERSION_SCALE`: show software version of the scale\n- `CMD_INFO_VERSION_CONTROL_UNIT`: show the software version of the command and display module\n- `CMD_INFO_USER`: display user and device id\n\n- `CMD_FILTER_ENVIRONMENT_VERY_STABLE`: set the filter to \"very stable enviroment\"\n- `CMD_FILTER_ENVIRONMENT_STABLE`: set the filter to \"stable enviroment\"\n- `CMD_FILTER_ENVIRONMENT_UNSTABLE`:  set the filter to \"unstable enviroment\"\n- `CMD_FILTER_ENVIRONMENT_VERAY_UNSTABLE`:  set the filter to \"very unstable enviroment\"\n\n- `CMD_KEYBOARD_LOCK`: lock the keyboard on the command and display module\n- `CMD_KEYBOARD_UNKLOCK`: unlock the keyboard on the command and display module\n- `CMD_KEYPRESS_PRINT`: simulate a keypress on the command modules 'print' key\n- `CMD_KEYPRESS_CANCEL`: simulate a keypress on the command modules 'cancel' key\n\n- `CMD_BEEP`: make the scale beep\n\n- `CMD_ADJUST_INTERNAL`: start internal adjustment\n- `CMD_ADJUST_EXTERNAL`: start external adjustment with standard weights\n\n- `CMD_RESTART`: restart the scale\n\n\n\n## Development\n\nTo install the development version of SartoriUSB:\n\n    git clone https://github.com/holgi/sartoriusb.git\n    cd sartoriusb\n\n    # intialize the developement environment and activate it\n    make devenv\n    .venv/bin/activate\n\nTo run the tests, run `make tests` or `make coverage` for a complete report.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/holgi/sartoriusb", "keywords": "", "license": "Beerware", "maintainer": "", "maintainer_email": "", "name": "SartoriUSB", "package_url": "https://pypi.org/project/SartoriUSB/", "platform": "", "project_url": "https://pypi.org/project/SartoriUSB/", "project_urls": {"Homepage": "https://github.com/holgi/sartoriusb"}, "release_url": "https://pypi.org/project/SartoriUSB/0.2.3/", "requires_dist": ["pyserial >= 3.4", "black; extra == \"dev\"", "flake8; extra == \"dev\"", "flake8-comprehensions; extra == \"dev\"", "isort; extra == \"dev\"", "keyring; extra == \"dev\"", "pre-commit; extra == \"dev\"", "pytest >=4.0.0; extra == \"test\"", "pytest-cov; extra == \"test\"", "pytest-mock; extra == \"test\""], "requires_python": ">=3.7", "summary": "pysartoriusb", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SartoriUSB</h1>\n<p><a href=\"https://travis-ci.com/holgi/sartoriusb\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/586dc789c9ac943d0e1e105d1b55392e267e1864/68747470733a2f2f7472617669732d63692e636f6d2f686f6c67692f736172746f72697573622e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>USB serial connection to Sartorius Quintix Scales</p>\n<h2>Example:</h2>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">sartoriusb</span> <span class=\"k\">as</span> <span class=\"nn\">sub</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">SartoriusUsb</span><span class=\"p\">(</span><span class=\"s1\">'COM4'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">\"G\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s2\">\"+3.4\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">unit</span> <span class=\"o\">==</span> <span class=\"s2\">\"mg\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stable</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n    <span class=\"k\">assert</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">==</span> <span class=\"kc\">None</span>\n</pre>\n<h2>Required settings on the scale</h2>\n<p>The USB protocol on the scale must be set to SBI.</p>\n<h2>Connection to the scale</h2>\n<p>The prefered way to establish an connection is the use of a context manager:\n<code>with sartoriusb.SartoriusUsb('COM4') as conn:</code></p>\n<p>For manually handling the connection, the methods <code>connect()</code> and\n<code>close()</code> can be used. For convenience there is also and <code>open()</code>\nmethod that just behaves like <code>connect()</code></p>\n<h2>Sending commands and receiving output</h2>\n<p>Sending commands to the scale can be done with the <code>send(cmd)</code>, the\navailable commands according to the manual are listed below, but you could\nbut propably shouldn't send any arbitrary commands to the scale.</p>\n<p>For reading the results from the scale, there are two methods available:</p>\n<ul>\n<li><code>read(bytes)</code>: reads a number of bytes from the scale</li>\n<li><code>readlines()</code>: returns a list of text lines, already decoded from bytes</li>\n</ul>\n<p>Since sending a command and recieving an output are often used side by side,\nthere is a convenience method: <code>get(cmd)</code> will first send the command and\nreturns the output from the scale as a list of strings.</p>\n<h2>Measuring</h2>\n<p>To measure a weight (or whatever the scale is set to), you could use\n<code>get(CMD_PRINT)</code> and parse the output yourselve or use the <code>measure()</code>\nmethod and get an already parsed output:</p>\n<p>The function returns a <code>sartoriusb.Measurement</code> named tuple:</p>\n<ul>\n<li><code>Measurement.mode</code>:\nThe measurement mode, might be <code>unknown</code> if reporting on the scale is set\nto 16 byte output</li>\n<li><code>Measurement.value</code>:\nThe value as string as reported by the scale; whitespace an nonnumeric\ncharacters are removed, so <code>int()</code> or <code>float()</code> could be used directly</li>\n<li><code>Measurement.unit</code>:\nThe unit of the Measurement reported by the scale. Might be <code>None</code> if it\nwas an unstable read</li>\n<li><code>Measurement.stable</code>:\nBoolean value indicating if the measured value was stable or unstable</li>\n<li><code>Measurement.message</code>:\nIf a non-measurement message was sent from the scale, it is reported here\nand all other fields are set to <code>None</code>. For a regular measurement result\nthis field is <code>None</code>.</li>\n</ul>\n<h2>Available Commands</h2>\n<ul>\n<li>\n<p><code>CMD_PRINT</code>: \"Print\" the current measurement result</p>\n</li>\n<li>\n<p><code>CMD_TARA</code>: performa a tara or set the display to zero</p>\n</li>\n<li>\n<p><code>CMD_EXPCLICIT_TARA</code>: explicit tara only</p>\n</li>\n<li>\n<p><code>CMD_EXPCLICIT_NULL</code>: explicit set display to zero</p>\n</li>\n<li>\n<p><code>CMD_INFO_TYPE</code>:  show scale type</p>\n</li>\n<li>\n<p><code>CMD_INFO_SNR</code>: show serial number of scale</p>\n</li>\n<li>\n<p><code>CMD_INFO_VERSION_SCALE</code>: show software version of the scale</p>\n</li>\n<li>\n<p><code>CMD_INFO_VERSION_CONTROL_UNIT</code>: show the software version of the command and display module</p>\n</li>\n<li>\n<p><code>CMD_INFO_USER</code>: display user and device id</p>\n</li>\n<li>\n<p><code>CMD_FILTER_ENVIRONMENT_VERY_STABLE</code>: set the filter to \"very stable enviroment\"</p>\n</li>\n<li>\n<p><code>CMD_FILTER_ENVIRONMENT_STABLE</code>: set the filter to \"stable enviroment\"</p>\n</li>\n<li>\n<p><code>CMD_FILTER_ENVIRONMENT_UNSTABLE</code>:  set the filter to \"unstable enviroment\"</p>\n</li>\n<li>\n<p><code>CMD_FILTER_ENVIRONMENT_VERAY_UNSTABLE</code>:  set the filter to \"very unstable enviroment\"</p>\n</li>\n<li>\n<p><code>CMD_KEYBOARD_LOCK</code>: lock the keyboard on the command and display module</p>\n</li>\n<li>\n<p><code>CMD_KEYBOARD_UNKLOCK</code>: unlock the keyboard on the command and display module</p>\n</li>\n<li>\n<p><code>CMD_KEYPRESS_PRINT</code>: simulate a keypress on the command modules 'print' key</p>\n</li>\n<li>\n<p><code>CMD_KEYPRESS_CANCEL</code>: simulate a keypress on the command modules 'cancel' key</p>\n</li>\n<li>\n<p><code>CMD_BEEP</code>: make the scale beep</p>\n</li>\n<li>\n<p><code>CMD_ADJUST_INTERNAL</code>: start internal adjustment</p>\n</li>\n<li>\n<p><code>CMD_ADJUST_EXTERNAL</code>: start external adjustment with standard weights</p>\n</li>\n<li>\n<p><code>CMD_RESTART</code>: restart the scale</p>\n</li>\n</ul>\n<h2>Development</h2>\n<p>To install the development version of SartoriUSB:</p>\n<pre><code>git clone https://github.com/holgi/sartoriusb.git\ncd sartoriusb\n\n# intialize the developement environment and activate it\nmake devenv\n.venv/bin/activate\n</code></pre>\n<p>To run the tests, run <code>make tests</code> or <code>make coverage</code> for a complete report.</p>\n\n          </div>"}, "last_serial": 6652716, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "2c723db4c8e68daf6dfdaf75c79ef410", "sha256": "c9220a587a5ea2f3dca77a34053f17f4240f5b8dad70b9d039c31c5b3595bb0d"}, "downloads": -1, "filename": "SartoriUSB-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2c723db4c8e68daf6dfdaf75c79ef410", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8754, "upload_time": "2019-11-08T08:48:19", "upload_time_iso_8601": "2019-11-08T08:48:19.108468Z", "url": "https://files.pythonhosted.org/packages/89/0e/be65f18371412659fb398bcf1cc80414dcc87b0be33dc4b87f4ed9c936b7/SartoriUSB-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97cb98840fb096c5b2568c80977e3244", "sha256": "0a566d2af4a678cab78cfd75bd8d4e8eaf7d83527ba9fe171436a0113ee02958"}, "downloads": -1, "filename": "SartoriUSB-0.0.4.tar.gz", "has_sig": false, "md5_digest": "97cb98840fb096c5b2568c80977e3244", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6606, "upload_time": "2019-11-08T08:48:27", "upload_time_iso_8601": "2019-11-08T08:48:27.842161Z", "url": "https://files.pythonhosted.org/packages/40/8a/ff07a1635945f4b77838043942e4a8f6fa4c12fa1700ddee9a9a2403f51e/SartoriUSB-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "8c78f9247526f0ed8105dc5543ff6f06", "sha256": "de001a67866410b2bf03e1ddc71e57b9f44da8dc00263731808c2804df39b0d0"}, "downloads": -1, "filename": "SartoriUSB-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8c78f9247526f0ed8105dc5543ff6f06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9732, "upload_time": "2019-11-08T10:11:59", "upload_time_iso_8601": "2019-11-08T10:11:59.866348Z", "url": "https://files.pythonhosted.org/packages/3d/e1/b3de4d27ec2baea0401cb7750d6b593b7c5888fd563806f68e0528b631ca/SartoriUSB-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "decc9eb02a5588553c0d33ef14a37513", "sha256": "44e0ab426205790eb145b9639e7d88c81652edbce51e32943561faf1ce516765"}, "downloads": -1, "filename": "SartoriUSB-0.1.0.tar.gz", "has_sig": false, "md5_digest": "decc9eb02a5588553c0d33ef14a37513", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7373, "upload_time": "2019-11-08T10:12:08", "upload_time_iso_8601": "2019-11-08T10:12:08.167151Z", "url": "https://files.pythonhosted.org/packages/cd/69/b553b87e45c8e586b9d1d824470b6633ef2c4a4db8e2daf7140241ea5008/SartoriUSB-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "17baf848dba07a66a78e29d8a6325327", "sha256": "ab8973c5af2e0850de4dd3c7175f40dd76c0f26aa8885a01763b437ab1680e0f"}, "downloads": -1, "filename": "SartoriUSB-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17baf848dba07a66a78e29d8a6325327", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9689, "upload_time": "2019-11-08T10:27:38", "upload_time_iso_8601": "2019-11-08T10:27:38.592296Z", "url": "https://files.pythonhosted.org/packages/aa/70/d8f29238573c2b66c652eac3fe674269857a4bd65d7094a92d06bed98d0d/SartoriUSB-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecde1130854c4f390c9c2320e128aeeb", "sha256": "da78bb6319a680fb16585bdc0eb390026346ba5db0dc6d061a6167c27978d03e"}, "downloads": -1, "filename": "SartoriUSB-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ecde1130854c4f390c9c2320e128aeeb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7356, "upload_time": "2019-11-08T10:27:46", "upload_time_iso_8601": "2019-11-08T10:27:46.245706Z", "url": "https://files.pythonhosted.org/packages/bb/ed/ab96608cb6d9ec1686537de6e2e54c37a02b23b96990f850775cc91231a6/SartoriUSB-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a38d11df4a98604e077f630631e27213", "sha256": "9b2ffd0e523c5677628abe74e974fd7e7a4065ad96575b043dbebb326eca0d92"}, "downloads": -1, "filename": "SartoriUSB-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a38d11df4a98604e077f630631e27213", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9455, "upload_time": "2019-11-08T15:50:11", "upload_time_iso_8601": "2019-11-08T15:50:11.765537Z", "url": "https://files.pythonhosted.org/packages/8a/40/6f21794b3ab73faf98704d2b6202c7997d97ad2d81234a99a937856b022b/SartoriUSB-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2389a64c1e58d9c296622330e7e26a7", "sha256": "ad6a59ae1248f7ea118a66b6d0ab5b3ef360a131d06056c3df61b8c8a3ceb9c5"}, "downloads": -1, "filename": "SartoriUSB-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e2389a64c1e58d9c296622330e7e26a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7349, "upload_time": "2019-11-08T15:50:19", "upload_time_iso_8601": "2019-11-08T15:50:19.975646Z", "url": "https://files.pythonhosted.org/packages/0c/00/ca459e0c1d25df0dfc6f3d45e9460defea9e6d4d05571da78c59ebaaa3f3/SartoriUSB-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b9904942b59201f23772899261369ffa", "sha256": "59c653826ac984089161b7f850bb498982356bd25857c34a5a9826cae57c2226"}, "downloads": -1, "filename": "SartoriUSB-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b9904942b59201f23772899261369ffa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9684, "upload_time": "2019-11-12T12:07:03", "upload_time_iso_8601": "2019-11-12T12:07:03.295338Z", "url": "https://files.pythonhosted.org/packages/ac/07/5cfbbaf1c843da064b2503e5f1e031b350c3f6488675564f6f40c7f50307/SartoriUSB-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9147307b4b90a69918d71d7fabf42629", "sha256": "043f5a6bcd4795371f0d39ff57b139b542b7ee6be7d5ccd5ef92df494a4ab34b"}, "downloads": -1, "filename": "SartoriUSB-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9147307b4b90a69918d71d7fabf42629", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7672, "upload_time": "2019-11-12T12:07:11", "upload_time_iso_8601": "2019-11-12T12:07:11.485218Z", "url": "https://files.pythonhosted.org/packages/29/3a/87c5f777adb9133ebadd9a4f498911bf2755ee93a08ac820f93d96803b8a/SartoriUSB-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "73dbcece79c8b2d4bee966e65e8ea099", "sha256": "7bb5789300537c08e72b0463aacb3d5338d94093f5acb054b4b2b0ef52a5f3de"}, "downloads": -1, "filename": "SartoriUSB-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "73dbcece79c8b2d4bee966e65e8ea099", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9701, "upload_time": "2019-11-12T12:09:09", "upload_time_iso_8601": "2019-11-12T12:09:09.620974Z", "url": "https://files.pythonhosted.org/packages/b8/b9/4cbbbf9b96c9173e9cb3ffe956f5d0ebc1260f870071ed1c741c7c421faa/SartoriUSB-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d88a6d85cb5cd779568082e7bced7b0", "sha256": "dd9744ed87d11a38aa6e6e9307818bc213b17d6122c2926a877ff13dd9abf79f"}, "downloads": -1, "filename": "SartoriUSB-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6d88a6d85cb5cd779568082e7bced7b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7677, "upload_time": "2019-11-12T12:09:17", "upload_time_iso_8601": "2019-11-12T12:09:17.826079Z", "url": "https://files.pythonhosted.org/packages/39/83/6ce34436797fdf569bbb7d9d631894ae8b0d5529aa4e4b50c81b148b9e04/SartoriUSB-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "546dc181046a9ca1167bfba65cc788eb", "sha256": "da98c4fada001b34c7e70ed9f15107a16be7ef94958b2376af906f71b71f49e5"}, "downloads": -1, "filename": "SartoriUSB-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "546dc181046a9ca1167bfba65cc788eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9662, "upload_time": "2020-02-18T11:29:26", "upload_time_iso_8601": "2020-02-18T11:29:26.744734Z", "url": "https://files.pythonhosted.org/packages/20/45/b6876d495ee95ed46ac311df5542c386a9adc2b182d987e705d65611c8b5/SartoriUSB-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90b66b8d74f3ef0d5a7fba17e5078113", "sha256": "40586efe4a8cc126d1ace8634464b2330ba86368faf0e09568b45e640cab393f"}, "downloads": -1, "filename": "SartoriUSB-0.2.3.tar.gz", "has_sig": false, "md5_digest": "90b66b8d74f3ef0d5a7fba17e5078113", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8376, "upload_time": "2020-02-18T11:29:34", "upload_time_iso_8601": "2020-02-18T11:29:34.665814Z", "url": "https://files.pythonhosted.org/packages/cd/a9/84f44b5bd4349dfa152a557e67097f37ae60f630a51d59df0d122e65e2fb/SartoriUSB-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "546dc181046a9ca1167bfba65cc788eb", "sha256": "da98c4fada001b34c7e70ed9f15107a16be7ef94958b2376af906f71b71f49e5"}, "downloads": -1, "filename": "SartoriUSB-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "546dc181046a9ca1167bfba65cc788eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 9662, "upload_time": "2020-02-18T11:29:26", "upload_time_iso_8601": "2020-02-18T11:29:26.744734Z", "url": "https://files.pythonhosted.org/packages/20/45/b6876d495ee95ed46ac311df5542c386a9adc2b182d987e705d65611c8b5/SartoriUSB-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90b66b8d74f3ef0d5a7fba17e5078113", "sha256": "40586efe4a8cc126d1ace8634464b2330ba86368faf0e09568b45e640cab393f"}, "downloads": -1, "filename": "SartoriUSB-0.2.3.tar.gz", "has_sig": false, "md5_digest": "90b66b8d74f3ef0d5a7fba17e5078113", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8376, "upload_time": "2020-02-18T11:29:34", "upload_time_iso_8601": "2020-02-18T11:29:34.665814Z", "url": "https://files.pythonhosted.org/packages/cd/a9/84f44b5bd4349dfa152a557e67097f37ae60f630a51d59df0d122e65e2fb/SartoriUSB-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:34 2020"}