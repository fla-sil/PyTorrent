{"info": {"author": "Justin Morris", "author_email": "justin@pixelbloom.com", "bugtrack_url": null, "classifiers": [], "description": "# Cobra Commander - Henchman\nYou mindless husk, you.\n\n\n## Snakefiles\nA snakefile is what is used to configure and run a Henchman build. A snakefile can be any arbitrary file or executable so long as it outputs valid JSON to stdout when it is invoked.\n\nThere is only one key/value that __must__ be in your snakfile JSON;\n\n- `build`: an array of strings containing the steps required to build your project. These are executed serially.\n\nHowever there are also a bunch of other optional properties that you can set in your snakefile to achieve different outcomes, here are a few;\n\n- `environment`: an object whose keys/values are environment variables that should be set prior to any `build` steps being invoked.\n- `hooks`:\n  - `before_build`\n  - `after_build`\n  - `after_passing`\n  - `after_failing`\n\n\n## Extensions (notes for future spec)\n\nExtensions come a in a bunch of different flavours, usually depending on the function that they provide.\n\nExtensions may add extra abilities and functionality at certain registration points within the build process (eg; post build, during hooks, etc.)\n\nIf an extension needs configuration or params before being invoked at its registration point they can be passed in the snakefile as such;\n\n    'hooks': {\n      'before_build':[\n        ['my_extension', ['args'], {'kwargs':'foo'}],\n        ['my_other_extension', ['args']],\n        ['etc']\n      ]\n    }", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/plasticine/cobracommander-henchman", "keywords": null, "license": "Creative Commons Attribution-Noncommercial-Share Alike license", "maintainer": null, "maintainer_email": null, "name": "Henchman", "package_url": "https://pypi.org/project/Henchman/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Henchman/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/plasticine/cobracommander-henchman"}, "release_url": "https://pypi.org/project/Henchman/0.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Cobra Commander - Henchman<br>You mindless husk, you.<br><br><br>## Snakefiles<br>A snakefile is what is used to configure and run a Henchman build. A snakefile can be any arbitrary file or executable so long as it outputs valid JSON to stdout when it is invoked.<br><br>There is only one key/value that __must__ be in your snakfile JSON;<br><br>- `build`: an array of strings containing the steps required to build your project. These are executed serially.<br><br>However there are also a bunch of other optional properties that you can set in your snakefile to achieve different outcomes, here are a few;<br><br>- `environment`: an object whose keys/values are environment variables that should be set prior to any `build` steps being invoked.<br>- `hooks`:<br>  - `before_build`<br>  - `after_build`<br>  - `after_passing`<br>  - `after_failing`<br><br><br>## Extensions (notes for future spec)<br><br>Extensions come a in a bunch of different flavours, usually depending on the function that they provide.<br><br>Extensions may add extra abilities and functionality at certain registration points within the build process (eg; post build, during hooks, etc.)<br><br>If an extension needs configuration or params before being invoked at its registration point they can be passed in the snakefile as such;<br><br>    'hooks': {<br>      'before_build':[<br>        ['my_extension', ['args'], {'kwargs':'foo'}],<br>        ['my_other_extension', ['args']],<br>        ['etc']<br>      ]<br>    }\n          </div>"}, "last_serial": 379402, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 00:51:37 2020"}