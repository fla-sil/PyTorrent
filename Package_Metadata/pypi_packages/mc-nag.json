{"info": {"author": "Stelligent", "author_email": "stelligent@stelligent.com", "bugtrack_url": null, "classifiers": [], "description": "# Multi-Cloud (MC) Nag Static Analysis Tool\n\n![mc-nag](https://github.com/stelligent/mc-nag/workflows/mc-nag/badge.svg)\n![releases](https://github.com/stelligent/mc-nag/workflows/releases/badge.svg)\n![vscode-container](https://github.com/stelligent/mc-nag/workflows/vscode-container/badge.svg)\n\n# Background\n\nmc_nag provides the framework for platform-specific \"nag\" tools (e.g. [azure-nag](https://github.com/stelligent/azure-nag)) to validate IAC templates for patterns that may defy best practices or indicate insecure resources.  It provides base classes for parsers, template data models, and rules so those platform-specific \"nag\" tools can focus on the platform's logic.\n\n![mc-nag Process Flow](assets/mc-nag_process_flow.png)\n\n# Prerequisites\n\n* pyenv >= 1.2.18\n* Python >=3.7 (from pyenv)\n\n# Installation\n\n`pip install mc-nag`\n\n# Usage\n\nOnce you've imported modules from `mc-nag`, you can subclass those base classes to provde a starting point for your platform-specific tool.\n\n```python\nfrom mc_nag.base_utils.models.template import BaseTemplate\n```\n\n```python\nclass PlatformTemplate(BaseTemplate):\n    ...\n```\n\n# Development\n\n## VS Code Remote Development\nThere is a complete remote development environment created and setup with all the tools and settings pre-configured for ease in rule development and creation. You can enable this by using the VS Code Remote development functionality.\n\n- Install the VS Code [Remote Development extension pack](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)\n- Open the repo in VS Code\n- When prompted \"`Folder contains a dev container configuration file. Reopen folder to develop in a container`\" click the \"`Reopen in Container`\" button\n- When opening in the future use the \"`[Dev Container] mc_nag Development`\" option\n\n## Rule Creation\n\nRules are at the crux of mc-nag's purpose.  They create its functionality but are flexible enough to be able to create/update/delete them at will.  Rules are stored within each platform-specific \"nag\" tool (e.g. [azure-nag](https://github.com/stelligent/azure-nag)), however the structure of the `BaseRule` class is defined here.\n\n### Structure\n\nAll rules must be subclassed from the [`BaseRule` class](mc_nag/base_utils/models/rule.py).  It contains the basic necessities and structure for a rule class, as well as validation mechanisms to ensure your rule class will behave as expected.\n\nEvery rule must have at least:\n* **Attributes**\n  * *rule_id*: Unique identifier for the rule.\n  * *description*: Plain language description of what the rule is trying to accomplish.\n  * *severity*: The impact the rule has on the run of mc-nag.  One of [`rule.ERROR`, `rule.WARNING`, `rule.STYLE`].\n  * *url*: Page at which more information can be found on the rule.\n  * *resolution*: Steps to take in order to remediate any violations the rule finds.\n* **Methods**\n  * *evaluate*: Logic to perform the rule's stated function.  Must return a list of violating resources.\n\n[Sample rule](https://github.com/stelligent/azure-nag/blob/master/azure_nag/rules/azure_storageaccount_encrypted_rule.py) which shows basic structure\n\n### Testing\n\nIt is good practice to create unit tests and multiple example templates to accompany your new rule in order to prove your rule logic works properly.  Tests should consider both good and bad scenarios, as well as any novel scenarios which may crop up in practice.\n\nWhen you have a rule ready for evaluation, you can either pass its containing directory as a `--custom-platform-rules-dir` CLI option to the platform-specific \"nag\" executable or, if you have the source checked out, you can place the rule into the platform-specific tool's rules directory.\n\n[Sample unit tests](https://github.com/stelligent/azure-nag/blob/master/tests/rules/test_azure_storageaccount_encrypted_rule.py)\n\n[Sample test templates](https://github.com/stelligent/azure-nag/tree/master/tests/templates)\n\n## Template Model Creation\n\nThe template model is a generic way to represent different platforms' templates.  After a template is parsed, its parsed data is stored in the template model for evaluation by the rule set.\n\n### Structure\n\nAll template models must be subclassed from the [`BaseTemplate` class](mc_nag/base_utils/models/template.py).  It contains the basic necessities and structure for a template model class, as well as validation mechanisms to ensure your template model class will behave as expected.\n\nEvery template model must have at least:\n* **Attributes**\n  * *template_string*: Raw string read from the template file.\n  * *parsed_template*: Platform-specific parser object (e.g. [`AzureParser`](https://github.com/stelligent/azure-nag/blob/master/azure_nag/azure_parser.py)), which returns the parsed template model.\n  * *resources*: List of platform-specific resource objects (e.g. [`AzureResource`](https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_resource.py)) created from the parsed template model.\n  * *parameters*: List of platform-specific parameter objects (e.g. [`AzureParameter`](https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_parameter.py)) created from the parsed template model.\n  * *outputs*: List of platform-specific output objects (e.g. [`AzureOutput`](https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_output.py)) created from the parsed template model.\n  * *functions*: List of platform-specific function objects (e.g. [`AzureFunction`](https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_function.py)) created from the parsed template model.\n  * *variables*: List of platform-specific variable objects (e.g. [`AzureVariable`](https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_variable.py)) created from the parsed template model.\n\nThe attributes listed above must be defined, even if they are just empty lists.\n\n[Sample template model](https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_template.py) which shows basic structure\n\n### Testing\n\nIt is good practice to create unit tests and multiple example templates to accompany your new template model in order to prove your data model logic works properly.  Tests should consider both good and bad scenarios, as well as any novel scenarios which may crop up in practice.\n\n[Sample unit tests](https://github.com/stelligent/azure-nag/blob/master/tests/test_azure_template.py)\n\n[Sample test templates](https://github.com/stelligent/azure-nag/tree/master/tests/templates)\n\n# Releases\n**Note**: Before releasing, ensure the version string in [`mc_nag/__init__.py`](mc_nag/__init__.py) has been updated with the new string.\n\nCurrently, new releases are generated when a user manually publishes the previously created draft release in the GitHub UI.  The [mc-nag workflow](https://github.com/stelligent/mc-nag/actions?query=workflow%3Amc-nag) will generate a draft release for the repo via the `release-drafter` GitHub Action which contains the list of all changes since the previous release.\n![draft_release](assets/draft_release.png)\n\n# Support\n\nTo report a bug or request a feature, submit an issue through the GitHub repository via https://github.com/stelligent/mc-nag/issues/new.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stelligent/mc-nag", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mc-nag", "package_url": "https://pypi.org/project/mc-nag/", "platform": "", "project_url": "https://pypi.org/project/mc-nag/", "project_urls": {"Homepage": "https://github.com/stelligent/mc-nag"}, "release_url": "https://pypi.org/project/mc-nag/0.0.3/", "requires_dist": ["jstyleson", "setuptools", "wheel", "click", "pytest", "pytest-cov", "coverage", "pylint", "flake8", "flake8-docstrings", "autopep8", "pycodestyle", "pyyaml", "twine"], "requires_python": ">=3.7", "summary": "mc-nag multi-cloud static analysis tool", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Multi-Cloud (MC) Nag Static Analysis Tool</h1>\n<p><img alt=\"mc-nag\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a621d9c2f21f5fb3fdcc244caf9d2b70bc50fb7c/68747470733a2f2f6769746875622e636f6d2f7374656c6c6967656e742f6d632d6e61672f776f726b666c6f77732f6d632d6e61672f62616467652e737667\">\n<img alt=\"releases\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2b7a12c859efe7dbc700e4775182c96976b048c/68747470733a2f2f6769746875622e636f6d2f7374656c6c6967656e742f6d632d6e61672f776f726b666c6f77732f72656c65617365732f62616467652e737667\">\n<img alt=\"vscode-container\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a78a3cc4e91d1466ecbb15cf305bdfa3b393adb1/68747470733a2f2f6769746875622e636f6d2f7374656c6c6967656e742f6d632d6e61672f776f726b666c6f77732f7673636f64652d636f6e7461696e65722f62616467652e737667\"></p>\n<h1>Background</h1>\n<p>mc_nag provides the framework for platform-specific \"nag\" tools (e.g. <a href=\"https://github.com/stelligent/azure-nag\" rel=\"nofollow\">azure-nag</a>) to validate IAC templates for patterns that may defy best practices or indicate insecure resources.  It provides base classes for parsers, template data models, and rules so those platform-specific \"nag\" tools can focus on the platform's logic.</p>\n<p><img alt=\"mc-nag Process Flow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/002fc784f0e8f8139e829cabbcda5017ca791848/6173736574732f6d632d6e61675f70726f636573735f666c6f772e706e67\"></p>\n<h1>Prerequisites</h1>\n<ul>\n<li>pyenv &gt;= 1.2.18</li>\n<li>Python &gt;=3.7 (from pyenv)</li>\n</ul>\n<h1>Installation</h1>\n<p><code>pip install mc-nag</code></p>\n<h1>Usage</h1>\n<p>Once you've imported modules from <code>mc-nag</code>, you can subclass those base classes to provde a starting point for your platform-specific tool.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mc_nag.base_utils.models.template</span> <span class=\"kn\">import</span> <span class=\"n\">BaseTemplate</span>\n</pre>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PlatformTemplate</span><span class=\"p\">(</span><span class=\"n\">BaseTemplate</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<h1>Development</h1>\n<h2>VS Code Remote Development</h2>\n<p>There is a complete remote development environment created and setup with all the tools and settings pre-configured for ease in rule development and creation. You can enable this by using the VS Code Remote development functionality.</p>\n<ul>\n<li>Install the VS Code <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack\" rel=\"nofollow\">Remote Development extension pack</a></li>\n<li>Open the repo in VS Code</li>\n<li>When prompted \"<code>Folder contains a dev container configuration file. Reopen folder to develop in a container</code>\" click the \"<code>Reopen in Container</code>\" button</li>\n<li>When opening in the future use the \"<code>[Dev Container] mc_nag Development</code>\" option</li>\n</ul>\n<h2>Rule Creation</h2>\n<p>Rules are at the crux of mc-nag's purpose.  They create its functionality but are flexible enough to be able to create/update/delete them at will.  Rules are stored within each platform-specific \"nag\" tool (e.g. <a href=\"https://github.com/stelligent/azure-nag\" rel=\"nofollow\">azure-nag</a>), however the structure of the <code>BaseRule</code> class is defined here.</p>\n<h3>Structure</h3>\n<p>All rules must be subclassed from the <a href=\"mc_nag/base_utils/models/rule.py\" rel=\"nofollow\"><code>BaseRule</code> class</a>.  It contains the basic necessities and structure for a rule class, as well as validation mechanisms to ensure your rule class will behave as expected.</p>\n<p>Every rule must have at least:</p>\n<ul>\n<li><strong>Attributes</strong>\n<ul>\n<li><em>rule_id</em>: Unique identifier for the rule.</li>\n<li><em>description</em>: Plain language description of what the rule is trying to accomplish.</li>\n<li><em>severity</em>: The impact the rule has on the run of mc-nag.  One of [<code>rule.ERROR</code>, <code>rule.WARNING</code>, <code>rule.STYLE</code>].</li>\n<li><em>url</em>: Page at which more information can be found on the rule.</li>\n<li><em>resolution</em>: Steps to take in order to remediate any violations the rule finds.</li>\n</ul>\n</li>\n<li><strong>Methods</strong>\n<ul>\n<li><em>evaluate</em>: Logic to perform the rule's stated function.  Must return a list of violating resources.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/stelligent/azure-nag/blob/master/azure_nag/rules/azure_storageaccount_encrypted_rule.py\" rel=\"nofollow\">Sample rule</a> which shows basic structure</p>\n<h3>Testing</h3>\n<p>It is good practice to create unit tests and multiple example templates to accompany your new rule in order to prove your rule logic works properly.  Tests should consider both good and bad scenarios, as well as any novel scenarios which may crop up in practice.</p>\n<p>When you have a rule ready for evaluation, you can either pass its containing directory as a <code>--custom-platform-rules-dir</code> CLI option to the platform-specific \"nag\" executable or, if you have the source checked out, you can place the rule into the platform-specific tool's rules directory.</p>\n<p><a href=\"https://github.com/stelligent/azure-nag/blob/master/tests/rules/test_azure_storageaccount_encrypted_rule.py\" rel=\"nofollow\">Sample unit tests</a></p>\n<p><a href=\"https://github.com/stelligent/azure-nag/tree/master/tests/templates\" rel=\"nofollow\">Sample test templates</a></p>\n<h2>Template Model Creation</h2>\n<p>The template model is a generic way to represent different platforms' templates.  After a template is parsed, its parsed data is stored in the template model for evaluation by the rule set.</p>\n<h3>Structure</h3>\n<p>All template models must be subclassed from the <a href=\"mc_nag/base_utils/models/template.py\" rel=\"nofollow\"><code>BaseTemplate</code> class</a>.  It contains the basic necessities and structure for a template model class, as well as validation mechanisms to ensure your template model class will behave as expected.</p>\n<p>Every template model must have at least:</p>\n<ul>\n<li><strong>Attributes</strong>\n<ul>\n<li><em>template_string</em>: Raw string read from the template file.</li>\n<li><em>parsed_template</em>: Platform-specific parser object (e.g. <a href=\"https://github.com/stelligent/azure-nag/blob/master/azure_nag/azure_parser.py\" rel=\"nofollow\"><code>AzureParser</code></a>), which returns the parsed template model.</li>\n<li><em>resources</em>: List of platform-specific resource objects (e.g. <a href=\"https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_resource.py\" rel=\"nofollow\"><code>AzureResource</code></a>) created from the parsed template model.</li>\n<li><em>parameters</em>: List of platform-specific parameter objects (e.g. <a href=\"https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_parameter.py\" rel=\"nofollow\"><code>AzureParameter</code></a>) created from the parsed template model.</li>\n<li><em>outputs</em>: List of platform-specific output objects (e.g. <a href=\"https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_output.py\" rel=\"nofollow\"><code>AzureOutput</code></a>) created from the parsed template model.</li>\n<li><em>functions</em>: List of platform-specific function objects (e.g. <a href=\"https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_function.py\" rel=\"nofollow\"><code>AzureFunction</code></a>) created from the parsed template model.</li>\n<li><em>variables</em>: List of platform-specific variable objects (e.g. <a href=\"https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_variable.py\" rel=\"nofollow\"><code>AzureVariable</code></a>) created from the parsed template model.</li>\n</ul>\n</li>\n</ul>\n<p>The attributes listed above must be defined, even if they are just empty lists.</p>\n<p><a href=\"https://github.com/stelligent/azure-nag/blob/master/azure_nag/models/azure_template.py\" rel=\"nofollow\">Sample template model</a> which shows basic structure</p>\n<h3>Testing</h3>\n<p>It is good practice to create unit tests and multiple example templates to accompany your new template model in order to prove your data model logic works properly.  Tests should consider both good and bad scenarios, as well as any novel scenarios which may crop up in practice.</p>\n<p><a href=\"https://github.com/stelligent/azure-nag/blob/master/tests/test_azure_template.py\" rel=\"nofollow\">Sample unit tests</a></p>\n<p><a href=\"https://github.com/stelligent/azure-nag/tree/master/tests/templates\" rel=\"nofollow\">Sample test templates</a></p>\n<h1>Releases</h1>\n<p><strong>Note</strong>: Before releasing, ensure the version string in <a href=\"mc_nag/__init__.py\" rel=\"nofollow\"><code>mc_nag/__init__.py</code></a> has been updated with the new string.</p>\n<p>Currently, new releases are generated when a user manually publishes the previously created draft release in the GitHub UI.  The <a href=\"https://github.com/stelligent/mc-nag/actions?query=workflow%3Amc-nag\" rel=\"nofollow\">mc-nag workflow</a> will generate a draft release for the repo via the <code>release-drafter</code> GitHub Action which contains the list of all changes since the previous release.\n<img alt=\"draft_release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49df4e43a66109e26237afa03b37744740c59d10/6173736574732f64726166745f72656c656173652e706e67\"></p>\n<h1>Support</h1>\n<p>To report a bug or request a feature, submit an issue through the GitHub repository via <a href=\"https://github.com/stelligent/mc-nag/issues/new\" rel=\"nofollow\">https://github.com/stelligent/mc-nag/issues/new</a>.</p>\n\n          </div>"}, "last_serial": 7189692, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d8ba90f5536376dc7e6c21b48e4ede35", "sha256": "438156e5c79f094e81f23987da484cd1dfca45630d0b95152b270b497e371ff6"}, "downloads": -1, "filename": "mc_nag-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d8ba90f5536376dc7e6c21b48e4ede35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 23327, "upload_time": "2020-05-04T16:17:36", "upload_time_iso_8601": "2020-05-04T16:17:36.131125Z", "url": "https://files.pythonhosted.org/packages/c5/29/1942d40030a236fbfc75c4a5f0872b08a3f9d546d45c6c4628cafe71081d/mc_nag-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afe91e98e6c14c6551d018f523ede7b4", "sha256": "d7db500e8a07e09a6e86abbd6de80ba20c96d94299e84c3bbf99e96f68d11755"}, "downloads": -1, "filename": "mc_nag-0.0.1.tar.gz", "has_sig": false, "md5_digest": "afe91e98e6c14c6551d018f523ede7b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18460, "upload_time": "2020-05-04T16:17:38", "upload_time_iso_8601": "2020-05-04T16:17:38.500630Z", "url": "https://files.pythonhosted.org/packages/e8/03/d8581ace567b127afb1c1f4546f0ca43e151f1ae36d8432e98e58489e4c3/mc_nag-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a5339dbfb0f0876391488d8f0fa9c72a", "sha256": "241e1126b73c5f977b01ea07e1fb4eafd489f323baa616521d6f9a9cd8cc8e06"}, "downloads": -1, "filename": "mc_nag-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a5339dbfb0f0876391488d8f0fa9c72a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 23333, "upload_time": "2020-05-04T18:30:52", "upload_time_iso_8601": "2020-05-04T18:30:52.323452Z", "url": "https://files.pythonhosted.org/packages/b3/7a/545c33c409ace20d5e12925c0be3511e3ca4749ceab242cc4b3d3d4d548a/mc_nag-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ee3b89daf80b7b0d0a57887615d4d3e", "sha256": "c816f03c2235847fa8785e40a57c89f01f63e6f352fcdcfafd09a1fbc2684e21"}, "downloads": -1, "filename": "mc_nag-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9ee3b89daf80b7b0d0a57887615d4d3e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18334, "upload_time": "2020-05-04T18:30:53", "upload_time_iso_8601": "2020-05-04T18:30:53.146802Z", "url": "https://files.pythonhosted.org/packages/47/e9/b40e9bb50ba8eeb60be12d409edd243d9d4aa8497e4411fd5fea96b226b2/mc_nag-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "193b82cc385ad9ae12721cd58c779321", "sha256": "4ebb565fed390c7d6f53c5f0150594a613f314f20c61613f18c25e0d9be360b9"}, "downloads": -1, "filename": "mc_nag-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "193b82cc385ad9ae12721cd58c779321", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 23452, "upload_time": "2020-05-07T15:53:58", "upload_time_iso_8601": "2020-05-07T15:53:58.344783Z", "url": "https://files.pythonhosted.org/packages/06/a0/482cb22fd41a6d18ef30e35f9224d10e6d0e79155dde1023865f7c250ca7/mc_nag-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b09dbed1b5dabad4e00c9e62e1c55d12", "sha256": "89c1c7548b8462d1ac9b50efd592c20bfe0009640ebbda9aad79d8fc5ffb8cfb"}, "downloads": -1, "filename": "mc_nag-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b09dbed1b5dabad4e00c9e62e1c55d12", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17349, "upload_time": "2020-05-07T15:53:59", "upload_time_iso_8601": "2020-05-07T15:53:59.469190Z", "url": "https://files.pythonhosted.org/packages/b5/91/84b290f3f34d511eb2dcb36f34f62ca2a17de9d55a18937858f42606a009/mc_nag-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "193b82cc385ad9ae12721cd58c779321", "sha256": "4ebb565fed390c7d6f53c5f0150594a613f314f20c61613f18c25e0d9be360b9"}, "downloads": -1, "filename": "mc_nag-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "193b82cc385ad9ae12721cd58c779321", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 23452, "upload_time": "2020-05-07T15:53:58", "upload_time_iso_8601": "2020-05-07T15:53:58.344783Z", "url": "https://files.pythonhosted.org/packages/06/a0/482cb22fd41a6d18ef30e35f9224d10e6d0e79155dde1023865f7c250ca7/mc_nag-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b09dbed1b5dabad4e00c9e62e1c55d12", "sha256": "89c1c7548b8462d1ac9b50efd592c20bfe0009640ebbda9aad79d8fc5ffb8cfb"}, "downloads": -1, "filename": "mc_nag-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b09dbed1b5dabad4e00c9e62e1c55d12", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17349, "upload_time": "2020-05-07T15:53:59", "upload_time_iso_8601": "2020-05-07T15:53:59.469190Z", "url": "https://files.pythonhosted.org/packages/b5/91/84b290f3f34d511eb2dcb36f34f62ca2a17de9d55a18937858f42606a009/mc_nag-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:56 2020"}