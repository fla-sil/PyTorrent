{"info": {"author": "Shane Smiskol", "author_email": "shane@smiskol.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Konverter ![Konverter Tests](https://github.com/ShaneSmiskol/Konverter/workflows/Konverter%20Tests/badge.svg)\n### Convert your Keras models into pure Python + NumPy.\n\nThe goal of this tool is to provide a quick and easy way to execute Keras models on machines or setups where utilizing TensorFlow/Keras is impossible. Specifically, in my case, to replace SNPE (Snapdragon Neural Processing Engine) for inference on phones with Python.\n\n## Supported Keras Model Attributes\n- Models:\n  - Sequential\n- Layers:\n  - Dense\n  - Dropout\n    - Will be ignored during inference (SNPE 1.19 does NOT support dropout with Keras!)\n  - SimpleRNN\n    - Batch predictions do not currently work correctly.\n  - GRU\n    - **Important:** The current GRU support is based on [`GRU v3`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/GRU) in tf.keras 2.1.0. It will not work correctly with older versions of TensorFlow.\n    - Batch prediction untested\n  - BatchNormalization\n    - Works with all supported layers\n- Activations:\n  - ReLU\n  - Sigmoid\n  - Softmax\n  - Tanh\n  - Linear/None\n\n#### Roadmap\nThe project to do list can be [found here](https://github.com/ShaneSmiskol/Konverter/projects/1).\n\n## Features\n- Super quick conversion of your models. Takes less than a second.\n- Usually reduces the size of Keras models by about 69.37%.\n- In some cases, prediction is quicker than Keras or SNPE (dense models).\n  - RNNs: Since we lose the GPU using NumPy, predictions may be slower\n- Stores the weights and biases of your model in a separate compressed NumPy file.\n\n## Benchmarks\nBenchmarks can be found in [BENCHMARKS.md](BENCHMARKS.md).\n\n## Installation & Usage\n### Install Konverter using pip:\n`pip install keras-konverter`\n\n### Import Konverter and create an instance:\n```python\n>>> from konverter import Konverter\n>>> konverter = Konverter()\n```\n\nNow you can use the instance to Konvert a model:\n```python\n>>> konverter.konvert(input_model='examples/all_dense.h5', output_file='examples/all_dense.py')\n```\n\nValid parameters:\n- `input_model`: Either the the location of your tf.keras .h5 model, or a preloaded model\n- `output_file`: The desired path and name of the output files, will be automatically formatted if .py is the suffix\n- Optional:\n  - `indent_spaces`: The number of spaces to use for indentation\n  - `verbose`: To print status messages from Konverter\n  - `use_watermark`: To prepend a watermark comment to model wrapper\n\n*Note: The model file will be saved as `f'{output_file}.py'` and the weights will be saved as `f'{output_file}_weights.npz'` in the same directory. Make sure to change the path inside the model wrapper if you move the files after Konversion.*\n\nThat's it! If your model is supported (check [Supported Keras Model Attributes](#Supported-Keras-Model-Attributes)), then your newly converted Konverter model should be ready to go.\n\nTo predict: Import your model wrapper and run the `predict()` function. Always double check that the outputs closely match your Keras model's. Automatic verification will come soon. **For safety, always make sure your input is a `np.float32` array.**\n\n```python\nimport numpy as np\nfrom examples.all_dense import predict\npredict(np.random.rand(200).astype(np.float32))\n```\n\n[See limitations and issues.](#Current-Limitations-and-Issues)\n\n## Demo:\n<img src=\"https://raw.githubusercontent.com/ShaneSmiskol/Konverter/master/.media/konverter.gif?raw=true\" width=\"913\">\n\n\n## Dependencies\nThanks to [@apiad](https://github.com/apiad) you can now use [Poetry](https://github.com/python-poetry/poetry) to install all the needed dependencies for this tool! However the requirements are a pretty short list:\n- It seems most versions of TensorFlow that include Keras work perfectly fine. Tested from 1.14 to 2.1.0 using Actions and no issues have occurred.\n  - **Important**: You must create your models with tf.keras currently (not keras)\n- Python >= 3.6 (for the glorious f-strings!)\n- [Typer](https://github.com/tiangolo/typer/issues), requires >= 3.6\n\nTo install all needed dependencies, simply `cd` into the base directory of Konverter, and run:\n\n```\npoetry install --no-dev\n```\n\n## Current Limitations and Issues\n- Dimensionality of input data:\n\n  When working with models using `softmax`, the dimensionality of the input data matters. For example, predicting on the same data with different input dimensionality sometimes results in different outputs:\n  ```python\n  >>> model.predict([[1, 3, 5]])  # keras model, correct output\n  array([[14.792273, 15.59787 , 15.543163]])\n  >>> predict([[1, 3, 5]])  # Konverted model, wrong output\n  array([[11.97839948, 18.09931636, 15.48014805]])\n  >>> predict([1, 3, 5])  # And correct output\n  array([14.79227209, 15.59786987, 15.54316282])\n  ```\n\n  If trying a batch prediction with classes and `softmax`, the model fails completely:\n  ```python\n  >>> predict([[0.5], [0.5]])\n  array([[0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5]])\n  ```\n\n  Always double check that predictions are working correctly before deploying the model.\n- Batch prediction with SimpleRNN (and possibly all RNN) layers\n\n  Currently, the converted model has no way of determining if you're feeding a single prediction or a batch of predictions, and it will fail to give the correct output. Support will be added soon.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ShaneSmiskol/Konverter", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "keras-konverter", "package_url": "https://pypi.org/project/keras-konverter/", "platform": "", "project_url": "https://pypi.org/project/keras-konverter/", "project_urls": {"Homepage": "https://github.com/ShaneSmiskol/Konverter", "Repository": "https://github.com/ShaneSmiskol/Konverter"}, "release_url": "https://pypi.org/project/keras-konverter/0.1.6/", "requires_dist": ["typer (>=0.1.1,<0.2.0)", "numpy (>=1.18.3,<2.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "A tool to convert simple Keras models to pure Python + NumPy", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Konverter <img alt=\"Konverter Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e3ae0c6c0195aa2a06fa1d7a6e96b00f5395e4d/68747470733a2f2f6769746875622e636f6d2f5368616e65536d69736b6f6c2f4b6f6e7665727465722f776f726b666c6f77732f4b6f6e76657274657225323054657374732f62616467652e737667\"></h1>\n<h3>Convert your Keras models into pure Python + NumPy.</h3>\n<p>The goal of this tool is to provide a quick and easy way to execute Keras models on machines or setups where utilizing TensorFlow/Keras is impossible. Specifically, in my case, to replace SNPE (Snapdragon Neural Processing Engine) for inference on phones with Python.</p>\n<h2>Supported Keras Model Attributes</h2>\n<ul>\n<li>Models:\n<ul>\n<li>Sequential</li>\n</ul>\n</li>\n<li>Layers:\n<ul>\n<li>Dense</li>\n<li>Dropout\n<ul>\n<li>Will be ignored during inference (SNPE 1.19 does NOT support dropout with Keras!)</li>\n</ul>\n</li>\n<li>SimpleRNN\n<ul>\n<li>Batch predictions do not currently work correctly.</li>\n</ul>\n</li>\n<li>GRU\n<ul>\n<li><strong>Important:</strong> The current GRU support is based on <a href=\"https://www.tensorflow.org/api_docs/python/tf/keras/layers/GRU\" rel=\"nofollow\"><code>GRU v3</code></a> in tf.keras 2.1.0. It will not work correctly with older versions of TensorFlow.</li>\n<li>Batch prediction untested</li>\n</ul>\n</li>\n<li>BatchNormalization\n<ul>\n<li>Works with all supported layers</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Activations:\n<ul>\n<li>ReLU</li>\n<li>Sigmoid</li>\n<li>Softmax</li>\n<li>Tanh</li>\n<li>Linear/None</li>\n</ul>\n</li>\n</ul>\n<h4>Roadmap</h4>\n<p>The project to do list can be <a href=\"https://github.com/ShaneSmiskol/Konverter/projects/1\" rel=\"nofollow\">found here</a>.</p>\n<h2>Features</h2>\n<ul>\n<li>Super quick conversion of your models. Takes less than a second.</li>\n<li>Usually reduces the size of Keras models by about 69.37%.</li>\n<li>In some cases, prediction is quicker than Keras or SNPE (dense models).\n<ul>\n<li>RNNs: Since we lose the GPU using NumPy, predictions may be slower</li>\n</ul>\n</li>\n<li>Stores the weights and biases of your model in a separate compressed NumPy file.</li>\n</ul>\n<h2>Benchmarks</h2>\n<p>Benchmarks can be found in <a href=\"BENCHMARKS.md\" rel=\"nofollow\">BENCHMARKS.md</a>.</p>\n<h2>Installation &amp; Usage</h2>\n<h3>Install Konverter using pip:</h3>\n<p><code>pip install keras-konverter</code></p>\n<h3>Import Konverter and create an instance:</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">konverter</span> <span class=\"kn\">import</span> <span class=\"n\">Konverter</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">konverter</span> <span class=\"o\">=</span> <span class=\"n\">Konverter</span><span class=\"p\">()</span>\n</pre>\n<p>Now you can use the instance to Konvert a model:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">konverter</span><span class=\"o\">.</span><span class=\"n\">konvert</span><span class=\"p\">(</span><span class=\"n\">input_model</span><span class=\"o\">=</span><span class=\"s1\">'examples/all_dense.h5'</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"s1\">'examples/all_dense.py'</span><span class=\"p\">)</span>\n</pre>\n<p>Valid parameters:</p>\n<ul>\n<li><code>input_model</code>: Either the the location of your tf.keras .h5 model, or a preloaded model</li>\n<li><code>output_file</code>: The desired path and name of the output files, will be automatically formatted if .py is the suffix</li>\n<li>Optional:\n<ul>\n<li><code>indent_spaces</code>: The number of spaces to use for indentation</li>\n<li><code>verbose</code>: To print status messages from Konverter</li>\n<li><code>use_watermark</code>: To prepend a watermark comment to model wrapper</li>\n</ul>\n</li>\n</ul>\n<p><em>Note: The model file will be saved as <code>f'{output_file}.py'</code> and the weights will be saved as <code>f'{output_file}_weights.npz'</code> in the same directory. Make sure to change the path inside the model wrapper if you move the files after Konversion.</em></p>\n<p>That's it! If your model is supported (check <a href=\"#Supported-Keras-Model-Attributes\" rel=\"nofollow\">Supported Keras Model Attributes</a>), then your newly converted Konverter model should be ready to go.</p>\n<p>To predict: Import your model wrapper and run the <code>predict()</code> function. Always double check that the outputs closely match your Keras model's. Automatic verification will come soon. <strong>For safety, always make sure your input is a <code>np.float32</code> array.</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">examples.all_dense</span> <span class=\"kn\">import</span> <span class=\"n\">predict</span>\n<span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">))</span>\n</pre>\n<p><a href=\"#Current-Limitations-and-Issues\" rel=\"nofollow\">See limitations and issues.</a></p>\n<h2>Demo:</h2>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6d7a7c3351965f56c26d3c25dd0c477d5305a29/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5368616e65536d69736b6f6c2f4b6f6e7665727465722f6d61737465722f2e6d656469612f6b6f6e7665727465722e6769663f7261773d74727565\" width=\"913\">\n<h2>Dependencies</h2>\n<p>Thanks to <a href=\"https://github.com/apiad\" rel=\"nofollow\">@apiad</a> you can now use <a href=\"https://github.com/python-poetry/poetry\" rel=\"nofollow\">Poetry</a> to install all the needed dependencies for this tool! However the requirements are a pretty short list:</p>\n<ul>\n<li>It seems most versions of TensorFlow that include Keras work perfectly fine. Tested from 1.14 to 2.1.0 using Actions and no issues have occurred.\n<ul>\n<li><strong>Important</strong>: You must create your models with tf.keras currently (not keras)</li>\n</ul>\n</li>\n<li>Python &gt;= 3.6 (for the glorious f-strings!)</li>\n<li><a href=\"https://github.com/tiangolo/typer/issues\" rel=\"nofollow\">Typer</a>, requires &gt;= 3.6</li>\n</ul>\n<p>To install all needed dependencies, simply <code>cd</code> into the base directory of Konverter, and run:</p>\n<pre><code>poetry install --no-dev\n</code></pre>\n<h2>Current Limitations and Issues</h2>\n<ul>\n<li>\n<p>Dimensionality of input data:</p>\n<p>When working with models using <code>softmax</code>, the dimensionality of the input data matters. For example, predicting on the same data with different input dimensionality sometimes results in different outputs:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]])</span>  <span class=\"c1\"># keras model, correct output</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">14.792273</span><span class=\"p\">,</span> <span class=\"mf\">15.59787</span> <span class=\"p\">,</span> <span class=\"mf\">15.543163</span><span class=\"p\">]])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">predict</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]])</span>  <span class=\"c1\"># Konverted model, wrong output</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">11.97839948</span><span class=\"p\">,</span> <span class=\"mf\">18.09931636</span><span class=\"p\">,</span> <span class=\"mf\">15.48014805</span><span class=\"p\">]])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">predict</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>  <span class=\"c1\"># And correct output</span>\n<span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">14.79227209</span><span class=\"p\">,</span> <span class=\"mf\">15.59786987</span><span class=\"p\">,</span> <span class=\"mf\">15.54316282</span><span class=\"p\">])</span>\n</pre>\n<p>If trying a batch prediction with classes and <code>softmax</code>, the model fails completely:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">predict</span><span class=\"p\">([[</span><span class=\"mf\">0.5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">]])</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]])</span>\n</pre>\n<p>Always double check that predictions are working correctly before deploying the model.</p>\n</li>\n<li>\n<p>Batch prediction with SimpleRNN (and possibly all RNN) layers</p>\n<p>Currently, the converted model has no way of determining if you're feeding a single prediction or a batch of predictions, and it will fail to give the correct output. Support will be added soon.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7193657, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b72c28040b43e8300d1c8701c7831c1f", "sha256": "9de81f50701d6916e7e021a59e210a770d3d9f5fed538471fead3140e0b2653d"}, "downloads": -1, "filename": "keras_konverter-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b72c28040b43e8300d1c8701c7831c1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8421, "upload_time": "2020-05-01T11:21:27", "upload_time_iso_8601": "2020-05-01T11:21:27.814298Z", "url": "https://files.pythonhosted.org/packages/d2/81/127e065f7795473a6a4e1edcb0142423e88aa9c9cffff3f2011b9f32be3c/keras_konverter-0.1.0-py3-none-any.whl", "yanked": true}, {"comment_text": "", "digests": {"md5": "8f2dc8e7a71dbb18fc677faabc2df0af", "sha256": "c7094da6a68e427d237cec30b87d25fd91a666ba01366b1fb84023640135c94c"}, "downloads": -1, "filename": "keras-konverter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8f2dc8e7a71dbb18fc677faabc2df0af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6657, "upload_time": "2020-05-01T11:21:25", "upload_time_iso_8601": "2020-05-01T11:21:25.530416Z", "url": "https://files.pythonhosted.org/packages/6f/ff/c10eed6b42d44f21bb4340de3aae47397db8e25a4b2c44c0b3b6e8f8a9c5/keras-konverter-0.1.0.tar.gz", "yanked": true}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7d0e379093d271d29b80cf162a9f78f4", "sha256": "a18b77aa4e7450bc924c452de15dd674144081d08088a003da911ff05aa47200"}, "downloads": -1, "filename": "keras_konverter-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d0e379093d271d29b80cf162a9f78f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10455, "upload_time": "2020-05-01T11:47:44", "upload_time_iso_8601": "2020-05-01T11:47:44.123074Z", "url": "https://files.pythonhosted.org/packages/5c/16/91b252b07f47a5f52ed82b6aca9ec17a4eda2c8ef15768bba98105ac70a7/keras_konverter-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9482916fc65010641cd57e0902691f1", "sha256": "acf0847b12e81f6474b4848e62e96bfbc2751eb002e2949ef51f61eec39cda01"}, "downloads": -1, "filename": "keras-konverter-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d9482916fc65010641cd57e0902691f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10710, "upload_time": "2020-05-01T11:47:43", "upload_time_iso_8601": "2020-05-01T11:47:43.190986Z", "url": "https://files.pythonhosted.org/packages/48/0d/1275341ff15be6bd3a9634ee60c794d6f51dd42481a97bb69caec4607215/keras-konverter-0.1.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9d2b5f2b3f0e09586cc39b78395367fc", "sha256": "73f2b18a2e90b06806a9aa02670607a56f7dc5988299713d3c631801db3dc1f8"}, "downloads": -1, "filename": "keras_konverter-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9d2b5f2b3f0e09586cc39b78395367fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10577, "upload_time": "2020-05-01T12:50:06", "upload_time_iso_8601": "2020-05-01T12:50:06.525870Z", "url": "https://files.pythonhosted.org/packages/7a/8e/57f2559144587645c023783d9093827bc209d2f7c70cc1bd384436d1c61c/keras_konverter-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3918830ee1c3c7df67c721b6670ede9f", "sha256": "46225b5b213232d5c13ac7221d09840386f5d39647bb8248c36da572260acefd"}, "downloads": -1, "filename": "keras-konverter-0.1.3.tar.gz", "has_sig": false, "md5_digest": "3918830ee1c3c7df67c721b6670ede9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10950, "upload_time": "2020-05-01T12:50:05", "upload_time_iso_8601": "2020-05-01T12:50:05.461217Z", "url": "https://files.pythonhosted.org/packages/b1/84/b358a44ccdfd1cac91ad83952ba290e95c4f4106b8dc46166ec991c1a738/keras-konverter-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "480f16c6246b86b105c7ebc8cc7b5413", "sha256": "765e6919974ba88846eb42b223c6bbce80d9b74368bfcab6a741ac472fb2a57d"}, "downloads": -1, "filename": "keras_konverter-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "480f16c6246b86b105c7ebc8cc7b5413", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10599, "upload_time": "2020-05-01T12:58:53", "upload_time_iso_8601": "2020-05-01T12:58:53.966381Z", "url": "https://files.pythonhosted.org/packages/2f/60/46742ec0177460dd15e9953620ee647dd50d98e6c84ae51f45f05adb7944/keras_konverter-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "010c6ea08843fc67aa2a5eca3e18f2b0", "sha256": "e403f25a17286732d40a34fe1215178e7a62a78a5eff25697fd2894213fc5965"}, "downloads": -1, "filename": "keras-konverter-0.1.4.tar.gz", "has_sig": false, "md5_digest": "010c6ea08843fc67aa2a5eca3e18f2b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10967, "upload_time": "2020-05-01T12:58:52", "upload_time_iso_8601": "2020-05-01T12:58:52.856035Z", "url": "https://files.pythonhosted.org/packages/82/c5/1e03f62da7ef6c0bf8e0b06c4910e337ca4289b9a039f960241327dd533b/keras-konverter-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "8124ba07b031872f0213ca590c813115", "sha256": "2c6c4607a1d86f9c261e4648a67d9c53a646eb7c87d88437c38ddbaac4dfbd1b"}, "downloads": -1, "filename": "keras_konverter-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8124ba07b031872f0213ca590c813115", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10991, "upload_time": "2020-05-01T14:21:32", "upload_time_iso_8601": "2020-05-01T14:21:32.852943Z", "url": "https://files.pythonhosted.org/packages/fe/98/472893535db1d931fcd284debebfd00e85a855b4ee54dce30a6c89a5254f/keras_konverter-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da91b8da0293555e057fba5fddf80b4e", "sha256": "c6787bafc21f98df3fe3a9d5e6b2e1ade12800900af5bc99e522be931e48cc01"}, "downloads": -1, "filename": "keras-konverter-0.1.5.tar.gz", "has_sig": false, "md5_digest": "da91b8da0293555e057fba5fddf80b4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11376, "upload_time": "2020-05-01T14:21:31", "upload_time_iso_8601": "2020-05-01T14:21:31.387493Z", "url": "https://files.pythonhosted.org/packages/37/5c/ca9f98e31ff47c73f86ab2b6d6dd465b474eff999d625e5e0b6dc5fdfc1c/keras-konverter-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "07b64ba15649126869d5489c07ffac4c", "sha256": "9934c121c049c23cb84e0cc1802683bc42e977c01027cfed6eefd992527704ec"}, "downloads": -1, "filename": "keras_konverter-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "07b64ba15649126869d5489c07ffac4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11624, "upload_time": "2020-05-08T02:03:14", "upload_time_iso_8601": "2020-05-08T02:03:14.958093Z", "url": "https://files.pythonhosted.org/packages/dd/1c/acc1d158aefdc2a50765adb41bfe6292d631aa3b1ad1108d7d29f4144de6/keras_konverter-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fda5bf66229f2b0150fc451e1ee48759", "sha256": "c9e9dc81a3448ce1e70e9200de8e404a5a83e28b58ccec6b992a21f33cba65c1"}, "downloads": -1, "filename": "keras-konverter-0.1.6.tar.gz", "has_sig": false, "md5_digest": "fda5bf66229f2b0150fc451e1ee48759", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11970, "upload_time": "2020-05-08T02:03:13", "upload_time_iso_8601": "2020-05-08T02:03:13.852647Z", "url": "https://files.pythonhosted.org/packages/3d/5d/a381780357579def2852c73157e8d9ca72d7864c7eb08e2fb2220a1a8fb4/keras-konverter-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07b64ba15649126869d5489c07ffac4c", "sha256": "9934c121c049c23cb84e0cc1802683bc42e977c01027cfed6eefd992527704ec"}, "downloads": -1, "filename": "keras_konverter-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "07b64ba15649126869d5489c07ffac4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11624, "upload_time": "2020-05-08T02:03:14", "upload_time_iso_8601": "2020-05-08T02:03:14.958093Z", "url": "https://files.pythonhosted.org/packages/dd/1c/acc1d158aefdc2a50765adb41bfe6292d631aa3b1ad1108d7d29f4144de6/keras_konverter-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fda5bf66229f2b0150fc451e1ee48759", "sha256": "c9e9dc81a3448ce1e70e9200de8e404a5a83e28b58ccec6b992a21f33cba65c1"}, "downloads": -1, "filename": "keras-konverter-0.1.6.tar.gz", "has_sig": false, "md5_digest": "fda5bf66229f2b0150fc451e1ee48759", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11970, "upload_time": "2020-05-08T02:03:13", "upload_time_iso_8601": "2020-05-08T02:03:13.852647Z", "url": "https://files.pythonhosted.org/packages/3d/5d/a381780357579def2852c73157e8d9ca72d7864c7eb08e2fb2220a1a8fb4/keras-konverter-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:11 2020"}