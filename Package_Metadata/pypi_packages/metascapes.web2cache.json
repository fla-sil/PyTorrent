{"info": {"author": "Bernhard Snizek", "author_email": "bs@metascapes.org", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)"], "description": ".. contents::\n\n.. Note!\n   -----\n   Update the following URLs to point to your:\n\n   - code repository\n   - bug tracker\n   - questions/comments feedback mail\n   (do not set a real mail, to avoid spams)\n\n   Or remove it if not used.\n\n- Code repository: http://svn.somewhere.com/...\n- Questions and comments to somemailing_list\n- Report bugs at http://bug.somewhere.com/..\n\n\nChange history\n**************\n\nChangelog\n=========\n\n0.2 (xxxx-xx-xx)\n----------------\n\n- Created recipe with ZopeSkel\n  [Bernhard Snizek]\n\nDetailed Documentation\n**********************\n\nIntroduction\n============\n\nThis is a full-blown functional test. The emphasis here is on testing what\nthe user may input and see, and the system is largely tested as a black box.\nWe use PloneTestCase to set up this test as well, so we have a full Plone site\nto play with. We *can* inspect the state of the portal, e.g. using \nself.portal and self.folder, but it is often frowned upon since you are not\ntreating the system as a black box. Also, if you, for example, log in or set\nroles using calls like self.setRoles(), these are not reflected in the test\nbrowser, which runs as a separate session.\n\nBeing a doctest, we can tell a story here.\n\nFirst, we must perform some setup. We use the testbrowser that is shipped\nwith Five, as this provides proper Zope 2 integration. Most of the \ndocumentation, though, is in the underlying zope.testbrower package.\n\n    >>> from Products.Five.testbrowser import Browser\n    >>> browser = Browser()\n    >>> portal_url = self.portal.absolute_url()\n\nThe following is useful when writing and debugging testbrowser tests. It lets\nus see all error messages in the error_log.\n\n    >>> self.portal.error_log._ignored_exceptions = ()\n\nWith that in place, we can go to the portal front page and log in. We will\ndo this using the default user from PloneTestCase:\n\n    >>> from Products.PloneTestCase.setup import portal_owner, default_password\n\nBecause add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  \n\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n\nHere, we set the value of the fields on the login form and then simulate a\nsubmit click.  We then ensure that we get the friendly logged-in message:\n\n    >>> \"You are now logged in\" in browser.contents\n    True\n\nFinally, let's return to the front page of our site before continuing\n\n    >>> browser.open(portal_url)\n\n-*- extra stuff goes here -*-\n\n\nContributors\n************\n\nBernhard Snizek, Author\n\n\nDownload\n********", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/", "keywords": "web2 cache index easy", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "metascapes.web2cache", "package_url": "https://pypi.org/project/metascapes.web2cache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/metascapes.web2cache/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/"}, "release_url": "https://pypi.org/project/metascapes.web2cache/0.2/", "requires_dist": null, "requires_python": null, "summary": "An indexable web2.0 cache", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#change-history\" id=\"id1\" rel=\"nofollow\">Change history</a><ul>\n<li><a href=\"#xxxx-xx-xx\" id=\"id2\" rel=\"nofollow\">0.2 (xxxx-xx-xx)</a></li>\n</ul>\n</li>\n<li><a href=\"#detailed-documentation\" id=\"id3\" rel=\"nofollow\">Detailed Documentation</a></li>\n<li><a href=\"#contributors\" id=\"id4\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#download\" id=\"id5\" rel=\"nofollow\">Download</a></li>\n</ul>\n</div>\n<ul>\n<li>Code repository: <a href=\"http://svn.somewhere.com/\" rel=\"nofollow\">http://svn.somewhere.com/</a>\u2026</li>\n<li>Questions and comments to somemailing_list</li>\n<li>Report bugs at <a href=\"http://bug.somewhere.com/\" rel=\"nofollow\">http://bug.somewhere.com/</a>..</li>\n</ul>\n<div id=\"change-history\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Change history</a></h2>\n<h2 id=\"changelog\"><span class=\"section-subtitle\">Changelog</span></h2>\n<div id=\"xxxx-xx-xx\">\n<h3><a href=\"#id2\" rel=\"nofollow\">0.2 (xxxx-xx-xx)</a></h3>\n<ul>\n<li>Created recipe with ZopeSkel\n[Bernhard Snizek]</li>\n</ul>\n</div>\n</div>\n<div id=\"detailed-documentation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Detailed Documentation</a></h2>\n<h2 id=\"introduction\"><span class=\"section-subtitle\">Introduction</span></h2>\n<p>This is a full-blown functional test. The emphasis here is on testing what\nthe user may input and see, and the system is largely tested as a black box.\nWe use PloneTestCase to set up this test as well, so we have a full Plone site\nto play with. We <em>can</em> inspect the state of the portal, e.g. using\nself.portal and self.folder, but it is often frowned upon since you are not\ntreating the system as a black box. Also, if you, for example, log in or set\nroles using calls like self.setRoles(), these are not reflected in the test\nbrowser, which runs as a separate session.</p>\n<p>Being a doctest, we can tell a story here.</p>\n<p>First, we must perform some setup. We use the testbrowser that is shipped\nwith Five, as this provides proper Zope 2 integration. Most of the\ndocumentation, though, is in the underlying zope.testbrower package.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from Products.Five.testbrowser import Browser\n&gt;&gt;&gt; browser = Browser()\n&gt;&gt;&gt; portal_url = self.portal.absolute_url()\n</pre>\n</blockquote>\n<p>The following is useful when writing and debugging testbrowser tests. It lets\nus see all error messages in the error_log.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()\n</pre>\n</blockquote>\n<p>With that in place, we can go to the portal front page and log in. We will\ndo this using the default user from PloneTestCase:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from Products.PloneTestCase.setup import portal_owner, default_password\n</pre>\n</blockquote>\n<p>Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; browser.open(portal_url + '/login_form')\n&gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner\n&gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password\n&gt;&gt;&gt; browser.getControl(name='submit').click()\n</pre>\n</blockquote>\n<p>Here, we set the value of the fields on the login form and then simulate a\nsubmit click.  We then ensure that we get the friendly logged-in message:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; \"You are now logged in\" in browser.contents\nTrue\n</pre>\n</blockquote>\n<p>Finally, let\u2019s return to the front page of our site before continuing</p>\n<blockquote>\n<pre>&gt;&gt;&gt; browser.open(portal_url)\n</pre>\n</blockquote>\n<p>-<em>- extra stuff goes here -</em>-</p>\n</div>\n<div id=\"contributors\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Contributors</a></h2>\n<p>Bernhard Snizek, Author</p>\n</div>\n<div id=\"download\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Download</a></h2>\n</div>\n\n          </div>"}, "last_serial": 794721, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "035c3b532233c83e0b9564c406c1300f", "sha256": "d430e19334a48037608b6bbcad0b5817a11ee057e3ac40b6dd3a2a3d4524ccb8"}, "downloads": -1, "filename": "metascapes.web2cache-0.2.tar.gz", "has_sig": false, "md5_digest": "035c3b532233c83e0b9564c406c1300f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16306, "upload_time": "2010-11-07T03:51:35", "upload_time_iso_8601": "2010-11-07T03:51:35.469257Z", "url": "https://files.pythonhosted.org/packages/e3/40/ec9dca8ae912d9329a4bb6d30361447491220f8f4b09d26e27f0188361d7/metascapes.web2cache-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "035c3b532233c83e0b9564c406c1300f", "sha256": "d430e19334a48037608b6bbcad0b5817a11ee057e3ac40b6dd3a2a3d4524ccb8"}, "downloads": -1, "filename": "metascapes.web2cache-0.2.tar.gz", "has_sig": false, "md5_digest": "035c3b532233c83e0b9564c406c1300f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16306, "upload_time": "2010-11-07T03:51:35", "upload_time_iso_8601": "2010-11-07T03:51:35.469257Z", "url": "https://files.pythonhosted.org/packages/e3/40/ec9dca8ae912d9329a4bb6d30361447491220f8f4b09d26e27f0188361d7/metascapes.web2cache-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:48 2020"}