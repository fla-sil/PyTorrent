{"info": {"author": "brianjbuck", "author_email": "brian@thebuckpasser.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Django Rest Framework ORJSON Renderer\n=====================================\n\n`drf_orjson_renderer` is JSON renderer and parser for Django Rest Framework\nusing the [orjson](https://github.com/ijl/orjson) library. Backed by\n[Rust](https://www.rust-lang.org/), orjson is safe, correct and _fast_. \u26a1\ufe0f\n\nIn addition, unlike some performance optimized DRF renderers, It also renders\npretty printed JSON when requests are made via RestFramework's BrowsableAPI.\n\nYou get:\n- The safety of Rust\n- The speed of orjson when requests are made with `Accept: appliation/json` HTTP\n  header or when requests are made with an unspecified `Accept` header.\n- The convenience of formatted output when requested with `Accept: text/html`.\n- The ability to pass your own `default` function definition.\n\n\n## Installation\n\n`pip install drf_orjson_renderer`\n\nYou can then set the `ORJSONRenderer` class as your default renderer in your `settings.py`\n\n```Python\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": (\n        \"drf_orjson_renderer.renderers.ORJSONRenderer\",\n        \"rest_framework.renderers.BrowsableAPIRenderer\",\n    ),\n}\n```\n\nAlso you can set the `ORJSONParser` class as your default parser in your `settings.py`\n\n```Python\nREST_FRAMEWORK = {\n    \"DEFAULT_PARSER_CLASSES\": (\n        \"drf_orjson_renderer.parsers.ORJSONParser\",\n    ),\n}\n```\n\n## Passing Your Own `default` Function\n\nBy default, the `ORJSONRenderer` will pass a `default` function as a helper for\nserializing objects that orjson doesn't recognize. That should cover the most\ncommon cases found in a Django web application. If you find you have an object\nit doesn't recognize you can pass your own default function by overriding the\n`get_renderer_context()` method of your view:\n\n```Python\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\n\nclass MyView(APIView):\n    def default(self, obj):\n        if isinstance(obj, MyComplexData):\n            return dict(obj)\n\n    def get_renderer_context(self):\n        renderer_context = super().get_renderer_context()\n        renderer_context[\"default_function\"] = self.default\n        return renderer_context\n\n    def get(self, request, *args, **kwargs):\n        my_complex_data = MyComplexData()\n        return Response(data=my_complex_data)\n```\n\nIf you know your data is already in a format orjson natively\n[recognizes](https://github.com/ijl/orjson/#types) you can get a small\nperformance boost by passing `None` to the `renderer_context`:\n\n```Python\ndef get_renderer_context(self):\n    renderer_context = super().get_renderer_context()\n    renderer_context[\"default_function\"] = None\n    return renderer_context\n```\n\nIn order to take advantage of the RestFramework Browsable API, when the\nrequested media type is not `application/json`, the ORJSON renderer will fall\nback to using the built-in Python `json` module to pretty print your output.\nIf you have overriden the default function its possible that you may need to\ndo this as well for the `json` encoder class:\n\n```Python\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\n\nclass MyJSONEncoder(DjangoJSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, MyComplexData):\n            return dict(obj)\n        return super().default(obj)\n\nclass MyView(APIView):\n\n\n    def get_renderer_context(self):\n        renderer_context = super().get_renderer_context()\n        renderer_context[\"django_encoder_class\"] = MyJSONEncoder\n        return renderer_context\n\n    def get(self, request, *args, **kwargs):\n        my_complex_data = MyComplexData()\n        return Response(data=my_complex_data)\n```\n\nThis package provides an encoder class that overrides the DjangoJSONEncoder with\nsupport for numpy types:\n\n```Python\nfrom drf_orjson_renderer.encoders import DjangoNumpyJSONEncoder\nfrom rest_framework.views import APIView\n\nclass MyView(APIView):\n\n\n    def get_renderer_context(self):\n        renderer_context = super().get_renderer_context()\n        renderer_context[\"django_encoder_class\"] = DjangoNumpyJSONEncoder\n        return renderer_context\n```\n\n## Benchmarks\nSee the [orjson Benchmarks](https://github.com/ijl/orjson#performance) for more information\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brianjbuck/drf_orjson_renderer", "keywords": "drf_orjson_renderer,rest_framework,orjson", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "drf-orjson-renderer", "package_url": "https://pypi.org/project/drf-orjson-renderer/", "platform": "", "project_url": "https://pypi.org/project/drf-orjson-renderer/", "project_urls": {"Homepage": "https://github.com/brianjbuck/drf_orjson_renderer"}, "release_url": "https://pypi.org/project/drf-orjson-renderer/1.1.3/", "requires_dist": ["django", "djangorestframework", "orjson"], "requires_python": ">=3.6.0", "summary": "Django RestFramework JSON Renderer Backed by orjson", "version": "1.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Rest Framework ORJSON Renderer</h1>\n<p><code>drf_orjson_renderer</code> is JSON renderer and parser for Django Rest Framework\nusing the <a href=\"https://github.com/ijl/orjson\" rel=\"nofollow\">orjson</a> library. Backed by\n<a href=\"https://www.rust-lang.org/\" rel=\"nofollow\">Rust</a>, orjson is safe, correct and <em>fast</em>. \u26a1\ufe0f</p>\n<p>In addition, unlike some performance optimized DRF renderers, It also renders\npretty printed JSON when requests are made via RestFramework's BrowsableAPI.</p>\n<p>You get:</p>\n<ul>\n<li>The safety of Rust</li>\n<li>The speed of orjson when requests are made with <code>Accept: appliation/json</code> HTTP\nheader or when requests are made with an unspecified <code>Accept</code> header.</li>\n<li>The convenience of formatted output when requested with <code>Accept: text/html</code>.</li>\n<li>The ability to pass your own <code>default</code> function definition.</li>\n</ul>\n<h2>Installation</h2>\n<p><code>pip install drf_orjson_renderer</code></p>\n<p>You can then set the <code>ORJSONRenderer</code> class as your default renderer in your <code>settings.py</code></p>\n<pre><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"DEFAULT_RENDERER_CLASSES\"</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"drf_orjson_renderer.renderers.ORJSONRenderer\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"rest_framework.renderers.BrowsableAPIRenderer\"</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Also you can set the <code>ORJSONParser</code> class as your default parser in your <code>settings.py</code></p>\n<pre><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"DEFAULT_PARSER_CLASSES\"</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"drf_orjson_renderer.parsers.ORJSONParser\"</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Passing Your Own <code>default</code> Function</h2>\n<p>By default, the <code>ORJSONRenderer</code> will pass a <code>default</code> function as a helper for\nserializing objects that orjson doesn't recognize. That should cover the most\ncommon cases found in a Django web application. If you find you have an object\nit doesn't recognize you can pass your own default function by overriding the\n<code>get_renderer_context()</code> method of your view:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework.views</span> <span class=\"kn\">import</span> <span class=\"n\">APIView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyView</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">MyComplexData</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_renderer_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">renderer_context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_renderer_context</span><span class=\"p\">()</span>\n        <span class=\"n\">renderer_context</span><span class=\"p\">[</span><span class=\"s2\">\"default_function\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default</span>\n        <span class=\"k\">return</span> <span class=\"n\">renderer_context</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">my_complex_data</span> <span class=\"o\">=</span> <span class=\"n\">MyComplexData</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">my_complex_data</span><span class=\"p\">)</span>\n</pre>\n<p>If you know your data is already in a format orjson natively\n<a href=\"https://github.com/ijl/orjson/#types\" rel=\"nofollow\">recognizes</a> you can get a small\nperformance boost by passing <code>None</code> to the <code>renderer_context</code>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_renderer_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">renderer_context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_renderer_context</span><span class=\"p\">()</span>\n    <span class=\"n\">renderer_context</span><span class=\"p\">[</span><span class=\"s2\">\"default_function\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">return</span> <span class=\"n\">renderer_context</span>\n</pre>\n<p>In order to take advantage of the RestFramework Browsable API, when the\nrequested media type is not <code>application/json</code>, the ORJSON renderer will fall\nback to using the built-in Python <code>json</code> module to pretty print your output.\nIf you have overriden the default function its possible that you may need to\ndo this as well for the <code>json</code> encoder class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.serializers.json</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoJSONEncoder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.views</span> <span class=\"kn\">import</span> <span class=\"n\">APIView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyJSONEncoder</span><span class=\"p\">(</span><span class=\"n\">DjangoJSONEncoder</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">MyComplexData</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyView</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_renderer_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">renderer_context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_renderer_context</span><span class=\"p\">()</span>\n        <span class=\"n\">renderer_context</span><span class=\"p\">[</span><span class=\"s2\">\"django_encoder_class\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MyJSONEncoder</span>\n        <span class=\"k\">return</span> <span class=\"n\">renderer_context</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">my_complex_data</span> <span class=\"o\">=</span> <span class=\"n\">MyComplexData</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">my_complex_data</span><span class=\"p\">)</span>\n</pre>\n<p>This package provides an encoder class that overrides the DjangoJSONEncoder with\nsupport for numpy types:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">drf_orjson_renderer.encoders</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoNumpyJSONEncoder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.views</span> <span class=\"kn\">import</span> <span class=\"n\">APIView</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyView</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_renderer_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">renderer_context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_renderer_context</span><span class=\"p\">()</span>\n        <span class=\"n\">renderer_context</span><span class=\"p\">[</span><span class=\"s2\">\"django_encoder_class\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">DjangoNumpyJSONEncoder</span>\n        <span class=\"k\">return</span> <span class=\"n\">renderer_context</span>\n</pre>\n<h2>Benchmarks</h2>\n<p>See the <a href=\"https://github.com/ijl/orjson#performance\" rel=\"nofollow\">orjson Benchmarks</a> for more information</p>\n\n          </div>"}, "last_serial": 6654296, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "14e9a69b47ea1d6083248678d1c6abe6", "sha256": "314a8869d7e738dffd0932c933546efb8849d5f5e77bef422f113ffd9878da27"}, "downloads": -1, "filename": "drf_orjson_renderer-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "14e9a69b47ea1d6083248678d1c6abe6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5808, "upload_time": "2019-11-09T03:37:10", "upload_time_iso_8601": "2019-11-09T03:37:10.346638Z", "url": "https://files.pythonhosted.org/packages/0e/25/fbd8d96c2a254c16bdf981f959fc29e3428cb1afa05d378e609ace5b25d9/drf_orjson_renderer-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5d10054120c3981480d3543d74a5761", "sha256": "72efa70aeb9b0818fd26f6a420a5f09084ac69384a7dd0bdea4e602d6fa441df"}, "downloads": -1, "filename": "drf_orjson_renderer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d5d10054120c3981480d3543d74a5761", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4446, "upload_time": "2019-11-09T03:37:12", "upload_time_iso_8601": "2019-11-09T03:37:12.693971Z", "url": "https://files.pythonhosted.org/packages/ae/8b/4adc301a937087129b5e6eafe19c09519a869d3fa9e8407faf5ac317d4eb/drf_orjson_renderer-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "543da1e07160fca7d42c739d2b7f6ae7", "sha256": "a1aa3e9b718c8ef850341daee84261f5832d6a5c341f796dd7fb64987b51303c"}, "downloads": -1, "filename": "drf_orjson_renderer-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "543da1e07160fca7d42c739d2b7f6ae7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6681, "upload_time": "2019-12-20T17:26:29", "upload_time_iso_8601": "2019-12-20T17:26:29.522485Z", "url": "https://files.pythonhosted.org/packages/32/37/5fc6fe8ab0a971f8df13c9e19db696aeee5b48554f6e88c3e0568f70b00c/drf_orjson_renderer-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e91b59ad95e8e5c4e62d0c0eb53ebcd", "sha256": "796a30717d8c9169b791fd833ccc21bc17c39d720f91305030f4c557440bce9e"}, "downloads": -1, "filename": "drf_orjson_renderer-1.1.0.tar.gz", "has_sig": false, "md5_digest": "8e91b59ad95e8e5c4e62d0c0eb53ebcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5035, "upload_time": "2019-12-20T17:26:31", "upload_time_iso_8601": "2019-12-20T17:26:31.260512Z", "url": "https://files.pythonhosted.org/packages/05/d5/2e01a55e3e06816282275b5a47678180d069dde9ede8f4f346e41a863dde/drf_orjson_renderer-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "08abcc28ccbfd34031a2cf7f084d4c96", "sha256": "556613e230250d9d512211c6f469c2cd03f7aae1d0ca605101e3a259838e6b24"}, "downloads": -1, "filename": "drf_orjson_renderer-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "08abcc28ccbfd34031a2cf7f084d4c96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6752, "upload_time": "2019-12-20T17:37:59", "upload_time_iso_8601": "2019-12-20T17:37:59.131660Z", "url": "https://files.pythonhosted.org/packages/41/d0/84457d650f48ddb06555e74f0e3ab86ff220792fb01d41a91a1abeeef6df/drf_orjson_renderer-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea055d8c468f2ff18214380cc0601679", "sha256": "e43b88bad6aab854f5c9c8d46e91e1ebc53d7c97882e380c0b47e7350a1c37b0"}, "downloads": -1, "filename": "drf_orjson_renderer-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ea055d8c468f2ff18214380cc0601679", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5172, "upload_time": "2019-12-20T17:38:00", "upload_time_iso_8601": "2019-12-20T17:38:00.604080Z", "url": "https://files.pythonhosted.org/packages/2b/7a/5f9d6e1e125e5faa95b0493410e9ce1e4cd14dfd77fcd9848687963fee5f/drf_orjson_renderer-1.1.1.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "ab6fea8cea12319429444c031f309c63", "sha256": "a674885c97be62e71e1afc1c99245c93265321af0f8e4d87dd1d146797c20590"}, "downloads": -1, "filename": "drf_orjson_renderer-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ab6fea8cea12319429444c031f309c63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6756, "upload_time": "2020-02-18T16:16:22", "upload_time_iso_8601": "2020-02-18T16:16:22.499340Z", "url": "https://files.pythonhosted.org/packages/7f/0b/19365687825799c6b1d634c04d1f26ae1c37b2d7d6a27aed8c72753db4e5/drf_orjson_renderer-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78dc49b59fdad42cfaf5db5eb7301380", "sha256": "54c4662480ff45d439d35abe21d6c7982d9e670a9aab1ff8237c42a6b57d7557"}, "downloads": -1, "filename": "drf_orjson_renderer-1.1.3.tar.gz", "has_sig": false, "md5_digest": "78dc49b59fdad42cfaf5db5eb7301380", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5564, "upload_time": "2020-02-18T16:16:29", "upload_time_iso_8601": "2020-02-18T16:16:29.472012Z", "url": "https://files.pythonhosted.org/packages/83/aa/2fc10d11c3cc9a71af4b002102780b8a51f32df3c6e488b5c916cac01bea/drf_orjson_renderer-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ab6fea8cea12319429444c031f309c63", "sha256": "a674885c97be62e71e1afc1c99245c93265321af0f8e4d87dd1d146797c20590"}, "downloads": -1, "filename": "drf_orjson_renderer-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ab6fea8cea12319429444c031f309c63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6756, "upload_time": "2020-02-18T16:16:22", "upload_time_iso_8601": "2020-02-18T16:16:22.499340Z", "url": "https://files.pythonhosted.org/packages/7f/0b/19365687825799c6b1d634c04d1f26ae1c37b2d7d6a27aed8c72753db4e5/drf_orjson_renderer-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78dc49b59fdad42cfaf5db5eb7301380", "sha256": "54c4662480ff45d439d35abe21d6c7982d9e670a9aab1ff8237c42a6b57d7557"}, "downloads": -1, "filename": "drf_orjson_renderer-1.1.3.tar.gz", "has_sig": false, "md5_digest": "78dc49b59fdad42cfaf5db5eb7301380", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5564, "upload_time": "2020-02-18T16:16:29", "upload_time_iso_8601": "2020-02-18T16:16:29.472012Z", "url": "https://files.pythonhosted.org/packages/83/aa/2fc10d11c3cc9a71af4b002102780b8a51f32df3c6e488b5c916cac01bea/drf_orjson_renderer-1.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:42 2020"}