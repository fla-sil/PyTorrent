{"info": {"author": "Marcel Bl\u00f6cher", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# SFC TSS - Traffic Scheduling Simulator\n\n**SFC TSS** - **S**ervice **F**unction **C**hain (SFC) **t**raffic **s**cheduling **s**imulator - is an Apache2 licensed packet-level discrete event simulator.\nSFC TSS simulates the SFC traffic scheduling problem as described in our paper [\"Letting off STEAM: Distributed Runtime Traffic Scheduling for Service Function Chaining\"](http://linwang.info/docs/infocom20.pdf).\nWe refer to this paper for more information on [RFC 7665](https://tools.ietf.org/html/rfc7665) and the features of the simulator.\nSFC TSS simulates scenarios in compliance with [RFC 7665](https://tools.ietf.org/html/rfc7665) including link latencies, packet handling at the various SFC components like SFFs, SFIs and server.\n\nIf you use SFC TSS in your research, please cite our paper:\n\n```\n@inproceedings{bloecher2020steam,\n  title={Letting off STEAM: Distributed Runtime Traffic Scheduling for Service Function Chaining},\n  author={Bl{\\\"o}cher, Marcel and Khalili, Ramin and Wang, Lin and Eugster, Patrick},\n  booktitle={IEEE International Conference on Computer Communications (INFOCOM)},\n  year={2020}\n}\n```\n\n# Getting Started\n\n\n## Install\n\nTo setup your environment use either [PyPy3](https://pypy.org) or [Python3](https://www.python.org).\nWe **highly** recommend you to use PyPy3.\n\n\n```\npip install sfctss\n```\n\nTested with Ubuntu 19.10 / Mac OS 10.15.\n\n## Experiment setup\n\nSFC TSS provides the essential parts of a SFC traffic simulation and provides many options to configure an experiment. \n\nA minimal configuration requires the following steps\n\n```Python\nimport numpy as np\nimport random\n\nimport sfctss\nfrom sfctss.scheduler.examples import LoadUnawareRoundRobinScheduler\n\nrand = random.Random()\nrand.seed(42) # seed the experiment\n\nsim = sfctss.simulator.Sim(seed=rand.randint(0,1000000))\n\n\n# create a link latency distribution that is used to connect between SFFs-SFIs\nLATENCY_SFF_SFI = 1\nsfctss.model.SFF.setup_latency_distribution(sim=sim, \n                                            id=LATENCY_SFF_SFI, \n                                            values=np.random.poisson(500, 5000)) # 3000\u00b5s\n\n# create a link latency distribution that is used to connect between SFFs-SFFs\nLATENCY_SFF_SFF = 2\nsfctss.model.SFF.setup_latency_distribution(sim=sim, \n                                            id=LATENCY_SFF_SFF,\n                                            values=np.random.poisson(3000, 5000)) # 3000\u00b5s\n\n# initialize data structures, configure number of sf types\nsfctss.model.SFI.init_data_structure(sim=sim, \n                                     number_of_sf_types=1, \n                                     latency_provider_sff_sfi=LATENCY_SFF_SFI)\n\n# at least one SFF with a scheduler instance\nscheduler_a = LoadUnawareRoundRobinScheduler(sim=sim,\n                                             incremental=True, # schedule one step of a chain per scheduling attempt\n                                             oracle=True) # scheduler has a global view (all sites)\nsff_a = sfctss.model.SFF(sim=sim, \n                         scheduler=scheduler_a)\n\n# at least one Server with a SFI that is connected to the SFF\nserver = sfctss.model.Server(sim=sim, \n                             processing_cap=120, \n                             cpu_policy=sfctss.model.ServerCpuPolicy.one_at_a_time)\nserver.add_sfi(of_type=1, \n               with_sff_id=sff_a.id)\n\n# do the same for ssf_b ...\nscheduler_b = None # ...\nsff_b = None # ...\n\n# configure connections between SFFs\nsfctss.model.SFF.setup_connection(sim=sim, \n                                  source_id=sff_a.id, \n                                  destination_id=sff_b.id,\n                                  bw_cap=100000,\n                                  latency_provider=LATENCY_SFF_SFF,\n                                  bidirectional=True)           \n\n# configure processing speed of sf types\n# the rate gives the number of packets a sfi of this sf type can process in 1 s when using 1 cpu share\nsfctss.model.SFI.setup_sf_processing_rate_per_1s(sim=sim, \n                                                 of_type=1, \n                                                 with_mu=100)\n\n# create at least one packet generator (which could also replay a pcap)\nwl_config = sfctss.workload.SyntheticWorkloadGenerator.get_default_config()\nwl_gen = sfctss.workload.SyntheticWorkloadGenerator(sim=sim,\n                                                    workload_rand=rand,\n                                                    config=wl_config)\nsim.register_packet_generator(packet_generator=wl_gen,\n                              fetch_all=False)\n\n# finally, start simulation\nsim.run_sim(show_progress=True, # print progress on bash\n            interactive=False, # no interactive mode\n            max_sim_time=1500000, # we stop after 1.5s\n            ui=False, # do not show bash ui\n            stop_simulation_when_workload_is_over=True) # stop when max_sim_time is done or when workload is done \n\n```\n\nWe refer to the example `example/main.py` for an example how to use SFC TSS.\n\nYou may also want to create your own scheduler. Simply subclass `BaseScheduler`.\nCheck example schedulers in `sfctss.scheduler.examples` for more information. \n\nYou may also want to create a custom workload provider like a pcap replay. Your workload provider must implement `WorkloadGenerator`.\n\n## Full Example\n\nStart running the example experiment \n\n```Bash\n./example/main.py --show-progress\n```\n\nor with more debugging output or activated statistics dumps\n\n```Bash\n# show progress, write csv logs, active some of the statistics\n./example/main.py --show-progres --write-statistics output --statistics-server --statistics-polling-sfi --statistics-latency-cdf-buckets 50\n\n# with more verbose bash ui\n./example/main.py --show-ui\n\n# debugging mode\n./example/main.py -v --interactive \n```\n\nThe example provides more options...\n\n```\nusage: main.py [-h] [-v] [--sim-time SIM_TIME] [--no-workload-reloading] [--dry] [--show-progress] [--interactive] [--show-ui]\n               [--write-statistics STATISTICS_FILENAME] [--statistics-overview] [--statistics-packets] [--statistics-server] [--statistics-polling-sfi]\n               [--statistics-polling-sff] [--statistics-polling-server] [--statistics-polling-overview]\n               [--statistics-polling-interval STATISTICS_POLLING_INTERVAL] [--statistics-latency-cdf-buckets STATISTICS_PACKETS_CDF_BUCKETS]\n               [--dump-full-workload]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         verbose output\n  --sim-time SIM_TIME   set simulation time (in ns)\n  --no-workload-reloading\n                        if set, load full workload before simulation starts\n  --dry                 do not run the simulation, but test everything if it is functional\n  --show-progress       shows the progress during running the simulation\n  --interactive         run each simulation tick one after another\n  --show-ui             shows a simple bash-ui when running the simulation\n  --write-statistics STATISTICS_FILENAME\n                        if filename is set, activate statistics\n  --statistics-overview\n                        activate overview statistics\n  --statistics-packets  activate packet statistics\n  --statistics-server   activate server statistics\n  --statistics-polling-sfi\n                        activate sfi polling statistics\n  --statistics-polling-sff\n                        activate sff polling statistics\n  --statistics-polling-server\n                        activate server polling statistics\n  --statistics-polling-overview\n                        activate overview polling statistics\n  --statistics-polling-interval STATISTICS_POLLING_INTERVAL\n                        set statistics polling interval (in ns)\n  --statistics-latency-cdf-buckets STATISTICS_PACKETS_CDF_BUCKETS\n                        activate cdf of packet latencies; set # of buckets for cdf, e.g., 50\n  --dump-full-workload  dumps full workload (full packet dump)\n```\n\n\n# Manual Installation / Contribute\n\nRun one of the following lines \n\n```Bash\n./bootstrap-deps-pypy.sh # recommended option\n./bootstrap-deps.sh # fallback with standard Python\n```\n\nto setup your environment either with [PyPy3](https://pypy.org) or [Python3](https://www.python.org).\nWe **highly** recommend you to use PyPy3.\n\nSimply load your python environment by calling one of the following lines\n\n```Bash\nsource env-pypy/bin/activate\nsource env/bin/activate\n```\n\nWe are happy for all kind of contributions, including bug fixes and additional features.\n\n\n# Acknowledgement\n\nThis work has been funded by the German Federal Ministry of Education and Research ([BMBF](https://www.bmbf.de)) Software Campus grant 01IS17050.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mblo/sfctss", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "sfctss", "package_url": "https://pypi.org/project/sfctss/", "platform": "", "project_url": "https://pypi.org/project/sfctss/", "project_urls": {"Homepage": "https://github.com/mblo/sfctss"}, "release_url": "https://pypi.org/project/sfctss/0.9.0/", "requires_dist": ["numpy (>=1.18.1)", "sortedcontainers (>=2.1.0)", "terminaltables (>=3.1.0)"], "requires_python": ">=3.6, <4", "summary": "A Service Function Chain (SFC) Traffic Scheduling Simulator", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SFC TSS - Traffic Scheduling Simulator</h1>\n<p><strong>SFC TSS</strong> - <strong>S</strong>ervice <strong>F</strong>unction <strong>C</strong>hain (SFC) <strong>t</strong>raffic <strong>s</strong>cheduling <strong>s</strong>imulator - is an Apache2 licensed packet-level discrete event simulator.\nSFC TSS simulates the SFC traffic scheduling problem as described in our paper <a href=\"http://linwang.info/docs/infocom20.pdf\" rel=\"nofollow\">\"Letting off STEAM: Distributed Runtime Traffic Scheduling for Service Function Chaining\"</a>.\nWe refer to this paper for more information on <a href=\"https://tools.ietf.org/html/rfc7665\" rel=\"nofollow\">RFC 7665</a> and the features of the simulator.\nSFC TSS simulates scenarios in compliance with <a href=\"https://tools.ietf.org/html/rfc7665\" rel=\"nofollow\">RFC 7665</a> including link latencies, packet handling at the various SFC components like SFFs, SFIs and server.</p>\n<p>If you use SFC TSS in your research, please cite our paper:</p>\n<pre><code>@inproceedings{bloecher2020steam,\n  title={Letting off STEAM: Distributed Runtime Traffic Scheduling for Service Function Chaining},\n  author={Bl{\\\"o}cher, Marcel and Khalili, Ramin and Wang, Lin and Eugster, Patrick},\n  booktitle={IEEE International Conference on Computer Communications (INFOCOM)},\n  year={2020}\n}\n</code></pre>\n<h1>Getting Started</h1>\n<h2>Install</h2>\n<p>To setup your environment use either <a href=\"https://pypy.org\" rel=\"nofollow\">PyPy3</a> or <a href=\"https://www.python.org\" rel=\"nofollow\">Python3</a>.\nWe <strong>highly</strong> recommend you to use PyPy3.</p>\n<pre><code>pip install sfctss\n</code></pre>\n<p>Tested with Ubuntu 19.10 / Mac OS 10.15.</p>\n<h2>Experiment setup</h2>\n<p>SFC TSS provides the essential parts of a SFC traffic simulation and provides many options to configure an experiment.</p>\n<p>A minimal configuration requires the following steps</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sfctss</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sfctss.scheduler.examples</span> <span class=\"kn\">import</span> <span class=\"n\">LoadUnawareRoundRobinScheduler</span>\n\n<span class=\"n\">rand</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">Random</span><span class=\"p\">()</span>\n<span class=\"n\">rand</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"c1\"># seed the experiment</span>\n\n<span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">simulator</span><span class=\"o\">.</span><span class=\"n\">Sim</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"n\">rand</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1000000</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># create a link latency distribution that is used to connect between SFFs-SFIs</span>\n<span class=\"n\">LATENCY_SFF_SFI</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SFF</span><span class=\"o\">.</span><span class=\"n\">setup_latency_distribution</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span> \n                                            <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">LATENCY_SFF_SFI</span><span class=\"p\">,</span> \n                                            <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">poisson</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">))</span> <span class=\"c1\"># 3000\u00b5s</span>\n\n<span class=\"c1\"># create a link latency distribution that is used to connect between SFFs-SFFs</span>\n<span class=\"n\">LATENCY_SFF_SFF</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SFF</span><span class=\"o\">.</span><span class=\"n\">setup_latency_distribution</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span> \n                                            <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">LATENCY_SFF_SFF</span><span class=\"p\">,</span>\n                                            <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">poisson</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">))</span> <span class=\"c1\"># 3000\u00b5s</span>\n\n<span class=\"c1\"># initialize data structures, configure number of sf types</span>\n<span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SFI</span><span class=\"o\">.</span><span class=\"n\">init_data_structure</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span> \n                                     <span class=\"n\">number_of_sf_types</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n                                     <span class=\"n\">latency_provider_sff_sfi</span><span class=\"o\">=</span><span class=\"n\">LATENCY_SFF_SFI</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># at least one SFF with a scheduler instance</span>\n<span class=\"n\">scheduler_a</span> <span class=\"o\">=</span> <span class=\"n\">LoadUnawareRoundRobinScheduler</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span>\n                                             <span class=\"n\">incremental</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># schedule one step of a chain per scheduling attempt</span>\n                                             <span class=\"n\">oracle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># scheduler has a global view (all sites)</span>\n<span class=\"n\">sff_a</span> <span class=\"o\">=</span> <span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SFF</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span> \n                         <span class=\"n\">scheduler</span><span class=\"o\">=</span><span class=\"n\">scheduler_a</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># at least one Server with a SFI that is connected to the SFF</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span> \n                             <span class=\"n\">processing_cap</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">,</span> \n                             <span class=\"n\">cpu_policy</span><span class=\"o\">=</span><span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">ServerCpuPolicy</span><span class=\"o\">.</span><span class=\"n\">one_at_a_time</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">add_sfi</span><span class=\"p\">(</span><span class=\"n\">of_type</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n               <span class=\"n\">with_sff_id</span><span class=\"o\">=</span><span class=\"n\">sff_a</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># do the same for ssf_b ...</span>\n<span class=\"n\">scheduler_b</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"c1\"># ...</span>\n<span class=\"n\">sff_b</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># configure connections between SFFs</span>\n<span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SFF</span><span class=\"o\">.</span><span class=\"n\">setup_connection</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span> \n                                  <span class=\"n\">source_id</span><span class=\"o\">=</span><span class=\"n\">sff_a</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> \n                                  <span class=\"n\">destination_id</span><span class=\"o\">=</span><span class=\"n\">sff_b</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n                                  <span class=\"n\">bw_cap</span><span class=\"o\">=</span><span class=\"mi\">100000</span><span class=\"p\">,</span>\n                                  <span class=\"n\">latency_provider</span><span class=\"o\">=</span><span class=\"n\">LATENCY_SFF_SFF</span><span class=\"p\">,</span>\n                                  <span class=\"n\">bidirectional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>           \n\n<span class=\"c1\"># configure processing speed of sf types</span>\n<span class=\"c1\"># the rate gives the number of packets a sfi of this sf type can process in 1 s when using 1 cpu share</span>\n<span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SFI</span><span class=\"o\">.</span><span class=\"n\">setup_sf_processing_rate_per_1s</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span> \n                                                 <span class=\"n\">of_type</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n                                                 <span class=\"n\">with_mu</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create at least one packet generator (which could also replay a pcap)</span>\n<span class=\"n\">wl_config</span> <span class=\"o\">=</span> <span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">workload</span><span class=\"o\">.</span><span class=\"n\">SyntheticWorkloadGenerator</span><span class=\"o\">.</span><span class=\"n\">get_default_config</span><span class=\"p\">()</span>\n<span class=\"n\">wl_gen</span> <span class=\"o\">=</span> <span class=\"n\">sfctss</span><span class=\"o\">.</span><span class=\"n\">workload</span><span class=\"o\">.</span><span class=\"n\">SyntheticWorkloadGenerator</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">workload_rand</span><span class=\"o\">=</span><span class=\"n\">rand</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">wl_config</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">register_packet_generator</span><span class=\"p\">(</span><span class=\"n\">packet_generator</span><span class=\"o\">=</span><span class=\"n\">wl_gen</span><span class=\"p\">,</span>\n                              <span class=\"n\">fetch_all</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># finally, start simulation</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">run_sim</span><span class=\"p\">(</span><span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># print progress on bash</span>\n            <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"c1\"># no interactive mode</span>\n            <span class=\"n\">max_sim_time</span><span class=\"o\">=</span><span class=\"mi\">1500000</span><span class=\"p\">,</span> <span class=\"c1\"># we stop after 1.5s</span>\n            <span class=\"n\">ui</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"c1\"># do not show bash ui</span>\n            <span class=\"n\">stop_simulation_when_workload_is_over</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># stop when max_sim_time is done or when workload is done </span>\n</pre>\n<p>We refer to the example <code>example/main.py</code> for an example how to use SFC TSS.</p>\n<p>You may also want to create your own scheduler. Simply subclass <code>BaseScheduler</code>.\nCheck example schedulers in <code>sfctss.scheduler.examples</code> for more information.</p>\n<p>You may also want to create a custom workload provider like a pcap replay. Your workload provider must implement <code>WorkloadGenerator</code>.</p>\n<h2>Full Example</h2>\n<p>Start running the example experiment</p>\n<pre>./example/main.py --show-progress\n</pre>\n<p>or with more debugging output or activated statistics dumps</p>\n<pre><span class=\"c1\"># show progress, write csv logs, active some of the statistics</span>\n./example/main.py --show-progres --write-statistics output --statistics-server --statistics-polling-sfi --statistics-latency-cdf-buckets <span class=\"m\">50</span>\n\n<span class=\"c1\"># with more verbose bash ui</span>\n./example/main.py --show-ui\n\n<span class=\"c1\"># debugging mode</span>\n./example/main.py -v --interactive \n</pre>\n<p>The example provides more options...</p>\n<pre><code>usage: main.py [-h] [-v] [--sim-time SIM_TIME] [--no-workload-reloading] [--dry] [--show-progress] [--interactive] [--show-ui]\n               [--write-statistics STATISTICS_FILENAME] [--statistics-overview] [--statistics-packets] [--statistics-server] [--statistics-polling-sfi]\n               [--statistics-polling-sff] [--statistics-polling-server] [--statistics-polling-overview]\n               [--statistics-polling-interval STATISTICS_POLLING_INTERVAL] [--statistics-latency-cdf-buckets STATISTICS_PACKETS_CDF_BUCKETS]\n               [--dump-full-workload]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         verbose output\n  --sim-time SIM_TIME   set simulation time (in ns)\n  --no-workload-reloading\n                        if set, load full workload before simulation starts\n  --dry                 do not run the simulation, but test everything if it is functional\n  --show-progress       shows the progress during running the simulation\n  --interactive         run each simulation tick one after another\n  --show-ui             shows a simple bash-ui when running the simulation\n  --write-statistics STATISTICS_FILENAME\n                        if filename is set, activate statistics\n  --statistics-overview\n                        activate overview statistics\n  --statistics-packets  activate packet statistics\n  --statistics-server   activate server statistics\n  --statistics-polling-sfi\n                        activate sfi polling statistics\n  --statistics-polling-sff\n                        activate sff polling statistics\n  --statistics-polling-server\n                        activate server polling statistics\n  --statistics-polling-overview\n                        activate overview polling statistics\n  --statistics-polling-interval STATISTICS_POLLING_INTERVAL\n                        set statistics polling interval (in ns)\n  --statistics-latency-cdf-buckets STATISTICS_PACKETS_CDF_BUCKETS\n                        activate cdf of packet latencies; set # of buckets for cdf, e.g., 50\n  --dump-full-workload  dumps full workload (full packet dump)\n</code></pre>\n<h1>Manual Installation / Contribute</h1>\n<p>Run one of the following lines</p>\n<pre>./bootstrap-deps-pypy.sh <span class=\"c1\"># recommended option</span>\n./bootstrap-deps.sh <span class=\"c1\"># fallback with standard Python</span>\n</pre>\n<p>to setup your environment either with <a href=\"https://pypy.org\" rel=\"nofollow\">PyPy3</a> or <a href=\"https://www.python.org\" rel=\"nofollow\">Python3</a>.\nWe <strong>highly</strong> recommend you to use PyPy3.</p>\n<p>Simply load your python environment by calling one of the following lines</p>\n<pre><span class=\"nb\">source</span> env-pypy/bin/activate\n<span class=\"nb\">source</span> env/bin/activate\n</pre>\n<p>We are happy for all kind of contributions, including bug fixes and additional features.</p>\n<h1>Acknowledgement</h1>\n<p>This work has been funded by the German Federal Ministry of Education and Research (<a href=\"https://www.bmbf.de\" rel=\"nofollow\">BMBF</a>) Software Campus grant 01IS17050.</p>\n\n          </div>"}, "last_serial": 6562170, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "ccab17624ac780574549922bb86893d9", "sha256": "573a615f4b40cdfc4a32dc2cbda152475e1a7764d4601d214f6789901415474f"}, "downloads": -1, "filename": "sfctss-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ccab17624ac780574549922bb86893d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 48965, "upload_time": "2020-02-03T11:32:06", "upload_time_iso_8601": "2020-02-03T11:32:06.296254Z", "url": "https://files.pythonhosted.org/packages/f5/87/968844b4d03762e05d3dba1a0f6fa5de64b5a61ef2a22b15b77de3a14795/sfctss-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8996cc602725985d8b1cfa95210ce7a5", "sha256": "5de639a9e751b21548ab433217859b8890c937791a26a2cafb97ac6eb949fb88"}, "downloads": -1, "filename": "sfctss-0.9.0.tar.gz", "has_sig": false, "md5_digest": "8996cc602725985d8b1cfa95210ce7a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 44239, "upload_time": "2020-02-03T11:32:08", "upload_time_iso_8601": "2020-02-03T11:32:08.432020Z", "url": "https://files.pythonhosted.org/packages/f0/07/4dd18f305832d7ec54f4302083c3da19444c0494284f04d7dcffdfdbd379/sfctss-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ccab17624ac780574549922bb86893d9", "sha256": "573a615f4b40cdfc4a32dc2cbda152475e1a7764d4601d214f6789901415474f"}, "downloads": -1, "filename": "sfctss-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ccab17624ac780574549922bb86893d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 48965, "upload_time": "2020-02-03T11:32:06", "upload_time_iso_8601": "2020-02-03T11:32:06.296254Z", "url": "https://files.pythonhosted.org/packages/f5/87/968844b4d03762e05d3dba1a0f6fa5de64b5a61ef2a22b15b77de3a14795/sfctss-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8996cc602725985d8b1cfa95210ce7a5", "sha256": "5de639a9e751b21548ab433217859b8890c937791a26a2cafb97ac6eb949fb88"}, "downloads": -1, "filename": "sfctss-0.9.0.tar.gz", "has_sig": false, "md5_digest": "8996cc602725985d8b1cfa95210ce7a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 44239, "upload_time": "2020-02-03T11:32:08", "upload_time_iso_8601": "2020-02-03T11:32:08.432020Z", "url": "https://files.pythonhosted.org/packages/f0/07/4dd18f305832d7ec54f4302083c3da19444c0494284f04d7dcffdfdbd379/sfctss-0.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:17 2020"}