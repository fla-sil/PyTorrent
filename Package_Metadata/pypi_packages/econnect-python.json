{"info": {"author": "Emanuele Palazzetti", "author_email": "emanuele.palazzetti@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "\n# E-connect Python API\n\n[![PyPI version](https://badge.fury.io/py/econnect-python.svg)](https://badge.fury.io/py/econnect-python)\n[![CircleCI](https://circleci.com/gh/palazzem/elmo-alerting/tree/master.svg?style=svg)](https://circleci.com/gh/palazzem/elmo-alerting/tree/master)\n[![codecov](https://codecov.io/gh/palazzem/elmo-alerting/branch/master/graph/badge.svg)](https://codecov.io/gh/palazzem/elmo-alerting)\n\n`econnect-python` is an API adapter used to control programmatically an Elmo alarm system.\nThrough a generic configuration, the client allows:\n\n* Retrieving access tokens to make API calls\n* Obtaining/releasing the system `Lock()` to have exclusive control of the system\n* Arm/disarm all the alarms registered in the system\n* Query the system and get the status of your sectors and inputs\n\n## Requirements\n\n* Python 3.5+\n* `requests`\n\n## Getting Started\n\nThis package is available on PyPI:\n\n```bash\n$ pip install econnect-python\n```\n\n### Usage\n\n```python\nfrom elmo import query\nfrom elmo.api.client import ElmoClient\n\n# Initialize the client with an API endpoint and a vendor and\n# authenticate your connection to retrieve the access token\nclient = ElmoClient(\"https://example.com\", \"vendor\")\nclient.auth(\"username\", \"password\")\n\n# To arm/disarm the system you must gain the exclusive Lock()\nwith client.lock(\"secret-code\") as c:\n    c.arm()                # Arm all alarms\n    c.disarm()             # Disarm all alarms\n    c.arm(sectors=[3, 4])  # Arm only sectors 3 and 4\n    c.disarm(sectors=[3])  # Disarm only sector 3\n\n# Query the system\nsectors_armed, sectors_disarmed = client.query(query.SECTORS)\ninputs_alerted, inputs_wait = client.query(query.INPUTS)\n\n# Or use the shortcut\nstatus = client.check()\n\n# Returns:\n# {\n#   \"sectors_armed\": [{\"id\": 0, \"name\": \"Entryway\", \"element\": 1, \"index\": 0}, ...],\n#   \"sectors_disarmed\": [{\"id\": 1, \"name\": \"Kitchen\", \"element\": 2, \"index\": 1}, ...],\n#   \"inputs_alerted\": [{\"id\": 0, \"name\": \"Door\", \"element\": 3, \"index\": 0}, ...],\n#   \"inputs_wait\": [{\"id\": 1, \"name\": \"Window\", \"element\": 4, \"index\": 1}, ...],\n# }\n```\n\nThe access token is valid for 10 minutes after that you need to authenticate again to\nrefresh the token. Obtaining the lock via `client.lock(\"code\")` is mandatory to arm or\ndisarm the alert, otherwise the API returns `403`.\n\nOnce the lock is obtained, other clients cannot connect to the alarm system and only a\nmanual override on the terminal is allowed. Outside the context manager, the lock is\nautomatically released.\n\n## Development\n\nWe accept external contributions even though the project is mostly designed for personal\nneeds. If you think some parts can be exposed with a more generic interface, feel free\nto open a GitHub issue and to discuss your suggestion.\n\n### Coding Guidelines\n\nWe use [flake8][1] as a style guide enforcement. That said, we also use [black][2] to\nreformat our code, keeping a well defined style even for quotes, multi-lines blocks and\nother.\n\nBefore submitting your code, be sure to launch `black` to reformat your PR.\n\n[1]: https://pypi.org/project/flake8/\n[2]: https://github.com/ambv/black\n\n### Testing\n\n`tox` is used to execute the following test matrix:\n* `lint`: launches `flake8` and `black --check` to be sure the code honors our style\n  guideline\n* `py{35,36,37,38}`: launches `py.test` to execute all tests under Python 3.5, 3.6, 3.7\n  and 3.8.\n\nTo launch the full test matrix, just:\n\n```bash\n$ tox\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/palazzem/econnect-python", "keywords": "", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "econnect-python", "package_url": "https://pypi.org/project/econnect-python/", "platform": "", "project_url": "https://pypi.org/project/econnect-python/", "project_urls": {"Homepage": "https://github.com/palazzem/econnect-python"}, "release_url": "https://pypi.org/project/econnect-python/0.3.1/", "requires_dist": ["requests[security]"], "requires_python": ">=3.5.0", "summary": "API adapter used to control programmatically an Elmo alarm system.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>E-connect Python API</h1>\n<p><a href=\"https://badge.fury.io/py/econnect-python\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c92accc46db2da2b3e43a80fc59d1475298c2d33/68747470733a2f2f62616467652e667572792e696f2f70792f65636f6e6e6563742d707974686f6e2e737667\"></a>\n<a href=\"https://circleci.com/gh/palazzem/elmo-alerting/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d6b546c1ab55c48d592c9050520b3672be008af/68747470733a2f2f636972636c6563692e636f6d2f67682f70616c617a7a656d2f656c6d6f2d616c657274696e672f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/palazzem/elmo-alerting\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba38ae55101f498a4eb61306f44ae081f1388fe5/68747470733a2f2f636f6465636f762e696f2f67682f70616c617a7a656d2f656c6d6f2d616c657274696e672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p><code>econnect-python</code> is an API adapter used to control programmatically an Elmo alarm system.\nThrough a generic configuration, the client allows:</p>\n<ul>\n<li>Retrieving access tokens to make API calls</li>\n<li>Obtaining/releasing the system <code>Lock()</code> to have exclusive control of the system</li>\n<li>Arm/disarm all the alarms registered in the system</li>\n<li>Query the system and get the status of your sectors and inputs</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.5+</li>\n<li><code>requests</code></li>\n</ul>\n<h2>Getting Started</h2>\n<p>This package is available on PyPI:</p>\n<pre>$ pip install econnect-python\n</pre>\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elmo</span> <span class=\"kn\">import</span> <span class=\"n\">query</span>\n<span class=\"kn\">from</span> <span class=\"nn\">elmo.api.client</span> <span class=\"kn\">import</span> <span class=\"n\">ElmoClient</span>\n\n<span class=\"c1\"># Initialize the client with an API endpoint and a vendor and</span>\n<span class=\"c1\"># authenticate your connection to retrieve the access token</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ElmoClient</span><span class=\"p\">(</span><span class=\"s2\">\"https://example.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"vendor\"</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To arm/disarm the system you must gain the exclusive Lock()</span>\n<span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"s2\">\"secret-code\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">arm</span><span class=\"p\">()</span>                <span class=\"c1\"># Arm all alarms</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">disarm</span><span class=\"p\">()</span>             <span class=\"c1\"># Disarm all alarms</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">arm</span><span class=\"p\">(</span><span class=\"n\">sectors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>  <span class=\"c1\"># Arm only sectors 3 and 4</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">disarm</span><span class=\"p\">(</span><span class=\"n\">sectors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>  <span class=\"c1\"># Disarm only sector 3</span>\n\n<span class=\"c1\"># Query the system</span>\n<span class=\"n\">sectors_armed</span><span class=\"p\">,</span> <span class=\"n\">sectors_disarmed</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">SECTORS</span><span class=\"p\">)</span>\n<span class=\"n\">inputs_alerted</span><span class=\"p\">,</span> <span class=\"n\">inputs_wait</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">INPUTS</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or use the shortcut</span>\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Returns:</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#   \"sectors_armed\": [{\"id\": 0, \"name\": \"Entryway\", \"element\": 1, \"index\": 0}, ...],</span>\n<span class=\"c1\">#   \"sectors_disarmed\": [{\"id\": 1, \"name\": \"Kitchen\", \"element\": 2, \"index\": 1}, ...],</span>\n<span class=\"c1\">#   \"inputs_alerted\": [{\"id\": 0, \"name\": \"Door\", \"element\": 3, \"index\": 0}, ...],</span>\n<span class=\"c1\">#   \"inputs_wait\": [{\"id\": 1, \"name\": \"Window\", \"element\": 4, \"index\": 1}, ...],</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>The access token is valid for 10 minutes after that you need to authenticate again to\nrefresh the token. Obtaining the lock via <code>client.lock(\"code\")</code> is mandatory to arm or\ndisarm the alert, otherwise the API returns <code>403</code>.</p>\n<p>Once the lock is obtained, other clients cannot connect to the alarm system and only a\nmanual override on the terminal is allowed. Outside the context manager, the lock is\nautomatically released.</p>\n<h2>Development</h2>\n<p>We accept external contributions even though the project is mostly designed for personal\nneeds. If you think some parts can be exposed with a more generic interface, feel free\nto open a GitHub issue and to discuss your suggestion.</p>\n<h3>Coding Guidelines</h3>\n<p>We use <a href=\"https://pypi.org/project/flake8/\" rel=\"nofollow\">flake8</a> as a style guide enforcement. That said, we also use <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">black</a> to\nreformat our code, keeping a well defined style even for quotes, multi-lines blocks and\nother.</p>\n<p>Before submitting your code, be sure to launch <code>black</code> to reformat your PR.</p>\n<h3>Testing</h3>\n<p><code>tox</code> is used to execute the following test matrix:</p>\n<ul>\n<li><code>lint</code>: launches <code>flake8</code> and <code>black --check</code> to be sure the code honors our style\nguideline</li>\n<li><code>py{35,36,37,38}</code>: launches <code>py.test</code> to execute all tests under Python 3.5, 3.6, 3.7\nand 3.8.</li>\n</ul>\n<p>To launch the full test matrix, just:</p>\n<pre>$ tox\n</pre>\n\n          </div>"}, "last_serial": 6812857, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "ae7bd4ebc735d1d5ad7560f603988c0b", "sha256": "2602190ae0e3c8a4988a2b04a2cd47306647db480115bf5183c71b4c79e130c7"}, "downloads": -1, "filename": "econnect_python-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae7bd4ebc735d1d5ad7560f603988c0b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 9005, "upload_time": "2020-03-14T20:41:13", "upload_time_iso_8601": "2020-03-14T20:41:13.040190Z", "url": "https://files.pythonhosted.org/packages/c4/cb/ef99f513ab6cfce4ef13eed0817f5ead6d8957b2f44ffe3dac968bc925dc/econnect_python-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d53db3e27cf10756965097561f8d9273", "sha256": "155b970da8ef8de64d5a8cc5635a232b17bafc8bb2e17cc9e1a687ca94cbe39e"}, "downloads": -1, "filename": "econnect-python-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d53db3e27cf10756965097561f8d9273", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 8152, "upload_time": "2020-03-14T20:41:15", "upload_time_iso_8601": "2020-03-14T20:41:15.394689Z", "url": "https://files.pythonhosted.org/packages/ea/6b/793f54a08820e34a6bec489195be775c77466dd7f269242c89f43b14ac7f/econnect-python-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ed9eade8032e9cb62b1b1864ecf45e25", "sha256": "49cfd256a593270296b70337c82c4440bcfab4e654a5547a665963a37593d6e8"}, "downloads": -1, "filename": "econnect_python-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed9eade8032e9cb62b1b1864ecf45e25", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 9126, "upload_time": "2020-03-14T21:12:42", "upload_time_iso_8601": "2020-03-14T21:12:42.230006Z", "url": "https://files.pythonhosted.org/packages/ec/65/b2e8f2ce934961b0a7417a9d97f8ae003dc0a2b56eb7412f881f1d97fe26/econnect_python-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8560f56743ae244f557533823e33d54", "sha256": "85a1be9395bc55cb9913d9f6f099949dd7170953a138b167be27f1b605a98fa9"}, "downloads": -1, "filename": "econnect-python-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f8560f56743ae244f557533823e33d54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 8190, "upload_time": "2020-03-14T21:12:43", "upload_time_iso_8601": "2020-03-14T21:12:43.864430Z", "url": "https://files.pythonhosted.org/packages/5d/63/23c1a15816000e30ad7acb242520f1e59505e80f037dad6ce7f2ed311acc/econnect-python-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed9eade8032e9cb62b1b1864ecf45e25", "sha256": "49cfd256a593270296b70337c82c4440bcfab4e654a5547a665963a37593d6e8"}, "downloads": -1, "filename": "econnect_python-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed9eade8032e9cb62b1b1864ecf45e25", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 9126, "upload_time": "2020-03-14T21:12:42", "upload_time_iso_8601": "2020-03-14T21:12:42.230006Z", "url": "https://files.pythonhosted.org/packages/ec/65/b2e8f2ce934961b0a7417a9d97f8ae003dc0a2b56eb7412f881f1d97fe26/econnect_python-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8560f56743ae244f557533823e33d54", "sha256": "85a1be9395bc55cb9913d9f6f099949dd7170953a138b167be27f1b605a98fa9"}, "downloads": -1, "filename": "econnect-python-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f8560f56743ae244f557533823e33d54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 8190, "upload_time": "2020-03-14T21:12:43", "upload_time_iso_8601": "2020-03-14T21:12:43.864430Z", "url": "https://files.pythonhosted.org/packages/5d/63/23c1a15816000e30ad7acb242520f1e59505e80f037dad6ce7f2ed311acc/econnect-python-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:59 2020"}