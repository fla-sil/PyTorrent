{"info": {"author": "Srivatsan Iyer", "author_email": "supersaiyanmode.rox@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# PyWebOSTV\n\n[![Build Status](https://api.travis-ci.org/supersaiyanmode/PyWebOSTV.svg?branch=develop)](https://travis-ci.org/supersaiyanmode/PyWebOSTV)\n[![Coverage Status](https://coveralls.io/repos/github/supersaiyanmode/PyWebOSTV/badge.svg?branch=master)](https://coveralls.io/github/supersaiyanmode/PyWebOSTV?branch=master)\n\n## Why another Library?\n\nI looked at a few libraries. The LGWebOSRemote repository by\n[klattimer](https://github.com/klattimer/LGWebOSRemote) is definitely a good library, but it has a\nfew problems:\n\n- Meant to be used with Python 2.x.\n- Assumes all the users of the library would like to save the credentials to ~/.lgtv.json.\n- Assumes only a single command will be fired and waited on at any given time (ctrl+F for `self.__waiting_callback`)\n- Mouse/Keyboard not supported.\n\nThis SDK is a tiny attempt at overcoming some of the above problems.\n\n## Current status?\n\n~~At the moment, I haven't been able to do any kind of extensive testing. No unit test cases too!~~\nCurrent status: Works for quite a few people! :)\n\nCurrently working on more controls~~and unit test cases~~. I will soon upload it to PyPI.\n\n## How to Use: Connecting to the TV\n\n### Establishing the connection.\n\n```python\nfrom pywebostv.discovery import *    # Because I'm lazy, don't do this.\nfrom pywebostv.connection import *\nfrom pywebostv.controls import *\n\n# The 'store' gets populated during the registration process. If it is empty, a registration prompt\n# will show up on the TV. You can pass any dictionary-like interface instead -- that when values are\n# set, will persist to a DB, a config file or something similar.\nstore = {}\n\n# Scans the current network to discover TV. Avoid [0] in real code. If you already know the IP,\n# you could skip the slow scan and # instead simply say:\n#    client = WebOSClient(\"<IP Address of TV>\")\nclient = WebOSClient.discover()[0]\nclient.connect()\nfor status in client.register(store):\n    if status == WebOSClient.PROMPTED:\n        print(\"Please accept the connect on the TV!\")\n    elif status == WebOSClient.REGISTERED:\n        print(\"Registration successful!\")\n```\n\n### Using the connection to call APIs\n\nThe `client` instance represents the main channel of communication with the TV. All `*Control`\ninstances (`MediaControl`, `ApplicationControl` etc) share the same underlying connection. All\navailable APIs are grouped into separate classes (for cleanliness) like `MediaControl`,\n`SystemControl` etc.\n\nMost `*Control` classes behave in a very similar way and are super extensible. This is because most\nof the heavy lifting is done in the base class -- incorporating a new API that isn't currently\nsupported by this library should be very easy. Read the extension section for more on this.\n\nThings to note:\n\n- Most APIs support `block=` argument. If `True` the call blocks for the response to arrive. If\n   `False`, it is a good idea to provide a `callback=` argument. If you don't care about the\n   response at all, simply call the API with `block=False`.\n- Some APIs support subscribing for changes. Provide a callback and you will be notified when the\n   event happens. It is an error to subscribe more than once on the same underlying connection. To\n   subscribe, the function you'd call is `control.subscribe_api_name()` assuming the regular API is\n   called `api_name`. To unsubscribe, just call: `control.unsubscribe_api_name()`.\n\nThe general pattern is:\n\n```python\ncontrol = SomeControl(client)\n\n# Blocking call\napi_response = control.some_api()\n\n# Blocking call, with parameters (the table below lists API & arguments)\napi_response = control.some_other_api(arg1, arg2)\n\n# Blocking call can throw as error:\ntry:\n    control.good_api(bad_argument1)\nexcept ...:\n    print(\"Something went wrong.\")\n\n# non-blocking call with callback\ndef my_function(status_of_call, payload):\n    if status_of_call:\n        # Successful response from TV.\n        # payload is a dict or an object (see API details)\n        print(payload)  # Successful response from TV\n    else:\n        # payload is the error string.\n        print(\"Error message: \", payload)\ncontrol.async_api(arg1, arg2, callback=my_function)\n\n# Subscription (if the API supports it, that is).\ncontrol.subscribe_api(my_function).\n\n# Unsubscribe\ncontrol.unsubscribe_api()  # After this point, you can resubscribe.\n\n```\n\n### API Details\n\nPlease note that all the examples below use the blocking calls. Their return values and structure\nare documented in the comments. They throw python exceptions when unsuccessful. To make non-blocking\ncalls, refer to the section above.\n\n### Media Controls\n\n```python\nmedia = MediaControl(client)\nmedia.volume_up()          # Increase the volume by 1 unit. Doesn't return anything\nmedia.volume_down()        # Decrease the volume by 1 unit. Doesn't return anything\nmedia.get_volume()         # Get volume status. Returns something like:\n                           # {'scenario': 'mastervolume_tv_speaker', 'volume': 9, 'muted': False}\nmedia.set_volume(<int>)    # The argument is an integer from 1 to 100. Doesn't return anything.\nmedia.mute(status)         # status=True mutes the TV. status=Fale unmutes it.\nmedia.play()\nmedia.pause()\nmedia.stop()\nmedia.rewind()\nmedia.fast_forward()\n```\n\n#### Subscriptions\n\n`get_volume` supports subscription. To subscribe to volume changes, say something like:\n\n```python\ndef on_volume_change(status, payload):\n    if status:\n        print(payload)\n    else:\n        print(\"Something went wrong.\")\n\nmedia.subscribe_get_volume(on_volume_change)  # on_volume_change(..) will now be called when the\n                                              # volume/mute status etc changes.\n```\n\n### System Controls\n\n```python\nsystem = SystemControl(client)\nsystem.notify(\"This is a notification message!\")  # Show a notification message on the TV.\nsystem.power_off()                                # Turns off the TV. There is no way to turn it\n                                                  # back on programmically unless you use\n                                                  # something like Wake-on-LAN or something liker\n                                                  # that.\nsystem.info()                                     # Returns a dict with keys such as product_name,\n                                                  # model_name, # major_ver, minor_ver etc.\n```\n\n### Application Controls\n\n```python\napp = ApplicationControl(client)\napps = app.list_apps()                            # Returns a list of `Application` instances.\n\n# Let's launch YouTube!\nyt = [x for x in apps if \"youtube\" in x[\"title\"].lower()][0]\n                                                  # Search for YouTube & launch it (Of course, don't\n                                                  # be this lazy. Check for errors). Also, Try\n                                                  # searching similarly for \"amazon\", \"netflix\" etc.\nlaunch_info = app.launch(yt)                      # Launches YouTube and shows the main page.\nlaunch_info = app.launch(yt, content_id=\"dQw4w9WgXcQ\")\n                                                  # Or you could even launch a video directly!\napp.close(launch_info)                            # Close what we just launched.\n\n# Let's get the icon of the foreground app.\napp_id = app.get_current()                        # Returns the application ID (string) of the\n                                                  # foreground app.\nforeground_app = [x for x in apps if app_id == x[\"id\"]][0]\n                                                  # Application app[\"id\"] == app.data[\"id\"].\nicon_url = foreground_app[\"icon\"]                 # This returns an HTTP URL hosted by the TV.\n```\n\n#### Subscription\n\n`.get_current()` supports subscription. To subscribe, call `app.subscribe_get_current(callback)` in\nthe same way as `.subscribe_get_volume(..)` above.\n\n### Mouse and Button Controls\n\n```python\ninp = InputControl(client)\n\ninp.type(\"This sends keyboard input!\")            # This sends keystrokes, but needs the keyboard to\n                                                  # be displayed on the screen.\ninp.enter()                                       # Return key.\ninp.delete(10)                                    # Backspace 10 chars\n```\n\nThe above APIs behave much like the other APIs above. The ones below are a little different. WebOS\nrequires that we open a different connection and uses a different message structure. You must call\n`inp.connect_input()` to create this connection and `inp.disconnect_input()` to close it. All the\nAPIs below should be called between connect and disconnect.\n\n```python\ninp.connect_input()\ninp.move(10, 10)    # Moves mouse\ninp.click()         # Click where the mouse pointer is. It sometimes also acts as the center \"OK\"\n                    # button on the remote.\ninp.up()\ninp.down()\ninp.left()\ninp.right()\ninp.home()\ninp.back()\ninp.dash()\ninp.info()\ninp.num_1()         # Number keys...\ninp.num_2()\ninp.num_3()\ninp.num_4()\ninp.num_5()\ninp.num_6()\ninp.num_7()\ninp.num_8()\ninp.num_9()\ninp.num_0()\ninp.asterisk()      # Literally just an \"*\"\ninp.cc()            # Closed captioning\ninp.exit()          \ninp.red()           # Colored buttons\ninp.green()\ninp.blue()\ninp.mute()          # The remaining commands are also available in either MediaControl or TvControl\ninp.volume_up()\ninp.volume_down()\ninp.channel_up()\ninp.channel_down()\ninp.disconnect_input()\n```\n\n### TV Controls\n\n```python\ntv_control = TvControl()\ntv_control.channel_down()\ntv_control.channel_up()\n```\n\n### Source Controls\n\n```python\nsource_control = SourceControl(client)\nsources = source_control.list_sources()    # Returns a list of InputSource instances.\nsource_control.set_source(sources[0])      # .set_source(..) accepts an InputSource instance.\n\n# To get the current current source being used, please use the API that retrieves the foreground\n# app.\n```\n\nMore controls coming soon!\n\n## Credits\n\n- [klattimer](https://github.com/klattimer/LGWebOSRemote) for his library! Since WebOS team decided\n   against providing any sort of documentation, his repository was extremely useful for an initial\n   implementation\n- As far as input controls are concerned, they are based on the Java package written by\n   [Connect-SDK folks](https://github.com/ConnectSDK/Connect-SDK-Android-Core/tree/master/src/com/connectsdk/service/webos)!\n- All individual contributors to this repository.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/supersaiyanmode/PyWebOSTV", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pywebostv", "package_url": "https://pypi.org/project/pywebostv/", "platform": "", "project_url": "https://pypi.org/project/pywebostv/", "project_urls": {"Homepage": "https://github.com/supersaiyanmode/PyWebOSTV"}, "release_url": "https://pypi.org/project/pywebostv/0.8.4/", "requires_dist": ["ws4py", "requests[security]", "future"], "requires_python": "", "summary": "Library to remote control LG Web OS TV", "version": "0.8.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyWebOSTV</h1>\n<p><a href=\"https://travis-ci.org/supersaiyanmode/PyWebOSTV\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7bdf12e3421fd2108c8fe870fb27494d7df5f329/68747470733a2f2f6170692e7472617669732d63692e6f72672f737570657273616979616e6d6f64652f50795765624f5354562e7376673f6272616e63683d646576656c6f70\"></a>\n<a href=\"https://coveralls.io/github/supersaiyanmode/PyWebOSTV?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d15fbfe8bfa44ba89d6461d6d1af86b90041e87/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f737570657273616979616e6d6f64652f50795765624f5354562f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Why another Library?</h2>\n<p>I looked at a few libraries. The LGWebOSRemote repository by\n<a href=\"https://github.com/klattimer/LGWebOSRemote\" rel=\"nofollow\">klattimer</a> is definitely a good library, but it has a\nfew problems:</p>\n<ul>\n<li>Meant to be used with Python 2.x.</li>\n<li>Assumes all the users of the library would like to save the credentials to ~/.lgtv.json.</li>\n<li>Assumes only a single command will be fired and waited on at any given time (ctrl+F for <code>self.__waiting_callback</code>)</li>\n<li>Mouse/Keyboard not supported.</li>\n</ul>\n<p>This SDK is a tiny attempt at overcoming some of the above problems.</p>\n<h2>Current status?</h2>\n<p><del>At the moment, I haven't been able to do any kind of extensive testing. No unit test cases too!</del>\nCurrent status: Works for quite a few people! :)</p>\n<p>Currently working on more controls<del>and unit test cases</del>. I will soon upload it to PyPI.</p>\n<h2>How to Use: Connecting to the TV</h2>\n<h3>Establishing the connection.</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywebostv.discovery</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>    <span class=\"c1\"># Because I'm lazy, don't do this.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pywebostv.connection</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pywebostv.controls</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># The 'store' gets populated during the registration process. If it is empty, a registration prompt</span>\n<span class=\"c1\"># will show up on the TV. You can pass any dictionary-like interface instead -- that when values are</span>\n<span class=\"c1\"># set, will persist to a DB, a config file or something similar.</span>\n<span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"c1\"># Scans the current network to discover TV. Avoid [0] in real code. If you already know the IP,</span>\n<span class=\"c1\"># you could skip the slow scan and # instead simply say:</span>\n<span class=\"c1\">#    client = WebOSClient(\"&lt;IP Address of TV&gt;\")</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">WebOSClient</span><span class=\"o\">.</span><span class=\"n\">discover</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">status</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">WebOSClient</span><span class=\"o\">.</span><span class=\"n\">PROMPTED</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Please accept the connect on the TV!\"</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">WebOSClient</span><span class=\"o\">.</span><span class=\"n\">REGISTERED</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Registration successful!\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Using the connection to call APIs</h3>\n<p>The <code>client</code> instance represents the main channel of communication with the TV. All <code>*Control</code>\ninstances (<code>MediaControl</code>, <code>ApplicationControl</code> etc) share the same underlying connection. All\navailable APIs are grouped into separate classes (for cleanliness) like <code>MediaControl</code>,\n<code>SystemControl</code> etc.</p>\n<p>Most <code>*Control</code> classes behave in a very similar way and are super extensible. This is because most\nof the heavy lifting is done in the base class -- incorporating a new API that isn't currently\nsupported by this library should be very easy. Read the extension section for more on this.</p>\n<p>Things to note:</p>\n<ul>\n<li>Most APIs support <code>block=</code> argument. If <code>True</code> the call blocks for the response to arrive. If\n<code>False</code>, it is a good idea to provide a <code>callback=</code> argument. If you don't care about the\nresponse at all, simply call the API with <code>block=False</code>.</li>\n<li>Some APIs support subscribing for changes. Provide a callback and you will be notified when the\nevent happens. It is an error to subscribe more than once on the same underlying connection. To\nsubscribe, the function you'd call is <code>control.subscribe_api_name()</code> assuming the regular API is\ncalled <code>api_name</code>. To unsubscribe, just call: <code>control.unsubscribe_api_name()</code>.</li>\n</ul>\n<p>The general pattern is:</p>\n<pre><span class=\"n\">control</span> <span class=\"o\">=</span> <span class=\"n\">SomeControl</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Blocking call</span>\n<span class=\"n\">api_response</span> <span class=\"o\">=</span> <span class=\"n\">control</span><span class=\"o\">.</span><span class=\"n\">some_api</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Blocking call, with parameters (the table below lists API &amp; arguments)</span>\n<span class=\"n\">api_response</span> <span class=\"o\">=</span> <span class=\"n\">control</span><span class=\"o\">.</span><span class=\"n\">some_other_api</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Blocking call can throw as error:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">control</span><span class=\"o\">.</span><span class=\"n\">good_api</span><span class=\"p\">(</span><span class=\"n\">bad_argument1</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"o\">...</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Something went wrong.\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># non-blocking call with callback</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">status_of_call</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">status_of_call</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Successful response from TV.</span>\n        <span class=\"c1\"># payload is a dict or an object (see API details)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>  <span class=\"c1\"># Successful response from TV</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># payload is the error string.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Error message: \"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span>\n<span class=\"n\">control</span><span class=\"o\">.</span><span class=\"n\">async_api</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">my_function</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Subscription (if the API supports it, that is).</span>\n<span class=\"n\">control</span><span class=\"o\">.</span><span class=\"n\">subscribe_api</span><span class=\"p\">(</span><span class=\"n\">my_function</span><span class=\"p\">)</span><span class=\"o\">.</span>\n\n<span class=\"c1\"># Unsubscribe</span>\n<span class=\"n\">control</span><span class=\"o\">.</span><span class=\"n\">unsubscribe_api</span><span class=\"p\">()</span>  <span class=\"c1\"># After this point, you can resubscribe.</span>\n</pre>\n<h3>API Details</h3>\n<p>Please note that all the examples below use the blocking calls. Their return values and structure\nare documented in the comments. They throw python exceptions when unsuccessful. To make non-blocking\ncalls, refer to the section above.</p>\n<h3>Media Controls</h3>\n<pre><span class=\"n\">media</span> <span class=\"o\">=</span> <span class=\"n\">MediaControl</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">volume_up</span><span class=\"p\">()</span>          <span class=\"c1\"># Increase the volume by 1 unit. Doesn't return anything</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">volume_down</span><span class=\"p\">()</span>        <span class=\"c1\"># Decrease the volume by 1 unit. Doesn't return anything</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">get_volume</span><span class=\"p\">()</span>         <span class=\"c1\"># Get volume status. Returns something like:</span>\n                           <span class=\"c1\"># {'scenario': 'mastervolume_tv_speaker', 'volume': 9, 'muted': False}</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">set_volume</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nb\">int</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>    <span class=\"c1\"># The argument is an integer from 1 to 100. Doesn't return anything.</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">mute</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>         <span class=\"c1\"># status=True mutes the TV. status=Fale unmutes it.</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">()</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">pause</span><span class=\"p\">()</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">rewind</span><span class=\"p\">()</span>\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">fast_forward</span><span class=\"p\">()</span>\n</pre>\n<h4>Subscriptions</h4>\n<p><code>get_volume</code> supports subscription. To subscribe to volume changes, say something like:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">on_volume_change</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">status</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Something went wrong.\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">subscribe_get_volume</span><span class=\"p\">(</span><span class=\"n\">on_volume_change</span><span class=\"p\">)</span>  <span class=\"c1\"># on_volume_change(..) will now be called when the</span>\n                                              <span class=\"c1\"># volume/mute status etc changes.</span>\n</pre>\n<h3>System Controls</h3>\n<pre><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">SystemControl</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"s2\">\"This is a notification message!\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Show a notification message on the TV.</span>\n<span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">power_off</span><span class=\"p\">()</span>                                <span class=\"c1\"># Turns off the TV. There is no way to turn it</span>\n                                                  <span class=\"c1\"># back on programmically unless you use</span>\n                                                  <span class=\"c1\"># something like Wake-on-LAN or something liker</span>\n                                                  <span class=\"c1\"># that.</span>\n<span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span>                                     <span class=\"c1\"># Returns a dict with keys such as product_name,</span>\n                                                  <span class=\"c1\"># model_name, # major_ver, minor_ver etc.</span>\n</pre>\n<h3>Application Controls</h3>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">ApplicationControl</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"n\">apps</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">list_apps</span><span class=\"p\">()</span>                            <span class=\"c1\"># Returns a list of `Application` instances.</span>\n\n<span class=\"c1\"># Let's launch YouTube!</span>\n<span class=\"n\">yt</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">apps</span> <span class=\"k\">if</span> <span class=\"s2\">\"youtube\"</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">\"title\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                                                  <span class=\"c1\"># Search for YouTube &amp; launch it (Of course, don't</span>\n                                                  <span class=\"c1\"># be this lazy. Check for errors). Also, Try</span>\n                                                  <span class=\"c1\"># searching similarly for \"amazon\", \"netflix\" etc.</span>\n<span class=\"n\">launch_info</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">launch</span><span class=\"p\">(</span><span class=\"n\">yt</span><span class=\"p\">)</span>                      <span class=\"c1\"># Launches YouTube and shows the main page.</span>\n<span class=\"n\">launch_info</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">launch</span><span class=\"p\">(</span><span class=\"n\">yt</span><span class=\"p\">,</span> <span class=\"n\">content_id</span><span class=\"o\">=</span><span class=\"s2\">\"dQw4w9WgXcQ\"</span><span class=\"p\">)</span>\n                                                  <span class=\"c1\"># Or you could even launch a video directly!</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">launch_info</span><span class=\"p\">)</span>                            <span class=\"c1\"># Close what we just launched.</span>\n\n<span class=\"c1\"># Let's get the icon of the foreground app.</span>\n<span class=\"n\">app_id</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">()</span>                        <span class=\"c1\"># Returns the application ID (string) of the</span>\n                                                  <span class=\"c1\"># foreground app.</span>\n<span class=\"n\">foreground_app</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">apps</span> <span class=\"k\">if</span> <span class=\"n\">app_id</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                                                  <span class=\"c1\"># Application app[\"id\"] == app.data[\"id\"].</span>\n<span class=\"n\">icon_url</span> <span class=\"o\">=</span> <span class=\"n\">foreground_app</span><span class=\"p\">[</span><span class=\"s2\">\"icon\"</span><span class=\"p\">]</span>                 <span class=\"c1\"># This returns an HTTP URL hosted by the TV.</span>\n</pre>\n<h4>Subscription</h4>\n<p><code>.get_current()</code> supports subscription. To subscribe, call <code>app.subscribe_get_current(callback)</code> in\nthe same way as <code>.subscribe_get_volume(..)</code> above.</p>\n<h3>Mouse and Button Controls</h3>\n<pre><span class=\"n\">inp</span> <span class=\"o\">=</span> <span class=\"n\">InputControl</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">(</span><span class=\"s2\">\"This sends keyboard input!\"</span><span class=\"p\">)</span>            <span class=\"c1\"># This sends keystrokes, but needs the keyboard to</span>\n                                                  <span class=\"c1\"># be displayed on the screen.</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">enter</span><span class=\"p\">()</span>                                       <span class=\"c1\"># Return key.</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>                                    <span class=\"c1\"># Backspace 10 chars</span>\n</pre>\n<p>The above APIs behave much like the other APIs above. The ones below are a little different. WebOS\nrequires that we open a different connection and uses a different message structure. You must call\n<code>inp.connect_input()</code> to create this connection and <code>inp.disconnect_input()</code> to close it. All the\nAPIs below should be called between connect and disconnect.</p>\n<pre><span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">connect_input</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>    <span class=\"c1\"># Moves mouse</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>         <span class=\"c1\"># Click where the mouse pointer is. It sometimes also acts as the center \"OK\"</span>\n                    <span class=\"c1\"># button on the remote.</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">down</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">back</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">dash</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_1</span><span class=\"p\">()</span>         <span class=\"c1\"># Number keys...</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_2</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_3</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_4</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_5</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_6</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_7</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_8</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_9</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">num_0</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">asterisk</span><span class=\"p\">()</span>      <span class=\"c1\"># Literally just an \"*\"</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">cc</span><span class=\"p\">()</span>            <span class=\"c1\"># Closed captioning</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">()</span>          \n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">()</span>           <span class=\"c1\"># Colored buttons</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">mute</span><span class=\"p\">()</span>          <span class=\"c1\"># The remaining commands are also available in either MediaControl or TvControl</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">volume_up</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">volume_down</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">channel_up</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">channel_down</span><span class=\"p\">()</span>\n<span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">disconnect_input</span><span class=\"p\">()</span>\n</pre>\n<h3>TV Controls</h3>\n<pre><span class=\"n\">tv_control</span> <span class=\"o\">=</span> <span class=\"n\">TvControl</span><span class=\"p\">()</span>\n<span class=\"n\">tv_control</span><span class=\"o\">.</span><span class=\"n\">channel_down</span><span class=\"p\">()</span>\n<span class=\"n\">tv_control</span><span class=\"o\">.</span><span class=\"n\">channel_up</span><span class=\"p\">()</span>\n</pre>\n<h3>Source Controls</h3>\n<pre><span class=\"n\">source_control</span> <span class=\"o\">=</span> <span class=\"n\">SourceControl</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"n\">source_control</span><span class=\"o\">.</span><span class=\"n\">list_sources</span><span class=\"p\">()</span>    <span class=\"c1\"># Returns a list of InputSource instances.</span>\n<span class=\"n\">source_control</span><span class=\"o\">.</span><span class=\"n\">set_source</span><span class=\"p\">(</span><span class=\"n\">sources</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>      <span class=\"c1\"># .set_source(..) accepts an InputSource instance.</span>\n\n<span class=\"c1\"># To get the current current source being used, please use the API that retrieves the foreground</span>\n<span class=\"c1\"># app.</span>\n</pre>\n<p>More controls coming soon!</p>\n<h2>Credits</h2>\n<ul>\n<li><a href=\"https://github.com/klattimer/LGWebOSRemote\" rel=\"nofollow\">klattimer</a> for his library! Since WebOS team decided\nagainst providing any sort of documentation, his repository was extremely useful for an initial\nimplementation</li>\n<li>As far as input controls are concerned, they are based on the Java package written by\n<a href=\"https://github.com/ConnectSDK/Connect-SDK-Android-Core/tree/master/src/com/connectsdk/service/webos\" rel=\"nofollow\">Connect-SDK folks</a>!</li>\n<li>All individual contributors to this repository.</li>\n</ul>\n\n          </div>"}, "last_serial": 5626640, "releases": {"0.8.2": [{"comment_text": "", "digests": {"md5": "add151e5e33e6bfc6e51e50b0d36ba56", "sha256": "e5efca66d231c7523012003e6222a8b7ae05c6dc2bbffbd2d43d9b3fbca3ad24"}, "downloads": -1, "filename": "pywebostv-0.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "add151e5e33e6bfc6e51e50b0d36ba56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11736, "upload_time": "2018-06-24T22:31:25", "upload_time_iso_8601": "2018-06-24T22:31:25.382675Z", "url": "https://files.pythonhosted.org/packages/b2/f1/756951755fe48e9686d01b1ca97d4a2fda90032e93a7f8cd9dd88d53d9af/pywebostv-0.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cccc386564a2b926ead8e7f88ce1dbae", "sha256": "2ba7739d8572734622283cec13c093bc44319744833d2a069b70d4f18722918c"}, "downloads": -1, "filename": "pywebostv-0.8.2.tar.gz", "has_sig": false, "md5_digest": "cccc386564a2b926ead8e7f88ce1dbae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8418, "upload_time": "2018-06-24T22:31:26", "upload_time_iso_8601": "2018-06-24T22:31:26.809374Z", "url": "https://files.pythonhosted.org/packages/90/c7/383c8fd9a27a77df737a52954492e2c403200ea6c54fecf19c1d0efe80d9/pywebostv-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "d66416f8687d87bc9ca91a88978d4f19", "sha256": "021273d67e5a197b4d38a550d75aaf7371e950e8c91c8c088721a46a211c4cae"}, "downloads": -1, "filename": "pywebostv-0.8.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d66416f8687d87bc9ca91a88978d4f19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12773, "upload_time": "2019-03-17T19:14:47", "upload_time_iso_8601": "2019-03-17T19:14:47.681467Z", "url": "https://files.pythonhosted.org/packages/bf/c3/5771b330f8a30c87719b59a06f3b05bacb2707f7afc38307f9007d7fecf0/pywebostv-0.8.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b27521b4ab6fd3d0faac55c7f8dff81", "sha256": "05e0a8e5918ea52b70468d7954e7cb8b80fff349f73ff91d1715a32df7b006d8"}, "downloads": -1, "filename": "pywebostv-0.8.3.tar.gz", "has_sig": false, "md5_digest": "0b27521b4ab6fd3d0faac55c7f8dff81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11597, "upload_time": "2019-03-17T19:14:49", "upload_time_iso_8601": "2019-03-17T19:14:49.028114Z", "url": "https://files.pythonhosted.org/packages/6f/0d/f01f0783d0ea836331d1033f0186f83bd37d53a802d46e760903597a96c9/pywebostv-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "ac2bf15e4d44b1e5a09a691ecb2f6507", "sha256": "02305e4c7ca4d297625a5c225d4bca6aea2faf7bfd8af695ad6f4a446a3eb654"}, "downloads": -1, "filename": "pywebostv-0.8.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ac2bf15e4d44b1e5a09a691ecb2f6507", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13147, "upload_time": "2019-08-02T22:16:10", "upload_time_iso_8601": "2019-08-02T22:16:10.937945Z", "url": "https://files.pythonhosted.org/packages/18/4e/f827d525b9f8b8eb27705be2a6806468335fd4c7c3a59dea095f501f197e/pywebostv-0.8.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "466175b208a7a912a18824eb39761ba9", "sha256": "80d82f64140ff32a3146fb146aff3edf16341355516414de2540fcc4539b34c9"}, "downloads": -1, "filename": "pywebostv-0.8.4.tar.gz", "has_sig": false, "md5_digest": "466175b208a7a912a18824eb39761ba9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12080, "upload_time": "2019-08-02T22:16:13", "upload_time_iso_8601": "2019-08-02T22:16:13.314539Z", "url": "https://files.pythonhosted.org/packages/0d/f1/cf5d815b2242219e9a6587492003fab0fdc7263765b2d9ebeb2d8041f9cd/pywebostv-0.8.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac2bf15e4d44b1e5a09a691ecb2f6507", "sha256": "02305e4c7ca4d297625a5c225d4bca6aea2faf7bfd8af695ad6f4a446a3eb654"}, "downloads": -1, "filename": "pywebostv-0.8.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ac2bf15e4d44b1e5a09a691ecb2f6507", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13147, "upload_time": "2019-08-02T22:16:10", "upload_time_iso_8601": "2019-08-02T22:16:10.937945Z", "url": "https://files.pythonhosted.org/packages/18/4e/f827d525b9f8b8eb27705be2a6806468335fd4c7c3a59dea095f501f197e/pywebostv-0.8.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "466175b208a7a912a18824eb39761ba9", "sha256": "80d82f64140ff32a3146fb146aff3edf16341355516414de2540fcc4539b34c9"}, "downloads": -1, "filename": "pywebostv-0.8.4.tar.gz", "has_sig": false, "md5_digest": "466175b208a7a912a18824eb39761ba9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12080, "upload_time": "2019-08-02T22:16:13", "upload_time_iso_8601": "2019-08-02T22:16:13.314539Z", "url": "https://files.pythonhosted.org/packages/0d/f1/cf5d815b2242219e9a6587492003fab0fdc7263765b2d9ebeb2d8041f9cd/pywebostv-0.8.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:33 2020"}