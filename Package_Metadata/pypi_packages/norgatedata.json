{"info": {"author": "NorgateData Pty Ltd", "author_email": "support@norgatedata.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Win32 (MS Windows)", "Intended Audience :: Financial and Insurance Industry", "License :: Other/Proprietary License", "Operating System :: Microsoft :: Windows", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Office/Business :: Financial :: Investment"], "description": "\n![alt text](https://norgatedata.com/assets/images/norgate-data-logo-400x188.svg \"Norgate Data\")\n\nPython interface to financial market data provided by [Norgate Data](https://norgatedata.com).\n\n# Installation\n\n```sh\npip install norgatedata\n```\n\n# Upgrades\n\nTo receive upgrades/updates\n\n```sh\npip install norgatedata --upgrade\n```\n\n\n# Requirements\n\n* Python 3.5 or above\n* Microsoft Windows\n* Either NumPy or Pandas\n* Active [Norgate Data](https://norgatedata.com/) subscription\n* Writable local user folder named .norgatedata (or defined in environment variable NORGATEDATA_ROOT)\n\n# Usage\n\n```py\nimport norgatedata\n```\n\n\n# Timeseries data\n\n\n## Price\n\nPrice data is provided in multiple formats: NumPy recarray, NumPy ndarray or Pandas DataFrame.  This is determined through the format parameter.  If not specified, the default is NumPy recarray.\n\nDates are determined by passing in any (or none) of the following named parameters:\n```py\n# start_date and end_date can be provided as a string (YYYY-MM-DD or YYYYMMDD format), \n# datetime, Pandas Timestamp, or NumPy datetime64.  All types work!\nstart_date = '1990-01-01'   \nend_date = '2000-01-01'   # If not specified, the end date is today\nlimit = 50  # This provides the last X records\ninterval = 'D' # D=Daily, W=Weekly, M=Monthly - the date given is the last date of the interval \n```\n\nPrice & Volume adjustment allows you to adjust historical stock prices and volumes to account for the effect of capital events and dividends.\n```py\npriceadjust = norgatedata.StockPriceAdjustmentType.NONE\npriceadjust = norgatedata.StockPriceAdjustmentType.CAPITAL\npriceadjust = norgatedata.StockPriceAdjustmentType.CAPITALSPECIAL\npriceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN # Default\n\n```\nDate padding allows you to repeat the prior close on days where no price record would otherwise exist.\n```py\npadding_setting = norgatedata.PaddingType.NONE  # Default\npadding_setting = norgatedata.PaddingType.ALLMARKETDAYS\npadding_setting = norgatedata.PaddingType.ALLWEEKDAYS\npadding_setting = norgatedata.PaddingType.ALLCALENDARDAYS\n```\n\nColumns returned include Date, Open, High, Low, and Close.    For certain instruments, additional columns are provided where applicable including: Volume (Stocks, some Indices, some Indicators, Futures), Turnover (Stocks, some Indices, some Indicators), Unadjusted Close (Stocks), Dividend (Stocks), Open Interest (Futures, ASX Exchange Traded Options), Delivery Month (Continuous Futures).\n\n### Examples\n```py\nimport norgatedata\npriceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN \npadding_setting = norgatedata.PaddingType.NONE   \nsymbol = 'AAPL'\nstart_date = '1990-01-01'\ntimeseriesformat = 'numpy-recarray'\n\n# Provides data on GOOG from 1990 until today in \n# a NumPy recarray format, with explicitly set stock price \n# adjustment and padding settings\npricedata_recarray = norgatedata.price_timeseries(\n    symbol,\n    stock_price_adjustment_setting = priceadjust,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    format=timeseriesformat,\n)\n\n# Now in a Pandas-compatible format\nimport pandas as pd\ntimeseriesformat = 'pandas-dataframe'\nstart_date = pd.Timestamp('1900-01-01') # we can also provide dates as a Pandas Timestamp\npricedata_dataframe = norgatedata.price_timeseries(\n    symbol,\n    stock_price_adjustment_setting = priceadjust,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    format=timeseriesformat,\n)\n\n# Weekly data instead\ntimeseriesformat = 'pandas-dataframe'\nstart_date = pd.Timestamp('1900-01-01') # we can also provide dates as a Pandas Timestamp\npricedata_dataframe = norgatedata.price_timeseries(\n    symbol,\n    stock_price_adjustment_setting = priceadjust,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    format=timeseriesformat,\n    interval='W'\n)\n\n# Now in a Numpy Ndarray\nimport numpy as np\ntimeseriesformat = 'numpy-ndarray'\nstart_date = np.datetime64('1900-01-01') # we can also provide dates as a Numpy datetime64\npricedata_ndarray = norgatedata.price_timeseries(\n    symbol,\n    stock_price_adjustment_setting = priceadjust,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    format=timeseriesformat,\n)\n\n# Now limiting results to final 500 bars\npricedata_dataframe = norgatedata.price_timeseries(\n    symbol,\n    stock_price_adjustment_setting = priceadjust,\n    padding_setting = padding_setting,\n    limit=500,\n    format=timeseriesformat,\n)\n\n# Now limiting results to a specific date range\nend_date='1999-12-31'\npricedata_dataframe = norgatedata.price_timeseries(\n    symbol,\n    stock_price_adjustment_setting = priceadjust,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    end_date = end_date,\n    format=timeseriesformat,\n)\n\n# Now using a numerical unchanging assetid instead of a symbol\ntimeseriesformat = 'pandas-dataframe'\nassetid = 136817\npricedata_dataframe = norgatedata.price_timeseries(\n    assetid,\n    limit=500,\n    format=timeseriesformat,\n)\n```\n\n\n### Datetime formats\n\nBy default, NumPy ndarray and recarray provides datetime64 formattted as '<M8[D]' (daily dates) as timezone naive.  Pandas dataframes default to use datetime64 formattted as '[ns]' to match Pandas Timestamp, as timezone naive.\n\nThese can be altered with the following parameters:\n\n```py\ndatetimeformat='<desired format>'\n```\nallowed values are:\n* 'datetime' : Provides Python datetime.datetime objects\n* 'date' : Provides Python datetime.date objects\n* 'datetime64ns': Provides timezone-naive NumPy datetime64 in 'datetime64[ns]' format\n* 'datetime64ms': Provides timezone-naive NumPy 'datetime64[ms]' format\n* 'm8d': Provides timezone-naive NumPy datetime64 in '<M8[D]' format\n\n```py\ntz='<desired timezone>'\n```\nThis will allocate the dates into the timezone as shown. Times will still be shown as 00:00:00.\nAccepts a string with valid timezones such as 'UTC', 'US/Eastern' etc.\n\n### Dividend Notes\n\nDividends shown in the price_timeseries Dividend column depending on whether or not they have already been accounted for in the data by the \"Price Adjustment\" method.  \n* If the data is adjusted for capital reconstructions only, then the sum of both special and ordinary dividends for that day are shown.  \n* If the data is adjusted for capital reconstructions and special dividends, then only the sum of ordinary dividends for that day are shown. \n* If the data is adjusted for capital reconstructions, special dividends and ordinary dividends, then no information is shown.  \n\nDividend/Distribution information is shown as of the day before the ex-date - i.e. if you are holding the security at the close, you will be entitled to the dividend/distribution.\n\n\n### Index Constituent\n\nTo determine whether a stock was an index constituent on a particular date, you can use the index constituent timeseries function.  You can also pass in an existing\nNumPy ndarray or Pandas Dataframe and a new column will be added and returned\n\n```py\nsymbol = 'AAPL'\nindexname = 'Russell 3000'\nindexname = 'S&P 500'  # Can also be an index symbol, such as $SPX, $RUI etc.\n\nidx = norgatedata.index_constituent_timeseries(\n    symbol,\n    indexname,\n    format = \"numpy-recarray\",\n)\n\nidx = norgatedata.index_constituent_timeseries(\n    symbol,\n    indexname,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    limit = -1,\n    format = \"numpy-ndarray\",\n)\n\nidx = norgatedata.index_constituent_timeseries(\n    symbol,\n    indexname,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    limit = -1,\n    format = \"pandas-dataframe\",\n)\n\npricedata_recarray2 = norgatedata.index_constituent_timeseries(\n    symbol,\n    indexname,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    limit = -1,\n    numpy_recarray = pricedata_recarray,\n    format = \"numpy-recarray\",\n)\n\n```\n\n### Major Exchange Listed\n\n```py\nmajexch = norgatedata.major_exchange_listed_timeseries(\n    symbol,\n    format = \"numpy-recarray\")\n```\n\nProvides indication about US stocks on whether they are listed on a major exchange (e.g. NYSE, Nasdaq, NYSE American, NYSE Arca, Cboe BZX, IEX) (value = 1) or as an OTC/Pink Sheet stock (value = 0) for each trading date is available for all Equities and ETPs.\n\nNote:  Data is only available for this item from 2000 onwards.\n\n### Capital Event\n\n```py\ncapevent = norgatedata.capital_event_timeseries(\n    symbol,\n    format = \"numpy-recarray\")\n```\n\nThis indicator will show when a capital event occurred. Effective on holding the security at the close on the day prior to the ex-date. Events include splits, reverse splits, bonus issues, stock dividends (dividends paid as stock) and complex reorganizations of capital (value = 1, otherwise if there is no event, value = 0)\n\n\n### Dividend Yield\n\n```py\ndivyield = norgatedata.dividend_yield_timeseries(\n    symbol,\n    format = \"numpy-recarray\",\n)\n```\n\nThis indicator uses a trailing 12 month sum of all split-adjusted ordinary dividends and is calculated daily against the close price. New dividends are incorporated on the entitlement date (the trading day prior to the ex-dividend date) after which the trailing 12 month sum of dividends is recalculated. Special dividends, distributions and spin-offs are not included. The lookback period is adaptive to take into account slight variations in ex-dividend dates from year-to-year.\n\n### Padding Status\n\n```py\npaddingstatus = norgatedata.padding_status_timeseries(\n    symbol,\n    format = \"numpy-recarray\",\n)\n```\n\nThis indicator will show when a price record has been padded in accordance with the Date Padding setting. If the Date Padding is set to \"No padding\" then this indicator will not return any values.\n\n\n### Unadjusted Close\n\nThis is not normally needed, as Unadjusted Close is provided in the price timeseries.  \nIt is provided here to be used as a helper routine for other Python libraries such\nas zipline-norgatedata.\n\n```py\nunadjclose = norgatedata.unadjusted_close_timeseries(\n    symbol,\n    format = \"numpy-recarray\",\n)\n```\n\n# Watchlists\n\nThe symbols of a watchlist can be retrieved into a Python list using the watchlist_symbols function\n\n```py\nwatchlistname = 'S&P 500'\nsymbols = norgatedata.watchlist_symbols(watchlistname)\n\nwatchlistname = 'Russell 3000 Current & Past'\nsymbols = norgatedata.watchlist_symbols(watchlistname)\n```\n\nIf you want the symbol, assetid and name of each security, use the watchlist function\n\n```py\nwlcontents = norgatedata.watchlist(watchlistname)\n````\n\nTo retrieve the names of all of the watchlists within Norgate Data's watchlist library, use  the watchlists function\n\n```py\nallwatchlistnames = norgatedata.watchlists()\n```\n\n# Security metadata\n\n\n```py\nsymbol = 'AMZN'\nassetid = norgatedata.assetid(symbol)\n```\n\nProvides a unique unchanging ID generated by Norgate.\n\n```py\nassetid = 129769 \nsymbol = norgatedata.assetid(symbol)\n```\n\nTranslates assetid to the current symbol.\n\n```py\ndomicile = norgatedata.domicile(symbol)\n```\n\nProvides the country code for the domicile of the company.\n\n```py\ncurrency = norgatedata.currency(symbol)\n```\n\nCurrency that the security trades in.\n\n```py\nexchange_name = norgatedata.exchange_name(symbol)\n```\n\nShort name of the exchange for the security (e.g. NYSE, Nasdaq, NYSE Arca, NYSE American, ASX etc.)\n\n```py\nexchange_name_full = norgatedata.exchange_name_full(symbol)\n```\n\nProvides long name of the exchange (e.g. New York Stock Exchange, Australian Securities Exchange etc.)\n\n```py\nsecurity_name = norgatedata.security_name(symbol)\n```\nProvides the name of the security.  e.g. GE would return General Electric Co Common.\n\n```py\nbase_type = norgatedata.base_type(symbol)\n```\n\nProvides the base type of a security.    Values include Stock Market, Futures Market, Commodity Cash & Forwards, Foreign Exchange, Economic.\n\n```py\nsubtype1 = norgatedata.subtype1(symbol)\n```\n\nProvides subtype1 of the security.    Values include Equity, Hybrid, Derivative, Debt, Exchange Traded Product, Business Activity, Employment, Prices, Money, National Accounts, Index, Currency Cross, Bullion Cross, Cryptocurrency.\n\n```py\nsubtype2 = norgatedata.subtype2(symbol)\n```\n\nProvides subtype2 of the security. Values include Operating/Holding Company, Investment Company, Special Purpose Company, Exchange Traded Note, Structured Product, Exchange Traded Fund, Exchange Traded Managed Fund, Third Party Trust Preferred, Corporate Unit, Convertible Corporate Unit, Convertible Preferred, Preferred, Convertible Debt, Exchange Traded Option, Right, Company Option, Warrant, Senior Debt, Junior Debt, Coin, Token.\n\n```py\nsubtype3 = norgatedata.subtype3(symbol)\n```\n\nProvides subtype3 of the security.   Values include Master Limited Partnership, Royalty Trust, Infrastructure Fund, Closed End Fund, Other Listed Managed Investment, Business Development Company/Pooled Development Fund, Other Listed Investment Vehicle, Absolute Return Fund, Equity Unit, Right, Contingent Value Right, Litigation Trust, Liquidation Trust, Special Purpose Acquisition Company.\n\n```py\nfinancial_summary = norgatedata.financial_summary(symbol)\n```\n\nProvides a few paragraphs summarising the current financial status of the company.\n\n```py\nbusiness_summary = norgatedata.business_summary(symbol)\n```\n\nProvides a few paragraphs summarising the operations of the company.\n\n```py\nfirst_quoted_date = norgatedata.first_quoted_date(symbol)\nfirst_quoted_date = norgatedata.first_quoted_date(symbol,format = 'iso')\nfirst_quoted_date = norgatedata.first_quoted_date(symbol,format = 'pandas-timestamp')\nfirst_quoted_date = norgatedata.first_quoted_date(symbol,format = 'numpy-datetime64')\nfirst_quoted_date = norgatedata.first_quoted_date(symbol,format = 'datetime')\n```\n\nProvides a date for the first day the security traded.By default the format is an ISO string (YYYY-MM-DD), but you can also specify other formats too.\n\n\n```py\nlast_quoted_date = norgatedata.last_quoted_date(symbol)\nlast_quoted_date = norgatedata.last_quoted_date(symbol,format = 'iso')\nlast_quoted_date = norgatedata.last_quoted_date(symbol,format = 'pandas-timestamp')\nlast_quoted_date = norgatedata.last_quoted_date(symbol,format = 'numpy-datetime64')\nlast_quoted_date = norgatedata.last_quoted_date(symbol,format = 'datetime')\n```\n\nProvides a date for the last day of trading that have a finite lifespan (such as futures).  For delisted instruments, this provides the final day of trading.  By default the format is an ISO string (YYYY-MM-DD), but you can also specify other formats too.\nWill provide None if there is no last quoted date.\n\n\n```py\nsecond_last_quoted_date = norgatedata.second_last_quoted_date(symbol)\nsecond_last_quoted_date = norgatedata.second_last_quoted_date(symbol,format = 'iso')\nsecond_last_quoted_date = norgatedata.second_last_quoted_date(symbol,format = 'pandas-timestamp')\nsecond_last_quoted_date = norgatedata.second_last_quoted_date(symbol,format = 'numpy-datetime64')\nsecond_last_quoted_date = norgatedata.second_last_quoted_date(symbol,format = 'datetime')\n```\n\nProvides a date for the second last day of trading that have a finite lifespan (such as futures).  For delisted instruments, this provides the trading day prior to the last quoted day.\nWill provide None if there is no last quoted date.\n\n# Futures metadata\n\n```py\nsymbol='CL-2017X'\ntick_size = norgatedata.tick_size(symbol)\n```\n\nProvides the current tick value (i.e. the change in value of one contract for a single tick that the futures contract moves.) for a given market.\n\n```py\nsymbol='CL-2017X'\npoint_value = norgatedata.point_value(symbol)\n```\n\nProvides the point value (i.e. the change in value of one contract for whole point that the futures contract moves.) for a given futures market.\n\n```py\nsymbol='CL-2017X'\nmargin = norgatedata.margin(symbol)\n```\n\nProvides the current margin for a given futures contract, futures market session symbol or futures market symbol.\n\n```py\nsymbol='CL-2017X'\nfirst_notice_date = norgatedata.first_notice_date(symbol)\nfirst_notice_date = norgatedata.first_notice_date(symbol,format = 'iso')\nfirst_notice_date = norgatedata.first_notice_date(symbol,format = 'pandas-timestamp')\nfirst_notice_date = norgatedata.first_notice_date(symbol,format = 'numpy-datetime64')\nfirst_notice_date = norgatedata.first_notice_date(symbol,format = 'datetime')\n```\n\nFor deliverable commodity contracts that permit delivery prior to the end of trading, this is the first date that delivery notices can be provided for a given futures contract.\nFor futures contracts that are not deliverable (or only deliverable at the end of trading) then None is provided.\n\n\n```py\nsymbol='CL-2017X'\nlowest_ever_tick_size = norgatedata.lowest_ever_tick_size(symbol)\n```\n\nProvides the lowest ever tick size for a given futures market.  \n\n```py\nsymbol='FDAX-2019Z'\nsessiontype = norgatedata.session_type(symbol)\n# Returns \"Electronic\"\n\nsymbol='FDAX9-2019Z'\nsessiontype = norgatedata.session_type(symbol)\n# Returns \"Day (Last)\"\n```\n\n```py\nmarket_symbol='CL'\nmarketname = futures_market_name(market_symbol)\n```\n\nProvides the name of the futures market\n\n```py\nsession_symbol='FDAX9'\nsession_name = futures_market_session_name(session_symbol)\n```\n\nProvides the name of the futures market session\n\n\nNote:  For all futures metadata the \"symbol\" can be individual futures contract, a continuous contract symbol, the futures market session symbol or the futures market symbol.  (e.g. FDAX9-2019Z, &FDAX9, FDAX9, FDAX respectively).  The only exception to this is any date-related metadata, which can only be performed on the individual futures contract.  \n\n\n\n\n# Fundamental data\n\n```py\nsymbol = 'GE'\n# A selection of field examples - many more are available\nfieldname = 'mktcap'\nfieldname = 'ttmepsxlcx'\nfieldname = 'peexclxor'\nfieldname = 'projepsq'\nfundavalue,fundadate = norgatedata.fundamental(symbol,fieldname)\nfundavalue,fundadate = norgatedata.fundamental(symbol,fieldname,format = 'iso')\nfundavalue,fundadate = norgatedata.fundamental(symbol,fieldname,format = 'pandas-timestamp')\nfundavalue,fundadate = norgatedata.fundamental(symbol,fieldname,format = 'numpy-datetime64')\nfundavalue,fundadate = norgatedata.fundamental(symbol,fieldname,format = 'datetime')\n\n```\n\nProvides the [current fundamentals](https://norgatedata.com/data-content-tables.php#current-fundamentals)\n\nReturns the field and the date applicable to the field (e.g. the last day of the quarter to which it applies, or for current ratios the most recent date of change).  By default, the date is provided as a string in YYYY-MM-DD format, but other date formats can be specified.\n\nReturns None,None if the fieldname is not available for that security.\n\n\n# Classifications\n\n```py\nschemename = 'NorgateDataFuturesClassification'\nschemename = 'TRBC'\nschemename = 'GICS'\nclassificationresulttype = 'ClassificationId'\nclassificationresulttype = 'Name'\nclassification = norgatedata.classification(\n    symbol,\n    schemename,\n    classificationresulttype,\n)\n```\n\nProvides the classification for a given security as a string.    Returns None if there is no classification available.\n\n```py\nschemename = 'TRBC'\nschemename = 'GICS'\nclassificationresulttype = 'ClassificationId'\nclassificationresulttype = 'Name'\nlevel = 1\nlevel = 4\nclassificationatlevel = norgatedata.classification_at_level(\n    symbol,\n    schemename,\n    classificationresulttype,\n    level,\n)\n```\n\nProvides the classification for a given security, at a given level of the classification scheme as a string.  Returns None if there is no classification available.\n\n\n```py\nsymbol='GE'\nindexfamilycode = '$SPX'\nindexfamilycode = '$SP1500'\nlevel = 3\nindexreturntype = 'PR'\nindexreturntype = 'TR'\nindexsymbol = norgatedata.corresponding_industry_index(\n    symbol,\n    indexfamilycode,\n    level,\n    indexreturntype,\n)\n```\n\nProvides the symbol of a corresponding index, at a given level of the classification scheme.  Returns None if there is no classification for the current symbol or no currently-trading index that matches.\n\n# Other informational functions\n\n* norgatedata.last_database_update_time(database) - returns a datetime object when information was updated for a given database, where database is the shortened form for each database.  Database names include au, aueto, auwarrant, auindex, ca, caindex, us, usindex, cashcommodity, economic, future, forex, contfuture, worldindex\n\n* norgatedata.last_price_update_time(symbol) datetime when price was last updated for the given symbol\n\n* norgatedata.status() - shows whether NDU is running (returns True if running, or False if not)\n\n# Accessing data by assetid instead of symbol\n\nInstead of using a security's symbol, you can obtain its unique Norgate-provided identity known as assetid.  This is an unchanging number and is therefore useful when storing positions/orders into data files where the symbol may change in the future.\n\nAll of the calls above that reference 'symbol' (as a string) can also take an assetid (as an integer).  For example, symbol MSFT = assetid 134016.  symbol AMZN = assetid 129769.\n\n# Error Handling\n\nIf an invalid symbol or invalid parameters are specified, then the ValueError exception will be raised.\n\nThe logger module will also output human-interpretable detail relating to the error.\n\nIf there is no data available (for example, a informational or fundamental field that is not reported for that company), then None is returned, except in the case where multiple values are expected eg. (None, None).\n\n# Multithreading / Multiprocessing compatibility\n\nThe norgatedata package is compatible with multithreading and multiprocessing libraries/packages, to take advantage of multiple CPU cores.  This can result in a significant reduction in runtime by running operations in parallel, depending upon workload.\n\n# Python Quant/Backtesting Package Integration\n\nAll of the routines developed in this module provide the data that can be used for backtesting/scanning of data.  There are many backtesting packages developed that use Python.  In this section, we provide more information about how to use with popular backtesting python packages with sample code and/or links to Norgate-developed integration packages.\n\n## [Zipline](https://zipline.io/) \n\nThe package: [zipline-norgatedata](https://pypi.org/project/zipline-norgatedata/) provides a tight integration between [Zipline](https://zipline.io/) and [Norgate Data](https://norgatedata.com/)\n\nKey Features\n\n* Survivorship bias-free bundles\n* Incorporates time series data such as historical index membership and dividend yield into Zipline's Pipeline mechanism\n* No modifications to the Zipline code base (except to fix problems with installation and obsolete calls that crash Zipline)\n* Simple bundle creation\n* Easy ingestion of equities data into Zipline with a simple list of symbols you want to incorporate and/or import your own symbol lists and/or use pre-built or user-created watchlists from Norgate Data\n* Easy ingestion of futures data into Zipline with a simple list of symbols you want to incorporate, futures market sessions you want to incorporate,  and/or use pre-built or user-created watchlists from Norgate Data\n\n## [Backtrader](https://www.backtrader.com/)\n\nTo create a \"data feed\" of a given symbol:\n\n```py\nimport backtrader as bt\nimport norgatedata\n\n# ... your code here ...\ncerebro = bt.Cerebro()  # create a \"Cerebro\" engine instance\n# ... your code here ...\n\n# Obtain a Pandas dataframe for a given security from Norgate Data\npriceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN \npadding_setting = norgatedata.PaddingType.NONE   \nsymbol = 'AAPL'\nstart_date = '2010-01-01'\ntimeseriesformat = 'pandas-dataframe'\npricedata_dataframe = norgatedata.price_timeseries(\n    symbol,\n    stock_price_adjustment_setting = priceadjust,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    format=timeseriesformat,\n)\n\n# Rename columns to suit Backtrader\npricedata_dataframe.rename(\n    columns={ 'Open':'open',  'High':'high', 'Low':'low', 'Close':'close', 'Volume':'volume', 'Open Interest':'open interest'},\n    inplace=True)\n\n# Backtrader can convert this dataframe into its own internal format with:\ndata = bt.feeds.PandasData(dataname=pricedata_dataframe)\ncerebro.adddata(data)  # Add the data feed\n# ... your code here ...\n\n```\n\n\n## [pybacktest](https://github.com/ematvey/pybacktest)\n\nIntegration with pybacktest just requires us to change the column headers in a Pandas dataframe.\n\nAfter installing pybacktest and norgatedata, we also need to install pandas_datareader:\n\n```sh\npip install pandas_datareader\n```\n\nHere's a sample piece of code that uses data from Norgate data.\n\n\n```py\nimport norgatedata\nimport pybacktest\nimport pandas\n\n# Obtain data from Norgate Data first, in Pandas dataframe format\npriceadjust = norgatedata.StockPriceAdjustmentType.TOTALRETURN \npadding_setting = norgatedata.PaddingType.NONE   \nsymbol = 'AAPL'\nstart_date = '2010-01-01'\ntimeseriesformat = 'pandas-dataframe'\nohlc = norgatedata.price_timeseries(\n    symbol,\n    stock_price_adjustment_setting = priceadjust,\n    padding_setting = padding_setting,\n    start_date = start_date,\n    format=timeseriesformat,\n)\n\n# Change column names\nohlc.rename(\n    columns={'Open':'O', 'High':'H', 'Low':'L', 'Close':'C', 'Volume':'V'},\n    inplace=True)\n\n# sample pybacktest code:\nms = ohlc.C.rolling(50).mean()\nml = ohlc.L.rolling(100).mean()\nbuy = cover = (ms > ml) & (ms.shift() < ml.shift())\nsell = short = (ms < ml) & (ms.shift() > ml.shift())\n\nbacktestresults = pybacktest.Backtest(locals())\n```\n\n## [Tensorflow](https://www.tensorflow.org)\n\nUse the convert_to_tensor() function to convert a Numpy Array for use with the [TensorFlow machine learning platform](https://www.tensorflow.org)\n\nAlso: [TF Quant Finance](https://github.com/google/tf-quant-finance)\n\n\n## [Keras](https://keras.io/)\n\nUse the tensorflow.keras.backend.variable() to convert a Numpy Array for use with the [Keras deep learning library](https://keras.io)\n\n\n\n## Future possible Python Quant/Backtesting/Machine Learning/Neural Network Integration\n\nHere is a list of Python packages that might be worthwhile examining to incoroporate our data.  Some of these might be abandonware too.  Let us know if there's more worthy of integration.\n\n* [AlephNull](https://github.com/CarterBain/AlephNull)\n* [alphatools](https://github.com/marketneutral/alphatools)\n* [AuquanToolbox](https://bitbucket.org/auquan/auquantoolbox/wiki/Home)\n* [backtesting](https://kernc.github.io/backtesting.py/)\n* [bt](http://pmorissette.github.io/bt/index.html)\n* [bulbea](https://github.com/achillesrasquinha/bulbea)\n* [DX Analytics](https://dx-analytics.com/)\n* [EliteQuant_Python](https://github.com/EliteQuant/EliteQuant_Python)\n* [empyrical](https://github.com/quantopian/empyrical)\n* [finmarketpy](https://github.com/cuemacro/finmarketpy) possibly by extending https://github.com/cuemacro/findatapy\n* [ibridgepy](http://www.ibridgepy.com/)\n* [Lean](https://github.com/QuantConnect/Lean)\n* [mfinlab](https://github.com/hudson-and-thames/mlfinlab)\n* [Pinkfish](http://fja05680.github.io/pinkfish/)\n* [presso](https://github.com/wynfred/presso)\n* [ProfitPy](https://code.google.com/archive/p/profitpy/)\n* [Prophet](https://github.com/Emsu/prophet)\n* [PyAlgoTrade](https://github.com/gbeced/pyalgotrade)\n* [Pyfolio](https://github.com/quantopian/pyfolio)\n* [PyThalesians](http://www.thalesians.com/finance/index.php/PyThalesians)\n* [pyti](https://github.com/kylejusticemagnuson/pyti)\n* [pyqstrat](https://pypi.org/project/pyqstrat/)\n* [pysystemtrade](https://github.com/robcarver17/pysystemtrade)\n* [QSForex](https://github.com/mhallsmoore/qsforex)\n* [QSTrader](https://github.com/mhallsmoore/qstrader/)\n* [QTPyLib](https://github.com/ranaroussi/qtpylib)\n* [quant](https://github.com/maihde/quant)\n* [QuantSoftware Toolkit](https://github.com/QuantSoftware/QuantSoftwareToolkit)\n* [Quantdom](https://github.com/constverum/Quantdom)\n* [Quantib](https://www.quantlib.org/)\n* [RQalpha](https://github.com/ricequant/rqalpha)\n* [stock_backtester](https://github.com/mtqwerty/stock_backtester)\n* [ta_backtest](https://github.com/benyblack/ta_backtest)\n* [TA-Lib](https://github.com/mrjbq7/ta-lib)\n* [talib](https://pypi.org/project/TA-Lib/)\n* [tia: Toolkit for integration and analysis](https://github.com/bpsmith/tia)\n* [Trading with Python](http://www.tradingwithpython.com/)\n* [Ultra-Finance](https://github.com/panpanpandas/ultrafinance)\n* [visualize-wealth](https://github.com/benjaminmgross/visualize-wealth)\n\n\n# Books/publications that use Zipline, adapted for Norgate Data use\n\nWe have adapted the Python code in the following books to use Norgate Data.  Let us know if you'd like a copy of the source code.\n\n[Trading Evolved:  Killer Trading Strategies for Python](https://www.followingthetrend.com/trading-evolved/)\n\nIf there are other publications worthwhile considering, let us know.\n\n\n# Support\n\n[Norgate Data support](https://norgatedata.com/contact.php)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://norgatedata.com", "keywords": "", "license": "EULA", "maintainer": "", "maintainer_email": "", "name": "norgatedata", "package_url": "https://pypi.org/project/norgatedata/", "platform": "", "project_url": "https://pypi.org/project/norgatedata/", "project_urls": {"Homepage": "https://norgatedata.com"}, "release_url": "https://pypi.org/project/norgatedata/1.0.36/", "requires_dist": ["pandas", "numpy", "requests", "logbook"], "requires_python": ">3.5.0", "summary": "Python interface to financial data provided by Norgate Data", "version": "1.0.36", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e9f89831be77d42c9321db5acded458f12dcffb/68747470733a2f2f6e6f7267617465646174612e636f6d2f6173736574732f696d616765732f6e6f72676174652d646174612d6c6f676f2d343030783138382e737667\"></p>\n<p>Python interface to financial market data provided by <a href=\"https://norgatedata.com\" rel=\"nofollow\">Norgate Data</a>.</p>\n<h1>Installation</h1>\n<pre>pip install norgatedata\n</pre>\n<h1>Upgrades</h1>\n<p>To receive upgrades/updates</p>\n<pre>pip install norgatedata --upgrade\n</pre>\n<h1>Requirements</h1>\n<ul>\n<li>Python 3.5 or above</li>\n<li>Microsoft Windows</li>\n<li>Either NumPy or Pandas</li>\n<li>Active <a href=\"https://norgatedata.com/\" rel=\"nofollow\">Norgate Data</a> subscription</li>\n<li>Writable local user folder named .norgatedata (or defined in environment variable NORGATEDATA_ROOT)</li>\n</ul>\n<h1>Usage</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">norgatedata</span>\n</pre>\n<h1>Timeseries data</h1>\n<h2>Price</h2>\n<p>Price data is provided in multiple formats: NumPy recarray, NumPy ndarray or Pandas DataFrame.  This is determined through the format parameter.  If not specified, the default is NumPy recarray.</p>\n<p>Dates are determined by passing in any (or none) of the following named parameters:</p>\n<pre><span class=\"c1\"># start_date and end_date can be provided as a string (YYYY-MM-DD or YYYYMMDD format), </span>\n<span class=\"c1\"># datetime, Pandas Timestamp, or NumPy datetime64.  All types work!</span>\n<span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"s1\">'1990-01-01'</span>   \n<span class=\"n\">end_date</span> <span class=\"o\">=</span> <span class=\"s1\">'2000-01-01'</span>   <span class=\"c1\"># If not specified, the end date is today</span>\n<span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>  <span class=\"c1\"># This provides the last X records</span>\n<span class=\"n\">interval</span> <span class=\"o\">=</span> <span class=\"s1\">'D'</span> <span class=\"c1\"># D=Daily, W=Weekly, M=Monthly - the date given is the last date of the interval </span>\n</pre>\n<p>Price &amp; Volume adjustment allows you to adjust historical stock prices and volumes to account for the effect of capital events and dividends.</p>\n<pre><span class=\"n\">priceadjust</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">StockPriceAdjustmentType</span><span class=\"o\">.</span><span class=\"n\">NONE</span>\n<span class=\"n\">priceadjust</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">StockPriceAdjustmentType</span><span class=\"o\">.</span><span class=\"n\">CAPITAL</span>\n<span class=\"n\">priceadjust</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">StockPriceAdjustmentType</span><span class=\"o\">.</span><span class=\"n\">CAPITALSPECIAL</span>\n<span class=\"n\">priceadjust</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">StockPriceAdjustmentType</span><span class=\"o\">.</span><span class=\"n\">TOTALRETURN</span> <span class=\"c1\"># Default</span>\n</pre>\n<p>Date padding allows you to repeat the prior close on days where no price record would otherwise exist.</p>\n<pre><span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">PaddingType</span><span class=\"o\">.</span><span class=\"n\">NONE</span>  <span class=\"c1\"># Default</span>\n<span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">PaddingType</span><span class=\"o\">.</span><span class=\"n\">ALLMARKETDAYS</span>\n<span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">PaddingType</span><span class=\"o\">.</span><span class=\"n\">ALLWEEKDAYS</span>\n<span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">PaddingType</span><span class=\"o\">.</span><span class=\"n\">ALLCALENDARDAYS</span>\n</pre>\n<p>Columns returned include Date, Open, High, Low, and Close.    For certain instruments, additional columns are provided where applicable including: Volume (Stocks, some Indices, some Indicators, Futures), Turnover (Stocks, some Indices, some Indicators), Unadjusted Close (Stocks), Dividend (Stocks), Open Interest (Futures, ASX Exchange Traded Options), Delivery Month (Continuous Futures).</p>\n<h3>Examples</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">norgatedata</span>\n<span class=\"n\">priceadjust</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">StockPriceAdjustmentType</span><span class=\"o\">.</span><span class=\"n\">TOTALRETURN</span> \n<span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">PaddingType</span><span class=\"o\">.</span><span class=\"n\">NONE</span>   \n<span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'AAPL'</span>\n<span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"s1\">'1990-01-01'</span>\n<span class=\"n\">timeseriesformat</span> <span class=\"o\">=</span> <span class=\"s1\">'numpy-recarray'</span>\n\n<span class=\"c1\"># Provides data on GOOG from 1990 until today in </span>\n<span class=\"c1\"># a NumPy recarray format, with explicitly set stock price </span>\n<span class=\"c1\"># adjustment and padding settings</span>\n<span class=\"n\">pricedata_recarray</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">stock_price_adjustment_setting</span> <span class=\"o\">=</span> <span class=\"n\">priceadjust</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Now in a Pandas-compatible format</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">timeseriesformat</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-dataframe'</span>\n<span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'1900-01-01'</span><span class=\"p\">)</span> <span class=\"c1\"># we can also provide dates as a Pandas Timestamp</span>\n<span class=\"n\">pricedata_dataframe</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">stock_price_adjustment_setting</span> <span class=\"o\">=</span> <span class=\"n\">priceadjust</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Weekly data instead</span>\n<span class=\"n\">timeseriesformat</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-dataframe'</span>\n<span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'1900-01-01'</span><span class=\"p\">)</span> <span class=\"c1\"># we can also provide dates as a Pandas Timestamp</span>\n<span class=\"n\">pricedata_dataframe</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">stock_price_adjustment_setting</span> <span class=\"o\">=</span> <span class=\"n\">priceadjust</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n    <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s1\">'W'</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Now in a Numpy Ndarray</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">timeseriesformat</span> <span class=\"o\">=</span> <span class=\"s1\">'numpy-ndarray'</span>\n<span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">(</span><span class=\"s1\">'1900-01-01'</span><span class=\"p\">)</span> <span class=\"c1\"># we can also provide dates as a Numpy datetime64</span>\n<span class=\"n\">pricedata_ndarray</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">stock_price_adjustment_setting</span> <span class=\"o\">=</span> <span class=\"n\">priceadjust</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Now limiting results to final 500 bars</span>\n<span class=\"n\">pricedata_dataframe</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">stock_price_adjustment_setting</span> <span class=\"o\">=</span> <span class=\"n\">priceadjust</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Now limiting results to a specific date range</span>\n<span class=\"n\">end_date</span><span class=\"o\">=</span><span class=\"s1\">'1999-12-31'</span>\n<span class=\"n\">pricedata_dataframe</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">stock_price_adjustment_setting</span> <span class=\"o\">=</span> <span class=\"n\">priceadjust</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"n\">end_date</span> <span class=\"o\">=</span> <span class=\"n\">end_date</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Now using a numerical unchanging assetid instead of a symbol</span>\n<span class=\"n\">timeseriesformat</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-dataframe'</span>\n<span class=\"n\">assetid</span> <span class=\"o\">=</span> <span class=\"mi\">136817</span>\n<span class=\"n\">pricedata_dataframe</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">assetid</span><span class=\"p\">,</span>\n    <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Datetime formats</h3>\n<p>By default, NumPy ndarray and recarray provides datetime64 formattted as '&lt;M8[D]' (daily dates) as timezone naive.  Pandas dataframes default to use datetime64 formattted as '[ns]' to match Pandas Timestamp, as timezone naive.</p>\n<p>These can be altered with the following parameters:</p>\n<pre><span class=\"n\">datetimeformat</span><span class=\"o\">=</span><span class=\"s1\">'&lt;desired format&gt;'</span>\n</pre>\n<p>allowed values are:</p>\n<ul>\n<li>'datetime' : Provides Python datetime.datetime objects</li>\n<li>'date' : Provides Python datetime.date objects</li>\n<li>'datetime64ns': Provides timezone-naive NumPy datetime64 in 'datetime64[ns]' format</li>\n<li>'datetime64ms': Provides timezone-naive NumPy 'datetime64[ms]' format</li>\n<li>'m8d': Provides timezone-naive NumPy datetime64 in '&lt;M8[D]' format</li>\n</ul>\n<pre><span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'&lt;desired timezone&gt;'</span>\n</pre>\n<p>This will allocate the dates into the timezone as shown. Times will still be shown as 00:00:00.\nAccepts a string with valid timezones such as 'UTC', 'US/Eastern' etc.</p>\n<h3>Dividend Notes</h3>\n<p>Dividends shown in the price_timeseries Dividend column depending on whether or not they have already been accounted for in the data by the \"Price Adjustment\" method.</p>\n<ul>\n<li>If the data is adjusted for capital reconstructions only, then the sum of both special and ordinary dividends for that day are shown.</li>\n<li>If the data is adjusted for capital reconstructions and special dividends, then only the sum of ordinary dividends for that day are shown.</li>\n<li>If the data is adjusted for capital reconstructions, special dividends and ordinary dividends, then no information is shown.</li>\n</ul>\n<p>Dividend/Distribution information is shown as of the day before the ex-date - i.e. if you are holding the security at the close, you will be entitled to the dividend/distribution.</p>\n<h3>Index Constituent</h3>\n<p>To determine whether a stock was an index constituent on a particular date, you can use the index constituent timeseries function.  You can also pass in an existing\nNumPy ndarray or Pandas Dataframe and a new column will be added and returned</p>\n<pre><span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'AAPL'</span>\n<span class=\"n\">indexname</span> <span class=\"o\">=</span> <span class=\"s1\">'Russell 3000'</span>\n<span class=\"n\">indexname</span> <span class=\"o\">=</span> <span class=\"s1\">'S&amp;P 500'</span>  <span class=\"c1\"># Can also be an index symbol, such as $SPX, $RUI etc.</span>\n\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">index_constituent_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">indexname</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"numpy-recarray\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">index_constituent_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">indexname</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"numpy-ndarray\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">index_constituent_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">indexname</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"pandas-dataframe\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">pricedata_recarray2</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">index_constituent_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">indexname</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">numpy_recarray</span> <span class=\"o\">=</span> <span class=\"n\">pricedata_recarray</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"numpy-recarray\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Major Exchange Listed</h3>\n<pre><span class=\"n\">majexch</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">major_exchange_listed_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"numpy-recarray\"</span><span class=\"p\">)</span>\n</pre>\n<p>Provides indication about US stocks on whether they are listed on a major exchange (e.g. NYSE, Nasdaq, NYSE American, NYSE Arca, Cboe BZX, IEX) (value = 1) or as an OTC/Pink Sheet stock (value = 0) for each trading date is available for all Equities and ETPs.</p>\n<p>Note:  Data is only available for this item from 2000 onwards.</p>\n<h3>Capital Event</h3>\n<pre><span class=\"n\">capevent</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">capital_event_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"numpy-recarray\"</span><span class=\"p\">)</span>\n</pre>\n<p>This indicator will show when a capital event occurred. Effective on holding the security at the close on the day prior to the ex-date. Events include splits, reverse splits, bonus issues, stock dividends (dividends paid as stock) and complex reorganizations of capital (value = 1, otherwise if there is no event, value = 0)</p>\n<h3>Dividend Yield</h3>\n<pre><span class=\"n\">divyield</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">dividend_yield_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"numpy-recarray\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This indicator uses a trailing 12 month sum of all split-adjusted ordinary dividends and is calculated daily against the close price. New dividends are incorporated on the entitlement date (the trading day prior to the ex-dividend date) after which the trailing 12 month sum of dividends is recalculated. Special dividends, distributions and spin-offs are not included. The lookback period is adaptive to take into account slight variations in ex-dividend dates from year-to-year.</p>\n<h3>Padding Status</h3>\n<pre><span class=\"n\">paddingstatus</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">padding_status_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"numpy-recarray\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This indicator will show when a price record has been padded in accordance with the Date Padding setting. If the Date Padding is set to \"No padding\" then this indicator will not return any values.</p>\n<h3>Unadjusted Close</h3>\n<p>This is not normally needed, as Unadjusted Close is provided in the price timeseries.<br>\nIt is provided here to be used as a helper routine for other Python libraries such\nas zipline-norgatedata.</p>\n<pre><span class=\"n\">unadjclose</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">unadjusted_close_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s2\">\"numpy-recarray\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>Watchlists</h1>\n<p>The symbols of a watchlist can be retrieved into a Python list using the watchlist_symbols function</p>\n<pre><span class=\"n\">watchlistname</span> <span class=\"o\">=</span> <span class=\"s1\">'S&amp;P 500'</span>\n<span class=\"n\">symbols</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">watchlist_symbols</span><span class=\"p\">(</span><span class=\"n\">watchlistname</span><span class=\"p\">)</span>\n\n<span class=\"n\">watchlistname</span> <span class=\"o\">=</span> <span class=\"s1\">'Russell 3000 Current &amp; Past'</span>\n<span class=\"n\">symbols</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">watchlist_symbols</span><span class=\"p\">(</span><span class=\"n\">watchlistname</span><span class=\"p\">)</span>\n</pre>\n<p>If you want the symbol, assetid and name of each security, use the watchlist function</p>\n<pre><span class=\"n\">wlcontents</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlistname</span><span class=\"p\">)</span>\n</pre>\n<p>To retrieve the names of all of the watchlists within Norgate Data's watchlist library, use  the watchlists function</p>\n<pre><span class=\"n\">allwatchlistnames</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">watchlists</span><span class=\"p\">()</span>\n</pre>\n<h1>Security metadata</h1>\n<pre><span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'AMZN'</span>\n<span class=\"n\">assetid</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">assetid</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides a unique unchanging ID generated by Norgate.</p>\n<pre><span class=\"n\">assetid</span> <span class=\"o\">=</span> <span class=\"mi\">129769</span> \n<span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">assetid</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Translates assetid to the current symbol.</p>\n<pre><span class=\"n\">domicile</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">domicile</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the country code for the domicile of the company.</p>\n<pre><span class=\"n\">currency</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">currency</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Currency that the security trades in.</p>\n<pre><span class=\"n\">exchange_name</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">exchange_name</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Short name of the exchange for the security (e.g. NYSE, Nasdaq, NYSE Arca, NYSE American, ASX etc.)</p>\n<pre><span class=\"n\">exchange_name_full</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">exchange_name_full</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides long name of the exchange (e.g. New York Stock Exchange, Australian Securities Exchange etc.)</p>\n<pre><span class=\"n\">security_name</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">security_name</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the name of the security.  e.g. GE would return General Electric Co Common.</p>\n<pre><span class=\"n\">base_type</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">base_type</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the base type of a security.    Values include Stock Market, Futures Market, Commodity Cash &amp; Forwards, Foreign Exchange, Economic.</p>\n<pre><span class=\"n\">subtype1</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">subtype1</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides subtype1 of the security.    Values include Equity, Hybrid, Derivative, Debt, Exchange Traded Product, Business Activity, Employment, Prices, Money, National Accounts, Index, Currency Cross, Bullion Cross, Cryptocurrency.</p>\n<pre><span class=\"n\">subtype2</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">subtype2</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides subtype2 of the security. Values include Operating/Holding Company, Investment Company, Special Purpose Company, Exchange Traded Note, Structured Product, Exchange Traded Fund, Exchange Traded Managed Fund, Third Party Trust Preferred, Corporate Unit, Convertible Corporate Unit, Convertible Preferred, Preferred, Convertible Debt, Exchange Traded Option, Right, Company Option, Warrant, Senior Debt, Junior Debt, Coin, Token.</p>\n<pre><span class=\"n\">subtype3</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">subtype3</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides subtype3 of the security.   Values include Master Limited Partnership, Royalty Trust, Infrastructure Fund, Closed End Fund, Other Listed Managed Investment, Business Development Company/Pooled Development Fund, Other Listed Investment Vehicle, Absolute Return Fund, Equity Unit, Right, Contingent Value Right, Litigation Trust, Liquidation Trust, Special Purpose Acquisition Company.</p>\n<pre><span class=\"n\">financial_summary</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">financial_summary</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides a few paragraphs summarising the current financial status of the company.</p>\n<pre><span class=\"n\">business_summary</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">business_summary</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides a few paragraphs summarising the operations of the company.</p>\n<pre><span class=\"n\">first_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n<span class=\"n\">first_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n<span class=\"n\">first_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-timestamp'</span><span class=\"p\">)</span>\n<span class=\"n\">first_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'numpy-datetime64'</span><span class=\"p\">)</span>\n<span class=\"n\">first_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'datetime'</span><span class=\"p\">)</span>\n</pre>\n<p>Provides a date for the first day the security traded.By default the format is an ISO string (YYYY-MM-DD), but you can also specify other formats too.</p>\n<pre><span class=\"n\">last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n<span class=\"n\">last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n<span class=\"n\">last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-timestamp'</span><span class=\"p\">)</span>\n<span class=\"n\">last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'numpy-datetime64'</span><span class=\"p\">)</span>\n<span class=\"n\">last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'datetime'</span><span class=\"p\">)</span>\n</pre>\n<p>Provides a date for the last day of trading that have a finite lifespan (such as futures).  For delisted instruments, this provides the final day of trading.  By default the format is an ISO string (YYYY-MM-DD), but you can also specify other formats too.\nWill provide None if there is no last quoted date.</p>\n<pre><span class=\"n\">second_last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">second_last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n<span class=\"n\">second_last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">second_last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n<span class=\"n\">second_last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">second_last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-timestamp'</span><span class=\"p\">)</span>\n<span class=\"n\">second_last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">second_last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'numpy-datetime64'</span><span class=\"p\">)</span>\n<span class=\"n\">second_last_quoted_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">second_last_quoted_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'datetime'</span><span class=\"p\">)</span>\n</pre>\n<p>Provides a date for the second last day of trading that have a finite lifespan (such as futures).  For delisted instruments, this provides the trading day prior to the last quoted day.\nWill provide None if there is no last quoted date.</p>\n<h1>Futures metadata</h1>\n<pre><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'CL-2017X'</span>\n<span class=\"n\">tick_size</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">tick_size</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the current tick value (i.e. the change in value of one contract for a single tick that the futures contract moves.) for a given market.</p>\n<pre><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'CL-2017X'</span>\n<span class=\"n\">point_value</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">point_value</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the point value (i.e. the change in value of one contract for whole point that the futures contract moves.) for a given futures market.</p>\n<pre><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'CL-2017X'</span>\n<span class=\"n\">margin</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">margin</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the current margin for a given futures contract, futures market session symbol or futures market symbol.</p>\n<pre><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'CL-2017X'</span>\n<span class=\"n\">first_notice_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_notice_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n<span class=\"n\">first_notice_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_notice_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n<span class=\"n\">first_notice_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_notice_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-timestamp'</span><span class=\"p\">)</span>\n<span class=\"n\">first_notice_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_notice_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'numpy-datetime64'</span><span class=\"p\">)</span>\n<span class=\"n\">first_notice_date</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">first_notice_date</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'datetime'</span><span class=\"p\">)</span>\n</pre>\n<p>For deliverable commodity contracts that permit delivery prior to the end of trading, this is the first date that delivery notices can be provided for a given futures contract.\nFor futures contracts that are not deliverable (or only deliverable at the end of trading) then None is provided.</p>\n<pre><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'CL-2017X'</span>\n<span class=\"n\">lowest_ever_tick_size</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">lowest_ever_tick_size</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the lowest ever tick size for a given futures market.</p>\n<pre><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'FDAX-2019Z'</span>\n<span class=\"n\">sessiontype</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">session_type</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n<span class=\"c1\"># Returns \"Electronic\"</span>\n\n<span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'FDAX9-2019Z'</span>\n<span class=\"n\">sessiontype</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">session_type</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n<span class=\"c1\"># Returns \"Day (Last)\"</span>\n</pre>\n<pre><span class=\"n\">market_symbol</span><span class=\"o\">=</span><span class=\"s1\">'CL'</span>\n<span class=\"n\">marketname</span> <span class=\"o\">=</span> <span class=\"n\">futures_market_name</span><span class=\"p\">(</span><span class=\"n\">market_symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the name of the futures market</p>\n<pre><span class=\"n\">session_symbol</span><span class=\"o\">=</span><span class=\"s1\">'FDAX9'</span>\n<span class=\"n\">session_name</span> <span class=\"o\">=</span> <span class=\"n\">futures_market_session_name</span><span class=\"p\">(</span><span class=\"n\">session_symbol</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the name of the futures market session</p>\n<p>Note:  For all futures metadata the \"symbol\" can be individual futures contract, a continuous contract symbol, the futures market session symbol or the futures market symbol.  (e.g. FDAX9-2019Z, &amp;FDAX9, FDAX9, FDAX respectively).  The only exception to this is any date-related metadata, which can only be performed on the individual futures contract.</p>\n<h1>Fundamental data</h1>\n<pre><span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'GE'</span>\n<span class=\"c1\"># A selection of field examples - many more are available</span>\n<span class=\"n\">fieldname</span> <span class=\"o\">=</span> <span class=\"s1\">'mktcap'</span>\n<span class=\"n\">fieldname</span> <span class=\"o\">=</span> <span class=\"s1\">'ttmepsxlcx'</span>\n<span class=\"n\">fieldname</span> <span class=\"o\">=</span> <span class=\"s1\">'peexclxor'</span>\n<span class=\"n\">fieldname</span> <span class=\"o\">=</span> <span class=\"s1\">'projepsq'</span>\n<span class=\"n\">fundavalue</span><span class=\"p\">,</span><span class=\"n\">fundadate</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">fundamental</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"n\">fieldname</span><span class=\"p\">)</span>\n<span class=\"n\">fundavalue</span><span class=\"p\">,</span><span class=\"n\">fundadate</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">fundamental</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"n\">fieldname</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'iso'</span><span class=\"p\">)</span>\n<span class=\"n\">fundavalue</span><span class=\"p\">,</span><span class=\"n\">fundadate</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">fundamental</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"n\">fieldname</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-timestamp'</span><span class=\"p\">)</span>\n<span class=\"n\">fundavalue</span><span class=\"p\">,</span><span class=\"n\">fundadate</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">fundamental</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"n\">fieldname</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'numpy-datetime64'</span><span class=\"p\">)</span>\n<span class=\"n\">fundavalue</span><span class=\"p\">,</span><span class=\"n\">fundadate</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">fundamental</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"n\">fieldname</span><span class=\"p\">,</span><span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'datetime'</span><span class=\"p\">)</span>\n</pre>\n<p>Provides the <a href=\"https://norgatedata.com/data-content-tables.php#current-fundamentals\" rel=\"nofollow\">current fundamentals</a></p>\n<p>Returns the field and the date applicable to the field (e.g. the last day of the quarter to which it applies, or for current ratios the most recent date of change).  By default, the date is provided as a string in YYYY-MM-DD format, but other date formats can be specified.</p>\n<p>Returns None,None if the fieldname is not available for that security.</p>\n<h1>Classifications</h1>\n<pre><span class=\"n\">schemename</span> <span class=\"o\">=</span> <span class=\"s1\">'NorgateDataFuturesClassification'</span>\n<span class=\"n\">schemename</span> <span class=\"o\">=</span> <span class=\"s1\">'TRBC'</span>\n<span class=\"n\">schemename</span> <span class=\"o\">=</span> <span class=\"s1\">'GICS'</span>\n<span class=\"n\">classificationresulttype</span> <span class=\"o\">=</span> <span class=\"s1\">'ClassificationId'</span>\n<span class=\"n\">classificationresulttype</span> <span class=\"o\">=</span> <span class=\"s1\">'Name'</span>\n<span class=\"n\">classification</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">classification</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">schemename</span><span class=\"p\">,</span>\n    <span class=\"n\">classificationresulttype</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Provides the classification for a given security as a string.    Returns None if there is no classification available.</p>\n<pre><span class=\"n\">schemename</span> <span class=\"o\">=</span> <span class=\"s1\">'TRBC'</span>\n<span class=\"n\">schemename</span> <span class=\"o\">=</span> <span class=\"s1\">'GICS'</span>\n<span class=\"n\">classificationresulttype</span> <span class=\"o\">=</span> <span class=\"s1\">'ClassificationId'</span>\n<span class=\"n\">classificationresulttype</span> <span class=\"o\">=</span> <span class=\"s1\">'Name'</span>\n<span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">classificationatlevel</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">classification_at_level</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">schemename</span><span class=\"p\">,</span>\n    <span class=\"n\">classificationresulttype</span><span class=\"p\">,</span>\n    <span class=\"n\">level</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Provides the classification for a given security, at a given level of the classification scheme as a string.  Returns None if there is no classification available.</p>\n<pre><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'GE'</span>\n<span class=\"n\">indexfamilycode</span> <span class=\"o\">=</span> <span class=\"s1\">'$SPX'</span>\n<span class=\"n\">indexfamilycode</span> <span class=\"o\">=</span> <span class=\"s1\">'$SP1500'</span>\n<span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">indexreturntype</span> <span class=\"o\">=</span> <span class=\"s1\">'PR'</span>\n<span class=\"n\">indexreturntype</span> <span class=\"o\">=</span> <span class=\"s1\">'TR'</span>\n<span class=\"n\">indexsymbol</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">corresponding_industry_index</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">indexfamilycode</span><span class=\"p\">,</span>\n    <span class=\"n\">level</span><span class=\"p\">,</span>\n    <span class=\"n\">indexreturntype</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Provides the symbol of a corresponding index, at a given level of the classification scheme.  Returns None if there is no classification for the current symbol or no currently-trading index that matches.</p>\n<h1>Other informational functions</h1>\n<ul>\n<li>\n<p>norgatedata.last_database_update_time(database) - returns a datetime object when information was updated for a given database, where database is the shortened form for each database.  Database names include au, aueto, auwarrant, auindex, ca, caindex, us, usindex, cashcommodity, economic, future, forex, contfuture, worldindex</p>\n</li>\n<li>\n<p>norgatedata.last_price_update_time(symbol) datetime when price was last updated for the given symbol</p>\n</li>\n<li>\n<p>norgatedata.status() - shows whether NDU is running (returns True if running, or False if not)</p>\n</li>\n</ul>\n<h1>Accessing data by assetid instead of symbol</h1>\n<p>Instead of using a security's symbol, you can obtain its unique Norgate-provided identity known as assetid.  This is an unchanging number and is therefore useful when storing positions/orders into data files where the symbol may change in the future.</p>\n<p>All of the calls above that reference 'symbol' (as a string) can also take an assetid (as an integer).  For example, symbol MSFT = assetid 134016.  symbol AMZN = assetid 129769.</p>\n<h1>Error Handling</h1>\n<p>If an invalid symbol or invalid parameters are specified, then the ValueError exception will be raised.</p>\n<p>The logger module will also output human-interpretable detail relating to the error.</p>\n<p>If there is no data available (for example, a informational or fundamental field that is not reported for that company), then None is returned, except in the case where multiple values are expected eg. (None, None).</p>\n<h1>Multithreading / Multiprocessing compatibility</h1>\n<p>The norgatedata package is compatible with multithreading and multiprocessing libraries/packages, to take advantage of multiple CPU cores.  This can result in a significant reduction in runtime by running operations in parallel, depending upon workload.</p>\n<h1>Python Quant/Backtesting Package Integration</h1>\n<p>All of the routines developed in this module provide the data that can be used for backtesting/scanning of data.  There are many backtesting packages developed that use Python.  In this section, we provide more information about how to use with popular backtesting python packages with sample code and/or links to Norgate-developed integration packages.</p>\n<h2><a href=\"https://zipline.io/\" rel=\"nofollow\">Zipline</a></h2>\n<p>The package: <a href=\"https://pypi.org/project/zipline-norgatedata/\" rel=\"nofollow\">zipline-norgatedata</a> provides a tight integration between <a href=\"https://zipline.io/\" rel=\"nofollow\">Zipline</a> and <a href=\"https://norgatedata.com/\" rel=\"nofollow\">Norgate Data</a></p>\n<p>Key Features</p>\n<ul>\n<li>Survivorship bias-free bundles</li>\n<li>Incorporates time series data such as historical index membership and dividend yield into Zipline's Pipeline mechanism</li>\n<li>No modifications to the Zipline code base (except to fix problems with installation and obsolete calls that crash Zipline)</li>\n<li>Simple bundle creation</li>\n<li>Easy ingestion of equities data into Zipline with a simple list of symbols you want to incorporate and/or import your own symbol lists and/or use pre-built or user-created watchlists from Norgate Data</li>\n<li>Easy ingestion of futures data into Zipline with a simple list of symbols you want to incorporate, futures market sessions you want to incorporate,  and/or use pre-built or user-created watchlists from Norgate Data</li>\n</ul>\n<h2><a href=\"https://www.backtrader.com/\" rel=\"nofollow\">Backtrader</a></h2>\n<p>To create a \"data feed\" of a given symbol:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">backtrader</span> <span class=\"k\">as</span> <span class=\"nn\">bt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">norgatedata</span>\n\n<span class=\"c1\"># ... your code here ...</span>\n<span class=\"n\">cerebro</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">Cerebro</span><span class=\"p\">()</span>  <span class=\"c1\"># create a \"Cerebro\" engine instance</span>\n<span class=\"c1\"># ... your code here ...</span>\n\n<span class=\"c1\"># Obtain a Pandas dataframe for a given security from Norgate Data</span>\n<span class=\"n\">priceadjust</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">StockPriceAdjustmentType</span><span class=\"o\">.</span><span class=\"n\">TOTALRETURN</span> \n<span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">PaddingType</span><span class=\"o\">.</span><span class=\"n\">NONE</span>   \n<span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'AAPL'</span>\n<span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"s1\">'2010-01-01'</span>\n<span class=\"n\">timeseriesformat</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-dataframe'</span>\n<span class=\"n\">pricedata_dataframe</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">stock_price_adjustment_setting</span> <span class=\"o\">=</span> <span class=\"n\">priceadjust</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Rename columns to suit Backtrader</span>\n<span class=\"n\">pricedata_dataframe</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span>\n    <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"s1\">'Open'</span><span class=\"p\">:</span><span class=\"s1\">'open'</span><span class=\"p\">,</span>  <span class=\"s1\">'High'</span><span class=\"p\">:</span><span class=\"s1\">'high'</span><span class=\"p\">,</span> <span class=\"s1\">'Low'</span><span class=\"p\">:</span><span class=\"s1\">'low'</span><span class=\"p\">,</span> <span class=\"s1\">'Close'</span><span class=\"p\">:</span><span class=\"s1\">'close'</span><span class=\"p\">,</span> <span class=\"s1\">'Volume'</span><span class=\"p\">:</span><span class=\"s1\">'volume'</span><span class=\"p\">,</span> <span class=\"s1\">'Open Interest'</span><span class=\"p\">:</span><span class=\"s1\">'open interest'</span><span class=\"p\">},</span>\n    <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Backtrader can convert this dataframe into its own internal format with:</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">feeds</span><span class=\"o\">.</span><span class=\"n\">PandasData</span><span class=\"p\">(</span><span class=\"n\">dataname</span><span class=\"o\">=</span><span class=\"n\">pricedata_dataframe</span><span class=\"p\">)</span>\n<span class=\"n\">cerebro</span><span class=\"o\">.</span><span class=\"n\">adddata</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># Add the data feed</span>\n<span class=\"c1\"># ... your code here ...</span>\n</pre>\n<h2><a href=\"https://github.com/ematvey/pybacktest\" rel=\"nofollow\">pybacktest</a></h2>\n<p>Integration with pybacktest just requires us to change the column headers in a Pandas dataframe.</p>\n<p>After installing pybacktest and norgatedata, we also need to install pandas_datareader:</p>\n<pre>pip install pandas_datareader\n</pre>\n<p>Here's a sample piece of code that uses data from Norgate data.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">norgatedata</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pybacktest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span>\n\n<span class=\"c1\"># Obtain data from Norgate Data first, in Pandas dataframe format</span>\n<span class=\"n\">priceadjust</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">StockPriceAdjustmentType</span><span class=\"o\">.</span><span class=\"n\">TOTALRETURN</span> \n<span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">PaddingType</span><span class=\"o\">.</span><span class=\"n\">NONE</span>   \n<span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'AAPL'</span>\n<span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"s1\">'2010-01-01'</span>\n<span class=\"n\">timeseriesformat</span> <span class=\"o\">=</span> <span class=\"s1\">'pandas-dataframe'</span>\n<span class=\"n\">ohlc</span> <span class=\"o\">=</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">price_timeseries</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"p\">,</span>\n    <span class=\"n\">stock_price_adjustment_setting</span> <span class=\"o\">=</span> <span class=\"n\">priceadjust</span><span class=\"p\">,</span>\n    <span class=\"n\">padding_setting</span> <span class=\"o\">=</span> <span class=\"n\">padding_setting</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">start_date</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">timeseriesformat</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Change column names</span>\n<span class=\"n\">ohlc</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span>\n    <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Open'</span><span class=\"p\">:</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'High'</span><span class=\"p\">:</span><span class=\"s1\">'H'</span><span class=\"p\">,</span> <span class=\"s1\">'Low'</span><span class=\"p\">:</span><span class=\"s1\">'L'</span><span class=\"p\">,</span> <span class=\"s1\">'Close'</span><span class=\"p\">:</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'Volume'</span><span class=\"p\">:</span><span class=\"s1\">'V'</span><span class=\"p\">},</span>\n    <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sample pybacktest code:</span>\n<span class=\"n\">ms</span> <span class=\"o\">=</span> <span class=\"n\">ohlc</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">rolling</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"n\">ml</span> <span class=\"o\">=</span> <span class=\"n\">ohlc</span><span class=\"o\">.</span><span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">rolling</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"n\">buy</span> <span class=\"o\">=</span> <span class=\"n\">cover</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ms</span> <span class=\"o\">&gt;</span> <span class=\"n\">ml</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">ms</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">())</span>\n<span class=\"n\">sell</span> <span class=\"o\">=</span> <span class=\"n\">short</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ms</span> <span class=\"o\">&lt;</span> <span class=\"n\">ml</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">ms</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">())</span>\n\n<span class=\"n\">backtestresults</span> <span class=\"o\">=</span> <span class=\"n\">pybacktest</span><span class=\"o\">.</span><span class=\"n\">Backtest</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">())</span>\n</pre>\n<h2><a href=\"https://www.tensorflow.org\" rel=\"nofollow\">Tensorflow</a></h2>\n<p>Use the convert_to_tensor() function to convert a Numpy Array for use with the <a href=\"https://www.tensorflow.org\" rel=\"nofollow\">TensorFlow machine learning platform</a></p>\n<p>Also: <a href=\"https://github.com/google/tf-quant-finance\" rel=\"nofollow\">TF Quant Finance</a></p>\n<h2><a href=\"https://keras.io/\" rel=\"nofollow\">Keras</a></h2>\n<p>Use the tensorflow.keras.backend.variable() to convert a Numpy Array for use with the <a href=\"https://keras.io\" rel=\"nofollow\">Keras deep learning library</a></p>\n<h2>Future possible Python Quant/Backtesting/Machine Learning/Neural Network Integration</h2>\n<p>Here is a list of Python packages that might be worthwhile examining to incoroporate our data.  Some of these might be abandonware too.  Let us know if there's more worthy of integration.</p>\n<ul>\n<li><a href=\"https://github.com/CarterBain/AlephNull\" rel=\"nofollow\">AlephNull</a></li>\n<li><a href=\"https://github.com/marketneutral/alphatools\" rel=\"nofollow\">alphatools</a></li>\n<li><a href=\"https://bitbucket.org/auquan/auquantoolbox/wiki/Home\" rel=\"nofollow\">AuquanToolbox</a></li>\n<li><a href=\"https://kernc.github.io/backtesting.py/\" rel=\"nofollow\">backtesting</a></li>\n<li><a href=\"http://pmorissette.github.io/bt/index.html\" rel=\"nofollow\">bt</a></li>\n<li><a href=\"https://github.com/achillesrasquinha/bulbea\" rel=\"nofollow\">bulbea</a></li>\n<li><a href=\"https://dx-analytics.com/\" rel=\"nofollow\">DX Analytics</a></li>\n<li><a href=\"https://github.com/EliteQuant/EliteQuant_Python\" rel=\"nofollow\">EliteQuant_Python</a></li>\n<li><a href=\"https://github.com/quantopian/empyrical\" rel=\"nofollow\">empyrical</a></li>\n<li><a href=\"https://github.com/cuemacro/finmarketpy\" rel=\"nofollow\">finmarketpy</a> possibly by extending <a href=\"https://github.com/cuemacro/findatapy\" rel=\"nofollow\">https://github.com/cuemacro/findatapy</a></li>\n<li><a href=\"http://www.ibridgepy.com/\" rel=\"nofollow\">ibridgepy</a></li>\n<li><a href=\"https://github.com/QuantConnect/Lean\" rel=\"nofollow\">Lean</a></li>\n<li><a href=\"https://github.com/hudson-and-thames/mlfinlab\" rel=\"nofollow\">mfinlab</a></li>\n<li><a href=\"http://fja05680.github.io/pinkfish/\" rel=\"nofollow\">Pinkfish</a></li>\n<li><a href=\"https://github.com/wynfred/presso\" rel=\"nofollow\">presso</a></li>\n<li><a href=\"https://code.google.com/archive/p/profitpy/\" rel=\"nofollow\">ProfitPy</a></li>\n<li><a href=\"https://github.com/Emsu/prophet\" rel=\"nofollow\">Prophet</a></li>\n<li><a href=\"https://github.com/gbeced/pyalgotrade\" rel=\"nofollow\">PyAlgoTrade</a></li>\n<li><a href=\"https://github.com/quantopian/pyfolio\" rel=\"nofollow\">Pyfolio</a></li>\n<li><a href=\"http://www.thalesians.com/finance/index.php/PyThalesians\" rel=\"nofollow\">PyThalesians</a></li>\n<li><a href=\"https://github.com/kylejusticemagnuson/pyti\" rel=\"nofollow\">pyti</a></li>\n<li><a href=\"https://pypi.org/project/pyqstrat/\" rel=\"nofollow\">pyqstrat</a></li>\n<li><a href=\"https://github.com/robcarver17/pysystemtrade\" rel=\"nofollow\">pysystemtrade</a></li>\n<li><a href=\"https://github.com/mhallsmoore/qsforex\" rel=\"nofollow\">QSForex</a></li>\n<li><a href=\"https://github.com/mhallsmoore/qstrader/\" rel=\"nofollow\">QSTrader</a></li>\n<li><a href=\"https://github.com/ranaroussi/qtpylib\" rel=\"nofollow\">QTPyLib</a></li>\n<li><a href=\"https://github.com/maihde/quant\" rel=\"nofollow\">quant</a></li>\n<li><a href=\"https://github.com/QuantSoftware/QuantSoftwareToolkit\" rel=\"nofollow\">QuantSoftware Toolkit</a></li>\n<li><a href=\"https://github.com/constverum/Quantdom\" rel=\"nofollow\">Quantdom</a></li>\n<li><a href=\"https://www.quantlib.org/\" rel=\"nofollow\">Quantib</a></li>\n<li><a href=\"https://github.com/ricequant/rqalpha\" rel=\"nofollow\">RQalpha</a></li>\n<li><a href=\"https://github.com/mtqwerty/stock_backtester\" rel=\"nofollow\">stock_backtester</a></li>\n<li><a href=\"https://github.com/benyblack/ta_backtest\" rel=\"nofollow\">ta_backtest</a></li>\n<li><a href=\"https://github.com/mrjbq7/ta-lib\" rel=\"nofollow\">TA-Lib</a></li>\n<li><a href=\"https://pypi.org/project/TA-Lib/\" rel=\"nofollow\">talib</a></li>\n<li><a href=\"https://github.com/bpsmith/tia\" rel=\"nofollow\">tia: Toolkit for integration and analysis</a></li>\n<li><a href=\"http://www.tradingwithpython.com/\" rel=\"nofollow\">Trading with Python</a></li>\n<li><a href=\"https://github.com/panpanpandas/ultrafinance\" rel=\"nofollow\">Ultra-Finance</a></li>\n<li><a href=\"https://github.com/benjaminmgross/visualize-wealth\" rel=\"nofollow\">visualize-wealth</a></li>\n</ul>\n<h1>Books/publications that use Zipline, adapted for Norgate Data use</h1>\n<p>We have adapted the Python code in the following books to use Norgate Data.  Let us know if you'd like a copy of the source code.</p>\n<p><a href=\"https://www.followingthetrend.com/trading-evolved/\" rel=\"nofollow\">Trading Evolved:  Killer Trading Strategies for Python</a></p>\n<p>If there are other publications worthwhile considering, let us know.</p>\n<h1>Support</h1>\n<p><a href=\"https://norgatedata.com/contact.php\" rel=\"nofollow\">Norgate Data support</a></p>\n\n          </div>"}, "last_serial": 7002631, "releases": {"0.1.48": [{"comment_text": "", "digests": {"md5": "9de3176ed00f4773850aa6044a18b839", "sha256": "7e518b24d35804a8568ed2c79ae015714826d9eb16f516e6766887795d92967e"}, "downloads": -1, "filename": "norgatedata-0.1.48-py3-none-any.whl", "has_sig": false, "md5_digest": "9de3176ed00f4773850aa6044a18b839", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 10376, "upload_time": "2019-07-19T04:32:10", "upload_time_iso_8601": "2019-07-19T04:32:10.599810Z", "url": "https://files.pythonhosted.org/packages/9b/45/11da908190097195a916b48e1852497f557afd5df6a58a690e7d34665818/norgatedata-0.1.48-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ff2213d0df8560c653875239d0092ae3", "sha256": "8d39cd1feed27e742b1065aa95e8ea2cd39a96f6424f1405fd48d3e7f6a9e615"}, "downloads": -1, "filename": "norgatedata-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ff2213d0df8560c653875239d0092ae3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 11414, "upload_time": "2019-07-28T11:32:53", "upload_time_iso_8601": "2019-07-28T11:32:53.083422Z", "url": "https://files.pythonhosted.org/packages/7e/dc/c210b07231a7515adec8dee6cb63d8b8d22fd138c9796369fa89ba72c964/norgatedata-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "052fb6b5fd7b8145d183dffbb18c9e98", "sha256": "0b8b813f5ee357f4be084be322f18940d3f81e262f8fc1a246bc5d90d8a55e6b"}, "downloads": -1, "filename": "norgatedata-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "052fb6b5fd7b8145d183dffbb18c9e98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 11891, "upload_time": "2019-08-08T01:55:53", "upload_time_iso_8601": "2019-08-08T01:55:53.542153Z", "url": "https://files.pythonhosted.org/packages/cd/42/f9222987a6601f11f9de12cfd6599c901b48664fd6872e05fd3d28b3cf21/norgatedata-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "10e962ff46a542cca56d6441fa2b768b", "sha256": "84fa28bfb3e8b05d8a40b2adbe60efa35771b4746a3a00fc0cb329f96c173c71"}, "downloads": -1, "filename": "norgatedata-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "10e962ff46a542cca56d6441fa2b768b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 11928, "upload_time": "2019-08-08T03:42:24", "upload_time_iso_8601": "2019-08-08T03:42:24.531755Z", "url": "https://files.pythonhosted.org/packages/ab/87/22915a07f4369ceadcaaff0e464a81413f38da322b620a36a8bb4d671173/norgatedata-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "7a1b30f23b6bc22755967c09ab860362", "sha256": "dd9f47c1ba0244400d633a33f8a7420015a57ed803e89ae966d1b80e95e04dcd"}, "downloads": -1, "filename": "norgatedata-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7a1b30f23b6bc22755967c09ab860362", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 11934, "upload_time": "2019-08-08T03:52:32", "upload_time_iso_8601": "2019-08-08T03:52:32.929617Z", "url": "https://files.pythonhosted.org/packages/7c/96/e8b9ed523c71be52ec420f811a09cd74647f017ccce3665d126e6e835e8d/norgatedata-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "ce0809690342e6293ec240273893aa12", "sha256": "8b277eb5df71d3fcf801f1d5f4950012ab2efc445036cf4bbe89a5603a196f38"}, "downloads": -1, "filename": "norgatedata-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ce0809690342e6293ec240273893aa12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 11935, "upload_time": "2019-08-08T03:57:30", "upload_time_iso_8601": "2019-08-08T03:57:30.300228Z", "url": "https://files.pythonhosted.org/packages/87/f3/bbeeb901966dedead539d5b75fdee99a11f0db15d5f73d4773a0eb509bfa/norgatedata-0.2.4-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2a6ab74f4f22ccd0d51d87c20906ef1e", "sha256": "47bc901b898ef6a236a6ca33302e0f961364d5ca5efaf784c2ef31dc85a855ef"}, "downloads": -1, "filename": "norgatedata-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2a6ab74f4f22ccd0d51d87c20906ef1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 11933, "upload_time": "2019-08-08T23:05:57", "upload_time_iso_8601": "2019-08-08T23:05:57.603271Z", "url": "https://files.pythonhosted.org/packages/95/0a/d6651cb35f04f74c74531c743714e01ea7f7bb238549693287dea51ce300/norgatedata-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6044a3ca7497da7c4b3c82328713685c", "sha256": "c837912224b2dd8d2fde9e167a9bc0dfcc91dd183454d6d80978c846bb51e4fb"}, "downloads": -1, "filename": "norgatedata-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6044a3ca7497da7c4b3c82328713685c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 11945, "upload_time": "2019-08-15T11:15:23", "upload_time_iso_8601": "2019-08-15T11:15:23.520071Z", "url": "https://files.pythonhosted.org/packages/1a/d2/314df3fc046de47e3dcba181c77180cb6fbc5f7c7af63265dbdfab71a7c8/norgatedata-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "b816f782a7859a479bc87a030267374c", "sha256": "0f5423cb1066fa4046c47c7e5c08c9438e6a1b558b1b805e4af88bdc6a123583"}, "downloads": -1, "filename": "norgatedata-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "b816f782a7859a479bc87a030267374c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21093, "upload_time": "2019-09-21T01:02:45", "upload_time_iso_8601": "2019-09-21T01:02:45.341809Z", "url": "https://files.pythonhosted.org/packages/0e/06/2f021e0ffb12a3dca6f8f990e1be5c37368389794171f29f4a7a84e9a19f/norgatedata-1.0.10-py3-none-any.whl", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "1feb8be2b4f7e12abd3591ad3bfc968c", "sha256": "3a44f519b51a0cc9329cb1001771633a0c76eada48bf33a33dbbd931bfee3a1f"}, "downloads": -1, "filename": "norgatedata-1.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "1feb8be2b4f7e12abd3591ad3bfc968c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21656, "upload_time": "2019-09-25T11:23:08", "upload_time_iso_8601": "2019-09-25T11:23:08.057858Z", "url": "https://files.pythonhosted.org/packages/b5/1e/b376946d10e9c4b821fa4233e2f57a92564e92e0c1fabe55c904c8b3d438/norgatedata-1.0.11-py3-none-any.whl", "yanked": false}], "1.0.12": [{"comment_text": "", "digests": {"md5": "32ec84f0aad9bd7a8d2c0b4acb25586d", "sha256": "4445b61c310e361fdb2c69c2c425d9c0ffa44e7004cad8fb319a63cf94c583d7"}, "downloads": -1, "filename": "norgatedata-1.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "32ec84f0aad9bd7a8d2c0b4acb25586d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21654, "upload_time": "2019-09-25T11:24:22", "upload_time_iso_8601": "2019-09-25T11:24:22.850992Z", "url": "https://files.pythonhosted.org/packages/75/5e/8c34c9fe8bcf882893c62bb7f41cb41e9e50b49c05b9b03b50978f3a3251/norgatedata-1.0.12-py3-none-any.whl", "yanked": false}], "1.0.13": [{"comment_text": "", "digests": {"md5": "b32c56f1a5393f50ae7a4c373769bc0b", "sha256": "b303238849b7b5bfc205585d36f4814c2402e685c4c152b99917371466343e55"}, "downloads": -1, "filename": "norgatedata-1.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "b32c56f1a5393f50ae7a4c373769bc0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21659, "upload_time": "2019-09-25T11:26:08", "upload_time_iso_8601": "2019-09-25T11:26:08.876977Z", "url": "https://files.pythonhosted.org/packages/85/92/17b4bb4ab9884e09465d682be2266a1606d9ce08f2dbe1290db39310eedb/norgatedata-1.0.13-py3-none-any.whl", "yanked": false}], "1.0.14": [{"comment_text": "", "digests": {"md5": "e441d23f2841aef99cabf23bc94a4ebf", "sha256": "6b6ae03ec9edbd9fac9f9b5a199a3ad376a6494def2aa0bcc4ef31f53815a669"}, "downloads": -1, "filename": "norgatedata-1.0.14-py3-none-any.whl", "has_sig": false, "md5_digest": "e441d23f2841aef99cabf23bc94a4ebf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21763, "upload_time": "2019-10-05T04:18:51", "upload_time_iso_8601": "2019-10-05T04:18:51.879666Z", "url": "https://files.pythonhosted.org/packages/8e/76/f98c78a81f886289a1850ffdc6178331ec125b1f9c07933a7b51aea5846d/norgatedata-1.0.14-py3-none-any.whl", "yanked": false}], "1.0.15": [{"comment_text": "", "digests": {"md5": "3f5f74ef6ee36cf985ac0394bf1b8063", "sha256": "0b3d1397481bc2357ef6520aa307186a8dce0f4e1c62eac41a05b4177c1f9e4a"}, "downloads": -1, "filename": "norgatedata-1.0.15-py3-none-any.whl", "has_sig": false, "md5_digest": "3f5f74ef6ee36cf985ac0394bf1b8063", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21867, "upload_time": "2019-10-05T04:39:51", "upload_time_iso_8601": "2019-10-05T04:39:51.561791Z", "url": "https://files.pythonhosted.org/packages/63/4b/c26fa7fab7a6584265a0aa36a2e4910354cb0c04f3cf9de14983881104dc/norgatedata-1.0.15-py3-none-any.whl", "yanked": false}], "1.0.17": [{"comment_text": "", "digests": {"md5": "dc24d73ef19da464cdf27e0205791ae0", "sha256": "11417a7fe9e00c58afe586f2fdb712615fec1c122fd6bdf1466031c691b4e428"}, "downloads": -1, "filename": "norgatedata-1.0.17-py3-none-any.whl", "has_sig": false, "md5_digest": "dc24d73ef19da464cdf27e0205791ae0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21938, "upload_time": "2019-10-06T05:12:40", "upload_time_iso_8601": "2019-10-06T05:12:40.409557Z", "url": "https://files.pythonhosted.org/packages/6d/1c/38eb4c442a2d609f093188a2b021fd82ba6443b42b201074520516b83eff/norgatedata-1.0.17-py3-none-any.whl", "yanked": false}], "1.0.18": [{"comment_text": "", "digests": {"md5": "c766f918c461713a5715bc1a8b46e8d1", "sha256": "96fead47f1a6e23becb27494cd72dfb8ee7cfa5f068e78d4f1033296c7bc799d"}, "downloads": -1, "filename": "norgatedata-1.0.18-py3-none-any.whl", "has_sig": false, "md5_digest": "c766f918c461713a5715bc1a8b46e8d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 22428, "upload_time": "2019-10-07T06:46:48", "upload_time_iso_8601": "2019-10-07T06:46:48.146180Z", "url": "https://files.pythonhosted.org/packages/1f/d9/ee13f922f4ea292b67c7e2faeeb3f5675c45cccb217d9261a5f92ccc71bf/norgatedata-1.0.18-py3-none-any.whl", "yanked": false}], "1.0.19": [{"comment_text": "", "digests": {"md5": "498450ffd45810a44da8aed72bc6b6a5", "sha256": "75b090f9d6c39a3c216ace34e5088cf04d5c605bdd81b8eadb193b20e63dec84"}, "downloads": -1, "filename": "norgatedata-1.0.19-py3-none-any.whl", "has_sig": false, "md5_digest": "498450ffd45810a44da8aed72bc6b6a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 22393, "upload_time": "2019-10-10T01:22:47", "upload_time_iso_8601": "2019-10-10T01:22:47.085709Z", "url": "https://files.pythonhosted.org/packages/c2/35/bb80811e28782fa4acd1d92957537cc30d8f00c92b124d178c8b03490c93/norgatedata-1.0.19-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "5bb7134251d608cb7199bd05dc5bc7b1", "sha256": "74e05cbb02e62bf15ac0099323ea1a3644b85b4d72f1c68e46b38fb849f745ef"}, "downloads": -1, "filename": "norgatedata-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5bb7134251d608cb7199bd05dc5bc7b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 11911, "upload_time": "2019-08-19T02:52:02", "upload_time_iso_8601": "2019-08-19T02:52:02.497230Z", "url": "https://files.pythonhosted.org/packages/71/cd/8fe2f8bb3b5380ef48271a0c16a8b6022727e43b1beee0c547913dfb31d0/norgatedata-1.0.2-py3-none-any.whl", "yanked": false}], "1.0.20": [{"comment_text": "", "digests": {"md5": "983a877fab8cda3c644a3dfe5c250744", "sha256": "299db7356afd8a252c4b16a9af7bef8ae76f43ae33ca8ce5573fd676eb2fd4da"}, "downloads": -1, "filename": "norgatedata-1.0.20-py3-none-any.whl", "has_sig": false, "md5_digest": "983a877fab8cda3c644a3dfe5c250744", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 22400, "upload_time": "2019-10-10T01:25:27", "upload_time_iso_8601": "2019-10-10T01:25:27.778249Z", "url": "https://files.pythonhosted.org/packages/f2/02/26d8b7869208436989c8634c8b666ead427d5d08eb8f477d27036a40de62/norgatedata-1.0.20-py3-none-any.whl", "yanked": false}], "1.0.21": [{"comment_text": "", "digests": {"md5": "b663847726514d0056e162d454ada55c", "sha256": "679af93d6b97faf71d9bf11053b36925247ff61f1942fbe96b4ac74c07fe1ec9"}, "downloads": -1, "filename": "norgatedata-1.0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "b663847726514d0056e162d454ada55c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 22838, "upload_time": "2019-10-17T01:24:06", "upload_time_iso_8601": "2019-10-17T01:24:06.283314Z", "url": "https://files.pythonhosted.org/packages/24/23/55657f7bba5f5e119b3d34b998bed372b29298720744bcc2b77d2097ab5a/norgatedata-1.0.21-py3-none-any.whl", "yanked": false}], "1.0.22": [{"comment_text": "", "digests": {"md5": "6008afbfec19a9a1e9ad7151e0b8b360", "sha256": "66080151eaf5f38e19017751261d6100d07c6d197982aee8619caed81c27bd71"}, "downloads": -1, "filename": "norgatedata-1.0.22-py3-none-any.whl", "has_sig": false, "md5_digest": "6008afbfec19a9a1e9ad7151e0b8b360", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 23003, "upload_time": "2019-10-23T01:13:13", "upload_time_iso_8601": "2019-10-23T01:13:13.837648Z", "url": "https://files.pythonhosted.org/packages/0e/a6/8223fa756b036b44480f5a6b6446668ad3af07ee7baa2165571184899d7a/norgatedata-1.0.22-py3-none-any.whl", "yanked": false}], "1.0.23": [{"comment_text": "", "digests": {"md5": "0c32acab07ebfe49e66f64fbe4d26529", "sha256": "a1e15363fc569c1c71cc99d9ac6f03a5be53aaa53114880a4436d2fa2ac1dd94"}, "downloads": -1, "filename": "norgatedata-1.0.23-py3-none-any.whl", "has_sig": false, "md5_digest": "0c32acab07ebfe49e66f64fbe4d26529", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 23407, "upload_time": "2019-10-26T02:17:18", "upload_time_iso_8601": "2019-10-26T02:17:18.845058Z", "url": "https://files.pythonhosted.org/packages/eb/6a/e3d9dc5b12273f794acdac6aada65d222a1c7b59a8337febd51e222dcc34/norgatedata-1.0.23-py3-none-any.whl", "yanked": false}], "1.0.24": [{"comment_text": "", "digests": {"md5": "0050f47fc9d2acaafb3b8710ed1f0099", "sha256": "d9e1b6b91164990e7559b4c6e6733635a2b89adfb4ed18ffa8231cc73d65fbc7"}, "downloads": -1, "filename": "norgatedata-1.0.24-py3-none-any.whl", "has_sig": false, "md5_digest": "0050f47fc9d2acaafb3b8710ed1f0099", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 23410, "upload_time": "2019-10-28T12:59:48", "upload_time_iso_8601": "2019-10-28T12:59:48.660886Z", "url": "https://files.pythonhosted.org/packages/63/60/ee64456cc2a35f128505c118ad70e1b34dba6bd848989f8953d834952a78/norgatedata-1.0.24-py3-none-any.whl", "yanked": false}], "1.0.25": [{"comment_text": "", "digests": {"md5": "09ac4d86cc41ad2cf838250a33386b8d", "sha256": "ee453675b25764d147680c6862a46ff8b27ffc6fca613effbc97aa448ebcc44f"}, "downloads": -1, "filename": "norgatedata-1.0.25-py3-none-any.whl", "has_sig": false, "md5_digest": "09ac4d86cc41ad2cf838250a33386b8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 23453, "upload_time": "2019-10-29T03:24:14", "upload_time_iso_8601": "2019-10-29T03:24:14.502846Z", "url": "https://files.pythonhosted.org/packages/c8/f5/04cb7677f2b5e8620369eee7c6ceb6e4756506a6984f82ada153de4638ac/norgatedata-1.0.25-py3-none-any.whl", "yanked": false}], "1.0.28": [{"comment_text": "", "digests": {"md5": "9c66899304b10afe3fd5f1a469897e5d", "sha256": "82c60b38f632448ecd19388aa8cd0cb846848614fae426984ee8292d918dfdd2"}, "downloads": -1, "filename": "norgatedata-1.0.28-py3-none-any.whl", "has_sig": false, "md5_digest": "9c66899304b10afe3fd5f1a469897e5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 24489, "upload_time": "2019-11-04T04:09:25", "upload_time_iso_8601": "2019-11-04T04:09:25.792240Z", "url": "https://files.pythonhosted.org/packages/01/7c/9e70b87c3ac077bd288776f709226921dd9d525d949c717e4c964b13be8e/norgatedata-1.0.28-py3-none-any.whl", "yanked": false}], "1.0.29": [{"comment_text": "", "digests": {"md5": "99df02b0b7d362bd23448ae207988a71", "sha256": "a99fc20132a57ecb2c24910f5dadd2198f9f78f9f902056de84cd4fbebb1e333"}, "downloads": -1, "filename": "norgatedata-1.0.29-py3-none-any.whl", "has_sig": false, "md5_digest": "99df02b0b7d362bd23448ae207988a71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 24491, "upload_time": "2019-11-04T11:33:45", "upload_time_iso_8601": "2019-11-04T11:33:45.263085Z", "url": "https://files.pythonhosted.org/packages/9d/38/23871631845c6f875977eebdd127eb16ccd7f043be3cadd2874d68c8737a/norgatedata-1.0.29-py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "6326174a8fb39e3b82e36be82ba4ca00", "sha256": "5e05fc0918cd3693591117c5ec6a511827622dd08570512c1a690868728e3b11"}, "downloads": -1, "filename": "norgatedata-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6326174a8fb39e3b82e36be82ba4ca00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 12093, "upload_time": "2019-08-27T07:17:03", "upload_time_iso_8601": "2019-08-27T07:17:03.251473Z", "url": "https://files.pythonhosted.org/packages/7d/c5/97ca0877b62bed5c3318ecac5eef4438ab097a822ade59dbc0d79534c923/norgatedata-1.0.3-py3-none-any.whl", "yanked": false}], "1.0.30": [{"comment_text": "", "digests": {"md5": "327ef822d460b817d9276c3e3a2aa0d2", "sha256": "8e6715dc8585dc8dbe0b4e5670d4c41bb6cccdb27aefcaea0340ca581c208df3"}, "downloads": -1, "filename": "norgatedata-1.0.30-py3-none-any.whl", "has_sig": false, "md5_digest": "327ef822d460b817d9276c3e3a2aa0d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 24860, "upload_time": "2019-11-09T10:22:11", "upload_time_iso_8601": "2019-11-09T10:22:11.122237Z", "url": "https://files.pythonhosted.org/packages/fa/f1/ab095e1bb96c65be9c1831c4821292281d879e68fd19291a268a9c24c3ca/norgatedata-1.0.30-py3-none-any.whl", "yanked": false}], "1.0.31": [{"comment_text": "", "digests": {"md5": "30e1e98c80523ebb63f116037d9753a7", "sha256": "111805ebf13878cb8e27298ca32fca396bf2b527fc0d3d5fc6f2481f8079e619"}, "downloads": -1, "filename": "norgatedata-1.0.31-py3-none-any.whl", "has_sig": false, "md5_digest": "30e1e98c80523ebb63f116037d9753a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 25167, "upload_time": "2019-11-11T03:10:39", "upload_time_iso_8601": "2019-11-11T03:10:39.389750Z", "url": "https://files.pythonhosted.org/packages/88/8e/73901aac204904fe81596dd4282c5b974b1c875735d2f40c9e4068f7683d/norgatedata-1.0.31-py3-none-any.whl", "yanked": false}], "1.0.32": [{"comment_text": "", "digests": {"md5": "57d8d7ff88be10b81eb1e7499ac6f49e", "sha256": "7ae2ff307ba70f2df9c195b0938a9b7f858700eab64cdb10dc2696517c687374"}, "downloads": -1, "filename": "norgatedata-1.0.32-py3-none-any.whl", "has_sig": false, "md5_digest": "57d8d7ff88be10b81eb1e7499ac6f49e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 25503, "upload_time": "2019-11-25T02:51:19", "upload_time_iso_8601": "2019-11-25T02:51:19.825539Z", "url": "https://files.pythonhosted.org/packages/39/ce/5b87474ec939cafab6b8054f7a72e1dd2fdef4ca480162b874ffe26109c7/norgatedata-1.0.32-py3-none-any.whl", "yanked": false}], "1.0.33": [{"comment_text": "", "digests": {"md5": "c2960d36ed78d93012d7e3dd65f29fab", "sha256": "e0a3e0e3990cef7e5056a1a5d53a88daaeaae11fefa612cd0e04673d4cf03e70"}, "downloads": -1, "filename": "norgatedata-1.0.33-py3-none-any.whl", "has_sig": false, "md5_digest": "c2960d36ed78d93012d7e3dd65f29fab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 25628, "upload_time": "2020-02-18T04:45:03", "upload_time_iso_8601": "2020-02-18T04:45:03.996656Z", "url": "https://files.pythonhosted.org/packages/27/45/4f4801937de2a5e69f2c49f397dbc9b66acdd0baf1ab3e83debd1d3407e6/norgatedata-1.0.33-py3-none-any.whl", "yanked": false}], "1.0.34": [{"comment_text": "", "digests": {"md5": "51ea030dc691a8970508a702d9b491ba", "sha256": "e600fbc196d0bdbf1e734cccd4abe95fb3bde78e4becf2d341a4219962c30046"}, "downloads": -1, "filename": "norgatedata-1.0.34-py3-none-any.whl", "has_sig": false, "md5_digest": "51ea030dc691a8970508a702d9b491ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 25684, "upload_time": "2020-02-28T01:26:10", "upload_time_iso_8601": "2020-02-28T01:26:10.914336Z", "url": "https://files.pythonhosted.org/packages/63/a7/ae352e6bc83473f8706b2285ac5d862839f6bcc26b968ec5dbc72d900c14/norgatedata-1.0.34-py3-none-any.whl", "yanked": false}], "1.0.35": [{"comment_text": "", "digests": {"md5": "d7e175340dec67ff6e8800c842cee09e", "sha256": "013a6e2df1c21b2eeea7cea96129851d4242124d3311ece6304f64c6401f1cec"}, "downloads": -1, "filename": "norgatedata-1.0.35-py3-none-any.whl", "has_sig": false, "md5_digest": "d7e175340dec67ff6e8800c842cee09e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 25776, "upload_time": "2020-03-07T04:11:40", "upload_time_iso_8601": "2020-03-07T04:11:40.054247Z", "url": "https://files.pythonhosted.org/packages/de/50/246b1cad3102615d5c2b14e19e6ce6d27587d2947b6d71527285af700b98/norgatedata-1.0.35-py3-none-any.whl", "yanked": false}], "1.0.36": [{"comment_text": "", "digests": {"md5": "66b42d82bb7e6f904fe56a4f495df49b", "sha256": "705b0eb0fee8edf44a0a6eb9555484f74fda0db7fa1dc41bdfd786c972e7ae82"}, "downloads": -1, "filename": "norgatedata-1.0.36-py3-none-any.whl", "has_sig": false, "md5_digest": "66b42d82bb7e6f904fe56a4f495df49b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 25904, "upload_time": "2020-04-12T02:52:42", "upload_time_iso_8601": "2020-04-12T02:52:42.497597Z", "url": "https://files.pythonhosted.org/packages/a4/da/e4dc72169ed2cccb401e765c49a2fd18f2e8c7c5aafe2b52a6c072a2ff09/norgatedata-1.0.36-py3-none-any.whl", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "81d4d03279e54683eb3080665713fc73", "sha256": "d6a6e303f5566cbd3570a5efe15dcf57fcc9d61efea738e6ba5e1235e1548d59"}, "downloads": -1, "filename": "norgatedata-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "81d4d03279e54683eb3080665713fc73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 12159, "upload_time": "2019-08-29T14:45:21", "upload_time_iso_8601": "2019-08-29T14:45:21.002769Z", "url": "https://files.pythonhosted.org/packages/30/3c/f9e858ad2abe83228f42d4e65c964fdfc11bde5959afe6b0634752a3a245/norgatedata-1.0.4-py3-none-any.whl", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "4299f62b67d81dc4f0095f3d5c4fd965", "sha256": "08c6b565636b538127074aac606a39a8c060b98bfc612eb391c7d7e72e68e235"}, "downloads": -1, "filename": "norgatedata-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4299f62b67d81dc4f0095f3d5c4fd965", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 17902, "upload_time": "2019-09-02T03:41:06", "upload_time_iso_8601": "2019-09-02T03:41:06.865658Z", "url": "https://files.pythonhosted.org/packages/23/2f/9c33fdaa9b1012fa2a9acca98ebd008159e979b96ddd88206c3a0c47cc67/norgatedata-1.0.5-py3-none-any.whl", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "73388dc9f47be410280e18f8d971772d", "sha256": "b9c53a5fd16110fde1a83c3afa24ad9f6eda9937c5f78baefc0d4829846994a4"}, "downloads": -1, "filename": "norgatedata-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "73388dc9f47be410280e18f8d971772d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21067, "upload_time": "2019-09-20T00:26:43", "upload_time_iso_8601": "2019-09-20T00:26:43.105513Z", "url": "https://files.pythonhosted.org/packages/b0/67/d4190815824174f136e34d00187c074e3c770b604a9202835ff4353c51ed/norgatedata-1.0.6-py3-none-any.whl", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "121bdbe91e680d6b8e8f94ba74c5e926", "sha256": "a8018640eddd002930a972b36117f6c9e66b0b6f2ff5ab185483bc857bbbd329"}, "downloads": -1, "filename": "norgatedata-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "121bdbe91e680d6b8e8f94ba74c5e926", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21137, "upload_time": "2019-09-20T02:12:50", "upload_time_iso_8601": "2019-09-20T02:12:50.366727Z", "url": "https://files.pythonhosted.org/packages/dc/7d/a848927d9df698e24c6563f83a5fa07bd9fa50eecc0102f81bbd0952243e/norgatedata-1.0.7-py3-none-any.whl", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "e856a1f706870db01a017bf301a53242", "sha256": "5f1133dd59355072ed3d08a14841e808e5acfbf4764303b1dd0806cc452de2e0"}, "downloads": -1, "filename": "norgatedata-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "e856a1f706870db01a017bf301a53242", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21134, "upload_time": "2019-09-20T02:19:35", "upload_time_iso_8601": "2019-09-20T02:19:35.647823Z", "url": "https://files.pythonhosted.org/packages/85/d9/cdaf3095003dca94826cd608d7cfe2ede94aa8a7b8861a2dfb29b7ee0092/norgatedata-1.0.8-py3-none-any.whl", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "72b91edcecda11f169a52fa3b42e0678", "sha256": "5b4286d541f93ced77875414ffdd7174344feae2c79ff959c707aee007bed29e"}, "downloads": -1, "filename": "norgatedata-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "72b91edcecda11f169a52fa3b42e0678", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 21083, "upload_time": "2019-09-20T02:24:17", "upload_time_iso_8601": "2019-09-20T02:24:17.371604Z", "url": "https://files.pythonhosted.org/packages/1b/f9/7a0ccd9bed4b68ec2d0c068cc052137ec2244dfe4c6a6e9ad8bf7a9d6ce6/norgatedata-1.0.9-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "66b42d82bb7e6f904fe56a4f495df49b", "sha256": "705b0eb0fee8edf44a0a6eb9555484f74fda0db7fa1dc41bdfd786c972e7ae82"}, "downloads": -1, "filename": "norgatedata-1.0.36-py3-none-any.whl", "has_sig": false, "md5_digest": "66b42d82bb7e6f904fe56a4f495df49b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.0", "size": 25904, "upload_time": "2020-04-12T02:52:42", "upload_time_iso_8601": "2020-04-12T02:52:42.497597Z", "url": "https://files.pythonhosted.org/packages/a4/da/e4dc72169ed2cccb401e765c49a2fd18f2e8c7c5aafe2b52a6c072a2ff09/norgatedata-1.0.36-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:44:50 2020"}