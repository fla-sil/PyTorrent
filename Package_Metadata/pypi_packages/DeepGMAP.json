{"info": {"author": "Koh Onimaru", "author_email": "koh.onimaru@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "===================\nREADME for DeepGMAP\n===================\n\nIntroduction\n============\nOne of the fundamental goals in biology is the genotype-phenotype mapping, or to predict a phenotype from a genotype. Genotype originally means \\\na set of protein-coding genes that affect phenotypes, but here I extend the definition of genotype to genome sequences that determine phenotypes, \\\nwhich includes non-coding regions such as gene regulatory sequences. Currently, predicting gene regulatory regions from genome sequences is a \\\nchallenging task. DeepGMAP is a Deep learning-based Genotype MAPping platform to predict them. It can train different architectures of neural \\\nnetworks with epigenomic data, and \"map\" potential gene regulatory regions on a genome.\n\nA related paper has been posted at bioRxiv, https://doi.org/10.1101/355974.\n\nInstall\n=======\n\nPlease check the file 'INSTALL' in the distribution.\n\nUsage of deepgmap\n=================\n\n::\n\n  deepgmap [-h] [--version]\n             {pridict,train,generate_input,genome_divide}\n\n:Example for enhancer prediction: deepgmap predict -i /path/to/conv4frssXXXX.meta -o /path/to/predictions/ -t /path/to/test_data/mm10_window1000_stride300\n\n:Example for training a model: deepgmap train -i /path/to/inputs/mm10_dnase_subset/ -c conv4frss -o /path/to/outputs/\n\nThere are five functions currently available.\n\n:train:\t\t\t\tTrain a model with your data set. The model can be chosen by the option '-c'. deepsea, basset, danq, conv4, conv4frss, conv3frss are available choices, but you can also create a new model.\n:predict:\t\t\tPredict regulatory sequences in a genome or test a newly trained model.\n:generate_input:\tGenerate a training data set that is randomly shuffled and distributed into mini-batches.\n:generate_test:\t\tGenerate a test data set, or convert a genome sequence that you want to annotate its regulatory regions into input data set \n:genome_divide:\t\tThis function creates input files for \"generate_input\" and \"generate_test\" function. The genomic data of humans and mice is already included in this package under XX directory. If you have a de novo genome sequence or want to try other species to train a model.  \n\n\n\n1. To annotate regulatory regions in a genome with a trained model. \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you have a de novo genome sequence and want to annotate their regulatory sequences with an already trained model, you need to convert AGCT sequences to onehot vectors.\nFirstly, the multiple fasta file of your genome should be divided into a particular window size and stride by the following command::\n\n $ deepgmap genome_divide -i /path/to/genomes/mm10.fa -w 1000 -s 300\n\nThis produces mm10_window1000_stride300.bed and mm10_window1000_stride300.fa (you need to change mm10.fa to your multiple fasta file).\nThe next step is to convert AGCT symbols to matrices of onehot arrays::\n\n $ deepgmap generate_test -i /path/to/genomes/mm10_window1000_stride300 -o /path/to/test_data/mm10_window1000_stride300 -t 16 -C all\n\n\nTo predict regulatory sequences, type::\n\n $ deepgmap predict -i /path/to/outputs/conv4frss_Tue_May_21_004410_2019/train.ckpt-26259/train.ckpt-26259.meta -o /path/to/predictions/ -t /path/to/data/test_data/mm10_window1000_stride300\n\n\nOutput files\n~~~~~~~~~~~~\n\n1. narrowPeak files are tabular files that contain genomic regions with prediction score from 0 to 1. \n   The files can be visualized with the IGV genome viewer (http://software.broadinstitute.org/software/igv/).\n   Each file is corresponding to one of labels you have trained your model with.\n2. A npz file is a numpy array of prediction scores. The array coordinate is the same as the labeled file.\n\n\n2. To train a model with epigenomic data.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIf you want to train a model with your data set, first, you need to generate genomic sequences labeled with your data::\n\n $ deepgmap generate_input -b /path/to/data/inputs/mm10_ctcf -g /path/to/data/genomes/mm10_window1000_stride300 -p ctcf_test -t 8\n\nThis command would take 10 min to a few hours depending on your machine and the amount of data. If you see a memory error, you can reduce the RAM usage by increasing the \ninteger of -n option. It is not the optimal algorithm, will be improved in the future. Next, to train a model run::\n\n $ deepgmap train -i /path/to/data/inputs/mm10_ctcf/for_figshare_genomes100r0.75_train_data_set -c conv4frss -o /path/to/data/outputs/\n\nThe \"-i\" option is to feed a training data set, -c to specify a model type, -o to specify the output directory, and -G to specify index of GPUs (optional). Currently available models are  \ndeepsea, basset, danq, danqblock, conv4, conv3frss, conv4frss, conv4frsspluss.\n   \n\nOutput files\n~~~~~~~~~~~~\n\n1. A set of tensorflow output files: \"conv4frss_<date>.ckpt-<train step>.meta\", \"conv4frss_<date>.ckpt-<train step>.index\", \n\"conv4frss_<date>.ckpt-<train step>.data-00000-of-00001\", \"checkpoint\", and additional similar files that were saved during training when train \naccuracy was high. These files contains trained variables, and are required for running \"deepgmap predict\".  \n2. A log file named conv4frss_<date>.log, which contains information about the run command, model name, several hyper parameters, and input files and so on.\n3. A plot file in pdf format, named \"conv4frss_<date>_plot.pdf\". It shows the progress of training with F1 values in the top panel and cost in the bottom.\n4. A set of trained variables in numpy array format, named \"conv4frss_<date>_trained_variables.npz\". It contains almost same information with the tensorflow outputs.\nIt is just for convenience to analyze trained models.\n\n\n3. To test a trained model with test data.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRun::\n\n $ deepgmap predict -i /path/to/data/outputs/conv4frss_<date>.ckpt-<train step>.meta -o /path/to/data/predictions/ -b ./data/inputs/mm10_ctcf/ctcf_test_mm10_window1000_stride300.bed.labeled \\\n -t /path/to/data/test_data/mm10_window1000_stride300_chr2\n\nAlternatively, you can test a trained model just by giving the directory of a train output with option -l::\n\n $ deepgmap predict -l /path/to/data/outputs/conv4frss_<date>\n \nIn this case, the prediction result is generated under the input directory. \n\nOutput files\n~~~~~~~~~~~~\n1. narrowPeak files are tabular files that contain genomic regions with prediction score between 0 and 1. \n   The files can be visualized with the IGV genome viewer (http://software.broadinstitute.org/software/igv/).\n   Each file is corresponding to one of labels you have trained your model with.\n2. A npz file is a numpy array of prediction scores. The array coordinate is the same as the labeled file.\n3. A log file that contains AUROC and AUPRC scores.\n4. A pdf file of ROC and PRC.\n\nExamples of running a docker image\n==================================\n\n $ docker run -v $HOME:$HOME --runtime=nvidia -it --rm koonimaru/deepgmap deepgmap genome_divide -i /path/to/genomes/mm10.fa -w 1000 -s 300\n\n $ docker run -v $HOME:$HOME --runtime=nvidia -it --rm koonimaru/deepgmap deepgmap train -i /full/path/to/mm10_ctcf/for_figshare_genomes100r0.75_train_data_set -o /full/path/to/data/outputs -c conv4frss\n\n $ docker run -v $HOME:$HOME --runtime=nvidia -it --rm koonimaru/deepgmap deepgmap predict -l /full/path/to/output_directory_of_train -t /full/path/to/data/test_data/mm10_window1000_stride300_chr2\n\nIf you are running docker through qsub, remove \"-it\".", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "DeepGMAP", "package_url": "https://pypi.org/project/DeepGMAP/", "platform": "", "project_url": "https://pypi.org/project/DeepGMAP/", "project_urls": null, "release_url": "https://pypi.org/project/DeepGMAP/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Learning and predicting gene regulatory sequences in genomes", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>One of the fundamental goals in biology is the genotype-phenotype mapping, or to predict a phenotype from a genotype. Genotype originally means a set of protein-coding genes that affect phenotypes, but here I extend the definition of genotype to genome sequences that determine phenotypes, which includes non-coding regions such as gene regulatory sequences. Currently, predicting gene regulatory regions from genome sequences is a challenging task. DeepGMAP is a Deep learning-based Genotype MAPping platform to predict them. It can train different architectures of neural networks with epigenomic data, and \u201cmap\u201d potential gene regulatory regions on a genome.</p>\n<p>A related paper has been posted at bioRxiv, <a href=\"https://doi.org/10.1101/355974\" rel=\"nofollow\">https://doi.org/10.1101/355974</a>.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Please check the file \u2018INSTALL\u2019 in the distribution.</p>\n</div>\n<div id=\"usage-of-deepgmap\">\n<h2>Usage of deepgmap</h2>\n<pre>deepgmap [-h] [--version]\n           {pridict,train,generate_input,genome_divide}\n</pre>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Example for enhancer prediction:</th></tr>\n<tr><td>\u00a0</td><td>deepgmap predict -i /path/to/conv4frssXXXX.meta -o /path/to/predictions/ -t /path/to/test_data/mm10_window1000_stride300</td>\n</tr>\n<tr><th>Example for training a model:</th></tr>\n<tr><td>\u00a0</td><td>deepgmap train -i /path/to/inputs/mm10_dnase_subset/ -c conv4frss -o /path/to/outputs/</td>\n</tr>\n</tbody>\n</table>\n<p>There are five functions currently available.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>train:</th><td>Train a model with your data set. The model can be chosen by the option \u2018-c\u2019. deepsea, basset, danq, conv4, conv4frss, conv3frss are available choices, but you can also create a new model.</td>\n</tr>\n<tr><th>predict:</th><td>Predict regulatory sequences in a genome or test a newly trained model.</td>\n</tr>\n<tr><th>generate_input:</th><td>Generate a training data set that is randomly shuffled and distributed into mini-batches.</td>\n</tr>\n<tr><th>generate_test:</th><td>Generate a test data set, or convert a genome sequence that you want to annotate its regulatory regions into input data set</td>\n</tr>\n<tr><th>genome_divide:</th><td>This function creates input files for \u201cgenerate_input\u201d and \u201cgenerate_test\u201d function. The genomic data of humans and mice is already included in this package under XX directory. If you have a de novo genome sequence or want to try other species to train a model.</td>\n</tr>\n</tbody>\n</table>\n<div id=\"to-annotate-regulatory-regions-in-a-genome-with-a-trained-model\">\n<h3>1. To annotate regulatory regions in a genome with a trained model.</h3>\n<p>If you have a de novo genome sequence and want to annotate their regulatory sequences with an already trained model, you need to convert AGCT sequences to onehot vectors.\nFirstly, the multiple fasta file of your genome should be divided into a particular window size and stride by the following command:</p>\n<pre>$ deepgmap genome_divide -i /path/to/genomes/mm10.fa -w 1000 -s 300\n</pre>\n<p>This produces mm10_window1000_stride300.bed and mm10_window1000_stride300.fa (you need to change mm10.fa to your multiple fasta file).\nThe next step is to convert AGCT symbols to matrices of onehot arrays:</p>\n<pre>$ deepgmap generate_test -i /path/to/genomes/mm10_window1000_stride300 -o /path/to/test_data/mm10_window1000_stride300 -t 16 -C all\n</pre>\n<p>To predict regulatory sequences, type:</p>\n<pre>$ deepgmap predict -i /path/to/outputs/conv4frss_Tue_May_21_004410_2019/train.ckpt-26259/train.ckpt-26259.meta -o /path/to/predictions/ -t /path/to/data/test_data/mm10_window1000_stride300\n</pre>\n</div>\n<div id=\"output-files\">\n<h3>Output files</h3>\n<ol>\n<li>narrowPeak files are tabular files that contain genomic regions with prediction score from 0 to 1.\nThe files can be visualized with the IGV genome viewer (<a href=\"http://software.broadinstitute.org/software/igv/\" rel=\"nofollow\">http://software.broadinstitute.org/software/igv/</a>).\nEach file is corresponding to one of labels you have trained your model with.</li>\n<li>A npz file is a numpy array of prediction scores. The array coordinate is the same as the labeled file.</li>\n</ol>\n</div>\n<div id=\"to-train-a-model-with-epigenomic-data\">\n<h3>2. To train a model with epigenomic data.</h3>\n<p>If you want to train a model with your data set, first, you need to generate genomic sequences labeled with your data:</p>\n<pre>$ deepgmap generate_input -b /path/to/data/inputs/mm10_ctcf -g /path/to/data/genomes/mm10_window1000_stride300 -p ctcf_test -t 8\n</pre>\n<p>This command would take 10 min to a few hours depending on your machine and the amount of data. If you see a memory error, you can reduce the RAM usage by increasing the\ninteger of -n option. It is not the optimal algorithm, will be improved in the future. Next, to train a model run:</p>\n<pre>$ deepgmap train -i /path/to/data/inputs/mm10_ctcf/for_figshare_genomes100r0.75_train_data_set -c conv4frss -o /path/to/data/outputs/\n</pre>\n<p>The \u201c-i\u201d option is to feed a training data set, -c to specify a model type, -o to specify the output directory, and -G to specify index of GPUs (optional). Currently available models are\ndeepsea, basset, danq, danqblock, conv4, conv3frss, conv4frss, conv4frsspluss.</p>\n</div>\n<div id=\"id1\">\n<h3>Output files</h3>\n<p>1. A set of tensorflow output files: \u201cconv4frss_&lt;date&gt;.ckpt-&lt;train step&gt;.meta\u201d, \u201cconv4frss_&lt;date&gt;.ckpt-&lt;train step&gt;.index\u201d,\n\u201cconv4frss_&lt;date&gt;.ckpt-&lt;train step&gt;.data-00000-of-00001\u201d, \u201ccheckpoint\u201d, and additional similar files that were saved during training when train\naccuracy was high. These files contains trained variables, and are required for running \u201cdeepgmap predict\u201d.\n2. A log file named conv4frss_&lt;date&gt;.log, which contains information about the run command, model name, several hyper parameters, and input files and so on.\n3. A plot file in pdf format, named \u201cconv4frss_&lt;date&gt;_plot.pdf\u201d. It shows the progress of training with F1 values in the top panel and cost in the bottom.\n4. A set of trained variables in numpy array format, named \u201cconv4frss_&lt;date&gt;_trained_variables.npz\u201d. It contains almost same information with the tensorflow outputs.\nIt is just for convenience to analyze trained models.</p>\n</div>\n<div id=\"to-test-a-trained-model-with-test-data\">\n<h3>3. To test a trained model with test data.</h3>\n<p>Run:</p>\n<pre>$ deepgmap predict -i /path/to/data/outputs/conv4frss_&lt;date&gt;.ckpt-&lt;train step&gt;.meta -o /path/to/data/predictions/ -b ./data/inputs/mm10_ctcf/ctcf_test_mm10_window1000_stride300.bed.labeled \\\n-t /path/to/data/test_data/mm10_window1000_stride300_chr2\n</pre>\n<p>Alternatively, you can test a trained model just by giving the directory of a train output with option -l:</p>\n<pre>$ deepgmap predict -l /path/to/data/outputs/conv4frss_&lt;date&gt;\n</pre>\n<p>In this case, the prediction result is generated under the input directory.</p>\n</div>\n<div id=\"id2\">\n<h3>Output files</h3>\n<ol>\n<li>narrowPeak files are tabular files that contain genomic regions with prediction score between 0 and 1.\nThe files can be visualized with the IGV genome viewer (<a href=\"http://software.broadinstitute.org/software/igv/\" rel=\"nofollow\">http://software.broadinstitute.org/software/igv/</a>).\nEach file is corresponding to one of labels you have trained your model with.</li>\n<li>A npz file is a numpy array of prediction scores. The array coordinate is the same as the labeled file.</li>\n<li>A log file that contains AUROC and AUPRC scores.</li>\n<li>A pdf file of ROC and PRC.</li>\n</ol>\n</div>\n</div>\n<div id=\"examples-of-running-a-docker-image\">\n<h2>Examples of running a docker image</h2>\n<blockquote>\n<p>$ docker run -v $HOME:$HOME \u2013runtime=nvidia -it \u2013rm koonimaru/deepgmap deepgmap genome_divide -i /path/to/genomes/mm10.fa -w 1000 -s 300</p>\n<p>$ docker run -v $HOME:$HOME \u2013runtime=nvidia -it \u2013rm koonimaru/deepgmap deepgmap train -i /full/path/to/mm10_ctcf/for_figshare_genomes100r0.75_train_data_set -o /full/path/to/data/outputs -c conv4frss</p>\n<p>$ docker run -v $HOME:$HOME \u2013runtime=nvidia -it \u2013rm koonimaru/deepgmap deepgmap predict -l /full/path/to/output_directory_of_train -t /full/path/to/data/test_data/mm10_window1000_stride300_chr2</p>\n</blockquote>\n<p>If you are running docker through qsub, remove \u201c-it\u201d.</p>\n</div>\n\n          </div>"}, "last_serial": 5369686, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "0f5bdc27e805372872bedde60c29d92b", "sha256": "8ce141cb3002e11cfa516d78254d98f8f1b5cc699fbe4efec287c69b68089d43"}, "downloads": -1, "filename": "DeepGMAP-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0f5bdc27e805372872bedde60c29d92b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191028, "upload_time": "2019-06-07T00:37:15", "upload_time_iso_8601": "2019-06-07T00:37:15.507453Z", "url": "https://files.pythonhosted.org/packages/4a/7f/47d57c0bd8174630b133fbf1587f580100ab52a2629bbbc6e71471e400b3/DeepGMAP-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f5bdc27e805372872bedde60c29d92b", "sha256": "8ce141cb3002e11cfa516d78254d98f8f1b5cc699fbe4efec287c69b68089d43"}, "downloads": -1, "filename": "DeepGMAP-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0f5bdc27e805372872bedde60c29d92b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191028, "upload_time": "2019-06-07T00:37:15", "upload_time_iso_8601": "2019-06-07T00:37:15.507453Z", "url": "https://files.pythonhosted.org/packages/4a/7f/47d57c0bd8174630b133fbf1587f580100ab52a2629bbbc6e71471e400b3/DeepGMAP-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:24 2020"}