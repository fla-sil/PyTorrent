{"info": {"author": "Platform.sh", "author_email": "sayhello@platform.sh", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "# Platform.sh Config Reader (Python)\n\n[![CircleCI Status](https://circleci.com/gh/platformsh/config-reader-python.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/platformsh/config-reader-python)\n\nThis library provides a streamlined and easy to use way to interact with a Platform.sh environment. It offers utility methods to access routes and relationships more cleanly than reading the raw environment variables yourself.\n\nThis library requires Python 3.5 or later.\n\n## Install\n\n```bash\npip install platformshconfig\n```\n\n## Usage Example\n\nExample:\n\n```python\nimport sys\nimport pysolr\n\nfrom platformshconfig import Config\n\n\nconfig = Config()\n\nif not config.is_valid_platform():\n    sys.exit(\"Not in a Platform.sh Environment.\")\n\ncredentials = config.credentials('solr')\n\nformatted = config.formatted_credentials('solr', 'pysolr')\n\nconn = pysolr.Solr(formatted)\n\n# Do stuff with the conn here.\n```\n\n## API Reference\n\n### Create a config object\n\n```python\nfrom platformshconfig import Config\n\nconfig = Config()\n```\n\n`config` is now a `Config` object that provides access to the Platform.sh environment.\n\nThe `is_valid_platform()` method returns `True` if the code is running in a context that has Platform.sh environment variables defined.  If it returns `False` then most other functions will throw exceptions if used.\n\n### Inspect the environment\n\nThe following methods return `True` or `False` to help determine in what context the code is running:\n\n```python\nconfig.in_build()\n\nconfig.in_runtime()\n\nconfig.on_dedicated()\n\nconfig.on_production()\n```\n\n> **Note:**\n>\n> Platform.sh will no longer refer to its [99.99% uptime SLA product](https://platform.sh/solutions/) as \"Enterprise\", but rather as \"Dedicated\". Configuration Reader libraries have in turn been updated to include an `on_dedicated` method to replace `on_enterprise`. For now `on_enterprise` remains available. It now calls the new method and no breaking changes have been introduced.\n>\n> It is recommended that you update your projects to use `on_dedicated` as soon as possible, as `on_enterprise` will be removed in a future version of this library.\n\n### Read environment variables\n\nThe following magic properties return the corresponding environment variable value.  See the [Platform.sh documentation](https://docs.platform.sh/development/variables.html) for a description of each.\n\nThe following are available both in Build and at Runtime:\n\n```python\nconfig.applicationName\n\nconfig.appDir\n\nconfig.project\n\nconfig.treeID\n\nconfig.projectEntropy\n```\n\nThe following are available only if `in_runtime()` returned `True`:\n\n```python\nconfig.branch\n\ncondig.documentRoot\n\nconfig.smtpHost\n\nconfig.environment\n\nconfig.socket\n\nconfig.port\n```\n\n### Reading service credentials\n\n[Platform.sh services](https://docs.platform.sh/configuration/services.html) are defined in a `services.yaml` file, and exposed to an application by listing a `relationship` to that service in the application's `.platform.app.yaml` file.  User, password, host, etc. information is then exposed to the running application in the `PLATFORM_RELATIONSHIPS` environment variable, which is a base64-encoded JSON string.  The following method allows easier access to credential information than decoding the environment variable yourself.\n\n```python\ncreds = config.credentials('database')\n```\n\nThe return value of `credentials()` is a dictionary matching the relationship JSON object, which includes the appropriate user, password, host, database name, and other pertinent information.  See the [Service documentation](https://docs.platform.sh/configuration/services.html) for your service for the exact structure and meaning of each property.  In most cases that information can be passed directly to whatever other client library is being used to connect to the service.\n\n## Formatting service credentials\n\nIn some cases the library being used to connect to a service wants its credentials formatted in a specific way; it could be a DSN string of some sort or it needs certain values concatenated to the database name, etc.  For those cases you can use \"Credential Formatters\".  A Credential Formatter is any `callable` (function, anonymous function, object method, etc.) that takes a credentials array and returns any type, since the library may want different types.\n\nCredential Formatters can be registered on the configuration object, and a few are included out of the box.  That allows 3rd party libraries to ship their own formatters that can be easily integrated into the `Config` object to allow easier use.\n\n```python\ndef format_my_service(credentials):\n    return \"some string based on 'credentials'.\"\n\n# Call this in setup\nconfig.register_formatter('my_service', format_my_service)\n\n# Then call this method to get the formatted version\nformatted = config.formatted_credentials('database', 'my_service')\n```\n\nThe first parameter is the name of a relationship defined in `.platform.app.yaml`.  The second is a formatter that was previously registered with `register_formatter()`.  If either the service or formatter is missing an exception will be thrown.  The type of `formatted` will depend on the formatter function and can be safely passed directly to the client library.\n\nThree formatters are included out of the box:\n\n* `pymongo` returns a DSN appropriate for using `pymongo` to connect to MongoDB. Note that `pymongo` will still need the username and password from the credentials dictionary passed as separate parameters.\n* `pysolr`  returns a DSN appropriate for using `pysolr` to connect to Apache Solr.\n* `postgresql_dsn` returns a DSN appropriate for postgresql connection.\n\n### Reading Platform.sh variables\n\nPlatform.sh allows you to define arbitrary variables that may be available at build time, runtime, or both.  They are stored in the `PLATFORM_VARIABLES` environment variable, which is a base64-encoded JSON string.  \n\nThe following two methods allow access to those values from your code without having to bother decoding the values yourself:\n\n```python\nconfig.variables()\n```\n\nThis method returns a dictionary of all variables defined.  Usually this method is not necessary and `config.variable()` is preferred.\n\n```python\nconfig.variable(\"foo\", \"default\")\n```\n\nThis method looks for the \"foo\" variable.  If found, it is returned.  If not, the optional second parameter is returned as a default.\n\n### Reading Routes\n\n[Routes](https://docs.platform.sh/configuration/routes.html) on Platform.sh define how a project will handle incoming requests; that primarily means what application container will serve the request, but it also includes cache configuration, TLS settings, etc.  Routes may also have an optional ID, which is the preferred way to access them.\n\n```python\nconfig.get_route(\"main\")\n```\n\nThe `get_route()` method takes a single string for the route ID (\"main\" in this case) and returns the corresponding route array.  If the route is not found it will throw an exception.\n\nTo access all routes, or to search for a route that has no ID, the `routes()` method returns an dictionary of routes keyed by their URL.  That mirrors the structure of the `PLATFORM_ROUTES` environment variable.\n\nIf called in the build phase an exception is thrown.\n\n\n# Changelog\n\n## [2.3.1] - 2019-11-04\n\n### Added\n\n* `CHANGELOG` added.\n* `on_dedicated` method that determines if the current environment is a Platform.sh Dedicated environment. Replaces deprecated `on_enterprise` method.\n\n### Changed\n\n* Deprecates `on_enterprise` method - which is for now made to wrap around the added `on_dedicated` method. `on_enterprise` **will be removed** in a future release, so update your projects to use `on_dedicated` instead as soon as possible.\n\n## [2.3.0] - 2019-09-19\n\n### Added\n\n* `get_primary_route` method for accessing routes marked \"primary\" in `routes.yaml`.\n* `get_upstream_routes` method returns an object map that includes only those routes that point to a valid upstream.\n\n## [2.2.3] - 2019-04-30\n\n### Changed\n\n* Removes guard on `variables()` method.\n\n## [2.2.2] - 2019-04-29\n\n### Changed\n\n* Refactors dynamic property access to be more permissive.\n\n## [2.2.1] - 2019-04-25\n\n### Changed\n\n* More permissive check for relationships.\n\n## [2.2.0] - 2019-04-24\n\n### Added\n\n* `postgresql_dsn` credential formatter; returns a DSN appropriate for PostgreSQL connection.\n\n## [2.1.1] - 2019-03-22\n\n### Changed\n\n* Fixes build issues in `has_relationship()` and `routes()` methods.\n\n## [2.1.0] - 2019-03-22\n\n### Added\n\n* `has_relationship` method to determine if a relationship is defined, and thus has credentials available.\n\n### Changed\n\n* Fixes `routes` method.\n\n## [2.0.4] - 2019-03-06\n\n### Added\n\n* CircleCI configuration\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/platformsh/config-reader-python3", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "platformshconfig", "package_url": "https://pypi.org/project/platformshconfig/", "platform": "", "project_url": "https://pypi.org/project/platformshconfig/", "project_urls": {"Homepage": "https://github.com/platformsh/config-reader-python3"}, "release_url": "https://pypi.org/project/platformshconfig/2.3.1/", "requires_dist": null, "requires_python": "", "summary": "Small helper to access Platform.sh environment variables.", "version": "2.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Platform.sh Config Reader (Python)</h1>\n<p><a href=\"https://circleci.com/gh/platformsh/config-reader-python\" rel=\"nofollow\"><img alt=\"CircleCI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d6520e7a2fe0780ba77eb97971742d2187cd1f2/68747470733a2f2f636972636c6563692e636f6d2f67682f706c6174666f726d73682f636f6e6669672d7265616465722d707974686f6e2e7376673f7374796c653d736869656c6426636972636c652d746f6b656e3d3a636972636c652d746f6b656e\"></a></p>\n<p>This library provides a streamlined and easy to use way to interact with a Platform.sh environment. It offers utility methods to access routes and relationships more cleanly than reading the raw environment variables yourself.</p>\n<p>This library requires Python 3.5 or later.</p>\n<h2>Install</h2>\n<pre>pip install platformshconfig\n</pre>\n<h2>Usage Example</h2>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pysolr</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">platformshconfig</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">is_valid_platform</span><span class=\"p\">():</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"s2\">\"Not in a Platform.sh Environment.\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">credentials</span><span class=\"p\">(</span><span class=\"s1\">'solr'</span><span class=\"p\">)</span>\n\n<span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">formatted_credentials</span><span class=\"p\">(</span><span class=\"s1\">'solr'</span><span class=\"p\">,</span> <span class=\"s1\">'pysolr'</span><span class=\"p\">)</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">pysolr</span><span class=\"o\">.</span><span class=\"n\">Solr</span><span class=\"p\">(</span><span class=\"n\">formatted</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Do stuff with the conn here.</span>\n</pre>\n<h2>API Reference</h2>\n<h3>Create a config object</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">platformshconfig</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n</pre>\n<p><code>config</code> is now a <code>Config</code> object that provides access to the Platform.sh environment.</p>\n<p>The <code>is_valid_platform()</code> method returns <code>True</code> if the code is running in a context that has Platform.sh environment variables defined.  If it returns <code>False</code> then most other functions will throw exceptions if used.</p>\n<h3>Inspect the environment</h3>\n<p>The following methods return <code>True</code> or <code>False</code> to help determine in what context the code is running:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">in_build</span><span class=\"p\">()</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">in_runtime</span><span class=\"p\">()</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">on_dedicated</span><span class=\"p\">()</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">on_production</span><span class=\"p\">()</span>\n</pre>\n<blockquote>\n<p><strong>Note:</strong></p>\n<p>Platform.sh will no longer refer to its <a href=\"https://platform.sh/solutions/\" rel=\"nofollow\">99.99% uptime SLA product</a> as \"Enterprise\", but rather as \"Dedicated\". Configuration Reader libraries have in turn been updated to include an <code>on_dedicated</code> method to replace <code>on_enterprise</code>. For now <code>on_enterprise</code> remains available. It now calls the new method and no breaking changes have been introduced.</p>\n<p>It is recommended that you update your projects to use <code>on_dedicated</code> as soon as possible, as <code>on_enterprise</code> will be removed in a future version of this library.</p>\n</blockquote>\n<h3>Read environment variables</h3>\n<p>The following magic properties return the corresponding environment variable value.  See the <a href=\"https://docs.platform.sh/development/variables.html\" rel=\"nofollow\">Platform.sh documentation</a> for a description of each.</p>\n<p>The following are available both in Build and at Runtime:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">applicationName</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">appDir</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">project</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">treeID</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">projectEntropy</span>\n</pre>\n<p>The following are available only if <code>in_runtime()</code> returned <code>True</code>:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">branch</span>\n\n<span class=\"n\">condig</span><span class=\"o\">.</span><span class=\"n\">documentRoot</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">smtpHost</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">environment</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">socket</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">port</span>\n</pre>\n<h3>Reading service credentials</h3>\n<p><a href=\"https://docs.platform.sh/configuration/services.html\" rel=\"nofollow\">Platform.sh services</a> are defined in a <code>services.yaml</code> file, and exposed to an application by listing a <code>relationship</code> to that service in the application's <code>.platform.app.yaml</code> file.  User, password, host, etc. information is then exposed to the running application in the <code>PLATFORM_RELATIONSHIPS</code> environment variable, which is a base64-encoded JSON string.  The following method allows easier access to credential information than decoding the environment variable yourself.</p>\n<pre><span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">credentials</span><span class=\"p\">(</span><span class=\"s1\">'database'</span><span class=\"p\">)</span>\n</pre>\n<p>The return value of <code>credentials()</code> is a dictionary matching the relationship JSON object, which includes the appropriate user, password, host, database name, and other pertinent information.  See the <a href=\"https://docs.platform.sh/configuration/services.html\" rel=\"nofollow\">Service documentation</a> for your service for the exact structure and meaning of each property.  In most cases that information can be passed directly to whatever other client library is being used to connect to the service.</p>\n<h2>Formatting service credentials</h2>\n<p>In some cases the library being used to connect to a service wants its credentials formatted in a specific way; it could be a DSN string of some sort or it needs certain values concatenated to the database name, etc.  For those cases you can use \"Credential Formatters\".  A Credential Formatter is any <code>callable</code> (function, anonymous function, object method, etc.) that takes a credentials array and returns any type, since the library may want different types.</p>\n<p>Credential Formatters can be registered on the configuration object, and a few are included out of the box.  That allows 3rd party libraries to ship their own formatters that can be easily integrated into the <code>Config</code> object to allow easier use.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">format_my_service</span><span class=\"p\">(</span><span class=\"n\">credentials</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"some string based on 'credentials'.\"</span>\n\n<span class=\"c1\"># Call this in setup</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">register_formatter</span><span class=\"p\">(</span><span class=\"s1\">'my_service'</span><span class=\"p\">,</span> <span class=\"n\">format_my_service</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Then call this method to get the formatted version</span>\n<span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">formatted_credentials</span><span class=\"p\">(</span><span class=\"s1\">'database'</span><span class=\"p\">,</span> <span class=\"s1\">'my_service'</span><span class=\"p\">)</span>\n</pre>\n<p>The first parameter is the name of a relationship defined in <code>.platform.app.yaml</code>.  The second is a formatter that was previously registered with <code>register_formatter()</code>.  If either the service or formatter is missing an exception will be thrown.  The type of <code>formatted</code> will depend on the formatter function and can be safely passed directly to the client library.</p>\n<p>Three formatters are included out of the box:</p>\n<ul>\n<li><code>pymongo</code> returns a DSN appropriate for using <code>pymongo</code> to connect to MongoDB. Note that <code>pymongo</code> will still need the username and password from the credentials dictionary passed as separate parameters.</li>\n<li><code>pysolr</code>  returns a DSN appropriate for using <code>pysolr</code> to connect to Apache Solr.</li>\n<li><code>postgresql_dsn</code> returns a DSN appropriate for postgresql connection.</li>\n</ul>\n<h3>Reading Platform.sh variables</h3>\n<p>Platform.sh allows you to define arbitrary variables that may be available at build time, runtime, or both.  They are stored in the <code>PLATFORM_VARIABLES</code> environment variable, which is a base64-encoded JSON string.</p>\n<p>The following two methods allow access to those values from your code without having to bother decoding the values yourself:</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">()</span>\n</pre>\n<p>This method returns a dictionary of all variables defined.  Usually this method is not necessary and <code>config.variable()</code> is preferred.</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">variable</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"default\"</span><span class=\"p\">)</span>\n</pre>\n<p>This method looks for the \"foo\" variable.  If found, it is returned.  If not, the optional second parameter is returned as a default.</p>\n<h3>Reading Routes</h3>\n<p><a href=\"https://docs.platform.sh/configuration/routes.html\" rel=\"nofollow\">Routes</a> on Platform.sh define how a project will handle incoming requests; that primarily means what application container will serve the request, but it also includes cache configuration, TLS settings, etc.  Routes may also have an optional ID, which is the preferred way to access them.</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get_route</span><span class=\"p\">(</span><span class=\"s2\">\"main\"</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>get_route()</code> method takes a single string for the route ID (\"main\" in this case) and returns the corresponding route array.  If the route is not found it will throw an exception.</p>\n<p>To access all routes, or to search for a route that has no ID, the <code>routes()</code> method returns an dictionary of routes keyed by their URL.  That mirrors the structure of the <code>PLATFORM_ROUTES</code> environment variable.</p>\n<p>If called in the build phase an exception is thrown.</p>\n<h1>Changelog</h1>\n<h2>[2.3.1] - 2019-11-04</h2>\n<h3>Added</h3>\n<ul>\n<li><code>CHANGELOG</code> added.</li>\n<li><code>on_dedicated</code> method that determines if the current environment is a Platform.sh Dedicated environment. Replaces deprecated <code>on_enterprise</code> method.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Deprecates <code>on_enterprise</code> method - which is for now made to wrap around the added <code>on_dedicated</code> method. <code>on_enterprise</code> <strong>will be removed</strong> in a future release, so update your projects to use <code>on_dedicated</code> instead as soon as possible.</li>\n</ul>\n<h2>[2.3.0] - 2019-09-19</h2>\n<h3>Added</h3>\n<ul>\n<li><code>get_primary_route</code> method for accessing routes marked \"primary\" in <code>routes.yaml</code>.</li>\n<li><code>get_upstream_routes</code> method returns an object map that includes only those routes that point to a valid upstream.</li>\n</ul>\n<h2>[2.2.3] - 2019-04-30</h2>\n<h3>Changed</h3>\n<ul>\n<li>Removes guard on <code>variables()</code> method.</li>\n</ul>\n<h2>[2.2.2] - 2019-04-29</h2>\n<h3>Changed</h3>\n<ul>\n<li>Refactors dynamic property access to be more permissive.</li>\n</ul>\n<h2>[2.2.1] - 2019-04-25</h2>\n<h3>Changed</h3>\n<ul>\n<li>More permissive check for relationships.</li>\n</ul>\n<h2>[2.2.0] - 2019-04-24</h2>\n<h3>Added</h3>\n<ul>\n<li><code>postgresql_dsn</code> credential formatter; returns a DSN appropriate for PostgreSQL connection.</li>\n</ul>\n<h2>[2.1.1] - 2019-03-22</h2>\n<h3>Changed</h3>\n<ul>\n<li>Fixes build issues in <code>has_relationship()</code> and <code>routes()</code> methods.</li>\n</ul>\n<h2>[2.1.0] - 2019-03-22</h2>\n<h3>Added</h3>\n<ul>\n<li><code>has_relationship</code> method to determine if a relationship is defined, and thus has credentials available.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Fixes <code>routes</code> method.</li>\n</ul>\n<h2>[2.0.4] - 2019-03-06</h2>\n<h3>Added</h3>\n<ul>\n<li>CircleCI configuration</li>\n</ul>\n\n          </div>"}, "last_serial": 6083512, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "6052452ea5128d8d857f5952528233ae", "sha256": "864c782c1d7c7cb0474c72d2ecb80ce0fe17f620591f40c9edc2a04ec93323a2"}, "downloads": -1, "filename": "platformshconfig-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6052452ea5128d8d857f5952528233ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9512, "upload_time": "2019-03-05T19:43:37", "upload_time_iso_8601": "2019-03-05T19:43:37.705763Z", "url": "https://files.pythonhosted.org/packages/86/ad/b2c38fce32de1bfb3575e736cfe14e4b4d3b1b3779d4a3a6451c3da363ea/platformshconfig-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10ecc3076c43da978fea12a17025c4c4", "sha256": "edd45069b1defd08a39f79afd4002ea6cf5af43059e21ba6d9f692fc4a8f1f69"}, "downloads": -1, "filename": "platformshconfig-2.0.0.tar.gz", "has_sig": false, "md5_digest": "10ecc3076c43da978fea12a17025c4c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11512, "upload_time": "2019-03-05T19:43:39", "upload_time_iso_8601": "2019-03-05T19:43:39.606042Z", "url": "https://files.pythonhosted.org/packages/c8/31/57c4f84b8eec71556fe8e0520bb53f2b4bcf8b63ec54704b1b39f1b96727/platformshconfig-2.0.0.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "ef5e6af9cdbafa54f369071c40701a19", "sha256": "c50fbafd84fb298eb3683e896e2553868b57c939d6eca2e9ab6ceb72b770b706"}, "downloads": -1, "filename": "platformshconfig-2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ef5e6af9cdbafa54f369071c40701a19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9510, "upload_time": "2019-03-06T19:13:55", "upload_time_iso_8601": "2019-03-06T19:13:55.871422Z", "url": "https://files.pythonhosted.org/packages/e1/25/4e2ecc10210b2b95431bd873c4cdef53d45dc8a25cb4fb53521401638a66/platformshconfig-2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5a0b0a14666f86620adebf6ab1fcca4", "sha256": "8404cfb4fb7d14dfda0a8a87d7358db84e5dfcb922fa8f1b96c4cc52ca082262"}, "downloads": -1, "filename": "platformshconfig-2.0.4.tar.gz", "has_sig": false, "md5_digest": "f5a0b0a14666f86620adebf6ab1fcca4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13101, "upload_time": "2019-03-06T19:13:57", "upload_time_iso_8601": "2019-03-06T19:13:57.211938Z", "url": "https://files.pythonhosted.org/packages/7a/8f/5fb76f434d2061a6597ada9b50dd382a22f5a0ed95176dfa9b2583eed5f8/platformshconfig-2.0.4.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "504ceadfab59fc58f0718c4557494f32", "sha256": "62437259baedc252aa3e75332e96c3d64722f6b7899cba56f70cae47fbc4b4a4"}, "downloads": -1, "filename": "platformshconfig-2.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "504ceadfab59fc58f0718c4557494f32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9644, "upload_time": "2019-03-25T17:26:59", "upload_time_iso_8601": "2019-03-25T17:26:59.475420Z", "url": "https://files.pythonhosted.org/packages/af/0f/b06786d024eee67e966b998db3270bd2f5ae9760f4ddd5a14764b36a24e0/platformshconfig-2.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58c757a10d6f0ac559ad09532807266a", "sha256": "a6df06ed3c099bfc0a87d6633f1658dddf687cfae15283566a3e1e9791801ac6"}, "downloads": -1, "filename": "platformshconfig-2.1.1.tar.gz", "has_sig": false, "md5_digest": "58c757a10d6f0ac559ad09532807266a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11129, "upload_time": "2019-03-25T17:27:00", "upload_time_iso_8601": "2019-03-25T17:27:00.578017Z", "url": "https://files.pythonhosted.org/packages/3e/6b/88117df23df0d8890bfcd37722173651b7c9bcc22f9b7953a440e6b62135/platformshconfig-2.1.1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "9de8ad58dfdfffa9bf1e34724acfda06", "sha256": "0132915986a2ae4f14a12e3d1580dd4e53c441cb4b45a7d6fd445b43fb92ff16"}, "downloads": -1, "filename": "platformshconfig-2.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9de8ad58dfdfffa9bf1e34724acfda06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9875, "upload_time": "2019-04-24T21:58:47", "upload_time_iso_8601": "2019-04-24T21:58:47.742780Z", "url": "https://files.pythonhosted.org/packages/13/e2/c60bb8a8b5e44128ac05ab01448beaa4fa5b5e3ad2023b6fffb888b50bc2/platformshconfig-2.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bedb12cdd06071672f5501933e85b52", "sha256": "1532423582bb412872a84b71f3c8ef302dfcffeaefdd768aec35d6bb538fcb57"}, "downloads": -1, "filename": "platformshconfig-2.2.0.tar.gz", "has_sig": false, "md5_digest": "2bedb12cdd06071672f5501933e85b52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11370, "upload_time": "2019-04-24T21:58:49", "upload_time_iso_8601": "2019-04-24T21:58:49.726552Z", "url": "https://files.pythonhosted.org/packages/2e/44/446f364f2e3f0f5c39c5e484e37ad97dbc5d941106d441e256be11232c8f/platformshconfig-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "c821b5e556de72b703d36574456c8f8e", "sha256": "c94666798e9259f6cf53101f1320b6f2318e553f9beb69cb883b599b6045c87d"}, "downloads": -1, "filename": "platformshconfig-2.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c821b5e556de72b703d36574456c8f8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9812, "upload_time": "2019-04-25T21:55:57", "upload_time_iso_8601": "2019-04-25T21:55:57.062779Z", "url": "https://files.pythonhosted.org/packages/a4/59/1b3a4a63597fa4ee8215753bf1b12c069fb7d937f9a6daec7fc5605c1b38/platformshconfig-2.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32db5a95923c797e581744516487801b", "sha256": "1567cf3ed6c107f9c3a230276c299b8fc1879e3f3e957eaf1aacda40bbed35cc"}, "downloads": -1, "filename": "platformshconfig-2.2.1.tar.gz", "has_sig": false, "md5_digest": "32db5a95923c797e581744516487801b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13762, "upload_time": "2019-04-25T21:55:59", "upload_time_iso_8601": "2019-04-25T21:55:59.047316Z", "url": "https://files.pythonhosted.org/packages/ad/34/3b9c528cc7874db17eff516378a68c878b389e41e5d06f9933385736d374/platformshconfig-2.2.1.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "2a373b1755fd72ba10b803bb604c28bd", "sha256": "d285702d2c1344fa1ae333356ae717fe102c7ac7cf61edd15d294e56e004839a"}, "downloads": -1, "filename": "platformshconfig-2.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2a373b1755fd72ba10b803bb604c28bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9848, "upload_time": "2019-04-30T16:10:07", "upload_time_iso_8601": "2019-04-30T16:10:07.690780Z", "url": "https://files.pythonhosted.org/packages/8c/77/b8ce55f73187b8b46b8f4766196df4638abbc4307a3c9d4e1ec30a1a9edb/platformshconfig-2.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8e05303fb15d72ce45612a5b228ca4d", "sha256": "effa9e10ac22cd641f0f4f618eb4c02307a43caa1b7c6dda86b3344bcd246f3d"}, "downloads": -1, "filename": "platformshconfig-2.2.3.tar.gz", "has_sig": false, "md5_digest": "d8e05303fb15d72ce45612a5b228ca4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11388, "upload_time": "2019-04-30T16:10:10", "upload_time_iso_8601": "2019-04-30T16:10:10.902780Z", "url": "https://files.pythonhosted.org/packages/17/02/8a2e9ad6637873aa10bc3b42c7158c4165c5846e6ce5f6820d13d7b764f6/platformshconfig-2.2.3.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "5470ebd48cd53a617697c0ce2f7e9131", "sha256": "8d259958040b1e9cf1cac9d2fd4628f3566964ecc398d1830c7cf1c572dff8f2"}, "downloads": -1, "filename": "platformshconfig-2.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5470ebd48cd53a617697c0ce2f7e9131", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10356, "upload_time": "2019-09-19T15:23:06", "upload_time_iso_8601": "2019-09-19T15:23:06.335206Z", "url": "https://files.pythonhosted.org/packages/64/3b/1210aca239bc33779a5c6d3693847e5928a588bc595e86e5e59e73ffc6ae/platformshconfig-2.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afb868417cbd7ee77ad97beefae2a2a3", "sha256": "e184bad25292c5e2dfaf3ddfcb6d0f83a7add0a8347520fdb69305b2206e8f6e"}, "downloads": -1, "filename": "platformshconfig-2.3.0.tar.gz", "has_sig": false, "md5_digest": "afb868417cbd7ee77ad97beefae2a2a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11907, "upload_time": "2019-09-19T15:23:08", "upload_time_iso_8601": "2019-09-19T15:23:08.193248Z", "url": "https://files.pythonhosted.org/packages/1b/f4/24ee5c5e639be98d717b76c047005aa97d395c0e7a17628179236247e1bd/platformshconfig-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "8c34c758b89659547e5ef431f4868de1", "sha256": "7a7fccc1eaebb255527a5875e85ac71c6f85a67576a9bd0f69df8078d1094319"}, "downloads": -1, "filename": "platformshconfig-2.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8c34c758b89659547e5ef431f4868de1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11135, "upload_time": "2019-11-05T22:39:53", "upload_time_iso_8601": "2019-11-05T22:39:53.845476Z", "url": "https://files.pythonhosted.org/packages/36/54/976b3941b3f6e09cb59ddcb712dfac1f470fd425e4fc76a0c77736c2bd8e/platformshconfig-2.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "615faff074ddbe6357d5c1b97b4a9e8f", "sha256": "7c44af99c8bce6c4b0fc4780f5156d2109500d2ef78f558c96622f77e71a0744"}, "downloads": -1, "filename": "platformshconfig-2.3.1.tar.gz", "has_sig": false, "md5_digest": "615faff074ddbe6357d5c1b97b4a9e8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14570, "upload_time": "2019-11-05T22:39:55", "upload_time_iso_8601": "2019-11-05T22:39:55.113253Z", "url": "https://files.pythonhosted.org/packages/b1/a2/92d625da9b0a4c29bc096c0ebe3fd0db53cb2ef9f5e4d299329810824d4f/platformshconfig-2.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c34c758b89659547e5ef431f4868de1", "sha256": "7a7fccc1eaebb255527a5875e85ac71c6f85a67576a9bd0f69df8078d1094319"}, "downloads": -1, "filename": "platformshconfig-2.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8c34c758b89659547e5ef431f4868de1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11135, "upload_time": "2019-11-05T22:39:53", "upload_time_iso_8601": "2019-11-05T22:39:53.845476Z", "url": "https://files.pythonhosted.org/packages/36/54/976b3941b3f6e09cb59ddcb712dfac1f470fd425e4fc76a0c77736c2bd8e/platformshconfig-2.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "615faff074ddbe6357d5c1b97b4a9e8f", "sha256": "7c44af99c8bce6c4b0fc4780f5156d2109500d2ef78f558c96622f77e71a0744"}, "downloads": -1, "filename": "platformshconfig-2.3.1.tar.gz", "has_sig": false, "md5_digest": "615faff074ddbe6357d5c1b97b4a9e8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14570, "upload_time": "2019-11-05T22:39:55", "upload_time_iso_8601": "2019-11-05T22:39:55.113253Z", "url": "https://files.pythonhosted.org/packages/b1/a2/92d625da9b0a4c29bc096c0ebe3fd0db53cb2ef9f5e4d299329810824d4f/platformshconfig-2.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:37 2020"}