{"info": {"author": "Constituent Voice", "author_email": "chris.brown@constituentvoice.com", "bugtrack_url": null, "classifiers": [], "description": "Velociwrapper\n=============\n\nVelociwrapper is a wrapper to create ORM like features around Elasticsearch indexes.\nVelociwrapper is not a true ORM since Elasticsearch isn't a relational database\n\nInstallation\n------------\n\n::\n\n    pip install Velociwrapper\n\nOr download manually and run setup.py \n\nGetting Started\n---------------\n\n::\n\n    # configuration\n    import velociwrapper\n    velociwrapper.config.dsn = [\"localhost\"]\n    velociwrapper.config.default_index = 'my_elasticsearch_index'\n    velociwrapper.config.results_per_page = 50\n    \n    from velociwrapper import VWBase, VWCollection\n    from velociwrapper.es_type import String, Integer, DateTime\n    from velociwrapper.mapper import Mapper # for creating or reindexing indexes\n\n    # create models, similar to SQLAlchemy\n\n    class User(VWBase):\n        \n        __index__ = 'user_index'  # each model can have a custom index. If omitted, uses the default\n        __type__ = 'user' # each model most specify the type. Cooresponds to the doc_type in Elasticsearch\n\n        username = String(analyzed=False) # keyword arguments can be used to affect the mapping \n        password = String(analyzed=False)\n        email = String()\n        permission_level = String('default_permission', analyzed=False) # ES Types can have default values\n        name = '' # Velociwrapper will automatically convert python types to the appropriate type (but you can't specify mappings)\n        created = DateTime() # defaults to current time\n        address = {} # models can also have nested information\n\n    # define a collection. You only need to specify the model\n    class Users(VWCollection):\n        __model__ = User\n\n    \n    if __name__ == '__main__':\n        # create indexes\n        Mapper().create_indices() # creates all defined VWBase models\n\n        # create a model\n        user = User(\n            username='johndoe',\n            password=some_encrypt_method('password'),\n            email='johndoe@example.com',\n            permission_level='admin',\n            name='John Doe',\n            address={ 'street': '123 Some Street', 'city':'Somewhere','state':'TX','zip':'75000' }\n            )\n        \n        # commit the info to the index\n        user.commit()\n\n        # (id is created automatically unless specified)\n        \n        # data is retrieved using a collection class\n\n        # search for a user by id\n        user_by_id = Users().get(user.id)\n\n        # search by another field and return 1 \n        user_by_username = Users().filter_by(username='johndoe').one()\n\n        # search by multiple fields\n        user_by_fields = Users().filter_by(username='johndoe', email='johndoe@example.com').one()\n\n        # or chain search conditions together\n        user_by_fields = Users().filter_by(username='johndoe').filter_by(email='johndoe@example.com').one()\n\n        # specify boolean conditions. ( all() gets all related records for the page)\n        users = Users().filter_by(username='johndoe', email='quazimoto@example.com', condition='or').all()\n\n        # find out how many records match the criteria in the entire index\n        user_count = Users().filter_by(username='johndoe', email='quazimoto@example.com', condition='or').count()\n\n        # or using len()\n        user_count = len(Users().filter_by(username='johndoe', email='quazimoto@example.com', condition='or'))\n\n        # nested objects can automatically be searched as well\n        users = Users().filter_by(city='Somewhere').all()\n\nVelociwrapper can do many more things. Read on!\n\n-----\n\nDear God, Why?\n--------------\n\nLike most things it started off as a useful tool and took on a life of its own.\nWe had a ton of code written around SQLAlchemy but wanted the power and convience of\nElasticSearch. We started off mapping results to objects and then added methods that make\nwriting most searches easier.\n\nConfiguration\n-------------\n\n*velociwrapper.config.dsn*\n\nA list of nodes to connect to. Each node can be a string hostname or a dict with options. \nSee http://elasticsearch-py.readthedocs.org/en/master/api.html#elasticsearch.Elasticsearch for valid values. \n(sets the value of the ``hosts`` parameter).  Defaults to ``localhost``.\n\n*velociwrapper.config.connection_params*\n\nA ``dict`` of additional parameters to pass to the client connection. \nSee http://elasticsearch-py.readthedocs.org/en/master/api.html#elasticsearch.Elasticsearch\nDefaults to ``{}``\n\n*velociwrapper.config.default_index*\n\nA string index to use if it is not specified in the model. Defaults to ``es_model``\n\n*velociwrapper.config.bulk_chunk_size*\n\nA few calls such as ``VWCollection.delete()``, ``VWCollection.commit()``, or  ``Mapper.reindex()`` can act on\nlarge collections. The ``bulk_chunk_size`` tells Elasticsearch how many records to operate on at a time.\nDefaults to 1000\n\n*velociwrapper.config.results_per_page*\n\nFor performance reasons Elasticsearch will not return large numbers of documents in a single call. As such\nreturn values are limited. This value is the default results but you can also pass the parameter to ``all()``\nto change the result for a single value. Defaults to 50\n\n*velociwrapper.config.strict_types*\n\nPerform type checks when creating objects. When ``True`` velociwrapper will throw an exception if the value\nyou're setting doesn't match the attribute's assigned type.\n\n**Configuration using environment variables**\n\nAll configuration variables can be set via the environment. \n\n``VW_DSN`` maps to ``dsn``. Can be a comma separated string or JSON\n\n``VW_CONNECTION_PARAMS`` maps to ``connection_params``. Must be JSON\n\n``VW_DEFAULT_INDEX`` maps to ``default_index``.  String\n\n``VW_BULK_CHUNK_SIZE`` maps to ``bulk_chunk_size``\n\n``VW_RESULTS_PER_PAGE`` maps to ``results_per_page``\n\n----\n\nTypes\n------------------\n\nElasticsearch is extremely flexible when it comes to adding types but less forgiving about changing them. To\nhelp with this we created a metaclass called ``ESType`` to define mappings used in Elasticsearch. The types are \nused when ``strict_types`` is on and both the mapping options and types are used when creating or reindexing the\nindices.  The mapping options are set in the metaclass, otherwise the types subclass normal Python types and \nare used the same way.\n\nUsing Velociwrapper's types is completely optional. If you define the models using normal Python types, everything\nwill work as expected. The biggest drawback is that Velociwrapper will not automatically be able to use filter\nsyntax on ``not_analyzed`` string fields.\n\nAll defaults in Velociwrapper's types are set to Elasticsearch's defaults:\nhttp://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html\n\nIn cases where the option begins with \"_\" Velociwrapper requires the underscore be appended rather than prepended.\n\n**Available Types**\n\n**String** *([str],\\*\\*kwargs)*\n    \nKeyword args:\n\n- ``analyzed``\n- ``norms``\n- ``index_options``\n- ``analyzer``\n- ``index_analyzer``\n- ``search_analyzer``\n- ``ignore_above``\n- ``position_offset_gap``\n- ``value_``\n- ``boost_``\n\nThe ``analyzed`` argument maps to ``index=analyzed|not_analyzed`` default is ``analyzed``\n\n**Number** *([number], \\*\\*kwargs)*\n\nGeneric number type. Normally you should use the number type classes that derive from this. If ``type`` is omitted\ndefaults to ``float``\n\nKeyword args:\n\n- ``type``\n- ``index_``\n- ``precision_step``\n- ``ignore_malformed``\n- ``coerce``\n\nThe following types use the same arguments (except for type which is specified automatically)\n\n- ``Float`` *([float], \\*\\*kwargs)*\n- ``Integer`` *([int], \\*\\*kwargs)*\n- ``Long`` *([float], \\*\\*kwargs)*\n- ``Short`` *([float], \\*\\*kwargs)*\n- ``Byte`` *([float], \\*\\*kwargs)*\n- ``Tokencount`` *([number],\\*\\*kwargs)*\n\n**Date** *([date|str] | [year int, month int, day int], \\*\\*kwargs)* and **DateTime** *([datetime|str] | [year int, month int, day int, [hour int, [minute int,[second int, [microsecond int]]]]], \\*\\*kwargs)*\n\nKeyword args:\n\n- ``format``\n- ``precision_step``\n- ``ignore_malformed``\n\n**Array** - new in 1.0.8\n\nSpecial type that specifies a list of items that are a single type. Accepts any keyword argument above. ``type_`` keyword specifies the type to be used. Default is string\n\n**Binary** *()*\n\nExperimental. Keyword arguments:\n\n- ``compress``\n- ``compress_threshold``\n\n**IP** *([str])*\n\nKeyword args:\n\n- ``precision_step``\n\n**GeoShape** / **GeoPoint**\n\nExperimental. Will work as regular objects as well.\n\n----\n\nType Functions\n--------------\n\n**create_es_type** *(value)*\n\nTakes ``value`` and returns the equivalent Elasticsearch type. If an appropriate type cannot be determined then the value itself is returned.\n\n----\n\nModels\n---------------\n\nCreate a model by defining the name of the model and extending ``VWBase`` (or a subclass of ``VWBase``).\nProperties for the model should be statically defined. They can be ESTypes as described above or as regular\nPython types. Values set in the model are defaults in each instance.\n\nThe ``__type__`` attribute is required and maps to the Elasticsearch ``doctype``. ``__index__`` is recommended\nbut if it is not present then the value of ``velociwrapper.config.default_index`` is used.\n\nExample:\n\n::\n\n    class User(VWBase):\n        __index__ = 'user_index'\n        __type__ = 'user'\n        username = String(analyzed=False)\n        password = String(analyzed=False)\n        email = String(analyzed=False)\n        name = String()\n        profile_image = String('default.jpg')\n\n\nOr without using ESTypes:\n\n::\n\n    class User(VWBase):\n        __index__ = 'user_index'\n        __type__ = 'user'\n        username = ''\n        password = ''\n        email = ''\n        name = ''\n        profile_image = ''\n\nThe added benefit of using ESTypes is specifying the mappings. This helps velociwrapper know what kind of searches to build\nand can create the mappings for you, if you haven't specified them yourself.\n\nOnce models are created they must be committed to save into the Elasticsearch cluster\n\n::\n\n    u = User(\n        username='jsmith', \n        password=crypt_method('password123'), \n        email='jsmith@example.com', \n        name='John Smith', \n        profile_image='jsmith.jpg'\n        )\n\n    u.commit()\n\nThe call to ``commit()`` generates an id for the document. If you want to explicitly set the id first, you can set the id attribute:\n\n::\n\n    u = User( ... )\n    u.id = 'my-unique-id'\n    u.commit()\n\n*Be careful!*. IDs have to be unique across all types in your index. If your ID is not unique, the ID specified will be updated by\nyour new data. It is recommended to let Velociwrapper handle ID creation unless you're certain of what you're doing.\n\n**Model API**\n\n**collection** *()*\n\nReturns a ``VWCollection`` for this model. If a custom subclass has been defined it will be returned. Otherwise a new collection will be created.\n\n**commit** *()*\n\nCommits the model to Elasticsearch. New models will be created as new documents. Existing models will be updated.\n\n**delete** *()*\n\nDeletes the cooresponding document from Elasticsearch. New operations cannot be performed on the model once it is marked\nfor delete.\n\n**sync** *()*\n\nSyncs the document in Elasticsearch to the model. Overwrites any uncommitted changes.\n\n**to_dict** *()*\n\nConverts the model to a dictionary. Very useful for outputting models to JSON web services. This method is intended to be overridden for\ncustom output.\n\n**more_like_this** *()*\n\nPerforms a search to get documents that are \"like\" the current document. Returns a VWCollectionGen.\n\n----\n\nCollections\n------------\n\nCollections are used to search and return collections of models. Searches can be chained together to create complex queries of Elasticsearch\n(much like SQLAlchemy). Currently collections are of one document type only. This may change in a future release.\n\nExample:\n    \n::\n\n    # all users named john\n    users = Users().filter_by(name='John').all()\n\n    # users named john who live in texas\n    users = Users().filter_by(name='John', state='TX').all()\n\n    # another way to write the same as above\n    users = Users().filter_by(name='John').filter_by(state='TX').all()\n\nBy default chained criteria are joined with \"AND\" (\"must\" in most cases internally). But can be controlled:\n\n::\n\n    # users who live in texas or are named john:\n    users = Users().filter_by(name='John', state='TX', condition='or').all()\n\nFor more complex queries see the ``raw()`` method and the QDSL module.\n\n**Creating Collections**\n\nCreated a collection by calling ``Model().collection()``. If a subclass of the collection exists it will be created and returned\notherwise an base collection will be created for the model by calling ``VWCollection(baseobj=Model)``.  ``collection()`` is \nconvienent because it allows collections and models to be defined in separate files without recursive import errors.\n\nWhen creating a subclass for a collection, specify the model using the ``__model__`` property.\n\n::\n\n    class Users(VWCollection):\n        __model__ = User\n\n**Conditions**\n\nConditions in Elasticsearch are a little tricky. Internally the ``bool`` queries / filters are used. Instead of the traditional\n``and``, ``or``, ``not``. Elasticsearch uses ``must``, ``should`` and ``must_not``. To make things a bit more interesting the\ntraditional boolean values exist as well and Elasticsearch recommends they be used is certain cases (such as geo filters) \nVelociwrapper converts ``and``, ``or``, ``not`` to the Elasticsearch equivalents except in the case of ``search_geo()``.\n\nThe ``must``, ``should``, ``must_not`` options can be used instead and will work. ``minimum_should_match`` is also available. If \nthe explicit options are needed you can use ``explicit_and``, ``explicit_or``, and ``explicit_not``.\n\nConditions can become complex very quickly. Velociwrapper tries to take a \"do what I mean\" approach to chained conditions. First\nthe current filter is checked for a specific condition. If no condition exists then the *preceeding* condition is used. If there\nis no preceeding condition, the condition is set to and/must by default.\n\nExamples:\n\n::\n\n    # get users in named John or Stacy  \n    users = Users().filter_by(name='John').filter_by(name='Stacy', condition='or').all()\n\n    # equivalent because the second filter_by() will use the preceeding or condition:\n    users = Users().filter_by(name='John', condition='or').filter_by(name='Stacy').all()\n\n    # add another condition, such as state, might not always do what we expect. This would return anyone\n    # who's name is stacy or john or lives in Texas\n    users = Users().filter_by(name='John').filter_by(name='Stacy', condition='or').filter_by(state='TX').all()\n\n    # (john or stacy) and state\n    users = Users().filter_by(name='John').filter_by(name='Stacy', condition='or').filter_by(state='TX',condition='and').all()\n\nObviously order matters. For more complex queries the other option is to use the ``raw()`` method and the QDSL module (see below)\n\n**API**\n\nMethods marked chainable internally change the search query to affect the output on ``all()``, ``delete()``, and ``one()``. Chainable methods can be\ncalled multiple times with different parameters.\n\n**all** *(\\*\\*kwargs)*\n\nExecutes the current search and returns ``results_per_page`` results. (default 50). ``results_per_page`` is specified in ``velociwrapper.config.results_per_page``\nbut can also be specified by keyword arguments. \n\nIf no search has been specified, Velociwrapper will call ``match_all``.\n\nIf no results are matched ``all()`` returns an empty VWCollectionGen.\n\nArguments:\n\n- ``results_per_page`` *int*: number of results to return\n- ``size`` *int*: same as results_per_page\n- ``start`` *int*: Record count to start with\n\n**clear_previous_search** *()*\n\nClear all search parameters and reset the object. Even after a call to an output method the search can be output again. This allows the collection to be reused.\nGenerally its better to create a new object.\n\n**commit** *([callback=callable])*\n\nBulk commits a list of items specified on ``__init__()`` or if no items were specified will bulk commit against the items matched in the current search. (be careful! Calling something like Users().commit() will commit all users!)\n\nThe ``callback`` argument should be a callable. The raw item will be passed to it and it must return either a ``dict`` or a ``VWBase`` \n(model) object.  Note that velociwrapper does not call each model's ``commit()`` or ``to_dict()`` methods but rather issues the request\nin bulk. Thus you cannot affect the behavior by overriding these methods. Use the ``callback`` to make changes or change the items before\npassing them to the collection.\n\nAs of 2.0 it is also possible to register a callback to manipulate items in the commit. See \"Callbacks\".\n\n**count** *()*\n\nReturns the total number of documents matched (not that will be returned!) by the search. \n\n**delete** *(\\*\\*kwargs)*\n\nDelete the records specified by the search query.\n\n**delete_in** *(ids=list)*\n\nDelete the records specified by a list of ids. Equivalent to:\n\n::\n\n    Users().filter_by(ids=list_of_ids).delete()\n\n**exact** *(field=str, value=mixed)*\n\nChainable. Find records where ``field`` is the exact ``value``. String based fields **must** be specified as ``not_analyzed`` in the index. Otherwise results\nmay not be as expected.  ``exact()`` is more for completeness. ``filter_by()`` uses exact values when available. The only difference is ``exact()``\nwill warn if the field cannot be searched while ``filter_by()`` silently converts to a query.\n\nKeyword arguments:\n\n- ``boost`` *float*: An explicit boost value for this boolean query\n- ``condition`` *str*: \"and\",\"or\",\"not\",\"explicit_and\",\"explicit_or\",\"explicit_not\",\n- ``minimum_should_match`` *int*: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1\n- ``with_explicit`` *str*: \"and\",\"or\",\"not\". Only used if explicit conditions exist and there's a question of how an additional condtion should be added to the query. \n\n**exists** *(field, [kwargs])*\n\nChainable. Find records if the specified field exists is the document.\n\nKeyword arguments:\n\n- ``boost`` *float*: An explicit boost value for this boolean query\n- ``condition`` *str*: \"and\",\"or\",\"not\",\"explicit_and\",\"explicit_or\",\"explicit_not\",\n- ``minimum_should_match`` *int*: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1\n- ``with_explicit`` *str*: \"and\",\"or\",\"not\". Only used if explicit conditions exist and there's a question of how an additional condtion should be added to the query. \n\n**filter_by** *([condition], kwargs)*\n\nChainable. Filter or query elasticsearch for ``field=\"search\"``. Automatically creates filters or queries based on field mappings. If the ``search`` parameter is a list, filter_by will create\nan ``in()`` filter / query. ``condition`` can be set as the first argument or passed as a keyword argument.\n\nKeyword arguments\n\n- ``[field]`` *str*: A field in the document set to the value to try to find.\n- ``id`` *value*: Explicitly search for particular id. \n- ``ids`` *list*: Explicitly search for using a list of ids. \n- ``boost`` *float*: An explicit boost value for this boolean query\n- ``condition`` *str*: \"and\",\"or\",\"not\",\"explicit_and\",\"explicit_or\",\"explicit_not\",\n- ``minimum_should_match`` *int*: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1\n- ``with_explicit`` *str*: \"and\",\"or\",\"not\". Only used if explicit conditions exist and there's a question of how an additional condtion should be added to the query. \n\n**multi_match** *(fields=list,query=str,\\*\\*kwargs)*\n\nChainable. Search the list of fields for the value of query. Accepts standard kwargs arguments.\n\n**get** *(id=value)*\n\nReturns the single record specified by ``id`` or ``None`` if it does not exist.\n\n**get_in** *(ids=list)*\n\nReturns a list of records specified by the list of ids or an empty list if no ids exist. Note this method cannot be sorted. If sorting is needed it is better to call\n\n::\n\n    filter_by(ids=list).sort(...).all()\n\n**get_like_this** *(id)*\n\nReturns records like the document specified by id or an empty list if none exists. Note this method cannot be sorted.\n\n**\\_\\_init\\_\\_** *([items=list],[\\*\\*kwargs])*\n\nCreate a collection. If ``items`` are specified they are stored internally to ``commit()`` in bulk. Stored items must be models (subclassing ``VWBase``) or ``dict``.\n\nKeyword arguments:\n\n- ``bulk_chunk_size`` *int*: override default chunk size for this collection\n- ``results_per_page`` *int*\n\n**\\_\\_len\\_\\_** *()*\n\nSame as ``count()``. Allows for the entire collection to be passed to ``len()``\n\n**missing** *(field=str,\\*\\*kwargs)*\n\nChainable. Finds records where the specified ``field`` is missing\n\nKeyword arguments:\n\n- ``boost`` *float*: An explicit boost value for this boolean query\n- ``condition`` *str*: \"and\",\"or\",\"not\",\"explicit_and\",\"explicit_or\",\"explicit_not\",\n- ``minimum_should_match`` *int*: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1\n- ``with_explicit`` *str*: \"and\",\"or\",\"not\". Only used if explicit conditions exist and there's a question of how an additional condtion should be added to the query. \n\n**one** *()*\n\nExecutes the search and returns the first record only. Raises ``NoResultFound`` if the search did not match any documents.\n\n**range** *(field=str, \\*\\*kwargs)*\n\nChainable. Filters the results by a range of values in ``field``. The keyword arguments coorespond to arguments used by the range filter\nin Query DSL: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-range-query.html\n\nOther search keywords are available except for ``boost``. ``boost`` affects the range query itself. Keyword arguemtns are:\n\n- ``gte`` *number or date*: greater than or equal\n- ``gt`` *number or date*: greater than\n- ``lte`` *number or date*: less than or equal\n- ``lt`` *number or date*: less than\n- ``boost`` *float*: boost value for the range query itself\n- ``time_zone`` *str*: timezone offset. Only used if comparison is a date and doesn't contain a timezone offset already.\n- ``condition`` *str*: \"and\",\"or\",\"not\",\"explicit_and\",\"explicit_or\",\"explicit_not\",\n- ``minimum_should_match`` *int*: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1\n- ``with_explicit`` *str*: \"and\",\"or\",\"not\". Only used if explicit conditions exist and there's a question of how an additional condtion should be added to the query. \n\n**raw** *(rawquery=dict)*\n\nExecute a raw Query DSL query.  Chainable but all other search filters are ignored. Can still be used with ``sort()``.\n\n***search** *(query=string)*\n\nExecute a Lucene query against the server. Chainable.\n\n**search_geo** *(field=str,distance=float,lat=float,lon=float,\\*\\*kwargs)*\n\nChainable. Filter the search based on distance from a geopoint.\n\n- ``boost`` *float*: An explicit boost value for this boolean query\n- ``condition`` *str*: \"and\",\"or\",\"not\",\"explicit_and\",\"explicit_or\",\"explicit_not\",\n- ``minimum_should_match`` *int*: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1\n- ``with_explicit`` *str*: \"and\",\"or\",\"not\". Only used if explicit conditions exist and there's a question of how an additional condtion should be added to the query. \n\n**sort** *(\\*\\*kwargs)*\n\nChainable (and can appear anywhere before an output method, including by having other filters chained to it). Arguments are ``field=asc|desc``. ``asc`` sorts the field\nfirst to last. ``desc`` sorts the field last to first. ``asc`` is the default.\n\n----\n\nAdditional Methods for ``VWCollectionGen``\n------------------------------------------\n\n``VWCollectionGen`` is returned by calls from ``VWCollection.all()`` and ``VWCollection.get_in()``. \n\n**results** *(self)*\n\nReturns the underlying ElasticSearch results. Useful for getting meta information\n\nQuery Bodies with ``querybuilder.QueryBody`` \n--------------------------------------------\n\nUnderlying chainable methods is the ``querybuilder.QueryBody`` class. This class helps build simple query bodies\nfor Elasticsearch but attempts not to get too crazy. It stores an internal structure of the query and then\nbuilds it into a ``dict`` that can be passed to the underlying Elasticsearch client.  The class is used internally\nby ``VWCollection`` but you could use it directly to build queries to then pass to the ``raw()`` method.\n\n``QueryBody`` only supports queries and filters. For other wrappers, such as constant_score, you'll need to manually\nbuild the queries by hand or with the ``QDSL`` functions described below.\n\n**QueryBody methods**\n\n**chain** *(self, newpart=dict, \\*\\*kwargs)*\n\nChains a new part of the query into the existing query. Newpart must be a ``dict`` with additional query parameters\nto pass to Elasticsearch. Note that ``newpart`` is not checked for correctness. \n\nReturns ``self`` so additional methods can be called. \n\nKeyword Arguments:\n\n- ``type`` *string*: either \"query\" or \"filter\". If not specified checks ``newpart`` for one of these keywords. Otherwise uses \"query\"\n- ``condition`` *string*: must|should|must_not|and|or|not. Defaults to \"must\". Specifies how this part of the query is treated in relation to the existing query\n- ``with_explicit`` *string*: and|or|not. Included for legacy purposes. Overrides ``condition`` and is useful if a nested bool was manually created. Generally should not be used.\n\n**is_filtered** *(self)*\n\nReturns ``True`` if the current query body contains a filter.\n\n**is_query** *(self)*\n\nReturns ``True`` if the current query body contains a query other than ``match_all {}``\n\n**build** *(self)*\n\nBuilds the current query into a representation understood by Elasticsearch. Returns ``dict``\n\n----\n\nQDSL and Building Raw Queries\n-----------------------------\n\n``velociwrapper.qdsl`` contains functions to help make writing QDSL easier.\n\n**QDSL Functions**\n\n**query** *(params=dict)*\n\nReturns ``params`` wrapped by ``{ \"query\": params }``\n\n**filter_** *(params=dict)*\n\nReturns ``params`` wrapped by ``{ \"filter\": params }``.\n\nNote the \"_\" appended to ``filter_`` to prevent confusion with Python's ``filter()``\n\n**match** *(field=str,value=str|dict,\\*\\*kwargs)*\n\nReturns ``{\"match\": { field: { \"query\": value } } }``\n\nAdditional keyword arguments should be Elasticsearch arguments on ``match``\n\n**match_phrase** *(field=str,value=str|dict,\\*\\*kwargs)*\n\nEquivalent to ``match(field,value,type=\"phrase\")``\n\n**match_phrase_prefix** *(field=str,value=str|dict,\\*\\*kwargs)*\n\nEquivalent to ``match(field,value,type=\"phrase_prefix\")``\n\n**multi_match** *(query=str|dict, fields=list,\\*\\*kwargs)*\n\nReturns ``{\"multi_match\": {\"query\": query, \"fields\": fields } }``\n\nAdditional keyword arguments should be Elasticsearch arguments on ``multi_match``\n\n**bool_** *(\\*args,\\*\\*kwargs)*\n\nArgs are any number of dicts containing \"must\", \"should\" or \"must_not\" keys. Note the appended \"_\" to prevent\nconfusion with Python's ``bool``.\n\nKeyword arguments are Elasticsearch options for ``bool`` such as ``minimum_should_match``\n\nExample:\n\n::\n\n    from velociwrapper.qdsl import bool_, must, must_not, match\n    mybool = bool_(\n        must( match('foo','some value') ), \n        must_not( match( 'bar', 'some other value' ) )\n    )\n\nSpecial Keyword arguments\n\n- *__vw_set_current* *dict*: set a current ``bool`` dictionary that will be updated rather than creating a blank one.\n\n**must** *(params=str|dict, value=str|dict|None,\\*\\*kwargs)*\n\nCreates a ``must`` arguement for ``bool``. If params is a ``dict`` then it is passed on directly. If it is a string or value\nis set then the params are treated as a field name and passed to ``term``.\n\nExample:\n\n::\n\n    must( match('foo', 'some value' ) )\n    # returns { \"must\": { \"match\": { \"foo\": {\"query\": \"some value\" } } } }\n\n    must('foo', 'some value' ) )\n    # returns { \"must\": { \"term\" { \"foo\": {\"value\": \"some value\" } } } }\n\n**must_not** *(params=str|dict,value=str|dict|None,\\*\\*kwargs)*\n\nLike ``must`` but uses \"must_not\"\n\n**should** *(params=str|dict,value=str|dict|None,\\*\\*kwargs)*\n\nLike ``must`` but uses \"should\"\n\n**term** *(field=str, value=str,\\*\\*kwargs)*\n\nLike ``match`` but for filters\n\n**terms** *(field=str,value=list,\\*\\*kwargs)*\n\nLike ``term`` but values are a list of strings to match in a field.\n\n**boosting** *(\\*args, \\*\\*kwargs)*\n\nSimilar to ``bool`` allows any number of dicts with the key ``positive`` or ``negative``. Keyword arguments are options\npassed to ``boosting``\n\n**positive** *(field,value)*\n\nReturns ``{ \"positive\": { \"term\": { field: value } } }``\n\n**negative** *(field,value)*\n\nReturns ``{ \"negative\": {\"term\": { field:value } } }``\n\n**common** *(field, value, \\*\\*kwargs)*\n\nReturns ``{ \"common\": { field: { \"query\": value } } }``\n\nKeyword arguments are passed as additional key values to the ``field`` dict.\n\n**constant_score** *(\\*args, \\*\\*kwargs)*\n\nArguments should be ``dict``. A single argument is wrapped directly by ``constant_score``. In the case of multiple arguments the function searches each\nfor ``query`` or ``filter`` keys to wrap in the output.\n\n**filtered** *(\\*args, \\*\\*kwargs)*\n\nArguments should be ``dict``. A single argument is wrapped directly by ``filtered``. In the case of multiple arguments the function searches each\nfor ``query`` or ``filter`` keys to wrap in the output.\n\nAdditional keyword arguments are set on the ``filtered`` dict.\n\n**function_score** *(\\*args, \\*\\*kwargs)*\n\nArguments should be ``dict``. A single argument is wrapped directly by ``function_score``. In the case of multiple arguments the function searches each\nfor ``query``, ``filter``, ``FUNCTION``, or ``functions`` keys to wrap in the output. No magic happens here to check the validity of the functions!\n\nKeyword arguments are set on the ``function_score`` dict.\n\n**fuzzy**\n\n**ids**\n\n**query_term**\n\n**indices**\n\n**match_all**\n\n**more_like_this**\n\n**nested**\n\n**prefix**\n\n**query_string**\n\n**simple_query_string**\n\n**range**\n\n**regexp**\n\n**span_term**\n\n**span_first**\n\n**span_multi**\n\n**span_near**\n\n**span_not**\n\n**span_or**\n\n**wildcard**\n\n**and_**\n\n**or_**\n\n**not_**\n\n**exists**\n\n**geo_bounding_box**\n\n**geo_distance**\n\n**geo_range**\n\n**geo_polygon**\n\n**geo_shape**\n\n**geohash_cell**\n\n**has_child**\n\n**has_parent**\n\n**missing**\n\n**script**\n\n**type_**\n\n\n----\n\nMapper\n------\n\nUse the mapper by importing it:\n\n::\n\n    from velociwrapper.mapper import Mapper\n\nThe Mapper class has utilities for managing the Elasticsearch index.\n\n**Mapper API**\n\n**get_index_map** *(\\*\\*kwargs)*\n\nSearches for currently loaded VWBase models and returns the their indexes as defined by code, along with their mappings. The only keyword argument is ``index``, passed to specify \na particular index or group of indexes (must be a ``str`` or ``list``).\n\n**get_server_map** *(\\*\\*kwargs)*\n\n*New in version 1.0.10*. Like *get_index_map()*, but returns the mapping as saved on the server.\n\n**create_indices** *(\\*\\*kwargs)*\n\nCreates indexes based on currently loaded VWBase models or for the index or indexes specified by the ``index`` keyword argument.\n\n**get_index_for_alias** *(alias=str)*\n\nReturn the name of the index for the specified ``alias``. If ``alias`` is an index, then the same name will be returned.\n\n**reindex** *(index=str,newindex=str,\\*\\*kwargs)*\n\nRe-indexes the specified index to a new index. Useful for making model changes and then creating them in Elastic search\n\nKeyword arguments\n\n- ``alias_name`` *string*: specify a new alias name when re-mapping an alias. If omitted the previous alias name is used.\n- ``remap_alias`` *bool*: Aliases the index under a new name. Useful for making on-the-fly changes\n\n**describe** *(cls=class)*\n\nOutput the index mapping for a VWBase class.\n\n----\n\nCallbacks\n---------\n\nThere are several events built-in to Velociwrapper on which you can register callbacks. \nCallbacks are registered at the class level so all instances will have the callback. You \ncan also register multiple methods for the same event. Callbacks recieve the instance and \na single (optional) argument. The argument is returned. In the case of multiple callbacks \non an event, the callbacks are fired in the order they were registered. The return value \nfrom one method is passed to the next as the argument.\n\nExample:\n\n::\n\n    from your_models import Document\n    \n    # check a user for entry in another database\n    def doc_database_check( vwinst, argument=None ):\n        if not doc_in_database(vwinst.id):\n            insert_into_database( vwinst.id, vwinst.name, vwinst.content ) # or whatever\n            return argument \n\n    Document.register_callback( 'after_commit', doc_database_check )\n\nCallbacks are defined in the ``VWCallback`` class in base.py. ``VWCollection`` and ``VWBase`` \nderive from ``VWCallback``\n\n**Callback API**\n\n**register_callback** *(cls, callback_event=str, callback=callable)* *- classmethod*\n\nRegister a callback for the event *callback_event* on the collection or base class. This is a class method,\nthe callback becomes active on all instances.\n\n**deregister_callback** *(cls, callback_event=str, callback=callable|str)* *- classmethod*\n\nDeregister a callback for the event *callback_event* by its name or original function *callback*. Returns None\neven if there was not a callback by the name or for the event.\n\n**execute_callbacks** *(self, event=string, argument=None, \\*\\*kwargs)*\n\nExecutes the current instances callbacks for *event* in the order they were registered. Returns *argument*.\nIf no callback was registered for the event the method returns *None*\n\n**Available Events**\n\n*before_manual_create_model*\n\nExecuted when a model instance is created directly but not when the model is created as the result of a search.\n*argument* is ignored, only the model's instance is passed. The event fires before mapping information is copied\nfrom the class and before the id is created.  An example use is a custom ID creation method.\n\n*after_manual_create_model*\n\nExecuted when a model instance is created directly but not when the model is created as the result of a search.\n*argument* is ignored, only the model's instance is passed. The event fires after the class variables are copied\nto the instance, *id* is created, and the *__index__* is set.\n\n*on_delete*\n\nExecuted when ``commit()`` is called on a deleted instance. Fires just before the underlying DELETE to Elasticsearch.\nArgument is ignored. Does not execute on a bulk delete call in ``VWCollection``.\n\n*before_commit*\n\nExecuted before the INDEX call to Elasticsearch. The argument is ignored. Does not execute on bulk commit calls in\n``VWCollection``.\n\n*after_commit*\n\nExecuted after the INDEX call to Elasticsearch. The argument is ignored. Does not execute on bulk commit calls in\n``VWCollection``.\n\n*before_sync*\n\nExecuted before retrieveing the underlying document from Elasticsearch to sync the object. The argument is ignored. \n\n*after_sync*\n\nExecuted after variables from Elasticsearch have overwritten object attributes. The argument is ignored.\n\n*before_query_build*\n\nExecuted just before a search query is created. The argument is the current ``QueryBody``.\n\n*after_query_build*\n\nExecutes after the search query is created as a ``dict``. The argument is the ``dict`` to be passed to the Elasticsearch client.\n\n*on_bulk_commit*\n\nExecutes for each item before being appended to a bulk commit operation. The argument is the item. The item can be a \n``dict`` source document or a ``VWBase`` object depending on what was passed to the collections items. (If the commit\ncriteria was a search query then ``VWBase`` objects are passed.\n\n*before_auto_create_model*\n\nExecutes after a source document is retrieved from Elasticsearch but before the document is converted to a model\ninstance. Note this does not fire until accessed in the ``VWCollectionGen`` generator. The argument passed is the\nsource document\n\n*after_auto_create_model*\n\nExecutes after the a source document result is converted to a model instance. Does not occur until the model \ninstance is accessed in the generator. Due to the way the generator works the instance passed to the callback\nis empty, while the argument is the newly created instance to manipulate.\n\n**Creating New Events**\n\nYou can register your own events and fire them yourself.\n\n::\n\n    # register an event when your generic document is something specific\n    def is_pdf(inst, argument=None, **kwargs):\n        # do something\n        return argument\n\n    Document.register_callback( 'on_edit', is_pdf )\n\n    # then somewhere in your code (maybe an edit function?)\n    document_instance.execute_callbacks('on_edit')\n\n----\n\nAUTHOR\n------\n\nChris Brown, Drew Goin and Boyd Hitt \n\n----\n\nCOPYRIGHT\n---------\n\nCopyright (c) 2015-2019 Constituent Voice LLC", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/constituentvoice/Velociwrapper", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "Velociwrapper", "package_url": "https://pypi.org/project/Velociwrapper/", "platform": "", "project_url": "https://pypi.org/project/Velociwrapper/", "project_urls": {"Homepage": "https://github.com/constituentvoice/Velociwrapper"}, "release_url": "https://pypi.org/project/Velociwrapper/2.1.0/", "requires_dist": null, "requires_python": "", "summary": "Wrapper to create models and collections around Elastic Search", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Velociwrapper is a wrapper to create ORM like features around Elasticsearch indexes.\nVelociwrapper is not a true ORM since Elasticsearch isn\u2019t a relational database</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install Velociwrapper\n</pre>\n<p>Or download manually and run setup.py</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<pre># configuration\nimport velociwrapper\nvelociwrapper.config.dsn = [\"localhost\"]\nvelociwrapper.config.default_index = 'my_elasticsearch_index'\nvelociwrapper.config.results_per_page = 50\n\nfrom velociwrapper import VWBase, VWCollection\nfrom velociwrapper.es_type import String, Integer, DateTime\nfrom velociwrapper.mapper import Mapper # for creating or reindexing indexes\n\n# create models, similar to SQLAlchemy\n\nclass User(VWBase):\n\n    __index__ = 'user_index'  # each model can have a custom index. If omitted, uses the default\n    __type__ = 'user' # each model most specify the type. Cooresponds to the doc_type in Elasticsearch\n\n    username = String(analyzed=False) # keyword arguments can be used to affect the mapping\n    password = String(analyzed=False)\n    email = String()\n    permission_level = String('default_permission', analyzed=False) # ES Types can have default values\n    name = '' # Velociwrapper will automatically convert python types to the appropriate type (but you can't specify mappings)\n    created = DateTime() # defaults to current time\n    address = {} # models can also have nested information\n\n# define a collection. You only need to specify the model\nclass Users(VWCollection):\n    __model__ = User\n\n\nif __name__ == '__main__':\n    # create indexes\n    Mapper().create_indices() # creates all defined VWBase models\n\n    # create a model\n    user = User(\n        username='johndoe',\n        password=some_encrypt_method('password'),\n        email='johndoe@example.com',\n        permission_level='admin',\n        name='John Doe',\n        address={ 'street': '123 Some Street', 'city':'Somewhere','state':'TX','zip':'75000' }\n        )\n\n    # commit the info to the index\n    user.commit()\n\n    # (id is created automatically unless specified)\n\n    # data is retrieved using a collection class\n\n    # search for a user by id\n    user_by_id = Users().get(user.id)\n\n    # search by another field and return 1\n    user_by_username = Users().filter_by(username='johndoe').one()\n\n    # search by multiple fields\n    user_by_fields = Users().filter_by(username='johndoe', email='johndoe@example.com').one()\n\n    # or chain search conditions together\n    user_by_fields = Users().filter_by(username='johndoe').filter_by(email='johndoe@example.com').one()\n\n    # specify boolean conditions. ( all() gets all related records for the page)\n    users = Users().filter_by(username='johndoe', email='quazimoto@example.com', condition='or').all()\n\n    # find out how many records match the criteria in the entire index\n    user_count = Users().filter_by(username='johndoe', email='quazimoto@example.com', condition='or').count()\n\n    # or using len()\n    user_count = len(Users().filter_by(username='johndoe', email='quazimoto@example.com', condition='or'))\n\n    # nested objects can automatically be searched as well\n    users = Users().filter_by(city='Somewhere').all()\n</pre>\n<p>Velociwrapper can do many more things. Read on!</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"dear-god-why\">\n<h2>Dear God, Why?</h2>\n<p>Like most things it started off as a useful tool and took on a life of its own.\nWe had a ton of code written around SQLAlchemy but wanted the power and convience of\nElasticSearch. We started off mapping results to objects and then added methods that make\nwriting most searches easier.</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p><em>velociwrapper.config.dsn</em></p>\n<p>A list of nodes to connect to. Each node can be a string hostname or a dict with options.\nSee <a href=\"http://elasticsearch-py.readthedocs.org/en/master/api.html#elasticsearch.Elasticsearch\" rel=\"nofollow\">http://elasticsearch-py.readthedocs.org/en/master/api.html#elasticsearch.Elasticsearch</a> for valid values.\n(sets the value of the <tt>hosts</tt> parameter).  Defaults to <tt>localhost</tt>.</p>\n<p><em>velociwrapper.config.connection_params</em></p>\n<p>A <tt>dict</tt> of additional parameters to pass to the client connection.\nSee <a href=\"http://elasticsearch-py.readthedocs.org/en/master/api.html#elasticsearch.Elasticsearch\" rel=\"nofollow\">http://elasticsearch-py.readthedocs.org/en/master/api.html#elasticsearch.Elasticsearch</a>\nDefaults to <tt>{}</tt></p>\n<p><em>velociwrapper.config.default_index</em></p>\n<p>A string index to use if it is not specified in the model. Defaults to <tt>es_model</tt></p>\n<p><em>velociwrapper.config.bulk_chunk_size</em></p>\n<p>A few calls such as <tt>VWCollection.delete()</tt>, <tt>VWCollection.commit()</tt>, or  <tt>Mapper.reindex()</tt> can act on\nlarge collections. The <tt>bulk_chunk_size</tt> tells Elasticsearch how many records to operate on at a time.\nDefaults to 1000</p>\n<p><em>velociwrapper.config.results_per_page</em></p>\n<p>For performance reasons Elasticsearch will not return large numbers of documents in a single call. As such\nreturn values are limited. This value is the default results but you can also pass the parameter to <tt>all()</tt>\nto change the result for a single value. Defaults to 50</p>\n<p><em>velociwrapper.config.strict_types</em></p>\n<p>Perform type checks when creating objects. When <tt>True</tt> velociwrapper will throw an exception if the value\nyou\u2019re setting doesn\u2019t match the attribute\u2019s assigned type.</p>\n<p><strong>Configuration using environment variables</strong></p>\n<p>All configuration variables can be set via the environment.</p>\n<p><tt>VW_DSN</tt> maps to <tt>dsn</tt>. Can be a comma separated string or JSON</p>\n<p><tt>VW_CONNECTION_PARAMS</tt> maps to <tt>connection_params</tt>. Must be JSON</p>\n<p><tt>VW_DEFAULT_INDEX</tt> maps to <tt>default_index</tt>.  String</p>\n<p><tt>VW_BULK_CHUNK_SIZE</tt> maps to <tt>bulk_chunk_size</tt></p>\n<p><tt>VW_RESULTS_PER_PAGE</tt> maps to <tt>results_per_page</tt></p>\n</div>\n<hr class=\"docutils\">\n<div id=\"types\">\n<h2>Types</h2>\n<p>Elasticsearch is extremely flexible when it comes to adding types but less forgiving about changing them. To\nhelp with this we created a metaclass called <tt>ESType</tt> to define mappings used in Elasticsearch. The types are\nused when <tt>strict_types</tt> is on and both the mapping options and types are used when creating or reindexing the\nindices.  The mapping options are set in the metaclass, otherwise the types subclass normal Python types and\nare used the same way.</p>\n<p>Using Velociwrapper\u2019s types is completely optional. If you define the models using normal Python types, everything\nwill work as expected. The biggest drawback is that Velociwrapper will not automatically be able to use filter\nsyntax on <tt>not_analyzed</tt> string fields.</p>\n<p>All defaults in Velociwrapper\u2019s types are set to Elasticsearch\u2019s defaults:\n<a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html\" rel=\"nofollow\">http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html</a></p>\n<p>In cases where the option begins with \u201c_\u201d Velociwrapper requires the underscore be appended rather than prepended.</p>\n<p><strong>Available Types</strong></p>\n<p><strong>String</strong> <em>([str],**kwargs)</em></p>\n<p>Keyword args:</p>\n<ul>\n<li><tt>analyzed</tt></li>\n<li><tt>norms</tt></li>\n<li><tt>index_options</tt></li>\n<li><tt>analyzer</tt></li>\n<li><tt>index_analyzer</tt></li>\n<li><tt>search_analyzer</tt></li>\n<li><tt>ignore_above</tt></li>\n<li><tt>position_offset_gap</tt></li>\n<li><tt>value_</tt></li>\n<li><tt>boost_</tt></li>\n</ul>\n<p>The <tt>analyzed</tt> argument maps to <tt>index=analyzed|not_analyzed</tt> default is <tt>analyzed</tt></p>\n<p><strong>Number</strong> <em>([number], **kwargs)</em></p>\n<p>Generic number type. Normally you should use the number type classes that derive from this. If <tt>type</tt> is omitted\ndefaults to <tt>float</tt></p>\n<p>Keyword args:</p>\n<ul>\n<li><tt>type</tt></li>\n<li><tt>index_</tt></li>\n<li><tt>precision_step</tt></li>\n<li><tt>ignore_malformed</tt></li>\n<li><tt>coerce</tt></li>\n</ul>\n<p>The following types use the same arguments (except for type which is specified automatically)</p>\n<ul>\n<li><tt>Float</tt> <em>([float], **kwargs)</em></li>\n<li><tt>Integer</tt> <em>([int], **kwargs)</em></li>\n<li><tt>Long</tt> <em>([float], **kwargs)</em></li>\n<li><tt>Short</tt> <em>([float], **kwargs)</em></li>\n<li><tt>Byte</tt> <em>([float], **kwargs)</em></li>\n<li><tt>Tokencount</tt> <em>([number],**kwargs)</em></li>\n</ul>\n<p><strong>Date</strong> <em>([date|str] | [year int, month int, day int], **kwargs)</em> and <strong>DateTime</strong> <em>([datetime|str] | [year int, month int, day int, [hour int, [minute int,[second int, [microsecond int]]]]], **kwargs)</em></p>\n<p>Keyword args:</p>\n<ul>\n<li><tt>format</tt></li>\n<li><tt>precision_step</tt></li>\n<li><tt>ignore_malformed</tt></li>\n</ul>\n<p><strong>Array</strong> - new in 1.0.8</p>\n<p>Special type that specifies a list of items that are a single type. Accepts any keyword argument above. <tt>type_</tt> keyword specifies the type to be used. Default is string</p>\n<p><strong>Binary</strong> <em>()</em></p>\n<p>Experimental. Keyword arguments:</p>\n<ul>\n<li><tt>compress</tt></li>\n<li><tt>compress_threshold</tt></li>\n</ul>\n<p><strong>IP</strong> <em>([str])</em></p>\n<p>Keyword args:</p>\n<ul>\n<li><tt>precision_step</tt></li>\n</ul>\n<p><strong>GeoShape</strong> / <strong>GeoPoint</strong></p>\n<p>Experimental. Will work as regular objects as well.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"type-functions\">\n<h2>Type Functions</h2>\n<p><strong>create_es_type</strong> <em>(value)</em></p>\n<p>Takes <tt>value</tt> and returns the equivalent Elasticsearch type. If an appropriate type cannot be determined then the value itself is returned.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"models\">\n<h2>Models</h2>\n<p>Create a model by defining the name of the model and extending <tt>VWBase</tt> (or a subclass of <tt>VWBase</tt>).\nProperties for the model should be statically defined. They can be ESTypes as described above or as regular\nPython types. Values set in the model are defaults in each instance.</p>\n<p>The <tt>__type__</tt> attribute is required and maps to the Elasticsearch <tt>doctype</tt>. <tt>__index__</tt> is recommended\nbut if it is not present then the value of <tt>velociwrapper.config.default_index</tt> is used.</p>\n<p>Example:</p>\n<pre>class User(VWBase):\n    __index__ = 'user_index'\n    __type__ = 'user'\n    username = String(analyzed=False)\n    password = String(analyzed=False)\n    email = String(analyzed=False)\n    name = String()\n    profile_image = String('default.jpg')\n</pre>\n<p>Or without using ESTypes:</p>\n<pre>class User(VWBase):\n    __index__ = 'user_index'\n    __type__ = 'user'\n    username = ''\n    password = ''\n    email = ''\n    name = ''\n    profile_image = ''\n</pre>\n<p>The added benefit of using ESTypes is specifying the mappings. This helps velociwrapper know what kind of searches to build\nand can create the mappings for you, if you haven\u2019t specified them yourself.</p>\n<p>Once models are created they must be committed to save into the Elasticsearch cluster</p>\n<pre>u = User(\n    username='jsmith',\n    password=crypt_method('password123'),\n    email='jsmith@example.com',\n    name='John Smith',\n    profile_image='jsmith.jpg'\n    )\n\nu.commit()\n</pre>\n<p>The call to <tt>commit()</tt> generates an id for the document. If you want to explicitly set the id first, you can set the id attribute:</p>\n<pre>u = User( ... )\nu.id = 'my-unique-id'\nu.commit()\n</pre>\n<p><em>Be careful!</em>. IDs have to be unique across all types in your index. If your ID is not unique, the ID specified will be updated by\nyour new data. It is recommended to let Velociwrapper handle ID creation unless you\u2019re certain of what you\u2019re doing.</p>\n<p><strong>Model API</strong></p>\n<p><strong>collection</strong> <em>()</em></p>\n<p>Returns a <tt>VWCollection</tt> for this model. If a custom subclass has been defined it will be returned. Otherwise a new collection will be created.</p>\n<p><strong>commit</strong> <em>()</em></p>\n<p>Commits the model to Elasticsearch. New models will be created as new documents. Existing models will be updated.</p>\n<p><strong>delete</strong> <em>()</em></p>\n<p>Deletes the cooresponding document from Elasticsearch. New operations cannot be performed on the model once it is marked\nfor delete.</p>\n<p><strong>sync</strong> <em>()</em></p>\n<p>Syncs the document in Elasticsearch to the model. Overwrites any uncommitted changes.</p>\n<p><strong>to_dict</strong> <em>()</em></p>\n<p>Converts the model to a dictionary. Very useful for outputting models to JSON web services. This method is intended to be overridden for\ncustom output.</p>\n<p><strong>more_like_this</strong> <em>()</em></p>\n<p>Performs a search to get documents that are \u201clike\u201d the current document. Returns a VWCollectionGen.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"collections\">\n<h2>Collections</h2>\n<p>Collections are used to search and return collections of models. Searches can be chained together to create complex queries of Elasticsearch\n(much like SQLAlchemy). Currently collections are of one document type only. This may change in a future release.</p>\n<p>Example:</p>\n<pre># all users named john\nusers = Users().filter_by(name='John').all()\n\n# users named john who live in texas\nusers = Users().filter_by(name='John', state='TX').all()\n\n# another way to write the same as above\nusers = Users().filter_by(name='John').filter_by(state='TX').all()\n</pre>\n<p>By default chained criteria are joined with \u201cAND\u201d (\u201cmust\u201d in most cases internally). But can be controlled:</p>\n<pre># users who live in texas or are named john:\nusers = Users().filter_by(name='John', state='TX', condition='or').all()\n</pre>\n<p>For more complex queries see the <tt>raw()</tt> method and the QDSL module.</p>\n<p><strong>Creating Collections</strong></p>\n<p>Created a collection by calling <tt><span class=\"pre\">Model().collection()</span></tt>. If a subclass of the collection exists it will be created and returned\notherwise an base collection will be created for the model by calling <tt>VWCollection(baseobj=Model)</tt>.  <tt>collection()</tt> is\nconvienent because it allows collections and models to be defined in separate files without recursive import errors.</p>\n<p>When creating a subclass for a collection, specify the model using the <tt>__model__</tt> property.</p>\n<pre>class Users(VWCollection):\n    __model__ = User\n</pre>\n<p><strong>Conditions</strong></p>\n<p>Conditions in Elasticsearch are a little tricky. Internally the <tt>bool</tt> queries / filters are used. Instead of the traditional\n<tt>and</tt>, <tt>or</tt>, <tt>not</tt>. Elasticsearch uses <tt>must</tt>, <tt>should</tt> and <tt>must_not</tt>. To make things a bit more interesting the\ntraditional boolean values exist as well and Elasticsearch recommends they be used is certain cases (such as geo filters)\nVelociwrapper converts <tt>and</tt>, <tt>or</tt>, <tt>not</tt> to the Elasticsearch equivalents except in the case of <tt>search_geo()</tt>.</p>\n<p>The <tt>must</tt>, <tt>should</tt>, <tt>must_not</tt> options can be used instead and will work. <tt>minimum_should_match</tt> is also available. If\nthe explicit options are needed you can use <tt>explicit_and</tt>, <tt>explicit_or</tt>, and <tt>explicit_not</tt>.</p>\n<p>Conditions can become complex very quickly. Velociwrapper tries to take a \u201cdo what I mean\u201d approach to chained conditions. First\nthe current filter is checked for a specific condition. If no condition exists then the <em>preceeding</em> condition is used. If there\nis no preceeding condition, the condition is set to and/must by default.</p>\n<p>Examples:</p>\n<pre># get users in named John or Stacy\nusers = Users().filter_by(name='John').filter_by(name='Stacy', condition='or').all()\n\n# equivalent because the second filter_by() will use the preceeding or condition:\nusers = Users().filter_by(name='John', condition='or').filter_by(name='Stacy').all()\n\n# add another condition, such as state, might not always do what we expect. This would return anyone\n# who's name is stacy or john or lives in Texas\nusers = Users().filter_by(name='John').filter_by(name='Stacy', condition='or').filter_by(state='TX').all()\n\n# (john or stacy) and state\nusers = Users().filter_by(name='John').filter_by(name='Stacy', condition='or').filter_by(state='TX',condition='and').all()\n</pre>\n<p>Obviously order matters. For more complex queries the other option is to use the <tt>raw()</tt> method and the QDSL module (see below)</p>\n<p><strong>API</strong></p>\n<p>Methods marked chainable internally change the search query to affect the output on <tt>all()</tt>, <tt>delete()</tt>, and <tt>one()</tt>. Chainable methods can be\ncalled multiple times with different parameters.</p>\n<p><strong>all</strong> <em>(**kwargs)</em></p>\n<p>Executes the current search and returns <tt>results_per_page</tt> results. (default 50). <tt>results_per_page</tt> is specified in <tt>velociwrapper.config.results_per_page</tt>\nbut can also be specified by keyword arguments.</p>\n<p>If no search has been specified, Velociwrapper will call <tt>match_all</tt>.</p>\n<p>If no results are matched <tt>all()</tt> returns an empty VWCollectionGen.</p>\n<p>Arguments:</p>\n<ul>\n<li><tt>results_per_page</tt> <em>int</em>: number of results to return</li>\n<li><tt>size</tt> <em>int</em>: same as results_per_page</li>\n<li><tt>start</tt> <em>int</em>: Record count to start with</li>\n</ul>\n<p><strong>clear_previous_search</strong> <em>()</em></p>\n<p>Clear all search parameters and reset the object. Even after a call to an output method the search can be output again. This allows the collection to be reused.\nGenerally its better to create a new object.</p>\n<p><strong>commit</strong> <em>([callback=callable])</em></p>\n<p>Bulk commits a list of items specified on <tt>__init__()</tt> or if no items were specified will bulk commit against the items matched in the current search. (be careful! Calling something like Users().commit() will commit all users!)</p>\n<p>The <tt>callback</tt> argument should be a callable. The raw item will be passed to it and it must return either a <tt>dict</tt> or a <tt>VWBase</tt>\n(model) object.  Note that velociwrapper does not call each model\u2019s <tt>commit()</tt> or <tt>to_dict()</tt> methods but rather issues the request\nin bulk. Thus you cannot affect the behavior by overriding these methods. Use the <tt>callback</tt> to make changes or change the items before\npassing them to the collection.</p>\n<p>As of 2.0 it is also possible to register a callback to manipulate items in the commit. See \u201cCallbacks\u201d.</p>\n<p><strong>count</strong> <em>()</em></p>\n<p>Returns the total number of documents matched (not that will be returned!) by the search.</p>\n<p><strong>delete</strong> <em>(**kwargs)</em></p>\n<p>Delete the records specified by the search query.</p>\n<p><strong>delete_in</strong> <em>(ids=list)</em></p>\n<p>Delete the records specified by a list of ids. Equivalent to:</p>\n<pre>Users().filter_by(ids=list_of_ids).delete()\n</pre>\n<p><strong>exact</strong> <em>(field=str, value=mixed)</em></p>\n<p>Chainable. Find records where <tt>field</tt> is the exact <tt>value</tt>. String based fields <strong>must</strong> be specified as <tt>not_analyzed</tt> in the index. Otherwise results\nmay not be as expected.  <tt>exact()</tt> is more for completeness. <tt>filter_by()</tt> uses exact values when available. The only difference is <tt>exact()</tt>\nwill warn if the field cannot be searched while <tt>filter_by()</tt> silently converts to a query.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li><tt>boost</tt> <em>float</em>: An explicit boost value for this boolean query</li>\n<li><tt>condition</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d,\u201dexplicit_and\u201d,\u201dexplicit_or\u201d,\u201dexplicit_not\u201d,</li>\n<li><tt>minimum_should_match</tt> <em>int</em>: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1</li>\n<li><tt>with_explicit</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d. Only used if explicit conditions exist and there\u2019s a question of how an additional condtion should be added to the query.</li>\n</ul>\n<p><strong>exists</strong> <em>(field, [kwargs])</em></p>\n<p>Chainable. Find records if the specified field exists is the document.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li><tt>boost</tt> <em>float</em>: An explicit boost value for this boolean query</li>\n<li><tt>condition</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d,\u201dexplicit_and\u201d,\u201dexplicit_or\u201d,\u201dexplicit_not\u201d,</li>\n<li><tt>minimum_should_match</tt> <em>int</em>: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1</li>\n<li><tt>with_explicit</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d. Only used if explicit conditions exist and there\u2019s a question of how an additional condtion should be added to the query.</li>\n</ul>\n<p><strong>filter_by</strong> <em>([condition], kwargs)</em></p>\n<p>Chainable. Filter or query elasticsearch for <tt><span class=\"pre\">field=\"search\"</span></tt>. Automatically creates filters or queries based on field mappings. If the <tt>search</tt> parameter is a list, filter_by will create\nan <tt>in()</tt> filter / query. <tt>condition</tt> can be set as the first argument or passed as a keyword argument.</p>\n<p>Keyword arguments</p>\n<ul>\n<li><tt>[field]</tt> <em>str</em>: A field in the document set to the value to try to find.</li>\n<li><tt>id</tt> <em>value</em>: Explicitly search for particular id.</li>\n<li><tt>ids</tt> <em>list</em>: Explicitly search for using a list of ids.</li>\n<li><tt>boost</tt> <em>float</em>: An explicit boost value for this boolean query</li>\n<li><tt>condition</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d,\u201dexplicit_and\u201d,\u201dexplicit_or\u201d,\u201dexplicit_not\u201d,</li>\n<li><tt>minimum_should_match</tt> <em>int</em>: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1</li>\n<li><tt>with_explicit</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d. Only used if explicit conditions exist and there\u2019s a question of how an additional condtion should be added to the query.</li>\n</ul>\n<p><strong>multi_match</strong> <em>(fields=list,query=str,**kwargs)</em></p>\n<p>Chainable. Search the list of fields for the value of query. Accepts standard kwargs arguments.</p>\n<p><strong>get</strong> <em>(id=value)</em></p>\n<p>Returns the single record specified by <tt>id</tt> or <tt>None</tt> if it does not exist.</p>\n<p><strong>get_in</strong> <em>(ids=list)</em></p>\n<p>Returns a list of records specified by the list of ids or an empty list if no ids exist. Note this method cannot be sorted. If sorting is needed it is better to call</p>\n<pre>filter_by(ids=list).sort(...).all()\n</pre>\n<p><strong>get_like_this</strong> <em>(id)</em></p>\n<p>Returns records like the document specified by id or an empty list if none exists. Note this method cannot be sorted.</p>\n<p><strong>__init__</strong> <em>([items=list],[**kwargs])</em></p>\n<p>Create a collection. If <tt>items</tt> are specified they are stored internally to <tt>commit()</tt> in bulk. Stored items must be models (subclassing <tt>VWBase</tt>) or <tt>dict</tt>.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li><tt>bulk_chunk_size</tt> <em>int</em>: override default chunk size for this collection</li>\n<li><tt>results_per_page</tt> <em>int</em></li>\n</ul>\n<p><strong>__len__</strong> <em>()</em></p>\n<p>Same as <tt>count()</tt>. Allows for the entire collection to be passed to <tt>len()</tt></p>\n<p><strong>missing</strong> <em>(field=str,**kwargs)</em></p>\n<p>Chainable. Finds records where the specified <tt>field</tt> is missing</p>\n<p>Keyword arguments:</p>\n<ul>\n<li><tt>boost</tt> <em>float</em>: An explicit boost value for this boolean query</li>\n<li><tt>condition</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d,\u201dexplicit_and\u201d,\u201dexplicit_or\u201d,\u201dexplicit_not\u201d,</li>\n<li><tt>minimum_should_match</tt> <em>int</em>: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1</li>\n<li><tt>with_explicit</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d. Only used if explicit conditions exist and there\u2019s a question of how an additional condtion should be added to the query.</li>\n</ul>\n<p><strong>one</strong> <em>()</em></p>\n<p>Executes the search and returns the first record only. Raises <tt>NoResultFound</tt> if the search did not match any documents.</p>\n<p><strong>range</strong> <em>(field=str, **kwargs)</em></p>\n<p>Chainable. Filters the results by a range of values in <tt>field</tt>. The keyword arguments coorespond to arguments used by the range filter\nin Query DSL: <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-range-query.html\" rel=\"nofollow\">http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-range-query.html</a></p>\n<p>Other search keywords are available except for <tt>boost</tt>. <tt>boost</tt> affects the range query itself. Keyword arguemtns are:</p>\n<ul>\n<li><tt>gte</tt> <em>number or date</em>: greater than or equal</li>\n<li><tt>gt</tt> <em>number or date</em>: greater than</li>\n<li><tt>lte</tt> <em>number or date</em>: less than or equal</li>\n<li><tt>lt</tt> <em>number or date</em>: less than</li>\n<li><tt>boost</tt> <em>float</em>: boost value for the range query itself</li>\n<li><tt>time_zone</tt> <em>str</em>: timezone offset. Only used if comparison is a date and doesn\u2019t contain a timezone offset already.</li>\n<li><tt>condition</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d,\u201dexplicit_and\u201d,\u201dexplicit_or\u201d,\u201dexplicit_not\u201d,</li>\n<li><tt>minimum_should_match</tt> <em>int</em>: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1</li>\n<li><tt>with_explicit</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d. Only used if explicit conditions exist and there\u2019s a question of how an additional condtion should be added to the query.</li>\n</ul>\n<p><strong>raw</strong> <em>(rawquery=dict)</em></p>\n<p>Execute a raw Query DSL query.  Chainable but all other search filters are ignored. Can still be used with <tt>sort()</tt>.</p>\n<p><strong>*search</strong> <em>(query=string)</em></p>\n<p>Execute a Lucene query against the server. Chainable.</p>\n<p><strong>search_geo</strong> <em>(field=str,distance=float,lat=float,lon=float,**kwargs)</em></p>\n<p>Chainable. Filter the search based on distance from a geopoint.</p>\n<ul>\n<li><tt>boost</tt> <em>float</em>: An explicit boost value for this boolean query</li>\n<li><tt>condition</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d,\u201dexplicit_and\u201d,\u201dexplicit_or\u201d,\u201dexplicit_not\u201d,</li>\n<li><tt>minimum_should_match</tt> <em>int</em>: When executing a should (or) query, specify the number of options that should match to return the document. Default = 1</li>\n<li><tt>with_explicit</tt> <em>str</em>: \u201cand\u201d,\u201dor\u201d,\u201dnot\u201d. Only used if explicit conditions exist and there\u2019s a question of how an additional condtion should be added to the query.</li>\n</ul>\n<p><strong>sort</strong> <em>(**kwargs)</em></p>\n<p>Chainable (and can appear anywhere before an output method, including by having other filters chained to it). Arguments are <tt>field=asc|desc</tt>. <tt>asc</tt> sorts the field\nfirst to last. <tt>desc</tt> sorts the field last to first. <tt>asc</tt> is the default.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"additional-methods-for-vwcollectiongen\">\n<h2>Additional Methods for <tt>VWCollectionGen</tt></h2>\n<p><tt>VWCollectionGen</tt> is returned by calls from <tt>VWCollection.all()</tt> and <tt>VWCollection.get_in()</tt>.</p>\n<p><strong>results</strong> <em>(self)</em></p>\n<p>Returns the underlying ElasticSearch results. Useful for getting meta information</p>\n</div>\n<div id=\"query-bodies-with-querybuilder-querybody\">\n<h2>Query Bodies with <tt>querybuilder.QueryBody</tt></h2>\n<p>Underlying chainable methods is the <tt>querybuilder.QueryBody</tt> class. This class helps build simple query bodies\nfor Elasticsearch but attempts not to get too crazy. It stores an internal structure of the query and then\nbuilds it into a <tt>dict</tt> that can be passed to the underlying Elasticsearch client.  The class is used internally\nby <tt>VWCollection</tt> but you could use it directly to build queries to then pass to the <tt>raw()</tt> method.</p>\n<p><tt>QueryBody</tt> only supports queries and filters. For other wrappers, such as constant_score, you\u2019ll need to manually\nbuild the queries by hand or with the <tt>QDSL</tt> functions described below.</p>\n<p><strong>QueryBody methods</strong></p>\n<p><strong>chain</strong> <em>(self, newpart=dict, **kwargs)</em></p>\n<p>Chains a new part of the query into the existing query. Newpart must be a <tt>dict</tt> with additional query parameters\nto pass to Elasticsearch. Note that <tt>newpart</tt> is not checked for correctness.</p>\n<p>Returns <tt>self</tt> so additional methods can be called.</p>\n<p>Keyword Arguments:</p>\n<ul>\n<li><tt>type</tt> <em>string</em>: either \u201cquery\u201d or \u201cfilter\u201d. If not specified checks <tt>newpart</tt> for one of these keywords. Otherwise uses \u201cquery\u201d</li>\n<li><tt>condition</tt> <em>string</em>: must|should|must_not|and|or|not. Defaults to \u201cmust\u201d. Specifies how this part of the query is treated in relation to the existing query</li>\n<li><tt>with_explicit</tt> <em>string</em>: and|or|not. Included for legacy purposes. Overrides <tt>condition</tt> and is useful if a nested bool was manually created. Generally should not be used.</li>\n</ul>\n<p><strong>is_filtered</strong> <em>(self)</em></p>\n<p>Returns <tt>True</tt> if the current query body contains a filter.</p>\n<p><strong>is_query</strong> <em>(self)</em></p>\n<p>Returns <tt>True</tt> if the current query body contains a query other than <tt>match_all {}</tt></p>\n<p><strong>build</strong> <em>(self)</em></p>\n<p>Builds the current query into a representation understood by Elasticsearch. Returns <tt>dict</tt></p>\n</div>\n<hr class=\"docutils\">\n<div id=\"qdsl-and-building-raw-queries\">\n<h2>QDSL and Building Raw Queries</h2>\n<p><tt>velociwrapper.qdsl</tt> contains functions to help make writing QDSL easier.</p>\n<p><strong>QDSL Functions</strong></p>\n<p><strong>query</strong> <em>(params=dict)</em></p>\n<p>Returns <tt>params</tt> wrapped by <tt>{ \"query\": params }</tt></p>\n<p><strong>filter_</strong> <em>(params=dict)</em></p>\n<p>Returns <tt>params</tt> wrapped by <tt>{ \"filter\": params }</tt>.</p>\n<p>Note the \u201c_\u201d appended to <tt>filter_</tt> to prevent confusion with Python\u2019s <tt>filter()</tt></p>\n<p><strong>match</strong> <em>(field=str,value=str|dict,**kwargs)</em></p>\n<p>Returns <tt>{\"match\": { field: { \"query\": value } } }</tt></p>\n<p>Additional keyword arguments should be Elasticsearch arguments on <tt>match</tt></p>\n<p><strong>match_phrase</strong> <em>(field=str,value=str|dict,**kwargs)</em></p>\n<p>Equivalent to <tt><span class=\"pre\">match(field,value,type=\"phrase\")</span></tt></p>\n<p><strong>match_phrase_prefix</strong> <em>(field=str,value=str|dict,**kwargs)</em></p>\n<p>Equivalent to <tt><span class=\"pre\">match(field,value,type=\"phrase_prefix\")</span></tt></p>\n<p><strong>multi_match</strong> <em>(query=str|dict, fields=list,**kwargs)</em></p>\n<p>Returns <tt>{\"multi_match\": {\"query\": query, \"fields\": fields } }</tt></p>\n<p>Additional keyword arguments should be Elasticsearch arguments on <tt>multi_match</tt></p>\n<p><strong>bool_</strong> <em>(*args,**kwargs)</em></p>\n<p>Args are any number of dicts containing \u201cmust\u201d, \u201cshould\u201d or \u201cmust_not\u201d keys. Note the appended \u201c_\u201d to prevent\nconfusion with Python\u2019s <tt>bool</tt>.</p>\n<p>Keyword arguments are Elasticsearch options for <tt>bool</tt> such as <tt>minimum_should_match</tt></p>\n<p>Example:</p>\n<pre>from velociwrapper.qdsl import bool_, must, must_not, match\nmybool = bool_(\n    must( match('foo','some value') ),\n    must_not( match( 'bar', 'some other value' ) )\n)\n</pre>\n<p>Special Keyword arguments</p>\n<ul>\n<li><em>__vw_set_current</em> <em>dict</em>: set a current <tt>bool</tt> dictionary that will be updated rather than creating a blank one.</li>\n</ul>\n<p><strong>must</strong> <em>(params=str|dict, value=str|dict|None,**kwargs)</em></p>\n<p>Creates a <tt>must</tt> arguement for <tt>bool</tt>. If params is a <tt>dict</tt> then it is passed on directly. If it is a string or value\nis set then the params are treated as a field name and passed to <tt>term</tt>.</p>\n<p>Example:</p>\n<pre>must( match('foo', 'some value' ) )\n# returns { \"must\": { \"match\": { \"foo\": {\"query\": \"some value\" } } } }\n\nmust('foo', 'some value' ) )\n# returns { \"must\": { \"term\" { \"foo\": {\"value\": \"some value\" } } } }\n</pre>\n<p><strong>must_not</strong> <em>(params=str|dict,value=str|dict|None,**kwargs)</em></p>\n<p>Like <tt>must</tt> but uses \u201cmust_not\u201d</p>\n<p><strong>should</strong> <em>(params=str|dict,value=str|dict|None,**kwargs)</em></p>\n<p>Like <tt>must</tt> but uses \u201cshould\u201d</p>\n<p><strong>term</strong> <em>(field=str, value=str,**kwargs)</em></p>\n<p>Like <tt>match</tt> but for filters</p>\n<p><strong>terms</strong> <em>(field=str,value=list,**kwargs)</em></p>\n<p>Like <tt>term</tt> but values are a list of strings to match in a field.</p>\n<p><strong>boosting</strong> <em>(*args, **kwargs)</em></p>\n<p>Similar to <tt>bool</tt> allows any number of dicts with the key <tt>positive</tt> or <tt>negative</tt>. Keyword arguments are options\npassed to <tt>boosting</tt></p>\n<p><strong>positive</strong> <em>(field,value)</em></p>\n<p>Returns <tt>{ \"positive\": { \"term\": { field: value } } }</tt></p>\n<p><strong>negative</strong> <em>(field,value)</em></p>\n<p>Returns <tt>{ \"negative\": {\"term\": { field:value } } }</tt></p>\n<p><strong>common</strong> <em>(field, value, **kwargs)</em></p>\n<p>Returns <tt>{ \"common\": { field: { \"query\": value } } }</tt></p>\n<p>Keyword arguments are passed as additional key values to the <tt>field</tt> dict.</p>\n<p><strong>constant_score</strong> <em>(*args, **kwargs)</em></p>\n<p>Arguments should be <tt>dict</tt>. A single argument is wrapped directly by <tt>constant_score</tt>. In the case of multiple arguments the function searches each\nfor <tt>query</tt> or <tt>filter</tt> keys to wrap in the output.</p>\n<p><strong>filtered</strong> <em>(*args, **kwargs)</em></p>\n<p>Arguments should be <tt>dict</tt>. A single argument is wrapped directly by <tt>filtered</tt>. In the case of multiple arguments the function searches each\nfor <tt>query</tt> or <tt>filter</tt> keys to wrap in the output.</p>\n<p>Additional keyword arguments are set on the <tt>filtered</tt> dict.</p>\n<p><strong>function_score</strong> <em>(*args, **kwargs)</em></p>\n<p>Arguments should be <tt>dict</tt>. A single argument is wrapped directly by <tt>function_score</tt>. In the case of multiple arguments the function searches each\nfor <tt>query</tt>, <tt>filter</tt>, <tt>FUNCTION</tt>, or <tt>functions</tt> keys to wrap in the output. No magic happens here to check the validity of the functions!</p>\n<p>Keyword arguments are set on the <tt>function_score</tt> dict.</p>\n<p><strong>fuzzy</strong></p>\n<p><strong>ids</strong></p>\n<p><strong>query_term</strong></p>\n<p><strong>indices</strong></p>\n<p><strong>match_all</strong></p>\n<p><strong>more_like_this</strong></p>\n<p><strong>nested</strong></p>\n<p><strong>prefix</strong></p>\n<p><strong>query_string</strong></p>\n<p><strong>simple_query_string</strong></p>\n<p><strong>range</strong></p>\n<p><strong>regexp</strong></p>\n<p><strong>span_term</strong></p>\n<p><strong>span_first</strong></p>\n<p><strong>span_multi</strong></p>\n<p><strong>span_near</strong></p>\n<p><strong>span_not</strong></p>\n<p><strong>span_or</strong></p>\n<p><strong>wildcard</strong></p>\n<p><strong>and_</strong></p>\n<p><strong>or_</strong></p>\n<p><strong>not_</strong></p>\n<p><strong>exists</strong></p>\n<p><strong>geo_bounding_box</strong></p>\n<p><strong>geo_distance</strong></p>\n<p><strong>geo_range</strong></p>\n<p><strong>geo_polygon</strong></p>\n<p><strong>geo_shape</strong></p>\n<p><strong>geohash_cell</strong></p>\n<p><strong>has_child</strong></p>\n<p><strong>has_parent</strong></p>\n<p><strong>missing</strong></p>\n<p><strong>script</strong></p>\n<p><strong>type_</strong></p>\n</div>\n<hr class=\"docutils\">\n<div id=\"mapper\">\n<h2>Mapper</h2>\n<p>Use the mapper by importing it:</p>\n<pre>from velociwrapper.mapper import Mapper\n</pre>\n<p>The Mapper class has utilities for managing the Elasticsearch index.</p>\n<p><strong>Mapper API</strong></p>\n<p><strong>get_index_map</strong> <em>(**kwargs)</em></p>\n<p>Searches for currently loaded VWBase models and returns the their indexes as defined by code, along with their mappings. The only keyword argument is <tt>index</tt>, passed to specify\na particular index or group of indexes (must be a <tt>str</tt> or <tt>list</tt>).</p>\n<p><strong>get_server_map</strong> <em>(**kwargs)</em></p>\n<p><em>New in version 1.0.10</em>. Like <em>get_index_map()</em>, but returns the mapping as saved on the server.</p>\n<p><strong>create_indices</strong> <em>(**kwargs)</em></p>\n<p>Creates indexes based on currently loaded VWBase models or for the index or indexes specified by the <tt>index</tt> keyword argument.</p>\n<p><strong>get_index_for_alias</strong> <em>(alias=str)</em></p>\n<p>Return the name of the index for the specified <tt>alias</tt>. If <tt>alias</tt> is an index, then the same name will be returned.</p>\n<p><strong>reindex</strong> <em>(index=str,newindex=str,**kwargs)</em></p>\n<p>Re-indexes the specified index to a new index. Useful for making model changes and then creating them in Elastic search</p>\n<p>Keyword arguments</p>\n<ul>\n<li><tt>alias_name</tt> <em>string</em>: specify a new alias name when re-mapping an alias. If omitted the previous alias name is used.</li>\n<li><tt>remap_alias</tt> <em>bool</em>: Aliases the index under a new name. Useful for making on-the-fly changes</li>\n</ul>\n<p><strong>describe</strong> <em>(cls=class)</em></p>\n<p>Output the index mapping for a VWBase class.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"callbacks\">\n<h2>Callbacks</h2>\n<p>There are several events built-in to Velociwrapper on which you can register callbacks.\nCallbacks are registered at the class level so all instances will have the callback. You\ncan also register multiple methods for the same event. Callbacks recieve the instance and\na single (optional) argument. The argument is returned. In the case of multiple callbacks\non an event, the callbacks are fired in the order they were registered. The return value\nfrom one method is passed to the next as the argument.</p>\n<p>Example:</p>\n<pre>from your_models import Document\n\n# check a user for entry in another database\ndef doc_database_check( vwinst, argument=None ):\n    if not doc_in_database(vwinst.id):\n        insert_into_database( vwinst.id, vwinst.name, vwinst.content ) # or whatever\n        return argument\n\nDocument.register_callback( 'after_commit', doc_database_check )\n</pre>\n<p>Callbacks are defined in the <tt>VWCallback</tt> class in base.py. <tt>VWCollection</tt> and <tt>VWBase</tt>\nderive from <tt>VWCallback</tt></p>\n<p><strong>Callback API</strong></p>\n<p><strong>register_callback</strong> <em>(cls, callback_event=str, callback=callable)</em> <em>- classmethod</em></p>\n<p>Register a callback for the event <em>callback_event</em> on the collection or base class. This is a class method,\nthe callback becomes active on all instances.</p>\n<p><strong>deregister_callback</strong> <em>(cls, callback_event=str, callback=callable|str)</em> <em>- classmethod</em></p>\n<p>Deregister a callback for the event <em>callback_event</em> by its name or original function <em>callback</em>. Returns None\neven if there was not a callback by the name or for the event.</p>\n<p><strong>execute_callbacks</strong> <em>(self, event=string, argument=None, **kwargs)</em></p>\n<p>Executes the current instances callbacks for <em>event</em> in the order they were registered. Returns <em>argument</em>.\nIf no callback was registered for the event the method returns <em>None</em></p>\n<p><strong>Available Events</strong></p>\n<p><em>before_manual_create_model</em></p>\n<p>Executed when a model instance is created directly but not when the model is created as the result of a search.\n<em>argument</em> is ignored, only the model\u2019s instance is passed. The event fires before mapping information is copied\nfrom the class and before the id is created.  An example use is a custom ID creation method.</p>\n<p><em>after_manual_create_model</em></p>\n<p>Executed when a model instance is created directly but not when the model is created as the result of a search.\n<em>argument</em> is ignored, only the model\u2019s instance is passed. The event fires after the class variables are copied\nto the instance, <em>id</em> is created, and the <em>__index__</em> is set.</p>\n<p><em>on_delete</em></p>\n<p>Executed when <tt>commit()</tt> is called on a deleted instance. Fires just before the underlying DELETE to Elasticsearch.\nArgument is ignored. Does not execute on a bulk delete call in <tt>VWCollection</tt>.</p>\n<p><em>before_commit</em></p>\n<p>Executed before the INDEX call to Elasticsearch. The argument is ignored. Does not execute on bulk commit calls in\n<tt>VWCollection</tt>.</p>\n<p><em>after_commit</em></p>\n<p>Executed after the INDEX call to Elasticsearch. The argument is ignored. Does not execute on bulk commit calls in\n<tt>VWCollection</tt>.</p>\n<p><em>before_sync</em></p>\n<p>Executed before retrieveing the underlying document from Elasticsearch to sync the object. The argument is ignored.</p>\n<p><em>after_sync</em></p>\n<p>Executed after variables from Elasticsearch have overwritten object attributes. The argument is ignored.</p>\n<p><em>before_query_build</em></p>\n<p>Executed just before a search query is created. The argument is the current <tt>QueryBody</tt>.</p>\n<p><em>after_query_build</em></p>\n<p>Executes after the search query is created as a <tt>dict</tt>. The argument is the <tt>dict</tt> to be passed to the Elasticsearch client.</p>\n<p><em>on_bulk_commit</em></p>\n<p>Executes for each item before being appended to a bulk commit operation. The argument is the item. The item can be a\n<tt>dict</tt> source document or a <tt>VWBase</tt> object depending on what was passed to the collections items. (If the commit\ncriteria was a search query then <tt>VWBase</tt> objects are passed.</p>\n<p><em>before_auto_create_model</em></p>\n<p>Executes after a source document is retrieved from Elasticsearch but before the document is converted to a model\ninstance. Note this does not fire until accessed in the <tt>VWCollectionGen</tt> generator. The argument passed is the\nsource document</p>\n<p><em>after_auto_create_model</em></p>\n<p>Executes after the a source document result is converted to a model instance. Does not occur until the model\ninstance is accessed in the generator. Due to the way the generator works the instance passed to the callback\nis empty, while the argument is the newly created instance to manipulate.</p>\n<p><strong>Creating New Events</strong></p>\n<p>You can register your own events and fire them yourself.</p>\n<pre># register an event when your generic document is something specific\ndef is_pdf(inst, argument=None, **kwargs):\n    # do something\n    return argument\n\nDocument.register_callback( 'on_edit', is_pdf )\n\n# then somewhere in your code (maybe an edit function?)\ndocument_instance.execute_callbacks('on_edit')\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"author\">\n<h2>AUTHOR</h2>\n<p>Chris Brown, Drew Goin and Boyd Hitt</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"copyright\">\n<h2>COPYRIGHT</h2>\n<p>Copyright (c) 2015-2019 Constituent Voice LLC</p>\n</div>\n\n          </div>"}, "last_serial": 5239212, "releases": {"2.0.10": [{"comment_text": "", "digests": {"md5": "c3fb6e0717da8f5195874e0c3ac46475", "sha256": "6e4aa396108a48eda8506579ca202730892571737822be17a5a210d5311eec09"}, "downloads": -1, "filename": "Velociwrapper-2.0.10.tar.gz", "has_sig": false, "md5_digest": "c3fb6e0717da8f5195874e0c3ac46475", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43279, "upload_time": "2015-12-17T23:20:53", "upload_time_iso_8601": "2015-12-17T23:20:53.201617Z", "url": "https://files.pythonhosted.org/packages/d1/99/d91a57b0ccbe51535ce37a547c2daff6d87f07ac9d48dc9f909fe45d773b/Velociwrapper-2.0.10.tar.gz", "yanked": false}], "2.0.11": [{"comment_text": "", "digests": {"md5": "c1d66a53d0eeafe29ea72715c083ae49", "sha256": "8d05add4143a9f3a7bd22f6d9ed1d57fcdd13757083564af6fc0efaccfa10673"}, "downloads": -1, "filename": "Velociwrapper-2.0.11.tar.gz", "has_sig": false, "md5_digest": "c1d66a53d0eeafe29ea72715c083ae49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43277, "upload_time": "2016-01-06T22:17:21", "upload_time_iso_8601": "2016-01-06T22:17:21.139046Z", "url": "https://files.pythonhosted.org/packages/3f/0d/1939dca8a195b9c4acf87fac8810891fdbcde947b5fb9f98f0df33b60cbe/Velociwrapper-2.0.11.tar.gz", "yanked": false}], "2.0.12": [{"comment_text": "", "digests": {"md5": "5e6de49add3e85882b44a71f1d80d2c6", "sha256": "878d52d8d5bca08b793a02b94ef84d3dff6e9f2fab370017200c8f4115783b10"}, "downloads": -1, "filename": "Velociwrapper-2.0.12.tar.gz", "has_sig": false, "md5_digest": "5e6de49add3e85882b44a71f1d80d2c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43291, "upload_time": "2016-02-16T00:48:19", "upload_time_iso_8601": "2016-02-16T00:48:19.283358Z", "url": "https://files.pythonhosted.org/packages/ea/d5/85872fe4f1fc6bdf660b304139272dfb644d4fdaf58b204fb6fcd52e6e67/Velociwrapper-2.0.12.tar.gz", "yanked": false}], "2.0.13": [{"comment_text": "", "digests": {"md5": "2719873a412428e1fb9a9d15612e535a", "sha256": "1c3c7024ff6312e9669aff8e916faf5b0dabe46abc3352945f64f00b1cbd49b2"}, "downloads": -1, "filename": "Velociwrapper-2.0.13.tar.gz", "has_sig": false, "md5_digest": "2719873a412428e1fb9a9d15612e535a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43324, "upload_time": "2016-02-16T00:55:05", "upload_time_iso_8601": "2016-02-16T00:55:05.604831Z", "url": "https://files.pythonhosted.org/packages/e3/21/5e5b853816082418835504db222de14420b5a719811dbee3c2b6e14c2256/Velociwrapper-2.0.13.tar.gz", "yanked": false}], "2.0.14": [{"comment_text": "", "digests": {"md5": "1d9c8cf09abd2ebfd6acc3992680d750", "sha256": "2813b6b93bb57f0110bc25f500a969e233728c6c2e7aa79a5a013fb3f17be87b"}, "downloads": -1, "filename": "Velociwrapper-2.0.14.tar.gz", "has_sig": false, "md5_digest": "1d9c8cf09abd2ebfd6acc3992680d750", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43458, "upload_time": "2016-03-16T03:30:09", "upload_time_iso_8601": "2016-03-16T03:30:09.215900Z", "url": "https://files.pythonhosted.org/packages/c5/c5/d1c7fb55e5f195a4e805c8fea0786a53d9106c9feea805c1c0e912a49b26/Velociwrapper-2.0.14.tar.gz", "yanked": false}], "2.0.15": [{"comment_text": "", "digests": {"md5": "6c18f1d9bbdb739bd36c4879f75301ab", "sha256": "a817f23c76e95887e33f77212755b46a18abf3782b1621e339201ded00729937"}, "downloads": -1, "filename": "Velociwrapper-2.0.15.tar.gz", "has_sig": false, "md5_digest": "6c18f1d9bbdb739bd36c4879f75301ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43678, "upload_time": "2016-10-27T00:53:41", "upload_time_iso_8601": "2016-10-27T00:53:41.086965Z", "url": "https://files.pythonhosted.org/packages/cd/88/75e23d8e532801a070ac20790037148a5c2acafc719713ffabbf237654a0/Velociwrapper-2.0.15.tar.gz", "yanked": false}], "2.0.16": [{"comment_text": "", "digests": {"md5": "bf1336774f55fe7805345e7ab88e24ab", "sha256": "60b0aec4d1c38e2a6deb7907e9579826494a650e7c80cba000f9b0aa4d05bf2f"}, "downloads": -1, "filename": "Velociwrapper-2.0.16.tar.gz", "has_sig": false, "md5_digest": "bf1336774f55fe7805345e7ab88e24ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43686, "upload_time": "2016-10-27T00:54:58", "upload_time_iso_8601": "2016-10-27T00:54:58.303547Z", "url": "https://files.pythonhosted.org/packages/2d/d1/fbb9ac268561dfc9299372fdebb8ded6ae1abb8cddba059ecfaf6a945d9b/Velociwrapper-2.0.16.tar.gz", "yanked": false}], "2.0.18": [{"comment_text": "", "digests": {"md5": "0364c28814a0f8a05b6fb1f8ffeceb8b", "sha256": "28dfd7bc176ffffcaf4270a7c83d665fb4dd5da96e93cbf7ee63db90ce583043"}, "downloads": -1, "filename": "Velociwrapper-2.0.18.tar.gz", "has_sig": false, "md5_digest": "0364c28814a0f8a05b6fb1f8ffeceb8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44014, "upload_time": "2017-09-19T22:26:08", "upload_time_iso_8601": "2017-09-19T22:26:08.208905Z", "url": "https://files.pythonhosted.org/packages/40/57/33673cb7dcb9b3bcafddc111684746ef7eaf5b2f3b68ec3acdd2f30440bb/Velociwrapper-2.0.18.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "ddbac7bfd2e1a8e30da8e3e0966826d7", "sha256": "f8045627eefde812f47dd45f5607e5628a67dd792452aa75cd49d42b7f0e6d9d"}, "downloads": -1, "filename": "Velociwrapper-2.0.6.tar.gz", "has_sig": false, "md5_digest": "ddbac7bfd2e1a8e30da8e3e0966826d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41692, "upload_time": "2015-09-12T19:41:51", "upload_time_iso_8601": "2015-09-12T19:41:51.006551Z", "url": "https://files.pythonhosted.org/packages/c0/47/e363a61a142515d65f369e42e2dc8050cd0f1461eb422bfaa8770aa9cb49/Velociwrapper-2.0.6.tar.gz", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "705a70f4912bdc1f1e6ce9879202dd8b", "sha256": "c04edc360aec4fbd5610dece7eb8c1efccab3ba5fece9910a10a3db5e475a9da"}, "downloads": -1, "filename": "Velociwrapper-2.0.7.tar.gz", "has_sig": false, "md5_digest": "705a70f4912bdc1f1e6ce9879202dd8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42293, "upload_time": "2015-10-29T21:18:28", "upload_time_iso_8601": "2015-10-29T21:18:28.220000Z", "url": "https://files.pythonhosted.org/packages/8c/09/9ed5a323e0f26e7df71d46b8f6557fb848caf3eeae0817baef0dcd903e09/Velociwrapper-2.0.7.tar.gz", "yanked": false}], "2.0.8": [{"comment_text": "", "digests": {"md5": "d20716192f58ad15586c8417c84a0eb9", "sha256": "224440dfe0105671ba0fc7ce3eee553df0b9e7b06e758aedb512f9878c1e6030"}, "downloads": -1, "filename": "Velociwrapper-2.0.8.tar.gz", "has_sig": false, "md5_digest": "d20716192f58ad15586c8417c84a0eb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42402, "upload_time": "2015-11-02T21:14:16", "upload_time_iso_8601": "2015-11-02T21:14:16.765208Z", "url": "https://files.pythonhosted.org/packages/66/3c/f34250ea12a55d8068910803764fb5e5d438973edb6660bb96b0a9709bdf/Velociwrapper-2.0.8.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "077317b278dba7c0e303f266024aff7f", "sha256": "2c6e19bdc1d852f107abb2ffd13e3fb0fbd21283b338c2a64f32e34634071a47"}, "downloads": -1, "filename": "Velociwrapper-2.1.0.tar.gz", "has_sig": false, "md5_digest": "077317b278dba7c0e303f266024aff7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44925, "upload_time": "2019-05-07T17:41:30", "upload_time_iso_8601": "2019-05-07T17:41:30.336281Z", "url": "https://files.pythonhosted.org/packages/2d/2e/6bcce97faf67473996b2d1727c407353cf8db912a248a07c7ee1d4fbc46a/Velociwrapper-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "077317b278dba7c0e303f266024aff7f", "sha256": "2c6e19bdc1d852f107abb2ffd13e3fb0fbd21283b338c2a64f32e34634071a47"}, "downloads": -1, "filename": "Velociwrapper-2.1.0.tar.gz", "has_sig": false, "md5_digest": "077317b278dba7c0e303f266024aff7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44925, "upload_time": "2019-05-07T17:41:30", "upload_time_iso_8601": "2019-05-07T17:41:30.336281Z", "url": "https://files.pythonhosted.org/packages/2d/2e/6bcce97faf67473996b2d1727c407353cf8db912a248a07c7ee1d4fbc46a/Velociwrapper-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:03 2020"}