{"info": {"author": "Pedro Martins", "author_email": "pbmartins@ua.pt", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "<p align=\"center\">\n    <img src=\"https://i.imgur.com/mbY9pvC.png\" width=\"30%\">\n</p>\n<h1 align=\"center\">TensorFlow CTGAN</h1>\n<p align=\"center\">TensorFlow 2.1 implementation of Conditional Tabular GAN.</p>\n\n\n<p align=\"center\">\n    <a href=\"./LICENSE.md\">\n        <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\">\n    </a>\n    <a href=\"https://pypi.python.org/pypi/ctgan-tf\">\n        <img alt=\"PyPI Shield\" src=\"https://img.shields.io/pypi/v/ctgan-tf.svg\">\n    </a>\n    <a href=\"https://travis-ci.com/pbmartins/ctgan-tf\">\n        <img alt=\"Build Status\" src=\"https://travis-ci.com/pbmartins/ctgan-tf.svg?token=ES61mh8SK9WT5Hr1iCs7&branch=master\">\n    </a>\n    <a href=\"https://codecov.io/gh/pbmartins/ctgan-tf\">\n        <img alt=\"Coverage Status\" src=\"https://codecov.io/gh/pbmartins/ctgan-tf/branch/stable/graph/badge.svg?token=BXT0G35Y9Q\">\n    </a>\n</p>\n\nTensorflow 2.1 implementation of a Conditional Tabular Generative Adversarial \nNetwork. CTGAN is a GAN-based data synthesizer that can \"generate synthetic \ntabular data with high fidelity\".\n\nThis model was originally designed by the *Data to AI Lab at MIT* team, \nand it was published in their NeurIPS paper \n[Modeling Tabular data using Conditional GAN](https://arxiv.org/abs/1907.00503).\n\nFor more information regarding this work, and to access the original PyTorch \nimplementation provided by the authors, \nplease refer to their GitHub repository and their documentation:\n\n* **Documentation**: https://pbmartins.github.io/ctgan-tf\n* **Original PyTorch Documentation**: https://sdv-dev.github.io/CTGAN\n* **Original PyTorch repository**: https://github.com/sdv-dev/CTGAN\n\n# Install\n\n## Requirements\n\nAs of this moment, **CTGAN** has been solely tested tested on \n[Python 3.7](https://www.python.org/downloads/), \nand [TensorFlow 2.1](https://www.tensorflow.org/install).\n\n\n* `tensorflow` (<2.2,>=2.1.0)\n* `tensorflow-probability` (<1.0,>=0.9.0)\n* `scikit-learn` (<0.23,>=0.21)\n* `numpy` (<2,>=1.17.4)\n* `pandas` (<1.0.2,>=1.0)\n* `tqdm` (<4.44,>=4.43)\n\n## Install\n\nYou can either install `ctgan-tf` through the PyPI package:\n\n```shell script\npip3 install ctgan-tf\n```\n\nOr by cloning this repository and copying the `ctgan` folder to your \nproject folder, or simply run:\n\n```shell script\nmake install\n```\n\n# Data Format\n\n**CTGAN** expects the input data to be a table given as either a `numpy.ndarray` \nor a `pandas.DataFrame` object with two types of columns:\n\n* **Continuous Columns**: Columns that contain numerical values and which can \n  take any value.\n* **Discrete columns**: Columns that only contain a finite number of possible \n  values, whether these are string values or not.\n\n# Quickstart\n\nBefore being able to use CTGAN you will need to prepare your data as \nspecified above.\n\nFor this example, we will be loading some data using the `ctgan.load_demo` \nfunction.\n\n```python\nfrom ctgan.utils import load_demo\n\ndata, discrete_columns = load_demo()\n```\n\nEven though the provided example already contains a list of discrete values, aside from the data itself, you will need to create a list with the names of \nthe discrete variables:\n\n```python\ndiscrete_columns = [\n    'workclass',\n    'education',\n    'marital-status',\n    'occupation',\n    'relationship',\n    'race',\n    'sex',\n    'native-country',\n    'income'\n]\n```\n\nOnce you have the data ready, you need to import and create an instance of the \n`CTGANSynthesizer` class and fit it passing your data and the list of \ndiscrete columns.\n\n```python\nfrom ctgan.synthesizer import CTGANSynthesizer\n\nctgan = CTGANSynthesizer()\nctgan.train(data, discrete_columns)\n```\n\nOnce the process has finished, all you need to do is call the `sample` method\nof your `CTGANSynthesizer` instance indicating the number of rows that you \nwant to generate.\n\n```python\nsamples = ctgan.sample(1000)\n```\n\nThe output will be a table with the exact same format as the input and filled with the synthetic\ndata generated by the model.\n\nFor a more in-depth guide and API specification, check our documentation \n[here](https://pbmartins.github.io/ctgan-tf).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/pbmartins/ctgan-tf", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pbmartins/ctgan-tf", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ctgan-tf", "package_url": "https://pypi.org/project/ctgan-tf/", "platform": "", "project_url": "https://pypi.org/project/ctgan-tf/", "project_urls": {"Download": "https://github.com/pbmartins/ctgan-tf", "Homepage": "https://github.com/pbmartins/ctgan-tf"}, "release_url": "https://pypi.org/project/ctgan-tf/0.1.3/", "requires_dist": null, "requires_python": ">=3.7", "summary": "TensorFlow 2.1 implementation of Conditional Tabular GAN.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6879c1732ab255cd25fa8eb3366d7dceb5c6e4d5/68747470733a2f2f692e696d6775722e636f6d2f6d6259397076432e706e67\" width=\"30%\">\n</p>\n<h1>TensorFlow CTGAN</h1>\n<p align=\"center\">TensorFlow 2.1 implementation of Conditional Tabular GAN.</p>\n<p align=\"center\">\n    <a href=\"./LICENSE.md\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\">\n    </a>\n    <a href=\"https://pypi.python.org/pypi/ctgan-tf\" rel=\"nofollow\">\n        <img alt=\"PyPI Shield\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57f4b429ed75fed16e49ecca58b9727a4a0096be/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f637467616e2d74662e737667\">\n    </a>\n    <a href=\"https://travis-ci.com/pbmartins/ctgan-tf\" rel=\"nofollow\">\n        <img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d99595a9be11332c8e95ad02634ab95c0ac60cdb/68747470733a2f2f7472617669732d63692e636f6d2f70626d617274696e732f637467616e2d74662e7376673f746f6b656e3d455336316d6838534b3957543548723169437337266272616e63683d6d6173746572\">\n    </a>\n    <a href=\"https://codecov.io/gh/pbmartins/ctgan-tf\" rel=\"nofollow\">\n        <img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2063912d9b03e6ec8454fe4cb9aacf92c3cb2e20/68747470733a2f2f636f6465636f762e696f2f67682f70626d617274696e732f637467616e2d74662f6272616e63682f737461626c652f67726170682f62616467652e7376673f746f6b656e3d42585430473335593951\">\n    </a>\n</p>\n<p>Tensorflow 2.1 implementation of a Conditional Tabular Generative Adversarial\nNetwork. CTGAN is a GAN-based data synthesizer that can \"generate synthetic\ntabular data with high fidelity\".</p>\n<p>This model was originally designed by the <em>Data to AI Lab at MIT</em> team,\nand it was published in their NeurIPS paper\n<a href=\"https://arxiv.org/abs/1907.00503\" rel=\"nofollow\">Modeling Tabular data using Conditional GAN</a>.</p>\n<p>For more information regarding this work, and to access the original PyTorch\nimplementation provided by the authors,\nplease refer to their GitHub repository and their documentation:</p>\n<ul>\n<li><strong>Documentation</strong>: <a href=\"https://pbmartins.github.io/ctgan-tf\" rel=\"nofollow\">https://pbmartins.github.io/ctgan-tf</a></li>\n<li><strong>Original PyTorch Documentation</strong>: <a href=\"https://sdv-dev.github.io/CTGAN\" rel=\"nofollow\">https://sdv-dev.github.io/CTGAN</a></li>\n<li><strong>Original PyTorch repository</strong>: <a href=\"https://github.com/sdv-dev/CTGAN\" rel=\"nofollow\">https://github.com/sdv-dev/CTGAN</a></li>\n</ul>\n<h1>Install</h1>\n<h2>Requirements</h2>\n<p>As of this moment, <strong>CTGAN</strong> has been solely tested tested on\n<a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.7</a>,\nand <a href=\"https://www.tensorflow.org/install\" rel=\"nofollow\">TensorFlow 2.1</a>.</p>\n<ul>\n<li><code>tensorflow</code> (&lt;2.2,&gt;=2.1.0)</li>\n<li><code>tensorflow-probability</code> (&lt;1.0,&gt;=0.9.0)</li>\n<li><code>scikit-learn</code> (&lt;0.23,&gt;=0.21)</li>\n<li><code>numpy</code> (&lt;2,&gt;=1.17.4)</li>\n<li><code>pandas</code> (&lt;1.0.2,&gt;=1.0)</li>\n<li><code>tqdm</code> (&lt;4.44,&gt;=4.43)</li>\n</ul>\n<h2>Install</h2>\n<p>You can either install <code>ctgan-tf</code> through the PyPI package:</p>\n<pre>pip3 install ctgan-tf\n</pre>\n<p>Or by cloning this repository and copying the <code>ctgan</code> folder to your\nproject folder, or simply run:</p>\n<pre>make install\n</pre>\n<h1>Data Format</h1>\n<p><strong>CTGAN</strong> expects the input data to be a table given as either a <code>numpy.ndarray</code>\nor a <code>pandas.DataFrame</code> object with two types of columns:</p>\n<ul>\n<li><strong>Continuous Columns</strong>: Columns that contain numerical values and which can\ntake any value.</li>\n<li><strong>Discrete columns</strong>: Columns that only contain a finite number of possible\nvalues, whether these are string values or not.</li>\n</ul>\n<h1>Quickstart</h1>\n<p>Before being able to use CTGAN you will need to prepare your data as\nspecified above.</p>\n<p>For this example, we will be loading some data using the <code>ctgan.load_demo</code>\nfunction.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ctgan.utils</span> <span class=\"kn\">import</span> <span class=\"n\">load_demo</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">discrete_columns</span> <span class=\"o\">=</span> <span class=\"n\">load_demo</span><span class=\"p\">()</span>\n</pre>\n<p>Even though the provided example already contains a list of discrete values, aside from the data itself, you will need to create a list with the names of\nthe discrete variables:</p>\n<pre><span class=\"n\">discrete_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'workclass'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'education'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'marital-status'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'occupation'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'relationship'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'race'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sex'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'native-country'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'income'</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Once you have the data ready, you need to import and create an instance of the\n<code>CTGANSynthesizer</code> class and fit it passing your data and the list of\ndiscrete columns.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ctgan.synthesizer</span> <span class=\"kn\">import</span> <span class=\"n\">CTGANSynthesizer</span>\n\n<span class=\"n\">ctgan</span> <span class=\"o\">=</span> <span class=\"n\">CTGANSynthesizer</span><span class=\"p\">()</span>\n<span class=\"n\">ctgan</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">discrete_columns</span><span class=\"p\">)</span>\n</pre>\n<p>Once the process has finished, all you need to do is call the <code>sample</code> method\nof your <code>CTGANSynthesizer</code> instance indicating the number of rows that you\nwant to generate.</p>\n<pre><span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">ctgan</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p>The output will be a table with the exact same format as the input and filled with the synthetic\ndata generated by the model.</p>\n<p>For a more in-depth guide and API specification, check our documentation\n<a href=\"https://pbmartins.github.io/ctgan-tf\" rel=\"nofollow\">here</a>.</p>\n\n          </div>"}, "last_serial": 7183492, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "c10458b9863b27021d25be3134e43d5e", "sha256": "372a2620071b71edf14ceb716e7972177bdb591d4729b1142b7e6ab4940b6faa"}, "downloads": -1, "filename": "ctgan-tf-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c10458b9863b27021d25be3134e43d5e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 34390, "upload_time": "2020-05-06T13:54:10", "upload_time_iso_8601": "2020-05-06T13:54:10.530336Z", "url": "https://files.pythonhosted.org/packages/40/7d/13ea1c9770d43740ee420414113a5d87db385ee557e25991004de444a285/ctgan-tf-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "db85da968b5c83bbdd9b072a24526ac4", "sha256": "713a37ff6162070b36005222b7e6e59563438c3d9df9fd5069bcddbb6a21eb6a"}, "downloads": -1, "filename": "ctgan-tf-0.1.2.tar.gz", "has_sig": false, "md5_digest": "db85da968b5c83bbdd9b072a24526ac4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 34484, "upload_time": "2020-05-06T19:46:25", "upload_time_iso_8601": "2020-05-06T19:46:25.836900Z", "url": "https://files.pythonhosted.org/packages/6e/32/249eb99c3e229840997e76bf933fdb5c439d2b2f2ae23b1ea25becad2d95/ctgan-tf-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d4a115f3307c19d668e1dc8401a80ab7", "sha256": "4788992e9f58be8c9cf8b27a38596161f380890a11da9d7b4c23b3648edff2ae"}, "downloads": -1, "filename": "ctgan-tf-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d4a115f3307c19d668e1dc8401a80ab7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 34479, "upload_time": "2020-05-06T20:57:42", "upload_time_iso_8601": "2020-05-06T20:57:42.950976Z", "url": "https://files.pythonhosted.org/packages/51/9d/c57319473567580e8ab3508d3cd8df303cb02961c847bc75cbbb95d05226/ctgan-tf-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d4a115f3307c19d668e1dc8401a80ab7", "sha256": "4788992e9f58be8c9cf8b27a38596161f380890a11da9d7b4c23b3648edff2ae"}, "downloads": -1, "filename": "ctgan-tf-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d4a115f3307c19d668e1dc8401a80ab7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 34479, "upload_time": "2020-05-06T20:57:42", "upload_time_iso_8601": "2020-05-06T20:57:42.950976Z", "url": "https://files.pythonhosted.org/packages/51/9d/c57319473567580e8ab3508d3cd8df303cb02961c847bc75cbbb95d05226/ctgan-tf-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:37 2020"}