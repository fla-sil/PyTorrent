{"info": {"author": "Maxime Woringer, Zachary Harmany", "author_email": "maxime.woringer@ens.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "pySPIRAL-TAP, a Python version of SPIRAL-TAP\n--------------------------------------------\n\n# Inspiration\n\nEverything comes from the code by [Zachary Harmany](http://drz.ac) (harmany@wisc.edu).\n\nOriginal source: http://drz.ac/code/spiraltap/ or https://github.com/zharmany/SPIRAL-TAP (might be more up-to-date). The algorithm is described in this paper:\n> Z. T. Harmany, R. F. Marcia, and R. M. Willett, \"This is SPIRAL-TAP: Sparse Poisson Intensity Reconstruction ALgorithms \u2013 Theory and Practice,\" IEEE Transactions on Image Processing, vol. 21, pp. 1084\u20131096, Mar. 2012.\n\n# Disclaimer\n\n2. *Code*: still experimental.\n\n# Install\n## Requirements\n`pySPIRALTAP` requires the following dependencies:\n- `numpy`\n- `rwt`, the Rice Wavelet Toolbox, available on this page: https://github.com/ricedsp/rwt\n- `scipy.io` (only to run the demo)\n- `pytest` (only to run the tests)\n\n## Installing `numpy`\nInstallation using your package manager (Debian/Ubuntu):\n\n```{shell}\nsudo apt-get install python-numpy\n```\n\nAlternatively, if you have `pip` installed, you can install `numpy` by typing the following:\n\n```{shell}\npip install --user numpy\n```\n\n## Installing `rwt`\nYou can install the [Rice Wavelet Toolbox](https://github.com/ricedsp/rwt) by typing the following. Before that, make sure that you have `cmake` installed (`sudo apt-get install cmake` if you use a Debian-derived distribution):\n\n```{shell}\ngit clone https://github.com/ricedsp/rwt.git\ncd rwt/python\ncmake .\nsudo make install\n```\n\nAnd then test if the installation succeeded by typing:\n\n```{shell}\npython -c \"import rwt\"\n```\n\nIf this returns nothing, the installation worked. In case it returns an error such as:\n\n```{python}\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nImportError: No module named rwt\n```\n\nThis means that the installation failed. It can be because the installation was performed using a different version of Python that is not the default version. So far, I do not have information about how to perform this installation.\n\nMore information about the installation can be found in the `INSTALL` file, or on the `rwt` [webpage](https://github.com/ricedsp/rwt).\n\n## Installing `pySPIRALTAP`\n\nInstallation can be performed using the following `shell` commands:\n\n```{shell}\ngit clone https://gitlab.com/padouppadoup/pySPIRAL-TAP.git\ncd pySPIRAL-TAP\nsudo python setup.py install\n```\n\n# Usage/Example\n\n## Demo examples\nA simple working example can be run at (in the main folder):\n\n```{shell}\npython SPIRALdemo.py\n```\n\nThis file contains one demo where a 1D signal is reconstructed using a $l1$ penalty. This demo uses `matplotlib` for plotting output.\n\nAlternatively, one can play with the [Jupyter notebook](http://jupyter.org): `SPIRALdemo.ipynb`, that feature the same demo as `SPIRALdemo.py`, but in a more fancy format.\n\n## Calling from a script\nThe pySPIRALTAP methods can be imported with `import pySPIRALTAP`.\n\n## `SPIRALTAP` function parameters\n\nHere is a canonical function call with many parameters exposed:\n\n```{python}\n    resSPIRAL = pySPIRALTAP.SPIRALTAP(y,A,              # y: measured signal, A: projection matrix\n                                              1e-6,             # regularization parameter\n                                      maxiter=100,      # min. number of iterations\n                                      miniter=5,        # max. number of iterations\n                                      penalty='canonical', # type of penalty to apply\n                                      noisetype='gaussian',# form of the log-likelihood penalty\n                                      stopcriterion=3,  # index of the termination criterion\n                                      tolerance=1e-8,\n                                      alphainit=1,\n                                      alphamin=1e-30,\n                                      alphamax=1e30,\n                                      alphaaccept=1e30,\n                                      logepsilon=1e-10,\n                                      saveobjective=True,\n                                      savereconerror=True,\n                                      savesolutionpath=False,\n                                      verbose=verbose, savecputime=True)\n```\n\n# Status\nThe methods based on RDP (*recursive dyadic partitions*) have not been implemented yet. Additionnally, the code has not been fully tested, although we did our best to provide a working product.\n\n# License\n- This software is released under the MIT license. See the `LICENSE` file for more details.\n- The `denoise_bound` code is released under the GNU GPLv2 license and was written by Copyright (2008): Amir Beck and Marc Teboulle.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/padouppadoup/pySPIRAL-TAP/", "keywords": "compressed sensing", "license": "unknown", "maintainer": null, "maintainer_email": null, "name": "pySPIRALTAP", "package_url": "https://pypi.org/project/pySPIRALTAP/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pySPIRALTAP/", "project_urls": {"Homepage": "https://gitlab.com/padouppadoup/pySPIRAL-TAP/"}, "release_url": "https://pypi.org/project/pySPIRALTAP/0.4.12/", "requires_dist": null, "requires_python": null, "summary": "A compressed sensing library for Python", "version": "0.4.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            pySPIRAL-TAP, a Python version of SPIRAL-TAP<br>--------------------------------------------<br><br># Inspiration<br><br>Everything comes from the code by [Zachary Harmany](http://drz.ac) (harmany@wisc.edu).<br><br>Original source: http://drz.ac/code/spiraltap/ or https://github.com/zharmany/SPIRAL-TAP (might be more up-to-date). The algorithm is described in this paper:<br>&gt; Z. T. Harmany, R. F. Marcia, and R. M. Willett, \"This is SPIRAL-TAP: Sparse Poisson Intensity Reconstruction ALgorithms \u2013 Theory and Practice,\" IEEE Transactions on Image Processing, vol. 21, pp. 1084\u20131096, Mar. 2012.<br><br># Disclaimer<br><br>2. *Code*: still experimental.<br><br># Install<br>## Requirements<br>`pySPIRALTAP` requires the following dependencies:<br>- `numpy`<br>- `rwt`, the Rice Wavelet Toolbox, available on this page: https://github.com/ricedsp/rwt<br>- `scipy.io` (only to run the demo)<br>- `pytest` (only to run the tests)<br><br>## Installing `numpy`<br>Installation using your package manager (Debian/Ubuntu):<br><br>```{shell}<br>sudo apt-get install python-numpy<br>```<br><br>Alternatively, if you have `pip` installed, you can install `numpy` by typing the following:<br><br>```{shell}<br>pip install --user numpy<br>```<br><br>## Installing `rwt`<br>You can install the [Rice Wavelet Toolbox](https://github.com/ricedsp/rwt) by typing the following. Before that, make sure that you have `cmake` installed (`sudo apt-get install cmake` if you use a Debian-derived distribution):<br><br>```{shell}<br>git clone https://github.com/ricedsp/rwt.git<br>cd rwt/python<br>cmake .<br>sudo make install<br>```<br><br>And then test if the installation succeeded by typing:<br><br>```{shell}<br>python -c \"import rwt\"<br>```<br><br>If this returns nothing, the installation worked. In case it returns an error such as:<br><br>```{python}<br>Traceback (most recent call last):<br>  File \"&lt;string&gt;\", line 1, in &lt;module&gt;<br>ImportError: No module named rwt<br>```<br><br>This means that the installation failed. It can be because the installation was performed using a different version of Python that is not the default version. So far, I do not have information about how to perform this installation.<br><br>More information about the installation can be found in the `INSTALL` file, or on the `rwt` [webpage](https://github.com/ricedsp/rwt).<br><br>## Installing `pySPIRALTAP`<br><br>Installation can be performed using the following `shell` commands:<br><br>```{shell}<br>git clone https://gitlab.com/padouppadoup/pySPIRAL-TAP.git<br>cd pySPIRAL-TAP<br>sudo python setup.py install<br>```<br><br># Usage/Example<br><br>## Demo examples<br>A simple working example can be run at (in the main folder):<br><br>```{shell}<br>python SPIRALdemo.py<br>```<br><br>This file contains one demo where a 1D signal is reconstructed using a $l1$ penalty. This demo uses `matplotlib` for plotting output.<br><br>Alternatively, one can play with the [Jupyter notebook](http://jupyter.org): `SPIRALdemo.ipynb`, that feature the same demo as `SPIRALdemo.py`, but in a more fancy format.<br><br>## Calling from a script<br>The pySPIRALTAP methods can be imported with `import pySPIRALTAP`.<br><br>## `SPIRALTAP` function parameters<br><br>Here is a canonical function call with many parameters exposed:<br><br>```{python}<br>    resSPIRAL = pySPIRALTAP.SPIRALTAP(y,A,              # y: measured signal, A: projection matrix<br>                                              1e-6,             # regularization parameter<br>                                      maxiter=100,      # min. number of iterations<br>                                      miniter=5,        # max. number of iterations<br>                                      penalty='canonical', # type of penalty to apply<br>                                      noisetype='gaussian',# form of the log-likelihood penalty<br>                                      stopcriterion=3,  # index of the termination criterion<br>                                      tolerance=1e-8,<br>                                      alphainit=1,<br>                                      alphamin=1e-30,<br>                                      alphamax=1e30,<br>                                      alphaaccept=1e30,<br>                                      logepsilon=1e-10,<br>                                      saveobjective=True,<br>                                      savereconerror=True,<br>                                      savesolutionpath=False,<br>                                      verbose=verbose, savecputime=True)<br>```<br><br># Status<br>The methods based on RDP (*recursive dyadic partitions*) have not been implemented yet. Additionnally, the code has not been fully tested, although we did our best to provide a working product.<br><br># License<br>- This software is released under the MIT license. See the `LICENSE` file for more details.<br>- The `denoise_bound` code is released under the GNU GPLv2 license and was written by Copyright (2008): Amir Beck and Marc Teboulle.\n          </div>"}, "last_serial": 2746961, "releases": {"0.4.12": [{"comment_text": "", "digests": {"md5": "b949fafacc82344963bfbd34a45edb48", "sha256": "0703e952d439f35f2078e054ef4cdbd50110a8710e80d6c28b66ddf3e4d8c412"}, "downloads": -1, "filename": "pySPIRALTAP-0.4.12.tar.gz", "has_sig": false, "md5_digest": "b949fafacc82344963bfbd34a45edb48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18024, "upload_time": "2017-04-02T04:41:26", "upload_time_iso_8601": "2017-04-02T04:41:26.382127Z", "url": "https://files.pythonhosted.org/packages/d4/36/fa1ef2b7a192b9db6e440c1960c6d6aac3720b95f0ab824e6154f4fbfa8d/pySPIRALTAP-0.4.12.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b949fafacc82344963bfbd34a45edb48", "sha256": "0703e952d439f35f2078e054ef4cdbd50110a8710e80d6c28b66ddf3e4d8c412"}, "downloads": -1, "filename": "pySPIRALTAP-0.4.12.tar.gz", "has_sig": false, "md5_digest": "b949fafacc82344963bfbd34a45edb48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18024, "upload_time": "2017-04-02T04:41:26", "upload_time_iso_8601": "2017-04-02T04:41:26.382127Z", "url": "https://files.pythonhosted.org/packages/d4/36/fa1ef2b7a192b9db6e440c1960c6d6aac3720b95f0ab824e6154f4fbfa8d/pySPIRALTAP-0.4.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:13 2020"}