{"info": {"author": "Sean Upton", "author_email": "sean.upton@hsc.utah.edu", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Topic :: Software Development :: Build Tools"], "description": ".. contents::\n\n.. Overview\n\nThis buildout recipe allows for a part containing fixed and/or relative\nfilesystem paths as configuration options; these options are normalized\nin during the run of the part, making the real (full) filesystem path\nof the referenced paths available for use by other parts.\n\n.. Release history\n\n0.1 (2011-06-21)\n================\n\n- Initial release.\n\n.. Details and usage\n\n\n\n\n\n\nOverview\n========\n\nThis recipe normalizes any option value for the part it manages if said\noption value begins with 'path.' -- such options are assumed to be \npaths.  This recipe replaces relative paths of all sorts with real, \nfull system path to files or directories.\n\nThis recipe is useful as a replacement for using non-part sections for\nholding path configuration; instead, use a part with this recipe, and \nboth relative and absolute paths can be stored for use by other parts\nin your buildout.\n\n\nUsage\n=====\n\nLet's create a buildout with a single part containing the configuration\noptions we want to either preserve or normalize:\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = \n    ...     paths\n    ... \n    ... [paths]\n    ... recipe = collective.recipe.realpath\n    ... notpath.here = something else\n    ... path.parent = ${buildout:directory}/..\n    ... path.to.nowhere = /dev/null\n    ... path.var = ${buildout:directory}/var\n    ... \"\"\")\n    \nWe run this buildout...\n\n    >>> print 'start', system(buildout) # doctest:+ELLIPSIS\n    start...\n    Installing paths.\n   \nWe can see that (only) the necesssary options have normalized path\nvalues:\n\n    >>> from os.path import dirname, realpath\n    >>> builddir = dirname(dirname(buildout))\n    >>> buildout_parent = realpath('%s/..'% builddir)\n    >>> cat('.installed.cfg') # doctest: +ELLIPSIS\n    [buildout]\n    ...\n    [paths]\n    ...\n    notpath.here = something else\n    path.parent = ...\n    path.to.nowhere = /dev/null\n    path.var = /sample-buildout/var\n    ...\n\n\nLICENSE / CREDITS\n=================\n\nMIT-style license -- See docs/COPYING.txt\nAuthor: Sean Upton / University of Utah / upiq.org\nUpstream:\n\n- https://teamspace.upiq.org/trac\n\n- http://dev.plone.org/collective/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective", "keywords": "", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "collective.recipe.realpath", "package_url": "https://pypi.org/project/collective.recipe.realpath/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.recipe.realpath/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective"}, "release_url": "https://pypi.org/project/collective.recipe.realpath/0.1/", "requires_dist": null, "requires_python": null, "summary": "Buildout recipe normalizes directory/path options.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#id1\" id=\"id2\" rel=\"nofollow\">0.1 (2011-06-21)</a></li>\n<li><a href=\"#overview\" id=\"id3\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#license-credits\" id=\"id5\" rel=\"nofollow\">LICENSE / CREDITS</a></li>\n</ul>\n</div>\n<p>This buildout recipe allows for a part containing fixed and/or relative\nfilesystem paths as configuration options; these options are normalized\nin during the run of the part, making the real (full) filesystem path\nof the referenced paths available for use by other parts.</p>\n<div id=\"id1\">\n<h2><a href=\"#id2\" rel=\"nofollow\">0.1 (2011-06-21)</a></h2>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Overview</a></h2>\n<p>This recipe normalizes any option value for the part it manages if said\noption value begins with \u2018path.\u2019 \u2013 such options are assumed to be\npaths.  This recipe replaces relative paths of all sorts with real,\nfull system path to files or directories.</p>\n<p>This recipe is useful as a replacement for using non-part sections for\nholding path configuration; instead, use a part with this recipe, and\nboth relative and absolute paths can be stored for use by other parts\nin your buildout.</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Usage</a></h2>\n<p>Let\u2019s create a buildout with a single part containing the configuration\noptions we want to either preserve or normalize:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts =\n...     paths\n...\n... [paths]\n... recipe = collective.recipe.realpath\n... notpath.here = something else\n... path.parent = ${buildout:directory}/..\n... path.to.nowhere = /dev/null\n... path.var = ${buildout:directory}/var\n... \"\"\")\n</pre>\n</blockquote>\n<p>We run this buildout\u2026</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print 'start', system(buildout) # doctest:+ELLIPSIS\nstart...\nInstalling paths.\n</pre>\n</blockquote>\n<p>We can see that (only) the necesssary options have normalized path\nvalues:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from os.path import dirname, realpath\n&gt;&gt;&gt; builddir = dirname(dirname(buildout))\n&gt;&gt;&gt; buildout_parent = realpath('%s/..'% builddir)\n&gt;&gt;&gt; cat('.installed.cfg') # doctest: +ELLIPSIS\n[buildout]\n...\n[paths]\n...\nnotpath.here = something else\npath.parent = ...\npath.to.nowhere = /dev/null\npath.var = /sample-buildout/var\n...\n</pre>\n</blockquote>\n</div>\n<div id=\"license-credits\">\n<h2><a href=\"#id5\" rel=\"nofollow\">LICENSE / CREDITS</a></h2>\n<p>MIT-style license \u2013 See docs/COPYING.txt\nAuthor: Sean Upton / University of Utah / upiq.org\nUpstream:</p>\n<ul>\n<li><a href=\"https://teamspace.upiq.org/trac\" rel=\"nofollow\">https://teamspace.upiq.org/trac</a></li>\n<li><a href=\"http://dev.plone.org/collective/\" rel=\"nofollow\">http://dev.plone.org/collective/</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 788150, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6932b7ae25d48171cc76de01f5a0d230", "sha256": "88b88f9f69dcb982a68375eb83062313a3dfc91ea43c5a8bfdd2da17734a6a5a"}, "downloads": -1, "filename": "collective.recipe.realpath-0.1.tar.gz", "has_sig": false, "md5_digest": "6932b7ae25d48171cc76de01f5a0d230", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4201, "upload_time": "2011-06-21T22:22:15", "upload_time_iso_8601": "2011-06-21T22:22:15.849549Z", "url": "https://files.pythonhosted.org/packages/4c/1f/16ddee2972019476dc0bf8cc53d3d080fdd73a55fda4627dcf51fa58411d/collective.recipe.realpath-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6932b7ae25d48171cc76de01f5a0d230", "sha256": "88b88f9f69dcb982a68375eb83062313a3dfc91ea43c5a8bfdd2da17734a6a5a"}, "downloads": -1, "filename": "collective.recipe.realpath-0.1.tar.gz", "has_sig": false, "md5_digest": "6932b7ae25d48171cc76de01f5a0d230", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4201, "upload_time": "2011-06-21T22:22:15", "upload_time_iso_8601": "2011-06-21T22:22:15.849549Z", "url": "https://files.pythonhosted.org/packages/4c/1f/16ddee2972019476dc0bf8cc53d3d080fdd73a55fda4627dcf51fa58411d/collective.recipe.realpath-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:55 2020"}