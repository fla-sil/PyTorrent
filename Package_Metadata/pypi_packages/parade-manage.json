{"info": {"author": "Pan Chen", "author_email": "chenpan9012@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Parade-manage\n\n`Parade-manage` is moudle for parade.\n\n**Note**: You should install [parade](https://github.com/bailaohe/parade) first.\n\n## Install\nInstall is simple:\n```bash\n> pip install parade-manage\n```\n## Usage\nTasks dag:  \n```\n t1  a   b   c\n  \\ / \\ / \\ / \n   d   e   f\n    \\ / \\\n     g   h\n```\n**Note**: ***t1*** is table name, other are task name\nEnter your project first\n```bash\n> cd your_project\n```\nInitialize the class\n```python\nfrom parade_manage import ParadeManage\n\t\nmanage = ParadeManage() # or manage = ParadeManage(path='/your/parade/project/path')\n```\nIf task a is failed, you can get task a's subtask and deps, like \n\n```bash\n> manage.get_task('a') # get task a\n([a, d, e, g, h], {'a': [], 'd': [a], 'e': ['a'], 'g': ['d', 'e'], 'h': [e]})\n```\nThe first result is tasks, other is deps. And also, you can get mutil failed tasks.\n\n```bash\n> manage.get_task(['d', 'e']) # get task d and e\n(['d', 'e', 'g', 'h'], {'d':[], 'e': [], 'g': ['d', 'e'], 'h': ['e']})\n```\nThen, create flow and store flow, generate a yaml file\n```bash\n> manage.store_task_flow('a') # args: 'a' or ['d', 'e']  \n```\nOr, remove flow by task name(s)\n```bash\n> manage.rm_task_flow('a')\n```\nRun the flow, execute failed tasks\n```\nmanage.run_taskflow('a')\n```\nSometimes, A task does not depend on other tasks, but uses some tables.\nNow you can get the tables and tasks.\n```bash\n> manage.get_source('d')\n['t1', 'a']  # return table 't1' and task name 'a'\n```\nAnd if table `t1` is failed, you can use `store_source_flow` to store flow\n```bash\n> manage.store_source_flow('t1')\n# return a flow related to etl task only\n```\nStore DAG to file\n```bash\n>>> manage.store_to_file('analysis.task')\n# return a dag\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/qianmosolo/parade-manage", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "parade-manage", "package_url": "https://pypi.org/project/parade-manage/", "platform": "any", "project_url": "https://pypi.org/project/parade-manage/", "project_urls": {"Homepage": "https://github.com/qianmosolo/parade-manage"}, "release_url": "https://pypi.org/project/parade-manage/0.0.1.8/", "requires_dist": null, "requires_python": ">=3.4", "summary": "A manage module of parade", "version": "0.0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Parade-manage</h1>\n<p><code>Parade-manage</code> is moudle for parade.</p>\n<p><strong>Note</strong>: You should install <a href=\"https://github.com/bailaohe/parade\" rel=\"nofollow\">parade</a> first.</p>\n<h2>Install</h2>\n<p>Install is simple:</p>\n<pre>&gt; pip install parade-manage\n</pre>\n<h2>Usage</h2>\n<p>Tasks dag:</p>\n<pre><code> t1  a   b   c\n  \\ / \\ / \\ / \n   d   e   f\n    \\ / \\\n     g   h\n</code></pre>\n<p><strong>Note</strong>: <em><strong>t1</strong></em> is table name, other are task name\nEnter your project first</p>\n<pre>&gt; <span class=\"nb\">cd</span> your_project\n</pre>\n<p>Initialize the class</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parade_manage</span> <span class=\"kn\">import</span> <span class=\"n\">ParadeManage</span>\n\t\n<span class=\"n\">manage</span> <span class=\"o\">=</span> <span class=\"n\">ParadeManage</span><span class=\"p\">()</span> <span class=\"c1\"># or manage = ParadeManage(path='/your/parade/project/path')</span>\n</pre>\n<p>If task a is failed, you can get task a's subtask and deps, like</p>\n<pre>&gt; manage.get_task<span class=\"o\">(</span><span class=\"s1\">'a'</span><span class=\"o\">)</span> <span class=\"c1\"># get task a</span>\n<span class=\"o\">([</span>a, d, e, g, h<span class=\"o\">]</span>, <span class=\"o\">{</span><span class=\"s1\">'a'</span>: <span class=\"o\">[]</span>, <span class=\"s1\">'d'</span>: <span class=\"o\">[</span>a<span class=\"o\">]</span>, <span class=\"s1\">'e'</span>: <span class=\"o\">[</span><span class=\"s1\">'a'</span><span class=\"o\">]</span>, <span class=\"s1\">'g'</span>: <span class=\"o\">[</span><span class=\"s1\">'d'</span>, <span class=\"s1\">'e'</span><span class=\"o\">]</span>, <span class=\"s1\">'h'</span>: <span class=\"o\">[</span>e<span class=\"o\">]})</span>\n</pre>\n<p>The first result is tasks, other is deps. And also, you can get mutil failed tasks.</p>\n<pre>&gt; manage.get_task<span class=\"o\">([</span><span class=\"s1\">'d'</span>, <span class=\"s1\">'e'</span><span class=\"o\">])</span> <span class=\"c1\"># get task d and e</span>\n<span class=\"o\">([</span><span class=\"s1\">'d'</span>, <span class=\"s1\">'e'</span>, <span class=\"s1\">'g'</span>, <span class=\"s1\">'h'</span><span class=\"o\">]</span>, <span class=\"o\">{</span><span class=\"s1\">'d'</span>:<span class=\"o\">[]</span>, <span class=\"s1\">'e'</span>: <span class=\"o\">[]</span>, <span class=\"s1\">'g'</span>: <span class=\"o\">[</span><span class=\"s1\">'d'</span>, <span class=\"s1\">'e'</span><span class=\"o\">]</span>, <span class=\"s1\">'h'</span>: <span class=\"o\">[</span><span class=\"s1\">'e'</span><span class=\"o\">]})</span>\n</pre>\n<p>Then, create flow and store flow, generate a yaml file</p>\n<pre>&gt; manage.store_task_flow<span class=\"o\">(</span><span class=\"s1\">'a'</span><span class=\"o\">)</span> <span class=\"c1\"># args: 'a' or ['d', 'e']  </span>\n</pre>\n<p>Or, remove flow by task name(s)</p>\n<pre>&gt; manage.rm_task_flow<span class=\"o\">(</span><span class=\"s1\">'a'</span><span class=\"o\">)</span>\n</pre>\n<p>Run the flow, execute failed tasks</p>\n<pre><code>manage.run_taskflow('a')\n</code></pre>\n<p>Sometimes, A task does not depend on other tasks, but uses some tables.\nNow you can get the tables and tasks.</p>\n<pre>&gt; manage.get_source<span class=\"o\">(</span><span class=\"s1\">'d'</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"s1\">'t1'</span>, <span class=\"s1\">'a'</span><span class=\"o\">]</span>  <span class=\"c1\"># return table 't1' and task name 'a'</span>\n</pre>\n<p>And if table <code>t1</code> is failed, you can use <code>store_source_flow</code> to store flow</p>\n<pre>&gt; manage.store_source_flow<span class=\"o\">(</span><span class=\"s1\">'t1'</span><span class=\"o\">)</span>\n<span class=\"c1\"># return a flow related to etl task only</span>\n</pre>\n<p>Store DAG to file</p>\n<pre>&gt;&gt;&gt; manage.store_to_file<span class=\"o\">(</span><span class=\"s1\">'analysis.task'</span><span class=\"o\">)</span>\n<span class=\"c1\"># return a dag</span>\n</pre>\n\n          </div>"}, "last_serial": 6185865, "releases": {"0.0.1.2": [{"comment_text": "", "digests": {"md5": "d926828b7b094ee739f4da6e14c6c1df", "sha256": "0e7c56d1fadbe0fc181cccb92e39950a3f28d21d825f841e754711a734d6eb92"}, "downloads": -1, "filename": "parade-manage-0.0.1.2.tar.gz", "has_sig": false, "md5_digest": "d926828b7b094ee739f4da6e14c6c1df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 3096, "upload_time": "2019-05-16T10:08:19", "upload_time_iso_8601": "2019-05-16T10:08:19.092838Z", "url": "https://files.pythonhosted.org/packages/c9/0c/39a8d558ae8d92e87b4daa34a43010f00ec0d9b63c958f2495c8104b3bfe/parade-manage-0.0.1.2.tar.gz", "yanked": false}], "0.0.1.3": [{"comment_text": "", "digests": {"md5": "c2128cd21cbda080fad77d9b83230f10", "sha256": "3c5d0f6830ff9b06c545fd36e77c5eb69ef8474ea8e50cc1aaa5e3fb9a0ffd39"}, "downloads": -1, "filename": "parade-manage-0.0.1.3.tar.gz", "has_sig": false, "md5_digest": "c2128cd21cbda080fad77d9b83230f10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4829, "upload_time": "2019-05-19T13:52:01", "upload_time_iso_8601": "2019-05-19T13:52:01.697966Z", "url": "https://files.pythonhosted.org/packages/b8/e8/14356f4fb88fd1e04c83c507767b3d412ff16029879c549f48167eb5205a/parade-manage-0.0.1.3.tar.gz", "yanked": false}], "0.0.1.4": [{"comment_text": "", "digests": {"md5": "b8a3856ab102ed117d2811f6f979e8a6", "sha256": "2e756aeab0e23bbaa75b768d97877ada88fa9c36f82cb30e33de68f5a8d234f8"}, "downloads": -1, "filename": "parade-manage-0.0.1.4.tar.gz", "has_sig": false, "md5_digest": "b8a3856ab102ed117d2811f6f979e8a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4757, "upload_time": "2019-05-25T07:52:14", "upload_time_iso_8601": "2019-05-25T07:52:14.455878Z", "url": "https://files.pythonhosted.org/packages/42/a3/18c8976a3dfbc7f2e9aaa201883a800b35e52def36d2640079038a2623c6/parade-manage-0.0.1.4.tar.gz", "yanked": false}], "0.0.1.5": [{"comment_text": "", "digests": {"md5": "8fe0ee04baa1e157768775bcbfaa0264", "sha256": "2b5a15f7f666416350bc769a23f46c28e47244fb7f75ce62fda170dea451821d"}, "downloads": -1, "filename": "parade-manage-0.0.1.5.tar.gz", "has_sig": false, "md5_digest": "8fe0ee04baa1e157768775bcbfaa0264", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5159, "upload_time": "2019-08-12T02:15:18", "upload_time_iso_8601": "2019-08-12T02:15:18.308638Z", "url": "https://files.pythonhosted.org/packages/0a/d1/858fbba0178a73dee52beb317a859e1057fe15e2f1d92d06ed11323be16d/parade-manage-0.0.1.5.tar.gz", "yanked": false}], "0.0.1.6": [{"comment_text": "", "digests": {"md5": "26a5d7e80ea54bd7827653941581a250", "sha256": "a67a95b517f6ef8429040519d482c91b751ed1c1d255cc6d96135bd347507944"}, "downloads": -1, "filename": "parade-manage-0.0.1.6.tar.gz", "has_sig": false, "md5_digest": "26a5d7e80ea54bd7827653941581a250", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5218, "upload_time": "2019-08-12T10:48:37", "upload_time_iso_8601": "2019-08-12T10:48:37.821790Z", "url": "https://files.pythonhosted.org/packages/65/79/ec21abb3850acea6c0a31b471aadaca321041ea96805917cfffbac8288ca/parade-manage-0.0.1.6.tar.gz", "yanked": false}], "0.0.1.8": [{"comment_text": "", "digests": {"md5": "23535af6031e415633ecba3663368d2c", "sha256": "06835dadfef191fb9b6e69aa1723b28d6afb1eb0840e9f2f1744fe2e285b8f05"}, "downloads": -1, "filename": "parade-manage-0.0.1.8.tar.gz", "has_sig": false, "md5_digest": "23535af6031e415633ecba3663368d2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5587, "upload_time": "2019-11-23T08:53:14", "upload_time_iso_8601": "2019-11-23T08:53:14.151129Z", "url": "https://files.pythonhosted.org/packages/f1/be/810e665663a339e81a9798b175d04ea6602a81cf3fd1afd7d9e9534ac0bd/parade-manage-0.0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23535af6031e415633ecba3663368d2c", "sha256": "06835dadfef191fb9b6e69aa1723b28d6afb1eb0840e9f2f1744fe2e285b8f05"}, "downloads": -1, "filename": "parade-manage-0.0.1.8.tar.gz", "has_sig": false, "md5_digest": "23535af6031e415633ecba3663368d2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5587, "upload_time": "2019-11-23T08:53:14", "upload_time_iso_8601": "2019-11-23T08:53:14.151129Z", "url": "https://files.pythonhosted.org/packages/f1/be/810e665663a339e81a9798b175d04ea6602a81cf3fd1afd7d9e9534ac0bd/parade-manage-0.0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:42 2020"}