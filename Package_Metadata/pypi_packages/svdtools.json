{"info": {"author": "Adam Greig", "author_email": "adam@adamgreig.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "[![PyPI][pypi-badge]][pypi-url] [![Travis][travis-badge]][travis-url]\n\n# svdtools\n\n**svdtools** is a Python package for modifying vendor-supplied, often buggy SVD\nfiles. It can be imported as a library for use in other applications, or run\ndirectly via the included `svd` CLI utility.\n\nA common use case is patching vendor-supplied SVD files, then applying\n[svd2rust](https://github.com/rust-embedded/svd2rust) to the resulting patched\nSVD.\n\n[pypi-badge]: https://img.shields.io/pypi/v/svdtools.svg\n[pypi-url]: https://pypi.org/project/svdtools/\n[travis-badge]: https://travis-ci.com/stm32-rs/svdtools.svg?branch=master\n[travis-url]: https://travis-ci.com/stm32-rs/svdtools\n\n## Getting Started\n\nPython 3.6 or newer is required to install and use `svdtools`. To install:\n\n```bash\n$ pip3 install --upgrade --user svdtools\n```\n\nOnce installation has completed, the `svd` utility can be called from the command line.\n\nAn example is given in `make example`, which calls\n`svd patch example/incomplete-stm32l4x2.yaml` and generates a patched SVD file\n`example/stm32l4x2.svd.patched`.\n\nSee [Device and Peripheral YAML Format](#device-and-peripheral-yaml-format) for\nmore information on creating patches.\n\n\n## Develop\n\nTo each their own, but the intended workflow is as follows:\n\n1. Setup a virtual environment via `make setup`; this also installs the `svd` CLI\n2. Activate the virtual environment by running `source venv/bin/activate` (or use [direnv](https://direnv.net/))\n3. Iterate, running `make check` and `make fix` as necessary\n\n\n## Device and Peripheral YAML Format\n\nThe patch specifications are in [YAML](https://yaml.org/), and have the following\ngeneral format:\n\n```yaml\n# Path to the SVD file we're targeting. Relative to this file.\n# This must be included only in the device YAML file.\n_svd: \"../svd/STM32F0x0.svd\"\n\n# Include other YAML files. Path relative to this file.\n_include:\n    - \"../peripherals/gpio_v2.yaml\"\n\n# Alter top-level information and peripherals for this device\n_modify:\n    version: 1.1\n    description: bla bla\n    addressUnitBits: 8\n    width: 32\n    cpu:\n        revision: r1p2\n        mpuPresent: true\n    # Peripherals can either live directly at this level (but other top-level\n    # fields will name match first)\n    C_ADC:\n        name: ADC_Common\n    # Or they can be inside a _peripherals block, to avoid name conflicts.\n    _peripherals:\n        FSMC:\n            description: Flexible static memory controller\n\n            # Multiple address blocks are supported via the addressBlocks list\n            # use either addressBlock or addressBlocks, but not both\n            addressBlocks:\n                -   offset: 0x0\n                    size: 0x400\n                    usage: \"ADC base registers\"\n                -   offset: 0x1000\n                    size: 0x400\n                    usage: \"ADC extra registers\"\n\n\n\n# Add whole new peripherals to this device.\n# Incredibly this feature is required.\n_add:\n    ADC_Common:\n        description: ADC Common registers\n        groupName: ADC\n        baseAddress: 0x40012300\n        addressBlock:\n            offset: 0x0\n            size: 0x400\n            usage: \"All ADC registers\"\n        # Multiple address blocks are supported via the addressBlocks list\n        addressBlocks:\n            -   offset: 0x0\n                size: 0x400\n                usage: \"ADC base registers\"\n            -   offset: 0x1000\n                size: 0x400\n                usage: \"ADC extra registers\"\n        registers:\n            CSR:\n                description: ADC Common status register\n                addressOffset: 0x0\n                access: read-only\n                resetValue: 0x00000000\n                fields:\n                    OVR3:\n                        description: Overrun flag of ADC3\n                        bitOffset: 21\n                        bitWidth: 1\n        interrupts:\n            ADC1_2:\n                description: ADC global interrupt\n                value: 18\n\n# A whole new peripheral can also be created as derivedFrom another peripheral.\n_add:\n    USART3:\n        derivedFrom: USART1\n        baseAddress: \"0x40004800\"\n        interrupts:\n            USART3:\n                description: USART3 global interrupt\n                value: 39\n\n# A new peripheral can have all its registers copied from another, in case\n# it cannot quite be derivedFrom (e.g. some fields need different enumerated\n# values) but it's otherwise almost exactly the same.\n# The registers are copied but not name or address or interrupts.\n_copy:\n    ADC3:\n        from: ADC2\n\n# The new peripheral can also be copied from another svd file for a different\n# device. This is useful when a peripheral is missing in a device but the exact\n# same peripheral already exist in another device.\n_copy:\n    TIM1:\n        from: ../svd/stm32f302.svd:TIM1\n\n# Replace peripheral registers by a 'deriveFrom'.\n# This is used when e.g. UART4 and UART5 are both independently defined,\n# but you'd like to make UART5 be defined as derivedFrom UART4 instead.\n_derive:\n    # The KEY peripheral looses all its elements but 'interrupt', 'name',\n    # and 'baseAddress', and it is derivedFrom the VALUE peripheral.\n    # Peripherals that were 'deriveFrom=\"KEY\"' are now 'deriveFrom=\"VALUE\"'.\n    UART5: UART4\n\n# Reorder the hierarchy of peripherals with 'deriveFrom'.\n# This is used when e.g. I2C1 is marked as derivedFrom I2C3,\n# but you'd like to swap that so that I2C3 becomes derivedFrom I2C1.\n_rebase:\n    # The KEY peripheral steals everything but 'interrupt', 'name',\n    # and 'baseAddress' elements from the VALUE peripheral.\n    # Peripherals that were 'deriveFrom=\"VALUE\"' are now 'deriveFrom=\"KEY\"'.\n    # The VALUE peripheral is marked as derivedFrom the updated KEY.\n    I2C1: I2C3\n\n# An STM32 peripheral, matches an SVD <peripheral> tag.\n# Does not match any tag with derivedFrom attribute set.\n\"GPIO*\":\n    # We can include other YAML files inside this peripheral\n    _include:\n        - \"path/to/file.yaml\"\n\n    # Alter fields on existing registers inside this peripheral\n    _modify:\n        # Rename this badly named register. Takes effect before anything else.\n        # Don't use wildcard matches if you are changing the name!\n        # We could have specified name or description or other tags to update.\n        GPIOB_OSPEEDR:\n          name: OSPEEDR\n        # Equivalently the register could go in a '_registers' block\n        _registers:\n            GPIOB_OSPEEDR:\n                name: OSPEEDR\n        # Change the value of an interrupt in this peripheral\n        _interrupts:\n            EXTI0:\n                value: 101\n\n\n    # Add new registers and interrupts to this peripheral.\n    # Entries are registers by default, which can also go inside a '_registers'\n    # block, or interrupts go in an '_interrupts' block.\n    _add:\n        EXAMPLER:\n            description: An example register\n            addressOffset: 0x04\n            access: read-write\n            fields:\n                EXR1:\n                    description: Example field\n                    bitOffset: 16\n                    bitWidth: 4\n        _registers:\n            EXAMPLR2:\n                description: Another example register\n        _interrupts:\n            EXAMPLEI:\n                description: An example interrupt\n                value: 100\n\n    # Anywhere you can '_add' something, you can also '_delete' it.\n    # Wildcards are supported. The value here can be a YAML list of registers\n    # to delete (supported for backwards compatibility), or a YAML mapping\n    # of lists of registers or interrupts.\n    _delete:\n        GPIO*_EXTRAR:\n        _registers:\n            - GPIO*_EXAMPLER\n        _interrupts:\n            - USART1\n\n    # If registers have unnecessary common prefix,\n    # you can clean it in all registers in peripheral by:\n    _strip:\n        - PREFIX_\n\n    # You can collect several same registers into one register array\n    # that will be represented with svd2rust as array or elements\n    # with one type\n    # Minimal version:\n    _array:\n        ARRAY*: {}\n\n    # You can also use the modifiers shown below:\n    _array:\n        ARRAY*:\n            name: NEW_NAME%s\n            _modify:\n                FIELD: [MINIMUM, MAXIMUM]\n                FIELD:\n                  description: NEWDESC\n        OTHER_ARRAY*: {}\n\n    # If you have registers that make up a group and can be repeated,\n    # you can collect them into cluster like this:\n    _cluster:\n        CLUSTER%s:\n            FIRST_REG: {}\n            SECOND_REG: {}\n\n    # A register on this peripheral, matches an SVD <register> tag\n    MODER:\n        # As in the peripheral scope, rename or redescribe a field.\n        # Don't use wildcard matches if you are changing the name!\n        _modify:\n            FIELD:\n              description: NEWDESC\n\n        # Add new fields to this register\n        _add:\n            NEWFIELD:\n              description: DESCRIPTION\n              bitOffset: 12\n              bitWidth: 4\n              access: read-write\n\n        # Often fields that should be one contiguous integer are specified\n        # as a number of individual bits instead. This merges any matching\n        # registers into a single field with the combined bitwidth and lowest\n        # bit offset, and the shared description and access.\n        _merge:\n            - \"FIELD*\"\n\n        # A field in this register, matches an SVD <field> tag\n        FIELD:\n            # By giving the field a dictionary we construct an enumerateValues\n            VARIANT: [VALUE, DESCRIPTION]\n            VARIANT: [VALUE, DESCRIPTION]\n\n        # Another field. A list of two numbers gives a range writeConstraint.\n        FIELD: [MINIMUM, MAXIMUM]\n\n        # Another field with separate enumerated values for read and write\n        FIELD:\n            _read:\n                VARIANT: [VALUE, DESCRIPTION]\n                VARIANT: [VALUE, DESCRIPTION]\n            _write:\n                VARIANT: [VALUE, DESCRIPTION]\n                VARIANT: [VALUE, DESCRIPTION]\n        # Sometimes fields are to big so we need to split them into smaller fields\n        EXTI:\n          IMR:\n            # This would split MR into MRi where i = 0 ... bitlength\n            _split: [MR]\n```\n\n### Name Matching\n\nPeripheral, register, and field names can be specified:\n\n- Directly (eg. the full name of the peripheral/register/field)\n- Using `?` and `*` for single- and multi- character wildcards\n- Using `[ABC]` to give a list of possible matching characters\n- Using commas to separate a list of possible matches\n\nYou must quote the name if using any special characters in YAML.\n\n### Style Guide\n\n- Enumerated values should be named in the past tense (*enabled*, *masked*,\netc.)\n- Descriptions should start with capital letters and should not end with a period\n\n\n## License\n\nsvdtools is licensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE))\n- MIT License ([LICENSE-MIT](LICENSE-MIT))\n\nat your option.\n\n\n## Contribute\n\nPull requests are very welcome!\n\nPlease apply `black` and `isort` before committing. This can be accomplished by:\n- running `make fix`\n- running `black svdtools/` and `isort -y --recursive svdtools/`\n- installing an editor/IDE plugin\n\nThis avoids bikeshedding over formatting issues :)\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stm32-rs/svdtools", "keywords": "", "license": "", "maintainer": "Nicolas Stalder", "maintainer_email": "n@stalder.io", "name": "svdtools", "package_url": "https://pypi.org/project/svdtools/", "platform": "", "project_url": "https://pypi.org/project/svdtools/", "project_urls": {"Homepage": "https://github.com/stm32-rs/svdtools"}, "release_url": "https://pypi.org/project/svdtools/0.1.5/", "requires_dist": ["click ~= 7.0", "PyYAML ~= 5.3"], "requires_python": ">=3.6", "summary": "svdpatch.py", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/svdtools/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/209679303ddf85be12869a1859605cf7b027c532/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f737664746f6f6c732e737667\"></a> <a href=\"https://travis-ci.com/stm32-rs/svdtools\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6df4de8c044def8460662b30085763048984f87d/68747470733a2f2f7472617669732d63692e636f6d2f73746d33322d72732f737664746f6f6c732e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>svdtools</h1>\n<p><strong>svdtools</strong> is a Python package for modifying vendor-supplied, often buggy SVD\nfiles. It can be imported as a library for use in other applications, or run\ndirectly via the included <code>svd</code> CLI utility.</p>\n<p>A common use case is patching vendor-supplied SVD files, then applying\n<a href=\"https://github.com/rust-embedded/svd2rust\" rel=\"nofollow\">svd2rust</a> to the resulting patched\nSVD.</p>\n<h2>Getting Started</h2>\n<p>Python 3.6 or newer is required to install and use <code>svdtools</code>. To install:</p>\n<pre>$ pip3 install --upgrade --user svdtools\n</pre>\n<p>Once installation has completed, the <code>svd</code> utility can be called from the command line.</p>\n<p>An example is given in <code>make example</code>, which calls\n<code>svd patch example/incomplete-stm32l4x2.yaml</code> and generates a patched SVD file\n<code>example/stm32l4x2.svd.patched</code>.</p>\n<p>See <a href=\"#device-and-peripheral-yaml-format\" rel=\"nofollow\">Device and Peripheral YAML Format</a> for\nmore information on creating patches.</p>\n<h2>Develop</h2>\n<p>To each their own, but the intended workflow is as follows:</p>\n<ol>\n<li>Setup a virtual environment via <code>make setup</code>; this also installs the <code>svd</code> CLI</li>\n<li>Activate the virtual environment by running <code>source venv/bin/activate</code> (or use <a href=\"https://direnv.net/\" rel=\"nofollow\">direnv</a>)</li>\n<li>Iterate, running <code>make check</code> and <code>make fix</code> as necessary</li>\n</ol>\n<h2>Device and Peripheral YAML Format</h2>\n<p>The patch specifications are in <a href=\"https://yaml.org/\" rel=\"nofollow\">YAML</a>, and have the following\ngeneral format:</p>\n<pre><span class=\"c1\"># Path to the SVD file we're targeting. Relative to this file.</span>\n<span class=\"c1\"># This must be included only in the device YAML file.</span>\n<span class=\"nt\">_svd</span><span class=\"p\">:</span> <span class=\"s\">\"../svd/STM32F0x0.svd\"</span>\n\n<span class=\"c1\"># Include other YAML files. Path relative to this file.</span>\n<span class=\"nt\">_include</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"../peripherals/gpio_v2.yaml\"</span>\n\n<span class=\"c1\"># Alter top-level information and peripherals for this device</span>\n<span class=\"nt\">_modify</span><span class=\"p\">:</span>\n    <span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1.1</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">bla bla</span>\n    <span class=\"nt\">addressUnitBits</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">8</span>\n    <span class=\"nt\">width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">32</span>\n    <span class=\"nt\">cpu</span><span class=\"p\">:</span>\n        <span class=\"nt\">revision</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">r1p2</span>\n        <span class=\"nt\">mpuPresent</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"c1\"># Peripherals can either live directly at this level (but other top-level</span>\n    <span class=\"c1\"># fields will name match first)</span>\n    <span class=\"nt\">C_ADC</span><span class=\"p\">:</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ADC_Common</span>\n    <span class=\"c1\"># Or they can be inside a _peripherals block, to avoid name conflicts.</span>\n    <span class=\"nt\">_peripherals</span><span class=\"p\">:</span>\n        <span class=\"nt\">FSMC</span><span class=\"p\">:</span>\n            <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Flexible static memory controller</span>\n\n            <span class=\"c1\"># Multiple address blocks are supported via the addressBlocks list</span>\n            <span class=\"c1\"># use either addressBlock or addressBlocks, but not both</span>\n            <span class=\"nt\">addressBlocks</span><span class=\"p\">:</span>\n                <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">offset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x0</span>\n                    <span class=\"nt\">size</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x400</span>\n                    <span class=\"nt\">usage</span><span class=\"p\">:</span> <span class=\"s\">\"ADC</span><span class=\"nv\"> </span><span class=\"s\">base</span><span class=\"nv\"> </span><span class=\"s\">registers\"</span>\n                <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">offset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x1000</span>\n                    <span class=\"nt\">size</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x400</span>\n                    <span class=\"nt\">usage</span><span class=\"p\">:</span> <span class=\"s\">\"ADC</span><span class=\"nv\"> </span><span class=\"s\">extra</span><span class=\"nv\"> </span><span class=\"s\">registers\"</span>\n\n\n\n<span class=\"c1\"># Add whole new peripherals to this device.</span>\n<span class=\"c1\"># Incredibly this feature is required.</span>\n<span class=\"nt\">_add</span><span class=\"p\">:</span>\n    <span class=\"nt\">ADC_Common</span><span class=\"p\">:</span>\n        <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ADC Common registers</span>\n        <span class=\"nt\">groupName</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ADC</span>\n        <span class=\"nt\">baseAddress</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x40012300</span>\n        <span class=\"nt\">addressBlock</span><span class=\"p\">:</span>\n            <span class=\"nt\">offset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x0</span>\n            <span class=\"nt\">size</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x400</span>\n            <span class=\"nt\">usage</span><span class=\"p\">:</span> <span class=\"s\">\"All</span><span class=\"nv\"> </span><span class=\"s\">ADC</span><span class=\"nv\"> </span><span class=\"s\">registers\"</span>\n        <span class=\"c1\"># Multiple address blocks are supported via the addressBlocks list</span>\n        <span class=\"nt\">addressBlocks</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">offset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x0</span>\n                <span class=\"nt\">size</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x400</span>\n                <span class=\"nt\">usage</span><span class=\"p\">:</span> <span class=\"s\">\"ADC</span><span class=\"nv\"> </span><span class=\"s\">base</span><span class=\"nv\"> </span><span class=\"s\">registers\"</span>\n            <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">offset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x1000</span>\n                <span class=\"nt\">size</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x400</span>\n                <span class=\"nt\">usage</span><span class=\"p\">:</span> <span class=\"s\">\"ADC</span><span class=\"nv\"> </span><span class=\"s\">extra</span><span class=\"nv\"> </span><span class=\"s\">registers\"</span>\n        <span class=\"nt\">registers</span><span class=\"p\">:</span>\n            <span class=\"nt\">CSR</span><span class=\"p\">:</span>\n                <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ADC Common status register</span>\n                <span class=\"nt\">addressOffset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x0</span>\n                <span class=\"nt\">access</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">read-only</span>\n                <span class=\"nt\">resetValue</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x00000000</span>\n                <span class=\"nt\">fields</span><span class=\"p\">:</span>\n                    <span class=\"nt\">OVR3</span><span class=\"p\">:</span>\n                        <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Overrun flag of ADC3</span>\n                        <span class=\"nt\">bitOffset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">21</span>\n                        <span class=\"nt\">bitWidth</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n        <span class=\"nt\">interrupts</span><span class=\"p\">:</span>\n            <span class=\"nt\">ADC1_2</span><span class=\"p\">:</span>\n                <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ADC global interrupt</span>\n                <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">18</span>\n\n<span class=\"c1\"># A whole new peripheral can also be created as derivedFrom another peripheral.</span>\n<span class=\"nt\">_add</span><span class=\"p\">:</span>\n    <span class=\"nt\">USART3</span><span class=\"p\">:</span>\n        <span class=\"nt\">derivedFrom</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">USART1</span>\n        <span class=\"nt\">baseAddress</span><span class=\"p\">:</span> <span class=\"s\">\"0x40004800\"</span>\n        <span class=\"nt\">interrupts</span><span class=\"p\">:</span>\n            <span class=\"nt\">USART3</span><span class=\"p\">:</span>\n                <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">USART3 global interrupt</span>\n                <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">39</span>\n\n<span class=\"c1\"># A new peripheral can have all its registers copied from another, in case</span>\n<span class=\"c1\"># it cannot quite be derivedFrom (e.g. some fields need different enumerated</span>\n<span class=\"c1\"># values) but it's otherwise almost exactly the same.</span>\n<span class=\"c1\"># The registers are copied but not name or address or interrupts.</span>\n<span class=\"nt\">_copy</span><span class=\"p\">:</span>\n    <span class=\"nt\">ADC3</span><span class=\"p\">:</span>\n        <span class=\"nt\">from</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ADC2</span>\n\n<span class=\"c1\"># The new peripheral can also be copied from another svd file for a different</span>\n<span class=\"c1\"># device. This is useful when a peripheral is missing in a device but the exact</span>\n<span class=\"c1\"># same peripheral already exist in another device.</span>\n<span class=\"nt\">_copy</span><span class=\"p\">:</span>\n    <span class=\"nt\">TIM1</span><span class=\"p\">:</span>\n        <span class=\"nt\">from</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">../svd/stm32f302.svd:TIM1</span>\n\n<span class=\"c1\"># Replace peripheral registers by a 'deriveFrom'.</span>\n<span class=\"c1\"># This is used when e.g. UART4 and UART5 are both independently defined,</span>\n<span class=\"c1\"># but you'd like to make UART5 be defined as derivedFrom UART4 instead.</span>\n<span class=\"nt\">_derive</span><span class=\"p\">:</span>\n    <span class=\"c1\"># The KEY peripheral looses all its elements but 'interrupt', 'name',</span>\n    <span class=\"c1\"># and 'baseAddress', and it is derivedFrom the VALUE peripheral.</span>\n    <span class=\"c1\"># Peripherals that were 'deriveFrom=\"KEY\"' are now 'deriveFrom=\"VALUE\"'.</span>\n    <span class=\"nt\">UART5</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">UART4</span>\n\n<span class=\"c1\"># Reorder the hierarchy of peripherals with 'deriveFrom'.</span>\n<span class=\"c1\"># This is used when e.g. I2C1 is marked as derivedFrom I2C3,</span>\n<span class=\"c1\"># but you'd like to swap that so that I2C3 becomes derivedFrom I2C1.</span>\n<span class=\"nt\">_rebase</span><span class=\"p\">:</span>\n    <span class=\"c1\"># The KEY peripheral steals everything but 'interrupt', 'name',</span>\n    <span class=\"c1\"># and 'baseAddress' elements from the VALUE peripheral.</span>\n    <span class=\"c1\"># Peripherals that were 'deriveFrom=\"VALUE\"' are now 'deriveFrom=\"KEY\"'.</span>\n    <span class=\"c1\"># The VALUE peripheral is marked as derivedFrom the updated KEY.</span>\n    <span class=\"nt\">I2C1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">I2C3</span>\n\n<span class=\"c1\"># An STM32 peripheral, matches an SVD &lt;peripheral&gt; tag.</span>\n<span class=\"c1\"># Does not match any tag with derivedFrom attribute set.</span>\n<span class=\"s\">\"GPIO*\"</span><span class=\"p p-Indicator\">:</span>\n    <span class=\"c1\"># We can include other YAML files inside this peripheral</span>\n    <span class=\"nt\">_include</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"path/to/file.yaml\"</span>\n\n    <span class=\"c1\"># Alter fields on existing registers inside this peripheral</span>\n    <span class=\"nt\">_modify</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Rename this badly named register. Takes effect before anything else.</span>\n        <span class=\"c1\"># Don't use wildcard matches if you are changing the name!</span>\n        <span class=\"c1\"># We could have specified name or description or other tags to update.</span>\n        <span class=\"nt\">GPIOB_OSPEEDR</span><span class=\"p\">:</span>\n          <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">OSPEEDR</span>\n        <span class=\"c1\"># Equivalently the register could go in a '_registers' block</span>\n        <span class=\"nt\">_registers</span><span class=\"p\">:</span>\n            <span class=\"nt\">GPIOB_OSPEEDR</span><span class=\"p\">:</span>\n                <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">OSPEEDR</span>\n        <span class=\"c1\"># Change the value of an interrupt in this peripheral</span>\n        <span class=\"nt\">_interrupts</span><span class=\"p\">:</span>\n            <span class=\"nt\">EXTI0</span><span class=\"p\">:</span>\n                <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">101</span>\n\n\n    <span class=\"c1\"># Add new registers and interrupts to this peripheral.</span>\n    <span class=\"c1\"># Entries are registers by default, which can also go inside a '_registers'</span>\n    <span class=\"c1\"># block, or interrupts go in an '_interrupts' block.</span>\n    <span class=\"nt\">_add</span><span class=\"p\">:</span>\n        <span class=\"nt\">EXAMPLER</span><span class=\"p\">:</span>\n            <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">An example register</span>\n            <span class=\"nt\">addressOffset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0x04</span>\n            <span class=\"nt\">access</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">read-write</span>\n            <span class=\"nt\">fields</span><span class=\"p\">:</span>\n                <span class=\"nt\">EXR1</span><span class=\"p\">:</span>\n                    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Example field</span>\n                    <span class=\"nt\">bitOffset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">16</span>\n                    <span class=\"nt\">bitWidth</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4</span>\n        <span class=\"nt\">_registers</span><span class=\"p\">:</span>\n            <span class=\"nt\">EXAMPLR2</span><span class=\"p\">:</span>\n                <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Another example register</span>\n        <span class=\"nt\">_interrupts</span><span class=\"p\">:</span>\n            <span class=\"nt\">EXAMPLEI</span><span class=\"p\">:</span>\n                <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">An example interrupt</span>\n                <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">100</span>\n\n    <span class=\"c1\"># Anywhere you can '_add' something, you can also '_delete' it.</span>\n    <span class=\"c1\"># Wildcards are supported. The value here can be a YAML list of registers</span>\n    <span class=\"c1\"># to delete (supported for backwards compatibility), or a YAML mapping</span>\n    <span class=\"c1\"># of lists of registers or interrupts.</span>\n    <span class=\"nt\">_delete</span><span class=\"p\">:</span>\n        <span class=\"nt\">GPIO*_EXTRAR</span><span class=\"p\">:</span>\n        <span class=\"nt\">_registers</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">GPIO*_EXAMPLER</span>\n        <span class=\"nt\">_interrupts</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">USART1</span>\n\n    <span class=\"c1\"># If registers have unnecessary common prefix,</span>\n    <span class=\"c1\"># you can clean it in all registers in peripheral by:</span>\n    <span class=\"nt\">_strip</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">PREFIX_</span>\n\n    <span class=\"c1\"># You can collect several same registers into one register array</span>\n    <span class=\"c1\"># that will be represented with svd2rust as array or elements</span>\n    <span class=\"c1\"># with one type</span>\n    <span class=\"c1\"># Minimal version:</span>\n    <span class=\"nt\">_array</span><span class=\"p\">:</span>\n        <span class=\"nt\">ARRAY*</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{}</span>\n\n    <span class=\"c1\"># You can also use the modifiers shown below:</span>\n    <span class=\"nt\">_array</span><span class=\"p\">:</span>\n        <span class=\"nt\">ARRAY*</span><span class=\"p\">:</span>\n            <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">NEW_NAME%s</span>\n            <span class=\"nt\">_modify</span><span class=\"p\">:</span>\n                <span class=\"nt\">FIELD</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">MINIMUM</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">MAXIMUM</span><span class=\"p p-Indicator\">]</span>\n                <span class=\"nt\">FIELD</span><span class=\"p\">:</span>\n                  <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">NEWDESC</span>\n        <span class=\"nt\">OTHER_ARRAY*</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{}</span>\n\n    <span class=\"c1\"># If you have registers that make up a group and can be repeated,</span>\n    <span class=\"c1\"># you can collect them into cluster like this:</span>\n    <span class=\"nt\">_cluster</span><span class=\"p\">:</span>\n        <span class=\"nt\">CLUSTER%s</span><span class=\"p\">:</span>\n            <span class=\"nt\">FIRST_REG</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{}</span>\n            <span class=\"nt\">SECOND_REG</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{}</span>\n\n    <span class=\"c1\"># A register on this peripheral, matches an SVD &lt;register&gt; tag</span>\n    <span class=\"nt\">MODER</span><span class=\"p\">:</span>\n        <span class=\"c1\"># As in the peripheral scope, rename or redescribe a field.</span>\n        <span class=\"c1\"># Don't use wildcard matches if you are changing the name!</span>\n        <span class=\"nt\">_modify</span><span class=\"p\">:</span>\n            <span class=\"nt\">FIELD</span><span class=\"p\">:</span>\n              <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">NEWDESC</span>\n\n        <span class=\"c1\"># Add new fields to this register</span>\n        <span class=\"nt\">_add</span><span class=\"p\">:</span>\n            <span class=\"nt\">NEWFIELD</span><span class=\"p\">:</span>\n              <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">DESCRIPTION</span>\n              <span class=\"nt\">bitOffset</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">12</span>\n              <span class=\"nt\">bitWidth</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4</span>\n              <span class=\"nt\">access</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">read-write</span>\n\n        <span class=\"c1\"># Often fields that should be one contiguous integer are specified</span>\n        <span class=\"c1\"># as a number of individual bits instead. This merges any matching</span>\n        <span class=\"c1\"># registers into a single field with the combined bitwidth and lowest</span>\n        <span class=\"c1\"># bit offset, and the shared description and access.</span>\n        <span class=\"nt\">_merge</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"FIELD*\"</span>\n\n        <span class=\"c1\"># A field in this register, matches an SVD &lt;field&gt; tag</span>\n        <span class=\"nt\">FIELD</span><span class=\"p\">:</span>\n            <span class=\"c1\"># By giving the field a dictionary we construct an enumerateValues</span>\n            <span class=\"nt\">VARIANT</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">VALUE</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">DESCRIPTION</span><span class=\"p p-Indicator\">]</span>\n            <span class=\"nt\">VARIANT</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">VALUE</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">DESCRIPTION</span><span class=\"p p-Indicator\">]</span>\n\n        <span class=\"c1\"># Another field. A list of two numbers gives a range writeConstraint.</span>\n        <span class=\"nt\">FIELD</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">MINIMUM</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">MAXIMUM</span><span class=\"p p-Indicator\">]</span>\n\n        <span class=\"c1\"># Another field with separate enumerated values for read and write</span>\n        <span class=\"nt\">FIELD</span><span class=\"p\">:</span>\n            <span class=\"nt\">_read</span><span class=\"p\">:</span>\n                <span class=\"nt\">VARIANT</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">VALUE</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">DESCRIPTION</span><span class=\"p p-Indicator\">]</span>\n                <span class=\"nt\">VARIANT</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">VALUE</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">DESCRIPTION</span><span class=\"p p-Indicator\">]</span>\n            <span class=\"nt\">_write</span><span class=\"p\">:</span>\n                <span class=\"nt\">VARIANT</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">VALUE</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">DESCRIPTION</span><span class=\"p p-Indicator\">]</span>\n                <span class=\"nt\">VARIANT</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">VALUE</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">DESCRIPTION</span><span class=\"p p-Indicator\">]</span>\n        <span class=\"c1\"># Sometimes fields are to big so we need to split them into smaller fields</span>\n        <span class=\"nt\">EXTI</span><span class=\"p\">:</span>\n          <span class=\"nt\">IMR</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This would split MR into MRi where i = 0 ... bitlength</span>\n            <span class=\"nt\">_split</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">MR</span><span class=\"p p-Indicator\">]</span>\n</pre>\n<h3>Name Matching</h3>\n<p>Peripheral, register, and field names can be specified:</p>\n<ul>\n<li>Directly (eg. the full name of the peripheral/register/field)</li>\n<li>Using <code>?</code> and <code>*</code> for single- and multi- character wildcards</li>\n<li>Using <code>[ABC]</code> to give a list of possible matching characters</li>\n<li>Using commas to separate a list of possible matches</li>\n</ul>\n<p>You must quote the name if using any special characters in YAML.</p>\n<h3>Style Guide</h3>\n<ul>\n<li>Enumerated values should be named in the past tense (<em>enabled</em>, <em>masked</em>,\netc.)</li>\n<li>Descriptions should start with capital letters and should not end with a period</li>\n</ul>\n<h2>License</h2>\n<p>svdtools is licensed under either of</p>\n<ul>\n<li>Apache License, Version 2.0 (<a href=\"LICENSE-APACHE\" rel=\"nofollow\">LICENSE-APACHE</a>)</li>\n<li>MIT License (<a href=\"LICENSE-MIT\" rel=\"nofollow\">LICENSE-MIT</a>)</li>\n</ul>\n<p>at your option.</p>\n<h2>Contribute</h2>\n<p>Pull requests are very welcome!</p>\n<p>Please apply <code>black</code> and <code>isort</code> before committing. This can be accomplished by:</p>\n<ul>\n<li>running <code>make fix</code></li>\n<li>running <code>black svdtools/</code> and <code>isort -y --recursive svdtools/</code></li>\n<li>installing an editor/IDE plugin</li>\n</ul>\n<p>This avoids bikeshedding over formatting issues :)</p>\n<p>Unless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.</p>\n\n          </div>"}, "last_serial": 6748443, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6f8b8d9ea89b6509ee91b6bda8fa4632", "sha256": "dbc047f13a90e35c8b19aa3288b27b103ba1a81ec86cb3c7e80b69fcb91e9887"}, "downloads": -1, "filename": "svdtools-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6f8b8d9ea89b6509ee91b6bda8fa4632", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 42737, "upload_time": "2019-08-17T14:17:58", "upload_time_iso_8601": "2019-08-17T14:17:58.471144Z", "url": "https://files.pythonhosted.org/packages/01/fa/78a24bef4a6c28e1d339ae5a7d0e3d7e389f603386bd7fc7bb412f3b519d/svdtools-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c295d565277f1a291cf965288e1ed91", "sha256": "2ad53f52a83e0d6dff2174c17db38896fc46af7a660849feae7d294bf9bb1a48"}, "downloads": -1, "filename": "svdtools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4c295d565277f1a291cf965288e1ed91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 80750, "upload_time": "2019-08-17T14:18:01", "upload_time_iso_8601": "2019-08-17T14:18:01.350146Z", "url": "https://files.pythonhosted.org/packages/0b/13/c8fd5f0ef300d35e81815485c8958a1396f07889f309de2eb4533e894ca7/svdtools-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c2a86609c1fd3f475bcd82c1926fa74c", "sha256": "cf3f214e054c51c880cba97d78454ad5978fe921d03a3fab73b61f96bc0b8a86"}, "downloads": -1, "filename": "svdtools-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c2a86609c1fd3f475bcd82c1926fa74c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 48179, "upload_time": "2019-08-20T21:07:45", "upload_time_iso_8601": "2019-08-20T21:07:45.012681Z", "url": "https://files.pythonhosted.org/packages/7a/0b/a221b3fd06f4481e66445169255f7bf8f79be57f0cdeebf4c7b6962df0d3/svdtools-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b192bed5079cc8bcd771e746d47aea8", "sha256": "d1d5c0a347e1e0a73d53c3d894c0de2f1cca2e13d78a340f587cd34fccae9aeb"}, "downloads": -1, "filename": "svdtools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5b192bed5079cc8bcd771e746d47aea8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 81658, "upload_time": "2019-08-20T21:07:47", "upload_time_iso_8601": "2019-08-20T21:07:47.110951Z", "url": "https://files.pythonhosted.org/packages/d3/ba/f7e70b20bdfe79adbe6c19d0f72e6d48d37cb4dd9a3d779ed10ed472b5f9/svdtools-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a3c712ed64448e9c50da9afd0de0be42", "sha256": "cd116aa8927e581a800db5cd0a10c444bff5ae8d535479c7b0e9a45d88cf7c13"}, "downloads": -1, "filename": "svdtools-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a3c712ed64448e9c50da9afd0de0be42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 48369, "upload_time": "2020-01-11T12:16:32", "upload_time_iso_8601": "2020-01-11T12:16:32.287055Z", "url": "https://files.pythonhosted.org/packages/9e/57/2eafd02aba0eacce1bcaedbc28f504398688161919606f4481f9685b62b5/svdtools-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fca1c5425efbe6c7d9fd41487f44dd9", "sha256": "e138e485c11ee4c4161349bb26923999aecf879a2d5a30c81905b1b3ee290ad8"}, "downloads": -1, "filename": "svdtools-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6fca1c5425efbe6c7d9fd41487f44dd9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 81819, "upload_time": "2020-01-11T12:16:34", "upload_time_iso_8601": "2020-01-11T12:16:34.248799Z", "url": "https://files.pythonhosted.org/packages/4b/01/d561886489e4a63257946cfbcb575a40241063cb4fe2bca98e16664f6e5b/svdtools-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "dff2f717b6d91d4cfaeb1e70f28be09f", "sha256": "ac4765040a066743471c6cbf9ac97ea7b3d0c22544f12f7725afd53e14d6f3f0"}, "downloads": -1, "filename": "svdtools-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "dff2f717b6d91d4cfaeb1e70f28be09f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49433, "upload_time": "2020-01-14T20:26:31", "upload_time_iso_8601": "2020-01-14T20:26:31.322652Z", "url": "https://files.pythonhosted.org/packages/bc/a7/94da51b5a62dfcf2312d21be27d18f9e0bd56bca82ff37c60beebdc69903/svdtools-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff5f65864063c77c374fc16ab91df2bf", "sha256": "72f9679d31981296e658ece513fbfebc84c30b0464dc9f2e5765f6f717b13048"}, "downloads": -1, "filename": "svdtools-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ff5f65864063c77c374fc16ab91df2bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 81983, "upload_time": "2020-01-14T20:26:33", "upload_time_iso_8601": "2020-01-14T20:26:33.902783Z", "url": "https://files.pythonhosted.org/packages/af/71/3e91efd1b4057277f0132b811d4ff05c03e89341d09fbc7633e37b8a2a20/svdtools-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "12200887dcb251b86466b5a29f19fd2d", "sha256": "aacdbe9d57ec91f7eefab04e05de0a747e5fcc899ddabe1b69a0b455321f65af"}, "downloads": -1, "filename": "svdtools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12200887dcb251b86466b5a29f19fd2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49861, "upload_time": "2020-01-14T21:33:29", "upload_time_iso_8601": "2020-01-14T21:33:29.278070Z", "url": "https://files.pythonhosted.org/packages/97/fa/86a75ed8d801eb380104d808ca74999cde7d4a4727ce2bde919130cbbc21/svdtools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8a627cf3182fbc3dd16deb9968fafab", "sha256": "493ac80d6b3afde0d8a22dd4c213884d63ec49be2904edc8266e8cc0a5ed8c3b"}, "downloads": -1, "filename": "svdtools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f8a627cf3182fbc3dd16deb9968fafab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 82130, "upload_time": "2020-01-14T21:33:31", "upload_time_iso_8601": "2020-01-14T21:33:31.168022Z", "url": "https://files.pythonhosted.org/packages/d9/b0/0f42f602937cd9f71001a7fbe1c37b4ce2ceb4888a25844aa8f447be638b/svdtools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b65b4544c97f44adc5249cb97979b478", "sha256": "1d8f3b05aad38a3f3f779db886c2752c8c06c211a4318f7befee56d882265d79"}, "downloads": -1, "filename": "svdtools-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b65b4544c97f44adc5249cb97979b478", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 51914, "upload_time": "2020-01-26T17:32:17", "upload_time_iso_8601": "2020-01-26T17:32:17.498133Z", "url": "https://files.pythonhosted.org/packages/c4/52/4f033d94c3a85bbe6e63f5b9bedf1e0c4f5957d5b22e323a8d3a850e8dfa/svdtools-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee1aa96361755192ba64fa9f6f7bcd87", "sha256": "0fcd310a234b938c79419ea76e2fb8cd87856692129f51a1c6ae3e107db37bf9"}, "downloads": -1, "filename": "svdtools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ee1aa96361755192ba64fa9f6f7bcd87", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 85593, "upload_time": "2020-01-26T17:32:19", "upload_time_iso_8601": "2020-01-26T17:32:19.769390Z", "url": "https://files.pythonhosted.org/packages/e5/c5/b2cad9fb49e94903f0030a30036b022c6abc4ff503aa70623d25bb8193b3/svdtools-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4c6b758d54791dac618b5b52106a60d2", "sha256": "01e0ffaa25ad5e7d0627045252ba01b745eef02b4513356a840a27bc2da3c95c"}, "downloads": -1, "filename": "svdtools-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4c6b758d54791dac618b5b52106a60d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 52008, "upload_time": "2020-01-31T06:36:29", "upload_time_iso_8601": "2020-01-31T06:36:29.176335Z", "url": "https://files.pythonhosted.org/packages/38/7d/ad2795d25e812a3ae9dfc5a9d82ec9600b64fceb748be227eaea801068ba/svdtools-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73279184b317e039abd23ffa64ba723e", "sha256": "56a65b93178e7ef217044056084a083367d41be58aa4df224e28d619441dac04"}, "downloads": -1, "filename": "svdtools-0.1.2.tar.gz", "has_sig": false, "md5_digest": "73279184b317e039abd23ffa64ba723e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 85634, "upload_time": "2020-01-31T06:36:32", "upload_time_iso_8601": "2020-01-31T06:36:32.522828Z", "url": "https://files.pythonhosted.org/packages/0d/15/d3657bac2027f62ec90d5b9998850b9f45752d5dbc607f692f2e92c9f1cf/svdtools-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "705099c8541c415f8cccc277314673d9", "sha256": "099f7e0f92c5143ad990f9a59d7a1796cbcf6bc13d2334a2bc395f76bd58da1f"}, "downloads": -1, "filename": "svdtools-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "705099c8541c415f8cccc277314673d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 56050, "upload_time": "2020-02-18T19:43:28", "upload_time_iso_8601": "2020-02-18T19:43:28.985967Z", "url": "https://files.pythonhosted.org/packages/5a/2f/9d7de8d77c7c49d43ebe1931976fd53a9d14337b8a855fd7825f781add8c/svdtools-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e3794bcbb51c6e03b8baea3a2c5152c", "sha256": "4995909048eb7519f0c036d136680d87ef4bca58e51a2c2c5c3433db80610a4b"}, "downloads": -1, "filename": "svdtools-0.1.3.tar.gz", "has_sig": false, "md5_digest": "2e3794bcbb51c6e03b8baea3a2c5152c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 85803, "upload_time": "2020-02-18T19:43:31", "upload_time_iso_8601": "2020-02-18T19:43:31.045296Z", "url": "https://files.pythonhosted.org/packages/3a/31/bc0203f8493d0383fcd069cb43a9beafd35182b72ae7a644cbdebeada3a4/svdtools-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "e7b72007ecdf3754708d261a2143c310", "sha256": "7e9490ef93d75620faaf2b52ef38d7d3647156b400392c3f232c54675d96a9ba"}, "downloads": -1, "filename": "svdtools-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e7b72007ecdf3754708d261a2143c310", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18653, "upload_time": "2020-02-23T14:20:41", "upload_time_iso_8601": "2020-02-23T14:20:41.870998Z", "url": "https://files.pythonhosted.org/packages/46/11/e9792d714d1dde4fe3cc5f93d1ea593fae0fec710e6f334cff7a97a3e766/svdtools-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5547a540046077e7b59786080028471", "sha256": "bcd8e08e4986b743200df5d4ab23b664c5b4e07e3ba90313097484f02dc7be1e"}, "downloads": -1, "filename": "svdtools-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c5547a540046077e7b59786080028471", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 85792, "upload_time": "2020-02-23T14:20:43", "upload_time_iso_8601": "2020-02-23T14:20:43.966997Z", "url": "https://files.pythonhosted.org/packages/62/ae/0b230aa93120a5a8b9eb1f3934cf8ca94437b71b0f6d31c1af1d7b992b64/svdtools-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "8c7da409867005c7499a87ed1097bacb", "sha256": "bb7f1c6f0c316773c1599a0de5309c7ccce688e4e8b239ef4feae9320d70ee92"}, "downloads": -1, "filename": "svdtools-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8c7da409867005c7499a87ed1097bacb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18938, "upload_time": "2020-03-04T15:07:53", "upload_time_iso_8601": "2020-03-04T15:07:53.835361Z", "url": "https://files.pythonhosted.org/packages/ab/25/495152e4f02c364bd8876e22596cb0353370e021a2e04049c009fdb0bc8c/svdtools-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36eb85109e649bd0074b707b152eaf15", "sha256": "34ebc6b235239ae68445ce7dbb493962078f489038b4f15facf87543c307f816"}, "downloads": -1, "filename": "svdtools-0.1.5.tar.gz", "has_sig": false, "md5_digest": "36eb85109e649bd0074b707b152eaf15", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 86665, "upload_time": "2020-03-04T15:07:55", "upload_time_iso_8601": "2020-03-04T15:07:55.742783Z", "url": "https://files.pythonhosted.org/packages/61/65/ae615824be3de3ec7f59a3d852116ba4cfb94e64c379d417d1f9ad6d8e81/svdtools-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c7da409867005c7499a87ed1097bacb", "sha256": "bb7f1c6f0c316773c1599a0de5309c7ccce688e4e8b239ef4feae9320d70ee92"}, "downloads": -1, "filename": "svdtools-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8c7da409867005c7499a87ed1097bacb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18938, "upload_time": "2020-03-04T15:07:53", "upload_time_iso_8601": "2020-03-04T15:07:53.835361Z", "url": "https://files.pythonhosted.org/packages/ab/25/495152e4f02c364bd8876e22596cb0353370e021a2e04049c009fdb0bc8c/svdtools-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36eb85109e649bd0074b707b152eaf15", "sha256": "34ebc6b235239ae68445ce7dbb493962078f489038b4f15facf87543c307f816"}, "downloads": -1, "filename": "svdtools-0.1.5.tar.gz", "has_sig": false, "md5_digest": "36eb85109e649bd0074b707b152eaf15", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 86665, "upload_time": "2020-03-04T15:07:55", "upload_time_iso_8601": "2020-03-04T15:07:55.742783Z", "url": "https://files.pythonhosted.org/packages/61/65/ae615824be3de3ec7f59a3d852116ba4cfb94e64c379d417d1f9ad6d8e81/svdtools-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:54 2020"}