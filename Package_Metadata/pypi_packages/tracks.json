{"info": {"author": "Bence Nagy", "author_email": "bence@underyx.me", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5"], "description": "Tracks: Simple A/B testing of your backend\n==========================================\n\nHave you ever wanted to A/B test multiple code paths on your backend? Consider\nthe following: management wants you to cut down on server costs. You come to\nterms with the fact that you really don't need a 128 GB memory 32 core beast\nfor your coconut store \u2014 but how low can you go? Let's test how a slower\ncoconut catalog page affects conversion! (First, without ``tracks``.)\n\n.. code-block:: python\n\n    response = render_coconut_catalog()\n    test_value = random.random()\n    if test_value < (1 / 3):\n        # control group\n        sleep_sec = 0\n    elif test_value < (2 / 3):\n        sleep_sec = 0.5\n    else:\n        sleep_sec = 2\n    time.sleep(sleep_sec)\n    cur.execute('INSERT INTO test_runs (user_id, variant) VALUES (%s, %s)', user_id, sleep_sec)\n    return response\n\nNow, this kinda works, but it's already a bit messy and can easily get out of\nhand if you consider that right now:\n\n - The thing you test is really, really simple\n - You don't lock a user's version to make sure they always get the same test\n   variant, making your data more mushy with each page load.\n - You don't exclude your most important users from testing to avoid hurting\n   conversion among coconut addicts in your initial test run. (Of course you\n   will need to include them later to make an informed decision.)\n - You already have a few more ideas about things you want to A/B test. Maybe\n   a hundred.\n - You can add another 5 engineers to the project and they will probably each\n   implement these tests slightly differently, and that's no good.\n\nEnter ``tracks``. First we define our variants:\n\n.. code-block:: python\n\n    class DelayTracks(tracks.SimpleTrackSet):\n\n        @staticmethod\n        def short_track():\n            time.sleep(0.5)\n\n        @staticmethod\n        def long_track():\n            time.sleep(2)\n\nAnd to use it:\n\n.. code-block:: python\n\n    response = render_coconut_catalog()\n    with DelayTracks() as track:\n        track()\n        cur.execute('INSERT INTO test_runs (user_id, variant) VALUES (%s, %s)', user_id, track.name)\n    return response\n\nAlready a bit nicer, but look what happens if we go through the list of\nproblems above one by one. Firstly, we can easily make the tests more complex:\n\n.. code-block:: python\n\n    class PricingTracks(tracks.SimpleTrackSet):\n\n        @staticmethod\n        def expensive_track(response):\n            for coconut in response['coconuts']:\n                coconut['price'] += 1\n\n        @staticmethod\n        def cheap_track(response):\n            for coconut in response['coconuts']:\n                coconut['price'] -= 1\n\nDidn't get that much worse, now did it? Let's take it even further with more\nvariants:\n\n.. code-block:: python\n\n    class PricingTracks(tracks.ParamTrackSet):\n\n        params = [{'price_delta': n} for n in range(-5, 6)]\n        add_control_track = False  # {'price_delta': 0} is our control group\n\n        @staticmethod\n        def track_name(price_delta):\n            return 'price_adjusted_by_{0}'.format(price_delta)\n\n        @staticmethod\n        def track(response, price_delta):\n            for coconut in response['coconuts']:\n                coconut['price'] += price_delta\n\nTons of tests! Let's move on to the second bullet point. How do we lock the\nvariant served to users? Just change your usage to pass a user key to tracks:\n\n\n.. code-block:: python\n\n    response = render_coconut_catalog()\n    with DelayTracks(key=user_id) as track:\n        track()\n        cur.execute('INSERT INTO test_runs (user_id, variant) VALUES (%s, %s)', user_id, track.name)\n    return response\n\nThe key will be serialized to a string and the variant to use will be derived\nfrom that string. The key of course can be anything; in most cases it might be\nthe user ID, but you could use a combination of the user's country and the\narticle ID for instance. (Not sure why you would want this specific example,\nbut you get the point.)\n\nSo, with that solved, list item #3, here we come! What if we're worried about\nour top customers being mad at us for testing things on them? Easy peasy.\n\n.. code-block:: python\n\n    class DelayTracks(tracks.SimpleTrackSet):\n\n        @property\n        def is_eligible(self):\n            return not self.context['user']['is_vip']\n\n        # code of variants trimmed\n\n    response = render_coconut_catalog()\n    with DelayTracks(context={'user': user_dict}) as track:\n        track()  # will always be control for VIPs (even with `add_control_group = False`)\n        if track.is_eligible:\n            cur.execute('INSERT INTO test_runs (user_id, variant) VALUES (%s, %s)', (user_id, track.name))\n    return response\n\nAnd finally, let's try running the delay and pricing tests at the same time!\n\n.. code-block:: python\n\n    tracksets = [DelayTracks, PricingTracks]\n\n    response = render_coconut_catalog()\n    with tracks.MultiTrackSet(tracksets, key=user_id) as multitrack:\n        multitrack()\n        cur.execute(\n            'INSERT INTO test_runs (user_id, test, variant) VALUES (%s, %s)',\n            (user_id, multitrack.trackset.name, multitrack.track.name),\n        )\n    return response\n\nSo, with this, ``tracks`` will gather all tests the user is eligible for, and\nchoose one of them based on the given key. We could also set\n``DelayTracks.weight`` to 1000 to make that one ten times as likely to be used\nas the pricing one (the default weight is 100.)\n\nWe got pretty far with just a few lines of code, didn't we?", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/underyx/tracks/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/underyx/tracks", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "tracks", "package_url": "https://pypi.org/project/tracks/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tracks/", "project_urls": {"Download": "https://github.com/underyx/tracks/releases", "Homepage": "https://github.com/underyx/tracks"}, "release_url": "https://pypi.org/project/tracks/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Simple A/B testing for your backend", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Have you ever wanted to A/B test multiple code paths on your backend? Consider\nthe following: management wants you to cut down on server costs. You come to\nterms with the fact that you really don\u2019t need a 128 GB memory 32 core beast\nfor your coconut store \u2014 but how low can you go? Let\u2019s test how a slower\ncoconut catalog page affects conversion! (First, without <tt>tracks</tt>.)</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">render_coconut_catalog</span><span class=\"p\">()</span>\n<span class=\"n\">test_value</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">test_value</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"c1\"># control group</span>\n    <span class=\"n\">sleep_sec</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">elif</span> <span class=\"n\">test_value</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"n\">sleep_sec</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">sleep_sec</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">sleep_sec</span><span class=\"p\">)</span>\n<span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'INSERT INTO test_runs (user_id, variant) VALUES (</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">)'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">sleep_sec</span><span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>Now, this kinda works, but it\u2019s already a bit messy and can easily get out of\nhand if you consider that right now:</p>\n<blockquote>\n<ul>\n<li>The thing you test is really, really simple</li>\n<li>You don\u2019t lock a user\u2019s version to make sure they always get the same test\nvariant, making your data more mushy with each page load.</li>\n<li>You don\u2019t exclude your most important users from testing to avoid hurting\nconversion among coconut addicts in your initial test run. (Of course you\nwill need to include them later to make an informed decision.)</li>\n<li>You already have a few more ideas about things you want to A/B test. Maybe\na hundred.</li>\n<li>You can add another 5 engineers to the project and they will probably each\nimplement these tests slightly differently, and that\u2019s no good.</li>\n</ul>\n</blockquote>\n<p>Enter <tt>tracks</tt>. First we define our variants:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">DelayTracks</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"o\">.</span><span class=\"n\">SimpleTrackSet</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">short_track</span><span class=\"p\">():</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">long_track</span><span class=\"p\">():</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>And to use it:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">render_coconut_catalog</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">DelayTracks</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">track</span><span class=\"p\">:</span>\n    <span class=\"n\">track</span><span class=\"p\">()</span>\n    <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'INSERT INTO test_runs (user_id, variant) VALUES (</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">)'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>Already a bit nicer, but look what happens if we go through the list of\nproblems above one by one. Firstly, we can easily make the tests more complex:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PricingTracks</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"o\">.</span><span class=\"n\">SimpleTrackSet</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expensive_track</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">coconut</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'coconuts'</span><span class=\"p\">]:</span>\n            <span class=\"n\">coconut</span><span class=\"p\">[</span><span class=\"s1\">'price'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cheap_track</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">coconut</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'coconuts'</span><span class=\"p\">]:</span>\n            <span class=\"n\">coconut</span><span class=\"p\">[</span><span class=\"s1\">'price'</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n</pre>\n<p>Didn\u2019t get that much worse, now did it? Let\u2019s take it even further with more\nvariants:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PricingTracks</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"o\">.</span><span class=\"n\">ParamTrackSet</span><span class=\"p\">):</span>\n\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'price_delta'</span><span class=\"p\">:</span> <span class=\"n\">n</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)]</span>\n    <span class=\"n\">add_control_track</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>  <span class=\"c1\"># {'price_delta': 0} is our control group</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">track_name</span><span class=\"p\">(</span><span class=\"n\">price_delta</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'price_adjusted_by_</span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">price_delta</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">track</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">price_delta</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">coconut</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'coconuts'</span><span class=\"p\">]:</span>\n            <span class=\"n\">coconut</span><span class=\"p\">[</span><span class=\"s1\">'price'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">price_delta</span>\n</pre>\n<p>Tons of tests! Let\u2019s move on to the second bullet point. How do we lock the\nvariant served to users? Just change your usage to pass a user key to tracks:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">render_coconut_catalog</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">DelayTracks</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">track</span><span class=\"p\">:</span>\n    <span class=\"n\">track</span><span class=\"p\">()</span>\n    <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'INSERT INTO test_runs (user_id, variant) VALUES (</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">)'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>The key will be serialized to a string and the variant to use will be derived\nfrom that string. The key of course can be anything; in most cases it might be\nthe user ID, but you could use a combination of the user\u2019s country and the\narticle ID for instance. (Not sure why you would want this specific example,\nbut you get the point.)</p>\n<p>So, with that solved, list item #3, here we come! What if we\u2019re worried about\nour top customers being mad at us for testing things on them? Easy peasy.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">DelayTracks</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"o\">.</span><span class=\"n\">SimpleTrackSet</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_eligible</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">][</span><span class=\"s1\">'is_vip'</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># code of variants trimmed</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">render_coconut_catalog</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">DelayTracks</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"n\">user_dict</span><span class=\"p\">})</span> <span class=\"k\">as</span> <span class=\"n\">track</span><span class=\"p\">:</span>\n    <span class=\"n\">track</span><span class=\"p\">()</span>  <span class=\"c1\"># will always be control for VIPs (even with `add_control_group = False`)</span>\n    <span class=\"k\">if</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">is_eligible</span><span class=\"p\">:</span>\n        <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'INSERT INTO test_runs (user_id, variant) VALUES (</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">)'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n<span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>And finally, let\u2019s try running the delay and pricing tests at the same time!</p>\n<pre><span class=\"n\">tracksets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">DelayTracks</span><span class=\"p\">,</span> <span class=\"n\">PricingTracks</span><span class=\"p\">]</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">render_coconut_catalog</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">tracks</span><span class=\"o\">.</span><span class=\"n\">MultiTrackSet</span><span class=\"p\">(</span><span class=\"n\">tracksets</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">multitrack</span><span class=\"p\">:</span>\n    <span class=\"n\">multitrack</span><span class=\"p\">()</span>\n    <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n        <span class=\"s1\">'INSERT INTO test_runs (user_id, test, variant) VALUES (</span><span class=\"si\">%s</span><span class=\"s1\">, </span><span class=\"si\">%s</span><span class=\"s1\">)'</span><span class=\"p\">,</span>\n        <span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">multitrack</span><span class=\"o\">.</span><span class=\"n\">trackset</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">multitrack</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>So, with this, <tt>tracks</tt> will gather all tests the user is eligible for, and\nchoose one of them based on the given key. We could also set\n<tt>DelayTracks.weight</tt> to 1000 to make that one ten times as likely to be used\nas the pricing one (the default weight is 100.)</p>\n<p>We got pretty far with just a few lines of code, didn\u2019t we?</p>\n\n          </div>"}, "last_serial": 2176944, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a8355102e4dab9706cfb3c51c05ad910", "sha256": "8852d5f44f66610e0f8b973e865827f70b6c207c01d856e59643486dc1ab53b3"}, "downloads": -1, "filename": "tracks-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a8355102e4dab9706cfb3c51c05ad910", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7467, "upload_time": "2016-06-15T14:25:34", "upload_time_iso_8601": "2016-06-15T14:25:34.291180Z", "url": "https://files.pythonhosted.org/packages/e7/3e/7ff763e831b4cdd73c0d957e29b5e9eaebf04753198dc5446ab3e6e63bfd/tracks-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "693bad960361dea1421a104b9b12db79", "sha256": "fcd114c22951e3fd1d925314525a32919ad102c2c0edb607b94b4bcad846e8dc"}, "downloads": -1, "filename": "tracks-0.1.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "693bad960361dea1421a104b9b12db79", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7504, "upload_time": "2016-06-20T10:25:04", "upload_time_iso_8601": "2016-06-20T10:25:04.993403Z", "url": "https://files.pythonhosted.org/packages/28/36/4832cfef74182abae15b7a6d044bfb2856d0e1b41d93754a23e26f6dbf20/tracks-0.1.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "693bad960361dea1421a104b9b12db79", "sha256": "fcd114c22951e3fd1d925314525a32919ad102c2c0edb607b94b4bcad846e8dc"}, "downloads": -1, "filename": "tracks-0.1.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "693bad960361dea1421a104b9b12db79", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7504, "upload_time": "2016-06-20T10:25:04", "upload_time_iso_8601": "2016-06-20T10:25:04.993403Z", "url": "https://files.pythonhosted.org/packages/28/36/4832cfef74182abae15b7a6d044bfb2856d0e1b41d93754a23e26f6dbf20/tracks-0.1.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:48:49 2020"}