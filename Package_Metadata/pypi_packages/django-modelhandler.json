{"info": {"author": "sashgorokhov", "author_email": "sashgorokhov@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "django-modelhandler\n*******************\n\n.. image:: https://badge.fury.io/py/django-modelhandler.svg\n    :target: https://badge.fury.io/py/django-modelhandler\n\n.. image:: https://travis-ci.org/sashgorokhov/django-modelhandler.svg?branch=master\n    :target: https://travis-ci.org/sashgorokhov/django-modelhandler\n\nA python logging handler that saves logs into django model. That's it.\n\nInstallation\n============\n\nVia pip:\n\n.. code-block:: shell\n\n    pip install django-modelhandler\n\nUsage\n=====\n\nAdd ``modelhandler`` to your INSTALLED_APPS, then, configure log handler in your desired way.\nFor example, using dictConfig:\n\n.. code-block:: python\n\n    {\n        'version': 1,\n        'handlers': {\n            'modelhandler': {\n                'class': 'modelhandler.handlers.LogModel',\n                'level': 'ERROR'\n            }\n        },\n        'loggers': {\n            'my_logger': {\n                'handlers': ['modelhandler'],\n                'level': 'ERROR'\n            }\n        }\n    }\n\nRun migrations that will create a ``Log`` model:\n\n.. code-block:: shell\n\n    python manage.py migrate\n\nAnd now you can start logging in django model.\n\nGetting logs:\n\n.. code-block:: python\n\n    from modelhandler.models import Log\n    # Get the latest log\n    log = Log.objects.latest()\n    log.name # logger name\n    log.level # logging level integer\n    log.levelname # logging level as string (DEBUG, INFO, etc.)\n    log.message # the log message\n    log.traceback # traceback, if exists. default: None\n    log.filename # filename (with ext) where the log was sent\n    log.funcName # function name where the log was sent\n    log.created # log creation datetime\n    log.formatted # the log message as if it was written in file. (with [datetime] [level] etc.)\n\n\nIf you have a django admin enabled, then you can browse your logs on model Log of application modelhandler.\nIt has a customized modeladmin to enabale filtering by logger name and levelname, and searching by message.\n\nIf you would like to customize a log model (to alter models Meta), then just subclass a ``modelhandler.models.Log``\nmodel, do whatever you want and add your model to LogModel handler parameters:\n\n.. code-block:: python\n\n    'handlers': {\n        'modelhandler': {\n            'class': 'modelhandler.handlers.LogModel',\n            'model': 'path.to.your.model'\n            'level': 'ERROR'\n        }\n    }\n\nIf you using celery in your project then you might want to add some model cleaning tasks in ``CELERYBEAT_SCHEDULE``:\n\n.. code-block:: python\n\n    CELERYBEAT_SCHEDULE = {\n        'cleanup_day': {\n            'task': 'modelhandler.tasks.cleanup_day',\n            'schedule': timedelta(days=1)\n        }, # OR\n        'cleanup_week': {\n            'task': 'modelhandler.tasks.cleanup_week',\n            'schedule': timedelta(days=7)\n        }, # OR\n        'cleanup_month': {\n            'task': 'modelhandler.tasks.cleanup_month',\n            'schedule': timedelta(days=30)\n        }\n    }\n\n``modelhandler.tasks.cleanup_day`` will delete all logs that are older than one day from time of task execution.\n``modelhandler.tasks.cleanup_week`` and ``modelhandler.tasks.cleanup_month`` are similar.\n\nIf you want to customize the time of deletion, there is a task ``modelhandler.tasks.cleanup_logs`` that accepts\na ``before`` parameter that must be a datetime object or None (in this case a value of timezone.now() will be taken).\nThere is no magic: just ``Log.objects.filter(created__lte=before).delete()``\n\n\n.. :changelog:\n\nHistory\n-------\n\n1.0.0 (2016-06-12)\n++++++++++++++++++\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/sashgorokhov/django-modelhandler/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sashgorokhov/django-modelhandler", "keywords": "django,logging,handler", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "django-modelhandler", "package_url": "https://pypi.org/project/django-modelhandler/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-modelhandler/", "project_urls": {"Download": "https://github.com/sashgorokhov/django-modelhandler/archive/master.zip", "Homepage": "https://github.com/sashgorokhov/django-modelhandler"}, "release_url": "https://pypi.org/project/django-modelhandler/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A python logging handler that saves logs into django model. That's it.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/django-modelhandler\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-modelhandler.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92242ea8f285a96fd78576c198db51bf9ac8f7a9/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d6d6f64656c68616e646c65722e737667\"></a>\n<a href=\"https://travis-ci.org/sashgorokhov/django-modelhandler\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/sashgorokhov/django-modelhandler.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7be6f85ab7fccd92325011ac9fa8f28834a8fd6b/68747470733a2f2f7472617669732d63692e6f72672f73617368676f726f6b686f762f646a616e676f2d6d6f64656c68616e646c65722e7376673f6272616e63683d6d6173746572\"></a>\n<p>A python logging handler that saves logs into django model. That\u2019s it.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Via pip:</p>\n<pre>pip install django-modelhandler\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Add <tt>modelhandler</tt> to your INSTALLED_APPS, then, configure log handler in your desired way.\nFor example, using dictConfig:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'modelhandler'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'modelhandler.handlers.LogModel'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'ERROR'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'loggers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'my_logger'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'modelhandler'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'ERROR'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Run migrations that will create a <tt>Log</tt> model:</p>\n<pre>python manage.py migrate\n</pre>\n<p>And now you can start logging in django model.</p>\n<p>Getting logs:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">modelhandler.models</span> <span class=\"kn\">import</span> <span class=\"n\">Log</span>\n<span class=\"c1\"># Get the latest log</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">latest</span><span class=\"p\">()</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"c1\"># logger name</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">level</span> <span class=\"c1\"># logging level integer</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">levelname</span> <span class=\"c1\"># logging level as string (DEBUG, INFO, etc.)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"c1\"># the log message</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">traceback</span> <span class=\"c1\"># traceback, if exists. default: None</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">filename</span> <span class=\"c1\"># filename (with ext) where the log was sent</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">funcName</span> <span class=\"c1\"># function name where the log was sent</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">created</span> <span class=\"c1\"># log creation datetime</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">formatted</span> <span class=\"c1\"># the log message as if it was written in file. (with [datetime] [level] etc.)</span>\n</pre>\n<p>If you have a django admin enabled, then you can browse your logs on model Log of application modelhandler.\nIt has a customized modeladmin to enabale filtering by logger name and levelname, and searching by message.</p>\n<p>If you would like to customize a log model (to alter models Meta), then just subclass a <tt>modelhandler.models.Log</tt>\nmodel, do whatever you want and add your model to LogModel handler parameters:</p>\n<pre><span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'modelhandler'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'modelhandler.handlers.LogModel'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'model'</span><span class=\"p\">:</span> <span class=\"s1\">'path.to.your.model'</span>\n        <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'ERROR'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If you using celery in your project then you might want to add some model cleaning tasks in <tt>CELERYBEAT_SCHEDULE</tt>:</p>\n<pre><span class=\"n\">CELERYBEAT_SCHEDULE</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'cleanup_day'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'task'</span><span class=\"p\">:</span> <span class=\"s1\">'modelhandler.tasks.cleanup_day'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'schedule'</span><span class=\"p\">:</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"c1\"># OR</span>\n    <span class=\"s1\">'cleanup_week'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'task'</span><span class=\"p\">:</span> <span class=\"s1\">'modelhandler.tasks.cleanup_week'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'schedule'</span><span class=\"p\">:</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"c1\"># OR</span>\n    <span class=\"s1\">'cleanup_month'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'task'</span><span class=\"p\">:</span> <span class=\"s1\">'modelhandler.tasks.cleanup_month'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'schedule'</span><span class=\"p\">:</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><tt>modelhandler.tasks.cleanup_day</tt> will delete all logs that are older than one day from time of task execution.\n<tt>modelhandler.tasks.cleanup_week</tt> and <tt>modelhandler.tasks.cleanup_month</tt> are similar.</p>\n<p>If you want to customize the time of deletion, there is a task <tt>modelhandler.tasks.cleanup_logs</tt> that accepts\na <tt>before</tt> parameter that must be a datetime object or None (in this case a value of timezone.now() will be taken).\nThere is no magic: just <tt><span class=\"pre\">Log.objects.filter(created__lte=before).delete()</span></tt></p>\n<div id=\"history\">\n<h3>History</h3>\n<h3 id=\"id1\"><span class=\"section-subtitle\">1.0.0 (2016-06-12)</span></h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2169145, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8dd1cddeb9ac3509f0b20d6f40d3a3f7", "sha256": "46dca9679896173bfa6d922b8856d0f4e9c63ac306d6260c804104700d0e3435"}, "downloads": -1, "filename": "django-modelhandler-1.0.0.zip", "has_sig": false, "md5_digest": "8dd1cddeb9ac3509f0b20d6f40d3a3f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6574, "upload_time": "2016-06-15T18:05:58", "upload_time_iso_8601": "2016-06-15T18:05:58.702372Z", "url": "https://files.pythonhosted.org/packages/c6/89/93e4a4adecc3b0d8966cd3f90666f93513d9dabdcd55fe6a516f8d826f3d/django-modelhandler-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8dd1cddeb9ac3509f0b20d6f40d3a3f7", "sha256": "46dca9679896173bfa6d922b8856d0f4e9c63ac306d6260c804104700d0e3435"}, "downloads": -1, "filename": "django-modelhandler-1.0.0.zip", "has_sig": false, "md5_digest": "8dd1cddeb9ac3509f0b20d6f40d3a3f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6574, "upload_time": "2016-06-15T18:05:58", "upload_time_iso_8601": "2016-06-15T18:05:58.702372Z", "url": "https://files.pythonhosted.org/packages/c6/89/93e4a4adecc3b0d8966cd3f90666f93513d9dabdcd55fe6a516f8d826f3d/django-modelhandler-1.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:35:02 2020"}