{"info": {"author": "Josh Reid", "author_email": "js2reid@uwaterloo.ca", "bugtrack_url": null, "classifiers": [], "description": "# pymanifold\nPython implementation of the Manifold microfluidic simulation language\n\nThis library allows you to design a microfluidic circuit as a schematic consisting of:\n\n* **Nodes** - consist of elementary devices such as logic gates or fluid input channels\n* **Connections** - connect two nodes together\n* **Ports** - a type of node that allows for the input or output of fluids\n* **Constraints** - describe design rules or goals that are too complex to be described\nin terms of the other three primitives\n\nOnce the circuit has been designed you can call solve on the schematic which will use\na Satisfiability Modulo Theory (SMT) solver to determine if the given design and\nparameters has a solution (meaning that the circuit will work) and if so, provide\nthe range of parameters (dimensions of the connections, flow rates, pressures, etc.)\nthat the circuit will remain functional\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local\nmachine for development and testing purposes.\n\n### Prerequisites\n\nThis library requires installaion of [pysmt](https://github.com/pysmt/pysmt), an SMT\nsolver library for python used to determine if the designed microfluidic circuit will\nwork and if so within what range of parameters.\n\nOnce this is installed (remember to call ``` pysmt-install --z3 ``` to install the\nZ3 SMT solver within pysmt and addit to you PYTHONPATH environment variable my calling\n``` pysmt-install --env ``` and running that command. This installs the Z3 solver my Microsoft\nto use to solve the SMT2 equations this.\n\n### Installing\n\nCurrently this is not on pip so to use it clone the repository using ```\ngit clone https://github.com/jsreid13/pymanifold.git ``` and put the script src/pymanifold.py\nwithin your python3 site packages (C:\\\\python35\\Lib\\site-packages on Windows, \n/usr/local/lib/python3.5/dist-packages on Linux).\n\n## Usage\n\n# pymanifold\nPython implementation of the Manifold microfluidic simulation language\n\nThis library allows you to design a microfluidic circuit as a schematic consisting of:\n\n* **Nodes** - consist of elementary devices such as logic gates or fluid input channels\n* **Connections** - connect two nodes together\n* **Ports** - a type of node that allows for the input or output of fluids\n* **Constraints** - describe design rules or goals that are too complex to be described\nin terms of the other three primitives\n\nOnce the circuit has been designed you can call solve on the schematic which will use\na Satisfiability Modulo Theory (SMT) solver to determine if the given design and\nparameters has a solution (meaning that the circuit will work) and if so, provide\nthe range of parameters (dimensions of the connections, flow rates, pressures, etc.)\nthat the circuit will remain functional\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local\nmachine for development and testing purposes.\n\n### Prerequisites\n\nThis library requires installaion of [pysmt](https://github.com/pysmt/pysmt), an SMT\nsolver library for python used to determine if the designed microfluidic circuit will\nwork and if so within what range of parameters.\n\nOnce this is installed (remember to call ``` pysmt-install --z3 ``` to install the\nZ3 SMT solver within pysmt and addit to you PYTHONPATH environment variable my calling\n``` pysmt-install --env ``` and running that command. This installs the Z3 solver my Microsoft\nto use to solve the SMT2 equations this.\n\n### Installing\n\nCurrently this is not on pip so to use it clone the repository using ```\ngit clone https://github.com/jsreid13/pymanifold.git ``` and put the script src/pymanifold.py\nwithin your python3 site packages (C:\\\\python35\\Lib\\site-packages on Windows, \n/usr/local/lib/python3.5/dist-packages on Linux).\n\n## Usage\n\nBuild the docker image using in the base directory of this repo:\n` docker build -t pymanifold . `\nAnd run the project within Docker using:\n` docker run -e \"PYTHONPATH=/dreal4/opt/dreal/4.18.07.1/lib/python2.7/site-packages\" -it --rm -v $(pwd):/tmp -w /tmp  pymanifold python3 src/pymanifold.py `\nFor access to OpenModelica on top of pymanifold, run:\n` docker container run -it --user $(id -u):$(id -g) --rm pymf-om:jessie bash `\nThe code to create a simple T-Junction droplet generator is as follows found in this\n[test script](src/test.py), but is still in development:\n\n```\nimport pymanifold as pymf\n\nsch = pymf.Schematic()\n#       D\n#       |\n#   C---N---O\ncontinuous_node = 'continuous'\ndispersed_node = 'dispersed'\noutput_node = 'out'\njunction_node = 't_j'\n# Continuous and output node should have same flow rate\n# syntax: sch.port(name, design, pressure, flow_rate, X_pos, Y_pos)\nsch.port(continuous_node, 'input', 2, 5, 0, 0)\nsch.port(dispersed_node, 'input', 2, 2, 1, 1)\nsch.port(output_node, 'output', 2, 5, 2, 0)\nsch.node(junction_node, 2, 1, 0, kind='t-junction')\n# syntax: sch.channel(shape, min_length, width, height, input, output)\nsch.channel('rectangle', 0.5, 0.1, 0.1, continuous_node,\n            junction_node, phase='continuous')\nsch.channel('rectangle', 0.5, 0.1, 0.1, dispersed_node,\n            junction_node, phase='dispersed')\nsch.channel('rectangle', 0.5, 0.1, 0.1, junction_node,\n            output_node, phase='output')\n\nprint(sch.solve())\n\n# Return: Model object from pySMT with dictionary like mapping of each Symbol to its value\n```\n\n## Development\n\nThis project is still in development, features that need to be added are:\n\n* Add an elecrophoretic cross as a new node type with voltages at two ends and pressure driven flow on\nthe other two short ends. Steps:\n  * Create a new translate method named translate_ep_cross\n    * This requires 4 connections, two must have a voltage constraint and the other two have a pressure\n\tconstraint\n\t  * This will require the creation of a new port type that is a voltage input, currently only\n\t  fluid injection ports exist with a pressure and flow rate, this will have a voltage and no flow\n\t* Needs to append correct SMT expressions based on those in Stephen Chou's report to simulate an\n\telectropheretic cross(EP cross) https://drive.google.com/open?id=1UF-Jun4-ppJHyb1wMQFqFzaUNbZSdkzl\n  * Add the name of that translation method to the translate_nodes under the name ep_cross\n* Feature to output electrical characteristics of chip to MapleSim(or something similar)\n  * Possibly use this library from Dassault Systems [FMPy](https://github.com/CATIA-Systems/FMPy)\n  * Or produce Modelica code using [OMPython](https://github.com/OpenModelica/OMPython) \n  to feed into MapleSim\n* Create a website to outline usage using [read the docs](https://readthedocs.org/)\n  * Fill in the content to match other readthedocs like [pysmt](http://pysmt.readthedocs.io)\n  or [Jupyter](http://jupyter.readthedocs.io)\n* Put this library on pip to simplify installation\n* Gather a database of real world microfluidic chip designs and information about their output\n* Implement a machine learning algorithm on this database to improve the library's accuracy in\ndetermining if different designs will work\n* Implement abstraction refinement from original project\n\n## Authors\n\n* **Josh Reid** - *Creator of Python implementation* - [jsreid13](https://github.com/jsreid13)\n* **Murphy Berzish** - *Creator of Manifold* - [mtrberzi](https://github.com/mtrberzi)\n* **Derek Rayside** - *Owner of Manifold* - [drayside](https://github.com/drayside)\n* **Chris Willar** - *Contributor to Manifold* - [cwillgit](https://github.com/cwillgit)\n* **Shubham Verma** - *Contributor to Manifold* - [VermaSh](https://github.com/VermaSh)\n* **Yifan Mo** - *Contributor to Manifold* - [ymo13](https://github.com/ymo13)\n* **Tyson Andre** - *Contributor to Manifold* - [TysonAndre](https://github.com/TysonAndre)\n* **Max Chen** - *Contributor to Manifold* - [maxqchen](https://github.com/maxqchen)\n* **Nik Klassen** - *Contributor to Manifold* - [nikklassen](https://github.com/nikklassen)\n* **Peter Socha** - *Contributor to Manifold* - [psocha](https://github.com/psocha)\n\n## License\n\nThis project is licensed under the GNU General Public License v3.0 - see the\n[LICENSE](LICENSE) file for details\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/manifold-lang/pymanifold", "keywords": "Python Manifold microfluidics simulation", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pymanifold", "package_url": "https://pypi.org/project/pymanifold/", "platform": "", "project_url": "https://pypi.org/project/pymanifold/", "project_urls": {"Homepage": "https://github.com/manifold-lang/pymanifold", "Project": "https://github.com/manifold-lang"}, "release_url": "https://pypi.org/project/pymanifold/0.2.3/", "requires_dist": ["matplotlib", "networkx"], "requires_python": "", "summary": "Python-Manifold is a Python implementation of Derek Rayside's    Manifold microfluidic simulation tool", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            # pymanifold<br>Python implementation of the Manifold microfluidic simulation language<br><br>This library allows you to design a microfluidic circuit as a schematic consisting of:<br><br>* **Nodes** - consist of elementary devices such as logic gates or fluid input channels<br>* **Connections** - connect two nodes together<br>* **Ports** - a type of node that allows for the input or output of fluids<br>* **Constraints** - describe design rules or goals that are too complex to be described<br>in terms of the other three primitives<br><br>Once the circuit has been designed you can call solve on the schematic which will use<br>a Satisfiability Modulo Theory (SMT) solver to determine if the given design and<br>parameters has a solution (meaning that the circuit will work) and if so, provide<br>the range of parameters (dimensions of the connections, flow rates, pressures, etc.)<br>that the circuit will remain functional<br><br>## Getting Started<br><br>These instructions will get you a copy of the project up and running on your local<br>machine for development and testing purposes.<br><br>### Prerequisites<br><br>This library requires installaion of [pysmt](https://github.com/pysmt/pysmt), an SMT<br>solver library for python used to determine if the designed microfluidic circuit will<br>work and if so within what range of parameters.<br><br>Once this is installed (remember to call ``` pysmt-install --z3 ``` to install the<br>Z3 SMT solver within pysmt and addit to you PYTHONPATH environment variable my calling<br>``` pysmt-install --env ``` and running that command. This installs the Z3 solver my Microsoft<br>to use to solve the SMT2 equations this.<br><br>### Installing<br><br>Currently this is not on pip so to use it clone the repository using ```<br>git clone https://github.com/jsreid13/pymanifold.git ``` and put the script src/pymanifold.py<br>within your python3 site packages (C:\\\\python35\\Lib\\site-packages on Windows, <br>/usr/local/lib/python3.5/dist-packages on Linux).<br><br>## Usage<br><br># pymanifold<br>Python implementation of the Manifold microfluidic simulation language<br><br>This library allows you to design a microfluidic circuit as a schematic consisting of:<br><br>* **Nodes** - consist of elementary devices such as logic gates or fluid input channels<br>* **Connections** - connect two nodes together<br>* **Ports** - a type of node that allows for the input or output of fluids<br>* **Constraints** - describe design rules or goals that are too complex to be described<br>in terms of the other three primitives<br><br>Once the circuit has been designed you can call solve on the schematic which will use<br>a Satisfiability Modulo Theory (SMT) solver to determine if the given design and<br>parameters has a solution (meaning that the circuit will work) and if so, provide<br>the range of parameters (dimensions of the connections, flow rates, pressures, etc.)<br>that the circuit will remain functional<br><br>## Getting Started<br><br>These instructions will get you a copy of the project up and running on your local<br>machine for development and testing purposes.<br><br>### Prerequisites<br><br>This library requires installaion of [pysmt](https://github.com/pysmt/pysmt), an SMT<br>solver library for python used to determine if the designed microfluidic circuit will<br>work and if so within what range of parameters.<br><br>Once this is installed (remember to call ``` pysmt-install --z3 ``` to install the<br>Z3 SMT solver within pysmt and addit to you PYTHONPATH environment variable my calling<br>``` pysmt-install --env ``` and running that command. This installs the Z3 solver my Microsoft<br>to use to solve the SMT2 equations this.<br><br>### Installing<br><br>Currently this is not on pip so to use it clone the repository using ```<br>git clone https://github.com/jsreid13/pymanifold.git ``` and put the script src/pymanifold.py<br>within your python3 site packages (C:\\\\python35\\Lib\\site-packages on Windows, <br>/usr/local/lib/python3.5/dist-packages on Linux).<br><br>## Usage<br><br>Build the docker image using in the base directory of this repo:<br>` docker build -t pymanifold . `<br>And run the project within Docker using:<br>` docker run -e \"PYTHONPATH=/dreal4/opt/dreal/4.18.07.1/lib/python2.7/site-packages\" -it --rm -v $(pwd):/tmp -w /tmp  pymanifold python3 src/pymanifold.py `<br>For access to OpenModelica on top of pymanifold, run:<br>` docker container run -it --user $(id -u):$(id -g) --rm pymf-om:jessie bash `<br>The code to create a simple T-Junction droplet generator is as follows found in this<br>[test script](src/test.py), but is still in development:<br><br>```<br>import pymanifold as pymf<br><br>sch = pymf.Schematic()<br>#       D<br>#       |<br>#   C---N---O<br>continuous_node = 'continuous'<br>dispersed_node = 'dispersed'<br>output_node = 'out'<br>junction_node = 't_j'<br># Continuous and output node should have same flow rate<br># syntax: sch.port(name, design, pressure, flow_rate, X_pos, Y_pos)<br>sch.port(continuous_node, 'input', 2, 5, 0, 0)<br>sch.port(dispersed_node, 'input', 2, 2, 1, 1)<br>sch.port(output_node, 'output', 2, 5, 2, 0)<br>sch.node(junction_node, 2, 1, 0, kind='t-junction')<br># syntax: sch.channel(shape, min_length, width, height, input, output)<br>sch.channel('rectangle', 0.5, 0.1, 0.1, continuous_node,<br>            junction_node, phase='continuous')<br>sch.channel('rectangle', 0.5, 0.1, 0.1, dispersed_node,<br>            junction_node, phase='dispersed')<br>sch.channel('rectangle', 0.5, 0.1, 0.1, junction_node,<br>            output_node, phase='output')<br><br>print(sch.solve())<br><br># Return: Model object from pySMT with dictionary like mapping of each Symbol to its value<br>```<br><br>## Development<br><br>This project is still in development, features that need to be added are:<br><br>* Add an elecrophoretic cross as a new node type with voltages at two ends and pressure driven flow on<br>the other two short ends. Steps:<br>  * Create a new translate method named translate_ep_cross<br>    * This requires 4 connections, two must have a voltage constraint and the other two have a pressure<br>\tconstraint<br>\t  * This will require the creation of a new port type that is a voltage input, currently only<br>\t  fluid injection ports exist with a pressure and flow rate, this will have a voltage and no flow<br>\t* Needs to append correct SMT expressions based on those in Stephen Chou's report to simulate an<br>\telectropheretic cross(EP cross) https://drive.google.com/open?id=1UF-Jun4-ppJHyb1wMQFqFzaUNbZSdkzl<br>  * Add the name of that translation method to the translate_nodes under the name ep_cross<br>* Feature to output electrical characteristics of chip to MapleSim(or something similar)<br>  * Possibly use this library from Dassault Systems [FMPy](https://github.com/CATIA-Systems/FMPy)<br>  * Or produce Modelica code using [OMPython](https://github.com/OpenModelica/OMPython) <br>  to feed into MapleSim<br>* Create a website to outline usage using [read the docs](https://readthedocs.org/)<br>  * Fill in the content to match other readthedocs like [pysmt](http://pysmt.readthedocs.io)<br>  or [Jupyter](http://jupyter.readthedocs.io)<br>* Put this library on pip to simplify installation<br>* Gather a database of real world microfluidic chip designs and information about their output<br>* Implement a machine learning algorithm on this database to improve the library's accuracy in<br>determining if different designs will work<br>* Implement abstraction refinement from original project<br><br>## Authors<br><br>* **Josh Reid** - *Creator of Python implementation* - [jsreid13](https://github.com/jsreid13)<br>* **Murphy Berzish** - *Creator of Manifold* - [mtrberzi](https://github.com/mtrberzi)<br>* **Derek Rayside** - *Owner of Manifold* - [drayside](https://github.com/drayside)<br>* **Chris Willar** - *Contributor to Manifold* - [cwillgit](https://github.com/cwillgit)<br>* **Shubham Verma** - *Contributor to Manifold* - [VermaSh](https://github.com/VermaSh)<br>* **Yifan Mo** - *Contributor to Manifold* - [ymo13](https://github.com/ymo13)<br>* **Tyson Andre** - *Contributor to Manifold* - [TysonAndre](https://github.com/TysonAndre)<br>* **Max Chen** - *Contributor to Manifold* - [maxqchen](https://github.com/maxqchen)<br>* **Nik Klassen** - *Contributor to Manifold* - [nikklassen](https://github.com/nikklassen)<br>* **Peter Socha** - *Contributor to Manifold* - [psocha](https://github.com/psocha)<br><br>## License<br><br>This project is licensed under the GNU General Public License v3.0 - see the<br>[LICENSE](LICENSE) file for details<br><br><br>\n          </div>"}, "last_serial": 4155199, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "66467a142d279bc9ad18cbb1b48fe462", "sha256": "2e84f1c8ee7a4311b01029c4ea53ab8d8db44cbd5f0222e78ce8fd216b53eb74"}, "downloads": -1, "filename": "pymanifold-0.1-py3.5.egg", "has_sig": false, "md5_digest": "66467a142d279bc9ad18cbb1b48fe462", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 3834, "upload_time": "2018-08-09T18:23:26", "upload_time_iso_8601": "2018-08-09T18:23:26.176247Z", "url": "https://files.pythonhosted.org/packages/d6/5f/7df4e9c8d26c12da2e6c30b573f1e18a7d6147d978c1c05acd16ccd9d50b/pymanifold-0.1-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7434cc6373765fb62bb6dcbd5dfb5d37", "sha256": "22926711ac7e22aab24a834019d59a2ea4879d0e4a3af04e73f8ae599aa5ba0d"}, "downloads": -1, "filename": "pymanifold-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7434cc6373765fb62bb6dcbd5dfb5d37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7241, "upload_time": "2018-08-09T20:55:01", "upload_time_iso_8601": "2018-08-09T20:55:01.319055Z", "url": "https://files.pythonhosted.org/packages/fc/4c/ca0b0b82d3fb1f055e9a5861f59c1a61dd2b760f47d033ccb36000508c33/pymanifold-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68ecc9b6e4a958930d602609ee30705e", "sha256": "b55756c3c2eac13335a098e2685c18cd80338bff34e2b9c0e65e8d6ed08480d3"}, "downloads": -1, "filename": "pymanifold-0.1.tar.gz", "has_sig": false, "md5_digest": "68ecc9b6e4a958930d602609ee30705e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16714, "upload_time": "2018-08-09T20:57:04", "upload_time_iso_8601": "2018-08-09T20:57:04.502982Z", "url": "https://files.pythonhosted.org/packages/a3/0f/96554793bcc769610e1c6f7655ea7c6005acd43c64aa566f82c32820b1a3/pymanifold-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d7fa05e2236384b698161950a1b08f71", "sha256": "e6920f0df31cb36de3f811308448966a25db460f4afdeaef71e62bf93209fdea"}, "downloads": -1, "filename": "pymanifold-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d7fa05e2236384b698161950a1b08f71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7241, "upload_time": "2018-08-09T21:04:43", "upload_time_iso_8601": "2018-08-09T21:04:43.211011Z", "url": "https://files.pythonhosted.org/packages/63/c4/3216bed7062f8800f84c48448e0c91a8af2d2577bf7dd2295a8767c81e63/pymanifold-0.2-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "73bc4cbbf4129e782c250407c0049393", "sha256": "669476349ccf9d3b63501f7212f91ab719b223ba69d0ab2ea4aebb6ef6d9e0ba"}, "downloads": -1, "filename": "pymanifold-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "73bc4cbbf4129e782c250407c0049393", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17082, "upload_time": "2018-08-09T21:48:12", "upload_time_iso_8601": "2018-08-09T21:48:12.481313Z", "url": "https://files.pythonhosted.org/packages/f9/b6/92dad1f02bb7dfeed69c8fc18c366b53c8363569758a2d10c9e074f7c603/pymanifold-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "dd3a7d27755927cfc0689dc3bbe6a93e", "sha256": "9ec01db93682204c199ba7815ee0bc507f14b370aad05d437ccadeb26b715557"}, "downloads": -1, "filename": "pymanifold-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "dd3a7d27755927cfc0689dc3bbe6a93e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1019263, "upload_time": "2018-08-10T03:30:29", "upload_time_iso_8601": "2018-08-10T03:30:29.786404Z", "url": "https://files.pythonhosted.org/packages/a7/ef/e94af675acaa65aef3210c2d80dfdf7607b2321b782c4d371271617ae4f3/pymanifold-0.2.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd3a7d27755927cfc0689dc3bbe6a93e", "sha256": "9ec01db93682204c199ba7815ee0bc507f14b370aad05d437ccadeb26b715557"}, "downloads": -1, "filename": "pymanifold-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "dd3a7d27755927cfc0689dc3bbe6a93e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1019263, "upload_time": "2018-08-10T03:30:29", "upload_time_iso_8601": "2018-08-10T03:30:29.786404Z", "url": "https://files.pythonhosted.org/packages/a7/ef/e94af675acaa65aef3210c2d80dfdf7607b2321b782c4d371271617ae4f3/pymanifold-0.2.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:02:35 2020"}