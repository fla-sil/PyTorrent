{"info": {"author": "WolkAbout", "author_email": "info@wolkabout.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Communications", "Topic :: Internet", "Topic :: Software Development :: Embedded Systems"], "description": "# WolkGatewayModule-SDK-Python\n\nPython 3 package for connecting devices to WolkAbout IoT Platform through [WolkGateway](https://github.com/Wolkabout/WolkGateway).\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)  [![Documentation Status](https://readthedocs.org/projects/wolkgatewaymodule-sdk-python/badge/?version=latest)](https://wolkgatewaymodule-sdk-python.readthedocs.io/en/latest/?badge=latest)  [![PyPI version](https://badge.fury.io/py/wolk-gateway-module.svg)](https://badge.fury.io/py/wolk-gateway-module)  ![GitHub](https://img.shields.io/github/license/Wolkabout/WolkGatewayModule-SDK-Python.svg?style=flat-square)  ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/wolk-gateway-module.svg?style=flat-square)\n\n----\nThis package is meant to be used for developing WolkGateway modules that enable devices without IP connectivity to send their data to WolkAbout IoT Platform.\n\n![WolkGateway Architecture](https://github.com/Wolkabout/WolkGatewayModule-SDK-Python/blob/master/docs/source/wolkabout_gateway_module.gif)\n\nThe user is responsible for providing the custom implementation that usually contains the device\u2019s network communication protocol, as well as for providing the business logic and everything related to the used hardware and the specifics of their particular use case.\n\nHowever, all the communication that is directed towards the gateway through WolkConnect - BUS Handler is already provided with this package, an open source implementation written in Python 3.7 that uses the MQTT protocol over TCP/IP to communicate with [WolkGateway](https://github.com/Wolkabout/WolkGateway).\n\n## Requirements\n\n* Python 3.7\n\nAll requirements for this project can be installed on Debian based systems by invoking:\n```console\nsudo apt-get install python3.7 python3-pip && python3 -m pip install pip && python3.7 -m pip install pip\n```\n\n## Installation\n\nThe project can be installed using Python's package manager pip:\n```console\nsudo python3.7 -m pip install wolk-gateway-module\n```\n\nor installed from source by cloning the repository and running:\n\n```console\nsudo python3.7 -m pip install -r requirements.txt\npython3.7 setup.py install\n```\n\n\n## Example Usage\n\n### Creating devices\n\n```python\nimport wolk_gateway_module as wolk\n\n# Create device sensors\n\n# Use data_type parameter where reading type & unit symbol are not important\ngeneric_sensor = wolk.SensorTemplate(\n    name=\"Generic sensor\",\n    reference=\"G\",  # References must be unique per device\n    data_type=wolk.DataType.NUMERIC,\n    description=\"Optional description\",\n    minimum=0,  # Optional minimum value\n    maximum=100,  # Optional maximum value\n)\ntemperature_sensor = wolk.SensorTemplate(\n    name=\"Temperature\",\n    reference=\"T\",\n    reading_type_name=wolk.ReadingTypeName.TEMPERATURE,\n    unit=wolk.ReadingTypeMeasurementUnit.CELSIUS,\n    minimum=-20,\n    maximum=85,\n    description=\"Temperature sensor with range -20 to 85 Celsius\",\n)\n# Create a device template used to register the device\ndevice_template = wolk.DeviceTemplate(\n    sensors=[generic_sensor, temperature_sensor]\n)\n# Create a device\ndevice = wolk.Device(\n    name=\"Device\",\n    key=\"DEVICE_KEY\",  # Unique device key\n    template=device_template\n)\n```\n\n### Establishing connection with WolkGateway\n\n```python\n# Implement a device status provider\n\n\ndef get_device_status(device_key: str) -> wolk.DeviceStatus:\n    \"\"\"Return current device status.\"\"\"\n    if device_key == \"DEVICE_KEY\":\n        # Handle getting current device status here\n        return wolk.DeviceStatus.CONNECTED\n\n\nwolk_module = wolk.Wolk(\n    host=\"localhost\",  # Host address of WolkGateway\n    port=1883,  # TCP/IP port used for WolkGateway's MQTT broker\n    module_name=\"Python module\",  # Used for connection authentication\n    device_status_provider=get_device_status,\n)\n\nwolk_module.connect()\n```\n\n### Disconnecting from WolkGateway\n\n```python\nwolk_module.disconnect()\n```\n\n### Adding devices\n\nDevices need to be registered on the Platform before their data is considered valid.\nThis is achieved by calling:\n```python\nwolk_module.add_device(device)\n```\nTo stop listening for commands for a specific device use:\n```python\nwolk_module.remove_device(device)\n```\nThis will only stop acknowledging inbound commands, to delete the device completely use WolkGateway or the web application, depending on who has control over devices.\n\n### Publishing device status\nDevice status is obtained by calling provided `device_status_provider` function\n```python\nwolk_module.publish_device_status(\"DEVICE_KEY\")\n```\n\n### Adding sensor readings\n\n```python\nwolk_module.add_sensor_reading(\"DEVICE_KEY\", \"REFERENCE\", \"value\")\n# For reading with data size > 1, like location or acceleration use tuples\nwolk_module.add_sensor_reading(\"DEVICE_KEY\", \"LOC\", (24.534, -34.325))\n# Add timestamps to store when reading occurred to preserve history, otherwise\n# Platform will assign timestamp when it receives the reading\nwolk_module.add_sensor_reading(\"KEY\", \"R\", 12, int(round(time.time() * 1000)))\n\n# Add multiple sensor reading for a device\nwolk_module.add_sensor_readings(\"KEY\", {\"R1\": \"value\", \"R2\": True}, timestamp)\n```\n\nThis method will put serialized messages in storage.\n\n### Publishing stored messages\n\n```python\nwolk_module.publish()  # Publish all stored messages\nwolk_module.publish(\"DEVICE_KEY\")  # Publish all stored messages for device\n```\n\n### Alarms\n```python\nhumidity_alarm = wolk.AlarmTemplate(\n    name=\"High Humidity\",\n    reference=\"HH\",\n    description=\"High humidity has been detected\"\n)\ndevice_template = wolk.DeviceTemplate(alarms=[humidity_alarm])\n\n# Create device, Wolk instance, add device, connect...\n\n# Will place alarm message into storage, use publish method to send\nwolk_module.add_alarm(\"DEVICE_KEY\", \"HH\", active=True, timestamp=None)\n```\n\n### Actuators\n\nIn order to control device actuators, provide an `actuation_handler` and `actuator_status_provider`.\n\n```python\nswitch_actuator = wolk.ActuatorTemplate(\n    name=\"Switch\",\n    reference=\"SW\",\n    data_type=wolk.DataType.BOOLEAN,\n    description=\"Light switch\",\n)\nslider_actuator = wolk.ActuatorTemplate(\n    name=\"Slider\",\n    reference=\"SL\",\n    data_type=wolk.DataType.NUMERIC,\n    minimum=0,\n    maximum=100,\n    description=\"Light dimmer\",\n)\ndevice_template = wolk.DeviceTemplate(\n    actuators=[switch_actuator, slider_actuator]\n)\ndevice = wolk.Device(\"Device\", \"DEVICE_KEY\", device_template)\n\n\ndef handle_actuation(\n    device_key: str, reference: str, value: Union[bool, int, float, str]\n) -> None:\n    \"\"\"\n    Set device actuator identified by reference to value.\n\n    Must be implemented as non blocking.\n    Must be implemented as thread safe.\n    \"\"\"\n    if device_key == \"DEVICE_KEY\":\n        if reference == \"SW\":\n            # Handle setting the value here\n            switch.value = value\n\n        elif reference == \"SL\":\n            slider.value = value\n\n\ndef get_actuator_status(\n    device_key: str, reference: str\n) -> Tuple[wolk.ActuatorState, Union[bool, int, float, str]]:\n    \"\"\"\n    Get current actuator status identified by device key and reference.\n\n    Reads the status of actuator from the device\n    and returns it as a tuple containing the actuator state and current value.\n\n    Must be implemented as non blocking.\n    Must be implemented as thread safe.\n    \"\"\"\n    if device_key == \"DEVICE_KEY\":\n        if reference == \"SW\":\n            # Handle getting current actuator value here\n            return wolk.ActuatorState.READY, switch.value\n\n        elif reference == \"SL\":\n            return wolk.ActuatorState.READY, slider.value\n\n\n# Pass functions to Wolk instance\nwolk_module = wolk.Wolk(\n    host=\"localhost\",\n    port=1883,\n    module_name=\"Python module\",\n    device_status_provider=get_device_status,\n    actuation_handler=handle_actuation,\n    actuator_status_provider=get_actuator_status,\n)\n\nwolk_module.add_device(device)\n\nwolk_module.connect()\n\n# This method will call the provided actuator_status_provider function\n# and publish the state immediately or store message if unable to publish\nwolk_module.publish_actuator_status(\"DEVICE_KEY\", \"SW\")\nwolk_module.publish_actuator_status(\"DEVICE_KEY\", \"SL\")\n```\n\n### Configurations\n\nSimilar to actuators, using device configuration options requires providing a `configuration_handler` and a `configuration_provider` to the `Wolk` instance.\n\n```python\nlogging_level_configuration = wolk.ConfigurationTemplate(\n    name=\"Logging level\",\n    reference=\"LL\",\n    data_type=wolk.DataType.STRING,\n    default_value=\"INFO\",\n    description=\"eg. Set device logging level\",\n)\nlogging_interval_configuration = wolk.ConfigurationTemplate(\n    name=\"Logging interval\",\n    reference=\"LI\",\n    data_type=wolk.DataType.NUMERIC,\n    size=3,\n    labels=[\"seconds\", \"minutes\", \"hours\"],\n    description=\"eg. Set logging intervals\",\n)\ndevice_template = wolk.DeviceTemplate(\n    configurations=[logging_level_configuration, logging_level_configuration]\n)\ndevice = wolk.Device(\"Device\", \"DEVICE_KEY\", device_template)\n\n\ndef get_configuration(\n    device_key: str\n) -> Dict[\n    str,\n    Union[\n        int,\n        float,\n        bool,\n        str,\n        Tuple[int, int],\n        Tuple[int, int, int],\n        Tuple[float, float],\n        Tuple[float, float, float],\n        Tuple[str, str],\n        Tuple[str, str, str],\n    ],\n]:\n    \"\"\"\n    Get current configuration options.\n\n    Reads device configuration and returns it as a dictionary\n    with device configuration reference as key,\n    and device configuration value as value.\n    Must be implemented as non blocking.\n    Must be implemented as thread safe.\n    \"\"\"\n    if device_key == \"DEVICE_KEY\":\n        # Handle getting configuration values here\n        return {\n            \"LL\": get_log_level(),\n            \"LI\": get_log_inteval(),\n        }\n\n\ndef handle_configuration(\n    device_key: str,\n    configuration: Dict[\n        str,\n        Union[\n            int,\n            float,\n            bool,\n            str,\n            Tuple[int, int],\n            Tuple[int, int, int],\n            Tuple[float, float],\n            Tuple[float, float, float],\n            Tuple[str, str],\n            Tuple[str, str, str],\n        ],\n    ],\n) -> None:\n    \"\"\"\n    Change device's configuration options.\n\n    Must be implemented as non blocking.\n    Must be implemented as thread safe.\n    \"\"\"\n    if device_key == \"DEVICE_KEY\":\n        for reference, value in configuration.items():\n            # Handle setting configuration values here\n            if reference == \"LL\":\n                set_log_level(value)\n            elif reference == \"LI\":\n                set_log_interval(value)\n\n\n# Pass functions to Wolk instance\nwolk_module = wolk.Wolk(\n    host=\"localhost\",\n    port=1883,\n    module_name=\"Python module\",\n    device_status_provider=get_device_status,\n    configuration_provider=get_configuration,\n    configuration_handler=handle_configuration,\n)\n\nwolk_module.add_device(device)\n\nwolk_module.connect()\n\n# This method will call the provided configuration_provider function\n# and publish the state immediately or store message if unable to publish\nwolk_module.publish_configuration(\"DEVICE_KEY\")\n```\n\n### Firmware update\nIn order to enable firmware update for devices, provide an implementation of `FirmwareHandler` and pass to `Wolk` instance.\n\n```python\n\ndevice_template = wolk.DeviceTemplate(supports_firmware_update=True)\ndevice = wolk.Device(\"Device\", \"DEVICE_KEY\", device_template)\n\n\nclass FirmwareHandlerImplementation(wolk.FirmwareHandler):\n    \"\"\"Handle firmware installation and abort commands, and report version.\n\n    Once an object of this class is passed to a Wolk object,\n    it will set callback methods `on_install_success` and\n    `on_install_fail` used for reporting the result of\n    the firmware update process. Use these callbacks in `install_firmware`\n    and `abort_installation` methods.\"\"\"\n\n    def install_firmware(\n        self, device_key: str, firmware_file_path: str\n    ) -> None:\n        \"\"\"\n        Handle the installation of the firmware file.\n\n        Call `self.on_install_success(device_key)` to report success.\n        Reporting success will also get new firmware version.\n\n        If installation fails, call `self.on_install_fail(device_key, status)`\n        where:\n        `status = FirmwareUpdateStatus(\n            FirmwareUpdateState.ERROR,\n            FirmwareUpdateErrorCode.INSTALLATION_FAILED\n        )`\n        or use other values from `FirmwareUpdateErrorCode` if they fit better.\n        \"\"\"\n        if device_key == \"DEVICE_KEY\":\n            print(\n                f\"Installing firmware: '{firmware_file_path}' \"\n                f\"on device '{device_key}'\"\n            )\n            # Handle the actual installation here\n            if install_success:\n                self.on_install_success(device_key)\n            else:\n                status = wolk.FirmwareUpdateStatus(\n                    wolk.FirmwareUpdateState.ERROR,\n                    wolk.FirmwareUpdateErrorCode.INSTALLATION_FAILED,\n                )\n                self.on_install_fail(device_key, status)\n\n    def abort_installation(self, device_key: str) -> None:\n        \"\"\"\n        Attempt to abort the firmware installation process for device.\n\n        Call `self.on_install_fail(device_key, status)` to report if\n        the installation process was able to be aborted with\n        `status = FirmwareUpdateStatus(FirmwareUpdateState.ABORTED)`\n        If unable to stop the installation process, no action is required.\n        \"\"\"\n        if device_key == \"DEVICE_KEY\":\n            # Manage to stop firmware installation\n            status = wolk.FirmwareUpdateStatus(\n                wolk.FirmwareUpdateState.ABORTED\n            )\n            self.on_install_fail(device_key, status)\n\n    def get_firmware_version(self, device_key: str) -> str:\n        \"\"\"Return device's current firmware version.\"\"\"\n        if device_key == \"DEVICE_KEY\":\n            # Handle getting the current firmware version here\n            return version\n\n\nwolk_module = wolk.Wolk(\n    host=\"localhost\",\n    port=1883,\n    module_name=\"Python module\",\n    device_status_provider=get_device_status,\n    firmware_handler=FirmwareHandlerImplementation(),\n)\n\nwolk_module.add_device(device)\n\nwolk_module.connect()\n```\n\n### Debugging\n\nEnable debug logging with:\n```python\nwolk.logging_config(\"debug\", log_file=None)\n```\n\n### Data persistence\n\nData persistence mechanism used **by default** stored messages in-memory.\nIn cases when provided in-memory persistence is suboptimal, it it possible to use custom persistence by implementing `OutboundMessageQueue` and passing it in the following manner:\n```python\nwolk_module = wolk.Wolk(\n    host=\"localhost\",\n    port=1883,\n    module_name=\"Python module\",\n    device_status_provider=get_device_status,\n    outbound_message_queue=CustomPersistence()\n)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Wolkabout/WolkGatewayModule-SDK-Python", "keywords": "IoT,WolkAbout,Internet of Things", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "wolk-gateway-module", "package_url": "https://pypi.org/project/wolk-gateway-module/", "platform": "", "project_url": "https://pypi.org/project/wolk-gateway-module/", "project_urls": {"Homepage": "https://github.com/Wolkabout/WolkGatewayModule-SDK-Python"}, "release_url": "https://pypi.org/project/wolk-gateway-module/1.0.6/", "requires_dist": ["paho-mqtt (==1.4.0)"], "requires_python": ">=3.7.0", "summary": "SDK for gateway communication modules that connect to WolkAbout IoT Platform", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WolkGatewayModule-SDK-Python</h1>\n<p>Python 3 package for connecting devices to WolkAbout IoT Platform through <a href=\"https://github.com/Wolkabout/WolkGateway\" rel=\"nofollow\">WolkGateway</a>.</p>\n<p><a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>  <a href=\"https://wolkgatewaymodule-sdk-python.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fa9eaf337204a4dbefe762fff09d9495de00185/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f776f6c6b676174657761796d6f64756c652d73646b2d707974686f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a>  <a href=\"https://badge.fury.io/py/wolk-gateway-module\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1af32009fd3c3b9a2f435086d7b0e95c57ae7719/68747470733a2f2f62616467652e667572792e696f2f70792f776f6c6b2d676174657761792d6d6f64756c652e737667\"></a>  <img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/611bdfb61eef70e1fd8072549703a2aabbfbd137/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f576f6c6b61626f75742f576f6c6b476174657761794d6f64756c652d53444b2d507974686f6e2e7376673f7374796c653d666c61742d737175617265\">  <img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9410fb703a09232bf39a9bde3159645598eaa66d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f776f6c6b2d676174657761792d6d6f64756c652e7376673f7374796c653d666c61742d737175617265\"></p>\n<hr>\n<p>This package is meant to be used for developing WolkGateway modules that enable devices without IP connectivity to send their data to WolkAbout IoT Platform.</p>\n<p><img alt=\"WolkGateway Architecture\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05abf087cce56ef7bc46aba93a13cad8f5d4d9f3/68747470733a2f2f6769746875622e636f6d2f576f6c6b61626f75742f576f6c6b476174657761794d6f64756c652d53444b2d507974686f6e2f626c6f622f6d61737465722f646f63732f736f757263652f776f6c6b61626f75745f676174657761795f6d6f64756c652e676966\"></p>\n<p>The user is responsible for providing the custom implementation that usually contains the device\u2019s network communication protocol, as well as for providing the business logic and everything related to the used hardware and the specifics of their particular use case.</p>\n<p>However, all the communication that is directed towards the gateway through WolkConnect - BUS Handler is already provided with this package, an open source implementation written in Python 3.7 that uses the MQTT protocol over TCP/IP to communicate with <a href=\"https://github.com/Wolkabout/WolkGateway\" rel=\"nofollow\">WolkGateway</a>.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.7</li>\n</ul>\n<p>All requirements for this project can be installed on Debian based systems by invoking:</p>\n<pre><span class=\"go\">sudo apt-get install python3.7 python3-pip &amp;&amp; python3 -m pip install pip &amp;&amp; python3.7 -m pip install pip</span>\n</pre>\n<h2>Installation</h2>\n<p>The project can be installed using Python's package manager pip:</p>\n<pre><span class=\"go\">sudo python3.7 -m pip install wolk-gateway-module</span>\n</pre>\n<p>or installed from source by cloning the repository and running:</p>\n<pre><span class=\"go\">sudo python3.7 -m pip install -r requirements.txt</span>\n<span class=\"go\">python3.7 setup.py install</span>\n</pre>\n<h2>Example Usage</h2>\n<h3>Creating devices</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">wolk_gateway_module</span> <span class=\"k\">as</span> <span class=\"nn\">wolk</span>\n\n<span class=\"c1\"># Create device sensors</span>\n\n<span class=\"c1\"># Use data_type parameter where reading type &amp; unit symbol are not important</span>\n<span class=\"n\">generic_sensor</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">SensorTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Generic sensor\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reference</span><span class=\"o\">=</span><span class=\"s2\">\"G\"</span><span class=\"p\">,</span>  <span class=\"c1\"># References must be unique per device</span>\n    <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"o\">.</span><span class=\"n\">NUMERIC</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Optional description\"</span><span class=\"p\">,</span>\n    <span class=\"n\">minimum</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"c1\"># Optional minimum value</span>\n    <span class=\"n\">maximum</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>  <span class=\"c1\"># Optional maximum value</span>\n<span class=\"p\">)</span>\n<span class=\"n\">temperature_sensor</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">SensorTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Temperature\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reference</span><span class=\"o\">=</span><span class=\"s2\">\"T\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reading_type_name</span><span class=\"o\">=</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ReadingTypeName</span><span class=\"o\">.</span><span class=\"n\">TEMPERATURE</span><span class=\"p\">,</span>\n    <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ReadingTypeMeasurementUnit</span><span class=\"o\">.</span><span class=\"n\">CELSIUS</span><span class=\"p\">,</span>\n    <span class=\"n\">minimum</span><span class=\"o\">=-</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"n\">maximum</span><span class=\"o\">=</span><span class=\"mi\">85</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Temperature sensor with range -20 to 85 Celsius\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Create a device template used to register the device</span>\n<span class=\"n\">device_template</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DeviceTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">sensors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">generic_sensor</span><span class=\"p\">,</span> <span class=\"n\">temperature_sensor</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Create a device</span>\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Device\"</span><span class=\"p\">,</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Unique device key</span>\n    <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">device_template</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Establishing connection with WolkGateway</h3>\n<pre><span class=\"c1\"># Implement a device status provider</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_device_status</span><span class=\"p\">(</span><span class=\"n\">device_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DeviceStatus</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Return current device status.\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">device_key</span> <span class=\"o\">==</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle getting current device status here</span>\n        <span class=\"k\">return</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DeviceStatus</span><span class=\"o\">.</span><span class=\"n\">CONNECTED</span>\n\n\n<span class=\"n\">wolk_module</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Wolk</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Host address of WolkGateway</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">1883</span><span class=\"p\">,</span>  <span class=\"c1\"># TCP/IP port used for WolkGateway's MQTT broker</span>\n    <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"s2\">\"Python module\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Used for connection authentication</span>\n    <span class=\"n\">device_status_provider</span><span class=\"o\">=</span><span class=\"n\">get_device_status</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<h3>Disconnecting from WolkGateway</h3>\n<pre><span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n<h3>Adding devices</h3>\n<p>Devices need to be registered on the Platform before their data is considered valid.\nThis is achieved by calling:</p>\n<pre><span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_device</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n</pre>\n<p>To stop listening for commands for a specific device use:</p>\n<pre><span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">remove_device</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n</pre>\n<p>This will only stop acknowledging inbound commands, to delete the device completely use WolkGateway or the web application, depending on who has control over devices.</p>\n<h3>Publishing device status</h3>\n<p>Device status is obtained by calling provided <code>device_status_provider</code> function</p>\n<pre><span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">publish_device_status</span><span class=\"p\">(</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Adding sensor readings</h3>\n<pre><span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_sensor_reading</span><span class=\"p\">(</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"REFERENCE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># For reading with data size &gt; 1, like location or acceleration use tuples</span>\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_sensor_reading</span><span class=\"p\">(</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"LOC\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">24.534</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">34.325</span><span class=\"p\">))</span>\n<span class=\"c1\"># Add timestamps to store when reading occurred to preserve history, otherwise</span>\n<span class=\"c1\"># Platform will assign timestamp when it receives the reading</span>\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_sensor_reading</span><span class=\"p\">(</span><span class=\"s2\">\"KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"R\"</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Add multiple sensor reading for a device</span>\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_sensor_readings</span><span class=\"p\">(</span><span class=\"s2\">\"KEY\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"R1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">,</span> <span class=\"s2\">\"R2\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span> <span class=\"n\">timestamp</span><span class=\"p\">)</span>\n</pre>\n<p>This method will put serialized messages in storage.</p>\n<h3>Publishing stored messages</h3>\n<pre><span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">()</span>  <span class=\"c1\"># Publish all stored messages</span>\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Publish all stored messages for device</span>\n</pre>\n<h3>Alarms</h3>\n<pre><span class=\"n\">humidity_alarm</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">AlarmTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"High Humidity\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reference</span><span class=\"o\">=</span><span class=\"s2\">\"HH\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"High humidity has been detected\"</span>\n<span class=\"p\">)</span>\n<span class=\"n\">device_template</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DeviceTemplate</span><span class=\"p\">(</span><span class=\"n\">alarms</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">humidity_alarm</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Create device, Wolk instance, add device, connect...</span>\n\n<span class=\"c1\"># Will place alarm message into storage, use publish method to send</span>\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_alarm</span><span class=\"p\">(</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"HH\"</span><span class=\"p\">,</span> <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<h3>Actuators</h3>\n<p>In order to control device actuators, provide an <code>actuation_handler</code> and <code>actuator_status_provider</code>.</p>\n<pre><span class=\"n\">switch_actuator</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ActuatorTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Switch\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reference</span><span class=\"o\">=</span><span class=\"s2\">\"SW\"</span><span class=\"p\">,</span>\n    <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"o\">.</span><span class=\"n\">BOOLEAN</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Light switch\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">slider_actuator</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ActuatorTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Slider\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reference</span><span class=\"o\">=</span><span class=\"s2\">\"SL\"</span><span class=\"p\">,</span>\n    <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"o\">.</span><span class=\"n\">NUMERIC</span><span class=\"p\">,</span>\n    <span class=\"n\">minimum</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">maximum</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Light dimmer\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">device_template</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DeviceTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">actuators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">switch_actuator</span><span class=\"p\">,</span> <span class=\"n\">slider_actuator</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s2\">\"Device\"</span><span class=\"p\">,</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">device_template</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_actuation</span><span class=\"p\">(</span>\n    <span class=\"n\">device_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Set device actuator identified by reference to value.</span>\n\n<span class=\"sd\">    Must be implemented as non blocking.</span>\n<span class=\"sd\">    Must be implemented as thread safe.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">device_key</span> <span class=\"o\">==</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">reference</span> <span class=\"o\">==</span> <span class=\"s2\">\"SW\"</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle setting the value here</span>\n            <span class=\"n\">switch</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">reference</span> <span class=\"o\">==</span> <span class=\"s2\">\"SL\"</span><span class=\"p\">:</span>\n            <span class=\"n\">slider</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_actuator_status</span><span class=\"p\">(</span>\n    <span class=\"n\">device_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ActuatorState</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Get current actuator status identified by device key and reference.</span>\n\n<span class=\"sd\">    Reads the status of actuator from the device</span>\n<span class=\"sd\">    and returns it as a tuple containing the actuator state and current value.</span>\n\n<span class=\"sd\">    Must be implemented as non blocking.</span>\n<span class=\"sd\">    Must be implemented as thread safe.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">device_key</span> <span class=\"o\">==</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">reference</span> <span class=\"o\">==</span> <span class=\"s2\">\"SW\"</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle getting current actuator value here</span>\n            <span class=\"k\">return</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ActuatorState</span><span class=\"o\">.</span><span class=\"n\">READY</span><span class=\"p\">,</span> <span class=\"n\">switch</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">reference</span> <span class=\"o\">==</span> <span class=\"s2\">\"SL\"</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ActuatorState</span><span class=\"o\">.</span><span class=\"n\">READY</span><span class=\"p\">,</span> <span class=\"n\">slider</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n\n<span class=\"c1\"># Pass functions to Wolk instance</span>\n<span class=\"n\">wolk_module</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Wolk</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">1883</span><span class=\"p\">,</span>\n    <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"s2\">\"Python module\"</span><span class=\"p\">,</span>\n    <span class=\"n\">device_status_provider</span><span class=\"o\">=</span><span class=\"n\">get_device_status</span><span class=\"p\">,</span>\n    <span class=\"n\">actuation_handler</span><span class=\"o\">=</span><span class=\"n\">handle_actuation</span><span class=\"p\">,</span>\n    <span class=\"n\">actuator_status_provider</span><span class=\"o\">=</span><span class=\"n\">get_actuator_status</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_device</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># This method will call the provided actuator_status_provider function</span>\n<span class=\"c1\"># and publish the state immediately or store message if unable to publish</span>\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">publish_actuator_status</span><span class=\"p\">(</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"SW\"</span><span class=\"p\">)</span>\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">publish_actuator_status</span><span class=\"p\">(</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"SL\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Configurations</h3>\n<p>Similar to actuators, using device configuration options requires providing a <code>configuration_handler</code> and a <code>configuration_provider</code> to the <code>Wolk</code> instance.</p>\n<pre><span class=\"n\">logging_level_configuration</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ConfigurationTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Logging level\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reference</span><span class=\"o\">=</span><span class=\"s2\">\"LL\"</span><span class=\"p\">,</span>\n    <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"o\">.</span><span class=\"n\">STRING</span><span class=\"p\">,</span>\n    <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s2\">\"INFO\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"eg. Set device logging level\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">logging_interval_configuration</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">ConfigurationTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Logging interval\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reference</span><span class=\"o\">=</span><span class=\"s2\">\"LI\"</span><span class=\"p\">,</span>\n    <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DataType</span><span class=\"o\">.</span><span class=\"n\">NUMERIC</span><span class=\"p\">,</span>\n    <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"seconds\"</span><span class=\"p\">,</span> <span class=\"s2\">\"minutes\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hours\"</span><span class=\"p\">],</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"eg. Set logging intervals\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">device_template</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DeviceTemplate</span><span class=\"p\">(</span>\n    <span class=\"n\">configurations</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">logging_level_configuration</span><span class=\"p\">,</span> <span class=\"n\">logging_level_configuration</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s2\">\"Device\"</span><span class=\"p\">,</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">device_template</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_configuration</span><span class=\"p\">(</span>\n    <span class=\"n\">device_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span>\n    <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">Union</span><span class=\"p\">[</span>\n        <span class=\"nb\">int</span><span class=\"p\">,</span>\n        <span class=\"nb\">float</span><span class=\"p\">,</span>\n        <span class=\"nb\">bool</span><span class=\"p\">,</span>\n        <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span>\n        <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span>\n        <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span>\n        <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span>\n        <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Get current configuration options.</span>\n\n<span class=\"sd\">    Reads device configuration and returns it as a dictionary</span>\n<span class=\"sd\">    with device configuration reference as key,</span>\n<span class=\"sd\">    and device configuration value as value.</span>\n<span class=\"sd\">    Must be implemented as non blocking.</span>\n<span class=\"sd\">    Must be implemented as thread safe.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">device_key</span> <span class=\"o\">==</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle getting configuration values here</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"LL\"</span><span class=\"p\">:</span> <span class=\"n\">get_log_level</span><span class=\"p\">(),</span>\n            <span class=\"s2\">\"LI\"</span><span class=\"p\">:</span> <span class=\"n\">get_log_inteval</span><span class=\"p\">(),</span>\n        <span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_configuration</span><span class=\"p\">(</span>\n    <span class=\"n\">device_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">configuration</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span>\n        <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">Union</span><span class=\"p\">[</span>\n            <span class=\"nb\">int</span><span class=\"p\">,</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"nb\">bool</span><span class=\"p\">,</span>\n            <span class=\"nb\">str</span><span class=\"p\">,</span>\n            <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span>\n            <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span>\n            <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span>\n            <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span>\n            <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span>\n            <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Change device's configuration options.</span>\n\n<span class=\"sd\">    Must be implemented as non blocking.</span>\n<span class=\"sd\">    Must be implemented as thread safe.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">device_key</span> <span class=\"o\">==</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">reference</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Handle setting configuration values here</span>\n            <span class=\"k\">if</span> <span class=\"n\">reference</span> <span class=\"o\">==</span> <span class=\"s2\">\"LL\"</span><span class=\"p\">:</span>\n                <span class=\"n\">set_log_level</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">reference</span> <span class=\"o\">==</span> <span class=\"s2\">\"LI\"</span><span class=\"p\">:</span>\n                <span class=\"n\">set_log_interval</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Pass functions to Wolk instance</span>\n<span class=\"n\">wolk_module</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Wolk</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">1883</span><span class=\"p\">,</span>\n    <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"s2\">\"Python module\"</span><span class=\"p\">,</span>\n    <span class=\"n\">device_status_provider</span><span class=\"o\">=</span><span class=\"n\">get_device_status</span><span class=\"p\">,</span>\n    <span class=\"n\">configuration_provider</span><span class=\"o\">=</span><span class=\"n\">get_configuration</span><span class=\"p\">,</span>\n    <span class=\"n\">configuration_handler</span><span class=\"o\">=</span><span class=\"n\">handle_configuration</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_device</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># This method will call the provided configuration_provider function</span>\n<span class=\"c1\"># and publish the state immediately or store message if unable to publish</span>\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">publish_configuration</span><span class=\"p\">(</span><span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Firmware update</h3>\n<p>In order to enable firmware update for devices, provide an implementation of <code>FirmwareHandler</code> and pass to <code>Wolk</code> instance.</p>\n<pre><span class=\"n\">device_template</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">DeviceTemplate</span><span class=\"p\">(</span><span class=\"n\">supports_firmware_update</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s2\">\"Device\"</span><span class=\"p\">,</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">,</span> <span class=\"n\">device_template</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FirmwareHandlerImplementation</span><span class=\"p\">(</span><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">FirmwareHandler</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Handle firmware installation and abort commands, and report version.</span>\n\n<span class=\"sd\">    Once an object of this class is passed to a Wolk object,</span>\n<span class=\"sd\">    it will set callback methods `on_install_success` and</span>\n<span class=\"sd\">    `on_install_fail` used for reporting the result of</span>\n<span class=\"sd\">    the firmware update process. Use these callbacks in `install_firmware`</span>\n<span class=\"sd\">    and `abort_installation` methods.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">install_firmware</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">device_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">firmware_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Handle the installation of the firmware file.</span>\n\n<span class=\"sd\">        Call `self.on_install_success(device_key)` to report success.</span>\n<span class=\"sd\">        Reporting success will also get new firmware version.</span>\n\n<span class=\"sd\">        If installation fails, call `self.on_install_fail(device_key, status)`</span>\n<span class=\"sd\">        where:</span>\n<span class=\"sd\">        `status = FirmwareUpdateStatus(</span>\n<span class=\"sd\">            FirmwareUpdateState.ERROR,</span>\n<span class=\"sd\">            FirmwareUpdateErrorCode.INSTALLATION_FAILED</span>\n<span class=\"sd\">        )`</span>\n<span class=\"sd\">        or use other values from `FirmwareUpdateErrorCode` if they fit better.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">device_key</span> <span class=\"o\">==</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"Installing firmware: '</span><span class=\"si\">{</span><span class=\"n\">firmware_file_path</span><span class=\"si\">}</span><span class=\"s2\">' \"</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"on device '</span><span class=\"si\">{</span><span class=\"n\">device_key</span><span class=\"si\">}</span><span class=\"s2\">'\"</span>\n            <span class=\"p\">)</span>\n            <span class=\"c1\"># Handle the actual installation here</span>\n            <span class=\"k\">if</span> <span class=\"n\">install_success</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_install_success</span><span class=\"p\">(</span><span class=\"n\">device_key</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">FirmwareUpdateStatus</span><span class=\"p\">(</span>\n                    <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">FirmwareUpdateState</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span>\n                    <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">FirmwareUpdateErrorCode</span><span class=\"o\">.</span><span class=\"n\">INSTALLATION_FAILED</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_install_fail</span><span class=\"p\">(</span><span class=\"n\">device_key</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abort_installation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">device_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Attempt to abort the firmware installation process for device.</span>\n\n<span class=\"sd\">        Call `self.on_install_fail(device_key, status)` to report if</span>\n<span class=\"sd\">        the installation process was able to be aborted with</span>\n<span class=\"sd\">        `status = FirmwareUpdateStatus(FirmwareUpdateState.ABORTED)`</span>\n<span class=\"sd\">        If unable to stop the installation process, no action is required.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">device_key</span> <span class=\"o\">==</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Manage to stop firmware installation</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">FirmwareUpdateStatus</span><span class=\"p\">(</span>\n                <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">FirmwareUpdateState</span><span class=\"o\">.</span><span class=\"n\">ABORTED</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_install_fail</span><span class=\"p\">(</span><span class=\"n\">device_key</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_firmware_version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">device_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Return device's current firmware version.\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">device_key</span> <span class=\"o\">==</span> <span class=\"s2\">\"DEVICE_KEY\"</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle getting the current firmware version here</span>\n            <span class=\"k\">return</span> <span class=\"n\">version</span>\n\n\n<span class=\"n\">wolk_module</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Wolk</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">1883</span><span class=\"p\">,</span>\n    <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"s2\">\"Python module\"</span><span class=\"p\">,</span>\n    <span class=\"n\">device_status_provider</span><span class=\"o\">=</span><span class=\"n\">get_device_status</span><span class=\"p\">,</span>\n    <span class=\"n\">firmware_handler</span><span class=\"o\">=</span><span class=\"n\">FirmwareHandlerImplementation</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">add_device</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n<span class=\"n\">wolk_module</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<h3>Debugging</h3>\n<p>Enable debug logging with:</p>\n<pre><span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">logging_config</span><span class=\"p\">(</span><span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"n\">log_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<h3>Data persistence</h3>\n<p>Data persistence mechanism used <strong>by default</strong> stored messages in-memory.\nIn cases when provided in-memory persistence is suboptimal, it it possible to use custom persistence by implementing <code>OutboundMessageQueue</code> and passing it in the following manner:</p>\n<pre><span class=\"n\">wolk_module</span> <span class=\"o\">=</span> <span class=\"n\">wolk</span><span class=\"o\">.</span><span class=\"n\">Wolk</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">1883</span><span class=\"p\">,</span>\n    <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"s2\">\"Python module\"</span><span class=\"p\">,</span>\n    <span class=\"n\">device_status_provider</span><span class=\"o\">=</span><span class=\"n\">get_device_status</span><span class=\"p\">,</span>\n    <span class=\"n\">outbound_message_queue</span><span class=\"o\">=</span><span class=\"n\">CustomPersistence</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6326470, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7721b6db8e84b91e6576a48af7cac45a", "sha256": "3b360c4eaa03873189a9eeb7d47462b99f8c3ad2b1504d0fcefd92b5c9db0712"}, "downloads": -1, "filename": "wolk_gateway_module-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7721b6db8e84b91e6576a48af7cac45a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 71934, "upload_time": "2019-05-24T12:37:46", "upload_time_iso_8601": "2019-05-24T12:37:46.853421Z", "url": "https://files.pythonhosted.org/packages/58/b1/ea851c2085f0ec932bb6c301f7d6c788bb3f99bb9eed4696ad9ebc23af39/wolk_gateway_module-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b67d7961c50c23e6101b7977d9d8e72f", "sha256": "adea55e518295e291714e3f316929602e2ed2ed28a2e89416768f72f73b39a01"}, "downloads": -1, "filename": "wolk-gateway-module-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b67d7961c50c23e6101b7977d9d8e72f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44736, "upload_time": "2019-05-24T12:37:49", "upload_time_iso_8601": "2019-05-24T12:37:49.554728Z", "url": "https://files.pythonhosted.org/packages/b9/32/6974cef4b6b883c43f12cdedaec3354f9c65e03f8fa620cc1470f5228a7a/wolk-gateway-module-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "12403485206d710c24630d976cfadaad", "sha256": "1c46cc71a6293afb09f66d06967c611115bf2d623681bcccd8323d5936b6a5ee"}, "downloads": -1, "filename": "wolk_gateway_module-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "12403485206d710c24630d976cfadaad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 72109, "upload_time": "2019-05-30T14:25:31", "upload_time_iso_8601": "2019-05-30T14:25:31.613606Z", "url": "https://files.pythonhosted.org/packages/de/6d/269804b5bba14afee6f1d3cb4885afd64adf5a3f8fe93511eacb99bcb47e/wolk_gateway_module-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1718c4f9a60e2fb4579334e5e2dbb785", "sha256": "1f9d14f416775542f9f5e1ca9c822016ac50529f1277380d7fdf6bcbf99d2ea0"}, "downloads": -1, "filename": "wolk-gateway-module-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1718c4f9a60e2fb4579334e5e2dbb785", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45104, "upload_time": "2019-05-30T14:25:33", "upload_time_iso_8601": "2019-05-30T14:25:33.552191Z", "url": "https://files.pythonhosted.org/packages/02/d7/1280ca1741fb215671a4e766acb48cdb6033995a5fcd652cbc84a46f2c59/wolk-gateway-module-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "672f6720d6a8d307e8e27fde89f2f404", "sha256": "b6ef52766ca0476d4b580136d8fb4c723c540ad86596a5936a651f52eb944344"}, "downloads": -1, "filename": "wolk_gateway_module-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "672f6720d6a8d307e8e27fde89f2f404", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 72219, "upload_time": "2019-06-03T11:57:09", "upload_time_iso_8601": "2019-06-03T11:57:09.863492Z", "url": "https://files.pythonhosted.org/packages/e2/0c/159831990f46a79e73323ab2a2eb25a196df0ddedaa85fd7ddeb4f2661f1/wolk_gateway_module-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca2bb72bb31ef5c1ccaa60f6734ab0e2", "sha256": "c59342565c0db381bdc5d9ff27a3488f909bda9b0588c5d065afa533e627a2b8"}, "downloads": -1, "filename": "wolk-gateway-module-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ca2bb72bb31ef5c1ccaa60f6734ab0e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45346, "upload_time": "2019-06-03T11:57:12", "upload_time_iso_8601": "2019-06-03T11:57:12.064684Z", "url": "https://files.pythonhosted.org/packages/1e/4a/5ebb22fb0d8c99301edd506a7e18dd15318179b5783f7a68f4167abbc986/wolk-gateway-module-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "adb9245d90b9a07d039c95576a4e407b", "sha256": "006039ed29975f9202956060870378d93921daaf27b199de7559eb56412f9b00"}, "downloads": -1, "filename": "wolk_gateway_module-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "adb9245d90b9a07d039c95576a4e407b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 72731, "upload_time": "2019-06-04T13:02:25", "upload_time_iso_8601": "2019-06-04T13:02:25.883609Z", "url": "https://files.pythonhosted.org/packages/41/a1/9cb2f5cf082e15298db3ed417ea4861000bc9223753bed5454de233c22c7/wolk_gateway_module-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bfe9614689cbffd5d1bd75a14aba505", "sha256": "08f0a2c1465c6d82ce37dbe578554a57fb6465d2405552e1f46c6923ab6345bc"}, "downloads": -1, "filename": "wolk-gateway-module-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1bfe9614689cbffd5d1bd75a14aba505", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46214, "upload_time": "2019-06-04T13:02:28", "upload_time_iso_8601": "2019-06-04T13:02:28.535959Z", "url": "https://files.pythonhosted.org/packages/b5/38/26573f181189de4f9abddc47d605b71a236204c45335616d53bbd7033820/wolk-gateway-module-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "938614d069cbd216e49a27024ffead7a", "sha256": "2ccc227babc2de6711efe6a6489f0d4509f15776e567004cfe1e4a0814eccfc0"}, "downloads": -1, "filename": "wolk_gateway_module-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "938614d069cbd216e49a27024ffead7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 72725, "upload_time": "2019-07-16T13:54:18", "upload_time_iso_8601": "2019-07-16T13:54:18.247941Z", "url": "https://files.pythonhosted.org/packages/96/23/9ba59eb5d03533342970a1cb487fef16fdb62abb8736063b3d428e0b00d4/wolk_gateway_module-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90b2a17f5a93a3b56dcdab59b5e9e887", "sha256": "35d8a531f0b9d3a896c97f70f9b96057c6b460227fe8cd7eac4e065596ea00c7"}, "downloads": -1, "filename": "wolk-gateway-module-1.0.4.tar.gz", "has_sig": false, "md5_digest": "90b2a17f5a93a3b56dcdab59b5e9e887", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46220, "upload_time": "2019-07-16T13:54:20", "upload_time_iso_8601": "2019-07-16T13:54:20.042441Z", "url": "https://files.pythonhosted.org/packages/9e/90/0111d95acffac1eac7d4e08df73e443f6e177c48013f13bc50059ba032d5/wolk-gateway-module-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "3bbdf74f816bec31b17efc9d7abc7103", "sha256": "be4131d59d3b5e9a2483675a837f25ea6208a1f06465e89d5cdbd6e0a97aefbb"}, "downloads": -1, "filename": "wolk_gateway_module-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3bbdf74f816bec31b17efc9d7abc7103", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 73239, "upload_time": "2019-12-03T15:17:41", "upload_time_iso_8601": "2019-12-03T15:17:41.295347Z", "url": "https://files.pythonhosted.org/packages/8a/c9/9e01f639de01e266029e2e83f14330027333e5355331f847ffaefe02f885/wolk_gateway_module-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2aa1b78d842132368154e258fa3a8d11", "sha256": "d0a1186ff764b828e66857f4bbd7c0fb39ef9caccffcc193aa27f3e759ca1f1f"}, "downloads": -1, "filename": "wolk-gateway-module-1.0.5.tar.gz", "has_sig": false, "md5_digest": "2aa1b78d842132368154e258fa3a8d11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 46562, "upload_time": "2019-12-03T15:17:42", "upload_time_iso_8601": "2019-12-03T15:17:42.972410Z", "url": "https://files.pythonhosted.org/packages/28/fe/f8ec17cda437522de7e1ee8c71492fb488db7573166fe4b8b47903b31910/wolk-gateway-module-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "9fd7d3bb39860a418a0371ae7c5309e1", "sha256": "9459fa0ba2e9e58a04c8c5dd6935f88337fc8aa50c03c13c14127099a35f60e6"}, "downloads": -1, "filename": "wolk_gateway_module-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "9fd7d3bb39860a418a0371ae7c5309e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 73709, "upload_time": "2019-12-18T16:10:52", "upload_time_iso_8601": "2019-12-18T16:10:52.595133Z", "url": "https://files.pythonhosted.org/packages/0f/85/776d91cc1fa84143db6f99ff7f5803804d1f34233a67bded052e22dc7ee3/wolk_gateway_module-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5e1bbe0f9024bab31eab645f740f1e9", "sha256": "9fe9ddd0f271732b5b9279c6c0d27931115ebe23103f050b3cc1002d332bba17"}, "downloads": -1, "filename": "wolk-gateway-module-1.0.6.tar.gz", "has_sig": false, "md5_digest": "d5e1bbe0f9024bab31eab645f740f1e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 47107, "upload_time": "2019-12-18T16:10:54", "upload_time_iso_8601": "2019-12-18T16:10:54.438710Z", "url": "https://files.pythonhosted.org/packages/af/14/86b73b045784f7c6aaf3922e1145a8cc39276d60538a4983c601c7e2856f/wolk-gateway-module-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9fd7d3bb39860a418a0371ae7c5309e1", "sha256": "9459fa0ba2e9e58a04c8c5dd6935f88337fc8aa50c03c13c14127099a35f60e6"}, "downloads": -1, "filename": "wolk_gateway_module-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "9fd7d3bb39860a418a0371ae7c5309e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 73709, "upload_time": "2019-12-18T16:10:52", "upload_time_iso_8601": "2019-12-18T16:10:52.595133Z", "url": "https://files.pythonhosted.org/packages/0f/85/776d91cc1fa84143db6f99ff7f5803804d1f34233a67bded052e22dc7ee3/wolk_gateway_module-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5e1bbe0f9024bab31eab645f740f1e9", "sha256": "9fe9ddd0f271732b5b9279c6c0d27931115ebe23103f050b3cc1002d332bba17"}, "downloads": -1, "filename": "wolk-gateway-module-1.0.6.tar.gz", "has_sig": false, "md5_digest": "d5e1bbe0f9024bab31eab645f740f1e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 47107, "upload_time": "2019-12-18T16:10:54", "upload_time_iso_8601": "2019-12-18T16:10:54.438710Z", "url": "https://files.pythonhosted.org/packages/af/14/86b73b045784f7c6aaf3922e1145a8cc39276d60538a4983c601c7e2856f/wolk-gateway-module-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:14 2020"}