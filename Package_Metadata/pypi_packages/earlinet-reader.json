{"info": {"author": "Ioannis Binietoglou", "author_email": "ioannis@inoe.ro", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Topic :: Scientific/Engineering :: Atmospheric Science"], "description": "EARLINET file reader\n====================\n\nThis package provides utilities to handle processed lidar data in one of EARLINET's NetCDF formats. Currently\nit supports low-temporal-resolution files from EARLINET's Single Calculus Chain pre-processor and files with\naerosol optical properties.\n\nInstallation\n------------\n\nYou can install the package using the ``pip`` command::\n\n   pip install earlinet-reader\n\nYou can also install also directly from the `source code <http://bitbucket.org/iannis_b/earlinet-reader/src>`_. You should extract the code in a folder (e.g. ``earlinet-reader``)\nand then run::\n\n   pip install ./earlinet-reader\n\nCommand line interface for ELPP files\n-------------------------------------\n\nThe main way of using this package, is through the command line interface program called ``plotELPP``.\n\nThe usage of the ``plotELPP`` program is described bellow::\n\n   usage: plotELPP [-h] [--vmin VMIN] [--vmax VMAX] [-v VARIABLE] [--log]\n                   [--normalize] [--normmin NORMMIN] [--normmax NORMMAX] [--grid]\n                   [--dpi DPI] [--errorevery ERROREVERY] [--html] [-d] [-s]\n                   file_patter [rmin] [rmax]\n\n   Command line tool to plot lidar pre-processed files from the SCC's ELPP.\n\n   positional arguments:\n     file_patter           The path to a file (possibly including glob patterns).\n     rmin                  Minimum range to plot (in km)\n     rmax                  Maximum range to plot (in km)\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --vmin VMIN           Minimum variable value to plot\n     --vmax VMAX           Maximum variable value to plot\n     -v VARIABLE, --variable VARIABLE\n                           Name of variable to plot\n     --log                 Plot log10 values of variable.\n     --normalize           Normalize variables on molecular signal\n     --normmin NORMMIN     If nomralize is selected, the minimum altitude for\n                           normalization (in km).\n     --normmax NORMMAX     If nomralize is selected, the maximum altitude for\n                           normalization (in km).\n     --grid                Show grid on the plots\n     --dpi DPI             DPI of the output image\n     --errorevery ERROREVERY\n                           Plot error bar only every x points.\n     --html                Create an HTML report.\n     -d, --debug           Print dubuging information.\n     -s, --silent          Show only warning and error messages.\n\nFor example, let's assume you want to plot the content of the file ``20170216oh00_584.nc``.\n\n* You can plot a single variable in the file using::\n\n   plotELPP 20170216oh00_584.nc --variable elPR\n\n* You can specify the minimum and maxi,um range of the plots e.g. from 0 to 5 km::\n\n   plotELPP 20170216oh00_584.nc 0 5 --variable elPR\n\n* You can tune few plotting parameters: turn the grid on and choose the output dpi::\n\n   plotELPP 20170216oh00_584.nc --variable elPR --grid --dpi 200\n\n* If you omit the variable parameter, you can show all variables in the netCDF file on a single plot::\n\n   plotELPP 20170216oh00_584.nc\n\n* You can see more info about the file by choosing the ``--html`` option::\n\n   plotELPP 20170216oh00_584.nc --html\n\n* You can perform the above operations for multiple files at once using ``*`` and ``?`` as wildcards::\n\n   plotELPP `20170216oh00_*.nc` --html\n\n\nCommand line interface for optical property files\n-------------------------------------------------\nYou can plot files containing aerosol optical properties usign the commnad ``plotoptical``. The usage is similar\nto the ``plotELPP`` program::\n\n   usage: plotoptical [-h] [-v VARIABLE] [--grid] [--dpi DPI]\n                      [--errorevery ERROREVERY] [--html] [-d] [-s]\n                      file_patter [zmin] [zmax]\n\n   Command line tool to plot lidar optical property files.\n\n   positional arguments:\n     file_patter           The path to a file (possibly including glob patterns).\n     zmin                  (optional) Minimum altitude asl to plot (in km)\n     zmax                  (optional) Maximum altitude asl to plot (in km)\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -v VARIABLE, --variable VARIABLE\n                           Name of variable to plot\n     --grid                Show grid on the plots\n     --dpi DPI             DPI of the output image\n     --errorevery ERROREVERY\n                           Plot error bar only every x points.\n     --html                Create an HTML report.\n     -d, --debug           Print dubuging information.\n     -s, --silent          Show only warning and error messages.\n\nConverting calibrated HiRELPP files to GEOMS format\n---------------------------------------------------\nHiRELPP files can converted to GEOMS format, using the appropriate method::\n\n   from earlinet_reader import hirelpp_files\n   h = hirelpp_files.HiRElPPFile(<path_to_hirelpp_file>)\n   h.convert_to_geoms(location, affiliation)\n\nThe `location` and `affiliation` arguments are used to create the correcte GEOMS filename.\nLocation should be a string describing the lidar location e.g. `bucharest`. Affiliation\nshould be the institue acronym, e.g. `inoe`. If omitted, the `affiliation` value will be\ninferred from HiRELPP properties.\n\nReporting bugs\n--------------\nIf want to report a bug, ask for a new feature, or have an idea for an improvement fell free to contribute it through\nthe `bug tracking system <https://bitbucket.org/iannis_b/earlinet-reader/issues>`_.\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/iannis_b/earlinet-reader/", "keywords": "lidar aerosol EARLINET", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "earlinet-reader", "package_url": "https://pypi.org/project/earlinet-reader/", "platform": "", "project_url": "https://pypi.org/project/earlinet-reader/", "project_urls": {"Homepage": "https://bitbucket.org/iannis_b/earlinet-reader/"}, "release_url": "https://pypi.org/project/earlinet-reader/0.3.0/", "requires_dist": ["numpy", "matplotlib", "sphinx", "jinja2", "netCDF4"], "requires_python": "", "summary": "Package to read processed lidar data in the EARLINET NetCDF formats.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides utilities to handle processed lidar data in one of EARLINET\u2019s NetCDF formats. Currently\nit supports low-temporal-resolution files from EARLINET\u2019s Single Calculus Chain pre-processor and files with\naerosol optical properties.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install the package using the <tt>pip</tt> command:</p>\n<pre>pip install earlinet-reader\n</pre>\n<p>You can also install also directly from the <a href=\"http://bitbucket.org/iannis_b/earlinet-reader/src\" rel=\"nofollow\">source code</a>. You should extract the code in a folder (e.g. <tt><span class=\"pre\">earlinet-reader</span></tt>)\nand then run:</p>\n<pre>pip install ./earlinet-reader\n</pre>\n</div>\n<div id=\"command-line-interface-for-elpp-files\">\n<h2>Command line interface for ELPP files</h2>\n<p>The main way of using this package, is through the command line interface program called <tt>plotELPP</tt>.</p>\n<p>The usage of the <tt>plotELPP</tt> program is described bellow:</p>\n<pre>usage: plotELPP [-h] [--vmin VMIN] [--vmax VMAX] [-v VARIABLE] [--log]\n                [--normalize] [--normmin NORMMIN] [--normmax NORMMAX] [--grid]\n                [--dpi DPI] [--errorevery ERROREVERY] [--html] [-d] [-s]\n                file_patter [rmin] [rmax]\n\nCommand line tool to plot lidar pre-processed files from the SCC's ELPP.\n\npositional arguments:\n  file_patter           The path to a file (possibly including glob patterns).\n  rmin                  Minimum range to plot (in km)\n  rmax                  Maximum range to plot (in km)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --vmin VMIN           Minimum variable value to plot\n  --vmax VMAX           Maximum variable value to plot\n  -v VARIABLE, --variable VARIABLE\n                        Name of variable to plot\n  --log                 Plot log10 values of variable.\n  --normalize           Normalize variables on molecular signal\n  --normmin NORMMIN     If nomralize is selected, the minimum altitude for\n                        normalization (in km).\n  --normmax NORMMAX     If nomralize is selected, the maximum altitude for\n                        normalization (in km).\n  --grid                Show grid on the plots\n  --dpi DPI             DPI of the output image\n  --errorevery ERROREVERY\n                        Plot error bar only every x points.\n  --html                Create an HTML report.\n  -d, --debug           Print dubuging information.\n  -s, --silent          Show only warning and error messages.\n</pre>\n<p>For example, let\u2019s assume you want to plot the content of the file <tt>20170216oh00_584.nc</tt>.</p>\n<ul>\n<li><p>You can plot a single variable in the file using:</p>\n<pre>plotELPP 20170216oh00_584.nc --variable elPR\n</pre>\n</li>\n<li><p>You can specify the minimum and maxi,um range of the plots e.g. from 0 to 5 km:</p>\n<pre>plotELPP 20170216oh00_584.nc 0 5 --variable elPR\n</pre>\n</li>\n<li><p>You can tune few plotting parameters: turn the grid on and choose the output dpi:</p>\n<pre>plotELPP 20170216oh00_584.nc --variable elPR --grid --dpi 200\n</pre>\n</li>\n<li><p>If you omit the variable parameter, you can show all variables in the netCDF file on a single plot:</p>\n<pre>plotELPP 20170216oh00_584.nc\n</pre>\n</li>\n<li><p>You can see more info about the file by choosing the <tt><span class=\"pre\">--html</span></tt> option:</p>\n<pre>plotELPP 20170216oh00_584.nc --html\n</pre>\n</li>\n<li><p>You can perform the above operations for multiple files at once using <tt>*</tt> and <tt>?</tt> as wildcards:</p>\n<pre>plotELPP `20170216oh00_*.nc` --html\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"command-line-interface-for-optical-property-files\">\n<h2>Command line interface for optical property files</h2>\n<p>You can plot files containing aerosol optical properties usign the commnad <tt>plotoptical</tt>. The usage is similar\nto the <tt>plotELPP</tt> program:</p>\n<pre>usage: plotoptical [-h] [-v VARIABLE] [--grid] [--dpi DPI]\n                   [--errorevery ERROREVERY] [--html] [-d] [-s]\n                   file_patter [zmin] [zmax]\n\nCommand line tool to plot lidar optical property files.\n\npositional arguments:\n  file_patter           The path to a file (possibly including glob patterns).\n  zmin                  (optional) Minimum altitude asl to plot (in km)\n  zmax                  (optional) Maximum altitude asl to plot (in km)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v VARIABLE, --variable VARIABLE\n                        Name of variable to plot\n  --grid                Show grid on the plots\n  --dpi DPI             DPI of the output image\n  --errorevery ERROREVERY\n                        Plot error bar only every x points.\n  --html                Create an HTML report.\n  -d, --debug           Print dubuging information.\n  -s, --silent          Show only warning and error messages.\n</pre>\n</div>\n<div id=\"converting-calibrated-hirelpp-files-to-geoms-format\">\n<h2>Converting calibrated HiRELPP files to GEOMS format</h2>\n<p>HiRELPP files can converted to GEOMS format, using the appropriate method:</p>\n<pre>from earlinet_reader import hirelpp_files\nh = hirelpp_files.HiRElPPFile(&lt;path_to_hirelpp_file&gt;)\nh.convert_to_geoms(location, affiliation)\n</pre>\n<p>The <cite>location</cite> and <cite>affiliation</cite> arguments are used to create the correcte GEOMS filename.\nLocation should be a string describing the lidar location e.g. <cite>bucharest</cite>. Affiliation\nshould be the institue acronym, e.g. <cite>inoe</cite>. If omitted, the <cite>affiliation</cite> value will be\ninferred from HiRELPP properties.</p>\n</div>\n<div id=\"reporting-bugs\">\n<h2>Reporting bugs</h2>\n<p>If want to report a bug, ask for a new feature, or have an idea for an improvement fell free to contribute it through\nthe <a href=\"https://bitbucket.org/iannis_b/earlinet-reader/issues\" rel=\"nofollow\">bug tracking system</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 7097496, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "c1231c85b320ef4d4b2d993fbc0d4452", "sha256": "95df6d85aa68cb2e3af842f5b119f8ee482f38acdccc3da5343357674efb191c"}, "downloads": -1, "filename": "earlinet_reader-0.1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "c1231c85b320ef4d4b2d993fbc0d4452", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17418, "upload_time": "2017-02-20T15:51:32", "upload_time_iso_8601": "2017-02-20T15:51:32.302929Z", "url": "https://files.pythonhosted.org/packages/c4/0a/719f866186c31e97e55cfc5e8de60f608e52c32f4b051b9aa40bc1db66b2/earlinet_reader-0.1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c22ea59f9764281b8de9a39bd65a6277", "sha256": "ac3c6531b57e4caecf35c019ce9639959a41489a9763982ab1fdb9ba26cb494c"}, "downloads": -1, "filename": "earlinet-reader-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c22ea59f9764281b8de9a39bd65a6277", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13085, "upload_time": "2017-02-20T15:51:34", "upload_time_iso_8601": "2017-02-20T15:51:34.240132Z", "url": "https://files.pythonhosted.org/packages/d1/b5/769ffeca0b3117406aad03db12fe12d6eea6d09e9bdb3fed62be33422432/earlinet-reader-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "5cf26e0a6595ec80cb9274900b9a3434", "sha256": "b63e96a1ba02099368b4632a6d69c36c9b9cfa87286a0cfac9df8b3830b3303c"}, "downloads": -1, "filename": "earlinet_reader-0.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "5cf26e0a6595ec80cb9274900b9a3434", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17491, "upload_time": "2017-02-20T15:57:49", "upload_time_iso_8601": "2017-02-20T15:57:49.665345Z", "url": "https://files.pythonhosted.org/packages/b3/93/78439cc408e9f1b15d90095b0aa1e925f9b06f46f0be1be8ab062bc57f39/earlinet_reader-0.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55eac8a71585c048dc115347be860d01", "sha256": "9715a46330fc72114f75e171986dc8a7b831f2964a9e2ac4f97bd2f1278121c2"}, "downloads": -1, "filename": "earlinet-reader-0.1.3.tar.gz", "has_sig": false, "md5_digest": "55eac8a71585c048dc115347be860d01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13127, "upload_time": "2017-02-20T15:57:51", "upload_time_iso_8601": "2017-02-20T15:57:51.807786Z", "url": "https://files.pythonhosted.org/packages/0c/49/1ca7421d50fb9e3523657924e26e71ae6aba1b9d31eb8dddfa430e367547/earlinet-reader-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7a64154fb4a9ca97509cf01aa723e8e0", "sha256": "49490387d6d7f345d9345d480bd139bded3731c5406de0c472cef33b9fbcc464"}, "downloads": -1, "filename": "earlinet_reader-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "7a64154fb4a9ca97509cf01aa723e8e0", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 26940, "upload_time": "2017-02-21T14:43:11", "upload_time_iso_8601": "2017-02-21T14:43:11.438825Z", "url": "https://files.pythonhosted.org/packages/7f/62/d90ff25f715504f7801e7922f13ac4e0e96f6b6f72a97018864890b6afca/earlinet_reader-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f1b2e9f0e2cb9bf4690d2ddcb6cd2f8", "sha256": "4dd910478cbb8eb9696c0e0b5d3ceef28fb92977f21708ac468abf3e3f53b479"}, "downloads": -1, "filename": "earlinet-reader-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8f1b2e9f0e2cb9bf4690d2ddcb6cd2f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18178, "upload_time": "2017-02-21T14:43:13", "upload_time_iso_8601": "2017-02-21T14:43:13.769077Z", "url": "https://files.pythonhosted.org/packages/27/cd/39d085f102025484c8e96d516f21c5e6f6e8ea5a76ab3855e0ca3b14997a/earlinet-reader-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "12dc6423a45f447c601770272a11fdcb", "sha256": "c0f4df5b629d0f8b17feec67d02ce813fc634e982e38ff455b67ecb479fa9c5a"}, "downloads": -1, "filename": "earlinet_reader-0.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "12dc6423a45f447c601770272a11fdcb", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 27273, "upload_time": "2017-02-22T13:33:31", "upload_time_iso_8601": "2017-02-22T13:33:31.240397Z", "url": "https://files.pythonhosted.org/packages/54/34/4451e42f0b7af1034899e3f16e640d9bf3a859952f13d30b825810e97f55/earlinet_reader-0.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b5ce0e4e4bb06b726f0c3a962224835", "sha256": "7f6688e3bee1006d49582566529140bcf525953240da7541a98eee65e0083c0b"}, "downloads": -1, "filename": "earlinet-reader-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3b5ce0e4e4bb06b726f0c3a962224835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18445, "upload_time": "2017-02-22T13:33:33", "upload_time_iso_8601": "2017-02-22T13:33:33.472127Z", "url": "https://files.pythonhosted.org/packages/65/a7/71a355ba18f9c292b5cecc0ccbe4e4fa9c373a6aaed31928dfa963c0461c/earlinet-reader-0.2.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "5e03f68a8f522333200f8627d226576d", "sha256": "aab7ab83f2aea8a67af6180eee585e574361834b76ae8e86b23034b09eb231e9"}, "downloads": -1, "filename": "earlinet_reader-0.2.3-py2-none-any.whl", "has_sig": false, "md5_digest": "5e03f68a8f522333200f8627d226576d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 28091, "upload_time": "2017-02-24T09:07:46", "upload_time_iso_8601": "2017-02-24T09:07:46.105211Z", "url": "https://files.pythonhosted.org/packages/59/e7/63e6d2c7530fb3fe3273ed3a75ce694848968c07730041310b76c6bd07e0/earlinet_reader-0.2.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8492762ab0730a706386cc060054e417", "sha256": "50c2cb8580b445296192afdd57f1b30c4e9c8ad1632608f71f9a0002f5100a36"}, "downloads": -1, "filename": "earlinet-reader-0.2.3.tar.gz", "has_sig": false, "md5_digest": "8492762ab0730a706386cc060054e417", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19102, "upload_time": "2017-02-24T09:07:48", "upload_time_iso_8601": "2017-02-24T09:07:48.436585Z", "url": "https://files.pythonhosted.org/packages/f7/9d/493801b4cc491dd5ce27cf8f6661260faf7089a1cb82189ff2b716609a34/earlinet-reader-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "5b2759a545cc0d8596e80e1623dfbcdd", "sha256": "c0480b7d6dbfc33f0e9e7f8a5d3834e1b1f01cf18ffc4ee770f3e69688885388"}, "downloads": -1, "filename": "earlinet_reader-0.2.4-py2-none-any.whl", "has_sig": false, "md5_digest": "5b2759a545cc0d8596e80e1623dfbcdd", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 28193, "upload_time": "2017-02-27T21:51:31", "upload_time_iso_8601": "2017-02-27T21:51:31.775621Z", "url": "https://files.pythonhosted.org/packages/37/b6/5a6e6d401e5289cd5766be20d4db484f68f4599792f51d1c2c153450c51b/earlinet_reader-0.2.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83736f4f0d55a86448dc5f92ade19c7d", "sha256": "b77941eaf160882ec765c5ea32a94072b1cf5b3a15ee8402cc912e18bc86ce78"}, "downloads": -1, "filename": "earlinet-reader-0.2.4.tar.gz", "has_sig": false, "md5_digest": "83736f4f0d55a86448dc5f92ade19c7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20888, "upload_time": "2017-02-27T21:51:33", "upload_time_iso_8601": "2017-02-27T21:51:33.590191Z", "url": "https://files.pythonhosted.org/packages/3b/ac/a77d49fafae4ce71232df4e92f8a9cd50890732d356a7fc8732f4b45d2aa/earlinet-reader-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "db1524ebf372cbb883113e229fca8cdd", "sha256": "b6abe8e5dfd42518c72315097b9df4629f639fdbdc2a980e3521da1c8a30d59d"}, "downloads": -1, "filename": "earlinet_reader-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db1524ebf372cbb883113e229fca8cdd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43220, "upload_time": "2020-04-25T02:49:46", "upload_time_iso_8601": "2020-04-25T02:49:46.573017Z", "url": "https://files.pythonhosted.org/packages/90/33/ad67f9eb0b25ff8b5cc3f14ad7145677d1cae9f7635164f7f9178256a0e9/earlinet_reader-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48903edec7fe099fa9a43a09129ea0f9", "sha256": "a126c9b429ab3d715bae8a642cc807078c5d9050be89ab3d0a73921182d9eada"}, "downloads": -1, "filename": "earlinet-reader-0.3.0.tar.gz", "has_sig": false, "md5_digest": "48903edec7fe099fa9a43a09129ea0f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35904, "upload_time": "2020-04-25T02:49:48", "upload_time_iso_8601": "2020-04-25T02:49:48.055941Z", "url": "https://files.pythonhosted.org/packages/f1/d2/e15e82c31371bd6a4ba203120900cbc862c2237ad4be1a1a1c7a51221d0d/earlinet-reader-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db1524ebf372cbb883113e229fca8cdd", "sha256": "b6abe8e5dfd42518c72315097b9df4629f639fdbdc2a980e3521da1c8a30d59d"}, "downloads": -1, "filename": "earlinet_reader-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db1524ebf372cbb883113e229fca8cdd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43220, "upload_time": "2020-04-25T02:49:46", "upload_time_iso_8601": "2020-04-25T02:49:46.573017Z", "url": "https://files.pythonhosted.org/packages/90/33/ad67f9eb0b25ff8b5cc3f14ad7145677d1cae9f7635164f7f9178256a0e9/earlinet_reader-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48903edec7fe099fa9a43a09129ea0f9", "sha256": "a126c9b429ab3d715bae8a642cc807078c5d9050be89ab3d0a73921182d9eada"}, "downloads": -1, "filename": "earlinet-reader-0.3.0.tar.gz", "has_sig": false, "md5_digest": "48903edec7fe099fa9a43a09129ea0f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35904, "upload_time": "2020-04-25T02:49:48", "upload_time_iso_8601": "2020-04-25T02:49:48.055941Z", "url": "https://files.pythonhosted.org/packages/f1/d2/e15e82c31371bd6a4ba203120900cbc862c2237ad4be1a1a1c7a51221d0d/earlinet-reader-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:32 2020"}