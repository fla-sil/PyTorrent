{"info": {"author": "Brijesh", "author_email": "brijesh.krishnank@philips.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.com/philips-software/TextSimilarityProcessor.svg?branch=master)](https://travis-ci.com/philips-software/TextSimilarityProcessor)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![codecov](https://codecov.io/gh/philips-software/TextSimilarityProcessor/branch/master/graph/badge.svg)](https://codecov.io/gh/philips-software/TextSimilarityProcessor)\n\n\nText Similarity Index processor\n====================\nWhat is the project intented to solve?\n--------\nResolving the Technical Debt in \"Test/Requirement/Issues/Any-text\" repos with unique id using Natural Language Processing Continuous \nduplicate monitoring system in place to check the duplication of any new text added to \"Test/Requirement/Issues/Any-text\" bank. \nGrouping of similar \"Test/Requirement/Issues/Any-text\" helps in reduction of \"Test/Requirement/Issues/Any-text\" yet quality quotient remain same.  \nCycle time of test execution comes down as similar tests are identified for merging. \nRepeated requirement can be reduced Issues list can be merged/reduced\n\n\nTechnology stack \n--------\nPython with few python packages\n\nDependencies\n--------\nPython 3.7.3\n\n[packages]\n\npip,\nmutmut,\npytest,\nxlrd,\nxlsxwriter,\npandas,\ncodecov,\npytest-cov,\npylint\n\nInstallation\n====================\n\n`pip install similarity-processor`\n\nUsage & Configuration\n====================\n1.How to use the tool from the source code:\n--------\n\nFrom any editor which support Python (pref: pycharm, set similarity_processor and text-de-duplication_monitoring as\n root by\nright clicking and selecting option)\n\nMake sure to set the right python interpreter and make sure it lists all the packages mentioned as mandate.\n\nOption 1: UI\n--------\nExecute the `similarity_ui.py`, which will open the UI window where you need to enter the options like,\n\n1. Path to the test/requirement/other other document to be analyzed.\n2. Unique ID in the csv/xlsx column ID(0/1 etc...)\n3. Steps/Description id for content matching (column of interest IDs in the csv/xlsx seperated by , like 1,2,3)\n4. If new requirement / test to me checked with existing, enable the check box and paste the content to be checked in\nthe new text box.\n\nOption 2: commandline\n--------\n```\n$ python similarity_processor\\similarity_cmd.py --h\nusage: similarity_cmd.py [-h] [--path --p]  [--uniqid --u]\n                     [--colint --c]\n\nText Similarity Index Processor\n\noptional arguments:\n  -h, --help      show this help message and exit\n  --path --p      the Input file path\n  --uniqid --u    uniq id index(column) of the input file\n  --colint --c    the col of interest\n``` \n\n\n2.How to use the tool after `pip install similarity-processor`\n-----------------------------------------------------------\n\nOption 1: To use only the similarity for simple texts with out writing result to xlsx\n------------------------------------\n```\n>>> from similarity_processor import similarity_core\n\n>>> x = similarity_core.text_to_vector(\"this is a sample test\")\n>>> y = similarity_core.text_to_vector(\"this is a sample\")\n>>> w = similarity_core.get_cosine(x,y)\n>>> print(w)\n0.8944271909999159\n```\nOption 2: Generate similarity for a group of text like \"Test cases, requirement etc... which is present in xlsx\n----------------------------------------------------------------\n\n```\n>>> from similarity_processor.similarity_io import SimilarityIO\n\n>>> similarity_io_obj = SimilarityIO(\"TestBank.xlsx\", 0, \"1,2,3\", 0, None)\n>>> similarity_io_obj.orchestrate_similarity()\n```\nArguments:Path to the input file, Unique id value column id in xlsx, Interested columns in xlsx, Are you checking a\n new text against a existing text bank ?, If yes: new text\n\nOutput will be available in same folder as input file\n\nfiles are,\n1. If any duplicate ids in the unique id\n2. A recommendation file with similarity values\n3. A merged file with data in the \"interested columns in xlsx\"\n\nOption 3: Generate similarity for a group of text like \"Test cases, requirement etc... which is present in xlsx through commandline\n-------------------------------------------------------------\n```\n>python -m similarity_processor.similarity_cmd --h\n>python -m similarity_processor.similarity_cmd --p \"TestBank.xlsx\" --u 0 --c \"1,2,3\"\n```\n\nOption 4: Generate similarity for a group of text\nlike \"Test cases, requirement etc... which is present in xlsx\nthrough UI\n-------------------------------------------------------------\n```\n>python -m similarity_processor.similarity_ui\n```\n1. Path to the test/requirement/other other document to be analyzed.\n2. Unique ID in the csv/xlsx column ID(0/1 etc...)\n3. Steps/Description id for content matching (column of interest IDs in the csv/xlsx seperated by , like 1,2,3)\n4. If new requirement / test to me checked with existing, enable the check box and paste the content to be checked in\nthe new text box.\n\nHow to test the software\n====================\n1. To test the tool use : navigate to \"text_de_duplication_monitoring\" which is the root directory\n2. issue `pytest -v` to run all the tests\n\n- To report the pytest in html:\nissue command `pytest --html=report.html`\n\n- To run test for coverage:\n`pytest --cov-report html --cov=\"similarity_processor\"`\n\n- pydoc creation \n`python -m pydoc -w module_name`\n\n- mutation testing using mutmut\n`mutmut --paths-to-mutate \"path_to \\ similarity_processor\" run`\n\n- pylint execution on code\n`pylint similarity_processor test >\"path_to_save_file\\pylint.txt\"`\n\n- jscpd execution on root folder\n`jscpd --min-tokens 20 --reporters \"html\" --mode \"strict\" --format \"python\" --output . .`\n\nLimitations\n--------\n1. Input is accepted only via xlsx\n2. Stand alone application not web enabled\n3. Users have to fetch the input to csv/xlsx\n4. Tool is not yet plugged to TFS, ALM etc\n\n\nImprovements/ Road-map\n--------\n1. Increase the test efficiency based on mutation testing output.\n2. Make the tool web enabled (using python flask...).\n3. Create hook to TFS, ALM etc so that this tool we can download the test/ requirement/ defects\nand do further processing.\n4. Enable the tool to do similarity check on code base.\n\n\nContact / Getting help\n====================\n```\nBrijesh Krishnan <brijesh.krishnank@philips.com>\nDattatreya Vellal <dsvellal@philips.com>\n```\n\nLicense\n====================\n\n```\nThe MIT License (MIT) Copyright \u00c2\u00a9 [2019] Koninklijke Philips N.V, https://www.philips.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bkk003/text_de_duplication_monitoring", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "similarity-processor", "package_url": "https://pypi.org/project/similarity-processor/", "platform": "", "project_url": "https://pypi.org/project/similarity-processor/", "project_urls": {"Homepage": "https://github.com/bkk003/text_de_duplication_monitoring"}, "release_url": "https://pypi.org/project/similarity-processor/0.0.3/", "requires_dist": ["mutmut (==1.5.1)", "pytest (==5.0.0)", "xlrd (==1.2.0)", "xlsxwriter (==1.2.1)", "pandas (==0.24.2)", "codecov (==2.0.15)", "pytest-cov (==2.7.1)", "pylint (==2.3.1)"], "requires_python": ">=3.6", "summary": "Text Similarity Index Processor", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/philips-software/TextSimilarityProcessor\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c23cc493fef8dee1aa87377c986bd453211ab613/68747470733a2f2f7472617669732d63692e636f6d2f7068696c6970732d736f6674776172652f5465787453696d696c617269747950726f636573736f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://codecov.io/gh/philips-software/TextSimilarityProcessor\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60cd7bed397afefbd6f6827dca8498258466d823/68747470733a2f2f636f6465636f762e696f2f67682f7068696c6970732d736f6674776172652f5465787453696d696c617269747950726f636573736f722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>Text Similarity Index processor</h1>\n<h2>What is the project intented to solve?</h2>\n<p>Resolving the Technical Debt in \"Test/Requirement/Issues/Any-text\" repos with unique id using Natural Language Processing Continuous\nduplicate monitoring system in place to check the duplication of any new text added to \"Test/Requirement/Issues/Any-text\" bank.\nGrouping of similar \"Test/Requirement/Issues/Any-text\" helps in reduction of \"Test/Requirement/Issues/Any-text\" yet quality quotient remain same.<br>\nCycle time of test execution comes down as similar tests are identified for merging.\nRepeated requirement can be reduced Issues list can be merged/reduced</p>\n<h2>Technology stack</h2>\n<p>Python with few python packages</p>\n<h2>Dependencies</h2>\n<p>Python 3.7.3</p>\n<p>[packages]</p>\n<p>pip,\nmutmut,\npytest,\nxlrd,\nxlsxwriter,\npandas,\ncodecov,\npytest-cov,\npylint</p>\n<h1>Installation</h1>\n<p><code>pip install similarity-processor</code></p>\n<h1>Usage &amp; Configuration</h1>\n<h2>1.How to use the tool from the source code:</h2>\n<p>From any editor which support Python (pref: pycharm, set similarity_processor and text-de-duplication_monitoring as\nroot by\nright clicking and selecting option)</p>\n<p>Make sure to set the right python interpreter and make sure it lists all the packages mentioned as mandate.</p>\n<h2>Option 1: UI</h2>\n<p>Execute the <code>similarity_ui.py</code>, which will open the UI window where you need to enter the options like,</p>\n<ol>\n<li>Path to the test/requirement/other other document to be analyzed.</li>\n<li>Unique ID in the csv/xlsx column ID(0/1 etc...)</li>\n<li>Steps/Description id for content matching (column of interest IDs in the csv/xlsx seperated by , like 1,2,3)</li>\n<li>If new requirement / test to me checked with existing, enable the check box and paste the content to be checked in\nthe new text box.</li>\n</ol>\n<h2>Option 2: commandline</h2>\n<pre><code>$ python similarity_processor\\similarity_cmd.py --h\nusage: similarity_cmd.py [-h] [--path --p]  [--uniqid --u]\n                     [--colint --c]\n\nText Similarity Index Processor\n\noptional arguments:\n  -h, --help      show this help message and exit\n  --path --p      the Input file path\n  --uniqid --u    uniq id index(column) of the input file\n  --colint --c    the col of interest\n</code></pre>\n<h2>2.How to use the tool after <code>pip install similarity-processor</code></h2>\n<h2>Option 1: To use only the similarity for simple texts with out writing result to xlsx</h2>\n<pre><code>&gt;&gt;&gt; from similarity_processor import similarity_core\n\n&gt;&gt;&gt; x = similarity_core.text_to_vector(\"this is a sample test\")\n&gt;&gt;&gt; y = similarity_core.text_to_vector(\"this is a sample\")\n&gt;&gt;&gt; w = similarity_core.get_cosine(x,y)\n&gt;&gt;&gt; print(w)\n0.8944271909999159\n</code></pre>\n<h2>Option 2: Generate similarity for a group of text like \"Test cases, requirement etc... which is present in xlsx</h2>\n<pre><code>&gt;&gt;&gt; from similarity_processor.similarity_io import SimilarityIO\n\n&gt;&gt;&gt; similarity_io_obj = SimilarityIO(\"TestBank.xlsx\", 0, \"1,2,3\", 0, None)\n&gt;&gt;&gt; similarity_io_obj.orchestrate_similarity()\n</code></pre>\n<p>Arguments:Path to the input file, Unique id value column id in xlsx, Interested columns in xlsx, Are you checking a\nnew text against a existing text bank ?, If yes: new text</p>\n<p>Output will be available in same folder as input file</p>\n<p>files are,</p>\n<ol>\n<li>If any duplicate ids in the unique id</li>\n<li>A recommendation file with similarity values</li>\n<li>A merged file with data in the \"interested columns in xlsx\"</li>\n</ol>\n<h2>Option 3: Generate similarity for a group of text like \"Test cases, requirement etc... which is present in xlsx through commandline</h2>\n<pre><code>&gt;python -m similarity_processor.similarity_cmd --h\n&gt;python -m similarity_processor.similarity_cmd --p \"TestBank.xlsx\" --u 0 --c \"1,2,3\"\n</code></pre>\n<h2>Option 4: Generate similarity for a group of text\nlike \"Test cases, requirement etc... which is present in xlsx\nthrough UI</h2>\n<pre><code>&gt;python -m similarity_processor.similarity_ui\n</code></pre>\n<ol>\n<li>Path to the test/requirement/other other document to be analyzed.</li>\n<li>Unique ID in the csv/xlsx column ID(0/1 etc...)</li>\n<li>Steps/Description id for content matching (column of interest IDs in the csv/xlsx seperated by , like 1,2,3)</li>\n<li>If new requirement / test to me checked with existing, enable the check box and paste the content to be checked in\nthe new text box.</li>\n</ol>\n<h1>How to test the software</h1>\n<ol>\n<li>To test the tool use : navigate to \"text_de_duplication_monitoring\" which is the root directory</li>\n<li>issue <code>pytest -v</code> to run all the tests</li>\n</ol>\n<ul>\n<li>\n<p>To report the pytest in html:\nissue command <code>pytest --html=report.html</code></p>\n</li>\n<li>\n<p>To run test for coverage:\n<code>pytest --cov-report html --cov=\"similarity_processor\"</code></p>\n</li>\n<li>\n<p>pydoc creation\n<code>python -m pydoc -w module_name</code></p>\n</li>\n<li>\n<p>mutation testing using mutmut\n<code>mutmut --paths-to-mutate \"path_to \\ similarity_processor\" run</code></p>\n</li>\n<li>\n<p>pylint execution on code\n<code>pylint similarity_processor test &gt;\"path_to_save_file\\pylint.txt\"</code></p>\n</li>\n<li>\n<p>jscpd execution on root folder\n<code>jscpd --min-tokens 20 --reporters \"html\" --mode \"strict\" --format \"python\" --output . .</code></p>\n</li>\n</ul>\n<h2>Limitations</h2>\n<ol>\n<li>Input is accepted only via xlsx</li>\n<li>Stand alone application not web enabled</li>\n<li>Users have to fetch the input to csv/xlsx</li>\n<li>Tool is not yet plugged to TFS, ALM etc</li>\n</ol>\n<h2>Improvements/ Road-map</h2>\n<ol>\n<li>Increase the test efficiency based on mutation testing output.</li>\n<li>Make the tool web enabled (using python flask...).</li>\n<li>Create hook to TFS, ALM etc so that this tool we can download the test/ requirement/ defects\nand do further processing.</li>\n<li>Enable the tool to do similarity check on code base.</li>\n</ol>\n<h1>Contact / Getting help</h1>\n<pre><code>Brijesh Krishnan &lt;brijesh.krishnank@philips.com&gt;\nDattatreya Vellal &lt;dsvellal@philips.com&gt;\n</code></pre>\n<h1>License</h1>\n<pre><code>The MIT License (MIT) Copyright \u00c2\u00a9 [2019] Koninklijke Philips N.V, https://www.philips.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>\n\n          </div>"}, "last_serial": 7075930, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2ae9116ab56be8d3694dabc76af408ad", "sha256": "2e7502aa312f981fdaa54a10484404d03997f1040da6edf3f68dc7624dfaaae8"}, "downloads": -1, "filename": "similarity_processor-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2ae9116ab56be8d3694dabc76af408ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10866, "upload_time": "2020-02-04T05:01:01", "upload_time_iso_8601": "2020-02-04T05:01:01.865882Z", "url": "https://files.pythonhosted.org/packages/34/8a/c87f73b136f117e2939e8dd6737435e92de067079e6b49d55e8b1df7c0b0/similarity_processor-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f19e1f994d99ee1a1f1c0a40a4549015", "sha256": "2b0abaf0339f852393f2ad78c6db7949d2f4bc312e1b0352f64a1b43fe3777a4"}, "downloads": -1, "filename": "similarity_processor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f19e1f994d99ee1a1f1c0a40a4549015", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8940, "upload_time": "2020-02-04T05:01:04", "upload_time_iso_8601": "2020-02-04T05:01:04.705107Z", "url": "https://files.pythonhosted.org/packages/73/b0/4ac24aee4690d6432ca35cf14e057c8b075de2d317111a9ea77e72cf9bec/similarity_processor-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "8b8a5b0adffbf80f53881c0e590b69f3", "sha256": "c07bf07b7069f6a23e9ab66799879ee9f9b6e137727e625d7e42ecb1af6addcf"}, "downloads": -1, "filename": "similarity_processor-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8b8a5b0adffbf80f53881c0e590b69f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11559, "upload_time": "2020-03-05T08:22:55", "upload_time_iso_8601": "2020-03-05T08:22:55.862840Z", "url": "https://files.pythonhosted.org/packages/41/c3/be85969c67770a0db7722e7e14c28a862086355480c8f4e578a48186ec24/similarity_processor-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5be76870bd69a2fb07b5607673984d17", "sha256": "d21f9c435e651f5b39980d5a11ff37534ef210f071213426b33b346b64274a12"}, "downloads": -1, "filename": "similarity_processor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5be76870bd69a2fb07b5607673984d17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11908, "upload_time": "2020-03-05T08:22:57", "upload_time_iso_8601": "2020-03-05T08:22:57.480548Z", "url": "https://files.pythonhosted.org/packages/a4/76/9ff44d6b0a62d210f783283305f018a7f87e802900ce33535804e83faf8b/similarity_processor-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8b8a5b0adffbf80f53881c0e590b69f3", "sha256": "c07bf07b7069f6a23e9ab66799879ee9f9b6e137727e625d7e42ecb1af6addcf"}, "downloads": -1, "filename": "similarity_processor-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8b8a5b0adffbf80f53881c0e590b69f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11559, "upload_time": "2020-03-05T08:22:55", "upload_time_iso_8601": "2020-03-05T08:22:55.862840Z", "url": "https://files.pythonhosted.org/packages/41/c3/be85969c67770a0db7722e7e14c28a862086355480c8f4e578a48186ec24/similarity_processor-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5be76870bd69a2fb07b5607673984d17", "sha256": "d21f9c435e651f5b39980d5a11ff37534ef210f071213426b33b346b64274a12"}, "downloads": -1, "filename": "similarity_processor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5be76870bd69a2fb07b5607673984d17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11908, "upload_time": "2020-03-05T08:22:57", "upload_time_iso_8601": "2020-03-05T08:22:57.480548Z", "url": "https://files.pythonhosted.org/packages/a4/76/9ff44d6b0a62d210f783283305f018a7f87e802900ce33535804e83faf8b/similarity_processor-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:12 2020"}