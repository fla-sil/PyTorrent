{"info": {"author": "Peter Demin", "author_email": "peterdemin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "GitDiaryBot\n===========\n\nTelegram bot, that writes incoming messages to a text file and synchronizes using Git repository.\nIn addition to plain text input it also understands locations, voice recordings and photos.\n\nThe bot is meant to be self-hosted.\n`Demo bot <https://t.me/GitDiaryBot>`_ is running in multi-user mode and can be used for trial.\n\nDecisions and Trade-offs\n------------------------\n\nProblem\n~~~~~~~\n\nI want to keep a private journal/diary. I post there what's important for me at the moment.\nSometimes I reorganize the content, edit old records. I don't want to share any part of it.\n\nRequirements\n~~~~~~~~~~~~\n\nGitDiaryBot has to be:\n\n1. Private - no third party should be able to the diary, or control it.\n2. Simple - no special software should be needed to read/write the records.\n3. Reliable - network/hard drive failures should not result in lost or unsaved records.\n4. Independent - supports self-hosted server side, private repositories.\n\nChoices\n~~~~~~~\n\nGitDiaryBot is designed from three assumptions:\n\n1. Diary is a single plain text file, that grows by appending records.\n2. Git is used for synchronization and backup.\n3. New records come from messages to a chat bot.\n\nWhile each part can be replaced, the primary goal is to have this combination working.\n\n\nOOP Architecture\n----------------\n\nDispatcher is reacting to Telegram.Bot updates by delegating to 2 classes:\n\n1. Installer\n2. Receiver\n\nReceiver attempts to load tenant using effective user ID from incoming update.\nIf tenant does not exists, Dispatcher calls Installer to run installation flow.\n\nFor successfully loaded Tenant, Dispatcher calls Receiver which extracts GitDiaryBot Events from\nTelegram Update Message and invokes appropriate handler.\n\nHandlers processes Events using Core classes.\n\nCore classes' responsibilities are:\n\n* Save journaling records.\n* Synchronize with upstream.\n* Transcribe voice.\n* Geocode coordinates.\n* Annotate photos.\n\nCore classes are not allowed to import anything outside core directory.\n\nTransformers use core classes to extract plain text records from other media.\n\nSkill combines telegram filter, extractor, event type and handler.\nSkillset defines capabilities available to a Tenant.\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/peterdemin/GitDiaryBot", "keywords": "git diary bot", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "GitDiaryBot", "package_url": "https://pypi.org/project/GitDiaryBot/", "platform": "", "project_url": "https://pypi.org/project/GitDiaryBot/", "project_urls": {"Homepage": "https://github.com/peterdemin/GitDiaryBot"}, "release_url": "https://pypi.org/project/GitDiaryBot/0.0.1/", "requires_dist": ["GitPython", "python-telegram-bot", "tzlocal", "attrs", "requests"], "requires_python": "", "summary": "Diary bot using git repo as a primary storage", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Telegram bot, that writes incoming messages to a text file and synchronizes using Git repository.\nIn addition to plain text input it also understands locations, voice recordings and photos.</p>\n<p>The bot is meant to be self-hosted.\n<a href=\"https://t.me/GitDiaryBot\" rel=\"nofollow\">Demo bot</a> is running in multi-user mode and can be used for trial.</p>\n<div id=\"decisions-and-trade-offs\">\n<h2>Decisions and Trade-offs</h2>\n<div id=\"problem\">\n<h3>Problem</h3>\n<p>I want to keep a private journal/diary. I post there what\u2019s important for me at the moment.\nSometimes I reorganize the content, edit old records. I don\u2019t want to share any part of it.</p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>GitDiaryBot has to be:</p>\n<ol>\n<li>Private - no third party should be able to the diary, or control it.</li>\n<li>Simple - no special software should be needed to read/write the records.</li>\n<li>Reliable - network/hard drive failures should not result in lost or unsaved records.</li>\n<li>Independent - supports self-hosted server side, private repositories.</li>\n</ol>\n</div>\n<div id=\"choices\">\n<h3>Choices</h3>\n<p>GitDiaryBot is designed from three assumptions:</p>\n<ol>\n<li>Diary is a single plain text file, that grows by appending records.</li>\n<li>Git is used for synchronization and backup.</li>\n<li>New records come from messages to a chat bot.</li>\n</ol>\n<p>While each part can be replaced, the primary goal is to have this combination working.</p>\n</div>\n</div>\n<div id=\"oop-architecture\">\n<h2>OOP Architecture</h2>\n<p>Dispatcher is reacting to Telegram.Bot updates by delegating to 2 classes:</p>\n<ol>\n<li>Installer</li>\n<li>Receiver</li>\n</ol>\n<p>Receiver attempts to load tenant using effective user ID from incoming update.\nIf tenant does not exists, Dispatcher calls Installer to run installation flow.</p>\n<p>For successfully loaded Tenant, Dispatcher calls Receiver which extracts GitDiaryBot Events from\nTelegram Update Message and invokes appropriate handler.</p>\n<p>Handlers processes Events using Core classes.</p>\n<p>Core classes\u2019 responsibilities are:</p>\n<ul>\n<li>Save journaling records.</li>\n<li>Synchronize with upstream.</li>\n<li>Transcribe voice.</li>\n<li>Geocode coordinates.</li>\n<li>Annotate photos.</li>\n</ul>\n<p>Core classes are not allowed to import anything outside core directory.</p>\n<p>Transformers use core classes to extract plain text records from other media.</p>\n<p>Skill combines telegram filter, extractor, event type and handler.\nSkillset defines capabilities available to a Tenant.</p>\n</div>\n\n          </div>"}, "last_serial": 7108233, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "96e5fb61d2c8f9ed399bb55d392ed683", "sha256": "f6b56be2fac54583ac59e194c5ad1ec1371b3430a09316eb252db240f07e02bb"}, "downloads": -1, "filename": "GitDiaryBot-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "96e5fb61d2c8f9ed399bb55d392ed683", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23041, "upload_time": "2020-04-27T02:37:16", "upload_time_iso_8601": "2020-04-27T02:37:16.318588Z", "url": "https://files.pythonhosted.org/packages/80/23/3d98966d47d57f4f0492b7698a24e82267a44a47fc8ae1b28a87f4a93ab7/GitDiaryBot-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfa91420540a8743246b0fe70da14a6c", "sha256": "15a2a2055c8ec2db530e86eeb06b5025b1f841d523852fcdf8e6b9981a48c4ca"}, "downloads": -1, "filename": "GitDiaryBot-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bfa91420540a8743246b0fe70da14a6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17510, "upload_time": "2020-04-27T02:37:18", "upload_time_iso_8601": "2020-04-27T02:37:18.471164Z", "url": "https://files.pythonhosted.org/packages/04/eb/402526d0ad4628c858e1232887a0ef206d62550f21bec2280b20c1f11fa4/GitDiaryBot-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "96e5fb61d2c8f9ed399bb55d392ed683", "sha256": "f6b56be2fac54583ac59e194c5ad1ec1371b3430a09316eb252db240f07e02bb"}, "downloads": -1, "filename": "GitDiaryBot-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "96e5fb61d2c8f9ed399bb55d392ed683", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23041, "upload_time": "2020-04-27T02:37:16", "upload_time_iso_8601": "2020-04-27T02:37:16.318588Z", "url": "https://files.pythonhosted.org/packages/80/23/3d98966d47d57f4f0492b7698a24e82267a44a47fc8ae1b28a87f4a93ab7/GitDiaryBot-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfa91420540a8743246b0fe70da14a6c", "sha256": "15a2a2055c8ec2db530e86eeb06b5025b1f841d523852fcdf8e6b9981a48c4ca"}, "downloads": -1, "filename": "GitDiaryBot-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bfa91420540a8743246b0fe70da14a6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17510, "upload_time": "2020-04-27T02:37:18", "upload_time_iso_8601": "2020-04-27T02:37:18.471164Z", "url": "https://files.pythonhosted.org/packages/04/eb/402526d0ad4628c858e1232887a0ef206d62550f21bec2280b20c1f11fa4/GitDiaryBot-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:06 2020"}