{"info": {"author": "Rigetti Computing", "author_email": "softapps@rigetti.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyQuil\n\nA library for easily generating Quil programs to be executed using the Rigetti Forest platform.\npyQuil is licensed under the [Apache 2.0 license](https://github.com/rigetti/pyQuil/blob/master/LICENSE).\n\n[![Build Status](https://semaphoreci.com/api/v1/rigetti/pyquil/branches/master/badge.svg)](https://semaphoreci.com/rigetti/pyquil)\n[![Documentation Status](https://readthedocs.org/projects/pyquil/badge/?version=latest)](http://pyquil.readthedocs.io/en/latest/?badge=latest)\n\n## Documentation\n\nDocumentation is hosted at [http://pyquil.readthedocs.io/en/latest/](http://pyquil.readthedocs.io/en/latest/)\n\n## Installation\n\nYou can install pyQuil as a conda package (recommended):\n\n```bash\nconda install -c rigetti pyquil\n```\n\nor using `pip`:\n\n```\npip install pyquil\n```\n\nTo instead install pyQuil from source, clone this repository, `cd` into it, and run:\n```\npip install -e .\n```\n\n## Connecting to Rigetti Forest\n\npyQuil can be used to build and manipulate Quil programs without restriction. However, to run\nprograms (e.g., to get wavefunctions, get multishot experiment data), you will need an API key\nfor [Rigetti Forest](http://forest.rigetti.com). This will allow you to run your programs on the\nRigetti Quantum Virtual Machine (QVM) or on a real quantum processor (QPU).\n\nOnce you have your key, run the following command to automatically set up your config:\n\n```\npyquil-config-setup\n```\n\nYou can also create the configuration file manually if you'd like and place it at `~/.pyquil_config`.\nThe configuration file is in INI format and should contain all the information required to connect to Forest:\n\n```\n[Rigetti Forest]\nkey: <Rigetti Forest API key>\nuser_id: <Rigetti User ID>\n```\n\nYou can change the location of this file by setting the `PYQUIL_CONFIG` environment variable.\n\nIf you encounter errors or warnings trying to connect to Forest then see the full\n[Getting Started Guide](https://go.rigetti.com/getting-started)\n\n## Examples using the Rigetti QVM\n\nHere is how to construct a Bell state program and how to compute the amplitudes of its wavefunction:\n\n```python\n>>> from pyquil.quil import Program\n>>> from pyquil.api import QVMConnection\n>>> from pyquil.gates import *\n>>> qvm = QVMConnection()\n>>> p = Program(H(0), CNOT(0,1))\n<pyquil.pyquil.Program object at 0x101ebfb50>\n>>> qvm.wavefunction(p).amplitudes\narray([0.7071067811865475+0j, 0j, 0j, 0.7071067811865475+0j])\n```\n\nHow to do a simulated multishot experiment measuring qubits 0 and 1 of a Bell state. (Of course,\neach measurement pair will be `00` or `11`.)\n\n```python\n>>> from pyquil.quil import Program\n>>> from pyquil.api import QVMConnection\n>>> from pyquil.gates import *\n>>> qvm = QVMConnection()\n>>> p = Program()\n>>> p.inst(H(0),\n...        CNOT(0, 1),\n...        MEASURE(0, 0),\n...        MEASURE(1, 1))\n<pyquil.pyquil.Program object at 0x101ebfc50>\n>>> print(p)\nH 0\nCNOT 0 1\nMEASURE 0 [0]\nMEASURE 1 [1]\n\n>>> qvm.run(p, [0, 1], 10)\n[[0, 0], [1, 1], [1, 1], [0, 0], [0, 0], [1, 1], [0, 0], [0, 0], [0, 0], [0, 0]]\n```\n\n## Community\n\nJoin the public Forest Slack channel at [http://slack.rigetti.com](http://slack.rigetti.com).\n\nThe following projects have been contributed by community members:\n\n- [Syntax Highlighting for Quil](https://github.com/JavaFXpert/quil-syntax-highlighter)\n  contributed by [James Weaver](https://github.com/JavaFXpert)\n- [Web Based Circuit Simulator](https://github.com/rasa97/quil-sim/tree/master)\n  contributed by [Ravisankar A V](https://github.com/rasa97)\n- [Quil in Javascript](https://github.com/mapmeld/jsquil)\n  contributed by [Nick Doiron](https://github.com/mapmeld)\n- [Quil in Java](https://github.com/QCHackers/jquil)\n  contributed by [Victory Omole](https://github.com/vtomole)\n\n## Developing PyQuil\n\nTo make changes to PyQuil itself see [DEVELOPMENT.md](DEVELOPMENT.md) for instructions on development and testing.\n\n## How to cite pyQuil and Forest\n\nIf you use pyQuil, Grove, or other parts of the Rigetti Forest stack in your research, please cite it as follows:\n\nBibTeX:\n```\n@misc{1608.03355,\n  title={A Practical Quantum Instruction Set Architecture},\n  author={Smith, Robert S and Curtis, Michael J and Zeng, William J},\n  journal={arXiv preprint arXiv:1608.03355},\n  year={2016}\n}\n```\n\nText:\n```\nR. Smith, M. J. Curtis and W. J. Zeng, \"A Practical Quantum Instruction Set Architecture,\" (2016), \n  arXiv:1608.03355 [quant-ph], https://arxiv.org/abs/1608.03355\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rigetti/pyquil.git", "keywords": "quantum quil programming hybrid", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "qcs", "package_url": "https://pypi.org/project/qcs/", "platform": "", "project_url": "https://pypi.org/project/qcs/", "project_urls": {"Homepage": "https://github.com/rigetti/pyquil.git"}, "release_url": "https://pypi.org/project/qcs/2.1.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A Python library to generate Quantum Instruction Language (Quil) Programs.", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyQuil</h1>\n<p>A library for easily generating Quil programs to be executed using the Rigetti Forest platform.\npyQuil is licensed under the <a href=\"https://github.com/rigetti/pyQuil/blob/master/LICENSE\" rel=\"nofollow\">Apache 2.0 license</a>.</p>\n<p><a href=\"https://semaphoreci.com/rigetti/pyquil\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/64378aa15052d185d3753b58c4ea67628ab4dc32/68747470733a2f2f73656d6170686f726563692e636f6d2f6170692f76312f726967657474692f70797175696c2f6272616e636865732f6d61737465722f62616467652e737667\"></a>\n<a href=\"http://pyquil.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d25f6b933c1d17929e4b02ffb6f349e5c4728dc/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70797175696c2f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<h2>Documentation</h2>\n<p>Documentation is hosted at <a href=\"http://pyquil.readthedocs.io/en/latest/\" rel=\"nofollow\">http://pyquil.readthedocs.io/en/latest/</a></p>\n<h2>Installation</h2>\n<p>You can install pyQuil as a conda package (recommended):</p>\n<pre>conda install -c rigetti pyquil\n</pre>\n<p>or using <code>pip</code>:</p>\n<pre><code>pip install pyquil\n</code></pre>\n<p>To instead install pyQuil from source, clone this repository, <code>cd</code> into it, and run:</p>\n<pre><code>pip install -e .\n</code></pre>\n<h2>Connecting to Rigetti Forest</h2>\n<p>pyQuil can be used to build and manipulate Quil programs without restriction. However, to run\nprograms (e.g., to get wavefunctions, get multishot experiment data), you will need an API key\nfor <a href=\"http://forest.rigetti.com\" rel=\"nofollow\">Rigetti Forest</a>. This will allow you to run your programs on the\nRigetti Quantum Virtual Machine (QVM) or on a real quantum processor (QPU).</p>\n<p>Once you have your key, run the following command to automatically set up your config:</p>\n<pre><code>pyquil-config-setup\n</code></pre>\n<p>You can also create the configuration file manually if you'd like and place it at <code>~/.pyquil_config</code>.\nThe configuration file is in INI format and should contain all the information required to connect to Forest:</p>\n<pre><code>[Rigetti Forest]\nkey: &lt;Rigetti Forest API key&gt;\nuser_id: &lt;Rigetti User ID&gt;\n</code></pre>\n<p>You can change the location of this file by setting the <code>PYQUIL_CONFIG</code> environment variable.</p>\n<p>If you encounter errors or warnings trying to connect to Forest then see the full\n<a href=\"https://go.rigetti.com/getting-started\" rel=\"nofollow\">Getting Started Guide</a></p>\n<h2>Examples using the Rigetti QVM</h2>\n<p>Here is how to construct a Bell state program and how to compute the amplitudes of its wavefunction:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyquil.quil</span> <span class=\"kn\">import</span> <span class=\"n\">Program</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyquil.api</span> <span class=\"kn\">import</span> <span class=\"n\">QVMConnection</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyquil.gates</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qvm</span> <span class=\"o\">=</span> <span class=\"n\">QVMConnection</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Program</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">CNOT</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">pyquil</span><span class=\"o\">.</span><span class=\"n\">pyquil</span><span class=\"o\">.</span><span class=\"n\">Program</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x101ebfb50</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qvm</span><span class=\"o\">.</span><span class=\"n\">wavefunction</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">amplitudes</span>\n<span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.7071067811865475</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mf\">0.7071067811865475</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"n\">j</span><span class=\"p\">])</span>\n</pre>\n<p>How to do a simulated multishot experiment measuring qubits 0 and 1 of a Bell state. (Of course,\neach measurement pair will be <code>00</code> or <code>11</code>.)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyquil.quil</span> <span class=\"kn\">import</span> <span class=\"n\">Program</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyquil.api</span> <span class=\"kn\">import</span> <span class=\"n\">QVMConnection</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyquil.gates</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qvm</span> <span class=\"o\">=</span> <span class=\"n\">QVMConnection</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Program</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inst</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>        <span class=\"n\">CNOT</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>        <span class=\"n\">MEASURE</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>        <span class=\"n\">MEASURE</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">pyquil</span><span class=\"o\">.</span><span class=\"n\">pyquil</span><span class=\"o\">.</span><span class=\"n\">Program</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x101ebfc50</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"n\">H</span> <span class=\"mi\">0</span>\n<span class=\"n\">CNOT</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n<span class=\"n\">MEASURE</span> <span class=\"mi\">0</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">MEASURE</span> <span class=\"mi\">1</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">qvm</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n</pre>\n<h2>Community</h2>\n<p>Join the public Forest Slack channel at <a href=\"http://slack.rigetti.com\" rel=\"nofollow\">http://slack.rigetti.com</a>.</p>\n<p>The following projects have been contributed by community members:</p>\n<ul>\n<li><a href=\"https://github.com/JavaFXpert/quil-syntax-highlighter\" rel=\"nofollow\">Syntax Highlighting for Quil</a>\ncontributed by <a href=\"https://github.com/JavaFXpert\" rel=\"nofollow\">James Weaver</a></li>\n<li><a href=\"https://github.com/rasa97/quil-sim/tree/master\" rel=\"nofollow\">Web Based Circuit Simulator</a>\ncontributed by <a href=\"https://github.com/rasa97\" rel=\"nofollow\">Ravisankar A V</a></li>\n<li><a href=\"https://github.com/mapmeld/jsquil\" rel=\"nofollow\">Quil in Javascript</a>\ncontributed by <a href=\"https://github.com/mapmeld\" rel=\"nofollow\">Nick Doiron</a></li>\n<li><a href=\"https://github.com/QCHackers/jquil\" rel=\"nofollow\">Quil in Java</a>\ncontributed by <a href=\"https://github.com/vtomole\" rel=\"nofollow\">Victory Omole</a></li>\n</ul>\n<h2>Developing PyQuil</h2>\n<p>To make changes to PyQuil itself see <a href=\"DEVELOPMENT.md\" rel=\"nofollow\">DEVELOPMENT.md</a> for instructions on development and testing.</p>\n<h2>How to cite pyQuil and Forest</h2>\n<p>If you use pyQuil, Grove, or other parts of the Rigetti Forest stack in your research, please cite it as follows:</p>\n<p>BibTeX:</p>\n<pre><code>@misc{1608.03355,\n  title={A Practical Quantum Instruction Set Architecture},\n  author={Smith, Robert S and Curtis, Michael J and Zeng, William J},\n  journal={arXiv preprint arXiv:1608.03355},\n  year={2016}\n}\n</code></pre>\n<p>Text:</p>\n<pre><code>R. Smith, M. J. Curtis and W. J. Zeng, \"A Practical Quantum Instruction Set Architecture,\" (2016), \n  arXiv:1608.03355 [quant-ph], https://arxiv.org/abs/1608.03355\n</code></pre>\n\n          </div>"}, "last_serial": 6503131, "releases": {"2.1.0": [{"comment_text": "", "digests": {"md5": "02a59a17bf70f06c325543f9be2aed8e", "sha256": "6d1923d09ca716385e5390b3e2ab8023f5bd7ef9aaa27f7bb8897b0e7f1ff494"}, "downloads": -1, "filename": "qcs-2.1.0.tar.gz", "has_sig": false, "md5_digest": "02a59a17bf70f06c325543f9be2aed8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 119734, "upload_time": "2018-12-04T19:58:50", "upload_time_iso_8601": "2018-12-04T19:58:50.326640Z", "url": "https://files.pythonhosted.org/packages/20/2b/96f2bf8dad777f40d0cb20ddcaf9161cc9d60f9364d38872e8297828da43/qcs-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "02a59a17bf70f06c325543f9be2aed8e", "sha256": "6d1923d09ca716385e5390b3e2ab8023f5bd7ef9aaa27f7bb8897b0e7f1ff494"}, "downloads": -1, "filename": "qcs-2.1.0.tar.gz", "has_sig": false, "md5_digest": "02a59a17bf70f06c325543f9be2aed8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 119734, "upload_time": "2018-12-04T19:58:50", "upload_time_iso_8601": "2018-12-04T19:58:50.326640Z", "url": "https://files.pythonhosted.org/packages/20/2b/96f2bf8dad777f40d0cb20ddcaf9161cc9d60f9364d38872e8297828da43/qcs-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:56 2020"}