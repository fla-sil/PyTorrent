{"info": {"author": "Zope Foundation and Contributors", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "=================\n``zope.testing``\n=================\n\n.. image:: https://img.shields.io/pypi/v/zope.testing.svg\n    :target: https://pypi.python.org/pypi/zope.testing/\n    :alt: Latest Version\n\n.. image:: https://travis-ci.org/zopefoundation/zope.testing.svg?branch=master\n        :target: https://travis-ci.org/zopefoundation/zope.testing\n\n.. image:: https://readthedocs.org/projects/zopetesting/badge/?version=latest\n        :target: http://zopetesting.readthedocs.org/en/latest/\n        :alt: Documentation Status\n\nThis package provides a number of testing frameworks.\n\ncleanup\n  Provides a mixin class for cleaning up after tests that\n  make global changes.\n\nformparser\n  An HTML parser that extracts form information.\n\n  **Python 2 only**\n\n  This is intended to support functional tests that need to extract\n  information from HTML forms returned by the publisher.\n\n  See formparser.txt.\n\nloggingsupport\n  Support for testing logging code\n\n  If you want to test that your code generates proper log output, you\n  can create and install a handler that collects output.\n\nloghandler\n  Logging handler for tests that check logging output.\n\nmodule\n  Lets a doctest pretend to be a Python module.\n\n  See module.txt.\n\nrenormalizing\n  Regular expression pattern normalizing output checker.\n  Useful for doctests.\n\nserver\n  Provides a simple HTTP server compatible with the zope.app.testing\n  functional testing API.  Lets you interactively play with the system\n  under test.  Helpful in debugging functional doctest failures.\n\n  **Python 2 only**\n\nsetupstack\n  A simple framework for automating doctest set-up and tear-down.\n  See setupstack.txt.\n\nwait\n  A small utility for dealing with timing non-determinism\n  See wait.txt.\n\ndoctestcase\n  Support for defining doctests as methods of ``unittest.TestCase``\n  classes so that they can be more easily found by test runners, like\n  nose, that ignore test suites.\n\n.. contents::\n\nGetting started developing zope.testing\n=======================================\n\nzope.testing uses buildout.  To start, run ``python bootstrap.py``.  It will\ncreate a number of directories and the ``bin/buildout`` script.  Next, run\n``bin/buildout``.  It will create a test script for you.  Now, run ``bin/test``\nto run the zope.testing test suite.\n\n\nParsing HTML Forms\n==================\n\nSometimes in functional tests, information from a generated form must\nbe extracted in order to re-submit it as part of a subsequent request.\nThe `zope.testing.formparser` module can be used for this purpose.\n\nNOTE\n   formparser doesn't support Python 3.\n\nThe scanner is implemented using the `FormParser` class.  The\nconstructor arguments are the page data containing the form and\n(optionally) the URL from which the page was retrieved:\n\n  >>> import zope.testing.formparser\n\n  >>> page_text = '''\\\n  ... <html><body>\n  ...   <form name=\"form1\" action=\"/cgi-bin/foobar.py\" method=\"POST\">\n  ...     <input type=\"hidden\" name=\"f1\" value=\"today\" />\n  ...     <input type=\"submit\" name=\"do-it-now\" value=\"Go for it!\" />\n  ...     <input type=\"IMAGE\" name=\"not-really\" value=\"Don't.\"\n  ...            src=\"dont.png\" />\n  ...     <select name=\"pick-two\" size=\"3\" multiple>\n  ...       <option value=\"one\" selected>First</option>\n  ...       <option value=\"two\" label=\"Second\">Another</option>\n  ...       <optgroup>\n  ...         <option value=\"three\">Third</option>\n  ...         <option selected=\"selected\">Fourth</option>\n  ...       </optgroup>\n  ...     </select>\n  ...   </form>\n  ...\n  ...   Just for fun, a second form, after specifying a base:\n  ...   <base href=\"http://www.example.com/base/\" />\n  ...   <form action = 'sproing/sprung.html' enctype=\"multipart/form\">\n  ...     <textarea name=\"sometext\" rows=\"5\">Some text.</textarea>\n  ...     <input type=\"Image\" name=\"action\" value=\"Do something.\"\n  ...            src=\"else.png\" />\n  ...     <input type=\"text\" value=\"\" name=\"multi\" size=\"2\" />\n  ...     <input type=\"text\" value=\"\" name=\"multi\" size=\"3\" />\n  ...   </form>\n  ... </body></html>\n  ... '''\n\n  >>> parser = zope.testing.formparser.FormParser(page_text)\n  >>> forms = parser.parse()\n\n  >>> len(forms)\n  2\n  >>> forms.form1 is forms[0]\n  True\n  >>> forms.form1 is forms[1]\n  False\n\nMore often, the `parse()` convenience function is all that's needed:\n\n  >>> forms = zope.testing.formparser.parse(\n  ...     page_text, \"http://cgi.example.com/somewhere/form.html\")\n\n  >>> len(forms)\n  2\n  >>> forms.form1 is forms[0]\n  True\n  >>> forms.form1 is forms[1]\n  False\n\nOnce we have the form we're interested in, we can check form\nattributes and individual field values:\n\n  >>> form = forms.form1\n  >>> form.enctype\n  'application/x-www-form-urlencoded'\n  >>> form.method\n  'post'\n\n  >>> keys = form.keys()\n  >>> keys.sort()\n  >>> keys\n  ['do-it-now', 'f1', 'not-really', 'pick-two']\n\n  >>> not_really = form[\"not-really\"]\n  >>> not_really.type\n  'image'\n  >>> not_really.value\n  \"Don't.\"\n  >>> not_really.readonly\n  False\n  >>> not_really.disabled\n  False\n\nNote that relative URLs are converted to absolute URLs based on the\n``<base>`` element (if present) or using the base passed in to the\nconstructor.\n\n  >>> form.action\n  'http://cgi.example.com/cgi-bin/foobar.py'\n  >>> not_really.src\n  'http://cgi.example.com/somewhere/dont.png'\n\n  >>> forms[1].action\n  'http://www.example.com/base/sproing/sprung.html'\n  >>> forms[1][\"action\"].src\n  'http://www.example.com/base/else.png'\n\nFields which are repeated are reported as lists of objects that\nrepresent each instance of the field::\n\n  >>> field = forms[1][\"multi\"]\n  >>> isinstance(field, list)\n  True\n  >>> [o.value for o in field]\n  ['', '']\n  >>> [o.size for o in field]\n  [2, 3]\n\nThe ``<textarea>`` element provides some additional attributes:\n\n  >>> ta = forms[1][\"sometext\"]\n  >>> print ta.rows\n  5\n  >>> print ta.cols\n  None\n  >>> ta.value\n  'Some text.'\n\nThe ``<select>`` element provides access to the options as well:\n\n  >>> select = form[\"pick-two\"]\n  >>> select.multiple\n  True\n  >>> select.size\n  3\n  >>> select.type\n  'select'\n  >>> select.value\n  ['one', 'Fourth']\n\n  >>> options = select.options\n  >>> len(options)\n  4\n  >>> [opt.label for opt in options]\n  ['First', 'Second', 'Third', 'Fourth']\n  >>> [opt.value for opt in options]\n  ['one', 'two', 'three', 'Fourth']\n\n\nSupport for testing logging code\n================================\n\nIf you want to test that your code generates proper log output, you\ncan create and install a handler that collects output:\n\n  >>> from zope.testing.loggingsupport import InstalledHandler\n  >>> handler = InstalledHandler('foo.bar')\n\nThe handler is installed into loggers for all of the names passed. In\naddition, the logger level is set to 1, which means, log\neverything. If you want to log less than everything, you can provide a\nlevel keyword argument.  The level setting effects only the named\nloggers.\n\n  >>> import logging\n  >>> handler_with_levels = InstalledHandler('baz', level=logging.WARNING)\n\nThen, any log output is collected in the handler:\n\n  >>> logging.getLogger('foo.bar').exception('eek')\n  >>> logging.getLogger('foo.bar').info('blah blah')\n\n  >>> for record in handler.records:\n  ...     print_(record.name, record.levelname)\n  ...     print_(' ', record.getMessage())\n  foo.bar ERROR\n    eek\n  foo.bar INFO\n    blah blah\n\nA similar effect can be gotten by just printing the handler:\n\n  >>> print_(handler)\n  foo.bar ERROR\n    eek\n  foo.bar INFO\n    blah blah\n\nAfter checking the log output, you need to uninstall the handler:\n\n  >>> handler.uninstall()\n  >>> handler_with_levels.uninstall()\n\nAt which point, the handler won't get any more log output.\nLet's clear the handler:\n\n  >>> handler.clear()\n  >>> handler.records\n  []\n\nAnd then log something:\n\n  >>> logging.getLogger('foo.bar').info('blah')\n\nand, sure enough, we still have no output:\n\n  >>> handler.records\n  []\n\n\nRegular expression pattern normalizing output checker\n=====================================================\n\nThe pattern-normalizing output checker extends the default output checker with\nan option to normalize expected and actual output.\n\nYou specify a sequence of patterns and replacements.  The replacements are\napplied to the expected and actual outputs before calling the default outputs\nchecker.  Let's look at an example.  In this example, we have some times and\naddresses:\n\n    >>> want = '''\\\n    ... <object object at 0xb7f14438>\n    ... completed in 1.234 seconds.\n    ... <BLANKLINE>\n    ... <object object at 0xb7f14440>\n    ... completed in 123.234 seconds.\n    ... <BLANKLINE>\n    ... <object object at 0xb7f14448>\n    ... completed in .234 seconds.\n    ... <BLANKLINE>\n    ... <object object at 0xb7f14450>\n    ... completed in 1.234 seconds.\n    ... <BLANKLINE>\n    ... '''\n\n    >>> got = '''\\\n    ... <object object at 0xb7f14458>\n    ... completed in 1.235 seconds.\n    ...\n    ... <object object at 0xb7f14460>\n    ... completed in 123.233 seconds.\n    ...\n    ... <object object at 0xb7f14468>\n    ... completed in .231 seconds.\n    ...\n    ... <object object at 0xb7f14470>\n    ... completed in 1.23 seconds.\n    ...\n    ... '''\n\nWe may wish to consider these two strings to match, even though they differ in\nactual addresses and times.  The default output checker will consider them\ndifferent:\n\n    >>> import doctest\n    >>> doctest.OutputChecker().check_output(want, got, 0)\n    False\n\nWe'll use the zope.testing.renormalizing.OutputChecker to normalize both the\nwanted and gotten strings to ignore differences in times and\naddresses:\n\n    >>> import re\n    >>> from zope.testing.renormalizing import OutputChecker\n    >>> checker = OutputChecker([\n    ...    (re.compile('[0-9]*[.][0-9]* seconds'), '<SOME NUMBER OF> seconds'),\n    ...    (re.compile('at 0x[0-9a-f]+'), 'at <SOME ADDRESS>'),\n    ...    ])\n\n    >>> checker.check_output(want, got, 0)\n    True\n\nUsual OutputChecker options work as expected:\n\n    >>> want_ellided = '''\\\n    ... <object object at 0xb7f14438>\n    ... completed in 1.234 seconds.\n    ... ...\n    ... <object object at 0xb7f14450>\n    ... completed in 1.234 seconds.\n    ... <BLANKLINE>\n    ... '''\n\n    >>> checker.check_output(want_ellided, got, 0)\n    False\n\n    >>> checker.check_output(want_ellided, got, doctest.ELLIPSIS)\n    True\n\nWhen we get differencs, we output them with normalized text:\n\n    >>> source = '''\\\n    ... >>> do_something()\n    ... <object object at 0xb7f14438>\n    ... completed in 1.234 seconds.\n    ... ...\n    ... <object object at 0xb7f14450>\n    ... completed in 1.234 seconds.\n    ... <BLANKLINE>\n    ... '''\n\n    >>> example = doctest.Example(source, want_ellided)\n\n    >>> print_(checker.output_difference(example, got, 0))\n    Expected:\n        <object object at <SOME ADDRESS>>\n        completed in <SOME NUMBER OF> seconds.\n        ...\n        <object object at <SOME ADDRESS>>\n        completed in <SOME NUMBER OF> seconds.\n        <BLANKLINE>\n    Got:\n        <object object at <SOME ADDRESS>>\n        completed in <SOME NUMBER OF> seconds.\n        <BLANKLINE>\n        <object object at <SOME ADDRESS>>\n        completed in <SOME NUMBER OF> seconds.\n        <BLANKLINE>\n        <object object at <SOME ADDRESS>>\n        completed in <SOME NUMBER OF> seconds.\n        <BLANKLINE>\n        <object object at <SOME ADDRESS>>\n        completed in <SOME NUMBER OF> seconds.\n        <BLANKLINE>\n    <BLANKLINE>\n\n    >>> print_(checker.output_difference(example, got,\n    ...                                 doctest.REPORT_NDIFF))\n    Differences (ndiff with -expected +actual):\n        - <object object at <SOME ADDRESS>>\n        - completed in <SOME NUMBER OF> seconds.\n        - ...\n          <object object at <SOME ADDRESS>>\n          completed in <SOME NUMBER OF> seconds.\n          <BLANKLINE>\n        + <object object at <SOME ADDRESS>>\n        + completed in <SOME NUMBER OF> seconds.\n        + <BLANKLINE>\n        + <object object at <SOME ADDRESS>>\n        + completed in <SOME NUMBER OF> seconds.\n        + <BLANKLINE>\n        + <object object at <SOME ADDRESS>>\n        + completed in <SOME NUMBER OF> seconds.\n        + <BLANKLINE>\n    <BLANKLINE>\n\n    If the wanted text is empty, however, we don't transform the actual output.\n    This is usful when writing tests.  We leave the expected output empty, run\n    the test, and use the actual output as expected, after reviewing it.\n\n    >>> source = '''\\\n    ... >>> do_something()\n    ... '''\n\n    >>> example = doctest.Example(source, '\\n')\n    >>> print_(checker.output_difference(example, got, 0))\n    Expected:\n    <BLANKLINE>\n    Got:\n        <object object at 0xb7f14458>\n        completed in 1.235 seconds.\n        <BLANKLINE>\n        <object object at 0xb7f14460>\n        completed in 123.233 seconds.\n        <BLANKLINE>\n        <object object at 0xb7f14468>\n        completed in .231 seconds.\n        <BLANKLINE>\n        <object object at 0xb7f14470>\n        completed in 1.23 seconds.\n        <BLANKLINE>\n    <BLANKLINE>\n\nIf regular expressions aren't expressive enough, you can use arbitrary Python\ncallables to transform the text.  For example, suppose you want to ignore\ncase during comparison:\n\n    >>> checker = OutputChecker([\n    ...    lambda s: s.lower(),\n    ...    lambda s: s.replace('<blankline>', '<BLANKLINE>'),\n    ...    ])\n\n    >>> want = '''\\\n    ... Usage: thundermonkey [options] [url]\n    ... <BLANKLINE>\n    ... Options:\n    ...     -h    display this help message\n    ... '''\n\n    >>> got = '''\\\n    ... usage: thundermonkey [options] [URL]\n    ...\n    ... options:\n    ...     -h    Display this help message\n    ... '''\n\n    >>> checker.check_output(want, got, 0)\n    True\n\nSuppose we forgot that <BLANKLINE> must be in upper case:\n\n    >>> checker = OutputChecker([\n    ...    lambda s: s.lower(),\n    ...    ])\n\n    >>> checker.check_output(want, got, 0)\n    False\n\nThe difference would show us that:\n\n    >>> source = '''\\\n    ... >>> print_help_message()\n    ... ''' + want\n    >>> example = doctest.Example(source, want)\n    >>> print_(checker.output_difference(example, got,\n    ...                                 doctest.REPORT_NDIFF))\n    Differences (ndiff with -expected +actual):\n          usage: thundermonkey [options] [url]\n        - <blankline>\n        + <BLANKLINE>\n          options:\n              -h    display this help message\n    <BLANKLINE>\n\n\nIt is possible to combine OutputChecker checkers for easy reuse:\n\n    >>> address_and_time_checker = OutputChecker([\n    ...    (re.compile('[0-9]*[.][0-9]* seconds'), '<SOME NUMBER OF> seconds'),\n    ...    (re.compile('at 0x[0-9a-f]+'), 'at <SOME ADDRESS>'),\n    ...    ])\n    >>> lowercase_checker = OutputChecker([\n    ...    lambda s: s.lower(),\n    ...    ])\n    >>> combined_checker = address_and_time_checker + lowercase_checker\n    >>> len(combined_checker.transformers)\n    3\n\nCombining a checker with something else does not work:\n\n    >>> lowercase_checker + 5 #doctest: +ELLIPSIS\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for +: ...\n\nUsing the 2to3 exception normalization:\n\n    >>> from zope.testing.renormalizing import (\n    ...     IGNORE_EXCEPTION_MODULE_IN_PYTHON2)\n    >>> checker = OutputChecker()\n    >>> want = \"\"\"\\\n    ... Traceback (most recent call last):\n    ... foo.bar.FooBarError: requires at least one argument.\"\"\"\n    >>> got = \"\"\"\\\n    ... Traceback (most recent call last):\n    ... FooBarError: requires at least one argument.\"\"\"\n    >>> result = checker.check_output(\n    ...     want, got, IGNORE_EXCEPTION_MODULE_IN_PYTHON2)\n    >>> import sys\n    >>> if sys.version_info[0] < 3:\n    ...     expected = True\n    ... else:\n    ...     expected = False\n    >>> result == expected\n    True\n\nWhen reporting a failing test and running in Python 2, the normalizer tries\nto be helpful by explaining how to test for exceptions in the traceback output.\n\n    >>> want = \"\"\"\\\n    ... Traceback (most recent call last):\n    ... foo.bar.FooBarErrorXX: requires at least one argument.\n    ... \"\"\"\n    >>> got = \"\"\"\\\n    ... Traceback (most recent call last):\n    ... FooBarError: requires at least one argument.\n    ... \"\"\"\n    >>> checker.check_output(want, got, IGNORE_EXCEPTION_MODULE_IN_PYTHON2)\n    False\n    >>> from doctest import Example\n    >>> example = Example('dummy', want)\n    >>> result = checker.output_difference(\n    ...     example, got, IGNORE_EXCEPTION_MODULE_IN_PYTHON2)\n    >>> output = \"\"\"\\\n    ... Expected:\n    ...     Traceback (most recent call last):\n    ...     foo.bar.FooBarErrorXX: requires at least one argument.\n    ... Got:\n    ...     Traceback (most recent call last):\n    ...     FooBarError: requires at least one argument.\n    ... \"\"\"\n    >>> hint = \"\"\"\\\n    ...     ===============================================================\n    ...     HINT:\n    ...       The optionflag IGNORE_EXCEPTION_MODULE_IN_PYTHON2 is set.\n    ...       You seem to test traceback output.\n    ...       If you are indeed, make sure to use the full dotted name of\n    ...       the exception class like Python 3 displays,\n    ...       even though you are running the tests in Python 2.\n    ...       The exception message needs to be last line (and thus not\n    ...       split over multiple lines).\n    ...     ===============================================================\"\"\"\n    >>> if sys.version_info[0] < 3:\n    ...     expected = output + hint\n    ... else:\n    ...     expected = output\n    >>> result == expected\n    True\n\n\nStack-based test setUp and tearDown\n===================================\n\nWriting doctest setUp and tearDown functions can be a bit tedious,\nespecially when setUp/tearDown functions are combined.\n\nthe zope.testing.setupstack module provides a small framework for\nautomating test tear down.  It provides a generic setUp function that\nsets up a stack. Normal test setUp functions call this function to set\nup the stack and then use the register function to register tear-down\nfunctions.\n\nTo see how this works we'll create a faux test:\n\n    >>> class Test:\n    ...     def __init__(self):\n    ...         self.globs = {}\n    >>> test = Test()\n\nWe'll register some tearDown functions that just print something:\n\n    >>> import sys\n    >>> import zope.testing.setupstack\n    >>> zope.testing.setupstack.register(\n    ...     test, lambda : sys.stdout.write('td 1\\n'))\n    >>> zope.testing.setupstack.register(\n    ...     test, lambda : sys.stdout.write('td 2\\n'))\n\nNow, when we call the tearDown function:\n\n    >>> zope.testing.setupstack.tearDown(test)\n    td 2\n    td 1\n\nThe registered tearDown functions are run. Note that they are run in\nthe reverse order that they were registered.\n\n\nExtra positional arguments can be passed to register:\n\n    >>> zope.testing.setupstack.register(\n    ...    test, lambda x, y, z: sys.stdout.write('%s %s %s\\n' % (x, y, z)),\n    ...    1, 2, z=9)\n    >>> zope.testing.setupstack.tearDown(test)\n    1 2 9\n\n\nTemporary Test Directory\n------------------------\n\nOften, tests create files as they demonstrate functionality.  They\nneed to arrange for the removeal of these files when the test is\ncleaned up.\n\nThe setUpDirectory function automates this.  We'll get the current\ndirectory first:\n\n    >>> import os\n    >>> here = os.getcwd()\n\nWe'll also create a new test:\n\n    >>> test = Test()\n\nNow we'll call the setUpDirectory function:\n\n    >>> zope.testing.setupstack.setUpDirectory(test)\n\nWe don't have to call zope.testing.setupstack.setUp, because\nsetUpDirectory calls it for us.\n\nNow the current working directory has changed:\n\n    >>> here == os.getcwd()\n    False\n    >>> setupstack_cwd = os.getcwd()\n\nWe can create files to out heart's content:\n\n    >>> with open('Data.fs', 'w') as f:\n    ...     foo = f.write('xxx')\n    >>> os.path.exists(os.path.join(setupstack_cwd, 'Data.fs'))\n    True\n\nWe'll make the file read-only. This can cause problems on Windows, but\nsetupstack takes care of that by making files writable before trying\nto remove them.\n\n    >>> import stat\n    >>> os.chmod('Data.fs', stat.S_IREAD)\n\nOn Unix systems, broken symlinks can cause problems because the chmod\nattempt by the teardown hook will fail; let's set up a broken symlink as\nwell, and verify the teardown doesn't break because of that:\n\n    >>> if sys.platform != 'win32':\n    ...     os.symlink('NotThere', 'BrokenLink')\n\nWhen tearDown is called:\n\n    >>> zope.testing.setupstack.tearDown(test)\n\nWe'll be back where we started:\n\n    >>> here == os.getcwd()\n    True\n\nand the files we created will be gone (along with the temporary\ndirectory that was created:\n\n    >>> os.path.exists(os.path.join(setupstack_cwd, 'Data.fs'))\n    False\n\nContext-manager support\n-----------------------\n\nYou can leverage context managers using the ``contextmanager`` method.\nThe result of calling the content manager's __enter__ method will be\nreturned. The context-manager's __exit__ method will be called as part\nof test tear down:\n\n    >>> class Manager(object):\n    ...     def __init__(self, *args, **kw):\n    ...         if kw:\n    ...             args += (kw, )\n    ...         self.args = args\n    ...     def __enter__(self):\n    ...         print_('enter', *self.args)\n    ...         return 42\n    ...     def __exit__(self, *args):\n    ...         print_('exit', args, *self.args)\n\n    >>> manager = Manager()\n    >>> test = Test()\n\n    >>> zope.testing.setupstack.context_manager(test, manager)\n    enter\n    42\n\n    >>> zope.testing.setupstack.tearDown(test)\n    exit (None, None, None)\n\n.. faux mock\n\n    >>> old_mock = sys.modules.get('mock')\n    >>> class FauxMock:\n    ...     @classmethod\n    ...     def patch(self, *args, **kw):\n    ...         return Manager(*args, **kw)\n\n    >>> sys.modules['mock'] = FauxMock\n\nBy far the most commonly called context manager is ``mock.patch``, so\nthere's a convenience function to make that simpler:\n\n    >>> zope.testing.setupstack.mock(test, 'time.time', return_value=42)\n    enter time.time {'return_value': 42}\n    42\n\n    >>> zope.testing.setupstack.tearDown(test)\n    exit (None, None, None) time.time {'return_value': 42}\n\nglobs\n-----\n\nDoctests have ``globs`` attributes used to hold test globals.\n``setupstack`` was originally designed to work with doctests, but can\nnow work with either doctests, or other test objects, as long as the\ntest objects have either a ``globs`` attribute or a ``__dict__``\nattribute.  The ``zope.testing.setupstack.globs`` function is used to\nget the globals for a test object:\n\n    >>> zope.testing.setupstack.globs(test) is test.globs\n    True\n\nHere, because the test object had a ``globs`` attribute, it was\nreturned. Because we used the test object above, it has a setupstack:\n\n    >>> '__zope.testing.setupstack' in test.globs\n    True\n\nIf we remove the ``globs`` attribute, the object's instance dictionary\nwill be used:\n\n    >>> del test.globs\n    >>> zope.testing.setupstack.globs(test) is test.__dict__\n    True\n    >>> zope.testing.setupstack.context_manager(test, manager)\n    enter\n    42\n\n    >>> '__zope.testing.setupstack' in test.__dict__\n    True\n\nThe ``globs`` function is used internally, but can also be used by\nsetup code to support either doctests or other test objects.\n\nTestCase\n--------\n\nA TestCase class is provided that:\n\n- Makes it easier to call setupstack apis, and\n\n- provides an inheritable tearDown method.\n\nIn addition to a tearDown method, the class provides methods:\n\n``setupDirectory()``\n    Creates a temporary directory, runs the test, and cleans it up.\n\n``register(func)``\n    Register a tear-down function.\n\n``context_manager(manager)``\n    Enters a context manager and exits it on tearDown.\n\n``mock(*args, **kw)``\n    Enters  ``mock.patch`` with the given arguments.\n\n    This is syntactic sugur for::\n\n        context_manager(mock.patch(*args, **kw))\n\nHere's an example:\n\n    >>> open('t', 'w').close()\n\n    >>> class MyTests(zope.testing.setupstack.TestCase):\n    ...\n    ...     def setUp(self):\n    ...         self.setUpDirectory()\n    ...         self.context_manager(manager)\n    ...         self.mock(\"time.time\", return_value=42)\n    ...\n    ...         @self.register\n    ...         def _():\n    ...             print('done w test')\n    ...\n    ...     def test(self):\n    ...         print(os.listdir('.'))\n\n.. let's try it\n\n    >>> import unittest\n    >>> loader = unittest.TestLoader()\n    >>> suite = loader.loadTestsFromTestCase(MyTests)\n    >>> result = suite.run(unittest.TestResult())\n    enter\n    enter time.time {'return_value': 42}\n    []\n    done w test\n    exit (None, None, None) time.time {'return_value': 42}\n    exit (None, None, None)\n\n.. cleanup\n\n    >>> if old_mock:\n    ...     sys.modules['mock'] = old_mock\n    ... else:\n    ...     del sys.modules['mock']\n    >>> os.remove('t')\n\n\n\nWait until a condition holds (or until a time out)\n==================================================\n\nOften, in tests, you need to wait until some condition holds.  This\nmay be because you're testing interaction with an external system or\ntesting threaded (threads, processes, greenlet's, etc.) interactions.\n\nYou can add sleeps to your tests, but it's often hard to know how\nlong to sleep.\n\n``zope.testing.wait`` provides a convenient way to wait until\nsome condition holds.  It will test a condition and, when true,\nreturn.  It will sleep a short time between tests.\n\nHere's a silly example, that illustrates it's use:\n\n    >>> from zope.testing.wait import wait\n    >>> wait(lambda : True)\n\nSince the condition we passed is always True, it returned\nimmediately.  If the condition doesn't hold, then we'll get a timeout:\n\n    >>> wait((lambda : False), timeout=.01)\n    Traceback (most recent call last):\n    ...\n    TimeOutWaitingFor: <lambda>\n\n``wait`` has some keyword options:\n\ntimeout\n   How long, in seconds, to wait for the condition to hold\n\n   Defaults to 9 seconds.\n\nwait\n   How long to wait between calls.\n\n   Defaults to .01 seconds.\n\nmessage\n   A message (or other data) to pass to the timeout exception.\n\n   This defaults to ``None``.  If this is false, then the callable's\n   doc string or ``__name__`` is used.\n\n``wait`` can be used as a decorator:\n\n    >>> @wait\n    ... def ok():\n    ...     return True\n\n    >>> @wait(timeout=.01)\n    ... def no_way():\n    ...     pass\n    Traceback (most recent call last):\n    ...\n    TimeOutWaitingFor: no_way\n\n    >>> @wait(timeout=.01)\n    ... def no_way():\n    ...     \"never true\"\n    Traceback (most recent call last):\n    ...\n    TimeOutWaitingFor: never true\n\n.. more tests\n\n    >>> import time\n    >>> now = time.time()\n    >>> @wait(timeout=.01, message='dang')\n    ... def no_way():\n    ...     \"never true\"\n    Traceback (most recent call last):\n    ...\n    TimeOutWaitingFor: dang\n\n    >>> .01 < (time.time() - now) < .03\n    True\n\n\nCustomization\n-------------\n\n``wait`` is an instance of ``Wait``.  With ``Wait``,\nyou can create you're own custom ``wait`` utilities.  For\nexample, if you're testing something that uses getevent, you'd want to\nuse gevent's sleep function:\n\n    >>> import zope.testing.wait\n    >>> wait = zope.testing.wait.Wait(getsleep=lambda : gevent.sleep)\n\nWait takes a number of customization parameters:\n\nexception\n  Timeout exception class\n\ngetnow\n  Function used to get a function for getting the current time.\n\n  Default: lambda : time.time\n\ngetsleep\n  Function used to get a sleep function.\n\n  Default: lambda : time.sleep\n\ntimeout\n  Default timeout\n\n  Default: 9\n\nwait\n  Default time to wait between attempts\n\n  Default: .01\n\n\n.. more tests\n\n    >>> def mysleep(t):\n    ...     print_('mysleep', t)\n    ...     time.sleep(t)\n\n    >>> def mynow():\n    ...     print_('mynow')\n    ...     return time.time()\n\n    >>> wait = zope.testing.wait.Wait(\n    ...    getnow=(lambda : mynow), getsleep=(lambda : mysleep),\n    ...    exception=ValueError, timeout=.1, wait=.02)\n\n    >>> @wait\n    ... def _(state=[]):\n    ...     if len(state) > 1:\n    ...        return True\n    ...     state.append(0)\n    mynow\n    mysleep 0.02\n    mynow\n    mysleep 0.02\n\n    >>> @wait(wait=.002)\n    ... def _(state=[]):\n    ...     if len(state) > 1:\n    ...        return True\n    ...     state.append(0)\n    mynow\n    mysleep 0.002\n    mynow\n    mysleep 0.002\n\n    >>> @wait(timeout=0)\n    ... def _(state=[]):\n    ...     if len(state) > 1:\n    ...        return True\n    ...     state.append(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: _\n\n    >>> wait = zope.testing.wait.Wait(timeout=0)\n    >>> @wait(timeout=0)\n    ... def _(state=[]):\n    ...     if len(state) > 1:\n    ...        return True\n    ...     state.append(0)\n    Traceback (most recent call last):\n    ...\n    TimeOutWaitingFor: _\n\n\nDoctests in TestCase classes\n============================\n\nThe original ``doctest`` unittest integration was based on\n``unittest`` test suites, which have fallen out of favor. This module\nprovides a way to define doctests inside of unittest ``TestCase``\nclasses. It provides better integration with unittest test fixtures,\nbecause doctests use setup provided by the containing test case\nclass. It provides access to unittest assertion methods.\n\nYou can define doctests in multiple ways:\n\n- references to named files\n\n- strings\n\n- decorated functions with docstrings\n\n- reference to named files decorating test-specific setup functions\n\n- reference to named files decorating a test class\n\n.. some setup\n\n   >>> __name__ = 'tests'\n\nHere are some examples::\n\n    >>> from zope.testing import doctestcase\n    >>> import doctest\n    >>> import unittest\n\n    >>> g = 'global'\n\n    >>> class MyTest(unittest.TestCase):\n    ...\n    ...     def setUp(self):\n    ...         self.a = 1\n    ...         self.globs = dict(c=9)\n    ...\n    ...     test1 = doctestcase.file('test-1.txt', optionflags=doctest.ELLIPSIS)\n    ...\n    ...     test2 = doctestcase.docteststring('''\n    ...       >>> self.a, g, c\n    ...       (1, 'global', 9)\n    ...     ''')\n    ...\n    ...     @doctestcase.doctestmethod(optionflags=doctest.ELLIPSIS)\n    ...     def test3(self):\n    ...         '''\n    ...         >>> self.a, self.x, g, c\n    ...         (1, 3, 'global', 9)\n    ...         '''\n    ...         self.x = 3\n    ...\n    ...     @doctestcase.doctestfile('test4.txt')\n    ...     def test4(self):\n    ...         self.x = 5\n\n    >>> import sys\n\n    >>> @doctestcase.doctestfiles('loggingsupport.txt', 'renormalizing.txt')\n    ... class MoreTests(unittest.TestCase):\n    ...\n    ...    def setUp(self):\n    ...        def print_(*args):\n    ...            sys.stdout.write(' '.join(map(str, args))+'\\n')\n    ...        self.globs = dict(print_=print_)\n\n\n.. We can run these tests with the ``unittest`` test runner.\n\n    >>> loader = unittest.TestLoader()\n    >>> sys.stdout.writeln = lambda s: sys.stdout.write(s+'\\n')\n    >>> suite = loader.loadTestsFromTestCase(MyTest)\n    >>> result = suite.run(unittest.TextTestResult(sys.stdout, True, 3))\n    test1 (tests.MyTest) ... ok\n    test2 (tests.MyTest) ... ok\n    test3 (tests.MyTest) ... ok\n    test4 (tests.MyTest) ... ok\n\n    >>> suite = loader.loadTestsFromTestCase(MoreTests)\n    >>> result = suite.run(unittest.TextTestResult(sys.stdout, True, 3))\n    test_loggingsupport (tests.MoreTests) ... ok\n    test_renormalizing (tests.MoreTests) ... ok\n\n    >>> for _, e in result.errors:\n    ...     print(e); print\n\n    Check meta data:\n\n    >>> MyTest.test1.__name__\n    'test_1'\n    >>> import os, zope.testing\n    >>> (MyTest.test1.filepath ==\n    ...  os.path.join(os.path.dirname(zope.testing.__file__), 'test-1.txt'))\n    True\n    >>> MyTest.test1.filename\n    'test-1.txt'\n\n    >>> MyTest.test3.__name__\n    'test3'\n    >>> MyTest.test4.__name__\n    'test4'\n\n    >>> (MyTest.test4.filepath ==\n    ...  os.path.join(os.path.dirname(zope.testing.__file__), 'test4.txt'))\n    True\n    >>> MyTest.test4.filename\n    'test4.txt'\n\n    >>> MoreTests.test_loggingsupport.__name__\n    'test_loggingsupport'\n    >>> MoreTests.test_loggingsupport.filename\n    'loggingsupport.txt'\n    >>> (MoreTests.test_loggingsupport.filepath ==\n    ...  os.path.join(os.path.dirname(zope.testing.__file__),\n    ...               'loggingsupport.txt'))\n    True\n\nIn these examples, 4 constructors were used:\n\ndoctestfile (alias: file)\n  doctestfile makes a file-based test case.\n\n  This can be used as a decorator, in which case, the decorated\n  function is called before the test is run, to provide test-specific\n  setup.\n\ndoctestfiles (alias: files)\n  doctestfiles makes file-based test cases and assigns them to the\n  decorated class.\n\n  Multiple files can be specified and the resulting doctests are added\n  as members of the decorated class.\n\ndocteststring (alias string)\n  docteststring constructs a doctest from a string.\n\ndoctestmethod (alias method)\n  doctestmethod constructs a doctest from a method.\n\n  The method's docstring provides the test. The method's body provides\n  optional test-specific setup.\n\nNote that short aliases are provided, which maye be useful in certain\nimport styles.\n\nTests have access to the following data:\n\n- Tests created with the ``docteststring`` and ``doctestmethod``\n  constructors have access to the module globals of the defining\n  module.\n\n- In tests created with the ``docteststring`` and ``doctestmethod``\n  constructors, the test case instance is available as the ``self``\n  variable.\n\n- In tests created with the ``doctestfile`` and ``doctestfiles``\n  constructor, the test case instance is available as the ``test``\n  variable.\n\n- If a test case defines a globs attribute, it must be a dictionary\n  and it's contents are added to the test globals.\n\nThe constructors accept standard doctest ``optionflags`` and\n``checker`` arguments.\n\nNote that the doctest IGNORE_EXCEPTION_DETAIL option flag is\nadded to optionflags.\n\nWhen using ``doctestfile`` and ``doctestfile``, ``filename`` and\n``filepath`` attributes are available that contain the test file name\nand full path.\n\n``__name__`` attributes of class members\n----------------------------------------\n\nClass members have ``__name__`` attributes set as follows:\n\n- When using ``doctestmethod`` or ``doctestfile`` with a setup\n  function, ``__name__`` attribute is set to the name of the function.\n  A ``test_`` prefix is added, if the name doesn't start with ``test``.\n\n- When ``doctestfile`` is used without a setup function or when\n  ``doctestfiles`` is used, ``__name__`` is set to the last part of the\n  file path with the extension removed and non-word characters\n  converted to underscores. For example, with a test path of\n  ``'/foo/bar/test-it.rst'``, the ``__name__`` attribute is set to\n  ``'test_it'``.  A ``test_`` prefix is added, if the name doesn't\n  start with ``test``.\n\n- when using ``docteststring``, a ``name`` option can be passed in to\n  set ``__name__``.  A ``test_`` prefix is added, if the name doesn't\n  start with ``test``.\n\nThe ``__name__`` attribute is important when using nose, because nose\ndiscovers tests as class members using their ``__name__`` attributes,\nwhereas the unittest and py.test test runners use class dictionary keys.\n\n.. Let's look at some failure cases:\n\n    >>> class MyTest(unittest.TestCase):\n    ...\n    ...     test2 = doctestcase.string('''\n    ...     >>> 1\n    ...     1\n    ...     >>> 1 + 1\n    ...     1\n    ...     ''', name='test2')\n    ...\n    ...     @doctestcase.method\n    ...     def test3(self):\n    ...         '''\n    ...         >>> self.x\n    ...         3\n    ...         >>> 1 + 1\n    ...         1\n    ...         '''\n    ...         self.x = 3\n    ...\n    ...     @doctestcase.file('test4f.txt')\n    ...     def test4(self):\n    ...         self.x = 5\n\n    >>> suite = loader.loadTestsFromTestCase(MyTest)\n    >>> result = suite.run(unittest.TextTestResult(sys.stdout, True, 1))\n    FFF\n    >>> for c, e in result.failures:\n    ...     print(e) # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n    Traceback (most recent call last):\n      ...\n    ...: Failed doctest test for <string>\n      File \"<string>\", line 0, in <string>\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"<string>\", line 4, in <string>\n    Failed example:\n        1 + 1\n    Expected:\n        1\n    Got:\n        2\n    <BLANKLINE>\n    <BLANKLINE>\n    Traceback (most recent call last):\n      ...\n    ...: Failed doctest test for test3\n      File \"None\", line 10, in test3\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    Line 4, in test3\n    Failed example:\n        1 + 1\n    Expected:\n        1\n    Got:\n        2\n    <BLANKLINE>\n    <BLANKLINE>\n    Traceback (most recent call last):\n    ...\n    ...: Failed doctest test for test4f.txt\n      File \"...test4f.txt\", line 0, in txt\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"...test4f.txt\", line 3, in test4f.txt\n    Failed example:\n        1 + 1\n    Expected:\n        1\n    Got:\n        2\n    <BLANKLINE>\n    <BLANKLINE>\n\n    Check string meta data:\n\n    >>> MyTest.test2.__name__\n    'test2'\n\n.. Verify setting optionflags and checker\n\n    >>> class EasyChecker:\n    ...     def check_output(self, want, got, optionflags):\n    ...         return True\n    ...     def output_difference(self, example, got, optionflags):\n    ...         return ''\n\n    >>> class MyTest(unittest.TestCase):\n    ...\n    ...     test2 = doctestcase.string('''\n    ...     >>> 1\n    ...     2\n    ...     ''', checker=EasyChecker())\n    ...\n    ...     @doctestcase.method(optionflags=doctest.ELLIPSIS)\n    ...     def test3(self):\n    ...         '''\n    ...         >>> 'Hello'\n    ...         '...'\n    ...         '''\n    ...\n    ...     @doctestcase.file('test4e.txt', optionflags=doctest.ELLIPSIS)\n    ...     def test4(self):\n    ...         self.x = 5\n\n    >>> suite = loader.loadTestsFromTestCase(MyTest)\n    >>> result = suite.run(unittest.TextTestResult(sys.stdout, True, 2))\n    test2 (tests.MyTest) ... ok\n    test3 (tests.MyTest) ... ok\n    test4 (tests.MyTest) ... ok\n\n.. test __name__ variations\n\n    >>> class MyTest(unittest.TestCase):\n    ...\n    ...     foo = doctestcase.string('''>>> 1''', name='foo')\n    ...\n    ...     @doctestcase.method\n    ...     def bar(self):\n    ...         '''\n    ...         >>> self.x\n    ...         3\n    ...         '''\n    ...     @doctestcase.file('test4f.txt')\n    ...     def baz(self):\n    ...         pass\n    ...     wait = doctestcase.file('wait.txt')\n\n    >>> MyTest.foo.__name__\n    'test_foo'\n    >>> MyTest.bar.__name__\n    'test_bar'\n    >>> MyTest.baz.__name__\n    'test_baz'\n    >>> MyTest.wait.__name__\n    'test_wait'\n\n\nChanges\n=======\n\n4.7 (2018-10-04)\n----------------\n\n- Added support for Python 3.7.\n\n\n4.6.2 (2017-06-12)\n------------------\n\n- Remove dependencies on ``zope.interface`` and ``zope.exceptions``;\n  they're not used here.\n\n- Remove use of 2to3 for outdated versions of PyPy3, letting us build\n  universal wheels.\n\n\n4.6.1 (2017-01-04)\n------------------\n\n- Add support for Python 3.6.\n\n\n4.6.0 (2016-10-20)\n------------------\n\n- Introduce option flag ``IGNORE_EXCEPTION_MODULE_IN_PYTHON2`` to normalize\n  exception class names in traceback output. In Python 3 they are displayed as\n  the full dotted name. In Python 2 they are displayed as \"just\" the class\n  name.  When running doctests in Python 3, the option flag will not have any\n  effect, however when running the same test in Python 2, the segments in the\n  full dotted name leading up to the class name are stripped away from the\n  \"expected\" string.\n\n- Drop support for Python 2.6 and 3.2.\n\n- Add support for Python 3.5.\n\n- Cleaned up useless 2to3 conversion.\n\n4.5.0 (2015-09-02)\n------------------\n\n- Added meta data for test case methods created with\n  ``zope.testing.doctestcase``.\n\n  - Reasonable values for ``__name__``, making sure that ``__name__``\n    starts with ``test``.\n\n  - For ``doctestfile`` methods, provide ``filename`` and ``filepath``\n    attributes.\n\n  The meta data us useful, for example, for selecting tests with the\n  nose attribute mechanism.\n\n- Added ``doctestcase.doctestfiles``\n\n  - Define multiple doctest files at once.\n\n  - Automatically assign test class members.  So rather than::\n\n      class MYTests(unittest.TestCase):\n          ...\n          test_foo = doctestcase.doctestfile('foo.txt')\n\n    You can use::\n\n      @doctestcase.doctestfiles('foo.txt', 'bar.txt', ...)\n      class MYTests(unittest.TestCase):\n          ...\n\n4.4.0 (2015-07-16)\n------------------\n\n- Added ``zope.testing.setupstack.mock`` as a convenience function for\n  setting up mocks in tests.  (The Python ``mock`` package must be in\n  the path for this to work. The excellent ``mock`` package isn't a\n  dependency of ``zope.testing``.)\n\n- Added the base class ``zope.testing.setupstack.TestCase`` to make it\n  much easier to use ``zope.testing.setupstack`` in ``unittest`` test\n  cases.\n\n\n4.3.0 (2015-07-15)\n------------------\n\n- Added support for creating doctests as methods of\n  ``unittest.TestCase`` classes so that they can found automatically\n  by test runners, like *nose* that ignore test suites.\n\n4.2.0 (2015-06-01)\n------------------\n\n- **Actually** remove long-deprecated ``zope.testing.doctest`` (announced as\n  removed in 4.0.0) and ``zope.testing.doctestunit``.\n\n- Add support for PyPy and PyPy3.\n\n4.1.3 (2014-03-19)\n------------------\n\n- Add support for Python 3.4.\n\n- Update ``boostrap.py`` to version 2.2.\n\n4.1.2 (2013-02-19)\n------------------\n\n- Adjust Trove classifiers to reflect the currently supported Python\n  versions. Officially drop Python 2.4 and 2.5. Add Python 3.3.\n\n- LP: #1055720: Fix failing test on Python 3.3 due to changed exception\n  messaging.\n\n4.1.1 (2012-02-01)\n------------------\n\n- Fix: Windows test failure.\n\n4.1.0 (2012-01-29)\n------------------\n\n- Add context-manager support to ``zope.testing.setupstack``\n\n- Make ``zope.testing.setupstack`` usable with all tests, not just\n  doctests and added ``zope.testing.setupstack.globs``, which makes it\n  easier to write test setup code that workes with doctests and other\n  kinds of tests.\n\n- Add the ``wait`` module, which makes it easier to deal with\n  non-deterministic timing issues.\n\n- Rename ``zope.testing.renormalizing.RENormalizing`` to\n  ``zope.testing.renormalizing.OutputChecker``. The old name is an\n  alias.\n\n- Update tests to run with Python 3.\n\n- Label more clearly which features are supported by Python 3.\n\n- Reorganize documentation.\n\n4.0.0 (2011-11-09)\n------------------\n\n- Remove the deprecated ``zope.testing.doctest``.\n\n- Add Python 3 support.\n\n- Fix test which fails if there is a file named `Data.fs` in the current\n  working directory.\n\n\n3.10.2 (2010-11-30)\n-------------------\n\n- Fix test of broken symlink handling to not break on Windows.\n\n\n3.10.1 (2010-11-29)\n-------------------\n\n- Fix removal of broken symlinks on Unix.\n\n\n3.10.0 (2010-07-21)\n-------------------\n\n- Remove ``zope.testing.testrunner``, which now is moved to zope.testrunner.\n\n- Update fix for LP #221151 to a spelling compatible with Python 2.4.\n\n3.9.5 (2010-05-19)\n------------------\n\n- LP #579019: When layers are run in parallel, ensure that each ``tearDown``\n  is called, including the first layer which is run in the main\n  thread.\n\n- Deprecate ``zope.testing.testrunner`` and ``zope.testing.exceptions``.\n  They have been moved to a separate zope.testrunner module, and will be\n  removed from zope.testing in 4.0.0, together with ``zope.testing.doctest``.\n\n3.9.4 (2010-04-13)\n------------------\n\n- LP #560259: Fix subunit output formatter to handle layer setup\n  errors.\n\n- LP #399394:  Add a ``--stop-on-error`` / ``--stop`` / ``-x`` option to\n  the testrunner.\n\n- LP #498162:  Add a ``--pdb`` alias for the existing ``--post-mortem``\n  / ``-D`` option to the testrunner.\n\n- LP #547023:  Add a ``--version`` option to the testrunner.\n\n- Add tests for LP #144569 and #69988.\n\n  https://bugs.launchpad.net/bugs/69988\n\n  https://bugs.launchpad.net/zope3/+bug/144569\n\n\n3.9.3 (2010-03-26)\n------------------\n\n- Remove import of ``zope.testing.doctest`` from ``zope.testing.renormalizer``.\n\n- Suppress output to ``sys.stderr`` in ``testrunner-layers-ntd.txt``.\n\n- Suppress ``zope.testing.doctest`` deprecation warning when running\n  our own test suite.\n\n\n3.9.2 (2010-03-15)\n------------------\n\n- Fix broken ``from zope.testing.doctest import *``\n\n3.9.1 (2010-03-15)\n------------------\n\n- No changes; reupload to fix broken 3.9.0 release on PyPI.\n\n3.9.0 (2010-03-12)\n------------------\n\n- Modify the testrunner to use the standard Python ``doctest`` module instead\n  of the deprecated ``zope.testing.doctest``.\n\n- Fix ``testrunner-leaks.txt`` to use the ``run_internal`` helper, so that\n  ``sys.exit`` isn't triggered during the test run.\n\n- Add support for conditionally using a subunit-based output\n  formatter upon request if subunit and testtools are available. Patch\n  contributed by Jonathan Lange.\n\n3.8.7 (2010-01-26)\n------------------\n\n- Downgrade the ``zope.testing.doctest`` deprecation warning into a\n  PendingDeprecationWarning.\n\n3.8.6 (2009-12-23)\n------------------\n\n- Add ``MANIFEST.in`` and reupload to fix broken 3.8.5 release on PyPI.\n\n\n3.8.5 (2009-12-23)\n------------------\n\n- Add back ``DocFileSuite``, ``DocTestSuite``, ``debug_src`` and ``debug``\n  BBB imports back into ``zope.testing.doctestunit``; apparently many packages\n  still import them from there!\n\n- Deprecate ``zope.testing.doctest`` and ``zope.testing.doctestunit``\n  in favor of the stdlib ``doctest`` module.\n\n\n3.8.4 (2009-12-18)\n------------------\n\n- Fix missing imports and undefined variables reported by pyflakes,\n  adding tests to exercise the blind spots.\n\n- Cleaned up unused imports reported by pyflakes.\n\n- Add two new options to generate randomly ordered list of tests and to\n  select a specific order of tests.\n\n- Allow combining RENormalizing checkers via ``+`` now:\n  ``checker1 + checker2`` creates a checker with the transformations of both\n  checkers.\n\n- Fix tests under Python 2.7.\n\n3.8.3 (2009-09-21)\n------------------\n\n- Fix test failures due to using ``split()`` on filenames when running from a\n  directory with spaces in it.\n\n- Fix testrunner behavior on Windows for ``-j2`` (or greater) combined with\n  ``-v`` (or greater).\n\n3.8.2 (2009-09-15)\n------------------\n\n- Remove hotshot profiler when using Python 2.6. That makes zope.testing\n  compatible with Python 2.6\n\n\n3.8.1 (2009-08-12)\n------------------\n\n- Avoid hardcoding ``sys.argv[0]`` as script;\n  allow, for instance, Zope 2's `bin/instance test` (LP#407916).\n\n- Produce a clear error message when a subprocess doesn't follow the\n  ``zope.testing.testrunner`` protocol (LP#407916).\n\n- Avoid unnecessarily squelching verbose output in a subprocess when there are\n  not multiple subprocesses.\n\n- Avoid unnecessarily batching subprocess output, which can stymie automated\n  and human processes for identifying hung tests.\n\n- Include incremental output when there are multiple subprocesses and a\n  verbosity of ``-vv`` or greater is requested.  This again is not batched,\n  supporting automated processes and humans looking for hung tests.\n\n\n3.8.0 (2009-07-24)\n------------------\n\n- Allow testrunner to include descendants of ``unittest.TestCase`` in test\n  modules, which no longer need to provide ``test_suite()``.\n\n\n3.7.7 (2009-07-15)\n------------------\n\n- Clean up support for displaying tracebacks with supplements by turning it\n  into an always-enabled feature and making the dependency on\n  ``zope.exceptions`` explicit.\n\n- Fix #251759: prevent the testrunner descending into directories that\n  aren't Python packages.\n\n- Code cleanups.\n\n\n3.7.6 (2009-07-02)\n------------------\n\n- Add zope-testrunner ``console_scripts`` entry point. This exposes a\n  ``zope-testrunner`` script with default installs allowing the testrunner\n  to be run from the command line.\n\n3.7.5 (2009-06-08)\n------------------\n\n- Fix bug when running subprocesses on Windows.\n\n- The option ``REPORT_ONLY_FIRST_FAILURE`` (command line option \"-1\") is now\n  respected even when a doctest declares its own ``REPORTING_FLAGS``, such as\n  ``REPORT_NDIFF``.\n\n- Fix bug that broke readline with pdb when using doctest\n  (see http://bugs.python.org/issue5727).\n\n- Make tests pass on Windows and Linux at the same time.\n\n\n3.7.4 (2009-05-01)\n------------------\n\n- Filenames of doctest examples now contain the line number and not\n  only the example number. So a stack trace in pdb tells the exact\n  line number of the current example. This fixes\n  https://bugs.launchpad.net/bugs/339813\n\n- Colorization of doctest output correctly handles blank lines.\n\n\n3.7.3 (2009-04-22)\n------------------\n\n- Improve handling of rogue threads:  always exit with status so even\n  spinning daemon threads won't block the runner from exiting. This deprecated\n  the ``--with-exit-status`` option.\n\n\n3.7.2 (2009-04-13)\n------------------\n\n- Fix test failure on Python 2.4 due to slight difference in the way\n  coverage is reported (__init__ files with only a single comment line are now\n  not reported)\n\n- Fix bug that caused the test runner to hang when running subprocesses (as a\n  result Python 2.3 is no longer supported).\n\n- Work around a bug in Python 2.6 (related to\n  http://bugs.python.org/issue1303673) that causes the profile tests to fail.\n\n- Add explanitory notes to ``buildout.cfg`` about how to run the tests with\n  multiple versions of Python\n\n\n3.7.1 (2008-10-17)\n------------------\n\n- The ``setupstack`` temporary directory support now properly handles\n  read-only files by making them writable before removing them.\n\n\n3.7.0 (2008-09-22)\n------------------\n\n- Add alterate setuptools / distutils commands for running all tests\n  using our testrunner.  See 'zope.testing.testrunner.eggsupport:ftest'.\n\n- Add a setuptools-compatible test loader which skips tests with layers:\n  the testrunner used by ``setup.py test`` doesn't know about them, and those\n  tests then fail.  See ``zope.testing.testrunner.eggsupport:SkipLayers``.\n\n- Add support for Jython, when a garbage collector call is sent.\n\n- Add support to bootstrap on Jython.\n\n- Fix NameError in StartUpFailure.\n\n- Open doctest files in universal mode, so that packages released on Windows\n  can be tested on Linux, for example.\n\n\n3.6.0 (2008-07-10)\n------------------\n\n- Add ``-j`` option to parallel tests run in subprocesses.\n\n- RENormalizer accepts plain Python callables.\n\n- Add ``--slow-test`` option.\n\n- Add ``--no-progress`` and ``--auto-progress`` options.\n\n- Complete refactoring of the test runner into multiple code files and a more\n  modular (pipeline-like) architecture.\n\n- Unify unit tests with the layer support by introducing a real unit test\n  layer.\n\n- Add a doctest for ``zope.testing.module``. There were several bugs\n  that were fixed:\n\n  * ``README.txt`` was a really bad default argument for the module\n    name, as it is not a proper dotted name. The code would\n    immediately fail as it would look for the ``txt`` module in the\n    ``README`` package. The default is now ``__main__``.\n\n  * The ``tearDown`` function did not clean up the ``__name__`` entry in the\n    global dictionary.\n\n- Fix a bug that caused a SubprocessError to be generated if a subprocess\n  sent any output to stderr.\n\n- Fix a bug that caused the unit tests to be skipped if run in a subprocess.\n\n\n3.5.1 (2007-08-14)\n------------------\n\n- Invoke post-mortem debugging for layer-setup failures.\n\n3.5.0 (2007-07-19)\n------------------\n\n- Ensure that the test runner works on Python 2.5.\n\n- Add support for ``cProfile``.\n\n- Add output colorizing (``-c`` option).\n\n- Add ``--hide-secondary-failures`` and ``--show-secondary-failures`` options\n  (https://bugs.launchpad.net/zope3/+bug/115454).\n\n- Fix some problems with Unicode in doctests.\n\n- Fix \"Error reading from subprocess\" errors on Unix-like systems.\n\n3.4 (2007-03-29)\n----------------\n\n- Add ``exit-with-status`` support (supports use with buildbot and\n  ``zc.recipe.testing``)\n\n- Add a small framework for automating set up and tear down of\n  doctest tests. See ``setupstack.txt``.\n\n- Allow ``testrunner-wo-source.txt`` and ``testrunner-errors.txt`` to run\n  within a read-only source tree.\n\n3.0 (2006-09-20)\n----------------\n\n- Update the doctest copy with text-file encoding support.\n\n- Add logging-level support to the ``loggingsuppport`` module.\n\n- At verbosity-level 1, dots are not output continuously, without any\n  line breaks.\n\n- Improve output when the inability to tear down a layer causes tests\n  to be run in a subprocess.\n\n- Make ``zope.exception`` required only if the ``zope_tracebacks`` extra is\n  requested.\n\n- Fix the test coverage. If a module, for example `interfaces`, was in an\n  ignored directory/package, then if a module of the same name existed in a\n  covered directory/package, then it was also ignored there, because the\n  ignore cache stored the result by module name and not the filename of the\n  module.\n\n2.0 (2006-01-05)\n----------------\n\n- Release a separate project corresponding to the version of ``zope.testing``\n  shipped as part of the Zope 3.2.0 release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zopefoundation/zope.testing", "keywords": "zope testing doctest RENormalizing OutputChecker timeout logging", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "zope.testing", "package_url": "https://pypi.org/project/zope.testing/", "platform": "", "project_url": "https://pypi.org/project/zope.testing/", "project_urls": {"Homepage": "https://github.com/zopefoundation/zope.testing"}, "release_url": "https://pypi.org/project/zope.testing/4.7/", "requires_dist": ["setuptools"], "requires_python": "", "summary": "Zope testing helpers", "version": "4.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/zope.testing/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/977365c2359b7ce8f2ceb60ab3f56d01a66e8f79/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7a6f70652e74657374696e672e737667\"></a>\n<a href=\"https://travis-ci.org/zopefoundation/zope.testing\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/zopefoundation/zope.testing.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47aff174e402417c5df1dc545b3ff800a1e7c1ed/68747470733a2f2f7472617669732d63692e6f72672f7a6f7065666f756e646174696f6e2f7a6f70652e74657374696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://zopetesting.readthedocs.org/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f669fbc74020d159c363ab3cca69021dc650ff17/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7a6f706574657374696e672f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>This package provides a number of testing frameworks.</p>\n<dl>\n<dt>cleanup</dt>\n<dd>Provides a mixin class for cleaning up after tests that\nmake global changes.</dd>\n<dt>formparser</dt>\n<dd><p>An HTML parser that extracts form information.</p>\n<p><strong>Python 2 only</strong></p>\n<p>This is intended to support functional tests that need to extract\ninformation from HTML forms returned by the publisher.</p>\n<p>See formparser.txt.</p>\n</dd>\n<dt>loggingsupport</dt>\n<dd><p>Support for testing logging code</p>\n<p>If you want to test that your code generates proper log output, you\ncan create and install a handler that collects output.</p>\n</dd>\n<dt>loghandler</dt>\n<dd>Logging handler for tests that check logging output.</dd>\n<dt>module</dt>\n<dd><p>Lets a doctest pretend to be a Python module.</p>\n<p>See module.txt.</p>\n</dd>\n<dt>renormalizing</dt>\n<dd>Regular expression pattern normalizing output checker.\nUseful for doctests.</dd>\n<dt>server</dt>\n<dd><p>Provides a simple HTTP server compatible with the zope.app.testing\nfunctional testing API.  Lets you interactively play with the system\nunder test.  Helpful in debugging functional doctest failures.</p>\n<p><strong>Python 2 only</strong></p>\n</dd>\n<dt>setupstack</dt>\n<dd>A simple framework for automating doctest set-up and tear-down.\nSee setupstack.txt.</dd>\n<dt>wait</dt>\n<dd>A small utility for dealing with timing non-determinism\nSee wait.txt.</dd>\n<dt>doctestcase</dt>\n<dd>Support for defining doctests as methods of <tt>unittest.TestCase</tt>\nclasses so that they can be more easily found by test runners, like\nnose, that ignore test suites.</dd>\n</dl>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#getting-started-developing-zope-testing\" id=\"id45\" rel=\"nofollow\">Getting started developing zope.testing</a></li>\n<li><a href=\"#parsing-html-forms\" id=\"id46\" rel=\"nofollow\">Parsing HTML Forms</a></li>\n<li><a href=\"#support-for-testing-logging-code\" id=\"id47\" rel=\"nofollow\">Support for testing logging code</a></li>\n<li><a href=\"#regular-expression-pattern-normalizing-output-checker\" id=\"id48\" rel=\"nofollow\">Regular expression pattern normalizing output checker</a></li>\n<li><a href=\"#stack-based-test-setup-and-teardown\" id=\"id49\" rel=\"nofollow\">Stack-based test setUp and tearDown</a><ul>\n<li><a href=\"#temporary-test-directory\" id=\"id50\" rel=\"nofollow\">Temporary Test Directory</a></li>\n<li><a href=\"#context-manager-support\" id=\"id51\" rel=\"nofollow\">Context-manager support</a></li>\n<li><a href=\"#globs\" id=\"id52\" rel=\"nofollow\">globs</a></li>\n<li><a href=\"#testcase\" id=\"id53\" rel=\"nofollow\">TestCase</a></li>\n</ul>\n</li>\n<li><a href=\"#wait-until-a-condition-holds-or-until-a-time-out\" id=\"id54\" rel=\"nofollow\">Wait until a condition holds (or until a time out)</a><ul>\n<li><a href=\"#customization\" id=\"id55\" rel=\"nofollow\">Customization</a></li>\n</ul>\n</li>\n<li><a href=\"#doctests-in-testcase-classes\" id=\"id56\" rel=\"nofollow\">Doctests in TestCase classes</a><ul>\n<li><a href=\"#name-attributes-of-class-members\" id=\"id57\" rel=\"nofollow\"><tt>__name__</tt> attributes of class members</a></li>\n</ul>\n</li>\n<li><a href=\"#changes\" id=\"id58\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#id1\" id=\"id59\" rel=\"nofollow\">4.7 (2018-10-04)</a></li>\n<li><a href=\"#id2\" id=\"id60\" rel=\"nofollow\">4.6.2 (2017-06-12)</a></li>\n<li><a href=\"#id3\" id=\"id61\" rel=\"nofollow\">4.6.1 (2017-01-04)</a></li>\n<li><a href=\"#id4\" id=\"id62\" rel=\"nofollow\">4.6.0 (2016-10-20)</a></li>\n<li><a href=\"#id5\" id=\"id63\" rel=\"nofollow\">4.5.0 (2015-09-02)</a></li>\n<li><a href=\"#id6\" id=\"id64\" rel=\"nofollow\">4.4.0 (2015-07-16)</a></li>\n<li><a href=\"#id7\" id=\"id65\" rel=\"nofollow\">4.3.0 (2015-07-15)</a></li>\n<li><a href=\"#id8\" id=\"id66\" rel=\"nofollow\">4.2.0 (2015-06-01)</a></li>\n<li><a href=\"#id9\" id=\"id67\" rel=\"nofollow\">4.1.3 (2014-03-19)</a></li>\n<li><a href=\"#id10\" id=\"id68\" rel=\"nofollow\">4.1.2 (2013-02-19)</a></li>\n<li><a href=\"#id11\" id=\"id69\" rel=\"nofollow\">4.1.1 (2012-02-01)</a></li>\n<li><a href=\"#id12\" id=\"id70\" rel=\"nofollow\">4.1.0 (2012-01-29)</a></li>\n<li><a href=\"#id13\" id=\"id71\" rel=\"nofollow\">4.0.0 (2011-11-09)</a></li>\n<li><a href=\"#id14\" id=\"id72\" rel=\"nofollow\">3.10.2 (2010-11-30)</a></li>\n<li><a href=\"#id15\" id=\"id73\" rel=\"nofollow\">3.10.1 (2010-11-29)</a></li>\n<li><a href=\"#id16\" id=\"id74\" rel=\"nofollow\">3.10.0 (2010-07-21)</a></li>\n<li><a href=\"#id17\" id=\"id75\" rel=\"nofollow\">3.9.5 (2010-05-19)</a></li>\n<li><a href=\"#id18\" id=\"id76\" rel=\"nofollow\">3.9.4 (2010-04-13)</a></li>\n<li><a href=\"#id19\" id=\"id77\" rel=\"nofollow\">3.9.3 (2010-03-26)</a></li>\n<li><a href=\"#id20\" id=\"id78\" rel=\"nofollow\">3.9.2 (2010-03-15)</a></li>\n<li><a href=\"#id21\" id=\"id79\" rel=\"nofollow\">3.9.1 (2010-03-15)</a></li>\n<li><a href=\"#id22\" id=\"id80\" rel=\"nofollow\">3.9.0 (2010-03-12)</a></li>\n<li><a href=\"#id23\" id=\"id81\" rel=\"nofollow\">3.8.7 (2010-01-26)</a></li>\n<li><a href=\"#id24\" id=\"id82\" rel=\"nofollow\">3.8.6 (2009-12-23)</a></li>\n<li><a href=\"#id25\" id=\"id83\" rel=\"nofollow\">3.8.5 (2009-12-23)</a></li>\n<li><a href=\"#id26\" id=\"id84\" rel=\"nofollow\">3.8.4 (2009-12-18)</a></li>\n<li><a href=\"#id27\" id=\"id85\" rel=\"nofollow\">3.8.3 (2009-09-21)</a></li>\n<li><a href=\"#id28\" id=\"id86\" rel=\"nofollow\">3.8.2 (2009-09-15)</a></li>\n<li><a href=\"#id29\" id=\"id87\" rel=\"nofollow\">3.8.1 (2009-08-12)</a></li>\n<li><a href=\"#id30\" id=\"id88\" rel=\"nofollow\">3.8.0 (2009-07-24)</a></li>\n<li><a href=\"#id31\" id=\"id89\" rel=\"nofollow\">3.7.7 (2009-07-15)</a></li>\n<li><a href=\"#id32\" id=\"id90\" rel=\"nofollow\">3.7.6 (2009-07-02)</a></li>\n<li><a href=\"#id33\" id=\"id91\" rel=\"nofollow\">3.7.5 (2009-06-08)</a></li>\n<li><a href=\"#id34\" id=\"id92\" rel=\"nofollow\">3.7.4 (2009-05-01)</a></li>\n<li><a href=\"#id35\" id=\"id93\" rel=\"nofollow\">3.7.3 (2009-04-22)</a></li>\n<li><a href=\"#id36\" id=\"id94\" rel=\"nofollow\">3.7.2 (2009-04-13)</a></li>\n<li><a href=\"#id37\" id=\"id95\" rel=\"nofollow\">3.7.1 (2008-10-17)</a></li>\n<li><a href=\"#id38\" id=\"id96\" rel=\"nofollow\">3.7.0 (2008-09-22)</a></li>\n<li><a href=\"#id39\" id=\"id97\" rel=\"nofollow\">3.6.0 (2008-07-10)</a></li>\n<li><a href=\"#id40\" id=\"id98\" rel=\"nofollow\">3.5.1 (2007-08-14)</a></li>\n<li><a href=\"#id41\" id=\"id99\" rel=\"nofollow\">3.5.0 (2007-07-19)</a></li>\n<li><a href=\"#id42\" id=\"id100\" rel=\"nofollow\">3.4 (2007-03-29)</a></li>\n<li><a href=\"#id43\" id=\"id101\" rel=\"nofollow\">3.0 (2006-09-20)</a></li>\n<li><a href=\"#id44\" id=\"id102\" rel=\"nofollow\">2.0 (2006-01-05)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"getting-started-developing-zope-testing\">\n<h2><a href=\"#id45\" rel=\"nofollow\">Getting started developing zope.testing</a></h2>\n<p>zope.testing uses buildout.  To start, run <tt>python bootstrap.py</tt>.  It will\ncreate a number of directories and the <tt>bin/buildout</tt> script.  Next, run\n<tt>bin/buildout</tt>.  It will create a test script for you.  Now, run <tt>bin/test</tt>\nto run the zope.testing test suite.</p>\n</div>\n<div id=\"parsing-html-forms\">\n<h2><a href=\"#id46\" rel=\"nofollow\">Parsing HTML Forms</a></h2>\n<p>Sometimes in functional tests, information from a generated form must\nbe extracted in order to re-submit it as part of a subsequent request.\nThe <cite>zope.testing.formparser</cite> module can be used for this purpose.</p>\n<dl>\n<dt>NOTE</dt>\n<dd>formparser doesn\u2019t support Python 3.</dd>\n</dl>\n<p>The scanner is implemented using the <cite>FormParser</cite> class.  The\nconstructor arguments are the page data containing the form and\n(optionally) the URL from which the page was retrieved:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.testing.formparser\n</pre>\n<pre>&gt;&gt;&gt; page_text = '''\\\n... &lt;html&gt;&lt;body&gt;\n...   &lt;form name=\"form1\" action=\"/cgi-bin/foobar.py\" method=\"POST\"&gt;\n...     &lt;input type=\"hidden\" name=\"f1\" value=\"today\" /&gt;\n...     &lt;input type=\"submit\" name=\"do-it-now\" value=\"Go for it!\" /&gt;\n...     &lt;input type=\"IMAGE\" name=\"not-really\" value=\"Don't.\"\n...            src=\"dont.png\" /&gt;\n...     &lt;select name=\"pick-two\" size=\"3\" multiple&gt;\n...       &lt;option value=\"one\" selected&gt;First&lt;/option&gt;\n...       &lt;option value=\"two\" label=\"Second\"&gt;Another&lt;/option&gt;\n...       &lt;optgroup&gt;\n...         &lt;option value=\"three\"&gt;Third&lt;/option&gt;\n...         &lt;option selected=\"selected\"&gt;Fourth&lt;/option&gt;\n...       &lt;/optgroup&gt;\n...     &lt;/select&gt;\n...   &lt;/form&gt;\n...\n...   Just for fun, a second form, after specifying a base:\n...   &lt;base href=\"http://www.example.com/base/\" /&gt;\n...   &lt;form action = 'sproing/sprung.html' enctype=\"multipart/form\"&gt;\n...     &lt;textarea name=\"sometext\" rows=\"5\"&gt;Some text.&lt;/textarea&gt;\n...     &lt;input type=\"Image\" name=\"action\" value=\"Do something.\"\n...            src=\"else.png\" /&gt;\n...     &lt;input type=\"text\" value=\"\" name=\"multi\" size=\"2\" /&gt;\n...     &lt;input type=\"text\" value=\"\" name=\"multi\" size=\"3\" /&gt;\n...   &lt;/form&gt;\n... &lt;/body&gt;&lt;/html&gt;\n... '''\n</pre>\n<pre>&gt;&gt;&gt; parser = zope.testing.formparser.FormParser(page_text)\n&gt;&gt;&gt; forms = parser.parse()\n</pre>\n<pre>&gt;&gt;&gt; len(forms)\n2\n&gt;&gt;&gt; forms.form1 is forms[0]\nTrue\n&gt;&gt;&gt; forms.form1 is forms[1]\nFalse\n</pre>\n</blockquote>\n<p>More often, the <cite>parse()</cite> convenience function is all that\u2019s needed:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; forms = zope.testing.formparser.parse(\n...     page_text, \"http://cgi.example.com/somewhere/form.html\")\n</pre>\n<pre>&gt;&gt;&gt; len(forms)\n2\n&gt;&gt;&gt; forms.form1 is forms[0]\nTrue\n&gt;&gt;&gt; forms.form1 is forms[1]\nFalse\n</pre>\n</blockquote>\n<p>Once we have the form we\u2019re interested in, we can check form\nattributes and individual field values:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; form = forms.form1\n&gt;&gt;&gt; form.enctype\n'application/x-www-form-urlencoded'\n&gt;&gt;&gt; form.method\n'post'\n</pre>\n<pre>&gt;&gt;&gt; keys = form.keys()\n&gt;&gt;&gt; keys.sort()\n&gt;&gt;&gt; keys\n['do-it-now', 'f1', 'not-really', 'pick-two']\n</pre>\n<pre>&gt;&gt;&gt; not_really = form[\"not-really\"]\n&gt;&gt;&gt; not_really.type\n'image'\n&gt;&gt;&gt; not_really.value\n\"Don't.\"\n&gt;&gt;&gt; not_really.readonly\nFalse\n&gt;&gt;&gt; not_really.disabled\nFalse\n</pre>\n</blockquote>\n<p>Note that relative URLs are converted to absolute URLs based on the\n<tt>&lt;base&gt;</tt> element (if present) or using the base passed in to the\nconstructor.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; form.action\n'http://cgi.example.com/cgi-bin/foobar.py'\n&gt;&gt;&gt; not_really.src\n'http://cgi.example.com/somewhere/dont.png'\n</pre>\n<pre>&gt;&gt;&gt; forms[1].action\n'http://www.example.com/base/sproing/sprung.html'\n&gt;&gt;&gt; forms[1][\"action\"].src\n'http://www.example.com/base/else.png'\n</pre>\n</blockquote>\n<p>Fields which are repeated are reported as lists of objects that\nrepresent each instance of the field:</p>\n<pre>&gt;&gt;&gt; field = forms[1][\"multi\"]\n&gt;&gt;&gt; isinstance(field, list)\nTrue\n&gt;&gt;&gt; [o.value for o in field]\n['', '']\n&gt;&gt;&gt; [o.size for o in field]\n[2, 3]\n</pre>\n<p>The <tt>&lt;textarea&gt;</tt> element provides some additional attributes:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ta = forms[1][\"sometext\"]\n&gt;&gt;&gt; print ta.rows\n5\n&gt;&gt;&gt; print ta.cols\nNone\n&gt;&gt;&gt; ta.value\n'Some text.'\n</pre>\n</blockquote>\n<p>The <tt>&lt;select&gt;</tt> element provides access to the options as well:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; select = form[\"pick-two\"]\n&gt;&gt;&gt; select.multiple\nTrue\n&gt;&gt;&gt; select.size\n3\n&gt;&gt;&gt; select.type\n'select'\n&gt;&gt;&gt; select.value\n['one', 'Fourth']\n</pre>\n<pre>&gt;&gt;&gt; options = select.options\n&gt;&gt;&gt; len(options)\n4\n&gt;&gt;&gt; [opt.label for opt in options]\n['First', 'Second', 'Third', 'Fourth']\n&gt;&gt;&gt; [opt.value for opt in options]\n['one', 'two', 'three', 'Fourth']\n</pre>\n</blockquote>\n</div>\n<div id=\"support-for-testing-logging-code\">\n<h2><a href=\"#id47\" rel=\"nofollow\">Support for testing logging code</a></h2>\n<p>If you want to test that your code generates proper log output, you\ncan create and install a handler that collects output:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.testing.loggingsupport import InstalledHandler\n&gt;&gt;&gt; handler = InstalledHandler('foo.bar')\n</pre>\n</blockquote>\n<p>The handler is installed into loggers for all of the names passed. In\naddition, the logger level is set to 1, which means, log\neverything. If you want to log less than everything, you can provide a\nlevel keyword argument.  The level setting effects only the named\nloggers.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import logging\n&gt;&gt;&gt; handler_with_levels = InstalledHandler('baz', level=logging.WARNING)\n</pre>\n</blockquote>\n<p>Then, any log output is collected in the handler:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; logging.getLogger('foo.bar').exception('eek')\n&gt;&gt;&gt; logging.getLogger('foo.bar').info('blah blah')\n</pre>\n<pre>&gt;&gt;&gt; for record in handler.records:\n...     print_(record.name, record.levelname)\n...     print_(' ', record.getMessage())\nfoo.bar ERROR\n  eek\nfoo.bar INFO\n  blah blah\n</pre>\n</blockquote>\n<p>A similar effect can be gotten by just printing the handler:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print_(handler)\nfoo.bar ERROR\n  eek\nfoo.bar INFO\n  blah blah\n</pre>\n</blockquote>\n<p>After checking the log output, you need to uninstall the handler:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; handler.uninstall()\n&gt;&gt;&gt; handler_with_levels.uninstall()\n</pre>\n</blockquote>\n<p>At which point, the handler won\u2019t get any more log output.\nLet\u2019s clear the handler:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; handler.clear()\n&gt;&gt;&gt; handler.records\n[]\n</pre>\n</blockquote>\n<p>And then log something:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; logging.getLogger('foo.bar').info('blah')\n</pre>\n</blockquote>\n<p>and, sure enough, we still have no output:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; handler.records\n[]\n</pre>\n</blockquote>\n</div>\n<div id=\"regular-expression-pattern-normalizing-output-checker\">\n<h2><a href=\"#id48\" rel=\"nofollow\">Regular expression pattern normalizing output checker</a></h2>\n<p>The pattern-normalizing output checker extends the default output checker with\nan option to normalize expected and actual output.</p>\n<p>You specify a sequence of patterns and replacements.  The replacements are\napplied to the expected and actual outputs before calling the default outputs\nchecker.  Let\u2019s look at an example.  In this example, we have some times and\naddresses:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; want = '''\\\n... &lt;object object at 0xb7f14438&gt;\n... completed in 1.234 seconds.\n... &lt;BLANKLINE&gt;\n... &lt;object object at 0xb7f14440&gt;\n... completed in 123.234 seconds.\n... &lt;BLANKLINE&gt;\n... &lt;object object at 0xb7f14448&gt;\n... completed in .234 seconds.\n... &lt;BLANKLINE&gt;\n... &lt;object object at 0xb7f14450&gt;\n... completed in 1.234 seconds.\n... &lt;BLANKLINE&gt;\n... '''\n</pre>\n<pre>&gt;&gt;&gt; got = '''\\\n... &lt;object object at 0xb7f14458&gt;\n... completed in 1.235 seconds.\n...\n... &lt;object object at 0xb7f14460&gt;\n... completed in 123.233 seconds.\n...\n... &lt;object object at 0xb7f14468&gt;\n... completed in .231 seconds.\n...\n... &lt;object object at 0xb7f14470&gt;\n... completed in 1.23 seconds.\n...\n... '''\n</pre>\n</blockquote>\n<p>We may wish to consider these two strings to match, even though they differ in\nactual addresses and times.  The default output checker will consider them\ndifferent:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import doctest\n&gt;&gt;&gt; doctest.OutputChecker().check_output(want, got, 0)\nFalse\n</pre>\n</blockquote>\n<p>We\u2019ll use the zope.testing.renormalizing.OutputChecker to normalize both the\nwanted and gotten strings to ignore differences in times and\naddresses:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import re\n&gt;&gt;&gt; from zope.testing.renormalizing import OutputChecker\n&gt;&gt;&gt; checker = OutputChecker([\n...    (re.compile('[0-9]*[.][0-9]* seconds'), '&lt;SOME NUMBER OF&gt; seconds'),\n...    (re.compile('at 0x[0-9a-f]+'), 'at &lt;SOME ADDRESS&gt;'),\n...    ])\n</pre>\n<pre>&gt;&gt;&gt; checker.check_output(want, got, 0)\nTrue\n</pre>\n</blockquote>\n<p>Usual OutputChecker options work as expected:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; want_ellided = '''\\\n... &lt;object object at 0xb7f14438&gt;\n... completed in 1.234 seconds.\n... ...\n... &lt;object object at 0xb7f14450&gt;\n... completed in 1.234 seconds.\n... &lt;BLANKLINE&gt;\n... '''\n</pre>\n<pre>&gt;&gt;&gt; checker.check_output(want_ellided, got, 0)\nFalse\n</pre>\n<pre>&gt;&gt;&gt; checker.check_output(want_ellided, got, doctest.ELLIPSIS)\nTrue\n</pre>\n</blockquote>\n<p>When we get differencs, we output them with normalized text:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; source = '''\\\n... &gt;&gt;&gt; do_something()\n... &lt;object object at 0xb7f14438&gt;\n... completed in 1.234 seconds.\n... ...\n... &lt;object object at 0xb7f14450&gt;\n... completed in 1.234 seconds.\n... &lt;BLANKLINE&gt;\n... '''\n</pre>\n<pre>&gt;&gt;&gt; example = doctest.Example(source, want_ellided)\n</pre>\n<pre>&gt;&gt;&gt; print_(checker.output_difference(example, got, 0))\nExpected:\n    &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    completed in &lt;SOME NUMBER OF&gt; seconds.\n    ...\n    &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    completed in &lt;SOME NUMBER OF&gt; seconds.\n    &lt;BLANKLINE&gt;\nGot:\n    &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    completed in &lt;SOME NUMBER OF&gt; seconds.\n    &lt;BLANKLINE&gt;\n    &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    completed in &lt;SOME NUMBER OF&gt; seconds.\n    &lt;BLANKLINE&gt;\n    &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    completed in &lt;SOME NUMBER OF&gt; seconds.\n    &lt;BLANKLINE&gt;\n    &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    completed in &lt;SOME NUMBER OF&gt; seconds.\n    &lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n</pre>\n<pre>&gt;&gt;&gt; print_(checker.output_difference(example, got,\n...                                 doctest.REPORT_NDIFF))\nDifferences (ndiff with -expected +actual):\n    - &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    - completed in &lt;SOME NUMBER OF&gt; seconds.\n    - ...\n      &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n      completed in &lt;SOME NUMBER OF&gt; seconds.\n      &lt;BLANKLINE&gt;\n    + &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    + completed in &lt;SOME NUMBER OF&gt; seconds.\n    + &lt;BLANKLINE&gt;\n    + &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    + completed in &lt;SOME NUMBER OF&gt; seconds.\n    + &lt;BLANKLINE&gt;\n    + &lt;object object at &lt;SOME ADDRESS&gt;&gt;\n    + completed in &lt;SOME NUMBER OF&gt; seconds.\n    + &lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n</pre>\n<p>If the wanted text is empty, however, we don\u2019t transform the actual output.\nThis is usful when writing tests.  We leave the expected output empty, run\nthe test, and use the actual output as expected, after reviewing it.</p>\n<pre>&gt;&gt;&gt; source = '''\\\n... &gt;&gt;&gt; do_something()\n... '''\n</pre>\n<pre>&gt;&gt;&gt; example = doctest.Example(source, '\\n')\n&gt;&gt;&gt; print_(checker.output_difference(example, got, 0))\nExpected:\n&lt;BLANKLINE&gt;\nGot:\n    &lt;object object at 0xb7f14458&gt;\n    completed in 1.235 seconds.\n    &lt;BLANKLINE&gt;\n    &lt;object object at 0xb7f14460&gt;\n    completed in 123.233 seconds.\n    &lt;BLANKLINE&gt;\n    &lt;object object at 0xb7f14468&gt;\n    completed in .231 seconds.\n    &lt;BLANKLINE&gt;\n    &lt;object object at 0xb7f14470&gt;\n    completed in 1.23 seconds.\n    &lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p>If regular expressions aren\u2019t expressive enough, you can use arbitrary Python\ncallables to transform the text.  For example, suppose you want to ignore\ncase during comparison:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; checker = OutputChecker([\n...    lambda s: s.lower(),\n...    lambda s: s.replace('&lt;blankline&gt;', '&lt;BLANKLINE&gt;'),\n...    ])\n</pre>\n<pre>&gt;&gt;&gt; want = '''\\\n... Usage: thundermonkey [options] [url]\n... &lt;BLANKLINE&gt;\n... Options:\n...     -h    display this help message\n... '''\n</pre>\n<pre>&gt;&gt;&gt; got = '''\\\n... usage: thundermonkey [options] [URL]\n...\n... options:\n...     -h    Display this help message\n... '''\n</pre>\n<pre>&gt;&gt;&gt; checker.check_output(want, got, 0)\nTrue\n</pre>\n</blockquote>\n<p>Suppose we forgot that &lt;BLANKLINE&gt; must be in upper case:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; checker = OutputChecker([\n...    lambda s: s.lower(),\n...    ])\n</pre>\n<pre>&gt;&gt;&gt; checker.check_output(want, got, 0)\nFalse\n</pre>\n</blockquote>\n<p>The difference would show us that:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; source = '''\\\n... &gt;&gt;&gt; print_help_message()\n... ''' + want\n&gt;&gt;&gt; example = doctest.Example(source, want)\n&gt;&gt;&gt; print_(checker.output_difference(example, got,\n...                                 doctest.REPORT_NDIFF))\nDifferences (ndiff with -expected +actual):\n      usage: thundermonkey [options] [url]\n    - &lt;blankline&gt;\n    + &lt;BLANKLINE&gt;\n      options:\n          -h    display this help message\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p>It is possible to combine OutputChecker checkers for easy reuse:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; address_and_time_checker = OutputChecker([\n...    (re.compile('[0-9]*[.][0-9]* seconds'), '&lt;SOME NUMBER OF&gt; seconds'),\n...    (re.compile('at 0x[0-9a-f]+'), 'at &lt;SOME ADDRESS&gt;'),\n...    ])\n&gt;&gt;&gt; lowercase_checker = OutputChecker([\n...    lambda s: s.lower(),\n...    ])\n&gt;&gt;&gt; combined_checker = address_and_time_checker + lowercase_checker\n&gt;&gt;&gt; len(combined_checker.transformers)\n3\n</pre>\n</blockquote>\n<p>Combining a checker with something else does not work:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; lowercase_checker + 5 #doctest: +ELLIPSIS\nTraceback (most recent call last):\n    ...\nTypeError: unsupported operand type(s) for +: ...\n</pre>\n</blockquote>\n<p>Using the 2to3 exception normalization:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.testing.renormalizing import (\n...     IGNORE_EXCEPTION_MODULE_IN_PYTHON2)\n&gt;&gt;&gt; checker = OutputChecker()\n&gt;&gt;&gt; want = \"\"\"\\\n... Traceback (most recent call last):\n... foo.bar.FooBarError: requires at least one argument.\"\"\"\n&gt;&gt;&gt; got = \"\"\"\\\n... Traceback (most recent call last):\n... FooBarError: requires at least one argument.\"\"\"\n&gt;&gt;&gt; result = checker.check_output(\n...     want, got, IGNORE_EXCEPTION_MODULE_IN_PYTHON2)\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; if sys.version_info[0] &lt; 3:\n...     expected = True\n... else:\n...     expected = False\n&gt;&gt;&gt; result == expected\nTrue\n</pre>\n</blockquote>\n<p>When reporting a failing test and running in Python 2, the normalizer tries\nto be helpful by explaining how to test for exceptions in the traceback output.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; want = \"\"\"\\\n... Traceback (most recent call last):\n... foo.bar.FooBarErrorXX: requires at least one argument.\n... \"\"\"\n&gt;&gt;&gt; got = \"\"\"\\\n... Traceback (most recent call last):\n... FooBarError: requires at least one argument.\n... \"\"\"\n&gt;&gt;&gt; checker.check_output(want, got, IGNORE_EXCEPTION_MODULE_IN_PYTHON2)\nFalse\n&gt;&gt;&gt; from doctest import Example\n&gt;&gt;&gt; example = Example('dummy', want)\n&gt;&gt;&gt; result = checker.output_difference(\n...     example, got, IGNORE_EXCEPTION_MODULE_IN_PYTHON2)\n&gt;&gt;&gt; output = \"\"\"\\\n... Expected:\n...     Traceback (most recent call last):\n...     foo.bar.FooBarErrorXX: requires at least one argument.\n... Got:\n...     Traceback (most recent call last):\n...     FooBarError: requires at least one argument.\n... \"\"\"\n&gt;&gt;&gt; hint = \"\"\"\\\n...     ===============================================================\n...     HINT:\n...       The optionflag IGNORE_EXCEPTION_MODULE_IN_PYTHON2 is set.\n...       You seem to test traceback output.\n...       If you are indeed, make sure to use the full dotted name of\n...       the exception class like Python 3 displays,\n...       even though you are running the tests in Python 2.\n...       The exception message needs to be last line (and thus not\n...       split over multiple lines).\n...     ===============================================================\"\"\"\n&gt;&gt;&gt; if sys.version_info[0] &lt; 3:\n...     expected = output + hint\n... else:\n...     expected = output\n&gt;&gt;&gt; result == expected\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"stack-based-test-setup-and-teardown\">\n<h2><a href=\"#id49\" rel=\"nofollow\">Stack-based test setUp and tearDown</a></h2>\n<p>Writing doctest setUp and tearDown functions can be a bit tedious,\nespecially when setUp/tearDown functions are combined.</p>\n<p>the zope.testing.setupstack module provides a small framework for\nautomating test tear down.  It provides a generic setUp function that\nsets up a stack. Normal test setUp functions call this function to set\nup the stack and then use the register function to register tear-down\nfunctions.</p>\n<p>To see how this works we\u2019ll create a faux test:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class Test:\n...     def __init__(self):\n...         self.globs = {}\n&gt;&gt;&gt; test = Test()\n</pre>\n</blockquote>\n<p>We\u2019ll register some tearDown functions that just print something:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; import zope.testing.setupstack\n&gt;&gt;&gt; zope.testing.setupstack.register(\n...     test, lambda : sys.stdout.write('td 1\\n'))\n&gt;&gt;&gt; zope.testing.setupstack.register(\n...     test, lambda : sys.stdout.write('td 2\\n'))\n</pre>\n</blockquote>\n<p>Now, when we call the tearDown function:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.tearDown(test)\ntd 2\ntd 1\n</pre>\n</blockquote>\n<p>The registered tearDown functions are run. Note that they are run in\nthe reverse order that they were registered.</p>\n<p>Extra positional arguments can be passed to register:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.register(\n...    test, lambda x, y, z: sys.stdout.write('%s %s %s\\n' % (x, y, z)),\n...    1, 2, z=9)\n&gt;&gt;&gt; zope.testing.setupstack.tearDown(test)\n1 2 9\n</pre>\n</blockquote>\n<div id=\"temporary-test-directory\">\n<h3><a href=\"#id50\" rel=\"nofollow\">Temporary Test Directory</a></h3>\n<p>Often, tests create files as they demonstrate functionality.  They\nneed to arrange for the removeal of these files when the test is\ncleaned up.</p>\n<p>The setUpDirectory function automates this.  We\u2019ll get the current\ndirectory first:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import os\n&gt;&gt;&gt; here = os.getcwd()\n</pre>\n</blockquote>\n<p>We\u2019ll also create a new test:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; test = Test()\n</pre>\n</blockquote>\n<p>Now we\u2019ll call the setUpDirectory function:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.setUpDirectory(test)\n</pre>\n</blockquote>\n<p>We don\u2019t have to call zope.testing.setupstack.setUp, because\nsetUpDirectory calls it for us.</p>\n<p>Now the current working directory has changed:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; here == os.getcwd()\nFalse\n&gt;&gt;&gt; setupstack_cwd = os.getcwd()\n</pre>\n</blockquote>\n<p>We can create files to out heart\u2019s content:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; with open('Data.fs', 'w') as f:\n...     foo = f.write('xxx')\n&gt;&gt;&gt; os.path.exists(os.path.join(setupstack_cwd, 'Data.fs'))\nTrue\n</pre>\n</blockquote>\n<p>We\u2019ll make the file read-only. This can cause problems on Windows, but\nsetupstack takes care of that by making files writable before trying\nto remove them.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import stat\n&gt;&gt;&gt; os.chmod('Data.fs', stat.S_IREAD)\n</pre>\n</blockquote>\n<p>On Unix systems, broken symlinks can cause problems because the chmod\nattempt by the teardown hook will fail; let\u2019s set up a broken symlink as\nwell, and verify the teardown doesn\u2019t break because of that:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; if sys.platform != 'win32':\n...     os.symlink('NotThere', 'BrokenLink')\n</pre>\n</blockquote>\n<p>When tearDown is called:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.tearDown(test)\n</pre>\n</blockquote>\n<p>We\u2019ll be back where we started:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; here == os.getcwd()\nTrue\n</pre>\n</blockquote>\n<p>and the files we created will be gone (along with the temporary\ndirectory that was created:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; os.path.exists(os.path.join(setupstack_cwd, 'Data.fs'))\nFalse\n</pre>\n</blockquote>\n</div>\n<div id=\"context-manager-support\">\n<h3><a href=\"#id51\" rel=\"nofollow\">Context-manager support</a></h3>\n<p>You can leverage context managers using the <tt>contextmanager</tt> method.\nThe result of calling the content manager\u2019s __enter__ method will be\nreturned. The context-manager\u2019s __exit__ method will be called as part\nof test tear down:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class Manager(object):\n...     def __init__(self, *args, **kw):\n...         if kw:\n...             args += (kw, )\n...         self.args = args\n...     def __enter__(self):\n...         print_('enter', *self.args)\n...         return 42\n...     def __exit__(self, *args):\n...         print_('exit', args, *self.args)\n</pre>\n<pre>&gt;&gt;&gt; manager = Manager()\n&gt;&gt;&gt; test = Test()\n</pre>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.context_manager(test, manager)\nenter\n42\n</pre>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.tearDown(test)\nexit (None, None, None)\n</pre>\n</blockquote>\n<p>By far the most commonly called context manager is <tt>mock.patch</tt>, so\nthere\u2019s a convenience function to make that simpler:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.mock(test, 'time.time', return_value=42)\nenter time.time {'return_value': 42}\n42\n</pre>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.tearDown(test)\nexit (None, None, None) time.time {'return_value': 42}\n</pre>\n</blockquote>\n</div>\n<div id=\"globs\">\n<h3><a href=\"#id52\" rel=\"nofollow\">globs</a></h3>\n<p>Doctests have <tt>globs</tt> attributes used to hold test globals.\n<tt>setupstack</tt> was originally designed to work with doctests, but can\nnow work with either doctests, or other test objects, as long as the\ntest objects have either a <tt>globs</tt> attribute or a <tt>__dict__</tt>\nattribute.  The <tt>zope.testing.setupstack.globs</tt> function is used to\nget the globals for a test object:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zope.testing.setupstack.globs(test) is test.globs\nTrue\n</pre>\n</blockquote>\n<p>Here, because the test object had a <tt>globs</tt> attribute, it was\nreturned. Because we used the test object above, it has a setupstack:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; '__zope.testing.setupstack' in test.globs\nTrue\n</pre>\n</blockquote>\n<p>If we remove the <tt>globs</tt> attribute, the object\u2019s instance dictionary\nwill be used:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; del test.globs\n&gt;&gt;&gt; zope.testing.setupstack.globs(test) is test.__dict__\nTrue\n&gt;&gt;&gt; zope.testing.setupstack.context_manager(test, manager)\nenter\n42\n</pre>\n<pre>&gt;&gt;&gt; '__zope.testing.setupstack' in test.__dict__\nTrue\n</pre>\n</blockquote>\n<p>The <tt>globs</tt> function is used internally, but can also be used by\nsetup code to support either doctests or other test objects.</p>\n</div>\n<div id=\"testcase\">\n<h3><a href=\"#id53\" rel=\"nofollow\">TestCase</a></h3>\n<p>A TestCase class is provided that:</p>\n<ul>\n<li>Makes it easier to call setupstack apis, and</li>\n<li>provides an inheritable tearDown method.</li>\n</ul>\n<p>In addition to a tearDown method, the class provides methods:</p>\n<dl>\n<dt><tt>setupDirectory()</tt></dt>\n<dd>Creates a temporary directory, runs the test, and cleans it up.</dd>\n<dt><tt>register(func)</tt></dt>\n<dd>Register a tear-down function.</dd>\n<dt><tt>context_manager(manager)</tt></dt>\n<dd>Enters a context manager and exits it on tearDown.</dd>\n<dt><tt><span class=\"pre\">mock(*args,</span> **kw)</tt></dt>\n<dd><p>Enters  <tt>mock.patch</tt> with the given arguments.</p>\n<p>This is syntactic sugur for:</p>\n<pre>context_manager(mock.patch(*args, **kw))\n</pre>\n</dd>\n</dl>\n<p>Here\u2019s an example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; open('t', 'w').close()\n</pre>\n<pre>&gt;&gt;&gt; class MyTests(zope.testing.setupstack.TestCase):\n...\n...     def setUp(self):\n...         self.setUpDirectory()\n...         self.context_manager(manager)\n...         self.mock(\"time.time\", return_value=42)\n...\n...         @self.register\n...         def _():\n...             print('done w test')\n...\n...     def test(self):\n...         print(os.listdir('.'))\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"wait-until-a-condition-holds-or-until-a-time-out\">\n<h2><a href=\"#id54\" rel=\"nofollow\">Wait until a condition holds (or until a time out)</a></h2>\n<p>Often, in tests, you need to wait until some condition holds.  This\nmay be because you\u2019re testing interaction with an external system or\ntesting threaded (threads, processes, greenlet\u2019s, etc.) interactions.</p>\n<p>You can add sleeps to your tests, but it\u2019s often hard to know how\nlong to sleep.</p>\n<p><tt>zope.testing.wait</tt> provides a convenient way to wait until\nsome condition holds.  It will test a condition and, when true,\nreturn.  It will sleep a short time between tests.</p>\n<p>Here\u2019s a silly example, that illustrates it\u2019s use:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.testing.wait import wait\n&gt;&gt;&gt; wait(lambda : True)\n</pre>\n</blockquote>\n<p>Since the condition we passed is always True, it returned\nimmediately.  If the condition doesn\u2019t hold, then we\u2019ll get a timeout:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; wait((lambda : False), timeout=.01)\nTraceback (most recent call last):\n...\nTimeOutWaitingFor: &lt;lambda&gt;\n</pre>\n</blockquote>\n<p><tt>wait</tt> has some keyword options:</p>\n<dl>\n<dt>timeout</dt>\n<dd><p>How long, in seconds, to wait for the condition to hold</p>\n<p>Defaults to 9 seconds.</p>\n</dd>\n<dt>wait</dt>\n<dd><p>How long to wait between calls.</p>\n<p>Defaults to .01 seconds.</p>\n</dd>\n<dt>message</dt>\n<dd><p>A message (or other data) to pass to the timeout exception.</p>\n<p>This defaults to <tt>None</tt>.  If this is false, then the callable\u2019s\ndoc string or <tt>__name__</tt> is used.</p>\n</dd>\n</dl>\n<p><tt>wait</tt> can be used as a decorator:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; @wait\n... def ok():\n...     return True\n</pre>\n<pre>&gt;&gt;&gt; @wait(timeout=.01)\n... def no_way():\n...     pass\nTraceback (most recent call last):\n...\nTimeOutWaitingFor: no_way\n</pre>\n<pre>&gt;&gt;&gt; @wait(timeout=.01)\n... def no_way():\n...     \"never true\"\nTraceback (most recent call last):\n...\nTimeOutWaitingFor: never true\n</pre>\n</blockquote>\n<div id=\"customization\">\n<h3><a href=\"#id55\" rel=\"nofollow\">Customization</a></h3>\n<p><tt>wait</tt> is an instance of <tt>Wait</tt>.  With <tt>Wait</tt>,\nyou can create you\u2019re own custom <tt>wait</tt> utilities.  For\nexample, if you\u2019re testing something that uses getevent, you\u2019d want to\nuse gevent\u2019s sleep function:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.testing.wait\n&gt;&gt;&gt; wait = zope.testing.wait.Wait(getsleep=lambda : gevent.sleep)\n</pre>\n</blockquote>\n<p>Wait takes a number of customization parameters:</p>\n<dl>\n<dt>exception</dt>\n<dd>Timeout exception class</dd>\n<dt>getnow</dt>\n<dd><p>Function used to get a function for getting the current time.</p>\n<p>Default: lambda : time.time</p>\n</dd>\n<dt>getsleep</dt>\n<dd><p>Function used to get a sleep function.</p>\n<p>Default: lambda : time.sleep</p>\n</dd>\n<dt>timeout</dt>\n<dd><p>Default timeout</p>\n<p>Default: 9</p>\n</dd>\n<dt>wait</dt>\n<dd><p>Default time to wait between attempts</p>\n<p>Default: .01</p>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"doctests-in-testcase-classes\">\n<h2><a href=\"#id56\" rel=\"nofollow\">Doctests in TestCase classes</a></h2>\n<p>The original <tt>doctest</tt> unittest integration was based on\n<tt>unittest</tt> test suites, which have fallen out of favor. This module\nprovides a way to define doctests inside of unittest <tt>TestCase</tt>\nclasses. It provides better integration with unittest test fixtures,\nbecause doctests use setup provided by the containing test case\nclass. It provides access to unittest assertion methods.</p>\n<p>You can define doctests in multiple ways:</p>\n<ul>\n<li>references to named files</li>\n<li>strings</li>\n<li>decorated functions with docstrings</li>\n<li>reference to named files decorating test-specific setup functions</li>\n<li>reference to named files decorating a test class</li>\n</ul>\n<p>Here are some examples:</p>\n<pre>&gt;&gt;&gt; from zope.testing import doctestcase\n&gt;&gt;&gt; import doctest\n&gt;&gt;&gt; import unittest\n\n&gt;&gt;&gt; g = 'global'\n\n&gt;&gt;&gt; class MyTest(unittest.TestCase):\n...\n...     def setUp(self):\n...         self.a = 1\n...         self.globs = dict(c=9)\n...\n...     test1 = doctestcase.file('test-1.txt', optionflags=doctest.ELLIPSIS)\n...\n...     test2 = doctestcase.docteststring('''\n...       &gt;&gt;&gt; self.a, g, c\n...       (1, 'global', 9)\n...     ''')\n...\n...     @doctestcase.doctestmethod(optionflags=doctest.ELLIPSIS)\n...     def test3(self):\n...         '''\n...         &gt;&gt;&gt; self.a, self.x, g, c\n...         (1, 3, 'global', 9)\n...         '''\n...         self.x = 3\n...\n...     @doctestcase.doctestfile('test4.txt')\n...     def test4(self):\n...         self.x = 5\n\n&gt;&gt;&gt; import sys\n\n&gt;&gt;&gt; @doctestcase.doctestfiles('loggingsupport.txt', 'renormalizing.txt')\n... class MoreTests(unittest.TestCase):\n...\n...    def setUp(self):\n...        def print_(*args):\n...            sys.stdout.write(' '.join(map(str, args))+'\\n')\n...        self.globs = dict(print_=print_)\n</pre>\n<p>In these examples, 4 constructors were used:</p>\n<dl>\n<dt>doctestfile (alias: file)</dt>\n<dd><p>doctestfile makes a file-based test case.</p>\n<p>This can be used as a decorator, in which case, the decorated\nfunction is called before the test is run, to provide test-specific\nsetup.</p>\n</dd>\n<dt>doctestfiles (alias: files)</dt>\n<dd><p>doctestfiles makes file-based test cases and assigns them to the\ndecorated class.</p>\n<p>Multiple files can be specified and the resulting doctests are added\nas members of the decorated class.</p>\n</dd>\n<dt>docteststring (alias string)</dt>\n<dd>docteststring constructs a doctest from a string.</dd>\n<dt>doctestmethod (alias method)</dt>\n<dd><p>doctestmethod constructs a doctest from a method.</p>\n<p>The method\u2019s docstring provides the test. The method\u2019s body provides\noptional test-specific setup.</p>\n</dd>\n</dl>\n<p>Note that short aliases are provided, which maye be useful in certain\nimport styles.</p>\n<p>Tests have access to the following data:</p>\n<ul>\n<li>Tests created with the <tt>docteststring</tt> and <tt>doctestmethod</tt>\nconstructors have access to the module globals of the defining\nmodule.</li>\n<li>In tests created with the <tt>docteststring</tt> and <tt>doctestmethod</tt>\nconstructors, the test case instance is available as the <tt>self</tt>\nvariable.</li>\n<li>In tests created with the <tt>doctestfile</tt> and <tt>doctestfiles</tt>\nconstructor, the test case instance is available as the <tt>test</tt>\nvariable.</li>\n<li>If a test case defines a globs attribute, it must be a dictionary\nand it\u2019s contents are added to the test globals.</li>\n</ul>\n<p>The constructors accept standard doctest <tt>optionflags</tt> and\n<tt>checker</tt> arguments.</p>\n<p>Note that the doctest IGNORE_EXCEPTION_DETAIL option flag is\nadded to optionflags.</p>\n<p>When using <tt>doctestfile</tt> and <tt>doctestfile</tt>, <tt>filename</tt> and\n<tt>filepath</tt> attributes are available that contain the test file name\nand full path.</p>\n<div id=\"name-attributes-of-class-members\">\n<h3><a href=\"#id57\" rel=\"nofollow\"><tt>__name__</tt> attributes of class members</a></h3>\n<p>Class members have <tt>__name__</tt> attributes set as follows:</p>\n<ul>\n<li>When using <tt>doctestmethod</tt> or <tt>doctestfile</tt> with a setup\nfunction, <tt>__name__</tt> attribute is set to the name of the function.\nA <tt>test_</tt> prefix is added, if the name doesn\u2019t start with <tt>test</tt>.</li>\n<li>When <tt>doctestfile</tt> is used without a setup function or when\n<tt>doctestfiles</tt> is used, <tt>__name__</tt> is set to the last part of the\nfile path with the extension removed and non-word characters\nconverted to underscores. For example, with a test path of\n<tt><span class=\"pre\">'/foo/bar/test-it.rst'</span></tt>, the <tt>__name__</tt> attribute is set to\n<tt>'test_it'</tt>.  A <tt>test_</tt> prefix is added, if the name doesn\u2019t\nstart with <tt>test</tt>.</li>\n<li>when using <tt>docteststring</tt>, a <tt>name</tt> option can be passed in to\nset <tt>__name__</tt>.  A <tt>test_</tt> prefix is added, if the name doesn\u2019t\nstart with <tt>test</tt>.</li>\n</ul>\n<p>The <tt>__name__</tt> attribute is important when using nose, because nose\ndiscovers tests as class members using their <tt>__name__</tt> attributes,\nwhereas the unittest and py.test test runners use class dictionary keys.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id58\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id59\" rel=\"nofollow\">4.7 (2018-10-04)</a></h3>\n<ul>\n<li>Added support for Python 3.7.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id60\" rel=\"nofollow\">4.6.2 (2017-06-12)</a></h3>\n<ul>\n<li>Remove dependencies on <tt>zope.interface</tt> and <tt>zope.exceptions</tt>;\nthey\u2019re not used here.</li>\n<li>Remove use of 2to3 for outdated versions of PyPy3, letting us build\nuniversal wheels.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id61\" rel=\"nofollow\">4.6.1 (2017-01-04)</a></h3>\n<ul>\n<li>Add support for Python 3.6.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id62\" rel=\"nofollow\">4.6.0 (2016-10-20)</a></h3>\n<ul>\n<li>Introduce option flag <tt>IGNORE_EXCEPTION_MODULE_IN_PYTHON2</tt> to normalize\nexception class names in traceback output. In Python 3 they are displayed as\nthe full dotted name. In Python 2 they are displayed as \u201cjust\u201d the class\nname.  When running doctests in Python 3, the option flag will not have any\neffect, however when running the same test in Python 2, the segments in the\nfull dotted name leading up to the class name are stripped away from the\n\u201cexpected\u201d string.</li>\n<li>Drop support for Python 2.6 and 3.2.</li>\n<li>Add support for Python 3.5.</li>\n<li>Cleaned up useless 2to3 conversion.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id63\" rel=\"nofollow\">4.5.0 (2015-09-02)</a></h3>\n<ul>\n<li><p>Added meta data for test case methods created with\n<tt>zope.testing.doctestcase</tt>.</p>\n<ul>\n<li>Reasonable values for <tt>__name__</tt>, making sure that <tt>__name__</tt>\nstarts with <tt>test</tt>.</li>\n<li>For <tt>doctestfile</tt> methods, provide <tt>filename</tt> and <tt>filepath</tt>\nattributes.</li>\n</ul>\n<p>The meta data us useful, for example, for selecting tests with the\nnose attribute mechanism.</p>\n</li>\n<li><p>Added <tt>doctestcase.doctestfiles</tt></p>\n<ul>\n<li><p>Define multiple doctest files at once.</p>\n</li>\n<li><p>Automatically assign test class members.  So rather than:</p>\n<pre>class MYTests(unittest.TestCase):\n    ...\n    test_foo = doctestcase.doctestfile('foo.txt')\n</pre>\n<p>You can use:</p>\n<pre>@doctestcase.doctestfiles('foo.txt', 'bar.txt', ...)\nclass MYTests(unittest.TestCase):\n    ...\n</pre>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id64\" rel=\"nofollow\">4.4.0 (2015-07-16)</a></h3>\n<ul>\n<li>Added <tt>zope.testing.setupstack.mock</tt> as a convenience function for\nsetting up mocks in tests.  (The Python <tt>mock</tt> package must be in\nthe path for this to work. The excellent <tt>mock</tt> package isn\u2019t a\ndependency of <tt>zope.testing</tt>.)</li>\n<li>Added the base class <tt>zope.testing.setupstack.TestCase</tt> to make it\nmuch easier to use <tt>zope.testing.setupstack</tt> in <tt>unittest</tt> test\ncases.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id65\" rel=\"nofollow\">4.3.0 (2015-07-15)</a></h3>\n<ul>\n<li>Added support for creating doctests as methods of\n<tt>unittest.TestCase</tt> classes so that they can found automatically\nby test runners, like <em>nose</em> that ignore test suites.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id66\" rel=\"nofollow\">4.2.0 (2015-06-01)</a></h3>\n<ul>\n<li><strong>Actually</strong> remove long-deprecated <tt>zope.testing.doctest</tt> (announced as\nremoved in 4.0.0) and <tt>zope.testing.doctestunit</tt>.</li>\n<li>Add support for PyPy and PyPy3.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id67\" rel=\"nofollow\">4.1.3 (2014-03-19)</a></h3>\n<ul>\n<li>Add support for Python 3.4.</li>\n<li>Update <tt>boostrap.py</tt> to version 2.2.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id68\" rel=\"nofollow\">4.1.2 (2013-02-19)</a></h3>\n<ul>\n<li>Adjust Trove classifiers to reflect the currently supported Python\nversions. Officially drop Python 2.4 and 2.5. Add Python 3.3.</li>\n<li>LP: #1055720: Fix failing test on Python 3.3 due to changed exception\nmessaging.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id69\" rel=\"nofollow\">4.1.1 (2012-02-01)</a></h3>\n<ul>\n<li>Fix: Windows test failure.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id70\" rel=\"nofollow\">4.1.0 (2012-01-29)</a></h3>\n<ul>\n<li>Add context-manager support to <tt>zope.testing.setupstack</tt></li>\n<li>Make <tt>zope.testing.setupstack</tt> usable with all tests, not just\ndoctests and added <tt>zope.testing.setupstack.globs</tt>, which makes it\neasier to write test setup code that workes with doctests and other\nkinds of tests.</li>\n<li>Add the <tt>wait</tt> module, which makes it easier to deal with\nnon-deterministic timing issues.</li>\n<li>Rename <tt>zope.testing.renormalizing.RENormalizing</tt> to\n<tt>zope.testing.renormalizing.OutputChecker</tt>. The old name is an\nalias.</li>\n<li>Update tests to run with Python 3.</li>\n<li>Label more clearly which features are supported by Python 3.</li>\n<li>Reorganize documentation.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id71\" rel=\"nofollow\">4.0.0 (2011-11-09)</a></h3>\n<ul>\n<li>Remove the deprecated <tt>zope.testing.doctest</tt>.</li>\n<li>Add Python 3 support.</li>\n<li>Fix test which fails if there is a file named <cite>Data.fs</cite> in the current\nworking directory.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id72\" rel=\"nofollow\">3.10.2 (2010-11-30)</a></h3>\n<ul>\n<li>Fix test of broken symlink handling to not break on Windows.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id73\" rel=\"nofollow\">3.10.1 (2010-11-29)</a></h3>\n<ul>\n<li>Fix removal of broken symlinks on Unix.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3><a href=\"#id74\" rel=\"nofollow\">3.10.0 (2010-07-21)</a></h3>\n<ul>\n<li>Remove <tt>zope.testing.testrunner</tt>, which now is moved to zope.testrunner.</li>\n<li>Update fix for LP #221151 to a spelling compatible with Python 2.4.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3><a href=\"#id75\" rel=\"nofollow\">3.9.5 (2010-05-19)</a></h3>\n<ul>\n<li>LP #579019: When layers are run in parallel, ensure that each <tt>tearDown</tt>\nis called, including the first layer which is run in the main\nthread.</li>\n<li>Deprecate <tt>zope.testing.testrunner</tt> and <tt>zope.testing.exceptions</tt>.\nThey have been moved to a separate zope.testrunner module, and will be\nremoved from zope.testing in 4.0.0, together with <tt>zope.testing.doctest</tt>.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3><a href=\"#id76\" rel=\"nofollow\">3.9.4 (2010-04-13)</a></h3>\n<ul>\n<li><p>LP #560259: Fix subunit output formatter to handle layer setup\nerrors.</p>\n</li>\n<li><p>LP #399394:  Add a <tt><span class=\"pre\">--stop-on-error</span></tt> / <tt><span class=\"pre\">--stop</span></tt> / <tt><span class=\"pre\">-x</span></tt> option to\nthe testrunner.</p>\n</li>\n<li><p>LP #498162:  Add a <tt><span class=\"pre\">--pdb</span></tt> alias for the existing <tt><span class=\"pre\">--post-mortem</span></tt>\n/ <tt><span class=\"pre\">-D</span></tt> option to the testrunner.</p>\n</li>\n<li><p>LP #547023:  Add a <tt><span class=\"pre\">--version</span></tt> option to the testrunner.</p>\n</li>\n<li><p>Add tests for LP #144569 and #69988.</p>\n<p><a href=\"https://bugs.launchpad.net/bugs/69988\" rel=\"nofollow\">https://bugs.launchpad.net/bugs/69988</a></p>\n<p><a href=\"https://bugs.launchpad.net/zope3/+bug/144569\" rel=\"nofollow\">https://bugs.launchpad.net/zope3/+bug/144569</a></p>\n</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3><a href=\"#id77\" rel=\"nofollow\">3.9.3 (2010-03-26)</a></h3>\n<ul>\n<li>Remove import of <tt>zope.testing.doctest</tt> from <tt>zope.testing.renormalizer</tt>.</li>\n<li>Suppress output to <tt>sys.stderr</tt> in <tt><span class=\"pre\">testrunner-layers-ntd.txt</span></tt>.</li>\n<li>Suppress <tt>zope.testing.doctest</tt> deprecation warning when running\nour own test suite.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3><a href=\"#id78\" rel=\"nofollow\">3.9.2 (2010-03-15)</a></h3>\n<ul>\n<li>Fix broken <tt>from zope.testing.doctest import *</tt></li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3><a href=\"#id79\" rel=\"nofollow\">3.9.1 (2010-03-15)</a></h3>\n<ul>\n<li>No changes; reupload to fix broken 3.9.0 release on PyPI.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3><a href=\"#id80\" rel=\"nofollow\">3.9.0 (2010-03-12)</a></h3>\n<ul>\n<li>Modify the testrunner to use the standard Python <tt>doctest</tt> module instead\nof the deprecated <tt>zope.testing.doctest</tt>.</li>\n<li>Fix <tt><span class=\"pre\">testrunner-leaks.txt</span></tt> to use the <tt>run_internal</tt> helper, so that\n<tt>sys.exit</tt> isn\u2019t triggered during the test run.</li>\n<li>Add support for conditionally using a subunit-based output\nformatter upon request if subunit and testtools are available. Patch\ncontributed by Jonathan Lange.</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3><a href=\"#id81\" rel=\"nofollow\">3.8.7 (2010-01-26)</a></h3>\n<ul>\n<li>Downgrade the <tt>zope.testing.doctest</tt> deprecation warning into a\nPendingDeprecationWarning.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3><a href=\"#id82\" rel=\"nofollow\">3.8.6 (2009-12-23)</a></h3>\n<ul>\n<li>Add <tt>MANIFEST.in</tt> and reupload to fix broken 3.8.5 release on PyPI.</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3><a href=\"#id83\" rel=\"nofollow\">3.8.5 (2009-12-23)</a></h3>\n<ul>\n<li>Add back <tt>DocFileSuite</tt>, <tt>DocTestSuite</tt>, <tt>debug_src</tt> and <tt>debug</tt>\nBBB imports back into <tt>zope.testing.doctestunit</tt>; apparently many packages\nstill import them from there!</li>\n<li>Deprecate <tt>zope.testing.doctest</tt> and <tt>zope.testing.doctestunit</tt>\nin favor of the stdlib <tt>doctest</tt> module.</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3><a href=\"#id84\" rel=\"nofollow\">3.8.4 (2009-12-18)</a></h3>\n<ul>\n<li>Fix missing imports and undefined variables reported by pyflakes,\nadding tests to exercise the blind spots.</li>\n<li>Cleaned up unused imports reported by pyflakes.</li>\n<li>Add two new options to generate randomly ordered list of tests and to\nselect a specific order of tests.</li>\n<li>Allow combining RENormalizing checkers via <tt>+</tt> now:\n<tt>checker1 + checker2</tt> creates a checker with the transformations of both\ncheckers.</li>\n<li>Fix tests under Python 2.7.</li>\n</ul>\n</div>\n<div id=\"id27\">\n<h3><a href=\"#id85\" rel=\"nofollow\">3.8.3 (2009-09-21)</a></h3>\n<ul>\n<li>Fix test failures due to using <tt>split()</tt> on filenames when running from a\ndirectory with spaces in it.</li>\n<li>Fix testrunner behavior on Windows for <tt><span class=\"pre\">-j2</span></tt> (or greater) combined with\n<tt><span class=\"pre\">-v</span></tt> (or greater).</li>\n</ul>\n</div>\n<div id=\"id28\">\n<h3><a href=\"#id86\" rel=\"nofollow\">3.8.2 (2009-09-15)</a></h3>\n<ul>\n<li>Remove hotshot profiler when using Python 2.6. That makes zope.testing\ncompatible with Python 2.6</li>\n</ul>\n</div>\n<div id=\"id29\">\n<h3><a href=\"#id87\" rel=\"nofollow\">3.8.1 (2009-08-12)</a></h3>\n<ul>\n<li>Avoid hardcoding <tt>sys.argv[0]</tt> as script;\nallow, for instance, Zope 2\u2019s <cite>bin/instance test</cite> (LP#407916).</li>\n<li>Produce a clear error message when a subprocess doesn\u2019t follow the\n<tt>zope.testing.testrunner</tt> protocol (LP#407916).</li>\n<li>Avoid unnecessarily squelching verbose output in a subprocess when there are\nnot multiple subprocesses.</li>\n<li>Avoid unnecessarily batching subprocess output, which can stymie automated\nand human processes for identifying hung tests.</li>\n<li>Include incremental output when there are multiple subprocesses and a\nverbosity of <tt><span class=\"pre\">-vv</span></tt> or greater is requested.  This again is not batched,\nsupporting automated processes and humans looking for hung tests.</li>\n</ul>\n</div>\n<div id=\"id30\">\n<h3><a href=\"#id88\" rel=\"nofollow\">3.8.0 (2009-07-24)</a></h3>\n<ul>\n<li>Allow testrunner to include descendants of <tt>unittest.TestCase</tt> in test\nmodules, which no longer need to provide <tt>test_suite()</tt>.</li>\n</ul>\n</div>\n<div id=\"id31\">\n<h3><a href=\"#id89\" rel=\"nofollow\">3.7.7 (2009-07-15)</a></h3>\n<ul>\n<li>Clean up support for displaying tracebacks with supplements by turning it\ninto an always-enabled feature and making the dependency on\n<tt>zope.exceptions</tt> explicit.</li>\n<li>Fix #251759: prevent the testrunner descending into directories that\naren\u2019t Python packages.</li>\n<li>Code cleanups.</li>\n</ul>\n</div>\n<div id=\"id32\">\n<h3><a href=\"#id90\" rel=\"nofollow\">3.7.6 (2009-07-02)</a></h3>\n<ul>\n<li>Add zope-testrunner <tt>console_scripts</tt> entry point. This exposes a\n<tt><span class=\"pre\">zope-testrunner</span></tt> script with default installs allowing the testrunner\nto be run from the command line.</li>\n</ul>\n</div>\n<div id=\"id33\">\n<h3><a href=\"#id91\" rel=\"nofollow\">3.7.5 (2009-06-08)</a></h3>\n<ul>\n<li>Fix bug when running subprocesses on Windows.</li>\n<li>The option <tt>REPORT_ONLY_FIRST_FAILURE</tt> (command line option \u201c-1\u201d) is now\nrespected even when a doctest declares its own <tt>REPORTING_FLAGS</tt>, such as\n<tt>REPORT_NDIFF</tt>.</li>\n<li>Fix bug that broke readline with pdb when using doctest\n(see <a href=\"http://bugs.python.org/issue5727\" rel=\"nofollow\">http://bugs.python.org/issue5727</a>).</li>\n<li>Make tests pass on Windows and Linux at the same time.</li>\n</ul>\n</div>\n<div id=\"id34\">\n<h3><a href=\"#id92\" rel=\"nofollow\">3.7.4 (2009-05-01)</a></h3>\n<ul>\n<li>Filenames of doctest examples now contain the line number and not\nonly the example number. So a stack trace in pdb tells the exact\nline number of the current example. This fixes\n<a href=\"https://bugs.launchpad.net/bugs/339813\" rel=\"nofollow\">https://bugs.launchpad.net/bugs/339813</a></li>\n<li>Colorization of doctest output correctly handles blank lines.</li>\n</ul>\n</div>\n<div id=\"id35\">\n<h3><a href=\"#id93\" rel=\"nofollow\">3.7.3 (2009-04-22)</a></h3>\n<ul>\n<li>Improve handling of rogue threads:  always exit with status so even\nspinning daemon threads won\u2019t block the runner from exiting. This deprecated\nthe <tt><span class=\"pre\">--with-exit-status</span></tt> option.</li>\n</ul>\n</div>\n<div id=\"id36\">\n<h3><a href=\"#id94\" rel=\"nofollow\">3.7.2 (2009-04-13)</a></h3>\n<ul>\n<li>Fix test failure on Python 2.4 due to slight difference in the way\ncoverage is reported (__init__ files with only a single comment line are now\nnot reported)</li>\n<li>Fix bug that caused the test runner to hang when running subprocesses (as a\nresult Python 2.3 is no longer supported).</li>\n<li>Work around a bug in Python 2.6 (related to\n<a href=\"http://bugs.python.org/issue1303673\" rel=\"nofollow\">http://bugs.python.org/issue1303673</a>) that causes the profile tests to fail.</li>\n<li>Add explanitory notes to <tt>buildout.cfg</tt> about how to run the tests with\nmultiple versions of Python</li>\n</ul>\n</div>\n<div id=\"id37\">\n<h3><a href=\"#id95\" rel=\"nofollow\">3.7.1 (2008-10-17)</a></h3>\n<ul>\n<li>The <tt>setupstack</tt> temporary directory support now properly handles\nread-only files by making them writable before removing them.</li>\n</ul>\n</div>\n<div id=\"id38\">\n<h3><a href=\"#id96\" rel=\"nofollow\">3.7.0 (2008-09-22)</a></h3>\n<ul>\n<li>Add alterate setuptools / distutils commands for running all tests\nusing our testrunner.  See \u2018zope.testing.testrunner.eggsupport:ftest\u2019.</li>\n<li>Add a setuptools-compatible test loader which skips tests with layers:\nthe testrunner used by <tt>setup.py test</tt> doesn\u2019t know about them, and those\ntests then fail.  See <tt>zope.testing.testrunner.eggsupport:SkipLayers</tt>.</li>\n<li>Add support for Jython, when a garbage collector call is sent.</li>\n<li>Add support to bootstrap on Jython.</li>\n<li>Fix NameError in StartUpFailure.</li>\n<li>Open doctest files in universal mode, so that packages released on Windows\ncan be tested on Linux, for example.</li>\n</ul>\n</div>\n<div id=\"id39\">\n<h3><a href=\"#id97\" rel=\"nofollow\">3.6.0 (2008-07-10)</a></h3>\n<ul>\n<li>Add <tt><span class=\"pre\">-j</span></tt> option to parallel tests run in subprocesses.</li>\n<li>RENormalizer accepts plain Python callables.</li>\n<li>Add <tt><span class=\"pre\">--slow-test</span></tt> option.</li>\n<li>Add <tt><span class=\"pre\">--no-progress</span></tt> and <tt><span class=\"pre\">--auto-progress</span></tt> options.</li>\n<li>Complete refactoring of the test runner into multiple code files and a more\nmodular (pipeline-like) architecture.</li>\n<li>Unify unit tests with the layer support by introducing a real unit test\nlayer.</li>\n<li>Add a doctest for <tt>zope.testing.module</tt>. There were several bugs\nthat were fixed:<ul>\n<li><tt>README.txt</tt> was a really bad default argument for the module\nname, as it is not a proper dotted name. The code would\nimmediately fail as it would look for the <tt>txt</tt> module in the\n<tt>README</tt> package. The default is now <tt>__main__</tt>.</li>\n<li>The <tt>tearDown</tt> function did not clean up the <tt>__name__</tt> entry in the\nglobal dictionary.</li>\n</ul>\n</li>\n<li>Fix a bug that caused a SubprocessError to be generated if a subprocess\nsent any output to stderr.</li>\n<li>Fix a bug that caused the unit tests to be skipped if run in a subprocess.</li>\n</ul>\n</div>\n<div id=\"id40\">\n<h3><a href=\"#id98\" rel=\"nofollow\">3.5.1 (2007-08-14)</a></h3>\n<ul>\n<li>Invoke post-mortem debugging for layer-setup failures.</li>\n</ul>\n</div>\n<div id=\"id41\">\n<h3><a href=\"#id99\" rel=\"nofollow\">3.5.0 (2007-07-19)</a></h3>\n<ul>\n<li>Ensure that the test runner works on Python 2.5.</li>\n<li>Add support for <tt>cProfile</tt>.</li>\n<li>Add output colorizing (<tt><span class=\"pre\">-c</span></tt> option).</li>\n<li>Add <tt><span class=\"pre\">--hide-secondary-failures</span></tt> and <tt><span class=\"pre\">--show-secondary-failures</span></tt> options\n(<a href=\"https://bugs.launchpad.net/zope3/+bug/115454\" rel=\"nofollow\">https://bugs.launchpad.net/zope3/+bug/115454</a>).</li>\n<li>Fix some problems with Unicode in doctests.</li>\n<li>Fix \u201cError reading from subprocess\u201d errors on Unix-like systems.</li>\n</ul>\n</div>\n<div id=\"id42\">\n<h3><a href=\"#id100\" rel=\"nofollow\">3.4 (2007-03-29)</a></h3>\n<ul>\n<li>Add <tt><span class=\"pre\">exit-with-status</span></tt> support (supports use with buildbot and\n<tt>zc.recipe.testing</tt>)</li>\n<li>Add a small framework for automating set up and tear down of\ndoctest tests. See <tt>setupstack.txt</tt>.</li>\n<li>Allow <tt><span class=\"pre\">testrunner-wo-source.txt</span></tt> and <tt><span class=\"pre\">testrunner-errors.txt</span></tt> to run\nwithin a read-only source tree.</li>\n</ul>\n</div>\n<div id=\"id43\">\n<h3><a href=\"#id101\" rel=\"nofollow\">3.0 (2006-09-20)</a></h3>\n<ul>\n<li>Update the doctest copy with text-file encoding support.</li>\n<li>Add logging-level support to the <tt>loggingsuppport</tt> module.</li>\n<li>At verbosity-level 1, dots are not output continuously, without any\nline breaks.</li>\n<li>Improve output when the inability to tear down a layer causes tests\nto be run in a subprocess.</li>\n<li>Make <tt>zope.exception</tt> required only if the <tt>zope_tracebacks</tt> extra is\nrequested.</li>\n<li>Fix the test coverage. If a module, for example <cite>interfaces</cite>, was in an\nignored directory/package, then if a module of the same name existed in a\ncovered directory/package, then it was also ignored there, because the\nignore cache stored the result by module name and not the filename of the\nmodule.</li>\n</ul>\n</div>\n<div id=\"id44\">\n<h3><a href=\"#id102\" rel=\"nofollow\">2.0 (2006-01-05)</a></h3>\n<ul>\n<li>Release a separate project corresponding to the version of <tt>zope.testing</tt>\nshipped as part of the Zope 3.2.0 release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4340441, "releases": {"3.0": [{"comment_text": "", "digests": {"md5": "473eedeca975306c3cfc359e48579cf1", "sha256": "8c7c92beeb673db09dfe550a96c29c500f1e5459865ff19422df79d800eb2611"}, "downloads": -1, "filename": "zope.testing-3.0-py2.3.egg", "has_sig": false, "md5_digest": "473eedeca975306c3cfc359e48579cf1", "packagetype": "bdist_egg", "python_version": "2.3", "requires_python": null, "size": 1084504, "upload_time": "2006-09-20T20:19:04", "upload_time_iso_8601": "2006-09-20T20:19:04Z", "url": "https://files.pythonhosted.org/packages/ee/a0/21bc8334dd310d1aa324a286989f83b84a6ffe7d1431a29af30859124a6e/zope.testing-3.0-py2.3.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "26f1aa89a7df211a17335c6f7df19eaf", "sha256": "e79c77a0f3b347e6769b66f4630a82235f049cf2d150dda40ee276774f644898"}, "downloads": -1, "filename": "zope.testing-3.0-py2.4.egg", "has_sig": false, "md5_digest": "26f1aa89a7df211a17335c6f7df19eaf", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 285352, "upload_time": "2006-09-20T19:50:05", "upload_time_iso_8601": "2006-09-20T19:50:05Z", "url": "https://files.pythonhosted.org/packages/4e/0a/ed8de3a385c3f173e72e453dd4d3492f7fc86ba122d024dd7e07fae6dd58/zope.testing-3.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f93db970303da5d0dbcb2ac9a27bd5e", "sha256": "6747e769940b90853b319e591a35427a1946b3f7f934215296a41efafca980a0"}, "downloads": -1, "filename": "zope.testing-3.0.tar.gz", "has_sig": false, "md5_digest": "7f93db970303da5d0dbcb2ac9a27bd5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123845, "upload_time": "2006-10-01T18:15:37", "upload_time_iso_8601": "2006-10-01T18:15:37Z", "url": "https://files.pythonhosted.org/packages/1e/2b/faf3ac04622a5347899ad4f71598fa8aa20af960e895ab1161ed1010ea79/zope.testing-3.0.tar.gz", "yanked": false}], "3.10.0": [{"comment_text": "", "digests": {"md5": "ec822c281f62097b63f5d45e6e785412", "sha256": "01a0ad1ce2974c81a2253e9f62dbe5aa30eec82e30256d483b088a25a4e1eb11"}, "downloads": -1, "filename": "zope.testing-3.10.0.tar.gz", "has_sig": false, "md5_digest": "ec822c281f62097b63f5d45e6e785412", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51925, "upload_time": "2010-07-21T19:01:08", "upload_time_iso_8601": "2010-07-21T19:01:08.547906Z", "url": "https://files.pythonhosted.org/packages/23/7b/2f3e01ed366f081f14f8020e1734e2125f5586bfcaac0b4fc8de87a778c5/zope.testing-3.10.0.tar.gz", "yanked": false}], "3.10.1": [{"comment_text": "", "digests": {"md5": "057a124b43751d0ee520e2ebfe97a43e", "sha256": "3e52b587c80e7ee10a4f8ed899c2a7b9e507686f8897e842592346df8f10e35b"}, "downloads": -1, "filename": "zope.testing-3.10.1.tar.gz", "has_sig": false, "md5_digest": "057a124b43751d0ee520e2ebfe97a43e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64894, "upload_time": "2010-11-29T22:37:30", "upload_time_iso_8601": "2010-11-29T22:37:30.225652Z", "url": "https://files.pythonhosted.org/packages/6b/af/3c39425d5e365d53776641a0212a5a68e866c4e114e4a7de3d0cfc584e6d/zope.testing-3.10.1.tar.gz", "yanked": false}], "3.10.2": [{"comment_text": "", "digests": {"md5": "35fc3139992a92a4db13653167fc7be9", "sha256": "edae3ca1d4702082a74c27f3329d537ee77f2d90a2224bf1b0861fed96b56919"}, "downloads": -1, "filename": "zope.testing-3.10.2.tar.gz", "has_sig": false, "md5_digest": "35fc3139992a92a4db13653167fc7be9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64945, "upload_time": "2010-11-30T12:04:26", "upload_time_iso_8601": "2010-11-30T12:04:26.638731Z", "url": "https://files.pythonhosted.org/packages/58/ff/b08b350c6c8e9c80fa41201da41373175144f83f0ee8bc4d7aa7b983d557/zope.testing-3.10.2.tar.gz", "yanked": false}], "3.10.3": [{"comment_text": "", "digests": {"md5": "d9d6055c0a017271bcc3938c18ea23e8", "sha256": "5f50fd6dc2318797aaadcfdb30f46d9b561e5299d67f41d71b568718180acf90"}, "downloads": -1, "filename": "zope.testing-3.10.3.tar.gz", "has_sig": false, "md5_digest": "d9d6055c0a017271bcc3938c18ea23e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62644, "upload_time": "2011-11-03T09:38:56", "upload_time_iso_8601": "2011-11-03T09:38:56.990090Z", "url": "https://files.pythonhosted.org/packages/8d/61/86a6217fa24f0c169a5e74ee6142cb43315129c5fe287d983d93baeb6017/zope.testing-3.10.3.tar.gz", "yanked": false}], "3.4": [{"comment_text": "", "digests": {"md5": "5dbfed50da0169daff042da56f9bc439", "sha256": "25edd34678898b67f1661cf5bc5662b0879007b60f79bf7dfa7a96d70d13cac7"}, "downloads": -1, "filename": "zope.testing-3.4.tar.gz", "has_sig": false, "md5_digest": "5dbfed50da0169daff042da56f9bc439", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132025, "upload_time": "2007-03-29T19:28:24", "upload_time_iso_8601": "2007-03-29T19:28:24Z", "url": "https://files.pythonhosted.org/packages/aa/73/d93885b80dd8bc111fa8b4ec65cc640af7a3bf0e52dd394fad688df704c6/zope.testing-3.4.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "3e482a31cc6c6dac8d7abd0b0e146da4", "sha256": "e5dd84255dd0567a0fc12154c1f42a7501d89c350646c1b285dafd30ae9a9ff7"}, "downloads": -1, "filename": "zope.testing-3.5.0.tar.gz", "has_sig": false, "md5_digest": "3e482a31cc6c6dac8d7abd0b0e146da4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144129, "upload_time": "2007-07-19T15:03:25", "upload_time_iso_8601": "2007-07-19T15:03:25Z", "url": "https://files.pythonhosted.org/packages/c5/30/6ec9d1de0ce1359deb3ea901e82355414f006fc29593f604b62ad6cd9c4c/zope.testing-3.5.0.tar.gz", "yanked": false}], "3.5.1": [{"comment_text": "", "digests": {"md5": "8f843c98ac3baf678db3e9fba42657f8", "sha256": "b6c45e7e6a6399f87112782218104ba4e3327aedd66e296b3312bb07d3d78752"}, "downloads": -1, "filename": "zope.testing-3.5.1.tar.gz", "has_sig": false, "md5_digest": "8f843c98ac3baf678db3e9fba42657f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135713, "upload_time": "2007-08-14T22:19:40", "upload_time_iso_8601": "2007-08-14T22:19:40Z", "url": "https://files.pythonhosted.org/packages/02/fc/b692932f37d719ca6723a6d18bca092f8a4e00d16da8022f3d6985a83d0c/zope.testing-3.5.1.tar.gz", "yanked": false}], "3.5.3": [{"comment_text": "", "digests": {"md5": "92da71e8d7816881a31385588ab8d1ef", "sha256": "a2c8f400545aa7069ea08b2259e9d4245a32fedcd0a237dd37e22eca09c58809"}, "downloads": -1, "filename": "zope.testing-3.5.3-py2.4.egg", "has_sig": false, "md5_digest": "92da71e8d7816881a31385588ab8d1ef", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 315496, "upload_time": "2008-07-10T04:26:45", "upload_time_iso_8601": "2008-07-10T04:26:45Z", "url": "https://files.pythonhosted.org/packages/f4/e4/258ea8b564c8fe60502e4745598c009b13e51903ccb10415fe3ec9177a57/zope.testing-3.5.3-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bbe80c2cf8b34acd65c6caa9280bdfe", "sha256": "7855c81bbfd590881820a57bffa73581f182eae1104a8b8eafb3306445f7271a"}, "downloads": -1, "filename": "zope.testing-3.5.3.tar.gz", "has_sig": false, "md5_digest": "1bbe80c2cf8b34acd65c6caa9280bdfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140309, "upload_time": "2008-07-10T04:26:47", "upload_time_iso_8601": "2008-07-10T04:26:47Z", "url": "https://files.pythonhosted.org/packages/8c/16/eb016b32ae21bd8dce828f501dce0179f234017f0bda2bad9fe1212b62a6/zope.testing-3.5.3.tar.gz", "yanked": false}], "3.5.4": [{"comment_text": "", "digests": {"md5": "ca2fa30ed0d8dbfc86e23f94ecf2fc98", "sha256": "5a9599d2392052d8a4bc6d9234522fef2028f04259d5231f360739fb3b81d47d"}, "downloads": -1, "filename": "zope.testing-3.5.4.tar.gz", "has_sig": false, "md5_digest": "ca2fa30ed0d8dbfc86e23f94ecf2fc98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 141618, "upload_time": "2008-08-01T17:21:52", "upload_time_iso_8601": "2008-08-01T17:21:52Z", "url": "https://files.pythonhosted.org/packages/7e/6e/b9f03fe4c861fe6cb495b216b4900a4ba11a8a84fc5e004ad7b5768dccf0/zope.testing-3.5.4.tar.gz", "yanked": false}], "3.5.5": [{"comment_text": "", "digests": {"md5": "f95afacccd0b8a076f2181a5b2aa4daf", "sha256": "feaebb2086e219c8ba56c546efdd21c45366be3c502342370909253148ee910b"}, "downloads": -1, "filename": "zope.testing-3.5.5.tar.gz", "has_sig": false, "md5_digest": "f95afacccd0b8a076f2181a5b2aa4daf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 141797, "upload_time": "2008-08-27T05:03:42", "upload_time_iso_8601": "2008-08-27T05:03:42Z", "url": "https://files.pythonhosted.org/packages/6a/56/dc7a9077eb3be49c6324b4bcd076568710789d4f6b4c2d49c33d772124ef/zope.testing-3.5.5.tar.gz", "yanked": false}], "3.5.6": [{"comment_text": "", "digests": {"md5": "754396abeaf8c22d992e1241cde31258", "sha256": "85b4db13258f892dcd71f95f96075c3eb6d5e56d162eccf1071c9f8b1e935c1c"}, "downloads": -1, "filename": "zope.testing-3.5.6.tar.gz", "has_sig": false, "md5_digest": "754396abeaf8c22d992e1241cde31258", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 138592, "upload_time": "2008-08-27T08:05:48", "upload_time_iso_8601": "2008-08-27T08:05:48Z", "url": "https://files.pythonhosted.org/packages/6a/82/2d07c8d79dbaa9b86998f5f9261ffbb9f0cfe58042dc131ae604218d7ac5/zope.testing-3.5.6.tar.gz", "yanked": false}], "3.6.0": [{"comment_text": "", "digests": {"md5": "54463270dc2d46678afc06e88590b7cd", "sha256": "da1cf24d607cfe9395c1aa70b2fc0e7272fd90cd2838e317ac64e3a907adae30"}, "downloads": -1, "filename": "zope.testing-3.6.0.tar.gz", "has_sig": false, "md5_digest": "54463270dc2d46678afc06e88590b7cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146166, "upload_time": "2008-07-11T02:49:25", "upload_time_iso_8601": "2008-07-11T02:49:25Z", "url": "https://files.pythonhosted.org/packages/9e/72/624a1a6b2c2e5aadfda00bcc66f20272c6af45496a4c8489519b225fd9cd/zope.testing-3.6.0.tar.gz", "yanked": false}], "3.7.0": [{"comment_text": "", "digests": {"md5": "3a6fdb60fe771b7ea7d31d8f74259dbc", "sha256": "21a98a7256b4eb51dcc112f8dce1de77ff87a5a1a586f2c006a768d70070bbfd"}, "downloads": -1, "filename": "zope.testing-3.7.0.tar.gz", "has_sig": false, "md5_digest": "3a6fdb60fe771b7ea7d31d8f74259dbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 152751, "upload_time": "2008-09-24T14:10:10", "upload_time_iso_8601": "2008-09-24T14:10:10Z", "url": "https://files.pythonhosted.org/packages/1b/6f/6e11c76c3addbb4f04c06d94f0e294772de97bc418e7fce42a05736804a2/zope.testing-3.7.0.tar.gz", "yanked": false}], "3.7.1": [{"comment_text": "", "digests": {"md5": "23e9389228c79f4343e6b299d7d51fc0", "sha256": "0bd7259ae362497c66944ed931cc6aa7e6d2bc9f5458586b88e48aafadd4a770"}, "downloads": -1, "filename": "zope.testing-3.7.1.tar.gz", "has_sig": false, "md5_digest": "23e9389228c79f4343e6b299d7d51fc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 149794, "upload_time": "2008-10-17T20:11:47", "upload_time_iso_8601": "2008-10-17T20:11:47Z", "url": "https://files.pythonhosted.org/packages/ce/8b/8a3c5006a563a90c5bc60237369778e2ea3b5084608cb2c472cffc6e9d08/zope.testing-3.7.1.tar.gz", "yanked": false}], "3.7.2": [{"comment_text": "", "digests": {"md5": "1ee6181fb9c3deec08ac61ddbab97705", "sha256": "fbb6eb501f7b7f6507f684e62e8b4483d021a92692be37890b3bc3803e5756ef"}, "downloads": -1, "filename": "zope.testing-3.7.2.tar.gz", "has_sig": false, "md5_digest": "1ee6181fb9c3deec08ac61ddbab97705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 152675, "upload_time": "2009-04-13T21:33:58", "upload_time_iso_8601": "2009-04-13T21:33:58.014989Z", "url": "https://files.pythonhosted.org/packages/87/0e/1beca979691588a80abb96cd1d03b5de78176c677151b951acccfcb77431/zope.testing-3.7.2.tar.gz", "yanked": false}], "3.7.3": [{"comment_text": "", "digests": {"md5": "5b4beacff550fb306fb49500679080cf", "sha256": "5da93546f3014ee91cf0ae194b8259773563be798a6fb075a52491165b28a286"}, "downloads": -1, "filename": "zope.testing-3.7.3.tar.gz", "has_sig": true, "md5_digest": "5b4beacff550fb306fb49500679080cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155297, "upload_time": "2009-04-22T15:57:31", "upload_time_iso_8601": "2009-04-22T15:57:31.842898Z", "url": "https://files.pythonhosted.org/packages/18/3a/d972abdde21a7b167d84f6ecc5e3b34e6fb30cc2b03492cbc4162d71f016/zope.testing-3.7.3.tar.gz", "yanked": false}], "3.7.4": [{"comment_text": "", "digests": {"md5": "c63c0c4b8b44cbf0da2294850cf514b5", "sha256": "ec80c0531c6a2d8fac79e31d5277bf0c896e785e27bfefee43f253bf82577ccb"}, "downloads": -1, "filename": "zope.testing-3.7.4.tar.gz", "has_sig": false, "md5_digest": "c63c0c4b8b44cbf0da2294850cf514b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153976, "upload_time": "2009-05-01T14:48:00", "upload_time_iso_8601": "2009-05-01T14:48:00.996001Z", "url": "https://files.pythonhosted.org/packages/c7/25/09601685c272979827aaffe46720984532bb170e3810e045a3095543f800/zope.testing-3.7.4.tar.gz", "yanked": false}], "3.7.5": [{"comment_text": "", "digests": {"md5": "78d0483a49cb454c94d9fc101debd7f6", "sha256": "d8f0d61035103838afb4355fc68b0cd74a40142072995168d71505ffa2936f3b"}, "downloads": -1, "filename": "zope.testing-3.7.5.tar.gz", "has_sig": false, "md5_digest": "78d0483a49cb454c94d9fc101debd7f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 152471, "upload_time": "2009-06-08T09:00:26", "upload_time_iso_8601": "2009-06-08T09:00:26.987952Z", "url": "https://files.pythonhosted.org/packages/b7/e7/446cf4ac6c996b28a1a0ae3262ed27d7f89bffec2a3b083a07ffbfb2a35b/zope.testing-3.7.5.tar.gz", "yanked": false}], "3.7.6": [{"comment_text": "", "digests": {"md5": "bf3d2f12b1b1da598f7827e4a1679a3a", "sha256": "d32ed9f7ce72b4485b3ed7c6e7e708cb96fdb635a98d9949966310cbeb67ac1e"}, "downloads": -1, "filename": "zope.testing-3.7.6.tar.gz", "has_sig": false, "md5_digest": "bf3d2f12b1b1da598f7827e4a1679a3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157071, "upload_time": "2009-07-02T15:50:48", "upload_time_iso_8601": "2009-07-02T15:50:48.619458Z", "url": "https://files.pythonhosted.org/packages/c4/d7/08bc883344fc251afc40935d04496d036e502b40de33e22a127c2d1e97ff/zope.testing-3.7.6.tar.gz", "yanked": false}], "3.7.7": [{"comment_text": "", "digests": {"md5": "c7c2c6628b4c97244ca4c563ee5d6fc2", "sha256": "8d990cbfaccd628fdbc2a4c05f3a97afc9a2a13c35be4571d5d77a8949275a7d"}, "downloads": -1, "filename": "zope.testing-3.7.7.tar.gz", "has_sig": false, "md5_digest": "c7c2c6628b4c97244ca4c563ee5d6fc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158214, "upload_time": "2009-07-15T08:34:40", "upload_time_iso_8601": "2009-07-15T08:34:40.746988Z", "url": "https://files.pythonhosted.org/packages/99/a8/2a7152f5dc23f29e376df79829964023c7d93f7a201d9ddeedcc89496375/zope.testing-3.7.7.tar.gz", "yanked": false}], "3.8.0": [{"comment_text": "", "digests": {"md5": "03f72f64c1f4b51ad73f766950871815", "sha256": "7ad9129f57d4455835ef1a618ec4df1b653d2da075761d8b5e303d18989ee5e9"}, "downloads": -1, "filename": "zope.testing-3.8.0.tar.gz", "has_sig": false, "md5_digest": "03f72f64c1f4b51ad73f766950871815", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157393, "upload_time": "2009-07-24T10:37:12", "upload_time_iso_8601": "2009-07-24T10:37:12.327016Z", "url": "https://files.pythonhosted.org/packages/11/e2/9297ba783586297c107c02c8833b1405d72027c1a9e784048c47b97527a5/zope.testing-3.8.0.tar.gz", "yanked": false}], "3.8.1": [{"comment_text": "", "digests": {"md5": "748f272dd31b7968478196ab91110a0f", "sha256": "9f08e0d8a2f8bc389814e0c5c2e427c62cea218800d4e806c0965808b105a1ce"}, "downloads": -1, "filename": "zope.testing-3.8.1.tar.gz", "has_sig": false, "md5_digest": "748f272dd31b7968478196ab91110a0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159017, "upload_time": "2009-08-12T10:25:38", "upload_time_iso_8601": "2009-08-12T10:25:38.218814Z", "url": "https://files.pythonhosted.org/packages/96/47/573b4920b625a61be5ceb867d5d9227c0a2fdc5a2cd15d55a67f099fd0cf/zope.testing-3.8.1.tar.gz", "yanked": false}], "3.8.2": [{"comment_text": "", "digests": {"md5": "18e5741f42e2b92233aaa13b9bd496f1", "sha256": "92f2a3d31326be0dbb615f05b208202473af8e3ff855916da791b4776dc6f8a2"}, "downloads": -1, "filename": "zope.testing-3.8.2.zip", "has_sig": true, "md5_digest": "18e5741f42e2b92233aaa13b9bd496f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255588, "upload_time": "2009-09-15T15:56:38", "upload_time_iso_8601": "2009-09-15T15:56:38.102872Z", "url": "https://files.pythonhosted.org/packages/59/53/a0330544e5d25c5de1a49224fc7d5e9ffbfe8fafc5cbde97cc53b04180d3/zope.testing-3.8.2.zip", "yanked": false}], "3.8.3": [{"comment_text": "", "digests": {"md5": "1dd78003d6914f67584725ce01c86311", "sha256": "f530853f26e0c7deba300700ac3251e410e65169844a80d631aa6f297f6ae6fc"}, "downloads": -1, "filename": "zope.testing-3.8.3.tar.gz", "has_sig": false, "md5_digest": "1dd78003d6914f67584725ce01c86311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163020, "upload_time": "2009-09-21T20:00:39", "upload_time_iso_8601": "2009-09-21T20:00:39.044574Z", "url": "https://files.pythonhosted.org/packages/b8/6c/68ba2a74ee0d6732cb3ddbb5e5a41bdb339c52abe2b2a0883d987bc9029b/zope.testing-3.8.3.tar.gz", "yanked": false}], "3.8.4": [{"comment_text": "", "digests": {"md5": "841dbe67da31fcfc7a5ac19a73a75c95", "sha256": "72225ff03816d056c2a1f4d7810f85d798297005663c9bffcff9d25a7820246b"}, "downloads": -1, "filename": "zope.testing-3.8.4.tar.gz", "has_sig": false, "md5_digest": "841dbe67da31fcfc7a5ac19a73a75c95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 168311, "upload_time": "2009-12-18T09:24:11", "upload_time_iso_8601": "2009-12-18T09:24:11.464443Z", "url": "https://files.pythonhosted.org/packages/f1/f0/d12b2017af3e03fea114c5e3d0bb32a598aee5261008ec0b7ef4d0ba558e/zope.testing-3.8.4.tar.gz", "yanked": false}], "3.8.5": [{"comment_text": "", "digests": {"md5": "e6df15a96250499168c2dbdfd3a0b773", "sha256": "067f0ffefa1844635a0495330ea7f6673df8fa4c8778839859fdf2b31bb42776"}, "downloads": -1, "filename": "zope.testing-3.8.5.tar.gz", "has_sig": false, "md5_digest": "e6df15a96250499168c2dbdfd3a0b773", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85322, "upload_time": "2009-12-23T07:23:57", "upload_time_iso_8601": "2009-12-23T07:23:57.514796Z", "url": "https://files.pythonhosted.org/packages/e1/a0/f0b20646be047fa4b2ec74e26b7d6f1d4f1b149e4e4405642dd381073908/zope.testing-3.8.5.tar.gz", "yanked": false}], "3.8.6": [{"comment_text": "", "digests": {"md5": "3916e01845400f261c7df087c3050418", "sha256": "34a90fd1c1527fa8e14a520cfc1050c64b98a8e00df67f294a5d2a53c5d3fa10"}, "downloads": -1, "filename": "zope.testing-3.8.6.tar.gz", "has_sig": false, "md5_digest": "3916e01845400f261c7df087c3050418", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191010, "upload_time": "2009-12-23T08:30:24", "upload_time_iso_8601": "2009-12-23T08:30:24.316730Z", "url": "https://files.pythonhosted.org/packages/02/92/09ea69d86abaa9333f0a43db75a0f8cb88577119c9bfed2f461b4e71075a/zope.testing-3.8.6.tar.gz", "yanked": false}], "3.8.7": [{"comment_text": "", "digests": {"md5": "8c504d62e7258c93356c3447d483f844", "sha256": "699b99082137016f615f1874cae03a8cb279d3a0b228f635ec429b064e83839f"}, "downloads": -1, "filename": "zope.testing-3.8.7.tar.gz", "has_sig": false, "md5_digest": "8c504d62e7258c93356c3447d483f844", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191168, "upload_time": "2010-01-26T13:47:42", "upload_time_iso_8601": "2010-01-26T13:47:42.216324Z", "url": "https://files.pythonhosted.org/packages/3d/7c/93e73ef6bb614a87e3b6f60edf2a31126e9f58ebc575bfd424fe197966e4/zope.testing-3.8.7.tar.gz", "yanked": false}], "3.9.0": [{"comment_text": "", "digests": {"md5": "e5bd020a81bbde64dc857bba56c8158e", "sha256": "f1cea5153d9472cd60a1ca3f1e78379595f5064cee02c2fbdd862de2b80b23af"}, "downloads": -1, "filename": "zope.testing-3.9.0.tar.gz", "has_sig": false, "md5_digest": "e5bd020a81bbde64dc857bba56c8158e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 195357, "upload_time": "2010-03-12T20:48:12", "upload_time_iso_8601": "2010-03-12T20:48:12.033978Z", "url": "https://files.pythonhosted.org/packages/ab/90/4024a9601c82cd49d99d5d095ae0bf4403eacf53af202f0a9cd5ca0d1432/zope.testing-3.9.0.tar.gz", "yanked": false}], "3.9.1": [{"comment_text": "", "digests": {"md5": "126b6aa34a37a1d1ac82774742a480bd", "sha256": "672ef8f50c8b9f6629238ff13c6a4b78faeee02699650ea79db235c0b14bdba9"}, "downloads": -1, "filename": "zope.testing-3.9.1.tar.gz", "has_sig": false, "md5_digest": "126b6aa34a37a1d1ac82774742a480bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 195478, "upload_time": "2010-03-14T23:05:25", "upload_time_iso_8601": "2010-03-14T23:05:25.238727Z", "url": "https://files.pythonhosted.org/packages/88/2b/eb0b8690c449f79febb54aee93b87a10ff86d140c3d175faa3126d3f3665/zope.testing-3.9.1.tar.gz", "yanked": false}], "3.9.2": [{"comment_text": "", "digests": {"md5": "b33a544b6294def8f0af2f5c353a812c", "sha256": "ec43007a22a2c5d7a98f71e3f1f790e0a847717c8f695664d0eb56e3d0881e84"}, "downloads": -1, "filename": "zope.testing-3.9.2.tar.gz", "has_sig": false, "md5_digest": "b33a544b6294def8f0af2f5c353a812c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191983, "upload_time": "2010-03-15T10:39:31", "upload_time_iso_8601": "2010-03-15T10:39:31.734229Z", "url": "https://files.pythonhosted.org/packages/95/ba/caa763a8446d4b2b74d9ee7bc185dc47a37d99d695bff113365cd7136e6a/zope.testing-3.9.2.tar.gz", "yanked": false}], "3.9.3": [{"comment_text": "", "digests": {"md5": "1059fb0e533a55b4a340e3a55269e617", "sha256": "9b4268669978d1cf3ee54169c1598e0c870f9042f3e429255cdd44c888782099"}, "downloads": -1, "filename": "zope.testing-3.9.3.tar.gz", "has_sig": false, "md5_digest": "1059fb0e533a55b4a340e3a55269e617", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 196361, "upload_time": "2010-03-26T18:10:38", "upload_time_iso_8601": "2010-03-26T18:10:38.600404Z", "url": "https://files.pythonhosted.org/packages/e2/e5/ee9a1052d84f577a36a778159ed2fe5ed8afec9344f00ad15ba5ea863e4e/zope.testing-3.9.3.tar.gz", "yanked": false}], "3.9.4": [{"comment_text": "", "digests": {"md5": "725771207ecd3568ce25f1f7111e5190", "sha256": "dd2f14329b69bd7cf41b353890605aa579522c6ba9f3466afc5d608e7d2960f2"}, "downloads": -1, "filename": "zope.testing-3.9.4.tar.gz", "has_sig": false, "md5_digest": "725771207ecd3568ce25f1f7111e5190", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 176497, "upload_time": "2010-04-13T12:31:38", "upload_time_iso_8601": "2010-04-13T12:31:38.748324Z", "url": "https://files.pythonhosted.org/packages/c9/ff/f801c8da7438573b4e4167e101d1e844222309bb87ec352cd8cd033e5454/zope.testing-3.9.4.tar.gz", "yanked": false}], "3.9.5": [{"comment_text": "", "digests": {"md5": "39092299d71c5dea5378c912df4cc84c", "sha256": "01e42082a367059fcfbbe5e6a189785c8bd38aca81c049e2995920b59404f79e"}, "downloads": -1, "filename": "zope.testing-3.9.5.tar.gz", "has_sig": false, "md5_digest": "39092299d71c5dea5378c912df4cc84c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 178336, "upload_time": "2010-05-19T17:26:05", "upload_time_iso_8601": "2010-05-19T17:26:05.912788Z", "url": "https://files.pythonhosted.org/packages/42/84/935ab808a4d06ba09c1148cb26be34e04bbe642a69c7fbb959fb07957264/zope.testing-3.9.5.tar.gz", "yanked": false}], "3.9.6": [{"comment_text": "", "digests": {"md5": "05340351edf808808bef6da9c6e55748", "sha256": "0e31b42b165d548b463a9399c4f456551fb4cfdaa1194f51f24ea507adc9e74e"}, "downloads": -1, "filename": "zope.testing-3.9.6.tar.gz", "has_sig": false, "md5_digest": "05340351edf808808bef6da9c6e55748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 175526, "upload_time": "2011-02-21T13:57:05", "upload_time_iso_8601": "2011-02-21T13:57:05.463316Z", "url": "https://files.pythonhosted.org/packages/2c/b6/2fcf168b953fc73c1e387e080c54176039cba32fc9f5bdb41ec556e27881/zope.testing-3.9.6.tar.gz", "yanked": false}], "3.9.7": [{"comment_text": "", "digests": {"md5": "8999f3d143d416dc3c8b2a5bd6f33e28", "sha256": "80d6a5327dc382b6a9791c0ed2953f37b67a2c18dcc941a292d678fc07d77364"}, "downloads": -1, "filename": "zope.testing-3.9.7.tar.gz", "has_sig": false, "md5_digest": "8999f3d143d416dc3c8b2a5bd6f33e28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 177742, "upload_time": "2011-11-02T16:28:02", "upload_time_iso_8601": "2011-11-02T16:28:02.019826Z", "url": "https://files.pythonhosted.org/packages/cb/ad/92bef28619122440619d8ff1462b3c4fcb028522e4c072a26743394ee26e/zope.testing-3.9.7.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "156f8bfb52de4525eb7b10975c7fe9fb", "sha256": "6856574430c6bab4fd8d7336b5944a8af3918e774b79002fefdc306222118b23"}, "downloads": -1, "filename": "zope.testing-4.0.0.tar.gz", "has_sig": false, "md5_digest": "156f8bfb52de4525eb7b10975c7fe9fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36958, "upload_time": "2011-11-09T09:18:29", "upload_time_iso_8601": "2011-11-09T09:18:29.308537Z", "url": "https://files.pythonhosted.org/packages/f4/85/61fafc0536243d749d0002c4ddcc3b945cd1bee61278c451f48a3c8ec747/zope.testing-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "50f8e35098770b730cda439af60ece98", "sha256": "4df78e4db98dfbcf0119e34357343c0be143cbad1226afd23b27b763fc027a8d"}, "downloads": -1, "filename": "zope.testing-4.1.0.tar.gz", "has_sig": false, "md5_digest": "50f8e35098770b730cda439af60ece98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50844, "upload_time": "2012-01-29T15:25:37", "upload_time_iso_8601": "2012-01-29T15:25:37.876938Z", "url": "https://files.pythonhosted.org/packages/87/f7/7a8ed57a6211c19c49160ae32d51aa762ebefc043c1e67cd1e395339f9d3/zope.testing-4.1.0.tar.gz", "yanked": false}], "4.1.0dev-r124241": [{"comment_text": "", "digests": {"md5": "8714f1c3850153491143c2d98134178c", "sha256": "83e777d7ab2f5c9273a0423938ad17e13f398201d004cd35c432df43c0463db7"}, "downloads": -1, "filename": "zope.testing-4.1.0dev-r124241.tar.gz", "has_sig": false, "md5_digest": "8714f1c3850153491143c2d98134178c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50876, "upload_time": "2012-01-29T15:24:14", "upload_time_iso_8601": "2012-01-29T15:24:14.724661Z", "url": "https://files.pythonhosted.org/packages/ca/fa/ab3c83655968c1872a77568c98815148becee636f4ef79efd896590ee610/zope.testing-4.1.0dev-r124241.tar.gz", "yanked": false}], "4.1.1": [{"comment_text": "", "digests": {"md5": "2e3829841090d6adff718b8b73c87b6b", "sha256": "877e795f2c40f7eeda42ca59243501bc5fb05069b962c997fb3ef9a02f072f50"}, "downloads": -1, "filename": "zope.testing-4.1.1.tar.gz", "has_sig": false, "md5_digest": "2e3829841090d6adff718b8b73c87b6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50873, "upload_time": "2012-02-02T00:12:41", "upload_time_iso_8601": "2012-02-02T00:12:41.579091Z", "url": "https://files.pythonhosted.org/packages/63/7d/fa7f80c898e5499c775c70561cc64955ab875639e16ffbc240ca685e5cdf/zope.testing-4.1.1.tar.gz", "yanked": false}], "4.1.2": [{"comment_text": "", "digests": {"md5": "01c30c342c6a18002a762bd5d320a6e9", "sha256": "c40f93fbc87957eaa2f511c18029e0160e3c3d07e5d5b2b51506f745f41dd027"}, "downloads": -1, "filename": "zope.testing-4.1.2.zip", "has_sig": false, "md5_digest": "01c30c342c6a18002a762bd5d320a6e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66055, "upload_time": "2013-02-20T02:12:44", "upload_time_iso_8601": "2013-02-20T02:12:44.056350Z", "url": "https://files.pythonhosted.org/packages/bc/60/7f44c2390350ce19c8b4508b0c4250332558ed6320c40770a12dbbd1ae5c/zope.testing-4.1.2.zip", "yanked": false}], "4.1.3": [{"comment_text": "", "digests": {"md5": "6c73c5b668a67fdc116a25b884058ed9", "sha256": "77269a793a054955b48791113722746d0230c9ab9fa9f48407f2066250599a0b"}, "downloads": -1, "filename": "zope.testing-4.1.3.tar.gz", "has_sig": false, "md5_digest": "6c73c5b668a67fdc116a25b884058ed9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50604, "upload_time": "2014-03-19T18:45:53", "upload_time_iso_8601": "2014-03-19T18:45:53.779366Z", "url": "https://files.pythonhosted.org/packages/e7/b4/82da57fab5b35a29b05cfb231408086609769027e9b90ef9a162efd5f3b9/zope.testing-4.1.3.tar.gz", "yanked": false}], "4.2.0": [{"comment_text": "", "digests": {"md5": "0cac733161c060e7117f03b5898bdcc2", "sha256": "a6f852ad6fd04eecf8d5180de162c7b08ced252c03a394cc66445a4cc67a10c3"}, "downloads": -1, "filename": "zope.testing-4.2.0.tar.gz", "has_sig": true, "md5_digest": "0cac733161c060e7117f03b5898bdcc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56151, "upload_time": "2015-06-01T17:13:15", "upload_time_iso_8601": "2015-06-01T17:13:15.274061Z", "url": "https://files.pythonhosted.org/packages/b9/74/37e57469f94b52e543e919404a32f78299d9138f86a3f9e6a19bab8a7f60/zope.testing-4.2.0.tar.gz", "yanked": false}], "4.3.0": [{"comment_text": "", "digests": {"md5": "b76e9140633184dde056883cef150d82", "sha256": "c1fc6965119490aae60d0efc5fb56d6efc1bea7c8c4a950e866a16dab21d16fe"}, "downloads": -1, "filename": "zope.testing-4.3.0.tar.gz", "has_sig": false, "md5_digest": "b76e9140633184dde056883cef150d82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64769, "upload_time": "2015-07-15T22:14:53", "upload_time_iso_8601": "2015-07-15T22:14:53.038902Z", "url": "https://files.pythonhosted.org/packages/4f/7a/2fc772787431be0fb0b2645d1f394754492c3ad1edda021bed52f64e71c5/zope.testing-4.3.0.tar.gz", "yanked": false}], "4.4.0": [{"comment_text": "", "digests": {"md5": "135f2cf1bccd3c09be39c39ae2c8fde9", "sha256": "59883792fa53d993af64c7f82311bfe21d81068ed11035284a719a5e8c018f9f"}, "downloads": -1, "filename": "zope.testing-4.4.0.tar.gz", "has_sig": false, "md5_digest": "135f2cf1bccd3c09be39c39ae2c8fde9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67639, "upload_time": "2015-07-16T23:07:23", "upload_time_iso_8601": "2015-07-16T23:07:23.446508Z", "url": "https://files.pythonhosted.org/packages/51/13/15e7f397d37bca1be6e096f3417bea6e7bd4a3025b0a7ebfa13c03023fa1/zope.testing-4.4.0.tar.gz", "yanked": false}], "4.4.1": [{"comment_text": "", "digests": {"md5": "65d156d1ea9530440e1284c869daca5b", "sha256": "6593db17bddee0c3a4e5709c4dfb637820dcdf94fdd43b8b11d7fe60a304061f"}, "downloads": -1, "filename": "zope.testing-4.4.1.tar.gz", "has_sig": false, "md5_digest": "65d156d1ea9530440e1284c869daca5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67038, "upload_time": "2015-07-17T11:20:38", "upload_time_iso_8601": "2015-07-17T11:20:38.853202Z", "url": "https://files.pythonhosted.org/packages/fb/10/5514679c3f23b0962c8cb3df4223ea633ff8e34631780a1467281684d11c/zope.testing-4.4.1.tar.gz", "yanked": false}], "4.5.0": [{"comment_text": "", "digests": {"md5": "def13af47eb8f00a6e4c5558563c6bdc", "sha256": "1a2418f715db09a39da7399fbfc2ff60c02bfad42fd9dd6c2d84c2fd61a76ffb"}, "downloads": -1, "filename": "zope.testing-4.5.0.tar.gz", "has_sig": false, "md5_digest": "def13af47eb8f00a6e4c5558563c6bdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72019, "upload_time": "2015-09-02T23:08:22", "upload_time_iso_8601": "2015-09-02T23:08:22.630015Z", "url": "https://files.pythonhosted.org/packages/a3/07/164a6bf2b6979e136986548e70807fbe15d6eaf13a6ea455c357dd8f616d/zope.testing-4.5.0.tar.gz", "yanked": false}], "4.6.0": [{"comment_text": "", "digests": {"md5": "552bda1ede6c2a4939b734e2b72230c2", "sha256": "0934da672ffa637cc1e5a5eb972951202720abe78098a133c18185a09c6f890c"}, "downloads": -1, "filename": "zope.testing-4.6.0.tar.gz", "has_sig": false, "md5_digest": "552bda1ede6c2a4939b734e2b72230c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62654, "upload_time": "2016-10-20T05:50:42", "upload_time_iso_8601": "2016-10-20T05:50:42.438894Z", "url": "https://files.pythonhosted.org/packages/fd/99/adba8abc72a3598befd25789822de82699bd5aecf268846b40a147a225e2/zope.testing-4.6.0.tar.gz", "yanked": false}], "4.6.1": [{"comment_text": "", "digests": {"md5": "6e226293cce7b4d3c2f19c18900a39eb", "sha256": "d1476211806bff27821b444f19b0ec934d08dd10f1b0662f2d737fe8cd3e46da"}, "downloads": -1, "filename": "zope.testing-4.6.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "6e226293cce7b4d3c2f19c18900a39eb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 64619, "upload_time": "2017-06-13T20:55:24", "upload_time_iso_8601": "2017-06-13T20:55:24.500068Z", "url": "https://files.pythonhosted.org/packages/d5/5f/906faf845b15e2a765a5c0c6b7598efb68a18401f822a75ae2f3d2a7b633/zope.testing-4.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44d9a4f5eac575055cce7f332fa7d99b", "sha256": "a65c15b8e35a2dde138bc29deac1116658fedeea41baa942147c1ffaab847def"}, "downloads": -1, "filename": "zope.testing-4.6.1.tar.gz", "has_sig": false, "md5_digest": "44d9a4f5eac575055cce7f332fa7d99b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59292, "upload_time": "2017-01-04T14:09:19", "upload_time_iso_8601": "2017-01-04T14:09:19.853625Z", "url": "https://files.pythonhosted.org/packages/f9/5f/bc694b25c0e3b4be2c5cd0cb211042bbd5a47b0abf67201bb2269e9854a5/zope.testing-4.6.1.tar.gz", "yanked": false}], "4.6.2": [{"comment_text": "", "digests": {"md5": "1fb6b0024707080a9b2d49bafb80b402", "sha256": "a529fb037148b41df264596a449974ef9d40e4006e73702a5cfdb4f215c0e1d8"}, "downloads": -1, "filename": "zope.testing-4.6.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1fb6b0024707080a9b2d49bafb80b402", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 64264, "upload_time": "2017-06-12T13:25:35", "upload_time_iso_8601": "2017-06-12T13:25:35.313817Z", "url": "https://files.pythonhosted.org/packages/fc/b7/93e6a116a4e88a4879a310a7cb0e99328f88366068806a6e47c3db68e163/zope.testing-4.6.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36c5e6857ba58a7c9121f45a10f25468", "sha256": "6f60f9847b33f3b63ad42cee67019f2013eb37384c49f7f77d624e2821293846"}, "downloads": -1, "filename": "zope.testing-4.6.2.tar.gz", "has_sig": false, "md5_digest": "36c5e6857ba58a7c9121f45a10f25468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62710, "upload_time": "2017-06-12T13:25:37", "upload_time_iso_8601": "2017-06-12T13:25:37.672297Z", "url": "https://files.pythonhosted.org/packages/14/b5/df1c3ff5a502d3106baedb0fbae17e66ad5d77d1ce270163eefe5a59708a/zope.testing-4.6.2.tar.gz", "yanked": false}], "4.7": [{"comment_text": "", "digests": {"md5": "e30040669305e129a3e2cbb6f61cef8c", "sha256": "32a9613fc8ed8f4992a854d1a05412615695bc90632c7aa858e9988b3827ee19"}, "downloads": -1, "filename": "zope.testing-4.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e30040669305e129a3e2cbb6f61cef8c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 64269, "upload_time": "2018-10-04T13:59:06", "upload_time_iso_8601": "2018-10-04T13:59:06.325785Z", "url": "https://files.pythonhosted.org/packages/14/d3/7849b49ab07065cb30380ad9a0bf4ea87ecd8cc456be95d32a5c4d8a6389/zope.testing-4.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13b45a1c9ec987e75a3f9e83b50d22a4", "sha256": "d66be8d1de37e8536ca58a1d9f4d89a68c9cc75cc0e788a175c8a20ae26003ea"}, "downloads": -1, "filename": "zope.testing-4.7.tar.gz", "has_sig": false, "md5_digest": "13b45a1c9ec987e75a3f9e83b50d22a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63474, "upload_time": "2018-10-04T13:59:08", "upload_time_iso_8601": "2018-10-04T13:59:08.102634Z", "url": "https://files.pythonhosted.org/packages/a2/95/2a2ed23bbb3dcf7916ff39bf349314304f6e4c4dd77d86e3930def52b45e/zope.testing-4.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e30040669305e129a3e2cbb6f61cef8c", "sha256": "32a9613fc8ed8f4992a854d1a05412615695bc90632c7aa858e9988b3827ee19"}, "downloads": -1, "filename": "zope.testing-4.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e30040669305e129a3e2cbb6f61cef8c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 64269, "upload_time": "2018-10-04T13:59:06", "upload_time_iso_8601": "2018-10-04T13:59:06.325785Z", "url": "https://files.pythonhosted.org/packages/14/d3/7849b49ab07065cb30380ad9a0bf4ea87ecd8cc456be95d32a5c4d8a6389/zope.testing-4.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13b45a1c9ec987e75a3f9e83b50d22a4", "sha256": "d66be8d1de37e8536ca58a1d9f4d89a68c9cc75cc0e788a175c8a20ae26003ea"}, "downloads": -1, "filename": "zope.testing-4.7.tar.gz", "has_sig": false, "md5_digest": "13b45a1c9ec987e75a3f9e83b50d22a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63474, "upload_time": "2018-10-04T13:59:08", "upload_time_iso_8601": "2018-10-04T13:59:08.102634Z", "url": "https://files.pythonhosted.org/packages/a2/95/2a2ed23bbb3dcf7916ff39bf349314304f6e4c4dd77d86e3930def52b45e/zope.testing-4.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:05 2020"}