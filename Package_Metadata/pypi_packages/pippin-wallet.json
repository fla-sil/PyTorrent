{"info": {"author": "Appditto LLC", "author_email": "hello@appditto.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Security :: Cryptography"], "description": "<p align=\"left\">  <img src=\"https://raw.githubusercontent.com/appditto/pippin_nano_wallet/master/assets/pippin_logo.svg?sanitize=true\" alt=\"Pippin Wallet\" width=\"256\" height=\"50\"> </p>\n\n[![PyPI](https://img.shields.io/pypi/v/pippin-wallet)](https://pypi.org/project/pippin-wallet/) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pippin-wallet) [![License](https://img.shields.io/github/license/bbedward/pippin_nano_wallet)](https://github.com/bbedward/pippin_nano_wallet/blob/master/LICENSE) [![Pipeline](https://gitlab.com/appditto/pippin_nano_wallet/badges/master/pipeline.svg)](https://gitlab.com/appditto/pippin_nano_wallet/pipelines)\n\nPippin is a production-ready, high-performance developer wallet for [Nano](https://nano.org) and [BANANO](https://banano.cc). Pippin's API is a drop-in replacement for the Nano developer wallet that is built in to the Nano node software.\n\n## About Pippin\n\nPippin is written in Python. It achieves high performance across the board using libraries such as [asyncio](https://docs.python.org/3/library/asyncio.html), [uvloop](https://github.com/MagicStack/uvloop), [aiohttp](https://aiohttp.readthedocs.io/en/stable/), [asyncpg](https://github.com/MagicStack/asyncpg)/[aiosqlite](https://github.com/jreese/aiosqlite)/[aiomysql](https://github.com/aio-libs/aiomysql), and [rapidjson](https://rapidjson.org/).\n\nFor block signing and work generation, Pippin uses [nanopy](https://github.com/npy0/nanopy), which is a high-performance library that utilizes C-bindings for blake2b and ed25519.\n\n## Benefits of Pippin\n\nThe Nano developer wallet (aka \"node wallet\") is not recommended for production use. One of the goals of Pippin is to provide a production-ready external key management that can be used by developers who are using Nano.\n\nPippin is the first drop-in replacement for the Nano developer wallet. It's incredibly easy to transition to Pippin if you are already using the Nano developer wallet.\n\n- Pippin is independent of the node. You can use Pippin with any public RPC, so you don't have to run your own node\n- Pippin is extremely fast and lightweight\n- Pippin supports encrypted secret keys\n- Pippin natively supports [DPoW](https://dpow.nanocenter.org) and [BPoW](https://bpow.banano.cc)\n- Pippin supports multiple database backends (SQLite, PostgreSQL, and MySQL)\n\nPippin can be used by exchanges, games, payment processors, tip bots, faucets, casinos, and a lot more.\n\n## Pippin Performance\n\n<p align=\"center\">  <img src=\"https://raw.githubusercontent.com/appditto/pippin_nano_wallet/master/assets/benchmark.png\" alt=\"Pippin Benchmarks\"> </p>\n\nThe benchmark script that was used is available [here](https://raw.githubusercontent.com/appditto/pippin_nano_wallet/master/benchmark.py)\n\nThere were 3 independent runs for each wallet, 62 blocks each, same node, and the same work peer. Pippin was consistently **twice as fast** versus the node wallet.\n\n## How Pippin Works\n\nPippin provides an API that mimics the [Nano Wallet RPC Protocol](https://docs.nano.org/commands/rpc-protocol/#wallet-rpcs)\n\nEvery wallet-related RPC gets intercepted by Pippin and handled internally. It builds the blocks and signs them using locally-stored keys, it uses a node to publish the blocks.\n\nEvery non-wallet related RPC gets proxied to the publishing node. Which means you can make all of your RPC requests directly to Pippin whether they are wallet-related or not.\n\n## API Documentation\n\nRecommended reference is the [NANO RPC documentation](https://docs.nano.org/commands/rpc-protocol/#wallet-rpcs), Pippin's APIs are mostly identical.\n\nYou send an HTTP Post request to pippin with the desired action and parameters, example:\n\n```\n{\n    \"action\": \"accounts_create\",\n    \"wallet\": \"12345\",\n    \"count\": 100\n}\n```\n\n### Supported\n\n- `wallet_create`\n- `account_create`\n- `accounts_create`\n- `account_list`\n- `receive`\n- `send` - Use the **id** parameter to prevent duplicate sends!\n- `account_representative_set`\n- `password_change` - This will also set a password, if one isn't already set\n- `password_enter`\n- `password_valid`\n- `wallet_representative_set`\n- `wallet_add` - This is for adding ad-hoc private keys to a wallet\n- `wallet_lock`\n- `wallet_locked`\n- `wallet_balances`\n- `wallet_frontiers`\n- `wallet_pending`\n- `wallet_destroy`\n- `wallet_change_seed`\n- `wallet_contains`\n- `wallet_representative`\n- `receive_all` - Not in the nano API, it takes a `wallet` and it will receive every pending block in that wallet (respecting `receive_minimum`).\n\n### Differences: Pippin vs NANO Node Wallet\n\nThese are the known differences between Pippin's API and the Nano node wallet API\n\n**Different Behavior**\n\nAPIs that are different between Pippin and the Nano node wallet.\n\n- `account_list` accepts a `count` parameter that defaults to 1000\n- Pippin has an `auto_receive_on_send` option that will automatically receive pending blocks when you do a `send`, it will only do this if balance isnt high enough to make the transaction.\n- `account_create` does not accept an index\n\n**Fuzzy Behavior**\n\nThe Nano documentation isn't perfectly clear on these, but these are how Pippin behaves.\n\n- `wallet_change_seed` will result in the wallet no longer being locked, if it is. The wallet has to already be unlocked before you can use this RPC, though.\n\n**Missing/Not Implemented**\n\nAPIs that the Nano node wallet supports but are not implemented in Pippin.\n\n- `account_move`\n- `account_remove`\n- `receive_minimum` - Receive minimum can be set in `config.yaml`\n- `receive_minimum_set`\n- `wallet_add_watch`\n- `wallet_history`\n- `search_pending`\n- `search_pending_all`\n- `wallet_export`\n- `wallet_ledger`\n- `wallet_republish`\n- `wallet_work_get`\n- `work_get`\n- `work_set`\n\n## CLI Documentation\n\nPippin has a CLI interface available, you can see available subcommands with:\n\n`pippin-cli --help`\n\nThe primary goal of the CLI is key management. It's a more secure way to import a seed and backup your seed.\n\nFor example a typical flow of creating a new wallet with a specific seed might look like (add --encrypt to wallet_change_seed if you want to lock the wallet with a password):\n\n```\n% pippin-cli wallet_create\nWallet created, ID: d897b5ec-1897-4e7e-8a90-4526f454c8de\nFirst account: nano_31a7wzm4rayik1hthahzkekntsqz86u6dko5adg8jxueehzt5yhmhsqsuzdy\n% pippin-cli wallet_change_seed --wallet d897b5ec-1897-4e7e-8a90-4526f454c8de\nEnter new wallet seed: <hidden_input>\nSeed changed for wallet d897b5ec-1897-4e7e-8a90-4526f454c8de\nFirst account: nano_3ejy6ha1iuqhi5cshhifu57p5othdcymfbzsmxhjucdks53eh41yd4qpjtxf\n```\n\nTo backup a seed (**warning:** this prints seed to stdout)\n\n```\n% pippin-cli wallet_view_seed --wallet <id>\n```\n\n## Setting up Pippin\n\n### Requirements\n\n- Python 3.6 or newer\n- GCC, for MacOS and Linux\n- libb2 (blake2b)\n- A Redis server\n\n**MacOS Instructions**\n\n1) Install [homebrew](https://brew.sh/), if it isn't already installed\n\n2) Install Redis (skip if you already have done so)\n\n```\n% brew install gcc@9 python libb2 redis\n% launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\n```\n\nTo start redis at boot (optional):\n\n```\n% ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\n```\n\nYou may find it convenient to priorize homebrew binaries by including the install location first in your PATH.\n\n```\n% export PATH=/usr/local/bin:$PATH\n```\n\nTo make it permanent:\n\n```\n# Catalina\n% echo \"export PATH=/usr/local/bin:$PATH\" >> ~/.zprofile\n# Others\n% echo \"export PATH=/usr/local/bin:$PATH\" >> ~/.profile\n```\n\n**Ubuntu 18.04**\n\nInstructions for other Linux distributions should be similar.\n\n```\n% sudo apt install build-essential python3.6 python3.6-dev python3-pip libb2-dev redis-server\n```\n\n### Installing Pippin\n\nFirst, update PIP to latest version.\n\n```\n% pip3 install -U pip\n```\n\nFor MacOS you might need to set the following environment variable:\n\n```\nexport CC=/usr/local/bin/gcc-9\n```\n\nTo install Pippin\n\n```\n% pip install --user pippin-wallet\n```\n\nTo upgrade Pippin in the future, add --upgrade\n\n```\n% pip install --upgrade pippin-wallet\n```\n\n### Configuring Pippin\n\nPippin creates a `PippinData` directory in your home directory.\n\nRun: `pippin-server --generate-config` to generate a sample in `~/PippinData/sample.config.yaml`\n\n### Using Distributed PoW or BoomPoW\n\nWant to use [DPoW](https://dpow.nanocenter.org) or [BPoW](https://bpow.banano.cc)?\n\nPippin will use them automatically for work generation if the key/user is present in the environment.\n\nFor DPoW:\n```\n% echo \"DPOW_USER=mydpowuser\" >> ~/PippinData/.env\n% echo \"DPOW_KEY=mydpowkey\" >> ~/PippinData/.env\n```\n\nFor BPoW:\n```\n% echo \"BPOW_USER=mybpowuser\" >> ~/PippinData/.env\n% echo \"BPOW_KEY=mybpowkey\" >> ~/PippinData/.env\n```\n\nReplace `mybpowuser` and `mybpowkey` with the actual user and keys you have. If you need keys, visit their respected websites for instructions on how to request them.\n\n### Configuring PostgreSQL or MySQL\n\nPippin uses SQLite by default, which requires no extra configuration.\n\nTo use postgres or mysql, you need to put your database information in some environment variables\n\n**Postgres:**\n\nRequired (replace `database_name`, `user_name`, and `mypassword` with the actual values):\n```\n% echo \"POSTGRES_DB=database_name\" >> ~/PippinData/.env\n% echo \"POSTGRES_USER=user_name\" >> ~/PippinData/.env\n% echo \"POSTGRES_PASSWORD=mypassword\" >> ~/PippinData/.env\n```\n\nOptional:\n```\n# 127.0.0.1 is default\n% echo \"POSTGRES_HOST=127.0.0.1\" >> ~/PippinData/.env \n# 5432 is default\n% echo \"POSTGRES_PORT=5432\" >> ~/PippinData/.env\n```\n\n**MySQL:**\n\nRequired (replace `database_name`, `user_name`, and `mypassword` with the actual values):\n```\n% echo \"MYSQL_DB=database_name\" >> ~/PippinData/.env\n% echo \"MYSQL_USER=user_name\" >> ~/PippinData/.env\n% echo \"MYSQL_PASSWORD=mypassword\" >> ~/PippinData/.env\n```\n\nOptional:\n```\n# 127.0.0.1 is default\n% echo \"MYSQL_HOST=127.0.0.1\" >> ~/PippinData/.env \n# 3306 is default\n% echo \"MYSQL_PORT=3306\" >> ~/PippinData/.env\n```\n\n### Changing Redis Host/Port\n\nPippin uses Redis for distributed locks, so that every account works on its own chain in a synchronous fashion.\n\nBy default, it will look for redis on `127.0.0.1` on port `6379` and use db `0`, you can also change these with environment variables.\n\n```\necho \"REDIS_HOST=127.0.0.1\" >> ~/PippinData/.env\necho \"REDIS_PORT=6379\" >> ~/PippinData/.env\necho \"REDIS_DB=0\" >> ~/PippinData/.env\n```\n\n## Pippin Configuration\n\nPippin uses a [yaml](https://yaml.org/) based configuration for everything else.\n\nAll available options are in a [sample file](./pippin/sample.config.yaml).\n\nYou can override any default by creating a file called `~/PippinData/config.yaml` and choosing your own settings.\n\nIt must be in your users home directory in a folder called `PippinData`\n\n### Configuring Pippin for BANANO\n\nIn `config.yaml` set banano: true\n\n```\n# Settings for the pippin wallet\nwallet:\n  # Run in banano mode\n  # If true, the wallet will operate based on the BANANO protocol\n  # Default: false\n  banano: true\n```\n\n### Configuring the node\n\nAt the bare minimum, Pippin requires a node for the RPC api. It will default to `http://[::1]:7076` for Nano, or `http://[::1]:7072` for BANANO. If you want to change it to `https://coolnanonode.com/rpc` then it would look like this:\n\n```\nserver:\n  # The RPC URL of the remote node to connect to\n  # Non-wallet RPCs will be routed to this node\n  # Default: http://[::1]:7076 for nano, https://[::1]:7072 for banano\n  node_rpc_url: https://coolnanonode.com/rpc\n```\n\n### Running Pippin\n\nOnce configured, just start it with `pippin-server`\n\nIt can be started on boot using systemd (Linux)\n\nCreate a file `/etc/systemd/system/pippin.service`\n\nWith the contents:\n\n```\n[Unit]\nDescription=Pippin Wallet\nAfter=network.target\n\n[Service]\nType=simple\nUser=YOUR_LINUX_USER\nGroup=YOUR_LINUX_USER\nExecStart=/home/myuser/.local/bin/pippin-server\n\n[Install]\nWantedBy=multi-user.target\n```\n\nIf you aren't sure what the full path of pippin-server is, run `which pippin-server`\n\nThen enable and start\n\n```\n% sudo systemctl enable pippin\n% sudo systemctl start pippin\n```\n\n### Endpoints\n\nSend HTTP POST requests to Pippin just like you would a normal node.\n\n```\n% curl -g -d '{\"action\":\"wallet_create\"}' localhost:11338\n% curl -g -d '{\"action\":\"account_balance\", \"account\": \"nano_3jb1fp4diu79wggp7e171jdpxp95auji4moste6gmc55pptwerfjqu48okse\"}' localhost:11338\n```\n\n### Auto-receive & Dynamic PoW\n\nTo automatically pocket pending transactions as they arrive, callback is required.\n\nHooking up the websocket also adds support for **dynamic PoW** which means that blocks will get confirmed faster if the active difficulty is higher than the minimum.\n\nPippin only supports the websocket callback, which can be setup like so in `config.yaml`:\n\n```\nserver:\n  # The WebSocket URL of the node to connect to\n  # Optional, but required to receive transactions as they arrive to accounts\n  # Default: None\n  #node_ws_url: ws://[::1]:7078\n```\n\n## Feature requests\n\nNotice an API that's missing a feature or not behaving the same as nano's APIs?\n\nOpen a bug report/feature request on the [issues page](https://github.com/bbedward/pippin_nano_wallet/issues)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/appditto/pippin_nano_wallet", "keywords": "cryptocurrency wallet nano banano bitcoin api aiohttp async asyncio aio", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pippin-wallet", "package_url": "https://pypi.org/project/pippin-wallet/", "platform": "", "project_url": "https://pypi.org/project/pippin-wallet/", "project_urls": {"Homepage": "https://github.com/appditto/pippin_nano_wallet"}, "release_url": "https://pypi.org/project/pippin-wallet/1.1.11/", "requires_dist": null, "requires_python": "", "summary": "A production-ready, high-performance developer wallet for Nano and BANANO.", "version": "1.1.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"left\">  <img alt=\"Pippin Wallet\" height=\"50\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ffa87b8ef95ac6a357a916f3993904c4a82c3c3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f617070646974746f2f70697070696e5f6e616e6f5f77616c6c65742f6d61737465722f6173736574732f70697070696e5f6c6f676f2e7376673f73616e6974697a653d74727565\" width=\"256\"> </p>\n<p><a href=\"https://pypi.org/project/pippin-wallet/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ad42c8e0bff92167ae28a3552f9b23ea8884d4e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70697070696e2d77616c6c6574\"></a> <img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26766878a7ef9903e759b15eec22f867f5afc91c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70697070696e2d77616c6c6574\"> <a href=\"https://github.com/bbedward/pippin_nano_wallet/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef02fa17e750edfa95cb70d56078b9537146244d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f62626564776172642f70697070696e5f6e616e6f5f77616c6c6574\"></a> <a href=\"https://gitlab.com/appditto/pippin_nano_wallet/pipelines\" rel=\"nofollow\"><img alt=\"Pipeline\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7956c1c4b0f3ea86e951957d29f6b93020bbcb1a/68747470733a2f2f6769746c61622e636f6d2f617070646974746f2f70697070696e5f6e616e6f5f77616c6c65742f6261646765732f6d61737465722f706970656c696e652e737667\"></a></p>\n<p>Pippin is a production-ready, high-performance developer wallet for <a href=\"https://nano.org\" rel=\"nofollow\">Nano</a> and <a href=\"https://banano.cc\" rel=\"nofollow\">BANANO</a>. Pippin's API is a drop-in replacement for the Nano developer wallet that is built in to the Nano node software.</p>\n<h2>About Pippin</h2>\n<p>Pippin is written in Python. It achieves high performance across the board using libraries such as <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a>, <a href=\"https://github.com/MagicStack/uvloop\" rel=\"nofollow\">uvloop</a>, <a href=\"https://aiohttp.readthedocs.io/en/stable/\" rel=\"nofollow\">aiohttp</a>, <a href=\"https://github.com/MagicStack/asyncpg\" rel=\"nofollow\">asyncpg</a>/<a href=\"https://github.com/jreese/aiosqlite\" rel=\"nofollow\">aiosqlite</a>/<a href=\"https://github.com/aio-libs/aiomysql\" rel=\"nofollow\">aiomysql</a>, and <a href=\"https://rapidjson.org/\" rel=\"nofollow\">rapidjson</a>.</p>\n<p>For block signing and work generation, Pippin uses <a href=\"https://github.com/npy0/nanopy\" rel=\"nofollow\">nanopy</a>, which is a high-performance library that utilizes C-bindings for blake2b and ed25519.</p>\n<h2>Benefits of Pippin</h2>\n<p>The Nano developer wallet (aka \"node wallet\") is not recommended for production use. One of the goals of Pippin is to provide a production-ready external key management that can be used by developers who are using Nano.</p>\n<p>Pippin is the first drop-in replacement for the Nano developer wallet. It's incredibly easy to transition to Pippin if you are already using the Nano developer wallet.</p>\n<ul>\n<li>Pippin is independent of the node. You can use Pippin with any public RPC, so you don't have to run your own node</li>\n<li>Pippin is extremely fast and lightweight</li>\n<li>Pippin supports encrypted secret keys</li>\n<li>Pippin natively supports <a href=\"https://dpow.nanocenter.org\" rel=\"nofollow\">DPoW</a> and <a href=\"https://bpow.banano.cc\" rel=\"nofollow\">BPoW</a></li>\n<li>Pippin supports multiple database backends (SQLite, PostgreSQL, and MySQL)</li>\n</ul>\n<p>Pippin can be used by exchanges, games, payment processors, tip bots, faucets, casinos, and a lot more.</p>\n<h2>Pippin Performance</h2>\n<p align=\"center\">  <img alt=\"Pippin Benchmarks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86c123b54581325a118ac3c1121fd47d9f3f2334/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f617070646974746f2f70697070696e5f6e616e6f5f77616c6c65742f6d61737465722f6173736574732f62656e63686d61726b2e706e67\"> </p>\n<p>The benchmark script that was used is available <a href=\"https://raw.githubusercontent.com/appditto/pippin_nano_wallet/master/benchmark.py\" rel=\"nofollow\">here</a></p>\n<p>There were 3 independent runs for each wallet, 62 blocks each, same node, and the same work peer. Pippin was consistently <strong>twice as fast</strong> versus the node wallet.</p>\n<h2>How Pippin Works</h2>\n<p>Pippin provides an API that mimics the <a href=\"https://docs.nano.org/commands/rpc-protocol/#wallet-rpcs\" rel=\"nofollow\">Nano Wallet RPC Protocol</a></p>\n<p>Every wallet-related RPC gets intercepted by Pippin and handled internally. It builds the blocks and signs them using locally-stored keys, it uses a node to publish the blocks.</p>\n<p>Every non-wallet related RPC gets proxied to the publishing node. Which means you can make all of your RPC requests directly to Pippin whether they are wallet-related or not.</p>\n<h2>API Documentation</h2>\n<p>Recommended reference is the <a href=\"https://docs.nano.org/commands/rpc-protocol/#wallet-rpcs\" rel=\"nofollow\">NANO RPC documentation</a>, Pippin's APIs are mostly identical.</p>\n<p>You send an HTTP Post request to pippin with the desired action and parameters, example:</p>\n<pre><code>{\n    \"action\": \"accounts_create\",\n    \"wallet\": \"12345\",\n    \"count\": 100\n}\n</code></pre>\n<h3>Supported</h3>\n<ul>\n<li><code>wallet_create</code></li>\n<li><code>account_create</code></li>\n<li><code>accounts_create</code></li>\n<li><code>account_list</code></li>\n<li><code>receive</code></li>\n<li><code>send</code> - Use the <strong>id</strong> parameter to prevent duplicate sends!</li>\n<li><code>account_representative_set</code></li>\n<li><code>password_change</code> - This will also set a password, if one isn't already set</li>\n<li><code>password_enter</code></li>\n<li><code>password_valid</code></li>\n<li><code>wallet_representative_set</code></li>\n<li><code>wallet_add</code> - This is for adding ad-hoc private keys to a wallet</li>\n<li><code>wallet_lock</code></li>\n<li><code>wallet_locked</code></li>\n<li><code>wallet_balances</code></li>\n<li><code>wallet_frontiers</code></li>\n<li><code>wallet_pending</code></li>\n<li><code>wallet_destroy</code></li>\n<li><code>wallet_change_seed</code></li>\n<li><code>wallet_contains</code></li>\n<li><code>wallet_representative</code></li>\n<li><code>receive_all</code> - Not in the nano API, it takes a <code>wallet</code> and it will receive every pending block in that wallet (respecting <code>receive_minimum</code>).</li>\n</ul>\n<h3>Differences: Pippin vs NANO Node Wallet</h3>\n<p>These are the known differences between Pippin's API and the Nano node wallet API</p>\n<p><strong>Different Behavior</strong></p>\n<p>APIs that are different between Pippin and the Nano node wallet.</p>\n<ul>\n<li><code>account_list</code> accepts a <code>count</code> parameter that defaults to 1000</li>\n<li>Pippin has an <code>auto_receive_on_send</code> option that will automatically receive pending blocks when you do a <code>send</code>, it will only do this if balance isnt high enough to make the transaction.</li>\n<li><code>account_create</code> does not accept an index</li>\n</ul>\n<p><strong>Fuzzy Behavior</strong></p>\n<p>The Nano documentation isn't perfectly clear on these, but these are how Pippin behaves.</p>\n<ul>\n<li><code>wallet_change_seed</code> will result in the wallet no longer being locked, if it is. The wallet has to already be unlocked before you can use this RPC, though.</li>\n</ul>\n<p><strong>Missing/Not Implemented</strong></p>\n<p>APIs that the Nano node wallet supports but are not implemented in Pippin.</p>\n<ul>\n<li><code>account_move</code></li>\n<li><code>account_remove</code></li>\n<li><code>receive_minimum</code> - Receive minimum can be set in <code>config.yaml</code></li>\n<li><code>receive_minimum_set</code></li>\n<li><code>wallet_add_watch</code></li>\n<li><code>wallet_history</code></li>\n<li><code>search_pending</code></li>\n<li><code>search_pending_all</code></li>\n<li><code>wallet_export</code></li>\n<li><code>wallet_ledger</code></li>\n<li><code>wallet_republish</code></li>\n<li><code>wallet_work_get</code></li>\n<li><code>work_get</code></li>\n<li><code>work_set</code></li>\n</ul>\n<h2>CLI Documentation</h2>\n<p>Pippin has a CLI interface available, you can see available subcommands with:</p>\n<p><code>pippin-cli --help</code></p>\n<p>The primary goal of the CLI is key management. It's a more secure way to import a seed and backup your seed.</p>\n<p>For example a typical flow of creating a new wallet with a specific seed might look like (add --encrypt to wallet_change_seed if you want to lock the wallet with a password):</p>\n<pre><code>% pippin-cli wallet_create\nWallet created, ID: d897b5ec-1897-4e7e-8a90-4526f454c8de\nFirst account: nano_31a7wzm4rayik1hthahzkekntsqz86u6dko5adg8jxueehzt5yhmhsqsuzdy\n% pippin-cli wallet_change_seed --wallet d897b5ec-1897-4e7e-8a90-4526f454c8de\nEnter new wallet seed: &lt;hidden_input&gt;\nSeed changed for wallet d897b5ec-1897-4e7e-8a90-4526f454c8de\nFirst account: nano_3ejy6ha1iuqhi5cshhifu57p5othdcymfbzsmxhjucdks53eh41yd4qpjtxf\n</code></pre>\n<p>To backup a seed (<strong>warning:</strong> this prints seed to stdout)</p>\n<pre><code>% pippin-cli wallet_view_seed --wallet &lt;id&gt;\n</code></pre>\n<h2>Setting up Pippin</h2>\n<h3>Requirements</h3>\n<ul>\n<li>Python 3.6 or newer</li>\n<li>GCC, for MacOS and Linux</li>\n<li>libb2 (blake2b)</li>\n<li>A Redis server</li>\n</ul>\n<p><strong>MacOS Instructions</strong></p>\n<ol>\n<li>\n<p>Install <a href=\"https://brew.sh/\" rel=\"nofollow\">homebrew</a>, if it isn't already installed</p>\n</li>\n<li>\n<p>Install Redis (skip if you already have done so)</p>\n</li>\n</ol>\n<pre><code>% brew install gcc@9 python libb2 redis\n% launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist\n</code></pre>\n<p>To start redis at boot (optional):</p>\n<pre><code>% ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents\n</code></pre>\n<p>You may find it convenient to priorize homebrew binaries by including the install location first in your PATH.</p>\n<pre><code>% export PATH=/usr/local/bin:$PATH\n</code></pre>\n<p>To make it permanent:</p>\n<pre><code># Catalina\n% echo \"export PATH=/usr/local/bin:$PATH\" &gt;&gt; ~/.zprofile\n# Others\n% echo \"export PATH=/usr/local/bin:$PATH\" &gt;&gt; ~/.profile\n</code></pre>\n<p><strong>Ubuntu 18.04</strong></p>\n<p>Instructions for other Linux distributions should be similar.</p>\n<pre><code>% sudo apt install build-essential python3.6 python3.6-dev python3-pip libb2-dev redis-server\n</code></pre>\n<h3>Installing Pippin</h3>\n<p>First, update PIP to latest version.</p>\n<pre><code>% pip3 install -U pip\n</code></pre>\n<p>For MacOS you might need to set the following environment variable:</p>\n<pre><code>export CC=/usr/local/bin/gcc-9\n</code></pre>\n<p>To install Pippin</p>\n<pre><code>% pip install --user pippin-wallet\n</code></pre>\n<p>To upgrade Pippin in the future, add --upgrade</p>\n<pre><code>% pip install --upgrade pippin-wallet\n</code></pre>\n<h3>Configuring Pippin</h3>\n<p>Pippin creates a <code>PippinData</code> directory in your home directory.</p>\n<p>Run: <code>pippin-server --generate-config</code> to generate a sample in <code>~/PippinData/sample.config.yaml</code></p>\n<h3>Using Distributed PoW or BoomPoW</h3>\n<p>Want to use <a href=\"https://dpow.nanocenter.org\" rel=\"nofollow\">DPoW</a> or <a href=\"https://bpow.banano.cc\" rel=\"nofollow\">BPoW</a>?</p>\n<p>Pippin will use them automatically for work generation if the key/user is present in the environment.</p>\n<p>For DPoW:</p>\n<pre><code>% echo \"DPOW_USER=mydpowuser\" &gt;&gt; ~/PippinData/.env\n% echo \"DPOW_KEY=mydpowkey\" &gt;&gt; ~/PippinData/.env\n</code></pre>\n<p>For BPoW:</p>\n<pre><code>% echo \"BPOW_USER=mybpowuser\" &gt;&gt; ~/PippinData/.env\n% echo \"BPOW_KEY=mybpowkey\" &gt;&gt; ~/PippinData/.env\n</code></pre>\n<p>Replace <code>mybpowuser</code> and <code>mybpowkey</code> with the actual user and keys you have. If you need keys, visit their respected websites for instructions on how to request them.</p>\n<h3>Configuring PostgreSQL or MySQL</h3>\n<p>Pippin uses SQLite by default, which requires no extra configuration.</p>\n<p>To use postgres or mysql, you need to put your database information in some environment variables</p>\n<p><strong>Postgres:</strong></p>\n<p>Required (replace <code>database_name</code>, <code>user_name</code>, and <code>mypassword</code> with the actual values):</p>\n<pre><code>% echo \"POSTGRES_DB=database_name\" &gt;&gt; ~/PippinData/.env\n% echo \"POSTGRES_USER=user_name\" &gt;&gt; ~/PippinData/.env\n% echo \"POSTGRES_PASSWORD=mypassword\" &gt;&gt; ~/PippinData/.env\n</code></pre>\n<p>Optional:</p>\n<pre><code># 127.0.0.1 is default\n% echo \"POSTGRES_HOST=127.0.0.1\" &gt;&gt; ~/PippinData/.env \n# 5432 is default\n% echo \"POSTGRES_PORT=5432\" &gt;&gt; ~/PippinData/.env\n</code></pre>\n<p><strong>MySQL:</strong></p>\n<p>Required (replace <code>database_name</code>, <code>user_name</code>, and <code>mypassword</code> with the actual values):</p>\n<pre><code>% echo \"MYSQL_DB=database_name\" &gt;&gt; ~/PippinData/.env\n% echo \"MYSQL_USER=user_name\" &gt;&gt; ~/PippinData/.env\n% echo \"MYSQL_PASSWORD=mypassword\" &gt;&gt; ~/PippinData/.env\n</code></pre>\n<p>Optional:</p>\n<pre><code># 127.0.0.1 is default\n% echo \"MYSQL_HOST=127.0.0.1\" &gt;&gt; ~/PippinData/.env \n# 3306 is default\n% echo \"MYSQL_PORT=3306\" &gt;&gt; ~/PippinData/.env\n</code></pre>\n<h3>Changing Redis Host/Port</h3>\n<p>Pippin uses Redis for distributed locks, so that every account works on its own chain in a synchronous fashion.</p>\n<p>By default, it will look for redis on <code>127.0.0.1</code> on port <code>6379</code> and use db <code>0</code>, you can also change these with environment variables.</p>\n<pre><code>echo \"REDIS_HOST=127.0.0.1\" &gt;&gt; ~/PippinData/.env\necho \"REDIS_PORT=6379\" &gt;&gt; ~/PippinData/.env\necho \"REDIS_DB=0\" &gt;&gt; ~/PippinData/.env\n</code></pre>\n<h2>Pippin Configuration</h2>\n<p>Pippin uses a <a href=\"https://yaml.org/\" rel=\"nofollow\">yaml</a> based configuration for everything else.</p>\n<p>All available options are in a <a href=\"./pippin/sample.config.yaml\" rel=\"nofollow\">sample file</a>.</p>\n<p>You can override any default by creating a file called <code>~/PippinData/config.yaml</code> and choosing your own settings.</p>\n<p>It must be in your users home directory in a folder called <code>PippinData</code></p>\n<h3>Configuring Pippin for BANANO</h3>\n<p>In <code>config.yaml</code> set banano: true</p>\n<pre><code># Settings for the pippin wallet\nwallet:\n  # Run in banano mode\n  # If true, the wallet will operate based on the BANANO protocol\n  # Default: false\n  banano: true\n</code></pre>\n<h3>Configuring the node</h3>\n<p>At the bare minimum, Pippin requires a node for the RPC api. It will default to <code>http://[::1]:7076</code> for Nano, or <code>http://[::1]:7072</code> for BANANO. If you want to change it to <code>https://coolnanonode.com/rpc</code> then it would look like this:</p>\n<pre><code>server:\n  # The RPC URL of the remote node to connect to\n  # Non-wallet RPCs will be routed to this node\n  # Default: http://[::1]:7076 for nano, https://[::1]:7072 for banano\n  node_rpc_url: https://coolnanonode.com/rpc\n</code></pre>\n<h3>Running Pippin</h3>\n<p>Once configured, just start it with <code>pippin-server</code></p>\n<p>It can be started on boot using systemd (Linux)</p>\n<p>Create a file <code>/etc/systemd/system/pippin.service</code></p>\n<p>With the contents:</p>\n<pre><code>[Unit]\nDescription=Pippin Wallet\nAfter=network.target\n\n[Service]\nType=simple\nUser=YOUR_LINUX_USER\nGroup=YOUR_LINUX_USER\nExecStart=/home/myuser/.local/bin/pippin-server\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>If you aren't sure what the full path of pippin-server is, run <code>which pippin-server</code></p>\n<p>Then enable and start</p>\n<pre><code>% sudo systemctl enable pippin\n% sudo systemctl start pippin\n</code></pre>\n<h3>Endpoints</h3>\n<p>Send HTTP POST requests to Pippin just like you would a normal node.</p>\n<pre><code>% curl -g -d '{\"action\":\"wallet_create\"}' localhost:11338\n% curl -g -d '{\"action\":\"account_balance\", \"account\": \"nano_3jb1fp4diu79wggp7e171jdpxp95auji4moste6gmc55pptwerfjqu48okse\"}' localhost:11338\n</code></pre>\n<h3>Auto-receive &amp; Dynamic PoW</h3>\n<p>To automatically pocket pending transactions as they arrive, callback is required.</p>\n<p>Hooking up the websocket also adds support for <strong>dynamic PoW</strong> which means that blocks will get confirmed faster if the active difficulty is higher than the minimum.</p>\n<p>Pippin only supports the websocket callback, which can be setup like so in <code>config.yaml</code>:</p>\n<pre><code>server:\n  # The WebSocket URL of the node to connect to\n  # Optional, but required to receive transactions as they arrive to accounts\n  # Default: None\n  #node_ws_url: ws://[::1]:7078\n</code></pre>\n<h2>Feature requests</h2>\n<p>Notice an API that's missing a feature or not behaving the same as nano's APIs?</p>\n<p>Open a bug report/feature request on the <a href=\"https://github.com/bbedward/pippin_nano_wallet/issues\" rel=\"nofollow\">issues page</a></p>\n\n          </div>"}, "last_serial": 7172877, "releases": {"1.0.4": [{"comment_text": "", "digests": {"md5": "e1667ccd5e9261c00c019a8fc1c4ee3a", "sha256": "b80c965ea42629e0121d5553c7e78128014a3c75f1b8c6e103da39dd2f0ef984"}, "downloads": -1, "filename": "pippin-wallet-1.0.4.tar.gz", "has_sig": false, "md5_digest": "e1667ccd5e9261c00c019a8fc1c4ee3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35033, "upload_time": "2019-12-13T18:56:50", "upload_time_iso_8601": "2019-12-13T18:56:50.777029Z", "url": "https://files.pythonhosted.org/packages/b8/f8/afcfa792d17523a45e553c35e977bd0fa9cb5462ec8be56b7c5c63430609/pippin-wallet-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "3497db7aa3b6d1939605117de5fa376d", "sha256": "b0a3600f1d42ddbe6745cc39f599289960ca437c8100af9da2d52a232e2b04bc"}, "downloads": -1, "filename": "pippin-wallet-1.0.5.tar.gz", "has_sig": false, "md5_digest": "3497db7aa3b6d1939605117de5fa376d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34987, "upload_time": "2019-12-14T20:35:01", "upload_time_iso_8601": "2019-12-14T20:35:01.391499Z", "url": "https://files.pythonhosted.org/packages/8c/da/98b0449bf7ba1ac4495a2686dc12cbdb6c656f3ee51d5996a792cfd5344d/pippin-wallet-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "b3a9e06febf8e94b68ab9ab6809c68d2", "sha256": "25507c41a3b1d345aa58616eab9f180fafbe21f868f6ecff1fe78bafa03c871d"}, "downloads": -1, "filename": "pippin-wallet-1.0.6.tar.gz", "has_sig": false, "md5_digest": "b3a9e06febf8e94b68ab9ab6809c68d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34980, "upload_time": "2019-12-14T20:44:41", "upload_time_iso_8601": "2019-12-14T20:44:41.964825Z", "url": "https://files.pythonhosted.org/packages/de/58/fd4caa95087c68d85178da63b3bb1abbb48eacb6d5addc52109d33b2c2a5/pippin-wallet-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "acd6541b43022a6a8270e7f00a80152f", "sha256": "662e3582c8d1d9ea32aaef55b1f8b6a4fea6a3645dd5272d662bc319a4e43402"}, "downloads": -1, "filename": "pippin-wallet-1.0.7.tar.gz", "has_sig": false, "md5_digest": "acd6541b43022a6a8270e7f00a80152f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34986, "upload_time": "2019-12-14T20:48:28", "upload_time_iso_8601": "2019-12-14T20:48:28.918779Z", "url": "https://files.pythonhosted.org/packages/1c/1d/86dd5bbba1a1d6061ec335797371e097a15d7e14e37dd323f34d89d77e4e/pippin-wallet-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "0ea1509de2afb1e0f94ad2bd0d4e0614", "sha256": "8f9aa9f535bd713f93e85a1050bcef7c600fa248c7f67988a9d293dcc2c76f1a"}, "downloads": -1, "filename": "pippin-wallet-1.0.8.tar.gz", "has_sig": false, "md5_digest": "0ea1509de2afb1e0f94ad2bd0d4e0614", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35310, "upload_time": "2019-12-16T14:28:49", "upload_time_iso_8601": "2019-12-16T14:28:49.496359Z", "url": "https://files.pythonhosted.org/packages/f8/d8/5f86c7ec3e8988bb4d834631f88bf70d5d43fef989799076212ee86349fd/pippin-wallet-1.0.8.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0d4e37c17ccd9fa5d26d07dbdb9b91cd", "sha256": "5aec1156a87c466e53ffb5010779a42aca9cbfaa56ebb5268294e810bbfbeaf6"}, "downloads": -1, "filename": "pippin-wallet-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0d4e37c17ccd9fa5d26d07dbdb9b91cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30221, "upload_time": "2020-04-15T17:24:23", "upload_time_iso_8601": "2020-04-15T17:24:23.258295Z", "url": "https://files.pythonhosted.org/packages/cb/2b/93e5e07b4ad00af32ad4b11e42b6fe5ca2db6d72d1d5b124f47d8c801866/pippin-wallet-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "024ee7e70c1982be433159a656dbd3bf", "sha256": "c1cb41502ac7194c5541d1119eaf120bb84718883bdae366073becd7e366bd57"}, "downloads": -1, "filename": "pippin-wallet-1.1.1.tar.gz", "has_sig": false, "md5_digest": "024ee7e70c1982be433159a656dbd3bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30179, "upload_time": "2020-04-18T14:12:51", "upload_time_iso_8601": "2020-04-18T14:12:51.811279Z", "url": "https://files.pythonhosted.org/packages/14/bf/c70e84e0b75e3a43d57a67c337b734ff53048b451435e98ee4481370cbc5/pippin-wallet-1.1.1.tar.gz", "yanked": false}], "1.1.10": [{"comment_text": "", "digests": {"md5": "f501d1579b03b2e11716b05ea1ebb554", "sha256": "5ff76779edd3598d4d4318b8a4b2e9201257aa7aa0eb2c577102d5607f4d8934"}, "downloads": -1, "filename": "pippin-wallet-1.1.10.tar.gz", "has_sig": false, "md5_digest": "f501d1579b03b2e11716b05ea1ebb554", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35483, "upload_time": "2020-05-05T15:20:56", "upload_time_iso_8601": "2020-05-05T15:20:56.560775Z", "url": "https://files.pythonhosted.org/packages/5d/ad/cc5552c94131cb5486fc792386cb840e1eb5325948a86b760504241146c4/pippin-wallet-1.1.10.tar.gz", "yanked": false}], "1.1.11": [{"comment_text": "", "digests": {"md5": "16882b72347c716e6d0b90c4873e80cf", "sha256": "6260a545dbd76afb3219653a57b408563e59064abf031c645e4f32bc85c73420"}, "downloads": -1, "filename": "pippin-wallet-1.1.11.tar.gz", "has_sig": false, "md5_digest": "16882b72347c716e6d0b90c4873e80cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35509, "upload_time": "2020-05-05T15:40:35", "upload_time_iso_8601": "2020-05-05T15:40:35.840156Z", "url": "https://files.pythonhosted.org/packages/53/43/0e5a6fb9bbc3b4f8b73b24d263017d954ff85218998494f5f7787740ff61/pippin-wallet-1.1.11.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "cb6af787074df1c518c5d5e0738aefb5", "sha256": "d1c60423d1914ebd4076b2bdca03b61c21e04aa054eb817089fcafb8b91070de"}, "downloads": -1, "filename": "pippin-wallet-1.1.2.tar.gz", "has_sig": false, "md5_digest": "cb6af787074df1c518c5d5e0738aefb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30252, "upload_time": "2020-04-20T19:51:55", "upload_time_iso_8601": "2020-04-20T19:51:55.485007Z", "url": "https://files.pythonhosted.org/packages/b0/ff/9d2da395edcc015585e337d69f785d62cf098b7e51013ee5fc80964e8471/pippin-wallet-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "979c417b35225493843d3c26809d3024", "sha256": "4cfe30eb6a3967a368d723af86b02112a4ff5fc1c7e2937f651a16c31ed70ec1"}, "downloads": -1, "filename": "pippin-wallet-1.1.3.tar.gz", "has_sig": false, "md5_digest": "979c417b35225493843d3c26809d3024", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30250, "upload_time": "2020-04-20T19:58:08", "upload_time_iso_8601": "2020-04-20T19:58:08.968140Z", "url": "https://files.pythonhosted.org/packages/1d/9f/703a9b61467b4c5033e4c2194b41d9a4d9017abb748bcb014f4575aa41b4/pippin-wallet-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "9928287a3e4e39a1db8350d12efad278", "sha256": "ebcfc469ef206315f96611ca3f5da97ce98ad8f121011f7634e7a2c921f16762"}, "downloads": -1, "filename": "pippin-wallet-1.1.4.tar.gz", "has_sig": false, "md5_digest": "9928287a3e4e39a1db8350d12efad278", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30255, "upload_time": "2020-04-22T16:26:07", "upload_time_iso_8601": "2020-04-22T16:26:07.129653Z", "url": "https://files.pythonhosted.org/packages/c7/8f/409bf8199660ff81728d29143bedbc15f5ce4d3d123491a0c1907089275f/pippin-wallet-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "0e00d5e190377fbaa0e0e3b3908139d2", "sha256": "4d7ebce2a8f7fbe559c3c4ce2371a2db19286fbeb509c43cc15159da2bd05919"}, "downloads": -1, "filename": "pippin-wallet-1.1.5.tar.gz", "has_sig": false, "md5_digest": "0e00d5e190377fbaa0e0e3b3908139d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35451, "upload_time": "2020-04-27T01:43:49", "upload_time_iso_8601": "2020-04-27T01:43:49.056089Z", "url": "https://files.pythonhosted.org/packages/47/22/60104ab26860ac2069786503fb6e79f49908d0099da6161d55cea695160d/pippin-wallet-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "943d9fa6bb136cccc558d417cb822faf", "sha256": "2ee82ad6ac9cb8655571ea1177094789f3db8a2b93134dcd204abd8e05ddb838"}, "downloads": -1, "filename": "pippin-wallet-1.1.6.tar.gz", "has_sig": false, "md5_digest": "943d9fa6bb136cccc558d417cb822faf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30426, "upload_time": "2020-04-27T18:21:54", "upload_time_iso_8601": "2020-04-27T18:21:54.090388Z", "url": "https://files.pythonhosted.org/packages/5a/21/ef81644c2fb9c992b23a92970cd309aec6488d805f1df2e871f9763d1be9/pippin-wallet-1.1.6.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "aac7f7671db33db309904039f9c8d3e1", "sha256": "5e8eabd74dd80fc3e20506b1ceeb2de62935a156c34cad7ac73377ed39bfe203"}, "downloads": -1, "filename": "pippin-wallet-1.1.7.tar.gz", "has_sig": false, "md5_digest": "aac7f7671db33db309904039f9c8d3e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30427, "upload_time": "2020-04-27T18:30:49", "upload_time_iso_8601": "2020-04-27T18:30:49.165048Z", "url": "https://files.pythonhosted.org/packages/0a/84/6c38d069482ea756659fae9f27a37aa46f24efcb2e9bc79a9746b7edc885/pippin-wallet-1.1.7.tar.gz", "yanked": false}], "1.1.8": [{"comment_text": "", "digests": {"md5": "c909800615da3c9c1f3c0d0d36e6d19f", "sha256": "9df8d21fc4eb7bcf24f0c6360f58fedf30a359fd03b537dc5269e59246e19398"}, "downloads": -1, "filename": "pippin-wallet-1.1.8.tar.gz", "has_sig": false, "md5_digest": "c909800615da3c9c1f3c0d0d36e6d19f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30476, "upload_time": "2020-05-04T17:14:53", "upload_time_iso_8601": "2020-05-04T17:14:53.616406Z", "url": "https://files.pythonhosted.org/packages/79/f4/84420c1ca8ca3f3fff9773d4df7af7dff9a448ad924f6a42e82199ceb362/pippin-wallet-1.1.8.tar.gz", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "a3652f5f6c92fd48edd6b15e3c74e1f9", "sha256": "4e72270de2a04acafb791dcf31a1ae2ba8aaca70c101d1fc2be62efcd76ecafc"}, "downloads": -1, "filename": "pippin-wallet-1.1.9.tar.gz", "has_sig": false, "md5_digest": "a3652f5f6c92fd48edd6b15e3c74e1f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30515, "upload_time": "2020-05-04T17:28:33", "upload_time_iso_8601": "2020-05-04T17:28:33.680867Z", "url": "https://files.pythonhosted.org/packages/89/9a/773ec748a6329f165500c4649498fa333fd325bdc776a74a8e4766d562dd/pippin-wallet-1.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16882b72347c716e6d0b90c4873e80cf", "sha256": "6260a545dbd76afb3219653a57b408563e59064abf031c645e4f32bc85c73420"}, "downloads": -1, "filename": "pippin-wallet-1.1.11.tar.gz", "has_sig": false, "md5_digest": "16882b72347c716e6d0b90c4873e80cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35509, "upload_time": "2020-05-05T15:40:35", "upload_time_iso_8601": "2020-05-05T15:40:35.840156Z", "url": "https://files.pythonhosted.org/packages/53/43/0e5a6fb9bbc3b4f8b73b24d263017d954ff85218998494f5f7787740ff61/pippin-wallet-1.1.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:10 2020"}