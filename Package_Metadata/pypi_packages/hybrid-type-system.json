{"info": {"author": "thautawarm", "author_email": "twshere@outlook.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython"], "description": "# The Hybrid Type System\n\nRow + Implicit arguments + MLF(WIP).  \n\n## Notes about System F\n\nBefore implementing MLF:\n```\nchoose: forall a. a -> a -> a\nauto  : forall a. a -> a\n(choose auto) : (forall a. a \u2014> a) -> (forall a. a -> a)\n\n\n// if auto is defined without annotations, polymorphisms of lambdas get lost\nauto2 : a -> a\n(choose auto) : (a -> a) -> (a -> a)  \n```  \n\n## Notes about System F-Omega\n\nKind checker is not implemented. \n\n## Usage\n\n```python\nfrom hybridts.tc_state import TCState\nfrom hybridts.type_encoding import row_of_map, record_of_row, poly_row, empty_row\n\ntctx = {}\n\ntcs = TCState(tctx)\n\nx1 = tcs.new_var()\nx2 = tcs.new_var()\n\nint_t = tcs.mk_new_type(\"base.int\") # nominal type\ntcs.unify(x1, int_t)\ntcs.unify(x1, x2)\n\n\nassert tcs.infer(x1) == int_t\nassert tcs.infer(x2) == int_t\n\nx3 = tcs.new_var()\n\nr1 = row_of_map({'a': x1, 'b': x3}, empty_row)\nr1 = record_of_row(r1)\ntho = tcs.new_var()\nr2 = row_of_map({'a': x3}, poly_row(tho))\nr2 = record_of_row(r2)\ntcs.unify(r1, r2)\nprint(tcs.infer(r1))\nprint(tcs.infer(r2))\n\n# (RecordT, (RowConsT, 'b', (NomT, 'base.int'), (RowConsT, 'a', (NomT, 'base.int'), (RowMonoT,))))\n# (RecordT, (RowConsT, 'a', (NomT, 'base.int'), (RowPolyT, (RecordT, (RowConsT, 'b', (NomT, 'base.int'), (RowMonoT,)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RemuLang/hybridts", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "hybrid-type-system", "package_url": "https://pypi.org/project/hybrid-type-system/", "platform": "any", "project_url": "https://pypi.org/project/hybrid-type-system/", "project_urls": {"Homepage": "https://github.com/RemuLang/hybridts"}, "release_url": "https://pypi.org/project/hybrid-type-system/0.2/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "A composition of advanced type systems", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>The Hybrid Type System</h1>\n<p>Row + Implicit arguments + MLF(WIP).</p>\n<h2>Notes about System F</h2>\n<p>Before implementing MLF:</p>\n<pre><code>choose: forall a. a -&gt; a -&gt; a\nauto  : forall a. a -&gt; a\n(choose auto) : (forall a. a \u2014&gt; a) -&gt; (forall a. a -&gt; a)\n\n\n// if auto is defined without annotations, polymorphisms of lambdas get lost\nauto2 : a -&gt; a\n(choose auto) : (a -&gt; a) -&gt; (a -&gt; a)  \n</code></pre>\n<h2>Notes about System F-Omega</h2>\n<p>Kind checker is not implemented.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hybridts.tc_state</span> <span class=\"kn\">import</span> <span class=\"n\">TCState</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hybridts.type_encoding</span> <span class=\"kn\">import</span> <span class=\"n\">row_of_map</span><span class=\"p\">,</span> <span class=\"n\">record_of_row</span><span class=\"p\">,</span> <span class=\"n\">poly_row</span><span class=\"p\">,</span> <span class=\"n\">empty_row</span>\n\n<span class=\"n\">tctx</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">tcs</span> <span class=\"o\">=</span> <span class=\"n\">TCState</span><span class=\"p\">(</span><span class=\"n\">tctx</span><span class=\"p\">)</span>\n\n<span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">new_var</span><span class=\"p\">()</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">new_var</span><span class=\"p\">()</span>\n\n<span class=\"n\">int_t</span> <span class=\"o\">=</span> <span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">mk_new_type</span><span class=\"p\">(</span><span class=\"s2\">\"base.int\"</span><span class=\"p\">)</span> <span class=\"c1\"># nominal type</span>\n<span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">unify</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">int_t</span><span class=\"p\">)</span>\n<span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">unify</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">assert</span> <span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">int_t</span>\n<span class=\"k\">assert</span> <span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">int_t</span>\n\n<span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">new_var</span><span class=\"p\">()</span>\n\n<span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"n\">row_of_map</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"n\">x3</span><span class=\"p\">},</span> <span class=\"n\">empty_row</span><span class=\"p\">)</span>\n<span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"n\">record_of_row</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">)</span>\n<span class=\"n\">tho</span> <span class=\"o\">=</span> <span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">new_var</span><span class=\"p\">()</span>\n<span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">row_of_map</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"n\">x3</span><span class=\"p\">},</span> <span class=\"n\">poly_row</span><span class=\"p\">(</span><span class=\"n\">tho</span><span class=\"p\">))</span>\n<span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">record_of_row</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">)</span>\n<span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">unify</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"n\">r2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tcs</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># (RecordT, (RowConsT, 'b', (NomT, 'base.int'), (RowConsT, 'a', (NomT, 'base.int'), (RowMonoT,))))</span>\n<span class=\"c1\"># (RecordT, (RowConsT, 'a', (NomT, 'base.int'), (RowPolyT, (RecordT, (RowConsT, 'b', (NomT, 'base.int'), (RowMonoT,)</span>\n</pre>\n\n          </div>"}, "last_serial": 6436780, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "93efc3ba3303d82f980a5ae3eef886a9", "sha256": "56e32a30a1347891cfa5e9db02a703c0bef2424c6578ce206dd6434c7dd53909"}, "downloads": -1, "filename": "hybrid_type_system-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "93efc3ba3303d82f980a5ae3eef886a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6941, "upload_time": "2020-01-10T11:15:20", "upload_time_iso_8601": "2020-01-10T11:15:20.496596Z", "url": "https://files.pythonhosted.org/packages/5f/ed/4b91f5cdac1c6158335885dee15f3c62b6826e9db675cf3d205b9009b96b/hybrid_type_system-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7420e665a19e0de0f3e24da8c1477223", "sha256": "1728127f92a60cdd16b2c43bf5d688e675a9fd0b961ee7b7b93e0ae2e9ae43aa"}, "downloads": -1, "filename": "hybrid_type_system-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7420e665a19e0de0f3e24da8c1477223", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7787, "upload_time": "2020-01-11T16:27:59", "upload_time_iso_8601": "2020-01-11T16:27:59.537470Z", "url": "https://files.pythonhosted.org/packages/51/01/44ea5d4396278290dbd86e9a773124f205f98e13ea973c3948b8c5588ed3/hybrid_type_system-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7420e665a19e0de0f3e24da8c1477223", "sha256": "1728127f92a60cdd16b2c43bf5d688e675a9fd0b961ee7b7b93e0ae2e9ae43aa"}, "downloads": -1, "filename": "hybrid_type_system-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7420e665a19e0de0f3e24da8c1477223", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7787, "upload_time": "2020-01-11T16:27:59", "upload_time_iso_8601": "2020-01-11T16:27:59.537470Z", "url": "https://files.pythonhosted.org/packages/51/01/44ea5d4396278290dbd86e9a773124f205f98e13ea973c3948b8c5588ed3/hybrid_type_system-0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:49:40 2020"}