{"info": {"author": "Devin Fee", "author_email": "devin@devinfee.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "# aiohttp-graphql\nAdds [GraphQL] support to your [aiohttp] application.\n\nBased on [flask-graphql] by [Syrus Akbary] and [sanic-graphql] by [Sergey Porivaev].\n\n[![PyPI version](https://badge.fury.io/py/aiohttp-graphql.svg)](https://badge.fury.io/py/aiohttp-graphql)\n[![Build Status](https://travis-ci.com/graphql-python/aiohttp-graphql.svg?branch=master)](https://github.com/graphql-python/aiohttp-graphql)\n[![Coverage Status](https://codecov.io/gh/graphql-python/aiohttp-graphql/branch/master/graph/badge.svg)](https://github.com/graphql-python/aiohttp-graphql)\n\n## Usage\nJust use the `GraphQLView` view from `aiohttp_graphql`\n\n```python\nfrom aiohttp_graphql import GraphQLView\n\nGraphQLView.attach(app, schema=Schema, graphiql=True)\n\n# Optional, for adding batch query support (used in Apollo-Client)\nGraphQLView.attach(app, schema=Schema, batch=True)\n```\n\nThis will add a `/graphql` endpoint to your app (customizable by passing `route_path='/mypath'` to `GraphQLView.attach`).\n\nNote: `GraphQLView.attach` is just a convenience function, and the same functionality can be achieved with\n\n```python\ngql_view = GraphQLView(schema=Schema, **kwargs)\napp.router.add_route('*', gql_view, name='graphql')\n```\n\nIt's worth noting that the the \"view function\" of `GraphQLView` is contained in `GraphQLView.__call__`. So, when you create an instance, that instance is callable with the request object as the sole positional argument. To illustrate:\n\n```python\ngql_view = GraphQLView(schema=Schema, **kwargs)\ngql_view(request)  # <-- the instance is callable and expects a `aiohttp.web.Request` object.\n```\n\n### Supported options\n-   `schema`: The `GraphQLSchema` object that you want the view to execute when it gets a valid request.\n-   `executor`: The `Executor` that you want to use to execute queries. If an `AsyncioExecutor` instance is provided, performs queries asynchronously within executor\u00e2\u20ac\u2122s loop.\n-   `root_value`: The `root_value` you want to provide to `executor.execute`.\n-   `context`: A value to pass as the `context` to the `graphql()` function. By default is set to `dict` with request object at key `request`.\n-   `pretty`: Whether or not you want the response to be pretty printed JSON.\n-   `graphiql`: If `True`, may present [GraphiQL] when loaded directly from a browser (a useful tool for debugging and exploration).\n-   `graphiql_version`: The version of the provided `graphiql` package.\n-   `graphiql_template`: Inject a Jinja template string to customize GraphiQL.\n-   `middleware`: Custom middleware for [graphql-python].\n-   `batch`: Set the GraphQL view as batch (for using in [Apollo-Client] or [ReactRelayNetworkLayer])\n-   `jinja_env`: Sets jinja environment to be used to process GraphiQL template. If Jinja\u00e2\u20ac\u2122s async mode is enabled (by `enable_async=True`), uses\n`Template.render_async` instead of `Template.render`. If environment is not set, fallbacks to simple regex-based renderer.\n-   `max_age`: sets the response header `Access-Control-Max-Age` for preflight requests\n-   `encoder`: the encoder to use for responses (sensibly defaults to `graphql_server.json_encode`)\n-   `error_formatter`: the error formatter to use for responses (sensibly defaults to `graphql_server.default_format_error`)\n-   `enable_async`: whether `async` mode will be enabled.\n-   `subscriptions`: The [GraphiQL] socket endpoint for using subscriptions in [graphql-ws].\n\n\n## Testing\nTesting is done with `pytest`.\n\n```bash\ngit clone https://github.com/graphql-python/aiohttp-graphql\ncd aiohttp-graphql\n# Create a virtualenv\npython3.6 -m venv env && source env/bin/activate  # for example\npip install -e .[test]\npytest\n```\n\nThe tests, while modeled after sanic-graphql's tests, have been entirely refactored to take advantage of `pytest-asyncio`, conform with PEP-8, and increase readability with pytest fixtures. For usage tests, please check them out.\n\n\n## License\nCopyright for portions of project [aiohttp-graphql] are held by [Syrus Akbary] as part of project [flask-graphql] and [sanic-graphql] as part of project [Sergey Porivaev]. All other claims to this project [aiohttp-graphql] are held by [Devin Fee].\n\nThis project is licensed under the MIT License.\n\n  [GraphQL]: http://graphql.org/\n  [aiohttp]: https://github.com/aio-libs/aiohttp/\n  [flask-graphql]: https://github.com/graphql-python/flask-graphql\n  [sanic-graphql]: https://github.com/graphql-python/sanic-graphql\n  [Syrus Akbary]: https://github.com/syrusakbary\n  [Sergey Porivaev]: https://github.com/grazor\n  [GraphiQL]: https://github.com/graphql/graphiql\n  [graphql-python]: https://github.com/graphql-python/graphql-core\n  [Apollo-Client]: https://www.apollographql.com/docs/react/networking/network-layer/#query-batching\n  [Devin Fee]: https://github.com/dfee\n  [aiohttp-graphql]: https://github.com/graphql-python/aiohttp-graphql\n  [graphql-ws]: https://github.com/graphql-python/graphql-ws", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/graphql-python/aiohttp-graphql/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/graphql-python/aiohttp-graphql", "keywords": "api graphql protocol aiohttp", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aiohttp-graphql", "package_url": "https://pypi.org/project/aiohttp-graphql/", "platform": "any", "project_url": "https://pypi.org/project/aiohttp-graphql/", "project_urls": {"Download": "https://github.com/graphql-python/aiohttp-graphql/releases", "Homepage": "https://github.com/graphql-python/aiohttp-graphql"}, "release_url": "https://pypi.org/project/aiohttp-graphql/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Adds GraphQL support to your aiohttp application", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiohttp-graphql</h1>\n<p>Adds <a href=\"http://graphql.org/\" rel=\"nofollow\">GraphQL</a> support to your <a href=\"https://github.com/aio-libs/aiohttp/\" rel=\"nofollow\">aiohttp</a> application.</p>\n<p>Based on <a href=\"https://github.com/graphql-python/flask-graphql\" rel=\"nofollow\">flask-graphql</a> by <a href=\"https://github.com/syrusakbary\" rel=\"nofollow\">Syrus Akbary</a> and <a href=\"https://github.com/graphql-python/sanic-graphql\" rel=\"nofollow\">sanic-graphql</a> by <a href=\"https://github.com/grazor\" rel=\"nofollow\">Sergey Porivaev</a>.</p>\n<p><a href=\"https://badge.fury.io/py/aiohttp-graphql\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9338b0806ed6f46ac80d0289b7859bbd10490ad9/68747470733a2f2f62616467652e667572792e696f2f70792f61696f687474702d6772617068716c2e737667\"></a>\n<a href=\"https://github.com/graphql-python/aiohttp-graphql\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b56fd2b47f3e1b65c15221d859d7fc1621b25f5/68747470733a2f2f7472617669732d63692e636f6d2f6772617068716c2d707974686f6e2f61696f687474702d6772617068716c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/graphql-python/aiohttp-graphql\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e6449403f785b04bc61ab1c1545950c5e10706b/68747470733a2f2f636f6465636f762e696f2f67682f6772617068716c2d707974686f6e2f61696f687474702d6772617068716c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h2>Usage</h2>\n<p>Just use the <code>GraphQLView</code> view from <code>aiohttp_graphql</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp_graphql</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLView</span>\n\n<span class=\"n\">GraphQLView</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">graphiql</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Optional, for adding batch query support (used in Apollo-Client)</span>\n<span class=\"n\">GraphQLView</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>This will add a <code>/graphql</code> endpoint to your app (customizable by passing <code>route_path='/mypath'</code> to <code>GraphQLView.attach</code>).</p>\n<p>Note: <code>GraphQLView.attach</code> is just a convenience function, and the same functionality can be achieved with</p>\n<pre><span class=\"n\">gql_view</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLView</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"n\">gql_view</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'graphql'</span><span class=\"p\">)</span>\n</pre>\n<p>It's worth noting that the the \"view function\" of <code>GraphQLView</code> is contained in <code>GraphQLView.__call__</code>. So, when you create an instance, that instance is callable with the request object as the sole positional argument. To illustrate:</p>\n<pre><span class=\"n\">gql_view</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLView</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"n\">gql_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;-- the instance is callable and expects a `aiohttp.web.Request` object.</span>\n</pre>\n<h3>Supported options</h3>\n<ul>\n<li><code>schema</code>: The <code>GraphQLSchema</code> object that you want the view to execute when it gets a valid request.</li>\n<li><code>executor</code>: The <code>Executor</code> that you want to use to execute queries. If an <code>AsyncioExecutor</code> instance is provided, performs queries asynchronously within executor\u00e2\u20ac\u2122s loop.</li>\n<li><code>root_value</code>: The <code>root_value</code> you want to provide to <code>executor.execute</code>.</li>\n<li><code>context</code>: A value to pass as the <code>context</code> to the <code>graphql()</code> function. By default is set to <code>dict</code> with request object at key <code>request</code>.</li>\n<li><code>pretty</code>: Whether or not you want the response to be pretty printed JSON.</li>\n<li><code>graphiql</code>: If <code>True</code>, may present <a href=\"https://github.com/graphql/graphiql\" rel=\"nofollow\">GraphiQL</a> when loaded directly from a browser (a useful tool for debugging and exploration).</li>\n<li><code>graphiql_version</code>: The version of the provided <code>graphiql</code> package.</li>\n<li><code>graphiql_template</code>: Inject a Jinja template string to customize GraphiQL.</li>\n<li><code>middleware</code>: Custom middleware for <a href=\"https://github.com/graphql-python/graphql-core\" rel=\"nofollow\">graphql-python</a>.</li>\n<li><code>batch</code>: Set the GraphQL view as batch (for using in <a href=\"https://www.apollographql.com/docs/react/networking/network-layer/#query-batching\" rel=\"nofollow\">Apollo-Client</a> or [ReactRelayNetworkLayer])</li>\n<li><code>jinja_env</code>: Sets jinja environment to be used to process GraphiQL template. If Jinja\u00e2\u20ac\u2122s async mode is enabled (by <code>enable_async=True</code>), uses\n<code>Template.render_async</code> instead of <code>Template.render</code>. If environment is not set, fallbacks to simple regex-based renderer.</li>\n<li><code>max_age</code>: sets the response header <code>Access-Control-Max-Age</code> for preflight requests</li>\n<li><code>encoder</code>: the encoder to use for responses (sensibly defaults to <code>graphql_server.json_encode</code>)</li>\n<li><code>error_formatter</code>: the error formatter to use for responses (sensibly defaults to <code>graphql_server.default_format_error</code>)</li>\n<li><code>enable_async</code>: whether <code>async</code> mode will be enabled.</li>\n<li><code>subscriptions</code>: The <a href=\"https://github.com/graphql/graphiql\" rel=\"nofollow\">GraphiQL</a> socket endpoint for using subscriptions in <a href=\"https://github.com/graphql-python/graphql-ws\" rel=\"nofollow\">graphql-ws</a>.</li>\n</ul>\n<h2>Testing</h2>\n<p>Testing is done with <code>pytest</code>.</p>\n<pre>git clone https://github.com/graphql-python/aiohttp-graphql\n<span class=\"nb\">cd</span> aiohttp-graphql\n<span class=\"c1\"># Create a virtualenv</span>\npython3.6 -m venv env <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">source</span> env/bin/activate  <span class=\"c1\"># for example</span>\npip install -e .<span class=\"o\">[</span>test<span class=\"o\">]</span>\npytest\n</pre>\n<p>The tests, while modeled after sanic-graphql's tests, have been entirely refactored to take advantage of <code>pytest-asyncio</code>, conform with PEP-8, and increase readability with pytest fixtures. For usage tests, please check them out.</p>\n<h2>License</h2>\n<p>Copyright for portions of project <a href=\"https://github.com/graphql-python/aiohttp-graphql\" rel=\"nofollow\">aiohttp-graphql</a> are held by <a href=\"https://github.com/syrusakbary\" rel=\"nofollow\">Syrus Akbary</a> as part of project <a href=\"https://github.com/graphql-python/flask-graphql\" rel=\"nofollow\">flask-graphql</a> and <a href=\"https://github.com/graphql-python/sanic-graphql\" rel=\"nofollow\">sanic-graphql</a> as part of project <a href=\"https://github.com/grazor\" rel=\"nofollow\">Sergey Porivaev</a>. All other claims to this project <a href=\"https://github.com/graphql-python/aiohttp-graphql\" rel=\"nofollow\">aiohttp-graphql</a> are held by <a href=\"https://github.com/dfee\" rel=\"nofollow\">Devin Fee</a>.</p>\n<p>This project is licensed under the MIT License.</p>\n\n          </div>"}, "last_serial": 7159480, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6740b4dbee19686f2325a51bd795bed8", "sha256": "d565518fd94437ed1bbf54502acbbe4a6479b34a4ab2b3a236220d28bf6b4df3"}, "downloads": -1, "filename": "aiohttp-graphql-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6740b4dbee19686f2325a51bd795bed8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6642, "upload_time": "2017-09-23T09:41:27", "upload_time_iso_8601": "2017-09-23T09:41:27.263544Z", "url": "https://files.pythonhosted.org/packages/2a/56/d50043d131d5419e3e737044798f2ba907c09088340971f922f5d19d401e/aiohttp-graphql-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1f1d9af870c563f0dc0e9de678b6369e", "sha256": "29035589ca0929f5dc19b09461db0a2563db0166a6efcf22e23498a44e45040e"}, "downloads": -1, "filename": "aiohttp-graphql-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1f1d9af870c563f0dc0e9de678b6369e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19198, "upload_time": "2020-05-03T20:13:43", "upload_time_iso_8601": "2020-05-03T20:13:43.264858Z", "url": "https://files.pythonhosted.org/packages/fc/e7/953018ff0af70c515efff12175240ca1d4f9a47d2681eeba656a37e3db02/aiohttp-graphql-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f1d9af870c563f0dc0e9de678b6369e", "sha256": "29035589ca0929f5dc19b09461db0a2563db0166a6efcf22e23498a44e45040e"}, "downloads": -1, "filename": "aiohttp-graphql-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1f1d9af870c563f0dc0e9de678b6369e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19198, "upload_time": "2020-05-03T20:13:43", "upload_time_iso_8601": "2020-05-03T20:13:43.264858Z", "url": "https://files.pythonhosted.org/packages/fc/e7/953018ff0af70c515efff12175240ca1d4f9a47d2681eeba656a37e3db02/aiohttp-graphql-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:19 2020"}