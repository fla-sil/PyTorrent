{"info": {"author": "Emboiko", "author_email": "ed@emboiko.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "## Socket_Singleton.py\n\n### Socket-based, single-instance Python applications with a clean interface\n\n###### *Without lockfiles, mutexes, dependencies, or tomfoolery*\n\n**Install:**\n\n`pip install Socket_Singleton`\n\n**Import:**\n\n`From Socket_Singleton import Socket_Singleton`\n\n**Constructor:**\n\n`Socket_Singleton(address=\"127.0.0.1\", port=1337, timeout=0, client=True, strict=True)`\n\n**Usage:**\n\n`Socket_Singleton()`\n\nor, keep a reference:\n\n`app = Socket_Singleton()`\n\nthen attach a callback, and capture arguments from subsequent calls to your application:\n\n```\ndef my_callback(arg):\n    print(arg)\n\napp.trace(my_callback)\n```\n\n**See also:**\n\n[Common TCP/UDP Port Numbers](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers)\n\nIt is recommended to specify a port in the constructor*\n\n\nExamples:\n---\n\nSay we have an application, app.py, that we want to restrict to a single instance.\n```\n#app.py\n\nfrom Socket_Singleton import Socket_Singleton\nSocket_Singleton()\ninput() #Blocking call to simulate your_business_logic() \n```\nThe first time app.py is launched:\n```\n>> C:\\current\\working\\directory \u00ce\u00bb python app.py\n>> \n```\napp.py executes normally. (Here, app.py blocks until we satisfy input(). Replace this with your own logic. The examples and basic recipes on this page contain these calls simply for demonstration purposes.)\n\nNow, in another shell, if we try:\n```\n>> C:\\current\\working\\directory \u00ce\u00bb python app.py\n>> C:\\current\\working\\directory \u00ce\u00bb\n```\nThe interpreter exits immediately and we end up back at the prompt.\n\n---\nWe can also get access to **arguments** passed from subsequent attempts to run `python app.py` with the `arguments` attribute.\nThis attribute is not intended to be accessed directly- it's most likely more convenient to use the `trace()` method. This allows you to **register a callback**, which gets called when `arguments` is appended (as other instances *try* to run).\n\n`Socket_Singleton.trace(observer, *args, **kwargs)`\n\n```\n#app.py\n\nfrom Socket_Singleton import Socket_Singleton\n\ndef callback(argument, *args, **kwargs):\n    print(argument)\n    #do_a_thing(argument)\n\ndef main():\n    app = Socket_Singleton()\n    app.trace(callback, *args, **kwargs)\n    input() #Blocking call to simulate your_business_logic() \n\nif __name__ == \"__main__\":\n    main()\n```\nAt the terminal:\n```\n>> C:\\current\\working\\directory \u00ce\u00bb python app.py\n>> \n```\n\nIn another shell, subsequent attempts to `python app.py` now look like this:\n```\n>> C:\\current\\working\\directory \u00ce\u00bb python app.py foo bar baz\n>> C:\\current\\working\\directory \u00ce\u00bb\n```\nMeanwhile, our output for the original `python app.py` shell looks like this:\n```\n>> C:\\current\\working\\directory \u00ce\u00bb python app.py\n>> foo\n>> bar\n>> baz\n```\n\nWe can also **detach a given observer / callback** via `untrace()` with a similar interface. \n\n`Socket_Singleton.untrace(observer)`\n\n---\nIf you'd prefer to **disconnect** from the port prematurely, thus releasing the \"lock\", there's a `close()` method:\n\n```\n#app.py\n\nfrom Socket_Singleton import Socket_Singleton\n\ndef main():\n    app = Socket_Singleton()\n    app.close()\n    print(\"Running!\")\n    input()\n\nif __name__ == \"__main__\":\n    main()\n```\nAt the terminal:\n```\n>> C:\\current\\working\\directory \u00ce\u00bb python app.py\n>> Running!\n>> \n```\nAnd in a new shell:\n```\n>> C:\\current\\working\\directory \u00ce\u00bb python app.py\n>> Running!\n>> \n```\n\n---\n\n**Context manager** protocol is implemented as well:\n\n```\nwith Socket_Singleton():\n    input() #Blocking call to simulate your_business_logic()\n```\n\n`Socket_Singleton.__enter__()` returns self so we can can have access to the object if needed:\n\n```\nwith Socket_Singleton() as ss:\n    ss.trace(callback)\n    input() #Blocking call to simulate your_business_logic()\n```\n\n---\n**Timeout**\n\nA duration in seconds, specifying how long to hold the socket. Defaults to 0 (no timeout, keep-alive). Countdown starts at the end of initialization, immediately after the socket is bound successfully. \n\n---\n\nIf we specify the kwarg `strict=False`, we can raise and capture a **custom exception**, `MultipleSingletonsError`, rather than entirely destroying the process which fails to become the singleton.\n\n```\nfrom Socket_Singleton import Socket_Singleton, MultipleSingletonsError\n\ndef callback(arg):\n    print(f\"callback: {arg}\")\n\ndef main():\n    try:\n        app = Socket_Singleton(strict=False)\n    except MultipleSingletonsError as err:\n        print(\"We are not the singleton.\")\n        print(err)\n    else:\n        print(\"We are the singleton!\")\n        app.trace(callback)\n        [print(arg) for arg in app.arguments]\n        # print(app)\n        # print(repr(app))\n        # help(app)\n\n    input()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emboiko/Socket_Singleton", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Socket-Singleton", "package_url": "https://pypi.org/project/Socket-Singleton/", "platform": "", "project_url": "https://pypi.org/project/Socket-Singleton/", "project_urls": {"Homepage": "https://github.com/emboiko/Socket_Singleton"}, "release_url": "https://pypi.org/project/Socket-Singleton/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Allow a single instance of a Python application to run at once", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Socket_Singleton.py</h2>\n<h3>Socket-based, single-instance Python applications with a clean interface</h3>\n<h6><em>Without lockfiles, mutexes, dependencies, or tomfoolery</em></h6>\n<p><strong>Install:</strong></p>\n<p><code>pip install Socket_Singleton</code></p>\n<p><strong>Import:</strong></p>\n<p><code>From Socket_Singleton import Socket_Singleton</code></p>\n<p><strong>Constructor:</strong></p>\n<p><code>Socket_Singleton(address=\"127.0.0.1\", port=1337, timeout=0, client=True, strict=True)</code></p>\n<p><strong>Usage:</strong></p>\n<p><code>Socket_Singleton()</code></p>\n<p>or, keep a reference:</p>\n<p><code>app = Socket_Singleton()</code></p>\n<p>then attach a callback, and capture arguments from subsequent calls to your application:</p>\n<pre><code>def my_callback(arg):\n    print(arg)\n\napp.trace(my_callback)\n</code></pre>\n<p><strong>See also:</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers\" rel=\"nofollow\">Common TCP/UDP Port Numbers</a></p>\n<p>It is recommended to specify a port in the constructor*</p>\n<h2>Examples:</h2>\n<p>Say we have an application, app.py, that we want to restrict to a single instance.</p>\n<pre><code>#app.py\n\nfrom Socket_Singleton import Socket_Singleton\nSocket_Singleton()\ninput() #Blocking call to simulate your_business_logic() \n</code></pre>\n<p>The first time app.py is launched:</p>\n<pre><code>&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb python app.py\n&gt;&gt; \n</code></pre>\n<p>app.py executes normally. (Here, app.py blocks until we satisfy input(). Replace this with your own logic. The examples and basic recipes on this page contain these calls simply for demonstration purposes.)</p>\n<p>Now, in another shell, if we try:</p>\n<pre><code>&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb python app.py\n&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb\n</code></pre>\n<p>The interpreter exits immediately and we end up back at the prompt.</p>\n<hr>\n<p>We can also get access to <strong>arguments</strong> passed from subsequent attempts to run <code>python app.py</code> with the <code>arguments</code> attribute.\nThis attribute is not intended to be accessed directly- it's most likely more convenient to use the <code>trace()</code> method. This allows you to <strong>register a callback</strong>, which gets called when <code>arguments</code> is appended (as other instances <em>try</em> to run).</p>\n<p><code>Socket_Singleton.trace(observer, *args, **kwargs)</code></p>\n<pre><code>#app.py\n\nfrom Socket_Singleton import Socket_Singleton\n\ndef callback(argument, *args, **kwargs):\n    print(argument)\n    #do_a_thing(argument)\n\ndef main():\n    app = Socket_Singleton()\n    app.trace(callback, *args, **kwargs)\n    input() #Blocking call to simulate your_business_logic() \n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<p>At the terminal:</p>\n<pre><code>&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb python app.py\n&gt;&gt; \n</code></pre>\n<p>In another shell, subsequent attempts to <code>python app.py</code> now look like this:</p>\n<pre><code>&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb python app.py foo bar baz\n&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb\n</code></pre>\n<p>Meanwhile, our output for the original <code>python app.py</code> shell looks like this:</p>\n<pre><code>&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb python app.py\n&gt;&gt; foo\n&gt;&gt; bar\n&gt;&gt; baz\n</code></pre>\n<p>We can also <strong>detach a given observer / callback</strong> via <code>untrace()</code> with a similar interface.</p>\n<p><code>Socket_Singleton.untrace(observer)</code></p>\n<hr>\n<p>If you'd prefer to <strong>disconnect</strong> from the port prematurely, thus releasing the \"lock\", there's a <code>close()</code> method:</p>\n<pre><code>#app.py\n\nfrom Socket_Singleton import Socket_Singleton\n\ndef main():\n    app = Socket_Singleton()\n    app.close()\n    print(\"Running!\")\n    input()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<p>At the terminal:</p>\n<pre><code>&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb python app.py\n&gt;&gt; Running!\n&gt;&gt; \n</code></pre>\n<p>And in a new shell:</p>\n<pre><code>&gt;&gt; C:\\current\\working\\directory \u00ce\u00bb python app.py\n&gt;&gt; Running!\n&gt;&gt; \n</code></pre>\n<hr>\n<p><strong>Context manager</strong> protocol is implemented as well:</p>\n<pre><code>with Socket_Singleton():\n    input() #Blocking call to simulate your_business_logic()\n</code></pre>\n<p><code>Socket_Singleton.__enter__()</code> returns self so we can can have access to the object if needed:</p>\n<pre><code>with Socket_Singleton() as ss:\n    ss.trace(callback)\n    input() #Blocking call to simulate your_business_logic()\n</code></pre>\n<hr>\n<p><strong>Timeout</strong></p>\n<p>A duration in seconds, specifying how long to hold the socket. Defaults to 0 (no timeout, keep-alive). Countdown starts at the end of initialization, immediately after the socket is bound successfully.</p>\n<hr>\n<p>If we specify the kwarg <code>strict=False</code>, we can raise and capture a <strong>custom exception</strong>, <code>MultipleSingletonsError</code>, rather than entirely destroying the process which fails to become the singleton.</p>\n<pre><code>from Socket_Singleton import Socket_Singleton, MultipleSingletonsError\n\ndef callback(arg):\n    print(f\"callback: {arg}\")\n\ndef main():\n    try:\n        app = Socket_Singleton(strict=False)\n    except MultipleSingletonsError as err:\n        print(\"We are not the singleton.\")\n        print(err)\n    else:\n        print(\"We are the singleton!\")\n        app.trace(callback)\n        [print(arg) for arg in app.arguments]\n        # print(app)\n        # print(repr(app))\n        # help(app)\n\n    input()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n\n          </div>"}, "last_serial": 7117677, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "de1eb4433f39e80c0f4911fa24d0eb86", "sha256": "f5791269c5059b8eaaa92763c71ccffa0ca62057edc08444ebe1b3fb3475925b"}, "downloads": -1, "filename": "Socket_Singleton-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "de1eb4433f39e80c0f4911fa24d0eb86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6278, "upload_time": "2020-04-28T06:35:23", "upload_time_iso_8601": "2020-04-28T06:35:23.291473Z", "url": "https://files.pythonhosted.org/packages/38/6b/f4399babe3f41cc43322d86d62e66b54fa2f5eb9745ae0a3043ab408bb5c/Socket_Singleton-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acb343feb35e80192d0b47919cc8af64", "sha256": "f9b91eec208e98814fc368aec69e0e1a7faad3b4c6fb853984bd980add97da02"}, "downloads": -1, "filename": "Socket_Singleton-0.0.1.tar.gz", "has_sig": false, "md5_digest": "acb343feb35e80192d0b47919cc8af64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5097, "upload_time": "2020-04-28T06:35:25", "upload_time_iso_8601": "2020-04-28T06:35:25.186291Z", "url": "https://files.pythonhosted.org/packages/80/4d/2ab0795f75b609116ae02ef465cfa986c7ae0f1448994d879ac61c020ea8/Socket_Singleton-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "aabcc0b97ab718795445a9963fba0910", "sha256": "fb93c364d3231158e71e84903918047cf33010bdb3e45bf785aeb4352145871c"}, "downloads": -1, "filename": "Socket_Singleton-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "aabcc0b97ab718795445a9963fba0910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6294, "upload_time": "2020-04-28T06:47:02", "upload_time_iso_8601": "2020-04-28T06:47:02.619996Z", "url": "https://files.pythonhosted.org/packages/70/4d/a4ceaf4147c7505a014cd3aa103c9494e4166249275503a4a7cf7af6aa34/Socket_Singleton-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89a1849ac853e0d50e7651fb00f0506b", "sha256": "3e0fad75bee9d3d68a0f7350b23c24aaed00850fa9a8eb48e5a2c490698f2f62"}, "downloads": -1, "filename": "Socket_Singleton-0.0.2.tar.gz", "has_sig": false, "md5_digest": "89a1849ac853e0d50e7651fb00f0506b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5116, "upload_time": "2020-04-28T06:47:03", "upload_time_iso_8601": "2020-04-28T06:47:03.572090Z", "url": "https://files.pythonhosted.org/packages/ba/44/2d5268f3c57f499b7bfd636a0d4983cb123488650ddf5a57685b6b3a4369/Socket_Singleton-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aabcc0b97ab718795445a9963fba0910", "sha256": "fb93c364d3231158e71e84903918047cf33010bdb3e45bf785aeb4352145871c"}, "downloads": -1, "filename": "Socket_Singleton-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "aabcc0b97ab718795445a9963fba0910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6294, "upload_time": "2020-04-28T06:47:02", "upload_time_iso_8601": "2020-04-28T06:47:02.619996Z", "url": "https://files.pythonhosted.org/packages/70/4d/a4ceaf4147c7505a014cd3aa103c9494e4166249275503a4a7cf7af6aa34/Socket_Singleton-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89a1849ac853e0d50e7651fb00f0506b", "sha256": "3e0fad75bee9d3d68a0f7350b23c24aaed00850fa9a8eb48e5a2c490698f2f62"}, "downloads": -1, "filename": "Socket_Singleton-0.0.2.tar.gz", "has_sig": false, "md5_digest": "89a1849ac853e0d50e7651fb00f0506b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5116, "upload_time": "2020-04-28T06:47:03", "upload_time_iso_8601": "2020-04-28T06:47:03.572090Z", "url": "https://files.pythonhosted.org/packages/ba/44/2d5268f3c57f499b7bfd636a0d4983cb123488650ddf5a57685b6b3a4369/Socket_Singleton-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:01 2020"}