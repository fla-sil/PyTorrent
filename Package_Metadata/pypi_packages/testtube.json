{"info": {"author": "Thomas Welfley", "author_email": "thomas.welfley+testtube@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Testing", "Topic :: System :: Filesystems", "Topic :: System :: Monitoring", "Topic :: Utilities"], "description": "Testtube\n========\n\n|Build Status| |Coverage Status| |Latest Version| |Downloads|\n\nSpare your alt and tab keys by automatically running your project's test\nsuite whenever files change.\n\n.. |Build Status| image:: https://img.shields.io/travis/thomasw/testtube.svg\n   :target: https://travis-ci.org/thomasw/testtube\n.. |Coverage Status| image:: https://img.shields.io/coveralls/thomasw/testtube.svg\n   :target: https://coveralls.io/r/thomasw/testtube\n.. |Latest Version| image:: https://img.shields.io/pypi/v/testtube.svg\n   :target: https://pypi.python.org/pypi/testtube/\n.. |Downloads| image:: https://img.shields.io/pypi/dm/testtube.svg\n   :target: https://pypi.python.org/pypi/testtube/\n\nInstallation\n------------\n\n::\n\n    pip install testtube\n\ntesttube is tested with Python 2.6, 2.7, 3.2, 3.3 and 3.4, 3.5 and pypy.\n\nUsage\n-----\n\n1. Configure testtube\n~~~~~~~~~~~~~~~~~~~~~\n\nThe simplest way to configure testtube is to place a tube.py file in\nwhatever directory testtube's watch command (``stir``) will be executed in\n(this is typically a project's root directory). The tube.py file needs to define\nan iterable named ``PATTERNS`` that contains tuples which 1. specify a regular\nexpression to test the paths of changed files and 2. an iterable containing a\nlist of tests to run when a path matches the corresponding regular expression.\n\nHere's an example ``tube.py`` file:\n\n.. code:: python\n\n    from testtube.helpers import Frosted, Nosetests, Pep257, Flake8\n\n    PATTERNS = (\n        # Run pep257 check against a file if it changes, excluding files that have\n        # test_ or tube.py in the name.\n        # If this test fails, don't make any noise (0 bells on failure)\n        (\n            r'((?!test_)(?!tube\\.py).)*\\.py$',\n            [Pep257(bells=0)]\n        ),\n        # Run flake8 and Frosted on the entire project when a python file changes.\n        # If these checks fail, abort the entire test suite because failure might\n        # be due to a syntax error. There's no point running the subsequent tests\n        # if there is such an error.\n        (\n            r'.*\\.py$',\n            [Flake8(all_files=True), Frosted(all_files=True)],\n            {'fail_fast': True}\n        ),\n        # Run the test suite whenever python or test config files change.\n        (\n            r'(.*setup\\.cfg$)|(.*\\.coveragerc)|(.*\\.py$)',\n            [Nosetests()]\n        )\n    )\n\n    # Don't process any file changes that match these rules\n    IGNORE_PATTERNS = (\n        r'.*sample/[^/]*$',\n    )\n\nIn the example above, ``PATTERNS`` contains a series of patterns, coupled with a\nlist of callable tests. The second test group, which calls Flake8 and Frosted,\nincludes an optional test group configuration.\n\nAn iterable named ``IGNORE_PATTERNS`` is also specified. Any paths that match\nthese patterns will be ignored regardless of whether or not they also match a\ntest group defined in ``PATTERNS``.\n\nA test, at its simplest, is just a callable that returns ``True`` or\n``False`` after being passed the path to a changed file and a regular\nexpression match object for the path's match against the corresponding test\ngroup's regular expression. The example uses several helpers that ship with\ntesttube. These helpers are callable objects that can be configured in\nvarious ways when they are instantiated.\n\nTesttube comes with a number of such helpers, which can be found in\n`helpers.py <https://github.com/thomasw/testtube/blob/master/testtube/helpers.py>`_.\nThey are designed to save consumers from specifying their own tests as much as\nis possible. If they are insufficient for a specific project, please see\n`Writing custom tests`_.\n\nIncluded helpers:\n\n-  Pep8\n-  Pyflakes\n-  Frosted\n-  Pep257\n-  Nosetests\n-  PythonSetupPyTest (runs python setup.py when matching files change)\n-  ClearScreen (clears the screen)\n\nHelpers typically accept the following arguments when instantiated:\n\n-  ``all_files``: run the test against the entire source directory\n   instead of just the changed file (which is the default behavior)\n-  ``fail_fast``: Abort running the rest of the test group if the test\n   fails.\n-  ``bells``: On failure, testtube will audibly notify the user 3 times\n   unless otherwise specified\n-  ``name``: The name of the test in test report output\n\nThe following generates a pep8 test configured to run against all files,\nabort processing of its test group on failure, alert the user 5 times\naudibly, and show up as \"follow pep8 dude\" in test report output:\n\n.. code:: python\n\n    from testtube.helpers import Pep8\n\n    helper = Pep8(\n        all_files=True, fail_fast=True, bells=5, name='follow pep8 dude')\n\nNote that helpers, once instantiated, are just callables that return\n``True`` or ``False``:\n\n.. code:: python\n\n    # Once configured, helpers are callables (they act like methods) that\n    # accept a path to a python file and a regex match object (though the\n    # match object isn't a requirement).\n\n    helper('/path/to/some/file.py', None)\n\nAnd here's that same example fully incorporated into a tube.py file:\n\n.. code:: python\n\n    from testtube.helpers import Pep8\n\n\n    PATTERNS = [\n        [\n            # Pattern\n            r'.*\\.py$',\n            # list of callable tests to run\n            [\n                Pep8(\n                    all_files=True, fail_fast=True, bells=5,\n                    name='follow pep8 dude')\n            ]\n        ]\n    ]\n\nThe behavior of helpers can be customized as necessary by overriding\nspecific methods. See\n`helpers.py <https://github.com/thomasw/testtube/blob/master/testtube/helpers.py>`_\nfor further information.\n\nIn addition to configuring helpers, test groups can also be configured:\n\n-  ``fail_fast``: abort processing of subsequent test groups if all\n   tests in the configured group did not pass.\n\nIn the first example tube.py file, the second test group is configured\nto abort the rest of the test suite if either ``Flake8`` or ``Frosted``\nfail.\n\n2. Stir it\n~~~~~~~~~~\n\nOnce a tube.py file is in place, tell testtube to watch the project for\nchanges:\n\n::\n\n    $ stir\n    testtube is now watching /Path/to/CWD/ for changes...\n\nBy default, stir will watch the current working directory and configure\nitself with a settings module named ``tube`` (tube.py). If the tube.py file was\nplaced in the project root directory, then one shouldn't need to specify\nany parameters assuming stir is executed from that same directory. If paths need\nto be customized a bit, ``stir -h`` will light the way:\n\n::\n\n    $ stir -h\n    usage: stir [-h] [--src_dir SRC_DIR] [--settings SETTINGS]\n\n    Watch a directory and run a custom set of tests whenever a file changes.\n\n    optional arguments:\n      -h, --help           show this help message and exit\n      --src_dir SRC_DIR    The directory to watch for changes. (Defaults to CWD)\n      --settings SETTINGS  Path to a testtube settings file that defines which\n                           tests to run (Defaults to \"tube.py\" - your settings\n                           file must be importable and the path must be relative\n                           to your CWD)\n\nWriting custom tests\n--------------------\n\nIf the included helpers don't meet the specific needs of a project, custom tests\ncan be defined directly in tube.py. Simply define a callable that accepts two\narguments and add it to the ``PATTERNS`` list:\n\n.. code:: python\n\n    def mytest(changed_file, match_obj):\n        print \"Oh snap, %s just changed\" % changed_file\n\n    PATTERNS = (\n        (r'.*', [mytest]),\n    )\n\nIf a custom test needs to be configurable like the builtin helpers or if it\nneeds to make system calls, extending the base helper class\n(``testtube.helpers.Helper``) and customizing the behavior as is necessary is\nusually the simplest approach. The following is a tube.py file which defines a\nconfigureable test that outputs the file tree for the entire project each time a\npython file changes:\n\n.. code:: python\n\n    from testtube.helpers import Helper\n\n\n    class ProjectTree(Helper):\n        # The built in helper class is designed to make writing tests that make\n        # system calls easy. Overriding `command` is all that's usually\n        # necessary\n        command = 'tree'\n        all_files = True\n\n        def __init__(self, **kwargs):\n            # TreeOutput only works on all files, so override any contrary conf\n            kwargs['all_files'] = True\n\n            super(ProjectTree, self).__init__(kwargs)\n\n    PATTERNS = (\n        (r'.*\\.py$', [ProjectTree(bells=1)]),\n    )\n\nNote that this example requires tree to be installed on the system\n(``$ brew install tree`` for OS X users).\n\nCaveats\n-------\n\n-  The distinction between ``r'.*\\.py'`` and ``r'.*\\.py$'`` is significant.\n   Without the trailing ``$``, testtube will run tests every time pyc\n   files change. That's very likely to not be useful.\n-  testtube doesn't currently reload its own configuration when it\n   changes. If tube.py is modified, testtube will need to be restarted.\n\nLocal development\n-----------------\n\nInstall the development requirements using the included requirements.txt file:\n\n::\n\n    pip install -r requirements.txt\n\nIt is often useful to use to use the checkout of testtube that's currently under\ndevelopment to monitor itself using its included tube.py file. Use testtube to\nhelp build testtube. This can be achieved by installing the checkout as an\neditable. Execute the following from the project root and then use the ``stir``\ncommand as one usually would:\n\n::\n\n    pip install -e ./\n\nNote that testtube will need to be restarted for code changes to take effect.\n\nEverything else\n---------------\n\nCopyright (c) `Thomas Welfley <http://welfley.me>`_. See\n`LICENSE <https://github.com/thomasw/testtube/blob/master/LICENSE>`_\nfor details.\n\n\nChangelog\n=========\n\n1.1.0\n-----\n\n-  Simplify dev environment configuration.\n-  Add tox configuration for locally testing against multiple python versions.\n-  Fix a bug in the nosetests helper implementation that was making it\n   ignore passed in configuration.\n-  Fix a bug that causing testtube to choke on simple method based tests.\n-  Add an ``IGNORE_PATTERNS`` configuration option which supersedes test group\n   pattern matches and allows users to configure testtube to always ignore\n   certain files.\n-  Add integration tests.\n-  Factor out threading anti-patterns from core (``time.sleep()``).\n\n1.0.0\n-----\n\n-  Make tests configurable\n-  Make test groups configurable\n-  Centralizes output in a renderer object\n-  Adds support for audible bells\n-  Adds test group fail fast support (aborts test run)\n-  Adds test fail fast support (aborts test group)\n-  Adds helper base class to make writing tests easier\n-  Adds a frosted helper\n-  Rewrite of configuration handling\n-  Eliminates redundant helpers: pep8\\_all, pyflakes\\_all,\n   nosetests\\_all\n\n0.2.0\n-----\n\n-  Added python 3 support\n\n0.0.1\n-----\n\n-  Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thomasw/testtube", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "testtube", "package_url": "https://pypi.org/project/testtube/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/testtube/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/thomasw/testtube"}, "release_url": "https://pypi.org/project/testtube/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "testtube is a Python based continuous test runner.\n\ntesttube's stir command can, based on a tube.py configuration file, monitor\na directory for file changes and execute a pre-configured set of tests when\nchanges occur.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"testtube\">\n<h2>Testtube</h2>\n<p><a href=\"https://travis-ci.org/thomasw/testtube\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a28bf80f8c597f142a2d7651a4402f12cb857074/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f74686f6d6173772f74657374747562652e737667\"></a> <a href=\"https://coveralls.io/r/thomasw/testtube\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58c63f5380afe971cb354c0849f23d3169866c93/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f74686f6d6173772f74657374747562652e737667\"></a> <a href=\"https://pypi.python.org/pypi/testtube/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8881f1122e26f03760faa4915b9d185d0496f8c1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74657374747562652e737667\"></a> <a href=\"https://pypi.python.org/pypi/testtube/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db9b61528b324215b0f4a54eb35377c90291d645/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f74657374747562652e737667\"></a></p>\n<p>Spare your alt and tab keys by automatically running your project\u2019s test\nsuite whenever files change.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install testtube\n</pre>\n<p>testtube is tested with Python 2.6, 2.7, 3.2, 3.3 and 3.4, 3.5 and pypy.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"configure-testtube\">\n<h4>1. Configure testtube</h4>\n<p>The simplest way to configure testtube is to place a tube.py file in\nwhatever directory testtube\u2019s watch command (<tt>stir</tt>) will be executed in\n(this is typically a project\u2019s root directory). The tube.py file needs to define\nan iterable named <tt>PATTERNS</tt> that contains tuples which 1. specify a regular\nexpression to test the paths of changed files and 2. an iterable containing a\nlist of tests to run when a path matches the corresponding regular expression.</p>\n<p>Here\u2019s an example <tt>tube.py</tt> file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testtube.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">Frosted</span><span class=\"p\">,</span> <span class=\"n\">Nosetests</span><span class=\"p\">,</span> <span class=\"n\">Pep257</span><span class=\"p\">,</span> <span class=\"n\">Flake8</span>\n\n<span class=\"n\">PATTERNS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># Run pep257 check against a file if it changes, excluding files that have</span>\n    <span class=\"c1\"># test_ or tube.py in the name.</span>\n    <span class=\"c1\"># If this test fails, don't make any noise (0 bells on failure)</span>\n    <span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s1\">'((?!test_)(?!tube\\.py).)*\\.py$'</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"n\">Pep257</span><span class=\"p\">(</span><span class=\"n\">bells</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n    <span class=\"p\">),</span>\n    <span class=\"c1\"># Run flake8 and Frosted on the entire project when a python file changes.</span>\n    <span class=\"c1\"># If these checks fail, abort the entire test suite because failure might</span>\n    <span class=\"c1\"># be due to a syntax error. There's no point running the subsequent tests</span>\n    <span class=\"c1\"># if there is such an error.</span>\n    <span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s1\">'.*\\.py$'</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"n\">Flake8</span><span class=\"p\">(</span><span class=\"n\">all_files</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">Frosted</span><span class=\"p\">(</span><span class=\"n\">all_files</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)],</span>\n        <span class=\"p\">{</span><span class=\"s1\">'fail_fast'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n    <span class=\"p\">),</span>\n    <span class=\"c1\"># Run the test suite whenever python or test config files change.</span>\n    <span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s1\">'(.*setup\\.cfg$)|(.*\\.coveragerc)|(.*\\.py$)'</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"n\">Nosetests</span><span class=\"p\">()]</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Don't process any file changes that match these rules</span>\n<span class=\"n\">IGNORE_PATTERNS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s1\">'.*sample/[^/]*$'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>In the example above, <tt>PATTERNS</tt> contains a series of patterns, coupled with a\nlist of callable tests. The second test group, which calls Flake8 and Frosted,\nincludes an optional test group configuration.</p>\n<p>An iterable named <tt>IGNORE_PATTERNS</tt> is also specified. Any paths that match\nthese patterns will be ignored regardless of whether or not they also match a\ntest group defined in <tt>PATTERNS</tt>.</p>\n<p>A test, at its simplest, is just a callable that returns <tt>True</tt> or\n<tt>False</tt> after being passed the path to a changed file and a regular\nexpression match object for the path\u2019s match against the corresponding test\ngroup\u2019s regular expression. The example uses several helpers that ship with\ntesttube. These helpers are callable objects that can be configured in\nvarious ways when they are instantiated.</p>\n<p>Testtube comes with a number of such helpers, which can be found in\n<a href=\"https://github.com/thomasw/testtube/blob/master/testtube/helpers.py\" rel=\"nofollow\">helpers.py</a>.\nThey are designed to save consumers from specifying their own tests as much as\nis possible. If they are insufficient for a specific project, please see\n<a href=\"#writing-custom-tests\" rel=\"nofollow\">Writing custom tests</a>.</p>\n<p>Included helpers:</p>\n<ul>\n<li>Pep8</li>\n<li>Pyflakes</li>\n<li>Frosted</li>\n<li>Pep257</li>\n<li>Nosetests</li>\n<li>PythonSetupPyTest (runs python setup.py when matching files change)</li>\n<li>ClearScreen (clears the screen)</li>\n</ul>\n<p>Helpers typically accept the following arguments when instantiated:</p>\n<ul>\n<li><tt>all_files</tt>: run the test against the entire source directory\ninstead of just the changed file (which is the default behavior)</li>\n<li><tt>fail_fast</tt>: Abort running the rest of the test group if the test\nfails.</li>\n<li><tt>bells</tt>: On failure, testtube will audibly notify the user 3 times\nunless otherwise specified</li>\n<li><tt>name</tt>: The name of the test in test report output</li>\n</ul>\n<p>The following generates a pep8 test configured to run against all files,\nabort processing of its test group on failure, alert the user 5 times\naudibly, and show up as \u201cfollow pep8 dude\u201d in test report output:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testtube.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">Pep8</span>\n\n<span class=\"n\">helper</span> <span class=\"o\">=</span> <span class=\"n\">Pep8</span><span class=\"p\">(</span>\n    <span class=\"n\">all_files</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fail_fast</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bells</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'follow pep8 dude'</span><span class=\"p\">)</span>\n</pre>\n<p>Note that helpers, once instantiated, are just callables that return\n<tt>True</tt> or <tt>False</tt>:</p>\n<pre><span class=\"c1\"># Once configured, helpers are callables (they act like methods) that</span>\n<span class=\"c1\"># accept a path to a python file and a regex match object (though the</span>\n<span class=\"c1\"># match object isn't a requirement).</span>\n\n<span class=\"n\">helper</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/some/file.py'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>And here\u2019s that same example fully incorporated into a tube.py file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testtube.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">Pep8</span>\n\n\n<span class=\"n\">PATTERNS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"c1\"># Pattern</span>\n        <span class=\"sa\">r</span><span class=\"s1\">'.*\\.py$'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># list of callable tests to run</span>\n        <span class=\"p\">[</span>\n            <span class=\"n\">Pep8</span><span class=\"p\">(</span>\n                <span class=\"n\">all_files</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fail_fast</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bells</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'follow pep8 dude'</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p>The behavior of helpers can be customized as necessary by overriding\nspecific methods. See\n<a href=\"https://github.com/thomasw/testtube/blob/master/testtube/helpers.py\" rel=\"nofollow\">helpers.py</a>\nfor further information.</p>\n<p>In addition to configuring helpers, test groups can also be configured:</p>\n<ul>\n<li><tt>fail_fast</tt>: abort processing of subsequent test groups if all\ntests in the configured group did not pass.</li>\n</ul>\n<p>In the first example tube.py file, the second test group is configured\nto abort the rest of the test suite if either <tt>Flake8</tt> or <tt>Frosted</tt>\nfail.</p>\n</div>\n<div id=\"stir-it\">\n<h4>2. Stir it</h4>\n<p>Once a tube.py file is in place, tell testtube to watch the project for\nchanges:</p>\n<pre>$ stir\ntesttube is now watching /Path/to/CWD/ for changes...\n</pre>\n<p>By default, stir will watch the current working directory and configure\nitself with a settings module named <tt>tube</tt> (tube.py). If the tube.py file was\nplaced in the project root directory, then one shouldn\u2019t need to specify\nany parameters assuming stir is executed from that same directory. If paths need\nto be customized a bit, <tt>stir <span class=\"pre\">-h</span></tt> will light the way:</p>\n<pre>$ stir -h\nusage: stir [-h] [--src_dir SRC_DIR] [--settings SETTINGS]\n\nWatch a directory and run a custom set of tests whenever a file changes.\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --src_dir SRC_DIR    The directory to watch for changes. (Defaults to CWD)\n  --settings SETTINGS  Path to a testtube settings file that defines which\n                       tests to run (Defaults to \"tube.py\" - your settings\n                       file must be importable and the path must be relative\n                       to your CWD)\n</pre>\n</div>\n</div>\n<div id=\"writing-custom-tests\">\n<h3>Writing custom tests</h3>\n<p>If the included helpers don\u2019t meet the specific needs of a project, custom tests\ncan be defined directly in tube.py. Simply define a callable that accepts two\narguments and add it to the <tt>PATTERNS</tt> list:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">mytest</span><span class=\"p\">(</span><span class=\"n\">changed_file</span><span class=\"p\">,</span> <span class=\"n\">match_obj</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Oh snap, </span><span class=\"si\">%s</span><span class=\"s2\"> just changed\"</span> <span class=\"o\">%</span> <span class=\"n\">changed_file</span>\n\n<span class=\"n\">PATTERNS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'.*'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">mytest</span><span class=\"p\">]),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If a custom test needs to be configurable like the builtin helpers or if it\nneeds to make system calls, extending the base helper class\n(<tt>testtube.helpers.Helper</tt>) and customizing the behavior as is necessary is\nusually the simplest approach. The following is a tube.py file which defines a\nconfigureable test that outputs the file tree for the entire project each time a\npython file changes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testtube.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">Helper</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ProjectTree</span><span class=\"p\">(</span><span class=\"n\">Helper</span><span class=\"p\">):</span>\n    <span class=\"c1\"># The built in helper class is designed to make writing tests that make</span>\n    <span class=\"c1\"># system calls easy. Overriding `command` is all that's usually</span>\n    <span class=\"c1\"># necessary</span>\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s1\">'tree'</span>\n    <span class=\"n\">all_files</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># TreeOutput only works on all files, so override any contrary conf</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'all_files'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ProjectTree</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"n\">PATTERNS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'.*\\.py$'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">ProjectTree</span><span class=\"p\">(</span><span class=\"n\">bells</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)]),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Note that this example requires tree to be installed on the system\n(<tt>$ brew install tree</tt> for OS X users).</p>\n</div>\n<div id=\"caveats\">\n<h3>Caveats</h3>\n<ul>\n<li>The distinction between <tt><span class=\"pre\">r'.*\\.py'</span></tt> and <tt><span class=\"pre\">r'.*\\.py$'</span></tt> is significant.\nWithout the trailing <tt>$</tt>, testtube will run tests every time pyc\nfiles change. That\u2019s very likely to not be useful.</li>\n<li>testtube doesn\u2019t currently reload its own configuration when it\nchanges. If tube.py is modified, testtube will need to be restarted.</li>\n</ul>\n</div>\n<div id=\"local-development\">\n<h3>Local development</h3>\n<p>Install the development requirements using the included requirements.txt file:</p>\n<pre>pip install -r requirements.txt\n</pre>\n<p>It is often useful to use to use the checkout of testtube that\u2019s currently under\ndevelopment to monitor itself using its included tube.py file. Use testtube to\nhelp build testtube. This can be achieved by installing the checkout as an\neditable. Execute the following from the project root and then use the <tt>stir</tt>\ncommand as one usually would:</p>\n<pre>pip install -e ./\n</pre>\n<p>Note that testtube will need to be restarted for code changes to take effect.</p>\n</div>\n<div id=\"everything-else\">\n<h3>Everything else</h3>\n<p>Copyright (c) <a href=\"http://welfley.me\" rel=\"nofollow\">Thomas Welfley</a>. See\n<a href=\"https://github.com/thomasw/testtube/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>\nfor details.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id2\">\n<h3>1.1.0</h3>\n<ul>\n<li>Simplify dev environment configuration.</li>\n<li>Add tox configuration for locally testing against multiple python versions.</li>\n<li>Fix a bug in the nosetests helper implementation that was making it\nignore passed in configuration.</li>\n<li>Fix a bug that causing testtube to choke on simple method based tests.</li>\n<li>Add an <tt>IGNORE_PATTERNS</tt> configuration option which supersedes test group\npattern matches and allows users to configure testtube to always ignore\ncertain files.</li>\n<li>Add integration tests.</li>\n<li>Factor out threading anti-patterns from core (<tt>time.sleep()</tt>).</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.0</h3>\n<ul>\n<li>Make tests configurable</li>\n<li>Make test groups configurable</li>\n<li>Centralizes output in a renderer object</li>\n<li>Adds support for audible bells</li>\n<li>Adds test group fail fast support (aborts test run)</li>\n<li>Adds test fail fast support (aborts test group)</li>\n<li>Adds helper base class to make writing tests easier</li>\n<li>Adds a frosted helper</li>\n<li>Rewrite of configuration handling</li>\n<li>Eliminates redundant helpers: pep8_all, pyflakes_all,\nnosetests_all</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.0</h3>\n<ul>\n<li>Added python 3 support</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.0.1</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2165345, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4faa62e496663d67a486a631005c81fe", "sha256": "d9601f3760fa5c694ae144fca444300226715ac64d2ea6146ece18685532cda2"}, "downloads": -1, "filename": "testtube-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4faa62e496663d67a486a631005c81fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5624, "upload_time": "2012-12-16T22:58:02", "upload_time_iso_8601": "2012-12-16T22:58:02.993177Z", "url": "https://files.pythonhosted.org/packages/7f/40/04cd4f9ee2a6f204038466225dc858777799fbd7ebd574da92c744f1ecba/testtube-0.0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c13fb4052668c2a0e6df9f8824360a50", "sha256": "618aa8e4a51f7f1fba37edfaa3800a16fceca235c462195b3349621178fe9490"}, "downloads": -1, "filename": "testtube-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c13fb4052668c2a0e6df9f8824360a50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6837, "upload_time": "2014-04-06T04:32:32", "upload_time_iso_8601": "2014-04-06T04:32:32.019119Z", "url": "https://files.pythonhosted.org/packages/a7/b9/76cf387eff599483acf71f01d78969e26a02c63392c2d6df6e3b176695b4/testtube-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "84ad4d9cf17c296141f07c28a4f7d8e6", "sha256": "072e3f7f2b495cd195dd930355c62fafba27ea1eb1fc16725872d17186bfd8df"}, "downloads": -1, "filename": "testtube-1.0.0.tar.gz", "has_sig": false, "md5_digest": "84ad4d9cf17c296141f07c28a4f7d8e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11952, "upload_time": "2014-10-06T08:15:30", "upload_time_iso_8601": "2014-10-06T08:15:30.865102Z", "url": "https://files.pythonhosted.org/packages/56/5f/cc78b51559da51567f271699fef9561c54daae217502e93bb28811488529/testtube-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "cabe1861cb0e9f996fe0ead41166a120", "sha256": "5969786d1260462466b4bd690ef808dba4d37ab94791d232353696972beaf4ec"}, "downloads": -1, "filename": "testtube-1.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "cabe1861cb0e9f996fe0ead41166a120", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24768, "upload_time": "2016-06-13T20:39:58", "upload_time_iso_8601": "2016-06-13T20:39:58.223754Z", "url": "https://files.pythonhosted.org/packages/bc/47/569ca3e1dbe8dd133c7dba273bc15251dcc94a983e61f6989a3fb6888011/testtube-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b797f031c1f233eef5a733077e12e72f", "sha256": "f891abe5d365add658df8140b3ab58cf66bc991f56a62e791d42ad3a4c2643a4"}, "downloads": -1, "filename": "testtube-1.1.0.tar.gz", "has_sig": true, "md5_digest": "b797f031c1f233eef5a733077e12e72f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20777, "upload_time": "2016-06-13T20:42:20", "upload_time_iso_8601": "2016-06-13T20:42:20.682029Z", "url": "https://files.pythonhosted.org/packages/9e/e7/4f3e2da8e7e1129749150b77558f2bc17d7264af6ba5aaad9bf2841c0a80/testtube-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cabe1861cb0e9f996fe0ead41166a120", "sha256": "5969786d1260462466b4bd690ef808dba4d37ab94791d232353696972beaf4ec"}, "downloads": -1, "filename": "testtube-1.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "cabe1861cb0e9f996fe0ead41166a120", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24768, "upload_time": "2016-06-13T20:39:58", "upload_time_iso_8601": "2016-06-13T20:39:58.223754Z", "url": "https://files.pythonhosted.org/packages/bc/47/569ca3e1dbe8dd133c7dba273bc15251dcc94a983e61f6989a3fb6888011/testtube-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b797f031c1f233eef5a733077e12e72f", "sha256": "f891abe5d365add658df8140b3ab58cf66bc991f56a62e791d42ad3a4c2643a4"}, "downloads": -1, "filename": "testtube-1.1.0.tar.gz", "has_sig": true, "md5_digest": "b797f031c1f233eef5a733077e12e72f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20777, "upload_time": "2016-06-13T20:42:20", "upload_time_iso_8601": "2016-06-13T20:42:20.682029Z", "url": "https://files.pythonhosted.org/packages/9e/e7/4f3e2da8e7e1129749150b77558f2bc17d7264af6ba5aaad9bf2841c0a80/testtube-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:16 2020"}