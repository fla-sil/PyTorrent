{"info": {"author": "Ali Akhtari", "author_email": "aliakhtari78@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "[![Build Status](https://travis-ci.com/AliAkhtari78/SpotifyScraper.svg?branch=master)](https://travis-ci.com/AliAkhtari78/SpotifyScraper)\n[![Documentation Status](https://readthedocs.org/projects/spotifyscraper/badge/?version=latest)](https://spotifyscraper.readthedocs.io/en/latest/?badge=latest)\n# Spotify Scraper\n\n\n##  Overview\nPython **Spotify Web Player Scraper**, a fast high-level Spotify Web Player Scraper, to scrape and extract data from Spotify Web Player with the most efficient and fastest methods.\ninstead of using Selenium, I used [requests](https://github.com/psf/requests) library to increase the speed of scraping.\nYou can set cookies, headers and proxy and download the cover and preview mp3 song of Spotify songs beside the scraping.\n\n## Requirements\n- Python 3.6 +\n- Works on Linux, Windows, macOS, BSD\n- Internet connection\n\n## Installing\nYou can install this package as simple as type a command in your CMD or Terminal.\nThe quick way:\n```sh\n$ pip install -U spotifyscraper\n```\nor\ndo it in the hard way:\n\n``\n$ git clone https://github.com/AliAkhtari78/SpotifyScraper.git \n``<br>\n ``\n$sudo python setup.py install\n``\n## Documentation\n\nCheck out [Read The Docs](https://spotifyscraper.readthedocs.io/en/latest/) for a more in-depth explanation, with examples, troubleshooting issues, and more useful information.\n## Extract Spotify track information by URL\n- ``\nfrom SpotifyScraper.scraper import Scraper, Request\n``\n> Import SpotifyScraper to use it\n- ``\n request = Request().request()\n``\n> Create requests using Request which was imported before,\n> You can also pass cookie_file, header\tand proxy inside Request().\n> Default is None.\n- ``\nprint(Scraper(session=request).get_track_url_info(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA'))\n``\n> Call get_track_url_info function from Scraper to extract all the infromation from url.\n> If the given URL is valid, it will return a dict with the below keys:\n> - title\n> - preview_mp3\n> - duration\n> - artist_name\n> - artist_url\n> - album_title\n> - album_cover_url\n> - album_cover_height\n> - album_cover_width\n> - release_date\n> - total_tracks\n> - type_\n> - ERROR\n\n- ``\n$ {\n'title': 'The Future Never Dies',\n 'preview_mp3': 'https://p.scdn.co/mp3-preview/2d706ceae19cfbc778988df6ad5c60828dbd8389?cid=a46f5c5745a14fbf826186da8da5ecc3',\n  'duration': '4:3',\n   'artist_name': 'Scorpions',\n 'artist_url':'https://open.spotify.com/artist/27T030eWyCQRmDyuvr1kxY',\n  'album_title': 'Humanity Hour 1', \n 'album_cover_url':'https://i.scdn.co/image/ab67616d0000b273e14019d431204ff27785e349', \n 'album_cover_height': 640, \n 'album_cover_width': 640, \n 'release_date': '2007-01-01', \n 'total_tracks': 12,\n  'type_': 'album', \n  'ERROR': None}\n``\n\n## Extract Spotify playlist information by URL\n- ``\nfrom SpotifyScraper.scraper import Scraper, Request\n``\n\n- ``\n request = Request().request() ``\n \n-  ``playlist_info = Scraper(session=request).get_playlist_url_info(url='https://open.spotify.com/playlist/37i9dQZF1DX74DnfGTwugU')\n ``\n> Call get_playlist_url_info function from Scraper to extract all the infromation from url.\n> If the given URL is valid, it will return a dict with the below keys:\n> - album_title\n> - cover_url\n> - author\n> - author_url\n> - playlist_description\n> - tracks_list\n> - ERROR\n \n## Download Spotify song cover by URL\n- ``\nfrom SpotifyScraper.scraper import Scraper, Request\n``\n\n- ``\n request = Request().request() ``\n \n-  ``path = Scraper(session=request).download_cover(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA')\n ``\n > Call download_cover function from Scraper to download the cover of the provided song.\n \n **if the provided URL is valid, it will return the path of downloaded  cover to you.**\n\n\n## Download Spotify preview song by URL\n- ``\nfrom SpotifyScraper.scraper import Scraper, Request\n``\n\n- ``\n request = Request().request() ``\n \n-  ``path = Scraper(session=request).download_preview_mp3(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA')\n ``\n  > Call download_preview_mp3 function from Scraper to download the preview mp3 song of the provided URL.\n \n **if the provided URL is valid, it will return the path of downloaded mp3 to you.**\n\n ## Get in touch\n\n-   Report bugs, suggest features, or view the source code  [on GitHub](https://github.com/AliAkhtari78/SpotifyScraper).\n- [Read the doc](https://spotifyscraper.readthedocs.io/en/latest/?) to use all provided functions of this library.\n- get in touch with me by my website: [Ali Akhtari](https://aliakhtari.com/)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AliAkhtari78/SpotifyScraper", "keywords": "spotify spotifydownloader downloader mp3downloader webscraper spotifywebscraper spotifyscraper music cover setuptools development", "license": "", "maintainer": "", "maintainer_email": "", "name": "spotifyscraper", "package_url": "https://pypi.org/project/spotifyscraper/", "platform": "", "project_url": "https://pypi.org/project/spotifyscraper/", "project_urls": {"Author WebSite": "https://aliakhtari.com", "Bug Reports": "https://github.com/AliAkhtari78/SpotifyScraper/issues", "Documentation": "https://spotifyscraper.readthedocs.io/en/latest", "Full Tutorial Blog": "https://aliakhtari.com/Blog/SpotifyScraper", "Homepage": "https://github.com/AliAkhtari78/SpotifyScraper", "PyPi": "https://pypi.org/project/spotifyscraper", "Source": "https://github.com/AliAkhtari78/SpotifyScraper"}, "release_url": "https://pypi.org/project/spotifyscraper/1.0.5/", "requires_dist": null, "requires_python": ">=3.6.*, <4", "summary": "Spotify Web Player Scraper using python, scrape and download song and cover from Spotify.", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/AliAkhtari78/SpotifyScraper\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec56cf55cec8ad87a24f665ab2308c3fd1e26e57/68747470733a2f2f7472617669732d63692e636f6d2f416c69416b687461726937382f53706f74696679536372617065722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://spotifyscraper.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7455729f0bdb75797844bd6e81a3ebb332ed591b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73706f74696679736372617065722f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<h1>Spotify Scraper</h1>\n<h2>Overview</h2>\n<p>Python <strong>Spotify Web Player Scraper</strong>, a fast high-level Spotify Web Player Scraper, to scrape and extract data from Spotify Web Player with the most efficient and fastest methods.\ninstead of using Selenium, I used <a href=\"https://github.com/psf/requests\" rel=\"nofollow\">requests</a> library to increase the speed of scraping.\nYou can set cookies, headers and proxy and download the cover and preview mp3 song of Spotify songs beside the scraping.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6 +</li>\n<li>Works on Linux, Windows, macOS, BSD</li>\n<li>Internet connection</li>\n</ul>\n<h2>Installing</h2>\n<p>You can install this package as simple as type a command in your CMD or Terminal.\nThe quick way:</p>\n<pre>$ pip install -U spotifyscraper\n</pre>\n<p>or\ndo it in the hard way:</p>\n<p><code>$ git clone https://github.com/AliAkhtari78/SpotifyScraper.git</code><br>\n<code>$sudo python setup.py install</code></p>\n<h2>Documentation</h2>\n<p>Check out <a href=\"https://spotifyscraper.readthedocs.io/en/latest/\" rel=\"nofollow\">Read The Docs</a> for a more in-depth explanation, with examples, troubleshooting issues, and more useful information.</p>\n<h2>Extract Spotify track information by URL</h2>\n<ul>\n<li><code>from SpotifyScraper.scraper import Scraper, Request</code></li>\n</ul>\n<blockquote>\n<p>Import SpotifyScraper to use it</p>\n</blockquote>\n<ul>\n<li><code>request = Request().request()</code></li>\n</ul>\n<blockquote>\n<p>Create requests using Request which was imported before,\nYou can also pass cookie_file, header\tand proxy inside Request().\nDefault is None.</p>\n</blockquote>\n<ul>\n<li><code>print(Scraper(session=request).get_track_url_info(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA'))</code></li>\n</ul>\n<blockquote>\n<p>Call get_track_url_info function from Scraper to extract all the infromation from url.\nIf the given URL is valid, it will return a dict with the below keys:</p>\n<ul>\n<li>title</li>\n<li>preview_mp3</li>\n<li>duration</li>\n<li>artist_name</li>\n<li>artist_url</li>\n<li>album_title</li>\n<li>album_cover_url</li>\n<li>album_cover_height</li>\n<li>album_cover_width</li>\n<li>release_date</li>\n<li>total_tracks</li>\n<li>type_</li>\n<li>ERROR</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>$ { 'title': 'The Future Never Dies', 'preview_mp3': 'https://p.scdn.co/mp3-preview/2d706ceae19cfbc778988df6ad5c60828dbd8389?cid=a46f5c5745a14fbf826186da8da5ecc3', 'duration': '4:3', 'artist_name': 'Scorpions', 'artist_url':'https://open.spotify.com/artist/27T030eWyCQRmDyuvr1kxY', 'album_title': 'Humanity Hour 1', 'album_cover_url':'https://i.scdn.co/image/ab67616d0000b273e14019d431204ff27785e349', 'album_cover_height': 640, 'album_cover_width': 640, 'release_date': '2007-01-01', 'total_tracks': 12, 'type_': 'album', 'ERROR': None}</code></li>\n</ul>\n<h2>Extract Spotify playlist information by URL</h2>\n<ul>\n<li>\n<p><code>from SpotifyScraper.scraper import Scraper, Request</code></p>\n</li>\n<li>\n<p><code>request = Request().request()</code></p>\n</li>\n<li>\n<p><code>playlist_info = Scraper(session=request).get_playlist_url_info(url='https://open.spotify.com/playlist/37i9dQZF1DX74DnfGTwugU')</code></p>\n</li>\n</ul>\n<blockquote>\n<p>Call get_playlist_url_info function from Scraper to extract all the infromation from url.\nIf the given URL is valid, it will return a dict with the below keys:</p>\n<ul>\n<li>album_title</li>\n<li>cover_url</li>\n<li>author</li>\n<li>author_url</li>\n<li>playlist_description</li>\n<li>tracks_list</li>\n<li>ERROR</li>\n</ul>\n</blockquote>\n<h2>Download Spotify song cover by URL</h2>\n<ul>\n<li>\n<p><code>from SpotifyScraper.scraper import Scraper, Request</code></p>\n</li>\n<li>\n<p><code>request = Request().request()</code></p>\n</li>\n<li>\n<p><code>path = Scraper(session=request).download_cover(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA')</code></p>\n</li>\n</ul>\n<blockquote>\n<p>Call download_cover function from Scraper to download the cover of the provided song.</p>\n</blockquote>\n<p><strong>if the provided URL is valid, it will return the path of downloaded  cover to you.</strong></p>\n<h2>Download Spotify preview song by URL</h2>\n<ul>\n<li>\n<p><code>from SpotifyScraper.scraper import Scraper, Request</code></p>\n</li>\n<li>\n<p><code>request = Request().request()</code></p>\n</li>\n<li>\n<p><code>path = Scraper(session=request).download_preview_mp3(url='https://open.spotify.com/track/7wqpAYuSk84f0JeqCIETRV?si=b35Rzak1RgWvBAnbJteHkA')</code></p>\n</li>\n</ul>\n<blockquote>\n<p>Call download_preview_mp3 function from Scraper to download the preview mp3 song of the provided URL.</p>\n</blockquote>\n<p><strong>if the provided URL is valid, it will return the path of downloaded mp3 to you.</strong></p>\n<h2>Get in touch</h2>\n<ul>\n<li>Report bugs, suggest features, or view the source code  <a href=\"https://github.com/AliAkhtari78/SpotifyScraper\" rel=\"nofollow\">on GitHub</a>.</li>\n<li><a href=\"https://spotifyscraper.readthedocs.io/en/latest/?\" rel=\"nofollow\">Read the doc</a> to use all provided functions of this library.</li>\n<li>get in touch with me by my website: <a href=\"https://aliakhtari.com/\" rel=\"nofollow\">Ali Akhtari</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7157984, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "dc0359a9ee155a71b9cffa58ca920b8c", "sha256": "f329ac17e2e7dcf20f4c422b36cafa4408cd12054d763899d670d7b2077c5c21"}, "downloads": -1, "filename": "spotifyscraper-1.0.0.tar.gz", "has_sig": false, "md5_digest": "dc0359a9ee155a71b9cffa58ca920b8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 6119, "upload_time": "2020-04-28T23:54:54", "upload_time_iso_8601": "2020-04-28T23:54:54.733458Z", "url": "https://files.pythonhosted.org/packages/61/62/2d04d5056c825ab8c6abe765067fb17e616bab3d4aec9672fe75b21a890f/spotifyscraper-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7f0e37ef7ccc42a290b70762ee99bf72", "sha256": "5d73131582d6efc5f1f39a90b6097c0beb5c93dc6e74a065c652653ce6292cd7"}, "downloads": -1, "filename": "spotifyscraper-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7f0e37ef7ccc42a290b70762ee99bf72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*, <4", "size": 7834, "upload_time": "2020-04-29T19:30:32", "upload_time_iso_8601": "2020-04-29T19:30:32.442791Z", "url": "https://files.pythonhosted.org/packages/4c/f9/880cbaecb5542a2db2dc752c91df08237e1be4e1efcaa643a9cd24361c42/spotifyscraper-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "899ba6a111e70c1d223a22d7161d0923", "sha256": "805a371b2ecca2c437e68e5c5c5a67852286b5ffbe943018012d288cc42f7d47"}, "downloads": -1, "filename": "spotifyscraper-1.0.2.tar.gz", "has_sig": false, "md5_digest": "899ba6a111e70c1d223a22d7161d0923", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*, <4", "size": 8959, "upload_time": "2020-05-03T16:06:40", "upload_time_iso_8601": "2020-05-03T16:06:40.733279Z", "url": "https://files.pythonhosted.org/packages/ad/e6/7e3b697fe3812ddaa1baa0a704393902aa6e01171b51d0b30f6cd86c8209/spotifyscraper-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "0ab3909424014c0e61dd071eed1564a1", "sha256": "56a37a6f3984fd9d383592d860527e2a7235f4d7d48947e9a099718bf4fe0fb8"}, "downloads": -1, "filename": "spotifyscraper-1.0.3.tar.gz", "has_sig": false, "md5_digest": "0ab3909424014c0e61dd071eed1564a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*, <4", "size": 8951, "upload_time": "2020-05-03T16:06:41", "upload_time_iso_8601": "2020-05-03T16:06:41.922311Z", "url": "https://files.pythonhosted.org/packages/87/f6/0a8213b285f7d4aa5c96a1b741470100cec75e795d13a47ce5777c1ca795/spotifyscraper-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "5a8dde697488350a439217c49e6f226b", "sha256": "3ca1265a5540ec1b66452e20ea3a509eff1964791052580a6a3a50ca0b187ae0"}, "downloads": -1, "filename": "spotifyscraper-1.0.4.tar.gz", "has_sig": false, "md5_digest": "5a8dde697488350a439217c49e6f226b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*, <4", "size": 8960, "upload_time": "2020-05-03T16:29:47", "upload_time_iso_8601": "2020-05-03T16:29:47.145582Z", "url": "https://files.pythonhosted.org/packages/05/e0/8010e172b64437c02fee734c77ed805a28112ea6008db7757fb192ddbd07/spotifyscraper-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "9faa21d8d19cce758c035a9ebbdf0e2a", "sha256": "6ead316f023bb5b0560c8fe274fa8c45e69c59e7102e5bebfde6b405faf16e6e"}, "downloads": -1, "filename": "spotifyscraper-1.0.5.tar.gz", "has_sig": false, "md5_digest": "9faa21d8d19cce758c035a9ebbdf0e2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*, <4", "size": 8966, "upload_time": "2020-05-03T16:54:23", "upload_time_iso_8601": "2020-05-03T16:54:23.228346Z", "url": "https://files.pythonhosted.org/packages/98/80/ae3765135ca7cbadd4f5ac57f94b7ce6b0281ff249c541bd6a1d361ab04d/spotifyscraper-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9faa21d8d19cce758c035a9ebbdf0e2a", "sha256": "6ead316f023bb5b0560c8fe274fa8c45e69c59e7102e5bebfde6b405faf16e6e"}, "downloads": -1, "filename": "spotifyscraper-1.0.5.tar.gz", "has_sig": false, "md5_digest": "9faa21d8d19cce758c035a9ebbdf0e2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*, <4", "size": 8966, "upload_time": "2020-05-03T16:54:23", "upload_time_iso_8601": "2020-05-03T16:54:23.228346Z", "url": "https://files.pythonhosted.org/packages/98/80/ae3765135ca7cbadd4f5ac57f94b7ce6b0281ff249c541bd6a1d361ab04d/spotifyscraper-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:30 2020"}