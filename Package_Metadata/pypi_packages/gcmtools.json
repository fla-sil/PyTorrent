{"info": {"author": "Adiv Paradise", "author_email": "paradise.astro@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# gcmtools\n\nBy Adiv Paradise\n\n_DEPENDENCIES: matplotlib, numpy, basemap, python-netcdf4_\n_OPTIONAL (for interactive plots): nodejs, jupyter-widgets, jupyter-matplotlib_\n\nThis is a collection of custom functions, wrappers, and other tools to make analyzing \noutput from a gcm just slightly easier. Mostly it functions as a wrapper for matplotlib\nand basemap, but it includes useful things like a function for area-weighted math and a\nfunction for computing the streamfunction and plotting the Hadley cells.\n\n## Installation\n\nYou can either download and build/use from this repository, or you can use pip:\n\n`pip install gcmtools`\n\n\n## Usage\n\n### parse(filename,variable,**kwargs)\n \nReturns the data contained in variable, along with the latitude and longitude arrays.\n \n    * filename\n    \n        Specifies the name of the netCDF4 file to open\n        \n    * variable\n    \n        Specifies the variable name to use\n        \n    * lat (optional)\n    \n        What name to use for the latitude array when parsing the file\n        \n    * lon (optional)\n    \n        What name to use for the longitude array when parsing the file\n    \n    \n### make2d(variable,**kwargs)\n\nReturns a 2D slice of the given variable\n    \n    * variable\n    \n        The data array to slice\n        \n    * ignoreNaNs (optional)\n    \n        Ignore NaNs when doing arithmetic operations (default=True)\n        \n    * lat (optional)\n    \n        type(int): slice the array at this latitude\n        \"sum\": Take the meridional sum\n        \"mean\": Take the meridional mean\n        \n    * lon (optional)\n    \n        type(int): slice the array at this longitude\n        \"sum\" Take the zonal sum\n        \"mean\": Take the zonal mean\n        \n    * lev (optional)\n    \n        type(int): slice the array at this vertical level\n        \"sum\" Take the column sum\n        \"mean\": Take the column mean\n        \n    * time (optional)\n    \n        type(int): Take the snapshot of the array at this time\n        None (default): Take the time-average of the data\n            \n\n### spatialmath(variable,**kwargs)\n    \nReturns the area-weighted average or sum of the given variable\n    \n    * variable\n    \n        Either the name of the variable to use, or the data array itself.\n        If the file keyword is used, this should be the variable name. If\n        not, then the lat and lon arrays must be provided.\n        \n    * file (optional)\n    \n        The name of the file from which to extract the data\n        \n    * lat (optional)\n    \n        The latitude array to use (ignored if file keyword is used)\n        \n    * lon (optional)\n    \n        The longitude array to use (ignored if file keyword is used)\n        \n    * lev (optional)\n    \n        The level slice to use (see make2d() keyword options)\n        \n    * time (optional)\n    \n        type(int): Use the snapshot of the variable at this time\n        None (default): Use the time-average of the variable\n        \n    * mean (optional)\n    \n        If True (default), the global mean will be calculated. If False,\n        only the global sum will be returned.\n        \n    * radius (optional)\n    \n        The physical radius of the sphere with which to scale the sum \n        (if not computing the mean)\n\n            \n### wrap2d(variable)\n\nAdd a longitude column to a 2D lat-lon array, and fill it with the first column\n    \n\n### pcolormesh(variable,**kwargs)\n    \nCreate and return a pcolormesh object showing variable. **kwargs can include all\nnormal pcolormesh keyword arguments, and if the 'projection' keyword argument is\nspecified, **kwargs can also contain any Basemap arguments.\n    \ngcmtools-specific arguments:\n    \n    * invertx\n    \n        Invert the x-axis. This is analogous to plt.gca().invert_xaxis()\n        \n    * inverty\n    \n        Invert the y-axis. This is analogous to plt.gca().invert_yaxis()\n        \n    * symmetric\n    \n        If True, compute a colormap normalization which is symmetric about zero.\n        If not None and equal to a number, compute a colormap normalization \n        symmetric about that number. Useful for divergent colormaps.\n    \nExample:\n\n`pcolormesh(temperature,x=lons,y=lats,projection='moll',lon_0=0,cmap='RdBu_r',symmetric=273.15)`\n\n### hadley(filename,**kwargs)\n\nCompute the streamfunction, and plot the zonal mean as a function of latitude and pressure. Optionally overplot zonal wind contours.\n\n    * filename\n\n       File from which to extract the streamfunction.\n       \n    * contours (optional)\n\n       If True, compute the mean zonal wind and overplot it as a series of labeled contours.\n       \n    * ylog (optional)\n    \n       If True, use a logarithmic scale on the y-axis (corresponding to being linear in altitude).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alphaparrot/gcmtools", "keywords": "", "license": "GNU General Public License", "maintainer": "", "maintainer_email": "", "name": "gcmtools", "package_url": "https://pypi.org/project/gcmtools/", "platform": "", "project_url": "https://pypi.org/project/gcmtools/", "project_urls": {"Homepage": "https://github.com/alphaparrot/gcmtools"}, "release_url": "https://pypi.org/project/gcmtools/0.4.6/", "requires_dist": null, "requires_python": "", "summary": "GCM Output Analysis Tools", "version": "0.4.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            # gcmtools<br><br>By Adiv Paradise<br><br>_DEPENDENCIES: matplotlib, numpy, basemap, python-netcdf4_<br>_OPTIONAL (for interactive plots): nodejs, jupyter-widgets, jupyter-matplotlib_<br><br>This is a collection of custom functions, wrappers, and other tools to make analyzing <br>output from a gcm just slightly easier. Mostly it functions as a wrapper for matplotlib<br>and basemap, but it includes useful things like a function for area-weighted math and a<br>function for computing the streamfunction and plotting the Hadley cells.<br><br>## Installation<br><br>You can either download and build/use from this repository, or you can use pip:<br><br>`pip install gcmtools`<br><br><br>## Usage<br><br>### parse(filename,variable,**kwargs)<br> <br>Returns the data contained in variable, along with the latitude and longitude arrays.<br> <br>    * filename<br>    <br>        Specifies the name of the netCDF4 file to open<br>        <br>    * variable<br>    <br>        Specifies the variable name to use<br>        <br>    * lat (optional)<br>    <br>        What name to use for the latitude array when parsing the file<br>        <br>    * lon (optional)<br>    <br>        What name to use for the longitude array when parsing the file<br>    <br>    <br>### make2d(variable,**kwargs)<br><br>Returns a 2D slice of the given variable<br>    <br>    * variable<br>    <br>        The data array to slice<br>        <br>    * ignoreNaNs (optional)<br>    <br>        Ignore NaNs when doing arithmetic operations (default=True)<br>        <br>    * lat (optional)<br>    <br>        type(int): slice the array at this latitude<br>        \"sum\": Take the meridional sum<br>        \"mean\": Take the meridional mean<br>        <br>    * lon (optional)<br>    <br>        type(int): slice the array at this longitude<br>        \"sum\" Take the zonal sum<br>        \"mean\": Take the zonal mean<br>        <br>    * lev (optional)<br>    <br>        type(int): slice the array at this vertical level<br>        \"sum\" Take the column sum<br>        \"mean\": Take the column mean<br>        <br>    * time (optional)<br>    <br>        type(int): Take the snapshot of the array at this time<br>        None (default): Take the time-average of the data<br>            <br><br>### spatialmath(variable,**kwargs)<br>    <br>Returns the area-weighted average or sum of the given variable<br>    <br>    * variable<br>    <br>        Either the name of the variable to use, or the data array itself.<br>        If the file keyword is used, this should be the variable name. If<br>        not, then the lat and lon arrays must be provided.<br>        <br>    * file (optional)<br>    <br>        The name of the file from which to extract the data<br>        <br>    * lat (optional)<br>    <br>        The latitude array to use (ignored if file keyword is used)<br>        <br>    * lon (optional)<br>    <br>        The longitude array to use (ignored if file keyword is used)<br>        <br>    * lev (optional)<br>    <br>        The level slice to use (see make2d() keyword options)<br>        <br>    * time (optional)<br>    <br>        type(int): Use the snapshot of the variable at this time<br>        None (default): Use the time-average of the variable<br>        <br>    * mean (optional)<br>    <br>        If True (default), the global mean will be calculated. If False,<br>        only the global sum will be returned.<br>        <br>    * radius (optional)<br>    <br>        The physical radius of the sphere with which to scale the sum <br>        (if not computing the mean)<br><br>            <br>### wrap2d(variable)<br><br>Add a longitude column to a 2D lat-lon array, and fill it with the first column<br>    <br><br>### pcolormesh(variable,**kwargs)<br>    <br>Create and return a pcolormesh object showing variable. **kwargs can include all<br>normal pcolormesh keyword arguments, and if the 'projection' keyword argument is<br>specified, **kwargs can also contain any Basemap arguments.<br>    <br>gcmtools-specific arguments:<br>    <br>    * invertx<br>    <br>        Invert the x-axis. This is analogous to plt.gca().invert_xaxis()<br>        <br>    * inverty<br>    <br>        Invert the y-axis. This is analogous to plt.gca().invert_yaxis()<br>        <br>    * symmetric<br>    <br>        If True, compute a colormap normalization which is symmetric about zero.<br>        If not None and equal to a number, compute a colormap normalization <br>        symmetric about that number. Useful for divergent colormaps.<br>    <br>Example:<br><br>`pcolormesh(temperature,x=lons,y=lats,projection='moll',lon_0=0,cmap='RdBu_r',symmetric=273.15)`<br><br>### hadley(filename,**kwargs)<br><br>Compute the streamfunction, and plot the zonal mean as a function of latitude and pressure. Optionally overplot zonal wind contours.<br><br>    * filename<br><br>       File from which to extract the streamfunction.<br>       <br>    * contours (optional)<br><br>       If True, compute the mean zonal wind and overplot it as a series of labeled contours.<br>       <br>    * ylog (optional)<br>    <br>       If True, use a logarithmic scale on the y-axis (corresponding to being linear in altitude).\n          </div>"}, "last_serial": 4916717, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f6456340518abe75ecadb7d95f721ad6", "sha256": "70d82e40f09c1806d29f6479035e06e77d3818492b943b1bdca13e15351cc000"}, "downloads": -1, "filename": "gcmtools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f6456340518abe75ecadb7d95f721ad6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16254, "upload_time": "2019-02-05T22:21:52", "upload_time_iso_8601": "2019-02-05T22:21:52.108093Z", "url": "https://files.pythonhosted.org/packages/b2/5e/4c70252da1cd220ff6bbd372c5aaa1c7e3d79a2893e3e0790ffd1c98b95c/gcmtools-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "51f510403a89c844913088f1720e2222", "sha256": "6f19265b5e72ec7dce72a067205fb0564fe85250a6aec40ee27b7089e103a2c0"}, "downloads": -1, "filename": "gcmtools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "51f510403a89c844913088f1720e2222", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16910, "upload_time": "2019-02-06T00:23:58", "upload_time_iso_8601": "2019-02-06T00:23:58.494687Z", "url": "https://files.pythonhosted.org/packages/73/66/229e3c1a46516a7be5619fa16047174a1049a298ab44f2761335260bc25c/gcmtools-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c8f3880a2ee8b6ac6976811c96e70011", "sha256": "a55611d45f251f8d7faa83272ec1ce279de4e9b9890ce6e55ac8c1cfe1a6434d"}, "downloads": -1, "filename": "gcmtools-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c8f3880a2ee8b6ac6976811c96e70011", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17275, "upload_time": "2019-02-06T02:38:57", "upload_time_iso_8601": "2019-02-06T02:38:57.739106Z", "url": "https://files.pythonhosted.org/packages/bb/e0/1f5fd0640fbc0cea761b63d8905e5839262e949bf6ee6514fb6fd9d8f820/gcmtools-0.3.0.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "56018c1851f16ef230b7bd5218f7a9c3", "sha256": "75d3be0a11ad79ae65b6668ad57fa0b8375cf5162e420cc021d0c548c5c8cf80"}, "downloads": -1, "filename": "gcmtools-0.3.2.tar.gz", "has_sig": false, "md5_digest": "56018c1851f16ef230b7bd5218f7a9c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17374, "upload_time": "2019-02-06T21:16:35", "upload_time_iso_8601": "2019-02-06T21:16:35.244991Z", "url": "https://files.pythonhosted.org/packages/8f/31/608206006e5f2841886cbddc9546bf652e6c414ebdc6f7cfc0e11e98e8e1/gcmtools-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "8e77b631ccaa5c125e51e18981d348aa", "sha256": "2093891e274dd09c1faec9dde2a0011b9138598c5e06f7353826125f4f89947a"}, "downloads": -1, "filename": "gcmtools-0.3.3.tar.gz", "has_sig": false, "md5_digest": "8e77b631ccaa5c125e51e18981d348aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17501, "upload_time": "2019-02-07T17:00:47", "upload_time_iso_8601": "2019-02-07T17:00:47.360176Z", "url": "https://files.pythonhosted.org/packages/d0/20/0065f95b4f247eadb569a6ebd5de737498f79ef64ad005b8a5df2c7a5aa3/gcmtools-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "57c15cf5bf099ab2d6580a6007ed4010", "sha256": "9b626c2ccd254cd5b7f7f23f1db87eb7d924f690d6cda2392345933e663932be"}, "downloads": -1, "filename": "gcmtools-0.3.4.tar.gz", "has_sig": false, "md5_digest": "57c15cf5bf099ab2d6580a6007ed4010", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17507, "upload_time": "2019-02-07T17:08:15", "upload_time_iso_8601": "2019-02-07T17:08:15.899101Z", "url": "https://files.pythonhosted.org/packages/b4/7d/d54d77eff5a7ee6c79bf8df3de9c8cccfbdff66a98a6b35c4ae42ea24853/gcmtools-0.3.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "6348a38d5df56cd21292369892c04bae", "sha256": "5f8a2d8b82c1691c93ac8d19190e80e59c0bfa8cf7bfe998b10bc5c812ce8503"}, "downloads": -1, "filename": "gcmtools-0.4.1.tar.gz", "has_sig": false, "md5_digest": "6348a38d5df56cd21292369892c04bae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17312, "upload_time": "2019-02-07T18:35:35", "upload_time_iso_8601": "2019-02-07T18:35:35.526132Z", "url": "https://files.pythonhosted.org/packages/86/df/5502cb7925699bbf80d46eb43f80d47d3559aded44a1f9d773ad35e3735f/gcmtools-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "0f1055c10dac8e82385afce99e0ffab8", "sha256": "ae0dddcd914ac2bc249386ca02cb66efab0c7ca688de7a99602471f741749f1a"}, "downloads": -1, "filename": "gcmtools-0.4.2.tar.gz", "has_sig": false, "md5_digest": "0f1055c10dac8e82385afce99e0ffab8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17321, "upload_time": "2019-02-07T18:48:23", "upload_time_iso_8601": "2019-02-07T18:48:23.111494Z", "url": "https://files.pythonhosted.org/packages/b3/2c/2fd950dac162b6d8944e7d67f134029d1d5a7e8c2dada62363fdd4deab1c/gcmtools-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "67dcacf4a762a6a008c5b3dad5839bbf", "sha256": "735f6228a2125396039b93a3f5503218419b8d127f9289649cd77515ed387b0e"}, "downloads": -1, "filename": "gcmtools-0.4.3.tar.gz", "has_sig": false, "md5_digest": "67dcacf4a762a6a008c5b3dad5839bbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17318, "upload_time": "2019-02-07T20:32:29", "upload_time_iso_8601": "2019-02-07T20:32:29.899742Z", "url": "https://files.pythonhosted.org/packages/81/47/611e6d0a1393ca538cbec4cd0855122170f23e37372d393c9c66aaa2db50/gcmtools-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "2f9824ae6cb5a6bb355f515a1a369434", "sha256": "6f1ebcb9178705e81d0aaa62f713e17cff61d4a7825fddd21d1572275d78b710"}, "downloads": -1, "filename": "gcmtools-0.4.4.tar.gz", "has_sig": false, "md5_digest": "2f9824ae6cb5a6bb355f515a1a369434", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17837, "upload_time": "2019-02-07T20:40:46", "upload_time_iso_8601": "2019-02-07T20:40:46.621110Z", "url": "https://files.pythonhosted.org/packages/dd/18/6393580ec0234453828beac63040f9ecf6609298a331c0cff03101728f69/gcmtools-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "d80d2a36afb194c40e6d4f3314d5f356", "sha256": "7bff704f5a228aee28894193b556674747d45ebf9ddc65256f59fdd527c8bc78"}, "downloads": -1, "filename": "gcmtools-0.4.5.tar.gz", "has_sig": false, "md5_digest": "d80d2a36afb194c40e6d4f3314d5f356", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17886, "upload_time": "2019-02-07T20:46:03", "upload_time_iso_8601": "2019-02-07T20:46:03.180421Z", "url": "https://files.pythonhosted.org/packages/d9/d5/4ec4424cea0281031e0f75d36f03a8917f66b91a683938c5c86fbedc140f/gcmtools-0.4.5.tar.gz", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "2f2109999cb4b2139b9a36a70c1985ad", "sha256": "082a1ac6ca967618b7069cb6778ca6a4a7459c17235a1abfee2afd51d397200b"}, "downloads": -1, "filename": "gcmtools-0.4.6.tar.gz", "has_sig": false, "md5_digest": "2f2109999cb4b2139b9a36a70c1985ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18358, "upload_time": "2019-03-08T19:13:40", "upload_time_iso_8601": "2019-03-08T19:13:40.168857Z", "url": "https://files.pythonhosted.org/packages/8a/80/de93bc47c6bfd044de1fa53d1eda5beb04e2256dc5230e2babde13f47146/gcmtools-0.4.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f2109999cb4b2139b9a36a70c1985ad", "sha256": "082a1ac6ca967618b7069cb6778ca6a4a7459c17235a1abfee2afd51d397200b"}, "downloads": -1, "filename": "gcmtools-0.4.6.tar.gz", "has_sig": false, "md5_digest": "2f2109999cb4b2139b9a36a70c1985ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18358, "upload_time": "2019-03-08T19:13:40", "upload_time_iso_8601": "2019-03-08T19:13:40.168857Z", "url": "https://files.pythonhosted.org/packages/8a/80/de93bc47c6bfd044de1fa53d1eda5beb04e2256dc5230e2babde13f47146/gcmtools-0.4.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:47 2020"}