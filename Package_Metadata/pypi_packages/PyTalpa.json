{"info": {"author": "Bifferos", "author_email": "bifferos@yahoo.co.uk", "bugtrack_url": null, "classifiers": [], "description": "What is PyTalpa?\r\n\r\nThis is really just a dirty hack at the moment to see how \r\nPython could be used as a file system operation interceptor\r\non Linux.  You simply derive a class from pytalpa.talpa and \r\ncreate methods for the operations you're interested in.\r\n\r\nWhat is Talpa?\r\n\r\nTalpa is part of the Sophos Anti-Virus scanner for Linux.\r\nIt is a kernel driver which intercepts (at the kernel level)\r\naccess to the file system, and allows a userland vetting \r\nclient to allow or deny the operation.\r\n\r\nWhere can I get Talpa?\r\n\r\nTalpa is obtainable from the Sophos Anti-Virus for Linux \r\nproduct.  Please obtain a demo copy of the Sophos Anti-virus \r\nproduct from www.sophos.com.  The SAV tarball contains the \r\nTalpa source (in talpa-srcpack.tar) which is itself GPLed, \r\neven though the rest of the product is non-free.  Once you\r\nhave the demo the GPL allows you unrestricted use of the \r\nGPLed parts, i.e. Talpa.\r\n\r\nQuickstart:\r\n\r\nThese instructions apply to kernel 2.6.17.13, Slackare 11.0.  \r\n2.6.18 is not supported by Talpa at the moment.  Earlier kernels \r\nshould work, but you'll need to experiment with which \r\nmodules to load. A good approach would be to see which \r\nmodules SAV (Sophos Anti-Virus) loads.\r\n\r\n1) Unpack the talpa source pack:\r\n   cd /usr/src\r\n   tar xzf /opt/sophos-av/talpa/talpa-srcpack.tgz\r\n   cd talpa-1.1.0\r\n\r\n2) Configure and build Talpa:\r\n   ./configure\r\n   make\r\n\r\n3) I had to remove the capability module from my kernel, or\r\n   I got an error loading one of the modules:\r\n   rmmod capability\r\n\r\n4) Load the Talpa modules.\r\n   insmod talpa_linux.ko\r\n   insmod talpa_core.ko\r\n   insmod talpa_vcdevice.ko\r\n   insmod talpa_lsm.ko capabilities=1\r\n\r\n5) Setup the exclusions to we get all the events.\r\n   echo disable >\r\n/proc/sys/talpa/intercept-filters/OperationExclusionProcessor/status\r\n\r\n6) Enable the interception events\r\n   echo enable > /proc/sys/talpa/interceptors/LSMInterceptor/status\r\n\r\n7) To run the example client that comes with Talpa:\r\n   make exampleclients\r\n   ./clients/vc\r\n\r\n8) Alternatively skip (7) and use the Python version :-):\r\n   tar xvf PyTalpa-0.1.tar.gz\r\n   cd PyTalpa-0.1\r\n   python setup.py build\r\n   cp build/*/pytalpa.so .\r\n   ./test.py\r\n\r\n   While running test.py create a file called\r\n   SomeUniqueName.txt in another terminal. You should find that\r\n   you can create it but not append anything to it.\r\n\r\n\r\nHave fun!\r\n\r\n\r\nBUGS:\r\n\r\nOn shutdown of the vetting loop there's a segfault.  I really\r\ncan't be bothered to track this one down - patches welcome!", "description_content_type": null, "docs_url": null, "download_url": "http://www.biffer.talktalk.net/PyTalpa/PyTalpa-0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.biffer.talktalk.net/PyTalpa", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "PyTalpa", "package_url": "https://pypi.org/project/PyTalpa/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PyTalpa/", "project_urls": {"Download": "http://www.biffer.talktalk.net/PyTalpa/PyTalpa-0.1.tar.gz", "Homepage": "http://www.biffer.talktalk.net/PyTalpa"}, "release_url": "https://pypi.org/project/PyTalpa/0.1/", "requires_dist": null, "requires_python": null, "summary": "Python wrapper for Sophos On-access filter", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            What is PyTalpa?\n<br>\n<br>This is really just a dirty hack at the moment to see how \n<br>Python could be used as a file system operation interceptor\n<br>on Linux.  You simply derive a class from pytalpa.talpa and \n<br>create methods for the operations you're interested in.\n<br>\n<br>What is Talpa?\n<br>\n<br>Talpa is part of the Sophos Anti-Virus scanner for Linux.\n<br>It is a kernel driver which intercepts (at the kernel level)\n<br>access to the file system, and allows a userland vetting \n<br>client to allow or deny the operation.\n<br>\n<br>Where can I get Talpa?\n<br>\n<br>Talpa is obtainable from the Sophos Anti-Virus for Linux \n<br>product.  Please obtain a demo copy of the Sophos Anti-virus \n<br>product from www.sophos.com.  The SAV tarball contains the \n<br>Talpa source (in talpa-srcpack.tar) which is itself GPLed, \n<br>even though the rest of the product is non-free.  Once you\n<br>have the demo the GPL allows you unrestricted use of the \n<br>GPLed parts, i.e. Talpa.\n<br>\n<br>Quickstart:\n<br>\n<br>These instructions apply to kernel 2.6.17.13, Slackare 11.0.  \n<br>2.6.18 is not supported by Talpa at the moment.  Earlier kernels \n<br>should work, but you'll need to experiment with which \n<br>modules to load. A good approach would be to see which \n<br>modules SAV (Sophos Anti-Virus) loads.\n<br>\n<br>1) Unpack the talpa source pack:\n<br>   cd /usr/src\n<br>   tar xzf /opt/sophos-av/talpa/talpa-srcpack.tgz\n<br>   cd talpa-1.1.0\n<br>\n<br>2) Configure and build Talpa:\n<br>   ./configure\n<br>   make\n<br>\n<br>3) I had to remove the capability module from my kernel, or\n<br>   I got an error loading one of the modules:\n<br>   rmmod capability\n<br>\n<br>4) Load the Talpa modules.\n<br>   insmod talpa_linux.ko\n<br>   insmod talpa_core.ko\n<br>   insmod talpa_vcdevice.ko\n<br>   insmod talpa_lsm.ko capabilities=1\n<br>\n<br>5) Setup the exclusions to we get all the events.\n<br>   echo disable &gt;\n<br>/proc/sys/talpa/intercept-filters/OperationExclusionProcessor/status\n<br>\n<br>6) Enable the interception events\n<br>   echo enable &gt; /proc/sys/talpa/interceptors/LSMInterceptor/status\n<br>\n<br>7) To run the example client that comes with Talpa:\n<br>   make exampleclients\n<br>   ./clients/vc\n<br>\n<br>8) Alternatively skip (7) and use the Python version :-):\n<br>   tar xvf PyTalpa-0.1.tar.gz\n<br>   cd PyTalpa-0.1\n<br>   python setup.py build\n<br>   cp build/*/pytalpa.so .\n<br>   ./test.py\n<br>\n<br>   While running test.py create a file called\n<br>   SomeUniqueName.txt in another terminal. You should find that\n<br>   you can create it but not append anything to it.\n<br>\n<br>\n<br>Have fun!\n<br>\n<br>\n<br>BUGS:\n<br>\n<br>On shutdown of the vetting loop there's a segfault.  I really\n<br>can't be bothered to track this one down - patches welcome!\n          </div>"}, "last_serial": 16175, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 02:55:39 2020"}