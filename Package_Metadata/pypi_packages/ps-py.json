{"info": {"author": "Midhun C Nair", "author_email": "midhunch@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "PS_PY: Pub-Sub-Python\n=====================\n\n\n1.0.0.1\n-------\n\n* package name changes from pspy to ps_py due to conflict.\n\n1.0.0.0\n-------\n\n* General Bugfixes\n* Testcases for all functionality\n\n\n0.1.0.0\n-------\n\nPS_PY: A Event Driven programming helper.\n\n* Can create ``callable`` and non-``callable`` subjects.\n* Supports any python picklable objects as value.\n* Singleton Publisher class helps to get subjects created anywhere in the code to be subscribed to.\n* Make any picklable object an event using the ``Of`` operator.\n* Combine multiple subscriptions to single one using ``Merge`` operator.\n* Manipulate the event value using ``pipe`` attribute along with ``map`` operator.\n\n\nDependancies\n============\n\n* `python`_>=3.5.9\n\n\nQuickStart\n==========\n\nInstallation and Basic Configuration\n------------------------------------\n\n1. Install PS_PY: Pub-Sub-Python by running ``pip install ps_py``.\n2. There is no specific configuration needed to use ps_py.\n\n.. code:: python\n\n    # **non-callable subject**\n    # publisher code\n    from ps_py.publisher import Publisher\n    publisher = Publisher()\n    subject = publisher.add('example_subject', initial_value='example_value')\n    subject.next('example_value_1')  # to publish new value.\n\n    # subscriber code\n    from ps_py.publisher import Publisher\n    publisher = Publisher()\n    subject = publisher.get_subject('example_subject')\n    # NOTE: The above will create a new subject **if and only if** the subject doesn't exist.\n\n    \"\"\"Assuming ``on_success``, ``on_error`` are already defined somewhere\n    before the below statement.\n    ``onSuccess`` is mandatory to subscribe; whereas ``onError`` is optional.\n    ``onSuccess``, ``onError``: can be either callable or a ``dict`` of format shown below:\n    ``{'func': <callable>, 'args': <None | list | tuple>, 'kwargs': <None | dict>}``\n    ``onSuccess``: The callable defined either directly or via dict should take a\n    argument (positional or keyword) with name ``value``.\n    ``onError``: The callable defined either directly or via dict should take a\n    argument (positional or keyword) with name ``error``.\n    \"\"\"\n    subscriber = subject.subscribe(onSuccess=on_success, onError=on_error)\n    \"\"\"That is it. at any point the publisher publishes any thing to this subject\n    the ``onSuccess`` or ``onError`` will be called accordingly.\n    NOTE: if the subject has any value which is not None and not initial_value,\n    it will be passed to ``onSuccess`` right away.\n    \"\"\"\n    # to unsubscribe\n    subscriber.unsubscribe()\n\n    # **callable subject**\n    # there is no publisher code for this because the callable will be the publisher\n    from ps_py.publisher import Publisher\n    publisher = Publisher()\n    subject = publisher.add(lambda x,y,z=None: (x, y, z), 'x', 'y', 'z'='z_val', initial_value='init')\n    # syntax: subject = publisher.add(<function>, ``*args``, ``**kwargs``)\n    \"\"\"NOTE: The subject callable will not be called/executed until the first subscribe.\n    If no subscription the the subject callable will never be called/executed.\n    \"\"\"\n    subscriber = subject.subscribe(onSuccess=on_success, onError=on_error)\n\n    # **Creating subjects and using it directly**\n    from ps_py.subject import Subject\n    # for non-callable subject\n    # Subject constructor takes in one mandatory value that is subject unique identifier.\n    # ``initial_value`` is optional.\n    subject = Subject('example_subject', initial_value='example_value')\n    subject.next('example_value_1')\n\n    \"\"\"Assuming ``on_success``, ``on_error`` are already defined somewhere\n    before the below statement.\n    \"\"\"\n    subscriber = subject.subscribe(onSuccess=on_success, onError=on_error)\n\n    # for callable subject\n    subject = Subject(lambda x,y,z=None: (x, y, z), 'x', 'y', 'z'='z_val', initial_value='init')\n    \"\"\"NOTE: The function passed is called only at the fisrt subscription.\"\"\"\n\n    \"\"\"Assuming ``on_success``, ``on_error`` are already defined somewhere\n    before the below statement.\n    \"\"\"\n    subscriber = subject.subscribe(onSuccess=on_success, onError=on_error)\n\n\n\nBasic Usage\n===========\n\nBelow are some basic ussage for PS_PY package.\n\nexample::\n\n    >>>from ps_py.subject import Subject\n    >>>sbj = Subject('exp1', initial_value='val1')\n    >>>sbj.value\n    'val1'\n    >>>sbj2 = Subject('exp1', initial_value='val2')\n    >>>id(sbj) == id(sbj2)\n    True\n    >>>sbj.value  # the value of sbj is now the latest that is provided by sbj2\n    'val2'\n    >>>sbc = sbj.subscribe(onSuccess=lambda value: print(value), onError=None)  # onError is optional, sbj.value is passed to onSuccess; return Subscriber object.\n    val2\n    >>>sbc1 = sbj.subscribe(onSuccess=lambda value: print(value), onError=None)\n    val2\n    >>>sbj.next('val3')  # calls the onSuccess of both ``sbc`` anf ``sbc1``; returns\n    val3\n    val3\n    >>>sbc1.unsubscribe()  # ``sbc1`` is obsolete after this point.\n    >>>sbj.next([1, 2])  # calls the onSuccess of ``sbc``; any picklable value can be send.\n    [1, 2]\n    >>>sbj2 = Subject(lambda val, val2=None: (val, val2), 'args', val2='kwargs')\n    >>>sbc2 = sbj2.subscribe(onSuccess=lambda value: print(value))\n    ('args', 'kwargs')\n\n    >>>from ps_py.contrib import map\n    >>>sbj = Subject(\"pip-map_ex\", initial_value='val1')\n    >>>sbj1 = sbj.pipe(map(lambda value: \"%s:%s\"%(\"modified\", value)))\n    >>>sbc = sbj1.subscribe(onSuccess=lambda value: print(value))\n    modified:val1  # the current value in the sbj is passed down to the pip.\n    >>>sbj.next('new_val')\n    modified:new_val\n\n    >>>from ps_py.contrib import Merge, map\n    >>>sbj1 = Subject(\"Merge_ex_1\")\n    >>>sbj2 = Subject(\"Merge_ex_2\")\n    >>>mrg = Merge(sbj1, sbj2)\n    >>>sbc = mrg.subscribe(onSuccess=lambda value: print(value))\n    >>>sbj1.next(\"first_val\")\n    first_val\n    >>>sbj2.next(\"second_val\")\n    second_val\n    >>>mrg_sbj = mrg.pipe(map(lambda value: \"%s:%s\"%(\"mergePipe\", value)))\n    >>>sbc1 = mrg_sbj.subscribe(onSuccess=lambda value: print(value))\n    mergePipe:second_val  # latest value is passed to the pipe.\n    >>>sbj1.next(\"third_value\")\n    third_value  # this is the value printed by ``sbc``'s ``onSuccess``\n    mergePipe:third_value  # this is the value printed by ``sbc1``'s ``onSuccess``\n    >>>sbj2.next(\"fourth_value\")\n    fourth_value  # this is the value printed by ``sbc``'s ``onSuccess``\n    mergePipe:fourth_value  # this is the value printed by ``sbc1``'s ``onSuccess``\n    >>>sbc.unsubscribe()\n    >>>sbj1.next(\"fifth_value\")\n    mergePipe:fifth_value  # this is the value printed by ``sbc1``'s ``onSuccess``\n\n    >>>from ps_py.contrib import Of, map\n    >>>of_obj = Of(\"val1\", [\"v\", \"a\", \"l\", \"2\"], {\"v\": \"a\", \"l\":3}, timeout=2)\n    >>>of_sbj = of_obj.pipe(map(lambda value: \"%s:%s\"%(\"ofPipe\", value)))\n    >>>sbc1 = of_sbj.subscribe(onSuccess=lambda value: print(value))\n    >>>sbc = of_obj.subscribe(onSuccess=lambda value: print(\"of_direct:%s\" % value)\n    of_direct:val1\n    ofPipe:val1\n    of_direct:['v', 'a', 'l', '2']\n    ofPipe:['v', 'a', 'l', '2']\n    of_direct:{'l': 3, 'v': 'a'}\n    ofPipe:{'l': 3, 'v': 'a'}\n\n\n\nPublisher APIs\n==============\n\n\nsubjects\n--------\n\n* type: property\n* input: None\n* output: type->dict; {<subject_name>: <subject>}\n\n\nget_subject\n-----------\n\n* type: method\n* input: subject<str | callable>\n* output: type->Subject; <subject>\n\n\nadd\n---\n\n* type: method\n* input: subject<str | callable>, ``*args``, ``**kwargs``\n* output: type->Subject; <subject>\n\n\nsubscribe\n---------\n\n* type: method\n* input: subject<str | callable>, onSuccess<callable | dict {'func': <callable>, args: <None | list | tuple>>, onError<None | callable | dict {'func': <callable>, args: <None | list | tuple>>\n* output: type->Subscriber; <subscriber>\n* sideEffect: Will call the onSuccess if the subjects current_value != None and current_value != initial_value.\n\n\nnext\n----\n\n* type: method\n* input: subject<str | callable>, value<any python picklable object>\n* output: None\n\n\n\nSubject APIs\n============\n\n\npublisher\n---------\n\n* type: property\n* input: None\n* output: type->Publisher; <publisher>\n\n\nsubject\n-------\n\n* type: property\n* input: None\n* output: type->Str | callable; returns the input of the Subject constructor\n\n\nsubscribe\n---------\n\n* type: method\n* input: onSuccess<callable | dict {'func': <callable>, args: <None | list | tuple>>, onError<None | callable | dict {'func': <callable>, args: <None | list | tuple>>\n* output: type->Subscriber; <subscriber>\n* sideEffect: Will call the onSuccess if the subjects current_value != None and current_value != initial_value.\n\n\nadd_subscriber\n--------------\n\n* type: method\n* input: subscriber<Subscriber>\n* output: None\n* sideEffect: Will call the subscriber.success if the subjects current_value != None and current_value != initial_value.\n\n\npipe\n----\n\n* type: method\n* input: map<Map>, [map<Map>, ...]\n* output: map<Map>  # latest pipe to which you can subscribe.\n\n\nadd_pipe\n--------\n\n* type: method\n* input: map<Map>\n* output: map<Map>  # latest pipe to which you can subscribe.\n\n\nnext\n----\n\n* type: method\n* input: value<any python picklable object>, error<boolean> (default=False)\n* output: None\n\n\nsubscribers\n-----------\n\n* type: property\n* input: None\n* output: dict->{<subscriber_name>: subscriber<Subscriber>, ...}\n\n\npipes\n-----\n\n* type: property\n* input: None\n* output: list-> [pipe<Map>, ...]\n\n\nvalue\n-----\n\n* type: property\n* input: None\n* output: value<current value of the subject; any python picklable object>\n\n\nunsubscribe\n-----------\n\n* type: method\n* input: subscriber<Subscriber>\n* output: None\n\n\n\nSubscriber APIs\n===============\n\n\nname\n----\n\n* type: property\n* input: None\n* output: type-> str\n\n\nsubject\n-------\n\n* type: property\n* input: None\n* output: type-> Subject; The subject to which this subscriber is subscribed to\n\n\nonSuccess\n---------\n\n* type: property\n* input: None\n* output: type-> partial func; The validated&modified input onSuccess.\n\n\nonError\n---------\n\n* type: property\n* input: None\n* output: type-> partial func; The validated&modified input onError.\n\n\nsuccess\n-------\n\n* type: method\n* input: value <any python picklable object>\n* output: None\n\n\nerror\n-----\n\n* type: method\n* input: error <any python picklable object; mostly Exception object>\n* output: None\n\n\nunsubscribe\n-----------\n\n* type: method\n* input: None\n* output: None\n\n\n\nMerge APIs\n==========\n\n\nadd\n---\n\n* type: method\n* input: sub<Subject | Subscribe>\n* output: None\n\n\nsubscribe\n---------\n\n* type: method\n* input: onSuccess<callable | dict {'func': <callable>, args: <None | list | tuple>>, onError<None | callable | dict {'func': <callable>, args: <None | list | tuple>>\n* output: type->Subscriber; <subscriber>\n* sideEffect: Will call the onSuccess if the subjects current_value != None and current_value != initial_value.\n\n\npipe\n----\n\n* type: property\n* input: None\n* output: list-> [pipe<Map>, ...]\n\n\nsubscribers\n-----------\n\n* type: property\n* input: None\n* output: dict->{<subscriber_name>: subscriber<Subscriber>, ...}\n\n\n\nOf APIs\n=======\n\n\nsubscribe\n---------\n\n* type: method\n* input: onSuccess<callable | dict {'func': <callable>, args: <None | list | tuple>>, onError<None | callable | dict {'func': <callable>, args: <None | list | tuple>>\n* output: type->Subscriber; <subscriber>\n* sideEffect: Will call the onSuccess if the subjects current_value != None and current_value != initial_value.\n\n\npipe\n----\n\n* type: property\n* input: None\n* output: list-> [pipe<Map>, ...]\n\n\nsubscribers\n-----------\n\n* type: property\n* input: None\n* output: dict->{<subscriber_name>: subscriber<Subscriber>, ...}\n\n\n\n.. _python: http://python.org\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/midhuncnair/ps_py", "keywords": "publisher,subscriber,pub,sub,events,observable,subscribe,pub-sub-python,ps_py", "license": "MIT LICENSE", "maintainer": "", "maintainer_email": "", "name": "ps-py", "package_url": "https://pypi.org/project/ps-py/", "platform": "", "project_url": "https://pypi.org/project/ps-py/", "project_urls": {"Homepage": "https://github.com/midhuncnair/ps_py"}, "release_url": "https://pypi.org/project/ps-py/1.0.0.1/", "requires_dist": null, "requires_python": ">=3.5.9", "summary": "PubSubPython", "version": "1.0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ps-py-pub-sub-python\">\n<h2>PS_PY: Pub-Sub-Python</h2>\n<div id=\"id1\">\n<h3>1.0.0.1</h3>\n<ul>\n<li>package name changes from pspy to ps_py due to conflict.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.0.0</h3>\n<ul>\n<li>General Bugfixes</li>\n<li>Testcases for all functionality</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0.0</h3>\n<p>PS_PY: A Event Driven programming helper.</p>\n<ul>\n<li>Can create <tt>callable</tt> and non-<tt>callable</tt> subjects.</li>\n<li>Supports any python picklable objects as value.</li>\n<li>Singleton Publisher class helps to get subjects created anywhere in the code to be subscribed to.</li>\n<li>Make any picklable object an event using the <tt>Of</tt> operator.</li>\n<li>Combine multiple subscriptions to single one using <tt>Merge</tt> operator.</li>\n<li>Manipulate the event value using <tt>pipe</tt> attribute along with <tt>map</tt> operator.</li>\n</ul>\n</div>\n</div>\n<div id=\"dependancies\">\n<h2>Dependancies</h2>\n<ul>\n<li><a href=\"http://python.org\" rel=\"nofollow\">python</a>&gt;=3.5.9</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>QuickStart</h2>\n<h2 id=\"installation-and-basic-configuration\"><span class=\"section-subtitle\">Installation and Basic Configuration</span></h2>\n<ol>\n<li>Install PS_PY: Pub-Sub-Python by running <tt>pip install ps_py</tt>.</li>\n<li>There is no specific configuration needed to use ps_py.</li>\n</ol>\n<pre><span class=\"c1\"># **non-callable subject**</span>\n<span class=\"c1\"># publisher code</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ps_py.publisher</span> <span class=\"kn\">import</span> <span class=\"n\">Publisher</span>\n<span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span><span class=\"p\">()</span>\n<span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">publisher</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'example_subject'</span><span class=\"p\">,</span> <span class=\"n\">initial_value</span><span class=\"o\">=</span><span class=\"s1\">'example_value'</span><span class=\"p\">)</span>\n<span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">(</span><span class=\"s1\">'example_value_1'</span><span class=\"p\">)</span>  <span class=\"c1\"># to publish new value.</span>\n\n<span class=\"c1\"># subscriber code</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ps_py.publisher</span> <span class=\"kn\">import</span> <span class=\"n\">Publisher</span>\n<span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span><span class=\"p\">()</span>\n<span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">publisher</span><span class=\"o\">.</span><span class=\"n\">get_subject</span><span class=\"p\">(</span><span class=\"s1\">'example_subject'</span><span class=\"p\">)</span>\n<span class=\"c1\"># NOTE: The above will create a new subject **if and only if** the subject doesn't exist.</span>\n\n<span class=\"sd\">\"\"\"Assuming ``on_success``, ``on_error`` are already defined somewhere\nbefore the below statement.\n``onSuccess`` is mandatory to subscribe; whereas ``onError`` is optional.\n``onSuccess``, ``onError``: can be either callable or a ``dict`` of format shown below:\n``{'func': &lt;callable&gt;, 'args': &lt;None | list | tuple&gt;, 'kwargs': &lt;None | dict&gt;}``\n``onSuccess``: The callable defined either directly or via dict should take a\nargument (positional or keyword) with name ``value``.\n``onError``: The callable defined either directly or via dict should take a\nargument (positional or keyword) with name ``error``.\n\"\"\"</span>\n<span class=\"n\">subscriber</span> <span class=\"o\">=</span> <span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">onSuccess</span><span class=\"o\">=</span><span class=\"n\">on_success</span><span class=\"p\">,</span> <span class=\"n\">onError</span><span class=\"o\">=</span><span class=\"n\">on_error</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"That is it. at any point the publisher publishes any thing to this subject\nthe ``onSuccess`` or ``onError`` will be called accordingly.\nNOTE: if the subject has any value which is not None and not initial_value,\nit will be passed to ``onSuccess`` right away.\n\"\"\"</span>\n<span class=\"c1\"># to unsubscribe</span>\n<span class=\"n\">subscriber</span><span class=\"o\">.</span><span class=\"n\">unsubscribe</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># **callable subject**</span>\n<span class=\"c1\"># there is no publisher code for this because the callable will be the publisher</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ps_py.publisher</span> <span class=\"kn\">import</span> <span class=\"n\">Publisher</span>\n<span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span><span class=\"p\">()</span>\n<span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">publisher</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"o\">=</span><span class=\"s1\">'z_val'</span><span class=\"p\">,</span> <span class=\"n\">initial_value</span><span class=\"o\">=</span><span class=\"s1\">'init'</span><span class=\"p\">)</span>\n<span class=\"c1\"># syntax: subject = publisher.add(&lt;function&gt;, ``*args``, ``**kwargs``)</span>\n<span class=\"sd\">\"\"\"NOTE: The subject callable will not be called/executed until the first subscribe.\nIf no subscription the the subject callable will never be called/executed.\n\"\"\"</span>\n<span class=\"n\">subscriber</span> <span class=\"o\">=</span> <span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">onSuccess</span><span class=\"o\">=</span><span class=\"n\">on_success</span><span class=\"p\">,</span> <span class=\"n\">onError</span><span class=\"o\">=</span><span class=\"n\">on_error</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># **Creating subjects and using it directly**</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ps_py.subject</span> <span class=\"kn\">import</span> <span class=\"n\">Subject</span>\n<span class=\"c1\"># for non-callable subject</span>\n<span class=\"c1\"># Subject constructor takes in one mandatory value that is subject unique identifier.</span>\n<span class=\"c1\"># ``initial_value`` is optional.</span>\n<span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">Subject</span><span class=\"p\">(</span><span class=\"s1\">'example_subject'</span><span class=\"p\">,</span> <span class=\"n\">initial_value</span><span class=\"o\">=</span><span class=\"s1\">'example_value'</span><span class=\"p\">)</span>\n<span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">(</span><span class=\"s1\">'example_value_1'</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"Assuming ``on_success``, ``on_error`` are already defined somewhere\nbefore the below statement.\n\"\"\"</span>\n<span class=\"n\">subscriber</span> <span class=\"o\">=</span> <span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">onSuccess</span><span class=\"o\">=</span><span class=\"n\">on_success</span><span class=\"p\">,</span> <span class=\"n\">onError</span><span class=\"o\">=</span><span class=\"n\">on_error</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># for callable subject</span>\n<span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">Subject</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"o\">=</span><span class=\"s1\">'z_val'</span><span class=\"p\">,</span> <span class=\"n\">initial_value</span><span class=\"o\">=</span><span class=\"s1\">'init'</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"NOTE: The function passed is called only at the fisrt subscription.\"\"\"</span>\n\n<span class=\"sd\">\"\"\"Assuming ``on_success``, ``on_error`` are already defined somewhere\nbefore the below statement.\n\"\"\"</span>\n<span class=\"n\">subscriber</span> <span class=\"o\">=</span> <span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">onSuccess</span><span class=\"o\">=</span><span class=\"n\">on_success</span><span class=\"p\">,</span> <span class=\"n\">onError</span><span class=\"o\">=</span><span class=\"n\">on_error</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p>Below are some basic ussage for PS_PY package.</p>\n<p>example:</p>\n<pre>&gt;&gt;&gt;from ps_py.subject import Subject\n&gt;&gt;&gt;sbj = Subject('exp1', initial_value='val1')\n&gt;&gt;&gt;sbj.value\n'val1'\n&gt;&gt;&gt;sbj2 = Subject('exp1', initial_value='val2')\n&gt;&gt;&gt;id(sbj) == id(sbj2)\nTrue\n&gt;&gt;&gt;sbj.value  # the value of sbj is now the latest that is provided by sbj2\n'val2'\n&gt;&gt;&gt;sbc = sbj.subscribe(onSuccess=lambda value: print(value), onError=None)  # onError is optional, sbj.value is passed to onSuccess; return Subscriber object.\nval2\n&gt;&gt;&gt;sbc1 = sbj.subscribe(onSuccess=lambda value: print(value), onError=None)\nval2\n&gt;&gt;&gt;sbj.next('val3')  # calls the onSuccess of both ``sbc`` anf ``sbc1``; returns\nval3\nval3\n&gt;&gt;&gt;sbc1.unsubscribe()  # ``sbc1`` is obsolete after this point.\n&gt;&gt;&gt;sbj.next([1, 2])  # calls the onSuccess of ``sbc``; any picklable value can be send.\n[1, 2]\n&gt;&gt;&gt;sbj2 = Subject(lambda val, val2=None: (val, val2), 'args', val2='kwargs')\n&gt;&gt;&gt;sbc2 = sbj2.subscribe(onSuccess=lambda value: print(value))\n('args', 'kwargs')\n\n&gt;&gt;&gt;from ps_py.contrib import map\n&gt;&gt;&gt;sbj = Subject(\"pip-map_ex\", initial_value='val1')\n&gt;&gt;&gt;sbj1 = sbj.pipe(map(lambda value: \"%s:%s\"%(\"modified\", value)))\n&gt;&gt;&gt;sbc = sbj1.subscribe(onSuccess=lambda value: print(value))\nmodified:val1  # the current value in the sbj is passed down to the pip.\n&gt;&gt;&gt;sbj.next('new_val')\nmodified:new_val\n\n&gt;&gt;&gt;from ps_py.contrib import Merge, map\n&gt;&gt;&gt;sbj1 = Subject(\"Merge_ex_1\")\n&gt;&gt;&gt;sbj2 = Subject(\"Merge_ex_2\")\n&gt;&gt;&gt;mrg = Merge(sbj1, sbj2)\n&gt;&gt;&gt;sbc = mrg.subscribe(onSuccess=lambda value: print(value))\n&gt;&gt;&gt;sbj1.next(\"first_val\")\nfirst_val\n&gt;&gt;&gt;sbj2.next(\"second_val\")\nsecond_val\n&gt;&gt;&gt;mrg_sbj = mrg.pipe(map(lambda value: \"%s:%s\"%(\"mergePipe\", value)))\n&gt;&gt;&gt;sbc1 = mrg_sbj.subscribe(onSuccess=lambda value: print(value))\nmergePipe:second_val  # latest value is passed to the pipe.\n&gt;&gt;&gt;sbj1.next(\"third_value\")\nthird_value  # this is the value printed by ``sbc``'s ``onSuccess``\nmergePipe:third_value  # this is the value printed by ``sbc1``'s ``onSuccess``\n&gt;&gt;&gt;sbj2.next(\"fourth_value\")\nfourth_value  # this is the value printed by ``sbc``'s ``onSuccess``\nmergePipe:fourth_value  # this is the value printed by ``sbc1``'s ``onSuccess``\n&gt;&gt;&gt;sbc.unsubscribe()\n&gt;&gt;&gt;sbj1.next(\"fifth_value\")\nmergePipe:fifth_value  # this is the value printed by ``sbc1``'s ``onSuccess``\n\n&gt;&gt;&gt;from ps_py.contrib import Of, map\n&gt;&gt;&gt;of_obj = Of(\"val1\", [\"v\", \"a\", \"l\", \"2\"], {\"v\": \"a\", \"l\":3}, timeout=2)\n&gt;&gt;&gt;of_sbj = of_obj.pipe(map(lambda value: \"%s:%s\"%(\"ofPipe\", value)))\n&gt;&gt;&gt;sbc1 = of_sbj.subscribe(onSuccess=lambda value: print(value))\n&gt;&gt;&gt;sbc = of_obj.subscribe(onSuccess=lambda value: print(\"of_direct:%s\" % value)\nof_direct:val1\nofPipe:val1\nof_direct:['v', 'a', 'l', '2']\nofPipe:['v', 'a', 'l', '2']\nof_direct:{'l': 3, 'v': 'a'}\nofPipe:{'l': 3, 'v': 'a'}\n</pre>\n</div>\n<div id=\"publisher-apis\">\n<h2>Publisher APIs</h2>\n<div id=\"subjects\">\n<h3>subjects</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: type-&gt;dict; {&lt;subject_name&gt;: &lt;subject&gt;}</li>\n</ul>\n</div>\n<div id=\"get-subject\">\n<h3>get_subject</h3>\n<ul>\n<li>type: method</li>\n<li>input: subject&lt;str | callable&gt;</li>\n<li>output: type-&gt;Subject; &lt;subject&gt;</li>\n</ul>\n</div>\n<div id=\"add\">\n<h3>add</h3>\n<ul>\n<li>type: method</li>\n<li>input: subject&lt;str | callable&gt;, <tt>*args</tt>, <tt>**kwargs</tt></li>\n<li>output: type-&gt;Subject; &lt;subject&gt;</li>\n</ul>\n</div>\n<div id=\"subscribe\">\n<h3>subscribe</h3>\n<ul>\n<li>type: method</li>\n<li>input: subject&lt;str | callable&gt;, onSuccess&lt;callable | dict {\u2018func\u2019: &lt;callable&gt;, args: &lt;None | list | tuple&gt;&gt;, onError&lt;None | callable | dict {\u2018func\u2019: &lt;callable&gt;, args: &lt;None | list | tuple&gt;&gt;</li>\n<li>output: type-&gt;Subscriber; &lt;subscriber&gt;</li>\n<li>sideEffect: Will call the onSuccess if the subjects current_value != None and current_value != initial_value.</li>\n</ul>\n</div>\n<div id=\"next\">\n<h3>next</h3>\n<ul>\n<li>type: method</li>\n<li>input: subject&lt;str | callable&gt;, value&lt;any python picklable object&gt;</li>\n<li>output: None</li>\n</ul>\n</div>\n</div>\n<div id=\"subject-apis\">\n<h2>Subject APIs</h2>\n<div id=\"publisher\">\n<h3>publisher</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: type-&gt;Publisher; &lt;publisher&gt;</li>\n</ul>\n</div>\n<div id=\"subject\">\n<h3>subject</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: type-&gt;Str | callable; returns the input of the Subject constructor</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>subscribe</h3>\n<ul>\n<li>type: method</li>\n<li>input: onSuccess&lt;callable | dict {\u2018func\u2019: &lt;callable&gt;, args: &lt;None | list | tuple&gt;&gt;, onError&lt;None | callable | dict {\u2018func\u2019: &lt;callable&gt;, args: &lt;None | list | tuple&gt;&gt;</li>\n<li>output: type-&gt;Subscriber; &lt;subscriber&gt;</li>\n<li>sideEffect: Will call the onSuccess if the subjects current_value != None and current_value != initial_value.</li>\n</ul>\n</div>\n<div id=\"add-subscriber\">\n<h3>add_subscriber</h3>\n<ul>\n<li>type: method</li>\n<li>input: subscriber&lt;Subscriber&gt;</li>\n<li>output: None</li>\n<li>sideEffect: Will call the subscriber.success if the subjects current_value != None and current_value != initial_value.</li>\n</ul>\n</div>\n<div id=\"pipe\">\n<h3>pipe</h3>\n<ul>\n<li>type: method</li>\n<li>input: map&lt;Map&gt;, [map&lt;Map&gt;, \u2026]</li>\n<li>output: map&lt;Map&gt;  # latest pipe to which you can subscribe.</li>\n</ul>\n</div>\n<div id=\"add-pipe\">\n<h3>add_pipe</h3>\n<ul>\n<li>type: method</li>\n<li>input: map&lt;Map&gt;</li>\n<li>output: map&lt;Map&gt;  # latest pipe to which you can subscribe.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>next</h3>\n<ul>\n<li>type: method</li>\n<li>input: value&lt;any python picklable object&gt;, error&lt;boolean&gt; (default=False)</li>\n<li>output: None</li>\n</ul>\n</div>\n<div id=\"subscribers\">\n<h3>subscribers</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: dict-&gt;{&lt;subscriber_name&gt;: subscriber&lt;Subscriber&gt;, \u2026}</li>\n</ul>\n</div>\n<div id=\"pipes\">\n<h3>pipes</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: list-&gt; [pipe&lt;Map&gt;, \u2026]</li>\n</ul>\n</div>\n<div id=\"value\">\n<h3>value</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: value&lt;current value of the subject; any python picklable object&gt;</li>\n</ul>\n</div>\n<div id=\"unsubscribe\">\n<h3>unsubscribe</h3>\n<ul>\n<li>type: method</li>\n<li>input: subscriber&lt;Subscriber&gt;</li>\n<li>output: None</li>\n</ul>\n</div>\n</div>\n<div id=\"subscriber-apis\">\n<h2>Subscriber APIs</h2>\n<div id=\"name\">\n<h3>name</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: type-&gt; str</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>subject</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: type-&gt; Subject; The subject to which this subscriber is subscribed to</li>\n</ul>\n</div>\n<div id=\"onsuccess\">\n<h3>onSuccess</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: type-&gt; partial func; The validated&amp;modified input onSuccess.</li>\n</ul>\n</div>\n<div id=\"onerror\">\n<h3>onError</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: type-&gt; partial func; The validated&amp;modified input onError.</li>\n</ul>\n</div>\n<div id=\"success\">\n<h3>success</h3>\n<ul>\n<li>type: method</li>\n<li>input: value &lt;any python picklable object&gt;</li>\n<li>output: None</li>\n</ul>\n</div>\n<div id=\"error\">\n<h3>error</h3>\n<ul>\n<li>type: method</li>\n<li>input: error &lt;any python picklable object; mostly Exception object&gt;</li>\n<li>output: None</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>unsubscribe</h3>\n<ul>\n<li>type: method</li>\n<li>input: None</li>\n<li>output: None</li>\n</ul>\n</div>\n</div>\n<div id=\"merge-apis\">\n<h2>Merge APIs</h2>\n<div id=\"id8\">\n<h3>add</h3>\n<ul>\n<li>type: method</li>\n<li>input: sub&lt;Subject | Subscribe&gt;</li>\n<li>output: None</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>subscribe</h3>\n<ul>\n<li>type: method</li>\n<li>input: onSuccess&lt;callable | dict {\u2018func\u2019: &lt;callable&gt;, args: &lt;None | list | tuple&gt;&gt;, onError&lt;None | callable | dict {\u2018func\u2019: &lt;callable&gt;, args: &lt;None | list | tuple&gt;&gt;</li>\n<li>output: type-&gt;Subscriber; &lt;subscriber&gt;</li>\n<li>sideEffect: Will call the onSuccess if the subjects current_value != None and current_value != initial_value.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>pipe</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: list-&gt; [pipe&lt;Map&gt;, \u2026]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>subscribers</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: dict-&gt;{&lt;subscriber_name&gt;: subscriber&lt;Subscriber&gt;, \u2026}</li>\n</ul>\n</div>\n</div>\n<div id=\"of-apis\">\n<h2>Of APIs</h2>\n<div id=\"id12\">\n<h3>subscribe</h3>\n<ul>\n<li>type: method</li>\n<li>input: onSuccess&lt;callable | dict {\u2018func\u2019: &lt;callable&gt;, args: &lt;None | list | tuple&gt;&gt;, onError&lt;None | callable | dict {\u2018func\u2019: &lt;callable&gt;, args: &lt;None | list | tuple&gt;&gt;</li>\n<li>output: type-&gt;Subscriber; &lt;subscriber&gt;</li>\n<li>sideEffect: Will call the onSuccess if the subjects current_value != None and current_value != initial_value.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>pipe</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: list-&gt; [pipe&lt;Map&gt;, \u2026]</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>subscribers</h3>\n<ul>\n<li>type: property</li>\n<li>input: None</li>\n<li>output: dict-&gt;{&lt;subscriber_name&gt;: subscriber&lt;Subscriber&gt;, \u2026}</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6991818, "releases": {"1.0.0.0": [{"comment_text": "", "digests": {"md5": "514d3b27c9601492b8ea5fda4f5ec381", "sha256": "b7afc3b918b15f5a7441d445b24a21cc1f3a5db7458e6a2e31ca9041ff36b9a3"}, "downloads": -1, "filename": "ps_py-1.0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "514d3b27c9601492b8ea5fda4f5ec381", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.9", "size": 29860, "upload_time": "2020-04-10T08:39:31", "upload_time_iso_8601": "2020-04-10T08:39:31.501050Z", "url": "https://files.pythonhosted.org/packages/ab/da/1f3eb4c57f1abb48576af70d413380fdc517df27dd4a08a6a261c6ed9c35/ps_py-1.0.0.0-py3-none-any.whl", "yanked": false}], "1.0.0.1": [{"comment_text": "", "digests": {"md5": "ff00eb836a7791742868cf0296af5746", "sha256": "5b07607945506272b29f2bb75cb62e36fd2e0483928a586d53d022ae6b1b287a"}, "downloads": -1, "filename": "ps_py-1.0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ff00eb836a7791742868cf0296af5746", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.9", "size": 20627, "upload_time": "2020-04-10T08:51:08", "upload_time_iso_8601": "2020-04-10T08:51:08.348844Z", "url": "https://files.pythonhosted.org/packages/f0/6e/5ca6e9e7182634b202fb31bcbbf7c2d8ac10e4579619abd5ddee19f1b3b2/ps_py-1.0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c57faf58381f11bf894c5703294c54c", "sha256": "242e4ae929a00569e95de5c381b747002bb38ed887ea970b839ed121c28f6a46"}, "downloads": -1, "filename": "ps_py-1.0.0.1.tar.gz", "has_sig": false, "md5_digest": "1c57faf58381f11bf894c5703294c54c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.9", "size": 15749, "upload_time": "2020-04-10T08:51:10", "upload_time_iso_8601": "2020-04-10T08:51:10.129567Z", "url": "https://files.pythonhosted.org/packages/00/0c/0c2b59b5107a1ea88aa23398d5d7ef4679fe15b0bf6c1aac26a5c79a70fd/ps_py-1.0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff00eb836a7791742868cf0296af5746", "sha256": "5b07607945506272b29f2bb75cb62e36fd2e0483928a586d53d022ae6b1b287a"}, "downloads": -1, "filename": "ps_py-1.0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ff00eb836a7791742868cf0296af5746", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.9", "size": 20627, "upload_time": "2020-04-10T08:51:08", "upload_time_iso_8601": "2020-04-10T08:51:08.348844Z", "url": "https://files.pythonhosted.org/packages/f0/6e/5ca6e9e7182634b202fb31bcbbf7c2d8ac10e4579619abd5ddee19f1b3b2/ps_py-1.0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c57faf58381f11bf894c5703294c54c", "sha256": "242e4ae929a00569e95de5c381b747002bb38ed887ea970b839ed121c28f6a46"}, "downloads": -1, "filename": "ps_py-1.0.0.1.tar.gz", "has_sig": false, "md5_digest": "1c57faf58381f11bf894c5703294c54c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.9", "size": 15749, "upload_time": "2020-04-10T08:51:10", "upload_time_iso_8601": "2020-04-10T08:51:10.129567Z", "url": "https://files.pythonhosted.org/packages/00/0c/0c2b59b5107a1ea88aa23398d5d7ef4679fe15b0bf6c1aac26a5c79a70fd/ps_py-1.0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:47 2020"}