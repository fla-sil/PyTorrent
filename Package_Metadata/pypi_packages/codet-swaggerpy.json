{"info": {"author": "Digium, Inc.", "author_email": "dlee@digium.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n**ORIGINAL REPO:** [digium/swagger-py](https://github.com/digium/swagger-py.git)\n\nAbout\n-----\n\nSwagger.py is a Python library for using\n`Swagger ` [codet-swaggerpy](https://github.com/Thulebona/codet-swaggerpy.git) __ defined API's.\n\nSwagger itself is best described on the Swagger home page:\n\n    Swagger is a specification and complete framework implementation for\n    describing, producing, consuming, and visualizing RESTful web\n    services.\n\nThe `Swagger\nspecification <https://github.com/wordnik/swagger-core/wiki>`__ defines\nhow API's may be described using Swagger.\n\nSwagger.py also supports a WebSocket extension, allowing a WebSocket to\nbe documented, and auto-generated WebSocket client code.\n\npython -v\n---------\n Python3\n\nUsage\n-----\n\nInstall the latest release from PyPI.\n\n::\n\n    $ sudo pip install codet-swaggerpy\n\nOr install from source using the ``setup.py`` script.\n\n::\n\n    $ pip install -e  ./\n    \nAPI\n===\n\nSwagger.py will dynamically build an object model from a Swagger-enabled\nRESTful API.\n\nHere is a simple example using the `Asterisk REST\nInterface <https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI>`__\n\n.. code:: Python\n\n    #!/usr/bin/env python\n\n    import json\n\n    from swaggerpy.client import SwaggerClient\n    from swaggerpy.http_client import SynchronousHttpClient\n\n    http_client = SynchronousHttpClient()\n    http_client.set_basic_auth('localhost', 'hey', 'peekaboo')\n\n    ari = SwaggerClient(\n        \"http://localhost:8088/ari/api-docs/resources.json\",\n        http_client=http_client)\n\n    ws = ari.events.eventWebsocket(app='hello')\n\n    for msg_str in iter(lambda: ws.recv(), None):\n        msg_json = json.loads(msg_str)\n        if msg_json['type'] == 'StasisStart':\n            channelId = msg_json['channel']['id']\n            ari.channels.answer(channelId=channelId)\n            ari.channels.play(channelId=channelId,\n                              media='sound:hello-world')\n            ari.channels.continueInDialplan(channelId=channelId)\n\nswagger-codegen\n===============\n\nThere are the beginnings of a Mustache-based code generator, but it's\nnot functional... yet.\n\n.. Inspired by the original [swagger-codegen][] project, templates are\n   written using [Mustache][] templates ([Pystache][], specifically).\n   There are several important differences.\n\n    * The model that is fed into the mustache templates is almost\n      identical to Swagger's API resource listing and API declaration\n      model. The differences are listed [below](#model).\n    * The templates themselves are completely self contained, with the\n      logic to enrich the model being specified in `translate.py` in the\n      same directory as the `*.mustache` files.\n\nData model\n==========\n\nThe data model presented by the ``swagger_model`` module is nearly\nidentical to the original Swagger API resource listing and API\ndeclaration. This means that if you add extra custom metadata to your\ndocs (such as a ``_author`` or ``_copyright`` field), they will carry\nforward into the object model. I recommend prefixing custom fields with\nan underscore, to avoid collisions with future versions of Swagger.\n\nThere are a few meaningful differences.\n\n-  Resource listing\n-  The ``file`` and ``base_dir`` fields have been added, referencing the\n   original ``.json`` file.\n-  The objects in a ``resource_listing``'s ``api`` array contains a\n   field ``api_declaration``, which is the processed result from the\n   referenced API doc.\n-  API declaration\n-  A ``file`` field has been added, referencing the original ``.json``\n   file.\n\nDevelopment\n-----------\n\nThe code is documented using `Sphinx <http://sphinx-doc.org/>`__, which\nallows `IntelliJ IDEA <http://confluence.jetbrains.net/display/PYH/>`__\nto do a better job at inferring types for autocompletion.\n\nTo keep things isolated, I also recommend installing (and using)\n`virtualenv <http://www.virtualenv.org/>`__.\n\n::\n\n    $ sudo pip install virtualenv\n    $ mkdir -p ~/virtualenv\n    $ virtualenv ~/virtualenv/swagger\n    $ . ~/virtualenv/swagger/bin/activate\n\n`Setuptools <http://pypi.python.org/pypi/setuptools>`__ is used for\nbuilding. `Nose <http://nose.readthedocs.org/en/latest/>`__ is used\nfor unit testing, with the `coverage\n<http://nedbatchelder.com/code/coverage/>`__ plugin installed to\ngenerated code coverage reports. Pass ``--with-coverage`` to generate\nthe code coverage report. HTML versions of the reports are put in\n``cover/index.html``.\n\n::\n\n    $ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n    $ ./setup.py test # run unit tests\n    $ ./setup.py bdist_egg # build distributable\n\n\n\nLicense\n-------\n\nCopyright (c) 2013, Digium, Inc. All rights reserved.\n\nSwagger.py is licensed with a `BSD 3-Clause\nLicense <http://opensource.org/licenses/BSD-3-Clause>`__.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/digium/swagger-py", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "codet-swaggerpy", "package_url": "https://pypi.org/project/codet-swaggerpy/", "platform": "", "project_url": "https://pypi.org/project/codet-swaggerpy/", "project_urls": {"Homepage": "https://github.com/digium/swagger-py"}, "release_url": "https://pypi.org/project/codet-swaggerpy/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Library for accessing Swagger-enabled API's", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <br>**ORIGINAL REPO:** [digium/swagger-py](https://github.com/digium/swagger-py.git)<br><br>About<br>-----<br><br>Swagger.py is a Python library for using<br>`Swagger ` [codet-swaggerpy](https://github.com/Thulebona/codet-swaggerpy.git) __ defined API's.<br><br>Swagger itself is best described on the Swagger home page:<br><br>    Swagger is a specification and complete framework implementation for<br>    describing, producing, consuming, and visualizing RESTful web<br>    services.<br><br>The `Swagger<br>specification &lt;https://github.com/wordnik/swagger-core/wiki&gt;`__ defines<br>how API's may be described using Swagger.<br><br>Swagger.py also supports a WebSocket extension, allowing a WebSocket to<br>be documented, and auto-generated WebSocket client code.<br><br>python -v<br>---------<br> Python3<br><br>Usage<br>-----<br><br>Install the latest release from PyPI.<br><br>::<br><br>    $ sudo pip install codet-swaggerpy<br><br>Or install from source using the ``setup.py`` script.<br><br>::<br><br>    $ pip install -e  ./<br>    <br>API<br>===<br><br>Swagger.py will dynamically build an object model from a Swagger-enabled<br>RESTful API.<br><br>Here is a simple example using the `Asterisk REST<br>Interface &lt;https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI&gt;`__<br><br>.. code:: Python<br><br>    #!/usr/bin/env python<br><br>    import json<br><br>    from swaggerpy.client import SwaggerClient<br>    from swaggerpy.http_client import SynchronousHttpClient<br><br>    http_client = SynchronousHttpClient()<br>    http_client.set_basic_auth('localhost', 'hey', 'peekaboo')<br><br>    ari = SwaggerClient(<br>        \"http://localhost:8088/ari/api-docs/resources.json\",<br>        http_client=http_client)<br><br>    ws = ari.events.eventWebsocket(app='hello')<br><br>    for msg_str in iter(lambda: ws.recv(), None):<br>        msg_json = json.loads(msg_str)<br>        if msg_json['type'] == 'StasisStart':<br>            channelId = msg_json['channel']['id']<br>            ari.channels.answer(channelId=channelId)<br>            ari.channels.play(channelId=channelId,<br>                              media='sound:hello-world')<br>            ari.channels.continueInDialplan(channelId=channelId)<br><br>swagger-codegen<br>===============<br><br>There are the beginnings of a Mustache-based code generator, but it's<br>not functional... yet.<br><br>.. Inspired by the original [swagger-codegen][] project, templates are<br>   written using [Mustache][] templates ([Pystache][], specifically).<br>   There are several important differences.<br><br>    * The model that is fed into the mustache templates is almost<br>      identical to Swagger's API resource listing and API declaration<br>      model. The differences are listed [below](#model).<br>    * The templates themselves are completely self contained, with the<br>      logic to enrich the model being specified in `translate.py` in the<br>      same directory as the `*.mustache` files.<br><br>Data model<br>==========<br><br>The data model presented by the ``swagger_model`` module is nearly<br>identical to the original Swagger API resource listing and API<br>declaration. This means that if you add extra custom metadata to your<br>docs (such as a ``_author`` or ``_copyright`` field), they will carry<br>forward into the object model. I recommend prefixing custom fields with<br>an underscore, to avoid collisions with future versions of Swagger.<br><br>There are a few meaningful differences.<br><br>-  Resource listing<br>-  The ``file`` and ``base_dir`` fields have been added, referencing the<br>   original ``.json`` file.<br>-  The objects in a ``resource_listing``'s ``api`` array contains a<br>   field ``api_declaration``, which is the processed result from the<br>   referenced API doc.<br>-  API declaration<br>-  A ``file`` field has been added, referencing the original ``.json``<br>   file.<br><br>Development<br>-----------<br><br>The code is documented using `Sphinx &lt;http://sphinx-doc.org/&gt;`__, which<br>allows `IntelliJ IDEA &lt;http://confluence.jetbrains.net/display/PYH/&gt;`__<br>to do a better job at inferring types for autocompletion.<br><br>To keep things isolated, I also recommend installing (and using)<br>`virtualenv &lt;http://www.virtualenv.org/&gt;`__.<br><br>::<br><br>    $ sudo pip install virtualenv<br>    $ mkdir -p ~/virtualenv<br>    $ virtualenv ~/virtualenv/swagger<br>    $ . ~/virtualenv/swagger/bin/activate<br><br>`Setuptools &lt;http://pypi.python.org/pypi/setuptools&gt;`__ is used for<br>building. `Nose &lt;http://nose.readthedocs.org/en/latest/&gt;`__ is used<br>for unit testing, with the `coverage<br>&lt;http://nedbatchelder.com/code/coverage/&gt;`__ plugin installed to<br>generated code coverage reports. Pass ``--with-coverage`` to generate<br>the code coverage report. HTML versions of the reports are put in<br>``cover/index.html``.<br><br>::<br><br>    $ ./setup.py develop   # prep for development (install deps, launchers, etc.)<br>    $ ./setup.py test # run unit tests<br>    $ ./setup.py bdist_egg # build distributable<br><br><br><br>License<br>-------<br><br>Copyright (c) 2013, Digium, Inc. All rights reserved.<br><br>Swagger.py is licensed with a `BSD 3-Clause<br>License &lt;http://opensource.org/licenses/BSD-3-Clause&gt;`__.<br>\n          </div>"}, "last_serial": 2473910, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "b951dabf7acc8d22a5a663415c6615fa", "sha256": "0e2660e220059f82d739dbdd38966cca7f91ace65f9e8f8035b2bd880d5f631e"}, "downloads": -1, "filename": "codet_swaggerpy-0.2.1-py3.5.egg", "has_sig": false, "md5_digest": "b951dabf7acc8d22a5a663415c6615fa", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 29797, "upload_time": "2016-11-21T14:51:14", "upload_time_iso_8601": "2016-11-21T14:51:14.627248Z", "url": "https://files.pythonhosted.org/packages/b9/c1/8c1f5d9f4aaa29b9f53ba57b71d73d2ac387134dd89145abc7fb95716dd1/codet_swaggerpy-0.2.1-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0376c2a1ca955a085ed02295034acd90", "sha256": "547b2a66b1eb82bed13db4e3fb03f77c0bb0f4afbfeff87bf42a97ff322d9e51"}, "downloads": -1, "filename": "codet-swaggerpy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0376c2a1ca955a085ed02295034acd90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21063, "upload_time": "2016-11-21T14:51:11", "upload_time_iso_8601": "2016-11-21T14:51:11.592884Z", "url": "https://files.pythonhosted.org/packages/b8/c3/ede3991ade683c69c4ffe5b5717da637f22679012709817ca5768297e527/codet-swaggerpy-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b951dabf7acc8d22a5a663415c6615fa", "sha256": "0e2660e220059f82d739dbdd38966cca7f91ace65f9e8f8035b2bd880d5f631e"}, "downloads": -1, "filename": "codet_swaggerpy-0.2.1-py3.5.egg", "has_sig": false, "md5_digest": "b951dabf7acc8d22a5a663415c6615fa", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 29797, "upload_time": "2016-11-21T14:51:14", "upload_time_iso_8601": "2016-11-21T14:51:14.627248Z", "url": "https://files.pythonhosted.org/packages/b9/c1/8c1f5d9f4aaa29b9f53ba57b71d73d2ac387134dd89145abc7fb95716dd1/codet_swaggerpy-0.2.1-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0376c2a1ca955a085ed02295034acd90", "sha256": "547b2a66b1eb82bed13db4e3fb03f77c0bb0f4afbfeff87bf42a97ff322d9e51"}, "downloads": -1, "filename": "codet-swaggerpy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0376c2a1ca955a085ed02295034acd90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21063, "upload_time": "2016-11-21T14:51:11", "upload_time_iso_8601": "2016-11-21T14:51:11.592884Z", "url": "https://files.pythonhosted.org/packages/b8/c3/ede3991ade683c69c4ffe5b5717da637f22679012709817ca5768297e527/codet-swaggerpy-0.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:13 2020"}