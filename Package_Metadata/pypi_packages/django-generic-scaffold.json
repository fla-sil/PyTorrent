{"info": {"author": "Serafeim Papastefanos", "author_email": "spapas@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries"], "description": "=======================\ndjango-generic-scaffold\n=======================\n\n.. image:: https://travis-ci.org/spapas/django-generic-scaffold.svg?branch=master\n    :target: https://travis-ci.org/spapas/django-generic-scaffold\n\n\nWith django-generic-scaffold you can quickly create CRUD generic class based views for your models so you will have a basic CRUD interface to your models by writing only a couple of lines of extra code! The purpose of this CRUD interface is, as opposed to django-admin, to be used by users and not staff members.\n\ndjango-generic-scaffold is different from other scaffolding tools because it generates all views/url routes *on-the-fly* (by creating subclasses of normal django class-based views) and *not* by outputing python code. This way you can re-configure\nyour views anytime you wish.\n\nExample\n=======\n\nI've added an example project of using django-generic-scaffold: https://github.com/spapas/generic-scaffold-demo\n\nInstallation\n============\n\nInstall it with ``pip install django-generic-scaffold``, or if you want to use the latest version on github, try ``pip install git+https://github.com/spapas/django-generic-scaffold``.\n\nIf you want to use the template tags and the fallback templates of django-generic-scaffold, please put ``generic_scaffold`` in your ``INSTALLED_APPS`` setting. If you\ndon't need the template tags or fallback templates then no modifying of your settings is needed, just go ahead and use it!\n\nSimple usage\n============\n\nLet's say you have defined a model named ``Book`` in your ``models.py``. In your ``views.py`` or, even better in a module named ``scaffolding.py`` define a class that overrides ``CrudManager``:\n\n.. code-block:: python\n\n    from generic_scaffold import CrudManager\n    import models\n\n    class BookCrudManager(CrudManager):\n        model = models.Book\n        prefix = 'books'\n\n\nNow, include the following lines to the ``urls.py`` of your application:\n\n.. code-block:: python\n\n    from scaffolding import BookCrudManager # or from views import BookCrudManager depending on where you've put it\n    book_crud = BookCrudManager()\n\n    # [...] define your urlpatters here\n\n    urlpatterns += book_crud.get_url_patterns()\n\n\nYou may now visit ``http://127.0.0.1:8000/books`` (or whatever was your ``prefix``) to get a list of your ``Book`` instances.\nThe following methods have also been created:\n\n* Create: ``http://127.0.0.1:8000/bookscreate``\n* Detail: ``http://127.0.0.1:8000/booksdetail/<id>``\n* Edit: ``http://127.0.0.1:8000/booksupdate/<id>``\n* Delete: ``http://127.0.0.1:8000/booksdelete/<id>``\n\nIf you don't do anything else, the default fallback templates will be used (they are ugly and should only be used for testing).\nYou should add a template named ``app_name/testmodel_list.html`` (which is the default template for the ``ListView``) to override\nthe fallback templates - please read the next section for more info on that.\n\nThe ``prefix`` option you set to the ``BooksCrudManager`` method will just prepend this prefix to all created urls\nand can also be used to get your url names for reversing.\n\nTemplate selection\n==================\n\nThere's a bunch of fallback templates that will be used if no other template can be used instead.\nThese template are for testing purposes only and should be overriden (unless you want to\nquickly see that everything works). Now, there are two ways you can redefine your templates:\n\n* Implicitly: Just add appropriate templates depending on your app/model name (similarly to normal class-based-views), for example for ``app_name`` and ``TestModel`` you can add the following templates:\n\nFor create/update add ``app_name/testmodel_form.html``,\nfor list add ``app_name/testmodel_list.html``,\nfor detail add ``app_name/testmodel_detail.html``,\nfor delete add ``app_name/testmodel_confirm_delete.html``.\n\n* Explicitly: You can use the ``action_template_name`` configuration option to explicitly set which templates will be used for each action. The ``action`` could be ``list, detail, update, create`` or ``delete``. So to configure the detail template name to be ``foo.html`` you'll use the option ``detail_template_name = 'foo.html'``.\n\nSo, the priority of templates is:\n\n* Explicit templates (if configured)\n* Implicit templates (if found)\n* Fallback templates (as a last resort)\n\nConfiguration\n=============\n\nMost of the time, you'll need to configure three things before using ``django-generic-scaffold``: The form class used for create and update views, the access permissions for each generic class based view and the templates that each view will use. These can be configured just by settings attributes to your ``CrudManager`` class.\n\n* To configure the form class that will be used, use the option ``form_class``.\n* To set the permissions you have to set the ``permissions`` attribute to a dictionary of callables. The keys of that dictionary should be ``list, detail, update, create`` or ``delete`` while the values should be callables like ``login_required`` or ``permission_required('permission')`` etc.\n* To configure the template names explicitly, use ``action_template_name``.\n\nFor any other configuration of the generated class based views you'll need to define mixins that will be passed to the generated CBV classes as a list using the option ``action_mixins`` (again action is either ``list, detail``, etc).\n\nUsing mixins you can do whatever you want to your resulting CBV classes -- also, by forcing you to use mixins django-generic-scaffold will help you follow bet code practices (DRY).\n\nHowever, sometimes mixins are not enough and you may need to completely override the parent Views to use something else. For this, you may set the ``action_view_class`` property to your own parent class view (i.e ``list_view_class = OverridenListView``).\n\nAPI and template tags\n=====================\n\nIf you want to use the provided template tags to your templates, you'll need to add ``{% load generic_scaffold_tags %}`` near\nthe top of your template. Then you may use ``set_urls_for_scaffold`` which will output the URLs of the\nselected scaffold depending on your configuration. This tag can receive\nthree parameters: The django app name, the model name and the prefix name. You can either use\nthe combination of app name / model name or just the prefix.\n\nIt will return a dictionary with all\nthe scaffolded urls for this model. For example, to get the url names for the model ``test2`` (careful you must use the internal model name so for ``Test2`` use ``test2`` )\nbelonging to the app ``test1`` you'll use ``{% set_urls_for_scaffold \"test1\" \"test2\" as url_names %}`` and then you could use the attributes ``list,\ncreate, detail, update, delete`` of that object to reverse and get the corresponding urls, for example\nuse ``{% url url_names.list }`` to get the url for list.\n\nThere's also a similar API function named ``get_url_names that`` you can use to get the urls for your scaffolds.\n\nFor example, you can do something like:\n\n.. code-block:: python\n\n    from generic_scaffold import get_url_names\n    from django.core.urlresolvers import reverse\n\n    names = get_url_names(prefix='test')\n    list_url = reverse(names['list'])\n\nPlease notice above that if you need to call the above template tag or function with the prefix you need to pass the parameter name i.e call it like ``{% set_urls_for_scaffold prefix=\"my_prefix\" as url_names %}``.\n\nFinally, if for some reason you'd prefer to access the url name directly without using the above you can generate the url name of a scaffolded view yourself using the following algorithm: ``{prefix}_{app_name}_{model_name}_{method}`` where the method is one of list/create/update/detail/delete. This could then be used directly with ``{% url %}`` or ``reverse``.\n\nSample configuration\n====================\n\nA sample config that uses a different form (``TestForm``), defines different behavior using mixins for create and update and needs a logged in user for update / delete / create (but anonymous users can list and detail) is the following:\n\n.. code-block:: python\n\n    from django.contrib.auth.decorators import login_required\n\n    class TestCrudManager(CrudManager):\n        prefix = 'test'\n        model = models.TestModel\n        form_class = forms.TestForm\n        create_mixins = (CreateMixin, )\n        update_mixins = (UpdateMixin, )\n        permissions = {\n            'update': login_required,\n            'delete': login_required,\n            'create': login_required,\n        }\n\nDjango/python version support\n=============================\n\nAs can be seen from tox.ini, the tests are run for Python 2.7 with Django\n1.8-1.11 and for Python 3.6 with Django 1.8-2.2, so these are the\nsupported versions. Python 3.7 should also work without problems, I just have\nPython 3.6 installed on system so I test with this version.\n\n\nSome trickery for django-generic-scaffold\n=========================================\n\nAs you can understand the main purpose of this library is to be able to add CRUD for as many models in your project with as little mental effort as possible. Here are some more tricks that you can use for this package:\n\n- For a model called ``Company`` I would use a prefix `\"companies/\"` (notice the slash at the end). This may seem a little strange at first but it creates nice looking urls like: ``/companies/`` (for list), ``/companies/detail/3`` (for detail) etc.\n\n-  Add a ``get_absolute_url`` method to your models to avoid having to declare where to redirect after a successful post when creating/editing instances. For example for the same Company model I'd do it like this:\n\n.. code-block:: python\n\n  from generic_scaffold import get_url_names\n\n  class Company(models.Model):\n\n    def get_absolute_url(self):\n        return reverse(get_url_names(prefix='companies/')['detail'], args=[self.id])\n\n- Continuing the above ``Company`` example you could add the following template tag to the company related templates:\n\n.. code-block:: python\n\n  {% load generic_scaffold_tags %}\n  [...]\n  {% set_urls_for_scaffold prefix=\"companies/\" as co_url_names %}\n\nAnd then you'd be able to access the urls like: ``{% url co_url_names.list %}`` or ``{% url co_url_names.detail %}``.\n\n- As mentioned above, If for some reason you'd prefer to access the url name directly you can generate yourself using the following algorithm: ``{prefix}_{app_name}_{model_name}_{method}``. Thus for our ``Company`` example, if the app name is called ``core`` the name of the list view would be ``companies/_core_company_detail`` (notice that the prefix is ``companies/``).\n\n- Sometimes django-generic-scaffold creates more views than you'd like! For example, for various reasons I usually avoid having delete views. Also for small models you may don't need a detail view. To \"disable\" a view you can use the following simple mixin:\n\n.. code-block:: python\n\n  from django.core.exceptions import PermissionDenied\n\n  class NotAllowedMixin(object, ):\n    def get_queryset(self):\n      raise PermissionDenied\n\nThen when you define your ``CrudManager`` use that as the mixin for your method, for example if you want to disable delete you'll add:\n``delete_mixins = (NotAllowedMixin, )``. I guess it would be better if the ``CrudManager`` had a way to actually define which methods you need but this solution is much easier (for me) :)\n\n- If you want to change the fields that appear in the Create/Update views you'll need to define a ``form_class``. Without it all fields will be visible.\n\nChangelog\n=========\n\nv.0.5.5\n-------\n\n- Add Django 3.0 to tox.ini\n\nv.0.5.4\n-------\n\n- Add Django 2.2 to tox.ini\n- Drop support for Django < 1.8\n\nv.0.5.3\n-------\n\n- Add Django 2.1 to tox.ini\n\nv.0.5.2\n-------\n\n- Upload readme to pypi\n\nv.0.5.0\n-------\n\n- Add support for Django 2\n\nv.0.4.1\n-------\n\n- Add support for Django 1.11\n\n\nv.0.4.0\n-------\n\n- Add support for Django 1.10\n- Allow overriding the parent classes of all views\n\nv.0.3.3\n-------\n\n- Fix bug with django 1.9 not containing the (url) patterns function\n\nv.0.3.2\n-------\n\n- Include templates in pip package (old version did not include them due to wrong setup.py configuration)\n\nv.0.3.1\n-------\n\n- Fix bug with '__all__' fields when adding form_class\n\nv.0.3.0\n-------\n\n- Drop support for Django 1.4 and 1.5\n- Add support for python 3 (python 3.5) for Django 1.8 and 1.9\n\nv.0.2.0\n-------\n\n- Braking changes for API and template tags\n- Add example project\n- Add support and configure tox for Django 1.9\n- A bunch of fallback templates have been added (``generic_scaffold/{list, detail, form, confirm_delete}.html``)\n- Use API (get_url_names) for tests and add it to docs\n- Add (url) prefix as an attribute to CrudManager and fix templatetag to use it.\n- Prefix has to be unique to make API and template tags easier to use\n- Model also has to be unique\n\nv.0.1.2\n-------\n\n- Add tests and integrate with tox\n- Add some basic templates (non-empty, mainly for tests)\n\nv.0.1.1\n-------\n\n- Add template tags to get crud urls\n\nv.0.1\n-----\n\n- Initial", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spapas/django-generic-scaffold/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-generic-scaffold", "package_url": "https://pypi.org/project/django-generic-scaffold/", "platform": "", "project_url": "https://pypi.org/project/django-generic-scaffold/", "project_urls": {"Homepage": "https://github.com/spapas/django-generic-scaffold/"}, "release_url": "https://pypi.org/project/django-generic-scaffold/0.5.5/", "requires_dist": null, "requires_python": "", "summary": "Generic scaffolding for Django", "version": "0.5.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/spapas/django-generic-scaffold\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/spapas/django-generic-scaffold.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd9eac478a88b1159831fd0c1ab1d9f3473fea9e/68747470733a2f2f7472617669732d63692e6f72672f7370617061732f646a616e676f2d67656e657269632d73636166666f6c642e7376673f6272616e63683d6d6173746572\"></a>\n<p>With django-generic-scaffold you can quickly create CRUD generic class based views for your models so you will have a basic CRUD interface to your models by writing only a couple of lines of extra code! The purpose of this CRUD interface is, as opposed to django-admin, to be used by users and not staff members.</p>\n<p>django-generic-scaffold is different from other scaffolding tools because it generates all views/url routes <em>on-the-fly</em> (by creating subclasses of normal django class-based views) and <em>not</em> by outputing python code. This way you can re-configure\nyour views anytime you wish.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>I\u2019ve added an example project of using django-generic-scaffold: <a href=\"https://github.com/spapas/generic-scaffold-demo\" rel=\"nofollow\">https://github.com/spapas/generic-scaffold-demo</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install it with <tt>pip install <span class=\"pre\">django-generic-scaffold</span></tt>, or if you want to use the latest version on github, try <tt>pip install <span class=\"pre\">git+https://github.com/spapas/django-generic-scaffold</span></tt>.</p>\n<p>If you want to use the template tags and the fallback templates of django-generic-scaffold, please put <tt>generic_scaffold</tt> in your <tt>INSTALLED_APPS</tt> setting. If you\ndon\u2019t need the template tags or fallback templates then no modifying of your settings is needed, just go ahead and use it!</p>\n</div>\n<div id=\"simple-usage\">\n<h2>Simple usage</h2>\n<p>Let\u2019s say you have defined a model named <tt>Book</tt> in your <tt>models.py</tt>. In your <tt>views.py</tt> or, even better in a module named <tt>scaffolding.py</tt> define a class that overrides <tt>CrudManager</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">generic_scaffold</span> <span class=\"kn\">import</span> <span class=\"n\">CrudManager</span>\n<span class=\"kn\">import</span> <span class=\"nn\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BookCrudManager</span><span class=\"p\">(</span><span class=\"n\">CrudManager</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Book</span>\n    <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'books'</span>\n</pre>\n<p>Now, include the following lines to the <tt>urls.py</tt> of your application:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scaffolding</span> <span class=\"kn\">import</span> <span class=\"n\">BookCrudManager</span> <span class=\"c1\"># or from views import BookCrudManager depending on where you've put it</span>\n<span class=\"n\">book_crud</span> <span class=\"o\">=</span> <span class=\"n\">BookCrudManager</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># [...] define your urlpatters here</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"n\">book_crud</span><span class=\"o\">.</span><span class=\"n\">get_url_patterns</span><span class=\"p\">()</span>\n</pre>\n<p>You may now visit <tt><span class=\"pre\">http://127.0.0.1:8000/books</span></tt> (or whatever was your <tt>prefix</tt>) to get a list of your <tt>Book</tt> instances.\nThe following methods have also been created:</p>\n<ul>\n<li>Create: <tt><span class=\"pre\">http://127.0.0.1:8000/bookscreate</span></tt></li>\n<li>Detail: <tt><span class=\"pre\">http://127.0.0.1:8000/booksdetail/&lt;id&gt;</span></tt></li>\n<li>Edit: <tt><span class=\"pre\">http://127.0.0.1:8000/booksupdate/&lt;id&gt;</span></tt></li>\n<li>Delete: <tt><span class=\"pre\">http://127.0.0.1:8000/booksdelete/&lt;id&gt;</span></tt></li>\n</ul>\n<p>If you don\u2019t do anything else, the default fallback templates will be used (they are ugly and should only be used for testing).\nYou should add a template named <tt>app_name/testmodel_list.html</tt> (which is the default template for the <tt>ListView</tt>) to override\nthe fallback templates - please read the next section for more info on that.</p>\n<p>The <tt>prefix</tt> option you set to the <tt>BooksCrudManager</tt> method will just prepend this prefix to all created urls\nand can also be used to get your url names for reversing.</p>\n</div>\n<div id=\"template-selection\">\n<h2>Template selection</h2>\n<p>There\u2019s a bunch of fallback templates that will be used if no other template can be used instead.\nThese template are for testing purposes only and should be overriden (unless you want to\nquickly see that everything works). Now, there are two ways you can redefine your templates:</p>\n<ul>\n<li>Implicitly: Just add appropriate templates depending on your app/model name (similarly to normal class-based-views), for example for <tt>app_name</tt> and <tt>TestModel</tt> you can add the following templates:</li>\n</ul>\n<p>For create/update add <tt>app_name/testmodel_form.html</tt>,\nfor list add <tt>app_name/testmodel_list.html</tt>,\nfor detail add <tt>app_name/testmodel_detail.html</tt>,\nfor delete add <tt>app_name/testmodel_confirm_delete.html</tt>.</p>\n<ul>\n<li>Explicitly: You can use the <tt>action_template_name</tt> configuration option to explicitly set which templates will be used for each action. The <tt>action</tt> could be <tt>list, detail, update, create</tt> or <tt>delete</tt>. So to configure the detail template name to be <tt>foo.html</tt> you\u2019ll use the option <tt>detail_template_name = 'foo.html'</tt>.</li>\n</ul>\n<p>So, the priority of templates is:</p>\n<ul>\n<li>Explicit templates (if configured)</li>\n<li>Implicit templates (if found)</li>\n<li>Fallback templates (as a last resort)</li>\n</ul>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Most of the time, you\u2019ll need to configure three things before using <tt><span class=\"pre\">django-generic-scaffold</span></tt>: The form class used for create and update views, the access permissions for each generic class based view and the templates that each view will use. These can be configured just by settings attributes to your <tt>CrudManager</tt> class.</p>\n<ul>\n<li>To configure the form class that will be used, use the option <tt>form_class</tt>.</li>\n<li>To set the permissions you have to set the <tt>permissions</tt> attribute to a dictionary of callables. The keys of that dictionary should be <tt>list, detail, update, create</tt> or <tt>delete</tt> while the values should be callables like <tt>login_required</tt> or <tt><span class=\"pre\">permission_required('permission')</span></tt> etc.</li>\n<li>To configure the template names explicitly, use <tt>action_template_name</tt>.</li>\n</ul>\n<p>For any other configuration of the generated class based views you\u2019ll need to define mixins that will be passed to the generated CBV classes as a list using the option <tt>action_mixins</tt> (again action is either <tt>list, detail</tt>, etc).</p>\n<p>Using mixins you can do whatever you want to your resulting CBV classes \u2013 also, by forcing you to use mixins django-generic-scaffold will help you follow bet code practices (DRY).</p>\n<p>However, sometimes mixins are not enough and you may need to completely override the parent Views to use something else. For this, you may set the <tt>action_view_class</tt> property to your own parent class view (i.e <tt>list_view_class = OverridenListView</tt>).</p>\n</div>\n<div id=\"api-and-template-tags\">\n<h2>API and template tags</h2>\n<p>If you want to use the provided template tags to your templates, you\u2019ll need to add <tt>{% load generic_scaffold_tags %}</tt> near\nthe top of your template. Then you may use <tt>set_urls_for_scaffold</tt> which will output the URLs of the\nselected scaffold depending on your configuration. This tag can receive\nthree parameters: The django app name, the model name and the prefix name. You can either use\nthe combination of app name / model name or just the prefix.</p>\n<p>It will return a dictionary with all\nthe scaffolded urls for this model. For example, to get the url names for the model <tt>test2</tt> (careful you must use the internal model name so for <tt>Test2</tt> use <tt>test2</tt> )\nbelonging to the app <tt>test1</tt> you\u2019ll use <tt>{% set_urls_for_scaffold \"test1\" \"test2\" as url_names %}</tt> and then you could use the attributes <tt>list,\ncreate, detail, update, delete</tt> of that object to reverse and get the corresponding urls, for example\nuse <tt>{% url url_names.list }</tt> to get the url for list.</p>\n<p>There\u2019s also a similar API function named <tt>get_url_names that</tt> you can use to get the urls for your scaffolds.</p>\n<p>For example, you can do something like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">generic_scaffold</span> <span class=\"kn\">import</span> <span class=\"n\">get_url_names</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.urlresolvers</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">get_url_names</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"n\">list_url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">[</span><span class=\"s1\">'list'</span><span class=\"p\">])</span>\n</pre>\n<p>Please notice above that if you need to call the above template tag or function with the prefix you need to pass the parameter name i.e call it like <tt>{% set_urls_for_scaffold <span class=\"pre\">prefix=\"my_prefix\"</span> as url_names %}</tt>.</p>\n<p>Finally, if for some reason you\u2019d prefer to access the url name directly without using the above you can generate the url name of a scaffolded view yourself using the following algorithm: <tt>{prefix}_{app_name}_{model_name}_{method}</tt> where the method is one of list/create/update/detail/delete. This could then be used directly with <tt>{% url %}</tt> or <tt>reverse</tt>.</p>\n</div>\n<div id=\"sample-configuration\">\n<h2>Sample configuration</h2>\n<p>A sample config that uses a different form (<tt>TestForm</tt>), defines different behavior using mixins for create and update and needs a logged in user for update / delete / create (but anonymous users can list and detail) is the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestCrudManager</span><span class=\"p\">(</span><span class=\"n\">CrudManager</span><span class=\"p\">):</span>\n    <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TestModel</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">TestForm</span>\n    <span class=\"n\">create_mixins</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">CreateMixin</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"n\">update_mixins</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">UpdateMixin</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"n\">permissions</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'update'</span><span class=\"p\">:</span> <span class=\"n\">login_required</span><span class=\"p\">,</span>\n        <span class=\"s1\">'delete'</span><span class=\"p\">:</span> <span class=\"n\">login_required</span><span class=\"p\">,</span>\n        <span class=\"s1\">'create'</span><span class=\"p\">:</span> <span class=\"n\">login_required</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"django-python-version-support\">\n<h2>Django/python version support</h2>\n<p>As can be seen from tox.ini, the tests are run for Python 2.7 with Django\n1.8-1.11 and for Python 3.6 with Django 1.8-2.2, so these are the\nsupported versions. Python 3.7 should also work without problems, I just have\nPython 3.6 installed on system so I test with this version.</p>\n</div>\n<div id=\"some-trickery-for-django-generic-scaffold\">\n<h2>Some trickery for django-generic-scaffold</h2>\n<p>As you can understand the main purpose of this library is to be able to add CRUD for as many models in your project with as little mental effort as possible. Here are some more tricks that you can use for this package:</p>\n<ul>\n<li>For a model called <tt>Company</tt> I would use a prefix <cite>\u201ccompanies/\u201d</cite> (notice the slash at the end). This may seem a little strange at first but it creates nice looking urls like: <tt>/companies/</tt> (for list), <tt>/companies/detail/3</tt> (for detail) etc.</li>\n<li>Add a <tt>get_absolute_url</tt> method to your models to avoid having to declare where to redirect after a successful post when creating/editing instances. For example for the same Company model I\u2019d do it like this:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">generic_scaffold</span> <span class=\"kn\">import</span> <span class=\"n\">get_url_names</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Company</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">get_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">get_url_names</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'companies/'</span><span class=\"p\">)[</span><span class=\"s1\">'detail'</span><span class=\"p\">],</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li>Continuing the above <tt>Company</tt> example you could add the following template tag to the company related templates:</li>\n</ul>\n<pre><span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">load</span> <span class=\"n\">generic_scaffold_tags</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">set_urls_for_scaffold</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"companies/\"</span> <span class=\"k\">as</span> <span class=\"n\">co_url_names</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n</pre>\n<p>And then you\u2019d be able to access the urls like: <tt>{% url co_url_names.list %}</tt> or <tt>{% url co_url_names.detail %}</tt>.</p>\n<ul>\n<li>As mentioned above, If for some reason you\u2019d prefer to access the url name directly you can generate yourself using the following algorithm: <tt>{prefix}_{app_name}_{model_name}_{method}</tt>. Thus for our <tt>Company</tt> example, if the app name is called <tt>core</tt> the name of the list view would be <tt>companies/_core_company_detail</tt> (notice that the prefix is <tt>companies/</tt>).</li>\n<li>Sometimes django-generic-scaffold creates more views than you\u2019d like! For example, for various reasons I usually avoid having delete views. Also for small models you may don\u2019t need a detail view. To \u201cdisable\u201d a view you can use the following simple mixin:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionDenied</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NotAllowedMixin</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">PermissionDenied</span>\n</pre>\n<p>Then when you define your <tt>CrudManager</tt> use that as the mixin for your method, for example if you want to disable delete you\u2019ll add:\n<tt>delete_mixins = (NotAllowedMixin, )</tt>. I guess it would be better if the <tt>CrudManager</tt> had a way to actually define which methods you need but this solution is much easier (for me) :)</p>\n<ul>\n<li>If you want to change the fields that appear in the Create/Update views you\u2019ll need to define a <tt>form_class</tt>. Without it all fields will be visible.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"v-0-5-5\">\n<h3>v.0.5.5</h3>\n<ul>\n<li>Add Django 3.0 to tox.ini</li>\n</ul>\n</div>\n<div id=\"v-0-5-4\">\n<h3>v.0.5.4</h3>\n<ul>\n<li>Add Django 2.2 to tox.ini</li>\n<li>Drop support for Django &lt; 1.8</li>\n</ul>\n</div>\n<div id=\"v-0-5-3\">\n<h3>v.0.5.3</h3>\n<ul>\n<li>Add Django 2.1 to tox.ini</li>\n</ul>\n</div>\n<div id=\"v-0-5-2\">\n<h3>v.0.5.2</h3>\n<ul>\n<li>Upload readme to pypi</li>\n</ul>\n</div>\n<div id=\"v-0-5-0\">\n<h3>v.0.5.0</h3>\n<ul>\n<li>Add support for Django 2</li>\n</ul>\n</div>\n<div id=\"v-0-4-1\">\n<h3>v.0.4.1</h3>\n<ul>\n<li>Add support for Django 1.11</li>\n</ul>\n</div>\n<div id=\"v-0-4-0\">\n<h3>v.0.4.0</h3>\n<ul>\n<li>Add support for Django 1.10</li>\n<li>Allow overriding the parent classes of all views</li>\n</ul>\n</div>\n<div id=\"v-0-3-3\">\n<h3>v.0.3.3</h3>\n<ul>\n<li>Fix bug with django 1.9 not containing the (url) patterns function</li>\n</ul>\n</div>\n<div id=\"v-0-3-2\">\n<h3>v.0.3.2</h3>\n<ul>\n<li>Include templates in pip package (old version did not include them due to wrong setup.py configuration)</li>\n</ul>\n</div>\n<div id=\"v-0-3-1\">\n<h3>v.0.3.1</h3>\n<ul>\n<li>Fix bug with \u2018__all__\u2019 fields when adding form_class</li>\n</ul>\n</div>\n<div id=\"v-0-3-0\">\n<h3>v.0.3.0</h3>\n<ul>\n<li>Drop support for Django 1.4 and 1.5</li>\n<li>Add support for python 3 (python 3.5) for Django 1.8 and 1.9</li>\n</ul>\n</div>\n<div id=\"v-0-2-0\">\n<h3>v.0.2.0</h3>\n<ul>\n<li>Braking changes for API and template tags</li>\n<li>Add example project</li>\n<li>Add support and configure tox for Django 1.9</li>\n<li>A bunch of fallback templates have been added (<tt><span class=\"pre\">generic_scaffold/{list,</span> detail, form, <span class=\"pre\">confirm_delete}.html</span></tt>)</li>\n<li>Use API (get_url_names) for tests and add it to docs</li>\n<li>Add (url) prefix as an attribute to CrudManager and fix templatetag to use it.</li>\n<li>Prefix has to be unique to make API and template tags easier to use</li>\n<li>Model also has to be unique</li>\n</ul>\n</div>\n<div id=\"v-0-1-2\">\n<h3>v.0.1.2</h3>\n<ul>\n<li>Add tests and integrate with tox</li>\n<li>Add some basic templates (non-empty, mainly for tests)</li>\n</ul>\n</div>\n<div id=\"v-0-1-1\">\n<h3>v.0.1.1</h3>\n<ul>\n<li>Add template tags to get crud urls</li>\n</ul>\n</div>\n<div id=\"v-0-1\">\n<h3>v.0.1</h3>\n<ul>\n<li>Initial</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6948705, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f9bf41b4cf8bcb096620aad1e7187bad", "sha256": "0a5b523dbba420be719b2cec692d6e246a9d526e87ad4c465ad72ed11a064d93"}, "downloads": -1, "filename": "django-generic-scaffold-0.1.zip", "has_sig": false, "md5_digest": "f9bf41b4cf8bcb096620aad1e7187bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5321, "upload_time": "2014-12-03T16:32:21", "upload_time_iso_8601": "2014-12-03T16:32:21.722235Z", "url": "https://files.pythonhosted.org/packages/f2/36/1740e5aebfd48e14530543807ecaa6baa41441e867ee2ccb6dfa58a364b3/django-generic-scaffold-0.1.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f9197cb348955853eaabfd080e81df92", "sha256": "bb4f04a9e006497b22c1f7cb8cb89ba1a736e4ed59db0158b94b71723863e2c9"}, "downloads": -1, "filename": "django-generic-scaffold-0.1.1.zip", "has_sig": false, "md5_digest": "f9197cb348955853eaabfd080e81df92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8164, "upload_time": "2014-12-05T17:02:04", "upload_time_iso_8601": "2014-12-05T17:02:04.135882Z", "url": "https://files.pythonhosted.org/packages/17/a7/9be71374ff6e5859cebbe568bcd922aea312b2f8ad33cd3eba18d35b73fe/django-generic-scaffold-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2c5f88c4f216bf5975d46d0a5d7ae824", "sha256": "e850120c2b1c0c3beaba344ffb88239bf45dc53fb3c6def4e4c1ebd6c82397f2"}, "downloads": -1, "filename": "django-generic-scaffold-0.1.2.zip", "has_sig": false, "md5_digest": "2c5f88c4f216bf5975d46d0a5d7ae824", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8911, "upload_time": "2015-07-08T10:26:24", "upload_time_iso_8601": "2015-07-08T10:26:24.902555Z", "url": "https://files.pythonhosted.org/packages/40/bd/7736a1c8b2696b3a30d926c7ace6786439521744cbe960545e4cb595f4a6/django-generic-scaffold-0.1.2.zip", "yanked": false}], "0.2.0": [], "0.3.0": [{"comment_text": "", "digests": {"md5": "b4dcbb908e36a1295b0585c46984490c", "sha256": "bf830a9ce3bb5571bba0235d597aa568e3b37ac97c17a437b56595aa90a7e6a7"}, "downloads": -1, "filename": "django-generic-scaffold-0.3.0.zip", "has_sig": false, "md5_digest": "b4dcbb908e36a1295b0585c46984490c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11362, "upload_time": "2016-03-07T18:53:03", "upload_time_iso_8601": "2016-03-07T18:53:03.810106Z", "url": "https://files.pythonhosted.org/packages/da/ed/c085560f6e5d8f2266263042cd3ec959b67744d5ea984acb253cdc97c182/django-generic-scaffold-0.3.0.zip", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "969d5dafeee1690093c5feee44e9b41d", "sha256": "c53c912fdad2a8c1d40487eb487082aeec506d26d966142dba0c7040ae1a1004"}, "downloads": -1, "filename": "django-generic-scaffold-0.3.1.zip", "has_sig": false, "md5_digest": "969d5dafeee1690093c5feee44e9b41d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11535, "upload_time": "2016-06-14T08:40:52", "upload_time_iso_8601": "2016-06-14T08:40:52.715210Z", "url": "https://files.pythonhosted.org/packages/88/8c/f379f6ed7af328f3d4c303051b8ab4c2e1c5999cc3fbe9f54d007445c619/django-generic-scaffold-0.3.1.zip", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "2b29b05e05e002d818dca033fa0be06e", "sha256": "3de25f0a7b8e8cc2071b84fb8e202e4d04ab5f22ef461d86480e256875d3051d"}, "downloads": -1, "filename": "django-generic-scaffold-0.3.2.zip", "has_sig": false, "md5_digest": "2b29b05e05e002d818dca033fa0be06e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15731, "upload_time": "2016-06-14T09:10:27", "upload_time_iso_8601": "2016-06-14T09:10:27.662600Z", "url": "https://files.pythonhosted.org/packages/5b/4a/0cdaefa5806239fc89dd691ad54fa7a886a20cb683d9e09a4848249a2324/django-generic-scaffold-0.3.2.zip", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "24585a38c633a3c795b0e72da33d66ab", "sha256": "baa690ee42006662ac60b264b0a519260155a50a35039d8276f4afc972614c78"}, "downloads": -1, "filename": "django-generic-scaffold-0.3.3.zip", "has_sig": false, "md5_digest": "24585a38c633a3c795b0e72da33d66ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15799, "upload_time": "2016-08-02T12:51:45", "upload_time_iso_8601": "2016-08-02T12:51:45.717174Z", "url": "https://files.pythonhosted.org/packages/65/e1/e9b9c4dfb265d20108cd3c19a04595516d0ff97481f478fd86f595d9dd66/django-generic-scaffold-0.3.3.zip", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "976de3ed829c9b882931d5c076a159a7", "sha256": "6d93458cb8e951f27c6f22d442ca8c2fc08d3cc6eb87edb700a1a7eab8c83c80"}, "downloads": -1, "filename": "django-generic-scaffold-0.4.0.tar.gz", "has_sig": false, "md5_digest": "976de3ed829c9b882931d5c076a159a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9937, "upload_time": "2016-10-07T12:16:19", "upload_time_iso_8601": "2016-10-07T12:16:19.480391Z", "url": "https://files.pythonhosted.org/packages/40/7c/7d0449aca910ee0127dba6e12c73df1778052662d7377359b826672ad963/django-generic-scaffold-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "408b42744b6f6791306397fdb50877c2", "sha256": "23d8ae57267a9a55cba97bf0408c3efec75ec1e683b97c3e53b68389e437d38a"}, "downloads": -1, "filename": "django-generic-scaffold-0.4.1.tar.gz", "has_sig": false, "md5_digest": "408b42744b6f6791306397fdb50877c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9943, "upload_time": "2017-08-09T09:59:37", "upload_time_iso_8601": "2017-08-09T09:59:37.042845Z", "url": "https://files.pythonhosted.org/packages/ff/fa/8ca0a6ca698b6757dd56689849519cd394877a67a6428e81b2a6ae646a24/django-generic-scaffold-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "93eaeb7f581a52709926209527028535", "sha256": "a259223102e0f756153aacb17625a6c8e13b704fa3f79bcf11a780487afe1a3a"}, "downloads": -1, "filename": "django-generic-scaffold-0.5.0.tar.gz", "has_sig": false, "md5_digest": "93eaeb7f581a52709926209527028535", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9972, "upload_time": "2018-01-16T22:01:53", "upload_time_iso_8601": "2018-01-16T22:01:53.594275Z", "url": "https://files.pythonhosted.org/packages/7e/88/4c5a0addc1979ef06dabab854124cfa298ee96da58fc4101af1884f9c0f3/django-generic-scaffold-0.5.0.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "01c914f25a66b9dd88d069044cb83363", "sha256": "383320f4448b39f32ac0daf7e2b2a3500c90ac56ca96776a889bbecc2a00d435"}, "downloads": -1, "filename": "django-generic-scaffold-0.5.2.tar.gz", "has_sig": false, "md5_digest": "01c914f25a66b9dd88d069044cb83363", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14060, "upload_time": "2018-01-16T22:39:55", "upload_time_iso_8601": "2018-01-16T22:39:55.180773Z", "url": "https://files.pythonhosted.org/packages/89/84/56a8b9747e8732d49a821ee27e85250895e2211cf7b4edb2756f0f3c305f/django-generic-scaffold-0.5.2.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "54e12f98e8d56249ce989f312c5a3ece", "sha256": "55abe941f6b937e6375de4496f6074fdc6af29271d42e2e46cfd922b122139e2"}, "downloads": -1, "filename": "django-generic-scaffold-0.5.4.tar.gz", "has_sig": false, "md5_digest": "54e12f98e8d56249ce989f312c5a3ece", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14451, "upload_time": "2019-04-25T09:31:31", "upload_time_iso_8601": "2019-04-25T09:31:31.046775Z", "url": "https://files.pythonhosted.org/packages/9c/42/b0fbda757e6484b67cdba8ab16d4f575644d9f03a851c1893ed1befce0ca/django-generic-scaffold-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "7abdc463aed4f0ba23097600f2a13597", "sha256": "689685862f83558263c00454ad9b34f2efa24e53a8d91cfed870a19b4d838ed4"}, "downloads": -1, "filename": "django-generic-scaffold-0.5.5.tar.gz", "has_sig": false, "md5_digest": "7abdc463aed4f0ba23097600f2a13597", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16746, "upload_time": "2020-04-04T08:48:03", "upload_time_iso_8601": "2020-04-04T08:48:03.116433Z", "url": "https://files.pythonhosted.org/packages/e4/5b/38c4b49d6d58ce657b4b96eeceb7658ec268aaa750ab652ab386dff61fac/django-generic-scaffold-0.5.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7abdc463aed4f0ba23097600f2a13597", "sha256": "689685862f83558263c00454ad9b34f2efa24e53a8d91cfed870a19b4d838ed4"}, "downloads": -1, "filename": "django-generic-scaffold-0.5.5.tar.gz", "has_sig": false, "md5_digest": "7abdc463aed4f0ba23097600f2a13597", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16746, "upload_time": "2020-04-04T08:48:03", "upload_time_iso_8601": "2020-04-04T08:48:03.116433Z", "url": "https://files.pythonhosted.org/packages/e4/5b/38c4b49d6d58ce657b4b96eeceb7658ec268aaa750ab652ab386dff61fac/django-generic-scaffold-0.5.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:54 2020"}