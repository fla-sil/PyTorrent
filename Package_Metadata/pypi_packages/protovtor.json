{"info": {"author": "konglw", "author_email": "konglwbox@foxmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Protovtor is a Python data conversion and validation library\n\n[![Build Status](https://travis-ci.org/konglwbox/protovtor.svg?branch=master)](https://travis-ci.org/konglwbox/protovtor?branch=master)\n[![Coverage Status](https://coveralls.io/repos/github/konglwbox/protovtor/badge.svg?branch=master)](https://coveralls.io/github/konglwbox/protovtor?branch=master)\n\nProtovtor is a simple and flexible data conversion and validation library for Python. It is designed for converting and\nvalidating data coming into Python such as JSON/YAML(or something else), and convert them to Python data-types.\n\nGoals:\n1. Simple to use.\n2. Support complex data.\n3. Provide useful error messages.\n\n# Installation\nUse pip or easy_install:  \n`pip install protovtor`\n\nTested with Python 2.7, 3.3, 3.4, 3.5, 3.6.\n\n# Quick start\n```python\n# coding: utf-8\nfrom protovtor import (Protocol, StringField, IntegerField, FloatField, LengthLimitTextField, BooleanField,\n                       DateTimeField, PlaceField, FieldList, UniqueFieldList, ProtocolField, validators)\nimport json\n\n# The usage of 'Field' and 'Validator'.\n# It is usually used for converting and validating fundamental type value.\n\nf = StringField(validators=[validators.Length(min=0, max=4), validators.AnyOf([\"9527\", \"8080\"])])\n\nvalue = 9527\nf.process(value)\n\nif f.validate():\n    assert f.value == \"9527\"\n\nvalue = 9090\nf.process(value)\n\nif not f.validate():\n    print(f.error)  # Must be one of ['9527', '8080']\n\n\n# The usage of 'Protocol'.\n# It is usually used for converting and validating composite type value.\n\nclass UserProto(Protocol):\n    field_username = StringField(validators=[validators.DataRequired(), validators.Length(max=100)])\n    field_age = IntegerField(validators=[validators.DataRequired(), validators.NumberRange(max=28)])\n    # The 'discard=True' mean that the 'email' will not in the result data if 'nullable=True'.\n    field_email = StringField(validators=[validators.DataRequired()], nullable=True, discard=True)\n    field_phone = StringField(validators=[validators.DataRequired()], nullable=True, discard=False)\n    # The 'sex' in result data will be used the default value if 'nullable=False'.\n    field_sex = StringField(validators=[validators.AnyOf([\"man\", \"woman\"])], nullable=False, default=\"woman\")\n\n\ndata = {\"username\": \"VeVe\", \"age\": 28, \"email\": None, \"phone\": None, \"sex\": None}\n\np = UserProto(data)\nif p.validate():\n    print(p.data)  # {'phone': None, 'age': 28, 'sex': 'woman', 'username': 'VeVe'}\n\ndata = {\"username\": \"VeVe\", \"age\": 30}  # You can omit the none values.\n\np = UserProto(data)\nif not p.validate():\n    print(p.error)  # {'age': 'Can not greater then 28'}\n\n\n# A complex example.\n# This example has been used most of the features.\n\nclass AppProto(Protocol):\n    \"\"\"\n    App\n    \"\"\"\n    field_name = StringField(validators=[validators.Length(max=200), validators.DataRequired()])\n    field_version = StringField(validators=[validators.DataRequired()])\n\n\nclass OSProto(AppProto):\n    \"\"\"\n    OS\n    \"\"\"\n    field_apps = FieldList(\n        ProtocolField(AppProto),\n        validators=[validators.DataRequired()]\n    )\n\n    def post_validate(self, fields):\n        \"\"\"\n        Overwrite super class's method. This method will be called before the method 'validate' returned.\n\n        If you expect to have a custom validation with the fields, you should do it in this method.\n        \"\"\"\n        # Get the field object by the key.\n        field_version = fields[\"version\"]\n        # Get the value of the field.\n        field_version_value = field_version.value\n\n        # To have a custom validation.\n        if int(field_version_value.split(\".\")[1]) < 13:\n            # Remember to set 'error'.\n            field_version.error = \"The version is too old\"\n            return False\n\n        return True\n\n\nclass CPUProto(Protocol):\n    \"\"\"\n    CPU\n    \"\"\"\n    field_processor = StringField(validators=[validators.DataRequired()])\n    field_speed = FloatField(validators=[validators.AnyOf([2.3, 3.1])])\n\n\nclass DisplayProto(Protocol):\n    \"\"\"\n    Display\n    \"\"\"\n    field_type = StringField(validators=[validators.DataRequired()])\n    field_resolutions = UniqueFieldList(\n        StringField(validators=[validators.Regular(\"[\\d]+ by [\\d]+\")]),\n        validators=[validators.Length(min=3)]\n    )\n    field_ppi = IntegerField(validators=[validators.DataRequired()])\n\n\nclass ProductProto(Protocol):\n    \"\"\"\n    Product\n    \"\"\"\n    field_model = StringField(validators=[validators.Length(max=200), validators.DataRequired()])\n    field_touch_bar = BooleanField()\n    field_size = IntegerField(validators=[validators.AnyOf([13, 15])])\n    field_os = ProtocolField(OSProto)\n    field_cpu = ProtocolField(CPUProto)\n    field_ssd = IntegerField(validators=[validators.NumberRange(min=128, max=512)])\n    field_memory = IntegerField(validators=[validators.DataRequired()])\n    field_display = PlaceField(ProtocolField(DisplayProto), handler=json.loads)\n    field_buy_date = DateTimeField(format=\"%Y-%m-%d %H:%M:%S\")\n    field_doc = LengthLimitTextField(limit=10)\n\n    def post_data(self, data):\n        \"\"\"\n        Overwrite super class's method. This method will be called before the method 'data' returned.\n\n        If you expect to convert the data structure or something else, you should do it in this method, because\n        the parameter 'data' has been converted and validated successfully.\n        \"\"\"\n        # Add an unit of 'G'.\n        data[\"ssd\"] = str(data[\"ssd\"]) + \"G\"\n        # To convert from 'GB' to 'MB'.\n        data[\"memory\"] = data[\"memory\"] * 1024\n\n        return data\n\n\ndata = {\n    \"model\": \"MacBook Pro\",  # str, max length: 200, required: True.\n    \"touch_bar\": True,  # bool.\n    \"size\": 15,  # int, one of: (13, 15).\n    \"os\": {  # dict.\n        \"name\": \"macOS\",  # str, max length: 200, required: True.\n        \"version\": \"10.13.4\",  # str, required: True; We expect to validate whether the version is old.\n        \"apps\": [{  # list, required: True.\n            \"name\": \"Numbers\",  # str, max length: 200, required: True.\n            \"version\": \"5.0.1\"  # str, required: True.\n        }, {\n            \"name\": \"Pages\",\n            \"version\": \"7.0.1\"\n        }]\n    },\n    \"cpu\": {\n        \"processor\": \"Intel Core i5\",  # str, required: True.\n        \"speed\": 3.1  # float, one of: (2.3, 3.1).\n    },\n    \"ssd\": \"256\",  # int, min: 128, max: 512; We expect to add an unit of 'G'.\n    \"memory\": \"16\",  # int, required: True; We expect to convert from 'GB' to 'MB'.\n    \"display\": json.dumps({  # str; We expect to convert it from json string to dict.\n        \"type\": \"retina\",  # str, required: True.\n        \"resolutions\": [  # list, max length: 3; We expect to remove repeated value.\n            \"1680 by 1050\",\n            \"1440 by 900\",\n            \"1440 by 900\",  # A repeated value.\n            \"1024 by 640\"\n        ],\n        \"ppi\": 227  # int, required: True.\n    }),\n    \"doc\": \"A very long Directions for use\",  # str; We expect to cut more than 10 chars.\n    \"buy_date\": \"2018-05-21 16:50:06\"  # datetime.\n}\n\np = ProductProto(data)\nif p.validate():\n    print(p.data)\n    # {\n    #     \"cpu\": {\n    #         \"processor\": \"Intel Core i5\",\n    #         \"speed\": 3.1\n    #     },\n    #     \"display\": {\n    #         \"ppi\": 227,\n    #         \"resolutions\": [\n    #             \"1680 by 1050\",\n    #             \"1024 by 640\",\n    #             \"1440 by 900\"\n    #         ],\n    #         \"type\": \"retina\"\n    #     },\n    #     \"doc\": \"A very lon\",\n    #     \"memory\": 16384,\n    #     \"model\": \"MacBook Pro\",\n    #     \"os\": {\n    #         \"apps\": [\n    #             {\n    #                 \"name\": \"Numbers\",\n    #                 \"version\": \"5.0.1\"\n    #             },\n    #             {\n    #                 \"name\": \"Pages\",\n    #                 \"version\": \"7.0.1\"\n    #             }\n    #         ],\n    #         \"name\": \"macOS\",\n    #         \"version\": \"10.13.4\"\n    #     },\n    #     \"size\": 15,\n    #     \"ssd\": \"256G\",\n    #     \"buy_date\": datetime.datetime(2018, 5, 21, 16, 50, 6),\n    #     \"touch_bar\": True\n    # }\n\n\n# Custom 'Field'.\n# This is an example of how to customize a 'UpperStringField'.\n\nclass UpperStringField(StringField):\n    def process(self, value):\n        super(UpperStringField, self).process(value)\n\n        self.value = self.value.upper()\n\n\nf = UpperStringField()\n\nvalue = \"test\"\nf.process(value)\n\nif f.validate():\n    assert f.value == \"TEST\"\n\n\n# Custom 'Validator'.\n# This is an example of how to customize a 'UpperRequired'.\n\nclass UpperRequired(validators.Validator):\n    def validate(self, value):\n        if not value.isupper():\n            raise ValueError(\"The value is not upper\")\n\n\nf = StringField(validators=[UpperRequired()])\n\nvalue = \"test\"\nf.process(value)\n\nif not f.validate():\n    print(f.error)  # The value is not upper\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/konglwbox/protovtor", "keywords": "protovtor,json,conversion,validation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "protovtor", "package_url": "https://pypi.org/project/protovtor/", "platform": "", "project_url": "https://pypi.org/project/protovtor/", "project_urls": {"Homepage": "https://github.com/konglwbox/protovtor"}, "release_url": "https://pypi.org/project/protovtor/1.0.2/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Simple data conversion and validation library", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Protovtor is a Python data conversion and validation library</h1>\n<p><a href=\"https://travis-ci.org/konglwbox/protovtor?branch=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e480dcb92376b2ee5ba2b1cd60726a71d1f17eb/68747470733a2f2f7472617669732d63692e6f72672f6b6f6e676c77626f782f70726f746f76746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/konglwbox/protovtor?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b03ded5aa4ad86e43dcb25e2287df618bdbacba/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b6f6e676c77626f782f70726f746f76746f722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Protovtor is a simple and flexible data conversion and validation library for Python. It is designed for converting and\nvalidating data coming into Python such as JSON/YAML(or something else), and convert them to Python data-types.</p>\n<p>Goals:</p>\n<ol>\n<li>Simple to use.</li>\n<li>Support complex data.</li>\n<li>Provide useful error messages.</li>\n</ol>\n<h1>Installation</h1>\n<p>Use pip or easy_install:<br>\n<code>pip install protovtor</code></p>\n<p>Tested with Python 2.7, 3.3, 3.4, 3.5, 3.6.</p>\n<h1>Quick start</h1>\n<pre><span class=\"c1\"># coding: utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">protovtor</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">,</span> <span class=\"n\">StringField</span><span class=\"p\">,</span> <span class=\"n\">IntegerField</span><span class=\"p\">,</span> <span class=\"n\">FloatField</span><span class=\"p\">,</span> <span class=\"n\">LengthLimitTextField</span><span class=\"p\">,</span> <span class=\"n\">BooleanField</span><span class=\"p\">,</span>\n                       <span class=\"n\">DateTimeField</span><span class=\"p\">,</span> <span class=\"n\">PlaceField</span><span class=\"p\">,</span> <span class=\"n\">FieldList</span><span class=\"p\">,</span> <span class=\"n\">UniqueFieldList</span><span class=\"p\">,</span> <span class=\"n\">ProtocolField</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\"># The usage of 'Field' and 'Validator'.</span>\n<span class=\"c1\"># It is usually used for converting and validating fundamental type value.</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">AnyOf</span><span class=\"p\">([</span><span class=\"s2\">\"9527\"</span><span class=\"p\">,</span> <span class=\"s2\">\"8080\"</span><span class=\"p\">])])</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">9527</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s2\">\"9527\"</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">9090</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">)</span>  <span class=\"c1\"># Must be one of ['9527', '8080']</span>\n\n\n<span class=\"c1\"># The usage of 'Protocol'.</span>\n<span class=\"c1\"># It is usually used for converting and validating composite type value.</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserProto</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"n\">field_username</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">(),</span> <span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)])</span>\n    <span class=\"n\">field_age</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">(),</span> <span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">NumberRange</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">28</span><span class=\"p\">)])</span>\n    <span class=\"c1\"># The 'discard=True' mean that the 'email' will not in the result data if 'nullable=True'.</span>\n    <span class=\"n\">field_email</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()],</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">discard</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">field_phone</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()],</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">discard</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\"># The 'sex' in result data will be used the default value if 'nullable=False'.</span>\n    <span class=\"n\">field_sex</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">AnyOf</span><span class=\"p\">([</span><span class=\"s2\">\"man\"</span><span class=\"p\">,</span> <span class=\"s2\">\"woman\"</span><span class=\"p\">])],</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"woman\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"VeVe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s2\">\"phone\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s2\">\"sex\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">UserProto</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># {'phone': None, 'age': 28, 'sex': 'woman', 'username': 'VeVe'}</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"VeVe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>  <span class=\"c1\"># You can omit the none values.</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">UserProto</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">)</span>  <span class=\"c1\"># {'age': 'Can not greater then 28'}</span>\n\n\n<span class=\"c1\"># A complex example.</span>\n<span class=\"c1\"># This example has been used most of the features.</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AppProto</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    App</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">field_name</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()])</span>\n    <span class=\"n\">field_version</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()])</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">OSProto</span><span class=\"p\">(</span><span class=\"n\">AppProto</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    OS</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">field_apps</span> <span class=\"o\">=</span> <span class=\"n\">FieldList</span><span class=\"p\">(</span>\n        <span class=\"n\">ProtocolField</span><span class=\"p\">(</span><span class=\"n\">AppProto</span><span class=\"p\">),</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post_validate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Overwrite super class's method. This method will be called before the method 'validate' returned.</span>\n\n<span class=\"sd\">        If you expect to have a custom validation with the fields, you should do it in this method.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Get the field object by the key.</span>\n        <span class=\"n\">field_version</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s2\">\"version\"</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Get the value of the field.</span>\n        <span class=\"n\">field_version_value</span> <span class=\"o\">=</span> <span class=\"n\">field_version</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n        <span class=\"c1\"># To have a custom validation.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">field_version_value</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\".\"</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"mi\">13</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Remember to set 'error'.</span>\n            <span class=\"n\">field_version</span><span class=\"o\">.</span><span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"s2\">\"The version is too old\"</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CPUProto</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    CPU</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">field_processor</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()])</span>\n    <span class=\"n\">field_speed</span> <span class=\"o\">=</span> <span class=\"n\">FloatField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">AnyOf</span><span class=\"p\">([</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"mf\">3.1</span><span class=\"p\">])])</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DisplayProto</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Display</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">field_type</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()])</span>\n    <span class=\"n\">field_resolutions</span> <span class=\"o\">=</span> <span class=\"n\">UniqueFieldList</span><span class=\"p\">(</span>\n        <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Regular</span><span class=\"p\">(</span><span class=\"s2\">\"[\\d]+ by [\\d]+\"</span><span class=\"p\">)]),</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">field_ppi</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()])</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductProto</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Product</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">field_model</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()])</span>\n    <span class=\"n\">field_touch_bar</span> <span class=\"o\">=</span> <span class=\"n\">BooleanField</span><span class=\"p\">()</span>\n    <span class=\"n\">field_size</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">AnyOf</span><span class=\"p\">([</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">])])</span>\n    <span class=\"n\">field_os</span> <span class=\"o\">=</span> <span class=\"n\">ProtocolField</span><span class=\"p\">(</span><span class=\"n\">OSProto</span><span class=\"p\">)</span>\n    <span class=\"n\">field_cpu</span> <span class=\"o\">=</span> <span class=\"n\">ProtocolField</span><span class=\"p\">(</span><span class=\"n\">CPUProto</span><span class=\"p\">)</span>\n    <span class=\"n\">field_ssd</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">NumberRange</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">)])</span>\n    <span class=\"n\">field_memory</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">DataRequired</span><span class=\"p\">()])</span>\n    <span class=\"n\">field_display</span> <span class=\"o\">=</span> <span class=\"n\">PlaceField</span><span class=\"p\">(</span><span class=\"n\">ProtocolField</span><span class=\"p\">(</span><span class=\"n\">DisplayProto</span><span class=\"p\">),</span> <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">)</span>\n    <span class=\"n\">field_buy_date</span> <span class=\"o\">=</span> <span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:%S\"</span><span class=\"p\">)</span>\n    <span class=\"n\">field_doc</span> <span class=\"o\">=</span> <span class=\"n\">LengthLimitTextField</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Overwrite super class's method. This method will be called before the method 'data' returned.</span>\n\n<span class=\"sd\">        If you expect to convert the data structure or something else, you should do it in this method, because</span>\n<span class=\"sd\">        the parameter 'data' has been converted and validated successfully.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Add an unit of 'G'.</span>\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"ssd\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"ssd\"</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s2\">\"G\"</span>\n        <span class=\"c1\"># To convert from 'GB' to 'MB'.</span>\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"memory\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"memory\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">data</span>\n\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"model\"</span><span class=\"p\">:</span> <span class=\"s2\">\"MacBook Pro\"</span><span class=\"p\">,</span>  <span class=\"c1\"># str, max length: 200, required: True.</span>\n    <span class=\"s2\">\"touch_bar\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># bool.</span>\n    <span class=\"s2\">\"size\"</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"c1\"># int, one of: (13, 15).</span>\n    <span class=\"s2\">\"os\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"c1\"># dict.</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"macOS\"</span><span class=\"p\">,</span>  <span class=\"c1\"># str, max length: 200, required: True.</span>\n        <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10.13.4\"</span><span class=\"p\">,</span>  <span class=\"c1\"># str, required: True; We expect to validate whether the version is old.</span>\n        <span class=\"s2\">\"apps\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span>  <span class=\"c1\"># list, required: True.</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Numbers\"</span><span class=\"p\">,</span>  <span class=\"c1\"># str, max length: 200, required: True.</span>\n            <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5.0.1\"</span>  <span class=\"c1\"># str, required: True.</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Pages\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"7.0.1\"</span>\n        <span class=\"p\">}]</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"cpu\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"processor\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Intel Core i5\"</span><span class=\"p\">,</span>  <span class=\"c1\"># str, required: True.</span>\n        <span class=\"s2\">\"speed\"</span><span class=\"p\">:</span> <span class=\"mf\">3.1</span>  <span class=\"c1\"># float, one of: (2.3, 3.1).</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"ssd\"</span><span class=\"p\">:</span> <span class=\"s2\">\"256\"</span><span class=\"p\">,</span>  <span class=\"c1\"># int, min: 128, max: 512; We expect to add an unit of 'G'.</span>\n    <span class=\"s2\">\"memory\"</span><span class=\"p\">:</span> <span class=\"s2\">\"16\"</span><span class=\"p\">,</span>  <span class=\"c1\"># int, required: True; We expect to convert from 'GB' to 'MB'.</span>\n    <span class=\"s2\">\"display\"</span><span class=\"p\">:</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span>  <span class=\"c1\"># str; We expect to convert it from json string to dict.</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"retina\"</span><span class=\"p\">,</span>  <span class=\"c1\"># str, required: True.</span>\n        <span class=\"s2\">\"resolutions\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>  <span class=\"c1\"># list, max length: 3; We expect to remove repeated value.</span>\n            <span class=\"s2\">\"1680 by 1050\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"1440 by 900\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"1440 by 900\"</span><span class=\"p\">,</span>  <span class=\"c1\"># A repeated value.</span>\n            <span class=\"s2\">\"1024 by 640\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"s2\">\"ppi\"</span><span class=\"p\">:</span> <span class=\"mi\">227</span>  <span class=\"c1\"># int, required: True.</span>\n    <span class=\"p\">}),</span>\n    <span class=\"s2\">\"doc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A very long Directions for use\"</span><span class=\"p\">,</span>  <span class=\"c1\"># str; We expect to cut more than 10 chars.</span>\n    <span class=\"s2\">\"buy_date\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2018-05-21 16:50:06\"</span>  <span class=\"c1\"># datetime.</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ProductProto</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"c1\"># {</span>\n    <span class=\"c1\">#     \"cpu\": {</span>\n    <span class=\"c1\">#         \"processor\": \"Intel Core i5\",</span>\n    <span class=\"c1\">#         \"speed\": 3.1</span>\n    <span class=\"c1\">#     },</span>\n    <span class=\"c1\">#     \"display\": {</span>\n    <span class=\"c1\">#         \"ppi\": 227,</span>\n    <span class=\"c1\">#         \"resolutions\": [</span>\n    <span class=\"c1\">#             \"1680 by 1050\",</span>\n    <span class=\"c1\">#             \"1024 by 640\",</span>\n    <span class=\"c1\">#             \"1440 by 900\"</span>\n    <span class=\"c1\">#         ],</span>\n    <span class=\"c1\">#         \"type\": \"retina\"</span>\n    <span class=\"c1\">#     },</span>\n    <span class=\"c1\">#     \"doc\": \"A very lon\",</span>\n    <span class=\"c1\">#     \"memory\": 16384,</span>\n    <span class=\"c1\">#     \"model\": \"MacBook Pro\",</span>\n    <span class=\"c1\">#     \"os\": {</span>\n    <span class=\"c1\">#         \"apps\": [</span>\n    <span class=\"c1\">#             {</span>\n    <span class=\"c1\">#                 \"name\": \"Numbers\",</span>\n    <span class=\"c1\">#                 \"version\": \"5.0.1\"</span>\n    <span class=\"c1\">#             },</span>\n    <span class=\"c1\">#             {</span>\n    <span class=\"c1\">#                 \"name\": \"Pages\",</span>\n    <span class=\"c1\">#                 \"version\": \"7.0.1\"</span>\n    <span class=\"c1\">#             }</span>\n    <span class=\"c1\">#         ],</span>\n    <span class=\"c1\">#         \"name\": \"macOS\",</span>\n    <span class=\"c1\">#         \"version\": \"10.13.4\"</span>\n    <span class=\"c1\">#     },</span>\n    <span class=\"c1\">#     \"size\": 15,</span>\n    <span class=\"c1\">#     \"ssd\": \"256G\",</span>\n    <span class=\"c1\">#     \"buy_date\": datetime.datetime(2018, 5, 21, 16, 50, 6),</span>\n    <span class=\"c1\">#     \"touch_bar\": True</span>\n    <span class=\"c1\"># }</span>\n\n\n<span class=\"c1\"># Custom 'Field'.</span>\n<span class=\"c1\"># This is an example of how to customize a 'UpperStringField'.</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UpperStringField</span><span class=\"p\">(</span><span class=\"n\">StringField</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">UpperStringField</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">UpperStringField</span><span class=\"p\">()</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">\"test\"</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s2\">\"TEST\"</span>\n\n\n<span class=\"c1\"># Custom 'Validator'.</span>\n<span class=\"c1\"># This is an example of how to customize a 'UpperRequired'.</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UpperRequired</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">Validator</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">isupper</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"The value is not upper\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">UpperRequired</span><span class=\"p\">()])</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">\"test\"</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">)</span>  <span class=\"c1\"># The value is not upper</span>\n</pre>\n\n          </div>"}, "last_serial": 4443076, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "af253bdf0b685b5ce0059c2d91b3ec95", "sha256": "aebc52b800d2ea97dfb851fd96741e4ba70849b843e25d2cc5bd4b03e9e3fb6b"}, "downloads": -1, "filename": "protovtor-0.0.10.tar.gz", "has_sig": false, "md5_digest": "af253bdf0b685b5ce0059c2d91b3ec95", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 11744, "upload_time": "2018-05-23T03:43:27", "upload_time_iso_8601": "2018-05-23T03:43:27.691838Z", "url": "https://files.pythonhosted.org/packages/c5/7a/e18b0f36482699cb36d6538deb0bf93fd5a0f8ed13b21f1cb2cc45b2e7e8/protovtor-0.0.10.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "72903fbb9bbd543686d008b7844ffbc8", "sha256": "37c0906f8773f4fd8a3ad6e76645b7b02d723162b26bfb45699c0a2158a6511e"}, "downloads": -1, "filename": "protovtor-0.0.9.tar.gz", "has_sig": false, "md5_digest": "72903fbb9bbd543686d008b7844ffbc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 11431, "upload_time": "2018-05-22T09:32:27", "upload_time_iso_8601": "2018-05-22T09:32:27.707671Z", "url": "https://files.pythonhosted.org/packages/9e/10/29255cc7ffce2cf25fb2be0b11fd14c2af3b23fbbc6e1790869e0a01bb43/protovtor-0.0.9.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5a4a234e318902b105c4b56bcb3a95ab", "sha256": "f7577665bee5be12f3605f32ab8c45cb166f4d58ffbd97ea4553e8f0b3823c81"}, "downloads": -1, "filename": "protovtor-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5a4a234e318902b105c4b56bcb3a95ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 10101, "upload_time": "2018-09-25T03:05:25", "upload_time_iso_8601": "2018-09-25T03:05:25.981140Z", "url": "https://files.pythonhosted.org/packages/f6/20/e84217685d59f53d3ff58d19979cccbc07fb96100498317ad260d30c3193/protovtor-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f21150cd8b3480759fa7b1224856fa8", "sha256": "2f4e8104aa4b529a62088a719381cddacc713a0777ea6863844558b3a26ed733"}, "downloads": -1, "filename": "protovtor-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1f21150cd8b3480759fa7b1224856fa8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 11621, "upload_time": "2018-09-25T03:05:27", "upload_time_iso_8601": "2018-09-25T03:05:27.755397Z", "url": "https://files.pythonhosted.org/packages/c8/12/93e116f27594b6884c4f5fb22ac4a8694e0e2b78469072bea09ea40b23e1/protovtor-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "378af1188680904b8f6babe6b4505c97", "sha256": "caf73de16bed29522af437ea16a4eb529a512ca5807a5818a85d840d20e76a68"}, "downloads": -1, "filename": "protovtor-1.0.2.tar.gz", "has_sig": false, "md5_digest": "378af1188680904b8f6babe6b4505c97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 11651, "upload_time": "2018-11-02T03:30:26", "upload_time_iso_8601": "2018-11-02T03:30:26.148858Z", "url": "https://files.pythonhosted.org/packages/7d/03/1c4fd4eec4befd3eabb645241a17bf8b94805478af14abc601fb62161702/protovtor-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "378af1188680904b8f6babe6b4505c97", "sha256": "caf73de16bed29522af437ea16a4eb529a512ca5807a5818a85d840d20e76a68"}, "downloads": -1, "filename": "protovtor-1.0.2.tar.gz", "has_sig": false, "md5_digest": "378af1188680904b8f6babe6b4505c97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 11651, "upload_time": "2018-11-02T03:30:26", "upload_time_iso_8601": "2018-11-02T03:30:26.148858Z", "url": "https://files.pythonhosted.org/packages/7d/03/1c4fd4eec4befd3eabb645241a17bf8b94805478af14abc601fb62161702/protovtor-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:26 2020"}