{"info": {"author": "Nat Wilson", "author_email": "natw@fortyninemaps.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: GIS"], "description": "picogeojson\n===========\n\n|Build Status| |Coverage Status|\n\nStraightforward and compliant GeoJSON parsing and serialization with\nzero dependencies. Easily ingest or output GeoJSON adhering to `RFC\n7946 <https://tools.ietf.org/html/rfc7946>`__.\n\nUsage\n-----\n\nGeoJSON files or strings are read using ``fromfile()`` or\n``fromstring()`` (alias ``loads()``).\n\n.. code:: python\n\n    pt = picogeojson.fromstring('{\"type\": \"Point\", \"coordinates\": [1.0, 3.0]}')\n    # -> Point(coordinates=[1.0, 3.0])\n\nSometimes a particular type of GeoJSON object is expected (e.g. from an\nAPI GET request), but for safety the type needs to be checked.\nAlternatively, the ``result_fromstring()`` function can be used, which\nreturns an object with safe accessors for specific GeoJSON types.\n\n.. code:: python\n\n    result = picogeojson.result_fromstring(api_response.decode(\"utf-8\"))\n\n    # Expecting one or more points or multipoints\n    for geom in result.points:\n        # do something with points\n        # ...\n\n    for geom in result.multilinestrings:\n        # do something with multilinestrings\n        # ...\n\nThis works for Features too, and we can filter by the ``.properties``\nmember.\n\n.. code:: python\n\n    result = picogeojson.result_fromstring(api_response.decode(\"utf-8\"))\n\n    for feature in result.features(\"Polygon\", {\"type\": \"Lake\", \"state\": \"Oregon\"}):\n        # do something with lakes in Oregon\n        # ...\n\nGeoJSON objects may be constructed in Python and composed (``merge()``)\nor split (``burst()``).\n\n.. code:: python\n\n    points = [picogeojson.Point((1, 2)),\n              picogeojson.Point((3, 4)),\n              picogeojson.Point((5, 6))]\n\n    merged_points = picogeojson.merge(points)\n    # -> MultiPoint(coordinates=[(1, 2), (3, 4), (5, 6)])\n\n    split_points = picogeojson.burst(merged_points)\n    # -> [Point((1, 2)), Point((3, 4)), Point((5, 6))]\n\nGeoJSON objects are serialized with ``tostring()`` (alias ``dumps()``).\n\n.. code:: python\n\n    picogeojson.tostring(\n        picogeojson.Point([1.0, 3.0])\n    )\n    # -> {\"coordinates\": [1.0, 3.0], \"type\": \"Point\"}'\n\nKeyword arguments can be passed to ``tostring()`` that - enforce\nPolygon/MultiPolygon rotation direction, with counterclockwise for\nexternal rings and clockwise for internal rings\n(``enforce_poly_winding``) - split objects that cross the international\ndateline into multipart objects, for easier processing\n(``antimeridian_cutting``) - control whether a ``bbox`` member is\ncomputed and added to the JSON output (``write_bbox``)\n\n*picogeojson* will leverage\n`ujson <https://pypi.python.org/pypi/ujson>`__ as a backend if it is\ninstalled. Otherwise, it uses Python's built-in ``json`` module.\n\nPerformance\n-----------\n\nThe read benchmark involves reading a list of earthquake features. The\nwrite benchmark involves serializing the continent of Australia.\n\n+---------------------+--------+----------+\n| Module              | Read   | Write    |\n+=====================+========+==========+\n| json                | 1.49   | 2.00     |\n+---------------------+--------+----------+\n| geojson             | 6.74   | same     |\n+---------------------+--------+----------+\n| picogeojson         | 1.84   | same\\*   |\n+---------------------+--------+----------+\n| picogeojson+ujson   | 1.63   | 0.31\\*   |\n+---------------------+--------+----------+\n\n\\*antimeridian cutting and polygon winding check set to ``False``\n\nThis is a standalone Python package extracted from the\n`Karta <https://karta.fortyninemaps.com>`__ ``geojson`` submodule.\n\n.. |Build Status| image:: https://travis-ci.org/fortyninemaps/picogeojson.svg?branch=master\n   :target: https://travis-ci.org/fortyninemaps/picogeojson\n.. |Coverage Status| image:: https://coveralls.io/repos/github/fortyninemaps/picogeojson/badge.svg?branch=master\n   :target: https://coveralls.io/github/fortyninemaps/picogeojson?branch=master", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "minimal geojson", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "picogeojson", "package_url": "https://pypi.org/project/picogeojson/", "platform": "", "project_url": "https://pypi.org/project/picogeojson/", "project_urls": null, "release_url": "https://pypi.org/project/picogeojson/0.7.0/", "requires_dist": null, "requires_python": "", "summary": "RFC-7946 compliant GeoJSON parser and emitter", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/fortyninemaps/picogeojson\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70f3a7be09c0708bebc5db5b48351514122ed8f7/68747470733a2f2f7472617669732d63692e6f72672f666f7274796e696e656d6170732f7069636f67656f6a736f6e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/fortyninemaps/picogeojson?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3690607e299bd778f8aba6b0a4312fbb6761e295/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f666f7274796e696e656d6170732f7069636f67656f6a736f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Straightforward and compliant GeoJSON parsing and serialization with\nzero dependencies. Easily ingest or output GeoJSON adhering to <a href=\"https://tools.ietf.org/html/rfc7946\" rel=\"nofollow\">RFC\n7946</a>.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>GeoJSON files or strings are read using <tt>fromfile()</tt> or\n<tt>fromstring()</tt> (alias <tt>loads()</tt>).</p>\n<pre><span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'{\"type\": \"Point\", \"coordinates\": [1.0, 3.0]}'</span><span class=\"p\">)</span>\n<span class=\"c1\"># -&gt; Point(coordinates=[1.0, 3.0])</span>\n</pre>\n<p>Sometimes a particular type of GeoJSON object is expected (e.g. from an\nAPI GET request), but for safety the type needs to be checked.\nAlternatively, the <tt>result_fromstring()</tt> function can be used, which\nreturns an object with safe accessors for specific GeoJSON types.</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">result_fromstring</span><span class=\"p\">(</span><span class=\"n\">api_response</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Expecting one or more points or multipoints</span>\n<span class=\"k\">for</span> <span class=\"n\">geom</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with points</span>\n    <span class=\"c1\"># ...</span>\n\n<span class=\"k\">for</span> <span class=\"n\">geom</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">multilinestrings</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do something with multilinestrings</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>This works for Features too, and we can filter by the <tt>.properties</tt>\nmember.</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">result_fromstring</span><span class=\"p\">(</span><span class=\"n\">api_response</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">feature</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"p\">(</span><span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lake\"</span><span class=\"p\">,</span> <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Oregon\"</span><span class=\"p\">}):</span>\n    <span class=\"c1\"># do something with lakes in Oregon</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>GeoJSON objects may be constructed in Python and composed (<tt>merge()</tt>)\nor split (<tt>burst()</tt>).</p>\n<pre><span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n          <span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)),</span>\n          <span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">Point</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))]</span>\n\n<span class=\"n\">merged_points</span> <span class=\"o\">=</span> <span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n<span class=\"c1\"># -&gt; MultiPoint(coordinates=[(1, 2), (3, 4), (5, 6)])</span>\n\n<span class=\"n\">split_points</span> <span class=\"o\">=</span> <span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">burst</span><span class=\"p\">(</span><span class=\"n\">merged_points</span><span class=\"p\">)</span>\n<span class=\"c1\"># -&gt; [Point((1, 2)), Point((3, 4)), Point((5, 6))]</span>\n</pre>\n<p>GeoJSON objects are serialized with <tt>tostring()</tt> (alias <tt>dumps()</tt>).</p>\n<pre><span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">(</span>\n    <span class=\"n\">picogeojson</span><span class=\"o\">.</span><span class=\"n\">Point</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">])</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># -&gt; {\"coordinates\": [1.0, 3.0], \"type\": \"Point\"}'</span>\n</pre>\n<p>Keyword arguments can be passed to <tt>tostring()</tt> that - enforce\nPolygon/MultiPolygon rotation direction, with counterclockwise for\nexternal rings and clockwise for internal rings\n(<tt>enforce_poly_winding</tt>) - split objects that cross the international\ndateline into multipart objects, for easier processing\n(<tt>antimeridian_cutting</tt>) - control whether a <tt>bbox</tt> member is\ncomputed and added to the JSON output (<tt>write_bbox</tt>)</p>\n<p><em>picogeojson</em> will leverage\n<a href=\"https://pypi.python.org/pypi/ujson\" rel=\"nofollow\">ujson</a> as a backend if it is\ninstalled. Otherwise, it uses Python\u2019s built-in <tt>json</tt> module.</p>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>The read benchmark involves reading a list of earthquake features. The\nwrite benchmark involves serializing the continent of Australia.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Module</th>\n<th>Read</th>\n<th>Write</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>json</td>\n<td>1.49</td>\n<td>2.00</td>\n</tr>\n<tr><td>geojson</td>\n<td>6.74</td>\n<td>same</td>\n</tr>\n<tr><td>picogeojson</td>\n<td>1.84</td>\n<td>same*</td>\n</tr>\n<tr><td>picogeojson+ujson</td>\n<td>1.63</td>\n<td>0.31*</td>\n</tr>\n</tbody>\n</table>\n<p>*antimeridian cutting and polygon winding check set to <tt>False</tt></p>\n<p>This is a standalone Python package extracted from the\n<a href=\"https://karta.fortyninemaps.com\" rel=\"nofollow\">Karta</a> <tt>geojson</tt> submodule.</p>\n</div>\n\n          </div>"}, "last_serial": 4134739, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "362fbced12ddcfbc8d5a11e5f2a98c93", "sha256": "82def3917ed7aa511edec17d9a12b773cf7bbf7b7d8c875849369d9a8538a80e"}, "downloads": -1, "filename": "picogeojson-0.2.0.tar.gz", "has_sig": false, "md5_digest": "362fbced12ddcfbc8d5a11e5f2a98c93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5612, "upload_time": "2017-01-04T04:15:38", "upload_time_iso_8601": "2017-01-04T04:15:38.584389Z", "url": "https://files.pythonhosted.org/packages/de/57/d00141c5ef124149bdfa4ffa362dadb8262bbbf0b818c7fedf0f386e0343/picogeojson-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "bf56728d3afeab189c88fca2a517aef6", "sha256": "8154c54ecac854337031c37f2ac79742cee9d603fc1e4012919c1e7db1e95102"}, "downloads": -1, "filename": "picogeojson-0.2.1.tar.gz", "has_sig": false, "md5_digest": "bf56728d3afeab189c88fca2a517aef6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5681, "upload_time": "2017-01-16T02:01:17", "upload_time_iso_8601": "2017-01-16T02:01:17.469456Z", "url": "https://files.pythonhosted.org/packages/46/60/977603f0229bc5cb7657779c1ac20a22627b3dfdc8974188373d608b3d5b/picogeojson-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "514d4992740365d853723dbb89b65654", "sha256": "fd069a2fd1ef5c4dd773c2bbf1cc5fea5381d4dcf9d4501f6afc3c175a3c57c7"}, "downloads": -1, "filename": "picogeojson-0.2.2.tar.gz", "has_sig": false, "md5_digest": "514d4992740365d853723dbb89b65654", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6140, "upload_time": "2017-01-22T05:50:17", "upload_time_iso_8601": "2017-01-22T05:50:17.570995Z", "url": "https://files.pythonhosted.org/packages/a0/fb/273cf7d02a5a80684a870e3be5cf67d339441450850cadb74a833be8b673/picogeojson-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "9f67dbd03d4dcead8fba8d940d215095", "sha256": "60c3f549e6960871ea4116841379aa7b921e651bccaa43f6a9630464780bf620"}, "downloads": -1, "filename": "picogeojson-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9f67dbd03d4dcead8fba8d940d215095", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7313, "upload_time": "2017-01-29T22:25:05", "upload_time_iso_8601": "2017-01-29T22:25:05.944869Z", "url": "https://files.pythonhosted.org/packages/ca/00/2b5517332ccc5af17d216bb3d56d0afc92bbe5c96fa2cd5cce27a1103935/picogeojson-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "31a1a0cd23f0ea75d90aab6d8585480d", "sha256": "595edecedfb24a2126f789b4457595a710472fc3feecfc476f236f114a2145da"}, "downloads": -1, "filename": "picogeojson-0.4.0.tar.gz", "has_sig": false, "md5_digest": "31a1a0cd23f0ea75d90aab6d8585480d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8492, "upload_time": "2017-02-16T22:34:37", "upload_time_iso_8601": "2017-02-16T22:34:37.692435Z", "url": "https://files.pythonhosted.org/packages/df/29/4cebc6b41bd52b4265a4e99493a0c0f9e0d559fdd1323f615f184d66b85b/picogeojson-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "dd957d8294f324f1ceb671b18e0d31ac", "sha256": "082873fbbe4973cc450bab5c0e2f1d5bf1d915e56c0fdd5f6bbfbc0f6f799091"}, "downloads": -1, "filename": "picogeojson-0.4.1.tar.gz", "has_sig": false, "md5_digest": "dd957d8294f324f1ceb671b18e0d31ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10781, "upload_time": "2017-04-26T04:30:16", "upload_time_iso_8601": "2017-04-26T04:30:16.826697Z", "url": "https://files.pythonhosted.org/packages/67/ea/e57407ff0255c2770e896dde48b82e88c0c45dce9e8b5511829e27c2ace1/picogeojson-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "e2208a3e7a0a8ddd0f3f598e1fd680e4", "sha256": "b44d864fece2119481f7ed1e3066d4a1fff82d28abad693b9d612c6cb9966224"}, "downloads": -1, "filename": "picogeojson-0.4.2.tar.gz", "has_sig": false, "md5_digest": "e2208a3e7a0a8ddd0f3f598e1fd680e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11104, "upload_time": "2017-05-03T02:22:58", "upload_time_iso_8601": "2017-05-03T02:22:58.521175Z", "url": "https://files.pythonhosted.org/packages/db/73/9dfe4ab388760947c2f9cd4dccdbb114723843df3704d395becead04681b/picogeojson-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "4d4c3c24f145f8ee9c6c5b15f500ea45", "sha256": "9c0f22ef5df5842ee630786f5a58042eacc74d1f1dbae9cb93ac166c450f788c"}, "downloads": -1, "filename": "picogeojson-0.4.3.tar.gz", "has_sig": false, "md5_digest": "4d4c3c24f145f8ee9c6c5b15f500ea45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11396, "upload_time": "2017-06-09T01:17:31", "upload_time_iso_8601": "2017-06-09T01:17:31.279408Z", "url": "https://files.pythonhosted.org/packages/19/60/de5fa8d65a1845d4f5c65b499df259eca6cb12708c77acf4f5f0a909cda9/picogeojson-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "e2d63f78d3cc2ee8b79eea5e04c173a7", "sha256": "991d10698be191b687582a07988f8ec858d1a5b247e0c6f0079c913b37373865"}, "downloads": -1, "filename": "picogeojson-0.4.4.tar.gz", "has_sig": false, "md5_digest": "e2d63f78d3cc2ee8b79eea5e04c173a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11394, "upload_time": "2017-06-16T04:48:26", "upload_time_iso_8601": "2017-06-16T04:48:26.907878Z", "url": "https://files.pythonhosted.org/packages/61/80/5f0a6d0a5e2e7ae181a2f81cea0934a3460098a0031339ddbfc47294d9b1/picogeojson-0.4.4.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "3740609db8d8c74f5f7a3f68041534b5", "sha256": "711dda4776997a404e7cc5fb15c1f2acce44a314ee703a9bec888d30cdecbd06"}, "downloads": -1, "filename": "picogeojson-0.5.0.tar.gz", "has_sig": false, "md5_digest": "3740609db8d8c74f5f7a3f68041534b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11452, "upload_time": "2017-06-29T03:49:20", "upload_time_iso_8601": "2017-06-29T03:49:20.093403Z", "url": "https://files.pythonhosted.org/packages/e1/5e/5b2c10fd77494f668f1d7f295def2ca6803ea9b8e56502c106ce52596b91/picogeojson-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "cc4d06eedf2c46be1d807ce20293fb7b", "sha256": "188d14c80af1620f9bf8d23ca292e86f275ef4510b4b7a4cead333310ebeeea1"}, "downloads": -1, "filename": "picogeojson-0.6.0.tar.gz", "has_sig": false, "md5_digest": "cc4d06eedf2c46be1d807ce20293fb7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11522, "upload_time": "2017-07-08T17:07:53", "upload_time_iso_8601": "2017-07-08T17:07:53.304979Z", "url": "https://files.pythonhosted.org/packages/a5/b6/3cbee3ab5508c353a103077b953a621a8235701f09533b7fb7ac1eb6e246/picogeojson-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "d90ba986ec2f9e9c0ce14c6dd7c211db", "sha256": "b6d97f7be7a7acdc18ad88da148bd5b070b62acc8e2e0bf0b1c00c4f84b5e3f7"}, "downloads": -1, "filename": "picogeojson-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d90ba986ec2f9e9c0ce14c6dd7c211db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11560, "upload_time": "2017-07-08T18:08:58", "upload_time_iso_8601": "2017-07-08T18:08:58.582023Z", "url": "https://files.pythonhosted.org/packages/3b/b0/9bbd20603715f85f1e33c779806515bd89f4385b939744dc001f9a5ea4c3/picogeojson-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "c0d2b0288c113e5bf6378095066a5d9e", "sha256": "f78f8396f92be857e5d899b970741030c83a406e47b84064f2170bc9d6d0bd7a"}, "downloads": -1, "filename": "picogeojson-0.6.2.tar.gz", "has_sig": false, "md5_digest": "c0d2b0288c113e5bf6378095066a5d9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11742, "upload_time": "2017-10-13T01:27:21", "upload_time_iso_8601": "2017-10-13T01:27:21.832791Z", "url": "https://files.pythonhosted.org/packages/70/43/fec5eb4cef88271bb648af99ece688a97c6653fdbc57ffe8e8425ae174b0/picogeojson-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "e2b27c9a9a8eeecd7a8c3496442e8e28", "sha256": "997d7a0b0421b5d714432359db8565ab4716cc53c71046ca1a4d450e8313a2c0"}, "downloads": -1, "filename": "picogeojson-0.6.3.tar.gz", "has_sig": false, "md5_digest": "e2b27c9a9a8eeecd7a8c3496442e8e28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11833, "upload_time": "2017-10-14T03:49:53", "upload_time_iso_8601": "2017-10-14T03:49:53.419917Z", "url": "https://files.pythonhosted.org/packages/88/2c/3e9e9655441e30a55d905b9b2141958a30edc6196ab22d0add4252fb8067/picogeojson-0.6.3.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "515c42d0dc4061142ab6a31c37d7c9d5", "sha256": "8c15ca1d3f416a8983c2a09efcff9189a7a856336099f60834f694dc18a72b59"}, "downloads": -1, "filename": "picogeojson-0.7.0.tar.gz", "has_sig": false, "md5_digest": "515c42d0dc4061142ab6a31c37d7c9d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14180, "upload_time": "2018-08-04T03:41:41", "upload_time_iso_8601": "2018-08-04T03:41:41.161367Z", "url": "https://files.pythonhosted.org/packages/4e/64/a8a33c974bf7e8778229f3c7acd7b8c3ae509ce2b52e7d397fb127618df1/picogeojson-0.7.0.tar.gz", "yanked": false}], "0.7.0.dev1": [{"comment_text": "", "digests": {"md5": "4b8a5de3c18c07c7347c2455605e48fe", "sha256": "d38d9151ac0af6fb1fdda31b767ba35cd3b4f8719dd8287645bd13631aee0bf1"}, "downloads": -1, "filename": "picogeojson-0.7.0.dev1.tar.gz", "has_sig": false, "md5_digest": "4b8a5de3c18c07c7347c2455605e48fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13455, "upload_time": "2018-07-28T16:23:27", "upload_time_iso_8601": "2018-07-28T16:23:27.945542Z", "url": "https://files.pythonhosted.org/packages/29/8b/2c7681ce5eea2ef2ad3a268e485dd3189070c573873c3821a8eba607530e/picogeojson-0.7.0.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "515c42d0dc4061142ab6a31c37d7c9d5", "sha256": "8c15ca1d3f416a8983c2a09efcff9189a7a856336099f60834f694dc18a72b59"}, "downloads": -1, "filename": "picogeojson-0.7.0.tar.gz", "has_sig": false, "md5_digest": "515c42d0dc4061142ab6a31c37d7c9d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14180, "upload_time": "2018-08-04T03:41:41", "upload_time_iso_8601": "2018-08-04T03:41:41.161367Z", "url": "https://files.pythonhosted.org/packages/4e/64/a8a33c974bf7e8778229f3c7acd7b8c3ae509ce2b52e7d397fb127618df1/picogeojson-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:02 2020"}