{"info": {"author": "Dan McDougall", "author_email": "daniel.mcdougall@liftoffsoftware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable"], "description": "The htmltag module\r\n==================\r\n.. note::\r\n\r\n    The latest, complete documentation of htmltag can be found here:\r\n    http://liftoff.github.io/htmltag/\r\n\r\n    The latest version of this module can be obtained from Github:\r\n    https://github.com/LiftoffSoftware/htmltag\r\n\r\nhtmltag.py - A Python (2 *and* 3) module for wrapping whatever strings you want\r\nin HTML tags. Example::\r\n\r\n    >>> from htmltag import strong\r\n    >>> print(strong(\"SO STRONG!\"))\r\n    <strong>SO STRONG!</strong>\r\n\r\nWhat tags are supported?  All of them!  An important facet of modern web\r\nprogramming is the ability to use your own custom tags.  For example::\r\n\r\n    >>> from htmltag import foobar\r\n    >>> foobar('Custom tag example')\r\n    '<foobar>Custom tag example</foobar>'\r\n\r\nTo add attributes inside your tag just pass them as keyword arguments::\r\n\r\n    >>> from htmltag import a\r\n    >>> print(a('awesome software', href='http://liftoffsoftware.com/'))\r\n    <a href=\"http://liftoffsoftware.com/\">awesome software</a>\r\n\r\nTo work around the problem of reserved words as keyword arguments (i.e. can't\r\nhave 'class=\"foo\"') just prefix the keyword with an underscore like so::\r\n\r\n    >>> from htmltag import div\r\n    >>> print(div(\"example\", _class=\"someclass\"))\r\n    <div class=\"someclass\">example</div>\r\n\r\nAnother option--which is useful for things like 'data-\\*' attributes--is to pass\r\nkeyword arguments as a dict using the `\\*\\* operator\r\n<http://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists>`_\r\nlike so::\r\n\r\n    >>> from htmltag import li\r\n    >>> print(li(\"CEO\", **{\"class\": \"user\", \"data-name\": \"Dan McDougall\"}))\r\n    <li class=\"user\" data-name=\"Dan McDougall\">CEO</li>\r\n\r\nIf you want to use upper-case tags just import them in caps:\r\n\r\n    >>> from htmltag import STRONG\r\n    >>> print(STRONG('whatever'))\r\n    <STRONG>whatever</STRONG>\r\n\r\nCombining Tags and Content\r\n--------------------------\r\nYou can combine multiple tags to create a larger HTML string like so::\r\n\r\n    >>> from htmltag import table, tr, td\r\n    >>> print(table(\r\n    ...     tr(td('100'), td('200'), id=\"row1\"),\r\n    ...     tr(td('150'), td('250'), id=\"row2\"),\r\n    ... ))\r\n    <table><tr id=\"row1\"><td>100</td><td>200</td></tr><tr id=\"row2\"><td>150</td><td>250</td></tr></table>\r\n\r\n**NOTE:** If you're going to do something like the above please use a *real*\r\ntemplate language/module instead of `htmltag`.  You're *probably* \"doing it\r\nwrong\" if you end up with something like the above in your code.  For example,\r\ntry `Tornado's template engine\r\n<http://www.tornadoweb.org/en/stable/template.html>`_.\r\n\r\nSpecial Characters\r\n------------------\r\nSpecial characters that cause trouble like, '<', '>', and '&' will be\r\nautomatically converted into HTML entities.  If you don't want that to happen\r\njust wrap your string in :class:`htmltag.HTML` like so::\r\n\r\n    >>> from htmltag import HTML, a\r\n    >>> txt = HTML(\"<strong>I am already HTML. Don't escape me!</strong>\")\r\n    >>> a(txt, href=\"http://liftoffsoftware.com/\")\r\n    '<a href=\"http://liftoffsoftware.com/\"><strong>I am already HTML. Don\\'t escape me!</strong></a>'\r\n\r\nSince Python doesn't allow modules to have dashes (-) in their names, if you\r\nneed to create a tag like that just use an underscore and change its 'tagname'\r\nattribute::\r\n\r\n    >>> from htmltag import foo_bar\r\n    >>> print(foo_bar('baz')) # Before\r\n    '<foo_bar>baz</foo_bar>'\r\n    >>> foo_bar.tagname = 'foo-bar'\r\n    >>> print(foo_bar('baz')) # Before\r\n    '<foo-bar>baz</foo-bar>'\r\n\r\nBy default self-closing HTML tags like '<img>' will not include an ending slash.\r\nTo change this behavior (i.e. for XHTML) just set 'ending_slash' to `True`::\r\n\r\n    >>> from htmltag import img\r\n    >>> img.ending_slash = True\r\n    >>> img(src=\"http://somehost/images/image.png\")\r\n    '<img src=\"http://somehost/images/image.png\" />'\r\n    >>> img.ending_slash = False # Reset for later doctests\r\n\r\nProtections Against Cross-Site Scripting (XSS)\r\n----------------------------------------------\r\nBy default all unsafe (XSS) content in HTML tags will be removed::\r\n\r\n    >>> from htmltag import a, img\r\n    >>> a(img(src=\"javascript:alert('pwned!')\"), href=\"http://hacker/\")\r\n    '<a href=\"http://hacker/\">(removed)</a>'\r\n\r\nIf you want to change this behavior set the tag's 'safe_mode' attribute like\r\nso::\r\n\r\n    >>> from htmltag import a, img\r\n    >>> a.safe_mode = False\r\n    >>> img.safe_mode = False\r\n    >>> a(img(src=\"javascript:alert('pwned!')\"), href=\"http://hacker/\")\r\n    '<a href=\"http://hacker/\"><img src=\"javascript:alert(\\'pwned!\\')\"></a>'\r\n    >>> a.safe_mode = True # Reset for later doctests\r\n    >>> img.safe_mode = True # Ditto\r\n\r\nYou may also change the replacement text if you like::\r\n\r\n    >>> from htmltag import a, img\r\n    >>> img.replacement = \"No no no!\"\r\n    >>> a(img(src=\"javascript:alert('pwned!')\"), href=\"http://hacker/\")\r\n    '<a href=\"http://hacker/\">No no no!</a>'\r\n\r\nIf you set 'replacement' to 'entities' the rejected HTML will be converted to\r\ncharacter entities like so::\r\n\r\n    >>> from htmltag import a, img\r\n    >>> a.replacement = \"entities\"\r\n    >>> img.replacement = \"entities\"\r\n    >>> a(img(src=\"javascript:alert('pwned!')\"), href=\"http://hacker/\")\r\n    '<a href=\"http://hacker/\">&lt;img src=\"javascript:alert(\\'pwned!\\')\"&gt;</a>'\r\n\r\nIt is also possible to create a whitelist of allowed tags.  All other tags\r\ncontained therein will automatically be replaced::\r\n\r\n    >>> from htmltag import span\r\n    >>> whitelist = ['span', 'b', 'i', 'strong']\r\n    >>> span.whitelist = whitelist\r\n    >>> span(HTML('This is <b>bold</b> new lib is <script>awesome();</script>'))\r\n    '<span>This is <b>bold</b> new lib is (removed)awesome();(removed)</span>'\r\n\r\nLastly, all strings returned by `htmltag` are actually a subclass of `str`:\r\n`~htmltag.HTML`.  It has a useful `escaped` property:\r\n\r\n    >>> from htmltag import address\r\n    >>> address.safe_mode = False # Turn off so we have a dangerous example ;)\r\n    >>> html = address('1 Hacker Ln., Nowhere, USA')\r\n    >>> print(html)\r\n    <address>1 Hacker Ln., Nowhere, USA</address>\r\n    >>> print(html.escaped)\r\n    &lt;address&gt;1 Hacker Ln., Nowhere, USA&lt;/address&gt;\r\n\r\nThis can be extremely useful if you want to be double-sure that no executable\r\nstuff ends up in your program's output.\r\n\r\n\r\nFunctions and Classes\r\n=====================", "description_content_type": null, "docs_url": "https://pythonhosted.org/htmltag/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LiftoffSoftware/htmltag", "keywords": "html5 html", "license": "Apache 2.0", "maintainer": "Dan McDougall", "maintainer_email": "daniel.mcdougall@liftoffsoftware.com", "name": "htmltag", "package_url": "https://pypi.org/project/htmltag/", "platform": "Any", "project_url": "https://pypi.org/project/htmltag/", "project_urls": {"Homepage": "https://github.com/LiftoffSoftware/htmltag"}, "release_url": "https://pypi.org/project/htmltag/1.7/", "requires_dist": null, "requires_python": null, "summary": "Python HTML tag interface", "version": "1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            The htmltag module\n<br>==================\n<br>.. note::\n<br>\n<br>    The latest, complete documentation of htmltag can be found here:\n<br>    http://liftoff.github.io/htmltag/\n<br>\n<br>    The latest version of this module can be obtained from Github:\n<br>    https://github.com/LiftoffSoftware/htmltag\n<br>\n<br>htmltag.py - A Python (2 *and* 3) module for wrapping whatever strings you want\n<br>in HTML tags. Example::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import strong\n<br>    &gt;&gt;&gt; print(strong(\"SO STRONG!\"))\n<br>    &lt;strong&gt;SO STRONG!&lt;/strong&gt;\n<br>\n<br>What tags are supported?  All of them!  An important facet of modern web\n<br>programming is the ability to use your own custom tags.  For example::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import foobar\n<br>    &gt;&gt;&gt; foobar('Custom tag example')\n<br>    '&lt;foobar&gt;Custom tag example&lt;/foobar&gt;'\n<br>\n<br>To add attributes inside your tag just pass them as keyword arguments::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import a\n<br>    &gt;&gt;&gt; print(a('awesome software', href='http://liftoffsoftware.com/'))\n<br>    &lt;a href=\"http://liftoffsoftware.com/\"&gt;awesome software&lt;/a&gt;\n<br>\n<br>To work around the problem of reserved words as keyword arguments (i.e. can't\n<br>have 'class=\"foo\"') just prefix the keyword with an underscore like so::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import div\n<br>    &gt;&gt;&gt; print(div(\"example\", _class=\"someclass\"))\n<br>    &lt;div class=\"someclass\"&gt;example&lt;/div&gt;\n<br>\n<br>Another option--which is useful for things like 'data-\\*' attributes--is to pass\n<br>keyword arguments as a dict using the `\\*\\* operator\n<br>&lt;http://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists&gt;`_\n<br>like so::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import li\n<br>    &gt;&gt;&gt; print(li(\"CEO\", **{\"class\": \"user\", \"data-name\": \"Dan McDougall\"}))\n<br>    &lt;li class=\"user\" data-name=\"Dan McDougall\"&gt;CEO&lt;/li&gt;\n<br>\n<br>If you want to use upper-case tags just import them in caps:\n<br>\n<br>    &gt;&gt;&gt; from htmltag import STRONG\n<br>    &gt;&gt;&gt; print(STRONG('whatever'))\n<br>    &lt;STRONG&gt;whatever&lt;/STRONG&gt;\n<br>\n<br>Combining Tags and Content\n<br>--------------------------\n<br>You can combine multiple tags to create a larger HTML string like so::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import table, tr, td\n<br>    &gt;&gt;&gt; print(table(\n<br>    ...     tr(td('100'), td('200'), id=\"row1\"),\n<br>    ...     tr(td('150'), td('250'), id=\"row2\"),\n<br>    ... ))\n<br>    &lt;table&gt;&lt;tr id=\"row1\"&gt;&lt;td&gt;100&lt;/td&gt;&lt;td&gt;200&lt;/td&gt;&lt;/tr&gt;&lt;tr id=\"row2\"&gt;&lt;td&gt;150&lt;/td&gt;&lt;td&gt;250&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n<br>\n<br>**NOTE:** If you're going to do something like the above please use a *real*\n<br>template language/module instead of `htmltag`.  You're *probably* \"doing it\n<br>wrong\" if you end up with something like the above in your code.  For example,\n<br>try `Tornado's template engine\n<br>&lt;http://www.tornadoweb.org/en/stable/template.html&gt;`_.\n<br>\n<br>Special Characters\n<br>------------------\n<br>Special characters that cause trouble like, '&lt;', '&gt;', and '&amp;' will be\n<br>automatically converted into HTML entities.  If you don't want that to happen\n<br>just wrap your string in :class:`htmltag.HTML` like so::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import HTML, a\n<br>    &gt;&gt;&gt; txt = HTML(\"&lt;strong&gt;I am already HTML. Don't escape me!&lt;/strong&gt;\")\n<br>    &gt;&gt;&gt; a(txt, href=\"http://liftoffsoftware.com/\")\n<br>    '&lt;a href=\"http://liftoffsoftware.com/\"&gt;&lt;strong&gt;I am already HTML. Don\\'t escape me!&lt;/strong&gt;&lt;/a&gt;'\n<br>\n<br>Since Python doesn't allow modules to have dashes (-) in their names, if you\n<br>need to create a tag like that just use an underscore and change its 'tagname'\n<br>attribute::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import foo_bar\n<br>    &gt;&gt;&gt; print(foo_bar('baz')) # Before\n<br>    '&lt;foo_bar&gt;baz&lt;/foo_bar&gt;'\n<br>    &gt;&gt;&gt; foo_bar.tagname = 'foo-bar'\n<br>    &gt;&gt;&gt; print(foo_bar('baz')) # Before\n<br>    '&lt;foo-bar&gt;baz&lt;/foo-bar&gt;'\n<br>\n<br>By default self-closing HTML tags like '&lt;img&gt;' will not include an ending slash.\n<br>To change this behavior (i.e. for XHTML) just set 'ending_slash' to `True`::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import img\n<br>    &gt;&gt;&gt; img.ending_slash = True\n<br>    &gt;&gt;&gt; img(src=\"http://somehost/images/image.png\")\n<br>    '&lt;img src=\"http://somehost/images/image.png\" /&gt;'\n<br>    &gt;&gt;&gt; img.ending_slash = False # Reset for later doctests\n<br>\n<br>Protections Against Cross-Site Scripting (XSS)\n<br>----------------------------------------------\n<br>By default all unsafe (XSS) content in HTML tags will be removed::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import a, img\n<br>    &gt;&gt;&gt; a(img(src=\"javascript:alert('pwned!')\"), href=\"http://hacker/\")\n<br>    '&lt;a href=\"http://hacker/\"&gt;(removed)&lt;/a&gt;'\n<br>\n<br>If you want to change this behavior set the tag's 'safe_mode' attribute like\n<br>so::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import a, img\n<br>    &gt;&gt;&gt; a.safe_mode = False\n<br>    &gt;&gt;&gt; img.safe_mode = False\n<br>    &gt;&gt;&gt; a(img(src=\"javascript:alert('pwned!')\"), href=\"http://hacker/\")\n<br>    '&lt;a href=\"http://hacker/\"&gt;&lt;img src=\"javascript:alert(\\'pwned!\\')\"&gt;&lt;/a&gt;'\n<br>    &gt;&gt;&gt; a.safe_mode = True # Reset for later doctests\n<br>    &gt;&gt;&gt; img.safe_mode = True # Ditto\n<br>\n<br>You may also change the replacement text if you like::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import a, img\n<br>    &gt;&gt;&gt; img.replacement = \"No no no!\"\n<br>    &gt;&gt;&gt; a(img(src=\"javascript:alert('pwned!')\"), href=\"http://hacker/\")\n<br>    '&lt;a href=\"http://hacker/\"&gt;No no no!&lt;/a&gt;'\n<br>\n<br>If you set 'replacement' to 'entities' the rejected HTML will be converted to\n<br>character entities like so::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import a, img\n<br>    &gt;&gt;&gt; a.replacement = \"entities\"\n<br>    &gt;&gt;&gt; img.replacement = \"entities\"\n<br>    &gt;&gt;&gt; a(img(src=\"javascript:alert('pwned!')\"), href=\"http://hacker/\")\n<br>    '&lt;a href=\"http://hacker/\"&gt;&amp;lt;img src=\"javascript:alert(\\'pwned!\\')\"&amp;gt;&lt;/a&gt;'\n<br>\n<br>It is also possible to create a whitelist of allowed tags.  All other tags\n<br>contained therein will automatically be replaced::\n<br>\n<br>    &gt;&gt;&gt; from htmltag import span\n<br>    &gt;&gt;&gt; whitelist = ['span', 'b', 'i', 'strong']\n<br>    &gt;&gt;&gt; span.whitelist = whitelist\n<br>    &gt;&gt;&gt; span(HTML('This is &lt;b&gt;bold&lt;/b&gt; new lib is &lt;script&gt;awesome();&lt;/script&gt;'))\n<br>    '&lt;span&gt;This is &lt;b&gt;bold&lt;/b&gt; new lib is (removed)awesome();(removed)&lt;/span&gt;'\n<br>\n<br>Lastly, all strings returned by `htmltag` are actually a subclass of `str`:\n<br>`~htmltag.HTML`.  It has a useful `escaped` property:\n<br>\n<br>    &gt;&gt;&gt; from htmltag import address\n<br>    &gt;&gt;&gt; address.safe_mode = False # Turn off so we have a dangerous example ;)\n<br>    &gt;&gt;&gt; html = address('1 Hacker Ln., Nowhere, USA')\n<br>    &gt;&gt;&gt; print(html)\n<br>    &lt;address&gt;1 Hacker Ln., Nowhere, USA&lt;/address&gt;\n<br>    &gt;&gt;&gt; print(html.escaped)\n<br>    &amp;lt;address&amp;gt;1 Hacker Ln., Nowhere, USA&amp;lt;/address&amp;gt;\n<br>\n<br>This can be extremely useful if you want to be double-sure that no executable\n<br>stuff ends up in your program's output.\n<br>\n<br>\n<br>Functions and Classes\n<br>=====================\n          </div>"}, "last_serial": 1193973, "releases": {"1.7": [{"comment_text": "", "digests": {"md5": "d3a4b810df9877ebf0239d642ee3c3bb", "sha256": "858d5ed06674a04650e07ea2cc66e834e878512f5289de20f5a1605d260f8bd3"}, "downloads": -1, "filename": "htmltag-1.7.tar.gz", "has_sig": false, "md5_digest": "d3a4b810df9877ebf0239d642ee3c3bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12329, "upload_time": "2014-08-07T20:13:35", "upload_time_iso_8601": "2014-08-07T20:13:35.604379Z", "url": "https://files.pythonhosted.org/packages/a6/34/a11d2ee1d7c85dde287a875566dc744dec675d651517859ffd5e71b9b2b3/htmltag-1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d3a4b810df9877ebf0239d642ee3c3bb", "sha256": "858d5ed06674a04650e07ea2cc66e834e878512f5289de20f5a1605d260f8bd3"}, "downloads": -1, "filename": "htmltag-1.7.tar.gz", "has_sig": false, "md5_digest": "d3a4b810df9877ebf0239d642ee3c3bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12329, "upload_time": "2014-08-07T20:13:35", "upload_time_iso_8601": "2014-08-07T20:13:35.604379Z", "url": "https://files.pythonhosted.org/packages/a6/34/a11d2ee1d7c85dde287a875566dc744dec675d651517859ffd5e71b9b2b3/htmltag-1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:14 2020"}