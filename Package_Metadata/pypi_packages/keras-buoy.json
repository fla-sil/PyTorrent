{"info": {"author": "Doruk Kar\u0131nca", "author_email": "dorukkarinca@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "==========\nkeras-buoy\n==========\n\nKeras wrapper that autosaves and auto-recovers not just the model weights but also the last epoch number and training history metrics.\n\n::\n\n    pip install keras-buoy\n\n::\n\n    >>> resumableModel = ResumableModel(model, save_every_epochs=4, to_path='kerascheckpoint.h5')\n    >>> history = resumableModel.fit(x = x_train, y = y_train, validation_split=0.1, batch_size = 256, verbose=2, epochs=15)\n\n    Recovered model from kerascheckpoint.h5 at epoch 8.\n\n    Epoch 9/15\n    1125/1125 - 5s - loss: 0.4790 - top_k_categorical_accuracy: 0.9698 - val_loss: 1.1075 - val_top_k_categorical_accuracy: 0.9206\n    Epoch 10/15\n    1125/1125 - 5s - loss: 0.4758 - top_k_categorical_accuracy: 0.9701 - val_loss: 1.1119 - val_top_k_categorical_accuracy: 0.9214\n    Epoch 11/15\n    1125/1125 - 5s - loss: 0.4753 - top_k_categorical_accuracy: 0.9702 - val_loss: 1.1000 - val_top_k_categorical_accuracy: 0.9215\n    Epoch 12/15\n    ...\n\nDescription\n===========\n\nWhen training is interrupted due to a crash/accidental :code:`Ctrl+C` and you rerun the whole code, it recovers the model weights and the epoch counter to the last saved values. Then it resumes training as if nothing happened. At the end, the Keras History.history dictionaries are combined so that the training history looks like one single training run.\n\nExample\n=======\n\n::\n\n    from tensorflow import keras\n    from keras_buoy.models import ResumableModel\n\n    model = keras.Sequential()\n    ...\n    resumable_model = ResumableModel(model, save_every_epochs = 4, to_path='/path/to/save/model_weights.h5')\n    history = resumable_model.fit(x = x_train, y = y_train, validation_split = 0.1, batch_size = 256, verbose = 2, epochs = 12)\n\nUsage\n=====\n\n:code:`save_every_epochs (int)` will save the model, history, and epoch counter every so often. In case of a crash, recovery will happen from the last saved epoch multiple.\n\n:code:`to_path (str)` is where the model weights will be saved, and must have the :code:`.h5` extension.\n\n:code:`resumable_model.fit(...)` is the same as Keras' :code:`model.fit(...)`.\n\nIt returns :code:`history` which is the history dict of the Keras History object. Note that it does not return the Keras.History object itself, just the dict.\n\nIf :code:`to_path` is :code:`mymodel.h5`, then there will be :code:`mymodel_epoch_num.pkl` and :code:`mymodel_history.pkl` in the same directory as :code:`mymodel.h5`, which hold backups for the epoch counter and the history dict, respectively.\n\nNote\n====\n\nThis project has been set up using PyScaffold 3.2.3. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dorukkarinca/keras-buoy/", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "keras-buoy", "package_url": "https://pypi.org/project/keras-buoy/", "platform": "any", "project_url": "https://pypi.org/project/keras-buoy/", "project_urls": {"Homepage": "https://github.com/dorukkarinca/keras-buoy/"}, "release_url": "https://pypi.org/project/keras-buoy/0.1.2/", "requires_dist": ["tensorflow (>=2.0)", "pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": "", "summary": "Keras wrapper that autosaves what ModelCheckpoint cannot.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Keras wrapper that autosaves and auto-recovers not just the model weights but also the last epoch number and training history metrics.</p>\n<pre>pip install keras-buoy\n</pre>\n<pre>&gt;&gt;&gt; resumableModel = ResumableModel(model, save_every_epochs=4, to_path='kerascheckpoint.h5')\n&gt;&gt;&gt; history = resumableModel.fit(x = x_train, y = y_train, validation_split=0.1, batch_size = 256, verbose=2, epochs=15)\n\nRecovered model from kerascheckpoint.h5 at epoch 8.\n\nEpoch 9/15\n1125/1125 - 5s - loss: 0.4790 - top_k_categorical_accuracy: 0.9698 - val_loss: 1.1075 - val_top_k_categorical_accuracy: 0.9206\nEpoch 10/15\n1125/1125 - 5s - loss: 0.4758 - top_k_categorical_accuracy: 0.9701 - val_loss: 1.1119 - val_top_k_categorical_accuracy: 0.9214\nEpoch 11/15\n1125/1125 - 5s - loss: 0.4753 - top_k_categorical_accuracy: 0.9702 - val_loss: 1.1000 - val_top_k_categorical_accuracy: 0.9215\nEpoch 12/15\n...\n</pre>\n<div id=\"description\">\n<h2>Description</h2>\n<p>When training is interrupted due to a crash/accidental <code>Ctrl+C</code> and you rerun the whole code, it recovers the model weights and the epoch counter to the last saved values. Then it resumes training as if nothing happened. At the end, the Keras History.history dictionaries are combined so that the training history looks like one single training run.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre>from tensorflow import keras\nfrom keras_buoy.models import ResumableModel\n\nmodel = keras.Sequential()\n...\nresumable_model = ResumableModel(model, save_every_epochs = 4, to_path='/path/to/save/model_weights.h5')\nhistory = resumable_model.fit(x = x_train, y = y_train, validation_split = 0.1, batch_size = 256, verbose = 2, epochs = 12)\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><code>save_every_epochs (int)</code> will save the model, history, and epoch counter every so often. In case of a crash, recovery will happen from the last saved epoch multiple.</p>\n<p><code>to_path (str)</code> is where the model weights will be saved, and must have the <code>.h5</code> extension.</p>\n<p><code>resumable_model.fit(...)</code> is the same as Keras\u2019 <code>model.fit(...)</code>.</p>\n<p>It returns <code>history</code> which is the history dict of the Keras History object. Note that it does not return the Keras.History object itself, just the dict.</p>\n<p>If <code>to_path</code> is <code>mymodel.h5</code>, then there will be <code>mymodel_epoch_num.pkl</code> and <code>mymodel_history.pkl</code> in the same directory as <code>mymodel.h5</code>, which hold backups for the epoch counter and the history dict, respectively.</p>\n</div>\n<div id=\"note\">\n<h2>Note</h2>\n<p>This project has been set up using PyScaffold 3.2.3. For details and usage\ninformation on PyScaffold see <a href=\"https://pyscaffold.org/\" rel=\"nofollow\">https://pyscaffold.org/</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 7009180, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a7600e1bc52b29f99ba4587d0e10c5b1", "sha256": "61ccbe932730f91e71ab9550c571bb0818bb39c1b11428b21db1adb3fdd6ca46"}, "downloads": -1, "filename": "keras_buoy-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a7600e1bc52b29f99ba4587d0e10c5b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7621, "upload_time": "2020-04-12T00:08:00", "upload_time_iso_8601": "2020-04-12T00:08:00.059590Z", "url": "https://files.pythonhosted.org/packages/fb/da/186a9a253981a53d5ed7d19ca15a5eff9c58bfe105702ec3fbf91e323229/keras_buoy-0.1-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0eb4a57d6f555ee2830eda06eefcf8a0", "sha256": "9a533370c1287e884fc54dfdccf825e40f487c2a645b903a75dca2c3cb174b4a"}, "downloads": -1, "filename": "keras_buoy-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0eb4a57d6f555ee2830eda06eefcf8a0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7652, "upload_time": "2020-04-12T00:08:02", "upload_time_iso_8601": "2020-04-12T00:08:02.236267Z", "url": "https://files.pythonhosted.org/packages/00/70/35a20a283d3202d8418ffa8477f4aef060c5b68fffd6614e961da074bb83/keras_buoy-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "543c0ea617327514227fb448f5a5b713", "sha256": "c7ccd121c7eb39583108d6f1828746ee64c7eb50463e16137c2fe94f36d4a819"}, "downloads": -1, "filename": "keras_buoy-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "543c0ea617327514227fb448f5a5b713", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7662, "upload_time": "2020-04-13T10:55:52", "upload_time_iso_8601": "2020-04-13T10:55:52.507325Z", "url": "https://files.pythonhosted.org/packages/56/20/16deee29fbf71f9426420365eef3f286b85621ddfebecc870f40431d395e/keras_buoy-0.1.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "543c0ea617327514227fb448f5a5b713", "sha256": "c7ccd121c7eb39583108d6f1828746ee64c7eb50463e16137c2fe94f36d4a819"}, "downloads": -1, "filename": "keras_buoy-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "543c0ea617327514227fb448f5a5b713", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7662, "upload_time": "2020-04-13T10:55:52", "upload_time_iso_8601": "2020-04-13T10:55:52.507325Z", "url": "https://files.pythonhosted.org/packages/56/20/16deee29fbf71f9426420365eef3f286b85621ddfebecc870f40431d395e/keras_buoy-0.1.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:50:13 2020"}