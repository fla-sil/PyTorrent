{"info": {"author": "Bors Ltd", "author_email": "gitstorage@bors-ltd.fr", "bugtrack_url": null, "classifiers": [], "description": "GitStorage\n==========\n\nA Django application to browse a Git repository and build Web applications on top of it.\n\nGitStorage is:\n\n- A Django `storage`_ to browse the contents of the repository (what you see in your working copy)\n  from a bare repository (without a working copy);\n\n- `Models`_ to enrich Git objects, namely add metadata to blobs and allow access to trees\n\n- Mixin `views`_ to combine with class-based views to browse the repository and add or remove objects.\n  on top of the repository;\n\n- `Management commands`_.\n\nGitStorage is built on top of `PyGit2`_ and `libgit2`_, it does not call Git from the command line.\n\n.. _`PyGit2`: http://www.pygit2.org/\n\n.. _`libgit2`: http://libgit2.github.com/\n\n.. contents::\n\nStorage\n-------\n\nThe Django storage supports most of the storage API: open, save, exists, listdir... missing features include mtime,\nctime and atime since Git doesn't directly store those values.\n\nThe storage is limited just as any Git repository. It is designed for a single writer and many readers. Concurrent\nwriting is not even tested. No effort was made to optimise read access either. Your mileage may vary.\n\nThe storage is an interesting proof-of-concept but even the rest of GitStorage loads Git objects directly.\n\nModels\n------\n\nBlobMetadata\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nAdd metadata to the blob, only mimetype for now.\n\nTreePermission\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nOnly admin users are allowed by default. Share access to a tree and its blobs (but not its subtrees) to a regular user.\n\nViews\n-----\n\nThese views are designed as the foundation of class-based views like TemplateView and FormView,\nand your own business logic.\n\nRepositoryView\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe main view that dispatches to a view dedicated to each Git object type (namely blob and tree).\n\nNot actually a mixin since it is functional but the dedicated views are mixins (see below).\n\nTreeViewMixin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDefault view for a tree, lists its contents.\n\nBlobViewMixin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDefault view for a blob, displays its information.\n\nPreviewViewMixin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nPreview the current blob in the browser if possible, download it otherwise.\n\nDownloadViewMixin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nForce download the current blob.\n\nDeleteViewMixin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDelete the current blob.\n\nUploadViewMixin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nUpload a new file to the current tree (as a blob).\n\nSharesViewMixin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nList of current tree permissions and removing the selected ones.\n\nShareViewMixin\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nShare access to the current tree to a user by adding a tree permission.\n\nManagement Commands\n-------------------\n\nsync_blobmetadata\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nBrowse the repository to compute metadata for each blob not known yet.\n\nTo call after pushing new commits to the repository, ideally from a Git hook.\n\nCleaning up of metadata for orphan blobs is not handled.\n\nTests\n-----\n\nA minimal Django project is shipped to run the test suite. Try ``make coverage`` (100% at the time of this writing).\n\nMigrations\n----------\n\nGitStorage uses South.\n\nLicense\n-------\n\nGitStorage is copyright Bors Ltd with ideas from the PyGit2 project.\n\nGitStorage is published under the GNU General Public License version 3.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bors-ltd/django-gitstorage", "keywords": null, "license": "GPL3", "maintainer": null, "maintainer_email": null, "name": "django-gitstorage", "package_url": "https://pypi.org/project/django-gitstorage/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-gitstorage/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bors-ltd/django-gitstorage"}, "release_url": "https://pypi.org/project/django-gitstorage/1.0/", "requires_dist": null, "requires_python": null, "summary": "Django storage and views to browse a Git repository", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Django application to browse a Git repository and build Web applications on top of it.</p>\n<p>GitStorage is:</p>\n<ul>\n<li>A Django <a href=\"#storage\" rel=\"nofollow\">storage</a> to browse the contents of the repository (what you see in your working copy)\nfrom a bare repository (without a working copy);</li>\n<li><a href=\"#models\" rel=\"nofollow\">Models</a> to enrich Git objects, namely add metadata to blobs and allow access to trees</li>\n<li>Mixin <a href=\"#views\" rel=\"nofollow\">views</a> to combine with class-based views to browse the repository and add or remove objects.\non top of the repository;</li>\n<li><a href=\"#management-commands\" rel=\"nofollow\">Management commands</a>.</li>\n</ul>\n<p>GitStorage is built on top of <a href=\"http://www.pygit2.org/\" rel=\"nofollow\">PyGit2</a> and <a href=\"http://libgit2.github.com/\" rel=\"nofollow\">libgit2</a>, it does not call Git from the command line.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#storage\" id=\"id1\" rel=\"nofollow\">Storage</a></li>\n<li><a href=\"#models\" id=\"id2\" rel=\"nofollow\">Models</a><ul>\n<li><a href=\"#blobmetadata\" id=\"id3\" rel=\"nofollow\">BlobMetadata</a></li>\n<li><a href=\"#treepermission\" id=\"id4\" rel=\"nofollow\">TreePermission</a></li>\n</ul>\n</li>\n<li><a href=\"#views\" id=\"id5\" rel=\"nofollow\">Views</a><ul>\n<li><a href=\"#repositoryview\" id=\"id6\" rel=\"nofollow\">RepositoryView</a></li>\n<li><a href=\"#treeviewmixin\" id=\"id7\" rel=\"nofollow\">TreeViewMixin</a></li>\n<li><a href=\"#blobviewmixin\" id=\"id8\" rel=\"nofollow\">BlobViewMixin</a></li>\n<li><a href=\"#previewviewmixin\" id=\"id9\" rel=\"nofollow\">PreviewViewMixin</a></li>\n<li><a href=\"#downloadviewmixin\" id=\"id10\" rel=\"nofollow\">DownloadViewMixin</a></li>\n<li><a href=\"#deleteviewmixin\" id=\"id11\" rel=\"nofollow\">DeleteViewMixin</a></li>\n<li><a href=\"#uploadviewmixin\" id=\"id12\" rel=\"nofollow\">UploadViewMixin</a></li>\n<li><a href=\"#sharesviewmixin\" id=\"id13\" rel=\"nofollow\">SharesViewMixin</a></li>\n<li><a href=\"#shareviewmixin\" id=\"id14\" rel=\"nofollow\">ShareViewMixin</a></li>\n</ul>\n</li>\n<li><a href=\"#management-commands\" id=\"id15\" rel=\"nofollow\">Management Commands</a></li>\n<li><a href=\"#tests\" id=\"id16\" rel=\"nofollow\">Tests</a></li>\n<li><a href=\"#migrations\" id=\"id17\" rel=\"nofollow\">Migrations</a></li>\n<li><a href=\"#license\" id=\"id18\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"storage\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Storage</a></h2>\n<p>The Django storage supports most of the storage API: open, save, exists, listdir\u2026 missing features include mtime,\nctime and atime since Git doesn\u2019t directly store those values.</p>\n<p>The storage is limited just as any Git repository. It is designed for a single writer and many readers. Concurrent\nwriting is not even tested. No effort was made to optimise read access either. Your mileage may vary.</p>\n<p>The storage is an interesting proof-of-concept but even the rest of GitStorage loads Git objects directly.</p>\n</div>\n<div id=\"models\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Models</a></h2>\n<div id=\"blobmetadata\">\n<h3><a href=\"#id3\" rel=\"nofollow\">BlobMetadata</a></h3>\n<p>Add metadata to the blob, only mimetype for now.</p>\n</div>\n<div id=\"treepermission\">\n<h3><a href=\"#id4\" rel=\"nofollow\">TreePermission</a></h3>\n<p>Only admin users are allowed by default. Share access to a tree and its blobs (but not its subtrees) to a regular user.</p>\n</div>\n</div>\n<div id=\"views\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Views</a></h2>\n<p>These views are designed as the foundation of class-based views like TemplateView and FormView,\nand your own business logic.</p>\n<div id=\"repositoryview\">\n<h3><a href=\"#id6\" rel=\"nofollow\">RepositoryView</a></h3>\n<p>The main view that dispatches to a view dedicated to each Git object type (namely blob and tree).</p>\n<p>Not actually a mixin since it is functional but the dedicated views are mixins (see below).</p>\n</div>\n<div id=\"treeviewmixin\">\n<h3><a href=\"#id7\" rel=\"nofollow\">TreeViewMixin</a></h3>\n<p>Default view for a tree, lists its contents.</p>\n</div>\n<div id=\"blobviewmixin\">\n<h3><a href=\"#id8\" rel=\"nofollow\">BlobViewMixin</a></h3>\n<p>Default view for a blob, displays its information.</p>\n</div>\n<div id=\"previewviewmixin\">\n<h3><a href=\"#id9\" rel=\"nofollow\">PreviewViewMixin</a></h3>\n<p>Preview the current blob in the browser if possible, download it otherwise.</p>\n</div>\n<div id=\"downloadviewmixin\">\n<h3><a href=\"#id10\" rel=\"nofollow\">DownloadViewMixin</a></h3>\n<p>Force download the current blob.</p>\n</div>\n<div id=\"deleteviewmixin\">\n<h3><a href=\"#id11\" rel=\"nofollow\">DeleteViewMixin</a></h3>\n<p>Delete the current blob.</p>\n</div>\n<div id=\"uploadviewmixin\">\n<h3><a href=\"#id12\" rel=\"nofollow\">UploadViewMixin</a></h3>\n<p>Upload a new file to the current tree (as a blob).</p>\n</div>\n<div id=\"sharesviewmixin\">\n<h3><a href=\"#id13\" rel=\"nofollow\">SharesViewMixin</a></h3>\n<p>List of current tree permissions and removing the selected ones.</p>\n</div>\n<div id=\"shareviewmixin\">\n<h3><a href=\"#id14\" rel=\"nofollow\">ShareViewMixin</a></h3>\n<p>Share access to the current tree to a user by adding a tree permission.</p>\n</div>\n</div>\n<div id=\"management-commands\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Management Commands</a></h2>\n<h2 id=\"sync-blobmetadata\"><span class=\"section-subtitle\">sync_blobmetadata</span></h2>\n<p>Browse the repository to compute metadata for each blob not known yet.</p>\n<p>To call after pushing new commits to the repository, ideally from a Git hook.</p>\n<p>Cleaning up of metadata for orphan blobs is not handled.</p>\n</div>\n<div id=\"tests\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Tests</a></h2>\n<p>A minimal Django project is shipped to run the test suite. Try <tt>make coverage</tt> (100% at the time of this writing).</p>\n</div>\n<div id=\"migrations\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Migrations</a></h2>\n<p>GitStorage uses South.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id18\" rel=\"nofollow\">License</a></h2>\n<p>GitStorage is copyright Bors Ltd with ideas from the PyGit2 project.</p>\n<p>GitStorage is published under the GNU General Public License version 3.</p>\n</div>\n\n          </div>"}, "last_serial": 637871, "releases": {"1.0": []}, "urls": [], "timestamp": "Fri May  8 00:35:51 2020"}