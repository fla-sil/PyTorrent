{"info": {"author": "nyanp", "author_email": "Noumi.Taiga@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# nyaggle\n![GitHub Actions CI Status](https://github.com/nyanp/nyaggle/workflows/Python%20package/badge.svg)\n![Python Versions](https://img.shields.io/pypi/pyversions/nyaggle.svg?logo=python&logoColor=white)\n![Documentation Status](https://readthedocs.org/projects/nyaggle/badge/?version=latest)\n\n[**Documentation**](https://nyaggle.readthedocs.io/en/latest/index.html)\n| [**Slide (Japanese)**](https://docs.google.com/presentation/d/1jv3J7DISw8phZT4z9rqjM-azdrQ4L4wWJN5P-gKL6fA/edit?usp=sharing)\n\n**nyaggle** is a utility library for Kaggle and offline competitions, \nparticularly focused on experiment tracking, feature engineering and validation.\n\n- **nyaggle.ensemble** - Averaging & stacking\n- **nyaggle.experiment** - Experiment tracking\n- **nyaggle.feature_store** - Lightweight feature storage using feather-format\n- **nyaggle.features** - sklearn-compatible features\n- **nyaggle.hyper_parameters** - Collection of GBDT hyper-parameters used in past Kaggle competitions\n- **nyaggle.validation** - Adversarial validation & sklearn-compatible CV splitters\n\n## Installation\nYou can install nyaggle via pip:\n```\n$pip install nyaggle\n```\n\n## Examples\n\n### Experiment Tracking\n`run_experiment()` is an high-level API for experiment with cross validation.\nIt outputs parameters, metrics, out of fold predictions, test predictions,\nfeature importance and submission.csv under the specified directory.\n\nIt can be combined with mlflow tracking.\n\n```python\nfrom sklearn.model_selection import train_test_split\n\nfrom nyaggle.experiment import run_experiment\nfrom nyaggle.testing import make_classification_df\n\nX, y = make_classification_df()\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\nparams = {\n    'n_estimators': 1000,\n    'max_depth': 8\n}\n\nresult = run_experiment(params,\n                        X_train,\n                        y_train,\n                        X_test)\n\n# You can get outputs that needed in data science competitions with 1 API\n\nprint(result.test_prediction)  # Test prediction in numpy array\nprint(result.oof_prediction)   # Out-of-fold prediction in numpy array\nprint(result.models)           # Trained models for each fold\nprint(result.importance)       # Feature importance for each fold\nprint(result.metrics)          # Evalulation metrics for each fold\nprint(result.time)             # Elapsed time\nprint(result.submission_df)    # The output dataframe saved as submission.csv\n\n# ...and all outputs have been saved under the logging directory (default: output/yyyymmdd_HHMMSS).\n\n\n# You can use it with mlflow and track your experiments through mlflow-ui\nresult = run_experiment(params,\n                        X_train,\n                        y_train,\n                        X_test,\n                        with_mlflow=True)\n```\n\nnyaggle also has a low-level API which has similar interface to\n[mlflow tracking](https://www.mlflow.org/docs/latest/tracking.html) and [wandb](https://www.wandb.com/).\n\n```python\nfrom nyaggle.experiment import Experiment\n\nwith Experiment(logging_directory='./output/') as exp:\n    # log key-value pair as a parameter\n    exp.log_param('lr', 0.01)\n    exp.log_param('optimizer', 'adam')\n\n    # log text\n    exp.log('blah blah blah')\n\n    # log metric\n    exp.log_metric('CV', 0.85)\n\n    # log numpy ndarray, pandas dafaframe and any artifacts\n    exp.log_numpy('predicted', predicted)\n    exp.log_dataframe('submission', sub, file_format='csv')\n    exp.log_artifact('path-to-your-file')\n```\n\n### Feature Engineering\n\n#### Target Encoding with K-Fold\n```python\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import KFold\nfrom nyaggle.feature.category_encoder import TargetEncoder\n\n\ntrain = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')\nall = pd.concat([train, test]).copy()\n\ncat_cols = [c for c in train.columns if train[c].dtype == np.object]\ntarget_col = 'y'\n\nkf = KFold(5)\n\n# Target encoding with K-fold\nte = TargetEncoder(kf.split(train))\n\n# use fit/fit_transform to train data, then apply transform to test data\ntrain.loc[:, cat_cols] = te.fit_transform(train[cat_cols], train[target_col])\ntest.loc[:, cat_cols] = te.transform(test[cat_cols])\n\n# ... or just call fit_transform to concatenated data\nall.loc[:, cat_cols] = te.fit_transform(all[cat_cols], all[cat_cols])\n```\n\n#### Text Vectorization using BERT\nYou need to install pytorch to your virtual environment to use BertSentenceVectorizer. \nMaCab and mecab-python3 are also required if you use Japanese BERT model.\n\n```python\nimport pandas as pd\nfrom nyaggle.feature.nlp import BertSentenceVectorizer\n\n\ntrain = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')\nall = pd.concat([train, test]).copy()\n\ntext_cols = ['body']\ntarget_col = 'y'\ngroup_col = 'user_id'\n\n\n# extract BERT-based sentence vector\nbv = BertSentenceVectorizer(text_columns=text_cols)\n\ntext_vector = bv.fit_transform(train)\n\n\n# BERT + SVD, with cuda\nbv = BertSentenceVectorizer(text_columns=text_cols, use_cuda=True, n_components=40)\n\ntext_vector_svd = bv.fit_transform(train)\n\n# Japanese BERT\nbv = BertSentenceVectorizer(text_columns=text_cols, lang='jp')\n\njapanese_text_vector = bv.fit_transform(train)\n```\n\n\n### Adversarial Validation\n\n```python\nimport pandas as pd\nfrom nyaggle.validation import adversarial_validate\n\ntrain = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')\n\nauc, importance = adversarial_validate(train, test, importance_type='gain')\n\n```\n\n### Validation Splitters\n\nnyaggle provides a set of validation splitters that compatible with sklean interface.\n\n```python\nimport pandas as pd\nfrom sklearn.model_selection import cross_validate, KFold\nfrom nyaggle.validation import TimeSeriesSplit, Take, Skip, Nth\n\ntrain = pd.read_csv('train.csv', parse_dates='dt')\n\n# time-series split\nts = TimeSeriesSplit(train['dt'])\nts.add_fold(train_interval=('2019-01-01', '2019-01-10'), test_interval=('2019-01-10', '2019-01-20'))\nts.add_fold(train_interval=('2019-01-06', '2019-01-15'), test_interval=('2019-01-15', '2019-01-25'))\n\ncross_validate(..., cv=ts)\n\n# take the first 3 folds out of 10\ncross_validate(..., cv=Take(3, KFold(10)))\n\n# skip the first 3 folds, and evaluate the remaining 7 folds\ncross_validate(..., cv=Skip(3, KFold(10)))\n\n# evaluate 1st fold\ncross_validate(..., cv=Nth(1, ts))\n\n```\n\n\n### Other Awesome Repositories\nHere is a list of awesome repositories that provide general utility functions for data science competitions.\nPlease let me know if you have another one :)\n\n- [jeongyoonlee/Kaggler](https://github.com/jeongyoonlee/Kaggler)\n- [mxbi/mlcrate](https://github.com/mxbi/mlcrate)\n- [analokmaus/kuma_utils](https://github.com/analokmaus/kuma_utils)\n- [Far0n/kaggletils](https://github.com/Far0n/kaggletils)\n- [MLWave/Kaggle-Ensemble-Guide](https://github.com/MLWave/Kaggle-Ensemble-Guide)\n- [rushter/heamy](https://github.com/rushter/heamy)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nyanp/nyaggle", "keywords": "nyaggle kaggle", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nyaggle", "package_url": "https://pypi.org/project/nyaggle/", "platform": "", "project_url": "https://pypi.org/project/nyaggle/", "project_urls": {"Homepage": "https://github.com/nyanp/nyaggle"}, "release_url": "https://pypi.org/project/nyaggle/0.1.2/", "requires_dist": ["category-encoders", "matplotlib", "more-itertools", "numpy", "optuna (>=1.0.0)", "pandas", "pyarrow", "seaborn", "sklearn", "tqdm", "transformers (>=2.3.0)", "catboost (>=0.17) ; extra == 'all'", "lightgbm ; extra == 'all'", "xgboost ; extra == 'all'", "torch ; extra == 'all'", "mlflow ; extra == 'all'"], "requires_python": "", "summary": "Code for Kaggle and Offline Competitions.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nyaggle</h1>\n<p><img alt=\"GitHub Actions CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1613a08035dda3c7150b58a67e27d20183c28467/68747470733a2f2f6769746875622e636f6d2f6e79616e702f6e796167676c652f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\">\n<img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b275c918d976cece75f71af583c9f82a81a874c9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6e796167676c652e7376673f6c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465\">\n<img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6c4727da7192f9d755dd49f89a20941fba2db8c/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6e796167676c652f62616467652f3f76657273696f6e3d6c6174657374\"></p>\n<p><a href=\"https://nyaggle.readthedocs.io/en/latest/index.html\" rel=\"nofollow\"><strong>Documentation</strong></a>\n| <a href=\"https://docs.google.com/presentation/d/1jv3J7DISw8phZT4z9rqjM-azdrQ4L4wWJN5P-gKL6fA/edit?usp=sharing\" rel=\"nofollow\"><strong>Slide (Japanese)</strong></a></p>\n<p><strong>nyaggle</strong> is a utility library for Kaggle and offline competitions,\nparticularly focused on experiment tracking, feature engineering and validation.</p>\n<ul>\n<li><strong>nyaggle.ensemble</strong> - Averaging &amp; stacking</li>\n<li><strong>nyaggle.experiment</strong> - Experiment tracking</li>\n<li><strong>nyaggle.feature_store</strong> - Lightweight feature storage using feather-format</li>\n<li><strong>nyaggle.features</strong> - sklearn-compatible features</li>\n<li><strong>nyaggle.hyper_parameters</strong> - Collection of GBDT hyper-parameters used in past Kaggle competitions</li>\n<li><strong>nyaggle.validation</strong> - Adversarial validation &amp; sklearn-compatible CV splitters</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install nyaggle via pip:</p>\n<pre><code>$pip install nyaggle\n</code></pre>\n<h2>Examples</h2>\n<h3>Experiment Tracking</h3>\n<p><code>run_experiment()</code> is an high-level API for experiment with cross validation.\nIt outputs parameters, metrics, out of fold predictions, test predictions,\nfeature importance and submission.csv under the specified directory.</p>\n<p>It can be combined with mlflow tracking.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nyaggle.experiment</span> <span class=\"kn\">import</span> <span class=\"n\">run_experiment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nyaggle.testing</span> <span class=\"kn\">import</span> <span class=\"n\">make_classification_df</span>\n\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">make_classification_df</span><span class=\"p\">()</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'n_estimators'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"s1\">'max_depth'</span><span class=\"p\">:</span> <span class=\"mi\">8</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run_experiment</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span>\n                        <span class=\"n\">X_train</span><span class=\"p\">,</span>\n                        <span class=\"n\">y_train</span><span class=\"p\">,</span>\n                        <span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can get outputs that needed in data science competitions with 1 API</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">test_prediction</span><span class=\"p\">)</span>  <span class=\"c1\"># Test prediction in numpy array</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">oof_prediction</span><span class=\"p\">)</span>   <span class=\"c1\"># Out-of-fold prediction in numpy array</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"p\">)</span>           <span class=\"c1\"># Trained models for each fold</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">importance</span><span class=\"p\">)</span>       <span class=\"c1\"># Feature importance for each fold</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"p\">)</span>          <span class=\"c1\"># Evalulation metrics for each fold</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">)</span>             <span class=\"c1\"># Elapsed time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">submission_df</span><span class=\"p\">)</span>    <span class=\"c1\"># The output dataframe saved as submission.csv</span>\n\n<span class=\"c1\"># ...and all outputs have been saved under the logging directory (default: output/yyyymmdd_HHMMSS).</span>\n\n\n<span class=\"c1\"># You can use it with mlflow and track your experiments through mlflow-ui</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run_experiment</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span>\n                        <span class=\"n\">X_train</span><span class=\"p\">,</span>\n                        <span class=\"n\">y_train</span><span class=\"p\">,</span>\n                        <span class=\"n\">X_test</span><span class=\"p\">,</span>\n                        <span class=\"n\">with_mlflow</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>nyaggle also has a low-level API which has similar interface to\n<a href=\"https://www.mlflow.org/docs/latest/tracking.html\" rel=\"nofollow\">mlflow tracking</a> and <a href=\"https://www.wandb.com/\" rel=\"nofollow\">wandb</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nyaggle.experiment</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"n\">logging_directory</span><span class=\"o\">=</span><span class=\"s1\">'./output/'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">exp</span><span class=\"p\">:</span>\n    <span class=\"c1\"># log key-value pair as a parameter</span>\n    <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">log_param</span><span class=\"p\">(</span><span class=\"s1\">'lr'</span><span class=\"p\">,</span> <span class=\"mf\">0.01</span><span class=\"p\">)</span>\n    <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">log_param</span><span class=\"p\">(</span><span class=\"s1\">'optimizer'</span><span class=\"p\">,</span> <span class=\"s1\">'adam'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># log text</span>\n    <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s1\">'blah blah blah'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># log metric</span>\n    <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">log_metric</span><span class=\"p\">(</span><span class=\"s1\">'CV'</span><span class=\"p\">,</span> <span class=\"mf\">0.85</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># log numpy ndarray, pandas dafaframe and any artifacts</span>\n    <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">log_numpy</span><span class=\"p\">(</span><span class=\"s1\">'predicted'</span><span class=\"p\">,</span> <span class=\"n\">predicted</span><span class=\"p\">)</span>\n    <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">log_dataframe</span><span class=\"p\">(</span><span class=\"s1\">'submission'</span><span class=\"p\">,</span> <span class=\"n\">sub</span><span class=\"p\">,</span> <span class=\"n\">file_format</span><span class=\"o\">=</span><span class=\"s1\">'csv'</span><span class=\"p\">)</span>\n    <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">log_artifact</span><span class=\"p\">(</span><span class=\"s1\">'path-to-your-file'</span><span class=\"p\">)</span>\n</pre>\n<h3>Feature Engineering</h3>\n<h4>Target Encoding with K-Fold</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">KFold</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nyaggle.feature.category_encoder</span> <span class=\"kn\">import</span> <span class=\"n\">TargetEncoder</span>\n\n\n<span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'train.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'test.csv'</span><span class=\"p\">)</span>\n<span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"n\">cat_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"k\">if</span> <span class=\"n\">train</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span> <span class=\"o\">==</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">]</span>\n<span class=\"n\">target_col</span> <span class=\"o\">=</span> <span class=\"s1\">'y'</span>\n\n<span class=\"n\">kf</span> <span class=\"o\">=</span> <span class=\"n\">KFold</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Target encoding with K-fold</span>\n<span class=\"n\">te</span> <span class=\"o\">=</span> <span class=\"n\">TargetEncoder</span><span class=\"p\">(</span><span class=\"n\">kf</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># use fit/fit_transform to train data, then apply transform to test data</span>\n<span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"n\">cat_cols</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">te</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">[</span><span class=\"n\">cat_cols</span><span class=\"p\">],</span> <span class=\"n\">train</span><span class=\"p\">[</span><span class=\"n\">target_col</span><span class=\"p\">])</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"n\">cat_cols</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">te</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">[</span><span class=\"n\">cat_cols</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># ... or just call fit_transform to concatenated data</span>\n<span class=\"nb\">all</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span> <span class=\"n\">cat_cols</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">te</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"p\">[</span><span class=\"n\">cat_cols</span><span class=\"p\">],</span> <span class=\"nb\">all</span><span class=\"p\">[</span><span class=\"n\">cat_cols</span><span class=\"p\">])</span>\n</pre>\n<h4>Text Vectorization using BERT</h4>\n<p>You need to install pytorch to your virtual environment to use BertSentenceVectorizer.\nMaCab and mecab-python3 are also required if you use Japanese BERT model.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nyaggle.feature.nlp</span> <span class=\"kn\">import</span> <span class=\"n\">BertSentenceVectorizer</span>\n\n\n<span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'train.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'test.csv'</span><span class=\"p\">)</span>\n<span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"n\">text_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">]</span>\n<span class=\"n\">target_col</span> <span class=\"o\">=</span> <span class=\"s1\">'y'</span>\n<span class=\"n\">group_col</span> <span class=\"o\">=</span> <span class=\"s1\">'user_id'</span>\n\n\n<span class=\"c1\"># extract BERT-based sentence vector</span>\n<span class=\"n\">bv</span> <span class=\"o\">=</span> <span class=\"n\">BertSentenceVectorizer</span><span class=\"p\">(</span><span class=\"n\">text_columns</span><span class=\"o\">=</span><span class=\"n\">text_cols</span><span class=\"p\">)</span>\n\n<span class=\"n\">text_vector</span> <span class=\"o\">=</span> <span class=\"n\">bv</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># BERT + SVD, with cuda</span>\n<span class=\"n\">bv</span> <span class=\"o\">=</span> <span class=\"n\">BertSentenceVectorizer</span><span class=\"p\">(</span><span class=\"n\">text_columns</span><span class=\"o\">=</span><span class=\"n\">text_cols</span><span class=\"p\">,</span> <span class=\"n\">use_cuda</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">n_components</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n\n<span class=\"n\">text_vector_svd</span> <span class=\"o\">=</span> <span class=\"n\">bv</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Japanese BERT</span>\n<span class=\"n\">bv</span> <span class=\"o\">=</span> <span class=\"n\">BertSentenceVectorizer</span><span class=\"p\">(</span><span class=\"n\">text_columns</span><span class=\"o\">=</span><span class=\"n\">text_cols</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s1\">'jp'</span><span class=\"p\">)</span>\n\n<span class=\"n\">japanese_text_vector</span> <span class=\"o\">=</span> <span class=\"n\">bv</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">)</span>\n</pre>\n<h3>Adversarial Validation</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nyaggle.validation</span> <span class=\"kn\">import</span> <span class=\"n\">adversarial_validate</span>\n\n<span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'train.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'test.csv'</span><span class=\"p\">)</span>\n\n<span class=\"n\">auc</span><span class=\"p\">,</span> <span class=\"n\">importance</span> <span class=\"o\">=</span> <span class=\"n\">adversarial_validate</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">importance_type</span><span class=\"o\">=</span><span class=\"s1\">'gain'</span><span class=\"p\">)</span>\n</pre>\n<h3>Validation Splitters</h3>\n<p>nyaggle provides a set of validation splitters that compatible with sklean interface.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">cross_validate</span><span class=\"p\">,</span> <span class=\"n\">KFold</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nyaggle.validation</span> <span class=\"kn\">import</span> <span class=\"n\">TimeSeriesSplit</span><span class=\"p\">,</span> <span class=\"n\">Take</span><span class=\"p\">,</span> <span class=\"n\">Skip</span><span class=\"p\">,</span> <span class=\"n\">Nth</span>\n\n<span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'train.csv'</span><span class=\"p\">,</span> <span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"s1\">'dt'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># time-series split</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">TimeSeriesSplit</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">[</span><span class=\"s1\">'dt'</span><span class=\"p\">])</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">add_fold</span><span class=\"p\">(</span><span class=\"n\">train_interval</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'2019-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2019-01-10'</span><span class=\"p\">),</span> <span class=\"n\">test_interval</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'2019-01-10'</span><span class=\"p\">,</span> <span class=\"s1\">'2019-01-20'</span><span class=\"p\">))</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">add_fold</span><span class=\"p\">(</span><span class=\"n\">train_interval</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'2019-01-06'</span><span class=\"p\">,</span> <span class=\"s1\">'2019-01-15'</span><span class=\"p\">),</span> <span class=\"n\">test_interval</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'2019-01-15'</span><span class=\"p\">,</span> <span class=\"s1\">'2019-01-25'</span><span class=\"p\">))</span>\n\n<span class=\"n\">cross_validate</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">=</span><span class=\"n\">ts</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># take the first 3 folds out of 10</span>\n<span class=\"n\">cross_validate</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">=</span><span class=\"n\">Take</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">KFold</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># skip the first 3 folds, and evaluate the remaining 7 folds</span>\n<span class=\"n\">cross_validate</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">=</span><span class=\"n\">Skip</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">KFold</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># evaluate 1st fold</span>\n<span class=\"n\">cross_validate</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">=</span><span class=\"n\">Nth</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ts</span><span class=\"p\">))</span>\n</pre>\n<h3>Other Awesome Repositories</h3>\n<p>Here is a list of awesome repositories that provide general utility functions for data science competitions.\nPlease let me know if you have another one :)</p>\n<ul>\n<li><a href=\"https://github.com/jeongyoonlee/Kaggler\" rel=\"nofollow\">jeongyoonlee/Kaggler</a></li>\n<li><a href=\"https://github.com/mxbi/mlcrate\" rel=\"nofollow\">mxbi/mlcrate</a></li>\n<li><a href=\"https://github.com/analokmaus/kuma_utils\" rel=\"nofollow\">analokmaus/kuma_utils</a></li>\n<li><a href=\"https://github.com/Far0n/kaggletils\" rel=\"nofollow\">Far0n/kaggletils</a></li>\n<li><a href=\"https://github.com/MLWave/Kaggle-Ensemble-Guide\" rel=\"nofollow\">MLWave/Kaggle-Ensemble-Guide</a></li>\n<li><a href=\"https://github.com/rushter/heamy\" rel=\"nofollow\">rushter/heamy</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6727001, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "952e44bd9f80804630109ea88a0c9607", "sha256": "aefd6247e96045ea160dabc7fdefa0d7df87c390853cdf356ba7701d4e6610e0"}, "downloads": -1, "filename": "nyaggle-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "952e44bd9f80804630109ea88a0c9607", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3401, "upload_time": "2019-12-24T11:47:47", "upload_time_iso_8601": "2019-12-24T11:47:47.586327Z", "url": "https://files.pythonhosted.org/packages/ea/bf/fe9c81c0d6ddae1bb21855607dcd3781ee1c2a6e8e6d0a72997acdd4d368/nyaggle-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "4ea5387b50745151189da60770848281", "sha256": "7dd205dff7cf1ae34e438b86853aa0fab3927f7947699fa89741655cbb06a8d7"}, "downloads": -1, "filename": "nyaggle-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "4ea5387b50745151189da60770848281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32983, "upload_time": "2020-01-25T09:12:02", "upload_time_iso_8601": "2020-01-25T09:12:02.126242Z", "url": "https://files.pythonhosted.org/packages/07/13/451f86189346126ac4e8c29098667d3de6844fe395359e84608fc7738185/nyaggle-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e954e4140a7ad477475cb731714bad0", "sha256": "6ce3682001de66f7037f862b04c32cf74255ad5a989b8c3294fa714c18b16d0b"}, "downloads": -1, "filename": "nyaggle-0.0.10.tar.gz", "has_sig": false, "md5_digest": "3e954e4140a7ad477475cb731714bad0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25361, "upload_time": "2020-01-25T09:12:03", "upload_time_iso_8601": "2020-01-25T09:12:03.787140Z", "url": "https://files.pythonhosted.org/packages/1f/12/a0a103987cbee021ce5d26cb85551b047d77134fb7cc87209f1c8568f68d/nyaggle-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "a8611d2764d510e1a5de865a17d358ac", "sha256": "be5858dfd5cb78d4c31c2199165f4c721d3e9a2dae6945e0d22b84c254241c02"}, "downloads": -1, "filename": "nyaggle-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "a8611d2764d510e1a5de865a17d358ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38548, "upload_time": "2020-01-27T11:35:47", "upload_time_iso_8601": "2020-01-27T11:35:47.200952Z", "url": "https://files.pythonhosted.org/packages/f3/b9/1eaa031a23bf46cf01b3a381b3875dafe365ad86fbf09227920edb0c037a/nyaggle-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6376dcf1b4c7673b4634d0ca19d064fa", "sha256": "8129f10cd21927804fc81dfa74c49f7ebdfa5b7cba2ea06ef73aac3f75ec75b9"}, "downloads": -1, "filename": "nyaggle-0.0.11.tar.gz", "has_sig": false, "md5_digest": "6376dcf1b4c7673b4634d0ca19d064fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29101, "upload_time": "2020-01-27T11:35:48", "upload_time_iso_8601": "2020-01-27T11:35:48.783088Z", "url": "https://files.pythonhosted.org/packages/cf/1f/838e396a237970264dd6b3f3f55adad6f530997583fc6f1e3228080e0ba5/nyaggle-0.0.11.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3fdbb6ef82c333190532d4cdc565e506", "sha256": "3495c4b2bf072d289f379a9796158438c15adc657cd50e3d9eb7086f0c8446b6"}, "downloads": -1, "filename": "nyaggle-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3fdbb6ef82c333190532d4cdc565e506", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4414, "upload_time": "2019-12-28T14:41:05", "upload_time_iso_8601": "2019-12-28T14:41:05.117403Z", "url": "https://files.pythonhosted.org/packages/95/29/4c1152470911fdf969767b72dc607217fd8eed68e0f13a81fc9c4a9c9c5d/nyaggle-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c30bced3d6d41f6cb708e539b0cd043f", "sha256": "29f8c127a0e88fbb49d706a4724fc527a2adf62798e977f9adc1ccf0504b2906"}, "downloads": -1, "filename": "nyaggle-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c30bced3d6d41f6cb708e539b0cd043f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3579, "upload_time": "2019-12-28T14:41:06", "upload_time_iso_8601": "2019-12-28T14:41:06.914293Z", "url": "https://files.pythonhosted.org/packages/57/29/0f57eb64d63e8b9f281b1b715d7af640c13f0091a974070a3eb1447a263a/nyaggle-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d76396d7a43c0ab9628ea40aa62e15bd", "sha256": "6d4622130b3bb7b0839be42be92f2aac6aacd474e9df90e124ae3ea313ee6f0a"}, "downloads": -1, "filename": "nyaggle-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d76396d7a43c0ab9628ea40aa62e15bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4458, "upload_time": "2019-12-31T12:42:46", "upload_time_iso_8601": "2019-12-31T12:42:46.502876Z", "url": "https://files.pythonhosted.org/packages/cb/0c/63316752a6ed1b2adcea3317a48d9703e9f057a9c5cca92dc31f1999976b/nyaggle-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b4d77468da0c55647b6d2f64769b9c3", "sha256": "95affd9e93100daea6deb67b0e12b225a8c5c979ba2d2104c5ef59ffe82cce0d"}, "downloads": -1, "filename": "nyaggle-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5b4d77468da0c55647b6d2f64769b9c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3648, "upload_time": "2019-12-31T12:42:47", "upload_time_iso_8601": "2019-12-31T12:42:47.594786Z", "url": "https://files.pythonhosted.org/packages/3f/c6/98c5287b258d154557fdf2e22646c258eadbcff9ee98949a60d8deb0a0e7/nyaggle-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "405af399c8a9620a4222c6ec85069be9", "sha256": "b858672b0d998a16b62ffc4c0d5bdead7fbfa8de74645391515d3d6222cfacaf"}, "downloads": -1, "filename": "nyaggle-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "405af399c8a9620a4222c6ec85069be9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4547, "upload_time": "2020-01-09T14:42:45", "upload_time_iso_8601": "2020-01-09T14:42:45.876648Z", "url": "https://files.pythonhosted.org/packages/3e/26/3e49967c731e410f0b421b4d4d374350d54eb8c1a5346e694c279edbe81c/nyaggle-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e4d4808d1bac656f4269609c47a6e66", "sha256": "7c865c46f9108532a0af822ede86ede128eacf814933931b0409faf7bc0529aa"}, "downloads": -1, "filename": "nyaggle-0.0.4.tar.gz", "has_sig": false, "md5_digest": "9e4d4808d1bac656f4269609c47a6e66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3764, "upload_time": "2020-01-09T14:42:47", "upload_time_iso_8601": "2020-01-09T14:42:47.486274Z", "url": "https://files.pythonhosted.org/packages/7a/68/12c7d7661549b0d2c781e7b6fd2037e95fbe715f58f624e5ab60cef90e78/nyaggle-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "8d0b1678a1b34cacfd37204bde5e8f11", "sha256": "11cad5eb0d9b0bcf8e0be512607793bf94cf67ab2c55d99231a435c20247a421"}, "downloads": -1, "filename": "nyaggle-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8d0b1678a1b34cacfd37204bde5e8f11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4505, "upload_time": "2020-01-14T15:44:19", "upload_time_iso_8601": "2020-01-14T15:44:19.837884Z", "url": "https://files.pythonhosted.org/packages/38/a4/413d66b2a6ea33f3743ae18fa0334a416f730dbcd9790a22e4151f7fc676/nyaggle-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e7d7158756250e75c2fc41aae00196f", "sha256": "58a1e0b6406140c92a04b0b1cb798a962f5e6e0cf07804c2af12298cf79c5d9a"}, "downloads": -1, "filename": "nyaggle-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9e7d7158756250e75c2fc41aae00196f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3908, "upload_time": "2020-01-14T15:44:21", "upload_time_iso_8601": "2020-01-14T15:44:21.430290Z", "url": "https://files.pythonhosted.org/packages/fb/c7/2ed4be3d6ba1e690a2c44321153d8cf3d262309497cbd95bb74ffc08e4c5/nyaggle-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "018fc155394d072c057c9b3bcb7cda38", "sha256": "4d5ff4553bbe274b5688e58c0912004b009066060de649151c82a27e72c05132"}, "downloads": -1, "filename": "nyaggle-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "018fc155394d072c057c9b3bcb7cda38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4681, "upload_time": "2020-01-23T12:19:25", "upload_time_iso_8601": "2020-01-23T12:19:25.379477Z", "url": "https://files.pythonhosted.org/packages/cb/db/15ebc6094f3c7fbad48a0f85d609a6df3f0d1207c4d72a6c6b8f10a579fa/nyaggle-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92a43aaf40d4a0c69d459006b21921e9", "sha256": "1ce4086b2dd3962f66159f8d3c31af8c78cac3a7cf0145a090e2caeee69d06b8"}, "downloads": -1, "filename": "nyaggle-0.0.6.tar.gz", "has_sig": false, "md5_digest": "92a43aaf40d4a0c69d459006b21921e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4126, "upload_time": "2020-01-23T12:19:26", "upload_time_iso_8601": "2020-01-23T12:19:26.921415Z", "url": "https://files.pythonhosted.org/packages/2c/31/0e45526c632b5da5cffa675acf15d85b5a3e0e440fa1ef144eb4d163279b/nyaggle-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "fd8e2dbfdad92f70f859b25dc178e67a", "sha256": "a2dd1e2a9aa5a9b404f7a8093a29f9538556e4ecc102a5e0e37fbb6138b298a6"}, "downloads": -1, "filename": "nyaggle-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "fd8e2dbfdad92f70f859b25dc178e67a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4680, "upload_time": "2020-01-23T15:07:40", "upload_time_iso_8601": "2020-01-23T15:07:40.625867Z", "url": "https://files.pythonhosted.org/packages/80/70/9da0d53a1f1f57b27e31766065f88759ee89c9c30a1d6a419f80c21645ef/nyaggle-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09f4875e4bc3f313bf265d7339e48925", "sha256": "59ae6bf6c332fa8b4e2cc76d7e134105128d58bc96eb0db8bcf3f0c06eda72b3"}, "downloads": -1, "filename": "nyaggle-0.0.7.tar.gz", "has_sig": false, "md5_digest": "09f4875e4bc3f313bf265d7339e48925", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4130, "upload_time": "2020-01-23T15:07:42", "upload_time_iso_8601": "2020-01-23T15:07:42.203040Z", "url": "https://files.pythonhosted.org/packages/2d/51/39dd762a02c8af00fa9625e41171386038639b690b1fd86a0e6bc34d7b84/nyaggle-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "490c70d63b8722e3e2d8142f54d202b7", "sha256": "6ec6e47b2812f8ffc9c013a482ea83ade01e733c65bb35c179e12ab41c001e34"}, "downloads": -1, "filename": "nyaggle-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "490c70d63b8722e3e2d8142f54d202b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32398, "upload_time": "2020-01-24T09:56:47", "upload_time_iso_8601": "2020-01-24T09:56:47.470260Z", "url": "https://files.pythonhosted.org/packages/ce/48/0381cd175f8380fbaddcd0f6a434d2aaa5f1c8d54fd41aea4bf0fe52a2c2/nyaggle-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62836d4dd8e57ad1039d38a214b4c41e", "sha256": "120b16fd4675e54dd7911902de067ad65f9e201799c4488d1eac0ada61813c1a"}, "downloads": -1, "filename": "nyaggle-0.0.8.tar.gz", "has_sig": false, "md5_digest": "62836d4dd8e57ad1039d38a214b4c41e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24823, "upload_time": "2020-01-24T09:56:49", "upload_time_iso_8601": "2020-01-24T09:56:49.094207Z", "url": "https://files.pythonhosted.org/packages/4a/91/d60fab4c91e0efcafeacdb811300da03f01a98ff626acc5bfe93d62dcef2/nyaggle-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "0009071e3b65f387b8f58397b1203179", "sha256": "b72371f63c429db16d865d46dd54c1930c49903e265d2858c435229d84bab1db"}, "downloads": -1, "filename": "nyaggle-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0009071e3b65f387b8f58397b1203179", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32890, "upload_time": "2020-01-25T00:30:39", "upload_time_iso_8601": "2020-01-25T00:30:39.430084Z", "url": "https://files.pythonhosted.org/packages/59/2d/61a7c5193f340c58d92b6d69f9ed4fe064fe29e5bb7f865fb41ac7c24838/nyaggle-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "650b44a233a84f8ce2e91ed8c7afb236", "sha256": "7fdf54c94bf229fe82aed214ce4ca5aa6b95720ea3a23edd1a84cad6e64700bf"}, "downloads": -1, "filename": "nyaggle-0.0.9.tar.gz", "has_sig": false, "md5_digest": "650b44a233a84f8ce2e91ed8c7afb236", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25292, "upload_time": "2020-01-25T00:30:40", "upload_time_iso_8601": "2020-01-25T00:30:40.829173Z", "url": "https://files.pythonhosted.org/packages/2e/22/6da0e05025682600d2373473325fa75791d685d8252bb4f0f5b8ef4cc5c1/nyaggle-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "6f3d0ef31a21d98fb834739ba8082cae", "sha256": "f90698c49189f442abc7e776d6d3db1178774ad6cf0c103a2c7c95d333fd23bd"}, "downloads": -1, "filename": "nyaggle-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f3d0ef31a21d98fb834739ba8082cae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40664, "upload_time": "2020-02-06T13:38:52", "upload_time_iso_8601": "2020-02-06T13:38:52.298261Z", "url": "https://files.pythonhosted.org/packages/7b/e8/7d677cf588aa436f85c502c90066a3be7839244d3c5d6dabba29eade9532/nyaggle-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e52b3446f1b093c8115b49b4ad99aaf", "sha256": "5cab7e42bb80706523cb5bf2c20201c5e101f0d8414c3ceb97e0597d2335a35d"}, "downloads": -1, "filename": "nyaggle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4e52b3446f1b093c8115b49b4ad99aaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31556, "upload_time": "2020-02-06T13:38:53", "upload_time_iso_8601": "2020-02-06T13:38:53.879265Z", "url": "https://files.pythonhosted.org/packages/b9/ad/d3dd2541a8675d2a3400de917a31cc9989266e7c18e8271e8a09d1842d6d/nyaggle-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a947bdbad4f5a77e3fce4d0b21de31e2", "sha256": "c9a46f50233851d5245ed72fd40bdf5b2f6198a2e362ebf794ab462c027a237c"}, "downloads": -1, "filename": "nyaggle-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a947bdbad4f5a77e3fce4d0b21de31e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44963, "upload_time": "2020-02-17T15:07:24", "upload_time_iso_8601": "2020-02-17T15:07:24.150391Z", "url": "https://files.pythonhosted.org/packages/9d/9e/97125067fabc1f5370abde074f58bd1e97b83637d657e0899d2f90e4acc2/nyaggle-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07f34604027f6eec6282ce70d4d32385", "sha256": "679e795e5df8f770eb86df12fd60866958569c260a5840a4717ec593e82b9db0"}, "downloads": -1, "filename": "nyaggle-0.1.1.tar.gz", "has_sig": false, "md5_digest": "07f34604027f6eec6282ce70d4d32385", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33847, "upload_time": "2020-02-17T15:07:30", "upload_time_iso_8601": "2020-02-17T15:07:30.075135Z", "url": "https://files.pythonhosted.org/packages/b5/fe/b4ba69d08c4b86cc3015c47747b04663a4fa617476647c91d170fe77a775/nyaggle-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d3e64c8a24ccc35f45bd09e5370410d1", "sha256": "e8c8a71c2bad01907e1207c2746588f6395cfe7a9700e0726bd6ce8a382ceca9"}, "downloads": -1, "filename": "nyaggle-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d3e64c8a24ccc35f45bd09e5370410d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50439, "upload_time": "2020-03-01T03:45:14", "upload_time_iso_8601": "2020-03-01T03:45:14.634781Z", "url": "https://files.pythonhosted.org/packages/74/8d/312231797c928acf4ce3e717cb5aa19798daa98acabf2fbdab8824292b06/nyaggle-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ca7351604db14dab7607a9429e2daeb", "sha256": "dd8a2d1aedd6dc79fdd1851ae359b593b35c49fafed5192d71568fe25bc7ddb0"}, "downloads": -1, "filename": "nyaggle-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6ca7351604db14dab7607a9429e2daeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37270, "upload_time": "2020-03-01T03:45:16", "upload_time_iso_8601": "2020-03-01T03:45:16.188462Z", "url": "https://files.pythonhosted.org/packages/76/2f/290ee125f3b9a24a270b228accd15c24e1be2d6dca007b705f144114eb87/nyaggle-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d3e64c8a24ccc35f45bd09e5370410d1", "sha256": "e8c8a71c2bad01907e1207c2746588f6395cfe7a9700e0726bd6ce8a382ceca9"}, "downloads": -1, "filename": "nyaggle-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d3e64c8a24ccc35f45bd09e5370410d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50439, "upload_time": "2020-03-01T03:45:14", "upload_time_iso_8601": "2020-03-01T03:45:14.634781Z", "url": "https://files.pythonhosted.org/packages/74/8d/312231797c928acf4ce3e717cb5aa19798daa98acabf2fbdab8824292b06/nyaggle-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ca7351604db14dab7607a9429e2daeb", "sha256": "dd8a2d1aedd6dc79fdd1851ae359b593b35c49fafed5192d71568fe25bc7ddb0"}, "downloads": -1, "filename": "nyaggle-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6ca7351604db14dab7607a9429e2daeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37270, "upload_time": "2020-03-01T03:45:16", "upload_time_iso_8601": "2020-03-01T03:45:16.188462Z", "url": "https://files.pythonhosted.org/packages/76/2f/290ee125f3b9a24a270b228accd15c24e1be2d6dca007b705f144114eb87/nyaggle-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:01 2020"}