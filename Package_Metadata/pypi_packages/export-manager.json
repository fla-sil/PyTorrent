{"info": {"author": "Jacob Williams", "author_email": "jacobaw@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# export\\_manager\n\nThis tool helps manage automatic exports/backups of personal data (for example, from cloud services like Todoist or Goodreads).\n\nIt handles:\n\n- Running exports according to a schedule (note: export\\_manager itself must be run via a scheduler like cron/launchd/etc)\n- Keeping data and logs organized\n- Cleaning up old data\n- Gathering metrics and generating reports to help you see whether your backups are working\n\nTerminology:\n\n- **dataset**: a collection of parcels from a particular source, and related config and metadata\n- **parcel**: data exported on a single occasion (e.g. your Todoist data retrieved on 2020-0215T01:02:03Z) and related metadata\n\n## Getting Started\n\n1. Install python3 and pip\n2. `pip install export_manager`\n3. Use the tool to set up directories for each dataset:\n    ```bash\n   mkdir ~/exports\n   export_manager init ~/exports/todoist\n   export_manager init ~/exports/goodreads\n   # etc. The names can be anything you want, those are just examples.\n    ```\n    This will create a directory structure like this:\n    ```\n   ~/exports/\n       todoist/\n           config.toml\n           metrics.csv\n           data/\n           incomplete/\n           log/\n       goodreads/\n           config.toml\n           metrics.csv\n           data/\n           incomplete/\n           log/\n   ```\n4. Edit the `config.toml` file in each subdirectory to specify the schedule and the command to run.\n   For example, if you install [exporteer\\_todoist][exporteer_todoist] you could use the following config to export data from Todoist:\n    ```toml\n    # Command to invoke. $PARCEL_PATH will be set to ~/exports/todoist/data/DATETIME\n    # $DATASET_PATH is also available and will be set to ~/exports/todoist\n    cmd = \"TODOIST_API_TOKEN=your_token exporteer_todoist full_sync > $PARCEL_PATH.json\"\n    # Only get a new export if the last one is at least 1 day old.\n    interval = \"1 day\"\n    # Only keep the most recent 5 successful exports.\n    # If you don't specify this, export_manager will not delete old exports.\n    keep = 5\n    ```\n5. Run `export_manager process ~/exports/*` to run all the exports and cleanups that are due.\n   Set up a cron or launchd job to run this periodically.\n\n## Metrics and Reports\n\nYou shouldn't trust your backups unless you're testing them.\nTesting has to involve some manual action - if it were fully automated, you'd never know if the automation broke.\nBut ideally, you'd automate the process of collecting all the evidence to prove that a backup is working, so that all you have to do is periodically look at it and say \"yep, looks good.\"\n\nexport\\_manager helps with this by providing a report you can generate:\n\n```bash\nexport_manager report ~/exports/*\n```\n\nThis will:\n\n- Warn you of any obvious problems, such as datasets that are overdue or failing.\n- Tell you when each dataset was most recently exported successfully.\n- Show you metrics about each dataset's most recent successful parcel, and compare them with metrics from 7 days and 180 days ago.\n\nBy default, the metrics include the number of bytes and number of files in the parcel when it was produced.\n\nYou can also define custom metrics for each dataset in the `config.toml` file.\nFor example, for json data, you might use [jq](https://stedolan.github.io/jq/) to count some elements of the json.\nThe following config creates a metric named \"tasks\" to track the number of tasks in the todoist exports configured above:\n\n```toml\nmetrics.tasks.cmd = \"jq '.items | length' $PARCEL_PATH\"\n```\n\nThe `process` command gathers all the configured metrics every time a new parcel is produced and stores them in `metrics.csv`.\n\n## Tracking Parcels in Git\n\nIf you make your dataset directory a git repo, and set `git = true` in `config.toml`, then the data files of successful exports, as well as the metrics.csv file, will be committed after each change.\n\n## Ingesting Files Directly\n\nSome services are prohibitively difficult to export from automatically, but do provide a way to manually export your data.\nexport\\_manager can keep track of those manual exports for you.\nTo minimize the amount of manual work, you can configure it to automatically pull in any files that match a certain path pattern, so that all you need to do is dump the manually exported file into that location.\nFor example, if you put the following in `config.toml`:\n\n```toml\ningest.paths = [\"/Users/me/Dropbox/*.opml\"]\n```\n\nThen every time the `process` command is run, export\\_manager will check for files with that suffix in `/Users/me/Dropbox`.\nIf it finds any, it will **move** them into the dataset directory, assign them a parcel ID, run metrics on them, etc.\n\n(By default, the modification time of the file is used as the parcel ID.\nYou can put `ingest.time_source = \"now\"` in your `config.toml` if you'd rather use the current date/time as the parcel ID.)\n\n## Additional Documentation\n\nHelp for each command is available on the command line and in the [doc folder](doc/).\n\nYou can use export\\_manager programmatically.\nThe most important module is [export\\_manager.dataset](src/export_manager/dataset.py).\n\n## Development\n\nSetup:\n\n1. Install python3 and pip\n2. Clone the repo\n3. I recommend creating a venv:\n    ```bash\n    cd export_manager\n    python3 -m venv venv\n    source venv/bin/activate\n    ```\n4. Install dependencies:\n    ```bash\n   pip install .\n   pip install -r requirements-dev.txt\n    ```\n\nTo run unit tests:\n\n```bash\nPYTHONPATH=src pytest\n```\n\n(Overriding PYTHONPATH as shown ensures the tests run against the code in the src/ directory rather than the installed copy of the package.)\n\nTo run the CLI:\n\n```bash\nPYTHONPATH=src python -m export_manager ...\n```\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/brokensandals/export_manager.\n\n## License\n\nThis is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n\n[exporteer_todoist]: https://github.com/brokensandals/exporteer_todoist\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brokensandals/export_manager", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "export-manager", "package_url": "https://pypi.org/project/export-manager/", "platform": "", "project_url": "https://pypi.org/project/export-manager/", "project_urls": {"Homepage": "https://github.com/brokensandals/export_manager"}, "release_url": "https://pypi.org/project/export-manager/0.0.4/", "requires_dist": ["gitdb (>=4)", "GitPython (>=3.1)", "toml (>=0.10)"], "requires_python": ">=3.7", "summary": "A tool for managing automated exports of personal data", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>export_manager</h1>\n<p>This tool helps manage automatic exports/backups of personal data (for example, from cloud services like Todoist or Goodreads).</p>\n<p>It handles:</p>\n<ul>\n<li>Running exports according to a schedule (note: export_manager itself must be run via a scheduler like cron/launchd/etc)</li>\n<li>Keeping data and logs organized</li>\n<li>Cleaning up old data</li>\n<li>Gathering metrics and generating reports to help you see whether your backups are working</li>\n</ul>\n<p>Terminology:</p>\n<ul>\n<li><strong>dataset</strong>: a collection of parcels from a particular source, and related config and metadata</li>\n<li><strong>parcel</strong>: data exported on a single occasion (e.g. your Todoist data retrieved on 2020-0215T01:02:03Z) and related metadata</li>\n</ul>\n<h2>Getting Started</h2>\n<ol>\n<li>Install python3 and pip</li>\n<li><code>pip install export_manager</code></li>\n<li>Use the tool to set up directories for each dataset:\n<pre>mkdir ~/exports\nexport_manager init ~/exports/todoist\nexport_manager init ~/exports/goodreads\n<span class=\"c1\"># etc. The names can be anything you want, those are just examples.</span>\n</pre>\nThis will create a directory structure like this:\n<pre><code>~/exports/\n   todoist/\n       config.toml\n       metrics.csv\n       data/\n       incomplete/\n       log/\n   goodreads/\n       config.toml\n       metrics.csv\n       data/\n       incomplete/\n       log/\n</code></pre>\n</li>\n<li>Edit the <code>config.toml</code> file in each subdirectory to specify the schedule and the command to run.\nFor example, if you install <a href=\"https://github.com/brokensandals/exporteer_todoist\" rel=\"nofollow\">exporteer_todoist</a> you could use the following config to export data from Todoist:\n<pre><span class=\"c1\"># Command to invoke. $PARCEL_PATH will be set to ~/exports/todoist/data/DATETIME</span>\n<span class=\"c1\"># $DATASET_PATH is also available and will be set to ~/exports/todoist</span>\n<span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"s\">\"TODOIST_API_TOKEN=your_token exporteer_todoist full_sync &gt; $PARCEL_PATH.json\"</span>\n<span class=\"c1\"># Only get a new export if the last one is at least 1 day old.</span>\n<span class=\"n\">interval</span> <span class=\"o\">=</span> <span class=\"s\">\"1 day\"</span>\n<span class=\"c1\"># Only keep the most recent 5 successful exports.</span>\n<span class=\"c1\"># If you don't specify this, export_manager will not delete old exports.</span>\n<span class=\"n\">keep</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n</pre>\n</li>\n<li>Run <code>export_manager process ~/exports/*</code> to run all the exports and cleanups that are due.\nSet up a cron or launchd job to run this periodically.</li>\n</ol>\n<h2>Metrics and Reports</h2>\n<p>You shouldn't trust your backups unless you're testing them.\nTesting has to involve some manual action - if it were fully automated, you'd never know if the automation broke.\nBut ideally, you'd automate the process of collecting all the evidence to prove that a backup is working, so that all you have to do is periodically look at it and say \"yep, looks good.\"</p>\n<p>export_manager helps with this by providing a report you can generate:</p>\n<pre>export_manager report ~/exports/*\n</pre>\n<p>This will:</p>\n<ul>\n<li>Warn you of any obvious problems, such as datasets that are overdue or failing.</li>\n<li>Tell you when each dataset was most recently exported successfully.</li>\n<li>Show you metrics about each dataset's most recent successful parcel, and compare them with metrics from 7 days and 180 days ago.</li>\n</ul>\n<p>By default, the metrics include the number of bytes and number of files in the parcel when it was produced.</p>\n<p>You can also define custom metrics for each dataset in the <code>config.toml</code> file.\nFor example, for json data, you might use <a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow\">jq</a> to count some elements of the json.\nThe following config creates a metric named \"tasks\" to track the number of tasks in the todoist exports configured above:</p>\n<pre><span class=\"n\">metrics</span><span class=\"p\">.</span><span class=\"n\">tasks</span><span class=\"p\">.</span><span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"s\">\"jq '.items | length' $PARCEL_PATH\"</span>\n</pre>\n<p>The <code>process</code> command gathers all the configured metrics every time a new parcel is produced and stores them in <code>metrics.csv</code>.</p>\n<h2>Tracking Parcels in Git</h2>\n<p>If you make your dataset directory a git repo, and set <code>git = true</code> in <code>config.toml</code>, then the data files of successful exports, as well as the metrics.csv file, will be committed after each change.</p>\n<h2>Ingesting Files Directly</h2>\n<p>Some services are prohibitively difficult to export from automatically, but do provide a way to manually export your data.\nexport_manager can keep track of those manual exports for you.\nTo minimize the amount of manual work, you can configure it to automatically pull in any files that match a certain path pattern, so that all you need to do is dump the manually exported file into that location.\nFor example, if you put the following in <code>config.toml</code>:</p>\n<pre><span class=\"n\">ingest</span><span class=\"p\">.</span><span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"k\">[\"/Users/me/Dropbox/*.opml\"]</span>\n</pre>\n<p>Then every time the <code>process</code> command is run, export_manager will check for files with that suffix in <code>/Users/me/Dropbox</code>.\nIf it finds any, it will <strong>move</strong> them into the dataset directory, assign them a parcel ID, run metrics on them, etc.</p>\n<p>(By default, the modification time of the file is used as the parcel ID.\nYou can put <code>ingest.time_source = \"now\"</code> in your <code>config.toml</code> if you'd rather use the current date/time as the parcel ID.)</p>\n<h2>Additional Documentation</h2>\n<p>Help for each command is available on the command line and in the <a href=\"doc/\" rel=\"nofollow\">doc folder</a>.</p>\n<p>You can use export_manager programmatically.\nThe most important module is <a href=\"src/export_manager/dataset.py\" rel=\"nofollow\">export_manager.dataset</a>.</p>\n<h2>Development</h2>\n<p>Setup:</p>\n<ol>\n<li>Install python3 and pip</li>\n<li>Clone the repo</li>\n<li>I recommend creating a venv:\n<pre><span class=\"nb\">cd</span> export_manager\npython3 -m venv venv\n<span class=\"nb\">source</span> venv/bin/activate\n</pre>\n</li>\n<li>Install dependencies:\n<pre>pip install .\npip install -r requirements-dev.txt\n</pre>\n</li>\n</ol>\n<p>To run unit tests:</p>\n<pre><span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span>src pytest\n</pre>\n<p>(Overriding PYTHONPATH as shown ensures the tests run against the code in the src/ directory rather than the installed copy of the package.)</p>\n<p>To run the CLI:</p>\n<pre><span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span>src python -m export_manager ...\n</pre>\n<h2>Contributing</h2>\n<p>Bug reports and pull requests are welcome on GitHub at <a href=\"https://github.com/brokensandals/export_manager\" rel=\"nofollow\">https://github.com/brokensandals/export_manager</a>.</p>\n<h2>License</h2>\n<p>This is available as open source under the terms of the <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 7094641, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "925ffb811b803e3ba128402d8c93e5b4", "sha256": "62d0a195c2cd9e6377bcc4626d1fa5a0058f662deddeb0f6bca3e50fd43aa351"}, "downloads": -1, "filename": "export_manager-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "925ffb811b803e3ba128402d8c93e5b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 14947, "upload_time": "2020-04-10T22:21:34", "upload_time_iso_8601": "2020-04-10T22:21:34.894299Z", "url": "https://files.pythonhosted.org/packages/24/92/c502060b4497b2cdafb811208fca2c3ecb4b4bdd17979d0dedd073824cfd/export_manager-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e941168f363bb42ef502ef2172c92c6", "sha256": "11bf2fd78b059005d06e08454b41906dbd071f03c529a1d7e515d939f511687d"}, "downloads": -1, "filename": "export_manager-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1e941168f363bb42ef502ef2172c92c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14416, "upload_time": "2020-04-10T22:21:36", "upload_time_iso_8601": "2020-04-10T22:21:36.965552Z", "url": "https://files.pythonhosted.org/packages/b5/ef/2055835484b3bb36b0748ae3fe7d641515271a8da7b80a953ce6ee51429b/export_manager-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "7c8916281bc998302a9b4fe6c4a47804", "sha256": "702ee574971957d04ec9ab8457be265c076c87bbe86713a89cd0960fe98fbe80"}, "downloads": -1, "filename": "export_manager-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7c8916281bc998302a9b4fe6c4a47804", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 17177, "upload_time": "2020-04-11T23:00:01", "upload_time_iso_8601": "2020-04-11T23:00:01.774959Z", "url": "https://files.pythonhosted.org/packages/65/cf/6db7ef63f9bf93b60871fc6f0e32d2045ea1c8ad390df8ebef3938dbaa5b/export_manager-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b86606ab369288eb1fe68485a7589341", "sha256": "36fde53c8637141a1937e5e6ecb3ebcbd30ada559151b7a6882695b993606976"}, "downloads": -1, "filename": "export_manager-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b86606ab369288eb1fe68485a7589341", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17126, "upload_time": "2020-04-11T23:00:02", "upload_time_iso_8601": "2020-04-11T23:00:02.961499Z", "url": "https://files.pythonhosted.org/packages/2f/88/2eff9b9b8d5bf59eef02806cabc29f1d4507a689819ad94a23272820ea8c/export_manager-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "78309eff5229cdcd3ece86788efcb3ae", "sha256": "ba0a01fb80c43c151ddf7d54abf12a77efc19846af5b95b520c84197b29f5c06"}, "downloads": -1, "filename": "export_manager-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "78309eff5229cdcd3ece86788efcb3ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 17182, "upload_time": "2020-04-13T06:22:42", "upload_time_iso_8601": "2020-04-13T06:22:42.273463Z", "url": "https://files.pythonhosted.org/packages/3b/cd/1ddc57c5803623bb77feb429bfaeea718c56dcc0601070e284409451acd6/export_manager-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e75ccd1b0b4759dd2bd66806054f3a1", "sha256": "102d00b40df2c77862ac4373b89c5004180e6c938179c2cec0b3f6b6da674bf7"}, "downloads": -1, "filename": "export_manager-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9e75ccd1b0b4759dd2bd66806054f3a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17121, "upload_time": "2020-04-13T06:22:43", "upload_time_iso_8601": "2020-04-13T06:22:43.514030Z", "url": "https://files.pythonhosted.org/packages/e3/e9/ecd618c76a080c2fd8f6bc7adf6bfa2d97431decc7dfb384b4953d0b4ebe/export_manager-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b4f8346af5bf2f8b035a079c8d06acc2", "sha256": "7e336945ec58791b118032ae0dfad3ff4c7b745b458c9162a5957693d1c7e6ac"}, "downloads": -1, "filename": "export_manager-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b4f8346af5bf2f8b035a079c8d06acc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 17093, "upload_time": "2020-04-24T17:27:22", "upload_time_iso_8601": "2020-04-24T17:27:22.671360Z", "url": "https://files.pythonhosted.org/packages/9e/5f/d637445ddb61a22ee5c8459df8625d5f6f4ab6872fb63fa162e8f6aa63c6/export_manager-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c899672606123ef844b2631f3975e728", "sha256": "80ba3b767a806d94f624fa6eb1ba1693e87c697711becc0f0c9d8292fc0b5ba1"}, "downloads": -1, "filename": "export_manager-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c899672606123ef844b2631f3975e728", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17015, "upload_time": "2020-04-24T17:27:24", "upload_time_iso_8601": "2020-04-24T17:27:24.026137Z", "url": "https://files.pythonhosted.org/packages/d0/5d/942c59b3b7d1bb291c38e81afd32a4f9135470b439f5f01328d85c6cea74/export_manager-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b4f8346af5bf2f8b035a079c8d06acc2", "sha256": "7e336945ec58791b118032ae0dfad3ff4c7b745b458c9162a5957693d1c7e6ac"}, "downloads": -1, "filename": "export_manager-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b4f8346af5bf2f8b035a079c8d06acc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 17093, "upload_time": "2020-04-24T17:27:22", "upload_time_iso_8601": "2020-04-24T17:27:22.671360Z", "url": "https://files.pythonhosted.org/packages/9e/5f/d637445ddb61a22ee5c8459df8625d5f6f4ab6872fb63fa162e8f6aa63c6/export_manager-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c899672606123ef844b2631f3975e728", "sha256": "80ba3b767a806d94f624fa6eb1ba1693e87c697711becc0f0c9d8292fc0b5ba1"}, "downloads": -1, "filename": "export_manager-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c899672606123ef844b2631f3975e728", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17015, "upload_time": "2020-04-24T17:27:24", "upload_time_iso_8601": "2020-04-24T17:27:24.026137Z", "url": "https://files.pythonhosted.org/packages/d0/5d/942c59b3b7d1bb291c38e81afd32a4f9135470b439f5f01328d85c6cea74/export_manager-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:36 2020"}