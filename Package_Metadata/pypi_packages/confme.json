{"info": {"author": "Iwan Silvan Bolzern", "author_email": "iwan.bolzern@zuehlke.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Healthcare Industry", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# ConfMe: Configuration Made Easy \ud83d\udc96\n[![image](https://img.shields.io/pypi/v/confme?color=blue)](https://pypi.org/project/confme/)\n[![image](https://img.shields.io/pypi/l/confme)](https://pypi.org/project/confme/)\n[![image](https://github.com/iwanbolzern/ConfMe/workflows/Test/badge.svg?branch=master)](https://pypi.org/project/confme/)\n[![image](https://img.shields.io/pypi/pyversions/confme?color=blue)](https://pypi.org/project/confme/)\n\nConfMe is a simple to use, production ready application configuration management library, which takes into consideration the following three thoughts:\n1. Access to configuration values must be safe at runtime. **No ```myconfig['value1']['subvalue']``` anymore!**\n2. The configuration must be checked for consistency at startup e.g. type check, range check, ...\n3. Secrets shall be injectable from environment variables\n\nConfMe makes all these features possible with just a few type annotations on plain Python objects.\n\n## Installation\nConfMe can be installed from the official python package repository [pypi](https://pypi.org/project/confme/)\n```\npip install confme\n```\nOr, if you're using pipenv:\n```\npipenv install confme\n```\nOr, if you're using poetry:\n```\npoetry add confme\n```\n\n## Basic Usage of confme\nDefine your config structure as plain python objects with type annotations:\n```python\nfrom confme import BaseConfig\n\nclass DatabaseConfig(BaseConfig):\n    host: str\n    port: int\n    user: str\n\nclass MyConfig(BaseConfig):\n    name: int\n    database: DatabaseConfig\n```\nCreate a configuration yaml file with the same structure as your configuration classes have:\n```yaml\nname: \"Database Application\"\ndatabase:\n    host: \"localhost\"\n    port: 5000\n    user: \"any-db-user\"\n```\nLoad the yaml file into your Python object structure and access it in a secure manner:\n```python\nmy_config = MyConfig.load('config.yaml')\n\nprint(f'Using database connection {my_config.database.host} '\n      f'on port {my_config.database.port}')\n```\nIn the background the yaml file is parsed and mapped to the defined object structure. While mapping the values to object properties, type checks are performed. If a value is not available or is not of the correct type, an error is generated already when the configuration is loaded.\n\n## Supported Annotations\nConfMe is based on pydantic and supports all annotations provided by pydantic. The most important annotations are listed and explain bellow. For the whole list, please checkout [Field Types](https://pydantic-docs.helpmanual.io/usage/types/):\n- str\n- int\n- float\n- bool\n- typing.List[x]\n- typing.Optional[x]\n- [Secret](#secret)\n- [Range](#range)\n- [Enum](#enum)\n\n### Secret\nWith the Secret annotation you can inject secrets from environment variables directly into your configuration structure. This is especially handy when you're deploying applications by using docker. Therefore, let's extend the previous example with a Secret annotation:\n```python\n...\nfrom confme import BaseConfig\nfrom confme.annotation import Secret\n\nclass DatabaseConfig(BaseConfig):\n    ...\n    password: str = Secret('highSecurePassword')\n```\nNow set the password to the defined environment variable:\n```bash\nexport highSecurePassword=\"This is my password\"\n```\nLoad your config and check for the injected password.\n```\nmy_config = MyConfig.load('config.yaml')\nprint(f'My password is: {my_config.database.password}')\n```\n\n### Range\nConfME supports OpenRange, ClosedRange and MixedRange values. The terms open and close are similar to open and closed intervals in mathematics. This means, if you want to include the lower and upper range use ClosedRange otherwise OpenRange:  \n* ```ClosedRange(2, 3)``` will include 2 and 3\n* ```OpenRange(2, 3)``` will not include 2 and 3\n\nIf you want to have a mixture of both, e.g. include 2 but exclude 3 use MixedRange:  \n* ```MixedRange(ge=2, lt=3)``` will include 2 but exclude 3\n\n```python\n...\nfrom confme import BaseConfig\nfrom confme.annotation import ClosedRange\n\nclass DatabaseConfig(BaseConfig):\n    ...\n    password: int = ClosedRange(2, 3)\n```\n\n### Enum\n```python\nfrom enum import Enum\n\nclass DatabaseConnection(Enum):\n    TCP = 'tcp'\n    UDP = 'udp'\n\nclass DatabaseConfig(BaseConfig):\n    ...\n    connection_type: DatabaseConnection\n```\n\n## LICENSE\nConfMe is released under the [MIT](LICENSE) license.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iwanbolzern/confme", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "confme", "package_url": "https://pypi.org/project/confme/", "platform": "", "project_url": "https://pypi.org/project/confme/", "project_urls": {"Homepage": "https://github.com/iwanbolzern/confme", "Repository": "https://github.com/iwanbolzern/confme"}, "release_url": "https://pypi.org/project/confme/0.0.4/", "requires_dist": ["pyyaml (>=5.3,<6.0)", "pydantic (>=1.4,<2.0)"], "requires_python": ">=3.6,<4.0", "summary": "Easy configuration management in python", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ConfMe: Configuration Made Easy \ud83d\udc96</h1>\n<p><a href=\"https://pypi.org/project/confme/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4fb2306c672c471ac721a2a3d0d7db9cd9e45cf9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6e666d653f636f6c6f723d626c7565\"></a>\n<a href=\"https://pypi.org/project/confme/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ccf37bc5e49f2f25c0013645bdad54e636fae55/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f636f6e666d65\"></a>\n<a href=\"https://pypi.org/project/confme/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2619061396443b0617e64554096b7cc75de701fd/68747470733a2f2f6769746875622e636f6d2f6977616e626f6c7a65726e2f436f6e664d652f776f726b666c6f77732f546573742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/confme/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35d8ccb3ba3938a8d2a23bf12be2e1c30b2eed72/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636f6e666d653f636f6c6f723d626c7565\"></a></p>\n<p>ConfMe is a simple to use, production ready application configuration management library, which takes into consideration the following three thoughts:</p>\n<ol>\n<li>Access to configuration values must be safe at runtime. <strong>No <code>myconfig['value1']['subvalue']</code> anymore!</strong></li>\n<li>The configuration must be checked for consistency at startup e.g. type check, range check, ...</li>\n<li>Secrets shall be injectable from environment variables</li>\n</ol>\n<p>ConfMe makes all these features possible with just a few type annotations on plain Python objects.</p>\n<h2>Installation</h2>\n<p>ConfMe can be installed from the official python package repository <a href=\"https://pypi.org/project/confme/\" rel=\"nofollow\">pypi</a></p>\n<pre><code>pip install confme\n</code></pre>\n<p>Or, if you're using pipenv:</p>\n<pre><code>pipenv install confme\n</code></pre>\n<p>Or, if you're using poetry:</p>\n<pre><code>poetry add confme\n</code></pre>\n<h2>Basic Usage of confme</h2>\n<p>Define your config structure as plain python objects with type annotations:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">confme</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConfig</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">DatabaseConfig</span>\n</pre>\n<p>Create a configuration yaml file with the same structure as your configuration classes have:</p>\n<pre><span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Database</span><span class=\"nv\"> </span><span class=\"s\">Application\"</span>\n<span class=\"nt\">database</span><span class=\"p\">:</span>\n    <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"s\">\"localhost\"</span>\n    <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5000</span>\n    <span class=\"nt\">user</span><span class=\"p\">:</span> <span class=\"s\">\"any-db-user\"</span>\n</pre>\n<p>Load the yaml file into your Python object structure and access it in a secure manner:</p>\n<pre><span class=\"n\">my_config</span> <span class=\"o\">=</span> <span class=\"n\">MyConfig</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'config.yaml'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Using database connection </span><span class=\"si\">{</span><span class=\"n\">my_config</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s1\"> '</span>\n      <span class=\"sa\">f</span><span class=\"s1\">'on port </span><span class=\"si\">{</span><span class=\"n\">my_config</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>In the background the yaml file is parsed and mapped to the defined object structure. While mapping the values to object properties, type checks are performed. If a value is not available or is not of the correct type, an error is generated already when the configuration is loaded.</p>\n<h2>Supported Annotations</h2>\n<p>ConfMe is based on pydantic and supports all annotations provided by pydantic. The most important annotations are listed and explain bellow. For the whole list, please checkout <a href=\"https://pydantic-docs.helpmanual.io/usage/types/\" rel=\"nofollow\">Field Types</a>:</p>\n<ul>\n<li>str</li>\n<li>int</li>\n<li>float</li>\n<li>bool</li>\n<li>typing.List[x]</li>\n<li>typing.Optional[x]</li>\n<li><a href=\"#secret\" rel=\"nofollow\">Secret</a></li>\n<li><a href=\"#range\" rel=\"nofollow\">Range</a></li>\n<li><a href=\"#enum\" rel=\"nofollow\">Enum</a></li>\n</ul>\n<h3>Secret</h3>\n<p>With the Secret annotation you can inject secrets from environment variables directly into your configuration structure. This is especially handy when you're deploying applications by using docker. Therefore, let's extend the previous example with a Secret annotation:</p>\n<pre><span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">confme</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">confme.annotation</span> <span class=\"kn\">import</span> <span class=\"n\">Secret</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Secret</span><span class=\"p\">(</span><span class=\"s1\">'highSecurePassword'</span><span class=\"p\">)</span>\n</pre>\n<p>Now set the password to the defined environment variable:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">highSecurePassword</span><span class=\"o\">=</span><span class=\"s2\">\"This is my password\"</span>\n</pre>\n<p>Load your config and check for the injected password.</p>\n<pre><code>my_config = MyConfig.load('config.yaml')\nprint(f'My password is: {my_config.database.password}')\n</code></pre>\n<h3>Range</h3>\n<p>ConfME supports OpenRange, ClosedRange and MixedRange values. The terms open and close are similar to open and closed intervals in mathematics. This means, if you want to include the lower and upper range use ClosedRange otherwise OpenRange:</p>\n<ul>\n<li><code>ClosedRange(2, 3)</code> will include 2 and 3</li>\n<li><code>OpenRange(2, 3)</code> will not include 2 and 3</li>\n</ul>\n<p>If you want to have a mixture of both, e.g. include 2 but exclude 3 use MixedRange:</p>\n<ul>\n<li><code>MixedRange(ge=2, lt=3)</code> will include 2 but exclude 3</li>\n</ul>\n<pre><span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">confme</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">confme.annotation</span> <span class=\"kn\">import</span> <span class=\"n\">ClosedRange</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">ClosedRange</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h3>Enum</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseConnection</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">TCP</span> <span class=\"o\">=</span> <span class=\"s1\">'tcp'</span>\n    <span class=\"n\">UDP</span> <span class=\"o\">=</span> <span class=\"s1\">'udp'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseConfig</span><span class=\"p\">(</span><span class=\"n\">BaseConfig</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">connection_type</span><span class=\"p\">:</span> <span class=\"n\">DatabaseConnection</span>\n</pre>\n<h2>LICENSE</h2>\n<p>ConfMe is released under the <a href=\"LICENSE\" rel=\"nofollow\">MIT</a> license.</p>\n\n          </div>"}, "last_serial": 6811198, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b9b233a86e29fb0340d982e38f1743b8", "sha256": "cbda9fafad52643c3689f80dce0018806034505422599572ac7eff3545a7ee22"}, "downloads": -1, "filename": "confme-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b9b233a86e29fb0340d982e38f1743b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4966, "upload_time": "2020-02-23T19:09:32", "upload_time_iso_8601": "2020-02-23T19:09:32.042955Z", "url": "https://files.pythonhosted.org/packages/97/15/673ca5be248dd9a8049621c3a821428682d7b94b5bd7c850f47a2910f1fb/confme-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1e3ad12ccaa755b74dcac5c80f8f583", "sha256": "c28ae7c921b751af4e2cbb2265d8a347c39c121ee3200dd1b7ef3ca53e65af09"}, "downloads": -1, "filename": "confme-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c1e3ad12ccaa755b74dcac5c80f8f583", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2849, "upload_time": "2020-02-23T19:09:33", "upload_time_iso_8601": "2020-02-23T19:09:33.752247Z", "url": "https://files.pythonhosted.org/packages/b4/fa/e2fbc2fd3a20e34884cb909d9bc6b0f07867d56f7f95ec2c22c5ab44bd33/confme-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "03d54dac046c25a4598b84ebdd8998b5", "sha256": "19254f93fbfc002d4a1464f339f88303bb65c00470fb2776e03087cc7a33a55c"}, "downloads": -1, "filename": "confme-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "03d54dac046c25a4598b84ebdd8998b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 13828, "upload_time": "2020-03-03T15:11:01", "upload_time_iso_8601": "2020-03-03T15:11:01.354787Z", "url": "https://files.pythonhosted.org/packages/60/7e/4ca33dbbae95a395cd31f2a14916914fd26ee8e33614ed90102888a6c47f/confme-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e352a2052f75b9089ef02c5c57cfd2c", "sha256": "83625d8761f027cbc6a75c4b93e7e7b0373081dddebe21f38b68ec69a490176d"}, "downloads": -1, "filename": "confme-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6e352a2052f75b9089ef02c5c57cfd2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 12929, "upload_time": "2020-03-03T15:11:02", "upload_time_iso_8601": "2020-03-03T15:11:02.442783Z", "url": "https://files.pythonhosted.org/packages/0e/83/1f77eb7efd0692666c272195cfe092a1398c548cfe855cb952ec4594d66f/confme-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2839a29b5b4a5b0de005706605c65f10", "sha256": "fff4f2c93601c236fee3e2e536b2acbc504eda1fbf98f3ebe10103b8f9fd7883"}, "downloads": -1, "filename": "confme-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2839a29b5b4a5b0de005706605c65f10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 14056, "upload_time": "2020-03-04T07:48:10", "upload_time_iso_8601": "2020-03-04T07:48:10.635098Z", "url": "https://files.pythonhosted.org/packages/30/78/915128c1a0f9b756a9a306f018ad48f0ef5bc26b176e8ce19b101611b5de/confme-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2c833befa2f08fa08724609931e8bbd", "sha256": "406189dc31b3b26c4312238d00f1fa6b714d7c7b1d58a3f24b960118d017ae99"}, "downloads": -1, "filename": "confme-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c2c833befa2f08fa08724609931e8bbd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 13433, "upload_time": "2020-03-04T07:48:12", "upload_time_iso_8601": "2020-03-04T07:48:12.018014Z", "url": "https://files.pythonhosted.org/packages/51/83/fea696fa2011a5a6ba61514cf09af2529ca02b4f1f1ef14f0ea6f7a1e2d1/confme-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "1d8a48471bc65703792844f9ef8b9596", "sha256": "91dc96fa924cecc87c74405d712b8987493b61047bd5c4720382525fe2e6ea1a"}, "downloads": -1, "filename": "confme-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1d8a48471bc65703792844f9ef8b9596", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12681, "upload_time": "2020-03-14T12:34:38", "upload_time_iso_8601": "2020-03-14T12:34:38.909722Z", "url": "https://files.pythonhosted.org/packages/59/b4/ab7d463a673254cbf6d8ee5bd17b768bd409516532f677f7871940e938f0/confme-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cb5374a464793ec11a0ef1f0ac2f207", "sha256": "4f1360e5232ed9fcbe6a3c21944dde04f20e4390d02ccf1a1ef66b213495364a"}, "downloads": -1, "filename": "confme-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6cb5374a464793ec11a0ef1f0ac2f207", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13188, "upload_time": "2020-03-14T12:34:39", "upload_time_iso_8601": "2020-03-14T12:34:39.961185Z", "url": "https://files.pythonhosted.org/packages/be/04/2f75a635b1c17f328b07e613e0011b27520a9ce4c790f0708ef1d4b4b54b/confme-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d8a48471bc65703792844f9ef8b9596", "sha256": "91dc96fa924cecc87c74405d712b8987493b61047bd5c4720382525fe2e6ea1a"}, "downloads": -1, "filename": "confme-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1d8a48471bc65703792844f9ef8b9596", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12681, "upload_time": "2020-03-14T12:34:38", "upload_time_iso_8601": "2020-03-14T12:34:38.909722Z", "url": "https://files.pythonhosted.org/packages/59/b4/ab7d463a673254cbf6d8ee5bd17b768bd409516532f677f7871940e938f0/confme-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cb5374a464793ec11a0ef1f0ac2f207", "sha256": "4f1360e5232ed9fcbe6a3c21944dde04f20e4390d02ccf1a1ef66b213495364a"}, "downloads": -1, "filename": "confme-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6cb5374a464793ec11a0ef1f0ac2f207", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13188, "upload_time": "2020-03-14T12:34:39", "upload_time_iso_8601": "2020-03-14T12:34:39.961185Z", "url": "https://files.pythonhosted.org/packages/be/04/2f75a635b1c17f328b07e613e0011b27520a9ce4c790f0708ef1d4b4b54b/confme-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:48 2020"}