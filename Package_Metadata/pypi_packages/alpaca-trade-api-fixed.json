{"info": {"author": "Alpaca", "author_email": "a.wlezien@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![PyPI version](https://badge.fury.io/py/alpaca-trade-api.svg)](https://badge.fury.io/py/alpaca-trade-api)\n[![CircleCI](https://circleci.com/gh/alpacahq/alpaca-trade-api-python.svg?style=shield)](https://circleci.com/gh/alpacahq/alpaca-trade-api-python)\n\n# alpaca-trade-api-python\n\n`alpaca-trade-api-python` is a python library for the Alpaca trade API.\nIt allows rapid trading algo development easily, with support for the\nboth REST and streaming interfaces. For details of each API behavior,\nplease see the online API document.\n\nNote this module supports only python version 3.5 and above, due to\nthe async/await keyword use.\n\n## Install\n\n```bash\n$ pip3 install alpaca-trade-api\n```\n\n## Example\n\nIn order to call Alpaca's trade API, you need to obtain API key pairs.\nReplace <key_id> and <secret_key> with what you get from the web console.\n\n### REST example\n```python\nimport alpaca_trade_api as tradeapi\n\napi = tradeapi.REST('<key_id>', '<secret_key>')\naccount = api.get_account()\napi.list_positions()\n```\n\n## API Document\n\nThe HTTP API document is located in https://docs.alpaca.markets/\n\n## Authentication\n\nThe Alpaca API requires API key ID and secret key, which you can obtain from the\nweb console after you sign in.  You can pass `key_id` and `secret_key` to the initializers of\n`REST` or `StreamConn` as arguments, or set up environment variables as\nfollows.\n\n- APCA_API_KEY_ID: key ID\n- APCA_API_SECRET_KEY: secret key\n\n## Base URL\n\nThe base URL for API calls defaults to `https://api.alpaca.markets/`. This endpoint\nis for live trading, and for paper trading and other purposes, you can to change\nthe base URL. You can pass `base_url` kwarg to `REST()`, or using the environment\nvariable, `APCA_API_BASE_URL`.\n\nThe environment variable `APCA_API_DATA_URL` can also be changed to configure the\nendpoint for returning data from the `/bars` endpoint. By default, it will use\n`https://data.alpaca.markets`.\n\n## REST\n\nThe `REST` class is the entry point for the API request.  The instance of this\nclass provides all REST API calls such as account, orders, positions,\nand bars.\n\nEach returned object is wrapped by a subclass of `Entity` class (or a list of it).\nThis helper class provides property access (the \"dot notation\") to the\njson object, backed by the original object stored in the `_raw` field.\nIt also converts certain types to the appropriate python object.\n\n```python\nimport alpaca_trade_api as tradeapi\n\napi = tradeapi.REST()\naccount = api.get_account()\naccount.status\n=> 'ACTIVE'\n```\n\nThe `Entity` class also converts timestamp string field to a pandas.Timestamp\nobject.  Its `_raw` property returns the original raw primitive data unmarshaled\nfrom the response JSON text.\n\nWhen a REST API call sees the 429 or 504 status code, this library retries 3 times\nby default, with 3 seconds apart between each call. These are configurable with\nthe following environment variables.\n\n- APCA_RETRY_MAX: the number of subsequent API calls to retry, defaults to 3\n- APCA_RETRY_WAIT: seconds to wait between each call, defaults to 3\n- APCA_RETRY_CODES: comma-separated HTTP status code for which retry is attempted\n\nIf the retry exceeds, or other API error is returned, `alpaca_trade_api.rest.APIError` is raised.\nYou can access the following information through this object.\n\n- the API error code: `.code` property\n- the API error message: `str(error)`\n- the original request object: `.request` property\n- the original response objecgt: `.response` property\n- the HTTP status code: `.status_code` property\n\n### REST.get_account()\nCalls `GET /account` and returns an `Account` entity.\n\n### REST.list_orders(status=None, limit=None, after=None, until=None, direction=None)\nCalls `GET /orders` and returns a list of `Order` entities.\n`after` and `until` need to be string format, which you can obtain by `pd.Timestamp().isoformat()`\n\n### REST.submit_order(symbol, qty, side, type, time_in_force, limit_price=None, stop_price=None, client_order_id=None)\nCalls `POST /orders` and returns an `Order` entity.\n\n### REST.get_order_by_client_order_id(client_order_id)\nCalls `GET /orders` with client_order_id and returns an `Order` entity.\n\n### REST.get_order(order_id)\nCalls `GET /orders/{order_id}` and returns an `Order` entity.\n\n### REST.cancel_order(order_id)\nCalls `DELETE /orders/{order_id}`.\n\n### REST.list_positions()\nCalls `GET /positions` and returns a list of `Position` entities.\n\n### REST.get_position(symbol)\nCalls `GET /positions/{symbol}` and returns a `Position` entity.\n\n### REST.list_assets(status=None, asset_class=None)\nCalls `GET /assets` and returns a list of `Asset` entities.\n\n### REST.get_asset(symbol)\nCalls `GET /assets/{symbol}` and returns an `Asset` entity.\n\n### REST.get_barset(symbols, timeframe, limit, start=None, end=None, after=None, until=None)\nCalls `GET /bars/{timeframe}` for the given symbols, and returns a Barset with `limit` Bar objects\nfor each of the the requested symbols.\n`timeframe` can be one of `minute`, `1Min`, `5Min`, `15Min`, `day` or `1D`. `minute` is an alias\nof `1Min`. Similarly, `day` is an alias of `1D`.\n`start`, `end`, `after`, and `until` need to be string format, which you can obtain with\n`pd.Timestamp().isoformat()`\n`after` cannot be used with `start` and `until` cannot be used with `end`.\n\n### REST.get_clock()\nCalls `GET /clock` and returns a `Clock` entity.\n\n### REST.get_calendar(start=None, end=None)\nCalls `GET /calendar` and returns a `Calendar` entity.\n\n---\n\n## StreamConn\n\nThe `StreamConn` class provides WebSocket/NATS-based event-driven\ninterfaces.  Using the `on` decorator of the instance, you can\ndefine custom event handlers that are called when the pattern\nis matched on the channel name.  Once event handlers are set up,\ncall the `run` method which runs forever until a critical exception\nis raised. This module itself does not provide any threading\ncapability, so if you need to consume the messages pushed from the\nserver, you need to run it in a background thread.\n\nThis class provides a unique interface to the two interfaces, both\nAlpaca's account/trade updates events and Polygon's price updates.\nOne connection is established when the `subscribe()` is called with\nthe corresponding channel names.  For example, if you subscribe to\n`account_updates`, a WebSocket connects to Alpaca stream API, and\nif `AM.*` given to the `subscribe()` method, a NATS connection is\nestablished to Polygon's interface.\n\nThe `run` method is a short-cut to start subscribing to channels and\nrunnnig forever.  The call will be blocked forever until a critical\nexception is raised, and each event handler is called asynchronously\nupon the message arrivals.\n\nThe `run` method tries to reconnect to the server in the event of\nconnection failure.  In this case you may want to reset your state\nwhich is best in the `connect` event.  The method still raises\nexception in the case any other unknown error happens inside the\nevent loop.\n\nThe `msg` object passed to each handler is wrapped by the entity\nhelper class if the message is from the server.\n\nEach event handler has to be a marked as `async`.  Otherwise,\na `ValueError` is raised when registering it as an event handler.\n\n```python\nconn = StreamConn()\n\n@conn.on(r'account_updates')\nasync def on_account_updates(conn, channel, account):\n    print('account', account)\n\n\n@conn.on(r'^AM.')\ndef on_bars(conn, channel, bar):\n    print('bars', bar)\n\n\n# blocks forever\nconn.run(['account_updates', 'AM.*'])\n\n```\n\nYou will likely call the `run` method in a thread since it will keep running\nunless an exception is raised.\n\n### StreamConn.subscribe(channels)\nRequest \"listen\" to the server.  `channels` must be a list of string channel names.\n\n### StreamConn.run(channels)\nGoes into an infinite loop and awaits for messages from the server.  You should\nset up event listeners using the `on` or `register` method before calling `run`.\n\n### StreamConn.on(channel_pat)\nAs in the above example, this is a decorator method to add an event handler function.\n`channel_pat` is used as a regular expression pattern to filter stream names.\n\n### StreamConn.register(channel_pat, func)\nRegisters a function as an event handler that is triggered by the stream events\nthat match with `channel_path` regular expression. Calling this method with the\nsame `channel_pat` will overwrite the old handler.\n\n### StreamConn.deregister(channel_pat)\nDeregisters the event handler function that was previously registered via `on` or\n`register` method.\n\n\n---\n# Polygon API Service\n\nAlpaca's API key ID can be used to access Polygon API whose document is found [here](https://polygon.io/docs/).\nThis python SDK wraps their API service and seamlessly integrates with Alpaca API.\n`alpaca_trade_api.REST.polygon` will be the `REST` object for Polygon.\n\nThe example below gives AAPL daily OHLCV data in a DataFrame format.\n\n```py\nimport alpaca_trade_api as tradeapi\n\napi = tradeapi.REST()\naapl = api.polygon.historic_agg('day', 'AAPL', limit=1000).df\n```\n\n## polygon/REST\nIt is initialized through alpaca `REST` object.\n\n### polygon/REST.exchanges()\nReturns a list of `Exchange` entity.\n\n### polygon/REST.symbol_type_map()\nReturns a `SymbolTypeMap` object.\n\n### polygon/REST.historic_trades(symbol, date, offset=None, limit=None)\nReturns a `Trades` which is a list of `Trade` entities.\n\n- `date` is a date string such as '2018-2-2'.  The returned quotes are from this day onyl.\n- `offset` is an integer in Unix Epoch millisecond as the lower bound filter, inclusive.\n- `limit` is an integer for the number of ticks to return.  Default and max is 30000.\n\n### polygon/Trades.df\nReturns a pandas DataFrame object with the ticks returned by the `historic_trades`.\n\n### polygon/REST.historic_quotes(symbol, date, offset=None, limit=None)\nReturns a `Quotes` which is a list of `Quote` entities.\n\n- `date` is a date string such as '2018-2-2'. The returned quotes are from this day only.\n- `offset` is an integer in Unix Epoch millisecond as the lower bound filter, inclusive.\n- `limit` is an integer for the number of ticks to return.  Default and max is 30000.\n\n### polygon/Quotes.df\nReturns a pandas DataFrame object with the ticks returned by the `historic_quotes`.\n\n### polygon/REST.historic_agg(size, symbol, _from=None, to=None, limit=None)\nReturns an `Aggs` which is a list of `Agg` entities. `Aggs.df` gives you the DataFrame\nobject.\n\n- `_from` is an Eastern Time timestamp string that filters the result for the lower bound, inclusive.\n- `to` is an Eastern Time timestamp string that filters the result for the upper bound, inclusive.\n- `limit` is an integer to limit the number of results.  3000 is the default and max value.\n\nSpecify the `_from` parameter if you specify the `to` parameter since when `to` is\nspecified `_from` is assumed to be the beginning of history.  Otherwise, when you\nuse only the `limit` or no parameters, the result is returned from the latest point.\n\nThe returned entities have fields relabeled with the longer name instead of shorter ones.\nFor example, the `o` field is renamed to `open`.\n\n### polygon/Aggs.df\nReturns a pandas DataFrame object with the ticks returned by the `hitoric_agg`.\n\n### poylgon/REST.last_trade(symbol)\nReturns a `Trade` entity representing the last trade for the symbol.\n\n### polygon/REST.last_quote(symbol)\nReturns a `Quote` entity representing the last quote for the symbol.\n\n### polygon/REST.condition_map(ticktype='trades')\nReturns a `ConditionMap` entity.\n\n### polygon/REST.company(symbol)\nReturns a `Company` entity if `symbol` is string, or a\ndict[symbol -> `Company`] if `symbol` is a list of string.\n\n### polygon/REST.dividends(symbol)\nReturns a `Dividends` entity if `symbol` is string, or a\ndict[symbol -> `Dividends`] if `symbol is a list of string.\n\n### polygon/REST.splits(symbol)\nReturns a `Splits` entity for the symbol.\n\n### polygon/REST.earnings(symbol)\nReturns an `Earnings` entity if `symbol` is string, or a\ndict[symbol -> `Earnings`] if `symbol` is a list of string.\n\n### polygon/REST.financials(symbol)\nReturns an `Financials` entity if `symbol` is string, or a\ndict[symbol -> `Financials`] if `symbol` is a list of string.\n\n### polygon/REST.news(symbol)\nReturns a `NewsList` entity for the symbol.\n\n\n## Support and Contribution\n\nFor technical issues particular to this module, please report the\nissue on this GitHub repository. Any API issues can be reported through\nAlpaca's customer support.\n\nNew features, as well as bug fixes, by sending pull request is always\nwelcomed.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zlex7/alpaca-trade-api-fixed", "keywords": "financial,timeseries,api,trade", "license": "", "maintainer": "", "maintainer_email": "", "name": "alpaca-trade-api-fixed", "package_url": "https://pypi.org/project/alpaca-trade-api-fixed/", "platform": "", "project_url": "https://pypi.org/project/alpaca-trade-api-fixed/", "project_urls": {"Homepage": "https://github.com/zlex7/alpaca-trade-api-fixed"}, "release_url": "https://pypi.org/project/alpaca-trade-api-fixed/0.26/", "requires_dist": null, "requires_python": "", "summary": "Alpaca API python client", "version": "0.26", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/alpaca-trade-api\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b674db63ba720cfcb47e293e0dd0d14ca51f30f0/68747470733a2f2f62616467652e667572792e696f2f70792f616c706163612d74726164652d6170692e737667\"></a>\n<a href=\"https://circleci.com/gh/alpacahq/alpaca-trade-api-python\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9643040766259e044431411f671555c6a592b08d/68747470733a2f2f636972636c6563692e636f6d2f67682f616c7061636168712f616c706163612d74726164652d6170692d707974686f6e2e7376673f7374796c653d736869656c64\"></a></p>\n<h1>alpaca-trade-api-python</h1>\n<p><code>alpaca-trade-api-python</code> is a python library for the Alpaca trade API.\nIt allows rapid trading algo development easily, with support for the\nboth REST and streaming interfaces. For details of each API behavior,\nplease see the online API document.</p>\n<p>Note this module supports only python version 3.5 and above, due to\nthe async/await keyword use.</p>\n<h2>Install</h2>\n<pre>$ pip3 install alpaca-trade-api\n</pre>\n<h2>Example</h2>\n<p>In order to call Alpaca's trade API, you need to obtain API key pairs.\nReplace &lt;key_id&gt; and &lt;secret_key&gt; with what you get from the web console.</p>\n<h3>REST example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">alpaca_trade_api</span> <span class=\"k\">as</span> <span class=\"nn\">tradeapi</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">tradeapi</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"p\">(</span><span class=\"s1\">'&lt;key_id&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;secret_key&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">()</span>\n<span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">list_positions</span><span class=\"p\">()</span>\n</pre>\n<h2>API Document</h2>\n<p>The HTTP API document is located in <a href=\"https://docs.alpaca.markets/\" rel=\"nofollow\">https://docs.alpaca.markets/</a></p>\n<h2>Authentication</h2>\n<p>The Alpaca API requires API key ID and secret key, which you can obtain from the\nweb console after you sign in.  You can pass <code>key_id</code> and <code>secret_key</code> to the initializers of\n<code>REST</code> or <code>StreamConn</code> as arguments, or set up environment variables as\nfollows.</p>\n<ul>\n<li>APCA_API_KEY_ID: key ID</li>\n<li>APCA_API_SECRET_KEY: secret key</li>\n</ul>\n<h2>Base URL</h2>\n<p>The base URL for API calls defaults to <code>https://api.alpaca.markets/</code>. This endpoint\nis for live trading, and for paper trading and other purposes, you can to change\nthe base URL. You can pass <code>base_url</code> kwarg to <code>REST()</code>, or using the environment\nvariable, <code>APCA_API_BASE_URL</code>.</p>\n<p>The environment variable <code>APCA_API_DATA_URL</code> can also be changed to configure the\nendpoint for returning data from the <code>/bars</code> endpoint. By default, it will use\n<code>https://data.alpaca.markets</code>.</p>\n<h2>REST</h2>\n<p>The <code>REST</code> class is the entry point for the API request.  The instance of this\nclass provides all REST API calls such as account, orders, positions,\nand bars.</p>\n<p>Each returned object is wrapped by a subclass of <code>Entity</code> class (or a list of it).\nThis helper class provides property access (the \"dot notation\") to the\njson object, backed by the original object stored in the <code>_raw</code> field.\nIt also converts certain types to the appropriate python object.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">alpaca_trade_api</span> <span class=\"k\">as</span> <span class=\"nn\">tradeapi</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">tradeapi</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"p\">()</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_account</span><span class=\"p\">()</span>\n<span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">status</span>\n<span class=\"o\">=&gt;</span> <span class=\"s1\">'ACTIVE'</span>\n</pre>\n<p>The <code>Entity</code> class also converts timestamp string field to a pandas.Timestamp\nobject.  Its <code>_raw</code> property returns the original raw primitive data unmarshaled\nfrom the response JSON text.</p>\n<p>When a REST API call sees the 429 or 504 status code, this library retries 3 times\nby default, with 3 seconds apart between each call. These are configurable with\nthe following environment variables.</p>\n<ul>\n<li>APCA_RETRY_MAX: the number of subsequent API calls to retry, defaults to 3</li>\n<li>APCA_RETRY_WAIT: seconds to wait between each call, defaults to 3</li>\n<li>APCA_RETRY_CODES: comma-separated HTTP status code for which retry is attempted</li>\n</ul>\n<p>If the retry exceeds, or other API error is returned, <code>alpaca_trade_api.rest.APIError</code> is raised.\nYou can access the following information through this object.</p>\n<ul>\n<li>the API error code: <code>.code</code> property</li>\n<li>the API error message: <code>str(error)</code></li>\n<li>the original request object: <code>.request</code> property</li>\n<li>the original response objecgt: <code>.response</code> property</li>\n<li>the HTTP status code: <code>.status_code</code> property</li>\n</ul>\n<h3>REST.get_account()</h3>\n<p>Calls <code>GET /account</code> and returns an <code>Account</code> entity.</p>\n<h3>REST.list_orders(status=None, limit=None, after=None, until=None, direction=None)</h3>\n<p>Calls <code>GET /orders</code> and returns a list of <code>Order</code> entities.\n<code>after</code> and <code>until</code> need to be string format, which you can obtain by <code>pd.Timestamp().isoformat()</code></p>\n<h3>REST.submit_order(symbol, qty, side, type, time_in_force, limit_price=None, stop_price=None, client_order_id=None)</h3>\n<p>Calls <code>POST /orders</code> and returns an <code>Order</code> entity.</p>\n<h3>REST.get_order_by_client_order_id(client_order_id)</h3>\n<p>Calls <code>GET /orders</code> with client_order_id and returns an <code>Order</code> entity.</p>\n<h3>REST.get_order(order_id)</h3>\n<p>Calls <code>GET /orders/{order_id}</code> and returns an <code>Order</code> entity.</p>\n<h3>REST.cancel_order(order_id)</h3>\n<p>Calls <code>DELETE /orders/{order_id}</code>.</p>\n<h3>REST.list_positions()</h3>\n<p>Calls <code>GET /positions</code> and returns a list of <code>Position</code> entities.</p>\n<h3>REST.get_position(symbol)</h3>\n<p>Calls <code>GET /positions/{symbol}</code> and returns a <code>Position</code> entity.</p>\n<h3>REST.list_assets(status=None, asset_class=None)</h3>\n<p>Calls <code>GET /assets</code> and returns a list of <code>Asset</code> entities.</p>\n<h3>REST.get_asset(symbol)</h3>\n<p>Calls <code>GET /assets/{symbol}</code> and returns an <code>Asset</code> entity.</p>\n<h3>REST.get_barset(symbols, timeframe, limit, start=None, end=None, after=None, until=None)</h3>\n<p>Calls <code>GET /bars/{timeframe}</code> for the given symbols, and returns a Barset with <code>limit</code> Bar objects\nfor each of the the requested symbols.\n<code>timeframe</code> can be one of <code>minute</code>, <code>1Min</code>, <code>5Min</code>, <code>15Min</code>, <code>day</code> or <code>1D</code>. <code>minute</code> is an alias\nof <code>1Min</code>. Similarly, <code>day</code> is an alias of <code>1D</code>.\n<code>start</code>, <code>end</code>, <code>after</code>, and <code>until</code> need to be string format, which you can obtain with\n<code>pd.Timestamp().isoformat()</code>\n<code>after</code> cannot be used with <code>start</code> and <code>until</code> cannot be used with <code>end</code>.</p>\n<h3>REST.get_clock()</h3>\n<p>Calls <code>GET /clock</code> and returns a <code>Clock</code> entity.</p>\n<h3>REST.get_calendar(start=None, end=None)</h3>\n<p>Calls <code>GET /calendar</code> and returns a <code>Calendar</code> entity.</p>\n<hr>\n<h2>StreamConn</h2>\n<p>The <code>StreamConn</code> class provides WebSocket/NATS-based event-driven\ninterfaces.  Using the <code>on</code> decorator of the instance, you can\ndefine custom event handlers that are called when the pattern\nis matched on the channel name.  Once event handlers are set up,\ncall the <code>run</code> method which runs forever until a critical exception\nis raised. This module itself does not provide any threading\ncapability, so if you need to consume the messages pushed from the\nserver, you need to run it in a background thread.</p>\n<p>This class provides a unique interface to the two interfaces, both\nAlpaca's account/trade updates events and Polygon's price updates.\nOne connection is established when the <code>subscribe()</code> is called with\nthe corresponding channel names.  For example, if you subscribe to\n<code>account_updates</code>, a WebSocket connects to Alpaca stream API, and\nif <code>AM.*</code> given to the <code>subscribe()</code> method, a NATS connection is\nestablished to Polygon's interface.</p>\n<p>The <code>run</code> method is a short-cut to start subscribing to channels and\nrunnnig forever.  The call will be blocked forever until a critical\nexception is raised, and each event handler is called asynchronously\nupon the message arrivals.</p>\n<p>The <code>run</code> method tries to reconnect to the server in the event of\nconnection failure.  In this case you may want to reset your state\nwhich is best in the <code>connect</code> event.  The method still raises\nexception in the case any other unknown error happens inside the\nevent loop.</p>\n<p>The <code>msg</code> object passed to each handler is wrapped by the entity\nhelper class if the message is from the server.</p>\n<p>Each event handler has to be a marked as <code>async</code>.  Otherwise,\na <code>ValueError</code> is raised when registering it as an event handler.</p>\n<pre><span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">StreamConn</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@conn</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'account_updates'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_account_updates</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@conn</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^AM.'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_bars</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'bars'</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># blocks forever</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">'account_updates'</span><span class=\"p\">,</span> <span class=\"s1\">'AM.*'</span><span class=\"p\">])</span>\n</pre>\n<p>You will likely call the <code>run</code> method in a thread since it will keep running\nunless an exception is raised.</p>\n<h3>StreamConn.subscribe(channels)</h3>\n<p>Request \"listen\" to the server.  <code>channels</code> must be a list of string channel names.</p>\n<h3>StreamConn.run(channels)</h3>\n<p>Goes into an infinite loop and awaits for messages from the server.  You should\nset up event listeners using the <code>on</code> or <code>register</code> method before calling <code>run</code>.</p>\n<h3>StreamConn.on(channel_pat)</h3>\n<p>As in the above example, this is a decorator method to add an event handler function.\n<code>channel_pat</code> is used as a regular expression pattern to filter stream names.</p>\n<h3>StreamConn.register(channel_pat, func)</h3>\n<p>Registers a function as an event handler that is triggered by the stream events\nthat match with <code>channel_path</code> regular expression. Calling this method with the\nsame <code>channel_pat</code> will overwrite the old handler.</p>\n<h3>StreamConn.deregister(channel_pat)</h3>\n<p>Deregisters the event handler function that was previously registered via <code>on</code> or\n<code>register</code> method.</p>\n<hr>\n<h1>Polygon API Service</h1>\n<p>Alpaca's API key ID can be used to access Polygon API whose document is found <a href=\"https://polygon.io/docs/\" rel=\"nofollow\">here</a>.\nThis python SDK wraps their API service and seamlessly integrates with Alpaca API.\n<code>alpaca_trade_api.REST.polygon</code> will be the <code>REST</code> object for Polygon.</p>\n<p>The example below gives AAPL daily OHLCV data in a DataFrame format.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">alpaca_trade_api</span> <span class=\"k\">as</span> <span class=\"nn\">tradeapi</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">tradeapi</span><span class=\"o\">.</span><span class=\"n\">REST</span><span class=\"p\">()</span>\n<span class=\"n\">aapl</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">historic_agg</span><span class=\"p\">(</span><span class=\"s1\">'day'</span><span class=\"p\">,</span> <span class=\"s1\">'AAPL'</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">df</span>\n</pre>\n<h2>polygon/REST</h2>\n<p>It is initialized through alpaca <code>REST</code> object.</p>\n<h3>polygon/REST.exchanges()</h3>\n<p>Returns a list of <code>Exchange</code> entity.</p>\n<h3>polygon/REST.symbol_type_map()</h3>\n<p>Returns a <code>SymbolTypeMap</code> object.</p>\n<h3>polygon/REST.historic_trades(symbol, date, offset=None, limit=None)</h3>\n<p>Returns a <code>Trades</code> which is a list of <code>Trade</code> entities.</p>\n<ul>\n<li><code>date</code> is a date string such as '2018-2-2'.  The returned quotes are from this day onyl.</li>\n<li><code>offset</code> is an integer in Unix Epoch millisecond as the lower bound filter, inclusive.</li>\n<li><code>limit</code> is an integer for the number of ticks to return.  Default and max is 30000.</li>\n</ul>\n<h3>polygon/Trades.df</h3>\n<p>Returns a pandas DataFrame object with the ticks returned by the <code>historic_trades</code>.</p>\n<h3>polygon/REST.historic_quotes(symbol, date, offset=None, limit=None)</h3>\n<p>Returns a <code>Quotes</code> which is a list of <code>Quote</code> entities.</p>\n<ul>\n<li><code>date</code> is a date string such as '2018-2-2'. The returned quotes are from this day only.</li>\n<li><code>offset</code> is an integer in Unix Epoch millisecond as the lower bound filter, inclusive.</li>\n<li><code>limit</code> is an integer for the number of ticks to return.  Default and max is 30000.</li>\n</ul>\n<h3>polygon/Quotes.df</h3>\n<p>Returns a pandas DataFrame object with the ticks returned by the <code>historic_quotes</code>.</p>\n<h3>polygon/REST.historic_agg(size, symbol, _from=None, to=None, limit=None)</h3>\n<p>Returns an <code>Aggs</code> which is a list of <code>Agg</code> entities. <code>Aggs.df</code> gives you the DataFrame\nobject.</p>\n<ul>\n<li><code>_from</code> is an Eastern Time timestamp string that filters the result for the lower bound, inclusive.</li>\n<li><code>to</code> is an Eastern Time timestamp string that filters the result for the upper bound, inclusive.</li>\n<li><code>limit</code> is an integer to limit the number of results.  3000 is the default and max value.</li>\n</ul>\n<p>Specify the <code>_from</code> parameter if you specify the <code>to</code> parameter since when <code>to</code> is\nspecified <code>_from</code> is assumed to be the beginning of history.  Otherwise, when you\nuse only the <code>limit</code> or no parameters, the result is returned from the latest point.</p>\n<p>The returned entities have fields relabeled with the longer name instead of shorter ones.\nFor example, the <code>o</code> field is renamed to <code>open</code>.</p>\n<h3>polygon/Aggs.df</h3>\n<p>Returns a pandas DataFrame object with the ticks returned by the <code>hitoric_agg</code>.</p>\n<h3>poylgon/REST.last_trade(symbol)</h3>\n<p>Returns a <code>Trade</code> entity representing the last trade for the symbol.</p>\n<h3>polygon/REST.last_quote(symbol)</h3>\n<p>Returns a <code>Quote</code> entity representing the last quote for the symbol.</p>\n<h3>polygon/REST.condition_map(ticktype='trades')</h3>\n<p>Returns a <code>ConditionMap</code> entity.</p>\n<h3>polygon/REST.company(symbol)</h3>\n<p>Returns a <code>Company</code> entity if <code>symbol</code> is string, or a\ndict[symbol -&gt; <code>Company</code>] if <code>symbol</code> is a list of string.</p>\n<h3>polygon/REST.dividends(symbol)</h3>\n<p>Returns a <code>Dividends</code> entity if <code>symbol</code> is string, or a\ndict[symbol -&gt; <code>Dividends</code>] if `symbol is a list of string.</p>\n<h3>polygon/REST.splits(symbol)</h3>\n<p>Returns a <code>Splits</code> entity for the symbol.</p>\n<h3>polygon/REST.earnings(symbol)</h3>\n<p>Returns an <code>Earnings</code> entity if <code>symbol</code> is string, or a\ndict[symbol -&gt; <code>Earnings</code>] if <code>symbol</code> is a list of string.</p>\n<h3>polygon/REST.financials(symbol)</h3>\n<p>Returns an <code>Financials</code> entity if <code>symbol</code> is string, or a\ndict[symbol -&gt; <code>Financials</code>] if <code>symbol</code> is a list of string.</p>\n<h3>polygon/REST.news(symbol)</h3>\n<p>Returns a <code>NewsList</code> entity for the symbol.</p>\n<h2>Support and Contribution</h2>\n<p>For technical issues particular to this module, please report the\nissue on this GitHub repository. Any API issues can be reported through\nAlpaca's customer support.</p>\n<p>New features, as well as bug fixes, by sending pull request is always\nwelcomed.</p>\n\n          </div>"}, "last_serial": 6633532, "releases": {"0.26": [{"comment_text": "", "digests": {"md5": "87df35517de4e0d0654b50bb4d3c3db5", "sha256": "c3fd385254c1941b0a67e45acc613692a33e4b1e1754788211005a6eb7ef6cb3"}, "downloads": -1, "filename": "alpaca_trade_api_fixed-0.26-py3.6.egg", "has_sig": false, "md5_digest": "87df35517de4e0d0654b50bb4d3c3db5", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 71377, "upload_time": "2020-02-14T20:53:51", "upload_time_iso_8601": "2020-02-14T20:53:51.760040Z", "url": "https://files.pythonhosted.org/packages/b3/f1/c36114dba6f7d524e72c8809289bd35a7fb800bf9bf1bee21c538010996d/alpaca_trade_api_fixed-0.26-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9df4e8c7d21c6d85eba06e7cc6557a35", "sha256": "544ee16a9640a430114d64f6d87570aabe04444e9b6e267bc21c6db8416731e1"}, "downloads": -1, "filename": "alpaca-trade-api-fixed-0.26.tar.gz", "has_sig": false, "md5_digest": "9df4e8c7d21c6d85eba06e7cc6557a35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14423, "upload_time": "2020-02-14T20:53:54", "upload_time_iso_8601": "2020-02-14T20:53:54.213223Z", "url": "https://files.pythonhosted.org/packages/29/c0/85214a9d718feb7cc947b860b9b04697f322224db9b29e51d103433df74a/alpaca-trade-api-fixed-0.26.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87df35517de4e0d0654b50bb4d3c3db5", "sha256": "c3fd385254c1941b0a67e45acc613692a33e4b1e1754788211005a6eb7ef6cb3"}, "downloads": -1, "filename": "alpaca_trade_api_fixed-0.26-py3.6.egg", "has_sig": false, "md5_digest": "87df35517de4e0d0654b50bb4d3c3db5", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 71377, "upload_time": "2020-02-14T20:53:51", "upload_time_iso_8601": "2020-02-14T20:53:51.760040Z", "url": "https://files.pythonhosted.org/packages/b3/f1/c36114dba6f7d524e72c8809289bd35a7fb800bf9bf1bee21c538010996d/alpaca_trade_api_fixed-0.26-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9df4e8c7d21c6d85eba06e7cc6557a35", "sha256": "544ee16a9640a430114d64f6d87570aabe04444e9b6e267bc21c6db8416731e1"}, "downloads": -1, "filename": "alpaca-trade-api-fixed-0.26.tar.gz", "has_sig": false, "md5_digest": "9df4e8c7d21c6d85eba06e7cc6557a35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14423, "upload_time": "2020-02-14T20:53:54", "upload_time_iso_8601": "2020-02-14T20:53:54.213223Z", "url": "https://files.pythonhosted.org/packages/29/c0/85214a9d718feb7cc947b860b9b04697f322224db9b29e51d103433df74a/alpaca-trade-api-fixed-0.26.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:19 2020"}