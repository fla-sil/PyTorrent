{"info": {"author": "Anton Agestam", "author_email": "git@antonagestam.se", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8"], "description": "# dependent-types\n\n[![](https://github.com/antonagestam/dependent-types/workflows/CI/badge.svg)][CI]\n\n[CI]: https://github.com/antonagestam/dependent-types/actions?query=workflow%3ACI\n\nDependent types for Python.\n\n## Installation\n\n```bash\npython3 -m pip install dependent-types\n```\n\n## Abstract\n\n- Make illegal states unrepresentable.\n- [Parse, don't validate]\n- Abuse `__instancecheck__` and type-guards.\n- Values are checked at runtime but no extra instances/subclasses are\n  instantiated.\n\n[Parse, don't validate]: https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\n\n## Usage\n\n### Builtin types\n\n#### `dept.datetime`\n\n- `TZAware`\n- `TZNaive`\n\n#### `dept.numeric`\n\n- `Natural`\n- `NegativeInt`\n- `Portion`\n\n#### `dept.re`\n\n- `Match`\n\n#### `dept.sized`\n\n- `NonEmpty`\n- `Empty`\n\n### Creating dependent types\n\nTo create new dependent types, subclass `dept.base.Dependent` and define an\n`__instancecheck__` method:\n\n```python\nfrom typing import Any\nfrom typing import TYPE_CHECKING\n\nfrom dept.base import Dependent\n\n\nclass Greeting(str, Dependent):\n    @classmethod\n    def __instancecheck__(cls, instance: Any) -> bool:\n        return (\n            isinstance(instance, str)\n            and instance.startswith((\"Hello\", \"Hi\"))\n        )\n\n\nhello = \"Hello there\"\n# We can narrow types using mypy's type guards\nassert isinstance(hello, Greeting)\n# or explicitly when we need to\nhi = Greeting.from_instance(\"Hi there\")\n\n# The runtime types are unchanged and will still be str for our greetings\nassert type(hello) is str\nassert type(hi) is str\n\n# But their static types will be Greeting, retaining the information that our\n# strings are not just any strs\nif TYPE_CHECKING:\n    reveal_type(hello)\n    reveal_type(hi)\n\n# As this string doesn't fulfill our __instancecheck__, it will not be an\n# instance of Greeting.\nassert not isinstance(\"Goodbye\", Greeting)\n```\n\nCheckout out the [dacite example] for how to create dataclasses with rich\ndependently typed fields without duplicating type definitions or losing parsed\ninformation.\n\n[dacite example]: examples/dacite/test_dacite.py\n\n\n", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/antonagestam/dependent-types/", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "dependent-types", "package_url": "https://pypi.org/project/dependent-types/", "platform": "", "project_url": "https://pypi.org/project/dependent-types/", "project_urls": {"Homepage": "https://github.com/antonagestam/dependent-types/"}, "release_url": "https://pypi.org/project/dependent-types/0.0.1/", "requires_dist": ["black ; extra == 'test'", "flake8 ; extra == 'test'", "mypy ; extra == 'test'", "sorti ; extra == 'test'", "pytest ; extra == 'test'", "pytest-mypy-plugins ; extra == 'test'"], "requires_python": ">=3.8", "summary": "Dependent types for Python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dependent-types</h1>\n<p><a href=\"https://github.com/antonagestam/dependent-types/actions?query=workflow%3ACI\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb3a0e1664fbda481342e5345932da5dd639bd7d/68747470733a2f2f6769746875622e636f6d2f616e746f6e6167657374616d2f646570656e64656e742d74797065732f776f726b666c6f77732f43492f62616467652e737667\"></a></p>\n<p>Dependent types for Python.</p>\n<h2>Installation</h2>\n<pre>python3 -m pip install dependent-types\n</pre>\n<h2>Abstract</h2>\n<ul>\n<li>Make illegal states unrepresentable.</li>\n<li><a href=\"https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\" rel=\"nofollow\">Parse, don't validate</a></li>\n<li>Abuse <code>__instancecheck__</code> and type-guards.</li>\n<li>Values are checked at runtime but no extra instances/subclasses are\ninstantiated.</li>\n</ul>\n<h2>Usage</h2>\n<h3>Builtin types</h3>\n<h4><code>dept.datetime</code></h4>\n<ul>\n<li><code>TZAware</code></li>\n<li><code>TZNaive</code></li>\n</ul>\n<h4><code>dept.numeric</code></h4>\n<ul>\n<li><code>Natural</code></li>\n<li><code>NegativeInt</code></li>\n<li><code>Portion</code></li>\n</ul>\n<h4><code>dept.re</code></h4>\n<ul>\n<li><code>Match</code></li>\n</ul>\n<h4><code>dept.sized</code></h4>\n<ul>\n<li><code>NonEmpty</code></li>\n<li><code>Empty</code></li>\n</ul>\n<h3>Creating dependent types</h3>\n<p>To create new dependent types, subclass <code>dept.base.Dependent</code> and define an\n<code>__instancecheck__</code> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TYPE_CHECKING</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dept.base</span> <span class=\"kn\">import</span> <span class=\"n\">Dependent</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Greeting</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dependent</span><span class=\"p\">):</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__instancecheck__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">((</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hi\"</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello there\"</span>\n<span class=\"c1\"># We can narrow types using mypy's type guards</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">,</span> <span class=\"n\">Greeting</span><span class=\"p\">)</span>\n<span class=\"c1\"># or explicitly when we need to</span>\n<span class=\"n\">hi</span> <span class=\"o\">=</span> <span class=\"n\">Greeting</span><span class=\"o\">.</span><span class=\"n\">from_instance</span><span class=\"p\">(</span><span class=\"s2\">\"Hi there\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The runtime types are unchanged and will still be str for our greetings</span>\n<span class=\"k\">assert</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span>\n<span class=\"k\">assert</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">hi</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span>\n\n<span class=\"c1\"># But their static types will be Greeting, retaining the information that our</span>\n<span class=\"c1\"># strings are not just any strs</span>\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"n\">reveal_type</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">)</span>\n    <span class=\"n\">reveal_type</span><span class=\"p\">(</span><span class=\"n\">hi</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># As this string doesn't fulfill our __instancecheck__, it will not be an</span>\n<span class=\"c1\"># instance of Greeting.</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"s2\">\"Goodbye\"</span><span class=\"p\">,</span> <span class=\"n\">Greeting</span><span class=\"p\">)</span>\n</pre>\n<p>Checkout out the <a href=\"examples/dacite/test_dacite.py\" rel=\"nofollow\">dacite example</a> for how to create dataclasses with rich\ndependently typed fields without duplicating type definitions or losing parsed\ninformation.</p>\n\n          </div>"}, "last_serial": 6891576, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "0f3773e86fc7a53dd25c0b25235a1709", "sha256": "b290d342138299aebd57c04daade5b685c38124c5bd18136a424aa0bc24b47fe"}, "downloads": -1, "filename": "dependent_types-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0f3773e86fc7a53dd25c0b25235a1709", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 7347, "upload_time": "2020-03-07T20:25:38", "upload_time_iso_8601": "2020-03-07T20:25:38.070849Z", "url": "https://files.pythonhosted.org/packages/e4/ba/977d4fa08378ca18cd5430d7dfa8b7141042e1128ff93e926e2c83ab97b0/dependent_types-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e03c7e9b3601aab022975f76df0a6db1", "sha256": "c84b098d6ba2d6ae3147e7dc474c95566242c51a8ab9b800f96571ad14ade741"}, "downloads": -1, "filename": "dependent-types-0.0.0.tar.gz", "has_sig": false, "md5_digest": "e03c7e9b3601aab022975f76df0a6db1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 5670, "upload_time": "2020-03-07T20:25:40", "upload_time_iso_8601": "2020-03-07T20:25:40.382342Z", "url": "https://files.pythonhosted.org/packages/f0/26/d298d2a58326b4164b392ead0d35016565a1179d9f7ff31f66b2dcfd1bb2/dependent-types-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "808f8df5fe52f672a2269185915eaac7", "sha256": "63d65448486f8ca8fdc7b568fa69996be77549881cfc3f64f89b6cdd58e071ea"}, "downloads": -1, "filename": "dependent_types-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "808f8df5fe52f672a2269185915eaac7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8560, "upload_time": "2020-03-26T20:17:25", "upload_time_iso_8601": "2020-03-26T20:17:25.080767Z", "url": "https://files.pythonhosted.org/packages/fa/cc/e3c37551815b077a20ed43c7a5fae9956e989a5c6d2a10c31f0faafb4458/dependent_types-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7342238accd06cf80313a6dc5114e4d", "sha256": "9809734e55e8728c82bc22aaeac81120e60f989fe3ccd0e3f55fdd5890f85724"}, "downloads": -1, "filename": "dependent-types-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c7342238accd06cf80313a6dc5114e4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 6477, "upload_time": "2020-03-26T20:17:26", "upload_time_iso_8601": "2020-03-26T20:17:26.696956Z", "url": "https://files.pythonhosted.org/packages/56/36/2e3d6ec024e0e19f79b3d5bde84f6c2708946153b409413f197f8d9d934a/dependent-types-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "808f8df5fe52f672a2269185915eaac7", "sha256": "63d65448486f8ca8fdc7b568fa69996be77549881cfc3f64f89b6cdd58e071ea"}, "downloads": -1, "filename": "dependent_types-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "808f8df5fe52f672a2269185915eaac7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8560, "upload_time": "2020-03-26T20:17:25", "upload_time_iso_8601": "2020-03-26T20:17:25.080767Z", "url": "https://files.pythonhosted.org/packages/fa/cc/e3c37551815b077a20ed43c7a5fae9956e989a5c6d2a10c31f0faafb4458/dependent_types-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7342238accd06cf80313a6dc5114e4d", "sha256": "9809734e55e8728c82bc22aaeac81120e60f989fe3ccd0e3f55fdd5890f85724"}, "downloads": -1, "filename": "dependent-types-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c7342238accd06cf80313a6dc5114e4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 6477, "upload_time": "2020-03-26T20:17:26", "upload_time_iso_8601": "2020-03-26T20:17:26.696956Z", "url": "https://files.pythonhosted.org/packages/56/36/2e3d6ec024e0e19f79b3d5bde84f6c2708946153b409413f197f8d9d934a/dependent-types-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:04 2020"}