{"info": {"author": "", "author_email": "inquiries@presalytics.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"], "description": "# WSGI Microservice Middleware\n\nThis little library contains middlewares to help quickly turn wsgi apps (e.g., flask, django, bottle, tornado, pyramid) into production-ready microservices for integration into a kubernetes cluster.  These middelewares set up to be configurable warfrom environment variables in accordance with the twelve-factor app methodology.\n\nMiddlewares in this package include:\n* [CORS](#cors)\n* [Request Id](#request-id)\n\n\nThis project spun out of development for the Presalytics as way to quickly port code across various microserivces built on wsgi-supported frameworks.\n\n[View on Github](https://github.com/presalytics/WSGI-Microservice-Middleware)\n\n### Installation\n\nThis project requires python 3.5+. It is best installed fromt he pypi package repository via pip.\n\n~~~~bash\npip install wsgi_microservice_middleware\n~~~~\n\nThe latest branch of this package can also be installed from git:\n~~~~bash\npip install git+https://github.com/presalytics/WSGI-Microservice-Middleware\n~~~~\n\n### Configuration\n\nPackage configuration is best done by adding configuration values via environment varialble.  This package uses the [environs](https://pypi.org/project/environs/) package to load the following values from the system environment or a `.env` file in the the working directory:\n\n* `CORS_ALLOWED`: Comma-separated string of domain names that will from which CORS requests can be made.  Is empty by default\n\n* `REQUEST_ID_HEADER`: The http request header containing a the request-id to including in logs. If not supplied, defaults to `X-Request-Id`.\n\n* `LOG_TOKENS`: Instructs `RequestIdMiddleware` to add Bearer Authentication tokens to request logs when available. Defaults to True.\n\n### Usage \n\nThese middleware are applied by wrapping the wsgi application object in you code by the middleware class. Examples below:\n\n* **Flask:**\n    ~~~~python\n    # app.py\n    from flask import Flask\n    from wsgi_microservice_middleware.cors import CORSMiddleware\n\n    app = Flask(__name__)\n    app.wsgi_app = CORSMiddleware(app.wsgi_app) # Middleware applied here\n    app.run(...) \n    ~~~~\n\n* **Django:**\n    ~~~~python\n    # wsgi.py\n    from django.core.wsgi import get_wsgi_application\n    from wsgi_microservice_middleware.request_id import RequestIdMiddleware\n\n    application = get_wsgi_application()\n    application = RequestIdMiddleware(application) # Middleware applied here\n    ~~~~\n\n\n# Modules\n\n### CORS\n\nAdds CORS headers to the responses of request that originate from domains in the\nCORS_ALLOWED environment variable.  CORS_ALLOWED should reside in the environment as a\ncomma-separated string of domain names.\n\n### Request Id\n\nImplements Request Id handling for requests that need to be tracked accross multiple microservices and searched in log records.\nThe `RequestIdMiddleware` class.\n\nTo extend the request Id to your application logs, incorporate the `RequestIdFilter` into your logging configuration. the best way to do this\nis to use `logging.config.dictConfig` to apply the filter to all of your handlers:\n\n~~~~python\n# log_config.py\nfrom logging.config import dictConfig\nfrom wsgi_microservice_middleware.request_id import RequestIdFilter\n\n\ndictConfig({\n    'version': 1,\n    'filters': {\n        'request_id_filter' : {\n            '()': RequestIdFilter,  # RequestIdFilter.filter(self, record) called with each log entry\n        }\n    },\n    'formatters': {'default': {\n        'format': '%(asctime)s - %(threadName)s - %(name)s - %(levelname)s - %(request_id)s -  %(message)s',\n    }},\n    'handlers': {\n        'wsgi': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'default',\n            'filters': ['request_id_filter']  # add this filter to each handler\n        },\n    },\n    'root': {\n        'level': 'DEBUG',\n        'handlers': ['wsgi']\n    }\n})\n~~~~\n\nIf your microservice makes requests to other microservices, you can call the `current_request_id()` method to get the current request id and incorporate it into your request headers.\n\n# Contributing\n\nWe'd love your help! Open an issue at the [github repo](https://github.com/presalytics/WSGI-Microservice-Middleware/issues).  Or even better, you can fork the repo and we'll merge your improvements.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/presalytics/WSGI-Microservice-Middleware", "keywords": "WSGI,middleware,microservice", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wsgi-microservice-middleware", "package_url": "https://pypi.org/project/wsgi-microservice-middleware/", "platform": "", "project_url": "https://pypi.org/project/wsgi-microservice-middleware/", "project_urls": {"Homepage": "https://github.com/presalytics/WSGI-Microservice-Middleware", "Issues": "https://github.com/presalytics/WSGI-Microservice-Middleware/issues"}, "release_url": "https://pypi.org/project/wsgi-microservice-middleware/0.1.5/", "requires_dist": ["urllib3 (>=1.15)", "environs (>=4.2.0)", "python-json-logger (>=0.1.11)"], "requires_python": ">=3.5", "summary": "WSGI Microservice Middleware", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WSGI Microservice Middleware</h1>\n<p>This little library contains middlewares to help quickly turn wsgi apps (e.g., flask, django, bottle, tornado, pyramid) into production-ready microservices for integration into a kubernetes cluster.  These middelewares set up to be configurable warfrom environment variables in accordance with the twelve-factor app methodology.</p>\n<p>Middlewares in this package include:</p>\n<ul>\n<li><a href=\"#cors\" rel=\"nofollow\">CORS</a></li>\n<li><a href=\"#request-id\" rel=\"nofollow\">Request Id</a></li>\n</ul>\n<p>This project spun out of development for the Presalytics as way to quickly port code across various microserivces built on wsgi-supported frameworks.</p>\n<p><a href=\"https://github.com/presalytics/WSGI-Microservice-Middleware\" rel=\"nofollow\">View on Github</a></p>\n<h3>Installation</h3>\n<p>This project requires python 3.5+. It is best installed fromt he pypi package repository via pip.</p>\n<pre>pip install wsgi_microservice_middleware\n</pre>\n<p>The latest branch of this package can also be installed from git:</p>\n<pre>pip install git+https://github.com/presalytics/WSGI-Microservice-Middleware\n</pre>\n<h3>Configuration</h3>\n<p>Package configuration is best done by adding configuration values via environment varialble.  This package uses the <a href=\"https://pypi.org/project/environs/\" rel=\"nofollow\">environs</a> package to load the following values from the system environment or a <code>.env</code> file in the the working directory:</p>\n<ul>\n<li>\n<p><code>CORS_ALLOWED</code>: Comma-separated string of domain names that will from which CORS requests can be made.  Is empty by default</p>\n</li>\n<li>\n<p><code>REQUEST_ID_HEADER</code>: The http request header containing a the request-id to including in logs. If not supplied, defaults to <code>X-Request-Id</code>.</p>\n</li>\n<li>\n<p><code>LOG_TOKENS</code>: Instructs <code>RequestIdMiddleware</code> to add Bearer Authentication tokens to request logs when available. Defaults to True.</p>\n</li>\n</ul>\n<h3>Usage</h3>\n<p>These middleware are applied by wrapping the wsgi application object in you code by the middleware class. Examples below:</p>\n<ul>\n<li>\n<p><strong>Flask:</strong></p>\n<pre><span class=\"c1\"># app.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wsgi_microservice_middleware.cors</span> <span class=\"kn\">import</span> <span class=\"n\">CORSMiddleware</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">wsgi_app</span> <span class=\"o\">=</span> <span class=\"n\">CORSMiddleware</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">wsgi_app</span><span class=\"p\">)</span> <span class=\"c1\"># Middleware applied here</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> \n</pre>\n</li>\n<li>\n<p><strong>Django:</strong></p>\n<pre><span class=\"c1\"># wsgi.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.wsgi</span> <span class=\"kn\">import</span> <span class=\"n\">get_wsgi_application</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wsgi_microservice_middleware.request_id</span> <span class=\"kn\">import</span> <span class=\"n\">RequestIdMiddleware</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">get_wsgi_application</span><span class=\"p\">()</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">RequestIdMiddleware</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">)</span> <span class=\"c1\"># Middleware applied here</span>\n</pre>\n</li>\n</ul>\n<h1>Modules</h1>\n<h3>CORS</h3>\n<p>Adds CORS headers to the responses of request that originate from domains in the\nCORS_ALLOWED environment variable.  CORS_ALLOWED should reside in the environment as a\ncomma-separated string of domain names.</p>\n<h3>Request Id</h3>\n<p>Implements Request Id handling for requests that need to be tracked accross multiple microservices and searched in log records.\nThe <code>RequestIdMiddleware</code> class.</p>\n<p>To extend the request Id to your application logs, incorporate the <code>RequestIdFilter</code> into your logging configuration. the best way to do this\nis to use <code>logging.config.dictConfig</code> to apply the filter to all of your handlers:</p>\n<pre><span class=\"c1\"># log_config.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">logging.config</span> <span class=\"kn\">import</span> <span class=\"n\">dictConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wsgi_microservice_middleware.request_id</span> <span class=\"kn\">import</span> <span class=\"n\">RequestIdFilter</span>\n\n\n<span class=\"n\">dictConfig</span><span class=\"p\">({</span>\n    <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'filters'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'request_id_filter'</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'()'</span><span class=\"p\">:</span> <span class=\"n\">RequestIdFilter</span><span class=\"p\">,</span>  <span class=\"c1\"># RequestIdFilter.filter(self, record) called with each log entry</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'formatters'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'format'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(threadName)s</span><span class=\"s1\"> - </span><span class=\"si\">%(name)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(request_id)s</span><span class=\"s1\"> -  </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">}},</span>\n    <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'wsgi'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'logging.StreamHandler'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'formatter'</span><span class=\"p\">:</span> <span class=\"s1\">'default'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'filters'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'request_id_filter'</span><span class=\"p\">]</span>  <span class=\"c1\"># add this filter to each handler</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'root'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'DEBUG'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'wsgi'</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>If your microservice makes requests to other microservices, you can call the <code>current_request_id()</code> method to get the current request id and incorporate it into your request headers.</p>\n<h1>Contributing</h1>\n<p>We'd love your help! Open an issue at the <a href=\"https://github.com/presalytics/WSGI-Microservice-Middleware/issues\" rel=\"nofollow\">github repo</a>.  Or even better, you can fork the repo and we'll merge your improvements.</p>\n\n          </div>"}, "last_serial": 6856340, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d13e5092d1d03e6cfb3de5095904073e", "sha256": "64203e58ba8b8569e2a81769ae41ec7bf3f6cfa07bf77c81419d5c72ec4207bb"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d13e5092d1d03e6cfb3de5095904073e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5538, "upload_time": "2020-03-17T04:07:14", "upload_time_iso_8601": "2020-03-17T04:07:14.485094Z", "url": "https://files.pythonhosted.org/packages/54/34/3793f097795e6e689e2c1ab7d4df0c2de777fbe73b5dc37caf9dd9bca1a0/wsgi_microservice_middleware-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0377f5cb9a6c28be6a66dde3b9278923", "sha256": "d588de3eaff58a0090ff4e1de42c64fc385fad2f463cd61f0f0d673575930dbe"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0377f5cb9a6c28be6a66dde3b9278923", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4757, "upload_time": "2020-03-17T04:07:16", "upload_time_iso_8601": "2020-03-17T04:07:16.799456Z", "url": "https://files.pythonhosted.org/packages/d7/69/bbb294e4107ee8dffb3316c4e4628ccfccca4a23b8ad455059a235730fb0/wsgi_microservice_middleware-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "665f26cdb05c6acb046cfa270a61c50c", "sha256": "ffd6c6c85062d99dfe1d5205b6a6191a0a0718800fd064058dba47b916e1ca3f"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "665f26cdb05c6acb046cfa270a61c50c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5816, "upload_time": "2020-03-17T18:40:28", "upload_time_iso_8601": "2020-03-17T18:40:28.449350Z", "url": "https://files.pythonhosted.org/packages/13/a0/849fc6dc3094a62573726eedebd3ac645ff9c04f8d6d29831500849676ab/wsgi_microservice_middleware-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aaa6d41532e414e18cde8a261124ddb1", "sha256": "ebf2c96d50a9e2ee86b0e5914773430d7175c9d1e9a6b3f01354bfcb7d5720d3"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.1.tar.gz", "has_sig": false, "md5_digest": "aaa6d41532e414e18cde8a261124ddb1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5025, "upload_time": "2020-03-17T18:40:30", "upload_time_iso_8601": "2020-03-17T18:40:30.513301Z", "url": "https://files.pythonhosted.org/packages/4c/46/80f2c8241c7276c5127d3a44661c4aec6a79000d2b5221b303f18a82cab3/wsgi_microservice_middleware-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "8422d6cb8016a2a237db0e6eb9848b37", "sha256": "ababa7adef7c19ad3912d3f42d69428214e07eb83e9ebd673160c85c6b8cb958"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8422d6cb8016a2a237db0e6eb9848b37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5833, "upload_time": "2020-03-17T20:34:14", "upload_time_iso_8601": "2020-03-17T20:34:14.196022Z", "url": "https://files.pythonhosted.org/packages/cf/a8/6d4c3f2e19adf1a63cf0c0bb9f2a9aa5ac52de6c33a6b3f237369a8e9c97/wsgi_microservice_middleware-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97575f26f4fdedc99aa9f610b7f3b078", "sha256": "a9e6752e0e4eeb008c4ca3bbabe23995b219da91f268c8422c458c65f0dba667"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.2.tar.gz", "has_sig": false, "md5_digest": "97575f26f4fdedc99aa9f610b7f3b078", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5035, "upload_time": "2020-03-17T20:34:15", "upload_time_iso_8601": "2020-03-17T20:34:15.713715Z", "url": "https://files.pythonhosted.org/packages/d0/76/b0aa76e5a3f24a12f75a0adc2168079b7f6066aef5618c454a3281dc73ef/wsgi_microservice_middleware-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "aca59351453da02309c6586f2c24f046", "sha256": "0db8a4602d36159e7d8f2276645ebafdf609a4a8fea46a158e7b9fe28c58091e"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "aca59351453da02309c6586f2c24f046", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6053, "upload_time": "2020-03-18T22:45:14", "upload_time_iso_8601": "2020-03-18T22:45:14.722138Z", "url": "https://files.pythonhosted.org/packages/b6/64/79f0ba6f397f5338f75e8ea23c5aabef0be3a4527d13f119fc4319d91091/wsgi_microservice_middleware-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a667faf0b386bf92aa0845736c4640b", "sha256": "e6d011460daae262b1704c4d43306f1c50bc443f35b6b27109af9589b9642c85"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.3.tar.gz", "has_sig": false, "md5_digest": "7a667faf0b386bf92aa0845736c4640b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5263, "upload_time": "2020-03-18T22:45:15", "upload_time_iso_8601": "2020-03-18T22:45:15.830366Z", "url": "https://files.pythonhosted.org/packages/17/51/221c7431b57eafa1bf104128757d789e18d90a0c962c7225742d91cbc408/wsgi_microservice_middleware-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "8608b934cf15d9c59726dc4f1b7f5c60", "sha256": "b6c63b6114418597633ce289a08dbd3cfcaa6212bcf59fc039f43b0c2ea25a3d"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8608b934cf15d9c59726dc4f1b7f5c60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6056, "upload_time": "2020-03-18T23:20:34", "upload_time_iso_8601": "2020-03-18T23:20:34.050882Z", "url": "https://files.pythonhosted.org/packages/d1/a7/42166ac2b1fec4a68d85df50d1940c4b456d75883b8264bc8400129571d5/wsgi_microservice_middleware-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cd052e56ace49120517523f90f9d4ba", "sha256": "5f7cfd2b96cb3cb356457d1e6c1e7408e7f4d80e467b8ecb4d7e0a32cc0ad46d"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.4.tar.gz", "has_sig": false, "md5_digest": "7cd052e56ace49120517523f90f9d4ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5256, "upload_time": "2020-03-18T23:20:35", "upload_time_iso_8601": "2020-03-18T23:20:35.304447Z", "url": "https://files.pythonhosted.org/packages/a8/b4/73d8666b897a2300e1918b864f997492db13c4c5b8655407bfc6378c57d3/wsgi_microservice_middleware-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "d2c2586e0c861708dbb870e647238654", "sha256": "d6ceaa575398a80097b22bb9ca5b61384d2609b37495fa64ef2b8950e1c5fa05"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d2c2586e0c861708dbb870e647238654", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6049, "upload_time": "2020-03-21T17:04:29", "upload_time_iso_8601": "2020-03-21T17:04:29.930684Z", "url": "https://files.pythonhosted.org/packages/f1/fb/f2faf29d8146011d71f501f81fdd16ef1f54cd560a74a87f13e3d551adb9/wsgi_microservice_middleware-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5854a288aff4984a6568797c45aaea1", "sha256": "d11e15e8bb6bdc0ac1a8c9158e42d3b78d193874b0bf1e835d9fec77d31d0054"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d5854a288aff4984a6568797c45aaea1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5258, "upload_time": "2020-03-21T17:04:31", "upload_time_iso_8601": "2020-03-21T17:04:31.390619Z", "url": "https://files.pythonhosted.org/packages/53/77/9e3a89e3d39db86c234bd818932624116f719ec461676f894a286fd1181a/wsgi_microservice_middleware-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2c2586e0c861708dbb870e647238654", "sha256": "d6ceaa575398a80097b22bb9ca5b61384d2609b37495fa64ef2b8950e1c5fa05"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d2c2586e0c861708dbb870e647238654", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6049, "upload_time": "2020-03-21T17:04:29", "upload_time_iso_8601": "2020-03-21T17:04:29.930684Z", "url": "https://files.pythonhosted.org/packages/f1/fb/f2faf29d8146011d71f501f81fdd16ef1f54cd560a74a87f13e3d551adb9/wsgi_microservice_middleware-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5854a288aff4984a6568797c45aaea1", "sha256": "d11e15e8bb6bdc0ac1a8c9158e42d3b78d193874b0bf1e835d9fec77d31d0054"}, "downloads": -1, "filename": "wsgi_microservice_middleware-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d5854a288aff4984a6568797c45aaea1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5258, "upload_time": "2020-03-21T17:04:31", "upload_time_iso_8601": "2020-03-21T17:04:31.390619Z", "url": "https://files.pythonhosted.org/packages/53/77/9e3a89e3d39db86c234bd818932624116f719ec461676f894a286fd1181a/wsgi_microservice_middleware-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:06 2020"}