{"info": {"author": "Eduardo Costa", "author_email": "m4c0@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python :: 3"], "description": "# blister\n\nConventions-over-configuration C++/modules project manager.\n\nThis is a simple approach to deal with C++ modules. By using a bunch of\nconventions, this Python module scans for all files and generates a\n`build.ninja` to compile the code.\n\nCurrently, it is personal endeavor to use C++ modules with some dependency\nmanagement, which (as of 2019) is not provided by existing building systems.\nHacks and non-sense may be included.\n\nRequires a folder structure like this:\n\n* root\n  * includes\n    * h-files and subfolders\n  * sources\n    * common\n      * cppm-files and subfolders\n    * osx-metal\n      * cppm-files\n      * mm-files\n    * ...\n  * tests\n    * app-folder-1\n      * cppm-files\n      * cpp-files\n    * app-folder-2\n    * ...\n  * tools\n    * cpp-files\n  * unit-tests\n    * cpp-files\n  * bli.yaml\n\n`includes` is added as part of the include path.\n\n`sources/common` contains CPP modules (using `cppm` as extension). They will\nbe scanned, with all `cppm` files added to the build. The module name is\nindependent of the file name, being extracted from the `export module`\nstatement.\n\n`sources/osx-metal` is a hack to build Apple-compatible folders. It also\ncompiles `metal` files.\n\n`tests` creates one standalone application per folder. Every linked application\nwill contains all objects from `sources` folders.\n\n`unit-tests` are compiled independently and liked with `sources/common` objects\nand run as part of the `test` target.\n\nDependencies are calculated from both `cppm` and `cpp` files, by parsing the\n`import` statements.\n\n`bli.yaml` identifies the root folder and contains configuration to override\nglobal and per-file flags.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/m4c0/blister", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "blister-cpp", "package_url": "https://pypi.org/project/blister-cpp/", "platform": "", "project_url": "https://pypi.org/project/blister-cpp/", "project_urls": {"Homepage": "https://github.com/m4c0/blister"}, "release_url": "https://pypi.org/project/blister-cpp/0.0.1/", "requires_dist": ["PyYAML (>=5.1.2)"], "requires_python": ">=3.6", "summary": "Conventions-over-configuration C++/modules project manager.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>blister</h1>\n<p>Conventions-over-configuration C++/modules project manager.</p>\n<p>This is a simple approach to deal with C++ modules. By using a bunch of\nconventions, this Python module scans for all files and generates a\n<code>build.ninja</code> to compile the code.</p>\n<p>Currently, it is personal endeavor to use C++ modules with some dependency\nmanagement, which (as of 2019) is not provided by existing building systems.\nHacks and non-sense may be included.</p>\n<p>Requires a folder structure like this:</p>\n<ul>\n<li>root\n<ul>\n<li>includes\n<ul>\n<li>h-files and subfolders</li>\n</ul>\n</li>\n<li>sources\n<ul>\n<li>common\n<ul>\n<li>cppm-files and subfolders</li>\n</ul>\n</li>\n<li>osx-metal\n<ul>\n<li>cppm-files</li>\n<li>mm-files</li>\n</ul>\n</li>\n<li>...</li>\n</ul>\n</li>\n<li>tests\n<ul>\n<li>app-folder-1\n<ul>\n<li>cppm-files</li>\n<li>cpp-files</li>\n</ul>\n</li>\n<li>app-folder-2</li>\n<li>...</li>\n</ul>\n</li>\n<li>tools\n<ul>\n<li>cpp-files</li>\n</ul>\n</li>\n<li>unit-tests\n<ul>\n<li>cpp-files</li>\n</ul>\n</li>\n<li>bli.yaml</li>\n</ul>\n</li>\n</ul>\n<p><code>includes</code> is added as part of the include path.</p>\n<p><code>sources/common</code> contains CPP modules (using <code>cppm</code> as extension). They will\nbe scanned, with all <code>cppm</code> files added to the build. The module name is\nindependent of the file name, being extracted from the <code>export module</code>\nstatement.</p>\n<p><code>sources/osx-metal</code> is a hack to build Apple-compatible folders. It also\ncompiles <code>metal</code> files.</p>\n<p><code>tests</code> creates one standalone application per folder. Every linked application\nwill contains all objects from <code>sources</code> folders.</p>\n<p><code>unit-tests</code> are compiled independently and liked with <code>sources/common</code> objects\nand run as part of the <code>test</code> target.</p>\n<p>Dependencies are calculated from both <code>cppm</code> and <code>cpp</code> files, by parsing the\n<code>import</code> statements.</p>\n<p><code>bli.yaml</code> identifies the root folder and contains configuration to override\nglobal and per-file flags.</p>\n\n          </div>"}, "last_serial": 6225059, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dd43b308c4910b8e6968877218b19b15", "sha256": "dae74b45474e42ea4fee5b6496c505debe9e70f12af3c875dc84f08f255bcd5f"}, "downloads": -1, "filename": "blister_cpp-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dd43b308c4910b8e6968877218b19b15", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20862, "upload_time": "2019-12-01T17:17:17", "upload_time_iso_8601": "2019-12-01T17:17:17.017748Z", "url": "https://files.pythonhosted.org/packages/98/29/897009bc224cd2cc93a2b387c364648607dff9ff94716154204b9b5a8297/blister_cpp-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b36295bd7a49df02447717a8fc949f86", "sha256": "3e9d876df4d81606415d321e969979b4aea5fe6789994edc142ac5592fe9611c"}, "downloads": -1, "filename": "blister-cpp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b36295bd7a49df02447717a8fc949f86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6239, "upload_time": "2019-12-01T17:17:19", "upload_time_iso_8601": "2019-12-01T17:17:19.299915Z", "url": "https://files.pythonhosted.org/packages/a7/44/34af246b7ad430b4fcba831e37220838caddd53111a4e577e7a11cda7be0/blister-cpp-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd43b308c4910b8e6968877218b19b15", "sha256": "dae74b45474e42ea4fee5b6496c505debe9e70f12af3c875dc84f08f255bcd5f"}, "downloads": -1, "filename": "blister_cpp-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dd43b308c4910b8e6968877218b19b15", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20862, "upload_time": "2019-12-01T17:17:17", "upload_time_iso_8601": "2019-12-01T17:17:17.017748Z", "url": "https://files.pythonhosted.org/packages/98/29/897009bc224cd2cc93a2b387c364648607dff9ff94716154204b9b5a8297/blister_cpp-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b36295bd7a49df02447717a8fc949f86", "sha256": "3e9d876df4d81606415d321e969979b4aea5fe6789994edc142ac5592fe9611c"}, "downloads": -1, "filename": "blister-cpp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b36295bd7a49df02447717a8fc949f86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6239, "upload_time": "2019-12-01T17:17:19", "upload_time_iso_8601": "2019-12-01T17:17:19.299915Z", "url": "https://files.pythonhosted.org/packages/a7/44/34af246b7ad430b4fcba831e37220838caddd53111a4e577e7a11cda7be0/blister-cpp-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:05 2020"}