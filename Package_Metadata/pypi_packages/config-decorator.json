{"info": {"author": "HotOffThe Hamster", "author_email": "hotoffthehamster+configdecorator@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "#######################################\nconfig-decorator User Options Framework\n#######################################\n.. config-decorator Documentation\n\n.. image:: https://api.travis-ci.com/hotoffthehamster/config-decorator.svg?branch=master\n  :target: https://travis-ci.com/hotoffthehamster/config-decorator\n  :alt: Build Status\n\n.. image:: https://codecov.io/gh/hotoffthehamster/config-decorator/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/hotoffthehamster/config-decorator\n  :alt: Coverage Status\n\n.. image:: https://readthedocs.org/projects/config-decorator/badge/?version=latest\n  :target: https://config-decorator.readthedocs.io/en/latest/\n  :alt: Documentation Status\n\n.. image:: https://img.shields.io/github/v/release/hotoffthehamster/config-decorator.svg?style=flat\n  :target: https://github.com/hotoffthehamster/config-decorator/releases\n  :alt: GitHub Release Status\n\n.. image:: https://img.shields.io/pypi/v/config-decorator.svg\n  :target: https://pypi.org/project/config-decorator/\n  :alt: PyPI Release Status\n\n.. image:: https://img.shields.io/github/license/hotoffthehamster/config-decorator.svg?style=flat\n  :target: https://github.com/hotoffthehamster/config-decorator/blob/master/LICENSE\n  :alt: License Status\n\n.. |dob| replace:: ``dob``\n.. _dob: https://github.com/hotoffthehamster/dob\n\n.. |nark| replace:: ``nark``\n.. _nark: https://github.com/hotoffthehamster/nark\n\n.. |config-decorator| replace:: ``config-decorator``\n.. _config-decorator: https://github.com/hotoffthehamster/config-decorator\n\n.. |ConfigObj| replace:: ``ConfigObj``\n.. _ConfigObj: https://github.com/DiffSK/configobj\n\nUser configuration framework developed for |dob|_.\n\n========\nOverview\n========\n\n``config-decorator`` makes it easy to define a hierarchical\ncollection of user-configurable key-value settings using\nPythonic ``@decorator`` syntax. It can be used with a modern\nfile round tripper, such as |ConfigObj|_, to add a capable,\nrobust user configuration subsystem to any application.\n\n.. Build elegant, robust, and maintainable configuration settings\n.. using common sense and ``@decorated`` class methods.\n\n.. The configuration settings define a collection of user-settable values and\n.. their defaults, as well as specifying type validation, value validation,\n.. user help, and more.\n\n.. An instantiated configuration object acts like a subscriptable ``dict``,\n.. making it easy to drop into existing code.\n\n.. The configuration settings can also be marshalled to or from a flat\n.. dictionary, making it easy to persist using an external package\n.. (for example, |ConfigObj|_, which reads and writes INI files to and\n.. from dictionaries).\n\n=======\nExample\n=======\n\nHere's a simple example:\n\n.. code-block:: Python\n\n    #!/usr/bin/env python3\n\n    from config_decorator import section\n\n    def generate_config():\n\n        @section(None)\n        class ConfigRoot(object):\n            '''Decorate an empty class to create the root settings section.'''\n            pass\n\n\n        @ConfigRoot.section('mood')\n        class ConfigSection(object):\n            '''Use the root settings section decorator to define setting groups.'''\n\n            @property\n            @ConfigRoot.setting(\n                \"The color\",\n                choices=['red', 'yellow', 'blue'],\n            )\n            def color(self):\n                return 'red'\n\n            @property\n            @ConfigRoot.setting(\n                \"The volume\",\n                validate=lambda val: 0 <= val and val <= 11,\n            )\n            def volume(self):\n                return 11\n\n        @ConfigRoot.section('vibe')\n        class ConfigSection(object):\n            '''Another settings section.'''\n\n            @property\n            @ConfigRoot.setting(\n                \"Is it funky yet?\",\n                value_type=bool,\n            )\n            def funky(self):\n                # Because value_type=bool, str will be converted to bool.\n                # - Useful for config files where all values are strings!\n                return 'False'\n\n            @property\n            @ConfigRoot.setting(\n                \"A list of numbers I heard in a song\",\n            )\n            def cleopatra(self):\n                return [5, 10, 15, 20, 25, 30, 35, 40]\n\n            @property\n            @ConfigRoot.setting(\n                \"Example showing how to use dashes in a settings name\",\n                name='kick-out-the-jams'\n            )\n            def kick_out_the_jams(self):\n                return \"I done kicked em out!\"\n\n        return ConfigRoot\n\n\n    cfgroot = generate_config()\n\n    # The config object is subscriptable.\n    assert(cfgroot['mood']['color'] == 'red')\n\n    # You can override defaults with user values.\n    cfgroot['mood']['color'] = 'blue'\n    assert(cfgroot['mood']['color'] == 'blue')\n\n    # And you can always reset your values back to default.\n    assert(cfgroot.mood.color.default == 'red')\n    cfgroot.forget_config_values()\n    assert(cfgroot['mood']['color'] == 'red')\n\n    # The config object is attribute-aware (allows dot-notation).\n    cfgroot.vibe.cleopatra.value = 100\n    # And list-type values intelligently convert atoms to lists.\n    assert(cfgroot.vibe.cleopatra.value == [100])\n\n    # The config object is environ-aware, and prefers values it reads\n    # from the environment over those from a config file.\n    import os\n    from config_decorator.key_chained_val import KeyChainedValue\n    KeyChainedValue._envvar_prefix = 'TEST_'\n    os.environ['TEST_MOOD_VOLUME'] = '8'\n    assert(cfgroot.mood.volume.value == 8)\n\n    # The config object can be flattened to a dict, which makes it easy\n    # to persist settings keys and values to disk using another package.\n    from configobj import ConfigObj\n    saved_cfg = ConfigObj('path/to/persisted/settings')\n    cfgroot.apply_items(saved_cfg)\n    saved_cfg.write()\n\n    # Likewise, values can be read from a dictionary, which makes loading\n    # them from a file saved to disk easy to do as well.\n    saved_cfg = ConfigObj('path/to/persisted/settings')\n    cfgroot.update_known(saved_cfg)\n\n========\nFeatures\n========\n\n* A setting value may come from one or more sources, but the value of the\n  most important source is the value used. A setting value may come from\n  the following sources, ordered from most important to least:\n\n  * A \"forced\" value set internally by the application.\n\n  * A \"cliarg\" value read from command line arguments.\n\n  * An \"envvar\" value read from an environment variable.\n\n  * A \"config\" value read from a user-supplied dictionary\n    (e.g., from an INI file loaded by |ConfigObj|_).\n\n  * A default value (determined by decorated method used to define the setting).\n\n* Each setting value is:\n\n  * always type-checked, though the type check could be a no-op;\n\n  * optionally validated, possibly against a user-supplied *choices* list;\n\n  * always documented, either by the first decorator argument,\n    or from the decorated method ``'''docstring'''``;\n\n  * sometimes hidden (e.g., for developer-only or experimental settings,\n    to keep the user from seeing the setting unless its value differs\n    from the default value);\n\n  * sometimes ephemeral, or not saved (e.g., for values based on other\n    values that must be generated at runtime, after all value sources\n    are loaded).\n\n=======\nExplore\n=======\n\n* For complete usage examples, see this project's ``tests/``.\n\n* For a real-world usage example, see |nark|_'s ``ConfigRoot`` and related.\n\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hotoffthehamster/config-decorator", "keywords": "library,configuration,settings,options,ini,conf,config", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "config-decorator", "package_url": "https://pypi.org/project/config-decorator/", "platform": "any", "project_url": "https://pypi.org/project/config-decorator/", "project_urls": {"Documentation": "https://config-decorator.readthedocs.io/en/latest/", "Homepage": "https://github.com/hotoffthehamster/config-decorator", "Source Code": "https://github.com/hotoffthehamster/config-decorator"}, "release_url": "https://pypi.org/project/config-decorator/2.0.12/", "requires_dist": null, "requires_python": "", "summary": "Class @decorator for defining exquisite settings configurations.", "version": "2.0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/hotoffthehamster/config-decorator\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6ced22edd4d09957bc82df05691a096cc668b2a/68747470733a2f2f6170692e7472617669732d63692e636f6d2f686f746f666674686568616d737465722f636f6e6669672d6465636f7261746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/hotoffthehamster/config-decorator\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/875b4072ecbe6fc39549713580696b0ae74ccc82/68747470733a2f2f636f6465636f762e696f2f67682f686f746f666674686568616d737465722f636f6e6669672d6465636f7261746f722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://config-decorator.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1fcef168c2c10d42898d0810b12c5e121996a86/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636f6e6669672d6465636f7261746f722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/hotoffthehamster/config-decorator/releases\" rel=\"nofollow\"><img alt=\"GitHub Release Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/368195a91bd881075a2b41af1d99a0b4918d26c0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f686f746f666674686568616d737465722f636f6e6669672d6465636f7261746f722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.org/project/config-decorator/\" rel=\"nofollow\"><img alt=\"PyPI Release Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ae8c53e9742568fd06f560f540c210dfb14b732/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6e6669672d6465636f7261746f722e737667\"></a>\n<a href=\"https://github.com/hotoffthehamster/config-decorator/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a4bd2de8aefc742b68ca9595a7aa19378b86d751/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f686f746f666674686568616d737465722f636f6e6669672d6465636f7261746f722e7376673f7374796c653d666c6174\"></a>\n<p>User configuration framework developed for <a href=\"https://github.com/hotoffthehamster/dob\" rel=\"nofollow\"><tt>dob</tt></a>.</p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><tt><span class=\"pre\">config-decorator</span></tt> makes it easy to define a hierarchical\ncollection of user-configurable key-value settings using\nPythonic <tt>@decorator</tt> syntax. It can be used with a modern\nfile round tripper, such as <a href=\"https://github.com/DiffSK/configobj\" rel=\"nofollow\"><tt>ConfigObj</tt></a>, to add a capable,\nrobust user configuration subsystem to any application.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Here\u2019s a simple example:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">config_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">section</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_config</span><span class=\"p\">():</span>\n\n    <span class=\"nd\">@section</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">class</span> <span class=\"nc\">ConfigRoot</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''Decorate an empty class to create the root settings section.'''</span>\n        <span class=\"k\">pass</span>\n\n\n    <span class=\"nd\">@ConfigRoot</span><span class=\"o\">.</span><span class=\"n\">section</span><span class=\"p\">(</span><span class=\"s1\">'mood'</span><span class=\"p\">)</span>\n    <span class=\"k\">class</span> <span class=\"nc\">ConfigSection</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''Use the root settings section decorator to define setting groups.'''</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"nd\">@ConfigRoot</span><span class=\"o\">.</span><span class=\"n\">setting</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"The color\"</span><span class=\"p\">,</span>\n            <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"s1\">'yellow'</span><span class=\"p\">,</span> <span class=\"s1\">'blue'</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'red'</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"nd\">@ConfigRoot</span><span class=\"o\">.</span><span class=\"n\">setting</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"The volume\"</span><span class=\"p\">,</span>\n            <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">val</span> <span class=\"ow\">and</span> <span class=\"n\">val</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">volume</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"mi\">11</span>\n\n    <span class=\"nd\">@ConfigRoot</span><span class=\"o\">.</span><span class=\"n\">section</span><span class=\"p\">(</span><span class=\"s1\">'vibe'</span><span class=\"p\">)</span>\n    <span class=\"k\">class</span> <span class=\"nc\">ConfigSection</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''Another settings section.'''</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"nd\">@ConfigRoot</span><span class=\"o\">.</span><span class=\"n\">setting</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Is it funky yet?\"</span><span class=\"p\">,</span>\n            <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">funky</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Because value_type=bool, str will be converted to bool.</span>\n            <span class=\"c1\"># - Useful for config files where all values are strings!</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'False'</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"nd\">@ConfigRoot</span><span class=\"o\">.</span><span class=\"n\">setting</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"A list of numbers I heard in a song\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">cleopatra</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"nd\">@ConfigRoot</span><span class=\"o\">.</span><span class=\"n\">setting</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Example showing how to use dashes in a settings name\"</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'kick-out-the-jams'</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">kick_out_the_jams</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s2\">\"I done kicked em out!\"</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ConfigRoot</span>\n\n\n<span class=\"n\">cfgroot</span> <span class=\"o\">=</span> <span class=\"n\">generate_config</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># The config object is subscriptable.</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">cfgroot</span><span class=\"p\">[</span><span class=\"s1\">'mood'</span><span class=\"p\">][</span><span class=\"s1\">'color'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'red'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can override defaults with user values.</span>\n<span class=\"n\">cfgroot</span><span class=\"p\">[</span><span class=\"s1\">'mood'</span><span class=\"p\">][</span><span class=\"s1\">'color'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'blue'</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">cfgroot</span><span class=\"p\">[</span><span class=\"s1\">'mood'</span><span class=\"p\">][</span><span class=\"s1\">'color'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'blue'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># And you can always reset your values back to default.</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">cfgroot</span><span class=\"o\">.</span><span class=\"n\">mood</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"o\">==</span> <span class=\"s1\">'red'</span><span class=\"p\">)</span>\n<span class=\"n\">cfgroot</span><span class=\"o\">.</span><span class=\"n\">forget_config_values</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">cfgroot</span><span class=\"p\">[</span><span class=\"s1\">'mood'</span><span class=\"p\">][</span><span class=\"s1\">'color'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'red'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The config object is attribute-aware (allows dot-notation).</span>\n<span class=\"n\">cfgroot</span><span class=\"o\">.</span><span class=\"n\">vibe</span><span class=\"o\">.</span><span class=\"n\">cleopatra</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"c1\"># And list-type values intelligently convert atoms to lists.</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">cfgroot</span><span class=\"o\">.</span><span class=\"n\">vibe</span><span class=\"o\">.</span><span class=\"n\">cleopatra</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># The config object is environ-aware, and prefers values it reads</span>\n<span class=\"c1\"># from the environment over those from a config file.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config_decorator.key_chained_val</span> <span class=\"kn\">import</span> <span class=\"n\">KeyChainedValue</span>\n<span class=\"n\">KeyChainedValue</span><span class=\"o\">.</span><span class=\"n\">_envvar_prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'TEST_'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'TEST_MOOD_VOLUME'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'8'</span>\n<span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"n\">cfgroot</span><span class=\"o\">.</span><span class=\"n\">mood</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The config object can be flattened to a dict, which makes it easy</span>\n<span class=\"c1\"># to persist settings keys and values to disk using another package.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">configobj</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigObj</span>\n<span class=\"n\">saved_cfg</span> <span class=\"o\">=</span> <span class=\"n\">ConfigObj</span><span class=\"p\">(</span><span class=\"s1\">'path/to/persisted/settings'</span><span class=\"p\">)</span>\n<span class=\"n\">cfgroot</span><span class=\"o\">.</span><span class=\"n\">apply_items</span><span class=\"p\">(</span><span class=\"n\">saved_cfg</span><span class=\"p\">)</span>\n<span class=\"n\">saved_cfg</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Likewise, values can be read from a dictionary, which makes loading</span>\n<span class=\"c1\"># them from a file saved to disk easy to do as well.</span>\n<span class=\"n\">saved_cfg</span> <span class=\"o\">=</span> <span class=\"n\">ConfigObj</span><span class=\"p\">(</span><span class=\"s1\">'path/to/persisted/settings'</span><span class=\"p\">)</span>\n<span class=\"n\">cfgroot</span><span class=\"o\">.</span><span class=\"n\">update_known</span><span class=\"p\">(</span><span class=\"n\">saved_cfg</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>A setting value may come from one or more sources, but the value of the\nmost important source is the value used. A setting value may come from\nthe following sources, ordered from most important to least:<ul>\n<li>A \u201cforced\u201d value set internally by the application.</li>\n<li>A \u201ccliarg\u201d value read from command line arguments.</li>\n<li>An \u201cenvvar\u201d value read from an environment variable.</li>\n<li>A \u201cconfig\u201d value read from a user-supplied dictionary\n(e.g., from an INI file loaded by <a href=\"https://github.com/DiffSK/configobj\" rel=\"nofollow\"><tt>ConfigObj</tt></a>).</li>\n<li>A default value (determined by decorated method used to define the setting).</li>\n</ul>\n</li>\n<li>Each setting value is:<ul>\n<li>always type-checked, though the type check could be a no-op;</li>\n<li>optionally validated, possibly against a user-supplied <em>choices</em> list;</li>\n<li>always documented, either by the first decorator argument,\nor from the decorated method <tt><span class=\"pre\">'''docstring'''</span></tt>;</li>\n<li>sometimes hidden (e.g., for developer-only or experimental settings,\nto keep the user from seeing the setting unless its value differs\nfrom the default value);</li>\n<li>sometimes ephemeral, or not saved (e.g., for values based on other\nvalues that must be generated at runtime, after all value sources\nare loaded).</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"explore\">\n<h2>Explore</h2>\n<ul>\n<li>For complete usage examples, see this project\u2019s <tt>tests/</tt>.</li>\n<li>For a real-world usage example, see <a href=\"https://github.com/hotoffthehamster/nark\" rel=\"nofollow\"><tt>nark</tt></a>\u2019s <tt>ConfigRoot</tt> and related.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7102563, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0ac34094cb5a9db5d25ec53f7705861e", "sha256": "81c4a360c6f175ed6109549615e5de174dc9073cf72a678e3e201d6d70e0129f"}, "downloads": -1, "filename": "config_decorator-0.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "0ac34094cb5a9db5d25ec53f7705861e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31477, "upload_time": "2019-12-26T18:34:34", "upload_time_iso_8601": "2019-12-26T18:34:34.224645Z", "url": "https://files.pythonhosted.org/packages/38/6c/1adc25ca2adb02ac346f552a04aba86f37c0c7b062621758c12c302a8ab3/config_decorator-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81ac53b9741a74e5955fe7741f964a84", "sha256": "7949a79aca251c1b93d18c3e9b312eb03b393421f8f0d52ad33a3fa7059f9bff"}, "downloads": -1, "filename": "config-decorator-0.1.tar.gz", "has_sig": true, "md5_digest": "81ac53b9741a74e5955fe7741f964a84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46906, "upload_time": "2019-12-26T18:34:36", "upload_time_iso_8601": "2019-12-26T18:34:36.873775Z", "url": "https://files.pythonhosted.org/packages/ab/50/fb472cb52374f6bb2461e209300915e3b276d4977ba73a0ebca6d8441693/config-decorator-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "9bb4ffa34bec9b95433f5f1b4453f2a0", "sha256": "8f908173a57ed8714dd8507fd81dec3ad29f30a851536415a5fa1593de251b88"}, "downloads": -1, "filename": "config_decorator-0.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "9bb4ffa34bec9b95433f5f1b4453f2a0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31439, "upload_time": "2019-12-26T18:40:41", "upload_time_iso_8601": "2019-12-26T18:40:41.110093Z", "url": "https://files.pythonhosted.org/packages/de/4a/f3940ca3d0fdef5e568de9cb55096578971b6eb920a4a23dd261ced5db79/config_decorator-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84691cb6a434c45c3382f86331ad8035", "sha256": "aed8df65246e664a75a1985168c6a60bedd73dfb6a6dbae0e5779c2d7e9aa574"}, "downloads": -1, "filename": "config-decorator-0.2.tar.gz", "has_sig": true, "md5_digest": "84691cb6a434c45c3382f86331ad8035", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46708, "upload_time": "2019-12-26T18:40:43", "upload_time_iso_8601": "2019-12-26T18:40:43.182246Z", "url": "https://files.pythonhosted.org/packages/8e/35/3a27f03a23ddd00444eeb553c9a8be8c814a831e913e3c5f51f5d66e8e44/config-decorator-0.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "10097230b4ad0302214d5ab9a7f28bf1", "sha256": "6398959418ee761b5f195e45dacf29a6b6941629ed3e5a0c4dd9c9963d22f5d1"}, "downloads": -1, "filename": "config_decorator-0.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "10097230b4ad0302214d5ab9a7f28bf1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31448, "upload_time": "2019-12-26T23:05:26", "upload_time_iso_8601": "2019-12-26T23:05:26.781865Z", "url": "https://files.pythonhosted.org/packages/2c/ae/4de5bc69a946b2c197f920cf0da2ff59206e8007f699f9ce3aaad0da89a0/config_decorator-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f227104271e3e16767949322edb9072", "sha256": "731028e671f05719bb5565b75181d772c6e750ab20e689ed07787782bc67cf02"}, "downloads": -1, "filename": "config-decorator-0.3.0.tar.gz", "has_sig": true, "md5_digest": "6f227104271e3e16767949322edb9072", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46774, "upload_time": "2019-12-26T23:05:28", "upload_time_iso_8601": "2019-12-26T23:05:28.497122Z", "url": "https://files.pythonhosted.org/packages/aa/bb/d354eb33e6d669b70a8e848f34230400220868842984f90ba1e9ce4420a9/config-decorator-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "7316f3626b6802768b57fa405d5f9673", "sha256": "148683638f9acec393ca7571634f4c16aaf83b496431c6c74f9ed01da4eaac31"}, "downloads": -1, "filename": "config_decorator-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7316f3626b6802768b57fa405d5f9673", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32534, "upload_time": "2020-01-19T08:34:08", "upload_time_iso_8601": "2020-01-19T08:34:08.781315Z", "url": "https://files.pythonhosted.org/packages/b0/60/59a501372d9b9a3966270777afb11fde1c418ad18130de517fec5f0a1267/config_decorator-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a763791984c2a630924c8b8948d59f41", "sha256": "da2bbc76fde9829e958e9a021b8c42fed9aac567091f0c734cbdcc85af2f34e2"}, "downloads": -1, "filename": "config-decorator-0.4.0.tar.gz", "has_sig": false, "md5_digest": "a763791984c2a630924c8b8948d59f41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47849, "upload_time": "2020-01-19T08:34:10", "upload_time_iso_8601": "2020-01-19T08:34:10.604386Z", "url": "https://files.pythonhosted.org/packages/d1/72/8ec73422cf8ceb7c20fe9c15a079eac9d9f6c8e2db23d1d5a903c9011471/config-decorator-0.4.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "43643b226c60af8665c7bd20cd9fbe79", "sha256": "3a195084631a17f9ed21592ae975d16e4e95269d12daf05d6c5d548f677d64e0"}, "downloads": -1, "filename": "config_decorator-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "43643b226c60af8665c7bd20cd9fbe79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22414, "upload_time": "2020-01-26T06:33:37", "upload_time_iso_8601": "2020-01-26T06:33:37.326461Z", "url": "https://files.pythonhosted.org/packages/6a/b8/0a3c7650faa9ea69a61940b69f53b24d48ab28bfad0e931836de95a52954/config_decorator-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c68053464d50656dd30ade681b03a355", "sha256": "a108225babff8edb2d8c52f1f277dcc9e16d3acf93f5fcd59290df681500037c"}, "downloads": -1, "filename": "config-decorator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c68053464d50656dd30ade681b03a355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49060, "upload_time": "2020-01-26T06:33:39", "upload_time_iso_8601": "2020-01-26T06:33:39.452388Z", "url": "https://files.pythonhosted.org/packages/d9/84/4dee4b85f4d11143dbff5ceacbfef954faeca684df496700d52928f01ff0/config-decorator-1.0.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "54d8466ad04aa14397e63fc18fb42287", "sha256": "02f41412e4660a77a22904c923410369c7e530afc42e0f41ec0c9c69d96b005a"}, "downloads": -1, "filename": "config_decorator-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "54d8466ad04aa14397e63fc18fb42287", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22605, "upload_time": "2020-03-30T00:42:36", "upload_time_iso_8601": "2020-03-30T00:42:36.802166Z", "url": "https://files.pythonhosted.org/packages/ae/c6/e4f341a2f171add3d6b171086f17249f96b707d1da1f21510394cf127d33/config_decorator-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "011cda6b89bf8976d77cf254e5203b42", "sha256": "d9316055d0fb1d059c7128900611868ab2376794d3d51e5b12ffde79c5bd4627"}, "downloads": -1, "filename": "config-decorator-2.0.0.tar.gz", "has_sig": false, "md5_digest": "011cda6b89bf8976d77cf254e5203b42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2804601, "upload_time": "2020-03-30T00:42:39", "upload_time_iso_8601": "2020-03-30T00:42:39.318874Z", "url": "https://files.pythonhosted.org/packages/39/da/09970d3f0ef0bf6066a914c170504a3c98395861c8b7500b326dfeeb6820/config-decorator-2.0.0.tar.gz", "yanked": false}], "2.0.10": [{"comment_text": "", "digests": {"md5": "d7389f565b8aa9f40bb5f271e7769d68", "sha256": "525ce5f2e668643deccdfa8e1275653b1bcb150ffeb23d3da849683e329528c3"}, "downloads": -1, "filename": "config_decorator-2.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "d7389f565b8aa9f40bb5f271e7769d68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23103, "upload_time": "2020-04-20T21:46:55", "upload_time_iso_8601": "2020-04-20T21:46:55.357102Z", "url": "https://files.pythonhosted.org/packages/01/70/2ed24a2088b75de0d9338d00fa88d979e9a9e4018b1818a1f21ece127807/config_decorator-2.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c5478cfb969988e790e91dd7a7d72ec", "sha256": "45abd49f06da2ab7cf97e86843e859563f29f34ab27783c93e930753f47ffa56"}, "downloads": -1, "filename": "config-decorator-2.0.10.tar.gz", "has_sig": false, "md5_digest": "6c5478cfb969988e790e91dd7a7d72ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2806242, "upload_time": "2020-04-20T21:46:59", "upload_time_iso_8601": "2020-04-20T21:46:59.876234Z", "url": "https://files.pythonhosted.org/packages/31/e8/9e8e882573cf98eb918097712cd6f02bc09fb1945ce9884f94098b885091/config-decorator-2.0.10.tar.gz", "yanked": false}], "2.0.11": [{"comment_text": "", "digests": {"md5": "feb22b865580b0fca7ca749144e67c7a", "sha256": "b5306d1b218a4c7a4280ec2dee81861d7cbf6514c6380ee2a69a88c7113d3bad"}, "downloads": -1, "filename": "config_decorator-2.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "feb22b865580b0fca7ca749144e67c7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23212, "upload_time": "2020-04-26T01:55:18", "upload_time_iso_8601": "2020-04-26T01:55:18.460480Z", "url": "https://files.pythonhosted.org/packages/57/ce/2c26b6fe79285e8d968fd2a75999a06b996562f7aa5d2d276d12f32990af/config_decorator-2.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc3fedc31bc53242091e3e299a4c1e34", "sha256": "1b31849a15099d99f09d8de6ad9af030308cbb4a2c1b5428bad6389a0d5f4c11"}, "downloads": -1, "filename": "config-decorator-2.0.11.tar.gz", "has_sig": false, "md5_digest": "cc3fedc31bc53242091e3e299a4c1e34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2806421, "upload_time": "2020-04-26T01:55:21", "upload_time_iso_8601": "2020-04-26T01:55:21.714205Z", "url": "https://files.pythonhosted.org/packages/9d/d8/fcfbe65ef6eee278f286306a3696d95b7a6f44c46f2d3cdc7b1670445200/config-decorator-2.0.11.tar.gz", "yanked": false}], "2.0.12": [{"comment_text": "", "digests": {"md5": "4eb511142173ea17722df16e5104863f", "sha256": "6d08b62b944f6ac7a6b89c89253fd7466ae4d12bfb2d8cf3df4cfb3565bde051"}, "downloads": -1, "filename": "config_decorator-2.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "4eb511142173ea17722df16e5104863f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23306, "upload_time": "2020-04-26T03:37:57", "upload_time_iso_8601": "2020-04-26T03:37:57.807277Z", "url": "https://files.pythonhosted.org/packages/18/dd/8aa1285a73d3bc76b9860036d13b1c42c13bc17ae59b8966e6d6d292e95d/config_decorator-2.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "335c03012369b0074df5fb2fc9a332df", "sha256": "66ebf51211ab2da355f731f604b6038f9df91483abb00fd9475abefd323e72d1"}, "downloads": -1, "filename": "config-decorator-2.0.12.tar.gz", "has_sig": false, "md5_digest": "335c03012369b0074df5fb2fc9a332df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2806619, "upload_time": "2020-04-26T03:38:01", "upload_time_iso_8601": "2020-04-26T03:38:01.446777Z", "url": "https://files.pythonhosted.org/packages/bd/49/d6c25cf7fc67ec3f2766c5e5f3a7074bff731a068c9a3949407b5c2bd113/config-decorator-2.0.12.tar.gz", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "ab9dc9e580009a5ab89d5787bcfa5d1f", "sha256": "29be268680c663eff9b493683d3d2216523fafa640de63edfddb065300185301"}, "downloads": -1, "filename": "config_decorator-2.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ab9dc9e580009a5ab89d5787bcfa5d1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22642, "upload_time": "2020-04-10T09:05:09", "upload_time_iso_8601": "2020-04-10T09:05:09.370552Z", "url": "https://files.pythonhosted.org/packages/6e/7c/6b2b1158225f5f5cd10e73d2d2ca93a8abaad9d81935226233c33255f276/config_decorator-2.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43b9454ad610c83d5dcc3dd98a7b50e4", "sha256": "1216fad719566fe57a9cdd46cc9604049fc74c055142688ac051c2eca12b2cb5"}, "downloads": -1, "filename": "config-decorator-2.0.7.tar.gz", "has_sig": false, "md5_digest": "43b9454ad610c83d5dcc3dd98a7b50e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2805001, "upload_time": "2020-04-10T09:05:12", "upload_time_iso_8601": "2020-04-10T09:05:12.056342Z", "url": "https://files.pythonhosted.org/packages/9e/00/712d020589ed511b41007c548f6cc0a164f2324ff6f12d737b4b691b09bd/config-decorator-2.0.7.tar.gz", "yanked": false}], "2.0.8": [{"comment_text": "", "digests": {"md5": "cbc4a6933ac03d2cc11f5d2494db9790", "sha256": "88669e86782e2a7df2dd2d08623db4df77f38762c18c5cfe83a15c47a4174fd8"}, "downloads": -1, "filename": "config_decorator-2.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "cbc4a6933ac03d2cc11f5d2494db9790", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22655, "upload_time": "2020-04-16T03:20:41", "upload_time_iso_8601": "2020-04-16T03:20:41.522929Z", "url": "https://files.pythonhosted.org/packages/35/fa/b609dfab114b059fd051541e82586ae442b002f61a241d030b7da4435e69/config_decorator-2.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d7d28a0d889149f4cccf9a97dc376f1", "sha256": "6824f65edd9d1405d239d9da541418dccc58814613a4f800cddcc1df6cf14a8a"}, "downloads": -1, "filename": "config-decorator-2.0.8.tar.gz", "has_sig": false, "md5_digest": "3d7d28a0d889149f4cccf9a97dc376f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2805050, "upload_time": "2020-04-16T03:20:44", "upload_time_iso_8601": "2020-04-16T03:20:44.159842Z", "url": "https://files.pythonhosted.org/packages/2a/ff/a980c9fb08df614bef5f894a4f2d739df8a1c47ac8329c48197e7887a456/config-decorator-2.0.8.tar.gz", "yanked": false}], "2.0.9": [{"comment_text": "", "digests": {"md5": "6980c60b2bc6610f0d0fbc289f7cf0dc", "sha256": "acb5622dcf8956d0482672a4757ddada229e6e4eff507017ed7548bf3ca8f9da"}, "downloads": -1, "filename": "config_decorator-2.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "6980c60b2bc6610f0d0fbc289f7cf0dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22929, "upload_time": "2020-04-18T02:37:07", "upload_time_iso_8601": "2020-04-18T02:37:07.163450Z", "url": "https://files.pythonhosted.org/packages/5c/d9/7b9ba6211671751480cb2eb297388402d614848fab030283d2106c1771ba/config_decorator-2.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ee060cc079fe0108a9870c6d04598dd", "sha256": "54b7cb69c59b48b2cf270fc5f86e6ab65be18f3701d8195ac8d72e506dd1e479"}, "downloads": -1, "filename": "config-decorator-2.0.9.tar.gz", "has_sig": false, "md5_digest": "0ee060cc079fe0108a9870c6d04598dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2805441, "upload_time": "2020-04-18T02:37:10", "upload_time_iso_8601": "2020-04-18T02:37:10.866201Z", "url": "https://files.pythonhosted.org/packages/d8/40/795ca6bc6e94fab93e36fdf6569c8f3a0905b89188def5c4f3db2ba93c64/config-decorator-2.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4eb511142173ea17722df16e5104863f", "sha256": "6d08b62b944f6ac7a6b89c89253fd7466ae4d12bfb2d8cf3df4cfb3565bde051"}, "downloads": -1, "filename": "config_decorator-2.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "4eb511142173ea17722df16e5104863f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23306, "upload_time": "2020-04-26T03:37:57", "upload_time_iso_8601": "2020-04-26T03:37:57.807277Z", "url": "https://files.pythonhosted.org/packages/18/dd/8aa1285a73d3bc76b9860036d13b1c42c13bc17ae59b8966e6d6d292e95d/config_decorator-2.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "335c03012369b0074df5fb2fc9a332df", "sha256": "66ebf51211ab2da355f731f604b6038f9df91483abb00fd9475abefd323e72d1"}, "downloads": -1, "filename": "config-decorator-2.0.12.tar.gz", "has_sig": false, "md5_digest": "335c03012369b0074df5fb2fc9a332df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2806619, "upload_time": "2020-04-26T03:38:01", "upload_time_iso_8601": "2020-04-26T03:38:01.446777Z", "url": "https://files.pythonhosted.org/packages/bd/49/d6c25cf7fc67ec3f2766c5e5f3a7074bff731a068c9a3949407b5c2bd113/config-decorator-2.0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:57 2020"}