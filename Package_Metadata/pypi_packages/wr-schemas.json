{"info": {"author": "Jazeps Basko", "author_email": "jazeps.basko@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "*****************************\nwr-schemas\n*****************************\n\nA schema describes:\n\n 1. a data structure\n 2. a mapping of one data structure into another\n\nA schema consists of a list of fields.\n\nA field doesn't have a type -- it is a type itself, in a way. Instead of a type, a field has a bi-directional\nmapping. Given two different data structures ``x`` and ``y``, a mapping describes how to calculate ``x.f`` from\n``y.f`` and how to calculate ``y.f`` from ``x.f``.\n\nFields support following attributes:\n\n * name\n * mapping\n * default\n * source_name (source_names)\n * min_len, max_len, auto_trim\n * min, max\n * choices\n * regex\n * required, forbidden\n * nullable\n\nAlso:\n\n * Nested fields are supported.\n * Fields are easy to clone for reuse.\n * Fields and schemas are easy to reverse.\n * Schemas are easy to chain.\n\n.. code-block:: python\n\n    from wr_schemas import Field, Schema, Mappings\n\n\n    class Fields:\n        user_id = Field('id', mapping=int, min=1)\n        user_username = Field('username', min_len=5, max_len=100, regex=r'^[a-zA-Z0-9_\\-\\.@]+$')\n        user_password = Field('password', min_len=10, max_len=100, regex=r'^[a-zA-Z0-9]+$')\n        user_dob = Field('date_of_birth', mapping=Mappings.date())\n\n\n    CreateUser = Schema(\n        Fields.user_username.clone(required=True),\n        Fields.user_password.clone(default=None),\n        Fields.user_dob.clone(default=None),\n    )\n\n    payload = CreateUser.load({'username': 'marcus.aurelius@rome.gov'})\n    assert payload.username == 'marcus.aurelius@rome.gov'\n    assert payload.password is None\n    assert payload.date_of_birth is None\n\n    print(CreateUser.dump(payload))\n\n\nFlask:\n\n.. code-block:: python\n\n    from wr_schemas import Field, Schema, Mappings\n    from wr_schemas.flask_request import FlaskRequestSchemaMixin\n\n    CreateUser = Schema(\n        Field('username', required=True),\n        Field('password', required=True),\n        mixins=[FlaskRequestSchemaMixin],\n    )\n    user = CreateUser.from_request()", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jbasko/wr-schemas", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wr-schemas", "package_url": "https://pypi.org/project/wr-schemas/", "platform": "", "project_url": "https://pypi.org/project/wr-schemas/", "project_urls": {"Homepage": "https://github.com/jbasko/wr-schemas"}, "release_url": "https://pypi.org/project/wr-schemas/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "wr-schemas", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A schema describes:</p>\n<blockquote>\n<ol>\n<li>a data structure</li>\n<li>a mapping of one data structure into another</li>\n</ol>\n</blockquote>\n<p>A schema consists of a list of fields.</p>\n<p>A field doesn\u2019t have a type \u2013 it is a type itself, in a way. Instead of a type, a field has a bi-directional\nmapping. Given two different data structures <tt>x</tt> and <tt>y</tt>, a mapping describes how to calculate <tt>x.f</tt> from\n<tt>y.f</tt> and how to calculate <tt>y.f</tt> from <tt>x.f</tt>.</p>\n<p>Fields support following attributes:</p>\n<blockquote>\n<ul>\n<li>name</li>\n<li>mapping</li>\n<li>default</li>\n<li>source_name (source_names)</li>\n<li>min_len, max_len, auto_trim</li>\n<li>min, max</li>\n<li>choices</li>\n<li>regex</li>\n<li>required, forbidden</li>\n<li>nullable</li>\n</ul>\n</blockquote>\n<p>Also:</p>\n<blockquote>\n<ul>\n<li>Nested fields are supported.</li>\n<li>Fields are easy to clone for reuse.</li>\n<li>Fields and schemas are easy to reverse.</li>\n<li>Schemas are easy to chain.</li>\n</ul>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wr_schemas</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">Mappings</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Fields</span><span class=\"p\">:</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">mapping</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">user_username</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"n\">min_len</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">max_len</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'^[a-zA-Z0-9_\\-\\.@]+$'</span><span class=\"p\">)</span>\n    <span class=\"n\">user_password</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">min_len</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">max_len</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'^[a-zA-Z0-9]+$'</span><span class=\"p\">)</span>\n    <span class=\"n\">user_dob</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'date_of_birth'</span><span class=\"p\">,</span> <span class=\"n\">mapping</span><span class=\"o\">=</span><span class=\"n\">Mappings</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">())</span>\n\n\n<span class=\"n\">CreateUser</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span>\n    <span class=\"n\">Fields</span><span class=\"o\">.</span><span class=\"n\">user_username</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"n\">Fields</span><span class=\"o\">.</span><span class=\"n\">user_password</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">Fields</span><span class=\"o\">.</span><span class=\"n\">user_dob</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">CreateUser</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">({</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'marcus.aurelius@rome.gov'</span><span class=\"p\">})</span>\n<span class=\"k\">assert</span> <span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"s1\">'marcus.aurelius@rome.gov'</span>\n<span class=\"k\">assert</span> <span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"k\">assert</span> <span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">date_of_birth</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">CreateUser</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">))</span>\n</pre>\n<p>Flask:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wr_schemas</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">Mappings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wr_schemas.flask_request</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskRequestSchemaMixin</span>\n\n<span class=\"n\">CreateUser</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span>\n    <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"n\">mixins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">FlaskRequestSchemaMixin</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">CreateUser</span><span class=\"o\">.</span><span class=\"n\">from_request</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 3623022, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "19eccc30f8c6db2350e19c68deeb92e2", "sha256": "244132b64c11f15218de16108e2e84a162386ec91828b768ddc88d68083299fa"}, "downloads": -1, "filename": "wr-schemas-0.4.0.tar.gz", "has_sig": false, "md5_digest": "19eccc30f8c6db2350e19c68deeb92e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10891, "upload_time": "2018-02-21T01:30:49", "upload_time_iso_8601": "2018-02-21T01:30:49.849779Z", "url": "https://files.pythonhosted.org/packages/6d/45/945066108ee5d4e2a676cb797974523233799bdc6d1392c7c8a54be4e805/wr-schemas-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "0a56878aae0f04763861e019126f8e3e", "sha256": "defd0ae7e4bfae34924035a6b816b92640c74feb30239aa1dbae2297f42cf064"}, "downloads": -1, "filename": "wr-schemas-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0a56878aae0f04763861e019126f8e3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9955, "upload_time": "2018-02-27T21:07:36", "upload_time_iso_8601": "2018-02-27T21:07:36.145072Z", "url": "https://files.pythonhosted.org/packages/6a/d2/1b2b6d72a149b2d1d7dacad98a77db2ebe88aaf4f676311b03a155057e7b/wr-schemas-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a56878aae0f04763861e019126f8e3e", "sha256": "defd0ae7e4bfae34924035a6b816b92640c74feb30239aa1dbae2297f42cf064"}, "downloads": -1, "filename": "wr-schemas-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0a56878aae0f04763861e019126f8e3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9955, "upload_time": "2018-02-27T21:07:36", "upload_time_iso_8601": "2018-02-27T21:07:36.145072Z", "url": "https://files.pythonhosted.org/packages/6a/d2/1b2b6d72a149b2d1d7dacad98a77db2ebe88aaf4f676311b03a155057e7b/wr-schemas-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:12 2020"}