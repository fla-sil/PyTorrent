{"info": {"author": "Santo Cariotti", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# frest\nHow to create a REST API very quickly.\n\n## Installation\nInstall **frest** by pip package (you must have Python>=3.6). In this example I'm using [virtualev](https://pypi.org/project/virtualenv/), a tool for virtual environment creation.\n```\n$ virtualenv env\n$ source env/bin/activate\n(env) $ pip install frest\n```\n\n## Use\n#### Create a project\n```\n(env) $ frest --init project                                                                                                                                                \n\n   __               _    \n  / _|             | |   \n | |_ _ __ ___  ___| |_ \n |  _| '__/ _ \\/ __| __| \n | | | | |  __/\\__ \\ |_  \n |_| |_|  \\___||___/\\__|\n\n\n\nCreate project/... OK\nCreate project/__init__.py... OK\n\n```\nIt will create a project tree folder like this one:\n* database.py\n\tA file with DATABASE_URI, database path, default is `sqlite:///database.db`.\n* mail.py\n\tA file with mail configuration: server, port, password etc.\n* app.py\n\tA file with routes and mail/database configuration.\n* wsgi.py\n\tFile used for production.\n\n#### Create first app\nInside `project` folder, we start to create a new app. For example, we want to store books inside our database.\n```\n(env) $ cd project/\n(env) $ pip --startapp book\n```\n\nIt will print something like this:\n```\n   __               _    \n  / _|             | |   \n | |_ _ __ ___  ___| |_ \n |  _| '__/ _ \\/ __| __| \n | | | | |  __/\\__ \\ |_  \n |_| |_|  \\___||___/\\__|\n\n\n\nCreate scheme/... OK\nCreate scheme/book... OK\nCreate scheme/book/__init__.py... OK\nCreate model for book...\nFields id, created_at, updated_at are default on every new model, you can delete it from model file\n\nCreate field? (Y/n): \n```\nNow we have to define a model for our `book`, using 6 data types: integer, string, text, datetime, float, bool.\nThis is an example of our `book` with **name** and **pubblication date**:\n```\nChoose field name: name\nChoose field type: int, str, text, datetime, float, bool str\nChoose string size: 20\nField is nullable? (Y/n): n\nCreate new field? (Y/n): \nChoose field name: pubblication_date\nChoose field type: int, str, text, datetime, float, bool datetime\nField is nullable? (Y/n): n\nCreate new field? (Y/n): n\nCreate scheme/book/models.py... OK\nCreate scheme/book/forms.py... OK\nCreate scheme/book/routes.py... OK\n```\n\nNow, our book it will be inside `scheme/book`.\n\n#### Move scheme routes inside app\nEdit `project/app.py` and put your routes inside.\n```\n[...]\nfrom frest.auth.routes import api as api_users\nfrom scheme.book.routes import api as api_books\n[...]\napp.register_blueprint(api_books)\n[...]\n```\n\n#### Database creation\nOpen python interpreter, import db and create.\n```\nfrom app import db\ndb.create_all()\n```\nNow exit and check your scheme inside database. It will be something like this.\n```\nCREATE TABLE user (\n\t\"userId\" INTEGER NOT NULL, \n\temail VARCHAR(30), \n\tpassword VARCHAR(30), \n\tis_admin BOOLEAN, \n\tname VARCHAR(30), \n\tcreated_at DATETIME, \n\tPRIMARY KEY (\"userId\"), \n\tCHECK (is_admin IN (0, 1))\n);\nCREATE TABLE book (\n\t\"bookId\" INTEGER NOT NULL, \n\tname VARCHAR(20) NOT NULL, \n\tpubblication_date DATETIME NOT NULL, \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tPRIMARY KEY (\"bookId\")\n);\nCREATE TABLE token (\n\t\"tokenId\" INTEGER NOT NULL, \n\tstring VARCHAR(20), \n\tcreated_at DATETIME, \n\texpired BOOLEAN, \n\tuser_id INTEGER NOT NULL, \n\tPRIMARY KEY (\"tokenId\"), \n\tCHECK (expired IN (0, 1)), \n\tFOREIGN KEY(user_id) REFERENCES user (\"userId\")\n);\n```\n\n#### Start app\nInside `project` file you have to run `python app.py` and it's done.\n\n## TODO\n\n - [ ] Migrations of database in case of edits\n - [ ] Put automatically `routes` inside app file\n - [ ] More datatype\n - [ ] Relantionships (1-to-1, 1-to-n, n-to-n)\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dcariotti/frest", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "frest", "package_url": "https://pypi.org/project/frest/", "platform": "", "project_url": "https://pypi.org/project/frest/", "project_urls": {"Homepage": "https://github.com/dcariotti/frest"}, "release_url": "https://pypi.org/project/frest/0.1.0/", "requires_dist": ["argparse (==1.1)", "flask-mail (==0.9.1)", "flask (==1.1.1)", "flask-cors (==3.0.8)", "flask-sqlalchemy (==2.3.0)", "pytz (==2018.5)"], "requires_python": ">=3.6", "summary": "Write REST API quickly", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>frest</h1>\n<p>How to create a REST API very quickly.</p>\n<h2>Installation</h2>\n<p>Install <strong>frest</strong> by pip package (you must have Python&gt;=3.6). In this example I'm using <a href=\"https://pypi.org/project/virtualenv/\" rel=\"nofollow\">virtualev</a>, a tool for virtual environment creation.</p>\n<pre><code>$ virtualenv env\n$ source env/bin/activate\n(env) $ pip install frest\n</code></pre>\n<h2>Use</h2>\n<h4>Create a project</h4>\n<pre><code>(env) $ frest --init project                                                                                                                                                \n\n   __               _    \n  / _|             | |   \n | |_ _ __ ___  ___| |_ \n |  _| '__/ _ \\/ __| __| \n | | | | |  __/\\__ \\ |_  \n |_| |_|  \\___||___/\\__|\n\n\n\nCreate project/... OK\nCreate project/__init__.py... OK\n\n</code></pre>\n<p>It will create a project tree folder like this one:</p>\n<ul>\n<li>database.py\nA file with DATABASE_URI, database path, default is <code>sqlite:///database.db</code>.</li>\n<li>mail.py\nA file with mail configuration: server, port, password etc.</li>\n<li>app.py\nA file with routes and mail/database configuration.</li>\n<li>wsgi.py\nFile used for production.</li>\n</ul>\n<h4>Create first app</h4>\n<p>Inside <code>project</code> folder, we start to create a new app. For example, we want to store books inside our database.</p>\n<pre><code>(env) $ cd project/\n(env) $ pip --startapp book\n</code></pre>\n<p>It will print something like this:</p>\n<pre><code>   __               _    \n  / _|             | |   \n | |_ _ __ ___  ___| |_ \n |  _| '__/ _ \\/ __| __| \n | | | | |  __/\\__ \\ |_  \n |_| |_|  \\___||___/\\__|\n\n\n\nCreate scheme/... OK\nCreate scheme/book... OK\nCreate scheme/book/__init__.py... OK\nCreate model for book...\nFields id, created_at, updated_at are default on every new model, you can delete it from model file\n\nCreate field? (Y/n): \n</code></pre>\n<p>Now we have to define a model for our <code>book</code>, using 6 data types: integer, string, text, datetime, float, bool.\nThis is an example of our <code>book</code> with <strong>name</strong> and <strong>pubblication date</strong>:</p>\n<pre><code>Choose field name: name\nChoose field type: int, str, text, datetime, float, bool str\nChoose string size: 20\nField is nullable? (Y/n): n\nCreate new field? (Y/n): \nChoose field name: pubblication_date\nChoose field type: int, str, text, datetime, float, bool datetime\nField is nullable? (Y/n): n\nCreate new field? (Y/n): n\nCreate scheme/book/models.py... OK\nCreate scheme/book/forms.py... OK\nCreate scheme/book/routes.py... OK\n</code></pre>\n<p>Now, our book it will be inside <code>scheme/book</code>.</p>\n<h4>Move scheme routes inside app</h4>\n<p>Edit <code>project/app.py</code> and put your routes inside.</p>\n<pre><code>[...]\nfrom frest.auth.routes import api as api_users\nfrom scheme.book.routes import api as api_books\n[...]\napp.register_blueprint(api_books)\n[...]\n</code></pre>\n<h4>Database creation</h4>\n<p>Open python interpreter, import db and create.</p>\n<pre><code>from app import db\ndb.create_all()\n</code></pre>\n<p>Now exit and check your scheme inside database. It will be something like this.</p>\n<pre><code>CREATE TABLE user (\n\t\"userId\" INTEGER NOT NULL, \n\temail VARCHAR(30), \n\tpassword VARCHAR(30), \n\tis_admin BOOLEAN, \n\tname VARCHAR(30), \n\tcreated_at DATETIME, \n\tPRIMARY KEY (\"userId\"), \n\tCHECK (is_admin IN (0, 1))\n);\nCREATE TABLE book (\n\t\"bookId\" INTEGER NOT NULL, \n\tname VARCHAR(20) NOT NULL, \n\tpubblication_date DATETIME NOT NULL, \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tPRIMARY KEY (\"bookId\")\n);\nCREATE TABLE token (\n\t\"tokenId\" INTEGER NOT NULL, \n\tstring VARCHAR(20), \n\tcreated_at DATETIME, \n\texpired BOOLEAN, \n\tuser_id INTEGER NOT NULL, \n\tPRIMARY KEY (\"tokenId\"), \n\tCHECK (expired IN (0, 1)), \n\tFOREIGN KEY(user_id) REFERENCES user (\"userId\")\n);\n</code></pre>\n<h4>Start app</h4>\n<p>Inside <code>project</code> file you have to run <code>python app.py</code> and it's done.</p>\n<h2>TODO</h2>\n<ul>\n<li>[ ] Migrations of database in case of edits</li>\n<li>[ ] Put automatically <code>routes</code> inside app file</li>\n<li>[ ] More datatype</li>\n<li>[ ] Relantionships (1-to-1, 1-to-n, n-to-n)</li>\n</ul>\n\n          </div>"}, "last_serial": 6992024, "releases": {"0.0.25": [{"comment_text": "", "digests": {"md5": "d67f6fc37cdb409ec0dae23a0b86bd34", "sha256": "d87ec53d58f57e436feb96425f1c12d59ec9885a5bf0556589d32e7287492610"}, "downloads": -1, "filename": "frest-0.0.25-py3-none-any.whl", "has_sig": false, "md5_digest": "d67f6fc37cdb409ec0dae23a0b86bd34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14940, "upload_time": "2020-04-10T09:32:22", "upload_time_iso_8601": "2020-04-10T09:32:22.868021Z", "url": "https://files.pythonhosted.org/packages/af/94/fafb854ce1eb8f58c6ab9260b4a937c096b77dcf9d9c736434fc2c64bae4/frest-0.0.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a32ae865377a1fa7e4c3fd8567bfd6b9", "sha256": "b2688e483b70fd3b69b2376e91b645712273b128d80b3fed5d2fffb1e1c83436"}, "downloads": -1, "filename": "frest-0.0.25.tar.gz", "has_sig": false, "md5_digest": "a32ae865377a1fa7e4c3fd8567bfd6b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7647, "upload_time": "2020-04-10T09:32:27", "upload_time_iso_8601": "2020-04-10T09:32:27.340622Z", "url": "https://files.pythonhosted.org/packages/9e/3f/1f4949a5def0b9f7da4b69220de1c818cd771b20ebd271ee3fcda50a055d/frest-0.0.25.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "bc61ef9d4409a46e46bdafaa912084e6", "sha256": "f9c5a3937dac917ac9a2b5f95c0414be9823cc65449b40d5a872585dddff2a7a"}, "downloads": -1, "filename": "frest-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bc61ef9d4409a46e46bdafaa912084e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16337, "upload_time": "2020-04-10T09:32:25", "upload_time_iso_8601": "2020-04-10T09:32:25.618451Z", "url": "https://files.pythonhosted.org/packages/6a/57/70dc8ccfd0f66e6778a8e4fc0735c78b2e7e7a2d32a2b3f5b8c6fca1e278/frest-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baa465a39f4944f4c54fb2b280be8630", "sha256": "3dd693223da21cb1196fcb37f99d8c3e0c0ebde01b22b0b5919aa15d2e9da91c"}, "downloads": -1, "filename": "frest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "baa465a39f4944f4c54fb2b280be8630", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10486, "upload_time": "2020-04-10T09:32:28", "upload_time_iso_8601": "2020-04-10T09:32:28.948964Z", "url": "https://files.pythonhosted.org/packages/2b/db/9f7098a457c3ebef9c9d30fa543f6b0a36db6593365ce468c40adeb0f017/frest-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc61ef9d4409a46e46bdafaa912084e6", "sha256": "f9c5a3937dac917ac9a2b5f95c0414be9823cc65449b40d5a872585dddff2a7a"}, "downloads": -1, "filename": "frest-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bc61ef9d4409a46e46bdafaa912084e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16337, "upload_time": "2020-04-10T09:32:25", "upload_time_iso_8601": "2020-04-10T09:32:25.618451Z", "url": "https://files.pythonhosted.org/packages/6a/57/70dc8ccfd0f66e6778a8e4fc0735c78b2e7e7a2d32a2b3f5b8c6fca1e278/frest-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baa465a39f4944f4c54fb2b280be8630", "sha256": "3dd693223da21cb1196fcb37f99d8c3e0c0ebde01b22b0b5919aa15d2e9da91c"}, "downloads": -1, "filename": "frest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "baa465a39f4944f4c54fb2b280be8630", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10486, "upload_time": "2020-04-10T09:32:28", "upload_time_iso_8601": "2020-04-10T09:32:28.948964Z", "url": "https://files.pythonhosted.org/packages/2b/db/9f7098a457c3ebef9c9d30fa543f6b0a36db6593365ce468c40adeb0f017/frest-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:24 2020"}