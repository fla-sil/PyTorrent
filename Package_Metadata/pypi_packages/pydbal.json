{"info": {"author": "Alexander Lokhman", "author_email": "alex.lokhman@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "pyDBAL\n======\n\nDatabase Abstraction Layer (**DBAL**) for Python 2.6+.\n\npyDBAL library is the improved and optimised port of `Doctrine\nDBAL <http://www.doctrine-project.org/projects/dbal.html>`__ project.\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install pydbal\n\nRequirements\n------------\n\nFor using ``mysql`` driver ``MySQLdb`` library is required. Optionally\n``lrucache`` is required to maintain memory safe cache operations.\n\nBasic Usage\n-----------\n\nTo open new connection import ``Connection`` from ``pydbal.connection``\npackage and initialise ``Connection`` class for a required driver with\ndesired parameters.\n\n.. code-block:: python\n\n    from pydbal.connection import Connection\n\n    conn = Connection('mysql', host='localhost', user='root', database='mydb')\n\npyDBAL currently supports the following drivers: ``mysql`` and\n``sqlite``. You can create a custom driver by inheriting\n``pydbal.drivers.BaseDriver`` and passing to ``Connection`` constructor.\n\nQuery Statements\n~~~~~~~~~~~~~~~~\n\nTo **SELECT** data from the database you may use ``query`` method. This\nmethod will return the instance of ``pydbal.statement.Statement``.\n\n.. code-block:: python\n\n    # simple fetch generator\n    for row in conn.query('SELECT * FROM table'):\n        print(row)\n\n    # same as the above but fetch mode can be applied (Connection.FETCH_*)\n    for row in conn.query('SELECT * FROM table').iterate(fetch_mode=Connection.FETCH_OBJECT):\n        print(row)\n\n    # fetch row by row\n    result = conn.query('SELECT * FROM table')\n    row1 = result.fetch()\n    row2 = result.fetch()\n\n    # fetch all rows\n    rows = conn.query('SELECT * FROM table').fetch_all()\n\n    # fetch single value from column\n    count = conn.query('SELECT COUNT(*) FROM table').fetch_column()\n\n    # fetch all values from column by index\n    ids = conn.query('SELECT id FROM table').fetch_all(fetch_mode=Connection.FETCH_COLUMN, column_index=0)\n\nExecute Statements\n~~~~~~~~~~~~~~~~~~\n\nTo execute **INSERT**, **UPDATE** or **DELETE** statements you may use\n``execute`` method. This method will return number of affected rows.\n\n.. code-block:: python\n\n    # INSERT\n    conn.execute('INSERT INTO table VALUES (?)', [val1, val2, val3])\n    last_insert_id = conn.last_insert_id()\n\n    # UPDATE\n    affected_rows = conn.execute('UPDATE table SET column = ? WHERE id = ?', val1, id_)\n\n    # DELETE\n    affected_rows = conn.execute('DELETE FROM table WHERE id = ?', id_)\n\nStatement Parameters\n~~~~~~~~~~~~~~~~~~~~\n\nBoth ``query`` and ``execute`` methods support safe parameter binding by\npassing arguments after the first ``sql`` argument.\n\n.. code-block:: python\n\n    # single positional parameter\n    row = conn.query('SELECT * FROM table WHERE id = ?', id_).fetch()\n\n    # multiple positional parameters\n    row = conn.query('SELECT * FROM table WHERE id = ? OR id = ?', id1, id2).fetch()\n\n    # named parameters\n    row = conn.query('SELECT * FROM table WHERE id = :id1 OR id = :id2', id1=id1, id2=id2).fetch()\n\n    # iterable parameters\n    row = conn.query('SELECT * FROM table WHERE id IN (?)', [id1, id2]).fetch()\n\nTransactions\n~~~~~~~~~~~~\n\npyDBAL supports transactional operations.\n\n.. code-block:: python\n\n    conn.begin_transaction()\n    try:\n        # ... execute statements ...\n        conn.commit()\n        return smth\n    except:\n        conn.rollback()\n        raise\n\n    # same as the above\n    def trans(conn):\n        # ... execute statements ...\n        return smth\n    smth = conn.transaction(trans)\n\nIf database platform supports *savepoints* you may enable and use nested\ntransactions.\n\n.. code-block:: python\n\n    conn.set_nest_transactions_with_savepoints(True)\n    conn.begin_transaction()\n    # ... execute statements 1 ...\n    conn.begin_transaction()\n    # ... execute statements 2 ...\n    conn.commit()  # commit 1\n    conn.rollback()  # rollback 2\n\n    # to control savepoints manually\n    conn.create_savepoint('MYSAVEPOINT')\n    conn.release_savepoint('MYSAVEPOINT')\n    conn.rollback_savepoint('MYSAVEPOINT')\n\nSQL Builder\n~~~~~~~~~~~\n\nTo make writing SQL statements more simple and flexible it's suggested\nto use ``pydbal.builder.SQLBuilder``.\n\n.. code-block:: python\n\n    # SELECT\n    sqb = (\n        conn.sql_builder()\n            .select('t1.id', 't2.id', 'SUM(t1.col) AS special')\n            .from_('table1', 't1')\n            .join('t1', 'table2', 't2', 't2.id = t1.id')\n            .where('t1.col = :val')\n            .set_parameter('val', val)\n            .group_by('t1.col')\n            .having('special IS NOT NULL')\n            .order_by('t2.id')\n    )\n    for row in sqb.execute():\n        print(row)\n\n    # INSERT\n    last_insert_id = (\n        conn.sql_builder()\n            .insert('table')\n            .values({'col1': val1, 'col2': val2})\n    ).execute()\n\n    # UPDATE\n    affected_rows = (\n        conn.sql_builder()\n            .update('table')\n            .set('col1', val1)\n            .set('col2', val2)\n            .where('id = :id')\n            .set_parameter('id', id_)\n    ).execute()\n\n    # DELETE\n    affected_rows = (\n        conn.sql_builder()\n            .delete('table')\n            .where('id = ?')\n            .set_parameter(0, id_)\n    ).execute()\n\nExpression Builder\n~~~~~~~~~~~~~~~~~~\n\n``WHERE``, ``HAVING`` and ``JOIN ... ON`` expressions can be created\nusing ``pydbal.builder.ExpressionBuilder``.\n\n.. code-block:: python\n\n    expr = conn.get_expression_builder()\n    # or via SQL Builder instance\n    # expr = sqb.expr()\n\n    sqb.where(\n        expr.and_x(expr.eq('a', 'b'), expr.is_null('c'))\n            .or_x(\n                expr.and_x('d IS NULL', expr.in_('e', ['1', '2', '3'])),\n                expr.neq('f', expr.literal('abc'))\n            )\n    )\n\nSchema Manager\n~~~~~~~~~~~~~~\n\npyDBAL comes with simple read only SQL schema manager. It supports\nlisting of databases, tables, views, columns, indexes and foreign keys.\nInternal database queries are cached with ``pydbal.cache`` mechanisms.\n\n.. code-block:: python\n\n    sm = conn.get_schema_manager()\n\n    # database names\n    db_names = sm.get_database_names()\n\n    # views\n    views = sm.get_views()\n    view_names = sm.get_view_names()\n\n    # tables\n    tables = sm.get_tables()\n    table_names = sm.get_table_names()\n\n    # columns\n    table_columns = sm.get_table_columns('table')\n    table_column_names = sm.get_table_column_names('table')\n\n    # indexes\n    table_indexes = sm.get_table_indexes('table')\n    table_index_names = sm.get_table_index_names('table')\n\n    # foreign keys\n    table_foreign_keys = sm.get_table_foreign_keys('table')\n    table_foreign_key_names = sm.get_table_foreign_key_names('table')\n\n\nThread-safe Connection\n~~~~~~~~~~~~~~~~~~~~~~\n\npyDBAL v0.10+ supports thread-safe connection functionality implemented in\n``pydbal.threading`` module.\n\n.. code-block:: python\n\n    from pydbal.threading import SafeConnection\n\n    conn = SafeConnection('mysql', host='localhost', user='root', database='mydb')\n\n``SafeConnection`` wrapper class maintains active connections in locked pool\nand provides helper methods for manipulating your data. Class implements method\n``locked()`` which should be passed to ``with`` statement. It generates\nisolated connection context, that can be used for sending non-trivial commands\nto the original ``pydbal.connection.Connection`` object.\n\n.. code-block:: python\n\n    # simple fetch generator\n    for row in conn.query('SELECT * FROM table'):\n        print(row)\n\n    # fetch one row\n    row = conn.fetch('SELECT * FROM table WHERE id = ?', id_)\n\n    # fetch all rows\n    rows = conn.fetch_all('SELECT * FROM table')\n\n    # fetch single value from column\n    count = conn.fetch_column('SELECT COUNT(*) FROM table')\n\n    # UPDATE or DELETE queries\n    affected_rows = conn.execute('UPDATE table SET column = ? WHERE id = ?', val1, id_)\n\n    # INSERT query with last inserted ID\n    with conn.locked() as _conn:\n        _conn.execute('INSERT INTO table VALUES (?)', [val1, val2, val3])\n        last_insert_id = _conn.last_insert_id()\n\n    # transaction callback\n    def trans(_conn):\n        # ... execute statements ...\n        return smth\n    smth = conn.transaction(trans)\n\n\nLicense\n-------\n\nLibrary is available under the MIT license. The included LICENSE file\ndescribes this in detail.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/lokhman/pydbal/tarball/0.12", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lokhman/pydbal", "keywords": "database,abstraction,sql,mysql,sqlite", "license": "https://opensource.org/licenses/MIT", "maintainer": null, "maintainer_email": null, "name": "pydbal", "package_url": "https://pypi.org/project/pydbal/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pydbal/", "project_urls": {"Download": "https://github.com/lokhman/pydbal/tarball/0.12", "Homepage": "https://github.com/lokhman/pydbal"}, "release_url": "https://pypi.org/project/pydbal/0.12/", "requires_dist": null, "requires_python": null, "summary": "Database Abstraction Layer (DBAL) for Python 2.6+", "version": "0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Database Abstraction Layer (<strong>DBAL</strong>) for Python 2.6+.</p>\n<p>pyDBAL library is the improved and optimised port of <a href=\"http://www.doctrine-project.org/projects/dbal.html\" rel=\"nofollow\">Doctrine\nDBAL</a> project.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install pydbal\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>For using <tt>mysql</tt> driver <tt>MySQLdb</tt> library is required. Optionally\n<tt>lrucache</tt> is required to maintain memory safe cache operations.</p>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p>To open new connection import <tt>Connection</tt> from <tt>pydbal.connection</tt>\npackage and initialise <tt>Connection</tt> class for a required driver with\ndesired parameters.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydbal.connection</span> <span class=\"kn\">import</span> <span class=\"n\">Connection</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"s1\">'mysql'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'root'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span>\n</pre>\n<p>pyDBAL currently supports the following drivers: <tt>mysql</tt> and\n<tt>sqlite</tt>. You can create a custom driver by inheriting\n<tt>pydbal.drivers.BaseDriver</tt> and passing to <tt>Connection</tt> constructor.</p>\n<div id=\"query-statements\">\n<h3>Query Statements</h3>\n<p>To <strong>SELECT</strong> data from the database you may use <tt>query</tt> method. This\nmethod will return the instance of <tt>pydbal.statement.Statement</tt>.</p>\n<pre><span class=\"c1\"># simple fetch generator</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># same as the above but fetch mode can be applied (Connection.FETCH_*)</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">fetch_mode</span><span class=\"o\">=</span><span class=\"n\">Connection</span><span class=\"o\">.</span><span class=\"n\">FETCH_OBJECT</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fetch row by row</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table'</span><span class=\"p\">)</span>\n<span class=\"n\">row1</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"n\">row2</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># fetch all rows</span>\n<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># fetch single value from column</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT COUNT(*) FROM table'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch_column</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># fetch all values from column by index</span>\n<span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT id FROM table'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">(</span><span class=\"n\">fetch_mode</span><span class=\"o\">=</span><span class=\"n\">Connection</span><span class=\"o\">.</span><span class=\"n\">FETCH_COLUMN</span><span class=\"p\">,</span> <span class=\"n\">column_index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"execute-statements\">\n<h3>Execute Statements</h3>\n<p>To execute <strong>INSERT</strong>, <strong>UPDATE</strong> or <strong>DELETE</strong> statements you may use\n<tt>execute</tt> method. This method will return number of affected rows.</p>\n<pre><span class=\"c1\"># INSERT</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'INSERT INTO table VALUES (?)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">val1</span><span class=\"p\">,</span> <span class=\"n\">val2</span><span class=\"p\">,</span> <span class=\"n\">val3</span><span class=\"p\">])</span>\n<span class=\"n\">last_insert_id</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">last_insert_id</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># UPDATE</span>\n<span class=\"n\">affected_rows</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'UPDATE table SET column = ? WHERE id = ?'</span><span class=\"p\">,</span> <span class=\"n\">val1</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># DELETE</span>\n<span class=\"n\">affected_rows</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'DELETE FROM table WHERE id = ?'</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"statement-parameters\">\n<h3>Statement Parameters</h3>\n<p>Both <tt>query</tt> and <tt>execute</tt> methods support safe parameter binding by\npassing arguments after the first <tt>sql</tt> argument.</p>\n<pre><span class=\"c1\"># single positional parameter</span>\n<span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table WHERE id = ?'</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># multiple positional parameters</span>\n<span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table WHERE id = ? OR id = ?'</span><span class=\"p\">,</span> <span class=\"n\">id1</span><span class=\"p\">,</span> <span class=\"n\">id2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># named parameters</span>\n<span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table WHERE id = :id1 OR id = :id2'</span><span class=\"p\">,</span> <span class=\"n\">id1</span><span class=\"o\">=</span><span class=\"n\">id1</span><span class=\"p\">,</span> <span class=\"n\">id2</span><span class=\"o\">=</span><span class=\"n\">id2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># iterable parameters</span>\n<span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table WHERE id IN (?)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">id1</span><span class=\"p\">,</span> <span class=\"n\">id2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"transactions\">\n<h3>Transactions</h3>\n<p>pyDBAL supports transactional operations.</p>\n<pre><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">begin_transaction</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ... execute statements ...</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">smth</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">rollback</span><span class=\"p\">()</span>\n    <span class=\"k\">raise</span>\n\n<span class=\"c1\"># same as the above</span>\n<span class=\"k\">def</span> <span class=\"nf\">trans</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ... execute statements ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">smth</span>\n<span class=\"n\">smth</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"p\">(</span><span class=\"n\">trans</span><span class=\"p\">)</span>\n</pre>\n<p>If database platform supports <em>savepoints</em> you may enable and use nested\ntransactions.</p>\n<pre><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">set_nest_transactions_with_savepoints</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">begin_transaction</span><span class=\"p\">()</span>\n<span class=\"c1\"># ... execute statements 1 ...</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">begin_transaction</span><span class=\"p\">()</span>\n<span class=\"c1\"># ... execute statements 2 ...</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>  <span class=\"c1\"># commit 1</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">rollback</span><span class=\"p\">()</span>  <span class=\"c1\"># rollback 2</span>\n\n<span class=\"c1\"># to control savepoints manually</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_savepoint</span><span class=\"p\">(</span><span class=\"s1\">'MYSAVEPOINT'</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">release_savepoint</span><span class=\"p\">(</span><span class=\"s1\">'MYSAVEPOINT'</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">rollback_savepoint</span><span class=\"p\">(</span><span class=\"s1\">'MYSAVEPOINT'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"sql-builder\">\n<h3>SQL Builder</h3>\n<p>To make writing SQL statements more simple and flexible it\u2019s suggested\nto use <tt>pydbal.builder.SQLBuilder</tt>.</p>\n<pre><span class=\"c1\"># SELECT</span>\n<span class=\"n\">sqb</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">sql_builder</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'t1.id'</span><span class=\"p\">,</span> <span class=\"s1\">'t2.id'</span><span class=\"p\">,</span> <span class=\"s1\">'SUM(t1.col) AS special'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">from_</span><span class=\"p\">(</span><span class=\"s1\">'table1'</span><span class=\"p\">,</span> <span class=\"s1\">'t1'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'t1'</span><span class=\"p\">,</span> <span class=\"s1\">'table2'</span><span class=\"p\">,</span> <span class=\"s1\">'t2'</span><span class=\"p\">,</span> <span class=\"s1\">'t2.id = t1.id'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'t1.col = :val'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">set_parameter</span><span class=\"p\">(</span><span class=\"s1\">'val'</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"s1\">'t1.col'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">having</span><span class=\"p\">(</span><span class=\"s1\">'special IS NOT NULL'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'t2.id'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">sqb</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># INSERT</span>\n<span class=\"n\">last_insert_id</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">sql_builder</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">({</span><span class=\"s1\">'col1'</span><span class=\"p\">:</span> <span class=\"n\">val1</span><span class=\"p\">,</span> <span class=\"s1\">'col2'</span><span class=\"p\">:</span> <span class=\"n\">val2</span><span class=\"p\">})</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># UPDATE</span>\n<span class=\"n\">affected_rows</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">sql_builder</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'col1'</span><span class=\"p\">,</span> <span class=\"n\">val1</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'col2'</span><span class=\"p\">,</span> <span class=\"n\">val2</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'id = :id'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">set_parameter</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># DELETE</span>\n<span class=\"n\">affected_rows</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">sql_builder</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'id = ?'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">set_parameter</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"expression-builder\">\n<h3>Expression Builder</h3>\n<p><tt>WHERE</tt>, <tt>HAVING</tt> and <tt>JOIN ... ON</tt> expressions can be created\nusing <tt>pydbal.builder.ExpressionBuilder</tt>.</p>\n<pre><span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_expression_builder</span><span class=\"p\">()</span>\n<span class=\"c1\"># or via SQL Builder instance</span>\n<span class=\"c1\"># expr = sqb.expr()</span>\n\n<span class=\"n\">sqb</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n    <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">and_x</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">),</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">is_null</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">))</span>\n        <span class=\"o\">.</span><span class=\"n\">or_x</span><span class=\"p\">(</span>\n            <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">and_x</span><span class=\"p\">(</span><span class=\"s1\">'d IS NULL'</span><span class=\"p\">,</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">in_</span><span class=\"p\">(</span><span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">])),</span>\n            <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">neq</span><span class=\"p\">(</span><span class=\"s1\">'f'</span><span class=\"p\">,</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">literal</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"schema-manager\">\n<h3>Schema Manager</h3>\n<p>pyDBAL comes with simple read only SQL schema manager. It supports\nlisting of databases, tables, views, columns, indexes and foreign keys.\nInternal database queries are cached with <tt>pydbal.cache</tt> mechanisms.</p>\n<pre><span class=\"n\">sm</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_schema_manager</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># database names</span>\n<span class=\"n\">db_names</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_database_names</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># views</span>\n<span class=\"n\">views</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_views</span><span class=\"p\">()</span>\n<span class=\"n\">view_names</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_view_names</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># tables</span>\n<span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_tables</span><span class=\"p\">()</span>\n<span class=\"n\">table_names</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_table_names</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># columns</span>\n<span class=\"n\">table_columns</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_table_columns</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n<span class=\"n\">table_column_names</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_table_column_names</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># indexes</span>\n<span class=\"n\">table_indexes</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_table_indexes</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n<span class=\"n\">table_index_names</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_table_index_names</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># foreign keys</span>\n<span class=\"n\">table_foreign_keys</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_table_foreign_keys</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n<span class=\"n\">table_foreign_key_names</span> <span class=\"o\">=</span> <span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">get_table_foreign_key_names</span><span class=\"p\">(</span><span class=\"s1\">'table'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"thread-safe-connection\">\n<h3>Thread-safe Connection</h3>\n<p>pyDBAL v0.10+ supports thread-safe connection functionality implemented in\n<tt>pydbal.threading</tt> module.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydbal.threading</span> <span class=\"kn\">import</span> <span class=\"n\">SafeConnection</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">SafeConnection</span><span class=\"p\">(</span><span class=\"s1\">'mysql'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'root'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'mydb'</span><span class=\"p\">)</span>\n</pre>\n<p><tt>SafeConnection</tt> wrapper class maintains active connections in locked pool\nand provides helper methods for manipulating your data. Class implements method\n<tt>locked()</tt> which should be passed to <tt>with</tt> statement. It generates\nisolated connection context, that can be used for sending non-trivial commands\nto the original <tt>pydbal.connection.Connection</tt> object.</p>\n<pre><span class=\"c1\"># simple fetch generator</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fetch one row</span>\n<span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table WHERE id = ?'</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fetch all rows</span>\n<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM table'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fetch single value from column</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fetch_column</span><span class=\"p\">(</span><span class=\"s1\">'SELECT COUNT(*) FROM table'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># UPDATE or DELETE queries</span>\n<span class=\"n\">affected_rows</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'UPDATE table SET column = ? WHERE id = ?'</span><span class=\"p\">,</span> <span class=\"n\">val1</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># INSERT query with last inserted ID</span>\n<span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">locked</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">_conn</span><span class=\"p\">:</span>\n    <span class=\"n\">_conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'INSERT INTO table VALUES (?)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">val1</span><span class=\"p\">,</span> <span class=\"n\">val2</span><span class=\"p\">,</span> <span class=\"n\">val3</span><span class=\"p\">])</span>\n    <span class=\"n\">last_insert_id</span> <span class=\"o\">=</span> <span class=\"n\">_conn</span><span class=\"o\">.</span><span class=\"n\">last_insert_id</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># transaction callback</span>\n<span class=\"k\">def</span> <span class=\"nf\">trans</span><span class=\"p\">(</span><span class=\"n\">_conn</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ... execute statements ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">smth</span>\n<span class=\"n\">smth</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"p\">(</span><span class=\"n\">trans</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Library is available under the MIT license. The included LICENSE file\ndescribes this in detail.</p>\n</div>\n\n          </div>"}, "last_serial": 2185595, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "50c7852105bf5c2c0c97455a8974a55b", "sha256": "76298eefa69fa8b44f3892912f028700e632cf9c0f7773ebb72c48bfd609adb3"}, "downloads": -1, "filename": "pydbal-0.1.tar.gz", "has_sig": false, "md5_digest": "50c7852105bf5c2c0c97455a8974a55b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12027, "upload_time": "2016-04-06T14:21:45", "upload_time_iso_8601": "2016-04-06T14:21:45.446689Z", "url": "https://files.pythonhosted.org/packages/46/31/9ee3b85710fea7527a65b47c1a697a39b5a7d342ae7fa78976e84a6fafe5/pydbal-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "e36ad9d127f53781ca9b75ecf892f24d", "sha256": "24dcb3a4fb7221e8d502a69b6eb4e13ea2ae7e668b1df0e5a5b1dc4eefd07455"}, "downloads": -1, "filename": "pydbal-0.10.tar.gz", "has_sig": false, "md5_digest": "e36ad9d127f53781ca9b75ecf892f24d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28230, "upload_time": "2016-06-10T12:40:50", "upload_time_iso_8601": "2016-06-10T12:40:50.931355Z", "url": "https://files.pythonhosted.org/packages/f0/cb/16183f7f0dca8bf05af6474ff0d4f48d14f09c53f5aadd8299eccad216aa/pydbal-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "4438dc4d8ee5cf1bc25be1e6abc1793e", "sha256": "57c8f2ce8b4d114a64c729652fc0071873f54fcc1f2e10e942dc4c62ba57319e"}, "downloads": -1, "filename": "pydbal-0.11.tar.gz", "has_sig": false, "md5_digest": "4438dc4d8ee5cf1bc25be1e6abc1793e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28240, "upload_time": "2016-06-10T16:37:43", "upload_time_iso_8601": "2016-06-10T16:37:43.258410Z", "url": "https://files.pythonhosted.org/packages/35/98/1002ed2c667a49fd7ed5781a1fbb0a690a3d6cb89b13829550f78494297a/pydbal-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "3e546be78cfa02d04787d295d52af416", "sha256": "1e89e9e87dc170f6fd487cbc93d9d5e8c86b810efdd5981a905c065ddf00c54c"}, "downloads": -1, "filename": "pydbal-0.12.tar.gz", "has_sig": false, "md5_digest": "3e546be78cfa02d04787d295d52af416", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28247, "upload_time": "2016-06-24T16:24:06", "upload_time_iso_8601": "2016-06-24T16:24:06.188889Z", "url": "https://files.pythonhosted.org/packages/45/62/6b00e5f477690e260853e6f7ef71987791668ca58501314fb0162d2754d8/pydbal-0.12.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e77716f1d38795e29f2ed99edee297bf", "sha256": "e6e7b0bc312fb58eb8820a3343e54abe610bfe990452e208b8d9631f6c5a029d"}, "downloads": -1, "filename": "pydbal-0.2.tar.gz", "has_sig": false, "md5_digest": "e77716f1d38795e29f2ed99edee297bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13127, "upload_time": "2016-04-14T13:30:32", "upload_time_iso_8601": "2016-04-14T13:30:32.644106Z", "url": "https://files.pythonhosted.org/packages/22/c6/2a714e6c6a2b567b0ccdc5d879a210810659f9c7a25db7d2bbdcad318128/pydbal-0.2.tar.gz", "yanked": false}], "0.3": [], "0.4": [{"comment_text": "", "digests": {"md5": "f1e7d5eb09e35cfa41aa4701272d1553", "sha256": "04830e96ebb847b697c79e33904736c8f9f7a38254bbeee8840a72c7c633c265"}, "downloads": -1, "filename": "pydbal-0.4.tar.gz", "has_sig": false, "md5_digest": "f1e7d5eb09e35cfa41aa4701272d1553", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18758, "upload_time": "2016-04-25T15:22:26", "upload_time_iso_8601": "2016-04-25T15:22:26.474483Z", "url": "https://files.pythonhosted.org/packages/80/8b/7860c080e49b9077b1028c6316ee809dfca86c4db59e56e2e55c0a532641/pydbal-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "047e7e0ccb4f8181ee9bbd8a0e623311", "sha256": "c41eb543d941cd6a4f09cd662181538a84ee30270c8bed737e9f3149f6552d06"}, "downloads": -1, "filename": "pydbal-0.5.tar.gz", "has_sig": false, "md5_digest": "047e7e0ccb4f8181ee9bbd8a0e623311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18757, "upload_time": "2016-04-28T09:46:53", "upload_time_iso_8601": "2016-04-28T09:46:53.134900Z", "url": "https://files.pythonhosted.org/packages/45/ba/0d57dbfb8cc0c6e4a5e000cf9cefa52af92cc1ce3aaca56d913df6a73d00/pydbal-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "775542b61a2a93b016b3655c9a6f2b46", "sha256": "caaefc17b6c892e904e67b75534786b3a8be8dbc495274c1c81fcddd3276dea4"}, "downloads": -1, "filename": "pydbal-0.6.tar.gz", "has_sig": false, "md5_digest": "775542b61a2a93b016b3655c9a6f2b46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26330, "upload_time": "2016-04-28T10:01:06", "upload_time_iso_8601": "2016-04-28T10:01:06.152336Z", "url": "https://files.pythonhosted.org/packages/a2/69/f04657266d2bd24cc7df442d58d3b40b030846f8b80d7ce736ab3a7b010e/pydbal-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "8c60d9a36141bdc7549131b3291069e7", "sha256": "6b567c4620d73cd5c14e36f316d87ee1b1019a34bb9dd175edf02450877e9dd7"}, "downloads": -1, "filename": "pydbal-0.7.tar.gz", "has_sig": false, "md5_digest": "8c60d9a36141bdc7549131b3291069e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26550, "upload_time": "2016-04-28T14:16:53", "upload_time_iso_8601": "2016-04-28T14:16:53.278453Z", "url": "https://files.pythonhosted.org/packages/ad/70/324bf50a088c9ba0bdd2c9623f526cfe1d3846238ef84c968924e89b14d9/pydbal-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "b9d631a05f343a2cf5a10d886b4446a7", "sha256": "38dc607b26b87627bbe82c45d24e4d8baf1b5c8c5189a24d32eb2812314bd2dd"}, "downloads": -1, "filename": "pydbal-0.8.tar.gz", "has_sig": false, "md5_digest": "b9d631a05f343a2cf5a10d886b4446a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26556, "upload_time": "2016-04-28T18:26:56", "upload_time_iso_8601": "2016-04-28T18:26:56.264477Z", "url": "https://files.pythonhosted.org/packages/e4/1a/e76992aeaa95f3d9a2de03bd2a441dfe421d9c61f781846e789bf01a1153/pydbal-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "ad2624b246f8dfaba7fcae6011c3d22a", "sha256": "97150559ed25fb1045d80e374f26873d5424a15b042afb8bbf22f86b23e27f96"}, "downloads": -1, "filename": "pydbal-0.9.tar.gz", "has_sig": false, "md5_digest": "ad2624b246f8dfaba7fcae6011c3d22a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26559, "upload_time": "2016-05-13T12:17:55", "upload_time_iso_8601": "2016-05-13T12:17:55.915408Z", "url": "https://files.pythonhosted.org/packages/40/ab/b36122059d92e85bab833ac51fa186b1feb5aa11e95435ab7cd518fed10a/pydbal-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3e546be78cfa02d04787d295d52af416", "sha256": "1e89e9e87dc170f6fd487cbc93d9d5e8c86b810efdd5981a905c065ddf00c54c"}, "downloads": -1, "filename": "pydbal-0.12.tar.gz", "has_sig": false, "md5_digest": "3e546be78cfa02d04787d295d52af416", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28247, "upload_time": "2016-06-24T16:24:06", "upload_time_iso_8601": "2016-06-24T16:24:06.188889Z", "url": "https://files.pythonhosted.org/packages/45/62/6b00e5f477690e260853e6f7ef71987791668ca58501314fb0162d2754d8/pydbal-0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:18 2020"}