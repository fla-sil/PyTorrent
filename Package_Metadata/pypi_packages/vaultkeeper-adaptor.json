{"info": {"author": "mracter", "author_email": "mary@praekelt.org", "bugtrack_url": null, "classifiers": [], "description": "django-vaultkeeper-adaptor\n==========================\n\n.. image:: https://img.shields.io/travis/praekeltfoundation/django-vaultkeeper-adaptor/master.svg?style=flat-square\n    :target: https://travis-ci.org/praekeltfoundation/vaultkeeper\n\n.. image:: https://img.shields.io/codecov/c/github/praekeltfoundation/django-vaultkeeper-adaptor/master.svg?style=flat-square\n    :target: https://codecov.io/github/praekeltfoundation/vaultkeeper?branch=develop\n\n|\n| A small library that allows Django applications to consume `vaultkeeper <https://github.com/praekeltfoundation/vaultkeeper>`_ output as resource secrets.\n| \n| ``django-vaultkeeper-adaptor`` supports the ``SET_ROLE`` operation `necessary to revoke dynamically-generated PostgreSQL credentials <https://github.com/jdelic/django-postgresql-setrole>`_.\n\nInstalling the Package\n----------------------\n\n| Clone this project and install the package from source with the following commands in the root directory of the repository:\n\n| ``$ pip install -e .``\n| \n| Install the package for development with the following command:\n| \n| ``$ pip install -e .[test]``\n\nPrerequisites\n-------------\n\n| Technically, you do not need to launch your application with ``vaultkeeper`` to use this library, as it is simply an input adaptor. However, using your app with ``vaultkeeper`` is strongly recommended.\n| \n| It is assumed that the rest of your Vault workflow is already configured and running. If you are using the PostgreSQL secret backend with Django, it is necessary to use ``django-postgresql-setrole`` in your application as well.\n\nHow to Use\n----------\n\n| Ensure that ``django-vaultkeeper-adaptor`` is installed in your production environment.\n| \n| Ensure that your Django application knows where the file containing your secrets will be. In your ``settings.py``, replace your existing way of populating ``DATABASES`` and ``BROKER_URL`` with the following code:\n\n\n.. code-block:: Python\n\n    cfg = environ.get('CREDENTIAL_PATH','')\n    \n    if cfg != '':\n        vk_adaptor = vaultkeeper_adaptor.VKAdaptor(\n            config_path=cfg,\n            DATABASES=DATABASES,\n            BROKER_URL=BROKER_URL,\n        )\n        vk_adaptor.process_all()\n\n|\n| ``django-vaultkeeper-adaptor`` will read the ``vaultkeeper``-generated file containing application credentials and populate the supplied settings variables with values from the file, if they exist.\n|\n| Note that ``CREDENTIAL_PATH`` in the above example is an environment variable set with the output location of ``vaultkeeper`` secrets. You can supply your application with this value in a different manner if you wish.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/praekeltfoundation/vaultkeeper", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "vaultkeeper-adaptor", "package_url": "https://pypi.org/project/vaultkeeper-adaptor/", "platform": "", "project_url": "https://pypi.org/project/vaultkeeper-adaptor/", "project_urls": {"Homepage": "https://github.com/praekeltfoundation/vaultkeeper"}, "release_url": "https://pypi.org/project/vaultkeeper-adaptor/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A small library that allows Django apps to consume Vaultkeeper output as resource secrets.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/praekeltfoundation/vaultkeeper\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/praekeltfoundation/django-vaultkeeper-adaptor/master.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acca2d06736b04227ecde447749d88c3434b54ac/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f707261656b656c74666f756e646174696f6e2f646a616e676f2d7661756c746b65657065722d61646170746f722f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://codecov.io/github/praekeltfoundation/vaultkeeper?branch=develop\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/praekeltfoundation/django-vaultkeeper-adaptor/master.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40090bcf46987edf3400f276aa3001a88a8b7588/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f707261656b656c74666f756e646174696f6e2f646a616e676f2d7661756c746b65657065722d61646170746f722f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<div>\n<div><br></div>\n<div>A small library that allows Django applications to consume <a href=\"https://github.com/praekeltfoundation/vaultkeeper\" rel=\"nofollow\">vaultkeeper</a> output as resource secrets.</div>\n<div><br></div>\n<div><tt><span class=\"pre\">django-vaultkeeper-adaptor</span></tt> supports the <tt>SET_ROLE</tt> operation <a href=\"https://github.com/jdelic/django-postgresql-setrole\" rel=\"nofollow\">necessary to revoke dynamically-generated PostgreSQL credentials</a>.</div>\n</div>\n<div id=\"installing-the-package\">\n<h2>Installing the Package</h2>\n<div>\n<div>Clone this project and install the package from source with the following commands in the root directory of the repository:</div>\n</div>\n<div>\n<div><tt>$ pip install <span class=\"pre\">-e</span> .</tt></div>\n<div><br></div>\n<div>Install the package for development with the following command:</div>\n<div><br></div>\n<div><tt>$ pip install <span class=\"pre\">-e</span> .[test]</tt></div>\n</div>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<div>\n<div>Technically, you do not need to launch your application with <tt>vaultkeeper</tt> to use this library, as it is simply an input adaptor. However, using your app with <tt>vaultkeeper</tt> is strongly recommended.</div>\n<div><br></div>\n<div>It is assumed that the rest of your Vault workflow is already configured and running. If you are using the PostgreSQL secret backend with Django, it is necessary to use <tt><span class=\"pre\">django-postgresql-setrole</span></tt> in your application as well.</div>\n</div>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<div>\n<div>Ensure that <tt><span class=\"pre\">django-vaultkeeper-adaptor</span></tt> is installed in your production environment.</div>\n<div><br></div>\n<div>Ensure that your Django application knows where the file containing your secrets will be. In your <tt>settings.py</tt>, replace your existing way of populating <tt>DATABASES</tt> and <tt>BROKER_URL</tt> with the following code:</div>\n</div>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'CREDENTIAL_PATH'</span><span class=\"p\">,</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">cfg</span> <span class=\"o\">!=</span> <span class=\"s1\">''</span><span class=\"p\">:</span>\n    <span class=\"n\">vk_adaptor</span> <span class=\"o\">=</span> <span class=\"n\">vaultkeeper_adaptor</span><span class=\"o\">.</span><span class=\"n\">VKAdaptor</span><span class=\"p\">(</span>\n        <span class=\"n\">config_path</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"p\">,</span>\n        <span class=\"n\">DATABASES</span><span class=\"o\">=</span><span class=\"n\">DATABASES</span><span class=\"p\">,</span>\n        <span class=\"n\">BROKER_URL</span><span class=\"o\">=</span><span class=\"n\">BROKER_URL</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">vk_adaptor</span><span class=\"o\">.</span><span class=\"n\">process_all</span><span class=\"p\">()</span>\n</pre>\n<div>\n<div><br></div>\n<div><tt><span class=\"pre\">django-vaultkeeper-adaptor</span></tt> will read the <tt>vaultkeeper</tt>-generated file containing application credentials and populate the supplied settings variables with values from the file, if they exist.</div>\n<div><br></div>\n<div>Note that <tt>CREDENTIAL_PATH</tt> in the above example is an environment variable set with the output location of <tt>vaultkeeper</tt> secrets. You can supply your application with this value in a different manner if you wish.</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3184806, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d500af410e914dd9af86bd53694e6f61", "sha256": "0e691d66285da77e2cca6c9c335a7d0401d9ad812e72253c74f34e4cd2e67152"}, "downloads": -1, "filename": "vaultkeeper_adaptor-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "d500af410e914dd9af86bd53694e6f61", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6267, "upload_time": "2017-09-19T08:47:30", "upload_time_iso_8601": "2017-09-19T08:47:30.719450Z", "url": "https://files.pythonhosted.org/packages/34/c9/ed3cd109a252666539ce756ffe162776e957c598dcb7560236349f74aeec/vaultkeeper_adaptor-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "242fb3af7c8866301005c4141a9634be", "sha256": "806b8e095dd6e21f1056ccb26f4d6b5bb13cea7e056c809079662849eb6efee4"}, "downloads": -1, "filename": "vaultkeeper_adaptor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "242fb3af7c8866301005c4141a9634be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3403, "upload_time": "2017-09-18T15:09:47", "upload_time_iso_8601": "2017-09-18T15:09:47.989977Z", "url": "https://files.pythonhosted.org/packages/87/76/f3ad8499f4d7792b45fa4108096fa62f393e3fa984a085fcdbdc62bc3584/vaultkeeper_adaptor-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d500af410e914dd9af86bd53694e6f61", "sha256": "0e691d66285da77e2cca6c9c335a7d0401d9ad812e72253c74f34e4cd2e67152"}, "downloads": -1, "filename": "vaultkeeper_adaptor-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "d500af410e914dd9af86bd53694e6f61", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6267, "upload_time": "2017-09-19T08:47:30", "upload_time_iso_8601": "2017-09-19T08:47:30.719450Z", "url": "https://files.pythonhosted.org/packages/34/c9/ed3cd109a252666539ce756ffe162776e957c598dcb7560236349f74aeec/vaultkeeper_adaptor-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "242fb3af7c8866301005c4141a9634be", "sha256": "806b8e095dd6e21f1056ccb26f4d6b5bb13cea7e056c809079662849eb6efee4"}, "downloads": -1, "filename": "vaultkeeper_adaptor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "242fb3af7c8866301005c4141a9634be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3403, "upload_time": "2017-09-18T15:09:47", "upload_time_iso_8601": "2017-09-18T15:09:47.989977Z", "url": "https://files.pythonhosted.org/packages/87/76/f3ad8499f4d7792b45fa4108096fa62f393e3fa984a085fcdbdc62bc3584/vaultkeeper_adaptor-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:38 2020"}