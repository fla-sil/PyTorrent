{"info": {"author": "Jens B. Jorgensen", "author_email": "jbj1@ultraemail.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: Microsoft :: Windows", "Programming Language :: C++", "Topic :: Software Development :: Libraries"], "description": "This is a binary Python extension that encapsulates Windows CY values. CY \r\nvalues are actually 64-bit signed integers that are implicitly scaled by 10e4, \r\nie. you can store fixed-point decimal numbers with 4 digits after the decimal \r\npoint. In Python when you get one of these back from a COM method it returns a \r\ntuple of two integers. This is generally not very useful, especially if you \r\nthink that you can turn around and assign this to some other COM object's \r\nproperty and expect that it will do the right thing (get the value as a CY \r\nvalue) 'cause it won't. \r\n\r\nThis Python extension DLL doesn't solve the whole problem because since the \r\nCOM extensions for Python don't have any way of passing these values in their \r\nfull 64-bit glory (as near as I can tell) there are some numbers you just \r\nwouldn't be able to set.  This extension will at least though allow you to \r\nmanipulate these values. It has full Python numeric type support (you can add, \r\nsubtract, multiply, etc). It converts to and from a variety of types. I think \r\nthere are probably a few more features needed.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://jbox.ultraemail.net:8000/~jbj1", "keywords": "windows COM automation CY", "license": "GPL", "maintainer": "Jens B. Jorgensen", "maintainer_email": "jbj1@ultraemail.net", "name": "PyCY", "package_url": "https://pypi.org/project/PyCY/", "platform": "win32", "project_url": "https://pypi.org/project/PyCY/", "project_urls": {"Homepage": "http://jbox.ultraemail.net:8000/~jbj1"}, "release_url": "https://pypi.org/project/PyCY/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "wrapper for windows CY type", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a binary Python extension that encapsulates Windows CY values. CY\nvalues are actually 64-bit signed integers that are implicitly scaled by 10e4,\nie. you can store fixed-point decimal numbers with 4 digits after the decimal\npoint. In Python when you get one of these back from a COM method it returns a\ntuple of two integers. This is generally not very useful, especially if you\nthink that you can turn around and assign this to some other COM object\u2019s\nproperty and expect that it will do the right thing (get the value as a CY\nvalue) \u2018cause it won\u2019t.</p>\n<p>This Python extension DLL doesn\u2019t solve the whole problem because since the\nCOM extensions for Python don\u2019t have any way of passing these values in their\nfull 64-bit glory (as near as I can tell) there are some numbers you just\nwouldn\u2019t be able to set.  This extension will at least though allow you to\nmanipulate these values. It has full Python numeric type support (you can add,\nsubtract, multiply, etc). It converts to and from a variety of types. I think\nthere are probably a few more features needed.</p>\n\n          </div>"}, "last_serial": 1753722, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "838c2cd3094e3af64bdb7262f8f54700", "sha256": "ab40ed842e53a2afdf79f70c47f9302ce2df4ef907c03b16dfeda72c13592ec5"}, "downloads": -1, "filename": "PyCY-1.0.0.zip", "has_sig": true, "md5_digest": "838c2cd3094e3af64bdb7262f8f54700", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3646, "upload_time": "2015-10-06T02:40:30", "upload_time_iso_8601": "2015-10-06T02:40:30.488666Z", "url": "https://files.pythonhosted.org/packages/02/54/2970805a3a4b3fe97a547b5b505c7927ced1bfb2eb6271fb95fd7753b9eb/PyCY-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "838c2cd3094e3af64bdb7262f8f54700", "sha256": "ab40ed842e53a2afdf79f70c47f9302ce2df4ef907c03b16dfeda72c13592ec5"}, "downloads": -1, "filename": "PyCY-1.0.0.zip", "has_sig": true, "md5_digest": "838c2cd3094e3af64bdb7262f8f54700", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3646, "upload_time": "2015-10-06T02:40:30", "upload_time_iso_8601": "2015-10-06T02:40:30.488666Z", "url": "https://files.pythonhosted.org/packages/02/54/2970805a3a4b3fe97a547b5b505c7927ced1bfb2eb6271fb95fd7753b9eb/PyCY-1.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:07:32 2020"}