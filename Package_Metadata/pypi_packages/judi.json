{"info": {"author": "Soumitra Pal", "author_email": "soumitrakp@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# JUDI - Bioinformatics Pipeline: *Just Do It*\n\n*judi* comes from the idea of bringing the power and efficiency of *doit* to\nexecute any kind of task under many combinations of parameter settings.\n\n\n## Sample Code\n\nSnippet from [tutorial](https://judi.readthedocs.io/tutorial_1.html), save it as ``dodo.py``.\n\n```python\nfrom judi import File, Task, add_param, combine_csvs\n\nadd_param('100 101 102 103'.split(), 'sample')\nadd_param('1 2'.split(), 'group')\n\nREF = 'hg_refs/hg19.fa'\npath_gen = lambda x: '{}_{}.fq'.format(x['sample'],x['group'])\n\nclass AlignFastq(Task):\n  inputs = {'reads': File('orig_fastq', path = path_gen)}\n  targets = {'sai': File('aln.sai')}\n  actions = [('bwa aln {} {} > {}', [REF,'$reads','$sai'])]\n\nclass CreateBam(Task):\n  mask = ['group']\n  inputs = {'reads': AlignFastq.inputs['reads'],\n             'sai': AlignFastq.targets['sai']}\n  targets = {'bam': File('aln.bam', mask = mask)}\n  actions = [('bwa sampe {} {} {} | samtools view -Sbh - | samtools sort - > {}', [REF,'$sai','$reads','$bam'])]\n\nclass GetCoverage(Task):\n  mask = ['group']\n  inputs = {'bam': CreateBam.targets['bam']}\n  targets = {'cov': File('cov.csv', mask = mask)}\n  actions = [('(echo val; samtools rmdup {} - | samtools mpileup - | cut -f4) > {}', ['$bam','$cov'])]\n\nclass CombineCoverage(Task):\n  mask = ['group', 'sample']\n  inputs = {'cov': GetCoverage.targets['cov']}\n  targets = {'csv': File('combined.csv', mask = mask),\n             'pdf': File('pltcov.pdf', mask = mask, root = '.')}\n  actions = [(combine_csvs, ['#cov', '#csv']),\n             (\"\"\"echo \"library(ggplot2); pdf('{}')\n              ggplot(read.csv('{}'), aes(x = val)) +\n              geom_density(aes(color = factor(sample)))\"\\\n              | R --vanilla\"\"\", ['$pdf','$csv'])]\n```\nRun from terminal:\n\n```console\n$ doit list\nAlignFastq\nCombineCoverage\nCreateBam\nGetCoverage\n$ doit\n. AlignFastq:group~1,sample~100\n. AlignFastq:group~2,sample~100\n. AlignFastq:group~1,sample~101\n. AlignFastq:group~2,sample~101\n. AlignFastq:group~1,sample~102\n. AlignFastq:group~2,sample~102\n. AlignFastq:group~1,sample~103\n. AlignFastq:group~2,sample~103\n. CreateBam:sample~100\n. CreateBam:sample~102\n. CreateBam:sample~103\n. CreateBam:sample~101\n. GetCoverage:sample~100\n. GetCoverage:sample~102\n. GetCoverage:sample~103\n. GetCoverage:sample~101\n. CombineCoverage:\n```\n\n## Project Details\n\n - Website & docs - [https://pyjudi.readthedocs.io](https://pyjudi.readthedocs.io)\n - Project management on github - [https://github.com/ncbi/JUDI](https://github.com/ncbi/JUDI)\n\n## License\n\nThe MIT License\nCopyright (c) 2019-2020 Soumitra Pal\n\nsee LICENSE file\n\n\n## Install\n\n*judi* is tested on python 3.6.\n\n```console\n$ pip install judi\n```\n\n## Dependencies\n\n- doit\n\n## Documentation\n\n``docs`` folder contains ReST documentation based on Sphinx.\n\n```console\n$ make html\n```\n\n## Contributing\n\nOn github create pull requests using a named feature branch.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ncbi/JUDI", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "judi", "package_url": "https://pypi.org/project/judi/", "platform": "", "project_url": "https://pypi.org/project/judi/", "project_urls": {"Homepage": "https://github.com/ncbi/JUDI"}, "release_url": "https://pypi.org/project/judi/0.0.0.2/", "requires_dist": null, "requires_python": "", "summary": "A Software Workflow Management System Based on DoIt", "version": "0.0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JUDI - Bioinformatics Pipeline: <em>Just Do It</em></h1>\n<p><em>judi</em> comes from the idea of bringing the power and efficiency of <em>doit</em> to\nexecute any kind of task under many combinations of parameter settings.</p>\n<h2>Sample Code</h2>\n<p>Snippet from <a href=\"https://judi.readthedocs.io/tutorial_1.html\" rel=\"nofollow\">tutorial</a>, save it as <code>dodo.py</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">judi</span> <span class=\"kn\">import</span> <span class=\"n\">File</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">add_param</span><span class=\"p\">,</span> <span class=\"n\">combine_csvs</span>\n\n<span class=\"n\">add_param</span><span class=\"p\">(</span><span class=\"s1\">'100 101 102 103'</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(),</span> <span class=\"s1\">'sample'</span><span class=\"p\">)</span>\n<span class=\"n\">add_param</span><span class=\"p\">(</span><span class=\"s1\">'1 2'</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(),</span> <span class=\"s1\">'group'</span><span class=\"p\">)</span>\n\n<span class=\"n\">REF</span> <span class=\"o\">=</span> <span class=\"s1\">'hg_refs/hg19.fa'</span>\n<span class=\"n\">path_gen</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">_</span><span class=\"si\">{}</span><span class=\"s1\">.fq'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'sample'</span><span class=\"p\">],</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'group'</span><span class=\"p\">])</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AlignFastq</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n  <span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'reads'</span><span class=\"p\">:</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">'orig_fastq'</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path_gen</span><span class=\"p\">)}</span>\n  <span class=\"n\">targets</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'sai'</span><span class=\"p\">:</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">'aln.sai'</span><span class=\"p\">)}</span>\n  <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'bwa aln </span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\"> &gt; </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">REF</span><span class=\"p\">,</span><span class=\"s1\">'$reads'</span><span class=\"p\">,</span><span class=\"s1\">'$sai'</span><span class=\"p\">])]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CreateBam</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n  <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'group'</span><span class=\"p\">]</span>\n  <span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'reads'</span><span class=\"p\">:</span> <span class=\"n\">AlignFastq</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">'reads'</span><span class=\"p\">],</span>\n             <span class=\"s1\">'sai'</span><span class=\"p\">:</span> <span class=\"n\">AlignFastq</span><span class=\"o\">.</span><span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"s1\">'sai'</span><span class=\"p\">]}</span>\n  <span class=\"n\">targets</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'bam'</span><span class=\"p\">:</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">'aln.bam'</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">)}</span>\n  <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'bwa sampe </span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\"> | samtools view -Sbh - | samtools sort - &gt; </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">REF</span><span class=\"p\">,</span><span class=\"s1\">'$sai'</span><span class=\"p\">,</span><span class=\"s1\">'$reads'</span><span class=\"p\">,</span><span class=\"s1\">'$bam'</span><span class=\"p\">])]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">GetCoverage</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n  <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'group'</span><span class=\"p\">]</span>\n  <span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'bam'</span><span class=\"p\">:</span> <span class=\"n\">CreateBam</span><span class=\"o\">.</span><span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"s1\">'bam'</span><span class=\"p\">]}</span>\n  <span class=\"n\">targets</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'cov'</span><span class=\"p\">:</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">'cov.csv'</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">)}</span>\n  <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'(echo val; samtools rmdup </span><span class=\"si\">{}</span><span class=\"s1\"> - | samtools mpileup - | cut -f4) &gt; </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'$bam'</span><span class=\"p\">,</span><span class=\"s1\">'$cov'</span><span class=\"p\">])]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CombineCoverage</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n  <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'group'</span><span class=\"p\">,</span> <span class=\"s1\">'sample'</span><span class=\"p\">]</span>\n  <span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'cov'</span><span class=\"p\">:</span> <span class=\"n\">GetCoverage</span><span class=\"o\">.</span><span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"s1\">'cov'</span><span class=\"p\">]}</span>\n  <span class=\"n\">targets</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'csv'</span><span class=\"p\">:</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">'combined.csv'</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">),</span>\n             <span class=\"s1\">'pdf'</span><span class=\"p\">:</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">'pltcov.pdf'</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"s1\">'.'</span><span class=\"p\">)}</span>\n  <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">combine_csvs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'#cov'</span><span class=\"p\">,</span> <span class=\"s1\">'#csv'</span><span class=\"p\">]),</span>\n             <span class=\"p\">(</span><span class=\"s2\">\"\"\"echo \"library(ggplot2); pdf('</span><span class=\"si\">{}</span><span class=\"s2\">')</span>\n<span class=\"s2\">              ggplot(read.csv('</span><span class=\"si\">{}</span><span class=\"s2\">'), aes(x = val)) +</span>\n<span class=\"s2\">              geom_density(aes(color = factor(sample)))\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">              | R --vanilla\"\"\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'$pdf'</span><span class=\"p\">,</span><span class=\"s1\">'$csv'</span><span class=\"p\">])]</span>\n</pre>\n<p>Run from terminal:</p>\n<pre><span class=\"gp\">$</span> doit list\n<span class=\"go\">AlignFastq</span>\n<span class=\"go\">CombineCoverage</span>\n<span class=\"go\">CreateBam</span>\n<span class=\"go\">GetCoverage</span>\n<span class=\"gp\">$</span> doit\n<span class=\"go\">. AlignFastq:group~1,sample~100</span>\n<span class=\"go\">. AlignFastq:group~2,sample~100</span>\n<span class=\"go\">. AlignFastq:group~1,sample~101</span>\n<span class=\"go\">. AlignFastq:group~2,sample~101</span>\n<span class=\"go\">. AlignFastq:group~1,sample~102</span>\n<span class=\"go\">. AlignFastq:group~2,sample~102</span>\n<span class=\"go\">. AlignFastq:group~1,sample~103</span>\n<span class=\"go\">. AlignFastq:group~2,sample~103</span>\n<span class=\"go\">. CreateBam:sample~100</span>\n<span class=\"go\">. CreateBam:sample~102</span>\n<span class=\"go\">. CreateBam:sample~103</span>\n<span class=\"go\">. CreateBam:sample~101</span>\n<span class=\"go\">. GetCoverage:sample~100</span>\n<span class=\"go\">. GetCoverage:sample~102</span>\n<span class=\"go\">. GetCoverage:sample~103</span>\n<span class=\"go\">. GetCoverage:sample~101</span>\n<span class=\"go\">. CombineCoverage:</span>\n</pre>\n<h2>Project Details</h2>\n<ul>\n<li>Website &amp; docs - <a href=\"https://pyjudi.readthedocs.io\" rel=\"nofollow\">https://pyjudi.readthedocs.io</a></li>\n<li>Project management on github - <a href=\"https://github.com/ncbi/JUDI\" rel=\"nofollow\">https://github.com/ncbi/JUDI</a></li>\n</ul>\n<h2>License</h2>\n<p>The MIT License\nCopyright (c) 2019-2020 Soumitra Pal</p>\n<p>see LICENSE file</p>\n<h2>Install</h2>\n<p><em>judi</em> is tested on python 3.6.</p>\n<pre><span class=\"gp\">$</span> pip install judi\n</pre>\n<h2>Dependencies</h2>\n<ul>\n<li>doit</li>\n</ul>\n<h2>Documentation</h2>\n<p><code>docs</code> folder contains ReST documentation based on Sphinx.</p>\n<pre><span class=\"gp\">$</span> make html\n</pre>\n<h2>Contributing</h2>\n<p>On github create pull requests using a named feature branch.</p>\n\n          </div>"}, "last_serial": 5259239, "releases": {"0.0.0.1": [{"comment_text": "", "digests": {"md5": "573bb4796e9a70e3c2a52fcc6a23d50a", "sha256": "c0643bc0e0a2221555a9d49fa715b9ea9dedacd22f60fe401d3870489562ad1b"}, "downloads": -1, "filename": "judi-0.0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "573bb4796e9a70e3c2a52fcc6a23d50a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4950, "upload_time": "2019-04-26T21:43:34", "upload_time_iso_8601": "2019-04-26T21:43:34.466785Z", "url": "https://files.pythonhosted.org/packages/2a/de/69bd2567c3a7344cc085297bef13ec9a43acbb5735a47406caf0dded709e/judi-0.0.0.1-py3-none-any.whl", "yanked": false}], "0.0.0.2": [{"comment_text": "", "digests": {"md5": "d6920a3585828a952ece034f98fd6a09", "sha256": "4204cd9e6ab279da6a96c787b902c328054811615f4c440d1da463f80e3ae387"}, "downloads": -1, "filename": "judi-0.0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6920a3585828a952ece034f98fd6a09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10478, "upload_time": "2019-05-12T16:01:50", "upload_time_iso_8601": "2019-05-12T16:01:50.433998Z", "url": "https://files.pythonhosted.org/packages/c6/bc/27528b0aabc79897418d45915494cfd55a7d77ab9478e1881972d0ad61a7/judi-0.0.0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6920a3585828a952ece034f98fd6a09", "sha256": "4204cd9e6ab279da6a96c787b902c328054811615f4c440d1da463f80e3ae387"}, "downloads": -1, "filename": "judi-0.0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6920a3585828a952ece034f98fd6a09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10478, "upload_time": "2019-05-12T16:01:50", "upload_time_iso_8601": "2019-05-12T16:01:50.433998Z", "url": "https://files.pythonhosted.org/packages/c6/bc/27528b0aabc79897418d45915494cfd55a7d77ab9478e1881972d0ad61a7/judi-0.0.0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:28 2020"}